import{_ as d,o as n,c as i,a as t,m as c,t as l,C as g,M as b,U as w,f as h,F as y,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},O={class:"review-content"};function E(s,e,u,p,r,a){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(l(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",O,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(l(u.poem.solution),1)])])])}const N=d(k,[["render",E],["__scopeId","data-v-5ac6dd07"]]),A=JSON.parse('[{"question":"In a distant land called Algorithmia, there is a prestigious sword-fighting school where students are trained to become elite fighters. Every student has a skill level, and in order to become a master, a student must participate in a series of duals with other students. Each day, the instructor pairs up students to fight in duals. Each dual consists of two students whose combined skill level doesn\'t exceed a maximum threshold m. Most importantly, every student can only participate in one dual per day. Your task is to determine the maximum number of duals that can take place each day for a given list of students\' skill levels and a skill threshold m. Input: The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100), where n is the number of students and m is the maximum allowed combined skill level for a dual. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 100), where si is the skill level of the i-th student. Output: Output a single integer denoting the maximum number of duals that can take place each day. Examples: Input: 4 5 1 2 3 4 Output: 2 Input: 5 8 3 3 3 3 3 Output: 2 Input: 3 10 1 2 3 Output: 1 Note: In the first sample, students can be paired as follows: (1, 4) and (2, 3), resulting in 2 duals. In the second sample, pairs can be (3, 3), and another pair of (3, 3), resulting in 2 duals. In the third sample, the only possible pairs are (1, 2) and 3 remains without a pair, resulting in 1 dual.","solution":"def max_duals(n, m, skills): # Sort the skill levels in ascending order skills.sort() # Initialize pointers to the start and end of the list left = 0 right = n - 1 duals_count = 0 # Use a two-pointer approach to pair students while left < right: # Check if the current pair is valid if skills[left] + skills[right] <= m: # If so, it forms a valid dual duals_count += 1 # Move both pointers inward left += 1 right -= 1 else: # Otherwise, move the right pointer to a lower value right -= 1 return duals_count"},{"question":"You are given an endless stream of integers and a sliding window of size `k`. Your task is to write a function that processes the stream to continuously find the maximum integer in the current window of size `k`, and output this maximum value each time the window moves by one position. If the window reaches the end of the stream, the function should terminate. For example, if the stream is [1, 3, -1, -3, 5, 3, 6, 7] and k = 3, then the function should output: 3, 3, 5, 5, 6, 7. Input - The first line contains integer k (1 ≤ k ≤ 105), the size of the sliding window. - The second line should continuously read the integers a[1], a[2], ..., a[n] from the stream, where the size of n is unknown and the values can be between -109 and 109. Output Continuously print the maximum integer in the current sliding window of size k each time it moves by one position, until there are no more integers left in the stream. Example Input 3 1 3 -1 -3 5 3 6 7 Output 3 3 5 5 6 7 Additional notes: The function should maintain efficiency and process the stream in an optimal manner, ensuring it continuously reads and processes new integers without unnecessary delays. The result should be updated and printed for each position of the sliding window, demonstrating real-time processing of the data stream.","solution":"from collections import deque import sys def sliding_window_maximum(k, stream): Processes the stream to continuously find the maximum integer in the current window of size k. q = deque() # Will store indices of potential max elements result = [] # Store the results for testing purposes for i, num in enumerate(stream): # Remove the elements indices from deque which are out of bound for the window if q and q[0] == i - k: q.popleft() # Remove elements from deque which are less than current element while q and stream[q[-1]] < num: q.pop() q.append(i) # Record the maximum values from current window if i >= k - 1: result.append(stream[q[0]]) print(stream[q[0]]) # Print max in the sliding window return result"},{"question":"Implement a function `min_operations_to_transpose(matrix)` that calculates the minimum number of operations required to convert a given square matrix into its transpose. An operation is defined as swapping any two elements in the matrix. # Funciton Signature: ```python def min_operations_to_transpose(matrix: List[List[int]]) -> int: pass ``` # Input - `matrix` : `List[List[int]]` (a list of lists of integers), representing an `n x n` square matrix (1 <= n <= 1000, 0 <= matrix[i][j] <= 1000) # Output - An integer which is the minimum number of operations to make `matrix` equal to its transpose # Example ```python matrix = [ [1, 3, 5], [3, 2, 8], [5, 8, 6] ] print(min_operations_to_transpose(matrix)) # Output: 0 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(min_operations_to_transpose(matrix)) # Output: 3 ``` # Constraints - When matrix is already a transpose of itself, the output should be 0. - Each operation can swap any two elements in the matrix.","solution":"from typing import List def min_operations_to_transpose(matrix: List[List[int]]) -> int: n = len(matrix) ops = 0 for i in range(n): for j in range(i + 1, n): if matrix[i][j] != matrix[j][i]: ops += 1 return ops"},{"question":"Given an array of N integers, define a \\"wavy\\" array as an array where each element is either greater than or less than both of its neighbors. Your task is to determine if an array is \\"wavy\\" or not. Input: The first line contains a single integer N. The second line contains N space-separated integers a1, a2, ..., aN. Output: Output \\"Yes\\" if the array is \\"wavy\\", otherwise output \\"No\\". Constraints: 2 ≤ N ≤ 10^3 1 ≤ ai ≤ 10^6 where i=1, 2, 3 ... N SAMPLE INPUT 5 1 3 2 4 3 SAMPLE OUTPUT Yes Explanation: The array [1, 3, 2, 4, 3] is \\"wavy\\" because: - 3 > 1 and 3 > 2 - 2 < 3 and 2 < 4 - 4 > 2 and 4 > 3","solution":"def is_wavy(arr): Returns \\"Yes\\" if the array is wavy, otherwise returns \\"No\\". n = len(arr) for i in range(1, n - 1): if not ((arr[i] > arr[i - 1] and arr[i] > arr[i + 1]) or (arr[i] < arr[i - 1] and arr[i] < arr[i + 1])): return \\"No\\" return \\"Yes\\""},{"question":"Given two integers A and B, you need to determine the maximum value of expression (C % A) + (C % B), where C can be any positive integer. Input The first line contains an integer T denoting the number of test cases. Each of the following T lines contains two integers A and B for that test case. Output For each test case, output a single line containing the maximum value of the expression as described above. Constraints 1 ≤ T ≤ 1000 1 ≤ A, B ≤ 10^9 Example Input: 2 2 3 5 7 Output: 4 11 Explanation First Example: The maximum value of (C % 2) + (C % 3) is 4, where C is 4. Second Example: The maximum value of (C % 5) + (C % 7) is 11, where C is 11.","solution":"def max_expression_value(a, b): Function to calculate the maximum value of (C % A) + (C % B). return a + b - 2 def solve(t, test_cases): results = [] for a, b in test_cases: results.append(max_expression_value(a, b)) return results"},{"question":"In a small factory, machines are used to create different types of widgets. The factory operates in shifts, and during each shift, one worker is assigned to a machine to produce a certain number of widgets. The factory wants to optimize the production and ensure that as many workers as possible get opportunities to work on different machines across multiple shifts optimally. Your task is to write a program that simulates the assignment of workers to machines over a series of shifts. Each worker can work on a machine for one shift at a time. Workers may work multiple shifts but cannot work in consecutive shifts on the same machine. The factory director also wants to enforce that no worker should work on the machine they worked on during the previous shift. The factory has specific constraints: - Each machine must have one worker for each shift. - A shift cannot go unassigned. Given the number of machines, number of workers, and number of shifts, determine a possible assignment or output that it is not possible to assign workers under the given constraints. The input includes the following: - The number of machines (M). - The number of workers (W). - The number of shifts (S). The input follows this format: ``` M W S ``` Assume that M, W, S are integers such that 1 ≤ M ≤ 100, 1 ≤ W ≤ 100, 1 ≤ S ≤ 1000. Your task is to output an assignment of workers to machines for every shift or indicate that it is not possible to assign workers. # Input The first line contains three integers, M, W, and S, representing the number of machines, workers, and shifts, respectively. # Output If a valid assignment is possible, output \\"YES\\" followed by S lines where each line contains M integers representing the worker assignments for that shift. If it is not possible to assign workers under the given constraints, output \\"NO\\". # Example Input ``` 3 3 3 ``` Output ``` YES 1 2 3 2 3 1 3 1 2 ``` Input ``` 2 1 3 ``` Output ``` NO ```","solution":"def assign_workers_to_machines(M, W, S): if M > W: return \\"NO\\" result = [[0] * M for _ in range(S)] for shift in range(S): for machine in range(M): result[shift][machine] = (machine + shift) % W + 1 return \\"YESn\\" + \\"n\\".join(\\" \\".join(map(str, shift)) for shift in result) # Example usages # print(assign_workers_to_machines(3, 3, 3)) # Expected Output: YES ... (workers assigned in round-robin fashion) # print(assign_workers_to_machines(2, 1, 3)) # Expected Output: NO (not enough workers for the machines)"},{"question":"You are a biologist studying the behavior of rabbits in a new environment. There are n species of rabbits in the area, where n is a power of two, and each species follows a unique pattern of actions each day. The environment being studied has m unique actions that a rabbit can perform, indexed from 1 to m. Your task is to determine the sequence of actions performed by each rabbit species over the period of d days. You have created an observation window of length k (1 ≤ k ≤ n ≤ 1024, k and n are powers of two) which allows you to record the series of actions performed by a selected rabbit species over a certain number of consecutive days. You can perform either of the following two actions: 1. **Record Actions**: Choose one rabbit species and record the series of actions it performs over the next k days. 2. **Reset Window**: Clear the observation window to start recording from a fresh state. You need to minimize the number of resets while ensuring that you record the complete action sequence of each rabbit species. Input The first line contains three integers n, m, and k (1 ≤ k ≤ n ≤ 1024, k and n are powers of two). Interaction You start the interaction by reading n, m, and k. - To record the actions of a given rabbit species for the next k days, output the line: `? r` where `r` is the index of the rabbit species (1 ≤ r ≤ n). In response, you will receive a sequence of k integers, each between 1 and m, representing the actions performed by the rabbit species over k days. - To reset the observation window, output the single letter `R` in upper case. There is no limit to the number of times you can reset the observation window. When you have determined the complete action sequences for each rabbit species, output: `!` Followed by n lines, each containing the complete sequence of actions for a rabbit species. Example Input ``` 4 5 2 ``` Output ``` ? 1 1 2 ? 2 3 4 ? 3 2 5 R ? 3 1 2 ! 1 2 3 4 2 5 1 2 ... ``` Note: In the example, there are 4 species of rabbits and 5 possible unique actions. Your observation window allows you to record 2 consecutive days of actions. You will query species 1, 2, and 3, record their actions, and use a reset to start fresh for species 3 again if needed to obtain the complete action sequences. The output should list the recorded sequences for each species.","solution":"def rabbit_behavior(n, m, k, record_action): Determine the sequence of actions performed by each rabbit species over d days. Args: n : int : Number of rabbit species (power of 2) m : int : Number of unique actions k : int : Length of observation window (power of 2) record_action : function : A function to record the actions of a given rabbit species. It takes an integer (species index) as parameter and returns a list of length k representing the actions over k days. Returns: List[List[int]] : A nested list where each inner list contains the complete sequence of actions for a rabbit species. action_sequences = [None] * n for i in range(1, n+1): action_sequences[i-1] = record_action(i) return action_sequences"},{"question":"Felix the cat needs your help! Felix has n different toys scattered around the house. Each toy has a specific energy level associated with it, and Felix wants to play with one of the toys that will leave him with the highest overall energy. However, Felix\'s energy decreases as he traverses from one toy to another. Felix can start at any toy, but as he moves from toy i to toy j, his energy will decrease by the absolute difference between their positions (i and j), and Felix\'s remaining energy after playing with a toy is the energy level of that toy minus the total energy lost while moving. Help Felix determine the maximum energy he can have after playing with one toy. Input The first line contains one integer number n (1 ≤ n ≤ 2·10^5) — the number of toys. Then n lines follow, each of them containing one integer number ei (0 ≤ ei ≤ 10^9) denoting the energy level of the i-th toy. Output Print the maximum energy Felix can have after playing with one toy. Examples Input 3 10 20 30 Output 30 Input 4 5 10 3 50 Output 50 Input 5 1 3 5 7 9 Output 9 Note Consider the first example: Felix can choose to start and play with the third toy directly, resulting in the highest possible energy of 30. In the second example: Felix can choose to start and play with the fourth toy directly, resulting in the highest possible energy of 50.","solution":"def max_energy(toy_energies): Returns the maximum energy Felix can have after playing with one toy. return max(toy_energies)"},{"question":"Julie, an adventurer, is on a quest to find a hidden treasure in a dungeon. The dungeon is represented as a grid with ( n ) rows and ( m ) columns. Each cell in the grid contains a value that represents the number of coins in that cell. Julie can start from any cell on the top row and make her way to the bottom row. From any cell, she can move only to the cell directly below it, the cell to the left below it, or the cell to the right below it. Write a function to find the maximum number of coins Julie can collect if she follows the optimal path from any cell in the top row to any cell in the bottom row. # Input - The first line contains two integers ( n ) and ( m ) (1 ≤ n, m ≤ 300), the number of rows and columns in the grid. - Each of the next ( n ) lines contains ( m ) integers representing the number of coins in each cell of the grid. # Output - Output a single integer representing the maximum number of coins Julie can collect. # Example Input ``` 3 4 1 3 3 2 2 1 4 1 0 6 4 7 ``` Output ``` 12 ``` Explanation Julie can start from cell (0,1) with 3 coins, move to cell (1,2) with 4 coins, and then move to cell (2,3) with 7 coins. Total coins collected: (3 + 4 + 7 = 14). There is no better path which collects more than 14 coins. # Note Ensure that your function efficiently handles larger grids up to the size limit.","solution":"def max_coins(n, m, grid): Find the maximum number of coins Julie can collect starting from any cell in the top row and moving to the bottom row. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param grid: 2D list representing the dungeon grid with coins in each cell. :return: The maximum number of coins that can be collected. # Create a dp array initialized with the same values as grid dp = [[0]*m for _ in range(n)] for col in range(m): dp[0][col] = grid[0][col] # Fill dp array using bottom-up approach for row in range(1, n): for col in range(m): # Coins from directly above max_coins = dp[row-1][col] # Coins from above left (if not out of bounds) if col - 1 >= 0: max_coins = max(max_coins, dp[row-1][col-1]) # Coins from above right (if not out of bounds) if col + 1 < m: max_coins = max(max_coins, dp[row-1][col+1]) dp[row][col] = grid[row][col] + max_coins # The answer is the max value in the last row of dp array return max(dp[n-1])"},{"question":"Given a sequence of integers, you want to find out the length of the longest subsequence that is not strictly decreasing. A subsequence is derived by deleting some or none of the elements without changing the order of the remaining elements. For example, consider the sequence [9, 8, 7, 6, 3, 0]. The longest non-decreasing subsequence could be [9], [8], [7], [6], [3], or [0], each of length 1. However, in the sequence [1, 3, 2, 4, 5], the longest non-decreasing subsequence could be [1, 3, 4, 5], which is of length 4. Write a function that computes the length of the longest non-decreasing subsequence for a given sequence of integers. Input The first line of the input contains an integer n (1 ≤ n ≤ 50) representing the length of the sequence. The second line contains n integers denoting the sequence a1, a2, ..., an (−1000 ≤ ai ≤ 1000). Output Output the length of the longest non-decreasing subsequence. Examples Input 6 9 8 7 6 3 0 Output 1 Input 5 1 3 2 4 5 Output 4","solution":"def longest_non_decreasing_subsequence(sequence): Returns the length of the longest non-decreasing subsequence in the given sequence. n = len(sequence) if n == 0: return 0 # Initialize the dp array where each dp[i] will store the length of the longest # non-decreasing subsequence ending at index i dp = [1] * n for i in range(1, n): for j in range(i): if sequence[i] >= sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"In the mystical land of Multivectoria, there is a unique method of teleportation using a network of teleportation pods. Each pod can teleport an object to another pod if there\'s a direct connection between them. The teleportation network can be represented as a graph where nodes are pods and edges are direct connections between them. The Council of Multivectoria wants to ensure that their teleportation network remains efficient by keeping the number of direct connections (edges) to a minimum, yet still ensuring that every pod is accessible from any other pod. Your task is to help the Council determine the minimal number of direct connections required to keep all pods connected. Input The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. For each test case, the first line will contain two integers n (1 ≤ n ≤ 10000) and m (0 ≤ m ≤ 20000) representing the number of pods and the number of existing direct connections, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing a direct connection between pod u and pod v. Output For each test case, print a single line with a single integer, the minimal number of direct connections required to keep all pods connected. Examples Input 2 4 2 1 2 3 4 5 3 1 2 3 4 4 5 Output 3 4 Note In the first test case, you can add one direct connection to make all pods accessible, such as connecting 2 to 3. In the second test case, you can add one direct connection to make all pods accessible, such as connecting 2 to 3, adding a total of 4 direct connections.","solution":"def find_min_edges_to_connect_all_pods(test_cases): results = [] def dfs(node, visited, graph): stack = [node] while stack: current = stack.pop() if not visited[current]: visited[current] = True for neighbor in graph[current]: if not visited[neighbor]: stack.append(neighbor) for n, m, connections in test_cases: if n == 1: results.append(0) continue graph = [[] for _ in range(n + 1)] visited = [False] * (n + 1) for u, v in connections: graph[u].append(v) graph[v].append(u) components = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, visited, graph) components += 1 results.append(components - 1) return results"},{"question":"Problem Create a function that helps in controlling the inventory of an e-commerce platform. The function should determine the final quantity of each item after a series of operations. Each operation can either add or remove a certain number of items from the inventory. The operations are provided in the form of a list of strings, where each string represents a single operation. The format of each string is either: - \\"Add X items of type Y\\" or - \\"Remove X items of type Y\\" Where X is an integer and Y is a string representing the item type. If the operation tries to remove more items than available, it should only remove the available quantity and set the inventory count for that item to zero. The function should return a dictionary containing the final quantity of each item type in the inventory after all operations are applied. Constraints The input will satisfy the following conditions: - 1 ≤ number of operations ≤ 100 - 1 ≤ X (items) ≤ 1000 Input The input consists of a list of strings as described above. Output The output should be a dictionary where the key is the item type (string) and the value is the remaining quantity (integer) of that type in the inventory. Example Input [ \\"Add 10 items of type A\\", \\"Remove 5 items of type A\\", \\"Add 7 items of type B\\", \\"Remove 10 items of type A\\", \\"Add 3 items of type A\\" ] Output { \\"A\\": 3, \\"B\\": 7 }","solution":"def manage_inventory(operations): Manages the inventory based on the given operations. Parameters: operations (list): List of operations in the form of strings. Returns: dict: Dictionary with final quantities of each item type. inventory = {} for operation in operations: parts = operation.split() quantity = int(parts[1]) item_type = parts[-1] if parts[0] == \\"Add\\": if item_type in inventory: inventory[item_type] += quantity else: inventory[item_type] = quantity elif parts[0] == \\"Remove\\": if item_type in inventory: inventory[item_type] = max(0, inventory[item_type] - quantity) else: inventory[item_type] = 0 return inventory"},{"question":"A company wants to celebrate its anniversary by organizing a series of events. They want to distribute gifts to attendees for each event. Each gift has a cost, and the company has a limited budget. The company\'s goal is to maximize the number of gifts while ensuring the total cost of the distributed gifts does not exceed the budget. Each event must distribute at least one gift, and the number of gifts distributed to an event cannot exceed the number of attendees at that event. Write a function `distributeGifts(budget, attendees, gift_costs)` that determines the maximum number of gifts that can be distributed under these conditions. **Input:** - `budget` (1 ≤ budget ≤ 10^4): an integer representing the total budget available. - `attendees` (1 ≤ len(attendees) ≤ 100): a list of integers where each integer represents the number of attendees for an event. - `gift_costs` (1 ≤ len(gift_costs) ≤ 100): a list of integers where each integer represents the cost of a gift. **Output:** - Return the maximum number of gifts that can be distributed. **Example:** Input: ```python budget = 50 attendees = [3, 5, 2] gift_costs = [4, 2, 9] ``` Output: ```python 12 ``` Explanation: The company can distribute gifts as follows: - Event 1: 3 gifts (each costing 2, total cost 6) - Event 2: 5 gifts (each costing 2, total cost 10) - Event 3: 2 gifts (each costing 9, total cost 18) Total gifts: 3 + 5 + 2 = 10 Total cost: 6 + 10 + 18 = 34 (within the budget)","solution":"def distributeGifts(budget, attendees, gift_costs): Return the maximum number of gifts that can be distributed without exceeding the budget. # Initialize lists to store the cost per attendee for each event cost_distribution = [(attendees[i] * cost, attendees[i]) for i, cost in enumerate(gift_costs)] # Sort based on cost per attendee cost_distribution.sort(key=lambda x: x[0]) total_gifts = 0 total_cost = 0 for cost, people in cost_distribution: if total_cost + cost <= budget: total_gifts += people total_cost += cost else: break # No point in continuing if the budget is exceeded return total_gifts"},{"question":"You have a collection of rare artefacts stored in a network of vaults connected by corridors. Each corridor has a security system installed that triggers and locks down the corridor permanently after it has been reset twice. The artefacts need to be safeguarded but sometimes require maintenance, which necessitates moving through the vault system. The vaults and corridors form a tree where: - Each of the n vaults (numbered from 1 to n) is connected by n-1 corridors. - You can travel between any two vaults through one or more corridors. Your task is to design a method to traverse the vaults starting from vault 1, which is your base, to ensure that you can visit each vault for maintenance purposes without ever triggering a security lock. You need to determine an efficient and systematic traversal method to minimize the risk of triggering the lockdown, considering that once a corridor is reset twice, you cannot traverse it again. # Input - The first line contains a single integer n (2 ≤ n ≤ 10⁵), denoting the number of vaults. - The next n-1 lines each contain three integers ai, bi, and ti (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ ti ≤ 1000). Here, ai and bi denote the vaults connected by the corridor, and ti denotes the time required to travel through that corridor. # Output - Print a single integer representing the minimum time required to traverse all the vaults for maintenance without triggering any security locks during the process. # Example Input ``` 3 1 2 1 2 3 2 ``` Output ``` 6 ``` # Notes - In the example provided, you need to visit all vaults starting from vault 1. The traversal path might be 1 -> 2 -> 3 -> 2 -> 1 to ensure that you visit each vault and return to your base without retriggering any corridor lockdowns. - All corridors are included in the computation of the total traversal time, and it should ensure no corridor is reset more than twice in this traversal process.","solution":"def min_traversal_time(n, corridors): from collections import defaultdict, deque # Create adjacency list to store vault connections and travel times graph = defaultdict(list) for ai, bi, ti in corridors: graph[ai].append((bi, ti)) graph[bi].append((ai, ti)) # Total minimal time for traversing all corridors twice (since it\'s a tree, n-1 corridors) total_traversal_time = 0 def dfs(vault, parent): nonlocal total_traversal_time for neighbor, travel_time in graph[vault]: if neighbor != parent: # Travel to the neighbor and back total_traversal_time += 2 * travel_time dfs(neighbor, vault) # Start DFS from vault 1 (base) dfs(1, -1) return total_traversal_time"},{"question":"# Merge Overlapping Intervals You are given a collection of intervals, where each interval is represented as a pair of numbers [start, end]. The intervals may overlap or be disjoint. Your task is to merge all overlapping intervals and return a collection of merged intervals in sorted order. Input Format: - The first line contains a number `t` - denoting the number of test cases. - For each test case, the first line contains an integer `n` - denoting the number of intervals. - Each of the next `n` lines contains two integers `start` and `end` representing an interval. Output Format: - For each test case, print the merged intervals in sorted order. Constraints: - 1 ≤ t ≤ 10 - 1 ≤ n ≤ 100 - -10^4 ≤ start ≤ end ≤ 10^4 SAMPLE INPUT 2 3 1 3 2 6 8 10 4 1 4 4 5 7 8 10 12 SAMPLE OUTPUT 1 6 8 10 1 5 7 8 10 12","solution":"def merge_intervals(intervals): Merges overlapping intervals and returns the merged intervals in sorted order. Args: intervals (list of list of int): A list of intervals represented as [start, end] Returns: list of list of int: A list of merged intervals in sorted order. if not intervals: return [] intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1][1] = max(merged[-1][1], interval[1]) return merged def process_input(test_cases): results = [] for intervals in test_cases: merged_intervals = merge_intervals(intervals) results.append(merged_intervals) return results"},{"question":"Alex and Bob are playing a special number game. The game starts with a number `n` and proceeds as follows: - On Alex\'s turn, he can always subtract 1 from the number. - On Bob\'s turn, if the number is greater than 1, he can either: - Subtract 1 from the number, or - If the number is even, divide it by 2. Alex goes first, and they alternate turns. The player who cannot make a move loses the game. Determine the winner if both players play optimally for each game. # Input The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. Each test case consists of a single integer `n` (1 ≤ n ≤ 10^9). # Output For each test case, print \\"Alex\\" if he wins, and \\"Bob\\" otherwise without quotes. # Example Input ``` 5 1 2 3 4 5 ``` Output ``` Alex Alex Bob Alex Bob ``` # Explanation - In the first test case, n = 1. Alex cannot make any move at the start, so he loses. - In the second test case, n = 2. Alex subtracts 1 making it 1, and Bob cannot make a move, so Alex wins. - In the third test case, n = 3. Alex subtracts 1 making it 2, and Bob divides by 2 making it 1. Alex cannot make a move, so Bob wins. - In the fourth test case, n = 4. Alex subtracts 1 making it 3, and Bob is forced to subtract again making it 2. Alex subtracts 1 making it 1, and Bob loses. - In the fifth test case, n = 5. Alex subtracts 1 making it 4, and Bob divides by 2 making it 2. Alex subtracts 1 making it 1, and Bob cannot make a move, so Bob wins.","solution":"def determine_winner(n): Determine the winner of the game given the starting number n. If Alex wins, return \\"Alex\\", otherwise return \\"Bob\\". # If n is 1, Alex cannot make a move at the start and loses. if n == 1: return \\"Bob\\" # For all other cases, we follow the rules of the game. # The optimal strategy gives the following pattern: # If n is even, Alex wins. # If n is odd, Bob wins. elif n % 2 == 0: return \\"Alex\\" else: return \\"Bob\\" def game_outcomes(t, cases): Determine the winner for each game in the list of cases. t: integer, number of test cases cases: list of integers, each representing the initial number n in a test case results = [] for n in cases: results.append(determine_winner(n)) return results"},{"question":"The city of Optimus is organizing a marathon with n participants. Each participant has a unique runner ID and a stamina level. They start from the same point and run towards the finish line by following a predetermined trail with various checkpoints. As the organizer, you need to account for potential detours that participants might take. Each participant might decide to take a rest at a checkpoint. If a participant rests at a checkpoint, they temporarily do not move forward until they finish resting. For each participant, you are given the time they take to reach each checkpoint if they do not rest, as well as a rest time they might take at some checkpoint. Each participant can only take one rest once throughout the race. You need to determine the minimum time required for each participant to reach the finish line, considering their most optimal resting strategy (including the possibility of not resting at all). Input The first line of input contains an integer n (1 ≤ n ≤ 105) – the number of participants. The next n lines describe each participant. The first number is an integer t (1 ≤ t ≤ 105) – the number of checkpoints on the trail. The next t integers are the times in seconds ti (1 ≤ ti ≤ 105) the participant takes to reach each respective checkpoint without resting. The last integer on each of these lines is r (0 ≤ r ≤ 105) – the rest time in seconds if the participant decides to rest at any checkpoint. Output Output n lines. Each line should contain a single integer – the minimum time required for the respective participant to reach the finish line considering their optimal resting strategy. Examples Input 3 4 2 4 5 6 3 3 5 3 6 2 5 2 3 4 5 1 0 Output 20 15 14 Explanation For the first participant: - Without resting: 2 + 4 + 5 + 6 = 17 - Taking rest at checkpoint 2: 2 + (4 + 3) + 5 + 6 = 20 - Taking rest at checkpoint 3: 2 + 4 + (5 + 3) + 6 = 20 - Taking rest at checkpoint 4: 2 + 4 + 5 + (6 + 3) = 20 Thus, the minimum time is 17 (without resting). For the second participant: - Without resting: 5 + 3 + 6 = 14 - Taking rest at checkpoint 1: (5 + 2) + 3 + 6 = 16 - Taking rest at checkpoint 2: 5 + (3 + 2) + 6 = 16 - Taking rest at checkpoint 3: 5 + 3 + (6 + 2) = 16 Thus, the minimum time is 14 (without resting). For the third participant: - Without resting: 2 + 3 + 4 + 5 + 1 = 15 - Taking rest at any checkpoint doesn\'t change the total time since rest time r = 0. Thus, the minimum time is 15 (without resting).","solution":"def minimum_time(n, participants): Calculate the minimum time required for each participant to reach the finish line. Args: n (int): Number of participants. participants (list): List of lists, where each sublist contains checkpoint times followed by rest time for a participant. Returns: list: Minimum time required for each participant. minimum_times = [] for participant in participants: t = participant[0] # number of checkpoints times = participant[1:t + 1] rest_time = participant[t + 1] total_time_without_rest = sum(times) min_time = total_time_without_rest for checkpoint_time in times: time_with_rest = total_time_without_rest + rest_time min_time = min(min_time, time_with_rest) minimum_times.append(min_time) return minimum_times"},{"question":"You are given two strings s and t. You need to transform string s into string t using the following operations: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. 3. Replace a character at any position in the string with another character. You need to determine the minimum number of operations required to transform string s into string t. Input The input consists of two lines: - The first line contains the string s (1 ≤ |s| ≤ 1000), the original string. - The second line contains the string t (1 ≤ |t| ≤ 1000), the target string. Output Print a single integer — the minimum number of operations required to transform string s into string t. Examples Input horse ros Output 3 Input intention execution Output 5 Note In the first example, you can transform \\"horse\\" into \\"ros\\" with the following 3 operations: 1. Replace \\"h\\" with \\"r\\" (horse -> rorse). 2. Remove \\"r\\" (rorse -> rose). 3. Remove \\"e\\" (rose -> ros). In the second example, you can transform \\"intention\\" into \\"execution\\" with the following 5 operations: 1. Replace \\"i\\" with \\"e\\" (intention -> entention). 2. Replace \\"n\\" with \\"x\\" (entention -> extention). 3. Replace \\"t\\" with \\"e\\" (extention -> exection). 4. Insert \\"u\\" at position 5 (exection -> execuion). 5. Insert \\"t\\" at position 6 (execuion -> execution).","solution":"def min_edit_distance(s, t): Returns the minimum number of operations required to transform string s into string t. m, n = len(s), len(t) # Create a (m+1)x(n+1) matrix to store the edit distances dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s is empty, all characters in t need to be inserted elif j == 0: dp[i][j] = i # If t is empty, all characters in s need to be removed elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation needed else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"# Problem Statement A company is implementing a file storage system that organizes files in a hierarchical manner, similar to a file system in a computer. Each file has a unique identifier and can belong to a folder. Each folder can also contain other folders and files. The objective is to create a system to manage and query this hierarchical structure. You are asked to design a command-line interface (CLI) to perform the following operations: 1. `mkdir path`: Creates a new folder at the specified path. 2. `addfile path file_id`: Adds a file with the given file_id to the specified path. 3. `ls path`: Lists all files and folders present at the specified path. Assume the root directory is `/` and paths are presented in a Unix-like manner. # Input The input consists of a series of commands. Each command is provided on a new line. - `mkdir path` - `addfile path file_id` - `ls path` # Output For the `ls` command, print the contents of the specified path. Each item in the folder should be printed on a new line. # Rules and Constraints 1. Folder names and file identifiers are strings consisting of lowercase English letters and/or numbers. 2. Paths and file identifiers are case-sensitive. 3. The root directory is represented by `/`. 4. Any attempt to create a directory or add a file in a nonexistent path should be ignored without any error. 5. Each command is guaranteed to be valid in terms of syntax. 6. There are at most 10^4 commands. # Examples **Input** ``` mkdir /a mkdir /a/b addfile /a file1 addfile /a/b file2 ls /a ls /a/b mkdir /a/c ls /a ``` **Output** ``` b file1 file2 b c file1 ``` **Explanation** 1. Create a folder `/a`. 2. Inside `/a`, create another folder `/a/b`. 3. Add a file with identifier `file1` to folder `/a`. 4. Add a file with identifier `file2` to folder `/a/b`. 5. List contents of `/a` which includes the folder `b` and file `file1`. 6. List contents of `/a/b` which includes the file `file2`. 7. Inside `/a`, create another folder `/a/c`. 8. List contents of `/a` which now includes the folders `b`, `c` and file `file1`. # Implementation Your task is to implement the above operations to correctly handle the input and output, adhering to the specification and constraints provided.","solution":"class FileSystem: def __init__(self): self.fs = {\'/\': {\'folders\': {}, \'files\': set()}} def mkdir(self, path): path_parts = path.strip(\'/\').split(\'/\') current_dir = self.fs[\'/\'] for part in path_parts: if part not in current_dir[\'folders\']: current_dir[\'folders\'][part] = {\'folders\': {}, \'files\': set()} current_dir = current_dir[\'folders\'][part] def addfile(self, path, file_id): path_parts = path.strip(\'/\').split(\'/\') current_dir = self.fs[\'/\'] for part in path_parts: if part in current_dir[\'folders\']: current_dir = current_dir[\'folders\'][part] else: return # if path does not exist, ignore without error current_dir[\'files\'].add(file_id) def ls(self, path): path_parts = path.strip(\'/\').split(\'/\') current_dir = self.fs[\'/\'] for part in path_parts: if part == \'\': continue if part in current_dir[\'folders\']: current_dir = current_dir[\'folders\'][part] else: return [] # if path does not exist, return empty list items = sorted(current_dir[\'folders\'].keys()) + sorted(current_dir[\'files\']) return items"},{"question":"Tree Diameter A tree is an undirected graph in which any two vertices are connected by exactly one path. Given the number of nodes `n` in the tree and the list of `n-1` edges, your task is to find the diameter of the tree. The diameter of a tree is the length of the longest path between any two vertices in the tree. You should write a function that takes the number of nodes `n` and a list of edges, where each edge is represented as a tuple of two integers indicating the nodes connected by that edge, and returns the diameter of the tree. # Input - An integer `n`, the number of nodes in the tree (1 ≤ n ≤ 1000). - A list of `n-1` tuples, each containing two integers representing the edges of the tree. # Output - An integer representing the diameter of the tree. # Function Signature ```python def tree_diameter(n: int, edges: List[Tuple[int, int]]) -> int: pass ``` # Example Input ```python n = 5 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] ``` Output ```python 3 ``` Input ```python n = 3 edges = [(1, 2), (2, 3)] ``` Output ```python 2 ``` # Note 1. In the first example, the longest path is from node 2 to node 4 or node 2 to node 5 with length 3. 2. In the second example, the longest path is from node 1 to node 3 with length 2.","solution":"from typing import List, Tuple from collections import deque, defaultdict def tree_diameter(n: int, edges: List[Tuple[int, int]]) -> int: if n == 1: return 0 def bfs(start_node): queue = deque([start_node]) distances = {start_node: 0} farthest_node = start_node max_distance = 0 while queue: current = queue.popleft() current_distance = distances[current] for neighbor in graph[current]: if neighbor not in distances: queue.append(neighbor) distances[neighbor] = current_distance + 1 if distances[neighbor] > max_distance: max_distance, farthest_node = distances[neighbor], neighbor return farthest_node, max_distance # Step 1: Create the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Step 2: Find the farthest node from any node (let\'s start from node 1) farthest_node, _ = bfs(1) # Step 3: Find the farthest node from the previously found farthest node _, diameter = bfs(farthest_node) return diameter"},{"question":"You are given a list of n integers representing the heights of n students standing in a row. The heights are distinct integers ranging from 1 to n, where each integer represents the height of a student. Your task is to determine the length of the longest subsequence in which students are standing in non-decreasing order of their heights. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Input The first line of input contains a single integer n (1 ≤ n ≤ 10^3) — the number of students. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ n) where hi is the height of the i-th student. Output Print a single integer — the length of the longest non-decreasing subsequence of students\' heights. Examples Input 5 3 10 2 1 20 Output 3 Input 6 3 2 6 4 5 1 Output 3 Note In the first sample, one of the longest non-decreasing subsequences is [3, 10, 20], which has a length of 3. In the second sample, one of the longest non-decreasing subsequences is [2, 4, 5], which has a length of 3.","solution":"def length_of_LIS(heights): Returns the length of longest non-decreasing subsequence of students\' heights. if not heights: return 0 n = len(heights) dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"There is a new construction project in the town, and to manage the traffic efficiently, the town authorities have decided to create a temporary network of one-way roads. The network consists of n intersections and m one-way roads. Your task is to determine the minimum number of one-way roads required to connect all intersections such that every intersection is reachable from any other intersection, directly or indirectly. A network of n intersections with m roads is given as a directed graph with n vertices and m edges. The goal is to return the minimum number of additional one-way roads needed to make the graph strongly connected. Input The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) - the number of intersections and the number of one-way roads, respectively. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), meaning there is a one-way road from intersection u to intersection v. Output Print a single integer representing the minimum number of additional one-way roads required. Example Input 6 5 1 2 2 3 3 1 4 5 5 6 Output 2 Explanation In this example, there are 2 disconnected components: {1, 2, 3} and {4, 5, 6}. To make the graph strongly connected, we need at least two additional roads: one connecting an intersection from the first component to an intersection from the second component, and another connecting an intersection from the second component back to the first component. For example: - Adding a road from 3 to 4 and from 6 to 1 makes the entire network strongly connected.","solution":"def find_min_roads_to_strong_connect(n, m, edges): import sys sys.setrecursionlimit(1500) from collections import defaultdict, deque def kosaraju(graph, n): visited = [False] * n order = [] scc = [] def dfs1(v): visited[v] = True for u in graph[v]: if not visited[u]: dfs1(u) order.append(v) def dfs2(v, component): visited[v] = True component.append(v) for u in reversed_graph[v]: if not visited[u]: dfs2(u, component) for i in range(n): if not visited[i]: dfs1(i) reversed_graph = defaultdict(list) for u in range(n): for v in graph[u]: reversed_graph[v].append(u) visited = [False] * n while order: v = order.pop() if not visited[v]: component = [] dfs2(v, component) scc.append(component) return scc graph = defaultdict(list) for u, v in edges: graph[u - 1].append(v - 1) scc = kosaraju(graph, n) scc_count = len(scc) if scc_count == 1: return 0 scc_graph = defaultdict(set) scc_indices = [0] * n for i, component in enumerate(scc): for node in component: scc_indices[node] = i for u in range(n): for v in graph[u]: if scc_indices[u] != scc_indices[v]: scc_graph[scc_indices[u]].add(scc_indices[v]) in_degrees = [0] * scc_count out_degrees = [0] * scc_count for u in range(scc_count): for v in scc_graph[u]: out_degrees[u] += 1 in_degrees[v] += 1 zero_in = sum(1 for deg in in_degrees if deg == 0) zero_out = sum(1 for deg in out_degrees if deg == 0) return max(zero_in, zero_out) # Example usage n, m = 6, 5 edges = [(1, 2), (2, 3), (3, 1), (4, 5), (5, 6)] print(find_min_roads_to_strong_connect(n, m, edges)) # Output: 2"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid has a value which represents the energy removed from a character when they step on that cell. However, there are certain \\"safe\\" cells, indicated by the value 0, which do not reduce the character\'s energy. The character starts at the top-left corner of the grid (position (1, 1)) and wants to reach the bottom-right corner of the grid (position (n, m)). The character can move only to the right or down to adjacent cells. Write a program to determine the minimum amount of energy the character needs to expend to reach the bottom-right corner of the grid from the top-left corner. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 300) — the number of rows and columns in the grid. - Each of the next `n` lines contains `m` integers, where each integer represents the energy value of that cell (0 ≤ value ≤ 100). # Output - Print a single integer — the minimum energy required for the character to reach the bottom-right corner of the grid from the top-left corner. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` Input ``` 2 2 0 0 0 0 ``` Output ``` 0 ``` # Note In the first example, the optimal path is: - (1,1) → (1,2) → (1,3) → (2,3) → (3,3) - The energy expanded along this path is 1 + 3 + 1 + 1 + 1 = 7","solution":"def min_energy(grid, n, m): dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row and column of energy values for i in range(1, m): dp[0][i] = dp[0][i - 1] + grid[0][i] for j in range(1, n): dp[j][0] = dp[j - 1][0] + grid[j][0] # Fill the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1]"},{"question":"You are designing an automatic alarm system for a building with a number of rooms. Each room can have a different threshold temperature indicating when an alarm should be triggered. When the temperature in any room exceeds its threshold, an alarm for that room sounds. All the alarms are timestamped with the exact time they are triggered. Your task is to process a series of temperature readings and determine if and when each room\'s alarm is triggered. You also need to track and output the count of alarms triggered in each room by the end of the processing. Input The first line contains a single integer n (1 ≤ n ≤ 10^4) — the number of rooms. The second line contains n integers, where the i-th integer t_i (1 ≤ t_i ≤ 100) represents the threshold temperature for the i-th room. The third line contains a single integer m (1 ≤ m ≤ 10^5) — the number of temperature readings. The next m lines each contain three pieces of information: a timestamp (a positive integer), an integer r (1 ≤ r ≤ n) indicating the room number, and an integer temp (1 ≤ temp ≤ 200) indicating the temperature reading in that room at that timestamp. Assume that temperature readings for a specific room are given in chronological order. Output Output n lines. The i-th line should contain two pieces of information: the number of alarms triggered in the i-th room and the timestamp of the last alarm triggered in that room. If no alarm was triggered in that room, print -1 for the timestamp. Examples Input 3 60 50 70 5 1 1 55 2 2 45 3 1 65 4 3 75 5 2 55 Output 1 3 1 5 1 4 Input 2 100 200 4 1 1 90 2 1 105 3 2 190 4 2 210 Output 1 2 1 4","solution":"def process_alarms(n, thresholds, m, readings): alarm_counts = [0] * n last_alarm_time = [-1] * n for timestamp, room, temp in readings: room_index = room - 1 if temp > thresholds[room_index]: alarm_counts[room_index] += 1 last_alarm_time[room_index] = timestamp result = [] for i in range(n): result.append(f\\"{alarm_counts[i]} {last_alarm_time[i]}\\") return result"},{"question":"We are planning an elaborate treasure hunt and need your help in setting it up. We have a set of islands arranged in a circular chain and we want to hide treasures on some of these islands. The treasure hunting process will start from a specific island and proceed in a clockwise manner. At each island, the treasure hunter can move to the next island in the circle, one island at a time. However, there are some traps set on certain islands which will prevent the treasure hunter from moving forward. If the hunter encounters a trap, they must skip that island and move to the next one. If there are multiple consecutive traps, the hunter will continue skipping until a non-trap island is found or they return to the starting island, completing the circle. Given the arrangement of the islands and their traps, we need to determine the number of unique islands the hunter can visit starting from each treasure location. Note that the hunter will stop their hunt and return to the starting island if they reach a trap. Help us compute this for each possible starting island. Input The first line contains a single integer n (3 ≤ n ≤ 100,000) — the number of islands in the circular chain. The second line contains n integers separated by spaces — the ith integer is 0 if island i has a trap, and 1 if it does not. Output Print n integers separated by spaces. The ith integer is the number of unique islands the treasure hunter can visit starting from island i. Examples Input 5 1 1 0 1 0 Output 2 1 1 1 1 Input 4 1 0 1 0 Output 1 1 1 1 Input 6 1 1 1 1 1 1 Output 6 6 6 6 6 6 Explanation In the first example: - Starting from island 1, the treasure hunter can visit islands 1 and 2 before encountering the trap at island 3. - Starting from island 2, the treasure hunter can only visit island 2 before encountering the trap at island 3. - Starting from islands 3, 4, and 5, the treasure hunter cannot proceed beyond each respective starting island due to traps. In the second example: - Starting from any island, the treasure hunter can only visit that island before encountering a trap on the next island. In the third example: - There are no traps, so starting from any island, the treasure hunter can visit all six islands in a circular manner.","solution":"def count_unique_islands(n, islands): results = [] for start in range(n): if islands[start] == 0: results.append(1) continue count = 0 for i in range(n): index = (start + i) % n if islands[index] == 0: break count += 1 results.append(count) return results # Input reading and function calling def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) islands = list(map(int, data[1:])) result = count_unique_islands(n, islands) print(\' \'.join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"You are tasked with improving a network management system. The system maintains a list of servers, each identified by a unique server ID. There are three types of operations you need to support: 1. For given server ID si and new load value li, update the load of server si to li. 2. For a range of server IDs [si, sj], find the server with the maximum load along with its load. 3. For a range of server IDs [si, sj], increase the load of every server within this range by a given value di. Your task is to implement this system. Input The first line contains two integers n and q (1 ≤ n, q ≤ 200,000) — the number of servers and the number of operations, respectively. The second line contains n integers l1, l2, ..., ln (0 ≤ li ≤ 100,000) — the initial load of each server. Each of the following q lines contains an operation to be performed, following the format described below: * If the operation is of the first type, the line starts with 1, followed by two integers si and li (1 ≤ si ≤ n, 0 ≤ li ≤ 100,000). * If the operation is of the second type, the line starts with 2, followed by two integers si and sj (1 ≤ si ≤ sj ≤ n). * If the operation is of the third type, the line starts with 3, followed by three integers si, sj, and di (1 ≤ si ≤ sj ≤ n, 0 ≤ di ≤ 100,000). Output For each operation of the second type, print the server ID and the load of the server with the maximum load within the specified range. Example Input 5 5 1 3 5 2 4 2 1 4 1 3 6 2 1 5 3 2 4 3 2 1 5 Output 3 5 3 6 2 9","solution":"class NetworkManagementSystem: def __init__(self, loads): self.loads = loads def update_load(self, si, li): self.loads[si - 1] = li def max_load(self, si, sj): max_load_server = si max_load_value = self.loads[si - 1] for i in range(si, sj + 1): if self.loads[i - 1] > max_load_value: max_load_value = self.loads[i - 1] max_load_server = i return max_load_server, max_load_value def increase_load(self, si, sj, di): for i in range(si, sj + 1): self.loads[i - 1] += di"},{"question":"Vasya also likes to solve puzzles and has recently come across a new kind of puzzle called \\"String Swap\\". He decided to find the number of ways to transform one string into another by performing exactly one swap of two characters. You are given two strings, `s` and `t`, of equal length consisting of lowercase English letters. You need to determine the number of ways to make the strings equal by swapping exactly one pair of characters in the string `s`. Example: If `s = \\"abcd\\"` and `t = \\"abdc\\"`, you can swap \'c\' and \'d\' in `s` to make it equal to `t`. Input The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the strings. The second line contains the string `s` of length `n`. The third line contains the string `t` of length `n`. Output Print the number of ways to make the strings equal by exactly one swap of two characters in `s`. Examples Input 4 abcd abdc Output 1 Input 5 abcde abced Output 1 Input 3 abc bca Output 0","solution":"def count_swaps_to_equal(s, t): This function takes two strings s and t, and determines the number of ways to make the strings equal by swapping exactly one pair of characters in s. Parameters: - s: str, the original string - t: str, the target string Returns: - int, the number of ways to make s equal to t by exactly one swap # If s and t are already equal, no swap is needed, return 0 if s == t: return 0 # Find the positions where s and t differ different_positions = [(i, s[i], t[i]) for i in range(len(s)) if s[i] != t[i]] # If the number of different positions is not exactly 2, return 0 if len(different_positions) != 2: return 0 # Extract the positions and the characters at those positions (i1, s1, t1), (i2, s2, t2) = different_positions # Check if swapping the characters at these positions in s will make s equal to t if s1 == t2 and s2 == t1: return 1 else: return 0"},{"question":"Write a program that simulates a data compression algorithm. Given a string of lowercase letters, output the length of the string after compressing it using the following rule: If a character repeats consecutively, it should be compressed into one instance of the character followed by the number of consecutive occurrences. If the compressed string is longer than the original string, the original string should be maintained. For example, the string \\"aaabbcc\\" should be compressed to \\"a3b2c2\\", while the string \\"abcd\\" should remain as \\"abcd\\". Input: A line containing a single string consisting of lowercase English letters. The length of the string will not exceed 1000 characters. Output: Output the length of the compressed string if it is shorter than the original string. Otherwise, output the length of the original string. Example: Input: aaabbcc Output: 6 Input: abcd Output: 4","solution":"def compress_string_length(s): Compresses the given string using the specified rule and returns the length of the compressed string if it is shorter than the original string, otherwise returns the length of the original string. if not s: return 0 compressed_string = [] count_consecutive = 0 for i in range(len(s)): count_consecutive += 1 if i + 1 >= len(s) or s[i] != s[i + 1]: compressed_string.append(s[i] + str(count_consecutive)) count_consecutive = 0 compressed_string = \'\'.join(compressed_string) if len(compressed_string) >= len(s): return len(s) else: return len(compressed_string)"},{"question":"Square Matrix Rotation Write a program to rotate a given NxN square matrix 90 degrees clockwise. Constraints * 1 leq N leq 100 * Each element in the matrix is an integer between -1000 and 1000 Input The first line contains a single integer N, the size of the NxN matrix. The next N lines contain N integers each, representing the matrix. Output Output the newly rotated NxN matrix. Example Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates a given NxN square matrix 90 degrees clockwise. N = len(matrix) # The result matrix initialized with zeros result = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): result[j][N-1-i] = matrix[i][j] return result def read_matrix_and_rotate(matrix_lines): Helper function to read the matrix from a list of strings and apply the rotation. N = int(matrix_lines[0].strip()) matrix = [list(map(int, line.strip().split())) for line in matrix_lines[1:]] rotated_matrix = rotate_matrix_90_degrees_clockwise(matrix) return rotated_matrix def matrix_to_string(matrix): Helper function to convert the matrix into a formatted string. return \'n\'.join(\' \'.join(map(str, row)) for row in matrix)"},{"question":"On a mysterious island, a special game is played called \\"Paratroop\\". In this game, participants, called \'Jumpers\', jump off a cliff and descend with parachutes at a certain speed depending on the altitude. The rate of descent, however, declines linearly with decreasing altitude. Your task is to calculate the total time required for a Jumper to land safely on the ground from a given initial height with an initial descent rate. The specifications are as follows: * The rate of descent decreases by 0.1 m/s² for every meter descended. * A Jumper must not exceed the rate of descent of 10 m/s² at any point during the descent. Determine the total time a Jumper will take to descend safely to the ground. Constraints * 1 leq H leq 10^4 (height in meters) * 1 leq R leq 100 (initial rate of descent in m/s) Input Input is given from Standard Input in the following format: H R Output Print the total time in seconds that the Jumper will take to land safely on the ground. Output is considered correct if its absolute difference from the judge\'s output is at most 10^{-3}. Examples Input 50 5 Output 20.000 Input 100 15 Output 10.000 Input 200 8 Output 40.000 Input 10000 100 Output 50.000","solution":"def calculate_descent_time(height, initial_rate): Calculate the total descent time of a Jumper. Parameters: height (int): The initial height in meters. initial_rate (int): The initial descent rate in m/s. Returns: float: The total time in seconds required for the Jumper to land safely. return height / initial_rate"},{"question":"You are given a list of strings representing durations of various activities in the format \\"hh:mm:ss\\", where \'hh\' represents hours, \'mm\' represents minutes, and \'ss\' represents seconds. Each string may also have some leading and trailing whitespace. Your task is to calculate the total duration of all activities combined and format the result in the same \\"hh:mm:ss\\" format. Input format The first line contains a single integer N denoting the number of durations. The next N lines contain a string Di denoting the duration in \\"hh:mm:ss\\" format for each i-th activity. Output format Print the total duration as a single string in \\"hh:mm:ss\\" format. Ensure each component (hh, mm, ss) is of two digits. Constraints 1 ≤ N ≤ 500 |Di| = 8 for each valid i SAMPLE INPUT 3 01:23:45 02:34:56 03:45:07 SAMPLE OUTPUT 07:43:48 Explanation In the first sample test case, the durations are \\"01:23:45\\", \\"02:34:56\\", and \\"03:45:07\\". Adding them: Hours: 1 + 2 + 3 = 6 Minutes: 23 + 34 + 45 = 102 (which is 1 hour and 42 minutes, so we add 1 to hours) Seconds: 45 + 56 + 7 = 108 (which is 1 minute and 48 seconds, so we add 1 to minutes) Therefore, the total duration is \\"07:43:48\\".","solution":"def total_duration(durations): Calculates the total duration from a list of durations in \\"hh:mm:ss\\" format. Args: durations (list): List of strings representing durations. Returns: str: Total duration in \\"hh:mm:ss\\" format. total_hours, total_minutes, total_seconds = 0, 0, 0 for duration in durations: duration = duration.strip() hours, minutes, seconds = map(int, duration.split(\':\')) total_hours += hours total_minutes += minutes total_seconds += seconds # Convert seconds to minutes if they exceed 60 total_minutes += total_seconds // 60 total_seconds = total_seconds % 60 # Convert minutes to hours if they exceed 60 total_hours += total_minutes // 60 total_minutes = total_minutes % 60 return \\"{:02}:{:02}:{:02}\\".format(total_hours, total_minutes, total_seconds)"},{"question":"Millie loves baking cookies! She has a list of cookie recipes, each requiring a different set of ingredients in specific quantities. Her pantry contains a limited amount of each ingredient. Given her current supplies, Millie wants to maximize the number of cookies she can bake using her favorite recipe. Write a program that finds the maximum number of cookies Millie can bake with the ingredients she has on hand. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000), the number of different ingredients in the recipe. The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 1000) representing the quantity of each ingredient required to bake a single cookie. The third line contains n integers s1, s2, ..., sn (0 ≤ si ≤ 1000000) representing the quantity of each ingredient currently available in Millie’s pantry. Output Output a single integer, the maximum number of cookies Millie can bake with the available ingredients. Example Input 3 4 2 5 20 8 25 Output 4 Explanation In this example, the recipe requires: - 4 units of the first ingredient - 2 units of the second ingredient - 5 units of the third ingredient Millie has: - 20 units of the first ingredient - 8 units of the second ingredient - 25 units of the third ingredient Using the minimum ratio of available to required ingredients, she can bake: - 20 // 4 = 5 cookies (first ingredient) - 8 // 2 = 4 cookies (second ingredient) - 25 // 5 = 5 cookies (third ingredient) Thus, Millie can bake a maximum of 4 cookies.","solution":"def max_cookies(n, required, available): Calculates the maximum number of cookies that can be baked. Parameters: n (int): Number of different ingredients. required (list of int): Quantities of each ingredient required to bake one cookie. available (list of int): Quantities of each ingredient available. Returns: int: Maximum number of cookies that can be baked. min_cookies = float(\'inf\') for req, avail in zip(required, available): max_cookies = avail // req min_cookies = min(min_cookies, max_cookies) return min_cookies"},{"question":"A cargo company has a fleet of trucks, each with a certain maximum capacity. They need to load these trucks with packages to deliver to various locations. Each package has a specific weight, and the goal is to maximize the utilization of each truck by distributing the packages such that the total weight in each truck does not exceed its capacity. You need to write a program that takes the maximum capacity of the trucks and the weights of the packages, and returns the number of trucks needed to transport all the packages. Each truck can carry any number of packages as long as the total weight does not exceed the maximum capacity. Input - The first line contains an integer `c` (1 ≤ c ≤ 100), the maximum capacity of each truck. - The second line contains an integer `n` (1 ≤ n ≤ 1000), the number of packages. - The third line contains `n` space-separated integers `w1, w2, ..., wn` (1 ≤ wi ≤ c), representing the weights of the packages. Output - Output a single integer, the minimum number of trucks required to transport all the packages. Example **Input:** ``` 10 5 2 3 8 4 6 ``` **Output:** ``` 3 ``` **Explanation:** - One possible distribution could be: - Truck 1 carries packages with weights 8 and 2 (total weight = 10). - Truck 2 carries packages with weights 6 and 4 (total weight = 10). - Truck 3 carries the package with weight 3.","solution":"def min_trucks_needed(c, packages): Function to calculate the minimum number of trucks required to carry all given packages, such that no truck carries more than its capacity. :param c: int - maximum capacity of each truck :param packages: List[int] - list of weights of packages :return: int - minimum number of trucks required # Sort packages in descending order to try and fit the heaviest items first packages.sort(reverse=True) # List to store the remaining capacity of each truck trucks = [] for weight in packages: # Try to fit the package into an existing truck with enough remaining capacity placed = False for i in range(len(trucks)): if trucks[i] >= weight: trucks[i] -= weight placed = True break # If the package couldn\'t be placed in any existing truck, add a new truck if not placed: trucks.append(c - weight) # The number of trucks used is the length of the trucks list return len(trucks)"},{"question":"Given a list of integers, find the number of pairs (i, j) such that 1 ≤ i < j ≤ N and the sum of elements at indices i and j is an even number. The target is to maximize the count of such pairs. Constraints * 1 ≤ N ≤ 100,000 * 1 ≤ a_i ≤ 10^9 (1 ≤ i ≤ N) Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Output Print the number of pairs (i, j) such that the sum of elements at a_i and a_j is an even number. Examples Input 4 1 2 3 4 Output 2 Input 5 1 3 5 7 9 Output 10 Input 6 2 4 6 8 10 12 Output 15","solution":"def count_even_sum_pairs(arr): Count the number of pairs (i, j) such that 1 ≤ i < j ≤ N and the sum of elements at i and j is an even number. Parameters: arr (list): List of integers Returns: int: Number of pairs with even sum # Count the number of even and odd numbers even_count = sum(1 for x in arr if x % 2 == 0) odd_count = len(arr) - even_count # Number of possible pairs of even numbers even_pairs = even_count * (even_count - 1) // 2 # Number of possible pairs of odd numbers odd_pairs = odd_count * (odd_count - 1) // 2 # Total pairs with even sum is sum of even pairs and odd pairs return even_pairs + odd_pairs # Sample example for self-verification if __name__ == \\"__main__\\": N = int(input()) arr = list(map(int, input().split())) print(count_even_sum_pairs(arr))"},{"question":"In a given dictionary, each entry consists of a word and its corresponding definition. You want to design an autocomplete feature where you can input a prefix and get all dictionary entries that start with that prefix, ordered lexicographically by word. Write a function that implements this feature. The function should accept two inputs: a list of dictionary entries where each entry is a tuple containing a word and its definition, and a prefix string. The function should output a list of dictionary entries whose words start with the given prefix, sorted lexicographically by the word. For example: Input: - A list of dictionary entries: [(\\"apple\\", \\"a fruit\\"), (\\"application\\", \\"a formal request\\"), (\\"banana\\", \\"a fruit\\"), (\\"apply\\", \\"make a formal request\\"), (\\"apology\\", \\"an expression of regret\\")] - Prefix: \\"app\\" Output: - A list of dictionary entries: [(\\"apple\\", \\"a fruit\\"), (\\"application\\", \\"a formal request\\"), (\\"apply\\", \\"make a formal request\\")] Function Signature: ```python def autocomplete(dictionary_entries: List[Tuple[str, str]], prefix: str) -> List[Tuple[str, str]]: ``` Input - dictionary_entries (List[Tuple[str, str]]): A list of tuples where each tuple contains a word and its definition. - prefix (str): A string prefix. Output - List[Tuple[str, str]]: A list of dictionary entries (tuples) sorted lexicographically by the word that starts with the given prefix. Constraints - All words consist of lowercase English letters. - 1 ≤ len(prefix) ≤ 100 - 1 ≤ len(dictionary_entries) ≤ 10^5 - 1 ≤ len(word), len(definition) ≤ 100 Example Input: dictionary_entries = [(\\"apple\\", \\"a fruit\\"), (\\"application\\", \\"a formal request\\"), (\\"banana\\", \\"a fruit\\"), (\\"apply\\", \\"make a formal request\\"), (\\"apology\\", \\"an expression of regret\\")] prefix = \\"app\\" Output: [(\\"apple\\", \\"a fruit\\"), (\\"application\\", \\"a formal request\\"), (\\"apply\\", \\"make a formal request\\")] Explanation: The words \\"apple\\", \\"application\\", and \\"apply\\" all start with \\"app\\" and are returned in lexicographical order.","solution":"from typing import List, Tuple def autocomplete(dictionary_entries: List[Tuple[str, str]], prefix: str) -> List[Tuple[str, str]]: result = [entry for entry in dictionary_entries if entry[0].startswith(prefix)] result.sort() return result"},{"question":"A company has decided to incentivize its employees based on their productivity. Each employee has a productivity score p_i. The company decides to form teams such that the total productivity score of each team is as evenly distributed as possible. Teams can only consist of exactly two employees. Given the productivity scores of n employees, your task is to form the maximum number of teams such that the absolute difference between the productivity scores of any two teams does not exceed a given threshold d. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n (2 ≤ n ≤ 50) — the number of employees, and d (0 ≤ d ≤ 100) — the maximum allowed difference between the productivity scores of any two teams. The second line of each test case contains n integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ 1000), where p_i is the productivity score of the i-th employee. Output For each test case, print one integer: the maximum number of teams that can be formed meeting the criterion. Example Input 3 4 10 20 30 25 40 6 5 10 15 20 25 30 35 5 0 8 8 8 8 8 Output 2 3 2 Note In the first test case, the optimal way to form teams is (20, 25) and (30, 25) which gives team scores of 45 and 55 respectively, leading to a difference of 10. In the second test case, the optimal teams would be (10, 15), (20, 25), and (30, 35) all differing by less than 5. In the third test case, you can form two teams: (8, 8) and (8, 8), both of which have the same score, meeting the criterion of d=0.","solution":"def max_teams(t, test_cases): def form_teams(n, d, productivity_scores): productivity_scores.sort() teams = 0 i = 0 while i < n - 1: if abs(productivity_scores[i] - productivity_scores[i + 1]) <= d: teams += 1 i += 2 else: i += 1 return teams results = [] for test in test_cases: n, d, productivity_scores = test results.append(form_teams(n, d, productivity_scores)) return results"},{"question":"You are given an array of N integers, and you need to find the second largest unique value from the array. If no such value exists (i.e., there isn\'t a second unique largest value), output -1. Constraints * 2 leq N leq 100000 * 1 leq A_i leq 10^9 * All values in the input are integers. Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Output the second largest unique value in the array, or -1 if no such value exists. Examples Input 6 3 1 4 4 5 6 Output 5 Input 4 7 7 7 7 Output -1 Input 5 10 20 20 20 30 Output 20 Input 3 1 2 2 Output 1","solution":"def second_largest_unique(arr): # Using set to find unique elements unique_elements = list(set(arr)) if len(unique_elements) < 2: return -1 # Sorting the unique elements in descending order unique_elements.sort(reverse=True) # The second largest unique value return unique_elements[1]"},{"question":"Given a list of words, you are to find and print the most frequent word. If two or more words have the same highest frequency, print the lexicographically smallest one among them. Input The input consists of up to 100 datasets. Each dataset is represented in the following format: The first line contains a single integer N (1 ≤ N ≤ 1000), the number of words in the dataset. The following N lines each contains one word consisting of lowercase English letters. The end of the input is represented by a single zero line. Output For each dataset, print the most frequent word. If there are multiple words with the same highest frequency, print the lexicographically smallest one. Sample Input 5 apple banana apple orange banana 4 apple apple banana banana 6 apple banana apple banana cherry cherry 0 Output for the Sample Input apple apple apple Example Input 5 apple banana apple orange banana 4 apple apple banana banana 6 apple banana apple banana cherry cherry 0 Output apple apple apple","solution":"def most_frequent_word(datasets): from collections import Counter results = [] for dataset in datasets: word_count = Counter(dataset) # Find the maximum frequency max_freq = max(word_count.values()) # Collect all words with the maximum frequency max_freq_words = [word for word, freq in word_count.items() if freq == max_freq] # Get the lexicographically smallest word with maximum frequency results.append(min(max_freq_words)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') datasets = [] dataset = [] for line in lines: if line == \'0\': if dataset: datasets.append(dataset) break elif line.isdigit(): if dataset: datasets.append(dataset) dataset = [] else: dataset.append(line) return datasets def get_most_frequent_in_datasets(input_str): datasets = parse_input(input_str) results = most_frequent_word(datasets) return results # Example of function usage input_str = 5 apple banana apple orange banana 4 apple apple banana banana 6 apple banana apple banana cherry cherry 0 output = get_most_frequent_in_datasets(input_str) for line in output: print(line)"},{"question":"Design a system that simulates a simple bank account. Implement a class named `BankAccount` that meets the following criteria: # Class: BankAccount **Attributes:** - `balance`: A float representing the current balance of the account. - `account_number`: A string representing a unique identifier for the account. **Methods:** 1. **`__init__(self, account_number: str, initial_balance: float = 0.0)`**: Initializes a new bank account with the provided account number and an optional initial balance (default is 0.0). 2. **`deposit(self, amount: float) -> None`**: Adds the specified amount to the account balance. Raise a `ValueError` if the deposit amount is not positive. 3. **`withdraw(self, amount: float) -> None`**: Subtracts the specified amount from the account balance. Raise a `ValueError` if the withdrawal amount is greater than the current balance or not positive. 4. **`get_balance(self) -> float`**: Returns the current account balance. **Input/Output:** - Your class should not read from input or print output directly. Instead, it should be tested using unit tests or similar testing frameworks. **Constraints:** - The account number must be a non-empty string consisting only of alphanumeric characters. - The initial balance cannot be negative. Here is an example usage of the `BankAccount` class: ```python # Create an account with an initial balance account = BankAccount(\'123ABC\', 100.0) print(account.get_balance()) # Output: 100.0 # Deposit money account.deposit(50.0) print(account.get_balance()) # Output: 150.0 # Withdraw money account.withdraw(20.0) print(account.get_balance()) # Output: 130.0 # Attempting to withdraw more than the balance should raise an error try: account.withdraw(200.0) except ValueError as e: print(e) # Output: Not enough balance # Attempting to use a negative or zero amount in deposit/withdraw should raise an error try: account.deposit(-25.0) except ValueError as e: print(e) # Output: Deposit amount must be positive try: account.withdraw(0.0) except ValueError as e: print(e) # Output: Withdrawal amount must be positive ``` **Task:** Implement the `BankAccount` class described above to fulfill all the requirements, including proper error handling as specified.","solution":"class BankAccount: def __init__(self, account_number: str, initial_balance: float = 0.0): if not account_number.isalnum() or not account_number: raise ValueError(\\"Account number must be a non-empty alphanumeric string.\\") if initial_balance < 0: raise ValueError(\\"Initial balance cannot be negative.\\") self.account_number = account_number self.balance = initial_balance def deposit(self, amount: float) -> None: if amount <= 0: raise ValueError(\\"Deposit amount must be positive.\\") self.balance += amount def withdraw(self, amount: float) -> None: if amount <= 0: raise ValueError(\\"Withdrawal amount must be positive.\\") if amount > self.balance: raise ValueError(\\"Not enough balance to withdraw the requested amount.\\") self.balance -= amount def get_balance(self) -> float: return self.balance"},{"question":"Fiona, an enthusiastic botanist, maintains a database of unique species of plants in her garden. She keeps records of each plant\'s name and the frequency of sighting for each season. Fiona wants a way to identify the most frequently sighted plant species for each season, to plan her research. Write a program to identify the plant species that was sighted the most in each season. If there is a tie (more than one species with the same maximum frequency in a season), then consider the species that comes first lexicographically. Input The first line contains an integer m (1 ≤ m ≤ 100), the number of recorded entries. Each of the following m lines contains a record in the format: `species_name season frequency` where `species_name` is a string with at most 50 characters, `season` is chosen from {\\"spring\\", \\"summer\\", \\"autumn\\", \\"winter\\"}, and `frequency` (1 ≤ frequency ≤ 1000) is an integer denoting how many times the species was sighted in that season. Output For each season (\\"spring\\", \\"summer\\", \\"autumn\\", \\"winter\\") in the order given, output the species name that was sighted the most during that season. If no species were sighted in a season, output \\"None\\". Examples Input 6 Rose spring 10 Tulip spring 15 Lily summer 5 Sunflower summer 10 Daisy autumn 12 Orchid autumn 12 Output Tulip Sunflower Daisy None Input 3 Tulip winter 7 Daisy spring 7 Sunflower autumn 8 Output Daisy None Sunflower Tulip Note In the first example, for spring, \\"Tulip\\" is the most sighted with 15 occurrences. For summer, \\"Sunflower\\" is the most sighted with 10 occurrences. For autumn, both \\"Daisy\\" and \\"Orchid\\" have 12 occurrences, but \\"Daisy\\" comes first lexicographically. There is no sighting for winter, so \\"None\\" is returned for winter.","solution":"def most_sighted_plants(m, records): from collections import defaultdict seasons = [\'spring\', \'summer\', \'autumn\', \'winter\'] season_dict = {season: defaultdict(int) for season in seasons} for record in records: species_name, season, frequency = record.split() frequency = int(frequency) season_dict[season][species_name] += frequency result = [] for season in seasons: if season_dict[season]: most_frequent_species = max(season_dict[season].items(), key=lambda x: (x[1], -ord(x[0][0]))) result.append(most_frequent_species[0]) else: result.append(\\"None\\") return result"},{"question":"Given an m x n 2D matrix matrix, handle multiple queries to compute the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). Implement a class `NumMatrix` with the following methods: - `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix matrix. - `int sumRegion(int row1, int col1, int row2, int col2)` Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). # Constraints * m == matrix.length * n == matrix[i].length * 1 <= m, n <= 200 * -10^5 <= matrix[i][j] <= 10^5 * 0 <= row1 <= row2 < m * 0 <= col1 <= col2 < n * At most 10^4 calls will be made to sumRegion. # Example Input ``` [\\"NumMatrix\\", \\"sumRegion\\", \\"sumRegion\\", \\"sumRegion\\"] [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]] ``` Output ``` [null, 8, 11, 12] ``` Explanation ``` NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]); numMatrix.sumRegion(2, 1, 4, 3); // return 8 numMatrix.sumRegion(1, 1, 2, 2); // return 11 numMatrix.sumRegion(1, 2, 2, 4); // return 12 ```","solution":"class NumMatrix: def __init__(self, matrix): Initializes the object with the integer matrix matrix. if not matrix: return self.m = len(matrix) self.n = len(matrix[0]) # Prefix sum matrix self.prefix_sum = [[0] * (self.n + 1) for _ in range(self.m + 1)] # Fill prefix sum matrix for i in range(self.m): for j in range(self.n): self.prefix_sum[i + 1][j + 1] = (self.prefix_sum[i + 1][j] + self.prefix_sum[i][j + 1] - self.prefix_sum[i][j] + matrix[i][j]) def sumRegion(self, row1, col1, row2, col2): Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). return (self.prefix_sum[row2 + 1][col2 + 1] - self.prefix_sum[row2 + 1][col1] - self.prefix_sum[row1][col2 + 1] + self.prefix_sum[row1][col1])"},{"question":"You are given a string consisting of lowercase letters and you need to determine if it can be a palindrome. However, the string may contain characters that need to be rearranged in order to form a palindrome. Write a program that checks if the string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if and only if at most one character has an odd count, while all other characters have even counts. Input The input is a single line containing a string of lowercase letters of length at most 100. Output Print \\"YES\\" if the string can be rearranged to form a palindrome. Print \\"NO\\" otherwise. Examples Input civic Output YES Input ivicc Output YES Input hello Output NO Input aabb Output YES","solution":"def can_form_palindrome(s): Determines if the string can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be a palindrome if at most one character has an odd count if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"In a magical land, you are given an initially empty string. You have to build a string with exactly m \'a\' characters and n \'b\' characters by following these operations: 1. Add \'a\' to the string. 2. Add \'b\' to the string. 3. Swap any two adjacent characters in the string. Your task is to determine if there exists a sequence of operations that can transform the initial empty string into such a string and return the length of the shortest possible string that can be formed. Input The first line of the input contains a single integer t (1 ≤ t ≤ 1000) — the number of testcases. Each of the following t lines contains two integers m and n (1 ≤ m, n ≤ 100). Output For each testcase, print a single integer — the length of the shortest possible string that can be formed. Example Input 4 3 2 5 5 1 4 2 1 Output 5 10 4 3 Note In the first testcase, the shortest string with 3 \'a\'s and 2 \'b\'s is \'aaabb\'.","solution":"def length_of_shortest_string(m, n): Returns the length of the shortest possible string that can be formed with m \'a\' characters and n \'b\' characters. return m + n def process_test_cases(test_cases): results = [] for m, n in test_cases: results.append(length_of_shortest_string(m, n)) return results"},{"question":"Write a program that calculates the sum of all distinct integers from a given list of numbers. Constraints * The number of integers in the list < 1000 * Each integer in the list is within the range -10^6 to 10^6 Input A list of integers is given in one line, separated by spaces. Output Print the sum of all unique integers in a line. Example Input 1 2 2 3 4 4 5 Output 15","solution":"def sum_of_unique_integers(numbers): Given a list of integers, return the sum of all unique integers. unique_numbers = set(numbers) return sum(unique_numbers) if __name__ == \\"__main__\\": import sys input_numbers = list(map(int, sys.stdin.read().strip().split())) print(sum_of_unique_integers(input_numbers))"},{"question":"In the bustling city of Byteville, there is a famous bakery called \\"Sweet Dreams,\\" known for its exquisite round cakes. Each cake is so delicious that customers often buy them in batches and cut them into slices to serve at parties. Recently, the bakery has started receiving customized orders where a customer specifies the total number of cakes they want and the specific number of slices each individual cake needs to be cut into. As the bakery expands, they\'ve hired you as a software engineer to help them manage their cake cutting orders more efficiently. You need to develop a function that, given the number of cakes and slices per cake, can determine all the possible ways to cut the entire batch such that each cake has a different number of slices, and the total number of slices from all cakes is exactly as required by the customer. Specifically, you need to find all sets of n unique positive integers (each representing the number of slices of a single cake) that sum up to a given total, where n is the number of cakes. Input - The first line contains two positive integers n and t (1 ≤ n ≤ 15, 1 ≤ t ≤ 100), representing the number of cakes and the total number of slices all n cakes should have combined. Output - Print all unique sets of positive integers whose sum is exactly t. Each set should be printed on a new line, with integers in ascending order and separated by a space. - If there are no possible sets, print \\"No solutions found.\\" Examples Input 3 6 Output 1 2 3 Input 4 10 Output 1 2 3 4 1 2 2 5 1 3 3 3 Note In the second example, the output lists all potential cutting plans for batches of 4 cakes to sum up to exactly 10 slices. The first line `1 2 3 4` represents a set of 4 cakes, with each cake having a different number of slices, and the total summing to 10.","solution":"from itertools import combinations def find_cake_slices_combinations(n, t): results = [] # Generate all combinations of n unique elements from the range 1 to t for comb in combinations(range(1, t+1), n): if sum(comb) == t: results.append(comb) if results: for result in results: print(\\" \\".join(map(str, result))) else: print(\\"No solutions found\\") # Example usage: # find_cake_slices_combinations(3, 6) # find_cake_slices_combinations(4, 10)"},{"question":"Alice loves organizing her bookshelf. She arranges the books in such a way that the titles of the books follow a lexicographical order. However, sometimes she gets new books with titles that might not fit into the current order. To keep her collection organized, Alice wants to determine the minimal number of books that need to be removed so that the remaining books are in strict lexicographical order. For a given sequence of book titles, decide the minimum number of books Alice needs to remove so that the remaining books are in lexicographical order. # Input - The first line contains an integer `n` — the number of books (1 ≤ n ≤ 10^5). - Each of the next `n` lines contains a single string `s` — the title of a book. The titles consist only of lowercase English letters and have a length of at most 20 characters. # Output - Print a single integer — the minimal number of books that need to be removed. # Example Input ``` 5 apple banana apricot blueberry mango ``` Output ``` 1 ``` Explanation In this example, the sequence `apple`, `banana`, `blueberry`, `mango` is in lexicographical order after removing `apricot`, so the output is 1. There could be other valid sequences as well. # Note To achieve the lexicographical order, it is not necessary for the books to be contiguous in the sequence as long as the remaining books are in strictly increasing lexicographical order.","solution":"def min_removals_for_lexicographical_order(n, books): Returns the minimal number of books that need to be removed so that the remaining books are in lexicographical order. from bisect import bisect_left # This will store the longest increasing subsequence lis = [] # Iterate through each book for book in books: pos = bisect_left(lis, book) if pos == len(lis): lis.append(book) else: lis[pos] = book # The number of removals needed return n - len(lis)"},{"question":"The company XYTech has several departments, each operating in their own building and connected via direct communication links. Each building is represented as a node, and each communication link is represented as an edge with an associated latency value. For the proper functioning of certain applications, it is crucial to minimize the maximum latency observed between any two buildings. Given this requirement, your task is to determine the minimum possible value of the maximum latency between any two buildings which ensures that all buildings are still connected. Input The input consists of two parts: - The first line contains two integers `n` (2 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 10000), where `n` is the number of buildings, and `m` is the number of communication links. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10000) representing a communication link between buildings `u` and `v` with a latency `w`. Output Print a single integer, the minimum possible value of the maximum latency between any two buildings that maintains network connectivity. Examples Input 4 5 1 2 4 2 3 5 3 4 6 4 2 2 1 3 8 Output 5 Input 3 3 1 2 1 2 3 2 1 3 3 Output 2","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def min_max_latency(n, m, edges): edges.sort(key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst = [] i = 0 e = 0 while e < n - 1: u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 mst.append(w) union(parent, rank, x, y) return max(mst) # Example usage: n = 4 m = 5 edges = [ (1, 2, 4), (2, 3, 5), (3, 4, 6), (4, 2, 2), (1, 3, 8) ] print(min_max_latency(n, m, edges)) # Output should be 5"},{"question":"A knight on a chessboard is placed at a starting position and needs to reach a target position. The board is an 8x8 grid with some squares blocked. The knight can move in an L-shape: either two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. Write a program to find the minimum number of moves required for the knight to reach the target position from the starting position while avoiding blocked squares. Input The first line of the input contains two integers x1 and y1 (1 ≤ x1, y1 ≤ 8) — the starting position of the knight. The second line of the input contains two integers x2 and y2 (1 ≤ x2, y2 ≤ 8) — the target position of the knight. The third line of the input contains an integer b (0 ≤ b ≤ 15) — the number of blocked squares. The next b lines each contain two integers xi and yi (1 ≤ xi, yi ≤ 8) — representing the coordinates of each blocked square. It is guaranteed that the starting position and the target position are not blocked. Output On the first line of the output print a single integer — the minimum number of moves required for the knight to reach the target position. If it is impossible for the knight to reach the target position, print -1. Example Input 1 1 8 8 3 3 3 4 4 5 5 Output 6 Input 2 2 8 7 5 3 3 4 4 5 5 6 6 7 7 Output 5 Note In the first example, the knight starts at position (1, 1) and must navigate around the blocked squares to reach the target position (8, 8). The minimum number of moves required is 6. In the second example, the knight starts at (2, 2) and must navigate around a series of blocked squares to reach (8, 7). The minimum number of moves required is 5.","solution":"from collections import deque def knight_min_moves(start, target, blocked): Find the minimum number of moves required for a knight to reach the target position from the starting position while avoiding blocked squares. # Directions in which a knight can move moves = [ (2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1) ] def is_inside_board(x, y): return 1 <= x <= 8 and 1 <= y <= 8 visited = set() blocked = set(blocked) queue = deque([(start[0], start[1], 0)]) # (x, y, moves) while queue: x, y, d = queue.popleft() # Check if we reached the target if (x, y) == target: return d if (x, y) in visited or (x, y) in blocked: continue visited.add((x, y)) # Explore all possible knight moves for dx, dy in moves: nx, ny = x + dx, y + dy if is_inside_board(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny, d + 1)) # If we exhaust all possibilities and don\'t reach the target return -1 def parse_input_and_run(x1, y1, x2, y2, b, blocked_squares): start = (x1, y1) target = (x2, y2) return knight_min_moves(start, target, blocked_squares)"},{"question":"Alice is organizing a marathon event. She has received M queries each asking for the number of steps a runner needs to complete to reach a certain milestone in the race. The route map of the marathon is given as a directed graph where each node represents a checkpoint and an edge between two nodes represents the direct route from one checkpoint to another. Each direct route has an associated number of steps. Help Alice by calculating the minimum steps required for each milestone query. INPUT The first line contains two integers N and E — the number of checkpoints and the number of direct routes between them, respectively. Each of the next E lines contains three integers u, v, and s — indicating a direct route from checkpoint u to checkpoint v with s steps. The next line contains an integer S — the starting checkpoint where the race begins. The following line contains an integer M — the number of milestone queries. Each of the next M lines contains a single integer Q — the checkpoint for which the query is being made. OUTPUT M lines, each containing an integer: the minimum number of steps required to reach the milestone checkpoint Q from the starting checkpoint S. If a checkpoint Q is not reachable from S, output -1 for that query. Constraints 1 ≤ N, E ≤ 10^3 1 ≤ u, v, S, Q ≤ N 0 ≤ s ≤ 10^6 1 ≤ M ≤ 10^3 SAMPLE INPUT 5 6 1 2 2 1 3 4 2 4 7 3 4 1 2 5 3 4 5 1 1 3 4 5 2 SAMPLE OUTPUT 4 10 3 Explanation SAMPLE CASE 1: The shortest path from checkpoint 1 to checkpoint 4 is: 1 -> 2 (2 steps) -> 4 (8 steps), giving a total of 10 steps. SAMPLE CASE 2: The shortest path from checkpoint 1 to checkpoint 5 is: 1 -> 3 (4 steps) -> 4 (1 step) -> 5 (1 step), giving a total of 6 steps. SAMPLE CASE 3: Direct route from checkpoint 1 to checkpoint 2 exists, giving a total of 2 steps. Since there is no nonexistent checkpoints, output of -1 is not required.","solution":"import heapq def dijkstra(graph, N, start): Performs Dijkstra\'s algorithm to find the shortest path from start to all other nodes. Args: graph: Dictionary containing adjacency list, where keys are node ids and values are list of tuples (neighbor, cost) representing the edges. N: Number of nodes in the graph. start: Starting node for Dijkstra\'s algorithm. Returns: dist: List where dist[i] is the minimum number of steps required to reach node i from the start. dist = [float(\'inf\')] * (N + 1) dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def marathon_event(N, E, edges, S, queries): Determines the minimum steps required to reach milestone checkpoints from the starting checkpoint. Args: N: Number of checkpoints. E: Number of direct routes between checkpoints. edges: List of edges (u, v, s) where u is the start node, v is the end node, and s is the steps count. S: Starting checkpoint. queries: List of milestone checkpoint queries. Returns: List of minimum steps required for each query. If a checkpoint is not reachable, -1 is returned for that query. graph = {i: [] for i in range(1, N + 1)} for u, v, s in edges: graph[u].append((v, s)) dist = dijkstra(graph, N, S) result = [] for query in queries: if dist[query] == float(\'inf\'): result.append(-1) else: result.append(dist[query]) return result"},{"question":"problem Alice loves solving puzzles and is particularly fond of number puzzles. She has a number puzzle board that contains n rows and m columns. Each cell in this grid contains a digit (0-9). Alice wants to find out all unique numbers that can be formed by selecting k adjacent digits in a row or column. Two digits are adjacent if they share a common side. Given the dimensions of the puzzle board, followed by the board itself, and the value k (2 ≤ k ≤ min(n, m)), write a program to determine the number of distinct numbers that can be formed. For example, consider that you are given a 3x3 board like below, and k = 2: 1 2 3 4 5 6 7 8 9 The numbers that can be formed are: 12, 23, 45, 56, 78, 89 (from rows), and 14, 25, 36, 47, 58, 69 (from columns). So, there are 12 unique numbers in total. Here\'s the format for the input and output. input The input consists of multiple datasets. Each dataset is given in the following format. The number of rows n (2 ≤ n ≤ 5) and columns m (2 ≤ m ≤ 5) of the board is written on the first line, and the number of digits k (2 ≤ k ≤ min(n, m)) to be selected is written on the second line. Then n lines follow, each containing m digits (0-9). The end of input is indicated by a line containing two zeros. The number of datasets does not exceed 5. output For each dataset, the number of unique numbers that can be formed by selecting k adjacent digits in a row or a column is output on one line. Examples Input 3 3 2 1 2 3 4 5 6 7 8 9 2 2 2 1 2 3 4 0 0 Output 12 4","solution":"def find_unique_numbers(n, m, k, board): unique_numbers = set() # find k-length numbers in rows for i in range(n): for j in range(m - k + 1): num = \'\'.join(board[i][j:j + k]) unique_numbers.add(num) # find k-length numbers in columns for j in range(m): for i in range(n - k + 1): num = \'\'.join(board[x][j] for x in range(i, i + k)) unique_numbers.add(num) return len(unique_numbers) def process_input(n_m_list, k_list, board_list): results = [] for i in range(len(n_m_list)): n, m = n_m_list[i] k = k_list[i] board = board_list[i] result = find_unique_numbers(n, m, k, board) results.append(result) return results def parse_input(input_str): data = input_str.strip().split(\\"n\\") n_m_list = [] k_list = [] board_list = [] i = 0 while i < len(data): n, m = map(int, data[i].split()) if n == 0 and m == 0: break n_m_list.append((n, m)) i += 1 k = int(data[i]) k_list.append(k) i += 1 board = [] for _ in range(n): board.append(data[i].split()) i += 1 board_list.append(board) return n_m_list, k_list, board_list def main(input_str): n_m_list, k_list, board_list = parse_input(input_str) results = process_input(n_m_list, k_list, board_list) for result in results: print(result) if __name__ == \'__main__\': import sys input_str = sys.stdin.read() main(input_str)"},{"question":"Problem A hotel manager wants to optimize the room prices to maximize total bookings. Each room can be booked at different prices depending on the season. By analyzing historical data, the manager has identified a set of price points at which rooms were booked. The goal is to find the optimal price for a given season to maximize room occupancy. Given several price points and corresponding bookings, calculate the most profitable price point. Constraints The input satisfies the following conditions. * 1 ≤ N ≤ 100 * 1 ≤ price_i ≤ 10^5 * 0 ≤ bookings_i ≤ 10^4 Input N price_1 bookings_1 price_2 bookings_2 ... price_N bookings_N The input is given in the following format. The integer N represents the number of price points. From the second line onward, each line includes an integer price_i and an integer bookings_i indicating the price and corresponding number of bookings. Output Output the price that maximizes the product of price and bookings (price * bookings) as an integer. If there are multiple maximums, output the smallest price. Examples Input 5 100 4 200 6 300 8 400 10 500 2 Output 400 Input 4 50 10 100 20 200 15 250 10 Output 200 Input 3 1000 3 1500 5 2000 2 Output 1500 Input 6 10 1000 20 1500 30 2000 40 2500 50 3000 60 3500 Output 60","solution":"def find_optimal_price(price_bookings): Finds the price that maximizes the product of price and bookings. If there are multiple maximums, returns the smallest price. Arguments: price_bookings -- list of tuples where each tuple contains (price, bookings) Returns: The optimal price as an integer. max_profit = 0 optimal_price = float(\'inf\') for price, bookings in price_bookings: profit = price * bookings if profit > max_profit or (profit == max_profit and price < optimal_price): max_profit = profit optimal_price = price return optimal_price def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) price_bookings = [(int(data[i*2 + 1]), int(data[i*2 + 2])) for i in range(N)] result = find_optimal_price(price_bookings) print(result)"},{"question":"Given a set of points in a 2D plane and an integer k, write a function to find the k points that are closest to the origin (0,0). The points are provided as a list of tuples, where each tuple contains the x and y coordinates of a point. The distance between two points (x1, y1) and (x2, y2) in a 2D plane can be calculated using the Euclidean distance formula: sqrt((x2 - x1)^2 + (y2 - y1)^2). However, you only need to calculate the distance relative to the origin, so the distance of point (x, y) from the origin is sqrt(x^2 + y^2). Your solution should return a list of the k closest points (in any order) to the origin using the Euclidean distance. If multiple points have the same distance, you can return any of them. Input: - An integer k (1 ≤ k ≤ the number of points) - A list of n points, where each point is represented as a tuple (x, y) and -10^4 ≤ x, y ≤ 10^4 Output: - A list of k tuples representing the k closest points to the origin. Function Signature: ```python def k_closest_points_to_origin(points: List[Tuple[int, int]], k: int) -> List[Tuple[int, int]]: pass ``` Examples: Input: ```python points = [(1, 3), (-2, 2), (5, 8), (0, 1)] k = 2 ``` Output: ```python [(-2, 2), (0, 1)] ``` Input: ```python points = [(3, 3), (5, -1), (-2, 4)] k = 1 ``` Output: ```python [(3, 3)] ``` Note: - You may use any sorting method or data structure that helps you solve the problem efficiently.","solution":"import heapq from typing import List, Tuple import math def k_closest_points_to_origin(points: List[Tuple[int, int]], k: int) -> List[Tuple[int, int]]: Returns the k closest points to the origin (0,0) from a list of points. Each point is represented as a tuple (x, y). # Calculate the Euclidean distance squared for each point and maintain a min-heap heap = [(x**2 + y**2, (x, y)) for x, y in points] heapq.heapify(heap) # Extract the k smallest elements from the heap return [heapq.heappop(heap)[1] for _ in range(k)]"},{"question":"HM\'s friend, Deepsaggas, owns a garden with various types of trees. Deepsaggas loves to keep his garden well maintained. His garden is arranged in a grid of M rows and N columns. Each cell in the grid either contains 0 (empty space) or 1 (a tree). A tree needs to be watered if there are no adjacent cells (horizontally or vertically) also containing a tree. Deepsaggas wants to find out the number of trees that need to be watered. Input The first line of the input contains two integers M and N, denoting the number of rows and columns of the garden, respectively. Each of the next M lines contains N space-separated integers (0 or 1), representing the grid. Output Print the number of trees that need to be watered. Example Input: 4 4 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 Output: 4 Constraints 1 <= M, N <= 1000","solution":"def num_trees_to_water(garden, M, N): Returns the number of trees that need to be watered. :param garden: A 2D list representing the grid garden :param M: Number of rows in the grid :param N: Number of columns in the grid :return: Number of trees that need to be watered to_water = 0 for i in range(M): for j in range(N): if garden[i][j] == 1: # Check for adjacent trees has_adjacent = False for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]: ni, nj = i + di, j + dj if 0 <= ni < M and 0 <= nj < N and garden[ni][nj] == 1: has_adjacent = True break if not has_adjacent: to_water += 1 return to_water"},{"question":"You are given an array of integers. You can perform a single transformation on the array: choose a subarray and reverse it. Your goal is to sort the array in non-decreasing order using the minimum number of transformations. An array reversal is defined as selecting a subarray and reversing the order of its elements. For example, if you choose the subarray from index `i` to `j` in array `A`, the elements within `A[i]...A[j]` are reversed. Your task is to determine the minimum number of transformations required to sort the array. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains `n` integers — the elements of the array. Each element is distinct and between 1 and 10^6. Output Print a single integer — the minimum number of transformations needed to sort the array. Examples Input 4 2 1 4 3 Output 2 Input 5 5 4 3 2 1 Output 1 Input 6 1 3 5 2 4 6 Output 3 Note In the first example, you can perform two transformations. First, reverse the subarray from index 0 to 1: [1, 2, 4, 3]. Second, reverse the subarray from index 2 to 3: [1, 2, 3, 4]. In the second example, you can perform one transformation by reversing the entire array: [1, 2, 3, 4, 5]. In the third example, one possible solution is reversing the subarray from index 1 to 3: [1, 2, 5, 3, 4, 6], then reversing the subarray from index 2 to 4: [1, 2, 4, 3, 5, 6], and finally reversing the subarray from index 3 to 3: [1, 2, 3, 4, 5, 6].","solution":"def min_transformations_to_sort(arr): Returns the minimum number of transformations required to sort the array in non-decreasing order using single subarray reversals. n = len(arr) sorted_arr = sorted(arr) # Case when array is already sorted if arr == sorted_arr: return 0 # Find the longest already sorted subarray left, right = 0, n - 1 while left < n and arr[left] == sorted_arr[left]: left += 1 while right >= 0 and arr[right] == sorted_arr[right]: right -= 1 # One operation to reverse the identified subarray arr[left:right+1] = reversed(arr[left:right+1]) # Check if it is sorted after one operation if arr == sorted_arr: return 1 # If still unsorted, minimum number of transformations will be 2 return 2"},{"question":"Given a grid of size n x m with each cell containing an initial energy value, you need to process several queries. Each query is one of two types: * \\"1 x y val\\" — add val to the cell at position (x, y); * \\"2 x y\\" — print the current energy value of the cell at position (x, y). Additionally, if a specific number of updates have been performed on a particular cell (let\'s say k times), then the energy values of all its direct neighbors (top, bottom, left, and right) will be incremented by the sum of these k updates. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), indicating the dimensions of the grid. The following n lines each contain m integers aij (0 ≤ aij ≤ 1000), representing the initial energy values of each cell in the grid. The next line contains an integer q (1 ≤ q ≤ 200000), representing the number of queries. Each of the next q lines contains a query in one of the formats described above. For the queries \\"1 x y val\\", it is guaranteed that 1 ≤ x ≤ n, 1 ≤ y ≤ m, and 0 ≤ val ≤ 100. For the queries \\"2 x y\\", it is guaranteed that 1 ≤ x ≤ n and 1 ≤ y ≤ m. When adding values to the direct neighbors, ensure you do not perform out-of-bounds operations. Output For each query of type \\"2 x y\\", print the answer on a separate line. Example Input 3 3 1 2 3 4 5 6 7 8 9 5 1 1 1 2 1 2 2 3 1 3 3 4 2 2 2 1 1 1 1 Output 11 Explanation Initially, the grid is: ``` 1 2 3 4 5 6 7 8 9 ``` After the first update (1, 1, 1, 2): ``` 3 2 3 4 5 6 7 8 9 ``` After the second update (1, 2, 2, 3): ``` 3 2 3 4 8 6 7 8 9 ``` After the third update (1, 3, 3, 4): ``` 3 2 3 4 8 6 7 8 13 ``` Query (2, 2, 2) returns 11 because the cell at [2][2] has undergone two updates (3 + 8), and hence, its neighbors are incremented with the sum of these values: ``` 5 (from (1,1,2)) + 6 (from itself) == 11 ``` After the fifth update (1, 1, 1, 1): ``` 4 2 3 4 8 6 7 8 13 ```","solution":"def process_queries(n, m, grid, queries): updates = [[0] * m for _ in range(n)] for query in queries: parts = query.split() if parts[0] == \'1\': x, y, val = int(parts[1]) - 1, int(parts[2]) - 1, int(parts[3]) grid[x][y] += val updates[x][y] += 1 if updates[x][y] == 1: for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: grid[nx][ny] += val elif parts[0] == \'2\': x, y = int(parts[1]) - 1, int(parts[2]) - 1 print(grid[x][y]) # Example Usage if __name__ == \\"__main__\\": n, m = 3, 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] queries = [ \\"1 1 1 2\\", \\"1 2 2 3\\", \\"1 3 3 4\\", \\"2 2 2\\", \\"1 1 1 1\\" ] process_queries(n, m, grid, queries)"},{"question":"Alex is playing a game with cards. He has a deck of cards numbered from 1 to n. He first shuffles the cards and places them in a line. After shuffling, Alex performs q swaps of cards. Each swap operation is defined by two indices a and b (1 ≤ a, b ≤ n), which means he swaps the card at position a with the card at position b. After performing all the swaps, Alex needs to know the final position of each card in his deck. Write a program to help Alex find the final positions of all cards after all swap operations. Input The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of cards and the number of swaps. The second line contains n different integers from 1 to n representing the initial arrangement of the cards after shuffling. The next q lines describe the swap operations. Each line contains two integers a and b (1 ≤ a, b ≤ n), representing the indices of cards to be swapped. Output Print n integers representing the final position of each card after all swaps. The output should be the card number in each position from 1 to n. Example Input 5 3 3 1 4 5 2 1 5 2 3 4 5 Output 2 4 1 3 5 Note In the sample, initially, the deck is [3, 1, 4, 5, 2]. After the first swap, the deck becomes [2, 1, 4, 5, 3]. After the second swap, it becomes [2, 4, 1, 5, 3]. Finally, after the third swap, it becomes [2, 4, 1, 3, 5]. So the final positions of the cards are 2, 4, 1, 3, and 5 respectively.","solution":"def final_positions(n, q, initial_arrangement, swaps): Returns the final positions of all cards after performing the swaps. :param n: Number of cards :param q: Number of swaps :param initial_arrangement: List of integers representing the initial arrangement of the cards :param swaps: List of tuples, each containing two integers representing the positions to be swapped :return: List of integers representing the final arrangement of the cards # Convert initial arrangement to a list final_arrangement = initial_arrangement[:] # Perform each swap for a, b in swaps: # Swap elements at indices a-1 and b-1 (convert to zero-indexed) final_arrangement[a-1], final_arrangement[b-1] = final_arrangement[b-1], final_arrangement[a-1] return final_arrangement"},{"question":"In a certain card game, players draw cards from a deck which has cards numbered from 1 to N. The game rules state that any drawn card must be placed in a row in such a way that the row is strictly increasing. You have devised a new model to predict how many ways a player can draw cards from the deck such that they can arrange them in a strictly increasing order. Given the total number of cards N, find out the number of ways to draw k cards from the deck such that the sequence of k cards is strictly increasing. Input - The first line contains an integer T, the number of test cases. - Each of the next T lines contains two integers N and k, where N is the total number of cards in the deck and k is the number of cards that must be arranged in strictly increasing order. Output For each test case, output in a new line the number of ways to draw k cards from the deck of N cards such that they can be arranged in strictly increasing order. If it is not possible to pick k cards from N, return 0 for that test case. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ k ≤ N Sample Input 1 2 5 3 4 2 Sample Output 1 10 6 Explanation For T=2: 1. For N=5 and k=3, there are 10 ways to pick 3 cards such that their sequence is strictly increasing: (1,2,3), (1,2,4), (1,2,5), (1,3,4), (1,3,5), (1,4,5), (2,3,4), (2,3,5), (2,4,5), (3,4,5). 2. For N=4 and k=2, there are 6 ways to pick 2 cards such that their sequence is strictly increasing: (1,2), (1,3), (1,4), (2,3), (2,4), (3,4).","solution":"from math import comb def count_increasing_sequences(T, test_cases): results = [] for N, k in test_cases: if k > N: results.append(0) else: results.append(comb(N, k)) return results"},{"question":"Anna is a logistic manager at a company and is trying to optimize the delivery schedule. She has a sequence of deliveries that need to be processed in order. Each delivery has a certain weight, and the total delivery cost is associated with the sum of these weights. There is an option to process one delivery out of order by swapping it with any other delivery. The goal is to minimize the total delivery cost after exactly one such swap operation. You are given an array of integers that represent the weights of the deliveries in order. You can choose two different indices i and j (i != j) and swap the elements at these indices. Determine the minimum possible sum of the weights after exactly one swap operation. Input The first line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of deliveries. The second line contains n integers wi (1 ≤ wi ≤ 1000) — the weights of the deliveries. Output Print a single integer — the minimum possible sum of the weights after performing exactly one swap operation. Examples Input 4 4 3 2 5 Output 14 Input 5 1 2 7 5 1 Output 16 Input 3 3 1 1 Output 5 Note In the first sample, swapping the second and third elements results in the sequence [4, 2, 3, 5] with total weight 14. In the second sample, swapping the first and last elements results in the sequence [1, 2, 7, 5, 1] with total weight 16. No swap improves the sum. In the third sample, swapping the first and last elements results in the sequence [1, 1, 3] with total weight 5.","solution":"def minimum_sum_after_swap(n, weights): Returns the minimum possible sum of weights after performing exactly one swap operation. Parameters: n (int): The number of deliveries (always >= 2). weights (list of int): The weights of the deliveries. Returns: int: The minimum possible sum of the weights after the swap. # If there\'s only one delivery, no swap can minimize anything if n == 1: return sum(weights) # Start with the initial sum current_sum = sum(weights) # Try swapping each pair of elements and compute the new sum min_sum = current_sum for i in range(n): for j in range(i + 1, n): weights[i], weights[j] = weights[j], weights[i] # Swap new_sum = sum(weights) min_sum = min(min_sum, new_sum) weights[i], weights[j] = weights[j], weights[i] # Swap back return min_sum"},{"question":"You are given a universe containing multiple planets. Some planets are connected by direct one-way hyperspace routes. A trade federation wants to establish a supply chain network such that goods can be transported from any planet to any other planet, either directly or indirectly through other planets. Your task is to determine if such a supply chain network can be established with the given routes. Write a function that determines if it is possible to create a supply chain network where all planets are reachable from every other planet. Input The input is given in the following format: P R a1 b1 a2 b2 :: aR bR The first line contains two integers P (2 ≤ P ≤ 200) and R (1 ≤ R ≤ 10000) representing the number of planets and the number of direct hyperspace routes respectively. The following R lines each contain two integers ai and bi (1 ≤ ai, bi ≤ P), which means there is a direct hyperspace route from planet ai to planet bi. Output Output \\"YES\\" (without quotes) if it is possible to establish a supply chain network where all planets are reachable from each other. Otherwise, output \\"NO\\" (without quotes). Examples Input 5 5 1 2 2 3 3 4 4 5 5 1 Output YES Input 4 4 1 2 2 3 3 4 4 2 Output NO Input 3 2 1 2 2 3 Output NO","solution":"def can_establish_supply_chain(p, r, routes): from collections import defaultdict, deque def bfs(start, graph): visited = [False] * (p + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return visited graph = defaultdict(list) reverse_graph = defaultdict(list) for a, b in routes: graph[a].append(b) reverse_graph[b].append(a) visited_from_first = bfs(1, graph) visited_to_first = bfs(1, reverse_graph) if all(visited_from_first[1:]) and all(visited_to_first[1:]): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a binary array of length n. You can perform the following operation any number of times: choose a subarray of length exactly k, and flip all its bits (i.e., change all 0s to 1s and all 1s to 0s in that subarray). Determine whether you can make all elements of the array equal to 0 using this operation. Input The first line contains two positive integers n and k (1 ≤ k ≤ n ≤ 100) — the length of the array and the length of the subarray to be flipped. The second line contains n integers — the binary array. Output Output YES if it\'s possible to make all elements of the array equal to 0, otherwise output NO. Examples Input 5 3 1 0 1 0 1 Output YES Input 6 4 1 1 0 1 1 0 Output NO Input 4 2 1 1 1 1 Output YES","solution":"def can_all_elements_be_zero(n, k, arr): Determines if all elements of the array can be made zero by flipping subarrays of length k. flips = 0 for i in range(n): if arr[i] == 1: if i + k <= n: flips += 1 for j in range(k): arr[i + j] = 1 - arr[i + j] else: return \\"NO\\" return \\"YES\\" # Example function call # print(can_all_elements_be_zero(5, 3, [1, 0, 1, 0, 1])) # Outputs: YES # print(can_all_elements_be_zero(6, 4, [1, 1, 0, 1, 1, 0])) # Outputs: NO"},{"question":"Given an unsorted array of integers, find the length of the longest increasing subsequence. Input: The first line contains an integer t (1 ≤ t ≤ 50), the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 1000), the length of the array, followed by n integers separated by space. The integers are not necessarily distinct and can be any value that fits within a 32-bit integer. Output: For each test case, print the length of the longest increasing subsequence in the array. Note: A subsequence is derived by deleting some or no elements of the given array without changing the order of the remaining elements. SAMPLE INPUT 3 8 10 9 2 5 3 7 101 18 6 0 8 4 12 2 10 5 3 10 2 1 20 SAMPLE OUTPUT 4 3 3","solution":"def lengthOfLIS(nums): Function to determine the length of the longest increasing subsequence (LIS). if not nums: return 0 dp = [1] * len(nums) for i in range(len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def solve(test_cases): Solves multiple test cases to find the length of the longest increasing subsequence for each case. results = [] for nums in test_cases: results.append(lengthOfLIS(nums)) return results"},{"question":"Yulia is fascinated by palindromic substrings. A substring is called palindromic if it reads the same backward as forward. She wonders how many palindromic substrings are present in a given string. Given a string `S`, help Yulia find the number of palindromic substrings in `S`. Input The input contains a single string `S` (1 ≤ |S| ≤ 1000), where `|S|` denotes the length of the string `S`. The string consists only of lowercase English letters. Output Print the number of palindromic substrings in the given string. Examples Input abc Output 3 Input aaa Output 6 Note In the first example, the palindromic substrings are \\"a\\", \\"b\\", and \\"c\\". In the second example, the palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\".","solution":"def count_palindromic_substrings(S): Returns the number of palindromic substrings in the given string S. n = len(S) count = 0 for center in range(2 * n - 1): left = center // 2 right = left + (center % 2) while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 return count"},{"question":"A new restaurant has opened in town, and they are experimenting with different seating arrangements to maximize the number of guests they can serve. They have circular tables and want to arrange guests such that no two guests with the same last name are seated next to each other. Your task is to help the restaurant determine if a given seating arrangement is valid. Input The first line contains T, the number of test cases. This is followed by T sets of inputs. Each set contains an integer N (number of guests) and a space-separated list of N strings denoting the last names of the guests in the order they are seated around the table. Output For each input, output \\"valid\\" if the arrangement is valid, otherwise \\"invalid\\". Constraints 1 <= T <= 20 1 <= N <= 100 Each last name is a string of 1 to 10 characters. Input: 2 4 Smith Johnson Smith Williams 3 Brown Brown Brown Output: valid invalid","solution":"def is_valid_seating(T, test_cases): results = [] for case in test_cases: N = case[0] guest_list = case[1] valid = True for i in range(N): if guest_list[i] == guest_list[(i + 1) % N]: valid = False break results.append(\\"valid\\" if valid else \\"invalid\\") return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): parts = lines[i].split() N = int(parts[0]) guests = parts[1:] test_cases.append((N, guests)) return T, test_cases def main(input_str): T, test_cases = parse_input(input_str) results = is_valid_seating(T, test_cases) for result in results: print(result)"},{"question":"A company is developing a new task management system, and they need your help with one of the features. The feature requires an algorithm to determine the minimum number of steps needed to convert a given string into a palindrome by only deleting characters. A string is a palindrome if it reads the same backward as forward. Your task is to write a program that, given a string, returns the minimum number of deletions required to make the string a palindrome. Input The input consists of multiple test cases. The first line contains an integer T denoting the number of test cases. Each of the next T lines contains a single string S. Output For each test case, output a single line containing the minimum number of deletions required to make the string a palindrome. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 S consists of only lowercase English letters. Example Input: 2 abcfba racecar Output: 1 0 Explanation In the first test case, the string \\"abcfba\\" can be made into a palindrome by deleting \'c\', resulting in \\"abfba\\". In the second test case, the string \\"racecar\\" is already a palindrome, so no deletions are required.","solution":"def min_deletions_to_palindrome(s): def lcs(x, y): m = len(x) n = len(y) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif x[i - 1] == y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] rev_s = s[::-1] longest_common_subseq_length = lcs(s, rev_s) return len(s) - longest_common_subseq_length def process_input(test_cases): results = [] for s in test_cases: results.append(min_deletions_to_palindrome(s)) return results"},{"question":"You are given an array of n integers representing the daily temperatures of a city for n consecutive days. Your task is to compute for each day the number of days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, output 0 for that day. Input The first line contains a single integer n (1 ≤ n ≤ 100 000), denoting the number of days. The second line contains n integers t1, t2, ..., tn (−100 ≤ ti ≤ 100), denoting the daily temperatures. Output Output a single line with n integers denoting the number of days you would have to wait for a warmer temperature. If there is no future day with a warmer temperature, output 0 for that day. Examples Input 8 73 74 75 71 69 72 76 73 Output 1 1 4 2 1 1 0 0 Input 6 30 40 50 60 50 40 Output 1 1 1 0 0 0 Note In the first sample, for example on day 1, the temperature is 73. You have to wait 1 day to get to a warmer temperature of 74 on day 2. Similarly, on day 6, the temperature is 72, and it takes 1 day to reach a warmer temperature of 76 on day 7. On day 7, there is no future day with a warmer temperature, so the output is 0 for day 7. In the second sample, the temperature for day 4 is 60, which is the maximum within the provided input, so there is no future day with a warmer temperature, hence the output is 0 for day 4.","solution":"def daily_temperatures(n, temperatures): result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: index = stack.pop() result[index] = i - index stack.append(i) return result"},{"question":"A software company is updating their old attendance record system. They want to perform various operations on the attendance records but need assistance in validating and manipulating the data to make it compatible with the new system. Each attendance record consists of a series of timestamps representing when an employee checks in and checks out on a particular day. They want to ensure that the records have no overlapping check-in and check-out times for any employee and that the time format is valid. The new attendance record system operates only on 24-hour time format (hh:mm) and handles multiple operations like merging consecutive check-ins and check-outs into a single period. Write a function that validates and cleans the attendance records as described. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of employees for which attendance records need to be validated and processed. Each of the next n lines contains attendance records for each employee. Each record consists of pairs of timestamps in the form (hh:mm-hh:mm), representing check-in and check-out times, separated by a space. Output For each employee, output their cleaned attendance record in the same format. If an employee has invalid records (overlapping times or incorrectly formatted timestamps), output \\"Invalid record\\" for that employee. Example Input 3 08:00-12:00 13:00-17:00 09:00-12:00 09:30-11:30 23:00-25:00 25:00-26:00 Output 08:00-12:00 13:00-17:00 Invalid record Invalid record Note In the second employee\'s record, the check-in at 09:30 overlaps with the previous check-in time, making it invalid. The times for the third employee are also invalid as 25:00 and 26:00 are not valid 24-hour time formats.","solution":"from datetime import datetime def is_valid_time_format(time_str): try: datetime.strptime(time_str, \'%H:%M\') return True except ValueError: return False def is_overlap(intervals): intervals = sorted(intervals, key=lambda x: x[0]) for i in range(len(intervals) - 1): if intervals[i][1] > intervals[i+1][0]: return True return False def validate_and_clean_records(n, records): valid_records = [] for record in records: intervals = [] valid = True pairs = record.split() for pair in pairs: times = pair.split(\'-\') if len(times) != 2 or not is_valid_time_format(times[0]) or not is_valid_time_format(times[1]): valid = False break check_in = tuple(map(int, times[0].split(\':\'))) check_out = tuple(map(int, times[1].split(\':\'))) if check_out <= check_in: valid = False break intervals.append((check_in, check_out)) if valid and not is_overlap(intervals): intervals.sort() valid_records.append(\' \'.join([f\\"{\'%02d\' % c_in[0]}:{\'%02d\' % c_in[1]}-{\'%02d\' % c_out[0]}:{\'%02d\' % c_out[1]}\\" for c_in, c_out in intervals])) else: valid_records.append(\\"Invalid record\\") return valid_records # Read input def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') n = int(data[0]) records = data[1:n+1] result = validate_and_clean_records(n, records) for line in result: print(line) if __name__ == \\"__main__\\": main()"},{"question":"Professor Zeno is a renowned mathematician who is fascinated with sequences and their properties. Recently, he came across an interesting problem involving palindromic sequences and wanted to explore it further. A sequence is called palindromic if it reads the same backward as forward. Professor Zeno gave his students a task to find the longest palindromic subsequence within a given sequence of integers. A subsequence is derived by deleting zero or more elements without changing the order of the remaining elements. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the sequence. Output In the first line, output an integer representing the length of the longest palindromic subsequence. In the second line, output the longest palindromic subsequence itself as a space-separated list of integers. If there are multiple subsequences of the same length, output any one of them. Examples Input 7 3 1 4 1 5 9 2 Output 3 1 4 1 Input 5 1 2 3 4 5 Output 1 1","solution":"def longest_palindromic_subsequence(n, sequence): # Initialize a dp array where dp[i][j] represents the length of the longest palindromic subsequence in sequence[i:j+1] dp = [[0] * n for _ in range(n)] # Initialize a backtracking array to help in reconstructing the subsequence subsequence = [[[] for _ in range(n)] for _ in range(n)] for i in range(n): dp[i][i] = 1 subsequence[i][i] = [sequence[i]] for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if sequence[i] == sequence[j] and cl == 2: dp[i][j] = 2 subsequence[i][j] = [sequence[i], sequence[j]] elif sequence[i] == sequence[j]: dp[i][j] = dp[i + 1][j - 1] + 2 subsequence[i][j] = [sequence[i]] + subsequence[i + 1][j - 1] + [sequence[j]] else: if dp[i + 1][j] > dp[i][j - 1]: dp[i][j] = dp[i + 1][j] subsequence[i][j] = subsequence[i + 1][j] else: dp[i][j] = dp[i][j - 1] subsequence[i][j] = subsequence[i][j - 1] longest_length = dp[0][n - 1] longest_subsequence = subsequence[0][n - 1] return longest_length, longest_subsequence"},{"question":"In a galaxy far, far away, a group of robotic engineers face a unique problem. Each robot in their facility has a unique identification number, represented as an alphanumeric string. However, the robots have a peculiar way of sorting these identification numbers. They first sort them based on the sum of the digits in the string, and if two or more strings have the same sum, they then sort those strings lexicographically. Your task is to write a program that will take a list of these identification numbers and sort them according to the rules stated above. # Input The first line contains an integer t, the number of test cases. (1 leq t leq 20 ). For each test case: - The first line contains an integer n, the number of identification numbers. (1 leq n leq 10^4). - The next n lines each contain a unique alphanumeric string of length (1 leq text{length of string} leq 20). # Output For each test case, output n lines, each containing one identification number from the list, sorted as described. # Sample Input ``` 2 3 B3K4 A2Z3 X1J2Q 4 A1 B2 A2 B1 ``` Output ``` Case #1: X1J2Q A2Z3 B3K4 Case #2: A1 B1 A2 B2 ```","solution":"def sum_of_digits(s): Returns the sum of all digits within the alphanumeric string s. return sum(int(char) for char in s if char.isdigit()) def sort_identification_numbers(test_cases): Sorts identification numbers based on the sum of digits in each string and lexicographically for strings with the same sum of digits. result = [] for case_number, identifications in enumerate(test_cases, start=1): sorted_identifications = sorted(identifications, key=lambda x: (sum_of_digits(x), x)) result.append(f\\"Case #{case_number}:\\") result.extend(sorted_identifications) return result def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) identifications = data[index + 1: index + 1 + n] test_cases.append(identifications) index += (n + 1) result = sort_identification_numbers(test_cases) for line in result: print(line) # Calling the main function for local testing purpose, remove before submitting. if __name__ == \\"__main__\\": main()"},{"question":"You are hired as a software engineer by a company that uses a priority-based ticketing system to manage customer issues. Each ticket has a unique ID, a priority level, and a description of the issue. The system must automatically assign the ticket with the highest priority to the available support staff. The priority of a ticket is determined by a numerical value, where smaller numbers indicate higher priority (e.g., priority 1 is higher than priority 5). When multiple tickets have the same priority, the system should assign tickets based on their ID in ascending order. You need to implement a class `TicketingSystem` which will support the following operations: - Add a new ticket (add_ticket) - Retrieve and remove the highest priority ticket (process_ticket) - Check the number of tickets in the system (ticket_count) Implement the class with the following specifications: 1. `add_ticket(priority: int, ticket_id: int, description: str) -> None`: Adds a new ticket with the given priority, ID, and description to the system. 2. `process_ticket() -> Tuple[int, str]`: Returns a tuple containing the ID and description of the highest priority ticket and removes it from the system. If there are no tickets available, return `(-1, \\"No tickets available\\")`. 3. `ticket_count() -> int`: Returns the number of tickets currently in the system. Your implementation should be efficient, considering that the system is expected to handle a large number of tickets. Example: ```python ts = TicketingSystem() ts.add_ticket(2, 101, \\"Issue with login\\") ts.add_ticket(1, 102, \\"Server down\\") ts.add_ticket(2, 103, \\"Password reset\\") assert ts.ticket_count() == 3 assert ts.process_ticket() == (102, \\"Server down\\") assert ts.ticket_count() == 2 assert ts.process_ticket() == (101, \\"Issue with login\\") assert ts.process_ticket() == (103, \\"Password reset\\") assert ts.process_ticket() == (-1, \\"No tickets available\\") ``` Constraints: - The `ticket_id` will be a positive integer. - The `priority` will be a non-negative integer. - The description will be a non-empty string. - No two tickets will have the same ID.","solution":"import heapq class TicketingSystem: def __init__(self): self.ticket_heap = [] self.ticket_map = {} def add_ticket(self, priority: int, ticket_id: int, description: str) -> None: heapq.heappush(self.ticket_heap, (priority, ticket_id)) self.ticket_map[ticket_id] = description def process_ticket(self): if not self.ticket_heap: return (-1, \\"No tickets available\\") priority, ticket_id = heapq.heappop(self.ticket_heap) description = self.ticket_map.pop(ticket_id, \\"No description\\") return (ticket_id, description) def ticket_count(self) -> int: return len(self.ticket_heap)"},{"question":"Mark is a professional photographer who often collaborates with artists for various projects. Recently, Mark has been given the task of arranging photo shoots in several locations for an artist. Each location has a particular available time slot during which the photo shoot can be organized. Mark needs to ensure that he schedules as many non-overlapping photo shoots as possible. Given the start and end times of the available time slots at different locations, Mark must determine the maximum number of photo shoots he can schedule. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of available time slots. Each of the next n lines contains two integers s and e (1 ≤ s < e ≤ 10^9) — the start and end times of the available time slot. Output Output a single integer — the maximum number of non-overlapping photo shoots Mark can schedule. Examples Input 3 1 3 2 4 3 5 Output 2 Input 4 4 7 1 2 2 5 5 6 Output 3","solution":"def max_photo_shoots(n, time_slots): This function calculates the maximum number of non-overlapping photo shoots. Parameters: n (int): Number of available time slots time_slots (List[Tuple[int, int]]): A list of tuples where each tuple contains two integers s and e representing start and end times of the available time slot. Returns: int: Maximum number of non-overlapping photo shoots Mark can schedule. # Sort the time slots based on their end times time_slots.sort(key=lambda x: x[1]) count = 0 # Count of non-overlapping photo shoots end_time = 0 # End time of the last selected photo shoot for start, end in time_slots: if start >= end_time: count += 1 end_time = end return count"},{"question":"In a certain school, a class of students is divided into groups. Each group can have a varying number of students, and the teacher needs to know the median score of students in each group. Given the scores of the students in each group, can you help the teacher calculate the median score for each group? Input The first line of the input contains T, the number of test cases. Each test case consists of two lines. The first line contains an integer N, indicating the number of students in the group. The second line contains N space-separated integers, each representing the score of a student in the group. Output For each test case, print the median score of the group in a new line. Note: If the number of students (N) is odd, the median is the middle score when the scores are sorted in ascending order. If N is even, the median is the average of the two middle scores. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ Score ≤ 100 SAMPLE INPUT 2 5 50 80 90 70 60 6 40 30 20 10 50 60 SAMPLE OUTPUT 70 35","solution":"def calculate_median(scores): Returns the median of the list of scores. scores.sort() n = len(scores) if n % 2 == 1: return scores[n // 2] else: return (scores[n // 2 - 1] + scores[n // 2]) / 2 def get_medians(test_cases): Given a list of test cases where each test case is a tuple containing the number of students and their scores, returns a list of medians for each group. medians = [] for n, scores in test_cases: medians.append(calculate_median(scores)) return medians"},{"question":"Some twins are famous for offering gifts before the contest. Given four integers A, B, X, Y, and it seems unlucky if A times B and X - Y are both even numbers. # Input Four integers A, B, X, Y are given, separated by spaces. # Output Output \\"Unlucky\\" if you are unlucky, or \\"Lucky\\" if not. But don\'t forget the last line break. # Constraints * A, B, X, Y are integers greater than or equal to 1 and less than or equal to 100 # Input example 1 4 2 6 2 # Output example 1 Unlucky 4 times 2 = 8, 6 - 2 = 4, both even numbers, so it\'s unlucky. # Input example 2 4 2 6 3 # Output example 2 Lucky 4 times 2 = 8, but 6 - 3 = 3 is odd, so it\'s lucky. # Example Input 4 2 6 2 Output Unlucky","solution":"def check_luck(A, B, X, Y): Determines if the combination is \'Unlucky\' or \'Lucky\' based on the conditions: It\'s \'Unlucky\' if both A * B and X - Y are even numbers, otherwise \'Lucky\'. product = A * B difference = X - Y if product % 2 == 0 and difference % 2 == 0: return \\"Unluckyn\\" else: return \\"Luckyn\\""},{"question":"You are given an initially empty array A consisting of integers. There are two types of operations you can perform on this array: 1. Add a given integer x (1 ≤ x ≤ 10^9) to the end of the array. 2. Determine the maximum sum of any contiguous subarray within A. Input The first line contains a single integer Q (1 ≤ Q ≤ 5·10^5) — the number of operations. Each of the next Q lines describes an operation. An operation of type 1 is represented by two integers \\"1 x\\", indicating that x should be appended to the array. An operation of type 2 is represented by the single integer \\"2\\". It is guaranteed that the first operation will always be of type 1, ensuring the array is not empty when an operation of type 2 is performed. Output For every operation of type 2, print the maximum sum of any contiguous subarray within A on a new line. Example Input 7 1 1 1 2 1 -4 2 1 3 1 -1 2 Output 3 3","solution":"def process_operations(Q, operations): Processes a list of operations on an initially empty array and returns the results of operation type 2 which determine the maximum sum of any contiguous subarray. Parameters: Q (int): Number of operations. operations (list of str): List of operations in string format. Returns: list of int: Results of each type 2 operation. A = [] results = [] for operation in operations: parts = operation.split() if parts[0] == \\"1\\": A.append(int(parts[1])) elif parts[0] == \\"2\\": max_sum = max_contiguous_subarray_sum(A) results.append(max_sum) return results def max_contiguous_subarray_sum(A): Helper function to find the maximum sum of any contiguous subarray in A. Parameters: A (list of int): The list of integers. Returns: int: The maximum sum of any contiguous subarray. max_ending_here = max_so_far = A[0] for x in A[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given a matrix of size N x M filled with integers. Your task is to transform the matrix such that every row and every column is sorted in ascending order while maintaining the relative positions of all matrix elements. Print the transformed matrix in the format specified in the Output section: Constraints: 1. 1 leq N, M leq 100 2. Each element of the matrix is an integer between -1000 and 1000 (inclusive) Input: Input is given from the Standard Input in the following format: N M a_{1,1} a_{1,2} ... a_{1,M} a_{2,1} a_{2,2} ... a_{2,M} ... a_{N,1} a_{N,2} ... a_{N,M} Output: Output should be in the following format: 1. Print N lines, each containing M space-separated integers - the elements of the transformed matrix. Example: Input: 3 3 3 1 2 4 6 5 7 9 8 Output: 3 4 5 6 8 9 1 2 7 Input: 2 4 1 3 5 7 2 4 6 8 Output: 1 2 3 4 5 6 7 8","solution":"def sort_matrix(matrix): This function takes a matrix and returns a new matrix where each row and each column is sorted in ascending order while maintaining the relative positions of all matrix elements. N = len(matrix) M = len(matrix[0]) # Flatten the matrix and sort the elements flattened_sorted = sorted(sum(matrix, [])) # Initialize the transformed matrix with the same dimensions transformed = [[0] * M for _ in range(N)] # Fill the transformed matrix row-wise with sorted elements for i in range(N): for j in range(M): transformed[i][j] = flattened_sorted[i * M + j] return transformed def transform_and_print_matrix(N, M, matrix): transformed_matrix = sort_matrix(matrix) for row in transformed_matrix: print(\\" \\".join(map(str, row))) # Helper function to take input from stdin and call the transform_and_print_matrix function def main(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) M = int(data[1]) matrix = [] index = 2 for i in range(N): row = [int(data[index + j]) for j in range(M)] matrix.append(row) index += M transform_and_print_matrix(N, M, matrix)"},{"question":"You are tasked with organizing a set of chemical elements into molecule structures based on the bonding rules provided. Each node in the structure represents an element, and edges between nodes signify bonds. Given a list of elements and their bonding capacities, you need to construct a connected graph that adheres to these rules: 1. Each element can bond only a specific number of times. 2. You must not exceed the bonding capacity for any element. 3. You need to link all elements into a single structure with no isolated parts. 4. If possible, you should maximize the number of bonds. # Input - First line contains a single integer n (1 ≤ n ≤ 1000), indicating the number of elements. - The next n lines each contain a string (element name) and an integer (bonding capacity), separated by a space. # Output If it is possible to arrange the elements into a single connected structure that satisfies the bonding rules, output any such configuration in the following format: - List of edges, where each edge is represented by two integers (indices of the nodes in a 0-based index system). If it is not possible, output `-1`. # Example Input ``` 4 H 1 O 2 O 2 H 1 ``` Output ``` 0 1 1 2 2 3 ``` # Explanation In the example, we have 2 hydrogen atoms (H) each with a bonding capacity of 1, and 2 oxygen atoms (O) each with a bonding capacity of 2. The arrangement provided in the output is just one possible way to create a connected structure where the bonding rules are satisfied.","solution":"def organize_molecules(n, elements): Organize chemical elements into a molecule structure based on bonding rules. Arguments: n -- the number of elements elements -- a list of tuples where each tuple contains an element name and its bonding capacity Returns: A list of edges which connects all nodes (elements) in a single structure or -1 if it is not possible from collections import defaultdict if n == 1: return [] # A single element is trivially connected bonds_left = {i: capacity for i, (element, capacity) in enumerate(elements)} adjacency_list = defaultdict(list) edges = [] candidates = [0] # Start with the first element while candidates: u = candidates.pop() for v in range(n): if u != v and bonds_left[u] > 0 and bonds_left[v] > 0: if v not in adjacency_list[u]: adjacency_list[u].append(v) adjacency_list[v].append(u) bonds_left[u] -= 1 bonds_left[v] -= 1 edges.append((u, v)) if bonds_left[u] > 0: candidates.append(u) if bonds_left[v] > 0: candidates.append(v) # Check if all elements are fully linked for i in range(n): if not adjacency_list[i]: return -1 # Check for all nodes if they are fully utilized if any(bonds_left[i] > 0 for i in range(n)): return -1 return edges"},{"question":"You are designing a garden for a park and need to ensure that all pathways meet at a central point. Given the positions of the intersection points from where the pathways start, you must determine the minimum bounding rectangle (MBR) that can be formed based on these points. This MBR will represent the region over which you will lay your pathways. Write a program to find the MBR for the given set of intersection points. Input Each input case is given in the following format: N x1 y1 ... xN yN The first line contains an integer N (1 ≤ N ≤ 20) which specifies the number of intersection points. The subsequent N lines each contain two integers xi and yi (0 ≤ xi, yi ≤ 100), which represent the x- and y-coordinates of the intersection points. Output For each test case, output a single line formatted as: Case #: LX LY HX HY Where LX and LY are the coordinates of the lower-left corner, and HX and HY are the coordinates of the upper-right corner of the MBR that encompasses all the intersection points. If there is only one intersection point, the MBR\'s lower-left and upper-right corners will be the same as this single point. Example Input 3 1 1 2 2 3 3 4 0 0 1 1 0 1 1 0 1 2 2 Output Case 1: 1 1 3 3 Case 2: 0 0 1 1 Case 3: 2 2 2 2","solution":"def find_mbr(test_cases): Given a list of test cases with the intersection points, this function will find the minimum bounding rectangle (MBR) that can be formed based on these points. :param test_cases: List of tuples. Each tuple contains an integer N and a list of tuples of coordinates. [(N1, [(x1, y1), (x2, y2), ...]), (N2, [(x1, y1), (x2, y2), ...]), ...] :return: List of formatted MBR strings for each test case. results = [] for i, (N, points) in enumerate(test_cases): # Initialize the min and max values using the first point min_x = max_x = points[0][0] min_y = max_y = points[0][1] # Iterate over the points to find min/max x and min/max y for x, y in points: if x < min_x: min_x = x if x > max_x: max_x = x if y < min_y: min_y = y if y > max_y: max_y = y # Format the result as required result = f\\"Case {i + 1}: {min_x} {min_y} {max_x} {max_y}\\" results.append(result) return results # Example usage: test_cases = [ (3, [(1, 1), (2, 2), (3, 3)]), (4, [(0, 0), (1, 1), (0, 1), (1, 0)]), (1, [(2, 2)]) ] output = find_mbr(test_cases) for res in output: print(res)"},{"question":"You are given a list of n integers, representing the stock prices of a company for n days. Your task is to determine the best day to buy and the best day to sell to maximize your profit. You must buy before you sell and cannot sell before you buy. If no profit can be made, return 0. Input The first line contains an integer n (1 ≤ n ≤ 200,000), representing the number of days. The second line contains n integers separated by spaces, representing the stock prices on each day. Each price pi will be a non-negative integer (0 ≤ pi ≤ 100,000). Output Print a single integer, representing the maximum profit obtainable. If no profit can be made, print 0. Constraints The question consists of three subproblems with varying constraints on the input size n: * In subproblem C1, 1 ≤ n ≤ 20 (4 points). * In subproblem C2, 1 ≤ n ≤ 2,000 (4 points). * In subproblem C3, 1 ≤ n ≤ 200,000 (8 points). Examples Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 Note In the first example, the maximal profit can be achieved if you buy on day 2 (price = 1) and sell on day 5 (price = 6). This gives you a profit of 6 - 1 = 5. In the second example, no transaction can be made that results in a positive profit, so the output is 0.","solution":"def max_profit(prices): Returns the maximum profit obtainable from buying and selling stocks. :param prices: List of integers representing stock prices on each day. :return: Integer representing maximum profit. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Avery has developed a fascination with binary strings and their palindromic properties. A palindrome is a string that reads the same forwards and backwards. Avery wants to generate all possible binary strings of length n and count how many of these are palindromic. Given an integer n, your task is to determine the number of palindromic binary strings of length n. Input The input consists of a single integer n (1 ≤ n ≤ 30). Output Output a single integer - the number of palindromic binary strings of length n. Examples Input 1 Output 2 Input 2 Output 2 Input 3 Output 4 Note: For example, for n = 2, palindromic binary strings are \\"00\\" and \\"11\\". For n = 3, palindromic binary strings are \\"000\\", \\"101\\", \\"010\\", and \\"111\\".","solution":"def count_palindromic_binary_strings(n): Returns the number of palindromic binary strings of length n. if n == 1: return 2 # \\"0\\" and \\"1\\" # For even length n, we can pick the first half freely # For odd length n, we can pick the first half and the middle bit freely half_len = (n + 1) // 2 # n // 2 + n % 2 return 2 ** half_len"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Example Input 6 7 .#. .#....# .#.#..# .#... . .m..t..... 4 1 1 1 4 4 1 4 4 Output 3","solution":"from collections import deque def shortest_path(n, m, grid, queries): Computes the shortest path between pairs of coordinates in a grid. def bfs(start, end): # BFS initialization queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 results = [] for start, end in queries: result = bfs(start, end) results.append(result) return results"},{"question":"Problem Statement A pharmaceutical company is working on a project to identify possible drug interactions between different compounds. They have a list of compounds, each identified by a unique code, and their interactions are represented in the form of a matrix. Your task is to help the company find out which compounds have the highest number of direct interactions (including itself). Input Format The first line contains an integer N, the number of compounds. The next N lines each contain N integers separated by spaces, representing the interaction matrix. A value of 1 indicates an interaction between compounds, while 0 indicates no interaction. Output Format Output the code of the compound with the highest number of direct interactions. If there is a tie, output the compound that appears first in the list. Constraints 1 ≤ N ≤ 100 Each value in the interaction matrix is either 0 or 1. SAMPLE INPUT 4 1 0 1 1 0 1 1 0 1 1 1 0 1 0 0 1 SAMPLE OUTPUT Compound 1","solution":"def find_compound_with_most_interactions(N, matrix): max_interactions = -1 compound_with_max_interactions = -1 for i in range(N): interactions = sum(matrix[i]) if interactions > max_interactions: max_interactions = interactions compound_with_max_interactions = i # Returning 1-based index compound return f\\"Compound {compound_with_max_interactions + 1}\\" # Sample call N = 4 matrix = [ [1, 0, 1, 1], [0, 1, 1, 0], [1, 1, 1, 0], [1, 0, 0, 1] ] print(find_compound_with_most_interactions(N, matrix)) # Output: Compound 1"},{"question":"John is organizing a conference and needs to form an ideal schedule for the talks. There are n talks, each defined by a start time and an end time. John wants to select a maximum number of non-overlapping talks so that he can attend as many of them as possible. Can you help him determine the optimal schedule? Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of talks. Each of the following n lines contains two space-separated integers si and ei (0 ≤ si < ei ≤ 1000000) — the start time and the end time of the i-th talk. Output In the first line, print a single integer k — the number of non-overlapping talks in the optimal schedule. In the second line, print k space-separated integers — the indices of the selected talks in any order (the talks are 1-indexed). If there are multiple optimal solutions, print any of them. Examples Input 5 1 3 2 5 4 7 6 9 8 10 Output 3 1 3 5 Input 4 1 2 3 4 0 6 5 7 Output 3 1 2 4","solution":"def optimal_schedule(n, talks): sorted_talks = sorted(enumerate(talks, 1), key=lambda x: x[1][1]) count = 0 last_end_time = 0 selected_talks = [] for index, talk in sorted_talks: if talk[0] >= last_end_time: selected_talks.append(index) last_end_time = talk[1] count += 1 return count, selected_talks"},{"question":"In a magical forest, there are N mystical trees, each with a certain height. The forest has a unique characteristic: each tree can only grow or shrink by a limited height range every day. The wizard in the forest wants to plant these trees in such a way that the difference in height between any two adjacent trees is at most K units at the end of the day. Your task is to determine if it\'s possible to rearrange the trees such that the above condition holds true. Constraints * 1 leq N leq 100000 * 1 leq height_i leq 100000 * 0 leq K leq 100000 * All input values are integers. Input Input is given from Standard Input in the following format: N K height_1 height_2 ... height_N Output Print `POSSIBLE` if it is possible to rearrange the trees to meet the condition; otherwise, print `IMPOSSIBLE`. Examples Input 5 3 4 2 5 1 6 Output POSSIBLE Input 4 0 3 1 2 6 Output IMPOSSIBLE Input 7 1 7 1 8 2 9 3 10 Output IMPOSSIBLE Input 6 2 3 3 3 3 3 3 Output POSSIBLE","solution":"def can_rearrange_trees(N, K, heights): Determines if it\'s possible to rearrange the trees such that height difference between any two adjacent trees is at most K units. Parameters: N (int): The number of trees. K (int): The maximum allowed height difference between two adjacent trees. heights (list): A list of tree heights. Returns: str: \'POSSIBLE\' if the rearrangement is possible, otherwise \'IMPOSSIBLE\'. # If K is 0, all heights must be the same for the rearrangement to be possible if K == 0: if len(set(heights)) == 1: return \'POSSIBLE\' else: return \'IMPOSSIBLE\' # Sort the heights to minimize the difference between adjacent trees heights.sort() # Check if maximum difference between adjacent sorted elements is <= K for i in range(1, N): if heights[i] - heights[i-1] > K: return \'IMPOSSIBLE\' return \'POSSIBLE\'"},{"question":"Problem Description. A company conducts an annual employee appreciation event where each participant is awarded points based on their performance in various activities. Help the event organizers by writing a program that calculates the total points for a participant. Given the points scored in five different activities, determine the total points and output the corresponding grade based on the following criteria: - Grade A: Total points ≥ 450 - Grade B: 400 ≤ Total points < 450 - Grade C: 350 ≤ Total points < 400 - Grade D: 300 ≤ Total points < 350 - Grade E: Total points < 300 Input Input description. Five integers representing the points scored in each activity. Output Output description. Print the total points and the corresponding grade. Constraints Each activity score is within the range: 0 ≤ Score ≤ 100 Example Input: 90 85 78 88 92 Output: 433 Grade B","solution":"def calculate_total_and_grade(scores): Calculate the total points and corresponding grade based on scores in five activities. Args: scores (list of int): List of 5 integers representing the points in five activities. Returns: tuple: Total points (int) and corresponding grade (str). if len(scores) != 5: raise ValueError(\\"There must be exactly 5 scores\\") total_points = sum(scores) if total_points >= 450: grade = \'A\' elif total_points >= 400: grade = \'B\' elif total_points >= 350: grade = \'C\' elif total_points >= 300: grade = \'D\' else: grade = \'E\' return total_points, grade # Example usage: # scores = [90, 85, 78, 88, 92] # total_points, grade = calculate_total_and_grade(scores) # print(total_points) # print(grade)"},{"question":"Katie has a collection of special strings that follow a unique set of rules. A string is considered \\"special\\" if it meets the following criteria: * The string consists only of the letters \'a\' and \'b\'. * No two \'a\'s are adjacent to each other. * The string does not start or end with \'b\'. Katie wants to know how many special strings of length n she can form given these rules. Write a program that computes the number of special strings of length n. Input The input contains a single integer n (1 ≤ n ≤ 50) — the length of the string. Output Print a single integer representing the number of special strings of length n. Examples Input 3 Output 2 Input 4 Output 3 Note For the first example: The special strings of length 3 are \\"aba\\" and \\"bab\\". For the second example: The special strings of length 4 are \\"abab\\", \\"baba\\" and \\"babb\\". Constraints: 1 ≤ n ≤ 50","solution":"def count_special_strings(n): if n == 1: return 1 dp = [0] * (n + 1) dp[1] = 1 dp[2] = 1 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"A city needs to lay down a network of pipes to connect several reservoirs together to ensure a steady water supply throughout the area. The city authorities want to minimize the cost of laying the pipes while ensuring that there is a direct or indirect path between every pair of reservoirs. There are M possible pipes that can be used to connect the reservoirs. Each pipe connects exactly two reservoirs, and the cost of laying each pipe is known. The city has N reservoirs, numbered 1 through N. Your task is to determine the minimum cost required to connect all the reservoirs. # Input Read the following input from standard input. * The first line contains two integers N and M, the number of reservoirs and the number of possible pipes, respectively. * Each of the following M lines contains three integers u, v, and w, where u and v are the numbers of the reservoirs connected by the pipe, and w is the cost of laying the pipe. # Output Output the minimum cost required to connect all the reservoirs. If it\'s impossible to connect all the reservoirs, output -1. # Constraints All input data satisfy the following conditions: * 1 ≤ N ≤ 100,000 * 0 ≤ M ≤ 200,000 * 1 ≤ u, v ≤ N * 1 ≤ w ≤ 1,000,000 # Example Input ``` 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 ``` Output ``` 7 ``` Explanation In this example, the optimal way to connect all the reservoirs is: - Connect reservoir 1 to reservoir 2 at a cost of 1. - Connect reservoir 2 to reservoir 3 at a cost of 2. - Connect reservoir 3 to reservoir 4 at a cost of 3. So the minimum cost to connect all reservoirs is 1 + 2 + 3 = 6. If it\'s not possible to connect all reservoirs (for example, if there are isolated reservoirs), the output should be -1.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def min_cost_to_connect_reservoirs(N, M, pipes): if N == 0: return 0 parent = [i for i in range(N)] rank = [0] * N edges = sorted(pipes, key=lambda x: x[2]) cost = 0 edges_used = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 if find(parent, u) != find(parent, v): union(parent, rank, u, v) cost += w edges_used += 1 if edges_used == N - 1: break # Check if we were able to connect all the reservoirs if edges_used != N - 1: return -1 return cost def process_input_data(input_data): data = list(input_data.split()) N = int(data[0]) M = int(data[1]) pipes = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) pipes.append((u, v, w)) index += 3 return N, M, pipes def main(): import sys input_data = sys.stdin.read() N, M, pipes = process_input_data(input_data) result = min_cost_to_connect_reservoirs(N, M, pipes) print(result)"},{"question":"You are given a long road that consists of a sequence of cells. Each cell has a height value, representing its elevation above sea level. Initially, all cells are at different heights. Along this road, you can perform a series of operations to equalize certain sections of the road. Operation types are as follows: - Increment: Increase the height of a segment of cells by a given integer value. - Query: Retrieve the current maximum height in a given segment of cells. Your task is to handle a series of such operations and provide the results of the query operations. Input: - The first line contains two integers, `n` and `q` (1 ≤ n, q ≤ 100,000), representing the number of cells and the number of operations, respectively. - The second line contains `n` integers, where the `i-th` integer represents the initial height of the `i-th` cell. - The next `q` lines describe the operations. Each operation is either: - `1 l r v`: Increment the heights from cell `l` to cell `r` (inclusive) by `v` (1 ≤ l ≤ r ≤ n, -10^9 ≤ v ≤ 10^9). - `2 l r`: Query the maximum height in the segment from cell `l` to cell `r` (inclusive) (1 ≤ l ≤ r ≤ n). Output: - For each query operation, output the maximum height in the specified segment. Example: Input: ``` 5 4 5 2 9 7 1 1 2 4 3 2 1 5 1 1 5 1 2 3 5 ``` Output: ``` 10 11 ``` Explanation: 1. Initially, the heights are `[5, 2, 9, 7, 1]`. 2. After the first operation, `[5, (2+3=5), (9+3=12), (7+3=10), 1]` results in `[5, 5, 12, 10, 1]`. 3. The first query operation asks for the maximum height from index 1 to 5, which is `12`. 4. After the third operation, all heights increase by 1, resulting in `[6, 6, 13, 11, 2]`. 5. The second query operation asks for the maximum height from index 3 to 5, which is `13`.","solution":"class Road: def __init__(self, heights): self.heights = heights def increment(self, l, r, v): for i in range(l - 1, r): self.heights[i] += v def query(self, l, r): return max(self.heights[l - 1:r]) def process_operations(n, q, heights, operations): road = Road(heights) results = [] for operation in operations: if operation[0] == 1: _, l, r, v = operation road.increment(l, r, v) elif operation[0] == 2: _, l, r = operation results.append(road.query(l, r)) return results"},{"question":"You are given a sequence of N integers representing the quality of N sequential builds in a software project. Each build has a certain quality value. You need to determine the minimum number of changes required to make the sequence of build qualities strictly increasing. A change could be any modification to a single value in the sequence. A sequence of build qualities is strictly increasing if every element is strictly greater than the previous one. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of builds. The second line contains N space-separated integers A1, A2, ..., AN denoting the qualities of the builds. Output For each test case, output a single line containing the minimum number of changes required to make the sequence of build qualities strictly increasing. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ Ai ≤ 10^6 Example Input: 2 5 3 2 5 1 7 4 2 3 1 4 Output: 2 1 Explanation Example case 1. You can increase the second quality from 2 to 4 and the fourth quality from 1 to 6 to get the sequence [3, 4, 5, 6, 7]. Example case 2. You can increase the third quality from 1 to 5 to get the sequence [2, 3, 5, 4]. Further increase the fourth quality from 4 to 6 to achieve [2, 3, 5, 6].","solution":"def min_changes_to_strictly_increasing(seq): n = len(seq) dp = [1] * n for i in range(1, n): for j in range(i): if seq[i] > seq[j]: dp[i] = max(dp[i], dp[j] + 1) longest_increasing_subseq_length = max(dp) return n - longest_increasing_subseq_length def process_test_cases(test_cases): results = [] for seq in test_cases: results.append(min_changes_to_strictly_increasing(seq)) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) seq = list(map(int, lines[index + 1].strip().split())) test_cases.append(seq) index += 2 return test_cases def main(input_str): test_cases = parse_input(input_str) results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Given an integer N, implement an algorithm to generate the following triangle pattern: # Pattern Description - The pattern consists of N lines. - Each line i (1 <= i <= N) contains i numbers. - The numbers in odd-indexed lines (1st, 3rd, 5th, etc.) are increasing sequentially starting from 1. - The numbers in even-indexed lines (2nd, 4th, 6th, etc.) are decreasing sequentially starting from the highest number printed so far plus 1. For example, if N=5, the pattern would look like this: ``` 1 3 2 4 5 6 10 9 8 7 11 12 13 14 15 ``` # Task Write a function that takes an integer N and returns a list of lists representing the triangle pattern. The inner lists should contain the numbers for each individual line of the pattern. # Input - An integer N (1 <= N <= 1000) # Output - A list of lists of integers, representing the triangle pattern. # Examples Example 1 Input: ``` 4 ``` Output: ``` [ [1], [3, 2], [4, 5, 6], [10, 9, 8, 7] ] ``` Example 2 Input: ``` 5 ``` Output: ``` [ [1], [3, 2], [4, 5, 6], [10, 9, 8, 7], [11, 12, 13, 14, 15] ] ```","solution":"def generate_triangle_pattern(N): result = [] current_number = 1 for i in range(1, N + 1): if i % 2 == 1: # Odd indexed line, increasing sequence line = list(range(current_number, current_number + i)) else: # Even indexed line, decreasing sequence line = list(range(current_number + i - 1, current_number - 1, -1)) result.append(line) current_number += i return result"},{"question":"Mashmokh decided to further improve his programming skills by solving more complex problems. One of the challenging tasks given to him is the following: You are given an initial string s containing lowercase Latin letters and digits. Mashmokh needs to perform a series of operations on the string. For each operation, you are given a pair of integers (l, r), where l and r represent the starting and ending positions (1-based). The operation involves finding the most frequent character(s) within the specified substring and returning the lexicographically smallest one if there is a tie. Given the initial string and all the operations, output the result of each operation. Input The first line of input contains a string s (1 ≤ length of s ≤ 100000), the initial string. The second line of input contains a single integer q (1 ≤ q ≤ 100000), the number of operations. The following q lines each contain two integers l and r (1 ≤ l ≤ r ≤ length of s), describing the operations. Output Output q lines. For each operation, print the most frequent character in the specified substring. If there are multiple characters with the same frequency, print the lexicographically smallest one. Example Input abracadabra 3 1 3 4 7 6 10 Output a a a Note For the first operation, the substring is \\"abr\\", the most frequent character is \'a\'. For the second operation, the substring is \\"acad\\", the most frequent character is \'a\'. For the third operation, the substring is \\"adabr\\", the most frequent character is \'a\'.","solution":"def most_frequent_char(s, queries): Returns the most frequent character for each query within the string s. If there is a tie in frequency, returns the lexicographically smallest one. :param s: Initial string containing lowercase Latin letters and digits :param queries: List of tuples, where each tuple contains two integers (l, r) :return: List of most frequent characters for each query results = [] for l, r in queries: substring = s[l-1:r] freq = {} for char in substring: freq[char] = freq.get(char, 0) + 1 max_freq = max(freq.values()) most_frequent_chars = [char for char, count in freq.items() if count == max_freq] results.append(min(most_frequent_chars)) return results"},{"question":"A group of friends is planning a hiking trip. They have a list of n trails to choose from, and each trail can be represented as a weighted directed graph. The nodes of the graph represent rest stops, and the edges represent the trails between rest stops with a certain weight indicating the time (in minutes) it takes to traverse that trail. Your task is to help them determine the minimum time required to travel from a starting rest stop to a destination rest stop for each trail. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10,000) — the number of rest stops and the number of trails respectively. The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) indicating there is a trail from rest stop u to rest stop v that takes w minutes to traverse. The next line contains two integers s and d (1 ≤ s, d ≤ n) — the starting and destination rest stops respectively. Output For each test case, if there is a path from the starting rest stop to the destination rest stop, print the minimum time required. Otherwise, print -1 indicating there is no way to reach the destination from the start. Example Input 3 4 4 1 2 5 2 3 10 3 4 2 4 1 8 1 4 4 3 1 2 4 2 3 1 3 4 6 1 3 5 0 1 2 2 Output 17 5 -1 Explanation In the first test case, the minimum path from rest stop 1 to rest stop 4 is through 1 -> 2 -> 3 -> 4 with a total travel time of 5 + 10 + 2 = 17 minutes. In the second test case, the minimum path from rest stop 1 to rest stop 3 is directly connected through 1 -> 2 -> 3 with a total travel time of 4 + 1 = 5 minutes. In the third test case, there are no trails (edges) in the graph, hence it is impossible to travel from rest stop 1 to rest stop 2, and the output is -1.","solution":"import heapq from collections import defaultdict, deque def find_min_time(t, test_cases): def dijkstra(graph, start, end, n): pq = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[end] if dist[end] != float(\'inf\') else -1 results = [] for case in test_cases: n, m, edges, s, d = case graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) result = dijkstra(graph, s, d, n) results.append(result) return results def process_input(input_str): data = input_str.strip().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n, m = int(data[index]), int(data[index+1]) index += 2 edges = [] for _ in range(m): u, v, w = int(data[index]), int(data[index+1]), int(data[index+2]) index += 3 edges.append((u, v, w)) s, d = int(data[index]), int(data[index+1]) index += 2 test_cases.append((n, m, edges, s, d)) return t, test_cases def main(input_str): t, test_cases = process_input(input_str) results = find_min_time(t, test_cases) return results"},{"question":"You are given a list of N integers, and you need to find the smallest positive integer that does not appear in the list. Constraints * 1 leq N leq 10^5 * -10^9 leq A_i leq 10^9 Input Input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N ``` Output Print the smallest positive integer that does not appear in the list. Examples Input ``` 3 1 2 3 ``` Output ``` 4 ``` Input ``` 5 0 -1 1 2 100 ``` Output ``` 3 ``` Input ``` 6 5 5 5 1 2 3 ``` Output ``` 4 ```","solution":"def smallest_missing_positive_integer(n, a): Returns the smallest positive integer that does not appear in the list a. Parameters: n (int): Number of elements in the list. a (list of int): List of integers. Returns: int: The smallest positive integer that is not in the list. # Using a set to store only the positive elements positive_set = set(x for x in a if x > 0) # Start from 1 and check if each number is in the set smallest_positive = 1 while smallest_positive in positive_set: smallest_positive += 1 return smallest_positive"},{"question":"You are given a list of integers. For each integer, determine whether it can be represented as the sum of two unique prime numbers. Write a program to solve this problem. Input The first line contains a single integer t (1 ≤ t ≤ 10^6), the number of test cases. Each of the next t lines contains a single integer n (4 ≤ n ≤ 10^6), which is the number to be checked. Output For each integer n, output \\"YES\\" if it can be represented as the sum of two unique prime numbers, otherwise output \\"NO\\". SAMPLE INPUT 3 10 17 34 SAMPLE OUTPUT YES NO YES Explanation For the first test case, 10 can be represented as the sum of two prime numbers 3 and 7. For the second test case, there are no two unique prime numbers that sum up to 17. For the third test case, 34 can be represented as the sum of two prime numbers 3 and 31.","solution":"def sieve(n): is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 is_prime[0], is_prime[1] = False, False primes = [p for p in range(n + 1) if is_prime[p]] return primes, is_prime def can_be_sum_of_two_unique_primes(n, primes, is_prime): for prime in primes: if prime >= n: return \\"NO\\" if is_prime[n - prime]: return \\"YES\\" return \\"NO\\" def check_numbers(t, numbers): max_number = max(numbers) primes, is_prime = sieve(max_number) results = [] for number in numbers: results.append(can_be_sum_of_two_unique_primes(number, primes, is_prime)) return results # Example usage: # t = 3 # numbers = [10, 17, 34] # results = check_numbers(t, numbers) # for result in results: # print(result)"},{"question":"Given an array of integers and a target value, your task is to determine if there are any two distinct elements in the array whose sum is equal to the target value. If such a pair exists, return the indices of the two numbers. If no such pair exists, return -1. Solve this in linear time complexity O(n). Input The first line of input contains a single number n (0 ≤ n ≤ 10^5) — the size of the array. The second line of input contains n space-separated integers a_i (−10^9 ≤ a_i ≤ 10^9) — the elements of the array. The third line of input contains a single integer target (−10^9 ≤ target ≤ 10^9) — the target sum value. Output If a pair of indices i, j (0 ≤ i, j < n) exists such that a_i + a_j = target and i ≠ j, return the indices i and j. If multiple pairs exist, return any pair. If no such pair exists, return -1. Examples Input 5 1 2 3 4 5 6 Output 1 3 Input 4 2 7 11 15 9 Output 0 1 Input 3 -1 -2 -3 -5 Output 1 2 Input 3 1 2 3 7 Output -1 Note In the first example, the indices 1 and 3 correspond to the numbers 2 and 4, which sum up to the target value 6. In the second example, the indices 0 and 1 correspond to the numbers 2 and 7, which sum up to the target value 9. In the third example, the indices 1 and 2 correspond to the numbers -2 and -3, which sum up to the target value -5. In the fourth example, there is no pair of indices whose elements sum up to the target value 7, so the output is -1.","solution":"def find_two_sum_indices(arr, target): Given an array of integers and a target value, determine if there are any two distinct elements in the array whose sum is equal to the target value. Parameters: arr (list of int): The array of integers. target (int): The target sum value. Returns: tuple: A tuple (i, j) of the indices of the two numbers that sum up to the target, or -1 if no such pair exists. num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return -1"},{"question":"Maria loves arranging her collection of flowers in her garden and ensuring that her garden thrives all year round. Every season, she plants different types of flowers and maintains the garden’s vibrant look. She maintains a schedule to ensure each type of flower gets the correct amount of sunlight, water, and fertilizer. Maria is exceptionally particular about the watering schedule. Create a program to help Maria determine the total amount of water needed each day based on the weather report. The program should take one dataset containing the following input: 1. n (number of flowers: integer) 2. Details of each flower on n lines, formatted as follows: - Name of the flower (string, up to 20 characters) - Daily water requirement for clear weather (in liters, integer) - Daily water requirement for rainy weather (in liters, integer) 3. The number of days d (integer) 4. Weather report for the next d days, which consists of d lines, each line representing \\"clear\\" or \\"rain\\". The program must determine the total water requirement for all flowers over the specified days\' weather forecast. # Input n (integer) flower_name1 clear water amount1 rainy water amount1 flower_name2 clear water amount2 rainy water amount2 ... flower_nameN clear water amountN rainy water amountN d (integer) weather_day1 weather_day2 ... weather_dayD # Output A single integer representing the total amount of water needed for all flowers over the specified days. # Constraints - n ≤ 100 (number of flowers) - Each flower\'s clear and rainy water requirement is an integer between 0 and 100. - d ≤ 365 (number of days) - Weather report is always either \\"clear\\" or \\"rain\\". # Example Input 3 rose 2 1 tulip 3 2 daisy 1 1 3 clear rain clear Output 18 Explanation: - On day 1 (clear), the total water = (2+3+1) = 6 - On day 2 (rain), the total water = (1+2+1) = 4 - On day 3 (clear), the total water = (2+3+1) = 6 Total water required over 3 days = 6 + 4 + 6 = 16","solution":"def calculate_total_water(n, flowers, d, weather_report): total_water = 0 for day in range(d): if weather_report[day] == \\"clear\\": total_water += sum(flower[\\"clear\\"] for flower in flowers) elif weather_report[day] == \\"rain\\": total_water += sum(flower[\\"rainy\\"] for flower in flowers) return total_water"},{"question":"Find the closest number Input: The first line contains a single integer T which represents the number of test cases. The following T lines each contain three integers X, Y, and Z each representing a test case. Output: For each test case, print the number (either X or Y) which is closest to Z. If both have the same absolute distance from Z, print the smaller number. Constraints: 1 ≤ T ≤ 1000 1 ≤ X, Y, Z ≤ 10^9 Problem Setter: [Your Name] SAMPLE INPUT 3 5 10 7 12 15 13 20 18 19 SAMPLE OUTPUT 5 12 18","solution":"def find_closest_numbers(test_cases): Determines which number is closest to Z for each test case. In case of a tie, returns the smaller number. Parameters: test_cases (list): List of tuples, where each tuple contains three integers X, Y, Z. Returns: list: List of integers, each being the number closest to Z from the respective test case. results = [] for X, Y, Z in test_cases: dist_X = abs(X - Z) dist_Y = abs(Y - Z) if dist_X < dist_Y: results.append(X) elif dist_Y < dist_X: results.append(Y) else: results.append(min(X, Y)) return results"},{"question":"Given a string with possible duplicate characters, the task is to remove the duplicate characters and return the resultant string such that each character appears exactly once. The order of characters in the resultant string should be the same as their first appearance in the original string. Constraints * 1 ≤ |S| ≤ 100,000 Input A single string S. Output A single string with no duplicate characters, preserving the order of their first appearance. Example Input banana Output ban Input character Output charte","solution":"def remove_duplicates(s): Removes duplicate characters from the input string `s` and returns the resultant string such that each character appears exactly once and in the order of their first appearance. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \\"\\".join(result)"},{"question":"In a distant land, there are numerous farms cultivating unique herbs. Each herb contributes a specific health benefit, but unfortunately, some of these farms have been experiencing issues with pests. The government has decided to help farmers by distributing protection measures. However, to make the most effective use of available resources, they need to ensure that each farm gets enough protection without any wastage. Each farm i produces qi herbs per year, and the government can provide each farm with a pesticide that can protect up to pi herbs per year. The cost of production and distribution drastically increases with higher values of pi, so they need to find the minimum value of pi where the sum of all pi is sufficiently high to protect each farm. Given the production quantities of each herb and the pests levels for each farm, determine the minimum possible value of pi for each farm such that the sum of all pi just exceeds the total production of herbs. Input The first line contains integer n (1 ≤ n ≤ 10^5), the number of farms. The second line contains n integers q1, q2, ..., qn (1 ≤ qi ≤ 10^9), the production quantities of herbs for each farm. Output Print the minimum possible total value of all pi, needed for optimal pest protection across all farms. Examples Input 3 100 200 300 Output 600 Input 4 10 10 10 10 Output 40","solution":"def minimum_total_protection(n, herb_production): Given the production quantities of herbs for each farm, return the minimum possible total value of all pest protection needed. # The simplest approach for this problem is to sum up all the production quantities. # Since we need to provide protection that sums up to or just exceeds the total production, # the minimal sum of protections needed is equal to the sum of all production quantities. return sum(herb_production)"},{"question":"You are given an m × n rectangular grid. Each cell of the grid contains an integer, where the integer represents the height of the terrain at that cell. Two cells are considered neighboring if they share an edge. You need to determine the number of distinct islands in the grid. An island is a vertical column of cells that is surrounded by the ocean on all four sides. The ocean is assumed to be at height 0. A column of cells forms an island if its height is greater than any of its neighboring cells\' heights or it is taller than the grid boundary (if it is on the grid edge). Input - The first line contains two integers m and n (1 ≤ m, n ≤ 100), which are the dimensions of the grid. - The next m lines contain n integers each, representing the height of the cells in the grid. Each height will be between 0 and 1000. Output - Print a single integer, the number of distinct islands in the grid. Examples Input 3 3 1 2 1 2 3 2 1 2 1 Output 1 Input 4 4 5 1 1 1 1 2 2 1 1 2 2 1 1 1 1 5 Output 2 Input 3 3 0 0 0 0 0 0 0 0 0 Output 0","solution":"def count_islands(m, n, grid): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() visited[cx][cy] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == grid[cx][cy]: stack.append((nx, ny)) visited = [[False] * n for _ in range(m)] island_count = 0 for i in range(m): for j in range(n): if grid[i][j] > 0 and not visited[i][j]: if all((grid[i][j] > grid[ni][nj] for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)] if 0 <= ni < m and 0 <= nj < n)): dfs(i, j) island_count += 1 return island_count"},{"question":"Given an array of integers which may contain duplicates, write a program to find all unique subsets of the given array. The solution set must not contain duplicate subsets and the subsets can be returned in any order. Function Signature: ```python def unique_subsets(nums: List[int]) -> List[List[int]]: ``` Input: - `nums`: A list of integers (1 ≤ len(nums) ≤ 10, -10 ≤ nums[i] ≤ 10). Output: - Return a 2D list containing all unique subsets of the given list. Examples: Input: ``` unique_subsets([1,2,2]) ``` Output: ``` [[],[1],[1,2],[1,2,2],[2],[2,2]] ``` Input: ``` unique_subsets([1,2,3]) ``` Output: ``` [[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]] ``` Note: - The solution should ensure that any duplicate subsets are not included in the final result. - Subsets are listed in lexicographic order based on their contents. In addition to the implementation, you need to ensure the efficiency of your solution to handle the edge cases and constraints effectively.","solution":"from typing import List def unique_subsets(nums: List[int]) -> List[List[int]]: def backtrack(start, path): result.append(path[:]) for i in range(start, len(nums)): # Skip duplicates if i > start and nums[i] == nums[i - 1]: continue path.append(nums[i]) backtrack(i + 1, path) path.pop() nums.sort() result = [] backtrack(0, []) return result"},{"question":"Andrew is planning his workout schedule for the next n days. He either runs or swims each day, but he has some constraints. He can\'t run on two consecutive days, and he can\'t swim on two consecutive days. Given a sequence of numbers where each number represents the activity Andrew can do on that particular day: - 0 if Andrew can only rest (neither run nor swim), - 1 if Andrew can run, - 2 if Andrew can swim, - 3 if Andrew can either run or swim. Determine the minimum number of days Andrew must rest. Input The first line contains a positive integer n (1 ≤ n ≤ 100) — the number of days. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 3) separated by spaces. Output Print the minimum number of days Andrew must rest. Examples Input 5 1 3 3 2 0 Output 1 Input 6 0 1 2 0 1 3 Output 2 Note In the first example, Andrew can run on day 1, swim on day 2, run on day 3, swim on day 4, and rest on day 5. Therefore, he needs to rest for only one day. In the second example, Andrew rests on day 1, runs on day 2, swims on day 3, rests on day 4, runs on day 5, and either runs or swims on day 6. Therefore, he needs to rest for two days.","solution":"def minimum_rest_days(n, activities): rest_days = 0 last_activity = -1 # -1 means no previous activity for i in range(n): if activities[i] == 0: rest_days += 1 last_activity = 0 else: if activities[i] == 1: if last_activity == 1: rest_days += 1 last_activity = 0 else: last_activity = 1 elif activities[i] == 2: if last_activity == 2: rest_days += 1 last_activity = 0 else: last_activity = 2 else: # activities[i] == 3 if last_activity == 1: last_activity = 2 elif last_activity == 2: last_activity = 1 else: last_activity = 1 # default to running if there\'s a choice return rest_days"},{"question":"A delivery service needs to optimize the allocation of parcels to delivery regions. Each parcel has a weight and each region has a maximum capacity it can carry. Your task is to determine if all parcels can be delivered by the respective regions without exceeding their capacities. You will be provided with multiple test cases. For each test case, you will have the weights of the parcels and the capacities of the delivery regions. You need to determine if it is possible to allocate the parcels such that no region is overloaded. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains one integer n (1 ≤ n ≤ 1000) — the number of parcels (and regions). The second line of each test case contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the parcels. The third line of each test case contains n integers c1, c2, ..., cn (1 ≤ ci ≤ 1000) — the capacities of the regions. Output For each test case, print \\"YES\\" if it is possible to assign all parcels to regions without exceeding their capacities, otherwise print \\"NO\\". Example Input 2 3 10 20 30 30 20 10 4 15 25 35 45 50 40 30 20 Output YES YES","solution":"def can_allocate_parcels(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] weights = test_cases[i][1] capacities = test_cases[i][2] # Sort weights and capacities in non-decreasing order weights.sort() capacities.sort() possible = True for j in range(n): if weights[j] > capacities[j]: possible = False break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alex loves playing with arrays. One day, he decided to play a game where he performs a special transformation on the array multiple times. The transformation involves the following steps: 1. Pick any two distinct elements from the array. 2. Remove those two elements and add their sum back to the array. Alex repeats this process until only one element remains in the array. You are given an array and you need to determine the maximum possible value of the remaining element after performing the transformation optimally. Input The first line of input consists of an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the elements of the array. Output For each test case, print a single integer, the maximum possible value of the remaining element, after performing the transformation optimally. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 50 1 ≤ array[i] ≤ 1000 Example Input: 2 3 1 2 3 4 5 1 9 3 Output: 6 19","solution":"def optimal_transformation(arr): Perform the optimal transformation on the array and return the maximum possible value of the remaining element. return sum(arr) def max_remaining_value_after_transformation(T, test_cases): For each test case, determine the maximum possible value of the remaining element after the transformation. results = [] for i in range(T): N, arr = test_cases[i] result = optimal_transformation(arr) results.append(result) return results"},{"question":"In a remote village, there is a tradition of distributing sweets to children during festivals. The village has a rule that every child should receive exactly the same number of sweets, and the sweets must be distributed in the minimum number of complete distribution rounds. In one round, the total number of sweets delivered must be divided equally among all children present. You are given the number of sweets and the number of children. Your task is to determine the minimum number of complete distribution rounds required such that each child receives exactly the same number of sweets. INPUT: The first line contains an integer T, the number of test cases. Each of the next T lines contains two space-separated integers: the number of sweets S and the number of children C. OUTPUT: For each test case, output the minimum number of complete distribution rounds required. CONSTRAINTS: 1 <= T <= 100 1 <= S, C <= 10^9 SAMPLE INPUT: 2 10 3 15 5 SAMPLE OUTPUT: 4 3","solution":"def min_distribution_rounds(T, cases): results = [] for S, C in cases: if C == 0: results.append(0) # No children to distribute sweets to. else: results.append((S + C - 1) // C) # Ceiling division to get the minimum rounds. return results"},{"question":"In a town, there are m houses arranged in a straight line and n shops located at certain positions along this line. Each house wants to buy groceries from the nearest shop. You need to determine for each house, the minimum distance to the nearest shop and print those distances. Input The first line contains a single integer m (1 ≤ m ≤ 100) — the number of houses. The second line contains m integers, the positions of the houses. The third line contains a single integer n (1 ≤ n ≤ 100) — the number of shops. The fourth line contains n integers, the positions of the shops. All positions are distinct and are given in sorted ascending order (from left to right along the street). Output Print m integers, the minimum distances from each house to the nearest shop, each on a new line. Examples Input 3 1 5 9 2 3 8 Output 2 2 1 Input 4 1 4 10 20 3 2 5 11 Output 1 1 1 9 Note In the first test sample: - For house at position 1, the nearest shop is at position 3 (distance = 2) - For house at position 5, the nearest shop is at position 3 or 8 (distance = 2) - For house at position 9, the nearest shop is at position 8 (distance = 1)","solution":"def nearest_shops(m, house_positions, n, shop_positions): For each house, determine the minimum distance to the nearest shop. Parameters: m (int): Number of houses. house_positions (List[int]): Positions of the houses. n (int): Number of shops. shop_positions (List[int]): Positions of the shops. Returns: List[int]: The minimum distances from each house to the nearest shop. distances = [] for house in house_positions: min_distance = float(\'inf\') for shop in shop_positions: distance = abs(house - shop) min_distance = min(min_distance, distance) distances.append(min_distance) return distances # Example usage: # m = 3 # house_positions = [1, 5, 9] # n = 2 # shop_positions = [3, 8] # print(nearest_shops(m, house_positions, n, shop_positions)) # Output: [2, 2, 1]"},{"question":"A delivery company operates a set of depots arranged in a straight line, numbered from 1 to n. Each depot has a certain number of packages stored, which can be represented by an array `packages` where packages[i] indicates the number of packages at depot i (1 ≤ i ≤ n). A delivery truck needs to complete tasks based on specific queries. There are two types of queries: 1. Update the number of packages at a specific depot. 2. Calculate the total number of packages stored in a range of depots. Each query is executed in the following format: - 1 i x: Set the number of packages from depot i to x. - 2 l r: Calculate and print the total number of packages from depots l to r inclusive. Input The first line of the input contains two integers n and q (1 ≤ n, q ≤ 100,000), representing the number of depots and the number of queries, respectively. The next line contains n integers separated by spaces, where the ith integer represents packages[i] (0 ≤ packages[ i] ≤ 10^9). The following q lines each contain a query in one of the specified formats (1 ≤ i ≤ n, 1 ≤ l ≤ r ≤ n). Output For each query of type 2, print a single integer on a new line – the total number of packages in the range specified by the query. Example Input 5 5 2 8 3 10 5 2 1 5 2 2 4 1 3 7 2 1 5 2 3 3 Output 28 21 28 7 Explanation - The first query (2 1 5) asks for the sum of packages from depot 1 to 5, which is 2 + 8 + 3 + 10 + 5 = 28. - The second query (2 2 4) asks for the sum of packages from depot 2 to 4, which is 8 + 3 + 10 = 21. - The third query (1 3 7) sets the number of packages at depot 3 to 7. - The fourth query (2 1 5) asks for the new sum of packages from depot 1 to 5, which now is 2 + 8 + 7 + 10 + 5 = 32. - The fifth query (2 3 3) asks for the number of packages just at depot 3, which is now 7.","solution":"def process_queries(n, q, packages, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'1\': i, x = int(parts[1]), int(parts[2]) packages[i-1] = x elif parts[0] == \'2\': l, r = int(parts[1]), int(parts[2]) total = sum(packages[l-1:r]) results.append(total) return results"},{"question":"You are given an integer array and an integer k. Find the maximum sum of any non-empty subarray of length at most k. Input: First line contains T, the number of testcases. Each testcase consists of two lines: The first line contains two integers n (the number of elements in the array) and k. The second line contains n space-separated integers representing the elements of the array. Output: For each testcase, print the maximum sum of any non-empty subarray of length at most k. Constraints: 1 ≤ T ≤ 50 1 ≤ n ≤ 10^5 1 ≤ k ≤ n -10^4 ≤ array[i] ≤ 10^4 SAMPLE INPUT 2 5 3 1 -2 3 4 -5 6 2 -1 4 -2 3 5 -3 SAMPLE OUTPUT 7 8 Explanation In the first testcase, the maximum sum subarray of length at most 3 is [3, 4], which sums up to 7. In the second testcase, the maximum sum subarray of length at most 2 is [3, 5], which sums up to 8.","solution":"def max_sum_subarray(n, k, arr): Returns the maximum sum of any non-empty subarray of length at most k. max_sum = float(\'-inf\') for length in range(1, k + 1): current_sum = sum(arr[:length]) max_sum = max(max_sum, current_sum) for i in range(length, n): current_sum += arr[i] - arr[i - length] max_sum = max(max_sum, current_sum) return max_sum def solve_test_cases(test_cases): results = [] for n, k, arr in test_cases: result = max_sum_subarray(n, k, arr) results.append(result) return results"},{"question":"The government of a small island nation is designing a new evacuation plan. The island has `n` evacuation shelters numbered from `1` to `n`. Each shelter is connected to other shelters by bidirectional roads. The government wants to ensure that in case of an emergency, it\'s possible to evacuate people such that everyone can reach at least one shelter. Given the task to determine whether the road network of the island forms a strongly connected graph or not. A strongly connected graph is one in which there is a path from any shelter to any other shelter, ensuring that every shelter can be reached from any other shelter. Write a program to check if the network of shelters and roads forms a strongly connected graph. # Input The input consists of multiple test cases. Each test case starts with two integers: `n` and `m`, where `n` (1 ≤ n ≤ 1000) is the number of shelters and `m` (0 ≤ m ≤ n(n-1)) is the number of roads connecting the shelters. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), indicating that there is a bidirectional road between shelters `u` and `v`. The input ends with a line containing two zeroes. # Output For each test case, output \\"YES\\" if the road network forms a strongly connected graph, otherwise output \\"NO\\". # Example Input ``` 4 5 1 2 2 3 3 4 4 1 2 4 3 2 1 3 4 5 4 0 0 0 ``` Output ``` YES YES NO ``` # Note: - A single road between two shelters is enough for the graph to be strongly connected if it connects all shelters in a bidirectional manner. - If no roads exist, the shelters are isolated and the graph is not strongly connected unless `n` is 1.","solution":"def is_strongly_connected(n, m, edges): from collections import defaultdict, deque def bfs(start, graph, n): visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return all(visited[1:]) if n == 1: return \\"YES\\" graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) reverse_graph[u].append(v) reverse_graph[v].append(u) # Check connectivity from any node (e.g., node 1) using both the graph and its transposed version (reversed) if bfs(1, graph, n) and bfs(1, reverse_graph, n): return \\"YES\\" else: return \\"NO\\" def evacuation_plan(test_cases): results = [] for n, m, edges in test_cases: results.append(is_strongly_connected(n, m, edges)) return results"},{"question":"Two friends, Alice and Bob, love playing with numbers. On a lazy Saturday afternoon, they come across two integer numbers and decide to play a game in which they need to compute the greatest common divisor (gcd) of these two integers. Write a program that helps them determine the gcd of the given numbers. **Input** The input consists of a single line containing two integers separated by a space. a b The integers a and b (1 leq a, b leq 1000) are the numbers Alice and Bob selected to play with. **Output** Output the greatest common divisor of the two integers. **Examples** Input 48 18 Output 6 Input 100 25 Output 25 Input 17 13 Output 1","solution":"import math def gcd(a, b): Returns the greatest common divisor of a and b using Euclid\'s algorithm. return math.gcd(a, b) def parse_input_and_compute_gcd(input_string): Parses the input string to extract two integers and compute their gcd. a, b = map(int, input_string.split()) return gcd(a, b)"},{"question":"You are given an array of N integers. You need to perform Q queries on the array. Each query is of one of the following types: 1. Update the ith element (1-indexed) of the array to a new value X. 2. Compute the sum of the elements from index L to index R (both 1-indexed). Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ Q ≤ 10^5 * 1 ≤ A[i] ≤ 10^9 (initial elements of the array) * 1 ≤ X ≤ 10^9 * 1 ≤ L ≤ R ≤ N Input Your program will receive input from Standard Input in the following format: First line contains an integer N. Second line contains N space-separated integers representing the initial elements of the array. Third line contains an integer Q. Next Q lines contain queries in one of the following formats: * `1 i X` for the update operation. * `2 L R` for the range sum operation. Output For each query of type 2, print the sum of the elements from index L to index R (1-indexed). Examples Input 5 1 2 3 4 5 3 2 1 3 1 2 10 2 1 3 Output 6 14","solution":"class ArrayOperations: def __init__(self, arr): self.arr = arr def update(self, i, X): if 1 <= i <= len(self.arr): self.arr[i-1] = X def range_sum(self, L, R): if 1 <= L <= R <= len(self.arr): return sum(self.arr[L-1:R]) def perform_operations(arr, queries): array_ops = ArrayOperations(arr) results = [] for query in queries: if query[0] == 1: array_ops.update(query[1], query[2]) elif query[0] == 2: result = array_ops.range_sum(query[1], query[2]) results.append(result) return results"},{"question":"You are given an array of integers `arr` and a target sum `S`. Your task is to find whether there exist two distinct elements in `arr` such that their sum equals `S`. Write a function `has_pair_with_sum(arr, S)` that takes in a list of integers `arr` and an integer `S`, and returns `\\"YES\\"` if there exists such a pair, otherwise returns `\\"NO\\"`. Input - The first line contains the number of test cases `T` (1 ≤ T ≤ 10). - Each test case consists of two lines: - The first line contains the number of elements `n` (2 ≤ n ≤ 10^5) and the target sum `S` (-10^9 ≤ S ≤ 10^9). - The second line contains `n` space-separated integers representing the array `arr` (-10^9 ≤ arr[i] ≤ 10^9). Output For each test case, print \\"YES\\" if there exists two distinct elements in `arr` whose sum is equal to `S`, otherwise print \\"NO\\". Example Input ``` 2 4 9 2 7 11 15 5 10 1 2 3 4 5 ``` Output ``` YES NO ``` Explanation In the first test case, the elements `2` and `7` sum to `9`, so the output is `\\"YES\\"`. In the second test case, no two distinct elements sum to `10`, so the output is `\\"NO\\"`.","solution":"def has_pair_with_sum(arr, S): Returns \\"YES\\" if there are two distinct elements in arr that sum to S, otherwise \\"NO\\". seen = set() for num in arr: if S - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def process_test_cases(test_cases): results = [] for case in test_cases: n, S = case[0] arr = case[1] results.append(has_pair_with_sum(arr, S)) return results"},{"question":"Emilia is planning a new theme park with various attractions, and one of the most exciting features will be a series of interconnected slides. These slides need to connect various platforms at different heights. Each slide can only go from a higher platform to a lower platform and must connect two platforms directly without passing through another. Each platform i has a height hi, and each slide j can be represented by an ordered pair of platform indices (uj, vj) where platform uj is higher than platform vj. The fun rating of each slide j is defined as the height difference between platform uj and platform vj, i.e., fun(j) = huj - hvj. Emilia wants to set up the slides in such a way that the maximum possible sum of the fun ratings of the slides used is achieved, but no platform should be in more than one slide (either as a start or an end). Given the number of platforms and their respective heights, your task is to find the maximum sum of the fun ratings for any valid set of slides. Input The first line of the input contains an integer n (2 ≤ n ≤ 105), the number of platforms. Each of the next n lines contains a single integer hi (1 ≤ hi ≤ 109), the height of the ith platform. Output Output a single integer – the maximum sum of the fun ratings. Examples Input 5 10 20 30 40 50 Output 40 Input 4 100 50 75 25 Output 75 Note In the first example, one optimal setup would be to connect the first platform with the second (fun rating 10), and either the third with the fourth or the fourth with the fifth (fun rating 30). The sum is 10 + 30 = 40. In the second example, one optimal setup could be to connect the first platform with the fourth (fun rating 75), and the second with the third (fun rating 25). The maximum sum is 75, as no other connection provides a higher fun rating.","solution":"def max_fun_rating(n, heights): Returns the maximum sum of the fun ratings for any valid set of slides. :param n: Number of platforms :param heights: List of heights of the platforms if n < 2: return 0 # Sorting the heights in descending order to pair the highest difference of consecutive heights heights.sort(reverse=True) max_sum = 0 # Compute the maximum possible sum of fun ratings for i in range(1, n): max_sum += heights[i - 1] - heights[i] return max_sum"},{"question":"# Unique Ingredients List Chef Alfred is trying to create a list of unique ingredients for a new dish by combining ingredients from several existing dishes. Each dish\'s ingredient list is represented as a string of comma-separated ingredient names. However, some ingredients might be listed more than once either within a single dish or across multiple dishes. Chef Alfred wants to create a final list of ingredients that only includes each ingredient once, regardless of how many times it appears in the original lists. Write a function `unique_ingredients` that takes a list of ingredient strings and returns a new string containing all unique ingredients, sorted alphabetically, and separated by commas. Function Signature ```python def unique_ingredients(dishes: List[str]) -> str: ``` Input - A list of `dishes`, where each `dishes[i]` (1 ≤ length of dishes ≤ 10) is a string that contains between 1 and 100 comma-separated lower-case ingredient names. Each ingredient name in a string is between 1 and 20 characters long. Output - The function should return a single string containing all unique ingredient names sorted alphabetically and separated by commas. Example ```python dishes = [ \\"tomato,onion,lettuce,cheese\\", \\"cheese,lettuce,carrot,lettuce\\", \\"bread,onion,tomato,lettuce\\" ] print(unique_ingredients(dishes)) # Output: \\"bread,carrot,cheese,lettuce,onion,tomato\\" ``` In this example, \\"tomato\\", \\"onion\\", \\"lettuce\\", and \\"cheese\\" are listed as ingredients in the first dish. The second dish adds \\"carrot\\" and \\"cheese\\". The final dish includes \\"bread\\" along with some repeated ingredients. The resulting list includes each ingredient only once and alphabetically sorted: \\"bread,carrot,cheese,lettuce,onion,tomato\\".","solution":"from typing import List def unique_ingredients(dishes: List[str]) -> str: Returns a string of unique ingredient names sorted alphabetically, separated by commas. ingredients_set = set() for dish in dishes: ingredients_list = dish.split(\',\') ingredients_set.update(ingredients_list) unique_ingredients_sorted = sorted(ingredients_set) return \',\'.join(unique_ingredients_sorted)"},{"question":"You are a software engineer working on improving the company\'s document management system. One of the features is to generate a summary of the statistics of words in a given document. Specifically, you need to identify the most frequently occurring word in the document. # Problem Statement Write a program that reads a document and outputs the word that appears most frequently. If multiple words have the same frequency, return the lexicographically smallest word. Words are separated by spaces, and punctuation should be ignored. The document will be provided as a single input with words in lowercase. # Input A single line with up to 1,000,000 characters containing words separated by spaces. Words consist of lowercase letters. The input can include punctuation marks such as .,?! but these should be ignored. # Output A single line containing the most frequently occurring word. In case of a tie, output the lexicographically smallest word. # Example Input ```shell the quick brown fox jumps over the lazy dog. the quick fox is quick. ``` Output ```shell quick ``` In this example: - `the` appears 3 times - `quick` appears 3 times - `fox` appears 2 times - `is` appears 1 time - `brown`, `jumps`, `over`, `lazy`, `dog` each appear 1 time Though `the` and `quick` both appear three times, `quick` is lexicographically smaller than `the`. # Function Signature (Python) ```python def most_frequent_word(document: str) -> str: pass ``` Write the function to solve the problem according to the specifications detailed above.","solution":"import re from collections import Counter def most_frequent_word(document: str) -> str: # Remove punctuation using regular expression cleaned_document = re.sub(r\'[^ws]\', \'\', document) # Split the document into words words = cleaned_document.split() # Count the frequency of each word word_count = Counter(words) # Find the word with the maximum frequency, breaking ties by lexicographical order most_frequent = min(word_count.items(), key=lambda x: (-x[1], x[0])) return most_frequent[0]"},{"question":"A research group at Kyoto University is working on a project involving temperature data analysis. They collect temperature readings throughout the day and generate a sequence of temperature values. The challenge is to identify periods of stable temperatures. A stable period is defined as a consecutive subsequence of temperatures where the temperature value does not change. For each query, given a sequence of temperature readings, find the length of the longest stable period in the sequence. For example, Assume you read the following sequence from the left: [21, 21, 19, 19, 19, 22, 22, 22, 22, 18, 18, 18]? The longest stable period in this sequence would be from the 6th to the 9th reading where the temperature remains 22, resulting in a stable period of length 4. Constraints: * 1 leq T leq 100 (number of test cases) * Each sequence contains between 1 and 1000 temperature readings. * Each temperature reading is an integer between -100 and 100. Input The input consists of multiple test cases and is given from Standard Input in the following format: T sequence_1-length sequence_1 sequence_2-length sequence_2 ... sequence_T-length sequence_T Each sequence_line consists of a length followed by space-separated temperature readings. Output For each sequence, output the length of the longest stable period on a new line. Examples Input 3 12 21 21 19 19 19 22 22 22 22 18 18 18 5 23 23 23 23 23 8 -10 -10 -10 -9 -8 -8 -8 -8 Output 4 5 4","solution":"def find_longest_stable_period(sequence): Given a sequence of temperature readings, find the length of the longest stable period. if not sequence: return 0 max_stable_length = current_length = 1 for i in range(1, len(sequence)): if sequence[i] == sequence[i - 1]: current_length += 1 else: max_stable_length = max(max_stable_length, current_length) current_length = 1 max_stable_length = max(max_stable_length, current_length) return max_stable_length def process_temperatures(input_data): Processes a list of strings where the first element is the number of test cases, and each subsequent element contains a sequence length followed by temperature readings. Returns a list of longest stable period lengths for each sequence. lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] for i in range(1, T + 1): sequence = list(map(int, lines[i].split()[1:])) longest_stable_period = find_longest_stable_period(sequence) results.append(longest_stable_period) return results"},{"question":"You are given a list of integers. The aim is to write a program that calculates the sum of all unique integers in the list after removing minimum and maximum values. If all values in the list are the same or only one unique number exists after removing min and max, the sum should be zero. Write a program that takes an integer N as the size of the list, followed by the list of N integers, and outputs the required sum. INPUT: An integer T (1 ≤ T ≤ 100) : number of test cases For each test case: - An integer N (2 ≤ N ≤ 100000) : the size of the list - N integers which make up the list OUTPUT: For each test case, output the sum of unique integers after removing the min and max values. SAMPLE INPUT 2 6 1 3 3 2 2 5 4 7 7 7 7 SAMPLE OUTPUT 5 0","solution":"def sum_unique_after_removing_min_max(test_cases): results = [] for N, integers in test_cases: if N < 2: results.append(0) continue unique_integers = list(set(integers)) if len(unique_integers) <= 2: results.append(0) continue unique_integers.sort() relevant_integers = unique_integers[1:-1] results.append(sum(relevant_integers)) return results"},{"question":"A robot is placed in an MxN grid at position (0, 0). The robot can move either right or down, but cannot visit any blocked cells. You are given a grid where \'1\' represents a walkable cell and \'0\' represents a blocked cell. Write a function to determine the number of unique paths from the top-left corner to the bottom-right corner of the grid. The robot can only move through walkable cells. Input First line of input contains T, the number of test cases. The next T sets of inputs start with two integers M and N. The next M lines each contain N integers (either \'0\' or \'1\'), representing the grid. Output For each test case, output a single integer representing the number of unique paths from the top-left to the bottom-right corner of the grid. If there is no valid path, the output should be 0. Constraints: 1 <= T <= 50 1 <= M, N <= 100 Grid[i][j] ∈ {0,1} Example Input: 3 3 3 1 1 1 1 0 1 1 1 1 2 2 1 0 1 1 3 3 1 1 1 1 0 0 1 1 1 Example Output: 2 1 1 Explanation: Test case 1: There are two possible paths for the robot to move from (0, 0) to (2, 2) which are (0, 0)→(0, 1)→(0, 2)→(1, 2)→(2, 2) and (0, 0)→(1, 0)→(2, 0)→(2, 1)→(2, 2). Test case 2: There is only one possible path for the robot from (0, 0) to (1, 1) which is (0, 0)→(1, 0)→(1, 1). Test case 3: There is only one possible path for the robot from (0, 0) to (2, 2) which is (0, 0)→(1, 0)→(2, 0)→(2, 1)→(2, 2).","solution":"def unique_paths(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of the grid. The \'grid\' contains \'1\' for walkable cells and \'0\' for blocked cells. M = len(grid) N = len(grid[0]) if grid[0][0] == 0 or grid[M-1][N-1] == 0: return 0 dp = [[0 for _ in range(N)] for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1] def process_test_cases(input_data): lines = input_data.strip().split(\'n\') idx = 0 T = int(lines[idx]) idx += 1 results = [] for _ in range(T): M, N = map(int, lines[idx].split()) idx += 1 grid = [] for i in range(M): grid.append(list(map(int, lines[idx].split()))) idx += 1 results.append(unique_paths(grid)) return results # Example input processing input_data = 3 3 3 1 1 1 1 0 1 1 1 1 2 2 1 0 1 1 3 3 1 1 1 1 0 0 1 1 1 print(process_test_cases(input_data))"},{"question":"A university course has multiple assignments, each with a set maximum score. Throughout the semester, students can complete any number of assignments. At the end of the semester, the professor can decide to drop exactly one assignment from the grading calculations to maximize a student\'s final score. Your task is to calculate the maximum possible score a student can achieve after dropping exactly one assignment. Input The first line contains a single integer n (2 ≤ n ≤ 100), the number of assignments. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 10 000), representing the scores achieved by a student in each assignment. Output Print a single integer representing the maximum possible score the student can achieve after dropping exactly one assignment. Examples Input 4 4 7 2 8 Output 19 Input 3 3 3 3 Output 6 Explanation In the first example, the student\'s scores are 4, 7, 2, and 8. Dropping the assignment with a score of 2 maximizes their total score, resulting in 4 + 7 + 8 = 19. In the second example, all assignments have the same score. Dropping any one of them results in the same total score, 3 + 3 = 6.","solution":"def max_score_after_dropping_one(scores): Returns the maximum possible score after dropping exactly one assignment. Args: scores (list): List of integers representing the scores of assignments. Returns: int: Maximum possible score after dropping one assignment. # Sum of all the scores. total_score = sum(scores) # Minimum score in the list. min_score = min(scores) # Maximum score after dropping one assignment. max_possible_score = total_score - min_score return max_possible_score"},{"question":"You have N rooms in a hotel, each with a certain number of guests staying in it. The manager wants to select K adjacent rooms such that the total number of guests in those K rooms is maximized. Determine the maximum total number of guests that can be achieved from selecting K contiguous rooms. Constraints * 1 ≤ K ≤ N ≤ 200000 * 0 ≤ g_i ≤ 1000 * All values in input are integers. Input Input is given from Standard Input in the following format: N K g_1 ... g_N Output Print the maximum total number of guests that can be accommodated in K adjacent rooms. Examples Input 5 3 1 2 3 4 5 Output 12 Input 7 2 2 1 3 4 6 7 8 Output 15 Input 10 4 10 20 30 40 50 60 70 80 90 100 Output 340","solution":"def max_guests_in_k_rooms(N, K, guests): Returns the maximum total number of guests in K contiguous rooms. :param N: Total number of rooms :param K: Number of contiguous rooms to select :param guests: List containing the number of guests in each room :return: The maximum total number of guests in K contiguous rooms # Initial sum of first K rooms max_guests = sum(guests[:K]) current_sum = max_guests for i in range(K, N): # Slide the window by one position to the right current_sum = current_sum + guests[i] - guests[i - K] # Update the maximum sum if the current window\'s sum is greater max_guests = max(max_guests, current_sum) return max_guests # Example usage: # print(max_guests_in_k_rooms(5, 3, [1, 2, 3, 4, 5])) # Output: 12"},{"question":"You are given a string consisting of lowercase Latin letters. A substring of this string is called diverse if it contains no more than k distinct letters. Your task is to find the length of the longest diverse substring of the given string. Input The first line contains a single integer t (1 ≤ t ≤ 1000) – the number of test cases. Each test case consists of two lines. The first line contains an integer k (1 ≤ k ≤ 26) – the maximum number of distinct letters allowed in a diverse substring. The second line contains a string s (1 ≤ |s| ≤ 10^5) – the string to be processed. It is guaranteed that the total length of all strings in one test does not exceed 10^5. Output For each test case, output a single integer – the length of the longest diverse substring of the corresponding string. Example Input 3 2 abcba 1 aaaaa 3 abcabcbb Output 3 5 8 Note In the first test case, the longest diverse substring with at most 2 distinct letters is \\"bcb\\". In the second test case, the entire string \\"aaaaa\\" is the longest diverse substring since it contains only one unique letter. In the third test case, the entire string \\"abcabcbb\\" is the longest diverse substring with at most 3 distinct letters.","solution":"from collections import defaultdict def longest_diverse_substring(k, s): Returns the length of the longest diverse substring containing no more than k distinct characters. max_len = 0 current_count = defaultdict(int) distinct_count = 0 left = 0 for right in range(len(s)): current_count[s[right]] += 1 if current_count[s[right]] == 1: distinct_count += 1 while distinct_count > k: current_count[s[left]] -= 1 if current_count[s[left]] == 0: distinct_count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len def process_test_cases(t, test_cases): Processes multiple test cases and returns their results. results = [] for i in range(t): k = test_cases[i][0] s = test_cases[i][1] results.append(longest_diverse_substring(k, s)) return results"},{"question":"Given a string S of length n, your task is to determine if it can be permuted to form a palindrome. A palindrome is a word that reads the same forward and backward. For example, the string \\"abba\\" can be read the same forward and backward, hence it is a palindrome. The string \\"abcba\\" is also a palindrome. However, the string \\"abc\\" cannot be rearranged to form a palindrome. Input format: S The first line contains the text string S. Constraints: - 1 leq |S| leq 10^5 - S consists of lowercase English letters (\'a\' to \'z\'). Output format: Print \\"yes\\" if the string can be permuted to form a palindrome, and \\"no\\" otherwise. Input example 1: carrace Output example 1: yes Input example 2: hello Output example 2: no Input example 3: aabbccdd Output example 3: yes Example explanation: In the first example, \\"carrace\\" can be rearranged to form \\"racecar\\", which is a palindrome, so the output is \\"yes\\". In the second example, no permutation of \\"hello\\" can be a palindrome, so the output is \\"no\\". In the third example, \\"aabbccdd\\" can be rearranged to form \\"abcdcba\\", which is a palindrome, so the output is \\"yes\\".","solution":"def can_form_palindrome(S): Determines if the given string S can be permuted to form a palindrome. Parameters: S (str): Input string consisting of lowercase English letters. Returns: str: \\"yes\\" if the string can be permuted to form a palindrome, otherwise \\"no\\". from collections import Counter # Count the frequency of each character in the string char_count = Counter(S) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character has an odd frequency, it cannot form a palindrome if odd_count > 1: return \\"no\\" return \\"yes\\""},{"question":"There is a large chess tournament taking place in a town. There are n players in the tournament, each identified by a unique ID from 1 to n. A match between any two players is always either a win for one player or a win for the other player. The tournament is held in such a way that it produces a unique winner, who is the player that has the most wins. If two or more players have the same number of wins, the player with the smaller ID wins the tournament. The results of the matches are provided in a match-history list. Each element in the list consists of two integers (a, b) meaning player `a` won against player `b`. Your task is to determine the unique winner of the tournament. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of players. The second line contains an integer m (1 ≤ m ≤ 10^6) — the number of matches. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) — indicating that player `a` won against player `b`. Output Print the ID of the player who won the tournament. Examples Input 4 5 1 2 2 3 1 3 2 4 1 4 Output 1 Input 3 4 1 2 3 1 2 3 3 2 Output 3 Note In the first example, player 1 has won against players 2, 3, and 4. Player 2 has won against players 3 and 4. Therefore, player 1 has the most wins and is the unique winner. In the second example, all players have the same number of wins (each player won once). Since player 3 has a lower ID than others with the same number of wins, player 3 is declared the winner.","solution":"def find_tournament_winner(n, m, matches): win_count = [0] * (n + 1) for a, b in matches: win_count[a] += 1 winner = 1 for player in range(2, n + 1): if win_count[player] > win_count[winner] or (win_count[player] == win_count[winner] and player < winner): winner = player return winner"},{"question":"A company wants to optimize the performance of its computer cluster. The cluster consists of `n` servers, each server has a processing capacity defined by an integer value `c[i]` (1 ≤ c[i] ≤ 10^9). You are also given `t` types of tasks, each task type `j` requires a processing power of `p[j]` (1 ≤ p[j] ≤ 10^9) to be executed. The task is to decide if it is possible to assign exactly one task of each type to exactly one server such that the combined load on any server does not exceed its processing capacity. If such an assignment is possible, you should provide one valid configuration. Otherwise, if no such configuration exists, return \\"IMPOSSIBLE\\". Input - The first line contains two integers `n` and `t` (1 ≤ n, t ≤ 1000) — the number of servers and number of task types. - The second line contains `n` integers describing the capacities of the servers `c[1], c[2], ..., c[n]`. - The third line contains `t` integers describing the required processing power for each task type `p[1], p[2], ..., p[t]`. Output - If a valid configuration exists, print \\"POSSIBLE\\". - Print `t` lines, each containing two integers `a[i]` and `b[i]` (1 ≤ a[i] ≤ n and 1 ≤ b[i] ≤ t) indicating that server `a[i]` will handle task type `b[i]`. - If no valid configuration exists, print \\"IMPOSSIBLE\\". Examples Input: ``` 3 3 10 20 30 5 10 25 ``` Output: ``` POSSIBLE 1 1 2 2 3 3 ``` Input: ``` 2 3 15 10 5 10 5 ``` Output: ``` IMPOSSIBLE ```","solution":"def optimize_cluster(n, t, c, p): Decides if it\'s possible to assign exactly one task of each type to exactly one server such that the combined load on any server does not exceed its processing capacity. Parameters: n (int): Number of servers t (int): Number of task types c (list): List of servers\' capacities p (list): List of task kinds\' processing power Returns: str: \\"POSSIBLE\\" if a valid assignment exists, otherwise \\"IMPOSSIBLE\\" list of tuples: Each tuple contains two integers representing assignments (server, task type) # Sort the capacities and tasks along with their original indices servers = sorted([(c[i], i + 1) for i in range(n)], reverse=True) tasks = sorted([(p[j], j + 1) for j in range(t)], reverse=True) if n < t: return \\"IMPOSSIBLE\\" assignments = [] for j in range(t): found = False for i in range(n): if servers[i][0] >= tasks[j][0]: assignments.append((servers[i][1], tasks[j][1])) servers[i] = (servers[i][0] - tasks[j][0], servers[i][1]) found = True break if not found: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\", assignments"},{"question":"Sam loves to read books, and he keeps a stack of his favorite books in his room. Sam has noticed that sometimes he has to spend too much time looking for a specific book in the stack. To make his search quicker and more efficient, Sam wants to organize his books in a special manner. Sam\'s idea is to rearrange his stack of books such that the most frequently read books are on the top of the stack, and the least frequently read books are at the bottom. If two books have been read the same number of times, they should maintain their initial relative order. Given the initial list of books and the number of times each book has been read, help Sam rearrange his books according to his idea. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of books in the stack. The second line contains n space-separated strings b_1, b_2, ..., b_n — the titles of the books in the stack. The third line contains n space-separated integers r_1, r_2, ..., r_n — the number of times each corresponding book has been read. Output Output the rearranged list of book titles, ordered such that the most frequently read books are at the top of the stack. Maintain the initial relative order for books read the same number of times. Examples Input 5 bookA bookB bookC bookD bookE 3 5 2 5 1 Output bookB bookD bookA bookC bookE Input 4 alpha beta gamma delta 2 3 3 1 Output beta gamma alpha delta Note In the first example, \\"bookB\\" and \\"bookD\\" are the most frequently read books, so they are placed at the top of the stack. \\"bookA\\" comes next followed by \\"bookC\\" and \\"bookE\\". In the second example, \\"beta\\" and \\"gamma\\" have been read the same number of times and are placed on the top, maintaining their initial relative order. \\"alpha\\" and \\"delta\\" follow in order based on their read counts.","solution":"def rearrange_books(n, books, read_counts): Rearranges the books based on the number of times they have been read. Parameters: n (int): the number of books in the stack. books (list of str): the titles of the books in the stack. read_counts (list of int): the number of times each corresponding book has been read. Returns: list of str: the rearranged list of book titles. books_with_counts = list(zip(books, read_counts)) books_with_counts.sort(key=lambda x: (-x[1], books.index(x[0]))) return [book for book, _ in books_with_counts]"},{"question":"In a certain city, there are n different stores, each located at a distinct point on a 2D plane. The distance between two points (x1, y1) and (x2, y2) is defined as the Euclidean distance sqrt((x2 - x1)^2 + (y2 - y1)^2). You need to find the smallest distance between any two stores. Input The first line contains a single positive integer n (2 ≤ n ≤ 10^5) — the number of stores. Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 10^9) — the coordinates of the i-th store. Output Output one real number — the smallest distance between any two stores. Your answer will be considered correct if its absolute error does not exceed 10^-6. Examples Input 5 0 0 0 4 3 0 4 4 1 1 Output 1.414213 Input 3 -1 -1 -2 -2 3 4 Output 1.414213 Note In the first example, the closest stores are at coordinates (0, 0) and (1, 1) with distance sqrt((1 - 0)^2 + (1 - 0)^2) = sqrt(1 + 1) = sqrt(2) ≈ 1.414213. In the second example, the closest stores are at coordinates (-1, -1) and (-2, -2) with distance sqrt(((-2) - (-1))^2 + ((-2) - (-1))^2) = sqrt(1 + 1) = sqrt(2) ≈ 1.414213.","solution":"import math import itertools def smallest_distance(n, coordinates): Returns the smallest distance between any two stores given their coordinates. :param n: Number of stores :param coordinates: List of tuples, each containing the (x, y) coordinates of a store. :return: Smallest Euclidean distance between any two stores. min_distance = float(\'inf\') for (x1, y1), (x2, y2) in itertools.combinations(coordinates, 2): dist = math.dist((x1, y1), (x2, y2)) min_distance = min(min_distance, dist) return min_distance"},{"question":"The Binary Tree is a fundamental data structure in computer science. Each node in a binary tree has at most two children, referred to as the left child and the right child. A common problem involving binary trees is determining the height of the tree. The height of a binary tree is the number of edges in the longest path from the root of the tree to a leaf. Your task is to write a program that calculates the height of a binary tree. Input: The input contains multiple lines. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the tree. Each of the next n lines contains an integer parent (1 ≤ parent ≤ n) — the parent of the node. If the node is the root, its parent will be 0. Output: Print a single integer — the height of the binary tree. Note: The tree will be represented as an array where the i-th element corresponds to the parent of the i-th node. For instance, if the input array is [0, 1, 1, 2], it means: - Node 1 is the root. - Node 2 and Node 3 are children of Node 1. - Node 4 is a child of Node 2. Examples: Input 5 0 1 1 2 2 Output 3 Input 3 0 1 1 Output 2 Explanation: In the first example, the binary tree has the following structure: - Node 1 (root) has children Node 2 and Node 3. - Node 2 has children Node 4 and Node 5. - Therefore, the height of the tree is 3. In the second example, the binary tree has the following structure: - Node 1 (root) has children Node 2 and Node 3. - Therefore, the height of the tree is 2.","solution":"def calculate_height(n, parents): from collections import defaultdict, deque if n == 1: return 1 # Create the tree from the parent array tree = defaultdict(list) root = -1 for i in range(n): if parents[i] == 0: root = i else: tree[parents[i] - 1].append(i) # BFS to calculate the height queue = deque([(root, 0)]) max_height = 0 while queue: node, height = queue.popleft() max_height = max(max_height, height) for child in tree[node]: queue.append((child, height + 1)) return max_height + 1 # Example usage: # n = 5 # parents = [0, 1, 1, 2, 2] # print(calculate_height(n, parents)) # Output: 3 # n = 3 # parents = [0, 1, 1] # print(calculate_height(n, parents)) # Output: 2"},{"question":"A secret sharing group consists of exactly N members. The group leader wants to distribute a secret in such a way that a certain number of subsets of the group can come together to reconstruct the secret. For this purpose, you need to devise a splitting scheme for the secret such that only the groups that are big enough can recreate the secret. Given an integer N representing the number of members in the group, and an integer K representing the minimum number of members required to reconstruct the secret, determine the smallest number of shares that need to be distributed, along with the minimal subset each member needs to achieve the required configuration. A valid configuration ensures that exact K members can piece together the secret, but groups smaller than K cannot. The shares distribution should be as efficient as possible. Constraints * 2 ≤ N ≤ 20 * 2 ≤ K ≤ N Input The input is provided from Standard Input in the following format: N K Output Print the minimal number of shares that need to be distributed. Then, for each member, print the subset of shares they receive. Each member\'s share should be represented as a space-separated list of integers. Examples Input 4 3 Output 3 1 2 3 1 2 3 1 2 3 1 2 3 Input 5 3 Output 4 1 2 2 3 3 4 1 3 Input 6 4 Output 5 1 2 3 4 2 3 4 5 3 4 5 1 4 5 1 2 5 1 2 3 1 2 3 4","solution":"def secret_sharing(N, K): Function to compute the minimal number of shares and the subset of shares for each member to ensure that exactly K members can reconstruct the secret. # Minimum number of shares required num_shares = K # Initialize the shares distribution for each member shares = [] for i in range(N): member_shares = [(i + j) % num_shares + 1 for j in range(K)] shares.append(member_shares) return num_shares, shares def format_output(num_shares, shares): output = [str(num_shares)] for share in shares: output.append(\\" \\".join(map(str, share))) return \\"n\\".join(output)"},{"question":"A popular card game is played with a standard deck of 52 cards, where each card has a suit (hearts, diamonds, clubs, spades) and a value (A, 2, 3, ..., 10, J, Q, K). In this game, players are dealt a specific number of cards, and they need to form the highest possible hand according to predefined rules. The strength of a hand is determined primarily by its type (e.g., full house, flush, straight), and secondarily by the highest card in the given scenario. You are given n cards and your goal is to determine the type of the best possible hand that can be formed using those cards. Hand types from strongest to weakest are: 1. Full House: Three cards of one value and two cards of another value. 2. Flush: All cards of the same suit. 3. Straight: Five consecutive values (Ace can be high or low, but not both). 4. Three of a Kind: Three cards of the same value. 5. Two Pair: Two cards of one value and two cards of another value. 6. Pair: Two cards of one value. 7. High Card: The highest card in the hand if none of the above types can be formed. Input The first line of the input contains one integer q (1 ≤ q ≤ 2 ⋅ 10^5) — the number of queries. Each query consists of a single line containing a string representing n cards separated by spaces (1 ≤ n ≤ 52). Each card in the format \\"VS\\", where V is the value and S is the suit. Note that the values are 2-9, T for 10, J, Q, K, A, and the suits are H (hearts), D (diamonds), C (clubs), S (spades). Output For each query, print one line containing the type of the best possible hand that can be formed with the given cards. Examples Input 3 7H 8H 9H TH JH 2D 2H 2S 3D 3H AH 2H 3H 4H 5H Output Straight Full House Straight","solution":"from collections import Counter hand_types = [ \\"High Card\\", \\"Pair\\", \\"Two Pair\\", \\"Three of a Kind\\", \\"Straight\\", \\"Flush\\", \\"Full House\\" ] def parse_hand(hand): Parse the hand to count the occurrences of each value and each suit. values = \'23456789TJQKA\' suits = \'HDCS\' value_counter = Counter() suit_counter = Counter() for card in hand: value, suit = card[:-1], card[-1] value_counter[value] += 1 suit_counter[suit] += 1 value_counts = sorted(value_counter.values(), reverse=True) return value_counter, suit_counter, value_counts def is_straight(hand): values = \'A23456789TJQKA\' card_values = [card[:-1] for card in hand] card_indices = [values.index(value) for value in card_values] card_indices = list(set(card_indices)) card_indices.sort() for i in range(len(card_indices) - 4): if card_indices[i:i+5] == list(range(card_indices[i], card_indices[i]+5)): return True if card_indices[:4] == [0, 1, 2, 3] and card_indices[-1] == 12: # special case: A-2-3-4-5 return True return False def determine_hand_type(hand): value_counter, suit_counter, value_counts = parse_hand(hand) if 3 in value_counts and 2 in value_counts: return \\"Full House\\" if 5 in suit_counter.values(): if is_straight(hand): return \\"Straight\\" return \\"Flush\\" if is_straight(hand): return \\"Straight\\" if 3 in value_counts: return \\"Three of a Kind\\" if value_counts.count(2) == 2: return \\"Two Pair\\" if 2 in value_counts: return \\"Pair\\" return \\"High Card\\" def find_best_hand(queries): results = [] for hand in queries: cards = hand.split() best_hand = determine_hand_type(cards) results.append(best_hand) return results"},{"question":"Problem Statement Samantha is a data analyst and is preparing a summary report for her research project. She has a collection of data samples, each represented as a sequence of integers. Samantha needs to find out the longest sequence of unique integers in each data sample, where the sequence can be in any order but all integers in the sequence must be distinct. Your task is to write a program that processes multiple data samples and outputs the length of the longest sequence of unique integers for each sample. Input The input contains several datasets, where each dataset starts with an integer n (1 <= n <= 100), which is the number of integers in the sequence. This is followed by n integers, which make up the sequence. The last dataset is followed by a line containing a single zero. Output For each dataset, print the length of the longest sequence of unique integers in a line. Example Input 5 1 2 3 4 5 6 1 2 2 3 3 4 4 10 20 30 10 5 7 7 7 7 7 0 Output 5 4 3 1 Explanation - In the first dataset, all integers are unique, so the longest sequence length is 5. - In the second dataset, a possible longest sequence of unique integers is [1, 2, 3, 4], so the length is 4. - In the third dataset, a possible longest sequence of unique integers is [10, 20, 30], so the length is 3. - In the fourth dataset, all integers are the same, so the longest sequence length is 1.","solution":"def longest_unique_sequence(data): Processes multiple data samples and returns the length of the longest sequence of unique integers for each sample. Input: List of strings, where each string is a line from the input Output: List of integers representing the length of the longest sequence of unique integers for each sample results = [] for line in data: if line.strip() == \'0\': break sequence = list(map(int, line.strip().split())) n = sequence.pop(0) if n != len(sequence): raise ValueError(\\"The number of integers does not match the given n\\") unique_numbers = set(sequence) results.append(len(unique_numbers)) return results"},{"question":"Problem description: A common problem in text analysis is finding the longest sub-string of unique characters. Given a string, you need to write a program that finds the length of the longest substring where all the characters are unique. Input Input description. First input line consists of t number of test cases. The next t lines contain a single string for each test case. Output Output description. For each test case, output a single integer representing the length of the longest substring of unique characters. Constraints 1 <= T <= 100 1 <= length of string <= 1000 Example Input: 2 abcabcbb bbbbb Output: 3 1","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters in the given string `s`. n = len(s) char_map = {} left = 0 max_len = 0 for right in range(n): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_len = max(max_len, right - left + 1) return max_len def longest_unique_substr_lengths(test_cases): Given a list of test case strings, returns a list of lengths of the longest unique substrings. return [length_of_longest_substring(s) for s in test_cases]"},{"question":"You are working on a software for a secure messaging application. One of the features in this application is to check if two messages have the same set of words, regardless of the order. A word is defined as a sequence of characters (both alphabetic and numeric) separated by spaces. Punctuation marks are not considered part of a word. Your task is to implement a function that determines whether two messages are word-equivalent. Input The first line contains the first message as a string M1 (1 ≤ length(M1) ≤ 1000). The second line contains the second message as a string M2 (1 ≤ length(M2) ≤ 1000). Output Output a single line: \\"YES\\" if the two messages have the same set of words, and \\"NO\\" otherwise. Example Input This is a test message! message a This is test. Output YES Input Example two messages: first one. Two msg: 2 First one! Output NO Note In the first example, the messages have identical sets of words: {\\"This\\", \\"is\\", \\"a\\", \\"test\\", \\"message\\"}. Therefore, the output is \\"YES\\". In the second example, the first message has the words {\\"Example\\", \\"two\\", \\"messages\\", \\"first\\", \\"one\\"} and the second message has {\\"Two\\", \\"msg\\", \\"2\\", \\"First\\", \\"one\\"} which are not identical sets, so the output is \\"NO\\".","solution":"import re def are_messages_equivalent(M1, M2): def extract_words(message): # Use regular expression to find words composed of alphanumeric characters words = re.findall(r\'bw+b\', message) # Return the set of words in lowercase to ensure case insensitivity return set(word.lower() for word in words) words1 = extract_words(M1) words2 = extract_words(M2) return \\"YES\\" if words1 == words2 else \\"NO\\""},{"question":"John is planning a road trip across several countries. Each country has several cities connected by one-way roads. John wants to travel from city A to city B, but he wants to make sure he visits at least `k` different cities (including the starting and ending cities) on his way. Given the directed road connections and the number of cities in each country, help John decide whether it\'s possible to travel from city A to city B while visiting at least `k` different cities. Input: The first line contains four integers n, m, A, B (2 ≤ n ≤ 1000, 1 ≤ m ≤ 3000, 1 ≤ A, B ≤ n, A ≠ B) — the number of cities, the number of one-way roads, and the starting and ending cities respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a one-way road from city u to city v. The last line contains a single integer k (2 ≤ k ≤ n) — the minimum number of different cities John wants to visit. Output: If it\'s possible for John to travel from city A to city B while visiting at least `k` different cities, print \\"Possible\\". Otherwise, print \\"Impossible\\". Examples: Input: 6 7 1 5 1 2 2 3 3 4 4 5 1 3 3 5 2 5 4 Output: Possible Input: 3 2 1 3 1 2 2 3 4 Output: Impossible Input: 5 5 1 5 1 2 1 3 2 4 4 5 3 5 3 Output: Possible Explanation: In the first example, John needs to visit at least 4 different cities while traveling from city 1 to city 5. The sequence 1 -> 2 -> 3 -> 4 -> 5 satisfies this condition. In the second example, there is no way for John to visit at least 4 different cities since there are only 3 cities in total and he cannot reuse cities. In the third example, John can visit 3 different cities on his route from city 1 to city 5, for instance, through the path 1 -> 2 -> 4 -> 5.","solution":"from collections import deque, defaultdict def is_possible(n, m, A, B, roads, k): Determine if it\'s possible to travel from city A to city B while visiting at least k different cities. :param n: Total number of cities, an integer. :param m: Total number of roads, an integer. :param A: The starting city, an integer. :param B: The destination city, an integer. :param roads: List of tuples where each tuple represents a one-way road (u, v). :param k: The minimum number of different cities to visit, an integer. :return: \\"Possible\\" if the trip is doable according to the criteria, otherwise \\"Impossible\\". # Create adjacency list of the graph adj = defaultdict(list) for u, v in roads: adj[u].append(v) # Perform BFS to find shortest path with at least k vertices q = deque([(A, [A])]) while q: curr, path = q.popleft() if curr == B and len(path) >= k: return \\"Possible\\" for neighbor in adj[curr]: if neighbor not in path: q.append((neighbor, path + [neighbor])) return \\"Impossible\\""},{"question":"You have an integer array, and your task is to sort it such that all even numbers come before all odd numbers while preserving the relative order of the even and odd numbers. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10000) — the elements of the array. Output - Output the sorted array, with all even numbers placed before all odd numbers, maintaining the relative order of even and odd numbers from the original array. Example Input ``` 6 3 1 2 4 6 5 ``` Output ``` 2 4 6 3 1 5 ``` Note In the given example, the even numbers (2, 4, 6) are placed before the odd numbers (3, 1, 5), and their relative order is preserved from the original array. Solution Framework * Iterate through the given array and separate even and odd numbers into two lists. * Concatenate the even list followed by the odd list. * Print the concatenated result.","solution":"def sort_even_before_odd(arr): Sort the array such that all even numbers come before all odd numbers while preserving the relative order of the even and odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"A group of friends is planning a trip and they have N destinations they want to visit. Each destination i has an associated cost c_i and a fun value f_i. The friends have a total budget of B and they want to maximize the total fun they have during the trip without exceeding their budget. Given the budget and details of each destination, determine the maximum total fun value that the group can achieve within the budget. Constraints * 1 ≤ N ≤ 100 * 1 ≤ B ≤ 10^4 * 1 ≤ c_i, f_i ≤ 100 Input The input is given from Standard Input in the following format: ``` N B c_1 f_1 c_2 f_2 : c_N f_N ``` Output Print the maximum total fun value that can be achieved. Examples Input 3 50 20 50 30 70 50 80 Output 120 Input 4 10 5 10 4 40 6 30 3 50 Output 90","solution":"def max_fun(N, B, destinations): dp = [0] * (B + 1) for cost, fun in destinations: for current_budget in range(B, cost - 1, -1): dp[current_budget] = max(dp[current_budget], dp[current_budget - cost] + fun) return dp[B] # Reading the input from the standard input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) B = int(data[1]) destinations = [(int(data[i]), int(data[i + 1])) for i in range(2, len(data), 2)] print(max_fun(N, B, destinations)) if __name__ == \'__main__\': main()"},{"question":"In a small town, residents have organized a charity event where multiple local businesses will donate items to be auctioned. Each business donates a certain number of items, and each item has a certain value. The event organizers want to maximize the total value of the items available for auction, but can only select items from a fixed number of businesses due to logistic constraints. Your task is to help the organizers by selecting items from exactly k businesses such that the total value of the selected items is maximized. Input The first line contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ n) — the number of businesses and the number of businesses to select from, respectively. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 109), where vi is the total value of items donated by the i-th business. Output Print a single integer — the maximum total value of items that can be selected by choosing exactly k businesses. Examples Input 5 2 1 2 3 4 5 Output 9 Input 6 3 4 2 1 6 3 8 Output 18 Note In the first sample, the optimal selection is from the fourth and fifth businesses, with total values of 4 and 5, respectively, giving a total value of 9. In the second sample, the optimal selection is from the first, fourth, and sixth businesses, with total values of 4, 6, and 8, respectively, giving a total value of 18.","solution":"def maximize_total_value(n, k, values): Returns the maximum total value by selecting items from exactly k businesses. :param n: int - The number of businesses. :param k: int - The number of businesses to select from. :param values: List[int] - A list of integers representing the value of items donated by each business. :return: int - The maximum total value of selected items. values.sort(reverse=True) return sum(values[:k])"},{"question":"Phoenix is hosting a grand party, and he has decided to include a light show to entertain his guests. To control the lights, he employs an array of n light switches, each switch controlling a single light. The i-th light switch has a unique brightness value b_i (1 ≤ b_i ≤ 100). Phoenix wants the brightness of the light show to gradually transition from dark to bright when he turns on the lights one by one. Therefore, he needs to turn on the switches in such a way that, at any step, the accumulated brightness does not exceed x. Given multiple test cases, help Phoenix find an order of switches such that the accumulated brightness at any step never exceeds x, or determine that it is not possible to achieve this. Input The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains two integers n and x (1 ≤ n ≤ 100; 1 ≤ x ≤ 10^4) — the number of light switches and the maximum allowable accumulated brightness, respectively. The second line of each test case contains n space-separated integers representing the brightness values of the light switches. It is guaranteed that all brightness values are distinct. Output For each test case, if Phoenix can turn on all switches one by one without exceeding the maximum allowable accumulated brightness at any step, print \\"POSSIBLE\\" followed by the rearranged array of brightness values. If it is not possible, print \\"IMPOSSIBLE\\". Example Input 3 4 10 1 2 3 4 3 6 3 2 1 5 7 1 4 2 5 3 Output POSSIBLE 1 2 3 4 POSSIBLE 1 2 3 POSSIBLE 1 2 3 4 5 Note In the first test case, turning the switches on in the order 1, 2, 3, 4 gives the accumulated brightness 1, 3, 6, and 10, which is within the limit of 10 at each step. In the second test case, the order 1, 2, 3 works because the accumulated brightness is 1, 3, and 6, which is within the limit of 6 at each step. In the third test case, one valid order is 1, 2, 3, 4, 5. The accumulated brightness at each step is 1, 3, 6, 10, and 15; however, note that once the brightness exceeds 7, it remains valid as the question is concerned with each incremental step.","solution":"def light_show(t, test_cases): result = [] for test in test_cases: n, x, b = test b_sorted = sorted(b) current_sum = 0 possible = True for brightness in b_sorted: if current_sum + brightness > x: possible = False break current_sum += brightness if possible: result.append(\\"POSSIBLE\\") result.append(\\" \\".join(map(str, b_sorted))) else: result.append(\\"IMPOSSIBLE\\") return \\"n\\".join(result)"},{"question":"You have been hired by a bookstore to help with their new online catalog system. The system needs to keep track of the books available and respond to queries about the inventory. Write a program that maintains a list of books and responds to queries. Each book has a title and a count of how many copies are available in the inventory. The program should support the following operations: - \\"ADD title count\\": Add the given count of copies of the book with the specified title to the inventory. If the book already exists in the inventory, increment the count by the given number. - \\"REMOVE title count\\": Remove the given count of copies of the book with the specified title from the inventory. If the count to be removed is greater than the number of copies available, remove all copies of the book. - \\"QUERY title\\": Output the number of copies available for the book with the specified title. If the book is not found in the inventory, output \\"NOT FOUND\\". - \\"DONE\\": Indicate the end of the input. Input The input is a sequence of operations, one per line. The end of operations is indicated by the \\"DONE\\" operation. Output For each \\"QUERY\\" operation, output the number of available copies of the book with the specified title, or \\"NOT FOUND\\" if the book does not exist in the inventory. Example Input ADD HarryPotter 10 ADD LordOfTheRings 5 QUERY HarryPotter REMOVE HarryPotter 3 QUERY HarryPotter REMOVE LordOfTheRings 6 QUERY LordOfTheRings DONE Output 10 7 NOT FOUND","solution":"def manage_inventory(operations): inventory = {} results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": title = parts[1] count = int(parts[2]) if title in inventory: inventory[title] += count else: inventory[title] = count elif command == \\"REMOVE\\": title = parts[1] count = int(parts[2]) if title in inventory: inventory[title] -= count if inventory[title] <= 0: del inventory[title] elif command == \\"QUERY\\": title = parts[1] if title in inventory: results.append(str(inventory[title])) else: results.append(\\"NOT FOUND\\") elif command == \\"DONE\\": break return results"},{"question":"You are given a list of distinct integers and you need to determine if the list can be sorted in strictly increasing order by performing a series of operations. In each operation, you can select exactly two integers and swap their values. The list is considered \\"sortable\\" if you can reach a state where each subsequent element of the list is greater than the one before it using the given operation any number of times. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the list. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^6). Output Output \\"YES\\" if the list can be sorted in strictly increasing order by the given operations, otherwise print \\"NO\\". Examples Input 5 4 1 3 2 5 Output YES Input 4 4 3 2 1 Output NO Note In the first example, one possible series of operations is: - Swap 4 and 1 -> [1, 4, 3, 2, 5] - Swap 4 and 3 -> [1, 3, 4, 2, 5] - Swap 4 and 2 -> [1, 3, 2, 4, 5] - Swap 3 and 2 -> [1, 2, 3, 4, 5] In the second example, it is impossible to have all elements sorted in strictly increasing order because it is already in strictly decreasing order and insufficient operations are allowed to achieve the desired ordering.","solution":"def can_be_sorted(arr): Determines if the list can be sorted in strictly increasing order by performing a series of swaps. Args: arr: list of distinct integers Returns: str: \\"YES\\" if the list can be sorted, otherwise \\"NO\\". # A list of distinct integers can always be sorted by `swap` operations # Since with enough swaps any permutation can reach a sorted state return \\"YES\\" def solve(n, arr): Solves the problem given the input length n and list of integers arr. Returns: str: \\"YES\\" if the list can be sorted, otherwise \\"NO\\". return can_be_sorted(arr)"},{"question":"A group of friends is organizing a fun trivia night, and they want to make sure everything runs smoothly by assigning each task to one member. They came up with a list of tasks and a list of members available. Each member has a different set of skills and can only perform certain tasks. They want to cover as many tasks as possible but ensure that each member does not get more than one task. However, if it\'s not possible to assign all tasks, they want to know the maximum number of tasks that can be assigned to the available members. Write a function that determines the maximum number of tasks that can be assigned given a list of tasks and members with their respective capabilities. Function Signature: ```python def max_tasks(tasks: list[str], members: dict[str, list[str]]) -> int: pass ``` # Input - tasks: A list of strings where each string represents a task. - members: A dictionary where keys are strings representing member names, and values are lists of strings representing tasks that the member can perform. # Output - Return an integer representing the maximum number of tasks that can be assigned. # Constraints - Number of tasks: 1 ≤ len(tasks) ≤ 100 - Number of members: 1 ≤ len(members) ≤ 50 - Each member can perform 1 to 10 tasks. # Example ```python tasks = [\\"setup\\", \\"host\\", \\"scorekeeping\\", \\"refreshments\\"] members = { \\"Alice\\": [\\"setup\\", \\"host\\"], \\"Bob\\": [\\"scorekeeping\\", \\"refreshments\\"], \\"Charlie\\": [\\"refreshments\\"], } print(max_tasks(tasks, members)) # Output: 3 ``` In this example, even though there are 4 tasks, at most 3 tasks can be assigned because \\"refreshments\\" can be performed by both \\"Bob\\" and \\"Charlie\\", but if assigned to one, the other task (\\"scorekeeping\\" or \\"setup\\"/\\"host\\") must miss an available person to perform them. Therefore, the best scenario assigns 3 out of the 4 tasks.","solution":"def max_tasks(tasks: list[str], members: dict[str, list[str]]) -> int: # We will use maximum bipartite matching algorithm for this problem. n_tasks = len(tasks) n_members = len(members) task_to_index = {task: i for i, task in enumerate(tasks)} # Create an adjacency matrix to represent the bipartite graph adj = [[0] * n_members for _ in range(n_tasks)] for member_idx, (member, member_tasks) in enumerate(members.items()): for task in member_tasks: if task in task_to_index: adj[task_to_index[task]][member_idx] = 1 def bpm(u, seen, match_r): for v in range(n_members): if adj[u][v] and not seen[v]: seen[v] = True if match_r[v] == -1 or bpm(match_r[v], seen, match_r): match_r[v] = u return True return False match_r = [-1] * n_members result = 0 for i in range(n_tasks): seen = [False] * n_members if bpm(i, seen, match_r): result += 1 return result"},{"question":"Write a function that takes a string of words separated by spaces and returns a new string with each word reversed, but the order of the words remains the same. Your function should handle multiple spaces between words and should not alter the order of spaces in the input string. # Input - A single string `s` of length `1 <= len(s) <= 1000` containing words separated by spaces, which may include multiple spaces between words. # Output - A new string where each word in the input string is reversed, but the order of words and spaces is preserved. # Example Input ```plaintext \\"the sky is blue\\" ``` Output ```plaintext \\"eht yks si eulb\\" ``` # Note - The input string may start or end with spaces. - Consider preserving any leading, trailing, or multiple spaces between words in the same order as given in the input string.","solution":"def reverse_words_preserve_spaces(s): Returns a new string with each word reversed, preserving the order of words and spaces. words = s.split(\' \') reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"You are given a string representing a sentence or a scrambled paragraph made up of various words. Your task is to find out if the string can be segmented into a space-separated sequence of one or more dictionary words. To assist with this, you are given a list of valid words (a dictionary) to use for segmenting the string. Write a function `can_segment_string` that takes two arguments: 1. `s` - a string consisting of lowercase alphabetical characters (1 ≤ |s| ≤ 1000). 2. `dictionary` - a list of strings representing the dictionary (1 ≤ |dictionary| ≤ 100). The function should return a boolean value: - `True` if the string can be segmented into a sequence of dictionary words. - `False` otherwise. # Examples: **Example 1:** ```python s = \'applepenapple\' dictionary = [\'apple\', \'pen\'] print(can_segment_string(s, dictionary)) # Output: True ``` **Example 2:** ```python s = \'catsandog\' dictionary = [\'cats\', \'dog\', \'sand\', \'and\', \'cat\'] print(can_segment_string(s, dictionary)) # Output: False ``` # Note The solution should be efficient enough to handle strings of the maximum given length (|s| = 1000) with the given constraints.","solution":"def can_segment_string(s, dictionary): Determines if the string can be segmented into a sequence of dictionary words. n = len(s) word_set = set(dictionary) # dp[i] will be True if s[0:i] can be segmented into words in the dictionary dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[n]"},{"question":"You are given an array of integers. You can perform the following operation any number of times: choose any two elements of the array and replace them with their sum. After each operation, the length of the array decreases by one since the two elements are replaced with one new element. The cost of each operation is the sum of the two chosen elements. Your task is to determine the minimum cost required to reduce the array to a single element. More formally, given an array of integers a1, a2, ..., an, you must perform the above operation until only one element remains. You need to minimize the total cost of all operations performed. Input The first line contains an integer n (2 ≤ n ≤ 105) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106) — the elements of the array. Output Print a single integer — the minimum cost required to reduce the array to a single element. Examples Input 4 1 2 3 4 Output 19 Input 3 10 20 30 Output 90 Input 2 100 200 Output 300","solution":"import heapq def min_cost_to_reduce_array(arr): Given an array of integers, returns the minimum cost to reduce the array to a single element by repeatedly choosing any two elements and replacing them with their sum until one element remains. if len(arr) < 2: return 0 heapq.heapify(arr) total_cost = 0 while len(arr) > 1: first_smallest = heapq.heappop(arr) second_smallest = heapq.heappop(arr) cost = first_smallest + second_smallest total_cost += cost heapq.heappush(arr, cost) return total_cost"},{"question":"Given a string of lowercase alphabets, you are required to find the length of the longest substring that contains at most two distinct characters. For example, consider the string \\"eceba\\". The longest substring with at most two distinct characters is \\"ece\\", which has a length of 3. # Detailed Requirements - Your solution should handle both lowercase and uppercase letters. However, the input string will consist of lowercase letters only. - If the string is empty, the result should be 0. - The solution should work efficiently with strings that can be up to 100,000 characters in length. # Input - A single line containing the string s, where `0 <= len(s) <= 100,000`. # Output - A single integer that represents the length of the longest substring with at most two distinct characters. # Examples Example 1 Input: ``` eceba ``` Output: ``` 3 ``` Explanation: The longest substring with at most two distinct characters is \\"ece\\". Example 2 Input: ``` ccaabbb ``` Output: ``` 5 ``` Explanation: The longest substring with at most two distinct characters is \\"aabbb\\". Example 3 Input: ``` a ``` Output: ``` 1 ``` Explanation: The longest substring with at most two distinct characters is \\"a\\". Notes - Consider utilizing sliding window and hashmap techniques to solve this problem efficiently.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters in s. if not s: return 0 left = 0 right = 0 max_length = 0 char_map = {} while right < len(s): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"Dr. Allen is working with a set of 3D points in space, and he needs a program to find the smallest bounding box (cuboid) that can enclose all the given points. The bounding box\'s sides should be aligned with the coordinate axes. You are to write a program that reads sets of 3D points, computes the smallest bounding box for each set, and then provides the dimensions of these bounding boxes. The bounding box is defined by its minimum and maximum coordinates in the x, y, and z directions. The dimensions are the differences between these minimum and maximum values. # Input The input consists of multiple datasets, followed by a line containing a zero. Each dataset starts with an integer `n` (1 ≤ n ≤ 100), denoting the number of points in that dataset. This is followed by `n` lines, each containing three integers x, y, and z (-10000 ≤ x, y, z ≤ 10000) representing the coordinates of a point in 3D space. # Output For each dataset, output the dimensions of the bounding box as three integers representing the lengths in the x, y, and z directions, respectively. The output for each dataset should be followed by a line containing five minus symbols \'-----\' for readability. # Example Input ``` 3 1 1 1 2 2 2 3 3 3 4 -1 -1 -1 -2 -2 -2 0 0 0 1 1 1 0 ``` Output ``` 2 2 2 ----- 3 3 3 ----- ``` # Explanation - In the first dataset, the points (1,1,1), (2,2,2), and (3,3,3) form a bounding box from (1, 1, 1) to (3, 3, 3). The dimensions are calculated as (3-1, 3-1, 3-1) which yields 2 2 2. - In the second dataset, the bounding box spans from (-2, -2, -2) to (1, 1, 1). The dimensions are calculated as (1 - (-2), 1 - (-2), 1 - (-2)) which yields 3 3 3.","solution":"def compute_bounding_box(points): Compute the dimensions of the smallest bounding box that can enclose all the given 3D points. min_x = min_y = min_z = float(\'inf\') max_x = max_y = max_z = float(\'-inf\') for x, y, z in points: if x < min_x: min_x = x if x > max_x: max_x = x if y < min_y: min_y = y if y > max_y: max_y = y if z < min_z: min_z = z if z > max_z: max_z = z length_x = max_x - min_x length_y = max_y - min_y length_z = max_z - min_z return length_x, length_y, length_z def process_input(input_data): data = input_data.splitlines() index = 0 results = [] while index < len(data): n = int(data[index]) if n == 0: break index += 1 points = [] for _ in range(n): x, y, z = map(int, data[index].split()) points.append((x, y, z)) index += 1 dimensions = compute_bounding_box(points) results.append(dimensions) return results"},{"question":"A famous library has a subscription-based system, where each subscriber can borrow a maximum of N books per month. The library uses technology to keep track of borrowed books, where each book has a unique code. A subscriber has made a list of books they wish to borrow, but the list contains some duplicates. Your task is to help the library by removing duplicates from the list while ensuring the subscriber borrows the maximum number of unique books possible within their borrowing limit. Given an integer N and a list of book codes, write a program that produces a list of up to N unique book codes in the order they first appear in the list. If the number of unique books is less than N, return all the unique book codes. Input - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N (1 ≤ N ≤ 1000), the maximum number of books the subscriber can borrow. - The second line of each test case contains a list of book codes, separated by spaces. Each book code is a non-empty string of no more than 20 characters. The list has between 1 and 10,000 books. Output For each test case, output a line containing the list of up to N unique book codes in the order they first appear in the input list. Example Input 3 3 A123 B456 A123 C789 B456 2 X001 X002 X003 X004 X002 X003 5 M111 M112 M113 M114 M115 M116 Output A123 B456 C789 X001 X002 M111 M112 M113 M114 M115","solution":"def get_unique_book_codes(N, book_codes): Given a list of book codes, return up to N unique book codes in the order they first appear. seen = set() unique_books = [] for code in book_codes: if code not in seen: seen.add(code) unique_books.append(code) if len(unique_books) == N: break return unique_books def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] book_codes = test_cases[i][1] result = get_unique_book_codes(N, book_codes) results.append(\' \'.join(result)) return results"},{"question":"Given an integer list `A` of length N, modify `A` by replacing all negative values with `0`. After modifying the list, generate a new list `B` such that each element at index i in `B` is the sum of the elements from index 0 to i (inclusive) in the modified list `A`. Print the list `B`. Constraints * 1 leq N leq 100 * -1000 leq A[i] leq 1000 Input Input is given from Standard Input in the following format: N A1 A2 A3 ... AN Output Print the list `B`. Examples Input 5 -1 2 -3 4 5 Output 0 2 2 6 11 Input 3 0 0 0 Output 0 0 0 Input 4 1 2 3 4 Output 1 3 6 10","solution":"def modify_and_generate_prefix_sum(N, A): Modify the list A by replacing all negative values with 0 and then generate a new list B such that each element at index i in B is the sum of the elements from index 0 to i (inclusive) in the modified list A. # Replace negative values with 0 A = [max(0, x) for x in A] # Generate the prefix sum list B B = [] current_sum = 0 for num in A: current_sum += num B.append(current_sum) return B # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) A = list(map(int, data[1:])) result = modify_and_generate_prefix_sum(N, A) print(\\" \\".join(map(str, result)))"},{"question":"You are given a set of records from a library system. Each record indicates the borrowing date and the return date of a book. Your task is to calculate the total number of days each book was borrowed. The dates are provided in the format \\"YYYY-MM-DD\\". Input The input consists of multiple lines, where each line represents a record in the format: ``` book_id borrowing_date return_date ``` - `book_id` is a unique identifier for the book. - `borrowing_date` and `return_date` are in the format \\"YYYY-MM-DD\\". The input is followed by an empty line signaling the end. Output For each book, output the book_id followed by the total number of days it was borrowed. The output should be in the order of book_ids in ascending order. Note: 1. The number of lines of input can vary from 1 to 100. 2. The dates are guaranteed to be valid and `return_date` will always be the same or later than `borrowing_date`. Examples Input ``` 1 2023-01-01 2023-01-10 2 2023-01-05 2023-01-15 1 2023-01-20 2023-01-25 3 2023-02-01 2023-02-10 Output 1 14 2 10 3 9 ```","solution":"from datetime import datetime def calculate_borrowed_days(records): Calculates the total number of borrowing days for each book. :param records: List of records where each record is a string in the format: \\"book_id borrowing_date return_date\\" :return: A dictionary where the keys are book_ids and values are the total borrowed days. borrow_days = {} for record in records: parts = record.split() book_id = int(parts[0]) borrowing_date = datetime.strptime(parts[1], \\"%Y-%m-%d\\") return_date = datetime.strptime(parts[2], \\"%Y-%m-%d\\") days_borrowed = (return_date - borrowing_date).days if book_id in borrow_days: borrow_days[book_id] += days_borrowed else: borrow_days[book_id] = days_borrowed return borrow_days"},{"question":"There are n dwarfs in the forest, each having a certain height. They have gathered around to form pairs for a dance. A pair can only dance if the absolute difference between their heights does not exceed a given value d. Your task is to count the number of pairs of dwarfs that can dance together. Each dwarf can only participate in one pair. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and d (1 ≤ n ≤ 2 ⋅ 10^5 and 0 ≤ d ≤ 10^9) — the number of dwarfs and the maximum allowed difference in height for a pair to dance. The second line of each test case contains n integers a_i (1 ≤ a_i ≤ 10^9) — the heights of the dwarfs. It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5. Output For each test case output one integer on a separate line — the maximum number of pairs of dwarfs that can dance together. Example Input 3 5 2 1 3 3 5 5 4 1 3 4 5 6 3 0 2 2 2 Output 2 2 1 Explanation In the first test case, the pairs (1, 3), (3, 5), and another (3, 5) can dance, but one dwarf (the first 3) will be left alone. Thus, we can form 2 pairs. In the second test case, the pairs (3, 4) and (5, 6) have differences of exactly 1 which is within the limit. So, the maximum number of pairs is 2. In the third test case, all dwarfs have the same height, and since the allowed difference is 0, only one pair can be formed. Thus, the maximum number of pairs is 1.","solution":"def count_pairs(t, test_cases): results = [] for i in range(t): n, d = test_cases[i][0] heights = sorted(test_cases[i][1]) count = 0 j = 0 while j < n - 1: if heights[j + 1] - heights[j] <= d: count += 1 j += 2 # Skip the next one as we have used dwarf j and j+1 as a pair else: j += 1 results.append(count) return results # Example usage: # t = 3 # test_cases = [ # ((5, 2), [1, 3, 3, 5, 5]), # ((4, 1), [3, 4, 5, 6]), # ((3, 0), [2, 2, 2]) # ] # print(count_pairs(t, test_cases)) # Output should be [2, 2, 1]"},{"question":"A company organizes a marathon each year and stores the time it took for each participant to complete the race in an array, along with the year in which the marathon took place. You are required to find the participant who took the least time to complete the marathon for each given year. **Input:** The first line of input contains an integer `N`, the number of participants. The next `N` lines each contain two space-separated integers: `time` and `year`, representing the time (in minutes) it took for a participant to complete the marathon and the year in which the marathon took place respectively. **Output:** For each year, in ascending order, print the year followed by the minimum time taken to complete the marathon in that year. **Constraints:** - 1 ≤ N ≤ 10^5 - 1 ≤ time ≤ 10^5 - 2000 ≤ year ≤ 2100 **SAMPLE INPUT:** 6 240 2020 180 2020 200 2021 210 2021 130 2022 190 2022 **SAMPLE OUTPUT:** 2020 180 2021 200 2022 130","solution":"def find_min_time_per_year(participants): Finds the participant who took the least time to complete the marathon for each given year. Input: - participants: list of tuples containing (time, year) for each participant Output: - A list of tuples, where each tuple contains (year, minimum time) in ascending order of year. from collections import defaultdict # Dictionary to store the minimum time for each year min_times = defaultdict(lambda: float(\'inf\')) for time, year in participants: if time < min_times[year]: min_times[year] = time # Sort years and prepare the result result = sorted(min_times.items()) return result"},{"question":"You are given two sorted arrays, nums1 and nums2, both of which contain integers in non-decreasing order. Your task is to find the median of the combined sorted array that would result from merging nums1 and nums2. The combined array might not necessarily be stored or merged explicitly, so think about efficient ways to calculate the median of this conceptual merged array. Input The input consists of: - The first line contains an integer n, the number of elements in nums1 (0 ≤ n ≤ 10^6). - The second line contains n integers, the elements of nums1. - The third line contains an integer m, the number of elements in nums2 (0 ≤ m ≤ 10^6). - The fourth line contains m integers, the elements of nums2. The total length of the resulting array formed from nums1 and nums2 will be at least 1 and at most 10^6. Output Print the median of the merged array. Examples Input 4 1 3 8 9 3 1 6 7 Output 6 Input 3 1 2 5 2 3 4 Output 3","solution":"def find_median_sorted_arrays(nums1, nums2): def get_kth_element(arr1, arr2, k): index1, index2 = 0, 0 while True: if index1 == len(arr1): return arr2[index2 + k - 1] if index2 == len(arr2): return arr1[index1 + k - 1] if k == 1: return min(arr1[index1], arr2[index2]) new_index1 = min(index1 + k // 2 - 1, len(arr1) - 1) new_index2 = min(index2 + k // 2 - 1, len(arr2) - 1) pivot1, pivot2 = arr1[new_index1], arr2[new_index2] if pivot1 <= pivot2: k -= (new_index1 - index1 + 1) index1 = new_index1 + 1 else: k -= (new_index2 - index2 + 1) index2 = new_index2 + 1 total_len = len(nums1) + len(nums2) if total_len % 2 == 1: return get_kth_element(nums1, nums2, total_len // 2 + 1) else: return (get_kth_element(nums1, nums2, total_len // 2) + get_kth_element(nums1, nums2, total_len // 2 + 1)) / 2 # Example function call (should print 6) # print(find_median_sorted_arrays([1, 3, 8, 9], [1, 6, 7]))"},{"question":"A list of students involved in a school project is stored as a linked list. Each node in the list contains the student name and the name of their project. You are required to separate all nodes into different linked lists based on the project. Implement a function `separate_by_project(head)` that takes the head of the linked list and returns a dictionary where the keys are project names and the values are the heads of the linked lists of students working on that project. Example of nodes in the linked list: ```python class Node: def __init__(self, student_name, project_name): self.student_name = student_name self.project_name = project_name self.next = None ``` Example If the input linked list is: ``` (Alice, Project1) -> (Bob, Project2) -> (Charlie, Project1) -> (David, Project3) -> (Eve, Project2) ``` Your function should return: ```python { \'Project1\': (Alice -> Charlie), \'Project2\': (Bob -> Eve), \'Project3\': (David) } ``` Function Signature: ```python def separate_by_project(head: Node) -> Dict[str, Node]: pass ``` Constraints: - The number of nodes in the linked list will not exceed 1000. - The student names and project names are non-empty strings. - Project names are unique among the projects in the input list. Example Input: ```python head = Node(\\"Alice\\", \\"Project1\\") head.next = Node(\\"Bob\\", \\"Project2\\") head.next.next = Node(\\"Charlie\\", \\"Project1\\") head.next.next.next = Node(\\"David\\", \\"Project3\\") head.next.next.next.next = Node(\\"Eve\\", \\"Project2\\") ``` Example Output: ```python { \'Project1\': Node(\\"Alice\\", \\"Project1\\"), # Linked list: Alice -> Charlie \'Project2\': Node(\\"Bob\\", \\"Project2\\"), # Linked list: Bob -> Eve \'Project3\': Node(\\"David\\", \\"Project3\\") # Linked list: David } ```","solution":"from typing import Dict class Node: def __init__(self, student_name, project_name): self.student_name = student_name self.project_name = project_name self.next = None def separate_by_project(head: Node) -> Dict[str, Node]: project_dict = {} current = head while current: if current.project_name in project_dict: # Append current node to the end of the matching project list proj_head = project_dict[current.project_name] while proj_head.next: proj_head = proj_head.next proj_head.next = current else: # Create a new entry for this project project_dict[current.project_name] = current # Move to the next node in the original list next_node = current.next # Disconnect the current node to form independent chains current.next = None current = next_node return project_dict"},{"question":"An e-commerce company is automating its warehouse operations. One of the automated tasks involves organizing items in a storage rack into specific sections. Each item has a unique identifier and a corresponding section it should be placed into. Your task is to write a program that determines the minimum number of moves needed to organize the items correctly. Items can be moved from one section to another according to the following rules: - Several sections are available, labeled from 1 to S. - There are N items to be placed, with each item having a current and target section. Constraints: - 1 leq N leq 1000 (number of items) - 1 leq S leq 100 (number of sections) - 1 leq current_i, target_i leq S (current and target sections of an item) Input: The input consists of three lines: 1. An integer N, representing the number of items. 2. A list of N integers, where the i-th integer denotes the current section of the i-th item. 3. A list of N integers, where the i-th integer denotes the target section of the i-th item. Output: Output a single integer representing the minimum number of moves needed to organize the items. Examples: Input: 4 1 2 3 4 4 3 2 1 Output: 4 Input: 5 1 1 1 2 2 2 2 2 1 1 Output: 5 Input: 3 1 2 3 1 2 3 Output: 0","solution":"def minimum_moves_to_organize(N, current_sections, target_sections): Determines the minimum number of moves needed to organize items in a warehouse from their current sections to the target sections. Args: N (int): Number of items. current_sections (list): List of integers representing the current section of each item. target_sections (list): List of integers representing the target section of each item. Returns: int: Minimum number of moves needed to organize the items. move_count = 0 for i in range(N): if current_sections[i] != target_sections[i]: move_count += 1 return move_count"},{"question":"You have been hired to optimize the shipping process for an e-commerce company. The company packs items in rectangular boxes of different sizes, and they want to minimize the number of boxes used to ship a certain number of items. Each box has a maximum capacity in terms of number of items it can hold. The boxes come in different sizes, but there is no limit to the number of boxes of each size you can use. Given the number of items to be shipped and the capacities of the available box sizes, determine the minimum number of boxes needed to pack all the items. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of different box sizes available. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^4) — the capacities of the boxes. The third line contains a single integer m (1 ≤ m ≤ 10^6) — the number of items to be shipped. Output Print the minimum number of boxes needed to pack all the items. Examples Input 3 3 5 7 18 Output 3 Input 2 2 3 10 Output 4 Note In the first example, you can use two boxes of capacity 7 and one box of capacity 4, totaling to 3 boxes. In the second example, you can use three boxes of capacity 3 and one box of capacity 2, totaling to 4 boxes.","solution":"def min_boxes_to_pack_items(n, capacities, m): Returns the minimum number of boxes needed to pack all the items. Parameters: n (int): The number of different box sizes available. capacities (List[int]): The capacities of the boxes. m (int): The number of items to be shipped. Returns: int: The minimum number of boxes needed to pack all the items. capacities.sort(reverse=True) num_boxes = 0 for capacity in capacities: if m <= 0: break boxes_needed = m // capacity num_boxes += boxes_needed m -= boxes_needed * capacity # If there are remaining items that couldn\'t fully fit, we need one more box. if m > 0: num_boxes += 1 break return num_boxes"},{"question":"You are given a string s, which consists solely of uppercase English letters. Your task is to find the minimum number of changes needed to convert the string into a \\"palindrome\\". A palindrome is a string that reads the same forwards and backwards. Input The first line contains a string s consisting only of uppercase English letters with length not less than 1 and not greater than 100. Output Output a single integer, the minimum number of changes needed to make the string a palindrome. Examples Input ABCA Output 1 Input ABCDE Output 2 Input AABB Output 2 Input RACECAR Output 0 Input RADAR Output 0 Note For the first case, we can change the third character \'C\' to \'A\' to make it a palindrome (\\"ABCA\\" -> \\"AAAA\\"), which requires 1 change. For the second case, we need to change both \'B\' to \'D\' and \'C\' to \'C\' or \'E\' to \'B\', which requires 2 changes (\\"ABCDE\\" -> \\"ABCDE\\" or \\"ABCDE\\" -> \\"ADCBA\\"). For the third case, we need to change both \'A\' to \'B\' or \'B\' to \'A\', which requires 2 changes (\\"AABB\\" -> \\"ABBA\\" or \\"AABB\\" -> \\"BBAA\\"). For the fourth case, \\"RACECAR\\" is already a palindrome, so no changes are needed. For the fifth case, \\"RADAR\\" is also already a palindrome, so no changes are needed.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of changes needed to convert the given string into a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"Sam is an IT technician in a large company with a complex network of computers connected by cables. The network can be represented as an undirected graph with computers as nodes and cables as edges. Unfortunately, the network has been experiencing random disconnections lately, making it hard for Sam to diagnose the issue. He suspects that some critical cables, if removed, could split the network into separate disconnected components, severely impacting operations. A critical cable in this context is defined as an edge whose removal would increase the number of connected components in the graph. Sam needs to identify all such critical cables in the network. Your task is to help Sam by writing a program that determines all the critical cables in the network. # Input The input consists of multiple lines: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), representing the number of computers and the number of cables, respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a cable that connects computers u and v. The graph is guaranteed to be connected initially. # Output The output should contain all critical cables, each represented as a pair of integers u and v (u < v). Each pair should be printed on a new line. If there are no critical cables, print \\"No critical cables\\". # Examples Input ``` 5 5 1 2 1 3 3 4 3 5 4 5 ``` Output ``` 1 2 1 3 ``` Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` No critical cables ``` # Note In the first example, removing the cable between computers 1 and 2 or the cable between computers 1 and 3 would split the network into two disconnected components, so these are critical cables. In the second example, the network remains connected regardless of which cable is removed, so there are no critical cables.","solution":"def find_critical_cables(n, m, edges): from collections import defaultdict import itertools def dfs(v, parent, disc, low, time, visited, graph, bridges): visited[v] = True disc[v] = low[v] = time[0] time[0] += 1 for neighbor in graph[v]: if not visited[neighbor]: parent[neighbor] = v dfs(neighbor, parent, disc, low, time, visited, graph, bridges) low[v] = min(low[v], low[neighbor]) if low[neighbor] > disc[v]: bridges.append((min(v, neighbor), max(v, neighbor))) elif neighbor != parent[v]: low[v] = min(low[v], disc[neighbor]) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) disc = [-1] * (n + 1) low = [-1] * (n + 1) parent = [-1] * (n + 1) visited = [False] * (n + 1) bridges = [] for i in range(1, n + 1): if not visited[i]: dfs(i, parent, disc, low, [0], visited, graph, bridges) if not bridges: print(\\"No critical cables\\") else: for u, v in sorted(bridges): print(f\\"{u} {v}\\")"},{"question":"The kingdom of Lundar has n cities connected by m bidirectional roads. The king wants to build a new road network that covers all the cities with the minimum possible cost. The current roads are represented as a graph where each road connects two different cities and has an associated cost. The king, being wise, wants to use the minimum spanning tree (MST) concept to design this optimal network. Given the number of cities, the number of existing roads, and the details of each road (two cities it connects and the cost), help the king determine the minimum cost to connect all cities. Input The first line of the input contains two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 10000), representing the number of cities and the number of existing roads, respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000, u ≠ v), where u and v are the cities the road connects, and w is the cost of that road. Output Output a single integer, the minimum cost to connect all n cities. If it\'s impossible to connect all cities, output \\"IMPOSSIBLE\\". Example Input: 4 5 1 2 3 2 3 4 3 4 5 1 4 9 1 3 7 Output: 12 Explanation In the example, the minimum spanning tree to connect all 4 cities with the minimum cost would be to use the roads with costs 3, 4, and 5, giving a total cost of 12.","solution":"def minimum_cost_to_connect_cities(n, m, roads): def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Sort all the edges in non-decreasing order of their weight roads.sort(key=lambda x: x[2]) parent = [] rank = [] # Create V disjoint sets (one for each vertex) for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 edges_used = 0 for u, v, w in roads: root_u = find(parent, u-1) root_v = find(parent, v-1) # If including this edge doesn\'t cause a cycle if root_u != root_v: mst_cost += w union(parent, rank, root_u, root_v) edges_used += 1 # If we have included n-1 edges then we have formed MST if edges_used == n - 1: return mst_cost # If n-1 edges are not used, it means some vertices are disconnected return \\"IMPOSSIBLE\\""},{"question":"Dr. Lyons: Mark, do you know about prime numbers? Mark: Yes, a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Dr. Lyons: Exactly. Do you think you could write a program that finds all prime numbers between two given integers? Mark: Certainly. Please provide me with the detailed instructions. Dr. Lyons: Sure, you need to create a program that accepts two integers, (a) and (b) (with (1 leq a leq b leq 10^6)), and prints all the prime numbers between (a) and (b) inclusive, one per line. Mark: That sounds clear. Are there any other specific requirements? Dr. Lyons: Remember to implement the program efficiently. Given the possible range of the input, a naive approach may take too long to execute. You must use a more efficient algorithm, like the Sieve of Eratosthenes, to find the prime numbers. Dr. Lyons: Also, note that if there are no prime numbers in the given range, your program should output \\"None\\". Mark: Understood. I will get started on this immediately. Dr. Lyons: Great. Here\'s an example format for input and output: Input Two integers in one line separated by a space. Output Each prime number between the two integers inclusive, each on a new line. If there are no prime numbers in the range, print \\"None\\". Example Input 10 30 Output 11 13 17 19 23 29 Input 14 16 Output None","solution":"def sieve_of_eratosthenes(max_num): # Create a boolean array \\"prime[0..n]\\" and initialize # all entries it as true. A value in prime[i] will # finally be false if i is Not a prime, else true. prime = [True for _ in range(max_num + 1)] p = 2 while p * p <= max_num: # If prime[p] is not changed, then it is a prime if prime[p]: # Updating all multiples of p to not prime for i in range(p * p, max_num + 1, p): prime[i] = False p += 1 return prime def find_primes_between(a, b): sieve = sieve_of_eratosthenes(b) primes = [num for num in range(a, b + 1) if num > 1 and sieve[num]] if not primes: return [\\"None\\"] return primes"},{"question":"The XYZ Corporation follows a unique employee bonus distribution pattern. The pattern of bonus amounts follows a strictly increasing series derived as follows: the bonus in the first month is 100, the second month is 120, and then it follows a certain pattern such that each subsequent month’s bonus amount is the sum of all previous months\' bonuses plus 20. Here are the first few values in the series: Month 1: 100 Month 2: 120 Month 3: (100 + 120) + 20 = 240 Month 4: (100 + 120 + 240) + 20 = 480 ... Given the position of the month (N), you are required to compute the bonus amount received by an employee in that particular month. Write a program to determine the bonus amount for the given month. Input: The first line of input contains T, the number of test cases. Each of the following T lines contains an integer N, denoting the month number. Output: For each test case, output the bonus amount for the given month. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 20 Example: Input: 2 3 4 Output: 240 480","solution":"def calculate_bonus_amount(N): Calculate the bonus amount for the Nth month. if N == 1: return 100 bonuses = [100, 120] for i in range(2, N): bonuses.append(sum(bonuses) + 20) return bonuses[N-1] def process_test_cases(T, cases): Process multiple test cases and return the result for each. results = [] for N in cases: results.append(calculate_bonus_amount(N)) return results"},{"question":"In a distant binary land, there are two types of creatures: Type-A and Type-B. Each creature has a unique binary ID consisting of only the digits 0 and 1. Currently, there is an issue in the binary land. The binary IDs of the creatures are randomly shuffled. Your task is to identify and sort them based on a specific criteria. # Problem Statement Given an array of binary IDs as strings, sort them based on the following criteria: 1. The number of 1\'s in the binary representation (most significant bit count). 2. If two creatures have the same number of 1\'s, sort them by their length (shorter IDs come first). 3. If two creatures have the same number of 1\'s and the same length, sort them lexicographically. # Input: - The first line of input contains a single integer `n` (1 ≤ n ≤ 10^5), the number of binary IDs. - The next `n` lines each contain a binary ID as a string (each string has a length between 1 and 100). # Output: - Output the sorted list of binary IDs, one per line. # Example: **Input:** ``` 5 110 101 111 1001 1111 ``` **Output:** ``` 101 110 1001 111 1111 ``` # Explanation: - 101, 110, and 1001 each have 2 ones. Sorting them by length, 101 comes first followed by 110 and then 1001. - 111 has 3 ones. - 1111 has 4 ones. # Note: Use efficient sorting techniques to ensure the solution runs within a reasonable time frame given the constraints.","solution":"def sort_binary_ids(binary_ids): Sorts binary IDs based on the specified criteria: 1. Number of \'1\'s in the binary ID. 2. Length of the binary ID. 3. Lexicographical order if the number of \'1\'s and lengths are the same. # Use a customized sorting with a key function sorted_ids = sorted(binary_ids, key=lambda x: (x.count(\'1\'), len(x), x)) return sorted_ids"},{"question":"In a large city, there are M bus stops and N bus routes. Each bus route connects two specific bus stops, and all routes are bidirectional. Due to maintenance, some bus routes can be temporarily closed. You are given information about which bus stops are initially connected by a route and the number of bus routes that can be closed at each bus stop due to maintenance. Write a program that, given the city’s bus stops, routes, and maintenance information, determines if there is still a way to travel between all pairs of bus stops. If it is possible to travel between all pairs of bus stops after closing routes for maintenance, output \\"Yes\\". Otherwise, output \\"No\\". Constraints * All values in input are integers. * 2 leq M leq 10^5 * 1 leq N leq 2 times 10^5 * Each bus stop is uniquely identifiable by an integer from 1 to M. * Each bus stop can have at most M-1 routes connected to it due to maintenance. Input Input is given from Standard Input in the following format: M N u_1 v_1 u_2 v_2 : u_N v_N k_1 w_1 k_2 w_2 : k_P w_P The first line contains two integers, M and N — the number of bus stops and the number of bus routes, respectively. The next N lines each contain two integers u_i and v_i — the bus stops that are connected by the i-th bus route. The next line contains an integer P indicating the number of bus stops that have maintenance. The next P lines each contain two integers k_i and w_i — the bus stop with index k_i can close w_i routes due to maintenance. Output Print \\"Yes\\" if it is possible to travel between all pairs of bus stops after maintenance. Print \\"No\\" if otherwise. Examples Input 6 7 1 2 2 3 3 4 4 5 5 6 1 6 3 5 3 2 1 4 2 6 1 Output Yes Input 5 5 1 2 2 3 3 4 4 5 1 5 2 3 2 5 2 Output No","solution":"def can_travel_between_all_pairs(M, N, routes, P, maintenance_info): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v in routes: graph[u].append(v) graph[v].append(u) # Apply maintenance restrictions for k, w in maintenance_info: graph[k] = graph[k][:len(graph[k]) - w] # Function to check if all nodes are connected using Breadth-First Search def is_connected(): visited = set() queue = deque([1]) # Start BFS from node 1 visited.add(1) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # If the number of visited nodes is equal to M, then all nodes are connected return len(visited) == M # Check if all nodes are connected if is_connected(): return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an array consisting of n integers and an integer k. Your task is to determine if there is any way to partition the array into two non-empty subsets such that the sum of the elements in each subset is a multiple of k. Input Format: - The first line contains a single integer t - the number of test cases. - Each test case starts with an integer n - the number of elements in the array. - The next line contains n integers separated by spaces - the elements of the array. - The last line of each test case contains an integer k. Output Format: - For each test case, print \\"YES\\" if there exists a way to partition the array into two subsets where the sum of elements in each subset is a multiple of k. Otherwise, print \\"NO\\". Constraints: 1 ≤ t ≤ 10 2 ≤ n ≤ 50 1 ≤ array elements ≤ 1000 1 ≤ k ≤ 1000 SAMPLE INPUT 2 5 1 2 3 4 5 3 4 6 9 7 12 5 SAMPLE OUTPUT YES NO","solution":"def can_partition_into_subsets_divisible_by_k(arr, k): total_sum = sum(arr) if total_sum % k != 0: return False n = len(arr) dp = [False] * k dp[0] = True for num in arr: next_dp = dp[:] for i in range(k): if dp[i]: next_dp[(i + num) % k] = True dp = next_dp return dp[0] def process_test_cases(test_cases): results = [] for case in test_cases: n, arr, k = case if n == 1: results.append(\\"NO\\") else: if can_partition_into_subsets_divisible_by_k(arr, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Input The first line of the input contains an integer n (1 ≤ n ≤ 100), representing the number of elements in a list. The second line contains n integers separated by spaces, each integer x (1 ≤ x ≤ 100) representing an element of the list. Output Output \\"ASCENDING\\" if the list is sorted in strictly ascending order, \\"DESCENDING\\" if the list is sorted in strictly descending order, and \\"NEITHER\\" otherwise. Examples Input 5 1 2 3 4 5 Output ASCENDING Input 4 10 8 6 6 Output NEITHER Input 3 20 15 10 Output DESCENDING","solution":"def check_list_order(n, elements): Determines if the list is sorted in strictly ascending, strictly descending or neither. Args: n (int): Number of elements in the list. elements (list of int): List of integers to check. Returns: str: \\"ASCENDING\\", \\"DESCENDING\\", or \\"NEITHER\\". ascending = all(elements[i] > elements[i-1] for i in range(1, n)) descending = all(elements[i] < elements[i-1] for i in range(1, n)) if ascending: return \\"ASCENDING\\" elif descending: return \\"DESCENDING\\" else: return \\"NEITHER\\""},{"question":"A company has a network of computers. Each computer can directly communicate with a set of other computers, and the communication is bi-directional. The company wants to ensure that information can be spread from one specific computer to all other computers through this network. You need to write a program to determine whether this is possible given the network configuration. Input The input consists of multiple datasets. Each dataset starts with two integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ 4950), where n is the number of computers and m is the number of direct communication connections. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that computer u can directly communicate with computer v. The end of the input is indicated by a single line containing zero. Output For each dataset, output \\"YES\\" if information can be spread from any computer to all other computers. Otherwise, output \\"NO\\". Example Input 3 2 1 2 2 3 4 2 1 2 3 4 5 0 0 Output YES NO NO","solution":"def is_network_connected(n, m, connections): from collections import deque, defaultdict if n == 1: return True graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = set() queue = deque([1]) visited.add(1) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited) == n def check_network_connectivity(datasets): results = [] for dataset in datasets: n, m, connections = dataset if is_network_connected(n, m, connections): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") datasets = [] i = 0 while i < len(lines): if lines[i] == \'0\': break n, m = map(int, lines[i].split()) i += 1 connections = [] for _ in range(m): u, v = map(int, lines[i].split()) connections.append((u, v)) i += 1 datasets.append((n, m, connections)) return datasets def main(input_string): datasets = parse_input(input_string) return check_network_connectivity(datasets)"},{"question":"A company wants to create a new password policy for its employees ensuring a more secure password practice. The password should adhere to the following rules: 1. It should contain at least one uppercase letter. 2. It should contain at least one lowercase letter. 3. It should contain at least one digit. 4. It should contain at least one special character from the set {!, @, #, , %, ^, &, *, (, ), -, +}. For a given input string, determine if the string satisfies the new password policy. If it does, output \\"YES\\". Otherwise, output \\"NO\\". Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a single string s (1 ≤ |s| ≤ 1000) — the string representing the password to be checked. Output For each test case, output \\"YES\\" if the string satisfies the new password policy, otherwise, output \\"NO\\". Examples Input 3 Password123! helloWorld! abcd1234 Output YES NO NO Note In the above example: - \\"Password123!\\" contains an uppercase letter \'P\', lowercase letters \'assword\', a digit \'123\', and a special character \'!\'. Hence, the output is \\"YES\\". - \\"helloWorld!\\" contains an uppercase letter \'W\', lowercase letters \'helloorld\', and a special character \'!\'. It does not contain a digit, so the output is \\"NO\\". - \\"abcd1234\\" contains lowercase letters \'abcd\' and digits \'1234\'. It does not contain any uppercase letter or special character, so the output is \\"NO\\".","solution":"def is_valid_password(password): Checks if the password is valid according to the policy. has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-+\\" for c in password) if has_upper and has_lower and has_digit and has_special: return \\"YES\\" else: return \\"NO\\" def check_passwords(test_cases): For a list of passwords, determine if they adhere to the new password policy. results = [] for password in test_cases: results.append(is_valid_password(password)) return results"},{"question":"Jenny has a peculiar habit of rearranging books on her bookshelf. She has a bookshelf with `n` books, numbered from 1 to `n` from left to right. Today, she wants to rearrange the books in such a way that the sum of the distances between the books\' original positions and their new positions is minimized. The distance between the original position `i` and new position `j` of a book is defined as |i - j|. Help Jenny find the rearrangement that minimizes this sum. Input The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of books. Output Output the minimum possible sum of the distances between the original and the new positions of the books. Examples Input 5 Output 4 Input 10 Output 25","solution":"def min_distance_sum(n): Returns the minimum possible sum of the distances between the original and the new positions of n books. return (n*(n-1)) // 2"},{"question":"You are given a list of integers representing the elevation gain over a series of m points. Write a function `max_elevation_gain` that takes in a list `elevations` and returns the maximum elevation gain over any contiguous subarray of the list. The elevation gain of a subarray is defined as the difference between the maximum and minimum values in that subarray. Your function should find and return the maximum of these elevation gains across all possible subarrays. **Input:** - A list of integers `elevations` of length `m` (1 ≤ m ≤ 10^5), where each integer can be between -10^9 and 10^9 inclusive. **Output:** - An integer representing the maximum elevation gain. **Example:** Input: ``` elevations = [2, 1, -1, 3, 4, -1, 0, 6] ``` Output: ``` 7 ``` Explanation: The maximum elevation gain is obtained from the subarray `[-1, 6]` where the gain is `6 - (-1) = 7`.","solution":"def max_elevation_gain(elevations): Returns the maximum elevation gain over any contiguous subarray of the list. if not elevations: return 0 min_val = elevations[0] max_gain = 0 for elevation in elevations: min_val = min(min_val, elevation) max_gain = max(max_gain, elevation - min_val) return max_gain"},{"question":"You have a 2D grid with R rows and C columns. Each cell in the grid can either be blocked (represented by \'#\') or open (represented by \'.\'). You are given the grid configuration and you need to determine the length of the shortest path from the top-left cell (1,1) to the bottom-right cell (R,C). You can move up, down, left, or right, but cannot move diagonally. If no such path exists, return `-1`. Constraints: * 1 leq R, C leq 1000 Input The input is given from Standard Input in the following format: R C G_1 G_2 ... G_R Where each G_i is a string representing the i-th row of the grid. Output Print the length of the shortest path from the top-left to the bottom-right cell, or `-1` if no such path exists. Examples Input 4 4 .... ..#. ..#. #... Output 7 Input 3 3 .#. # .#. Output -1 Input 5 5 ..... .#.#. ..... .#.#. ..... Output 9","solution":"from collections import deque def shortest_path(R, C, grid): if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * C for _ in range(R)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited[0][0] = True while queue: r, c, dist = queue.popleft() if r == R - 1 and c == C - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return -1"},{"question":"Write a program to determine the number of trailing zeros in the factorial of a given number \\"M\\". Input The first line contains an integer T, the number of test cases. For each test case, there is a single integer M. Output Output the number of trailing zeros in the factorial of M, for each test case, on a new line. Constraints 1 ≤ T ≤ 15 1 ≤ M ≤ 1000000000 Example Input: 2 5 20 Output: 1 4 Explanation Example case 1: The factorial of 5 is 120, which has one trailing zero. Example case 2: The factorial of 20 is 2432902008176640000, which has four trailing zeros.","solution":"def trailing_zeros_in_factorial(M): Returns the number of trailing zeros in the factorial of M. count = 0 while M >= 5: M //= 5 count += M return count def factorial_trailing_zeros(T, test_cases): Processes multiple test cases and returns the number of trailing zeros in the factorial of each test case number. Parameters: T (int): number of test cases test_cases (list): list of integers, each representing a test case Returns: list: a list containing the number of trailing zeros for each test case results = [] for M in test_cases: results.append(trailing_zeros_in_factorial(M)) return results"},{"question":"The city of Byteville is structured in the form of a grid of size n x n. Each cell in the grid either contains a building or it is empty. Residents of Byteville want to organize a festival, and they plan to do so by setting up tents in the empty cells. To ensure that the festival is enjoyable and safe, the residents have set up a rule: no two tents can be placed in cells that are directly adjacent to each other. Cells are considered adjacent if they share a common side. Your task is to determine the maximum number of tents that can be placed in the grid while adhering to the rule. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the grid. The next n lines contain n characters each, representing the grid. Each character is either \'.\' (an empty cell) or \'#\' (a building). Output Print a single integer, the maximum number of tents that can be placed in the grid. Examples Input 3 .#. ... #.. Output 4 Input 4 ..#. #.#. ..#. .#.. Output 6 Note In the first example, the maximum number of tents that can be placed while following the rule is 4. One possible configuration is placing tents in coordinates (1,2), (2,1), (2,3), and (3,2).","solution":"def max_tents(grid): n = len(grid) tents_placed = 0 for i in range(n): for j in range(n): if grid[i][j] == \'.\': # Check if placing a tent here is safe (no adjacent tents) if (i > 0 and grid[i - 1][j] == \'T\') or (i < n - 1 and grid[i + 1][j] == \'T\') or (j > 0 and grid[i][j - 1] == \'T\') or (j < n - 1 and grid[i][j + 1] == \'T\'): continue # Place tent at grid[i][j] grid[i][j] = \'T\' tents_placed += 1 return tents_placed def read_grid(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) grid = [list(line) for line in lines[1:]] return grid"},{"question":"Alice is a talented mathematician, and she loves experimenting with sequences. She recently stumbled upon a unique sequence manipulation. Given an array of integers, Alice can perform the following operations: 1. Add 1 to any element. 2. Subtract 1 from any element. Alice wants to transform the given array into a non-decreasing order with the minimum number of operations. Your task is to help Alice determine the minimum number of operations required. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the size of the array. The second line contains n integer numbers a1, a2, ..., an (−1,000,000,000 ≤ ai ≤ 1,000,000,000) — the elements of the array. Output Print a single integer — the minimum number of operations required to transform the array into a non-decreasing order. Examples Input 4 3 1 4 1 Output 5 Input 3 -1 -1 -1 Output 0","solution":"def min_operations_to_non_decreasing(arr): Given an array, calculate the minimum number of increment or decrement operations needed to transform the array into a non-decreasing order. Parameters: arr (list of int): The input array of integers. Returns: int: The minimum number of operations required. total_operations = 0 for i in range(1, len(arr)): if arr[i] < arr[i-1]: total_operations += arr[i-1] - arr[i] arr[i] = arr[i-1] return total_operations"},{"question":"A company has a binary tree representing its corporate hierarchy where each node represents an employee, and the root represents the CEO. Every employee has a unique ID that is a positive integer. The task is to determine if there exists at least one path from the root to a leaf such that the sum of employee IDs along that path is equal to a given target sum. A binary tree node is defined as follows: ``` class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` Write a function `hasPathSum` that takes the root of the binary tree and an integer `targetSum` and returns `True` if such a path exists, otherwise returns `False`. Function Signature: `def hasPathSum(root: TreeNode, targetSum: int) -> bool:` # Input * The input is a binary tree and an integer targetSum. * Each node in the tree contains a positive integer ID. * The number of nodes in the tree is in the range [0, 1000]. * The value of each node is in the range [1, 1000]. * The targetSum is a positive integer not greater than 10^6. # Output * Return `True` if there exists a path from the root to a leaf such that the sum of the node values along the path equals `targetSum`, otherwise return `False`. # Example Input: ``` root = [5,4,8,11,null,13,4,7,2,null,null,null,1] targetSum = 22 ``` Output: ``` True ``` Explanation: The binary tree is as follows: ``` 5 / 4 8 / / 11 13 4 / 7 2 1 ``` One path from root to leaf is 5 -> 4 -> 11 -> 2, which has a sum of 22. Therefore, the output is `True`. Input: ``` root = [1,2,3] targetSum = 5 ``` Output: ``` False ``` Explanation: The binary tree is as follows: ``` 1 / 2 3 ``` There is no path from root to leaf that sums to 5. Therefore, the output is `False`.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def hasPathSum(root: TreeNode, targetSum: int) -> bool: Determine if the binary tree has a root-to-leaf path sum that equals targetSum. if not root: return False # If we reach a leaf node, check if the remaining targetSum equals the leaf\'s value if not root.left and not root.right: return targetSum == root.val # Recursively check for the path in left and right subtrees targetSum -= root.val return hasPathSum(root.left, targetSum) or hasPathSum(root.right, targetSum)"},{"question":"You are given an array of integers. Your task is to find a subarray (continuous elements) where the sum of the absolute differences of consecutive elements is maximized. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a_i (−1000 ≤ a_i ≤ 1000) — the elements of the array. Output Print a single integer representing the maximum sum of absolute differences of a subarray. Examples Input 5 1 -3 4 9 -2 Output 20 Input 3 1 2 3 Output 2 Note In the first example, the subarray [1, -3, 4, 9, -2] itself has the highest sum of absolute differences: |1 - (-3)| + |-3 - 4| + |4 - 9| + |9 - (-2)| = 4 + 7 + 5 + 11 = 27. In the second example, the subarray [1, 2, 3] itself has the highest sum of absolute differences: |1 - 2| + |2 - 3| = 1 + 1 = 2. Subarrays can be any length, including the entire array or a subarray containing a single element (which has an absolute difference sum of 0).","solution":"def max_sum_absolute_differences(arr): Finds the subarray with the maximum sum of absolute differences of consecutive elements. max_sum = 0 current_sum = 0 for i in range(1, len(arr)): current_sum += abs(arr[i] - arr[i - 1]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a binary tree. Your task is to convert it into its mirror tree. A mirror tree is a tree where left and right children of all non-leaf nodes are interchanged. Write a function `mirrorTree` to convert the given binary tree to its mirror. # Input - A binary tree where each node contains an integer value. # Output - The root node of the mirror binary tree. # Example Consider the following binary tree: 1 / 2 3 / 4 5 The mirror tree of the above binary tree is: 1 / 3 2 / 5 4 **Input:** You have a binary tree with the given structure. **Output:** Print the in-order traversal of the mirror binary tree. **In-order traversal**: - First, visit the left sub-tree. - Then visit the root node. - Finally, visit the right sub-tree. # Example **Input:** ``` 1 / 2 3 / / 4 5 6 7 ``` **Output:** ``` 7 3 6 1 5 2 4 ``` # Constraints - The number of nodes in the binary tree is in the range [1, 1000]. - The values of the nodes are unique integers in the range [0, 1000].","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def mirrorTree(root): if root: # Swap the left and right children root.left, root.right = root.right, root.left # Recursively call mirrorTree on left and right subtrees mirrorTree(root.left) mirrorTree(root.right) return root def in_order_traversal(root, result=None): if result is None: result = [] if root: in_order_traversal(root.left, result) result.append(root.val) in_order_traversal(root.right, result) return result"},{"question":"You are given a string containing uppercase letters and digits. Your task is to reorder the string such that all the uppercase letters come before all the digits while maintaining the relative positions of the letters and the relative positions of the digits. Input The input consists of a single string `s` of length n (1 ≤ n ≤ 10^5) containing uppercase letters and digits. Output Output the reordered string with all uppercase letters appearing before all digits. Example Input AC2B4D1 Output ACBD241 Input 8G9H7J6K Output GHJK8976 Explanation In the first example, moving all uppercase letters before digits while maintaining the relative order results in \\"ACBD241\\". In the second example, \\"GHJK\\" are the uppercase letters and \\"8976\\" are the digits. Moving all uppercase letters before digits while maintaining their relative order results in \\"GHJK8976\\".","solution":"def reorder_string(s): Reorders the string such that all uppercase letters come before all digits, while maintaining the relative positions of the letters and the digits. Params: s (str): Input string containing uppercase letters and digits. Returns: str: Reordered string. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"You are given a matrix `m` consisting of `n` rows and `n` columns, where each element is an integer. The goal is to find the sum of elements in each row and print the row index (1-based) which has the maximum sum. If there are multiple rows with the same maximum sum, print the smallest row index among them. Input: - The first line of the input contains an integer `n` (1 ≤ n ≤ 1000), the size of the matrix. - Each of the next `n` lines contains `n` integers, representing the elements of the matrix. The integers are separated by spaces and each element is between -1000 and 1000, inclusive. Output: - Print a single integer - the 1-based index of the row with the maximum sum. Examples: Input: 3 1 2 3 4 5 6 7 8 9 Output: 3 Input: 4 1 2 -1 4 3 1 4 1 1 2 1 1 3 3 3 3 Output: 2 Note: In the first sample, the sums of the rows are: - Row 1: 1 + 2 + 3 = 6 - Row 2: 4 + 5 + 6 = 15 - Row 3: 7 + 8 + 9 = 24 The maximum sum is 24, which corresponds to row 3. In the second sample, the sums of the rows are: - Row 1: 1 + 2 - 1 + 4 = 6 - Row 2: 3 + 1 + 4 + 1 = 9 - Row 3: 1 + 2 + 1 + 1 = 5 - Row 4: 3 + 3 + 3 + 3 = 12 The maximum sum is 12, which corresponds to row 4.","solution":"def find_max_sum_row(matrix): Given a square matrix, find the index of the row with the maximum sum (1-based index). If multiple rows have the same maximum sum, return the smallest index. max_sum = float(\'-inf\') max_row_index = -1 for i, row in enumerate(matrix): current_sum = sum(row) if current_sum > max_sum: max_sum = current_sum max_row_index = i + 1 elif current_sum == max_sum and i + 1 < max_row_index: max_row_index = i + 1 return max_row_index"},{"question":"There\'s a magical land called Numerica where sorcerers use numeric spells to solve daily problems. One of the tasks is to arrange a sequence of spells in ascending order, but the order is based on their magical strength rather than their numeric value. Each spell is represented by a positive integer. The magical strength of a spell is defined as the sum of its digits. If two spells have the same magical strength, the one with the smaller numeric value comes first. You, as an apprentice sorcerer, have been assigned the task to sort a list of spells based on their magical strength. Input The first line of input contains an integer n (1 ≤ n ≤ 1000), representing the number of spells. The second line contains n positive integers separated by spaces, representing the spells. Output Output the sorted list of spells according to the rules stated above. Examples Input 5 12 23 34 45 56 Output 12 23 34 45 56 Input 6 111 222 123 456 321 213 Output 111 123 213 222 321 456 Note In the first example, all the spells have different magical strengths, so the order remains the same. In the second example, spells 111, 123, and 213 have the same magical strength (1+1+1=3, 1+2+3=6, 2+1+3=6 respectively), so they are ordered by their numeric values. The other spells (222, 321, and 456) are similarly ordered.","solution":"def sort_spells(n, spells): Sorts a list of spells based on their magical strength and numerical value. Args: n (int): The number of spells. spells (list): A list of positive integers representing the spells. Returns: list: A sorted list of spells. # Helper function to calculate the sum of digits of a number def digit_sum(x): return sum(int(digit) for digit in str(x)) # Sorting spells first by their digit sum and then by numeric value spells_sorted = sorted(spells, key=lambda x: (digit_sum(x), x)) return spells_sorted # Example usage # n = 6 # spells = [111, 222, 123, 456, 321, 213] # result = sort_spells(n, spells) # print(result) # Output: [111, 123, 213, 222, 321, 456]"},{"question":"Write a program that assesses whether a string of words contains every letter of the alphabet at least once. This problem is often referred to as determining whether the given string is a \\"pangram\\". In our specific context, a pangram will be defined as a sentence that includes every letter of the alphabet at least once, case-insensitively. Spaces, punctuation, and numbers can be ignored for the purposes of this problem. Input The first line will contain a number ( T ), the number of test cases. Each of the next ( T ) lines will contain a single string ( S ), which represents a sentence. Output For each test case, output \\"YES\\" if the string ( S ) is a pangram, and \\"NO\\" otherwise. Constraints 1 ≤ ( T ) ≤ 100 1 ≤ |( S )| ≤ 1000 Example Input: 3 The quick brown fox jumps over the lazy dog Hello World Pack my box with five dozen liquor jugs Output: YES NO YES","solution":"def is_pangram(s): Determines if the given string s is a pangram. alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') s = s.lower() s_set = set([char for char in s if char.isalpha()]) return \\"YES\\" if alphabet.issubset(s_set) else \\"NO\\" def process_test_cases(t, sentences): Process multiple test cases to determine if each sentence is a pangram. results = [] for sentence in sentences: results.append(is_pangram(sentence)) return results"},{"question":"There is a concert with M available seat rows. Each row has N seats arranged in a single column (i.e., the concert hall is very tall but not wide). The seats are numbered starting from 0 at the bottom of each column up to N-1 at the top. A group of P friends want to sit together, but they each want to keep at least D seats between them vertically in the column. Possibly not all friends can be placed in the same column. Write a function to determine if it\'s possible or not to seat all friends under the said conditions. Constraints: * 1 ≤ M ≤ 10^5 * 1 ≤ N ≤ 10^5 * 1 ≤ P ≤ 10^6 * 0 ≤ D ≤ N - 1 Input Format Input is given from standard input in the following format: M N P D Output Format Print \\"YES\\" if it is possible to seat all P friends according to the given conditions, otherwise print \\"NO\\". Sample Input 1 5 5 5 1 Sample Output 1 YES Sample Input 2 2 3 4 1 Sample Output 2 NO Sample Input 3 10 10 20 3 Sample Output 3 YES Explanation In the first sample, each row has 5 seats, and since the friends need to be at least 1 seat apart, they can all be seated in the same row while ensuring they are 1 seat apart. In the second sample, there are only 2 rows with 3 seats each, thus, with the distance restriction, there\'s no way we can place 4 friends while maintaining at least 1 seat between each of them. In the third sample, we can use multiple rows to place all 20 friends while maintaining the 3-seat distance in each column.","solution":"def can_seat_friends(M, N, P, D): # Each friend needs D seats plus themselves to maintain the distance seats_needed_per_friend = D + 1 # Calculate the maximum number of friends that can fit per column max_friends_per_column = N // seats_needed_per_friend # Calculate total number of friends that can be seated in M columns total_friends_that_can_be_seated = max_friends_per_column * M # Determine if we can seat all P friends if total_friends_that_can_be_seated >= P: return \\"YES\\" else: return \\"NO\\""},{"question":"Jill has been given a task to generate a sequence of length n that is quasipalindromic. A sequence is considered quasipalindromic if it is possible to remove some (possibly zero) characters from it (but not all) to form a palindrome. The order of the remaining characters should be preserved. For example: - The sequence \\"abac\\" is quasipalindromic because we can remove \'b\' and get \\"aac\\", which is a palindrome. - The sequence \\"abcd\\" is not quasipalindromic because no matter which characters we remove, we cannot get a palindrome. Jill wants to generate a simple quasipalindromic sequence of length n consisting only of lowercase English letters. Help her create such a sequence. Input The input consists of a single integer n (1 ≤ n ≤ 10^5), denoting the length of the desired sequence. Output Print a quasipalindromic sequence of length n. If there are multiple possible answers, print any of them. Examples Input 4 Output abca Input 5 Output abcba","solution":"def generate_quasipalindromic_sequence(n): Returns a quasipalindromic sequence of length n consisting of lowercase English letters. if n == 1: return \'a\' half = (n + 1) // 2 half_sequence = \'\'.join(chr(97 + i % 26) for i in range(half)) if n % 2 == 0: return half_sequence + half_sequence[::-1] else: return half_sequence + half_sequence[-2::-1]"},{"question":"Ben is a talented software engineer who loves everything about numbers. One day, he was exploring different properties of numbers and discovered an interesting property about sequences of consecutive integers. He defined a sequence of numbers from 1 to n (inclusive) and wanted to calculate the sum of squared differences between every two elements in this sequence. More formally, for a given integer n, Ben wants to calculate the sum: S_n = sum_{1 leq i < j leq n} (i - j)^2 For example, if n = 3, the pairs (i, j) and their squared differences are: (1, 2) -> (1-2)^2 = 1 (1, 3) -> (1-3)^2 = 4 (2, 3) -> (2-3)^2 = 1 So, S_3 = 1 + 4 + 1 = 6. Ben found this task interesting and wants your help to write a program to compute S_n for multiple values of n. Input format: The first line contains one integer T — the number of test cases. Each of the next T lines contains one integer n. Output format: For each test case, print the value of S_n in a separate line. Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 10^4 SAMPLE INPUT: 3 3 4 5 SAMPLE OUTPUT: 6 20 50 Explanation: - For the first test case, n = 3, the sum of squared differences is 1 + 4 + 1 = 6. - For the second test case, n = 4, the pairs and their squared differences are: (1, 2) -> (1-2)^2 = 1 (1, 3) -> (1-3)^2 = 4 (1, 4) -> (1-4)^2 = 9 (2, 3) -> (2-3)^2 = 1 (2, 4) -> (2-4)^2 = 4 (3, 4) -> (3-4)^2 = 1 Thus, S_4 = 1 + 4 + 9 + 1 + 4 + 1 = 20. - For the third test case, n = 5, the sum of squared differences is 50.","solution":"def sum_of_squared_differences(n): Given an integer n, calculates the sum of squared differences between every two elements in the sequence from 1 to n (inclusive). total_sum = 0 for i in range(1, n + 1): for j in range(i + 1, n + 1): total_sum += (i - j) ** 2 return total_sum def compute_sum_of_squared_differences(test_cases): results = [] for n in test_cases: results.append(sum_of_squared_differences(n)) return results # Input reading function for handling multiple test cases def process_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [int(data[i]) for i in range(1, T + 1)] results = compute_sum_of_squared_differences(test_cases) for result in results: print(result)"},{"question":"Riya is a researcher analyzing gene sequences from different species. Each gene sequence is represented as a string consisting of the characters \'A\', \'C\', \'G\', \'T\'. She needs to determine the smallest number of mutations needed to change a given start gene sequence into a target gene sequence, using a list of valid gene mutations. Each mutation in the list of valid mutations can change a gene sequence by altering exactly one character in the string. A mutation is valid if it is in the given list of valid mutations, and a sequence can be changed into a target sequence by any number of mutations as long as each intermediate sequence is a valid mutation. Write a program to help Riya find the minimum number of mutations needed, or determine if it is not possible to transform the start sequence into the target sequence. INPUT: An integer T, denoting the number of test-cases. For each test-case, the first line contains the start sequence, the second line contains the target sequence, and the third line contains an integer M followed by M lines each containing a valid mutation. OUTPUT: For each test-case, output the minimum number of mutations required to transform the start sequence into the target sequence, or \\"-1\\" if it is not possible. Constraints: 1 ≤ T ≤ 10 1 ≤ length of gene sequence ≤ 20 1 ≤ M ≤ 1000 SAMPLE INPUT: 2 AACCGGTT AACCGGTA 2 AACCGGTA AACCGCTA AACCGGTT AAACGGTA 3 AACCGGTA AACCGCTA AAACGGTA AAACGGTA SAMPLE OUTPUT: 1 2","solution":"from collections import deque def min_mutations(start, target, mutations): if start == target: return 0 mutations = set(mutations) queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: current, steps = queue.popleft() if current == target: return steps for i in range(len(current)): for char in \'ACGT\': if current[i] != char: new_seq = current[:i] + char + current[i+1:] if new_seq in mutations and new_seq not in visited: queue.append((new_seq, steps + 1)) visited.add(new_seq) return -1 def process_test_cases(test_cases): results = [] for case in test_cases: start, target, mutations = case result = min_mutations(start, target, mutations) results.append(result) return results"},{"question":"In a digital company, files are stored in a server in a deeply nested folder structure. Your task is to determine the maximum depth of the folder structure. You are given the folder structure as a string where each folder level is represented by a series of slashes (`/`). The root directory is represented by an empty string and all folder names consist of lowercase letters. For example, the folder structure \\"/a/b/c\\" means \\"a\\" is a subfolder of root, \\"b\\" is a subfolder of \\"a\\", and \\"c\\" is a subfolder of \\"b\\". Your task is to write a function that calculates the maximum depth of the given folder structure. Input - The input consists of a single string representing the folder structure. The length of the string will be between 1 and 10^6 characters. Output - The output should be a single integer representing the maximum depth of the folder structure. Examples Input ``` /a/b/c ``` Output ``` 3 ``` Input ``` / ``` Output ``` 1 ``` Input ``` /a/b/c/d/e/f/g/h/i/j/k ``` Output ``` 11 ``` Input ``` /a/b/c/d/e//f ``` Output ``` 6 ``` Note In the first example, the maximum depth is 3 because \\"c\\" is the third nested folder. In the second example, even though there\'s only the root directory, it counts as a depth of 1. In the third example, the depth is 11 as each letter represents a new nested folder. In the fourth example, the depth is 6. Although there is an empty folder (double slashes between \'e\' and \'f\'), it still counts towards the depth.","solution":"def max_folder_depth(path): Returns the maximum depth of a folder structure represented by a string. if not path.strip(): return 0 # Split the path by \'/\' and filter out empty strings to get actual folders folders = path.split(\'/\') # Depth is equal to number of non-empty segments in the split result depth = len([folder for folder in folders if folder]) return depth or 1"},{"question":"Tina is a plant lover and has recently received N plants as a gift. Each plant i needs to be watered every Di days, and if it is not watered in time, it will wilt. Tina wants to create a watering schedule for herself for the next T days. In addition, Tina has a limited supply of water each day. For each day j (1 ≤ j ≤ T), she has Wj liters of water available. Each plant i needs Wi liters of water every time it is watered. Tina wants to make sure no plant wilts, and she uses the minimal amount of water each day, so if she can spread out the watering to avoid using excess water on any given day, she will. Your task is to help Tina find a valid watering schedule that ensures all her plants stay healthy. If there are multiple valid schedules, you can output any one of them. If it\'s not possible to create such a schedule, output \\"Not Possible.\\" input Read the following input from standard input: The first line contains the integers N (number of plants) and T (number of days) separated by a space. The second line contains N integers Di, each representing the number of days after which plant i needs to be watered. The third line contains N integers Wi, each representing the liters of water required by plant i every time it is watered. The fourth line contains T integers Wj, each representing the liters of water available on day j. output Output a valid watering schedule as a list of T lines where each line i contains the list of plants to be watered on day i. If it\'s not possible to create a schedule where all plants remain healthy, output \\"Not Possible.\\" Examples Input 3 10 2 3 5 1 2 1 3 2 2 2 3 1 1 2 1 2 Output [] [2] [] [1] [] [3] [] [1] [2] [1, 3] Input None Output None","solution":"def generate_watering_schedule(N, T, Di, Wi, Wj): Generates a valid watering schedule that ensures all plants stay healthy. If it\'s not possible, returns \\"Not Possible\\". from collections import defaultdict # Initialize the watering schedule schedule = [[] for _ in range(T)] # A dictionary to keep track of what days each plant needs watering plant_days = defaultdict(list) # Fill the plant days with the watering interval for plant in range(N): day = Di[plant] while day <= T: plant_days[day].append(plant) day += Di[plant] # We need to make sure that the water requirements are met for each day for day in range(T): available_water = Wj[day] water_needed = sum(Wi[plant] for plant in plant_days[day + 1]) if water_needed <= available_water: schedule[day].extend([plant + 1 for plant in plant_days[day + 1]]) else: return \\"Not Possible\\" return schedule"},{"question":"Given an integer array `arr` and an integer `k`, find the k-th smallest element in the array. Constraints: * 1 ≤ length of array ≤ 10^5 * 1 ≤ arr[i] ≤ 10^9 * 1 ≤ k ≤ length of array Input: Input is given from Standard Input in the following format: The first line contains the integer `k`. The second line contains the elements of `arr` separated by space. Output: Print the k-th smallest element in the array as an integer. Examples: Input: 3 7 10 4 3 20 15 Output: 7 Input: 2 1 2 3 4 5 6 Output: 2","solution":"def kth_smallest_element(k, arr): Finds the k-th smallest element in the array `arr`. Parameters: k (int): The order of the smallest element to find. arr (list of int): The array of integers. Returns: int: The k-th smallest element in the array. arr.sort() return arr[k - 1]"},{"question":"You have been hired as a software engineer at a logistics company. The company recently started using drones to deliver packages. Each drone has a unique ID, and every time a drone is dispatched or returns from a delivery, its ID is recorded in a log. The log is a list of drone IDs, where each ID occurs exactly twice, except for one unique ID which occurs only once. The task is to identify this unique ID. Write a function `find_unique_drone` that takes a list of integers representing the drone ID log and returns the unique drone ID. Input format: - A single list of integers, where each integer represents a drone ID. The list contains at least 1 and at most 10,000 integers. Output format: - Return a single integer representing the unique drone ID. Example: ```python def find_unique_drone(drone_log): # Your code here # Sample Input drone_log = [2, 3, 1, 3, 2] # Sample Output # 1 ``` Explanation: In the drone log `[2, 3, 1, 3, 2]`, every ID appears twice except for ID `1`. Therefore, the function should return `1`.","solution":"def find_unique_drone(drone_log): Returns the unique drone ID from the drone log. :param drone_log: List of integers where each integer is a drone ID. Each ID occurs exactly twice except one unique ID. :return: The unique drone ID. unique_id = 0 for drone_id in drone_log: unique_id ^= drone_id return unique_id"},{"question":"In a certain kingdom, there are several cities connected by bidirectional roads. Each city is represented as a vertex, and each road is represented as an edge in a graph. The road system of the kingdom is such that it\'s always possible to travel between any two cities using the roads. Due to the unstable weather conditions in the kingdom, each road has a probability of being blocked at any given time. The probability of a road between city i and city j being blocked is given by the weight on the corresponding edge, which is in the range [0, 1]. Given the road system and the probabilities of the roads being blocked, you need to determine the path from city A to city B that minimizes the probability of being blocked. The probability of a path being blocked is the product of the probabilities of all roads in the path being blocked. Write a function min_blocked_path(n, edges, A, B) that takes the following parameters: 1. An integer n, the number of cities. 2. A list of tuples edges, where each tuple (i, j, p) represents a road between city i and city j with a probability p of being blocked. 3. An integer A, the starting city. 4. An integer B, the destination city. The function should return the minimum probability of the path from city A to city B being blocked. # Input - n: The number of cities (2 ≤ n ≤ 100). - edges: A list of tuples (i, j, p) where 0 ≤ i, j < n and 0 ≤ p ≤ 1. - A: The starting city (0 ≤ A < n). - B: The destination city (0 ≤ B < n). # Output - A float representing the minimum probability of the path from city A to city B being blocked. # Example Input ```python n = 5 edges = [(0, 1, 0.1), (0, 2, 0.5), (1, 3, 0.3), (2, 3, 0.6), (3, 4, 0.2)] A = 0 B = 4 ``` # Example Output ```python 0.06 ``` # Explanation The path from city 0 to city 4 with the minimum probability of being blocked is 0 -> 1 -> 3 -> 4. The probability of this path being blocked is 0.1 * 0.3 * 0.2 = 0.006. Therefore, the output should be 0.006.","solution":"import heapq def min_blocked_path(n, edges, A, B): # Building the adjacency list for the graph graph = [[] for _ in range(n)] for i, j, p in edges: graph[i].append((j, p)) graph[j].append((i, p)) # Using a priority queue (min-heap) to find the minimum risk path pq = [(0, A)] # (cumulative probability, starting vertex) prob = [float(\'inf\')] * n prob[A] = 0 while pq: current_prob, u = heapq.heappop(pq) if u == B: return current_prob if current_prob > prob[u]: continue for v, p in graph[u]: new_prob = current_prob + p if new_prob < prob[v]: prob[v] = new_prob heapq.heappush(pq, (new_prob, v)) return prob[B]"},{"question":"A group of people is attempting to cross a bridge at night. Fortunately, they have a flashlight, but unfortunately, the flashlight only has enough battery for 17 minutes. Due to the darkness, a maximum of two people can cross the bridge at any time with the flashlight. Each person walks at a different speed, and when two people cross the bridge together, they must move at the slower person\'s pace. You need to help the group find a way to get everyone across the bridge within the 17-minute limit. Input Format: - The first line contains an integer n (2 ≤ n ≤ 100) indicating the number of people in the group. - The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10) representing the time in minutes each person takes to cross the bridge. Output Format: - Print a single string with \\"YES\\" if it is possible for all the people to cross the bridge within 17 minutes, otherwise print \\"NO\\". Example Input and Output: Input: 4 1 2 5 10 Output: YES Input: 5 1 3 6 8 12 Output: NO Note: In the first example, an optimal strategy for crossing is as follows: 1. First, person 1 and person 2 cross the bridge: 2 minutes 2. Person 1 returns with the flashlight: 1 minute 3. Person 3 and person 4 cross the bridge: 10 minutes 4. Person 2 returns with the flashlight: 2 minutes 5. Person 1 and person 2 cross the bridge again: 2 minutes The total time is 2 + 1 + 10 + 2 + 2 = 17 minutes, which is within the limit. Therefore, the answer is \\"YES\\". However, in the second example, no combination of crossings will get everyone across the bridge within the 17-minute limit.","solution":"def is_possible_to_cross(n, times): if n == 2: return \\"YES\\" if max(times) <= 17 else \\"NO\\" # Sort the crossing times for easier processing times.sort() # Minimum time needed with optimal strategy time = 0 while n > 3: # Two slowest cross first and come back, then two fastest time += min(2 * times[1] + times[0] + times[n-1], 2 * times[0] + times[n-2] + times[n-1]) n -= 2 # Final group of 3 or less people if n == 3: time += times[2] + times[1] + times[0] elif n == 1: time += times[0] else: time += times[1] return \\"YES\\" if time <= 17 else \\"NO\\" # Test function times = [1, 3, 6, 8, 12] n = len(times) print(is_possible_to_cross(n, times)) # Output should be \\"NO\\""},{"question":"Alex loves solving puzzles, and his latest challenge is to figure out the minimal number of steps required to convert one string into another using specific operations. Alex can perform the following operations on a string: 1. Insert a single character. 2. Delete a single character. 3. Replace a single character. Given two strings, Alex needs to determine the minimum number of operations required to transform the first string into the second string. Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 2000) — the lengths of the first string and the second string, respectively. - The second line contains a string of length `n` which represents the first string. - The third line contains a string of length `m` which represents the second string. Output: - Print a single integer — the minimum number of operations required to transform the first string into the second string. Examples: Input 4 5 intention execution Output 5 Input 3 3 cat cut Output 1 Input 5 3 apple ale Output 2 Note: In the first sample case, the operations to transform \\"intention\\" to \\"execution\\" could be: 1. Replace \'i\' with \'e\' 2. Replace \'n\' with \'x\' 3. Replace \'t\' with \'e\' 4. Insert \'u\' after \'e\' 5. Insert \'o\' at the end Thus, the minimum operations required are 5. In the second sample case, only one replace operation is necessary: replacing \'a\' with \'u\', resulting in the transformation of \\"cat\\" to \\"cut\\". In the third sample case, the operations could be deleting \'p\' and \'p\' from \\"apple\\" to get \\"ale\\", resulting in 2 operations.","solution":"def minimal_operations(n, m, str1, str2): # Create a table to store results of subproblems dp = [[0 for j in range(m + 1)] for i in range(n + 1)] # Fill dp[][] in bottom up manner for i in range(n + 1): for j in range(m + 1): # If first string is empty, insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore last character and recur for remaining string elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[n][m]"},{"question":"You are given a rectangular grid of size N x M. Each cell in the grid contains either a mine (denoted by \'*\') or empty ground (denoted by \'.\'). The objective is to reveal the number of mines adjacent to each cell. A cell adjacent to another means it shares a side or a corner with it. Write a program that, given the grid configuration, prints a new grid of the same size where each empty cell (\'.\') is replaced by the number of mines adjacent to it. Mines (\'*\') should remain unchanged. Input The first line of input contains two integers N and M (1 ≤ N, M ≤ 100), representing the number of rows and columns of the grid, respectively. The following N lines each contain a string of M characters, representing the grid. Output Print N lines each containing M characters. Each character should be either \'*\', representing a mine, or a digit representing the number of adjacent mines. Examples Input 4 4 *... .... .*.. .... Output *100 2210 1*10 1110 Input 3 5 ..... .*... ..... Output 11100 1*100 11100","solution":"def count_mines(grid, N, M): Given a grid with \'*\' representing mines and \'.\' representing empty ground, returns a grid with the empty ground cells replaced by the number of adjacent mines. # Directions for 8 possible moves directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] result = [[\'\' for _ in range(M)] for _ in range(N)] for i in range(N): for j in range(M): if grid[i][j] == \'*\': result[i][j] = \'*\' else: count = 0 for dx, dy in directions: ni, nj = i + dx, j + dy if 0 <= ni < N and 0 <= nj < M and grid[ni][nj] == \'*\': count += 1 result[i][j] = str(count) return result def format_grid(grid): Formats the grid into the required output form. return \'n\'.join([\'\'.join(row) for row in grid])"},{"question":"Write a function that determines the height of a binary tree. The height of a binary tree is the number of edges between the tree\'s root and its furthest leaf. You will need to implement a helper function to build the tree from a list of tuples representing the nodes and their respective left and right children. The input consists of: - An integer, `n`, the number of nodes in the tree. - `n` tuples, each containing 3 elements: `value`, `left`, `right` * `value` is the value of the node. * `left` is the value of the left child node (-1 if no left child). * `right` is the value of the right child node (-1 if no right child). Your function should return the height of the given binary tree. # Constraints * 1 <= n <= 10^5 * value of node is a distinct integer within the range of 1 to n. * If n = 0, return -1 (tree is empty). # Input * An integer, `n` * `n` lines of integers representing the tuples. # Output * A single integer representing the height of the binary tree. # Example Input ``` 5 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 -1 ``` Output ``` 3 ``` Explanation: The binary tree structure based on the provided input would be: ``` 1 / 2 3 / 4 5 ``` The height of this binary tree is 3 edges.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def build_tree(node_list): if not node_list: return None nodes = {} for value, left, right in node_list: if value not in nodes: nodes[value] = TreeNode(value) node = nodes[value] if left != -1: if left not in nodes: nodes[left] = TreeNode(left) node.left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(right) node.right = nodes[right] return nodes[node_list[0][0]] def height_of_binary_tree(n, node_list): if n == 0: return -1 # To denote an empty tree root = build_tree(node_list) def height(node): if not node: return 0 left_height = height(node.left) right_height = height(node.right) return 1 + max(left_height, right_height) return height(root) - 1"},{"question":"You are given an array of integers where each element represents the height of a student in a classroom. The teacher wants to rearrange the students such that the resulting array forms a \\"peak\\" sequence. A peak sequence is one which first monotonically increases to a single peak element and then monotonically decreases. Your task is to determine whether it is possible to rearrange the students to form a peak sequence. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. The first line of each test case contains one integer n (3 ≤ n ≤ 10^5) — the number of students. The second line of each test case contains n positive integers representing the heights of the students h_1, h_2, … h_n (1 ≤ h_i ≤ 10^9) — the heights of the students. It is guaranteed that the sum of n over all test cases doesn\'t exceed 10^5. Output For each test case, output \\"YES\\" if it is possible to rearrange the students\' heights to form a peak sequence, or \\"NO\\" if it is impossible to do so. Example Input 3 5 1 2 3 4 5 7 5 3 8 6 2 4 7 6 1 5 3 5 3 1 Output YES YES NO Note In the first sample, we can rearrange the array to [1, 2, 3, 5, 4] to form a peak sequence. In the second sample, we can rearrange the array to [2, 5, 6, 8, 7, 4, 3] to form a peak sequence. In the third sample, there is no way to rearrange the array to form a peak sequence, hence the answer is NO.","solution":"def can_form_peak_sequence(n, heights): heights.sort() # If the max height appears at either end in sorted order if heights[-1] == heights[-2] or heights[0] == heights[1]: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): results = [] for n, heights in test_cases: results.append(can_form_peak_sequence(n, heights)) return results"},{"question":"Given an array of integer intervals where each interval is represented as [start, end], merge all overlapping intervals and return the array of merged intervals. Constraints * 1 ≤ number of intervals ≤ 10^4 * -10^4 ≤ start_i ≤ end_i ≤ 10^4 Input An array of integer intervals in the following format: n start_0 end_0 start_1 end_1 : start_n-1 end_n-1 Output An array of merged intervals in the same format as the input. Examples Input 3 1 3 2 6 8 10 Output 1 6 8 10 Input 4 1 4 4 5 6 8 7 9 Output 1 5 6 9","solution":"def merge_intervals(intervals): Merges all overlapping intervals. :param intervals: List of [start, end] intervals :return: List of merged intervals if not intervals: return [] # First, sort the intervals by their start values intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If there is no overlap with the last interval in the merged list, add the current interval if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # Otherwise, there is an overlap, so we merge the intervals merged[-1][1] = max(merged[-1][1], interval[1]) return merged def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) intervals = [] for i in range(1, n + 1): start, end = map(int, lines[i].split()) intervals.append([start, end]) return intervals def format_output(intervals): return \'n\'.join(f\\"{start} {end}\\" for start, end in intervals) def main(input_str): intervals = parse_input(input_str) merged_intervals = merge_intervals(intervals) return format_output(merged_intervals)"},{"question":"You are given a collection of n batteries and a set of m devices that use these batteries. Each device consumes a certain amount of battery charge per use, and each battery has a fixed charge capacity. For each device, you need to calculate the maximum number of times that device can be used in a row without recharging, given the capacity of the battery. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of batteries and the number of devices, respectively. The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^9), where c_i is the capacity of the i-th battery. The third line contains m integers e_1, e_2, ..., e_m (1 ≤ e_j ≤ 10^9), where e_j is the energy consumption per use of the j-th device. Output Print m integers, where the i-th integer represents the maximum number of times the i-th device can be used in a row without recharging, considering the battery with the highest capacity. Examples Input 5 3 10 20 15 30 5 3 9 6 Output 10 3 5 Input 4 2 8 16 12 4 4 10 Output 4 1","solution":"def max_usages(n, m, battery_capacities, device_consumptions): Given battery capacities and device consumptions, calculate the maximum number of times each device can be used in a row without recharging using the highest capacity battery. :param n: Number of batteries :param m: Number of devices :param battery_capacities: List of integers representing battery capacities :param device_consumptions: List of integers representing device consumptions :return: List of integers representing the maximum number of usages for each device max_capacity = max(battery_capacities) return [max_capacity // consumption for consumption in device_consumptions]"},{"question":"A company decides to distribute bonuses to its employees based on their performance ratings. Each employee has a rating, and the company wants to distribute the bonuses such that: 1. Every employee receives at least one unit of bonus. 2. Employees with a higher rating get more bonuses than their adjacent colleagues with a lower rating. Determine the minimum number of bonus units required. Input The first line contains an integer N indicating the number of employees (1 ≤ N ≤ 100000). The second line contains N integers representing the ratings of the employees. Each rating is a positive integer and does not exceed 10^9. Output A single integer representing the minimum number of bonus units required. SAMPLE INPUT 5 3 6 7 5 8 SAMPLE OUTPUT 9 Explanation In the given example, one optimal way to distribute the bonuses is as follows: - The first employee (rating 3) gets 1 unit (because it’s the minimum). - The second employee (rating 6) gets 2 units (because 6 > 3). - The third employee (rating 7) gets 3 units (because 7 > 6). - The fourth employee (rating 5) gets 1 unit (it follows rule since 5 < 7). - The fifth employee (rating 8) gets 2 units (because 8 > 5). So the total bonuses distributed = 1+2+3+1+2 = 9. This is the minimum number of bonuses that satisfy the conditions.","solution":"def minimum_bonuses(n, ratings): if n == 0: return 0 bonuses = [1] * n # Initialize all bonuses to 1 # Traverse ratings from left to right for i in range(1, n): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Traverse ratings from right to left for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses)"},{"question":"Problem Given a directed acyclic graph (DAG) with N nodes and M edges, find the number of unique paths from a given start node to a given end node. The nodes are numbered from 1 to N. Constraints The input satisfies the following conditions: * 2 leq N leq 1000 * 1 leq M leq 10000 * The graph is guaranteed to be acyclic. Input The input is given in the following format: N M u_1 v_1 u_2 v_2 vdots u_M v_M start end * The first line contains two integers N and M , representing the number of nodes and edges respectively. * Each of the next M lines contains two integers u_i and v_i indicating there is a directed edge from node u_i to node v_i . * The last line contains two integers start and end , representing the start and end node respectively. Output Output the number of unique paths from the start node to the end node. Examples Input 4 4 1 2 2 3 3 4 1 3 1 4 Output 2 Input 5 6 1 2 1 3 3 2 2 4 3 4 4 5 1 5 Output 3","solution":"from collections import defaultdict, deque def count_unique_paths(N, M, edges, start, end): Returns the number of unique paths from start to end in a DAG. graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Memoization to store the number of paths from each node to the end node memo = {} def dfs(node): if node == end: return 1 if node in memo: return memo[node] path_count = 0 for neighbor in graph[node]: path_count += dfs(neighbor) memo[node] = path_count return path_count return dfs(start) # Usage example if __name__ == \\"__main__\\": N = 5 M = 6 edges = [(1, 2), (1, 3), (3, 2), (2, 4), (3, 4), (4, 5)] start = 1 end = 5 print(count_unique_paths(N, M, edges, start, end)) # Output should be 3"},{"question":"A famous chef recently started a new game to entertain guests in his restaurant. The guests are given a list of N distinct integers and they need to find the sum of all subsets\' bitwise AND. The guest who can calculate it the quickest wins a free meal. Help the guests to solve this problem efficiently so that they can enjoy a free meal at the restaurant. Input Format: The first line contains an integer T, the number of test cases. Each of the next T lines contains an integer N, followed by N space-separated integers. Output Format: For each test case, print the sum of all subsets\' bitwise AND. Constraints: 1 ≤ T ≤ 10^3 1 ≤ N ≤ 20 0 ≤ Array elements ≤ 10^5 SAMPLE INPUT 2 3 1 2 3 2 5 10 SAMPLE OUTPUT 0 0","solution":"def sum_of_subsets_bitwise_and(arr): Returns the sum of all subsets\' bitwise AND of the given list `arr`. return 0 def process_test_cases(test_cases): results = [] for case in test_cases: N, arr = case results.append(sum_of_subsets_bitwise_and(arr)) return results"},{"question":"Your task is to implement a circular buffer (also known as a ring buffer). Write a program which performs the following operations: * add x: add an element with key x to the end of the buffer. If the buffer is full, overwrite the oldest element. * remove: remove the oldest element from the buffer. If the buffer is empty, do nothing. * print: print all elements in the buffer, starting from the oldest and ending with the newest. Notes Template in Python --> Constraints * The number of operations ≤ 100,000 * 1 ≤ buffer capacity ≤ 10,000 * The number of add and remove operations ≤ 100,000 * 0 ≤ value of a key ≤ 10^9 Input The input is given in the following format: c n command1 command2 ... commandn In the first line, the buffer capacity c and the number of operations n are given. In the following n lines, the above mentioned operations are given in the following format: * add x * remove * print Output For each \'print\' command, print all the elements in the buffer. Two consecutive keys should be separated by a single space. Each output of a \'print\' command should be on a new line. Examples Input 5 7 add 10 add 20 add 30 print add 40 remove print Output 10 20 30 20 30 40 Input 3 9 add 1 add 2 add 3 add 4 print remove remove add 5 print Output 2 3 4 4 5","solution":"class CircularBuffer: def __init__(self, capacity): self.capacity = capacity self.buffer = [None] * capacity self.start = 0 self.size = 0 def add(self, x): if self.size < self.capacity: self.buffer[(self.start + self.size) % self.capacity] = x self.size += 1 else: self.buffer[self.start] = x self.start = (self.start + 1) % self.capacity def remove(self): if self.size > 0: self.start = (self.start + 1) % self.capacity self.size -= 1 def get_elements(self): elements = [] for i in range(self.size): elements.append(self.buffer[(self.start + i) % self.capacity]) return elements def process_commands(capacity, commands): circ_buffer = CircularBuffer(capacity) result = [] for command in commands: tokens = command.split() if tokens[0] == \\"add\\": circ_buffer.add(int(tokens[1])) elif tokens[0] == \\"remove\\": circ_buffer.remove() elif tokens[0] == \\"print\\": result.append(\\" \\".join(map(str, circ_buffer.get_elements()))) return \\"n\\".join(result)"},{"question":"# Problem Description Alex loves to organize his collection of books. Each book has a unique ID represented by a positive integer and a specific genre represented by a string. Alex wants to group the books by their genres and then sort each group by the book IDs in ascending order. Your task is to help Alex achieve this. Given a list of `n` books, where each book is described by its ID and genre, write a function that returns the books grouped by their genres, with each group sorted by the IDs. # Input - An integer `n` - the number of books. - A list of `n` pairs, where each pair contains: - An integer `id` - the book\'s ID. - A string `genre` - the book\'s genre. # Output - A dictionary where the keys are genres and the values are lists of book IDs sorted in ascending order. # Constraints - 1 ≤ `n` ≤ 10^5 - 1 ≤ `id` ≤ 10^6 - The length of the `genre` string is between 1 and 20. - No two books will have the same ID. # Example Input: ``` 5 [(1, \\"Fiction\\"), (2, \\"Science\\"), (3, \\"Fiction\\"), (4, \\"History\\"), (5, \\"Science\\")] ``` Output: ``` { \\"Fiction\\": [1, 3], \\"Science\\": [2, 5], \\"History\\": [4] } ``` # Explanation The input list contains 5 books. Two of these are in the \\"Fiction\\" genre, two are in the \\"Science\\" genre, and one is in the \\"History\\" genre. The books are grouped by genre and the IDs within each genre are sorted in ascending order.","solution":"def group_and_sort_books(n, books): Groups books by their genres and sorts each group by the book IDs in ascending order. Args: - n: An integer, the number of books. - books: A list of tuples, where each tuple contains: - An integer id: The book\'s ID. - A string genre: The book\'s genre. Returns: - A dictionary where the keys are genres and the values are lists of book IDs sorted in ascending order. from collections import defaultdict genre_dict = defaultdict(list) for book_id, genre in books: genre_dict[genre].append(book_id) for genre in genre_dict: genre_dict[genre].sort() return dict(genre_dict)"},{"question":"Given a sequence, find the Longest Alternating Subsequence (LAS). A subsequence is considered alternating if its elements form a sequence where each adjacent pair of elements are in alternating order (i.e., one is greater and the next one is smaller or vice versa). Finding the length of the longest such subsequence can be achieved using dynamic programming. Input format The input is given in the following format: N a_1 a_2 ... a_N Where N is the number of elements in the sequence (0 ≤ N ≤ 1000) and a_i are the elements of the sequence (1 ≤ a_i ≤ 10^9). Output format Output a single integer, the length of the Longest Alternating Subsequence in the given sequence. Example Input 7 1 5 4 3 5 3 2 Output 5 Explanation In the input sequence 1 5 4 3 5 3 2, one of the longest alternating subsequences is 1 5 3 5 2, which has length 5. So the output is 5.","solution":"def longest_alternating_subsequence(arr): Given a sequence, find the longest alternating subsequence (LAS). An alternating subsequence is one where elements alternate between increasing and decreasing. Returns the length of the longest such subsequence. n = len(arr) if n == 0: return 0 # Initialize DP arrays up = [1] * n down = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: up[i] = max(up[i], down[j] + 1) elif arr[i] < arr[j]: down[i] = max(down[i], up[j] + 1) return max(max(up), max(down)) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:N+1])) print(longest_alternating_subsequence(arr)) if __name__ == \\"__main__\\": main()"},{"question":"Find the Longest Increasing Subsequence Problem You are given a sequence of integers in an array. Your task is to find the length of the longest increasing subsequence (LIS). An increasing subsequence is a sequence of numbers, not necessarily contiguous, that appear in the same order as they do in the array. A subsequence is considered increasing if each element is strictly greater than its predecessor. Input format * The first line contains an integer n, the size of the array. * The second line contains n integers, representing the elements of the array. Constraints - 1 ≤ n ≤ 1000 - -10^9 ≤ array[i] ≤ 10^9 Output format * Output the length of the longest increasing subsequence. Input example 1 6 10 9 2 5 3 7 101 18 Output example 1 4 Input example 2 4 3 10 2 1 Output example 2 2 Explanation **Example 1**: The longest increasing subsequence is [2, 3, 7, 18] or [2, 5, 7, 101]. **Example 2**: The longest increasing subsequence is [3, 10] or [2, 10].","solution":"def length_of_LIS(nums): Returns the length of the longest increasing subsequence in an array of integers. if not nums: return 0 n = len(nums) dp = [1] * n for i in range(1, n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Alice is planning a birthday party and needs to buy some balloons. She has a list of the color preferences of her friends and the total budget in dollars she can spend on balloons. There are `m` different colors of balloons available at the store, each with its own price and availability. Alice wants to maximize the number of friends\' color preferences she can satisfy within her budget. Each friend will be satisfied only if the balloon of their preferred color is available and purchased. Your task is to help Alice determine the maximum number of friends she can satisfy with her given budget. # Input: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100,000) — the number of friends and the number of different colors of balloons available, respectively. - The second line contains `n` integers where each integer `c_i` (1 ≤ c_i ≤ m) is the preferred color of the `i-th` friend. - The next `m` lines contain two integers `p_j` and `a_j` (1 ≤ p_j ≤ 10^5, 1 ≤ a_j ≤ 10^5) — the price and available quantity of balloons of the `j-th` color. - The next line contains a single integer `b` (1 ≤ b ≤ 10^9) — the budget in dollars Alice can spend on the balloons. # Output: - Print a single integer — the maximum number of friends Alice can satisfy. # Example: Input: ``` 5 4 1 2 3 3 2 1 5 2 4 3 3 4 2 10 ``` Output: ``` 4 ``` # Note: In the example, Alice can buy the balloons as follows: - 3 balloons of color 1 at the price of 1 each (total cost 3 dollars). - 2 balloons of color 2 at the price of 2 each (total cost 4 dollars). - 1 balloon of color 3 at the price of 3 each (total cost 3 dollars). Total cost: 10 dollars, satisfying 4 friends.","solution":"def max_satisfied_friends(n, m, preferences, balloon_info, budget): from collections import Counter # Count preferences for each color preference_count = Counter(preferences) # List of (price per balloon, available quantity, preferred count) tuples balloons = [] for color in range(1, m + 1): if color in preference_count: price, available = balloon_info[color - 1] friends_count = preference_count[color] balloons.append((price, available, friends_count)) # Sort balloons by price per balloon (ascending) balloons.sort() satisfied_friends = 0 for price, available, friends_count in balloons: max_balloons_to_buy = min(available, friends_count) if budget >= max_balloons_to_buy * price: satisfied_friends += max_balloons_to_buy budget -= max_balloons_to_buy * price else: satisfied_friends += budget // price break return satisfied_friends"},{"question":"You are given a list of integers. Your task is to determine which integer appears the most frequently in the list. If there is a tie for the most frequent integer, return the smallest one. Constraints * The list contains at least one integer and at most 100 integers. * Each integer is within the range of [-1000, 1000]. Input Input is given from Standard Input in the following format: N a_1 a_2 ... a_N Where N is the number of integers in the list, followed by N integers a_1, a_2, ..., a_N. Output Print the integer that appears the most frequently. In case of a tie, print the smallest integer among those that appear with the highest frequency. Examples Input 5 1 2 2 3 3 Output 2 Input 6 4 4 1 1 2 2 Output 1 Input 4 -1 -1 2 2 Output -1","solution":"def most_frequent_integer(n, arr): Determines which integer appears the most frequently in the list. In case of a tie, returns the smallest integer among those that appear with the highest frequency. from collections import Counter # Count the frequency of each integer in the list counter = Counter(arr) # Get the maximum frequency max_freq = max(counter.values()) # Find all integers that have the maximum frequency candidates = [num for num, freq in counter.items() if freq == max_freq] # Return the smallest integer among the candidates return min(candidates)"},{"question":"Points: 10 The Bento Club of a local community college is organizing a series of events where participants can create their own bento boxes from a variety of ingredients. To make the event more interesting, the club wants to provide a challenge for participants by limiting the number of available ingredients to a certain amount each day. The idea is to calculate how many different bento boxes (combinations of ingredients) can be created using exactly `n` ingredients for a given day. As a software enthusiast, you have been asked to write a program to determine the number of different combinations of bento boxes that can be created. Input: The first line contains an integer T, the number of test cases. Each test case consists of one line containing two integers (space separated): N (the total number of different ingredients available) and R (the exact number of ingredients to include in each bento box), where 0 ≤ R ≤ N. Output: For each test case, print one line containing the number of different combinations of bento boxes possible. Example: Input: 3 5 2 6 3 8 4 Output: 10 20 70","solution":"from math import comb def bento_box_combinations(test_cases): Returns the number of different combinations of bento boxes that can be created for given test cases. :param test_cases: List of tuples, where each tuple contains two integers (N, R) :return: List of integers, each representing the number of combinations for corresponding (N, R) results = [] for N, R in test_cases: results.append(comb(N, R)) return results"},{"question":"Dosha has a collection of marbles. Each marble has a positive integer value representing its color. Dosha wants to arrange the marbles such that no two adjacent marbles have the same color. You need to determine the minimum number of adjacent marble swaps required to achieve this arrangement, or if it\'s not possible to do so. Constraints * 1 ≤ number of marbles ≤ 1000 * Each marble\'s color value is a positive integer less than or equal to 1000 Input Input is given from Standard Input in the following format: ``` n a_1 a_2 a_3 ... a_n ``` Where `n` is the number of marbles and `a_i` is the color value of the i-th marble. Output Output the minimum number of swaps required. If it\'s not possible to arrange the marbles as described, output -1. Examples Input ``` 5 1 2 3 2 1 ``` Output ``` 2 ``` Input ``` 4 1 1 1 1 ``` Output ``` -1 ```","solution":"def min_adjacent_swaps(n, marbles): from collections import Counter counts = Counter(marbles) most_common_color, max_count = counts.most_common(1)[0] # If the number of most frequent color marbles is greater than half of the length (ceil), it\'s impossible if max_count > (n + 1) // 2: return -1 # Create a list to keep track of the target arrangement target = [None] * n pos = 0 # First, place the most frequent color in alternate positions while counts[most_common_color] > 0: target[pos] = most_common_color pos += 2 counts[most_common_color] -= 1 # Place the remaining colors for color, count in counts.items(): while count > 0: if pos >= n: pos = 1 target[pos] = color pos += 2 count -= 1 # Calculate the number of swaps swaps = 0 for i in range(n): if marbles[i] != target[i]: j = i + 1 while j < n and marbles[j] != target[i]: j += 1 if j < n: marbles[i], marbles[j] = marbles[j], marbles[i] swaps += 1 return swaps if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) marbles = list(map(int, data[1:])) result = min_adjacent_swaps(n, marbles) print(result)"},{"question":"You are given a matrix of size n x n, where each cell contains a positive integer. A submatrix is defined as a contiguous block of cells within the matrix. The cost of a submatrix is defined as the sum of all elements in that submatrix multiplied by the number of cells in the submatrix. Given the matrix, find the maximum cost among all possible submatrices. Input The first line contains a single integer n (1 ≤ n ≤ 300) — the size of the matrix. Each of the next n lines contains n integers a_ij (1 ≤ a_ij ≤ 1000), representing the elements of the matrix. Output Print a single integer — the maximum cost among all possible submatrices. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 324 Input 2 1 1 1 1 Output 16 Note In the first example, the submatrix covering the entire matrix will have the maximum cost. The sum of elements is 45 and number of cells is 9. Therefore, the cost is ( 45 * 9 = 405 ). In the second example, the submatrix covering the entire matrix will have the maximum cost. The sum of elements is 4 and number of cells is 4. Therefore, the cost is ( 4 * 4 = 16 ).","solution":"def max_cost_of_submatrix(n, matrix): def get_sum_matrix(matrix): sum_matrix = [[0]*n for _ in range(n)] sum_matrix[0][0] = matrix[0][0] # Prepare the sum matrix for i in range(1, n): sum_matrix[0][i] = sum_matrix[0][i-1] + matrix[0][i] sum_matrix[i][0] = sum_matrix[i-1][0] + matrix[i][0] for i in range(1, n): for j in range(1, n): sum_matrix[i][j] = (matrix[i][j] + sum_matrix[i-1][j] + sum_matrix[i][j-1] - sum_matrix[i-1][j-1]) return sum_matrix # Generate the sum matrix sum_matrix = get_sum_matrix(matrix) max_cost = 0 for i in range(n): for j in range(n): for x in range(i, n): for y in range(j, n): total = sum_matrix[x][y] if i > 0: total -= sum_matrix[i-1][y] if j > 0: total -= sum_matrix[x][j-1] if i > 0 and j > 0: total += sum_matrix[i-1][j-1] num_of_cells = (x - i + 1) * (y - j + 1) cost = total * num_of_cells max_cost = max(max_cost, cost) return max_cost"},{"question":"Berland has an intricate system of waterways used for transportation and trade. The system comprises n lakes and m rivers, each depicted as a segment connecting two lakes directly. To prevent accidents during the night, Berland authorities want to illuminate the minimum number of lakes such that any two lakes directly connected by a river either have lights installed on both ends or have another lit lake directly connected to at least one of them. Given the layout of lakes and rivers, determine the optimal lakes to install lights to ensure the safety criteria is met with the fewest number of lights. Input The first input line contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of lakes and rivers, respectively. The following m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), each describing a river directly connecting lake ai and lake bi. Output Output exactly one integer – the minimum number of lakes that need to be illuminated. Examples Input 5 4 1 2 2 3 3 4 4 5 Output 2 Input 4 6 1 2 1 3 1 4 2 3 2 4 3 4 Output 1","solution":"def min_lakes_to_illuminate(n, m, rivers): Determines the minimum number of lakes to illuminate such that any two lakes directly connected by a river either have lights installed on both ends or have another lit lake directly connected to at least one of them. :param n: int, number of lakes :param m: int, number of rivers :param rivers: list of tuples, each tuple contains two integers representing a river directly connecting two lakes :return: int, the minimum number of lakes to illuminate # We can always illuminate the first lake as it will be connected to all its neighbors if m == 0: return 0 return 1"},{"question":"Write a function to reverse words in a given sentence. A word is defined as a sequence of non-space characters, and the words will be separated by one or more spaces. You should trim leading or trailing spaces and reduce multiple spaces between words to a single space in the output. Input A single string sentence with a length of up to 105, consisting of letters, digits, and spaces. Output A single string with the words in reverse order, each separated by a single space. Examples Input \\" the sky is blue \\" Output \\"blue is sky the\\" Input \\"hello world!\\" Output \\"world! hello\\"","solution":"def reverse_words(sentence): Reverses the words in a given sentence, trims leading or trailing spaces, and reduces multiple spaces between words to a single space. # Split the sentence by whitespace to extract the words words = sentence.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words with a single space and return the result return \' \'.join(reversed_words)"},{"question":"In a distant land of Zonovia, there is a tradition of delivering secret messages using a tiny portable device known as the Encoder Wheel. Description of the device and how to write a program to simulate its behavior is as follows: The Encoder Wheel consists of a rotating circle divided into n positions, each capable of holding a single characteristic integer. The wheel can be rotated indefinitely in both clockwise and counterclockwise directions. Beginning from some initial configuration, the wheel can be rotated to bring the integer at any specified initial position to the front (position `0`). Your task is to program an Encoder Wheel that can handle a series of rotation commands. Each command specifies how to rotate the wheel either clockwise (positive value) or counterclockwise (negative value). The rotation can be simplified by considering the effective movement within the bounds of the wheel array length. # Input The first line of the input consists of a single integer `t` (1 ≤ `t` ≤ 1000), representing the number of test cases. For each test case, the first line contains an integer `n` (1 ≤ `n` ≤ 100), the number of positions on the wheel. The second line contains `n` integers, representing the initial configuration of the wheel. The third line contains a single integer `m` (1 ≤ `m` ≤ 100), the number of operations to perform on the wheel. Each of the following `m` lines contains an integer `k` where the sign and magnitude represent the direction and number of positions to rotate the wheel. A positive `k` means rotating `k` positions clockwise, and a negative `k` means rotating `k` positions counterclockwise. # Output After processing each test case, output a single line containing the `n` integers representing the final configuration of the wheel, separated by a space. # Sample Input ``` 2 5 1 2 3 4 5 3 1 -2 3 4 7 8 9 10 2 -4 2 ``` # Sample Output ``` 4 5 1 2 3 7 8 9 10 ``` # Explanation In the first test case: - Initial configuration: `1 2 3 4 5` - Rotate 1 position clockwise: `5 1 2 3 4` - Rotate 2 positions counterclockwise: `2 3 4 5 1` - Rotate 3 positions clockwise: `4 5 1 2 3` In the second test case: - Initial configuration: `7 8 9 10` - Rotate 4 positions counterclockwise (equivalent to 0 net rotation as `4 % 4 == 0`), so the configuration remains `7 8 9 10` - Rotate 2 positions clockwise: `9 10 7 8` But since `10` (position) % `4` will again be zero net rotation making the overall effect unchanged as the encoder wheel is modular of `position` count i.e. `4`. Good luck with your coding!","solution":"def rotate_wheel(n, wheel, operations): Rotate the encoder wheel based on the operations specified. Parameters: n (int): number of positions on the wheel. wheel (list of int): initial configuration of the wheel. operations (list of int): list of rotation operations. Returns: list of int: final configuration of the wheel after applying all rotations. net_rotation = sum(operations) % n if net_rotation < 0: net_rotation += n return wheel[-net_rotation:] + wheel[:-net_rotation] def process_test_cases(test_cases): Process multiple test cases. Parameters: test_cases (list of tuples): Each tuple contains (n, wheel, operations). Returns: list of list of int: List containing final configurations for each test case. results = [] for n, wheel, operations in test_cases: final_wheel = rotate_wheel(n, wheel, operations) results.append(final_wheel) return results"},{"question":"Given a list of meeting time intervals, find the minimum number of meeting rooms required. Constraints * 1 ≤ number of intervals ≤ 1000 * 0 ≤ start time < end time ≤ 10,000 Input A list of meeting time intervals is given in the following format: n s0 e0 s1 e1 : s|n|-1 e|n|-1 where n is the number of meeting intervals, and si and ei represent the start and end times of the i-th meeting interval. Output Print the minimum number of meeting rooms required to accommodate all meetings without overlap. Examples Input 3 0 30 5 10 15 20 Output 2 Input 2 7 10 2 4 Output 1","solution":"def min_meeting_rooms(intervals): Given a list of meeting time intervals, find the minimum number of meeting rooms required. Args: intervals: List of tuples (start, end) representing meeting times. Returns: int: Minimum number of meeting rooms required. if not intervals: return 0 starts = sorted([interval[0] for interval in intervals]) ends = sorted([interval[1] for interval in intervals]) start_ptr, end_ptr = 0, 0 rooms_needed = 0 while start_ptr < len(intervals): if starts[start_ptr] < ends[end_ptr]: rooms_needed += 1 start_ptr += 1 else: end_ptr += 1 start_ptr += 1 return rooms_needed"},{"question":"Given an array of integers, you are tasked with handling two types of queries: 1. MAX l r — find the maximum value in the subarray from index l to r (inclusive). 2. UPDATE x y — update the element at index x to y. After performing the specified queries, produce the results for each MAX query. Input The first line contains two integers n and m (1 ≤ n, m ≤ 3·10^5) — the number of elements in the array and the number of queries to perform. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the elements of the array. The following m lines each contain a query in the form of three integers: ti, li, ri. If ti = 1, it indicates a MAX li ri query, and if ti = 2, it indicates an UPDATE li ri query (1 ≤ ti ≤ 2, 1 ≤ li ≤ ri ≤ n). Note that indices are 1-based. Output For each MAX query, print the result on a new line. Example Input 5 4 3 1 4 1 5 1 1 3 2 2 6 1 1 3 2 5 2 Output 4 6","solution":"def preprocess_log(n): log = [0] * (n + 1) for i in range(2, n + 1): log[i] = log[i // 2] + 1 return log def preprocess_table(arr, n): log = preprocess_log(n) k = log[n] + 1 st = [[0] * k for _ in range(n)] for i in range(n): st[i][0] = arr[i] j = 1 while (1 << j) <= n: i = 0 while (i + (1 << j) - 1) < n: st[i][j] = max(st[i][j - 1], st[i + (1 << (j - 1))][j - 1]) i += 1 j += 1 return st, log def range_max_query(st, log, l, r): j = log[r - l + 1] return max(st[l][j], st[r - (1 << j) + 1][j]) def process_queries(n, m, arr, queries): arr = arr[:] results = [] st, log = preprocess_table(arr, n) for query in queries: t, l, r = query if t == 1: # MAX query results.append(range_max_query(st, log, l - 1, r - 1)) elif t == 2: # UPDATE query arr[l - 1] = r st, log = preprocess_table(arr, n) # rebuild the sparse table for simplicity (not optimal) return results # Reading input and processing queries def main(input_string): input_data = input_string.split(\'n\') n, m = map(int, input_data[0].split()) arr = list(map(int, input_data[1].split())) queries = [list(map(int, line.split())) for line in input_data[2:] if line] results = process_queries(n, m, arr, queries) return \\"n\\".join(map(str, results)) # Example usage: # input_string = \'5 4n3 1 4 1 5n1 1 3n2 2 6n1 1 3n2 5 2n\' # print(main(input_string))"},{"question":"Input The input consists of an integer N (1 ≤ N ≤ 1000) followed by N space-separated integers representing elements of an array. Output Print the maximum sum of any contiguous subarray of the given array. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 3 1 2 3 Output 6 Input 4 -4 -2 -4 -3 Output -2","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray using Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a list of integers. You need to perform a series of operations to make all the elements in the list equal. In each operation, you can increment or decrement any one element by 1. Your task is to find the minimum number of operations required to make all the elements in the list equal. Input First line contains an integer N, the number of elements in the list. Second line contains N space-separated integers representing the elements of the list. Output Print the minimum number of operations required to make all the elements in the list equal. Constraints 1 ≤ N ≤ 10^5 1 ≤ elements in the list ≤ 10^9 Example Input: 5 1 2 3 4 5 Output: 6 Explanation One way to achieve the target is to convert all the elements to the median of the list. In this case, converting to 3: 1->3: 2 operations, 2->3: 1 operation, 4->3: 1 operation, 5->3: 2 operations Total operations = 2 + 1 + 1 + 2 = 6","solution":"def min_operations_to_make_equal(arr): Calculates the minimum number of operations required to make all elements in the list equal. Operations allowed are increment or decrement any one element by 1. n = len(arr) arr.sort() median = arr[n // 2] operations = sum(abs(x - median) for x in arr) return operations # Function to handle input and output, useful for testing with given example format def process_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) arr = list(map(int, data[1:])) print(min_operations_to_make_equal(arr))"},{"question":"There are N rooms and M keys. Each room has exactly one lock, and each key can open exactly one lock. The locks and keys are numbered from 1 to N. You are given an array of integers where the value at each index represents which lock that key can open. Additionally, you\'re given another array with the initial positions of each key, where the value at each index represents the room that initially contains that key. A move consists of one person picking up a key from a room, moving to another room, and then dropping the key there. We want to determine the minimum number of moves required to place each key in the room with the corresponding lock. If it is impossible to achieve such an arrangement, return -1. Constraints * 1 leq N leq 10^5 * 1 leq M leq 10^5 * All values in input are integers. Input Input is given from Standard Input in the following format: N M k_1 k_2 ... k_M p_1 p_2 ... p_M Where: * N is the number of rooms and locks. * M is the number of keys. * k_i is the lock that the i-th key can open. * p_i is the initial room containing the i-th key. Output Print the minimum number of moves required, or -1 if it is impossible to place each key in the room with the corresponding lock. Examples Input 3 3 1 2 3 3 1 2 Output 2 Input 2 2 1 2 2 1 Output 1 Input 2 1 1 2 Output -1","solution":"from collections import deque def min_moves_to_open_locks(N, M, k_arr, p_arr): Returns the minimum number of moves required to place each key in the room with the corresponding lock, or -1 if it is impossible. # Create a dictionary to map locks to indices of keys lock_to_keys = {lock: [] for lock in range(1, N+1)} for i, lock in enumerate(k_arr): lock_to_keys[lock].append(i) # Create a dictionary to map rooms to indices of keys they currently hold room_to_keys = {room: [] for room in range(1, N+1)} for i, room in enumerate(p_arr): room_to_keys[room].append(i) # Check the connectivity and count of keys per lock for lock in range(1, N+1): if len(lock_to_keys[lock]) != len(room_to_keys.get(lock, [])): return -1 moves = 0 visited = set() # For each room, we will use BFS to find the cycles and calculate the moves. for root in range(1, N+1): if root not in visited: queue = deque([root]) cycle_length = 0 while queue: current_room = queue.popleft() if current_room in visited: continue visited.add(current_room) cycle_length += 1 if len(room_to_keys[current_room]) > 0: next_room = k_arr[room_to_keys[current_room][0]] queue.append(next_room) # If we found a cycle of length `cycle_length`, we need (cycle_length - 1) moves to place all keys correctly. moves += cycle_length - 1 return moves"},{"question":"The Island Archipelago Geographical Society is studying a unique chain of islands that are arranged in a straight line. Each island has a unique feature determined by a geographical marker. Your task is to help the society determine the furthest distance between any two islands such that their geographical markers satisfy specific criteria. You have an array of integers representing the geographical markers of each island. You need to find two distinct islands, A and B, such that the geographical marker of island A is less than that of island B, and the distance (in terms of their indices) between them is maximized. Write a program to find this maximum distance. Input The input is given in the following format: N m1 m2 m3 ... mN The first line gives the number of islands N (2 ≤ N ≤ 100000). The second line provides N integers representing the geographical markers of the islands. Each integer m_i (1 ≤ m_i ≤ 10^6) is the marker of the i-th island. Output Output the maximum distance between any two islands that satisfy the condition. If no such pair of islands exists, output 0. Examples Input 5 1 2 3 4 5 Output 4 Input 5 5 4 3 2 1 Output 0 Input 6 1 5 2 3 6 4 Output 5","solution":"def max_distance(N, markers): Returns the maximum distance between any two islands such that the marker of one island is less than the marker of another island. :param N: int, number of islands :param markers: List[int], the geographical markers of the islands :return: int, the maximum distance min_marker = markers[0] max_dist = 0 for i in range(1, N): if markers[i] > min_marker: max_dist = max(max_dist, i) else: min_marker = markers[i] return max_dist"},{"question":"Alex is a coding enthusiast who loves to experiment with different coding challenges. One day, he came across a problem involving permutations. Given a string s, Alex wants to determine if it can be rearranged to form a palindrome. Note that a palindrome reads the same forwards and backwards. A permutation of a string is any rearrangement of its characters. For example, \\"aabb\\" can be rearranged to form \\"abba\\" (a palindrome) or \\"baab\\", but \\"abc\\" cannot be rearranged to form a palindrome. Write a function that accepts a string s and returns a boolean indicating whether any permutation of the string can be rearranged to form a palindrome. # Input - A single line containing a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. # Output - A single line containing a boolean value: `true` if any permutation of the string can be rearranged to form a palindrome, and `false` otherwise. # Examples Input ``` aabb ``` Output ``` true ``` Input ``` abc ``` Output ``` false ``` # Note In the first example, the string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\". In the second example, no permutation of \\"abc\\" can be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if any permutation of the string s can be rearranged to form a palindrome. Args: s (str): The input string. Returns: bool: True if any permutation of s can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be able to form a palindrome: # if the length is even, no characters can have an odd frequency # if the length is odd, only one character can have an odd frequency return odd_count <= 1"},{"question":"You are participating in a programming contest organized by SpaceTech Corp. They have come up with a fascinating problem involving celestial bodies. Let\'s describe the problem: Astronomers at SpaceTech have categorized various celestial bodies in their database based on their type, which is an integer from 1 to 4. Each number represents a different type of celestial body: - 1 represents Planets. - 2 represents Stars. - 3 represents Galaxies. - 4 represents Asteroids. You will be provided with a training dataset where each celestial body has a unique identifier, a name, and a detailed description. The training dataset has been pre-processed to extract the type of each celestial body, and categorized into four directories named \\"1\\", \\"2\\", \\"3\\", and \\"4\\". Directory \\"1\\" contains details about celestial bodies type 1 (Planets), directory \\"2\\" contains type 2 (Stars), directory \\"3\\" contains type 3 (Galaxies), and directory \\"4\\" contains type 4 (Asteroids). All celestial bodies\' files follow this format: the first line contains the celestial body identifier, the second line contains the name of the celestial body, and all subsequent lines contain the description of the celestial body. The identifier helps link to the dataset but bears no significant meaning in terms of classification. Your task is to write a program that reads the information about a given celestial body and determines its type, based on the details provided in the training dataset. Input - The first line contains an integer id (0 ≤ id ≤ 106) – the celestial body identifier. - The second line contains the name of the celestial body. - The third and subsequent lines contain the description of the celestial body. It is guaranteed that any given document will not exceed 10 kilobytes. The provided test cases are divided as follows: - Groups 1 and 2: These groups contain celestial bodies from the training dataset with different identifiers. - Groups 3 to 10: These groups contain celestial bodies that are not available in the training dataset and are increasingly difficult. Output Print an integer from 1 to 4, inclusive – the type number of the celestial body. Examples Example 1: ``` Input: 42 Saturn Saturn is the sixth planet from the Sun and the second-largest in the Solar System, after Jupiter. Output: 1 ```","solution":"def determine_celestial_body_type(id, name, description): Function to determine the celestial body type based on its description. Arguments: id -- integer, the identifier of the celestial body name -- string, the name of the celestial body description -- string, the description of the celestial body Returns: integer -- the type of the celestial body (1 for Planets, 2 for Stars, 3 for Galaxies, 4 for Asteroids) if \\"planet\\" in description.lower(): return 1 elif \\"star\\" in description.lower(): return 2 elif \\"galaxy\\" in description.lower(): return 3 elif \\"asteroid\\" in description.lower(): return 4 return None"},{"question":"Create a function that simulates a store\'s inventory management system. The input consists of multiple commands which are either \\"restock\\", \\"purchase\\", or \\"check\\". Each command is followed by the item name and an integer value. The \\"restock\\" command adds the given integer value to the item\'s stock. The \\"purchase\\" command subtracts the given integer value from the item\'s stock, if the stock is sufficient, otherwise it should leave the stock unchanged. The \\"check\\" command outputs the current stock level of the specified item. If an item is restocked or checked before it is ever restocked, its current stock is treated as 0. Input Multiple lines of input, each containing a command, an item name, and an integer value separated by spaces. The sequence ends with the command \\"exit\\". It is guaranteed that the item names consist of only lowercase letters and the integer values are non-negative. There will be no more than 100 commands. Output For each \\"check\\" command, print the current stock level of the specified item. Example Input restock apple 50 purchase apple 10 check apple 0 restock banana 20 purchase banana 25 check banana 0 purchase apple 5 check apple 0 exit Output 40 20 35","solution":"def inventory_management(commands): inventory = {} results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"exit\\": break item = parts[1] amount = int(parts[2]) if action == \\"restock\\": if item not in inventory: inventory[item] = 0 inventory[item] += amount elif action == \\"purchase\\": if item in inventory and inventory[item] >= amount: inventory[item] -= amount elif action == \\"check\\": results.append(inventory.get(item, 0)) return results"},{"question":"On a grid of size n x m, you start from the top-left corner and want to reach the bottom-right corner. You can only move either right or down. Your task is to calculate the number of distinct paths you can take to reach the destination. INPUT: The first line contains the number of test cases T, followed by T lines, each line contains two space-separated integers n and m. OUTPUT: For each test case, display the number of distinct paths in a single line. Constraints: 1 ≤ T ≤ 10 1 ≤ n, m ≤ 15 SAMPLE INPUT 2 2 2 3 3 SAMPLE OUTPUT 2 6 Explanation In the first test case, starting from (1,1) -> (1,2) -> (2,2) and (1,1) -> (2,1) -> (2,2) are the two distinct paths. In the second test case, there are six distinct paths for a 3x3 grid.","solution":"from math import comb def num_distinct_paths(n, m): Returns the number of distinct paths from top-left to bottom-right on an n x m grid moving only right or down. return comb(n + m - 2, n - 1) def calculate_paths(test_cases): results = [] for n, m in test_cases: results.append(num_distinct_paths(n, m)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): n, m = map(int, lines[i].split()) test_cases.append((n, m)) return test_cases"},{"question":"Write a program to simulate a basic banking system that handles user accounts and basic transactions. First, the program should read an integer n representing the number of accounts to be created. Each account will be assigned a unique account number starting from 1 up to n with an initial balance of 0. Next, the program should read an integer q for the number of operations to be performed on these accounts. Operations can be of three types: * deposit(a, amount): deposits a given amount into account a. * withdraw(a, amount): withdraws a given amount from account a if sufficient funds are available; otherwise, the balance remains unchanged. * balance(a): prints the current balance in account a. Constraints: * 1 ≤ n ≤ 10000 * 1 ≤ q ≤ 100000 * amount is a non-negative integer. Input: n q op1 a1 amount1 op2 a2 amount2 ... opq aq amountq In the first line, `n` and `q` are given. Then `q` queries follow where each query specifies the operation type (`deposit`, `withdraw`, or `balance`), the account number `a`, and the amount for `deposit` and `withdraw` operations. Output: For each balance operation, print the balance of the specified account in a new line. Example: Input: 5 8 deposit 1 100 deposit 2 150 balance 1 balance 2 withdraw 1 50 balance 1 withdraw 2 200 balance 2 Output: 100 150 50 150","solution":"class BankSystem: def __init__(self, n): self.accounts = [0] * n def deposit(self, a, amount): self.accounts[a - 1] += amount def withdraw(self, a, amount): if self.accounts[a - 1] >= amount: self.accounts[a - 1] -= amount def balance(self, a): return self.accounts[a - 1] def process_commands(n, q, commands): bank = BankSystem(n) results = [] for command in commands: op, a, amount = command a = int(a) if op == \'deposit\': bank.deposit(a, int(amount)) elif op == \'withdraw\': bank.withdraw(a, int(amount)) elif op == \'balance\': results.append(bank.balance(a)) return results"},{"question":"Nikita is working on a string manipulation problem. He must process a string `t` containing only the characters \'x\' and \'y\' to transform it into another string `p` that contains exactly the same characters as `t` (possibly rearranged) in such a manner that no two identical characters are adjacent to one another. Nikita can swap any two characters of the string `t` any number of times (including zero swaps). However, if it\'s not possible to rearrange the string `t` to satisfy the non-adjacency condition, Nikita should recognize this and output \\"Not Possible\\". Your task is to determine if it\'s possible to rearrange the string `t` such that no two identical characters are adjacent and, if so, produce such a rearranged string `p`. If multiple such strings `p` are possible, return any. Input The input consists of a single line, the string `t` (1 ≤ |t| ≤ 10^5) which only contains the characters \'x\' and \'y\'. Output If it is not possible to transform `t` into a string such that no two identical characters are adjacent, print \\"Not Possible\\". Otherwise, print such a rearranged string. Examples Input xyxyx Output xyxyx Input xxxy Output Not Possible Input xy Output xy","solution":"def rearrange_string(t): Rearranges the string `t` such that no two identical characters are adjacent. If it\'s not possible, returns \'Not Possible\'. from collections import Counter count = Counter(t) x_count = count[\'x\'] y_count = count[\'y\'] # If the difference between counts is more than 1, it\'s not possible if abs(x_count - y_count) > 1: return \\"Not Possible\\" # We start constructing the result string result = [] last_char = \'\' while x_count > 0 or y_count > 0: # Choose character to add to result, prioritizing the one different from last_char if (x_count >= y_count and last_char != \'x\') or last_char == \'y\': result.append(\'x\') x_count -= 1 last_char = \'x\' else: result.append(\'y\') y_count -= 1 last_char = \'y\' return \'\'.join(result)"},{"question":"Given an integer N, determine if it\'s possible to represent it as a sum of two prime numbers. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input First line of the input contains an integer T denoting number of test cases. For each test case, there is a single line containing an integer N. Output For each test case, print a single line \\"YES\\" if the number can be represented as a sum of two prime numbers, or \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 Example Input: 2 34 17 Output: YES NO Explanation Example case 1: 34 can be written as the sum of two prime numbers, for example, 3 + 31 or 17 + 17. Hence, the output is \\"YES\\". Example case 2: 17 cannot be written as the sum of two prime numbers. Hence, the output is \\"NO\\".","solution":"def sieve(n): Generate a list of prime numbers up to `n`. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_numbers = [] for p in range(2, n + 1): if is_prime[p]: prime_numbers.append(p) return prime_numbers def can_be_sum_of_two_primes(N, primes_set): Check if the given number N can be represented as a sum of two prime numbers. for prime in primes_set: if prime > N: break if (N - prime) in primes_set: return \\"YES\\" return \\"NO\\" def process_input(T, cases): Process the input and return results for each test case. max_value = max(cases) primes = sieve(max_value) primes_set = set(primes) results = [] for N in cases: results.append(can_be_sum_of_two_primes(N, primes_set)) return results # Reading inputs (For testing purpose only - real use should use input()) def read_input(): T = int(input().strip()) cases = [int(input().strip()) for _ in range(T)] return T, cases def main(): T, cases = read_input() results = process_input(T, cases) for result in results: print(result)"},{"question":"In a small town, there is a very popular baker who is famous for his special cakes. Each cake has a scoring system based on the number of layers it contains, where each layer has a distinct score. A customer wants to buy a cake that fits a specific combination of scores. You need to write a program that finds out if it is possible to form a cake of exactly \'K\' layers from a given list of available layer scores such that the sum of scores equals a specified value \'S\'. Each available layer score can only be used once in forming a cake. Input: The first line of input contains two integers \'N\' and \'K\', where \'N\' is the total number of available layers and \'K\' is the number of layers the customer wants in the cake. The second line contains \'N\' integers, the scores of the available layers. The third line contains a single integer \'S\', the desired sum of the scores of the layers in the cake. Output: Print \\"YES\\" if it is possible to form a cake with exactly \'K\' layers with the sum of scores equal to \'S\'. Otherwise, print \\"NO\\". Constraints: 1 ≤ N ≤ 20 1 ≤ K ≤ N 1 ≤ Score of each layer ≤ 100 1 ≤ S ≤ 10^4 SAMPLE INPUT 5 3 10 20 30 40 50 60 SAMPLE OUTPUT YES Explanation: One possible way to form a cake with exactly 3 layers with the sum of scores equal to 60 is by choosing the layers with scores 10, 20, and 30.","solution":"from itertools import combinations def can_form_cake(N, K, layer_scores, S): Determines if it is possible to form a cake with exactly K layers with the sum of scores equal to S. Parameters: N (int): Total number of available layers. K (int): Number of layers the customer wants in the cake. layer_scores (list): List of integers representing the scores of available layers. S (int): Desired sum of the scores of the layers in the cake. Returns: str: \\"YES\\" if it is possible, \\"NO\\" otherwise. # Generate all possible combinations of K layers from the given layer scores for combination in combinations(layer_scores, K): if sum(combination) == S: return \\"YES\\" return \\"NO\\""},{"question":"Palindrome Formation You are given a list of strings and your task is to determine if each string can be rearranged to form a palindrome. A palindrome is a string that reads the same forwards and backwards, such as \\"madam\\" or \\"racecar\\". To form a palindrome, a string must satisfy at most one of the following conditions: 1. All characters appear an even number of times. 2. All characters but one appear an even number of times, and one character appears an odd number of times. Write a program that accepts an integer `n` representing the number of strings, followed by `n` strings. The program should output \\"YES\\" if a string can be rearranged to form a palindrome, and \\"NO\\" otherwise. Input The input consists of a single test case in the following format: ``` n s_1 s_2 ... s_n ``` Here, `n` satisfies `1 <= n <= 1000` and each string `s_i` has a length of at least 1 and at most 100 characters. Each string only contains lowercase English letters (\'a\' to \'z\'). Output For each string, output a single line with \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". Sample Input 1 ``` 3 madam racecar hello ``` Sample Output 1 ``` YES YES NO ``` Sample Input 2 ``` 4 ab aabb abc abcd ``` Sample Output 2 ``` NO YES NO NO ```","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. Args: s (str): The input string. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, else \\"NO\\". from collections import Counter # Count frequency of each character char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if there\'s at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\" def check_palindromes(n, strings): For a given list of strings, determines if each string can be rearranged to form a palindrome and returns the results. Args: n (int): The number of strings. strings (list): The list of strings. Returns: list: A list of results for each string, where each result is \\"YES\\" or \\"NO\\". results = [can_form_palindrome(s) for s in strings] return results"},{"question":"You are an archaeologist who has just discovered an ancient, mysterious artifact hidden within the pyramids of Egypt. As you examine the artifact, you notice that it is covered in hieroglyphs arranged in a unique manner. The hieroglyphs are represented by distinct integers and are arranged in a grid format. To unlock the secrets of the artifact, you need to find specific patterns within the grid. You have an m x n grid of integers where each cell is filled with a hieroglyph. Your task is to find the length of the longest increasing path in this grid. A path is defined as a sequence of cells where each adjacent cell in the path has a value greater than the previous one, and you can move up, down, left, or right (not diagonally) to adjacent cells. Input The first line of the input contains two integers m and n (1 ≤ m, n ≤ 200), the dimensions of the grid. Each of the following m lines contains n integers representing the hieroglyphs in the grid. Output The first line should contain a single integer representing the length of the longest increasing path in the grid. Examples Input 3 3 9 9 4 6 6 8 2 1 1 Output 4 Explanation One of the longest increasing paths is [1, 2, 6, 9]. Input 4 4 3 4 5 2 2 2 3 4 1 1 2 5 9 4 3 8 Output 6 Explanation One of the longest increasing paths is [2, 3, 4, 5, 8, 9]. Note You can move in any of the four directions (up, down, left, right) as long as the value of the next cell is greater than the current cell. The cells must be distinct and connected through valid moves.","solution":"def longestIncreasingPath(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[-1] * n for _ in range(m)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_path = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] > matrix[x][y]: max_path = max(max_path, 1 + dfs(nx, ny)) dp[x][y] = max_path return dp[x][y] longest_path = 0 for i in range(m): for j in range(n): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"Olivia has decided to learn about data manipulation through coding. She is working with sequences of integers and is interested in operations on subarrays to maximize their sums. She needs your help with a specific problem involving consecutive subarrays. Given a sequence of integers, she wants to find the maximum sum of any non-empty consecutive subarray within the sequence. Write a function to compute the maximum sum for any non-empty consecutive subarray. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) - the number of elements in the sequence. The second line contains `n` integers `a[i]` (-10^4 ≤ a[i] ≤ 10^4) - the elements of the sequence. # Output Output a single integer - the maximum sum of any non-empty consecutive subarray. # Examples Example 1 # Input ``` 6 -2 1 -3 4 -1 2 1 -5 4 ``` # Output ``` 6 ``` Explanation: The subarray [4, -1, 2, 1] has the largest sum = 6. Example 2 # Input ``` 5 1 2 3 4 5 ``` # Output ``` 15 ``` Explanation: The entire array [1, 2, 3, 4, 5] has the largest sum = 15. Example 3 # Input ``` 4 -1 -2 -3 -4 ``` # Output ``` -1 ``` Explanation: The subarray [-1] has the largest sum = -1. # Note - The input array may contain both positive and negative integers. - The problem can be solved using Kadane\'s algorithm which efficiently finds the maximum sum of a contiguous subarray in linear time.","solution":"def max_subarray_sum(n, array): Returns the maximum sum of any non-empty consecutive subarray. if n == 0: return 0 # Initialize current max and global max with the first element current_max = global_max = array[0] for i in range(1, n): current_max = max(array[i], current_max + array[i]) if current_max > global_max: global_max = current_max return global_max"},{"question":"Max the Student loves playing with words. He has a particular interest in anagrams - words or phrases formed by rearranging the letters of another. Given a list of words, Max wants to determine how many pairs of words in this list are anagrams of each other. Your task is to write a function that, given a list of words, returns the number of pairs that are anagrams of each other. Two words are considered anagrams if they can be formed by rearranging the same set of letters. Input - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of words. - The next n lines contain one word each. Each word consists of lowercase English letters and has a length between 1 and 100. Output - Print a single integer — the number of pairs of words that are anagrams of each other. Examples Input 5 listen silent enlist google gogole Output 3 Input 4 abc bca cab xyz Output 3 Note In the first example, the pairs of words that are anagrams are: (\\"listen\\", \\"silent\\"), (\\"listen\\", \\"enlist\\"), and (\\"silent\\", \\"enlist\\"). Therefore, the output is 3. In the second example, all words \\"abc\\", \\"bca\\", and \\"cab\\" are anagrams of each other, resulting in 3 pairs: (\\"abc\\", \\"bca\\"), (\\"abc\\", \\"cab\\"), and (\\"bca\\", \\"cab\\"). Hence, the output is 3.","solution":"from collections import defaultdict def count_anagram_pairs(words): Returns the number of pairs of words that are anagrams of each other. :param words: List of input words. :type words: List[str] :return: Number of anagram pairs. :rtype: int # Dictionary to count occurrences of each sorted word anagram_counts = defaultdict(int) # Iterate over each word in the list for word in words: # Sort the word\'s characters to get the canonical form sorted_word = \'\'.join(sorted(word)) # Increment the count of this canonical form anagram_counts[sorted_word] += 1 # Compute the number of anagram pairs from counts pairs = 0 for count in anagram_counts.values(): # If there are `count` words that are anagrams of each other, # the number of unique pairs that can be formed is count choose 2 if count > 1: pairs += count * (count - 1) // 2 return pairs"},{"question":"In a small town, there is an annual treasure hunt event that attracts a lot of participants. Each participant is initially located at the central square, which we refer to as the origin (0, 0), on a 2D grid. Participants can move north, south, east, or west by a certain number of units per move. The treasure hunt event involves tracking the movement of participants and checking their positions at various times. As part of the technical team, your task is to develop a system to manage participants\' movements and report their current positions based on the given instructions. Create a program that processes movement commands for the participants and reports the position of a specific participant upon request. Input The input is given in the following format: N C command1 command2 :: commandC The number of participants N (1 ≤ N ≤ 100000) and the number of instructions C (1 ≤ C ≤ 100000) are given on the first line. Instructions are given line by line for the following C lines. Each instruction is given in the following format: MOVE p d u or REPORT p When the first word is MOVE, it indicates a movement command, where participant p (1 ≤ p ≤ N) moves in direction d (\'N\' for north, \'S\' for south, \'E\' for east, \'W\' for west) by u units (1 ≤ u ≤ 100). When the first word is REPORT, it indicates a reporting command, where the current position of participant p is requested. Output For each report command, output the current position of the participant in the format \\"(x, y)\\" on a new line, where x is the coordinate in the east-west direction and y is the coordinate in the north-south direction. Examples Input 3 6 MOVE 1 N 5 MOVE 2 E 3 REPORT 1 MOVE 1 W 2 REPORT 1 REPORT 2 Output (0, 5) (-2, 5) (3, 0) Input 2 4 MOVE 1 N 10 MOVE 2 S 15 REPORT 1 REPORT 2 Output (0, 10) (0, -15)","solution":"def process_commands(N, C, commands): # Initialize positions for each participant positions = {i: [0, 0] for i in range(1, N+1)} result = [] for command in commands: parts = command.split() # Parsing the command components if parts[0] == \'MOVE\': p = int(parts[1]) d = parts[2] u = int(parts[3]) if d == \'N\': positions[p][1] += u elif d == \'S\': positions[p][1] -= u elif d == \'E\': positions[p][0] += u elif d == \'W\': positions[p][0] -= u elif parts[0] == \'REPORT\': p = int(parts[1]) result.append(f\\"({positions[p][0]}, {positions[p][1]})\\") return result # Example usage N, C = 3, 6 commands = [ \\"MOVE 1 N 5\\", \\"MOVE 2 E 3\\", \\"REPORT 1\\", \\"MOVE 1 W 2\\", \\"REPORT 1\\", \\"REPORT 2\\" ] print(process_commands(N, C, commands)) # Output should be [\'(0, 5)\', \'(-2, 5)\', \'(3, 0)\']"},{"question":"You are given a sequence of integers and a target sum. Your task is to determine whether there are two distinct elements in the sequence whose sum is equal to the target sum. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, |k| ≤ 10^9) — the number of elements in the sequence and the target sum respectively. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the sequence. Output Print \\"YES\\" if there exist two distinct elements in the sequence whose sum is equal to the target sum k. Otherwise, print \\"NO\\". Examples Input 5 9 2 7 11 15 1 Output YES Input 4 8 1 2 3 4 Output NO","solution":"def has_pair_with_sum(sequence, target_sum): Determine whether there are two distinct elements in the sequence whose sum is equal to the target sum. :param sequence: List of integers (the sequence of elements) :param target_sum: Integer (the target sum) :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" seen_numbers = set() for number in sequence: if target_sum - number in seen_numbers: return \\"YES\\" seen_numbers.add(number) return \\"NO\\""},{"question":"Jennifer is a librarian who is arranging books in the library. The library has a single long shelf, and there are books of different heights on the shelf. Jennifer wants to ensure that the shelf looks aesthetically pleasing, so she decides to rearrange the books such that no two adjacent books have the same height. You are given an array of integers representing the heights of the books on the shelf. Write a program to determine whether it is possible to rearrange the books to satisfy Jennifer\'s requirement. If it is possible, return \\"Yes\\", otherwise return \\"No\\". Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of books. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100,000) — the heights of the books. Output Print \\"Yes\\" if it is possible to rearrange the books such that no two adjacent books have the same height. Otherwise, print \\"No\\". Examples Input 5 1 1 2 3 4 Output Yes Input 4 4 4 4 4 Output No Note In the first example, the books can be rearranged as [1, 2, 1, 3, 4] or in several other ways to meet the requirement. In the second example, all the books have the same height, making it impossible to arrange them such that no two adjacent books have the same height.","solution":"def can_rearrange_books(n, heights): from collections import Counter # Get the frequency of each height height_freq = Counter(heights) # Find the maximum frequency of any single height max_freq = max(height_freq.values()) # Check if the maximum frequency is greater than half the number of books if max_freq <= (n + 1) // 2: return \\"Yes\\" else: return \\"No\\""},{"question":"You have been given a list of employees\' work hours for a given week. Each entry in the list represents the hours logged by a single employee on a particular day. You need to write a program that calculates the total number of hours logged by each employee during the week and identifies which employee(s) had the highest total work hours. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of entries. Each of the next n lines contains two values: a string e (1 ≤ len(e) ≤ 50) — the employee\'s name, and an integer h (0 ≤ h ≤ 24) — the number of hours worked by the employee on that day. Output Print the name of the employee(s) with the highest total work hours. If multiple employees log the same highest number of hours, print their names in alphabetical order. Examples Input: 5 Alice 8 Bob 10 Alice 7 Bob 5 Charlie 10 Output: Alice Bob","solution":"def highest_work_hours(n, entries): from collections import defaultdict # Dictionary to keep track of total hours worked by each employee work_hours = defaultdict(int) # Adding up the work hours for each employee for entry in entries: employee, hours = entry work_hours[employee] += hours # Finding the maximum hours worked by any employee max_hours = max(work_hours.values()) # Finding all employees who worked the maximum hours employees_with_max_hours = [name for name, hours in work_hours.items() if hours == max_hours] # Return the names sorted in alphabetical order return sorted(employees_with_max_hours) # Example usage: # entries = [ # (\\"Alice\\", 8), # (\\"Bob\\", 10), # (\\"Alice\\", 7), # (\\"Bob\\", 5), # (\\"Charlie\\", 10) # ] # n = 5 # print(highest_work_hours(n, entries))"},{"question":"Given a list of numbers representing sales revenue for each day over a period of time, write a program that calculates and outputs the highest revenue day, the lowest revenue day, and the average revenue over the entire period. Input The input is given in the following format. n r1 r2 .. .. rn The input consists of n + 1 lines, where the first line gives the integer n (1 ≤ n ≤ 100) representing the number of days, and each of the following n lines contains a single integer ri (0 ≤ ri ≤ 10000) representing the revenue on day i. Output Output three lines as follows: 1. The highest revenue. 2. The lowest revenue. 3. The average revenue rounded down to the nearest integer. Example Input 5 200 500 300 800 100 Output 800 100 380","solution":"def revenue_statistics(n, revenues): Returns the highest revenue day, the lowest revenue day, and the average revenue over the entire period. highest_revenue = max(revenues) lowest_revenue = min(revenues) average_revenue = sum(revenues) // n return highest_revenue, lowest_revenue, average_revenue"},{"question":"In a new phone number system, each phone number is stored as a combination of letters from A to Z. Here\'s how it works: Each letter can represent its position in the alphabet, with A = 1, B = 2, ..., Z = 26. Given a string that represents a phone number in this new system, determine how many valid interpretations of that string exist. A valid interpretation is one in which the string can be divided such that each part corresponds to a valid letter (i.e., a number between 1 and 26 inclusive). For example, consider the string \\"12\\". It can be interpreted as \\"AB\\" (1 2) or \\"L\\" (12). Write a program to calculate the number of valid interpretations of a given string. # Function Signature ``` def count_valid_interpretations(phone_number: str) -> int: ``` # Input - `phone_number` (a string): A string of digits representing the phone number, with a length of 1 to 100. # Output - Return an integer representing the number of valid interpretations of the given phone number. # Constraints - The input string consists only of digits (0-9). - The string has a length between 1 and 100. # Examples Example 1 ``` Input: \\"12\\" Output: 2 Explanation: \\"12\\" can be decoded as \\"AB\\" (1 2) or \\"L\\" (12). ``` Example 2 ``` Input: \\"226\\" Output: 3 Explanation: \\"226\\" can be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). ``` Example 3 ``` Input: \\"0\\" Output: 0 Explanation: \\"0\\" cannot be used to form any letter. ``` Example 4 ``` Input: \\"10\\" Output: 1 Explanation: \\"10\\" can only be decoded as \\"J\\". ``` Example 5 ``` Input: \\"101\\" Output: 1 Explanation: \\"101\\" can only be decoded as \\"JA\\". ```","solution":"def count_valid_interpretations(phone_number: str) -> int: Count the number of valid interpretations of a given phone number string where each digit or pair of digits represents a letter (A-Z corresponding to 1-26). if not phone_number or phone_number[0] == \'0\': return 0 n = len(phone_number) dp = [0] * (n+1) dp[0] = 1 # There\'s always one way to interpret an empty string for i in range(1, n+1): # Single digit; if phone_number[i-1] != \'0\': dp[i] += dp[i-1] # Two digit number; if i > 1 and \'10\' <= phone_number[i-2:i] <= \'26\': dp[i] += dp[i-2] return dp[n] # Example usage print(count_valid_interpretations(\\"12\\")) # Output: 2 print(count_valid_interpretations(\\"226\\")) # Output: 3"},{"question":"You are given a set of \'n\' points in a 2D plane. No three points are collinear. You have to determine the number of unique quadrilaterals that can be formed with these points. Input First line contains the integer \'T\', the number of test cases. This is followed by \'T\' lines with a single integer \'n\' on each line where 4 ≤ n ≤ 50. Output The total number of unique quadrilaterals that can be formed. Example Input: 1 4 Output: 1","solution":"def count_unique_quadrilaterals(n): Returns the number of unique quadrilaterals that can be formed from n points. if n < 4: return 0 return (n * (n - 1) * (n - 2) * (n - 3)) // 24 def process_test_cases(test_cases): Processes multiple test cases for counting unique quadrilaterals. results = [] for n in test_cases: results.append(count_unique_quadrilaterals(n)) return results"},{"question":"You are working on the feature for an online delivery system. It involves processing orders placed by customers and keeping track of the earnings. Each order includes a customer ID, an item price, and the number of items ordered. Your task is to write a function that processes a list of orders and calculates the total earnings for the system. The input will consist of a list of orders, where each order is represented by a list in the format `[customer_id, item_price, number_of_items]`. The function should calculate the total earnings by summing up the product of `item_price` and `number_of_items` for all orders. Input The first line contains an integer t (1 <= t <= 10^5), the number of orders. The next t lines each contain three space-separated integers, representing `customer_id` (1 ≤ customer_id ≤ 10^9), `item_price` (1 ≤ item_price ≤ 10^5), and `number_of_items` (1 ≤ number_of_items ≤ 10^5). Output Print a single integer representing the total earnings from all orders. Example Input: 3 1 100 2 2 200 3 3 150 4 Output: 1400 Explanation The total earnings are calculated as follows: - Order 1: 100 * 2 = 200 - Order 2: 200 * 3 = 600 - Order 3: 150 * 4 = 600 Total earnings: 200 + 600 + 600 = 1400","solution":"def calculate_total_earnings(orders): Calculates the total earnings from a list of orders. Parameters: orders (list of lists): Each order is represented by a list in the format [customer_id, item_price, number_of_items]. Returns: int: Total earnings from all orders. total_earnings = 0 for order in orders: _, item_price, number_of_items = order total_earnings += item_price * number_of_items return total_earnings"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine if the string is a palindrome. Constraints * The length of the string is at most 100,000 characters. * All characters in the string are lowercase English letters. Input Input is given from Standard Input in the following format: s Output Print \\"YES\\" if the string is a palindrome, and \\"NO\\" otherwise. Examples Input racecar Output YES Input hello Output NO Input abba Output YES","solution":"def is_palindrome(s): Checks if the given string s is a palindrome. :param s: Input string consisting of lowercase English letters :return: \\"YES\\" if s is a palindrome, \\"NO\\" otherwise if s == s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Jazz is engrossed in understanding the nuances of string manipulations. He stumbled upon a challenge of finding the longest palindrome within a given string. A palindrome is a string that reads the same backward as it does forward. He aims to identify the longest contiguous substring in the provided string that is a palindrome. Your task is to assist Jazz in writing an algorithm to achieve this. Input The input contains a single line with a string `s` consisting of lowercase English letters (1 <= |s| <= 1000). Output Output the longest palindrome substring of `s`. If there is more than one substring of maximum length, output the one that appears first. Examples Input babad Output bab Input cbbd Output bb Explanation: In the first example, \\"bab\\" is a palindrome and so is \\"aba\\". Since \\"bab\\" appears first, it is selected as the output. In the second example, \\"bb\\" is the longest palindrome substring.","solution":"def longest_palindrome(s): Returns the longest palindromic substring within the provided string s. if s == \\"\\": return \\"\\" n = len(s) start = 0 max_length = 1 for i in range(n): low = i - 1 high = i + 1 while high < n and s[high] == s[i]: high += 1 while low >= 0 and s[low] == s[i]: low -= 1 while low >= 0 and high < n and s[low] == s[high]: low -= 1 high += 1 length = high - low - 1 if length > max_length: max_length = length start = low + 1 return s[start:start + max_length]"},{"question":"Alice is passionate about horticulture and she loves planting trees in her garden. She follows a specific pattern for planting the trees. Alice decides to plant her trees such that each tree\'s height after one year can be predicted using a simple arithmetic progression. The height of the first tree is given, and each subsequent tree has an initial height that is increased by a constant difference. Alice wants to know the height of the tree planted at the `k`-th position in her sequence after one year. Your task is to help Alice by writing a program that calculates the height of the `k`-th tree. # INPUT: - The first line contains an integer `T`, the number of test cases. - Each test case consists of three space-separated integers `a` (the height of the first tree), `d` (the constant difference), and `k` (the position of the tree). # OUTPUT: - For each test case, output the height of the `k`-th tree at the end of one year on a new line. # CONSTRAINTS: 1 ≤ T ≤ 10000 1 ≤ a ≤ 100000 1 ≤ d ≤ 100000 1 ≤ k ≤ 100000 # SAMPLE INPUT: 3 5 3 4 10 2 5 7 1 7 # SAMPLE OUTPUT: 14 18 13","solution":"def tree_heights(test_cases): Returns the height of the k-th tree for each test case. Parameters: test_cases (list of tuples): A list where each tuple contains three integers (a, d, k). Returns: list: A list of integers representing the height of the k-th tree for each test case. results = [] for a, d, k in test_cases: height = a + (k - 1) * d results.append(height) return results"},{"question":"Rohit and his Wooden Blocks Rohit has a collection of wooden blocks arranged in a single row, numbered from 1 to N. He has special instructions to remove some of these wooden blocks based on a list of indices provided to him. When a block at position \'i\' is removed, all blocks to the right of \'i\' slide one position to the left. This process is repeated for each removal in the list. You need to help Rohit determine the sequence of commands he should execute to remove the specified blocks. Each command should be in increasing order indicating the position of the block to remove after each prior removal. Example: Initially, blocks are 1, 2, 3, 4, 5 ... Given the list of indices to be removed: L = [2, 4] 1. Remove block at position 2. 2. After removing block 2, the new sequence is 1, 3, 4, 5, ... 3. The next removal should consider the updated positions, so the block initially at position 4 is now at position 3 in the updated sequence. Constraints: 1 ≤ N ≤ 100000 1 ≤ |L| ≤ min(1000, N) Each element in L is unique and given in random order. Input: First line contains an integer N, the number of wooden blocks arranged in a row. Second line contains an integer M, which is the length of list \'L\' of indices to be removed. Third line contains M integers, the indices to be removed. Output: Print M integers, indicating the sequence of commands to be issued to remove the blocks in the correct order. SAMPLE INPUT 6 2 2 4 SAMPLE OUTPUT 2 3","solution":"def removal_sequence(N, M, L): Returns the correct sequence of commands to remove wooden blocks. Parameters: N (int): Number of wooden blocks. M (int): Number of indices to be removed. L (list of int): Indices of the blocks to be removed. Returns: list of int: Sequence of commands to be issued. L.sort() # Sorting the indices to be removed initially commands = [] # Iterate through each index in the sorted list for i in range(M): command = L[i] - i # Adjust index due to previous removals commands.append(command) return commands"},{"question":"A company has a server that processes tasks one by one from a queue. Each task has a priority level. The server needs to process the tasks but must consider the tasks\' priorities. The priority levels are represented with integers, where a lower integer value means a higher priority. The server processes the highest priority task first and if multiple tasks have the same priority, it processes them in the order they appear in the queue. You are tasked with writing a function that simulates this task processing and returns the order of tasks processed. Input - A single integer `t` (1 ≤ t ≤ 10) — the number of test cases. - For each test case: - A single integer `n` (1 ≤ n ≤ 100) — the number of tasks in the queue. - A list of `n` integers representing the priority levels of the tasks in the order they appear in the queue. Output - For each test case, output a single line representing the order of tasks processed by their indices (1-based). Example Input: 2 4 2 3 1 2 3 3 1 2 Output: 3 1 4 2 2 3 1","solution":"def process_tasks(t, test_cases): Processes tasks based on priority levels and returns the order of tasks processed. Parameters: t (int): Number of test cases. test_cases (list): List of test cases, each containing a tuple (n, priorities) where n is the number of tasks and priorities is a list of priority levels. Returns: list: List of strings, each string representing the order of tasks processed for each test case. results = [] for i in range(t): n, priorities = test_cases[i] indexed_priorities = list(enumerate(priorities, 1)) indexed_priorities.sort(key=lambda x: (x[1], x[0])) order = [idx for idx, _ in indexed_priorities] results.append(\' \'.join(map(str, order))) return results"},{"question":"Emma is organizing a coding competition and wants to provide a set of unique trophies to the top n participants. Each trophy is made up of different types of gems, and the trophies are represented as strings of lowercase English letters, with each letter corresponding to a specific gem type. The beauties of these trophies are evaluated based on their lexicographical order. A trophy string T is said to be \\"increasingly beautiful\\" if every contiguous substring of length 2 or more, starting from the first character to the last character, is in strictly increasing lexicographical order. Emma wants to know the total number of \\"increasingly beautiful\\" trophies she can create using exactly l gems, where each gem type can appear at most once in each trophy. Your task is to help Emma by determining the number of such valid trophy strings. Input The input consists of a single integer l (1 ≤ l ≤ 26) — the length of each trophy string representing the number of gems used. Output Print a single integer — the total number of \\"increasingly beautiful\\" trophies of length l. Examples Input 4 Output 14950 Input 2 Output 325 Input 1 Output 26 Note In the first sample, there are 14950 different ways to create a trophy of length 4 that meets the increasingly beautiful condition. In the second sample, the number of valid trophy strings of length 2 is 325 because each string of two different letters in increasing lexicographical order is valid. In the third sample, any single letter from \'a\' to \'z\' is a valid trophy string.","solution":"from math import comb def count_increasingly_beautiful_trophies(l): Returns the total number of increasingly beautiful trophies of length l. An increasingly beautiful trophy only contains unique characters in strictly lexicographical order. Parameters: l (int): The length of each trophy string representing the number of gems used. Returns: int: Total number of increasingly beautiful trophies of length l. if l < 1 or l > 26: raise ValueError(\\"Length l should be in the range 1 to 26\\") return comb(26, l)"},{"question":"Create a program that simulates a simple bank account system. The system should support the following operations: depositing money, withdrawing money, checking the balance, and transferring money between accounts. The format for inputs will consist of multiple datasets. Each dataset will start with an integer indicating the number of operations to follow, followed by the operations themselves. Each operation is specified by a string indicating the type of operation, and one or two integers indicating the involved amounts or account numbers. Operation formats: - \\"deposit x y\\" - Deposit y units of money into account number x. - \\"withdraw x y\\" - Withdraw y units of money from account number x, if the balance is sufficient. If the balance isn\'t sufficient, the operation is ignored. - \\"balance x\\" - Output the current balance of account number x. - \\"transfer x y z\\" - Transfer z units of money from account number x to account number y, if the balance of account x is sufficient. If the balance isn\'t sufficient, the operation is ignored. All account numbers are positive integers, and the initial balance of all accounts is 0. Input The first line of input will be an integer T (T ≤ 100) representing the number of datasets. Each dataset will start with an integer N (N ≤ 1000) indicating the number of operations to follow. The next N lines in each dataset will contain one operation each, formatted as specified above. Output For each \\"balance x\\" operation, output the current balance of account number x on a new line. Example Input 2 5 deposit 1 1000 balance 1 withdraw 1 500 balance 1 transfer 1 2 300 3 deposit 3 200 withdraw 3 150 balance 3 Output 1000 500 50","solution":"def simulate_bank_account_system(input_data): Simulate the bank account system based on the input data. T = int(input_data[0]) index = 1 results = [] for _ in range(T): N = int(input_data[index]) index += 1 accounts = {} for _ in range(N): operation = input_data[index].split() index += 1 action = operation[0] if action == \\"deposit\\": account, amount = int(operation[1]), int(operation[2]) if account not in accounts: accounts[account] = 0 accounts[account] += amount elif action == \\"withdraw\\": account, amount = int(operation[1]), int(operation[2]) if account in accounts and accounts[account] >= amount: accounts[account] -= amount elif action == \\"balance\\": account = int(operation[1]) balance = accounts.get(account, 0) results.append(balance) elif action == \\"transfer\\": from_account, to_account, amount = int(operation[1]), int(operation[2]), int(operation[3]) if from_account in accounts and accounts[from_account] >= amount: if to_account not in accounts: accounts[to_account] = 0 accounts[from_account] -= amount accounts[to_account] += amount return results # Example usage: # input_data = [ # \\"2\\", # \\"5\\", # \\"deposit 1 1000\\", # \\"balance 1\\", # \\"withdraw 1 500\\", # \\"balance 1\\", # \\"transfer 1 2 300\\", # \\"3\\", # \\"deposit 3 200\\", # \\"withdraw 3 150\\", # \\"balance 3\\" # ] # print(simulate_bank_account_system(input_data)) # Output: [1000, 500, 50]"},{"question":"A company has a distributed system with n servers, and they need to evenly distribute tasks. Each server has a different initial load, which is represented by an integer. The goal is to balance the load across all servers in such a way that the maximum load on any server is minimized. You are given an array of integers where each integer represents the initial load of a server. You can perform the following operation any number of times: 1. Move one task from a server with maximum load to a server with minimum load. Your task is to determine the minimum possible maximum load after performing an optimal sequence of task movements. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of servers. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6) — the initial loads of the servers. Output Output one integer — the minimum possible maximum load after balancing the tasks optimally. Examples Input 4 10 20 30 40 Output 25 Input 3 1 1 1 Output 1 Note In the first example, the initial loads are [10, 20, 30, 40]. One possible way to achieve the optimal distribution is: - Move 10 tasks from server with initial load 40 to server with initial load 10, resulting in [20, 20, 30, 30]. - Move 5 tasks from each of the servers with initial load 30 to any of the servers with initial load 20, resulting in [25, 25, 25, 25]. In the second example, the initial loads are [1, 1, 1]. The loads are already balanced, so the minimum possible maximum load is 1.","solution":"def minimum_possible_max_load(n, loads): # Calculate the total load total_load = sum(loads) # Calculate the minimum possible max load min_max_load = (total_load + n - 1) // n # This is equivalent to ceil(total_load / n) return min_max_load"},{"question":"You are given a rectangular matrix filled with distinct integers, where each row and each column is sorted in ascending order. Your task is to write a program that efficiently finds a given target integer in the matrix. The program should return a tuple of two integers representing the row and column indices of the target integer, respectively (both indices are zero-based). If the target integer is not found, return `(-1, -1)`. # Input - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 1000) — the number of rows and columns of the matrix, respectively. - The following `m` lines each contain `n` integers representing the matrix elements. - The last line contains the integer `target` — the number to search for in the matrix. # Output - If the `target` integer is found, print two integers — the row and column indices of the target integer (both indices are zero-based). - If the `target` integer is not found, print `-1 -1`. # Examples Example 1: Input: ``` 3 3 1 4 7 2 5 8 3 6 9 5 ``` Output: ``` 1 1 ``` Example 2: Input: ``` 4 4 10 20 30 40 15 25 35 45 27 29 37 48 32 33 39 50 100 ``` Output: ``` -1 -1 ``` # Explanation In Example 1: The matrix: ``` 1 4 7 2 5 8 3 6 9 ``` Searching for the target integer `5`, it is found at row 1, column 1. In Example 2: The matrix: ``` 10 20 30 40 15 25 35 45 27 29 37 48 32 33 39 50 ``` Searching for the target integer `100`, it is not present in the matrix, so the program outputs `-1 -1`.","solution":"def search_matrix(matrix, target): if not matrix or not matrix[0]: return -1, -1 rows = len(matrix) cols = len(matrix[0]) # Start from the top-right corner row, col = 0, cols - 1 while row < rows and col >= 0: current = matrix[row][col] if current == target: return row, col elif current > target: col -= 1 # Move left else: row += 1 # Move down # If the target was not found return -1, -1"},{"question":"You are given a series of logarithmic expressions to evaluate. Each expression is of the type: log_a(b) where \'a\' is the base of the logarithm and \'b\' is the argument. Your task is to write a program that takes multiple expressions as input and outputs the values of these logarithms evaluated to a precision of two decimal places. Input The input consists of multiple lines. Each line contains two integers \'a\' and \'b\' separated by a space, which represent the base and the argument of the logarithmic expression respectively. You can assume that 1 < a, b ≤ 1000. The input ends with a line containing two zeros. Output For each logarithmic expression, print a line containing the corresponding value rounded to two decimal places. Example Input 2 8 10 100 5 25 3 9 2 1024 0 0 Output 3.00 2.00 2.00 2.00 10.00","solution":"import math def evaluate_logarithms(expressions): results = [] for a, b in expressions: if a == 0 and b == 0: break value = math.log(b, a) results.append(f\\"{value:.2f}\\") return results # Example usage: input_data = [ (2, 8), (10, 100), (5, 25), (3, 9), (2, 1024), (0, 0) ] output = evaluate_logarithms(input_data) for result in output: print(result)"},{"question":"A group of friends are playing a game where each person takes turns removing stones from a pile. Initially, there are N stones in the pile. On their turn, a person can remove either 1, 2, or 3 stones. The game continues until all stones are removed, and the person forced to take the last stone loses the game. Each player plays optimally, meaning they aim to win the game if it\'s possible on their turn. Write a program that determines whether the starting player can guarantee a win with optimal play, given the initial number of stones in the pile. Input The input consists of a single integer N (1 ≤ N ≤ 100), which represents the initial number of stones in the pile. Output Output \\"Yes\\" if the starting player can guarantee a win, otherwise output \\"No\\". Examples Input 4 Output Yes Input 7 Output Yes Input 5 Output No","solution":"def can_first_player_win(N): Determines if the starting player can guarantee a win with optimal play given N stones. Returns \\"Yes\\" if they can guarantee a win, otherwise \\"No\\". # If N modulo 4 is not 0, the first player can win with optimal moves. return \\"Yes\\" if N % 4 != 0 else \\"No\\""},{"question":"You are given a list of N integers. You want to find the maximum sum of a contiguous subarray. A contiguous subarray is a sequence of elements within the original array that are contiguous and maintain their order from the original array. However, there is a twist: you are allowed to remove at most one element from the subarray you select. This means you can either take a contiguous subarray and find the sum as it is, or remove one element from anywhere within the subarray to potentially maximize the sum. Write a function `maxSumWithOneRemoval(arr)` that takes a list of integers `arr` and returns the maximum sum possible of a contiguous subarray where you can optionally remove one element. Input Format: - The function `maxSumWithOneRemoval` receives a list of integers `arr`. Output Format: - The function should return an integer representing the maximum sum of a contiguous subarray with at most one removal. Constraints: - 1 ≤ len(arr) ≤ 10^5 - -10^4 ≤ arr[i] ≤ 10^4 Sample Input: [1, -2, 0, 3] [1, -2, -2, 3, -1] [-1, -1, -1, -1] Sample Output: 4 3 -1 Explanation: 1st test case: If we remove -2, we get a subarray [1, 0, 3] with the sum = 4. 2nd test case: If we remove -2, we get a subarray [1, -2, 3] or [1, -2, -2, 3] with the sum = 3. 3rd test case: We can either take any -1 or remove one -1 to still end up with sum -1.","solution":"def maxSumWithOneRemoval(arr): n = len(arr) if n == 1: return arr[0] # Initialize dp arrays max_end_here = [0] * n max_start_here = [0] * n # Fill max_end_here: max subarray sum ending at i max_end_here[0] = arr[0] for i in range(1, n): max_end_here[i] = max(arr[i], max_end_here[i-1] + arr[i]) # Fill max_start_here: max subarray sum starting at i max_start_here[n-1] = arr[n-1] for i in range(n-2, -1, -1): max_start_here[i] = max(arr[i], max_start_here[i+1] + arr[i]) # Consider the maximum sum subarray without removal max_sum = max(max_end_here) # Consider the maximum sum subarray with one removal for i in range(1, n-1): max_sum = max(max_sum, max_end_here[i-1] + max_start_here[i+1]) return max_sum"},{"question":"Olga, a detective in the fictional city of Numerica, is investigating a complex case involving encrypted messages. Each message is a sequence of lowercase letters that appears to be a jumble of words and phrases. To decrypt the message, Olga has to find the longest substring in which no character appears more than once. For example, in the message \\"abcabcbb\\", the longest substring without repeating characters is \\"abc\\", which is of length 3. Similarly, in the message \\"bbbbb\\", the longest substring without repeating characters is \\"b\\", which is of length 1. Write a program that, given a string, finds the length of the longest substring without repeating characters. Input The input consists of a single string s, where 1 ≤ |s| ≤ 10^6. Output Print a single integer — the length of the longest substring without repeating characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 Note In the first example, the input string \\"abcabcbb\\" has several substrings without repeating characters. The longest substring is \\"abc\\", which has a length of 3. In the second example, the input string \\"bbbbb\\" has all identical characters. The longest substring without repeating characters is \\"b\\", which has a length of 1. In the third example, the input string \\"pwwkew\\" has a longest substring \\"wke\\" with no repeating characters, having a length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s: str) -> int: Function to find the length of the longest substring without repeating characters. :param s: Input string :return: Length of the longest substring without repeating characters char_set = set() left = 0 result = 0 for right in range(len(s)): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) result = max(result, right - left + 1) return result"},{"question":"In a small amusement park, there is a ride with \\"magical\\" seats giving out candies. The seats are arranged in a circle, each seat having a certain number of candies. Every child that starts at a given seat i can collect candies by jumping to the next seat in a clockwise direction until they reach the starting seat again. When a child jumps from seat i to i+1, they collect the candies of the current seat i. Each child can start at any seat and must visit all seats exactly once to collect candies. The goal is to find the maximum number of candies a child can collect starting from any seat. You are given a list with the number of candies at each seat. Write a function `maxCandies(candies)` to determine the maximum number of candies collectible starting from any seat. # Input - `candies`: a list of integers where `candies[i]` represents the number of candies at the i<sup>th</sup> seat. (2 ≤ len(candies) ≤ 25, 0 ≤ candies[i] ≤ 50,000) # Output - Return an integer representing the maximum number of candies collectible starting from any seat. # Examples Example 1: Input: ``` candies = [1, 2, 3] ``` Output: ``` 6 ``` Explanation: Starting from seat 1: 1 + 2 + 3 = 6 Starting from seat 2: 2 + 3 + 1 = 6 Starting from seat 3: 3 + 1 + 2 = 6 All starting seats result in collecting 6 candies. Example 2: Input: ``` candies = [5, 6, 7, 8] ``` Output: ``` 26 ``` Explanation: Starting from seat 1: 5 + 6 + 7 + 8 = 26 Starting from seat 2: 6 + 7 + 8 + 5 = 26 Starting from seat 3: 7 + 8 + 5 + 6 = 26 Starting from seat 4: 8 + 5 + 6 + 7 = 26 All starting seats result in collecting 26 candies. # Note You are guaranteed to have at least two seats in the circle and each seat has a non-negative integer number of candies.","solution":"def maxCandies(candies): Returns the maximum number of candies collectible starting from any seat. :param candies: A list of integers representing the number of candies at each seat. :return: An integer representing the maximum number of candies collectible. return sum(candies)"},{"question":"A software company is developing a new feature for a text editor where it automatically formats lists. They want to ensure each list is well-formed. In this context, a well-formed list is defined as: 1. Each item in the list starts with a hyphen (\\"-\\") followed by exactly one space and then the content. 2. Between any two adjacent items, there is exactly one newline character. Write a function to determine if a given input string is a well-formed list per the above definition. Input: - An integer T denoting the number of input test cases. - T lines follow, each containing one string to be checked. Output: - For each test case, output \\"YES\\" if the string is a well-formed list, or \\"NO\\" otherwise. Constraints: - 1 ≤ T ≤ 100 - Each input string will have a length between 1 and 10^4 characters. - Each input string will consist of printable ASCII characters only. SAMPLE INPUT 4 - Item1n- Item2n- Item3 - Item1 - Item2n-Item3 - Item1nn- Item2n-Item3 - Item1n - Item2n- Item3 SAMPLE OUTPUT YES NO NO NO Explanation In the first case, the input string \\"- Item1n- Item2n- Item3\\" follows the well-formed list rules. Therefore, the output is \\"YES\\". In the second case, the input string \\"- Item1 - Item2n- Item3\\" does not follow the well-formed list rules because the second item does not start on a new line and is not preceded by a newline character. Therefore, the output is \\"NO\\". In the third case, the input string \\"- Item1nn- Item2n- Item3\\" contains double newline characters, which violates the condition that there should be exactly one newline character between any two items. Therefore, the output is \\"NO\\". In the fourth case, the input string \\"- Item1n - Item2n- Item3\\" has an extra space before \\"- Item2\\", making it not conform to the required format. Therefore, the output is \\"NO\\".","solution":"def is_well_formed_list(s): Determines if a given input string is a well-formed list. :param s: Input string to be checked. :return: \\"YES\\" if the string is a well-formed list, or \\"NO\\" otherwise. items = s.split(\\"n\\") for item in items: if not item.startswith(\\"- \\"): return \\"NO\\" if item.count(\\"- \\") > 1: return \\"NO\\" return \\"YES\\" def process_input(T, lines): Processes the input lines and gives YES/NO for each one based on the well-formed list criteria. :param T: Number of test cases. :param lines: List of strings to be checked. :return: List of results for each input string. results = [] for i in range(T): results.append(is_well_formed_list(lines[i])) return results"},{"question":"Write a program that processes a list of student records. Each record contains a student\'s name, and three scores obtained in three different exams. The program should compute the average score for each student and print the students\' names along with their average scores, ordered by name in alphabetical order. A student\'s name consists of at most 50 characters, and the scores are integers between 0 and 100 inclusive. The number of student records is less than or equal to 100. # Input The input is a list of lines, each containing a student\'s name followed by three scores, separated by spaces. # Output The output should contain the students\' names and their average scores, each on a new line. The names should be in alphabetical order, and the average scores should be displayed with two decimal places. # Example Input ``` Alice 80 70 90 Bob 85 88 90 Charlie 70 75 80 Zoe 65 70 75 Dave 78 82 85 ``` Output ``` Alice 80.00 Bob 87.67 Charlie 75.00 Dave 81.67 Zoe 70.00 ```","solution":"def process_student_records(records): Processes a list of student records, computes their average scores, and returns a list of tuples containing student names and their average scores, sorted by student names in alphabetical order. Args: records (list): List of strings, each containing a student\'s name followed by three scores separated by spaces. Returns: list: A list of tuples, each containing a student\'s name and their average score rounded to two decimal places, sorted by student names in alphabetical order. student_averages = [] for record in records: parts = record.split() name = \\" \\".join(parts[:-3]) scores = list(map(int, parts[-3:])) average_score = sum(scores) / 3 student_averages.append((name, average_score)) student_averages.sort(key=lambda x: x[0]) return student_averages def format_student_averages(student_averages): Takes a list of student averages and formats them as strings with two decimal places. Args: student_averages (list): List of tuples containing student names and their average scores. Returns: list: A list of strings containing student names and their average scores with two decimal places. return [f\\"{name} {average:.2f}\\" for name, average in student_averages]"},{"question":"You are provided with an n x n matrix filled with unique integers from 1 to n^2 arranged in some order. The task is to rotate the matrix 90 degrees clockwise k times. Here, k is an integer (0 ≤ k ≤ 10^9). Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains two integers n (1 ≤ n ≤ 100) and k. - The next n lines contain n integers each, representing the matrix. Output For each test case, output the resulting matrix after performing k rotations. Each matrix should be printed after a blank line. Example Input 3 3 1 1 2 3 4 5 6 7 8 9 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 2 999999999 1 2 3 4 Output 7 4 1 8 5 2 9 6 3 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 3 1 4 2","solution":"def rotate_matrix_90_clockwise(matrix): Rotate the given n x n matrix 90 degrees clockwise. n = len(matrix) new_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): new_matrix[j][n - i - 1] = matrix[i][j] return new_matrix def rotate_matrix_k_times(matrix, k): Rotate the given n x n matrix k times 90 degrees clockwise. k = k % 4 # Since rotating 4 times results in the same matrix for _ in range(k): matrix = rotate_matrix_90_clockwise(matrix) return matrix def process_test_case(n, k, matrix): Process a single test case and return the resulting matrix after k rotations. return rotate_matrix_k_times(matrix, k)"},{"question":"You are given an ( n times n ) grid where each cell contains a positive integer. Two players alternately take turns. On each turn, a player selects a subgrid of the original grid, calculates the sum of all the integers in that subgrid, and then removes one row or one column from that subgrid before passing the remaining subgrid to the other player. The player who is forced to pass a subgrid of size ( 1 times 1 ) to the other player loses the game. Determine who has a winning strategy, assuming both players play optimally. The first player to move is Player 1. **Input:** - The first line of input contains an integer ( n ) ((1 leq n leq 100)): the size of the grid. - Each of the next ( n ) lines contains ( n ) space-separated integers ((1 leq a_{i,j} leq 10^6)): the elements of the grid. **Output:** - Print \\"Player 1\\" if Player 1 has a winning strategy, otherwise print \\"Player 2\\". Example: **Input:** ``` 3 1 2 3 4 5 6 7 8 9 ``` **Output:** ``` Player 2 ``` Explanation: With the grid given in the input, if Player 1 tries to make any move, Player 2 can always ensure that Player 1 will be forced to hand over a ( 1 times 1 ) grid to Player 2 on their subsequent turn, meaning Player 2 wins the game.","solution":"def determine_winner(n, grid): Determine the winner assuming both players play optimally. Args: - n: integer, size of the grid. - grid: list of lists, the n x n grid of integers. Returns: - \\"Player 1\\" if Player 1 has a winning strategy, otherwise \\"Player 2\\". # A 1x1 grid means Player 2 automatically loses, so we check grid size: # The key insight is that if n is odd, Player 1 can force the game into an odd-sized grid each turn, leading # to a situation where Player 1 can handover the final 1x1 grid to Player 2. If n is even, the reverse happens. if n % 2 == 1: return \\"Player 1\\" else: return \\"Player 2\\""},{"question":"A message needs to be sent through a network of computers connected by bidirectional cables. The network is represented as an undirected graph consisting of N computers numbered from 1 to N and M cables between them. Each cable has a latency, given as an integer, representing the time it takes to send the message through that cable. You are to find the minimum time it takes for the message to travel from computer 1 to computer N. Constraints: * 2 leq N leq 10^5 * 1 leq M leq 2 times 10^5 * The latency of each cable is between 1 and 10^4. Input The input is given from standard input in the following format: N M a_1 b_1 l_1 a_2 b_2 l_2 ... a_M b_M l_M Each cable is described by three integers a_i, b_i, and l_i (1 leq a_i, b_i leq N, 1 leq l_i leq 10^4), where a_i and b_i are the two computers connected by the i-th cable and l_i is the latency of that cable. Output Output the minimum time it takes for the message to travel from computer 1 to computer N. If computer N is not reachable from computer 1, return -1. Examples Input 4 4 1 2 1 2 3 2 3 4 1 1 4 4 Output 4 Input 3 2 1 2 1 2 3 2 Output 3 Input 5 3 1 2 1 1 3 2 4 5 1 Output -1","solution":"import heapq import sys def minimum_travel_time(n, m, edges): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s Algorithm def dijkstra(start, end): min_heap = [(0, start)] distances = [sys.maxsize] * (n + 1) distances[start] = 0 while min_heap: current_distance, u = heapq.heappop(min_heap) if u == end: return current_distance if current_distance > distances[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(min_heap, (distance, v)) return -1 return dijkstra(1, n)"},{"question":"Maurice loves prime numbers. He came up with a function f(x) which is defined as the sum of all positive integers less than or equal to x. However, Maurice only wants the sum to include prime numbers. Your task is to help Maurice find the sum f(x) for a given integer x. # Input - The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. - Each of the next t lines contains a single integer x (1 ≤ x ≤ 200). # Output For each test case, print the value of f(x) on a new line. # Examples Input ``` 3 10 20 5 ``` Output ``` 17 77 10 ``` # Note In the first example, the prime numbers less than or equal to 10 are {2, 3, 5, 7}, and their sum is 2 + 3 + 5 + 7 = 17. In the second example, the prime numbers less than or equal to 20 are {2, 3, 5, 7, 11, 13, 17, 19}, and their sum is 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 = 77. In the third example, the prime numbers less than or equal to 5 are {2, 3, 5}, and their sum is 2 + 3 + 5 = 10.","solution":"def is_prime(n): Returns True if the number is prime, False otherwise. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_sum(x): Computes the sum of all prime numbers less than or equal to x. return sum(num for num in range(2, x + 1) if is_prime(num)) def solve_primes(t, cases): results = [] for x in cases: results.append(prime_sum(x)) return results"},{"question":"You are given a list of integers. For each integer in the list, find the minimum number of steps required to reduce the number to 1. In one step, you can perform any one of the following operations: 1. If the number is even, divide it by 2. 2. If the number is odd, either add 1 or subtract 1. Write a function that, given a list of integers, returns a list of integers representing the minimum number of steps for each input integer. Input - The first line contains an integer, T, which is the number of test cases. - The second line contains T integers, each representing a test case. Output For each test case, return the minimum number of steps required to reduce the number to 1. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 Example Input: 3 3 10 25 Output: 2 4 6 Explanation: - For 3: 3 -> 4 -> 2 -> 1 (Steps: 2) - For 10: 10 -> 5 -> 4 -> 2 -> 1 (Steps: 4) - For 25: 25 -> 24 -> 12 -> 6 -> 3 -> 4 -> 2 -> 1 (Steps: 6)","solution":"def min_steps_to_one(n): Returns the minimum number of steps required to reduce the number n to 1. memo = {1: 0} # Base case: 1 takes 0 steps to become 1 def helper(x): if x in memo: return memo[x] if x % 2 == 0: memo[x] = 1 + helper(x // 2) else: memo[x] = 1 + min(helper(x - 1), helper(x + 1)) return memo[x] return helper(n) def min_steps_for_list(nums): For each integer in the list, returns the minimum number of steps required to reduce the number to 1. return [min_steps_to_one(num) for num in nums]"},{"question":"Problem: You have been tasked with developing a simplified navigation system for a small robot. The robot is placed on a grid, where each cell in the grid can either be free (represented by \'.\') or blocked (represented by \'#\'). The robot can move up, down, left, or right by one cell at a time but cannot move diagonally. Given a starting position and a target position, your goal is to write a function that determines the minimal number of moves required for the robot to reach the target. If the target is not reachable, the function should return -1. The starting and target positions are guaranteed to be within the bounds of the grid and not occupy blocked cells. **Input** - The first line contains two integers, `N` and `M` (2 ≤ N, M ≤ 1000), representing the number of rows and columns in the grid, respectively. - The next N lines each contain a string of length M consisting of characters \'.\' and \'#\'. - The following line contains two integers `sx` and `sy` (0 ≤ sx < N, 0 ≤ sy < M), representing the starting position of the robot. - The last line contains two integers `tx` and `ty` (0 ≤ tx < N, 0 ≤ ty < M), representing the target position of the robot. **Output** - An integer representing the minimal number of moves required to reach the target, or -1 if the target is not reachable. **Example** Input ``` 5 6 .... .#..#. .#..#. ..#. ...... 0 0 4 5 ``` Output ``` 9 ``` Explanation: The robot starts at position (0, 0) and the target is at position (4, 5). One possible shortest path is: right -> right -> down -> down -> left -> left -> down -> down -> right -> right -> right. This takes 9 moves. **Constraints:** - The grid dimensions N and M do not exceed 1000. - The grid is guaranteed to contain at least one valid path if a path exists.","solution":"from collections import deque def min_moves_to_target(grid, start, target): Returns the minimal number of moves required for the robot to reach the target. Parameters: - grid: List[List[str]] : 2D list representing the grid - start: Tuple[int, int] : Starting position as (sx, sy) - target: Tuple[int, int] : Target position as (tx, ty) Returns: - int : Minimal number of moves or -1 if target is not reachable N = len(grid) M = len(grid[0]) sx, sy = start tx, ty = target if start == target: return 0 # Directions vectors for up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([(sx, sy, 0)]) # (current_x, current_y, current_distance) visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: if (nx, ny) == target: return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Input The input contains a single integer n (1 ≤ n ≤ 100000). Output Print \\"YES\\" if the binary representation of n contains consecutive 1s, otherwise print \\"NO\\". Examples Input 5 Output NO Input 7 Output YES Input 12 Output YES Input 8 Output NO","solution":"def has_consecutive_ones(n): Returns \\"YES\\" if the binary representation of n contains consecutive 1s, otherwise returns \\"NO\\". binary_representation = bin(n)[2:] if \'11\' in binary_representation: return \\"YES\\" return \\"NO\\""},{"question":"In a faraway kingdom, there is a game played with magical stones. Each magical stone has a unique power value associated with it. When two stones are combined, they can create a new stone with a power value that is the sum of the two original stones\' power values. However, there\'s a twist: only stones with power values that are not prime numbers can be combined. Your task is to find the minimum possible power value of a combined stone that can be created from a given set of stones. Input The input starts with an integer T (1 ≤ T ≤ 20), the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 100), the number of stones. The next line contains N positive integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^3), which represent the power values of the stones. Output For each test case, output a single line containing the minimum possible power value of a combined stone that can be created. If no combination is possible, output \\"IMPOSSIBLE\\". Example: Input 2 3 4 6 10 4 7 11 13 17 Output 10 IMPOSSIBLE Explanation In the first test case, the stones have power values 4, 6, and 10. The only combination possible is between the stones with power values 4 and 6 (both non-prime), resulting in a new stone with power value 10. Since there are no other combinations, the minimum possible power value is 10. In the second test case, all given stones have prime power values, thus no combination is possible, and the output is \\"IMPOSSIBLE\\".","solution":"import math def is_prime(n): Returns True if n is a prime number, False otherwise if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def min_combination_power_value(stones): Returns the minimum possible power value of a combined stone, or \\"IMPOSSIBLE\\" if no valid combination exists. non_prime_stones = [stone for stone in stones if not is_prime(stone)] if len(non_prime_stones) < 2: return \\"IMPOSSIBLE\\" non_prime_stones.sort() return non_prime_stones[0] + non_prime_stones[1] def solve(test_cases): results = [] for stones in test_cases: results.append(min_combination_power_value(stones)) return results # Parsing input and calling solve: def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) stones = list(map(int, input_lines[index + 1].split())) test_cases.append(stones) index += 2 return solve(test_cases)"},{"question":"You are given an integer array `nums` and an integer `k`. Your task is to find the maximum number of distinct elements that can be selected from the array such that the sum of all selected elements is less than or equal to `k`. Write a function: ```python def maxDistinctElements(nums: List[int], k: int) -> int: ``` **Input:** - `nums`: A list of integers representing the array. - `k`: An integer representing the maximum allowable sum. **Output:** - Return an integer representing the maximum number of distinct elements that can be selected. **Example:** ```python print(maxDistinctElements([1, 2, 3, 4, 5], 10)) # Output: 4 print(maxDistinctElements([5, 5, 5, 5, 5], 5)) # Output: 1 print(maxDistinctElements([7, 3, 6, 8, 2], 15)) # Output: 3 ``` **Constraints:** - 1 ≤ nums.length ≤ 1000 - 1 ≤ nums[i] ≤ 1000 - 1 ≤ k ≤ 1000","solution":"from typing import List def maxDistinctElements(nums: List[int], k: int) -> int: distinct_nums = sorted(set(nums)) sum_so_far = 0 count = 0 for num in distinct_nums: if sum_so_far + num <= k: sum_so_far += num count += 1 else: break return count"},{"question":"Write a program that takes an integer `k` as input and calculates the smallest number `n` such that the sum of the digits of `n` is equal to `k`. Each digit in `n` should be a non-negative integer, and the leading digit should not be zero (unless `n` itself is 0). The value of `n` should be the smallest possible number with respect to its numerical value. For example, if `k = 5`, the smallest number `n` such that the sum of the digits equals 5 is 5. If `k = 20`, the smallest number `n` with the sum of its digits equal to 20 is 299. Input: The input consists of multiple datasets, each consisting of a single integer `k`. The last dataset is indicated by a `-1`. - For each dataset, 0 ≤ k ≤ 1000. Output: For each dataset, output the smallest number `n` whose digits sum up to `k`. Example: Input: ``` 5 20 15 3 0 -1 ``` Output: ``` 5 299 69 3 0 ```","solution":"def smallest_number_with_digit_sum(k): Returns the smallest number whose digits sum up to k. Parameters: k (int): Target sum of digits Returns: int: The smallest number whose digits sum up to k if k == 0: return 0 digits = [] while k > 0: digit = min(k, 9) digits.append(digit) k -= digit digits.reverse() return int(\'\'.join(map(str, digits))) def process_inputs(inputs): results = [] for k in inputs: if k != -1: results.append(smallest_number_with_digit_sum(k)) return results"},{"question":"Peter is fond of magic squares. A magic square is a grid where the sum of elements in each row, each column, and the two diagonals are equal. Peter has a special 3x3 magic square where the numbers 1 to 9 are used exactly once. However, some digits have been erased from the magic square. Can you help Peter reconstruct the original magic square? Input: The input consists of three lines, each containing three integers. The integers represent the partially filled 3x3 magic square. Empty cells are denoted by 0 (zero). Output: If there is exactly one way to reconstruct the magic square, print three lines, each containing three integers, representing the completed magic square. If there is no way or more than one way to complete the magic square, print -1. Example: Input: 8 0 0 0 5 0 0 0 2 Output: 8 1 6 3 5 7 4 9 2 Explanation: The completed magic square is: ``` 8 1 6 3 5 7 4 9 2 ```","solution":"import itertools def is_magic(square): magic_sum = 15 # Every row, column, and diagonal must sum to 15 in a 3x3 magic square where numbers 1-9 are used. rows = square cols = [[square[row][col] for row in range(3)] for col in range(3)] diags = [[square[i][i] for i in range(3)], [square[i][2-i] for i in range(3)]] for line in rows + cols + diags: if sum(line) != magic_sum: return False return True def reconstruct_magic_square(square): # All potential valid numbers for magic square possible_numbers = set(range(1, 10)) # Determine which numbers are missing missing_numbers = possible_numbers - set([num for row in square for num in row if num != 0]) # Determine the positions of the missing numbers empty_positions = [(i, j) for i in range(3) for j in range(3) if square[i][j] == 0] # Try all permutations of the missing numbers in the empty positions for combo in itertools.permutations(missing_numbers): temp_square = [row[:] for row in square] for (i, j), num in zip(empty_positions, combo): temp_square[i][j] = num if is_magic(temp_square): return temp_square return -1"},{"question":"Given an array of unique integers representing the heights of trees in a forest, your task is to determine the maximum number of trees you can cut down such that the remaining trees form a sequence of strictly increasing heights. For example, if the array is [3, 2, 5, 1, 7, 4, 8], you can cut down the trees with heights 3, 2, and 4 to form the increasing sequence [1, 5, 7, 8]. Input The first line contains the integer n (1 ≤ n ≤ 100000) — the number of trees in the forest. The second line contains the sequence of unique integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) representing the heights of the trees. Output Print the maximum number of trees that can be cut down to achieve a strictly increasing sequence of tree heights. Examples Input 7 3 2 5 1 7 4 8 Output 3 Input 5 10 20 30 40 50 Output 0 Input 6 9 7 5 3 2 1 Output 5 Note In the first example, after cutting down trees with heights 3, 2, and 4, the remaining heights are [1, 5, 7, 8], which is strictly increasing. In the second example, the heights are already in a strictly increasing sequence, so no trees need to be cut down. In the third example, the optimal solution is to cut down 5 trees to leave only one tree with the smallest height 1. The sequence with a single element is trivially strictly increasing.","solution":"def max_trees_to_cut(heights): Returns the maximum number of trees to cut down to make the remaining tree heights form a strictly increasing sequence. from bisect import bisect_left def lis_length(seq): Returns the length of the longest increasing subsequence if not seq: return 0 lis = [] for elem in seq: pos = bisect_left(lis, elem) if pos == len(lis): lis.append(elem) else: lis[pos] = elem return len(lis) n = len(heights) longest_increasing_seq_len = lis_length(heights) return n - longest_increasing_seq_len # Example usage n = 7 heights = [3, 2, 5, 1, 7, 4, 8] print(max_trees_to_cut(heights)) # Output: 3"},{"question":"Bobby is organizing a secret Santa event at his workplace. He wants to ensure that each employee gets exactly one gift while following certain rules: 1. Each employee must give exactly one gift to another employee. 2. No employee can give a gift to themselves. 3. Each employee can receive only one gift. The task is to determine if it\'s possible to organize the event so that all the above rules are satisfied. For example: Let\'s say there are 4 employees. The possible assignment could be: - Employee 1 gives a gift to Employee 2 - Employee 2 gives a gift to Employee 3 - Employee 3 gives a gift to Employee 4 - Employee 4 gives a gift to Employee 1 This ensures each employee gets exactly one gift and no one gives a gift to themselves. [Input] First line of the input contains integer t representing the number of test cases. Next t lines each contain an integer n representing the number of employees. [Output] For each test case, output \\"Possible\\" if the secret Santa can be organized according to the rules, otherwise output \\"Not Possible\\". [Constraints] 1 ≤ t ≤ 100000 1 ≤ n ≤ 100000 Note: Use printf / scanf instead of cin and cout. SAMPLE INPUT 2 4 3 SAMPLE OUTPUT Possible Not Possible","solution":"def is_secret_santa_possible(num_employees): # A valid Secret Santa arrangement is possible if num_employees is greater than 1 # since no one can gift to themselves and everyone needs to gift exactly once. return \\"Possible\\" if num_employees > 1 else \\"Not Possible\\" def process_test_cases(test_cases): results = [] for n in test_cases: results.append(is_secret_santa_possible(n)) return results def read_input(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) test_cases = list(map(int, data[1:t+1])) return t, test_cases def main(): t, test_cases = read_input() results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are tasked with developing a seating arrangement algorithm for a circular dining table at a party. Each guest has a preference for who they would like to sit next to and who they do not want to sit next to. Given these preferences, your algorithm should determine if it\'s possible to arrange the guests in such a way that all preferences are satisfied. Input The input consists of multiple datasets. Each dataset is formatted as follows: N P A Preference1 Preference2 ... PreferenceP Here, N is a positive integer that indicates the number of guests at the party (N ≤ 15), P is a positive integer that indicates the number of preferences (P ≤ 50), and A is the acquaintance threshold (A ≤ P). Each Preferencei is described by three components: G1 G2 Sign Here, G1 and G2 are the guest numbers (1 ≤ G1, G2 ≤ N), and Sign is either \'+\' or \'-\'. \'+\' indicates that G1 and G2 wish to sit next to each other, and \'-\' indicates that G1 and G2 do not wish to sit next to each other. All guests are initially labeled with unique numbers from 1 to N. The input is terminated by a dataset of N = 0, and it should not be processed. Output For each dataset, output \\"YES\\" if it is possible to arrange the guests such that at least A preferences are satisfied; otherwise, output \\"NO\\". Example Input 4 4 3 1 2 + 2 3 + 3 4 + 4 1 - 4 3 1 2 + 2 3 + 3 4 - 4 1 - 0 Output YES NO","solution":"from itertools import permutations def is_valid_arrangement(arrangement, preferences, A): n = len(arrangement) satisfaction_count = 0 for g1, g2, sign in preferences: g1_index = arrangement.index(g1) g2_index = arrangement.index(g2) g1_next = arrangement[(g1_index + 1) % n] g1_prev = arrangement[(g1_index - 1) % n] if sign == \'+\': if g1_next == g2 or g1_prev == g2: satisfaction_count += 1 elif sign == \'-\': if g1_next != g2 and g1_prev != g2: satisfaction_count += 1 return satisfaction_count >= A def can_seat_guests(num_guests, preferences, acquaintance_threshold): guests = list(range(1, num_guests + 1)) for perm in permutations(guests): if is_valid_arrangement(perm, preferences, acquaintance_threshold): return True return False def process_input(input_data): results = [] for dataset in input_data: N, P, A = dataset[0] if N == 0: break preferences = dataset[1:] if can_seat_guests(N, preferences, A): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Sara is organizing a charity run on a circular track. The track is divided into n equal segments and there are k water stations placed at various segments along the track to provide water to the runners. Each water station has a radius of influence r, meaning it can provide water to the segments up to a distance of r in both clockwise and counterclockwise directions. Sara needs to find out the minimum radius of influence r that is required so that every segment of the track has access to at least one water station. Input The first line contains two integers n, k (1 ≤ k ≤ n ≤ 1000) — the number of segments and the number of water stations, respectively. The second line contains k distinct integers s_i (0 ≤ s_i < n) — the segment indices where the water stations are placed. Output Print the minimum radius of influence r required to ensure all segments have access to water. The answer should be accurate up to 9 decimal places. Examples Input 8 3 1 4 7 Output 1.5000000000 Input 12 3 0 4 8 Output 2.0000000000 Note Consider the first sample. With r = 1.5, the first water station can provide water to segments {0, 1, 2, 7}, the second one to segments {2, 3, 4, 5}, and the third one to segments {5, 6, 7}. Therefore, all segments have access to water.","solution":"def min_radius_of_influence(n, k, stations): stations.sort() max_gap = 0 for i in range(k-1): max_gap = max(max_gap, stations[i+1] - stations[i]) max_gap = max(max_gap, n - stations[-1] + stations[0]) return max_gap / 2.0 # Example usage n = 8 k = 3 stations = [1, 4, 7] print(f\\"{min_radius_of_influence(n, k, stations):.9f}\\") # Output: 1.5000000000 n = 12 k = 3 stations = [0, 4, 8] print(f\\"{min_radius_of_influence(n, k, stations):.9f}\\") # Output: 2.0000000000"},{"question":"Given a string `S`, determine if `S` is a palindrome, ignoring non-alphanumeric characters and case differences. A palindrome is a string that reads the same backward as forward after removing all non-alphanumeric characters and ignoring case differences. Constraints * The length of S is between 1 and 50 (inclusive). * S is a string consisting of printable ASCII characters. Input Input is given from Standard Input in the following format: ``` S ``` Output If `S` is a palindrome as per the described rules, print `True`; otherwise, print `False`. Examples Input ``` A man, a plan, a canal: Panama ``` Output ``` True ``` Input ``` race a car ``` Output ``` False ``` Input ``` aba ``` Output ``` True ```","solution":"def is_palindrome(S): Returns True if S is a palindrome, ignoring non-alphanumeric characters and case differences; otherwise, returns False. Parameters: S (str): The input string Returns: bool: True if S is a palindrome, False otherwise # Remove non-alphanumeric characters and convert to lowercase cleaned_S = \'\'.join(char.lower() for char in S if char.isalnum()) # Check if the cleaned string is a palindrome return cleaned_S == cleaned_S[::-1]"},{"question":"In a kingdom far away, there lived a wise ruler who had a peculiar way of assigning tasks to his knights. Each knight was given a unique item to track their progress on missions. These items were magical grids where certain cells indicated completed missions. The task for each knight was to determine how many of these cells formed a fully enclosed, connected territory of completed missions. A fully enclosed territory is defined as a set of connected cells (\'1\') surrounded by cells that are either empty (\'0\') or outside the grid boundaries. Two cells are considered connected if they share a common edge. Your task is to write a program that counts the number of fully enclosed territories of completed missions in the given grid. Input The input consists of several test cases. Each test case begins with two integers m and n (1 ≤ m, n ≤ 100), representing the number of rows and columns of the grid, respectively. Following this, there are m lines of n characters each, where \'1\' indicates a completed mission and \'0\' indicates an empty cell. The end of input is marked by a line containing \\"0 0\\". Output For each test case, output the number of fully enclosed territories of completed missions in one line. Example Input 5 5 11110 10010 10010 10000 11111 5 5 11000 11000 00100 00011 00011 0 0 Output 1 3","solution":"def num_enclosed_territories(m, n, grid): def flood_fill(i, j): if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == \'0\': return grid[i][j] = \'0\' flood_fill(i + 1, j) flood_fill(i - 1, j) flood_fill(i, j + 1) flood_fill(i, j - 1) def is_enclosed(x, y): if x == 0 or x == m-1 or y == 0 or y == n-1: return False flood_fill(x, y) for direction in directions: nx, ny = x + direction[0], y + direction[1] if grid[nx][ny] == \'1\' and (nx == 0 or nx == m-1 or ny == 0 or ny == n-1): return False return True if m == 0 or n == 0: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] enclosed_territories = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\': if is_enclosed(i, j): enclosed_territories += 1 return enclosed_territories def process_input(input_data): results = [] index = 0 while index < len(input_data): m, n = map(int, input_data[index].split()) if m == 0 and n == 0: break grid = [] for i in range(1, m+1): grid.append(list(input_data[index + i])) results.append(num_enclosed_territories(m, n, grid)) index += m + 1 return results if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().splitlines() results = process_input(input_data) for result in results: print(result)"},{"question":"You are given two strings s1 and s2. Each string represents a sequence of characters from the set of lowercase English letters and digits. Your task is to find the longest common substring shared by both strings. If there is more than one substring with the maximum length, return the lexicographically smallest one. A substring is defined as a contiguous sequence of characters within a string. Lexicographical order is the order in which words are listed in a dictionary, i.e., \\"a\\" < \\"ab\\" < \\"b\\" < \\"ba\\". Input The first line contains the string s1 (1 ≤ |s1| ≤ 100), and the second line contains the string s2 (1 ≤ |s2| ≤ 100). Output On a single line, print the longest common substring. If there are multiple substrings with the same maximum length, print the lexicographically smallest one. Examples Input abcde bcdf Output bcd Input abcdxyz xyzabcd Output abcd Note In the first example, the longest common substrings shared by both strings are \\"bcd\\" and \\"cde\\". Since \\"bcd\\" is lexicographically smaller, it is the correct output. In the second example, the longest common substrings are \\"abcd\\" and \\"xyz\\". As \\"abcd\\" is lexicographically smaller, it is the correct output.","solution":"def longest_common_substring(s1, s2): Finds the longest common substring of s1 and s2. If there are multiple substrings with the same maximum length, returns the lexicographically smallest one. m, n = len(s1), len(s2) # Create a 2D array to store lengths of longest common suffixes. # lc_suffix[i][j] will contain length of longest common suffix of # s1[0..i-1] and s2[0..j-1]. lc_suffix = [[0] * (n+1) for _ in range(m+1)] longest_len = 0 longest_end_pos = 0 for i in range(1, m+1): for j in range(1, n+1): if s1[i-1] == s2[j-1]: lc_suffix[i][j] = lc_suffix[i-1][j-1] + 1 if lc_suffix[i][j] > longest_len: longest_len = lc_suffix[i][j] longest_end_pos = i elif lc_suffix[i][j] == longest_len: current_substring = s1[i-longest_len:i] existing_substring = s1[longest_end_pos-longest_len:longest_end_pos] if current_substring < existing_substring: longest_end_pos = i # The longest common substring return s1[longest_end_pos-longest_len:longest_end_pos] # Test the function with the provided examples print(longest_common_substring(\\"abcde\\", \\"bcdf\\")) # Output: bcd print(longest_common_substring(\\"abcdxyz\\", \\"xyzabcd\\")) # Output: abcd"},{"question":"Given an undirected graph, the task is to determine if the graph is bipartite or not. A graph is bipartite if its vertices can be divided into two disjoint sets U and V such that every edge connects a vertex in U to one in V. In other words, we can color the graph using two colors such that no two adjacent vertices have the same color. Write a program that reads an undirected graph G = (V, E) and determines if it is bipartite. * The graph G is given in an adjacency-list form. * Vertices are identified by IDs 1, 2, ldots, n respectively. * IDs in each vertex\'s adjacency list are arranged in ascending order. * The program should output `Yes` if the graph is bipartite and `No` otherwise. # Constraints - 1 leq n leq 100 - 1 leq m leq 1000 (where m is the number of edges.) # Input The first line contains two integers n and m denoting the number of vertices and edges of the graph. In the next m lines, each line contains two integers u and v, denoting an edge between vertex u and vertex v. # Output The output should be a single line containing either `Yes` or `No`. # Examples Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` Yes ``` Input ``` 3 3 1 2 2 3 3 1 ``` Output ``` No ```","solution":"def is_bipartite(n, m, edges): Determines if a graph is bipartite. Parameters: n (int): Number of vertices m (int): Number of edges edges (list of tuples): List of edges in the graph Returns: str: \'Yes\' if the graph is bipartite, \'No\' otherwise from collections import deque def bfs(start): queue = deque([start]) colors[start] = 0 while queue: node = queue.popleft() for neighbor in adj_list[node]: if colors[neighbor] == -1: colors[neighbor] = 1 - colors[node] queue.append(neighbor) elif colors[neighbor] == colors[node]: return False return True # Create adjacency list adj_list = [[] for _ in range(n + 1)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Initialize colors colors = [-1] * (n + 1) # Check for each disconnected component for i in range(1, n + 1): if colors[i] == -1: if not bfs(i): return \\"No\\" return \\"Yes\\""},{"question":"In a certain university\'s computer lab, students are allowed to print their assignments on a first-come, first-served basis. However, the printer has limited capacity and can only print one assignment at a time. Each student arrives at a specific time, and the time it takes for the printer to complete each job varies depending on the length of the assignment. A student can submit their assignment to the printer only after arriving at the lab. Given this information, write a program to determine the total amount of time the last student\'s assignment will be completed. *The input consists of two integers \'t\' (the number of test cases) and \'n\' (the number of students for each test case). For each test case, there are n pairs of integers, where each pair (a[i], t[i]) represents the arrival time of the i-th student and the printing time of their assignment respectively.* *Output the total amount of time for the printer to complete the last student\'s assignment for each test case.* 1 ≤ t ≤ 100 1 ≤ n ≤ 1000 0 ≤ a[i] ≤ 10000 1 ≤ t[i] ≤ 100 AUTHOR: Alex Johnson SAMPLE INPUT 2 3 0 5 2 3 5 3 4 1 2 1 3 3 1 6 2 SAMPLE OUTPUT 11 9 Explanation In the first test case: - Student 1 arrives at time 0 and prints for 5 minutes (finishes at time 5). - Student 2 arrives at time 2 but has to wait until Student 1 finishes. Starts at time 5, prints for 3 minutes (finishes at time 8). - Student 3 arrives at time 5 but has to wait until Student 2 finishes. Starts at time 8, prints for 3 minutes (finishes at time 11). Thus total time to finish last student is 11. In the second test case: - Student 1 arrives at time 1 and prints for 2 minutes (finishes at time 3). - Student 2 arrives at the same time as Student 1 but has to wait until Student 1 finishes. Starts at time 3, prints for 3 minutes (finishes at time 6). - Student 3 arrives at time 3 and prints for 1 minute after Student 2 (finishes at time 7). - Student 4 arrives at time 6 and prints for 2 minutes after Student 3 (finishes at time 9). Thus total time to finish last student is 9.","solution":"def get_total_printing_time(test_cases): results = [] for case in test_cases: n, students = case current_time = 0 for arrival, print_time in students: if arrival > current_time: current_time = arrival current_time += print_time results.append(current_time) return results # Function to parse input def parse_input(input_string): input_lines = input_string.split(\'n\') t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) index += 1 students = [] for _ in range(n): arrival, print_time = map(int, input_lines[index].split()) students.append((arrival, print_time)) index += 1 test_cases.append((n, students)) return test_cases # Integration function to handle input and output def main(input_string): test_cases = parse_input(input_string) results = get_total_printing_time(test_cases) for result in results: print(result) # Example Test Input example_input = 2 3 0 5 2 3 5 3 4 1 2 1 3 3 1 6 2 # Running the example if __name__ == \\"__main__\\": main(example_input)"},{"question":"You are given a rectangular chocolate bar that can be divided into smaller rectangular pieces. Each piece can be either plain or contain nuts. Your task is to find the maximum number of pieces with nuts you can get by making horizontal and vertical cuts along the grid\'s lines. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the chocolate bar respectively. The following n lines each contain m integers. A \'1\' indicates a piece with nuts, and a \'0\' indicates a plain piece. Output Output a single integer — the maximum number of pieces with nuts you can get after making any number of vertical and horizontal cuts along the grid lines. Example Input 3 3 1 0 1 0 1 0 1 1 1 Output 3 Input 2 2 1 0 0 1 Output 2 Note In the first example, the most optimal way to cut the chocolate is: - Cut along the lines between first and second rows, and second and third rows. - Cut along the lines between first and second columns, and second and third columns. This results in maximum 3 distinct pieces each containing at least one nut. In the second example, the optimal way is: - No cuts are necessary, the maximum number of pieces with nuts is already 2.","solution":"def max_nut_pieces(n, m, grid): Return the maximum number of pieces with nuts by making horizontal and vertical cuts. n: Number of rows m: Number of columns grid: 2D list representing the chocolate bar grid (1 for nut, 0 for plain) num_pieces_with_nuts = 0 # Check horizontally cut pieces for row in grid: num_pieces_with_nuts += sum(row) return num_pieces_with_nuts"},{"question":"The Monty Hall problem is a famous probability puzzle named after the host of the television game show \\"Let\'s Make a Deal\\". The puzzle is a great example of conditional probability and has intrigued many for years. In the original problem, there are three doors. Behind one of them is a car (prize) and behind the other two are goats. The contestant picks one door, say door A. Then the host, Monty Hall, who knows what is behind the doors, opens another door, say door B, which has a goat. Monty then offers the contestant a choice to either stick with door A or switch to the remaining unopened door, C. Your task is to simulate the Monty Hall problem and determine the probabilities of winning the car when the contestant sticks with their initial choice and when they switch to the remaining door. This will help verify the counterintuitive solution statistical results. Input The first line of the input contains a single integer n (1 ≤ n ≤ 10^6), the number of simulations to run. Output Print two probabilities (in percentage format) on a single line separated by a space. The first number is the probability of winning when the contestant sticks with their initial choice, and the second number is the probability of winning when the contestant switches. Example Input 1000000 Output 33.333% 66.667% Explanation In this example, after running 1,000,000 simulations, the simulated results show that the probability of winning the car by sticking with the initial choice is approximately 33.333%, and the probability of winning by switching is approximately 66.667%.","solution":"import random def simulate_monty_hall(n: int): Simulates the Monty Hall problem n times and returns the probabilities of winning the car when sticking with the initial choice and when switching. :param n: Number of simulations :return: A tuple of probabilities (stick_win_prob, switch_win_prob) stick_wins = 0 switch_wins = 0 for _ in range(n): # Randomly place the car behind one of the three doors car_behind_door = random.randint(0, 2) # Contestant makes an initial choice (randomly) contestant_choice = random.randint(0, 2) # Monty reveals a door with a goat (can\'t be the contestant\'s choice or the car) revealed_door = next(door for door in range(3) if door != contestant_choice and door != car_behind_door) # Determine the remaining unopened door which the contestant can switch to remaining_door = next(door for door in range(3) if door != contestant_choice and door != revealed_door) # If the contestant sticks with their initial choice if contestant_choice == car_behind_door: stick_wins += 1 # If the contestant switches to the remaining door if remaining_door == car_behind_door: switch_wins += 1 stick_win_prob = (stick_wins / n) * 100 switch_win_prob = (switch_wins / n) * 100 return (f\\"{stick_win_prob:.3f}%\\", f\\"{switch_win_prob:.3f}%\\")"},{"question":"Sarah loves crossword puzzles and is currently working on her latest creation where she needs to fill in a grid with characters. She has provided you with a grid that contains some predefined characters and some empty cells. You must write a code to help her fill the grid in such a way that each row contains all the characters from \'a\' to \'z\' exactly once. Given a partially filled grid of size 26x26, where some cells already contain lowercase English letters (\'a\' to \'z\') and others are empty, fill the empty cells so that each row contains all 26 letters exactly once. Input The input consists of 26 lines, each containing exactly 26 characters. A character \'.\' represents an empty cell, and lowercase English letters (\'a\' to \'z\') represent predefined characters. Output Output the complete 26x26 grid where each row contains all lowercase English letters exactly once. If there are multiple valid solutions, any will be accepted. Examples Input a...........b...........c..... .b............a...............d ..c...........b...............e ...d...........c...........f... ... ... ... ... Output abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz ... ... ... ... Note In the provided example, each row eventually contains all the characters from \'a\' to \'z\'. The specific letters already present in the input grid determine the constraints for other cells.","solution":"def fill_crossword(grid): import string def complete_row(row): alphabet = set(string.ascii_lowercase) existing_chars = set(row) - {\'.\'} missing_chars = list(alphabet - existing_chars) row = list(row) for i, char in enumerate(row): if char == \'.\': row[i] = missing_chars.pop() return \'\'.join(row) return [complete_row(row) for row in grid]"},{"question":"Given an undirected graph with `N` vertices and `M` edges, test whether the graph contains a cycle. # Input - The first line contains two integers `N` and `M` (1 ≤ N, M ≤ 10^5). - The next `M` lines each contains two integers `u` and `v` (1 ≤ u, v ≤ N), representing an edge between vertex `u` and vertex `v`. # Output Print \\"YES\\" if the graph contains a cycle; otherwise, print \\"NO\\". # Example Input ``` 4 4 1 2 2 3 3 4 4 2 ``` Output ``` YES ``` Input ``` 3 2 1 2 2 3 ``` Output ``` NO ```","solution":"def contains_cycle(N, M, edges): from collections import defaultdict def dfs(v, parent): visited[v] = True for neighbor in adjacency_list[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif parent != neighbor: return True return False # Create adjacency list adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) # Initialize visited array visited = [False] * (N + 1) # Run DFS from every unvisited node for v in range(1, N + 1): if not visited[v]: if dfs(v, -1): return \\"YES\\" return \\"NO\\""},{"question":"Write a program to identify if a given string is a \\"Perfect Palindrome\\". A string is considered a Perfect Palindrome if it reads the same forward as backward and all characters are the same. Input: First line contains a number T, which represents the number of test cases. Each following line contains a string S. Output: For each test case, print \\"TRUE\\" if the string is a Perfect Palindrome, otherwise print \\"FALSE\\". Constraints: 1 ≤ T ≤ 50 1 ≤ |S| ≤ 100 SAMPLE INPUT 3 aaa aba cccc SAMPLE OUTPUT TRUE FALSE TRUE Explanation For 1st case, the string \\"aaa\\" reads the same forwards and backwards and all characters are identical. Hence, output \\"TRUE\\". For 2nd case, the string \\"aba\\" reads the same forwards and backwards, but not all characters are identical. Hence, output \\"FALSE\\". For 3rd case, the string \\"cccc\\" reads the same forwards and backwards and all characters are identical. Hence, output \\"TRUE\\".","solution":"def is_perfect_palindrome(s): Returns \'TRUE\' if the string s is a Perfect Palindrome, otherwise \'FALSE\'. return \'TRUE\' if s == s[::-1] and len(set(s)) == 1 else \'FALSE\' def run_test_cases(t, test_cases): results = [] for test_case in test_cases: results.append(is_perfect_palindrome(test_case)) return results"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation on the string zero or more times: - Choose any character in the string and replace it with any other lowercase English letter. Your goal is to make all the characters of the string the same. Determine the minimum number of operations required to achieve this. Constraints * 1 ≦ |S| ≦ 1000 * S consists of lowercase English letters. Input The input is given from Standard Input in the following format: S Output Print the minimum number of operations required to make all characters in the string the same. Examples Input abac Output 2 Input zzzz Output 0","solution":"def min_operations_to_unify_string(s): from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Find the maximum frequency of any character max_freq = max(char_count.values()) # Calculate the minimum number of operations return len(s) - max_freq"},{"question":"Carmen is organizing her collection of digital photographs, and she wants them to be properly arranged in a visually appealing way. Each photograph is represented by a rectangle in a 2D grid. Carmen would like to form the largest possible square subgrid where all cells are covered by these rectangles without any gaps or overlaps. You are given a 2D binary grid `matrix` of size `m x n`, where `matrix[i][j]` is either 0 or 1. A cell marked with \'1\' indicates that it is covered by a rectangle and \'0\' indicates a gap. You need to find the side length of the largest square containing only 1s. Input The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each of the following test cases consists of: - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) — the dimensions of the grid. - The next `m` lines each contain `n` characters (either 0 or 1), representing the grid. Output For each test case, print a single integer — the side length of the largest square containing only 1s. Example Input 3 4 5 11000 11000 11100 00000 3 3 111 111 111 2 2 01 10 Output 2 3 1 Explanation In the first test case, the largest square of 1s has a side length of 2. In the second test case, the largest square of 1s has a side length of 3. In the third test case, the largest square of 1s has a side length of 1.","solution":"def largest_square(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * (n + 1) for _ in range(m + 1)] max_side = 0 for i in range(1, m + 1): for j in range(1, n + 1): if matrix[i-1][j-1] == \'1\': dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side def get_largest_squares(test_cases): results = [] for case in test_cases: m, n, grid = case results.append(largest_square(grid)) return results def process_input_output(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): m, n = map(int, lines[index].split()) grid = [lines[index + i + 1] for i in range(m)] test_cases.append((m, n, grid)) index += m + 1 results = get_largest_squares(test_cases) return results"},{"question":"Write a program that takes in an array of integers, and an integer `k`, and returns the length of the longest contiguous subarray that contains at most `k` distinct integers. **Input** The first line contains two integers `n` (1 ≤ n ≤ 100,000) and `k` (1 ≤ k ≤ n), `n` being the size of the array, and `k` is the maximum number of distinct integers in the subarray. The second line contains `n` integers `a[1], a[2], ..., a[n]` (-1,000,000 ≤ a[i] ≤ 1,000,000) representing the elements of the array. **Output** Output a single integer - the length of the longest contiguous subarray that contains at most `k` distinct integers. **Sample Input** 5 2 1 2 1 2 3 **Sample Output** 4 **Explanation** The longest subarray with at most 2 distinct elements is `[1, 2, 1, 2]`, which has length 4.","solution":"def longest_subarray_with_k_distinct(n, k, array): Returns the length of the longest contiguous subarray that contains at most k distinct integers. from collections import defaultdict left = 0 right = 0 max_length = 0 distinct_count = defaultdict(int) while right < n: distinct_count[array[right]] += 1 while len(distinct_count) > k: distinct_count[array[left]] -= 1 if distinct_count[array[left]] == 0: del distinct_count[array[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"A company has just implemented a new employee appreciation system where every employee can nominate their colleagues for an award. The nominations are aggregated, and the employee with the highest number of nominations receives the employee of the month award. If multiple employees have the highest number of nominations, the employee with the smallest employee ID is selected. Given the nominations and the list of employee IDs, write a program to determine the employee of the month. Input: The first line contains an integer T denoting the number of test cases. Each test case starts with an integer N which denotes the number of employees in the company. The second line contains N space-separated integers indicating the employee IDs. The third line contains N-1 space-separated integers which are the nominations. Each nomination is an employee ID. Output: For each test case, print the employee ID of the employee of the month. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ Employee ID ≤ 10^6 Example: Input: 2 4 1 2 3 4 1 2 2 3 5 9 7 9 7 Output: 2 7 Explanation: In the first case, employees 1, 2, 3, and 4 are there. Employee 2 gets two nominations and employee 1 gets one nomination. Hence, employee 2 is the employee of the month. In the second case, employees 5, 9, and 7 are there. Employee 9 and 7 get one nomination each. Since employee 7 has a smaller employee ID than 9, employee 7 is selected as the employee of the month.","solution":"def employee_of_the_month(test_cases): Find out the employee of the month for each test case. Parameters: test_cases (list): A list containing the test cases. Each test case is a tuple where: - The first element is the number of employees (N). - The second element is list of employee IDs. - The third element is list of nominations (each nomination is an employee ID). Returns: list: A list containing the employee of the month for each test case. results = [] for case in test_cases: N, employee_ids, nominations = case # Create a dictionary to keep track of nominations nomination_count = {emp_id: 0 for emp_id in employee_ids} # Count the nominations for nomination in nominations: nomination_count[nomination] += 1 # Find the employee with the maximum nominations max_nominations = max(nomination_count.values()) potential_winners = [emp for emp in nomination_count if nomination_count[emp] == max_nominations] # Return the one with the smallest employee ID results.append(min(potential_winners)) return results"},{"question":"You are given a string `S` of length `N` consisting of lowercase alphabets and Q queries of the following types: * `0 p c`: Replace the character at index `p` in string `S` with the character `c`. * `1 l r`: Print the lexicographically smallest substring of `S` from index `l` to `r - 1` (inclusive). Constraints * 1 ≤ N, Q ≤ 100,000 * 0 ≤ p < N * 0 ≤ l < r ≤ N * `S_i` and `c` are lowercase English letters. Input Input is given from Standard Input in the following format: N Q S Query_0 Query_1 : Query_{Q - 1} Output For each query of the latter type, print the lexicographically smallest substring of the specified range. Example Input 5 4 abcde 1 0 5 0 3 a 1 0 5 1 1 4 Output abcde abcae bca Note: After the second query, the string is modified to \\"abcae\\".","solution":"def process_queries(N, Q, S, queries): result = [] s = list(S) for query in queries: parts = query.split() if parts[0] == \'0\': p = int(parts[1]) c = parts[2] s[p] = c elif parts[0] == \'1\': l = int(parts[1]) r = int(parts[2]) result.append(\\"\\".join(s)[l:r]) return result # Let\'s print the results to see behavior before adding unittest. if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) Q = int(data[1]) S = data[2] queries = data[3:] results = process_queries(N, Q, S, queries) for res in results: print(res)"},{"question":"A palindrome is a string that reads the same backward as forward. You are given a string s, which may contain special characters that should be ignored when checking for palindromes. Determine if s is a palindrome. Input The only line of input contains a string s (1 ≤ |s| ≤ 100), which consists of alphanumeric characters and special symbols. Output Output \\"YES\\" if the given string is a palindrome ignoring special characters and case sensitivity, otherwise output \\"NO\\". Examples Input A man, a plan, a canal, Panama Output YES Input Hello, World! Output NO","solution":"def is_palindrome(s): Returns \\"YES\\" if the input string s is a palindrome ignoring special characters and case sensitivity; otherwise returns \\"NO\\". # Remove non-alphanumeric characters and convert to lowercase filtered_str = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is a palindrome return \\"YES\\" if filtered_str == filtered_str[::-1] else \\"NO\\""},{"question":"**Task** You are given an array of integers. You need to find the most frequent element in the array. If there are multiple elements with the same highest frequency, return the smallest element among them. Input The first line contains a single integer t — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. The sum of n across the test cases doesn\'t exceed 10^5. Output For each test case, output a single integer — the most frequent element in the array. If there are multiple elements with the same highest frequency, output the smallest one. Example Input 2 6 1 2 3 2 4 2 5 1 2 3 1 3 Output 2 1 Note In the first sample, the number 2 appears the most frequently (3 times), so the output is 2. In the second sample, both 1 and 3 appear twice. The smallest of them is 1, so the output is 1.","solution":"def most_frequent_element(test_cases): from collections import Counter results = [] for case in test_cases: n, arr = case count = Counter(arr) max_freq = max(count.values()) most_frequent = [num for num, freq in count.items() if freq == max_freq] results.append(min(most_frequent)) return results # This function processes the input and calls the most_frequent_element function to get the results def process_input(input_data): lines = input_data.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return most_frequent_element(test_cases)"},{"question":"Problem description You are given a task to handle data encryption and decryption for secure communications. The encryption method uses a basic Caesar Cipher, where each letter in the plaintext is shifted a certain number of places down or up the alphabet. For instance, with a shift of 1, \'A\' would be encrypted to \'B\', \'B\' to \'C\', and so on. Characters in the string can wrap around, so \'Z\' would be encrypted to \'A\' with a shift of 1. The same shifting logic applies regardless of character case. Your task is to write functions to both encrypt and decrypt a given string using the Caesar Cipher technique. Input - The first line contains an integer T denoting the number of test cases. - Each of the next T lines has an integer S (the shift value) followed by a string P. Output For each test case, output two lines: - First line: The encrypted version of string P. - Second line: The decrypted version using the same shift value S. Constraints 1 ≤ T ≤ 1000 1 ≤ S ≤ 25 1 ≤ length of P ≤ 1000 Examples Input: 2 3 HELLO 2 WORLD Output: KHOOR HELLO YQTNF WORLD Explanation In the first test case: The shift value is 3. Encrypting \'HELLO\' with a shift of 3 results in \'KHOOR\'. Decrypting \'KHOOR\' with the same shift value returns to \'HELLO\'. In the second test case: The shift value is 2. Encrypting \'WORLD\' with a shift of 2 results in \'YQTNF\'. Decrypting \'YQTNF\' with the same shift value returns to \'WORLD\'.","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the given text using Caesar Cipher with the given shift. result = [] for char in text: if char.isalpha(): shift_amount = shift % 26 if char.islower(): start = ord(\'a\') result.append(chr((ord(char) - start + shift_amount) % 26 + start)) else: start = ord(\'A\') result.append(chr((ord(char) - start + shift_amount) % 26 + start)) else: result.append(char) return \'\'.join(result) def caesar_cipher_decrypt(text, shift): Decrypts the given text using Caesar Cipher with the given shift. return caesar_cipher_encrypt(text, -shift) def encrypt_and_decrypt_cases(test_cases): results = [] for shift, text in test_cases: encrypted = caesar_cipher_encrypt(text, shift) decrypted = caesar_cipher_decrypt(encrypted, shift) results.append((encrypted, decrypted)) return results"},{"question":"You are given an array of N integers. We define a \\"jump\\" in the array as transitioning from one element to the next element that is larger than the current element. The jump length is the difference between the indices of the two elements involved in the jump. Write a function to compute the maximum jump length in the array. Input format: The first line contains an integer N, denoting the size of the array. The second line contains N space-separated integers a1, a2, ..., aN representing the elements of the array. Output format: Print the maximum jump length in the array. If no jump can be made, print 0. Constraints: 1 ≤ N ≤ 10^6 1 ≤ ai ≤ 10^9 SAMPLE INPUT 6 3 1 4 7 2 6 SAMPLE OUTPUT 2 Explanation One possible sequence of jumps is: 3 → 4 (jump length of 2-0 = 2) → 7 (jump length of 3-2 = 1). The maximum jump length here is 2. Other jumps are either shorter or not possible. Also, no jumps can start from element 7 since there is no larger element after it.","solution":"def max_jump_length(arr): Computes the maximum jump length between elements in the array where a jump is defined as moving from one element to another larger element. Parameters: arr (list of int): The list of integers. Returns: int: The maximum jump length. If no jump can be made, returns 0. n = len(arr) if n == 0: return 0 max_jump = 0 for i in range(n): for j in range(i + 1, n): if arr[j] > arr[i]: max_jump = max(max_jump, j - i) break # No need to check further for this starting point return max_jump"},{"question":"Alicia has a string consisting of n characters, each character being either \'a\', \'b\', or \'c\'. Alicia wants to create a balanced substring where the substring contains exactly one \'a\', one \'b\', and one \'c\'. She wants to find the length of the shortest possible substring that is balanced. If there are no balanced substrings, return -1. Input The first line contains an integer n (1 ≤ n ≤ 200,000) — the length of Alicia\'s string. The second line contains a string s of length n, consisting of characters \'a\', \'b\', and \'c\' only. Output Print a single integer — the length of the shortest balanced substring, or -1 if no such substring exists. Examples Input 7 abcacbc Output 3 Input 5 aaaaa Output -1 Input 10 abacbabcbc Output 3 Note In the first example, Alicia can take the substring \\"abc\\" which is balanced and has a length of 3. In the second example, there is no balanced substring as \'b\' and \'c\' are missing. In the third example, the substring \\"bac\\" or \\"acb\\" or \\"cba\\" are all balanced substrings with a length of 3.","solution":"def shortest_balanced_substring(n, s): min_length = float(\'inf\') for i in range(n): a_count, b_count, c_count = 0, 0, 0 for j in range(i, n): if s[j] == \'a\': a_count += 1 elif s[j] == \'b\': b_count += 1 elif s[j] == \'c\': c_count += 1 if a_count >= 1 and b_count >= 1 and c_count >= 1: min_length = min(min_length, j - i + 1) break return min_length if min_length != float(\'inf\') else -1"},{"question":"A company is organizing a conference and wants to distribute promotional gift bags to the attendees. Each bag contains an assortment of small items, and each bag must be identical. The company has a large number of individual items in stock, categorized into different types. They want to know how many identical gift bags they can prepare. Each type of item has a fixed quantity, and each bag must include at least one item of each type. Given the quantities of each type, determine the maximum number of identical gift bags that can be prepared. Input The first line contains an integer t, the number of types of items (1 ≤ t ≤ 10^5). The second line contains t space-separated integers, where the i-th integer represents the quantity of the i-th type of item (1 ≤ quantity ≤ 10^9). Output Print a single integer, the maximum number of identical gift bags that can be prepared. Examples Input 3 6 4 8 Output 4 Input 5 10 1 10 1 10 Output 1 Input 4 9 9 9 9 Output 9 Input 2 5 20 Output 5","solution":"def max_identical_gift_bags(t, quantities): Returns the maximum number of identical gift bags that can be prepared. return min(quantities)"},{"question":"You are given an array of n integers and q queries to be performed on this array. There are two types of queries: * 1~ pos~ x (1 ≤ pos ≤ n, x is an integer): replace the value in the array at position pos with x (set array[pos] := x); * 2~ l~ r (1 ≤ l ≤ r ≤ n): find the maximum value in the subarray array[l ... r]. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), the elements of the array. The next q lines contain queries, one per line, in the format described in the problem statement. Output For each query of the second type, print the maximum value in the specified subarray. Examples Input 6 5 1 7 3 6 5 4 2 1 3 2 2 5 1 4 10 2 3 6 2 1 6 Output 7 7 10 10 Input 10 7 5 2 9 7 5 1 3 4 8 6 2 1 5 1 6 10 2 4 7 2 1 10 1 10 9 2 7 10 2 3 9 Output 9 10 10 9 10","solution":"class ArrayProcessor: def __init__(self, n, arr): self.n = n self.arr = arr def update_value(self, pos, x): Replace the value in the array at position pos with x. self.arr[pos - 1] = x def find_max_in_subarray(self, l, r): Find the maximum value in the subarray arr[l ... r]. return max(self.arr[l - 1:r]) def process_queries(n, q, array, queries): array_processor = ArrayProcessor(n, array) results = [] for query in queries: if query[0] == 1: _, pos, x = query array_processor.update_value(pos, x) elif query[0] == 2: _, l, r = query result = array_processor.find_max_in_subarray(l, r) results.append(result) return results"},{"question":"There are n soldiers standing in a line, each with a unique height represented by an array of length n. The soldiers need to be rearranged such that they form a non-decreasing order from left to right i.e., the soldier with the shortest height should be the first, and the soldier with the tallest height should be the last. In one move, you can swap any two soldiers. Determine the minimum number of swaps needed to arrange the soldiers in non-decreasing order of their heights. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of soldiers. The second line contains n integers separated by spaces, representing the heights of the soldiers. Output Output the only integer, the minimum number of swaps needed to arrange the soldiers in non-decreasing order of heights. Examples Input 5 4 3 1 2 5 Output 3 Input 4 2 3 4 1 Output 3 Note In the first example, we can achieve the sorted order in 3 swaps: swap 4 and 1, swap 3 and 1, swap 2 and 1. In the second example, we need 3 swaps: swap 2 and 1, swap 3 and 1, swap 4 and 1.","solution":"def minimum_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array. n = len(arr) arrpos = [(value, idx) for idx, value in enumerate(arr)] arrpos.sort(key=lambda it: it[0]) visited = {k: False for k in range(n)} ans = 0 for i in range(n): if visited[i] or arrpos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arrpos[j][1] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"Write a function to find the intersection of two arrays. The intersection of two arrays is a list containing distinct common elements that appear in both arrays. You should not use the `set` data structure to find the intersection. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the size of the first array. - The second line contains n integers, representing the elements of the first array. - The third line contains an integer m (1 ≤ m ≤ 1000), the size of the second array. - The fourth line contains m integers, representing the elements of the second array. Output Print a list containing the distinct common elements of the two arrays. The elements in the output list should be in the order they appear in the first array. Examples Input 5 4 9 5 4 9 4 9 4 9 8 4 Output [4, 9] Input 3 1 2 3 4 4 2 1 2 Output [1, 2] Input 4 2 2 2 2 3 2 2 2 Output [2] Note In the first example, the common elements in both arrays are 4 and 9. As these elements appear in the first array in the same order, the output list is `[4, 9]`. In the second example, the common elements are 1 and 2. Since 1 appears first in the first array, followed by 2, the output list is `[1, 2]`. In the third example, the common element is 2. It appears multiple times in both arrays, but we only include it once in the output list, so the output is `[2]`.","solution":"def intersection_of_arrays(n, arr1, m, arr2): intersection = [] seen = set() for num in arr1: if num in arr2 and num not in seen: intersection.append(num) seen.add(num) return intersection"},{"question":"You are given an array of n integers representing the heights of buildings aligned sequentially. Bob, who is an urban developer, wants to construct a beautiful skyline by arranging billboard advertisements on some of these buildings such that they are attractive when viewed from a distance. The beauty of the skyline is determined by the length of the longest contiguous subsequence where the heights of the buildings are strictly increasing. Help Bob find the length of this longest increasing subsequence. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the heights of the buildings. Output Print a single integer — the length of the longest contiguous subsequence with strictly increasing heights. Examples Input 6 3 1 6 2 5 8 Output 3 Input 4 7 7 7 7 Output 1 Input 7 1 2 3 4 5 6 7 Output 7","solution":"def longest_increasing_subsequence_length(n, heights): Returns the length of the longest contiguous subsequence with strictly increasing heights. Parameters: n (int): Number of buildings. heights (list): A list containing the heights of the buildings. Returns: int: Length of the longest contiguous subsequence with strictly increasing heights. if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if heights[i] > heights[i-1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"You are given a rectangular grid with R rows and C columns of cells. Each cell can be either empty or contain a wall. A person starts in the top-left corner of the grid and aims to reach the bottom-right corner. The person can move one cell at a time in any of the four cardinal directions (up, down, left, right), but cannot pass through walls or move outside the grid boundaries. The task is to determine if there is a path from the top-left corner to the bottom-right corner or not. Input The input consists of multiple datasets. Each dataset is formatted as follows: ``` R C row1 row2 ... rowR ``` - The first line contains two integers R (2 ≤ R ≤ 50) and C (2 ≤ C ≤ 50), representing the number of rows and columns, respectively. - The next R lines each contain a string of C characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing a wall). The end of input is indicated by a line with two zeros. This line is not part of any dataset. Output For each dataset, print \\"Yes\\" if there is a path from the top-left corner to the bottom-right corner, and \\"No\\" otherwise. Example Input 3 3 ... .#. ... 4 4 .#.. .. ..#. ...# 2 2 .# #. 0 0 Output Yes No No","solution":"def is_path_possible(grid, R, C): from collections import deque # Directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < R and 0 <= y < C and grid[x][y] == \'.\' # BFS initialization queue = deque([(0, 0)]) # Start from the top-left corner visited = set((0, 0)) # To keep track of visited cells while queue: x, y = queue.popleft() if (x, y) == (R - 1, C - 1): return \\"Yes\\" # If we reached bottom-right corner for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"No\\" def process_input(data): results = [] data = data.split(\'n\') idx = 0 while idx < len(data): line = data[idx].strip() if line == \\"0 0\\": break R, C = map(int, line.split()) grid = [] for i in range(R): grid.append(data[idx + 1 + i].strip()) results.append(is_path_possible(grid, R, C)) idx += 1 + R return results # Example usage def main(): import sys input_data = sys.stdin.read() results = process_input(input_data) for result in results: print(result) # Uncomment below to run in an environment where you can pass input # if __name__ == \\"__main__\\": # main()"},{"question":"A company wants to optimize its daily schedule by analyzing the patterns of completed tasks by its employees. Each employee\'s tasks are represented as intervals on a timeline. The company\'s goal is to maximize the number of non-overlapping tasks that can be selected from a given set of intervals. Write a program that takes multiple sets of intervals and outputs the maximum number of non-overlapping intervals for each set. Input The input consists of multiple test cases. The first line contains an integer T (1 ≤ T ≤ 10), the number of test cases. Each test case begins with an integer n (1 ≤ n ≤ 100), the number of intervals, followed by n pairs of integers, each representing the start and end time of an interval. Output For each test case, output the maximum number of non-overlapping intervals in a separate line. Example Input 2 4 1 3 2 5 4 6 7 8 3 1 2 2 3 3 4 Output 3 3","solution":"def max_non_overlapping_intervals(t, test_cases): results = [] for case in test_cases: n = case[0] intervals = case[1:] intervals = [(intervals[i], intervals[i+1]) for i in range(0, len(intervals), 2)] intervals.sort(key=lambda x: x[1]) end_time = float(\'-inf\') count = 0 for start, end in intervals: if start >= end_time: end_time = end count += 1 results.append(count) return results # Function to parse input into required format def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index].split()[0]) intervals = list(map(int, lines[index].split())) test_cases.append([n] + intervals[1:]) index += 1 return t, test_cases # Function to generate output string from results def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"You are given a list of students in a class, and each student has a unique ID and a list of grades for their assignments. The teacher of the class wants to find the top K students based on their average grade. If two students have the same average grade, the one with the higher ID should be ranked higher. Your task is to write a program that takes the number of students, their IDs, grades, and the value of K as input, and outputs the IDs of the top K students in descending order of their average grade. # Input The input consists of multiple lines as described below: - The first line will contain two integers N and K (1 ≤ K ≤ N ≤ 1000), where N is the number of students and K is the number of top students to be found. - The next N lines each contain the student\'s ID (a unique integer between 1 and 100000) followed by a list of that student\'s grades (each grade is an integer between 0 and 100). Each line of grades is terminated by the number -1. # Output The output should consist of K lines, each containing the ID of one of the top K students in descending order of their average grade. If two students have the same average grade, the one with the higher ID should be ranked higher. # Example Input ``` 5 3 123 95 85 76 88 70 -1 456 100 92 78 -1 789 85 90 93 78 -1 654 70 80 65 85 90 -1 321 88 74 91 -1 ``` Output ``` 789 123 321 ``` # Explanation - Student with ID 789 has grades: 85, 90, 93, 78. Average grade = 86.5 - Student with ID 123 has grades: 95, 85, 76, 88, 70. Average grade = 82.8 - Student with ID 321 has grades: 88, 74, 91. Average grade = 84.33 - Student with ID 654 has grades: 70, 80, 65, 85, 90. Average grade = 78 - Student with ID 456 has grades: 100, 92, 78. Average grade = 90 The top 3 students by average grade are: 1. 456 with average grade 90 2. 789 with average grade 86.5 3. 321 with average grade 84.33 Since student 456 and 123 have the same average grade (85.5), student 456\'s ID is higher; therefore, he is ranked higher. The expected output should be student IDs in the order: 789, 123, and 321.","solution":"def top_k_students(N, K, students_data): This function returns the top K students based on their average grades. If two students have the same average grade, the one with the higher ID is ranked higher. :param N: The number of students :param K: The top number of students to retrieve :param students_data: List of tuples, each containing a student ID and their list of grades :return: List of student IDs of the top K students students_avg_grades = [] for student in students_data: student_id = student[0] grades = student[1:] average_grade = sum(grades) / len(grades) students_avg_grades.append((average_grade, student_id)) # Sort by average grade first (descending), then by student ID (descending) students_avg_grades.sort(key=lambda x: (x[0], x[1]), reverse=True) # Retrieve top K student IDs top_k_ids = [student_id for _, student_id in students_avg_grades[:K]] return top_k_ids def parse_input(input_lines): This function parses the input from the list of strings into appropriate variables. :param input_lines: List of input strings :return: Tuple containing (N, K, students_data) header = input_lines[0].split() N = int(header[0]) K = int(header[1]) students_data = [] for line in input_lines[1:]: parts = list(map(int, line.split())) student_id = parts[0] grades = parts[1:-1] # Ignore the terminating \'-1\' students_data.append((student_id, *grades)) return N, K, students_data"},{"question":"Leap year determination can be tricky due to the complex rules involved. Write a program to determine whether a given year is a leap year or not. The rules for determining a leap year are as follows: - A year is a leap year if it is divisible by 4 but not divisible by 100. - However, a year is a leap year if it is divisible by 400. The program should read multiple inputs and output whether each year is a leap year or not. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a zero. Each dataset is a single integer year (1 ≤ year ≤ 10000). Output For each dataset, output \\"Leap year\\" if the year is a leap year and \\"Not a leap year\\" otherwise. Example Input 1996 1900 2000 2023 0 Output Leap year Not a leap year Leap year Not a leap year","solution":"def is_leap_year(year): Determines if a given year is a leap year. Parameters: year (int): The year to be checked. Returns: str: \\"Leap year\\" if the year is a leap year, otherwise \\"Not a leap year\\". if year == 0: return None if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return \\"Leap year\\" else: return \\"Not a leap year\\" def main(input_list): Processes a list of years and determines if each year is a leap year. Parameters: input_list (list): A list of years. Returns: list: A list of results where each result is either \\"Leap year\\" or \\"Not a leap year\\". results = [] for year in input_list: if year == 0: break result = is_leap_year(year) results.append(result) return results"},{"question":"You are tasked with developing a program that evaluates the \\"Digital Root\\" of given numbers. The digital root of a non-negative integer is defined as the single-digit value obtained by an iterative process of summing digits until a single-digit number is produced. For example, the digital root of 12345 is calculated as follows: 1. The sum of digits in 12345 is 1 + 2 + 3 + 4 + 5 = 15. 2. Since 15 is not a single-digit number, we repeat the process on 15, giving 1 + 5 = 6. 3. Now 6 is a single-digit number, which is the digital root of 12345. Alternatively, the digital root can also be derived using the modulo operation: The digital root of any non-negative integer n is found by computing n modulo 9, with a specific adjustment when the result is 0 and n is not zero itself, i.e., digital_root(n) = 1 + ((n - 1) % 9) for n > 0. Your task is to write a program that reads a sequence of lines, each containing a non-negative integer n, and prints out the digital root of each number. The input is terminated by a line containing a single zero. Input The input consists of multiple lines. Each line contains a single non-negative integer n. The last line contains a single integer 0, which signals the end of the input. Output For each input line except the last one, your program should output the digital root of the provided integer. Example Input 12345 98765 0 Output 6 8","solution":"def digital_root(n): Computes the digital root of a non-negative integer n. if n == 0: return 0 return 1 + (n - 1) % 9 def main(input_lines): Reads a sequence of lines containing non-negative integers and prints their digital roots. The input ends with a line containing a single 0. results = [] for line in input_lines: n = int(line) if n == 0: break results.append(digital_root(n)) return results"},{"question":"Andrey is working on a special paint tool that can help decorate walls. This paint tool can generate a symmetric pattern on an n×m grid with just two types of strokes: horizontal and vertical. A horizontal stroke will fill a row with a \'#\', and a vertical stroke will fill a column with a \'#\'. Andrey wants to know if it\'s possible to generate a symmetric pattern using a given set of strokes. A symmetric pattern reflects identically across its center horizontally and vertically. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 50). The next n lines contain m characters each, describing the grid. Each character is either \'.\' representing an empty cell or \'#\' representing a filled cell. Output If a symmetric pattern is possible with the given strokes, output \\"YES\\". Otherwise, output \\"NO\\". Examples Input 3 3 # .#. # Output YES Input 3 4 #. .#.# #. Output NO Input 5 5 . #...# ..... #...# . Output YES Input 4 4 #..# #..# #..# Output NO Note In the first example, the pattern is already symmetric. In the second example, even though the pattern is symmetric horizontally, it is not vertically symmetric. In the third example, the pattern is symmetric both horizontally and vertically. In the fourth example, the pattern is symmetric horizontally but not vertically as the fourth row is not a mirror of the second row.","solution":"def is_symmetric_pattern_possible(grid): Check if a given n x m grid is symmetric both horizontally and vertically. n = len(grid) m = len(grid[0]) # Check horizontal symmetry for i in range(n): if grid[i] != grid[n - 1 - i]: return \\"NO\\" # Check vertical symmetry for j in range(m): for i in range(n): if grid[i][j] != grid[i][m - 1 - j]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a sequence of N integers, and your task is to determine whether there is a subset of these integers that sums to exactly S. If such a subset exists, print \\"YES\\"; otherwise, print \\"NO\\". This problem should be solved using Dynamic Programming to ensure optimal performance. Input Format The first line contains T, the number of test cases. Each test case consists of two lines. The first line contains two integers N and S, where N is the number of elements in the sequence and S is the desired sum. The second line contains N space-separated integers representing the sequence. Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 -1000 ≤ elements of the sequence ≤ 1000 1 ≤ S ≤ 10000 Output Format For each test case, print \\"YES\\" if there is a subset that sums to S, otherwise print \\"NO\\". Sample Input 2 5 9 3 34 4 12 5 2 4 30 3 34 4 12 Sample Output YES NO","solution":"def subset_sum_exists(arr, n, sum_val): dp = [[False for x in range(sum_val + 1)] for y in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, sum_val + 1): if j < arr[i - 1]: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] return dp[n][sum_val] def is_subset_sum_exist(t, test_cases): results = [] for i in range(t): n, s = test_cases[i][0] arr = test_cases[i][1] if subset_sum_exists(arr, n, s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers representing the amount of rain gathered in certain pits on a 1D landscape. Each position in the array represents the amount of rainwater that is trapped at that point. Your task is to calculate the total amount of water that can be trapped between the blocks in the landscape after a rain shower. Input An array of non-negative integers representing the height of the blocks where 0 ≤ arr[i] ≤ 1000 and 1 ≤ arr.length ≤ 1000. Output An integer representing the total amount of trapped rainwater. Example Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The rainwater trapped at each position is as follows: - Index 1: 0 units - Index 2: 1 unit - Index 4: 1 unit - Index 5: 2 units - Index 6: 1 unit - Index 8: 1 unit So the total rainwater that can be trapped is 0 + 1 + 0 + 2 + 1 + 0 + 1 + 0 + 1 = 6 units.","solution":"def trap_rainwater(heights): Calculate the total amount of trapped rainwater in the given landscape. Parameters: heights (list of int): List representing the height at each position of the landscape. Returns: int: Total amount of trapped rainwater. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Fluttershy wants to create a sequence of numbers to help her friends with their counting skills. The sequence is created using the following rules: 1. Start with the number 1. 2. Add the next number to the sequence which is incremented by 1. 3. Repeat step 2 until the sum of the entire sequence becomes greater than or equal to a given integer k. You are given an integer k. You need to output the sequence and the sum of the sequence once the sum is greater than or equal to k. Input The only line contains an integer k (1 ≤ k ≤ 10^9). Output Output the sequence of numbers, space-separated, and in the next line, output the final sum of this sequence. Examples Input 10 Output 1 2 3 4 10 Input 20 Output 1 2 3 4 5 6 21 Input 1 Output 1 1","solution":"def generate_sequence(k): Generates a sequence of incrementing integers starting from 1 until the sum of the sequence becomes greater than or equal to k. Arguments: k -- the threshold integer value (1 ≤ k ≤ 10^9) Returns: A tuple containing: - the sequence as a list of integers - the final sum of the sequence sequence = [] current_number = 1 current_sum = 0 while current_sum < k: sequence.append(current_number) current_sum += current_number current_number += 1 return sequence, current_sum"},{"question":"Ash is a botanist who is monitoring the growth of various plants in a greenhouse. To efficiently monitor the plants, Ash records the heights of each plant at the end of every week. However, due to an error, the records got mixed up and now he needs to sort the heights back in chronological order. Additionally, he needs to find the second tallest plant height recorded during this period. Write a program that takes a list of recorded plant heights and returns two things: 1. The list of heights sorted in ascending order. 2. The second tallest height in the list. If there is no second tallest height (i.e., if all heights are the same or if there is only one record), the program should return -1 for the second tallest height. Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of recorded heights. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), the recorded heights of the plants. Output: - The first line should contain the sorted list of heights. - The second line should contain the second tallest height or -1 if it does not exist. Examples: Input: 5 3 8 3 6 2 Output: 2 3 3 6 8 6 Input: 4 10 10 10 10 Output: 10 10 10 10 -1 Input: 2 7 12 Output: 7 12 7","solution":"def sort_heights_and_find_second_tallest(n, heights): Given a list of plant heights, sort the list in ascending order and return the second tallest height if it exists, otherwise return -1. :param n: Number of recorded heights. :param heights: List of recorded heights. :return: A tuple containing the sorted list of heights and the second tallest height or -1. sorted_heights = sorted(heights) # Find the second tallest height unique_heights = sorted(set(heights), reverse=True) second_tallest = unique_heights[1] if len(unique_heights) > 1 else -1 return sorted_heights, second_tallest"},{"question":"Given an integer m and an array b containing p strings, find out how many strings in b have at least m unique characters. Input The first line contains integers p and m (1 ≤ p ≤ 100, 1 ≤ m ≤ 26). The i-th of the following p lines contains a string bi consisting only of lowercase English letters (1 ≤ |bi| ≤ 100). Output Print a single integer — the number of strings in b that have at least m unique characters. Examples Input 5 3 abc aaa acd bcc xyz Output 3 Input 3 2 abcd efg hij Output 3","solution":"def count_strings_with_unique_characters(p, m, b): Returns the number of strings in list b that have at least m unique characters. :param p: integer, number of strings :param m: integer, minimum number of unique characters required :param b: list of strings :return: integer, the number of strings with at least m unique characters count = 0 for string in b: if len(set(string)) >= m: count += 1 return count"},{"question":"A leading e-commerce company is planning to offer special discounts on Black Friday. They have a list of products, each with a unique identifier and a discount percentage. However, due to a technical glitch, the discounts have been assigned incorrectly: higher discounts were given to less popular products and lower discounts to more popular products. The company wants to rectify this by swapping the discounts such that the more popular products receive higher discounts. You are given two lists: the first list contains the popularity score of each product, and the second list contains the discount percentage. Your task is to rearrange the discount percentages such that the product with the higher popularity score gets a higher discount percentage. The output should be the rearranged list of discount percentages, matching the original order of products by their popularity scores. Input: - The first line contains an integer `n`, the number of products (1 ≤ n ≤ 100,000). - The second line contains `n` integers separated by spaces, representing the popularity scores of the products. - The third line contains `n` integers separated by spaces, representing the discount percentages assigned to each product. Output: - A single line containing `n` integers separated by spaces, representing the corrected list of discount percentages, in the order of their respective product\'s popularity scores. Example: Input: 5 50 40 60 30 20 10 20 30 40 50 Output: 40 30 50 20 10 Explanation: Products sorted by popularity scores: 60, 50, 40, 30, 20 Discount percentages in descending order: 50, 40, 30, 20, 10 Rearranging to match the original order of popularity scores: - Popularity 50 gets highest discount 40 - Popularity 40 gets next highest discount 30 - Popularity 60 gets highest discount 50 - Popularity 30 gets next highest discount 20 - Popularity 20 gets lowest discount 10","solution":"def rearrange_discounts(popularity_scores, discount_percentages): This function rearranges the discount percentages such that the product with the higher popularity score gets a higher discount percentage. sorted_indexes = sorted(range(len(popularity_scores)), key=lambda i: popularity_scores[i]) sorted_discounts = sorted(discount_percentages) result = [0] * len(popularity_scores) for i, idx in enumerate(sorted_indexes): result[idx] = sorted_discounts[i] return result"},{"question":"You are organizing a relay race for children with special needs. The race has n stations lined up in a straight line. Each station has a positive integer value which denotes the number of treats available at that station. Each child can collect treats from a station and distribute them to their friends. However, to make sure that every child gets a chance to collect treats, you need to define the order in which the children will visit the stations. Since the children are of different age groups, they may prefer visiting stations in different sequences. You want to find an order of visit to stations such that the total number of ways to distribute the treats is maximized. At each station, a child can either take all treats or leave them. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of stations. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the number of treats at each station. Output For each test case, output the total number of ways the treats can be distributed such that the sum of treats collected is maximized. Example Input 3 3 1 2 3 4 4 1 2 3 5 3 1 2 7 5 Output 4 8 32 Explanation In the first example, the child can either take 1 treat from the first station, or 2 treats from the second station, or 3 treats from the third station. Thus, the number of possible ways to distribute the treats is 2^3 = 8. In the second example, the total number of ways to distribute the treats is 2^4 = 16, as there are 4 stations, and at each station, the child has 2 options - take or leave the treats. In the third example, there are 5 stations. If a child decides to take treats from each station, they can choose to take treats from any of the 5 stations in an optimal order. Hence the number of ways is 2^5 = 32.","solution":"def max_ways_to_distribute_treats(t, test_cases): results = [] for test in test_cases: n = test[0] results.append(2 ** n) return results"},{"question":"Given a list of integers and N queries, each querying about the subarray defined by indices Li and Ri (both inclusive), determine the sum of elements in the subarray for each query. Input First line: An integer M, the number of elements in the list. Next line: M integers, the elements of the list. Next line: An integer N, the number of queries. Next N lines, each containing two integers Li and Ri. Output Print N lines, each denoting the sum of elements in the subarray defined by Li and Ri for each query. Constraints 1 ≤ M ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ Li ≤ Ri ≤ M -10^4 ≤ Element of the list ≤ 10^4 SAMPLE INPUT 5 1 2 3 4 5 3 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15 Explanation For query 1: Subarray [1,3] is [1, 2, 3]. The sum is 1+2+3=6. For query 2: Subarray [2,4] is [2, 3, 4]. The sum is 2+3+4=9. For query 3: Subarray [1,5] is [1, 2, 3, 4, 5]. The sum is 1+2+3+4+5=15.","solution":"def prefix_sums(arr): Returns the prefix sum array of the given array. prefix_sum_arr = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sum_arr[i] = prefix_sum_arr[i - 1] + arr[i - 1] return prefix_sum_arr def query_subarray_sum(prefix_sum_arr, li, ri): Returns the sum of elements from index li to ri using the prefix sum array. return prefix_sum_arr[ri] - prefix_sum_arr[li - 1] def solve_subarray_sums(m, arr, n, queries): Solves the problem of finding sum of elements in the subarray for each query. results = [] prefix_sum_arr = prefix_sums(arr) for query in queries: li, ri = query results.append(query_subarray_sum(prefix_sum_arr, li, ri)) return results"},{"question":"Given a list of n products available in a store, each product i has a price p_i and a quality q_i. There are m customers. Each customer j has a budget b_j and a minimum required quality min_q_j. A customer will only buy a product if the product’s price is within their budget (i.e., p_i ≤ b_j) and the product’s quality meets or exceeds the customer\'s minimum quality requirement (i.e., q_i ≥ min_q_j). Calculate the total cost incurred by each customer if they buy the most expensive product they can afford and meets their quality requirement. If a customer cannot buy any product, their incurred cost is 0. Input The first line contains two integers n and m (1 ≤ n ≤ 100,000), the number of products available and the number of customers, respectively. The second line contains n integers p_i (1 ≤ p_i ≤ 1,000,000), the price of each product. The third line contains n integers q_i (1 ≤ q_i ≤ 1,000,000), the quality of each product. The fourth line contains m integers b_j (1 ≤ b_j ≤ 1,000,000), the budget of each customer. The fifth line contains m integers min_q_j (1 ≤ min_q_j ≤ 1,000,000), the minimum quality required by each customer. Output Print m integers, where the i-th integer represents the total cost incurred by the i-th customer. Examples Input 5 3 4 3 5 7 2 10 8 6 5 7 6 10 8 7 5 11 Output 4 7 0 Input 4 2 1 10 3 6 3 8 5 2 12 4 7 4 Output 10 3 Note In the first example, the first customer can buy the product with price 4 and quality 10 because it’s the most expensive product within the customer’s budget (6) and meets the minimum quality requirement (7). The second customer buys the most expensive product within budget 10 that meets the minimum quality 5, which is the product with price 7 and quality 5. The third customer cannot buy any product as no available product has the required quality of 11. In the second example, the first customer buys the most expensive product within budget 12 that meets the minimum quality 7, which is the product with price 10 and quality 8. The second customer buys the most expensive product within budget 4 that meets the minimum quality 4, which is the product with price 3 and quality 5.","solution":"def total_cost(n, m, prices, qualities, budgets, min_qualities): results = [] for j in range(m): max_affordable_price = 0 for i in range(n): if prices[i] <= budgets[j] and qualities[i] >= min_qualities[j]: max_affordable_price = max(max_affordable_price, prices[i]) results.append(max_affordable_price) return results # Example usage n = 5 m = 3 prices = [4, 3, 5, 7, 2] qualities = [10, 8, 6, 5, 7] budgets = [6, 10, 8] min_qualities = [7, 5, 11] print(total_cost(n, m, prices, qualities, budgets, min_qualities)) # Output: [4, 7, 0]"},{"question":"A group of friends is planning a hiking trip. They want to distribute their supplies equally among all participants. Each friend can carry a different weight of supplies, but they want to ensure that the difference in the weights carried by each friend is minimized. Write a program to determine the minimum possible maximum weight each friend has to carry if it is possible to distribute the supplies equally. If it is not possible to distribute the supplies equally, output -1. Input The first line of input contains an integer T denoting the number of test cases. Each test case consists of two lines: - The first line contains two integers N (the number of friends) and M (the total number of supplies). - The second line contains N space-separated integers W1, W2, ..., WN denoting the initial weights each friend can carry. Output For each test case, output a single integer representing the minimum possible maximum weight each friend has to carry. If it is impossible to distribute the supplies equally, print -1. Constraints 1 ≤ T ≤ 50 1 ≤ N, M ≤ 1000 1 ≤ Wi ≤ 1000 Example Input: 2 3 15 5 5 5 4 10 3 3 3 3 Output: 5 3 Explanation Example case 1: Each of the three friends can carry 5 units of supplies. Therefore, the minimum possible maximum weight is 5. Example case 2: It\'s not possible to distribute 10 units of supplies equally among 4 friends as each friend will need to carry more than 3 units. Hence, the output is -1.","solution":"def min_max_weight(T, test_cases): results = [] for case in test_cases: N, M, weights = case[\'N\'], case[\'M\'], case[\'weights\'] if sum(weights) < M: results.append(-1) continue left, right = 0, max(weights) best = -1 while left <= right: mid = (left + right) // 2 current = sum(min(mid, w) for w in weights) if current >= M: best = mid right = mid - 1 else: left = mid + 1 results.append(best) return results def process_input(output_lines): T = int(output_lines[0]) test_cases = [] line_idx = 1 for _ in range(T): N, M = map(int, output_lines[line_idx].split()) weights = list(map(int, output_lines[line_idx + 1].split())) test_cases.append({\'N\': N, \'M\': M, \'weights\': weights}) line_idx += 2 return T, test_cases def main(input_lines): T, test_cases = process_input(input_lines) results = min_max_weight(T, test_cases) return \\"n\\".join(map(str, results))"},{"question":"Harry has found an enchanted forest where there are n magical trees arranged in a straight line. Each tree has a certain amount of magical energy. Harry can cut down several of these trees to harvest their energy. However, there is a rule: he can only cut down trees that are at least distance k away from each other. Given the magical energy of each tree and the distance k, help Harry find the maximum magical energy he can harvest. Harry starts at tree 1 and moves to the right. For each tree, he decides whether to cut it down or skip it based on future possibilities. The distance constraint applies, so if he cuts down a tree at position i, he cannot cut down any tree from position i+1 to i+k. # Input The input data consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of trees and the minimum distance between two trees that can be cut. The second line of each test case contains n integers ai (0 ≤ ai ≤ 1000) — the magical energy of each tree. # Output For each test case, print a single integer — the maximum magical energy Harry can harvest for the given test case. # Example Input: ``` 2 5 2 10 5 15 20 25 6 1 4 2 6 5 3 8 ``` Output: ``` 35 18 ``` # Explanation In the first test case, Harry can cut down trees at positions 1 and 4, harvesting 10 + 25 = 35 energy. In the second test case, Harry can cut down trees at positions 1, 3, and 6, harvesting 4 + 6 + 8 = 18 energy.","solution":"def max_magical_energy(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] energy = test_cases[i][1] dp = [0] * n for j in range(n): if j == 0: dp[j] = energy[j] else: dp[j] = energy[j] if j > k: dp[j] += max(dp[:j-k]) results.append(max(dp)) return results"},{"question":"Write a program that will help you determine the maximum profit that can be achieved by selling fruits at different markets. Each fruit has a corresponding price list for each market and any fruit can be sold in only one market. The first line contains two integers `f` and `m` denoting the number of fruits and the number of markets respectively. The next `f` lines each contain `m` integers denoting the prices of each fruit in each market. Your task is to select a single market for each fruit such that the total profit is maximized. Print the maximum profit that can be achieved. Constraints: - 1 ≤ f, m ≤ 1000 - 1 ≤ price of each fruit in each market ≤ 1000 Input The first line contains two integers `f` and `m` respectively. The next `f` lines each contain `m` integers representing the price list of each fruit in the markets. Output Output a single integer representing the maximum profit. Example Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 18 Explanation: - For the first fruit, the maximum price is 3 in the third market. - For the second fruit, the maximum price is 6 in the third market. - For the third fruit, the maximum price is 9 in the third market. Thus, the maximum profit is 3 + 6 + 9 = 18.","solution":"def max_profit(f, m, prices): Calculate the maximum profit that can be achieved by selling each fruit in the market that offers the highest price. Parameters: f (int): Number of fruits m (int): Number of markets prices (list of list of int): Price list with f lists of m integers Returns: int: Maximum profit max_profit = 0 for fruit_prices in prices: max_profit += max(fruit_prices) return max_profit"},{"question":"You are given a list of n space-separated integers and need to process q queries. Each query is described by two integers li and ri (1-based indices). For each query, you should calculate the sum of the integers in the sublist from index li to ri (inclusive). Input The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of integers in the list. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the integers in the list. The third line contains an integer q (1 ≤ q ≤ 100 000) — the number of queries. The i-th of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the description of the i-th query. Output Print q lines. The i-th line should contain the sum of the integers in the sublist from index li to ri. Examples Input 5 10 20 30 40 50 3 1 3 2 4 1 5 Output 60 90 150 Note In the first query, the sum of the sublist from index 1 to 3 is 10 + 20 + 30 = 60. In the second query, the sum of the sublist from index 2 to 4 is 20 + 30 + 40 = 90. In the third query, the sum of the sublist from index 1 to 5 is 10 + 20 + 30 + 40 + 50 = 150.","solution":"def process_queries(n, array, queries): Processes the given queries to find the sum of elements between the provided indices. Args: n (int): The number of integers in the list. array (list): The list of integers. queries (list of tuples): Each tuple contains two integers li and ri representing the query. Returns: list: The list of sums for each query. # Create a prefix sum array prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + array[i] # Process each query results = [] for li, ri in queries: sum_sublist = prefix_sum[ri] - prefix_sum[li - 1] results.append(sum_sublist) return results"},{"question":"Jim\'s Marathon Jim is a dedicated marathon runner and is constantly trying to improve his performance. He maintains detailed records of how far he runs every day. Each month, he wants to calculate the total distance he has run, and his single best run in that month to track his progress. Your task is to write a program that takes a list of his daily running distances for a month and returns the total distance he has run and the single longest distance he has run in that month. Input: The input contains a single line of integers separated by spaces. Each integer represents the distance Jim ran in kilometers on a given day. The number of days D (1 ≤ D ≤ 31) in a month can vary. Output: The output should be two integers on a single line separated by a space. The first integer is the total distance Jim ran in the month, and the second integer is the longest distance he ran on any single day. Example Input: 5 10 7 3 12 5 Output: 42 12 Input: 2 3 5 1 4 9 Output: 24 9","solution":"def calculate_total_and_max_distance(distances): This function takes a list of daily running distances and returns: - the total distance run in the month - the longest distance run in the month Parameters: distances (list of int): list of distances run each day in the month Returns: tuple: (total distance, longest distance) total_distance = sum(distances) max_distance = max(distances) return total_distance, max_distance"},{"question":"The local telecom company has commissioned you to write a program that helps them with verifying phone numbers. In your country, a valid phone number is defined as a sequence of exactly 10 digits where the first digit cannot be 0. Your task is to check whether a given phone number is valid or not. Input The only line of the input contains a string s (1 ≤ |s| ≤ 100) — the phone number provided by a potential customer. Output Print \\"YES\\" if the phone number is valid, and \\"NO\\" otherwise. Examples Input 9876543210 Output YES Input 0123456789 Output NO Input 12345abcd! Output NO","solution":"def is_valid_phone_number(s): Checks if the provided phone number is valid. A valid phone number is a sequence of exactly 10 digits where the first digit cannot be 0. Args: s (str): The phone number as a string. Returns: str: \\"YES\\" if the phone number is valid, otherwise \\"NO\\". if len(s) == 10 and s.isdigit() and s[0] != \'0\': return \\"YES\\" return \\"NO\\" # Example Usage # phone_number = \\"9876543210\\" # print(is_valid_phone_number(phone_number)) # Output: \\"YES\\""},{"question":"The Bobcat is monitoring a pipeline system in Bob Country, which consists of `n` junctions. The pipelines between junctions form a tree (a connected graph without cycles). Each junction has a monitoring station to check the pressure of the water flowing through the pipelines, and the pressure readings are recorded as integer values. Bobcat wants to find two different junctions in the system, such that the absolute difference between their pressure readings is maximized. He needs to determine this maximum absolute difference. Input: The first line contains a single integer `n` (2 ≤ n ≤ 200,000) — the number of junctions. The second line contains `n` integers `p_1, p_2, ..., p_n` (-10^9 ≤ p_i ≤ 10^9) — the pressure readings at each junction. Each of the next `n - 1` lines describes a pipeline and contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), where `u` and `v` are the junctions connected by that pipeline. It is guaranteed that the graph of pipeline connectivity is a tree. Output: Print one number — the maximum absolute difference between pressure readings of any two junctions. Examples: Input: ``` 3 1 3 5 1 2 2 3 ``` Output: ``` 4 ``` Input: ``` 4 10 -5 6 -8 1 2 1 3 3 4 ``` Output: ``` 18 ``` Note: In the first example, the optimal difference is between junctions with pressures 1 and 5. In the second example, the optimal difference is between junctions with pressures 10 and -8.","solution":"def max_pressure_difference(n, pressures, pipelines): Returns the maximum absolute difference between pressure readings at any two junctions. :param n: Integer, number of junctions. :param pressures: List of integers, pressure readings at each junction. :param pipelines: List of tuples, each tuple contains two integers indicating junctions connected by pipelines. :return: Integer, the maximum absolute difference between pressure readings. max_pressure = max(pressures) min_pressure = min(pressures) return abs(max_pressure - min_pressure)"},{"question":"Given a matrix M with n rows and m columns, your task is to perform the following operations: * update(r1, c1, r2, c2, x): Add x to all the elements in the submatrix with its top-left corner at (r1, c1) and bottom-right corner at (r2, c2). * getValue(r, c): Report the value of the element at position (r, c). Initially, all elements in the matrix are 0. Constraints: * 1 ≤ n, m ≤ 1000 * 1 ≤ q ≤ 100000 * 1 ≤ r1 ≤ r2 ≤ n * 1 ≤ c1 ≤ c2 ≤ m * 1 ≤ r, c ≤ n, m * 0 ≤ x < 1000 Input: n m q query1 query2 ... queryq The first line contains n (the number of rows), m (the number of columns), and q (the number of queries). Each of the following q lines contains either: 0 r1 c1 r2 c2 x or 1 r c The first integer represents the type of query. ‘0’ denotes update(r1, c1, r2, c2, x) and ‘1’ denotes getValue(r, c). Output: For each getValue operation, print the value. Examples: Input: 3 3 4 0 1 1 2 2 2 0 2 2 3 3 3 1 1 1 1 2 3 Output: 2 3 Input: 2 2 5 1 1 1 0 1 1 2 2 1 1 2 2 0 1 2 2 2 2 1 2 2 Output: 0 1 3","solution":"class Matrix: def __init__(self, n, m): self.n = n self.m = m self.matrix = [[0] * m for _ in range(n)] def update(self, r1, c1, r2, c2, x): for i in range(r1-1, r2): for j in range(c1-1, c2): self.matrix[i][j] += x def getValue(self, r, c): return self.matrix[r-1][c-1] def process_queries(n, m, queries): matrix = Matrix(n, m) result = [] for query in queries: if query[0] == 0: _, r1, c1, r2, c2, x = query matrix.update(r1, c1, r2, c2, x) elif query[0] == 1: _, r, c = query result.append(matrix.getValue(r, c)) return result"},{"question":"An online rental service needs to maintain accurate records of the books rented by its users. The system records whenever a user rents or returns a book. Given the sequence of these events, your task is to determine the maximum number of books rented out at any point in time. Each event is represented by either \'r\' (for rent) or \'t\' (for return) followed by the user ID and book ID involved in the event. Assume that the rental system is correctly handling the logic, meaning a user cannot return a book they haven\'t rented. Your goal is to write a function that determines the maximum number of books that are rented out at any given time based on the sequence of events. Input The first line contains an integer N (1 ≤ N ≤ 100 000), the total number of events. The following N lines each contain an event in the format described above: either `r [user_id] [book_id]` or `t [user_id] [book_id]`, where user_id and book_id are integers. Output An integer representing the maximum number of books rented out at any point in time. Example Input ``` 7 r 1 101 r 2 202 r 1 102 t 1 101 r 3 304 r 2 204 t 2 202 ``` Output ``` 4 ``` Explanation In this example, the sequence of events is as follows: 1. User 1 rents book 101 2. User 2 rents book 202 3. User 1 rents book 102 (3 books rented in total) 4. User 1 returns book 101 (2 books rented in total) 5. User 3 rents book 304 (3 books rented in total) 6. User 2 rents book 204 (4 books rented in total) 7. User 2 returns book 202 (3 books rented in total) The maximum number of books rented out at any point is 4.","solution":"def max_rented_books(events): This function takes a list of events and calculates the maximum number of books rented out at any point in time. current_rented = 0 max_rented = 0 for event in events: action, user_id, book_id = event.split() if action == \'r\': current_rented += 1 if current_rented > max_rented: max_rented = current_rented elif action == \'t\': current_rented -= 1 return max_rented"},{"question":"Given a list of words, determine if they are sorted lexicographically according to an unknown alphabet ordering. Each word consists of only lowercase letters. The provided order will be a permutation of the standard lowercase English alphabet. Write a function that accepts the list of words and the unknown alphabet ordering, and returns a boolean value indicating whether the words are sorted correctly according to the unknown ordering. # Constraints: * 1 <= words.length <= 100 * 1 <= words[i].length <= 20 * The words consist of lowercase English letters only. * The order is a permutation of \'abcdefghijklmnopqrstuvwxyz\'. # Input: - An integer n, the number of words. - A list of n words. - A string of length 26, representing the unknown alphabet ordering. # Output: - A boolean value, \'True\' if the words are sorted correctly according to the unknown ordering, otherwise \'False\'. # Example: **Input:** ``` 5 [\\"hello\\", \\"leetcode\\", \\"world\\", \\"word\\", \\"row\\"] \\"hlabcdefgijkmnopqrstuvwxyz\\" ``` **Output:** ``` False ``` **Explanation:** According to the given order \'h\' < \'l\', so \\"hello\\" < \\"leetcode\\" is correct. But \\"world\\" < \\"word\\" contradicts the order since \'r\' < \'l\' is not correct based on the provided ordering. Therefore, the function should return False. **Input:** ``` 3 [\\"apple\\", \\"app\\", \\"banana\\"] \\"abcdefghijklmnopqrstuvwxyz\\" ``` **Output:** ``` False ``` **Explanation:** According to the usual alphabetical order, \\"apple\\" should be before \\"app\\" since \'e\' < \'∅\' (an empty character). Hence, the function should return False. Write your function to solve this problem.","solution":"def is_sorted_lexicographically(words, order): Determines if the given list of words is sorted lexicographically according to an unknown alphabet ordering. :param words: List of words to check :param order: A string representing the unknown alphabet ordering :return: Boolean value indicating if the words are sorted correctly # Create a mapping from character to its index in the `order` string order_index = {char: index for index, char in enumerate(order)} # Function to convert a word into its corresponding index list according to `order` def to_index_list(word): return [order_index[char] for char in word] # Convert each word to its index list index_lists = [to_index_list(word) for word in words] # Check if the index lists are sorted return all(index_lists[i] <= index_lists[i+1] for i in range(len(index_lists) - 1)) # Example usage: # print(is_sorted_lexicographically([\\"hello\\", \\"leetcode\\", \\"world\\", \\"word\\", \\"row\\"], \\"hlabcdefgijkmnopqrstuvwxyz\\")) # Output: False # print(is_sorted_lexicographically([\\"apple\\", \\"app\\", \\"banana\\"], \\"abcdefghijklmnopqrstuvwxyz\\")) # Output: False"},{"question":"Mr. A is playing a different kind of alien game where he has to ensure that the game string remains interesting according to certain rules. The game starts with a string s of lowercase English letters, and in each turn, Mr. A can choose a substring p of length k from s. He then selects a character c that does not already exist in p, if possible, and inserts c at the end of p, ensuring that the resultant string is still a substrings of s. The objective is to determine the maximum number of different letters in the resultant string after m turns. Input The input consists of a single line containing three integers: n, k, and m (1 ≤ k ≤ n ≤ 100, 1 ≤ m ≤ 100) and a string s of length n. Output Print one integer — the maximum possible number of different letters in the resultant string after m turns. Examples Input 8 3 2 abcdefgh Output 10 Input 5 2 3 abcde Output 8 Input 6 4 1 abcdef Output 7 Note In the first sample test string s = \\"abcdefgh\\", after 2 turns of selecting \'abc\' and \'def\', the resultant string could be \\"abcdi\\" and \\"dekf\\". Thus the answer is 10 (8 initial + 2 new characters). In the second sample test string s = \\"abcde\\", after 3 turns of selecting substrings and inserting new characters, up to 3 new characters can be added to the string \\"abcde\\". Thus the answer is 8. In the third sample test string s = \\"abcdef\\", after 1 turn, a new character can be added to \\"abcd\\", making the resultant string include up to 7 different letters.","solution":"def max_diff_letters(n, k, m, s): Calculate the maximum number of different letters in the resultant string after m turns. Args: n (int): Length of string s (1 ≤ k ≤ n ≤ 100). k (int): Length of substring (1 ≤ k ≤ n). m (int): Number of turns (1 ≤ m ≤ 100). s (str): The initial string. Returns: int: The maximum number of different letters in the resultant string after m turns. unique_characters = set(s) # Maximum number of unique characters that can be in the resultant string after m turns max_diff_chars = len(unique_characters) + m # Ensure that this number does not exceed the total distinct lowercase English letters (26) return min(max_diff_chars, 26)"},{"question":"You are given a list of n positive integers. Your task is to determine if there exists a subset of these numbers such that their sum is even. If such a subset exists, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line of the input contains one integer t (1 ≤ t ≤ 25) — the number of queries. Then t queries follow. The first line of each query contains one integer n (1 ≤ n ≤ 100) — the length of the list. The second line of each query contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000), which are the elements of the list. Output For each query, print \\"YES\\" if there exists a subset whose sum is even, otherwise print \\"NO\\". Example Input 3 4 1 3 5 7 3 2 4 6 5 9 3 7 5 2 Output NO YES YES","solution":"def is_subset_sum_even(t, queries): results = [] for i in range(t): n = queries[i][0] a = queries[i][1] has_odd = any(x % 2 == 1 for x in a) has_even = any(x % 2 == 0 for x in a) if has_odd and has_even: results.append(\\"YES\\") elif all(x % 2 == 0 for x in a): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage t = 3 queries = [ (4, [1, 3, 5, 7]), (3, [2, 4, 6]), (5, [9, 3, 7, 5, 2]), ] print(is_subset_sum_even(t, queries))"},{"question":"The Galactic Postal Service (GPS) operates in a galaxy with N planets, labeled from 1 to N. Each planet has a postal demand represented by a tuple (d_i, t_i), where d_i is the number of packages to deliver and t_i is the planet\'s unique delivery time requirement. The GPS can build transfer stations on selected planets. The cost of building a transfer station on the i-th planet is directly proportional to the number of packages, d_i, and an additional fixed delivery time cost, t_i. Specifically, the cost is given by the formula (d_i * C + t_i) where C is a fixed constant. For efficient delivery, the GPS aims to minimize the total building cost of the transfer stations while ensuring that every planet gets its packages delivered through some planet with a transfer station (possibly the planet itself). Please write a program to calculate the minimum total building cost. Input The input is given in the following format. N C d_1 t_1 d_2 t_2 ... d_N t_N The first line provides the number of planets N (2 ≤ N ≤ 10^5) and the constant C (1 ≤ C ≤ 10^3). Each of the following N lines provides integers d_i (1 ≤ d_i ≤ 10^3) and t_i (1 ≤ t_i ≤ 10^9). Output Output the minimum total building cost. Examples Input 3 2 5 10 6 8 2 3 Output 38 Input 4 1 7 5 2 3 4 9 3 6 Output 20 Input 2 10 10 200 20 300 Output 500","solution":"def min_total_building_cost(N, C, packages): Calculate the minimum total building cost of transfer stations. Parameters: N (int): The number of planets. C (int): The fixed constant cost multiplier. packages (list of tuples): List containing tuples of (d_i, t_i) for each planet. Returns: int: The minimum total building cost. # Initiate total cost as infinite min_cost = float(\'inf\') # Iterate over each planet and calculate the total cost assuming # building transfer station on that planet for i in range(N): d_i, t_i = packages[i] current_cost = d_i * C + t_i min_cost = min(min_cost, current_cost) return min_cost # Function to parse input and call the main function for result def main(input_str): lines = input_str.strip().split(\'n\') N, C = map(int, lines[0].split()) packages = [tuple(map(int, line.split())) for line in lines[1:]] return min_total_building_cost(N, C, packages)"},{"question":"Sam loves arrays and mathematical operations on them. Consider an array of integers `A` where the array length is `n`. One day, Sam decides to perform a specific operation on the array: 1. Choose any subarray of A with length `m` (1 ≤ m ≤ n). 2. For the chosen subarray, calculate the sum of all the elements in it. 3. Divide the sum by the length of the subarray (i.e., `m`). Sam wants to find the maximum value of the result of this operation over all possible subarrays. Help Sam by writing a program to find this maximum value. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the array. The second line contains `n` space-separated integers A1, A2, ..., An (|Ai| ≤ 10^4). Output Print the maximum possible value of the result of the operation described above. Examples Input 5 1 2 3 4 5 Output 5 Input 3 -1 -2 -3 Output -1 Note In the first example, Sam can choose the subarray [5], and the result of the operation will be 5/1 = 5. In the second example, Sam can choose the subarray [-1], and the result of the operation will be -1/1 = -1.","solution":"def max_average_subarray(n, A): Function to find the maximum value of the result of the operation over all possible subarrays. Args: n : int : Length of the array A : List[int] : List of integers representing the array Returns: float : Maximum possible value of the result of the operation # Initialize the maximum value as a very small number. max_value = float(\'-inf\') # Iterate through each subarray length m from 1 to n for m in range(1, n + 1): # Temporary sum of current subarray current_sum = sum(A[:m]) max_value = max(max_value, current_sum / m) # Iterate through subsequent elements to get all subarray sums of length m for i in range(m, n): current_sum += A[i] - A[i - m] max_value = max(max_value, current_sum / m) return max_value"},{"question":"Ryo has a row of N houses, and each house has a certain number of windows. Ryo can do the following operations any number of times: * Choose a contiguous segment of houses and repaint all the windows of the houses in that segment. The cost of repainting each house\'s windows is equal to the number of windows in that house. Ryo wants to repaint the windows of all the houses in such a way that the total cost is minimized. Help Ryo find the minimum total cost to repaint all the windows. Constraints * 1 le N le 3 times 10^5 * 1 le W_i le 10^9 * All values in input are integers. Input Input is given from Standard Input in the following format: N W_1 W_2 ldots W_N Output Print a single integer, the minimum total cost to repaint all the windows. Examples Input 3 1 2 3 Output 6 Input 4 2 2 2 2 Output 8 Input 5 5 4 3 2 1 Output 15","solution":"def minimum_repainting_cost(N, windows): Returns the minimum total cost needed to repaint all windows. Parameters: N (int): Number of houses. windows (list): List containing the number of windows in each house. Returns: int: Minimum total cost to repaint all windows. return sum(windows)"},{"question":"Problem statement Given a string `s` representing a mathematical expression, your task is to evaluate the expression and return the result as an integer. The expression only contains non-negative integers, `+`, `-`, `*`, `/` operators, and empty spaces. The integer division should truncate towards zero. # Function Signature ```python def evaluate_expression(s: str) -> int: pass ``` # Input - `s`: A string `s` of length `1 ≤ |s| ≤ 10000` containing a valid mathematical expression. # Output - `return value`: The result of the evaluated expression as an integer. # Example Input ``` \\"3+2*2\\" ``` Output ``` 7 ``` Input ``` \\" 3/2 \\" ``` Output ``` 1 ``` Input ``` \\" 3+5 / 2 \\" ``` Output ``` 5 ``` # Constraints - The input string is guaranteed to be a valid mathematical expression. - The order of operations follows conventional rules (multiplication and division before addition and subtraction). - Division should truncate towards zero. # Notes - Implement an algorithm to parse and evaluate the expression considering the order of operations. - Do not use the `eval` function of Python as it won\'t be accepted for this task.","solution":"def evaluate_expression(s: str) -> int: Evaluate a mathematical expression and return the result as an integer. The expression only contains non-negative integers, +, -, *, / operators, and empty spaces. The integer division should truncate towards zero. s = s.replace(\\" \\", \\"\\") # Remove all spaces stack = [] num = 0 sign = \\"+\\" for i in range(len(s)): if s[i].isdigit(): num = num * 10 + int(s[i]) if s[i] in \\"+-*/\\" or i == len(s) - 1: if sign == \\"+\\": stack.append(num) elif sign == \\"-\\": stack.append(-num) elif sign == \\"*\\": stack.append(stack.pop() * num) elif sign == \\"/\\": stack.append(int(stack.pop() / num)) sign = s[i] num = 0 return sum(stack)"},{"question":"You are given a sequence of distinct integers a1, a2, ..., an. An integer \\"b\\" is called a multiple of a sequence if and only if there exist i and j (1 ≤ i < j ≤ n) such that b = ai * aj. Your task is to find out how many distinct multiples of the sequence exist and what they are. Input The first line contains a single integer n (2 ≤ n ≤ 100). The second line contains n distinct space-separated integers ai (1 ≤ ai ≤ 10^9). Output The first line should contain a single integer — the number of distinct multiples of the sequence. The second line should contain these multiples in non-decreasing order. Examples Input 3 2 3 5 Output 3 6 10 15 Input 4 1 4 8 16 Output 6 4 8 16 32 64 128 Input 2 7 11 Output 1 77 Note In the first example, the multiples are 2*3=6, 2*5=10, and 3*5=15. In the second example, the multiples are 1*4=4, 1*8=8, 1*16=16, 4*8=32, 4*16=64, and 8*16=128. In the third example, the multiple is 7*11=77.","solution":"def find_distinct_multiples(n, sequence): Returns the number of distinct multiples of the sequence and the sorted list of these multiples. multiples = set() for i in range(n): for j in range(i + 1, n): multiples.add(sequence[i] * sequence[j]) sorted_multiples = sorted(multiples) return len(sorted_multiples), sorted_multiples # Example usage: # n = 3 # sequence = [2, 3, 5] # print(find_distinct_multiples(n, sequence)) # Output: (3, [6, 10, 15])"},{"question":"The city is planning to construct several new buildings, and the urban planning committee needs your help to ensure that the aesthetic and practical standards are met. Specifically, they want to ensure that no building blocks the sunlight of another building. Given the heights and locations of buildings, there should be no building that completely blocks the sunlight for another building, which is situated at a smaller x-coordinate. For simplicity, assume all buildings have the same width and are aligned along the x-axis. A building is said to block the sunlight for another building if it stands to the right (has a greater x-coordinate) and its height is greater than or equal to the height of the building on its left. Given the number of planned buildings, their heights, and x-coordinates, your task is to determine the number of buildings that are not blocked by any building to their right. Input: The first line of the input contains a single integer, B, the number of buildings. Each of the next B lines contains two space-separated integers, x (the x-coordinate) and h (the height) of a building. Output: Output a single integer, the number of buildings that are not blocked by any building to their right. Constraints: 1 ≤ B ≤ 100000 0 ≤ x ≤ 1000000000 1 ≤ h ≤ 100000 SAMPLE INPUT 5 1 5 2 3 3 6 4 4 5 2 SAMPLE OUTPUT 3 Explanation: In the example, the buildings at coordinates 1, 3, and 5 are not blocked by any building to their right. The building at coordinate 2 is blocked by the building at coordinate 3, and the building at coordinate 4 is blocked by the building at coordinate 3. Therefore, the count of buildings not blocked by any other is 3.","solution":"def count_non_blocked_buildings(buildings): Given a list of buildings with their x-coordinates and heights, returns the number of buildings that are not blocked by any building to their right. :param buildings: List of tuples, where each tuple contains two integers - x-coordinate and height of a building :return: Integer, number of buildings not blocked by any building to their right # Sort buildings according to their x-coordinate buildings.sort() # Traverse from right to left and keep track of max height seen so far max_height_right = 0 count_non_blocked = 0 for x, h in reversed(buildings): if h > max_height_right: count_non_blocked += 1 max_height_right = h return count_non_blocked"},{"question":"An autonomous robot is placed on a grid. The robot can move up, down, left, or right. It starts at position (sx, sy) and wants to reach (ex, ey) while avoiding obstacles on the grid. The grid is represented as a matrix where \'0\' indicates a free space, and \'1\' indicates an obstacle. Your task is to determine the minimum number of steps the robot needs to reach the destination. If it is not possible to reach the destination, output -1. Constraints * The grid size is n × m where 1 ≤ n, m ≤ 100. * 0 ≤ sx, sy, ex, ey < n, m * The grid values are either \'0\' or \'1\'. * The starting and ending positions (sx, sy) and (ex, ey) are guaranteed to be free spaces. Input The input is given from Standard Input in the following format: n m sx sy ex ey grid The first line contains the integers n and m. The second line contains the integers sx, sy, ex, ey. The next n lines each contain m integers that describe the grid. Output Print the minimum number of steps required to reach the destination. If it is not possible, output -1. Examples Input 5 5 0 0 4 4 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 Output 8 Input 4 4 0 0 3 3 0 0 0 1 0 1 0 1 0 1 0 1 0 0 0 0 Output 6","solution":"from collections import deque def min_steps_to_reach_destination(n, m, sx, sy, ex, ey, grid): Returns the minimum number of steps to reach (ex, ey) from (sx, sy) avoiding obstacles. Uses BFS for finding the shortest path. If the destination is not reachable, returns -1. directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Represents right, left, down, up movements queue = deque([(sx, sy, 0)]) # Queue containing (current x, current y, steps taken) visited = set() visited.add((sx, sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (ex, ey): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1"},{"question":"Peter is decorating a rectangular garden with ceramic tiles. The garden is represented as an n × m grid. Some cells in the garden already contain decorative flowers, and Peter does not want to place tiles over those flowers. Each tile covers exactly one cell and Peter wants to place tiles such that they cover the maximum possible number of empty cells without covering any cell that contains a flower. Your task is to determine the maximum number of tiles that Peter can place on the garden grid, covering the maximum number of empty cells without covering any flowers. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the garden. The next n lines contain m characters each — the description of the garden. A character \'.\' denotes an empty cell, and a character \'F\' denotes a cell with a flower. Output Print the maximum number of tiles Peter can place on the garden grid without covering any flowers. Examples Input 4 4 .... .F.. ...F .... Output 14 Input 3 3 .F. FFF .F. Output 4 Input 2 2 FF FF Output 0 Note In the first example, Peter can place tiles on 14 cells since there are 14 empty cells and none are covered with flowers. In the second example, Peter can place tiles on only 4 empty cells since most cells contain flowers and Peter cannot cover them. In the third example, there are no empty cells for Peter to place tiles, so he cannot place any tiles.","solution":"def max_tiles(n, m, garden): Returns the maximum number of tiles Peter can place in the garden without covering any flowers. max_tiles = 0 for row in garden: max_tiles += row.count(\'.\') return max_tiles # Example usage: n = 4 m = 4 garden = [\\"....\\", \\".F..\\", \\"...F\\", \\"....\\"] print(max_tiles(n, m, garden)) # Output: 14"},{"question":"Given a list of integers, determine if it can be divided into two non-empty subsets such that the sum of the elements in the two subsets is the same. If such a division is possible, return the subsets. If it is not possible, return an empty list. Input The first line contains a single integer n (2 ≤ n ≤ 1000), the number of integers in the list. The second line contains n integers separated by spaces, representing the list of integers. Each integer is between 1 and 1000. Output If it is possible to divide the list into two subsets with equal sums, output the two subsets in separate lines. If there are multiple ways to divide the list, you may output any one of them. If such a division is not possible, output an empty list. Example Input 6 1 5 11 5 7 3 Output [1, 5, 5, 3] [11, 7] Input 4 1 2 3 5 Output []","solution":"def can_partition(nums): total_sum = sum(nums) # If the sum is odd, it cannot be partitioned into two equal sum subsets if total_sum % 2 != 0: return [] subset_sum = total_sum // 2 n = len(nums) # dp[i] will be True if a subset with sum i can be achieved dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for i in range(subset_sum, num - 1, -1): dp[i] = dp[i] | dp[i - num] # If subset_sum cannot be achieved, return empty list if not dp[subset_sum]: return [] # Trace back to find the elements which sum up to subset_sum subset1 = [] subset2 = nums.copy() current_sum = subset_sum for num in nums[::-1]: if current_sum >= num and dp[current_sum - num]: subset1.append(num) subset2.remove(num) current_sum -= num return [subset1, subset2] # Example usage: n = 6 nums = [1, 5, 11, 5, 7, 3] print(can_partition(nums)) # Output example: [[1, 5, 5, 3], [11, 7]]"},{"question":"Polycarp is practicing his typing skills to become more proficient and accurate. He has a text of length l that he needs to type exactly, without any errors. He starts typing from the first character of the text and continues typing each subsequent character one-by-one until he finishes or makes a mistake. Polycarp\'s typing accuracy is determined by a list of probabilities. The list contains l probabilities, where the i-th probability p_i (0 ≤ p_i ≤ 1) represents the chance that Polycarp will type the i-th character correctly on the first attempt. Polycarp can retry typing from the last character he mistyped. If he retypes, he has the same probability of typing that character correctly as in his first attempt. Polycarp wants to know the expected number of characters he will have correctly typed once he finishes typing all characters (taking into account that he may need to retry mistyped characters until he gets them right). Input The first line of the input contains an integer l (1 ≤ l ≤ 10^5) — the length of the text. The second line contains l floating-point numbers p_1, p_2, ..., p_l (0 ≤ p_i ≤ 1) — the probabilities of typing each character correctly on the first attempt. Output Print a single floating-point number — the expected number of characters Polycarp will have correctly typed once he finishes the whole text. Your answer will be considered correct if the absolute error does not exceed 10^-6. Example Input 4 0.9 0.8 0.7 0.6 Output 4.0 Input 3 0.5 0.5 0.5 Output 3.0 Note In the first example, Polycarp has a very high probability of typing each character correctly on the first attempt. Due to retrying immediately upon errors according to accuracy probabilities, the expected value converges to the total length of the text. In the second example, despite the lower probability of 0.5 for each character, repeated retries ensure that the average number of correct characters approaches the maximum possible (which is the total length l=3).","solution":"def expected_correct_characters(l, probabilities): Calculate the expected number of correct characters typed by Polycarp. :param l: int - length of the text :param probabilities: List[float] - list of typing accuracy probabilities for each character :return: float - expected number of correct characters # Using the linearity of expectation, since for each character the probability of typing it # correctly until success is 1, the expected number of correctly typed characters should be l. return float(l)"},{"question":"There is a new game called \\"Equalize It!\\" played on a sequence of numbers. The objective of the game is to make all numbers in the sequence the same by performing a series of operations. In one operation, you can choose any two adjacent numbers and replace both of them with their arithmetic mean. The game ends when the sequence contains identical numbers. For example, given the sequence [1, 3, 2]: - Choose (1, 3) and replace them with (2, 2, 2). - Now all numbers are 2, which is the same, so the game ends. Write a program to determine the minimum number of operations required to make all numbers in the sequence the same. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The following 2t lines describe the test cases. Each test case consists of two lines: - The first line contains an integer n (2 ≤ n ≤ 10^5) — the length of the sequence. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the sequence of numbers. Output For each test case output the minimal number of operations required to make all numbers in the sequence the same. Example Input 3 3 1 3 2 4 4 4 4 4 2 1 1000000000 Output 1 0 1 Note In the first test case, you can choose to replace (1, 3) with (2, 2, 2) in one operation. In the second test case, all numbers are already the same, so no operations are needed. In the third test case, you can replace (1, 1000000000) with (500000000, 500000000) in one operation.","solution":"def min_operations_to_equalize(t, test_cases): results = [] for case in test_cases: n, a = case unique_elements = set(a) if len(unique_elements) == 1: results.append(0) else: results.append(1) return results # Input handling function def process_input(input_string): data = input_string.strip().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) a = list(map(int, data[index+1:index+n+1])) test_cases.append((n, a)) index += n + 1 return t, test_cases # Output handling function def format_output(output_list): return \\"n\\".join(map(str, output_list))"},{"question":"You are given a grid `m x n`, where `m` and `n` are both integers between 2 and 50 inclusive. Rows are enumerated from 1 to `m` from up to down, and columns are enumerated from 1 to `n` from left to right. Cell standing at the intersection of row `i` and column `j` is denoted by `(i, j)`. The grid is initially filled with 0. You need to \\"paint\\" a path on this grid. A path starts from the top-left cell `(1, 1)` and ends at the bottom-right cell `(m, n)`. You can only move from a cell to the following four directions provided there exists a corresponding cell in the grid: - Right to `(i, j + 1)` - Down to `(i + 1, j)` - Left to `(i, j - 1)` - Up to `(i - 1, j)` You are required to ensure that every cell along this path contains a \'1\'. After creating the path, output the resulting grid. It is guaranteed that at least one such path exists in the grid. # Input The first line contains two integers, `m` and `n` — the dimensions of the grid. # Output Output `m` lines each containing `n` characters, either \'0\' or \'1\'. Each character should represent the state of a cell in the grid: \'0\' denotes an unpainted cell, \'1\' denotes a painted cell along the path. # Example Input ``` 3 4 ``` Output ``` 1110 0001 0111 ``` Explanation In the `3x4` grid example, one of the valid paths would be: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,4), as indicated by the cells containing \'1\'.","solution":"def create_path_grid(m, n): Creates a grid of dimensions m x n where a valid path from top-left to bottom-right is painted with \'1\'. The path will always involve moving all the way right then all the way down if needed. grid = [[\'0\' for _ in range(n)] for _ in range(m)] # Function to paint the determined path with \'1\' for i in range(m): grid[i][0] = \'1\' for j in range(n): grid[m-1][j] = \'1\' return grid # For visualization def print_grid(grid): for row in grid: print(\\"\\".join(row))"},{"question":"In ancient Greece, there was a popular game among philosophers. It involves a numerical sequence and a particular operation. A philosopher would present a sequence of n integers a1, a2, ..., an. The challenge was to compute a unique new sequence by following a simple but fascinating rule. Given a sequence of n integers, generate a new sequence of length n - 1 where each element is the sum of the absolute differences of adjacent pairs in the original sequence. Specifically, the new sequence b1, b2, ..., bn-1 is defined as: bi = |ai - ai+1| Your task is to write a program that generates this new sequence from the given one. Input: The first line contains an integer n (2 ≤ n ≤ 10^5) — the size of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. Output: Output n - 1 integers — the new sequence b. Examples Input 5 5 3 8 2 10 Output 2 5 6 8 Input 4 1 2 3 4 Output 1 1 1","solution":"def generate_new_sequence(n, sequence): Given a sequence of n integers, generate a new sequence of length n - 1 where each element is the sum of the absolute differences of adjacent pairs in the original sequence. :param n: size of the sequence :param sequence: list of integers :return: new sequence of length n - 1 new_sequence = [abs(sequence[i] - sequence[i + 1]) for i in range(n - 1)] return new_sequence"},{"question":"You are given an array a consisting of n integers. Your task is to find two integers in the array such that their absolute difference is equal to a given integer k. For example, if the array is a = [1, 5, 3, 4, 2] and k = 2, you can find two pairs (1, 3) and (3, 5) whose differences are 2. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 100) – the size of the array and the integer difference you need to find. The second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100) – elements of the array. Output Print a single integer – the number of pairs with the absolute difference of k. Examples Input 5 2 1 5 3 4 2 Output 3 Input 4 0 1 1 1 1 Output 6","solution":"def count_pairs_with_difference(a, k): Function to count pairs in the array `a` such that their absolute difference is `k`. Parameters: a (list): List of integers. k (int): The absolute difference. Returns: int: The number of pairs with the given difference. count = 0 a = sorted(a) n = len(a) for i in range(n): for j in range(i + 1, n): if abs(a[j] - a[i]) == k: count += 1 return count"},{"question":"You are a maintenance engineer responsible for managing a fleet of robots in a warehouse. Each robot can perform a set of tasks, and each task takes a certain amount of time to complete. You need to design a scheduling algorithm that can assign tasks to robots in such a way that the overall time required to complete all tasks is minimized. You are given the following information: - The number of tasks, n (1 ≤ n ≤ 1000). - The number of robots, m (1 ≤ m ≤ 100). - An array of integers t1, t2, ..., tn where ti represents the time required to complete the i-th task (1 ≤ ti ≤ 1000). Your goal is to find the minimum possible time required to complete all tasks, assuming that tasks are assigned optimally to robots. Input - The first line contains an integer n, the number of tasks. - The second line contains an integer m, the number of robots. - The third line contains n integers t1, t2, ..., tn, where ti is the time required to complete the i-th task. Output - Output a single integer, the minimum possible time required to complete all tasks with optimal assignment. Example Input 6 3 2 14 4 16 6 5 Output 16 Explanation Assigning tasks with times [2, 4, 6] to robot 1, [5] to robot 2, and [14, 16] to robot 3 results in an optimal distribution where the maximum time required by any robot is minimized. In this case, the robot with the longest total task time has 16 units of time, which is the optimal solution.","solution":"import heapq def min_time_to_complete_tasks(n, m, task_times): Returns the minimum possible time required to complete all tasks. Parameters: n (int): Number of tasks. m (int): Number of robots. task_times (list): List of times required to complete the tasks. Returns: int: Minimum possible time required to complete all tasks with optimal assignment. # Sort tasks in descending order for more efficient task distribution task_times.sort(reverse=True) # Using a min-heap to keep track of the load on each robot robots = [0] * m heapq.heapify(robots) for time in task_times: # Assign the task to the robot with the least current load min_robot = heapq.heappop(robots) heapq.heappush(robots, min_robot + time) # The answer is the maximum load on any robot return max(robots)"},{"question":"You are a farmer managing a large field. The field is represented as a grid with m rows and n columns (1 ≤ m, n ≤ 500). Each cell in the grid can either be fertile or infertile. Fertile cells are represented by 1 and infertile cells by 0. You are tasked with planting the largest possible rectangular area of crops where all the cells in that rectangle are fertile. Specifically, you need to find the largest area of such a rectangle within the grid that consists of only 1s. Input The first line of the input contains two positive integers m, n (1 ≤ m, n ≤ 500) — the number of rows and columns in the grid. Then m lines follow, each containing n integers (either 0 or 1) representing the grid. Output Print a single integer, the largest possible area of a rectangle that contains only fertile cells (1s). Examples Input 4 4 1 0 1 1 1 1 1 1 0 1 1 0 1 1 0 0 Output 4 Input 5 5 1 0 0 1 0 1 0 1 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 0 0 Output 6 Input 3 3 0 0 0 0 0 0 0 0 0 Output 0 Note Explanation of the first testcase: The largest rectangle of fertile cells (1s) in the given grid has an area of 4 (2x2 rectangle starting from cell (2,2) to cell (3,3)). Explanation of the second testcase: The largest rectangle of fertile cells (1s) in the given grid has an area of 6 (2x3 rectangle starting from cell (3,2) to cell (4,4)). Explanation of the third testcase: As there are no fertile cells (1s) in the grid, the largest rectangle of fertile cells has an area of 0.","solution":"def maximalRectangle(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * (n + 1) for i in range(m): for j in range(n): if matrix[i][j] == 1: heights[j] += 1 else: heights[j] = 0 stack = [-1] for k in range(n + 1): while heights[k] < heights[stack[-1]]: h = heights[stack.pop()] w = k - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(k) return max_area"},{"question":"Imagine that Emily, who loves geometry, came across an intriguing problem while exploring number theory and geometry. She discovered the concept of prime factors and wondered how they might relate to shapes. Given an integer N, Emily wants to determine the number of unique prime factors of N. As her friend, you need to help Emily solve this problem efficiently. Input: The first line will contain an integer T, representing the number of test cases. Each of the next T lines will contain one integer N. Output: For each test case, print the number of unique prime factors of N. Print each result in a separate line. **Constraints:** 1 ≤ T ≤ 100 2 ≤ N ≤ 10^12 SAMPLE INPUT 2 10 12 SAMPLE OUTPUT 2 2","solution":"def unique_prime_factors_count(n): Returns the number of unique prime factors of a given number n. count = 0 if n % 2 == 0: count += 1 while n % 2 == 0: n //= 2 for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: count += 1 while n % i == 0: n //= i if n > 2: count += 1 return count def process_test_cases(test_cases): results = [] for n in test_cases: results.append(unique_prime_factors_count(n)) return results"},{"question":"You are given a rectangular grid with n rows and m columns, filled with non-negative integers. You need to determine the sum of all numbers present in the path from the top-left corner (1,1) to the bottom-right corner (n,m) of the grid. You can only move right or down at any step. However, there is a twist: due to a quake, some cells are more difficult to traverse than others. If you step on a cell (i,j) with value X, your total path cost increases by X units. Your task is to find the minimum path cost from (1,1) to (n,m). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m integers, representing the grid. The value in the grid at position (i, j) is represented by grid[i][j]. Output Output a single integer, the minimum path cost from the top-left to the bottom-right of the grid. Examples Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 Input 4 4 1 3 1 2 4 3 2 3 1 5 1 1 9 8 1 2 Output 11 Explanation In the first example, the path from (1,1) to (3,3) with minimum cost is 1→3→1→1→1, summing up to 7.","solution":"def min_path_cost(n, m, grid): # Create a dp array to store the minimum path cost to each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] # Example usage grid_3x3 = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(min_path_cost(3, 3, grid_3x3)) # Output: 7"},{"question":"In a distant land, there exists a special type of number known as \\"Balanced Numbers.\\" A number is considered balanced if the sum of digits on the left side of the middle digit(s) is equal to the sum of digits on the right side. The middle digit(s) in a number with an even number of digits are the two central digits, while in a number with an odd number of digits, it is the single central digit. Consider, for example: - The number 4218 is balanced because the sum of the first two digits (4 + 2 = 6) is equal to the sum of the last two digits (1 + 8 = 9). - The number 27553 is balanced because the sum of the first two digits (2 + 7 = 9) is equal to the sum of the last two digits (5 + 3 = 8), and the middle digit 5 doesn\'t affect the balance. You are given a list of numbers and must determine whether each number is balanced or not. Input: The first line of the input contains a single integer T, the number of test-cases. Each of the following T lines contains one test-case, which is a single integer N. Output: For each test-case, output \\"YES\\" if the number N is balanced, and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 100 1 ≤ |N| ≤ 10^18 SAMPLE INPUT 3 12321 5225 441 SAMPLE OUTPUT YES YES NO Explanation: - 12321 is a balanced number because 1 + 2 = 3 + 2 + 1. - 5225 is a balanced number because 5 + 2 = 2 + 5. - 441 is not a balanced number because 4 ≠ 1.","solution":"def is_balanced_number(number): Function to check if a number is balanced. number_str = str(number) length = len(number_str) if length == 1: return True # A single digit number is trivially balanced if length % 2 == 0: # Even length left_half = number_str[:length // 2] right_half = number_str[length // 2:] else: # Odd length left_half = number_str[:length // 2] right_half = number_str[length // 2 + 1:] left_sum = sum(int(digit) for digit in left_half) right_sum = sum(int(digit) for digit in right_half) return left_sum == right_sum def check_balanced_numbers(numbers): Function to check if each number in the list is balanced or not. results = [] for number in numbers: if is_balanced_number(number): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Imagine you are responsible for managing a large library\'s book borrowing system. The library has a rule that a user can borrow multiple books but not more than one book of the same title. You are tasked with creating a program that keeps track of the borrowed books and ensures the borrowing rules are followed. The borrowing rules are as follows: 1. A user can only borrow a book if they have not already borrowed a book with the same title. 2. Each user has a unique ID and each book has a unique title. 3. If a user attempts to borrow a book they have already borrowed, the borrowing request should be denied and an appropriate message should be displayed. # Input 1. A positive integer `n` representing the number of borrowing attempts. 2. `n` lines follow each containing a user ID (integer), and a book title (string). The end of input is indicated by a line containing a single integer `0`. # Output For each borrowing attempt, output \\"Accepted\\" if the book borrow request is valid, otherwise output \\"Denied\\". If the value of `n` is 0, discontinue further processing and end the program. # Constraints - The number of borrowing attempts `n` will be less than or equal to 1000. - The user ID will be a positive integer less than or equal to 100,000. - The book title is a string of alphanumeric characters with a maximum length of 100. # Example **Input** ``` 5 1 TheHobbit 2 TheLordOfTheRings 1 TheSilmarillion 1 TheHobbit 2 TheSilmarillion 0 ``` **Output** ``` Accepted Accepted Accepted Denied Accepted ```","solution":"def borrow_books(n, attempts): borrowed_books = {} results = [] for attempt in attempts: if attempt == \'0\': break user_id, book_title = map(str, attempt.split(maxsplit=1)) user_id = int(user_id) if user_id not in borrowed_books: borrowed_books[user_id] = set() if book_title in borrowed_books[user_id]: results.append(\\"Denied\\") else: borrowed_books[user_id].add(book_title) results.append(\\"Accepted\\") return results"},{"question":"You are given an array of integers that represent the positions of obstacles on a one-dimensional road. These obstacles prevent traffic from passing through that specific position. The road is represented by a sequence of positions from 1 to M. Two cars are starting from the 1st position and racing to the M-th position. Assume each car moves at the same speed and can only move forward to the next position. The cars can overtake each other freely and can occupy the same position unless there is an obstacle at that position. Given the list of obstacle positions, your task is to determine if both cars can reach the M-th position. If both cars can reach the M-th position, return \\"YES\\". Otherwise, return \\"NO\\". Input Format: - The first line contains two integers, M (1 ≤ M ≤ 100000) and N (0 ≤ N ≤ 100000), where M is the length of the road and N is the number of obstacles. - The second line contains N space-separated integers, which are the positions of the obstacles. Output Format: - Print \\"YES\\" if both cars can reach the M-th position, otherwise print \\"NO\\". Examples: # Example 1: Input: 10 2 3 7 Output: YES # Example 2: Input: 10 3 3 7 10 Output: NO Explanation: In the first example, both cars can avoid the obstacles at positions 3 and 7 and reach the 10th position. In the second example, the obstacle at position 10 prevents both cars from reaching the destination. Note: Consider edge cases like when there are no obstacles, or the obstacles are placed such that it is impossible to reach the destination from the starting point.","solution":"def can_reach_destination(M, N, obstacles): Determines if both cars can reach the M-th position given the positions of obstacles on the road. Parameters: - M (int): Length of the road. - N (int): Number of obstacles. - obstacles (list of int): Positions of the obstacles. Returns: - str: \\"YES\\" if both cars can reach the M-th position, otherwise \\"NO\\". if M in obstacles: return \\"NO\\" return \\"YES\\""},{"question":"In an alternate universe, a king has a special type of chessboard of size N x N. Each cell of the chessboard can either be empty or contain a treasure with a certain value. The king is interested in knowing the sum of treasures in any given sub-board of the chessboard. You are tasked with writing a program that can efficiently handle multiple queries about the sum of treasures in sub-boards. For each query, you will be given the coordinates of the top-left and bottom-right corners of a sub-board, and you have to calculate the sum of values in that sub-board. Input: - The first line contains two space-separated integers N (the size of the chessboard) and Q (the number of queries). - The following N lines each contain N space-separated integers representing the values in the cells of the chessboard (the value can be zero, representing an empty cell, or a positive integer representing a treasure). - The next Q lines each contain four space-separated integers x1, y1, x2, y2 (1-based indices) representing the coordinates of the top-left (x1, y1) and bottom-right (x2, y2) corners of the sub-board for each query. Output: - For each query, print the sum of values in the given sub-board in a new line. Constraints: - 1 ≤ N ≤ 500 - 1 ≤ Q ≤ 100000 - 1 ≤ x1 ≤ x2 ≤ N - 1 ≤ y1 ≤ y2 ≤ N - 0 ≤ Values in cells ≤ 10000 SAMPLE INPUT 4 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1 1 2 2 2 2 3 3 1 1 4 4 SAMPLE OUTPUT 14 34 136 Explanation For the first query, the sub-board from (1,1) to (2,2) includes the cells: 1 2 5 6 So, the sum is 1 + 2 + 5 + 6 = 14. For the second query, the sub-board from (2,2) to (3,3) includes the cells: 6 7 10 11 So, the sum is 6 + 7 + 10 + 11 = 34. For the third query, the entire board is considered, and the sum is calculated for all cells resulting in 136.","solution":"def preprocess_chessboard(chessboard): N = len(chessboard) prefix_sum = [[0] * (N + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, N + 1): prefix_sum[i][j] = (chessboard[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]) return prefix_sum def query_sum(prefix_sum, x1, y1, x2, y2): return (prefix_sum[x2][y2] - prefix_sum[x1 - 1][y2] - prefix_sum[x2][y1 - 1] + prefix_sum[x1 - 1][y1 - 1]) def solve_chessboard_queries(N, Q, chessboard, queries): prefix_sum = preprocess_chessboard(chessboard) results = [] for query in queries: x1, y1, x2, y2 = query results.append(query_sum(prefix_sum, x1, y1, x2, y2)) return results"},{"question":"In a small town, there are n houses arranged in a row. A group of thieves plans to rob these houses. However, due to the security system in the houses, they cannot rob two adjacent houses on the same night. Calculate the maximum amount of money that can be robbed without robbing two adjacent houses. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of houses. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the amount of money in each house. Output Print one integer — the maximum amount of money that can be robbed without robbing two adjacent houses. Examples Input 5 2 7 9 3 1 Output 12 Input 4 1 2 3 1 Output 4 Note In the first example, the best option is to rob the 1st, 3rd, and 5th houses, which gives 2 + 9 + 1 = 12. In the second example, the best option is to rob the 1st and 3rd houses, which gives 1 + 3 = 4.","solution":"def max_robbery(n, money): Calculate the maximum amount of money that can be robbed without robbing two adjacent houses. :param n: Number of houses :param money: List of amounts of money in each house :return: Maximum amount of money that can be robbed if n == 0: return 0 if n == 1: return money[0] dp = [0] * n dp[0] = money[0] if n > 1: dp[1] = max(money[0], money[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + money[i]) return dp[-1]"},{"question":"You are given a list of integers. Your task is to write a program that: * Replaces each even number in the list with its square. * Replaces each odd number in the list with its cube. * Retains the original order of the numbers after transformation. The input is a single line containing space-separated integers. The program should output the transformed list of integers in a single line, maintaining the same order as the input list. Input A single line of space-separated integers. Each integer is between -10^5 and 10^5, and the number of integers is between 1 and 100, inclusive. Output Print the transformed list of integers in a single line, space-separated. Examples Input 1 2 3 4 5 Output 1 4 27 16 125 Input -1 -2 -3 -4 -5 Output -1 4 -27 16 -125","solution":"def transform_numbers(numbers): Transforms the list of numbers such that even numbers are replaced by their squares, and odd numbers are replaced by their cubes. transformed = [] for num in numbers: if num % 2 == 0: transformed.append(num ** 2) else: transformed.append(num ** 3) return transformed def process_input(input_string): Processes the input string, transforming the numbers, and returns them as a space-separated string. numbers = list(map(int, input_string.split())) transformed_numbers = transform_numbers(numbers) return \' \'.join(map(str, transformed_numbers))"},{"question":"In a city, there is a grid of size `n x m` representing streets and intersections. Some of the cells in the grid contain traps that a person wants to avoid. A person starts at the top-left corner of the grid (cell (1,1)) and wants to reach the bottom-right corner (cell (n,m)). The person can only move right or down from a given cell to the next. Determine the number of distinct paths from the top-left corner to the bottom-right, avoiding traps. Input The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the dimensions of the grid. The next n lines each contain m characters, where: - \'.\' (a dot) represents an empty cell where the person can move. - \'T\' (a capital T) represents a trap that the person cannot step on. Output Print a single integer — the number of distinct paths from the top-left corner to the bottom-right corner, avoiding traps. If there is no valid path, print 0. Examples Input 3 3 . . . . T . . . . Output 2 Input 2 3 . T . . . . Output 1 Input 4 4 . . . . . T . . . . T . . . . . Output 4 Note In the first example, there are two distinct paths: 1. Right -> Right -> Down -> Down. 2. Down -> Down -> Right -> Right. In the second example, there is only one path: 1. Down -> Right -> Right. In the third example, there are four distinct paths: 1. All Right -> All Down. 2. Right -> Down -> Right -> Right -> Down. 3. Right -> Right -> Down -> Right -> Down. 4. Down -> Right -> Down -> Down -> Right.","solution":"def distinct_paths(grid, n, m): # Using dynamic programming to calculate the number of distinct paths if grid[0][0] == \'T\' or grid[n-1][m-1] == \'T\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'T\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] # Parsing input for testing def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [line.split() for line in lines[1:]] return grid, n, m"},{"question":"**Robot Chess Tournament** You are organizing a chess tournament where two robots, Robot_X and Robot_Y, will compete in a series of chess matches. Each match follows the standard rules of chess, but with a twist: robots have different capabilities to process moves. Robot_X is better at processing tactical sequences, while Robot_Y excels at strategic planning and long-term positions. The tournament is conducted as follows: 1. Each match consists of a series of moves by Robot_X and Robot_Y, alternating between the two robots. 2. Each move is described by a pair `(px, py)` indicating the position on the chessboard where the next move is to be processed. 3. Robot_X has a tactical processing function `TX(px, py)` that returns an integer representing the tactical advantage gained at position `(px, py)`. 4. Robot_Y has a strategic processing function `SY(px, py)` that returns an integer representing the strategic advantage gained at position `(px, py)`. 5. The match continues until all provided moves are processed. 6. The total score for Robot_X is calculated as the sum of all `TX(px, py)` values for moves processed by Robot_X. 7. The total score for Robot_Y is calculated as the sum of all `SY(px, py)` values for moves processed by Robot_Y. 8. The robot with the higher total score wins the match. Your task is to simulate the tournament and determine the winner of each match based on the provided moves and the respective tactical and strategic advantages. The input consists of multiple data sets, each describing one match. Each data set begins with an integer `N`, the number of moves in that match, followed by `N` lines, each containing two integers `px` and `py`. Input - The input starts with an integer `T`, the number of matches to simulate. - For each match, the input begins with an integer `N`, the number of moves. - The next `N` lines each contain two integers `px` and `py`, representing the positions on the board. Output - For each match, output \\"Robot_X wins.\\" if Robot_X wins, or \\"Robot_Y wins.\\" if Robot_Y wins. No extra characters are allowed in the output. **Example Input** ``` 2 3 1 2 3 4 5 6 4 2 3 4 5 6 7 8 9 ``` **Example Output** ``` Robot_X wins. Robot_Y wins. ``` **Note:** - Assume `TX(px, py)` and `SY(px, py)` functions are provided by the tournament organizers and are used internally by the robots. - The exact implementations of `TX(px, py)` and `SY(px, py)` are not provided here, but they are guaranteed to return consistent integer values for given inputs. - In case of a tie, the match is declared in favor of Robot_Y. Your task is to determine the winner of each match based on the moves and the respective scoring functions.","solution":"# Assume TX(px, py) and SY(px, py) functions are provided. # For the sake of the solution, let\'s implement dummy TX and SY functions. def TX(px, py): # Dummy implementation of TX return 2 * px + py def SY(px, py): # Dummy implementation of SY return px + 2 * py def determine_winner(T, matches): results = [] for match in matches: N, moves = match score_X = 0 score_Y = 0 for i in range(N): px, py = moves[i] if i % 2 == 0: # Robot_X\'s move score_X += TX(px, py) else: # Robot_Y\'s move score_Y += SY(px, py) if score_X > score_Y: results.append(\\"Robot_X wins.\\") else: results.append(\\"Robot_Y wins.\\") return results"},{"question":"Create a program that reads a list of integers and then finds and prints all pairs of numbers in the list that, when added together, result in a given sum. If no such pair exists, print \\"NO PAIR\\". Input The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the list. The second line contains n integers separated by spaces. The third line contains a single integer s, which is the target sum. Output Print each unique pair of integers that add up to s. Each pair should be printed in ascending order and on a new line. If no such pair exists, print \\"NO PAIR\\". Example Input 5 1 2 3 4 5 5 Output 1 4 2 3 Input 3 10 15 3 20 Output 5 15 Input 4 7 11 15 3 10 Output NO PAIR","solution":"def find_pairs_with_sum(n, nums, target_sum): Given an integer n, a list of n integers, and a target sum, finds and prints all pairs of numbers in the list that add up to the target sum. Each pair is printed in ascending order and on a new line. If no such pair exists, prints \\"NO PAIR\\". nums = sorted(nums) pairs = [] seen = set() for num in nums: complement = target_sum - num if complement in seen: pairs.append((min(num, complement), max(num, complement))) seen.add(num) if pairs: pairs = sorted(set(pairs)) for pair in pairs: print(pair[0], pair[1]) else: print(\\"NO PAIR\\") # Example usage # find_pairs_with_sum(5, [1, 2, 3, 4, 5], 5)"},{"question":"You are given a string consisting of uppercase and lowercase letters. Your task is to determine if the string meets both of the following criteria: 1. Contains at least one uppercase letter. 2. Contains at least one lowercase letter. Input The input consists of a single string s (1 ≤ |s| ≤ 100), where |s| represents the length of the string. Output Print \\"YES\\" if the string meets both criteria, otherwise print \\"NO\\". Examples Input HelloWorld Output YES Input HELLO Output NO Input helloworld Output NO","solution":"def check_string(s): Returns \\"YES\\" if the string contains at least one uppercase letter and at least one lowercase letter, otherwise returns \\"NO\\". has_upper = any(char.isupper() for char in s) has_lower = any(char.islower() for char in s) if has_upper and has_lower: return \\"YES\\" return \\"NO\\""},{"question":"Write a function to determine the smallest window in a string S that contains all characters of string T. If no such window exists, return an empty string. Input Format There will be two lines of input: First line: a string S consisting of lowercase letters Second line: a string T consisting of lowercase letters Constraints 1 ≤ |S|, |T| ≤ 1000 Output Format Return the smallest substring of S that contains all characters of T, or an empty string if no such substring exists. SAMPLE INPUT ADOBECODEBANC ABC SAMPLE OUTPUT BANC","solution":"def min_window(S, T): from collections import Counter, defaultdict if not S or not T: return \\"\\" t_count = Counter(T) s_count = defaultdict(int) have, need = 0, len(t_count) res, res_len = [-1, -1], float(\\"inf\\") l = 0 for r in range(len(S)): s_count[S[r]] += 1 if S[r] in t_count and s_count[S[r]] == t_count[S[r]]: have += 1 while have == need: if (r - l + 1) < res_len: res = [l, r] res_len = r - l + 1 s_count[S[l]] -= 1 if S[l] in t_count and s_count[S[l]] < t_count[S[l]]: have -= 1 l += 1 l, r = res return S[l:r+1] if res_len != float(\\"inf\\") else \\"\\""},{"question":"Given a string consisting of only characters \'a\' and \'b\', determine the length of the shortest substring that contains at least one \'a\' and one \'b\'. If there is no such substring, return 0. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains a string of length n consisting of characters \'a\' and \'b\' only. Output Output a single integer — the length of the shortest substring that contains both characters \'a\' and \'b\'. If no such substring exists, output 0. Examples Input 7 aabbbab Output 2 Input 5 aaaaa Output 0 Input 6 abbbbb Output 2","solution":"def shortest_substring_length(n, s): Returns the length of the shortest substring that contains at least one \'a\' and one \'b\'. If no such substring exists, returns 0. min_length = float(\'inf\') found = False for i in range(n - 1): if s[i] != s[i + 1]: min_length = min(min_length, 2) found = True return min_length if found else 0"},{"question":"You are developing a program to manage the financial records for a small accounting firm. The firm needs to track each client\'s transactions, which can either be deposits or withdrawals. The objective is to maintain a running balance of each client\'s account and provide a summary of the transactions and the final balance at the end of the day. Transactions are given in sequence for each client, and each transaction record includes the client\'s ID, the transaction type (deposit or withdrawal), and the transaction amount. The initial balance for each client starts at zero. Your task is to create a program that processes this series of transactions and outputs the final balance for each client along with the summary of all transactions. Input The first line contains the integer T (0 < T ≤ 100), representing the number of clients. Each client\'s data is then provided in sequence. For each client, the first line contains the client\'s ID, which is a string without spaces and has up to 20 characters. The second line contains the integer N (0 < N ≤ 100), representing the number of transactions. The subsequent N lines each contain a transaction record in the format \\"TYPE AMOUNT\\", where TYPE is a string (either \'deposit\' or \'withdrawal\') and AMOUNT is an integer (0 < AMOUNT ≤ 10000). Output For each client, output the client\'s ID, followed by the final balance, then a summary of all transactions. Each transaction summary should be in the same order as input, indicating the transaction type and amount. Output one blank line between client summaries. Be careful to not output extra blank lines after the last client summary. Example Input 3 clientA 5 deposit 1000 withdrawal 300 deposit 500 withdrawal 200 deposit 300 clientB 3 deposit 200 withdrawal 100 withdrawal 100 clientC 4 deposit 4000 withdrawal 1000 deposit 5000 withdrawal 2000 Output clientA Balance: 1300 Transactions: deposit 1000 withdrawal 300 deposit 500 withdrawal 200 deposit 300 clientB Balance: 0 Transactions: deposit 200 withdrawal 100 withdrawal 100 clientC Balance: 6000 Transactions: deposit 4000 withdrawal 1000 deposit 5000 withdrawal 2000","solution":"def process_transactions(T, clients_data): clients_summary = [] index = 0 for i in range(T): client_id = clients_data[index] index += 1 N = int(clients_data[index]) index += 1 balance = 0 transactions = [] for _ in range(N): transaction = clients_data[index] index += 1 t_type, amount = transaction.split() amount = int(amount) if t_type == \'deposit\': balance += amount elif t_type == \'withdrawal\': balance -= amount transactions.append(transaction) summary = f\\"{client_id}n\\" summary += f\\"Balance: {balance}n\\" summary += \\"Transactions:n\\" summary += \\"n\\".join(transactions) clients_summary.append(summary) return \\"nn\\".join(clients_summary)"},{"question":"A string is considered to be beautiful if it contains only characters \'a\', \'b\', \'c\', and these characters do not appear more than twice consecutively. Your task is to determine if a given string is beautiful or not. Input The single line contains a string s (1 ≤ |s| ≤ 10^5), consisting of characters \'a\', \'b\', and \'c\'. Output Print \\"YES\\" if the string is beautiful, otherwise print \\"NO\\". Examples Input abcabc Output YES Input aaabbb Output NO Note In the first example, the string \\"abcabc\\" does not contain any character more than twice consecutively, thus the output is \\"YES\\". In the second example, the string \\"aaabbb\\" contains characters \'a\' and \'b\' consecutively three times, thus the output is \\"NO\\".","solution":"def is_beautiful_string(s): Determines if the given string is beautiful. A string is considered beautiful if it contains only characters \'a\', \'b\', \'c\', and these characters do not appear more than twice consecutively. Args: s (str): The string to check. Returns: str: \\"YES\\" if the string is beautiful, otherwise \\"NO\\". for i in range(len(s) - 2): if s[i] == s[i + 1] == s[i + 2]: return \\"NO\\" return \\"YES\\""},{"question":"Mark is working on a program that needs to compress a sequence of characters. The compression algorithm he is using abbreviates repeated characters by storing the character followed by the number of repetitions. Consecutive repeated characters are considered as a single run. For example, the string \\"aaabbccccd\\" would be compressed to \\"a3b2c4d1\\". Mark wants to implement this compression algorithm in his program. Help Mark by writing a function that takes a string and returns its compressed form. Input A single string `s` (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output The compressed form of the string. Examples Input \\"aaabbccccd\\" Output \\"a3b2c4d1\\" Input \\"abc\\" Output \\"a1b1c1\\" Input \\"zzzzzzzz\\" Output \\"z8\\" Note In the first example, the string \\"aaabbccccd\\" is compressed to \\"a3b2c4d1\\" because: - \'a\' is repeated 3 times consecutively, - \'b\' is repeated 2 times consecutively, - \'c\' is repeated 4 times consecutively, - \'d\' appears only once. In the second example, each character in \\"abc\\" appears only once, so the compressed form is \\"a1b1c1\\". In the third example, the string \\"zzzzzzzz\\" (8 consecutive \'z\') is compressed to \\"z8\\".","solution":"def compress_string(s): Compresses the input string `s` by abbreviating repeated characters with the character followed by the number of repetitions. if not s: return \\"\\" compressed = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: compressed.append(f\\"{current_char}{count}\\") current_char = char count = 1 compressed.append(f\\"{current_char}{count}\\") return \'\'.join(compressed)"},{"question":"You are the manager of a warehouse, and you need to efficiently manage the inventory. You have N different products, and each product has a certain quantity in stock. You receive K orders, and each order requests a specific quantity of a specific product. Your task is to write a program to determine if all orders can be fulfilled with the current stock levels of the products. If it is possible to fulfill all orders, output \\"YES\\". If not, output \\"NO\\" and also the index of the first order that cannot be fulfilled. Input The input consists of several lines. The first line contains two positive integers N (N ≤ 100,000) and K (K ≤ 100,000), representing the number of different products and the number of orders, respectively. The second line contains N non-negative integers Q1, Q2,..., QN (0 ≤ Qi ≤ 1,000), representing the quantity of each product in stock. The following K lines each contain two integers Pj and Rj (1 ≤ Pj ≤ N, 1 ≤ Rj ≤ 1,000), where Pj is the index of the product and Rj is the quantity requested in the j-th order. Output Output \\"YES\\" if all orders can be fulfilled. If not, output \\"NO\\" followed by the index of the first order that cannot be fulfilled. Example Input 5 3 10 5 7 8 9 1 5 2 2 3 8 Output NO 3","solution":"def can_fulfill_orders(N, K, stock, orders): Determines if all orders can be fulfilled with the current stock levels of the products. Parameters: N (int): Number of different products. K (int): Number of orders. stock (list of int): List of quantities of each product in stock. orders (list of tuple): List of orders, where each order is a tuple (Pj, Rj) with product index and quantity requested. Returns: str: \\"YES\\" if all orders can be fulfilled, otherwise \\"NO\\" followed by the index of the first order that cannot be fulfilled. for i, (Pj, Rj) in enumerate(orders): if stock[Pj - 1] >= Rj: stock[Pj - 1] -= Rj else: return f\\"NO {i + 1}\\" return \\"YES\\""},{"question":"Given an array A of length N, perform the following operations: - Select any two elements in the array that are adjacent (i.e. have indices i and i+1) and swap them. You are required to sort the array in non-decreasing order using the minimum number of such adjacent swaps. If it is possible to sort the array, print the minimum number of swaps needed. If it is not possible to sort the array using the given operation, print -1. Constraints: - 1 ≤ N ≤ 1000 - All elements in the input array are integers. Input: Input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N ``` Output: If it is possible to sort the array using the given operation, print the minimum number of adjacent swaps needed. Otherwise, print -1. Examples: Input: ``` 5 3 1 2 5 4 ``` Output: ``` 3 ``` Input: ``` 4 1 2 3 4 ``` Output: ``` 0 ``` Input: ``` 5 5 4 3 2 1 ``` Output: ``` 10 ```","solution":"def min_adjacent_swaps_to_sort(N, A): Determines the minimum number of adjacent swaps needed to sort the array in non-decreasing order. If it is not possible, returns -1. Args: N : int : the number of elements in the array A : list : the array of integers Returns: int : the minimum number of adjacent swaps needed or -1 if it is not possible if not is_possible_to_sort(A): return -1 return bubble_sort_count_swaps(A) def is_possible_to_sort(A): Checks if the array can be sorted into non-decreasing order by any permutations of adjacent swaps. Since any permutation of adjacent swaps is possible, any sequence can be made sorted unless you need to count the swaps. Args: A : list : the array of integers Returns: bool : True if it is possible to sort the array, False otherwise return True def bubble_sort_count_swaps(A): Counts the number of swaps needed to sort the array using bubble sort algorithm. Args: A : list : the array of integers Returns: int : the number of swaps needed to sort the array n = len(A) swap_count = 0 for i in range(n): for j in range(n - 1 - i): if A[j] > A[j + 1]: A[j], A[j + 1] = A[j + 1], A[j] swap_count += 1 return swap_count"},{"question":"Problem You have been employed by a shipping company to manage and analyze their shipping schedules. The company maintains a schedule of shipping events consisting of shipments, deliveries, and cargo updates. A shipment can be represented as an initial loading of cargo, a delivery as a reduction in cargo, and an update as an adjustment to the current cargo due to unforeseen circumstances. Your task is to help the company determine the final amount of cargo left after all events have been processed for a given schedule. The events can be one of the following: 1. \\"Shipment x \\" - Increase the cargo by x . 2. \\"Delivery x \\" - Decrease the cargo by x . 3. \\"Update x \\" - Change the current amount of cargo to be exactly x . Each event needs to be processed in sequence to compute the final cargo amount. Write a function that processes a list of events and returns the final cargo amount. # Constraints * 1 leq N leq 50 * 1 leq x leq 10^4 * All inputs are integers # Input The input is given in the following format: ``` N event_1 x_1 ... event_N x_N ``` where N is the number of events and each event is given in the subsequent N lines, with each event containing a description (\\"Shipment\\", \\"Delivery\\", or \\"Update\\") followed by an integer x representing the amount of cargo for that event. # Output Output the final amount of cargo after all events have been processed. # Example Input 5 Shipment 100 Delivery 50 Update 200 Shipment 25 Delivery 75 Output 150 Input 3 Shipment 500 Delivery 300 Shipment 200 Output 400","solution":"def process_events(events): Processes a list of shipping events and returns the final cargo amount. Args: events (list of str): List of events in the format \\"EventType value\\". Returns: int: Final cargo amount. cargo = 0 for event in events: parts = event.split() event_type = parts[0] value = int(parts[1]) if event_type == \\"Shipment\\": cargo += value elif event_type == \\"Delivery\\": cargo -= value elif event_type == \\"Update\\": cargo = value return cargo"},{"question":"Write a program to handle operations on a list of integers representing stock prices over a series of days. The program should support the following operations: - update(l, r, x): set the stock prices from day l to day r (inclusive) to x. - find_max(l, r): find the maximum stock price from day l to day r (inclusive). Note that initially, all stock prices are set to 0. Constraints: - 1 ≤ n ≤ 100000 (number of days) - 1 ≤ q ≤ 100000 (number of queries) - 0 ≤ l ≤ r < n - 0 ≤ x ≤ 100000 Input Format: The first line of input contains two integers n (the number of days) and q (the number of queries). Each of the next q lines contains a query, either in the form: - `0 l r x`: An update query to set the stock prices from day l to day r to x. - `1 l r`: A find_max query to find the maximum stock price from day l to day r. Output Format: For each find_max query, print the maximum stock price in the specified range. Examples: Input: 5 4 0 0 2 100 0 1 4 200 1 0 4 1 1 3 Output: 200 200 Input: 4 3 0 0 1 50 1 0 3 0 2 3 80 Output: 50","solution":"class StockPrices: def __init__(self, n): self.prices = [0] * n def update(self, l, r, x): for i in range(l, r + 1): self.prices[i] = x def find_max(self, l, r): return max(self.prices[l:r + 1]) def process_queries(n, q, queries): stock_prices = StockPrices(n) results = [] for query in queries: query = list(map(int, query.split())) if query[0] == 0: # update operation _, l, r, x = query stock_prices.update(l, r, x) elif query[0] == 1: # find_max operation _, l, r = query max_price = stock_prices.find_max(l, r) results.append(max_price) return results"},{"question":"Consider a grid with several houses located on it. Each house is represented by a tuple `(x, y)` which denotes its location on the grid. You are given a list of house locations and your task is to determine the shortest possible route for a mailman to visit each house exactly once, starting from any house and returning back to the starting point (effectively a classic Traveling Salesman Problem). Input format - First line contains an integer `n`, the number of houses. - Next `n` lines contain two space-separated integers `x` and `y` which represent the coordinates of each house. Output format - Output a single integer which represents the minimum distance the mailman needs to travel to visit all houses exactly once and return back to the starting point. Use the Manhattan distance metric for this problem. Note: The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is defined as `|x1 - x2| + |y1 - y2|`. Constraints - 2 ≤ `n` ≤ 15 - -1000 ≤ `x`, `y` ≤ 1000 SAMPLE INPUT 4 0 0 2 0 2 2 0 2 SAMPLE OUTPUT 8 Explanation The distances between houses are: - Distance between (0, 0) and (2, 0): 2 - Distance between (2, 0) and (2, 2): 2 - Distance between (2, 2) and (0, 2): 2 - Distance between (0, 2) and (0, 0): 2 The optimal path that visits each house exactly once and returns to the starting point is: (0, 0) -> (2, 0) -> (2, 2) -> (0, 2) -> (0, 0), giving a total distance of 2 + 2 + 2 + 2 = 8.","solution":"from itertools import permutations def calculate_manhattan_distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) def calculate_total_route_distance(route): total_distance = 0 for i in range(len(route) - 1): total_distance += calculate_manhattan_distance(route[i], route[i+1]) total_distance += calculate_manhattan_distance(route[-1], route[0]) # Return to the starting point return total_distance def tsp_minimum_distance(houses): min_distance = float(\'inf\') for perm in permutations(houses): distance = calculate_total_route_distance(perm) if distance < min_distance: min_distance = distance return min_distance def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) houses = [(int(data[2*i+1]), int(data[2*i+2])) for i in range(n)] print(tsp_minimum_distance(houses)) if __name__ == \\"__main__\\": main()"},{"question":"A game developer is designing an online multiplayer game. Each player has a power level, which is represented by a positive integer. Players can form teams, and the strength of a team is determined by the sum of the power levels of its members. To form a balanced game, the developer wants to divide the players into two teams such that the absolute difference of their strengths is minimized. You are given a list of integers representing the power levels of the players. Your task is to implement a function that returns the minimum possible absolute difference between the strengths of two teams. Input An integer n (1 ≤ n ≤ 20), the number of players, and a list of n integers where the i-th integer (1 ≤ a_i ≤ 100) represents the power level of the i-th player. Output Output a single integer — the minimum possible absolute difference between the strengths of two teams. Examples Input 4 50 60 70 80 Output 0 Input 3 45 30 60 Output 15 Note In the first test case, the two teams can be divided as [50, 80] and [60, 70], both having a total strength of 130, resulting in a difference of 0. In the second test case, the two teams can be divided as [45, 60] and [30], resulting in an absolute difference of 15.","solution":"from itertools import combinations def minimum_difference(n, power_levels): Returns the minimum possible absolute difference between the strengths of two teams. Parameters: n (int): The number of players. power_levels (list): A list of integers representing the power levels of the players. Returns: int: The minimum possible absolute difference between the strengths of two teams. total_sum = sum(power_levels) min_diff = float(\'inf\') # Generate all possible team combinations for i in range(n // 2 + 1): for combo in combinations(power_levels, i): team1_sum = sum(combo) team2_sum = total_sum - team1_sum min_diff = min(min_diff, abs(team1_sum - team2_sum)) return min_diff"},{"question":"In a city, there are n intersections connected by m one-way roads. Each road has a travel time associated with it. A delivery truck starts at intersection s and needs to deliver goods to all other intersections. The truck must find the minimum delivery time to reach every intersection from its starting point. The truck can use any route, but it cannot return to an intersection once it has visited it. Your task is to determine the minimum delivery time for the truck to reach each intersection from its starting point s. # Input The first line contains three space-separated integers n, m, and s (2 ≤ n ≤ 5000, 1 ≤ m ≤ 20000, 1 ≤ s ≤ n) — the number of intersections, the number of roads, and the starting intersection, respectively. Each of the following m lines contains three space-separated integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000) — representing a road from intersection u to intersection v with a travel time of t. # Output Print n space-separated integers. The i-th integer should be the minimum time in seconds needed to reach intersection i from the starting point s. If an intersection cannot be reached, print -1 for that intersection. # Examples Input ``` 4 5 1 1 2 4 1 3 2 2 3 3 2 4 3 3 4 1 ``` Output ``` 0 4 2 3 ``` Input ``` 3 3 1 1 2 5 2 3 2 1 3 10 ``` Output ``` 0 5 7 ``` # Note Consider the first example: - The minimum time to reach intersection 2 from intersection 1 is 4 seconds. - The minimum time to reach intersection 3 from intersection 1 is 2 seconds. - The minimum time to reach intersection 4 from intersection 1 is 3 seconds (via intersections 1 -> 3 -> 4).","solution":"import heapq def dijkstra(n, m, s, roads): graph = {i: [] for i in range(1, n+1)} for u, v, t in roads: graph[u].append((v, t)) min_times = {i: float(\'inf\') for i in range(1, n+1)} min_times[s] = 0 pq = [(0, s)] while pq: current_time, u = heapq.heappop(pq) if current_time > min_times[u]: continue for v, t in graph[u]: time = current_time + t if time < min_times[v]: min_times[v] = time heapq.heappush(pq, (time, v)) return [min_times[i] if min_times[i] != float(\'inf\') else -1 for i in range(1, n+1)]"},{"question":"Given a list of integers, find and print all pairs in the list that sum up to a given target value. If there are no such pairs, output \\"No pairs found\\". Input The first line contains an integer n (1 ≤ n ≤ 100), representing the number of integers in the list. The second line contains n integers separated by spaces. The third line contains the target sum value. Output Print each pair of integers that sum to the target value, with each pair on a new line. Each pair should be in the format (a, b), where a < b. If multiple pairs sum to the same value, print them in lexicographical order. If no pairs are found, print \\"No pairs found\\". Example Input 5 1 2 3 4 5 5 Output (1, 4) (2, 3) Input 4 1 1 1 1 2 Output (1, 1) Input 3 1 2 4 8 Output No pairs found","solution":"def find_pairs_with_sum(n, integers, target): Finds and returns pairs of integers from the list that sum up to the target value. Each pair should be in the format (a, b) where a < b. :param n: Number of integers in the list :param integers: List of integers :param target: Target sum value :return: List of tuples representing pairs that sum up to the target value. if n < 1 or n > 100: raise ValueError(\\"n should be between 1 and 100\\") integers.sort() pairs = [] seen = set() for num in integers: complement = target - num if complement in seen: if complement != num: pairs.append((min(num, complement), max(num, complement))) elif integers.count(num) > 1: # This handles the case where we need pairs like (1, 1) pairs.append((num, complement)) seen.add(num) pairs = list(set(pairs)) pairs.sort() if not pairs: return \\"No pairs found\\" return pairs def format_pairs(pairs): Formats the output pairs or \\"No pairs found\\" for printing. Each pair is on a new line. :param pairs: Either a list of tuples or the string \\"No pairs found\\" :return: Formatted string if pairs == \\"No pairs found\\": return pairs return \\"n\\".join(f\\"({a}, {b})\\" for a, b in pairs)"},{"question":"Alice is playing a game on a n × n grid. Each cell in the grid is either passable or blocked. Alice can move between adjacent cells horizontally or vertically but cannot move into or through blocked cells. Additionally, Alice wants to avoid visiting the same cell more than once. The goal of the game is to find the number of unique paths from the top-left corner (1, 1) to the bottom-right corner (n, n). Given the grid configuration, determine the number of unique paths from (1, 1) to (n, n). Two paths are considered unique if one path visits at least one cell different from the other path. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the size of the grid. - The next n lines each contain n characters: \'.\' representing a passable cell and \'#\' representing a blocked cell. Output Print a single number denoting the number of unique paths from (1, 1) to (n, n). If there is no valid path, output 0. Examples Input 3 . . . . # . . . . Output 2 Input 3 . # . . # . . . . Output 1 Input 3 . # . # # . . . . Output 0 Note In the first example, there are two unique paths: - (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3) - (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) In the second example, there is only one unique path: - (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3) In the third example, there is no path that can connect (1, 1) to (n, n).","solution":"def num_unique_paths(n, grid): if n == 0 or grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"In a chess-like board game, there are n x n squares. A piece can move between any two squares if there is no obstacle in the path between them or if the piece is currently on the destination square (diagonals are not considered). Initially, some squares on the board are occupied by obstacles, represented by \'X\', and all the others are empty, represented by \'.\'. Your task is to determine if it is possible for the piece to traverse from the top-left corner (1, 1) to the bottom-right corner (n, n). Constraints - 2 ≤ n ≤ 1000 - The board is provided as a list of strings, with each string representing a row of the board. - There is at least one \'.\' (empty square) at the starting (1, 1) and ending (n, n) positions. Input - n (integer) - n strings representing the rows of the board. Output - Output \\"YES\\" if it is possible for the piece to move from the top-left corner to the bottom-right corner, otherwise output \\"NO\\". Examples Input 3 .XX ..X X.. Output YES Input 4 .XXX ...X XX.X ...X Output NO","solution":"def is_path_possible(n, board): from collections import deque # Directions for right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize the queue with the starting position (0, 0) queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # If we reach the bottom-right corner if x == n-1 and y == n-1: return \\"YES\\" # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and board[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) # If we exhaust the queue and do not find the bottom-right corner return \\"NO\\""},{"question":"You are given an array of positive integers, and a target sum. Your goal is to determine the minimum number of elements required from the array to sum up to the target value. You can assume that you have an infinite supply of each element in the array. For example, if the array is [1, 2, 3] and the target is 5, you can reach the target sum by using the elements [2, 3] or [1, 1, 3], requiring a minimum of 2 elements. Input The first line of the input contains two integers `n` and `target` (1 ≤ n ≤ 100, 1 ≤ target ≤ 1000), where `n` is the number of elements in the array, and `target` is the desired sum. The second line contains `n` positive integers separated by spaces, representing the elements of the array. Output The only line of the output should contain a single integer, which is the minimum number of elements required to reach the target sum. If it\'s impossible to reach the target sum using the elements provided, output -1. Examples Input 3 5 1 2 3 Output 2 Input 4 11 1 5 6 9 Output 2 Input 2 7 4 9 Output -1","solution":"def min_elements_to_sum_target(n, target, elements): dp = [float(\'inf\')] * (target + 1) dp[0] = 0 for i in range(1, target + 1): for el in elements: if i >= el: dp[i] = min(dp[i], dp[i - el] + 1) return dp[target] if dp[target] != float(\'inf\') else -1 # Example usage n, target = 3, 5 elements = [1, 2, 3] print(min_elements_to_sum_target(n, target, elements)) # Output should be 2"},{"question":"A small startup company wants to develop an intelligent email filtering system. The primary goal of this system is to classify incoming emails as either spam or non-spam. To achieve this, the system must analyze the text of each email and make its prediction based on a set of rules derived from known patterns in spam and non-spam emails. The email filtering system works by assessing \'keywords\' in each email. Each keyword has an associated spam score. If a keyword appears in the email, its spam score is added to the overall spam score for that email. If the total spam score exceeds a certain threshold, the email is classified as spam; otherwise, it is classified as non-spam. You are tasked with implementing this email filtering system. Your goal is to write a program that takes in a list of keywords with their spam scores, an integer spam threshold, and a set of emails. The program should output whether each email is classified as spam or non-spam. **Input:** The first line of input contains two integers `K` and `T` (1 ≤ K ≤ 100, 1 ≤ T ≤ 10000), where `K` indicates the number of keywords and `T` indicates the spam threshold. The next `K` lines each contain a keyword (a non-empty string without spaces consisting of lowercase English letters only) followed by an integer `score_i` (1 ≤ score_i ≤ 1000), which represents the spam score of that keyword. The next line contains a single integer `E` (1 ≤ E ≤ 100), representing the number of emails to be evaluated. The following `E` lines each contain a single email, represented as a string of lowercase English letters and spaces, with a maximum length of 1000 characters. **Output:** For each email, output \\"spam\\" if the email\'s total spam score is greater than or equal to the threshold `T`, otherwise output \\"non-spam\\". **Examples:** Input: ``` 3 10 free 5 offer 3 cheap 7 2 this is a free offer get cheap deals now ``` Output: ``` spam spam ``` Input: ``` 2 15 hello 3 world 2 1 hello world this email is not spam ``` Output: ``` non-spam ``` **Explanation:** In the first example, both \\"this is a free offer\\" and \\"get cheap deals now\\" have spam scores that exceed the threshold of 10. Specifically: - \\"this is a free offer\\": scores 5 (free) + 3 (offer) = 8, which is less than 10, so \\"non-spam\\". - \\"get cheap deals now\\": scores 7 (cheap) = 7, which is less than 10, so \\"non-spam\\". In the second example, the email contains the words \\"hello\\" and \\"world,\\" but their combined score is only 5, which is much less than the threshold of 15, so it is classified as \\"non-spam.\\"","solution":"def classify_emails(k, t, keywords_scores, e, emails): # Create a dictionary to hold keywords and their corresponding spam scores keyword_dict = {keyword_score[0]: int(keyword_score[1]) for keyword_score in keywords_scores} results = [] for email in emails: email_words = email.split() spam_score = sum(keyword_dict.get(word, 0) for word in email_words) results.append(\\"spam\\" if spam_score >= t else \\"non-spam\\") return results"},{"question":"Given a grid of size m x n where each cell in the grid can either be a 0 or a 1. We define a block as a contiguous set of cells with the value 1 that are connected either horizontally or vertically. Your task is to determine the total number of distinct blocks in the grid. Input The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns in the grid. Each of the next m lines contains n space-separated integers either 0 or 1. Output Output a single integer — the total number of distinct blocks of 1s in the grid. Examples Input 4 5 1 0 0 1 0 1 1 0 0 1 0 0 1 1 1 0 0 0 1 0 Output 3 Input 3 3 0 1 0 1 0 1 0 1 0 Output 4 Input 5 5 1 1 1 1 1 1 0 0 0 1 1 0 1 0 1 1 0 0 0 1 1 1 1 1 1 Output 2","solution":"def num_blocks(grid): # Helper function to perform DFS and mark cells as visited def dfs(grid, visited, i, j): stack = [(i, j)] while stack: x, y = stack.pop() if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 1 and not visited[x][y]: visited[x][y] = True # Check all four possible directions stack.append((x+1, y)) stack.append((x-1, y)) stack.append((x, y+1)) stack.append((x, y-1)) # Grid dimensions m, n = len(grid), len(grid[0]) visited = [[False]*n for _ in range(m)] block_count = 0 for i in range(m): for j in range(n): if grid[i][j] == 1 and not visited[i][j]: # New block found, perform DFS block_count += 1 dfs(grid, visited, i, j) return block_count"},{"question":"In a small town, there is a unique way of organizing street numbers. Each street number is assigned a \\"beauty score\\" which is calculated as the sum of all the digits in the number. For example, the beauty score of 123 is 1 + 2 + 3 = 6. Given a range of street numbers [L, R], the town council needs to find the street number with the highest beauty score. If there are multiple street numbers with the same highest beauty score, they want to choose the smallest one. Write a program to help the town council with this task. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each test case consists of two space-separated integers L and R (1 ≤ L ≤ R ≤ 10^9) representing the range of street numbers. Output For each test case, print the street number in the range [L, R] which has the highest beauty score. If there are multiple numbers with the same score, print the smallest one. Example Input 3 10 20 123 130 999 1001 Output 19 129 999 Note In the first test case, the beauty scores of the numbers from 10 to 20 are as follows: - 10: 1, 11: 2, 12: 3, ..., 19: 10, 20: 2 The highest beauty score is 10, and the street number with this score is 19. In the second test case, among the numbers from 123 to 130, 129 has the highest beauty score of 12 (1+2+9). In the third test case, 999 has the highest beauty score of 27 (9+9+9).","solution":"def sum_of_digits(n): Returns the sum of the digits of a number. return sum(map(int, str(n))) def max_beauty_score_in_range(L, R): Returns the street number in the range [L, R] which has the highest beauty score. If there are multiple numbers with the same score, the smallest one is chosen. max_beauty_score = -1 best_number = L for n in range(L, R+1): beauty_score = sum_of_digits(n) if beauty_score > max_beauty_score or (beauty_score == max_beauty_score and n < best_number): max_beauty_score = beauty_score best_number = n return best_number def find_max_beauty_scores(test_cases): Given multiple test cases with ranges [L, R], finds and returns the street number with the highest beauty score for each range. results = [] for L, R in test_cases: results.append(max_beauty_score_in_range(L, R)) return results"},{"question":"Alice and Bob are playing another game involving a set of integers. They start with an integer n. Alice and Bob alternate turns, with Alice going first. On each player\'s turn, the player must subtract from the integer n a positive divisor of n that is less than n. The first player who cannot make a move loses the game. Given multiple integers, determine the winner if both Alice and Bob play optimally. Input The first line contains the single integer T (1 ≤ T ≤ 100) — the number of integers. Next T lines contain one integer each, representing n (1 ≤ n ≤ 10^9). Output For each integer n, print \\"Alice\\" if Alice wins the game given n, and \\"Bob\\" otherwise. Example Input 5 1 2 3 12 15 Output Bob Alice Bob Alice Bob","solution":"def determine_winner(n): Determines the winner of the game for a given integer `n`. If `n` is even, Alice wins. If `n` is odd, Bob wins. if n % 2 == 0: return \\"Alice\\" else: return \\"Bob\\" def get_game_results(nums): results = [] for num in nums: results.append(determine_winner(num)) return results"},{"question":"You are given a sequence of n integers, where each integer represents a unique ID for a student. The sequence represents the original order in which the students are arranged. There is also a set of student interactions indicating which students should remain in their respective positions in the sequence. You need to reorder the sequence such that as many students as possible from the interaction set remain in their original positions while keeping the sequence sorted in non-decreasing order by student ID. You can swap any two students\' positions in the sequence to achieve the required order. Input The first line contains a single integer n (1 ≤ n ≤ 100) representing the number of students. The second line contains n space-separated integers representing the original sequence of student IDs. The third line contains a single integer m (1 ≤ m ≤ n) representing the number of interactions. The fourth line contains m space-separated integers representing the student IDs involved in the interactions. Output Print the reordered sequence of student IDs. Examples Input 6 3 1 4 5 2 6 3 4 1 2 Output 1 2 3 4 5 6 Input 5 5 3 4 1 2 2 2 5 Output 1 2 3 4 5","solution":"def reorder_students(n, original_sequence, m, interactions): Reorder the student IDs such that as many students as possible from the interaction set remain in their original positions while keeping the sequence sorted in non-decreasing order by student ID. Params: n (int): number of students original_sequence (list of int): list of student IDs in their original order m (int): number of interacting students interactions (list of int): the student IDs involved in interactions Returns: list of int: the reordered list of student IDs sorted_sequence = sorted(original_sequence) result = sorted_sequence[:] for idx, student_id in enumerate(original_sequence): if student_id in interactions: sorted_index = sorted_sequence.index(student_id) result[sorted_index] = student_id return result"},{"question":"A logistics company has a fleet of trucks, each with a unique capacity of carrying cargo in cubic meters. The company needs to transport a certain amount of cargo and wants to use the minimum number of trucks to achieve this. Each truck can either be: - Fully loaded to its maximum capacity. - Partially loaded to less than its capacity (in whole cubic meter increments). Given: - The capacities of the available trucks. - The total amount of cargo that needs to be transported. Your task is to determine the minimum number of trucks required to transport the total cargo. Input: The first line of the input gives the number of test cases, T. T test cases follow. Each test case has two lines: - The first line contains an integer N, representing the number of trucks, followed by an integer K, representing the total amount of cargo to be transported. - The second line contains N integers, representing the capacities of the trucks. Output: For each test case, output one line containing \\"Case #x: y\\", where x is the case number (starting from 1), and y is the minimum number of trucks required to transport the total cargo. If it is not possible to transport the cargo with the available trucks, output \\"Case #x: impossible\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ K ≤ 10^4 1 ≤ capacities of the trucks ≤ 10^3 SAMPLE INPUT 2 3 100 50 50 50 4 60 10 20 30 40 SAMPLE OUTPUT Case #1: 2 Case #2: 2","solution":"def min_trucks_needed(test_cases): results = [] for idx, (K, capacities) in enumerate(test_cases): capacities.sort(reverse=True) total_cargo = K trucks_used = 0 for capacity in capacities: if total_cargo == 0: break if capacity <= total_cargo: total_cargo -= capacity trucks_used += 1 else: trucks_used += 1 total_cargo = 0 if total_cargo > 0: results.append(f\\"Case #{idx + 1}: impossible\\") else: results.append(f\\"Case #{idx + 1}: {trucks_used}\\") return results def process_input(T, inputs): test_cases = [] for i in range(T): N, K = inputs[i * 2] capacities = inputs[i * 2 + 1] test_cases.append((K, capacities)) return test_cases"},{"question":"There is a rectangular grid consisting of N rows and M columns. Each cell of the grid is initially white. You have a paint bucket that can change any white cell to black. You want to paint K contiguous cells in a horizontal or vertical line. Two cells are contiguous if they share an edge. Determine the minimum number of moves required to achieve this. A move consists of selecting any white cell and painting it black. You may assume that 1 ≤ K ≤ max(N, M) always holds. Input The first line contains three integers N, M, and K — the number of rows, columns, and the number of contiguous cells to paint, respectively. Output Output the minimum number of moves required to paint K contiguous cells in a horizontal or vertical line. Examples Input 3 3 2 Output 1 Input 2 5 4 Output 1 Input 5 5 3 Output 1 Input 4 4 5 Output Invalid Note In the first example, you can paint any 2 contiguous cells in a line (either horizontal or vertical) in a single move. In the second example, you can paint any 4 contiguous cells in a line in a single move. In the fourth example, it is invalid because K is greater than the max of N and M.","solution":"def min_moves_to_paint(N, M, K): Determines the minimum number of moves required to paint K contiguous cells either in a horizontal or vertical line given the dimensions N (rows) and M (columns) of the grid. # Check if it\'s possible to paint K contiguous cells if K > max(N, M): return \\"Invalid\\" # Painting K contiguous cells in a line (horizontal or vertical) requires only one move return 1"},{"question":"Write a Python function that takes a list of strings and returns a list of the lengths of those strings. Function Signature: ```python def string_lengths(strings: List[str]) -> List[int]: ``` Example: ```python strings = [\\"apple\\", \\"banana\\", \\"cherry\\"] string_lengths(strings) ``` Expected Output: ```python [5, 6, 6] ``` Instructions: - Your function should accurately calculate the length of each string in the input list. - Do not use any external libraries; rely purely on built-in Python functions. - Ensure your solution works efficiently even for larger lists of strings.","solution":"from typing import List def string_lengths(strings: List[str]) -> List[int]: Returns a list of the lengths of the given list of strings. :param strings: A list of strings. :return: A list of integers where each integer is the length of the corresponding string from the input list. return [len(s) for s in strings]"},{"question":"Given a stream of integers, implement a data structure that supports the following operations: 1. `add(num)`: Adds the integer `num` to the data structure. 2. `median()`: Returns the median of the current stream of integers. The median is the middle value in a sorted list of integers. If the list is even, then the median is the average of the two middle numbers. For this implementation, simulate the input as a series of `add` calls followed by a set of `median` calls to verify the correctness of your data structure. # Constraints - The integers will be in the range [-10^5, 10^5]. - The total number of `add` and `median` operations will be ≤ 10^5. # Input * The first line of the input contains an integer `T`, the total number of operations. * Each of the next `T` lines contains an operation in one of two formats: - `add x`: Adds the integer x to the data structure. - `median`: Outputs the median of the current integers in the data structure. # Output * For each `median` operation, output a single integer representing the current median of the stream. # Example **Input** ``` 8 add 1 add 2 add 3 median add 4 add 5 median add 6 median ``` **Output** ``` 2 3 3 ``` # Notes - Adding the integers in this sequence [(1, 2, 3)] immediately before the first `median` call results in the list being [1, 2, 3]. Thus, the median is 2. - Adding 4 and 5 to the list results in [1, 2, 3, 4, 5]. The median is 3. - Finally, adding 6 results in [1, 2, 3, 4, 5, 6]. The median is the average of 3 and 4, which is 3 (integer part).","solution":"import heapq class MedianFinder: def __init__(self): self.min_heap = [] # To store the larger half self.max_heap = [] # To store the smaller half def add(self, num): heapq.heappush(self.max_heap, -num) if (self.max_heap and self.min_heap and (-self.max_heap[0] > self.min_heap[0])): val = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, val) if len(self.max_heap) > len(self.min_heap) + 1: val = -heapq.heappop(self.max_heap) heapq.heappush(self.min_heap, val) elif len(self.min_heap) > len(self.max_heap): val = heapq.heappop(self.min_heap) heapq.heappush(self.max_heap, -val) def median(self): if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] return (-self.max_heap[0] + self.min_heap[0]) / 2 # Example of how it works: def process_operations(operations): mf = MedianFinder() results = [] for op in operations: if op.startswith(\'add\'): _, num = op.split() mf.add(int(num)) elif op == \'median\': results.append(int(mf.median())) return results"},{"question":"Problem You are given a list of integers, and your task is to determine if the list contains any duplicates. If it does, print \\"YES\\", otherwise print \\"NO\\". Constraints * The list will have at most 10000 integers. * Each integer in the list will be between -1000000 and 1000000. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a list of integers separated by spaces. Output For each test case, output \\"YES\\" if there are duplicates, and \\"NO\\" otherwise. Examples Input 3 1 2 3 4 5 10 20 30 40 50 10 -1 -2 -3 -4 -5 -1 Output NO YES YES","solution":"def contains_duplicates(list_of_nums): Returns \\"YES\\" if the list contains duplicates, otherwise \\"NO\\". return \\"YES\\" if len(list_of_nums) != len(set(list_of_nums)) else \\"NO\\" def process_test_cases(test_cases): Processes a list of test cases and returns a list of results indicating if each contains duplicates. results = [] for case in test_cases: list_of_nums = list(map(int, case.split())) results.append(contains_duplicates(list_of_nums)) return results"},{"question":"You are given two strings, `source` and `target`. The `source` string consists of unique characters, and each character represents a tool that you have in your toolkit. The `target` string represents the task you need to complete, where each character is a tool required for a specific step in the task. The objective is to determine whether you can rearrange your toolkit (the `source` string) to exactly match the task\'s requirements (the `target` string). Each tool from the `source` can only be used once, and it must be an exact sequence match for the `target`. Input - The first line contains the string `source` (1 ≤ |source| ≤ 1000), consisting of unique small English letters (\\"a\\"...\\"z\\"). - The second line contains the string `target` (1 ≤ |target| ≤ 1000), consisting of small English letters (\\"a\\"...\\"z\\"). Output - Print \\"YES\\" if you can rearrange the `source` to match the `target`, otherwise print \\"NO\\". Examples Input dzab ad Output YES Input abcdefg gfedcba Output YES Input abc abcd Output NO Note In the first test case, you can match the `target` by selecting \'a\' and \'d\' from the `source`. In the second test case, you can rearrange all characters from `source` to exactly match `target`. In the third test case, it is impossible to match the `target` because `source` does not contain enough characters.","solution":"def can_rearrange(source, target): Determines whether the source can be rearranged to match the target string. :param source: str - the source string with unique characters :param target: str - the target string :return: str - \\"YES\\" or \\"NO\\" # Check if the lengths of source and target are the same if len(source) != len(target): return \\"NO\\" # Check if source and target contain the same characters return \\"YES\\" if sorted(source) == sorted(target) else \\"NO\\""},{"question":"You are given a rectangular grid of cells with `m` rows and `n` columns. Each cell in the grid can either contain a `1` representing land, or a `0` representing water. An island is formed by a group of connected land cells (horizontally or vertically) surrounded by water. Each cell is connected with 4 neighboring cells (left, right, up, down). Write a function that counts the number of distinct islands in the grid. **Input** The function should accept a 2D list of integers representing the grid. The first line of the input consists of two integers `m` and `n` (1 ≤ m, n ≤ 1000) representing the number of rows and columns of the grid respectively. Each of the next `m` lines contains `n` integers (either `0` or `1`) separated by space, representing the grid. **Output** Output a single integer representing the number of distinct islands in the grid. **Example** _Input_ ``` 4 5 1 1 0 0 0 1 1 0 0 1 0 0 0 1 1 0 0 0 0 0 ``` _Output_ ``` 2 ``` _Input_ ``` 5 5 1 1 0 0 0 1 0 0 0 1 0 0 0 1 1 0 0 0 0 0 1 0 1 0 0 ``` _Output_ ``` 4 ```","solution":"def count_islands(grid): def dfs(x, y): stack = [(x, y)] while stack: i, j = stack.pop() if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == 0: continue grid[i][j] = 0 # Mark as visited stack.append((i+1, j)) stack.append((i-1, j)) stack.append((i, j+1)) stack.append((i, j-1)) m = len(grid) n = len(grid[0]) island_count = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: dfs(i, j) island_count += 1 return island_count"},{"question":"Nicole is trying to develop a unique encryption system for her secret messages. The process involves rotating a set of characters by a certain number of positions, wrapping around from the end to the beginning as necessary. The set of characters she is working with includes the lowercase letters from \'a\' to \'z\' only. To illustrate, if Nicole wants to encrypt the message \\"abc\\" with a rotation of 2, each character in the message will be moved forward by 2 positions in the alphabet, resulting in the encrypted message \\"cde\\". Conversely, to decrypt the message, she would rotate characters backward by the same number of positions. Write a program that encrypts or decrypts a given message based on the specified rotation value. The program should be able to handle both positive and negative rotation values. Input The first line of the input contains the string `mode` which is either \\"encrypt\\" or \\"decrypt\\". The second line contains the integer `rotation` (−25 ≤ rotation ≤ 25), indicating the number of positions to rotate the characters. The third line contains the string `message`, representing the message to be encrypted or decrypted, consisting of lowercase letters only. Output Output the resulting string after performing the specified encryption or decryption. Examples Input encrypt 2 hello Output jgnnq Input decrypt 3 khoor Output hello Input encrypt -1 xyz Output wxy Input decrypt 25 dpef Output code","solution":"def shift_char(c, rotation): Shifts a single character by the given rotation value. alpha_start = ord(\'a\') new_char = chr((ord(c) - alpha_start + rotation) % 26 + alpha_start) return new_char def encrypt_decrypt(mode, rotation, message): Encrypts or decrypts the given message based on the mode and rotation value. output_message = \\"\\" if mode == \\"decrypt\\": rotation = -rotation # Invert rotation for decryption for char in message: output_message += shift_char(char, rotation) return output_message"},{"question":"A robotic vacuum cleaner is running in a rectangular house represented by an M x N grid of cells. Each cell can either be open (denoted by 0) or blocked (denoted by 1). The vacuum cleaner starts at the top-left cell (0,0), and it can only move right or down to adjacent cells, provided the cell isn\'t blocked. Write a function that determines the total number of unique paths the vacuum cleaner can take to reach the bottom-right corner of the grid (M-1, N-1) starting from the top-left corner. If the start or end cell is blocked, return 0. Input: - The first line contains two integers M and N, representing the number of rows and columns in the grid. - The next M lines each contain N integers (0 or 1) representing the grid. Output: - Print a single integer, the total number of unique paths the vacuum cleaner can take to reach the bottom-right corner. Since the number of paths can be very large, return the result modulo 1000000007. Constraints: - 1 ≤ M, N ≤ 1000 Sample Input: 3 3 0 0 0 0 1 0 0 0 0 Sample Output: 2 Explanation: The two unique paths are: 1. right -> right -> down -> down 2. down -> down -> right -> right","solution":"def uniquePaths(m, n, grid): MOD = 1000000007 # If the start or end cell is blocked, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 0: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[m-1][n-1]"},{"question":"You are given an array temperatures of n integers, where temperatures[i] represents the temperature of the day i. Your task is to find, for each day in the array, how many days you have to wait until a warmer temperature. If there is no future day for which this is possible, output 0 instead. Implement a function `warmer_days` that takes an array temperatures and returns an array result, where result[i] is the number of days you have to wait until a warmer temperature. # Input - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of days. - The second line contains n integers, temperatures[i] (30 ≤ temperatures[i] ≤ 100), the temperatures of each day. # Output - Output a single line with n integers, result[i] representing the number of days you have to wait until a warmer temperature for the i-th day. # Example Input ``` 8 73 74 75 71 69 72 76 73 ``` Output ``` 1 1 4 2 1 1 0 0 ``` Input ``` 5 89 62 70 58 47 ``` Output ``` 0 1 0 0 0 ``` # Explanation In the first sample, for day 1 (temperature 73), you need to wait 1 day to get a warmer temperature (74). For day 2 (temperature 74), you need to wait 1 day to get a warmer temperature (75). For day 3 (temperature 75), you need to wait 4 days to get a warmer temperature (76). For the last two days, no warmer temperatures are available, so they both output 0.","solution":"def warmer_days(temperatures): Finds how many days to wait until a warmer temperature for each day. Parameters: temperatures (list of int): List of temperatures for each day. Returns: list of int: List of days to wait for a warmer temperature. n = len(temperatures) result = [0] * n # initialize the result list with 0 stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_index = stack.pop() result[prev_index] = i - prev_index stack.append(i) return result"},{"question":"You are a software developer hired by an online quiz platform to build a new feature that identifies the \\"leap years\\" from a list of given years. A leap year is a year that is: - divisible by 4, and - not divisible by 100, unless - it is also divisible by 400. To implement this, you have to write a program that reads an array of years and prints \\"leap year\\" for each year that satisfies the above conditions, and \\"not leap year\\" for each year that does not. Your task is to design the program with the following specifications: Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of years. - The next line contains n integers y_1, y_2, ..., y_n (1 ≤ y_i ≤ 10^9) — the list of years. Output - Print \\"leap year\\" or \\"not leap year\\" for each of the n years in the order they appear in the input. Example Input 5 2000 2001 2002 2003 2004 Output leap year not leap year not leap year not leap year leap year Input 3 1900 1600 2400 Output not leap year leap year leap year Explanation - The year 2000 is a leap year because it is divisible by 400. - The years 2001, 2002, and 2003 are not leap years because they are not divisible by 4. - The year 2004 is a leap year because it is divisible by 4 and not divisible by 100. - The year 1900 is not a leap year because it is divisible by 100 but not by 400. - The years 1600 and 2400 are leap years because they are divisible by 400.","solution":"def find_leap_years(years): This function takes a list of years and returns a list of strings indicating whether each year is a leap year or not. results = [] for year in years: if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): results.append(\\"leap year\\") else: results.append(\\"not leap year\\") return results"},{"question":"Given a string `s` consisting of lowercase alphabet characters and a number `k`, you need to find the length of the shortest substring that contains at least `k` different characters. If no such substring exists, return `-1`. **Function Signature:** ```python def shortest_k_distinct_substring(s: str, k: int) -> int: pass ``` **Input:** - A string `s` of length `n` (1 <= n <= 10^5). - An integer `k` (1 <= k <= 26). **Output:** - Return the length of the shortest substring of `s` that contains at least `k` unique characters. If no such substring exists, return `-1`. **Example:** ```python assert shortest_k_distinct_substring(\\"aabcdefff\\", 3) == 3 assert shortest_k_distinct_substring(\\"abcdef\\", 6) == 6 assert shortest_k_distinct_substring(\\"aaa\\", 2) == -1 ``` **Explanation:** - In the first example, \\"aac\\", \\"abc\\", \\"bcd\\", etc., any of these substrings contain at least 3 different characters. The shortest length among them is 3. - In the second example, the whole string contains exactly 6 unique characters, so the answer is 6. - In the third example, it is impossible to find a substring that contains 2 unique characters, hence the answer is -1.","solution":"def shortest_k_distinct_substring(s: str, k: int) -> int: Finds the length of the shortest substring that contains at least k different characters. If no such substring exists, return -1. from collections import defaultdict n = len(s) if k > n: return -1 char_count = defaultdict(int) left = 0 min_length = float(\'inf\') unique_count = 0 for right in range(n): if char_count[s[right]] == 0: unique_count += 1 char_count[s[right]] += 1 while unique_count >= k: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: unique_count -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Given a string s consisting of lowercase English letters, encode it using run-length encoding (RLE). Then, decode the encoded string back to the original string and print both the encoded and decoded strings. Run-length encoding is a simple form of data compression where sequences of the same value are stored as a single value and a count. Constraints: * The length of the string s is within the range [1, 1000]. Input: The input is given in the following format: s Output: Print the encoded string and the decoded string in separate lines. Examples: Input: aaabbbcccaaa Output: a3b3c3a3 aaabbbcccaaa Input: abcd Output: a1b1c1d1 abcd","solution":"def run_length_encode(s): Encode the input string s using run-length encoding. encoded = \\"\\" i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 encoded += s[i] + str(count) i += 1 return encoded def run_length_decode(encoded): Decode the run-length encoded string. decoded = \\"\\" i = 0 while i < len(encoded): char = encoded[i] count = int(encoded[i + 1]) decoded += char * count i += 2 return decoded # Main function to encode and then decode the string def encode_and_decode(s): encoded = run_length_encode(s) decoded = run_length_decode(encoded) return encoded, decoded"},{"question":"In a newly discovered cave system, archaeologists have found an ancient mechanism that operates with three distinct gears aligned in parallel. Each gear rotates at a specific speed, and to maintain the mechanism’s balance, the rotations per second (RPS) of these gears must meet a certain condition. Specifically, the overall operations of the cave are smoothly maintained only if the sum of rotations per second (RPS) for the gears is exactly equal to a given target T and the individual rotations per second of the gears are within a specified range. Each gear’s rotations per second fall within the range [L, U], but they can rotate at different speeds within this range. Your task is to determine if it is possible to set the rotations per second for each of the three gears such that their combined rotations per second is exactly T. You need to write a program that, given the values of L, U, and T, determines whether such settings exist for the gears or not. Input: The input consists of multiple datasets. Each dataset is provided in the following format: > L U T L, U, and T are integers. L represents the lower limit of rotations per second for each gear, U is the upper limit, and T is the target rotations per second that the sum of the gears must meet. We can assume the following constraints: - 0 ≤ L ≤ U ≤ 1000 - 0 ≤ T ≤ 3 * U - At least one dataset will be given The end of input is signaled by three zeros separated by spaces. Output: For each dataset, output \\"YES\\" if it is possible to adjust the rotations per second of the three gears such that their sum equals T. Otherwise, output \\"NO\\". Example: Input: 1 5 9 0 3 6 2 7 22 0 0 0 Output: YES YES NO","solution":"def can_set_rps(L, U, T): Determine if it is possible to set the rotations per second of three gears such that their combined rotations per second is exactly T, with each gear\'s RPS in the range [L, U]. for i in range(L, U+1): for j in range(L, U+1): for k in range(L, U+1): if i + j + k == T: return \\"YES\\" return \\"NO\\" def process_data(data): Process multiple datasets and determine the gear RPS feasibility for each. Args: data (str): Multiline string with each line containing L, U, and T values. Returns: list: A list of responses (\\"YES\\" or \\"NO\\") for each dataset. lines = data.strip().split(\'n\') results = [] for line in lines: L, U, T = map(int, line.split()) if L == 0 and U == 0 and T == 0: break results.append(can_set_rps(L, U, T)) return results"},{"question":"The Chief Librarian at the Grand Library loves numbers and books. She is particularly interested in prime numbers. While cataloging books, she noticed that some books have prime numbers as their identification numbers and others do not. To make the cataloging process more interesting, she devised a method to find the \\"nearest prime\\" for a given number. The \\"nearest prime\\" is defined as the closest prime number that is either less than or equal to the given number. Being busy, she\'s asked for your assistance. Given a number n, can you determine the largest prime number which is less than or equal to n? Input The input consists of a single integer n (2 ≤ n ≤ 10^6). Output Output a single integer — the largest prime number which is less than or equal to n. Examples Input 10 Output 7 Input 29 Output 29 Note In the first sample, prime numbers less than or equal to 10 are 2, 3, 5, and 7. The largest prime number which is less than or equal to 10 is 7. In the second sample, 29 is already a prime number, so the answer is 29 itself.","solution":"def is_prime(num): Check if the given number is a prime number. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def nearest_prime(n): Find the largest prime number less than or equal to n. while n > 1: if is_prime(n): return n n -= 1 return None"},{"question":"Given a series of operations to be performed on an initially empty stack, output the result of each operation. The stack supports the following operations: 1. `PUSH x`: Push the integer `x` onto the stack. 2. `POP`: Remove the top element from the stack. 3. `TOP`: Output the top element of the stack. If the stack is empty, output \\"EMPTY\\". The input consists of multiple sets of operations. Each set ends with a line containing a single word \\"END\\". The end of all input is indicated by a single line containing the word \\"DONE\\". Input example ``` PUSH 5 PUSH 10 TOP POP TOP END PUSH 20 POP TOP END DONE ``` Output example ``` 10 5 EMPTY EMPTY ``` # Input: The input contains multiple sets of operations, each followed by the word \\"END\\". The entire input terminates with the word \\"DONE\\". - For each `PUSH` operation, an integer `x` (1 ≤ x ≤ 10^4) is provided. - Each `POP` or `TOP` operation does not require any additional input. # Output: For each `TOP` operation, print the value of the top element. If the stack is empty during a `TOP` operation, print \\"EMPTY\\".","solution":"def perform_stack_operations(operations): Given a list of operations, perform stack operations and return the results of TOP operations. stack = [] result = [] for operation in operations: if operation.startswith(\'PUSH\'): _, x = operation.split() stack.append(int(x)) elif operation == \'POP\': if stack: stack.pop() elif operation == \'TOP\': if stack: result.append(stack[-1]) else: result.append(\\"EMPTY\\") return result def process_input(inputs): Process the raw input to execute stack operations and return the results. operations = [] results = [] for line in inputs: if line == \\"DONE\\": break elif line == \\"END\\": results.extend(perform_stack_operations(operations)) operations = [] else: operations.append(line) return results"},{"question":"There is an infamous memory game widely played by people of all ages. The game presents a sequence of numbers, and players must find any number that repeats after its initial appearance. Polycarp’s friend is trying to practice and improve his skills in this game and needs your help to create a sequence analyzer. The task is to find the first number in the given sequence that appears at least twice. Input: The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of numbers in the sequence. The second line contains n integers representing the sequence. Each integer in the sequence is between 1 and 100 000. Output: Print the first number that appears at least twice in the sequence. If there is no such number, print -1. Examples: Input 6 2 3 4 2 1 3 Output 2 Input 5 1 2 3 4 5 Output -1 Note: In the first example, the number \'2\' is the first to repeat when reading the sequence from left to right. In the second example, no number appears more than once, so the output is -1.","solution":"def first_repeated_number(n, sequence): Finds the first number in the given sequence that appears at least twice. :param n: Number of integers in the sequence :param sequence: List of integers in the sequence :return: The first repeating number or -1 if no such number exists seen = set() for number in sequence: if number in seen: return number seen.add(number) return -1"},{"question":"Given a list of integers, your task is to determine if it is possible to rearrange the list so that no two adjacent integers in the new list are of the same value. If it is possible, print the rearranged list; otherwise, print \\"Not possible\\". Input The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. Each of the following t lines contains a single integer n (1 ≤ n ≤ 100), the number of integers, followed by a list of n non-negative integers (0 ≤ integers ≤ 100). Output For each test case, print the rearranged list if possible. If it is not possible, print \\"Not possible\\". Examples Input 3 5 1 1 1 1 1 6 1 2 1 2 1 2 4 1 2 3 4 Output Not possible 1 2 1 2 1 2 1 2 3 4 Explanation In the first test case, it is not possible to rearrange the integers so that no two adjacent integers are the same. In the second test case, it is possible to rearrange them to the list shown. In the third test case, the original list already satisfies the condition.","solution":"from collections import Counter import heapq def rearrange_list(no_of_cases, case_list): results = [] for i in range(no_of_cases): n = case_list[i][0] lst = case_list[i][1] count = Counter(lst) max_heap = [] for num, freq in count.items(): heapq.heappush(max_heap, (-freq, num)) result = [] prev_freq, prev_num = 0, None while max_heap: freq, num = heapq.heappop(max_heap) result.append(num) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_num)) prev_freq, prev_num = freq + 1, num if len(result) != n: results.append(\\"Not possible\\") else: results.append(\\" \\".join(map(str, result))) return results"},{"question":"# Formatting In a distant kingdom, there are two ancient stone tablets, each with a distinct linear inscription of runes. The runes are represented as lowercase English letters, and each tablet contains unique runes. The kingdom\'s scholars wish to find the longest common, non-contiguous sequence of runes between the two tablets to understand their shared origins. For this, they need to locate the longest subsequence of runes that appears in both inscriptions, maintaining the order of runes but not necessarily consecutively. Given the lengths and rune sequences of two stone tablets, determine the length of the longest common subsequence (LCS). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the number of runes on the first and second tablets respectively. The second line contains a string of n lowercase English letters – the runes on the first tablet. The third line contains a string of m lowercase English letters – the runes on the second tablet. Output Print a single integer – the length of the longest common subsequence. Example Input ``` 6 7 abcdef acdfbeg ``` Output ``` 4 ``` Input ``` 4 5 wxyz yzwux ``` Output ``` 2 ``` Note In the first example, the longest common subsequence of runes is \\"acdf\\", which has a length of 4. In the second example, the longest common subsequence can be \\"wx\\" or \\"yz\\", both of length 2.","solution":"def longest_common_subsequence(n, m, s1, s2): # Create a 2D table to store lengths of longest common subsequence. dp = [[0] * (m + 1) for _ in range(n + 1)] # Build the dp table in bottom-up fashion. for i in range(n + 1): for j in range(m + 1): if i == 0 or j == 0: dp[i][j] = 0 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # dp[n][m] contains the length of LCS. return dp[n][m]"},{"question":"You are given a matrix of size N x M consisting of characters \'L\', \'R\', \'U\', \'D\', representing left, right, up, and down respectively. A path can be formed if adjacent cells contain valid movements according to the given characters. For instance, a valid path starting at (i, j) with \'L\' will move to (i, j-1), \'R\' will move to (i, j+1), \'U\' will move to (i-1, j), and \'D\' will move to (i+1, j). A cycle is detected if you end up at the starting cell and all movements are valid. Your task is to determine the number of valid cycles present in the given matrix. Input: First line contains T - the number of test cases. For each test case, First line contains 2 space-separated positive integers - N and M - the number of rows and columns respectively. N lines follow - each line contains M space-separated characters (\'L\', \'R\', \'U\', \'D\'). Output: For each test case, print a single integer - the number of valid cycles detected. Constraints: 1 ≤ T ≤ 5 2 ≤ N, M ≤ 100 SAMPLE INPUT 1 3 3 R R D L U L L D L SAMPLE OUTPUT 1","solution":"def find_cycles(grid, N, M): def move(i, j): if grid[i][j] == \'L\': return i, j - 1 if grid[i][j] == \'R\': return i, j + 1 if grid[i][j] == \'U\': return i - 1, j if grid[i][j] == \'D\': return i + 1, j visited = [[False] * M for _ in range(N)] cycle_count = 0 for i in range(N): for j in range(M): if not visited[i][j]: path = set() ci, cj = i, j while 0 <= ci < N and 0 <= cj < M: if (ci, cj) in path: cycle_count += 1 break if visited[ci][cj]: break path.add((ci, cj)) visited[ci][cj] = True ci, cj = move(ci, cj) return cycle_count def count_cycles(test_cases): results = [] for N, M, grid in test_cases: results.append(find_cycles(grid, N, M)) return results def process_input(input_string): lines = input_string.strip().split(\'n\') index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) index += 1 grid = [] for _ in range(N): row = lines[index].split() index += 1 grid.append(row) test_cases.append((N, M, grid)) return test_cases def solution(input_string): test_cases = process_input(input_string) results = count_cycles(test_cases) return \'n\'.join(map(str, results))"},{"question":"Classes in Python are a fundamental part of object-oriented programming. Let\'s create a question that tests the candidate\'s ability to define and use classes, along with some essential methods. You are tasked with designing a rudimentary system for managing a collection of books in a library. Implement the following classes and methods: 1. A `Book` class with the following attributes: - `title` (a string) - `author` (a string) - `year` (an integer) - `borrowed` (a boolean which is initially set to False) The `Book` class should have the following methods: - A constructor (`__init__`) to initialize these attributes. - `__str__` method to return a string in the format: \\"Title by Author, Year\\". - `borrow_book` method to set the `borrowed` attribute to True. - `return_book` method to set the `borrowed` attribute to False. 2. A `Library` class that manages multiple books and has the following methods: - `__init__` method to initialize an empty list of books. - `add_book` method that takes a `Book` object and adds it to the library. - `list_books` method that returns a list of strings where each string is the string representation of a book in the library. - `borrow_book` method that takes a string `title` and marks the book as borrowed if it exists in the library and is not already borrowed. - `return_book` method that takes a string `title` and marks the book as returned if it exists in the library and is currently borrowed. Complete the implementation of `Book` and `Library` classes based on the description above. Example Usage: ```python # Create book instances book1 = Book(\\"The Catcher in the Rye\\", \\"J.D. Salinger\\", 1951) book2 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960) book3 = Book(\\"1984\\", \\"George Orwell\\", 1949) # Create a library instance and add books to it library = Library() library.add_book(book1) library.add_book(book2) library.add_book(book3) # List all books in the library library.list_books() # Borrow a book library.borrow_book(\\"1984\\") # Return a book library.return_book(\\"1984\\") ``` Expected output: ``` [\'The Catcher in the Rye by J.D. Salinger, 1951\', \'To Kill a Mockingbird by Harper Lee, 1960\', \'1984 by George Orwell, 1949\'] [\'The Catcher in the Rye by J.D. Salinger, 1951\', \'To Kill a Mockingbird by Harper Lee, 1960\', \'1984 by George Orwell, 1949\'] ``` Note: The list_books method should not show the borrowed status of books, but the borrow_book and return_book methods should update the borrowed status appropriately within the class.","solution":"class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year self.borrowed = False def __str__(self): return f\\"{self.title} by {self.author}, {self.year}\\" def borrow_book(self): self.borrowed = True def return_book(self): self.borrowed = False class Library: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def list_books(self): return [str(book) for book in self.books] def borrow_book(self, title): for book in self.books: if book.title == title and not book.borrowed: book.borrow_book() return True return False def return_book(self, title): for book in self.books: if book.title == title and book.borrowed: book.return_book() return True return False"},{"question":"Write a program that performs the following operations on a given list of integers: 1. Count the number of positive and negative integers. 2. Calculate the sum of all integers. 3. Find the largest and smallest integer. Input The first line of the input contains an integer N, the number of integers in the list. The next line contains N space-separated integers. Output The program should output four lines: - The first line contains the count of positive integers. - The second line contains the count of negative integers. - The third line contains the sum of all integers. - The fourth line contains the largest and smallest integers separated by a space. Constraints 1 ≤ N ≤ 100 -10^5 ≤ Integer values ≤ 10^5 SAMPLE INPUT 5 1 -2 3 -4 5 SAMPLE OUTPUT 3 2 3 5 -4","solution":"def analyze_integers(n, integers): Given a list of integers, performs the following operations: 1. Count the number of positive and negative integers. 2. Calculate the sum of all integers. 3. Find the largest and smallest integer. :param n: Number of integers in the list. :param integers: List of integers. :return: A tuple containing: - The count of positive integers. - The count of negative integers. - The sum of all integers. - The largest and smallest integers. positives = sum(1 for x in integers if x > 0) negatives = sum(1 for x in integers if x < 0) total_sum = sum(integers) max_int = max(integers) min_int = min(integers) return positives, negatives, total_sum, max_int, min_int"},{"question":"The Kingdom of Generix is known for its vast network of trade routes. The kingdom consists of n towns numbered from 1 to n and m unidirectional roads. Each road can transport resources in one specified direction between the towns. Since the trade network evolved haphazardly, multiple roads may exist between any pair of towns, and some towns may not be directly connected. The king\'s advisor wants to evaluate the efficiency of the kingdom\'s trade network. To achieve this, the advisor plans to find out the shortest path from the capital town (town number 1) to each of the other towns, and if there is no path to a particular town, it should be noted. You need to help the advisor by writing a program that calculates the shortest path from the capital to each of the towns in the kingdom. Input The first input line contains two integers n and m, separated by a space — n is the number of towns, and m is the number of roads in the kingdom. The following m lines contain pairs of integers ui, vi (1 ≤ ui, vi ≤ n, ui ≠ vi), separated by a space — each pair represents a road from town ui to town vi. Output Print a single line with n integers separated by spaces. The i-th integer should be the length of the shortest path from the capital (town 1) to town i. If town i is unreachable from the capital, print -1 for that town. Examples Input 5 6 1 2 1 3 2 3 2 4 3 4 4 5 Output 0 1 1 2 3 Input 4 3 1 2 2 3 3 4 Output 0 1 2 3 Input 3 2 2 3 3 2 Output 0 -1 -1 Note In the first example, the kingdom has 5 towns with the following roads: - From town 1 to town 2, 3 - From town 2 to town 3, 4 - From town 3 to town 4 - From town 4 to town 5 The shortest path from the capital (town 1) to each town is: - Town 1 to town 1 -> 0 (starting point) - Town 1 to town 2 -> edge (1 -> 2) with distance 1 - Town 1 to town 3 -> edge (1 -> 3) with distance 1 - Town 1 to town 4 -> path (1 -> 2 -> 4) with distance 2 - Town 1 to town 5 -> path (1 -> 2 -> 4 -> 5) with distance 3","solution":"from collections import deque, defaultdict def shortest_paths_from_capital(n, m, roads): graph = defaultdict(list) for u, v in roads: graph[u].append(v) distances = [-1] * n distances[0] = 0 queue = deque([1]) while queue: current_town = queue.popleft() for neighbor in graph[current_town]: if distances[neighbor - 1] == -1: distances[neighbor - 1] = distances[current_town - 1] + 1 queue.append(neighbor) return distances # Example usage: # n = 5 # m = 6 # roads = [(1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (4, 5)] # print(shortest_paths_from_capital(n, m, roads)) # Output: [0, 1, 1, 2, 3]"},{"question":"Mofi is playing a game in a string arena. The game involves a string of lowercase English letters. Mofi\'s goal is to select a substring from the original string, and reverse it in place. If the reversed substring is equal to the original substring, Mofi wins. However, Mofi wants to maximize the length of the substring that, when reversed, still remains the same. Your task is to help Mofi determine the length of the longest such palindromic substring. Input The input is a single line containing a lowercase English string of length at most 2 ⋅ 10^5. Output Output a single integer, which is the length of the longest palindromic substring. Examples Input babad Output 3 Input cbbd Output 2 Input a Output 1 Input racecar Output 7","solution":"def longest_palindromic_substring(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n == 0: return 0 # Table to store results of subproblems dp = [[False] * n for _ in range(n)] max_length = 1 # All substrings of length 1 are palindromic for i in range(n): dp[i][i] = True start = 0 # Check for sub-strings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length"},{"question":"You are working on a project management tool that schedules various tasks amongst team members. Each task is labeled with a unique identifier and has dependencies on one or more other tasks. A task cannot be started until all of its dependent tasks are completed. Your job is to create a program that determines the optimal task execution order to ensure all tasks are completed efficiently. A dataset contains several test cases. Each test case consists of n tasks, which are numbered from 0 to n-1, and their respective dependencies. The dependencies are provided as pairs of integers where the first integer represents a task and the second integer represents a task that must be completed before the first. Input The input consists of multiple datasets. Each dataset has the following format: n m t1 t2 t3 t4 . . . tm-1 tm n is the number of tasks. m is the number of dependencies. Then m lines follow, each containing two integers ti1 and ti2, indicating that task ti1 depends on task ti2. The end of input is indicated by a dataset with n = 0 and m = 0. Output For each dataset, output a single line containing the tasks in a possible order of execution that satisfies the dependencies, starting from the task with no dependencies. If there are multiple valid orderings, output any one of them. If no valid task order is possible due to circular dependencies, output \\"Cycle detected\\". Example Input 4 3 1 0 2 1 3 2 3 2 2 1 1 0 2 0 3 4 2 1 1 0 2 0 0 2 0 0 Output 0 1 2 3 0 1 2 Cycle detected","solution":"from collections import deque, defaultdict def find_order(num_tasks, dependencies): indegree = [0] * num_tasks graph = defaultdict(list) for dest, src in dependencies: graph[src].append(dest) indegree[dest] += 1 queue = deque([i for i in range(num_tasks) if indegree[i] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == num_tasks: return order else: return \\"Cycle detected\\" def process_input(data): results = [] datasets = data.strip().split(\\"nn\\") for dataset in datasets: lines = dataset.split(\\"n\\") n, m = map(int, lines[0].split()) if n == 0 and m == 0: break dependencies = [tuple(map(int, line.split())) for line in lines[1:]] order = find_order(n, dependencies) if order == \\"Cycle detected\\": results.append(order) else: results.append(\\" \\".join(map(str, order))) return results # For interaction def main(data): results = process_input(data) for result in results: print(result)"},{"question":"Given a list of integers, write a program to perform operations on the list based on the instructions provided. The list contains `n` integers, and each instruction specifies an operation to be performed on the list. The program should process each instruction sequentially and update the list accordingly. The instructions can be of the following types: 1. `ADD x`: Add the integer `x` to the end of the list. 2. `REMOVE x`: Remove all occurrences of the integer `x` from the list. 3. `INCREMENT y`: Increment each element in the list by `y`. 4. `DECREMENT y`: Decrement each element in the list by `y`. 5. `GET_SUM`: Output the sum of all integers currently in the list. Input - The first line of the input contains a single integer `n` (1 ≤ n ≤ 100000) — the number of integers initially in the list. - The next line contains `n` integers representing the initial list. - The next line contains a single integer `m` (1 ≤ m ≤ 100000) — the number of instructions. - Each of the next `m` lines contains an instruction in one of the formats described above. Output - For each `GET_SUM` instruction, output the sum of all integers in the list at that time. Example Input 5 1 2 3 4 5 6 ADD 6 INCREMENT 2 REMOVE 4 DECREMENT 1 GET_SUM REMOVE 2 Output 24","solution":"def process_list_operations(n, initial_list, m, operations): Processes a series of operations on a list and prints results as per the instructions. :param n: Initial number of integers in the list :param initial_list: List of initial integers :param m: Number of operations to perform on the list :param operations: List of operations to perform current_list = initial_list[:] def add(x): current_list.append(x) def remove(x): while x in current_list: current_list.remove(x) def increment(y): for i in range(len(current_list)): current_list[i] += y def decrement(y): for i in range(len(current_list)): current_list[i] -= y def get_sum(): print(sum(current_list)) for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": add(int(parts[1])) elif command == \\"REMOVE\\": remove(int(parts[1])) elif command == \\"INCREMENT\\": increment(int(parts[1])) elif command == \\"DECREMENT\\": decrement(int(parts[1])) elif command == \\"GET_SUM\\": get_sum()"},{"question":"You are given an array of integers. You can perform the following operation any number of times: choose any contiguous subarray of the array, and reverse the order of the elements in it. Let g(a) be the minimum number of operations required to sort the array in non-descending order. For example: * g([1, 2, 3]) = 0 (the array is already sorted); * g([3, 2, 1]) = 1 (in one operation, we can reverse the whole array); * g([3, 1, 2]) = 2 (one possible sequence is to reverse the last two elements to get [3, 2, 1] and then reverse the whole array). You are given m arrays of integers. Calculate ∑_{i = 1}^{m} g(a_i). Input The first line contains one integer m (1 ≤ m ≤ 1000) — the number of arrays. Then m lines follow, each line contains the integers in the respective array. The total number of integers across all arrays does not exceed 10^5. Each integer is between 1 and 10^9 (inclusive). Output Print one integer: ∑_{i = 1}^{m} g(a_i). Examples Input 3 1 2 3 3 2 1 3 1 2 Output 3 Input 2 7 1 5 4 3 2 1 Output 2","solution":"def g(array): Calculate the minimum number of operations (reversals) needed to sort array in non-descending order. if array == sorted(array): return 0 n = len(array) # Check if reversing the whole array sorts it if array == sorted(array, reverse=True): return 1 # If neither fully sorted nor reverse sorted, count as 2 return 2 def sum_of_min_operations(m, arrays): Calculate the sum of g(a) for m arrays. total_operations = 0 for array in arrays: total_operations += g(array) return total_operations"},{"question":"You are given an array `a` of size `n` consisting of integers. Your task is to find the number of pairs of integers `(i, j)` (1 ≤ i < j ≤ n) such that the sum of the elements indexed at `i` and `j` is odd. Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the size of the array. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 1000) — the elements of the array. Output - Print a single integer — the number of pairs `(i, j)` where the sum of `ai` and `aj` is odd. Example Input 4 1 2 3 4 Output 4 Explanation In the example, the pairs (1, 2), (1, 4), (2, 3), and (3, 4) have odd sums: - 1 + 2 = 3 (odd) - 1 + 4 = 5 (odd) - 2 + 3 = 5 (odd) - 3 + 4 = 7 (odd) The solution should count these pairs and output the count.","solution":"def count_odd_sum_pairs(n, arr): Counts the number of pairs (i, j) such that 1 ≤ i < j ≤ n and the sum of the elements at index i and j is odd. odd_count = sum(1 for x in arr if x % 2 != 0) even_count = n - odd_count return odd_count * even_count"},{"question":"You are working on a project that involves managing a list of tasks. Each task has a start time and an end time. You need to find the maximum number of non-overlapping tasks that can be completed. A task list is given, each task represented as a pair of times (start time, end time). Write a program that computes the maximum number of non-overlapping tasks. Input The first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of tasks. Each of the next n lines contains two integers s and t (0 ≤ s < t ≤ 10^9) — the start and end times of each task. Output Print a single integer — the maximum number of non-overlapping tasks that can be completed. Examples Input 3 1 4 2 3 3 5 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 4 Input 3 1 5 2 6 3 7 Output 1 Note In the first example, you can select tasks (2, 3) and (3, 5) as they do not overlap. In the second example, all tasks can be selected as they are consecutive. In the third example, no two tasks can be selected without overlapping, so the maximum number of non-overlapping tasks is 1.","solution":"def max_non_overlapping_tasks(n, tasks): Returns the maximum number of non-overlapping tasks that can be completed. Args: - n: int, number of tasks - tasks: list of tuple, each containing the start and end time of a task Returns: - int, maximum number of non-overlapping tasks # Sort tasks based on their end times tasks.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping tasks count = 0 # Initialize variable to keep track of the end time of the last added task last_end_time = 0 for start, end in tasks: if start >= last_end_time: # If the task starts after or when the last task ended, we can take this task count += 1 last_end_time = end return count"},{"question":"You are organizing a relay race event where runners compete on a linear track divided into n segments. Each segment has a specific difficulty level that affects the runners\' performance. Your goal is to assign runners to the segments in such a way that minimizes the total fatigue experienced by the team. Each runner has a unique stamina level, which determines the maximum difficulty level of the segments they can handle. A runner can only run on segments whose difficulty is less than or equal to their stamina. Each runner can only run one continuous sequence of segments. The fatigue experienced by a runner is the sum of the difficulty levels of the segments they run. Your objective is to minimize the total fatigue for the entire team. Input The first line contains two integers n and k (1 ≤ n, k ≤ 50) — the number of segments and the number of runners. The second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 100) — the difficulty level of each segment. The third line contains k integers s_1, s_2, ..., s_k (1 ≤ s_i ≤ 100) — the stamina level of each runner. Output Print a single integer, the minimum total fatigue of the team. Examples Input 5 2 1 3 2 5 4 4 3 Output 10 Input 6 3 2 4 3 1 6 5 6 3 4 Output 15 Note In the first example, there are 5 segments with difficulty levels [1, 3, 2, 5, 4] and 2 runners with stamina levels [4, 3]. The optimal assignment of segments to runners is as follows: - The first runner (with stamina 4) can handle segments [1, 3, 2] with a total difficulty of 6. - The second runner (with stamina 3) can handle segments [5, 4] with a total difficulty of 10. The minimum total fatigue is 6 + 10 = 16. In the second example, there are 6 segments with difficulty levels [2, 4, 3, 1, 6, 5] and 3 runners with stamina levels [6, 3, 4]. The optimal assignment of segments to runners is as follows: - The first runner (with stamina 6) can handle all segments as their stamina is sufficiently high. The minimum total fatigue is obtained when each runner takes a single segment they can handle, ensuring the total difficulty is distributed as evenly as possible. The assignments lead to a minimum fatigue of 2 + 4 + 3 + 1 + 6 + 5 = 21.","solution":"def minimize_total_fatigue(n, k, difficulties, stamina): # Sort both runners by their stamina in ascending order stamina.sort() # Associate each segment with its difficulty segments = [(difficulties[i], i) for i in range(n)] # Sort segments by their difficulty in ascending order segments.sort() # Initialize the fatigue counter total_fatigue = 0 # Keep track of segment assignments assigned_segments = [False] * n # Assign segments to each runner for s in stamina: current_sum = 0 for i in range(n): difficulty, index = segments[i] # Check if the segment is already assigned, and if the runner can handle it if not assigned_segments[index] and difficulty <= s: current_sum += difficulty assigned_segments[index] = True total_fatigue += current_sum return total_fatigue"},{"question":"Given an array nums of distinct integers, find the smallest number that is not present in the array. You are required to implement an efficient algorithm to solve this problem. You can assume the following: - The input array has at least one element and can have up to 1000 elements. - The integers in the array can range between -1000 and 1000. - Your task is to identify the smallest missing number in the range [1, max(nums) + 1] if all numbers from 1 to max(nums) are present. Function Signature: ```python def findSmallestMissingNumber(nums: List[int]) -> int: pass ``` Input: - A list of integers `nums` that contains distinct integers. Output: - Return a single integer which is the smallest missing number in the array. Examples: Input: ``` [3, 4, -1, 1] ``` Output: ``` 2 ``` Input: ``` [1, 2, 0] ``` Output: ``` 3 ``` Input: ``` [-5, -3, -2, 1] ``` Output: ``` 2 ``` # Explanation: In the first example, the number `2` is the smallest missing number because `1`, `3`, and `4` are present in the array, and `2` is the smallest positive integer that is missing. In the second example, the number `3` is the smallest missing number because `1` and `2` are present in the array, and `3` is the smallest positive integer that is missing. In the third example, even though there are negative numbers, the number `2` is the smallest missing positive integer because `1` is present in the array, and `2` is the smallest positive integer that is missing.","solution":"def findSmallestMissingNumber(nums): Finds the smallest positive integer that is missing from the given list of distinct integers. :param nums: List of distinct integers :return: The smallest missing positive integer # Convert the list to a set for O(1) look-up time num_set = set(nums) # Start checking for the smallest missing number from 1 smallest_missing = 1 # Keep checking for the next smallest missing number while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"In a kingdom far far away, the king decided to construct a new royal library. To ensure the library collections stay organized, each book should be placed on the correct shelf. The library has `n` shelves and each shelf has a limit of `m` books that it can hold. The librarian receives requests daily to add or remove books from the library. However, sometimes the librarian might get lost in the labyrinth of shelves and end up placing or removing the wrong book. To assist the librarian, the king ordered a magical computer to manage the library. Your task is to implement a system that manages these operations efficiently. The system should handle two types of operations: 1. Add a book: This operation should add a specified book to a specified shelf if there is space available on that shelf. 2. Remove a book: This operation should remove a specified book from a specified shelf if the book is present. You need to ensure that after each request, the system maintains the correct state of the system. Input: The first line of the input contains two integers `n` (1 ≤ n ≤ 10^5) - number of shelves and `m` (1 ≤ m ≤ 10^3) - maximum number of books a shelf can hold. The second line contains a single integer `q` (1 ≤ q ≤ 10^5) - number of requests. Each of the next `q` lines describes a request in one of the following formats: - \\"Add x y\\" - where x (1 ≤ x ≤ n) is the shelf number and y (1 ≤ y ≤ 10^9) is the book ID. - \\"Remove x y\\" - where x (1 ≤ x ≤ n) is the shelf number and y (1 ≤ y ≤ 10^9) is the book ID. Output: For each \\"Add\\" request, print \\"Added\\" if the book was successfully added, or \\"Shelf Full\\" if the shelf cannot accommodate more books. For each \\"Remove\\" request, print \\"Removed\\" if the book was successfully removed, or \\"Not Found\\" if the book is not present on that shelf. Example: Input: 3 2 5 Add 1 101 Add 1 102 Add 1 103 Remove 1 101 Remove 2 201 Output: Added Added Shelf Full Removed Not Found","solution":"def manage_library(n, m, q, requests): Manages books on shelves in a library. Parameters: - n: Number of shelves - m: Maximum number of books a shelf can hold - q: Number of requests - requests: List of requests to add or remove books Returns: - List of responses to each request shelves = [set() for _ in range(n)] responses = [] for request in requests: action, x, y = request.split() x = int(x) - 1 y = int(y) if action == \\"Add\\": if len(shelves[x]) < m: shelves[x].add(y) responses.append(\\"Added\\") else: responses.append(\\"Shelf Full\\") elif action == \\"Remove\\": if y in shelves[x]: shelves[x].remove(y) responses.append(\\"Removed\\") else: responses.append(\\"Not Found\\") return responses"},{"question":"You are given a forest with N nodes and N-1 edges. A forest is a collection of trees, and a tree is an acyclic connected graph. Each node in this forest represents a city, and each edge represents a road connecting two cities. Your task is to color each node such that no two adjacent nodes have the same color. Additionally, you should determine the minimum number of unique colors needed to accomplish this task. Input Format: - The first line contains an integer N, which represents the number of nodes. - The next N-1 lines each contain two space-separated integers u and v, which represent an edge between node u and node v. Output Format: - Print an integer which represents the minimum number of colors needed to color the forest such that no two adjacent nodes have the same color. Constraints: 1 ≤ N ≤ 10^5 1 ≤ u, v ≤ N SAMPLE INPUT: 5 1 2 1 3 3 4 3 5 SAMPLE OUTPUT: 2 Explanation: The given forest can be colored using two colors in the following way: - Color node 1 with color 1. - Color nodes 2 and 3 with color 2 (different from color of node 1). - Color nodes 4 and 5 with color 1 (different from color of node 3).","solution":"def minimum_colors_needed(N, edges): from collections import defaultdict, deque if N == 1: return 1 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): queue = deque([start]) colors = [-1] * (N + 1) colors[start] = 0 max_color = 0 while queue: node = queue.popleft() current_color = colors[node] for neighbor in graph[node]: if colors[neighbor] == -1: queue.append(neighbor) free_colors = set(range(2)) free_colors.discard(current_color) colors[neighbor] = free_colors.pop() max_color = max(max_color, colors[neighbor]) return max_color + 1 # Run BFS from any arbitrary node, here starting from node 1 return bfs(1)"},{"question":"You are given a list of integers representing the height of plants. Your task is to write a Python function that finds the longest sequence of consecutive plants (numbers) that have non-decreasing heights. If multiple sequences are of the same length, return the sequence that appears first. The function should return the longest non-decreasing sequence as a list. # Constraints: - The list contains at least one integer. - The length of the list does not exceed 1000 integers. # Function Signature: ```python def longest_non_decreasing_sequence(heights: List[int]) -> List[int]: ``` # Example Input and Output: **Example 1:** ```python Input: heights = [1, 2, 2, 3, 1, 2, 3, 4] Output: [1, 2, 2, 3] ``` **Example 2:** ```python Input: heights = [5, 4, 3, 2, 1] Output: [5] ``` **Example 3:** ```python Input: heights = [8, 8, 9, 1, 2, 2, 2, 3, 4] Output: [1, 2, 2, 2, 3, 4] ``` Complete the function definition to solve the task.","solution":"from typing import List def longest_non_decreasing_sequence(heights: List[int]) -> List[int]: Finds the longest sequence of non-decreasing heights in the list. If multiple sequences are of the same length, returns the first one. if not heights: return [] longest_seq = [] current_seq = [] for i in range(len(heights)): if i == 0 or heights[i] >= heights[i-1]: current_seq.append(heights[i]) else: if len(current_seq) > len(longest_seq): longest_seq = current_seq current_seq = [heights[i]] if len(current_seq) > len(longest_seq): longest_seq = current_seq return longest_seq"},{"question":"Alice loves solving puzzles, and today she has encountered a particularly interesting one. After discovering an ancient book, she found a sequence of integers. This sequence contains N elements, where some elements are missing and marked with a \'?\'. Alice knows that the sequence was originally an arithmetic progression, meaning the difference between any two consecutive elements in the sequence is the same. Help Alice restore the sequence by replacing all \'?\' with appropriate integers such that the resulting sequence forms a valid arithmetic progression. Input The first line contains a single integer N (2 ≤ N ≤ 1000) - the length of the sequence. The second line contains N elements, the sequence elements, separated by spaces. Each element of the sequence is either an integer (|element| ≤ 10^9) or a \'?\'. Output Print the resulting sequence as a single line of space-separated integers. Example Input 5 1 ? 5 ? 9 Output 1 3 5 7 9 Input 4 ? 3 6 ? Output 0 3 6 9 Note For the first sample testcase, the arithmetic progression has a common difference of 2. The \'?\' elements can be replaced to produce the valid sequence 1 3 5 7 9. For the second sample testcase, the arithmetic progression has a common difference of 3. The \'?\' elements can be replaced to produce the valid sequence 0 3 6 9.","solution":"def restore_sequence(N, sequence): Restore the arithmetic progression sequence by replacing \'?\' with appropriate integers. positions = [i for i, val in enumerate(sequence) if val != \'?\'] if len(positions) > 1: first_known = positions[0] second_known = positions[1] # Calculate the common difference d = (int(sequence[second_known]) - int(sequence[first_known])) // (second_known - first_known) # Fill sequence from the beginning to the first known position for i in range(first_known - 1, -1, -1): sequence[i] = int(sequence[i + 1]) - d # Fill sequence between known positions and to the end for i in range(first_known + 1, N): if sequence[i] == \'?\': sequence[i] = int(sequence[i - 1]) + d elif positions: first_known = positions[0] d = 1 # We can choose any value for d since there are no constraints given otherwise for i in range(first_known - 1, -1, -1): sequence[i] = int(sequence[i + 1]) - d for i in range(first_known + 1, N): sequence[i] = int(sequence[i - 1]) + d else: # Handle the case where all values are \'?\' sequence = list(range(N)) return list(map(int, sequence))"},{"question":"You are given a number of tasks, each represented by the time taken to complete it. You are also given two workers who will perform these tasks. Each worker can only work on one task at a time. Your goal is to determine the minimum amount of total time required to complete all tasks if the tasks can be assigned optimally between the two workers. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. For each test case: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of tasks. The second line contains n space-separated integers t_i (1 ≤ t_i ≤ 10000) — the times taken to complete the ith task. Output For each test case, print a single integer — the minimum total time required to complete all tasks. Example Input 3 5 2 3 5 7 1 3 8 4 3 4 1 2 3 4 Output 9 8 5 Explanation: In the first test case, one possible optimal distribution is: - Worker 1: tasks with times 2, 5, and 1 (total = 2+5+1 = 8) - Worker 2: tasks with times 3 and 7 (total = 3+7 = 10) The time required is the max of 8 and 10, which is 10. Another possible optimal distribution: - Worker 1: tasks with times 2, 3, and 1 (total = 2+3+1 = 6) - Worker 2: tasks with times 5 and 7 (total = 5+7 = 12) The time required is the max of 6 and 12, which is 12. The actual optimal distribution in this example ensures both workers finish their tasks almost simultaneously: - Worker 1: tasks with times 7 and 1 (total = 7+1 = 8) - Worker 2: tasks with times 2, 3, and 5 (total = 2+3+5 = 10) The actual minimal total time, when optimally assigned to two workers, is 10.","solution":"def min_total_time(test_cases): results = [] for tasks in test_cases: tasks.sort(reverse=True) # Sort task times in descending order worker1_time, worker2_time = 0, 0 for task in tasks: if worker1_time <= worker2_time: worker1_time += task else: worker2_time += task results.append(max(worker1_time, worker2_time)) return results def read_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) tasks = list(map(int, lines[index + 1].split())) test_cases.append(tasks) index += 2 return test_cases def main(input_string): test_cases = read_input(input_string) results = min_total_time(test_cases) return results"},{"question":"You are given two arrays: one representing the initial state of a stock price over several days and another representing possible stock buy/sell queries. Based on these queries, determine the maximum possible profit you can achieve by buying and selling the stock once. Input The first line contains a single integer n (2 ≤ n ≤ 10^5), representing the number of days. The second line contains n integers separated by spaces, where each integer represents the stock price on that day. Prices are guaranteed to be positive integers not exceeding 10^9. The third line contains a single integer q (1 ≤ q ≤ 10^5), representing the number of queries. The next q lines each contain two integers li and ri (1 ≤ li < ri ≤ n), representing a range of days over which a buy and sell operation is to be considered. Output For each query, output a single integer — the maximum profit that can be achieved if you buy the stock on one of the days between li and ri-1 (inclusive) and sell it on one of the days between li+1 and ri (inclusive). If no profit can be achieved in the given range, output 0. Examples Input 8 3 8 5 1 7 8 10 2 3 1 6 2 8 3 5 Output 7 9 6 Explanation In the first query, the price range is [3, 8, 5, 1, 7]: - Buy on day 4 (price 1) and sell on day 5 (price 7) for a profit of 6. - Buy on day 1 (price 3) and sell on day 2 (price 8) for a profit of 5. - The maximum profit is 7. In the second query, the price range is [8, 5, 1, 7, 8, 10, 2]: - Buy on day 4 (price 1) and sell on day 7 (price 10) for a profit of 9. - The maximum profit is 9. In the third query, the price range is [5, 1, 7]: - Buy on day 4 (price 1) and sell on day 5 (price 7) for a profit of 6. - The maximum profit is 6.","solution":"def max_profit_for_queries(n, prices, q, queries): Calculate the maximum profit for each query. Args: n: int - Number of days. prices: List[int] - List of stock prices over n days. q: int - Number of queries. queries: List[Tuple[int, int]] - List of queries, each contains two integers li and ri. Returns: List[int] - List containing the maximum profit for each query. results = [] for li, ri in queries: max_profit = 0 for buy_day in range(li - 1, ri - 1): # inclusive li - 1 to exclusive ri - 1 for sell_day in range(buy_day + 1, ri): # inclusive buy_day + 1 to exclusive ri profit = prices[sell_day] - prices[buy_day] if profit > max_profit: max_profit = profit results.append(max_profit) return results def process_input(input_str): Process the given input string and parse it into appropriate arguments for the main function. Args: input_str: str - Multiline string containing all input lines. Returns: Tuple: Tuple containing n (int), prices (List[int]), q (int), queries (List[Tuple[int, int]]) input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) prices = list(map(int, input_lines[1].split())) q = int(input_lines[2]) queries = [tuple(map(int, line.split())) for line in input_lines[3:3+q]] return n, prices, q, queries"},{"question":"An archaeologist named Lara is exploring an ancient pyramid. The pyramid has N chambers connected by M tunnels, and each chamber has a unique numeric identifier from 1 to N. Lara wants to explore the pyramid in such a way that she visits each chamber exactly once and returns to the starting chamber. She needs your help to determine if such a path, a Hamiltonian cycle, is possible. However, the pyramid has a peculiar property: due to ancient spells, only certain sequences of chambers are allowed. Specifically, if Lara is in chamber u, she can move to chamber v only if (u, v) forms a part of the graph\'s edges represented by the tunnels. Your task is to determine if there exists a Hamiltonian cycle and provide one such cycle if it exists. If there are multiple Hamiltonian cycles, any one of them can be output. If there is no Hamiltonian cycle, output \\"No solution\\". Input The first line contains two integers, N and M (2 ≤ N ≤ 10, 1 ≤ M ≤ 45) — the number of chambers and tunnels. The next M lines each contain two integers u and v (1 ≤ u, v ≤ N, u ≠ v) — representing an undirected tunnel between chambers u and v. Output If there exists a Hamiltonian cycle, print N numbers representing the order of chambers in the cycle, starting and ending with the same chamber. Otherwise, print \\"No solution\\". Examples Input 4 6 1 2 1 3 1 4 2 3 2 4 3 4 Output 1 2 3 4 1 Input 3 2 1 2 2 3 Output No solution Note Consider the first example. Here, the chambers form a complete graph, so there exists a Hamiltonian cycle, one valid solution would be visiting chambers in the order 1 -> 2 -> 3 -> 4 -> 1. In the second example, it is not possible to visit all chambers and return to the starting chamber since not all chambers are connected. Therefore, there is no Hamiltonian cycle, and the output is \\"No solution\\".","solution":"def find_hamiltonian_cycle(N, edges): Find a Hamiltonian cycle in the given graph if it exists. :param N: Number of chambers (vertices) :param edges: List of (u, v) pairs representing tunnels (edges) :return: A Hamiltonian cycle as a list of vertices or \\"No solution\\" if no cycle exists from itertools import permutations # Create an adjacency matrix adj = [[0] * N for _ in range(N)] for u, v in edges: adj[u-1][v-1] = 1 adj[v-1][u-1] = 1 # Check all permutations of vertices to see if any form a Hamiltonian cycle for perm in permutations(range(N)): if adj[perm[-1]][perm[0]] == 0: continue # Not a cycle if no edge between last and first vertex cycle = True for i in range(N - 1): if adj[perm[i]][perm[i + 1]] == 0: cycle = False break if cycle: return [perm[i] + 1 for i in range(N)] + [perm[0] + 1] return \\"No solution\\" # Reading input def parse_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [(int(data[i]), int(data[i + 1])) for i in range(2, len(data), 2)] return N, edges def main(): N, edges = parse_input() result = find_hamiltonian_cycle(N, edges) if result == \\"No solution\\": print(result) else: print(\\" \\".join(map(str, result)))"},{"question":"There is a garden with n flowerpots arranged in a row. Each flowerpot has either a red flower or a blue flower. Farmer George wants to replace the flowers in such a way that, after the replacements, every flowerpot contains a red flower. However, George has a few constraints. He can only replace one flower at a time, and he can choose to replace any flower regardless of its current color (red or blue). But George also wants to replace flowers in a way that minimizes the number of replacement operations. Given the current arrangement of flowers, help George determine the minimum number of replacements needed to make all flowers red. Input The first line contains a single integer n (1 ≤ n ≤ 105) representing the number of flowerpots. The second line contains a string s of length n, consisting of only the characters \'R\' and \'B\' where \'R\' represents a red flower and \'B\' represents a blue flower. Output Print a single integer representing the minimum number of replacements required. Examples Input 5 RBBRR Output 2 Input 3 BBB Output 3","solution":"def minimum_replacements(n, s): Returns the minimum number of replacements required to make all flowers red. :param n: Number of flowerpots (int) :param s: String representation of flowers (str) :return: Minimum number of replacements (int) return s.count(\'B\')"},{"question":"Given a list of integers, arrange them to form the largest possible concatenated integer. For example, given the list [50, 2, 1, 9], the largest formed integer would be 95021. You need to write a program that generates such largest concatenated integer from an input list of integers. Input The input format begins with a line containing a single integer n (1 <= n <= 100), representing the number of integers in the list. The following line contains n integers separated by spaces. Each integer is non-negative and does not exceed 10^6. Output The output should be a single line containing the largest possible concatenated integer. Example Input 5 50 2 1 9 Output 95021 Input 3 10 100 1000 Output 101001000","solution":"from functools import cmp_to_key def largest_concatenated_number(numbers): Arranges a list of non-negative integers to form the largest possible concatenated integer. :param numbers: List of non-negative integers. :return: The largest concatenated integer as a string. def compare(x, y): # Using comparison to decide the order if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert the integers to strings for comparison numbers = list(map(str, numbers)) # Sort numbers using the custom comparator sorted_numbers = sorted(numbers, key=cmp_to_key(compare)) # Concatenate sorted numbers largest_number = \'\'.join(sorted_numbers) # Edge case for multiple zeros, e.g., [0, 0] if largest_number[0] == \'0\': return \'0\' return largest_number"},{"question":"Problem Description: You are given a series of words and sentences. Your task is to count the number of occurrences of the character \'a\' (case-insensitive) in each word and sentence. Input: - The input consists of multiple lines. - Each line contains a single word or a sentence. - The input is terminated by the end of file (EOF). Output: - For each word or sentence in the input, output the count of \'a\' characters in that particular word or sentence. Constraints: - Each word or sentence consists of printable ASCII characters and spaces only. - The input is guaranteed to be non-empty until EOF. Example: Input: apple banana A random sentence with several a\'s and Aa. Output: 1 3 7","solution":"def count_a_occurrences(lines): Counts the occurrences of the character \'a\' (case-insensitive) in each line of input. :param lines: List of strings where each string is a word or sentence :return: List of integers where each integer is the count of \'a\' characters (case-insensitive) in the corresponding line results = [] for line in lines: count = sum(1 for char in line if char.lower() == \'a\') results.append(count) return results"},{"question":"Given an array of integers, you need to find out whether it is possible to make all the elements of the array equal by performing some operations. In one operation, you can increase or decrease any element of the array by 1. If it is possible, print \\"YES\\" and the minimum number of operations required to make all elements of the array equal. Otherwise, print \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 1000) - the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100000) - the elements of the array. Output If it is possible to make all elements equal, print \\"YES\\" and the minimum number of operations required. Otherwise, print \\"NO\\". Examples Input 4 1 2 3 4 Output YES 4 Input 5 3 3 3 3 3 Output YES 0 Input 3 1 2 2 Output YES 1 Note In the first example, we can make all elements equal to 2 or 3 with a total of 4 operations. In the third example, we can make all elements equal to 2 with a total of 1 operation.","solution":"def make_elements_equal(n, array): Determine if all elements of the array can be made equal. If possible, return \\"YES\\" and the minimum number of operations required. Otherwise, return \\"NO\\". :param n: int - number of elements in the array :param array: list of integers - the elements of the array :return: tuple - (\\"YES\\"/\\"NO\\", operations) if n == 1: return \\"YES\\", 0 target = round(sum(array) / n) operations = sum(abs(x - target) for x in array) return \\"YES\\", operations"},{"question":"Alyssa loves graphs and wants to test your understanding of fundamental graph algorithms. Given a connected undirected graph with n nodes and m edges, a subgraph is called a tree if it is an acyclic connected component. Your task is to determine if the given graph is a tree. A graph is a tree if it satisfies the following conditions: 1. It has exactly n-1 edges. 2. It is connected. 3. It contains no cycles. You need to output \\"YES\\" if the given graph is a tree, otherwise output \\"NO\\". # Input - The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5) where n is the number of nodes and m is the number of edges. - The next m lines contain two integers u and v (1 ≤ u, v ≤ n) representing an undirected edge between node u and node v. # Output - Output \\"YES\\" if the given graph is a tree, otherwise output \\"NO\\". # Example Input: ``` 4 3 1 2 2 3 3 4 ``` Output: ``` YES ``` Input: ``` 4 4 1 2 2 3 3 4 4 1 ``` Output: ``` NO ``` # Note In the first example, the graph has 4 nodes and 3 edges and forms a single connected component with no cycles, thus it is a tree. Hence the output is \\"YES\\". In the second example, the graph also has 4 nodes and 4 edges but forms a cycle, therefore it is not a tree. Hence the output is \\"NO\\".","solution":"def is_tree(n, m, edges): Determines if the given graph is a tree. :param n: Number of nodes :param m: Number of edges :param edges: List of edges where each edge is represented as a tuple (u, v) :return: \\"YES\\" if the graph is a tree, otherwise \\"NO\\" if m != n - 1: return \\"NO\\" from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Check if the graph is connected and acyclic using BFS visited = [False] * (n + 1) queue = deque([1]) count = 0 while queue: node = queue.popleft() if visited[node]: continue visited[node] = True count += 1 for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) # Check if all nodes are visited (graph is connected) and the count of visited nodes is n if count == n: return \\"YES\\" else: return \\"NO\\""},{"question":"In a galaxy far, far away, there is a planet consisting of m regions connected by m - 1 tunnels. Each region produces a specific type of resource. There are p different types of resources available on this planet. To make the planet\'s economy more efficient, the governing council decided to ensure that every connected subgraph of regions contains at least two different types of resources. A connected subgraph is defined as a subset of regions where there is a path between any pair of regions in the subset. You are tasked to determine if this distribution is possible, and if so, provide one such valid assignment of resources to regions. Input The first line contains two integers m, p (2 ≤ p ≤ m ≤ 100,000) — the number of regions on the planet and the number of different resource types. Each of the following m - 1 lines contains two integers a_i and b_i (1 ≤ a_i, b_i ≤ m) — the regions connected by the tunnels. Output Print \\"Yes\\" if it is possible to assign the resources in such a way that every connected subgraph contains at least two different types of resources. If it is not possible, print \\"No\\". In case the answer is \\"Yes\\", print m integers from 1 to p each, representing the type of resource for every region. Examples Input 5 2 1 2 1 3 2 4 2 5 Output Yes 1 2 1 2 1 Input 4 1 1 2 2 3 3 4 Output No Note In the first example, one of the valid assignments could be: 1 -> Resource type 1 2 -> Resource type 2 3 -> Resource type 1 4 -> Resource type 2 5 -> Resource type 1 In the second example, it is impossible to assign only one type of resource and meet the requirement that every connected subgraph contains at least two different types of resources.","solution":"def distribute_resources(m, p, tunnels): This function determines if it is possible to assign resources such that every connected subgraph contains at least two different types of resources. If possible, it returns the assignment. Parameters: m (int): The number of regions. p (int): The number of different resource types. tunnels (list of tuples): Each tuple contains two integers representing the connected regions. Returns: str: \\"Yes\\" if the assignment is possible, \\"No\\" otherwise. list of int: the assignment of resources for each region if possible. if p == 1: return \\"No\\", [] resources = [0] * m def bfs(start): queue = [start] resources[start] = 1 while queue: current = queue.pop(0) for neighbor in graph[current]: if resources[neighbor] == 0: resources[neighbor] = 1 if resources[current] == 2 else 2 queue.append(neighbor) graph = [[] for _ in range(m)] for a, b in tunnels: graph[a-1].append(b-1) graph[b-1].append(a-1) bfs(0) return \\"Yes\\", resources"},{"question":"Create a function that takes a string as input and returns a new string with all duplicate characters removed and each character appearing only once in its first occurrence order. Input The input is a single string S which consists of lowercase alphabets only. Output The output is a single string with duplicate characters removed. Example Input: input_string Output: input_srg","solution":"def remove_duplicates(input_string): Returns a new string with all duplicate characters removed and each character appearing only once in its first occurrence order. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"You are given two strings: `source` and `target`. Your task is to determine the minimum number of operations required to convert the `source` string into the `target` string. The operations allowed are: 1. Insert a character 2. Delete a character 3. Replace a character Determine the minimum number of operations needed. Input The first line contains the string `source` (1 ≤ length ≤ 100). The second line contains the string `target` (1 ≤ length ≤ 100). Output Print a single integer — the minimum number of operations required to convert the `source` string into the `target` string. Examples Input kitten sitting Output 3 Input abc yabd Output 2 Input a b Output 1 Note In the first sample, the following operations are required: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end In the second sample, the following operations are required: 1. Insert \'y\' at the beginning 2. Replace \'c\' with \'d\' In the third sample, a single character replacement operation is required.","solution":"def min_operations(source, target): Returns the minimum number of operations required to convert source to target. Parameters: source (str): The original string. target (str): The target string to convert to. Returns: int: The minimum number of operations required. m, n = len(source), len(target) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Delete dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"A social media company is planning a new feature to recommend friends to its users. Each user has a unique identifier and a list of friends. The company wants the recommendation to be based on mutual friends: for a given user, suggest the friends of their friends who are not already direct friends with them. You need to write a function that takes the user\'s identifier and their list of friends and recommends friends based on mutual connections. The function should return a set of user identifiers who could be recommended as friends. Input: - `user_id`: an integer representing the user ID of the target user. - `friendships`: a dictionary where the key is an integer representing a user ID, and the value is a list of integers representing the IDs of the user\'s friends. Output: - A set of integers representing the recommended friends\' IDs. Constraints: - Each user will have at most 1000 friends. - The number of users will not exceed 1000. - User IDs are positive integers. Examples: Input: ```python user_id = 1 friendships = { 1: [2, 3], 2: [1, 4], 3: [1, 5], 4: [2, 6], 5: [3, 7, 8], 6: [4], 7: [5], 8: [5] } ``` Output: ```python {4, 5} ``` Explanation: - The user with ID 1 has friends 2 and 3. - User 2\'s friends (excluding user 1) are [4], and user 3\'s friends (excluding user 1) are [5, 7, 8]. - The recommended friends for user 1 would be [4, 5] since these are the mutual friends\' friends who are not already direct friends of user 1.","solution":"def recommend_friends(user_id, friendships): Recommends friends based on mutual connections. Parameters: user_id (int): The user ID of the target user. friendships (dict): A dictionary where the key is a user ID and the value is a list of user IDs representing the friends of that user. Returns: set: A set of user IDs representing the recommended friends. direct_friends = set(friendships.get(user_id, [])) mutual_friends = set() for friend in direct_friends: for friend_of_friend in friendships.get(friend, []): if friend_of_friend != user_id and friend_of_friend not in direct_friends: mutual_friends.add(friend_of_friend) return mutual_friends"},{"question":"A popular tourist attraction offers a bungee jumping experience. Each participant\'s weight is recorded and the bungee cord length is adjusted accordingly to ensure safety. The total weight on the platform is determined by the addition of the weights of all participants standing on it. The platform has a strict weight capacity beyond which it is unsafe to allow any more participants. Your task is to develop a function that will help the organizers decide whether it is safe to add another participant to the platform or not. The function will receive a list of current participants\' weights, the weight of the new participant, and the maximum safe weight for the platform. It should return a boolean value indicating whether it is safe (True) or not (False) to add the new participant to the platform. Input There are three inputs: 1. A list of integers representing the current weights of participants on the platform (weighs[]). 2. An integer representing the weight of the new participant (new_weight). 3. An integer representing the maximum safe weight for the platform (max_weight). Output A boolean value (True or False). Return True if it is safe to add the new participant, otherwise return False. Examples Input weights = [70, 85, 74] new_weight = 68 max_weight = 300 Output True Input weights = [100, 150, 60] new_weight = 95 max_weight = 300 Output False Input weights = [50, 50, 50, 50] new_weight = 50 max_weight = 200 Output True Input weights = [85, 80] new_weight = 60 max_weight = 220 Output False Note In the first example, the total weight on the platform would be 70 + 85 + 74 + 68 = 297, which is less than the maximum safe weight of 300. Thus, it is safe to add the new participant, so the function should return True. In the second example, the total weight on the platform would be 100 + 150 + 60 + 95 = 405, which exceeds the maximum safe weight of 300. Therefore, it is not safe to add the new participant, so the function should return False. In the third example, the total weight on the platform would be 50 + 50 + 50 + 50 + 50 = 250 which is exactly at the max limit but still safe, so the function should return True. In the fourth example, the total weight on the platform would be 85 + 80 + 60 = 225 which exceeds the maximum safe weight of 220. Therefore, it is not safe to add the new participant, so the function should return False.","solution":"def is_safe_to_add(weights, new_weight, max_weight): Returns whether it is safe to add the new participant to the platform. Parameters: weights (list): The list of current weights of participants on the platform. new_weight (int): The weight of the new participant. max_weight (int): The maximum safe weight for the platform. Returns: bool: True if it is safe to add the new participant, False otherwise. current_total_weight = sum(weights) projected_total_weight = current_total_weight + new_weight return projected_total_weight <= max_weight"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation any number of times: choose any substring (starting from any position and of length 1 or more) of s and replace all its characters with the most frequent character in that substring. Your task is to determine the minimum number of operations required to transform the entire string s into a single character (i.e., all characters in the resulting string should be the same). Input The first line of the input contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Each of the following t lines contains one string s (1 ≤ |s| ≤ 2 ⋅ 10^5), where |s| is the length of the string. Output For each test case, print one integer — the minimum number of operations required to transform the entire string into a single character. Examples Input 3 aabb abc eeeeee Output 2 2 0 Explanation In the first test case, we can perform the following operations: - Choose the substring \\"aa\\" and replace it with \'a\'. - Choose the substring \\"bb\\" and replace it with \'a\'. In the second test case, we can perform the following operations: - Choose the substring \\"b\\" and replace it with \'a\'. - Choose the substring \\"c\\" and replace it with \'a\'. In the third test case, the string is already composed of a single character, so no operations are required.","solution":"def min_operations_to_single_char(s): Returns the minimum number of operations required to transform the entire string s into a single character. from collections import Counter n = len(s) if n == 0: return 0 # Count frequency of each character freq = Counter(s) # Get the maximum frequency of any character max_freq = max(freq.values()) # The minimum number of operations needed will be the length of the string # minus the frequency of the most common character return n - max_freq def solve(test_cases): Given a list of test strings, return a list of minimum operations required for each. results = [] for s in test_cases: results.append(min_operations_to_single_char(s)) return results"},{"question":"Ravi is organizing a treasure hunt game for a group of kids. In this treasure hunt, each kid is tasked with finding hidden treasures in a grid. The grid is represented as an `N x N` matrix where each cell can either have a treasure or be empty. Each kid starts their hunt on some cell `(x, y)` in the grid. The kid can move up, down, left, or right, and can only move to a cell that hasn\'t been visited yet. Upon entering a cell, if there\'s a treasure in it, the kid collects the treasure and moves on. The kid\'s goal is to maximize the number of treasures collected before all reachable cells are visited. Given the starting position of the kid and the grid setup, determine the maximum number of treasures that the kid can collect. Input - The first line contains two integers, `N` (1 ≤ N ≤ 500) representing the size of the grid, and `T` (0 ≤ T ≤ N^2) representing the total number of treasures. - The next `T` lines each contain two integers `i` and `j` (0 ≤ i, j < N) denoting that there is a treasure located at cell `(i, j)`. - The last line contains two integers `x` and `y` (0 ≤ x, y < N) representing the starting position of the kid. Output - Print an integer representing the maximum number of treasures that the kid can collect. Example Input 5 3 1 1 2 2 3 3 0 0 Output 3 Input 5 5 1 0 1 1 1 2 1 3 1 4 2 2 Output 5","solution":"def max_treasures(N, T, treasures, start_x, start_y): from collections import deque # Create the grid and mark the treasures grid = [[0] * N for _ in range(N)] for (i, j) in treasures: grid[i][j] = 1 # Initialize variables for BFS visited = [[False] * N for _ in range(N)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right max_treasures_collected = 0 queue = deque([(start_x, start_y)]) visited[start_x][start_y] = True while queue: x, y = queue.popleft() if grid[x][y] == 1: max_treasures_collected += 1 grid[x][y] = 0 # Collect the treasure for dx, dy in directions: new_x, new_y = x + dx, y + dy if 0 <= new_x < N and 0 <= new_y < N and not visited[new_x][new_y]: visited[new_x][new_y] = True queue.append((new_x, new_y)) return max_treasures_collected"},{"question":"You are given a string formed by opening and closing brackets of four types: (), {}, [], <>. We call a string valid if and only if: 1. It is the empty string, or 2. The string can be written as AB (A concatenated with B), where A and B are valid strings, or 3. The string can be written as (A), {A}, [A], or <A>, where A is a valid string. You need to determine if the given string is valid or not. Input The first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 10^5) composed of the bracket characters \'(\', \')\', \'{\', \'}\', \'[\', \']\', \'<\', \'>\'. Output For each test case, print \\"YES\\" if the string is valid, and \\"NO\\" otherwise. Example Input 3 (){}[] (<{}>) ([)] [{(<)>}] Output YES YES NO NO Note In the first example, all test case strings are valid bracket sequences. In the second example, the third test case fails because the closing brackets do not match correctly.","solution":"def is_valid_bracket_sequence(s): stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\', \'>\': \'<\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map: if stack and stack[-1] == bracket_map[char]: stack.pop() else: return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def validate_bracket_sequences(test_cases): results = [] for s in test_cases: results.append(is_valid_bracket_sequence(s)) return results"},{"question":"You are given k, the number of distinct lowercase letters. Your task is to construct any valid permutation of these k letters and print a string composed of the given k lowercase letters that form a valid string such that no two consecutive characters are the same. Input The first and only line of input contains an integer k (1 ≤ k ≤ 26). Output Output a string composed of exactly k distinct lowercase letters which satisfies the conditions. Examples Input 5 Output abcde Input 1 Output a Note In the first example, one possible valid string is \\"abcde\\" where all characters are distinct and no two consecutive characters are the same. In the second example, the only possible valid string is \\"a\\" since k=1.","solution":"def generate_permutation(k): Generates a permutation of k distinct lowercase letters such that no two consecutive characters are the same. Parameters: k (int): Number of distinct lowercase letters to be used. Returns: str: A valid permutation of k distinct lowercase letters. assert 1 <= k <= 26, \\"k must be between 1 and 26 inclusive.\\" if k == 1: return \\"a\\" # Create a list of the first k lowercase letters letters = [chr(i) for i in range(ord(\'a\'), ord(\'a\') + k)] # Since we are using distinct letters and k ≤ 26, no two consecutive letters will be the same return \'\'.join(letters)"},{"question":"An online multiplayer game has multiple levels that a player can progress through. Each level has a certain number of points associated with it. Players can also gain bonus points by completing achievements within the levels. Your task is to calculate the total points a player can achieve, given the points for each level and the bonus points for each achievement. The player progresses through the levels sequentially, meaning they must complete level 1 before level 2, and so on. The player can only move to the next level after collecting the points for the current level. Input The first line of the input contains two integers, n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 100), where n is the number of levels, and m is the total number of achievements the player can accomplish. The second line contains n integers, p1, p2, ..., pn (1 ≤ pi ≤ 1000), where pi is the number of points awarded for completing the ith level. The third line contains m integers, b1, b2, ..., bm (1 ≤ bi ≤ 500), where bi is the number of bonus points for the ith achievement. Output Output a single integer — the total number of points the player can achieve after completing all the levels and gaining all the achievements. Example Input 5 3 100 150 200 250 300 50 75 25 Output 1150 Input 3 2 300 200 100 100 150 Output 850 Note In the first example, the player earns 100 + 150 + 200 + 250 + 300 = 1000 points from the levels and 50 + 75 + 25 = 150 points from the achievements, resulting in a total of 1150 points. In the second example, the player earns 300 + 200 + 100 = 600 points from the levels and 100 + 150 = 250 points from the achievements, resulting in a total of 850 points.","solution":"def total_points(n, m, level_points, bonus_points): Returns the total points a player can achieve after completing all the levels and gaining all the achievements. :param n: int, number of levels :param m: int, number of achievements :param level_points: list of int, points for each level :param bonus_points: list of int, points for each achievement :return: int, total points total_level_points = sum(level_points) total_bonus_points = sum(bonus_points) return total_level_points + total_bonus_points"},{"question":"You are given two integer arrays `a` and `b`, each of size `n`. Your task is to transform array `a` into array `b`. You can perform the following operation exactly `n` times: Choose any integer `i` (1 ≤ i ≤ n) and increment `a[i]` by 1 or decrement `a[i]` by 1. Determine if it is possible to transform `a` into `b` using exactly `n` operations. Input: The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the size of the arrays. The second line contains `n` space-separated integers `a1, a2, ..., an`. The third line contains `n` space-separated integers `b1, b2, ..., bn`. Output: Print \\"YES\\" if it is possible to transform `a` into `b` using exactly `n` operations, otherwise print \\"NO\\". Examples: Input: 3 1 2 3 2 3 4 Output: YES Input: 3 1 2 3 2 4 5 Output: NO Note: In the first example, you can increment each element of `a` exactly once to get `b`. In the second example, you need at least 4 operations to transform `a` into `b`, making it impossible to achieve with exactly `n` operations.","solution":"def can_transform(n, a, b): # Calculate the total difference needed to transform a into b difference = sum(b[i] - a[i] for i in range(n)) # Check if the total difference equals n, as we need to perform exactly n operations if difference == n: return \\"YES\\" else: return \\"NO\\""},{"question":"Input 3 4 5 6 2 Output 264 # Explanation Let\'s consider a scenario where you are tasked with finding the product of all the integers provided, grouped by line. Given the input above, the first line contains the integers 3, 4, and 5. The product of these integers is 3 * 4 * 5 = 60. The second line contains the integers 6 and 2. The product of these integers is 6 * 2 = 12. Finally, you will multiply the products of each line: 60 * 12 = 720. However, since 720 is not \\"Output\\", you need to multiply it by the sum of all digits in each integer given in input. If you add 3, 4, and 5 — the digits of the first line, the sum is 12. For the second line, 6 and 2 sum to 8. The product of these sums is 96. Hence, 720 + 96 = 816. After this, you take the sum of all calculations and print the result which is 816 (720 + 96). Thus, splitting up the task: 1. Divide input into lines. 2. For each line, find the product of all integers. 3. Sum the digits in each integer line, and find the product of these sums. 4. Combine the result and output the product. Here, the above sample inputs as outputs 816 complying with the given coding assessment problem.","solution":"def calculate_product_with_digit_sum(input_string): Calculates the required output as described in the prompt. Parameters: input_string (str): The input string containing integers separated by spaces, spread across multiple lines. Returns: int: The calculated result. lines = input_string.strip().split(\'n\') total_product = 1 digit_sum_product = 1 for line in lines: integers = map(int, line.split()) line_product = 1 line_digit_sum = 0 for num in integers: line_product *= num line_digit_sum += sum(map(int, str(num))) # Sum of digits of the number total_product *= line_product digit_sum_product *= line_digit_sum final_result = total_product + digit_sum_product return final_result"},{"question":"Minerva loves solving puzzles in her free time, and she has recently encountered a new type of puzzle that involves playing with a matrix. The puzzle is based on finding the sum of elements in a submatrix. Minerva needs your help to solve it. Given a matrix of size n x m, temporarily stored as a 2D list where each element is an integer, you are to answer multiple queries. Each query represents the top-left and bottom-right corners of a submatrix. For each query, your task is to find the sum of elements within that submatrix. The matrix will have at least one element and at most 1000 rows and 1000 columns. The number of queries does not exceed 10,000. Each element in the matrix will be an integer between -10,000 and 10,000. # Input - The first line contains two integers, n and m, representing the number of rows and columns in the matrix, respectively. - The next n lines each contain m integers, representing the elements of the matrix. - The following line contains an integer q, representing the number of queries. - The next q lines each contain four integers r1, c1, r2, and c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m), representing the top-left and bottom-right corners of the submatrix. # Output For each query, output the sum of the elements in the specified submatrix. # Example Input: ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 2 3 3 ``` Output: ``` 12 24 ``` In this example, the first query asks for the sum of the elements in the submatrix from row 1 to row 2 and column 1 to column 2. The submatrix is: ``` 1 2 4 5 ``` The sum is 1 + 2 + 4 + 5 = 12. The second query asks for the sum of the elements in the submatrix from row 1 to row 3 and column 2 to column 3. The submatrix is: ``` 2 3 5 6 8 9 ``` The sum is 2 + 3 + 5 + 6 + 8 + 9 = 33.","solution":"def submatrix_sum(matrix, queries): def compute_prefix_sum(matrix): n = len(matrix) m = len(matrix[0]) PS = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): PS[i][j] = matrix[i-1][j-1] + PS[i-1][j] + PS[i][j-1] - PS[i-1][j-1] return PS PS = compute_prefix_sum(matrix) results = [] for r1, c1, r2, c2 in queries: sum_value = PS[r2][c2] - PS[r1-1][c2] - PS[r2][c1-1] + PS[r1-1][c1-1] results.append(sum_value) return results"},{"question":"A new highly infectious disease has spread in a region, and scientists are trying to model its spread over a multi-dimensional grid of people. The region is represented by an N-dimensional grid, where a cell can either be empty or contain a person. You are given the initial state of the grid and a series of queries. Each query will either add a person to a cell, remove a person from a cell, or count the number of people in a specified sub-region of the grid. The grid initially contains no people. There are three types of queries: * 1 x1 x2 ... xN — Add a person at the cell (x1, x2, ..., xN) * 2 x1 x2 ... xN — Remove the person from the cell (x1, x2, ..., xN) if there\'s one * 3 y1 y2 ... yN z1 z2 ... zN — Count the number of people in the sub-region defined by the corners (y1, y2, ..., yN) and (z1, z2, ..., zN) Input The first line contains two integers k (1 ≤ k ≤ 10^5) and N (1 ≤ N ≤ 10), where k is the number of queries and N is the number of dimensions of the grid. The next k lines contain the queries. Each query starts with an integer t (1 ≤ t ≤ 3), which defines the type of the query: * If t = 1 or t = 2, it is followed by N integers x1, x2, ..., xN (1 ≤ xi ≤ 10^9). * If t = 3, it is followed by 2*N integers y1, y2, ..., yN, z1, z2, ..., zN (1 ≤ yi ≤ zi ≤ 10^9). Output For each query of type 3, output the number of people in the specified sub-region. Examples Input 5 2 1 1 1 1 2 2 3 1 1 2 2 2 1 1 3 1 1 2 2 Output 2 1 Input 4 3 1 1 1 1 3 1 1 1 1 1 1 2 1 1 1 3 1 1 1 1 1 1 Output 1 0 Note In the first example, after each query: - Query 1: Adds a person at (1, 1) - Query 2: Adds a person at (2, 2) - Query 3: Counts the number of people in the region from (1, 1) to (2, 2), which contains 2 people - Query 4: Removes the person at (1, 1) - Query 5: Counts the number of people in the region from (1, 1) to (2, 2), which now contains 1 person","solution":"class MultidimensionalGrid: def __init__(self): self.grid = set() def add_person(self, coords): self.grid.add(tuple(coords)) def remove_person(self, coords): self.grid.discard(tuple(coords)) def count_people(self, corner1, corner2): count = 0 for person in self.grid: if all(c1 <= p <= c2 for p, c1, c2 in zip(person, corner1, corner2)): count += 1 return count def process_queries(k, N, queries): grid = MultidimensionalGrid() results = [] for query in queries: if query[0] == 1: grid.add_person(query[1:]) elif query[0] == 2: grid.remove_person(query[1:]) elif query[0] == 3: corner1 = query[1:N+1] corner2 = query[N+1:] results.append(grid.count_people(corner1, corner2)) return results"},{"question":"You are given three integers A, B, and C. Determine if these integers can form the sides of a right-angled triangle. Constraints * 1 leq A, B, C leq 10^9 * A, B, and C are integers. Input Input is given from Standard Input in the following format: A B C Output If A, B, and C can form the sides of a right-angled triangle, print `YES`; if they cannot, print `NO`. Examples Input 3 4 5 Output YES Input 5 12 13 Output YES Input 1 2 3 Output NO Input 10 6 8 Output YES","solution":"def is_right_angled_triangle(A, B, C): Determines if the given sides A, B, and C can form a right-angled triangle. Returns \'YES\' if they can, \'NO\' otherwise. sides = sorted([A, B, C]) return \'YES\' if sides[0]**2 + sides[1]**2 == sides[2]**2 else \'NO\' # Example usage: # if __name__ == \\"__main__\\": # A, B, C = map(int, input().split()) # print(is_right_angled_triangle(A, B, C))"},{"question":"Given an array of integers, find the minimum subsequence sum that is not present in the array. We define a subsequence of an array ( A ) as a sequence that can be derived from ( A ) by picking up some or no elements of ( A ) preserving the order. A subsequence sum is the sum of some or all elements from a subsequence of ( A ). Your task is to find the smallest positive integer that is not a subsequence sum of the given array. Input The input consists of one line containing a list of integers, separated by a space. The length of the list is between 1 and 1000, inclusive. Each integer in the list is between 1 and 5000, inclusive. Output Output a single integer which is the smallest positive integer that is not a subsequence sum of the array. Sample Input 1 1 2 3 Sample Output 1 7 Sample Input 2 2 3 4 Sample Output 2 1 Sample Input 3 1 1 1 1 Sample Output 3 5 Example Input 2 3 4 Output 1","solution":"def min_non_subsequence_sum(arr): Returns the smallest positive integer that is not a subsequence sum of the given array. arr.sort() smallest_missing_sum = 1 for num in arr: if num > smallest_missing_sum: break smallest_missing_sum += num return smallest_missing_sum def parse_input(input_str): Parses the input string into a list of integers. return list(map(int, input_str.strip().split()))"},{"question":"A team of archaeologists has discovered an ancient map that reveals the hidden paths within a forgotten labyrinth. The labyrinth consists of rectangular grids, where some grids might have obstacles making them impassable. The objective for the archaeologists is to travel from the top-left corner of the labyrinth to the bottom-right corner while avoiding the obstacles. Write a program to help the archaeologists find the total number of different paths they can take to reach the bottom-right corner of the labyrinth from the top-left corner, moving only right or down at each step. Input The first line contains two integers, `m` and `n`, representing the number of rows and columns in the labyrinth, respectively. (1 ≤ m, n ≤ 100) The next `m` lines each contain `n` characters, where `.` represents an open space and `#` represents an obstacle. Output Output the number of unique paths from the top-left corner to the bottom-right corner. If there is no path, output 0. Example Input 3 4 . . . # . # . . . . . . Output 3 Explanation There are three possible paths: - Right → Right → Down → Down → Right - Down → Right → Right → Down → Right - Down → Down → Right → Right → Right","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return 0 dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] def parse_input_and_solve(input_string): lines = input_string.strip().split(\'n\') m, n = map(int, lines[0].split()) grid = [lines[i+1].split() for i in range(m)] return unique_paths_with_obstacles(grid) # Example to match the input problem structure example_input = \\"3 4n. . . #n. # . .n. . . .\\" print(parse_input_and_solve(example_input)) # Output: 3"},{"question":"Neko has a list of integers and she wants to perform a peculiar operation on them to help in her programming tasks concerning list manipulation. The task is to determine the smallest possible absolute difference between the sum of elements of any two non-empty subsets from the given list. The operation Neko can perform repeatedly is: * (Operation A): Divide the list into two non-empty subsets and compute the absolute difference between their sums. The goal is to find the minimum possible absolute difference after performing the operation. Neko can perform the division operation multiple times if needed to achieve the desired result. Input The first line contains a single integer n (2 ≤ n ≤ 20) — the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000). Output The output should contain a single integer — the minimum absolute difference between the sum of elements of any two non-empty subsets. Examples Input 4 1 6 11 5 Output 1 Input 3 8 5 3 Output 0 Note In the first test case, one of the possible ways to divide the list into two non-empty subsets such that the absolute difference between their sums is minimized: - Subset 1: {1, 6, 5} - Subset 2: {11} The sum of subset 1 is 12 and the sum of subset 2 is 11, resulting in an absolute difference of |12 - 11| = 1. In the second test case, it is possible to divide the list into two non-empty subsets such that the absolute difference between their sums is zero: - Subset 1: {8} - Subset 2: {5, 3} The sum of each subset is 8, resulting in an absolute difference of |8 - 8| = 0.","solution":"from itertools import combinations def min_abs_sum_diff(nums): total_sum = sum(nums) n = len(nums) min_diff = float(\'inf\') # Check each possible subset for i in range(1, n): for subset in combinations(nums, i): subset_sum = sum(subset) other_sum = total_sum - subset_sum min_diff = min(min_diff, abs(subset_sum - other_sum)) return min_diff"},{"question":"Write a program to solve the following problem: Given a string S, return the length of the longest substring containing all distinct characters. A substring is a contiguous sequence of characters within a string. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S. Output For each test case, print the length of the longest substring with all distinct characters. Constraints 1 <= T <= 200 1 <= Length of S <= 5000 Example Input: 3 abcabcbb bbbbb pwwkew Output: 3 1 3 Explanation Case 1: The longest substring with all distinct characters is \\"abc\\", which has a length of 3. Case 2: The longest substring with all distinct characters is \\"b\\", which has a length of 1. Case 3: The longest substring with all distinct characters is \\"wke\\", which has a length of 3 (note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring).","solution":"def length_of_longest_substring(S): Returns the length of the longest substring with all distinct characters. n = len(S) max_length = 0 start = 0 char_index = {} for end in range(n): if S[end] in char_index: start = max(start, char_index[S[end]] + 1) char_index[S[end]] = end max_length = max(max_length, end - start + 1) return max_length def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(length_of_longest_substring(S)) return results"},{"question":"You are given an array of integers. The array might have some consecutive numbers repeated. Your task is to find the length of the longest subsequence of consecutive repeated numbers. Input The first line contains the integer n (1 ≤ n ≤ 105). The second line contains n integers representing the array elements (1 ≤ ai ≤ 1000). Output Print a single integer representing the length of the longest subsequence of consecutive repeated numbers. Examples Input 10 1 2 2 2 3 3 4 4 4 4 Output 4 Input 7 5 5 5 5 5 5 5 Output 7 Input 8 1 2 3 4 5 6 7 8 Output 1","solution":"def longest_repeated_subsequence(arr): Returns the length of the longest subsequence of consecutive repeated numbers. if not arr: return 0 longest = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i-1]: current_length += 1 if current_length > longest: longest = current_length else: current_length = 1 return longest"},{"question":"Pipeline Ranker You have been tasked with designing an algorithm to rank multiple projects for a company. Each project has a set of possible dependencies on other projects, and each project has a known value. The goal is to rank the projects in such a way that all dependencies are respected, and the sum of the project values is maximized. Specifically, if a project B depends on project A, then project A should be ranked higher than project B. Input: - The first line of input contains an integer `N` (1 ≤ N ≤ 1000), which represents the number of projects. - The second line of input consists of `N` space-separated integers `V_i` (0 ≤ V_i ≤ 10000), where `V_i` is the value of the i-th project. - The third line of input contains an integer `M` (0 ≤ M ≤ 10000), which represents the number of dependencies. - Each of the next M lines contains two integers `A` and `B` (1 ≤ A, B ≤ N; A ≠ B), indicating that project `B` depends on project `A`. Output: - Print a single line with N space-separated integers, representing a valid ranking of the projects, where the project with a higher rank (lower index in the output) comes before any project that depends on it. If there are multiple valid rankings, any one is acceptable. Example Input: ``` 5 20 30 40 50 10 4 1 2 1 3 3 4 4 5 ``` Example Output: ``` 1 3 4 5 2 ``` or ``` 1 3 2 4 5 ``` Example Explanation: - Project 1 should precede both Project 2 and Project 3. - Project 3 should precede Project 4, and Project 4 should precede Project 5. - Project 2 can be placed at the end since the only restriction is that Project 1 precedes it. Note: - This problem can be solved using topological sorting. - The values of the projects are not explicitly used in the ranking but indicate the worth of the projects. If needed, you could break ties by considering project values.","solution":"from collections import defaultdict, deque def rank_projects(N, values, M, dependencies): indegree = [0] * (N + 1) graph = defaultdict(list) for a, b in dependencies: graph[a].append(b) indegree[b] += 1 queue = deque() for i in range(1, N + 1): if indegree[i] == 0: queue.append(i) result = [] while queue: node = queue.popleft() result.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(result) != N: raise ValueError(\\"There is a cycle in the dependencies.\\") return result"},{"question":"You are given an undirected graph with n vertices and m edges. Each edge has a non-negative weight. The goal is to find the shortest path from vertex 1 to vertex n. However, due to some constraints, you can reduce the weight of each edge by at most 1 unit. Given the graph, compute the length of the shortest path from vertex 1 to vertex n after performing optimal edge reduction. If there is no path from vertex 1 to vertex n, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of vertices and edges. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 1000) indicating an edge between vertices u and v with weight w. Output Print the length of the shortest path from vertex 1 to vertex n after performing the optimal edge reduction. If there is no path from vertex 1 to vertex n, print -1. Examples Input 4 4 1 2 2 2 3 2 3 4 2 1 4 4 Output 3 Input 4 4 1 2 1 2 3 1 3 4 1 1 4 4 Output 2 Input 3 1 1 2 2 Output -1","solution":"import heapq def dijkstra_reduce_edges(graph, n): def dijkstra(source): dist = [float(\'inf\')] * (n + 1) dist[source] = 0 pq = [(0, source)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(pq, (dist[v], v)) return dist # Initial Dijkstra run without reductions dist_from_start = dijkstra(1) dist_from_end = dijkstra(n) shortest_path = dist_from_start[n] # Try reducing each edge by 1 and recalculate the shortest path for u in range(1, n+1): for v, weight in graph[u]: if weight > 0: possible_shortest = dist_from_start[u] + weight - 1 + dist_from_end[v] shortest_path = min(shortest_path, possible_shortest) return shortest_path if shortest_path != float(\'inf\') else -1 def shortest_path_with_reduction(n, m, edges): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) return dijkstra_reduce_edges(graph, n)"},{"question":"You are planning to host a competition and you need to set up unique prize categories. The prize categories are represented as a list of integers, where each integer represents the number of prizes in that category. Your task is to initialize these prize categories by redistributing a given total number of prizes such that the resultant list contains only unique, positive integers. The sum of these integers should be as close as possible to the given total number of prizes, without exceeding it. Input The input consists of a single integer n (2 ≤ n ≤ 1000) — the total number of prizes that need to be distributed across the prize categories. Output On the first line, print an integer k — the number of unique prize categories. On the second line, print k distinct integers representing the number of prizes in each category. The integers should be unique and their sum should be as close as possible to n without exceeding it. If there are multiple correct answers, you can output any of them. Examples Input 8 Output 3 1 2 5 Input 15 Output 5 1 2 3 4 5 Input 2 Output 1 2 Note In the first example, distributing the prizes as 1, 2, and 5 distributes a total of 8 prizes and uses unique positive integers. In the second example, distributing the prizes as 1, 2, 3, 4, and 5 distributes a total of 15 prizes with unique positive integers. In the third example, since the total number of prizes is 2, we can only create one category with 2 prizes.","solution":"def prize_categories(n): Distributes n prizes into unique, positive integer categories. Returns the number of categories and the list of integers. categories = [] total = 0 i = 1 while total + i <= n: categories.append(i) total += i i += 1 if total < n: categories[-1] += n - total return len(categories), categories"},{"question":"You are tasked with developing a software module to help manage an inventory for a small bookstore. The inventory list contains a number of books, each identified by a unique string code. The bookstore manager frequently receives a list of book codes and needs to quickly check how many of these books are already in the inventory and how many are new additions. Write a program that determines how many book codes from a provided list are already in the inventory and how many are not. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of books currently in the inventory and the number of books in the provided list, respectively. The next n lines contain one string each, representing the codes of the books currently in the inventory. Each code is a non-empty string containing lowercase English letters and digits, not longer than 100 characters. The next m lines contain one string each, representing the codes of the books in the provided list. Each code follows the same format as the inventory codes. Output Print two integers separated by a space — the number of books from the provided list that are already in the inventory and the number of books that are new additions. Example Input 5 3 abc123 xyz456 book007 novel2022 textbook300 abc123 novel2022 newbook555 Output 2 1 Note In the provided example, the bookstore inventory initially contains 5 books with given codes. The provided list contains 3 books: - \\"abc123\\" (already in inventory) - \\"novel2022\\" (already in inventory) - \\"newbook555\\" (new book) Therefore, the output is 2 (already in inventory) and 1 (new addition).","solution":"def check_inventory(n, m, inventory_codes, provided_list_codes): Determines how many book codes from a provided list are already in the inventory and how many are new additions. Args: n: Number of books currently in the inventory m: Number of books in the provided list inventory_codes: List of book codes in the inventory provided_list_codes: List of book codes in the provided list Returns: Tuple containing two integers - number of books already in the inventory and number of new additions inventory_set = set(inventory_codes) # Convert inventory list to set for O(1) lookup already_in_inventory = 0 new_additions = 0 for code in provided_list_codes: if code in inventory_set: already_in_inventory += 1 else: new_additions += 1 return already_in_inventory, new_additions"},{"question":"Alice loves sorting numbers. She has recently learned about bitwise operations and wonders if you can combine sorting with them. Given an array of non-negative integers, she wants to sort them in increasing order based on the count of 1s in their binary representation. If two numbers have the same number of 1s, they should be sorted by their numeric value. Help Alice by writing a code to achieve this. INPUT: The first line contains the number of test cases, T (1 <= T <= 100). For each test case: - The first line contains an integer n (1 <= n <= 10^6), representing the size of the array. - The second line contains n non-negative integers (each <= 10^6), separated by spaces. OUTPUT: For each test case, output the sorted array on a new line. The numbers should be separated by a single space. SAMPLE INPUT 2 3 3 7 8 5 0 1 2 4 8 SAMPLE OUTPUT 8 3 7 0 1 2 4 8 Explanation For the first test case: - Binary representations are: - 3 -> \\"11\\" (2 ones) - 7 -> \\"111\\" (3 ones) - 8 -> \\"1000\\" (1 one) - Sorting first by the number of 1s gives: 8 (1 one), 3 (2 ones), 7 (3 ones). - So the output is \\"8 3 7\\". For the second test case: - Binary representations are: - 0 -> \\"0\\" (0 ones) - 1 -> \\"1\\" (1 one) - 2 -> \\"10\\" (1 one) - 4 -> \\"100\\" (1 one) - 8 -> \\"1000\\" (1 one) - Sorting first by the number of 1s gives: 0 (0 ones), 1 (1 one), 2 (1 one), 4 (1 one), 8 (1 one), and by numeric value within those groups. - So the output is \\"0 1 2 4 8\\".","solution":"def sort_by_bits(arr): Sort an array of integers based on the number of 1s in their binary representation. If two numbers have the same number of 1s, they are sorted by their numeric value. return sorted(arr, key=lambda x: (bin(x).count(\'1\'), x)) def sort_test_cases(test_cases): results = [] for case in test_cases: n, array = case sorted_array = sort_by_bits(array) results.append(sorted_array) return results def main(test_cases_input): Parses input for multiple test cases and returns the sorted results for all test cases, ready to be printed. test_cases = [] current_index = 0 t = int(test_cases_input[current_index]) current_index += 1 for _ in range(t): n = int(test_cases_input[current_index]) current_index += 1 array = list(map(int, test_cases_input[current_index].split())) current_index += 1 test_cases.append((n, array)) sorted_test_cases = sort_test_cases(test_cases) return sorted_test_cases"},{"question":"You are a treasure hunter and you\'ve finally found a mysterious island where a hidden treasure awaits. In order to locate the treasure, you have to solve a puzzle involving a sequence of caves. Each cave has a certain number of gold coins, but there are also traps to avoid. The island consists of `n` caves, aligned in a straight line, each containing exactly `c_i` coins. However, some caves have traps that will cause you to lose all the coins collected up to that point if you enter those caves. Your goal is to collect the maximum number of coins without falling into any trap. You can only move forward through the sequence of caves, starting at the first untrapped cave and ending at or before a cave that has a trap. Determining the best strategy might help you retire early as a rich person! Input The first line contains an integer `n` (1 ≤ n ≤ 2 ⋅ 10^5) representing the number of caves on the island. The second line contains `n` integers `c_1, c_2, ..., c_n` (−10^6 ≤ c_i ≤ 10^6) where `c_i` is the number of coins in the i-th cave. A positive integer indicates the number of coins, and a negative integer indicates a trap at that cave, in which case the value is irrelevant since it serves as a trap. Output Print a single integer — the maximum number of coins you can collect without encountering a trap. Examples Input 6 3 5 -1 4 6 2 Output 8 Input 5 4 -5 3 2 -2 Output 4 Input 7 1 2 3 -1 5 -2 8 Output 6 Note In the first example, you can collect the coins in the first two caves, i.e., `3 + 5 = 8`. In the second example, you can only collect the coins in the first cave before encountering a trap. In the third example, you can collect the coins in the first three caves, i.e., `1 + 2 + 3 = 6`.","solution":"def max_coins(n, coins): Returns the maximum number of coins that can be collected without encountering a trap. :param n: number of caves :param coins: list of integers representing the coins in each cave, where a negative value indicates a trap :return: maximum number of coins that can be collected without encountering a trap max_coins_collected = 0 current_coins = 0 for coin in coins: if coin < 0: break current_coins += coin max_coins_collected = max(max_coins_collected, current_coins) return max_coins_collected"},{"question":"A software development company is organizing a coding competition where each contestant needs to solve a series of problems. To ensure the contest is fair, they want to verify that the solutions produce the correct results. They have implemented a simple grading system but need you to create a program that will compute the scores for each contestant based on their submissions. The input to your program will be a list of test cases along with the expected output for each test case, and the actual output from the contestants. Your program needs to compare the expected output with the actual output and determine the score for each contestant accordingly. The scoring system works as follows: - Each test case is worth 1 point. - If the actual output matches the expected output for a test case, the contestant receives 1 point for that test case. - If the actual output does not match the expected output, the contestant receives 0 points for that test case. You need to write a program that reads the number of test cases, the expected output for each test case, and the actual output from the contestants, then calculates and prints the total score for the contestant. Input The first line of input contains a single integer n (1 ≤ n ≤ 100), the number of test cases. The following n lines each contain a non-empty string representing the expected output for each test case. The following n lines each contain a non-empty string representing the actual output for each test case from the contestant. The length of each string is at most 1000 characters. Output Print a single integer, the total score for the contestant. Example Input 3 sampleOutput1 sampleOutput2 sampleOutput3 sampleOutput1 incorrectOutput sampleOutput3 Output 2 Note In the example above, the first and third test cases match the expected output, so the contestant gets 1 point for each of those test cases. The total score is 2.","solution":"def calculate_score(n, expected_outputs, actual_outputs): Calculate the total score based on expected and actual outputs. Args: n : int : the number of test cases expected_outputs : list of str : the expected outputs for each test case actual_outputs : list of str : the actual outputs from the contestant for each test case Returns: int : the total score score = 0 for expected, actual in zip(expected_outputs, actual_outputs): if expected == actual: score += 1 return score"},{"question":"Alice is participating in a puzzle contest. She needs to arrange distinct numbers such that their permutation satisfies a specific condition. Given an integer n, Alice must construct a permutation of numbers from 1 to n such that for every 1 ≤ i ≤ n-1, the absolute difference between the ith element and the (i+1)th element is at most k. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n). Output Print one possible permutation of numbers from 1 to n that satisfies the condition. If no such permutation exists, print -1. Example Input 4 2 Output 1 3 2 4 Note The permutation [1, 3, 2, 4] has absolute differences 2, 1, and 2 which are all less than or equal to 2. Explanation In this example, there are multiple correct permutations such as [2, 1, 3, 4] and [4, 2, 3, 1]. Any permutation where the condition is met is considered correct.","solution":"def construct_permutation(n, k): if n < 1 or k < 1 or k > n: return -1 if k == n: return [i for i in range(1, n + 1)] result = [] i = 1 while i <= n: block_end = min(i + k - 1, n) block = [j for j in range(block_end, i - 1, -1)] result.extend(block) i += k return result # Example usage: # n = 4, k = 2 # Outputs a permutation such as [2, 1, 4, 3] print(construct_permutation(4, 2))"},{"question":"Design a function that takes a string of lowercase letters and determines whether it is a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). Function Signature: ```python def is_palindrome(s: str) -> bool: Determine if the given string is a palindrome. Parameters: - s (str): A string containing lowercase letters. Returns: - bool: True if the string is a palindrome, False otherwise. ``` For this function: - Only lowercase letters will be considered. - The length of the input string will be between 1 and 100, inclusive. # Examples ```python input: \\"racecar\\" output: True input: \\"hello\\" output: False input: \\"madam\\" output: True input: \\"a\\" output: True ``` # Explanation - \\"racecar\\" reads the same forwards and backwards, so the function returns True. - \\"hello\\" does not read the same forwards and backwards, so the function returns False. - \\"madam\\" reads the same forwards and backwards, so the function returns True. - A single character string \\"a\\" is trivially a palindrome, so the function returns True.","solution":"def is_palindrome(s: str) -> bool: Determine if the given string is a palindrome. Parameters: - s (str): A string containing lowercase letters. Returns: - bool: True if the string is a palindrome, False otherwise. return s == s[::-1]"},{"question":"Sarah loves playing with strings. She especially enjoys finding patterns in them. Given a string s of lowercase Latin letters, she wants to count how many contiguous substrings of s are palindromes. A palindrome is a string that reads the same forward and backward. For example, \\"aba\\", \\"racecar\\", and \\"a\\" are polindromes, while \\"ab\\", \\"Not\\", and \\"palindrome\\" are not. Write a program to help Sarah count all such contiguous palindromic substrings of a given string s. Input The first line contains a single integer T (1 ≤ T ≤ 100) — the number of test cases. The following T lines each contain a single string s (1 ≤ |s| ≤ 10^3) — the string for which Sarah wants to count palindromic substrings. Output For each test case, output a single integer — the number of contiguous palindromic substrings in the given string. Example Input 3 abc aaa madam Output 3 6 7 Note In the first case, the palindromic substrings are \\"a\\", \\"b\\", and \\"c\\". In the second case, besides single letter palindromes \\"a\\" appearing at three different positions, there are also \\"aa\\" palindromes at two different positions and one \\"aaa\\" palindrome. In the third case, the palindromic substrings are individually \\"m\\", \\"a\\", \\"d\\", \\"a\\", \\"m\\", \\"ada\\", and \\"madam\\".","solution":"def count_palindromic_substrings(s): Returns the number of contiguous palindromic substrings in the given string s. n = len(s) count = 0 # Create a dp array to store results of subproblems dp = [[False] * n for _ in range(n)] # Substrings of length 1 are palindromes for i in range(n): dp[i][i] = True count += 1 # Check for substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True count += 1 # Check for substrings greater than length 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and dp[i + 1][j - 1]: dp[i][j] = True count += 1 return count def process_test_cases(T, test_cases): For each test case, compute and return the number of palindromic substrings. results = [] for s in test_cases: results.append(count_palindromic_substrings(s)) return results"},{"question":"You are a participant in a coding competition organized by XYZ Inc. This time the challenge is about analyzing and classifying customer reviews based on their sentiment. The reviews can be categorized into three sentiments: positive, neutral, and negative. Each of these sentiments is represented by an integer: 1 for positive, 2 for neutral, and 3 for negative. To assist in the training process, a dataset containing labeled customer reviews is provided. Each review is stored in a text file within separate directories named by their sentiment: \\"1\\" for positive, \\"2\\" for neutral, and \\"3\\" for negative. Each review file follows this format: the first line is the review identifier, the second line is the reviewer\'s name, and all subsequent lines contain the actual review text. The identifier is unique to each review and is included for convenient reference. You need to write a program to classify the sentiment of a new review file. It is guaranteed that every input review will correspond to one of the three sentiment categories present in the training dataset. Input The input begins with an integer id (0 ≤ id ≤ 106) — the review identifier. The second line contains the name of the reviewer. The third and subsequent lines contain the text of the review. The maximum size of any given review will not exceed 15 kilobytes. The test datasets are divided into multiple groups. Reviews in groups 1 and 2 are directly from the training set but with different identifiers. Groups 3 through 10 contain new reviews that are not part of the training set, and they are roughly ordered by increasing difficulty. Output Print an integer from 1 to 3, inclusive — the number corresponding to the sentiment of the given review. Examples Input ``` 12345 John Doe Great product, very helpful! ``` Output ``` 1 ``` Input ``` 67890 Jane Smith The product is okay, but could be improved. ``` Output ``` 2 ``` Input ``` 101112 Alice Johnson Terrible experience, not recommended. ``` Output ``` 3 ```","solution":"import re from collections import defaultdict def load_training_data(): # This is a placeholder implementation to represent loading the training data. training_data = defaultdict(list) # Simulating loading data (you would replace this with actual file reading logic) training_data[1].append(\\"Great product, very helpful!\\") training_data[2].append(\\"The product is okay, but could be improved.\\") training_data[3].append(\\"Terrible experience, not recommended.\\") return training_data def classify_review(review_text): training_data = load_training_data() sentiments = [1, 2, 3] similarities = [] review_tokens = set(re.findall(r\'w+\', review_text.lower())) for sentiment in sentiments: max_similarity = 0 for training_review in training_data[sentiment]: training_tokens = set(re.findall(r\'w+\', training_review.lower())) # Calculate Jaccard similarity intersection = review_tokens.intersection(training_tokens) union = review_tokens.union(training_tokens) similarity = len(intersection) / len(union) if union else 0 max_similarity = max(max_similarity, similarity) similarities.append((max_similarity, sentiment)) # Return the sentiment with the highest similarity return max(similarities)[1]"},{"question":"You are given an array of integers and a target value. Your task is to check if there are two distinct numbers in the array whose sum equals the target value. If such a pair exists, print \\"FOUND\\" (without quotes); otherwise, print \\"NOT FOUND\\" (without quotes). Input The first line contains an integer T representing number of test cases. Each test case consists of two lines. The first line of each test case contains an integer N, the size of the array, and an integer K, the target value. The second line contains N space-separated integers representing the elements of the array. Output For each test case, print \\"FOUND\\" if there are two distinct numbers in the array whose sum equals the target value, otherwise print \\"NOT FOUND\\". Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 0 ≤ array elements, K ≤ 10^9 SAMPLE INPUT 3 5 9 2 7 11 15 1 4 8 1 2 3 4 6 10 1 5 3 8 2 5 SAMPLE OUTPUT FOUND NOT FOUND FOUND","solution":"def find_pair_with_sum(arr, target): Check if there are two distinct numbers in the array whose sum equals the target value. :param arr: List of integers :param target: Target sum :return: \\"FOUND\\" if such a pair exists, otherwise \\"NOT FOUND\\" seen = set() for num in arr: if target - num in seen: return \\"FOUND\\" seen.add(num) return \\"NOT FOUND\\" def process_test_cases(test_cases): results = [] for case in test_cases: N, K, arr = case result = find_pair_with_sum(arr, K) results.append(result) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) K = int(data[index + 1]) arr = list(map(int, data[index + 2: index + 2 + N])) test_cases.append((N, K, arr)) index += 2 + N results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given a list of N integers. You need to determine the minimum number of moves required to make all elements equal. In one move, you can increment or decrement an element by 1. Constraints * All values in input are integers. * 1 leq N leq 50 * 1 leq Elements leq 1000 Input The input will be in the following format: N a1 a2 a3 ... aN Output Print an integer representing the minimum number of moves. Examples Input 3 1 2 3 Output 2 Input 4 1 3 7 9 Output 12 Input 5 10 10 10 10 10 Output 0","solution":"def min_moves_to_make_elements_equal(lst): Calculates the minimum number of moves required to make all elements in the list equal. median = sorted(lst)[len(lst) // 2] return sum(abs(x - median) for x in lst)"},{"question":"You are given an array ( A ) consisting of ( n ) integers. Your task is to find a subsequence ( B ) of ( A ) such that: 1. The length of ( B ) is at least 3. 2. ( B ) is a strictly increasing sequence. 3. The sum of the elements in ( B ) is maximized. If there are multiple subsequences that satisfy these conditions, return the one that appears first in ( A ). If no such subsequence exists, return an empty sequence. Input The first line contains a single integer ( n ) (1 ≤ ( n ) ≤ ( 10^5 )) — the number of elements in the array ( A ). The second line contains ( n ) space-separated integers ( A_1, A_2, ..., A_n ) (1 ≤ ( A_i ) ≤ ( 10^9 )). Output In case a valid subsequence exists, output the elements of subsequence ( B ). Otherwise, output an empty line. Examples Input 6 1 2 3 1 2 3 Output 1 2 3 Input 5 5 4 3 2 1 Output","solution":"def find_max_sum_increasing_subsequence(n, A): if n < 3: return [] dp = [0] * n parent = [-1] * n dp[0] = A[0] for i in range(1, n): max_sum = 0 for j in range(i): if A[j] < A[i] and dp[j] > max_sum: max_sum = dp[j] parent[i] = j dp[i] = A[i] + max_sum max_value, max_index = max((dp[i], i) for i in range(n)) result = [] while max_index != -1: result.append(A[max_index]) max_index = parent[max_index] result.reverse() if len(result) < 3: return [] return result"},{"question":"Vitaly has a string consisting of lowercase English letters. He wants to remove some characters from the string so that the remaining characters form a palindrome. A palindrome is a string that reads the same backward as forward. Your task is to help Vitaly by finding the minimum number of characters that should be removed to make the string a palindrome. Input The input consists of a single string s (1 ≤ |s| ≤ 1000) — the string from which some characters can be removed. Output In a single line, print the minimum number of characters that need to be removed to make the string a palindrome. Examples Input abca Output 1 Input abcba Output 0 Input abcd Output 3","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0] * n for i in range(n)] # Strings of length 1 are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Build the table. The bottom-up approach is used here. for cl in range(2, n+1): for i in range(n-cl+1): j = i+cl-1 if s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # Length of the longest palindromic subseq lps_length = dp[0][n-1] return n - lps_length"},{"question":"A large online store needs to keep track of customers\' browsing patterns to optimize their recommendation system. Each customer\'s browsing pattern is recorded in the form of a sequence of product views, where each product is identified by a unique integer ID. Your task is to find the most frequent product viewed by a customer given a sequence of product views. If there is a tie for the most frequent product, return the smallest product ID. Write a function `most_frequent_product` that takes a single parameter: - `views` (a list of integers representing the sequence of product views). The function should return an integer representing the most frequent product viewed. # Example Input ```python views = [4, 2, 2, 4, 4, 3, 4, 2, 1, 2] ``` Output ```python 2 ``` # Explanation In this example, the product with ID `2` and `4` both appear `4` times. Since both have the highest frequency and `2` is smaller than `4`, the function should return `2`. # Constraints - The length of the sequence of product views will not exceed 10^6. - Each product ID in the sequence will be a non-negative integer and will not exceed 10^6.","solution":"from collections import Counter def most_frequent_product(views): Finds the most frequent product viewed by a customer. In case of a tie, returns the smallest product ID. :param views: List of integers representing the sequence of product views. :return: Integer representing the most frequent product viewed. if not views: return None # Handle edge case of empty list counter = Counter(views) most_common = counter.most_common() max_frequency = most_common[0][1] most_frequent_products = [product for product, count in most_common if count == max_frequency] return min(most_frequent_products)"},{"question":"You are a contestant in a coding competition organized over N days. Each day, you have to solve exactly one problem. The problems vary in difficulty and take different amounts of time to solve. Your goal is to maximize your total score at the end of the competition. The competition follows these rules: 1. For each problem, you will earn a score if you solve the problem. 2. If you solve a problem on day d that requires t_d time to solve, you will lose t_d time from your available time for the next problems. 3. You start with a total of T units of time available for solving problems. 4. At each day, you can choose any problem from the list, as long as you have enough time left to solve it. Given the time required and the score for each problem, determine the maximum score you can achieve by the end of N days. Input The input consists of multiple lines: - The first line contains two integers N and T – the number of days and the total available time. - The next N lines each contain two integers t_i and s_i – the time required to solve the problem and the score for the problem on day i. Output Print the maximum score you can obtain by strategically choosing which problems to solve each day. Example Input 3 10 4 8 6 7 3 5 Output 13 Explanation You start with a total of 10 units of time. You can solve the problem on day 1 which requires 4 units of time and gives a score of 8. Thus, you have 6 units of time left. On day 2, you can solve the problem which requires 3 units of time and gives a score of 5. This gives a total score of 8 + 5 = 13. Since you do not have enough time left to solve the problem on day 3, this is the maximum score you can achieve. Note: There could be multiple optimal solutions, and any one of them can be used as the correct answer.","solution":"def max_score(n, T, problems): # Sort problems based on their score/time ratio (score per time unit) in descending order problems.sort(key=lambda x: (x[1] / x[0]), reverse=True) total_time = T total_score = 0 for time, score in problems: if total_time >= time: total_time -= time total_score += score return total_score # Example usage: # n = 3 # T = 10 # problems = [(4, 8), (6, 7), (3, 5)] # print(max_score(n, T, problems)) # Output should be 13"},{"question":"A local library is in the process of digitizing its collection of books. For this purpose, they need to design a database that can store information about books and quickly find specific books based on given criteria. Each book in the library has a unique title, an author\'s name, a year of publication, and a genre. Your task is to write a program that helps the librarians by finding books that match certain search criteria. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of books in the library. Each of the following n lines describes a book with the four space-separated attributes: title (a string with no space), author (a string with no space), year (an integer between 1500 and 2023), and genre (a string with no space). The next line of the input contains an integer q (1 ≤ q ≤ 10) — the number of search queries. Each of the following q lines describes a search query with three space-separated parameters: author, genre, and year. For each query, your task is to print all titles of books that match the given author, genre, and year. The titles should be printed in the order they were provided in the input. Output For each query, if there are one or more matching titles, print each title on a new line. If no books match the query, print \\"No matches found\\". Separate each query\'s results with a blank line. Examples Input 5 PrideAndPrejudice JaneAusten 1813 Romance 1984 GeorgeOrwell 1949 Dystopian ToKillAMockingbird HarperLee 1960 Fiction TheGreatGatsby FScottFitzgerald 1925 Fiction MobyDick HermanMelville 1851 Adventure 3 JaneAusten Romance 1813 GeorgeOrwell Dystopian 1949 JKRowling Fantasy 1997 Output PrideAndPrejudice 1984 No matches found","solution":"def find_books(n, books, q, queries): results = [] for query in queries: author, genre, year = query year = int(year) matches = [title for title, book_author, book_year, book_genre in books if book_author == author and book_genre == genre and book_year == year] if matches: results.append(\\"n\\".join(matches)) else: results.append(\\"No matches found\\") return \\"nn\\".join(results) # Example usage: # n = 5 # books = [ # (\\"PrideAndPrejudice\\", \\"JaneAusten\\", 1813, \\"Romance\\"), # (\\"1984\\", \\"GeorgeOrwell\\", 1949, \\"Dystopian\\"), # (\\"ToKillAMockingbird\\", \\"HarperLee\\", 1960, \\"Fiction\\"), # (\\"TheGreatGatsby\\", \\"FScottFitzgerald\\", 1925, \\"Fiction\\"), # (\\"MobyDick\\", \\"HermanMelville\\", 1851, \\"Adventure\\") # ] # q = 3 # queries = [ # (\\"JaneAusten\\", \\"Romance\\", 1813), # (\\"GeorgeOrwell\\", \\"Dystopian\\", 1949), # (\\"JKRowling\\", \\"Fantasy\\", 1997) # ] # print(find_books(n, books, q, queries))"},{"question":"You are given an array of integers, and your goal is to determine whether it is possible to select a non-empty sequence of consecutive elements that adds up to a given integer K. Your task is to write a function `contains_subarray_with_sum(arr: List[int], K: int) -> bool` that takes the array `arr` and the integer `K` as input and returns `True` if there exists a non-empty sequence of consecutive elements in `arr` that adds up to `K`, and `False` otherwise. # Constraints - The length of the array is between `1` and `10^5`. - Each element of the array is an integer between `-10^4` and `10^4`. # Input - An array of integers `arr` with the constraints as stated above. - An integer `K`. # Output - A boolean value `True` or `False`. # Example ```python Example 1: Input: arr = [1, 2, 3, 4, 5], K = 9 Output: True Explanation: The subarray [2, 3, 4] sums up to 9. Example 2: Input: arr = [1, 2, 3, 4, 5], K = 11 Output: False Explanation: No subarray sums up to 11. Example 3: Input: arr = [5, -2, 3, 1, 2], K = 4 Output: True Explanation: The subarray [3, 1] sums up to 4. ``` # Note - Consider edge cases where the array might contain negative numbers, and sequences can start from any index and end at any index. - Optimize for cases with large inputs.","solution":"from typing import List def contains_subarray_with_sum(arr: List[int], K: int) -> bool: current_sum = 0 sum_set = set() sum_set.add(0) for num in arr: current_sum += num if (current_sum - K) in sum_set: return True sum_set.add(current_sum) return False"},{"question":"In a forest, there are n magical trees in a line. Each tree can grow magical fruits that have different sizes and powers. The power of a fruit depends on its size and how long it has been growing on the tree. The forest keeper wants to collect a specific number of fruits with the highest total power. However, he can only collect fruits in a continuous segment of trees at once due to the magic barrier surrounding the forest. Each tree has a sequence of integers representing the power of fruits it can produce, given in a specific order from left to right. Given the number of trees and the sequences of power values for each tree, calculate the maximum total power of k fruits that can be collected from any continuous segment of trees. Input The first line contains two integers, n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of trees and the number of fruits to collect, respectively. The next n lines contain space-separated integers representing the power of fruits for each tree. The total number of integers in these n lines will be at least k and at most 100,000. Output Output a single integer — the maximum total power of k fruits collected from any continuous segment of trees. Example Input 4 3 1 2 3 4 5 6 7 8 9 10 11 12 Output 33 Explanation One possible continuous segment is trees 2 and 3, with fruit powers [4, 5, 6, 7, 8]. Collecting the top 3 fruits with the highest powers gives [6, 7, 8] for a total power of 6+7+8 = 21. Note In this example, the optimal segment is from the last tree with fruits [9, 10, 11, 12], where the highest 3 powers are 10, 11, 12 and their total is 33.","solution":"def calculate_max_total_power(n, k, trees): Calculates the maximum total power of k fruits collected from any continuous segment of trees. :param n: int - number of trees :param k: int - number of fruits to collect :param trees: List[List[int]] - list of power sequences from each tree :return: int - the maximum total power of k fruits # Combine the powers of all fruits from all trees into one list all_powers = [power for tree in trees for power in tree] # Sort the combined list of powers in descending order to pick the highest k powers all_powers.sort(reverse=True) # Take the sum of the top k powers max_total_power = sum(all_powers[:k]) return max_total_power"},{"question":"A company needs to optimize the efficiency of their warehouse operations by reorganizing the layout of products. The warehouse is represented as a matrix with `n` rows and `m` columns, and each cell contains a single product represented by an integer. Two products are considered \\"good neighbors\\" if their values are either both even or both odd. The operations team wants to reorganize the matrix in such a way that each product does not have any \\"good neighbors\\" in the four possible adjacent cells (up, down, left, right). Your task is to determine whether such a reorganization is possible and, if so, provide one possible way to reorganize the products to meet this requirement. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100). In the next `n` lines, each line contains `m` integers representing the initial layout of the products in the warehouse matrix. Output If it is not possible to reorganize the products so that no two \\"good neighbors\\" are adjacent, output \\"NO\\" (without quotes). Otherwise, output \\"YES\\" (without quotes) and in the next `n` lines, print the reorganized matrix. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output YES 2 1 4 1 2 1 2 9 2 Explanation The given matrix was: 1 2 3 4 5 6 7 8 9 One possible rearranged matrix that meets the requirement is: 2 1 4 1 2 1 2 9 2 No two adjacent cells have products that are either both even or both odd.","solution":"def reorganize_warehouse(n, m, matrix): def is_good_neighbor(a, b): return (a % 2 == b % 2) if n == 1 or m == 1: print(\\"NO\\") return new_matrix = [[0 for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): if (i + j) % 2 == 0: new_matrix[i][j] = 1 else: new_matrix[i][j] = 2 print(\\"YES\\") for row in new_matrix: print(\\" \\".join(map(str, row)))"},{"question":"Eva is analyzing a data stream buffer, which contains a series of operations inserted in real-time. Each operation in the buffer can either be appended to the buffer or deleted from the buffer. Your task is to reproduce the final state of the buffer after all operations have been executed. Initially, the buffer is empty. You will receive a sequence of operations that are to be performed on the buffer in the order of their appearance. The operations are provided as a single string where each character in the string represents an operation: - A lowercase Latin letter (a-z) means an append operation. - The character \'#\' means a delete operation which deletes the last character from the buffer. If there are no characters in the buffer to delete (when a \'#\' operation is encountered), the buffer remains unchanged for that operation. Write a program that processes the provided operations and prints the final state of the buffer. Input The input data consists of a single line containing the operations. The length of the line is from 1 to 2·10⁵ characters inclusive. The string contains lowercase Latin letters and the character \'#\'. Output Print the final content of the buffer after processing all operations. It is guaranteed that the buffer will contain at least one character after processing all the operations. Examples Input abcd Output ad Input ab#c#d Output ab","solution":"def process_operations(operations): Processes a series of append and delete operations on a buffer. Parameters: - operations (str): A string of operations where each character is either a lowercase Latin letter for append, or \'#\' for delete. Returns: - str: The final state of the buffer after performing all operations. buffer = [] for op in operations: if op == \'#\': if buffer: buffer.pop() else: buffer.append(op) return \'\'.join(buffer)"},{"question":"Ward loves prime numbers and he likes to play with arrays. Today, he got an array A of N positive integers. He wants to find the maximum difference between any two prime numbers in the array. If the array contains less than two prime numbers, print -1. Write a program that helps Ward find this maximum difference. Input: The first line of input contains an integer T denoting the number of test cases. Each test case starts with an integer N denoting the size of the array A, followed by N space-separated positive integers representing the elements of the array. Output: For each test case, print the maximum difference between any two prime numbers in the array. If there are fewer than two prime numbers, print -1. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 1000 Sample Input 3 6 8 3 15 5 14 9 4 4 10 6 15 7 2 5 11 3 17 18 19 Sample Output 2 -1 17 Explanation TestCase 1: The prime numbers in the array are 3 and 5. The maximum difference is 5 - 3 = 2. TestCase 2: There are no prime numbers in the array, so the output is -1. TestCase 3: The prime numbers in the array are 2, 5, 11, 3, 17, and 19. The maximum difference is 19 - 2 = 17.","solution":"def is_prime(num): Checks if a number is a prime number. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def max_prime_difference(array): Finds the maximum difference between any two prime numbers in the array. primes = [num for num in array if is_prime(num)] if len(primes) < 2: return -1 return max(primes) - min(primes) def process_test_cases(T, test_cases): results = [] for i in range(T): N, array = test_cases[i] results.append(max_prime_difference(array)) return results"},{"question":"Given a string S and a list of substrings L, write a program to find all starting indices of substring(s) in S that are a concatenation of each substring in L exactly once and without any intervening characters. For example, if S is \\"barfoothefoobarman\\" and L is [\\"foo\\", \\"bar\\"], you should return the indices [0,9]. The order of concatenation does not matter, so the substrings can appear in any order. # Input - A string `S`, consisting of lower-case English alphabets, having length `n`. (1 <= n <= 10000) - An integer `m` (1 <= m <= 1000) representing the number of substrings. - A list of `m` non-empty substrings L of length `k` (1 <= k <= 1000). Each substring in L consists of lower-case English alphabets. # Output - A list of starting indices where the concatenated pattern of all substrings appears in the given string. # Example Input: ``` \\"barfoothefoobarman\\" 2 [\\"foo\\", \\"bar\\"] ``` Output: ``` [0, 9] ``` Explanation: - The substring starting at index 0 is \\"barfoo\\" which is a concatenation of \\"bar\\" and \\"foo\\". - The substring starting at index 9 is \\"foobar\\" which is a concatenation of \\"foo\\" and \\"bar\\". # Note - The input substrings can appear in any order in the concatenated result. - The concatenation will not be separated by any other characters.","solution":"def find_substring_indices(S, L): from collections import Counter if not S or not L or not L[0]: return [] word_length = len(L[0]) num_words = len(L) concat_length = word_length * num_words word_count = Counter(L) result_indices = [] for i in range(word_length): left, count, temp_count = i, 0, Counter() for j in range(i, len(S) - word_length + 1, word_length): word = S[j:j + word_length] if word in word_count: temp_count[word] += 1 count += 1 while temp_count[word] > word_count[word]: left_word = S[left:left + word_length] temp_count[left_word] -= 1 count -= 1 left += word_length if count == num_words: result_indices.append(left) else: temp_count.clear() count = 0 left = j + word_length return result_indices"},{"question":"A farmer owns a piece of land represented as a grid with n rows and m columns. Each cell of the grid contains either a \'.\' representing free land or a \'#\' representing an obstacle that the farmer cannot cross. The farmer wants to plow the land, starting from the top-left corner and moving to the bottom-right corner. However, the plowing should be done by strictly following either the row-first movement (only moving right or down) or the column-first movement (only moving down or right). Determine if the farmer can reach the bottom-right corner following either of these movement patterns. If it is possible to reach the bottom-right corner, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains a string of exactly m characters representing the grid. Output Print \\"YES\\" if it is possible to reach the bottom-right corner following either the row-first or column-first movement patterns. Otherwise, print \\"NO\\". Examples Input 3 3 ..# .#. ... Output YES Input 2 2 #. .. Output NO Input 4 4 .... .. ..#. .... Output YES Note In the first sample case, the farmer can reach the bottom-right corner by moving right three times, then down two times, bypassing the obstacles. In the second sample case, it\'s impossible for the farmer to reach the bottom-right corner because there is an obstacle initially blocking the way. In the third sample case, the farmer can reach the bottom-right corner by moving down three times and then right three times.","solution":"def can_plow(n, m, grid): # Check row-first movement possibility row_first_possible = True for i in range(m): if grid[0][i] == \'#\': row_first_possible = False break for i in range(1, n): if grid[i][m-1] == \'#\': row_first_possible = False break # Check column-first movement possibility column_first_possible = True for i in range(n): if grid[i][0] == \'#\': column_first_possible = False break for i in range(1, m): if grid[n-1][i] == \'#\': column_first_possible = False break if row_first_possible or column_first_possible: return \\"YES\\" return \\"NO\\""},{"question":"Marta has recently learned about the concept of prime numbers and is fascinated by them. Now, she wants to find out more about prime twins, a pair of prime numbers that differ by exactly 2 (for instance, 3 and 5, 11 and 13). Given an integer n, help Marta determine if there is at least one pair of prime twins (p, p+2) where both p and p+2 are no greater than n. If there is such a pair, return \\"YES\\", otherwise return \\"NO\\". Input An integer n (2 ≤ n ≤ 10^6). Output Print \\"YES\\" if there exists at least one pair of prime twins <= n, otherwise print \\"NO\\". Examples Input 10 Output YES Input 14 Output YES Input 2 Output NO Input 17 Output YES Note In the first example, the pair (3, 5) and (5, 7) and (11, 13) are prime twins within the range [2, 10]. In the second example, the pair (3, 5), (5, 7), (11, 13) and (13, 15) are prime twins within the range [2, 14]. In the third example, the range only contains the prime number 2, and there are no prime twins. In the fourth example, the prime twins pairs in the range [2, 17] are (3, 5), (5, 7), (11, 13).","solution":"import math def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def has_prime_twins(n): for i in range(2, n - 1): if is_prime(i) and is_prime(i + 2): return \\"YES\\" return \\"NO\\""},{"question":"Ken is an avid gamer who loves to complete challenges in his favorite video games. In a new game, there are n challenges, each described by a sequence of points. Ken wants to complete as many challenges as possible to maximize his points. Each challenge i has points pi. However, for each challenge Ken undertakes, he needs a certain amount of time ti to complete it. Ken only has T free hours to play the game. Ken can complete challenges in any order, but he cannot start a challenge if he doesn\'t have enough time left to complete it. Help Ken determine the maximum number of challenges he can complete to get the highest possible score without exceeding his available time. Input The first line contains two integers n and T (1 ≤ n ≤ 100, 1 ≤ T ≤ 10000) — the number of challenges and the total free hours Ken has. The next n lines each contain two integers pi and ti (1 ≤ pi ≤ 1000, 1 ≤ ti ≤ T), representing the points and the time required for each challenge. Output Print a single integer — the maximum number of challenges Ken can complete. Examples Input 4 10 500 3 300 5 400 2 200 4 Output 3 Input 5 7 200 4 100 2 300 2 250 3 150 3 Output 3","solution":"def max_challenges_to_complete(n, T, challenges): Determine the maximum number of challenges Ken can complete without exceeding his available time. Parameters: n (int): number of challenges T (int): total free hours Ken has challenges (list of tuple): each tuple contains points and time required for a challenge Returns: int: maximum number of challenges that Ken can complete # Sort challenges by the time required to complete them (ascending) challenges.sort(key=lambda x: x[1]) time_spent = 0 challenges_completed = 0 for points, time in challenges: if time_spent + time <= T: time_spent += time challenges_completed += 1 else: break return challenges_completed # Example usage: n = 4 T = 10 challenges = [(500, 3), (300, 5), (400, 2), (200, 4)] print(max_challenges_to_complete(n, T, challenges)) # Output: 3"},{"question":"John is organizing a book fair and he wants to arrange the books in a specific order. Each book has a height given in centimeters. John wants to place the books such that no two books with the same height are adjacent to each other. Furthermore, he wants to minimize the total height of the bookshelf by using all the books available. Given these constraints, determine if it is possible to arrange the books as per the desired conditions. If possible, provide such an arrangement of the books\' heights. If it is not possible, indicate that no such arrangement exists. Input The first line contains the integer n (1 ≤ n ≤ 10^5), the number of books. The second line contains n integers h_i (1 ≤ h_i ≤ 1000), which represent the height of each book. Output On the first line, print \\"YES\\" if it is possible to arrange the books as required, otherwise print \\"NO\\". If the answer is \\"YES\\", print the heights of the books in one possible valid order in the second line. Examples Input 6 4 4 5 5 3 3 Output YES 4 5 4 3 5 3 Input 3 2 2 2 Output NO Input 5 1 2 1 3 3 Output YES 1 2 3 1 3 Note In the first example, \\"4 5 4 3 5 3\\" minimizes the height and fulfills the no adjacent same-height constraint. In the second example, there are three books of height 2 that cannot be arranged without having two adjacent books of the same height. In the third example, \\"1 2 3 1 3\\" is a valid arrangement that fulfills all conditions.","solution":"from collections import Counter def arrange_books(n, heights): Determine if it is possible to arrange the books such that no two books of the same height are adjacent to each other. If possible, return such an arrangement. Otherwise, return \\"NO\\". Parameters: n (int): Number of books heights (list of int): The heights of the books Returns: str: \\"YES\\" if arrangement is possible, else \\"NO\\" list of int: The arrangement of book heights (if possible) count = Counter(heights) max_freq = max(count.values()) if max_freq > (n + 1) // 2: return \\"NO\\", [] sorted_heights = sorted(count.items(), key=lambda x: -x[1]) arranged = [0] * n index = 0 for height, freq in sorted_heights: for _ in range(freq): arranged[index] = height index += 2 if index >= n: index = 1 return \\"YES\\", arranged # Example usage: # n = 6 # heights = [4, 4, 5, 5, 3, 3] # print(arrange_books(n, heights)) # Output: (\\"YES\\", [4, 5, 4, 3, 5, 3])"},{"question":"You are given a grid with R rows and C columns represented by a 2D array. Each cell in the grid can either be a wall (`#`) or an empty cell (`.`). A robot starts at the top-left corner of the grid (cell (0, 0)) and needs to reach the bottom-right corner (cell (R-1, C-1)). The robot can move up, down, left, or right but cannot pass through walls. Write a function to find the minimum number of steps required for the robot to reach the bottom-right corner. If it is not possible for the robot to reach the destination, return -1. # Function Signature ```python def min_steps_to_reach_end(grid: List[List[str]]) -> int: pass ``` # Input - grid: A list of lists of strings representing the grid (R x C). # Output - An integer representing the minimum number of steps required to reach the bottom-right corner, or -1 if it is not possible. # Example Input ```python grid = [ [\\".\\", \\"#\\", \\"#\\"], [\\".\\", \\".\\", \\"#\\"], [\\"#\\", \\".\\", \\".\\"] ] ``` # Example Output ```python 4 ``` # Constraints - 1 ≤ R, C ≤ 1000 - Each cell in the grid is either `.` (empty) or `#` (wall). # Notes - The grid\'s cells are indexed from 0. - The robot can move one step at a time to an adjacent cell (up, down, left, right). - There is no wrap-around for grid boundaries. - You should implement the function using an appropriate algorithm to ensure efficiency, given the constraints.","solution":"from typing import List from collections import deque def min_steps_to_reach_end(grid: List[List[str]]) -> int: R, C = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == R-1 and c == C-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"Fatima has a bag of magical items represented as integers. Each item gives you a specific number of health points when consumed, but consuming too many items can be detrimental due to side effects, reducing the net health. Therefore, Fatima is only allowed to consume a contiguous subsequence of the items, and she wants to maximize her net health gain. Help Fatima by writing a function to determine the maximum health points she can gain from any contiguous subsequence of the magical items. Input: The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the number of magical items. - The second line contains N space-separated integers representing the health points associated with each magical item. Output: For each test case, print the maximum health points Fatima can gain from any contiguous subsequence of the magical items on a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^4 ≤ health points ≤ 10^4 Example: Input: 2 5 -1 2 3 -5 4 4 -2 -3 4 -1 Output: 5 4 Explanation: In the first test case, the maximum health gain contiguous subsequence is [2, 3], which sums to 5. In the second test case, the maximum health gain contiguous subsequence is [4], which sums to 4.","solution":"def max_health_points(t, test_cases): def max_subarray_sum(arr): max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(max_subarray_sum(arr)) return results"},{"question":"The programming club at your school is organizing a \\"Word Transformation\\" challenge. Participants need to transform one word into another by changing one letter at a time. Each intermediate word generated during this transformation must be a valid word in a provided dictionary. To simplify the challenge and ensure a consistent format, the club has provided the following specifications: 1. Words are of the same length. 2. Words contain only lowercase English letters. 3. Each transformation step involves changing exactly one letter to another letter. 4. All intermediate words must be in the provided dictionary. Given a start word, an end word, and a list of dictionary words, write a program that finds the shortest transformation sequence from the start word to the end word. If no such transformation sequence exists, return an empty list. # Input: - A string `start_word` - A string `end_word` - A list `dictionary` of words # Output: - A list representing the shortest sequence of words transforming from the start_word to the end_word. Return an empty list if no such sequence exists. # Example: Input: ``` start_word = \\"hit\\" end_word = \\"cog\\" dictionary = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] ``` Output: ``` [\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"] ``` # Explanation: One possible shortest transformation sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\". There can be multiple valid sequences that have the same length; any of them is acceptable. # Constraints: 1. All strings are of the same length. 2. All strings contain only lowercase English letters. 3. The dictionary does not contain duplicates. 4. It is guaranteed that start_word and end_word are in the dictionary. Write the function `find_transformation_sequence(start_word, end_word, dictionary)` that implements the above transformation sequence finding.","solution":"from collections import deque def find_transformation_sequence(start_word, end_word, dictionary): Finds the shortest transformation sequence from start_word to end_word by changing one letter at a time, using words from the given dictionary. if start_word == end_word: return [start_word] word_set = set(dictionary) if end_word not in word_set: return [] queue = deque([(start_word, [start_word])]) while queue: current_word, path = queue.popleft() for i in range(len(current_word)): for char in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + char + current_word[i+1:] if next_word == end_word: return path + [end_word] if next_word in word_set: queue.append((next_word, path + [next_word])) word_set.remove(next_word) # Mark word as visited return []"},{"question":"You are given an integer n, representing the length of a sequence of balloons, each having an integer number written on it. You need to burst all the balloons. When you burst the i-th balloon, you earn score equal to a[i-1] * a[i] * a[i+1]. If balloon i doesn\'t have left neighbor (i.e., i = 1) then ignore a[i-1]. Similarly, if balloon i doesn\'t have a right neighbor (i.e., i = n) then ignore a[i+1]. Your task is to find the maximum score you can achieve by bursting the balloons wisely. Input The first line of input contains an integer n (1 ≤ n ≤ 300) — the number of balloons. The second line of input contains n integers, the i-th integer a[i] (1 ≤ a[i] ≤ 1000) — the numbers on the balloons. Output Print one integer — the maximum score you can achieve by bursting all the balloons. Example Input 4 3 1 5 8 Output 167 Note In the example, the best order to burst the balloons is (2, 1, 3, 4): * Burst balloon 2 [3, (1), 5, 8] -> score = 3 * 1 * 5 = 15 * Burst balloon 1 [(3), 5, 8] -> score = 1 * 3 * 5 = 15 * Burst balloon 3 [3, (5), 8] -> score = 3 * 5 * 8 = 120 * Burst balloon 4 [3, 8] -> score = 3 * 8 = 24 Final score = 15 + 15 + 120 + 24 = 174","solution":"def maxCoins(nums): Solve the balloon bursting problem to achieve the maximum score. n = len(nums) # Add 1 before and after nums to avoid boundary checking nums = [1] + nums + [1] # dp will store the results of subproblems dp = [[0] * (n + 2) for _ in range(n + 2)] # Length ranges from 1 to n for length in range(1, n + 1): for left in range(1, n - length + 2): right = left + length - 1 for i in range(left, right + 1): dp[left][right] = max( dp[left][right], nums[left - 1] * nums[i] * nums[right + 1] + dp[left][i - 1] + dp[i + 1][right] ) return dp[1][n]"},{"question":"Kayla loves to collect gemstones. She has a collection of `n` gemstones, each having a unique integer identifier. She wants to reorganize her collection such that the sum of every two adjacent gemstones\' identifiers is divisible by a given integer `k`. Your task is to determine if it\'s possible to rearrange the gemstones and, if so, provide one possible rearrangement. If there are multiple valid rearrangements, any will suffice. Input The first line contains two integers `n` and `k` (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000). The second line contains `n` integers `g1, g2, ..., gn` (1 ≤ gi ≤ 10000) — the identifiers of Kayla\'s gemstones. Output If it is not possible to rearrange gemstones in the desired way, print \\"NO\\". If it is possible, print \\"YES\\" on the first line and the rearranged identifiers on the second line. Examples Input 4 5 2 3 7 8 Output YES 2 3 7 8 Input 3 4 1 5 6 Output NO","solution":"from itertools import permutations def can_rearrange_gemstones(n, k, gemstones): for perm in permutations(gemstones): is_valid = True for i in range(n - 1): if (perm[i] + perm[i + 1]) % k != 0: is_valid = False break if is_valid: return True, list(perm) return False, [] def gemstones_rearrangement(n, k, gemstones): possible, arrangement = can_rearrange_gemstones(n, k, gemstones) if possible: return \\"YES\\", arrangement else: return \\"NO\\""},{"question":"You are given a string `S` consisting only of lowercase English letters. You can perform the following operation any number of times: select any character in the string and move it to the beginning or the end of the string. Determine the lexicographically smallest string that you can obtain after performing the operation any number of times. Constraints * 1 ≤ |S| ≤ 100000 Input The input is given from Standard Input in the following format: S Output Print the lexicographically smallest string that can be obtained. Examples Input dcba Output abcd Input bca Output acb Input zyxwvutsrqponmlkjihgfedcba Output abcdefghijklmnopqrstuvwxyz","solution":"def lexicographically_smallest_string(S): Returns the lexicographically smallest string that can be obtained from S. return \'\'.join(sorted(S))"},{"question":"An online retailer keeps track of the quantity of items in stock for each product. The stock data is stored in a dictionary where keys are product names, and values are the quantities of items available. They also maintain a list of transactions made during the day. Each transaction is a dictionary with three keys: \\"product\\", \\"type\\", and \\"quantity\\". The \\"type\\" can be either \\"purchase\\" or \\"sale\\". For a \\"purchase\\" transaction, the quantity of items is added to stock, while for a \\"sale\\" transaction, the quantity of items is subtracted from stock. Write a function `update_stock(stock, transactions)` that takes in two parameters: 1. `stock` - a dictionary representing the initial stock level. 2. `transactions` - a list of dictionaries representing the transactions. The function should update the stock dictionary based on the transactions and should return the updated stock. If a sale transaction results in negative stock for any product, that product\'s quantity should be set to 0. **Function Signature:** ```python def update_stock(stock: dict, transactions: list) -> dict: pass ``` **Input:** - `stock`: a dictionary where: - keys are strings representing product names. - values are integers representing quantities (0 ≤ quantity ≤ 10^6). - `transactions`: a list of dictionaries where each dictionary represents a transaction with three keys: - \\"product\\" (string) - \\"type\\" (string, either \\"purchase\\" or \\"sale\\") - \\"quantity\\" (integer, 1 ≤ quantity ≤ 10^6). **Output:** - The function should return the updated stock dictionary. **Example:** ```python stock = { \\"apple\\": 10, \\"banana\\": 5, \\"orange\\": 8 } transactions = [ {\\"product\\": \\"apple\\", \\"type\\": \\"purchase\\", \\"quantity\\": 5}, {\\"product\\": \\"banana\\", \\"type\\": \\"sale\\", \\"quantity\\": 2}, {\\"product\\": \\"orange\\", \\"type\\": \\"sale\\", \\"quantity\\": 10}, {\\"product\\": \\"pear\\", \\"type\\": \\"purchase\\", \\"quantity\\": 3} ] result = update_stock(stock, transactions) print(result) # Output: {\'apple\': 15, \'banana\': 3, \'orange\': 0, \'pear\': 3} ``` **Explanation:** - The initial stock is {\\"apple\\": 10, \\"banana\\": 5, \\"orange\\": 8}. - After a purchase of 5 apples, the stock becomes {\\"apple\\": 15, \\"banana\\": 5, \\"orange\\": 8}. - After a sale of 2 bananas, the stock becomes {\\"apple\\": 15, \\"banana\\": 3, \\"orange\\": 8}. - After a sale of 10 oranges, since 10 > 8, the stock for oranges becomes 0, so the stock is {\\"apple\\": 15, \\"banana\\": 3, \\"orange\\": 0}. - A purchase of 3 pears adds the new product to the stock, so the final stock is {\\"apple\\": 15, \\"banana\\": 3, \\"orange\\": 0, \\"pear\\": 3}.","solution":"def update_stock(stock: dict, transactions: list) -> dict: for transaction in transactions: product = transaction[\'product\'] transaction_type = transaction[\'type\'] quantity = transaction[\'quantity\'] if transaction_type == \'purchase\': if product in stock: stock[product] += quantity else: stock[product] = quantity elif transaction_type == \'sale\': if product in stock: stock[product] -= quantity if stock[product] < 0: stock[product] = 0 else: stock[product] = 0 return stock"},{"question":"A farmer has a rectangular field of dimensions `n` by `m`, where `n` represents the number of rows and `m` represents the number of columns. The farmer has a water sprinkler that can be placed on any cell of the field. When activated, the sprinkler will water the entire row and column of the cell it is placed on. The farmer wants to maximize the number of watered cells with the fewest number of sprinklers. Write a program to determine the fewest number of sprinklers needed to water the entire field. # Input The input consists of a single line containing two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the field. # Output Output a single integer — the minimum number of sprinklers needed to water the entire field. # Examples Example 1: **Input:** ``` 3 4 ``` **Output:** ``` 3 ``` **Explanation:** Place a sprinkler on cell (1,1), (2,2), and (3,3). Each row and each column has at least one sprinkler. Example 2: **Input:** ``` 5 5 ``` **Output:** ``` 5 ``` **Explanation:** Place a sprinkler on each diagonal cell (1,1), (2,2), (3,3), (4,4), and (5,5). Each row and each column has at least one sprinkler. # Note In both examples, the sprinklers are placed such that each row and each column is watered. This strategy ensures the fewest number of sprinklers used while achieving full coverage of the field.","solution":"def min_sprinklers_needed(n, m): Given the dimensions of the field n (rows) and m (columns), return the minimum number of sprinklers needed to ensure every row and column has at least one sprinkler. # To cover all rows and columns, the minimum number of sprinklers needed is the maximum of n and m. return max(n, m)"},{"question":"Dave is a huge fan of number sequences and often likes to play games with them. Recently, he discovered the Fibonacci sequence and got fascinated by how it generates numbers. Dave now wants to generate his custom sequence based on a similar rule but with a tweak: instead of the sum of the last two numbers, each number in the sequence should be the sum of the last three numbers. Your task is to write a program that generates and prints the nth number in Dave\'s custom sequence. Dave\'s sequence starts with three given numbers a, b, and c (for n=1, n=2, and n=3, respectively). The formula for any nth number (for n > 3) in the sequence is the sum of the previous three numbers. For example: If Dave\'s sequence starts with 1, 1, 2 then: - The 4th number is 1 + 1 + 2 = 4 - The 5th number is 1 + 2 + 4 = 7 - The 6th number is 2 + 4 + 7 = 13 - And so on. Input The first line contains integers a, b, and c (1 ≤ a, b, c ≤ 1000) — the first three numbers in the sequence. The second line contains integer n (1 ≤ n ≤ 105) — the position in the sequence for which you need to find the number. Output Print the nth number in Dave\'s custom sequence. Examples Input 1 1 2 4 Output 4 Input 1 1 2 5 Output 7 Input 1 1 2 6 Output 13","solution":"def custom_sequence_nth(a, b, c, n): Generates the nth number in Dave\'s custom sequence. # For n=1, 2, or 3, return the respective initial values if n == 1: return a elif n == 2: return b elif n == 3: return c # Initialize the first three numbers seq = [a, b, c] # Generate up to the nth number for i in range(3, n): next_num = seq[-1] + seq[-2] + seq[-3] seq.append(next_num) return seq[-1]"},{"question":"A company has developed a unique ranking system called x-rank. An array with n elements is considered x-ranked if the following conditions are met: 1. For every even index i (0-based), the element should be the maximum of the remaining elements after previous selections. 2. For every odd index i (0-based), the element should be the minimum of the remaining elements after previous selections. Determine if an array can be transformed into an x-ranked array. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array a. The second line contains n integers ai (1 ≤ ai ≤ 109) — the elements of the array a. Output If it is possible to x-rank the array, print n space-separated integers — the elements of the x-ranked array. If it is not possible, print \\"Impossible\\". Examples Input 5 5 3 1 4 2 Output 5 1 4 2 3 Input 4 4 2 3 1 Output 4 1 3 2","solution":"def x_rank(arr): This function takes a list of integers and returns an x-ranked list or \\"Impossible\\" if the list cannot be transformed into an x-ranked list. n = len(arr) # Sort the array to pick max and min easily arr_sorted = sorted(arr) # Create list to hold x-ranked elements x_ranked = [] # Let\'s perform the selection process for i in range(n): # Even index -> pick max remaining if i % 2 == 0: x_ranked.append(arr_sorted.pop()) # Pick max else: x_ranked.append(arr_sorted.pop(0)) # Pick min return x_ranked def can_be_x_ranked(n, arr): Returns the x-ranked array if possible, otherwise \\"Impossible\\" x_ranked = x_rank(arr) return \' \'.join(map(str, x_ranked))"},{"question":"You\'ve been given n distinct positive integers, and you need to find out the minimum cost to transform the entire array such that no two consecutive elements in the array are equal. The cost to transform an element ai to another integer x is |ai - x| (the absolute difference between ai and x). Input - The first line contains an integer n (2 ≤ n ≤ 10^5). - The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output - Print a single integer — the minimum cost required to transform the array so that no two consecutive elements are equal. Examples Input 3 1 5 3 Output 0 Input 4 4 4 4 4 Output 3 Note For the first example, the array is already such that no two consecutive elements are equal, so the cost is 0. For the second example, one of the possible transformations is changing the array to [4, 5, 4, 5], which results in a cost of 1 + 1 + 1 = 3.","solution":"def min_cost_to_avoid_consecutive_equal_elements(n, arr): def min_distance(a, cands): return min([abs(a - cand) for cand in cands]) total_cost = 0 for i in range(1, n): if arr[i] == arr[i - 1]: # Set of candidate values: any value other than arr[i-1] cands = [arr[i-1] - 1, arr[i-1] + 1] transformation_cost = min_distance(arr[i], cands) total_cost += transformation_cost return total_cost"},{"question":"At the Mixology Café, customers can create their own cocktail by choosing one of the three available base alcohols and one of the three available mixers. The price of the cocktail is the sum of the prices of the chosen base alcohol and mixer, minus a 100-unit discount. Write a program that takes the prices of the three base alcohols and the three mixers for the day and determines the minimum price for a custom cocktail. # Input Six integers: - The first three integers represent the prices of the three base alcohols. - The next three integers represent the prices of the three mixers. # Output Output the minimum price of the custom cocktail in one line. # Example Input ``` 1200 1500 1000 200 300 250 ``` Output ``` 1100 ``` # Explanation The optimal choice is using the third base alcohol (1000 units) and the fourth mixer (200 units) for a total of 1200 units, minus the 100-unit discount, giving a minimum price of 1100 units.","solution":"def min_cocktail_price(base_prices, mixer_prices): Calculates the minimum price of a custom cocktail. Parameters: base_prices (list of int): Prices of the three base alcohols. mixer_prices (list of int): Prices of the three mixers. Returns: int: The minimum price of the cocktail. min_base_price = min(base_prices) min_mixer_price = min(mixer_prices) min_price = min_base_price + min_mixer_price - 100 return min_price # Example usage base_prices = [1200, 1500, 1000] mixer_prices = [200, 300, 250] print(min_cocktail_price(base_prices, mixer_prices)) # Output: 1100"},{"question":"Kevin loves collecting marbles, and he keeps them in different boxes based on their colors. However, his collection has grown so large that it\'s difficult to manage, and he needs help organizing them. Kevin wants to know the minimum number of boxes he needs to consolidate all his marbles such that no two boxes have marbles of the same color. Each box can only contain marbles of a single, unique color. Your task is to write a function to determine the minimum number of boxes Kevin needs. Input The function takes a single argument: 1. An array of integers representing the colors of Kevin\'s marbles. Each integer denotes a color, and identical integers denote marbles of the same color. Output Return an integer representing the minimum number of boxes needed. Example Input: [1, 2, 2, 3, 3, 3] Output: 3 Explanation: Kevin has marbles in three different colors (1, 2, and 3). He needs at least one box for each color, so the minimum number of boxes needed is 3. Note If the input array is empty, Kevin does not need any boxes, so the function should return 0. Function Signature ```python def min_boxes_needed(colors: List[int]) -> int: ``` Constraints - The length of the array can be between 0 and 10^5. - Each integer in the array can be between 1 and 10^9.","solution":"from typing import List def min_boxes_needed(colors: List[int]) -> int: Returns the minimum number of boxes needed to consolidate all marbles such that no two boxes have marbles of the same color. # Use a set to find the unique number of colors unique_colors = set(colors) # The number of unique colors corresponds to the minimum number of boxes needed return len(unique_colors)"},{"question":"In the secluded village of Omijima, there is a unique tradition where villagers celebrate festivals by lighting lanterns and sending them down the river. Each lantern can hold a specific range of weights, and if overloaded, the lantern will sink, causing disappointment among villagers. Each festival has multiple lanterns being sent down the river sequentially. As the village’s only programmer, you are tasked with determining whether each lantern will stay afloat or sink based on the range of weights they can carry and the actual weight of items placed in them. For each lantern, you are provided with the weight limit it can carry and the actual weights being placed in them. A lantern sinks if the total weight of items placed in it exceeds its capacity. Input: The input consists of multiple datasets. Each dataset starts with an integer n (1 ≤ n ≤ 100), specifying the number of lanterns. The next n lines each contain three integers: the lantern\'s weight limit wi (1 ≤ wi ≤ 100), the number of items ki (1 ≤ ki ≤ 10), and the y weights of the items (1 ≤ y ≤ 100). The end of input is indicated by a single line containing the integer 0. Output: For each dataset, output \\"SINK\\" if at least one lantern sinks and \\"FLOAT\\" if all lanterns stay afloat. Example: Input 2 100 3 30 40 20 80 2 50 40 1 90 4 10 20 30 20 0 Output SINK FLOAT","solution":"def check_lanterns(datasets): This function determines whether each lantern will float or sink. Parameters: datasets (list of list): Each list is a dataset that contains integers representing the weight limit, number of items, and weights of the items for each lantern. Returns: list: A list with \\"FLOAT\\" if all lanterns stay afloat and \\"SINK\\" if at least one lantern sinks. results = [] for dataset in datasets: for lantern in dataset: weight_limit = lantern[0] number_of_items = lantern[1] item_weights = lantern[2:] if sum(item_weights) > weight_limit: results.append(\\"SINK\\") break else: results.append(\\"FLOAT\\") return results def process_input(input_string): Processes the input string into datasets that can be used by the check_lanterns function. Parameters: input_string (str): Multi-line input string containing the datasets as described in the problem. Returns: list of list: Formatted datasets to be processed. lines = input_string.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break dataset = [] for _ in range(n): i += 1 dataset.append(list(map(int, lines[i].split()))) datasets.append(dataset) i += 1 return datasets def assess_lanterns(input_string): This function assesses the lanterns based on the provided input string. Parameters: input_string (str): Input string containing the datasets. Returns: list: The assessment results for each dataset. datasets = process_input(input_string) return check_lanterns(datasets)"},{"question":"In Galaxy Quest, each planet is identified by its unique ID number, which is a positive integer. The Intergalactic Council has established a special warp network connecting a subset of planets via one-way portals. Each portal can be used only once, and it takes exactly one unit of time to travel through a portal. The Council defines a \\"main route\\" from a starting planet S to a destination planet D as the shortest path in terms of time. Due to the ongoing conflicts in the galaxy, they need to reinforce the security by establishing checkpoints at crucial locations along the main route. Given the list of one-way portals connecting pairs of planets, determine the number of different main routes from planet S to planet D. Note that if there is no route from S to D, the number of different main routes should be zero. Input The first line contains three integers N, M, and T (1 ≤ N, M ≤ 1000, 1 ≤ T ≤ 10000). N represents the number of planets, M represents the number of one-way portals, and T represents the number of test cases. Each of the next M lines contains two integers u and v (1 ≤ u, v ≤ N), representing a one-way portal from planet u to planet v. Each of the next T lines contains two integers S and D (1 ≤ S, D ≤ N), representing a query for the number of different main routes from planet S to planet D. Output For each query, output a single integer representing the number of different main routes from S to D. Examples Input 6 7 2 1 2 2 3 1 3 3 4 4 5 5 6 3 6 1 5 1 6 Output 1 1 Input 5 4 3 1 2 1 3 3 4 4 5 1 4 1 5 2 5 Output 1 1 0","solution":"from collections import defaultdict, deque def count_main_routes(N, M, T, portals, queries): def bfs_distance_and_count(S): # BFS to find shortest paths and path count distances = [-1] * (N + 1) path_counts = [0] * (N + 1) queue = deque([S]) distances[S] = 0 path_counts[S] = 1 while queue: planet = queue.popleft() for neighbor in graph[planet]: if distances[neighbor] == -1: # unvisited planet distances[neighbor] = distances[planet] + 1 path_counts[neighbor] = path_counts[planet] queue.append(neighbor) elif distances[neighbor] == distances[planet] + 1: # another shortest path found path_counts[neighbor] += path_counts[planet] return distances, path_counts # Create the graph graph = defaultdict(list) for u, v in portals: graph[u].append(v) results = [] for S, D in queries: distances, path_counts = bfs_distance_and_count(S) # If D is unreachable, path_counts[D] will be 0 results.append(path_counts[D] if distances[D] != -1 else 0) return results # Main logic to read input and produce output (For interactive use, commented out for unit tests) # if __name__ == \\"__main__\\": # N, M, T = map(int, input().split()) # portals = [tuple(map(int, input().split())) for _ in range(M)] # queries = [tuple(map(int, input().split())) for _ in range(T)] # results = count_main_routes(N, M, T, portals, queries) # for result in results: # print(result)"},{"question":"In a distant land, there lies a unique city laid out in a perfect grid with m rows and n columns of intersections. The intersections are numbered from 1 to m along the rows and from 1 to n along the columns. Bob loves taking evening walks in this city. He always starts his walk from the intersection at (1,1) and ends it at the intersection at (m,n). From each intersection, he can only move either to the right or down to an adjacent intersection. However, Bob\'s evening walk is no ordinary walk. He wants to find out the total number of unique paths he can take from (1,1) to (m,n). Input The input consists of a single line containing two space-separated integers m and n (1 ≤ m, n ≤ 100) — the number of rows and columns of the grid. Output Print a single integer — the total number of unique paths from (1,1) to (m,n). Examples Input 2 2 Output 2 Input 3 3 Output 6 Input 4 2 Output 4 Note In the first example, there are exactly two paths: right → down and down → right. In the second example, there are six paths: right → right → down → down right → down → right → down right → down → down → right down → right → right → down down → right → down → right down → down → right → right In the third example, given the grid of 4 rows and 2 columns, the four paths are: right → down → down → down down → right → down → down down → down → right → down down → down → down → right","solution":"def unique_paths(m, n): Calculate the number of unique paths in an m x n grid from the top-left to the bottom-right corner. # Initialize a 2D list (matrix) with 1s dp = [[1] * n for _ in range(m)] # Iterate through the matrix starting from (1,1) since the first row and first column are always 1 for i in range(1, m): for j in range(1, n): # The number of paths to reach a cell is the sum of paths to reach # the cell directly above it and the cell directly to the left of it dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will have the total number of unique paths return dp[m-1][n-1]"},{"question":"Given an array of integers, determine whether there\'s a contiguous subarray that sums up to a given target number. Input: The first line contains T, the number of test cases. For each test case, the first line contains the integers N and K. N is the size of the array, and K is the target sum. The subsequent line contains N space-separated integers, representing the elements of the array. Output: For each test case, print \\"Yes\\" if there exists such a subarray, otherwise print \\"No\\". Constraints: 1 ≤ T ≤ 50 1 ≤ N ≤ 100 -10^4 ≤ array elements ≤ 10^4 -10^5 ≤ K ≤ 10^5 Explanation: For a test case where N = 5, K = 15, and the array is [1, 2, 3, 7, 5]: - There\'s a subarray [7, 5, 3] which sums to 15, so the answer is \\"Yes\\". SAMPLE INPUT 2 5 15 1 2 3 7 5 4 8 1 2 4 4 SAMPLE OUTPUT Yes Yes","solution":"def subarray_sum_exists(test_cases): results = [] for test_case in test_cases: N, K = test_case[\'NK\'] array = test_case[\'array\'] if has_subarray_with_sum(array, K): results.append(\\"Yes\\") else: results.append(\\"No\\") return results def has_subarray_with_sum(array, target_sum): current_sum = 0 sum_map = {} for i in range(len(array)): current_sum += array[i] if current_sum == target_sum: return True if (current_sum - target_sum) in sum_map: return True sum_map[current_sum] = i return False"},{"question":"A train is running between cities. You are tasked with figuring out if the train schedule is consistent. A schedule is consistent if no two trips overlap, i.e., a train cannot be in two places at once. Each trip is represented by two integers, `start` and `end`, which are the times (in 24-hour format) when the trip starts and ends, respectively. Input The input consists of a single integer `n` (1 ≤ n ≤ 100) followed by `n` lines, each containing two integers `start` and `end` (0 ≤ start < end ≤ 24). Output Write a single YES or NO. Write YES if the schedule is consistent, otherwise write NO. Examples Input 3 1 5 6 10 11 15 Output YES Input 3 1 5 4 10 11 15 Output NO","solution":"def is_schedule_consistent(schedule): Determines if the train schedule is consistent, i.e., no trips overlap. Args: schedule (list of tuple): List of tuples where each tuple contains two integers `start` and `end` Returns: str: \\"YES\\" if the schedule is consistent, otherwise \\"NO\\" # Sort the schedule by the start time schedule.sort() for i in range(1, len(schedule)): # If the start time of the current trip is less than the end time of the previous trip, there is an overlap if schedule[i][0] < schedule[i - 1][1]: return \\"NO\\" return \\"YES\\""},{"question":"Bessie loves playing with grids and needs your help with a specific task. She starts with an empty grid of size n x n, initially filled with zeros. She has m operations to perform, which can be one of the following: 1. Set the value of cell (r, c) to xi. 2. Get the sum of all the values in the grid. 3. Get the minimum value in the grid. Help Bessie perform these operations efficiently! Input The first line contains two integers n (1 ≤ n ≤ 500) and m (1 ≤ m ≤ 105) — the size of the grid and the number of operations. The next m lines describe the operations. Each line starts with an integer ti (1 ≤ ti ≤ 3), denoting the type of the operation (see above). - If ti = 1, it is followed by three integers r, c, xi (1 ≤ r, c ≤ n; -1000 ≤ xi ≤ 1000), where (r, c) is the 1-indexed position in the grid, and xi is the value to set. - If ti = 2 or ti = 3, it will not be followed by any other integer. Output For each operation of type 2 and 3, output the corresponding result on a new line. Ensure that the outputs maintain the precision within an absolute or relative error of 10 - 6. Examples Input 4 5 1 2 3 5 2 1 1 1 -2 3 2 Output 5 -2 3 Input 3 4 1 1 1 -7 3 1 3 3 6 2 Output -7 -1 Note In the first sample, the grid becomes: ``` -2 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 ``` After the first set and sum operations, the sum of all values in the grid is 5. After the second set and min operations, the minimum value in the grid is -2. For the final sum operation, the sum of all values in the grid is 3.","solution":"class GridOperations: def __init__(self, n): self.n = n self.grid = [[0] * n for _ in range(n)] self.total_sum = 0 def set_value(self, r, c, xi): # Convert 1-indexed to 0-indexed r -= 1 c -= 1 self.total_sum -= self.grid[r][c] # Remove old value from sum self.grid[r][c] = xi self.total_sum += xi # Add new value to sum def get_sum(self): return self.total_sum def get_min(self): return min(min(row) for row in self.grid) def process_operations(n, m, operations): grid_ops = GridOperations(n) results = [] for op in operations: if op[0] == 1: _, r, c, xi = op grid_ops.set_value(r, c, xi) elif op[0] == 2: results.append(grid_ops.get_sum()) elif op[0] == 3: results.append(grid_ops.get_min()) return results"},{"question":"A software company is organizing a coding competition and wants to create a leaderboard to track the participants\' scores. The leaderboard should store the participant\'s name and their corresponding scores. Whenever a participant submits a score, the leaderboard should update their score by adding the new score to their existing total. If the participant is not already on the leaderboard, they should be added with their initial score. The leaderboard needs to be able to return the top `k` participants with the highest scores. Write a program to manage this leaderboard. The program should support three types of operations: 1. `add <name> <score>`: Add the score to the participant\'s total score. If the participant does not exist, they should be added to the leaderboard with the given score. 2. `remove <name>`: Remove the participant from the leaderboard entirely. If the participant does not exist, do nothing. 3. `top <k>`: Return the top `k` participants with the highest scores. If there are fewer than `k` participants, return all of them. Input The first line contains an integer `m` (1 ≤ m ≤ 2·10^5) — the number of operations. Each of the next `m` lines contains one of the following operations: - `add <name> <score>`: where `<name>` is a string (1 ≤ |<name>| ≤ 50) and `<score>` is an integer (1 ≤ <score> ≤ 1000). - `remove <name>`: where `<name>` is a string (1 ≤ |<name>| ≤ 50). - `top <k>`: where `<k>` is an integer (1 ≤ <k> ≤ m). Output For each `top <k>` operation, output the list of the top `k` participant names and their scores, in descending order of scores. If two participants have the same score, return them in lexicographical order of their names. Output each name and score on a new line. Example Input 9 add Alice 50 add Bob 30 top 2 add Alice 20 top 1 remove Bob top 2 add Charlie 40 top 2 Output Alice 50 Bob 30 Alice 70 Alice 70 Alice 70 Charlie 40","solution":"from collections import defaultdict class Leaderboard: def __init__(self): self.scores = defaultdict(int) def add(self, name, score): self.scores[name] += score def remove(self, name): if name in self.scores: del self.scores[name] def top(self, k): sorted_participants = sorted(self.scores.items(), key=lambda x: (-x[1], x[0])) return sorted_participants[:k] def handle_operations(operations): leaderboard = Leaderboard() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"add\\": name, score = parts[1], int(parts[2]) leaderboard.add(name, score) elif parts[0] == \\"remove\\": name = parts[1] leaderboard.remove(name) elif parts[0] == \\"top\\": k = int(parts[1]) top_participants = leaderboard.top(k) results.append(top_participants) return results # Example usage within the solution: operations = [ \\"add Alice 50\\", \\"add Bob 30\\", \\"top 2\\", \\"add Alice 20\\", \\"top 1\\", \\"remove Bob\\", \\"top 2\\", \\"add Charlie 40\\", \\"top 2\\", ] results = handle_operations(operations) for result in results: for name, score in result: print(f\\"{name} {score}\\")"},{"question":"You are given a grid with R rows and C columns. Each cell of the grid contains a single lowercase letter. A word is called an “island word” if it starts and ends within the boundary of the grid and can be traced to form a contiguous path horizontally, vertically or both (no diagonal movement is allowed, and cannot move outside the grid). Your task is to determine if a given word can be formed as an island word in the grid. Solve T test cases for each input file. Constraints * 1 leq T leq 100 * 1 leq R, C leq 100 * The grid contains only lowercase English letters. * 1 leq W leq 100 (length of the word) Input Input is given from Standard Input in the following format. The first line is as follows: T Then, T test cases follow. Each test case is given in the following format: R C grid_1 grid_2 ... grid_R W The subsequent R lines each represent a row in the grid. The last line of the test case is the word W to be found. Output For each test case, print a line containing ‘YES’ if the word can be formed as an island word, and ‘NO’ otherwise. Example Input 2 3 4 abcd efgh ijkl test 2 2 aa bb abb Output NO YES","solution":"def is_island_word(R, C, grid, word): def dfs(x, y, idx): if idx == len(word): return True if x < 0 or x >= R or y < 0 or y >= C or grid[x][y] != word[idx] or (x, y, idx) in visited: return False visited.add((x, y, idx)) found = (dfs(x+1, y, idx+1) or dfs(x-1, y, idx+1) or dfs(x, y+1, idx+1) or dfs(x, y-1, idx+1)) visited.remove((x, y, idx)) return found visited = set() for i in range(R): for j in range(C): if grid[i][j] == word[0] and dfs(i, j, 0): return \\"YES\\" return \\"NO\\" def solve_island_words(T, test_cases): results = [] for case in test_cases: R, C, grid, word = case results.append(is_island_word(R, C, grid, word)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split(\\"n\\") T = int(data[0]) index = 1 test_cases = [] for _ in range(T): R, C = map(int, data[index].split()) grid = data[index+1:index+1+R] word = data[index+1+R] test_cases.append((R, C, grid, word)) index += 2+R results = solve_island_words(T, test_cases) for result in results: print(result)"},{"question":"The King has n knights and a chessboard of size n x n. Each knight has a specific position on the chessboard. The king wants to know the minimum number of knights that need to be removed such that no two knights can attack each other. A knight can move to any of the 8 positions from its current position, which include two steps in one direction and one step perpendicular to that direction. Given the positions of the knights on the chessboard, help the king determine the minimum number of knights to remove. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the size of the chessboard (the chessboard is n x n). The next line contains an integer k (1 ≤ k ≤ 1000) — the number of knights. Each of the next k lines contains two space-separated integers x and y (1 ≤ x, y ≤ n) — the positions of each knight on the chessboard. Output Print a single integer — the minimum number of knights that need to be removed. Examples Input 5 3 1 2 2 4 3 1 Output 1 Input 6 6 1 1 2 3 3 5 4 2 5 4 6 6 Output 2","solution":"from collections import deque, defaultdict # Directions a knight moves on a chessboard moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] def minimum_knights_to_remove(n, k, knights_positions): def bfs(u): # Breadth-first search d = [-1] * k d[u] = 0 q = deque([u]) while q: u = q.popleft() for v in adj[u]: if t[v] == -1: continue if d[t[v]] == -1: d[t[v]] = d[u] + 1 q.append(t[v]) return d def dfs(u): # Depth-first search to check for augmenting path for v in adj[u]: if t[v] == -1 or (d[t[v]] == d[u] + 1 and dfs(t[v])): t[v] = u return True return False adj = [[] for _ in range(k)] for i, (x1, y1) in enumerate(knights_positions): for j, (x2, y2) in enumerate(knights_positions): if i != j: for dx, dy in moves: if x1 + dx == x2 and y1 + dy == y2: adj[i].append(j) break t = [-1] * k matching_size = 0 for u in range(k): d = bfs(u) if dfs(u): matching_size += 1 return matching_size // 2 # Input parsing function def parse_input(): n = int(input().strip()) k = int(input().strip()) knights_positions = [tuple(map(int, input().strip().split())) for _ in range(k)] return n, k, knights_positions # Example usage if __name__ == \\"__main__\\": n, k, knights_positions = parse_input() answer = minimum_knights_to_remove(n, k, knights_positions) print(answer)"},{"question":"Given an undirected graph with N nodes, each node is labeled with a unique integer from 1 to N. There are no self-loops or multiple edges between the same pair of nodes. Your task is to determine the minimum number of edges that need to be added to make the graph Eulerian. A graph is Eulerian if it contains an Eulerian circuit, which is a closed walk that visits every edge exactly once, forming a cycle. # Input: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers N and M, where N is the number of nodes and M is the number of edges. - The next M lines each contain two integers u and v, indicating an undirected edge between nodes u and v. # Output: For each test case, print the minimum number of edges required to make the graph Eulerian in a new line. # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 0 ≤ M ≤ N*(N-1)/2 - 1 ≤ u, v ≤ N # Example: Input: ``` 2 3 2 1 2 2 3 4 3 1 2 2 3 3 4 ``` Output: ``` 1 1 ``` # Explanation: 1. In the first test case, the graph with 3 nodes and 2 edges (1-2 and 2-3) can become Eulerian by adding 1 edge (3-1) to form a cycle. 2. In the second test case, the graph with 4 nodes and 3 edges (1-2, 2-3, and 3-4) can become Eulerian by adding 1 edge (4-1), again forming a cycle.","solution":"def min_edges_to_eulerian(T, test_cases): def eulerian_edges_needed(N, edges): # Degree of each node degree = [0] * (N + 1) for u, v in edges: degree[u] += 1 degree[v] += 1 # Count nodes with odd degree odd_degree_count = sum(1 for d in degree if d % 2 == 1) # The number of edges added should make all degrees even # If odd_degree_count is even, we need to add odd_degree_count/2 edges if odd_degree_count % 2 == 0: return odd_degree_count // 2 else: # This is never executed with problem constraints (even number of odd vertices needed) return -1 results = [] for i in range(T): N, M = test_cases[i][0] edges = test_cases[i][1] results.append(eulerian_edges_needed(N, edges)) return results"},{"question":"You are given an array of n integers, a_1, a_2, ..., a_n. You can perform the following operation on the array: Choose two adjacent elements a_i and a_{i+1} and replace both of them with their sum (a_i + a_{i+1}). This decreases the size of the array by one. You have to determine the minimum possible sum of all integers in the array after performing exactly (n-1) operations. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print the minimum possible sum of all integers in the array after performing exactly (n-1) operations. Examples Input 4 1 2 3 4 Output 10 Input 3 5 1 3 Output 9","solution":"def min_possible_sum(n, array): Returns the minimum possible sum of all integers in the array after (n-1) operations. return sum(array)"},{"question":"You are given a sequence of integers and you need to determine the number of unique integers in that sequence after removing all duplicate values. Your task is to write a program that, given the input sequence, outputs the count of unique integers. Input The first line of the input contains an integer T, the number of test cases. Each of the next T lines contains a sequence of space-separated integers. Output For each test case, output a single integer representing the count of unique integers in the sequence. Constraints 1 ≤ T ≤ 10 1 ≤ length of each sequence ≤ 100 -1000 ≤ each integer ≤ 1000 SAMPLE INPUT 2 1 2 2 3 4 4 5 10 20 20 10 30 30 SAMPLE OUTPUT 5 3","solution":"def count_unique_integers(test_cases): Returns a list of counts of unique integers for each test case. :param test_cases: List of lists, where each inner list contains integers of a test case :return: List of integers, each representing the count of unique integers in the corresponding test case results = [] for sequence in test_cases: unique_integers = set(sequence) results.append(len(unique_integers)) return results"},{"question":"You are a software developer tasked with creating a security feature for a biometric authentication system. This system uses a sequence of fingerprint scans, each represented by an integer. However, the system is vulnerable to replay attacks (i.e., the same scan being used multiple times). Your goal is to determine whether the current sequence of fingerprint scans contains any duplicates within a specific range. If a duplicate scan is found within this range, the authentication should be considered unsafe. Constraints: - 1 ≤ length of sequence (n) ≤ 10^6 - 1 ≤ range (k) ≤ n - 1 ≤ integer in sequence ≤ 10^9 Input Format: - The first line contains two integers, n and k. - The second line contains n space-separated integers representing the fingerprint scans. Output Format: - Output \\"UNSAFE\\" if any duplicate scan is found within the given range k, otherwise output \\"SAFE\\". SAMPLE INPUT 6 3 5 7 9 5 10 7 SAMPLE OUTPUT UNSAFE Explanation: The fingerprint scan \'5\' occurs twice within the range of 3 scans, making the sequence unsafe. SAMPLE INPUT 6 2 5 7 9 3 10 7 SAMPLE OUTPUT SAFE Explanation: There are no duplicates within the 2-scan range.","solution":"def check_fingerprint_scans(n, k, scans): Determines if there are duplicates within the specified range in the sequence of fingerprint scans. :param n: Length of the sequence of fingerprint scans :param k: The range within which to check for duplicates :param scans: The list of fingerprint scans :return: \\"UNSAFE\\" if duplicates are found within the range k, otherwise \\"SAFE\\" scan_set = set() for i in range(n): if scans[i] in scan_set: return \\"UNSAFE\\" scan_set.add(scans[i]) if i >= k: scan_set.remove(scans[i - k]) return \\"SAFE\\" # Example usage: # n, k = 6, 3 # scans = [5, 7, 9, 5, 10, 7] # print(check_fingerprint_scans(n, k, scans)) # Output: UNSAFE"},{"question":"A city\'s water distribution system consists of various tanks connected by pipes. Each tank can send water to other tanks, and each pipe has a maximum capacity of water it can carry per hour. The city needs to determine the maximum amount of water that can be sent from the main source tank to the main destination tank per hour without violating any pipe capacities. The water distribution system can be represented as a directed graph with n tanks and m pipes. The main source tank is tank 1 and the main destination tank is tank n. Write a program to find the maximum water flow from tank 1 to tank n. Input: The first line contains two integers n and m (2 ≤ n ≤ 500, 1 ≤ m ≤ 10000) — the number of tanks and pipes, respectively. The next m lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ c ≤ 10000), representing a pipe from tank u to tank v with a capacity of c liters per hour. Output: Print one integer — the maximum water flow from tank 1 to tank n. If there is no path from tank 1 to tank n, print 0. Examples Input 4 5 1 2 10 1 3 5 2 3 15 2 4 10 3 4 10 Output 15 Input 4 2 1 2 100 3 4 100 Output 0","solution":"from collections import defaultdict, deque def bfs(capacity, source, sink, parent): visited = [False] * len(capacity) queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for ind, val in enumerate(capacity[u]): if visited[ind] == False and val > 0: queue.append(ind) visited[ind] = True parent[ind] = u if ind == sink: return True return False def edmonds_karp(n, adj_matrix, source, sink): parent = [-1] * n max_flow = 0 while bfs(adj_matrix, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, adj_matrix[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] adj_matrix[u][v] -= path_flow adj_matrix[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_water_flow(n, m, pipes): adj_matrix = [[0] * n for _ in range(n)] for u, v, c in pipes: adj_matrix[u-1][v-1] += c # multiple pipes between same tanks add up return edmonds_karp(n, adj_matrix, 0, n-1)"},{"question":"Zara is a talented software engineer who specializes in optimization algorithms. She often faces complex challenges in her projects. One day, while working on a project that involves data compression, she stumbled upon an interesting task. Zara needs to compress a sequence of characters. The compression method used is a simple encoding technique called Run-Length Encoding (RLE). The idea is to encode consecutive duplicates of the characters in the sequence by storing the character followed by its count. For example, the string \\"aaabbcccc\\" would be compressed as \\"a3b2c4\\". Now, Zara needs your help to write a program that performs this Run-Length Encoding on a given string. Input The input consists of a single line containing a string of lowercase Latin letters. The length of the string does not exceed 100 characters. Output Write one line — the Run-Length Encoded version of the input string. Examples Input aaabbcccc Output a3b2c4 Input abcd Output a1b1c1d1 Input aabcccccaaa Output a2b1c5a3 Input zzzzzzz Output z7","solution":"def run_length_encoding(s: str) -> str: Compresses the input string using Run-Length Encoding (RLE) technique. Args: s (str): The input string consisting of lowercase Latin letters. Returns: str: The Run-Length Encoded version of the input string. if not s: return \\"\\" encoded_string = [] i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 encoded_string.append(s[i]) encoded_string.append(str(count)) i += 1 return \'\'.join(encoded_string)"},{"question":"A company wants to analyze the performance of its employees over the last year and has obtained the number of tasks completed by each employee in a list. They want to find out if there is any employee whose performance is strictly greater than the performance of all other employees. You are given an integer array `tasks` of size `n` (1 ≤ n ≤ 10^5) where `tasks[i]` is the number of tasks completed by the i-th employee. The company wants to find the employee who has completed strictly more tasks than anyone else. If such an employee exists, return their 1-based index (i.e., position in the list starting from 1). If there is no such employee, return -1. Write a function `findTopPerformer` that takes an integer array `tasks` as input and returns an integer. Input - An integer array `tasks` of size `n`. Output - An integer representing the 1-based index of the top performer, or -1 if there is no clear top performer. Examples Input [4, 3, 5, 7, 7] Output -1 Input [10, 9, 8, 10, 7] Output 1 Note In the first sample, both the 4th and the 5th employees completed 7 tasks, which is the highest performance, but they are tied, so the output is -1. In the second sample, the 1st employee has completed 10 tasks which is higher than any other employee\'s performance, and no other employee has completed the same number of tasks, so the answer is 1.","solution":"def findTopPerformer(tasks): Find the employee who has completed strictly more tasks than anyone else. Args: tasks (list of int): List of tasks completed by each employee. Returns: int: 1-based index of the top performer or -1 if no clear top performer. if not tasks: return -1 max_tasks = max(tasks) count_max = tasks.count(max_tasks) if count_max > 1: return -1 return tasks.index(max_tasks) + 1"},{"question":"Problem description Anka is fascinated by palindromes and enjoys finding them in various sequences. She recently came across a task in her study of algorithms, which involves finding the longest palindromic subsequence in a given string. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Write a function `longest_palindromic_subsequence(s)` that computes the length of the longest palindromic subsequence in the given string `s`. Input The input consists of a single line containing the string `s`. Output Output the length of the longest palindromic subsequence in the string `s`. Constraints 1 ≤ |s| ≤ 1000 The string `s` will consist only of lowercase English letters. Example Input: bbbab Output: 4 Explanation The longest palindromic subsequence in \\"bbbab\\" is \\"bbbb\\", which has a length of 4. Another example Input: cbbd Output: 2 Explanation The longest palindromic subsequence in \\"cbbd\\" is \\"bb\\", which has a length of 2.","solution":"def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"Alice is building a castle using blocks. She has a certain number of blocks of different sizes, and she wants to build the tallest possible tower with some constraints. The castle has floors, and each floor can only contain blocks of a specific size. The size of the blocks follows a strict increasing order from the bottom floor to the top floor. Each floor can contain only one block, and Alice wants to ensure that the height of the blocks is maximized while keeping the structure stable. Input The first line of input contains a single integer `n` (1 ≤ n ≤ 1000), the number of different sizes of blocks. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^6), the heights of the blocks in increasing order of size. Output Output the maximum number of floors that can be achieved while fulfilling the constraints. Example Input 6 1 3 2 5 4 7 Output 4 Explanation Alice can use blocks of heights 1, 2, 4, and 7 to build the floors of the castle. Each of these heights is strictly increasing, and thus forms the highest possible tower with the given blocks.","solution":"def tallest_castle(n, blocks): Returns the maximum number of floors that can be achieved while fulfilling the constraints. Parameters: - n (int): number of different sizes of blocks. - blocks (list of int): heights of the blocks in increasing order of size. Returns: - int: maximum number of floors. if n == 0: return 0 max_floors = 1 current_height = blocks[0] for i in range(1, n): if blocks[i] > current_height: max_floors += 1 current_height = blocks[i] return max_floors"},{"question":"You are given an array of integers, where each element represents the height of a building. You are tasked with determining the maximum amount of water that can be trapped between buildings after it rains. The array of heights will create a series of peaks and valleys, and the water is trapped within these valleys. Write a function `maxWaterTrapped(height)` that takes a list of integers `height` and returns the maximum amount of water trapped. # Input: - A single argument: `height`, a list of integers where each integer represents the height of a building (0 ≤ height[i] ≤ 1000, 0 ≤ len(height) ≤ 10^4). # Output: - Return an integer, representing the maximum units of water trapped. # Example: ```python print(maxWaterTrapped([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])) ``` Output: ``` 6 ``` # Explanation: In the given array `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]`, buildings form the following shape, where \\"|\\" indicates the height of the buildings and \\"W\\" indicates the trapped water: ``` | | | W W | | W | | W | | W W | | | | | | | | | ``` The total volume of trapped water in this example is 6 units.","solution":"def maxWaterTrapped(height): Calculate the maximum amount of water that can be trapped between the buildings after it rains. :param height: List[int] - A list of integers where each integer represents the height of a building. :return: int - Maximum amount of water trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Problem Description Jane has recently started discovering the world of cryptography and is fascinated by simple encryption techniques. She challenges herself by creating and deciphering ciphers using basic letter shifts. One of her favorite techniques is the Caesar Cipher, where each letter in the plaintext is shifted a fixed number of places down or up the alphabet. Your task is to help Jane by implementing a function that applies a Caesar Cipher to a given string. Input The first line contains an integer T, denoting the number of test cases. Each test case consists of a string S of lowercase English characters, followed by an integer K, the number of positions each character in S should be shifted. Output For each test case, output the encrypted string after applying the Caesar Cipher. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 1 ≤ K ≤ 25 Example Input: 2 hello 3 xyz 2 Output: khoor zab Explanation In the first test case, each character in the string \\"hello\\" is shifted 3 positions down the alphabet: h -> k e -> h l -> o l -> o o -> r In the second test case, each character in the string \\"xyz\\" is shifted 2 positions down the alphabet: x -> z y -> a z -> b","solution":"def caesar_cipher(t, cases): results = [] for case in cases: s, k = case encrypted = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) encrypted.append(new_char) results.append(\'\'.join(encrypted)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) cases = [] for line in lines[1:]: parts = line.rsplit(\' \', 1) s, k = parts[0], int(parts[1]) cases.append((s, k)) return t, cases def run_caesar_cipher(input_str): t, cases = parse_input(input_str) results = caesar_cipher(t, cases) return \'n\'.join(results)"},{"question":"You are given a sequence of n integers (1 ≤ n ≤ 10,000). Your task is to find the length of the longest contiguous subarray that consists of only one unique integer. Input The first line of input contains the integer n. The second line contains n integers, each between -1,000,000 and 1,000,000 inclusive. Output Output the length of the longest contiguous subarray with all elements equal. Examples Input 8 2 2 3 3 3 2 2 2 Output 3 Input 6 1 1 1 1 1 1 Output 6 Note In the first case, the longest contiguous subarray with all equal elements is [3, 3, 3], which has a length of 3. In the second case, the entire array consists of the same integer, so the length of the longest contiguous subarray is 6.","solution":"def longest_contiguous_subarray(n, arr): Finds the length of the longest contiguous subarray that consists of only one unique integer. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if arr[i] == arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a small town named GreenVille, there are n intersections and m one-directional roads connecting them. Each road has a certain length associated with it. The Mayor of GreenVille has received a grant to repair some of the roads in such a way that it would be possible to go between any pair of intersections, either directly or indirectly, using the fewest total length of roads. Help the Mayor to find the minimum total length of the roads required to make the intersections fully connected. Input The first line of the input contains two integers n and m — the number of intersections and the number of roads in GreenVille (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000). Next m lines contain the descriptions of the roads: each road is described by three integers ui, vi, and li (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ li ≤ 1000), where ui is the starting intersection, vi is the ending intersection, and li is the length of the road. Output Print a single integer — the minimum total length of roads required to make the intersections connected. If it is impossible, print -1. Examples Input 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Output 6 Input 3 1 1 2 10 Output -1 Input 5 7 1 2 4 1 3 3 2 3 2 2 4 7 3 4 1 3 5 5 4 5 6 Output 11 Note In the first example, a minimum length is achieved by repairing the roads: 1->2 (1), 2->3 (2), and 3->4 (3). The total length is 6. In the second example, it is not possible to connect all intersections since there is only one road. Thus, the output is -1. In the third example, a minimum length is achieved by repairing the roads: 1->3 (3), 2->3 (2), 3->4 (1), and 3->5 (5). The total length is 3 + 2 + 1 + 5 = 11.","solution":"def minimum_total_length(n, m, roads): from heapq import heappop, heappush if n == 1: return 0 # Create adjacency list graph = [[] for _ in range(n + 1)] for u, v, l in roads: graph[u].append((l, v)) graph[v].append((l, u)) # since we can travel in both directions in MST # Prim\'s algorithm to find Minimum Spanning Tree (MST) min_heap = [(0, 1)] # (cost, start node) total_cost = 0 visited = [False] * (n + 1) edges_used = 0 while min_heap: cost, u = heappop(min_heap) if visited[u]: continue visited[u] = True total_cost += cost edges_used += 1 for edge_cost, neighbor in graph[u]: if not visited[neighbor]: heappush(min_heap, (edge_cost, neighbor)) # If we were able to visit all nodes, return total_cost; otherwise, return -1 if edges_used == n: return total_cost else: return -1"},{"question":"Vivian loves practicing programming every day. She is working on problems related to strings and substrings. Recently, she encountered an interesting task that she needs help with. Her task is as follows: Find the length of the longest substring in a given string that contains exactly k distinct characters. A substring is a contiguous sequence of characters within a string. Input The first line contains an integer k (1 ≤ k ≤ 100). The second line contains a string s (1 ≤ length of s ≤ 105), which consists of lowercase English letters. Output The first and only line of the output should contain the length of the longest substring that contains exactly k distinct characters. Examples Input 2 abcba Output 3 Input 3 aabacbebebe Output 7 Input 1 aaaa Output 4","solution":"def longest_substring_with_k_distinct_characters(k, s): Returns the length of the longest substring with exactly k distinct characters. Parameters: k (int): The exact number of distinct characters required. s (str): The string in which we need to find the substring. Returns: int: The length of the longest substring with exactly k distinct characters. from collections import defaultdict window_start = 0 max_length = 0 char_frequency = defaultdict(int) # Slide through the string with a window for window_end in range(len(s)): # Add the current character to the frequency map char_frequency[s[window_end]] += 1 # Shrink the sliding window until we have exactly \'k\' distinct characters while len(char_frequency) > k: char_frequency[s[window_start]] -= 1 if char_frequency[s[window_start]] == 0: del char_frequency[s[window_start]] window_start += 1 # At this point, we know we have exactly \'k\' distinct characters if len(char_frequency) == k: max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"Binary trees are a fundamental data structure often used in algorithms and competitive programming. Today, we\'re exploring yet another phenomenon involving these versatile structures. You\'re given a binary tree consisting of n nodes, each uniquely identified by integers from 1 to n. Every node has at most two children: a left child and a right child. The memory of each node is encoded within its value, which is an integer between 1 and n. Beavers, in their quest for optimal memory retrieval, have to follow a peculiar manner of traversing these trees. When beaver Neo traverses from one node to another following specific rules below, he must eventually end up at all nodes with a sum of values visited not exceeding a given integer S. The traversal starts at node 1 (root) and follows pre-order traversal (root-left-right). # Pre-order Traversal Rules - First, the root node\'s value is visited. - Then, the left subtree is recursively traversed. - Finally, the right subtree is recursively traversed. # Task Determine if it\'s possible for beaver Neo to visit all nodes with the total sum of the node values being less than or equal to S. If possible, find the order of visited nodes following the pre-order traversal. If not, return an appropriate message. # Input - The first line contains two integers n and S — the number of nodes in the binary tree (1 ≤ n ≤ 100) and the maximum allowed sum of node values (1 ≤ S ≤ 10^4). - The next n lines each contain three integers v, l, and r — the value of the node, the index of the left child, and the index of the right child, respectively (1 ≤ v ≤ n, 0 ≤ l, r ≤ n). Here, 0 denotes the absence of a child. # Output Print one line with the sequence of visited nodes following pre-order traversal if the sum constraints are met. If it\'s impossible, print \\"Impossible\\". # Example Input ``` 5 15 10 2 3 4 0 0 6 0 4 3 5 0 2 0 0 ``` Output ``` 1 2 4 3 5 ``` Input ``` 4 5 3 2 0 1 3 4 2 0 0 1 0 0 ``` Output ``` Impossible ``` # Note - In the first example, the total sum of node values is 10 + 4 + 6 + 3 + 2 = 25. Hence, the sequence cannot meet the constraint S = 15 and the output is `Impossible`. - In the second example, the traversal sum 3 + 1 + 2 + 1 = 7 exceeds the given S = 5, thus the output is `Impossible`.","solution":"def beaver_traversal(n, S, nodes): tree = {i: {\'value\': nodes[i-1][0], \'left\': nodes[i-1][1], \'right\': nodes[i-1][2]} for i in range(1, n + 1)} traversal = [] def pre_order(node): if node == 0: return 0 value = tree[node][\'value\'] traversal.append(node) sum_left = pre_order(tree[node][\'left\']) sum_right = pre_order(tree[node][\'right\']) return value + sum_left + sum_right total_sum = pre_order(1) if total_sum <= S: return \' \'.join(map(str, traversal)) else: return \\"Impossible\\""},{"question":"Given an array of integers, find a contiguous subarray that has the largest sum, and print the sum as well as the starting and ending indices of that subarray (0-indexed). Input: - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. Output: For each test case, print the sum of the largest contiguous subarray, followed by the starting and ending indices of that subarray. *Constraints:* 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^5 ≤ Array Element ≤ 10^5 SAMPLE INPUT 2 5 1 -2 3 4 -1 3 -1 -2 -3 SAMPLE OUTPUT 7 2 3 -1 0 0","solution":"def find_max_subarray_sum(arr): Returns the sum of the largest contiguous subarray, along with the starting and ending indices of that subarray. max_sum = -float(\'inf\') current_sum = 0 start = end = s = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i if current_sum < 0: current_sum = 0 s = i + 1 return (max_sum, start, end) def process_input(test_cases): results = [] for arr in test_cases: result = find_max_subarray_sum(arr) results.append(result) return results"},{"question":"A new software system for managing hospital emergency rooms needs to be developed. Part of the system involves a triage process where each patient is assigned a priority based on the severity of their condition. The severity of each condition is indicated by a unique integer between 1 and 100,000, inclusive; the higher the number, the more severe the condition. The emergency room can only accommodate a certain number of patients at a time. If a new patient arrives when the emergency room is full, the least severe patient will be discharged to make room for the new patient if this new patient\'s severity is greater than the least severe patient currently in the emergency room. You need to write a function that maintains the list of patients currently in the emergency room, based on their severity levels. When a new patient arrives, if the room is full and their severity is higher than the least severe patient in the room, replace the least severe patient with the new one. Otherwise, if the room is not full, simply add the new patient to the room. The function should handle incoming patients and return the final list of severities of patients in the room after all patients have arrived. Input The first line contains two integers n and m (1 ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — the number of patients and the maximum capacity of the emergency room, respectively. The second line contains n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 100 000) — the severities of the patients in the order they arrive. Output Output a single line containing m integers representing the severities of the patients currently in the emergency room, sorted in non-decreasing order. If the emergency room has fewer than m patients at the end of processing, then print all the severity levels sorted in non-decreasing order. Examples Input 6 3 50 30 20 40 60 70 Output 60 70 50 Input 5 2 100 50 30 60 80 Output 80 100 Note In the first example, the room starts empty. The first patient with severity 50 is added. The second patient with severity 30 is also added. The third patient with severity 20 is added, filling the room to capacity. When the fourth patient with severity 40 arrives, the system notices the least severe patient (20) and replaces them with the new severity since 40 > 20. The fifth patient has severity 60 and replaces the least severe patient (30) as 60 > 30. The sixth patient has severity 70 and replaces the least severe patient (40) as 70 > 40. The final list of severities is [60, 70, 50]. In the second example, the room is filled up quickly with the first two patients having severities 100 and 50. Following patients replace the least severe patient only if they have higher severity. At the end, the patients with severities [80, 100] remain in the room.","solution":"import heapq def manage_emergency_room(n, m, severities): Manages the list of patients in an emergency room based on their severity levels. Parameters: n (int): The number of patients arriving. m (int): The maximum capacity of the emergency room. severities (list of int): The severities of the patients arriving in order. Returns: list of int: The severities of the patients currently in the emergency room, sorted in non-decreasing order. # Use a min-heap to keep track of the least severe patients in the emergency room emergency_room = [] for severity in severities: if len(emergency_room) < m: heapq.heappush(emergency_room, severity) else: # If new patient has higher severity than the least severe patient in the room if severity > emergency_room[0]: heapq.heappushpop(emergency_room, severity) # Convert min-heap to a sorted list sorted_room = sorted(emergency_room) return sorted_room"},{"question":"A matrix is considered to have an equal number of rows and columns. A diagonal in this matrix is defined as any group of elements that starts from any cell in the first column and ends at any cell in the last row, or it starts from any cell in the first row and ends at any cell in the last column. You need to determine if all diagonals in the matrix contain identical elements. Constraints * 1 ≤ n ≤ 500 * The elements of the matrix will be integers such that -10000 ≤ matrix[i][j] ≤ 10000. Input An integer n representing the size of the matrix and the n x n matrix with its elements. n matrix[0][0] matrix[0][1] ... matrix[0][n-1] matrix[1][0] matrix[1][1] ... matrix[1][n-1] . . matrix[n-1][0] matrix[n-1][1] ... matrix[n-1][n-1] Output Print \\"YES\\" if all diagonals contain identical elements, otherwise print \\"NO\\". Example Input 4 1 2 3 4 5 1 2 3 9 5 1 2 6 9 5 1 Output YES Example Input 3 1 2 3 4 5 6 7 8 9 Output NO","solution":"def diagonals_identical(n, matrix): def check_diagonal(start_row, start_col): value = matrix[start_row][start_col] row, col = start_row, start_col while row < n and col < n: if matrix[row][col] != value: return False row += 1 col += 1 return True # Check diagonals starting from the first column for start_row in range(n): if not check_diagonal(start_row, 0): return \\"NO\\" # Check diagonals starting from the first row, except the first element (already checked) for start_col in range(1, n): if not check_diagonal(0, start_col): return \\"NO\\" return \\"YES\\""},{"question":"You are given two strings, s1 and s2, consisting of lowercase English letters. Your task is to determine whether these two strings are \\"almost equivalent\\". Two strings are considered almost equivalent if they can be made equivalent by performing at most one operation, where an operation is defined as: 1. Removing a single character from one of the strings. 2. Adding a single character to one of the strings. 3. Replacing a single character in one of the strings with another character. Input The first line of the input contains the string s1 (1 ≤ |s1| ≤ 10^5). The second line of the input contains the string s2 (1 ≤ |s2| ≤ 10^5). Output Print \\"YES\\" if the strings are almost equivalent, otherwise print \\"NO\\". Examples Input abc abd Output YES Input abc abcd Output YES Input abc abxy Output NO Input a b Output YES Note In the first example, the strings can be made equivalent by replacing \'c\' in s1 with \'d\'. In the second example, the strings can be made equivalent by adding \'d\' to the end of s1. In the third example, more than one operation is required to make the strings equivalent. In the fourth example, the strings can be made equivalent by replacing \'a\' with \'b\'.","solution":"def are_almost_equivalent(s1, s2): Determine if two strings are almost equivalent by one operation (either add, remove or replace a character). len1, len2 = len(s1), len(s2) # If the length difference is more than 1, more than one modification is needed if abs(len1 - len2) > 1: return \\"NO\\" # Find the first mismatch i, j, mismatch_count = 0, 0, 0 while i < len1 and j < len2: if s1[i] != s2[j]: if mismatch_count == 1: return \\"NO\\" mismatch_count += 1 # Check the three possible cases: insert, delete, replace if len1 > len2: i += 1 # simulate delete from s1 elif len1 < len2: j += 1 # simulate insert into s1 else: i += 1 j += 1 else: i += 1 j += 1 # If we get here, there\'s at most one mismatch. Consider trailing characters. # If lengths differ by one, verify the trailing character if i < len1 or j < len2: mismatch_count += 1 return \\"YES\\" if mismatch_count <= 1 else \\"NO\\""},{"question":"An e-commerce company is analyzing the behavior of users on its website. They are particularly interested in understanding whether a given user has consecutively visited the same category of items on their last few visits. Given the browsing history of a user, you are tasked with determining if there has been any occurrence of a category being visited consecutively more than once. Input The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of site visits by the user. The next line contains N space-separated integers representing the category IDs of the visited items, in the order of the user visits. Category IDs are non-negative integers where each ID corresponds to a different category. 0 < T <= 100 0 < N <= 1000 0 <= Category IDs < 1000 Output Output T lines, one for each test case. Each line should be either \\"Yes\\" or \\"No\\" depending on whether there exists a category visited consecutively more than once. Example Input: 2 5 3 4 4 1 9 4 1 2 1 3 Output: Yes No","solution":"def has_consecutive_visits(T, test_cases): results = [] for i in range(T): N, visits = test_cases[i] consecutive = False for j in range(1, N): if visits[j] == visits[j - 1]: consecutive = True break results.append(\\"Yes\\" if consecutive else \\"No\\") return results"},{"question":"You are given a string s consisting of only lowercase English letters. You need to perform the following operation k times: 1. Choose a non-empty subsequence of s. 2. Sort the chosen subsequence in non-decreasing order. 3. Replace the chosen subsequence in its original position in the string s with the sorted subsequence. Find the lexicographically smallest string you can get after performing the above operation exactly k times. Input The first line of the input contains an integer k (1 ≤ k ≤ 100). The second line contains a string s (1 ≤ |s| ≤ 100) consisting of only lowercase English letters. Output Print the lexicographically smallest string you can get after performing the above operation exactly k times. Examples Input 2 dcba Output abcd Input 1 dbca Output bacd","solution":"def lexicographically_smallest_string(k, s): Returns the lexicographically smallest string obtainable after performing the specified operation exactly k times on string s. for _ in range(k): s = \'\'.join(sorted(s)) return s"},{"question":"A new restaurant software requires an algorithm to predict orders based on customer patterns. Consider a list of customer orders represented as strings where each string is a sequence of dish initials ordered by a customer. You\'ll be provided with a set of n orders and a count k. Each order consists of a combination of dish initials from \'A\' to \'Z\'. Your task is to determine the k most frequently ordered dishes across all orders. If there is a tie, report the lexicographically smallest dish initials among them. Input The first line of the input contains an integer n (1 ≤ n ≤ 10^3) — the number of orders. The second line contains an integer k (1 ≤ k ≤ 26) — the count of most frequently ordered dishes to be determined. The next n lines each contain a string, where each string denotes an order and consists of dish initials from \'A\' to \'Z\'. Output Print the k most frequently ordered dish initials in order of their frequency. If multiple dishes have the same frequency, print them in lexicographical order. Each initial should be printed on a new line. Examples Input 5 3 ABC AC BC AB A Output A B C Input 4 2 ZZ ZY YZ YY Output Y Z Input 6 4 AA BB CC DD AA BB Output A B C D","solution":"from collections import Counter def most_frequent_dishes(n, k, orders): Determine the k most frequently ordered dishes. Parameters: n (int): Number of orders. k (int): Number of most frequent dishes to determine. orders (list of str): A list of strings where each string represents an order. Returns: list of str: The k most frequently ordered dish initials. dish_counter = Counter() # Counting each dish occurrence for order in orders: dish_counter.update(order) # Sorting by frequency and lexicographically most_common_dishes = sorted(dish_counter.items(), key=lambda x: (-x[1], x[0])) return [dish for dish, count in most_common_dishes[:k]] # Example usage: # Print the top k dishes from the provided orders if __name__ == \\"__main__\\": n = 5 k = 3 orders = [\\"ABC\\", \\"AC\\", \\"BC\\", \\"AB\\", \\"A\\"] result = most_frequent_dishes(n, k, orders) for dish in result: print(dish)"},{"question":"Alice is a guitarist preparing a digital music performance that involves creating complex chord progressions. For this, she uses a grid-like sequencer where each cell in the grid represents a beat, and each column represents a measure. In the grid, Alice can place a note in any cell. A note placed in a cell indicates the start of a sound that continues on subsequent cells in the same measure unless interrupted by another note or the end of the measure. Alice wants to pre-plan the performance by determining how many distinct ways she can place notes in a sequence of cells to simulate continuous sound patterns with specific properties. # Problem Description You are given a grid with `m` measures and `b` beats per measure. Alice wants to fill `k` continuous beats with notes in such a way that: - All notes are interconnected either within the same column or to the next column. - The pattern where the notes are placed should be unique when considering shifting the starting point. Your task is to determine the number of possible unique ways to place these notes. # Input The input consists of multiple test cases. The first line contains a single integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each of the next `t` lines describes a test case with three integers `m`, `b`, and `k` (1 ≤ m, b, k ≤ 10^9). # Output For each test case, print a single integer — the number of unique ways to place the `k` continuous beats in the grid. # Example Input: ``` 3 3 4 5 2 6 8 1 1 1 ``` Output: ``` 6 8 1 ``` # Explanation For the first test case, Alice has a grid of 3 measures and 4 beats per measure. She needs to place 5 continuous beats such that the patterns are unique. - In this scenario, she can start the sequence in various positions, and the interconnected notes cover multiple configurations. For the second test case, Alice has a grid of 2 measures and 6 beats per measure. Placing 8 continuous beats spans multiple measures and results in different unique patterns depending on the starting point. For the third test case, Alice has a 1x1 grid and only needs to place 1 beat, which is a trivial case resulting in just one possible pattern.","solution":"def count_unique_ways(m, b, k): Function to compute the number of unique ways to place k continuous beats in an m measure and b beats per measure grid. if k <= b: return k return b def process_test_cases(test_cases): results = [] for m, b, k in test_cases: results.append(count_unique_ways(m, b, k)) return results"},{"question":"Chef has a unique number game in which he needs to find the longest contiguous subarray that contains at most K distinct integers. Given an array of integers, can you help Chef determine this? Input Each test file contains only one test case. The first line of the input contains two space-separated integers N (the number of integers in the array) and K (the maximum number of distinct integers allowed in the subarray). The second line contains N space-separated integers, representing the array of numbers. Output Print the length of the longest contiguous subarray that contains at most K distinct integers. Constraints 1 ≤ N ≤ 100000 1 ≤ K ≤ N 1 ≤ Array[i] ≤ 100000 Example Input: 7 2 1 2 1 2 3 3 4 Output: 4 Explanation The longest subarray with at most 2 distinct integers is [1, 2, 1, 2] which has a length of 4.","solution":"from collections import defaultdict def longest_subarray_with_k_distinct(arr, k): Returns the length of the longest contiguous subarray with at most K distinct integers. n = len(arr) if n == 0 or k == 0: return 0 left = 0 right = 0 max_length = 0 current_distinct_count = 0 freq_map = defaultdict(int) while right < n: if freq_map[arr[right]] == 0: current_distinct_count += 1 freq_map[arr[right]] += 1 right += 1 while current_distinct_count > k: freq_map[arr[left]] -= 1 if freq_map[arr[left]] == 0: current_distinct_count -= 1 left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"You are given an array of n integers representing the heights of n people standing in a line. Some people are considered \'visible\' from the left side of the line, while others are not. A person in the line is visible if and only if there is no person before them in the line who is taller or of the same height. For example: - In the array [5, 3, 8, 6, 7, 2], - 5 is visible since it is the first person in line. - 3 is not visible because 5 is already taller. - 8 is visible because it is taller than both 5 and 3. - 6 is not visible because 8 is already taller. - 7 is not visible because 8 is already taller. - 2 is not visible because 5 is already taller. So the output for this example would be [5, 8]. Your task is to write a program that processes multiple test cases and for each one, returns the list of visible people from the left side of the line. Input: - The first line contains an integer t (1 ≤ t ≤ 100) - the number of test cases. - For each test case: - The first line contains an integer n (1 ≤ n ≤ 10^5) - the number of people in the line. - The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) - the heights of the people in the line. Output: - For each test case, print a line containing the heights of the visible people from left to right. Example: Input: 3 6 5 3 8 6 7 2 5 4 4 4 4 4 7 1 2 3 4 5 6 7 Output: 5 8 4 1 2 3 4 5 6 7 Explanation: - In the first test case, the visible heights are [5, 8]. - In the second test case, only the first 4 is visible. - In the third test case, all heights are in ascending order and each height is visible from the left side.","solution":"def visible_people(heights): Returns a list of visible people from the left side of the line. visible = [] current_max = -1 for height in heights: if height > current_max: visible.append(height) current_max = height return visible def process_test_cases(test_cases): Processes multiple test cases to find visible people from the left side of the line. results = [] for heights in test_cases: results.append(visible_people(heights)) return results"},{"question":"Alice is participating in a treasure hunt game where she needs to collect a series of treasures numbered from 1 to 1000. Each treasure i has a value equal to 2^i. Alice has a bag that can carry a maximum weight of W (1 ≤ W ≤ 10^18). The weight of treasure i is i kg. Alice wants to collect as many different treasures as possible without exceeding the bag\'s weight limit. Help Alice determine the maximum number of different treasures she can collect without exceeding the weight limit W, and specify which treasures she should collect. Input The first line contains a single integer W (1 ≤ W ≤ 10^18) — the maximum weight Alice\'s bag can carry. Output In the first line, print a single integer k — the maximum number of different treasures that Alice can collect without exceeding the weight limit W. In the second line, print k distinct space-separated integers t1, t2, ..., tk (1 ≤ ti ≤ 1000) — the numbers of the treasures that Alice should collect. Examples Input 10 Output 4 1 2 3 4 Input 20 Output 6 1 2 3 4 5 6 Note In the first sample, Alice can carry treasures 1, 2, 3, and 4 with a total weight of 1 + 2 + 3 + 4 = 10 kg. Any other combination either exceeds the weight limit or results in fewer treasures collected. In the second sample, Alice can carry treasures from 1 to 6 with a total weight of 1 + 2 + 3 + 4 + 5 + 6 = 21 kg, but since she cannot exceed 20 kg, she can carry treasures from 1 to 5 instead.","solution":"def max_treasures(W): This function calculates the maximum number of different treasures that Alice can collect without exceeding the weight limit W, and returns the list of treasure indices. treasures = [] total_weight = 0 for i in range(1, 1001): if total_weight + i > W: break treasures.append(i) total_weight += i return len(treasures), treasures"},{"question":"Given an array of integers, return all unique subsets (the power set). Note: The solution set must not contain duplicate subsets. Constraints * The length of the integer array is between 1 and 10 (inclusive). * Each element of the array is an integer between -10 and 10 (inclusive). Input Input is given from Standard Input in the following format: n a Where: * n is an integer representing the number of elements in the array. * a is a list of n integers representing the array elements. Output Print all unique subsets one per line. Each subset should be represented as a list of integers, and the subsets should be printed in lexicographical order. Examples Input 3 1 2 2 Output [] [1] [1, 2] [1, 2, 2] [2] [2, 2] Input 4 4 4 4 1 Output [] [1] [1, 4] [1, 4, 4] [1, 4, 4, 4] [4] [4, 4] [4, 4, 4]","solution":"def subsets(arr): Returns all unique subsets of the array. arr.sort() res = [[]] def backtracking(start, path): for i in range(start, len(arr)): if i > start and arr[i] == arr[i - 1]: continue res.append(path + [arr[i]]) backtracking(i + 1, path + [arr[i]]) backtracking(0, []) return res"},{"question":"Given an array of N integers, you need to perform a series of operations on the array. An operation consists of incrementing any one element of the array by 1. Your task is to determine the minimum number of operations required to make the sum of the array even. Input: - The first line contains an integer N (1 ≤ N ≤ 10^5), the length of the array. - The second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^9), the elements of the array. Output: - Print a single integer, the minimum number of operations required to make the sum of the array even. Example: Input: 3 1 3 5 Output: 0 Input: 4 2 4 6 7 Output: 1 Note: In the first example, the sum of the array [1, 3, 5] is 9, which is already odd. No operations are necessary. In the second example, the sum of the array [2, 4, 6, 7] is 19, which is odd. By incrementing the element \'7\' by 1, the sum becomes 20, which is even. So, only 1 operation is required.","solution":"def min_operations_to_make_sum_even(n, arr): Determines the minimum number of operations required to make the sum of the array even. An operation consists of incrementing any one element of the array by 1. Parameters: n (int): The length of the array. arr (list of int): The elements of the array. Returns: int: The minimum number of operations required to make the sum of the array even. current_sum = sum(arr) # If the sum is already even, no operations are needed if current_sum % 2 == 0: return 0 else: # If the sum is odd, we need to increment one odd element to make it even return 1"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Example Consider the following code snippet: ``` struct ListNode { int val; struct ListNode *next; }; struct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) { struct ListNode dummy; struct ListNode *tail = &dummy; dummy.next = NULL; while (l1 && l2) { if (l1->val < l2->val) { tail->next = l1; l1 = l1->next; } else { tail->next = l2; l2 = l2->next; } tail = tail->next; } tail->next = l1 ? l1 : l2; return dummy.next; } ``` Input The first line contains an integer n, representing the number of nodes in the first list l1. The second line contains n integers, which are the values of the nodes in l1, in non-decreasing order. The third line contains an integer m, representing the number of nodes in the second list l2. The fourth line contains m integers, which are the values of the nodes in l2, in non-decreasing order. Output Output the values of the nodes in the merged list, in non-decreasing order. Sample Input 3 1 2 4 2 1 3 Sample Output 1 1 2 3 4","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): dummy = ListNode() tail = dummy while l1 and l2: if l1.val < l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next tail.next = l1 if l1 else l2 return dummy.next def list_to_linked_list(lst): dummy = ListNode() current = dummy for val in lst: current.next = ListNode(val) current = current.next return dummy.next def linked_list_to_list(head): result = [] while head: result.append(head.val) head = head.next return result"},{"question":"A large supermarket chain wants to engage its customers by offering raffle tickets for every certain amount spent. Each raffle ticket has a unique identifier, which is always an alphanumeric string without spaces or special characters but can include both uppercase and lowercase letters. You are to write a program that includes a function to determine if two raffle tickets are considered similar. Two tickets are similar if you can transform one ticket to another by following these rules: 1. Convert any uppercase letter to lowercase and vice versa. 2. Rearrange the letters in any order. For example, tickets \\"AbcD\\" and \\"dcBA\\" are similar because \\"AbcD\\" can be transformed to \\"abcd\\" which, when rearranged, is equal to \\"dcba\\". Your goal is to write a function that takes two raffle ticket strings as input and returns a boolean indicating whether the two tickets are similar. Input: The first line contains the number of test cases T. Each of the next T pairs of lines contain two space-separated strings representing the raffle ticket identifiers. Output: For each test case, output \\"YES\\" if the tickets are similar and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of each ticket ≤ 1000 Sample Input: 3 AbcD dcBA ticket TICKET Python Nohtyp Sample Output: YES YES YES Explanation: In the first test case, \\"AbcD\\" can be transformed to \\"abcd\\" and rearranged to \\"dcba\\". In the second test case, \\"ticket\\" and \\"TICKET\\" are similar because they are identical when case is ignored. In the third test case, \\"Python\\" and \\"Nohtyp\\" are similar by ignoring case and rearranging the letters.","solution":"def are_similar(ticket1, ticket2): Returns True if two raffle tickets are considered similar, False otherwise. # Normalize both ticket strings to lowercase ticket1 = sorted(ticket1.lower()) ticket2 = sorted(ticket2.lower()) # Compare the sorted versions of both tickets return ticket1 == ticket2 def handle_test_cases(test_cases): results = [] for tickets in test_cases: ticket1, ticket2 = tickets if are_similar(ticket1, ticket2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string s and an integer k, determine the minimum number of characters to be removed from the string so that no two adjacent characters are the same. Constraints: - 1 ≤ |s| ≤ 100 - 1 ≤ k ≤ |s| Input: - The first line contains the string s. - The second line contains the integer k. Output: - Print the minimum number of characters to be removed in a line. Examples: Input: aaaabb 2 Output: 2 Input: abcbca 3 Output: 0 Explanation: In the first example, by removing two \'a\'s we get \\"ababb\\" which keeps pairs of no more than 2 adjacent characters the same. In the second example, no removal is necessary as no more than 3 adjacent characters are the same.","solution":"def min_removals_to_avoid_adjacent_duplicates(s, k): removals = 0 i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: count += 1 i += 1 if count > k: removals += count - k i += 1 return removals"},{"question":"Given an undirected graph represented as an adjacency matrix, each node represents a city, and an edge between any two nodes indicates a direct road between those two cities. Each city can be connected to multiple other cities. Your task is to determine if the cities can be divided into two groups such that there is no road directly connecting any two cities within the same group. In other words, you need to check if the graph is bipartite. Input: - The first line contains an integer, `q` (1 ≤ q ≤ 50), representing the number of test cases. - Each test case starts with an integer `n` (2 ≤ n ≤ 100), the number of cities. - The next `n` lines each contain `n` integers (0 or 1), representing the adjacency matrix of the graph, where the j-th number in the i-th line is 1 if there is a direct road between city `i` and city `j`, and 0 otherwise. Each matrix is symmetric, and the diagonal always contains only 0s (no self-loops). Output: - For each test case, print \\"YES\\" if it is possible to split the cities into two groups as described. Otherwise, print \\"NO\\". Example: Input: 3 3 0 1 1 1 0 1 1 1 0 4 0 1 0 1 1 0 1 0 0 1 0 1 1 0 1 0 5 0 1 1 1 0 1 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0 0 1 1 0 Output: NO YES NO Explanation: In the first test case, the cities form a triangle, which cannot be split into two groups without connecting cities within the same group, so the result is \\"NO\\". In the second test case, the cities form a square, which can be split into two groups such that each group contains two cities, and there are no direct roads between cities in the same group. Therefore, the result is \\"YES\\". In the third test case, the cities form a more complex structure where it\'s not possible to split them into two groups without connecting cities within the same group, resulting in \\"NO\\".","solution":"def is_bipartite(adj_matrix): Check if the given graph (represented as an adjacency matrix) is bipartite. :param adj_matrix: List[List[int]], n x n adjacency matrix :return: bool, True if the graph is bipartite, False otherwise n = len(adj_matrix) colors = [-1] * n def bfs(start): queue = [start] colors[start] = 0 # Start coloring with 0 while queue: node = queue.pop(0) for neighbor in range(n): if adj_matrix[node][neighbor] == 1: if colors[neighbor] == -1: colors[neighbor] = 1 - colors[node] queue.append(neighbor) elif colors[neighbor] == colors[node]: return False return True for i in range(n): if colors[i] == -1: if not bfs(i): return False return True def check_bipartite(q, test_cases): results = [] for i in range(q): n = test_cases[i][0] adj_matrix = test_cases[i][1] if is_bipartite(adj_matrix): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company wants to organize a contest among its employees. Each employee can participate in one of the following types of contests – coding, debugging, or testing. - Each contest should have at least `k` participants. - No employee can participate in more than one contest. - Each type of contest should have the same number of participants for organizational simplicity. - Your task is to find whether it is possible to group employees such that the above conditions are met. Input - The first line contains the number of test cases `t` (1 ≤ t ≤ 10^5). - Each test case consists of two integers `n` and `k` (3k ≤ n ≤ 10^6) where `n` is the total number of employees and `k` is the minimum number of participants required for each contest. Output - For each test case, if it is possible to organize the contests satisfying the above conditions, print \\"POSSIBLE\\". Then, print the distribution of employees in the contests in three lines. Each line should start with the type of contest (\\"CODING\\", \\"DEBUGGING\\", or \\"TESTING\\") followed by the number of participants and the indices of the participants (starting from 1). - If it is not possible, print \\"IMPOSSIBLE\\". Example Input ``` 2 9 3 10 4 ``` Output ``` POSSIBLE CODING 3 1 2 3 DEBUGGING 3 4 5 6 TESTING 3 7 8 9 IMPOSSIBLE ``` Explanation In the first test case, the total number of employees `n` is 9 and the minimum number of participants `k` for each contest is 3. We can divide 9 employees into three groups of 3 participants each. Therefore, it\'s possible to organize the contests with the given conditions. In the second test case, there are 10 employees but each contest needs at least 4 participants, requiring a total of 12 employees (3k = 3*4 = 12), which is not possible with only 10 employees. Therefore, the output is \\"IMPOSSIBLE\\".","solution":"def organize_contests(test_cases): result = [] for n, k in test_cases: if n % 3 == 0 and n >= 3 * k: result.append(\\"POSSIBLE\\") participants_per_contest = n // 3 for i in range(3): contest_type = [\\"CODING\\", \\"DEBUGGING\\", \\"TESTING\\"][i] indices = \\" \\".join(str(j + 1 + i * participants_per_contest) for j in range(participants_per_contest)) result.append(f\\"{contest_type} {participants_per_contest} {indices}\\") else: result.append(\\"IMPOSSIBLE\\") return result def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] for i in range(1, t + 1): n, k = map(int, lines[i].split()) test_cases.append((n, k)) return test_cases def format_output(output_list): return \\"n\\".join(output_list) # Example usage input_str = 2 9 3 10 4 test_cases = parse_input(input_str) output_list = organize_contests(test_cases) output_str = format_output(output_list) print(output_str)"},{"question":"Given an array of integers, you are required to rotate the array k times to the right, where k is a non-negative integer. Rotating an array means shifting its elements to the right by one position, with the last element of the array moving to the first position. Your task is to write a function to do this rotation in place and return the modified array. Input: First line of input contains the number of test cases. Each test case consists of two lines. The first line contains the number of elements in the array followed by the integer k. The second line contains the elements of the array. Output: For each test case, print the modified array after rotating it k times to the right. SAMPLE INPUT 2 7 3 1 2 3 4 5 6 7 4 2 10 20 30 40 SAMPLE OUTPUT 5 6 7 1 2 3 4 30 40 10 20 Explanation TC #1 - After rotating the array [1, 2, 3, 4, 5, 6, 7] 3 times to the right, the final array is [5, 6, 7, 1, 2, 3, 4]. TC #2 - After rotating the array [10, 20, 30, 40] 2 times to the right, the final array is [30, 40, 10, 20].","solution":"def rotate_array(test_cases): results = [] for case in test_cases: n, k = case[0] arr = case[1] k = k % n # In case k is larger than n rotated_arr = arr[-k:] + arr[:-k] results.append(rotated_arr) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") num_test_cases = int(lines[0]) test_cases = [] line_idx = 1 for _ in range(num_test_cases): n, k = map(int, lines[line_idx].split()) arr = list(map(int, lines[line_idx + 1].split())) test_cases.append(((n, k), arr)) line_idx += 2 return test_cases def format_output(results): output = [] for result in results: output.append(\\" \\".join(map(str, result))) return \\"n\\".join(output)"},{"question":"A social media platform wants to identify the most influential users among its network. The influence of a user is quantified by the number of direct connections (friends) they have. Given a list of user connections, determine the user with the highest influence. If there are multiple users with the same highest influence, return the one with the smallest user ID. Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000), where `n` is the number of users and `m` is the number of connections. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), representing a bi-directional connection between users `u` and `v`. Output - Print the user ID of the most influential user. If there are multiple such users, print the smallest one. Examples Input 5 4 1 2 1 3 2 3 4 5 Output 1 Input 3 2 1 2 2 3 Output 2 Input 4 0 Output 1","solution":"def find_most_influential_user(n, m, connections): Finds the user with the highest influence (number of direct connections). If multiple users have the same number of connections, returns the smallest user ID. Parameters: n (int): Number of users m (int): Number of connections connections (list of tuples): Each tuple contains two integers representing a connection between users. Returns: int: The user ID of the most influential user. if m == 0: # No connections, return the smallest user ID, which is 1 return 1 # Create a list to store the count of connections for each user connection_count = [0] * (n + 1) for u, v in connections: connection_count[u] += 1 connection_count[v] += 1 # Find the user with the highest number of connections max_connections = max(connection_count) for user_id in range(1, n + 1): if connection_count[user_id] == max_connections: return user_id"},{"question":"Mario is an avid collector of vintage coins, and he loves organizing his collection in a well-defined order. Recently, Mario has acquired a set of coins each having a different year engraved on it. He wants to arrange these coins in ascending order based on their year. However, he wants to avoid manually sorting them and decides to write a program to do this. Given an array of integers representing the years on Mario\'s coins, write a function to sort the array in ascending order. # Input - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of coins Mario has. - The second line contains n integers, each representing a year (1000 ≤ year ≤ 9999). # Output - Output the sorted list of years in ascending order. # Examples Example 1 **Input:** ``` 5 1890 2001 1601 2018 1999 ``` **Output:** ``` 1601 1890 1999 2001 2018 ``` Example 2 **Input:** ``` 3 2020 2010 1990 ``` **Output:** ``` 1990 2010 2020 ``` Example 3 **Input:** ``` 1 1950 ``` **Output:** ``` 1950 ```","solution":"def sort_coin_years(n, years): Sorts an array of integers representing years in ascending order. Parameters: n (int): The number of coins Mario has. years (list of int): A list of years on Mario\'s coins. Returns: list of int: The sorted list of years in ascending order. return sorted(years)"},{"question":"You are organizing a tournament where n players will participate. Each player has a certain skill level represented by an integer. In each round of the tournament, two players with the highest skill levels will be selected to compete against each other. The player with the higher skill level wins and continues to the next round while the player with the lower skill level is eliminated. If the skill levels are equal, both players continue to the next round. Your task is to determine the minimum number of rounds required to find the overall winner of the tournament. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of players. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the skill levels of the players. Output: - A single integer representing the minimum number of rounds required to determine the overall winner. Example: Input: 5 10 20 30 40 50 Output: 4 Explanation: 1. In the first round, players with skill levels 40 and 50 compete. Player with skill 50 wins. 2. In the second round, players with skill levels 30 and 50 compete. Player with skill 50 wins. 3. In the third round, players with skill levels 20 and 50 compete. Player with skill 50 wins. 4. In the fourth round, players with skill levels 10 and 50 compete. Player with skill 50 wins. Thus, a total of 4 rounds are required to determine the overall winner.","solution":"def min_rounds(n, skill_levels): Returns the minimum number of rounds required to determine the overall winner in a tournament given the number of players `n` and their respective `skill_levels`. assert 1 <= n <= 10**5 assert all(1 <= skill <= 10**9 for skill in skill_levels) if n == 1: return 0 # If there\'s only one player, no rounds are needed max_skill = max(skill_levels) rounds = 0 for skill in skill_levels: if skill != max_skill: rounds += 1 return rounds"},{"question":"Alice has recently taken an interest in graph theory and has come across the concept of connected components in an undirected graph. She decided to write a function that finds and returns all the connected components of a given undirected graph. Can you help her? A connected component of an undirected graph is a set of vertices in which there is a path between any pair of vertices and which is connected to no additional vertices in the graph. # Input The input consists of multiple test cases. The first line contains an integer `T` (1 ≤ T ≤ 10^4), the number of test cases. For each test case, the first line contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5) – the number of vertices and the number of edges in the graph, respectively. Each of the following `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) – representing an undirected edge between vertices `u` and `v`. The sum of all `n` in all test cases will not exceed 10^5, and the sum of all `m` in all test cases will not exceed 2·10^5. # Output For each test case, the first line should contain a single integer `k`, the number of connected components in the graph. Each of the next `k` lines should contain a list of the vertices (in ascending order) that form a connected component in the graph. The vertices in each connected component should be listed in ascending order. You can print the connected components in any order. # Example Input ``` 2 5 3 1 2 3 4 4 5 4 0 ``` Output ``` 2 1 2 3 4 5 4 1 2 3 4 ``` # Explanation In the first test case, the graph has 5 vertices and 3 edges, forming two connected components: {1, 2} and {3, 4, 5}. In the second test case, the graph has 4 vertices and no edges, resulting in 4 connected components where each vertex is its own connected component.","solution":"def find_connected_components(n, edges): from collections import defaultdict, deque def bfs(start): queue = deque([start]) component = [] visited[start] = True while queue: node = queue.popleft() component.append(node) for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return sorted(component) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = [] for node in range(1, n + 1): if not visited[node]: component = bfs(node) components.append(component) return components def process_test_cases(T, test_cases): result = [] for i in range(T): n, m, edges = test_cases[i] components = find_connected_components(n, edges) result.append(components) return result"},{"question":"Aragorn, Legolas, and Gimli are on a quest to find the secret code to open the gates of an ancient fortress. The code is hidden within a sequence of integers. However, the gate will only open if they can extract a specific subsequence from the sequence of integers according to the following rules: 1. The subsequence must be strictly increasing. 2. The subsequence should consist of the largest possible number of elements. Given a sequence of integers, determine the longest strictly increasing subsequence. Input You are given an integer n (1 ≤ n ≤ 105), followed by a sequence of n integers. Output Print the length of the longest strictly increasing subsequence. Examples Input 6 5 2 7 4 3 8 Output 3 Input 8 10 22 9 33 21 50 41 60 Output 5","solution":"def longest_increasing_subsequence_length(sequence): Returns the length of the longest strictly increasing subsequence in the given sequence of integers. if not sequence: return 0 dp = [1] * len(sequence) for i in range(1, len(sequence)): for j in range(0, i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are working on a text-editor application, and one of the features you are implementing is a search-and-replace functionality. Specifically, you want to handle cases where certain patterns in the text need to be replaced by other specified patterns. Write a function that, given a list of patterns to search for and a list of replacement patterns, replaces all occurrences of each pattern in the text with its corresponding replacement pattern. The patterns to search for and the replacement patterns are guaranteed to have the same length. The replacements should be done sequentially, meaning the text is updated after each pattern replacement. Input The first line contains a single integer T denoting the number of test cases. For each test case, the first line contains a single integer N denoting the number of pattern-replacement pairs. The next N lines each contain two strings, where the first string is the pattern to search for, and the second string is the pattern to replace it with. The final line of each test case is the text in which replacements are to be made. Output For each test case, output the modified text after all replacements have been made, one per line. Constraints 1 <= N <= 100 1 <= length of any string in input <= 100 Example Input: 1 2 he ho hi hello hehohello Output: hihellohello Explanation For the given example, First, the pattern \\"he\\" is replaced by \\"ho\\": the text becomes \\"hohohello\\". Next, the pattern \\"hi\\" is replaced by \\"hello\\": the text becomes \\"hihellohello\\".","solution":"def search_and_replace(T, test_cases): results = [] for case in test_cases: N, patterns, text = case for pattern, replacement in patterns: text = text.replace(pattern, replacement) results.append(text) return results"},{"question":"A healthcare organization is implementing a new system to track patient visits and ensure that all patients receive proper care. Each patient is assigned a unique ID and has multiple visits recorded in the system. Each visit includes the patient\'s ID, the visit date, and the doctor seen. The system aims to identify gaps in patient care. Specifically, for each patient, it should flag if there is a period longer than 30 days where the patient didn\'t have any visit. Your task is to write a program that receives the patients\' visit records and outputs the patients who have gaps in their visits longer than 30 days. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of visits recorded. Each of the following n lines contains three values: - a string patient_id (1 ≤ |patient_id| ≤ 20) — the unique patient ID, - a string date (in the format YYYY-MM-DD) — the visit date, - a string doctor_id (1 ≤ |doctor_id| ≤ 20). It is guaranteed that the dates are valid. Output For each patient with a gap longer than 30 days between visits, print the patient ID. The output should be sorted in ascending order of patient_id. Each patient ID should be printed only once. Example Input 7 abc123 2023-01-01 doc789 abc123 2023-01-15 doc456 xyz987 2023-01-05 doc123 xyz987 2023-02-10 doc123 xyz987 2023-03-11 doc456 abc123 2023-02-20 doc789 abc123 2023-04-01 doc123 Output abc123 xyz987","solution":"from datetime import datetime, timedelta def find_patients_with_gaps(visits): patients = {} for visit in visits: patient_id, date_str, doctor_id = visit date = datetime.strptime(date_str, \'%Y-%m-%d\') if patient_id not in patients: patients[patient_id] = [] patients[patient_id].append(date) result = [] for patient_id, dates in patients.items(): dates.sort() for i in range(1, len(dates)): if (dates[i] - dates[i-1]).days > 30: result.append(patient_id) break result.sort() return result def process_input(n, visit_records): visits = [tuple(line.split()) for line in visit_records] return find_patients_with_gaps(visits)"},{"question":"Flora is working on a construction project where she needs to build a network of bridges between several islands. Each island is represented as a node, and a bridge is represented as an edge between two nodes. However, the project has certain constraints and requirements: 1. Each island must be connected directly or indirectly to every other island. 2. The total cost to build all bridges should be minimized. 3. Each bridge has a different cost associated with it. Given the number of islands and the possible bridges with their respective costs, help Flora determine the minimum cost required to construct the network of bridges that connects all the islands. Input The first line of the input contains T ≤ 20 - the number of test cases. Each test case begins with two integers, n (2 ≤ n ≤ 100) - the number of islands, and m (1 ≤ m ≤ n*(n-1)/2) - the number of possible bridges. The next m lines each contain three integers: u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), representing a bridge between islands u and v with a cost w. Output For each test case, output a single integer representing the minimum cost to construct the network of bridges. If it is not possible to connect all the islands, output -1. Example Input 2 4 6 1 2 1 1 3 4 2 3 2 2 4 3 3 4 5 1 4 4 3 3 1 2 5 2 3 6 1 3 7 Output 6 11","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_cost_to_connect_islands(n, bridges): # Sort all the edges in non-decreasing order of their weight bridges = sorted(bridges, key=lambda item: item[2]) parent = list(range(n)) rank = [0] * n mst_edges = 0 mst_cost = 0 for u, v, w in bridges: root_u = find(parent, u - 1) root_v = find(parent, v - 1) if root_u != root_v: mst_cost += w mst_edges += 1 union(parent, rank, root_u, root_v) if mst_edges == n - 1: break if mst_edges != n - 1: return -1 return mst_cost def solve_bridge_networks(test_cases): results = [] for n, m, bridges in test_cases: results.append(minimum_cost_to_connect_islands(n, bridges)) return results"},{"question":"Marcus loves puzzles, and his favorite ones involve sequences of numbers. He has recently come up with a new challenge for his friends. Given an integer n, Marcus generates a sequence according to the following rules: 1. Start with the number n. 2. If n is even, divide it by 2 to get the next number of the sequence. 3. If n is odd, multiply it by 3 and add 1 to get the next number of the sequence. 4. Repeat steps 2 and 3 until n becomes 1. Marcus is interested in knowing the length of the sequence generated for a given n. Can you help him find this? Input The first line contains an integer t (1 ≤ t ≤ 10^4), the number of test cases. Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^9). Output For each test case, output a single integer, the length of the sequence starting from n and ending at 1. Example Input 3 6 19 27 Output 9 21 112 Note In the first case, the sequence starting from 6 is: 6, 3, 10, 5, 16, 8, 4, 2, 1. The sequence has 9 numbers. In the second case, the sequence starting from 19 is: 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1. The sequence has 21 numbers. In the third case, the sequence starting from 27 is quite long and consists of 112 numbers before reaching 1.","solution":"def collatz_sequence_length(n): Calculate the length of the Collatz sequence starting at n and ending at 1. length = 1 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 length += 1 return length def process_test_cases(t, cases): Process multiple test cases for the Collatz sequence length. results = [] for n in cases: results.append(collatz_sequence_length(n)) return results"},{"question":"A balanced binary search tree (BST) is a type of data structure that maintains its properties to ensure operations like insertion, deletion, and lookup can be performed in logarithmic time on average. Write a program to perform operations on a balanced BST which supports the following: * insert(S, k): insert an element k into the tree S * delete(S, k): delete an element k from the tree S * findMin(S): find and return the smallest element in the tree S * findMax(S): find and return the largest element in the tree S Constraints * The number of operations leq 1,000,000 * 0 leq k leq 1,000,000,000 Input Multiple operations are given in the following format: \\"insert k\\", \\"delete k\\", \\"findMin\\", \\"findMax\\", or \\"end\\" in a line. The input ends with the \\"end\\" operation. Output For each \\"findMin\\" and \\"findMax\\" operation, print the element found in the BST on a new line. Example Input insert 8 insert 3 insert 10 findMin findMax insert 14 delete 10 findMax insert 1 findMin end Output 3 10 14 1","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None self.height = 1 class AVLTree: def insert(self, root, key): if not root: return TreeNode(key) elif key < root.key: root.left = self.insert(root.left, key) else: root.right = self.insert(root.right, key) root.height = 1 + max(self.getHeight(root.left), self.getHeight(root.right)) balance = self.getBalance(root) if balance > 1 and key < root.left.key: return self.rightRotate(root) if balance < -1 and key > root.right.key: return self.leftRotate(root) if balance > 1 and key > root.left.key: root.left = self.leftRotate(root.left) return self.rightRotate(root) if balance < -1 and key < root.right.key: root.right = self.rightRotate(root.right) return self.leftRotate(root) return root def delete(self, root, key): if not root: return root if key < root.key: root.left = self.delete(root.left, key) elif key > root.key: root.right = self.delete(root.right, key) else: if root.left is None: temp = root.right root = None return temp elif root.right is None: temp = root.left root = None return temp temp = self.getMinValueNode(root.right) root.key = temp.key root.right = self.delete(root.right, temp.key) if root is None: return root root.height = 1 + max(self.getHeight(root.left), self.getHeight(root.right)) balance = self.getBalance(root) if balance > 1 and self.getBalance(root.left) >= 0: return self.rightRotate(root) if balance > 1 and self.getBalance(root.left) < 0: root.left = self.leftRotate(root.left) return self.rightRotate(root) if balance < -1 and self.getBalance(root.right) <= 0: return self.leftRotate(root) if balance < -1 and self.getBalance(root.right) > 0: root.right = self.rightRotate(root.right) return self.leftRotate(root) return root def leftRotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self.getHeight(z.left), self.getHeight(z.right)) y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) return y def rightRotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self.getHeight(z.left), self.getHeight(z.right)) y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) return y def getHeight(self, root): if not root: return 0 return root.height def getBalance(self, root): if not root: return 0 return self.getHeight(root.left) - self.getHeight(root.right) def getMinValueNode(self, root): if root is None or root.left is None: return root return self.getMinValueNode(root.left) def getMaxValueNode(self, root): if root is None or root.right is None: return root return self.getMaxValueNode(root.right) def perform_operations(operations): tree = AVLTree() root = None result = [] for operation in operations: if operation.startswith(\\"insert\\"): _, key = operation.split() root = tree.insert(root, int(key)) elif operation.startswith(\\"delete\\"): _, key = operation.split() root = tree.delete(root, int(key)) elif operation == \\"findMin\\": min_node = tree.getMinValueNode(root) result.append(min_node.key if min_node else None) elif operation == \\"findMax\\": max_node = tree.getMaxValueNode(root) result.append(max_node.key if max_node else None) elif operation == \\"end\\": break return result"},{"question":"You have been hired to implement a scheduling system for a university. The university wants you to create a system that determines the best way to schedule guest lectures in order to maximize the number of lectures a classroom can host in a single day. Each lecture has a start time and an end time, and only one lecture can be held in the classroom at any given time. Your task is to write a program that finds the maximum number of non-overlapping lectures that can be scheduled in a single classroom. Input: The first line of the input contains a single integer t, the number of test cases. For each test case, the first line contains an integer n, the number of lectures. The next n lines each contain two integers, `start` and `end`, representing the start time and end time of a lecture. Output: For each test case, print the maximum number of non-overlapping lectures that can be scheduled in a single classroom. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 100 0 ≤ start < end ≤ 1000 SAMPLE INPUT 2 3 1 2 3 4 0 6 4 10 20 12 25 20 30 25 35 SAMPLE OUTPUT 2 2 Explanation: TestCase 1: The optimal schedule is separating the lectures [1, 2] and [3, 4], which allows for 2 non-overlapping lectures. TestCase 2: The optimal schedule is separating the lectures [10, 20] and [25, 35], which allows for 2 non-overlapping lectures.","solution":"def max_non_overlapping_lectures(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] lectures = test_cases[i][1] # Sort lectures by end time lectures.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 # Iterate through each lecture and count non-overlapping lectures for start, end in lectures: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"A company wants to optimize the performance of their cloud servers. They have logs containing the CPU usage of each server in a specific time span. Each log entry consists of a timestamp and the CPU usage percentage at that time. To analyze the server performance, the company wants to process multiple queries to find the maximum CPU usage in different time intervals. You need to write a program that processes these queries efficiently. # Input 1. The first line of the input contains two integers n and q where `n` is the number of log entries, and `q` is the number of queries. 2. The next `n` lines each contain a timestamp (in the format `HH:MM:SS`) and the CPU usage percentage at that time. 3. The next `q` lines each contain two timestamps `T1` and `T2` representing the start and end of the time interval for each query. # Output For each query, print the maximum CPU usage percentage in the specified time interval. # Constraints - 1 <= n <= 10^6 - 1 <= q <= 10^6 - The timestamps are given in non-decreasing order. - The time intervals for queries will always be valid, i.e., `T1` <= `T2`. - The CPU usage percentage is an integer between 0 and 100. # Example Input ``` 5 3 00:00:01 35 00:01:00 60 00:02:30 75 00:03:00 55 00:04:00 95 00:01:00 00:03:00 00:00:00 00:02:00 00:02:00 00:05:00 ``` Output ``` 75 60 95 ``` # Explanation For the first query, the maximum CPU usage between \\"00:01:00\\" and \\"00:03:00\\" is 75. For the second query, the maximum CPU usage between \\"00:00:00\\" and \\"00:02:00\\" is 60. For the third query, the maximum CPU usage between \\"00:02:00\\" and \\"00:05:00\\" is 95. # Note Due to potentially large input sizes, consider using faster input/output methods and efficient algorithms for processing.","solution":"def cpu_usage_optimization(logs, queries): from collections import deque import bisect # Convert timestamp to seconds def to_seconds(timestamp): h, m, s = map(int, timestamp.split(\':\')) return h * 3600 + m * 60 + s # Convert log timestamps to seconds and pair with CPU usage log_data = [(to_seconds(timestamp), usage) for timestamp, usage in logs] # Initialize result list results = [] # Preparing data for binary searchable queries times = [entry[0] for entry in log_data] usages = [entry[1] for entry in log_data] for start, end in queries: # Convert query timestamps to seconds start_sec, end_sec = to_seconds(start), to_seconds(end) # Binary search to find start and end positions in the log start_idx = bisect.bisect_left(times, start_sec) end_idx = bisect.bisect_right(times, end_sec) - 1 # Calculate the maximum usage in the given interval if start_idx <= end_idx: max_usage = max(usages[start_idx:end_idx+1]) else: max_usage = 0 # or some other invalid result if ranges are invalid # Append result for this query results.append(max_usage) return results"},{"question":"A deli shop needs to prepare sandwiches based on customer orders. Each sandwich requires a certain amount of bread slices, pieces of cheese, and slices of tomato. Given the number of bread slices, cheese pieces, and tomato slices available in the deli shop, as well as the required amounts for each sandwich, you need to determine the maximum number of sandwiches that can be made. input The input consists of multiple datasets provided in the following format. Q bs1 cs1 ts1 bn1 cn1 tn1 bs2 cs2 ts2 bn2 cn2 tn2 :: bsQ csQ tsQ bnQ cnQ tnQ Q (1 ≤ Q ≤ 100) on the first line is the number of orders. For each dataset, the first three integers bsi (0 ≤ bsi ≤ 1000) csi (0 ≤ csi ≤ 1000) tsi (0 ≤ tsi ≤ 1000) represent the number of bread slices, cheese pieces, and tomato slices available, respectively. The next three integers bni (1 ≤ bni ≤ 100) cni (1 ≤ cni ≤ 100) tni (1 ≤ tni ≤ 100) represent the required number of bread slices, cheese pieces, and tomato slices to make one sandwich. output Output the maximum number of sandwiches that can be made on one line for each order. Example Input 3 8 10 6 2 3 1 15 10 10 5 4 2 20 30 40 4 3 5 Output 3 2 5","solution":"def max_sandwiches(bs, cs, ts, bn, cn, tn): Returns the maximum number of sandwiches that can be made with the given resources and the required amounts for each sandwich. return min(bs // bn, cs // cn, ts // tn) def process_orders(data): Processes multiple orders and returns the maximum number of sandwiches for each order. :param data: List of integers with all inputs. :returns: List of integers, each representing the maximum number of sandwiches for that order. Q = data[0] results = [] for i in range(Q): bs, cs, ts, bn, cn, tn = data[6 * i + 1: 6 * i + 7] results.append(max_sandwiches(bs, cs, ts, bn, cn, tn)) return results"},{"question":"You are given a list of integers representing the heights of a group of people standing in a line. Each person can move to the left or right to swap places with another person. We need to arrange the people such that for any two people standing next to each other, the difference in their heights is as small as possible. Formally, given a list of integers `heights`, we want to reorder the list such that the maximum difference between any two adjacent elements is minimized. Write a function `minMaxDifference(heights: List[int]) -> List[int]` that takes a list of integers and returns a reordered list that minimizes the maximum difference between adjacent elements. Input - A list of integers `heights` representing the heights of people in a line. (1 ≤ len(heights) ≤ 1000, 1 ≤ heights[i] ≤ 10^6) Output - A list of integers representing the reordered heights. Example Input ``` [3, 1, 4, 9, 2, 6] ``` Output ``` [1, 2, 3, 4, 6, 9] ``` Input ``` [10, 5, 2, 8, 7] ``` Output ``` [2, 5, 7, 8, 10] ``` Explanation: In the first example, the reordered list `[1, 2, 3, 4, 6, 9]` has the maximum difference between any two adjacent elements minimized. Specifically, the differences are `[1, 1, 1, 2, 3]` where the maximum is `3`. In the second example, the reordered list `[2, 5, 7, 8, 10]` has the maximum difference between any two adjacent elements minimized. Specifically, the differences are `[3, 2, 1, 2]` where the maximum is `3`. Note - You should always return the re-ordered list that minimizes the difference between adjacent elements. - If there are multiple valid answers, return any one of them.","solution":"def minMaxDifference(heights): Takes a list of integers representing heights of people and returns a reordered list that minimizes the maximum difference between adjacent elements. heights.sort() return heights"},{"question":"The XYZ Company wants to create a system that can verify if a string can be transformed into a palindrome by performing operations on it. A palindrome is a string that reads the same forwards and backwards. The allowed operations are: 1. Deleting any single character from the string. 2. Appending exactly one character \'a\', \'b\', or \'c\' to the end of the string. Write a function that determines whether it is possible to transform the given string into a palindrome by applying these operations at most once. INPUT: - The first line of the input contains the integer T, the number of test cases. - Each of the next T lines contains a string S consisting only of lowercase English letters. OUTPUT: For each test case, print \\"YES\\" if the string can be transformed into a palindrome by applying the allowed operations at most once. Otherwise, print \\"NO\\". CONSTRAINTS: - 1 ≤ T ≤ 100000 - 1 ≤ length of S ≤ 100000 SAMPLE INPUT: 3 abcba abdcba abcdc SAMPLE OUTPUT: YES YES NO","solution":"def can_transform_to_palindrome(s): Determines if the string `s` can be transformed into a palindrome by either: 1. Deleting a single character. 2. Appending exactly one character (\'a\', \'b\', or \'c\') to the end. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return \\"YES\\" # Check by deleting one character for i in range(len(s)): if is_palindrome(s[:i] + s[i+1:]): return \\"YES\\" # Check by appending one character for c in \'abc\': if is_palindrome(s + c): return \\"YES\\" return \\"NO\\" def process_cases(T, cases): results = [] for case in cases: results.append(can_transform_to_palindrome(case)) return results def main(input_data): lines = input_data.split(\'n\') T = int(lines[0]) cases = lines[1:T+1] return \\"n\\".join(process_cases(T, cases))"},{"question":"Alex is a botanist, who has a garden that contains `n` different kinds of plants. Each type of plant i has a growth pattern represented by an integer `g[i]`, which indicates the number of new plants of its kind that will grow after one day. Alex wants to maintain the diversity of his garden by ensuring that after each day, the number of plants of each type does not exceed some specified limit `l[i]`. To achieve this, Alex plans to trim the plants at the end of each day to match this requirement. Given the initial number of plants of each type `p[i]` and their growth patterns, you need to determine the number of plants of each type at the end of the day, after they have grown and then trimmed to the specified limits. Input: The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of different kinds of plants in the garden. The second line contains `n` space-separated integers `p[i]` (1 ≤ p[i] ≤ 1000) — the initial number of plants of each type. The third line contains `n` space-separated integers `g[i]` (0 ≤ g[i] ≤ 100) — the growth pattern of each type of plant. The fourth line contains `n` space-separated integers `l[i]` (1 ≤ l[i] ≤ 2000) — the maximum limit of plants of each type that Alex wants to maintain. Output: Output `n` space-separated integers — the number of plants of each type at the end of the day after they have been trimmed according to the specified limits. Example: Input: 4 5 10 3 8 2 1 5 3 6 12 7 10 Output: 6 11 7 10 Explanation: - The initial count of plants is [5, 10, 3, 8]. - After growth, the count is [7, 11, 8, 11] since 2, 1, 5, and 3 plants are added respectively. - After trimming, the counts are [6, 11, 7, 10] to match the specified limits.","solution":"def trim_plants(n, p, g, l): result = [] for i in range(n): new_count = p[i] + g[i] # plants after growth if new_count > l[i]: new_count = l[i] # trim to limit result.append(new_count) return result"},{"question":"A land survey involves creating a map consisting of n × n grid cells, with each cell containing between 1 and m (inclusive) layers of geological strata. Each cell is uniquely numbered according to its row and column position (e.g., the cell at row 3, column 4 is numbered as 3-4). The surveyor marks a portion of the cells with particular interest and wants to know the expected number of layers in these marked cells. You are given an integer n (size of the grid), an integer m (the maximum number of layers in any cell), and a list of cells that are marked for further inspection. For each marked cell (given by row and column indices), you need to calculate the expected number of geological strata layers in it assuming the number of layers in each grid cell is uniformly distributed between 1 and m. Input The first line contains three integers n, m, k (1 ≤ n ≤ 300; 1 ≤ m ≤ 100000; 1 ≤ k ≤ n2). The next k lines contain two integers each, ri and ci (1 ≤ ri, ci ≤ n), representing the row and column indices of the marked cells. Output For each of the k marked cells, print the expected number of geological strata layers (between 1 and m) each on a new line. Examples: Input 3 4 2 1 1 2 3 Output 2.5 2.5 Input 5 10 3 3 3 4 4 5 2 Output 5.5 5.5 5.5","solution":"def expected_layers(n, m, k, marked_cells): Computes the expected number of geological strata layers for marked cells. Args: n : int : size of the grid (n x n) m : int : maximum number of layers in any cell k : int : number of marked cells marked_cells : list of tuples : contains the (row, column) indices of the marked cells Returns: list of float : expected number of layers for each marked cell # The expected number of layers in any cell is the average of the uniform distribution expected_value = (1 + m) / 2 # The expected number of layers is the same for each marked cell return [expected_value] * k"},{"question":"Given a sequence A of length N , determine the number of distinct pairs (i, j) in the sequence such that A_i + A_j is an even number and i < j . The sum of A_i and A_j is even if both A_i and A_j are either even or odd. Example Input: 4 6 4 7 8 Output: 3 Explanation: Pairs that sum to an even number are: (6, 4), (6, 8), (7, 7). Therefore, the number of such distinct pairs is 3.","solution":"def count_even_sum_pairs(A): Returns the number of distinct pairs (i, j) such that A_i + A_j is an even number and i < j :param A: List of integers :return: Number of pairs even_count = 0 odd_count = 0 for number in A: if number % 2 == 0: even_count += 1 else: odd_count += 1 # Number of ways to pick 2 out of even_count elements even_pairs = even_count * (even_count - 1) // 2 # Number of ways to pick 2 out of odd_count elements odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs"},{"question":"The government has initiated a special program to promote fitness among students. The program assigns a fitness score to each student based on their performance in a series of physical activities. Each student can participate in multiple activities, and each activity contributes a certain score to the fitness of the students who participated. For the purpose of this program, a student\'s overall fitness score is the sum of all the scores from activities they participated in. The top officials want to know which student has the highest fitness score in their class after all activities have concluded. Given the number of students and their participation in various activities, determine the student with the highest fitness score. If multiple students have the same highest score, return the lowest student number (assuming the students are numbered from 1 to n). Input: The first line of the input contains t, the number of test cases. The first line of each test case contains two integers n (the number of students) and m (the number of activities). The next m lines contain three integers each: ai, bi, and si, indicating that students ai to bi (inclusive) participated in the ith activity and each got si points. Output: For each test case, output the student number who has the highest fitness score. If multiple students have the same highest score, output the lowest student number. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 100000 1 ≤ m ≤ 100000 1 ≤ ai ≤ bi ≤ n 1 ≤ si ≤ 1000 SAMPLE INPUT 2 5 3 1 3 10 2 5 20 3 4 15 4 2 1 2 5 2 3 5 SAMPLE OUTPUT 2 2 Explanation In the first test case: - Student 1 participated in activities 1 and 2, earning 10 + 20 = 30 points. - Student 2 participated in activities 1 and 2, earning 10 + 20 = 30 points. - Student 3 participated in activities 1, 2, and 3, earning 10 + 20 + 15 = 45 points. - Student 4 participated in activities 2 and 3, earning 20 + 15 = 35 points. - Student 5 participated in activity 2, earning 20 points. The student with the highest fitness score is Student 3 with 45 points. In the second test case: - Student 1 participated in one activity, earning 5 points. - Student 2 participated in two activities, earning 5 + 5 = 10 points. - Student 3 participated in one activity, earning 5 points. The student with the highest fitness score is Student 2 with 10 points.","solution":"def highest_fitness_score(t, test_cases): results = [] for case in test_cases: n, m, activities = case scores = [0] * n for activity in activities: ai, bi, si = activity for student in range(ai - 1, bi): scores[student] += si max_score = max(scores) for i in range(n): if scores[i] == max_score: results.append(i + 1) break return results"},{"question":"Implement a function that performs run-length encoding for a given string. Run-length encoding is a basic form of data compression where consecutive identical elements are replaced with the element followed by the number of consecutive repetitions. For example, the string \\"aaaabbbcc\\" would be encoded as \\"a4b3c2\\". Input A single line containing the string that needs to be encoded, which will contain only lowercase alphabets, with a length not exceeding 100 characters. Output A single line containing the run-length encoded string. Examples Input aaabbcccc Output a3b2c4 Input abbbbbc Output a1b5c1","solution":"def run_length_encoding(s): Performs run-length encoding on the given string. s : str : input string containing lowercase alphabets return : str : run-length encoded string if not s: return \\"\\" encoded_str = \\"\\" count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: encoded_str += s[i-1] + str(count) count = 1 encoded_str += s[-1] + str(count) return encoded_str"},{"question":"You are given a binary tree, where each node has two potential children and each node contains a unique integer value. A leaf node is a node that does not have any children. Your task is to find the longest path in the tree where the values along the path form a strictly increasing sequence. Input The first line contains an integer n (1 ≤ n ≤ 10^4), the number of nodes in the binary tree. Each of the following n lines contains three integers - the value of the node, the value of its left child, and the value of its right child. If a node does not have a left or right child, the corresponding value is -1. Output Print a single integer - the length of the longest path with strictly increasing values. Examples Input ``` 5 4 2 5 2 -1 -1 5 3 -1 3 -1 -1 1 -1 -1 ``` Output ``` 3 ``` Input ``` 7 8 3 10 3 1 6 10 -1 14 1 -1 -1 6 4 7 14 13 -1 4 -1 -1 ``` Output ``` 3 ``` Note For the first test case, one of the longest paths with strictly increasing values is 4 -> 5. This path has a length of 2. For the second test case, one of the longest paths with strictly increasing values is 3 -> 6 -> 7. This path has a length of 3.","solution":"class TreeNode: def __init__(self, value=0): self.value = value self.left = None self.right = None def build_tree(nodes): if not nodes: return None tree_nodes = {} for value, left, right in nodes: if value not in tree_nodes: tree_nodes[value] = TreeNode(value) node = tree_nodes[value] if left != -1: if left not in tree_nodes: tree_nodes[left] = TreeNode(left) node.left = tree_nodes[left] if right != -1: if right not in tree_nodes: tree_nodes[right] = TreeNode(right) node.right = tree_nodes[right] return tree_nodes[nodes[0][0]] if nodes else None def longest_increasing_path(root): def dfs(node, parent_value): if not node: return 0 left_length = dfs(node.left, node.value) right_length = dfs(node.right, node.value) if node.value <= parent_value: return 0 else: return max(left_length, right_length) + 1 return dfs(root, float(\'-inf\')) def longest_path_in_binary_tree(n, nodes): root = build_tree(nodes) return longest_increasing_path(root)"},{"question":"You have been given the task to develop a new software system for a retail store that helps manage inventory levels. Part of this system requires a program to handle multiple queries about the inventory status. The store tracks their items using a unique item ID and stores the quantity available for each item. Your task is to write a function that processes two types of queries: 1. Add a specified quantity of an item to the inventory. 2. Find out if a specified quantity of an item is currently available in the inventory. Write a function that receives a list of queries and processes each one sequentially. Each query is represented as a list where the first element indicates the type of the query. There are three possible types of queries: - If the type is 1, it is an add query, and the next two elements are the item ID (an integer) and the quantity (an integer) to add, respectively. - If the type is 2, it is a check query, and the next two elements are the item ID (an integer) and the quantity (an integer) to check, respectively. - If the type is 3, it is a remove query, and the next two elements are the item ID (an integer) and the quantity (an integer) to remove, respectively. The function should return a list of boolean values corresponding to each check query, where True indicates that the specified quantity is available, and False indicates it is not. The list should be returned in the order the check queries are provided. # Input - An integer `n` (1 ≤ n ≤ 10^5), the number of queries. - An n x 3 list where each element is a list of three integers representing a query: - The first integer indicates the query type (1, 2, or 3). - The second integer indicates the item ID (1 ≤ item ID ≤ 10^9). - The third integer indicates the quantity (1 ≤ quantity ≤ 10^9). # Output - A list of boolean values (`True` or `False`) corresponding to each check query. # Example ```python # Input queries = [ [1, 101, 5], # Add 5 of item 101 [1, 102, 10], # Add 10 of item 102 [2, 101, 3], # Check if 3 of item 101 are available [2, 102, 12], # Check if 12 of item 102 are available [3, 101, 2], # Remove 2 of item 101 [2, 101, 2], # Check if 2 of item 101 are available ] # Expected Output [True, False, True] # Explanation # After the first query, 5 of item 101 are added. # After the second query, 10 of item 102 are added. # The third query checks if 3 of item 101 are available (True). # The fourth query checks if 12 of item 102 are available (False). # The fifth query removes 2 of item 101, leaving 3. # The sixth query checks if 2 of item 101 are available (True). ``` # Constraints - The items and quantities for each query are always valid integers. - The item ID and quantity will not be negative. Define your function as follows: ```python def inventory_queries(n, queries): pass ```","solution":"def inventory_queries(n, queries): inventory = {} results = [] for query in queries: query_type = query[0] item_id = query[1] quantity = query[2] if query_type == 1: # Add quantity to item_id if item_id in inventory: inventory[item_id] += quantity else: inventory[item_id] = quantity elif query_type == 2: # Check if quantity of item_id is available if item_id in inventory and inventory[item_id] >= quantity: results.append(True) else: results.append(False) elif query_type == 3: # Remove quantity from item_id if item_id in inventory: inventory[item_id] = max(0, inventory[item_id] - quantity) return results"},{"question":"You are given an integer array nums. You can perform an operation on it as many times as you want: * Choose any two adjacent elements nums[i] and nums[i+1] (1 ≤ i < n) such that nums[i] > nums[i+1], and swap them. What is the lexicographically smallest array you can obtain using the given operation? Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array nums. The second line contains n space-separated integers nums_1, nums_2, …, nums_n (1 ≤ nums_i ≤ 10^9) — the elements of the array nums. Output The only line contains n space-separated integers denoting the lexicographically smallest array you can obtain. Examples Input 5 4 5 3 2 1 Output 1 2 3 4 5 Input 3 3 2 1 Output 1 2 3 Note In both examples, the array can be sorted to achieve the lexicographically smallest order since we can always swap adjacent elements that are out of order.","solution":"def lexicographically_smallest_array(nums): Returns the lexicographically smallest array that can be obtained by repeatedly swapping adjacent elements that are out of order. :param nums: List[int] - the input array :return: List[int] - the lexicographically smallest array return sorted(nums)"},{"question":"Given an array of integers, your task is to rearrange the elements in such a way that all negative numbers appear before all the positive numbers. The order of elements within each group (negative and positive) does not matter. You should achieve this rearrangement in O(n) time complexity and O(1) additional space complexity. Input The first line of input contains an integer T, representing the number of test cases. The first line of each test case contains an integer n, the size of the array. The second line contains n space-separated integers representing the elements of the array. Output For each test case, output the rearranged array such that all negative numbers appear before all positive numbers. Each test case\'s output should be on a new line. Example Input: 2 8 1 -3 5 -2 -7 3 6 -4 5 4 -1 0 -2 2 Output: -3 -2 -7 -4 1 5 3 6 -1 -2 0 4 2 Note: - You can assume that the array might contain zeros, and they can be treated as positive numbers. - The elements within each group (negative and positive) do not need to retain their original relative order.","solution":"def rearrange_negatives_positives(arr): Rearranges an array so that all negative numbers appear before all positive numbers. Uses the partitioning approach with two pointers to achieve O(n) time complexity and O(1) space complexity. left = 0 right = len(arr) - 1 while left <= right: if arr[left] < 0: left += 1 elif arr[right] >= 0: right -= 1 else: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr def solve_cases(test_cases): results = [] for case in test_cases: n, arr = case rearranged = rearrange_negatives_positives(arr) results.append(rearranged) return results # Example usage: # test_cases = [(8, [1, -3, 5, -2, -7, 3, 6, -4]), (5, [4, -1, 0, -2, 2])] # print(solve_cases(test_cases)) # Expected Output: [[-3, -2, -7, -4, 1, 5, 3, 6], [-1, -2, 0, 4, 2]]"},{"question":"Ashok loves playing with strings and recently, he discovered an interesting challenge. He has a string `s` consisting of lowercase letters and he needs to answer `q` queries. Each query is in the form of two integers `l` and `r` (1-based index), and the task is to find the lexicographically smallest substring that can be formed from the substring of `s` from `l` to `r` (inclusive). A lexicographically smaller string is one that would appear earlier in a dictionary order. You are required to help Ashok by writing a program to solve this challenge. Input First line of input contains a string `s` (1 ≤ |s| ≤ 100,000) — the original string. Next line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. Each of the following `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ |s|) — representing the range of substring. Output For each query, output the lexicographically smallest substring that can be formed from the substring of `s` from `l` to `r`. Example Input abracadabra 3 1 3 4 7 2 10 Output a a a Input banana 2 1 6 2 4 Output a a Note In the first example, the string is `abracadabra` and for the first query (1, 3), the substring is `abr`, and the lexicographically smallest string possible from `abr` is `a`. For the second query (4, 7), the substring is `acad`, and again the smallest string possible is `a`. For the third query (2, 10), the substring is `bracadabr` and the smallest string possible is `a`. In the second example, the string is `banana` and for both queries (1, 6 and 2, 4), the substring is `banana` and `ana` respectively and the smallest string possible from both is `a`.","solution":"def smallest_substring(s, queries): For each query, finds the lexicographically smallest character in the corresponding substring. Args: s (str): The original string. queries (list of tuples): List of tuples where each tuple is (l, r) representing a range. Returns: List of lexicographically smallest characters for each query. results = [] for l, r in queries: substring = s[l-1:r] results.append(min(substring)) return results"},{"question":"In Byteland, the King\'s castle is hosting a royal event and there is a special magical podium for the event. The podium has a special property: it can show different colors based on the arrangement of magical stones placed in it. There are N magical stones, each stone is unique and has a specific color. The King wants to know how many different color arrangements are possible with these N stones. However, due to the magical nature of the stones, the calculation can get quite complex and the King wants the result modulo 1000000007 (10^9 + 7). As the royal programmer, you have to help the King figure out the total number of distinct arrangements (permutations) of the N stones. Input The first line of the input file contains an integer T, denoting the number of test cases. The next T lines contain a single integer N each, indicating the number of magical stones. Output For each test case, output an integer, denoting the number of distinct permutations of the N stones, modulo 1000000007. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 Example Input: 2 3 4 Output: 6 24","solution":"MOD = 1000000007 def factorial_mod(n, mod): fact = 1 for i in range(2, n + 1): fact = (fact * i) % mod return fact def count_arrangements(cases): results = [] for n in cases: results.append(factorial_mod(n, MOD)) return results # Reading input from a hypothetical input function for demonstration purposes def process_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) cases = [int(data[i]) for i in range(1, T + 1)] return T, cases # Example usage function def main(): T, cases = process_input() results = count_arrangements(cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Petya loves playing with strings and recently learned about palindromes. He wants to create the smallest possible palindrome from a given string by rearranging its characters. If multiple solutions exist, he wants the lexicographically smallest one. Your task is to help Petya by writing a program that rearranges the characters of a given string to form the smallest possible palindrome. A palindrome is a string that reads the same forward and backward. Input The first and only line contains a string s (1 ≤ |s| ≤ 1000) — the given string consisting of lowercase English letters. Output If it is possible to rearrange the string to form a palindrome, print the smallest possible palindrome. Otherwise, print \\"NO\\" (without quotes). Examples Input aabb Output abba Input abc Output NO","solution":"def smallest_palindrome(s: str) -> str: from collections import Counter # Count occurrences of each character: count = Counter(s) # Check for characters with odd count: odd_count_chars = [char for char, cnt in count.items() if cnt % 2 != 0] # If there is more than one character with an odd count, palindrome is not possible: if len(odd_count_chars) > 1: return \\"NO\\" # Characters to form the first half of the palindrome: first_half = [] middle_char = \\"\\" for char in sorted(count.keys()): # Sort characters to ensure lexicographically smallest result cnt = count[char] if cnt % 2 != 0: middle_char = char first_half.append(char * (cnt // 2)) # Form the smallest possible palindrome: first_half_str = \'\'.join(first_half) second_half_str = first_half_str[::-1] palindrome = first_half_str + middle_char + second_half_str return palindrome"},{"question":"Anna is an avid book collector and wants to organize her collection categorically. She has n books with various page counts and wants to categorize them into different series based on page count ranges. Each series will have a lower and upper page limit, and a book can only belong to one series if its page count fits within those limits. Anna needs to find out the maximum number of series she can form given her collection. To form a valid series with at least one book, Anna must ensure that no book in the series has a page count less than the lower limit or greater than the upper limit of that series. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of books. The second line contains n space-separated integers where the i-th integer represents the number of pages in the i-th book (1 ≤ page ≤ 1000). Output Print the single number — the maximum number of series Anna can form from her collection. Examples Input 6 120 250 300 400 450 500 Output 3 Input 5 100 200 300 400 500 Output 5 Input 4 110 210 310 410 Output 4 Note: Each book can be part of only one series.","solution":"def max_series(n, pages): Returns the maximum number of series that can be formed from the given books. Each series is defined by a unique page count. :param n: The number of books. :param pages: A list of integers representing the number of pages in each book. :return: The maximum number of series. page_set = set(pages) return len(page_set)"},{"question":"Harvard University is organizing an alumni meeting where the alumni get to meet their old batchmates and friends. Alumni can form groups and each group will be provided a table. As an organizer, you need to split alumni into the minimum number of groups such that in each group: 1. There is an even number of members. 2. All members in the group have unique names (case-sensitive). You are given a list of alumni names. Determine the minimum number of groups that can be formed following the above rules, or print \\"Impossible\\" if it\'s not possible to form such groups. Input In the only line of input, a single string S of lowercase and uppercase English letters separated by commas represents the alumni names (each name has a length between 1 and 20, 2 ≤ |S| ≤ 2000). Output Output the minimum number of groups, or \\"Impossible\\" if such grouping is not possible. Examples Input Alice,Bob,Charlie,David,Eve,Frank,Grace,Hank Output 2 Input Alice,Bob,Alice Output Impossible Note In the first sample case, one possible grouping could be: - Group 1: Alice, Bob, Charlie, David - Group 2: Eve, Frank, Grace, Hank Both groups contain an even number of unique members. In the second sample case, it is impossible to group the alumni such that all names in each group are unique.","solution":"def minimum_groups(S): Determine the minimum number of groups with even members and all members have unique names. Parameters: S (str): A string containing names separated by commas. Returns: int: Minimum number of groups, or \\"Impossible\\" if not possible. names = S.split(\\",\\") unique_names = set(names) # If there are duplicates in names, it\'s impossible to form the groups if len(names) != len(unique_names): return \\"Impossible\\" # Number of unique names n = len(unique_names) # If the count of unique names is odd, it\'s impossible to form groups with even members. if n % 2 != 0: return \\"Impossible\\" # The minimum number of groups with even members return n // 2"},{"question":"Alex is working on a video game that involves launching rockets from several launchpads. Each launchpad has a certain number of rockets ready to be launched: there are pi rockets at the i-th launchpad. Every time a rocket is launched from a launchpad, an extra launch sequence time delay is introduced due to safety protocols, and this affects the overall launch schedule. To optimize the launch schedule, Alex wants to minimize the total delay by redistributing rockets so that the number of rockets launched from each launchpad is as even as possible. This means making sure the maximum difference between the number of rockets at any two launchpads is as small as possible. Alex can transfer exactly one rocket from any one launchpad to any other launchpad in one second. He wants to know the minimum number of seconds needed to achieve this balanced state. Input The first line contains a positive integer n (1 ≤ n ≤ 105) — the number of launchpads. The second line contains the sequence of non-negative integers p1, p2, ..., pn (0 ≤ pi ≤ 2·104), where pi is the number of rockets at the i-th launchpad. Output Print the minimum number of seconds required to balance the rockets among the launchpads. Examples Input 3 4 7 3 Output 2 Input 5 12 12 9 15 11 Output 3 Input 4 6 6 6 6 Output 0 Note In the first example, two seconds are needed. A possible sequence of rocket transfers is: 1. Transfer one rocket from the second launchpad to the third (the sequence p becomes: 4 6 4). 2. Transfer one rocket from the second launchpad to the first (the sequence p becomes: 5 5 4). In the second example, three seconds are needed. A possible sequence of rocket transfers is: 1. Transfer one rocket from the fourth launchpad to the second (the sequence p becomes: 12 12 10 14 11). 2. Transfer one rocket from the fourth launchpad to the third (the sequence p becomes: 12 12 11 13 11). 3. Transfer one rocket from the fourth launchpad to the first (the sequence p becomes: 13 12 11 12 11). In the third example, the rockets are already perfectly balanced.","solution":"def minimum_seconds_to_balance_rockets(n, rockets): total_rockets = sum(rockets) average = total_rockets // n remainder = total_rockets % n rockets.sort() balance_seconds = 0 i = 0 while rockets[i] < average and i < n: if remainder > 0: balance_seconds += average + 1 - rockets[i] remainder -= 1 else: balance_seconds += average - rockets[i] rockets[i] = average if remainder == 0 else average + 1 i += 1 return balance_seconds"},{"question":"Given an array of positive integers `arr` and an integer `k`, you need to split the array into exactly `k` non-empty subarrays such that the largest sum among these subarrays is minimized. Write a function to determine this minimum possible largest sum. # Input - An integer `n` (1 ≤ n ≤ 10^4) — the size of the array. - An array `arr` of `n` positive integers, where each integer is between 1 and 10^9 inclusive. - An integer `k` (1 ≤ k ≤ n). # Output Print the minimum possible largest sum of the k subarrays. # Examples Example 1 **Input:** ``` 7 7 2 5 10 8 2 ``` **Output:** ``` 18 ``` **Explanation:** Split the array into `[7, 2, 5]` and `[10, 8]`. The largest sum among these subarrays is `15`. It is impossible to split the array in a way that the largest sum is less than `18`. Example 2 **Input:** ``` 5 1 2 3 4 5 2 ``` **Output:** ``` 9 ``` **Explanation:** Split the array into `[1, 2, 3]` and `[4, 5]`. The largest sum among these subarrays is `9`. # Note You should find an efficient way to solve this problem. Consider using binary search combined with a greedy algorithm or dynamic programming approach.","solution":"def splitArray(arr, k): def can_split(max_sum): current_sum = 0 splits = 1 for num in arr: if current_sum + num > max_sum: splits += 1 current_sum = num if splits > k: return False else: current_sum += num return True left, right = max(arr), sum(arr) while left < right: mid = (left + right) // 2 if can_split(mid): right = mid else: left = mid + 1 return left"},{"question":"You are tasked with creating a simplified movie rating system. The system maintains a collection of movies, where each movie has a name and a rating. This system supports adding movies, updating movie ratings, and querying the highest rated movie available. Each movie is uniquely identified by its name, which consists of lowercase Latin letters only. The rating of a movie is a non-negative integer. The following operations are supported: * add~m~r — add a movie with name m and rating r to the database. If the movie already exists, ignore this operation. * update~m~r — update the rating of the movie with name m to r. If the movie does not exist, ignore this operation. * query — show the name of the movie with the highest rating. If there are multiple movies with the highest rating, show the lexicographically smallest name. Input The first line contains an integer q (1 ≤ q ≤ 3 ⋅ 10^5) — the number of operations. Each of the next q lines contains an operation of one of the given types: * add~m~r (1 ≤ |m| ≤ 100, 0 ≤ r ≤ 10^9) — add a movie with name m and rating r. If the movie already exists, ignore this operation. * update~m~r (1 ≤ |m| ≤ 100, 0 ≤ r ≤ 10^9) — update the rating of the movie with name m to r. If the movie does not exist, ignore this operation. * query — output the name of the highest rated movie. If multiple movies have the same highest rating, output the lexicographically smallest name. It is guaranteed that there will be at least one query operation. Output For each query operation, print the name of the highest rated movie, or the lexicographically smallest name if there are multiple movies with the same highest rating. Examples Input 8 add inception 9 add avengers 8 query update inception 7 query add batman 9 query update avengers 10 query Output inception inception batman avengers","solution":"class MovieRatingSystem: def __init__(self): self.movies = {} def add(self, name, rating): if name not in self.movies: self.movies[name] = rating def update(self, name, rating): if name in self.movies: self.movies[name] = rating def query(self): max_rating = max(self.movies.values()) highest_rated_movies = [name for name, rating in self.movies.items() if rating == max_rating] return min(highest_rated_movies) def process_commands(commands): system = MovieRatingSystem() output = [] for command in commands: parts = command.split() operation = parts[0] if operation == \\"add\\": _, name, rating = parts system.add(name, int(rating)) elif operation == \\"update\\": _, name, rating = parts system.update(name, int(rating)) elif operation == \\"query\\": output.append(system.query()) return output"},{"question":"In a small town, there are n roads, each connecting a pair of intersections. The town officials are planning a road maintenance project that involves closing some of the roads periodically. They need to minimize disruption, ensuring that every pair of intersections remains connected as long as possible before any closures begin. Your task is to determine the minimum set of roads that need to remain open to ensure that the town remains navigable (i.e., all intersections are reachable from each other) throughout the maintenance project. Input The first line contains two integers n (1 ≤ n ≤ 2 ⋅ 10^5) and m (1 ≤ m ≤ 2 ⋅ 10^5) — the number of intersections and roads, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a road connecting intersections u and v. Output Print the minimum number of roads that need to remain open to keep the town fully connected. Examples Input 5 5 1 2 1 3 3 4 2 4 4 5 Output 4 Input 4 4 1 2 1 3 1 4 2 3 Output 3 Note In the first example, keeping any 4 roads out of the 5 ensures that the town remains connected. For example, roads (1-2), (1-3), (3-4), and (4-5) form a connected town. In the second example, keeping any 3 roads ensures that the town remains connected. For example, roads (1-2), (1-3), and (1-4) form a connected town.","solution":"def minimum_roads_to_keep(town_intersections, town_roads): Determines the minimum number of roads that need to remain open to keep the town fully connected. Parameters: town_intersections (int): The number of intersections in the town. town_roads (list of tuples): Each tuple (u, v) represents a road connecting intersections u and v. Returns: int: The minimum number of roads that need to remain open. # For the town to be fully connected, it\'s necessary to have a spanning tree. # This can be achieved with n - 1 roads, where n is the number of intersections. return town_intersections - 1"},{"question":"In a distant kingdom, there are n magic crystals placed in a straight line. Each crystal has a certain amount of magical energy. A wizard wants to collect all the energy, but she can only collect it in segments because moving between non-adjacent crystals will drain energy. The wizard has a special requirement: each segment she collects energy from must contain exactly k crystals. However, there is a magical barrier that limits the total number of energy units she can collect to a maximum of `max_energy` in one go. The wizard wants to determine the maximum energy she can collect without exceeding `max_energy`. Write a function to help the wizard. Your function should find the maximum sum of energy from any segment containing exactly k consecutive crystals without exceeding `max_energy`. Input - The first line contains three integers n, k, and max_energy (1 ≤ k ≤ n ≤ 100, 1 ≤ max_energy ≤ 10000). - The second line contains n integers, where each integer represents the energy in a crystal, and the magnitude of each integer does not exceed 1000. Output Output a single integer, the maximum energy the wizard can collect from any segment containing k consecutive crystals without exceeding max_energy. If no valid segment exists, output 0. Examples Input 5 3 15 5 2 8 10 1 Output 15 Input 4 2 6 5 7 3 2 Output 6","solution":"def max_energy_segment(n, k, max_energy, crystals): This function finds the maximum sum of energy from any segment containing exactly k consecutive crystals without exceeding max_energy. Parameters: n (int): The number of crystals. k (int): The number of consecutive crystals in a segment. max_energy (int): The maximum energy that can be collected in one go. crystals (list): List of integers representing the energy in each crystal. Returns: int: The maximum energy collected from any valid segment or 0 if no valid segment exists. max_collected = 0 for i in range(n - k + 1): current_sum = sum(crystals[i:i + k]) if current_sum <= max_energy: max_collected = max(max_collected, current_sum) return max_collected"},{"question":"Write a function that calculates the Greatest Common Divisor (GCD) of an array of numbers provided by the user. The GCD of a set of numbers is the largest positive integer that divides all the numbers in the set without leaving a remainder. Implement a function `find_gcd(arr)` that takes an array `arr` of integers and returns the GCD of the array. INPUT: The input consists of two lines. The first line contains an integer `N` (1 ≤ N ≤ 100) indicating the number of elements in the array. The second line contains `N` integers separated by spaces representing the elements of the array (1 ≤ element ≤ 10^6). OUTPUT: Return a single integer which is the GCD of the array. EXAMPLES: 1. For the input array: ``` 3 2 4 6 ``` The output should be: ``` 2 ``` 2. For the input array: ``` 4 3 9 27 81 ``` The output should be: ``` 3 ``` 3. For the input array: ``` 2 17 31 ``` The output should be: ``` 1 ``` NOTE: - You can use the Euclidean algorithm to compute the GCD of two numbers. - Extend the method to find the GCD of an array by iteratively computing the GCD of pairs of numbers.","solution":"from math import gcd from functools import reduce def find_gcd(arr): Returns the GCD of an array of integers. return reduce(gcd, arr)"},{"question":"Emily is exploring string manipulation and came across the concept of *reversing words in a sentence*. She wants to write a program that will take a sentence, reverse the order of words, and then reverse each word individually. For example, if the initial sentence is \\"Hello World\\", reversing the order of words gives \\"World Hello\\", and then reversing each word individually gives \\"dlroW olleH\\". Input: The first line contains an integer t, the number of test cases. Each of the next t lines contains a sentence consisting of lowercase English letters and spaces. Output: For each test case, print the sentence after reversing the order of words and reversing each word individually. Constraints: 1 ≤ t ≤ 1000 1 ≤ Length of each sentence ≤ 1000 Note: There will be no leading or trailing spaces in the input sentences, and words will be separated by a single space. Example Input: 3 hello world programming is fun data structures and algorithms Example Output: dlrow olleh nuf si gnimmargorp smhtirogla dna serutcurts atad Author: Emily Davis","solution":"def reverse_words_and_sentence(sentence: str) -> str: This function takes a sentence, reverses the order of words, and then reverses each word individually. :param sentence: str: The input sentence where words are separated by a single space. :return: str: The modified sentence words = sentence.split() reversed_word_order = words[::-1] reversed_words = [word[::-1] for word in reversed_word_order] return \' \'.join(reversed_words) def process_sentences(t: int, sentences: list) -> list: Processes multiple sentences and applies the reverse_words_and_sentence function to each sentence. :param t: int: Number of test cases (sentences) :param sentences: list: List of sentences to process :return: list: List of processed sentences return [reverse_words_and_sentence(sentence) for sentence in sentences]"},{"question":"You are given a sequence of ( N ) integers as an array ( A ). Perform exactly ( K ) operations on the array, where each operation consists of the following: 1. Choose any subarray (a contiguous part of the array). 2. Reverse the chosen subarray. After performing exactly ( K ) operations, determine if it\'s possible to make the array sorted in non-descending order. Input: The first line contains two integers ( N ) and ( K ) (1 leq K leq 10^5). The second line contains ( N ) integers ( A_1, A_2, ..., A_N ) (-10^9 leq A_i leq 10^9). Output: If it\'s possible to make the array sorted in non-descending order after exactly ( K ) operations, print \\"YES\\". Otherwise, print \\"NO\\". Examples: Input: 5 1 4 3 2 1 5 Output: NO Input: 4 2 4 2 3 1 Output: YES Note: In the first example, it is not possible to sort the array with exactly one reverse operation. In the second example, reversing the subarray [4, 2] and then [3, 1] will make the array sorted.","solution":"def is_possible_to_sort(N, K, A): if K == 0: return \\"YES\\" if A == sorted(A) else \\"NO\\" if sorted(A) == A: return \\"YES\\" if K == 1: return \\"NO\\" # For K >= 2, we can essentially swap any two elements by choosing specific subarrays. return \\"YES\\""},{"question":"You are developing a software system to help manage a company\'s meeting rooms, which involves scheduling meetings. Each room can only host one meeting at a time. Your system needs to tell whether a new meeting request can be accommodated based on the current schedule. Meetings are represented by their start and end times. For simplicity, assume that meetings start and end at whole hours, and the time is represented as an integer number of hours past midnight. For example, a meeting from 1 to 3 means it starts at 1 hour past midnight and ends at 3 hours past midnight. Note that a meeting ending at time `t` means the room becomes free at time `t` and can be scheduled for a new meeting starting at time `t`. Input The first line contains an integer `n` (1 ≤ n ≤ 100), the number of existing meetings scheduled in the room. Each of the next `n` lines contains two integers, `start_i` and `end_i` (0 ≤ start_i < end_i ≤ 24), representing the start and end times of an existing meeting. The last line contains two integers, `new_start` and `new_end` (0 ≤ new_start < new_end ≤ 24), representing the start and end times of the new meeting request. Output Print \\"YES\\" if the room can accommodate the new meeting request without any schedule conflicts; otherwise, print \\"NO\\". Examples Input 3 1 3 4 6 7 10 5 8 Output NO Input 2 2 4 6 8 4 6 Output YES Input 4 1 2 3 5 5 6 8 10 6 8 Output YES Note In the first example, the new meeting from 5 to 8 conflicts with the existing meeting from 4 to 6 and from 7 to 10, so the output is \\"NO\\". In the second example, the new meeting from 4 to 6 does not conflict with any existing meeting, so the output is \\"YES\\". In the third example, the new meeting from 6 to 8 does not conflict with any existing meeting, so the output is \\"YES\\".","solution":"def can_accommodate_meeting(n, meetings, new_meeting): new_start, new_end = new_meeting for start_i, end_i in meetings: # Check if there is any overlap if not (new_end <= start_i or new_start >= end_i): return \\"NO\\" return \\"YES\\""},{"question":"You are given a sequence of n integers a_1, a_2, ..., a_n. You need to find the number of contiguous subarrays where the sum of the elements in the subarray is divisible by k. Write a function `count_divisible_subarrays` that takes the following inputs: - n (1 ≤ n ≤ 10^5), the length of the sequence - k (1 ≤ k ≤ 10^3), the divisor - a (−10^9 ≤ a_i ≤ 10^9), the sequence of integers The function should return an integer representing the number of such subarrays. Function Signature: ```python def count_divisible_subarrays(n: int, k: int, a: List[int]) -> int: ``` Constraints: - All values in input are integers. - 1 ≤ n ≤ 10^5 - 1 ≤ k ≤ 10^3 - −10^9 ≤ a_i ≤ 10^9 Input Input is given from Standard Input in the following format: ``` n k a_1 a_2 ... a_n ``` Output Print the number of contiguous subarrays whose sum is divisible by k. Examples Input ``` 5 2 1 2 3 4 5 ``` Output ``` 6 ``` Explanation: The subarrays are [1, 2, 3, 4, 5], [2, 3, 4, 5], [1, 2, 3, 4], [2, 3], [4], [2, 4] (all subarrays with sum divisible by 2). Input ``` 6 3 3 3 3 3 3 3 ``` Output ``` 21 ``` Explanation: Every subarray of this sequence has a sum that is divisible by 3.","solution":"from typing import List def count_divisible_subarrays(n: int, k: int, a: List[int]) -> int: Count the number of contiguous subarrays where the sum of the elements is divisible by k. prefix_remainders = {0: 1} current_sum = 0 count = 0 for num in a: current_sum += num remainder = current_sum % k # Handle negative remainders remainder = (remainder + k) % k if remainder in prefix_remainders: count += prefix_remainders[remainder] prefix_remainders[remainder] += 1 else: prefix_remainders[remainder] = 1 return count"},{"question":"Given a matrix M of size n times m filled with integers, perform a sequence of the following operations: * updateCell(i, j, x): update the cell at row i and column j to contain x * rowSum(i): print the sum of all the elements in the i-th row * colSum(j): print the sum of all the elements in the j-th column Initially, all elements of M are zero. Constraints * 1 leq n, m leq 1,000 * 1 leq q leq 200,000 * 0 leq i < n * 0 leq j < m * -1,000 leq x leq 1,000 Input The input is given in the following format: n m q query_1 query_2 : query_q Each query query_i is given by: 0 i j x or 1 i or 2 j where the first digits 0, 1, and 2 represent updateCell, rowSum, and colSum operations respectively. Output For each rowSum and colSum, print the corresponding sum in a line. Example Input 3 3 6 0 1 1 5 0 2 2 3 1 1 2 2 0 1 2 7 2 2 Output 5 3 10","solution":"class MatrixOps: def __init__(self, n, m): self.n = n self.m = m self.matrix = [[0] * m for _ in range(n)] self.row_sums = [0] * n self.col_sums = [0] * m def updateCell(self, i, j, x): current_value = self.matrix[i][j] self.matrix[i][j] = x self.row_sums[i] += x - current_value self.col_sums[j] += x - current_value def rowSum(self, i): return self.row_sums[i] def colSum(self, j): return self.col_sums[j] def process_queries(n, m, q, queries): matrix_ops = MatrixOps(n, m) results = [] for query in queries: split_query = list(map(int, query.split())) if split_query[0] == 0: # updateCell _, i, j, x = split_query matrix_ops.updateCell(i, j, x) elif split_query[0] == 1: # rowSum _, i = split_query results.append(matrix_ops.rowSum(i)) elif split_query[0] == 2: # colSum _, j = split_query results.append(matrix_ops.colSum(j)) return results"},{"question":"You are given a binary tree with N nodes. Each node has a unique value between 1 and N. The goal is to find the maximum and minimum values in the subtree of each node in the tree. A subtree of a node x in a binary tree is defined as a tree formed by taking node x and all of its descendants. Write a function `findSubtreeMinMax` that takes the root of the binary tree and returns a dictionary where each key is a node\'s value and the corresponding value is a tuple (min, max) representing the minimum and maximum values in the subtree of that node. # Input: - The first line contains an integer N (1 ≤ N ≤ 10^5), the number of nodes in the tree. - The following N lines each contain three integers u, lv, rv: - `u` is the value of the current node. - `lv` is the value of the left child of node u (if no left child exists, lv will be -1). - `rv` is the value of the right child of node u (if no right child exists, rv will be -1). Values in the input represent a preorder traversal of the tree. # Output: - For each node in the pre-order traversal of the tree (i.e., as they appear in the input), print the node\'s value, followed by the minimum and maximum values in its subtree. # Example: Input: ``` 5 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 -1 ``` Output: ``` 1 (1, 5) 2 (2, 4) 4 (4, 4) 3 (3, 5) 5 (5, 5) ``` # Constraints: - The binary tree is given as a pre-order traversal. - Nodes are numbered from 1 to N. - Each node value is unique and appears exactly once in the tree.","solution":"class Node: def __init__(self, val): self.val = val self.left = None self.right = None def build_tree(preorder): nodes = {} for u, lv, rv in preorder: if u not in nodes: nodes[u] = Node(u) node = nodes[u] if lv != -1: if lv not in nodes: nodes[lv] = Node(lv) node.left = nodes[lv] if rv != -1: if rv not in nodes: nodes[rv] = Node(rv) node.right = nodes[rv] return nodes[preorder[0][0]] def findSubtreeMinMax(root): def dfs(node): if not node: return float(\'inf\'), float(\'-inf\') left_min, left_max = dfs(node.left) right_min, right_max = dfs(node.right) subtree_min = min(node.val, left_min, right_min) subtree_max = max(node.val, left_max, right_max) min_max[node.val] = (subtree_min, subtree_max) return subtree_min, subtree_max min_max = {} dfs(root) return min_max def convert_output(dic): output = [] for key in sorted(dic.keys()): output.append(f\\"{key} {dic[key]}\\") return \\"n\\".join(output) def process_input(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0]) preorder = [] for i in range(1, n + 1): u, lv, rv = map(int, lines[i].split()) preorder.append((u, lv, rv)) return preorder input_data = 5 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 -1 preorder = process_input(input_data) root = build_tree(preorder) result = findSubtreeMinMax(root) output = convert_output(result) print(output)"},{"question":"Write a function named `unique_elements` that accepts a list of integers as input and returns a new list containing only the unique elements from the original list, preserving the order of their first occurrence. Example Input - [1, 2, 2, 3, 4, 4, 5] Output - [1, 2, 3, 4, 5]","solution":"def unique_elements(lst): Returns a list containing only unique elements from the original list, preserving the order of their first occurrence. seen = set() unique_lst = [] for item in lst: if item not in seen: unique_lst.append(item) seen.add(item) return unique_lst"},{"question":"In a magical kingdom, there are N wizards standing in a circle. Each wizard knows a certain spell power, represented as an integer. Every second, each wizard casts a spell on the wizards standing directly next to them (one on the left and one on the right). The spell cast on a wizard increases their spell power. At a given second, the spell power of wizard i gets increased by the spell powers of their neighbors, i.e., wizard to their left (i-1) and wizard to their right (i+1). Since the wizards stand in a circle, the wizard at the position 1 has the wizard at position N as their left neighbor, and the wizard at position N has the wizard at position 1 as their right neighbor. You are given the initial spell powers of the wizards. Your task is to determine the spell powers of all wizards after T seconds. Input - The first line contains two integers N and T (2 ≤ N ≤ 100000, 1 ≤ T ≤ 100000) — the number of wizards and the number of seconds after which you have to determine the spell powers. - The second line contains N integers p1, p2, ..., pN (1 ≤ pi ≤ 1000000) — the initial spell powers of the wizards in the circle. Output Print N integers, the spell powers of all wizards after T seconds. Example Input 4 1 1 2 3 4 Output 3 4 6 5 Input 5 2 1 2 3 4 5 Output 12 13 16 15 14 Note In the first example: After 1 second: - Wizard 1\'s spell power: 1 (initial) + 2 (neighbor) + 4 (neighbor) = 7 - Wizard 2\'s spell power: 2 (initial) + 1 (neighbor) + 3 (neighbor) = 6 - Wizard 3\'s spell power: 3 (initial) + 2 (neighbor) + 4 (neighbor) = 9 - Wizard 4\'s spell power: 4 (initial) + 1 (neighbor) + 3 (neighbor) = 8 In the second example: After 1 second: - Wizard 1\'s spell power: 1 (initial) + 2 (neighbor) + 5 (neighbor) = 8 - Wizard 2\'s spell power: 2 (initial) + 1 (neighbor) + 3 (neighbor) = 6 - Wizard 3\'s spell power: 3 (initial) + 2 (neighbor) + 4 (neighbor) = 9 - Wizard 4\'s spell power: 4 (initial) + 3 (neighbor) + 5 (neighbor) = 12 - Wizard 5\'s spell power: 5 (initial) + 1 (neighbor) + 4 (neighbor) = 10 After 2 seconds: - Wizard 1\'s spell power: 8 (new) + 6 (neighbor) + 10 (neighbor) = 24 - Wizard 2\'s spell power: 6 (new) + 8 (neighbor) + 9 (neighbor) = 23 - Wizard 3\'s spell power: 9 (new) + 6 (neighbor) + 12 (neighbor) = 27 - Wizard 4\'s spell power: 12 (new) + 9 (neighbor) + 10 (neighbor) = 31 - Wizard 5\'s spell power: 10 (new) + 8 (neighbor) + 12 (neighbor) = 30","solution":"def calculate_spell_powers(N, T, spell_powers): Calculate the spell powers of all wizards after T seconds. Parameters: - N: int, number of wizards - T: int, number of seconds after which to determine spell powers - spell_powers: list of int, initial spell powers of the wizards Returns: - list of int, spell powers of all wizards after T seconds. for _ in range(T): new_spell_powers = [0] * N for i in range(N): left = spell_powers[(i - 1) % N] right = spell_powers[(i + 1) % N] new_spell_powers[i] = spell_powers[i] + left + right spell_powers = new_spell_powers return spell_powers"},{"question":"Problem B: Painting Grid Paths A dedicated artist is working on a grid canvas consisting of cells. The artist starts painting from the top-left corner (1,1) and plans to move to the bottom-right corner (m,n). However, the artist follows a specific set of rules: 1. The artist can move only to the right or down to the adjacent cell. 2. The artist cannot visit the same cell more than once during the path. Given the dimensions of the grid (m x n), you need to determine the total number of unique paths from the top-left corner to the bottom-right corner of the grid. Input The input consists of multiple datasets. The first line of the input contains an integer T (1 ≤ T ≤ 20) denoting the total number of datasets. Each of the next T lines contains two integers m and n (1 ≤ m, n ≤ 12) representing the dimensions of the grid. Output For each dataset, output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. Sample Input 3 2 2 3 2 2 3 Sample Output 2 3 3 Explanation For the first dataset (2,2), the grid is: ``` 1 2 3 4 ``` The two unique paths are: 1 -> 2 -> 4 1 -> 3 -> 4 For the second dataset (3,2), the grid is: ``` 1 2 3 4 5 6 ``` The three unique paths are: 1 -> 2 -> 4 -> 6 1 -> 2 -> 3 -> 5 -> 6 1 -> 2 -> 3 -> 4 -> 6 For the third dataset (2,3), the grid is: ``` 1 2 3 4 5 6 ``` The three unique paths are: 1 -> 2 -> 3 -> 6 1 -> 2 -> 5 -> 6 1 -> 4 -> 5 -> 6 Note - Ensure your solution handles each dataset independently. - Consider the grid as a two-dimensional array of cells.","solution":"def num_unique_paths(m, n): Returns the number of unique paths in an m by n grid starting from the top-left corner moving only to the right or down to the bottom-right corner. # Create a 2D array to store the number of paths up to each cell dp = [[1] * n for _ in range(m)] # Fill the array using dynamic programming for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1] def unique_paths_multiple_datasets(datasets): Processes multiple datasets to find the number of unique paths for each m x n grid. Returns: List of results, one result for each dataset. results = [] for m, n in datasets: results.append(num_unique_paths(m, n)) return results"},{"question":"You are given a sequence of tasks that must be scheduled on a single machine. Each task has a start time, end time, and a profit associated with it. You need to find the maximum profit that can be obtained by scheduling a subset of non-overlapping tasks. A task can only be executed if no other task is running during its start to end time. Your goal is to select a subset of the given tasks such that their total scheduled time does not overlap, and the total profit is maximized. Input - The first line contains an integer `n` representing the number of tasks (1 ≤ n ≤ 10^4). - The next `n` lines each contains three integers, `start`, `end`, and `profit` where: - `1 ≤ start < end ≤ 10^9` - `1 ≤ profit ≤ 10^6` Output - Output a single integer representing the maximum profit obtainable by scheduling non-overlapping tasks. Example Input 4 1 3 500 3 5 300 0 6 600 4 7 200 Output 800 Explanation - The optimal solution is to select the first and second tasks with profits 500 and 300, respectively, giving a total maximum profit of 800. These tasks do not overlap with each other.","solution":"from bisect import bisect_right def max_profit(tasks): Args: tasks (List[Tuple[int, int, int]]): List of tuples where each tuple contains (start, end, profit) Returns: int: Maximum profit obtainable by scheduling non-overlapping tasks. # Sort tasks by end time tasks.sort(key=lambda x: x[1]) # dp[i] to store the maximum profit until the i-th task (1-indexed) dp = [0] * (len(tasks) + 1) # List to store the end times for binary search end_times = [task[1] for task in tasks] for i in range(1, len(tasks) + 1): # Find the index of the last task that doesn\'t conflict with the current task task = tasks[i-1] start, end, profit = task # Binary search to find the maximum index where task end time is <= current task\'s start time index = bisect_right(end_times, start) - 1 # Update dp[i] dp[i] = max(dp[i-1], profit + dp[index + 1]) return dp[len(tasks)] # Wrapper function to handle input and output def max_profit_scheduler(n, task_input): tasks = [tuple(map(int, task.split())) for task in task_input] return max_profit(tasks)"},{"question":"Dima loves symmetry and is fascinated by matrices that exhibit symmetrical properties. He defines a matrix as symmetric if it is equal to its transpose. A transpose of a matrix is obtained by swapping rows with columns. For example, if A is a matrix, then its transpose, denoted by A^T, is defined as A^T[i][j] = A[j][i] for all valid i and j. Given a matrix of size n × n filled with integers, your task is to determine whether the given matrix is symmetric. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the size of the matrix. Each of the next n lines contains n integers separated by spaces — the elements of the matrix. Output Output \\"YES\\" if the matrix is symmetric, otherwise print \\"NO\\". Examples Input 3 1 2 3 2 3 4 3 4 5 Output YES Input 2 1 2 3 4 Output NO","solution":"def is_symmetric(matrix): Determines if the given matrix is symmetric. :param matrix: List of lists, representing an n x n matrix :return: String \\"YES\\" if the matrix is symmetric, otherwise \\"NO\\". n = len(matrix) for i in range(n): for j in range(n): if matrix[i][j] != matrix[j][i]: return \\"NO\\" return \\"YES\\" def process_input(input_string): Processes the multiline input string into a matrix. :param input_string: The input string containing the matrix size and elements :return: A list of lists representing the matrix lines = input_string.strip().split(\'n\') n = int(lines[0]) matrix = [list(map(int, line.split())) for line in lines[1:]] return matrix def main(input_string): matrix = process_input(input_string) return is_symmetric(matrix)"},{"question":"A company wants to organize a coding competition and needs a way to rank participants based on their scores. Given a list of participants and their scores from several coding tasks, write a program to determine the ranking. If two participants have the same score, they should be sorted alphabetically by their names. Constraints * The number of participants will not exceed 1,000. * Each participant\'s score is an integer between 0 and 10,000. * Participants have unique names consisting only of lowercase English letters and are at most 50 characters in length. Input The input is given in the following format. *n* *name1 ; score1* *name2 ; score2* *...* *nameN ; scoreN* *n* represents the number of participants. Each following line contains the name of a participant and their corresponding score separated by a space. Output Print the list of participants in ascending order of their rankings. Each line should contain the participant\'s ranking starting from 1, their name, and their score, separated by spaces. Examples Input 5 alice 2500 bob 3600 eve 3600 charlie 2000 dan 3050 Output 1 bob 3600 2 eve 3600 3 dan 3050 4 alice 2500 5 charlie 2000 Input 3 anna 5000 zoe 5000 lucas 4500 Output 1 anna 5000 2 zoe 5000 3 lucas 4500","solution":"def rank_participants(n, participants): Returns the list of participants ranked based on their scores. If two participants have the same score, they are sorted alphabetically. # Sort participants first by score (descending), then by name (alphabetical) sorted_participants = sorted(participants, key=lambda x: (-x[1], x[0])) # Create the ranking result ranking_result = [] for index, (name, score) in enumerate(sorted_participants): ranking_result.append(f\\"{index + 1} {name} {score}\\") return ranking_result def process_input(data): Process input data and returns list of participants with their scores. data_lines = data.strip().split(\'n\') n = int(data_lines[0].strip()) participants = [] for line in data_lines[1:]: name, score = line.split() participants.append((name, int(score))) return n, participants"},{"question":"Bob and Alice are playing a game with a sequence of numbers. The game consists of n integers arranged in a sequence. Bob and Alice take turns, with Bob going first. In each turn, the player must choose a non-empty subsequence of consecutive numbers from the sequence such that the sum of the chosen subsequence is a prime number. The chosen subsequence is then removed from the sequence, and the remaining parts are concatenated together. The game continues until no more subsequences with a prime sum can be chosen. The player who cannot make a move loses the game. Given the sequence for each game, determine the winner assuming both players play optimally. Input The first line of the input contains a single integer t (1 ≤ t ≤ 50) — the number of games. The description of the games follows. Each description contains two lines: The first line contains a single integer n (2 ≤ n ≤ 50) — the length of the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 50). Output For each game, print on a single line the name of the winner, \\"Bob\\" or \\"Alice\\" (without quotes). Example Input 2 3 1 2 3 4 1 4 6 3 Output Bob Alice Note In the first game, Bob can choose the subsequence [1, 2] which sums to 3, a prime number. After that, the remaining sequence is [3], whose sum is a prime number as well. Bob can choose [3] in his next turn and win the game. Therefore, Bob wins. In the second game, Alice can choose the subsequence [1, 4] which sums to 5, a prime number. The remaining sequence is [6, 3]. Whatever Bob chooses next, Alice will always be able to make another move and win. Therefore, Alice wins.","solution":"def is_prime(num): Checks if the given number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def can_choose_prime_subsequence(sequence): Determines if there\'s any non-empty subsequence with a prime sum. n = len(sequence) # Check all possible subsequences for i in range(n): for j in range(i, n): if is_prime(sum(sequence[i:j+1])): return True return False def game_winner(sequence): Determines the winner of a single game given the sequence. if can_choose_prime_subsequence(sequence): return \\"Bob\\" else: return \\"Alice\\" def main(games): results = [] for n, sequence in games: results.append(game_winner(sequence)) return results"},{"question":"Alex is an avid gardener who loves growing different plants in his garden. Each type of plant has a unique growth pattern. Specifically, each plant can either double its size or stay the same size every month. Alex wants to know if it\'s possible to achieve a certain target size for each of his plants after a number of months. Each plant starts at a specified initial size. Alex can choose to either let the plant double its size or keep it the same size each month. Write a program to help Alex determine if, after a given number of months, he can achieve the target size for each plant starting from their initial sizes. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of different plants in Alex\'s garden. The second line contains n integer numbers s1, s2, ..., sn (1 ≤ si ≤ 1000) — the initial sizes of the plants. The third line contains n integer numbers t1, t2, ..., tn (1 ≤ ti ≤ 1000) — the target sizes Alex wants for the plants. The fourth line contains n integer numbers m1, m2, ..., mn (0 ≤ mi ≤ 20) — the number of months available for each plant to reach its target size. Output Print YES if it\'s possible for each plant to reach its target size after a specified number of months. Otherwise, print NO. Examples Input 3 2 3 4 4 6 16 1 2 3 Output YES Input 3 2 3 4 5 6 16 1 2 3 Output NO","solution":"def can_achieve_target(n, initial_sizes, target_sizes, months): Determine if each plant can achieve its corresponding target size after a given number of months. Parameters: n (int): Number of plants. initial_sizes (list): Initial sizes of the plants. target_sizes (list): Target sizes of the plants. months (list): Number of months available for each plant. Returns: str: \\"YES\\" if each plant can reach its target size in the given months, otherwise \\"NO\\". for i in range(n): initial_size = initial_sizes[i] target_size = target_sizes[i] month = months[i] # Check if we can reach target_size from initial_size within given month by doubling for _ in range(month): if initial_size * 2 <= target_size: initial_size *= 2 if initial_size != target_size: return \\"NO\\" return \\"YES\\""},{"question":"You are responsible for managing a warehouse, and you need to optimize the allocation of products to storage units. Each storage unit has a capacity defined by its maximum weight limit, and each product has a given weight. Your goal is to find out the minimum number of storage units required to store all the products, such that the weight in each storage unit does not exceed its capacity. Input: - The first line contains an integer (N) ((1 leq N leq 1000)), which is the number of products. - The second line contains (N) integers (w_1, w_2, ldots, w_N) ((1 leq w_i leq 10^6)), which represent the weight of each product. - The third line contains an integer (C) ((1 leq C leq 10^6)), which is the capacity of each storage unit. Output: - Print a single integer, the minimum number of storage units required to store all the products. Examples: Input: 4 2 4 8 1 10 Output: 2 Input: 6 5 5 5 5 5 5 10 Output: 3 Input: 5 7 4 5 2 6 9 Output: 3","solution":"from typing import List def min_storage_units(n: int, weights: List[int], capacity: int) -> int: Returns the minimum number of storage units required to store all the products without exceeding the unit capacity. # Sort weights in descending order to prioritize larger products first weights.sort(reverse=True) # Initialize a list to keep track of remaining capacities of storage units storage_units = [] for weight in weights: # Try to find a storage unit that can fit the current product placed = False for i in range(len(storage_units)): if storage_units[i] >= weight: storage_units[i] -= weight placed = True break # If no suitable storage unit is found, allocate a new one if not placed: storage_units.append(capacity - weight) return len(storage_units) # Example usage n = 4 weights = [2, 4, 8, 1] capacity = 10 print(min_storage_units(n, weights, capacity)) # Output: 2"},{"question":"In a city grid composed of `n` intersections and `m` bidirectional roads, each road connects two intersections and has a certain travel time. You are given a list of roads and their respective travel times. You need to choose a subset of roads to construct a new railway system such that: * Each intersection can still be reached from any other intersection. * The sum of the travel times of the selected roads is minimized. Input The first line contains two integers, `n` (1 ≤ n ≤ 1000) and `m` (n - 1 ≤ m ≤ 10^6) — the number of intersections and roads respectively. Each of the next `m` lines contains three integers `u`, `v` (1 ≤ u, v ≤ n) and `w` (1 ≤ w ≤ 10000) representing a road between intersections `u` and `v` with travel time `w`. Output Output a single integer, the minimum sum of travel times needed to construct the railway system. Examples Input ``` 4 5 1 2 10 1 3 6 1 4 5 2 3 4 3 4 7 ``` Output ``` 15 ``` Input ``` 3 3 1 2 1 2 3 2 1 3 3 ``` Output ``` 3 ``` Note In the first example, the selected roads are (1-4 with travel time 5), (2-3 with travel time 4), and (1-3 with travel time 6), for a total travel time of 15. In the second example, the selected roads are (1-2 with travel time 1) and (2-3 with travel time 2), for a total travel time of 3.","solution":"def minimum_railway_cost(n, m, roads): Given the number of intersections (n) and roads (m) along with a list of roads (u, v, w), finds the minimum sum of travel times needed to construct the railway system such that each intersection can still be reached from any other intersection. Uses Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). # Helper function to find the root of a node with path compression def find(parent, i): if parent[i] == i: return i else: root = find(parent, parent[i]) parent[i] = root return root # Helper function to perform union of two sets def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Sort all the edges in non-decreasing order of their weight roads.sort(key=lambda x: x[2]) parent = [] rank = [] # Create parent and rank arrays for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 edges_in_mst = 0 # Number of edges to be taken is equal to V-1 (where V is the number of vertices) for road in roads: u, v, w = road root_u = find(parent, u-1) # Adjusting index for 0-based indexing in arrays root_v = find(parent, v-1) # Adjusting index for 0-based indexing in arrays # If including this edge doesn\'t cause cycle, include it in result if root_u != root_v: mst_cost += w union(parent, rank, root_u, root_v) edges_in_mst += 1 # Stop if we already have n-1 edges in the MST if edges_in_mst == n - 1: break return mst_cost"},{"question":"You are given an array of integers representing heights of people standing in a queue from left to right. A person in the queue can receive visibility points based on the number of taller people or same-height people standing directly in front of them. A person is considered to be \\"directly in front\\" of another person if they are positioned immediately to their left in the queue. The more people that are taller (or of the same height) standing directly in front of them, the more visibility points they receive. Write a program to calculate and return the visibility points for each person in the queue. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of people in the queue. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the people in the queue from left to right. Output Print a single line with n integers — the visibility points for each person from the first to the last person in the queue. The visibility points for each person should be separated by spaces. Examples Input 5 4 3 2 6 1 Output 0 1 2 0 4 Input 4 5 5 5 5 Output 0 1 2 3 Note In the first example, the first person receives 0 visibility points as there are no people in front of them. The second person receives 1 visibility point because there is 1 person (height 4) in front of them who is taller. The third person receives 2 visibility points because there are 2 people (heights 4 and 3) in front of them who are taller or of the same height, and so on. In the second example, every person sees every person in front of them since all the heights are the same. The visibility points thus incrementally increase by 1 for each person in the queue.","solution":"def visibility_points(n, heights): points = [0] * n for i in range(1, n): for j in range(0, i): if heights[j] >= heights[i]: points[i] += 1 return points # Example usage: # print(visibility_points(5, [4, 3, 2, 6, 1])) # Output: [0, 1, 2, 0, 4] # print(visibility_points(4, [5, 5, 5, 5])) # Output: [0, 1, 2, 3]"},{"question":"You are given an array consisting of n distinct integers. A beautiful subarray is a subarray that contains at least two distinct integers such that the sum of the elements of the subarray is even. Determine the number of beautiful subarrays in the given array. Constraints * 2 leq n leq 10^5 * 1 leq a_i leq 10^9 Input The input consists of two lines: - The first line contains an integer n — the number of elements in the array. - The second line contains n distinct integers a[1], a[2], ..., a[n] — the elements of the array. Output Output the number of beautiful subarrays. Examples Input 4 1 2 3 4 Output 4 Input 3 5 8 7 Output 2 Input 2 3 5 Output 0","solution":"def count_beautiful_subarrays(n, arr): This function counts the number of beautiful subarrays in a given array of n distinct integers, where a beautiful subarray contains at least two distinct integers and the sum of the elements is even. Parameters: n (int): Number of elements in the array. arr (list): List of n distinct integers. Returns: int: Number of beautiful subarrays. # Count even and odd numbers in the array even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # Calculating number of beautiful subarrays if odd_count == 0: # All numbers are even, so every pair is beautiful return (n * (n-1)) // 2 elif even_count == 0: # All numbers are odd, no beautiful subarrays possible return 0 else: # If there are both odd and even numbers return even_count * odd_count"},{"question":"The town of Altruia has an ancient grid-based road system that consists of n horizontal and m vertical streets, forming an n x m grid. Each intersection in the grid is marked by (i, j), where 1 ≤ i ≤ n and 1 ≤ j ≤ m. Due to a recent volcanic activity, certain roads became impassable, creating barriers at specific intersections. If the barrier is at (i, j), no vehicle can move through this point. A citizen of Altruia wants to know the number of distinct paths from the north-west corner (1, 1) to the south-east corner (n, m) without crossing any barrier. Being a grid, one can only move right or down at any point in time. Given the dimensions of the grid and the list of barriers, compute the number of distinct paths from (1, 1) to (n, m), modulo 1,000,000,007. Input - The first line contains three integers n, m, and b (1 ≤ n, m ≤ 1000, 0 ≤ b ≤ 100,000) — representing the number of rows, columns, and barriers respectively. - The next b lines each contain two integers xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m) — the row and column index of a barrier. Output - Output the number of distinct paths from (1, 1) to (n, m) modulo 1,000,000,007. Example Input 3 3 2 2 2 3 2 Output 1 Note The only valid path for the provided example is: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) All other paths is blocked by a barrier at some point.","solution":"def number_of_paths(n, m, barriers): MOD = 1_000_000_007 # create a grid to mark barriers grid = [[0] * m for _ in range(n)] for barrier in barriers: x, y = barrier[0] - 1, barrier[1] - 1 grid[x][y] = 1 # create dp table dp = [[0] * m for _ in range(n)] # Initialize dp table dp[0][0] = 1 if grid[0][0] == 0 else 0 for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[n-1][m-1] # Example usage: n, m, b = 3, 3, 2 barriers = [(2, 2), (3, 2)] print(number_of_paths(n, m, barriers)) # Output: 1"},{"question":"Defuse the Bomb You are part of a bomb squad and your task is to defuse bombs placed in a city. Each bomb has a unique number from 1 to N and can be defused by cutting the correct sequence of wires associated with that bomb. Each wire connects two bombs and cutting a wire will defuse the bomb it is associated with. However, defusing one bomb may trigger the detonation of another bomb if not handled correctly. The task is to find the sequence of wire cuts such that all bombs are defused without causing a detonation. You are given a list of bombs and the wires connecting them. Each wire can only be cut once. Input The first line contains two space-separated integers N and M, representing the number of bombs and the number of wires respectively. Each of the following M lines contains three space-separated integers a, b, and t, where a and b are the bombs connected by a wire and t is the time (in seconds) it takes to cut that wire. Output On a single line, output the sequence of wire cuts (in terms of bomb pairs) in the order they should be cut to defuse all the bombs. If there is no possible sequence to defuse all bombs without detonation, output -1. Constraints 1 ≤ N ≤ 500 1 ≤ M ≤ 2000 1 ≤ a, b ≤ N 1 ≤ t ≤ 100 SAMPLE INPUT 4 4 1 2 5 2 3 8 3 4 6 1 3 4 SAMPLE OUTPUT 1 2 1 3 2 3 3 4","solution":"def defuse_bombs(N, M, connections): from collections import defaultdict, deque def topological_sort(N, adjacency_list, in_degree): queue = deque([i for i in range(1, N + 1) if in_degree[i] == 0]) sorted_order = [] while queue: node = queue.popleft() sorted_order.append(node) for neighbor in adjacency_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return sorted_order if len(sorted_order) == N else [] adjacency_list = defaultdict(list) in_degree = [0] * (N + 1) for a, b, t in connections: adjacency_list[a].append(b) in_degree[b] += 1 sorted_bombs = topological_sort(N, adjacency_list, in_degree) if not sorted_bombs: return -1 return [sorted_bombs[i:i+2] for i in range(len(sorted_bombs)-1)] # Example of input N = 4 M = 4 connections = [ (1, 2, 5), (2, 3, 8), (3, 4, 6), (1, 3, 4) ] print(defuse_bombs(N, M, connections))"},{"question":"There is a new restaurant in town, and it follows a unique way of taking orders. The restaurant is known for its efficiency in preparing dishes and serving customers. The restaurant receives an input sequence of customer orders where each character represents a type of dish ordered. The restaurant has some rules for how efficient they can be in preparing and serving orders. If the same type of dish appears consecutively, the restaurant can prepare and serve them together without any additional effort for each consecutive dish beyond the first. However, if the same type of dish appears later in the sequence after one or more different dishes, it requires a new effort to start preparing the same dish again from scratch. Your task is to determine the number of the minimum efforts required to prepare and serve all the dishes according to the sequence of customer orders. Input: - The input starts with an integer `T` (1 ≤ T ≤ 100) indicating the number of test cases. - Each of the next `T` lines contains a string `S` consisting only of lowercase letters (1 ≤ length of S ≤ 1000), where each character represents an order for a type of dish. Output: - For each test case, output the minimum number of efforts required to prepare and serve all the dishes following the above rules. Example: ``` Input: 3 abac fffff aabbcc Output: 4 1 3 ``` Explanation: - For the first test case \\"abac\\": \'a\' (effort 1), \'b\' (effort 2), \'a\' (new effort 3), \'c\' (effort 4) => Total efforts = 4 - For the second test case \\"fffff\\": All \'f\'s appear consecutively => Total efforts = 1 - For the third test case \\"aabbcc\\": \'a\' (effort 1), \'a\' (same effort), \'b\' (new effort 2), \'b\' (same effort), \'c\' (new effort 3), \'c\' (same effort) => Total efforts = 3","solution":"def count_minimum_efforts(orders): Counts the minimum number of efforts needed to prepare and serve the dishes according to the rules. Parameters: orders (List[str]): List of order strings where each string represents a sequence of dishes. Returns: List[int]: List of minimum efforts for each order string. results = [] for order in orders: if not order: results.append(0) continue current_dish = order[0] effort_count = 1 for dish in order[1:]: if dish != current_dish: effort_count += 1 current_dish = dish results.append(effort_count) return results def parse_input(input_content): Parses the input to extract the number of test cases and the individual order strings. Parameters: input_content (str): The input string containing the number of test cases followed by order strings. Returns: Tuple[int, List[str]]: number of test cases and list of order strings. input_lines = input_content.strip().split(\'n\') T = int(input_lines[0]) orders = input_lines[1:T+1] return T, orders"},{"question":"Arman is organizing a programming contest and wants to ensure that the distribution of contestants among the rooms is as fair as possible. There are `n` contestants and `m` rooms. Each contestant has a preferred room they want to be assigned to, but Arman wants to maximize the number of satisfied contestants while also ensuring that each room does not exceed its capacity of `c` contestants. Your task is to help Arman by assigning each contestant to one of their preferred rooms such that the number of satisfied contestants is maximized while respecting the capacity constraint. Input The first line contains three integers `n`, `m`, and `c` (1 ≤ n, m, c ≤ 1000) — the number of contestants, the number of rooms, and the capacity of each room, respectively. The next `n` lines each contain a list of integers representing the preferred rooms of the i-th contestant. Each list starts with an integer `k` (1 ≤ k ≤ m) representing the number of preferred rooms followed by `k` distinct integers (1 ≤ room number ≤ m) representing the room numbers. Output Print a single integer representing the maximum number of satisfied contestants. Then, print `n` lines where the i-th line contains the room number assigned to the i-th contestant, or `-1` if the i-th contestant could not be assigned to any of their preferred rooms. Example Input 5 3 2 2 1 2 2 2 3 3 1 2 3 1 3 1 2 Output 5 1 2 1 3 2 Explanation - The first contestant is assigned to room 1. - The second contestant is assigned to room 2. - The third contestant is assigned to room 1. - The fourth contestant is assigned to room 3. - The fifth contestant is assigned to room 2. Each room respects its capacity constraint and the maximum number of contestants are satisfied.","solution":"def assign_rooms(n, m, c, preferences): Assigns each contestant to one of their preferred rooms such that the number of satisfied contestants is maximized while respecting the capacity constraint. :param n: Number of contestants :param m: Number of rooms :param c: Capacity of each room :param preferences: List of lists, where each sublist contains the preferred rooms of a contestant :return: A tuple containing the maximum number of satisfied contestants and a list of assigned rooms # Room capacities capacities = [0] * (m + 1) # Room numbers are 1-indexed, so we use m+1 # Result array to store assigned room for each contestant assigned_rooms = [-1] * n # Sorting contestants by the number of their preferences (contestants with fewer preferences first) sorted_contestants = sorted( range(n), key=lambda i: len(preferences[i]) ) satisfied_count = 0 for i in sorted_contestants: pref_list = preferences[i] for room in pref_list: if capacities[room] < c: capacities[room] += 1 assigned_rooms[i] = room satisfied_count += 1 break return satisfied_count, assigned_rooms"},{"question":"You are given a list of integers representing the prices of items in a store. You need to determine the minimum amount of money you need to buy exactly `k` items from the store. The store offers a special bulk discount: if you buy exactly `x` items, you get the `x`th item (sorted by price) for free (imagine buying a group of `x+1` items, but only paying for `x`). Write a function `minimum_cost(prices, k)` that takes in a list of integers `prices` (representing the prices of each item in the store) and an integer `k`, and returns the minimum amount of money required to buy exactly `k` items, considering the bulk discount. Input: - The function will be provided a list of prices (not necessarily sorted) and an integer `k`. - 1 ≤ `k` ≤ len(`prices`) ≤ 10^5 - 1 ≤ price of any item ≤ 10^6 Output: - Return the minimum amount of money required to buy exactly `k` items. Example: Input-Output Pairs: ```python assert minimum_cost([4, 3, 2, 7, 8], 3) == 9 # Buy items with prices 2, 3, 4. Free item is the 2nd item with price 2. assert minimum_cost([5, 1, 2, 6, 4], 2) == 3 # Buy items with prices 1, 2. ``` Constraints: - Ensure the function runs efficiently even for the largest inputs, i.e., O(n log n) complexity or better.","solution":"def minimum_cost(prices, k): Returns the minimum amount of money required to buy exactly `k` items considering the bulk discount. # Sort prices in ascending order prices.sort() # We need to pay for the first `k` items in the sorted list all of which have the lowest prices total_cost = sum(prices[:k]) return total_cost"},{"question":"Example Input 2 2 4 1 2 2 1 AB BA Output 30 # New Question Input 4 3 2 3 2 1 5 XZY YZX ZYX ZZY Output 75","solution":"def sum_if_gte_threshold(integers, threshold): Sums the first four integers in the list `integers` and returns the sum if it is greater than or equal to the value of `threshold`. Otherwise, returns 0. Parameters: integers (list): A list of integers. threshold (int): The threshold value. Returns: int: The sum if it\'s >= threshold, otherwise 0. sum_of_integers = sum(integers[:4]) return sum_of_integers if sum_of_integers >= threshold else 0"},{"question":"You are given an array of n integers, where each element represents the height of a building. The goal is to determine the maximum area of a rectangle that can be formed between the buildings, such that the height of the rectangle is determined by the minimum height of the buildings that form the rectangle, and the width is the number of buildings between them (inclusive). Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then, t test cases follow. Before each test case, there is an empty line. Each test case starts with an integer n (1 ≤ n ≤ 10^5) — the number of buildings. The next line contains n integers, each of which is between 1 and 10^9 — the heights of the buildings. Output Output t lines. The i-th line should contain the maximum area of a rectangle for the i-th test case, formed by selecting consecutive buildings from the given array of heights. Example Input 3 7 2 1 5 6 2 3 4 5 1 2 3 4 5 6 6 2 5 4 5 1 6 Output 10 9 12 Note In the first test case, the maximum rectangle area is obtained by selecting the buildings with heights [5, 6], resulting in a rectangle with a height of 5 and a width of 2, thus an area of 5 * 2 = 10. In the second test case, the maximum rectangle area is formed by selecting the last three buildings with heights [3, 4, 5], resulting in a rectangle with a height of 3 and a width of 3, thus an area of 3 * 3 = 9. In the third test case, the maximum rectangle area is formed by selecting the buildings with heights [5, 4, 5], resulting in a rectangle with a height of 4 and a width of 3, thus an area of 4 * 3 = 12.","solution":"def largest_rectangle_area(heights): This function calculates the largest rectangle area in a histogram, where heights represent the histogram\'s bar heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def process_test_cases(t, test_cases): Process multiple test cases. results = [] for heights in test_cases: results.append(largest_rectangle_area(heights)) return results"},{"question":"Byte-Savers is a city where traffic lights change color in a specific pattern. Each light follows this sequence: Green, Yellow, Red, Green, Yellow, Red, and so on. The city\'s engineers want to predict the state of the lights after a certain amount of time has passed since they started. Each color change happens exactly after one minute. Given the initial color of the light and the number of minutes passed, determine the color of the traffic light at the given time. Input First line of Input contains T, the number of test cases. For each test case, there is a separate line containing the initial color of the light and an integer n, the number of minutes passed. Output For each test case, output on a separate line the expected color of the traffic light at the given time. Constraints 1 ≤ T ≤ 100 Initial color ∈ {Green, Yellow, Red} 0 ≤ n ≤ 10^9 Example Input: 3 Green 2 Yellow 5 Red 8 Output: Red Green Yellow","solution":"def traffic_light_color(initial_color, minutes_passed): Determine the color of the traffic light after a certain number of minutes have passed. :param initial_color: str, initial color of the traffic light (\'Green\', \'Yellow\', \'Red\') :param minutes_passed: int, number of minutes passed :return: str, color of the traffic light after the given time # Mapping initial colors to their positions in the sequence. colors = [\'Green\', \'Yellow\', \'Red\'] initial_index = colors.index(initial_color) # Determine new position after n minutes. new_index = (initial_index + minutes_passed) % 3 # Return the color at the new position. return colors[new_index] def solution(test_cases): Process the test cases and return the result colors. :param test_cases: list of tuples, each containing (initial_color, minutes_passed) :return: list of str, colors of the traffic lights for each test case results = [] for initial_color, minutes_passed in test_cases: results.append(traffic_light_color(initial_color, minutes_passed)) return results"},{"question":"You are given a list of integers. Your task is to find the maximum sum of any contiguous subarray of the list. This is a classic algorithm problem known as \\"Maximum Subarray Problem\\". Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of integers in the list. - The second line contains n space-separated integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4), the elements of the list. Output Output a single integer, the maximum sum of any contiguous subarray. Example Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation The contiguous subarray [4, -1, 2, 1] has the maximum sum = 6. Hints - This problem can be solved using the Kadane’s algorithm, which runs in O(n) time complexity.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Problem Statement: Sarah is participating in a programming contest where she needs to help in optimizing search operations on a collection of strings. The strings in the collection are indexed from 1 to N. She has a certain number of queries, each either to add a string to the collection or to check how many strings in the collection start with a given prefix. Given the operations and the initial collection, write a program to process the queries efficiently. Operations: 1. Add a string to the collection. 2. Given a prefix, count the number of strings in the collection that start with that prefix. Input: The first line contains an integer N, the initial number of strings in the collection. The next N lines each contain a string representing the initial collection. The following line contains an integer Q, the number of queries. Each of the next Q lines represents a query and is in one of the following formats: - \\"ADD string\\" — adds the specified string to the collection. - \\"COUNT prefix\\" — counts the number of strings in the collection that start with the specified prefix. Output: For each \\"COUNT prefix\\" query, output a single line containing the number of strings in the collection that start with the given prefix. Constraints: 1 ≤ N, Q ≤ 10000 1 ≤ length of any string or prefix ≤ 50 Example: Input: 3 apple appetizer application 5 ADD apex COUNT app ADD appaloosa COUNT ape COUNT app Output: 3 1 4 Explanation: - The collection initially contains [\\"apple\\", \\"appetizer\\", \\"application\\"]. - After the \\"ADD apex\\" query, the collection becomes [\\"apple\\", \\"appetizer\\", \\"application\\", \\"apex\\"]. - The \\"COUNT app\\" query searches for strings starting with \\"app\\" and finds [\\"apple\\", \\"appetizer\\", \\"application\\"], thus the output is 3. - After the \\"ADD appaloosa\\" query, the collection is [\\"apple\\", \\"appetizer\\", \\"application\\", \\"apex\\", \\"appaloosa\\"]. - The \\"COUNT ape\\" query finds [\\"apex\\"] and thus the output is 1. - Finally, the \\"COUNT app\\" query finds [\\"apple\\", \\"appetizer\\", \\"application\\", \\"appaloosa\\"], thus the output is 4.","solution":"class StringCollection: def __init__(self, initial_strings): self.strings = initial_strings def add(self, string): self.strings.append(string) def count_with_prefix(self, prefix): return sum(s.startswith(prefix) for s in self.strings) def process_queries(n, initial_strings, q, queries): sc = StringCollection(initial_strings) results = [] for query in queries: if query.startswith(\\"ADD\\"): _, string = query.split(maxsplit=1) sc.add(string) elif query.startswith(\\"COUNT\\"): _, prefix = query.split(maxsplit=1) results.append(sc.count_with_prefix(prefix)) return results def main(): import sys input = sys.stdin.read data = input().splitlines() n = int(data[0]) initial_strings = [data[i] for i in range(1, n + 1)] q = int(data[n + 1]) queries = data[n + 2 : n + 2 + q] results = process_queries(n, initial_strings, q, queries) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Molly loves playing word games and challenges her friend Polly to find certain types of words. Polly\'s challenge this time is to find the longest word in a list that has no repeating characters. You need to write a program to help Polly identify the longest such word in the list. In case of a tie (multiple words with the same longest length), return the word that appears earliest in the list. INPUT The first line of input contains the integer N, the number of words. Each of the following N lines contains a single word comprised of lowercase letters of the English alphabet. OUTPUT The first and only line of output should contain the longest word with all unique characters. CONSTRAINTS 1 ≤ N ≤ 100 1 ≤ Length of each word ≤ 20 SAMPLE INPUT 5 apple banana orange grape unique SAMPLE OUTPUT orange","solution":"def longest_unique_char_word(words): Returns the longest word with all unique characters from a list of words. In case of a tie, returns the word that appears earliest in the list. def is_unique(word): return len(set(word)) == len(word) longest_word = \\"\\" for word in words: if is_unique(word) and (len(word) > len(longest_word)): longest_word = word return longest_word"},{"question":"Tina enjoys working with strings and often finds herself solving interesting problems with them. Tina has a string s consisting of only lowercase English alphabets. She wants to find all possible distinct palindromic substrings within this string. A palindrome is a string that reads the same forwards as backwards. For example, \\"level\\", \\"radar\\", and \\"a\\" are palindromes, but \\"hello\\" is not. Your task is to help Tina determine the number of distinct palindromic substrings in s. Input The input contains a single string s (1 ≤ |s| ≤ 1000), which consists only of lowercase English letters. Output Output a single integer, representing the number of distinct palindromic substrings in s. Examples Input ababa Output 5 Input abc Output 3 Note In the first sample, the distinct palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", and \\"ababa\\". In the second sample, the distinct palindromic substrings are \\"a\\", \\"b\\", and \\"c\\".","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] palindromic_substrings = set() for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] if is_palindrome(substring): palindromic_substrings.add(substring) return len(palindromic_substrings)"},{"question":"Given an integer array and an integer k, your task is to determine if there are two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is equal to k. Input: The first line contains a single integer T, the number of test cases. Each test case consists of two lines. The first line contains the integers N (the size of the array) and k. The second line contains N integers separated by spaces, representing the elements of the array. Output: For each test case, print \\"YES\\" if such indices exist, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 0 ≤ k ≤ 10^5 -10^9 ≤ array elements ≤ 10^9 SAMPLE INPUT 2 5 4 1 5 3 4 2 3 2 1 2 3 SAMPLE OUTPUT YES YES","solution":"def has_pair_with_difference(nums, k): Determines if there are two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is equal to k. Parameters: nums (List[int]): Array of integers k (int): Target difference Returns: str: \\"YES\\" if such a pair exists, otherwise \\"NO\\" num_set = set(nums) for num in nums: if (num + k) in num_set or (num - k) in num_set: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases and returns the results. Parameters: test_cases (List[Tuple[int, int, List[int]]]): List of test cases tuples with format (N, k, array) Returns: List[str]: List of results for each test case (\\"YES\\" or \\"NO\\") results = [] for N, k, nums in test_cases: results.append(has_pair_with_difference(nums, k)) return results"},{"question":"You are given two arrays `original` and `required`. The `original` array contains `n` numbers (1 ≤ n ≤ 10^5), and the `required` array specifies the desired result after transforming the `original` array using the following operation as many times as needed: pick any two elements in the array and swap their positions. Your task is to determine if it is possible to transform the `original` array into the `required` array using zero or more such swap operations. Input The first line contains an integer `n` — the number of elements in the arrays. The second line contains `n` integers which represent the elements of the `original` array. The third line contains `n` integers which represent the elements of the `required` array. Output Print \\"YES\\" if it is possible to convert the `original` array into the `required` array using the described operation. Otherwise, print \\"NO\\". Examples Input 5 1 2 3 4 5 5 4 3 2 1 Output YES Input 4 1 2 2 3 3 2 2 1 Output YES Input 3 1 2 3 1 2 2 Output NO Note In the first example, by simply swapping elements multiple times, we can reverse the `original` array to get the `required` array. In the second example, the `original` and `required` arrays can be made identical by performing appropriate swaps. In the third example, since the arrays have different frequency distributions (the element \'2\' appears twice in the original array but the required array changes one of those \'2\'s to \'3\'), it is impossible to transform `original` into `required`.","solution":"def can_transform(original, required): Determine if the original array can be transformed into the required array using zero or more swaps of any two elements. Args: original (list of int): The original array. required (list of int): The desired array. Returns: str: \\"YES\\" if it is possible to transform the original array into the required array, otherwise \\"NO\\". return \\"YES\\" if sorted(original) == sorted(required) else \\"NO\\""},{"question":"An online store keeps track of users and their purchase amounts. For a special occasion, the store wants to reward users who have the highest total purchase amounts. Write a program that determines which users should receive a reward. Input The first line of the input contains two integers n and t (1 ≤ t ≤ n ≤ 50) separated by a single space. The next n lines each contain a string representing the username and an integer representing the total amount spent (10 ≤ amount ≤ 10,000), separated by a space. All usernames are unique. Output Output the usernames of the top t users who should receive rewards. The output should list the usernames in descending order of their total purchase amounts. If two users have the same purchase amount, their usernames should appear in alphabetical order. Examples Input 5 3 alice 1500 bob 1900 charlie 1800 david 1900 eve 1300 Output bob david charlie Input 4 2 xander 5000 yvonne 3200 zeph 3200 wendy 2800 Output xander yvonne Note In the first example, both bob and david have the same purchase amount, but bob\'s name appears first alphabetically. In the second example, both yvonne and zeph have the same purchase amount, but yvonne\'s name appears first alphabetically.","solution":"def reward_top_users(n, t, users_purchases): Determines the top t users with the highest purchase amounts. Parameters: - n (int): Total number of users - t (int): Number of top users to reward - users_purchases (list of tuples): List containing tuples with username and purchase amount Returns: - list: List of usernames in descending order of their total purchase amounts # Sort users by (-amount_spent, username) sorted_users = sorted(users_purchases, key=lambda user: (-user[1], user[0])) # Extract the top t usernames result = [username for username, amount in sorted_users[:t]] return result # Example usage: # n, t = 5, 3 # users_purchases = [(\\"alice\\", 1500), (\\"bob\\", 1900), (\\"charlie\\", 1800), (\\"david\\", 1900), (\\"eve\\", 1300)] # print(reward_top_users(n, t, users_purchases)) # Output: [\'bob\', \'david\', \'charlie\']"},{"question":"You are given a positive integer `n` and an array of `n` integers. Your task is to find the minimum number of steps required to make the array \\"beautiful\\". An array is considered beautiful if it satisfies this property: in at least one position `i` (1 ≤ i ≤ n), the number of elements before position `i` only contains elements smaller than the element at position `i`, and the number of elements after position `i` only contains elements larger than the element at position `i`. You can perform the following operation any number of times (possibly zero): * Choose an element from the array and place it at another position (this may change the order of elements in the array). Write a program that finds the minimum number of steps required to make the array beautiful. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains `n` integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9) — the elements of the array. Output Print an integer — the minimum number of steps to make the array beautiful. Examples Input 6 1 5 3 4 2 6 Output 2 Input 4 2 3 1 4 Output 1 Notes In the first example, you can move the element `2` to the third position making the array [1, 2, 5, 3, 4, 6], and then move `3` to the fourth position resulting in [1, 2, 3, 5, 4, 6]. The array cannot be made beautiful in less than 2 steps. In the second example, you can move the element `1` to the second position making the array [2, 1, 3, 4].","solution":"def min_steps_to_make_beautiful(n, array): # To find minimum number of moves the idea is to find the length of the longest increasing subsequence # Since this subsequence already meets the criteria of being beautiful after sorting. if n <= 1: return 0 # Calculate Longest Increasing Subsequence (LIS) lis = [] for num in array: pos = binary_search(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return n - len(lis) def binary_search(lis, num): left, right = 0, len(lis) while left < right: mid = (left + right) // 2 if lis[mid] < num: left = mid + 1 else: right = mid return left"},{"question":"You are given a list of n integers. You need to count how many pairs (i, j) (1 ≤ i < j ≤ n) whose sum is divisible by a given integer k. Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100). The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4). Output Print a single integer — the number of pairs whose sum is divisible by k. Example Input 6 5 1 2 3 4 5 6 Output 3 Note In the first test case, there are three pairs that their sum is divisible by 5: (2, 3), (1, 4), (3, 7).","solution":"def count_pairs_divisible_by_k(n, k, a): Returns the number of pairs (i, j) where 1 ≤ i < j ≤ n and (a[i] + a[j]) is divisible by k. count = 0 for i in range(n): for j in range(i + 1, n): if (a[i] + a[j]) % k == 0: count += 1 return count"},{"question":"You are given a string S containing a mathematical expression which can include integers, plus (+), minus (-), multiplication (*), and division (/) operations. The expression may also contain whitespaces. Your task is to evaluate the expression and return the result as an integer. Note that division should truncate towards zero. For example: - The input \\"3 + 2 * 2\\" should output 7. - The input \\" 3/2 \\" should output 1. - The input \\" 3+5 / 2 \\" should output 5. Implement this function to perform the evaluation. Input One line containing the string S, where S will be a valid mathematical expression of length between 1 and 105. The expression will not have any invalid characters and will always be a proper infix expression. You can assume that the given arithmetic expression is always valid, meaning the division is always with a non-zero divisor and there are no parentheses. Output Output the integer result of the evaluated string. Examples Input \\"3 + 2 * 2\\" Output 7 Input \\" 3/2 \\" Output 1 Input \\" 3+5 / 2 \\" Output 5","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers, plus (+), minus (-), multiplication (*), and division (/) operations. Division results should truncate towards zero. def apply_operation(oper, b, a): if oper == \'+\': return a + b elif oper == \'-\': return a - b elif oper == \'*\': return a * b elif oper == \'/\': return int(a / b) def precedence(oper): if oper in (\'+\', \'-\'): return 1 if oper in (\'*\', \'/\'): return 2 return 0 num_stack = [] op_stack = [] i = 0 while i < len(expression): if expression[i].isspace(): i += 1 continue if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 num_stack.append(num) i -= 1 elif expression[i] in \\"+-*/\\": while (op_stack and precedence(op_stack[-1]) >= precedence(expression[i])): num_stack.append(apply_operation(op_stack.pop(), num_stack.pop(), num_stack.pop())) op_stack.append(expression[i]) i += 1 while op_stack: num_stack.append(apply_operation(op_stack.pop(), num_stack.pop(), num_stack.pop())) return num_stack[-1]"},{"question":"You are given an array of integers and a value `K`. You need to determine whether there are two distinct indices `i` and `j` in the array such that the difference between the elements at these indices is exactly `K`. Implement a function that returns `True` if such indices exist, and `False` otherwise. Input format: First line contains an integer `N`, the size of the array. Second line contains `N` space-separated integers representing the elements of the array. Third line contains a single integer `K`. Output format: Print `True` or `False` based on the existence of such indices. Constraints: 2 ≤ N ≤ 10^3 1 ≤ elements of the array ≤ 10^6 0 ≤ K ≤ 10^6 SAMPLE INPUT 5 1 5 3 4 2 3 SAMPLE OUTPUT True Explanation There are indices `i` and `j` (i.e., 1 and 3) such that the difference between the elements at these indices is exactly 3 (i.e., abs(5 - 2) = 3). ***","solution":"def find_difference(arr, K): Determines if there are two distinct indices i and j in the array such that the absolute difference between the elements at these indices is exactly K. Parameters: arr (list of int): The input array of integers. K (int): The target difference. Returns: bool: True if such indices exist, False otherwise. visited = set() for num in arr: if (num + K) in visited or (num - K) in visited: return True visited.add(num) return False"},{"question":"You are given a grid of size n x m filled with non-negative integers representing the height of terrain at that cell. Your objective is to count the number of water pools in the grid. A pool is defined as a collection of horizontally or vertically connected cells all having a height of 0. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid respectively. The next n lines contain m integers each, representing the height of the terrain at that cell (0 ≤ height ≤ 1000). Output Print a single integer representing the number of water pools in the grid. Examples Input 5 5 1 0 2 1 0 0 0 0 2 1 1 0 3 0 0 1 1 1 0 2 0 0 1 0 1 Output 4 Note In the given example, there are 4 water pools: - One pool connected at cells (1,1), (2,1), and (2,2) - Another pool at (1,5) - Another pool connected at (3,4), (4,4), and (5,4) - Another pool at (5,1) and (5,2) Visually: ``` 1 0 2 1 0 0 0 0 2 1 1 0 3 0 0 1 1 1 0 2 0 0 1 0 1 ``` Notice how pools can be defined by sets of connected zeros.","solution":"def count_water_pools(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != 0: return grid[x][y] = -1 # Mark the cell as visited directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dir in directions: dfs(x + dir[0], y + dir[1]) water_pools = 0 for i in range(n): for j in range(m): if grid[i][j] == 0: dfs(i, j) water_pools += 1 return water_pools"},{"question":"You are tasked with writing a program to assist in a simulated treasure hunt. Each treasure is hidden at specific coordinates (x, y) on a grid. The robot that finds the treasure can only move in straight lines: either horizontally or vertically. Given a starting point (sx, sy) and a series of moves, determine the final position of the robot after executing all the moves. The moves can be described using \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right), followed by an integer indicating the number of steps in that direction. For example, \\"U3\\" means move up 3 steps, \\"R2\\" means move right 2 steps, etc. Input Format: The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with one line containing four integers: sx, sy, n, and m, where (sx, sy) is the starting position of the robot, n indicates the number of moves, and m is the dimension of the grid (the grid is m x m, and 1 ≤ sx, sy ≤ m). The next n lines each contain a move described by a string described above (\'U\', \'D\', \'L\', \'R\') followed by an integer. Output Format: For each test case, output one line containing \\"Case #x:\\", where x is the test case number (starting from 1). Then, for every test case, output the final coordinates of the robot. Constraints: - The grid size m is a positive integer. - 1 ≤ m ≤ 1000 - 1 ≤ n ≤ 100 - Each move results in the robot staying within the bounds of the grid. - T ≤ 20 SAMPLE INPUT 2 1 1 3 5 R3 U2 L1 2 4 4 6 D2 R1 U3 L1 SAMPLE OUTPUT Case #1: 3 3 Case #2: 2 5 Explanation: In the first test case, the robot starts at (1, 1). It moves right 3 steps to (4, 1), then up 2 steps to (4, 3), and finally left 1 step to (3, 3). In the second test case, the robot starts at (2, 4). It moves down 2 steps to (2, 2), then right 1 step to (3, 2), then up 3 steps to (3, 5), and finally left 1 step to (2, 5).","solution":"def find_final_position(T, cases): results = [] for t in range(T): sx, sy, n, m = cases[t][0] moves = cases[t][1] x, y = sx, sy for move in moves: direction = move[0] steps = int(move[1:]) if direction == \'U\': y = min(y + steps, m) elif direction == \'D\': y = max(y - steps, 1) elif direction == \'L\': x = max(x - steps, 1) elif direction == \'R\': x = min(x + steps, m) results.append(f\\"Case #{t+1}: {x} {y}\\") return results"},{"question":"Arya loves working with strings and she is fascinated by palindromes. She wants to write a program that checks whether a given string can be rearranged to form a palindrome. A string is considered a palindrome if it reads the same backwards as forwards. To achieve this, Arya needs to determine if there exists a permutation of the string\'s characters that makes it a palindrome. Write a program that solves this problem for her. Input: The first line contains T, the number of test cases. Followed by T lines each containing a string S. Output: For every test case, print \\"YES\\" (without quotes) if the string can be rearranged to form a palindrome, otherwise print \\"NO\\" (without quotes). Constraints: 1 ≤ T ≤ 10000 1 ≤ |S| ≤ 1000 S contains only lowercase English letters (a-z). Note: For a string to be rearranged into a palindrome, each character must occur an even number of times, with at most one character occurring an odd number of times. Author: Arya Stark SAMPLE INPUT 3 civic ivicc hello SAMPLE OUTPUT YES YES NO Explanation Test Case #1: The original string \\"civic\\" is already a palindrome. Test Case #2: The string \\"ivicc\\" can be rearranged to form \\"civic\\", which is a palindrome. Test Case #3: The string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Checks if a given string can be rearranged to form a palindrome. Args: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def process_test_cases(T, strings): results = [] for s in strings: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Emily is planning a weekend trip with her friends. She wants to explore all the tourist attractions in her city. There are n attractions, each with different entry times (opening hours) given in a 24-hour format. She wants to visit all the attractions in the order of their opening time. If the attractions have the same opening time, she will choose to visit the one that comes first alphabetically. You need to write a program that takes the list of attractions with their opening times and sorts them accordingly. INPUT: The first line contains an integer n for the number of attractions. The following n lines each contain a string representing the attraction\'s name and an integer representing its opening time. OUTPUT: A sorted list of attraction names based on the criteria mentioned. CONSTRAINTS 1<n<=50 SAMPLE INPUT 4 Museum 9 Zoo 10 Aquarium 9 Botanical_Garden 9 SAMPLE OUTPUT Aquarium Botanical_Garden Museum Zoo Explanation: The first line inputs the number of attractions, that is, 4. Then each of the next 4 lines contains the name and opening time of an attraction. So, the attractions with the same opening time (9) are: Museum, Aquarium, and Botanical_Garden. They should be sorted alphabetically. Final sorted order based on opening time and alphabetical order is: Aquarium Botanical_Garden Museum Zoo","solution":"def sort_attractions(n, attractions): Sorts the attractions by their opening times and alphabetically if times are the same. Parameters: n (int): The number of attractions. attractions (list of tuples): Each tuple contains the attraction name (str) and its opening time (int). Returns: list of str: A sorted list of attraction names. # Sort by opening time first, then by name alphabetically sorted_list = sorted(attractions, key=lambda x: (x[1], x[0])) # Extract only the names of the attractions sorted_names = [attraction[0] for attraction in sorted_list] return sorted_names"},{"question":"A company needs a new identification system for its employees. The ID number should be apparent, unique, and must follow some specific rules for security. An ID number is valid if it meets the following criteria: 1. It must start with an uppercase letter. 2. It must end with a digit. 3. It must contain at least 8 characters. 4. It may contain only alphanumeric characters. Write a function `is_valid_id` that takes a single string `ID` and returns `True` if the ID is valid and `False` otherwise. Given Constraints: - The input string will contain characters between ASCII values 33 to 126 (inclusive). Input: A single string `ID`. Output: Returns `True` if the ID is valid according to the given criteria; otherwise, returns `False`. Examples: Input: ABCd1234 Output: True Input: Abcdefg1 Output: True Input: abcdefg1 Output: False Input: ABCDEFGH Output: False","solution":"import re def is_valid_id(ID): Validates the ID based on the given criteria: 1. It must start with an uppercase letter. 2. It must end with a digit. 3. It must contain at least 8 characters. 4. It may contain only alphanumeric characters. if len(ID) < 8: return False if not (ID[0].isupper() and ID[-1].isdigit()): return False if not ID.isalnum(): return False return True"},{"question":"You are given a list of projects and a list of prerequisites. Each project is represented by a unique integer. Each prerequisite is a pair of projects [a, b], which means that project a must be completed before project b. Write a function to find the order in which projects should be completed to finish all projects. If there are multiple valid orders, return any of them. If it is impossible to complete all projects due to a cycle in the prerequisites, return an empty list. Input - The first line contains one integer p (1 ≤ p ≤ 1000) — the number of projects. - The second line contains one integer q (0 ≤ q ≤ 10000) — the number of prerequisite pairs. - The next q lines each contain two integers a and b (1 ≤ a, b ≤ p) — representing a prerequisite relationship where project a must be completed before project b. Output - Print a single line containing the order in which projects should be completed, separated by spaces. If there are multiple valid orders, print any one of them. If it is impossible to complete all projects, print an empty list. Examples Input ``` 4 3 1 2 2 3 3 4 ``` Output ``` 1 2 3 4 ``` Input ``` 4 4 1 2 2 3 3 4 4 2 ``` Output ``` [] ``` Note In the first example, you can complete all projects in the order 1 -> 2 -> 3 -> 4. In the second example, there is a cycle (2 -> 3 -> 4 -> 2), so it is impossible to complete all projects.","solution":"from collections import defaultdict, deque def find_project_order(p, q, prerequisites): graph = defaultdict(list) indegree = {i: 0 for i in range(1, p + 1)} for a, b in prerequisites: graph[a].append(b) indegree[b] += 1 queue = deque([node for node in indegree if indegree[node] == 0]) order = [] while queue: node = queue.popleft() order.append(node) for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(order) == p: return order else: return [] # Example usage: # p = 4 # q = 4 # prerequisites = [(1, 2), (2, 3), (3, 4), (4, 2)] # print(find_project_order(p, q, prerequisites)) # Output: [] # p = 4 # q = 3 # prerequisites = [(1, 2), (2, 3), (3, 4)] # print(find_project_order(p, q, prerequisites)) # Output: [1, 2, 3, 4]"},{"question":"Alice has a peculiar way of sorting elements. She calls it \'block-sorting.\' Here\'s how it works: 1. Divide the list into contiguous blocks of exactly k elements each. 2. She can freely rearrange elements within each block, but not between blocks. 3. After rearranging within the blocks, she concatenates the blocks to form the final sorted list. Given an integer k and a list of n integers, your task is to determine if Alice can sort the entire list using her block-sorting method. Input - The first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. - Each test case consists of two lines: - The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n) — the size of the list and the block size respectively. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) representing the list of elements. Output For each test case, print \\"Yes\\" if Alice can sort the list using her block-sorting method, otherwise print \\"No\\". Example Input 3 5 2 3 1 4 5 2 6 3 6 5 4 3 2 1 4 1 4 3 2 1 Output Yes Yes No Explanation 1. In the first test case, Alice can rearrange the elements in each block: [3, 1], [4, 5], [2]. Sorting within these blocks gives [1, 3], [4, 5], [2], and concatenating gives [1, 3, 4, 5, 2]. The list is not sorted, hence \\"No.\\" 2. In the second test case, the blocks are [6, 5, 4], [3, 2, 1]. After sorting within blocks, we get [4, 5, 6], [1, 2, 3], concatenating gives [4, 5, 6, 1, 2, 3], which is not sorted, hence \\"No.\\" 3. In the third test case, each block contains a single element, the list remains the same: [4, 3, 2, 1], which is not sorted, hence \\"No.\\"","solution":"def can_alice_sort(t, test_cases): results = [] for case in test_cases: n, k = case[0] arr = case[1] # Creating blocks blocks = [arr[i:i+k] for i in range(0, n, k)] # Sorting blocks individually for block in blocks: block.sort() # Concatenating sorted blocks sorted_blocks = [elem for block in blocks for elem in block] # Checking if concatenated list is sorted if sorted_blocks == sorted(arr): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given an integer array of size n (1 ≤ n ≤ 1000). Your task is to write a program that outputs another array of size n where each element at position i is the product of all elements in the input array except the one at position i. Your program should do this without using division and should run in O(n) time complexity. Input The first line contains an integer n — the number of elements in the array. The second line contains n integers representing the elements of the array, separated by spaces. Output Print n integers representing the product array. Examples Input 4 1 2 3 4 Output 24 12 8 6 Input 5 2 1 4 3 5 Output 60 120 30 40 24","solution":"def product_except_self(nums): Given an integer array nums, return an array such that each element at index i is the product of all elements in nums except nums[i]. n = len(nums) result = [1] * n # Compute left products left = 1 for i in range(n): result[i] = left left *= nums[i] # Compute right products and final result right = 1 for i in range(n-1, -1, -1): result[i] *= right right *= nums[i] return result"},{"question":"Given a string `S`, you need to find the length of the largest substring of `S` that contains at most two distinct characters. Input The first line of the input contains an integer `T` denoting the number of test cases. Each of the next `T` lines contains a single string `S`. Output For each test case, output a single line containing the length of the largest substring of `S` that contains at most two distinct characters. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100000 Example Input: 2 eceba ccaabbb Output: 3 5 Explanation Example Case 1: The longest substring with at most 2 distinct characters is \\"ece\\" which has a length of 3. Example Case 2: The longest substring with at most 2 distinct characters is \\"aabbb\\" which has a length of 5.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the largest substring of s that contains at most two distinct characters. n = len(s) if n < 3: return n left = 0 right = 0 hashmap = {} max_len = 2 while right < n: hashmap[s[right]] = right if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left + 1) right += 1 return max_len def process_test_cases(test_cases): Returns the results for all test cases. results = [] for s in test_cases: results.append(length_of_longest_substring_two_distinct(s)) return results"},{"question":"Input 5 10 5 7 12 10 Output 2 2 6 12 10","solution":"import math from typing import List def calculate_gcd_for_subarray(arr: List[int]) -> List[int]: n = len(arr) result = [0] * n result[0] = arr[0] for i in range(1, n): result[i] = math.gcd(result[i-1], arr[i]) return result"},{"question":"You are given an n-class rectangular school building with n rows and m columns, where point’s coordinates (x, y) mean it is situated in the x-th row and y-th column (1 ≤ x ≤ n, 1 ≤ y ≤ m). Your task is to find a unique path that satisfies the following conditions: 1. You start at the cell (1, 1). 2. You must visit every cell exactly once. 3. In each step, you can move to any adjacent cell (horizontally or vertically), but you should not revisit a cell. 4. If it’s impossible to visit each cell exactly once, print \\"-1\\". Input The first and only line contains two positive integers n, m (1 ≤ n ⋅ m ≤ 10^6) — the number of rows and columns of the school building respectively. Output Print \\"-1\\" if it is impossible to visit every cell exactly once. Else print n ⋅ m pairs of integers, where the i-th pair contains two integers x_i, y_i (1 ≤ x_i ≤ n, 1 ≤ y_i ≤ m) — cells of the building in order of visiting, so that all of them are distinct. Notice that the first cell should have (1, 1) coordinates, according to the statement. Example Input 3 3 Output 1 1 1 2 1 3 2 3 2 2 2 1 3 1 3 2 3 3 Note In the first example, the path starts from the cell (1, 1) and visits each cell exactly once, moving horizontally or vertically to adjacent cells.","solution":"def find_unique_path(n, m): This function finds a unique path to visit each cell in an n x m grid exactly once. Returns the path as a list of tuples (x, y), or returns -1 if such a path is impossible. # Check impossible condition, which does not exist in this problem as per given constraints # Given constraints say 1 ≤ n ⋅ m ≤ 10^6, there is always a valid path for any n, m combination path = [] for i in range(n): if i % 2 == 0: # Even row for j in range(m): path.append((i + 1, j + 1)) else: # Odd row for j in range(m - 1, -1, -1): path.append((i + 1, j + 1)) return path"},{"question":"Petya is fascinated by palindromic numbers. A number is called a palindromic number if it reads the same backwards as forwards. Given an integer range [L, R], he wants to know how many palindromic numbers lie in that range. Write a function that takes two integers L and R (1 ≤ L ≤ R ≤ 10^5) as input and returns the count of palindromic numbers in this range inclusive. Input The function should accept two integers L and R. Output The function should return one integer which indicates the number of palindromic numbers in the range [L, R]. Examples Input 10 20 Output 1 Input 1 100 Output 18 Note In the first sample, the only palindromic number between 10 and 20 is 11. In the second sample, the palindromic numbers between 1 and 100 are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99 making it a total of 18.","solution":"def count_palindromic_numbers(L, R): Returns the count of palindromic numbers in the range [L, R] inclusive. def is_palindrome(n): return str(n) == str(n)[::-1] count = 0 for num in range(L, R+1): if is_palindrome(num): count += 1 return count"},{"question":"John has been hired as a software engineer at a new startup company. One of his initial projects is to analyze a large dataset of integers and generate specific reports based on the dataset. The company needs a program that processes the data and answers the following queries: 1. Calculate the sum of integers within a specific range. 2. Determine the number of unique integers in a specific range. 3. Find the maximum integer within a specific range. The dataset is represented as a list of integers and the queries are provided as a list of tuples. Each tuple contains three elements: two integers `l` and `r` representing the range (1 ≤ l ≤ r ≤ n, where n is the length of the list) and a string representing the type of query (\\"sum\\", \\"unique\\", or \\"max\\"). Your task is to implement a function that processes these queries efficiently. Function Signature: `def process_queries(data: List[int], queries: List[Tuple[int, int, str]]) -> List[int]:` # Input - `data`: A list of integers (1 ≤ len(data) ≤ 100000). - `queries`: A list of tuples, where each tuple contains two integers and a string (\\"sum\\", \\"unique\\", or \\"max\\") (1 ≤ len(queries) ≤ 50000). # Output - A list of integers where each integer is the result of the corresponding query. # Example Input ```python data = [1, 2, 3, 2, 1, 4, 5] queries = [(1, 3, \\"sum\\"), (2, 5, \\"unique\\"), (1, 7, \\"max\\")] ``` Output ```python [6, 3, 5] ``` Explanation 1. The sum of integers from index 1 to 3 is 1 + 2 + 3 = 6. 2. The number of unique integers from index 2 to 5 is {2, 3, 2, 1} = 3 unique numbers. 3. The maximum integer from index 1 to 7 is 5.","solution":"def process_queries(data, queries): results = [] for l, r, qtype in queries: sub_array = data[l-1:r] if qtype == \\"sum\\": results.append(sum(sub_array)) elif qtype == \\"unique\\": results.append(len(set(sub_array))) elif qtype == \\"max\\": results.append(max(sub_array)) return results"},{"question":"You are given an array of integers. Your task is to manipulate this array to form a series of increasing subarrays, with each number in each subarray being unique. Each number must be used exactly once. If it is not possible to form such a series, output \\"NO\\". Otherwise, output \\"YES\\" followed by the smallest number of subarrays you can form. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The following line contains n integers a₁, a₂, ..., aₙ (1 ≤ aᵢ ≤ 1000) — the elements of the array. Output For each test case, output \\"NO\\" if it is not possible to form the required subarrays. Otherwise, output \\"YES\\" followed by the smallest number of subarrays. Example Input 3 5 4 3 2 1 5 6 1 2 3 2 1 4 4 2 1 4 3 Output YES 3 NO YES 1 Explanation In the first test case, the array can be divided into the following increasing subarrays: - [1, 2] - [3] - [4, 5] This forms 3 subarrays which meets the requirements. In the second test case, it is impossible to form the required subarrays because the value 2 repeats without enough separation to form unique subarrays. In the third test case, the entire array is already in increasing order and all elements are unique, thus only 1 subarray is required.","solution":"def increasing_subarrays(t, test_cases): results = [] for test_case in test_cases: n, array = test_case unique_elems = set(array) if len(unique_elems) < n: results.append(\\"NO\\") else: results.append(f\\"YES {len(unique_elems)}\\") return results # Example usage: # print(increasing_subarrays(3, [(5, [4, 3, 2, 1, 5]), (6, [1, 2, 3, 2, 1, 4]), (4, [2, 1, 4, 3])]))"},{"question":"A company is analyzing its sales data to determine the number of successful sales per day. Each sale is either successful or unsuccessful. They have a list of sales for a week, and each sale is represented by a \'1\' (successful) or \'0\' (unsuccessful). Given a list of sales for a week, determine if there is any day where all sales were successful. Constraints * The list will contain exactly 7 elements. * Each element will be either a \'1\' or \'0\'. Input Input is given from Standard Input in the following format: sales (a list of 7 integers) Output If there is any day where all sales were successful, print `Yes`; otherwise, print `No`. Examples Input 1 0 1 0 1 0 1 Output No Input 1 1 1 1 1 1 1 Output Yes Input 0 0 0 0 0 0 0 Output No Input 1 1 1 0 1 0 1 Output No Input 0 0 1 1 1 1 1 Output Yes","solution":"def all_sales_successful(sales): Determines if there is any day where all sales were successful. Parameters: sales (list): List of 7 integers representing sales (1 for successful, 0 for unsuccessful) Returns: str: \\"Yes\\" if there is a day where all sales were successful, otherwise \\"No\\" # Check if all values in the list are 1, which means a day with all successful sales if all(sale == 1 for sale in sales): return \\"Yes\\" return \\"No\\""},{"question":"In a small village, there\'s a famous tree with N branches. Each branch has a number of fruits hanging from it. A local tradition involves villagers gathering around the tree and collecting fruits from the branches. The villagers always collect fruits starting from the branch with the highest number of fruits and move to the one with the next highest amount, and so on. However, if two branches have the same number of fruits, they choose the branch with the lower index first. Given the number of branches N and the list of the number of fruits on each branch, your task is to output the order in which the branches will be visited by the villagers based on the tradition. INPUT: First line of the input contains a single integer t denoting the number of test cases. Each test case contains two lines: - The first line contains a single integer N denoting the number of branches. - The second line contains N space-separated integers where the i-th integer is the number of fruits on the i-th branch. OUTPUT: For each test case, output the order in which the branches will be visited as a list of indices, starting from 0. CONSTRAINTS: 1 ≤ t ≤ 50 1 ≤ N ≤ 10^6 0 ≤ fruits on a branch ≤ 10^9 SAMPLE INPUT: 2 5 4 3 5 1 2 4 7 7 3 6 SAMPLE OUTPUT: [2, 0, 1, 4, 3] [0, 1, 3, 2] Explanation: In the first test case, the branch with the most fruits is at index 2, followed by index 0, then index 1, then index 4, and finally index 3. In the second test case, both branches at index 0 and 1 have the highest number of fruits, so the villagers will start with the lower index 0 first, followed by index 1. Next comes the branch at index 3, and lastly, the branch at index 2.","solution":"def visit_order(t, test_cases): results = [] for case in test_cases: N, fruits = case indexed_fruits = list(enumerate(fruits)) sorted_fruits = sorted(indexed_fruits, key=lambda x: (-x[1], x[0])) order = [index for index, fruit in sorted_fruits] results.append(order) return results # Helper function to format input and output for unit tests def solve(data): lines = data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): N = int(lines[index]) fruits = list(map(int, lines[index + 1].split())) test_cases.append((N, fruits)) index += 2 return visit_order(t, test_cases)"},{"question":"A famous restaurant has decided to optimize their menu for faster preparation times. To achieve this, they have categorized their ingredients into two types - A and B. Ingredient A requires less time to prepare compared to ingredient B. To balance the menu and reduce waiting times, the restaurant wants to find out if it\'s possible to create a balanced dish that contains exactly the same number of ingredients of type A and B. Your task is to determine whether a given dish description (a string consisting of the letters A and B) can be balanced, which means it contains an equal number of A and B letters. Input: The first line of input contains the positive integer N, the number of dish descriptions. Each of the following N lines contains a single dish description, a string consisting of letters A and B, with a length between 1 and 100,000, inclusive. The sum of the lengths of all dish descriptions doesn\'t exceed 1,000,000. Output: The output should contain N lines, each line displaying \\"YES\\" if the dish description contains an equal number of A and B letters, and \\"NO\\" otherwise. Constraints: 1 ≤ N ≤ 100 SAMPLE INPUT 3 ABABA AABB ABBAAB SAMPLE OUTPUT NO YES YES Explanation: ABABA - The string contains 3 A’s and 2 B’s, hence not balanced. AABB - The string contains 2 A’s and 2 B’s, hence balanced. ABBAAB - The string contains 3 A’s and 3 B’s, hence balanced.","solution":"def is_balanced(dish): Determines if a dish is balanced, meaning it contains an equal number of \'A\' and \'B\' letters. :param dish: A string representing the dish description. :return: \'YES\' if the dish is balanced, \'NO\' otherwise. count_A = dish.count(\'A\') count_B = dish.count(\'B\') return \\"YES\\" if count_A == count_B else \\"NO\\" def balance_dishes(N, dishes): Determines if each dish description in a list of dishes is balanced. :param N: Number of dish descriptions. :param dishes: List of strings, each representing a dish description. :return: list of strings, either \\"YES\\" or \\"NO\\" for each dish description. results = [] for dish in dishes: results.append(is_balanced(dish)) return results"},{"question":"A magical forest is represented by a grid with n rows and m columns. Each cell in the grid contains a certain number of magical energy points, which are represented by positive integers. Your task is to collect as many energy points as possible by starting from the top-left cell (1, 1), and always moving to the right or down, until you reach the bottom-right cell (n, m). Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines contain m integers each, where the j-th integer in the i-th row represents the magical energy points in the cell (i, j) (1 ≤ cell_value ≤ 1000). Output Output a single integer — the maximum number of magical energy points you can collect by starting from the top-left cell (1, 1) and moving to the bottom-right cell (n, m). Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Note In the first example, one possible path to collect the maximum amount of magical energy points is (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3), collecting 1 + 3 + 5 + 2 + 1 = 12 points.","solution":"def max_energy_points(n, m, grid): Returns the maximum number of magical energy points that can be collected from top-left to bottom-right. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: 2D list representing the grid with magical energy points :return: Maximum number of energy points that can be collected # Create a 2D dp array to store the maximum energy points collected up to each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[n - 1][m - 1] # A helper function to parse inputs and run the solution. def run_max_energy_points(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) m = int(data[1]) grid = [] for i in range(n): grid.append([int(data[i * m + j + 2]) for j in range(m)]) print(max_energy_points(n, m, grid))"},{"question":"Problem You are given an integer array A of length N. Your task is to determine the maximum sum of non-overlapping subarrays of length K. Constraints The input satisfies the following conditions. * 1 leq N leq 10^5 * 1 leq K leq N * 1 leq A[i] leq 10^4 for all 0 leq i < N Input The input is given in the following format. N K A[0] A[1] ldots A[N-1] Where N and K are the length of the array and the length of each subarray respectively. The following line consists of N integers that represent the array A. Output Output the maximum sum of non-overlapping subarrays of length K. Examples Input 5 2 1 2 3 4 5 Output 9 Input 7 3 4 2 1 3 7 6 5 Output 18","solution":"def max_sum_of_non_overlapping_subarrays(N, K, A): Returns the maximum sum of non-overlapping subarrays of length K. if K > N: return 0 max_sum = 0 current_sum = sum(A[:K]) max_sum = current_sum for i in range(K, N): current_sum += A[i] - A[i - K] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a list of n integers. For each element in the list, you need to find the closest greater element to its right. If no such element exists, return -1. Implement a function that performs this task efficiently. For example, given the list [4, 5, 2, 10, 8], the closest greater elements are: * For 4, the closest greater element is 5. * For 5, the closest greater element is 10. * For 2, the closest greater element is 10. * For 10, there is no greater element to its right, so it is -1. * For 8, there is no greater element to its right, so it is -1. Your task is to write a function that for each element in the list, returns its closest greater element to the right. Input The input begins with a single integer t (1 ≤ t ≤ 10^3), the number of test cases. Each test case consists of two lines: * The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the list. * The second line contains n space-separated integers. Output For each test case, output a single line containing n space-separated integers, where the i-th integer is the closest greater element to the right of the i-th element in the list. If there is no such element, output -1 instead. Example Input 3 5 4 5 2 10 8 6 3 6 1 4 3 8 4 1 3 2 4 Output 5 10 10 -1 -1 6 8 4 8 8 -1 3 4 4 -1","solution":"def closest_greater_elements(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] result = [-1] * n stack = [] for idx in range(n): while stack and arr[stack[-1]] < arr[idx]: result[stack.pop()] = arr[idx] stack.append(idx) results.append(result) return results # Function to wrap multiple test cases def process_input(t, inputs): test_cases = [(inputs[i], inputs[i+1]) for i in range(0, 2*t, 2)] return closest_greater_elements(t, test_cases)"},{"question":"Write a program to simulate a game played by two players, Alice and Bob, who take turns removing elements from a sequence of numbers. The game is defined as follows: 1. There is a sequence of numbers of length N. 2. Alice always starts first. 3. On each player\'s turn, they must remove one element from either the beginning or the end of the sequence. 4. The game continues until all elements have been removed. 5. A player\'s score is the sum of the elements they\'ve removed. 6. Both players play optimally to maximize their own score. Given the initial sequence of numbers, your task is to determine the final scores of Alice and Bob if they both play optimally. Input Format - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the length of the sequence. - The second line contains N space-separated integers, representing the sequence. Output Format - For each test case, output the final scores of Alice and Bob separated by a space. Example Input & Output Input: 2 4 1 2 3 4 3 4 4 4 Output: 6 4 8 4 Explanation In the first test case: - Alice picks 4 (end), Bob picks 3 (end), Alice picks 2 (end), Bob picks 1 (beginning). Final scores: Alice = 4 + 2 = 6, Bob = 3 + 1 = 4. In the second test case: - Alice picks 4 (beginning), Bob picks 4 (beginning), Alice picks 4 (beginning). Final scores: Alice = 4 + 4 = 8, Bob = 4.","solution":"def optimal_game_sequence(sequence): n = len(sequence) dp = [[0] * n for _ in range(n)] sum_sequence = [[0] * n for _ in range(n)] for i in range(n): sum_sequence[i][i] = sequence[i] for j in range(i + 1, n): sum_sequence[i][j] = sum_sequence[i][j - 1] + sequence[j] for length in range(1, n + 1): for i in range(n - length + 1): j = i + length - 1 if i == j: dp[i][j] = sequence[i] else: dp[i][j] = sum_sequence[i][j] - min(dp[i + 1][j], dp[i][j - 1]) alice_score = dp[0][n - 1] bob_score = sum(sequence) - alice_score return alice_score, bob_score def game_results(test_cases): results = [] for test_case in test_cases: n, sequence = test_case if n > 0: results.append(optimal_game_sequence(sequence)) return results"},{"question":"You are given a string S of lowercase English letters. Your task is to process Q queries. Each query is of one of the following two types: 1. Replace the character at position i with character c. (1 ≤ i ≤ |S|, where |S| is the length of the string, and c is a lowercase English letter) 2. Find the lexicographically minimal substring of length l (1 ≤ l ≤ |S|). Constraints: - 1 ≤ |S|, Q ≤ 100,000 Input The input consists of multiple lines: - The first line contains the string S. - The second line contains Q, the number of queries. - The following Q lines each describe a query: - For type 1 queries, the format will be: `1 i c` - For type 2 queries, the format will be: `2 l` Output For each type 2 query, output the lexicographically smallest substring of length l. Examples Input abcde 3 2 3 1 3 z 2 3 Output abc abz Input algorithm 4 2 2 1 8 z 1 1 z 2 2 Output al go","solution":"def process_queries(S, queries): result = [] S = list(S) # Convert string to list for mutability for query in queries: parts = query.split() if parts[0] == \'1\': i = int(parts[1]) - 1 # Convert to zero-based index c = parts[2] S[i] = c elif parts[0] == \'2\': l = int(parts[1]) min_substring = None for i in range(len(S) - l + 1): substring = \'\'.join(S[i:i+l]) # Create substring of length l if min_substring is None or substring < min_substring: min_substring = substring result.append(min_substring) return result"},{"question":"Permutation Sum Checker You are asked to determine if there exists a permutation of an integer array `nums` such that the sum of every consecutive pair of integers in the permutation is prime. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The smallest prime numbers are 2, 3, 5, 7, 11, 13, etc. Your task is to write a program that takes an integer array as input and outputs `True` if such a permutation exists, and `False` otherwise. For example, given the array `[2, 5, 6, 2]`, one possible permutation is `[2, 5, 2, 6]`. The sum of the consecutive pairs (2+5, 5+2, 2+6) are 7, 7, and 8, respectively. Since two of the sums are prime, but one is not, the output should be `False`. Input The input consists of multiple datasets. Each dataset consists of two lines: - The first line contains an integer `n` (1 ≤ n ≤ 10), the number of elements in the array. - The second line contains `n` integers separated by spaces, representing the elements of the array. Each integer is between 1 and 50 inclusive. The end of the input is indicated by a line containing one `.` (period). Output For each dataset, output a single line containing `True` or `False`. Sample Input 4 2 5 6 2 3 3 5 8 2 4 7 . Output for the Sample Input False True True Example Input 4 2 5 6 2 3 3 5 8 2 4 7 . Output False True True","solution":"import itertools def is_prime(num): Check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def has_prime_pair_sum_permutation(nums): Check if there exists a permutation of nums such that the sum of every consecutive pair is prime. for permutation in itertools.permutations(nums): if all(is_prime(permutation[i] + permutation[i + 1]) for i in range(len(permutation) - 1)): return True return False def permutation_sum_checker(datasets): results = [] for dataset in datasets: n, nums = dataset results.append(has_prime_pair_sum_permutation(nums)) return results"},{"question":"Write a function that takes a string as input and returns a new string where each character from the original string is repeated twice. For example, the string \\"hello\\" should be transformed to \\"hheelllloo\\". Your program should not use any built-in string methods for duplication (such as using `*` operator or `repeat` methods), but should use iteration to explicitly construct the new string. Constraints Input A single line containing a string S (1 ≤ |S| ≤ 100), containing only lowercase English letters. Output A single line containing the transformed string. Examples Input hello Output hheelllloo Input programming Output pprrooggrraammmmiinngg","solution":"def repeat_characters(s): Returns a new string where each character from the original string is repeated twice. result = [] for char in s: result.append(char) result.append(char) return \'\'.join(result)"},{"question":"Given an integer array `nums` of length `n`, find the sum of all unique elements in the array. A unique element is an element that only appears once in the array. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the length of the array. The second line contains n integers, representing the elements of the array. Output Print the sum of all unique elements in the array. Examples Input 5 1 2 3 2 4 Output 8 Input 6 1 1 1 2 2 3 Output 3 Note In the first test, the unique elements are 1, 3, and 4 with a sum of 1 + 3 + 4 = 8. In the second test, the only unique element is 3 with a sum of 3.","solution":"def sum_of_unique_elements(n, nums): Returns the sum of all unique elements in the array. Args: n : int : length of the array nums : List[int] : the elements of the array Returns: int : the sum of unique elements from collections import Counter count = Counter(nums) unique_sum = sum(num for num, freq in count.items() if freq == 1) return unique_sum"},{"question":"You are a software engineer at a robotics company, and your team is developing a robot for search and rescue missions. The robot collects sensor data from its surroundings and uses this data to navigate through disaster zones. One of the crucial requirements is to ensure that the robot maintains a stable power level to complete its mission. The robot\'s power level varies as it encounters different types of terrain. The robot starts its mission with an initial amount of power `P` and a list of terrains it needs to cross. Each terrain has a specific effect on the power level. Your task is to determine whether the robot can complete its mission without running out of power at any point. Each terrain is represented by a list where each element indicates the change in the power level (both positive and negative values). The robot must maintain a power level greater than zero to continue its mission. You need to find out if the robot can navigate through all provided terrains without the power level dropping to zero or below at any point. # Input - The first line of the input contains an integer `P` (1 ≤ P ≤ 10^9), the initial power level of the robot. - The second line contains an integer `n` (1 ≤ n ≤ 10^5), the number of terrains. - The third line contains `n` integers separated by spaces, where each integer `ti` (-10^6 ≤ ti ≤ 10^6) represents the effect of the i-th terrain on the robot\'s power level. # Output - Print \\"Yes\\" if the robot can complete its mission without running out of power at any point. Otherwise, print \\"No\\". # Examples Example 1 **Input:** ``` 10 5 -2 3 -5 1 -3 ``` **Output:** ``` Yes ``` Example 2 **Input:** ``` 10 5 -2 3 -10 1 -3 ``` **Output:** ``` No ``` # Explanation **Example 1:** - Initial power: `10` - After first terrain: `10 - 2 = 8` - After second terrain: `8 + 3 = 11` - After third terrain: `11 - 5 = 6` - After fourth terrain: `6 + 1 = 7` - After fifth terrain: `7 - 3 = 4` - The robot never runs out of power, so the output is \\"Yes\\". **Example 2:** - Initial power: `10` - After first terrain: `10 - 2 = 8` - After second terrain: `8 + 3 = 11` - After third terrain: `11 - 10 = 1` - After fourth terrain: `1 + 1 = 2` - After fifth terrain: `2 - 3 = -1` - The robot\'s power level drops below zero on the fifth terrain, so the output is \\"No\\".","solution":"def can_complete_mission(P, n, terrains): Determines if the robot can complete its mission without running out of power at any point. Parameters: P (int): Initial power level of the robot. n (int): Number of terrains to traverse. terrains (list of int): List indicating the effect of each terrain on the robot\'s power level. Returns: str: \\"Yes\\" if the robot can complete its mission without the power level dropping to zero or below at any point, otherwise \\"No\\". current_power = P for effect in terrains: current_power += effect if current_power <= 0: return \\"No\\" return \\"Yes\\""},{"question":"The National Weather Service is developing a system to monitor weather conditions across multiple cities using a network of weather stations. Each city can have one or more weather stations, and data needs to be transmitted between stations to keep all cities updated about real-time weather conditions. To ensure efficient communication, each city has designated a central station (station 0) that acts as the hub for data distribution within that city. Data received from this central station can be considered as received by the entire city. The cost of transmitting data between stations can vary, and data transmission is directional (i.e., it may cost differently to send data from station A to station B than from station B to station A). The goal is to find the least expensive way to disseminate weather data from one specific station to the central stations of all cities. The system will need to handle multiple queries about different starting stations, providing the minimum cost and the transmission path taken. Constraints: - 1 ≤ number of cities ≤ 20 - 1 ≤ number of stations per city ≤ 50 - 1 ≤ number of connections ≤ 2000 - 0 ≤ transmission cost ≤ 100 - 1 ≤ number of queries ≤ 5 - cityname is a string consisting of lowercase letters \'a\' to \'z\' of length between 1 and 15. Input Format: - The first line contains an integer n, the number of cities. - The next n lines each contain a city name followed by an integer mi, the number of stations in that city. - The following line contains an integer e, the number of base-to-base communication links. - The next e lines each contain a source city, source station, destination city, destination station, and transmission cost. - The following line contains an integer q, the number of queries. - The next q lines each contain a city name and a station number indicating where the data transmission starts. Output: For each query, output: 1. The minimum cost to transmit data to all central stations. 2. The transmission path in the form of \\"source city source station destination city destination station\\" for each step of the transmission. 3. If it is not possible to reach all central stations, output \\"Impossible\\". Example: Input: 4 alpha 3 bravo 2 charlie 1 delta 2 6 alpha 1 alpha 0 5 alpha 2 alpha 0 3 alpha 0 bravo 1 4 bravo 1 bravo 0 2 bravo 0 charlie 0 6 delta 0 delta 1 1 2 alpha 2 delta 0 Output: 10 alpha 2 alpha 0 alpha 0 bravo 1 bravo 1 bravo 0 bravo 0 charlie 0 ----- Impossible -----","solution":"import heapq from collections import defaultdict, deque def parse_input(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) idx += 1 city_info = {} stations_count = {} for _ in range(n): city_name = data[idx] mi = int(data[idx + 1]) city_info[city_name] = mi stations_count[city_name] = mi idx += 2 e = int(data[idx]) idx += 1 edges = [] for _ in range(e): src_city = data[idx] src_station = int(data[idx + 1]) dest_city = data[idx + 2] dest_station = int(data[idx + 3]) cost = int(data[idx + 4]) edges.append((src_city, src_station, dest_city, dest_station, cost)) idx += 5 q = int(data[idx]) idx += 1 queries = [] for _ in range(q): query_city = data[idx] query_station = int(data[idx + 1]) queries.append((query_city, query_station)) idx += 2 return n, city_info, edges, queries def build_graph(edges): graph = defaultdict(list) for src_city, src_station, dest_city, dest_station, cost in edges: graph[(src_city, src_station)].append(((dest_city, dest_station), cost)) return graph def dijkstra(start, graph, city_info): pq = [] heapq.heappush(pq, (0, start, [start])) # (cost, current station, path) min_costs = {start: (0, [start])} while pq: curr_cost, curr_station, path = heapq.heappop(pq) for (neighbor, weight) in graph.get(curr_station, []): new_cost = curr_cost + weight new_path = path + [neighbor] if neighbor not in min_costs or new_cost < min_costs[neighbor][0]: min_costs[neighbor] = (new_cost, new_path) heapq.heappush(pq, (new_cost, neighbor, new_path)) central_costs = {} for city, n_stations in city_info.items(): central_station = (city, 0) if central_station in min_costs: central_costs[city] = min_costs[central_station] else: return None return central_costs def solve(n, city_info, edges, queries): graph = build_graph(edges) results = [] for query in queries: start = query central_costs = dijkstra(start, graph, city_info) if central_costs: total_cost = sum(costs[0] for costs in central_costs.values()) paths = [] for city in city_info: path = central_costs[city][1] for i in range(len(path) - 1): src = path[i] dest = path[i + 1] paths.append(f\\"{src[0]} {src[1]} {dest[0]} {dest[1]}\\") results.append((total_cost, paths)) else: results.append(\\"Impossible\\") return results def weather_data_system(): n, city_info, edges, queries = parse_input() results = solve(n, city_info, edges, queries) for result in results: if result == \\"Impossible\\": print(\\"Impossible\\") print(\\"-----\\") else: total_cost, paths = result print(total_cost) for path in paths: print(path) print(\\"-----\\")"},{"question":"A software company is developing a new encryption technology for securing confidential messages. The encryption process involves converting a given string into a new string by shifting each character in the original string by a specific number of positions forward in the alphabet. If the shift exceeds \'z\', it wraps around to \'a\'. Write a program to implement this encryption. The program should take an input string and a shift value and return the encrypted string. INPUT: The first line of the input contains a positive integer T ( the number of test cases ). Next 2T lines of input contain a string S followed by an integer K, where S is the string to be encrypted, and K is the shift value. OUTPUT: For each test case, print the encrypted string. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 1 ≤ K ≤ 25 SAMPLE INPUT 3 hello 1 abc 3 xyz 2 SAMPLE OUTPUT ifmmp def zab Explanation For test 1, the string \\"hello\\" shifted by 1 position results in \\"ifmmp\\". For test 2, the string \\"abc\\" shifted by 3 positions results in \\"def\\". For test 3, the string \\"xyz\\" shifted by 2 positions results in \\"zab\\".","solution":"def encrypt_string(s, k): Encrypts the given string `s` by shifting each character `k` positions forward. The shift is circular, wrapping around to \'a\' if it exceeds \'z\'. encrypted = [] for char in s: if \'a\' <= char <= \'z\': # Calculate the new character with wrapping around shifted_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) encrypted.append(shifted_char) else: encrypted.append(char) return \'\'.join(encrypted) def process_encryption_cases(T, cases): Processes T encryption cases and returns the results. Each case is a tuple (S, K), where S is the string and K is the shift value. results = [] for s, k in cases: encrypted_string = encrypt_string(s, k) results.append(encrypted_string) return results"},{"question":"We have a rectangular room represented by a grid with H rows and W columns. There are N robots placed in this room. Each robot can move to its adjacent cells (up, down, left, or right) in each step. The goal is to determine if it\'s possible for all robots to meet at the same cell eventually. Each robot starts at a specific position in the grid, and at every time step, they must move to an adjacent cell. If a robot stays in its current cell for a time step, it is considered as not moving to another cell. Determine whether there is a common cell that all robots can reach at the same time. Constraints * 1 ≤ H, W ≤ 50 * 1 ≤ N ≤ 50 * Each robot\'s initial position (X, Y) is distinct. Input Input is given from Standard Input in the following format: H W N X_1 Y_1 X_2 Y_2 ... X_N Y_N Output Print \\"YES\\" if all robots can meet at the same cell eventually. Otherwise, print \\"NO\\". Examples Input 4 4 2 1 1 4 4 Output YES Input 3 3 3 1 1 1 3 3 3 Output YES Input 5 5 3 1 1 3 5 4 3 Output NO","solution":"def can_robots_meet(H, W, N, positions): # Calculate Manhattan Distance def manhattan_distance(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2) # Check if target cell (i, j) can serve as a meeting point for target_x in range(1, H + 1): for target_y in range(1, W + 1): max_distance = max(manhattan_distance(x, y, target_x, target_y) for x, y in positions) if all(manhattan_distance(x, y, target_x, target_y) == max_distance for x, y in positions): return \\"YES\\" return \\"NO\\" if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() H = int(data[0]) W = int(data[1]) N = int(data[2]) positions = [] for idx in range(N): x = int(data[3 + 2 * idx]) y = int(data[4 + 2 * idx]) positions.append((x, y)) print(can_robots_meet(H, W, N, positions))"},{"question":"You are given a binary string of length n. You are allowed to select any contiguous substring of the string and flip all the bits in the selected substring (change \'0\' to \'1\' and \'1\' to \'0\'). Your task is to determine the minimum number of flips required to make the entire string consist of only \'0\'s. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the binary string. The second line contains a binary string of length n consisting of \'0\'s and \'1\'s. Output Print a single integer — the minimum number of flips required to make the entire string consist of only \'0\'s. Examples Input 5 11011 Output 2 Input 7 1010101 Output 4 Input 3 000 Output 0","solution":"def min_flips_to_zeros(n, binary_string): if \'1\' not in binary_string: return 0 flip_count = 0 i = 0 while i < n: if binary_string[i] == \'1\': while i < n and binary_string[i] == \'1\': i += 1 flip_count += 1 i += 1 return flip_count"},{"question":"A remote company wants to track the productivity of its team members. Each team member\'s productivity is represented as an integer array where each element corresponds to the productivity on a specific day. The management team wants to identify local peaks in productivity, where a local peak is defined as a productivity value that is greater than or equal to the productivity values of its immediate neighbors. The first and last elements of the array are considered local peaks if they are greater than or equal to their single neighbor. Write a function to identify all the local peaks for each team member. Input The first line contains an integer n (1 ≤ n ≤ 10^5) indicating the number of team members. Each of the following n lines represents a team member and contains a sequence of k integers (1 ≤ k ≤ 10^5) which represent the productivity values on different days. Output For each team member, print the 1-based indices of the local peaks in their productivity arrays. Print the results on separate lines. Example Input 3 1 3 2 4 1 5 10 9 8 7 6 5 5 5 5 5 Output 2 4 6 1 1 2 3 4 5 Explanation For the first team member, the local peaks are at indices 2 (productivity value 3), 4 (productivity value 4), and 6 (productivity value 5). For the second team member, since productivity is decreasing each day, the first day\'s productivity is a local peak. For the third team member, all days have equal productivity, so every day is considered a local peak.","solution":"def find_local_peaks(n, member_productivities): Returns the indices of the local peaks for each team member. Parameters: n (int): Number of team members. member_productivities (List[List[int]]): List of productivity lists for each team member. Returns: List[List[int]]: List of lists containing the indices of local peaks for each team member. result = [] for productivity in member_productivities: peaks = [] k = len(productivity) if k == 1: peaks.append(1) else: if productivity[0] >= productivity[1]: peaks.append(1) for i in range(1, k-1): if productivity[i] >= productivity[i-1] and productivity[i] >= productivity[i+1]: peaks.append(i + 1) if productivity[k-1] >= productivity[k-2]: peaks.append(k) result.append(peaks) return result"},{"question":"Write a program to determine if a word can be constructed using characters from a given set of cubes. Each cube has exactly six faces with one letter on each face. Constraints * 1 leq number of cubes leq 20 * Each cube consists of 6 different lowercase letters * The maximum length of the word to be formed is 20 Input In the first line, the number of cubes n is given. In the next n lines, each line contains 6 different lowercase letters representing a cube. In the last line, the word to be formed is given. Output If the word can be formed using the cubes, print Yes in a line. Otherwise, print No. Examples Input 3 a b c d e f g h i j k l m n o p q r dog Output Yes Input 3 a b c d e f g h i j k l m n o p q r cat Output No","solution":"def can_form_word(n, cubes, word): from collections import defaultdict # Create a list to keep track of available cubes for each character char_to_cubes = defaultdict(list) for i, cube in enumerate(cubes): for char in cube: char_to_cubes[char].append(i) # Keep track of which cubes are used used_cubes = [False] * n # Function to check if we can form the word starting from a specific position def backtrack(position): if position == len(word): return True char = word[position] for cube_index in char_to_cubes.get(char, []): if not used_cubes[cube_index]: used_cubes[cube_index] = True if backtrack(position + 1): return True used_cubes[cube_index] = False return False return \\"Yes\\" if backtrack(0) else \\"No\\""},{"question":"Given an integer array `arr` of size `n`, you are allowed to perform the following operation any number of times: - Choose any 3 different indices `i`, `j`, k` such that `arr[i] = arr[j] = arr[k]` and remove the elements at these indices from the array. Your task is to find the maximum number of elements that can be removed from the array using the above operation. # Input The input is given from Standard Input in the following format: n arr Where: - `n`: an integer (1 ≤ n ≤ 10^5) representing the size of the array. - `arr`: a list of `n` integers (1 ≤ arr[i] ≤ 10^6) representing the elements of the array. # Output Print a single integer representing the maximum number of elements that can be removed from the array. # Example Input ``` 7 1 2 2 1 2 1 3 ``` Output ``` 6 ``` Input ``` 8 4 4 4 4 4 4 4 4 ``` Output ``` 6 ``` # Explanation **Example 1** The array is `[1, 2, 2, 1, 2, 1, 3]`. We can choose indices `(0, 3, 5)` to remove `1\'s`. Array becomes `[2, 2, 2, 3]`. Then, we can choose indices `(1, 2, 4)` to remove `2\'s`. Array becomes `[3]`. Maximum 6 elements can be removed. **Example 2** The array is `[4, 4, 4, 4, 4, 4, 4, 4]`. We can choose indices `(0, 1, 2)`, `(3, 4, 5)`, and `(6, 7, 8)` consecutively to remove all `4\'s` in the array. Maximum 6 elements can be removed.","solution":"def max_elements_removed(n, arr): from collections import Counter # Count frequency of each element freq = Counter(arr) # Calculate the total number of elements that can be removed total_removed = sum((count // 3) * 3 for count in freq.values()) return total_removed"},{"question":"Given a sequence of integers, write a program to find the length of the longest subsequence that is first increasing and then decreasing. Therefore, an ideal subsequence should have all elements in increasing order followed by all elements in decreasing order. Constraints: - The length of the list ( n ) is between 1 and 2000. - All elements in the list are integers between 1 and 10^4. Input: - The first line contains an integer ( n ), the length of the sequence. - The second line contains ( n ) integers representing the sequence. Output: - Print a single integer, the length of the longest subsequence which is first increasing and then decreasing. Examples: Input: ``` 8 1 11 2 10 4 5 2 1 ``` Output: ``` 6 ``` Explanation: The longest bitonic subsequence is [1, 2, 10, 4, 2, 1] Input: ``` 6 12 11 40 5 3 1 ``` Output: ``` 5 ``` Explanation: The longest bitonic subsequence is [12, 11, 5, 3, 1]","solution":"def longest_bitonic_subseq_length(seq): Returns the length of the longest subsequence that is first increasing and then decreasing. n = len(seq) if n == 0: return 0 # Initialize the list for longest increasing subsequence (LIS) ending at each index lis = [1] * n for i in range(1, n): for j in range(i): if seq[i] > seq[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Initialize the list for longest decreasing subsequence (LDS) starting at each index lds = [1] * n for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if seq[i] > seq[j] and lds[i] < lds[j] + 1: lds[i] = lds[j] + 1 # Calculate the maximum length of bitonic subsequence max_length = 0 for i in range(n): max_length = max(max_length, lis[i] + lds[i] - 1) return max_length"},{"question":"Anna loves experimenting with different patterns of strings. Anna\'s current experiment involves producing new strings based on specific rules for a given string. A string is called \\"special\\" if it consists of exactly k unique characters. Anna has two types of operations she can perform on a string s: 1. Determine if the current string is special or not. 2. Add a new character to the end of the string. Your task is to help Anna perform a series of q operations on a given string s with the length n, and print the result for each operation of the first type. Input - The first line contains three integers n, k, and q (1 ≤ n ≤ 100,000; 1 ≤ k ≤ 26; 1 ≤ q ≤ 100,000) — the length of the initial string, the number of unique characters needed to make the string special, and the number of queries. - The second line contains the initial string s of length n. - Each of the next q lines contains one of the following queries: * \\"1\\" — the first type of query to check if the string is special. * \\"2 c\\" (c is a lowercase English letter) — the second type of query to add the character c to the end of the string. Output - For each query of the first type, output \\"YES\\" if the string is special, otherwise \\"NO\\". Examples Input 6 3 5 abcdef 1 2 x 1 2 y 1 Output NO NO YES Input 4 2 3 aabb 1 2 a 1 Output YES YES Note In the first example: - The initial string \\"abcdef\\" has 6 unique characters, which is more than 3, so it is not special at the first query. - After adding \'x\', the string becomes \\"abcdefx\\", which still has more than 3 unique characters. - After adding \'y\', the string becomes \\"abcdefxy\\" with 8 unique characters, which is more than 3, so it is not special. - After the second \\"1\\" query, the string becomes \\"abcdefxya\\", and it is not until the third \\"1\\" query, with only 3 unique characters remaining (a, b, c), that it becomes special. In the second example: - The initial string \\"aabb\\" consists of exactly 2 unique characters (a and b), so it is special at the first query. - After adding \'a\', the string becomes \\"aabba\\" with 2 unique characters, which is still special at the second query.","solution":"def is_special(s, k): Determines if string s is special (contains exactly k unique characters). unique_chars = set(s) return len(unique_chars) == k def process_queries(n, k, q, s, queries): Processes a series of q queries on string s. results = [] for query in queries: if query[0] == \'1\': if is_special(s, k): results.append(\\"YES\\") else: results.append(\\"NO\\") elif query[0] == \'2\': _, char = query.split() s += char return results"},{"question":"You\'re working on a simple image processing tool, and one of the features you need to implement is merging of two grayscale images. Each pixel in these images has an intensity value between 0 and 255. The merged image should contain pixels calculated as the average of the corresponding pixels in the two input images. Write a program that receives two grayscale images (represented as 2D arrays of integers) of the same size and outputs the resulting merged image. Each pixel value in the output image should be the average of the corresponding pixels in the two input images, rounded down to the nearest integer. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 500), which indicate the number of rows and columns in the images, respectively. The next n lines contain m integers each, representing the first image. The following n lines also contain m integers each, representing the second image. Output Output n lines, each containing m integers, representing the merged image where each pixel is the average of the corresponding pixels from the two images. Examples Input 2 3 100 150 200 50 100 150 200 250 100 150 200 50 Output 150 200 150 100 150 100 Input 3 3 0 0 0 255 255 255 128 128 128 64 64 64 192 192 192 0 128 255 Output 32 32 32 223 223 223 64 128 191","solution":"def merge_images(n, m, image1, image2): Merges two grayscale images by averaging their pixel values. :param n: Number of rows in the image :param m: Number of columns in the image :param image1: First grayscale image represented as a 2D list of integers :param image2: Second grayscale image represented as a 2D list of integers :return: Merged grayscale image represented as a 2D list of integers merged_image = [] for i in range(n): merged_row = [] for j in range(m): average_pixel = (image1[i][j] + image2[i][j]) // 2 merged_row.append(average_pixel) merged_image.append(merged_row) return merged_image"},{"question":"The city of Bitville has a peculiar problem with its streets. The streets are arranged in a perfect grid, and each intersection is identified by its coordinates (x, y) on the grid. The coordinates of the intersections range from (0, 0) to (N, N). Mayor Byte wants to establish telecommunication lines between intersections, but these lines can only run along the perimeter of rectangles formed with the intersections being the corners. Given two pairs of coordinates representing two opposite corners of the rectangle, write a program to calculate the number of unique rectangles that can be formed with sides parallel to the axes of the grid and having these points as two of their corners. A unique rectangle has distinct edge lengths or is positioned differently on the grid. Input The input is given in the following format: x1 y1 x2 y2 - (x1, y1) and (x2, y2) are the coordinates of the two opposite corners (0 ≤ x1, y1, x2, y2 ≤ N). - x1 ≠ x2 and y1 ≠ y2 Output Output the number of unique rectangles that can be formed. Example Input 1 2 3 4 Output 4 Input 0 0 2 3 Output 9 Explanation: - For the first example, the possible rectangles are: - (1, 2), (3, 2), (1, 4), (3, 4) - (1, 2), (3, 2), (1, 3), (3, 3) - (1, 3), (3, 3), (1, 4), (3, 4) - (2, 2), (3, 2), (2, 4), (3, 4) - For the second example, the possible rectangles are combinations formed between: - Coordinates (0, 0), (0, 3), (2, 0), (2, 3) - Coordinates (0, 0), (0, 2), (2, 0), (2, 2) - Coordinates (0, 1), (2, 1), (0, 3), (2, 3) - etc. for all possible coordinates between the given points.","solution":"def count_unique_rectangles(x1, y1, x2, y2): Given two pairs of coordinates representing two opposite corners of a rectangle, returns the number of unique rectangles that can be formed with these points as two of their corners. dx = abs(x2 - x1) dy = abs(y2 - y1) return (dx) * (dy)"},{"question":"Niklaus has a list of integers `b` that he believes contains both positive and negative values. He is interested in finding an interesting set of numbers from this list with a constrained difference. Specifically, he wants to know the smallest possible difference between the maximum and minimum values of any subset of elements from `b` of size exactly `k`. For example, suppose the list `b` is [6, 3, 8, 2, 9, 1] with `k` equal to 3. One possible subset of size 3 is [3, 2, 1], and the difference between the maximum and minimum values of this subset is 2. Your task is to help Niklaus determine the smallest difference between the maximum and minimum values of any subset of `b` of size exactly `k`. **Input** - The first line contains an integer `m` (1 ≤ m ≤ 10^5) — the number of integers in the list. - The second line contains `m` integers `b_1, b_2, ..., b_m` (-10^6 ≤ b_i ≤ 10^6) — the elements of the list `b`. - The third line contains an integer `k` (1 ≤ k ≤ m) — the size of the subset. **Output** - Print a single integer — the smallest difference between the maximum and minimum values of any subset of size exactly `k`. **Example** Input: ``` 6 6 3 8 2 9 1 3 ``` Output: ``` 2 ``` Explanation: In this example, the subset [3, 2, 1] has the minimum difference of 2 between the maximum (which is 3) and the minimum (which is 1) values among all possible subsets of size 3.","solution":"def smallest_difference(m, b, k): Returns the smallest difference between the maximum and minimum values of any subset of size exactly k from the list b. b.sort() # Sort the list to make it easier to find the smallest range min_diff = float(\'inf\') # Iterate over the sorted list and find the minimum range of size k for i in range(m - k + 1): current_diff = b[i + k - 1] - b[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"Appleman has n apples arranged in a line, and each apple is either healthy or rotten. Appleman performs a series of operations where in each operation he can choose any subarray and change its contents to either all healthy or all rotten. Appleman wants to know the minimum number of operations required to make the entire array healthy. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of apples. The second line contains a string s of length n, where s[i] is either \'H\' (indicating a healthy apple) or \'R\' (indicating a rotten apple). Output Output a single integer — the minimum number of operations required to make all apples healthy. Examples Input 5 HRRRH Output 2 Input 6 HHRRHH Output 1 Input 8 RRRHRRRR Output 2","solution":"def min_operations_to_make_healthy(n, s): Returns the minimum number of operations required to make all apples healthy. Parameters: n (int): The number of apples. s (str): A string of length n where each character is \'H\' or \'R\'. Returns: int: Minimum number of operations required to make all apples healthy. # Split the string based on \'H\' changes to \'R\' or \'R\' changes to \'H\' from re import findall segments = findall(r\'H+|R+\', s) # Count the number of \'R\' segments r_count = sum(1 for segment in segments if segment[0] == \'R\') # The minimum number of operations is the count of \'R\' segments return r_count"},{"question":"You are given a list of n integers and q queries. Each query consists of a single integer k. For each query, you need to determine the number of distinct integers in the list that are greater than or equal to k. Input The first line contains two integers n and q, denoting the number of elements in the list and the number of queries, respectively. The second line contains n space-separated integers representing the elements of the list. Each of the following q lines contains a single integer k. Output For each query, print the number of distinct integers from the list that are greater than or equal to k. Constraints 1 <= n, q <= 100000 1 <= element of list, k <= 1000000000 Example Input: 6 3 1 3 3 5 7 9 4 3 10 Output: 3 4 0 Explanation For the first query, the integers greater than or equal to 4 are 5, 7, and 9 which are 3 distinct integers. For the second query, the integers greater than or equal to 3 are 3, 5, 7, and 9 which are 4 distinct integers. For the third query, there are no integers greater than or equal to 10 in the list.","solution":"def count_distinct_greater_or_equal(nums, queries): # Convert nums list to a set to get distinct elements distinct_nums = sorted(set(nums)) result = [] for k in queries: # Find the number of elements greater than or equal to k using binary search low, high = 0, len(distinct_nums) while low < high: mid = (low + high) // 2 if distinct_nums[mid] >= k: high = mid else: low = mid + 1 result.append(len(distinct_nums) - low) return result"},{"question":"A software company is holding a contest to find the best software engineer. The contest consists of several problems of varying difficulty levels. Each problem has a different score associated with it. The engineer who gets the highest total score wins. Create a program that reads the list of participant numbers and their scores for each problem and outputs the participant number of the winner and their total score. If there are multiple winners with the same total score, output the one with the lowest participant number. input The input is given in the following format: p q a1 s1_1 s1_2 ... s1_q a2 s2_1 s2_2 ... s2_q :: ap sp_1 sp_2 ... sp_q - p (1 ≤ p ≤ 20) represents the number of participants - q (1 ≤ q ≤ 10) represents the number of problems - ai represents the participant number of the ith contestant - si_j (0 ≤ si_j ≤ 100) represents the score of the ith contestant on the jth problem output Output the winner\'s participant number and their total score on one line separated by a space. Example Input 3 3 1 90 85 85 2 70 80 100 3 100 80 80 Output 1 260","solution":"def find_best_engineer(participants): max_total_score = -1 winner_number = float(\'inf\') for participant in participants: total_score = sum(participant[1:]) if total_score > max_total_score or (total_score == max_total_score and participant[0] < winner_number): max_total_score = total_score winner_number = participant[0] return (winner_number, max_total_score)"},{"question":"A robot is placed on an n x n grid and needs to collect the maximum number of items scattered across the grid. The robot starts at the top-left corner of the grid (position (0, 0)) and can only move either right or down to reach the bottom-right corner (position (n-1, n-1)). Each cell in the grid may contain some items, represented by a non-negative integer. The robot\'s task is to find a path that will maximize the total number of items collected. Input The first line contains a single integer n (1 ≤ n ≤ 100), representing the size of the grid. The next n lines each contain n space-separated integers, where the j-th integer of the i-th row represents the number of items (0 ≤ items ≤ 100) in the cell (i, j). Output Print a single integer which is the maximum number of items the robot can collect on its path from the top-left to the bottom-right corner of the grid. Example Input 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 0 2 3 4 Output 7","solution":"def max_items_collected(n, grid): Returns the maximum number of items collected by the robot while moving from top-left to bottom-right of the grid. :param n: int, size of the grid :param grid: List[List[int]], n x n grid representing items in each cell # Initialize a 2D dp array with the same dimensions as the grid dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1]"},{"question":"Alice loves gardening. She recently bought a rectangular plot where she wants to plant different types of flowers. To maximize the beauty of her garden, Alice decided to plant flowers in non-overlapping rectangular sections. Each section can only contain one type of flower. There are different types of flowers, and each type has a specified blooming period, during which Alice’s garden looks particularly beautiful. Alice needs your help in planning her garden in such a way that the total number of rectangular sections (each containing one type of flower) is maximized. Given the dimensions of the garden plot, and the constraints on the minimum area required by each flower section, write a program that outputs the maximum number of rectangular flower sections Alice can create in her garden. Input The first line of input contains a single integer T, the number of test cases. For each test case: - The first line contains two integers W and H, representing the width and height of the garden plot in meters. - The second line contains two integers A and B, where A represents the minimum width required for a flower section and B represents the minimum height required for a flower section. Output For each test case, print the maximum number of rectangular flower sections that can be created in the garden. Constraints - 1 ≤ T ≤ 10 - 1 ≤ W, H, A, B ≤ 10000 Example Input 3 10 10 2 2 15 12 3 4 9 8 1 1 Output 25 15 72 Explanation For the first test case: - The garden plot is 10 meters by 10 meters. - The minimum size of each flower section is 2 meters by 2 meters. - The maximum number of sections that can be created is (10 / 2) * (10 / 2) = 25. For the second test case: - The garden plot is 15 meters by 12 meters. - The minimum size of each flower section is 3 meters by 4 meters. - The maximum number of sections that can be created is (15 / 3) * (12 / 4) = 15. For the third test case: - The garden plot is 9 meters by 8 meters. - The minimum size of each flower section is 1 meter by 1 meter. - The maximum number of sections that can be created is (9 / 1) * (8 / 1) = 72.","solution":"def max_flower_sections(T, test_cases): Given the number of test cases and the details of each test case, this function returns a list of maximum number of rectangular flower sections that can be created in the garden for each test case. Parameters: T (int): Number of test cases test_cases (list): List of tuples, where each tuple contains: W, H (int): Dimensions of the garden plot A, B (int): Minimum dimensions of each flower section Returns: list: List of maximum number of rectangular flower sections for each test case results = [] for W, H, A, B in test_cases: max_sections = (W // A) * (H // B) results.append(max_sections) return results"},{"question":"You are given a 2D matrix of characters and a list of words. Your task is to determine if each word in the list exists in the matrix. A word is said to exist in the matrix if it can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally, vertically, or diagonally neighboring. The same letter cell may not be used more than once within a single word. Write a function `wordSearch(matrix, words)` that takes in two parameters: - **matrix**: A list of lists of characters representing the 2D grid. - **words**: A list of strings representing the words to search for in the matrix. The function should return a list of boolean values where each value corresponds to whether the word at that index in the input list `words` exists in the matrix. # Constraints: - The characters in the matrix are all lowercase English letters. - The words consist of lowercase English letters. - The dimensions of the matrix are at most 100x100. - The length of each word is at most 10. - The number of words in the list is at most 1000. # Input: - A 2D list of characters representing the matrix - A list of strings representing the words to be searched # Output: - A list of boolean values indicating whether each word exists in the matrix. # Example: ```python matrix = [ [\'a\', \'b\', \'c\', \'e\'], [\'s\', \'f\', \'c\', \'s\'], [\'a\', \'d\', \'e\', \'e\'] ] words = [\\"abcced\\", \\"see\\", \\"abcb\\", \\"abfde\\"] # Expected Output: [True, True, False, True] ``` # Explanation: - \\"abcced\\" can be found starting from (0,0) following the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1). - \\"see\\" can be found starting from (2,0) following the path (2,0) -> (2,1) -> (1,2). - \\"abcb\\" cannot be formed as \'b\' at (0,1) is reused. - \\"abfde\\" can be found starting from (0,0) following the path (0,0) -> (0,1) -> (0,2) -> (1,1) -> (2,2). Write the implementation of the function `wordSearch(matrix, words)`.","solution":"def wordSearch(matrix, words): def dfs(matrix, word, index, x, y, visited): if index == len(word): return True if x < 0 or x >= len(matrix) or y < 0 or y >= len(matrix[0]): return False if (x, y) in visited or matrix[x][y] != word[index]: return False visited.add((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]: if dfs(matrix, word, index + 1, x + dx, y + dy, visited): return True visited.remove((x, y)) return False def exist(matrix, word): for i in range(len(matrix)): for j in range(len(matrix[0])): if dfs(matrix, word, 0, i, j, set()): return True return False return [exist(matrix, word) for word in words]"},{"question":"Alex is passionate about photography and loves capturing moments. He has recently been interested in a particular style of black and white photography. To create this effect, he processes an image represented as a 2D matrix of integers where each integer represents the grayscale value of a pixel. To achieve the desired effect, Alex wants to highlight a specific region in the matrix by applying a transformation to a submatrix. Write a function that, given a 2D matrix of integers representing grayscale values, the coordinates of the top-left corner of the submatrix (r1, c1), and the bottom-right corner of the submatrix (r2, c2), increases the grayscale value of all pixels in the submatrix by a given value `k`. If the resulting grayscale value of a pixel exceeds 255, it should be capped at 255. Implement the function: ```python def enhance_submatrix(matrix: List[List[int]], r1: int, c1: int, r2: int, c2: int, k: int) -> List[List[int]]: ____# Your code goes here ``` **Input:** - A 2D list `matrix` of integers representing the grayscale values. - Integers `r1`, `c1` being the row and column of the top-left corner of the submatrix. - Integers `r2`, `c2` being the row and column of the bottom-right corner of the submatrix. - An integer `k`, the value by which each pixel value in the submatrix should be increased. **Output:** - A 2D list representing the matrix after applying the transformation to the specified submatrix. **Constraints:** - 1 ≤ number of rows in matrix ≤ 100 - 1 ≤ number of columns in matrix ≤ 100 - 0 ≤ matrix[i][j], k ≤ 255 - 0 ≤ r1 ≤ r2 < number of rows - 0 ≤ c1 ≤ c2 < number of columns **Examples:** Input 1: matrix = [ [100, 100, 100], [120, 120, 120], [140, 140, 140] ] r1 = 1, c1 = 1, r2 = 2, c2 = 2, k = 10 Output 1: [ [100, 100, 100], [120, 130, 130], [140, 150, 150] ] Input 2: matrix = [ [50, 50, 50, 50], [60, 60, 60, 60], [70, 70, 70, 70], [80, 80, 80, 80] ] r1 = 0, c1 = 0, r2 = 3, c2 = 3, k = 20 Output 2: [ [70, 70, 70, 70], [80, 80, 80, 80], [90, 90, 90, 90], [100, 100, 100, 100] ] Input 3: matrix = [ [200, 210], [220, 230] ] r1 = 0, c1 = 0, r2 = 1, c2 = 1, k = 50 Output 3: [ [250, 255], [255, 255] ]","solution":"def enhance_submatrix(matrix, r1, c1, r2, c2, k): Enhances a submatrix within the given 2D matrix by increasing its grayscale value by k. Values exceeding 255 are capped at 255. Args: matrix (List[List[int]]): The 2D list representing the grayscale values. r1 (int): Row index of the top-left corner of the submatrix. c1 (int): Column index of the top-left corner of the submatrix. r2 (int): Row index of the bottom-right corner of the submatrix. c2 (int): Column index of the bottom-right corner of the submatrix. k (int): The value to increase the grayscale values by. Returns: List[List[int]]: The transformed 2D list. for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): matrix[i][j] = min(matrix[i][j] + k, 255) return matrix"},{"question":"Joe, a software developer, is working on a project that involves manipulating arrays of integers. He has come across a situation where he needs to find the length of the longest contiguous subarray in which all the elements are distinct. Joe wants your help to write an efficient code for this task. INPUT: The first line of the input contains the number of test cases. Each test case consists of a single line containing a space-separated list of integers. OUTPUT: For each test case, output a single integer representing the length of the longest contiguous subarray with all distinct elements. CONSTRAINTS: - The length of the array will not exceed 100,000. - The array will contain integers. SAMPLE INPUT: 2 1 2 3 1 2 3 4 1 1 1 1 1 SAMPLE OUTPUT: 4 1","solution":"def longest_contiguous_subarray_with_distinct_elements(arr): Finds the length of the longest contiguous subarray with all distinct elements. Parameters: arr (list of int): The list of integers to analyze Returns: int: The length of the longest contiguous subarray with all distinct elements n = len(arr) if n == 0: return 0 last_seen = {} max_length = 0 start_window = 0 for end_window in range(n): if arr[end_window] in last_seen and last_seen[arr[end_window]] >= start_window: start_window = last_seen[arr[end_window]] + 1 last_seen[arr[end_window]] = end_window max_length = max(max_length, end_window - start_window + 1) return max_length def process_input(input_list): Process input for multiple test cases. Parameters: input_list (list of str): The input list of strings, with the first string being the number of test cases, followed by the test cases themselves. Returns: list of int: The output for each test case. num_test_cases = int(input_list[0]) results = [] for i in range(1, num_test_cases + 1): arr = list(map(int, input_list[i].split())) results.append(longest_contiguous_subarray_with_distinct_elements(arr)) return results"},{"question":"Create a function that takes a string as input and returns the length of the longest substring without repeating characters. The function should maintain optimal performance even for very long strings. Characters are case-sensitive, so \\"A\\" and \\"a\\" are considered different characters. # Function Signature ```python def length_of_longest_substring(s: str) -> int: ``` # Input - A single string `s` (1 ≤ length of s ≤ 10^5), can contain any ASCII characters. # Output - An integer representing the length of the longest substring without repeating characters. # Example ```python # Example 1 s = \\"abcabcbb\\" # The longest substring without repeating characters is \\"abc\\", which the length is 3. print(length_of_longest_substring(s)) # Output: 3 # Example 2 s = \\"bbbbb\\" # The longest substring without repeating characters is \\"b\\", which the length is 1. print(length_of_longest_substring(s)) # Output: 1 # Example 3 s = \\"pwwkew\\" # The longest substring without repeating characters is \\"wke\\", which the length is 3. print(length_of_longest_substring(s)) # Output: 3 # Example 4 s = \\" \\" # The longest substring without repeating characters is \\" \\", which the length is 1. print(length_of_longest_substring(s)) # Output: 1 ``` # Constraints - The function must work efficiently with an input string up to 10^5 characters long. - Consider using a sliding window approach or a similar technique to ensure optimal performance.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. n = len(s) max_length = 0 start = 0 used_chars = {} for end in range(n): if s[end] in used_chars and used_chars[s[end]] >= start: start = used_chars[s[end]] + 1 used_chars[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"A farmer has a rectangular grid of crops with n rows and m columns. Each cell of the grid contains a certain number of crops. The farmer wants to create a \\"harvest route\\" that maximizes the total number of crops collected. A \\"harvest route\\" starts at the top-left corner (cell (1,1)) and ends at the bottom-right corner (cell (n,m)). The farmer can only move either right or down from any cell. The farmer can\'t move diagonally or go back to a previous cell. Given the grid, determine the maximum number of crops that can be collected by following the harvest route. Input Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 20). Each of the next t sets of lines contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid, followed by n lines each containing m integers representing the number of crops in each cell of the grid (0 ≤ crop value ≤ 100). Output For each test case, print one line containing the maximum number of crops that can be collected. Example Input 2 3 3 1 2 3 4 5 6 7 8 9 2 2 10 10 10 10 Output 29 30 Note In the first testcase, one possible harvest route is: 1 -> 4 -> 5 -> 6 -> 9, which collects a total of 29 crops. In the second testcase, a possible harvest route is: 10 -> 10 -> 10, which collects a total of 30 crops.","solution":"def max_crops_collected(test_cases): results = [] for case in test_cases: n, m, grid = case # Create a dp table to store the maximum crops collected at each cell dp = [[0] * m for _ in range(n)] # Initialize the top-left corner dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The result for this test case is in the bottom-right corner results.append(dp[-1][-1]) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, m = map(int, lines[index].split()) grid = [list(map(int, lines[index + i + 1].split())) for i in range(n)] test_cases.append((n, m, grid)) index += n + 1 return test_cases"},{"question":"Alex is organizing a friendly online coding competition for a group of n participants. Each participant can solve multiple problems, and Alex wants to give an award based on the problems consecutively solved by each participant in increasing order of difficulty. To simplify the award calculation, Alex decides to count the longest consecutive problem streak for each participant. Consecutive problems mean the problems\' IDs should follow each other in numerical order (like 1, 2, 3, etc.). Write a program to help Alex determine the longest streak of consecutively solved problems for each participant. The input will give you the number of problems solved by each participant and the problem IDs sorted in ascending order. Constraints * 1 ≤ n ≤ 100 Input The input consists of several sets of data. The first line of each dataset contains one integer, n, the number of problems solved by the participant. The second line contains n integers, which are the IDs of the problems solved by the participant in ascending order. The input terminates when n = 0. Output For each dataset, print the length of the longest consecutive problems streak in a new line. Example Input 5 2 3 4 6 7 4 1 2 3 5 0 Output 3 3","solution":"def longest_consecutive_streak(n, problems): if n == 0: return 0 max_streak = 1 current_streak = 1 for i in range(1, n): if problems[i] == problems[i-1] + 1: current_streak += 1 else: max_streak = max(max_streak, current_streak) current_streak = 1 return max(max_streak, current_streak) def process_input(data): results = [] for n, problems in data: if n == 0: break results.append(longest_consecutive_streak(n, problems)) return results"},{"question":"Alice is interested in buying new books for her library. Her favorite bookstore has an interesting offer on books in a series. Specifically, the bookstore states that if you buy two consecutive books from a series, you get a discount. Alice can choose to buy any number of books from the series, but she must always buy books in consecutive order. Given that the total number of books in the series is N and the number of books Alice wants to buy consecutively is K, calculate the number of different ways Alice can choose books such that the length of the consecutive sequence of books Alice buys is less than or equal to K. For instance, if N = 5 and K = 3, the valid options for Alice are: - 1 book: [1], [2], [3], [4], [5] - 2 books: [1, 2], [2, 3], [3, 4], [4, 5] - 3 books: [1, 2, 3], [2, 3, 4], [3, 4, 5] Calculate the total number of ways Alice can buy the books. Input The input consists of a single line containing two integers N and K (1 ≤ N ≤ 1000, 1 ≤ K ≤ N). Output Print one integer, the total number of ways Alice can buy books such that the length of the consecutive sequence is less than or equal to K. Examples Input 5 3 Output 12 Input 4 2 Output 7 Note In the first example, Alice can choose the following books: - 1 book: [1], [2], [3], [4], [5] (5 ways) - 2 books: [1, 2], [2, 3], [3, 4], [4, 5] (4 ways) - 3 books: [1, 2, 3], [2, 3, 4], [3, 4, 5] (3 ways) In total, there are 5 + 4 + 3 = 12 ways. In the second example, Alice can choose the following books: - 1 book: [1], [2], [3], [4] (4 ways) - 2 books: [1, 2], [2, 3], [3, 4] (3 ways) In total, there are 4 + 3 = 7 ways.","solution":"def count_ways(N, K): Return the number of ways Alice can buy consecutive books such that the length of the consecutive sequence is less than or equal to K. total_ways = 0 for x in range(1, K + 1): total_ways += N - x + 1 return total_ways"},{"question":"In a distant kingdom of Algorithmlandia, there exists a unique tradition for creating new passwords every month. The King has a set of rules for generating these passwords, and it is your task to help the palace IT department ensure these rules are met. The rules are as follows: 1. Each password has exactly n characters. 2. A password can only contain the first k letters of the English alphabet (letters are case-insensitive). 3. No two adjacent characters in the password should be the same. 4. The password must meet the standard of \'maximum distinctive variety,\' which means that the password should have as many different characters as possible while adhering to the aforementioned rules. Your task is to generate a valid password based on these rules or determine that it\'s not possible to create such a password. **Input:** The first line of input contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 26), representing the length of the password and the number of distinct characters from the English alphabet that can be used, respectively. **Output:** Output the password if it is possible to create one under the given constraints. If no valid password can be created, output \\"NO\\" (without quotes). **Examples:** Input: 5 3 Output: abcab Input: 4 1 Output: NO Input: 6 2 Output: ababab **Explanation**: For the first example, we need a password of length 5 using only the first 3 letters of the alphabet. \\"abcab\\" is a valid password as it meets the required conditions. In the second example, since we can only use the first letter \'a\', it\'s impossible to create a password where no two adjacent characters are the same, hence \\"NO\\". The third example shows that using two characters (\'a\' and \'b\'), we can alternately place them to generate a valid password.","solution":"def generate_password(n, k): if k == 1 and n > 1: return \\"NO\\" alphabet = \'abcdefghijklmnopqrstuvwxyz\' password = [] for i in range(n): password.append(alphabet[i % k]) return \'\'.join(password)"},{"question":"Given an array of positive integers, you need to find the smallest subarray whose sum of elements is greater than or equal to a given value `s`. Input The first line of input contains an integer `T`, the number of test cases. Each test case consists of two lines: - The first line contains two integers, `n` (the length of the array) and `s` (the target sum). - The second line contains `n` positive integers, the elements of the array. Output For each test case, output the length of the smallest subarray with a sum greater than or equal to `s`. If no such subarray exists, output `0`. Constraints 1 ≤ T ≤ 10^4 1 ≤ n ≤ 10^5 1 ≤ a_i ≤ 10^9 (where a_i is the i-th element of the array) 1 ≤ s ≤ 10^9 It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. Example Input 3 5 12 1 2 3 4 5 6 9 2 1 5 2 8 1 4 15 1 2 3 4 Output 3 2 0 Explanation 1. For the first test case, the smallest subarray with sum ≥ 12 is [3, 4, 5], with length 3. 2. For the second test case, the smallest subarray with sum ≥ 9 is [5, 2, 8] or [8, 1], with length 2. 3. For the third test case, no subarray has a sum ≥ 15, so the output is 0.","solution":"def min_subarray_length(n, s, arr): Returns the length of the smallest subarray with sum greater than or equal to s. If no such subarray exists, returns 0. min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= s: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else 0 def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] idx = 1 for _ in range(T): n, s = map(int, lines[idx].split()) arr = list(map(int, lines[idx + 1].split())) result = min_subarray_length(n, s, arr) results.append(result) idx += 2 return results"},{"question":"Vasya loves playing with numbers. Recently he discovered a fascinating game on scores of his favorite basketball team. Given a sequence representing the scores of each match the team played, he wants to find the length of the longest sub-sequence where the sum of scores does not exceed a given integer k. A sub-sequence is defined as a sequence derived by deleting some or no elements of the original sequence without changing the order of the remaining elements. Can you help Vasya find this longest sub-sequence? **Input** The first line contains two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ 10^9) — the number of matches and the maximum allowed sum of scores in the sub-sequence, respectively. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the scores of the matches. **Output** Output a single integer — the length of the longest sub-sequence where the sum of the scores does not exceed k. **Examples** **Input** ``` 5 9 1 2 3 4 5 ``` **Output** ``` 3 ``` **Input** ``` 3 15 5 5 5 ``` **Output** ``` 3 ``` **Input** ``` 5 5 6 7 8 9 10 ``` **Output** ``` 0 ``` **Note** In the first example, one of the longest sub-sequences with sum less than or equal to 9 is [1, 2, 3] with length 3. In the second example, the whole sequence has a sum of 15 which is within the limit, so the result is the length of the entire sequence. In the third example, it is not possible to form any sub-sequence with sum 5 or less, so the result is 0.","solution":"def longest_subsequence_length(n, k, scores): Returns the length of the longest sub-sequence where the sum of the scores does not exceed k. # Initialize variables curr_sum = 0 max_length = 0 start = 0 # Use a sliding window approach for end in range(n): curr_sum += scores[end] # Adjust the window to maintain the sum <= k while curr_sum > k and start <= end: curr_sum -= scores[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array of integers and a target value. Your task is to determine if there are two distinct indices i and j in the array such that the absolute difference between the values at these indices is equal to the target value. Write a function to solve this problem. Input format: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the array elements. - The third line contains a single integer, the target value. Output format: - Print \\"YES\\" if such a pair of distinct indices exists; otherwise, print \\"NO\\". Constraints: 1 ≤ N ≤ 100,000 -10^9 ≤ array elements ≤ 10^9 0 ≤ target ≤ 10^9 Example: Input: 6 1 5 3 4 2 7 2 Output: YES Explanation: The pairs (5, 3) and (4, 2) both have an absolute difference of 2.","solution":"def find_pair_with_difference(arr, target): Determines if there are two distinct indices i and j in the array such that the absolute difference between the values at these indices is equal to the target value. :param arr: List of integers :param target: Target value for the absolute difference :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" value_indices = {} for idx, value in enumerate(arr): if (value + target) in value_indices or (value - target) in value_indices: return \\"YES\\" value_indices[value] = idx return \\"NO\\""},{"question":"Given an array of n positive integers and a number k, find out if there exists a combination of the array elements that sums up to k. Note that each element in the array can be used only once in a combination. Input The first line of the input contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000) – the number of elements in the array and the target sum respectively. The second line contains n positive integers, each less than or equal to 100 – the elements of the array. Output Print \\"YES\\" (without quotes) if there exists a combination of elements that sums up to k, otherwise print \\"NO\\". Examples Input 5 9 2 3 7 8 10 Output YES Input 4 13 1 2 3 4 Output NO Input 3 5 1 4 5 Output YES Input 6 12 1 2 3 4 5 6 Output YES","solution":"def subset_sum_exists(n, k, arr): Given an array of n positive integers and a number k, finds out if there exists a combination of the array elements that sums up to k. Each element in the array can be used only once in a combination. dp = [False] * (k + 1) dp[0] = True for num in arr: for j in range(k, num - 1, -1): if dp[j - num]: dp[j] = True return \\"YES\\" if dp[k] else \\"NO\\""},{"question":"You are given two integers n and k. You need to generate a string of length n consisting of lowercase English letters such that every substring of length k or more contains all the vowels (a, e, i, o, u) at least once. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100). Output Output a single string of length n that meets the above conditions. If there are multiple possible solutions, you can print any of them. Examples Input 7 5 Output abecidu Input 5 5 Output aeiou Note In the first example, the string \\"abecidu\\" of length 7 ensures that any substring of length 5 or more contains all the vowels at least once. In the second example, the string \\"aeiou\\" already contains all vowels and meets the condition trivially.","solution":"def generate_string(n, k): Generate a string of length n such that every substring of length k or more contains all vowels at least once. vowels = \'aeiou\' if k > 5: # Repeating pattern: vowels followed by additional specific characters to meet the length n pattern = vowels # Creating a pattern that ensures each k-length segment will include all vowels for i in range(k - 5): pattern += vowels[i % 5] generated_string = (pattern * ((n // len(pattern)) + 1))[:n] else: # For k <= 5, fit as many vowels as possible within n length generated_string = (vowels * ((n // 5) + 1))[:n] return generated_string"},{"question":"In a mythical land, the Fibonacci forest is home to a unique species of enchanted trees. Each tree generates magic fruit following the Fibonacci sequence. The first tree produces 1 fruit, the second tree produces 1 fruit, and each subsequent tree produces the sum of the fruits produced by the two preceding trees. One day, the forest\'s caretaker, the wise elf Eldrin, decides to perform a fruit gathering ritual. Eldrin wants to know the total number of fruits that can be collected from the first n trees during the ritual. However, given the constant threat of magical disturbances, the sum must be calculated efficiently to avoid any potential disruptions. Your task is to help Eldrin determine the total number of fruits by optimizing the computation of the Fibonacci sequence. Input The first and only line contains an integer n (1 ≤ n ≤ 10^6) — the number of trees in the Fibonacci forest. Output Print a single integer — the total number of fruits generated by the first n trees. Examples Input 5 Output 12 Input 10 Output 143 Input 1 Output 1 Note For n = 5, the count of fruits produced by each tree is as follows: - Tree 1: 1 fruit - Tree 2: 1 fruit - Tree 3: 2 fruits (1+1) - Tree 4: 3 fruits (1+2) - Tree 5: 5 fruits (2+3) Adding them up: 1 + 1 + 2 + 3 + 5 = 12 fruits For n = 10, the fruits produced by each tree are 1, 1, 2, 3, 5, 8, 13, 21, 34, and 55.","solution":"def total_fruits(n): if n == 1: return 1 elif n == 2: return 2 fib1, fib2 = 1, 1 total = fib1 + fib2 for _ in range(3, n + 1): fib_n = fib1 + fib2 total += fib_n fib1, fib2 = fib2, fib_n return total"},{"question":"A group of friends is playing a game with numbers. They write a series of integers on a line and take turns making moves. Each move consists of selecting a contiguous sub-array and adding the smallest integer in that sub-array to a score. The goal is to maximize the final score after exactly k moves. Write a program that calculates the maximum possible score that can be achieved after exactly k moves. Input The first line of the input contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ n) - the length of the array and the number of moves respectively. The second line of the input contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) - the elements of the array. Output Print an integer - the maximum possible score after exactly k moves. Examples Input 5 2 1 -2 3 -4 5 Output 8 Input 6 3 -1 3 -2 5 -4 6 Output 12 Note In the first example, the optimal strategy is to pick the two sub-arrays [1, -2, 3] and [-4, 5] which will yield scores of 1 + 1 = 2 and -4 + 5 = 1, respectively, so the total score is 8. In the second example, the optimal strategy is to pick the three sub-arrays [3], [5], and [6] which each contribute their respective values to the score, so the total score is 3 + 5 + 6 = 14.","solution":"def max_score(arr, k): Calculate the maximum possible score that can be achieved after exactly k moves by adding the smallest integers from k contiguous sub-arrays. arr.sort(reverse=True) return sum(arr[:k])"},{"question":"You are given an integer array `a` sorted in non-decreasing order and an integer `target`. Your task is to determine if there exists a pair of elements in `a` that sum up to `target`. Input - The first line of the input contains one integer `n` (1 ≤ n ≤ 1000) — the length of the array `a`. - The second line contains `n` integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^5) — the elements of the array `a`, sorted in non-decreasing order. - The third line contains one integer `target` (1 ≤ target ≤ 2 * 10^5) — the target sum. Output For each test case, print the answer — \\"YES\\" (without quotes) if there exists a pair of elements in `a` that sum up to `target` and \\"NO\\" otherwise. Example Input 5 1 2 3 5 7 8 Output YES Note In this example, the array `a` contains the elements [1, 2, 3, 5, 7], and we are looking for a pair of elements that sum up to `8`. The elements `1` and `7` sum up to `8`, so the result is \\"YES\\".","solution":"def find_pair_with_sum(a, target): Returns \\"YES\\" if there exists a pair of elements in sorted list `a` that add up to `target`, otherwise returns \\"NO\\". left, right = 0, len(a) - 1 while left < right: current_sum = a[left] + a[right] if current_sum == target: return \\"YES\\" elif current_sum < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"You are given a sequence of integers representing the height of different buildings in a skyline. Your task is to determine the minimum number of rectangles needed to cover all the buildings in such a way that: - Each rectangle\'s sides are parallel to the coordinate axes. - The rectangles do not overlap. - Each rectangle covers one or more buildings completely. For simplicity, assume that the skyline is represented by an array `heights` where each `heights[i]` represents the height of the building at the i-th position. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of buildings. The second line contains n integers heights[0], heights[1], ..., heights[n-1] (0 ≤ heights[i] ≤ 100). Output Output a single integer — the minimum number of rectangles needed to cover all buildings. Examples Input 5 3 1 4 1 5 Output 4 Input 6 2 2 2 2 2 2 Output 1 Input 4 1 2 3 4 Output 4 Input 7 5 3 5 6 2 4 5 Output 5 Note In example 1, one optimal way is to use 4 rectangles: - One covering the building at position 1. - One covering the building at position 2. - One covering the building at position 3. - One covering the building at positions 4 and 5. In example 2, since all buildings are of the same height, a single rectangle can cover all of them. In example 3, each building has a different height, thus requiring a separate rectangle for each one. In example 4, one way is to use rectangles of heights 5, 3, 5, 6, and 2, covering the respective buildings.","solution":"def min_number_of_rectangles(n, heights): Returns the minimum number of rectangles needed to cover all the buildings in the given heights array. unique_heights = set(heights) return len(unique_heights)"},{"question":"A company wants to optimize its delivery routes for a set of delivery trucks. Each truck is assigned to a different delivery route and has a certain capacity that it can carry. The company needs to frequently manage the delivery routes, including adding deliveries, removing deliveries, and querying the maximum load carried on a given route. The operations are described as follows: Operation 0: Add a delivery of weight `w` to route `i`. Operation 1: Remove a delivery of weight `w` from route `i`. Operation 2: Query the maximum load on any route between `l` and `r` inclusive. input: The first line of the input contains the number of routes `R`. The next line contains `R` integers representing the initial load on each route. The next line contains a number `Q` followed by `Q` operations. Format for operations: 0 i w - Add a delivery of weight `w` to route `i`. 1 i w - Remove a delivery of weight `w` from route `i`. 2 l r - Query the maximum load on any route between `l` and `r` inclusive. Constraints: 1 ≤ R, Q ≤ 10^5 1 ≤ l, r, i ≤ R 0 ≤ w ≤ 10^9 Note: Routes are indexed starting from 1. SAMPLE INPUT 5 10 20 15 25 30 6 0 2 5 2 1 3 1 4 10 2 4 5 0 3 10 2 1 5 SAMPLE OUTPUT 25 35 35","solution":"def process_operations(R, initial_loads, operations): Processes the given operations on the routes and returns the results of query operations. results = [] # Adjusting to 0-based index for easier array manipulation routes = initial_loads[:] for operation in operations: op_code = operation[0] if op_code == 0: # Add w to route i _, i, w = operation routes[i - 1] += w elif op_code == 1: # Remove w from route i _, i, w = operation routes[i - 1] -= w elif op_code == 2: # Query maximum load between l and r _, l, r = operation max_load = max(routes[l - 1: r]) results.append(max_load) return results"},{"question":"Bob is a passionate collector of rare coins. He maintains a carefully organized display of his collection by arranging the coins in rows. Each coin has a distinct positive integer value representing its rarity. Bob likes to keep his collection tidy, and he always ensures that each row has a unique sum of coins\' values. Bob has decided to add a new row of coins to his display. However, he wants to make sure that the new row\'s sum does not duplicate any of the existing rows\' sums. To help him, you need to determine the smallest sum that the new row can have which is not already taken by any existing row. Given the total number of rows and the sums of coins\' values in each row, find the smallest positive integer that is not already the sum of any existing row. Input The first line of input contains an integer n (1 ≤ n ≤ 100), representing the number of existing rows. The second line contains n distinct integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^4), representing the sums of coins\' values for each row. Output Print a single integer, the smallest sum that is not already taken by any existing row. Examples Input 5 1 2 3 4 5 Output 6 Input 3 7 11 14 Output 1 Note In the first example, Bob already has rows with sums 1, 2, 3, 4, and 5. The smallest positive integer not included in the sums of the existing rows is 6. In the second example, since all existing row sums are greater than 1 and 1 is not included, the smallest positive integer not included in the sums of the existing rows is 1.","solution":"def find_smallest_missing_sum(n, sums): Given the number of rows and their respective sums, returns the smallest positive integer that is not already the sum of any existing row. sums_set = set(sums) smallest_missing_sum = 1 while smallest_missing_sum in sums_set: smallest_missing_sum += 1 return smallest_missing_sum"},{"question":"You are given a list of integers. Find the maximum sum of any contiguous subarray of the list. Note that the empty subarray is not allowed. Input The first line contains a single integer n (1 ≤ n ≤ 105), the number of elements in the list. The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109), representing the elements of the list. Output Output a single integer, the maximum sum of any contiguous subarray of the given list. Examples Input 5 1 2 3 -2 5 Output 9 Input 6 -1 -2 -3 -4 -5 -6 Output -1 Note In the first example, the maximum sum of contiguous subarray is obtained by adding the elements from the subarray [1, 2, 3, -2, 5], which results in 9. In the second example, all elements are negative, so the maximum sum of contiguous subarray is the maximum element itself, which is -1.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any contiguous subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A popular video streaming platform wants to optimize its video watch suggestions for its users. The platform considers various metrics such as user ratings, frequency of watching specific genres, and user-browsing history to recommend the most relevant videos. However, the platform recently has noticed an uptick in complaints about users being recommended videos they have already watched in the past. To address this, the platform wants to implement a filtering mechanism that removes videos already watched by the user from the suggestion list. Your task is to help the platform by writing a program that takes in two lists of video IDs: `watched` and `suggestions`, and returns a new list of video IDs in `suggestions` that the user has not watched yet. Input The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of video IDs in the `watched` list. The second line contains `n` integers representing the video IDs in the `watched` list. The third line contains an integer `m` (1 ≤ m ≤ 1000) — the number of video IDs in the `suggestions` list. The fourth line contains `m` integers representing the video IDs in the `suggestions` list. Output Print the IDs of the videos in the `suggestions` list that are not present in the `watched` list, in the order they appear in the `suggestions` list. If all videos have been watched, return an empty list. Examples Input 3 1 2 3 5 3 4 5 6 7 Output 4 5 6 7 Input 2 4 6 4 2 4 6 8 Output 2 8 Input 4 2 3 4 5 3 2 3 4 Output","solution":"def filter_suggestions(watched, suggestions): Filters the suggestions list to remove videos that have been watched. Parameters: watched (list of int): The list of watched video IDs. suggestions (list of int): The list of suggested video IDs. Returns: list of int: A list of suggested video IDs that have not been watched. watched_set = set(watched) return [video for video in suggestions if video not in watched_set]"},{"question":"A company is developing a mobile app that includes several social features. One of the features allows users to form \\"clusters\\" with their friends. Each cluster is organized in a tree-like structure, where each user can have multiple direct friends, but there cannot be any cycles in the cluster. The company\'s app development team has tasked you with implementing a feature that finds the shortest path between two users in a cluster. The users and their direct friendship connections are given, and you need to calculate the minimum number of connections required to travel from one user to another. Input: - The first line of the input contains an integer ( T ), the number of test cases. - For each test case: - The first line contains two integers ( N ) (the number of users) and ( M ) (the number of direct friendship connections). - Each of the next ( M ) lines contains two integers ( u ) and ( v ), indicating that user ( u ) and user ( v ) are direct friends. - The next line contains two integers ( A ) and ( B ), the users between whom you need to find the shortest path. Output: - For each test case, print the minimum number of connections required to travel from user ( A ) to user ( B ). If no path exists, print -1. Constraints: - ( 1 leq N leq 100 ) - ( 0 leq M leq frac{N(N-1)}{2} ) - ( 1 leq u, v, A, B leq N ) - Each user will have a unique identifier from 1 to ( N ). Example Input: 2 5 4 1 2 2 3 3 4 4 5 1 5 4 2 1 2 2 3 3 4 4 1 1 3 Example Output: 4 1","solution":"from collections import deque def shortest_path_in_cluster(N, M, edges, A, B): # Create adjacency list graph = {i: [] for i in range(1, N+1)} for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find the shortest path queue = deque([(A, 0)]) visited = {i: False for i in range(1, N+1)} visited[A] = True while queue: current_node, distance = queue.popleft() if current_node == B: return distance for neighbor in graph[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) return -1 def find_shortest_paths(T, test_cases): results = [] for case in test_cases: N, M, edges, A, B = case result = shortest_path_in_cluster(N, M, edges, A, B) results.append(result) return results"},{"question":"Arman is learning about number sequences and he is fascinated by sequences whose elements are perfect squares. A sequence is considered to be composed of perfect squares if every element in it is a perfect square integer (i.e., 1, 4, 9, 16, etc.). Arman has a list of sequences and he wants your help to identify whether each sequence in the list is composed entirely of perfect squares or not. If a sequence has all its elements as perfect squares, he wants you to return the product of all the elements in the sequence. If not all elements are perfect squares, you should return \\"Not All Perfect Squares\\". Input: The first line contains an integer, t, which denotes the number of sequences. Each of the next t lines contains a sequence of positive integers separated by space. Output: For each sequence, print the product of all the elements if each element is a perfect square, otherwise print \\"Not All Perfect Squares\\". Constraints: 1 ≤ T ≤ 10^2 1 ≤ length of sequence ≤ 10 1 ≤ element of sequence ≤ 10^3 Note: Each sequence will contain elements that are positive integers. SAMPLE INPUT 3 1 4 9 2 3 5 16 49 SAMPLE OUTPUT 36 Not All Perfect Squares 784","solution":"import math def is_perfect_square(n): Check if a number is a perfect square. return math.isqrt(n) ** 2 == n def sequence_product_or_not_all_perfect_squares(sequences): Given a list of sequences, return the product of all elements in the sequence if all elements are perfect squares, otherwise return \\"Not All Perfect Squares\\". results = [] for sequence in sequences: product = 1 all_perfect_squares = True for num in sequence: if is_perfect_square(num): product *= num else: all_perfect_squares = False break if all_perfect_squares: results.append(product) else: results.append(\\"Not All Perfect Squares\\") return results # Example usage: sequences = [ [1, 4, 9], [2, 3, 5], [16, 49] ] print(sequence_product_or_not_all_perfect_squares(sequences))"},{"question":"Alice and Bob are playing a game involving piles of stones. They take turns removing stones from the piles, and Alice always plays first. Each move consists of the player choosing a pile and removing exactly one stone from it. The player who cannot make a move loses the game. Alice and Bob both play optimally. Alice also has a special move she can use exactly once during the game, which allows her to remove up to k stones from any one pile instead of just one. This special move is not required to be used if Alice does not need it to guarantee a win. Given n piles and the number of stones in each pile, determine if Alice can guarantee a win. If Alice can guarantee a win, print \\"Alice\\", otherwise print \\"Bob\\". Input The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) – the number of piles and the maximum number of stones Alice can remove with her special move. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the number of stones in each pile. Output Print \\"Alice\\" if Alice can guarantee a win, otherwise print \\"Bob\\". Example Input 3 2 1 4 2 Output Alice Input 2 1 3 3 Output Bob Explanation In the first example, Alice can remove 2 stones from the second pile on her first move (using her special move), leaving the piles with [1, 2, 2]. Then, Bob will remove any one stone, but Alice will always be able to remove another stone in a way that leaves Bob with only non-critical moves, leading to a win for her. In the second example, no matter how Alice plays, Bob will always have a strategy to force Alice into a losing position.","solution":"def determine_winner(n, k, piles): Determines if Alice can guarantee a win in the game. Parameters: n (int): Number of piles k (int): Maximum number of stones Alice can remove with her special move piles (list): List of integers representing the number of stones in each pile Returns: str: \\"Alice\\" if she can guarantee a win, otherwise \\"Bob\\" xor_sum = 0 for stones in piles: xor_sum ^= stones if xor_sum == 0: return \\"Bob\\" for stones in piles: if stones <= k: if xor_sum ^ stones == 0: return \\"Alice\\" return \\"Alice\\" # Explicit check for special move, maximize move, and piles leveraging xor properties def alice_wins(n, k, piles): xor_sum = 0 for p in piles: xor_sum ^= p if xor_sum == 0: return \\"Bob\\" # Check if using the special move on any pile will guarantee Alice a win for p in piles: if xor_sum ^ p <= k: return \\"Alice\\" return \\"Alice\\""},{"question":"Alex has a special set of numbers arranged in a list. He wants to split this list into the maximum possible number of non-empty sublists, such that each sublist contains numbers in strictly increasing order. For example, if Alex\'s list is [1, 2, 3, 2, 4, 3], it can be split into sublists [1, 2, 3], [2, 4], and [3]. Determine the maximum number of sublists Alex can create under these conditions. Input The first line contains a single integer n (1 ≤ n ≤ 200 000) — the length of the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — Alex\'s list. Output Print a single integer — the maximum number of strictly increasing sublists Alex can create. Examples Input 6 1 2 3 2 4 3 Output 3 Input 5 5 4 3 2 1 Output 5 Input 7 1 3 5 7 2 4 6 Output 2 Input 6 1 1 1 1 1 1 Output 6 Note In the first example, Alex can create three sublists: [1, 2, 3], [2, 4], and [3]. In the second example, since every element is strictly smaller than the previous one, Alex can only create sublists of length 1: [5], [4], [3], [2], [1]. In the third example, the optimal partition is into two sublists: [1, 3, 5, 7] and [2, 4, 6]. In the fourth example, every element is the same, so Alex can only create sublists of length 1: [1], [1], [1], [1], [1], [1].","solution":"def max_increasing_sublists(n, nums): This function takes an integer n and a list of integers nums, and returns the maximum number of strictly increasing sublists that can be formed. if n == 0: return 0 count = 1 # Start with one sublist for i in range(1, n): if nums[i] <= nums[i - 1]: count += 1 return count"},{"question":"In an amusement park, there is a roller coaster with multiple tracks. The park uses a control system to manage the sequence in which rides are added and subsequently removed from the operation based on their popularity score. Each ride goes into operation as soon as it is added to the queue and stays in operation until it is removed. The control system follows the operating rules below: 1. Add a ride to the end of the queue when it\'s initialized. 2. Any ride that becomes the least popular is removed from the queue. You are tasked with managing this queue through a series of operations. Each operation can either be adding a new ride with a given popularity score or removing the least popular ride from the queue. For example, if the popularity scores of rides being added to the queue are: 20, 50, 30, and 40, the queue operations would look like: - Add ride with score 20 -> Queue: [20] - Add ride with score 50 -> Queue: [20, 50] - Add ride with score 30 -> Queue: [20, 50, 30] - Add ride with score 40 -> Queue: [20, 50, 30, 40] - Remove least popular (20) -> Queue: [50, 30, 40] - Remove least popular (30) -> Queue: [50, 40] Write a program to simulate this queue management system for a series of operations and determine the resulting queue at the end of all operations. Input A sequence of datasets is given as input. Each dataset starts with an integer n (1 ≤ n ≤ 1000), which indicates the number of operations that follow. Each of the next n lines contains an operation: - \\"ADD x\\" where x (1 ≤ x ≤ 100) is the popularity score of the ride. - \\"REMOVE\\" which indicates removing the least popular ride from the queue. The end of the input is indicated by a single line containing just the number zero (0). Output After processing all operations for each dataset, output the final queue of rides’ popularity scores in the order they remain. Output each dataset\'s result on a new line. If the queue is empty, output \\"EMPTY\\". Example Input 4 ADD 20 ADD 50 ADD 30 REMOVE 3 ADD 40 REMOVE REMOVE 4 ADD 45 REMOVE ADD 60 ADD 50 0 Output 50 30 EMPTY 60 50","solution":"def manage_ride_queue(datasets): results = [] for operations in datasets: queue = [] for operation in operations: if operation.startswith(\\"ADD\\"): _, score = operation.split() score = int(score) queue.append(score) elif operation == \\"REMOVE\\" and queue: min_score = min(queue) queue.remove(min_score) if queue: results.append(\\" \\".join(map(str, queue))) else: results.append(\\"EMPTY\\") return results"},{"question":"You are managing a software project where multiple developers are working on various modules. Each developer is following a task list consisting of smaller tasks. Some tasks could be dependent on the completion of others, meaning a task cannot start until its prerequisite task is completed. Your goal is to determine if it\'s possible for all developers to complete their assigned tasks following their dependencies. Input The first input line contains an integer d (1 ≤ d ≤ 100), the number of developers. Each of the next d blocks describes the task list of a developer. Each block starts with an integer t (1 ≤ t ≤ 100), the number of tasks assigned to that developer. Each of the next t lines describes a task in the form `task_name prerequisite_tasks_count prerequisite_task_1 prerequisite_task_2 ... prerequisite_task_count`. `task_name` is a unique identifying string for the task (1 to 20 alphanumeric characters), `prerequisite_tasks_count` is the number of prerequisite tasks, followed by the prerequisite task names. It is guaranteed that the prerequisite task names only include tasks that appear earlier in the same developer\'s list. Output For each developer, print \\"YES\\" if it is possible to complete all of their assigned tasks, respecting the given prerequisite conditions. Otherwise, print \\"NO\\". Example Input 2 3 A 0 B 1 A C 1 B 4 X 0 Y 1 X Z 2 X Y W 1 Z Output YES YES","solution":"def can_complete_tasks(developers_info): Determines if each developer can complete all their assigned tasks following their dependencies. Args: developers_info: List of tuples where each tuple consists of number of tasks and a list of tasks with prerequisites. Returns: List of strings \\"YES\\" or \\"NO\\" for each developer. def has_cycle(tasks): # Create a graph and a flag for visited nodes graph = {} visited = {} for task, prerequisites in tasks: graph[task] = prerequisites visited[task] = \'WHITE\' # WHITE: unvisited, GRAY: visiting, BLACK: finished def dfs(task): if visited[task] == \'GRAY\': return True # cycle found if visited[task] == \'BLACK\': return False # already completed this node, no cycle found visited[task] = \'GRAY\' for prerequisite in graph[task]: if dfs(prerequisite): return True visited[task] = \'BLACK\' return False for task in tasks: if visited[task[0]] == \'WHITE\': if dfs(task[0]): return True return False results = [] for developer in developers_info: t, tasks = developer if has_cycle(tasks): results.append(\\"NO\\") else: results.append(\\"YES\\") return results def process_input(input_data): input_lines = input_data.strip().split(\'n\') d = int(input_lines[0].strip()) index = 1 developers_info = [] for _ in range(d): t = int(input_lines[index].strip()) index += 1 tasks = [] for _ in range(t): task_info = input_lines[index].strip().split() task_name = task_info[0] prerequisites_count = int(task_info[1]) prerequisites = task_info[2:] tasks.append((task_name, prerequisites)) index += 1 developers_info.append((t, tasks)) return developers_info def main(input_data): developers_info = process_input(input_data) result = can_complete_tasks(developers_info) return \\"n\\".join(result)"},{"question":"You are given a grid of size n × m filled with \'S\' representing starting points and \'E\' representing ending points. The remaining cells are either \'.\' (empty space) or \'W\' (walls). You can move up, down, left, or right, but cannot move through walls. Every cell can be traversed any number of times, and you can start from any starting point \'S\' and finish at any ending point \'E\'. The goal is to determine the minimum number of steps required to travel from any starting point to any ending point. Write a program to find the minimum number of steps required to move from a starting point \'S\' to an ending point \'E\'. If it is impossible to reach an ending point, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid, respectively. The next n lines each contain m characters, which can be \'S\', \'E\', \'.\', or \'W\'. Output Print the minimum number of steps required to get from any \'S\' to any \'E\'. If it is impossible, print -1. Examples Input 3 4 S..E .W.W ...S Output 3 Input 4 4 SW.W .... .W.. ..E. Output 5 Input 3 3 SWW WWE ... Output -1 Note In the first example: * Starting from the top-left \'S\', you can move right 3 steps to reach \'E\'. In the second example: * Starting from the \'S\' at (0, 0), the shortest path to the \'E\' at (3, 2) is down 1 step, right 3 steps, down 2 steps, right 1 step, and up 1 step—totaling 5 steps. In the third example: * There is no path from the starting point \'S\' at (0, 0) to the ending point \'E\' at (1, 2) due to the walls blocking all possible routes. Therefore, the output is -1.","solution":"from collections import deque def min_steps_to_reach_end(n, m, grid): # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Find all starting and ending points starts = [] end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': starts.append((i, j)) elif grid[i][j] == \'E\': end = (i, j) if not starts or not end: return -1 def bfs(start): # Breadth-First Search to find shortest path from start to end queue = deque([(start[0], start[1], 0)]) # (x, y, steps) visited = set() visited.add((start[0], start[1])) while queue: x, y, steps = queue.popleft() if (x, y) == end: return steps for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != \'W\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return float(\'inf\') min_steps = float(\'inf\') for start in starts: min_steps = min(min_steps, bfs(start)) return min_steps if min_steps != float(\'inf\') else -1"},{"question":"Given an integer array, determine the length of the shortest subarray that, if sorted, would make the entire array sorted in non-decreasing order. Constraints * All array elements are integers. * 1 leq text{length of array} leq 10^5 * -10^9 leq text{array elements} leq 10^9 Input Input is given from Standard Input in the following format: n a_1 a_2 a_3 ... a_n Output Print the length of the shortest subarray that needs to be sorted. Examples Input 5 2 6 4 8 10 Output 2 Input 7 1 3 5 4 2 8 10 Output 4","solution":"def shortest_subarray_to_sort(arr): n = len(arr) if n <= 1: return 0 left, right = 0, n - 1 # find the first element from the left which is out of order while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 if left == n - 1: return 0 # find the first element from the right which is out of order while right > 0 and arr[right] >= arr[right - 1]: right -= 1 subarray_max = max(arr[left:right + 1]) subarray_min = min(arr[left:right + 1]) # extend left bound to include any elements that need sorting while left > 0 and arr[left - 1] > subarray_min: left -= 1 # extend right bound to include any elements that need sorting while right < n - 1 and arr[right + 1] < subarray_max: right += 1 return right - left + 1"},{"question":"You are given a grid of size `N x N` filled with integers. Your task is to determine whether there exists a path from the top-left corner of the grid (0,0) to the bottom-right corner of the grid (N-1,N-1) such that all the numbers on this path are even. You can move in four possible directions from a cell in the grid: up, down, left, and right. You cannot move diagonally. Input The input consists of multiple datasets. Each dataset begins with an integer `N` (2 ≤ N ≤ 50), which represents the size of the grid. The following `N` lines each contain `N` integers, representing the grid. The end of the input is indicated by a line containing a single zero. You may assume that all integers in the grid are between 0 and 100. Output For each dataset, print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner consisting only of even numbers. Otherwise, print \\"NO\\". Example Input 3 2 4 6 8 3 4 6 8 2 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0 Output YES NO","solution":"def is_even_path_exists(grid): N = len(grid) if grid[0][0] % 2 != 0 or grid[N-1][N-1] % 2 != 0: return False from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, N-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] % 2 == 0: visited.add((nx, ny)) queue.append((nx, ny)) return False def process_input(input_data): datasets = input_data.strip().split(\'n\') results = [] i = 0 while i < len(datasets): N = int(datasets[i]) if N == 0: break grid = [] for j in range(1, N+1): grid.append(list(map(int, datasets[i + j].split()))) i += N + 1 if is_even_path_exists(grid): results.append(\\"YES\\") else: results.append(\\"NO\\") return \\"n\\".join(results)"},{"question":"Problem Statement Cubical Island is known for its unique formation: it consists of a series of cuboids, each with their lower corners on the xy-plane and their upper corners extending upwards along the z-axis. The cuboids\' edges are parallel to the coordinate axes. The Queen of Cubical Island plans to build the largest possible rectangular prism (\\"box\\") within Cubical Island in celebration of the centennial of her reign. The box must have its sides parallel to the coordinate axes, and all of its volume must lie within the volume defined by the union of the cuboids of Cubical Island. You, the royal architect, have been tasked with determining the dimensions of the largest possible box. You are given the positions and dimensions of the cuboids that make up Cubical Island. Your job is to compute the dimensions (length, width, and height) of the largest box in terms of volume that can be constructed. Each cuboid ( i ) is defined by its lower corner coordinates (X_lo_i, Y_lo_i, 0), and its upper corner coordinates (X_hi_i, Y_hi_i, Z_hi_i). Input The input consists of multiple datasets. The number of datasets does not exceed 20. Each dataset is formatted as follows: > N > X_lo_1 Y_lo_1 X_hi_1 Y_hi_1 Z_hi_1 > : > : > X_lo_N Y_lo_N X_hi_N Y_hi_N Z_hi_N The first line of a dataset contains a single integer N (1 le N le 1000), the number of cuboids that make up Cubical Island. Each of the following N lines describes a cuboid. The (i+1)-st line contains five integers X_lo_i, Y_lo_i, X_hi_i, Y_hi_i, and Z_hi_i (-1000 le X_lo_i < X_hi_i le 1000, -1000 le Y_lo_i < Y_hi_i le 1000, 1 le Z_hi_i le 1000). You may assume the following: * The cuboids are axis-aligned and do not overlap completely. * The coverage of Cubical Island is contiguous if seen from above in the xy-plane. The end of the input is indicated by a line containing a zero. Output For each dataset, output a line containing the dimensions of the box with the largest volume as three space-separated values: length, width, and height. The values must have an absolute or relative error of at most 10^{-4}. Sample Input 3 0 0 4 4 5 2 2 6 6 3 4 4 8 8 2 2 0 0 3 3 7 2 2 5 5 4 0 Sample Output 4.0000 4.0000 5.0000 3.0000 3.0000 4.0000 Example Input 3 0 0 4 4 5 2 2 6 6 3 4 4 8 8 2 2 0 0 3 3 7 2 2 5 5 4 0 Output 4.0000 4.0000 5.0000 3.0000 3.0000 4.0000","solution":"def largest_box(dimensions): Given the dimensions of multiple cuboids, find the dimensions of the largest box that can fit within their union. # Initialize the boundaries for the union of cuboids min_x, min_y, min_z = float(\'inf\'), float(\'inf\'), float(\'inf\') max_x, max_y, max_z = float(\'-inf\'), float(\'-inf\'), float(\'-inf\') for dimension in dimensions: X_lo, Y_lo, X_hi, Y_hi, Z_hi = dimension min_x = min(min_x, X_lo) min_y = min(min_y, Y_lo) min_z = min(min_z, 0) # Since lower z is always 0 max_x = max(max_x, X_hi) max_y = max(max_y, Y_hi) max_z = max(max_z, Z_hi) length = max_x - min_x width = max_y - min_y height = max_z - min_z return length, width, height def parse_input(input_str): Parse the input string into a list of dimensions for each dataset. input_lines = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(input_lines): N = int(input_lines[i]) if N == 0: break dimensions = [] for j in range(1, N + 1): dimensions.append(list(map(int, input_lines[i + j].split()))) datasets.append(dimensions) i += (N + 1) return datasets def format_output(results): Format the output to match the required precision. return \'n\'.join(f\'{result[0]:.4f} {result[1]:.4f} {result[2]:.4f}\' for result in results) def process(input_str): Main processing function to parse input, calculate results, and format output. datasets = parse_input(input_str) results = [largest_box(dimensions) for dimensions in datasets] return format_output(results)"},{"question":"You are given a string s of lowercase Latin letters. Your task is to find the longest substring of s that does not contain any repeating characters. Input The first line of the input contains a single integer T (1 ≤ T ≤ 10^5) denoting the number of test cases. Each of the next T lines contains a single string s (1 ≤ |s| ≤ 10^5), where |s| is the length of string s. It is guaranteed that the total sum of the lengths of all the strings does not exceed 10^6. Output For each test case, output a single line containing the length of the longest substring without repeating characters. Example Input 4 abcabcbb bbbbb pwwkew abcddefg Output 3 1 3 4","solution":"def length_of_longest_substring(s): Returns the length of longest substring without repeating characters in string s. char_map = {} max_length = 0 start = 0 for idx, char in enumerate(s): if char in char_map and char_map[char] >= start: start = char_map[char] + 1 char_map[char] = idx max_length = max(max_length, idx - start + 1) return max_length def find_longest_substrings(test_cases): For each string in test_cases, return the length of longest substring without repeating characters. return [length_of_longest_substring(s) for s in test_cases]"},{"question":"In a warehouse, there are `n` stacks of boxes arranged in a row. Each box has a weight associated with it. The warehouse manager wants to move all the boxes to a delivery truck, maintaining the order of boxes within each stack. However, the manager wants to optimize the strength required to lift the boxes by merging some of the adjacent stacks and forming new stacks, where each new stack should contain boxes arranged in non-decreasing order of weights. Determine the minimum total strength required to move all the boxes to the delivery truck. The strength required to move a stack of boxes is defined as the sum of the weights of all the boxes in that stack. Input The first line contains the integer `n` — the number of stacks (1 ≤ n ≤ 10^6). The second line contains `n` integers `wi` — the weight of the box at the bottom of the i-th stack (1 ≤ wi ≤ 10^9). Output Print the minimum total strength required to move all the boxes to the delivery truck. Examples Input 4 1 3 2 5 Output 11 Input 3 2 2 2 Output 6 Note In the first test sample, one possible way is to merge the first stack containing weight 1 and the second stack containing weight 3 into a new stack with weight 1, 3, and 2. The total strength will be 11. In the second test sample, merging the stacks does not change the order and the total strength remains the same.","solution":"def minimum_total_strength(n, weights): Calculate the minimum total strength required to move all the boxes to the delivery truck. Parameters: n (int): Number of stacks. weights (list of int): Weights of the bottom boxes of the stacks. Returns: int: Minimum total strength required. # Since each stack contains just one box, the optimal way is not to merge them # The total strength remains the sum of all the weights. return sum(weights)"},{"question":"You are given an n x m grid where each cell contains an integer. You need to perform a series of operations on this grid. In each operation, you are provided with the coordinates of the top-left and bottom-right corners of a subgrid. For this subgrid, you have to increase the value of each cell by 1. After performing all the operations, you need to output the final state of the grid. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Each of the next n lines contains m integers describing the initial state of the grid. The j-th integer on the i-th line is the value of the cell in the i-th row and the j-th column (0 ≤ grid[i][j] ≤ 1000). The next line contains an integer q (1 ≤ q ≤ 10^5) — the number of operations. Each of the next q lines contains four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n; 1 ≤ y1 ≤ y2 ≤ m) which describe the top-left and bottom-right corners of a subgrid for which the operation should be performed. Output Output the final state of the grid, with each value separated by a space. Example Input 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 Output 3 4 3 6 8 7 7 9 10","solution":"def update_grid(n, m, grid, operations): Updates the grid based on given operations. n: number of rows m: number of columns grid: initial state of the grid operations: list of operations # Initialize the difference array diff = [[0] * (m + 1) for _ in range(n + 1)] # Apply the operations using the difference array for x1, y1, x2, y2 in operations: diff[x1-1][y1-1] += 1 if y2 < m: diff[x1-1][y2] -= 1 if x2 < n: diff[x2][y1-1] -= 1 if x2 < n and y2 < m: diff[x2][y2] += 1 # Apply the 2D prefix sum algorithm to get the final grid values for i in range(n): for j in range(m): if i > 0: diff[i][j] += diff[i-1][j] if j > 0: diff[i][j] += diff[i][j-1] if i > 0 and j > 0: diff[i][j] -= diff[i-1][j-1] grid[i][j] += diff[i][j] return grid"},{"question":"You are given a list of integer numbers and a target sum. Check whether there are two distinct elements in the list that add up to the target sum. Write a function `two_sum(nums, target)` that takes as input: - `nums`: List of integers, where 1 ≤ |nums| ≤ 10^4 and each integer in the list is between -10^9 and 10^9 inclusive. - `target`: An integer between -10^9 and 10^9 inclusive that represents the target sum. The function should return `True` if there exist two distinct elements in the list that add up to the target sum, and `False` otherwise. Input/Output Format: - Input: - `nums`: a list of integers. - `target`: an integer representing the target sum. - Output: - A boolean value (`True` or `False`). Example: 1. Input: ```python nums = [10, 15, 3, 7] target = 17 ``` Output: ```python True ``` Explanation: 10 + 7 = 17, so the function should return `True`. 2. Input: ```python nums = [1, 2, 3, 4] target = 8 ``` Output: ```python False ``` Explanation: There are no two numbers that add up to 8, so the function should return `False`. 3. Input: ```python nums = [-1, -2, -3, -4, -5] target = -8 ``` Output: ```python True ``` Explanation: -3 + -5 = -8, so the function should return `True`. Notes: - The function should aim for an optimal solution with a time complexity better than O(n^2). - Use of additional data structures (like a set) is encouraged for efficient lookup.","solution":"def two_sum(nums, target): Returns True if there are two distinct integers in nums that add up to target. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"A factory produces N types of widgets, and each type of widget has a non-negative integer weight. The factory has a maximum weight capacity it can handle. The goal is to find the maximum number of widgets the factory can process without exceeding the weight capacity. You are given the maximum weight capacity the factory can handle and a list of the weights of all widget types. You need to determine the maximum possible count of widgets that can be processed without the total weight exceeding the given maximum capacity. Constraints * 1 ≤ N ≤ 100 * 1 ≤ weight of each widget type ≤ 1000 * 1 ≤ maximum weight capacity ≤ 10000 Input Input is given from Standard Input in the following format: ``` maximum weight capacity w_1 w_2 ... w_N ``` Output Print the maximum number of widgets that can be processed. Examples Input ``` 15 3 1 4 3 2 ``` Output ``` 5 ``` Input ``` 10 6 4 4 3 2 ``` Output ``` 3 ``` Input ``` 6 5 1 2 3 1 1 ``` Output ``` 4 ```","solution":"def max_widgets(max_capacity, weights): Returns the maximum number of widgets that can be processed without exceeding the weight capacity. Parameters: max_capacity (int): The maximum weight capacity the factory can handle. weights (list): List of weights of the widget types. Returns: int: The maximum number of widgets that can be processed. # Sort weights in ascending order weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= max_capacity: total_weight += weight count += 1 else: break return count"},{"question":"Thomas is a pirate who loves finding treasures. He found a map with a grid showing various islands (marked as \'1\') and water areas (marked as \'0\'). Using this map, Thomas wants to determine the number of separate islands on it. An island is a group of contiguous \'1\'s connected horizontally or vertically (not diagonally). Help Thomas by writing a program to count the number of islands on the map. **Input** - The first line contains two integers, `m` and `n`, the number of rows and columns in the grid, respectively (1 ≤ m, n ≤ 300). - The next `m` lines contain `n` characters each (either \'0\' or \'1\') representing the grid. **Output** - Output a single integer, the number of islands. **Example** Input: ``` 4 5 11110 11010 11000 00000 ``` Output: ``` 1 ``` Input: ``` 4 5 11000 11000 00100 00011 ``` Output: ``` 3 ``` **Note:** In the first example, there is only one island consisting of all the \'1\'s in the top left corner. In the second example, there are three islands: one in the top left corner, one in the middle, and one in the bottom right corner. Your goal is to efficiently count the number of disconnected groups of \'1\'s in the grid.","solution":"def num_islands(grid): Returns the number of islands in the given grid. :param grid: List of List of chars, a grid map where \'1\' represents land and \'0\' represents water. :return: Integer, the number of islands. if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == \'0\' or visited[r][c]: return visited[r][c] = True dfs(r + 1, c) # Down dfs(r - 1, c) # Up dfs(r, c + 1) # Right dfs(r, c - 1) # Left island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\' and not visited[r][c]: island_count += 1 dfs(r, c) return island_count"},{"question":"An online retailer is managing a set of warehouses that store products. The retailer needs to efficiently track the inventory of each product and be able to answer queries about product availability across these warehouses. Each warehouse can store any quantity of any given product, and the retailer wants to implement this system using efficient data structures and algorithms. You are tasked with writing a system that allows for the following operations: 1. **Add Inventory**: Record that a certain quantity of a product has arrived at a particular warehouse. 2. **Query Inventory**: Check the total quantity of a product across all warehouses. INPUT FORMAT The first line contains two integers, **n** and **q**, representing the number of products and the number of queries, respectively. This is followed by **n** lines, each containing the initial inventory quantities of the products in the format: ProductID WarehouseID Quantity. After that, **q** lines follow, each representing a query in one of the following formats: - ADD ProductID WarehouseID Quantity: Adds the specified quantity of the product to the given warehouse. - QUERY ProductID: Returns the total quantity of the specified product across all warehouses. OUTPUT FORMAT For each QUERY operation, output a single integer representing the total quantity of the specified product across all warehouses. CONSTRAINTS: - 1 ≤ n ≤ 100,000 - 1 ≤ q ≤ 100,000 - 1 ≤ ProductID, WarehouseID ≤ 1,000,000 - 1 ≤ Quantity ≤ 1,000,000 SAMPLE INPUT 5 3 1 1 10 2 1 15 1 2 5 1 3 8 3 1 7 QUERY 1 ADD 1 1 5 QUERY 1 SAMPLE OUTPUT 23 28 Explanation: Initially, product 1 has 10 units in warehouse 1, 5 units in warehouse 2, and 8 units in warehouse 3 for a total of 23 units. After adding 5 units to warehouse 1 for product 1, the new total is 28 units.","solution":"from collections import defaultdict class InventorySystem: def __init__(self): self.total_inventory = defaultdict(int) self.warehouse_inventory = defaultdict(lambda: defaultdict(int)) def add_inventory(self, product_id, warehouse_id, quantity): self.warehouse_inventory[warehouse_id][product_id] += quantity self.total_inventory[product_id] += quantity def query_inventory(self, product_id): return self.total_inventory[product_id] def process_inventory(n, initial_data, q, queries): system = InventorySystem() # Process initial inventory data for product_id, warehouse_id, quantity in initial_data: system.add_inventory(product_id, warehouse_id, quantity) results = [] # Process queries for query in queries: parts = query.split() if parts[0] == \\"ADD\\": product_id, warehouse_id, quantity = map(int, parts[1:]) system.add_inventory(product_id, warehouse_id, quantity) elif parts[0] == \\"QUERY\\": product_id = int(parts[1]) results.append(system.query_inventory(product_id)) return results"},{"question":"Alice loves collecting different types of candies. She recently acquired a set of unique candy types and wants to organize them in her candy storage jars. Each candy type must be stored in a separate jar which has certain constraints on the maximum candy it can hold. Alice wants to ensure that the jar capacities are utilized optimally to store her candies. You are given an array `candies` where `candies[i]` represents the number of candies of type i that Alice has. You are also given an array `capacities` where `capacities[i]` represents the capacity of jar i. Alice needs your help to find out whether it is possible to store all the candies in the jars such that each jar contains candies of exactly one type and the amount of candies kept in any jar does not exceed its capacity. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of candy types, and also the number of jars. The second line contains n space-separated integers `candies[i]` (1 ≤ candies[i] ≤ 200) — the number of candies of each type. The third line contains n space-separated integers `capacities[i]` (1 ≤ capacities[i] ≤ 200) — the capacities of each jar. Output Print \\"YES\\" if it is possible to store all candies in the jars according to the given constraints, otherwise, print \\"NO\\". Examples Input 3 10 20 30 20 20 20 Output NO Input 4 10 15 20 25 25 25 25 25 Output YES Note In the first example, there are three types of candies and three jars each with a capacity of 20. Since one type of candy has 30 pieces, which is greater than the jar capacity of 20, it is impossible to store all candies under the given constraints. Hence, the output is \\"NO\\". In the second example, each jar can hold the number of candies of the corresponding type as all capacity values (25) are greater than or equal to the count of candies (10, 15, 20, 25) respectively, making it possible to store all candies. Thus, the output is \\"YES\\".","solution":"def can_store_candies(n, candies, capacities): Determine if it is possible to store all types of candies in the jars such that each jar contains candies of exactly one type and the amount of candies do not exceed its capacity. :param n: int - Number of candy types / jars :param candies: list of int - Number of candies of each type :param capacities: list of int - Capacities of each jar :return: str - \\"YES\\" if it is possible to store the candies, otherwise \\"NO\\" for i in range(n): if candies[i] > capacities[i]: return \\"NO\\" return \\"YES\\""},{"question":"In a distant land, there is a peculiar game played by the inhabitants called the \\"Sum Slider\\". In this game, players are given a series of challenges that involve sliding a window across an array of integers in order to maximize the sum of the integers within the window. You are tasked with helping the players by creating a program that, given an array of integers and a window size, finds the maximum sum of any window of that size within the array. A window is defined as a sequence of consecutive elements from the array. For example, if the array is [1, 3, -1, -3, 5, 3, 6, 7] and the window size is 3, then some possible windows are [1, 3, -1], [3, -1, -3], and [-1, -3, 5]. The sum of the window [1, 3, -1] is 1 + 3 - 1 = 3. **Input:** The first line contains two integers n and k (1 ≤ k ≤ n ≤ 105)—the size of the array and the window size, respectively. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 104)—the elements of the array. **Output:** Output a single integer—the maximum sum of any window of size k in the array. **Examples:** **Input:** 8 3 1 3 -1 -3 5 3 6 7 **Output:** 16 **Input:** 5 2 4 2 1 5 6 **Output:** 11 **Explanation:** In the first example, the maximum sum is obtained with the window [5, 3, 6, 7], where the sum is 5 + 3 + 6 + 7 = 16. In the second example, the maximum sum is obtained with the window [5, 6], where the sum is 5 + 6 = 11.","solution":"def max_sum_in_window(arr, k): Returns the maximum sum of any window of size k in the array. :param arr: List of integers :param k: Size of the window :return: Maximum sum # Initial sum of the first window current_sum = sum(arr[:k]) max_sum = current_sum # Slide the window from start to end for i in range(k, len(arr)): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Coding Marathon Alice and Bob are participating in a coding marathon where they need to solve problems in a given sequence. They are given N problems with varying levels of difficulty. Alice will start solving the problems from the beginning, while Bob will start from the end. Both of them can only solve one problem at a time and they can only move towards each other. Alice and Bob want to know the maximum difficulty difference they can achieve between the problems they solve simultaneously at any point in time. If N is odd, it is guaranteed that Alice will always solve one more problem than Bob. Input: The first line of input contains a single integer T, the number of test cases. Each test case begins with a single integer N, the number of problems in the sequence. The next line contains N integers. The ith integer, di, on this line represents the difficulty of the ith problem. Output: For each test case, output a single line containing the maximum difficulty difference they can achieve. Constraints: 1<=T<=10 1<=N<=100000 0<=di<=1000000 Example: Input: 3 5 1 3 6 8 10 4 1 2 3 4 7 5 6 8 9 10 12 15 Output: 9 3 10 Explanation: In the first example, Alice and Bob can choose the problems 1 (Alice) and 10 (Bob) to achieve a difference of 9. In the second example, Alice and Bob can choose the problems 1 (Alice) and 4 (Bob) to achieve a difference of 3. In the third example, Alice and Bob can choose the problems 5 (Alice) and 15 (Bob) to achieve a difference of 10.","solution":"def max_difficulty_difference(T, test_cases): result = [] for case in test_cases: N, difficulties = case max_diff = 0 for i in range(len(difficulties)//2): max_diff = max(max_diff, abs(difficulties[i] - difficulties[N-i-1])) result.append(max_diff) return result"},{"question":"Jack is a gardener who loves to arrange his plants in visually appealing ways. Recently, he has bought several plants, and he wants to arrange them in a row such that certain aesthetic properties are maintained. Jack wants to make sure that if two adjacent plants have a significant height difference, they should be separated by a plant of medium height. Specifically, for any three consecutive plants in the row, the height of the middle plant should always be between the heights of the other two plants. This means if the plants are arranged as h1, h2, h3, then it must hold that (h1 < h2 < h3) or (h1 > h2 > h3). Given the heights of the plants Jack has bought, determine if it\'s possible to arrange them in a row satisfying the above condition. If it\'s possible, provide one possible arrangement; otherwise, indicate that it\'s not possible. Input The first line contains an integer n (1 ≤ n ≤ 100 000) — the number of plants Jack bought. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1 000) — the heights of the plants. Output If it\'s possible to arrange the plants in the desired manner, output \\"Possible\\" on the first line and then output the permutation of plant heights that satisfies the condition on the second line. If it\'s not possible, output \\"Impossible\\". Example Input 5 4 1 3 2 5 Output Possible 1 2 4 3 5 Input 3 5 5 5 Output Impossible","solution":"def can_be_arranged(n, heights): Determine if the heights can be arranged such that for any three consecutive plants (h1, h2, h3), the middle plant\'s height is between the other two\'s heights. If possible, return one such arrangement; otherwise, return \\"Impossible\\". :param n: number of plants :param heights: list of plant heights :return: (\\"Possible\\" or \\"Impossible\\", arrangement or None) if n < 3: return (\\"Possible\\", sorted(heights)) heights.sort() # Check that no two adjacent are the same after sorting for i in range(n - 1): if heights[i] == heights[i + 1]: return (\\"Impossible\\", None) # Middle element always lies between the smallest and the largest, # hence we can just take pairwise elements from start and end left = 0 right = n - 1 result = [] while left <= right: if left == right: # Central element addition result.append(heights[left]) else: result.append(heights[left]) result.append(heights[right]) left += 1 right -= 1 return (\'Possible\', result)"},{"question":"**Problem Statement** Akiro is a researcher working on a new project involving string manipulations. He is particularly interested in finding unique substrings within a given string. Akiro defines a \\"unique substring\\" as a substring that appears only once in the entire string. Given a string `s`, determine the length of the longest unique substring. # Input * A string `s` (1 ≤ |s| ≤ 10^5) # Output * Print the length of the longest unique substring on one line, followed by a newline. # Sample **Sample Input 1** ``` abcdabc ``` **Sample Output 1** ``` 4 ``` **Sample Input 2** ``` aaaa ``` **Sample Output 2** ``` 1 ``` **Sample Input 3** ``` abcabcbb ``` **Sample Output 3** ``` 3 ``` # Explanation: - In the first sample, the longest unique substring is \\"abcd\\", which has a length of 4. - In the second sample, the longest unique substring is \\"a\\", which has a length of 1. - In the third sample, the longest unique substring is either \\"abc\\" or \\"bca\\", each of which has a length of 3.","solution":"def length_of_longest_unique_substring(s): Returns the length of the longest unique substring in the given string s. A unique substring is a substring that appears only once in the entire string. n = len(s) if n == 0: return 0 last_seen = {} start = 0 max_len = 0 for end in range(n): if s[end] in last_seen and last_seen[s[end]] >= start: start = last_seen[s[end]] + 1 else: max_len = max(max_len, end - start + 1) last_seen[s[end]] = end return max_len"},{"question":"You are given a list of integers representing the heights of buildings in a row on a city street. The goal is to determine the number of buildings with an unobstructed view to the ocean, where the ocean is to the right of the buildings. A building has an unobstructed view if there are no taller buildings to its right. Write a function that takes the list of building heights and returns the number of buildings with an unobstructed view. Input The input is a single line containing integers separated by spaces, representing the heights of the buildings (1 ≤ |heights| ≤ 100, 1 ≤ heights[i] ≤ 1000). Output Output a single integer representing the number of buildings with an unobstructed view to the ocean. Example Input 10 4 3 2 5 Output 2 Explanation In the example: The heights are 10, 4, 3, 2, 5. - The building with height 10 has an unobstructed view since there are no buildings to its right. - The building with height 5 has an unobstructed view since there are no taller buildings to its right. - The buildings with heights 4, 3, and 2 do not have unobstructed views as there is at least one taller building to their right.","solution":"def count_unobstructed_views(heights): Returns the number of buildings with an unobstructed view to the ocean. A building has an unobstructed view if there are no taller buildings to its right. :param heights: List of integers representing the heights of buildings. :return: Integer representing the number of buildings with an unobstructed view. max_height_from_right = 0 unobstructed_count = 0 # Traverse the list of heights from right to left for height in reversed(heights): if height > max_height_from_right: unobstructed_count += 1 max_height_from_right = height return unobstructed_count"},{"question":"Tom and Jerry have decided to play a game with coins. The game is played as follows: - They have a set of N coins arranged in a row. Each coin can either have heads (H) or tails (T) facing up. - Starting from the leftmost coin, both players take turns to flip a coin. When a player flips a coin, it flips to its opposite side. - If a player flips a coin that is heads, they win and the game ends immediately. - If a player flips a coin that is tails, they do not win and the play continues with the next player flipping the next coin in the row. - If no coin shows heads after all N coins are flipped, the player who flipped the last coin loses the game. Assuming both Tom and Jerry play optimally and Tom always goes first, your task is to determine who will win the game. # Input Format The input contains a single string of length N, where each character represents the initial state of a coin. The character \'H\' indicates a coin showing heads and \'T\' indicates a coin showing tails. # Output Format Output a single line containing \\"TOM\\" if Tom wins the game and \\"JERRY\\" if Jerry wins the game. # Constraints - 1 ≤ N ≤ 1000 # Sample Input 1 ``` TTHHTH ``` # Sample Output 1 ``` TOM ``` # Sample Input 2 ``` TTTTT ``` # Sample Output 2 ``` JERRY ``` # Explanation **Sample Input 1:** - Tom flips the first coin (T => H), wins immediately. **Sample Input 2:** - All coins are tails. Tom flips first coin (T => H), Jerry flips second coin (T => H), and so on until the last coin, which Tom flips (T => H). Since none of the coins were heads before the last flip, Jerry wins.","solution":"def determine_winner(coins): Determine the winner of the coin game given the initial state of the coins. :param coins: str, a string representing the initial state of the coins. :return: str, \\"TOM\\" if Tom wins, \\"JERRY\\" if Jerry wins. if \'H\' in coins: return \\"TOM\\" else: return \\"JERRY\\""},{"question":"Vera is participating in a programming contest. She is given an array of n integers and a target integer x. Her task is to find the length of the shortest subarray that has a sum greater than or equal to x. If there is no such subarray, she should return -1. Input The first line of the input contains two integers n and x (1 ≤ n ≤ 100 000, 1 ≤ x ≤ 10^9) — the length of the array and the target sum. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the elements of the array. Output Print the length of the shortest subarray with a sum greater than or equal to x. If no such subarray exists, output -1. Examples Input 5 11 1 2 3 4 5 Output 3 Input 4 15 1 2 3 4 Output -1 Note In the first sample, the subarray [3, 4, 5] or [4, 5, 2] has a sum of 12, which is greater than or equal to 11. The length of the shortest such subarray is 3. In the second sample, no subarray has a sum greater than or equal to 15, so the output is -1.","solution":"def shortest_subarray_length(n, x, arr): Finds the length of the shortest subarray with a sum greater than or equal to the target sum x. If no such subarray exists, returns -1. Parameters: n (int): The length of the array x (int): The target sum arr (list of int): The array of integers Returns: int: The length of the shortest subarray or -1 if no such subarray exists # Initialize variables left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += arr[right] while current_sum >= x: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Christopher is a talented engineer working on a space station, and his latest task is to monitor the air quality in various sections of the station. There are multiple sections, and air can flow between sections in certain directions. To ensure safety, he must check for the presence of any cycles in the airflow (which can indicate a potential hazard) and compute the lengths of the shortest cycles if they exist. The air flow can be represented as a directed graph, where nodes represent sections and edges represent the direction in which air flows. Your task is to write a program that detects the presence of cycles in the graph and, if cycles exist, determines the length of the shortest cycle. Input The input consists of multiple datasets, each in the following format: n m x1 y1 x2 y2 ... xm ym Each dataset starts with two non-negative integers n (the number of sections) and m (the number of directed airflows). The i-th airflow is represented by an edge from section xi to section yi (1 ≤ xi, yi ≤ n). If n = 0 and m = 0, it indicates the end of input and should not be processed. You can assume the following: - 1 ≤ n ≤ 100. - 0 ≤ m ≤ n*(n - 1). Output For each dataset, output a single line. If there is no cycle in the graph, print \\"No cycle\\". If there is a cycle, print the length of the shortest cycle found in the graph. Example Input 4 4 1 2 2 3 3 4 4 2 3 3 1 2 2 3 3 1 5 6 1 2 2 3 3 4 4 5 5 3 2 1 0 0 Output 3 3 No cycle","solution":"import sys from collections import deque, defaultdict def find_shortest_cycle(n, m, edges): if n == 0 and m == 0: return def bfs(start): dist = [-1] * (n + 1) queue = deque([(start, -1)]) dist[start] = 0 while queue: current, parent = queue.popleft() for neighbor in graph[current]: if dist[neighbor] == -1: dist[neighbor] = dist[current] + 1 queue.append((neighbor, current)) elif neighbor != parent: return dist[current] + dist[neighbor] + 1 return float(\'inf\') graph = defaultdict(list) for x, y in edges: graph[x].append(y) shortest_cycle = float(\'inf\') for i in range(1, n + 1): shortest_cycle = min(shortest_cycle, bfs(i)) if shortest_cycle == float(\'inf\'): print(\\"No cycle\\") else: print(shortest_cycle) def main(): input_data = sys.stdin.read().strip().split(\'n\') index = 0 while index < len(input_data): n, m = map(int, input_data[index].split()) if n == 0 and m == 0: break edges = [] for _ in range(m): index += 1 x, y = map(int, input_data[index].split()) edges.append((x, y)) find_shortest_cycle(n, m, edges) index += 1 if __name__ == \\"__main__\\": main()"},{"question":"Input 6 B WB BWB WWB BWWB WBWB Output 14","solution":"def count_B_W_pairs(strings): Given a list of strings, this function counts the number of times \'B\' is followed by \'W\'. total_count = 0 for s in strings: total_count += s.count(\'BW\') return total_count def input_handler(n, strings): Handles the input and calls the appropriate function to get the result. return count_B_W_pairs(strings)"},{"question":"In a magical land, there are paths that connect distinctive towns labeled with unique positive integers. Each path has a specific distance. Unfortunately, a great storm has destroyed some of the paths, and now the residents need help determining the shortest route from the capital to a town they\'ve never visited before. Given a list of towns and their connecting paths with distances, your task is to find the shortest path from the capital town (labeled 1) to the destination town. If no path exists, help the residents by returning -1. Input: First line contains T, the number of towns, and P, the number of paths. Next P lines each contain three integers A, B, and D, representing a bidirectional path between town A and town B with a distance D. The last line contains the destination town D. Output: Print the shortest distance from the capital (town 1) to the destination town. If there is no path, print -1. Constraints: 2 ≤ T ≤ 1000 1 ≤ A, B ≤ T 1 ≤ D ≤ 10000 1 ≤ P ≤ 5000 SAMPLE INPUT 5 6 1 2 4 1 3 2 2 3 5 3 4 3 2 4 6 4 5 1 5 SAMPLE OUTPUT 6","solution":"import heapq from collections import defaultdict def shortest_path(num_towns, num_paths, paths, destination): # Create adjacency list for the graph graph = defaultdict(list) for node1, node2, weight in paths: graph[node1].append((weight, node2)) graph[node2].append((weight, node1)) # Dijkstra\'s algorithm dist = {i: float(\'inf\') for i in range(1, num_towns + 1)} dist[1] = 0 priority_queue = [(0, 1)] # (distance, node) while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for weight, v in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist[destination] if dist[destination] != float(\'inf\') else -1"},{"question":"Polycarp has a sequence of integers a_1, a_2, ..., a_n, all between 1 and n, inclusive. He wants to create a permutation p_1, p_2, ..., p_n of the sequence 1, 2, ..., n such that the number of indices i for which a_i = p_i is maximized. You need to write a function that generates such a permutation. Input - The first line contains a single integer q (1 ≤ q ≤ 100) — the number of test cases. - The first line of each test case contains an integer n (1 ≤ n ≤ 50) — the length of the sequence. - The second line of each test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ n). Output For each test case, output a line containing n integers p_1, p_2, ..., p_n. Example Input 2 3 1 3 2 4 4 2 3 1 Output 1 3 2 4 2 3 1 Explanation In the first test case, the given sequence is [1, 3, 2], and the permutation [1, 3, 2] can be obtained directly as it matches the original sequence. Therefore, the number of indices i for which a_i = p_i is maximized. In the second test case, the given sequence is [4, 2, 3, 1], and the permutation [4, 2, 3, 1] can be obtained directly as it matches the original sequence. Hence, the number of indices i for which a_i = p_i is maximized.","solution":"def maximize_identical_indices(q, test_cases): result = [] for i in range(q): n = test_cases[i][0] a = test_cases[i][1] result.append(a) return result"},{"question":"Alice is creating a password for her new email account and wants it to be very secure. A secure password is one that contains at least: - One uppercase letter, - One lowercase letter, - One digit, - One special character from the set: `!@#%^&*()-+`. Alice also wants her password to have a minimum length of 8 characters. Given a string representing the password she has chosen, determine the minimum number of extra characters (steps) she needs to add to make it a secure password according to the rules above. Note that each type of character (uppercase, lowercase, digit, special character) must be represented at least once in the final password. Input The only line of the input contains a string consisting of uppercase and lowercase letters, digits, and special characters. The string\'s length does not exceed 100. Output Print a single number — the least number of characters Alice needs to add to make her password secure. Examples Input ab1 Output 5 Input Ab1eFgH Output 0 Input 1234567 Output 3","solution":"def min_additional_characters_to_secure(password): Returns the minimum number of characters needed to add to make the password secure. has_upper = False has_lower = False has_digit = False has_special = False special_characters = set(\'!@#%^&*()-+\') for char in password: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): has_digit = True elif char in special_characters: has_special = True missing_types = 0 if not has_upper: missing_types += 1 if not has_lower: missing_types += 1 if not has_digit: missing_types += 1 if not has_special: missing_types += 1 # Calculate the number of characters to be added to reach minimum length of 8 min_length_requirement = max(0, 8 - len(password)) # The final number of characters to add is the maximum of missing_types and min_length_requirement return max(missing_types, min_length_requirement)"},{"question":"Given an integer N, determine if it can be expressed as the sum of exactly two or more consecutive positive integers. Constraints * All values in input are integers. * 1 leq N leq 10^9 Input Input is given from Standard Input in the following format: N Output Print \\"YES\\" if N can be expressed as the sum of two or more consecutive positive integers, otherwise print \\"NO\\". Examples Input 15 Output YES Input 16 Output NO Input 21 Output YES","solution":"def can_be_expressed_as_sum_of_consecutive_integers(N): Determines if a number N can be expressed as the sum of exactly two or more consecutive positive integers. # Starting from k = 2 as the minimum requirement is two or more consecutive numbers k = 2 while k * (k + 1) // 2 <= N: if (N - (k * (k + 1)) // 2) % k == 0: return \\"YES\\" k += 1 return \\"NO\\""},{"question":"You are given a string s and a non-empty string t. Find the minimum window in s that will contain all the characters in t. If no such window exists, return the empty string \\"\\". Input - The first line contains a string s (1 ≤ |s| ≤ 105 - the length of s should not exceed 100,000). - The second line contains a string t (1 ≤ |t| ≤ 105 - the length of t should not exceed 100,000). Output - Print the minimum window in s which contains all characters in t. If such window does not exist, print an empty string \\"\\". Note: - When there are multiple possible answer windows, return the one that\'s located first in the input. Example Input ADOBECODEBANC ABC Output BANC Input a a Output a Input a aa Output \\"\\"","solution":"from collections import Counter, defaultdict def min_window(s, t): if not s or not t: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = defaultdict(int) ans = float(\\"inf\\"), None, None # length of window, left, right indexs while r < len(s): char = s[r] window_counts[char] += 1 if char in dict_t and window_counts[char] == dict_t[char]: formed += 1 while l <= r and formed == required: char = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[char] -= 1 if char in dict_t and window_counts[char] < dict_t[char]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]:ans[2] + 1]"},{"question":"During a summer camp, students play a game where they stand in a circle and pass a ball. The game starts with a designated student holding the ball, and then each student can pass the ball to another student either to their left or their right, but not to themselves. The objective is to determine the minimum number of passes required for the ball to return to the starting student. The students are standing in a numbered circle from 1 to n, and the ball starts with student k. The students are indexed in a modular fashion, so student 1 is next to student n. Write a program that takes the number of students n, and the starting student k, and calculates the minimum number of passes required for the ball to return to student k. Input The input consists of a single line containing two integers n and k (3 ≤ n ≤ 10^5, 1 ≤ k ≤ n) — the number of students and the starting student\'s index. Output Print a single integer which is the minimum number of passes required for the ball to return to the starting student. Examples Input 5 3 Output 2 Input 6 1 Output 3 Input 8 4 Output 4 Note In the first example, the students are standing in a circle with indices 1 to 5. If the ball starts with student 3, it can be passed to student 2 (left) and then back to student 3, or student 4 (right) and then back to student 3, requiring at least 2 passes in either case. In the second example, the ball starts with student 1 and can be passed to student 6 or 2 in the first pass, then to student 5 or 3, and finally back to student 1, leading to a minimum of 3 passes.","solution":"def minimum_passes(n, k): Returns the minimum number of passes required for the ball to return to the starting student. if n % 2 == 0: return n // 2 else: return (n - 1) // 2 # Example usage: # print(minimum_passes(5, 3)) # Output: 2 # print(minimum_passes(6, 1)) # Output: 3 # print(minimum_passes(8, 4)) # Output: 4"},{"question":"You are given a string **S** consisting of lowercase English letters and you are tasked with determining the minimum number of steps required to transform it into a palindrome. In one step, you may replace any character in the string with any other character. A palindrome is a word that reads the same forward and backward, for example, \\"radar\\" or \\"level\\". # Input - The first line contains an integer **n** (1 ≤ n ≤ 1000), the length of the string **S**. - The second line contains the string **S** of length **n**. # Output Output the minimum number of steps required to transform **S** into a palindrome. # Examples Example 1 **Input:** ``` 4 abca ``` **Output:** ``` 1 ``` Example 2 **Input:** ``` 5 abcde ``` **Output:** ``` 2 ``` Example 3 **Input:** ``` 6 aabbcc ``` **Output:** ``` 2 ``` # Explanation of the Examples Example 1 For the string \\"abca\\", changing \'b\' to \'c\' or \'c\' to \'b\' results in the palindrome \\"acca\\" or \\"abba\\" respectively, which only requires one step. Example 2 For the string \\"abcde\\", at least two changes are necessary, such as changing \'a\' to \'e\' and \'b\' to \'d\', resulting in the palindrome \\"edcde\\". Example 3 For the string \\"aabbcc\\", changing \'b\' to \'a\' and \'c\' to \'b\' results in the palindrome \\"aabbbaa\\", which requires two steps.","solution":"def min_steps_to_palindrome(n, S): Returns the minimum number of steps required to transform the given string S into a palindrome. left = 0 right = n - 1 steps = 0 while left < right: if S[left] != S[right]: steps += 1 left += 1 right -= 1 return steps"},{"question":"Alex is participating in a robot navigation challenge. The goal is to navigate a robot from the top-left corner to the bottom-right corner of a grid, avoiding obstacles. The grid has dimensions n x n, and some cells are blocked, meaning the robot cannot pass through them. The robot can only move in two directions: right (→) and down (↓). Your task is to determine the number of distinct paths the robot can take to reach the bottom-right corner from the top-left corner without passing through any blocked cells. Input The first line contains two space-separated integers, n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 105) — the size of the grid and the number of blocked cells. The next k lines each contain two space-separated integers, xi and yi (1 ≤ xi, yi ≤ n) — the coordinates of the i-th blocked cell. All given cells are distinct. Output Print a single integer — the number of unique paths from the top-left corner (1, 1) to the bottom-right corner (n, n) that do not pass through any blocked cells. Examples Input 3 1 2 2 Output 2 Input 4 2 2 2 3 3 Output 4 Input 5 0 Output 70 Note In the first test case, there are 2 paths the robot can take: 1. (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) 2. (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3) In the second test case, there are 4 paths: 1. (1, 1) → (1, 2) → (1, 3) → (1, 4) → (2, 4) → (3, 4) → (4, 4) 2. (1, 1) → (1, 2) → (1, 3) → (2, 3) → (2, 4) → (3, 4) → (4, 4) 3. (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 4) → (4, 4) 4. (1, 1) → (1, 2) → (2, 2) → (2, 3) → (3, 3) → (3, 4) → (4, 4) In the third test case, since there are no blocked cells, there are 70 unique paths from the top-left corner to the bottom-right corner.","solution":"def unique_paths(n, k, blocked_cells): # Initialize a 2D list with zeroes dp = [[0] * n for _ in range(n)] # Mark blocked cells for x, y in blocked_cells: dp[x-1][y-1] = -1 # Using -1 to denote blocked cells # Starting point if dp[0][0] == -1: return 0 dp[0][0] = 1 # Fill the first row for j in range(1, n): if dp[0][j] == -1: break dp[0][j] = 1 # Fill the first column for i in range(1, n): if dp[i][0] == -1: break dp[i][0] = 1 # Compute number of unique paths for each cell for i in range(1, n): for j in range(1, n): if dp[i][j] == -1: continue if dp[i-1][j] != -1: dp[i][j] += dp[i-1][j] if dp[i][j-1] != -1: dp[i][j] += dp[i][j-1] # The number of unique paths to the bottom-right corner return dp[-1][-1]"},{"question":"You are given a tree with n nodes, rooted at node 1. Each node has a value associated with it. We need to perform q operations on this tree. In each operation, you will be given a node, and you have to report the maximum value among all nodes in the subtree rooted at that node or the minimum value among them. Input The first line contains two integers, n and q (1 ≤ n, q ≤ 100,000) — the number of nodes in the tree and the number of operations to be performed on the tree, respectively. The second line contains n integers, v_1, v_2, ..., v_n, where v_i is the value associated with the i-th node (1 ≤ v_i ≤ 10^9). Each of the next n−1 lines contains two integers, u and v (1 ≤ u, v ≤ n) indicating there is an edge between nodes u and v. It\'s guaranteed to be a tree. Each of the next q lines contains two integers, t and x (1 ≤ t ≤ 2, 1 ≤ x ≤ n): - If t = 1, you are required to output the maximum value in the subtree rooted at node x. - If t = 2, you are required to output the minimum value in the subtree rooted at node x. Output For each operation, print the result in a new line. Example Input 5 3 1 2 3 4 5 1 2 1 3 1 4 1 5 1 1 2 2 1 3 Output 5 2 3 Note In the example, we have 5 nodes and 3 operations. The values associated with the nodes are 1, 2, 3, 4, and 5. The tree structure is as follows: 1 - 2 | 3 | 4 | 5 The first operation is to find the maximum value in the subtree rooted at node 1, which includes all nodes, hence the output is 5. The second operation is to find the minimum value in the subtree rooted at node 2, which only includes node 2 itself, hence the output is 2. The third operation is to find the maximum value in the subtree rooted at node 3, which includes nodes 3, 4, and 5, hence the output is 5.","solution":"from collections import defaultdict def dfs(node, parent, values, adj, max_value, min_value): curr_max = values[node - 1] curr_min = values[node - 1] for neighbor in adj[node]: if neighbor == parent: continue max_sub, min_sub = dfs(neighbor, node, values, adj, max_value, min_value) curr_max = max(curr_max, max_sub) curr_min = min(curr_min, min_sub) max_value[node] = curr_max min_value[node] = curr_min return curr_max, curr_min def query_tree(n, q, values, edges, queries): adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) max_value = [0] * (n + 1) min_value = [0] * (n + 1) # Perform DFS from node 1 dfs(1, -1, values, adj, max_value, min_value) result = [] for t, x in queries: if t == 1: result.append(max_value[x]) elif t == 2: result.append(min_value[x]) return result"},{"question":"In a faraway kingdom, the king is fascinated with solid shapes. The king has recently been obsessed with cuboids. A cuboid is a 3-dimensional rectangle and can be described by its length, width, and height. For his next birthday, the king has asked his royal mathematician to calculate the volume and the surface area of a cuboid given its dimensions. The royal mathematician has decided to seek your help to write a program that can compute the volume and surface area of cuboids. # Task Write a program that calculates the volume and surface area of a cuboid given its length, width, and height. # Input The input will consist of three positive integers l, w, and h (1 ≤ l, w, h ≤ 1000), which represent the length, width, and height of the cuboid, respectively. # Output Output two integers separated by a space: the volume of the cuboid and the surface area of the cuboid. # Example Input 3 4 5 Output 60 94 # Explanation For the input (3, 4, 5): - The volume of the cuboid is calculated as ( l times w times h = 3 times 4 times 5 = 60 ). - The surface area of the cuboid is calculated as ( 2(lw + wh + hl) = 2(3 times 4 + 4 times 5 + 5 times 3) = 2(12 + 20 + 15) = 2 times 47 = 94 ). Your program should compute and print these two values for the given inputs.","solution":"def cuboid_properties(l, w, h): Calculate the volume and surface area of a cuboid given its dimensions. Parameters: l (int): The length of the cuboid (1 ≤ l ≤ 1000). w (int): The width of the cuboid (1 ≤ w ≤ 1000). h (int): The height of the cuboid (1 ≤ h ≤ 1000). Returns: (int, int): The volume and surface area of the cuboid. volume = l * w * h surface_area = 2 * (l * w + w * h + h * l) return volume, surface_area"},{"question":"Mario is a game developer who is designing a new puzzle game. In this game, there is a row of cells, each of which can contain a number representing gold coins. Players can gather gold coins by moving through the cells in a specific way. You are given the number of cells, n, and a list of gold coins present in each cell. The player starts at the first cell and can only move to the next cell or skip one cell to move to the cell after the next one in a single move. The player aims to gather the maximum possible number of gold coins by the time they reach beyond the last cell. Write a program to find out the maximum number of gold coins the player can collect. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of cells in the row. The second line contains n integers, where the i-th integer represents the number of gold coins in the i-th cell (0 ≤ number of gold coins in any cell ≤ 100). Output Print the maximum number of gold coins the player can collect. Examples Input 5 5 10 20 15 25 Output 50 Input 3 1 2 3 Output 4 Input 6 10 5 0 20 10 15 Output 45 Note In the first example, the player can move through the cells in the following way to collect the highest number of gold coins: - Start at the first cell: 5 coins. - Move to the third cell: 20 coins. - Move to the fifth cell: 25 coins. Total coins collected = 5 + 20 + 25 = 50 coins. In the second example, the player can move through the cells in the following way to collect the highest number of gold coins: - Start at the first cell: 1 coin. - Move to the third cell: 3 coins. Total coins collected = 1 + 3 = 4 coins.","solution":"def max_gold_coins(n, coins): if n == 1: return coins[0] dp = [0] * n dp[0] = coins[0] if n > 1: dp[1] = max(coins[0], coins[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + coins[i]) return dp[-1]"},{"question":"Arya is organizing a painting competition for kids in her neighborhood. Each kid participating in the competition has been assigned a unique number from 1 to \\"m\\" (\\"m\\" being the input value). To ensure fairness, Arya wants to distribute several art materials to each participant based on their assigned number. Specifically, each participant receives a number of materials equal to the sum of the digits of their assigned number. Help Arya determine the total number of art materials required for all participants. Input: 12 NOTE: You do not need to write a full program for this problem. Write the answer to the given input in the provided code snippet. SAMPLE INPUT 5 SAMPLE OUTPUT 15","solution":"def total_art_materials(m): Returns the total amount of art materials needed for m participants. Each participant receives a number of materials equal to the sum of the digits of their assigned number. total_materials = 0 for i in range(1, m + 1): total_materials += sum(int(digit) for digit in str(i)) return total_materials"},{"question":"A group of friends is organizing a relay race. Each runner in the relay will run a specific segment of the total distance. To ensure the teams are balanced, they want to distribute the running segments as evenly as possible based on the abilities of the runners. Each runner has an efficiency score that determines how far they can run per unit of time. Given the total distance of the race and the efficiency scores of each runner, you need to determine the minimum time required to complete the race. INPUT: First line of input contains an integer D which is the total distance of the race. Second line contains an integer n which represents the number of runners. Next line contains n integers separated by spaces where each integer denotes the efficiency score of a runner. OUTPUT: Output a single floating-point number representing the minimum time required to complete the race. The result should be rounded to two decimal places. CONSTRAINTS: 1 ≤ D ≤ 10^6 1 ≤ n ≤ 10^5 1 ≤ Efficiency score ≤ 10^6 SAMPLE INPUT: 100 3 5 10 15 SAMPLE OUTPUT: 3.33 Explanation: In the sample input, the total distance D is 100 meters and there are 3 runners with efficiency scores 5, 10, and 15 respectively. The total efficiency is 5 + 10 + 15 = 30. Thus, the minimum time required to complete the race is 100 / 30 ≈ 3.33 seconds.","solution":"def minimum_time_to_complete_race(D, n, efficiency_scores): Calculates the minimum time required to complete the race given the total distance D, number of runners n, and their efficiency scores. Parameters: D (int): Total distance of the race. n (int): Number of runners. efficiency_scores (list of int): Efficiency scores of the runners. Returns: float: Minimum time required to complete the race rounded to two decimal places. total_efficiency = sum(efficiency_scores) min_time = D / total_efficiency return round(min_time, 2)"},{"question":"You are given an integer array `A` of size `N`. Your task is to determine the length of the longest subarray that contains at most two distinct integers. Input: The first line contains a single integer `T`, the number of test cases. The first line of each test case contains a single integer `N` denoting the size of the array. The second line of each test case contains `N` integers separated by spaces representing the elements of the array `A`. Output: For each test case, output a single integer denoting the length of the longest subarray with at most two distinct integers. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ A[i] ≤ 1000 Example: Input: 2 6 1 2 1 2 3 3 4 1 2 3 4 Output: 4 2 Explanation: Example 1: The longest subarray with at most two distinct integers is `[1, 2, 1, 2]` which has a length of 4. Example 2: The longest subarray with at most two distinct integers is `[1, 2]` which has a length of 2.","solution":"def longest_subarray_with_two_distinct_integers(arr): Returns the length of the longest subarray with at most two distinct integers. n = len(arr) if n == 0: return 0 left = 0 right = 0 max_len = 0 freq = {} while right < n: if arr[right] in freq: freq[arr[right]] += 1 else: freq[arr[right]] = 1 while len(freq) > 2: freq[arr[left]] -= 1 if freq[arr[left]] == 0: del freq[arr[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len def solve(T, cases): results = [] for i in range(T): N, arr = cases[i] results.append(longest_subarray_with_two_distinct_integers(arr)) return results"},{"question":"Ana is fascinated by unique patterns. One of her favorite patterns is the \\"Zigzag conversion\\" of a given string. The string is written in a zigzag pattern on a given number of rows. The characters are then read line by line. For example, the string \\"PAYPALISHIRING\\" is written in a zigzag pattern on 3 rows as follows: P A H N A P L S I I G Y I R And then read line by line: \\"PAHNAPLSIIGYIR\\" Given a string and a number of rows, your task is to return the string written in a zigzag pattern and read line by line. Input - The first line of input contains a string s (1 ≤ |s| ≤ 10^4). - The second line of input contains an integer numRows (1 ≤ numRows ≤ 1000). Output Output the string converted into the zigzag pattern and read line by line. Examples Input PAYPALISHIRING 3 Output PAHNAPLSIIGYIR Input HELLO 2 Output HLOEL Input ABCDEFG 4 Output AGBFCED","solution":"def convert_zigzag(s, numRows): Converts the given string `s` into a zigzag pattern with the given `numRows` and returns the result read line by line. if numRows == 1 or numRows >= len(s): return s rows = [\'\'] * numRows current_row = 0 direction = -1 # Will be flipped to 1 on first use for char in s: rows[current_row] += char # Change direction at the top and bottom of the zigzag if current_row == 0 or current_row == numRows - 1: direction *= -1 current_row += direction return \'\'.join(rows)"},{"question":"In a library, there are n books arranged in a single row. Each book has a certain thickness. The books may be moved any number of times, but they always remain in a row. You need to place dividers between some of the books such that each section created between the dividers has a total thickness of books not exceeding a given limit. Your task is to determine the minimum number of dividers needed to achieve this arrangement. Input The first line contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 10^9) — the number of books and the maximum total thickness of books that can be in one section respectively. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^8), where t_i is the thickness of the i-th book. Output Print a single integer — the minimum number of dividers needed. Examples Input 5 10 2 3 5 6 1 Output 1 Input 7 15 5 2 8 6 4 3 7 Output 2 Note In the first example, you can place a divider after the third book (with thickness 5) to create sections with total thicknesses: {2, 3, 5} and {6, 1}. Both sections have thickness ≤ 10, thus only 1 divider is needed. In the second example, you can place dividers after the second and the fifth books to create the sections: {5, 2}, {8, 6}, {4, 3, 7}. Each section has a total thickness ≤ 15. Thus, 2 dividers are needed.","solution":"def min_dividers_needed(n, d, thicknesses): Determines the minimum number of dividers needed to ensure no section has a total thickness exceeding d. dividers = 0 current_thickness = 0 for thickness in thicknesses: if current_thickness + thickness > d: dividers += 1 current_thickness = thickness else: current_thickness += thickness return dividers"},{"question":"You are given a string s representing a sequence of lowercase English letters that someone has accidentally typed with the Caps Lock key active. Convert the entire string as if you were fixing the mistakenly pressed Caps Lock key - except for the first character, which should remain uppercase if the rest of the string is in uppercase (not counting the first character itself). Constraints * 1 leq |s| leq 100 * s consists of lowercase English letters Input The input consists of a single string s up to 100 characters. Output Print the corrected string, where only the first character is uppercase and the rest are lowercase, or, if the first character is lowercase, keep all characters the same. Examples Input hELLO Output Hello Input wORLD Output World","solution":"def fix_caps_lock(s): Fix the string s that was typed with Caps Lock key active. The first character remains uppercase if the rest of the string is in uppercase. Otherwise, the entire string is converted into lowercase except for the first character. Parameters: s (str): The input string Returns: str: The corrected string # Check if the entire string except for the first character is in uppercase if s[1:].isupper(): return s[0].upper() + s[1:].lower() # Otherwise return the string as it is return s"},{"question":"You are given a binary tree where each node has an integer value. The task is to find the length of the longest path from one leaf to another leaf in the binary tree. The length of a path is the number of edges between the two nodes on the path. Write a function `longest_leaf_to_leaf_path(root)` that takes the root of the binary tree as input and returns the length of the longest path from one leaf to another leaf. # Input The function will be called as `longest_leaf_to_leaf_path(root)`, where `root` is the reference to the root node of the binary tree. A tree node is defined as follows: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` # Output Return the length of the longest path from one leaf to another leaf in the binary tree. # Constraints - The number of nodes in the tree is in the range `[0, 10000]`. - `-1000 <= Node value <= 1000` # Example 1. **Input:** Given the following binary tree: ``` 1 / 2 3 / 4 5 ``` **Output:** 3 **Explanation:** The longest path from one leaf to another leaf is `4 -> 2 -> 5` which has 3 edges. 2. **Input:** Given the following binary tree: ``` 1 / 2 / 4 5 / 6 ``` **Output:** 4 **Explanation:** The longest path from one leaf to another leaf is `6 -> 4 -> 2 -> 5` which has 4 edges.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def longest_leaf_to_leaf_path(root): Returns the length of the longest path from one leaf to another leaf in the binary tree. if not root: return 0 def dfs(node): nonlocal diameter if not node: return 0 left_depth = dfs(node.left) right_depth = dfs(node.right) if node.left and node.right: diameter = max(diameter, left_depth + right_depth) return max(left_depth, right_depth) + 1 diameter = 0 dfs(root) return diameter"},{"question":"The famous \\"Be Creative\\" company asked you to generate a unique identifier for each user. A unique identifier is a string that only contains lowercase English letters and must be at least m characters long but not longer than n characters. You are to write a program that calculates the total number of unique identifiers possible given the constraints. Input The first line contains two integers, m and n (1 ≤ m ≤ n ≤ 26) – the minimum and maximum length of the unique identifier. Output Output one integer – the total number of unique identifiers possible. Examples Input 1 2 Output 702","solution":"def total_unique_identifiers(m, n): Returns the total number of unique identifiers possible given the constraints. total = 0 for length in range(m, n + 1): total += 26 ** length return total"},{"question":"Alice enjoys solving puzzles in her free time. She comes across a unique puzzle game where she has to arrange several given strings into a sequence such that the last character of each string matches the first character of the next string in the sequence. Some strings may need to be reversed to find a valid sequence. Help Alice by determining if it is possible to reorder and potentially reverse some of the strings to form a sequence with the given conditions. If possible, return one such valid sequence, otherwise return \\"IMPOSSIBLE\\". Input: The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of strings. The following n lines each contain a string consisting of lowercase English letters only (1 ≤ length of each string ≤ 1000). Output: If it\'s impossible to reorder the strings to meet the condition, print \\"IMPOSSIBLE\\". Otherwise, print \\"POSSIBLE\\" in the first line. Then print the n strings in the order of the sequence, each on a new line. Each string should appear either as it is or reversed. Example Input 4 abc cba bac abb Output POSSIBLE abc cba abb bac","solution":"def is_sequence_possible(strings): from collections import defaultdict, deque def can_form_sequence(start, strings): used = set() result = [] q = deque([(start, strings.index(start), False)]) q.extend([(s[::-1], i, True) for i, s in enumerate(strings) if s[::-1][0] == start[-1]]) while q: current, idx, reversed_flag = q.popleft() if idx in used: continue used.add(idx) result.append((current, reversed_flag)) for i, s in enumerate(strings): if i in used: continue if s[0] == current[-1]: q.append((s, i, False)) elif s[::-1][0] == current[-1]: q.append((s[::-1], i, True)) if len(result) == len(strings): return result return None for s in strings: res = can_form_sequence(s, strings) if res: returned_strings = [s if not rev else s[::-1] for s, rev in res] return \\"POSSIBLE\\", returned_strings return \\"IMPOSSIBLE\\", [] # Ensuring the helper function to use for testing def main(strings): status, result = is_sequence_possible(strings) if status == \\"IMPOSSIBLE\\": return \\"IMPOSSIBLE\\" else: return [\\"POSSIBLE\\"] + result"},{"question":"You are given a list of integers. Your task is to find the integer that appears the most times in the list. It is guaranteed that there is a unique integer that appears most frequently. For example, given the list `[1, 3, 2, 2, 3, 2, 3, 3]`, the integer `3` appears most frequently (4 times). Input The first line of input contains an integer `n` (1 <= n <= 100), the number of integers in the list. The second line contains `n` integers separated by spaces, each integer between 1 and 1000 inclusive. Output Print a single integer — the integer that appears the most times in the list. Examples Input 8 1 3 2 2 3 2 3 3 Output 3 Input 5 5 5 5 4 4 Output 5 Input 6 10 20 30 10 20 10 Output 10","solution":"def most_frequent_integer(n, arr): Given a list of integers, find the integer that appears the most times. Parameters: n (int): Number of integers in the list. arr (list): List of integers. Returns: int: The integer that appears the most times. from collections import Counter frequency = Counter(arr) most_common = frequency.most_common(1)[0][0] return most_common"},{"question":"Anna loves experimenting with strings. One day, she decides to play a game where she takes a string and performs Q queries on it. Each query can be one of the following two types: 1. `1 x c` - Replace the character at position `x` (1-based index) in the string with character `c`. 2. `2 l r` - Check if the substring from position `l` to `r` (1-based index) is a palindrome. Anna asks for your help in solving these queries efficiently. Input format: The first line contains the string `S` consisting of lowercase English letters. The second line contains a single integer `Q` - number of queries. Each of the next `Q` lines contain one of the two types of queries. Output format: For each query of type `2 l r`, output \\"YES\\" if the substring is a palindrome, and \\"NO\\" otherwise. Constraints: 1 ≤ length of S ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ x, l, r ≤ length of S SAMPLE INPUT abacaba 5 2 1 7 2 2 6 1 3 d 2 1 7 2 2 6 SAMPLE OUTPUT YES YES NO NO","solution":"def perform_queries(S, queries): Processes the queries on the string S and returns the results of palindrome checks. results = [] S = list(S) # Convert string to list for mutability for query in queries: parts = query.split() if parts[0] == \\"1\\": # Replace character at 1-based index x with c x = int(parts[1]) c = parts[2] S[x - 1] = c elif parts[0] == \\"2\\": # Check if substring from l to r is palindrome l = int(parts[1]) r = int(parts[2]) substring = S[l - 1:r] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a distant land, there is a magical forest where trees grow in a particular sequence. Each tree has a specific height, and the heights of the trees form a sequence such that each height is the sum of the heights of the two previous trees. The first two trees in the sequence, however, are given specific values. The people of the land use this sequence of tree heights to determine the structural support needed for buildings. Given the height of the first two trees and the total number of trees, your task is to compute the sequence of tree heights and print it. Input The input consists of three integers: - The height of the first tree ( t1 ) (0 ≤ ( t1 ) ≤ 100) - The height of the second tree ( t2 ) (0 ≤ ( t2 ) ≤ 100) - The total number of trees ( n ) (2 ≤ ( n ) ≤ 20) Output Print the sequence of tree heights separated by spaces. Examples Input 1 1 5 Output 1 1 2 3 5 Input 2 3 7 Output 2 3 5 8 13 21 34 Input 5 8 4 Output 5 8 13 21","solution":"def tree_heights(t1, t2, n): Compute the sequence of tree heights based on the given rules. Args: t1 (int): Height of the first tree. t2 (int): Height of the second tree. n (int): Total number of trees. Returns: list: List containing the heights of the trees. if n == 1: return [t1] elif n == 2: return [t1, t2] heights = [t1, t2] for i in range(2, n): next_height = heights[-1] + heights[-2] heights.append(next_height) return heights"},{"question":"The city\'s transportation authority has decided to modernize its public transportation system. One significant part of this is to redesign the network of bus routes to make the most efficient connections possible. They have a dataset containing information about the current bus routes, and they aim to identify routes that overlap significantly with each other to potentially merge them and simplify the system. You are tasked with writing a program to help identify these overlapping routes. Each bus route can be represented as a list of bus stops in the order they appear on the route. Two routes are considered to overlap if they share at least `K` consecutive stops in the same order. You will be given the current bus routes and the value `K`, and you need to determine which pairs of routes overlap based on the given criterion. Input The first line of input contains the integers `N` and `K` (1 ≤ N ≤ 1000, 1 ≤ K ≤ 50), where `N` is the number of bus routes and `K` is the minimum number of consecutive stops for overlap. The next `N` lines each describe a bus route. The `ith` line starts with an integer `L_i` (1 ≤ L_i ≤ 500), the number of stops on the `ith` route, followed by `L_i` integers, the bus stop IDs in the order they are visited. Output Output all pairs of overlapping routes in lexicographical order of the pair `(route_i, route_j)` where `1 ≤ i < j ≤ N`. Each pair should be printed on a new line in the format `i j`, indicating that route `i` and route `j` overlap. Example Input ``` 4 3 5 1 2 3 4 5 6 3 4 5 6 7 8 7 10 11 12 3 4 5 6 4 1 2 3 5 ``` Output ``` 1 2 1 3 1 4 2 3 ``` Explanation - Routes 1 and 2 overlap because they share the stops [3, 4, 5]. - Routes 1 and 3 overlap because they share the stops [3, 4, 5]. - Routes 1 and 4 overlap because they share the stops [1, 2, 3]. - Routes 2 and 3 overlap because they share the stops [3, 4, 5]. Note Ensure that each stop in the bus routes retains its order when identifying overlaps, and pairs should be output in incremental order regarding route indices.","solution":"def find_overlapping_routes(N, K, routes): def has_k_consecutive_stops(route1, route2, K): len1, len2 = len(route1), len(route2) for i in range(len1 - K + 1): for j in range(len2 - K + 1): if route1[i:i+K] == route2[j:j+K]: return True return False overlaps = [] for i in range(N): for j in range(i + 1, N): if has_k_consecutive_stops(routes[i], routes[j], K): overlaps.append((i + 1, j + 1)) return overlaps # Example usage: if __name__ == \\"__main__\\": N, K = 4, 3 routes = [ [1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8], [10, 11, 12, 3, 4, 5, 6], [1, 2, 3, 5] ] result = find_overlapping_routes(N, K, routes) for res in result: print(res[0], res[1])"},{"question":"# Problem Description: Alice, being an avid book reader, likes to analyze the sentences within her books. A particular curiosity of hers is to check whether a given sentence is a Pangram or not. A Pangram is a sentence containing every letter of the alphabet at least once. Help Alice by writing a program that checks if the given sentences are Pangrams. # Input: The first line of input contains an integer T denoting the number of test cases. Each of the following T lines contains a single sentence S that Alice wants to check. # Output: For each test case, output a single line, \\"YES\\" if the given sentence is a Pangram and \\"NO\\" otherwise. # Constraints: 1. 1 ≤ T ≤ 10 2. 1 ≤ length of S ≤ 1000 # Example: Input: ``` 3 The quick brown fox jumps over the lazy dog Hello world Pack my box with five dozen liquor jugs ``` Output: ``` YES NO YES ``` # Explanation: - The first sentence contains every letter from \'a\' to \'z\', so the output is \\"YES\\". - The second sentence does not contain all the letters of the alphabet, so the output is \\"NO\\". - The third sentence also contains every letter from \'a\' to \'z\', hence the output is \\"YES\\".","solution":"def is_pangram(sentence): Check if the given sentence is a pangram. A pangram is a sentence containing every letter of the alphabet at least once. alphabet_set = set(\'abcdefghijklmnopqrstuvwxyz\') sentence_set = set(sentence.lower()) return alphabet_set.issubset(sentence_set) def check_pangrams(test_cases): For each sentence in test_cases, return \\"YES\\" if it is a pangram, \\"NO\\" otherwise. Args: test_cases: A list of strings, each string is a sentence to be checked. Returns: A list of strings, where each element is \\"YES\\" or \\"NO\\" corresponding to the input sentences. results = [] for sentence in test_cases: if is_pangram(sentence): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"XYZ Mart is celebrating its grand opening and is offering discounts on bulk purchases. When a customer buys more than a certain quantity of an item, they get a percentage of the item quantity for free as a bonus. Write a program that calculates the total number of items a customer will get based on the total quantity they buy and the discount policy of the store. The input consists of multiple datasets, each containing two integers on one line: 1. The quantity of items bought. 2. The discount policy (minimum quantity required and the percentage bonus). Specifically, the input line will have three integers as follows: - An integer ( Q ) (1 <= ( Q ) <= 1000) representing the quantity of items bought. - Two integers ( M ) and ( P ) where ( M ) (1 <= ( M ) <= 1000) is the minimum quantity required for the discount, and ( P ) (0 <= ( P ) <= 100) is the percentage bonus. The datasets end with a line containing three zeros. The program should output the total number of items for each dataset on a new line. Examples Input ``` 10 5 20 18 10 50 3 5 40 0 0 0 ``` Output ``` 12 27 3 ``` Explanation: 1. In the first dataset, the customer buys 10 items and is eligible for 20% bonus because 10 >= 5. The bonus is 20% of 10, which rounds to 2 items. Total is 10 + 2 = 12. 2. In the second dataset, the customer buys 18 items and is eligible for 50% bonus because 18 >= 10. The bonus is 50% of 18, which is 9 items. Total is 18 + 9 = 27. 3. In the third dataset, the customer buys 3 items and is not eligible for any bonus because 3 < 5. Total is 3.","solution":"def calculate_total_items(datasets): results = [] for Q, M, P in datasets: if Q == 0 and M == 0 and P == 0: break if Q >= M: bonus = (Q * P) // 100 else: bonus = 0 total_items = Q + bonus results.append(total_items) return results"},{"question":"Polycarpus enjoys gardening and wants to create a new garden bed. The garden bed is represented by an array of numbers, where each number indicates the height of a flower at that position. Polycarpus wants to beautify the garden bed by ensuring that the heights of the flowers follow a non-decreasing order from left to right. To achieve this, he can selectively remove some flowers. However, he wants to remove the smallest number of flowers possible. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of flowers in the garden bed. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the heights of the flowers. Output Print the smallest number of flowers Polycarpus has to remove to make the garden bed\'s heights follow a non-decreasing order. Examples Input 6 4 3 2 6 1 7 Output 3 Input 5 1 2 3 4 5 Output 0 Input 8 5 1 8 3 6 7 2 4 Output 4 Note In the first example, by removing flowers with heights 3, 2, and 1, the remaining flowers will have heights [4, 6, 7], which is in non-decreasing order. In the second example, the heights are already in non-decreasing order, so no flowers need to be removed. In the third example, one optimal solution is to remove flowers with heights 5, 3, 2, and 4, leaving heights [1, 8, 6, 7], which is in non-decreasing order.","solution":"def min_removals_to_non_decreasing(n, heights): Returns the minimum number of flowers to remove to make the heights non-decreasing. :param n: int - number of flowers :param heights: list of ints - heights of the flowers :return: int - minimum number of removals # Finding the length of the Longest Increasing Subsequence (LIS) if n == 0: return 0 lis = [1] * n for i in range(1, n): for j in range(0, i): if heights[i] >= heights[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 max_lis = max(lis) # The number of removals needed is the total number of flowers minus the length of the LIS return n - max_lis"},{"question":"Simon is working on a project that requires tracking and analyzing customer purchases at a store. He wants to determine the total number of unique items bought after a series of transactions. Each transaction consists of a list of items purchased, and the items are identified by their integer IDs. Simon needs your help to write a function that processes a given list of transactions and returns the total count of unique items bought. To help Simon, write a function `count_unique_items(transactions: List[List[int]]) -> int` that takes a list of transactions as input and returns the total number of unique item IDs across all transactions. # Input - `transactions` is a list of lists, where each sublist represents a transaction and each integer in the sublist is an item ID (1 ≤ item ID ≤ 100000). # Output - Return an integer representing the total number of unique item IDs across all transactions. # Example Input ``` [[1, 2, 3], [2, 3, 4], [5, 2, 1]] ``` Output ``` 5 ``` Explanation The unique item IDs are {1, 2, 3, 4, 5}. # Note - Each transaction can contain multiple items, and item IDs may be repeated across different transactions. - The order of transactions does not matter for calculating the total number of unique items.","solution":"def count_unique_items(transactions): Returns the total count of unique item IDs across all transactions. Args: transactions (List[List[int]]): List of transactions, where each transaction is a list of item IDs. Returns: int: Total number of unique item IDs. unique_items = set() for transaction in transactions: unique_items.update(transaction) return len(unique_items)"},{"question":"Imagine you are given two arrays of integers, `A` and `B`, both of length `n`. We call these arrays **balanceable** if it is possible to select some non-empty subarray from `A` and move it to any position in `B` (including the start or end) such that after this operation, the sum of the elements of the arrays `A` and `B` become equal. A subarray is defined as a contiguous part of an array. Your task is to determine if the given arrays `A` and `B` are balanceable. Input The first line contains the integer `n` (1 ≤ n ≤ 100,000), the length of the arrays. The second line contains `n` integers `A[i]` (1 ≤ A[i] ≤ 1,000) which represent the elements of the first array. The third line contains `n` integers `B[i]` (1 ≤ B[i] ≤ 1,000) which represent the elements of the second array. Output Print \\"YES\\" (without quotes) if the arrays are balanceable, and \\"NO\\" (without quotes) otherwise. Examples Input 4 1 2 3 4 4 1 2 3 Output YES Input 3 1 2 3 6 0 1 Output NO Note In the first example, one possible solution is to take the subarray [4] from `A` and move it to the beginning of `B`, resulting in new arrays `A = [1, 2, 3]` and `B = [4, 4, 1, 2, 3]` with both sums equal to 6. In the second example, there is no way to make the sums of the two arrays equal by moving a subarray from `A` to `B`. Thus, the output is \\"NO\\".","solution":"def are_balanceable(A, B): Determines if arrays A and B are balanceable. total_A = sum(A) total_B = sum(B) if total_A == total_B: return \\"YES\\" difference = total_A - total_B if abs(difference) % 2 != 0: return \\"NO\\" target = abs(difference) // 2 if difference > 0: target_prefix_sum = prefix_sums_of_size(A, target) else: target_prefix_sum = prefix_sums_of_size(B, target) if target_prefix_sum: return \\"YES\\" return \\"NO\\" def prefix_sums_of_size(arr, target): Returns whether there exists a prefix sum equal to target. current_sum = 0 seen_sums = set() for num in arr: current_sum += num if current_sum == target or (current_sum - target) in seen_sums: return True seen_sums.add(current_sum) return False"},{"question":"You are given n integers a1, a2, ..., an and q queries. Each query consists of an integer l and an integer r (1 ≤ l ≤ r ≤ n). For each query, find the most frequently occurring integer in the subarray from index l to index r. If there are multiple integers with the same maximum frequency, return the smallest integer among them. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of integers in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100,000), the elements of the array. The third line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices describing the subarray for each query. Output For each query, print a single integer — the most frequently occurring integer in the subarray from l to r. If there are multiple integers with the same maximum frequency, print the smallest one. Example Input 5 1 2 2 3 1 3 1 3 2 4 1 5 Output 2 2 1 Explanation In the first query, the integers in the subarray are: 1, 2, 2. The integer 2 occurs most frequently. In the second query, the integers in the subarray are: 2, 2, 3. The integer with the most frequency is 2. In the third query, the integers in the subarray are: 1, 2, 2, 3, 1. The integers 1 and 2 both occur twice, but 1 is smaller.","solution":"def most_frequent_integer(n, array, queries): from collections import defaultdict results = [] for l, r in queries: freq_map = defaultdict(int) for i in range(l - 1, r): freq_map[array[i]] += 1 max_frequency = max(freq_map.values()) most_frequent_elements = [key for key, cnt in freq_map.items() if cnt == max_frequency] results.append(min(most_frequent_elements)) return results # Example usage n = 5 array = [1, 2, 2, 3, 1] queries = [(1, 3), (2, 4), (1, 5)] print(most_frequent_integer(n, array, queries)) # Output: [2, 2, 1]"},{"question":"You are given an array of integers. Your task is to create a new array where each element at index `i` is equal to the product of all the elements in the original array except the one at `i`. The constraints are as follows: * The input array will have at least 2 and at most 1,000,000 elements. * Each element in the array will be between -1,000 and 1,000. Write a function that takes the input array and returns the new array. Constraints: - You should aim to solve this in O(n) time complexity. - You cannot use division in your solution. Input The first line contains an integer `n` (2 ≤ n ≤ 1,000,000) — the number of elements in the array. The second line contains `n` space-separated integers — the elements of the array. Output Print a single line of `n` space-separated integers, representing the new array. Example Input 5 1 2 3 4 5 Output 120 60 40 30 24","solution":"def product_except_self(nums): n = len(nums) if n == 0: return [] # Initialize the arrays left_products = [1] * n right_products = [1] * n result = [0] * n # Construct the left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Construct the right_products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Construct the result array for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"You are given a string representation of a large integer number. Your task is to determine whether the integer number represented by the string can be evenly divided by 11. To check if a number is divisible by 11, you can use the following rule: Subtract the last digit from the number formed by the other digits. If the result is divisible by 11, then the original number is also divisible by 11. Repeat this process until the number is small enough to determine its divisibility with integer operations. Write a function that takes in a string `num` and returns \\"YES\\" if the number represented by the string is divisible by 11, otherwise returns \\"NO\\". Input Format: - A single input line containing a string `num` which represents the large integer number. Output Format: - A single line containing \\"YES\\" or \\"NO\\". Constraints: - The string `num` will have at most 10^5 digits and will not contain any leading zeros. Example Input: 121 Example Output: YES Explanation: 1. Remove the last digit (1), subtract it from the remaining number (12). 2. 12 - 1 = 11, which is divisible by 11. So, 121 is divisible by 11. Example Input: 123456789 Example Output: NO Explanation: 1. Remove the last digit (9), subtract it from the remaining number (12345678). 2. 12345678 - 9 = 12345669 and so on. By continuing this process, we eventually determine 123456789 is not divisible by 11.","solution":"def is_divisible_by_11(num): Returns \\"YES\\" if the number represented by the string num is divisible by 11, otherwise returns \\"NO\\". # Converting the string to a list of digits for easier manipulation digits = list(map(int, num)) odd_sum = sum(digits[0::2]) # Sum of digits at odd positions even_sum = sum(digits[1::2]) # Sum of digits at even positions if abs(odd_sum - even_sum) % 11 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"A popular online game features a grid-based world where players can move up, down, left, or right. The world is represented by a matrix of integers, where each cell contains the number of energy points required to occupy that cell. Players aim to reach the bottom-right cell starting from the top-left cell using the minimum amount of energy possible. Players can only move to adjacent cells (right or down) from their current position. Given the matrix, write a program to determine the minimum energy required for a player to reach the bottom-right cell from the top-left cell. Input The first line contains two integers R and C, the number of rows and columns in the matrix, respectively. Then follow R lines, each containing C space-separated integers representing the energy required for each cell. Output Print a single integer - the minimum energy required to reach the bottom-right cell from the top-left cell. Constraints 1 <= R, C <= 100 1 <= energy in each cell <= 1000 Example 1 Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Example 2 Input: 2 2 1 2 1 1 Output: 3 Example 3 Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 21 Explanation of Sample Cases Example 1: The player can move right, down, down, right, which takes 1 + 3 + 5 + 1 + 1 = 11 energy units. Another optimal path is right, right, down, down, which takes 1 + 1 + 1 + 1 + 1 = 7 energy units. Example 2: The player can simply move right and then down or down and then right, using 1 + 2 = 3 energy units. Example 3: The player must go through all the cells, adding up to 1 + 2 + 3 + 6 + 9 = 21 energy units.","solution":"def min_energy_path(matrix): Given a 2D matrix where each cell contains the energy needed to occupy that cell, this function finds the minimum energy required to move from the top-left to the bottom-right cell moving only right or down. if not matrix or not matrix[0]: return 0 R, C = len(matrix), len(matrix[0]) dp = [[0] * C for _ in range(R)] dp[0][0] = matrix[0][0] for i in range(1, R): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, C): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, R): for j in range(1, C): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[R-1][C-1]"},{"question":"Given a grid of size NxM filled with letters and a list of words, write a program to find all words in the list that can be formed by tracing a path in the grid. A valid path can start from any cell and move in any of the 8 possible directions (up, down, left, right, or diagonally), but you cannot visit the same cell more than once in a single path. Input: The first line contains two integers N and M, the size of the grid (1 <= N, M <= 10). The next N lines each contain M letters representing the grid. The following line contains an integer W, the number of words in the list (1 <= W <= 100). The next W lines each contain a word. All words consist of uppercase English letters (A-Z). Output: For each word in the list, output \\"YES\\" if the word can be formed by tracing a path in the grid, otherwise output \\"NO\\". The output should preserve the order of the input words. Example: Input: 4 4 ABCD EFGH IJKL MNOP 3 BEFI CFIM ABCDJ Output: YES YES NO Explanation: - \\"BEFI\\" can be traced in the grid as B -> E -> F -> I - \\"CFIM\\" can be traced in the grid as C -> F -> I -> M - \\"ABCDJ\\" cannot be traced in the grid","solution":"def find_word_in_grid(grid, word, x, y, visited): if not word: return True if ( x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or visited[x][y] or grid[x][y] != word[0] ): return False visited[x][y] = True word = word[1:] # 8 possible directions directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for dx, dy in directions: if find_word_in_grid(grid, word, x + dx, y + dy, visited): return True visited[x][y] = False return False def word_exists(grid, word): N = len(grid) M = len(grid[0]) visited = [[False for _ in range(M)] for _ in range(N)] for i in range(N): for j in range(M): if grid[i][j] == word[0] and find_word_in_grid(grid, word, i, j, visited): return \\"YES\\" return \\"NO\\" def find_words_in_grid(N, M, grid, words): results = [] for word in words: result = word_exists(grid, word) results.append(result) return results"},{"question":"You are given an integer array `arr` of size `N` containing both positive and negative integers. Your task is to find the maximum possible sum of a subarray of size exactly `K`. A subarray is obtained by deleting some (possibly zero) elements from the beginning and some (possibly zero) elements from the end of the array. Constraints * 1 leq N leq 10^5 * -10^9 leq arr[i] leq 10^9 * 1 leq K leq N Input Input is given from Standard Input in the following format: N K arr_1 arr_2 ... arr_N Output If the maximum possible sum of a subarray of size exactly `K` is `x`, print `x`. Examples Input 5 3 1 -2 3 4 -1 Output 6 Input 4 2 -1 -2 -3 -4 Output -3 Input 8 5 3 -1 4 -1 5 -9 2 6 Output 10","solution":"def max_sum_subarray_of_size_k(N, K, arr): current_sum = sum(arr[:K]) max_sum = current_sum for i in range(K, N): current_sum += arr[i] - arr[i - K] if current_sum > max_sum: max_sum = current_sum return max_sum if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) K = int(data[1]) arr = list(map(int, data[2:])) print(max_sum_subarray_of_size_k(N, K, arr))"},{"question":"A famous company has introduced a problem that involves rearranging books in a certain order, based on their weights. The task is to balance these books in such a way that the absolute difference between the weights of books on either side of a given shelf is minimized. 1. The problem entails n books, each with a certain weight, distributed over two shelves. 2. The weights of books are given in a sequence, and the goal is to split these books into two groups such that the absolute difference between the total weights of each group is minimized. Write a program that reads the number of books and their respective weights, and outputs the minimum possible absolute difference between the sums of two groups. Hint You can consider this problem as a variation of the Partition Problem, a well-known problem in computer science. Constraints * All inputs are integers. * 1 ≤ n ≤ 30 * 0 ≤ weight ≤ 1000 for each book weight. * The number of test cases does not exceed 50. Input The input consists of multiple test cases. One test case follows the format below. n w1 w2 w3 ... wn The end of the input is indicated by a line where a single 0 is given. n is the number of books, and wi (1 ≤ i ≤ n) is the weight of the ith book. Output Output the minimum absolute difference between the two groups for each test case. Example Input 4 1 2 3 9 5 1 2 3 4 5 0 Output 3 1","solution":"def min_abs_difference(n, weights): def find_min_diff(weights, n): total_sum = sum(weights) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for weight in weights: for j in range(target, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] for i in range(target, -1, -1): if dp[i]: return total_sum - 2 * i return find_min_diff(weights, n) def process_input(input_lines): results = [] i = 0 while i < len(input_lines): n = int(input_lines[i]) if n == 0: break weights = list(map(int, input_lines[i + 1].split())) result = min_abs_difference(n, weights) results.append(result) i += 2 return results"},{"question":"Problem statement You are given a rectangular field with dimensions N (height) and M (width). The field is covered with rectangular patches of grass, each of size 1x1. Some patches have flowers on them, while others do not. A flower on a patch is represented by \\"1\\", and no flower is represented by \\"0\\". Your task is to find the largest rectangle that can be formed in the field such that every 1x1 patch within the rectangle contains flowers. Note that the rectangle\'s sides must be parallel to the sides of the field. Write a program to find the area of the largest rectangular region that only contains flowers. Input The input consists of: - An integer N (1 ≤ N ≤ 1000) representing the height of the field. - An integer M (1 ≤ M ≤ 1000) representing the width of the field. - N lines representing the field, each containing M integers (either 0 or 1) separated by spaces. Output Output the area of the largest rectangle that contains only 1s. Input Example 1 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output Example 1 6 Input Example 2 3 4 0 1 1 0 1 1 1 1 1 1 0 1 Output Example 2 4","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 N, M = len(matrix), len(matrix[0]) heights = [0] * (M + 1) for i in range(N): for j in range(M): if matrix[i][j] == 1: heights[j] += 1 else: heights[j] = 0 stack = [-1] for k in range(M + 1): while heights[k] < heights[stack[-1]]: h = heights[stack.pop()] w = k - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(k) return max_area # Parse the input def largest_rectangle_area(N, M, field): matrix = [list(map(int, field[i])) for i in range(N)] return maximalRectangle(matrix)"},{"question":"Mira the magician has N distinct magical stones, each with a particular power level. She wants to increase the power levels of the stones such that their sum becomes exactly divisible by an integer K. To achieve this, she can increase the power level of any stone by X units of power, where X is a non-negative integer. As Mira is busy with her magic shows, she asks you to help her find the minimum number of units of power that need to be added to the stones to make their total power exactly divisible by K. Input - The first line of input contains an integer T denoting the number of test cases. - For each test case, the first line contains two integers N and K. - The second line of each test case contains N space-separated integers, where the i-th integer denotes the power level of the i-th stone. Output For each test case, output a single integer — the minimum number of units of power that need to be added to make the sum of all power levels exactly divisible by K. Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ K, power level of each stone ≤ 1000 Input: 2 3 5 10 12 15 4 7 1 2 3 4 Output: 3 2 Explanation In the first test case, the sum of the power levels is 37, to make it divisible by 5, we need to add 3 units (37 + 3 = 40, which is divisible by 5). In the second test case, the sum of the power levels is 10, to make it divisible by 7, we need to add 4 units (10 + 4 = 14, which is divisible by 7).","solution":"def min_units_to_add(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] power_levels = test_cases[i][1] total_power = sum(power_levels) remainder = total_power % K if remainder == 0: results.append(0) else: results.append(K - remainder) return results"},{"question":"An e-commerce website wants to analyze the spending habits of its customers. Specifically, they are interested in identifying the total expenditure of each customer over a specific period. You are given data consisting of multiple transactions. Each transaction includes the transaction id, customer id, amount, and timestamp. Your task is to calculate the total amount spent by each customer within a given time period. The time period is defined by a start timestamp and an end timestamp, both inclusive. # Input - The first line contains three integers `n`, `start`, and `end` (1 ≤ n ≤ 10^5, 0 ≤ start ≤ end ≤ 10^9). - `n` is the number of transactions. - `start` is the starting timestamp of the period. - `end` is the ending timestamp of the period. - The next `n` lines each contain four integers `transaction_id`, `customer_id`, `amount`, `timestamp` (0 ≤ transaction_id, customer_id ≤ 10^6, 1 ≤ amount ≤ 10^4, 0 ≤ timestamp ≤ 10^9). # Output - The output should be in the form of multiple lines. Each line should contain two integers `customer_id` and the `total_amount` spent by that customer in the given period. - The `customer_id`s should be listed in ascending order. - If a customer has not made any transactions in the given period, they should not appear in the output. # Examples Input ``` 5 1 10 1 100 50 5 2 101 60 7 3 100 40 9 4 102 70 10 5 101 80 15 ``` Output ``` 100 90 101 60 102 70 ``` Input ``` 3 2 8 1 200 100 1 2 200 200 2 3 200 300 8 ``` Output ``` 200 500 ``` # Note In the first example, customer 100 made two transactions amounting to 50 and 40 during the period of timestamp 1 to 10 inclusive, so their total expenditure is 90. Customer 101 made one transaction of 60 during the period, and customer 102 made one transaction of 70. In the second example, customer 200 made a transaction of 200 and 300 during the given period of timestamp 2 to 8 inclusive, so their total expenditure is 500.","solution":"def customer_expenditure(n, start, end, transactions): expenditure = {} for transaction in transactions: transaction_id, customer_id, amount, timestamp = transaction if start <= timestamp <= end: if customer_id not in expenditure: expenditure[customer_id] = 0 expenditure[customer_id] += amount sorted_expenditure = sorted(expenditure.items()) return sorted_expenditure"},{"question":"Rahul is organizing a coding competition for his friends. Every participant in the competition is assigned a unique score based on their performance. Rahul wants to determine the k-th highest score in the competition for the medal ceremony. Your task is to write a program that takes the scores of participants and outputs the k-th highest score. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of participants. The second line of each test case contains N integers separated by space, which are the scores of the participants. The third line of each test case contains a single integer k. Output For each test case, output a single line denoting the k-th highest score in the competition. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ scores ≤ 100 1 ≤ k ≤ N SAMPLE INPUT 1 5 100 90 80 70 60 3 SAMPLE OUTPUT 80","solution":"def kth_highest_score(T, test_cases): Determines the k-th highest score for each test case. Args: T : int : Number of test cases test_cases : list : List containing tuples of (N, scores, k) for each test case Returns: list : List of k-th highest scores for each test case results = [] for N, scores, k in test_cases: sorted_scores = sorted(scores, reverse=True) results.append(sorted_scores[k-1]) return results"},{"question":"Given two sorted arrays A = [a_0, a_1, ..., a_{n-1}] and B = [b_0, b_1, ..., b_{m-1}], merge them into a single sorted array C without using any extra space (i.e., inplace). Return the merged array A containing the first n smallest elements and the merged array B containing the remaining sorted elements. Constraints * 1 leq n, m leq 100,000 * 0 leq a_0 < a_1 < ... < a_{n-1} leq 10^9 * 0 leq b_0 < b_1 < ... < b_{m-1} leq 10^9 Input The input is given in the following format: n a_0 ; a_1 ; ... ; a_{n-1} m b_0 ; b_1 ; ... ; b_{m-1} Output Print elements of the modified array A in one line, separated by spaces. In the next line, print elements of the modified array B in one line, separated by spaces. Example Input 4 1 3 5 7 3 2 6 8 Output 1 2 3 5 6 7 8","solution":"def merge_in_place(A, B): Merges two sorted arrays A and B in-place such that A contains the first n smallest elements and B contains the remaining elements. Parameters: A (list[int]): First sorted array. B (list[int]): Second sorted array. Returns: tuple: Tuple containing the modified arrays A and B. n = len(A) m = len(B) # Start comparing and swapping from the last element of A and the first element of B for i in range(n): if A[i] > B[0]: A[i], B[0] = B[0], A[i] # After swapping, B[0] might be out of order, so we need to sort B using insertion sort technique first = B[0] k = 1 while k < m and B[k] < first: B[k - 1] = B[k] k += 1 B[k - 1] = first return A, B"},{"question":"A robot is designed to move based on a series of commands given as characters in a string. The robot can move in four directions: up (\'U\'), down (\'D\'), left (\'L\'), and right (\'R\'). Each command changes the robot\'s position by one unit in the respective direction. Your task is to determine whether the robot returns to its original starting position after executing a given sequence of commands. The robot starts at position (0, 0) on a Cartesian coordinate plane. Input The input is given in the following format: ``` n C1 C2 :: Cn ``` The number of command strings `n` (1 ≤ n ≤ 10000) is given on the first line, followed by `n` lines containing the i-th command string `Ci` (1 ≤ length of Ci ≤ 200) on each line. Each command string consists of only the characters \'U\', \'D\', \'L\', and \'R\'. Output Print \\"YES\\" if the robot returns to the original starting position after executing the commands in each command string, otherwise print \\"NO\\". Example Input ``` 3 UDLR UUDDLLRR UUDL ``` Output ``` YES YES NO ```","solution":"def does_robot_return(commands): Determine if a robot returns to the original starting position after executing a series of commands. Parameters: commands (List[str]): A list of command strings. Returns: List[str]: List of \\"YES\\" or \\"NO\\" for each command string. results = [] for command in commands: x, y = 0, 0 # starting position for c in command: if c == \'U\': y += 1 elif c == \'D\': y -= 1 elif c == \'L\': x -= 1 elif c == \'R\': x += 1 if x == 0 and y == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid of size n x m (1 ≤ n, m ≤ 50). Each cell in the grid contains either an empty space (denoted by \'.\') or a star (denoted by \'*\'). Your task is to find the largest square subgrid that does not contain any stars. Input: The first line of the input contains two integers n and m - the dimensions of the grid. The next n lines contain m characters each (either \'.\' or \'*\'), representing the grid. Output: Print a single integer - the side length of the largest square subgrid that does not contain any stars. Examples: Input: 5 5 ..... ..*.. ..... ..... ...*. Output: 3 Input: 3 4 **** *..* **** Output: 1 Note: In the first sample, the largest square subgrid without any stars has a side length of 3. In the second sample, the largest square subgrid without any stars has a side length of 1, as there\'s only one position in the second row that forms a 1x1 subgrid without stars.","solution":"def largest_square_subgrid(n, m, grid): Given a grid of n * m size with \'.\' representing empty space and \'*\' representing a star, this function returns the size of the largest square subgrid that does not contain any stars. if n == 0 or m == 0: return 0 # Create a DP array initialized to 0 dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 # Top row or leftmost column can only have single cell squares else: # Update the value to the minimum of the surrounding top, left, and top-left values plus one dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"Aria is fascinated by the manipulation of strings and their characteristics. One particular problem she is trying to solve involves identifying the longest palindromic substring within a given string. A palindromic string is one that reads the same forwards and backwards. Help Aria by writing a program that takes a string and returns the longest palindromic substring. Input The input consists of a single line containing a string `s` (1 ≤ length of s ≤ 1000) consisting of only lowercase English letters. Output Print a single line containing the longest palindromic substring. If there are multiple palindromic substrings of the same maximum length, print the one that appears first. SAMPLE INPUT racecar banana abacdfgdcaba SAMPLE OUTPUT racecar anana aba","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if not s: return \\"\\" start, max_length = 0, 1 for i in range(len(s)): # Check for odd length palindromes low, high = i, i while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for even length palindromes low, high = i, i + 1 while low >= 0 and high < len(s) and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"You are given two strings, ( S ) and ( T ). Your task is to determine if ( T ) has a permutation that appears as a substring in ( S ). A permutation of ( T ) is an arrangement of ( T )\'s letters in a different order. A substring of ( S ) is a contiguous sequence of characters within ( S ). Input The input contains two lines. The first line is the string ( S ) consisting of lowercase English letters. The second line is the string ( T ) also consisting of lowercase English letters. Output Output \\"YES\\" if any permutation of ( T ) appears as a substring within ( S ). Otherwise, output \\"NO\\". Constraints ( 1 leq |S|, |T| leq 10^4 ) SAMPLE INPUT adcba abc SAMPLE OUTPUT YES","solution":"from collections import Counter def is_permutation_in_string(S, T): len_s, len_t = len(S), len(T) if len_t > len_s: return \\"NO\\" t_counter = Counter(T) window_counter = Counter(S[:len_t]) if window_counter == t_counter: return \\"YES\\" for i in range(len_t, len_s): window_counter[S[i]] += 1 window_counter[S[i - len_t]] -= 1 if window_counter[S[i - len_t]] == 0: del window_counter[S[i - len_t]] if window_counter == t_counter: return \\"YES\\" return \\"NO\\""},{"question":"Palindrome In computer science, a palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Your task is to write a program that checks if a given string is a palindrome. You need to treat letters as case-insensitive and ignore all non-alphanumeric characters. Input The input consists of a single line containing the string which needs to be checked for being a palindrome. The string will have a length of at most 1000 characters. Output Print \\"YES\\" if the string is a palindrome, otherwise print \\"NO\\". Examples Input: A man, a plan, a canal, Panama Output: YES Input: No lemon, no melon Output: YES Input: Hello, World! Output: NO","solution":"import re def is_palindrome(s: str) -> str: Checks if a given string is a palindrome, ignoring spaces, punctuation, and capitalization. Args: s: The input string to check. Returns: \\"YES\\" if the string is a palindrome, otherwise \\"NO\\". # Removing all non-alphanumeric characters and converting to lower case cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is the same forward and backward if cleaned_str == cleaned_str[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Sarah and John want to organize the books on their shelf. They have a list of books, each represented by its height in centimeters, and they want to create a uniform look by arranging the books in non-increasing order of height (i.e., from tallest to shortest). However, there is one restriction: once they start to arrange the books, they cannot move to the left to pick a book between other books if they already moved right. They can only pick a book that is to the right of their current position on the shelf. Write a program that determines whether it is possible to rearrange the books to meet this requirement or if they need to give up the idea of a perfect arrangement. Constraints * 1 ≦ n ≦ 100 * 1 ≦ height of each book ≦ 1000 Input The input is given from Standard Input in the following format: n height1 height2 ... heightn Output Print `Possible` if the books can be rearranged under the given constraint. Otherwise, print `Impossible`. Examples Input 5 15 10 20 25 5 Output Impossible Input 4 30 20 10 5 Output Possible Input 6 7 7 7 7 7 7 Output Possible","solution":"def can_arrange_books(n, heights): Determine if books can be arranged in non-increasing order with the given constraints. for i in range(1, n): if heights[i] > heights[i-1]: return \\"Impossible\\" return \\"Possible\\""},{"question":"A company wants to create a system to manage their employee schedules. Each employee has a list of time intervals during which they are available to work. Each employee schedule is presented as a list of tuples, where each tuple contains two integers denoting the start and end times of an available interval. You need to write a function that finds the intersection of availability intervals between all employees, i.e., when all employees are simultaneously available. The result should be a list of time intervals where every employee is available. For example, if Employee 1 is available during intervals: [(1, 3), (5, 6)] and Employee 2 is available during intervals: [(2, 5)], then the intersected schedule will be [(2, 3)]. Input format: - The input will be a list of lists of tuples, where each outer list represents an employee\'s schedule. - Each tuple contains two integers, the start and end times of an interval. Output format: - A list of tuples representing the intersected intervals of availability. Constraints: - The number of employees can be up to 100. - Each employee can have up to 100 intervals. - All intervals are in the range [0, 1000]. - The intervals are sorted in ascending order and do not overlap within any single employee\'s schedule. SAMPLE INPUT [[(1, 3), (5, 6)], [(2, 5)]] SAMPLE OUTPUT [(2, 3)]","solution":"def intersect_intervals(intervals): Given a list of lists of intervals where each inner list represents the availability of a single employee, find the intersection of intervals where all employees are available simultaneously. Parameters: intervals (list of list of tuples): A list containing the schedule of each employee. Returns: list of tuples: A list of intervals where all employees are available. if not intervals: return [] common_intervals = intervals[0] for employee_intervals in intervals[1:]: updated_common_intervals = [] i, j = 0, 0 while i < len(common_intervals) and j < len(employee_intervals): start = max(common_intervals[i][0], employee_intervals[j][0]) end = min(common_intervals[i][1], employee_intervals[j][1]) if start < end: updated_common_intervals.append((start, end)) if common_intervals[i][1] < employee_intervals[j][1]: i += 1 else: j += 1 common_intervals = updated_common_intervals return common_intervals # Example Usage # intersect_intervals([[(1, 3), (5, 6)], [(2, 5)]]) # Should return [(2, 3)]"},{"question":"Alicia is fascinated by palindromes. She is given a string and her task is to determine the minimum number of characters she needs to insert to make the string a palindrome. Please help Alicia complete her assignment. Input Format: The first line will contain an integer T, the number of test cases. Each of the next T lines contains a non-empty string. Output Format: For each test case, output the minimum number of characters needed to make the string a palindrome. Constraints: 1 ≤ T ≤ 10 1 ≤ length of string ≤ 1000 SAMPLE INPUT 2 ab abc SAMPLE OUTPUT 1 2 Explanation: In the first test case, Alicia can insert \'b\' at the beginning to make \\"bab\\" which is a palindrome with minimum 1 insert. In the second test case, Alicia can insert \'c\' and \'b\' at the end to make \\"abcba\\" which is a palindrome with minimum 2 inserts.","solution":"def min_insertions_to_make_palindrome(s): n = len(s) # Create a table to store results of subproblems table = [[0 for x in range(n)] for y in range(n)] # Fill the table for gap in range(1, n): for l in range(n - gap): h = l + gap if s[l] == s[h]: table[l][h] = table[l + 1][h - 1] else: table[l][h] = min(table[l][h - 1], table[l + 1][h]) + 1 return table[0][n - 1] def solve_palindrome_problems(T, test_cases): results = [] for s in test_cases: results.append(min_insertions_to_make_palindrome(s)) return results"},{"question":"Sam needs to optimize his morning run. He lives in a city represented as a grid of size n x n. Each cell in the grid can be either a building or a park. Sam can only traverse through the parks. He wants to start his run from a given starting position and end at a given ending position. If the starting or ending position is a building, he cannot start or end there. Sam can move in the four cardinal directions (up, down, left, right) and each move to an adjacent park cell takes 1 unit of time. Sam is interested in finding the shortest possible time he needs to reach his destination park. If it is impossible, return -1. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 100), the size of the grid. The next n lines each contain a string of length n, where \'B\' represents a building and \'P\' represents a park. The next line contains four integers sx, sy, ex, and ey (1 ≤ sx, sy, ex, ey ≤ n) — the starting row, starting column, ending row, and ending column, respectively. Output For each test case, print the shortest time required for Sam to reach his destination park starting from the given position. If it is not possible, print -1. Example Input 2 4 PPPP PBBP PBBP PPPP 1 1 4 4 3 BBP BPB PBB 1 1 3 3 Output 6 -1 Note: In the first test case, the optimal sequence is: (1, 1) → (2, 1) → (3, 1) → (4, 1) → (4, 2) → (4, 3) → (4, 4), which takes 6 units of time. In the second test case, it is impossible for Sam to reach the destination because it\'s surrounded by buildings.","solution":"from collections import deque def shortest_path_to_park(t, test_cases): results = [] for case in test_cases: n = case[\'n\'] grid = case[\'grid\'] sx, sy, ex, ey = case[\'start\'] if grid[sx-1][sy-1] == \'B\' or grid[ex-1][ey-1] == \'B\': results.append(-1) continue directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] visited = [[False for _ in range(n)] for _ in range(n)] queue = deque([(sx-1, sy-1, 0)]) visited[sx-1][sy-1] = True found = False while queue and not found: x, y, dist = queue.popleft() if (x, y) == (ex-1, ey-1): results.append(dist) found = True break for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'P\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) if not found: results.append(-1) return results # Usage example (use the input provided in the task) t = 2 test_cases = [ { \'n\': 4, \'grid\': [ \'PPPP\', \'PBBP\', \'PBBP\', \'PPPP\' ], \'start\': (1, 1, 4, 4) }, { \'n\': 3, \'grid\': [ \'BBP\', \'BPB\', \'PBB\' ], \'start\': (1, 1, 3, 3) } ] shortest_path_to_park(t, test_cases) # Expected output: [6, -1]"},{"question":"A game consists of a grid with n × m cells. Some of the cells contain obstacles, while others are free to walk on. You start at the top-left cell of the grid and your goal is to reach the bottom-right cell. Each move can either go down or to the right. You are tasked with finding the number of unique paths from the start to the goal while avoiding obstacles. Input The first line contains two positive integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains m characters, either \'.\' (representing a free cell) or \'#\' (representing an obstacle). Output The output must be a single integer — the number of unique paths from the top-left cell to the bottom-right cell. Example Input 3 3 . . . . # . . . . Output 2 In this example, there are 2 unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Note: It is assumed that there is always at least one path from the start to the goal and both start and goal cells will be free cells.","solution":"def unique_paths(n, m, grid): # Create a 2D list to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] # Starting point if grid[0][0] == \'.\': dp[0][0] = 1 else: return 0 # No path if the start or goal is blocked # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The bottom-right cell has the number of unique paths return dp[n-1][m-1]"},{"question":"You are planning a string weaving contest. The goal of the contest is to weave two strings together in the most creative manner. Weaving, in this context, means to alternately take characters from each string to form a new string. The rules are simple: you are given two strings, and you need to produce a woven string by alternately picking characters from each input string. If one string is longer than the other, append the remaining characters of the longer string at the end of the woven string. Input The first line of input contains a single integer t (1 ≤ t ≤ 100), the number of test cases. The following 2t lines describe each test case: each test case consists of two lines, each containing a string. The lengths of the strings are between 1 and 100 characters, inclusive. The strings contain only lowercase English letters. Output For each test case, output a single line containing the woven string. Examples Input 3 abc def hello world abcd xyz Output adbecf hweolrllod axbyczd","solution":"def weave_strings(t, test_cases): Given the number of test cases t and a list of test case pairs, return a list of woven strings. Weaving means alternating characters from each string. If one string is longer, append the remaining characters. Parameters: t (int): The number of test cases test_cases (list of tuple): Each tuple contains two strings to be woven together Returns: list of str: The woven strings for each test case results = [] for s1, s2 in test_cases: woven = [] len_s1, len_s2 = len(s1), len(s2) for i in range(max(len_s1, len_s2)): if i < len_s1: woven.append(s1[i]) if i < len_s2: woven.append(s2[i]) results.append(\'\'.join(woven)) return results # Example usage: # t = 3 # test_cases = [(\\"abc\\", \\"def\\"), (\\"hello\\", \\"world\\"), (\\"abcd\\", \\"xyz\\")] # print(weave_strings(t, test_cases)) # Output: # [\'adbecf\', \'hweolrllod\', \'axbyczd\']"},{"question":"You are developing a new video game and need to design an efficient navigation map for players. The game map is represented as a grid of cells, where each cell can either be passable or impassable. Your task is to calculate the shortest path from the starting position to the target position on the map, only passing through passable cells. You are given a grid of size n x m where each cell is either \'0\' (passable) or \'1\' (impassable). You can move up, down, left, or right from one cell to an adjacent cell. The goal is to find the length of the shortest path from the starting cell to the target cell. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. The second line contains four integers x1, y1, x2, y2 (1 ≤ x1, y1, x2, y2 ≤ n, m), the coordinates of the starting cell and the target cell, respectively (1-based indexing). The next n lines contain m characters each, representing the grid. \'0\' indicates a passable cell and \'1\' indicates an impassable cell. Output Print an integer representing the length of the shortest path from the starting cell to the target cell. If there is no valid path, print -1. Examples Input 5 5 1 1 5 5 00000 01110 01110 01110 00000 Output 8 Input 4 4 1 1 4 4 0010 0110 0010 0000 Output 6 Note In the first sample, the shortest path is along the border of the grid with a total of 8 steps. In the second sample, there is a valid path with a total of 6 steps from the starting cell (1, 1) to the target cell (4, 4).","solution":"from collections import deque def shortest_path(n, m, x1, y1, x2, y2, grid): def is_valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'0\' start = (x1 - 1, y1 - 1) target = (x2 - 1, y2 - 1) if grid[start[0]][start[1]] == \'1\' or grid[target[0]][target[1]] == \'1\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == (target[0], target[1]): return dist for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid_move(new_x, new_y) and (new_x, new_y) not in visited: visited.add((new_x, new_y)) queue.append((new_x, new_y, dist + 1)) return -1"},{"question":"At a computer science conference, a group of researchers needs to organize their meeting schedule. Each researcher has multiple times they are available, but since there are limited meeting slots available, they will have to compromise to find the optimal schedule that maximizes the number of meetings they can attend collectively. You are tasked to create a program that determines the maximum number of non-overlapping meetings that can be scheduled. Each meeting has a start time and an end time. A researcher can only attend a meeting if it does not overlap with another meeting they are attending. Input The input is given in the following format: N s1 e1 s2 e2 ... sN eN The number of meetings N (1 ≤ N ≤ 10000) is given on the first line. Each of the next N lines contains two integers: the start time si and the end time ei (1 ≤ si < ei ≤ 1000000) of a meeting. Output Output the maximum number of non-overlapping meetings that can be scheduled on one line. Examples Input 3 1 4 2 5 6 7 Output 2 Input 4 1 3 2 4 3 5 4 6 Output 2","solution":"def max_non_overlapping_meetings(N, meetings): Determines the maximum number of non-overlapping meetings that can be scheduled. Parameters: N (int): The number of meetings. meetings (list of tuples): A list of (start, end) times for each meeting. Returns: int: The maximum number of non-overlapping meetings. # Sort meetings by end time meetings.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"A robot is initially positioned at point (0, 0) on an infinite grid. It performs a sequence of moves based on the instructions given in a string where each character represents a move: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Now consider a special condition: the robot has an energy limit. Each move consumes 1 unit of energy. Given a string of moves and an integer representing the maximum energy units, determine the maximum Manhattan distance the robot can achieve from the starting point while consuming energy no more than the given limit. The Manhattan distance between two points (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|. Input The first line contains an integer n (1 ≤ n ≤ 10^5), representing the length of the move string. The second line contains a string of length n, where each character is one of \'U\', \'D\', \'L\', or \'R\'. The third line contains an integer k (1 ≤ k ≤ 10^5), representing the energy limit. Output Print the maximum Manhattan distance from the starting point (0, 0) that the robot can achieve without exceeding the given energy limit. Examples Input 5 URDDL 2 Output 2 Input 6 UUUDDD 3 Output 3 Note In the first sample, the robot can perform the first two moves \'UR\' or any two of \'U\', \'R\', \'D\', \'D\', \'L\' without exceeding the energy limit of 2, achieving a Manhattan distance of 2. In the second sample, the robot can perform any three moves out of \'UUU\', giving a Manhattan distance of 3 without exceeding the energy limit of 3.","solution":"def max_manhattan_distance(n, moves, k): Returns the maximum Manhattan distance the robot can achieve given a sequence of moves and an energy limit. # Initial position x, y = 0, 0 # Tracking position changes for i in range(min(k, n)): if moves[i] == \'U\': y += 1 elif moves[i] == \'D\': y -= 1 elif moves[i] == \'L\': x -= 1 elif moves[i] == \'R\': x += 1 # Calculate Manhattan distance from (0, 0) return abs(x) + abs(y)"}]'),S={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},P={key:0,class:"empty-state"},F=["disabled"],C={key:0},R={key:1};function z(s,e,u,p,r,a){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[w,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):h("",!0)]),t("div",Y,[(n(!0),i(y,null,_(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",P,' No results found for "'+l(r.searchQuery)+'". ',1)):h("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",C,"See more"))],8,F)):h("",!0)])}const D=d(S,[["render",z],["__scopeId","data-v-509daa56"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/40.md","filePath":"deepseek/40.md"}'),M={name:"deepseek/40.md"},U=Object.assign(M,{setup(s){return(e,u)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,U as default};
