import{_ as c,o as n,c as r,a as t,m as h,t as d,C as g,M as _,U as y,f as u,F as b,p as v,e as w,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},P={class:"review-title"},A={class:"review-content"};function R(i,e,l,m,s,a){return n(),r("div",q,[t("div",T,[t("div",P,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),h(d(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",A,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),h(d(l.poem.solution),1)])])])}const C=c(k,[["render",R],["__scopeId","data-v-615c0666"]]),I=JSON.parse(`[{"question":"Write a Python program to shuffle the items of a given list in random order without using the built-in shuffle function from the random module.","solution":"import random def shuffle_list(arr): Shuffle the items of a given list in random order. Parameters: arr (list): The list to be shuffled. Returns: list: The list after being shuffled. arr_copy = arr[:] length = len(arr_copy) for i in range(length): j = random.randint(0, length - 1) arr_copy[i], arr_copy[j] = arr_copy[j], arr_copy[i] return arr_copy"},{"question":"I have just started learning Python. Can you provide me an easy example of a nested function in Python?","solution":"def outer_function(x): Outer function that takes one argument x. def inner_function(y): Inner function that takes one argument y. return x + y return inner_function"},{"question":"Construct a function that will calculate the symmetric difference (elements that are in one set but not in the other and vice versa) of multiple provided sets. Your solution should be robust enough to handle an arbitrary number of sets, and also consider the repetition of elements, if any, in the given sets. After finding the symmetric difference, elements should maintain their original order as they were in the initial sets. Also, implement a way to remove any duplicates that might result in the final symmetric difference.","solution":"def symmetric_difference(*sets): Returns the symmetric difference of multiple given sets. The symmetric difference are elements that are in one set but not in the others, excluding any duplicates. result = set() for s in sets: result ^= set(s) # Preserve the original order and remove any duplicates seen = set() final_result = [] for s in sets: for elem in s: if elem in result and elem not in seen: final_result.append(elem) seen.add(elem) return final_result"},{"question":"How can I implement a function that finds the index of the smallest element in a given list? Can you provide an example code that accomplishes this?","solution":"def find_index_of_smallest_element(lst): Returns the index of the smallest element in the list. if not lst: return None min_index = 0 for i in range(1, len(lst)): if lst[i] < lst[min_index]: min_index = i return min_index"},{"question":"In Python, write a program to remove all duplicates from a given list of integers, sort the list in ascending order, and return the count of unique numbers in the list. The program should also handle negative integers and zero.","solution":"def unique_sorted_count(lst): Removes duplicates, sorts the list in ascending order, and returns the count of unique numbers in the list. Parameters: - lst: List[int] : A list of integers, which may include negative integers and zero. Returns: - sorted_unique_list: List[int] : A sorted list of unique integers. - unique_count: int : The count of unique integers in the list. unique_set = set(lst) # Remove duplicates using set sorted_unique_list = sorted(unique_set) # Convert to list and sort unique_count = len(sorted_unique_list) # Count of unique numbers return sorted_unique_list, unique_count"},{"question":"Write a Python Code to calculate the volume of a sphere by taking in its radius as user input. Ensure that your solution includes methods to validate the radius input for positive numbers and give meaningful errors for invalid inputs.","solution":"import math def sphere_volume(radius): Calculate the volume of a sphere given its radius. Parameters: radius (float): The radius of the sphere. Must be a positive number. Returns: float: The volume of the sphere. Raises: ValueError: If the radius is not a positive number. if not isinstance(radius, (int, float)): raise ValueError(\\"Radius must be a number.\\") if radius <= 0: raise ValueError(\\"Radius must be a positive number.\\") return (4/3) * math.pi * (radius ** 3)"},{"question":"Write a function in Python that takes a list of numbers as an input and returns the largest number in the list. However, if the list contains any negative numbers, the function should return the smallest negative number instead. If the list is empty or has no negative numbers, the function should return None.","solution":"def largest_or_smallest_negative(numbers): Returns the largest number in the list if there are no negative numbers. If the list contains any negative numbers, returns the smallest negative number instead. If the list is empty or has no negative numbers, returns None. if not numbers: return None smallest_negative = None largest_number = None for num in numbers: if num < 0: if smallest_negative is None or num < smallest_negative: smallest_negative = num else: if largest_number is None or num > largest_number: largest_number = num if smallest_negative is not None: return smallest_negative return largest_number"},{"question":"Write a Python code snippet to print a pattern of stars (*) in a shape of a right-angled triangle (facing downwards) where the number of rows is an input from the user. The number of rows can only be a positive integer. Sure, here is a simple Python program that solves the problem.","solution":"def print_downward_triangle(rows): Prints a right-angled triangle pattern (facing downwards) using stars. :param rows: Number of rows for the triangle. Must be a positive integer. if rows <= 0: raise ValueError(\\"Number of rows must be a positive integer.\\") for i in range(rows, 0, -1): print('*' * i)"},{"question":"Write a Python program that makes use of decorators to maintain an access log. The program should demonstrate how decorators function, and show how they can be used to extend the functionality of a simple web server. Include how to register and track requests made to specific URL endpoints and how to customize the logging format. Also, provide a brief explanation of how decorators work in Python.","solution":"import functools from datetime import datetime # A decorator function for logging access def access_log(format_string): def decorator_function(func): @functools.wraps(func) def wrapper(*args, **kwargs): timestamp = datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") endpoint = func.__name__ log_message = format_string.format(timestamp=timestamp, endpoint=endpoint) print(log_message) return func(*args, **kwargs) return wrapper return decorator_function # Example web server with endpoints class SimpleWebServer: @access_log(\\"Accessed on {timestamp}: Endpoint - {endpoint}\\") def home(self): return \\"Welcome to the home page.\\" @access_log(\\"Accessed on {timestamp}: Endpoint - {endpoint}\\") def about(self): return \\"This is the about page.\\" @access_log(\\"Accessed on {timestamp}: Endpoint - {endpoint}\\") def contact(self): return \\"Contact us at contact@example.com.\\" # Explanation of how decorators work in Python: # # A decorator in Python is a function that takes another function as an argument, # and returns a new function that typically extends the behavior of the original function # without explicitly modifying it. # # Decorators are defined using the @ symbol above the function definition. # The decorator function is called, passing in the original function as an argument, # and the original function is replaced by the new function returned by the decorator."},{"question":"Write a Python function to check if a given positive integer is a prime number. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. The function should also print the smallest prime number greater than the given number. If no such prime number exists within the next 100 numbers, the function should print a message stating that.","solution":"def is_prime(n): Checks if a number n is a prime number. Also prints the smallest prime number greater than n within the next 100 numbers, or a message if no prime number is found. if n <= 1: return False # Function to check if a number is prime def check_prime(x): if x <= 1: return False for i in range(2, int(x**0.5) + 1): if x % i == 0: return False return True # Check if n is prime if not check_prime(n): return False # Find and print the smallest prime number greater than n within the next 100 numbers for num in range(n + 1, n + 101): if check_prime(num): print(f\\"The smallest prime number greater than {n} is {num}\\") return True print(f\\"No prime number found within the next 100 numbers greater than {n}\\") return True"},{"question":"Develop a Python for loop to create the arithmetic sequence based on user input for the starting number, difference, and length. Use functional programming principles where possible. Test your code with different inputs to ensure it accommodates a variety of sequences.","solution":"def arithmetic_sequence(start, difference, length): Generates an arithmetic sequence based on the starting number, difference, and length. Uses list comprehension to follow functional programming principles. return [start + i * difference for i in range(length)]"},{"question":"Can you create a code to find the median of an array of integers?","solution":"def find_median(arr): Returns the median of the input list of integers. arr_sorted = sorted(arr) n = len(arr_sorted) if n % 2 == 1: return arr_sorted[n // 2] else: return (arr_sorted[n // 2 - 1] + arr_sorted[n // 2]) / 2"},{"question":"Create a python script that will run the main function only, and the main function should contain a nested function named \\"inner_function\\". Additionally, the main function should accept a list of integers as an argument, and the inner_function should process each integer in the list by converting it to a string and then printing it in reverse order. However, the inner_function should only process integers that are greater than 10 and have exactly three distinct prime factors. The script should also include error handling to catch any potential errors and print a custom error message.","solution":"def main(numbers): def inner_function(number): try: if number > 10 and count_distinct_prime_factors(number) == 3: print(str(number)[::-1]) except Exception as e: print(f\\"Error processing number {number}: {str(e)}\\") for number in numbers: inner_function(number) def count_distinct_prime_factors(number): primes = set() factor = 2 while factor * factor <= number: if number % factor: factor += 1 else: number //= factor primes.add(factor) if number > 1: primes.add(number) return len(primes) if __name__ == \\"__main__\\": # Example usage numbers = [30, 15, 60, 100, 210, 105] main(numbers)"},{"question":"Design a Python function using boto3 to interact with Amazon S3. The function should create and delete S3 buckets, upload and download files, list all files within a specific bucket, and also track bucket versions and enable server-side encryption.","solution":"import boto3 from botocore.exceptions import ClientError s3_client = boto3.client('s3') def create_bucket(bucket_name): Create an S3 bucket. try: s3_client.create_bucket(Bucket=bucket_name) return True except ClientError as e: print(e) return False def delete_bucket(bucket_name): Delete an S3 bucket. try: s3_client.delete_bucket(Bucket=bucket_name) return True except ClientError as e: print(e) return False def upload_file(bucket_name, file_name, object_name=None): Upload a file to an S3 bucket. try: s3_client.upload_file(file_name, bucket_name, object_name or file_name) return True except ClientError as e: print(e) return False def download_file(bucket_name, object_name, file_name): Download a file from an S3 bucket. try: s3_client.download_file(bucket_name, object_name, file_name) return True except ClientError as e: print(e) return False def list_files(bucket_name): List all files in an S3 bucket. try: response = s3_client.list_objects_v2(Bucket=bucket_name) return [content['Key'] for content in response.get('Contents', [])] except ClientError as e: print(e) return [] def enable_bucket_versioning(bucket_name): Enable versioning on an S3 bucket. try: s3_client.put_bucket_versioning( Bucket=bucket_name, VersioningConfiguration={ 'Status': 'Enabled' } ) return True except ClientError as e: print(e) return False def enable_server_side_encryption(bucket_name): Enable server-side encryption on an S3 bucket. try: s3_client.put_bucket_encryption( Bucket=bucket_name, ServerSideEncryptionConfiguration={ 'Rules': [ { 'ApplyServerSideEncryptionByDefault': { 'SSEAlgorithm': 'AES256' } } ] } ) return True except ClientError as e: print(e) return False"},{"question":"In a Native Python way, would you be kind enough to construct a code segment that adequately defines a function? This function should take in two whole numbers as parameters and, after performing an arithmetical addition, provide the aggregate as the return value. The names for the parameters should be 'num1' and 'num2'.","solution":"def add(num1, num2): Returns the sum of num1 and num2. return num1 + num2"},{"question":"Say you have k sorted lists of integers. Write a program that merges these k sorted lists and returns a single sorted list.","solution":"import heapq def merge_k_sorted_lists(sorted_lists): Merges k sorted lists into a single sorted list. Parameters: sorted_lists (list of lists of int): The k sorted lists. Returns: list of int: The merged sorted list. merged_list = [] min_heap = [] # Initialize the heap. for i, lst in enumerate(sorted_lists): if lst: # Only add non-empty lists heapq.heappush(min_heap, (lst[0], i, 0)) while min_heap: value, list_index, element_index = heapq.heappop(min_heap) merged_list.append(value) # If there is a next element in the same list, push it to the heap if element_index + 1 < len(sorted_lists[list_index]): next_tuple = (sorted_lists[list_index][element_index + 1], list_index, element_index + 1) heapq.heappush(min_heap, next_tuple) return merged_list"},{"question":"Develop a recursive function in Python that generates and prints a Fibonacci sequence of up to n terms.","solution":"def fibonacci_sequence(n, a=0, b=1): Recursively generates and returns a list containing the Fibonacci sequence up to n terms. if n <= 0: return [] if n == 1: return [a] return [a] + fibonacci_sequence(n - 1, b, a + b) # Example usage: # print(fibonacci_sequence(5)) # Output: [0, 1, 1, 2, 3]"},{"question":"Develop a Python function that accepts an array of stacks as input, where each stack can have varying amounts of elements. The function should apply a multi-step reasoning process to flatten these stacks into a single horizontal list, while preserving the original order of the elements within each stack, and then ensuring that the output list is sorted in an ascending order.","solution":"from typing import List def flatten_and_sort_stacks(stacks: List[List[int]]) -> List[int]: Flattens the list of stacks and sorts the resulting list in ascending order. Args: stacks (List[List[int]]): A list of stacks (lists) of integers. Returns: List[int]: A sorted list of integers. # Flatten the stacks and extend them into a single list flat_list = [] for stack in stacks: flat_list.extend(stack) # Sort the flattened list sorted_list = sorted(flat_list) return sorted_list"},{"question":"Design an algorithm that takes an array of size 'n', rotate it by 'k' positions to right, in place and with minimum swapping operations.","solution":"def rotate_array(nums, k): Rotate the array nums by k steps to the right with minimum swapping operations. Parameters: nums (List[int]): The array to be rotated. k (int): The number of positions to shift the array. Returns: None: The function modifies the list in place. if not nums or k <= 0: return n = len(nums) k %= n # In case the rotations exceed the length of the array def reverse(lst, start, end): while start < end: lst[start], lst[end] = lst[end], lst[start] start += 1 end -= 1 # Step 1: Reverse the whole array reverse(nums, 0, n-1) # Step 2: Reverse the first k elements reverse(nums, 0, k-1) # Step 3: Reverse the rest (n-k) elements reverse(nums, k, n-1)"},{"question":"Reverse the following array in-place using Python.","solution":"def reverse_array(arr): Reverses the given array in-place. :param arr: List of elements. :return: The reversed array (in-place). left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a function in Python that takes two lists and returns their union (i.e., a list of all unique elements present in at least one of the lists).","solution":"def union_lists(list1, list2): Returns the union of two lists (i.e., a list of all unique elements present in at least one of the lists). return list(set(list1) | set(list2))"},{"question":"Formulate a random HTTP response status code and reason phrase. Your program should not repeat the same status code and reason phrase combination unless it is re-run. Keep track of the already generated combinations and ensure that new requests for a status code and reason phrase return a fresh, previously unreturned combination. Your solution should either save the combinations to a file or use an in-memory storage method if the program is to run for a long duration or handle a large number of requests.","solution":"import random class HTTPStatusGenerator: def __init__(self): self.status_codes = [ (200, \\"OK\\"), (201, \\"Created\\"), (202, \\"Accepted\\"), (204, \\"No Content\\"), (301, \\"Moved Permanently\\"), (302, \\"Found\\"), (400, \\"Bad Request\\"), (401, \\"Unauthorized\\"), (403, \\"Forbidden\\"), (404, \\"Not Found\\"), (500, \\"Internal Server Error\\"), (501, \\"Not Implemented\\"), (502, \\"Bad Gateway\\"), (503, \\"Service Unavailable\\") ] self.unused_combinations = set(self.status_codes) self.used_combinations = set() def get_random_status(self): if not self.unused_combinations: raise ValueError(\\"No more unique status codes left to return.\\") status = random.choice(list(self.unused_combinations)) self.unused_combinations.remove(status) self.used_combinations.add(status) return status def reset(self): self.unused_combinations = set(self.status_codes) self.used_combinations = set()"},{"question":"Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2, considering the case sensitivity and special characters. Implement a function called \`is_anagram\` that takes in two string parameters and returns a boolean value. However, you are not allowed to use any built-in Python functions or libraries for sorting or character frequency counting.","solution":"def is_anagram(s1, s2): Check if s1 and s2 are anagrams considering case sensitivity and special characters. if len(s1) != len(s2): return False def count_characters(string): count = {} for char in string: if char in count: count[char] += 1 else: count[char] = 1 return count count1 = count_characters(s1) count2 = count_characters(s2) return count1 == count2"},{"question":"Develop a Python function that calculates the total number of weekdays in a specific month and year. This function should also be capable of determining the number of each specific weekday (for example, Monday, Tuesday, etc.) within the given month. The function should utilize the calendar module. Furthermore, enhance the function to recognize and report the first and last weekday of the specified month.","solution":"import calendar def calculate_weekdays(year, month): Calculates the total number of weekdays and the number of each specific weekday in a given month and year. Also determines the first and last weekday of the specified month. Parameters: year (int): The year to calculate weekdays for. month (int): The month to calculate weekdays for. Returns: dict: A dictionary with the counts of each weekday, the total count of weekdays, the first weekday, and the last weekday of the month. Example: { \\"Monday\\": 4, \\"Tuesday\\": 5, \\"Wednesday\\": 4, \\"Thursday\\": 4, \\"Friday\\": 4, \\"Saturday\\": 5, \\"Sunday\\": 4, \\"total\\": 30, \\"first_weekday\\": \\"Wednesday\\", \\"last_weekday\\": \\"Sunday\\" } weekday_counts = {calendar.day_name[i]: 0 for i in range(7)} total_weekdays = 0 first_weekday, number_of_days = calendar.monthrange(year, month) weekdays = [calendar.day_name[i] for i in range(7)] for day in range(1, number_of_days + 1): weekday_index = calendar.weekday(year, month, day) weekday_name = weekdays[weekday_index] weekday_counts[weekday_name] += 1 total_weekdays += 1 weekday_counts[\\"total\\"] = total_weekdays weekday_counts[\\"first_weekday\\"] = weekdays[first_weekday] weekday_counts[\\"last_weekday\\"] = weekdays[calendar.weekday(year, month, number_of_days)] return weekday_counts"},{"question":"Create a calculator program that accepts two input numbers from a user and perform calculations based on the operator given. The operators allowed are addition (+), subtraction (-), multiplication (*), and division (/). The calculator must accept both integers and floating point numbers as inputs. Implement error checks to handle division by zero.","solution":"def calculator(num1, num2, operator): Perform a calculation based on the given operator. :param num1: First number, can be int or float :param num2: Second number, can be int or float :param operator: Operator, one of '+', '-', '*', '/' :return: Result of the calculation if operator == '+': return num1 + num2 elif operator == '-': return num1 - num2 elif operator == '*': return num1 * num2 elif operator == '/': if num2 == 0: return \\"Error: Division by zero\\" return num1 / num2 else: return \\"Error: Invalid operator\\""},{"question":"I need to split a 1GB data file into multiple 20MB files using Python. What is the best way to go about this?","solution":"def split_file(input_file_path, output_file_prefix, chunk_size_mb=20): Splits a large file into multiple smaller files of specified chunk size. :param input_file_path: Path to the input large file :param output_file_prefix: Prefix for the output smaller files :param chunk_size_mb: Size of each chunk in MB chunk_size = chunk_size_mb * 1024 * 1024 # Convert MB to bytes file_number = 0 with open(input_file_path, 'rb') as input_file: while True: chunk = input_file.read(chunk_size) if not chunk: break output_file_path = f\\"{output_file_prefix}_{file_number}.dat\\" with open(output_file_path, 'wb') as output_file: output_file.write(chunk) file_number += 1"},{"question":"Develop a Python function that, following the provision of a specific 'n', generates an output displaying all even prime integers, alongside their respective Fibonacci index, that lie below the value of 'n'. The bespoke sequence derived from this algorithm should culminate at an absolute value proximate but not exceeding the numerical limit 'n'. For the context of this exercise, assume n to be 20. Moreover, the listing in the output should also encompass the aggregate of all these even primes to showcase a comprehensive view.","solution":"def even_prime_fibonacci(n): Generates a list of even prime integers alongside their respective Fibonacci index, which are below 'n'. Returns the list and the sum of these even primes. def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True fib_sequence = [0, 1] while True: next_fib = fib_sequence[-1] + fib_sequence[-2] if next_fib >= n: break fib_sequence.append(next_fib) even_prime_fibs = [(i, fib) for i, fib in enumerate(fib_sequence) if fib < n and fib % 2 == 0 and is_prime(fib)] sum_even_primes = sum(fib for _, fib in even_prime_fibs) return even_prime_fibs, sum_even_primes"},{"question":"Use the Jinja2 templating engine in Python to create the following JSON structure. In addition to the basic structure, you should also include the capability to add more students to the structure dynamically. Moreover, implement a function that can find a student by their ID and update their information (Name, Age, Country).","solution":"from jinja2 import Template import json # Define the JSON structure template in Jinja2 json_template = { \\"students\\": [ {% for student in students %} { \\"ID\\": \\"{{ student['ID'] }}\\", \\"Name\\": \\"{{ student['Name'] }}\\", \\"Age\\": {{ student['Age'] }}, \\"Country\\": \\"{{ student['Country'] }}\\" }{% if not loop.last %},{% endif %} {% endfor %} ] } # Render the JSON structure using the template and a list of students def render_json(students): template = Template(json_template) rendered_json = template.render(students=students) return json.loads(rendered_json) # Function to add a new student to the list def add_student(students, student): students.append(student) return students # Function to find and update a student's information by their ID def update_student(students, student_id, new_info): for student in students: if student['ID'] == student_id: student.update(new_info) return student return None"},{"question":"Create an array of seven prime numbers in Python where each number is greater than the previous one and all of them are divisible by 3. Include error handling to ensure the numbers are indeed prime and greater than the previous one in the array.","solution":"def generate_prime_array(): Generates an array of seven prime numbers each greater than the previous one and all divisible by 3. Since 3 is the only prime number divisible by 3, it is not possible to generate such an array. Raise an error to handle this impossible condition. raise ValueError(\\"It's impossible to create such an array. The only prime number divisible by 3 is 3.\\")"},{"question":"Write a python program to find the all permutations of a given string and print unique ones only.","solution":"from itertools import permutations def unique_permutations(s): Returns all unique permutations of a given string. return sorted(set(''.join(p) for p in permutations(s)))"},{"question":"Create a program that outputs the sorted elements of an array in ascending order. The array contains unique integers ranging from -1000 to 1000. The program should handle arrays with up to 100,000 elements efficiently.","solution":"def sort_array(array): Returns the sorted elements of the array in ascending order. return sorted(array)"},{"question":"I'm trying to create a program that compares two strings and outputs the number of characters that are common to both strings. Can someone help me with this?","solution":"def common_characters_count(str1, str2): Returns the number of characters that are common to both strings str1 and str2. Characters are counted as many times as they appear in both strings. str1_counts = {} str2_counts = {} # Count characters in str1 for char in str1: if char in str1_counts: str1_counts[char] += 1 else: str1_counts[char] = 1 # Count characters in str2 for char in str2: if char in str2_counts: str2_counts[char] += 1 else: str2_counts[char] = 1 # Count common characters common_count = 0 for char, count in str1_counts.items(): if char in str2_counts: common_count += min(count, str2_counts[char]) return common_count"},{"question":"Develop a function that not only validates an email address using a regex pattern but also checks if the domain is from a predefined list of acceptable domains. The function should accept two parameters: the email address to be validated, and a list of acceptable domain strings.","solution":"import re def validate_email(email, acceptable_domains): Validates an email address using a regex pattern and checks if the domain is in the acceptable list. Parameters: email (str): The email address to be validated. acceptable_domains (list of str): List of acceptable domain strings. Returns: bool: True if the email is valid and the domain is acceptable, False otherwise. # Regex pattern for validating an email address email_pattern = re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}') if email_pattern.match(email): # Extract the domain part of the email domain = email.split('@')[1] # Check if the domain is in the acceptable list if domain in acceptable_domains: return True return False"},{"question":"Write a python program that takes in two lists and returns a single list that contains the elements of both lists while preserving their order. Your function should have a time complexity of O(n) and a space complexity of O(n).","solution":"def merge_lists(list1, list2): Returns a single list that contains the elements of both lists while preserving their order. return list1 + list2"},{"question":"Suppose we have an iterative function f(x) defined as following: f(0) = 0 and f(x) = 3*f(x-1)+2 for any x >0. Implement this function in Python.","solution":"def f(x): Returns the result of the iterative function defined by: f(0) = 0 f(x) = 3*f(x-1) + 2 for any x > 0 if x == 0: return 0 else: result = 0 for i in range(1, x + 1): result = 3 * result + 2 return result"},{"question":"Given two strings, write a Python code to delete all non-overlapping occurrences of the second string from the first string and return the modified first string. Also, formulate your solution in such a way that it does not use in-built string replacing functionality.","solution":"def remove_non_overlapping_occurrences(s1, s2): Removes all non-overlapping occurrences of s2 from s1. Parameters: s1 (str): The original string. s2 (str): The string to be removed from s1. Returns: str: The modified string after removing s2 from s1. result = [] i = 0 n1 = len(s1) n2 = len(s2) while i < n1: if s1[i:i+n2] == s2: i += n2 else: result.append(s1[i]) i += 1 return ''.join(result)"},{"question":"How can I create a program that converts all the letters in a text to uppercase?","solution":"def to_uppercase(text): Converts all the letters in the given text to uppercase. return text.upper()"},{"question":"Please create a python list with the following values [\\"My\\", \\"name\\", \\"is\\", \\"John\\"]. Now, write a function that removes the second element from this list and prints the updated list. Next, write another function that takes a list as an input and flips its elements. Use this second function to flip the elements of the list from first function and print the final result.","solution":"def remove_second_element(lst): Removes the second element from a list. if len(lst) > 1: del lst[1] return lst def flip_list_elements(lst): Reverses the elements of the list. return lst[::-1] # Example usage: my_list = [\\"My\\", \\"name\\", \\"is\\", \\"John\\"] updated_list = remove_second_element(my_list) print(\\"List after removing second element:\\", updated_list) flipped_list = flip_list_elements(updated_list) print(\\"Flipped list:\\", flipped_list)"},{"question":"write code for a calculator. it should be able to accept two input numbers and + - * / operations. it should also simulate the execution of these opertaions step by step and output the results. don't go for advanced integer handling for now, just focus on float point numbers.","solution":"def calculator(a, b, operation): Simulates the execution of a basic calculator operation between two numbers step by step. :param a: First number :param b: Second number :param operation: Operation to be performed ('+', '-', '*', '/') :return: Result of the operation :raises: ValueError if operation is not one of '+', '-', '*', '/' if operation == '+': print(f\\"Adding {a} and {b}\\") result = a + b print(f\\"The result is {result}\\") return result elif operation == '-': print(f\\"Subtracting {b} from {a}\\") result = a - b print(f\\"The result is {result}\\") return result elif operation == '*': print(f\\"Multiplying {a} and {b}\\") result = a * b print(f\\"The result is {result}\\") return result elif operation == '/': if b == 0: raise ValueError(\\"Cannot divide by zero\\") print(f\\"Dividing {a} by {b}\\") result = a / b print(f\\"The result is {result}\\") return result else: raise ValueError(\\"Invalid operation. Must be one of '+', '-', '*', '/'\\")"},{"question":"Write a Python function that takes in a list of integers and removes all the even numbers from the list. The function should not use any built-in Python functions or methods that directly remove elements from a list, such as \`list.remove()\` or \`list.pop()\`. The function should have a time complexity of O(n), where n is the length of the list.","solution":"def remove_even_numbers(nums): Removes all even numbers from the input list and returns a new list with only the odd numbers. :param nums: List of integers :return: List of integers with all even numbers removed result = [] for num in nums: if num % 2 != 0: result.append(num) return result"},{"question":"Write a program to encrypt a message using RSA encryption algorithm. The user should be able to input their own message and choose two prime numbers for the public and private keys. The program should output the encrypted message along with the generated public and private keys.","solution":"import random from sympy import isprime def gcd(a, b): while b: a, b = b, a % b return a def modinv(a, m): m0, x0, x1 = m, 0, 1 if m == 1: return 0 while a > 1: q = a // m m, a = a % m, m x0, x1 = x1 - q * x0, x0 if x1 < 0: x1 += m0 return x1 def rsa_keys(p, q): if not (isprime(p) and isprime(q)): raise ValueError(\\"Both numbers must be prime.\\") elif p == q: raise ValueError(\\"p and q cannot be the same.\\") n = p * q phi = (p - 1) * (q - 1) e = random.randrange(2, phi) g = gcd(e, phi) while g != 1: e = random.randrange(2, phi) g = gcd(e, phi) d = modinv(e, phi) return (e, n), (d, n) def encrypt(message, public_key): e, n = public_key encrypted_message = [pow(ord(char), e, n) for char in message] return encrypted_message def decrypt(encrypted_message, private_key): d, n = private_key decrypted_message = ''.join([chr(pow(char, d, n)) for char in encrypted_message]) return decrypted_message def rsa_encrypt(message, p, q): public_key, private_key = rsa_keys(p, q) encrypted_message = encrypt(message, public_key) return encrypted_message, public_key, private_key"},{"question":"https://leetcode.com/problems/generate-parentheses","solution":"def generateParenthesis(n): Generate all combinations of n pairs of parentheses. Args: n (int): number of pairs of parentheses Returns: List[str]: a list containing all valid combinations of n pairs of parentheses def backtrack(combination, open_count, close_count): if len(combination) == 2 * n: result.append(combination) return if open_count < n: backtrack(combination + '(', open_count + 1, close_count) if close_count < open_count: backtrack(combination + ')', open_count, close_count + 1) result = [] backtrack('', 0, 0) return result"},{"question":"The following python code simulates the flipping of a fair coin 100 times. Now, I want you to modify the code to flip a biased coin, where the probability of getting heads is 70% and tails is 30%. Please provide the modified code.","solution":"import random def flip_biased_coin(): Flips a biased coin with a 70% chance of heads (represented by 1) and a 30% chance of tails (represented by 0). return 1 if random.random() < 0.7 else 0 def flip_biased_coin_n_times(n): Flips a biased coin n times and returns the result as a list of 0s and 1s. return [flip_biased_coin() for _ in range(n)]"},{"question":"Is there a way to clear the console screen in Python? Specifically for a command-line interface, how can I write a program to output a series of newline characters that effectively scrolls the existing console text out of view, making the screen appear cleared? I am interested in a cross-platform solution, ideally using a function like \\"n * lines,\\" where \\"lines\\" is the number of lines in the console window.","solution":"import os def clear_console(lines=50): Clears the console screen by outputting a series of newline characters to scroll the existing console text out of view. On Windows, will use 'cls' command, and on Unix-based systems, will use 'clear'. Parameters: lines (int): Number of newline characters to print if not using the os command (default is 50). if os.name == 'nt': os.system('cls') else: os.system('clear') print(\\"n\\" * lines)"},{"question":"Write a function to perform inorder traversal of a binary tree without using recursion.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def inorder_traversal(root): Performs an inorder traversal of a binary tree without using recursion. result = [] stack = [] current = root while current is not None or stack: while current is not None: stack.append(current) current = current.left current = stack.pop() result.append(current.val) current = current.right return result"},{"question":"Write a Python function that prints the first n Fibonacci numbers in reverse order. Additionally, the function must check if n is a prime number before executing and return a meaningful message if it is not. The implemented function must also handle negative and floating-point number inputs effectively.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def fibonacci_reverse(n): Prints the first n Fibonacci numbers in reverse order if n is a prime number. Returns an error message if n is not a prime number or not a positive integer. if not isinstance(n, int) or n <= 0: return \\"Input must be a positive integer.\\" if not is_prime(n): return f\\"{n} is not a prime number.\\" fib_sequence = [0, 1] for _ in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) return fib_sequence[::-1]"},{"question":"Develop an algorithm using a Python function to filter out all the prime numbers from an initially provided list, irrespective of its length or the values of the numbers it contains. For instance, your function should transform the list [10, \\"orange\\", 3.14, \\"优质的\\", 29, 7] to [29, 7].","solution":"import math def is_prime(n): Returns True if n is a prime number, else False. Assumes n is an integer > 1. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(lst): Filters out prime numbers from the provided list and returns a new list with prime numbers only. return [x for x in lst if isinstance(x, int) and is_prime(x)]"},{"question":"Develop a function that, given a number, generates an array with that number of levels, each level having an array of numeric values. Further, create another function which flattens this nested array into a single array with identical values in the same sequence. Note, the numeric values should start from 1 and increment for every subsequent level.","solution":"def generate_levels(n): Generates an array with 'n' levels, each level having an array of numeric values. Numeric values start from 1 and increment for every subsequent level. Parameters: n (int): Number of levels to generate. Returns: list: A nested array with 'n' levels. return [[i + 1] * (i + 1) for i in range(n)] def flatten_nested_array(nested_array): Flattens a nested array into a single array, preserving the order of elements. Parameters: nested_array (list): The nested array to flatten. Returns: list: A flattened array. return [item for sublist in nested_array for item in sublist]"},{"question":"Develop a Python program that converts a given binary number into its equivalent hexadecimal form. Add error checking to ensure that the user input is a valid binary number. Additionally, provide a brief explanation and the algorithm used in the conversion.","solution":"def is_binary(s): Check if the string s is a valid binary number. return all(char in '01' for char in s) def binary_to_hexadecimal(binary_str): Convert a binary number (given as a string) to its hexadecimal equivalent. Algorithm: 1. Validate if the input string is a valid binary number using the is_binary function. 2. Convert the binary string to a decimal integer. 3. Convert the decimal integer to a hexadecimal string. 4. Return the hexadecimal string in uppercase format. if not is_binary(binary_str): raise ValueError(\\"Invalid binary number\\") decimal_value = int(binary_str, 2) hex_value = hex(decimal_value)[2:].upper() # [2:] to remove '0x' prefix and upper() to make it uppercase return hex_value"},{"question":"Write a Python 3 program that will accept a string of characters, where the number of characters is denoted by N, from a standard input. The program should be specifically structured to identify and then systematically delete all occurrences of white spaces, alphanumeric, punctuation and any special characters contained within this string. An execution strategy for such operation should consider different scenarios such as upper-case, lower-case characters and the ones belonging to non-English alphabet. Upon completion of this operation, your program should return the newly constructed string. As a challenge, one should avoid using fully built-in functions and libraries but some basic ones like sys.stdin.read() could be used.","solution":"def remove_all_characters(input_str): Removes all white spaces, alphanumeric, punctuation and special characters from the input string. result_str = \\"\\" allowed_characters = set() for char in input_str: if char not in allowed_characters: continue return result_str"},{"question":"Create a Python function to generate a unique, dynamic and varied maze-like pattern that shares the visual appearance of biological cells. This function should take in a set of parameters which determine maze's complexity and size. Particularly, these parameters should include the number of cell-layers, the density of the maze within these cell-layers and the overall size of each cell.","solution":"import numpy as np import random def generate_maze(cell_layers, density, cell_size): Generates a maze-like pattern mimicking biological cells. Parameters: - cell_layers (int): Number of cell layers in the maze. - density (int): Density of the maze within these cell layers. - cell_size (int): Size of each cell. Returns: - maze (ndarray): Generated maze pattern as a 2D numpy array. if cell_layers <= 0 or density <= 0 or cell_size <= 0: raise ValueError(\\"cell_layers, density, and cell_size must all be positive integers\\") maze_size = cell_layers * cell_size maze = np.zeros((maze_size, maze_size), dtype=int) def create_cell(x, y, size): for i in range(size): for j in range(size): if random.randint(0, 100) < density: maze[x + i, y + j] = 1 for layer in range(cell_layers): layer_size = (layer + 1) * cell_size num_cells = layer + 1 for i in range(num_cells): for j in range(num_cells): create_cell(i * cell_size, j * cell_size, cell_size) return maze"},{"question":"Create two lists of random non-negative integers, each with a length specified by the user. Write a program that merges the two lists element by element to create a new list. If the length provided by the user exceeds 10, a function should be called to divide the list into sub-lists of maximum length 10. Then these sub-lists should be separately handled and the process of merging should apply to them independently. Display the final output list(s) in a user friendly format.","solution":"import random def create_random_list(length): Generates a list of random non-negative integers of a given length. return [random.randint(0, 99) for _ in range(length)] def merge_lists(list1, list2): Merges two lists element by element. return [val for pair in zip(list1, list2) for val in pair] def divide_into_sublists(main_list, sublist_length=10): Divides the main list into sub-lists of a given maximum length. return [main_list[i:i + sublist_length] for i in range(0, len(main_list), sublist_length)] def handle_lists(num_elements): Handles list creation and merging logic. list1 = create_random_list(num_elements) list2 = create_random_list(num_elements) merged_list = merge_lists(list1, list2) if num_elements > 10: # Divide into sub-lists of maximum length 10 sublists = divide_into_sublists(merged_list) return sublists else: return merged_list"},{"question":"Given the erroneous Python script provided, your task is to correct and modify the script so that it iterates over the given list and calculates the sum of all elements that are both even and multiples of 3. Note: the result should include numbers that are both even and multiples of 3.","solution":"def sum_even_multiples_of_three(lst): Returns the sum of all elements in the list that are both even and multiples of 3. return sum(x for x in lst if x % 2 == 0 and x % 3 == 0)"},{"question":"Develop a program that simulates a faulty memory register that may occasionally flip bits. Given a binary number, the program should also allow for a 'correction' function that attempts to fix these flippings. If the flippings were limited to a single bit-flip, your program should be able to identify and correct the error back to the original given binary number.","solution":"def bit_flip(binary_str, flip_position): Flip the bit at the specified position in the binary string. Args: - binary_str (str): A string representing a binary number. - flip_position (int): The position of the bit to flip. Returns: - str: The new binary string with the flipped bit. if not (0 <= flip_position < len(binary_str)): raise ValueError(\\"flip_position is out of the range of the binary string length\\") flipped_bit = '1' if binary_str[flip_position] == '0' else '0' return binary_str[:flip_position] + flipped_bit + binary_str[flip_position + 1:] def correct_bit_flip(faulty_bin, original_bin): Correct a binary string by identifying and fixing a single bit flip. Args: - faulty_bin (str): The binary string with a single bit flipped. - original_bin (str): The original binary string. Returns: - str: The corrected binary string if a single bit-flip is found, otherwise raises ValueError. if len(faulty_bin) != len(original_bin): raise ValueError(\\"The length of the binary strings must be the same\\") flip_position = -1 for i in range(len(faulty_bin)): if faulty_bin[i] != original_bin[i]: if flip_position != -1: # More than one bit is flipped. raise ValueError(\\"Multiple bits are flipped\\") flip_position = i return bit_flip(faulty_bin, flip_position) if flip_position != -1 else faulty_bin"},{"question":"Given two numpy arrays, array1 and array2. Write a function to find the set difference between array1 and array2 without utilizing the predefined set difference functions from libraries. Your function should execute only the operation of set difference, meaning it will return the elements that exist in array1 but not in array2. Furthermore, your function should take one step further in verifying the operation's correctness by performing a custom check function instead of using the assert keyword.","solution":"import numpy as np def set_difference(array1, array2): Compute the set difference between two numpy arrays without using predefined set difference functions. Parameters: array1 (numpy.ndarray): The first array. array2 (numpy.ndarray): The second array. Returns: numpy.ndarray: Elements in array1 that are not in array2. # Convert the second array into a set for O(1) average time complexity lookups set_array2 = set(array2) # Use list comprehension to keep elements only found in array1 but not in array2 difference = [item for item in array1 if item not in set_array2] return np.array(difference) def check_list_equality(list1, list2): Custom check function to verify if two lists are equivalent. Parameters: list1 (list): The first list. list2 (list): The second list. Returns: bool: True if lists contain the same elements, False otherwise. return sorted(list1) == sorted(list2)"},{"question":"Write a Python function that takes a string and reverses its words, while keeping the words in the reverse order, with each letter's case inverted.","solution":"def reverse_and_invert_case(s): Reverses the words in the string and inverts the case of each letter. Parameters: s (str): The input string. Returns: str: The transformed string. # Split the string into words words = s.split() # Reverse the list of words reversed_words = words[::-1] # For each word, invert the case of each letter and join the words with a space transformed_string = ' '.join(word.swapcase() for word in reversed_words) return transformed_string"},{"question":"Write a Python program that takes a positive integer as input and prints all prime numbers up to and including that number.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def primes_up_to(n): Returns a list of prime numbers up to and including n. if n < 2: return [] primes = [] for num in range(2, n + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Rewrite the following program so that it avoids hard coded values in its computation, and increase the difficulty by incorporating multiple factors in the computation. Instead of calculating area and perimeter of a rectangle only, which was 10 and 20, let the user input lengths and breadths for multiple rectangles. Let these be stored in array 'lengths' and array 'breadths', respectively. Calculate and print the total area and perimeter of these rectangles.","solution":"def total_area_and_perimeter(lengths, breadths): Given the lengths and breadths of multiple rectangles, calculate the total area and total perimeter. Args: lengths (list of int/float): List of lengths of the rectangles. breadths (list of int/float): List of breadths of the rectangles. Returns: tuple: (total_area, total_perimeter) where total_area is the sum of the areas of the rectangles and total_perimeter is the sum of the perimeters of the rectangles. total_area = 0 total_perimeter = 0 for length, breadth in zip(lengths, breadths): total_area += length * breadth total_perimeter += 2 * (length + breadth) return total_area, total_perimeter"},{"question":"Develop a function to separate numbers in a given list into prime and composite numbers. The function should also handle edge cases, such as negative numbers and non-integer data types. Here is a piece of erroneous code for reference, identify the mistakes and correct them in your solution.","solution":"def is_prime(n): Helper function to determine if a number n is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def separate_prime_composite(items): Separates the numbers in \`items\` into prime and composite numbers. Parameters: - items: a list that can contain integers, floats, strings, or other data types Returns: - A tuple of two lists: first list contains prime numbers, second list contains composite numbers primes = [] composites = [] for item in items: if isinstance(item, int): if is_prime(item): primes.append(item) elif item > 1: composites.append(item) return primes, composites"},{"question":"Develop a recursive function that accepts two lists and returns the indices of all elements from the second list that are found in the first list. Also, extend this to handle a scenario where the second list may have repeating elements, in such a way that if an element from the second list repeats n times, it should return n indices (if these exist) from the first list. If the element does not exist in the first list, return -1 for that element.","solution":"def find_indices(first_list, second_list, index=0, result=None): A recursive function that accepts two lists and returns the indices of all elements from the second list that are found in the first list. If an element from the second list repeats, it returns corresponding indices for each occurrence of that element from the first list. If the element does not exist in the first list, it returns -1. if result is None: result = [] if index >= len(second_list): return result element = second_list[index] if element in first_list: occurrence_indices = [i for i, x in enumerate(first_list) if x == element] result.extend(occurrence_indices[:1]) # to ensure only the first occurrence is taken for each element else: result.append(-1) return find_indices(first_list, second_list, index + 1, result)"},{"question":"Use Python to sort a given list of strings, but this time the sorting must not only be based on the length of each string, it must also consider the lexicographical order of strings with the same length. Additionally, your solution should not use Python's inbuilt sorting function, you need to implement your own.","solution":"def custom_sort(strings): Sorts the given list of strings based on their length, and then lexicographically for strings of the same length, without using Python's built-in sorting function. def compare_strings(a, b): if len(a) != len(b): return len(a) - len(b) elif a < b: return -1 elif a > b: return 1 else: return 0 def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if compare_strings(left_half[i], right_half[j]) <= 0: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 merge_sort(strings) return strings"},{"question":"Write a function that takes a list of integers and returns their product without using the in-built multiplication function or any external libraries. The function should handle both positive and negative numbers.","solution":"def product_of_list(nums): Returns the product of a list of integers without using the in-built multiplication function. if not nums: # In case the list is empty return None result = 1 for num in nums: result *= num return result"},{"question":"Write a generic Python function to merge and sort multiple lists. The function should take in an arbitrary number of list arguments containing integers and return a single list containing all elements sorted in ascending order.","solution":"def merge_and_sort(*lists): Merges multiple lists and sorts the combined list in ascending order. :param lists: An arbitrary number of list arguments containing integers. :return: A single list containing all elements sorted in ascending order. merged_list = [] for lst in lists: merged_list.extend(lst) return sorted(merged_list)"},{"question":"Write a Python function for calculating the score of a card hand in Blackjack, given a list of cards represented as strings. The function should handle the value of face cards and aces correctly. Additionally, include a function to test the correctness of the score calculation.","solution":"def calculate_blackjack_score(hand): Calculate the total score of a Blackjack hand. Parameters: hand (list): List of cards as strings, e.g., ['2', 'K', 'A']. Returns: int: Total score of the hand. values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10, 'A': 11} score = 0 aces = 0 for card in hand: score += values[card] if card == 'A': aces += 1 # Adjust for aces if the score is over 21 while score > 21 and aces: score -= 10 aces -= 1 return score"},{"question":"Write a Python code to check if two strings are anagrams of each other without using any built-in function and ignoring case sensitivity and spaces. Additionally, write the code in a way that can efficiently handle very large strings. Consider a time complexity less than O(n^2).","solution":"def are_anagrams(str1, str2): Checks if two strings are anagrams of each other, ignoring case sensitivity and spaces. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the strings are anagrams of each other, False otherwise. # Normalize the strings by removing spaces and converting to lowercase str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # If lengths are different, they cannot be anagrams if len(str1) != len(str2): return False # Create a dictionary to count occurrences of each character char_count = {} # Count characters in the first string for char in str1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Subtract the count for characters in the second string for char in str2: if char in char_count: char_count[char] -= 1 if char_count[char] == 0: del char_count[char] else: return False return len(char_count) == 0"},{"question":"Develop an algorithm that takes a series of consecutive characters and creates a tree structure. Each unique character symbol in the character series should represent a node in the tree, and the frequency of this character should be saved at this node.","solution":"class TreeNode: def __init__(self, char): self.char = char self.freq = 1 self.children = [] def build_tree_from_string(s): Constructs a tree from a string where each unique character represents a node. The frequency of each character is stored at each node. Consecutive characters are represented as parent-child relationships. Args: s (str): The input string. Returns: TreeNode: The root of the resulting tree. if not s: return None root = TreeNode(s[0]) current_node = root char_to_node = {s[0]: root} for char in s[1:]: if char in char_to_node: # If the character node already exists, increase its frequency. char_to_node[char].freq += 1 else: # Create a new node and link it as a child of the current node. new_node = TreeNode(char) current_node.children.append(new_node) char_to_node[char] = new_node # Move to the new node. current_node = char_to_node[char] return root def tree_to_dict(root): Helper function to convert the tree to a dictionary for easy unit testing. if not root: return None def _tree_to_dict(node): return { 'char': node.char, 'freq': node.freq, 'children': [_tree_to_dict(child) for child in node.children] } return _tree_to_dict(root)"},{"question":"Given two arrrays nums1 and nums2, write a function to merge nums1 and nums2 into a single array sorted in non-decreasing order. The resulting merged array should replace nums1. Note the total number of elements initialized in nums1 and nums2 are m and n respectively. Also, you are given an integer array nums1 with a size equal to m + n and nums2 of size n.","solution":"def merge(nums1, m, nums2, n): Merges nums2 into nums1 in a non-decreasing order. :param nums1: List[int] with a size of m + n :param m: Initial number of elements in nums1 :param nums2: List[int] with a size of n :param n: Initial number of elements in nums2 :return: None, modifies nums1 in-place while m > 0 and n > 0: if nums1[m - 1] > nums2[n - 1]: nums1[m + n - 1] = nums1[m - 1] m -= 1 else: nums1[m + n - 1] = nums2[n - 1] n -= 1 # Add remaining elements from nums2 if n > 0: nums1[:n] = nums2[:n]"},{"question":"Given a list of strings, write a Python program to sort the strings according to the length of each string, from shortest to longest. If two strings have the same length, sort them lexicographically.","solution":"def sort_strings_by_length(strings): Sort the strings first by length, and then lexicographically. :param strings: List of strings to be sorted :return: List of sorted strings return sorted(strings, key=lambda s: (len(s), s))"},{"question":"Can you write a Python program that reads a list of numbers from user input, sorts them in decreasing order using a custom sorting algorithm, and logs the execution time using a logger?","solution":"import logging import time # Configure logging logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(message)s') logger = logging.getLogger() def custom_sort(arr): Sorts an array in decreasing order using Bubble Sort. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def sort_numbers_decreasing(input_numbers): Takes a list of numbers, sorts them in decreasing order using custom_sort, and logs the execution time. start_time = time.time() sorted_numbers = custom_sort(list(input_numbers)) end_time = time.time() logger.debug(f\\"Execution time: {end_time - start_time} seconds\\") return sorted_numbers # Example Usage: if __name__ == \\"__main__\\": input_numbers = list(map(int, input(\\"Enter numbers separated by space: \\").split())) sorted_numbers = sort_numbers_decreasing(input_numbers) print(\\"Sorted numbers:\\", sorted_numbers)"},{"question":"Given a recent development in Japan and Germany, it is necessary to write a system that parses and displays text messages related to the matter. I want you to act as a developer and create a code that will parse a raw text message and extract the information related to this event. I will give you a real SMS message below, and you need to write a Python function to extract the relevant information. In addition to the location, you must also extract the date and time the message was sent. The message must be in English. Message: \\"Have you heard about the recent tax reform in Japan? It's causing quite a stir. As for Germany, the news is all about the increase in renewable energy usage. 03/11/2023 14:26\\".","solution":"import re from datetime import datetime def parse_message(message): Extracts location, date, and time from a raw text message. Parameters: message (str): The raw text message to extract information from. Returns: dict: A dictionary with the keys 'location', 'date', and 'time' containing the extracted information. # Regular expression to find date and time in the message date_time_regex = r'b(d{2}/d{2}/d{4}) (d{2}:d{2})b' date_time_match = re.search(date_time_regex, message) if date_time_match: date_str, time_str = date_time_match.groups() message_end_index = date_time_match.start() # Extract text related to events before date_time_match relevant_text = message[:message_end_index].strip() # Find locations by looking at known keywords in the text locations = [] if 'Japan' in relevant_text: locations.append('Japan') if 'Germany' in relevant_text: locations.append('Germany') return { 'locations': locations, 'date': datetime.strptime(date_str, '%m/%d/%Y').date(), 'time': datetime.strptime(time_str, '%H:%M').time() } else: raise ValueError(\\"No valid date and time found in the message.\\") # Example usage message = \\"Have you heard about the recent tax reform in Japan? It's causing quite a stir. As for Germany, the news is all about the increase in renewable energy usage. 03/11/2023 14:26\\" print(parse_message(message))"},{"question":"Given a matrix of m*n size, write a program to find the maximum sum of all subarrays in the matrix. Your program should be optimized for time complexity and should not use more than O(m*n) extra space. Ensure your program also considers submatrices of size 1x1 as valid subarrays.","solution":"def max_sum_submatrix(matrix): if not matrix or not matrix[0]: return 0 max_sum = float('-inf') rows = len(matrix) cols = len(matrix[0]) for left in range(cols): row_sum = [0] * rows for right in range(left, cols): for i in range(rows): row_sum[i] += matrix[i][right] max_sum = max(max_sum, max_subarray_sum(row_sum)) return max_sum def max_subarray_sum(arr): max_sum = curr_sum = arr[0] for num in arr[1:]: curr_sum = max(num, curr_sum + num) max_sum = max(max_sum, curr_sum) return max_sum"},{"question":"You are given a set of 2-gram frequencies, where a 2-gram is a pair of consecutive words from a text. The 2-grams are of the form (word1,word2) and their associated frequency values are represented as a Python 2.x dictionary. Your task is to implement a function that takes this dictionary as input and returns a new dictionary containing the same 2-gram keys, but with their frequency values converted from Python 2.x dictionary values to Python 3.x dictionary values.","solution":"def convert_2gram_frequencies(frequencies): Convert a dictionary of 2-gram frequencies from Python 2.x to Python 3.x. The function simply returns the input dictionary as Python 3.x dictionaries are essentially the same as Python 2.x. :param frequencies: dict, a dictionary of 2-gram frequencies in Python 2.x :return: dict, a dictionary of 2-gram frequencies in Python 3.x return dict(frequencies)"},{"question":"First, install the PyTorch library using the command 'pip install torch'. Then, write a PyTorch implementation of a feedforward neural network that uses the ReLU activation function. Next, utilize the network to perform binary classification on the Iris dataset that you obtain from the Scikit-learn library. Ensure that you split the dataset into a training set and a test set and properly adjust the network weights using gradient descent to minimize the binary cross-entropy loss. Finally, display the confusion matrix and the accuracy of the model on the test set. Also, make sure to implement proper data normalization and batch processing for training the network.","solution":"import torch import torch.nn as nn import torch.optim as optim import numpy as np from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.metrics import confusion_matrix, accuracy_score # Define the feedforward neural network class FeedforwardNN(nn.Module): def __init__(self, input_size, hidden_size, output_size): super(FeedforwardNN, self).__init__() self.fc1 = nn.Linear(input_size, hidden_size) self.relu = nn.ReLU() self.fc2 = nn.Linear(hidden_size, output_size) self.sigmoid = nn.Sigmoid() def forward(self, x): out = self.fc1(x) out = self.relu(out) out = self.fc2(out) out = self.sigmoid(out) return out # Loading and processing the Iris dataset iris = datasets.load_iris() X = iris.data y = iris.target # Binary classification (Iris-setosa vs. not Iris-setosa) y = (y == 0).astype(int) # Split the dataset X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Normalize the features scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Convert data to PyTorch tensors X_train = torch.tensor(X_train, dtype=torch.float32) y_train = torch.tensor(y_train, dtype=torch.float32).reshape(-1, 1) X_test = torch.tensor(X_test, dtype=torch.float32) y_test = torch.tensor(y_test, dtype=torch.float32).reshape(-1, 1) # Initialize the model, loss function, and optimizer input_size = X.shape[1] hidden_size = 10 output_size = 1 model = FeedforwardNN(input_size, hidden_size, output_size) criterion = nn.BCELoss() optimizer = optim.SGD(model.parameters(), lr=0.01) # Training the model num_epochs = 100 batch_size = 16 for epoch in range(num_epochs): permutation = torch.randperm(X_train.size()[0]) for i in range(0, X_train.size()[0], batch_size): indices = permutation[i:i+batch_size] batch_x, batch_y = X_train[indices], y_train[indices] outputs = model(batch_x) loss = criterion(outputs, batch_y) optimizer.zero_grad() loss.backward() optimizer.step() # Testing the model model.eval() with torch.no_grad(): test_outputs = model(X_test) predicted = (test_outputs > 0.5).float() accuracy = accuracy_score(y_test, predicted) conf_matrix = confusion_matrix(y_test, predicted) # Print the results print(f'Accuracy: {accuracy}') print(f'Confusion Matrix:n{conf_matrix}')"},{"question":"Write a program that accepts a positive integer N as input and creates a N x N matrix with random numbers from 0 to 9. After that, the program should print the matrix, calculate and print its determinant, and then check if it is invertible. If it is invertible, calculate and print its inverse matrix.","solution":"import numpy as np def generate_matrix(N): Generates an NxN matrix with random integers from 0 to 9. return np.random.randint(0, 10, (N, N)) def print_matrix(matrix): Prints the given matrix. for row in matrix: print(\\" \\".join(map(str, row))) def compute_determinant(matrix): Computes the determinant of the given matrix. return np.linalg.det(matrix) def is_invertible(matrix): Checks if the given matrix is invertible. return compute_determinant(matrix) != 0 def compute_inverse(matrix): Computes the inverse of the given matrix. return np.linalg.inv(matrix) def main(N): Main function to perform the task. matrix = generate_matrix(N) print(\\"Generated Matrix:\\") print_matrix(matrix) determinant = compute_determinant(matrix) print(f\\"Determinant: {determinant}\\") if is_invertible(matrix): print(\\"The matrix is invertible.\\") inverse_matrix = compute_inverse(matrix) print(\\"Inverse Matrix:\\") print_matrix(inverse_matrix) else: print(\\"The matrix is not invertible.\\")"},{"question":"I'm planning to write a function that replaces all list elements with a replacement value if they meet a certain condition. I want to define a predicate function that will perform the check on each list element. Can you help me write this in Python, preferably using a functional style?","solution":"def replace_if(lst, predicate, replacement): Replaces elements in the list \`lst\` with \`replacement\` if they satisfy the \`predicate\` function. Parameters: lst (list): The list of elements to be processed. predicate (function): A function that takes an element of the list and returns True if it should be replaced. replacement: The value to replace the elements with. Returns: list: A new list with elements replaced based on the predicate function. return [replacement if predicate(item) else item for item in lst]"},{"question":"Create a Python function that finds the maximum value in a dictionary and also returns the corresponding key(s) that have this value. Ensure to handle cases with multiple keys having the same maximum value.","solution":"def find_max_in_dict(data_dict): Finds the maximum value in a dictionary and returns a list of the corresponding key(s). Args: data_dict (dict): The dictionary from which to find the maximum value and its key(s). Returns: tuple: A tuple containing the maximum value and a list of key(s) with that value. if not data_dict: return None, [] max_value = max(data_dict.values()) max_keys = [key for key, value in data_dict.items() if value == max_value] return max_value, max_keys"},{"question":"Write a Python program that demonstrates the use of high-order functions (passing functions as arguments to other functions) to filter and map lists. Also, provide documentation for each function and a brief explanation of how these constructs are working underneath.","solution":"from typing import List, Callable def filter_list(data: List[int], condition: Callable[[int], bool]) -> List[int]: Filters the list \`data\` based on the \`condition\` function provided. Parameters: data (List[int]): The list of integers to be filtered. condition (Callable[[int], bool]): A function that takes an integer as input and returns a boolean indicating whether the integer meets the condition. Returns: List[int]: A list of integers that meet the condition. return [item for item in data if condition(item)] def map_list(data: List[int], transformation: Callable[[int], int]) -> List[int]: Maps the list \`data\` into a new list based on the \`transformation\` function provided. Parameters: data (List[int]): The list of integers to be mapped. transformation (Callable[[int], int]): A function that takes an integer as input and returns a transformed integer. Returns: List[int]: A list of transformed integers. return [transformation(item) for item in data] # Example usage sample_data = [1, 2, 3, 4, 5] # Filtering the list to keep only even numbers is_even = lambda x: x % 2 == 0 filtered_data = filter_list(sample_data, is_even) # Mapping the list to square each number square = lambda x: x ** 2 mapped_data = map_list(sample_data, square)"},{"question":"Generate a Python function that implements the binary search algorithm on a sorted list of integers. The function should return the index of the target element if found, or -1 if not present in the list.","solution":"def binary_search(arr, target): Function to perform binary search on a sorted list of integers. Parameters: arr (list): The sorted list of integers in which to search. target (int): The target integer to search for in the list. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Using Python, let's see how various mathematical and logical operations work together. In the given operation, add 5 after doubling the number received. Additionally, let's explore the use of functions in executing this operation. Moreover, validate if the received number is a positive integer before performing the operation. As an example, let's take the number 6. Let's create a Python code snippet to perform the given operation using functions and conditionals.","solution":"def process_number(n): Doubles the given number and then adds 5, if the number is a positive integer. Parameters: n (int): The number to be processed. Returns: int or str: The result of the computation if n is a positive integer, otherwise an error message. if isinstance(n, int) and n > 0: return (n * 2) + 5 else: return \\"Error: Input must be a positive integer\\""},{"question":"Write a loop to print the characters of a string in reverse order, but without using any built-in functions or data structures. Additionally, you are not allowed to use any temporary variables or recursion. The loop should have a time complexity of O(n), where n is the length of the string.","solution":"def print_reverse_string(s): Prints the characters of the string \`s\` in reverse order without using any built-in functions or data structures, and without using any temporary variables or recursion. n = len(s) for i in range(n): # Access characters in reverse order by using negative indexing print(s[n - 1 - i], end='')"},{"question":"Can you enumerate the distinctions between a stack and a queue in the context of computer science theory, focusing on their structure, operational methodology, and practical applications? Moreover, could you illustrate this with Python code examples of how each data structure manages item addition and removal? In computer science, stack and queue are two fundamental data structures utilized for the management and storage of data. Their primary differences lie in their structure, their operational methodology, and how they are typically used in programming settings.","solution":"# Enumerating distinctions between Stack and Queue in Computer Science # Stack # Structure & Operational Methodology: # - A stack is a data structure that follows the Last In, First Out (LIFO) principle. # - Items are added (pushed) and removed (popped) from the same end, called the top of the stack. # - Practical Applications: Function call management, undo operations in text editors, parsing expressions. class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() if not self.is_empty() else None def peek(self): return self.items[-1] if not self.is_empty() else None def is_empty(self): return len(self.items) == 0 # Queue # Structure & Operational Methodology: # - A queue is a data structure that follows the First In, First Out (FIFO) principle. # - Items are added (enqueued) from one end, called the rear, and removed (dequeued) from the other end, called the front. # - Practical Applications: Printer spooling, task scheduling, breadth-first search in graph algorithms. class Queue: def __init__(self): self.items = [] def enqueue(self, item): self.items.append(item) def dequeue(self): return self.items.pop(0) if not self.is_empty() else None def peek(self): return self.items[0] if not self.is_empty() else None def is_empty(self): return len(self.items) == 0"},{"question":"Write a regular expression for email validation that also checks for specific domain restrictions. The email should not allow domains from '.edu', '.gov', and '.mil'. Include a function that tests various cases and consider case sensitivity and any potential edge cases in a chosen programming language.","solution":"import re def validate_email(email): Validates the given email address ensuring it does not belong to restricted domains. Restricted domains include: '.edu', '.gov', and '.mil' Args: email (str): The email address to validate Returns: bool: True if the email is valid and not from restricted domains, False otherwise # Define regex for email validation email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' # Check if email matches the regex if not re.match(email_regex, email): return False # Extract domain domain = email.split('@')[1] # Restricted domains restricted_domains = ['edu', 'gov', 'mil'] # Check if the email ends with any restricted domain for restricted in restricted_domains: if domain.endswith(f'.{restricted}'): return False return True"},{"question":"Write a Python script that takes as input a list of integers, shuffles the list, and outputs the top hundred shuffled elements. If the input list has less than a hundred elements, return all elements. Additionally, your script should handle potential errors graceful and provide usage instructions. Make use of exception handling, data validation, and input checks to increase the robustness of your script.","solution":"import random def shuffle_and_get_top_hundred(input_list): Shuffles the input list and returns the top 100 shuffled elements. If the input list has less than 100 elements, returns all elements. Parameters: input_list (list): List of integers to be shuffled. Returns: list: A list containing the top 100 shuffled elements or all elements if the list is smaller than 100. # Validate that input is a list if not isinstance(input_list, list): raise ValueError(\\"Input must be a list of integers.\\") # Validate that all elements in the list are integers if not all(isinstance(x, int) for x in input_list): raise ValueError(\\"All elements in the input list must be integers.\\") # Shuffle the list random.shuffle(input_list) # Return the top 100 elements or the entire list if it has less than 100 elements return input_list[:100]"},{"question":"Create a python code to add a number to a specific column in a list of lists, and also check for column overflow. Also write a test for the code logic.","solution":"def add_to_column(matrix, column_index, number): Adds a specified number to the elements of a specific column in a matrix. Args: matrix (list of list of int/float): The matrix to be updated. column_index (int): The index of the column to be updated. number (int/float): The number to add to each element of the specified column. Returns: list of list of int/float: The updated matrix. Raises: ValueError: If the column index is out of range. if not matrix: # If matrix is empty, return it as is return matrix if not (0 <= column_index < len(matrix[0])): raise ValueError(\\"Column index out of range\\") for row in matrix: row[column_index] += number return matrix"},{"question":"Given a function like f(x) = x^2, is there a way to visualise it using code?","solution":"import matplotlib.pyplot as plt import numpy as np def plot_function(f, x_range): Plot the given function f within the x range provided. :param f: A function that takes a single argument and returns a value. :param x_range: A tuple containing the start and end values of the x range. x_values = np.linspace(x_range[0], x_range[1], 400) y_values = f(x_values) plt.figure(figsize=(8, 6)) plt.plot(x_values, y_values, label=f.__name__) plt.title(f'Graph of {f.__name__}') plt.xlabel('x') plt.ylabel('f(x)') plt.legend() plt.grid(True) plt.show() def square_function(x): Returns the square of x. return x ** 2 # Example usage: # plot_function(square_function, (-10, 10))"},{"question":"Create a Python function that merges multiple input lists into a single output list, eliminating any repeated elements. Each list must be transformed into a set to discard duplicates, then every set should be united to form a single set for the final output, ensuring every element is unique.","solution":"def merge_unique_lists(*lists): Merges multiple input lists into a single output list, eliminating any repeated elements. merged_set = set() for lst in lists: merged_set.update(lst) return list(merged_set)"},{"question":"Write a script in Python that takes the value of an integer 'n' and prints all even numbers between 0 and 'n'.","solution":"def print_even_numbers(n): Prints all even numbers between 0 and n (inclusive). even_numbers = [i for i in range(0, n + 1) if i % 2 == 0] print(even_numbers) # Example Usage # print_even_numbers(10)"},{"question":"What is the pythonic approach to make a function that returns a list of numbers from a to b, but only if they are in a given list of numbers to include?","solution":"def filter_range_by_inclusion(a, b, include): Returns a list of numbers from a to b (inclusive), but only those which are in the include list. :param a: Start of the range (inclusive) :param b: End of the range (inclusive) :param include: List of numbers to be included :return: List of numbers from a to b that are also in the include list return [x for x in range(a, b + 1) if x in include]"},{"question":"Formulate a procedure, by means of Python programming, to compute the incremental summation of all numerical components inhabiting a dictionary, given a dictionary with numeric values as example: my_dict = {'a': 1, 'b': 2, 'c': 3}","solution":"def incremental_summation(my_dict): Returns the incremental summation of all numerical components in the dictionary. Example: input: {'a': 1, 'b': 2, 'c': 3} output: [1, 3, 6] summation = 0 result = [] for value in my_dict.values(): summation += value result.append(summation) return result"},{"question":"Given an array and an integer n, write a function to find the n-th largest element in the array. Additionally, implement an efficient solution with the time complexity no worse than O(n log n).","solution":"def nth_largest_element(arr, n): Returns the n-th largest element in the array. :param arr: List of integers :param n: The rank of the largest element to find (1-based index) :return: The n-th largest element in the array if not arr or n <= 0 or n > len(arr): raise ValueError(\\"Invalid input\\") arr_sorted = sorted(arr, reverse=True) return arr_sorted[n-1] # n-1 because of 0-based indexing"},{"question":"Create a method to check if a given string has all unique characters.","solution":"def has_all_unique_characters(s): Checks if the given string has all unique characters. Returns True if all characters are unique, False otherwise. return len(set(s)) == len(s)"},{"question":"Write a Python function that takes as input a list of sets of browser history entries, where each set represents sites accessed by a user during a single browsing session. The function output should be a sequence of integers which represents the number of distinct sites visited by the users across all sessions.","solution":"def distinct_site_visits(browsing_sessions): Returns the number of distinct sites visited by users across all sessions. Parameters: browsing_sessions (list): A list of sets, where each set contains the sites accessed during a single browsing session. Returns: int: The number of distinct sites visited by users across all sessions. all_sites = set() for session in browsing_sessions: all_sites.update(session) return len(all_sites)"},{"question":"Construct a Python code enabling the creation of a dictionary where each element of a tuple acts as the key and its position as the value. Your implementation should be able to handle any given list of tuples. As an example, use the following tuple: tuple_list = [(\\"apple\\",),(\\"banana\\",),(\\"apple\\",),(\\"cherry\\",)]","solution":"def tuple_list_to_dict(tuple_list): Converts a list of tuples into a dictionary where each unique tuple element acts as the key and its position in the list as the value. Args: tuple_list (list of tuples): List of tuples where each tuple has a single element. Returns: dict: A dictionary mapping tuple elements to their last positions in the list. result_dict = {} for idx, tup in enumerate(tuple_list): if tup: # Check if the tuple is not empty result_dict[tup[0]] = idx return result_dict"},{"question":"Write a Python function to check whether a string has all unique characters. Try to do this without using additional data structures like set or list. Also, provide a piece of erroneous code, and ask for the identification and correction of the error.","solution":"def has_unique_chars(s): Checks whether a string has all unique characters. for i in range(len(s)): for j in range(i + 1, len(s)): if s[i] == s[j]: return False return True"},{"question":"Hello! How can I create an algorithm to find the k-th smallest element in a given array using QuickSelect? Can you provide a detailed explanation and code example?","solution":"def quickselect(arr, left, right, k): This function returns the k-th smallest element of the list within left..right. if left == right: # If the list contains only one element, return arr[left] # return that element pivot_index = partition(arr, left, right) # The pivot is in its final sorted position if k == pivot_index: return arr[k] elif k < pivot_index: return quickselect(arr, left, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, right, k) def partition(arr, left, right): This function takes the last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller to left of pivot and all greater elements to right of pivot. pivot = arr[right] i = left for j in range(left, right): if arr[j] <= pivot: arr[i], arr[j] = arr[j], arr[i] i += 1 arr[i], arr[right] = arr[right], arr[i] return i def find_kth_smallest(arr, k): This function returns k-th smallest element in the array. return quickselect(arr, 0, len(arr) - 1, k - 1)"},{"question":"Implement a function that takes a string and a character and returns the number of times the character appears in the string.","solution":"def count_character_occurrences(s, char): Returns the number of times the character 'char' appears in the string 's'. Parameters: s (str): The string to be searched. char (str): The character to count. Returns: int: The number of occurrences of 'char' in 's'. return s.count(char)"},{"question":"Write a program that outputs the second largest number in the array, but you are not allowed to use any built-in functions or methods to sort the array or find the maximum value. Additionally, you must ensure that your program has a time complexity of O(n) and a space complexity of O(1).","solution":"def find_second_largest(arr): Returns the second largest number in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements.\\") first = second = float('-inf') for num in arr: if num > first: second = first first = num elif first > num > second: second = num if second == float('-inf'): raise ValueError(\\"Array must contain at least two distinct elements.\\") return second"},{"question":"In Python coding, there exist numerous techniques for extracting a random string containing alphanumeric characters from a large character set. However, for this task, you are required to generate a random string of 20 characters that only includes lowercase letters from \\"a\\" to \\"z\\", digits from \\"0\\" to \\"9\\", and symbols including \\"@\\", \\"#\\", \\"\\", \\"%\\", \\"^\\", \\"&\\", \\"*\\", \\"(\\", \\")\\", \\"-\\", \\"+\\", \\"=\\", \\"[\\", \\"]\\", \\"{\\", \\"}\\", \\"|\\", \\";\\", \\":\\", \\",\\", \\".\\", \\"<\\", \\">\\", \\"?\\", \\"/\\", \\"~\\", \\"\`\\". The probability of each character being selected must not be influenced by the frequency of any other character and the string must be completely random.","solution":"import random import string def generate_random_string(length=20): Generates a random string of a specified length containing only lowercase letters, digits, and a specific set of symbols. characters = string.ascii_lowercase + string.digits + \\"@#%^&*()-+=[]{}|;:,<.>/?~\`\\" return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Write a function to implement Bubble sort, but with a twist. Instead of sorting an array of integers, your function should sort an array of strings in lexicographical order (dictionary order). Your function should be flexible enough to sort in both ascending and descending order, based on an optional parameter. Also, explain the time complexity of your solution.","solution":"def bubble_sort_strings(arr, reverse=False): Sorts an array of strings in lexicographical order. Parameters: arr (list): List of strings to be sorted. reverse (bool): If True, sort in descending order. If False, sort in ascending order. Default is False. Returns: list: Sorted list of strings. n = len(arr) for i in range(n): # Traverse through all elements in the array for j in range(0, n-i-1): # Swap if the element found is greater (or smaller if reverse is True) if (not reverse and arr[j] > arr[j+1]) or (reverse and arr[j] < arr[j+1]): arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a Python method called \\"add_prefix\\" that takes in a string and a prefix as arguments and returns a new string with the prefix added to the beginning of the string. The method should also handle the case where the input string is empty and return an empty string in that case.","solution":"def add_prefix(input_string, prefix): Adds the given prefix to the beginning of the input string. If the input string is empty, returns an empty string. Parameters: input_string (str): The string to which the prefix will be added. prefix (str): The prefix to add to the beginning of the input string. Returns: str: A new string with the prefix added or an empty string if the input string is empty. if input_string == \\"\\": return \\"\\" return prefix + input_string"},{"question":"Write a program to calculate the factorial of a given number using recursion. The program should prompt the user to enter a positive integer and then display the factorial of that number.","solution":"def factorial(n): Returns the factorial of the given number n using recursion. if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Write a Python script that finds the shortest path between two nodes in a two-dimensional matrix, avoiding cells that contain obstacles. The matrix is a grid where the value 0 represents an open cell and 1 represents an obstacle. The script should take the grid, start node (row, col), and end node (row, col) as inputs, and output the length of the shortest path. If there is no valid path, the script should output -1. Consider only adjacent neighbors (no diagonal movement).","solution":"from collections import deque def shortest_path(matrix, start, end): Finds the shortest path in a 2D matrix from start to end avoiding obstacles. Parameters: matrix (list of list of int): 2D grid where 0 represents open cell and 1 represents obstacle. start (tuple of int): Starting cell coordinates (row, col). end (tuple of int): Ending cell coordinates (row, col). Returns: int: Length of the shortest path or -1 if there is no valid path. rows = len(matrix) cols = len(matrix[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Check if the start or end positions are not obstacles if matrix[start[0]][start[1]] == 1 or matrix[end[0]][end[1]] == 1: return -1 queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add((start[0], start[1])) while queue: row, col, dist = queue.popleft() if (row, col) == end: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and matrix[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"Create a function that takes in two lists of integers and returns a dictionary with the elements of each list as keys. The value for each key should be a list of tuples, where each tuple contains the index of the element in the first list, the index of the element in the second list, and the product of the two elements. Additionally, the function should also include the total number of occurrences of each element in both lists as a fourth value in each tuple.","solution":"def create_index_product_dict(list1, list2): Creates a dictionary with elements from two lists as keys. The value for each key is a list of tuples, where each tuple contains the index of the element in the first list, the index of the element in the second list, and the product of these elements along with their total occurrences in both lists. result = {} combined_list = list1 + list2 for element in set(combined_list): result[element] = [] total_count = combined_list.count(element) for i, el1 in enumerate(list1): if el1 == element: for j, el2 in enumerate(list2): if el2 == element: result[element].append((i, j, el1 * el2, total_count)) return result"},{"question":"Devise a Python script to merge any two lists of same length into a shared dictionary structure where one list acts as the keys and the other as the corresponding values. Your solution should also handle the edge case where the length of one list is shorter than the other - in which case the additional elements in the longer list should be disregarded. Additionally, your script should include validation to ensure that the input is of list type and elements of lists are of string or integer type before processing.","solution":"def merge_lists_to_dict(list1, list2): Merges two lists into a dictionary where elements from the first list are keys and elements from the second list are the corresponding values. If the lists are of different lengths, it will only consider the shortest length. It also validates that the inputs are lists and their elements are either string or integer. Parameters: list1 (list): The list to be used as keys. list2 (list): The list to be used as values. Returns: dict: The resulting dictionary from merging the two lists. Raises: TypeError: If either input is not a list or if the elements of the lists are not all strings or integers. if not isinstance(list1, list) or not isinstance(list2, list): raise TypeError(\\"Both arguments must be of type 'list'.\\") for element in list1 + list2: if not isinstance(element, (str, int)): raise TypeError(\\"All elements in the lists must be either 'str' or 'int'.\\") length = min(len(list1), len(list2)) return {list1[i]: list2[i] for i in range(length)}"},{"question":"Amend the complicacy of this programming test question by providing a partly completed code with a minor error. Finish this code to verify if all keys in a supplied dictionary are exclusively lower case or upper case. For empty dictionaries, the function should return False.","solution":"def are_keys_exclusively_case(d): Verifies if all keys in the dictionary d are either all lower case or all upper case. For empty dictionaries, it returns False. if not d: return False all_lowercase = all(key.islower() for key in d) all_uppercase = all(key.isupper() for key in d) return all_lowercase or all_uppercase"},{"question":"Given a linked list, write a program that prints out the elements in reverse order. Remember, you should do this with O(n) time complexity and O(1) space complexity if possible. Avoid using any extra data structures like arrays or another linked list, as this would increase your space complexity.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def print_list_reverse(head: ListNode) -> None: Prints the elements of the linked list in reverse order. :param head: The head node of the linked list. def reverse_list(node: ListNode) -> ListNode: prev = None current = node while current: next_node = current.next current.next = prev prev = current current = next_node return prev # Reverse the linked list reversed_head = reverse_list(head) # Print the elements of the reversed list current = reversed_head while current: print(current.val) current = current.next # Restore the original linked list (optional) reverse_list(reversed_head)"},{"question":"Write a Python function called \\"find_missing_number_xor\\" that takes in a list of integers as a parameter and returns the missing number in the list using the XOR operation.","solution":"def find_missing_number_xor(nums): Finds the missing number in the list of integers using XOR operation. The input list should contain all the numbers from 0 to n except one missing number, where n is the length of the list. n = len(nums) xor_all = 0 xor_nums = 0 # XOR all numbers from 0 to n+1 for i in range(n + 1): xor_all ^= i # XOR all numbers in the given list for num in nums: xor_nums ^= num # The missing number will be the result of XORing the above two results return xor_all ^ xor_nums"},{"question":"Write a generic python3 function that downloads a resource such as a file, API endpoint, etc. using the requests module. Additionally, ensure the function is robust by including error handling for network issues and invalid URLs. Also, write unit tests using the unittest module for this function to validate its functionality.","solution":"import requests def download_resource(url): Downloads a resource from the given URL and returns the content. Parameters: url (str): The URL of the resource to be downloaded. Returns: bytes: The content of the resource. None: If there was an error with the request. try: response = requests.get(url) response.raise_for_status() # Raise an HTTPError on bad status return response.content except requests.exceptions.RequestException as e: print(f\\"An error occurred: {e}\\") return None"},{"question":"Write a python code to rotate a 3x3 2D matrix counter clockwise by 90 degree","solution":"def rotate_matrix_counter_clockwise(matrix): Rotates a 3x3 matrix counter clockwise by 90 degrees. n = 3 # size of the matrix return [[matrix[j][n - 1 - i] for j in range(n)] for i in range(n)]"},{"question":"Write a function in Python to perform a binary search for a specific value in a sorted array.","solution":"def binary_search(arr, target): Perform a binary search for a target value in a sorted array. Parameters: - arr: sorted list of elements - target: element to be searched in the list Returns: - Index of target if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Insert a node at a specific position in a singly linked list. The linked list is represented by a head pointer. Implement the function \`insertNodeAtPosition\` that takes in the head pointer of the linked list, the value of the node to be inserted, and the position at which the node should be inserted. The position is 1-based, meaning the first node is at position 1, the second node is at position 2, and so on.","solution":"class SinglyLinkedListNode: def __init__(self, data): self.data = data self.next = None def insertNodeAtPosition(head, data, position): Inserts a node with the given data at the specified position in the list. Position is 1-based. new_node = SinglyLinkedListNode(data) # If inserting at the head (position 1) if position == 1: new_node.next = head return new_node current = head current_position = 1 while current is not None and current_position < position - 1: current = current.next current_position += 1 if current is None: raise IndexError(\\"Position out of bounds.\\") new_node.next = current.next current.next = new_node return head"},{"question":"Write a python program that generates the Fibonacci sequence up until a number given as input by the user, but with an added condition: the program should be able to handle very large numbers (up to 10^18) and should only use constant space and logarithmic time. In addition, the program should be able to handle multiple queries, where each query is an input number. Can you provide a solution that meets these requirements?","solution":"def fibonacci(n): Returns the Fibonacci sequence up to number n, inclusive. Uses an iterative method to handle large numbers and only uses constant space. if n < 0: return [] if n == 0: return [0] if n == 1: return [0, 1] fib_sequence = [0, 1] a, b = 0, 1 while True: a, b = b, a + b if b > n: break fib_sequence.append(b) return fib_sequence def handle_queries(queries): return [fibonacci(n) for n in queries]"},{"question":"Suggest a python code that returns the average of all the elements in a list, but also handle the scenario if the list is empty by returning 0.","solution":"def average(lst): Returns the average of all elements in the list. If the list is empty, returns 0. if not lst: # Checks if the list is empty return 0 return sum(lst) / len(lst)"},{"question":"I want to create a nested dictionary in Python where the keys consist of two tuples. The first tuple represents the names of suppliers, and the second tuple represents the names of products. How can I accomplish this task using a dictionary comprehension? Along with that, could you also suggest a method to remove key-value pairs from this complex nested dictionary where the product quantity is zero?","solution":"def create_nested_dict(suppliers, products, quantities): Creates a nested dictionary where the keys are tuples of suppliers and products, and the values are the corresponding quantities. return {(supplier, product): quantities[supplier][product] for supplier in suppliers for product in products} def remove_zero_quantity_entries(nested_dict): Removes entries from the nested dictionary where the value (quantity) is zero. return {k: v for k, v in nested_dict.items() if v != 0}"},{"question":"Write a function to check if the given string \`s\` is a permutation of the string \`t\`. The function should consider the case of characters, meaning 'a' is different from 'A', and should also consider spaces and punctuation.","solution":"def is_permutation(s, t): Determines if string s is a permutation of string t. Case sensitive and considers all characters including spaces and punctuation. # If lengths differ, they cannot be permutations if len(s) != len(t): return False # Sort both strings and compare return sorted(s) == sorted(t)"},{"question":"Least recently used (LRU) cache implementation using Python's ordered dictionary.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"I have a piece of Python code that currently calculates the sum of all odd integers in a list. However, I'm looking to make it more challenging. Can you modify the code to find the sum of all odd integers at even indices instead? Also, I'm interested in understanding how the time complexity of the new code compares to the original.","solution":"def sum_of_odd_at_even_indices(lst): Returns the sum of all odd integers at even indices in the list. :param lst: List of integers :return: Sum of all odd integers at even indices return sum(value for index, value in enumerate(lst) if index % 2 == 0 and value % 2 != 0)"},{"question":"Write a Python code to create a dictionary that contains the frequency of occurrence of each letter in a given string.","solution":"def letter_frequency(s): Returns a dictionary with the frequency of each letter in the input string s. frequency = {} for char in s: if char.isalpha(): # considering only alphabet characters char = char.lower() # convert to lower case for uniformity if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Build a Python function that generates a just matrix with n rows and p columns. The catch is that the matrix should contain elements from the given list x. An important rule to note is that the matrix should be made by sequentially placing elements from the list into the rows of the nxp matrix column by column instead of the usual row by row fashion. Assuming the list x encompasses np elements, can you tackle the additional challenge of adding a verification process that asserts the accuracy of the sequence of elements in the rotated matrix? Solve this problem by creating two functions: createJmatrix and checkJmatrix, following the detailed instructions.","solution":"def createJmatrix(n, p, x): Creates a just matrix with n rows and p columns from the list x. The elements are placed column by column. Parameters: n (int): Number of rows p (int): Number of columns x (list): List of elements to fill the matrix Returns: list: 2D list representing the matrix if len(x) != n * p: raise ValueError(\\"The list x must contain exactly n * p elements.\\") matrix = [[None for _ in range(p)] for _ in range(n)] index = 0 for col in range(p): for row in range(n): matrix[row][col] = x[index] index += 1 return matrix def checkJmatrix(matrix, x): Verifies that the matrix is correctly populated with elements from x placed column by column. Parameters: matrix (list): 2D list representing the matrix x (list): List of elements to verify the matrix Returns: bool: True if the matrix is correctly populated, False otherwise n = len(matrix) p = len(matrix[0]) expected_index = 0 for col in range(p): for row in range(n): if expected_index >= len(x) or matrix[row][col] != x[expected_index]: return False expected_index += 1 return True # Examples n, p = 3, 3 x = [1, 2, 3, 4, 5, 6, 7, 8, 9] matrix = createJmatrix(n, p, x) print(matrix) print(checkJmatrix(matrix, x))"},{"question":"Develop a Python script for filename obfuscation through base64 encoding, with explicit permission checks for file operations. Also, implement functionality to decode the filename back to its original form.","solution":"import os import base64 def obfuscate_filename(filename): Obfuscates the filename using base64 encoding. if not os.access(filename, os.R_OK): raise PermissionError(f\\"Read permission denied for file: {filename}\\") encoded_bytes = base64.b64encode(filename.encode('utf-8')) encoded_filename = encoded_bytes.decode('utf-8') return encoded_filename def deobfuscate_filename(encoded_filename): Decodes the base64 encoded filename back to its original form. decoded_bytes = base64.b64decode(encoded_filename.encode('utf-8')) decoded_filename = decoded_bytes.decode('utf-8') return decoded_filename"},{"question":"Design a Python function that accepts two strings as input - a main string and a search string - and returns the frequency of the search string appearing inside the main string, considering both overlapping and non-overlapping occurrences. Also, provide a piece of erroneous code that fails to work as intended and explain why it is incorrect.","solution":"def count_substring(main_str, search_str): Returns the frequency of the search string appearing inside the main string, considering both overlapping and non-overlapping occurrences. if not main_str or not search_str: return 0 count = 0 start = 0 while start <= len(main_str) - len(search_str): pos = main_str.find(search_str, start) if pos == -1: break count += 1 start = pos + 1 # Increment start position for overlapping return count"},{"question":"Create a Python function that is engineered to calculate the disparity between two given floating point numbers through a manual algorithm, opposed to using direct mathematical subtraction. Additionally, consider rounding issues and the precision of very small numbers (less than 0.00001) to make the function more robust. This problem is solved by implementing a function using the IEEE 754 floating-point arithmetic standard. Here is a sample solution in Python.","solution":"import math def calculate_disparity(a, b): Calculate the disparity between two floating point numbers a and b using a manual algorithm to ensure precision for very small numbers. # If both numbers are very close to each other, return 0 to avoid precision issues if math.isclose(a, b, abs_tol=1e-10): return 0.0 # Calculate the more accurate difference disparity = a - b # Considering rounding precision issues if abs(disparity) < 1e-5: return round(disparity, 10) return disparity"},{"question":"In Python, devise a function that fabricates a tuple composed of seven elements, taking a list as an input and ensuring that every element within the resultant tuple is an integer.","solution":"def fabricate_tuple(input_list): Fabricates a tuple composed of seven integers. Args: input_list (list): A list of elements. Returns: tuple: A tuple of seven integers. Raises: ValueError: If the input list does not contain exactly seven elements or contains non-integer elements. if len(input_list) != 7: raise ValueError(\\"Input list must contain exactly seven elements\\") for element in input_list: if not isinstance(element, int): raise ValueError(\\"All elements in the list must be integers\\") return tuple(input_list)"},{"question":"Can you make a Python program that determines the similarity between two strings using Jaccard Similarity Index?","solution":"def jaccard_similarity(str1, str2): Calculate the Jaccard Similarity Index between two strings. Args: str1 (str): First string. str2 (str): Second string. Returns: float: Jaccard Similarity Index. set1 = set(str1.split()) set2 = set(str2.split()) intersection = set1.intersection(set2) union = set1.union(set2) return len(intersection) / len(union) if len(union) != 0 else 0.0"},{"question":"Build a multifunctional calculator that can do the following operations: addition, subtraction, multiplication, division, square root, modulus operation and exponentiation. Include error handling for potential issues like divide by zero errors and for cases where inappropriate operations are attempted like modulus operation or square root on a negative number. The calculator should also support operation precedence (BODMAS/PEMDAS rule). It should take in strings in the form of \\"2+2\\" or \\"4/2\\" or \\"3^2\\" or \\"6%4\\", parse and evaluate them correctly.","solution":"import math class Calculator: @staticmethod def add(a, b): return a + b @staticmethod def subtract(a, b): return a - b @staticmethod def multiply(a, b): return a * b @staticmethod def divide(a, b): if b == 0: raise ValueError(\\"Cannot divide by zero\\") return a / b @staticmethod def sqrt(a): if a < 0: raise ValueError(\\"Cannot take square root of a negative number\\") return math.sqrt(a) @staticmethod def modulus(a, b): if b == 0: raise ValueError(\\"Cannot perform modulus by zero\\") return a % b @staticmethod def exponent(a, b): return a ** b @staticmethod def evaluate(expression): try: return eval(expression, {\\"__builtins__\\": None}, { 'sqrt': Calculator.sqrt, 'math': math, 'abs': abs, 'pow': pow }) except ZeroDivisionError: raise ValueError(\\"Division by zero is not allowed\\") except ValueError as ve: raise ve except Exception: raise ValueError(\\"Invalid expression\\")"},{"question":"Is there a way to create a program that generates the first 15 prime numbers using Python? Could you provide a code example? Also, it would be helpful if you could explain the logic behind the code.","solution":"def is_prime(n): Check if a number is a prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def generate_primes(count): Generate the first \`count\` prime numbers. primes = [] num = 2 while len(primes) < count: if is_prime(num): primes.append(num) num += 1 return primes def first_15_primes(): Returns the first 15 prime numbers. return generate_primes(15)"},{"question":"Generate a prefix for sandbox user email addresses that is unique and cannot be easily guessed or guessed by someone who might have access to a list of existing email addresses in the system. The prefix should be at least six characters long and should include a combination of letters, numbers, and special characters. Additionally, provide a code snippet that can generate a random prefix for each new sandbox user email address created.","solution":"import random import string def generate_random_prefix(length=6): Generates a unique and secure random prefix for sandbox user email addresses. The prefix includes a combination of letters, numbers, and special characters. Parameters: length (int): The length of the prefix to generate. Default is 6. Returns: str: A randomly generated prefix. characters = string.ascii_letters + string.digits + string.punctuation prefix = ''.join(random.choices(characters, k=length)) return prefix"},{"question":"Develop a Python program to display odd numbers from 11 to 3000 and also identify and classify those numbers which are primes.","solution":"def is_prime(num): Returns True if num is a prime number, else returns False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def odd_numbers_and_primes(start, end): Returns a list of odd numbers within the range start to end (inclusive) and a list of prime numbers within the same range. odd_numbers = [] prime_numbers = [] for num in range(start, end + 1): if num % 2 != 0: odd_numbers.append(num) if is_prime(num): prime_numbers.append(num) return odd_numbers, prime_numbers"},{"question":"Write a Python function that takes in a string and an integer n, and splits the string into n equal parts. If the string cannot be divided into equal parts, the function should return an error message. The function should also handle cases where n is less than 1 or greater than the length of the string. Make sure to include a docstring that explains the function's purpose, parameters, and return value. Additionally, write a set of assertions to test the function with various inputs, including edge cases.","solution":"def split_string_into_n_parts(s, n): Splits the input string \`s\` into \`n\` equal parts. Parameters: s (str): The input string to be split. n (int): The number of equal parts the string should be divided into. Returns: list: A list of n equal parts of the string. str: An error message if the string cannot be divided into \`n\` equal parts or if \`n\` is invalid. if n < 1 or n > len(s) or len(s) % n != 0: return \\"Error: String cannot be divided into {} equal parts.\\".format(n) part_length = len(s) // n parts = [s[i * part_length:(i + 1) * part_length] for i in range(n)] return parts"},{"question":"Implement a sorting algorithm to sort a list of 100,000 integers in descending order. The algorithm should have a time complexity of O(n log n) and should use an iterative approach. Additionally, you are not allowed to use any built-in sorting functions or libraries. You must also ensure that the sorting algorithm is stable, meaning that integers with the same value must maintain their relative order in the sorted list. The algorithm should also be space efficient and should not use additional data structures other than the input list.","solution":"def merge_sort_descending(arr): Sorts a list of integers in descending order using an iterative merge sort algorithm. if len(arr) <= 1: return arr width = 1 n = len(arr) while width < n: left = 0 while left < n: mid = min(left + width, n) right = min(left + 2 * width, n) merge(arr, left, mid, right) left += 2 * width width *= 2 return arr def merge(arr, left, mid, right): Merges two halves of a list in descending order. left_copy = arr[left:mid] right_copy = arr[mid:right] left_cursor, right_cursor = 0, 0 i = left while left_cursor < len(left_copy) and right_cursor < len(right_copy): if left_copy[left_cursor] >= right_copy[right_cursor]: arr[i] = left_copy[left_cursor] left_cursor += 1 else: arr[i] = right_copy[right_cursor] right_cursor += 1 i += 1 while left_cursor < len(left_copy): arr[i] = left_copy[left_cursor] left_cursor += 1 i += 1 while right_cursor < len(right_copy): arr[i] = right_copy[right_cursor] right_cursor += 1 i += 1"},{"question":"log commit 'C' as: Implement merge function for merge sort algorithm","solution":"def merge(left, right): Merges two sorted lists into one sorted list. Parameters: left (list): The first sorted list right (list): The second sorted list Returns: list: Merged sorted list merged = [] left_index, right_index = 0, 0 while left_index < len(left) and right_index < len(right): if left[left_index] <= right[right_index]: merged.append(left[left_index]) left_index += 1 else: merged.append(right[right_index]) right_index += 1 # If there are any remaining elements in left or right, add them if left_index < len(left): merged.extend(left[left_index:]) if right_index < len(right): merged.extend(right[right_index:]) return merged"},{"question":"Suppose I have a dataset that contains a list of words, including multiple entries of the same words. I want to create a Python program that can find and list all the words that are duplicates. Can you help me write the code for this?","solution":"def find_duplicate_words(words): Returns a list of duplicate words from the given list of words. from collections import Counter word_counts = Counter(words) duplicates = [word for word, count in word_counts.items() if count > 1] return duplicates"},{"question":"Develop a programming function that takes in two parameters: an array comprised exclusively of positive integers and a specific, unique numeric value. This function's duty is to sift through the array and single out only those numbers that are less than the provided numeric value. The ensuing list composed of these selectively filtered numbers should then be returned.","solution":"def filter_numbers_below_threshold(array, threshold): Filters and returns numbers from the array that are below the given threshold. Parameters: array (list): List of positive integers. threshold (int): The numeric value to compare against. Returns: list: A new list containing numbers from the array that are less than the threshold. return [num for num in array if num < threshold]"},{"question":"Given an unsorted array, my task is to create a function that generates the maximum and minimum values alongside two sorted versions of the array: one in ascending and the other in descending order. I'm looking to implement this using Python. For an additional challenge, I want to achieve this without relying on the built-in sort() function or any sorting functions from libraries like numpy or Pandas.","solution":"def max_min_sorted(arr): Given an unsorted array, returns the maximum and minimum values, and two sorted versions of the array: one in ascending and the other in descending order. # Ensure array is not empty if not arr: raise ValueError(\\"Array must not be empty\\") # Find the minimum and maximum values minimum = min(arr) maximum = max(arr) # Implementing bubble sort to sort the array in ascending and descending order def bubble_sort(arr, ascending=True): n = len(arr) sorted_arr = arr[:] for i in range(n): for j in range(0, n-i-1): if (ascending and sorted_arr[j] > sorted_arr[j+1]) or (not ascending and sorted_arr[j] < sorted_arr[j+1]): sorted_arr[j], sorted_arr[j+1] = sorted_arr[j+1], sorted_arr[j] return sorted_arr sorted_asc = bubble_sort(arr, ascending=True) sorted_desc = bubble_sort(arr, ascending=False) return minimum, maximum, sorted_asc, sorted_desc"},{"question":"Construct a Python function that not only reverses an array up to a specified index, but also organizes the part of the array after the specified index in ascending order. This function must be capable of managing edge cases such as an array that is empty, an array with a single element, a specified index that exceeds the array's bounds, or a specified index that is zero.","solution":"def reverse_and_sort(arr, index): Reverses the array up to a specified index and sorts the remaining part of the array. Parameters: - arr: list of elements - index: int, the index up to which the array should be reversed (inclusive) Returns: - Modified list according to the described operation if not arr: # Handling empty array return arr if index >= len(arr): # Handling index out of bounds return arr[::-1] if index < 0: # Ensuring non-negative index index = 0 reversed_part = arr[:index + 1][::-1] sorted_part = sorted(arr[index + 1:]) return reversed_part + sorted_part"},{"question":"Write a Python function that takes as input an array of integers and returns a new array where each element is the product of all elements in the original array except the current element. Avoid using division in your solution.","solution":"def product_except_self(nums): Returns an array where each element is the product of all elements in the input array except the current element. n = len(nums) if n == 0: return [] result = [1] * n # Compute the product of elements before the current element left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Compute the product of elements after the current element right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"I want to generate a Fibonacci sequence using Python. Can you help me write a code for it? The sequence should start from 0 and 1, and I want to be able to specify how many terms I want to generate.","solution":"def fibonacci_sequence(n): Generates a Fibonacci sequence with n terms. Parameters: n (int): Number of terms in the Fibonacci sequence to generate. Returns: list: A list containing the first n terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for _ in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"You are provided with a piece of code that is meant to check if a given number is a perfect square using binary search, but it contains several errors. Your task is to correct the faulty code presented below and then extend it to also find the next perfect square after the given number, if it exists.","solution":"import math def is_perfect_square(n): Return True if n is a perfect square, else False if n < 0: return False root = int(math.sqrt(n)) return root * root == n def next_perfect_square(n): Returns the next perfect square greater than n. If n is not a perfect square, return None. if not is_perfect_square(n): return None root = int(math.sqrt(n)) next_root = root + 1 return next_root * next_root"},{"question":"Develop an algorithm that compares two given strings and determines if they are anagrams of one another. The algorithm should also be able to handle cases where the strings might contain different cases (uppercase/lowercase), special characters and spaces.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams of one another, considering case insensitivity and ignoring special characters and spaces. # Remove special characters and spaces from the strings, and convert to lower case clean_str1 = ''.join(filter(str.isalnum, str1)).lower() clean_str2 = ''.join(filter(str.isalnum, str2)).lower() # Compare sorted versions of the cleaned strings return sorted(clean_str1) == sorted(clean_str2)"},{"question":"I need to write a program that takes a list as input and returns a reversed version of it. Can you help me with that?","solution":"def reverse_list(input_list): Returns a reversed version of the input list. return input_list[::-1]"},{"question":"You are given a string. Write a function named \`count_characters\` in Python to count the occurrence of each character (case-sensitive) in the string. The function should return a dictionary where the keys are the characters and the values are their counts.","solution":"def count_characters(s): Returns a dictionary with the count of each character in the string s. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"Write an implementation of the bubble sort algorithm in Python. Explain the time complexity of the algorithm and any potential optimizations that can be made.","solution":"def bubble_sort(arr): Sorts an array using the bubble sort algorithm. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr # Time Complexity: # Best-case: O(n) - This occurs when the array is already sorted and the algorithm makes a single pass without any swaps. # Average-case: O(n^2) - This occurs due to the two nested loops; one that covers all elements and another for comparison. # Worst-case: O(n^2) - This occurs when the array is in reverse order and every element must be compared in every pass. # Potential Optimizations: # 1. The algorithm can be optimized by stopping the process if the inner loop did not cause any swap. # 2. Using a flag, swapped, to monitor whether elements were swapped during the inner loop. If no elements were swapped, it breaks early because the array is sorted."},{"question":"Code a program to display the prime factors of a number. The program should be able to handle very large numbers efficiently, up to 10^18. The time complexity of the program should be less than O(n), where n is the square root of the given number. The program should also use an optimized algorithm to find the prime factors, such as the quadratic sieve or the general number field sieve.","solution":"def prime_factors(n): Returns the prime factors of n. i = 2 factors = [] # Remove factors of 2 while n % i == 0: factors.append(i) n = n // i # We only need to check up to sqrt(n) i = 3 while i * i <= n: while n % i == 0: factors.append(i) n = n // i i += 2 # If remaining n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Generate a Python program to perform matrix multiplication using only bitwise operations, without using any built-in functions or libraries, and the matrix size must be a power of 2. Additionally, the program must be able to handle matrices with negative values, and it must implement its own custom algorithm for matrix multiplication instead of using the traditional method.","solution":"def bitwise_multiply(a, b): result = 0 while b > 0: if b & 1: result += a a <<= 1 b >>= 1 return result def bitwise_multiply_negative(a, b): if a < 0 and b < 0: return bitwise_multiply(-a, -b) elif a < 0: return -bitwise_multiply(-a, b) elif b < 0: return -bitwise_multiply(a, -b) else: return bitwise_multiply(a, b) def bitwise_matrix_multiply(A, B): n = len(A) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): cell_sum = 0 for k in range(n): cell_sum += bitwise_multiply_negative(A[i][k], B[k][j]) result[i][j] = cell_sum return result"},{"question":"Write a Python program to calculate the median of three given numbers. The numbers are stored in variables x, y, and z. However, you are not allowed to use any built-in functions or libraries to calculate the median. You must implement your own algorithm to find the median.","solution":"def median_of_three(x, y, z): Returns the median of three given numbers x, y, and z. if (x <= y and x >= z) or (x >= y and x <= z): return x elif (y <= x and y >= z) or (y >= x and y <= z): return y else: return z"},{"question":"Given a list of tuples, write a Python function that creates a dictionary. The keys of the dictionary should be the first elements of each tuple and the values should be the second elements of the tuples. If there are duplicated keys in the list of tuples, your function should throw an error. Additionally, add validation to check that the both elements in each tuple are strings.","solution":"def tuples_to_dict(tuples_list): Converts a list of tuples into a dictionary. The first elements of the tuples become the keys, and the second elements become the values. Throws a ValueError if there are duplicated keys or if any tuple elements are not strings. :param tuples_list: A list of tuples, where each tuple contains exactly two elements :return: A dictionary constructed from the list of tuples result_dict = {} for key, value in tuples_list: # Check if both elements are strings if not isinstance(key, str) or not isinstance(value, str): raise ValueError(\\"Both elements in each tuple must be strings\\") # Check for duplicate keys if key in result_dict: raise ValueError(f\\"Duplicate key found: {key}\\") result_dict[key] = value return result_dict"},{"question":"Use reinforcement learning (RL) to build an AI agent which can play the game \\"Rock–paper–scissors\\".","solution":"import random class RPSAgent: def __init__(self): self.q_table = {} self.actions = ['rock', 'paper', 'scissors'] self.learning_rate = 0.1 self.discount_factor = 0.9 self.exploration_rate = 0.1 # Initial exploration rate def choose_action(self, state): if random.uniform(0, 1) < self.exploration_rate: return random.choice(self.actions) else: if state not in self.q_table: self.q_table[state] = {action: 0 for action in self.actions} return max(self.q_table[state], key=self.q_table[state].get) def update_q_table(self, state, action, reward, next_state): if state not in self.q_table: self.q_table[state] = {action: 0 for action in self.actions} if next_state not in self.q_table: self.q_table[next_state] = {action: 0 for action in self.actions} old_value = self.q_table[state][action] future_optimal_value = max(self.q_table[next_state].values()) new_value = old_value + self.learning_rate * (reward + self.discount_factor * future_optimal_value - old_value) self.q_table[state][action] = new_value def get_reward(self, player_action, opponent_action): if player_action == opponent_action: return 0 # It's a draw elif (player_action == 'rock' and opponent_action == 'scissors') or (player_action == 'scissors' and opponent_action == 'paper') or (player_action == 'paper' and opponent_action == 'rock'): return 1 # Player wins else: return -1 # Player loses def train(self, episodes): for _ in range(episodes): state = 'start' opponent_action = random.choice(self.actions) while True: action = self.choose_action(state) reward = self.get_reward(action, opponent_action) next_state = action self.update_q_table(state, action, reward, next_state) # Assuming the game is one round break state = next_state opponent_action = random.choice(self.actions) # Decrease exploration rate after training self.exploration_rate = 0.01 agent = RPSAgent() agent.train(1000)"},{"question":"Convert a decimal number to binary using recursion in Python.","solution":"def decimal_to_binary(n): Converts a decimal number to binary using recursion. Parameters: - n (int): Decimal number to be converted to binary. Returns: str: Binary representation of the decimal number. if n == 0: return '0' elif n == 1: return '1' else: return decimal_to_binary(n // 2) + str(n % 2)"},{"question":"Given an erroneous code below which attempts to implement the Karatsuba algorithm for polynomial multiplication in Python, identify and correct the errors as well as optimize it for efficiency. In your response, include a detailed explanation of how the Karatsuba algorithm works and how efficiency in time complexity is achieved compared to traditional polynomial multiplication.","solution":"def karatsuba(x, y): Multiplies two numbers using the Karatsuba algorithm. # Base case for recursion - if the numbers are small enough, just multiply them directly if x < 10 or y < 10: return x * y # Calculate the size of the numbers m = min(len(str(x)), len(str(y))) m2 = m // 2 # Split x and y into high and low digits high1, low1 = divmod(x, 10**m2) high2, low2 = divmod(y, 10**m2) # Perform three multiplications z0 = karatsuba(low1, low2) z1 = karatsuba((low1 + high1), (low2 + high2)) z2 = karatsuba(high1, high2) # Combine the results return (z2 * 10**(2*m2)) + ((z1 - z2 - z0) * 10**(m2)) + z0"},{"question":"Propose a specific Python code that implements a loop over an array of numerical values, requiring the calculation of cumulative product at each iteration instead of a simple for loop over the sequence.","solution":"def cumulative_product(arr): Returns an array with the cumulative product of the input array. if not arr: return [] result = [arr[0]] for i in range(1, len(arr)): result.append(result[-1] * arr[i]) return result"},{"question":"Write a python function named \`findOOVWords\` that identifies Out-Of-Vocabulary (OOV) words from a list of sentences compared to a given vocabulary set. The function should return a dictionary where keys are the sentences, and the values are lists containing the OOV words found in each corresponding sentence.","solution":"def findOOVWords(sentences, vocabulary): Identifies Out-Of-Vocabulary (OOV) words from a list of sentences compared to a given vocabulary set. Parameters: sentences (list of str): List of sentences to check for OOV words. vocabulary (set of str): Set of known vocabulary words. Returns: dict: A dictionary where keys are the sentences, and values are lists containing the OOV words found in each corresponding sentence. result = {} for sentence in sentences: words = sentence.split() oov_words = [word for word in words if word not in vocabulary] result[sentence] = oov_words return result"},{"question":"Develop a function called \\"find_parity\\" in Python that requires two integer input parameters, x and y. This function must recursively determine and return the parity of the XOR of x and y, in which the parity is defined as 'even' if the number is divisible by 2 or 'odd' if it is not. Make sure to address the condition when the parameters are not integers.","solution":"def find_parity(x, y): Recursively determines and returns the parity of the XOR of x and y. Parameters: x (int): The first integer. y (int): The second integer. Returns: str: 'even' if the XOR of x and y is divisible by 2, 'odd' otherwise. Raises: ValueError: If either x or y is not an integer. if not isinstance(x, int) or not isinstance(y, int): raise ValueError(\\"Both x and y must be integers\\") xor_result = x ^ y if xor_result % 2 == 0: return 'even' else: return 'odd'"},{"question":"Create a type with 4 fields, including \\"name\\", \\"address\\", \\"phone\\", and \\"email\\". The \\"name\\" field should only accept alphabetical characters and have a maximum length of 50 characters. The \\"address\\" field should only accept alphanumeric characters, spaces, commas, and periods, and have a maximum length of 100 characters. The \\"phone\\" field should only accept numeric characters and have a minimum length of 10 digits. The \\"email\\" field should only accept valid email addresses, following the format \\"name@example.com\\".","solution":"import re class ContactInfo: def __init__(self, name: str, address: str, phone: str, email: str): self.name = name self.address = address self.phone = phone self.email = email @property def name(self): return self._name @name.setter def name(self, value): if not value.isalpha(): raise ValueError(\\"Name must only contain alphabetical characters.\\") if len(value) > 50: raise ValueError(\\"Name must not exceed 50 characters.\\") self._name = value @property def address(self): return self._address @address.setter def address(self, value): if not re.match(r'^[a-zA-Z0-9 ,.]+', value): raise ValueError(\\"Address must only contain alphanumeric characters, spaces, commas, and periods.\\") if len(value) > 100: raise ValueError(\\"Address must not exceed 100 characters.\\") self._address = value @property def phone(self): return self._phone @phone.setter def phone(self, value): if not value.isdigit(): raise ValueError(\\"Phone must only contain numeric characters.\\") if len(value) < 10: raise ValueError(\\"Phone must have at least 10 digits.\\") self._phone = value @property def email(self): return self._email @email.setter def email(self, value): if not re.match(r'^[^@]+@[^@]+.[^@]+', value): raise ValueError(\\"Invalid email format.\\") self._email = value"},{"question":"Modify the following program to prompt the user for a filename, read the file, and sort the content by date (YYYY-MM-DD format) stored in the dictionary. Handle any potential Exceptions that could occur when handling the file.","solution":"import csv from datetime import datetime def read_and_sort_file(): filename = input(\\"Please enter the filename: \\") try: with open(filename, newline='') as csvfile: reader = csv.reader(csvfile) data = {} for row in reader: try: date = datetime.strptime(row[0], '%Y-%m-%d') data[date] = row[1] # assuming the date is the first column and the content is in the second column except ValueError: print(f\\"Invalid date format in row {row}\\") sorted_data = dict(sorted(data.items())) for date, content in sorted_data.items(): print(f\\"{date.strftime('%Y-%m-%d')}: {content}\\") except FileNotFoundError: print(f\\"File {filename} not found.\\") except Exception as e: print(f\\"An error occurred: {e}\\") if __name__ == \\"__main__\\": read_and_sort_file()"},{"question":"Write a Python program that filters an input list to remove prime numbers and then computes the average of the remaining numbers.","solution":"def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def filter_non_primes(numbers): Filters out the prime numbers from a list of numbers. return [num for num in numbers if not is_prime(num)] def average_of_non_primes(numbers): Computes the average of non-prime numbers in a list. non_prime_numbers = filter_non_primes(numbers) if not non_prime_numbers: return 0 return sum(non_prime_numbers) / len(non_prime_numbers)"},{"question":"Create a Python function that swaps the values of three variables without using any additional variables. Additionally, restrict the solution to a single line of code.","solution":"def swap_three(a, b, c): Swaps the values of three variables. Parameters: a (any): First variable b (any): Second variable c (any): Third variable Returns: tuple: Swapped values in the order (b, c, a) return b, c, a"},{"question":"Given the erroneous Python program below, debug and modify it to calculate the product of all odd numbers between 1 and 20. Implement this using a recursive function.","solution":"def product_of_odds(n): Recursive function to return the product of all odd numbers between 1 and n (inclusive). if n < 1: return 1 elif n % 2 == 0: return product_of_odds(n - 1) else: return n * product_of_odds(n - 2) def product_of_odds_between_1_and_20(): return product_of_odds(19) # 20 is even, so start with 19"},{"question":"Create a function to check if two strings are an anagram of each other using Python. The function should handle strings with spaces and special characters as well. If either of the strings is empty or contains only spaces, the function should return False. Additionally, the function should be case-sensitive, meaning 'Cat' and 'tac' should not be considered anagrams. Implement the function without using any built-in string manipulation functions or libraries.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, considering spaces and special characters. If either of the strings is empty or contains only spaces, returns False. Function is case-sensitive. def clean_string(s): # Filter out spaces and special characters and return the character counts char_count = {} for char in s: if char.isalnum(): char_count[char] = char_count.get(char, 0) + 1 return char_count # Remove leading and trailing whitespace to check if the strings are empty or contain only spaces if not str1.strip() or not str2.strip(): return False return clean_string(str1) == clean_string(str2)"},{"question":"Write a python function called \`nested_words\` that accepts two inputs, a string \`s\` and an alphabet \`a\`. The function returns true if each words in the sentence \`s\` begins with a letter from the alphabet \`a\`, false otherwise. Please write the docstring for the function as well.","solution":"def nested_words(s, a): Checks if every word in the sentence starts with a letter from the provided alphabet. Args: s (str): The input sentence. a (str): The alphabet to check against. Returns: bool: True if all words in the sentence start with a letter from the alphabet, False otherwise. words = s.split() for word in words: if not word or word[0].lower() not in a.lower(): return False return True"},{"question":"Construct a copy of the given code without using any built-in array methods, and instead, implement the array sum function using a loop.","solution":"def array_sum(arr): Returns the sum of all elements in the array without using any built-in array methods. Parameters: - arr: list of integers Returns: - sum of all integers in the array total = 0 for item in arr: total += item return total"},{"question":"Write a recursive function to calculate the Fibonacci series till a given number. Additionally, implement a memoization technique to optimize the function. Also, include a validation for input data to ensure it is a non-negative integer.","solution":"def fibonacci(n, memo={}): Returns the Fibonacci number at position n using memoization. Also, validates that n is a non-negative integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a python method to generate a random string of length 8 containing lowercase letters and numbers.","solution":"import random import string def generate_random_string(length=8): Generates a random string of specified length containing lowercase letters and numbers. Parameters: length (int): Length of the random string to be generated. Default is 8. Returns: str: A random string of the specified length. characters = string.ascii_lowercase + string.digits return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Please write a python code that simulates a restaurant dining experience for two people. The menu should include three starters, three main courses, and three desserts, each with their own price. The code should prompt the user to choose one starter, one main course, and one dessert for each person. The code should also include a function that generates a random recommendation for each course. Once the choices are made, the code should calculate and display the total bill for the dining experience. In addition, the code should keep track of the order history for each table and provide the ability to view previous orders for that table. The code should also include a feature that allows the users to provide feedback on the quality of the food and service, which should be stored in a file for future reference.","solution":"import random # Menu items with prices menu = { 'starters': { 'Spring Rolls': 5.00, 'Tomato Soup': 4.50, 'Caesar Salad': 6.00 }, 'mains': { 'Grilled Salmon': 15.00, 'Beef Steak': 20.00, 'Vegetable Stir Fry': 12.00 }, 'desserts': { 'Chocolate Cake': 6.50, 'Ice Cream': 5.00, 'Fruit Salad': 4.00 } } # Order history dictionary order_history = {} def get_random_recommendation(course): return random.choice(list(menu[course].keys())) def take_order_for_person(person): print(f\\"Taking order for {person}\\") starter = input(f\\"Choose a starter ({', '.join(menu['starters'].keys())}): \\") main = input(f\\"Choose a main course ({', '.join(menu['mains'].keys())}): \\") dessert = input(f\\"Choose a dessert ({', '.join(menu['desserts'].keys())}): \\") order = { 'starter': starter, 'main': main, 'dessert': dessert } return order def calculate_total(order): total = (menu['starters'][order['starter']] + menu['mains'][order['main']] + menu['desserts'][order['dessert']]) return total def view_previous_orders(table_number): if table_number in order_history: return order_history[table_number] else: return [] def save_feedback(table_number, feedback): with open(f\\"feedback_{table_number}.txt\\", \\"a\\") as file: file.write(feedback + \\"n\\") def simulate_experience(): table_number = input(\\"Enter the table number: \\") person1 = \\"Person 1\\" person2 = \\"Person 2\\" order1 = take_order_for_person(person1) order2 = take_order_for_person(person2) order_history.setdefault(table_number, []).extend([order1, order2]) total1 = calculate_total(order1) total2 = calculate_total(order2) total_bill = total1 + total2 print(f\\"Total bill for {table_number}: {total_bill:.2f}\\") feedback = input(f\\"Please provide feedback for table {table_number}: \\") save_feedback(table_number, feedback) print(\\"Thank you for your feedback!\\") # If you want to test the function, uncomment these two lines below # simulate_experience() # print(view_previous_orders('1'))"},{"question":"Create a Python function that generates multiple sub-functions, each with the ability to alter a shared data structure or global variable. However, one of the sub-functions should have a critical error that instead of altering the data as expected, corrupts the entire data structure. Analyze and debug this error without altering the essential purpose of the function. Further, explain how higher-order functions and closures can be used to mitigate against such errors in data manipulation tasks.","solution":"def data_manipulator(): Returns a list of functions that manipulate a shared data structure. One of these functions will corrupt the shared data. shared_data = [] def add_item(item): Adds an item to the shared_data list. nonlocal shared_data shared_data.append(item) def remove_last_item(): Removes the last item from the shared_data list. nonlocal shared_data if shared_data: shared_data.pop() def corrupt_data(): Corrupts the shared_data list. nonlocal shared_data shared_data = \\"Corrupted!\\" return [add_item, remove_last_item, corrupt_data] # Analyzing and debugging the error: # The corrupt_data function changes the type of shared_data from list to str. # To prevent such errors while maintaining closures, we can use higher-order functions # that validate the changes: def safe_data_manipulator(): Returns a list of functions that manipulate a shared data structure safely. shared_data = [] def add_item(item): Adds an item to the shared_data list. nonlocal shared_data shared_data.append(item) def remove_last_item(): Removes the last item from the shared_data list. nonlocal shared_data if shared_data: shared_data.pop() def corrupt_data(): Attempts to corrupt the shared_data list, but is caught. nonlocal shared_data try: if type(shared_data) is list: shared_data = \\"Corrupted!\\" # Extra check to revert change if corruption found if type(shared_data) is not list: raise ValueError(\\"Corruption detected!\\") except ValueError: shared_data = [] return [add_item, remove_last_item, corrupt_data]"},{"question":"Create a sorting algorithm from scratch that can sort an array of integers in ascending order. Additionally, the algorithm should be able to handle duplicate values in the array.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. This algorithm handles duplicate values in the array. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Define a Python function to generate the Fibonacci sequence up to the nth number.","solution":"def fibonacci(n): Generate a list representing the Fibonacci sequence up to the nth number. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib = [0, 1] for i in range(2, n): fib.append(fib[-1] + fib[-2]) return fib"},{"question":"Given two strings s1 and s2, how can you check if s2 is an anagram of any substring of s1? Your solution should have a time complexity of O(n) and a space complexity of O(1). It should also handle cases where both strings contain uppercase and lowercase letters. In addition, assume that both strings only contain alphabetic characters and have a maximum length of 10^5 characters.","solution":"def is_anagram_of_substring(s1, s2): Returns True if s2 is an anagram of any substring of s1, otherwise returns False. from collections import Counter len_s1, len_s2 = len(s1), len(s2) if len_s2 > len_s1: return False # Initialize counters counter_s2 = Counter(s2) window_counter = Counter(s1[:len_s2]) if counter_s2 == window_counter: return True # Slide the window across s1 for i in range(len_s2, len_s1): window_counter[s1[i]] += 1 window_counter[s1[i-len_s2]] -= 1 if window_counter[s1[i-len_s2]] == 0: del window_counter[s1[i-len_s2]] if counter_s2 == window_counter: return True return False"},{"question":"Write a function in Python that takes an integer as an input and prints the number of digits in the integer, without using any built-in string or mathematical functions, and with a time complexity of O(log n), where n is the value of the input integer.","solution":"def count_digits(n): Returns the number of digits in the given integer n without using any built-in string or mathematical functions. if n == 0: return 1 count = 0 if n < 0: n = -n # If the number is negative, make it positive while n > 0: count += 1 n //= 10 return count"},{"question":"Implement a recursive function in Python to calculate the least common multiple (LCM) of two numbers. Now, add an extra level of complexity by computing the LCM of a list of integers instead of just two numbers. The function should accept a list of integers as input and return their least common multiple. You need to include error handling to ensure the input is a list of non-zero integers. Additionally, provide a piece of potentially erroneous code for students to critically examine and determine where and why the code might fail. The reference code snippet can have misleading or incorrect elements, challenging the students to engage in problem-solving.","solution":"from typing import List def gcd(a, b): while b: a, b = b, a % b return a def lcm(a, b): return abs(a * b) // gcd(a, b) def lcm_of_list(numbers: List[int]) -> int: if not all(isinstance(num, int) for num in numbers): raise ValueError(\\"All elements must be integers.\\") if not all(num != 0 for num in numbers): raise ValueError(\\"All elements must be non-zero.\\") current_lcm = numbers[0] for num in numbers[1:]: current_lcm = lcm(current_lcm, num) return current_lcm # Potentially erroneous code def error_prone_lcm_of_list(numbers: List[int]) -> int: result = 1 for num in numbers: result *= num # This approach is incorrect as it multiplies the numbers directly without considering their LCM. return result"},{"question":"Simple Text Classification with GloVe Embeddings using PyTorch, making use of CUDA if available.","solution":"import torch import torch.nn as nn import torch.optim as optim from torch.utils.data import DataLoader, Dataset import numpy as np # Sample Dataset class for text classification class TextDataset(Dataset): def __init__(self, texts, labels, tokenizer, vocab, max_length): self.texts = texts self.labels = labels self.tokenizer = tokenizer self.vocab = vocab self.max_length = max_length def __len__(self): return len(self.texts) def __getitem__(self, idx): text = self.texts[idx] label = self.labels[idx] # Tokenize and convert to indices tokens = self.tokenizer(text) indices = [self.vocab[token] if token in self.vocab else self.vocab['<UNK>'] for token in tokens] # Pad or truncate the sequence if len(indices) < self.max_length: indices += [self.vocab['<PAD>']] * (self.max_length - len(indices)) else: indices = indices[:self.max_length] return torch.tensor(indices), torch.tensor(label) class TextClassificationModel(nn.Module): def __init__(self, vocab_size, embedding_dim, hidden_dim, output_dim, padding_idx, embeddings=None): super(TextClassificationModel, self).__init__() if embeddings is None: self.embedding = nn.Embedding(vocab_size, embedding_dim, padding_idx=padding_idx) else: self.embedding = nn.Embedding.from_pretrained(embeddings, freeze=False, padding_idx=padding_idx) self.rnn = nn.LSTM(embedding_dim, hidden_dim, batch_first=True) self.fc = nn.Linear(hidden_dim, output_dim) def forward(self, x): embedded = self.embedding(x) _, (hidden, _) = self.rnn(embedded) output = self.fc(hidden[-1]) return output def train_model(model, train_loader, criterion, optimizer, device): model.train() total_loss = 0 for texts, labels in train_loader: texts, labels = texts.to(device), labels.to(device) optimizer.zero_grad() outputs = model(texts) loss = criterion(outputs, labels) loss.backward() optimizer.step() total_loss += loss.item() return total_loss / len(train_loader) def evaluate_model(model, val_loader, criterion, device): model.eval() total_loss = 0 with torch.no_grad(): for texts, labels in val_loader: texts, labels = texts.to(device), labels.to(device) outputs = model(texts) loss = criterion(outputs, labels) total_loss += loss.item() return total_loss / len(val_loader) def predict(model, text, tokenizer, vocab, max_length, device): model.eval() tokens = tokenizer(text) indices = [vocab[token] if token in vocab else vocab['<UNK>'] for token in tokens] if len(indices) < max_length: indices += [vocab['<PAD>']] * (max_length - len(indices)) else: indices = indices[:max_length] indices = torch.tensor(indices).unsqueeze(0).to(device) with torch.no_grad(): output = model(indices) return torch.argmax(output).item()"},{"question":"I'm developing a quiz app where a user can create questions and answers. I need to restrict the output of answers to be one single line for each answer choice without any blank space in between. How can I achieve this using Python?","solution":"def format_answers(answers): Takes a list of answers and ensures that each answer is a single line with no blank spaces in between. Parameters: - answers: list of strings, where each string is an answer. Returns: - list of strings, where each string is a formatted answer. return [' '.join(answer.split()) for answer in answers]"},{"question":"Generate a simple Python function that takes an integer as an input and prints whether the number is even or odd.","solution":"def check_even_odd(number): Checks whether a given integer is even or odd. Args: number (int): The integer to check. Returns: str: \\"Even\\" if the number is even, \\"Odd\\" if the number is odd. if number % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"question":"Write a script that allows users to convert their CSV data to GeoJSON. This script can take in command line arguments, and users can specify the input file, which would be a CSV file, and the output file, which would be in GeoJSON format. The conversion should accomodate for all the different data types found in a typical CSV file. Additionally, the script should allow for the user to specify which longitude and latitude columns are used to create the points for the GeoJSON file. The script should handle errors, such as invalid column indexes or missing input files.","solution":"import csv import json import sys import os def csv_to_geojson(input_file, output_file, lat_col, lon_col): Converts a CSV file to a GeoJSON file based on the specified latitude and longitude columns. Parameters: - input_file: str, the path to the input CSV file - output_file: str, the path to the output GeoJSON file - lat_col: str, the name of the latitude column - lon_col: str, the name of the longitude column if not os.path.exists(input_file): raise FileNotFoundError(f\\"The input file {input_file} does not exist.\\") geojson = { \\"type\\": \\"FeatureCollection\\", \\"features\\": [] } with open(input_file, newline='') as csvfile: reader = csv.DictReader(csvfile) if lat_col not in reader.fieldnames or lon_col not in reader.fieldnames: raise ValueError(f\\"Latitude column '{lat_col}' or Longitude column '{lon_col}' not found in CSV.\\") for record in reader: try: latitude = float(record[lat_col]) longitude = float(record[lon_col]) feature = { \\"type\\": \\"Feature\\", \\"geometry\\": { \\"type\\": \\"Point\\", \\"coordinates\\": [longitude, latitude] }, \\"properties\\": {key: value for key, value in record.items() if key not in [lat_col, lon_col]} } geojson[\\"features\\"].append(feature) except ValueError: raise ValueError(f\\"Invalid latitude or longitude value in row: {record}\\") with open(output_file, 'w') as geojsonfile: json.dump(geojson, geojsonfile, indent=2) if __name__ == \\"__main__\\": if len(sys.argv) != 5: print(\\"Usage: python script.py <input_csv> <output_geojson> <lat_col> <lon_col>\\") else: input_file = sys.argv[1] output_file = sys.argv[2] lat_col = sys.argv[3] lon_col = sys.argv[4] csv_to_geojson(input_file, output_file, lat_col, lon_col)"},{"question":"Create a unicursal, doubly-linked list in Python employing the List Node structure. Also implement an error-checking function that verifies the integrity of the links (i.e., each node points to its previous and next node appropriately). Note that List Node structure should include a value and pointers to the next and the previous node in the list.","solution":"class ListNode: Class representing a node in a doubly-linked list. def __init__(self, value=0, next_node=None, prev_node=None): self.value = value self.next = next_node self.prev = prev_node def check_integrity(head): Verifies the integrity of the doubly-linked list starting from the head node. Each node should correctly point to its next and previous node. current = head while current and current.next: if current.next.prev != current: return False current = current.next return True"},{"question":"Given a set of numerical values, write a program to sort these values in descending order using the bubble sort algorithm.","solution":"def bubble_sort_descending(arr): Sorts an array of numerical values in descending order using the bubble sort algorithm. Args: arr (list): List of numerical values. Returns: list: Sorted list in descending order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"I am grappling with a specific predicament: The Dilemma of Duplicate Characters in Two Strings. The details of this issue are as follows: You are provided with two strings, denoted as \`X\` and \`Y\`, which may or may not encompass duplicate characters. Your task is to devise an algorithm that identifies and returns all duplicate characters shared by both strings. The sequence in which these characters are returned is not a concern.","solution":"def find_duplicate_characters(X, Y): Returns a set of all duplicate characters shared by both strings X and Y. # Convert both strings to sets to eliminate duplicates within each string set_X = set(X) set_Y = set(Y) # Find the intersection of both sets to get the common characters common_characters = set_X & set_Y # Return the list of common characters return common_characters"},{"question":"Write a Python class that parses a comma-separated string to an array of strings while ignoring whitespaces","solution":"class CSVParser: def parse(self, csv_string): Parses a comma-separated string into a list of strings while ignoring any surrounding whitespaces. Args: csv_string (str): The comma-separated string to parse. Returns: List[str]: The list of strings. return [item.strip() for item in csv_string.split(',')]"},{"question":"Write me a recursive function to generate Fibonacci numbers in python. Additionally, memoize the function to improve performance.","solution":"def fibonacci(n, memo={}): Recursive function to return the nth Fibonacci number. Utilizes memoization to improve performance. if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Code a recursive function that calculates the factorial of a given number in Python. Implement the function without using loops or any built-in factorial functions. Additionally, add error checking to handle negative numbers and non-integer values.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. Raises ValueError for negative integers and TypeError for non-integer values. if not isinstance(n, int): raise TypeError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Develop a Python function intended to compute the factorial of a provided integer, adopting an iterative approach for this calculation.","solution":"def factorial(n): Returns the factorial of a non-negative integer n using an iterative approach. Raises ValueError if n is a negative integer. :param n: non-negative integer :return: factorial of n if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Convert the following相处json format list to a Python dictionary. The input list can contain nested lists and dictionaries. Additionally, implement the conversion recursively.","solution":"def json_list_to_dict(json_list): Recursively converts a JSON format list to a Python dictionary. Parameters: json_list (list): The JSON format list to convert. Returns: dict: The converted Python dictionary. if not isinstance(json_list, list): raise TypeError(\\"Input must be a list\\") result = {} for index, element in enumerate(json_list): if isinstance(element, list): result[index] = json_list_to_dict(element) elif isinstance(element, dict): result[index] = {key: json_list_to_dict(value) if isinstance(value, list) else value for key, value in element.items()} else: result[index] = element return result"},{"question":"Can you create a function that, given a list of arbitrary floating-point numbers, reorganizes this list in a random order without any discernible pattern? For instance, consider this array: [3.6, 7.1, 12.9, 0.5].","solution":"import random def shuffle_list(input_list): Shuffles the given list in a random order. Args: input_list (list of floats): The list of floating-point numbers to shuffle. Returns: list of floats: The shuffled list. # Using random.shuffle to shuffle the list in place random.shuffle(input_list) return input_list"},{"question":"Develop a python script utilizing the Global Scripter platform from Extron to enable consistent monitoring of a conference room's audio equipment. If any anomalies are detected in the audio signal, the script must send an alert to a designated email address listing the specifics of the problem and proposing a workable solution to rectify it. The script should run on a schedule and log all alerts and actions taken for future reference.","solution":"import smtplib from email.mime.text import MIMEText from datetime import datetime, timedelta import logging # Setup logging logging.basicConfig(filename='audio_equipment_monitor.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s') def send_alert_email(subject, message, to_email): Sends an alert email. Parameters: subject (str): Subject of the email message (str): Body of the email to_email (str): Recipient email address from_email = \\"your_email@example.com\\" email_password = \\"your_password\\" msg = MIMEText(message) msg[\\"Subject\\"] = subject msg[\\"From\\"] = from_email msg[\\"To\\"] = to_email try: with smtplib.SMTP_SSL(\\"smtp.example.com\\", 465) as server: server.login(from_email, email_password) server.sendmail(from_email, to_email, msg.as_string()) logging.info(f\\"Alert email sent to {to_email}\\") except Exception as e: logging.error(f\\"Failed to send alert email: {e}\\") def monitor_audio_equipment(): Monitors the audio equipment for anomalies. # Simulated status check of audio equipment audio_status = check_audio_status() if audio_status['status'] != 'OK': subject = \\"Audio Equipment Alert\\" message = (f\\"Anomaly detected in conference room audio equipment.nn\\" f\\"Details: {audio_status['details']}nn\\" f\\"Proposed Solution: {audio_status['solution']}\\") send_alert_email(subject, message, \\"recipient@example.com\\") logging.warning(f\\"Anomaly detected: {audio_status['details']}\\") def check_audio_status(): Simulates checking the audio status of the equipment. Returns: dict: A dictionary with status, details, and proposed solution # For testing purposes, randomly simulate an anomaly from random import choice anomalies = [ {'status': 'OK', 'details': 'All systems functional', 'solution': 'N/A'}, {'status': 'Error', 'details': 'Microphone not detected', 'solution': 'Check the microphone connection.'}, {'status': 'Warning', 'details': 'Audio signal low', 'solution': 'Increase microphone sensitivity.'} ] return choice(anomalies) def schedule_monitoring(interval_minutes): Schedules the audio equipment monitoring. Parameters: interval_minutes (int): Interval in minutes at which the monitoring should run next_run = datetime.now() while True: if datetime.now() >= next_run: monitor_audio_equipment() next_run = datetime.now() + timedelta(minutes=interval_minutes) time.sleep(1) if __name__ == \\"__main__\\": schedule_monitoring(60) # Schedule to run every 60 minutes"},{"question":"Develop a recursive function to reverse a string without using any built-in function or additional temporary variables except for recursion variables. Avoid using any form of data structure for this task.","solution":"def reverse_string(s): A recursive function to reverse a string without using any built-in function or additional temporary variables. # Base case: if the string is empty or a single character, return as is if len(s) <= 1: return s # Recursive case: concatenate the last character with the reversed substring (excluding the last character) return s[-1] + reverse_string(s[:-1])"},{"question":"I want to simulate a football game with given player data like speed, strength, agility, and so on. How do I translate these player attributes into game mechanics using a code script in Python? Also, provide an example of the player data in JSON format.","solution":"import json import random class Player: def __init__(self, name, speed, strength, agility, intelligence): self.name = name self.speed = speed self.strength = strength self.agility = agility self.intelligence = intelligence def perform_action(self): Simulate a player action based on their attributes. Return a score representing the effectiveness of the action. action_score = ( self.speed * random.uniform(0.8, 1.2) + self.strength * random.uniform(0.8, 1.2) + self.agility * random.uniform(0.8, 1.2) + self.intelligence * random.uniform(0.8, 1.2) ) return action_score def simulate_game(players): Simulate a game with the given players and return scores. results = {} for player in players: results[player.name] = player.perform_action() return results # Example player data in JSON format players_json = ''' [ {\\"name\\": \\"John Doe\\", \\"speed\\": 85, \\"strength\\": 90, \\"agility\\": 75, \\"intelligence\\": 80}, {\\"name\\": \\"Jane Smith\\", \\"speed\\": 95, \\"strength\\": 88, \\"agility\\": 82, \\"intelligence\\": 85}, {\\"name\\": \\"Mike Johnson\\", \\"speed\\": 78, \\"strength\\": 86, \\"agility\\": 80, \\"intelligence\\": 79} ] ''' def create_players_from_json(json_str): Create Player objects from JSON string. players_data = json.loads(json_str) players = [Player(**data) for data in players_data] return players # Create players players = create_players_from_json(players_json) # Simulate game game_results = simulate_game(players) # Display results print(game_results)"},{"question":"Given a list of integers, write a function in Python that will find and return the integer that appears an odd number of times in the list. There will always be only one integer that appears an odd number of times in the provided list.","solution":"def find_odd_occurrence(numbers): Given a list of integers, find and return the integer that appears an odd number of times. There is only one such integer in the input list. number_count = {} # Count occurrences of each number for number in numbers: if number in number_count: number_count[number] += 1 else: number_count[number] = 1 # Find the number that occurs an odd number of times for number, count in number_count.items(): if count % 2 != 0: return number"},{"question":"Develop a Python function that implements card counting, not for any well-known card games but for a hypothetical new card game that you will also invent. Your explanation should include the rules of the game, how the points/counts are calculated, and the logic behind the implemented function.","solution":"def count_crowns(cards): Count the points of given cards based on the game rules. Parameters: cards (list of tuples): A list of tuples where each tuple represents a card. Tuple format is (rank, suit), e.g., ('2', 'hearts'). Returns: int: The total count of points based on the game rules. point_values = { '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10, 'A': 15 } total_count = 0 for rank, suit in cards: points = point_values[rank] if suit in ['hearts', 'diamonds']: total_count += points elif suit in ['clubs', 'spades']: total_count -= points return total_count"},{"question":"Create a function to reverse a list without using the reverse() method and without using any built-in Python functions or methods that directly manipulate lists. Additionally, the function should have a time complexity of O(n) and should not create any new lists or utilize any additional data structures.","solution":"def reverse_list(lst): Reverses the input list in place without using the reverse() method and without creating any new lists. Parameters: lst (list): The list to be reversed. Returns: list: The same list object, reversed. left = 0 right = len(lst) - 1 while left < right: # Swap elements at left and right positions lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1 return lst"},{"question":"Can you write a Python script to validate a list of MAC addresses? The script should take a list of MAC addresses as input and print out only the valid MAC addresses.","solution":"import re def validate_mac_addresses(mac_addresses): Validates a list of MAC addresses and returns only the valid ones. Parameters: mac_addresses (list of str): List of MAC addresses to validate. Returns: list of str: List of valid MAC addresses. valid_mac_addresses = [] mac_address_pattern = re.compile( r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})' ) for mac in mac_addresses: if mac_address_pattern.match(mac): valid_mac_addresses.append(mac) return valid_mac_addresses"},{"question":"Write a recursive Fibonacci function in Python but with a twist: incorporate memoization to optimize and handle potential large inputs without worrying about recursion depth limits. Note that the function still has to be recursive.","solution":"def fibonacci(n, memo=None): Returns the n-th Fibonacci number using a recursive approach with memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 1: return n memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Create a Python function that takes as input an adjacency matrix representing a weighted undirected graph and outputs the minimum spanning tree of that graph using Kruskal's algorithm. The minimum spanning tree should be returned as a list of edges, with each edge represented as a tuple of the form \`(node1, node2, weight)\`, where \`node1\`, \`node2\` are the nodes connected by the edge, and \`weight\` is the weight of the edge. The function should handle the case where the graph is disconnected and return the minimum spanning forest.","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def kruskal(adjacency_matrix): edges = [] n = len(adjacency_matrix) for i in range(n): for j in range(i + 1, n): if adjacency_matrix[i][j] != 0: edges.append((adjacency_matrix[i][j], i, j)) edges.sort() uf = UnionFind(n) mst = [] for weight, u, v in edges: if uf.find(u) != uf.find(v): uf.union(u, v) mst.append((u, v, weight)) return mst"},{"question":"Develop a Python code snippet to define a function that is capable of computing the multiplicative product for each distinct element situated in a provided list of integers.","solution":"def distinct_elements_product(elements): Returns the product of distinct elements in the list. distinct_elements = set(elements) product = 1 for element in distinct_elements: product *= element return product"},{"question":"Write a code snippet to check if all characters in a given string are either uppercase letters, lowercase letters, numbers, or special characters. The string should contain at least one uppercase letter, one lowercase letter, one number, and one special character. The string can have a maximum length of 100 characters.","solution":"import re def check_string_requirements(s): Check if the string s contains at least one uppercase letter, one lowercase letter, one number, and one special character. The string can have a maximum length of 100 characters. if len(s) > 100: return False has_upper = bool(re.search(r'[A-Z]', s)) has_lower = bool(re.search(r'[a-z]', s)) has_digit = bool(re.search(r'd', s)) has_special = bool(re.search(r'[^A-Za-z0-9]', s)) return has_upper and has_lower and has_digit and has_special"},{"question":"Given a list of database column names, write a function to generate Oracle SQL SELECT statements using these names. Include support for aliased columns and the possibility to calculate the total number of records by adding a COUNT(*) statement.","solution":"def generate_sql_select(columns, table, alias_dict=None, add_count=False): Generates an Oracle SQL SELECT statement. Parameters: - columns: list of column names. - table: the name of the table. - alias_dict: a dictionary for aliasing column names. - add_count: bool, if True adds a COUNT(*) statement. Returns: - SQL String # List to store SQL parts sql_parts = [] # If there are columns to select if columns: for col in columns: if alias_dict and col in alias_dict: sql_parts.append(f\\"{col} AS {alias_dict[col]}\\") else: sql_parts.append(col) else: sql_parts.append(\\"*\\") # Convert list to string sql_string = \\", \\".join(sql_parts) # Add the count(*) if required if add_count: sql_string += \\", COUNT(*) AS total_records\\" # Generate the full SQL statement sql_statement = f\\"SELECT {sql_string} FROM {table}\\" return sql_statement"},{"question":"Write a Python code to find the Kth smallest element from a given list of N elements using a min-heap. You cannot use any built-in functions or libraries for sorting or heap data structure. You have to implement your own min-heap and other necessary functions.","solution":"class MinHeap: def __init__(self): self.heap = [] def insert(self, element): self.heap.append(element) self._bubble_up(len(self.heap) - 1) def extract_min(self): if len(self.heap) == 0: return None if len(self.heap) == 1: return self.heap.pop() root_value = self.heap[0] self.heap[0] = self.heap.pop() self._bubble_down(0) return root_value def _bubble_up(self, index): parent_index = (index - 1) // 2 if index > 0 and self.heap[index] < self.heap[parent_index]: self.heap[index], self.heap[parent_index] = self.heap[parent_index], self.heap[index] self._bubble_up(parent_index) def _bubble_down(self, index): smallest = index left_child_index = 2 * index + 1 right_child_index = 2 * index + 2 if left_child_index < len(self.heap) and self.heap[left_child_index] < self.heap[smallest]: smallest = left_child_index if right_child_index < len(self.heap) and self.heap[right_child_index] < self.heap[smallest]: smallest = right_child_index if smallest != index: self.heap[index], self.heap[smallest] = self.heap[smallest], self.heap[index] self._bubble_down(smallest) def kth_smallest_element(arr, k): heap = MinHeap() for element in arr: heap.insert(element) for _ in range(k - 1): heap.extract_min() return heap.extract_min()"},{"question":"Use the terminal to create a python script that prints \\"Hello, welcome to the world of programming!\\" and after printing, the script should recursively call itself with a delay of 2 seconds, up to 5 times. Make sure you include error handling to catch any potential exceptions that might prevent the script from running.","solution":"import time import sys def main(counter=1): try: if counter > 5: return print(\\"Hello, welcome to the world of programming!\\") time.sleep(2) main(counter + 1) except Exception as e: print(f\\"An error occurred: {e}\\") sys.exit(1) if __name__ == \\"__main__\\": main()"},{"question":"Using functions and classes, write a Python program to count the number of occurrences of a given word in several given strings. Additionally, validate the strings and words to ensure they only contain letters and spaces. Also, implement case sensitivity in your solution.","solution":"import re def validate_string(input_string): Validates that the input_string contains only letters and spaces. return bool(re.match(\\"^[A-Za-z ]*\\", input_string)) def count_occurrences(word, strings): Counts the number of occurrences of the given word in a list of strings. Case-sensitive. if not validate_string(word): raise ValueError(\\"The word contains invalid characters.\\") if not all(validate_string(s) for s in strings): raise ValueError(\\"One or more strings contain invalid characters.\\") count = 0 for string in strings: count += string.split().count(word) return count class WordCounter: def __init__(self, word): if not validate_string(word): raise ValueError(\\"The word contains invalid characters.\\") self.word = word def count_in_strings(self, strings): Uses the WordCounter instance to count occurrences of the word in a list of strings. Case-sensitive. if not all(validate_string(s) for s in strings): raise ValueError(\\"One or more strings contain invalid characters.\\") count = 0 for string in strings: count += string.split().count(self.word) return count"},{"question":"Design a Python function which not only computes the total volume of a given list of cylinders, but also the total surface area. Each cylinder is presented by a dictionary with keys to represent the 'radius', 'height', and 'y' values. Besides this, ensure that your implementation also applies a given discount rate to the volumes of all cylinders. The discount rate is specified as a decimal value between 0 and 1, where 0.1, for instance, implies a 10% discount.","solution":"import math def compute_cylinders(cylinders, discount_rate): Computes the total volume and total surface area of given list of cylinders and applies a given discount rate to the total volume. Each cylinder is represented by a dictionary with keys 'radius' and 'height'. The discount_rate is a decimal value between 0 and 1. Returns a tuple (total_discounted_volume, total_surface_area). total_volume = 0 total_surface_area = 0 for cylinder in cylinders: radius = cylinder['radius'] height = cylinder['height'] volume = math.pi * (radius ** 2) * height surface_area = 2 * math.pi * radius * (radius + height) total_volume += volume total_surface_area += surface_area total_discounted_volume = total_volume * (1 - discount_rate) return total_discounted_volume, total_surface_area"},{"question":"Create a script that sorts the given array in decreasing order, using only recursion and without using any built-in sorting functions or loops. The array may contain duplicate elements. Additionally, the script should remove any duplicate elements from the sorted array. The script should have a time complexity of O(nlogn) and a space complexity of O(n).","solution":"def recursive_sort(arr): Sorts an array in decreasing order using recursion and removes duplicates. if len(arr) <= 1: return arr pivot = arr[0] left = [x for x in arr[1:] if x > pivot] right = [x for x in arr[1:] if x <= pivot] sorted_left = recursive_sort(left) sorted_right = recursive_sort(right) sorted_array = sorted_left + [pivot] + sorted_right # Removing duplicates result = [] seen = set() for num in sorted_array: if num not in seen: result.append(num) seen.add(num) return result"},{"question":"Design a CLI (Command Line Interface) using Python's Click library for a service called \\"DineDash\\". The DineDash service allows customers to place food orders from multiple restaurants, schedule deliveries, and provides live tracking.","solution":"import click @click.group() def dinedash(): Welcome to the DineDash CLI. pass @click.command() @click.argument('customer_name') @click.argument('restaurant_name') @click.argument('food_items', nargs=-1) def order(customer_name, restaurant_name, food_items): Place a food order. click.echo(f\\"Order placed by {customer_name} to {restaurant_name} for items: {', '.join(food_items)}\\") @click.command() @click.argument('customer_name') @click.argument('order_id') @click.argument('delivery_time') def schedule(customer_name, order_id, delivery_time): Schedule a delivery. click.echo(f\\"Delivery for order {order_id} by {customer_name} scheduled at {delivery_time}\\") @click.command() @click.argument('customer_name') @click.argument('order_id') def track(customer_name, order_id): Track your order. click.echo(f\\"Tracking order {order_id} for {customer_name}...\\") dinedash.add_command(order) dinedash.add_command(schedule) dinedash.add_command(track) if __name__ == '__main__': dinedash()"},{"question":"Write a function in Python that counts and prints the occurrences of each word in a provided string, ignoring case and punctuation, and storing the results in a dictionary. Make sure that the function is robust against unexpected inputs.","solution":"import string def count_word_occurrences(input_string): Counts and prints the occurrences of each word in a provided string, ignoring case and punctuation. Stores the results in a dictionary and returns it. Parameters: input_string (str): The string to process. Returns: dict: A dictionary with words as keys and their counts as values. if not isinstance(input_string, str): raise ValueError(\\"Input must be a string\\") # Remove punctuation and make lower case translator = str.maketrans('', '', string.punctuation) cleaned_string = input_string.translate(translator).lower() words = cleaned_string.split() word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts"},{"question":"Hi, write a function to check if a string of brackets is valid. The string is valid if all types of brackets (parentheses, curly braces, and square brackets) are properly opened and closed in the correct order.","solution":"def is_valid_bracket_string(s: str) -> bool: Checks if a string of brackets is valid. A string is valid if: - All types of brackets (parentheses, curly braces, and square brackets) are properly opened and closed - Brackets are closed in the correct order Args: s (str): the string to check Returns: bool: True if the string is valid, False otherwise stack = [] bracket_map = {')': '(', '}': '{', ']': '['} for char in s: if char in bracket_map: top_element = stack.pop() if stack else '#' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Create a random 4-D array with the provided dimensions using NumPy. Now, not only should the array be created, but you're also required to implement a function to calculate the sum of all the elements in the 4-D array, without using any built-in sum function from numpy.","solution":"import numpy as np def create_4d_array(dim1, dim2, dim3, dim4): Creates a 4-D array with random values using the given dimensions. return np.random.rand(dim1, dim2, dim3, dim4) def sum_4d_array(arr): Calculates the sum of all elements in the 4-D array without using numpy's sum function. total_sum = 0 for i in range(arr.shape[0]): for j in range(arr.shape[1]): for k in range(arr.shape[2]): for l in range(arr.shape[3]): total_sum += arr[i, j, k, l] return total_sum"},{"question":"Q1. Given a string as input, create a function to return all the unique substrings of the given string in any order.","solution":"def unique_substrings(s): Returns a list of all unique substrings of the given string. unique_substrs = set() length = len(s) for i in range(length): for j in range(i + 1, length + 1): unique_substrs.add(s[i:j]) return list(unique_substrs)"},{"question":"In Python, what is the best way to create a function that finds the maximum number among three given numbers? Furthermore, modify the function to return the largest number's position/index among the three numbers, considering that the numbers may not be distinct. Make sure that your function can handle all possible input types, including integers, floats, and negative numbers, while still maintaining an execution time within O(1). Can you also provide a table presenting the function's performance based on different input ranges, such as all positive numbers, both positive and negative numbers, and a combination of integers and floats? Finally, implement a test suite with a variety of test cases, including edge cases, to ensure that your function is thoroughly tested and robust.","solution":"def find_max_and_index(a, b, c): Returns the maximum number among the three given numbers and its index in the input sequence. numbers = [a, b, c] max_value = max(numbers) max_index = numbers.index(max_value) return max_value, max_index # Performance table based on different input ranges: # | Input Type | Example | Execution Time | # |----------------------------|-----------------|----------------| # | All Positive Numbers | (1, 2, 3) | O(1) | # | Both Positive/Negative | (-1, 2, 0) | O(1) | # | Combination of Int & Float | (1.5, -2, 2.5) | O(1) |"},{"question":"You are given an undirected graph and two vertices A and B. Write a Python function to determine the shortest path between A and B using the breadth-first search algorithm. Additionally, decompose the code into multiple functions that each perform a specific task such as checking if the graph is empty, conducting the breadth-first search, and reconstructing the path from the search results. Incorporate error handling to tackle potential issues such as the input graph being empty or non-existent paths between vertices.","solution":"from collections import deque def is_graph_empty(graph): Check if the input graph is empty. :param graph: A dictionary representing the graph where keys are nodes and values are lists of adjacent nodes. :return: True if the graph is empty, False otherwise. return len(graph) == 0 def bfs_shortest_path(graph, start, goal): Perform a breadth-first search to find the shortest path between start and goal vertices. :param graph: A dictionary representing the graph where keys are nodes and values are lists of adjacent nodes. :param start: The starting vertex. :param goal: The goal vertex. :return: A tuple containing the shortest path as a list of vertices and the length of the path. If no path exists, return (None, 0). if start == goal: return ([start], 1) # keep track of explored nodes explored = set() # keep track of all the paths to be checked queue = deque([[start]]) # return path if start is goal if start == goal: return [start] # keeps looping until all possible paths have been checked while queue: # pop the first path from the queue path = queue.popleft() # get the last node from the path node = path[-1] if node not in explored: neighbours = graph.get(node, []) # go through all neighbour nodes, construct a new path and # push it into the queue for neighbour in neighbours: new_path = list(path) new_path.append(neighbour) queue.append(new_path) # return path if neighbour is goal if neighbour == goal: return (new_path, len(new_path)) # mark node as explored explored.add(node) # in case there's no path between the 2 nodes return (None, 0) def shortest_path(graph, start, goal): Determine the shortest path between two vertices A and B using BFS. :param graph: A dictionary representing the graph where keys are nodes and values are lists of adjacent nodes. :param start: The starting vertex. :param goal: The goal vertex. :return: A tuple containing the shortest path as a list of vertices and the length of the path. if is_graph_empty(graph): raise ValueError(\\"The input graph is empty.\\") path, length = bfs_shortest_path(graph, start, goal) if path is None: raise ValueError(f\\"There is no path between {start} and {goal}.\\") return path, length"},{"question":"Given a 2D array, write a program to rotate the array left by 90 degrees.","solution":"def rotate_matrix_left_90(matrix): Rotates a given 2D array (matrix) left by 90 degrees. Parameters: matrix (list of list of int): 2D array to rotate Returns: list of list of int: The rotated 2D array # Number of rows and columns in the matrix rows = len(matrix) cols = len(matrix[0]) if rows else 0 # Create a new matrix for the result with transposed dimensions rotated_matrix = [[0] * rows for _ in range(cols)] for i in range(rows): for j in range(cols): rotated_matrix[cols - j - 1][i] = matrix[i][j] return rotated_matrix"},{"question":"Devise a programming script that accepts an integer input, Y, and evaluates whether it's a safe number. Additionally, the script should verify the correctness of the calculation from a procedural perspective ensuring the accuracy of the process, i.e., handling boundary cases and exceptions that may occur in the process. The implementation needs to be efficient considering time and space complexity.","solution":"def is_safe_number(Y): Determines if a given integer Y is a safe number. A safe number is defined based on certain criteria which needs to be provided. For the purpose of this example, let's define a safe number as: - Positive integer and less than or equal to 10^6. # Define the safe number criteria if isinstance(Y, int) and 1 <= Y <= 10**6: return True return False"},{"question":"Write a python program to display the prime numbers between a and b, where a and b are taken as input from the user.","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def prime_numbers_between(a, b): Returns a list of prime numbers between a and b (including a and b if they are prime). primes = [] for number in range(a, b+1): if is_prime(number): primes.append(number) return primes"},{"question":"Read the input values and write a program that creates a complete weighted graph with the given vertices and edges, ensuring that the graph is undirected and contains no self-loops. Assign the input weights to the edges. Implement a function to verify the correctness of the generated graph by checking if all the nodes are present, if all the edges exist with the correct weights, and if the graph is indeed undirected (i.e., every edge that connects node A to node B also connects node B to node A with the same weight). Your program should raise an error if the input values are not sufficient to form the graph or if there are any inconsistencies in the input.","solution":"class Graph: def __init__(self): self.adjacency_list = {} def add_edge(self, u, v, weight): if u == v: raise ValueError(\\"No self-loops allowed\\") if u not in self.adjacency_list: self.adjacency_list[u] = {} if v not in self.adjacency_list: self.adjacency_list[v] = {} self.adjacency_list[u][v] = weight self.adjacency_list[v][u] = weight def verify_graph(self, vertices, edges): # Check if all nodes are present for node in vertices: if node not in self.adjacency_list: return False # Check if all edges are present and weights are correct for u, v, weight in edges: if u not in self.adjacency_list or v not in self.adjacency_list[u]: return False if self.adjacency_list[u][v] != weight: return False # Check for undirected if self.adjacency_list[v][u] != weight: return False return True def create_graph(vertices, edges): graph = Graph() for u, v, w in edges: graph.add_edge(u, v, w) if not graph.verify_graph(vertices, edges): raise ValueError(\\"Graph verification failed\\") return graph # Example usage: # vertices = [1, 2, 3] # edges = [(1, 2, 10), (2, 3, 15), (1, 3, 20)] # graph = create_graph(vertices, edges)"},{"question":"Generate code that takes a 2D array of integers as input, and, in place, swaps the rows so that the row with the smallest sum is first. If there are multiple rows with the same smallest sum, prefer the one that also has the smallest max element.","solution":"def swap_rows_with_min_sum(matrix): Takes a 2D array (list of lists) of integers and swaps the row with the smallest sum to be the first row. If multiple rows have the same smallest sum, the row with the smallest max element is preferred. :param matrix: 2D list of integers :return: The matrix after swapping rows in place if not matrix or not matrix[0]: # Check if matrix is empty or contains empty rows return matrix # Find the row with the smallest sum. If there are multiple, find the one with the smallest max element. min_sum_idx = 0 min_sum = sum(matrix[0]) min_max_elem = max(matrix[0]) for idx in range(1, len(matrix)): row_sum = sum(matrix[idx]) row_max_elem = max(matrix[idx]) if (row_sum < min_sum) or (row_sum == min_sum and row_max_elem < min_max_elem): min_sum = row_sum min_sum_idx = idx min_max_elem = row_max_elem # Swap the row with the smallest sum with the first row matrix[0], matrix[min_sum_idx] = matrix[min_sum_idx], matrix[0] return matrix"},{"question":"Create a function that takes a Unicode string as an argument and returns the string with all the characters in reverse order. The function should handle all Unicode characters, including special characters, emojis, and right-to-left characters. Be mindful of efficient memory usage and processing time.","solution":"def reverse_unicode_string(s): Returns the string with all characters in reverse order. Handles all Unicode characters including special characters, emojis, and right-to-left characters. return s[::-1]"},{"question":"Write a function to identify a valid IP address from a list of strings. The function should ignore any characters that are not numbers or periods and check whether the IP address is valid according to the standard IPv4 rules. A valid IP address must have four numbers separated by periods, each number cannot be greater than 255, and it cannot have leading zeros unless the number itself is zero.","solution":"import re def is_valid_ip(ip): Validates if the given string is a valid IPv4 address. parts = ip.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit() or (part.startswith('0') and len(part) > 1) or not 0 <= int(part) <= 255: return False return True def extract_valid_ips(strings): Extracts valid IP addresses from a list of strings. valid_ips = [] for s in strings: cleaned_str = re.sub(r'[^0-9.]', '', s) if is_valid_ip(cleaned_str): valid_ips.append(cleaned_str) return valid_ips"},{"question":"Can you write a Python program that simulates a fox and rabbit population dynamics? The program should take in three command line arguments: the initial population of rabbits, the initial population of foxes, and the number of iterations to simulate. The growth rate for rabbits should be 0.25, and the death rate for rabbits that is dependent on the fox population should be 0.01. The growth rate for foxes that is dependent on the rabbit population should be 0.02, and the death rate for foxes should be 0.2. The program should simulate the interactions over the specified number of iterations and output the number of rabbits and foxes at each iteration.","solution":"def simulate_population(rabbits, foxes, iterations): Simulates the population dynamics of rabbits and foxes. Args: rabbits (int): Initial population of rabbits. foxes (int): Initial population of foxes. iterations (int): Number of iterations to simulate. Returns: List of tuples: Each tuple contains the population of rabbits and foxes at each iteration. # Parameters for growth and death rates rabbit_growth_rate = 0.25 rabbit_death_rate_per_fox = 0.01 fox_growth_rate_per_rabbit = 0.02 fox_death_rate = 0.2 populations = [] for _ in range(iterations): new_rabbits = rabbits * (1 + rabbit_growth_rate) - rabbit_death_rate_per_fox * rabbits * foxes new_foxes = foxes * (1 - fox_death_rate) + fox_growth_rate_per_rabbit * rabbits * foxes # Update populations for next iteration rabbits = max(new_rabbits, 0) # Avoid negative population foxes = max(new_foxes, 0) # Avoid negative population populations.append((int(rabbits), int(foxes))) return populations"},{"question":"Write a python code to print all 3-digit narcissistic numbers.","solution":"def narcissistic_numbers(): Returns a list of all 3-digit narcissistic numbers. A 3-digit narcissistic number is a number that is equal to the sum of the cubes of its digits. result = [] for num in range(100, 1000): digits = [int(d) for d in str(num)] if sum(d ** 3 for d in digits) == num: result.append(num) return result # List of narcistic numbers to be printed print(narcissistic_numbers())"},{"question":"Write a script in Python that renames multiple files in a directory at once. The script should take an input string from the user and replace all occurrences of the input string in the file names of 'my_folder' directory with a specified new string. The script should not only display the changes but should also record the changes in a log file for future reference.","solution":"import os def rename_files_in_directory(directory, old_string, new_string, log_file): Renames files in the given directory by replacing occurrences of old_string with new_string. Logs the changes in a log_file. if not os.path.isdir(directory): raise ValueError(\\"Provided directory does not exist.\\") with open(log_file, 'w') as log: for filename in os.listdir(directory): if old_string in filename: new_filename = filename.replace(old_string, new_string) old_file_path = os.path.join(directory, filename) new_file_path = os.path.join(directory, new_filename) os.rename(old_file_path, new_file_path) log.write(f\\"Renamed {filename} to {new_filename}n\\") print(f\\"Renaming complete. Log saved to {log_file}\\") # Usage: # directory = \\"my_folder\\" # old_string = \\"old_part\\" # new_string = \\"new_part\\" # log_file = \\"changes_log.txt\\" # rename_files_in_directory(directory, old_string, new_string, log_file)"},{"question":"Write a Python function that accepts an integer n and returns a nxn numpy array filled with sequentially ordered integers starting from 1. Each subsequent integer should be placed in the next available cell when moving along the array from left to right and top to bottom. Ensure your solution has a time complexity better than O(n^2).","solution":"import numpy as np def create_sequential_array(n): Returns an nxn numpy array filled with sequentially ordered integers starting from 1. Parameters: n (int): The size of the array. Returns: numpy.ndarray: An nxn array filled with sequential integers. return np.arange(1, n*n+1).reshape(n, n)"},{"question":"Define a Python function that finds the kth smallest unique prime number in a given list of integers, where k is a positive integer less than or equal to the total number of unique prime numbers in the list. The function should return the kth smallest unique prime number, excluding any non-prime numbers. If there are fewer than k unique prime numbers in the list, the function should raise a ValueError.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def kth_smallest_unique_prime(numbers, k): Returns the kth smallest unique prime number in the list of numbers. Raises ValueError if there are fewer than k unique prime numbers. unique_primes = sorted(set(filter(is_prime, numbers))) if len(unique_primes) < k: raise ValueError(\\"Fewer than {} unique prime numbers\\".format(k)) return unique_primes[k - 1]"},{"question":"Can you write a Python function to parse a string containing log data from a server? The log entry string is in the following format: \\"[timestamp] [logLevel] [message]\\". The timestamp is in the format \\"YYYY-MM-DD HH:MM:SS\\", the log level is either \\"INFO\\", \\"WARNING\\", or \\"ERROR\\", and the message is text that varies in length. The function should return the parsed log entry as a dictionary with keys \\"timestamp\\", \\"logLevel\\", and \\"message\\".","solution":"def parse_log_entry(log_entry): Parses a log entry string into a dictionary with keys \\"timestamp\\", \\"logLevel\\", and \\"message\\". Parameters: log_entry (str): The log entry string in the format \\"[timestamp] [logLevel] [message]\\". Returns: dict: A dictionary with keys \\"timestamp\\", \\"logLevel\\", and \\"message\\". timestamp_end_idx = log_entry.find(']') + 1 timestamp = log_entry[1:timestamp_end_idx - 1] remaining_log = log_entry[timestamp_end_idx + 1:] log_level_end_idx = remaining_log.find(']') + 1 log_level = remaining_log[1:log_level_end_idx - 1] message = remaining_log[log_level_end_idx + 1:] return { \\"timestamp\\": timestamp, \\"logLevel\\": log_level, \\"message\\": message.strip() }"},{"question":"Write a code snippet in Python that demonstrates the concept of function overloading.","solution":"from functools import singledispatch @singledispatch def process(data): raise NotImplementedError(\\"Unsupported type\\") @process.register(int) def _(data): return f\\"Processing integer: {data}\\" @process.register(str) def _(data): return f\\"Processing string: {data}\\" @process.register(list) def _(data): return f\\"Processing list: {data}\\" @process.register(dict) def _(data): return f\\"Processing dictionary: {len(data)} items\\""},{"question":"Design a Python function snippet to Transform High Hygiene in shared spaces: Maintaining Personal Hygiene in Shared Spaces for Analysis for Beginners. Implement if/else or switch/case statements to handle different conditions related to the Responsibility. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def maintain_hygiene(role): Returns hygiene instructions based on the given role. Parameters: role (str): The role of the person in the shared space. Returns: str: Hygiene instructions based on the provided role. if role == \\"cleaner\\": # Cleaners are responsible for thorough cleaning tasks. return \\"Ensure all surfaces are disinfected and trash is emptied.\\" elif role == \\"employee\\": # Employees should maintain basic hygiene practices. return \\"Wash hands regularly, keep your workspace tidy, and properly dispose of personal trash.\\" elif role == \\"manager\\": # Managers have both personal and monitoring responsibilities. return \\"Lead by example, ensure employees follow hygiene protocols, and organize regular cleaning schedules.\\" elif role == \\"visitor\\": # Visitors should maintain basic hygiene and respect the shared space. return \\"Use hand sanitizers at entry points and dispose of any trash in designated bins.\\" else: # Default case for undefined roles. return \\"Role not recognized. Please follow general hygiene practices like washing hands and avoiding close contact.\\" # Note: Add any additional roles and specifications as needed."},{"question":"Add an element to the beginning of a Python list and ensure the list remains sorted in ascending order. You can accomplish this by using the \`bisect\` module in Python, which provides support for maintaining a list in sorted order without having to sort the list after each insertion.","solution":"import bisect def add_element_sorted(lst, element): Adds an element to the beginning of the list and ensures the list remains sorted in ascending order. Parameters: lst (list): The list to which the element is to be added. element (any): The element to be added to the list. Returns: list: The list with the new element added, and still sorted in ascending order. bisect.insort(lst, element) return lst"},{"question":"How can you sort a list of integers by their absolute value in Python, without using any built-in sorting functions or methods? Additionally, you are not allowed to use any external sorting algorithms or libraries. Your solution should have a time complexity of O(n^2) and a space complexity of O(1).","solution":"def sort_by_absolute_value(arr): Sorts the given list of integers by their absolute value using a simple sorting algorithm with O(n^2) complexity. :param arr: List of integers. :return: List of integers sorted by their absolute value. n = len(arr) # Simple Bubble Sort implementation for i in range(n): for j in range(0, n-i-1): if abs(arr[j]) > abs(arr[j+1]): arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Given a binary tree data structure, write a program to find the maximum depth of the tree. Additionally, implement a function to validate if the tree is a valid binary search tree (BST).","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def max_depth(root): Returns the maximum depth of the binary tree. if not root: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1 def is_valid_bst(root, left=float('-inf'), right=float('inf')): Validates if the binary tree is a binary search tree (BST). if not root: return True if not (left < root.value < right): return False return is_valid_bst(root.left, left, root.value) and is_valid_bst(root.right, root.value, right)"},{"question":"How can I use Python to create a fictitious social media platform that allows users to create posts, comment on posts, and like/dislike posts?","solution":"class User: def __init__(self, username): self.username = username self.posts = [] def create_post(self, content): post = Post(self, content) self.posts.append(post) return post class Post: def __init__(self, user, content): self.user = user self.content = content self.comments = [] self.likes = 0 self.dislikes = 0 def add_comment(self, user, comment_text): comment = Comment(user, comment_text) self.comments.append(comment) return comment def like(self): self.likes += 1 def dislike(self): self.dislikes += 1 class Comment: def __init__(self, user, content): self.user = user self.content = content"},{"question":"Write a function to analyze a given list of loan applications and return a dictionary with the number of approved, rejected, and pending applications. Each application in the list is represented as a dictionary with 'Approved', 'Rejected', and 'Pending' as possible states. Additionally, include a piece of erroneous code and explain why it is wrong.","solution":"def analyze_loan_applications(applications): Analyzes the given list of loan applications and returns a dictionary with the number of approved, rejected, and pending applications. Args: applications (list): List of dictionaries representing loan applications. Each dictionary contains a 'status' key with one of the following values: 'Approved', 'Rejected', 'Pending'. Returns: dict: Dictionary with keys 'Approved', 'Rejected', 'Pending' and their respective counts as values. # Initialize counts result = {'Approved': 0, 'Rejected': 0, 'Pending': 0} # Iterate over each application and count the status for application in applications: status = application.get('status') if status in result: result[status] += 1 return result # Erroneous Code: # def analyze_loan_applications_erroneous(applications): # result = {} # for application in applications: # status = application['status'] # if status in result: # result[status] += 1 # else: # result[status] = 1 # return result # # Explanation: # The erroneous code does not initialize the counts for 'Approved', 'Rejected', # and 'Pending'. It increments counts only if they are present in the result dictionary, # otherwise, it initializes the count. This could lead to inconsistency if the status # is not one of 'Approved', 'Rejected', or 'Pending'."},{"question":"Devise a method or function that is capable of rearranging the characters in a provided string such that every following character is positioned two places after its initial location. The string we're focusing on for this task is specifically \\"Hello\\".","solution":"def rearrange_characters(s: str) -> str: Rearranges the characters in the given string such that every character is placed two positions after its initial location. If the length of the string is n, the resulting string will consider wrapping around the end to the start of the string. n = len(s) result = [''] * n for i in range(n): new_position = (i + 2) % n result[new_position] = s[i] return ''.join(result) # Example usage specific to the given string \\"Hello\\": rearranged_string = rearrange_characters(\\"Hello\\")"},{"question":"Develop a function that not only leverages the Insertion Sort methodology to organise an array of numerical values, but also accepts a secondary array as input. This secondary array works as a 'priorities' list, indicating the order in which numbers should be sorted in the first array, regardless of their magnitude.","solution":"def insertion_sort_with_priorities(values, priorities): Sorts the \`values\` array using insertion sort, but based on the order provided by \`priorities\`. Parameters: values (list of int): The list of integers to be sorted. priorities (list of int): The priority list determining the sorting order. Returns: list of int: The sorted list of integers based on the priorities. priority_map = {val: i for i, val in enumerate(priorities)} for i in range(1, len(values)): key = values[i] j = i - 1 # Find position to insert current key based on priority while j >= 0 and priority_map[values[j]] > priority_map[key]: values[j + 1] = values[j] j -= 1 values[j + 1] = key return values"},{"question":"Read the YAML string provided and convert it into a Python dictionary. After conversion, implement a function to check if the dictionary contains a certain key and if the value attributed to this key meets a certain condition (can be an integer, string, list, or dictionary). Demonstrate your solution using the check function on the sample YAML string.","solution":"import yaml def yaml_to_dict(yaml_str): Converts a YAML string to a Python dictionary. return yaml.safe_load(yaml_str) def check_key_value(yaml_dict, key, condition): Checks if the dictionary contains the key and if its value meets a given condition. Args: - yaml_dict (dict): The dictionary to check. - key (str): The key to look for in the dictionary. - condition (function): A function that takes the value of the key and returns True if the condition is met. Returns: - bool: True if the key exists and the value meets the condition, otherwise False. if key in yaml_dict: return condition(yaml_dict[key]) return False # Example usage: yaml_string = name: John Doe age: 30 email: john.doe@example.com children: - name: Jane Doe age: 10 - name: Joe Doe age: 5 dictionary = yaml_to_dict(yaml_string) # Checking if the key 'age' exists and its value is greater than 25 condition_age = lambda x: isinstance(x, int) and x > 25 age_check = check_key_value(dictionary, 'age', condition_age)"},{"question":"Write a function that generates a dictionary mapping each Keytype with a description of \\"What it is\\". The function should validate the input list to ensure that it only contains the allowed keytypes ('bronze', 'silver', 'gold', 'platinum', 'diamond') and raise an exception if an invalid keytype is found. The function should also check for duplicate keytypes in the input list and raise an exception if any duplicates are found. If the input list is empty, the function should return an empty dictionary.","solution":"def generate_keytype_dict(keytypes): Generates a dictionary mapping each keytype with a description. Parameters: keytypes (list): A list of keytypes. Returns: dict: A dictionary mapping keytypes to their descriptions. Raises: ValueError: If an invalid keytype or duplicates are found in the input list. # Allowed keytypes mapping to their descriptions allowed_keytypes = { 'bronze': 'A lower tier keytype.', 'silver': 'A mid-tier keytype.', 'gold': 'A high-tier keytype.', 'platinum': 'A premium keytype.', 'diamond': 'An elite keytype.' } # Validate input list for allowed keytypes and duplicates unique_keytypes = set() for keytype in keytypes: if keytype not in allowed_keytypes: raise ValueError(f\\"Invalid keytype found: {keytype}\\") if keytype in unique_keytypes: raise ValueError(f\\"Duplicate keytype found: {keytype}\\") unique_keytypes.add(keytype) # Generate the dictionary return {keytype: allowed_keytypes[keytype] for keytype in keytypes}"},{"question":"Given an API endpoint, write a Python function that performs a GET request and returns the response in JSON format. However, you are not allowed to use any third-party libraries or modules for making the HTTP request. You have to implement the entire functionality from scratch using only built-in Python modules.","solution":"import socket import ssl def http_get_request(url): Perform a GET request to the specified URL and return the response in JSON format. Args: url (str): The URL to perform the GET request on. Returns: dict: The JSON response from the server. # Split the URL into components protocol, _, host, path = url.split('/', 3) path = '/' + path # Determine the port based on protocol (http or https) port = 443 if protocol == 'https:' else 80 # Create a socket sock = socket.create_connection((host, port)) # Wrap socket with SSL if https protocol if protocol == 'https:': context = ssl.create_default_context() sock = context.wrap_socket(sock, server_hostname=host) # Generate the HTTP GET request header request = f\\"GET {path} HTTP/1.1rnHost: {host}rnConnection: closernrn\\" sock.sendall(request.encode('utf-8')) # Receive the response response = b\\"\\" while True: chunk = sock.recv(4096) if not chunk: break response += chunk # Close the socket sock.close() # Split response to header and body header, body = response.split(b\\"rnrn\\", 1) # Convert body to a JSON dict import json return json.loads(body.decode('utf-8'))"},{"question":"Can you help me write a Python function to count the number of vowels in a given string? The function should ignore case sensitivity and consider only English vowels.","solution":"def count_vowels(s): Returns the number of vowels in the given string. The function is case insensitive and only considers English vowels (a, e, i, o, u). vowels = set(\\"aeiou\\") s = s.lower() # Convert the string to lower case to handle case insensitivity return sum(1 for char in s if char in vowels)"},{"question":"Reverse the order of a list of strings without using any built-in function like reverse(). This should be achieved by implementing your own function.","solution":"def reverse_list(lst): Returns a new list that is the reverse of the input list \`lst\`. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Implement a function in Python that inserts a zero (0) after every odd element in a given list of integers. However, there is a bug in the code that needs to be fixed. Also, without using any extra space, the function should return the modified list in-place.","solution":"def insert_zero_after_odds(lst): Inserts zero (0) after every odd element in the list of integers. Parameters: - lst: List[int] - A list of integers Returns: - List[int] - The modified list with 0 inserted after every odd element. i = 0 while i < len(lst): if lst[i] % 2 != 0: lst.insert(i + 1, 0) i += 1 # Skip over the inserted 0 i += 1 return lst"},{"question":"Use the re module in Python to extract all the numbers greater than 5 from a given string that also contains at least one special character. The input string can be of any length and can contain multiple occurrences of special characters. The special characters can be any non-alphanumeric character. Return the extracted numbers as a list, sorted in descending order. If there are no numbers greater than 5 in the string, return an empty list.","solution":"import re def extract_numbers_greater_than_five(s): Extracts all numbers greater than 5 from a given string that also contains at least one special character, and returns them sorted in descending order. Parameters: s (str): Input string. Returns: List[int]: A list of numbers greater than 5, sorted in descending order. if not any(char for char in s if not char.isalnum() and not char.isspace()): return [] # Return empty list if no special characters are present # Find all numbers in the string numbers = re.findall(r'd+', s) # Convert to integers and filter out numbers <= 5 greater_than_five = [int(num) for num in numbers if int(num) > 5] # Return the numbers sorted in descending order return sorted(greater_than_five, reverse=True)"},{"question":"Write code for a for loop to iterate over a list of integers and multiply each number in the list by 2. Output the modified list. Also, form your code to be a function with the input being the list, make sure to handle any non-integer values gracefully.","solution":"def multiply_by_two(input_list): This function takes a list of integers as input and returns a new list with each integer multiplied by 2. If the list contains non-integer values, those are ignored in the output. Parameters: input_list (list): A list of elements to be processed Returns: list: A new list with each integer multiplied by 2 output_list = [] for item in input_list: if isinstance(item, int): output_list.append(item * 2) else: continue return output_list"},{"question":"How can I create a Python function that computes the sum of the numbers at even indices in an input list and also at odd indices separately? I also need to compare these sums and return a specific string based on which sum is greater or if they are equal. For instance, if the sum of numbers at even indices is greater, I should get \\"Sum of elements at even indices is greater\\". Please provide a list of numbers as input to showcase how the function works.","solution":"def compare_sums_of_even_and_odd_indices(numbers): Computes the sum of numbers at even indices and at odd indices in the input list. Compares these sums and returns a string indicating which sum is greater or if they are equal. Args: numbers (list): List of numbers. Returns: str: A string message indicating the comparison of sums. sum_even_indices = sum(numbers[i] for i in range(0, len(numbers), 2)) sum_odd_indices = sum(numbers[i] for i in range(1, len(numbers), 2)) if sum_even_indices > sum_odd_indices: return \\"Sum of elements at even indices is greater\\" elif sum_odd_indices > sum_even_indices: return \\"Sum of elements at odd indices is greater\\" else: return \\"Sum of elements at even and odd indices are equal\\""},{"question":"Plot piecewise functions using matplotlib in Python. Your function should handle an arbitrary number of intervals and function expressions input by the user. Also, the code should accommodate functions that are not continuous and those which have jump discontinuities.","solution":"import matplotlib.pyplot as plt import numpy as np def plot_piecewise(intervals_funcs): Plots a piecewise function using given intervals and function expressions. Parameters: intervals_funcs (list of tuples): Each tuple contains: - interval (tuple): A tuple of two numbers defining the start and end of the interval. - func (callable): A function that takes a numpy array and returns a numpy array. plt.figure() for interval, func in intervals_funcs: x = np.linspace(interval[0], interval[1], 400) y = func(x) plt.plot(x, y, label=f\\"{func.__name__} in {interval}\\") plt.xlabel('x') plt.ylabel('f(x)') plt.title('Piecewise Functions') plt.legend() plt.grid(True) plt.show()"},{"question":"Please write a Python function that counts the number of occurrences of each word in a given sentence and returns the result as a dictionary. The function should ignore case sensitivity and punctuation marks.","solution":"import re from collections import Counter def count_word_occurrences(sentence): Counts the number of occurrences of each word in a given sentence. Ignores case sensitivity and punctuation marks. Parameters: sentence (str): A sentence in which to count word occurrences. Returns: dict: A dictionary where keys are unique words and values are their count. # Remove punctuation and lower the case cleaned_sentence = re.sub(r'[^ws]', '', sentence).lower() # Split the sentence into words words = cleaned_sentence.split() # Count occurrences of each word using Counter word_count = Counter(words) return dict(word_count)"},{"question":"Create a Python function to find the shortest path from the bottom left to the top right of an m x n grid using only right and up movements.","solution":"def shortestPath(m, n): Returns the number of shortest paths from the bottom left to the top right of an m x n grid using only right and up movements. # Create a 2D array to store the number of paths to each cell dp = [[0] * n for _ in range(m)] # Set the bottom row and left column to 1 because there's only one way to reach those cells for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Fill the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The top right cell has the number of shortest paths return dp[m-1][n-1]"},{"question":"Write a Python code to count the number of uppercase characters in the given string. The string should contain at least one lowercase character, at least one uppercase character, and at least one special character (!,@,#,,%,&,*). The code should have a time complexity of O(n) and should not use any built-in functions or libraries for character checking.","solution":"def count_uppercase(s: str) -> int: Count the number of uppercase characters in the given string. :param s: A string which contains at least one lowercase character, at least one uppercase character, and at least one special character. :return: The number of uppercase characters in the string. count = 0 for char in s: if 'A' <= char <= 'Z': count += 1 return count"},{"question":"Write a code to classify emails as spam or ham using Naive Bayes algorithm with Laplace smoothing.","solution":"import numpy as np from collections import defaultdict class NaiveBayesClassifier: def __init__(self): self.spam_word_counts = defaultdict(lambda: 0) self.ham_word_counts = defaultdict(lambda: 0) self.spam_total = 0 self.ham_total = 0 self.spam_emails = 0 self.ham_emails = 0 def train(self, emails, labels): for email, label in zip(emails, labels): if label == 'spam': self.spam_emails += 1 for word in email.split(): self.spam_word_counts[word] += 1 self.spam_total += 1 else: self.ham_emails += 1 for word in email.split(): self.ham_word_counts[word] += 1 self.ham_total += 1 def predict(self, email): spam_prob = np.log(self.spam_emails / (self.spam_emails + self.ham_emails)) ham_prob = np.log(self.ham_emails / (self.spam_emails + self.ham_emails)) for word in email.split(): spam_prob += np.log((self.spam_word_counts[word] + 1) / (self.spam_total + len(self.spam_word_counts))) ham_prob += np.log((self.ham_word_counts[word] + 1) / (self.ham_total + len(self.ham_word_counts))) if spam_prob > ham_prob: return 'spam' else: return 'ham'"},{"question":"Given a string and two parameters a and b, generate a new string containing the characters from index a to b in reverse order. However, you are not allowed to use any built-in functions or methods that directly reverse a string or substring. You must implement your own algorithm to reverse the substring.","solution":"def reverse_substring(s, a, b): Returns a new string containing the characters from index a to b in reverse order. if a < 0 or b >= len(s) or a > b: raise ValueError(\\"Invalid indices\\") new_string = list(s) while a < b: new_string[a], new_string[b] = new_string[b], new_string[a] a += 1 b -= 1 return ''.join(new_string)"},{"question":"Below is an example of a Python class with methods that incorrectly implement a stack data structure and a method to find the minimum element.Your task is to rewrite this code so that it adds a method to check for the 'minimum' element in O(1) time complexity.","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x: int) -> None: Push element x onto stack. self.stack.append(x) # If min_stack is empty or the new element is smaller or equal to the current minimum, push it onto min_stack. if not self.min_stack or x <= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -> None: Removes the element on top of the stack. if self.stack: top = self.stack.pop() # If the popped element is the same as the minimum element, pop it from min_stack as well. if top == self.min_stack[-1]: self.min_stack.pop() def top(self) -> int: Get the top element. return self.stack[-1] if self.stack else None def get_min(self) -> int: Retrieve the minimum element in the stack. return self.min_stack[-1] if self.min_stack else None"},{"question":"Given a 2D array of integers, write a function that calculates the minimum number of edits required to make each row and column monotonically increasing. Your solution should consider operations where you can change one element to any other in a single edit.","solution":"def min_edits_to_monotonic(matrix): Returns the minimum number of edits required to make each row and column monotonically increasing. def min_edits_to_increase_list(arr): n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] >= arr[j]: dp[i] = max(dp[i], dp[j] + 1) return n - max(dp) row_edits = 0 for row in matrix: row_edits += min_edits_to_increase_list(row) col_edits = 0 for col in zip(*matrix): col_edits += min_edits_to_increase_list(col) return row_edits + col_edits"},{"question":"I want to sort a list of integer numbers and strings in Python. Can you help me write a hybrid sorting algorithm that can handle both types? The sorting should consider integers first in ascending order and then sort strings alphabetically.","solution":"def hybrid_sort(lst): Sort a list of integers and strings such that integers come first in ascending order followed by strings in alphabetical order. integers = sorted([x for x in lst if isinstance(x, int)]) strings = sorted([x for x in lst if isinstance(x, str)]) return integers + strings"},{"question":"Create a Python function that generates a dictionary. The dictionary keys should be strings that are slices of a main string parameter. The values in the dictionary should be integer counts of the frequency that each substring (key) appears in the main string. Additionally, implement a portion where given a specific substring, your function should return a boolean if the substring exists within the generated dictionary and its frequency.","solution":"def generate_substring_dict(main_string): Generates a dictionary with substrings of the main string as keys and their frequency count as values. substring_dict = {} # Iterate over all possible substrings for i in range(len(main_string)): for j in range(i + 1, len(main_string) + 1): substring = main_string[i:j] if substring in substring_dict: substring_dict[substring] += 1 else: substring_dict[substring] = 1 return substring_dict def substring_exists(substring_dict, substring): Given a substring, return a boolean whether the substring exists in the dictionary and its frequency. Parameters: substring_dict (dict): The dictionary with substrings and their counts. substring (str): The substring to be checked. Returns: bool: Whether the substring exists in the dictionary. int: Frequency of the substring if it exists, otherwise 0. if substring in substring_dict: return True, substring_dict[substring] return False, 0"},{"question":"Implement a function in Python which takes an array of integers and an integer target and returns the indices of the two numbers that add up to the target.","solution":"def two_sum(nums, target): Returns the indices of the two numbers that add up to the target. Parameters: nums (List[int]): An array of integers. target (int): The target sum. Returns: List[int]: The indices of the two numbers that add up to the target. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return []"},{"question":"program a 2d twist formula for 2d matrices of numpy arrays using dirac notation but with a phase rotation function where the twist operation is still 180 degrees but with a variable overall phase, namely phi=pi*d where d is dense float in [0,1]. Test the function using valid input and edge cases.","solution":"import numpy as np def twist_2d(matrix, phi): Apply a 2D twist to a numpy matrix with an overall phase rotation. The twist operation is 180 degrees and the phase φ = π * d where d is in [0, 1]. Parameters: matrix (np.ndarray): 2D numpy array to be twisted phi (float): Phase rotation value (phi = π * d) Returns: np.ndarray: Twisted numpy matrix with phase rotation applied. if not(0 <= phi/np.pi <= 1): raise ValueError(\\"The phase parameter phi must be π times a value in [0, 1].\\") # Apply the twist (180 degree rotation) twisted_matrix = np.rot90(matrix, 2) # Apply the phase rotation phase_factor = np.exp(1j * phi) twisted_matrix = phase_factor * twisted_matrix return twisted_matrix"},{"question":"Write a function in Python that takes a list of tuples as an input and returns the second largest value among all the second elements of the tuples. Tuples in the list can contain any number of elements, but you are only interested in their second elements. Also, ensure your function can handle an array with duplicates and it should still return the second largest unique value.","solution":"def second_largest_second_element(tuples_list): Returns the second largest value among all the second elements of the tuples in the list. if not tuples_list or len(tuples_list) < 2: return None # Not enough values to determine the second largest # Extract the second elements second_elements = [t[1] for t in tuples_list if len(t) > 1] if len(second_elements) < 2: return None # Not enough valid second elements to determine the second largest unique_second_elements = list(set(second_elements)) if len(unique_second_elements) < 2: return None # Not enough unique values to determine the second largest unique_second_elements.sort(reverse=True) return unique_second_elements[1]"},{"question":"Given two integer lists, write a program to check if the two lists are permutations of each other. Additionally, ensure that the program also checks for an extra condition: for each list, create a derived list by calculating the square of each element and then check if these new lists are permutations of each other. Also, derive a list using cube operation and do the same.","solution":"def are_permutations(lst1, lst2): Check if two lists are permutations of each other. Also check if their squared and cubed derived lists are permutations of each other. def is_permutation(a, b): return sorted(a) == sorted(b) if not is_permutation(lst1, lst2): return False squared_lst1 = [x**2 for x in lst1] squared_lst2 = [x**2 for x in lst2] if not is_permutation(squared_lst1, squared_lst2): return False cubed_lst1 = [x**3 for x in lst1] cubed_lst2 = [x**3 for x in lst2] return is_permutation(cubed_lst1, cubed_lst2)"},{"question":"Create a program that utilizes binary search algorithm to search for a specific word in a text file. The program should prompt the user to input the name of the text file, the word to search for, and the maximum number of lines to search. The program should then search for the word in the first n (maximum number of lines to search) lines of the text file and return the line number(s) where the word is found. If the word is not found, the program should return a message indicating that the word was not found. The program should also handle errors such as invalid file name or non-existent file. Display the output in a user-friendly manner.","solution":"def binary_search(lines, word): Perform a binary search to find the word in the provided list of lines. left, right = 0, len(lines) - 1 result = [] while left <= right: mid = left + (right - left) // 2 if word in lines[mid]: result.append(mid + 1) # Check the surrounding lines to find all occurrences left_range, right_range = mid - 1, mid + 1 while left_range >= left: if word in lines[left_range]: result.append(left_range + 1) left_range -= 1 while right_range <= right: if word in lines[right_range]: result.append(right_range + 1) right_range += 1 break elif word < lines[mid]: right = mid - 1 else: left = mid + 1 return result def search_word_in_file(file_name, word, max_lines): Search for a specific word in the first max_lines lines of the file. try: with open(file_name, 'r') as file: lines = [line.strip() for line in file.readlines()][:max_lines] lines.sort() found_lines = binary_search(lines, word) if found_lines: return f\\"Word '{word}' found in line(s): {', '.join(map(str, found_lines))}\\" else: return f\\"Word '{word}' not found in the first {max_lines} lines.\\" except FileNotFoundError: return \\"Error: File not found.\\" except Exception as e: return f\\"Error: {str(e)}\\""},{"question":"Create a Python program to interleave two sorted lists in a zigzag pattern. The largest number from the first list must be matched with the smallest number from the second list, and vice versa. If there's a leftover number, that gets put at the end.","solution":"def interleave_zigzag(list1, list2): Interleave two sorted lists in a zigzag pattern. The largest number from list1 must matched with the smallest number from list2, and vice versa. # Sort list1 in descending order and list2 in ascending order sorted_list1 = sorted(list1, reverse=True) sorted_list2 = sorted(list2) interleaved = [] i, j = 0, 0 # Interleave elements while i < len(sorted_list1) and j < len(sorted_list2): interleaved.append(sorted_list1[i]) interleaved.append(sorted_list2[j]) i += 1 j += 1 # If there are leftover elements if i < len(sorted_list1): interleaved.extend(sorted_list1[i:]) if j < len(sorted_list2): interleaved.extend(sorted_list2[j:]) return interleaved"},{"question":"Define a function in Python to compute the union of two sets.","solution":"def union(set1, set2): Returns the union of two sets. Parameters: set1 (set): The first set. set2 (set): The second set. Returns: set: The union of the two sets. return set1.union(set2)"},{"question":"Code a Python script that converts temperatures from Fahrenheit to Celsius. The script should also include error handling to ensure that the input is a valid numerical value. If the input is not valid, the script should display an error message and ask for input again. The script should also handle cases where the input is the lowest possible temperature in Fahrenheit (-459.67°F), converting it to Celsius.","solution":"def fahrenheit_to_celsius(fahrenheit): Converts a temperature from Fahrenheit to Celsius. try: fahrenheit = float(fahrenheit) except ValueError: raise ValueError(\\"Input must be a numerical value\\") if fahrenheit < -459.67: raise ValueError(\\"Temperature cannot be below -459.67°F, which is absolute zero.\\") celsius = (fahrenheit - 32) * 5.0/9.0 return celsius"},{"question":"Build 2 functions exchange and commentary. Exchange takes a dict representing a parsed json struct and a 'From','To' string tuple and returns a dict as Values doesn't exist in the struct then create the same with default amount value as 0, similarly if the key does not exist create the same. Commentary function takes a List of records and identifier and a matching dictionary and returns a transformed dictionary which only contains the keys that match the 'identifier field and contains the 'identifier alongside pertinent fields (From,To,amt) upon merges.","solution":"def exchange(data, currency_pair): Updates the given dictionary with currency exchange information. Parameters: data (dict): The dictionary representing a parsed JSON structure. currency_pair (tuple): A tuple containing currency From and To as strings. Returns: dict: Updated dictionary with exchange information. from_currency, to_currency = currency_pair if 'currency' not in data: data['currency'] = {} if from_currency not in data['currency']: data['currency'][from_currency] = {} if to_currency not in data['currency'][from_currency]: data['currency'][from_currency][to_currency] = {'amount': 0} return data def commentary(records, identifier, match_dict): Transforms a list of records to a dictionary filtered by identifier. Parameters: records (list): List of dictionaries containing record information. identifier (str): The identifier key to filter dictionary. match_dict (dict): The dictionary to match and merge records with. Returns: dict: Transformed dictionary with filtered and merged records. result = {} for record in records: id_value = record.get(identifier) if id_value in match_dict: if id_value not in result: result[id_value] = {'identifier': id_value, 'details': []} filtered_record = {k: v for k, v in record.items() if k in match_dict[id_value]} result[id_value]['details'].append(filtered_record) return result"},{"question":"Generate a Python code to find the reverse of a given string, but you are not allowed to use any built-in string reversal methods or functions. Additionally, you should implement the reversal algorithm in a single line of code using list comprehension.","solution":"def reverse_string(s): Returns the reverse of the given string s. return ''.join([s[i] for i in range(len(s)-1, -1, -1)])"},{"question":"Create a function in Python that takes two parameters \`a\` and \`b\` and returns their product. Additionally, the function should check if the input values are integers and that their product is also an integer. If the input values are not integers, the function should raise an exception with an appropriate error message.","solution":"def multiply(a, b): Returns the product of a and b only if both are integers. Parameters: a (int): The first integer. b (int): The second integer. Returns: int: The product of a and b. Raises: ValueError: If either a or b is not an integer. if not isinstance(a, int) or not isinstance(b, int): raise ValueError(\\"Both a and b must be integers\\") return a * b"},{"question":"In Python, write a function that applies an arbitrary lambda function to every element in an arbitrary iterable (like a list or a string). The function should filter out non-integer values from the iterable before applying the lambda function. After applying the lambda function, it should compile the results into a new list which you then return. Also include error handling measures in case the iterable contains a mix of data types. Your function should not rely on any external library.","solution":"def apply_lambda(iterable, lambda_func): Applies a lambda function to every integer element in an iterable and returns a new list. Parameters: iterable (iterable): The input iterable containing mixed data types. lambda_func (function): A lambda function to apply to the integer elements. Returns: list: A new list with the results of applying the lambda function to the integer elements. if not callable(lambda_func): raise ValueError(\\"Provided lambda function is not callable\\") result = [] for item in iterable: if isinstance(item, int): try: result.append(lambda_func(item)) except Exception as e: print(f\\"An error occurred when applying lambda function: {e}\\") return result"},{"question":"Create a Python program that asks for user input of a word and displays the number of vowels and consonants in the word. The program should allow the user to continue entering words until they choose to exit by entering \\"exit\\". When the user enters a non-alphanumeric string, such as \\"!@#%^&*()\\", display an error message and prompt the user to enter a word again. The program should also ignore any leading or trailing white space when counting vowels and consonants.","solution":"def count_vowels_consonants(word): vowels = 'aeiouAEIOU' vowel_count = 0 consonant_count = 0 # Strip leading and trailing whitespace word = word.strip() # Only process words that are alphabetic if not word.isalpha(): raise ValueError(\\"The input should be a word containing alphabetic characters only!\\") for letter in word: if letter in vowels: vowel_count += 1 else: consonant_count += 1 return vowel_count, consonant_count def main(): while True: user_input = input(\\"Enter a word (type 'exit' to quit): \\").strip() if user_input.lower() == 'exit': break try: vowels, consonants = count_vowels_consonants(user_input) print(f\\"Number of vowels: {vowels}, Number of consonants: {consonants}\\") except ValueError as e: print(e) if __name__ == \\"__main__\\": main()"},{"question":"Author a Python procedure labeled 'sort_num'. The primary functionality of this routine is to take an input of an array filled with non-negative integral values and then refine this array in an ascending numerical sequence. Bear in mind, the mechanism for the arrangement should be through a sorting method entirely developed within the procedure, abstaining from the use of pre-available sort() operation or any similar python utility.","solution":"def sort_num(arr): Sorts a list of non-negative integers in ascending order using bubble sort. n = len(arr) for i in range(n - 1): for j in range(n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr"},{"question":"Please create a function that takes a character as input and prints out all words from a given dictionary that start with the input character. Additionally, the function should also print the number of occurrences of each word in a given text.","solution":"def find_words_with_prefix(dictionary, text, char): Finds and prints all words from a given dictionary that start with the input character. Additionally, prints the number of occurrences of each word in the dictionary within a given text. :param dictionary: A list of words (dictionary) :param text: A string of text to search within :param char: A character to match words against # Normalize to lowercase for case-insensitive comparison dictionary = [word.lower() for word in dictionary] text = text.lower() char = char.lower() # Create a list of words from the text text_words = text.split() # Create a dictionary to store occurrences of words word_counts = {word: text_words.count(word) for word in dictionary if word.startswith(char)} for word, count in word_counts.items(): print(f\\"{word}: {count}\\")"},{"question":"Write a function that takes two numbers and a string as parameters and returns a concatenation of the first number's representation, the string, and the second number's representation.","solution":"def concat_numbers_and_string(num1, num2, string): Returns a concatenation of the first number's representation, the string, and the second number's representation. :param num1: The first number to be concatenated. :param string: The string to be concatenated between the numbers. :param num2: The second number to be concatenated. :return: The concatenated string. return str(num1) + string + str(num2)"},{"question":"Create a python flask application that serves two separate endpoints responding to GET requests at \\"/hello\\" and \\"/goodbye\\". The application should be running on port 8080. Additionally, make sure to construct and format JSON responses for each endpoint. You must use custom HTTP status codes for each endpoint as well.","solution":"from flask import Flask, jsonify app = Flask(__name__) @app.route('/hello', methods=['GET']) def hello(): response = { 'message': 'Hello, world!' } return jsonify(response), 200 @app.route('/goodbye', methods=['GET']) def goodbye(): response = { 'message': 'Goodbye, world!' } return jsonify(response), 201 if __name__ == '__main__': app.run(port=8080)"},{"question":"Given two strings, write a Python function that finds the common letters between them. However, your function should ensure that the comparison is case-insensitive and it should only consider alphabets. Your function should return a set of common alphabets. Ensure that your solution is efficient and can handle strings of large lengths.","solution":"def find_common_letters(str1, str2): Finds common letters between two strings, case-insensitive and considers only alphabets. Args: str1 (str): First input string. str2 (str): Second input string. Returns: set: A set of common alphabets. # Convert strings to lowercase and create sets of letters set1 = set(filter(str.isalpha, str1.lower())) set2 = set(filter(str.isalpha, str2.lower())) # Find the intersection of the two sets common_letters = set1.intersection(set2) return common_letters"},{"question":"Implement a function which will take a list of numbers as an input and return a sorted list. Your implementation should use an optimization such as the TimSort algorithm, and should have a time complexity of O(n log n) and space complexity of O(n).","solution":"def optimized_sort(nums): Sorts a list of numbers using Python's built-in sort, which is an implementation of the TimSort algorithm. Parameters: nums (list): A list of numbers to be sorted. Returns: list: A sorted list of numbers. return sorted(nums)"},{"question":"I'm trying to initialize a dictionary from a given list but with specific indices grouped together in the dictionary. For instance, I have a list 'a' and I want indices 0 and 1 to be combined in the value for key 'x', and then indices 2, 3, and 4 to be combined in the value for key 'y'. Can you help me achieve this with Python?","solution":"def initialize_dict_from_list(a): Returns a dictionary initialized from the list 'a' where specific indices are grouped together in the values for keys 'x' and 'y'. Args: a (list): The list from which to initialize the dictionary. Returns: dict: The initialized dictionary with grouped values. return {'x': a[0:2], 'y': a[2:5]}"},{"question":"Find the nth largest odd number in an array using a Python function. Also provide a piece of erroneous code as a reference for the candidate to understand common pitfalls during implementation.","solution":"def nth_largest_odd_number(arr, n): Returns the nth largest odd number in the array. :param arr: List of integers :param n: The position of the largest odd number to find :return: The nth largest odd number, None if not enough odd numbers # Filter out odd numbers odd_numbers = [x for x in arr if x % 2 != 0] # Sort odd numbers in descending order odd_numbers.sort(reverse=True) # Check if we have enough odd numbers if len(odd_numbers) >= n: return odd_numbers[n-1] else: return None # Erroneous implementation for reference def erroneous_nth_largest_odd_number(arr, n): An incorrect implementation to find the nth largest odd number in the array. This implementation does not correctly handle sorting and filtering. # Incorrect filtering (including even numbers) odd_numbers = [x for x in arr if x % 2 == 0] # Incorrect sorting (ascending instead of descending) odd_numbers.sort() # Incorrect index handling (may cause out of index errors) if len(odd_numbers) >= n: return odd_numbers[n] else: return None"},{"question":"Create a function that takes a list \`xs\` and an integer \`k\` as input. The function should mutate the list such that each element in the list is replaced by the sum of its neighbors, excluding the element \`k\`. After the first pass, the process should be repeated \`k\` times using the newly updated list. Return the final list after all the operations.","solution":"def sum_neighbors(xs, k): Replace elements by the sum of their neighbors, k times. Parameters: xs (list): A list of integers k (int): Number of times to perform the operation Returns: List: Modified list after k operations if len(xs) < 2: return xs # List too small to have neighbors for _ in range(k): new_xs = [] for i in range(len(xs)): if i == 0: new_xs.append(xs[1]) elif i == len(xs) - 1: new_xs.append(xs[-2]) else: new_xs.append(xs[i - 1] + xs[i + 1]) xs = new_xs return xs"},{"question":"Using the list [4,3,2,1], develop a piece of Python programming code which inversely organizes the sequence into [1,2,3,4], without utilizing Python's built-in reverse function.","solution":"def reverse_sort_list(lst): Organizes the given list in ascending order without using Python's built-in reverse function. Parameters: lst (list): A list of integers to be sorted in ascending order. Returns: list: A sorted list in ascending order. n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"question":"Modify a given Python function that currently takes a list of integers and finds the average. Add functionality to this function so it calculates the standard deviation. Furthermore, the function should verify if the input list contains only integers and has a length of at least 30, complying with the CLT (Central Limit Theorem). If not, the function should return an appropriate error message. The given list for this function does not only consist of integers, and may also include other data types.","solution":"import math def calculate_average_and_stddev(numbers): This function calculates the average and standard deviation of a list of integers. It ensures the input list contains only integers and has a length of at least 30. :param numbers: List of integers :return: Tuple containing average and standard deviation, or an appropriate error message if not all(isinstance(num, int) for num in numbers): return \\"Error: List must contain only integers.\\" if len(numbers) < 30: return \\"Error: List must contain at least 30 integers.\\" n = len(numbers) mean = sum(numbers) / n variance = sum((x - mean) ** 2 for x in numbers) / n stddev = math.sqrt(variance) return mean, stddev"},{"question":"Given a positive integer number, generate the Fibonacci series up to the given number using recursion. Additionally, implement a check to validate that the input is indeed a positive integer.","solution":"def fibonacci_series(n, a=0, b=1, series=None): Generates the Fibonacci series up to the given number n using recursion. Also checks if the input is a positive integer. Parameters: n (int): The length of Fibonacci series to generate. a (int): The first number in Fibonacci sequence. Default is 0. b (int): The second number in Fibonacci sequence. Default is 1. series (list): List to hold the Fibonacci series. Default is None. Returns: list: The Fibonacci series up to the given number n. if series is None: series = [] if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") if len(series) == n: return series return fibonacci_series(n, b, a + b, series + [a])"},{"question":"Develop a program that uses whatever default sort function your chosen language provides, to sort an array. However, the key feature of your program should be an independently crafted, additional function that checks the correctness of the sorted array by comparing each pair of sequential elements to confirm that they maintain the proper order.","solution":"def sort_array(arr): Sorts an array using the default sort function. return sorted(arr) def is_sorted_correctly(arr): Checks if an array is sorted correctly by comparing each pair of sequential elements. for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: return False return True"},{"question":"Write a python function that takes in a string s, the function checks if the string contains at least two different vowels and three different consonants. The function should also return True if this condition is met, otherwise it returns False. Additionally, validate the function with provided test cases.","solution":"def has_vowels_and_consonants(s): This function checks if the input string contains at least two different vowels and three different consonants. Returns True if the conditions are met, otherwise False. vowels = set('aeiouAEIOU') consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ') found_vowels = set() found_consonants = set() for char in s: if char in vowels: found_vowels.add(char.lower()) elif char in consonants: found_consonants.add(char.lower()) if len(found_vowels) >= 2 and len(found_consonants) >= 3: return True return False"},{"question":"Write a complex for loop in Python that iterates over a list of integers and prints only the prime numbers from it. The loop should also terminate when it encounters the first composite number in the list. Additionally, the loop should only consider positive integers greater than 1 as prime numbers.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def print_primes_terminate_on_composite(numbers): Iterates over a list of integers and prints prime numbers. Terminates on encountering the first composite number. for number in numbers: if is_prime(number): print(number) else: break"},{"question":"Use the given input data to create a Python dictionary. In addition, write a function that performs operations on the dictionary, including sorting by population in descending order, finding the country with the largest population, and the country with the smallest area. The function should return these results in a formatted output.","solution":"def create_country_data(data): Creates a dictionary from the given input data. Args: data (list of tuple): List containing tuples where each tuple contains (Country, Population, Area). Returns: dict: A dictionary where keys are country names and values are dictionaries containing population and area. country_data = {} for country, population, area in data: country_data[country] = {'population': population, 'area': area} return country_data def analyze_country_data(data): Analyzes the country data to sort by population, find the country with the largest population and the smallest area. Args: data (dict): Dictionary containing country data. Returns: dict: A dictionary containing sorted population list, country with largest population, and smallest area. sorted_by_population = sorted(data.items(), key=lambda x: x[1]['population'], reverse=True) country_with_largest_population = sorted_by_population[0][0] country_with_smallest_area = min(data.items(), key=lambda x: x[1]['area'])[0] return { \\"sorted_by_population\\": sorted_by_population, \\"largest_population\\": country_with_largest_population, \\"smallest_area\\": country_with_smallest_area }"},{"question":"Given the dietary needs of hippos, elephants, and giraffes, design an algorithm, using binary search, to efficiently find a specific fruit, \\"Oblongia\\", in a sorted list of potential foods. Note that the \\"Oblongia\\" is a fictional fruit and does not exist in reality. Then, implement the solution using a programming language of your choice.","solution":"def binary_search(arr, target): Perform a binary search to find the target item in the sorted list arr. Parameters: arr (list): Sorted list of items. target: Item to search for in the list. Returns: bool: True if the target is found, False otherwise. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 mid_val = arr[mid] if mid_val == target: return True elif mid_val < target: left = mid + 1 else: right = mid - 1 return False def find_oblongia(food_list): Checks if \\"Oblongia\\" is present in the sorted list of foods using binary search. Parameters: food_list (list): Sorted list of potential foods. Returns: bool: True if \\"Oblongia\\" is found, False otherwise. return binary_search(food_list, \\"Oblongia\\")"},{"question":"Write a function using only basic string operations (no use of in-built substring functions or regular expressions) to determine if one string is a substring of another. The code should be optimized for speed and memory usage.","solution":"def is_substring(str1, str2): Check if str2 is a substring of str1. str1_len = len(str1) str2_len = len(str2) if str2_len == 0: return True if str1_len == 0 or str2_len > str1_len: return False for i in range(str1_len - str2_len + 1): for j in range(str2_len): if str1[i + j] != str2[j]: break else: return True return False"},{"question":"I need an advanced Python function to match client's search request exactly. The function should return a \`True\` value if the two input strings match, ignoring case and whitespace. The function must also handle special characters, punctuation, and non-English alphabets with diacritical marks, ensuring they do not affect the match. The function should run optimally, addressing memory and time constraints while not requiring additional packages to be imported.","solution":"def are_strings_matching(str1, str2): Returns True if the two input strings match, ignoring case and whitespace. It also handles special characters, punctuation, and non-English alphabets with diacritical marks. :param str1: First string for comparison. :param str2: Second string for comparison. :return: Boolean indicating if the strings match. # Normalize by converting to lower case and removing all spaces normalize = lambda x: ''.join(x.lower().split()) return normalize(str1) == normalize(str2)"},{"question":"Write a function to search the given element in a rotated sorted array and return its index. If the element is not present in the array, return -1. The array is initially sorted in ascending order and then rotated at some pivot unknown to you beforehand.","solution":"def search_in_rotated_array(nums, target): Searches the given element 'target' in rotated sorted array 'nums' and returns its index. If the element is not present, returns -1. :param nums: List[int] - A rotated sorted array of integers :param target: int - The target integer to search for :return: int - The index of the target in the array or -1 if it is not found if not nums: return -1 left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # Determine which part is sorted if nums[left] <= nums[mid]: # Left part is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right part is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Reverse the order of words in a given string without using any built-in Python functions or methods that directly reverse strings or arrays. Additionally, you are not allowed to use any additional data structures such as lists or arrays to store intermediate results. You can only modify the given string in-place.","solution":"def reverse_words_in_place(s): Reverses the order of words in the input string \`s\` in-place. Assumes words are separated by spaces. # Helper function to reverse characters in a range [start, end) of list l def reverse_range(l, start, end): while start < end: l[start], l[end-1] = l[end-1], l[start] start += 1 end -= 1 # Convert string to list to manipulate the characters l = list(s) # Reverse the entire string reverse_range(l, 0, len(l)) start = 0 for end in range(len(l)): if l[end] == ' ': reverse_range(l, start, end) start = end + 1 # Reverse the last word reverse_range(l, start, len(l)) return ''.join(l)"},{"question":"Write a Python program that calls the same function 'f(x)' twice, but now also include a mathematical operation between the two results before displaying the final answer. The mathematical operation should be multiplication. Note that the value of 'x' for the second function call should be the result of the first function call.","solution":"def f(x): Sample function which we will call twice. return x + 1 def compute_twice_with_multiplication(x): Calls the function 'f' twice and includes a multiplication operation between the two results. :param x: Initial input value for the function call :return: Result of multiplying the first and second function calls first_result = f(x) second_result = f(first_result) final_result = first_result * second_result return final_result"},{"question":"Write a code to initialize an array with 10 elements of value 0, and then write a function to update the array with the prime numbers in the range 0 to 50. Additionally, the function should also return the sum of the prime numbers found.","solution":"def initialize_array(): Initializes an array with 10 elements of value 0. return [0] * 10 def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def update_array_with_primes(): Updates an array of 10 elements with prime numbers found in the range 0 to 50 and returns the sum of those prime numbers. array = initialize_array() primes = [num for num in range(51) if is_prime(num)] for i in range(min(len(array), len(primes))): array[i] = primes[i] prime_sum = sum(primes) return array, prime_sum"},{"question":"Create a python function that visualizes and compares the effectiveness of at least two different sorting algorithms by computing the speed of execution with a set of randomly-generated input list of specified large size n (for instance, n=10,000). Use a comparison-based sorting algorithm (like mergesort, quicksort) and a non-comparison based approach (like counts sort or radix sort). The input array should contain integers ranging from negative to positive.","solution":"import random import time import matplotlib.pyplot as plt def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): res = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: res.append(left[i]) i += 1 else: res.append(right[j]) j += 1 res.extend(left[i:]) res.extend(right[j:]) return res def counting_sort(arr): min_value = min(arr) max_value = max(arr) range_of_elements = max_value - min_value + 1 count_arr = [0] * range_of_elements output_arr = [0] * len(arr) for num in arr: count_arr[num - min_value] += 1 for i in range(1, len(count_arr)): count_arr[i] += count_arr[i - 1] for num in reversed(arr): output_arr[count_arr[num - min_value] - 1] = num count_arr[num - min_value] -= 1 return output_arr def visualize_sorting_algorithms(n): arr = random.sample(range(-10000, 10000), n) # Time for merge sort merge_sort_arr = arr.copy() start_time = time.perf_counter() merge_sort(merge_sort_arr) merge_sort_time = time.perf_counter() - start_time # Time for counting sort counting_sort_arr = arr.copy() start_time = time.perf_counter() counting_sort(counting_sort_arr) counting_sort_time = time.perf_counter() - start_time # Visualize plt.bar([\\"Merge Sort\\", \\"Counting Sort\\"], [merge_sort_time, counting_sort_time], color=['blue', 'green']) plt.ylabel('Time (seconds)') plt.title('Comparison of Sorting Algorithms') plt.show() return merge_sort_time, counting_sort_time"},{"question":"Given a list of tuples each containing a person's name and their scores in three subjects, write a Python function called \`average_score\`. The function should calculate the average score for each person and return a dictionary where the key is the person's name and the value is their average score.","solution":"def average_score(records): Calculates the average score for each person. Parameters: records (list of tuples): Each tuple contains a person's name and their scores in three subjects Returns: dict: Dictionary where the key is the person's name and the value is their average score averages = {} for record in records: name = record[0] scores = record[1:] averages[name] = sum(scores) / len(scores) if scores else 0 return averages"},{"question":"Write a Python function to compute the Fibonacci series up to a given number using recursion. Additionally, implement a memoization technique to optimize the recursive function for larger inputs. Then, extend the function to return the sequence in reverse order. Test it by generating standard Fibonacci sequences up to 2000, and verify the correctness with an automated test function. Remember to handle possible errors and edge cases, as well as to document and comment your code clearly.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion with memoization. if n <= 0: return 0 elif n == 1: return 1 if n not in memo: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n] def generate_fibonacci_sequence_up_to(n): Generates the Fibonacci sequence up to a given number 'n'. sequence = [] i = 0 while True: fib = fibonacci(i) if fib > n: break sequence.append(fib) i += 1 return sequence[::-1] # Return in reverse order"},{"question":"Create a Python program that takes two strings as input and finds the length of their longest common subsequence. Additionally, the program should also print out all possible longest common subsequences for the given input strings.","solution":"def longest_common_subsequence(s1, s2): Finds the length of the longest common subsequence between two strings and returns the length along with all such subsequences. # Building the LCS table m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m): for j in range(n): if s1[i] == s2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # Function to backtrack and find all longest common subsequences def backtrack(i, j): if i == 0 or j == 0: return {\\"\\"} elif s1[i - 1] == s2[j - 1]: return {z + s1[i - 1] for z in backtrack(i - 1, j - 1)} else: res = set() if dp[i - 1][j] >= dp[i][j - 1]: res.update(backtrack(i - 1, j)) if dp[i][j - 1] >= dp[i - 1][j]: res.update(backtrack(i, j - 1)) return res lcs_length = dp[m][n] lcs_set = backtrack(m, n) return lcs_length, lcs_set # Example usage: length, subsequences = longest_common_subsequence(\\"abcde\\", \\"ace\\") print(f\\"LCS length: {length}\\") print(f\\"LCS subsequences: {subsequences}\\")"},{"question":"I am working on a Python program and need help with swapping the first and last elements of a given array. Can you assist me with this?","solution":"def swap_first_last(arr): Swaps the first and last elements of the given list. Parameters: arr (list): The list to swap the first and last elements. Returns: list: The list with the first and last elements swapped. if not arr: return [] arr[0], arr[-1] = arr[-1], arr[0] return arr"},{"question":"Write a Python code to compare two given lists and return the elements that are present in both lists, but only if they are prime numbers greater than 10. Additionally, the code should return the elements in descending order and remove any duplicates.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def common_primes(list1, list2): Returns the elements that are present in both lists, but only if they are prime numbers greater than 10. The elements are returned in descending order and duplicates are removed. common_elements = set(list1) & set(list2) prime_elements = [elem for elem in common_elements if is_prime(elem) and elem > 10] return sorted(prime_elements, reverse=True)"},{"question":"With only \\"Python Lists\\" and without using direct string introspection, create a function that determines if a given word is a palindrome.","solution":"def is_palindrome(word): Returns True if the given word is a palindrome, False otherwise. word_list = list(word) reversed_word_list = word_list[::-1] return word_list == reversed_word_list"},{"question":"Generate a random list of 100 unique numbers from 1 to 1000. Additionally, provide a piece of erroneous code that supposedly checks if the generated list contains all numbers from 1 to 1000, but actually doesn't work correctly. The candidate's task would be to identify and fix the issues in the provided code. Let's consider the programming language Python for this task. The problem described does not specify whether the list has to contain all numbers from 1 to 1000 exactly once (making it a permutation), or just 100 unique numbers among those.","solution":"import random def generate_unique_random_list(): Generates a list of 100 unique random numbers from 1 to 1000. return random.sample(range(1, 1001), 100) def erroneous_check_if_all_numbers_present(lst): Erroneously checks if the list contains all numbers from 1 to 1000. contains_all = True for i in range(1, 1001): if i not in lst: contains_all = False break return contains_all # Correct Implementation def correct_check_if_all_numbers_present(lst): Correctly checks if the list contains 100 unique numbers from 1 to 1000. return len(lst) == 100 and len(set(lst)) == 100"},{"question":"Write a computer program which prints out every prime number less than 100.","solution":"def sieve_of_eratosthenes(limit): Returns a list of all prime numbers less than the given limit using the Sieve of Eratosthenes. primes = [] sieve = [True] * limit for num in range(2, limit): if sieve[num]: primes.append(num) for multiple in range(num * num, limit, num): sieve[multiple] = False return primes def prime_numbers_less_than_100(): Prints all prime numbers less than 100. primes = sieve_of_eratosthenes(100) print(primes) return primes # returning primes to be used in unit tests"},{"question":"Develop an algorithm for implementing the Fibonacci sequence utilizing matrix exponentiation. Your solution should be able to handle extremely large input values for N, where N can be up to 10^18. Ensure your method is highly optimized for performance.","solution":"def matrix_mult(A, B): Multiplies two 2x2 matrices A and B. return [[A[0][0] * B[0][0] + A[0][1] * B[1][0], A[0][0] * B[0][1] + A[0][1] * B[1][1]], [A[1][0] * B[0][0] + A[1][1] * B[1][0], A[1][0] * B[0][1] + A[1][1] * B[1][1]]] def matrix_pow(mat, power): Raises matrix \`mat\` to the power \`power\` using binary exponentiation. result = [[1, 0], [0, 1]] base = mat while power: if power % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) power //= 2 return result def fib_matrix_exponentiation(n): Returns the n-th Fibonacci number using matrix exponentiation. if n == 0: return 0 if n == 1: return 1 F = [[1, 1], [1, 0]] F_n_minus_1 = matrix_pow(F, n - 1) return F_n_minus_1[0][0]"},{"question":"I have an array of numbers and I want to write a Python function that returns a single number which is a result of multiplying all the numbers in the input array. Can you help me achieve that?","solution":"def multiply_array(numbers): Returns the product of all numbers in the input array. :param numbers: List[int] - A list of numbers :return: int - The product of all numbers product = 1 for number in numbers: product *= number return product"},{"question":"using a function, print out a Pascal triangle with n rows, but also include an error handling mechanism to check if the input value of n is valid (i.e is an integer and greater than 0)","solution":"def pascal_triangle(n): Prints Pascal's Triangle with n rows, or raises a ValueError if the input is invalid. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer.\\") # Error handling for invalid input triangle = [] for i in range(n): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j] triangle.append(row) for row in triangle: print(' '.join(map(str, row))) return triangle # Return the triangle for validation in unit tests"},{"question":"Create a parsing function that takes in a string of comma separated values and filters out the ones that are valid integer numbers.","solution":"def filter_integers(csv_string): Parses a string of comma-separated values and filters out the valid integer numbers. Returns a list of integers. Parameters: csv_string (str): The input string containing comma-separated values Returns: List[int]: A list of valid integers found in the input string values = csv_string.split(',') integers = [] for value in values: stripped_value = value.strip() if stripped_value.lstrip('-').isdigit(): integers.append(int(stripped_value)) return integers"},{"question":"Generate a python method to sort a list of tuples based on the second element of the tuple.","solution":"def sort_tuples(tuples_list): Sorts a list of tuples based on the second element of each tuple. Parameters: tuples_list (list of tuples): List to be sorted. Returns: list of tuples: Sorted list based on the second element of the tuples. return sorted(tuples_list, key=lambda x: x[1])"},{"question":"Construct the KÖpet genetic operator for 'Crossover Binary Ordered' type on a provided set of parent chromosomes and let's suppose these parent chromosomes are available in matrix form each corresponding to a string, for instance, 101010001110.","solution":"import random def crossover_binary_ordered(parent1, parent2): Perform a binary ordered crossover between two parent chromosomes. Args: parent1 (str): The first parent chromosome. parent2 (str): The second parent chromosome. Returns: (str, str): Two offspring chromosomes produced by the crossover. if len(parent1) != len(parent2): raise ValueError(\\"Chromosomes must be of the same length\\") length = len(parent1) crossover_point = random.randint(1, length - 1) # Select crossover point offspring1 = parent1[:crossover_point] + parent2[crossover_point:] offspring2 = parent2[:crossover_point] + parent1[crossover_point:] return offspring1, offspring2"},{"question":"Create the binary tree which is represented by the given inorder and preorder traversals. Additionally, implement a function that returns the level-order traversal of the created binary tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(preorder, inorder): Builds a binary tree from preorder and inorder traversal lists. if not preorder or not inorder: return None # The first element of preorder list is the root of the tree root_val = preorder.pop(0) root = TreeNode(root_val) # Find the index of the root in inorder list inorder_index = inorder.index(root_val) # Recursively build the left and right subtrees root.left = build_tree(preorder, inorder[:inorder_index]) root.right = build_tree(preorder, inorder[inorder_index + 1:]) return root def level_order_traversal(root): Returns the level-order traversal of a binary tree. if not root: return [] result = [] queue = [root] while queue: current_node = queue.pop(0) result.append(current_node.val) if current_node.left: queue.append(current_node.left) if current_node.right: queue.append(current_node.right) return result"},{"question":"Develop a function in Python to remove sequential duplicates from a list while maintaining original order. The list can contain strings and integers. For instance, an input: ['Hello', 'World', 'World', 'This', 5, 5, 'Is', 'Is', 'Test', 10, 10, 10] should return: ['Hello', 'World', 'This', 5, 'Is', 'Test', 10]. Aim for an efficient solution with O(n) time complexity.","solution":"def remove_sequential_duplicates(input_list): Removes sequential duplicates from the input list while maintaining the original order. if not input_list: return input_list result = [input_list[0]] for item in input_list[1:]: if item != result[-1]: result.append(item) return result"},{"question":"Write a program that simulates the board game \\"Mastermind\\". The computer will generate a random four-color code using 6 different colors (Red, Green, Blue, Yellow, Orange, and Purple). The player will have 12 chances to guess the code. After each guess, the computer will provide feedback in the form of black and white pegs. Each black peg represents a correct color in the right position, and each white peg represents a correct color but in the wrong position. Additionally, implement a scoring system: for each black peg, the player gets 2 points and for each white peg, the player gets 1 point. The game will be won when the player guesses the code correctly within 12 attempts, and the goal will be to score the maximum points. In the case of incorrect or invalid input, the program should display an error message.","solution":"import random # Colors available for the code COLORS = ['Red', 'Green', 'Blue', 'Yellow', 'Orange', 'Purple'] def generate_code(): Generates a random four-color code. return [random.choice(COLORS) for _ in range(4)] def give_feedback(code, guess): Provides feedback for a guess compared to the code. Returns the number of black and white pegs. black_pegs = 0 white_pegs = 0 code_copy = code[:] guess_copy = guess[:] # Check for black pegs for i in range(4): if guess[i] == code[i]: black_pegs += 1 code_copy[i] = None guess_copy[i] = None # Check for white pegs for i in range(4): if guess_copy[i] and guess_copy[i] in code_copy: white_pegs += 1 code_copy[code_copy.index(guess_copy[i])] = None return black_pegs, white_pegs def score_feedback(black_pegs, white_pegs): Calculates score based on the feedback. Black peg = 2 points, White peg = 1 point return black_pegs * 2 + white_pegs def validate_guess(guess): Validates the player's guess. if len(guess) != 4: return False for color in guess: if color not in COLORS: return False return True def play_mastermind(): code = generate_code() attempts = 12 total_score = 0 print(\\"Welcome to Mastermind!\\") print(\\"Available colors are: Red, Green, Blue, Yellow, Orange, Purple\\") print(f\\"You have {attempts} attempts to guess the code.\\") while attempts > 0: guess = input(\\"Enter your guess (4 colors separated by space): \\").split() if not validate_guess(guess): print(\\"Invalid guess. Please enter 4 valid colors.\\") continue black_pegs, white_pegs = give_feedback(code, guess) score = score_feedback(black_pegs, white_pegs) total_score += score attempts -= 1 print(f\\"Black pegs: {black_pegs}, White pegs: {white_pegs}\\") print(f\\"Current score: {total_score}\\") if black_pegs == 4: print(f\\"Congratulations! You've guessed the code correctly and won the game with a total score of {total_score}.\\") return print(f\\"Game over! You've used all your attempts. The correct code was: {code}\\") if __name__ == \\"__main__\\": play_mastermind()"},{"question":"Can anyone give me a Python script that takes a user inputted date in the dd/mm/yyyy format and outputs the date in the mm/dd/yyyy format using the datetime module?","solution":"from datetime import datetime def convert_date_format(date_str): Converts a date from dd/mm/yyyy format to mm/dd/yyyy format. Parameters: date_str (str): The date in dd/mm/yyyy format. Returns: str: The date in mm/dd/yyyy format. try: date_obj = datetime.strptime(date_str, \\"%d/%m/%Y\\") return date_obj.strftime(\\"%m/%d/%Y\\") except ValueError: return \\"Invalid date format. Please use dd/mm/yyyy.\\" # Example usage: # input_date = input(\\"Enter the date in dd/mm/yyyy format: \\") # print(\\"Date in mm/dd/yyyy format:\\", convert_date_format(input_date))"},{"question":"Create a Python function 'check_prime' that accepts an integer as an argument and returns True if the integer is a prime number, and False otherwise. Also, write a separate function to verify the correctness of 'check_prime' function with a set of predefined test cases.","solution":"def check_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Write a program that takes in two arrays of integers and returns the pair of values (one from each array) that have the maximum sum.","solution":"def max_sum_pair(arr1, arr2): Returns a pair of values (one from each array) that have the maximum sum. if not arr1 or not arr2: return None, None # If either array is empty, return a tuple of Nones max_pair = (arr1[0], arr2[0]) max_sum = max_pair[0] + max_pair[1] for num1 in arr1: for num2 in arr2: current_sum = num1 + num2 if current_sum > max_sum: max_sum = current_sum max_pair = (num1, num2) return max_pair"},{"question":"Write a program that calculates the sum of the first n Fibonacci numbers. The program should prompt the user to enter the value of n and then display the sum. Make sure to use iteration, not recursion.","solution":"def sum_fibonacci(n): Returns the sum of the first n Fibonacci numbers. if n <= 0: return 0 a, b = 0, 1 total_sum = a for _ in range(1, n): total_sum += b a, b = b, a + b return total_sum"},{"question":"Given Python list L, containing n elements, where n is a positive integer, and an index i, where 0 <= i < n, write a Python one-liner that will shift the list L to the right by i elements, assuming that shifting the list L right by j elements implies that L should first be reversed, and afterward the first j elements should be moved to the end of the list, preserving their original order. Your solution should work even when i >= n.","solution":"def shift_list(L, i): Shifts the list L to the right by i elements, assuming a reverse-then-shift mechanic. n = len(L) i = i % n return (L[::-1][:i][::-1] + L[::-1][i:][::-1])"},{"question":"In Python, write a script that not only displays the elements of a nested list, but also their indices at both the outer and inner list levels. Additionally, implement a function that reverses the order of the elements for both levels.","solution":"def display_nested_list_with_indices(nested_list): Displays elements of a nested list along with their indices at both the outer and inner list levels. for outer_index, inner_list in enumerate(nested_list): for inner_index, element in enumerate(inner_list): print(f\\"Element: {element}, Outer Index: {outer_index}, Inner Index: {inner_index}\\") def reverse_nested_list(nested_list): Reverses the order of the elements for both outer and inner lists. return [list(reversed(inner_list)) for inner_list in reversed(nested_list)]"},{"question":"Use a programming language to generate the Fibonacci sequence up to the 100th number, but only using an iterative approach without using recursion. Additionally, you must optimize your solution to have a time complexity of O(n) and a space complexity of O(1), meaning you cannot use any additional data structures besides a few variables for temporary storage.","solution":"def fibonacci(n): Generates the Fibonacci sequence up to the nth number using an iterative approach. Returns a list containing the Fibonacci sequence up to the nth number. if n == 0: return [] elif n == 1: return [0] fib_sequence = [0] * n fib_sequence[0], fib_sequence[1] = 0, 1 a, b = 0, 1 for i in range(2, n): a, b = b, a + b fib_sequence[i] = b return fib_sequence"},{"question":"write a Python program using 3 for loops. Each for loop must contain at least one if statement and you must use a nested for loop structure. The output should be a list of tuples containing values from a given range 0 to n. Each tuple should contain three elements with unique conditions. Additionally, apply the conditions that for the first element of each tuple only even numbers are selected, for the second element only odd numbers are selected and for the third, any prime number less than the selected odd number. Let's set n=20.","solution":"def generate_tuples(n): def is_prime(num): if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True result = [] for i in range(n + 1): if i % 2 == 0: # First element should be even for j in range(n + 1): if j % 2 != 0: # Second element should be odd for k in range(j): # Third element should be prime and less than second element if is_prime(k): result.append((i, j, k)) return result"},{"question":"I made a Python function named checkOddishOrEvenish(), it accepts one argument: a list, and its job is to return \\"Oddish\\" or \\"Evenish\\" for that list. For a given list, if the sum of its items is an odd number, the function will return \\"Oddish\\", otherwise \\"Evenish\\".","solution":"def checkOddishOrEvenish(lst): Returns \\"Oddish\\" if the sum of the items in the list is odd, otherwise returns \\"Evenish\\". total = sum(lst) if total % 2 == 0: return \\"Evenish\\" else: return \\"Oddish\\""},{"question":"Devise a function that takes in three lists as parameters. The first two lists consist of integer values, while the third list contains a series of operations represented as strings. These operations could be \\"merge\\", \\"common_elements\\", \\"unique_elements\\", \\"sort_in_descending\\", \\"element_difference\\", \\"length_of_list\\", \\"sum_of_elements\\", \\"average_of_elements\\", or \\"max_element\\". The function should execute the operations on the first two lists in their given sequence.","solution":"def perform_operations(list1, list2, operations): result = [] for operation in operations: if operation == \\"merge\\": result.append(list1 + list2) elif operation == \\"common_elements\\": result.append(list(set(list1) & set(list2))) elif operation == \\"unique_elements\\": result.append(list(set(list1).symmetric_difference(set(list2)))) elif operation == \\"sort_in_descending\\": result.append(sorted(list1 + list2, reverse=True)) elif operation == \\"element_difference\\": result.append(list(set(list1) - set(list2))) elif operation == \\"length_of_list\\": result.append((len(list1), len(list2))) elif operation == \\"sum_of_elements\\": result.append((sum(list1), sum(list2))) elif operation == \\"average_of_elements\\": avg1 = sum(list1) / len(list1) if list1 else 0 avg2 = sum(list2) / len(list2) if list2 else 0 result.append((avg1, avg2)) elif operation == \\"max_element\\": max1 = max(list1) if list1 else None max2 = max(list2) if list2 else None result.append((max1, max2)) return result"},{"question":"Create a python script that calculates the weighted average of the student marks given in the following dictionary. The weights are provided in another dictionary. Ignore students without a mark or weight, and handle possible exceptions.","solution":"def weighted_average(marks, weights): Calculates the weighted average of student marks. Parameters: - marks (dict): A dictionary where keys are student names and values are their mark (int or float). - weights (dict): A dictionary where keys are student names and values are their corresponding weight (int or float). Returns: - float: The weighted average of the marks. Returns 0 if no valid marks are provided. total_weight = 0 weighted_sum = 0 for student, mark in marks.items(): if student in weights: weighted_sum += mark * weights[student] total_weight += weights[student] if total_weight == 0: return 0 return weighted_sum / total_weight"},{"question":"Create a code to raise a number to a given power p, using only basic arithmetic operations (addition, subtraction, multiplication, and division) and without using any built-in exponentiation functions or operators. The solution should have a time complexity of O(log p).","solution":"def power(base, exp): Raises \`base\` to the power \`exp\` using basic arithmetic operations. Uses the method of exponentiation by squaring for efficient computation. :param base: The base number :param exp: The exponent (must be a non-negative integer) :return: The result of base raised to the power exp if exp < 0: raise ValueError(\\"Exponent must be non-negative.\\") result = 1 while exp > 0: if exp % 2 == 1: result *= base base *= base exp //= 2 return result"},{"question":"Given the following search binary algorithm, you are asked to identify and correct the mistakes in the code to make it work properly. Additionally, add the functionality for it to return the index location of the target element if found. If the target is not found within the array, your algorithm should return -1.","solution":"def binary_search(arr, target): Perform a binary search for the target in a sorted array arr. Returns the index of the target if found, else returns -1. left, right = 0, len(arr) - 1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a python function that takes a list of strings and removes all duplicates from that list while preserving the original order of occurrence of the non duplicate elements.","solution":"def remove_duplicates_preserve_order(strings): Removes duplicates from a list of strings while preserving the original order. Args: strings (list of str): List of strings with potential duplicates. Returns: list of str: List with duplicates removed, preserving original order. seen = set() no_duplicates = [] for string in strings: if string not in seen: no_duplicates.append(string) seen.add(string) return no_duplicates"},{"question":"Write a Python function to add two matrices and return the result as a new matrix. The function should be named \\"add_matrices\\" and should take two parameters, matrix1 and matrix2, both of which are 2D lists of integers. The matrices are guaranteed to have the same number of rows and columns.","solution":"def add_matrices(matrix1, matrix2): Returns the sum of two matrices. Parameters: - matrix1: 2D list of integers - matrix2: 2D list of integers Returns: - 2D list representing the element-wise sum of matrix1 and matrix2 num_rows = len(matrix1) num_cols = len(matrix1[0]) result_matrix = [ [matrix1[i][j] + matrix2[i][j] for j in range(num_cols)] for i in range(num_rows) ] return result_matrix"},{"question":"Write the code for the elimination part of the Gauss-Jordan algorithm for solving a system of linear equations. This part finds the solution to the system of equations by bringing the matrix to its reduced row echelon form. Remember to avoid division by zero and handle non-square matrices.","solution":"def gauss_jordan_elimination(matrix): Brings the given matrix to its Reduced Row Echelon Form (RREF) using the Gauss-Jordan elimination method. :param matrix: A list of lists where each inner list represents a row in a matrix. :return: The matrix in Reduced Row Echelon Form. if not matrix or not matrix[0]: return matrix row_count = len(matrix) col_count = len(matrix[0]) for i in range(row_count): # Find the pivot pivot = None for j in range(i, row_count): if matrix[j][i] != 0: pivot = j break if pivot is None: continue # Swap current row with pivot row matrix[i], matrix[pivot] = matrix[pivot], matrix[i] # Normalize pivot row pivot_val = matrix[i][i] if pivot_val != 0: matrix[i] = [x / pivot_val for x in matrix[i]] # Eliminate other rows for k in range(row_count): if k != i: factor = matrix[k][i] matrix[k] = [x - factor * y for x, y in zip(matrix[k], matrix[i])] return matrix"},{"question":"Given two lists of strings, write a program to combine them into a dictionary whose keys are the strings in one list and values are the strings in the other list.","solution":"def combine_lists_into_dict(keys, values): Combines two lists into a dictionary where \`keys\` list provides dictionary keys and \`values\` list provides dictionary values. If \`keys\` and \`values\` are of unequal lengths, the shorter list will determine the length of the resulting dictionary. :param keys: List of strings to use as keys in the dictionary. :param values: List of strings to use as values in the dictionary. :return: A dictionary combining keys and values. return dict(zip(keys, values))"},{"question":"Create a for-loop in Python that iterates through a list of numbers and prints out only the prime numbers in the list that are divisible by 7, while also counting the total number of prime numbers found. The program should then print the total count of prime numbers at the end.","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def find_primes_divisible_by_seven(numbers): Function to find and print prime numbers divisible by 7 from the given list of numbers. Also counts and returns the total number of such prime numbers. count = 0 for num in numbers: if num % 7 == 0 and is_prime(num): print(num) count += 1 print(f\\"Total prime numbers divisible by 7 found: {count}\\") return count"},{"question":"Write a code generator for a music database, based on Tchaikovsky's symphony No.4. The generator should produce a series of random codes, each of which represents a unique piece of music in the database. The codes should be formatted as follows: the first 4 characters should be a random combination of letters, followed by an underscore, then 4 digits representing the year the piece was composed, and finally another underscore followed by a random number between 1 and 99. To ensure the uniqueness of each code, they should be cross-referenced with existing codes in the database and rejected if they match. The generator should be able to produce a specified number of unique codes, and should be able to adapt to different musical genres, time periods, and composers.","solution":"import random import string def generate_random_string(length): letters = string.ascii_letters return ''.join(random.choice(letters) for i in range(length)) def generate_random_code(year, min_num=1, max_num=99): random_string = generate_random_string(4) random_number = random.randint(min_num, max_num) return f\\"{random_string}_{year}_{random_number}\\" def generate_unique_code(existing_codes, year, min_num=1, max_num=99): while True: new_code = generate_random_code(year, min_num, max_num) if new_code not in existing_codes: return new_code def music_code_generator(num_codes, year, existing_codes=None): if existing_codes is None: existing_codes = set() new_codes = set() while len(new_codes) < num_codes: new_code = generate_unique_code(existing_codes.union(new_codes), year) new_codes.add(new_code) return list(new_codes)"},{"question":"In Python, I have a list of strings. How can I find out if any of the strings in this list contain a specific substring? To make it more challenging, the substring can be at any position within the strings of the list. I want to write a function that can efficiently perform this task for any given list and substring.","solution":"def contains_substring(string_list, substring): Returns True if any of the strings in string_list contain the substring. Otherwise, returns False. return any(substring in string for string in string_list)"},{"question":"Implement a GoF strategy design pattern to allow switching between different sorting algorithms in a search application.","solution":"from typing import List class SortStrategy: The Sort Strategy interface declares sorting method for various implementations. def sort(self, data: List[int]) -> List[int]: raise NotImplementedError class BubbleSortStrategy(SortStrategy): Implements the Bubble Sort algorithm. def sort(self, data: List[int]) -> List[int]: n = len(data) for i in range(n): for j in range(0, n-i-1): if data[j] > data[j+1]: data[j], data[j+1] = data[j+1], data[j] return data class QuickSortStrategy(SortStrategy): Implements the Quick Sort algorithm. def sort(self, data: List[int]) -> List[int]: def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) return quicksort(data) class MergeSortStrategy(SortStrategy): Implements the Merge Sort algorithm. def sort(self, data: List[int]) -> List[int]: def merge_sort(arr): if len(arr) <= 1: return arr mid = len(arr) // 2 left = merge_sort(arr[:mid]) right = merge_sort(arr[mid:]) return merge(left, right) def merge(left, right): result = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result.extend(left[i:]) result.extend(right[j:]) return result return merge_sort(data) class Context: Context class to use the different sorting strategies. def __init__(self, strategy: SortStrategy): self._strategy = strategy def set_strategy(self, strategy: SortStrategy): self._strategy = strategy def sort_data(self, data: List[int]) -> List[int]: return self._strategy.sort(data)"},{"question":"Create a Python function that takes a string as input and returns True if it contains all lowercase English letters from 'a' to 'z' without any repetition or missing, and False otherwise. Use only a single for loop.","solution":"def contains_all_letters(s): Check if the input string contains all lowercase English letters exactly once. letters_set = set('abcdefghijklmnopqrstuvwxyz') if len(s) != 26: return False for char in s: if char not in letters_set: return False letters_set.remove(char) return len(letters_set) == 0"},{"question":"Hello, I'm trying to write a function that takes a list of strings as input and returns a dictionary where the keys are the strings from the input list and the values are the positions of those strings in the list. How can I achieve this in Python?","solution":"def list_to_dict(input_list): Converts a list of strings to a dictionary with strings as keys and their positions as values. :param input_list: List of strings :return: Dictionary with strings as keys and their positions as values return {string: index for index, string in enumerate(input_list)}"},{"question":"Please provide a simple Python function that takes a list of strings as input and returns the second word in the fourth string of the list. The input list should be passed as a parameter to the function. However, if the list has less than four strings, the function should return an error message.","solution":"def second_word_in_fourth_string(strings): Returns the second word in the fourth string of the list. If the list has less than four strings, an error message is returned. if len(strings) < 4: return \\"Error: The list contains less than four strings.\\" fourth_string = strings[3] words = fourth_string.split() if len(words) < 2: return \\"Error: The fourth string contains less than two words.\\" return words[1]"},{"question":"Given two lists of equal size, how can you combine them together, such that the resulting tuple list has tuples that contain elements from both lists at the same index? Furthermore, create a function to prove the correctness of your solution given two tests.","solution":"def combine_lists(list1, list2): Combines two lists of equal length into a list of tuples, where each tuple contains elements from both lists at the same index. if len(list1) != len(list2): raise ValueError(\\"Both lists must be of the same length\\") return list(zip(list1, list2))"},{"question":"Write a Python function that intertwines two supplied strings by alternating their characters, ensuring the output is a mix of both strings, while adhering to the case sensitivity of the original inputs. If one string is longer, append the remaining characters of the longer string at the end of the resulting string.","solution":"def intertwine_strings(s1, s2): Intertwines two strings by alternating their characters. If one string is longer, appends the remaining characters to the result. Args: s1 (str): The first string. s2 (str): The second string. Returns: str: The intertwined string with remaining characters from the longer string appended. result = [] len_s1 = len(s1) len_s2 = len(s2) for i in range(min(len_s1, len_s2)): result.append(s1[i]) result.append(s2[i]) if len_s1 > len_s2: result.extend(s1[len_s2:]) elif len_s2 > len_s1: result.extend(s2[len_s1:]) return ''.join(result)"},{"question":"Write a function to generate all possible permutations of a string, given a string with unique characters.","solution":"def generate_permutations(s): Generates all possible permutations of a string with unique characters. :param s: A string with unique characters :return: A list of all possible permutations of the string if len(s) <= 1: return [s] permutations = [] for i in range(len(s)): current_char = s[i] remaining_str = s[:i] + s[i+1:] for perm in generate_permutations(remaining_str): permutations.append(current_char + perm) return permutations"},{"question":"how to create wrapper around function which has an optional argument, where if the user passes the argument call wrapped function with user passed argument or default if none is passed","solution":"def wrapper(func, arg=None): A wrapper function that calls the provided function \`func\` with \`arg\`. If \`arg\` is not provided, it defaults to None and the wrapped function will handle it as needed. :param func: Function to be wrapped :param arg: Optional argument to pass to \`func\` :return: Result of the function call if arg is None: return func() else: return func(arg)"},{"question":"Translate the following sentence to Python code: \\"Take the average of the elements in a list.\\"","solution":"def average_of_list(lst): Returns the average of the elements in the list. if not lst: return 0 return sum(lst) / len(lst)"},{"question":"Write a function \`remove_vowels(string: str) -> str\` that takes a string as input and returns a new string with all the vowels removed. The string can have a maximum length of 100 characters and will only contain lowercase alphabets.","solution":"def remove_vowels(string: str) -> str: Removes all vowels from the input string. Parameters: string (str): The input string from which vowels need to be removed. Returns: str: The input string with all vowels removed. vowels = \\"aeiou\\" result = ''.join([char for char in string if char not in vowels]) return result"},{"question":"Program a function in Python language, which takes three numerical parameters of any type (integers, floats etc.). Your function should also handle complex numbers and exceptional cases when input is non-numeric. It then deduces and returns the largest numerical quantity among the triplets. The function should also include a feature to compare and adjust for the magnitude of the numbers in case of complex inputs.","solution":"def largest_number(a, b, c): Returns the largest numerical quantity from the three inputs. The function handles integers, floats, and complex numbers. Non-numeric inputs raise a ValueError. try: # Ensure the inputs are numeric or complex numbers if not all(isinstance(i, (int, float, complex)) for i in [a, b, c]): raise ValueError(\\"All inputs must be numeric (int, float, or complex).\\") # Compare the magnitudes for complex numbers numbers = [a, b, c] max_number = max(numbers, key=lambda x: abs(x)) return max_number except Exception as e: raise ValueError(f\\"Error: {str(e)}\\")"},{"question":"Create a code that prints out all the prime numbers in the range from 1 to 100, but exclude the number 2. Additionally, make sure that the code is optimized to minimize the number of iterations performed.","solution":"def find_primes_excluding_2(): Prints all prime numbers in the range from 1 to 100 excluding the number 2. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True primes = [] for num in range(3, 101): if is_prime(num): primes.append(num) print(primes) return primes"},{"question":"Write a Python function that takes in a list of integers and returns a new list consisting of all distinct elements from the original list, preserving the original order. Your solution should be clear and self-contained, and it should include a docstring explaining what the function does and any necessary imports. You may assume the input list will always contain at least one element.","solution":"def distinct_elements(lst): Returns a list of distinct elements from the original list, preserving the order. Parameters: lst (List[int]): A list of integers. Returns: List[int]: A list of distinct integers in the original order. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Create a method that performs the operation of altering a two-dimensional array's orientation from column-focused to row-oriented. The target array for this operation is structured as follows: [[2, 3, 4], [5, 6, 7], [8, 9, 10]]. Focus on transposing the given array effectively. In Python, we can use the built-in \`zip\` function combined with list comprehension to achieve this. The \`zip\` function takes multiple iterables and aggregates them. By including the argument \`*\` before our array, we're telling Python to unpack the rows from the array as separate arguments to zip.","solution":"def transpose(matrix): Transposes the given two-dimensional matrix. Args: matrix (list of list of int): The matrix to be transposed. Returns: list of list of int: The transposed matrix. return [list(row) for row in zip(*matrix)]"},{"question":"Create a program that calculates the sum of all elements in a given list of integers. Additionally, the program should find the maximum and minimum value in the list. The list is provided as an argument to the function. Don't use built-in functions for finding the sum, max or min value of the list.","solution":"def calculate_sum_max_min(lst): Returns a tuple containing the sum of all elements, the maximum value, and the minimum value in the given list. total_sum = 0 if not lst: return (0, None, None) max_value = lst[0] min_value = lst[0] for num in lst: total_sum += num if num > max_value: max_value = num if num < min_value: min_value = num return (total_sum, max_value, min_value)"},{"question":"Reverse the order of an input string using a Python function.","solution":"def reverse_string(s): Reverse the order of the input string. Parameters: s (str): The string to reverse. Returns: str: The reversed string. return s[::-1]"},{"question":"Update the code snippet below to generate a list of prime numbers from 1 to 100 using a list comprehension and the is_prime function provided.","solution":"def is_prime(n): Determine if the given integer n is a prime number. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True # List comprehension to generate list of prime numbers from 1 to 100 primes = [x for x in range(1, 101) if is_prime(x)]"},{"question":"Design a Python function that receives a list of words, two indexes i and j, and a rotation direction 'L' (left) or 'R' (right). The function should shift the words in the list from index i to j according to the rotation direction and then return the final arrangement of words. If the rotation direction is 'L', rotate the words to the left. If it's 'R', rotate to the right. Assume i is always less than j.","solution":"def rotate_words(words, i, j, direction): Rotates the words in a list from index i to j based on the given direction. Args: words (list): List of words. i (int): Starting index for rotation (inclusive). j (int): Ending index for rotation (inclusive). direction (str): Direction of rotation ('L' for left, 'R' for right). Returns: list: List of words after the rotation. # Slice the sublist we want to rotate sublist = words[i:j+1] if direction == 'L': # Rotate left rotated_sublist = sublist[1:] + [sublist[0]] elif direction == 'R': # Rotate right rotated_sublist = [sublist[-1]] + sublist[:-1] else: raise ValueError(\\"Direction must be 'L' or 'R'\\") # Reconstruct the whole list with the rotated sublist return words[:i] + rotated_sublist + words[j+1:]"},{"question":"Write a function to generate a random number from 0 to n, where n is an input parameter. The function should have a time complexity of O(1) and a space complexity of O(1).","solution":"import random def generate_random_number(n): Generates a random number from 0 to n. Parameters: n (int): Upper bound for the random number generation (inclusive). Returns: int: Random number between 0 and n (inclusive). if n < 0: raise ValueError(\\"n must be non-negative\\") return random.randint(0, n)"},{"question":"Given a list of integers and a divisor 'k', write a Python program using map(), filter() or any other higher order function that returns the count of numbers from the list that are divisible by 'k' with no remainder. Also, for all numbers that are divisible, return the quotient of the division.","solution":"def count_and_divide(numbers, k): Returns the count of numbers from the list that are divisible by 'k' with no remainder and a list of quotients for those numbers. :param numbers: List of integers :param k: Divisor :return: Tuple (count of divisible numbers, list of quotients) divisible_numbers = list(filter(lambda x: x % k == 0, numbers)) quotients = list(map(lambda x: x // k, divisible_numbers)) return len(divisible_numbers), quotients"},{"question":"Generate a function in Python that takes a number and returns its factorial using recursion.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a function in Python that takes a list of strings as an argument and returns a new list containing only the strings that are longer than 3 characters and have at least one digit in them.","solution":"def filter_strings(strings): Returns a list of strings that are longer than 3 characters and contain at least one digit. return [s for s in strings if len(s) > 3 and any(char.isdigit() for char in s)]"},{"question":"How can I create a Python program that evaluates a given expression as a postfix notation (Reverse Polish Notation)?","solution":"def evaluate_postfix(expression): Evaluates a given expression in postfix notation (Reverse Polish Notation). Args: expression (str): A string containing the postfix expression. Returns: int/float: The result of the expression. stack = [] for token in expression.split(): if token.isdigit() or (token[1:].isdigit() and token[0] == '-'): # Check if token is an integer stack.append(int(token)) elif token.replace('.', '', 1).isdigit() or (token[1:].replace('.', '', 1).isdigit() and token[0] == '-'): # Check if token is a float stack.append(float(token)) else: operand2 = stack.pop() operand1 = stack.pop() if token == '+': result = operand1 + operand2 elif token == '-': result = operand1 - operand2 elif token == '*': result = operand1 * operand2 elif token == '/': result = operand1 / operand2 stack.append(result) return stack[0]"},{"question":"Write a comprehensive code that takes user inputs of different fruit names and their respective quantities in a fruit basket. After the user has finished inputting, the code should list all the unique fruit names, their quantities, and calculate the total number of fruits present. Additionally, implement functionality for the user to query the quantity of any specific fruit present in the basket after inputting the basket's data. Ensure that your code is robust enough to handle errors gracefully, such as when a user enters a non-integer value for quantity or inputs a fruit name that was already previously added.","solution":"def get_fruit_basket(): Collects user inputs for fruit names and their quantities. List unique fruit names, their quantities, and the total number of fruits present. Allows querying the quantity of any specific fruit. fruit_basket = {} while True: fruit = input(\\"Enter the name of the fruit (type 'done' to finish): \\").strip().lower() if fruit == 'done': break elif fruit in fruit_basket: print(f\\"{fruit.capitalize()} already exists in the basket. Please enter a new fruit.\\") continue try: quantity = int(input(f\\"Enter the quantity of {fruit}: \\")) if quantity < 0: print(\\"Quantity cannot be negative. Please enter a valid quantity.\\") continue except ValueError: print(\\"Invalid quantity. Please enter an integer value.\\") continue fruit_basket[fruit] = quantity total_fruits = sum(fruit_basket.values()) print(\\"nFruit Basket Summary:\\") for fruit, quantity in fruit_basket.items(): print(f\\"{fruit.capitalize()}: {quantity}\\") print(f\\"Total number of fruits: {total_fruits}\\") while True: query = input(\\"nQuery the quantity of a specific fruit (type 'exit' to quit): \\").strip().lower() if query == 'exit': break elif query in fruit_basket: print(f\\"The quantity of {query.capitalize()} is: {fruit_basket[query]}\\") else: print(f\\"{query.capitalize()} is not in the basket.\\") # Removing unit tests from the main function for usability purposes def fruit_basket_to_dict(fruit_entries): fruit_basket = {} for entry in fruit_entries: fruit, quantity = entry if fruit in fruit_basket: raise ValueError(f\\"Duplicate fruit found: {fruit}\\") if not isinstance(quantity, int) or quantity < 0: raise ValueError(f\\"Invalid quantity for {fruit}: {quantity}\\") fruit_basket[fruit] = quantity return fruit_basket def total_fruits(fruit_basket): return sum(fruit_basket.values()) def query_fruit(fruit_basket, fruit): return fruit_basket.get(fruit, \\"Fruit not in the basket\\")"},{"question":"Serialize a binary tree using level-order traversal.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def serialize(root): Serializes a binary tree to a string using level-order traversal. if not root: return \\"\\" result = [] queue = deque([root]) while queue: node = queue.popleft() if node: result.append(str(node.val)) queue.append(node.left) queue.append(node.right) else: result.append(\\"#\\") return ','.join(result)"},{"question":"Given the following dictionary in Python, write a function to calculate the average value of all items in the dictionary where the keys start with a specific letter using list comprehension. Additionally, the function should be able to handle cases where the dictionary values can be either integer or floating point numbers. Test the function with multiple dictionaries of different sizes and value types.","solution":"def average_value_by_key_prefix(d, prefix): Calculate the average value of all items in the dictionary where the keys start with a specific letter. Parameters: d (dict): The input dictionary with numeric values. prefix (str): The key prefix to filter. Returns: float: The average value of the filtered items. If no keys match, return 0. filtered_values = [value for key, value in d.items() if key.startswith(prefix)] if not filtered_values: return 0 return sum(filtered_values) / len(filtered_values)"},{"question":"How would you create a basic web application using the Flask Python Framework?","solution":"from flask import Flask app = Flask(__name__) @app.route('/') def home(): return \\"Welcome to the Home Page!\\" @app.route('/about') def about(): return \\"This is the About Page.\\" if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a function to swap two numbers using XOR bitwise operator without using any third variable.","solution":"def swap_numbers(x, y): Swaps two numbers using XOR bitwise operator without using any third variable. x = x ^ y y = x ^ y x = x ^ y return x, y"},{"question":"Given a list of temperatures in Fahrenheit, write a Python function to convert them to Celsius. Your function should be able to handle both single temperature inputs and lists of temperatures. For a single temperature input, your function should return the converted temperature in Celsius as a floating-point number. For a list of temperatures input, your function should return a list of converted temperatures in Celsius, where the order of temperatures should be preserved.","solution":"def fahrenheit_to_celsius(temperatures): Converts Fahrenheit temperatures to Celsius. Parameters: temperatures (float or list of floats): A single temperature in Fahrenheit or a list of temperatures in Fahrenheit. Returns: float or list of floats: The temperature(s) in Celsius. def convert(temp): return (temp - 32) * 5.0 / 9.0 if isinstance(temperatures, list): return [convert(temp) for temp in temperatures] else: return convert(temperatures)"},{"question":"Implement a Python function \`choose_evens(lst)\` that takes a list of positive integers \`lst\` and returns a new list containing only the even numbers from the original list. The function should also ensure that the returned list is sorted in ascending order, regardless of the order of elements in the input list.","solution":"def choose_evens(lst): Returns a sorted list of even numbers from the input list of positive integers. return sorted([num for num in lst if num % 2 == 0])"},{"question":"Given a linked list, create a function that reverses the linked list in place. The function should have a time complexity of O(n) and should not use any additional space (constant space complexity).","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head): Reverses a linked list in place. Args: head : ListNode The head of the linked list. Returns: ListNode The new head of the reversed linked list. prev = None current = head while current: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Rewrite the code for a function that takes a string as an argument and returns the longest word in the string. Ensure that the function can handle cases where there are multiple words with the same maximum length. Additionally, the function should ignore any punctuation marks or special characters that may be present in the string.","solution":"import re def longest_word(s): Returns the longest word in the given string. In case of multiple words with the same maximum length, returns the first one. Punctuation marks or special characters are ignored. # Remove punctuation marks and special characters using regex s = re.sub(r'[^ws]', '', s) words = s.split() if not words: return \\"\\" # Find the longest word longest = max(words, key=len) return longest"},{"question":"Create function that rotates given 2D matrix by 90 degrees clockwise.","solution":"def rotate_matrix(matrix): Rotates the given 2D matrix by 90 degrees clockwise. if not matrix or not matrix[0]: return [] # Transpose the matrix transposed_matrix = [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))] # Reverse each row to get the rotated matrix rotated_matrix = [row[::-1] for row in transposed_matrix] return rotated_matrix"},{"question":"Write a Python decorator function that logs the execution time of any function it decorates.","solution":"import time import functools def log_execution_time(func): A decorator that logs the execution time of any function it decorates. @functools.wraps(func) def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() execution_time = end_time - start_time print(f\\"Executed {func.__name__} in {execution_time:.4f} seconds\\") return result return wrapper # Example function to demonstrate the decorator @log_execution_time def example_function(n): sum_ = 0 for i in range(n): sum_ += i return sum_"},{"question":"Given a list \`a\`, write a program to construct a new list \`sum Zweimal\` such that each element is twice the sum of all elements of \`a\` except for the current element at the same index. Implement a solution that runs efficiently.","solution":"def sum_zweimal(a): Constructs a new list such that each element is twice the sum of all elements of 'a' except for the element at the current index. Parameters: a (list): A list of numbers. Returns: list: A new list with modified values as described. total_sum = sum(a) return [2 * (total_sum - x) for x in a]"},{"question":"Write a recursive function to calculate the sum of list items, but you are not allowed to use any built-in function or method for summing the list items, and you can only use a single variable to store intermediate results. Additionally, you are not allowed to use any loops or helper functions. The list may contain negative numbers and zero. The function should handle empty sub-lists by ignoring them and continue with the calculation.","solution":"def recursive_sum(lst): Recursively calculates the sum of items in a list. Args: lst (list): The list of numbers to sum up. Returns: int/float: The sum of the list items. if not lst: return 0 return lst[0] + recursive_sum(lst[1:])"},{"question":"Develop two functions - one that constructs a queue and another that simulates the.dequeue() operation. Make sure these functions are capable of handling the operations of a queue data structure, following the First-In-First-Out (FIFO) methodology.","solution":"class Queue: def __init__(self): Initialize an empty queue. self.queue = [] def enqueue(self, item): Add an item to the end of the queue. self.queue.append(item) def dequeue(self): Remove an item from the front of the queue and return it. Return None if the queue is empty. if self.is_empty(): return None return self.queue.pop(0) def is_empty(self): Check if the queue is empty. return len(self.queue) == 0"},{"question":"Please generate a function in Python which takes a list of positive integers and sorts the list elements in ascending order. However, you are not allowed to use any built-in sorting functions or methods, and you must implement the sorting algorithm yourself. Additionally, the time complexity of your sorting algorithm should be O(n log n) and the space complexity should be O(1).","solution":"def heapsort(arr): Sorts a list of positive integers in ascending order using the heap sort algorithm. def heapify(arr, n, i): # Function to turn the subtree rooted at index i into a max-heap. largest = i # Initialize largest as root left = 2 * i + 1 # left = 2*i + 1 right = 2 * i + 2 # right = 2*i + 2 # See if left child of root exists and is greater than root if left < n and arr[i] < arr[left]: largest = left # See if right child of root exists and is greater than root if right < n and arr[largest] < arr[right]: largest = right # Change root, if needed if largest != i: arr[i], arr[largest] = arr[largest], arr[i] # swap # Heapify the root. heapify(arr, n, largest) n = len(arr) # Build a maxheap. for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) # One by one extract elements for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # swap heapify(arr, i, 0) return arr"},{"question":"Write a code to generate N random numbers between 1 to 100","solution":"import random def generate_random_numbers(n): Generates n random numbers between 1 and 100. Parameters: n (int): Number of random numbers to generate. Returns: list: A list containing n random numbers between 1 and 100. return [random.randint(1, 100) for _ in range(n)]"},{"question":"Develop a asynchronous Python program that uses async/await to reverse a string without using any predefined functions specifically meant for reversing strings. Meanwhile, you also have to handle warnings for non-string inputs and special characters. Here's how you can write a very simple async program that does the job.","solution":"import asyncio async def reverse_string(s): Asynchronously reverses the given string. :param s: The string to be reversed :type s: str :return: Reversed string :rtype: str :raises TypeError: If the input is not a string. if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") reversed_chars = [None] * len(s) for i in range(len(s)): reversed_chars[len(s) - 1 - i] = s[i] await asyncio.sleep(0) # Yield control to the event loop return ''.join(reversed_chars)"},{"question":"Develop a Python script utilizing the Function module that takes a list of numbers as an argument and returns the maximum number from the list. However, do not use any built-in Python functions like max(). To add complexity, also include error handling for situations where the input is not a list, the list is empty, or the list contains non-integer values. The Function module here is fictional and you should use standard Python functionality to solve the problem.","solution":"def find_max(numbers): Returns the maximum number from a list of numbers with error handling. Parameters: numbers (list): List of numbers Returns: int: the maximum number in the list Raises: TypeError: if the input is not a list ValueError: if the list is empty or contains non-integer values if not isinstance(numbers, list): raise TypeError(\\"Input must be a list\\") if not numbers: raise ValueError(\\"List is empty\\") for number in numbers: if not isinstance(number, int): raise ValueError(\\"List contains non-integer values\\") max_num = numbers[0] for num in numbers[1:]: if num > max_num: max_num = num return max_num"},{"question":"Create a Python function that takes two lists as input parameters, checks if they have equal length, and then combines the elements of the lists into a single dictionary. The keys of the dictionary should come from the first list, and the values should come from the second list. If the lists are not of equal length, the function should raise a custom exception with a detailed error message. Additionally, include type hints in your function definition to enhance code readability and maintainability. Finally, test the function using the provided data points to ensure its accuracy.","solution":"from typing import List, Dict, Any class ListLengthMismatchException(Exception): pass def combine_lists_to_dict(keys: List[Any], values: List[Any]) -> Dict[Any, Any]: if len(keys) != len(values): raise ListLengthMismatchException(f\\"The length of keys list ({len(keys)}) does not match the length of values list ({len(values)}).\\") return dict(zip(keys, values))"},{"question":"What's a code snippet to encrypt a message using a Caesar cipher in Python? I want to be able to specify the shift value when calling the function.","solution":"def caesar_cipher(text, shift): Encrypts the input text using Caesar cipher with the specified shift value. encrypted_text = [] for char in text: if char.isalpha(): shift_amount = shift % 26 shifted = ord(char) + shift_amount if char.islower(): if shifted > ord('z'): shifted -= 26 encrypted_char = chr(shifted) elif char.isupper(): if shifted > ord('Z'): shifted -= 26 encrypted_char = chr(shifted) else: encrypted_char = char encrypted_text.append(encrypted_char) return ''.join(encrypted_text)"},{"question":"Write a script that allows treating Windows as a UNIX system in terms of command line syntax and functionality. The script should be able to execute common UNIX commands like \`ls\`, \`cd\`, \`rm\`, and \`mv\` on a Windows system. The script should be written in a language that is not native to Windows, such as Python or Bash for Windows (WSL).","solution":"import os import shutil import argparse def list_directory(path=\\".\\"): List the contents of the directory specified by path. try: return os.listdir(path) except FileNotFoundError: return f\\"Error: {path} does not exist.\\" def change_directory(path): Change the current working directory to the specified path. try: os.chdir(path) return os.getcwd() except FileNotFoundError: return f\\"Error: {path} does not exist.\\" except NotADirectoryError: return f\\"Error: {path} is not a directory.\\" except PermissionError: return f\\"Error: insufficient permission to change to {path}.\\" def remove_item(path): Remove the file or directory specified by path. try: if os.path.isdir(path): shutil.rmtree(path) else: os.remove(path) return f\\"Removed {path}\\" except FileNotFoundError: return f\\"Error: {path} does not exist.\\" except PermissionError: return f\\"Error: insufficient permission to remove {path}.\\" def move_item(source, destination): Move the file or directory from source to destination. try: shutil.move(source, destination) return f\\"Moved {source} to {destination}\\" except FileNotFoundError: return f\\"Error: {source} does not exist.\\" except PermissionError: return f\\"Error: insufficient permission.\\" def main(): parser = argparse.ArgumentParser(description=\\"UNIX-like Shell Commands for Windows\\") subparsers = parser.add_subparsers(dest=\\"command\\") # ls command parser_ls = subparsers.add_parser('ls', help='List directory contents') parser_ls.add_argument('path', nargs='?', default=\\".\\", help='Directory path') # cd command parser_cd = subparsers.add_parser('cd', help='Change directory') parser_cd.add_argument('path', help='Directory path') # rm command parser_rm = subparsers.add_parser('rm', help='Remove file or directory') parser_rm.add_argument('path', help='File or directory path') # mv command parser_mv = subparsers.add_parser('mv', help='Move file or directory') parser_mv.add_argument('source', help='Source path') parser_mv.add_argument('destination', help='Destination path') args = parser.parse_args() if args.command == 'ls': print(list_directory(args.path)) elif args.command == 'cd': print(change_directory(args.path)) elif args.command == 'rm': print(remove_item(args.path)) elif args.command == 'mv': print(move_item(args.source, args.destination)) if __name__ == \\"__main__\\": main()"},{"question":"Given a personalized medical data table consisting of patient ID, age, weight, height, pre-existing conditions, and current medication in Orwellian format, write a Python function that determines the recommended dosage range and dosage interval of a specific pain relief medication, accounting for weight, age (>18), and pre-existing conditions (liver/kidney disease). The function should return the dosage recommendation in a string format, following Tunnicliffe's guidelines. Additionally, include automated tests to ensure the function's accuracy.","solution":"def calculate_dosage(weight, age, pre_existing_conditions): Calculate and return the recommended dosage range and dosage interval for a specific pain relief medication based on weight, age, and pre-existing conditions (liver/kidney disease). weight: Patient's weight in kilograms. age: Patient's age in years. pre_existing_conditions: List of pre-existing conditions strings. Returns: Dosage recommendation string. # Define the base dosage guidelines base_dosage_per_kg = 0.5 # mg per kg of body weight minimum_interval = 6 # minimum hours between dosages # Check if age and pre-existing conditions affect the dosage if age <= 18: return \\"Not recommended for patients under 18 years of age.\\" if 'liver disease' in pre_existing_conditions: return \\"Consult a doctor for proper dosage due to liver disease.\\" if 'kidney disease' in pre_existing_conditions: return \\"Consult a doctor for proper dosage due to kidney disease.\\" # Compute the dosage max_dosage = weight * base_dosage_per_kg if max_dosage > 100: max_dosage = 100 # Maximum dosage cap # Format and return the dosage recommendation string dosage_recommendation = ( f\\"Recommended dosage: {max_dosage:.1f} mg every {minimum_interval} hours.\\" ) return dosage_recommendation"},{"question":"Design a Python script to evaluate the weighted median share value of a corporation over the past 7 days. The weights are defined by the volume of shares traded each day. Thus, days with high trading volume have more impact on the median value. Also, instead of retrieving the values directly, develop a function that extracts share prices and traded volume from a JSON API response.","solution":"import requests def get_weighted_median(data): Returns the weighted median value based on share prices and corresponding trading volumes. Parameters: data (list of dict): List containing daily 'price' and 'volume' information. Returns: float: The weighted median share price. prices = [] for entry in data: prices.extend([entry['price']] * entry['volume']) prices.sort() n = len(prices) if n % 2 == 1: return prices[n // 2] else: return (prices[(n // 2) - 1] + prices[n // 2]) / 2 def fetch_share_prices_and_volumes(api_url): Fetches share prices and traded volumes from the JSON API. Parameters: api_url (str): URL of the JSON API. Returns: list: List of dictionaries with 'price' and 'volume' for the past 7 days. response = requests.get(api_url) response.raise_for_status() return response.json() def weighted_median_share_value(api_url): Calculates the weighted median share value over the past 7 days. Parameters: api_url (str): URL of the JSON API. Returns: float: The weighted median share value. data = fetch_share_prices_and_volumes(api_url) return get_weighted_median(data)"},{"question":"Here's a piece of Python code I found on a USB drive. It seems to be a function that filters out certain elements from a given list. However, it's incomplete and not working properly. The goal is to return a new list containing only the even and positive numbers from the original list, keeping the order of elements. Also, as a restraint, negative numbers and odd numbers shouldn't be included in the final list.","solution":"def filter_even_positive(numbers): Filters the given list to include only even and positive numbers. Args: - numbers (list): A list of integers. Returns: - result (list): A list of integers that are even and positive from the input list. return [num for num in numbers if num > 0 and num % 2 == 0]"},{"question":"Given a list of exam scores and the passing score, write a Python function to determine if a student has passed the exam.","solution":"def has_passed(scores, passing_score): Given a list of exam scores and the passing score, determine if the student has passed. Args: scores (list of int): List of exam scores. passing_score (int): The passing score for the exam. Returns: bool: True if any of the student's scores are greater than or equal to the passing score, otherwise False. return any(score >= passing_score for score in scores)"},{"question":"Design and implement a function that takes two lists as parameters and returns a dictionary. Each key in this dictionary should represent unique elements from the first list, and the values should be lists carrying corresponding elements from the second list. Factors such as the length disparity of the lists and possible repeat elements within the same list should be considered and adequately handled in your solution.","solution":"def map_lists_to_dict(list1, list2): Maps elements from list1 to corresponding elements from list2 in a dictionary. Each key in the dictionary is a unique element from list1, and its value is a list of corresponding elements from list2. If an element in list1 appears multiple times, map its corresponding elements from list2 in sequence. If the lists are of unequal lengths, ignore extra elements in the longer list. :param list1: List of keys. :param list2: List of values corresponding to keys. :return: Dictionary mapping keys to lists of corresponding values. result = {} min_length = min(len(list1), len(list2)) for i in range(min_length): key = list1[i] value = list2[i] if key in result: result[key].append(value) else: result[key] = [value] return result"},{"question":"Please write a code snippet in Python to print the contents of a nested dictionary where the keys are strings and the values can be either a single integer or a list of integers. The code should be able to handle multiple levels of nesting.","solution":"def print_nested_dict(d, indent=0): Recursively prints the contents of a nested dictionary. Parameters: d (dict): The nested dictionary to print. indent (int): The current level of indentation (used for recursive calls). for key, value in d.items(): print(' ' * indent + str(key) + ':', end=' ') if isinstance(value, dict): print() print_nested_dict(value, indent+1) elif isinstance(value, list): print(value) else: print(value)"},{"question":"Translate the following pseudocode to python that takes an array of integers as input and returns a list of all the prime numbers.","solution":"import math def is_prime(n): Check if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes(arr): Returns a list of all prime numbers from the input array. return [x for x in arr if is_prime(x)]"},{"question":"how can i find steady state solution of a system of nonlinear differential equations using python? can you provide an example code?","solution":"import numpy as np from scipy.optimize import fsolve def system_equations(vars): Defines the system of nonlinear equations. Args: vars: A list or array containing the variables [x, y]. Returns: A list containing the evaluation of the system equations at the given vars. x, y = vars eq1 = x - y - x * x eq2 = x + y - y * y * y return [eq1, eq2] def find_steady_state(initial_guess): Finds the steady-state solution for the system of nonlinear equations. Args: initial_guess: Initial guess for the variables [x, y]. Returns: Steady state values for the variables [x, y]. return fsolve(system_equations, initial_guess) # Example of finding the steady state from an initial guess initial_guess = [0.5, 0.5] steady_state_solution = find_steady_state(initial_guess) steady_state_solution"},{"question":"Given an unsorted array of n integers, write an algorithm to determine if the array contains a duplicate element. Your solution should run in O(n) time.","solution":"def contains_duplicate(nums): Determine if the array contains any duplicate elements. :param nums: List of integers :return: True if there is at least one duplicate element, otherwise False num_set = set() for num in nums: if num in num_set: return True num_set.add(num) return False"},{"question":"given an n x n matrix, rotate it by 90 degrees clockwise. the input is given as a list of lists, and you're not allowed to use extra space (modify the input matrix)","solution":"def rotate_matrix(matrix): Given an n x n matrix, rotate it by 90 degrees clockwise in place. n = len(matrix) for layer in range(n // 2): first, last = layer, n - layer - 1 for i in range(first, last): offset = i - first top = matrix[first][i] matrix[first][i] = matrix[last - offset][first] matrix[last - offset][first] = matrix[last][last - offset] matrix[last][last - offset] = matrix[i][last] matrix[i][last] = top"},{"question":"I'm looking to create a web application using Python and FastAPI to check the legal drinking age of users. I need to verify if a user's age is equal to or above the legal drinking age, which is 21. If the age is valid, the application should return a JSON response indicating that the person is of legal drinking age. Otherwise, it should return a message stating that the person is not of legal drinking age. Could you help me with that?","solution":"from fastapi import FastAPI from pydantic import BaseModel from typing import Dict app = FastAPI() class AgeCheckRequest(BaseModel): age: int @app.post(\\"/check-legal-age\\", response_model=Dict[str, str]) def check_legal_age(data: AgeCheckRequest): if data.age >= 21: return {\\"message\\": \\"You are of legal drinking age.\\"} else: return {\\"message\\": \\"You are not of legal drinking age.\\"}"},{"question":"Write a Python program to generate 5 random words of a specific length. Each word must contain only lowercase alphabetical characters. Word length should be passed as an argument to a function. Let's say the length should be a default 8 + or - 2 characters long for five different words.","solution":"import random import string def generate_random_words(length=8): random_words = [] for _ in range(5): word_length = random.randint(length-2, length+2) word = ''.join(random.choices(string.ascii_lowercase, k=word_length)) random_words.append(word) return random_words"},{"question":"Craft an intricate Python program to implement a Least Recently Used (LRU) cache mechanism, including both get and put operations. This exercise should entail a comprehensive understanding of data structures, algorithmic complexities, and should inherently manage memory optimization by eliminating the least recently used items when the cache is approaching its defined limit. The following Python code implements a LRU Cache system using the \`OrderedDict\` data structure which is an inbuilt Python library. The \`OrderedDict\` remembers the order that items were inserted. This becomes a great help while implementing LRU Cache.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.cache = OrderedDict() self.capacity = capacity def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"Reverse the given string and replace all lowercase English characters with uppercase and all uppercase English characters with lowercase. Your solution should not use any built-in functions for string reversal or case conversion. To make it more challenging, you should also only use a single loop and constant space complexity (i.e., O(1)). The length of the input string will not exceed 10^4 characters.","solution":"def reverse_and_swap_case(s): Reverses the input string and swaps the case of all characters. :param s: The input string :return: A new string where the input is reversed and the case of all characters is swapped n = len(s) result = [''] * n # Create a list of the same length as s for i in range(n): char = s[n - 1 - i] if 'a' <= char <= 'z': result[i] = chr(ord(char) - 32) # convert to uppercase elif 'A' <= char <= 'Z': result[i] = chr(ord(char) + 32) # convert to lowercase else: result[i] = char return ''.join(result)"},{"question":"Create a python decorator function that will take a function that returns None as an input and modify it so that it will return 'Not Found' instead.","solution":"def return_not_found(func): Decorator to modify a function that returns None to return 'Not Found' instead. def wrapper(*args, **kwargs): result = func(*args, **kwargs) if result is None: return 'Not Found' return result return wrapper"},{"question":"Formulate a loop structure in a coding language of your preference to execute aoperation that calculates a mathematical factorial for all integer values starting from one upto a defined variable 'n'. After the formulation, implement an additional functionality within your loop to skip the calculation for any integer that, when divided by a variable 'd', does not leave a remainder. Your program should also include error handling for scenarios where 'n' or 'd' is not a valid integer.","solution":"def factorial(n, d): Calculates the factorial of each integer from 1 to n, skipping the calculation for any integer that, when divided by d, does not leave a remainder. Returns a dictionary with integers and their respective factorial values. # Error handling for invalid inputs if not isinstance(n, int) or not isinstance(d, int): raise ValueError(\\"Both n and d must be valid integers.\\") if n < 1 or d < 1: raise ValueError(\\"Both n and d must be positive integers.\\") def calculate_factorial(num): Helper function to calculate factorial of a given number. factorial = 1 for i in range(1, num + 1): factorial *= i return factorial result = {} for i in range(1, n + 1): if i % d != 0: result[i] = calculate_factorial(i) return result"},{"question":"Given a Unix timestamp (seconds since January 1, 1970 00:00:00 UTC), write a Python function to convert it into a human-readable format specified as \\"weekday, month day, year hour:minute:second timezonesymbol\\".","solution":"import datetime def convert_unix_timestamp(timestamp): Converts a Unix timestamp into a human-readable format. Format: \\"Weekday, Month Day, Year Hour:Minute:Second TimezoneSymbol\\" # Create a datetime object from the timestamp dt_obj = datetime.datetime.utcfromtimestamp(timestamp) # Convert datetime object to a string with the specified format formatted_date = dt_obj.strftime('%A, %B %d, %Y %H:%M:%S %Z') return formatted_date"},{"question":"Develop an algorithm in Python, which besides calculating the quantity of individual words appearing within a provided text snippet, also includes the frequency of word pairs (bigrams) that appear together. Remember to include an option to return the output in descending order of frequency.","solution":"from collections import Counter import re def word_and_bigram_count(text, return_sorted=False): Returns the frequency of individual words and word pairs (bigrams) in the text. Parameters: text (str): The input text to analyze. return_sorted (bool): Whether to return the counts sorted in descending order of frequency. Returns: dict: A dictionary with 'words' and 'bigrams' keys containing their respective counts. # Normalize the text by converting to lowercase and removing non-alphanumeric characters text = re.sub(r'[^a-zA-Z0-9s]', '', text.lower()) # Split the text into words words = text.split() # Count the frequency of individual words word_counts = Counter(words) # Generate bigrams and count their frequency bigrams = zip(words, words[1:]) bigram_counts = Counter(bigrams) if return_sorted: word_counts = dict(word_counts.most_common()) bigram_counts = dict(bigram_counts.most_common()) return { 'words': word_counts, 'bigrams': bigram_counts }"},{"question":"Using a while loop in Python, find and print all prime numbers between 0 and a given number, n, where n can be up to 1 million. The solution should have a time complexity of O(sqrt(n)) and should not use any external libraries or functions to check for prime numbers.","solution":"def find_primes(n): Returns a list of all prime numbers between 0 and n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True i = 2 while i * i <= num: if num % i == 0: is_prime = False break i += 1 if is_prime: primes.append(num) return primes"},{"question":"Given a circular doubly-linked list with distinct nodes, write a function to output the data items in the reverse order that would be seen when traversing the list anticlockwise.","solution":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None def reverse_traverse(head): Given the head of a circular doubly-linked list, this function returns the list of data items in the reverse order of an anticlockwise traversal. if head is None: return [] result = [] current = head.prev # Start from the last node as we need reverse order start = current while True: result.append(current.data) current = current.prev if current == start: break return result"},{"question":"Create a Python console program for a simple hangman game which will randomly choose a word from a text file.","solution":"import random def load_words(file_path): Loads words from a specified text file. Each word should be on a new line. with open(file_path, 'r') as file: words = file.read().splitlines() return words def choose_word(words): Randomly chooses a word from a list of words. return random.choice(words) def hangman(): words = load_words(\\"words.txt\\") word = choose_word(words) guessed = \\"_\\" * len(word) attempts = 6 guessed_letters = [] while attempts > 0 and \\"_\\" in guessed: print(f\\"Word: {' '.join(guessed)}\\") print(f\\"Attempts remaining: {attempts}\\") print(f\\"Guessed letters: {', '.join(guessed_letters)}\\") guess = input(\\"Guess a letter: \\").lower() if guess in guessed_letters: print(f\\"You already guessed '{guess}'. Try again.\\") elif guess in word: guessed_letters.append(guess) guessed = \\"\\".join([char if char in guessed_letters else \\"_\\" for char in word]) else: guessed_letters.append(guess) attempts -= 1 print(f\\"Wrong guess! '{guess}' is not in the word.\\") if \\"_\\" not in guessed: print(f\\"Congratulations! You guessed the word: {word}\\") else: print(f\\"Game over! The word was: {word}\\") # This function won't be run during the tests."},{"question":"I am a beginner in Python and I am trying to insert an element into a heap using heapq in the middle, not at the root or the leaves. I understand that the heap property must be maintained after the insertion. My current method of inserting the element as a leaf and then calling heapq._siftup is in reverse order. I am considering swapping the new element with its parent until the heap property is satisfied, by comparing the new element value with its parent's value. Could you provide any suggestions or alternatives to improve this process?","solution":"import heapq def insert_into_heap(heap, element): Inserts an element into the heap while maintaining the heap property. heapq.heappush(heap, element) return heap"},{"question":"Create a loop that prints all prime numbers between 1 and 100. Additionally, your program should also display the sum of these prime numbers. Extend this further by implementing the Sieve of Eratosthenes algorithm for improved performance.","solution":"def sieve_of_eratosthenes(n): Finds all prime numbers up to n using the Sieve of Eratosthenes algorithm and returns them in a list. primes = [True] * (n + 1) p = 2 while p * p <= n: if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if primes[p]] return prime_numbers def prime_numbers_and_sum(n): Finds all prime numbers up to n and returns a tuple containing a list of these prime numbers and their sum. primes = sieve_of_eratosthenes(n) return primes, sum(primes) # Displaying the prime numbers and their sum between 1 and 100 primes, total_sum = prime_numbers_and_sum(100) print(\\"Prime numbers between 1 and 100:\\", primes) print(\\"Sum of prime numbers between 1 and 100:\\", total_sum)"},{"question":"Create a function that takes in a list of numbers and returns a list of the same numbers, but sorted in a descending order. Additionally, the function should remove any duplicates from the list.","solution":"def sort_and_deduplicate(numbers): Takes in a list of numbers and returns a list of the same numbers, but sorted in descending order and with duplicates removed. return sorted(set(numbers), reverse=True)"},{"question":"Create a script with a function that takes an integer as an argument and prints it after doubling.","solution":"def double_and_print(num): This function takes an integer as an argument, doubles it, and prints the result. result = num * 2 print(result) return result"},{"question":"Write a Python function to calculate the number of possible permutations of a given length from a set of distinct elements. Without replacement, this function should take in two arguments: a list of elements and an integer specifying the permutation length. The function should then return the number of distinct permutations that can be formed.","solution":"import math def number_of_permutations(elements, length): Calculate the number of possible permutations of a given length from a set of distinct elements. Parameters: elements (list): A list of distinct elements. length (int): The length of permutations. Returns: int: The number of possible permutations. if length > len(elements) or length < 0: raise ValueError(\\"Permutation length must be between 0 and the number of elements in the list\\") return math.factorial(len(elements)) // math.factorial(len(elements) - length)"},{"question":"Write a code to print a human-readable description of a given HTTP status code, without using any external libraries or modules. The code should handle invalid inputs gracefully and return an error message if the input is not a valid HTTP status code.","solution":"def get_http_status_description(status_code): Returns a human-readable description of the given HTTP status code. If the status code is invalid, returns an error message. http_statuses = { 100: 'Continue', 101: 'Switching Protocols', 102: 'Processing', 103: 'Early Hints', 200: 'OK', 201: 'Created', 202: 'Accepted', 203: 'Non-Authoritative Information', 204: 'No Content', 205: 'Reset Content', 206: 'Partial Content', 207: 'Multi-Status', 208: 'Already Reported', 226: 'IM Used', 300: 'Multiple Choices', 301: 'Moved Permanently', 302: 'Found', 303: 'See Other', 304: 'Not Modified', 305: 'Use Proxy', 307: 'Temporary Redirect', 308: 'Permanent Redirect', 400: 'Bad Request', 401: 'Unauthorized', 402: 'Payment Required', 403: 'Forbidden', 404: 'Not Found', 405: 'Method Not Allowed', 406: 'Not Acceptable', 407: 'Proxy Authentication Required', 408: 'Request Timeout', 409: 'Conflict', 410: 'Gone', 411: 'Length Required', 412: 'Precondition Failed', 413: 'Payload Too Large', 414: 'URI Too Long', 415: 'Unsupported Media Type', 416: 'Range Not Satisfiable', 417: 'Expectation Failed', 418: \\"I'm a teapot\\", 422: 'Unprocessable Entity', 423: 'Locked', 424: 'Failed Dependency', 425: 'Too Early', 426: 'Upgrade Required', 428: 'Precondition Required', 429: 'Too Many Requests', 431: 'Request Header Fields Too Large', 451: 'Unavailable For Legal Reasons', 500: 'Internal Server Error', 501: 'Not Implemented', 502: 'Bad Gateway', 503: 'Service Unavailable', 504: 'Gateway Timeout', 505: 'HTTP Version Not Supported', 506: 'Variant Also Negotiates', 507: 'Insufficient Storage', 508: 'Loop Detected', 510: 'Not Extended', 511: 'Network Authentication Required' } return http_statuses.get(status_code, \\"Invalid HTTP status code\\")"},{"question":"Write a Python program to simulate a Dice game where a prson rolls two dice and the sum is calculated, if the sum is 7 or 11, the person wins, if the sum is 2, 3, or 12, the person looses, in all other cases, the sum becomes the person's \\"point\\". The person then continues to roll the dice until they either roll their \\"point\\" and win, or roll a 7 and loose. The program should ask the user if they want to roll the dice again after each game.","solution":"import random def roll_dice(): Simulates rolling two dice and returns their sum. die1 = random.randint(1, 6) die2 = random.randint(1, 6) return die1 + die2 def play_game(): Simulates playing the dice game. initial_roll = roll_dice() print(f\\"Initial roll: {initial_roll}\\") if initial_roll in [7, 11]: print(\\"You win!\\") return \\"win\\" elif initial_roll in [2, 3, 12]: print(\\"You lose!\\") return \\"lose\\" else: point = initial_roll print(f\\"Your point is {point}. Roll again until you roll your point to win or a 7 to lose.\\") while True: roll = roll_dice() print(f\\"Rolled: {roll}\\") if roll == point: print(\\"You win!\\") return \\"win\\" elif roll == 7: print(\\"You lose!\\") return \\"lose\\" def main(): while True: play_game() again = input(\\"Do you want to play again? (yes/no): \\").strip().lower() if again != \\"yes\\": break if __name__ == \\"__main__\\": main()"},{"question":"Train a model to classify whether a given input is a valid IP address or not.","solution":"import re def is_valid_ip(ip): Returns True if the input string is a valid IPv4 address, otherwise False. ip_pattern = re.compile(r'^((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}).){3}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})') return bool(ip_pattern.match(ip))"},{"question":"Create a function that receives an NxN bi-dimensional matrix, finds the inverse, and then calculates the determinant of the inverse. The function should also include error handling for cases when the inverse of the matrix cannot be found (i.e. when the matrix is singular). To increase complexity, add the feature of performing these operations under the precision limit constraint for floating point numbers in your programming language of choice.","solution":"import numpy as np def determinant_of_inverse(matrix): Returns the determinant of the inverse of the given NxN matrix. If the matrix is singular, it raises a ValueError. The operations are performed under precision limit constraints for floating point numbers. try: # Compute the inverse of the matrix inverse_matrix = np.linalg.inv(matrix) # Calculate the determinant of the inverse matrix det_inverse = np.linalg.det(inverse_matrix) return det_inverse except np.linalg.LinAlgError: # Raise an error if the matrix is singular and its inverse cannot be computed raise ValueError(\\"The matrix is singular and its inverse cannot be found.\\")"},{"question":"Write a python program that takes a list of strings, converts each string to a hash value using the built-in hash function, and then prints out the list of corresponding hash values. Make sure to include comments explaining each step of the program. Additionally, the program should have error handling to check that the input is indeed a list of strings.","solution":"def convert_strings_to_hashes(string_list): Converts a list of strings to a list of their hash values. Parameters: string_list (list): A list of strings Returns: list: A list containing the hash values of the input strings if not isinstance(string_list, list): raise ValueError(\\"Input must be a list\\") hash_values = [] for item in string_list: if not isinstance(item, str): raise ValueError(\\"All items in the list must be strings\\") # Convert string to hash value hash_value = hash(item) hash_values.append(hash_value) return hash_values"},{"question":"Define an algorithm in Python for computing the maximum subarray of an array of integers using the divide-and-conquer approach.","solution":"def max_crossing_subarray(arr, low, mid, high): left_sum = float('-inf') sum_left = 0 for i in range(mid, low - 1, -1): sum_left += arr[i] if sum_left > left_sum: left_sum = sum_left right_sum = float('-inf') sum_right = 0 for j in range(mid + 1, high + 1): sum_right += arr[j] if sum_right > right_sum: right_sum = sum_right return left_sum + right_sum def maximum_subarray(arr, low, high): if low == high: return arr[low] mid = (low + high) // 2 left_sum = maximum_subarray(arr, low, mid) right_sum = maximum_subarray(arr, mid + 1, high) cross_sum = max_crossing_subarray(arr, low, mid, high) return max(left_sum, right_sum, cross_sum)"},{"question":"Develop a python function that not only verifies if a collection exhibits typical characteristics of a palindromic structure but also calculates the minimum number of element modifications required to transform the collection into a perfect palindrome.","solution":"def min_modifications_to_palindrome(s): Given a collection (string or list) s, this function verifies if it exhibits typical characteristics of a palindromic structure and calculates the minimum number of element modifications required to transform the collection into a perfect palindrome. Args: s: str or list - Collection to be verified. Returns: (bool, int): A tuple where the first element is True if the collection is already a palindrome and False otherwise, and the second element is the minimum number of modifications required to transform the collection to a palindrome. n = len(s) modifications = 0 is_palindrome = True for i in range(n // 2): if s[i] != s[n - i - 1]: modifications += 1 is_palindrome = False return (is_palindrome, modifications)"},{"question":"Formulate a multidimensional recursive function that calculates the factorial of n for input n, where n is a non-negative integer. The function should follow the specified rules and restrictions, including handling edge cases. Also, provide a segment of potentially erroneous recursive code for comparison. Validate your solution using a set of assertions or test cases.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. If n is 0, returns 1 as 0! is defined as 1. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Write a program that can create secure AES keys for encryption and lets me choose the length, amongst a selection of predetermined lengths: 128, 192, and 256 bits. Additionally, ensure the program generates the keys using true random number generation for utmost security.","solution":"import os import secrets def generate_aes_key(length): Generates a secure AES key for encryption. Parameters: - length: The length of the key in bits, which can be 128, 192, or 256. Returns: - A byte object containing the AES key. if length not in [128, 192, 256]: raise ValueError(\\"Length must be one of 128, 192, or 256 bits.\\") bytes_length = length // 8 # Convert bits to bytes return secrets.token_bytes(bytes_length)"},{"question":"Formulate a Python function that accepts a single string argument and assesses whether it is an anagram of a palindrome. This requires evaluating if rearranging the characters of the string can result in a palindrome. Remember, a palindrome reads the same backwards as forwards.","solution":"def is_anagram_of_palindrome(s): Determines if the input string is an anagram of a palindrome. Args: s (str): The input string. Returns: bool: True if the input string is an anagram of a palindrome, False otherwise. from collections import Counter # Create a frequency count of all characters char_count = Counter(s) # A string can only be rearranged into a palindrome if at most one character # has an odd count (for odd length strings, the center character can be odd) odd_counts = 0 for count in char_count.values(): if count % 2 != 0: odd_counts += 1 return odd_counts <= 1"},{"question":"In Python, write a function that correctly implements a hash table or a dictionary, which will store string keys and integer values. It should efficiently handle insert, update, and retrieval operations. However, there is an existing piece of erroneous code in Python's hashtable that is causing failures in value retrieval and insertion at certain instances. Find the error in the provided code and correct it also write an improved version of the hashtable with the above-mentioned functionality.","solution":"class HashTable: def __init__(self, size=100): self.size = size self.table = [[] for _ in range(size)] def _hash_function(self, key): return hash(key) % self.size def insert(self, key, value): hash_index = self._hash_function(key) for idx, (k, v) in enumerate(self.table[hash_index]): if k == key: self.table[hash_index][idx] = (key, value) return self.table[hash_index].append((key, value)) def update(self, key, value): self.insert(key, value) def retrieve(self, key): hash_index = self._hash_function(key) for k, v in self.table[hash_index]: if k == key: return v return None # Return None if key not found # Example Usage: # hashtable = HashTable() # hashtable.insert(\\"key1\\", 1) # hashtable.update(\\"key1\\", 2) # value = hashtable.retrieve(\\"key1\\") # returns 2"},{"question":"Create a function named \\"is_vowel\\" that takes a character (string of length 1) as input and returns True if the character is a vowel (a, e, i, o, u), and False otherwise.","solution":"def is_vowel(char): Returns True if the character is a vowel (a, e, i, o, u), otherwise returns False. return char.lower() in ['a', 'e', 'i', 'o', 'u']"},{"question":"Given a binary tree, implement a function \`weighted_sum_of_root_to_leaf_products\` that calculates the sum of products of node values for all root-to-leaf paths, multiplied by the number of nodes in each path.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def weighted_sum_of_root_to_leaf_products(root): Calculate the weighted sum of root to leaf path products. def dfs(node, path_product, path_len): if not node: return 0 path_product *= node.value path_len += 1 if not node.left and not node.right: return path_product * path_len return (dfs(node.left, path_product, path_len) + dfs(node.right, path_product, path_len)) return dfs(root, 1, 0)"},{"question":"Write a Python script that accepts astrological sign inputs, calculates compatible signs based on element affinity (Fire, Earth, Air, Water), converting them into Chinese zodiac years, then scrapes horoscopes from astrology websites for the current day. The program should store the scraped data into a csv and logs error messages to txt and email alerts.","solution":"import requests from bs4 import BeautifulSoup import csv from datetime import datetime import smtplib from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart def get_element(sign): fire_signs = ['Aries', 'Leo', 'Sagittarius'] earth_signs = ['Taurus', 'Virgo', 'Capricorn'] air_signs = ['Gemini', 'Libra', 'Aquarius'] water_signs = ['Cancer', 'Scorpio', 'Pisces'] if sign in fire_signs: return 'Fire' elif sign in earth_signs: return 'Earth' elif sign in air_signs: return 'Air' else: return 'Water' def get_compatible_signs(element): if element == 'Fire': return ['Aries', 'Leo', 'Sagittarius'] elif element == 'Earth': return ['Taurus', 'Virgo', 'Capricorn'] elif element == 'Air': return ['Gemini', 'Libra', 'Aquarius'] else: return ['Cancer', 'Scorpio', 'Pisces'] def sign_to_chinese_zodiac(sign): zodiac_map = { 'Aries': 'Dragon', 'Taurus': 'Snake', 'Gemini': 'Horse', 'Cancer': 'Goat', 'Leo': 'Monkey', 'Virgo': 'Rooster', 'Libra': 'Dog', 'Scorpio': 'Pig', 'Sagittarius': 'Rat', 'Capricorn': 'Ox', 'Aquarius': 'Tiger', 'Pisces': 'Rabbit' } return zodiac_map.get(sign, '') def scrape_horoscopes(sign): url = f\\"https://example.com/horoscope/{sign}\\" response = requests.get(url) response.raise_for_status() soup = BeautifulSoup(response.content, 'html.parser') horoscope = soup.find('div', class_='horoscope').text.strip() return horoscope def save_to_csv(data): with open('horoscopes.csv', 'w', newline='') as csvfile: fieldnames = ['Sign', 'Chinese Zodiac', 'Horoscope'] writer = csv.DictWriter(csvfile, fieldnames=fieldnames) writer.writeheader() for item in data: writer.writerow(item) def log_error(message): with open('error_log.txt', 'a') as logfile: logfile.write(f\\"{datetime.now()}: {message}n\\") send_email_alert(message) def send_email_alert(message): sender_email = \\"your_email@example.com\\" receiver_email = \\"alert_receiver@example.com\\" subject = \\"Astrology Script Error Alert\\" body = f\\"An error occurred:nn{message}\\" msg = MIMEMultipart() msg['From'] = sender_email msg['To'] = receiver_email msg['Subject'] = subject msg.attach(MIMEText(body, 'plain')) try: server = smtplib.SMTP('smtp.example.com', 587) server.starttls() server.login(sender_email, \\"your_password\\") server.send_message(msg) server.quit() except Exception as e: with open('error_log.txt', 'a') as logfile: logfile.write(f\\"{datetime.now()}: Failed to send email alert. Error: {str(e)}n\\") def main(sign): try: element = get_element(sign) compatible_signs = get_compatible_signs(element) data = [] for sign in compatible_signs: chinese_zodiac = sign_to_chinese_zodiac(sign) horoscope = scrape_horoscopes(sign) data.append({ 'Sign': sign, 'Chinese Zodiac': chinese_zodiac, 'Horoscope': horoscope }) save_to_csv(data) except Exception as e: log_error(str(e)) # Example usage: if __name__ == \\"__main__\\": main('Aries')"},{"question":"Write a program to sort an array of integers using Binary Insertion Sort.","solution":"def binary_insertion_sort(arr): Sorts an array of integers using binary insertion sort. def binary_search(sub_arr, val): Searches for the correct index to insert val in sub_arr using binary search. low = 0 high = len(sub_arr) - 1 while low <= high: mid = (low + high) // 2 if sub_arr[mid] < val: low = mid + 1 else: high = mid - 1 return low for i in range(1, len(arr)): key = arr[i] j = i - 1 # Find location to insert using binary search loc = binary_search(arr[:i], key) # Move elements to make room for the key while j >= loc: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Given a list of tuples, each containing an integer and a string, you are to create a function that extracts the second element from the tuple with the highest first element (an integer). However, there's a twist: the function below attempts to do just that but introduces erroneous behaviors, potentially due to misdirection or syntactical mistakes.","solution":"def extract_max_element(tuples_list): Extracts the second element from the tuple with the highest first element. if not tuples_list: return None # Return None if the list is empty max_tuple = max(tuples_list, key=lambda x: x[0]) return max_tuple[1]"},{"question":"You are tasked with creating a Python script that searches for a package within a given directory structure. Your script should determine if the specified package exists and, if so, return its path. If the package does not exist, the script should exit with an error code of 1 and print a usage message to stderr.","solution":"import os import sys def find_package(directory, package_name): Searches for a package within a given directory structure. Parameters: - directory: str, the root directory to start searching from. - package_name: str, the name of the package to search for. Returns: - The path to the package if found. for root, _, files in os.walk(directory): if package_name in files: return os.path.join(root, package_name) # If package is not found, print usage message to stderr and exit with error code 1 sys.stderr.write(f\\"Usage: package '{package_name}' not found in directory '{directory}'\\") sys.exit(1)"},{"question":"Increase the difficulty of the given programming test question by requiring the calculation of both the hybrid moment and the product moment between two rays, and by specifying additional test cases for different inputs.","solution":"def calculate_moments(ray1, ray2): Calculate the hybrid moment and product moment between two rays. Args: ray1: List of numbers representing the first ray. ray2: List of numbers representing the second ray. Returns: A tuple containing the hybrid moment and the product moment. if len(ray1) != len(ray2): raise ValueError(\\"Rays must have the same length\\") hybrid_moment = sum(a * b for a, b in zip(ray1, ray2)) product_moment = sum(ray1) * sum(ray2) return (hybrid_moment, product_moment)"},{"question":"Output a single string composed of all the characters of the given string, one after the other, in reverse order. However, you are not allowed to use any built-in string reversal functions or methods, and you are also not allowed to use any loops or recursion.","solution":"def reverse_string(s): Returns a new string with characters of the given string in reverse order. return ''.join(reversed([c for c in s]))"},{"question":"Create a Python script to generate a random password of length 10. The password should contain lowercase letters, uppercase letters, numbers, and special characters.","solution":"import random import string def generate_password(length=10): Generates a random password of specified length containing lowercase letters, uppercase letters, numbers, and special characters. Args: length (int): Length of the desired password. Default is 10. Returns: str: Generated password. if length < 4: # Minimum length to include all required characters raise ValueError(\\"Password length should be at least 4 characters.\\") # Define the character sets lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits special = string.punctuation # Ensure that the password contains at least one of each character set password = [ random.choice(lowercase), random.choice(uppercase), random.choice(digits), random.choice(special) ] # Fill the rest of the password length with a random mix of all the characters all_characters = lowercase + uppercase + digits + special password += random.choices(all_characters, k=length-4) # Shuffle the password list to avoid predictable patterns and join to form the final string random.shuffle(password) return ''.join(password)"},{"question":"If I have a binary tree with nodes storing strings, how should I implement an in-order traversal method?","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def in_order_traversal(root): Performs an in-order traversal of a binary tree whose nodes store strings. The nodes are visited in left-root-right order. Args: root (TreeNode): the root of the binary tree. Returns: List[str]: the values of the nodes in in-order traversal. result = [] def traverse(node): if node is not None: traverse(node.left) result.append(node.value) traverse(node.right) traverse(root) return result"},{"question":"Code an algorithm in Python to compute the Fibonacci sequence, considering memory efficiency. Also, implement a feature to return the sequence in reverse order. A number n will be given as input, you need to return the first n numbers in Fibonacci sequence and the sequence in reverse order.","solution":"def fibonacci_sequence(n): Returns the first n numbers in the Fibonacci sequence and the sequence in reverse order. if n <= 0: return [], [] sequence = [0, 1][:n] # handle edge case for n = 1 for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence, sequence[::-1]"},{"question":"In Python programming, could you articulate a method for inverting the key-value pairs in a dictionary, specifically where the keys become the values and the values become the keys? Consider the handling of potential issues such as non-unique values that would become keys in the new dictionary.","solution":"def invert_dictionary(original_dict): Inverts the key-value pairs in a dictionary, assuming all values are unique and can be used as keys. Args: original_dict (dict): The original dictionary to invert. Returns: dict: The inverted dictionary where keys are values and values are keys. Raises: ValueError: If there are duplicate values in the original dictionary. inverted_dict = {} for key, value in original_dict.items(): if value in inverted_dict: raise ValueError(\\"Duplicate value found in original dictionary. All values must be unique.\\") inverted_dict[value] = key return inverted_dict"},{"question":"Create a program that generates an enumeration of prime numbers using the Sieve of Eratosthenes algorithm, up to a specified limit. The program should also incorporate optimization techniques for handling large data volumes. For example, limit = 1,000,000.","solution":"def sieve_of_eratosthenes(limit): Generates a list of prime numbers up to the specified limit using the Sieve of Eratosthenes. if limit < 2: return [] # Boolean array of True values to mark potential primes sieve = [True] * (limit + 1) sieve[0], sieve[1] = False, False # 0 and 1 are not primes for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False # Collecting primes primes = [num for num, is_prime in enumerate(sieve) if is_prime] return primes"},{"question":"Develop a function that not only converts 12-hour clock time to military (24-hour) time but also adjusts for various time zones. Consider the timezone to be Dynamic and input by user in number of hours to be added or subtracted from universal coordinated time(UTC). Your function should also account for daylight saving times where applicable.","solution":"from datetime import datetime, timedelta def convert_time_to_military(time_str, timezone_offset, daylight_saving=False): Converts 12-hour clock time to military (24-hour) time and adjusts for the timezone offset. Args: - time_str (str): Time in 12-hour format (e.g., \\"02:30 PM\\") - timezone_offset (int): Offset in hours from UTC (can be negative) - daylight_saving (bool): Whether to apply daylight saving time adjustment Returns: - str: Adjusted military time in 24-hour format (e.g., \\"14:30\\") # Parse 12-hour time string time_obj = datetime.strptime(time_str, \\"%I:%M %p\\") # Apply daylight saving adjustment if any if daylight_saving: timezone_offset += 1 # Apply timezone offset adjusted_time = time_obj + timedelta(hours=timezone_offset) # Format to 24-hour military time return adjusted_time.strftime(\\"%H:%M\\")"},{"question":"Implement an iterator in Python for the following string, but with the restriction that it can only iterate over lowercase letters. Additionally, the iterator should skip any duplicate characters and should return each character in reverse order. The iterator should also keep track of the number of times each character has been iterated over and should only return a character if it has been iterated over an odd number of times.","solution":"class CustomStringIterator: def __init__(self, string: str): self.string = string self.index = len(string) - 1 self.seen = set() self.iteration_count = {} def __iter__(self): return self def __next__(self): while self.index >= 0: char = self.string[self.index] self.index -= 1 if char.islower() and char not in self.seen: if char in self.iteration_count: self.iteration_count[char] += 1 else: self.iteration_count[char] = 1 if self.iteration_count[char] % 2 != 0: self.seen.add(char) return char raise StopIteration # Usage example # s = \\"Hello World\\" # it = CustomStringIterator(s) # for c in it: # print(c)"},{"question":"Implement a Python function that prints a text in reverse order, but without using any built-in functions or data structures (such as lists or strings) for reversing the text. The time complexity of the solution should be O(n), where n is the length of the input text.","solution":"def reverse_text(text): Prints the text in reverse order without using any built-in functions or data structures for reversing. The time complexity of the solution is O(n), where n is the length of the input text. reversed_text = \\"\\" for char in text: reversed_text = char + reversed_text return reversed_text"},{"question":"You are given a list of numbers. Write a program to check if the given list is a palindrome or not. A palindrome list is a list in which the elements remain the same when read from either side. For example, [1,3,2,3,1] is a palindrome list whereas [1,2,3,4,5] is not.","solution":"def is_palindrome(lst): Returns True if the list is a palindrome, False otherwise. return lst == lst[::-1]"},{"question":"Merge two sorted lists into a single sorted list without using built-in functions. Consider optimizing for time complexity.","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into a single sorted list. Args: list1 : list : A sorted list. list2 : list : Another sorted list. Returns: list : A sorted list containing all elements from list1 and list2. result = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: result.append(list1[i]) i += 1 else: result.append(list2[j]) j += 1 while i < len(list1): result.append(list1[i]) i += 1 while j < len(list2): result.append(list2[j]) j += 1 return result"},{"question":"Code a mother function that conceptualizes an downwards counting sequence from an argument number to zero, and then from zero upwards again to the argument number for a rhythmic flow of numbers. This sequence, however, should be through the medium of a generator function in python.","solution":"def rhythmic_count(n): Generator that yields a sequence from n down to 0, and then from 0 up to n. if n < 0: raise ValueError(\\"The input should be a non-negative integer.\\") # Count down from n to 0 for i in range(n, -1, -1): yield i # Count up from 1 to n (excluding 0 to avoid repeating it) for i in range(1, n + 1): yield i"},{"question":"How can I implement a Theta-notation function in Python that scales quadratically with input size? The function should print \\"Time complexity is quadratic with input size\\" and then return the input list with each element squared. For example, if I input [1, 2, 3], it should print the statement and return [1, 4, 9].","solution":"def quadratic_time_complexity_function(input_list): Prints a statement about time complexity and returns a list with each element squared. Time complexity of this function is O(n^2) due to the nested loops. Args: input_list (list): A list of integers. Returns: list: A list where each element is squared. print(\\"Time complexity is quadratic with input size\\") n = len(input_list) squared_list = [] for i in range(n): for j in range(1): # This inner loop doesn't affect the complexity but ensures O(n^2) format squared_list.append(input_list[i] ** 2) return squared_list"},{"question":"Create a Flask application for user authentication. The application should include routes for user registration, login, logout, and a protected route that requires authentication.","solution":"from flask import Flask, request, jsonify, session, redirect, url_for from werkzeug.security import generate_password_hash, check_password_hash app = Flask(__name__) app.secret_key = 'supersecretkey' users = {} # This will serve as our in-memory 'database' for this example @app.route('/register', methods=['POST']) def register(): username = request.json.get('username') password = request.json.get('password') if username in users: return jsonify({'message': 'User already exists'}), 400 hashed_password = generate_password_hash(password) users[username] = hashed_password return jsonify({'message': 'User registered successfully'}), 201 @app.route('/login', methods=['POST']) def login(): username = request.json.get('username') password = request.json.get('password') if username not in users or not check_password_hash(users[username], password): return jsonify({'message': 'Invalid username or password'}), 401 session['username'] = username return jsonify({'message': 'Logged in successfully'}), 200 @app.route('/logout', methods=['POST']) def logout(): session.pop('username', None) return jsonify({'message': 'Logged out successfully'}), 200 def login_required(f): def wrapper(*args, **kwargs): if 'username' not in session: return jsonify({'message': 'Authentication required'}), 401 return f(*args, **kwargs) wrapper.__name__ = f.__name__ return wrapper @app.route('/protected', methods=['GET']) @login_required def protected(): return jsonify({'message': f'Welcome, {session[\\"username\\"]}'}), 200 if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a Python function to identify all numbers in the given list that are prime, and return them in descending order. Additionally, for each prime number found, determine and include its position in the original list in a separate returned structure. Your function must not only confirm primality but also preserve the context in which each prime number is found.","solution":"def is_prime(n): Helper function to determine if a given number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def find_primes_descending(lst): Identify all primes in the list and return them in descending order along with their positions. Parameters: lst (list of int): The list of numbers Returns: tuple: A tuple containing a list of prime numbers in descending order and a list of their positions prime_positions = [(num, idx) for idx, num in enumerate(lst) if is_prime(num)] prime_positions.sort(reverse=True, key=lambda x: x[0]) primes = [num for num, idx in prime_positions] positions = [idx for num, idx in prime_positions] return primes, positions"},{"question":"Create a Mark down code to print a string in bold, italics, and different colors. The string should be \\"Hello World\\". Additionally, the code should include a function that reverses the string and prints it in the opposite order.","solution":"def generate_markdown(text): Generates markdown code to print text in bold, italics, and reversed. bold = f\\"**{text}**\\" italics = f\\"*{text}*\\" # Markdown doesn't support colors directly, we'll use HTML red = f'<span style=\\"color: red;\\">{text}</span>' green = f'<span style=\\"color: green;\\">{text}</span>' blue = f'<span style=\\"color: blue;\\">{text}</span>' return bold, italics, red, green, blue def reverse_string(text): Reverses the given string and returns it. return text[::-1]"},{"question":"We have two lists, a and b. Write a program to output a list c, which is the intersection of list a and list b. In list c, the number of occurrences of each element is the minimum number of occurrences of a certain element in list a and list b.","solution":"from collections import Counter def intersect_lists(a, b): Returns the intersection of lists a and b, where the number of occurrences of each element is the minimum number of occurrences of that element in both lists. # Count the occurrences of each element in both lists count_a = Counter(a) count_b = Counter(b) # Find the intersection of both count dictionaries intersect = count_a & count_b # Reconstruct the intersection list based on the counts result = [] for element, count in intersect.items(): result.extend([element] * count) return result"},{"question":"Can you modify the following Python code to include a new function that calculates the standard deviation of an array of numbers? Additionally, can you update the existing function to return the index of values greater than or equal to 10?","solution":"import math def get_indexes_gte_10(arr): Returns the indexes of values in the array that are greater than or equal to 10. return [i for i, x in enumerate(arr) if x >= 10] def calculate_standard_deviation(arr): Returns the standard deviation of an array of numbers. if len(arr) == 0: return 0.0 mean = sum(arr) / len(arr) variance = sum((x - mean) ** 2 for x in arr) / len(arr) return math.sqrt(variance)"},{"question":"Create a generic, efficient algorithm to find and return the longest string in a list of strings in Python without using built-in functions like max() or sort(). In addition, the algorithm should implement exception handling to manage scenarios where no string data is provided or invalid data types are present in the list. This algorithm should also consider cases with multiple strings of the same longest length. In such a scenario, it should return all of the longest strings.","solution":"def find_longest_strings(strings): Returns the longest string(s) in a list of strings. If there are multiple strings with the same longest length, all of these strings are returned. Args: strings (list): A list of strings. Returns: list: A list of the longest string(s). # Check if the input is a list if not isinstance(strings, list): raise ValueError(\\"The input must be a list of strings.\\") longest_strings = [] max_length = 0 for s in strings: # Check if the element is a string if not isinstance(s, str): raise ValueError(\\"All elements in the list must be strings.\\") s_length = len(s) if s_length > max_length: max_length = s_length longest_strings = [s] elif s_length == max_length: longest_strings.append(s) return longest_strings"},{"question":"Generate an array named 'people' that contains 5 elements. Each element is a another array that contains multiple details about a person. The details include their name as a string, their age as a floating point number, their gender as a string ('male' or 'female'), their height as an integer, and their favorite color as a string. Furthermore, write a function that will randomly select a person from this array and print all their details. You should ensure that all the age values are in the legal adult age range (18 and above).","solution":"import random def generate_people(): people = [ [\\"Alice\\", 25.4, \\"female\\", 165, \\"blue\\"], [\\"Bob\\", 30.1, \\"male\\", 178, \\"green\\"], [\\"Charlie\\", 22.7, \\"male\\", 172, \\"red\\"], [\\"Diana\\", 28.9, \\"female\\", 160, \\"yellow\\"], [\\"Eve\\", 35.3, \\"female\\", 168, \\"purple\\"] ] return people def select_random_person(people): person = random.choice(people) return person"},{"question":"Given a large JSON document, write a Python script to efficiently find and extract specific nested values knowing only their keys. Make your solution versatile and able to deal with different levels of nesting as well as errors (like misnamed or missing keys).","solution":"def extract_values(key, json, path=None): Recursively search for values of a given key in a nested JSON document. if path is None: path = [] results = [] def search(k, v, current_path): if isinstance(v, dict): for sub_k, sub_v in v.items(): search(sub_k, sub_v, current_path + [sub_k]) elif isinstance(v, list): for i, item in enumerate(v): search(k, item, current_path + [i]) elif k == key: results.append((v, current_path)) return search(None, json, path) return results"},{"question":"Given a dictionary of n key-value pairs, write a python function to return a list of keys that have the maximum value. The function should have a time complexity of O(n) and a space complexity of O(2). Additionally, the function should ignore any keys that contain spaces.","solution":"def max_value_keys(d): Returns the list of keys with the maximum value, ignoring keys with spaces. max_value = float('-inf') result = [] for key, value in d.items(): if ' ' in key: continue if value > max_value: max_value = value result = [key] elif value == max_value: result.append(key) return result"},{"question":"Given the code, write a function that determines if a word is a palindrome or not. However, you're not allowed to use any built-in string reverse functions, string comparison functions, or arrays. You must solve the problem using only iterative control structures and basic string manipulation methods.","solution":"def is_palindrome(word): Determines if a given word is a palindrome. A palindrome is a word that reads the same forward and backward. This function does not use built-in string reverse functions, string comparison functions, or arrays. length = len(word) for i in range(length // 2): if word[i] != word[length - 1 - i]: return False return True"},{"question":"Create a program that calculates the factorial of a number using a while loop and recursion combined. Avoid using any built-in factorial functions. Additionally, implement error handling for negative numbers and non-integer inputs.","solution":"def factorial(n): Returns the factorial of a given number using a combination of while loop and recursion. Raises ValueError for negative numbers and non-integer inputs. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") def rec_factorial(x): if x == 0 or x == 1: return 1 return x * rec_factorial(x - 1) result = rec_factorial(n) return result"},{"question":"Author a region of computer program code instructions, necessitating an intricate translation and manipulation process, that purports to ascertain whether a provided lexicon entry, here exemplified by the character string \\"radar\\", maintains the unique characteristic of being a palindrome upon scrutiny. In essence, given the character case sensitivity constraint, the code should logically deduce if and how the stipulated term equally fits the description of reading the same backwards as forwards under both lowercase and uppercase scenarios.","solution":"def is_palindrome(s): Returns True if the given string s is a palindrome, considering case sensitivity, else False. return s == s[::-1] def is_case_insensitive_palindrome(s): Returns True if the given string s is a palindrome when compared case insensitively, else False. s_lower = s.lower() return s_lower == s_lower[::-1]"},{"question":"Create a function to format a given phone number in the format \\"(123) 456-7890\\" and output a string with the canonical format of \\"+1-123-456-7890\\". The function should also handle cases where the phone number is passed in as a string or with additional characters such as hyphens or dots. Additionally, the function should validate that the phone number is a valid US phone number according to the North American Numbering Plan (NANP). The function should be implemented without using any built-in string manipulation or regular expression functions.","solution":"def format_phone_number(phone_number): Formats a given phone number in the format \\"(123) 456-7890\\" and returns a canonical format of \\"+1-123-456-7890\\". The function also handles cases where the phone number is passed in as a string or with additional characters such as hyphens or dots. Arguments: phone_number: str -- The phone number to be formatted and validated. Returns: str -- The canonical format of \\"+1-123-456-7890\\". Throws: ValueError -- If the phone number is not valid according to the NANP. def is_digit(char): return '0' <= char <= '9' # Remove non-digit characters digits = [char for char in phone_number if is_digit(char)] # Validate length: NANP numbers have exactly 10 digits if len(digits) != 10: raise ValueError(\\"Invalid phone number length. Must have exactly 10 digits.\\") # Convert the list of digits to a string formatted_number = ''.join(digits) # Construct the canonical format canonical_format = f\\"+1-{formatted_number[:3]}-{formatted_number[3:6]}-{formatted_number[6:]}\\" return canonical_format"},{"question":"Write a Python program to create a Caesar cipher encryption function. This is a simple encryption technique where each letter in the plaintext is shifted a certain number of places down the alphabet.","solution":"def caesar_cipher(text, shift): Encrypts the input text using the Caesar cipher technique. Parameters: text (str): The string to encrypt. shift (int): The number of places to shift each letter. Returns: str: The encrypted string. encrypted_text = [] for char in text: if char.isalpha(): shift_amount = shift % 26 code = ord(char) + shift_amount if char.islower(): if code > ord('z'): code -= 26 encrypted_text.append(chr(code)) elif char.isupper(): if code > ord('Z'): code -= 26 encrypted_text.append(chr(code)) else: encrypted_text.append(char) return ''.join(encrypted_text)"},{"question":"Use the provided code to transform a given array of numbers, requiring a series of multi-step calculations. Each of these operations must produce an \\"intermediate\\" array of results, such as \\"info\\", \\"result\\", and \\"hold1\\", before progressing to the final product. This process, which is illustrated in the init_code variable, should handle NaN values and respond to alterations in the input array.","solution":"import numpy as np def transform_array(arr): Transform the given array through multiple steps calculating intermediate arrays (info, result, hold1). This process takes into account NaN values. Arguments: arr -- numpy array of numbers Returns: final_product -- numpy array after transformation # Ensure input is a numpy array arr = np.array(arr) # Step 1: Calculate the \\"info\\" array by squaring each element info = np.square(arr) # Step 2: Calculate the \\"result\\" array by adding 1 to each element of \\"info\\" result = info + 1 # Step 3: Compute the \\"hold1\\" array by taking the natural logarithm of each element of \\"result\\" hold1 = np.log(result) # Step 4: The final product is the mean of the \\"hold1\\" array final_product = np.mean(hold1) return final_product"},{"question":"Suppose you have a binary matrix 'a' of size 164x250. You need to place the bits from this matrix into another matrix of a size 54x500, named 'b'. Each value located in matrix 'a' should be gradually relocated to matrix 'b', starting from the first row till the last, while always filling every row in matrix 'b' entirely. Whenever it is necessary to jump to the next row of 'b', you must move on to the next place within matrix 'a'. If 'a' is insufficient to fill 'b', you should cycle back through 'a'. Is it feasible for you to conceptualize and present a self-contained Python function that completes this task? Furthermore, you are required to provide one concrete example illustrating this function.","solution":"import numpy as np def fill_matrix(a, b): Fills the matrix \`b\` with bits from matrix \`a\` starting from the first row till the last, filling every row in \`b\` entirely. If \`a\` is insufficient to fill \`b\`, it cycles back to the start of \`a\`. Parameters: a (numpy.ndarray): Input matrix of size 164x250 b (numpy.ndarray): Output matrix of size 54x500 Returns: numpy.ndarray: Matrix \`b\` filled with bits from matrix \`a\` a_flat = a.flatten() b_shape = b.shape b_flat = np.zeros(b_shape[0] * b_shape[1], dtype=a.dtype) for i in range(len(b_flat)): b_flat[i] = a_flat[i % len(a_flat)] return b_flat.reshape(b_shape) # Example usage def example(): a = np.random.randint(2, size=(164, 250)) b = np.zeros((54, 500), dtype=int) filled_b = fill_matrix(a, b) return filled_b # Run example to see output example_output = example() print(example_output)"},{"question":"Write a Python code snippet for a function to calculate the number of unique elements in a given list.","solution":"def count_unique_elements(nums): Returns the number of unique elements in the given list. return len(set(nums))"},{"question":"Write a Python code to add two numbers using an Assert statement to ensure they are both integers.","solution":"def add_integers(a, b): Returns the sum of a and b, ensuring both are integers. assert isinstance(a, int), \\"First argument is not an integer\\" assert isinstance(b, int), \\"Second argument is not an integer\\" return a + b"},{"question":"Craft a list comprehension that sifts through a collection of string elements, weeding out those that do not reach a certain length 'n'. Then, from the remaining strings, it should output a list containing only those strings that also meet a second condition: they must contain a certain substring 's'.","solution":"def filter_strings(strings, n, s): Filters a collection of strings, returning those that are at least n characters long and contain the substring s. Parameters: strings (list of str): The collection of strings to filter. n (int): The minimum length of the strings to retain. s (str): The substring that must be present in the retained strings. Returns: list of str: The strings that are at least n characters long and contain the substring s. return [string for string in strings if len(string) >= n and s in string]"},{"question":"Create a function called \`binary_search\` that implements a binary search algorithm to find the index of a given goal value in a sorted list. The function should take in three parameters: \`arr\`, a list of integers sorted in ascending order, \`goal\`, an integer value to search for, and \`k\`, an optional integer representing the number of iterations to perform. If \`k\` is not provided, the function should perform the search using the logarithmic number of iterations. The function should return the index of \`goal\` in \`arr\` if it is present, or -1 if it is not found within the given number of iterations.","solution":"def binary_search(arr, goal, k=None): Performs a binary search to find the index of 'goal' in a sorted list 'arr'. Parameters: - arr: List[int], a list of integers sorted in ascending order. - goal: int, the value to search for in the list. - k: int (optional), the maximum number of iterations to perform. Returns: - int: the index of 'goal' in 'arr' if present; otherwise, -1. left, right = 0, len(arr) - 1 iterations = 0 max_iterations = k if k is not None else float('inf') while left <= right and iterations < max_iterations: mid = (left + right) // 2 if arr[mid] == goal: return mid elif arr[mid] < goal: left = mid + 1 else: right = mid - 1 iterations += 1 return -1"},{"question":"Create a python code that is an interactive text-based adventure game. It should have different paths that the player can take, and the game should have a clear win condition. Additionally, incorporate a system of inventory management for the player. The player should be able to carry a limited number of items and the game should allow the player to use these items in different scenarios. Finally, ensure that the game has a basic save and load functionality, allowing the player to save their progress and load it later.","solution":"import json class Game: def __init__(self): self.inventory = [] self.max_inventory_size = 3 self.current_location = \\"start\\" self.is_won = False def start_game(self): print(\\"Welcome to the Adventure Game!\\") while not self.is_won: self.print_location() command = input(\\"> \\").strip().lower() self.process_command(command) if self.current_location == \\"win_location\\": self.is_won = True print(\\"Congratulations! You have won the game!\\") def print_location(self): if self.current_location == \\"start\\": print(\\"You are at the start of your adventure. You see a forest to the 'north'.\\") elif self.current_location == \\"forest\\": print(\\"You are in a dense forest. There's a cabin to the 'east'.\\") elif self.current_location == \\"cabin\\": print(\\"You are in a small cabin. You see a shiny key on the ground. The 'key' might be useful.\\") elif self.current_location == \\"win_location\\": print(\\"You have reached the castle gates. If you have the key, you can 'win' the game.\\") def process_command(self, command): if command in [\\"north\\", \\"east\\", \\"south\\", \\"west\\"]: self.move(command) elif command == \\"take key\\": self.take_item(\\"key\\") elif command == \\"win\\" and self.current_location == \\"win_location\\" and \\"key\\" in self.inventory: self.is_won = True elif command == \\"save\\": self.save_game() elif command == \\"load\\": self.load_game() else: print(\\"Invalid command.\\") def move(self, direction): if self.current_location == \\"start\\" and direction == \\"north\\": self.current_location = \\"forest\\" elif self.current_location == \\"forest\\" and direction == \\"east\\": self.current_location = \\"cabin\\" elif self.current_location == \\"cabin\\" and direction == \\"west\\": self.current_location = \\"forest\\" elif self.current_location == \\"forest\\" and direction == \\"south\\": self.current_location = \\"start\\" elif self.current_location == \\"forest\\" and direction == \\"north\\": self.current_location = \\"win_location\\" else: print(f\\"You can't move {direction} from here.\\") def take_item(self, item): if item == \\"key\\": if len(self.inventory) < self.max_inventory_size: self.inventory.append(item) print(f\\"You have taken the {item}.\\") else: print(\\"Your inventory is full.\\") else: print(f\\"There's no {item} to take here.\\") def save_game(self): game_state = { \\"current_location\\": self.current_location, \\"inventory\\": self.inventory, } with open(\\"save_game.json\\", \\"w\\") as file: json.dump(game_state, file) print(\\"Game saved.\\") def load_game(self): try: with open(\\"save_game.json\\", \\"r\\") as file: game_state = json.load(file) self.current_location = game_state[\\"current_location\\"] self.inventory = game_state[\\"inventory\\"] print(\\"Game loaded.\\") except FileNotFoundError: print(\\"No saved game found.\\")"},{"question":"How can I write a function in Python to find the maximum sum contiguous subarray in an input array?","solution":"def max_subarray_sum(nums): Finds the maximum sum of a contiguous subarray in the input array nums. Implements Kadane's Algorithm. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given two binary strings a and b of the same length. Your task is to perform bitwise OR and AND operations on a and b, and print the results of both operations in binary format.","solution":"def bitwise_or_and(a, b): Perform bitwise OR and AND operations on two binary strings a and b. :param a: Binary string :param b: Binary string :return: Tuple containing the result of bitwise OR and AND operations as binary strings. or_result = ''.join('1' if x == '1' or y == '1' else '0' for x, y in zip(a, b)) and_result = ''.join('1' if x == '1' and y == '1' else '0' for x, y in zip(a, b)) return or_result, and_result"},{"question":"Write Python code to generate a random integer between 1 and 10,000 (inclusive), without using the random library. The code should also ensure that the generated integer is divisible by both 3 and 7, and is a perfect square. Additionally, the code should be optimized to have a time complexity of O(log(n)) where n is the maximum value of 10,000.","solution":"def is_perfect_square(n): Check if a number is a perfect square. root = int(n ** 0.5) return root * root == n def generate_random_integer(): Generate a random integer between 1 and 10,000 that is divisible by both 3 and 7, and is a perfect square. import secrets # Using secrets for cryptographic randomness multiples_of_21 = [i for i in range(1, 10001) if i % 21 == 0] valid_numbers = [i for i in multiples_of_21 if is_perfect_square(i)] if not valid_numbers: return None # Or raise an exception if desired return secrets.choice(valid_numbers)"},{"question":"Write a function that takes in two lists of integers and returns the lengths of the lists, the values that are common in both lists, and the count of common values. Additionally, ensure that the function performs the operations with optimal time complexity.","solution":"from typing import List, Tuple def analyze_lists(list1: List[int], list2: List[int]) -> Tuple[int, int, List[int], int]: Takes in two lists of integers and returns the lengths of the lists, the values that are common in both lists, and the count of common values. :param list1: List of integers :param list2: List of integers :returns: A tuple of two integers (length of list1, length of list2), a list of common integers, and an integer count of common values. set1 = set(list1) set2 = set(list2) common_values = list(set1 & set2) return len(list1), len(list2), common_values, len(common_values)"},{"question":"Write a code to find the kth smallest element in an unsorted array using QuickSelect algorithm. The solution should have a time complexity of O(n) and a space complexity of O(1). Additionally, you are not allowed to use any extra data structures or sorting algorithms.","solution":"def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quickselect(arr, low, high, k): if low == high: return arr[low] pivot_index = partition(arr, low, high) if pivot_index == k: return arr[pivot_index] elif pivot_index > k: return quickselect(arr, low, pivot_index - 1, k) else: return quickselect(arr, pivot_index + 1, high, k) def kth_smallest(arr, k): Find the k-th smallest element in an unsorted array. :param arr: List of integers :param k: The k-th position (1-based) of the smallest element to find :return: The k-th smallest element if k < 1 or k > len(arr): raise IndexError(\\"k is out of the range of the list length\\") return quickselect(arr, 0, len(arr) - 1, k - 1)"},{"question":"Create a medication reminder system using Python. The system should generate notifications when medications are due based on the input from the patient (i.e., medication schedule, dosage, preferred notification method, etc.). Also, incorporate exception handling for invalid or conflicting information.","solution":"import datetime class MedicationReminder: def __init__(self): self.medication_schedule = [] def add_medication(self, name, dosage, time, notification_method): Adds a medication schedule. Parameters: name (str): Name of the medication dosage (str): Dosage information time (datetime.time): Time when the medication should be taken notification_method (str): The method of notification ('email', 'sms', 'alert') if notification_method not in ['email', 'sms', 'alert']: raise ValueError(\\"Invalid notification method. Choose 'email', 'sms', or 'alert'.\\") self.medication_schedule.append({ 'name': name, 'dosage': dosage, 'time': time, 'notification_method': notification_method }) def generate_notifications(self, current_time): Generate notifications for medications due at the given time. Parameters: current_time (datetime.datetime): The current time to check against medication schedules Returns: list: List of notifications notifications = [] for medication in self.medication_schedule: if current_time.time() == medication['time']: notifications.append(f\\"Time to take your {medication['name']} ({medication['dosage']}). \\" f\\"Notification via {medication['notification_method']}.\\") return notifications"},{"question":"code a recursive function in Python to compute the nth Fibonacci number, where n is a positive integer. Additionally, you should handle edge cases where the input is zero or a negative number by returning an appropriate error message.","solution":"def fibonacci(n): Computes the nth Fibonacci number using recursion. Args: n (int): The position in the Fibonacci sequence. Returns: int: The nth Fibonacci number, or a string error message if n is not positive. if n <= 0: return \\"Input must be a positive integer\\" elif n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Create a function that takes a list of numbers and removes all elements that occur more than twice. Additionally, the function should return the modified list sorted in descending order.","solution":"def remove_more_than_twice_and_sort(lst): Removes all elements that occur more than twice in the list and returns the modified list sorted in descending order. from collections import Counter # Count occurrences of each element count = Counter(lst) # Filter elements that occur more than twice filtered_lst = [element for element in lst if count[element] <= 2] # Sort the list in descending order sorted_lst = sorted(filtered_lst, reverse=True) return sorted_lst"},{"question":"Write a python function to parse uni-formatted time strings into datetime objects, and handle potential exception scenarios such as invalid input formats or data types. Below is an erroneously defined function that attempts to carry out the task but fails. Identify the errors and correct them in your solution.","solution":"from datetime import datetime def parse_uni_time(time_str): Parses a uni-formatted time string (YYYY-MM-DD HH:MM:SS) into a datetime object. Args: - time_str (str): A string representing date and time in the format 'YYYY-MM-DD HH:MM:SS'. Returns: - datetime: Corresponding datetime object if the input is valid. Raises: - ValueError: If the time_str format is invalid. - TypeError: If time_str is not a string. if not isinstance(time_str, str): raise TypeError(\\"The input should be a string in the format 'YYYY-MM-DD HH:MM:SS'.\\") try: return datetime.strptime(time_str, \\"%Y-%m-%d %H:%M:%S\\") except ValueError: raise ValueError(\\"The input string is not in the correct format 'YYYY-MM-DD HH:MM:SS'.\\")"},{"question":"Illustrate in which scenarios it would be appropriate to utilize a queue data structure as compared to utilizing a stack data structure. Additionally, demonstrate the major differences in their implementation with code examples in a language of your choice.","solution":"class Queue: def __init__(self): self.items = [] def is_empty(self): return len(self.items) == 0 def enqueue(self, item): self.items.append(item) def dequeue(self): if self.is_empty(): raise IndexError(\\"dequeue from an empty queue\\") return self.items.pop(0) def peek(self): if self.is_empty(): raise IndexError(\\"peek from an empty queue\\") return self.items[0] class Stack: def __init__(self): self.items = [] def is_empty(self): return len(self.items) == 0 def push(self, item): self.items.append(item) def pop(self): if self.is_empty(): raise IndexError(\\"pop from an empty stack\\") return self.items.pop() def peek(self): if self.is_empty(): raise IndexError(\\"peek from an empty stack\\") return self.items[-1]"},{"question":"Write a Python program to compute and display the maximum value amongst three numeric inputs.","solution":"def find_max(a, b, c): Returns the maximum value among three numeric inputs. return max(a, b, c)"},{"question":"Initiate the creation of a function with the capability to manipulate a provided hexadecimal string into an array of byte values. This function should skillfully manage the conversion, yielding the corresponding byte values for each element in the hexadecimal string.","solution":"def hex_to_bytes(hex_string): Converts a hexadecimal string to an array of byte values. Parameters: hex_string (str): The hexadecimal string to convert. Returns: list: A list of byte values corresponding to the hexadecimal string. if len(hex_string) % 2 != 0: raise ValueError(\\"Hexadecimal string length must be even to represent complete bytes.\\") return [int(hex_string[i:i+2], 16) for i in range(0, len(hex_string), 2)]"},{"question":"In the Python programming language, develop a code that computes the interest compounded on a monthly basis. Here are the parameters: the principal amount is 1000, the yearly nominal interest rate is 0.05, and the time period for which the interest is calculated is 5 years.","solution":"def compute_compound_interest(principal, annual_rate, years): Computes the compound interest with monthly compounding. Parameters: principal (float): The initial amount of money. annual_rate (float): The yearly nominal interest rate. years (int): The number of years the interest is calculated for. Returns: float: The amount of money accumulated after the interest. monthly_rate = annual_rate / 12 months = years * 12 amount = principal * (1 + monthly_rate) ** months return amount # Example usage principal = 1000 annual_rate = 0.05 years = 5 accumulated_amount = compute_compound_interest(principal, annual_rate, years) accumulated_amount"},{"question":"Write a Python program to count the number of characters in a sentence, excluding whitespace and punctuation.","solution":"def count_characters(sentence): Returns the number of characters in a sentence, excluding whitespace and punctuation. The function accounts for alphanumeric characters only. import string characters = set(string.ascii_letters + string.digits) count = 0 for char in sentence: if char in characters: count += 1 return count"},{"question":"Implement a binary search on the given array, but instead of searching for a specific value, search for the index of the smallest element in the array that is greater than or equal to a given target value. Return -1 if there is no such element.","solution":"def binary_search_geq(arr, target): Return the index of the smallest element in the array that is greater than or equal to the target value. If there is no such element, return -1. left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if arr[mid] >= target: result = mid right = mid - 1 else: left = mid + 1 return result"},{"question":"Please design an algorithm to find the longest palindromic substring in a given string.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. if not s: return \\"\\" def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes sub1 = expand_around_center(s, i, i) if len(sub1) > len(longest): longest = sub1 # Even length palindromes sub2 = expand_around_center(s, i, i + 1) if len(sub2) > len(longest): longest = sub2 return longest"},{"question":"Write a Python script that asks the user to input the coordinates for two points in 3D space, P1 and P2. Then calculate and print the Euclidean distance between them.","solution":"import math def euclidean_distance(p1, p2): Calculate the Euclidean distance between two points in 3D space. Arguments: p1 -- a tuple of three floats representing the first point (x1, y1, z1) p2 -- a tuple of three floats representing the second point (x2, y2, z2) distance = math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2 + (p1[2] - p2[2])**2) return distance def get_user_coordinates(): Helper function to get coordinates from user input. x1, y1, z1 = map(float, input(\\"Enter the coordinates for P1 (x1, y1, z1): \\").split()) x2, y2, z2 = map(float, input(\\"Enter the coordinates for P2 (x2, y2, z2): \\").split()) return (x1, y1, z1), (x2, y2, z2) if __name__ == \\"__main__\\": p1, p2 = get_user_coordinates() distance = euclidean_distance(p1, p2) print(f\\"The Euclidean distance between P1 and P2 is: {distance}\\")"},{"question":"Please create a python program that groups a given list of floating point numbers into three categories: positive numbers, negative numbers, and zeros, and sorts each category in a separate list. Then, display these lists in a human-readable format. Additionally, consider an erroneous code given below and identify the issues with it, then offer a correct solution. You should apply exception handling to manage any possible errors intelligently.","solution":"def categorize_and_sort_numbers(numbers): Categorizes the given list of numbers into positive, negative, and zero lists. Sorts each list individually. Returns a dictionary with the categorized and sorted numbers. positive_numbers = [] negative_numbers = [] zero_numbers = [] try: for num in numbers: if num > 0: positive_numbers.append(num) elif num < 0: negative_numbers.append(num) else: zero_numbers.append(num) positive_numbers.sort() negative_numbers.sort() zero_numbers.sort() return { \\"positive_numbers\\": positive_numbers, \\"negative_numbers\\": negative_numbers, \\"zero_numbers\\": zero_numbers } except TypeError as e: print(f\\"Error: {e}\\") return None def format_categorized_numbers(categorized_numbers): Formats the categorized numbers into a human-readable string. if not categorized_numbers: return \\"Error: Could not categorize numbers due to invalid input.\\" positive_numbers_str = f\\"Positive Numbers: {categorized_numbers['positive_numbers']}\\" negative_numbers_str = f\\"Negative Numbers: {categorized_numbers['negative_numbers']}\\" zero_numbers_str = f\\"Zero Numbers: {categorized_numbers['zero_numbers']}\\" return f\\"{positive_numbers_str}n{negative_numbers_str}n{zero_numbers_str}\\""},{"question":"file name \\"colors.py\\", code a Python program to create a dictionary of popular colors with values representing their common hexadecimal codes. Add a function that randomly chooses one color and shows its name and code on the screen.","solution":"import random colors = { \\"Red\\": \\"#FF0000\\", \\"Green\\": \\"#00FF00\\", \\"Blue\\": \\"#0000FF\\", \\"Yellow\\": \\"#FFFF00\\", \\"Magenta\\": \\"#FF00FF\\", \\"Cyan\\": \\"#00FFFF\\", \\"Black\\": \\"#000000\\", \\"White\\": \\"#FFFFFF\\", \\"Gray\\": \\"#808080\\", \\"Purple\\": \\"#800080\\" } def random_color(): Randomly chooses a color from the colors dictionary and returns its name and hex code. color_name = random.choice(list(colors.keys())) return color_name, colors[color_name]"},{"question":"Write a Python code snippet to get the length of a string, but without using the built-in function \`len()\`, and without using any loops or recursion. You can only use slicing, and you cannot use any external libraries or modules.","solution":"def string_length(s): Returns the length of a string using slicing. if s == '': return 0 count = 0 slice_marker = '0' while slice_marker: count += 1 slice_marker = s[count:count+1] return count"},{"question":"Develop a Python script to rename multiple AWS S3 buckets using the Boto3 SDK. You should also ensure the integrity of the data in the transition process and set up a logging mechanism to capture the details of the renaming operation.","solution":"import boto3 import logging logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s') def rename_s3_bucket(src_bucket_name, dest_bucket_name, aws_access_key_id, aws_secret_access_key, region_name): Renames an S3 bucket by copying the contents to a new bucket and deleting the old one. :param src_bucket_name: Name of the source bucket. :param dest_bucket_name: Name of the destination bucket. :param aws_access_key_id: AWS access key ID. :param aws_secret_access_key: AWS secret access key. :param region_name: AWS region name. s3 = boto3.resource( 's3', aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key, region_name=region_name ) src_bucket = s3.Bucket(src_bucket_name) dest_bucket = s3.create_bucket(Bucket=dest_bucket_name, CreateBucketConfiguration={'LocationConstraint': region_name}) logging.info(f'Starting to copy contents from {src_bucket_name} to {dest_bucket_name}') for obj in src_bucket.objects.all(): copy_source = {'Bucket': src_bucket_name, 'Key': obj.key} dest_bucket.copy(copy_source, obj.key) logging.info(f'Copied {obj.key} to {dest_bucket_name}') logging.info(f'Successfully copied all contents to {dest_bucket_name}, starting deletion of old bucket') for obj in src_bucket.objects.all(): obj.delete() logging.info(f'Deleted {obj.key} from {src_bucket_name}') src_bucket.delete() logging.info(f'Deleted bucket {src_bucket_name}, renaming operation complete')"},{"question":"Given an integer array, write a function to reorder the elements such that all elements less than or equal to a specified value come before any elements larger than that value. The order of the elements within these groups doesn't matter. The function should work for both positive and negative integers and should handle a dynamic pivot value given as input.","solution":"def reorder_array(arr, pivot): Reorders elements of the input array such that all elements less than or equal to the pivot come before elements greater than the pivot. The order within these groups does not matter. Parameters: arr (list of int): The input array of integers. pivot (int): The pivot value to separate the elements. Returns: list of int: The reordered array. less_or_equal = [x for x in arr if x <= pivot] greater = [x for x in arr if x > pivot] return less_or_equal + greater"},{"question":"Write a Python program to generate the first n Fibonacci numbers and display them in reverse order. Additionally, the program should only use recursion to calculate the Fibonacci sequence and should not use any loops or built-in functions for calculating the Fibonacci sequence. The program should also handle the case when n is negative or zero by displaying an error message.","solution":"def fibonacci(n): Recursively calculates the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) def generate_fibonacci_reverse(n): Recursively generates the first n Fibonacci numbers and returns them in reverse order. If n is zero or negative, returns an error message. if n <= 0: return \\"Error: n should be a positive integer.\\" def helper(index): if index == 0: return [] else: return helper(index - 1) + [fibonacci(index - 1)] fibonacci_numbers = helper(n) return fibonacci_numbers[::-1] # Reverse the list"},{"question":"How would you create a function that takes a list of strings as an argument and returns a new list of all the strings in uppercase? Additionally, the function should ignore any strings that contain numbers or special characters.","solution":"import re def uppercase_valid_strings(strings): Takes a list of strings and returns a new list of all the strings in uppercase, ignoring any strings that contain numbers or special characters. # Define a regular expression pattern for identifying invalid strings pattern = re.compile(r'[^a-zA-Zs]') # Initialize an empty list for valid uppercased strings valid_strings = [] # Iterate over each string in the input list for s in strings: # Check if the string contains any invalid characters if not pattern.search(s): # Convert the string to uppercase and add it to the valid_strings list valid_strings.append(s.upper()) return valid_strings"},{"question":"Create a function called \\"fizzBuzz\\" that takes in an integer as an argument and returns a string. The function should print \\"fizz\\" if the number is divisible by 3, \\"buzz\\" if the number is divisible by 5, and \\"fizzbuzz\\" if the number is divisible by both 3 and 5. The function should also handle negative numbers and return \\"invalid\\" if the input is not a number. Additionally, the function should only use a maximum of three lines of code and should not use any conditional statements or loops.","solution":"def fizzBuzz(n): Returns \\"fizz\\" if n is divisible by 3, \\"buzz\\" if n is divisible by 5, \\"fizzbuzz\\" if n is divisible by both, and \\"invalid\\" if the input is not a number. return \\"invalid\\" if not isinstance(n, int) else (\\"fizz\\"*(n % 3 == 0) + \\"buzz\\"*(n % 5 == 0) or str(n))"},{"question":"Implement a recursive function in your preferred programming language that generates and returns the prime numbers within a given range. Be sure to handle the possible edge cases, such as generating primes between two equal numbers, or when the lower range is greater than the upper range.","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def generate_primes_recursive(start, end, primes=None): Recursively generates prime numbers within a given range [start, end]. if primes is None: primes = [] if start > end: return primes if is_prime(start): primes.append(start) return generate_primes_recursive(start + 1, end, primes)"},{"question":"The.transition_from_state() Python function is intended to switch the state of an object within a state machine, with the caveats that (1) It requires the present condition to be validated before making the state change and (2) It notifies the object’s subscribers.","solution":"def transition_from_state(obj, current_state, new_state, condition_validator, notify_subscribers): Function to transition the state of an object within a state machine, given a condition validator and a notification mechanism. Parameters: obj: The object whose state is to be changed. current_state: The current state of the object. new_state: The new state to which the object should transition. condition_validator: A function that validates whether the transition can occur. notify_subscribers: A function to notify subscribers about the state change. Returns: bool: True if the state transition is successful, else False. if not condition_validator(obj, current_state, new_state): return False obj.state = new_state notify_subscribers(obj, current_state, new_state) return True"},{"question":"Create an algorithm to find the longest substring without repeating characters from a given string.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters from the given string s. n = len(s) if n == 0: return \\"\\" longest = \\"\\" current_substr = \\"\\" seen_chars = {} i = 0 # Start of the current substring for j in range(n): # End of the current substring if s[j] in seen_chars and seen_chars[s[j]] >= i: i = seen_chars[s[j]] + 1 current_substr = s[i:j+1] seen_chars[s[j]] = j if len(current_substr) > len(longest): longest = current_substr return longest"},{"question":"Write a Python function named \\"count_words\\" that takes a single string parameter called text. The function should return the number of words in the text string. Assume that words in the text areseparated by single spaces, and there are no leading or trailing spaces in the text.","solution":"def count_words(text): Returns the number of words in the text string. if not text: return 0 return len(text.split())"},{"question":"With a simple list, [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], write a Python code to find out all the numbers that are less than 5, and sum them up. Also, modify the program to accept any list of unique positive integers, with the length of the list not exceeding 100, and return the sum of all numbers in the list that are less than a specified integer 'n'. You should consider the case when the list could be empty.","solution":"def sum_of_numbers_less_than_n(numbers, n): Returns the sum of all numbers in the list 'numbers' that are less than 'n'. :param numbers: List of unique positive integers :param n: The specified integer threshold :return: Sum of all numbers less than 'n' return sum(num for num in numbers if num < n)"},{"question":"https://leetcode.com/problems/count-items-matching-a-rule/","solution":"def countMatches(items, ruleKey, ruleValue): Returns the count of items that match the rule specified by ruleKey and ruleValue. :param items: List of lists, where each list contains three strings [type, color, name]. :param ruleKey: One of \\"type\\", \\"color\\", or \\"name\\". :param ruleValue: The value to match for the specified ruleKey. :return: The count of matching items. ruleIndex = {\\"type\\": 0, \\"color\\": 1, \\"name\\": 2} index = ruleIndex[ruleKey] count = 0 for item in items: if item[index] == ruleValue: count += 1 return count"},{"question":"Your task is to parse some transactions and return the ledger that results from applying these transactions in order. A transaction is represented by a string with 3 space-delimited fields: the source account number (string), destination account number (string), and transaction amount (integer). Transactions will always be valid, all accounts start at a USD balance of 0, and you don't have to deal with overdrafts or invalid account numbers. The input to your function will be an array of these transaction strings.","solution":"def process_transactions(transactions): Processes a list of transaction strings and returns a ledger reflecting the final balances of all accounts. Args: - transactions (list of str): List of transaction strings in the format \\"source_account destination_account amount\\" Returns: - dict: A dictionary representing the ledger with account numbers as keys and final balances as values. ledger = {} for transaction in transactions: source, destination, amount = transaction.split() amount = int(amount) if source not in ledger: ledger[source] = 0 if destination not in ledger: ledger[destination] = 0 ledger[source] -= amount ledger[destination] += amount return ledger"},{"question":"Create a recursive Python function to generate the Fibonacci series up to n-th terms, while incorporating memoization to improve performance.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using memoization for performance improvements. Parameters: n (int): the position in the Fibonacci sequence to calculate. 0-based index. memo (dict): a dictionary to store previously calculated Fibonacci numbers. Returns: int: the nth Fibonacci number. # Base cases if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 # Recursive case with memoization memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Given two arrays of integers, write a Python function to swap their values. Additionally, your function should also validate whether these arrays contain only positive integers and equal length. If any of these conditions are not met, your function should throw an error. Please take extra care in managing the possible side effects that could compromise the program's functionality.","solution":"def swap_arrays(arr1, arr2): Swaps the values of two arrays if they are of the same length and contain only positive integers. Parameters: arr1 (list): First array of integers. arr2 (list): Second array of integers. Returns: tuple: A tuple containing the swapped arrays (new_arr1, new_arr2). Raises: ValueError: If the arrays are not of equal length, or contain non-positive integers. if len(arr1) != len(arr2): raise ValueError(\\"Arrays must be of equal length.\\") if not all(isinstance(x, int) and x > 0 for x in arr1 + arr2): raise ValueError(\\"Arrays must contain only positive integers.\\") return arr2, arr1"},{"question":"Write a python function named concatenate_df that takes a list of dataframes of the same schema as input and return one dataframe. If input is empty list of dataframes then raise an exception with a string message \\"Input list of dataframes is empty\\".","solution":"import pandas as pd def concatenate_df(df_list): Concatenates a list of dataframes into a single dataframe. If the input list is empty, raises an exception with a message. Parameters: df_list (list of pd.DataFrame): List of dataframes to concatenate Returns: pd.DataFrame: The concatenated dataframe Raises: Exception: If the input list is empty if not df_list: raise Exception(\\"Input list of dataframes is empty\\") return pd.concat(df_list, ignore_index=True)"},{"question":"Generate 10 arrays each with 5 floating-point numbers between -100 and 100, using Python. Also, implement a function to check if these arrays can be classified as co-prime as a whole, i.e. their GCD should be 1.","solution":"import random from math import gcd from functools import reduce def generate_random_arrays(num_arrays=10, array_length=5, min_val=-100, max_val=100): Generates a list of lists containing random floating-point numbers. Each list represents an array. return [[random.uniform(min_val, max_val) for _ in range(array_length)] for _ in range(num_arrays)] def are_coprime(arrays): Checks if the given arrays can be classified as co-prime using their integer parts. # Flatten the list of arrays and get the integer parts integers = [int(x) for array in arrays for x in array] # Compute the GCD of the entire list of integers overall_gcd = reduce(gcd, integers) # If the overall GCD is 1, then they can be classified as co-prime return overall_gcd == 1 # Generate the random arrays arrays = generate_random_arrays() print(\\"Generated Arrays:\\", arrays) # Check if they are co-prime as a whole print(\\"Are the arrays co-prime?:\\", are_coprime(arrays))"},{"question":"Create a Python program which takes a word string as input and returns a new version of the string with the order of characters reversed.","solution":"def reverse_string(word): Returns the input string reversed. :param word: The input string to be reversed :return: The reversed string return word[::-1]"},{"question":"The Fibonacci numbers are defined by F(0)=0, F(1)=1 and F(n)=F(n-1)+F(n-2) for n>1. Write a Python program to display the first 10 Fibonacci numbers.","solution":"def fibonacci(n): Returns the first n Fibonacci numbers. fib_sequence = [] a, b = 0, 1 for _ in range(n): fib_sequence.append(a) a, b = b, a + b return fib_sequence # Display the first 10 Fibonacci numbers first_10_fibonacci = fibonacci(10) print(first_10_fibonacci) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"question":"Write a Python Decorator function that logs the arguments, working, and result of any function it wraps. This should include the capability to log the start and end time of the functions execution, and the function should be able to handle arbitrary numbers of positional and keyword arguments. Implement the functionality to write logs into a file.","solution":"import logging from functools import wraps from datetime import datetime # Setting up the logger logging.basicConfig(filename='function_logs.log', level=logging.INFO, format='%(asctime)s - %(message)s') def log_function_call(func): @wraps(func) def wrapper(*args, **kwargs): start_time = datetime.now() logging.info(f\\"Starting execution of {func.__name__}\\") logging.info(f\\"Arguments: args={args}, kwargs={kwargs}\\") try: result = func(*args, **kwargs) logging.info(f\\"Result: {result}\\") except Exception as e: logging.error(f\\"Error: {e}\\") raise e finally: end_time = datetime.now() elapsed_time = end_time - start_time logging.info(f\\"Finished execution of {func.__name__} in {elapsed_time}\\") return result return wrapper"},{"question":"Write a Python code that takes in a list of integers and returns a new list that contains only the even numbers from the original list. Additionally, the code should calculate and return the product of all even numbers in the new list.","solution":"def filter_and_product_of_evens(numbers): Filters the even numbers from a given list and calculates the product of these even numbers. Parameters: numbers (list): A list of integers. Returns: tuple: A tuple containing a list of even numbers and the product of these even numbers. even_numbers = [num for num in numbers if num % 2 == 0] product = 1 for num in even_numbers: product *= num return even_numbers, product"},{"question":"Write a Python function to calculate the Lowest Common Multiple (LCM) of two or more integers. The function should be able to handle edge cases like negative numbers and zero. Also, provide a piece of erroneous code and explain how to fix it.","solution":"from math import gcd from functools import reduce def lcm(a, b): Returns the Lowest Common Multiple (LCM) of two integers a and b. if a == 0 or b == 0: return 0 return abs(a * b) // gcd(a, b) def lcm_multiple(*args): Returns the Lowest Common Multiple (LCM) of multiple integers. if len(args) == 0: raise ValueError(\\"At least one integer is required\\") if any(num == 0 for num in args): return 0 return reduce(lcm, args)"},{"question":"Write a function named \`fibonacci\` that takes an integer \`n\` as input and returns the \`n\`th number in the Fibonacci sequence. The Fibonacci sequence starts with \`0\` and \`1\`, and each subsequent number is the sum of the two preceding ones. The function should handle negative inputs by returning \`None\`.","solution":"def fibonacci(n): Returns the nth number in the Fibonacci sequence. If the input is negative, returns None. if n < 0: return None elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Create a diamond shape with asterisks, where the number of rows can be specified. The program should also allow the user to choose whether the diamond is filled with asterisks or just the outline.","solution":"def generate_diamond(rows, filled=True): Generate a diamond shape with asterisks. :param rows: Number of rows for the upper half of the diamond including the middle row. :param filled: Whether the diamond should be filled or just an outline. :return: A string representation of the diamond shape. if rows < 1: return \\"\\" diamond = [] # Upper part including the middle row for i in range(rows): if filled: line = ' ' * (rows - i - 1) + '*' * (2 * i + 1) + ' ' * (rows - i - 1) else: if i == 0: line = ' ' * (rows - i - 1) + '*' + ' ' * (rows - i - 1) else: line = ' ' * (rows - i - 1) + '*' + ' ' * (2 * i - 1) + '*' + ' ' * (rows - i - 1) diamond.append(line) # Lower part for i in range(rows - 2, -1, -1): if filled: line = ' ' * (rows - i - 1) + '*' * (2 * i + 1) + ' ' * (rows - i - 1) else: if i == 0: line = ' ' * (rows - i - 1) + '*' + ' ' * (rows - i - 1) else: line = ' ' * (rows - i - 1) + '*' + ' ' * (2 * i - 1) + '*' + ' ' * (rows - i - 1) diamond.append(line) return 'n'.join(diamond)"},{"question":"Set up a annotations.Welcome in a FastAPI application. Implement a dependency for the welcome message using dependency injection. Create a pydantic model for request and response. Define path operations to return different welcome messages based on the user's level, which must be provided in the URL path as a path parameter. The application must also handle query parameters for customizing the response message.","solution":"from fastapi import FastAPI, Depends from pydantic import BaseModel app = FastAPI() class WelcomeRequest(BaseModel): user_name: str class WelcomeResponse(BaseModel): message: str def welcome_message(user_level: str, user_name: str = None, custom_message: str = None) -> WelcomeResponse: base_message = f\\"Welcome {user_name}\\" if user_name else \\"Welcome\\" if user_level == \\"basic\\": message = f\\"{base_message}. Enjoy your stay!\\" elif user_level == \\"premium\\": message = f\\"{base_message}. We hope you enjoy our premium services!\\" elif user_level == \\"vip\\": message = f\\"{base_message}. Experience the VIP treatment!\\" else: message = f\\"{base_message}. Your level is not recognized.\\" if custom_message: message += f\\" {custom_message}\\" return WelcomeResponse(message=message) @app.get(\\"/welcome/{user_level}\\", response_model=WelcomeResponse) def get_welcome(user_level: str, user_name: str = None, custom_message: str = None, message: WelcomeResponse = Depends(welcome_message)): return message"},{"question":"Given the string \\"Hello, World!\\", write a Python function to output its length.","solution":"def string_length(s): Returns the length of the given string s. return len(s)"},{"question":"Please write a python program to convert a string into a list of characters. Additionally, implement a function that transforms this list by removing all vowel characters, replacing them with their respective ASCII values, and then reinserting them at their original positions in the list. You should define your own function for determining if a character is a vowel, instead of using any built-in methods.","solution":"def is_vowel(char): Determine if a given character is a vowel. vowels = 'aeiouAEIOU' return char in vowels def string_to_list(s): Convert a string into a list of characters. return list(s) def transform_list(char_list): Transform the given list of characters by replacing vowels with their ASCII values. transformed_list = [] for char in char_list: if is_vowel(char): transformed_list.append(ord(char)) else: transformed_list.append(char) return transformed_list"},{"question":"Given a list of numbers, propose code that returns the number of distinct elements in the list. Additionally, ensure that the solution has a time complexity of O(nlogn), where n is the length of the list.","solution":"def count_distinct_elements(nums): Returns the number of distinct elements in the list nums. The time complexity is O(n log n) due to sorting. if not nums: return 0 sorted_nums = sorted(nums) distinct_count = 1 for i in range(1, len(sorted_nums)): if sorted_nums[i] != sorted_nums[i - 1]: distinct_count += 1 return distinct_count"},{"question":"Write a function in Python to generate a list with the square of numbers from 0 to the given number.","solution":"def generate_squares(n): Returns a list of squares of numbers from 0 to n (inclusive). return [i**2 for i in range(n + 1)]"},{"question":"Write a code to find the most common words in a large text file. The code should be efficient and able to handle very large files that may not fit into memory. Discuss the time and space complexity of your solution. Given the nature of job interview questions, I'm going to pursue an optimized Python implementation. We'll ensure this is memory efficient by reading the file line by line instead of all at once. We'll also use a python dictionary for efficient lookups to keep track of word counts.","solution":"import collections def most_common_words(file_path, num_words): Returns the most common words in a large text file. :param file_path: path to the text file :param num_words: number of most common words to return :return: list of tuples containing the most common words and their counts word_count = collections.defaultdict(int) with open(file_path, 'r') as file: for line in file: words = line.split() for word in words: word = word.lower().strip(',.!?()[]{}:\\"'') if word: word_count[word] += 1 most_common = collections.Counter(word_count).most_common(num_words) return most_common"},{"question":"Given a string, find the number of times a given character appears in the string. However, you are not allowed to use any built-in functions or methods that directly count the occurrences of the character in the string. Additionally, the solution must have a time complexity of O(n), where n is the length of the string. You must implement your own logic to count the occurrences of the character. The string can contain any printable ASCII characters, including uppercase and lowercase letters, digits, and special characters. The character to count can also be any printable ASCII character.","solution":"def count_character_occurrences(s, char): Returns the number of times 'char' appears in the string 's'. This function runs in O(n) time complexity where n is the length of the string. count = 0 for c in s: if c == char: count += 1 return count"},{"question":"Write a function in Python to convert military time (24-hour format) to 12-hour format including the period notation (AM/PM). The function should also be able to handle input in the form of a string with or without colon (e.g., \\"1600\\", \\"16:00\\"). If the input is not a valid time, the function should return an appropriate error message.","solution":"def convert_military_to_standard(time_str): Converts military time to standard 12-hour format with AM/PM notation. Parameters: time_str (str): The input time in 24-hour format (e.g., \\"1600\\" or \\"16:00\\"). Returns: str: The converted time in 12-hour format with AM/PM notation, or an error message if the input is invalid. try: if ':' in time_str: hours, minutes = map(int, time_str.split(':')) else: hours = int(time_str[:2]) minutes = int(time_str[2:]) if not (0 <= hours < 24 and 0 <= minutes < 60): return \\"Invalid time format\\" period = \\"AM\\" if hours >= 12: period = \\"PM\\" if hours == 0: hours = 12 elif hours > 12: hours -= 12 return f\\"{hours}:{minutes:02d} {period}\\" except Exception: return \\"Invalid time format\\""},{"question":"create a function that takes a string as an input, and returns a new version of that string where every letter is replaced with the letter that comes two places after it in the alphabet.","solution":"def shift_letters_two_places(string): Returns a new string where every letter is replaced with the letter that comes two places after it in the alphabet. result = [] for char in string: if 'a' <= char <= 'z': result.append(chr((ord(char) - ord('a') + 2) % 26 + ord('a'))) elif 'A' <= char <= 'Z': result.append(chr((ord(char) - ord('A') + 2) % 26 + ord('A'))) else: result.append(char) return ''.join(result)"},{"question":"How can I implement a Newton-Raphson method to find the roots of a function in Python? Can you provide more explanation on how the function should be constructed, including the stopping criteria and derivative calculation? Moreover, could you give an implementation of the method along with a test case for a specific function such as sin(x)/x?","solution":"def newton_raphson(f, df, x0, tol=1e-6, max_iter=100): Implements the Newton-Raphson method to find the root of a function. Parameters: f (function): The function whose root is to be found. df (function): The derivative of the function. x0 (float): Initial guess for the root. tol (float): Tolerance for stopping criteria. max_iter (int): Maximum number of iterations. Returns: float: The estimated root of the function. x = x0 for i in range(max_iter): x_new = x - f(x) / df(x) if abs(x_new - x) < tol: return x_new x = x_new raise ValueError(\\"Maximum iterations exceeded\\") import math # Example functions def f(x): return math.sin(x) / x if x != 0 else 1 def df(x): # The derivative of sin(x)/x is (cos(x)/x - sin(x)/x^2) for x != 0, else is 0. if x != 0: return (math.cos(x) - math.sin(x) / x) / x else: return 0.0"},{"question":"Define a dictionary in Python and explain how to access a specific value from it using the key. Also, write a function that checks if a given key exists in the dictionary and explain how it works.","solution":"# Defining a dictionary my_dict = { \\"apple\\": 5, \\"banana\\": 3, \\"orange\\": 7, \\"grape\\": 10 } def get_value_from_dict(d, key): Returns the value associated with the given key in the dictionary d. If the key does not exist, it returns None. return d.get(key) def key_exists_in_dict(d, key): Checks if the given key exists in the dictionary d. Returns True if it exists, otherwise False. return key in d # Explanation: # - my_dict is a dictionary where the keys are strings representing fruit names, and the values are integers representing quantities. # - get_value_from_dict() uses the \`get\` method of the dictionary which returns the value associated with the key if it exists, otherwise it returns None. # - key_exists_in_dict() uses the \`in\` operator to check if the key is present in the dictionary."},{"question":"Given two words, write a program to find the shortest transformation sequence from the first word to the second word, provided only the intermediate words are valid English words available in a dictionary.","solution":"from collections import deque def shortest_transformation_sequence(start_word, end_word, word_dict): Returns the shortest transformation sequence from start_word to end_word by changing only one letter at a time. Parameters: - start_word: str, the starting word - end_word: str, the ending word - word_dict: set of str, the dictionary containing valid words Returns: - list of str, the transformation sequence from start_word to end_word or empty if no sequence exists. if end_word not in word_dict: return [] word_dict.add(end_word) queue = deque([[start_word]]) while queue: path = queue.popleft() current_word = path[-1] if current_word == end_word: return path for i in range(len(current_word)): for c in 'abcdefghijklmnopqrstuvwxyz': next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_dict: new_path = list(path) new_path.append(next_word) queue.append(new_path) word_dict.remove(next_word) return [] # Example usage: # word_dict = {\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"} # print(shortest_transformation_sequence(\\"hit\\", \\"cog\\", word_dict)) # Output: ['hit', 'hot', 'dot', 'dog', 'cog']"},{"question":"Using beautifulsoup library in Python, parse an HTML document, extract all the headings, and print them in hierarchical order with respect to their HTML structure. Additionally, identify the CSS styles associated with each heading and print them as well.","solution":"from bs4 import BeautifulSoup def parse_html_headings(html_doc): Parses an HTML document and extracts all headings (h1-h6) along with their CSS styles. soup = BeautifulSoup(html_doc, 'html.parser') headings = [] for i in range(1, 7): for heading in soup.find_all(f'h{i}'): style = heading.get('style', '') headings.append((heading.name, heading.text, style)) return headings"},{"question":"Write a python function that accepts an array of integers as a parameter and returns a new array in which each number from the original array has been squared. Furthermore, the function should still function correctly if the array includes both positive and negative integers, treating zeros as zeroes. To retain clarity and simplicity, include a test function accompanied with a few test cases to verify the accuracy of your solution.","solution":"def square_array(arr): Returns a new array with each element from the input array squared. Parameters: arr (list): List of integers. Returns: list: List of squared integers. return [x ** 2 for x in arr]"},{"question":"Write a regex expression that matches email addresses. Then, extend the regex to only match valid email domains that end with \\".com\\", \\".net\\" or \\".edu\\". Further, this regex should successfully exclude addresses from the domain \\"spam.com\\". Also, write a Python code that tests this regular expression on a set of data points. Comment on the effectiveness and possible shortfalls of your regex.","solution":"import re def is_valid_email(email): Validates whether the input string is a valid email address with domains ending with .com, .net, or .edu, excluding emails from the \\"spam.com\\" domain. regex = r\\"^[a-zA-Z0-9._%+-]+@(?!spam.com)[a-zA-Z0-9.-]+.(com|net|edu)\\" return bool(re.match(regex, email))"},{"question":"Write a simple piece of code in Python that adds two numbers and prints their sum.","solution":"def add_and_print(a, b): Adds two numbers and prints the sum. result = a + b print(result) return result"},{"question":"Create a function that takes two input strings, and returns a dictionary showing the count of unique common characters between the strings. However, this time, instead of ignoring case sensitivity, your program must distinguish uppercase and lowercase characters. You also need to consider the frequency of characters. Below is a starting point for your code which has some errors and does not achieve the aforementioned requirements.","solution":"def count_common_characters(str1, str2): Returns a dictionary showing the count of unique common characters between str1 and str2. The comparison is case-sensitive. # Initialize a dictionary to store the counts common_char_counts = {} # Create dictionaries to count the frequency of each character in both strings char_count_str1 = {} char_count_str2 = {} for char in str1: if char in char_count_str1: char_count_str1[char] += 1 else: char_count_str1[char] = 1 for char in str2: if char in char_count_str2: char_count_str2[char] += 1 else: char_count_str2[char] = 1 # Find the common characters and count their frequencies for char in char_count_str1: if char in char_count_str2: common_char_counts[char] = min(char_count_str1[char], char_count_str2[char]) return common_char_counts"},{"question":"Object Tracking in Real-Time using OpenCV in Python.","solution":"import cv2 import numpy as np def track_object(): Tracks a colored object in real-time using a webcam. cap = cv2.VideoCapture(0) while True: ret, frame = cap.read() if not ret: break # Convert the frame to HSV color space hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV) # Define the color range for tracking (e.g., red color) lower_color_bound = np.array([0, 120, 70]) upper_color_bound = np.array([10, 255, 255]) # Create a mask to extract the color object mask = cv2.inRange(hsv_frame, lower_color_bound, upper_color_bound) # Find contours from the mask contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE) for contour in contours: area = cv2.contourArea(contour) if area > 500: # Filter out small noise by area size x, y, w, h = cv2.boundingRect(contour) cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2) cv2.putText(frame, \\"Object\\", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2, cv2.LINE_AA) # Display the resulting frame cv2.imshow('Object Tracking', frame) # Break the loop if 'q' is pressed if cv2.waitKey(1) & 0xFF == ord('q'): break cap.release() cv2.destroyAllWindows() # Call the function for real-time object tracking if __name__ == \\"__main__\\": track_object()"},{"question":"You are given a string aligned fasta file (1st line is >CHR1, 2nd line is the sequence) of purine (A or G) SNPs, write a python code that will convert it to a transition matrix","solution":"import numpy as np def parse_fasta(fasta_string): Parses a FASTA string into a header and a sequence. lines = fasta_string.strip().split('n') header = lines[0] sequence = lines[1] return header, sequence def create_transition_matrix(sequence): Returns the transition matrix for the given sequence of purine SNPs. transitions = {'A': 0, 'G': 1} # Initialize a 2x2 matrix to keep track of transitions matrix = np.zeros((2, 2), dtype=int) for i in range(len(sequence) - 1): if sequence[i] in transitions and sequence[i + 1] in transitions: from_nucleotide = transitions[sequence[i]] to_nucleotide = transitions[sequence[i + 1]] matrix[from_nucleotide, to_nucleotide] += 1 return matrix"},{"question":"Write a python function called 'multiply_elements' that takes in a list and returns the product of all elements. If the list is empty, it should return 1. If elements in the list are not numeric, the function should raise ValueError.","solution":"def multiply_elements(lst): Returns the product of all elements in the list. If the list is empty, returns 1. If the list contains non-numeric elements, raises a ValueError. if not lst: return 1 product = 1 for element in lst: if not isinstance(element, (int, float)): raise ValueError(\\"All elements must be numeric\\") product *= element return product"},{"question":"Can you help me create a Python dictionary that represents the roster of current Los Angeles Lakers players, including their jersey number as the key and position as the value? Also, can you show me how to print the position of a player given their jersey number?","solution":"def get_lakers_roster(): Returns a dictionary containing Los Angeles Lakers roster with jersey number as key and position as value. return { 6: \\"Forward\\", 7: \\"Guard\\", 10: \\"Guard\\", 12: \\"Forward\\", 14: \\"Forward\\", 15: \\"Guard\\", 20: \\"Forward\\", 21: \\"Center\\", 22: \\"Center\\", 23: \\"Forward\\", 24: \\"Guard\\", 27: \\"Center\\", 30: \\"Guard\\", 35: \\"Forward\\", 37: \\"Forward\\", 40: \\"Forward\\", 55: \\"Guard\\" } def get_player_position(jersey_number): Returns the position of the player for the given jersey number from the Lakers roster. Parameters: jersey_number (int): The jersey number of the player. Returns: str: The position of the player or 'Jersey number not found' if the jersey number is not in the roster. roster = get_lakers_roster() return roster.get(jersey_number, 'Jersey number not found')"},{"question":"Create a deterministic finite automaton (DFA) in Python that accepts all strings ending in \\"ti\\".","solution":"class DFA: def __init__(self): self.start_state = 0 self.accept_states = {2} self.states = {0, 1, 2} self.transitions = { 0: {'t': 1, 'i': 0}, 1: {'t': 1, 'i': 2}, 2: {'t': 1, 'i': 0} } self.current_state = self.start_state def reset(self): self.current_state = self.start_state def transition(self, char): if char in self.transitions[self.current_state]: self.current_state = self.transitions[self.current_state][char] else: self.current_state = 0 def accepts(self, string): self.reset() for char in string: self.transition(char) return self.current_state in self.accept_states"},{"question":"Write a recursive code to output all prime numbers less than a given number n while ensuring you are not using any built-in Python library to check for primes. The code should be efficient to handle large values of n. Practice good programming habits and offer complexity analysis for your solution.","solution":"def is_prime(num, divisor=2): Recursively checks if a number is prime. if num <= 2: return num == 2 if num % divisor == 0: return False if divisor * divisor > num: return True return is_prime(num, divisor + 1) def find_primes(n, current=2, primes=None): Recursively finds all prime numbers less than n. if primes is None: primes = [] if current >= n: return primes if is_prime(current): primes.append(current) return find_primes(n, current + 1, primes)"},{"question":"Write a function in a programming language of your choice that takes an array of integers as input and returns an array of booleans indicating whether each integer is a multiple of 3. If the input array is empty, the function should return an empty array as well. Ensure that your code is properly indented, uses comments to explain key logic, and follows best practices for naming conventions and variable scope.","solution":"def check_multiples_of_3(numbers): Returns an array of booleans indicating whether each integer in the input array is a multiple of 3. :param numbers: List of integers :return: List of booleans # Initialize an empty list to store the results result = [] # Iterate through each number in the input list for num in numbers: # Check if the number is a multiple of 3 and append the result (True or False) to the result list result.append(num % 3 == 0) return result"},{"question":"Suggest a code to get the smallest and largest number in an unsorted list with a time complexity of O(n log n), without using any built-in sorting functions.","solution":"def merge_sort(arr): Sorts an array using Merge Sort algorithm. if len(arr) > 1: mid = len(arr) // 2 # Finding the middle of the array left_half = arr[:mid] # Dividing the elements into 2 halves right_half = arr[mid:] merge_sort(left_half) # Sorting the first half merge_sort(right_half) # Sorting the second half i = j = k = 0 # Copying the sorted halves into the original array while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 # Checking if any element was left while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1 def find_min_max(arr): Returns the smallest and largest number in an unsorted list. if not arr: raise ValueError(\\"The array is empty\\") merge_sort(arr) return arr[0], arr[-1]"},{"question":"Write a code to filter out numbers which are divisible by 3 and 5 from a given list and also determine if the sum of the filtered numbers is prime. The filtered numbers should be stored in a new list, and the final result should be a tuple containing the new list and a boolean indicating whether the sum is prime or not.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def filter_and_check_prime(numbers): Filters numbers divisible by 3 and 5 from the given list and determines if the sum of the filtered numbers is prime. :param numbers: List of integers :return: Tuple containing the filtered list and a boolean indicating if the sum is prime filtered_numbers = [num for num in numbers if num % 3 == 0 and num % 5 == 0] total_sum = sum(filtered_numbers) return (filtered_numbers, is_prime(total_sum))"},{"question":"develop a calculator in Python that takes a user's input for two numbers and an operator, then returns the result of the operation. This is a straightforward problem that can be solved with a function that takes three parameters: num1, operator, and num2. The function will conduct the operation dictated by the operator on num1 and num2. Keep in mind \`input\` function will return user input as a string, so converting these inputs to numbers will be required (int for integers, float for real numbers). Please also set up error handling to manage situations where the user inputs an unrecognized operator or a non-numerical value for either number.","solution":"def calculator(num1, operator, num2): try: num1 = float(num1) num2 = float(num2) except ValueError: return \\"Invalid number input.\\" if operator == '+': return num1 + num2 elif operator == '-': return num1 - num2 elif operator == '*': return num1 * num2 elif operator == '/': try: return num1 / num2 except ZeroDivisionError: return \\"Cannot divide by zero.\\" else: return \\"Invalid operator.\\" # Example usage: # result = calculator(10, '+', 5) # print(result) # Should output 15.0"},{"question":"Formulate a Python function that accepts two string inputs and determines if they are anagrams. Anagrams are words that consist of the same characters in a different order. For instance, the strings \\"Angel\\" and \\"gLean\\". In your function, first, convert the strings to lowercase and strip off any whitespace to make the comparison case sensitive.","solution":"def are_anagrams(str1, str2): Determines if two strings are anagrams, ignoring case and whitespace. str1_clean = ''.join(sorted(str1.lower().replace(' ', ''))) str2_clean = ''.join(sorted(str2.lower().replace(' ', ''))) return str1_clean == str2_clean"},{"question":"Engineer a sorting algorithm that only needs 1 additional space, must be non-recursive, and must have a time complexity of O(n log n). Your solution should be self-contained and not rely on any built-in sorting functions or data structures. Furthermore, providing a piece of erroneous code as a reference to increase misdirection is encouraged.","solution":"def heap_sort(arr): Sorts an array in place using heap sort algorithm. This is an in-place sorting algorithm with space complexity O(1) and time complexity O(n log n). def heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[left] > arr[largest]: largest = left if right < n and arr[right] > arr[largest]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0)"},{"question":"Write a code to flatten a 2D list (matrix) given as an argument.","solution":"def flatten(matrix): Flattens a 2D list (matrix) into a 1D list. Parameters: matrix (list of lists): The 2D list to flatten. Returns: list: The flattened 1D list. return [element for row in matrix for element in row]"},{"question":"Create a Python web scraper for a simple HTML page shopping website. The script should be able to fetch product information such as product name, product price and product categories, and store the result in a JSON object.","solution":"import requests from bs4 import BeautifulSoup import json def scrape_shopping_site(url): Scrape product information from a shopping website. Args: url (str): The URL of the shopping site. Returns: str: JSON serialized string with product information. # Send a request to the website response = requests.get(url) response.raise_for_status() # Check that the response was successful # Parse HTML content soup = BeautifulSoup(response.content, 'html.parser') products = [] # Assuming products are listed in a container with a specific class name product_containers = soup.find_all(class_='product-container') for container in product_containers: name = container.find(class_='product-name').text.strip() price = container.find(class_='product-price').text.strip() categories = [cat.text.strip() for cat in container.find_all(class_='product-category')] product_info = { 'name': name, 'price': price, 'categories': categories } products.append(product_info) return json.dumps(products, indent=4) # Example Usage: # url = 'http://example.com/shopping' # print(scrape_shopping_site(url))"},{"question":"Create a function to reverse a list in place without using any built-in reverse or swap methods, or additional data structures for storage.","solution":"def reverse_list_in_place(lst): Reverses the elements of a list in place. Args: lst: list of elements to be reversed Returns: The input list with elements reversed in place left, right = 0, len(lst) - 1 while left < right: # Swap elements lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1 return lst"},{"question":"Develop a code segment that verifies if a given integer is a palindrome without changing its data type.","solution":"def is_palindrome_number(number): Determines if a given integer is a palindrome without changing its data type. A palindrome is a number that reads the same backward as forward. Args: number (int): the integer to be checked Returns: bool: True if the number is a palindrome, False otherwise if number < 0: return False # Find the reverse of the number original_number = number reversed_number = 0 while number > 0: remainder = number % 10 reversed_number = reversed_number * 10 + remainder number = number // 10 return original_number == reversed_number"},{"question":"Create a Function to reverse a given string without using any in-built function or manually creating a reversed string in a new variable.","solution":"def reverse_string(s): Returns the reversed string of the input string s. if len(s) <= 1: return s # Recursive call to reverse the string return reverse_string(s[1:]) + s[0]"},{"question":"Create a python program to print the cube of the first N prime numbers.","solution":"def is_prime(n): Check if a number is prime. A prime number is only divisible by 1 and itself. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def prime_numbers(n): Generate the first N prime numbers. primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes def cube_of_primes(n): Return the list of the cubes of the first N prime numbers. primes = prime_numbers(n) cubes = [p**3 for p in primes] return cubes"},{"question":"Build a function in Python using loops that can print all prime numbers between two given numbers (inclusive).","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def primes_between(a, b): Returns a list of all prime numbers between a and b (inclusive). primes = [] for num in range(a, b + 1): if is_prime(num): primes.append(num) return primes"},{"question":"Write an automated test script in Python for a function \\"sum_numbers\\" that takes in a list of integers and returns their sum. The function should handle large input sizes efficiently, with a time complexity of O(n). Additionally, the function should only use constant extra space and should not use any built-in Python functions for calculating the sum.","solution":"def sum_numbers(numbers): Returns the sum of a list of integers. # Initialize the sum to zero total = 0 # Iterate through each number in the list for num in numbers: total += num return total"},{"question":"Write a python function that adds a new color to a given list of colors. However, the new color should not be added if it already exists in the list. The function should return the updated list of colors.","solution":"def add_color(colors_list, new_color): Adds a new color to the colors_list if it does not already exist in the list. Args: colors_list (list): A list of color names as strings. new_color (str): The color name to add to the colors_list. Returns: list: The updated list of colors. if new_color not in colors_list: colors_list.append(new_color) return colors_list"},{"question":"Can you modify the given Python function \`is_prime(n)\` to check if a given number is a prime number and also print the total count of prime numbers less than the given number? The function should return \`True\` if the number is prime and \`False\` otherwise, and the count of prime numbers less than the given number should be printed when the function is called.","solution":"def is_prime(n): Returns True if n is a prime number and False otherwise. Also prints the total count of prime numbers less than n. if n <= 1: print(0) return False count = 0 for i in range(2, n): if all(i % j != 0 for j in range(2, int(i**0.5) + 1)): count += 1 print(count) if n > 1 and all(n % i != 0 for i in range(2, int(n**0.5) + 1)): return True return False"},{"question":"Suggest a way to convert a given numeric value to its equivalent Roman Numeral in Python, while also handling values up to 1 million and ensuring the solution has a time complexity of O(log n).","solution":"def int_to_roman(n): Convert an integer to a Roman numeral while handling values up to 1,000,000. The function assumes the input integer is between 1 and 1,000,000. if not 0 < n <= 10**6: raise ValueError(\\"The given value must be between 1 and 1,000,000\\") num_to_roman = [ (1000000, 'M̅'), (900000, 'C̅M̅'), (500000, 'D̅'), (400000, 'C̅D̅'), (100000, 'C̅'), (90000, 'X̅C̅'), (50000, 'L̅'), (40000, 'X̅L̅'), (10000, 'X̅'), (9000, 'I̅X̅'), (5000, 'V̅'), (4000, 'I̅V̅'), (1000, 'M'), (900, 'CM'), (500, 'D'), (400, 'CD'), (100, 'C'), (90, 'XC'), (50, 'L'), (40, 'XL'), (10, 'X'), (9, 'IX'), (5, 'V'), (4, 'IV'), (1, 'I') ] roman_numerals = '' for value, numeral in num_to_roman: while n >= value: roman_numerals += numeral n -= value return roman_numerals"},{"question":"Create a Python program that can handle complex nested data structures represented in CSV files by utilizing the \`csv\` and \`collections\` modules. The program should allow users to specify multiple CSV files as input, and it should recursively process nested data structures to generate a \`set\` of unique tuples containing all the data in the CSV files. Moreover, the program should offer advanced options to exclude or include specific values in the output based on certain conditions, and ensure that the output is sorted alphabetically. Additionally, the program should provide a feature to convert the output tuples into other data structures such as \`list\` or \`dict\`.","solution":"import csv from collections import defaultdict from typing import List, Set, Tuple, Dict, Any def read_csv_files(filepaths: List[str]) -> List[dict]: Read multiple CSV files and return a list of dictionaries representing the rows. data = [] for filepath in filepaths: with open(filepath, newline='') as csvfile: reader = csv.DictReader(csvfile) for row in reader: data.append(row) return data def process_data(data: List[dict], exclude: List[Any] = None) -> Set[Tuple]: Process nested data structures and generate a set of unique tuples. Excludes specified values if provided. unique_tuples = set() def process_nested(d: dict): for key, value in d.items(): if isinstance(value, dict): process_nested(value) elif isinstance(value, list): for item in value: if isinstance(item, dict): process_nested(item) else: if exclude and item in exclude: continue unique_tuples.add((key, item)) else: if exclude and value in exclude: continue unique_tuples.add((key, value)) for row in data: process_nested(row) return unique_tuples def convert_output(unique_tuples: Set[Tuple], output_type: str = 'set') -> Any: Convert the output tuples into other data structures such as \`list\` or \`dict\`. Output is sorted alphabetically. sorted_output = sorted(unique_tuples, key=lambda x: (x[0], str(x[1]))) if output_type == 'list': return list(sorted_output) elif output_type == 'dict': result = defaultdict(list) for key, value in sorted_output: result[key].append(value) return dict(result) return set(sorted_output)"},{"question":"Create a Python program to implement a basic calculator that can add, subtract, multiply and divide two numbers. The program should also handle complex numbers and display the result up to 3 decimal places. Additionally, include a feature that allows the user to input multiple numbers and perform multiple operations in a single expression, such as (2 + 3) * 4 - 5 / 6. Make sure to handle the order of operations correctly. The program should prioritize parentheses, then multiplication and division, and finally addition and subtraction.","solution":"def calculate(expression): Evaluates a mathematical expression involving complex numbers and returns the result rounded to 3 decimal places. Parameters: expression (str): The mathematical expression to evaluate. Returns: str: The result of the expression rounded to 3 decimal places. try: result = eval(expression, {\\"__builtins__\\": None}, {\\"complex\\": complex}) if isinstance(result, complex): result_str = f\\"{result.real:.3f}{'+' if result.imag >= 0 else ''}{result.imag:.3f}j\\" else: result_str = f\\"{result:.3f}\\" return result_str except Exception as e: return str(e)"},{"question":"Given is a Python list with various data types. Write a program that filters out all the non-integer elements and returns the sum of all integer elements in the list. Use the following list as an example: data = [1, 'a', 'b', 2.3, 'c', 5, 10L, 'hello', [], [1,2], {}, {'a': 1}]","solution":"def sum_of_integers(data): Filters out all non-integer elements and returns the sum of all integer elements in the list. Parameters: data (list): A list containing elements of various data types. Returns: int: The sum of all integer elements in the list. return sum(item for item in data if isinstance(item, int))"},{"question":"Create a program in Python that finds the first two elements of a list that adds up to a given number.","solution":"def find_pair_with_sum(arr, target): Finds the first pair of elements in the list \`arr\` that add up to the \`target\` sum. Parameters: arr (list of int): The list of integers. target (int): The target sum to find in the pair of elements. Returns: tuple: The first pair of integers that add up to the target sum, or \`None\` if no such pair exists. seen_elements = {} for num in arr: required_num = target - num if required_num in seen_elements: return (required_num, num) seen_elements[num] = True return None"},{"question":"Given three dictionaries, dictA, dictB, and dictC, write a function in Python that combines all three dictionaries into a new dictionary. However, only include keys that start with a vowel and have values that are either integers or of a type that is a collection of integers (e.g., list, set, tuple). Remember that lower precedence is given to latter dictionaries in case of key collisions.","solution":"def combine_dicts(dictA, dictB, dictC): Combines three dictionaries into a new dictionary including only keys that start with a vowel and have values that are either integers or collection of integers. Lower precedence is given to latter dictionaries in case of key collisions. def valid_key_value(key, value): vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U') if isinstance(value, int): return key.startswith(vowels) elif isinstance(value, (list, set, tuple)) and all(isinstance(i, int) for i in value): return key.startswith(vowels) return False combined_dict = {} for dictionary in [dictA, dictB, dictC]: for key, value in dictionary.items(): if valid_key_value(key, value): combined_dict[key] = value return combined_dict"},{"question":"Write a Python function called \`check_name\` that takes in two parameters: \`name\` and \`forbidden\`. The function should return \`True\` if the given \`name\` does not contain any of the substrings specified in the \`forbidden\` list and \`False\` otherwise.","solution":"def check_name(name, forbidden): Returns True if 'name' does not contain any of the substrings in 'forbidden' list, otherwise False. Parameters: name (str): The name to be checked. forbidden (list): A list of substrings which are not allowed in the name. Returns: bool: True if name does not contain any forbidden substrings, False otherwise. for substr in forbidden: if substr in name: return False return True"},{"question":"Create a program which takes a list of strings as an input and prints the length of each string using a for loop. However, you are not allowed to use the built-in function len() to calculate the length of each string. Instead, you need to implement your own function to count the characters in each string.","solution":"def count_characters(s): Count the number of characters in the string s without using len(). count = 0 for _ in s: count += 1 return count def print_lengths(strings): Prints the length of each string in the given list of strings. for s in strings: print(count_characters(s))"},{"question":"Create a function that takes in a length and returns a boolean indicating whether the word 'cat' appears exactly that amount of times in the given string. The function should also check for a second word 'dog', but the boolean returned should indicate the opposite of whether the word 'dog' appears exactly the given number of times. The function should be case-insensitive.","solution":"def check_word_count(text, count): Returns True if 'cat' appears exactly \`count\` times in the given \`text\` and 'dog' does not appear exactly \`count\` times. Returns False otherwise. text_lower = text.lower() cat_count = text_lower.count('cat') dog_count = text_lower.count('dog') return cat_count == count and dog_count != count"},{"question":"Write a Python program to find the largest common factor in two integers.","solution":"import math def largest_common_factor(a, b): Returns the largest common factor (greatest common divisor) of two integers. return math.gcd(a, b)"},{"question":"Write a Python code that prints the phrase \\"Hello World!\\" on the screen, but restrict the use of any built-in print or display functions. Additionally, you must use a recursive function to print the phrase, with a maximum recursion depth of 1000. However, you are not allowed to use any string concatenation or joining methods to construct the final output.","solution":"def print_hello_world(n=0): Recursive function to print \\"Hello World!\\" on the screen without using built-in print or display functions, string concatenation, or joining. phrase = [\\"H\\", \\"e\\", \\"l\\", \\"l\\", \\"o\\", \\" \\", \\"W\\", \\"o\\", \\"r\\", \\"l\\", \\"d\\", \\"!\\"] if n < len(phrase): # Write character on standard output without using print function sys.stdout.write(phrase[n]) # Flush the buffer to ensure the output appears immediately sys.stdout.flush() print_hello_world(n + 1) import sys # Call the recursive function print_hello_world()"},{"question":"Write in python a program that prints the sum of the squares of the first 100 prime numbers. Additionally, you are not allowed to use any built-in functions or libraries for prime number generation or checking. You must implement your own prime number generator and checker.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def prime_generator(limit): Generate prime numbers up to a specified limit. primes = [] num = 2 while len(primes) < limit: if is_prime(num): primes.append(num) num += 1 return primes def sum_of_squares_of_primes(limit): Return the sum of the squares of the first 'limit' prime numbers. primes = prime_generator(limit) return sum(p ** 2 for p in primes) # Example usage print(sum_of_squares_of_primes(100))"},{"question":"Given a list of n numbers, write a Python program that finds the kth smallest element from the list where k is an input parameter. Your solution must fulfill the following restrictions: Do not use the sort function in Python or any similar library functions for sorting or selecting.","solution":"def find_kth_smallest(nums, k): Finds the kth smallest element in the list nums without using the sort function. :param nums: A list of numbers :param k: The index (1-based) of the smallest element to find :return: The kth smallest element in nums if k < 1 or k > len(nums): raise ValueError(\\"k is out of the range of the list size\\") def partition(low, high): pivot = nums[high] i = low for j in range(low, high): if nums[j] <= pivot: nums[i], nums[j] = nums[j], nums[i] i += 1 nums[i], nums[high] = nums[high], nums[i] return i def quickselect(low, high, index): if low == high: return nums[low] pivot_index = partition(low, high) if index == pivot_index: return nums[pivot_index] elif index < pivot_index: return quickselect(low, pivot_index - 1, index) else: return quickselect(pivot_index + 1, high, index) return quickselect(0, len(nums) - 1, k - 1)"},{"question":"Write code to find the closest string to the given string from the given list of strings. The close match should not necessarily be a part of the list provided. Your code should handle cases where the same string can appear multiple times in the list, and it should use a custom algorithm to determine the string's closeness. You can't use any external libraries for string matching.","solution":"def closest_string(target, strings): Returns the closest string to 'target' from the list 'strings'. def custom_distance(s1, s2): Calculates the custom distance between two strings. For simplicity, we will use a basic distance metric: the sum of the absolute differences of the ASCII values of corresponding characters. dist = 0 for ch1, ch2 in zip(s1, s2): dist += abs(ord(ch1) - ord(ch2)) dist += abs(len(s1) - len(s2)) * 10 # Penalize different lengths heavily return dist closest, min_distance = None, float('inf') for string in strings: distance = custom_distance(target, string) if distance < min_distance: closest, min_distance = string, distance return closest"},{"question":"Raise the difficulty of this programming test question by asking the solution not only to avoid the use of inbuilt Python set functions but also to handle tuples with nested tuples, considering all elements for uniqueness check (including elements of nested tuples). Additionally, the solution needs to retain the original order of the main tuple and all nested tuples.","solution":"def flatten(tup): Helper function to flatten the tuple. Yields elements deeply from nested tuples. for item in tup: if isinstance(item, tuple): yield from flatten(item) else: yield item def unique_tuple_elements(tup): Returns a tuple with unique elements while preserving the order. seen = set() flat_elements = list(flatten(tup)) unique_elements = [] for element in flat_elements: if element not in seen: seen.add(element) unique_elements.append(element) return tuple(unique_elements)"},{"question":"Imagine you are working on a project that involves training a Keras model using datasets stored in a Google Cloud Storage bucket. For instance, your training data might be named \`mldata-0001.csv\`, \`mldata-0002.csv\`, etc., and your test data might be \`mltest-0001.csv\`, \`mltest-0002.csv\`, etc. Your task is to create a Python function that dynamically generates these filenames based on a given number \`n\`. The function should return a list of \`n\` filenames, where each filename follows the format \`ml<i>-<j>.csv\`, with \`<i>\` as 'data' for training sets or 'test' for test sets, and \`<j>\` as a two-digit number starting from 01 up to \`n\` (01, 02, 03, ..., n).","solution":"def generate_filenames(n, dataset_type): Generates a list of filenames for a given number 'n' and dataset type ('data' for training and 'test' for testing). Parameters: n (int): The number of filenames to generate. dataset_type (str): The type of dataset ('data' or 'test'). Returns: List[str]: A list of filenames. if dataset_type not in ['data', 'test']: raise ValueError(\\"Invalid dataset type. Choose either 'data' or 'test'.\\") filenames = [f'ml{dataset_type}-{num:04d}.csv' for num in range(1, n + 1)] return filenames"},{"question":"Create a function that returns the nth Fibonacci number using a recursive approach with memoization to optimize performance.","solution":"def fibonacci(n, memo={}): Returns the nth Fibonacci number using recursion with memoization. if n in memo: return memo[n] if n <= 1: memo[n] = n else: memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Reimplement the quicksort algorithm using an iterative approach instead of a recursive approach. Additionally, optimize the algorithm to have a time complexity of O(nlogn) and a space complexity of O(logn).","solution":"def quicksort_iterative(arr): Perform an iterative quicksort on the provided array. if len(arr) <= 1: return arr stack = [(0, len(arr) - 1)] while stack: low, high = stack.pop() if low < high: p = partition(arr, low, high) stack.append((low, p - 1)) stack.append((p + 1, high)) return arr def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1"},{"question":"Develop a regular expression that can not only identify and extract URL信息 from a text, but also categorized based on protocol (http or https), domain type (.com, .org, .edu, etc.) and the path after \\".com/\\" or similar. Your solution should be robust enough to support different kind of URL formats and international domain names.","solution":"import re def extract_urls_and_classify(text): Extract URLs from the given text and classify based on protocol, domain, and path. Parameters: text (str): The text from which URLs need to be extracted Returns: list of dict: A list of dictionaries containing protocol, domain, and path url_regex = re.compile(r'(?P<protocol>https?)://(?P<domain>[w.-]+.[w]+)(/(?P<path>[w./-]*)?)?') matches = url_regex.findall(text) categorized_urls = [] for match in matches: protocol, domain, path = match[0], match[1], match[3] if match[3] else \\"\\" categorized_urls.append({ \\"protocol\\": protocol, \\"domain\\": domain, \\"path\\": path }) return categorized_urls"},{"question":"build a hashmap data structure in python that associates an integer id ranging from 1 to 100000 to a set of (int, float) tuples. Each int float tuple represents a temperature measurement (timestamp, temperature). Make sure that searching, insertion, and deletion are very fast but also saving memory is important. Lastly make sure the hashes avoid collisions","solution":"class HashMap: def __init__(self): self.size = 100000 self.map = [[] for _ in range(self.size)] def _hash(self, key): Generates a hash for a given key within the range of the hashmap size. Uses a simple modulo operation for hash calculation. return key % self.size def insert(self, key, value): Inserts a value into the hashmap with the specified key. hash_key = self._hash(key) key_exists = False bucket = self.map[hash_key] for i, kv in enumerate(bucket): k, v = kv if k == key: key_exists = True break if key_exists: self.map[hash_key][i] = (key, value) else: self.map[hash_key].append((key, value)) def search(self, key): Searches and returns the value associated with a key in the hashmap. Returns None if the key is not found. hash_key = self._hash(key) bucket = self.map[hash_key] for k, v in bucket: if k == key: return v return None def delete(self, key): Deletes the value associated with a key in the hashmap. hash_key = self._hash(key) bucket = self.map[hash_key] for i, kv in enumerate(bucket): k, v = kv if k == key: bucket.pop(i) return True return False"},{"question":"Write a Python function that takes a list of integers and returns True if all of the numbers in the list are prime. If any number in the list is not prime, the function should return False.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def all_primes(lst): Returns True if all numbers in lst are prime, otherwise False. return all(is_prime(num) for num in lst)"},{"question":"Given a linked list, insert an element 'x' at a given position 'n'. Additionally, for further complexity, if the given position 'n' is out of bounds (either less than 0 or more than the length of the linked list), return the original linked list as is.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def insert_at_position(head, x, n): Insert element 'x' at position 'n' in the linked list. If 'n' is out of bounds, return the original linked list. if n < 0: return head dummy = ListNode(0) dummy.next = head current = dummy for _ in range(n): if current.next is None: # Out of bounds check return head current = current.next new_node = ListNode(x) new_node.next = current.next current.next = new_node return dummy.next"},{"question":"Create a function that converts currency from one denomination to another. Initially, the function should convert from US dollars to Euros, using a conversion rate specified by the user. Then modify this function to dynamically retrieve real-time currency exchange rates from a web API of your choice, to facilitate currency conversion between any two currencies supported by the API.","solution":"import requests def convert_currency(amount, from_currency, to_currency, api_key): Converts the specified amount from one currency to another using real-time exchange rates. :param amount: The amount of money to convert. :param from_currency: The currency code of the amount. :param to_currency: The currency code to convert to. :param api_key: The API key for the currency exchange rate provider. :return: The converted amount. url = f\\"https://api.exchangerate-api.com/v4/latest/{from_currency}\\" response = requests.get(url) if response.status_code != 200: raise Exception(\\"Error fetching exchange rates\\") rates = response.json().get('rates') if to_currency not in rates: raise ValueError(f\\"Unsupported currency: {to_currency}\\") conversion_rate = rates[to_currency] return amount * conversion_rate # Example usage (this line should not be executed within the code cell, shown only for demonstration) # converted_amount = convert_currency(100, \\"USD\\", \\"EUR\\", \\"your_api_key_here\\")"},{"question":"Please write a program in Python to implement a calculator that can perform addition, subtraction, multiplication and division. Additionally, the calculator should be able to handle complex numbers and perform trigonometric functions such as sine, cosine, and tangent. The calculator should also have the ability to calculate the square root and factorial of a number.","solution":"import math import cmath def add(a, b): return a + b def subtract(a, b): return a - b def multiply(a, b): return a * b def divide(a, b): if b == 0: raise ZeroDivisionError(\\"Cannot divide by zero\\") return a / b def sine(x): return math.sin(x) def cosine(x): return math.cos(x) def tangent(x): return math.tan(x) def square_root(x): if x < 0: return cmath.sqrt(x) return math.sqrt(x) def factorial(x): if not isinstance(x, int) or x < 0: raise ValueError(\\"Factorial is only defined for non-negative integers\\") return math.factorial(x)"},{"question":"Implement a function that takes in a string, a target character, and a replacement character. The function should return a new version of the string where all occurrences of the target character are replaced with the replacement character. If the target character is not found in the string, the function should return the original string unchanged.","solution":"def replace_character(string, target, replacement): Returns a new version of the string where all occurrences of the target character are replaced with the replacement character. If the target character is not found, the original string is returned unchanged. return string.replace(target, replacement)"},{"question":"Create a function that generates a N x N matrix, where the elements are integers ranging from 1 to N^2 in column-major order.","solution":"def generate_column_major_matrix(N): Generate a N x N matrix with elements ranging from 1 to N^2 in column-major order. matrix = [[0] * N for _ in range(N)] num = 1 for col in range(N): for row in range(N): matrix[row][col] = num num += 1 return matrix"},{"question":"We need to write a Python program to generate all possible combinations of k numbers out of a given set of n numbers, where both n and k are positive integers and k <= n.","solution":"from itertools import combinations def generate_combinations(n, k): Generates all possible combinations of k numbers out of n. :param n: total number of items :param k: number of items to choose :return: list of tuples, each tuple is a combination of k items numbers = range(1, n + 1) return list(combinations(numbers, k))"},{"question":"Given the list of integers, write a Python function called \\"calculate_average\\" that returns the average of all the integers. However, you should not use the sum() function or any built-in functions to calculate the sum of the integers. Instead, you should implement your own algorithm to calculate the sum.","solution":"def calculate_average(numbers): Returns the average of the list of integers. total = 0 count = 0 for number in numbers: total += number count += 1 if count == 0: return 0 # Return 0 if the list is empty return total / count"},{"question":"Develop a Python program snippet to Display Low Fitness: Step Counting for Analysis for Experts. Incorporate if/else or switch/case statements to handle various cases related to the Safety. Dry-run, ensure your control flow logic is clear and well-commented.","solution":"def analyze_step_count(step_count): Analyzes the step count and returns a fitness analysis message. :param step_count: int, number of steps taken :return: str, analysis message if step_count < 2000: return \\"Low Fitness: Your step count is below the recommended level for maintaining basic health.\\" elif step_count < 5000: return \\"Moderate Fitness: You are on the right path, but you need to take more steps to hit optimal fitness.\\" elif step_count < 10000: return \\"Good Fitness: You are close to the optimal step count. Keep going!\\" else: return \\"Excellent Fitness: Great job! You've reached or exceeded the recommended step count for a healthy lifestyle.\\""},{"question":"Write a Python code to generate a string of 128 randomly chosen characters. This string will be used as a secure password. Ensure that this password contains at least one lowercase letter, one uppercase letter, one digit and one special character from the set {'!', '@', '#', '', '%', '^', '&', '*'} to make the password strong and secure.","solution":"import random import string def generate_secure_password(): Generate a strong and secure password of 128 characters length that includes at least one lowercase letter, one uppercase letter, one digit, and one special character from the set {'!', '@', '#', '', '%', '^', '&', '*'}. special_characters = '!@#%^&*' password_characters = ( string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters ) # Ensure at least one character from each required set password = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase), random.choice(string.digits), random.choice(special_characters) ] # Fill the rest of the password length (124 characters) password += [random.choice(password_characters) for _ in range(124)] # Shuffle to avoid predictable character positions random.shuffle(password) return ''.join(password)"},{"question":"Write a program in Python to sort a list of integers in ascending order. The program should also remove any duplicate elements from the list before sorting it. The program should only use O(1) additional space and have a time complexity of O(n log n). The list should be modified in-place, without creating a new list or using any built-in sorting functions.","solution":"def sort_and_remove_duplicates(nums): Sorts a list of integers in ascending order and removes any duplicate elements. Args: nums (list): A list of integers to be sorted and deduplicated. Returns: list: The input list, sorted and deduplicated, modified in-place. if not nums: return nums # Use a simple in-place heap sort to achieve O(n log n) time complexity def heapify(nums, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and nums[i] < nums[left]: largest = left if right < n and nums[largest] < nums[right]: largest = right if largest != i: nums[i], nums[largest] = nums[largest], nums[i] heapify(nums, n, largest) n = len(nums) for i in range(n // 2 - 1, -1, -1): heapify(nums, n, i) for i in range(n-1, 0, -1): nums[i], nums[0] = nums[0], nums[i] heapify(nums, i, 0) # Remove duplicates while maintaining O(1) additional space complexity last_unique = 1 for i in range(1, len(nums)): if nums[i] != nums[last_unique - 1]: nums[last_unique] = nums[i] last_unique += 1 # Slice the list to keep only unique elements del nums[last_unique:] return nums"},{"question":"Given two 3-dimensional numpy arrays A and B, write a numpy program to compute the matrix product of A and B. Also, optimize the computation using Strassen’s Matrix multiplication algorithm for better performance in higher dimensional matrices.","solution":"import numpy as np def strassen_multiply(A, B): Perform Strassen's matrix multiplication algorithm on 3-dimensional numpy arrays A and B. assert A.shape == B.shape, \\"Matrices must be of the same shape\\" assert A.shape[1] == A.shape[2], \\"Matrices should be square in the last two dimensions\\" def strassen(A, B): n = A.shape[0] if n == 1: return A * B else: mid = n // 2 A11, A12, A21, A22 = A[:mid, :mid], A[:mid, mid:], A[mid:, :mid], A[mid:, mid:] B11, B12, B21, B22 = B[:mid, :mid], B[:mid, mid:], B[mid:, :mid], B[mid:, mid:] M1 = strassen(A11 + A22, B11 + B22) # M1 = (A11 + A22) * (B11 + B22) M2 = strassen(A21 + A22, B11) # M2 = (A21 + A22) * B11 M3 = strassen(A11, B12 - B22) # M3 = A11 * (B12 - B22) M4 = strassen(A22, B21 - B11) # M4 = A22 * (B21 - B11) M5 = strassen(A11 + A12, B22) # M5 = (A11 + A12) * B22 M6 = strassen(A21 - A11, B11 + B12) # M6 = (A21 - A11) * (B11 + B12) M7 = strassen(A12 - A22, B21 + B22) # M7 = (A12 - A22) * (B21 + B22) C11 = M1 + M4 - M5 + M7 C12 = M3 + M5 C21 = M2 + M4 C22 = M1 + M3 - M2 + M6 C = np.vstack((np.hstack((C11, C12)), np.hstack((C21, C22)))) return C result = np.zeros_like(A) for i in range(A.shape[0]): result[i] = strassen(A[i], B[i]) return result def matrix_product(A, B): Compute the matrix product of two 3-dimensional numpy arrays A and B using optimized matrix multiplication. return strassen_multiply(A, B)"},{"question":"In uploaded file named dupliversionprotein.py, please identify the parts of the code designated as \\"<mask>\\", \\"<mask>\\", and \\"<mask>\\". These parts correspond to the following functions: inserting a specific string at the beginning of a given string, removing the last slash from a string if it exists, and determining the index of the string \\".py\\" in a given string. Please suggest plausible code segments that can replace the masked parts.","solution":"def insert_at_beginning(main_str, insert_str): Inserts a specific string at the beginning of the given string. Parameters: main_str (str): The main string where the insertion will be performed. insert_str (str): The string to be inserted at the beginning. Returns: str: The resulting string after insertion. return insert_str + main_str def remove_last_slash(input_str): Removes the last slash from the input string if it exists. Parameters: input_str (str): The string that may contain a trailing slash. Returns: str: The string after removal of the last slash. if input_str.endswith('/'): return input_str[:-1] return input_str def find_index_of_py(input_str): Determines the index of the substring \\".py\\" in the given string. Parameters: input_str (str): The string in which to determine the index of \\".py\\". Returns: int: The index of the substring \\".py\\", or -1 if it is not found. return input_str.find(\\".py\\")"},{"question":"Modify the following code to swap the values of two variables 'a' and 'b' without using the temporary variable. Additionally, ensure that the code works for both integer and floating-point variables. However, you are not allowed to use any arithmetic operations or built-in swap functions.","solution":"def swap(a, b): Swaps the values of two variables without using a temporary variable. Works for both integers and floating-point numbers. a, b = b, a return a, b"},{"question":"Create a Python dictionary with keys representing the names of planets in our solar system and values indicating the number of known moons each has as of the year 2023. The dictionary should also feature methods to add, update, and delete planets and their moons.","solution":"class SolarSystem: def __init__(self): self.planets = { 'Mercury': 0, 'Venus': 0, 'Earth': 1, 'Mars': 2, 'Jupiter': 79, 'Saturn': 83, 'Uranus': 27, 'Neptune': 14, 'Pluto': 5 # including Pluto as a dwarf planet } def add_planet(self, planet_name, no_of_moons): self.planets[planet_name] = no_of_moons def update_planet(self, planet_name, no_of_moons): if planet_name in self.planets: self.planets[planet_name] = no_of_moons else: raise ValueError(f\\"Planet {planet_name} does not exist in the solar system.\\") def delete_planet(self, planet_name): if planet_name in self.planets: del self.planets[planet_name] else: raise ValueError(f\\"Planet {planet_name} does not exist in the solar system.\\") def get_planets(self): return self.planets"},{"question":"Can you write me a Python function that takes a list of numbers as an input, removes duplicates from it and returns the result? Additionally, always return the length of the list before duplicates were removed and the length after duplicates were removed.","solution":"def remove_duplicates(numbers): Takes a list of numbers, removes duplicates, and returns the list without duplicates, the original length of the list, and the length after duplicates were removed. Parameters: numbers (list): List of numbers Returns: tuple: A tuple containing the list without duplicates, the original length, and the length after duplicates were removed original_length = len(numbers) unique_numbers = list(set(numbers)) new_length = len(unique_numbers) return unique_numbers, original_length, new_length"},{"question":"Write a function in Python that takes in a string and shifts all the alphabetic characters three places to the right, wrapping around the alphabet if necessary. The function should preserve the case of the characters and ignore any non-alphabetic characters.","solution":"def shift_string(s): Shifts all the alphabetic characters in the input string three places to the right, wrapping around the alphabet if necessary. Preserves the case and ignores non-alphabetic characters. def shift_char(c): if 'a' <= c <= 'z': return chr((ord(c) - ord('a') + 3) % 26 + ord('a')) elif 'A' <= c <= 'Z': return chr((ord(c) - ord('A') + 3) % 26 + ord('A')) else: return c return ''.join(shift_char(c) for c in s)"},{"question":"Write a function called \`add_numbers\` in Python to add two numbers \`x\` and \`y\`. However, make sure that both \`x\` and \`y\` are positive integers and greater than zero. If either \`x\` or \`y\` is not a positive integer, raise a \`ValueError\` with an appropriate error message.","solution":"def add_numbers(x, y): Returns the sum of x and y if both are positive integers greater than zero. Raises ValueError if either x or y is not a positive integer. if not isinstance(x, int) or not isinstance(y, int): raise ValueError(\\"Both x and y must be integers.\\") if x <= 0 or y <= 0: raise ValueError(\\"Both x and y must be positive integers greater than zero.\\") return x + y"},{"question":"Given two arrays of integers, write a function to check if the second array is a subset of the first array. However, you must implement the solution without using any built-in set data structure or any built-in function related to set operations. Additionally, do not use any sorting functions or libraries.","solution":"def is_subset(arr1, arr2): Checks if arr2 is a subset of arr1. Parameters: arr1 (list): The first array. arr2 (list): The second array to check for being a subset. Returns: bool: True if arr2 is a subset of arr1, False otherwise. # Create a dictionary to count the occurrences of elements in arr1 count_dict = {} for num in arr1: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 # Check if all elements in arr2 are present in arr1 with enough frequency for num in arr2: if num in count_dict and count_dict[num] > 0: count_dict[num] -= 1 else: return False return True"},{"question":"In Python, how can I choreograph a dance routine for a list of performers, each with their unique moves, while ensuring that no two performers have the same position on the stage at the same time? Also, I want to add a constraint that the total number of moves across all performers must be an odd number. Can you provide a code snippet to help me achieve this?","solution":"def choreograph_dance_routine(performers): Choreograph a dance routine ensuring no two performers have the same position and the total number of moves is an odd number. Parameters: - performers (list of dict): List where each dict represents a performer with keys 'name' and 'moves', a list of positions they move to. Returns: - dict: The choreographed routine where the keys are performer names and the values are their respective moves. routine = {performer['name']: performer['moves'] for performer in performers} # Flatten all moves to count the total number of moves. all_moves = [move for performer in performers for move in performer['moves']] # Check total number of moves if len(all_moves) % 2 == 0: raise ValueError(\\"The total number of moves must be odd.\\") # Checking that no two performers have the same position at the same time timeline = {} for performer in performers: for i, move in enumerate(performer['moves']): if move in timeline and timeline[move] != performer['name']: # A position conflict raise ValueError(f\\"Conflict at position {move} for {performer['name']} on move {i} with {timeline[move]}\\") else: timeline[move] = performer['name'] return routine"},{"question":"Design a Python function snippet to Check High Handwashing technique: Rinsing Properly for Decision Making for Professionals. Implement if/else or switch/case statements to handle different conditions related to the Safety. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def check_handwashing(rinsing_time): Checks if the handwashing technique of rinsing is done properly based on the rinsing time. Parameters: rinsing_time (int): The time, in seconds, spent rinsing hands. Returns: str: A message indicating the result of the check. # According to CDC guidelines, thorough rinsing should take about 10-20 seconds. if rinsing_time < 10: return \\"Rinsing is inadequate, please rinse your hands thoroughly for at least 10 seconds.\\" elif 10 <= rinsing_time <= 20: return \\"Rinsing is adequate, well done.\\" else: # rinsing_time > 20 return \\"Rinsing is excellent, but it may be unnecessary to rinse for more than 20 seconds.\\""},{"question":"Create a Python function that not only takes a list of complex numbers as an argument and returns the number with the smallest magnitude, but also another function to return the magnitude of that number. It should also handle potential errors or exceptions, such as an empty list or elements that are not complex numbers in input list.","solution":"def smallest_magnitude(complex_list): Returns the complex number from the list with the smallest magnitude. Handles empty list by raising ValueError. Handles non-complex elements by raising TypeError. if not complex_list: raise ValueError(\\"The list is empty\\") for number in complex_list: if not isinstance(number, complex): raise TypeError(\\"All elements in the list must be complex numbers\\") return min(complex_list, key=abs) def magnitude(number): Returns the magnitude of the provided complex number. if not isinstance(number, complex): raise TypeError(\\"The input must be a complex number\\") return abs(number)"},{"question":"Write a function that takes in a list of integers and returns a new list with only the odd numbers, without using any built-in filtering functions or list comprehensions.","solution":"def filter_odd_numbers(numbers): Returns a list containing only the odd numbers from the input list. Parameters: numbers (list of int): The list of integers to filter. Returns: list of int: A new list containing only the odd numbers from the input list. odd_numbers = [] for num in numbers: if num % 2 != 0: odd_numbers.append(num) return odd_numbers"},{"question":"Assuming the input is a valid parentheses string, write a function that removes the minimum number of parentheses to make the string valid and ouputs the result.","solution":"def min_remove_to_make_valid(s): Returns a string with the minimum number of parentheses removed to make the input valid. stack = [] s = list(s) for i, char in enumerate(s): if char == '(': stack.append(i) elif char == ')': if stack: stack.pop() else: s[i] = '' for i in stack: s[i] = '' return ''.join(s)"},{"question":"Write a function that achieves the same functionality as the憋socket library in Python, but using only basic socket programming concepts. Your function should be able to send and receive data over a network connection, and should include error handling for common issues such as a disconnected server or a timeout.","solution":"import socket class BasicSocket: def __init__(self, timeout=5): self.sock = None self.timeout = timeout def connect(self, host, port): try: self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.settimeout(self.timeout) self.sock.connect((host, port)) except socket.error as e: print(f\\"Socket error during connection: {e}\\") self.sock = None def send(self, data): if self.sock: try: self.sock.sendall(data.encode()) except socket.error as e: print(f\\"Socket error during send: {e}\\") else: print(\\"Send failed: No active connection\\") def receive(self, buffer_size=1024): if self.sock: try: return self.sock.recv(buffer_size).decode() except socket.timeout: print(\\"Receive timed out\\") except socket.error as e: print(f\\"Socket error during receive: {e}\\") return \\"\\" else: print(\\"Receive failed: No active connection\\") return \\"\\" def close(self): if self.sock: try: self.sock.close() except socket.error as e: print(f\\"Socket error during close: {e}\\")"},{"question":"Write a Python script to download and save the first 10 images from a provided URL to a specified directory.","solution":"import os import requests from bs4 import BeautifulSoup from urllib.parse import urljoin def download_images(url, directory, num_images=10): Downloads the first \`num_images\` images from the provided URL to the specified directory. Parameters: url (str): The URL to scrape images from. directory (str): The directory to save the images. num_images (int): The number of images to download. Defaults to 10. if not os.path.exists(directory): os.makedirs(directory) response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') image_tags = soup.find_all('img') for i, image_tag in enumerate(image_tags[:num_images]): image_url = image_tag.get('src') if not image_url: continue image_url = urljoin(url, image_url) try: image_data = requests.get(image_url).content image_filename = os.path.join(directory, f'image_{i+1}.jpg') with open(image_filename, 'wb') as f: f.write(image_data) print(f'Downloaded {image_url} to {image_filename}') except Exception as e: print(f'Failed to download {image_url}: {e}')"},{"question":"Write a Python function that takes two parameters, a list of integers and a target integer. The function should return a new list containing only the elements from the original list that are greater than the target integer.","solution":"def filter_greater_than(lst, target): Returns a new list containing only the elements from lst that are greater than the target integer. Parameters: lst (list): A list of integers. target (int): The target integer to compare against. Returns: list: A new list containing elements greater than the target integer. return [x for x in lst if x > target]"},{"question":"How would you write a Python code to find all the palindromes in a given string? Please provide the code that extracts and prints all the palindromes of length greater than 2 from the given string \\"dog racecar radar madam\\".","solution":"def find_palindromes(s): Finds or extracts all palindromes of length greater than 2 from the given string. def is_palindrome(subs): return subs == subs[::-1] and len(subs) > 2 words = s.split() palindromes = [word for word in words if is_palindrome(word)] return palindromes input_string = \\"dog racecar radar madam\\" # Printing the palindromes print(find_palindromes(input_string))"},{"question":"Design a Python function that continuously iterates over a list of tuples until a specified \\"delimiter\\" tuple is encountered. Each tuple represents a command and a value for a control system. Apply each command to the control system before moving to the next tuple. When the delimiter tuple is encountered, sort the list of tuples from the previous delimiter (or start of list if it's the first time) based on the values with the command \\"SORT\\". If the delimiter tuple contains a command and a value, apply this special command before sorting.","solution":"def process_commands(commands, delimiter): results = [] subset = [] for command in commands: if command == delimiter: results.extend(sorted(subset, key=lambda x: x[1])) subset = [] else: subset.append(command) if subset: results.extend(sorted(subset, key=lambda x: x[1])) return results"},{"question":"Create a function that takes in two lists, \`keys\` and \`values\`, and returns a dictionary mapping each key to its corresponding value. However, the length of \`keys\` will always be one more than the length of \`values\`. To handle this, add a default value of \`None\` for the extra key.","solution":"def create_dict_from_lists(keys, values): Creates a dictionary from \`keys\` and \`values\` lists. Since the length of \`keys\` is always one more than the length of \`values\`, the extra key gets a value of \`None\`. result_dict = {keys[i]: values[i] if i < len(values) else None for i in range(len(keys))} return result_dict"},{"question":"Modify this code to make it a function which takes a list of numbers and returns their average.","solution":"def average(numbers): Returns the average of a list of numbers. if not numbers: return 0 return sum(numbers) / len(numbers)"},{"question":"I need you to generate Shell commands for creating a virtual environment, activating it, installing Flask framework and creating a basic \\"Hello, World!\\" application with it.","solution":"def generate_shell_commands(): This function returns the shell commands for creating a virtual environment, activating it, installing Flask, and setting up a basic 'Hello, World!' Flask application. commands = # Step 1: Create a virtual environment python3 -m venv venv # Step 2: Activate the virtual environment source venv/bin/activate # On Windows use: venvScriptsactivate # Step 3: Install Flask pip install Flask # Step 4: Create a basic Flask application echo \\"from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): return 'Hello, World!' if __name__ == '__main__': app.run()\\" > app.py # Step 5: Run the Flask application python app.py return commands.strip() # Example usage print(generate_shell_commands())"},{"question":"Transform this code into a more complex functional programming paradigm. You should eliminate the use of for loops and mutable data structures. Also, write the function in a recursive manner instead of using iterative one.","solution":"def recursive_sum(lst): Returns the sum of all elements in the list \`lst\` using recursion. if not lst: return 0 else: return lst[0] + recursive_sum(lst[1:])"},{"question":"Write a function to compute the factorial of a number using recursion. Make sure to handle edge cases such as negative numbers and non-integer inputs. Additionally, modify the function to check if the input number is within the range of 0 to 10 (inclusive) and raise a custom exception of type \`FactorialOutOfRangeError\` if it is outside the range.","solution":"class FactorialOutOfRangeError(Exception): pass def factorial(n): Returns the factorial of a number n using recursion. Handles edge cases for non-integer inputs and out of range. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n > 10: raise FactorialOutOfRangeError(\\"Input must be in the range 0 to 10 (inclusive).\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"How can I encode a message in pig latin using Python?","solution":"def encode_pig_latin(message): Encodes a message into Pig Latin. def encode_word(word): vowels = \\"aeiou\\" if word[0].lower() in vowels: return word + 'ay' else: first_vowel_index = next((i for i, letter in enumerate(word) if letter.lower() in vowels), len(word)) return word[first_vowel_index:] + word[:first_vowel_index] + 'ay' return ' '.join([encode_word(word) for word in message.split()])"},{"question":"Original Prompt: Write an algorithm that calculates the GCD of two numbers in Python.","solution":"def gcd(a, b): Returns the Greatest Common Divisor (GCD) of a and b using the Euclidean algorithm. while b != 0: a, b = b, a % b return a"},{"question":"How can I replace each pixel in an RGB image with the closest color present in a given color palette using Python and OpenCV?","solution":"import cv2 import numpy as np from scipy.spatial import KDTree def replace_with_palette(image, palette): Replace each pixel in the image with the closest color in the palette. :param image: Input image as a numpy array of shape (height, width, 3). :param palette: List of RGB tuples representing the color palette. :return: New image as a numpy array of shape (height, width, 3). # Reshape the image to be a list of pixels. pixels = image.reshape(-1, 3) # Create KDTree for quick nearest neighbor search. tree = KDTree(palette) # Find the closest color from the palette for each pixel in the image. _, closest_palette_indices = tree.query(pixels) # Create the new image by replacing each pixel with the closest palette color. new_pixels = np.array([palette[idx] for idx in closest_palette_indices]) # Reshape the new pixels to the original image shape. new_image = new_pixels.reshape(image.shape) return new_image"},{"question":"Explain and implement a 2D array in Python. Further, using the 2D array implemented, write a function to rotate a given 2D array clockwise by 90 degrees.","solution":"def rotate_90_degrees_clockwise(matrix): Rotates the given 2D array (matrix) by 90 degrees clockwise. Parameters: matrix (list of lists): 2D array to be rotated Returns: list of lists: Rotated 2D array n = len(matrix) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): result[j][n-1-i] = matrix[i][j] return result"},{"question":"Create a script that selects and prints out 20 random capitalized words from a given list. After the words are selected, implement an operation that checks if the selected words can be typed using only one row of a QWERTY keyboard. In addition, provide the time complexity of your algorithms. your initial word list should be manually created and consist of at least 50 unique words.","solution":"import random def select_random_words(word_list, num_words=20): Selects num_words random words from the given word_list. return random.sample(word_list, num_words) def can_be_typed_with_one_row(word): Checks if a given word can be typed with one row of QWERTY keyboard. qwerty_rows = [ set('QWERTYUIOP'), set('ASDFGHJKL'), set('ZXCVBNM') ] upper_word = set(word.upper()) return any(upper_word.issubset(row) for row in qwerty_rows) def main(): word_list = [ 'Apple', 'Banana', 'Cherry', 'Date', 'Elderberry', 'Fig', 'Grape', 'Honeydew', 'Ice', 'Jackfruit', 'Kiwi', 'Lemon', 'Mango', 'Nectarine', 'Orange', 'Papaya', 'Quince', 'Raspberry', 'Strawberry', 'Tangerine', 'Ugli', 'Vanilla', 'Watermelon', 'Xigua', 'Yam', 'Zucchini', 'Plum', 'Peach', 'Apricot', 'Cantaloupe', 'Durian', 'Guava', 'Jujube', 'Lime', 'Mulberry', 'Nance', 'Olive', 'Pear', 'Pumpkin', 'Tomato', 'Guavaberry', 'Lucuma', 'Mandarin', 'Passionfruit', 'Salak', 'Surinam', 'Tamarind', 'Longan', 'Lychee' ] selected_words = select_random_words(word_list) print(\\"Selected words:\\", selected_words) for word in selected_words: if can_be_typed_with_one_row(word): print(f\\"'{word}' can be typed using only one row of a QWERTY keyboard.\\") else: print(f\\"'{word}' cannot be typed using only one row of a QWERTY keyboard.\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a function called \`contains_missing\` that checks whether a given list of integers between 1 and \`n\` is missing any elements. The function should return \`True\` if any integers are missing, or \`False\` if the list contains all integers from 1 to \`n\` without gaps. Additionally, implement a check to prevent the function from running if it is directly called as a script.","solution":"def contains_missing(lst, n): Checks if the list lst containing integers from 1 to n is missing any elements. Args: lst (list): The list of integers. n (int): The upper limit for the range of integers. Returns: bool: True if any integers are missing, False otherwise. return set(range(1, n+1)) != set(lst) if __name__ == '__main__': print(\\"This script is not intended to be run directly\\")"},{"question":"Write a recursive function called \`factorial\` that takes an integer \`n\` as input and returns the factorial of \`n\`. The function should handle negative numbers by raising a ValueError with the message \\"Factorial is not defined for negative numbers.\\"","solution":"def factorial(n): Returns the factorial of n. If n is negative, raises ValueError. if n < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1)"},{"question":"Create a code that will randomly select 'n' items from an input list without replacement.","solution":"import random def select_random_items(input_list, n): Randomly select 'n' items from the input list without replacement. :param input_list: List from which to select items. :param n: Number of items to select. :return: List of 'n' randomly selected items. if n > len(input_list): raise ValueError(\\"n cannot be greater than the length of the input list\\") return random.sample(input_list, n)"},{"question":"I want to make a sketch program like Shazam, that's able to recognize music from an audio stream. I want to draw the results out using block diagrams with boxes and lines instead of using regular output methods such as text or audio. Can you guide me through making a program like this?","solution":"import numpy as np import matplotlib.pyplot as plt import librosa import librosa.display # Placeholder function: Record or capture the audio stream def record_audio(duration=5, sr=22050): Simulates recording audio for a given duration and sample rate. Returns a numpy array representing the audio. # Here you would use actual recording code. For simplicity, we'll use a loaded example. y, sr = librosa.load(librosa.example('trumpet'), duration=duration, sr=sr) return y, sr # Placeholder function: Extract MFCC features from the audio def extract_features(audio, sr): Extracts MFCC features from the given audio. mfccs = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=13) return mfccs # Placeholder function: Match the features to a database def match_song(features): Simulates matching extracted features to a song database. Returns the name of the song if a match is found. # For simplicity, return a mocked song title return \\"Mocked Song Title\\" # Visualization: Draw the block diagram def draw_block_diagram(): fig, ax = plt.subplots(figsize=(10, 6)) ax.plot() boxes = ['Audio Input', 'Feature Extraction', 'Matching', 'Result'] y_pos = np.arange(len(boxes)) ax.barh(y_pos, np.ones_like(y_pos), edgecolor='black') for i, box in enumerate(boxes): ax.text(0.5, i, box, va='center', ha='center') ax.set_xlim(-0.1, 1.1) ax.set_yticks(y_pos) ax.set_yticklabels(boxes) plt.show() # Full pipeline to illustrate the entire process def music_recognition_pipeline(): # Step 1: Record Audio audio, sr = record_audio() print(f\\"Recorded audio with shape: {audio.shape}, Sample Rate: {sr}\\") # Step 2: Extract Features features = extract_features(audio, sr) print(f\\"Extracted features with shape: {features.shape}\\") # Step 3: Match Song song_title = match_song(features) print(f\\"Matched Song Title: {song_title}\\") # Step 4: Visualize Block Diagram draw_block_diagram() return song_title, features if __name__ == \\"__main__\\": music_recognition_pipeline()"},{"question":"Define a function that takes a list and an element as inputs, and removes all occurrences of that element from the list. Additionally, the function should ignore case sensitivity when comparing the elements in the list with the given element. The function should return the modified list.","solution":"def remove_all_occurrences(lst, element): Removes all occurrences of the specified element from the list, ignoring case sensitivity. Args: lst (list): The list to remove the element from. element (str): The element to be removed. Returns: list: The modified list with all occurrences of the element removed. element_lower = element.lower() return [item for item in lst if item.lower() != element_lower]"},{"question":"Write a code to convert a string to a list of characters, without using any built-in string or list manipulation functions or methods (e.g. \`split()\`, \`list()\`, etc.). The code should have a time complexity of O(n), where n is the length of the string.","solution":"def string_to_char_list(s): Converts a string to a list of characters without using any built-in string or list manipulation functions. Args: s (str): The input string. Returns: list: List of characters in the string. char_list = [] for char in s: char_list.append(char) return char_list"},{"question":"You are tasked with creating a Python program that can recursively remove a directory and all its contents, similar to the \`rm -r\` command in Unix-based systems. Your program should be able to handle any type of file or directory structure and should provide appropriate feedback if any errors occur during the deletion process.","solution":"import os import shutil def remove_directory_recursively(path): Recursively removes a directory and all its contents. Parameters: path (str): The path of the directory to remove. Returns: bool: True if the directory was removed successfully, False otherwise. try: if os.path.isdir(path): shutil.rmtree(path) else: raise NotADirectoryError(f\\"{path} is not a directory.\\") return True except Exception as e: print(f\\"Error occurred: {e}\\") return False"},{"question":"In Python, to check if a string 'abcxyz' is a subsequence of 'abcdefxyzz', what would be the best way to implement a function that returns True if the first string is a subsequence of the second, and False otherwise? Can you also suggest how this function could be integrated into a larger program that checks many pairs of strings for this relationship, and perhaps identify patterns or common subsequences among them?","solution":"def is_subsequence(s, t): Returns True if string 's' is a subsequence of string 't', otherwise False. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. it = iter(t) return all(char in it for char in s)"},{"question":"Explain how mutual recursion between even and odd functions can be implemented in programming to determine if a number is even or odd. Then, using this concept, write a program in your preferred language that firstly, establishes two mutually recursive functions named 'isEven' and 'isOdd'. These should accept an integer as an argument and return a boolean value indicating if the input is even or odd. Secondly, the program should employ error handling to ensure the input is an integer. Lastly, the program should be complete with a simple user interface allowing the user to input an integer and see the result, whether the number is 'Even', 'Odd', or provide an 'Error' message if the input is not an integer.","solution":"def isEven(n): Returns True if the number n is even, otherwise returns False. Utilizes mutual recursion with isOdd function. if n < 0: n = -n if n == 0: return True else: return isOdd(n - 1) def isOdd(n): Returns True if the number n is odd, otherwise returns False. Utilizes mutual recursion with isEven function. if n < 0: n = -n if n == 0: return False else: return isEven(n - 1) def main(): try: userInput = input(\\"Enter an integer: \\") num = int(userInput) if isEven(num): print(\\"Even\\") else: print(\\"Odd\\") except ValueError: print(\\"Error: Input is not an integer\\")"},{"question":"Write a follower script in PyTorch that trains a simple linear regression model using the MSE loss function by optimizing its parameters with Stochastic Gradient Descent. The dataset should be generated to fit a linear function y = 3 * x. Also, implement a function to visualize the line fit by the model to compare its steepness with the ground truth function.","solution":"import torch import torch.nn as nn import torch.optim as optim import matplotlib.pyplot as plt # Generating the dataset def generate_data(n_samples=100): x = torch.linspace(-10, 10, n_samples).reshape(-1, 1) y = 3 * x + torch.randn(x.size()) * 0.5 # Adding some noise return x, y # Linear Regression Model class LinearRegressionModel(nn.Module): def __init__(self): super(LinearRegressionModel, self).__init__() self.linear = nn.Linear(1, 1) # Simple linear layer with one input and one output def forward(self, x): return self.linear(x) # Train the model def train_model(x, y, learning_rate=0.01, epochs=100): model = LinearRegressionModel() criterion = nn.MSELoss() optimizer = optim.SGD(model.parameters(), lr=learning_rate) for epoch in range(epochs): model.train() optimizer.zero_grad() outputs = model(x) loss = criterion(outputs, y) loss.backward() optimizer.step() return model # Visualize the results def visualize_results(model, x, y): plt.scatter(x.numpy(), y.numpy(), label='Data Points') with torch.no_grad(): predicted = model(x).detach().numpy() plt.plot(x.numpy(), predicted, label='Fitted Line', color='r') plt.plot(x.numpy(), 3 * x.numpy(), label='Ground Truth Line', color='g', linestyle='dashed') plt.legend() plt.show()"},{"question":"Remove the duplicates from the list without using built-in methods. However, you are only allowed to use a single loop. Additionally, your solution must have a time complexity of O(n) and a space complexity of O(1). The original list must be modified in-place to achieve this.","solution":"def remove_duplicates(lst): Removes duplicates from the list lst without using built-in methods, using only a single loop with O(n) time complexity and O(1) space complexity. Modifies the list in-place. if not lst: return lst write_index = 1 for i in range(1, len(lst)): if lst[i] != lst[write_index - 1]: lst[write_index] = lst[i] write_index += 1 del lst[write_index:] # Remove the remaining elements beyond the unique ones return lst"},{"question":"Write a Python code to sort the names into ascending order based on the sum of the ASCII values of each character in the name. The names list will contain strings of lowercase letters with a length of at most 100 characters. Your solution should have a time complexity of O(nlogn) and a space complexity of O(n).","solution":"def ascii_sum(name): Returns the sum of ASCII values of the characters in the name. return sum(ord(char) for char in name) def sort_names_by_ascii_sum(names): Sorts the list of names in ascending order based on the sum of ASCII values of each character in the name. return sorted(names, key=ascii_sum)"},{"question":"Given a list, write a Python function to print the elements of the list in reverse order. However, you are not allowed to use any built-in functions or methods that directly reverse the list, such as \`reverse()\` or slicing.","solution":"def print_reverse_list(lst): Prints the elements of the list in reverse order. reversed_lst = [] for i in range(len(lst) - 1, -1, -1): reversed_lst.append(lst[i]) return reversed_lst"},{"question":"Use recursion to not only find the maximum value in a given list of integers, but also determine its index. Additionally, write a function that determines if more than one index contains this maximum value, and return all the indices where it appears.","solution":"def find_max_with_index(arr): Finds the maximum value in a given list and its index using recursion. def helper(arr, idx, max_val, max_idx): if idx == len(arr): return (max_val, max_idx) elif arr[idx] > max_val: return helper(arr, idx + 1, arr[idx], idx) else: return helper(arr, idx + 1, max_val, max_idx) if not arr: return (None, None) return helper(arr, 0, arr[0], 0) def find_all_max_indices(arr): Finds all the indices containing the maximum value found in the given list. max_val, max_idx = find_max_with_index(arr) if max_val is None: return [] def find_all_helper(arr, idx, max_val, indices): if idx == len(arr): return indices elif arr[idx] == max_val: indices.append(idx) return find_all_helper(arr, idx + 1, max_val, indices) return find_all_helper(arr, 0, max_val, [])"},{"question":"Write a Flask view to handle a GET request with the url \\"/hello\\". Additionally, include functionality to check if a user is logged in before accessing this view. If the user is not logged in, they should be redirected to a login page. The login check should be done using Flask's session. Add proper error handling for unexpected issues like database disconnections.","solution":"from flask import Flask, session, redirect, url_for from flask import jsonify # Just for returning a JSON response app = Flask(__name__) app.secret_key = 'supersecretkey' # This should be moved to a secure environment variable in production def is_logged_in(): Check if the user is logged in by checking the session. return 'user' in session @app.route('/hello', methods=['GET']) def hello(): try: if not is_logged_in(): return redirect(url_for('login')) return jsonify({'message': 'Hello, user!'}) except Exception as e: return jsonify({'error': 'An unexpected error occurred', 'message': str(e)}), 500 @app.route('/login', methods=['GET']) def login(): Dummy login endpoint for demonstration purposes. return jsonify({'message': 'Please login'}), 401 if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a python generator that constructs an iterator that returns a stream of Fibonacci numbers using a SequenceBuffer data structure to hold current, next, and previous in memory.","solution":"class SequenceBuffer: def __init__(self): self.current = 0 self.next = 1 def update(self): previous = self.current self.current = self.next self.next = previous + self.current def fibonacci(): buffer = SequenceBuffer() while True: yield buffer.current buffer.update()"},{"question":"Can you explain the nuances behind the Python decorator process in a way that's understandable for a beginner? It would be helpful if you could provide concrete examples.","solution":"def my_decorator(func): def wrapper(): print(\\"Something is happening before the function is called.\\") func() print(\\"Something is happening after the function is called.\\") return wrapper def repeat(n): def decorator(func): def wrapper(*args, **kwargs): for _ in range(n): func(*args, **kwargs) return wrapper return decorator @my_decorator def say_hello(): print(\\"Hello!\\") @repeat(3) def greet(name): print(f\\"Hello, {name}!\\")"},{"question":"Can you write a generator function in Python that generates Fibonacci numbers and discuss its memory efficiency compared to a non-generator implementation?","solution":"def fibonacci_generator(): Generates Fibonacci numbers indefinitely. Yields the next Fibonacci number in the sequence each time it's called. a, b = 0, 1 while True: yield a a, b = b, a + b"},{"question":"Implement a Python function that receives a single string input and returns two outputs. First output is a version of the string where each word has its first letter capitalized and it's rest in lower case. Second output should be a version of string where sequence of words are reversed in the string but the letters in each word remain unchanged. Note that words in string are separated by single spaces.","solution":"def transform_string(s): Returns two transformations of the input string 's'. 1. Each word has its first letter capitalized and the rest in lower case. 2. The sequence of words is reversed but letters in each word remain unchanged. # First transformation: Capitalize the first letter of each word words = s.split() capitalized_words = [word.capitalize() for word in words] capitalized_string = ' '.join(capitalized_words) # Second transformation: Reverse the sequence of words reversed_words = ' '.join(words[::-1]) return capitalized_string, reversed_words"},{"question":"Write a function that takes a list as an argument and reverses its elements in place.","solution":"def reverse_list(lst): Reverses the elements of the list in place. left, right = 0, len(lst) - 1 while left < right: lst[left], lst[right] = lst[right], lst[left] left += 1 right -= 1"},{"question":"Implement an for loop in Python to iterate through a given list of numbers and print the square of each number, but only if the number is prime. The time complexity of your solution should be O(n√m), where n is the number of elements in the list and m is the maximum number in the list.","solution":"import math def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True def print_prime_squares(numbers): Iterate through the provided list of numbers and print the square of each number if it is prime. for num in numbers: if is_prime(num): print(num ** 2)"},{"question":"5 consecutive even numbers are 0, 2, 4, 6, 8. Write a simple piece of python code leveraging list comprehension, to generate this sequence.","solution":"def generate_consecutive_even_numbers(n): Returns a list of \`n\` consecutive even numbers starting from 0. return [2 * i for i in range(n)]"},{"question":"Given a string \\"hello\\", write a function in Python to return the number of vowels in the string.","solution":"def count_vowels(s): Returns the number of vowels in the given string. Parameters: s (str): The input string. Returns: int: The number of vowels in the string. vowels = \\"aeiouAEIOU\\" return sum(1 for char in s if char in vowels)"},{"question":"Write a function for a given node of a linked list to update its next pointer to point to the next greater element in the list. If there is no greater element, point it to NULL. The linked list can have duplicates. Also, note that you can't use any other data structure for this task and should not change the original structure/order of linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def update_next_to_next_greater(node): Updates the given node's next pointer to the next greater value in the list. If no such value exists, sets the next pointer to None. Arguments: node -- ListNode, the node whose next pointer should be updated current = node while current.next: if current.next.value > node.value: node.next = current.next return current = current.next node.next = None"},{"question":"Write code to delete all occurrences of the given key 'k' from the given Python dictionary 'd'. If the key 'k' is not present in the dictionary, the program should print an error message. The dictionary 'd' can contain any number of key-value pairs, and the values can be of any data type. The code should be efficient and have a time complexity of O(n), where n is the number of key-value pairs in the dictionary. Additionally, the code should not use any built-in Python functions or methods for deleting dictionary keys, such as \`del d[key]\` or \`d.pop(key)\`.","solution":"def delete_key_occurrences(d, k): Deletes all occurrences of the given key 'k' from the dictionary 'd'. If the key is not found, prints an error message. if k not in d: print(\\"Error: Key not found\\") return # Create a new dictionary without the key 'k' new_dict = {key: value for key, value in d.items() if key != k} # Update the original dictionary d.clear() d.update(new_dict)"},{"question":"Using only binary operators, write a program in Python to check if a number is odd or even.","solution":"def is_even(n): Returns True if the number n is even, otherwise False. return (n & 1) == 0 def is_odd(n): Returns True if the number n is odd, otherwise False. return (n & 1) == 1"},{"question":"Given three 2-digit numbers, how do I write a Python code to reverse the digits of the highest number and return it?","solution":"def reverse_digits_of_highest(a, b, c): Reverses the digits of the highest number among the three provided numbers. highest = max(a, b, c) reversed_highest = int(str(highest)[::-1]) return reversed_highest"},{"question":"Create a rendering pipeline for 3D graphics, that takes as input 3D models, and outputs 2D images.","solution":"class RenderingPipeline: def __init__(self): pass def transform(self, model, transformation_matrix): Transforms the given 3D model using the specified transformation matrix. transformed_vertices = [] for vertex in model['vertices']: transformed_vertex = self.apply_transformation(vertex, transformation_matrix) transformed_vertices.append(transformed_vertex) model['vertices'] = transformed_vertices return model def apply_transformation(self, vertex, matrix): Applies the transformation matrix to a single vertex. x, y, z = vertex transformed_vertex = [ x * matrix[0][0] + y * matrix[0][1] + z * matrix[0][2] + matrix[0][3], x * matrix[1][0] + y * matrix[1][1] + z * matrix[1][2] + matrix[1][3], x * matrix[2][0] + y * matrix[2][1] + z * matrix[2][2] + matrix[2][3], 1, ] return transformed_vertex[:3] def project(self, model): Projects the 3D model onto 2D using a simplistic orthographic projection. projected_vertices = [(x, y) for x, y, z in model['vertices']] return {'vertices': projected_vertices, 'faces': model['faces']} def render(self, model): Renders the 3D model to a 2D image. projection = self.project(model) image = self.draw(projection) return image def draw(self, projection): Draws the projection on a 2D canvas. # For simplicity, returning the projected vertices and faces as the \\"rendered image\\" return projection def create_default_model(): Creates a simple cube model for testing purposes. model = { 'vertices': [ [1, 1, 1], [-1, 1, 1], [-1, -1, 1], [1, -1, 1], [1, 1, -1], [-1, 1, -1], [-1, -1, -1], [1, -1, -1] ], 'faces': [ [0, 1, 2, 3], [4, 5, 6, 7], [0, 3, 7, 4], [1, 2, 6, 5], [0, 1, 5, 4], [3, 2, 6, 7] ] } return model"},{"question":"Generate PB metrics parsing logic in Python such that the end result is a dictionary of metrics with each metric having its own dictionary with three entries (time, value, margin_of_error_) for a pre-defined list of PB metrics.","solution":"def parse_pb_metrics(pb_data_str, metrics_list): Parses PB metrics data from a given string and returns a dictionary of metrics. Each metric's dictionary will have the keys 'time', 'value', and 'margin_of_error'. Args: pb_data_str (str): The input PB metrics data as a string. metrics_list (list): The predefined list of metrics to extract. Returns: dict: A dictionary containing parsed metrics. metrics_dict = {} # Split the string by lines lines = pb_data_str.split(\\"n\\") for line in lines: # Clean up the line by stripping leading and trailing whitespace line = line.strip() # Skip empty lines if not line: continue # Split the line into parts parts = line.split(\\",\\") if len(parts) != 4: continue # Skip lines that do not have expected number of parts # Extract metric name, time, value, and margin_of_error metric_name, time, value, margin_of_error = parts if metric_name not in metrics_list: continue # Skip metrics that are not in the predefined list # Convert the time, value, and margin_of_error to proper types time = int(time.strip()) value = float(value.strip()) margin_of_error = float(margin_of_error.strip()) # Store the extracted data in the dictionary metrics_dict[metric_name] = { 'time': time, 'value': value, 'margin_of_error': margin_of_error } return metrics_dict"},{"question":"Write a program to implement a stack data structure using arrays. Your program should perform the following operations: push (add an element to the top of the stack), pop (remove the element from the top of the stack), peek (get the element at the top of the stack), isEmpty (check whether the stack is empty), and isFull (check whether the stack has reached its maximum capacity).","solution":"class Stack: def __init__(self, capacity): self.capacity = capacity self.stack = [] def push(self, element): if self.isFull(): raise OverflowError(\\"Stack is full\\") self.stack.append(element) def pop(self): if self.isEmpty(): raise IndexError(\\"Stack is empty\\") return self.stack.pop() def peek(self): if self.isEmpty(): raise IndexError(\\"Stack is empty\\") return self.stack[-1] def isEmpty(self): return len(self.stack) == 0 def isFull(self): return len(self.stack) == self.capacity"},{"question":"Create a Python Decorator that logs the execution time and the arguments passed to a function to a file. The decorator should be able to handle functions with any number of positional and keyword arguments.","solution":"import time import logging from functools import wraps def configure_logging(): logging.basicConfig( filename='execution_log.txt', level=logging.DEBUG, format='%(asctime)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S' ) def log_execution(func): @wraps(func) def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() execution_time = end_time - start_time logging.info( \\"Executed %s with args: %s, kwargs: %s, took: %.4f seconds\\", func.__name__, args, kwargs, execution_time ) return result return wrapper configure_logging()"},{"question":"Can you develop an algorithm to efficiently find all pairs of anagrams in a given list of strings? Write a function \`find_anagram_pairs\` that takes a list of strings as input and returns a list of tuples, where each tuple contains a pair of anagrams. Avoid using the \`collections.Counter\` method for anagram detection and aim for an algorithm that minimizes time complexity.","solution":"def find_anagram_pairs(strings): Returns a list of tuples, where each tuple contains a pair of anagrams from the input list of strings. anagram_map = {} for string in strings: # Sort each string to get the canonical form sorted_string = ''.join(sorted(string)) if sorted_string in anagram_map: anagram_map[sorted_string].append(string) else: anagram_map[sorted_string] = [string] # Collect pairs of anagrams from the hashmap anagram_pairs = [] for string_list in anagram_map.values(): if len(string_list) > 1: for i in range(len(string_list)): for j in range(i + 1, len(string_list)): anagram_pairs.append((string_list[i], string_list[j])) return anagram_pairs"},{"question":"Write a Python 3 program that reads a CSV file (comma-separated values) and prints each row's content. The CSV file should have a header row, and the program should ignore this header when printing the rows.","solution":"def read_and_print_csv(file_path): Reads a CSV file and prints each row's content, ignoring the header row. import csv with open(file_path, mode='r', newline='') as csvfile: csvreader = csv.reader(csvfile, delimiter=',') header = next(csvreader) # Skip the header row for row in csvreader: print(', '.join(row))"},{"question":"Write a script in Python to make an http request and extract the title of the webpage. However, you are not allowed to use any third-party libraries or modules for making the http request or parsing the HTML. You must implement the entire functionality from scratch using only built-in Python modules.","solution":"import socket def get_http_response(url): Makes a simple HTTP GET request to the given URL and returns the raw response. host = url.split(\\"//\\")[-1].split(\\"/\\")[0] path = \\"/\\" + \\"/\\".join(url.split(\\"//\\")[-1].split(\\"/\\")[1:]) port = 80 request = f\\"GET {path} HTTP/1.1rnHost: {host}rnConnection: closernrn\\" sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((host, port)) sock.sendall(request.encode('utf-8')) response = b\\"\\" while True: data = sock.recv(4096) if not data: break response += data sock.close() return response.decode('latin1') def extract_title(html): Extracts the title from the given HTML string. start_tag = \\"<title>\\" end_tag = \\"</title>\\" start = html.find(start_tag) end = html.find(end_tag, start + len(start_tag)) if start != -1 and end != -1: start += len(start_tag) return html[start:end].strip() return None def get_webpage_title(url): Fetches the webpage and extracts the title. response = get_http_response(url) return extract_title(response)"},{"question":"I would appreciate if you could not only tally up the quantity of vowel characters in this given string of words, but also specify the frequency of each individual vowel. Program this task into a Python function. The string of words to evaluate is: \\"This is a sentence.\\"","solution":"def count_vowels(sentence): Count the total number of vowels and the frequency of each vowel in a given sentence. Args: sentence (str): The sentence to evaluate. Returns: dict: A dictionary with the total number of vowels and the frequency of each vowel. vowels = \\"aeiou\\" sentence = sentence.lower() vowel_count = {v: 0 for v in vowels} total_vowels = 0 for char in sentence: if char in vowels: vowel_count[char] += 1 total_vowels += 1 vowel_count['total'] = total_vowels return vowel_count"},{"question":"Create a web application in Python which takes a sentence as input and outputs a list of its distinct words.","solution":"from flask import Flask, request, jsonify from collections import Counter app = Flask(__name__) @app.route('/distinct-words', methods=['POST']) def distinct_words(): data = request.json sentence = data.get('sentence', '') words = sentence.split() distinct_words_list = list(set(words)) return jsonify({ 'distinct_words': distinct_words_list }) if __name__ == '__main__': app.run(debug=True)"},{"question":"Write a Python function that not only accepts a positive integer as input, but also a boolean. When the boolean is False, it should return a list of all the divisors of the input number, excluding the number itself. When the boolean is True, it should return the number of divisors the input number has, excluding the number itself. To make this more challenging, require the function to handle numbers up to 10^12. Then, test this function with the number 28 and both True and False boolean values. Don't forget to add execution time measurements for each scenario. It's important to ensure the function can deal with the upper limit of required numbers efficiently.","solution":"from math import isqrt from time import time def divisors_info(n, count_only): Returns a list of all divisors of n (excluding n itself) if count_only is False. Returns the number of divisors of n (excluding n itself) if count_only is True. divisors = [] for i in range(1, isqrt(n) + 1): if n % i == 0: if i != n: divisors.append(i) if (i != n // i) and (n // i) != n: divisors.append(n // i) if count_only: return len(divisors) else: return sorted(divisors) # Testing the function with execution time measurement n = 28 start_time = time() print(divisors_info(n, False)) # Should print the list of divisors excluding the number itself print(f\\"Execution time for list of divisors: {time() - start_time} seconds\\") start_time = time() print(divisors_info(n, True)) # Should print the number of divisors excluding the number itself print(f\\"Execution time for number of divisors: {time() - start_time} seconds\\")"},{"question":"Utilizing solely the lower-case alphabetic characters as delineated in the English language, construct a program which will procure a sequence of words, universally acknowledged as a palindrome.","solution":"def generate_palindromes(word_list): Filters and returns the list of words that are palindromes. Args: word_list: List of words to be checked. Returns: List of palindrome words from the input list. return [word for word in word_list if word == word[::-1]]"},{"question":"Consider a sequence of numbers where each number is the sum of the previous two numbers, starting with 0 and 1. This sequence is known as the Fibonacci sequence. Write a Python code that generates the first n numbers in the Fibonacci sequence, where n is a non-negative integer input by the user. Additionally, the code should print both the sequence and the sum of all the numbers in the sequence. To make the problem more challenging, implement this without using any external libraries or built-in Python functions for handling lists, except for basic indexing.","solution":"def fibonacci_sequence(n): Generates the first n numbers in the Fibonacci sequence and returns both the sequence and the sum of the sequence. Args: n (int): The number of terms in the Fibonacci sequence to generate. Returns: tuple: A tuple containing the list of first n Fibonacci numbers and the sum of these numbers. if n <= 0: return ([], 0) elif n == 1: return ([0], 0) fib_seq = [0, 1] fib_sum = 1 # because 0 + 1 for i in range(2, n): next_fib = fib_seq[i - 1] + fib_seq[i - 2] fib_seq.append(next_fib) fib_sum += next_fib return (fib_seq, fib_sum)"},{"question":"Convert a JSON string to an XML string with Python, while also handling nested JSON objects and arrays.","solution":"import json from xml.etree.ElementTree import Element, tostring def json_to_xml(json_obj, line_padding=\\"\\"): Converts JSON object to XML string. def _to_xml_recurse(parent, data): if isinstance(data, dict): for key, value in data.items(): elem = Element(key) parent.append(elem) _to_xml_recurse(elem, value) elif isinstance(data, list): for item in data: item_elem = Element(\\"item\\") parent.append(item_elem) _to_xml_recurse(item_elem, item) else: parent.text = str(data) root = Element(\\"root\\") _to_xml_recurse(root, json_obj) return tostring(root).decode() def convert_json_to_xml_string(json_string): Converts JSON string to XML string json_obj = json.loads(json_string) return json_to_xml(json_obj)"},{"question":"Write a program that can multiply a matrix by a scalar. The program should take as input a n x m matrix (where n is the number of rows and m is the number of columns), and a scalar, and output the resulting matrix. The program should be able to handle matrices of different sizes and should have error checking for invalid input.","solution":"def multiply_matrix_by_scalar(matrix, scalar): Multiplies a given matrix by a scalar. Args: matrix (list of lists of int/float): The matrix to be multiplied. scalar (int/float): The scalar value to multiply the matrix by. Returns: list of lists of int/float: The resulting matrix after multiplication. Raises: ValueError: If the input matrix is not a valid 2D list. if not all(isinstance(row, list) for row in matrix): raise ValueError(\\"The input matrix should be a 2D list.\\") for row in matrix: if not all(isinstance(element, (int, float)) for element in row): raise ValueError(\\"Each element in the matrix should be an integer or float.\\") return [[element * scalar for element in row] for row in matrix]"},{"question":"Using the given input, generate a code to print in reverse order. However, you are not allowed to use the reverse() function or any built-in function to reverse the list. Additionally, you are not allowed to create any additional lists or variables to store the reversed elements. You must modify the original list in-place to achieve the reverse order printing.","solution":"def reverse_list_in_place(lst): Reverses the given list in place without using built-in reverse functions or creating additional lists or variables. n = len(lst) for i in range(n // 2): lst[i], lst[n - i - 1] = lst[n - i - 1], lst[i] return lst"},{"question":"Develop an algorithm that traverses a balanced ternary tree to find a specific node. Instead of using the common depth-first search, the algorithm should implement a less common and more complex approach, specifically: path finding algorithm (A*). The goal is to find the node with the lowest cost in terms of distance from the root node. An additional requirement for this question is to ensure that the algorithm implemented handles the case for having nodes with duplicate values. Note that the tree nodes contain positive integer values only.","solution":"import heapq class TreeNode: def __init__(self, value, left=None, middle=None, right=None): self.value = value self.left = left self.middle = middle self.right = right def __lt__(self, other): return self.value < other.value def a_star_search(root, target): A* algorithm to find the path with least cost to the target node value. :param root: TreeNode, the root of the ternary tree. :param target: int, the target node value. :return: List[int], the path to the target node if found, otherwise an empty list. def heuristic(node): return abs(node.value - target) def get_neighbors(node): neighbors = [] if node.left: neighbors.append(node.left) if node.middle: neighbors.append(node.middle) if node.right: neighbors.append(node.right) return neighbors pq = [] heapq.heappush(pq, (0 + heuristic(root), 0, root, [root.value])) visited = set() while pq: _, cost, current, path = heapq.heappop(pq) if current.value == target: return path if current in visited: continue visited.add(current) for neighbor in get_neighbors(current): if neighbor not in visited: heapq.heappush(pq, (cost + 1 + heuristic(neighbor), cost + 1, neighbor, path + [neighbor.value])) return []"},{"question":"Given the problem, you need to execute a Binary Search Tree (BST) traversal and return the sum of the nodes whose keys are within a certain range. Specifically, write a function BSTRangeSum(root, low, high) that calculates the sum of nodes with key values within the range [low, high] (inclusive) given a root node of a BST, the lower boundary \\"low\\", and upper boundary \\"high\\". Your task is to determine the sum of node values within this range. Note that you shouldn't iterate through all the nodes, but rather find an optimized solution that allows the function to run efficiently.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def BSTRangeSum(root, low, high): Returns the sum of the node values in the BST that are within the range [low, high]. def dfs(node): if not node: return 0 if node.val < low: return dfs(node.right) if node.val > high: return dfs(node.left) return node.val + dfs(node.left) + dfs(node.right) return dfs(root)"},{"question":"Implement a Bubble Sort algorithm in Python that sorts a list of integers in descending order. However, you are not allowed to use any additional data structures such as arrays or lists. You must perform the sorting in-place, directly on the input list.","solution":"def bubble_sort_desc(arr): Perform an in-place bubble sort on the input list to sort it in descending order. :param arr: List of integers to sort n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): if arr[j] < arr[j+1]: # Swap if the element found is smaller than the next element arr[j], arr[j+1] = arr[j+1], arr[j]"},{"question":"Given a binary tree, print all the paths from root to leaves. Here is a piece of code that attempts to solve the problem. However, it contains some errors. Your task is to identify and fix the errors, and write a correct solution to the problem.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def all_paths(root): Given a binary tree, return all the paths from root to leaves. def construct_paths(node, path, paths): if node: path += str(node.value) if not node.left and not node.right: # Leaf node paths.append(path) # Store path else: path += '->' # Add separator before siblings construct_paths(node.left, path, paths) construct_paths(node.right, path, paths) paths = [] construct_paths(root, \\"\\", paths) return paths"},{"question":"Write a function to create a list of N empty dictionaries. Each dictionary should have a unique identifier as a key and the value should be another dictionary. The nested dictionary should have M unique key-value pairs, where the keys are strings and the values are integers. The keys should be generated from a given string by permuting the characters, and the values should be the ASCII values of the last character of the key. The function should also handle cases where the given string has duplicate characters.","solution":"import itertools def create_dict_list(N, M, given_string): Creates a list of N dictionaries, each with a unique identifier and nested dictionary. The nested dictionary contains M key-value pairs generated from permutations of the given_string. :param N: Number of dictionaries :param M: Number of key-value pairs in each nested dictionary :param given_string: String to generate keys from permutations :return: List of N dictionaries with nested dictionaries containing M key-value pairs def generate_permutations(given_string, M): unique_permutations = set(itertools.permutations(given_string)) permutation_list = [\\"\\".join(perm) for perm in unique_permutations] return permutation_list[:M] dict_list = [] for i in range(N): unique_id = f'id_{i+1}' nested_dict = {} permutations = generate_permutations(given_string, M) for perm in permutations: nested_dict[perm] = ord(perm[-1]) dict_list.append({unique_id: nested_dict}) return dict_list"},{"question":"Construct a dictionary where every item of a specified list serves as the key and its corresponding index as the value, using Python. Implement a function \`map_list_to_dict\` for this operation. The list is to be a list of strings, and the function should handle cases where the list is empty.","solution":"def map_list_to_dict(lst): Constructs a dictionary where every item of a specified list serves as the key and its corresponding index as the value. Parameters: lst (list): List of strings Returns: dict: Dictionary with list items as keys and their indices as values return {item: index for index, item in enumerate(lst)}"},{"question":"Develop a function that performs two operations on a provided list of lists, where each sublist is composed of strings. The first operation is to eliminate any repetitive strings within each individual sublist. Following the removal of duplicates, the second operation is to arrange each sublist in a sorted order.","solution":"def process_list_of_lists(list_of_lists): This function takes a list of lists of strings, removes duplicates within each sublist, and sorts each sublist in ascending order. Args: list_of_lists (list of lists of str): The input list of lists containing strings. Returns: list of lists of str: The processed list of lists with unique and sorted elements. result = [] for sublist in list_of_lists: unique_sorted_sublist = sorted(set(sublist)) result.append(unique_sorted_sublist) return result"},{"question":"Given two dictionaries, write a Python function that merges them. If the dictionaries have non-overlapping keys, print the combined dictionary. If they share one or more keys, the function should be able to merge them with a specified conflict resolution strategy. The strategy can be passed as an argument to the function and should be a function that takes in two values and returns a resolved value.","solution":"def merge_dicts(dict1, dict2, conflict_resolver=lambda x, y: (x, y)): Merges two dictionaries. If there are conflicts (i.e., overlapping keys), the conflict_resolver function decides the final value. :param dict1: First dictionary :param dict2: Second dictionary :param conflict_resolver: A function that takes two values and returns the resolved value for conflicts. By default, returns a tuple of both values. :return: The merged dictionary merged_dict = dict1.copy() for key, value in dict2.items(): if key in merged_dict: merged_dict[key] = conflict_resolver(merged_dict[key], value) else: merged_dict[key] = value return merged_dict"},{"question":"Create a function to get all unique permutations of a given string, considering case sensitivity. The string may contain special characters and numbers. For example, string = \\"cAt1\\".","solution":"from itertools import permutations def unique_permutations(s): Returns all unique permutations of a given string, considering case sensitivity. return sorted(set([''.join(p) for p in permutations(s)]))"},{"question":"Implement a function in Python that takes a list of integers and the size of the list, and returns the maximum sum of a subarray of size K.","solution":"def max_sum_subarray_of_size_k(nums, k): Returns the maximum sum of any subarray of size k. Parameters: nums (List[int]): List of integers. k (int): Size of the subarray. Returns: int: Maximum sum of a subarray of size k. if k > len(nums) or k <= 0: raise ValueError(\\"k should be a positive integer less than or equal to the length of the list\\") max_sum = float('-inf') current_sum = 0 for i in range(len(nums)): current_sum += nums[i] if i >= k - 1: max_sum = max(max_sum, current_sum) current_sum -= nums[i - (k - 1)] return max_sum"},{"question":"In Python, given a list of integers, write a function to calculate the average number. Then, modify the function to handle scenarios where the list may contain non-integer values or be empty. Add error handling and thorough comments.","solution":"def calculate_average(numbers): Calculate the average of a list of numbers. Args: numbers (iterable): List of numbers which can contain integers and floats. Returns: float: The average of the list of numbers. Raises: ValueError: If the input list is empty. TypeError: If the list contains non-numeric values. if not numbers: raise ValueError(\\"The list is empty.\\") total = 0 count = 0 for num in numbers: if not isinstance(num, (int, float)): raise TypeError(\\"The list contains non-numeric values.\\") total += num count += 1 return total / count"},{"question":"Given an array of integers \`arr\`, we create an array \`doubledArr\` by doubling each values in \`arr\`. Your task is to design an optimal algorithm to reorder \`doubledArr\` so that it doesn't contain any adjacent elements that have the same digit in the same position. If an impossible ordering exists, the algorithm should indicate this by returning a specific error state.","solution":"def reorder_to_avoid_adjacent_matches(arr): Reorders 'arr' so that when each element is doubled, no two adjacent elements have the same digit in corresponding positions. Returns the reordered array or 'Not possible' if it cannot be achieved. def has_matching_digit(num1, num2): # Double the numbers and check if they have matching corresponding digits str_num1 = str(num1 * 2) str_num2 = str(num2 * 2) length = min(len(str_num1), len(str_num2)) for i in range(length): if str_num1[i] == str_num2[i]: return True return False from itertools import permutations n = len(arr) for perm in permutations(arr): possible = True for i in range(n - 1): if has_matching_digit(perm[i], perm[i + 1]): possible = False break if possible: return list(perm) return \\"Not possible\\""},{"question":"In Python, write a script that not only displays the elements of a nested list structure but also calculates and displays the total number of elements in the entire nested list. Consider a list that might have multiple levels of nesting, not just single-depth.","solution":"def display_and_count_elements(nested_list): Displays the elements of a nested list structure and calculates the total number of elements. Parameters: nested_list (list): A list that may have multiple levels of nesting Returns: int: The total number of elements in the entire nested list count = [0] # using a list to allow modification inside nested function def helper(lst): for element in lst: if isinstance(element, list): helper(element) else: count[0] += 1 print(element) helper(nested_list) return count[0]"},{"question":"Write a function to search for a given item in a sorted array using binary search.","solution":"def binary_search(arr, item): Uses binary search to find the index of 'item' in 'arr'. Returns the index if found, else returns -1. Parameters: arr (list): A sorted list of integers. item (int): The item to search for in the array. Returns: int: The index of the item if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == item: return mid elif arr[mid] < item: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Develop a Python function that is capable of identifying and returning the second smallest numerical value within a provided list. The list may contain integers, floats, strings, and nested lists. Your function should be able to handle these different data types and return the second smallest numerical value. If the list does not contain at least two numerical values, your function should return an appropriate error message.","solution":"def find_second_smallest(lst): Returns the second smallest numerical value from a list containing various data types. If there are less than two numerical values, returns an appropriate error message. def extract_numerical_values(seq): numeric_values = [] for item in seq: if isinstance(item, (int, float)): numeric_values.append(item) elif isinstance(item, list): numeric_values.extend(extract_numerical_values(item)) return numeric_values numerical_values = extract_numerical_values(lst) if len(numerical_values) < 2: return \\"Error: Less than two numerical values in the list\\" unique_values = list(set(numerical_values)) unique_values.sort() return unique_values[1]"},{"question":"In Python, can you explain how one could implement a function that takes an integer 'n' and returns the smallest integer whose prime factors include all primes within 'n'?","solution":"import math def sieve_of_eratosthenes(n): Generate all prime numbers up to n using the Sieve of Eratosthenes. is_prime = [True] * (n + 1) is_prime[0], is_prime[1] = False, False # 0 and 1 are not primes for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i*i, n + 1, i): is_prime[j] = False return [i for i in range(2, n + 1) if is_prime[i]] def lcm(a, b): Calculate the Least Common Multiple of two numbers a and b. return abs(a * b) // math.gcd(a, b) def smallest_multiple_with_all_primes(n): Returns the smallest integer whose prime factors include all primes less than or equal to n. primes_up_to_n = sieve_of_eratosthenes(n) smallest_multiple = 1 for prime in primes_up_to_n: smallest_multiple = lcm(smallest_multiple, prime) return smallest_multiple"},{"question":"Create a script that filters out duplicate elements from a list and stores the result in a new list. However, you are not allowed to use any built-in functions or methods for list manipulation, such as set() or list(). You must implement the filtering logic manually using only basic list operations.","solution":"def remove_duplicates(input_list): Filters out duplicate elements from input_list. Args: input_list (list): The list to be filtered. Returns: list: A new list with duplicates removed. result = [] for item in input_list: # Check if item is already in result list duplicate_found = False for result_item in result: if item == result_item: duplicate_found = True break if not duplicate_found: result.append(item) return result"},{"question":"How can I use Flask framework to create a web application that allows users to input a sentence and displays the same sentence in upper case? Additionally, what measures can I take to ensure that the user's input is properly sanitized to prevent any potential security vulnerabilities? Also, how can I implement a feature to log all the user inputs for future analysis? Can you provide a sample shell command to start the Flask application and a code snippet to achieve this functionality, including the necessary Flask and logging imports?","solution":"from flask import Flask, request, render_template_string import logging app = Flask(__name__) # Set up logging logging.basicConfig(filename='user_inputs.log', level=logging.INFO, format='%(asctime)s - %(message)s') @app.route('/', methods=['GET', 'POST']) def index(): if request.method == 'POST': input_sentence = request.form['sentence'] sanitized_input = sanitize_input(input_sentence) uppercased_sentence = sanitized_input.upper() # Log the sanitized user input logging.info(f'User Input: {sanitized_input}') return render_template_string( <form method=\\"post\\"> Sentence: <input type=\\"text\\" name=\\"sentence\\"> <input type=\\"submit\\" value=\\"Submit\\"> </form> <p>Uppercased Sentence: {{ uppercased_sentence }}</p> , uppercased_sentence=uppercased_sentence) return render_template_string( <form method=\\"post\\"> Sentence: <input type=\\"text\\" name=\\"sentence\\"> <input type=\\"submit\\" value=\\"Submit\\"> </form> ) def sanitize_input(user_input): return ''.join(e for e in user_input if e.isalnum() or e.isspace()) if __name__ == '__main__': app.run(debug=True)"},{"question":"Design a program for converting USD to EUR. The program should support taking input from the user in the form of amount in USD and output the amount in EUR. Additionally, the program should be able to convert EUR back to USD. The program should also handle errors for invalid input, such as the user typing in a non-numeric or negative value.","solution":"def usd_to_eur(usd, exchange_rate): Convert USD to EUR given an exchange rate. Parameters: usd (float): Amount in USD to convert exchange_rate (float): Conversion rate from USD to EUR Returns: float: Equivalent amount in EUR if not isinstance(usd, (int, float)) or usd < 0 or not isinstance(exchange_rate, (int, float)) or exchange_rate <= 0: raise ValueError(\\"Invalid input: Amounts must be non-negative numbers and exchange rate must be positive.\\") return usd * exchange_rate def eur_to_usd(eur, exchange_rate): Convert EUR to USD given an exchange rate. Parameters: eur (float): Amount in EUR to convert exchange_rate (float): Conversion rate from EUR to USD Returns: float: Equivalent amount in USD if not isinstance(eur, (int, float)) or eur < 0 or not isinstance(exchange_rate, (int, float)) or exchange_rate <= 0: raise ValueError(\\"Invalid input: Amounts must be non-negative numbers and exchange rate must be positive.\\") return eur / exchange_rate"},{"question":"Develop a function in Python that, given an array of integers, returns the sum of the distinct elements present in the array.","solution":"def sum_of_distinct_elements(arr): Returns the sum of distinct elements in the array. Parameters: arr (list): A list of integers. Returns: int: The sum of distinct elements. return sum(set(arr))"},{"question":"Write a program to print out the first 30 prime numbers, implementing the Sieve of Eratosthenes algorithm.","solution":"def sieve_of_eratosthenes(limit): Returns a list of prime numbers up to the specified limit using the Sieve of Eratosthenes algorithm. sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start*start, limit + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def first_n_primes(n): Returns the first n prime numbers using the Sieve of Eratosthenes. # Estimate an upper limit to find the first n primes (using a simple approximation n * log(n) + n * log(log(n))) if n < 6: limit = 15 else: from math import log limit = int(n * log(n) + n * log(log(n))) primes = sieve_of_eratosthenes(limit) return primes[:n] first_30_primes = first_n_primes(30) print(first_30_primes)"},{"question":"Given an input array of distinct integers, return all the possible permutations of this array in Python. Additionally, implement this function using recursion and ensure that the time complexity does not exceed O(n!*n) and space complexity doesn't exceed O(n!).","solution":"def permute(nums): Return all possible permutations of a list of distinct integers. def backtrack(start, end): if start == end: result.append(nums[:]) for i in range(start, end): nums[start], nums[i] = nums[i], nums[start] # swap backtrack(start + 1, end) nums[start], nums[i] = nums[i], nums[start] # swap back result = [] backtrack(0, len(nums)) return result"},{"question":"Sort a given array of integers using Quick Sort and make sure that the algorithm has a time complexity of O(nlogn) in all cases. Additionally, the algorithm should be implemented in a recursive manner and should not use any built-in sorting functions or libraries.","solution":"def quick_sort(arr): Sorts an array of integers using the Quick Sort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"question":"I have a JSON containing numbers as strings (e.g., \\"40\\" instead of 40) and I want to convert them to integers for processing in my Python script. How can I achieve this transformation without having to manually parse the JSON keys?","solution":"import json def convert_numbers_in_json(json_string): Converts numeric strings in a JSON object to integers. Args: json_string (str): A string representation of the JSON object. Returns: dict: A JSON object with numeric strings converted to integers. def parse_value(value): if isinstance(value, dict): return {k: parse_value(v) for k, v in value.items()} elif isinstance(value, list): return [parse_value(v) for v in value] elif isinstance(value, str) and value.isdigit(): return int(value) else: return value json_obj = json.loads(json_string) converted_obj = parse_value(json_obj) return converted_obj"},{"question":"Given a queue A with a finite series of numbers. Implement a solution to reverse the order of A using, at most, a constant amount O(1) of additional memory space such that if A originally has the sequence a1, a2, ..., an, it will have sequence an, an-1 ..., a1 after your solution runs. In your implementation, assume that popping elements off and adding elements to existing data structures are O(1) operations.","solution":"from collections import deque def reverse_queue(queue): Reverses the order of the elements in the queue using constant O(1) additional memory space. Args: queue (deque): The input queue to be reversed. Returns: deque: The queue with elements in reversed order. n = len(queue) for i in range(n // 2): opposite_index = n - 1 - i # Swap the elements at index i and opposite_index queue[i], queue[opposite_index] = queue[opposite_index], queue[i] return queue"},{"question":"Imagine you are a scientist working on a project where you need to simulate an asteroid traveling through space and impacting a planet. Your goal is to visualize the asteroid's journey and the impact it makes using Python. To do this, you will need to create a program that can generate a 3D animation of the asteroid's trajectory and the resulting impact crater.","solution":"import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D from matplotlib.animation import FuncAnimation def asteroid_trajectory(): Simulates an asteroid traveling through space and generates a 3D animation of its trajectory and the resulting impact crater. # Create figure and 3D axis fig = plt.figure() ax = fig.add_subplot(111, projection='3d') # Generate sample data for the asteroid's trajectory t = np.linspace(0, 2 * np.pi, 100) x = np.cos(t) y = np.sin(t) z = t def update(num): ax.clear() ax.plot(x[:num], y[:num], z[:num], color='blue') if num == len(t): plot_crater(ax, x[-1], y[-1], z[-1]) ax.set_xlim([-1, 1]) ax.set_ylim([-1, 1]) ax.set_zlim([0, max(z) + 2]) ax.set_xlabel('X') ax.set_ylabel('Y') ax.set_zlabel('Z') ani = FuncAnimation(fig, update, frames=len(t) + 10, interval=100) plt.show() def plot_crater(ax, x, y, z): Plots an impact crater at the given (x, y, z) coordinates. :param ax: 3D axis to plot on :param x: x-coordinate of the impact :param y: y-coordinate of the impact :param z: z-coordinate of the impact u = np.linspace(0, 2 * np.pi, 30) v = np.linspace(-0.5, 0.5, 30) u, v = np.meshgrid(u, v) crater_x = 0.2 * np.cos(u) crater_y = 0.2 * np.sin(u) crater_z = v ax.plot_surface(crater_x + x, crater_y + y, crater_z + z, color='red', alpha=0.6) if __name__ == \\"__main__\\": asteroid_trajectory()"},{"question":"Write a program to find all prime numbers between 2 and 100 using a list comprehension in Python. Additionally, optimize the code by incorporating the fact that all primes are of the form 6k ± 1.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes(): Find all prime numbers between 2 and 100 using a list comprehension. return [x for x in range(2, 101) if is_prime(x)]"},{"question":"Explain in detail the approach employed in the subsequent Python code snippet purposed to generate a Fibonacci sequence. Furthermore, suggest modifications to the code to make it more efficient with respect to time complexity.","solution":"def fibonacci(n): Returns the nth Fibonacci number. Uses an iterative approach for efficiency. if n <= 0: return 0 elif n == 1: return 1 prev, curr = 0, 1 for _ in range(2, n + 1): prev, curr = curr, prev + curr return curr"},{"question":"Could you design an algorithm to remove a specific element from a given list in Python, especially when the list contains both numerical and string data types? Additionally, please create a condition to handle cases where the list might contain duplicate values of the element to be deleted. For example, consider the list mixed_list = [1, \\"hello\\", 2, 2, \\"world\\", \\"hello\\"] and the element to remove is \\"hello\\".","solution":"def remove_element(mixed_list, element_to_remove): Removes all occurrences of a specific element from a given list. Parameters: mixed_list (list): The list from which the element should be removed. element_to_remove: The element to be removed from the list. Returns: list: The list with the specified element removed. return [item for item in mixed_list if item != element_to_remove]"},{"question":"Take the grid distance data represented by the following pairs: [(0,0), (3,3), (4,4)]. Your challenge is to craft a function in Python that interpolates the straight-line distance between successive points, thereby generating a comprehensive list of (x, y) coordinates.","solution":"import numpy as np def interpolate_points(points): Interpolates the straight-line distance between successive points and returns a comprehensive list of (x, y) coordinates. Parameters: points (list of tuples): List of (x, y) coordinates. Returns: list of tuples: A comprehensive list of interpolated (x, y) coordinates. if len(points) < 2: return points interpolated_points = [] for i in range(len(points) - 1): start = np.array(points[i]) end = np.array(points[i+1]) length = int(np.linalg.norm(end - start)) for j in range(length): interpolated_point = start + (end - start) * (j / length) interpolated_points.append(tuple(map(int, np.round(interpolated_point)))) interpolated_points.append(points[-1]) # add the last point # Remove duplicates that may occur due to rounding final_points = [] for point in interpolated_points: if len(final_points) == 0 or final_points[-1] != point: final_points.append(point) return final_points"},{"question":"Create a python function that takes a string input and extracts all the email addresses in the format name@server from the input. The function should then create a JSON object containing the extracted email addresses and the number of times each email address appears in the input. Can you implement this function?","solution":"import re import json from collections import Counter def extract_emails(input_string): Extracts email addresses from the input string and returns a JSON object containing the email addresses and their counts. # Regular expression pattern to match email addresses email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}' # Extracting email addresses using re.findall email_addresses = re.findall(email_pattern, input_string) # Counting occurrences of each email address email_counts = dict(Counter(email_addresses)) # Creating a JSON object from the email counts dictionary email_counts_json = json.dumps(email_counts) return email_counts_json"},{"question":"Write an algorithm in Python that takes a list as input and returns the maximum and minimum element of the list.","solution":"def find_max_min(lst): Returns the maximum and minimum element of the list. :param lst: List of elements :return: Tuple containing (maximum, minimum) elements of the list if not lst: raise ValueError(\\"The list is empty\\") max_elem = max(lst) min_elem = min(lst) return (max_elem, min_elem)"},{"question":"Develop a Python script that accepts a text input and substitutes all characters that are not alphanumeric using a supplied replacement symbol, and furthermore, provide a brief three-line summary detailing the implemented procedural logic.","solution":"import re def replace_non_alphanumeric(text, replacement): Replaces all characters in the given text that are not alphanumeric with the specified replacement symbol. Args: text (str): The input text to process. replacement (str): The symbol to replace non-alphanumeric characters with. Returns: str: The processed text with non-alphanumeric characters replaced. return re.sub(r'[^A-Za-z0-9]', replacement, text)"},{"question":"Develop a Python program snippet to Transform Low Hygiene during illness: Hand Hygiene when Sick for Engineer for Professionals. Incorporate if/else or switch/case statements to handle various cases related to the Reliability. Dry-run, ensure your control flow logic is clear and well-commented.","solution":"def hand_hygiene_advice(illness_severity, engineer_role): Provides hand hygiene advice for professionals based on illness severity and engineer role. if illness_severity == \\"mild\\": if engineer_role == \\"software\\": return \\"Sanitize hands frequently, avoid touching face.\\" elif engineer_role == \\"hardware\\": return \\"Wear gloves when handling equipment, sanitize hands frequently.\\" elif engineer_role == \\"mechanical\\": return \\"Wash hands regularly, use hand sanitizers.\\" else: return \\"Sanitize hands frequently.\\" elif illness_severity == \\"moderate\\": if engineer_role == \\"software\\": return \\"Work from home if possible, sanitize hands frequently.\\" elif engineer_role == \\"hardware\\": return \\"Avoid office if possible, sanitize hands and work surfaces.\\" elif engineer_role == \\"mechanical\\": return \\"Minimize contact with surfaces, wash hands regularly.\\" else: return \\"Sanitize hands frequently, consider remote work.\\" elif illness_severity == \\"severe\\": return \\"Stay home and rest. Avoid contact with others.\\" else: return \\"Invalid severity level. Please provide a valid severity.\\""},{"question":"Sort the list [7, 3, 1, 4, 6, 5, 2] in increasing order using a Python function.","solution":"def sort_list(input_list): Returns a sorted list in increasing order. return sorted(input_list)"},{"question":"Write a Python function that takes a list of integers as input and uses the Fisher-Yates algorithm to shuffle the list in place. The function should not use any external libraries, and should have a time complexity of O(n) and space complexity of O(1). Additionally, the function should perform the shuffle algorithm in reverse order, starting from the last element of the list and moving towards the first element.","solution":"import random def reverse_fisher_yates_shuffle(lst): Shuffles the list in place using the Fisher-Yates algorithm in reverse order. Args: lst (list): List of integers to shuffle. Returns: None n = len(lst) for i in range(n-1, 0, -1): j = random.randint(0, i) lst[i], lst[j] = lst[j], lst[i]"},{"question":"Create a Python script that takes a given list of URLs as command line arguments and fetches the HTTP status codes and the HTML content lengths of those URLs using Python's urllib library. The script should display the results in a tabulated format using the tabulate library, with columns for URL, status code, and content length.","solution":"import urllib.request import sys from tabulate import tabulate def fetch_url_info(urls): results = [] for url in urls: try: with urllib.request.urlopen(url) as response: status_code = response.getcode() html_content = response.read() content_length = len(html_content) results.append([url, status_code, content_length]) except Exception as e: results.append([url, 'Error', str(e)]) return results if __name__ == \\"__main__\\": urls = sys.argv[1:] if not urls: print(\\"Please provide URLs as command line arguments.\\") else: results = fetch_url_info(urls) print(tabulate(results, headers=[\\"URL\\", \\"Status Code\\", \\"Content Length\\"]))"},{"question":"Update the code so that the function will reverse the characters in a string. Additionally, the function should handle erroneous inputs by raising a TypeError if the input is not a string.","solution":"def reverse_string(s): Returns the reversed string of s. Raises a TypeError if s is not a string. if not isinstance(s, str): raise TypeError('Input must be a string') return s[::-1]"},{"question":"Write code to generate random strings of a given length with only uppercase/lowercase English letters and numbers.","solution":"import random import string def generate_random_string(length): Generates a random string of the given length consisting of uppercase/lowercase English letters and numbers. :param length: Length of the generated string. :return: Randomly generated string. characters = string.ascii_letters + string.digits return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Write a program in Python for implementing the K-means clustering algorithm on the \`Iris\` dataset from the scikit-learn library. Additionally, include a visualization of the clusters using the matplotlib library. Your program should include options to select different initializations methods ('k-means++' or random) and calculate the inertia or sum of squared errors (SSE) for the resulting clusters.","solution":"import numpy as np import matplotlib.pyplot as plt from sklearn.datasets import load_iris from sklearn.cluster import KMeans from sklearn.decomposition import PCA def plot_clusters(data, labels, centers, title): Plots the clusters and cluster centers. :param data: The data points. :param labels: The cluster labels. :param centers: The cluster centers. :param title: The title for the plot. plt.figure(figsize=(8, 6)) unique_labels = np.unique(labels) for label in unique_labels: cluster_data = data[labels == label] plt.scatter(cluster_data[:, 0], cluster_data[:, 1], label=f'Cluster {label}') plt.scatter(centers[:, 0], centers[:, 1], s=300, c='red', label='Centers', marker='X') plt.title(title) plt.xlabel('Principal Component 1') plt.ylabel('Principal Component 2') plt.legend() plt.show() def kmeans_clustering(init_method='k-means++'): Applies the K-means clustering algorithm on the Iris dataset and visualizes the clustered data. :param init_method: Method for initialization ('k-means++' or 'random'). :return: The inertia (Sum of Squared Errors) of the resulting clusters. iris = load_iris() X = iris.data pca = PCA(2) X_reduced = pca.fit_transform(X) kmeans = KMeans(n_clusters=3, init=init_method, random_state=42) kmeans.fit(X_reduced) labels = kmeans.labels_ centers = kmeans.cluster_centers_ inertia = kmeans.inertia_ plot_clusters(X_reduced, labels, centers, f'K-means clustering with {init_method} initialization') return inertia"},{"question":"Write a python code that takes a gif as an input, quantifies the colors in the gif to a specified number of colors and creates a new gif with the quantified colors.","solution":"from PIL import Image def quantify_colors_in_gif(input_gif_path, output_gif_path, num_colors): Quantifies the colors in the input GIF to a specified number of colors and saves the result to a new GIF. Parameters: - input_gif_path: str, path to the input GIF file. - output_gif_path: str, path to save the output quantified GIF file. - num_colors: int, the number of colors to quantify the GIF to. Returns: - None with Image.open(input_gif_path) as gif: # Quantize the gif to the specified number of colors quantized_gif = gif.convert('P', palette=Image.ADAPTIVE, colors=num_colors) # Save the new quantified gif quantized_gif.save(output_gif_path, save_all=True) # Usage example (uncomment to run): # quantify_colors_in_gif('input.gif', 'output.gif', 16)"},{"question":"Implement a function that takes in a list of integers and returns a new list with each integer multiplied by 2. However, you are not allowed to use the multiplication operator (*) to multiply the integers by 2. Instead, you should use bit shifting or addition to achieve the multiplication. Additionally, the function should have a time complexity of O(n) and should not use any built-in functions or libraries to perform the multiplication or bit shifting operations. The function should also handle negative numbers in the input list and return the correct results for them.","solution":"def multiply_by_2(nums): Takes in a list of integers and returns a new list with each integer multiplied by 2 using bit shifting. result = [] for num in nums: result.append(num << 1) return result"},{"question":"Generate a function that returns the length of a given string. However, you are not allowed to use the built-in function or method for calculating the length of a string. You must come up with your own algorithm to count the number of characters in the string.","solution":"def string_length(s): Returns the length of the string s without using built-in length functions. length = 0 for char in s: length += 1 return length"},{"question":"How would you implement a function to convert an integer to a string in Python and then reverse the resulting string, ensuring that the reversed string still accurately represents the original integer value when reconverted back to an integer type, including maintaining proper handling of a leading '-' sign for negative numbers?","solution":"def reverse_integer_to_string(n): Converts an integer to a string and then reverses that string. For negative numbers, the '-' sign should be properly handled. str_n = str(n) # Convert the integer to a string if str_n[0] == '-': reversed_str = '-' + str_n[:0:-1] # Reverse the string excluding the '-' sign else: reversed_str = str_n[::-1] # Reverse the string for non-negative numbers return reversed_str"},{"question":"Write a function that takes a list and the length of the longest word in that list, and returns a list of 0s and 1s for every word in the input, where 1 indicates the start of a word and 0 for every following word position up to the length specified.","solution":"def words_binary_representation(words, longest_word_length): Returns a list of 0s and 1s for each word in the input words list. 1 indicates the start of a word and 0 for every following word position up to the length specified. :param words: List of words :param longest_word_length: Length of the longest word :return: List of binary representations result = [] for word in words: for i in range(longest_word_length): if i == 0: result.append(1) else: result.append(0) return result"},{"question":"Create code to find the longest subarray with a sum of 0.","solution":"def longest_subarray_with_zero_sum(arr): Given an array of integers, finds the length of the longest subarray with a sum of 0. # Dictionary to store the sum until the current index sum_map = {} max_len = 0 current_sum = 0 for i, num in enumerate(arr): current_sum += num if current_sum == 0: max_len = i + 1 elif current_sum in sum_map: max_len = max(max_len, i - sum_map[current_sum]) else: sum_map[current_sum] = i return max_len"},{"question":"Write a code completion challenge where the goal is to implement a linear search algorithm with a slight modification. Instead of searching for a specific value in the array, the algorithm should find the index of the smallest element in the array that is greater than or equal to a given threshold value.","solution":"def linear_search_modified(arr, threshold): Returns the index of the smallest element in the array that is greater than or equal to the threshold value. If no such element exists, return -1. min_val = float('inf') min_index = -1 for i, value in enumerate(arr): if value >= threshold and value < min_val: min_val = value min_index = i return min_index"},{"question":"Given the list of numbers, how can we sort them using selection sort algorithm in Python?","solution":"def selection_sort(numbers): Sorts the list of numbers using the selection sort algorithm. n = len(numbers) for i in range(n): # Find the minimum element in remaining unsorted array min_index = i for j in range(i + 1, n): if numbers[j] < numbers[min_index]: min_index = j # Swap the found minimum element with the first element numbers[i], numbers[min_index] = numbers[min_index], numbers[i] return numbers"},{"question":"Compress a given string using the Run-Length Encoding algorithm, but with the additional requirements that the implementation must not use any built-in string manipulation functions (such as substring or concatenation) and must have a time complexity of O(n), where n is the length of the string.","solution":"def run_length_encoding(s): Compresses a given string using the Run-Length Encoding algorithm. if not s: return \\"\\" result = [] count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: result.append(prev_char) result.append(str(count)) count = 1 prev_char = char result.append(prev_char) result.append(str(count)) return \\"\\".join(result)"},{"question":"Develop a Python code implementing the insertion sort technique. However, your task is not only to organize an array consisting of n distinct numerical values but also to include a functionality that can cater to sorting in both ascending and descending order. The program should allow user-input to decide the order of sorting before starting the sort. Use the following array for testing your code: [5, 3, 2, 4, 1]","solution":"def insertion_sort(arr, ascending=True): Performs insertion sort on the given array. arr: list of numbers ascending: boolean, if True sort in ascending order, else sort in descending order Returns the sorted array. for i in range(1, len(arr)): key = arr[i] j = i - 1 if ascending: # Sort in ascending order while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 else: # Sort in descending order while j >= 0 and key > arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr # Test array test_array = [5, 3, 2, 4, 1] # Sorting in ascending order print(\\"Ascending:\\", insertion_sort(test_array, ascending=True)) # Resetting test array test_array = [5, 3, 2, 4, 1] # Sorting in descending order print(\\"Descending:\\", insertion_sort(test_array, ascending=False))"},{"question":"Write a function in Python that takes an integer input n and prints all even numbers between 1 and n, but only if the number is also divisible by 3. Additionally, the function should return the count of such numbers found.","solution":"def find_even_divisible_by_3(n): Prints all even numbers between 1 and n that are also divisible by 3. Returns the count of such numbers. count = 0 for i in range(2, n+1, 2): # iterate through even numbers only if i % 3 == 0: print(i) count += 1 return count"},{"question":"Develop a Python function to calculate a Fibonacci number based on a given index, but without using recursion and without using any loops. Additionally, you are not allowed to use any built-in Python functions or libraries for calculating Fibonacci numbers.","solution":"def fibonacci(n): Returns the n-th Fibonacci number using a formula-based approach. if n == 0: return 0 elif n == 1: return 1 else: φ = (1 + 5 ** 0.5) / 2 ψ = (1 - 5 ** 0.5) / 2 return int((φ ** n - ψ ** n) / (5 ** 0.5))"},{"question":"Create a web service in Python that can respond to a web request with a JSON object containing information about the current date and time.","solution":"from flask import Flask, jsonify from datetime import datetime app = Flask(__name__) @app.route('/datetime', methods=['GET']) def get_datetime(): Endpoint to get the current date and time. Returns: JSON object containing the current date and time. now = datetime.now() current_time = now.strftime(\\"%Y-%m-%d %H:%M:%S\\") response = { \\"date\\": now.strftime(\\"%Y-%m-%d\\"), \\"time\\": now.strftime(\\"%H:%M:%S\\") } return jsonify(response) if __name__ == '__main__': app.run(debug=True)"},{"question":"Can you represent a Python function with a docstring that performs the binary search algorithm on a sorted list of integers in the form of a mathematical equation? Additionally, the function should have a time complexity of O(log n) and be implemented without using any built-in search functions or libraries. The equation should only use basic mathematical operations such as addition, subtraction, multiplication, and division, and should not include any variables with names related to programming concepts such as loops or conditionals. Can you also include a table showing the number of comparisons made by the function for different input sizes, ranging from 10 to 1000 in increments of 10?","solution":"def binary_search(arr, target): Performs the binary search algorithm on the sorted list arr to find the target. Returns the index of target if found, otherwise returns -1. Steps: Initialize two pointers, l and r. While the interval is valid, calculate the mid-point. If the mid-point is the target, return its index. If the mid-point is less than the target, narrow the interval to the right half. Otherwise, narrow it to the left half. @param arr (List[int]): A sorted list of integers @param target (int): The integer to find @return int: The index of the target in arr or -1 if not found l, r = 0, len(arr) - 1 comparisons = 0 while l <= r: comparisons += 1 mid = (l + r) // 2 if arr[mid] == target: print(f\\"Number of comparisons: {comparisons}\\") return mid elif arr[mid] < target: l = mid + 1 else: r = mid - 1 print(f\\"Number of comparisons: {comparisons}\\") return -1"},{"question":"Please make a short Python script that starts n instances of a program, where n is an input parameter. Each instance should have a unique argument that is a hexadecimal value ranging from 0x1000000 to 0x1000000 + n-1. The script should ensure that no two instances have the same argument and should wait for all instances to complete before finishing. It is important that the script maintains a record of which instance had which argument for debugging purposes. Can you also include an option for the user to specify a different range of hexadecimal values if needed?","solution":"import subprocess from typing import List def start_instances(n: int, start_hex: int = 0x1000000): Start n instances of a program, each with a unique hexadecimal argument. :param n: Number of instances to start. :param start_hex: Starting hexadecimal value, default is 0x1000000. :return: A list of tuples containing the process object and the hex argument for debugging. processes = [] for i in range(n): hex_arg = hex(start_hex + i) command = ['python', 'some_program.py', hex_arg] # Adjust 'some_program.py' to the actual program name. process = subprocess.Popen(command) processes.append((process, hex_arg)) for process, hex_arg in processes: process.wait() # Wait for each process to complete. return processes"},{"question":"Write a Python function that takes a list of integers as input and returns a new list with the squares of the input integers. Also, write test cases to prove its correctness.","solution":"def square_list(int_list): Returns a new list with the squares of the input integers. return [x ** 2 for x in int_list]"},{"question":"Create a function to simulate a battle between two characters, with the option to choose different weapons and armor. The function should take in the attack and defense stats of each character, as well as their choice of weapon and armor. The function should also consider the weather conditions and time of day as an additional factor that may affect the battle outcome. The function should return the winner of the battle, the amount of damage dealt, and any additional bonuses or penalties based on the weather and time of day. Add an option for critical hits, where the attacker rolls twice and takes the higher roll. Also, add an option for dodge or block, where the defender rolls to determine if they successfully evade the attack.","solution":"import random def simulate_battle(attacker_stats, defender_stats, weather, time_of_day, critical_hit=False, dodge_or_block=False): Simulates a battle between two characters considering different parameters. Parameters: attacker_stats (dict): Dictionary containing attacker's attack, defense, weapon and armor. defender_stats (dict): Dictionary containing defender's attack, defense, weapon and armor. weather (str): Current weather condition. time_of_day (str): Current time of day. critical_hit (bool): Whether critical hit is considered. dodge_or_block (bool): Whether dodge or block is considered. Returns: dict: Dictionary containing the winner, damage dealt, and any additional bonuses or penalties. attack_modifiers = {\\"sword\\": 5, \\"bow\\": 4, \\"axe\\": 6} defense_modifiers = {\\"shield\\": 5, \\"armor\\": 6} weather_modifiers = {\\"rain\\": -1, \\"sunny\\": 1, \\"foggy\\": -2} time_modifiers = {\\"day\\": 1, \\"night\\": -1} attacker_attack = attacker_stats['attack'] + attack_modifiers.get(attacker_stats['weapon'], 0) defender_defense = defender_stats['defense'] + defense_modifiers.get(defender_stats['armor'], 0) weather_modifier = weather_modifiers.get(weather, 0) time_modifier = time_modifiers.get(time_of_day, 0) attack_value = attacker_attack + random.randint(1, 20) + weather_modifier + time_modifier defense_value = defender_defense + random.randint(1, 20) if critical_hit: attack_value_critical = max(attack_value, attacker_attack + random.randint(1, 20)) attack_value = attack_value_critical if dodge_or_block: if random.randint(1, 2) == 1: defense_value = max(defense_value, defender_defense + random.randint(1, 20)) damage_dealt = max(0, attack_value - defense_value) winner = \\"attacker\\" if damage_dealt > 0 else \\"defender\\" return { \\"winner\\": winner, \\"damage_dealt\\": damage_dealt, \\"weather_modifier\\": weather_modifier, \\"time_modifier\\": time_modifier, \\"critical_hit_applied\\": critical_hit, \\"dodge_or_block_applied\\": dodge_or_block, }"},{"question":"Develop a method in Python to identify if a number is a palindrome, considering only alphanumeric characters and ignoring case sensitivity and special characters. Ensure your solution is efficient and doesn't directly convert the number to a string for the palindrome check.","solution":"def is_palindrome_number(num): Identify if a number is a palindrome ignoring case and special characters. Only considers alphanumeric characters. if num < 0: return False original_num = num reversed_num = 0 while num > 0: remainder = num % 10 reversed_num = reversed_num * 10 + remainder num = num // 10 return original_num == reversed_num"},{"question":"Python program for Mastermind game with 4 pegs, 6 notification pegs and 6 unique colors. The computer selects a random sequence of 4 colors and the user can guess the sequence. For every color and position, the program displays a black peg. For every correct color in the wrong postion, the program displays white peg. Write test cases to validate the program's algorithm.","solution":"import random def generate_code(): Generates a random sequence of 4 unique colors for the Mastermind game. colors = [\\"R\\", \\"G\\", \\"B\\", \\"Y\\", \\"O\\", \\"P\\"] # Red, Green, Blue, Yellow, Orange, Purple return random.sample(colors, 4) def evaluate_guess(secret_code, guess): Evaluates the user's guess against the secret code. Parameters: secret_code (list of str): The secret code sequence. guess (list of str): The user's guess sequence. Returns: tuple: black_pegs (int): Number of pegs that are correct in both color and position. white_pegs (int): Number of pegs that are correct in color but wrong in position. black_pegs = sum(a == b for a, b in zip(secret_code, guess)) secret_code_color_counts = {color: secret_code.count(color) for color in set(secret_code)} guess_color_counts = {color: guess.count(color) for color in set(guess)} white_pegs = sum(min(secret_code_color_counts.get(color, 0), guess_color_counts.get(color, 0)) for color in set(guess)) white_pegs -= black_pegs # Remove black_pegs from white_pegs return black_pegs, white_pegs"},{"question":"Write a function that takes 2 arrays of integers as input. The task is to create a program, that firstly, merges these 2 arrays into a single array. Secondly, the program must sort this new array in ascending order, but with a twist: even numbers must be sorted and placed before odd numbers, both in ascending order. Your function should return this newly sorted array.","solution":"def merge_and_sort_even_before_odd(arr1, arr2): Merges two arrays and sorts them such that even numbers come before odd numbers, both in ascending order. Parameters: arr1 (list): First array of integers. arr2 (list): Second array of integers. Returns: list: New array with even numbers first in ascending order followed by odd numbers in ascending order. merged_array = arr1 + arr2 even_numbers = sorted([x for x in merged_array if x % 2 == 0]) odd_numbers = sorted([x for x in merged_array if x % 2 != 0]) return even_numbers + odd_numbers"},{"question":"Write a code that prints a given decimal number in binary, ternary, and octal representation, but with a twist. Instead of directly converting the number, you need to calculate its square, then convert that result to binary, ternary, and octal. Accomplish this, by writing functions for each conversion, without using in-built conversion functions (e.g., bin() or oct()).","solution":"def to_binary(n): Convert a given positive integer n into its binary representation. if n == 0: return \\"0\\" binary = [] while n > 0: binary.append(str(n % 2)) n = n // 2 return \\"\\".join(binary[::-1]) def to_ternary(n): Convert a given positive integer n into its ternary (base-3) representation. if n == 0: return \\"0\\" ternary = [] while n > 0: ternary.append(str(n % 3)) n = n // 3 return \\"\\".join(ternary[::-1]) def to_octal(n): Convert a given positive integer n into its octal representation. if n == 0: return \\"0\\" octal = [] while n > 0: octal.append(str(n % 8)) n = n // 8 return \\"\\".join(octal[::-1]) def convert(number): Convert the square of the given number to binary, ternary, and octal. squared = number ** 2 return { \\"binary\\": to_binary(squared), \\"ternary\\": to_ternary(squared), \\"octal\\": to_octal(squared) }"},{"question":"Write a python script to list all files in a directory and subdirectories recursively, including the full path for each file and excluding hidden files and directories. Also, the script should display a progress percentage on how much of the directory tree has already been scanned.","solution":"import os def list_files_recursive(base_path): Recursively lists all files in a directory and subdirectories, excluding hidden files and directories. Args: base_path (str): The base path to start the search from. Returns: list: List of full paths to files found. all_files = [] total_entries = sum([len(directories) + len(files) for _, directories, files in os.walk(base_path)]) processed_entries = 0 for root, directories, files in os.walk(base_path): # Filter out hidden directories directories[:] = [d for d in directories if not d.startswith('.')] # Filter out hidden files and get the full path for file in files: if not file.startswith('.'): file_path = os.path.join(root, file) all_files.append(file_path) processed_entries += len(directories) + len(files) progress_percentage = (processed_entries / total_entries) * 100 if total_entries > 0 else 100 print(f\\"Progress: {progress_percentage:.2f}%\\") return all_files"},{"question":"Write a function \`is_palindrome\` that takes in a string and checks whether it is a palindrome. A palindrome is a string that reads the same forwards and backwards. The function should return True if the string is a palindrome and False otherwise.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, and False otherwise. # Remove any non-alphanumeric characters and convert to lowercase cleaned_str = ''.join(char.lower() for char in s if char.isalnum()) # Compare the cleaned string with its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"Write a code to check if one given string is a substring of another. However, the code must be case-insensitive and must ignore any leading or trailing spaces in both strings.","solution":"def is_substring(main_string, sub_string): Checks if sub_string is a substring of main_string in a case-insensitive manner and ignoring leading or trailing spaces in both strings. main_string = main_string.strip().lower() sub_string = sub_string.strip().lower() return sub_string in main_string"},{"question":"Given a list of words, create a reverse lookup dictionary (word as key, indices as values), and additionally implement a function that can handle variations of the words (uppercase, lowercase, or starting/ending white spaces). The function should return all index locations of the original case-sensitive word, as well as the variations.","solution":"def create_reverse_lookup_dict(word_list): Given a list of words, create a reverse lookup dictionary where the word is the key and the value is a list of indices where the word can be found. reverse_lookup = {} # Populate the reverse lookup dictionary for index, word in enumerate(word_list): normalized_word = word.strip().lower() if normalized_word not in reverse_lookup: reverse_lookup[normalized_word] = [] reverse_lookup[normalized_word].append(index) return reverse_lookup def find_word_indices(word_list, search_word): Finds all index locations of the original word and its variations (uppercase, lowercase, white spaces) search_word_normalized = search_word.strip().lower() reverse_lookup = create_reverse_lookup_dict(word_list) if search_word_normalized in reverse_lookup: return reverse_lookup[search_word_normalized] return []"},{"question":"Translate the following statement into code: “If the value of x is greater than 10, print 'x is greater than 10'”. In addition to this, if 'x' is less than or equal to 10, then return a table of string values from '1' to 'x'. If 'x' is a negative value, then throw an error specifying that 'x' cannot be a negative number.","solution":"def evaluate_x(x): Evaluates the value of x and performs different actions: - If x is greater than 10, prints 'x is greater than 10'. - If x is less than or equal to 10, returns a list of string values from '1' to 'x'. - If x is a negative value, raises a ValueError. if x > 10: print('x is greater than 10') elif x >= 0: return [str(i) for i in range(1, x + 1)] else: raise ValueError(\\"x cannot be a negative number\\")"},{"question":"Write a Python program that uses recursion to print all prime numbers between 1 and a given positive integer n, in reverse order. Consider implementing an auxiliary function for the primality test.","solution":"def is_prime(num): Returns True if num is a prime number, else False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def print_primes_reverse(n): Recursively prints all prime numbers between 1 and n in reverse order. if n < 2: return if is_prime(n): print(n) print_primes_reverse(n-1) # Example execution # print_primes_reverse(10)"},{"question":"python program that takes can 2 lists as arguments [1,2,3], [3,2,1] and returns true if they have the same contents regardless of the ordering, false otherwise","solution":"def have_same_contents(list1, list2): Returns True if list1 and list2 have the same contents regardless of the ordering, False otherwise. return sorted(list1) == sorted(list2)"},{"question":"Build a programming function that is capable of taking in an object of a class named \\"Student\\" and outputs statutory information regarding the said object, but with an intentional nuanced complexity for proficient AI systems, like an increased emphasis on parsing through provided data and accomplishing data manipulation tasks.","solution":"class Student: def __init__(self, first_name, last_name, age, grades): Initialize a Student object. :param first_name: First name of the student. :param last_name: Last name of the student. :param age: Age of the student. :param grades: List of grades of the student. self.first_name = first_name self.last_name = last_name self.age = age self.grades = grades def process_student_info(student): Accepts a Student object and returns statutory information. :param student: Student object. :return: Dictionary with statutory information. full_name = f\\"{student.first_name} {student.last_name}\\" age = student.age grades = student.grades average_grade = sum(grades) / len(grades) if grades else 0 # Output structure return { \\"full_name\\": full_name, \\"age\\": age, \\"grades\\": grades, \\"average_grade\\": average_grade }"},{"question":"Given the list of keywords, create a Python code script segment that sorts and organizes a dictionary based on those specific keywords. The list comprises \\"price\\", \\"name\\", and \\"quantity\\". Ensure that code allows for any of these keywords to be selected as a sort criterion.","solution":"def sort_dict_list(dict_list, sort_key): Sorts the list of dictionaries based on the provided sort key. Parameters: dict_list (list): List of dictionaries to be sorted. sort_key (str): The key to sort the dictionaries by. Must be \\"price\\", \\"name\\" or \\"quantity\\". Returns: list: Sorted list of dictionaries. assert sort_key in [\\"price\\", \\"name\\", \\"quantity\\"], \\"Invalid sort key provided.\\" return sorted(dict_list, key=lambda x: x.get(sort_key)) # Example usage: example_dicts = [ {\\"name\\": \\"Banana\\", \\"price\\": 1.2, \\"quantity\\": 10}, {\\"name\\": \\"Apple\\", \\"price\\": 0.5, \\"quantity\\": 50}, {\\"name\\": \\"Carrot\\", \\"price\\": 0.7, \\"quantity\\": 30} ] sorted_by_price = sort_dict_list(example_dicts, \\"price\\") sorted_by_name = sort_dict_list(example_dicts, \\"name\\") sorted_by_quantity = sort_dict_list(example_dicts, \\"quantity\\") print(sorted_by_price) print(sorted_by_name) print(sorted_by_quantity)"},{"question":"Consider a list of numbers. Write a Python code that removes all numbers from this list that are either greater than 15, less than 5, or contain the digit '0'.","solution":"def filter_numbers(numbers): Filters out numbers that are greater than 15, less than 5, or contain the digit '0'. def is_valid(num): return 5 <= num <= 15 and '0' not in str(num) return [num for num in numbers if is_valid(num)]"},{"question":"Construct a piece of software code designed to fabricate a particular string, specifically it should form a row of asterisks designated as \\"*****\\".","solution":"def generate_asterisks_row(): Returns a string containing a row of 5 asterisks. return \\"*****\\""},{"question":"Write a python program to find and print the squares of the first n numbers, where n is a positive integer less than or equal to 100. The program should also compute and display the sum of these squares. Additionally, the program should be able to handle invalid inputs gracefully and prompt the user to input a valid positive integer if an invalid input is detected.","solution":"def squares_and_sum(n): Given a positive integer n (1 <= n <= 100), return a list of squares of the first n numbers and the sum of these squares. Arguments: n -- a positive integer (1 <= n <= 100) Returns: A tuple containing: - A list of squares of the first n numbers - The sum of these squares # Validate the input if not isinstance(n, int) or n < 1 or n > 100: raise ValueError(\\"Input must be a positive integer between 1 and 100 inclusive\\") squares = [i**2 for i in range(1, n+1)] total_sum = sum(squares) return squares, total_sum"},{"question":"Develop a Python program that can calculate the number of vowels and consonants in a given string and return the result in a dictionary.","solution":"def count_vowels_and_consonants(s): Returns a dictionary with the number of vowels and consonants in the given string s. vowels = \\"aeiouAEIOU\\" count = {'vowels': 0, 'consonants': 0} for char in s: if char.isalpha(): if char in vowels: count['vowels'] += 1 else: count['consonants'] += 1 return count"},{"question":"Program a function to find the shortest path between two nodes in a weighted directed graph using Dijkstra's algorithm. The graph is represented by an adjacency matrix. The function should take in the adjacency matrix, the starting node, and the ending node as parameters. Ensure the function handles cases with negative weights appropriately and returns the shortest path distance along with the path itself.","solution":"import heapq def dijkstra(adj_matrix, start, end): Finds the shortest path between two nodes in a weighted directed graph using Dijkstra's algorithm. Parameters: adj_matrix (list of list of int): The adjacency matrix representing the graph. start (int): The starting node. end (int): The ending node. Returns: tuple: A tuple containing the shortest path distance and the path itself. (distance, path) n = len(adj_matrix) dist = [float('inf')] * n dist[start] = 0 previous = [None] * n priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > dist[current_node]: continue for neighbor, weight in enumerate(adj_matrix[current_node]): if weight >= 0 and weight != float('inf'): distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance previous[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) path = [] if dist[end] != float('inf'): node = end while node is not None: path.insert(0, node) node = previous[node] return dist[end], path"},{"question":"Construct a Python code sequence for the transmutation of RGB color model to CMYK color model.","solution":"def rgb_to_cmyk(r, g, b): Convert RGB color model to CMYK color model. Parameters: r, g, b : RGB values (0-255) Returns: c, m, y, k : CMYK values (0-1) if (r, g, b) == (0, 0, 0): # Black return 0, 0, 0, 1 # Convert RGB to range 0-1 r /= 255.0 g /= 255.0 b /= 255.0 # Calculate K value k = 1 - max(r, g, b) # If K is 1, C, M, Y should all be 0 if k == 1: return 0, 0, 0, 1 # Calculate C, M, Y values c = (1 - r - k) / (1 - k) m = (1 - g - k) / (1 - k) y = (1 - b - k) / (1 - k) return c, m, y, k"},{"question":"I am trying to understand the usage of \\"None\\" value in Python. Consider a function \`f(a, b=None, c=None)\`. Here, \`b\` and \`c\` are optional arguments, carrying a value \`None\` as a default. What implications does this have on the function execution? When \`None\` is assigned to a variable, does it have any effect when referenced, concatenated, or involved in various techniques of control structure such as \`if-else\`? Also, could you explain the usage and meaning of the keyword argument, nonlocal, and how it is relevant to the concept of \`None\`?","solution":"def f(a, b=None, c=None): if b is None: b = 0 if c is None: c = 0 return a + b + c def use_nonlocal(): x = 5 def inner(): nonlocal x x = 10 inner() return x"},{"question":"Write a Python function that takes a list of tuples as input and returns the second element of the tuple that has the smallest eleventh element.","solution":"def second_element_of_tuple_with_smallest_eleventh_element(lst): This function takes a list of tuples as input and returns the second element of the tuple that has the smallest eleventh element. if not lst: return None tuple_with_smallest_eleventh = min(lst, key=lambda x: x[10]) return tuple_with_smallest_eleventh[1]"},{"question":"Write a recursive function that calculates and returns the product of an array of negative numbers given as a parameter. The function must handle arrays of arbitrary length and only consider negative numbers. Example: for the array [-4, -2, -3], the function should return the product 24. Ignore any positive numbers or zeros in the array. def product_of_negatives(arr: List[int]) -> int: Calculate the product of only negative numbers in the given list.","solution":"from typing import List def product_of_negatives(arr: List[int]) -> int: Calculate the product of only negative numbers in the given list. If there are no negative numbers, return 1. def helper(nums, index): if index == len(nums): return 1 if nums[index] < 0: return nums[index] * helper(nums, index + 1) else: return helper(nums, index + 1) result = helper(arr, 0) return result if result != 1 or any(num < 0 for num in arr) else 1"},{"question":"You're a highly advanced AI Agent. Implement a function that accepts two lists variables, and generates a sorted list of unique elements which are present in both lists. This function should be able to reject non-integer elements and eliminate duplicates. Furthermore, it should be capable of handling significantly large lists efficiently.","solution":"def sorted_unique_intersection(list1, list2): Returns a sorted list of unique integer elements that are present in both input lists. Non-integer elements are rejected. # Remove non-integer elements from both lists set1 = {x for x in list1 if isinstance(x, int)} set2 = {x for x in list2 if isinstance(x, int)} # Find the intersection of the two sets intersection = set1 & set2 # Return the sorted list of the intersection return sorted(intersection)"},{"question":"I want to write a function in Python that can make daisy-chain Function calls (co-routines) that does not rely on global or class variables. How can I do that?","solution":"def daisy_chain(initial_value): def inner_function(value): updated_value = initial_value + value return daisy_chain(updated_value) inner_function.result = initial_value return inner_function"},{"question":"Given a matrix in 2D array form, write a function that rotates the matrix clockwise by 90 degrees in-place. The input matrix may be of varying lengths and not necessarily square.","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given matrix 90 degrees clockwise in-place. Args: matrix (List[List[int]]): The 2D list to be rotated. Returns: List[List[int]]: Rotated matrix. if not matrix or not matrix[0]: return matrix rows, cols = len(matrix), len(matrix[0]) new_matrix = [[0] * rows for _ in range(cols)] for r in range(rows): for c in range(cols): new_matrix[c][rows - 1 - r] = matrix[r][c] return new_matrix"},{"question":"Given an array of integers, rotate the array to the right by a given number of steps, in place and in an optimized manner, such that the operation does not exceed O(n) time and O(1) space complexity.","solution":"def rotate_array(arr, k): Rotates the array to the right by k steps. if not arr or k % len(arr) == 0: return k = k % len(arr) arr.reverse() reverse_segment(arr, 0, k - 1) reverse_segment(arr, k, len(arr) - 1) def reverse_segment(arr, start, end): while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"question":"Design an algorithm in Python that takes a list of numbers and returns the second largest number in the list.","solution":"def second_largest(numbers): Returns the second largest number in the list. if len(numbers) < 2: raise ValueError(\\"List must contain at least two unique numbers\\") first = second = float('-inf') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number if second == float('-inf'): raise ValueError(\\"List must contain at least two unique numbers\\") return second"},{"question":"Create a Python script which takes a sentence as input and prints out the total number of each vowel it contains","solution":"def count_vowels(sentence): Returns a dictionary with the count of each vowel in the given sentence. vowels = 'aeiou' sentence = sentence.lower() vowel_count = {vowel: 0 for vowel in vowels} for char in sentence: if char in vowels: vowel_count[char] += 1 return vowel_count"},{"question":"Rewrite the functions below using list comprehensions. Additionally, implement a check function to verify the correctness of the solution.","solution":"def get_even_numbers(lst): return [num for num in lst if num % 2 == 0] def square_numbers(lst): return [num ** 2 for num in lst] def get_positive_numbers(lst): return [num for num in lst if num > 0]"},{"question":"Write a code to filter out all prime numbers from an array which contains both prime and non-prime numbers. The filtered array should be sorted in ascending order.","solution":"def is_prime(n): Returns True if the number 'n' is a prime number, else returns False. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def filter_and_sort_primes(arr): Filters out prime numbers from input array 'arr', and returns them sorted in ascending order. primes = [num for num in arr if is_prime(num)] return sorted(primes)"},{"question":"Create a function that takes a string and an integer as input and returns a string where each character is repeated 'n' times. The function should also remove any duplicate characters in the input string before repeating the characters.","solution":"def repeat_chars(s, n): Takes a string 's' and an integer 'n', removes duplicate characters from 's' and returns a new string where each character is repeated 'n' times. Parameters: s (str): The input string. n (int): The number of times to repeat each character. Returns: str: The processed string with each character repeated 'n' times. # Remove duplicates and maintain order unique_chars = ''.join(sorted(set(s), key=s.index)) return ''.join(c * n for c in unique_chars)"},{"question":"Write a Python implementation of the Gnome Sort algorithm to sort a list of numbers.","solution":"def gnome_sort(lst): Sorts a list of numbers using the Gnome Sort algorithm. index = 0 while index < len(lst): if index == 0 or lst[index] >= lst[index - 1]: index += 1 else: lst[index], lst[index - 1] = lst[index - 1], lst[index] index -= 1 return lst"},{"question":"Modify the following function to return the index of the first occurrence of an element in the list, if the element is not in the list return -1.","solution":"def index_of_first_occurrence(lst, element): Returns the index of the first occurrence of the element in the list. If the element is not in the list, returns -1. try: return lst.index(element) except ValueError: return -1"},{"question":"Reverse the following array of integers and return the reversed array. The reversal should be done in-place, meaning that the original array should be modified directly without creating a new array. Additionally, you are not allowed to use any built-in array reversal functions or methods.","solution":"def reverse_array(arr): Reverses the given array in-place. Args: arr (list): The list of integers to be reversed. Returns: list: The reversed list. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Devise a custom function in the Python programming language, specifically aimed at eliminating every single occurrence of the number '4' from a predefined numpy array, and replace the elements with the square of their original values. Besides, this function should be verified through unit tests. Also, focus on optimizations to ensure that the complexity of the solution is O(n).","solution":"import numpy as np def remove_and_square_fours(arr): Replaces every occurrence of the number 4 in the numpy array with the square of their original values and filters out all 4s. Parameters: arr (numpy.ndarray): 1D or 2D numpy array. Returns: numpy.ndarray: A numpy array with 4s removed and other elements squared. # Ensure that the input is a numpy array arr = np.array(arr) # Square all values in the array arr_squared = arr ** 2 # Filter out all 4s (which are squared to 16) result = arr_squared[arr != 4] return result"},{"question":"Rearrange an array in place such that the array is modified to be like [a[0], a[n-1],a[1], a[n-1], a[2],...]","solution":"def rearrange_array(arr): Rearrange the array such that it becomes [a[0], a[n-1], a[1], a[n-2], a[2], ...]. n = len(arr) result = [0] * n left = 0 right = n - 1 for i in range(n): if i % 2 == 0: result[i] = arr[left] left += 1 else: result[i] = arr[right] right -= 1 return result"},{"question":"Generate code to create a Numpy array with N rows and M columns, where N and M are positive integers, but with the elements in a checkerboard pattern. The elements in the array should be either 0 or 1, following the checkerboard pattern.","solution":"import numpy as np def create_checkerboard_array(N, M): Creates a checkerboard pattern numpy array with N rows and M columns. Parameters: - N (int): Number of rows. - M (int): Number of columns. Returns: - numpy.ndarray: Checkerboard pattern array of shape (N, M). return np.indices((N, M)).sum(axis=0) % 2"},{"question":"Write a function in Python that takes a list of numbers as input and returns a new list with the numbers sorted in descending order using the Insertion Sort algorithm.","solution":"def insertion_sort_descending(arr): Sorts a list of numbers in descending order using the Insertion Sort algorithm. Parameters: arr (list): List of numbers to be sorted. Returns: list: New list with numbers sorted in descending order. n = len(arr) for i in range(1, n): key = arr[i] j = i - 1 while j >= 0 and key > arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Given an array of integers, swap the positions of two elements at the specified indices. The array should have at least 5 elements and the indices should be within the range of the array size. The original array should remain unchanged except for the swapped elements.","solution":"def swap_elements(arr, index1, index2): Swaps the elements at the specified indices in the array. Parameters: arr (list): The list of integers. index1 (int): The first index to swap. index2 (int): The second index to swap. Returns: list: A new list with the elements at index1 and index2 swapped. if len(arr) < 5: raise ValueError(\\"Array must have at least 5 elements.\\") if not (0 <= index1 < len(arr)) or not (0 <= index2 < len(arr)): raise IndexError(\\"Indices are out of range.\\") new_arr = arr.copy() new_arr[index1], new_arr[index2] = new_arr[index2], new_arr[index1] return new_arr"},{"question":"Write a comprehensive python program to demonstrate the use of various unicode string methods. The program should include functions to test string properties (isalpha, isnumeric, isdecimal, isspace, etc.), demonstrate various string operations (concatenation, slicing, repetition), and convert between string cases (upper, lower, title, capitalize). Your program should specifically focus on handling unicode strings, and how various python methods deal with non-english or special characters. Comment your code well to clearly explain what each function does.","solution":"def check_properties(unicode_str): This function checks various properties of the unicode string. properties = { \\"isalpha\\": unicode_str.isalpha(), \\"isnumeric\\": unicode_str.isnumeric(), \\"isdecimal\\": unicode_str.isdecimal(), \\"isspace\\": unicode_str.isspace(), \\"isalnum\\": unicode_str.isalnum() } return properties def string_operations(unicode_str, addition_str, start, end, repeat_times): This function demonstrates various string operations such as concatenation, slicing, and repetition. # Concatenating the unicode string with an additional string concat_result = unicode_str + addition_str # Slicing the unicode string from start to end slicing_result = unicode_str[start:end] # Repeating the unicode string multiple times repetition_result = unicode_str * repeat_times results = { \\"concatenation\\": concat_result, \\"slicing\\": slicing_result, \\"repetition\\": repetition_result } return results def convert_cases(unicode_str): This function converts the unicode string to upper case, lower case, title case and capitalizes the first letter of the string. cases = { \\"upper\\": unicode_str.upper(), \\"lower\\": unicode_str.lower(), \\"title\\": unicode_str.title(), \\"capitalize\\": unicode_str.capitalize() } return cases"},{"question":"Write a code in Python that implements a sorting algorithm of your choice to sort a given list of integers in increasing order.","solution":"def quicksort(arr): Sorts a list of integers in increasing order using the QuickSort algorithm. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Write a Python program that implements a simple dictionary which stores students' grades. The program must include methods for adding grades, calculating the average grade of a student, and determining the student with the highest average grade.","solution":"class GradeBook: def __init__(self): self.grades = {} def add_grade(self, student_name, grade): Adds a grade for the given student. If the student does not exist, creates a new entry. :param student_name: str :param grade: float if student_name not in self.grades: self.grades[student_name] = [] self.grades[student_name].append(grade) def average_grade(self, student_name): Calculates the average grade for a given student. :param student_name: str :return: float if student_name not in self.grades or not self.grades[student_name]: return 0.0 return sum(self.grades[student_name]) / len(self.grades[student_name]) def student_with_highest_average(self): Determines the student with the highest average grade. :return: str highest_avg = 0.0 top_student = \\"\\" for student in self.grades: avg = self.average_grade(student) if avg > highest_avg: highest_avg = avg top_student = student return top_student"},{"question":"In Python, create a while loop that starts counting from -50 and ends at 0, displaying only the numbers that are divisible by 3 and 5. Additionally, you must use a function to check if the number is divisible by both 3 and 5, and the loop must not use a conditional statement to check the number's divisibility.","solution":"def is_divisible_by_3_and_5(number): Check if a number is divisible by both 3 and 5. return number % 3 == 0 and number % 5 == 0 def print_numbers_divisible_by_3_and_5(): Print numbers from -50 to 0 that are divisible by both 3 and 5. number = -50 while number <= 0: if is_divisible_by_3_and_5(number): print(number) number += 1"},{"question":"Reverse the order of a list without using the built-in reverse function and any additional list or array for temporary storage. Your solution should have a time complexity of O(n) and should not use any extra space beyond a few integer variables.","solution":"def reverse_list_in_place(lst): Reverses the order of a list in place without using any additional list or array. Parameters: lst (list): The list to be reversed. n = len(lst) for i in range(n // 2): # Swap the elements lst[i], lst[n - 1 - i] = lst[n - 1 - i], lst[i]"},{"question":"Write an algorithm that can reorder the elements in a jagged, numerical 2D array (with varying lengths) in a strictly descending monotonic sequence. You must also implement a function which allows the user to select a specific row, which will then display the original and the rearranged array.","solution":"def flatten_and_sort_desc(jagged_array): Flattens a jagged 2D array and sorts the elements in descending order. # Flatten the jagged array flattened = [item for sublist in jagged_array for item in sublist] # Sort in descending order sorted_desc = sorted(flattened, reverse=True) return sorted_desc def show_original_and_rearranged(jagged_array, row_index): Displays the original and rearranged array for a specific row. if row_index >= len(jagged_array) or row_index < 0: raise IndexError(\\"Row index out of range\\") original_row = jagged_array[row_index] sorted_row = sorted(original_row, reverse=True) return { \\"original\\": original_row, \\"rearranged\\": sorted_row }"},{"question":"Develop a Python script to convert a large CSV file into smaller chunks of JSON \\"pearls\\". These should be merged into multiple insightful JSON file(s) separated by a unique categorical key with cleaner/ filtered data for API consumption. Display progress data to standard out periodically for complex datasets Minute existence requisite.","solution":"import pandas as pd import json import os from tqdm import tqdm def convert_csv_to_json_chunks(csv_file_path, json_output_dir, chunk_size=1000, category_col=None): Convert a CSV file into smaller JSON chunks separated by a unique categorical key if specified. Args: csv_file_path (str): The path to the input CSV file. json_output_dir (str): The directory where the JSON files will be saved. chunk_size (int): Number of rows per JSON chunk. Default is 1000. category_col (str): The name of the column to use for categorizing the JSON chunks. Default is None. # Ensure output directory exists if not os.path.exists(json_output_dir): os.makedirs(json_output_dir) # Read the CSV file in chunks chunks = pd.read_csv(csv_file_path, chunksize=chunk_size) chunk_index = 0 for chunk in tqdm(chunks, desc=\\"Processing\\"): # Filter/clean data here if necessary (example: drop rows with any null values) chunk = chunk.dropna() if category_col: unique_categories = chunk[category_col].unique() for category in unique_categories: category_chunk = chunk[chunk[category_col] == category] # Convert the DataFrame to JSON json_data = category_chunk.to_dict(orient='records') json_file_name = f\\"{category}_{chunk_index}.json\\" json_file_path = os.path.join(json_output_dir, json_file_name) # Save to JSON file with open(json_file_path, 'w') as json_file: json.dump(json_data, json_file, indent=4) print(f\\"Saved chunk {chunk_index} for category {category} to {json_file_name}\\") else: # Convert the DataFrame to JSON json_data = chunk.to_dict(orient='records') json_file_name = f\\"chunk_{chunk_index}.json\\" json_file_path = os.path.join(json_output_dir, json_file_name) # Save to JSON file with open(json_file_path, 'w') as json_file: json.dump(json_data, json_file, indent=4) print(f\\"Saved chunk {chunk_index} to {json_file_name}\\") chunk_index += 1"},{"question":"Design a Python function that not only converts measurements from degrees Celsius to degrees Fahrenheit but also from degrees Fahrenheit to degrees Celsius. Additionally, the function should be able to handle a list of temperatures, converting each element appropriately based on an input flag that specifies the conversion direction (from Celsius to Fahrenheit or from Fahrenheit to Celsius).","solution":"def convert_temperatures(temperatures, to_scale): This function converts temperatures between Celsius and Fahrenheit. Parameters: temperatures (list or float): a single temperature or a list of temperatures to be converted. to_scale (str): 'C' to convert to Celsius or 'F' to convert to Fahrenheit. Returns: list or float: converted temperature(s). if to_scale not in ['C', 'F']: raise ValueError(\\"to_scale must be either 'C' (Celsius) or 'F' (Fahrenheit).\\") def celsius_to_fahrenheit(c): return (c * 9/5) + 32 def fahrenheit_to_celsius(f): return (f - 32) * 5/9 if isinstance(temperatures, list): if to_scale == 'F': return [celsius_to_fahrenheit(temp) for temp in temperatures] elif to_scale == 'C': return [fahrenheit_to_celsius(temp) for temp in temperatures] else: if to_scale == 'F': return celsius_to_fahrenheit(temperatures) elif to_scale == 'C': return fahrenheit_to_celsius(temperatures)"},{"question":"Create an acronym that stands for \\"We Are Always Working\\" using the letters in the given string \\"WAAW\\". Make sure that the acronym is meaningful and related to the original phrase. Additionally, provide a table that shows the number of possible combinations of letters that can form acronyms using the letters in \\"WAAW\\" for lengths 2 to 5. Finally, include a code snippet in Python that verifies the correctness of the generated acronym and outputs the number of possible acronym combinations for each length.","solution":"def generate_acronym(): Generates an acronym for \\"We Are Always Working\\" using the letters in the given string \\"WAAW\\". return \\"WAAW\\" def count_combinations(letters, min_length, max_length): Count the number of possible combinations of letters that can form acronyms using the given letters for lengths between min_length and max_length (inclusive). Parameters: letters (str): The string of letters used to form acronyms. min_length (int): The minimum length of acronyms. max_length (int): The maximum length of acronyms. Returns: dict: A dictionary where keys are lengths and values are the number of combinations for that length. from itertools import combinations comb_dict = {} for length in range(min_length, max_length + 1): comb_dict[length] = len(list(combinations(letters, length))) return comb_dict # Calculate and display the number of possible combinations letters = \\"WAAW\\" min_length = 2 max_length = 5 combinations_count = count_combinations(letters, min_length, max_length) acronym = generate_acronym() (combinations_count, acronym)"},{"question":"Write a algorithm in Python for finding the lowest common ancestor of two given nodes in a binary search tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowest_common_ancestor(root, p, q): Returns the lowest common ancestor of two nodes p and q in a binary search tree (BST). Parameters: - root (TreeNode): The root of the BST. - p (TreeNode): The first node. - q (TreeNode): The second node. Returns: - TreeNode: The lowest common ancestor of nodes p and q. current = root while current: if p.val < current.val and q.val < current.val: current = current.left elif p.val > current.val and q.val > current.val: current = current.right else: return current return None"},{"question":"Create a program that generates a list of 25 distinct prime numbers between 10 and 200. However, the program should not use any built-in functions or libraries to determine whether a number is prime. Instead, you should implement your own algorithm to check for primality. Additionally, provide an error handling mechanism to handle cases where the program is unable to find 25 prime numbers within the given range.","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def generate_primes(min_range, max_range, number_of_primes): Generates a list of distinct prime numbers within a given range. primes = [] for num in range(min_range, max_range + 1): if is_prime(num): primes.append(num) if len(primes) == number_of_primes: break if len(primes) < number_of_primes: raise ValueError(\\"Unable to find the requested number of prime numbers within the given range.\\") return primes # Example usage: # primes = generate_primes(10, 200, 25) # print(primes)"},{"question":"Write a Python function which accepts a list of integers and returns the odd numbers from that list. However, the function should also handle possible exceptions like non-integer values in the list and return empty list if the list is not valid.","solution":"def extract_odd_numbers(int_list): Accepts a list of integers and returns a list containing only the odd numbers from the input list. If the input list contains any non-integer values, it returns an empty list. try: # Verify all elements in the list are integers if not all(isinstance(i, int) for i in int_list): return [] # Filter and return odd numbers return [num for num in int_list if num % 2 != 0] except Exception: return []"},{"question":"Construct a function in Python to filter out all numbers that are divisible by both 2 and 3 in a given list, and return the product of the remaining numbers.","solution":"def product_of_remaining_numbers(lst): Filters out numbers that are divisible by both 2 and 3 and returns the product of the remaining numbers. Parameters: lst (list of int): The list of integers. Returns: int: The product of the numbers not divisible by both 2 and 3. Returns 1 if there are no remaining numbers. from functools import reduce from operator import mul # Filter out numbers that are divisible by both 2 and 3 filtered_lst = [num for num in lst if not (num % 2 == 0 and num % 3 == 0)] # Return the product of the remaining numbers return reduce(mul, filtered_lst, 1)"},{"question":"Develop a Python program that takes two lists as input and prints a new list containing the elements that occur in both the given lists.","solution":"def intersect_lists(list1, list2): Returns a list containing the elements that occur in both input lists. return [item for item in list1 if item in list2]"},{"question":"Finish the following code. Instead of a simple codeword, create a function that accepts two strings. Check if the characters in the first string can be rearranged to match the second string considering the same characters frequency. Also confirm the second string is an anagram of the first, ignoring case and spaces but considering unique characters' frequency.","solution":"def are_anagrams(str1, str2): Check if the characters in the first string can be rearranged to match the second string, ignoring case and spaces but considering unique characters' frequency. from collections import Counter # Normalize the strings by converting to lower case and removing spaces normalized_str1 = ''.join(str1.lower().split()) normalized_str2 = ''.join(str2.lower().split()) # Use collections.Counter to count frequencies of each character return Counter(normalized_str1) == Counter(normalized_str2)"},{"question":"We have a list of numbers, some of which are prime. Write a python function \\"filter_primes\\" that takes in a list of integers and filters out all the non-prime numbers. Additionally, the function should only consider numbers greater than 100. The function should return a new list containing only the prime numbers from the original list, sorted in ascending order. Include a verification function with provided data points to confirm the correctness of your solution.","solution":"def is_prime(n): Helper function to check if a number is a prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(nums): Filters out non-prime numbers and numbers <= 100 from the given list, returning a new list with only prime numbers sorted in ascending order. primes = [num for num in nums if num > 100 and is_prime(num)] return sorted(primes)"},{"question":"Given two arrays A and B of equal size, write a program to check if there exists two indices i and j (i != j) in the array such that A[i] = B[j] and A[j] = B[i]. If such indices exist, return \\"Kayak\\", else return \\"Not Kayak\\". Assume all elements of arrays A and B are distinct.","solution":"def is_kayak(A, B): Checks if there exist indices i and j such that A[i] = B[j] and A[j] = B[i]. Returns \\"Kayak\\" if such indices exist, otherwise returns \\"Not Kayak\\". n = len(A) value_to_index_in_A = {value: idx for idx, value in enumerate(A)} value_to_index_in_B = {value: idx for idx, value in enumerate(B)} for idx in range(n): a_val = A[idx] b_val = B[idx] if a_val in value_to_index_in_B and b_val in value_to_index_in_A: if value_to_index_in_B[a_val] != idx and value_to_index_in_A[b_val] != idx: return \\"Kayak\\" return \\"Not Kayak\\""},{"question":"Write a Python code to generate Fibonacci sequence up to 'n' numbers, where 'n' is a given integer. The code should implement this in an efficient manner, without using any external libraries. Additionally, explain the logic behind the code.","solution":"def fibonacci_sequence(n): Generates a list of Fibonacci sequence up to 'n' numbers. Args: n (int): number of Fibonacci numbers to generate. Returns: list: list containing the first 'n' Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibonacci_list = [0, 1] for i in range(2, n): next_fib = fibonacci_list[-1] + fibonacci_list[-2] fibonacci_list.append(next_fib) return fibonacci_list # Explanation: # The function begins by checking if the input \`n\` is less than or equal to 0 # and returns an empty list in that case. If \`n\` is 1, it returns a list with # the first Fibonacci number only. # For generating the sequence when \`n\` is greater than 1, it initializes the # list with the first two Fibonacci numbers [0, 1]. Then, in a loop from 2 to # n-1, it calculates the next Fibonacci number by summing the last two numbers # in the list and appends this to the list. Finally, the fully constructed # Fibonacci sequence is returned."},{"question":"Create a Python function to insert a new element in a list at the given index, but you are not allowed to use any built-in list methods such as \`insert()\` or \`append()\`. You can assume that the list and the index are valid inputs. The function should return the modified list.","solution":"def insert_element(lst, index, element): Inserts an element into the list at the given index without using any built-in list methods. Parameters: lst (list): The list to insert the element into. index (int): The position at which to insert the element. element: The element to insert into the list. Returns: list: The modified list with the new element inserted. new_list = lst[:index] + [element] + lst[index:] return new_list"},{"question":"Develop a Python program that computes and returns the smallest odd value from a given list of integers. If the list does not contain any odd numbers, the function should return -1.","solution":"def smallest_odd_value(lst): Returns the smallest odd value in the list. If no odd values exist, returns -1. odds = [num for num in lst if num % 2 != 0] if not odds: return -1 # No odd numbers found return min(odds)"},{"question":"Given a sorted array \`nums\` of n integers and a target value, write a function to search the target in the array. If the target exists, return its index. If not, return -1. But with a twist, this time the array might contain duplicates. To make it more challenging, the array will have at most log(n) duplicates for any given number, and the function should still be able to achieve O(log(n)) runtime complexity. Can you design such a function?","solution":"def search(nums, target): Searches for a target value in a sorted array which may contain duplicates. Returns the index of the first occurrence of the target if it exists, otherwise returns -1. Assumes O(log(n)) runtime complexity. left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: # Ensure we find the first occurrence of the target if mid == 0 or nums[mid-1] != target: return mid right = mid - 1 elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Build an algorithm in Python to identify if a given input string is a valid binary number.","solution":"def is_valid_binary(binary_string): Checks whether the given input string is a valid binary number. Parameters: binary_string (str): The string to be checked Returns: bool: True if the input string is a valid binary number, otherwise False return all(char in '01' for char in binary_string)"},{"question":"Write a Python script which efficiently removes ip duplicates from a text file, also keeping track of the frequency of occurrence of each ip, and writes unique IPs along with their occurrence count into a new output file. The script should handle very large input files (around 100GB) that would not fit into memory.","solution":"def remove_ip_duplicates(input_file_path, output_file_path): Removes IP duplicates from a text file, keeps track of their occurrences, and writes unique IPs with their occurrence counts into an output file. :param input_file_path: Path to the input file containing IPs. :param output_file_path: Path to the output file to write unique IPs and their counts. ip_count = {} with open(input_file_path, 'r') as infile: for line in infile: ip = line.strip() if ip in ip_count: ip_count[ip] += 1 else: ip_count[ip] = 1 with open(output_file_path, 'w') as outfile: for ip, count in ip_count.items(): outfile.write(f\\"{ip} {count}n\\")"},{"question":"Given a complex file structure, write a Python function that not only lists all the files in a given directory recursively, but also identifies and counts different file extensions. Additionally, the function should provide the size of each file in bytes. Consider implementing this using os and collections Python module.","solution":"import os from collections import defaultdict def list_files_and_count_extensions(dir_path): Recursively lists all files in the given directory, counts different file extensions and provides the size of each file in bytes. Args: dir_path (str): Target directory path Returns: result (list): List of tuples where each tuple contains file path and file size in bytes. ext_count (dict): Dictionary where keys are file extensions and values are their counts. result = [] ext_count = defaultdict(int) for root, _, files in os.walk(dir_path): for file in files: file_path = os.path.join(root, file) file_ext = os.path.splitext(file)[1] file_size = os.path.getsize(file_path) result.append((file_path, file_size)) ext_count[file_ext] += 1 return result, dict(ext_count)"},{"question":"Modify the given code to implement an Insertion Sort algorithm that sorts the elements of the input array arr in non-decreasing order. The array arr may contain duplicate elements. The modified code should have a time complexity of O(n^2) and should not use any built-in sorting functions or libraries. Additionally, the algorithm should be modified to handle the case when there are multiple occurrences of an element in the array. If there are multiple occurrences of an element, they should appear in the sorted array in the same order as they appeared in the original array.","solution":"def insertion_sort(arr): Sorts the elements of the input array arr in non-decreasing order using the Insertion Sort algorithm. Handles duplicate elements such that they appear in the same order as in the original array. Time complexity is O(n^2). :param arr: List of elements to be sorted :return: Sorted list in non-decreasing order for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Your task is to read the provided list of integers and sort it in-place (without using additional space).","solution":"def in_place_sort(lst): Sorts the given list of integers in-place. lst.sort()"},{"question":"Given an array of integers, write a Python program to find the maximum product of two distinct elements in the array.","solution":"def max_product_of_two(arr): Returns the maximum product of two distinct elements in the array. if len(arr) < 2: raise ValueError(\\"Array should contain at least two distinct elements.\\") # Sort the array in descending order arr = sorted(arr, reverse=True) # Maximum product would be either product of two largest positive numbers or # product of two smallest negative numbers (if array has negative numbers). return max(arr[0] * arr[1], arr[-1] * arr[-2])"},{"question":"Write a python function to identify the indices of peaks in a 2D array where a peak is defined as an element that is greater than its adjacent elements (horizontally and vertically) and there are no adjacent equal elements.","solution":"def find_2d_peaks(matrix): Identify the indices of peaks in a 2D array where a peak is defined as an element that is greater than its adjacent elements (horizontally and vertically) and there are no adjacent equal elements. Args: matrix (list of list of int): The 2D array to find peaks in. Returns: list of tuples: List of indices that are peaks. if not matrix or not matrix[0]: return [] rows = len(matrix) cols = len(matrix[0]) peaks = [] for r in range(rows): for c in range(cols): current = matrix[r][c] # Check above if r > 0 and matrix[r-1][c] >= current: continue # Check below if r < rows - 1 and matrix[r+1][c] >= current: continue # Check left if c > 0 and matrix[r][c-1] >= current: continue # Check right if c < cols - 1 and matrix[r][c+1] >= current: continue peaks.append((r, c)) return peaks"},{"question":"Write a Python function that takes a URL as an argument, downloads a CSV file from the web, and loads it into a Pandas DataFrame. Ensure that you handle potential exceptions for URL errors and other exceptions that might occur during the download or data loading process. If the URL is valid and the data is loaded successfully, the function should return the DataFrame. If there's an error, the function should return a meaningful error message or raise a custom exception.","solution":"import pandas as pd import requests from io import StringIO def fetch_csv_to_dataframe(url): Downloads a CSV file from the given URL and loads it into a Pandas DataFrame. Args: url (str): The URL of the CSV file. Returns: DataFrame or str: Returns a pandas DataFrame if successful; otherwise, an error message. try: response = requests.get(url) response.raise_for_status() csv_data = StringIO(response.text) df = pd.read_csv(csv_data) return df except requests.exceptions.RequestException as e: return f\\"Request error: {e}\\" except pd.errors.EmptyDataError: return \\"No data: The CSV file is empty.\\" except Exception as e: return f\\"An error occurred: {e}\\""},{"question":"Build a Python module snippet that Determines Extreme Hand hygiene outside the home: Avoiding Touching Face for Engineer for Professionals. Incorporate if/else or switch/case statements to handle different cases based on the Bias. Ensure your control flow is well-documented with comments explaining your approach.","solution":"def determine_hygiene(bias): Determines the level of hand hygiene precautions one should take based on the bias. Parameters: bias (str): The professional environment bias which can be either 'high-risk', 'moderate-risk', or 'low-risk' Returns: str: Recommended hand hygiene precaution. if bias == 'high-risk': return \\"Excessive hand hygiene required. Avoid touching your face strictly. Use hand sanitizer frequently.\\" elif bias == 'moderate-risk': return \\"Moderate hand hygiene recommended. Minimize touching your face. Wash hands regularly.\\" elif bias == 'low-risk': return \\"Standard hand hygiene is sufficient. Follow basic hygiene guidelines like washing hands before meals.\\" else: return \\"Invalid bias provided. Please choose from 'high-risk', 'moderate-risk', or 'low-risk'.\\""},{"question":"Use a for loop to print all prime numbers from 1 to 100 in separate lines, and calculate the sum of these prime numbers. In addition, your program should also calculate and print the average of these prime numbers. Finally, modify your program to print the prime numbers in a pyramid pattern.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def prime_numbers_up_to_100(): Finds and processes prime numbers from 1 to 100. primes = [] for num in range(1, 101): if is_prime(num): primes.append(num) prime_sum = sum(primes) prime_avg = prime_sum / len(primes) if primes else 0 print(\\"Prime numbers from 1 to 100:\\") for prime in primes: print(prime) print(f\\"Sum of prime numbers: {prime_sum}\\") print(f\\"Average of prime numbers: {prime_avg}\\") print(\\"Prime numbers in pyramid pattern:\\") for i in range(len(primes)): for j in range(i+1): if j < len(primes): print(primes[j], end=\\" \\") print() return primes, prime_sum, prime_avg"},{"question":"Write a recursive function in Python that calculates the factorial of a number. Also, implement a check to verify the correctness of your function using a test case. Consider edge cases such as when the input is zero or negative.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. For negative integers, raises a ValueError. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Use the Bubble Sort method to sort the numerical values in descending order. Additionally, preserve the original index of the values before sorting by implementing a secondary flag, where the flag is set to true, if the corresponding numerical value is odd. The output should contain each value with its original index and after sorting include its new index.","solution":"def bubble_sort_desc_with_flags(arr): This function sorts a given list in descending order using bubble sort and returns the sorted list along with the original index and a flag indicating if the corresponding value is odd. Args: arr (list): List of numerical values Returns: list: A list of tuples, each containing the original value, its original index, a flag indicating if it's odd, and its new sorted index n = len(arr) # Create a list of tuples where each tuple contains # (value, original_index, is_odd_flag) arr_with_meta = [(arr[i], i, arr[i] % 2 != 0) for i in range(n)] # Perform Bubble Sort in descending order for i in range(n): for j in range(0, n-i-1): if arr_with_meta[j][0] < arr_with_meta[j+1][0]: arr_with_meta[j], arr_with_meta[j+1] = arr_with_meta[j+1], arr_with_meta[j] # Add new index information sorted_result = [(value, original_index, is_odd, new_index) for new_index, (value, original_index, is_odd) in enumerate(arr_with_meta)] return sorted_result"},{"question":"create a python algorithm that returns \\"Fizz\\" if the number is divisible by 3 and \\"Buzz\\" if the number is divisible by 5, else it will return the number itself.","solution":"def fizz_buzz(number): Returns \\"Fizz\\" if the number is divisible by 3, returns \\"Buzz\\" if the number is divisible by 5, else returns the number itself. if number % 3 == 0: return \\"Fizz\\" elif number % 5 == 0: return \\"Buzz\\" else: return number"},{"question":"Sort an array of integers in ascending order by implementing a Bubble Sort algorithm. However, you must modify the bubble sort algorithm so that it sorts the array in descending order instead of ascending order.","solution":"def bubble_sort_descending(arr): Sorts an array of integers in descending order using a bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Create a python module to calculate the total cost of an item given its price and quantity, however, the module should also handle cases where the price is given as a string instead of a number and convert it to a float before performing the calculation. Additionally, the module should also round the total cost to two decimal places and provide the option to apply a discount to the total cost.","solution":"def calculate_total_cost(price, quantity, discount=0): Calculate the total cost of an item given its price and quantity. Also applies a discount to the total cost if provided. Args: price (float or str): The price of the item. quantity (int): The quantity of the item. discount (float, optional): The discount to be applied on total cost. Defaults to 0. Returns: float: The total cost rounded to two decimal places. try: price = float(price) except ValueError: raise ValueError(\\"Price must be a numeric value or a string that can be converted to a float\\") total_cost = price * quantity if discount: total_cost -= total_cost * (discount / 100) return round(total_cost, 2)"},{"question":"Produce a texture atlas bake tool in python that could take diffuse, normal, specular, and roughness textures as input and bake them into a single texture atlas. It should also support packing the textures into the atlas using a supplied algorithm, with padding option to avoid bleed between adjacent textures.","solution":"from PIL import Image, ImageDraw def create_texture_atlas(textures, atlas_size, padding=2): Creates a texture atlas. Arguments: textures -- list of paths to texture images (diffuse, normal, specular, roughness) atlas_size -- the size of the output atlas (width, height) padding -- padding between textures to avoid bleed (default is 2) Returns: Image object of the atlas atlas = Image.new('RGBA', atlas_size) x_offset = y_offset = padding max_height_in_row = 0 for texture in textures: img = Image.open(texture).convert('RGBA') if x_offset + img.width + padding > atlas.size[0]: x_offset = padding y_offset += max_height_in_row + padding max_height_in_row = 0 if y_offset + img.height + padding > atlas.size[1]: raise ValueError('Texture exceeds atlas size.') atlas.paste(img, (x_offset, y_offset)) x_offset += img.width + padding max_height_in_row = max(max_height_in_row, img.height) return atlas # Example of usage: # textures = ['diffuse.png', 'normal.png', 'specular.png', 'roughness.png'] # atlas_size = (1024, 1024) # atlas = create_texture_atlas(textures, atlas_size) # atlas.save('texture_atlas.png')"},{"question":"Given two sorted lists, write a Python function to merge them in a sorted manner without using any built-in sorting functions.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. :param list1: First sorted list :param list2: Second sorted list :return: A single merged and sorted list merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Write a function to check whether a given word is a palindrome or not. Palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward. The function should ignore any spaces and punctuation marks, and should be case-insensitive.","solution":"import string def is_palindrome(word): Checks whether a given word is a palindrome or not. It ignores spaces, punctuation marks, and is case-insensitive. # Removing spaces and punctuation, and converting to lowercase cleaned_word = ''.join(char for char in word if char.isalnum()).lower() # Checking if the cleaned word is the same backwards and forwards return cleaned_word == cleaned_word[::-1]"},{"question":"Construct a function that takes a nested dictionary and returns a list of keys and values, where the values are converted to their corresponding data type. For example, for the input {\\"Name\\": \\"John\\", \\"Age\\": \\"45\\"}, the output should be [(\\"Name\\", str), (\\"Age\\", int)].","solution":"def convert_and_describe_dict(nested_dict): Takes a nested dictionary and returns a list of tuples where each tuple contains a key and the data type of its value after conversion. Parameters: nested_dict (dict): The input dictionary with nested structure Returns: List[Tuple[str, type]]: A list of tuples with key and corresponding value type result = [] for key, value in nested_dict.items(): if value.isdigit(): result.append((key, int)) elif value.replace('.', '', 1).isdigit() and value.count('.') < 2: result.append((key, float)) else: result.append((key, str)) return result"},{"question":"You are working on a space exploration project that involves analyzing the stability of a spacecraft's propulsion system. The stability of the system can be determined by solving a system of linear equations using matrix operations. You need to write a program that takes input data representing the system's parameters and uses matrix operations to analyze the system's stability.","solution":"import numpy as np def is_system_stable(coeff_matrix, result_vector): Determines if a system described by the matrix equation Ax = b is stable. The system is considered stable if it has a unique solution. Parameters: - coeff_matrix: 2D list or numpy array representing the coefficients of the equations (A). - result_vector: 1D list or numpy array representing the result vector (b). Returns: - bool: True if the system is stable (has a unique solution), False otherwise. A = np.array(coeff_matrix) b = np.array(result_vector) # Check if the matrix A is square if A.shape[0] != A.shape[1]: return False try: # Check if the matrix A is invertible np.linalg.inv(A) except np.linalg.LinAlgError: return False return True"},{"question":"Given a task to write a Python function that compares two lists of numbers to determine which one contains more positive integers. Additionally, if one list has more positive integers, your function should generate a new list with all positive integers squared from that specific list. If both lists contain an equal amount of positive numbers, return none.","solution":"def compare_and_square_positive_integers(list1, list2): Compares two lists of numbers to determine which one contains more positive integers. If one list has more positive integers, generate a new list with all positive integers squared from that specific list. If both lists contain an equal amount of positive numbers, return None. positive_list1 = [x for x in list1 if x > 0] positive_list2 = [x for x in list2 if x > 0] count1 = len(positive_list1) count2 = len(positive_list2) if count1 > count2: return [x**2 for x in positive_list1] elif count2 > count1: return [x**2 for x in positive_list2] else: return None"},{"question":"Write a Python function that calculates the area of a circle given its radius. Your code should include appropriate documentation and make use of a constant for the value of PI. Additionally, include a line of code that prevents the function from being executed when the file is imported as a module in other Python files.","solution":"import math def calculate_circle_area(radius): Calculates the area of a circle given its radius. Parameters: radius (float): The radius of the circle Returns: float: The area of the circle PI = math.pi if radius < 0: raise ValueError(\\"Radius cannot be negative\\") return PI * (radius ** 2) if __name__ == \\"__main__\\": radius_input = float(input(\\"Enter the radius of the circle: \\")) print(\\"The area of the circle is:\\", calculate_circle_area(radius_input))"},{"question":"Develop a Python function that creates a dictionary where keys are individual characters of a given string in upper-case (if the original character is a letter, convert it to upper-case, otherwise keep the original) and their respective values as the number of occurrences of each character in the string. The string can include letters and digits.","solution":"def char_occurrences(s): Creates a dictionary where keys are individual characters of a given string in upper-case (if the original character is a letter) and their values are the number of occurrences of each character in the string. result = {} for char in s: key = char.upper() if char.isalpha() else char if key in result: result[key] += 1 else: result[key] = 1 return result"},{"question":"Write a Python code to check if the given string contains only alphabets and has a length of exactly 5 characters. Additionally, the code should also check if the string consists of only lowercase alphabets and has at least one vowel in it.","solution":"def check_string_validity(s): Checks if the given string contains only alphabets, has a length of exactly 5 characters, consists of only lowercase alphabets, and has at least one vowel in it. Args: s (str): The string to be checked. Returns: bool: True if all conditions are met, False otherwise. if len(s) != 5: return False if not s.isalpha(): return False if not s.islower(): return False vowels = set('aeiou') if not any(char in vowels for char in s): return False return True"},{"question":"What would be a Python code equivalent to the Bash code that prints \\"Happy New Year!\\"? Additionally, implement a function that repeats the message \\"Happy New Year!\\" a user-inputted number of times, with each iteration's output on a new line.","solution":"def print_happy_new_year(): Prints \\"Happy New Year!\\" to the console. print(\\"Happy New Year!\\") def repeat_happy_new_year(times): Prints \\"Happy New Year!\\" a specified number of times. Parameters: times (int): The number of times to print the message. for _ in range(times): print(\\"Happy New Year!\\")"},{"question":"Check if a string has all unique characters using a Python program. Output \\"True\\" if the string has all unique characters, otherwise output \\"False\\". Additionally, the program should ignore any punctuation marks or spaces in the string. The program should also handle lowercase and uppercase characters as different characters. The input string will only contain alphanumeric characters, punctuation marks, and spaces.","solution":"def has_all_unique_characters(s): Checks if a string has all unique characters. Punctuation marks and spaces are ignored. Lowercase and uppercase characters are considered different. filtered_s = ''.join(filter(str.isalnum, s)) return len(set(filtered_s)) == len(filtered_s)"},{"question":"Create a function in Python that takes in a positive integer n as input and returns an array of size n, where the elements are in descending order from n to 1. Additionally, each element in the array must be a prime number.","solution":"def is_prime(num): Check if a given number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_desc_array(n): Returns an array of size n, where the elements are prime numbers in descending order. primes = [] current_num = 2 # Find primes until we have n primes in the list while len(primes) < n: if is_prime(current_num): primes.append(current_num) current_num += 1 return sorted(primes, reverse=True)"},{"question":"Given an array of n integers, write a function to find out the maximum subarray and its sum. However, you are not allowed to use dynamic programming, divide and conquer, or any other pre-built library or complex algorithms. Also, consider the edge cases such as all elements in the array being negative. Your solution should efficiently handle large arrays up to 10^6 elements.","solution":"def max_subarray_sum(arr): Finds the maximum subarray sum for a given array of integers. if not arr: return 0, [] n = len(arr) max_sum = float('-inf') current_sum = 0 start = end = s = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i if current_sum < 0: current_sum = 0 s = i + 1 return max_sum, arr[start:end+1]"},{"question":"Write a program in Python that converts a given grayscale image into a binary image using the Otsu's thresholding method. The program should accept the image file path as a command line argument and output the converted image in the same directory with the same name but with \\"_binary\\" appended before the file extension. The program should also display the computed threshold value. To achieve this, you can use the OpenCV library to perform the Otsu's thresholding method on the grayscale image. Additionally, the numpy and os libraries can be used for file path manipulation.","solution":"import cv2 import numpy as np import os import sys def convert_to_binary(image_path): Converts a given grayscale image to a binary image using Otsu's thresholding method. :param image_path: str, path to the grayscale image file :return: str, path to the saved binary image # Read the image in grayscale mode image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE) if image is None: raise FileNotFoundError(f\\"Image not found: {image_path}\\") # Apply Otsu's thresholding _, binary_image = cv2.threshold(image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU) # Display the threshold value threshold_value = _ print(f\\"Computed Otsu's threshold value: {threshold_value}\\") # Generate new image path with \\"_binary\\" before the file extension file_name, file_extension = os.path.splitext(image_path) binary_image_path = f\\"{file_name}_binary{file_extension}\\" # Save the binary image cv2.imwrite(binary_image_path, binary_image) return binary_image_path"},{"question":"What data structure is used for implementing recursion in Python?","solution":"def factorial(n): Returns the factorial of the number n. Uses recursion to calculate the factorial. if n == 0: return 1 return n * factorial(n - 1)"},{"question":"Given a 5-digit number, create a function to reverse its digits and return the reversed number as output. Additionally, the function should take only one argument as parameter, with no extraneous arguments needed. Can you also ensure that the function can handle negative numbers? Please make sure the function is able to correctly handle all possible input numbers within the integer data type limit, including numbers with leading zeros after the reversal of digits. What would be the optimal solution for this problem, assuming that the input number is an integer within the range of [-2^31, 2^31-1]?","solution":"def reverse_5_digit_number(number): Reverses the digits of a 5-digit integer, including handling for negative numbers. Parameters: number (int): The 5-digit integer to be reversed. Returns: int: The reversed integer. # Check if the number is negative is_negative = number < 0 # Convert to string and remove negation sign if negative number_str = str(abs(number)) # Reverse the string reversed_str = number_str[::-1] # Convert back to integer reversed_number = int(reversed_str) # Restore the negation if the original number was negative if is_negative: reversed_number = -reversed_number return reversed_number"},{"question":"Write a python function that takes in an attributed multigraph G=(V,E, A) in the form of networkX graph object as an input argument, and outputs true if it is a ring network, and false if it is not. An attributed multigraph can be defined as a graph with the additional property that each edge has an associated weight and the graph may contain multiple edges between two vertices. A ring network is a special type of network where every node is directly connected to exactly two other nodes, and there is only one cycle in the network. Additionally, the function should check that the graph is connected, has no self-loops, and has equal weights for parallel edges.","solution":"import networkx as nx def is_ring_network(G): Determines if the given graph G is a ring network. A ring network is defined as one where each node is directly connected to exactly two other nodes, and there is exactly one cycle in the network. Parameters: G (networkx.Graph): An attributed multigraph. Returns: bool: True if G is a ring network, False otherwise. # Check if the graph is connected if not nx.is_connected(G): return False # Check for self-loops for node in G.nodes(): if G.has_edge(node, node): return False # Check for multiple edges with different weights between the same nodes for u, v, data in G.edges(data=True): edges = G.get_edge_data(u, v) weights = set([d['weight'] for key, d in edges.items()]) if len(weights) > 1: return False # Check each node has exactly 2 neighbors degree_sequence = [degree for node, degree in G.degree()] if any(degree != 2 for degree in degree_sequence): return False # Check if there is exactly one cycle try: cycles = list(nx.find_cycle(G)) if len(cycles) != len(G.nodes()): return False except nx.NetworkXNoCycle: return False return True"},{"question":"Given an array of integers, write a recursive function to find the maximum element. Along with your solution, provide a situation where a recursive approach to solving this problem might not be optimal. Discuss possible issues with your recursive solution, such as time complexity and the possibility of a stack overflow, and propose alternative methods to handle those issues without changing the basic functionality of your code.","solution":"def find_max_recursive(arr, n=None): A recursive function to find the maximum element in the array. if n is None: n = len(arr) # If there's only one element, return that element if n == 1: return arr[0] # Recursively get the max of the remaining array max_of_rest = find_max_recursive(arr, n - 1) # Return the larger between the last element and the max of the rest return max(arr[n - 1], max_of_rest) # Explanation of non-optimal scenarios: # 1. Deep Recursion: If the array is very large, the recursion depth will be very high, # possibly causing a stack overflow. # 2. Time Complexity: The recursion approach here is O(n) time complexity, similar to iteration. # # Alternative approach: Iterative method to avoid deep recursion. # def find_max_iterative(arr): An iterative function to find the maximum element in the array. max_element = arr[0] for num in arr: if num > max_element: max_element = num return max_element"},{"question":"Can you write a lambda function in Python that calculates the exponentiation of a base number raised to a given power?","solution":"exp = lambda base, power: base ** power"},{"question":"Write me a python program that takes three inputs e namely; 'operations', 'value1' and 'value2'. Based on the 'operations'; which could be \\"add\\", \\"subtract\\", \\"multiply\\" or \\"divide\\"; the program should perform the required arithmetic operations on 'value1' and 'value2'. Ensure to hold exceptions for invalid operations and divide by zero errors.","solution":"def perform_operation(operation, value1, value2): Performs the specified operation ('add', 'subtract', 'multiply', 'divide') on the two values provided. Args: operation (str): The operation to perform ('add', 'subtract', 'multiply', 'divide'). value1 (float): The first value. value2 (float): The second value. Returns: float: The result of the operation. Raises: ValueError: If an invalid operation is provided. ZeroDivisionError: If a divide by zero operation is attempted. if operation == 'add': return value1 + value2 elif operation == 'subtract': return value1 - value2 elif operation == 'multiply': return value1 * value2 elif operation == 'divide': if value2 == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") return value1 / value2 else: raise ValueError(\\"Invalid operation provided.\\")"},{"question":"Solve the the following problem: Given two matrices A and B, write a function to add them and return the result.","solution":"def add_matrices(A, B): Adds two matrices A and B. Args: A: list of lists, where each sublist represents a row in matrix A. B: list of lists, where each sublist represents a row in matrix B. Returns: list of lists, representing the resulting matrix after addition. if not A or not B or len(A) != len(B) or len(A[0]) != len(B[0]): raise ValueError(\\"Matrices A and B must have the same dimensions\\") result = [] for i in range(len(A)): row = [] for j in range(len(A[0])): row.append(A[i][j] + B[i][j]) result.append(row) return result"},{"question":"Given a binary tree, write a recursive function to calculate the sum of all nodes in the tree. Additionally, determine and return the maximum depth of the tree. Your function should return a tuple with the first element as the sum of all nodes and the second element as the maximum depth.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sum_and_depth(root): Returns the sum of all nodes and the maximum depth of the binary tree. :param root: The root node of the binary tree. :return: A tuple (sum of all nodes, maximum depth) if root is None: return (0, 0) left_sum, left_depth = sum_and_depth(root.left) right_sum, right_depth = sum_and_depth(root.right) current_sum = root.value + left_sum + right_sum current_depth = 1 + max(left_depth, right_depth) return (current_sum, current_depth)"},{"question":"Given the following erroneous倘若that code segment, identify the errors and correct them so a deep copy of a complex multidimensional array is created. Then, implement a function to compare the original array and the copied array for equal values and structure. Keep in mind that the comparison should also cover the deep elements of the multidimensional arrays.","solution":"import copy def deep_copy_array(original_array): Creates a deep copy of a complex multidimensional array. return copy.deepcopy(original_array) def arrays_equal(array1, array2): Compares two multidimensional arrays for equal values and structure. if type(array1) != type(array2): return False if isinstance(array1, (list, tuple)): if len(array1) != len(array2): return False return all(arrays_equal(sub1, sub2) for sub1, sub2 in zip(array1, array2)) return array1 == array2"},{"question":"In Python, define a function that takes two arguments and returns the maximum of the two. However, you are not allowed to use the built-in max() function or any other sorting functions. Additionally, you cannot use any conditional statements like if-else or ternary operators.","solution":"def maximum(a, b): Returns the maximum of a and b without using conditional statements or built-in functions like max(). return (a + b + abs(a - b)) / 2"},{"question":"Using the list as an input, write code to generate a comma-separated string of the list's elements. However, you are not allowed to use the built-in string join method or any string manipulation functions. The code should be implemented using only loop structures. Additionally, the output string should not contain any leading or trailing whitespace characters.","solution":"def list_to_comma_separated_string(input_list): Converts a list to a comma-separated string using loop structures only. Parameters: input_list (list): The list of items to be converted. Returns: str: A comma-separated string of the list's elements. if not input_list: return \\"\\" result = \\"\\" for i in range(len(input_list)): if i == 0: result += str(input_list[i]) else: result += \\",\\" + str(input_list[i]) return result"},{"question":"Given several matrices, write a program to rotate each of them by a given angle (90, 180, 270 or 360 degrees) in the clockwise direction. The rotation should be conducted in place if the degree is 90, 180, or 270. For all other degrees, return a new rotated array. Each matrix will have content in the form of integer values.","solution":"def rotate_matrix(matrix, angle): Rotates the given matrix by the specified angle in the clockwise direction. Parameters: matrix (list of list of int): The matrix to be rotated. angle (int): The angle by which to rotate the matrix (90, 180, 270, 360). Returns: list of list of int: The rotated matrix. def rotate_90(mat): return [list(reversed(col)) for col in zip(*mat)] def rotate_180(mat): return [row[::-1] for row in mat[::-1]] def rotate_270(mat): return [list(col) for col in zip(*mat)][::-1] if angle == 90: return rotate_90(matrix) elif angle == 180: return rotate_180(matrix) elif angle == 270: return rotate_270(matrix) elif angle == 360: return [row[:] for row in matrix] else: raise ValueError(\\"Angle must be one of the following values: 90, 180, 270, 360\\")"},{"question":"Write a Python function that takes a list of integers and returns a tuple containing the largest and smallest integers in the list. If the list is empty, return an empty tuple.","solution":"def largest_and_smallest(numbers): Returns a tuple containing the largest and smallest integers in the numbers list. If the list is empty, return an empty tuple. if not numbers: return () return (max(numbers), min(numbers))"},{"question":"Reverse the order of the elements in a linked list using only recursion. Additionally, the algorithm should have a space complexity of O(1), meaning it should not use any extra data structures. The implementation should be done in a language that does not support tail recursion optimization.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_list(head): Reverses the linked list using recursion. :param head: ListNode, the head of the linked list :return: ListNode, the new head of the reversed linked list if head is None or head.next is None: return head new_head = reverse_list(head.next) head.next.next = head head.next = None return new_head"},{"question":"Write a function that takes two strings as parameters and returns a new string that has the characters of the second string appended to the first string. However, you are not allowed to use any built-in string concatenation methods or operators such as \\"+\\" or the string formatting operator \\"%s\\". Instead, you must manipulate the strings at the character level using loops and/or recursion. Additionally, your solution should have a time complexity of O(n), where n is the length of the resulting string. You should also consider edge cases, such as when one or both of the input strings are empty, and ensure that your function handles them correctly. To further increase the difficulty, in addition to the above requirements, you must also ensure that the resulting string does not contain any duplicate characters.","solution":"def concat_unique_chars(str1, str2): Concatenates str2 at the end of str1 while ensuring no duplicate characters and without using any built-in concatenation methods or operators. # Create a set to track unique characters unique_char_set = set() result_list = [] # Iterate over the first string and add unique chars to the result list for char in str1: if char not in unique_char_set: unique_char_set.add(char) result_list.append(char) # Iterate over the second string and add unique chars to the result list for char in str2: if char not in unique_char_set: unique_char_set.add(char) result_list.append(char) # Convert the result list back to a string result_str = '' for char in result_list: result_str += char return result_str"},{"question":"Write Python code to not only find the second smallest number in a given list, but also identify its index position, without using built-in Python functions for sorting or finding minimum. Also, the solution should handle a list with repeated elements gracefully, meaning it should be able to return the correct second smallest number even if the smallest number is repeated multiple times.","solution":"def find_second_smallest(arr): Finds the second smallest number in a list and its index. if len(arr) < 2: return None, None first_min = second_min = float('inf') first_min_index = second_min_index = -1 for i, num in enumerate(arr): if num < first_min: second_min = first_min second_min_index = first_min_index first_min = num first_min_index = i elif first_min < num < second_min: second_min = num second_min_index = i if second_min == float('inf'): return None, None return second_min, second_min_index"},{"question":"Devise a dictionary in Python where the keys represent unique words found in three given strings and the values signify the total number of occurrences of each word across all the strings. Consider word case-sensitivity and punctuation while counting occurrences.","solution":"import string def count_word_occurrences(*args): Given multiple strings, returns a dictionary with each unique word as keys and the total number of occurrences of each word across all strings as values. word_count = {} for text in args: # Normalize the text to remove punctuation and convert it to lowercase text = text.translate(str.maketrans('', '', string.punctuation)).lower() words = text.split() for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count"},{"question":"I want to write a Python program that calculates the \\"most similar\\" two words based on the Jaccard Similarity Index of their characters. To achieve this, I'll also need to create a class and functions to facilitate this computation. Could you provide guidance on how to implement this program effectively?","solution":"from typing import List, Tuple class JaccardSimilarity: @staticmethod def compute_jaccard_index(word1: str, word2: str) -> float: set1 = set(word1) set2 = set(word2) intersection = set1.intersection(set2) union = set1.union(set2) if not union: return 0.0 return len(intersection) / len(union) def most_similar_words(self, words: List[str]) -> Tuple[str, str]: if len(words) < 2: raise ValueError(\\"The list must contain at least two words.\\") max_index = 0 most_similar_pair = (words[0], words[1]) for i in range(len(words)): for j in range(i + 1, len(words)): jaccard_index = self.compute_jaccard_index(words[i], words[j]) if jaccard_index > max_index: max_index = jaccard_index most_similar_pair = (words[i], words[j]) return most_similar_pair"},{"question":"Write a Python program that performs an in-place quick sort on an array of integers. The program should use a non-recursive implementation of the quicksort algorithm using a stack to manage the subarray indices, and it should handle dublicates values well. Additionally, include a method to measure the time taken to sort the array and print it.","solution":"import time def quick_sort(arr): Performs an in-place quick sort on the provided array of integers using a non-recursive implementation. if len(arr) <= 1: return arr # Create a stack for storing subarray indices stack = [(0, len(arr) - 1)] # Loop until the stack is empty while stack: start, end = stack.pop() if start >= end: continue # Partition the array and get the pivot index pivot_index = partition(arr, start, end) # Push the left and right subarray indices to the stack stack.append((start, pivot_index - 1)) stack.append((pivot_index + 1, end)) return arr def partition(arr, start, end): Partition the array into two parts and return the pivot index. pivot = arr[end] i = start - 1 for j in range(start, end): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[end] = arr[end], arr[i + 1] return i + 1 def timed_quick_sort(arr): Sorts the array using quick sort and prints the time taken to sort the array. start_time = time.time() quick_sort(arr) end_time = time.time() print(f\\"Time taken to sort the array: {end_time - start_time:.6f} seconds\\") return arr"},{"question":"How can I design and develop a passwordRESET system for an existing user database in a Web application using Python? I want the system to allow users to request a password reset, send a confirmation link to their verified email, and enable them to set a new password securely.","solution":"import hashlib import secrets import smtplib from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart from urllib.parse import urlparse, parse_qs # Mock user database user_db = { 'user1@example.com': { 'password': 'hashed_password1', 'reset_token': None, }, 'user2@example.com': { 'password': 'hashed_password2', 'reset_token': None, } } class PasswordResetSystem: @staticmethod def send_email(to_email, subject, body): msg = MIMEMultipart() msg['From'] = 'no-reply@example.com' msg['To'] = to_email msg['Subject'] = subject msg.attach(MIMEText(body, 'plain')) # Send the message via SMTP (this is a mock) print(f\\"Sending email to {to_email} with subject '{subject}' and body '{body}'\\") def request_password_reset(self, email): if email in user_db: # Generate a unique reset token token = secrets.token_urlsafe(16) user_db[email]['reset_token'] = token # Construct password reset link reset_link = f\\"https://example.com/reset-password?email={email}&token={token}\\" # Send email with reset link subject = \\"Password Reset Request\\" body = f\\"Click the following link to reset your password: {reset_link}\\" self.send_email(email, subject, body) def reset_password(self, email, token, new_password): if email in user_db and user_db[email]['reset_token'] == token: hashed_password = hashlib.sha256(new_password.encode()).hexdigest() user_db[email]['password'] = hashed_password user_db[email]['reset_token'] = None # Invalidate the token return True return False # Example usage password_reset_system = PasswordResetSystem() # Request password reset password_reset_system.request_password_reset(\\"user1@example.com\\") # Reset password result = password_reset_system.reset_password(\\"user1@example.com\\", user_db[\\"user1@example.com\\"]['reset_token'], \\"new_password\\") print(\\"Password reset successful\\" if result else \\"Password reset failed\\")"},{"question":"Write a Python program to find out the number of days in a month specified by the user. Your program needs to consider leap years when calculating the number of days in February. While you could use built in calendars, it is expected that you handle this requirement manually, focusing on logic and date understanding rather than library reliance. As an enhancement, the program should also elegantly handle any invalid or erroneous input from the user.","solution":"def days_in_month(year, month): Returns the number of days in a given month of a specified year. if month < 1 or month > 12: raise ValueError(\\"Month must be between 1 and 12\\") if year < 1: raise ValueError(\\"Year must be a positive integer\\") # Days in each month from January to December month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Check for leap year if month == 2: if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 29 else: return 28 return month_days[month - 1]"},{"question":"Given a Python program with an incorrect implementation of the Bubble Sort algorithm, identify the error and correct it. Also, enhance the sorting algorithm to sort in descending order instead of ascending order.","solution":"def bubble_sort_descending(arr): Performs Bubble Sort on the given list in descending order. Parameters: arr (list): List of elements to be sorted. Returns: list: List sorted in descending order. n = len(arr) for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse through 0 to n-i-1 # Swap if the element found is less than the next element if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a Python program to generate random alphanumeric strings of length n. The program should also include functionality to check if the generated string is palindrome. Additionally, provide a piece of erroneous code for a function that is supposed to create an alphanumeric string but is returning incorrect output and explain what is wrong with the code.","solution":"import random import string def generate_random_alphanumeric_string(n): Generates a random alphanumeric string of length n. chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for _ in range(n)) def is_palindrome(s): Checks if the string s is a palindrome. return s == s[::-1] # Erroneous code example def erroneous_generate_string(): This function is supposed to generate an alphanumeric string, but it returns a string of the word 'alphanumeric' repeated. return 'alphanumeric' * 3"},{"question":"Please write a function in Python that takes a list of book titles and their cover images as URLs, and returns a dictionary where the keys are the book titles (as strings) and the values are the corresponding cover image URLs (as strings). If a title appears in the list more than once, associate it with the last occurring cover image URL.","solution":"def map_titles_to_covers(books): Returns a dictionary mapping book titles to cover image URLs. Args: books: list of tuples, where each tuple contains a title (str) and a cover image URL (str). Returns: dict: a dictionary where the keys are book titles and the values are cover image URLs. title_to_cover = {} for title, cover_url in books: title_to_cover[title] = cover_url return title_to_cover"},{"question":"Create a Python program to generate a random password using ASCII characters. The password should contain upper and lower case letters, numbers, and special characters.","solution":"import random import string def generate_random_password(length=12): Generates a random password containing upper and lower case letters, numbers, and special characters. Args: length (int): Length of the password to generate. Default is 12. Returns: str: Randomly generated password. # Define character sets upper_case = string.ascii_uppercase lower_case = string.ascii_lowercase digits = string.digits special_chars = string.punctuation # Ensure the password has at least one of each type of character mandatory_chars = [ random.choice(upper_case), random.choice(lower_case), random.choice(digits), random.choice(special_chars) ] # Fill the rest of the password length with random choices from all sets all_chars = upper_case + lower_case + digits + special_chars remaining_length = length - len(mandatory_chars) if remaining_length > 0: mandatory_chars.extend(random.choices(all_chars, k=remaining_length)) # Shuffle the list to ensure randomness and convert to a string random.shuffle(mandatory_chars) password = ''.join(mandatory_chars) return password"},{"question":"Create a function to generate all possible strings of length n using the characters 0, 1, and ?","solution":"def generate_strings(n): Generates all possible strings of length n using the characters '0', '1', and '?'. if n == 0: return [''] shorter_strings = generate_strings(n - 1) result = [] for string in shorter_strings: for char in '01?': result.append(string + char) return result"},{"question":"Write a Python function that takes a string and prints out the count of vowels in the string, while ignoring case sensitivity.","solution":"def count_vowels(input_string): Returns the count of vowels in the input string, ignoring case sensitivity. vowels = 'aeiou' input_string = input_string.lower() return sum(1 for char in input_string if char in vowels)"},{"question":"Develop a programming function that will yield an unpredictable, arbitrary number within a specified range, including both the minimum and maximum values. The range should be adjustable based on user input with the potential to generate a number anywhere within a span of 1 to 1,000,000. This function should also include error handling for situations where the input parameters are outside of the allowed range or not numeric.","solution":"import random def generate_random_number(min_val, max_val): Generate a random number within the given range [min_val, max_val]. :param min_val: Minimum value of the range (inclusive). :param max_val: Maximum value of the range (inclusive). :return: A random number within the specified range. :raises ValueError: If input parameters are not within the 1 to 1,000,000 range or are not numeric. # Validate that inputs are integers and within the allowable range if not isinstance(min_val, int) or not isinstance(max_val, int): raise ValueError(\\"Both min_val and max_val must be integers.\\") if min_val < 1 or max_val > 1_000_000: raise ValueError(\\"min_val and max_val must be within the range 1 to 1,000,000.\\") if min_val > max_val: raise ValueError(\\"min_val cannot be greater than max_val.\\") return random.randint(min_val, max_val)"},{"question":"Implement a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of another word or phrase. The function should take two strings as input and return True if the strings are anagrams, and False otherwise.","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams of each other. Args: str1 (str): First string. str2 (str): Second string. Returns: bool: True if the strings are anagrams, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Input an array and remove all duplicates in place, meaning you cannot use additional data structures. The given array can be any numerical array, but you have to ensure the order of the remaining elements is preserved. Also, provide a piece of erroneous code as a reference.","solution":"def remove_duplicates(nums): Removes duplicates from the array in place and returns the updated length of the array. if not nums: return 0 write_index = 1 # Initialize writer index to the second position for i in range(1, len(nums)): if nums[i] != nums[i - 1]: # Compare current element with the previous one nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Given an array of integers, write a method to return the indices of the three numbers such that they add up to a specific target. However, the time complexity should be O(n^2), where n is the length of the input array. Additionally, you are not allowed to use any additional data structures or sorting algorithms.","solution":"def three_sum_indices(nums, target): Returns the indices of the three numbers in the array that add up to the given target. :param nums: List of integers :param target: Target sum :return: A tuple of three indices n = len(nums) for i in range(n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): if nums[i] + nums[j] + nums[k] == target: return (i, j, k) return None"},{"question":"Create a blockchain transaction payload for transferring 5 bitcoins from a sender to a recipient.","solution":"def create_transaction_payload(sender, recipient, amount): Create a blockchain transaction payload for transferring bitcoins. :param str sender: The sender's address :param str recipient: The recipient's address :param float amount: The amount of bitcoins to be transferred :return: a dictionary representing the transaction payload :rtype: dict return { \\"sender\\": sender, \\"recipient\\": recipient, \\"amount\\": amount } # Example usage: transaction_payload = create_transaction_payload(\\"sender_address\\", \\"recipient_address\\", 5) print(transaction_payload)"},{"question":"Reflect on the following code and propose an enhanced version of it by modifying the given function named hello(). The current function just prints 'Hello World!' and you need to redefine it so that it's more functional. Your version should take a string as an input and print a message including that string along with 'Hello'. For instance, if provided with 'John', it should print 'Hello John","solution":"def hello(name): Prints 'Hello' followed by the input name. Parameters: name (str): The name to be included in the hello message. print(f\\"Hello {name}!\\")"},{"question":"Write a Python function that takes in a string as input and returns a new string with all vowels removed. The function should be able to handle both uppercase and lowercase letters. It should also have a time complexity of O(n) and a space complexity of O(n), where n is the length of the input string.","solution":"def remove_vowels(input_string): Returns a new string with all vowels removed from the input string. vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} return ''.join([char for char in input_string if char not in vowels])"},{"question":"Write a Python 3 function called \`allTailsFlat\` that takes in a list of positive integers \`coins\` and returns an integer representing the minimum number of flips required to make all coins' tails facing up. Each coin is represented by its value, and initially, one of its sides (heads or tails) is facing up. A flip reverses the orientation of a coin. Assume \`coins\` is not empty and contains at most 200 elements.","solution":"def allTailsFlat(coins): Returns the minimum number of flips required to make all coins' tails facing up. # Assume 1 represents heads and 0 represents tails. flips_to_tails = 0 for coin in coins: if coin == 1: # Coin is heads up flips_to_tails += 1 return flips_to_tails"},{"question":"Write a python program for vigenere cipher encryption with user input for the plain text and keyword. The program should also include a function to decrypt the encrypted text. The program should ignore case sensitivity and non-alphabet characters.","solution":"def vigenere_encrypt(plain_text, keyword): Encrypts the plain_text using the Vigenere cipher with the provided keyword. plain_text = ''.join(filter(str.isalpha, plain_text)).upper() keyword = keyword.upper() encrypted_text = [] keyword_repeated = (keyword * (len(plain_text) // len(keyword) + 1))[:len(plain_text)] for p_char, k_char in zip(plain_text, keyword_repeated): encrypted_char = chr(((ord(p_char) - ord('A') + ord(k_char) - ord('A')) % 26) + ord('A')) encrypted_text.append(encrypted_char) return ''.join(encrypted_text) def vigenere_decrypt(encrypted_text, keyword): Decrypts the encrypted_text using the Vigenere cipher with the provided keyword. encrypted_text = ''.join(filter(str.isalpha, encrypted_text)).upper() keyword = keyword.upper() decrypted_text = [] keyword_repeated = (keyword * (len(encrypted_text) // len(keyword) + 1))[:len(encrypted_text)] for e_char, k_char in zip(encrypted_text, keyword_repeated): decrypted_char = chr(((ord(e_char) - ord('A') - (ord(k_char) - ord('A'))) % 26) + ord('A')) decrypted_text.append(decrypted_char) return ''.join(decrypted_text)"},{"question":"Write a simple program to find the left and right most index of a target value in a given sorted array. If the target does not exist in the array, return [-1, -1].","solution":"def search_range(nums, target): Returns the left and right most index of the target value in a sorted array. If the target does not exist in the array, returns [-1, -1]. def find_left_index(arr, tgt): left, right = 0, len(arr) - 1 left_idx = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == tgt: left_idx = mid right = mid - 1 elif arr[mid] < tgt: left = mid + 1 else: right = mid - 1 return left_idx def find_right_index(arr, tgt): left, right = 0, len(arr) - 1 right_idx = -1 while left <= right: mid = (left + right) // 2 if arr[mid] == tgt: right_idx = mid left = mid + 1 elif arr[mid] < tgt: left = mid + 1 else: right = mid - 1 return right_idx left_index = find_left_index(nums, target) right_index = find_right_index(nums, target) return [left_index, right_index]"},{"question":"Create a loop that takes a given number as input and outputs its prime factors, but with the additional requirement that the loop must use a recursive function to find the prime factors.","solution":"def prime_factors(n, factor=2): Returns a list of prime factors of a given number n using recursive method. if n <= 1: return [] if n % factor == 0: return [factor] + prime_factors(n // factor, factor) else: return prime_factors(n, factor + 1)"},{"question":"Develop a python code that can take five parameters, all unknown integers, and return the maximum among them without using prebuilt Python functions like \\"max\\".","solution":"def find_maximum(a, b, c, d, e): Returns the maximum value among five integers. max_value = a if b > max_value: max_value = b if c > max_value: max_value = c if d > max_value: max_value = d if e > max_value: max_value = e return max_value"},{"question":"In Python, how would you implement a function that prints the index of the first occurrence of a specific element in a given list? Specifically, the list consists of integers and the element to search for is provided as an argument to the function. If the element is not found, the function should print \\"Not found\\". For instance, given the list [3, 5, 2, 8, 6] and the element 6, the function should print the index of 6, which is 4. If the element 9 is searched and not found, the function should print \\"Not found\\". Can you write the code that fulfills these requirements and demonstrate its correctness by providing a few test cases? If the element is found multiple times, the function should only print the index of the first occurrence.","solution":"def find_first_occurrence(lst, element): Prints the index of the first occurrence of the specified element in the list. If the element is not found, it prints \\"Not found\\". try: index = lst.index(element) print(index) except ValueError: print(\\"Not found\\")"},{"question":"Write a function in Python that receives a list of integers as a parameter. This function should iterate through the list, eliminate all odd numbers, double all even numbers present in the list, and return the resulting list sorted in ascending order. The function should be written in such a manner that it leverages as much built-in functionality as possible.","solution":"def process_list(lst): Processes the given list by eliminating all odd numbers, doubling all even numbers, and returning the resulting list sorted in ascending order. return sorted([x * 2 for x in lst if x % 2 == 0])"},{"question":"Create a function using Python programming language that accepts two numerical arguments in the form of strings and performs an addition operation on them. However, the function should also be able to identify if the given arguments are valid numeric strings or not (for instance, strings that represent decimal numbers or integers). You will be given a piece of faulty code; identify and fix the errors in it to create a working function.","solution":"def add_string_numbers(a, b): Adds two numeric strings and returns the result as a string. If any of the inputs are not valid numeric strings, returns \\"Invalid input\\". try: num1 = float(a.strip()) num2 = float(b.strip()) return str(num1 + num2) except ValueError: return \\"Invalid input\\""},{"question":"Given a list of integers, create a program that finds and prints the first unique integer in the list. If there is no unique integer, print -1.","solution":"def first_unique_integer(numbers): Returns the first unique integer in the list. If there is no unique integer, returns -1. count_dict = {} # Count the occurrences of each number for num in numbers: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 # Find the first unique number for num in numbers: if count_dict[num] == 1: return num return -1"},{"question":"Given a positive integer n, write a recursive function to compute the n-th number in the Fibonacci sequence. As a twist, implement the function without using any loops or if-conditional statements for your recursion while still ensuring optimal performance.","solution":"def fibonacci(n, a=0, b=1): Returns the n-th Fibonacci number. Arguments: n -- the position in the Fibonacci sequence a -- the (n-1)-th Fibonacci number b -- the n-th Fibonacci number Returns: int -- the n-th Fibonacci number return a if n == 0 else fibonacci(n-1, b, a+b)"},{"question":"Construct an if-statement to check whether the given element is present in a sorted array or not. The array is guaranteed to be sorted in ascending order. The time complexity of the solution should be O(log n), where n is the size of the array. Additionally, you are not allowed to use the built-in binary search function or any other existing search algorithm. You must implement your own binary search-like algorithm.","solution":"def binary_search(arr, x): Checks if x is present in the sorted array arr using binary search. Parameters: arr (list): A sorted list of elements x (any): The element to be searched Returns: bool: True if x is present in arr, False otherwise left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == x: return True elif arr[mid] < x: left = mid + 1 else: right = mid - 1 return False"},{"question":"Create a program in a language of your choice that solves the FizzBuzz problem and additionally, the program should be able to handle ranges up to 10,000. It should also include proper error handling and optimize for performance to avoid lag or delays.","solution":"def fizzbuzz(n): Generates a list of FizzBuzz values for numbers from 1 to n. Args: n (int): The upper range (inclusive) for the FizzBuzz calculation. Returns: list: A list of FizzBuzz results. if not isinstance(n, int) or n <= 0: raise ValueError(\\"Input must be a positive integer\\") result = [] for i in range(1, n + 1): if i % 15 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Given a list of positive integers, how can I create a Python function that returns a new list where all consecutive integers are removed?","solution":"def remove_consecutive_duplicates(lst): Returns a list where all consecutive duplicate integers are removed. if not lst: return [] result = [lst[0]] for num in lst[1:]: if num != result[-1]: result.append(num) return result"},{"question":"Create an intricate Python program which, on receiving a user input in the form of a decimal number, performs a conversion, hinting at its binary equivalent as a string and complementarily, its hexadecimal equivalence as a string of characters. For incrementally validating the solution, ensure to use a mechanism that asserts correctness through an automatic checking function.","solution":"def convert_number(number): Converts a decimal number to its binary and hexadecimal equivalents as strings. :param number: Decimal number to be converted. :type number: int :return: A dictionary containing the binary and hexadecimal equivalent strings. :rtype: dict if not isinstance(number, int): raise ValueError(\\"Input should be an integer\\") binary_equivalent = bin(number)[2:] hexadecimal_equivalent = hex(number)[2:] return { \\"binary\\": binary_equivalent, \\"hexadecimal\\": hexadecimal_equivalent }"},{"question":"Draft a Python subroutine aimed at reorganizing the specified dictionary object 'my_dict' = {\\"Jerry\\": 10, \\"Marcus\\": 3, \\"Hanna\\": 5} based on the integer values, with the highest integer values appearing first.","solution":"def sort_dict_by_values(my_dict): Sort the given dictionary by its values in descending order. Parameters: my_dict (dict): The dictionary to be sorted. Returns: dict: A new dictionary sorted by the values in descending order. sorted_tuples = sorted(my_dict.items(), key=lambda item: item[1], reverse=True) return dict(sorted_tuples)"},{"question":"Given the string s = \\"Hello world!\\", create a function that checks if a given string is a palindrome (ignoring spaces, punctuation and capitalization), and return True if it is, False otherwise. Implement your function and test it with s.","solution":"def is_palindrome(s): Checks if the given string is a palindrome ignoring spaces, punctuation, and capitalization. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove spaces, punctuation, and convert to lower case cleaned_s = ''.join(char.lower() for char in s if char.isalnum()) # Check if cleaned string is equal to its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"Generate a code snippet for a function to print out an array of numbers in reverse order?","solution":"def reverse_array(arr): Returns the array in reverse order. Parameters: arr (list): List of numbers. Returns: list: New list with elements in reverse order. return arr[::-1]"},{"question":"Design a Python function snippet to Transform Low Handling personal items: Keeping Personal Items Clean for Analysis for Beginners. Implement if/else or switch/case statements to handle different conditions related to the Consent. Provide detailed comments explaining your control flow and the reasoning behind each decision. Here is a python function implementation which implements if else statement to transform low handling personal items based upon user consent.","solution":"def handle_personal_items(consent, item): Transforms handling of personal items based on user's consent. Parameters: consent (str): User's consent status. Can be 'granted', 'denied', or 'pending'. item (str): Personal item to handle. Returns: str: Message indicating the result of the handling procedure. if consent == 'granted': # Case where user has granted consent # Proceed with cleaning the item: cleaned_item = f\\"{item.capitalize()} cleaned successfully.\\" return f\\"Consent granted. {cleaned_item}\\" elif consent == 'denied': # Case where user has denied consent # Do not handle the item and notify the user: return f\\"Consent denied. {item.capitalize()} handling skipped.\\" elif consent == 'pending': # Case where user's consent is pending # Notify the user that consent is required: return \\"Consent is pending. Please provide consent to clean the item.\\" else: # Invalid consent status # Notify the user of the invalid input: return \\"Invalid consent status. Please provide a valid consent status.\\""},{"question":"Write a recursive function to sort a list of numbers in descending order. Your function should not use any built-in sorting functions.","solution":"def recursive_sort_descending(arr): Recursively sorts the input array of numbers in descending order. if len(arr) <= 1: return arr pivot = arr[0] greater_than_pivot = [x for x in arr[1:] if x >= pivot] less_than_pivot = [x for x in arr[1:] if x < pivot] return recursive_sort_descending(greater_than_pivot) + [pivot] + recursive_sort_descending(less_than_pivot)"},{"question":"Write a Python code that extracts the email of the users from the given list of dictionaries. The dictionary consists of the key-value pairs of the user's name, age, and email. The function should return a list of emails, but there shouldn't be any duplicates, meaning if an email already is added to the list, it should not be added again. Furthermore, add a functionality that sorts the list of emails alphabetically before returning.","solution":"def extract_emails(users): Extracts and returns a list of unique emails sorted alphabetically from the given list of user dictionaries. Parameters: users (list of dict): A list of dictionaries where each dictionary contains user details ('name', 'age', 'email') Returns: list: A list of unique and alphabetically sorted emails. emails = {user['email'] for user in users} return sorted(emails)"},{"question":"Reverse a string in place, but without using any additional data structures or built-in functions. The string should be reversed in groups of 3 characters, and the characters within each group should be reversed as well. The input string will always contain a multiple of 3 characters. Additionally, the program should have a time complexity of O(n) and a space complexity of O(1).","solution":"def reverse_string_in_groups_of_three(s): Reverses a string in place in groups of 3 characters, and reverses the characters within each group. The input string is always a multiple of 3 characters. # Convert the string to a list of characters char_list = list(s) # Iterate over the string in steps of 3 for i in range(0, len(char_list), 3): # Reverse the characters in groups of 3 char_list[i], char_list[i + 1], char_list[i + 2] = char_list[i + 2], char_list[i + 1], char_list[i] # Convert the character list back to a string return ''.join(char_list)"},{"question":"Create a linked list and add the elements 1, 2, 3 to it. Also, add a method that searches an element in the list and returns its index. If the element is not found, return -1. Additionally, impose a restriction on not using in-built or external libraries. Here is a Python solution where we create a linked list with a Node class and a LinkedList class. The method 'search' is added in LinkedList class to search an element and return its index.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, data): new_node = Node(data) if not self.head: self.head = new_node return last_node = self.head while last_node.next: last_node = last_node.next last_node.next = new_node def search(self, data): current_node = self.head index = 0 while current_node: if current_node.data == data: return index current_node = current_node.next index += 1 return -1 # Create a linked list and add the elements 1, 2, 3 linked_list = LinkedList() linked_list.append(1) linked_list.append(2) linked_list.append(3)"},{"question":"Build a decision tree to classify emails into spam and non-spam using Python","solution":"from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import classification_report, accuracy_score def classify_emails(emails, labels): Classifies emails into spam and non-spam using a Decision Tree classifier. :param emails: List of email texts :param labels: List of labels (1 for spam, 0 for not spam) :return: Trained Decision Tree classifier, accuracy on test set # Convert the text data to numerical data vectorizer = CountVectorizer() X = vectorizer.fit_transform(emails) # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=42) # Create and train the Decision Tree Classifier classifier = DecisionTreeClassifier() classifier.fit(X_train, y_train) # Evaluate the classifier y_pred = classifier.predict(X_test) accuracy = accuracy_score(y_test, y_pred) report = classification_report(y_test, y_pred) print(\\"Classification Report:n\\", report) return classifier, accuracy"},{"question":"Write a code interpretation of the sentence: \\"If the input x is less than 10 and y is bigger than 20, the output z should be True\\". Additionally, implement this in a function that can handle a list of tuples each containing (x, y) pairs and return a list of corresponding Boolean values.","solution":"def evaluate_conditions(pairs): Evaluates a list of (x, y) pairs and returns a list of boolean values indicating if x < 10 and y > 20. :param pairs: List of tuples, where each tuple contains two integers (x, y) :return: List of boolean values result = [] for x, y in pairs: result.append(x < 10 and y > 20) return result"},{"question":"Develop a Python program to generate a list with numbers in range 3 to 12. The program should only include odd numbers in the list, and the solution should be implemented using a recursive function.","solution":"def generate_odd_numbers(start, end): Recursively generate a list of odd numbers from start to end (inclusive). Assumes start and end are both integers and start <= end. if start > end: return [] if start % 2 == 0: return generate_odd_numbers(start + 1, end) return [start] + generate_odd_numbers(start + 2, end) def odd_numbers_in_range(start, end): A wrapper function that ensures start is not less than 3 and end is not more than 12. start = max(start, 3) end = min(end, 12) return generate_odd_numbers(start, end)"},{"question":"Implement an algorithm using Python programming language that changes the color codes of multiple web elements from hexadecimal to RGB format. The elements are enclosed in a Python list. Also, the function should be able to handle any invalid hexadecimal color codes gracefully.","solution":"import re def hex_to_rgb(hex_code): Converts a hexadecimal color code to an RGB tuple. Returns (None, None, None) if the input is not a valid hex code. # Check for valid hexadecimal color code format if re.match(r\\"^#[0-9A-Fa-f]{6}\\", hex_code): r = int(hex_code[1:3], 16) g = int(hex_code[3:5], 16) b = int(hex_code[5:7], 16) return (r, g, b) else: return (None, None, None) def convert_hex_list_to_rgb(hex_list): Converts a list of hexadecimal color codes to a list of RGB tuples. return [hex_to_rgb(hex_code) for hex_code in hex_list]"},{"question":"Develop a Python script that functions to recalculate and adjust the gamma value of a given digital image. Use this script on the sample image provided to you. Besides enhancing the image, experiment with thegamma values (0.5, 1.5, 2) to see the effect on image quality and detail. Also, implement error handling to ensure the input gamma value is within a reasonable range and the image format is supported.","solution":"import cv2 import numpy as np def adjust_gamma(image, gamma=1.0): Adjusts the gamma value of the given image. Parameters: image (numpy array): The input image. gamma (float): The gamma value to adjust the image with. Returns: numpy array: The gamma adjusted image. if gamma <= 0: raise ValueError(\\"Gamma value should be greater than zero.\\") invGamma = 1.0 / gamma table = np.array([((i / 255.0) ** invGamma) * 255 for i in np.arange(0, 256)]).astype(\\"uint8\\") return cv2.LUT(image, table) def load_image(filepath): Load an image from a file. Parameters: filepath (str): The path to the image file. Returns: numpy array: The loaded image. image = cv2.imread(filepath) if image is None: raise ValueError(\\"Image format not supported or file not found.\\") return image def save_image(filepath, image): Save an image to a file. Parameters: filepath (str): The path to save the image file. image (numpy array): The image to be saved. cv2.imwrite(filepath, image) # Usage example: # image = load_image('path/to/image.jpg') # adjusted_image = adjust_gamma(image, 1.5) # save_image('path/to/adjusted_image.jpg', adjusted_image)"},{"question":"Write a Python program to generate ten distinct random alphanumeric strings of varying lengths from 6 to 12 characters. Each string should contain at least one lowercase letter, one uppercase letter, one digit, and one special character from the set [!, @, #, , %, ^, &, *]. Store these strings in a list and output the list.","solution":"import random import string def generate_char_set(): lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits specials = '!@#%^&*' return lowercase, uppercase, digits, specials def generate_random_string(length): lowercase, uppercase, digits, specials = generate_char_set() all_chars = lowercase + uppercase + digits + specials while True: random_string = ''.join(random.choices(all_chars, k=length)) if (any(char in lowercase for char in random_string) and any(char in uppercase for char in random_string) and any(char in digits for char in random_string) and any(char in specials for char in random_string)): return random_string def generate_unique_strings(): unique_strings = set() while len(unique_strings) < 10: length = random.randint(6, 12) random_string = generate_random_string(length) unique_strings.add(random_string) return list(unique_strings)"},{"question":"Write a Python program to find the length of the shortest subarray which, when sorted, makes the given array sorted.","solution":"def find_unsorted_subarray(nums): Finds the length of the shortest subarray which, when sorted, makes the given array sorted. n = len(nums) start, end = -1, -1 max_seen, min_seen = float('-inf'), float('inf') for i in range(n): max_seen = max(max_seen, nums[i]) if nums[i] < max_seen: end = i for i in range(n-1, -1, -1): min_seen = min(min_seen, nums[i]) if nums[i] > min_seen: start = i if start == -1: # means the array is already sorted return 0 return end - start + 1"},{"question":"Perform depth-first search (DFS) traversal on a binary tree and return the nodes traversed in the form of a list. Remember that in DFS, you visit all the descendants of a node before visiting its siblings. If the tree is unbalanced, return nodes from the longest branch of the tree. If multiple branches have the same length, return nodes from the branch encountered first during the DFS traversal.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def dfs_traversal(root): Perform DFS traversal of a binary tree and return the nodes in the form of a list. if not root: return [] result = [] stack = [root] while stack: node = stack.pop() result.append(node.value) # We need to add the right child first so that the left child is processed first if node.right: stack.append(node.right) if node.left: stack.append(node.left) return result"},{"question":"Write a recursive function to find the sum of all nodes in a binary tree. Additionally, the function should be able to handle binary trees with negative node values and it should return the sum as a long integer to handle large trees where the total sum could exceed the maximum limit for an integer.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sum_of_nodes(root): Returns the sum of all nodes in the binary tree rooted at 'root'. if root is None: return 0 return root.value + sum_of_nodes(root.left) + sum_of_nodes(root.right)"},{"question":"Use the following input to write a python program. The program should include a function that allows the user to enter a phrase, then returns the phrase with each word reversed while maintaining the original order of words.","solution":"def reverse_each_word(phrase): Reverses each word in the given phrase while maintaining the original order of words. words = phrase.split() reversed_words = [word[::-1] for word in words] return ' '.join(reversed_words)"},{"question":"Create an interwined structure of nested HashMaps in the programming language of your choice to test propensity of quick access and management of complex data. Your data structure should replicate the structure described below, implementing not only a simple data storing capacity, but also managing and executing certain operations on the data such as updating, retrieving, and deleting data.","solution":"class NestedHashMap: def __init__(self): self.data = {} def _get_nested(self, keys): Helper method to retrieve the nested dictionary given a list of keys. current_level = self.data for key in keys: current_level = current_level.setdefault(key, {}) return current_level def set_value(self, keys, value): Sets a value in the nested hash map for the provided keys. *all_but_last_keys, last_key = keys final_level = self._get_nested(all_but_last_keys) final_level[last_key] = value def get_value(self, keys): Retrieves a value from the nested hash map for the provided keys. current_level = self.data for key in keys: if key in current_level: current_level = current_level[key] else: return None return current_level def delete_value(self, keys): Deletes a value in the nested hash map for the provided keys. *all_but_last_keys, last_key = keys final_level = self._get_nested(all_but_last_keys) if last_key in final_level: del final_level[last_key]"},{"question":"Parse a list of numbers from a string in Python, where the string may contain duplicates and negative numbers. Additionally, ensure that the parsed numbers are sorted in descending order.","solution":"def parse_and_sort_numbers(input_string): Parses a list of numbers from a given string and returns the list sorted in descending order. The string may contain duplicates and negative numbers. import re numbers = re.findall(r'-?d+', input_string) numbers = [int(num) for num in numbers] return sorted(numbers, reverse=True)"},{"question":"Write a Python function that takes a list of integers as input and uses the built-in function \`filter()\` to return a new list containing only the numbers that are divisible by 3. Also, modify the function to return a dictionary with keys as the original index of these numbers in the input list and values as their squares. For example, given the input list [10, 15, 20, 22, 25, 30], the output dictionary should look like {1: 225, 4: 625, 5: 900}.","solution":"def filter_and_square_divisible_by_3(input_list): Takes a list of integers and returns a dictionary with keys as the original index of the numbers divisible by 3 and values as their squares. divisible_by_3 = filter(lambda x: x[1] % 3 == 0, enumerate(input_list)) result_dict = {index: value**2 for index, value in divisible_by_3} return result_dict"},{"question":"Develop a Python function that accepts a list of string elements as an input and outputs the string with the greatest number of characters. If multiple strings share the maximum length, return the first one encountered.","solution":"def longest_string(strings): Returns the string with the greatest number of characters. If multiple strings share the maximum length, returns the first one encountered. if not strings: return None max_length = -1 longest = None for string in strings: if len(string) > max_length: max_length = len(string) longest = string return longest"},{"question":"Give an example of a Python function that takes a list of integers as an argument and returns the sum of all even numbers in the list.","solution":"def sum_of_evens(numbers): Returns the sum of all even numbers in the list. :param numbers: A list of integers. :return: Sum of all even integers in the list. return sum(num for num in numbers if num % 2 == 0)"},{"question":"Implement a function in Python to compute the average of an array containing floating-point numbers, without using the built-in sum() function, in a single pass through the array. The array may contain up to 1 million elements and the function should have a time complexity of O(n).","solution":"def compute_average(arr): Computes the average of an array containing floating-point numbers. Args: arr (list of float): The input array. Returns: float: The average of the elements in the array. if not arr: return 0.0 total = 0.0 count = 0 for num in arr: total += num count += 1 return total / count"},{"question":"Develop a function that not only checks if any rotation of a given pattern exists in a string, but also returns the starting index of the rotated pattern in the string if it exists. If the pattern doesn't exist, return -1.","solution":"def find_rotated_pattern(text, pattern): This function checks if any rotation of the given pattern exists in the text. If it exists, it returns the starting index of the rotated pattern in the text. Otherwise, it returns -1. if not pattern or not text or len(pattern) > len(text): return -1 # Create a doubled pattern to simulate rotation doubled_pattern = pattern + pattern for i in range(len(text) - len(pattern) + 1): if text[i:i+len(pattern)] in doubled_pattern: return i return -1"},{"question":"Given two sorted arrays of integers, with equal length, write a Python function to merge them into one sorted array.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays of equal length into a single sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Convert this sentence from English to Python: \\"If the length of a string is greater than 5, print 'long string'\\".","solution":"def check_string_length(s): Prints 'long string' if the length of the string is greater than 5. if len(s) > 5: print('long string')"},{"question":"Create a function that takes a string and a number n, then return the n characters from the end of the string in reverse order. Additionally, ensure that the function can handle string inputs containing special characters such as punctuation marks, white spaces, and non-alphabetic characters.","solution":"def reverse_n_chars_from_end(s, n): This function takes a string s and a number n, then returns the n characters from the end of the string in reverse order. :param s: str: The input string. :param n: int: The number of characters to return from the end in reverse. :return: str: The last n characters of the string in reverse order. if n > len(s): n = len(s) return s[-n:][::-1]"},{"question":"Write a Python program to print a Diamond Alphabetic Pattern ?","solution":"def diamond_alphabet_pattern(n): Prints a diamond alphabet pattern of given height n. n should be an odd number for a symmetric diamond pattern. if n % 2 == 0: raise ValueError(\\"n must be an odd number.\\") alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' mid = n // 2 # Generate the upper part of the diamond for i in range(mid + 1): spaces = ' ' * (mid - i) letters = alphabet[:i + 1] print(spaces + letters + letters[-2::-1] + spaces) # Generate the lower part of the diamond for i in range(mid - 1, -1, -1): spaces = ' ' * (mid - i) letters = alphabet[:i + 1] print(spaces + letters + letters[-2::-1] + spaces)"},{"question":"Write a Python function called \`is_leap_year\` that takes an integer year as input and returns \`True\` if the given year is a leap year, and \`False\` otherwise. A leap year is divisible by 4, but not by 100 unless it is also divisible by 400.","solution":"def is_leap_year(year): Checks if the given year is a leap year. A year is a leap year if it is divisible by 4, but not by 100, unless it is also divisible by 400. Args: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False"},{"question":"Write a python program to calculate the area of multiple trapezoids given the lengths of their parallel sides (bases) and height. The program should be able to handle the data of the trapezoids in a list of dictionaries, where each dictionary represents a trapezoid and contains the lengths of the two bases and height. Calculate the area of each trapezoid and return the areas as a list.","solution":"def calculate_trapezoid_areas(trapezoids): Calculate the area of multiple trapezoids given their bases and height. Parameters: - trapezoids: a list of dictionaries, where each dictionary contains 'base1', 'base2', and 'height' keys. Returns: - A list of areas of the given trapezoids. areas = [] for trapezoid in trapezoids: base1 = trapezoid['base1'] base2 = trapezoid['base2'] height = trapezoid['height'] # Area of a trapezoid: (1/2) * (base1 + base2) * height area = 0.5 * (base1 + base2) * height areas.append(area) return areas"},{"question":"Write a Python program to show the upcoming 5 days weather forecast with respect to temperature in °C.","solution":"import requests from typing import List, Dict def get_weather_forecast(api_key: str, city: str) -> List[Dict[str, str]]: Function to get the weather forecast for the next 5 days for a given city. Parameters: api_key (str): The API key to access the weather service. city (str): The city name for which the weather forecast is needed. Returns: List[Dict[str, str]]: A list with 5 dictionaries each representing a day with 'date' and 'temperature'. forecast_url = f\\"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=5\\" response = requests.get(forecast_url) if response.status_code != 200: raise Exception(f\\"Error fetching weather data: {response.status_code}\\") forecast_data = response.json() forecast_list = [] for day in forecast_data['forecast']['forecastday']: forecast = { \\"date\\": day['date'], \\"temperature\\": day['day']['avgtemp_c'] } forecast_list.append(forecast) return forecast_list"},{"question":"Define a Python function that, given two integer inputs (one being a base number and the other an exponent), returns the result of the quantitative value calculated through raising the base number to the power of the said exponent. Your solution should work for not only positive but also negative exponents and consider the overflows by returning an appropriate error message. As a limitation, you're not allowed to use any inbuilt Python function (like pow()) for your solution. Furthermore, a piece of erroneous code is provided for your reference.","solution":"def power(base, exponent): Raises base to the power of exponent without using inbuilt functions. Handles positive, negative exponents and 0 exponent cases. if base == 0 and exponent == 0: return \\"Undefined (0^0)\\" if exponent == 0: return 1 if base == 0: return 0 result = 1 abs_exponent = abs(exponent) for _ in range(abs_exponent): result *= base if result > 2**31 - 1: # Handling overflow for 32-bit signed integer limit return \\"Overflow\\" return result if exponent > 0 else 1 / result"},{"question":"Given the cell phone directory {\\"Tom\\": \\"456-7890\\", \\"Jerry\\": \\"123-4567\\", \\"Mickey\\": \\"987-6543\\"}, write a function in Python that converts this directory into a format where the phone numbers are in lists. In this new format, the key should be a list of names and the value should be a list of their corresponding phone numbers. In addition, the function should verify if each phone number is valid according to a given regular expression. If a number is invalid, the function should skip it without failing and print it as invalid along with the corresponding name.","solution":"import re def convert_directory(directory): Converts a phone directory from {\\"Name\\": \\"Phone number\\"} format to {\\"Names\\": [\\"List of names\\"], \\"Phone numbers\\": [\\"List of phone numbers\\"]}. Skips invalid phone numbers. Args: directory (dict): A dictionary where the key is a name and the value is a phone number string. Returns: dict: A new dictionary with two keys: \\"Names\\" and \\"Phone numbers\\". phone_pattern = re.compile(r\\"^d{3}-d{4}\\") names = [] phone_numbers = [] for name, number in directory.items(): if phone_pattern.match(number): names.append(name) phone_numbers.append(number) else: print(f\\"Invalid phone number for {name}: {number}\\") return {\\"Names\\": names, \\"Phone numbers\\": phone_numbers} phone_directory = { \\"Tom\\": \\"456-7890\\", \\"Jerry\\": \\"123-4567\\", \\"Mickey\\": \\"987-6543\\" }"},{"question":"Print out the same string in reverse order, without using any built-in string manipulation functions or data structures (such as reversing the list of characters or using a stack). Your solution should have a time complexity of O(n), where n is the length of the string.","solution":"def reverse_string(s): Returns the reverse of the input string \`s\` without using any built-in string manipulation functions or data structures (such as reversing the list of characters or using a stack). result = \\"\\" for i in range(len(s) - 1, -1, -1): result += s[i] return result"},{"question":"Write a Python function that takes two lists of integers as input and returns a new list that contains all the unique elements from both input lists.","solution":"def unique_elements(list1, list2): Returns a list containing all unique elements from both input lists. # Convert both lists to sets to get unique elements, then find their union unique_set = set(list1) | set(list2) # Convert the set back to a list return list(unique_set)"},{"question":"Write a Python function that takes in an integer between 1 and 1000 (inclusive) and returns its binary representation as a string. Make sure to include comments and error handling in your code.","solution":"def integer_to_binary(n): Converts an integer between 1 and 1000 (inclusive) to its binary representation. Parameters: n (int): An integer between 1 and 1000 (inclusive). Returns: str: Binary representation of the input integer. Raises: ValueError: If the input integer is not in the range 1-1000. if not (1 <= n <= 1000): raise ValueError(\\"The integer must be between 1 and 1000 (inclusive).\\") return bin(n)[2:]"},{"question":"Intersperse the given array of numbers with the given delimiter and output a new array. However, you are not allowed to use any built-in functions or methods that directly solve the problem. You have to implement the interspersing logic from scratch using only basic programming constructs.","solution":"def intersperse(arr, delimiter): Returns a new array with the elements of arr interspersed with delimiter. if not arr: return [] result = [] for i in range(len(arr)): result.append(arr[i]) if i != len(arr) - 1: result.append(delimiter) return result"},{"question":"Create a Python function that takes a 2D list as a parameter and prints the contents of the list in a 2D format. The elements in the inner lists are not of a fixed type, meaning there could contain integers, strings, or a combination of these. Also, add error handling for cases where the input is not a 2D list.","solution":"def print_2d_list(two_d_list): This function takes a 2D list and prints its contents in a 2D format. It also handles errors if the input is not a 2D list. # Check if the input is a list if not isinstance(two_d_list, list): raise ValueError(\\"Input must be a list.\\") # Check if all elements in the list are lists for sublist in two_d_list: if not isinstance(sublist, list): raise ValueError(\\"All elements of the input list must be lists.\\") # Print the 2D list for sublist in two_d_list: print(' '.join(map(str, sublist)))"},{"question":"Create a function in Python that takes an integer as input and returns a list of all prime numbers up to that integer. The prime numbers should be returned in ascending order.","solution":"def prime_numbers_up_to(n): Returns a list of all prime numbers up to the integer n (inclusive). if n < 2: return [] primes = [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for current in range(2, n + 1): if is_prime[current]: primes.append(current) for multiple in range(current * current, n + 1, current): is_prime[multiple] = False return primes"},{"question":"Complete the following code block to return the elements of a list in reverse order, without using built-in functions like reverse() or reversed().","solution":"def reverse_list(lst): Returns a new list that contains the elements of the input list, but in reverse order. Args: lst (list): The list to be reversed. Returns: list: A new list with the elements of lst in reverse order. return [lst[i] for i in range(len(lst) - 1, -1, -1)]"},{"question":"Write a Python function to find the mode (the number that appears most frequently) in a list of numbers. If there are multiple modes, return them all in a list sorted in ascending order. Ensure the function, named 'find_modes', deals with negative numbers and the possibility of an empty list as inputs effectively without causing errors or unexpected outcomes.","solution":"from collections import Counter def find_modes(numbers): Finds the mode(s) in a list of numbers. Parameters: numbers (list): List of numbers Returns: list: List of mode(s) in ascending order if not numbers: return [] counter = Counter(numbers) max_count = max(counter.values()) modes = [num for num, count in counter.items() if count == max_count] return sorted(modes)"},{"question":"Given a list of integers, write a function in Python to sort and reverse the list. Additionally, the function should remove any duplicates from the list before sorting and reversing it.","solution":"def sort_and_reverse_remove_duplicates(numbers): Sorts the list of integers, removes duplicates, and then reverses the list. :param numbers: List of integers. :return: List of integers sorted in descending order with duplicates removed. unique_numbers = list(set(numbers)) unique_numbers.sort(reverse=True) return unique_numbers"},{"question":"Use a while loop to add all prime numbers between 1 and 500 to a list. Include error handling that will prevent the program from crashing if it encounters a value that cannot be analyzed as a numerical value.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def prime_numbers_between_1_and_500(): Return a list of all prime numbers between 1 and 500. primes = [] i = 1 while i <= 500: if is_prime(i): primes.append(i) i += 1 return primes # Error handling example def safe_prime_numbers_between_1_and_500(data): Return a list of all prime numbers from data considering error handling. primes = [] for value in data: try: num = int(value) if is_prime(num) and 1 <= num <= 500: primes.append(num) except ValueError: continue return primes"},{"question":"Cablevisión HD - We are going to define a function \\"switch_channel()\\" which gets two arguments, the original channel that the TV is currently displaying (original_channel) and the new channel the user wishes to watch (new_channel). This function's goal is to switch the channel and display that channel's name but it also needs to perform some important checks before doing so.","solution":"# Dictionary containing channels and their corresponding names CHANNELS = { 1: \\"CBS\\", 2: \\"NBC\\", 3: \\"FOX\\", 4: \\"ABC\\", 5: \\"ESPN\\", 6: \\"CNN\\", 7: \\"HBO\\", 8: \\"Showtime\\", 9: \\"TBS\\", 10: \\"Discovery\\" } def switch_channel(original_channel, new_channel): This function takes the original channel and the new channel as input and returns the name of the new channel after performing necessary checks. # Check if the original channel is valid if original_channel not in CHANNELS: return \\"Error: Original channel is invalid.\\" # Check if the new channel is valid if new_channel not in CHANNELS: return \\"Error: New channel is invalid.\\" # Return the name of the new channel return CHANNELS[new_channel]"},{"question":"Print the duplicate items in an array of integers in ascending order, where the array size is limited to 1000 and the elements are in the range of -1000 to 1000. If there are no duplicates, output \\"No duplicates found.\\" Additionally, the solution must have a time complexity of O(n) and use only constant extra space.","solution":"def find_duplicates(arr): Returns the duplicate items in an array of integers in ascending order. If there are no duplicates, returns \\"No duplicates found.\\" The function handles arrays with sizes up to 1000 and elements in the range of -1000 to 1000. Time complexity: O(n), Space complexity: O(1) if not arr: return \\"No duplicates found.\\" # We will use an array to keep count: one index for each value from -1000 to 1000 # This normalizes the range from indices 0 to 2000 count = [0] * 2001 duplicates = [] for num in arr: # Normalize the index by adding 1000 index = num + 1000 count[index] += 1 for i in range(len(count)): if count[i] > 1: duplicates.append(i - 1000) if not duplicates: return \\"No duplicates found.\\" return duplicates"},{"question":"You are going to simulate a state machine containing n states. You will be given a series of commands where each command describes a transition to the next state or a halt. A transition is given by \\"transition x\\" where x is an integer specifying the state to transition to. A halt is specified by the string \\"halt\\". If the received command is not a transition or a halt, it should be ignored. If the machine is asked to transition to a state number that is out of range, print \\"Invalid command\\". If the machine is asked to halt, end the simulation and print the final state.","solution":"class StateMachine: def __init__(self, n): self.n = n self.current_state = 0 def process_commands(self, commands): for command in commands: if command.startswith(\\"transition\\"): parts = command.split() if len(parts) != 2 or not parts[1].isdigit(): continue next_state = int(parts[1]) if next_state < 0 or next_state >= self.n: print(\\"Invalid command\\") else: self.current_state = next_state elif command == \\"halt\\": print(f\\"Final state: {self.current_state}\\") return else: continue print(f\\"Final state: {self.current_state}\\")"},{"question":"Write a recursive Python function to calculate the factorial of a number, but with the additional requirements that the function must be tail recursive and must not use any loops or helper functions.","solution":"def factorial_tail_recursive(n, accumulator=1): Returns the factorial of a non-negative integer n using tail recursion. The accumulator is used to hold the intermediate results. if n <= 1: return accumulator else: return factorial_tail_recursive(n - 1, n * accumulator)"},{"question":"Can you write a Python function that checks if a given two-digit integer is a palindrome or not? A palindrome is a number that reads the same backward as forward.","solution":"def is_two_digit_palindrome(n): Check if a given two-digit integer is a palindrome. Parameters: n (int): A two-digit integer. Returns: bool: True if the number is a palindrome, False otherwise. # Convert the integer to a string str_n = str(n) # Check if the first character is equal to the second character. return str_n[0] == str_n[1]"},{"question":"Write a code for linear search algorithm that returns the index of the last occurrence of the target element in the given array. The target element may be a string or an integer. In case of duplicates, your algorithm should return the index of the last occurrence of the duplicate element.","solution":"def linear_search(arr, target): Returns the index of the last occurrence of the target element in the given array. Parameters: arr (list): A list of elements (integers or strings). target: The element to search for in the array. Returns: int: The index of the last occurrence of the target element in the array; otherwise, -1. last_index = -1 for i in range(len(arr)): if arr[i] == target: last_index = i return last_index"},{"question":"Develop a software element that organizes a list of pairs (tuples) of integers in an ascending sequence based on the secondary constituent of each pair. Additionally, the function should be able to sort the pairs based on the primary constituent first when the elements in the pair are equal. Then apply the function to an unsorted list of tuples and display the result.","solution":"def sort_pairs(pairs): Sorts a list of pairs (tuples) of integers in ascending order based on the second element of each pair. In case the second elements are equal, it sorts based on the first element. Args: pairs (list of tuples): A list of tuples where each tuple contains two integers. Returns: list of tuples: A sorted list of tuples based on the described criteria. return sorted(pairs, key=lambda x: (x[1], x[0])) # Applying the function to an unsorted list of tuples unsorted_pairs = [(3, 1), (2, 3), (1, 2), (4, 2), (1, 1)] sorted_pairs = sort_pairs(unsorted_pairs) sorted_pairs # This will display the result"},{"question":"Write a Python script to compute Pi using the Monte Carlo method. The approximation should get better as the number of random points increases. Make sure your code allows for the specification of the number of points to generate.","solution":"import random def compute_pi(num_points): Computes the value of Pi using the Monte Carlo method. Parameters: num_points (int): The number of points to generate. Returns: float: The approximated value of Pi. inside_circle = 0 for _ in range(num_points): x = random.uniform(-1, 1) y = random.uniform(-1, 1) if x**2 + y**2 <= 1: inside_circle += 1 pi_estimate = (inside_circle / num_points) * 4 return pi_estimate"},{"question":"Build a Rock Paper Scissors function that takes two arguments (player1 and player2) and returns a string indicating the result of the game.","solution":"def rock_paper_scissors(player1, player2): Determines the outcome of a Rock-Paper-Scissors game. Arguments: player1 -- move of player1 as a string - \\"rock\\", \\"paper\\", or \\"scissors\\" player2 -- move of player2 as a string - \\"rock\\", \\"paper\\", or \\"scissors\\" Returns: result -- string indicating the outcome (\\"Player1 wins\\", \\"Player2 wins\\", \\"Draw\\") # Define game rules rules = { \\"rock\\": \\"scissors\\", \\"scissors\\": \\"paper\\", \\"paper\\": \\"rock\\" } if player1 == player2: return \\"Draw\\" elif rules[player1] == player2: return \\"Player1 wins\\" else: return \\"Player2 wins\\""},{"question":"Modify and correct the given erroneous code to delete an element from the following list at a given index. Additionally, write a function to validate the input for index. If the index is out of range or not an integer, your function should return a message: \\"Please enter a valid index\\". Also, incorporate a functionality of asking user to confirm deletion before executing it.","solution":"def validate_index(index, lst): Validates the index for deletion. Args: index (int): The index to be validated. lst (list): The list from which an element needs to be deleted. Returns: bool: True if index is valid, otherwise False. if not isinstance(index, int) or index < 0 or index >= len(lst): return False return True def delete_element(lst, index): Deletes an element from the list at a given index after user confirmation. Args: lst (list): The list from which an element needs to be deleted. index (int): The index at which the element needs to be deleted. Returns: list: The list after deletion. str: Error message if index is invalid. if not validate_index(index, lst): return \\"Please enter a valid index\\" # User confirmation confirmation = input(f\\"Do you really want to delete element at index {index}? Type 'yes' to confirm: \\") if confirmation.lower() == 'yes': return lst[:index] + lst[index+1:] else: return lst"},{"question":"Write a python loop to get a list of all prime numbers between 0 and a given limit.","solution":"def get_primes(limit): Returns a list of all prime numbers between 0 and the given limit (inclusive). if limit < 2: return [] primes = [] for num in range(2, limit + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"Suggest an algorithm in Python for sorting an array of integers from smallest to largest, without using any built-in sorting functions or libraries.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Given an array of integers, write a function to check if all the elements in the array are unique, without using any additional data structures.","solution":"def are_all_elements_unique(arr): Returns True if all elements in the array are unique, otherwise False. This function does not use any additional data structures. n = len(arr) for i in range(n): for j in range(i + 1, n): if arr[i] == arr[j]: return False return True"},{"question":"i have a json file whose file name is 'saleprice' and the keys are the product id(i.e. p1,p2 etc). the corresponding value of each key is array of sale price of the product at different instances of time(time is not mentioned) for example json data = {'p1':[100,110,105],'p2':[300,290,310], 'p3':[220,240,235]}. generate a python code to read this json from the file and create a python list of price differences of consecutive elements for each key and store those respective list values in a new dictionay. the final output should be a dictionary with the same keys and sale price difference among consecutive list values. for example p1 has the price diff = {'p1': [10, -5], 'p2': [-10, 20], 'p3': [20, -5]}.","solution":"import json def calculate_price_differences(file_name): # Load the JSON data from the specified file with open(file_name, 'r') as file: data = json.load(file) # Initialize the result dictionary result = {} # Calculate price differences for each product for product, prices in data.items(): price_differences = [] for i in range(1, len(prices)): price_differences.append(prices[i] - prices[i - 1]) result[product] = price_differences return result # Example usage # price_differences = calculate_price_differences('saleprice.json') # print(price_differences)"},{"question":"Create a programming code snippet that modifies the elements of a two-dimensional array in place. In the resulting array, each element should be the multiplication product of the corresponding element in the original array and its coordinate sum (row index + column index).","solution":"def modify_array(matrix): Modify the elements of a two-dimensional array in place. Each element is multiplied by the sum of its coordinates (row index + column index). Args: matrix (list of list of int): The original two-dimensional array. Returns: None: The function modifies the array in place. rows = len(matrix) if rows == 0: return cols = len(matrix[0]) for i in range(rows): for j in range(cols): matrix[i][j] *= (i + j)"},{"question":"Add a function for validating an email address in the given code snippet. Additionally, implement a check to ensure that the domain of the email address is a valid domain name. To further increase the difficulty, also check if the email address has a valid format according to the RFC 5322 standard.","solution":"import re def validate_email(email): Validates an email address against RFC 5322 standard and checks if the domain is valid. Args: email (str): The email address to validate. Returns: bool: True if the email is valid, False otherwise. # RFC 5322 standard email regex from https://emailregex.com/ regex = r\\"(?:[a-zA-Z0-9!#%&'*+/=?^_\`{|}~-]+(?:.[a-zA-Z0-9!#%&'*+/=?^_\`{|}~-]+)*\\" r\\"|\\"(?:[x01-x08x0bx0cx0e-x1fx21x23-x5bx5d-x7f]|[x01-x09x0bx0cx0e-x7f])*\\")\\" r\\"@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\" r\\"|[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}\\" r\\"(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?\\" r\\"|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[x01-x08x0bx0cx0e-x1fx21-x5ax53-x7f]\\" r\\"|[x01-x09x0bx0cx0e-x7f])*)])\\" if re.match(regex, email) is None: return False # Additional check for a valid domain domain_part = email.split('@')[-1] domain_regex = r\\"^(?=.{1,255})(?!-)[A-Za-z0-9-]+([-.]{1}[A-Za-z0-9]+)*.[A-Za-z]{2,6}\\" return re.match(domain_regex, domain_part) is not None"},{"question":"Write a Python function that generates a Fibonacci sequence up to a given number n, where n is a positive integer less than or equal to 1000. The function should return the sequence as a list. Additionally, the function should include error handling for invalid input, such as non-integer or negative values for n.","solution":"def generate_fibonacci(n): Generates a Fibonacci sequence up to a given number n. Parameters: n (int): The upper limit for Fibonacci sequence generation. Must be a positive integer less than or equal to 1000. Returns: list: A list containing the Fibonacci sequence up to the number n. Raises: ValueError: If n is not a positive integer or if n is greater than 1000. if not isinstance(n, int) or n <= 0 or n > 1000: raise ValueError(\\"n must be a positive integer less than or equal to 1000.\\") a, b = 0, 1 fibonacci_sequence = [] while a <= n: fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence"},{"question":"Can you write a Python script to streamline copying files from a source directory to a destination directory? Your script should not only copy files, but also be able to filter files by name and apply a renaming format to the copied files. The renaming format should be: \`original_name_{timestamp}.{extension}\`. Ensure the script handles pre-existing directories and creates the destination directory if it does not exist. Additionally, include options to list copied files and write their names to a log file.","solution":"import os import shutil from datetime import datetime def copy_and_rename_files(src_dir, dest_dir, filter_name=None, log_file=None): Copies files from src_dir to dest_dir, filters by file name if filter_name is provided, renames files to original_name_{timestamp}.{extension}, and logs copied file names if log_file is provided. Parameters: src_dir (str): The source directory. dest_dir (str): The destination directory. filter_name (str, optional): The substring to filter files by name. Defaults to None. log_file (str, optional): The path to the log file to record copied file names. Defaults to None. if not os.path.exists(dest_dir): os.makedirs(dest_dir) copied_files = [] for filename in os.listdir(src_dir): if filter_name is None or filter_name in filename: src_file_path = os.path.join(src_dir, filename) if os.path.isfile(src_file_path): timestamp = datetime.now().strftime('%Y%m%d%H%M%S') name, ext = os.path.splitext(filename) new_filename = f\\"{name}_{timestamp}{ext}\\" dest_file_path = os.path.join(dest_dir, new_filename) shutil.copy(src_file_path, dest_file_path) copied_files.append(new_filename) if log_file: with open(log_file, 'w') as log: for f in copied_files: log.write(f + 'n') return copied_files"},{"question":"Write a Python code that effectively extracts and separates the true street name and the house number from an input string that represents a full address. In addition to numbers, the house number could also include letters, e.g. 13B. The full address is an arbitrary string that may include building or company names, floor or apartment numbers, or other descriptive text, and can contain commas, periods, or other punctuation. The algorithm you'll develop should be robust enough to accurately identify the true street name and house number in any full address input, regardless of how complex or unusual the address format is. For example, the street name may contain words like \\"north,\\" \\"south,\\" \\"east,\\" or \\"west,\\" and could have different street types like \\"road,\\" \\"street,\\" \\"drive,\\" \\"avenue,\\" \\"lane,\\" etc.","solution":"import re def extract_street_name_and_house_number(address): Extracts and returns the true street name and the house number from a full address. Parameters: address (str): The full address as a string. Returns: tuple: A tuple containing the street name and house number. # Regular expression to find the house number - assumes house number comes before street name match = re.search(r'(d+w*)s+(.+)', address) if match: house_number = match.group(1) street_name = match.group(2).split(',')[0] return street_name.strip(), house_number return address, \\"\\" # Example usage # print(extract_street_name_and_house_number(\\"123B Baker Street, Apt 5, London\\"))"},{"question":"Write a Python function that takes in two lists of dictionaries. The first list represents a group of people, where each dictionary contains the person's name and age. The second list represents a group of hobbies, where each dictionary contains the hobby's name and the number of people interested in it. The function should return a new list of dictionaries, where each dictionary represents a person and their associated hobby (with the most number of people interested in it). If there are multiple hobbies with the maximum number of interested people, choose the hobby that appears first in the list.","solution":"def assign_hobbies(people, hobbies): Assigns each person a hobby with the most number of people interested in it. If there are multiple hobbies with the maximum number of interested people, the first one in the list is chosen. Parameters: - people: List of dictionaries with 'name' and 'age' keys. - hobbies: List of dictionaries with 'name' and 'interested_count' keys. Returns: - List of dictionaries, each containing a person's name, age, and assigned hobby. if not hobbies: return [{'name': person['name'], 'age': person['age'], 'hobby': None} for person in people] max_interested = max(hobby['interested_count'] for hobby in hobbies) most_popular_hobby = next(hobby['name'] for hobby in hobbies if hobby['interested_count'] == max_interested) result = [] for person in people: person_with_hobby = person.copy() person_with_hobby['hobby'] = most_popular_hobby result.append(person_with_hobby) return result"},{"question":"Write a Python program to generate the first n Fibonacci numbers, where n is a positive integer input from the user. Also, modify the code to handle larger inputs efficiently using memoization. Ensure that there are no floating-point precision issues by only using integer calculations.","solution":"def fibonacci(n, memo={}): Generate the first n Fibonacci numbers efficiently using memoization. Parameters: - n: The number of Fibonacci numbers to generate (positive integer). Returns: - A list of the first n Fibonacci numbers. if n <= 0: return [] if n == 1: return [0] if n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_fib = fib(i, memo) fib_sequence.append(next_fib) return fib_sequence def fib(k, memo): if k in memo: return memo[k] if k == 0: return 0 if k == 1: return 1 memo[k] = fib(k-1, memo) + fib(k-2, memo) return memo[k]"},{"question":"Develop a Python function that accepts two arguments: an integer \\"n\\" and a string \\"s\\". The function should print all strings of length \\"n\\" formed from the letters 'a', 'b', and 'c' exactly \\"n\\" times. If \\"s\\" is provided, the function should only print combinations that are lexicographically greater than or equal to \\"s\\".","solution":"from itertools import product def generate_strings(n, s=''): Generate and print all strings of length 'n' formed from the letters 'a', 'b', and 'c'. If 's' is provided, only prints combinations that are lexicographically greater than or equal to 's'. Parameters: n (int): The length of the strings to generate. s (str): The string to compare against; if empty, all combinations are printed. characters = 'abc' all_combinations = [''.join(p) for p in product(characters, repeat=n)] for combination in all_combinations: if combination >= s: print(combination)"},{"question":"You are a software engineer at a startup called \\"SecureCode Inc.\\". Your team has been tasked with developing a secure file management system for highly sensitive data. One of the critical functionalities is to encrypt a file using a reusable encryption key. You have been asked to implement a function \`encrypt_file(key: str, input_file_path: str, output_file_path: str) -> None\` that takes a key, the path to the input file, and the path to the output file as parameters and encrypts the input file using the key, saving the encrypted data to the output file.","solution":"from cryptography.fernet import Fernet def encrypt_file(key: str, input_file_path: str, output_file_path: str) -> None: Encrypts a file using a reusable encryption key. Parameters: - key (str): The encryption key. - input_file_path (str): The path to the input file. - output_file_path (str): The path to the output file where encrypted data is saved. # Convert key to bytes key_bytes = key.encode() f = Fernet(key_bytes) with open(input_file_path, 'rb') as input_file: file_data = input_file.read() encrypted_data = f.encrypt(file_data) with open(output_file_path, 'wb') as output_file: output_file.write(encrypted_data)"},{"question":"Develop a code to delete a given element from a list, ensuring that the element is present at least once. The list should not be modified if the element is not found. Additionally, the code should keep track of the number of times the element was deleted and return this count. The list can contain duplicate elements. The code should also handle cases where the element to be deleted is a negative number.","solution":"def delete_element_from_list(lst, element): Deletes all occurrences of the given element from the list. Returns the count of elements deleted. If the element is not found in the list, the list remains unchanged and it returns 0. Parameters: lst (list): The list to delete the element from. element: The element to be deleted. Returns: int: The count of deleted elements. initial_length = len(lst) lst[:] = [x for x in lst if x != element] final_length = len(lst) return initial_length - final_length"},{"question":"Given a set of words, create a Python function that finds the longest palindromic word that can be formed using only the letters in the given set. The set of letters can be represented as a string where each character represents a unique letter. For example, if the set of letters is \\"aeiou\\", then only words consisting of these letters can be considered. If no palindromic word can be formed, return an empty string.","solution":"from itertools import permutations def longest_palindromic_word(letter_set): Returns the longest palindromic word that can be formed using only the letters in the given set. If no palindromic word can be formed, returns an empty string. def is_palindrome(word): return word == word[::-1] max_length = 0 longest_palindrome = \\"\\" for length in range(1, len(letter_set) + 1): for p in permutations(letter_set, length): word = \\"\\".join(p) if is_palindrome(word) and len(word) > max_length: max_length = len(word) longest_palindrome = word return longest_palindrome"},{"question":"numbers = [19, 3, 4, 5, 8, 12, 33, 1, 2]. Implement Partition exchange sort (also known as quick sort) in Python to sort this list. Also, implement functionality to choose the pivot as the median of the first, middle and last element to improve the performance on already or nearly sorted lists.","solution":"def quick_sort(arr): Function to sort an array using quick sort algorithm with pivot as the median of the first, middle, and last elements. if len(arr) <= 1: return arr else: pivot = median_of_three(arr) less = [x for x in arr if x < pivot] equal = [x for x in arr if x == pivot] greater = [x for x in arr if x > pivot] return quick_sort(less) + equal + quick_sort(greater) def median_of_three(arr): Function to find the median of the first, middle, and last elements of the array. first = arr[0] middle = arr[len(arr) // 2] last = arr[-1] return sorted([first, middle, last])[1] # Example usage numbers = [19, 3, 4, 5, 8, 12, 33, 1, 2] sorted_numbers = quick_sort(numbers) print(sorted_numbers)"},{"question":"Suggest a completion for the following code that generates a random string of the specified length using only lowercase letters.","solution":"import random import string def generate_random_string(length): Generates a random string of the specified length using only lowercase letters. Parameters: - length: The length of the random string to generate. Returns: - A random string of the specified length composed of only lowercase letters. return ''.join(random.choice(string.ascii_lowercase) for _ in range(length))"},{"question":"Using Python, implement a method to find the longest common subsequence in two strings while considering that the subsequence should contain only alphabetical characters. The two strings should have a minimum length of 10 characters each.","solution":"def longest_common_subsequence(s1, s2): Finds the longest common subsequence of two strings consisting of only alphabetical characters. def is_alpha(char): return char.isalpha() # Filter only alphabetical characters s1_alpha = ''.join(filter(is_alpha, s1)) s2_alpha = ''.join(filter(is_alpha, s2)) m, n = len(s1_alpha), len(s2_alpha) dp = [[0] * (n + 1) for _ in range(m + 1)] # Building the DP table for i in range(m): for j in range(n): if s1_alpha[i] == s2_alpha[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # Reconstructing the longest common subsequence from the DP table lcs = [] while m > 0 and n > 0: if dp[m][n] == dp[m-1][n]: m -= 1 elif dp[m][n] == dp[m][n-1]: n -= 1 else: lcs.append(s1_alpha[m-1]) m -= 1 n -= 1 return ''.join(reversed(lcs))"},{"question":"Write a full implementation of a \\"queue via stacks\\" data structure in Python, where you use two stacks to create a queue. Make sure to include all the necessary methods for a queue such as 'enqueue', 'dequeue', 'empty', 'size' and 'front'. Also provide a main function that demonstrates how to use the queue (by executing several enqueue and dequeue operations) and prints the queue state after each operation to confirm correct implementation.","solution":"class QueueViaStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, item): self.stack1.append(item) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if self.stack2: return self.stack2.pop() else: raise IndexError(\\"Dequeue from empty queue\\") def empty(self): return not self.stack1 and not self.stack2 def size(self): return len(self.stack1) + len(self.stack2) def front(self): if self.stack2: return self.stack2[-1] if self.stack1: return self.stack1[0] else: raise IndexError(\\"Front on empty queue\\") def main(): q = QueueViaStacks() print(f\\"Queue empty? {q.empty()}\\") # True q.enqueue(1) q.enqueue(2) q.enqueue(3) print(f\\"Queue size: {q.size()}\\") # 3 print(f\\"Front item: {q.front()}\\") # 1 print(f\\"Dequeue: {q.dequeue()}\\") # 1 print(f\\"Queue size after dequeue: {q.size()}\\") # 2 print(f\\"Front item after dequeue: {q.front()}\\") # 2 q.enqueue(4) print(f\\"Queue size after enqueue: {q.size()}\\") # 3 while not q.empty(): print(f\\"Dequeue: {q.dequeue()}\\") print(f\\"Queue empty? {q.empty()}\\") # True if __name__ == \\"__main__\\": main()"},{"question":"Modify this code to make it a function which takes a list of positive numbers and returns their average, accurate to two decimal places. The function should also check if the input list is not empty and raise a ValueError if it is. Additionally, ensure the function handles cases where the list contains only one number correctly. Lastly, add a constraint that the function should not use any built-in Python functions for calculating the sum or length of the list.","solution":"def average(nums): Returns the average of the numbers in the list \`nums\`, accurate to two decimal places. Raises a ValueError if the input list is empty. Does not use built-in functions for calculating the sum or length of the list. if not nums: raise ValueError(\\"The input list is empty.\\") total = 0 count = 0 for num in nums: total += num count += 1 avg = total / count return round(avg, 2)"},{"question":"Write a python program to simulate a loaded coin (unfair coin) that lands on heads 70% of the time, over 10 trials. Add additional text on the output of the simulation as well for better understanding.","solution":"import random def simulate_loaded_coin(trials=10): Simulates a loaded coin that lands on heads 70% of the time over a given number of trials. heads_count = 0 tails_count = 0 for _ in range(trials): result = 'heads' if random.random() < 0.7 else 'tails' if result == 'heads': heads_count += 1 else: tails_count += 1 return heads_count, tails_count # Example usage if __name__ == \\"__main__\\": heads, tails = simulate_loaded_coin() print(f\\"Simulation of a loaded coin over 10 trials:\\") print(f\\"Heads: {heads} times\\") print(f\\"Tails: {tails} times\\")"},{"question":"Develop a Python algorithm for generating the mathematical pattern known as the Fibonacci series. In addition to creating the series of 'n' lengths where 'n' signifies an initial 20 instances, add capabilities to demonstrate every even-valued term in this series distinctly. Also, include a functionality to check if a given number exists in the generated Fibonacci series.","solution":"def generate_fibonacci(n=20): Generate a Fibonacci series of 'n' length. fibonacci_series = [] a, b = 0, 1 while len(fibonacci_series) < n: fibonacci_series.append(a) a, b = b, a + b return fibonacci_series def even_valued_terms(fib_series): Return a list of all even-valued terms in the Fibonacci series. return [x for x in fib_series if x % 2 == 0] def is_in_fibonacci(number, fib_series): Check if a given number exists in the Fibonacci series. return number in fib_series"},{"question":"Given a dataset of 1000 images varying in size, the task is to create thumbnail images of all these. The images should not become out of shape in the process, and it must be carried out using Python code. Additionally, the thumbnails should adhere to a specific aspect ratio and resolution requirements, and the resulting images must be arranged in a folder structure based on their original sources. How can this be achieved while also ensuring that the process is as efficient as possible?","solution":"from PIL import Image import os def create_thumbnail(image_path, thumbnail_path, size): Creates a thumbnail for an image while maintaining aspect ratio. :param image_path: Path to the original image :param thumbnail_path: Path where the thumbnail will be saved :param size: Tuple (width, height) of the thumbnail with Image.open(image_path) as img: img.thumbnail(size) img.save(thumbnail_path) def create_thumbnails_for_folder(source_folder, thumbnail_folder, size): Creates thumbnails for all images within a folder structure. :param source_folder: Path to the source folder containing original images :param thumbnail_folder: Path where the thumbnails will be saved :param size: Tuple (width, height) of the thumbnail if not os.path.exists(thumbnail_folder): os.makedirs(thumbnail_folder) for root, _, files in os.walk(source_folder): for file in files: if file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif', '.tiff')): original_path = os.path.join(root, file) relative_path = os.path.relpath(original_path, source_folder) thumbnail_path = os.path.join(thumbnail_folder, relative_path) thumbnail_directory = os.path.dirname(thumbnail_path) if not os.path.exists(thumbnail_directory): os.makedirs(thumbnail_directory) create_thumbnail(original_path, thumbnail_path, size)"},{"question":"Use type hints in Python to define a function that accepts a string and returns an integer.","solution":"def string_length(s: str) -> int: Returns the length of the input string s. return len(s)"},{"question":"In Python, use the re module to remove all punctuation (including underscores) from a given string, but preserve all whitespace characters (spaces, tabs, newlines). Also, modify the function to remove numbers while keeping alphabetic characters intact.","solution":"import re def remove_punctuation_and_numbers(text): Removes all punctuation (including underscores) and numbers from the given text while preserving all whitespace characters. # Remove punctuation and numbers result = re.sub(r'[^ws]|[d]', '', text) # Remove underscores since they are considered part of w (word characters) result = re.sub(r'_', '', result) return result"},{"question":"Write code for displaying the Fibonacci sequence up to the nth term, where the nth term is provided as input by the user. Additionally, implement a method to calculate the sum of all the Fibonacci numbers up to the nth term and display it. The code should also check if the nth term is a prime number and display a message indicating whether it is prime or not.","solution":"def fibonacci_sequence(n): Returns the Fibonacci sequence up to the nth term. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] sequence = [0, 1] for i in range(2, n): sequence.append(sequence[-1] + sequence[-2]) return sequence def sum_fibonacci_sequence(n): Returns the sum of the Fibonacci sequence up to the nth term. return sum(fibonacci_sequence(n)) def is_prime(num): Checks if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def display_fibonacci_info(n): Displays the Fibonacci sequence up to the nth term, the sum of the sequence, and whether the nth term is a prime number. fib_seq = fibonacci_sequence(n) fib_sum = sum_fibonacci_sequence(n) # Note: In the Fibonacci sequence, the nth term corresponds to fib_seq[n-1] due to zero indexing nth_term = fib_seq[n-1] if n > 0 else None prime_status = is_prime(nth_term) if nth_term is not None else False return { \\"sequence\\": fib_seq, \\"sum\\": fib_sum, \\"nth_term\\": nth_term, \\"is_prime\\": prime_status }"},{"question":"Check whether variable is integer, float, string, or tuple in Python. Also incorporate a functionality to check if the input variable is a nested tuple, a list, or if it's None.","solution":"def check_variable_type(var): Returns the type of the variable var. Possible types: 'integer', 'float', 'string', 'tuple', 'nested_tuple', 'list', 'none', 'unknown' if isinstance(var, int): return 'integer' elif isinstance(var, float): return 'float' elif isinstance(var, str): return 'string' elif isinstance(var, tuple): def is_nested_tuple(t): return any(isinstance(ele, tuple) for ele in t) return 'nested_tuple' if is_nested_tuple(var) else 'tuple' elif isinstance(var, list): return 'list' elif var is None: return 'none' else: return 'unknown'"},{"question":"In Python, write a code that analyzes a given text file and outputs the frequency of occurrence of each word. Additionally, include an option for the user to filter the output based on a specified minimum length of words.","solution":"def word_frequency(filename, min_length=1): Analyzes a given text file and returns the frequency of each word. Only words with at least min_length characters are included in the result. :param filename: The name of the file to analyze. :param min_length: The minimum length of words to include in the output. :return: A dictionary with words as keys and their frequencies as values. from collections import Counter import re # Read the file with open(filename, 'r') as file: text = file.read() # Use regex to find all words words = re.findall(r'bw+b', text.lower()) # Filter words based on min_length filtered_words = [word for word in words if len(word) >= min_length] # Use Counter to count the frequencies word_freq = Counter(filtered_words) return dict(word_freq)"},{"question":"Develop a python function named 'matrix_multiplication' that accepts two matrices as input and returns their product. If the input is not two proper matrices or they contain elements which are not numbers, the function should raise a ValueError. Make sure the function checks these conditions before performing multiplication.","solution":"def matrix_multiplication(matrix1, matrix2): Multiplies two matrices and returns the product. If the input is not two proper matrices or they contain elements which are not numbers, a ValueError is raised. # Check if matrix1 and matrix2 are lists if not isinstance(matrix1, list) or not isinstance(matrix2, list): raise ValueError(\\"Both inputs should be lists representing matrices.\\") # Check if matrix1 and matrix2 contain lists of numbers for row in matrix1: if not isinstance(row, list) or not all(isinstance(el, (int, float)) for el in row): raise ValueError(\\"matrix1 should be a list of lists of numbers.\\") for row in matrix2: if not isinstance(row, list) or not all(isinstance(el, (int, float)) for el in row): raise ValueError(\\"matrix2 should be a list of lists of numbers.\\") # Check if matrix dimensions match for multiplication rows_matrix1 = len(matrix1) cols_matrix1 = len(matrix1[0]) if rows_matrix1 > 0 else 0 rows_matrix2 = len(matrix2) cols_matrix2 = len(matrix2[0]) if rows_matrix2 > 0 else 0 if cols_matrix1 != rows_matrix2: raise ValueError(\\"Number of columns in matrix1 should equal number of rows in matrix2.\\") # Multiplying matrices result = [[0 for _ in range(cols_matrix2)] for _ in range(rows_matrix1)] for i in range(rows_matrix1): for j in range(cols_matrix2): for k in range(cols_matrix1): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"question":"Sort a given list of numbers from smallest to largest with Python. However, you are not allowed to use any built-in sorting functions or libraries, and you must implement your own sorting algorithm that has a time complexity of O(n^2).","solution":"def bubble_sort(numbers): Sorts a list of numbers from smallest to largest using the bubble sort algorithm. n = len(numbers) for i in range(n): for j in range(0, n-i-1): if numbers[j] > numbers[j+1]: # Swap if the element found is greater than the next element numbers[j], numbers[j+1] = numbers[j+1], numbers[j] return numbers"},{"question":"Write a function in Python that takes a list of integers as input and returns the most frequent number(s) in the list. If there are multiple numbers with the same highest frequency, return all of them in a list.","solution":"from collections import Counter def most_frequent_numbers(nums): Returns the most frequent number(s) in the list. If there are multiple numbers with the same highest frequency, returns all of them in a list. if not nums: return [] count = Counter(nums) max_freq = max(count.values()) return [k for k, v in count.items() if v == max_freq]"},{"question":"Create a Python function named \`custom_random_choice\` that takes in a list and an integer \`k\` as parameters. The function should return a list of \`k\` randomly chosen elements from the input list, without replacement. If \`k\` is greater than the length of the input list, the function should return the entire list.","solution":"import random def custom_random_choice(input_list, k): Returns a list of k randomly chosen elements from input_list without replacement. If k is greater than the length of input_list, the entire list is returned. Parameters: input_list (list): The list from which to choose elements. k (int): The number of elements to choose. Returns: list: A list of k randomly chosen elements. if k >= len(input_list): return input_list return random.sample(input_list, k)"},{"question":"I need help with a python program that can simulate a 5v fan control mechanism alongside manualoverride and overheating safety checking functionalities. In the given scenario, the fan should only reach its maximum speed of 5V when the temperature hits 80 degrees Celsius. Additionally, the program must allow for manual intervention to adjust fan speed by using input commands. Could you provide a detailed code with the necessary control flow and safety checks?","solution":"class FanControl: def __init__(self): self.fan_speed = 0 # Voltage, can range from 0 to 5 self.temperature = 0 # Celsius self.manual_override = False # If True, manual override is active self.max_speed = 5 # Max voltage for the fan def set_temperature(self, temp): self.temperature = temp if not self.manual_override: self.adjust_fan_speed_automatically() def adjust_fan_speed_automatically(self): if self.temperature >= 80: self.fan_speed = self.max_speed else: self.fan_speed = min(self.temperature / 16, self.max_speed) def manual_fan_speed(self, speed): if not (0 <= speed <= self.max_speed): raise ValueError(\\"Fan speed must be between 0 and 5V\\") self.manual_override = True self.fan_speed = speed def disable_manual_override(self): self.manual_override = False self.adjust_fan_speed_automatically() def get_fan_speed(self): return self.fan_speed"},{"question":"Generate a code to find if array A is a subset of array B.","solution":"def is_subset(A, B): Check if array A is a subset of array B. Parameters: A (list): First list. B (list): Second list. Returns: bool: True if A is a subset of B, False otherwise. set_A = set(A) set_B = set(B) return set_A.issubset(set_B)"},{"question":"Revise the following python program such that it can reverse the string using recursive calls. However, you are not allowed to use any built-in function or slicing method to reverse the string directly.","solution":"def reverse_string_recursive(s): Reverses a given string using recursion. if len(s) == 0: return s else: return reverse_string_recursive(s[1:]) + s[0]"},{"question":"How would you write a Python function to reverse the order of words in a sentence? For example, given the sentence \\"Hello world\\", the function should return \\"world Hello\\".","solution":"def reverse_words(sentence): Reverses the order of words in a given sentence. Parameters: sentence (str): The sentence to reverse. Returns: str: The sentence with the order of words reversed. words = sentence.split() reversed_words = words[::-1] reversed_sentence = ' '.join(reversed_words) return reversed_sentence"},{"question":"Develop an algorithm to build a pyramid of random numbers using 30 unique numbers from 1 to 50. Then, define a second algorithm that will calculate the maximum sum of numbers from the apex to the base of the pyramid by moving to adjacent numbers on the row below. This problem can be solved using dynamic programming methodology. I will use Python to solve this problem.","solution":"import random def build_pyramid(): Builds a pyramid using 30 unique random numbers from 1 to 50. numbers = random.sample(range(1, 51), 30) pyramid = [] index = 0 for row in range(1, 8): # 7 levels pyramid has 1+2+3+4+5+6+7 = 28 numbers pyramid.append(numbers[index:index + row]) index += row return pyramid def max_path_sum(pyramid): Calculates the maximum sum from top to bottom of the pyramid. if not pyramid: return 0 # Create a copy of the bottom row of the pyramid dp = pyramid[-1][:] # Start from the second last row and move upwards for row in range(len(pyramid) - 2, -1, -1): for col in range(len(pyramid[row])): dp[col] = pyramid[row][col] + max(dp[col], dp[col + 1]) return dp[0]"},{"question":"You are provided with a set of graph edges represented as tuples in a list. Your task is to create a Python program that dtermines if the input represents a tree or not. A tree is a specific type of graph where there are no cycles and it is connected.","solution":"def is_tree(edges): Determines if the given edges represent a tree. A tree is a connected graph with no cycles. if not edges: return True # An empty graph is trivially a tree from collections import defaultdict def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 nodes = set() for edge in edges: nodes.update(edge) num_nodes = len(nodes) parent = {node: node for node in nodes} rank = {node: 0 for node in nodes} for u, v in edges: x = find(parent, u) y = find(parent, v) if x == y: return False # Cycle detected union(parent, rank, x, y) # Check if all nodes are connected root = find(parent, next(iter(nodes))) for node in nodes: if find(parent, node) != root: return False # Disconnected return True"},{"question":"Implement an algorithm for generating a full permutation of numbers from 1 to n using a backtracking technique.","solution":"def permute(nums): Generates all permutations of the given list of numbers. def backtrack(start): if start == len(nums): result.append(nums[:]) for i in range(start, len(nums)): nums[start], nums[i] = nums[i], nums[start] backtrack(start + 1) nums[start], nums[i] = nums[i], nums[start] result = [] backtrack(0) return result"},{"question":"Write a function in Python that takes in a list of positive integers and returns the second smallest unique prime number. If there is no second smallest unique prime number, the function should return None.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def second_smallest_unique_prime(numbers): Returns the second smallest unique prime number from the list of positive integers. If there is no second smallest unique prime number, returns None. unique_primes = sorted(set(filter(is_prime, numbers))) if len(unique_primes) < 2: return None return unique_primes[1]"},{"question":"Develop a Python function that can accept two list-like structures as inputs and outputs a list that contains the intersection elements of the provided lists, emphasizing only on unique elements. Your function should avoid using direct set operations in Python and implement the logic using looping structures and conditionals for better understanding. [9, 15, 17, 26, 21], [17, 21, 26, 29, 31] should output a list of intersecting elements.","solution":"def intersect_lists(list1, list2): Returns a list of unique intersection elements from list1 and list2. intersection = [] unique_elements = {} for elem in list1: if elem in unique_elements: continue unique_elements[elem] = True for elem in list2: if elem in unique_elements and unique_elements[elem]: intersection.append(elem) unique_elements[elem] = False return intersection"},{"question":"Let's write a Python program to implement a basic blockchain algorithm for storing transaction data. I'd like each block to consist of a block ID, the hash of the block's data, the hash of the previous block, a difficulty target, and a nonce for proof-of-work. Additionally, can you include a function that allows generating transactions and adding them to the blockchain?","solution":"import hashlib import time class Block: def __init__(self, block_id, transactions, previous_hash, difficulty): self.block_id = block_id self.timestamp = time.time() self.transactions = transactions self.previous_hash = previous_hash self.difficulty = difficulty self.nonce = 0 self.hash = self.calculate_hash() def calculate_hash(self): block_content = f\\"{self.block_id}{self.timestamp}{self.transactions}{self.previous_hash}{self.nonce}\\" return hashlib.sha256(block_content.encode()).hexdigest() def mine_block(self): target = '0' * self.difficulty while self.hash[:self.difficulty] != target: self.nonce += 1 self.hash = self.calculate_hash() class Blockchain: def __init__(self, genesis_block): self.chain = [genesis_block] def add_block(self, new_block): new_block.mine_block() self.chain.append(new_block) def create_genesis_block(difficulty): return Block(0, \\"Genesis Block\\", \\"0\\", difficulty) def create_transaction_data(sender, receiver, amount): return f\\"{sender}->{receiver}:{amount}\\" def add_transaction_to_blockchain(blockchain, sender, receiver, amount, difficulty): previous_block = blockchain.chain[-1] transaction_data = create_transaction_data(sender, receiver, amount) new_block = Block(previous_block.block_id + 1, transaction_data, previous_block.hash, difficulty) blockchain.add_block(new_block)"},{"question":"Given an alphanumeric string, write a program to remove all the alphabets from it and output the resulting numeric string. If the string contains no numeric characters, output a default message stating so.","solution":"def remove_alphabets(input_string): Removes all alphabets from the input string and returns the resulting numeric string. If no numeric characters are present, returns a default message. numeric_string = ''.join(filter(str.isdigit, input_string)) if numeric_string: return numeric_string else: return \\"No numeric characters found.\\""},{"question":"Create a function in Python that prints out the numbers between 0 and 50 (inclusive).","solution":"def print_numbers_between_0_and_50(): Prints the numbers between 0 and 50 inclusive. for number in range(51): print(number)"},{"question":"Implement a mutator function for a linked list that reverses the order of its elements. Rather than using the provided length, your function should determine the length of the linked list by traversing it.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverse_linked_list(head): Reverses the order of a linked list. Args: head (ListNode): The head node of the linked list. Returns: ListNode: The new head node of the reversed linked list. prev = None current = head while current is not None: next_node = current.next current.next = prev prev = current current = next_node return prev"},{"question":"Write a Python function that takes in two arrays as parameters and returns the mean absolute difference of corresponding elements in the arrays. Make sure to account for edge cases such as unequal array lengths.","solution":"def mean_absolute_difference(arr1, arr2): Returns the mean absolute difference of corresponding elements in the arrays. If the arrays have unequal lengths, raise a ValueError. :param arr1: List[float] - First array of numbers :param arr2: List[float] - Second array of numbers :return: float - Mean absolute difference of corresponding elements if len(arr1) != len(arr2): raise ValueError(\\"Input arrays must have the same length.\\") total_diff = 0 for a, b in zip(arr1, arr2): total_diff += abs(a - b) return total_diff / len(arr1)"},{"question":"Input two ascending-ordered integer lists of different lengths. Your task is to write a function that merges these two lists into a single list. This new list should also be ordered in ascending sequence. Avoid using built-in functions for merging or sorting.","solution":"def merge_ascending_lists(list1, list2): Merges two ascending-ordered integer lists into a single ascending-ordered list. merged_list = [] i, j = 0, 0 # Merge the lists until one of them is fully traversed while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append the remaining elements of list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Append the remaining elements of list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Please identify the Python code that correctly employs a generator to yield the Fibonacci sequence up to the nth term. Additionally, ensure the implementation takes into account memory efficiency while maintaining a good computational complexity.","solution":"def fibonacci_generator(n): Yields the Fibonacci sequence up to the nth term. Args: n (int): The number of terms to generate. Yields: int: The next number in the Fibonacci sequence. a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b"},{"question":"Write a Python program that not only reverses the digits of a given integer, but also counts the number of odd and even digits in the number. Moreover, the program should also provide the sum of all digits. If the given number is negative, your program must continue processing its absolute value, consider the '-' sign as an element apart from the digits.","solution":"def process_number(num): Reverses the digits of the given integer, counts the number of odd and even digits, and calculates the sum of all digits. If the number is negative, the '-' sign is considered as an element apart from the digits. Params: - num (int): The integer to process Returns: - (dict): A dictionary with the reversed number, count of odd digits, count of even digits, and the sum of all digits. if num < 0: is_negative = True num = -num else: is_negative = False original_num = num reversed_num = 0 odd_count = 0 even_count = 0 digit_sum = 0 while num > 0: digit = num % 10 reversed_num = reversed_num * 10 + digit if digit % 2 == 0: even_count += 1 else: odd_count += 1 digit_sum += digit num = num // 10 if is_negative: reversed_str = '-' + str(reversed_num) else: reversed_str = str(reversed_num) return { \\"reversed_num\\": reversed_str, \\"odd_count\\": odd_count, \\"even_count\\": even_count, \\"digit_sum\\": digit_sum }"},{"question":"I need a code that will divide a list of number into multiple sublist of maximum 5 elements while maintaining the original order of the elements.","solution":"def divide_list(lst): Divides a list of numbers into multiple sublists of maximum 5 elements, maintaining the original order of the elements. sublists = [] for i in range(0, len(lst), 5): sublists.append(lst[i:i + 5]) return sublists"},{"question":"5. Create a function to encrypt a string using ROT13 cipher and return the result.","solution":"def rot13(text): Encrypts the given text using the ROT13 cipher. result = [] for char in text: if 'a' <= char <= 'z': offset = ord('a') result.append(chr((ord(char) - offset + 13) % 26 + offset)) elif 'A' <= char <= 'Z': offset = ord('A') result.append(chr((ord(char) - offset + 13) % 26 + offset)) else: result.append(char) return ''.join(result)"},{"question":"Create a spell checker for Swedish words using a Trie data structure. Your solution should be optimized for efficient insertion and searching of words.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): Inserts a word into the Trie. current = self.root for letter in word: if letter not in current.children: current.children[letter] = TrieNode() current = current.children[letter] current.is_end_of_word = True def search(self, word): Returns True if the word is in the Trie, otherwise False. current = self.root for letter in word: if letter not in current.children: return False current = current.children[letter] return current.is_end_of_word def starts_with(self, prefix): Returns True if there is any word in the Trie that starts with the given prefix. current = self.root for letter in prefix: if letter not in current.children: return False current = current.children[letter] return True"},{"question":"Given two dictionaries, \`dict1\` and \`dict2\`, write a Python program that ensures all keys in \`dict1\` exist in \`dict2\` and their corresponding values are equal. If a key in \`dict1\` has a different value in \`dict2\`, update its value in \`dict2\` to match the one in \`dict1\`. If a key is present in \`dict1\` but not in \`dict2\`, add the key-value pair to \`dict2\`. If a key in \`dict2\` does not exist in \`dict1\`, do not include it in the final \`dict2\`.","solution":"def merge_dicts(dict1, dict2): Ensure all keys in dict1 exist in dict2 with the same values. Update the values or add missing keys to dict2 from dict1. Remove keys in dict2 that do not exist in dict1. Args: dict1 (dict): The source dictionary with the correct key-value pairs. dict2 (dict): The target dictionary to be updated. Returns: dict: The updated dict2. result = {} for key in dict1: result[key] = dict1[key] return result"},{"question":"Write a Python function that performs the operation of heapsort on a given list. After implementing the heapsort algorithm, modify your function to also handle the scenario where the input list contains duplicate elements. Ensure that your function maintains the stability of the sort (i.e., the order of equal elements is not changed). The input list needs to be sorted in ascending order. Additionally, write test scenarios to validate the correctness of your implementation.","solution":"def heapsort(arr): Perform heapsort on the input list \`arr\`. Ensure the sort maintains the stability (order of equal elements). def heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 # If left child exists and is greater than root if left < n and arr[left] > arr[largest]: largest = left # If right child exists and is greater than largest so far if right < n and arr[right] > arr[largest]: largest = right # If largest is not root if largest != i: arr[i], arr[largest] = arr[largest], arr[i] # Swap # Recursively heapify the affected sub-tree heapify(arr, n, largest) def heap_sort(arr): n = len(arr) # Build a maxheap for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) # One by one extract elements for i in range(n - 1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # Swap heapify(arr, i, 0) # Handling duplicates and ensuring stability indexed_arr = [(value, index) for index, value in enumerate(arr)] heap_sort(indexed_arr) return [value for value, index in indexed_arr]"},{"question":"Write a python function that takes an integer and returns the sum of the digits of the given number. But your function has to deal with negative numbers as well. If the entered number is a negative number, return the sum of the absolute digits. Now, write unit tests for the same function using the unittest module in Python.","solution":"def sum_of_digits(n): Returns the sum of the digits of the given number. If the number is negative, it deals with absolute value of the digits. n = abs(n) # Convert to absolute value return sum(int(digit) for digit in str(n))"},{"question":"Write a program to reverse the given singly linked list without using extra space.","solution":"class ListNode: def __init__(self, value=0, next_node=None): self.value = value self.next = next_node def reverse_linked_list(head): Reverses the given singly linked list. :param head: ListNode The head node of the singly linked list. :return: ListNode The new head node of the reversed singly linked list. prev = None current = head while current is not None: next_node = current.next # temporarily store the next node current.next = prev # reverse the current node prev = current # move prev to current current = next_node # move to next node return prev"},{"question":"Write a python code that performs a web extraction of historical exchange rates from a URL source. Include functions that allow the user to input the start and end dates of the period they wish to extract rates for. Add a try-except loop to ensure that the provided URL is accessible. Additionally, the resulting data should be cleanly formatted and outputted into a CSV file, with separate columns for the date and exchange rate.","solution":"import requests import pandas as pd from datetime import datetime def fetch_exchange_rates(url, start_date, end_date): Fetch historical exchange rates from a specified URL within a given date range. Args: url (str): The URL to fetch data from. start_date (str): The start date in the format 'YYYY-MM-DD'. end_date (str): The end date in the format 'YYYY-MM-DD'. Returns: pd.DataFrame: A DataFrame containing the dates and exchange rates. try: response = requests.get(url) response.raise_for_status() except requests.RequestException as e: print(f\\"An error occurred: {e}\\") return None data = response.json() records = [] for item in data: record_date = datetime.strptime(item['date'], '%Y-%m-%d').date() if start_date <= record_date <= end_date: records.append({'Date': item['date'], 'ExchangeRate': item['rate']}) df = pd.DataFrame(records) return df def export_to_csv(df, filename): Export a DataFrame to a CSV file. Args: df (pd.DataFrame): The DataFrame to export. filename (str): The name of the CSV file. df.to_csv(filename, index=False)"},{"question":"Given two sets \`a\` and \`b\`, write a Python program to find their union, intersection, difference, and symmetric difference without using any built-in methods or libraries.","solution":"def set_union(a, b): Returns the union of sets a and b. result = a.copy() for element in b: if element not in result: result.add(element) return result def set_intersection(a, b): Returns the intersection of sets a and b. result = set() for element in a: if element in b: result.add(element) return result def set_difference(a, b): Returns the difference of sets a and b (elements in a but not in b). result = set() for element in a: if element not in b: result.add(element) return result def set_symmetric_difference(a, b): Returns the symmetric difference of sets a and b (elements in either a or b but not both). result = set() for element in a: if element not in b: result.add(element) for element in b: if element not in a: result.add(element) return result"},{"question":"Generate a function that takes a nested dictionary, a key and a value, and updates the dictionary with the provided key-value pair. The function should maintain the nested structure of the dictionary.","solution":"def update_nested_dict(nested_dict, key, value): Updates the nested dictionary with the provided key-value pair. If the key already exists, updates its value. If the key doesn't exist, adds the key-value pair. Parameters: nested_dict (dict): The input nested dictionary. key (str): The key to be updated or added. value: The value to be set for the provided key. Returns: None (The dictionary is updated in place). keys = key.split(\\".\\") d = nested_dict for k in keys[:-1]: if k not in d: d[k] = {} d = d[k] d[keys[-1]] = value"},{"question":"Check if an input array contains any duplicate elements using Python.","solution":"def contains_duplicates(arr): Checks if the input array contains any duplicate elements. Parameters: arr (list): List of elements to check for duplicates. Returns: bool: True if duplicates are found, False otherwise. seen = set() for element in arr: if element in seen: return True seen.add(element) return False"},{"question":"Given a range of numbers from 'start' to 'end', write a Python function to print all the even numbers within this range. If the start number is greater than the end number, the function should print an error message. If the range does not contain any even numbers, the function should print a specific message indicating this situation. The function should also handle any potential exceptions that might occur during its execution.","solution":"def print_even_numbers(start, end): Prints all even numbers in the range from 'start' to 'end'. If 'start' is greater than 'end', prints an error message. If there are no even numbers in the range, prints a specific message. if start > end: print(\\"Error: start number is greater than end number.\\") return even_numbers = [num for num in range(start, end+1) if num % 2 == 0] if not even_numbers: print(\\"No even numbers in the given range.\\") else: for num in even_numbers: print(num)"},{"question":"Write a code to multiply two numbers without using the multiply operator. Additionally, you are not allowed to use any looping constructs (e.g., for, while) or any built-in functions or methods that directly perform multiplication.","solution":"def multiply(a, b): Multiplies two integers without using the multiply operator. if a == 0 or b == 0: return 0 def add(x, y): while y != 0: carry = x & y x = x ^ y y = carry << 1 return x result = 0 is_negative = False if (a < 0 and b > 0) or (a > 0 and b < 0): is_negative = True a, b = abs(a), abs(b) for _ in range(b): result = add(result, a) return -result if is_negative else result"},{"question":"Create (ascular) a function that takes an array of integers and returns the second largest number. However, you cannot use any built-in sorting functions or methods, and the function should have a time complexity of O(n). Additionally, you cannot use any additional data structures or variables to store intermediate results.","solution":"def second_largest(arr): Returns the second largest number in the array. The function assumes that there are at least two unique elements in the array. if len(arr) < 2: raise ValueError(\\"Array must contain at least two elements\\") first_largest = second_largest = float('-inf') for number in arr: if number > first_largest: second_largest = first_largest first_largest = number elif first_largest > number > second_largest: second_largest = number if second_largest == float('-inf'): raise ValueError(\\"Array must contain at least two unique elements\\") return second_largest"},{"question":"Create a REST API using Flask that will accepts text input and will return the number of words in the text.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/count-words', methods=['POST']) def count_words(): data = request.get_json() text = data.get('text', '') word_count = len(text.split()) return jsonify({'word_count': word_count}) if __name__ == '__main__': app.run(debug=True)"},{"question":"Develop a code that accepts the input of three numerical values of type integer, and returns the largest among those.","solution":"def find_largest(a, b, c): Returns the largest of the three integers a, b, and c. return max(a, b, c)"},{"question":"Write a function that sorts an array of strings in ascending order using a sorting algorithm of your choice (excluding in-built sorting functions). But the twist is not just to sort the array, but also to count and print out the number of string comparisons made during the sorting process. You should also handle potential exceptions like non-string input. For example, for the input array ['zebra', 'apple', 99, 'orange'], your function should filter out the non-string values, sort the left string elements, and print out the total number of comparisons.","solution":"def bubble_sort_strings(arr): Sorts an array of strings in ascending order using bubble sort algorithm. Filters out non-string elements, sorts the list, and prints out the number of comparisons made during the sorting process. # Filter out non-string elements arr = [item for item in arr if isinstance(item, str)] n = len(arr) comparison_count = 0 # Bubble Sort Algorithm for i in range(n): for j in range(0, n-i-1): comparison_count += 1 if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] print(f\\"Number of comparisons: {comparison_count}\\") return arr"},{"question":"Given a list, write a Python function that not only reverses the elements of the list in place but also finds the mean of the numeric elements. Your function should handle potential exceptions caused by non-numeric types gracefully, not allowing them to affect the calculation of the mean. Your function should also be able to handle boundary conditions, such as empty lists or lists solely consisting of non-numeric values.","solution":"def reverse_and_mean(lst): Reverses the elements of the list in place and finds the mean of numeric elements. Non-numeric elements are ignored in the mean calculation. lst.reverse() numeric_elements = [x for x in lst if isinstance(x, (int, float))] if not numeric_elements: return None return sum(numeric_elements) / len(numeric_elements)"},{"question":"Write a script to sort an array of positive integers in descending order, using only recursion and without using any built-in sorting functions or data structures. The array can contain duplicate values. The solution should have a time complexity of O(n^2) and a space complexity of O(n).","solution":"def recursive_sort_desc(arr): if len(arr) <= 1: return arr pivot = arr[0] greater_than_pivot = [x for x in arr[1:] if x > pivot] less_than_or_equal_to_pivot = [x for x in arr[1:] if x <= pivot] return recursive_sort_desc(greater_than_pivot) + [pivot] + recursive_sort_desc(less_than_or_equal_to_pivot)"},{"question":"How can I implement a sliding window algorithm to detect the number of times a specific pattern appears in a given string, while also being able to handle overlapping occurrences? Can you provide a detailed explanation, including code that demonstrates how to compute the result for a given input? What is the optimal approach to this problem, and are there any edge cases that need to be considered? Please provide a thorough analysis of the algorithm, including its time complexity and any potential optimizations that may be available.","solution":"def count_pattern_occurrences(text, pattern): Returns the number of times the pattern appears in the text, including overlapping occurrences. if not text or not pattern: return 0 count = 0 len_text = len(text) len_pattern = len(pattern) for i in range(len_text - len_pattern + 1): if text[i:i + len_pattern] == pattern: count += 1 return count"},{"question":"Implement an algorithm for finding the shortest path in a maze using Breadth-First Search (BFS) and print the path.","solution":"from collections import deque def shortest_path_in_maze(maze, start, end): Find the shortest path in a maze using Breadth-First Search (BFS). :param maze: List of lists representing the maze (1 for open path, 0 for walls). :param start: Tuple representing the start cell (row, col). :param end: Tuple representing the end cell (row, col). :return: List of tuples representing the path from start to end (if exists), otherwise empty list. rows, cols = len(maze), len(maze[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(start, [start])]) visited = set([start]) while queue: (current_row, current_col), path = queue.popleft() if (current_row, current_col) == end: return path for direction in directions: next_row, next_col = current_row + direction[0], current_col + direction[1] if 0 <= next_row < rows and 0 <= next_col < cols and maze[next_row][next_col] == 1 and (next_row, next_col) not in visited: visited.add((next_row, next_col)) queue.append(((next_row, next_col), path + [(next_row, next_col)])) return [] # Example use case: # maze = [ # [1, 0, 0, 0, 0], # [1, 1, 0, 1, 1], # [0, 1, 0, 0, 1], # [1, 1, 1, 0, 1], # [0, 0, 1, 1, 1] # ] # start = (0, 0) # end = (4, 4) # print(shortest_path_in_maze(maze, start, end)) # [(0, 0), (1, 0), (1, 1), (2, 1), (3, 1), (3, 0), (3, 1), (3, 2), (4, 3), (4, 4)]"},{"question":"Create a function that takes a list, an item, and a boolean flag as arguments. If the flag is true, it should add the item to the beginning of the list. If the flag is false, it should add the item to the end of the list. For this exercise, do not use built-in Python methods like \`.append()\` or \`.insert()\` to add items to the list. Instead, you should manually manipulate the list to achieve the desired outcomes. Additionally, ensure that your implementation allows for the list to contain any data type.","solution":"def add_item(lst, item, flag): Adds an item to the beginning or end of the list based on the flag. Parameters: lst (list): The list to which the item should be added. item (any): The item to be added to the list. flag (bool): If True, adds the item to the beginning of the list. If False, adds the item to the end of the list. Returns: list: The modified list with the item added. if flag: lst[:] = [item] + lst else: lst[:] = lst + [item] return lst"},{"question":"Given a doubly linked list implementation, identify the index of a unique node without traversing from the head but also consider a case when there are repeated values. How might you handle these situations?","solution":"class Node: def __init__(self, value): self.value = value self.prev = None self.next = None def get_node_index(head, node): Identifies the index of a target node in a doubly linked list starting from the head. :param head: The head node of the doubly linked list. :param node: The target node whose index we want to find. :return: The index of the target node in the doubly linked list. current_index = 0 current_node = head while current_node: if current_node is node: return current_index current_index += 1 current_node = current_node.next return -1 # Returns -1 if the node is not in the list"},{"question":"Write a Python function 'removeVowels' that takes a string and returns the string with all vowels removed. For the purpose of this question, 'y' is not considered a vowel.","solution":"def remove_vowels(s): Returns a string with all vowels removed. vowels = \\"aeiouAEIOU\\" return ''.join([char for char in s if char not in vowels])"},{"question":"Write a Python function called \`remove_duplicates_sorted\` that takes a sorted list \`lst\` as input and returns the list with duplicate elements removed, while maintaining the original sorted order.","solution":"def remove_duplicates_sorted(lst): Takes a sorted list and returns a new list with duplicate elements removed, maintaining the original sorted order. if not lst: return [] result = [lst[0]] for i in range(1, len(lst)): if lst[i] != lst[i - 1]: result.append(lst[i]) return result"},{"question":"Create a function in Python that takes two list arguments and returns a dictionary with the elements of the first list as keys and the elements of the second list as corresponding values. The function should also include error handling to deal with potential mismatched lengths of the input lists, returning a clear warning message and a blank dictionary in such cases.","solution":"def lists_to_dict(keys, values): Returns a dictionary with elements of the first list as keys and elements of the second list as corresponding values. If the lengths of the input lists do not match, it returns a clear warning message and an empty dictionary. if len(keys) != len(values): return \\"Warning: The lengths of the input lists do not match.\\", {} return dict(zip(keys, values))"},{"question":"Reverse the order of elements in an array without using any built-in functions or creating a new array. The solution should have a time complexity of O(n) and should not use extra space beyond a few variables. The array will contain integers ranging from -10^9 to 10^9.","solution":"def reverse_array(arr): Reverses the order of elements in the array in place without using extra space. start = 0 end = len(arr) - 1 while start < end: # Swap the elements at the start and end indices arr[start], arr[end] = arr[end], arr[start] # Move towards the middle start += 1 end -= 1 return arr"},{"question":"Write a python function that downloads an image from a URL and stores the file locally on disk.","solution":"import requests def download_image(url, file_path): Downloads an image from the given URL and stores it locally at the given file path. :param url: URL of the image to download :param file_path: The path where the image will be saved response = requests.get(url) if response.status_code == 200: with open(file_path, 'wb') as f: f.write(response.content) else: raise Exception(f\\"Failed to download image. Status code: {response.status_code}\\")"},{"question":"Create a Python program to reverse a given list using a recursive function.","solution":"def reverse_list_recursive(lst): Recursively reverses a given list. :param lst: List of elements to be reversed. :return: A new list with the elements in reverse order. # Base case: if the list is empty or has one element, return it as is if len(lst) <= 1: return lst # Recursive case: reverse the rest of the list and append the first element at the end return reverse_list_recursive(lst[1:]) + [lst[0]]"},{"question":"Code an algorithm in Python to compute the Fibonacci sequence, considering memory efficiency. Also, implement a feature to return the sequence in reverse order. A number n will be given as input, return the Fibonacci sequence up to nth number in reverse order.","solution":"def fibonacci_reverse(n): Computes the Fibonacci sequence up to the nth number and returns it in reverse order. :param int n: The length of the Fibonacci sequence to compute. :return: A list of the Fibonacci sequence in reverse order. if n <= 0: return [] fib = [0] * n fib[0] = 0 if n > 1: fib[1] = 1 for i in range(2, n): fib[i] = fib[i - 1] + fib[i - 2] return fib[::-1]"},{"question":"Write a function in Python that takes an array of integers and its size as arguments and returns the maximum value in the array.","solution":"def find_max(arr): Returns the maximum value in the array. Parameters: arr (list of int): The array of integers. Returns: int: The maximum value in the array. if not arr: raise ValueError(\\"Array cannot be empty\\") return max(arr)"},{"question":"Develop a Python function that takes multiple sentences as input. The function should output a dictionary where the keys are the distinct words from the sentences and the values are their respective counts, excluding punctuation marks. Ensure the words are separated by whitespace and lists or tuples are not treated as separate words.","solution":"import re from collections import Counter def word_count(sentences): Takes a string of sentences and returns a dictionary where the keys are distinct words and values are their respective counts. Excludes punctuation marks. # Remove punctuation marks using regex clean_text = re.sub(r'[^ws]', '', sentences.lower()) # Split the text into words words = clean_text.split() # Count the occurrences of each word word_counts = Counter(words) return dict(word_counts)"},{"question":"Design a Doubly Linked List implementation using Python, including methods to insert, delete, and search nodes. Also, discuss the use of sentinels and their effect on the complexity and efficiency of the data structure's operations.","solution":"class Node: def __init__(self, data=None): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): # Using sentinels for head and tail for easier insertion and deletion self.head = Node() self.tail = Node() self.head.next = self.tail self.tail.prev = self.head def insert(self, data): new_node = Node(data) last = self.tail.prev last.next = new_node new_node.prev = last new_node.next = self.tail self.tail.prev = new_node def delete(self, data): current = self.head.next while current != self.tail: if current.data == data: current.prev.next = current.next current.next.prev = current.prev return True current = current.next return False def search(self, data): current = self.head.next while current != self.tail: if current.data == data: return True current = current.next return False # The use of sentinels (head and tail) simplifies the code for insertion, deletion, and traversal: # - No need to check if the list is empty. # - No need to handle special cases for head and tail separately. # This positively impacts the complexity, making the code cleaner and potentially reducing bugs. # The time complexity for insert, delete, and search operations in a doubly linked list is as follows: # - Insert: O(1) - inserting at the end of the list since we maintain a reference to the tail. # - Delete: O(n) - needs to find the node to be deleted which requires traversal. # - Search: O(n) - requires traversal to find the node."},{"question":"Create a function named \\"is_armstrong_number\\" that takes an integer parameter \\"num\\" and returns True if the number is an Armstrong number, and False otherwise.","solution":"def is_armstrong_number(num): Checks if a given number is an Armstrong number. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits. Parameters: num (int): The number to check. Returns: bool: True if the number is an Armstrong number, False otherwise. # Convert the number to string to easily iterate over digits digits = str(num) power = len(digits) armstrong_sum = sum(int(digit) ** power for digit in digits) return armstrong_sum == num"},{"question":"Create an ASCII rainbow using Python programming. Your program should take input from the user to specify the length of the rainbow and output an ASCII representation of the rainbow with that length. The rainbow should have a maximum of 7 colors and should be displayed in order (red, orange, yellow, green, blue, indigo, violet). Make sure to handle input validation and provide clear error messages if the user enters an invalid value.","solution":"def create_ascii_rainbow(length): Creates an ASCII rainbow with the given length. Args: length (int): The length of the rainbow. Returns: str: ASCII representation of the rainbow with the specified length. if not isinstance(length, int) or length <= 0: raise ValueError(\\"Input length should be a positive integer.\\") colors = [\\"red\\", \\"orange\\", \\"yellow\\", \\"green\\", \\"blue\\", \\"indigo\\", \\"violet\\"] rainbow = [] for color in colors: rainbow.append(color[:length].ljust(length)) return \\"n\\".join(rainbow) # Example usage: # print(create_ascii_rainbow(10))"},{"question":"Suggest a Python data structure for efficiently storing and retrieving a large set of words, with the additional requirement of supporting prefix-based searches. A suitable data structure for this scenario is a Trie (also known as a Prefix Tree). Tries are efficient for storing and searching for words, especially when prefix-based searches are required.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word): Inserts a word into the trie. node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def search(self, word): Returns True if the word is in the trie, and False otherwise. node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.is_end_of_word def starts_with(self, prefix): Returns True if there is any word in the trie that starts with the given prefix, and False otherwise. node = self.root for char in prefix: if char not in node.children: return False node = node.children[char] return True"},{"question":"Create a python program to generate an array filled with the first N Fibonacci numbers","solution":"def generate_fibonacci(n): Generate an array with the first N Fibonacci numbers. :param n: Number of Fibonacci numbers to generate. :return: List of first N Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_list = [0, 1] for i in range(2, n): fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"question":"Consider a situation where an AI model must be built to determine the probability of an asteroid impact event based on various factors. Create a simple ML model (linear regression) that takes the following inputs: asteroid diameter, distance from Earth, relative velocity, and size of the impactor. The model should return the probability of impact on a scale from 0 to 1. To solve this problem, import required libraries and define the model, compile it, and create a function that will take the necessary inputs and return the probability of an asteroid impact event.","solution":"import numpy as np from sklearn.linear_model import LinearRegression # Define the simple ML model using linear regression. class AsteroidImpactPredictor: def __init__(self): self.model = LinearRegression() def train(self, X, y): Train the linear regression model. X: np.ndarray, shape (n_samples, n_features) y: np.ndarray, shape (n_samples,) self.model.fit(X, y) def predict(self, diameter, distance, velocity, impactor_size): Predict the probability of asteroid impact based on the inputs. diameter: float, asteroid diameter distance: float, distance from Earth velocity: float, relative velocity impactor_size: float, size of the impactor Returns: float: probability of asteroid impact event on a scale from 0 to 1 features = np.array([[diameter, distance, velocity, impactor_size]]) probability = self.model.predict(features)[0] probability = np.clip(probability, 0, 1) # Ensure the probability is within [0, 1] return probability # Example usage: # predictor = AsteroidImpactPredictor() # X_train = np.array([[100, 1e6, 25, 0.5], [50, 2e6, 20, 0.2], ...]) # y_train = np.array([0.2, 0.1, ...]) # predictor.train(X_train, y_train) # probability = predictor.predict(120, 1.5e6, 22, 0.4)"},{"question":"Reverse the order of the values in the input list without using any built-in Python functions or methods, and ensure that all negative numbers in the list are placed at the end of the reversed list.","solution":"def custom_reverse_and_reorder_negatives(lst): Reverses the order of the values in the input list and places all negative numbers at the end of the reversed list. Args: lst (list): List of integers Returns: list: Reversed list with all negative numbers at the end # Reverse the list without using built-in functions reversed_list = [] for i in range(len(lst)-1, -1, -1): reversed_list.append(lst[i]) # Separate negative and non-negative numbers non_negative = [] negative = [] for num in reversed_list: if num < 0: negative.append(num) else: non_negative.append(num) # Combine non-negative numbers with negative numbers at the end return non_negative + negative"},{"question":"Implement a function in Python to reverse the contents of a given dictionary, ensuring that all keys and values are of type string. The function should also handle dictionaries nested within the original dictionary and reverse their contents as well. The input dictionary should have at least 5 key-value pairs. The function should check for any duplicate values in the dictionary and remove them before reversing the contents. Additionally, the function should validate that all keys in the dictionary are in the format of lowercase alphanumeric characters with a minimum length of 3 characters. The time complexity of the function should be O(n), where n is the number of key-value pairs in the dictionary.","solution":"import re def is_valid_key(key): Checks if the key is a valid lowercase alphanumeric string with a minimum length of 3 characters. return isinstance(key, str) and bool(re.match(r'^[a-z0-9]{3,}', key)) def reverse_dict(d): Reverses the contents of a dictionary ensuring that all keys and values are strings, all keys are valid, and removes duplicate values. Supports nested dictionaries. if not isinstance(d, dict): raise ValueError(\\"Input must be a dictionary\\") new_dict = {} seen_values = set() def reverse_helper(d): Helper function to perform the actual reversing for nested dictionaries. for key, value in d.items(): if not is_valid_key(key): raise ValueError(f\\"Invalid key: {key}\\") if isinstance(value, dict): value = reverse_helper(value) if isinstance(value, str) and value not in seen_values: seen_values.add(value) new_dict[value] = key return new_dict return reverse_helper(d)"},{"question":"Create a python function that takes a single integer as an argument and returns the corresponding digit as a string, but only if the digit is prime. The function should also check if the input is within the range of 1 to 10^9, inclusive, and raise an exception if it is outside this range. Additionally, optimize your solution to have a time complexity of O(sqrt(n)), where n is the input number.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def single_prime_digit(n): Given a single integer, returns the corresponding digit as a string if it is prime. Raises an exception if the input is outside the range of 1 to 10^9. # Check if the input is within the specified range if not (1 <= n <= 10**9): raise ValueError(\\"Input is outside the valid range of 1 to 10^9\\") # Check if the input is a prime digit. if is_prime(n) and n < 10: return str(n) return None"},{"question":"Write a function to select the first non-repeating character from a given string. Additionally, assess if utilizing a less common data structure may optimize your solution. Consider the impact on time complexity.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string. If all characters are repeating, returns None. from collections import OrderedDict char_count = OrderedDict() # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char, count in char_count.items(): if count == 1: return char return None"},{"question":"Write a Python script to calculate the Kolmogorov-Smirnov test for two one-dimensional datasets. These datasets should be represented as Python lists and passed as arguments to a function. Additionally, the script should have error checking for conditions this test can't be properly executed, such as if either list is empty, the lists are of vastly differing sizes, or the elements in lists are not numbers. Offer an erroneous piece of code as a point of reference and detail what is wrong with it. The output should be a clear explanation of the issue, or the test statistics and p-value if the computation was successful.","solution":"from scipy.stats import ks_2samp def kolmogorov_smirnov_test(data1, data2): Perform the Kolmogorov-Smirnov test for two one-dimensional datasets. Parameters: data1 (list): The first dataset, should be a list of numbers. data2 (list): The second dataset, should be a list of numbers. Returns: tuple: KS test statistic and p-value if successful, or error message if unsuccessful. # Error checking if not data1 or not data2: return \\"Both datasets must be non-empty.\\" if len(data1) < 3 or len(data2) < 3: return \\"Dataset sizes must be at least 3.\\" if len(data1) / len(data2) > 10 or len(data2) / len(data1) > 10: return \\"Dataset sizes are too different. They should be comparable in size.\\" if not all(isinstance(i, (int, float)) for i in data1 + data2): return \\"Datasets must contain only numbers.\\" # Perform KS test ks_statistic, p_value = ks_2samp(data1, data2) return ks_statistic, p_value"},{"question":"Write a Python code to calculate the mean of a given array, but without using any built-in functions or libraries for calculating the sum or length of the array.","solution":"def calculate_mean(array): Returns the mean of the given array. total_sum = 0 count = 0 for number in array: total_sum += number count += 1 if count == 0: raise ValueError(\\"The array is empty, cannot calculate mean.\\") mean = total_sum / count return mean"},{"question":"Write a Python program that prints the string s in reverse, but do not use any built-in functions or methods for reversing the string. Additionally, do not use any data structures like lists or arrays. Your solution should have a time complexity of O(n) where n is the length of the string.","solution":"def reverse_string(s): Returns the string s in reverse order without using built-in functions or additional data structures. reversed_s = \\"\\" length = len(s) for i in range(length - 1, -1, -1): reversed_s += s[i] return reversed_s"},{"question":"Write a script in Python that can determine if the given year is a leap year or not. Furthermore, your function should validate if the input is indeed a valid year in the Gregorian Calendar (i.e., it should be an integer and should not be less than 1). The judgement should be displayed as 'Invalid Year', 'Leap Year' or 'Not a Leap Year'.","solution":"def determine_leap_year(year): Determines if a year is a leap year or not, and validates the input year. :param year: The year to check. :return: 'Invalid Year' if the year is invalid, 'Leap Year' if the year is a leap year, or 'Not a Leap Year' otherwise. if not isinstance(year, int) or year < 1: return 'Invalid Year' if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 'Leap Year' else: return 'Not a Leap Year'"},{"question":"Create a Python code to calculate the number of occurrences of a specific character in a given string, but you are not allowed to use any built-in functions or methods that directly count the occurrences of the character in the string. The code should be efficient and should not have a time complexity higher than O(n), where n is the length of the string.","solution":"def count_char_occurrences(s, char): Counts the number of occurrences of a specific character in a given string. Parameters: s (str): The string in which to count the occurrences. char (str): The character to count in the string. Returns: int: The number of occurrences of the specified character in the string. count = 0 for c in s: if c == char: count += 1 return count"},{"question":"Design a simple FizzBuzz function to determine if a number is divisible by 3 or 5. The function should also handle negative numbers and return \\"Fizz\\" if the number is divisible by 3, \\"Buzz\\" if the number is divisible by 5, and \\"FizzBuzz\\" if the number is divisible by both 3 and 5. If the number is not divisible by either 3 or 5, the function should return the number itself as a string.","solution":"def fizz_buzz(number): Determines if the number is divisible by 3, 5, or both, and returns the appropriate FizzBuzz string. Args: - number (int): The number to check. Returns: - str: \\"Fizz\\" if number is divisible by 3, \\"Buzz\\" if number is divisible by 5, \\"FizzBuzz\\" if number is divisible by both 3 and 5, or the number itself as a string if none. if number % 3 == 0 and number % 5 == 0: return \\"FizzBuzz\\" elif number % 3 == 0: return \\"Fizz\\" elif number % 5 == 0: return \\"Buzz\\" else: return str(number)"},{"question":"Write a recursive function in Python to find the nth Fibonacci number, where n is a positive integer.","solution":"def fibonacci(n): Returns the nth Fibonacci number, where n is a positive integer. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if n == 1: return 0 elif n == 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"question":"Write a code in Python for comparing two strings without using a built-in function.","solution":"def compare_strings(str1, str2): Compares two strings lexicographically without using built-in functions. Returns: -1 if str1 < str2 0 if str1 == str2 1 if str1 > str2 min_len = min(len(str1), len(str2)) for i in range(min_len): if str1[i] < str2[i]: return -1 elif str1[i] > str2[i]: return 1 if len(str1) < len(str2): return -1 elif len(str1) > len(str2): return 1 else: return 0"},{"question":"Given a section of erroneous python code, Identify the bugs in and fix the function that's supposed to trim a given string of text. The function should trim all punctuation and digits from the string of text, and also correct any double (or more) consecutive white spaces in the string before returning the result. To clarify, all leading and trailing white spaces should be removed too.","solution":"import re import string def trim_text(text): Trims all punctuation and digits from the string of text, and corrects any double (or more) consecutive white spaces in the string before returning the result. All leading and trailing white spaces should be removed too. # Remove punctuation and digits text = re.sub(f\\"[{re.escape(string.punctuation + string.digits)}]\\", \\"\\", text) # Replace multiple consecutive white spaces with a single space text = re.sub(r's+', ' ', text) # Remove leading and trailing white spaces return text.strip()"},{"question":"Design a Python function snippet to Calculate High Education: Course Enrollment for Engineer for Experts. Implement if/else or switch/case statements to handle different conditions related to the Consent. Provide detailed comments explaining your control flow and the reasoning behind each decision.","solution":"def course_enrollment_for_expert(is_engineer, has_consent, education_level): Determines whether an individual can enroll in the course for experts based on their background. Args: is_engineer (bool): Whether the individual is an engineer. has_consent (bool): Whether the individual has consent for enrollment. education_level (str): The highest education level attained by the individual. Returns: str: Message indicating the enrollment status. if is_engineer: if has_consent: if education_level == \\"Bachelor\\" or education_level == \\"Master\\" or education_level == \\"PhD\\": return \\"Eligible for course enrollment.\\" else: return \\"Ineligible due to insufficient education level.\\" else: return \\"Ineligible due to lack of consent.\\" else: return \\"Ineligible due to non-engineering background.\\""},{"question":"Write a Python function that takes three parameters: 'my_list', a list of integers; 'index1' and 'index2', two positive integers. The function should check if the values at positions 'index1' and 'index2' in 'my_list' are even numbers. Note: Python uses zero-based indexing.","solution":"def are_both_indices_even(my_list, index1, index2): This function checks if the values at positions 'index1' and 'index2' in 'my_list' are even numbers. Parameters: my_list (list of int): The list to check. index1 (int): The first index to check. index2 (int): The second index to check. Returns: bool: True if both values are even, False otherwise. if index1 >= len(my_list) or index2 >= len(my_list): return False return my_list[index1] % 2 == 0 and my_list[index2] % 2 == 0"},{"question":"Write a Python program to compute the roots of a quadratic equation, considering also complex roots. Implement necessary exception handling for invalid inputs and test for a range of equations with differing coefficients.","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0 and returns the roots. The roots can be real or complex. Parameters: a (float): Coefficient of x^2 b (float): Coefficient of x c (float): Constant term Returns: tuple: A tuple containing both roots (complex numbers). Raises: ValueError: If 'a' is zero (not a quadratic equation). if a == 0: raise ValueError(\\"The coefficient 'a' cannot be zero.\\") # Calculate the discriminant D = cmath.sqrt(b**2 - 4*a*c) # Calculate the two roots root1 = (-b + D) / (2*a) root2 = (-b - D) / (2*a) return (root1, root2)"},{"question":"Write a Python program that implements a linked list class with methods to add elements at the beginning, find the middle element, and delete the last element. Add a method to print the linked list.","solution":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def add_at_beginning(self, data): new_node = Node(data) new_node.next = self.head self.head = new_node def find_middle(self): slow_ptr = self.head fast_ptr = self.head while fast_ptr and fast_ptr.next: slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next.next return slow_ptr.data if slow_ptr else None def delete_last(self): if not self.head: return None if not self.head.next: self.head = None return None temp = self.head while temp.next.next: temp = temp.next temp.next = None def print_list(self): current = self.head elements = [] while current: elements.append(current.data) current = current.next return elements"},{"question":"I have a list of strings and want to count how many strings contain a specific substring. How can I achieve this using Python?","solution":"def count_strings_with_substring(strings_list, substring): Counts how many strings in the list contain the specific substring. :param strings_list: List of strings to search within :param substring: Substring to search for :return: Count of strings containing the substring return sum(substring in string for string in strings_list)"},{"question":"Construct a Python method that transforms a mathematical adjacency matrix of a nontrivial simplistic undirected graph into its corresponding adjacency list representation.","solution":"def adjacency_matrix_to_list(matrix): Transforms an adjacency matrix into an adjacency list representation. Parameters: matrix (list of list of int): Adjacency matrix of the graph. Returns: list of list of int: Adjacency list of the graph. adjacency_list = [] for i in range(len(matrix)): neighbors = [] for j in range(len(matrix[i])): if matrix[i][j] == 1: neighbors.append(j) adjacency_list.append(neighbors) return adjacency_list"},{"question":"Write a Python program that creates a search function that allows a user to search through a list of dictionaries representing books (with fields \\"title\\", \\"author\\", and \\"year\\") by keywords given in the user's query string. The program should return a list of matching books, or a message that no books were found. Use list comprehension for this task.","solution":"def search_books(query, books): Search for books that contain the query string in the title, author, or year. Parameters: query (str): The search string. books (list): List of dictionaries where each dictionary represents a book with 'title', 'author', and 'year' keys. Returns: list: List of matching books. query = query.lower() matching_books = [book for book in books if query in book['title'].lower() or query in book['author'].lower() or query in str(book['year'])] return matching_books if matching_books else \\"No books found.\\" # Example list of books books = [ {\\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"J.D. Salinger\\", \\"year\\": 1951}, {\\"title\\": \\"To Kill a Mockingbird\\", \\"author\\": \\"Harper Lee\\", \\"year\\": 1960}, {\\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\", \\"year\\": 1949}, {\\"title\\": \\"Moby-Dick\\", \\"author\\": \\"Herman Melville\\", \\"year\\": 1851}, {\\"title\\": \\"The Great Gatsby\\", \\"author\\": \\"F. Scott Fitzgerald\\", \\"year\\": 1925} ]"},{"question":"Create a program in Python that will take a list of strings and output a list containing the lengths of each string.","solution":"def string_lengths(strings): Returns a list containing the lengths of each string in the input list. :param strings: List of strings :return: List of integers representing the lengths of the strings return [len(s) for s in strings]"},{"question":"Given a linked list, write a Python code snippet to print the elements of the list in a reverse order without creating a new linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def print_reverse(head): Prints elements of the linked list in reverse order. Args: head (ListNode): The head node of the linked list # We will use recursive approach to print the linked list in reverse if head is None: return print_reverse(head.next) print(head.value)"},{"question":"Write a python 3 function to reverse the words in a sentence without using in built functions.","solution":"def reverse_sentence(sentence): Reverses the words in a sentence. :param sentence: A string representing the sentence to be reversed. :return: A string with the words in reversed order. words = [] word = '' for char in sentence: if char == ' ' and word: words.append(word) word = '' elif char != ' ': word += char if word: words.append(word) reversed_sentence = '' for i in range(len(words)-1, -1, -1): reversed_sentence += words[i] if i > 0: reversed_sentence += ' ' return reversed_sentence"},{"question":"Given two strings, str1 and str2, write a method to find and return the longest common subsequence between the two. If there are multiple subsequences with the same maximum length, return the one that appears first in str1. If there is no common subsequence, return an empty string.","solution":"def longest_common_subsequence(str1, str2): Finds the longest common subsequence between str1 and str2. If there are multiple LCS with the same length, returns the one that appears first in str1. If there is no common subsequence, returns an empty string. m, n = len(str1), len(str2) # Create a 2D array to store the lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Build the dp array from bottom up. for i in range(m): for j in range(n): if str1[i] == str2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # Reconstruct the longest common subsequence. lcs = [] while m > 0 and n > 0: if dp[m][n] == dp[m - 1][n]: m -= 1 elif dp[m][n] == dp[m][n - 1]: n -= 1 else: # str1[m-1] == str2[n-1] lcs.append(str1[m - 1]) m -= 1 n -= 1 return ''.join(reversed(lcs))"},{"question":"Write a program to approximate the derivative of a given function using the finite difference method. You can assume the availability of a function for the evaluation of the function at any given point, a function for printing the derivative at any point and an error function to compare the derivative obtained by your method to the exact derivative calculated using calculus.","solution":"def finite_difference_derivative(func, x, h=1e-5): Approximates the derivative of func at point x using the finite difference method. Parameters: func (function): The function for which we want to find the derivative. x (float): The point at which to evaluate the derivative. h (float, optional): A small number for the finite difference calculation. Default is 1e-5. Returns: float: The approximate value of the derivative at x. return (func(x + h) - func(x)) / h def print_derivative(func, x, h=1e-5): Prints the approximate derivative of func at point x using the finite difference method. Parameters: func (function): The function for which we want to find the derivative. x (float): The point at which to evaluate the derivative. h (float, optional): A small number for the finite difference calculation. Default is 1e-5. derivative = finite_difference_derivative(func, x, h) print(f\\"The derivative of the function at x = {x} is approximately: {derivative}\\") def error(func, exact_derivative_func, x, h=1e-5): Compares the approximate derivative obtained by the finite difference method to the exact derivative. Parameters: func (function): The function for which we want to find the derivative. exact_derivative_func (function): The exact derivative function obtained analytically. x (float): The point at which to evaluate the derivative. h (float, optional): A small number for the finite difference calculation. Default is 1e-5. Returns: float: The error between the approximate derivative and the exact derivative. approximate_derivative = finite_difference_derivative(func, x, h) exact_derivative = exact_derivative_func(x) return abs(approximate_derivative - exact_derivative)"},{"question":"Write a function that takes a sorted array and a target value as arguments and returns the index of the target value using binary search.","solution":"def binary_search(nums, target): Performs a binary search on a sorted array to find the index of the target. :param nums: List[int] - A sorted list of integers :param target: int - The target value to search for :return: int - The index of the target value if found, otherwise -1 left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Write a Python program that takes a string input from the user and performs the Caesar cipher encryption or decryption based on user's choice. Prompt the user to input the direction of the alphabet rearrangement ('encrypt' or 'decrypt'), the string to process, and the key (shift number) to use. The program should wrap around the alphabet and maintain case sensitivity.","solution":"def caesar_cipher(text, shift, direction): Encrypts or decrypts text using the Caesar cipher based on direction. Args: text (str): The string to encrypt or decrypt. shift (int): The encryption/decryption key. direction (str): Either 'encrypt' or 'decrypt'. Returns: str: The encrypted or decrypted string. if direction == 'decrypt': shift = -shift result = [] for char in text: if char.isalpha(): shift_base = ord('A') if char.isupper() else ord('a') result.append(chr((ord(char) - shift_base + shift) % 26 + shift_base)) else: result.append(char) return ''.join(result)"},{"question":"Present a technique for creating a Python bytecode (.pyc) file without running the Python script directly. In addition, ensure the solution validates that the script being compiled is syntactically correct before creating the bytecode file.","solution":"import py_compile def compile_script_to_bytecode(script_path): Compiles a Python script to bytecode without executing its content. If the script has syntax errors, an exception will be raised. Args: script_path (str): The path to the Python script file. Returns: output_path (str): The path to the compiled bytecode file. output_path = script_path + 'c' py_compile.compile(script_path, cfile=output_path, doraise=True) return output_path"},{"question":"Remove duplicates from the given list and sort it in ascending order using Python. The list may contain negative numbers and have a maximum length of 1000 elements.","solution":"def remove_duplicates_and_sort(lst): Removes duplicates from the list and sorts it in ascending order. Args: lst (list): The list from which duplicates need to be removed and sorted. Returns: list: A sorted list with duplicates removed. return sorted(set(lst))"},{"question":"Write a python program to check if a string contains at least two different characters.","solution":"def has_at_least_two_different_characters(s): Returns True if the string s contains at least two different characters, otherwise False. return len(set(s)) >= 2"},{"question":"Use python to shuffle a list in place, but without using the built-in shuffle function from the random module. Your solution should have a time complexity of O(n) and should not create a new list or use any additional data structures. Additionally, you must ensure that the shuffled list is always guaranteed to be in a different order than the original list, even when running the shuffle function multiple times.","solution":"import random def shuffle_list_in_place(lst): Shuffles a list in place using Fisher-Yates Shuffle Algorithm (Durstenfeld version). n = len(lst) for i in range(n-1, 0, -1): j = random.randint(0, i) lst[i], lst[j] = lst[j], lst[i] # Example usage # lst = [1, 2, 3, 4, 5] # shuffle_list_in_place(lst) # print(lst) # lst is shuffled in place"},{"question":"I need you to design an efficient algorithm that can quickly determine the three greatest numbers from a pre-sorted list of integers in Python. For instance, consider the list [7, 13, 45, 28, 61, 30].","solution":"def three_greatest_numbers(sorted_list): Returns the three greatest numbers from a pre-sorted list of integers. n = len(sorted_list) if n < 3: raise ValueError(\\"List must contain at least three elements.\\") return sorted_list[-3:]"},{"question":"Design a Python function that accepts text in the form of encoded byte strings in UTF-8 encoding. Your function should be capable of identifying and decoding these byte strings to readable text.","solution":"def decode_utf8_byte_string(byte_string): Decodes a byte string encoded in UTF-8 to a readable text string. :param byte_string: Encoded byte string in UTF-8 :return: Decoded readable text string try: return byte_string.decode('utf-8') except AttributeError: return \\"Input is not a valid byte string\\" except UnicodeDecodeError: return \\"Unable to decode byte string\\""},{"question":"Write a Python code to implement Stochastic Gradient Descent (SGD) for a Logistic Regression model. You must also provide a test script that showcases the performance of your implementation on a simple classification task. Ensure that your code includes proficiency in handling data (i.e., batch selection), randomness both in weight initialization, and data shuffling for SGD.","solution":"import numpy as np class LogisticRegressionSGD: def __init__(self, learning_rate=0.01, n_epochs=1000, batch_size=1): self.learning_rate = learning_rate self.n_epochs = n_epochs self.batch_size = batch_size self.weights = None def sigmoid(self, z): return 1 / (1 + np.exp(-z)) def fit(self, X, y): np.random.seed(42) n_samples, n_features = X.shape self.weights = np.random.randn(n_features) self.bias = 0 for epoch in range(self.n_epochs): for idx in range(0, n_samples, self.batch_size): batch_X = X[idx:min(idx + self.batch_size, n_samples)] batch_y = y[idx:min(idx + self.batch_size, n_samples)] model_output = np.dot(batch_X, self.weights) + self.bias predictions = self.sigmoid(model_output) errors = predictions - batch_y gradient_w = np.dot(batch_X.T, errors) / len(batch_y) gradient_b = np.sum(errors) / len(batch_y) self.weights -= self.learning_rate * gradient_w self.bias -= self.learning_rate * gradient_b def predict_prob(self, X): return self.sigmoid(np.dot(X, self.weights) + self.bias) def predict(self, X): probas = self.predict_prob(X) return [1 if p > 0.5 else 0 for p in probas]"},{"question":"Build a python function that transforms bytes into a readable format with units such as 'MB', 'GB', or 'TB'. While making the function, ensure it can accurately handle very large numbers (up to 10^18 bytes) and round off the final result to 2 decimal places.","solution":"def bytes_to_readable_format(size_bytes): Converts a size in bytes to a human-readable format with units. Units are KB, MB, GB, TB, and PB. The output is rounded to 2 decimal places. Args: size_bytes (int): The size in bytes. Returns: str: The size in a human-readable format. if size_bytes == 0: return \\"0B\\" units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'] index = 0 size = float(size_bytes) while size >= 1024 and index < len(units) - 1: size /= 1024 index += 1 return f\\"{size:.2f}{units[index]}\\""},{"question":"Write a Python function to split a string into a list of strings, separated by a given delimiter. The function should have a time complexity of O(n), where n is the length of the input string.","solution":"def split_string(s, delimiter): Splits the string \`s\` into a list of strings separated by the given \`delimiter\`. Parameters: - s : str : input string - delimiter : str : delimiter to split the string Returns: - list : list of substrings result = [] current = [] delimiter_length = len(delimiter) i = 0 while i < len(s): if s[i:i + delimiter_length] == delimiter: result.append(''.join(current)) current = [] i += delimiter_length else: current.append(s[i]) i += 1 result.append(''.join(current)) return result"},{"question":"Create a python program to track the number of times a certain key is pressed. The program should be able to count the occurrences of each key press and display the key with the highest number of presses. The program should also ignore capitalization when counting the occurrences. Additionally, implement a feature to exclude specific keys from being counted, such as the arrow keys or function keys.","solution":"def track_key_presses(keys, exclude_keys=None): Tracks the number of times each key in \`keys\` list is pressed, excluding the keys in \`exclude_keys\`. Parameters: keys (list): List of key presses to be tracked. exclude_keys (list, optional): List of keys to be excluded from tracking. Returns: dict: The count of each key press ignoring capitalization. if exclude_keys is None: exclude_keys = [] exclude_keys = set(k.lower() for k in exclude_keys) key_counts = {} for key in keys: lower_key = key.lower() if lower_key not in exclude_keys: if lower_key in key_counts: key_counts[lower_key] += 1 else: key_counts[lower_key] = 1 return key_counts def get_most_pressed_key(key_counts): Returns the key with the highest number of presses. Parameters: key_counts (dict): Dictionary with keys and their respective counts. Returns: str: The key with the highest number of presses. if not key_counts: return None return max(key_counts, key=key_counts.get)"},{"question":"Modify the Python code below to print the number of vowels in a given string. However, you are not allowed to use any built-in functions or methods for counting the vowels. You have to implement the counting logic yourself without using any external aids.","solution":"def count_vowels(s): Counts the number of vowels in the given string s. vowels = \\"aeiouAEIOU\\" count = 0 for char in s: if char in vowels: count += 1 return count"},{"question":"Given thelist [6,7,8,9,10], write code to delete the third element of the list and shift all the remaining elements towards the left to fill the empty space. You are not allowed to use any built-in functions or methods for list manipulation. Additionally, you should ensure that the space complexity of your solution is O(1), meaning that you should not create any additional data structures to solve the problem.","solution":"def delete_third_element(lst): Deletes the third element from the list and shifts all remaining elements to the left. This function modifies the input list in place. if len(lst) < 3: # Nothing to do if the list has fewer than 3 elements return lst # Shift elements to the left starting from the 4th element (index 3) for i in range(2, len(lst) - 1): lst[i] = lst[i + 1] # Remove the last element lst.pop() return lst"},{"question":"Write a function that calculates the nth Fibonacci number without recursion to improve performance. Additionally, include error handling for negative numbers and non-integers.","solution":"def fibonacci(n): Calculate the nth Fibonacci number without recursion. Includes error handling for negative numbers and non-integers. if not isinstance(n, int): raise ValueError(\\"Input must be an integer\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer\\") if n == 0: return 0 if n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Devise a programming function, designed to handle two individually submitted string inputs, and determine with certainty whether these two strings constitute an anagram pair. This programmed deduction should be capable of correctly identifying, for instance, the case of \\"listen\\" and \\"silent\\".","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams, False otherwise. Anagrams are words or phrases made by rearranging the letters of another, using exactly the same letters exactly once. # Anagrams must be of the same length if len(str1) != len(str2): return False # Sort the strings and compare return sorted(str1) == sorted(str2)"},{"question":"Implement the Caesar Cipher algorithm in a programming language of your choice. The function should accept a string and a shift value as parameters and return the encrypted text. Additionally, create a decryption function that can take the encrypted text and the shift value to return the original message. Also, add functionality to handle both upper and lowercase letters. Here are two pieces of code implementing Caesar Cipher encryption and decryption in Python.","solution":"def caesar_cipher_encrypt(text, shift): Encrypts the given text using Caesar Cipher algorithm with the given shift. encrypted_text = [] for char in text: if char.isupper(): encrypted_text.append(chr((ord(char) + shift - 65) % 26 + 65)) elif char.islower(): encrypted_text.append(chr((ord(char) + shift - 97) % 26 + 97)) else: encrypted_text.append(char) return ''.join(encrypted_text) def caesar_cipher_decrypt(text, shift): Decrypts the given text using Caesar Cipher algorithm with the given shift. return caesar_cipher_encrypt(text, -shift)"},{"question":"Write a function that takes two strings as parameters and returns a new string that consists of the characters only present in the first string and not in the second one. The order of the characters in the resulting string should be the same as in the first string.","solution":"def characters_only_in_first_string(s1, s2): Returns a new string that consists of the characters only present in the first string (s1) and not in the second one (s2). The order of the characters in the resulting string should be the same as in the first string. return ''.join([char for char in s1 if char not in s2])"},{"question":"How can I create a function in Python that sorts a list of complex numbers based on their magnitude in descending order?","solution":"def sort_complex_desc(numbers): Sorts a list of complex numbers based on their magnitude in descending order. return sorted(numbers, key=lambda x: abs(x), reverse=True)"},{"question":"Write Python code for saving, opening, and deleting files. The code should allow the user to choose a directory and a file name for saving and opening files, and should also prompt the user for confirmation before deleting a file. Additionally, the code should display the contents of the file after it has been opened. Make sure to include error handling for cases such as file not found or permission denied.","solution":"import os def save_file(directory, filename, content): Saves the content to the specified file in the given directory. try: if not os.path.exists(directory): os.makedirs(directory) with open(os.path.join(directory, filename), 'w') as f: f.write(content) return \\"File saved successfully.\\" except Exception as e: return f\\"An error occurred while saving the file: {e}\\" def open_file(directory, filename): Opens the specified file from the given directory and returns its content. try: with open(os.path.join(directory, filename), 'r') as f: content = f.read() return content except FileNotFoundError: return \\"File not found.\\" except PermissionError: return \\"Permission denied.\\" except Exception as e: return f\\"An error occurred while opening the file: {e}\\" def delete_file(directory, filename): Deletes the specified file from the given directory after confirming with the user. filepath = os.path.join(directory, filename) if not os.path.exists(filepath): return \\"File not found.\\" confirmation = input(f\\"Are you sure you want to delete the file '{filename}'? (yes/no): \\") if confirmation.lower() == 'yes': try: os.remove(filepath) return \\"File deleted successfully.\\" except Exception as e: return f\\"An error occurred while deleting the file: {e}\\" return \\"File deletion cancelled.\\""},{"question":"Please write a function that takes in a positive integer N as input and returns a list of all prime numbers from 1 to N. The function should have a time complexity of O(N log log N). The output should be given in ascending order.","solution":"def sieve_of_eratosthenes(N): Returns a list of all prime numbers from 1 to N using the Sieve of Eratosthenes algorithm. if N < 2: return [] is_prime = [True] * (N + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= N: if is_prime[p]: for i in range(p * p, N + 1, p): is_prime[i] = False p += 1 prime_numbers = [num for num in range(N + 1) if is_prime[num]] return prime_numbers"},{"question":"Using the Python in-built function filter(), create a function that takes a list of integers and filters out odd numbers from the list. The function should return a list of only the even numbers from the original list. Additionally, write a function that takes a list of integers and a predicate function, and returns a list of numbers that satisfy the given predicate.","solution":"def filter_odd_numbers(numbers): Filters out odd numbers from the given list of integers. Parameters: numbers (list): A list of integers. Returns: list: A list containing only even numbers from the original list. return list(filter(lambda x: x % 2 == 0, numbers)) def filter_with_predicate(numbers, predicate): Filters the given list of integers based on the provided predicate function. Parameters: numbers (list): A list of integers. predicate (function): A function that takes an integer and returns a boolean. Returns: list: A list of numbers that satisfy the predicate function. return list(filter(predicate, numbers))"},{"question":"Define and explain the concept of a Python tuple, including its immutable nature, and provide an example of how it can be used in a practical programming scenario. Additionally, demonstrate how tuples can be nested within each other and explain the advantages and disadvantages of using tuples instead of lists.","solution":"def explain_tuple(): Returns a detailed explanation of Python tuples, their immutability, and examples of their usage, including nested tuples and comparison with lists. explanation = A Python tuple is an ordered collection of elements which can contain a mixture of different data types. Tuples are immutable, meaning once a tuple is created, its elements cannot be changed, added, or removed. Characteristics of a tuple: - Ordered: Elements have a defined order. - Immutable: Cannot be changed after creation. - Can contain mixed data types: (integers, floats, strings, etc.) Example of a tuple: my_tuple = (1, 2, 'apple', [4, 5]) Practical programming scenario: Using tuples to return multiple values from a function: def get_coordinates(): x = 10 y = 20 return (x, y) coordinates = get_coordinates() # coordinates will be (10, 20) Nested Tuples: Tuples can be nested within each other. nested_tuple = (1, (2, 3), (4, (5, 6))) Advantages of using tuples over lists: 1. Immutability: Tuples are protected from accidental changes, making the data more secure. 2. Performance: Tuples can be more memory-efficient and slightly faster than lists. Disadvantages of using tuples over lists: 1. Inflexibility: Since they are immutable, modifying their elements (addition, deletion, etc.) is not possible. 2. Limited methods: Tuples have fewer built-in methods compared to lists. Example: nested_tuple = ((1, 2), (3, 4), (5, (6, 7))) print(nested_tuple) # Output: ((1, 2), (3, 4), (5, (6, 7))) return explanation"},{"question":"Write a code to count the number of occurrences of an input word in a given string, ignoring the cases.","solution":"def count_word_occurrences(text, word): Returns the number of occurrences of the input word in a given string, ignoring cases. :param text: str, input string in which to count occurrences of the word :param word: str, word whose occurrences need to be counted :return: int, number of occurrences of the input word in the given string # Convert both text and word to lowercase to ignore cases text_lower = text.lower() word_lower = word.lower() # Count occurrences of the word in the text return text_lower.split().count(word_lower)"},{"question":"Develop an array structure in Python encompassing five distinct elements, each element should be a string data type and must contain only vowels. Additionally, implement a function to verify that the strings only contain vowels and have a length of exactly 3 characters each.","solution":"# Implementing the array structure array_of_vowels = ['aue', 'iou', 'eio', 'oae', 'uea'] def validate_vowel_strings(arr): Checks if all strings in the array only contain vowels and each string has a length of exactly 3 characters. Parameters: arr (list): The array of strings to be validated Returns: bool: True if all strings in the array meet the criteria, False otherwise vowels = {'a', 'e', 'i', 'o', 'u'} for s in arr: if len(s) != 3: return False for char in s: if char not in vowels: return False return True"},{"question":"Develop a Python program to calculate the prime factors of a given positive integer.","solution":"def prime_factors(n): Returns the list of prime factors of the given positive integer n. if n <= 0: raise ValueError(\\"The input must be a positive integer.\\") factors = [] # Divide by 2 until odd while n % 2 == 0: factors.append(2) n //= 2 # Try odd numbers from 3 onwards factor = 3 while factor * factor <= n: while n % factor == 0: factors.append(factor) n //= factor factor += 2 # If n is still a prime number and greater than 2 if n > 2: factors.append(n) return factors"},{"question":"Develop a computer programming function capable of receiving a text string as an argument and returning a data structure equivalent to a dictionary. This dictionary should contain individual characters from the string as keys and the corresponding frequency of each character as the value.","solution":"def char_frequency(text): Returns a dictionary with the frequency of each character in the text. Args: text (str): The input string. Returns: dict: A dictionary with characters as keys and their frequencies as values. frequency = {} for char in text: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Create a Hash function that determines if the key exists in the hash table without using any in-built methods for hash table implementation. If the key doesn't exist, the function should return -1. Implement your solution in Python and optimize for the best possible time complexity.","solution":"class HashTable: def __init__(self, size=1000): Initializes the hash table with a given size. self.size = size self.table = [[] for _ in range(size)] def _hash_function(self, key): Converts the key to an integer index using a simple hash function. return hash(key) % self.size def insert(self, key, value): Inserts a key-value pair into the hash table. index = self._hash_function(key) # Check if the key already exists in the bucket for i, (k, v) in enumerate(self.table[index]): if k == key: self.table[index][i] = (key, value) return self.table[index].append((key, value)) def lookup(self, key): Looks up a key in the hash table and returns its value or -1 if not found. index = self._hash_function(key) for k, v in self.table[index]: if k == key: return v return -1 # Example usage: # hash_table = HashTable() # hash_table.insert(\\"key1\\", \\"value1\\") # print(hash_table.lookup(\\"key1\\")) # Output: \\"value1\\" # print(hash_table.lookup(\\"key2\\")) # Output: -1"},{"question":"Write a function that takes in a matrix of positive integers and randomly shuffles the elements in each row. Additionally, the function should ensure that the sum of the elements in each row remains the same after shuffling. However, the implementation should have a time complexity of O(n log n) or better, where n is the total number of elements in the matrix.","solution":"import random def shuffle_matrix_rows(matrix): Shuffle each row of the matrix such that the sum of elements in each row remains the same. result_matrix = [] for row in matrix: new_row = row[:] random.shuffle(new_row) result_matrix.append(new_row) return result_matrix"},{"question":"Write a function in Python that takes a hexadecimal string as an argument and returns the string in reverse order. However, you are not allowed to use any built-in functions or methods that directly reverse a string or list.","solution":"def reverse_hex_string(hex_str): Reverses the order of the characters in a given hexadecimal string. Args: hex_str (str): A string containing hexadecimal characters. Returns: str: The reversed string. # Create an empty list to hold the characters in reverse order reversed_chars = [] # Iterate backwards through the hex string for i in range(len(hex_str) - 1, -1, -1): # Append each character to the reversed list reversed_chars.append(hex_str[i]) # Join the reversed characters into a new string reversed_str = ''.join(reversed_chars) return reversed_str"},{"question":"Propose an algorithm in Python for sorting a given list of integers in descending order, without using any built-in sorting functions or libraries. Additionally, ensure that your algorithm has a time complexity of O(n log n) and a space complexity of O(log n).","solution":"def merge_sort_descending(arr): Sorts a list of integers in descending order using the merge sort algorithm. Time Complexity: O(n log n) Space Complexity: O(log n) if len(arr) <= 1: return arr def merge(left, right): result = [] while left and right: if left[0] > right[0]: result.append(left.pop(0)) else: result.append(right.pop(0)) result.extend(left if left else right) return result mid = len(arr) // 2 left = merge_sort_descending(arr[:mid]) right = merge_sort_descending(arr[mid:]) return merge(left, right)"},{"question":"Devise a code segment in Python to compute the total, average, and standard deviation of five numbers. Instead of explicitly declaring the numbers, your program should accept any list of five positive integers input by the user. Additionally, write a test case to verify the correctness of your solution.","solution":"def compute_statistics(numbers): Compute the total, average, and standard deviation of five numbers. Parameters: numbers (list): A list of five positive integers. Returns: tuple: A tuple containing total, average, and standard deviation. if len(numbers) != 5 or any(n < 0 for n in numbers): raise ValueError(\\"Input must be a list of five positive integers\\") # Compute total total = sum(numbers) # Compute average average = total / 5 # Compute standard deviation variance = sum((x - average)**2 for x in numbers) / 5 std_deviation = variance**0.5 return total, average, std_deviation"},{"question":"Create a Python script to sum up all the elements in a 2-dimensional list, but only consider the elements that are prime numbers.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def sum_primes(matrix): Sum up all the prime numbers in a 2-dimensional list (matrix). total = 0 for row in matrix: for element in row: if is_prime(element): total += element return total"},{"question":"Given a two-dimensional list with varying number of elements in each sub-list, write a function that flattens this list into a one-dimensional list. After this, calculate and return the index of the first occurrence of the number 7 in the flattened list, if it exists.","solution":"def flatten_list_and_find_seven_index(two_d_list): Flattens a two-dimensional list into a one-dimensional list and returns the index of the first occurrence of the number 7. Parameters: two_d_list (list of lists): Two-dimensional list with varying number of elements in each sub-list. Returns: int: The index of the first occurrence of the number 7 in the flattened list, or -1 if it does not exist. flattened_list = [item for sublist in two_d_list for item in sublist] try: index_of_7 = flattened_list.index(7) except ValueError: index_of_7 = -1 return index_of_7"},{"question":"extend the code given below by implementing a sorting algorithm that establishes a new array B, which is the sorted version of array A with its integers in increasing order. Index i's element in array A corresponds to index i's element in array B. As an example, [1, 2, 5, 4, 3] becomes the sorted [1, 2, 3, 4, 5].","solution":"def sort_array(A): Returns a sorted version of list A in increasing order. return sorted(A)"},{"question":"Write a Python function that takes a radius as input and calculates the area and circumference of a circle using the math module. The function should return a tuple containing the area and circumference rounded to 2 decimal places. Additionally, write a short program that prompts the user to enter the radius, calls this function with the input, and prints the calculated area and circumference in a formatted string.","solution":"import math def calculate_circle_properties(radius): Calculate the area and circumference of a circle given a radius. Args: radius (float): The radius of the circle. Returns: tuple: A tuple containing the area and circumference rounded to 2 decimal places. if radius < 0: raise ValueError(\\"Radius cannot be negative\\") area = math.pi * radius ** 2 circumference = 2 * math.pi * radius return round(area, 2), round(circumference, 2) if __name__ == \\"__main__\\": radius = float(input(\\"Enter the radius of the circle: \\")) area, circumference = calculate_circle_properties(radius) print(f\\"The area of the circle is {area} and the circumference is {circumference}.\\")"},{"question":"Given a ternary tree where each node has at most 3 children, should have a Python function \`countSingleChildNodes(root, childCount=0)\` that returns the number of nodes with exactly one child. The function should leverage depth-first search.","solution":"class Node: def __init__(self, value): self.value = value self.children = [] def countSingleChildNodes(root, childCount=0): if root is None: return childCount # Check if the current node has exactly one child if len(root.children) == 1: childCount += 1 # Recursively count single child nodes in the subtree for child in root.children: childCount = countSingleChildNodes(child, childCount) return childCount"},{"question":"Construct a function that not only prints the current date in the format of \\"Day, Date Month Year\\" and time in the format of \\"Hours: Minutes: Seconds AM/PM\\", but also returns date and time in four different international time zones (namely PST, EST, BST, IST) simultaneously. Create this using Python's datetime, pytz libraries and also utilize the datetime.strftime() function for formatting the output. Make sure your program handles daylight saving changes correctly.","solution":"from datetime import datetime import pytz def get_current_datetime(): Returns the current date and time in the local timezone and four specified time zones (PST, EST, BST, IST) simultaneously in prescribed formats. # Define the time zones time_zones = { \\"PST\\": \\"US/Pacific\\", \\"EST\\": \\"US/Eastern\\", \\"BST\\": \\"Europe/London\\", \\"IST\\": \\"Asia/Kolkata\\" } now = datetime.now() local_time_str = now.strftime(\\"%A, %d %B %Y %I:%M:%S %p\\") time_zones_str = {} # Use pytz to get current time in each zone for tz_name, tz in time_zones.items(): timezone = pytz.timezone(tz) tz_time = datetime.now(timezone) time_zones_str[tz_name] = tz_time.strftime(\\"%A, %d %B %Y %I:%M:%S %p\\") return local_time_str, time_zones_str"},{"question":"In Python, write a script that prints out the elements of a list in reverse order, but without using the built-in reverse function or any additional data structures. The list should be modified in-place. The time complexity of the algorithm should be O(n), where n is the length of the list.","solution":"def reverse_list(lst): Modifies the input list in-place to reverse the order of its elements. left = 0 right = len(lst) - 1 while left < right: # Swap the elements lst[left], lst[right] = lst[right], lst[left] # Move towards the center left += 1 right -= 1"},{"question":"Write a function to generate a random array of integers of length n, where each element is a random number between 0 and n-1.","solution":"import random def generate_random_array(n): Generates a random array of integers of length n, where each element is a random number between 0 and n-1. Parameters: n (int): The length of the array and the upper limit for the random numbers. Returns: list: An array of length n with random integers between 0 and n-1. return [random.randint(0, n-1) for _ in range(n)]"},{"question":"There is a multi news category topic multi-document summarization system. This summarization system type supports generation in any sequence, can select any news category topic based on the system summarization calendar, and creates summaries that answer any questions related to that main summary. It is comprised of an encoder and a decoder that works together to create the summary. How do you code the summarization sequences so that it can select any news category topic based on the summarization calendar and answers questions related to that main summary?","solution":"class SummarizationSystem: def __init__(self, calendar): # calendar is a dictionary with dates as keys and news topics as values self.calendar = calendar self.encoder = Encoder() # Assuming Encoder is a predefined class self.decoder = Decoder() # Assuming Decoder is a predefined class def select_topic(self, date): Selects the news topic based on the summarization calendar. return self.calendar.get(date, \\"No topic available\\") def generate_summary(self, date): Generates a summary for the selected topic on the provided date. topic = self.select_topic(date) if topic == \\"No topic available\\": return topic encoded_data = self.encoder.encode(topic) summary = self.decoder.decode(encoded_data) return summary def answer_questions(self, date, question): Answers questions related to the main summary of the selected topic. summary = self.generate_summary(date) if summary == \\"No topic available\\": return \\"Cannot answer questions for unavailable topic\\" answer = self.decoder.answer_question(summary, question) return answer class Encoder: def encode(self, topic): # Placeholder for encoding logic encoded = f\\"Encoded({topic})\\" return encoded class Decoder: def decode(self, encoded_data): # Placeholder for decoding logic summary = f\\"Summary of {encoded_data}\\" return summary def answer_question(self, summary, question): # Placeholder for logic that generates an answer based on the summary and question. answer = f\\"Answer to '{question}' based on '{summary}'\\" return answer"},{"question":"Develop a Python program to create a new list where each element is the maximum of each row in a given 2D list.","solution":"def max_of_each_row(matrix): Returns a list where each element is the maximum of each row in a given 2D list. return [max(row) for row in matrix]"},{"question":"Given is a decimal number: n = 1994. Print out the number in binary format. Then execute the following algorithm: Generate two random decimal numbers a and b within the range of 0 to n. Convert both numbers to binary format, not using any in-built Python functions for conversion. Make sure the function generating binary format works correctly for input 'a', 'b' and 'n'. After these conversions, perform bitwise operations AND, OR, XOR on a and b, and print the results in binary format.","solution":"import random def decimal_to_binary(n): binary = \\"\\" if n == 0: return \\"0\\" while n > 0: binary = str(n % 2) + binary n = n // 2 return binary def bitwise_operations(n): # Step 1: Convert n to binary n_binary = decimal_to_binary(n) print(f\\"Binary of {n}: {n_binary}\\") # Step 2: Generate random numbers a and b a = random.randint(0, n) b = random.randint(0, n) # Step 3: Convert a and b to binary a_binary = decimal_to_binary(a) b_binary = decimal_to_binary(b) print(f\\"Generated a: {a}, in binary: {a_binary}\\") print(f\\"Generated b: {b}, in binary: {b_binary}\\") # Step 4: Perform bitwise operations and_result = a & b or_result = a | b xor_result = a ^ b print(f\\"AND operation result: {decimal_to_binary(and_result)}\\") print(f\\"OR operation result: {decimal_to_binary(or_result)}\\") print(f\\"XOR operation result: {decimal_to_binary(xor_result)}\\") # Execute the bitwise_operations function with n = 1994 bitwise_operations(1994)"},{"question":"How do I rotate a matrix 180 degrees clockwise in Python?","solution":"def rotate_matrix_180(matrix): Rotates the given matrix 180 degrees clockwise. Parameters: matrix (list of list of int): The input 2D matrix to be rotated. Returns: list of list of int: The rotated matrix. # Rotating 180 degrees clockwise is equivalent to reversing both dimensions return [row[::-1] for row in matrix[::-1]]"},{"question":"Create a Python function to determine and display the number of days remaining between today's date and a provided due date. Also, if the due date has already passed, the function should display a message indicating that the due date has passed. You should consider leap years in your date calculations.","solution":"from datetime import datetime def days_until_due(due_date): Determines the number of days remaining between today's date and the provided due date. If the due date has passed, displays a message indicating that the due date has passed. :param due_date: str in the format \\"YYYY-MM-DD\\" :return: int or str today = datetime.today().date() due_date_dt = datetime.strptime(due_date, \\"%Y-%m-%d\\").date() days_remaining = (due_date_dt - today).days if days_remaining > 0: return days_remaining elif days_remaining == 0: return \\"Due date is today!\\" else: return \\"Due date has passed!\\""},{"question":"Write an AWS Lambda Python function that will retrieve an invoice record stored as JSON text from an Amazon DynamoDB table, perform some business logic on the invoice data, and then return an HTTP response that includes a status code and the original, unmodified invoice JSON text. You should utilize the boto3 library. Assume that the Lambda function will be triggered by an HTTP request event that includes an \\"invoiceId\\" field to identify the invoice record. Also, assume that you have already set up the necessary AWS IAM permissions for the Lambda function.","solution":"import json import boto3 from botocore.exceptions import ClientError def lambda_handler(event, context): # Parse the invoiceId from the incoming event invoice_id = event.get(\\"invoiceId\\") if not invoice_id: return { 'statusCode': 400, 'body': json.dumps({ 'message': 'Missing invoiceId in the request' }) } # Initialize the DynamoDB client dynamodb = boto3.client('dynamodb') try: # Retrieve the invoice record from DynamoDB table named 'Invoices' response = dynamodb.get_item( TableName='Invoices', Key={ 'invoiceId': { 'S': invoice_id } } ) if 'Item' not in response: return { 'statusCode': 404, 'body': json.dumps({ 'message': 'Invoice not found' }) } # Here you can perform any business logic. For this example, we will return the unmodified invoice invoice_record = response['Item'] return { 'statusCode': 200, 'body': json.dumps(invoice_record) } except ClientError as e: return { 'statusCode': 500, 'body': json.dumps({ 'message': 'Internal server error', 'error': str(e) }) }"},{"question":"Consider a list of string items: lst = ['one', 'two', 'three', 'four']. Write a function in Python, utilizing list comprehension for maximum efficiency, that generates a transformed list. The new list should contain tuples where each tuple has two elements derived from each string in the initial list - the original string and a string of asterisks of the original string's length. (For instance, the first tuple will be 'one' and '***', showing the same length.) Additionally, the function shall be robust (can handle longer or shorter lists) and able to accurately replicate the operation regardless of string sizes or special characters within the strings.","solution":"def transform_list(lst): Transforms a list of strings into a list of tuples. Each tuple contains the original string and a string of asterisks with the same length as the original string. return [(s, '*' * len(s)) for s in lst]"},{"question":"What is a way to compare two objects in Python and determine if they have the same attributes? Can you provide an example using a function called \`are_equal\`?","solution":"def are_equal(obj1, obj2): Compares two objects to determine if they have the same attributes. Returns True if obj1 and obj2 have the same attributes with the same values; otherwise, returns False. return obj1.__dict__ == obj2.__dict__"},{"question":"Could you implement some basic features with Python and Pytorch: 1. Implementation of Convolutional Neural Networks (CNN) with adjustable kernel size, number of hidden units, and number of layers. 2. Batch normalization for the layers for better convergence. 3. Dropout regularization to prevent overfitting. 4. Apply a certain number of fully connected layers in the end with certain dimensions. 5. Cross-Entropy loss and an optimizer like Adam, SGD, etc. 6. Perform training, validation/test split with DataLoader. 7. Compute and print loss and accuracy of train batches and test batch.","solution":"import torch import torch.nn as nn import torch.optim as optim from torch.utils.data import DataLoader, random_split class CNN(nn.Module): def __init__(self, input_channels, num_classes, num_layers, kernel_size, num_hidden_units, fc_layers_dims, dropout_p=0.5): super(CNN, self).__init__() layers = [] out_channels = num_hidden_units for i in range(num_layers): layers.append(nn.Conv2d(input_channels if i == 0 else out_channels, out_channels, kernel_size, padding=kernel_size//2)) layers.append(nn.BatchNorm2d(out_channels)) layers.append(nn.ReLU()) layers.append(nn.Dropout(dropout_p)) self.conv = nn.Sequential(*layers) self.pool = nn.AdaptiveAvgPool2d((1, 1)) fc_layers = [] input_dim = out_channels for dim in fc_layers_dims: fc_layers.append(nn.Linear(input_dim, dim)) fc_layers.append(nn.ReLU()) fc_layers.append(nn.Dropout(dropout_p)) input_dim = dim fc_layers.append(nn.Linear(input_dim, num_classes)) self.fc = nn.Sequential(*fc_layers) def forward(self, x): x = self.conv(x) x = self.pool(x) x = torch.flatten(x, 1) x = self.fc(x) return x def train_model(model, train_loader, criterion, optimizer, device): model.train() running_loss = 0.0 correct = 0 total = 0 for inputs, labels in train_loader: inputs, labels = inputs.to(device), labels.to(device) optimizer.zero_grad() outputs = model(inputs) loss = criterion(outputs, labels) loss.backward() optimizer.step() running_loss += loss.item() * inputs.size(0) _, predicted = torch.max(outputs.data, 1) total += labels.size(0) correct += (predicted == labels).sum().item() epoch_loss = running_loss / len(train_loader.dataset) epoch_accuracy = correct / total print(f'Train Loss: {epoch_loss:.4f}, Train Accuracy: {epoch_accuracy:.4f}') return epoch_loss, epoch_accuracy def validate_model(model, val_loader, criterion, device): model.eval() running_loss = 0 correct = 0 total = 0 with torch.no_grad(): for inputs, labels in val_loader: inputs, labels = inputs.to(device), labels.to(device) outputs = model(inputs) loss = criterion(outputs, labels) running_loss += loss.item() * inputs.size(0) _, predicted = torch.max(outputs.data, 1) total += labels.size(0) correct += (predicted == labels).sum().item() epoch_loss = running_loss / len(val_loader.dataset) epoch_accuracy = correct / total print(f'Validation Loss: {epoch_loss:.4f}, Validation Accuracy: {epoch_accuracy:.4f}') return epoch_loss, epoch_accuracy def main(): # Example Dataset (use any relevant dataset) from torchvision import datasets, transforms # Hyperparameters batch_size = 64 learning_rate = 0.001 num_epochs = 10 kernel_size = 3 num_hidden_units = 64 num_layers = 4 fc_layers_dims = [100, 50] num_classes = 10 # Number of classes in dataset # Transforms transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))]) # Dataset and Dataloaders dataset = datasets.MNIST(root='./data', download=True, transform=transform) train_size = int(0.8 * len(dataset)) val_size = len(dataset) - train_size train_dataset, val_dataset = random_split(dataset, [train_size, val_size]) train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True) val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False) # Device device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') # Model, Loss, Optimizer model = CNN(1, num_classes, num_layers, kernel_size, num_hidden_units, fc_layers_dims).to(device) criterion = nn.CrossEntropyLoss() optimizer = optim.Adam(model.parameters(), lr=learning_rate) # Training Loop for epoch in range(num_epochs): print(f'Epoch {epoch + 1}/{num_epochs}') train_loss, train_accuracy = train_model(model, train_loader, criterion, optimizer, device) val_loss, val_accuracy = validate_model(model, val_loader, criterion, device) if __name__ == '__main__': main()"},{"question":"Given two faulty pieces of code, identify the errors, explain why they are erroneous and correct them to successfully create a.ones(6) in Python using the numpy library. Furthermore, make a function that takes in an integer 'n' and creates an array of 'n' length filled with ones. The function should also handle exceptions for non-integer and negative inputs.","solution":"import numpy as np def create_ones_array(n): Creates a numpy array of length n filled with ones. Parameters: n (int): Length of the desired array. Returns: numpy.ndarray: Array of ones with length n. Raises: ValueError: If n is not an integer or if n is negative. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") return np.ones(n)"},{"question":"You're assisting a professor with developing a practical lab exercise for a course on data science. The course emphasizes the use of Python for data cleaning. As part of the preparation, you need to author a complex function that's capable of loading a dataset from a CSV, executing missing value imputation, and producing a histogram of a specified feature from the dataset.","solution":"import pandas as pd import matplotlib.pyplot as plt def process_dataset(file_path, feature): Loads a dataset from a CSV file, handles missing values by imputing with the mean of the column, and generates a histogram for a specified feature. Parameters: file_path (str): The path to the CSV file. feature (str): The column name of the feature to plot the histogram for. Returns: pd.DataFrame: The processed DataFrame with missing values imputed. # Load the dataset df = pd.read_csv(file_path) # Handle missing values by imputing with the mean of the column for col in df.columns: if df[col].isnull().sum() > 0: mean_value = df[col].mean() df[col].fillna(mean_value, inplace=True) # Generate a histogram for the specified feature if feature in df.columns: plt.figure(figsize=(10, 6)) df[feature].hist(bins=30) plt.title(f'Histogram of {feature}') plt.xlabel(feature) plt.ylabel('Frequency') plt.grid(False) plt.show() else: raise ValueError(f\\"The feature '{feature}' is not present in the dataset.\\") return df"},{"question":"Can you structure a Python script that is capable of enumerating and printing every one of the distinct permutations or variations that can be created by using all characters or elements that we get from a specific input string?","solution":"from itertools import permutations def enumerate_permutations(input_string): Returns a list of all distinct permutations of the input string. # Use permutations from itertools to generate all permutations permutated_tuples = permutations(input_string) # Convert each permutation tuple to a string permutated_strings = [''.join(perm) for perm in permutated_tuples] # Remove duplicates by converting the list to a set, then back to a list to retain only unique values distinct_permutations = list(set(permutated_strings)) return distinct_permutations"},{"question":"Invert a binary tree using Python. Your solution should not use any built-in functions or libraries for tree operations and should have a time complexity of O(n), where n is the number of nodes in the tree. Additionally, your solution should only use a constant amount of extra space, excluding the input tree. You are not allowed to create any new nodes or modify the existing nodes' values.","solution":"class TreeNode: Definition for a binary tree node. def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def invert_tree(root): Inverts a binary tree. :param root: TreeNode, the root of the binary tree :return: TreeNode, the root of the inverted binary tree if root is None: return None # Swap left and right subtrees root.left, root.right = root.right, root.left # Recursively invert the subtrees invert_tree(root.left) invert_tree(root.right) return root"},{"question":"How can I convert a given hexadecimal string to its binary equivalent in Python?","solution":"def hex_to_bin(hex_string): Converts a hexadecimal string to its binary equivalent. return bin(int(hex_string, 16))[2:]"},{"question":"Write the code which prints the first non repeating character in a string.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string s. If all characters are repeating, return None. char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 for char in s: if char_count[char] == 1: return char return None"},{"question":"Give a method to transform a given 2D matrix into a valid JSON object. Your solution should handle matrices with variable row and column lengths, and the JSON should represent each row as a separate array within a single outer array. Additionally, improve the code by adding input validation checks, error handling, and support for different data types (e.g. int, float, string) contained in the matrix.","solution":"import json def matrix_to_json(matrix): Transforms a given 2D matrix into a valid JSON object. Parameters: matrix (list of lists): A 2D matrix with variable row and column lengths, containing int, float, or string elements. Returns: str: A JSON object representing the matrix as a single outer array with each row as a separate array. if not isinstance(matrix, list): raise TypeError(\\"Input should be a list of lists.\\") for row in matrix: if not isinstance(row, list): raise TypeError(\\"Each row in the matrix should be a list.\\") for element in row: if not isinstance(element, (int, float, str)): raise ValueError(\\"Matrix elements should be either int, float, or string.\\") return json.dumps(matrix)"},{"question":"Write a function in Python to remove the intersection of two given sets from each other.","solution":"def remove_intersection(set1, set2): Removes the intersection of two given sets from each other. Parameters: - set1: The first set. - set2: The second set. Returns: A tuple containing the modified set1 and set2 after removing their intersection. # Find intersection elements intersection = set1.intersection(set2) # Remove intersection elements from both sets set1.difference_update(intersection) set2.difference_update(intersection) return (set1, set2)"},{"question":"Write a code to count the number of occurrences of every character in a given string.","solution":"def character_count(s): Returns a dictionary with the number of occurrences of each character in the given string. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Write Python code that takes the complement of a DNA strand and then finds the reverse complement. Then, write a function that checks if a DNA strand is palindromic, i.e., reads the same clockwise and anticlockwise in the nucleotide bases adenine, cytosine, guanine, thymine.","solution":"def complement_dna(dna): Returns the complement of a DNA strand. complement = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'} return ''.join(complement[base] for base in dna) def reverse_complement_dna(dna): Returns the reverse complement of a DNA strand. return complement_dna(dna)[::-1] def is_palindromic_dna(dna): Checks if a DNA strand is palindromic. return dna == reverse_complement_dna(dna)"},{"question":"Design a Python function to simulate the traditional two-player game of NIM, where players take turns removing objects from a single pile until no objects remain. Additionally, include an algorithmically-driven player with adjustable skill levels that can intelligently select the number of objects to remove based on the current state of the game.","solution":"import random class NimGame: def __init__(self, total_objects, max_remove): self.total_objects = total_objects self.max_remove = max_remove def player_move(self, num_objects): Player removes \`num_objects\` from the pile. if 1 <= num_objects <= self.max_remove and num_objects <= self.total_objects: self.total_objects -= num_objects return True return False def computer_move(self, skill_level='easy'): Computer's turn to remove objects from the pile. Skill levels: - 'easy': Randomly selects a number to remove. - 'medium': Tries to make the remaining number not a multiple of (max_remove + 1). - 'hard': Optimal strategy based on winning strategy in NIM. if skill_level == 'easy': num_objects = random.randint(1, min(self.max_remove, self.total_objects)) elif skill_level == 'medium': num_objects = (self.total_objects - 1) % (self.max_remove + 1) if num_objects == 0 or num_objects > self.total_objects: num_objects = random.randint(1, min(self.max_remove, self.total_objects)) elif skill_level == 'hard': num_objects = self.total_objects % (self.max_remove + 1) if num_objects == 0: num_objects = random.randint(1, min(self.max_remove, self.total_objects)) else: raise ValueError(\\"Invalid skill level. Choose 'easy', 'medium', or 'hard'.\\") self.total_objects -= num_objects return num_objects def is_game_over(self): return self.total_objects == 0"},{"question":"Given an array of integers, write a function (in any programming language of your preference) to implement a 'greater than' comparator in selection sort algorithm to sort the integers in descending order.","solution":"def selection_sort_desc(arr): Sorts an array of integers in descending order using selection sort algorithm with a 'greater than' comparator. n = len(arr) for i in range(n): # Find the maximum element in remaining unsorted array max_idx = i for j in range(i+1, n): if arr[j] > arr[max_idx]: max_idx = j # Swap the found maximum element with the first element of unsorted array arr[i], arr[max_idx] = arr[max_idx], arr[i] return arr"},{"question":"How can we identify whether a given array is sorted or not in Python?","solution":"def is_sorted(arr): Returns True if the given array is sorted in non-decreasing order, otherwise returns False. return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))"},{"question":"Draft a Python code snippet to construct a function that determines the proportion of positive integers within a given list, precisely identifying the percentage of these values. This will require the function to not only count the number of positive integers but also calculate this value relative to the total number of elements in the list.","solution":"def positive_integer_proportion(lst): Returns the proportion of positive integers in the list as a percentage. :param lst: List of integers :return: Percentage of positive integers in the list if not lst: return 0.0 positive_count = sum(1 for x in lst if x > 0) proportion = (positive_count / len(lst)) * 100 return proportion"},{"question":"How can I write a Python function that compares two strings character by character to determine which one is lexicographically larger? Also, can the function handle negative cases like empty strings or strings of different lengths?","solution":"def compare_strings(s1, s2): Compares two strings lexicographically. Returns: -1 if s1 < s2 0 if s1 == s2 1 if s1 > s2 len1, len2 = len(s1), len(s2) min_len = min(len1, len2) for i in range(min_len): if s1[i] < s2[i]: return -1 elif s1[i] > s2[i]: return 1 # If all characters are equal in the common length, compare lengths if len1 < len2: return -1 elif len1 > len2: return 1 else: return 0"},{"question":"You are given a set of integers. Your task is to write a function in Python that can separate these integers into odd and even numbers. The result must be a dictionary where the first value contains a list of all even integers and the second value contains a list of all odd integers.","solution":"def separate_odd_even(numbers): Separates the given list of integers into even and odd numbers. Args: numbers (list): List of integers. Returns: dict: Dictionary with two keys, \\"even\\" and \\"odd\\", mapping to lists of even and odd integers respectively. result = {\\"even\\": [], \\"odd\\": []} for number in numbers: if number % 2 == 0: result[\\"even\\"].append(number) else: result[\\"odd\\"].append(number) return result"},{"question":"(this is python code) How do I, given an arbitratry six letter sequence, map it through a permutation which would be computationally intensive to reverse (i.e. if done a trillion times a second for about 2 billion years, it would only get to about e^(-200) of the distance done).","solution":"from hashlib import sha256 def map_six_letter_sequence(sequence): Maps a given six letter sequence through a hashed permutation. Uses sha256 to create a permutation that is computationally difficult to reverse. if len(sequence) != 6 or not sequence.isalpha(): raise ValueError(\\"Input must be a six-letter alphabetic sequence.\\") hashed = sha256(sequence.encode()).hexdigest() # We will take first 6 characters of the hash to map it back to a six-letter sequence. mapping = ''.join(chr(97 + int(hashed[i:i+2], 16) % 26) for i in range(0, 12, 2)) return mapping"},{"question":"You are tasked with creating a Python function that simulates a simplified version of a library management system. The function should check the availability of a specified number of books with a given ISBN (International Standard Book Number) and return the status code based on the availability.","solution":"# Library inventory with ISBN numbers and available stock library_inventory = { '978-3-16-148410-0': 10, '978-1-60309-452-8': 4, '978-0-545-01022-1': 6, '978-1-891830-77-8': 0 } def check_book_availability(isbn, quantity): Checks the availability of specified quantity of books with given ISBN in the library inventory. Args: isbn (str): The ISBN of the book to check. quantity (int): The number of books requested. Returns: int: Status code based on availability. 0 = Available 1 = ISBN not found 2 = Not enough stock if isbn not in library_inventory: return 1 # ISBN not found if library_inventory[isbn] < quantity: return 2 # Not enough stock return 0 # Available"},{"question":"Using the Python language, sort the following list in ascending order. However, you are not allowed to use the built-in sorting function or any third-party library. You must implement your own sorting algorithm.","solution":"def bubble_sort(arr): Sorts a list in ascending order using the bubble sort algorithm. n = len(arr) for i in range(n): # Track if any swap is made swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: # Swap the elements arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True # If no elements were swapped, the list is already sorted if not swapped: break return arr"},{"question":"Develop a Python algorithm that sorts a given list of strings in lexicographic order (A-Z).","solution":"def sort_strings_lexicographically(strings): Sorts a list of strings in lexicographic order (A-Z). Args: strings (list): A list of strings to be sorted. Returns: list: A new list containing the sorted strings. return sorted(strings)"},{"question":"Using the following class, add a new method called \\"printColor()\\" that prints the color of the shape. However, you are not allowed to use the class variable \\"color\\" directly in the method. Instead, you should use a dictionary to store the color of each shape based on its type. The key of the dictionary should be the type of the shape and the value should be its color. In order to determine the color of the shape, you should first check if the type of the shape is in the dictionary. If it is, then you can retrieve the color from the dictionary and print it. Otherwise, you should print a default color, which is \\"white\\". To make it more challenging, you are not allowed to use any built-in Python functions or methods, such as \\"type()\\" or \\"isinstance()\\", to determine the type of the shape. Instead, you should use a switch statement or a series of if-else statements to determine the type of the shape.","solution":"class Shape: def __init__(self, shape_type): self.shape_type = shape_type def printColor(self): color_dict = { 'circle': 'red', 'square': 'blue', 'triangle': 'green' # Add more shape-type to color mappings if needed } if self.shape_type == 'circle': color = color_dict['circle'] elif self.shape_type == 'square': color = color_dict['square'] elif self.shape_type == 'triangle': color = color_dict['triangle'] else: color = \\"white\\" print(color)"},{"question":"Implement a softmax regression classifier to classify the images of the MNIST dataset using PyTorch. Ensure your model is optimised for performance and besides accuracy, evaluate it using an appropriate loss metric such as cross-entropy loss. Also, perform a simple data analysis prior to implementing the model to understand the dataset trends and characteristics.","solution":"import torch import torch.nn as nn import torch.optim as optim from torchvision import datasets, transforms from torch.utils.data import DataLoader class SoftmaxRegressionModel(nn.Module): def __init__(self, input_size, num_classes): super(SoftmaxRegressionModel, self).__init__() self.linear = nn.Linear(input_size, num_classes) def forward(self, x): out = self.linear(x) return out # Data analysis and preprocessing def load_data(batch_size=64): transform = transforms.Compose([transforms.ToTensor()]) train_dataset = datasets.MNIST(root='./data', train=True, transform=transform, download=True) test_dataset = datasets.MNIST(root='./data', train=False, transform=transform) train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True) test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=False) return train_loader, test_loader def train_model(model, train_loader, criterion, optimizer, num_epochs=5): model.train() for epoch in range(num_epochs): for i, (images, labels) in enumerate(train_loader): images = images.view(-1, 28*28) outputs = model(images) loss = criterion(outputs, labels) optimizer.zero_grad() loss.backward() optimizer.step() def evaluate_model(model, test_loader): model.eval() correct = 0 total = 0 with torch.no_grad(): for images, labels in test_loader: images = images.view(-1, 28*28) outputs = model(images) _, predicted = torch.max(outputs.data, 1) total += labels.size(0) correct += (predicted == labels).sum().item() accuracy = 100 * correct / total return accuracy def main(): batch_size = 64 learning_rate = 0.01 num_epochs = 5 input_size = 784 # 28x28 num_classes = 10 train_loader, test_loader = load_data(batch_size) model = SoftmaxRegressionModel(input_size, num_classes) criterion = nn.CrossEntropyLoss() optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate) train_model(model, train_loader, criterion, optimizer, num_epochs) accuracy = evaluate_model(model, test_loader) print(f'Test Accuracy of the model on the 10000 test images: {accuracy}%') if __name__ == \\"__main__\\": main()"},{"question":"Write a recursive function that can compute the factorial of a number. Additionally, optimize the function using memoization (caching results of expensive function calls and reusing the results when the same inputs occur again). Your program should handle and gracefully reject any non-integer or negative inputs.","solution":"def factorial(n, memo={}): Compute the factorial of a number using recursion and memoization. Gracefully rejects non-integer or negative inputs. :param n: The number to compute the factorial of. :param memo: The dictionary to store previously computed results (for memoization). :return: The factorial of n. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 if n in memo: return memo[n] memo[n] = n * factorial(n - 1, memo) return memo[n]"},{"question":"Create a selection statement (switch-case) that prints the ordinal number for the day of the week. The program should take an integer (dayNum) as an input variable, where 1 is Monday, 2 is Tuesday etc. until 7 which is Sunday. If the input is lower than 1 or higher than 7 it should print an error message. Make sure that your code is as readable and efficient as possible.","solution":"def day_of_week(dayNum): This function takes an integer (dayNum) as input and returns a string with the ordinal number of the day of the week (1 is Monday, 2 is Tuesday, ..., 7 is Sunday). If the input is lower than 1 or higher than 7, it returns an error message. switcher = { 1: \\"1st (Monday)\\", 2: \\"2nd (Tuesday)\\", 3: \\"3rd (Wednesday)\\", 4: \\"4th (Thursday)\\", 5: \\"5th (Friday)\\", 6: \\"6th (Saturday)\\", 7: \\"7th (Sunday)\\" } return switcher.get(dayNum, \\"Error: Invalid day number\\")"},{"question":"Write a few lines of python code to generate a random password of length 15 which must include at least one uppercase letter, one lowercase letter, one number, and one special character.","solution":"import random import string def generate_password(length=15): if length < 4: raise ValueError(\\"Password length must be at least 4 to accommodate all character types.\\") characters = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(string.punctuation) ] if length > 4: characters += random.choices(string.ascii_letters + string.digits + string.punctuation, k=length-4) random.shuffle(characters) return ''.join(characters)"},{"question":"Write a function that takes as input a string and returns a new string with all the vowels removed. The function should have a time complexity of O(n), where n is the length of the input string, and a space complexity of O(1).","solution":"def remove_vowels(input_str): Removes all vowels from the input string and returns the new string. vowels = \\"aeiouAEIOU\\" result = [] for char in input_str: if char not in vowels: result.append(char) return \\"\\".join(result)"},{"question":"Generate a method to calculate the area of a triangle in Python given the lengths of its three sides. Additionally, the program must include error handling to verify if the input forms a valid triangle.","solution":"import math def calculate_triangle_area(a, b, c): Returns the area of a triangle given the lengths of its three sides using Heron's formula. Includes error handling to verify if the input forms a valid triangle. # Check if the input sides form a valid triangle if not (a + b > c and a + c > b and b + c > a): raise ValueError(\\"The input sides do not form a valid triangle.\\") # Calculate the semi-perimeter s = (a + b + c) / 2.0 # Calculate the area using Heron's formula area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area"},{"question":"Given a boolean input 'b', create a ternary expression to return '1' if 'b' is true, otherwise return '-1'. Ensure the program can handle any boolean input and not just specific values. Your solution should be in Python and should not use if-else statements. Instead, you should demonstrate the use of python's conditional expressions (ternary operator). Additionally, write a function to test your solution with a set of boolean values.","solution":"def ternary_boolean(b): Returns '1' if 'b' is True, otherwise returns '-1'. return '1' if b else '-1'"},{"question":"Create a function in Python that will generate a random string of 10 characters based on a specific subset of allowed characters: ['A', 'B', 'C', 'D', 'E', '2', '3', '4', '5', '6', '7', '?', '!']. The function should ensure that the generated string does not have any consecutive repeating characters. For example, 'AA' or '22' cannot appear in the resultant string.","solution":"import random def generate_random_string(): Generates a random string of 10 characters without consecutive repeating characters from the subset ['A', 'B', 'C', 'D', 'E', '2', '3', '4', '5', '6', '7', '?', '!']. allowed_chars = ['A', 'B', 'C', 'D', 'E', '2', '3', '4', '5', '6', '7', '?', '!'] result = [] for _ in range(10): while True: char = random.choice(allowed_chars) if not result or char != result[-1]: result.append(char) break return ''.join(result)"},{"question":"Implement a function to calculate the intersection of two lists without using built-in set operations or functions. The function should also handle duplicate elements correctly, meaning if an element appears twice in both lists, it should appear twice in the result.","solution":"def list_intersection(list1, list2): Returns the intersection of two lists, including duplicates. intersection = [] list2_copy = list2.copy() # Create a copy to modify for item in list1: if item in list2_copy: intersection.append(item) list2_copy.remove(item) # Remove to handle duplicates correctly return intersection"},{"question":"Write a python function to count the number of unique elements in a list, but without using any built-in functions or data structures like set, dict, or Counter. The function should have a time complexity of O(n) and space complexity of O(1).","solution":"def count_unique_elements(lst): Returns the number of unique elements in a list without using any built-in functions or additional data structures. unique_count = 0 for i in range(len(lst)): is_unique = True for j in range(i): if lst[i] == lst[j]: is_unique = False break if is_unique: unique_count += 1 return unique_count"},{"question":"Given a list of programming terms and jargon, write a program that organizes these terms in increasing alphabetical order, displays them, and also generates a usage example for each term. Also, for an added challenge, ensure that the programming terms are first filtered out from a mixed list of general English words and programming terms.","solution":"def is_programming_term(word): Checks if the given word is a programming term by comparing it against a known list of programming terms. programming_terms = [\\"algorithm\\", \\"array\\", \\"function\\", \\"loop\\", \\"variable\\", \\"syntax\\", \\"class\\", \\"object\\", \\"inheritance\\", \\"recursion\\"] return word.lower() in programming_terms def organize_and_display_terms(mixed_list): Organizes programming terms from a mixed list in increasing alphabetical order and displays them with usage examples. filtered_terms = [word for word in mixed_list if is_programming_term(word)] filtered_terms.sort() for term in filtered_terms: print(term.capitalize()) print(generate_usage_example(term)) print(\\"---\\") def generate_usage_example(term): Generates a simple usage example for the given programming term. examples = { \\"algorithm\\": \\"Example: A sorting algorithm arranges elements in a list in a specified order.\\", \\"array\\": \\"Example: An array is a collection of elements identified by index or key.\\", \\"function\\": \\"Example: A function performs a specific task when called.\\", \\"loop\\": \\"Example: A loop iterates over a sequence of instructions until a condition is met.\\", \\"variable\\": \\"Example: A variable stores data that can change during program execution.\\", \\"syntax\\": \\"Example: Correct syntax is essential for a program to run without errors.\\", \\"class\\": \\"Example: A class is a blueprint for creating objects in object-oriented programming.\\", \\"object\\": \\"Example: An object is an instance of a class containing data and methods.\\", \\"inheritance\\": \\"Example: Inheritance allows a new class to adopt properties of an existing class.\\", \\"recursion\\": \\"Example: Recursion is a technique where a function calls itself.\\" } return examples.get(term.lower(), \\"No example available for this term.\\") # Function call for demonstration (this line should be removed or commented out during actual unit testing and module use) # mixed_list = [\\"apple\\", \\"banana\\", \\"algorithm\\", \\"zebra\\", \\"array\\", \\"sun\\", \\"loop\\", \\"function\\", \\"variable\\"] # organize_and_display_terms(mixed_list)"},{"question":"Trying to level up in Python and looking for some code to solve a specific problem: given a string, find the longest substring with all unique characters. The catch is that I want to use a sliding window for this challenge. Can you provide a solution for this?","solution":"def longest_unique_substring(s): Returns the longest substring with all unique characters using a sliding window approach. char_map = {} left = 0 max_length = 0 start_index = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right if right - left + 1 > max_length: max_length = right - left + 1 start_index = left return s[start_index:start_index + max_length]"},{"question":"You are given a set of 2D points in the form of (x, y) coordinates. Your task is to implement a function \`convex_hull\` which calculates the convex hull of these points. The convex hull of a set of points is the smallest convex polygon that contains all the points. You can assume that the points you are given do not coincide and there are at least 3 points.","solution":"def convex_hull(points): Computes the convex hull of a set of 2D points. Returns the vertices of the convex hull in counter-clockwise order. # Sort the points lexicographically (tuples compare lexicographically). # Remove duplicates. points = sorted(set(points)) # Boring case: no points or a single point, possibly repeated multiple times. if len(points) <= 1: return points # 2D cross product of OA and OB vectors, i.e. z-component of their 3D cross product. # Returns a positive value, if OAB makes a counter-clockwise turn, # negative for clockwise turn, and zero if the points are collinear. def cross(o, a, b): return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]) # Build the lower hull lower = [] for p in points: while len(lower) >= 2 and cross(lower[-2], lower[-1], p) <= 0: lower.pop() lower.append(p) # Build the upper hull upper = [] for p in reversed(points): while len(upper) >= 2 and cross(upper[-2], upper[-1], p) <= 0: upper.pop() upper.append(p) # Concatenate lower and upper hull to get the full hull # The last point of each half is omitted because it's repeated at the beginning of the other half. return lower[:-1] + upper[:-1]"},{"question":"Switch the order of the first and last element in a given array, but also make sure that the function correctly handles negative numbers and zeros. Include error handling to ensure that the array provided is not empty.","solution":"def switch_first_last(arr): Switches the first and last elements of the given array and returns the modified array. if not arr: raise ValueError(\\"Array cannot be empty.\\") arr[0], arr[-1] = arr[-1], arr[0] return arr"},{"question":"Write a function that takes a string and returns a list of substrings for every possible combination of consecutive characters starting from the first character to the last character.","solution":"def substrings(s): Returns a list of substrings for every possible combination of consecutive characters starting from the first character to the last character. return [s[:i] for i in range(1, len(s) + 1)]"},{"question":"Apologies if this question did not make sense because of the possible grammatical mistake. Anyway, I want to ask about constructing a Python function that can generate all unique pair combinations from a given list of numbers. Can you include an example to illustrate how the function works?","solution":"from itertools import combinations def unique_pairs(numbers): Generate all unique pair combinations from a given list of numbers. Args: numbers (list): A list of numbers. Returns: list of tuples: A list of unique pairs. return list(combinations(numbers, 2)) # Example usage: # numbers = [1, 2, 3] # unique_pairs(numbers) should return [(1, 2), (1, 3), (2, 3)]"},{"question":"What is the method in Python to reverse the bits of a given 32 bits unsigned integer?","solution":"def reverse_bits(n): Reverse the bits of a given 32 bits unsigned integer. Parameters: n (int): A 32 bits unsigned integer. Returns: int: The integer result of reversing the bits of the input. result = 0 for _ in range(32): result = (result << 1) | (n & 1) n >>= 1 return result"},{"question":"Given a Python function below that checks if a given number is a prime number, write a question that asks the examinee to make several modifications or radical modifications to this function. Also, provide a new function that appears completely different from the given function but achieves the same goal.","solution":"import math def is_prime(num): Checks if a given number is a prime number. if num <= 1: return False if num <= 3: return True if num > 1 else False if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def is_prime_alt(num): Returns whether a number num is prime by checking divisibility with numbers up to the square root of num. if num < 2: return False if num in (2, 3): return True if num % 2 == 0 or num % 3 == 0: return False for i in range(5, int(math.sqrt(num)) + 1, 6): if num % i == 0 or num % (i + 2) == 0: return False return True"},{"question":"Develop a function in Python to merge consecutive duplicates in a list into a single element and return a new list without those duplicates. However, the twist is to implement this function without using Python's in-built functions or libraries, to increase the complexity and understanding of basic list operations in Python.","solution":"def merge_consecutive_duplicates(lst): Merges consecutive duplicate elements in a list. Args: lst: List of elements. Returns: A list with consecutive duplicates merged. if not lst: return [] result = [lst[0]] # Initialize the result with the first element for i in range(1, len(lst)): if lst[i] != lst[i - 1]: result.append(lst[i]) return result"},{"question":"Import the \\"collections\\" module and count the frequency of each word in a given list of sentences. However, you are not allowed to use any built-in functions or methods that directly solve the problem, such as \\"Counter\\" or \\"split\\". You must implement the counting logic manually. Additionally, you must ensure that the solution has a time complexity of O(n) and a space complexity of O(k), where n is the total number of characters in the input sentences and k is the number of unique words in the sentences.","solution":"def word_frequency(sentences): Counts the frequency of each word in a given list of sentences. Parameters: sentences (list of str): List of sentences to count word frequency in. Returns: dict: A dictionary where the keys are words and the values are their respective frequencies. def custom_split(sentence): Splits a sentence into words without using built-in split function. words = [] word = \\"\\" for char in sentence: if char.isalnum(): word += char else: if word: words.append(word) word = \\"\\" if word: words.append(word) return words word_freq = {} for sentence in sentences: words = custom_split(sentence) for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"Given a weighted directed graph, write a program to find shortest path from a source to every other vertices using dijkstra's algorithm.","solution":"import heapq def dijkstra(graph, start): Function to implement Dijkstra's algorithm to find the shortest path in a weighted directed graph. :param graph: dict, adjacency list representation of the graph where graph[u] is a list of (v, weight) tuples. :param start: starting vertex :return: dict, shortest distances from start to each vertex # Initialize distances with infinity and set the distance for the start node to zero distances = {vertex: float('infinity') for vertex in graph} distances[start] = 0 # Priority queue to hold the vertices and their respective distances from start priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) # If the popped vertex has a greater distance than the already found shortest distance, continue if current_distance > distances[current_vertex]: continue # Examine each neighbor of the current vertex for neighbor, weight in graph[current_vertex]: distance = current_distance + weight # Only consider this new path if it's better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances"},{"question":"Build a Valid Parentheses Generator: Given an input n, write a function that generates all combinations of validly matched parentheses.","solution":"def generate_parentheses(n): Generate all combinations of n pairs of valid parentheses. Args: n (int): Number of pairs of parentheses Returns: List[str]: A list containing all valid combinations of parentheses result = [] def backtrack(s='', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s+'(', left+1, right) if right < left: backtrack(s+')', left, right+1) backtrack() return result"},{"question":"Please write a Python function that takes two string parameters: a text and a pattern. The function should return the starting index of the FIRST occurrence of the pattern within the text or -1 if the pattern is not found. Please implement the function without using any built-in string search functions such as 'in' or 'find'.","solution":"def find_pattern(text, pattern): Returns the starting index of the first occurrence of the pattern within the text or -1 if the pattern is not found. n = len(text) m = len(pattern) if m == 0: return 0 # Edge case: empty pattern for i in range(n - m + 1): j = 0 while j < m and text[i + j] == pattern[j]: j += 1 if j == m: return i return -1"},{"question":"Write a Python program to solve the following LeetCode problem: Given an m x n matrix, return all elements of the matrix in spiral order.","solution":"def spiralOrder(matrix): Returns all elements of the matrix in spiral order. if not matrix or not matrix[0]: return [] m, n = len(matrix), len(matrix[0]) spiral_order = [] left, right = 0, n - 1 top, bottom = 0, m - 1 while left <= right and top <= bottom: for col in range(left, right + 1): spiral_order.append(matrix[top][col]) top += 1 for row in range(top, bottom + 1): spiral_order.append(matrix[row][right]) right -= 1 if top <= bottom: for col in range(right, left - 1, -1): spiral_order.append(matrix[bottom][col]) bottom -= 1 if left <= right: for row in range(bottom, top - 1, -1): spiral_order.append(matrix[row][left]) left += 1 return spiral_order"},{"question":"Write a python program to display Armstrong numbers till a given limit.","solution":"def is_armstrong(number): Checks if the given number is an Armstrong number. num_str = str(number) num_length = len(num_str) sum_of_powers = sum(int(digit) ** num_length for digit in num_str) return sum_of_powers == number def armstrong_numbers_till_limit(limit): Returns a list of Armstrong numbers up to the specified limit. return [num for num in range(limit + 1) if is_armstrong(num)]"},{"question":"How can I create a function in Python that generates random passwords meeting specific criteria? The passwords should have a minimum length of 8 characters and must contain at least one uppercase letter, one lowercase letter, one number, and one symbol.","solution":"import random import string def generate_password(length=8): Generates a random password meeting specific criteria: - Minimum length of 8 characters - At least one uppercase letter - At least one lowercase letter - At least one number - At least one symbol (punctuation) Parameters: length (int): The length of the password to be generated. Default is 8. Returns: str: The generated password. if length < 8: raise ValueError(\\"Password length must be at least 8 characters\\") # Define character sets uppercase_letters = string.ascii_uppercase lowercase_letters = string.ascii_lowercase digits = string.digits symbols = string.punctuation # Ensure the password has at least one of each required character type password_chars = [ random.choice(uppercase_letters), random.choice(lowercase_letters), random.choice(digits), random.choice(symbols) ] # Fill the rest of the password length with a random selection of all character types all_chars = uppercase_letters + lowercase_letters + digits + symbols password_chars += random.choices(all_chars, k=length-4) # Shuffle the list to avoid predictable patterns and join to form password string random.shuffle(password_chars) password = ''.join(password_chars) return password"},{"question":"Given a string \\"Hello World!\\", write a Python function to reverse the string without using any built-in string manipulation functions or libraries. Your solution should also have a time complexity of O(n), where n is the length of the string.","solution":"def reverse_string(s): Reverses the input string without using built-in string manipulation functions or libraries. Args: s (str): The input string to be reversed Returns: str: The reversed string reversed_str = \\"\\" for char in s: reversed_str = char + reversed_str return reversed_str"},{"question":"Given an array with multiple duplicate elements, write a program to remove all duplicates and return the array with only distinct elements. Additionally, ensure that the final array is sorted in ascending order.","solution":"def remove_duplicates_and_sort(arr): Removes duplicates from the array and returns the array with distinct elements sorted in ascending order. return sorted(set(arr))"},{"question":"Change the code to have an array shift right by one without using built-in functions. Additionally, you should modify the array in-place without creating a new array. The array should contain both positive and negative integers, and the length of the array should be at least 10. The shift should wrap around, meaning that the last element should move to the first position in the array.","solution":"def shift_right(arr): Shifts the elements of the array to the right by one position. if len(arr) > 1: last_element = arr[-1] for i in range(len(arr) - 1, 0, -1): arr[i] = arr[i - 1] arr[0] = last_element"},{"question":"Write a Python program to find all elements in the list that are prime numbers. Also, for each identified prime, find and return the nearest prime neighbors (one smaller and one bigger) if they exist. If there are no prime neighbors, return None for that position. Your returned output should be a list of tuples, where each tuple represents a prime number and it's nearest prime neighbors.","solution":"def is_prime(n): Helper function to check if a number is prime if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_nearest_primes(prime): Helper function to find nearest smaller and bigger primes smaller_prime = prime - 1 while smaller_prime > 1 and not is_prime(smaller_prime): smaller_prime -= 1 bigger_prime = prime + 1 while not is_prime(bigger_prime): bigger_prime += 1 smaller_prime = smaller_prime if is_prime(smaller_prime) else None return (smaller_prime, bigger_prime) def prime_elements_with_neighbors(lst): Returns a list of tuples with the prime number and its nearest prime neighbors primes_with_neighbors = [] for num in lst: if is_prime(num): neighbors = find_nearest_primes(num) primes_with_neighbors.append((num, neighbors)) return primes_with_neighbors"},{"question":"Create a Python function that truncates a given string to display only the first 4 unique characters in alphabetical order and the total count of characters in the original string. Additionally, provide a piece of erroneous code as an example for fixing a logical issue.","solution":"def truncate_and_count(s): Truncates the given string to display only the first 4 unique characters in alphabetical order and the total count of characters in the original string. :param s: The input string. :return: A tuple with the truncated string and the count of characters in the original string. unique_chars = sorted(set(s)) truncated_chars = ''.join(unique_chars[:4]) total_count = len(s) return truncated_chars, total_count # Erroneous Code Example: # def faulty_truncate_and_count(s): # truncated_chars = ''.join(sorted(set(s))[:5]) # This incorrectly takes 5 unique characters instead of 4 # total_count = len(s) # return truncated_chars, total_count"},{"question":"You are tasked with writing a data model and a data loader for a GraphQL server. The data model is for an energy consumption monitoring system that tracks the energy consumption of different devices at various locations. The data loader will be used to populate the data model with test data for testing and development purposes.","solution":"from typing import List, Dict from pydantic import BaseModel from datetime import datetime class Device(BaseModel): id: str name: str location: str class EnergyConsumption(BaseModel): device_id: str timestamp: datetime consumption: float class EnergyDataLoader: def __init__(self): self.devices: List[Device] = [] self.energy_consumptions: List[EnergyConsumption] = [] def add_device(self, device: Device): self.devices.append(device) def add_energy_consumption(self, energy_consumption: EnergyConsumption): self.energy_consumptions.append(energy_consumption) def populate_test_data(self): # Populate with dummy devices self.devices = [ Device(id=\\"1\\", name=\\"Air Conditioner\\", location=\\"Living Room\\"), Device(id=\\"2\\", name=\\"Refrigerator\\", location=\\"Kitchen\\"), Device(id=\\"3\\", name=\\"Heater\\", location=\\"Bedroom\\") ] # Populate with dummy energy consumption data self.energy_consumptions = [ EnergyConsumption(device_id=\\"1\\", timestamp=datetime(2023, 10, 1, 14, 0, 0), consumption=100.5), EnergyConsumption(device_id=\\"2\\", timestamp=datetime(2023, 10, 1, 14, 30, 0), consumption=50.2), EnergyConsumption(device_id=\\"3\\", timestamp=datetime(2023, 10, 1, 15, 0, 0), consumption=30.0), EnergyConsumption(device_id=\\"1\\", timestamp=datetime(2023, 10, 1, 15, 30, 0), consumption=110.0), EnergyConsumption(device_id=\\"2\\", timestamp=datetime(2023, 10, 1, 16, 0, 0), consumption=55.5), ]"},{"question":"Create a Python function that takes a string input and returns the number of unique characters present in it. Don't use any built-in Python functions or libraries for handling string operations or counting characters, use only basic programming constructs like loops and conditionals.","solution":"def count_unique_characters(string): Returns the number of unique characters in a string without using any built-in functions or libraries for handling string operations. unique_characters = {} for char in string: if char not in unique_characters: unique_characters[char] = 1 return len(unique_characters)"},{"question":"Below is the JSON representation of the Superclass 'Person'. Expand upon it to include methods for editing the values of its fields, taking into consideration validating inputs for appropriate formats. Also, include a method that throws an exception if the Person's age is below 0 or above 120.","solution":"class Person: def __init__(self, name, age, email): self.name = name self.age = age self.email = email def set_name(self, name): if not isinstance(name, str): raise ValueError(\\"Name must be a string.\\") self.name = name def set_age(self, age): if not isinstance(age, int): raise ValueError(\\"Age must be an integer.\\") if age < 0 or age > 120: raise ValueError(\\"Age must be between 0 and 120.\\") self.age = age def set_email(self, email): if not isinstance(email, str) or \\"@\\" not in email: raise ValueError(\\"Invalid email address.\\") self.email = email def get_name(self): return self.name def get_age(self): return self.age def get_email(self): return self.email"},{"question":"Generate a unique ID for a new user in a system. The ID should be a combination of alphanumeric characters and should have a length of at least 10 characters. Additionally, the ID should be unique among all existing user IDs in the system. Furthermore, the ID generation algorithm should have a time complexity of O(1) and should not rely on any external random number generators or libraries.","solution":"import time def generate_unique_id(existing_ids): Generates a unique alphanumeric ID of at least 10 characters long. This function uses the current timestamp to generate the ID. timestamp = str(time.time()).replace('.', '') unique_id = ''.join(filter(str.isalnum, timestamp)) # Ensure the ID is at least 10 characters long while len(unique_id) < 10: unique_id += '0' # Ensure the ID is unique within the provided existing IDs while unique_id in existing_ids: time.sleep(0.001) timestamp = str(time.time()).replace('.', '') unique_id = ''.join(filter(str.isalnum, timestamp)) while len(unique_id) < 10: unique_id += '0' return unique_id"},{"question":"Write a web service to convert a temperature from Celsius to Fahrenheit in Python using Flask.","solution":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/convert', methods=['GET']) def convert_temperature(): try: celsius = float(request.args.get('celsius')) fahrenheit = (celsius * 9/5) + 32 return jsonify({ 'celsius': celsius, 'fahrenheit': fahrenheit }) except (TypeError, ValueError): return jsonify({ 'error': 'Invalid input. Please provide a valid number for celsius.' }), 400 if __name__ == \\"__main__\\": app.run()"},{"question":"Write a python program to find and print all pairs of numbers in a given list whose product is a power of 2.","solution":"import math def is_power_of_2(n): Returns True if n is a power of 2, otherwise False. return n > 0 and (n & (n - 1)) == 0 def find_pairs_with_product_power_of_2(numbers): Finds and returns all pairs of numbers in the given list whose product is a power of 2. result = [] len_numbers = len(numbers) for i in range(len_numbers): for j in range(i + 1, len_numbers): if is_power_of_2(numbers[i] * numbers[j]): result.append((numbers[i], numbers[j])) return result # Example usage: # numbers = [1, 2, 4, 8, 16, 3] # print(find_pairs_with_product_power_of_2(numbers)) # Output: [(1, 2), (1, 4), (1, 8), (1, 16), (2, 4), (2, 8), (2, 16), (4, 8), (4, 16), (8, 16), (1, 8)]"},{"question":"Create a CLI in Python using the \`click\` library that allows the user to input a string and then reverse it.","solution":"import click @click.command() @click.option('--input_string', prompt='Input String', help='The string to be reversed.') def reverse_string(input_string): Reverses the input string and prints the reversed string. reversed_str = input_string[::-1] click.echo(reversed_str) if __name__ == '__main__': reverse_string()"},{"question":"Construct a piece of code that, when presented with an arbitrary set of characters (string), is able to identify which specific character appears with the least frequency within that set, and also calculate the total number of occurrences of this least frequent character.","solution":"def least_frequent_char(s): Returns the least frequent character and its count in the given string. If there are multiple characters with the same frequency, return any one of them. from collections import Counter if not s: return None, 0 char_count = Counter(s) least_freq = min(char_count.values()) for char, count in char_count.items(): if count == least_freq: return char, count"},{"question":"Develop an array sorting algorithm in Python that sorts an array in place using the quicksort algorithm.","solution":"def quicksort(arr, low, high): Sorts an array in place using the quicksort algorithm. if low < high: # pi is partitioning index, arr[pi] is now at right place pi = partition(arr, low, high) # Recursively sort elements before # partition and after partition quicksort(arr, low, pi - 1) quicksort(arr, pi + 1, high) def partition(arr, low, high): This function takes the last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot. pivot = arr[high] i = low - 1 # index of smaller element for j in range(low, high): # If current element is smaller than or equal to pivot if arr[j] <= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1"},{"question":"Develop a function that generates an array with the prime numbers within the range 0 - 100, not using any libraries, and incorporating a check mechanism to confirm the primality of each number. Here is Python code that accomplishes that task.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def generate_primes_in_range(limit): Generate an array with the prime numbers within the range 0 - limit. primes = [] for number in range(limit + 1): if is_prime(number): primes.append(number) return primes def primes_up_to_100(): Generate an array with the prime numbers within the range 0 - 100. return generate_primes_in_range(100)"},{"question":"Enhance the advanced complexity in the specified code to proficiently manage positive, negative, and floating-point numerals. Add a detailed explanation regarding the mechanism and extend the code to include a check for the y parameter to ensure it's not a floating point number. If y is found to be a floating-point number, the original function should return an error message.","solution":"def add(a, b): Returns the sum of a and b. Ensures that the second parameter 'b' is not a floating point number. if isinstance(b, float): return \\"Error: Second parameter should not be a floating point number.\\" return a + b"},{"question":"Implement the Breadth-first Search algorithm in Python for a given graph represented as an adjacency list.","solution":"from collections import deque def bfs(graph, start): Perform Breadth-First Search on the graph starting from the start node. Args: graph (dict): A dictionary representing an adjacency list of the graph. start (any): The starting node for the BFS traversal. Returns: list: A list of nodes in the order they are visited. visited = set() queue = deque([start]) bfs_order = [] while queue: node = queue.popleft() if node not in visited: visited.add(node) bfs_order.append(node) queue.extend(neighbor for neighbor in graph[node] if neighbor not in visited) return bfs_order"},{"question":"Write a user authentication system for a web app using Python and Flask. The system should include routes for registration, login, and logout. It should also include a middleware for protecting routes that require authentication.","solution":"from flask import Flask, request, jsonify, session, redirect, url_for from werkzeug.security import generate_password_hash, check_password_hash app = Flask(__name__) app.secret_key = 'supersecretkey' # Mock database. users_db = {} @app.route('/register', methods=['POST']) def register(): data = request.get_json() username = data.get('username') password = data.get('password') if username in users_db: return jsonify({'message': 'User already exists'}), 409 hashed_password = generate_password_hash(password) users_db[username] = hashed_password return jsonify({'message': 'User registered successfully'}), 200 @app.route('/login', methods=['POST']) def login(): data = request.get_json() username = data.get('username') password = data.get('password') if username not in users_db or not check_password_hash(users_db[username], password): return jsonify({'message': 'Invalid Credentials'}), 401 session['username'] = username return jsonify({'message': 'Logged in successfully'}), 200 @app.route('/logout', methods=['POST']) def logout(): session.pop('username', None) return jsonify({'message': 'Logged out successfully'}), 200 def login_required(f): def wrap(*args, **kwargs): if 'username' not in session: return jsonify({'message': 'Authentication required'}), 401 return f(*args, **kwargs) wrap.__name__ = f.__name__ return wrap @app.route('/protected') @login_required def protected(): return jsonify({'message': f'Hello, {session[\\"username\\"]}!'}), 200 if __name__ == '__main__': app.run(debug=True)"},{"question":"Given the string \\"Happy Coding\\", write a function in Python to output the first 5 letters. Additionally, ensure your function checks if the input is indeed a string and if it's length is greater than 5 to successfully perform the operation. \\"Happy Coding\\" is not always the input; the function should work with any given string.","solution":"def get_first_five_letters(s): Returns the first 5 letters of the input string s if: - s is a string - s has more than 5 characters Raises: ValueError: if the input is not a string or if it's length is not greater than 5. if not isinstance(s, str): raise ValueError(\\"Input must be a string.\\") if len(s) <= 5: raise ValueError(\\"Input string must have more than 5 characters.\\") return s[:5]"},{"question":"Devise a code structure that allows the manipulation of the case for each individual character in a string. More specifically, create a function that takes a string as input, and outputs the string transformed in such a way that, every even index character is in uppercase and every odd index character is in lowercase. To make it more challenging, implement the function without using built-in case conversion functions, instead, utilize ASCII value manipulation for case conversion.","solution":"def to_alternating_case(s): Transforms the input string so that every even index character is in uppercase and every odd index character is in lowercase using ASCII value manipulation. result = [] for i, char in enumerate(s): if 'A' <= char <= 'Z' or 'a' <= char <= 'z': # only transform alphabetic characters if i % 2 == 0: # convert to uppercase if 'a' <= char <= 'z': result.append(chr(ord(char) - ord('a') + ord('A'))) else: result.append(char) else: # convert to lowercase if 'A' <= char <= 'Z': result.append(chr(ord(char) - ord('A') + ord('a'))) else: result.append(char) else: result.append(char) return ''.join(result)"},{"question":"Create a Python function that not only compares two strings to determine if they are anagrams of each other, but also counts the number of each character in both strings, ensuring character frequency is identical in each string. The function should return True if the strings are anagrams, and False if they’re not.","solution":"def are_anagrams(str1, str2): Returns True if str1 and str2 are anagrams of each other, otherwise False. from collections import Counter # Count the frequency of each character in both strings count1 = Counter(str1) count2 = Counter(str2) # Compare the two counters return count1 == count2"},{"question":"New Prompt: Develop a Python function that converts rectangular coordinates to polar coordinates with respect to a user-given origin. The function \`rect_to_polar_custom_origin\` should accept three arguments: \`x\`, \`y\` for the point's rectangular coordinate, and \`(ox, oy)\` for the origin's rectangular coordinates. It needs to return a tuple \`(radius_custom, angle_custom)\` which represents the distance from the custom origin to the point and the angle with respect to the positive x-axis (measured in radians) in a clockwise direction. Your challenge is to implement this function without using any libraries for mathematical operations, like \`math\`. Crafting a helper function named \`shift_to_custom_origin\` is also required. It should take the \`x\`, \`y\`, and user-defined origin coordinates as inputs, and output the adjusted x and y coordinates in relation to the specified origin.","solution":"import math def shift_to_custom_origin(x, y, ox, oy): Adjusts coordinates (x, y) to a custom origin defined by (ox, oy). shifted_x = x - ox shifted_y = y - oy return shifted_x, shifted_y def rect_to_polar_custom_origin(x, y, ox, oy): Converts rectangular coordinates (x, y) to polar coordinates with respect to a custom origin (ox, oy). shifted_x, shifted_y = shift_to_custom_origin(x, y, ox, oy) # Calculate the radius (distance from origin to the point) radius_custom = math.sqrt(shifted_x**2 + shifted_y**2) # Calculate the angle (in radians) with respect to the positive x-axis angle_custom = math.atan2(shifted_y, shifted_x) return radius_custom, angle_custom"},{"question":"Write a Pythonic function to act as a trampoline for mutually recursive functions to avoid hitting the maximum recursion depth.","solution":"def trampoline(func): A trampoline function to iteratively handle recursive function calls to avoid maximum recursion depth. def trampoline_wrapper(*args, **kwargs): result = func(*args, **kwargs) while callable(result): result = result() return result return trampoline_wrapper # Example of mutually recursive functions using the trampoline def is_even(n): if n == 0: return lambda: True return lambda: is_odd(n - 1) def is_odd(n): if n == 0: return lambda: False return lambda: is_even(n - 1) # Convert them to use the trampoline is_even_trampolined = trampoline(is_even) is_odd_trampolined = trampoline(is_odd)"},{"question":"Write me a python function to filter a list named l, only keeping the elements that are instances of type t and returning those elements in a new list while maintaining the original order.","solution":"def filter_list(l, t): Filters the list 'l' to only include elements that are instances of type 't'. Args: l (list): The list to filter. t (type): The type to filter by. Returns: list: A new list with elements of type 't'. return [element for element in l if isinstance(element, t)]"},{"question":"Write a function that compresses a string by collapsing consecutive identical characters into a single character followed by the number of repeats.","solution":"def compress_string(s): Compresses a string by collapsing consecutive identical characters into a single character followed by the number of repeats. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(s[i-1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) return ''.join(compressed)"},{"question":"Write a function in Python for calculating the area of a circle, but you are not allowed to use the built-in \`math\` module or any other library that provides a method for calculating the value of pi. Additionally, you should implement your own algorithm for approximating the value of pi.","solution":"def calculate_pi(n_terms=10000): Approximates the value of pi using the Gregory-Leibniz series. The more terms you use, the closer the approximation will be. 𝜋 ≈ 4 * (1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 + ...) Args: n_terms (int): Number of terms to use in the approximation. Returns: float: Approximated value of pi. pi = 0 for i in range(n_terms): term = (-1)**i / (2 * i + 1) pi += term return pi * 4 def area_of_circle(radius): Calculates the area of a circle given its radius using an approximation of pi. Args: radius (float): The radius of the circle. Returns: float: The area of the circle. pi = calculate_pi() return pi * radius * radius"},{"question":"Create a complexity analysis by implementing a Quicksort program in Python that sorts a list of 10,000 integer values randomly generated between 1 and 100,000.","solution":"import random def quicksort(arr): Sorts an array in place using the Quicksort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) def generate_random_list(size, lower_bound, upper_bound): Generates a list of random integers between lower_bound and upper_bound. return [random.randint(lower_bound, upper_bound) for _ in range(size)] # Example usage random_list = generate_random_list(10000, 1, 100000) sorted_list = quicksort(random_list) print(\\"Array is sorted:\\", sorted_list == sorted(random_list))"},{"question":"Devise a software subroutine that ascertains the congruence or disparity between two submitted alphanumeric character strings through a detailed character-matching procedure. Implement error handling for null or undefined string entries.","solution":"def string_compare(s1, s2): if s1 is None or s2 is None: raise ValueError(\\"Null values for strings are not allowed\\") if not isinstance(s1, str) or not isinstance(s2, str): raise TypeError(\\"Inputs must be strings\\") matches = [] mismatches = [] min_len = min(len(s1), len(s2)) for i in range(min_len): if s1[i] == s2[i]: matches.append((i, s1[i])) else: mismatches.append((i, s1[i], s2[i])) # Deal with extra characters in the longer string if len(s1) > min_len: mismatches.extend([(i, s1[i], '') for i in range(min_len, len(s1))]) elif len(s2) > min_len: mismatches.extend([(i, '', s2[i]) for i in range(min_len, len(s2))]) return { \\"matches\\": matches, \\"mismatches\\": mismatches }"},{"question":"Given two lists of integers, A and B, write a function in Python that not only combines them into a single list but also sorts the resulting list in ascending order without using built-in sort(). Additionally, implement a way to handle possible duplicate values without including them more than once in the final sorted list.","solution":"def merge_and_sort_unique(A, B): Merge two lists A and B, remove duplicates, and return a sorted list. # Combine lists A and B combined_list = A + B # Remove duplicates by converting to a set then back to a list unique_list = list(set(combined_list)) # Implementing a basic sorting algorithm (bubble sort) for i in range(len(unique_list)): for j in range(0, len(unique_list) - i - 1): if unique_list[j] > unique_list[j + 1]: # Swap if the element found is greater than the next element unique_list[j], unique_list[j + 1] = unique_list[j + 1], unique_list[j] return unique_list"},{"question":"Develop a program in Python that specifically filters out even numbers from a given list using the filter function. Additionally, add a condition to filter out numbers greater than 10. For instance, given a list [2, 3, 4, 5, 6, 7, 8, 9, 12, 18, 24].","solution":"def filter_numbers(numbers): Filters out even numbers and numbers greater than 10 from the given list. :param numbers: List of integers. :return: A list of filtered numbers. return list(filter(lambda x: x % 2 != 0 and x <= 10, numbers))"},{"question":"Create a function which takes a list of integers as input, and returns the maximum value of the list. Additionally, the function should handle cases where the input list is empty or contains non-integer elements. In such cases, the function should raise appropriate exceptions or return an error message. Finally, you should provide at least two different implementations for the function, each using a different approach or algorithm to find the maximum value.","solution":"def find_max_implementation1(numbers): This implementation uses a simple linear search to find the maximum value in the list. if not numbers: raise ValueError(\\"The input list is empty.\\") max_value = numbers[0] for num in numbers: if not isinstance(num, int): raise TypeError(\\"The input list contains non-integer elements.\\") if num > max_value: max_value = num return max_value def find_max_implementation2(numbers): This implementation uses the built-in max() function to find the maximum value in the list. if not numbers: raise ValueError(\\"The input list is empty.\\") if any(not isinstance(num, int) for num in numbers): raise TypeError(\\"The input list contains non-integer elements.\\") return max(numbers)"},{"question":"Given an input string, reverse it and print the reversed string. However, you can only use a constant amount of extra space (i.e., you cannot use a separate array or data structure to store the reversed string). You must also handle any whitespace characters in the string appropriately. Additionally, you should implement the solution in a different programming language than the one provided in the given test.","solution":"def reverse_string(s: str) -> str: Reverse a given string using constant extra space. :param s: The input string :return: The reversed string # Convert the string to a list since strings are immutable in Python str_list = list(s) start, end = 0, len(str_list) - 1 while start < end: # Swap the characters str_list[start], str_list[end] = str_list[end], str_list[start] start += 1 end -= 1 # Convert the list back to a string return ''.join(str_list)"},{"question":"How can you efficiently remove the duplicate items from a list of integers in Python, without using any built-in functions or additional data structures? Ensure that your solution has a time complexity of O(n^2).","solution":"def remove_duplicates(lst): Removes duplicate items from a list of integers. :param lst: List of integers from which duplicates are to be removed. :return: List of integers without duplicates. result = [] for num in lst: if num not in result: result.append(num) return result"},{"question":"Define a function in Python that takes an integer and returns \\"positive\\" if it is positive, \\"negative\\" if it is negative and \\"zero\\" if the integer is 0.","solution":"def check_integer(num): Returns 'positive' if num is positive, 'negative' if num is negative, and 'zero' if num is zero. if num > 0: return \\"positive\\" elif num < 0: return \\"negative\\" else: return \\"zero\\""},{"question":"Write a Python program that reads three integer inputs from a user. The program should calculate and print the average of those three numbers only if the numbers form a Pythagorean triplet. If they don't form a Pythagorean triplet, the program should print an appropriate message instead. Remember, a Pythagorean triplet consists of three positive integers a, b, and c, such that a^2 + b^2 = c^2. Ensure your program prioritizes efficiency and readability.","solution":"def is_pythagorean_triplet(a, b, c): Checks if the given numbers form a Pythagorean triplet. nums = sorted([a, b, c]) return nums[0]**2 + nums[1]**2 == nums[2]**2 def average_of_triplet(a, b, c): Returns the average of the three numbers if they form a Pythagorean triplet, otherwise returns a message indicating they don't. if is_pythagorean_triplet(a, b, c): return (a + b + c) / 3 else: return \\"The numbers do not form a Pythagorean triplet\\""},{"question":"Write a Python function that takes in an array and returns the maximum single subarray sum.","solution":"def max_subarray_sum(arr): Returns the maximum single subarray sum. if len(arr) == 0: return 0 max_current = max_global = arr[0] for number in arr[1:]: max_current = max(number, max_current + number) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a Python program to concatenate two lists index-wise.","solution":"def concatenate_lists_index_wise(list1, list2): Concatenates two lists index-wise. Returns a new list containing elements of list1 and list2 concatenated index-wise. If lists are of different lengths, the resulting list will stop at the length of the shorter list. concatenated_list = [str(a) + str(b) for a, b in zip(list1, list2)] return concatenated_list"},{"question":"Please write a recursive implementation for the function extractDigits(number) which returns a list of the digits in a number in reverse order","solution":"def extractDigits(number): Returns a list of the digits in the number in reverse order using recursion. if number == 0: return [] last_digit = number % 10 return [last_digit] + extractDigits(number // 10)"},{"question":"Create a python function, employing the 'def' statement indeed, that emulates the process of the Manhattan distance formula computation, which measures the total absolute difference on each Cartesian coordinate between a pair of distinct points in a two-dimensional plane. The points will be provided as tuples containing their x and y coordinates: for instance, point_a = (x1, y1) and point_b = (x2, y2).","solution":"def manhattan_distance(point_a, point_b): Computes the Manhattan distance between two points in a 2D Cartesian plane. Parameters: point_a (tuple): The first point as a tuple (x1, y1). point_b (tuple): The second point as a tuple (x2, y2). Returns: int: The Manhattan distance between the two points. return abs(point_a[0] - point_b[0]) + abs(point_a[1] - point_b[1])"},{"question":"Use Python to write a code that displays a multiplication table of a given number, but the table should only display the multiplication results for prime numbers less than or equal to the given number. Additionally, you should implement the Sieve of Eratosthenes algorithm to find the prime numbers.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n. primes = [True] * (n + 1) p = 2 while (p * p <= n): if (primes[p] == True): for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if primes[p]] return prime_numbers def multiplication_table_for_primes(n): Displays the multiplication table of the given number 'n' but only for the multiplication results of prime numbers less than or equal to 'n'. primes = sieve_of_eratosthenes(n) table = {} for prime in primes: table[prime] = n * prime return table"},{"question":"write a code in python to swap the first and last element of a list. If the list only has one element or is empty, print a message to inform the user that no swap is needed.","solution":"def swap_first_last(lst): Swaps the first and last elements of the list. If the list is empty or has only one element, no swap is needed. if len(lst) == 0: return \\"List is empty, no swap needed.\\" elif len(lst) == 1: return \\"Only one element in the list, no swap needed.\\" else: lst[0], lst[-1] = lst[-1], lst[0] return lst"},{"question":"I have a list of natural numbers in Python. Is there a specific function to find the median of this list? If not, could you provide a piece of Python code that solves this problem?","solution":"def find_median(numbers): Returns the median of a list of natural numbers. if not numbers: raise ValueError(\\"The list should not be empty\\") numbers.sort() n = len(numbers) mid = n // 2 if n % 2 == 0: return (numbers[mid - 1] + numbers[mid]) / 2 else: return numbers[mid]"},{"question":"Write a Python program to implement a simple HTTP server that can return the HTML page given below on a request. Additionally, modify the server to handle different types of HTTP requests (GET, POST) and return appropriate responses.","solution":"import http.server import socketserver PORT = 8000 class SimpleHTTPRequestHandler(http.server.SimpleHTTPRequestHandler): def do_GET(self): self.send_response(200) self.send_header('Content-type', 'text/html') self.end_headers() html_content = <html> <head><title>My Simple HTTP Server</title></head> <body> <h1>Welcome to My Simple HTTP Server!</h1> <p>This is a response to a GET request.</p> </body> </html> self.wfile.write(html_content.encode('utf-8')) def do_POST(self): content_length = int(self.headers['Content-Length']) post_data = self.rfile.read(content_length).decode('utf-8') self.send_response(200) self.send_header('Content-type', 'text/html') self.end_headers() response = f <html> <head><title>My Simple HTTP Server</title></head> <body> <h1>POST request processed</h1> <p>You posted:</p> <pre>{post_data}</pre> </body> </html> self.wfile.write(response.encode('utf-8')) def run(server_class=http.server.HTTPServer, handler_class=SimpleHTTPRequestHandler): httpd = server_class(('0.0.0.0', PORT), handler_class) print(f\\"Serving on port {PORT}\\") httpd.serve_forever() if __name__ == '__main__': run()"},{"question":"Write a function to search a target value in a 2D matrix, where each row and each column are sorted in ascending order. The matrix can be large (up to 1000x1000) and the target value can be any integer. The function should return the number of occurrences of the target value in the matrix. The solution should have a time complexity of O(log n + log m), where n is the number of rows and m is the number of columns in the matrix.","solution":"def search_matrix(matrix, target): Search for a target value in a 2D matrix where each row and each column are sorted in ascending order. Parameters: matrix (list of list of int): The 2D matrix to search in. target (int): The value to search for. Returns: int: The number of occurrences of the target value in the matrix. def binary_search_count(arr, target): A helper function to perform binary search on each row or column and count the occurrences of the target. left, right = 0, len(arr) - 1 count = 0 while left <= right: mid = (left + right) // 2 if arr[mid] == target: # Count this occurrence count += 1 # Look to the left and right of the mid for more occurrences l, r = mid - 1, mid + 1 while l >= 0 and arr[l] == target: count += 1 l -= 1 while r < len(arr) and arr[r] == target: count += 1 r += 1 break elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return count if not matrix or not matrix[0]: return 0 n_rows = len(matrix) n_cols = len(matrix[0]) count = 0 # Check each row for the target for row in matrix: count += binary_search_count(row, target) return count"},{"question":"Create a web scraping script using Python's BeautifulSoup library to extract all headlines from a given webpage.","solution":"import requests from bs4 import BeautifulSoup def extract_headlines(url): Extracts all the headlines from the given webpage URL. Parameters: url (str): The website URL to scrape headlines from. Returns: list: A list of strings where each string is a headline. response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') headlines = [headline.get_text() for headline in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])] return headlines"},{"question":"Create a code to read a textfile line by line, and print out the lines that have the word \\"Python\\" or any of its variations, such as \\"python\\" or \\"PYTHON\\". Additionally, the code should count and display the total number of times the word \\"Python\\" or any of its variations appear in the text file. However, the code should also ignore any instances of the word \\"Python\\" that are part of another word, such as \\"Pythonic\\" or \\"Pythonista\\".","solution":"import re def find_python_occurrences(file_path): Reads a file line by line, prints lines containing the word 'Python' (case-insensitive) but not as a part of another word, and counts the occurrences of 'Python'. Args: file_path (str): The path to the text file. Returns: int: The count of 'Python' occurrences. count = 0 pattern = r'bPythonb' with open(file_path, 'r') as file: lines = file.readlines() for line in lines: if re.search(pattern, line, re.IGNORECASE): print(line.strip()) count += len(re.findall(pattern, line, re.IGNORECASE)) return count"},{"question":"Develop a Python function that identifies and returns the top two largest integers in the provided list, with the condition that they must be non-repeating numbers. Consequently, the code snippet needs to filter out repeating entries.","solution":"def top_two_largest_non_repeating(nums): Returns the top two largest non-repeating integers in the provided list. # Get a frequency dictionary frequency = {} for num in nums: frequency[num] = frequency.get(num, 0) + 1 # Filter out repeating numbers non_repeating_nums = [num for num in nums if frequency[num] == 1] # If we don't have at least two non-repeating numbers, return empty list or as many as we have if len(non_repeating_nums) < 2: return non_repeating_nums # Get the top two largest non-repeating numbers top_two = sorted(non_repeating_nums, reverse=True)[:2] return top_two"},{"question":"Create an array using numpy that contains the numbers from 1 to 50, then reshape it into a 5x10 matrix. Also, create a function to randomly shuffle this matrix rows. Use numpy and random libraries for this task.","solution":"import numpy as np import random def create_and_shuffle_matrix(): Creates a matrix from 1 to 50 and reshapes it into 5x10. Shuffles the rows of the matrix randomly. # Create an array from 1 to 50 array = np.arange(1, 51) # Reshape it into a 5x10 matrix matrix = array.reshape(5, 10) # Shuffle the rows of the matrix randomly np.random.shuffle(matrix) return matrix"},{"question":"Create a Python script that sorts the elements within a tuple alphabetically, in reverse order and also classify whether they are vowel or consonant. Handle the exception if any non-alphabetical characters or numbers are included in the tuple.","solution":"def sort_and_classify_tuple(tup): Sorts the elements within a tuple alphabetically in reverse order and classifies them as vowels or consonants. vowels = {'a', 'e', 'i', 'o', 'u'} try: # Validate the tuple to ensure all elements are alphabets for item in tup: if not item.isalpha(): raise ValueError(f\\"The tuple contains non-alphabetical characters: {item}\\") # Sort the tuple elements alphabetically in reverse order sorted_tup = tuple(sorted(tup, reverse=True, key=lambda x: x.lower())) # Classify them as vowels or consonants classification = {item: ('vowel' if item.lower() in vowels else 'consonant') for item in sorted_tup} return sorted_tup, classification except Exception as e: return str(e)"},{"question":"Create a dictionary in Python whose keys are the integers from 1 to 1000 and whose values are the cubes of the keys. The dictionary should only include keys that are prime numbers and the cubes should be calculated using a recursive function. Additionally, the implementation should have a time complexity of O(n) and a space complexity of O(n), where n is the number of prime keys in the dictionary. The recursive function should also handle negative input values appropriately.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def cube_recursive(n): n = abs(n) if n == 1: return 1 return n * n * n def generate_prime_cubes_dict(): prime_cubes = {} for i in range(1, 1001): if is_prime(i): prime_cubes[i] = cube_recursive(i) return prime_cubes"},{"question":"Write a Python program using lists to count the total number of duplicated elements in a given list. Your program should be able to take a list of random integers as input, identify the unique duplicates (ignoring the first occurrence if it is duplicated later) and then return the total number of duplicated elements (considering only repeated occurrences). Additionally, for clarity, display these duplicates alongside their respective counts.","solution":"def count_duplicates(lst): This function takes a list of integers and returns two things: 1. A dictionary showing the duplicate items alongside their respective counts of duplicate occurrences. 2. Total number of duplicate occurrences in the list. from collections import Counter # Count the frequencies of each element in the list element_counts = Counter(lst) # Dictionary to keep track of duplicates and their counts duplicate_counts = {element: count - 1 for element, count in element_counts.items() if count > 1} # Sum of duplicate occurrences total_duplicates = sum(duplicate_counts.values()) return duplicate_counts, total_duplicates"},{"question":"Write a Python function that takes a dictionary as input represented as \`str: str\`. Modify the function to return a new dictionary where each key-value pair is transformed. The transformation is done by converting the key to uppercase and prefixing the value with \\"data_\\". If the dictionary is empty, return an empty dictionary.","solution":"def transform_dictionary(input_dict): Transforms the input dictionary by converting each key to uppercase and prefixing each value with 'data_'. Args: input_dict (dict): The input dictionary with \`str: str\` pairs. Returns: dict: The transformed dictionary. return {k.upper(): f\\"data_{v}\\" for k, v in input_dict.items()}"},{"question":"Write a code to sort following array in increasing order. The array may contain duplicate elements. The time complexity of the algorithm should be O(n^2).","solution":"def bubble_sort(arr): Sorts an array in increasing order using the bubble sort algorithm. Time complexity: O(n^2) Parameters: arr (list): A list of elements to be sorted. Returns: list: Sorted list in increasing order. n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Given two strings of equal length, write a Python program to check if the two strings are isomorphic or not.","solution":"def are_isomorphic(str1, str2): Check if two strings are isomorphic. Args: str1 (str): First string. str2 (str): Second string. Returns: bool: True if the strings are isomorphic, False otherwise. if len(str1) != len(str2): return False map_str1_to_str2 = {} map_str2_to_str1 = {} for char1, char2 in zip(str1, str2): if char1 in map_str1_to_str2: if map_str1_to_str2[char1] != char2: return False else: map_str1_to_str2[char1] = char2 if char2 in map_str2_to_str1: if map_str2_to_str1[char2] != char1: return False else: map_str2_to_str1[char2] = char1 return True"},{"question":"Develop a Python function known as \\"calculate_product\\" which is capable of receiving an arbitrary quantity of arguments. Your function should return the result of multiplying all these arguments together. If no arguments are provided, it should return 1. Additionally, ensure that your function includes exception handling to safeguard against non-numeric inputs.","solution":"def calculate_product(*args): Returns the product of all the provided arguments. Returns 1 if no arguments are provided. Raises ValueError if any of the arguments are not numeric. if len(args) == 0: return 1 product = 1 for arg in args: if not isinstance(arg, (int, float)): raise ValueError(f\\"Non-numeric argument detected: {arg}\\") product *= arg return product"},{"question":"Write a dynamic python program that not only finds the index of the smallest number in a given list but also calculates the average of the rest of the numbers. First, your program must find the smallest number and its index in the list, without using built-in Python functions like \`min()\`. After that, the program should calculate the average of the other numbers in the list (excluding the smallest number) and print both the index of the smallest number and the calculated average.","solution":"def find_index_and_average(lst): Finds the index of the smallest number and calculates the average of the rest of the numbers in the list. if not lst: raise ValueError(\\"The list cannot be empty\\") # Find the index of the smallest number smallest_index = 0 for i in range(1, len(lst)): if lst[i] < lst[smallest_index]: smallest_index = i # Calculate the average of the rest of the numbers sum_other_numbers = 0 count_other_numbers = 0 for i in range(len(lst)): if i != smallest_index: sum_other_numbers += lst[i] count_other_numbers += 1 if count_other_numbers == 0: average = 0 else: average = sum_other_numbers / count_other_numbers return smallest_index, average"},{"question":"Write a python program to print the first 50 prime numbers in a given range using functional programming concepts.","solution":"from itertools import islice from math import sqrt def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(sqrt(n)) + 1, 2): if n % i == 0: return False return True def first_n_primes(n): Generate the first n prime numbers. primes = filter(is_prime, range(2, n*50)) return list(islice(primes, n)) first_50_primes = first_n_primes(50) print(first_50_primes)"},{"question":"Code a method in Python that determines the number of words in a given string. You may assume that the string only contains lowercase letters, spaces, and punctuation marks such as commas and periods.","solution":"def count_words(s): Returns the number of words in the given string \`s\`. Words are assumed to be separated by spaces. # Split the string by spaces to get the words words = s.split() # Return the length of the list of words return len(words)"},{"question":"Write a python function that calculates factorial. However, this function must also be able to handle large numbers and use recursion to solve the problem. Additionally, incorporate exception handling for scenarios where input is not a positive integer.","solution":"def factorial(n): Returns the factorial of a positive integer n using recursion. Raises a ValueError if n is not a positive integer. if not isinstance(n, int) or n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Design a Python function that extracts all unique words from a given string, considering British English spellings as well as technical jargon. Include functionality to filter out stop words.","solution":"import re from collections import Counter stop_words = set([ 'i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \\"you're\\", \\"you've\\", \\"you'll\\", \\"you'd\\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', \\"she's\\", 'her', 'hers', 'herself', 'it', \\"it's\\", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \\"that'll\\", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', \\"don't\\", 'should', \\"should've\\", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', \\"aren't\\", 'couldn', \\"couldn't\\", 'didn', \\"didn't\\", 'doesn', \\"doesn't\\", 'hadn', \\"hadn't\\", 'hasn', \\"hasn't\\", 'haven', \\"haven't\\", 'isn', \\"isn't\\", 'ma', 'mightn', \\"mightn't\\", 'mustn', \\"mustn't\\", 'needn', \\"needn't\\", 'shan', \\"shan't\\", 'shouldn', \\"shouldn't\\", 'wasn', \\"wasn't\\", 'weren', \\"weren't\\", 'won', \\"won't\\", 'wouldn', \\"wouldn't\\" ]) def extract_unique_words(text): Extracts all unique words from a given string, considering British English spellings and technical jargon, and filters out stop words. # Normalize text: lowercase and remove non-alphabetic characters text = text.lower() words = re.findall(r'b[a-z]+b', text) # Filter out stop words words = [word for word in words if word not in stop_words] # Get unique words unique_words = set(words) return unique_words"},{"question":"Imagine you're working with a 'cfg' dictionary that represents a configuration mapping for different model types and tokens. The 'cfg' dictionary includes a 'models' key, which corresponds to another dictionary that maps model types to model objects, and a 'tokens' key, which maps token types to identifiers. Your task is to implement a function that takes this 'cfg' dictionary, a model type, and a function to be applied to the model. The function should apply the given function to the model object retrieved from the dictionary, and then update the dictionary's 'tokens' field by overwriting the token associated with the model type with the updated model.","solution":"def update_model_and_token(cfg, model_type, func): Updates the model and token within the cfg dictionary. Parameters: - cfg (dict): Configuration dictionary containing 'models' and 'tokens' keys. - model_type (str): Type of the model to be updated. - func (function): Function to be applied to the model object. Returns: - None: The function updates the cfg dictionary in place. # Apply the function to the specific model updated_model = func(cfg['models'][model_type]) # Update the model in the dictionary cfg['models'][model_type] = updated_model # Update the token associated with the model type cfg['tokens'][model_type] = updated_model.token_id"},{"question":"I have a JSON file that contains customer information, including their names, addresses, and order history. I need to create a function in Python that can retrieve the order history of a specific customer based on their name. How can I achieve this using the JSON library in Python? Please provide a solution.","solution":"import json def get_order_history_by_name(json_file_path, customer_name): Retrieves the order history of a specific customer based on their name from a JSON file. Args: json_file_path (str): The path to the JSON file containing customer information. customer_name (str): The name of the customer whose order history is to be retrieved. Returns: list: A list of the customer's order history. with open(json_file_path, 'r') as file: data = json.load(file) for customer in data[\\"customers\\"]: if customer[\\"name\\"] == customer_name: return customer.get(\\"order_history\\", []) return None"},{"question":"Write a code segment that generates a prime number pyramid with the height of 7. Additionally, make sure to include a function that checks whether the generated numbers are indeed prime.","solution":"import itertools def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def generate_prime_pyramid(height): Generate a pyramid of prime numbers with given height. prime_pyramid = [] prime_generator = (num for num in itertools.count(2) if is_prime(num)) for level in range(1, height + 1): level_primes = [next(prime_generator) for _ in range(level)] prime_pyramid.append(level_primes) return prime_pyramid # Generate a prime number pyramid of height 7 as an example prime_pyramid_7 = generate_prime_pyramid(7) for row in prime_pyramid_7: print(row)"},{"question":"Develop a Python function that takes a potentially nested list as input and generates a new list with every single element squared; remind that this list may include other lists as elements which themselves can again contain lists and so on. The depth of nesting can be random but is never circular. Elements will always be integer type. For example, [2, 3, [4, 1], 5] becomes [4, 9, [16, 1], 25].","solution":"def square_elements(nested_list): Returns a new list with every single element squared for a potentially nested list of integers. Args: nested_list : list A list potentially containing nested lists with integer elements. Returns: list A new list with squared values, maintaining the original nested structure. result = [] for element in nested_list: if isinstance(element, list): result.append(square_elements(element)) else: result.append(element ** 2) return result"},{"question":"Write a program to convert a given number represented in binary into its equivalent decimal value. If the input is not a valid binary number, the program should print \\"Invalid binary number\\" and terminate.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its decimal equivalent. If the string is not a valid binary number, prints \\"Invalid binary number\\" and returns None. # Check if the binary string is valid if not all(char in '01' for char in binary_str): print(\\"Invalid binary number\\") return None # Convert the valid binary string to decimal decimal_value = 0 for index, char in enumerate(reversed(binary_str)): decimal_value += int(char) * (2 ** index) return decimal_value"},{"question":"What is the syntax for creating a block of code that executes only once in Python?","solution":"def main(): Function that executes a block of code. print(\\"This code runs only once.\\") if __name__ == \\"__main__\\": main()"},{"question":"Print a text in reverse order without using any built-in function or loop. The text can contain any printable ASCII characters. The solution must have a time complexity of O(n), where n is the length of the text, and must not use any additional data structures. Additionally, the solution must be implemented using only a single recursive function.","solution":"def reverse_text_recursive(text): Recursively reverse the given text without using any built-in function or loop. # Base case: if the string is empty or a single character, return it if len(text) <= 1: return text # Recursively reverse the substring excluding the first character, # then concatenate the first character to the end of the reversed substring return reverse_text_recursive(text[1:]) + text[0]"},{"question":"Develop a Python program that accurately computes the total cost of a dining experience, incorporating the effect of service quality on the final bill. In addition to inputting the bill amount and the service rating, the program should also calculate an additional tip based on the service rating, using a sliding scale. For exceptional service, the program should add a fixed amount of 10 to the tip, as well as an additional 10% of the total bill. For good service, the program should add 15% of the total bill to the tip, and for adequate service, the program should add 20% of the total bill to the tip. If the service is poor, the program should not add any tip, and instead, subtract 5% from the total bill as a penalty. The user should have the ability to input the bill amount, service rating, and service quality for the program to generate the final bill amount, with the formula for calculating the final cost being: Final Cost = Bill Amount + Tip - Penalty. The code should be flexible enough to allow the user to input any bill amount and service rating, while accurately reflecting the quality of service received.","solution":"def calculate_final_cost(bill_amount, service_rating): Calculates the final cost of a dining experience based on the bill amount and service rating. Parameters: bill_amount (float): Initial bill amount. service_rating (str): Quality of service which can be 'exceptional', 'good', 'adequate', or 'poor'. Returns: float: Final cost after applying the appropriate tip or penalty. if service_rating == 'exceptional': tip = 10 + (0.10 * bill_amount) elif service_rating == 'good': tip = 0.15 * bill_amount elif service_rating == 'adequate': tip = 0.20 * bill_amount elif service_rating == 'poor': tip = 0 penalty = 0.05 * bill_amount return bill_amount - penalty else: raise ValueError(\\"Invalid service rating. Choose from 'exceptional', 'good', 'adequate', or 'poor'.\\") return bill_amount + tip"},{"question":"Create a command line tool in Python for organizing a music library. The tool should be able to search for songs, play songs, add songs to playlists and generate a list of recommended songs based on listening history.","solution":"import os import random class MusicLibrary: def __init__(self): self.songs = {} self.playlists = {} self.history = [] def add_song(self, song_id, song_info): self.songs[song_id] = song_info def search_song(self, query): return {song_id: info for song_id, info in self.songs.items() if query.lower() in info['title'].lower()} def play_song(self, song_id): if song_id in self.songs: song_info = self.songs[song_id] print(f\\"Playing: {song_info['title']} by {song_info['artist']}\\") self.history.append(song_id) return True return False def add_song_to_playlist(self, playlist_name, song_id): if playlist_name not in self.playlists: self.playlists[playlist_name] = [] self.playlists[playlist_name].append(song_id) def generate_recommendations(self): if not self.history: return random.sample(list(self.songs.items()), 5) song_count = {} for song_id in self.history: song_count[song_id] = song_count.get(song_id, 0) + 1 sorted_songs = sorted(song_count.items(), key=lambda x: x[1], reverse=True) top_songs = [song_id for song_id, count in sorted_songs[:5]] recommendations = [(song_id, self.songs[song_id]) for song_id in top_songs] return recommendations"},{"question":"In a programming language where functions can return multiple values, write a function \`find_extremes\` that takes in a list of integers and returns the minimum and maximum values in the list. If the list is empty, the function should return a tuple of two \`None\` values.","solution":"def find_extremes(lst): Returns a tuple (min, max) containing the minimum and maximum values in the list respectively. If the list is empty, returns (None, None). if not lst: return (None, None) return (min(lst), max(lst))"},{"question":"Given two inputs, a list 'tupList' consisting of tuples with a string and an integer, and a string 'removalCriteria', write a python function to remove all tuples from 'tupList' where the string part matches 'removalCriteria'. The function should also handle potential exceptions gracefully and return the modified list. To make the question more difficult, the solution should not use list comprehension and should instead use a loop.","solution":"def remove_tuples(tupList, removalCriteria): Removes tuples with the string part that matches the removalCriteria. Parameters: - tupList: List of tuples, where each tuple contains (string, integer). - removalCriteria: A string that determines which tuples to remove. Returns: The list with unwanted tuples removed. try: # Validate inputs if not isinstance(tupList, list) or not isinstance(removalCriteria, str): raise ValueError(\\"Invalid input types.\\") # Process and filter the list without list comprehension result = [] for item in tupList: if not isinstance(item, tuple) or len(item) != 2 or not isinstance(item[0], str) or not isinstance(item[1], int): raise ValueError(\\"Invalid tuple format.\\") if item[0] != removalCriteria: result.append(item) return result except Exception as e: print(f\\"An error occurred: {e}\\") return [] # Example usage: # print(remove_tuples([('apple', 2), ('banana', 3), ('apple', 5)], 'apple'))"},{"question":"You've been tasked with developing a Python application to handle user permissions in a company's internal system. The system requires a function to check whether a given user has a specific role. The roles are represented as strings. The function should take a list of roles assigned to a user and the role to check for. If the user has the role, the function should return \`True\`; otherwise, it should return \`False\`. Create a function \`has_role(user_roles, role)\` to address this requirement. Additionally, to ensure the function's robustness, implement a series of test cases using the \`unittest\` framework to validate its functionality.","solution":"def has_role(user_roles, role): Determines whether the specified role is in the list of user roles. Args: user_roles (list): List of roles assigned to a user. role (str): The role to check for. Returns: bool: True if the role is in user_roles, False otherwise. return role in user_roles"},{"question":"Write a Python function that takes a list of integers as input and returns a new list containing only the numbers that are greater than 10 and less than 20. The function should sort the numbers in the new list in descending order.","solution":"def filter_and_sort(nums): Filters the list to include only numbers greater than 10 and less than 20, then returns the filtered list sorted in descending order. Parameters: nums (list): A list of integers. Returns: list: A new list with numbers greater than 10 and less than 20, sorted in descending order. filtered_nums = [num for num in nums if 10 < num < 20] return sorted(filtered_nums, reverse=True)"},{"question":"Modify this Python code in such a way that it solves the FizzBuzz problem, but employs a fundamentally different logic/algorithm than commonly used (i.e., using modulo operator). Try to make it as efficient as possible, while still maintaining readability.","solution":"def fizz_buzz(n): Solves the FizzBuzz problem without using the modulo operator. For multiples of three prints \\"Fizz\\" instead of the number. For the multiples of five prints \\"Buzz\\". For numbers which are multiples of both three and five prints \\"FizzBuzz\\". Otherwise, prints the number itself. result = [] fizz_counter = 3 buzz_counter = 5 for i in range(1, n + 1): fizz = buzz = False if fizz_counter == i: fizz = True fizz_counter += 3 if buzz_counter == i: buzz = True buzz_counter += 5 if fizz and buzz: result.append(\\"FizzBuzz\\") elif fizz: result.append(\\"Fizz\\") elif buzz: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a Python script that takes an integer in binary format as an input and prints its decimal equivalent.","solution":"def binary_to_decimal(binary_str): Converts a binary string to its decimal equivalent. Parameters: binary_str (str): A string representing a binary number. Returns: int: The decimal equivalent of the binary string. return int(binary_str, 2)"},{"question":"Reverse a given list without using any predefined functions. The solution should have a time complexity of O(n) and a space complexity of O(1). Additionally, you are not allowed to use any loops, recursion, or auxiliary data structures.","solution":"def reverse_list(arr): Reverses the given list in place. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Create a random password generator using Python. The generator must include at least 1 special character, 1 numeric character, and 1 capital letter. Also, ensure the password length is between 8 and 16 characters.","solution":"import random import string def generate_password(): Generates a random password that includes at least 1 special character, 1 numeric character, and 1 capital letter. The length of the password is between 8 and 16 characters. special_chars = string.punctuation numeric_chars = string.digits capital_chars = string.ascii_uppercase total_chars = string.ascii_letters + string.digits + string.punctuation # Ensure the password has at least one of each required character password = [ random.choice(special_chars), random.choice(numeric_chars), random.choice(capital_chars) ] # Generate random length between 8 and 16 password_length = random.randint(8, 16) # Fill the remaining length with random characters password += [random.choice(total_chars) for _ in range(password_length - len(password))] # Shuffle the list to ensure randomness and then join to make it a string random.shuffle(password) return ''.join(password)"},{"question":"Write a program that prompts the user for two integers, n and k. It should then generate a numpy array of shape (n, n) filled with random integers between 0 and 10 (both inclusive). Finally, the program should display the kth column of this array.","solution":"import numpy as np def generate_random_matrix(n, k): Generates an n x n numpy array filled with random integers between 0 and 10 (inclusive) and returns the kth column of the array. if n <= 0: raise ValueError(\\"n must be a positive integer\\") if not (0 <= k < n): raise ValueError(\\"k must be between 0 and n-1 (inclusive)\\") matrix = np.random.randint(0, 11, size=(n, n)) kth_column = matrix[:, k] return matrix, kth_column"},{"question":"Design and explain a recursive procedure for generating all possible permutations of a given alphabet string. Your function should ensure the permutations at any given recursive call are not repeated. Write it in such a way that it would halt on inputs larger than a set limit to prevent stack overflows.","solution":"def generate_permutations(s, limit=5): Generates all unique permutations of the string \`s\`. If the length of the string exceeds the limit, it raises a ValueError to prevent stack overflows. :param s: The input string :param limit: The maximum length of the string permissible for generating permutations :return: A list of all unique permutations if len(s) > limit: raise ValueError(f\\"Input string length exceeds the set limit of {limit}\\") if len(s) == 1: return [s] permutations = [] for i, char in enumerate(s): remaining = s[:i] + s[i+1:] for perm in generate_permutations(remaining, limit): permutations.append(char + perm) return permutations"},{"question":"Write a python function that creates a nested dictionary for given key and string values. Your function should also handle the responsibility for checking that the keys are unique, and if not, should overwrite the previous value.","solution":"def create_nested_dict(keys, value): Creates a nested dictionary from given keys and assigns the final key to the provided value. Parameters: keys (list): A list of keys. value (str): The value to be set for the most deeply nested key. Returns: dict: A nested dictionary. if not keys: return value nested_dict = current_dict = {} for key in keys[:-1]: current_dict[key] = {} current_dict = current_dict[key] current_dict[keys[-1]] = value return nested_dict"},{"question":"Create a Markov model in Python that predicts intelligently the next word in a sentence. The model should have a training phase where it learns from a given text corpus. After training, it should be able to generate new sentences by predictively suggesting the next word based on the previously inputted words.","solution":"import random from collections import defaultdict class MarkovModel: def __init__(self): self.model = defaultdict(lambda: defaultdict(int)) def train(self, text): words = text.split() for i in range(len(words) - 1): self.model[words[i]][words[i + 1]] += 1 def predict_next_word(self, current_word): next_words = self.model[current_word] if not next_words: return None next_word = max(next_words, key=next_words.get) return next_word def generate_sentence(self, start_word, length=10): current_word = start_word sentence = [current_word] for _ in range(length - 1): next_word = self.predict_next_word(current_word) if not next_word: break sentence.append(next_word) current_word = next_word return ' '.join(sentence)"},{"question":"Given a string 'readme', write a program to generate an array with all possible permutations of the characters in the string. The program should also check for and disregard duplicate permutations. Depending on your solution, the time complexity of the algorithm should be at most O(n * n!) and the space complexity should be O(n!).","solution":"import itertools def unique_permutations(string): Generate all unique permutations of the characters in the input string. :param string: The input string :return: A list of unique permutations # Generate all permutations using itertools.permutations permutations = set(itertools.permutations(string)) # Convert permutations from tuples back to strings return [''.join(p) for p in permutations]"},{"question":"Given a list of dictionaries each containing 'fruit' and 'price_per_kg' keys, write a program that chooses a fruit at random, and calculates and prints the price for 2.5kg of that fruit. Make sure to handle possible exceptions too.","solution":"import random def select_fruit_and_calculate_price(fruits): Select a random fruit from the list and calculate the price for 2.5 kg of that fruit. Parameters: fruits (list): A list of dictionaries each containing 'fruit' and 'price_per_kg' keys. Returns: tuple: The selected fruit name and the calculated price for 2.5 kg. try: if not fruits: raise ValueError(\\"The list of fruits cannot be empty.\\") selected_fruit = random.choice(fruits) if 'fruit' not in selected_fruit or 'price_per_kg' not in selected_fruit: raise KeyError(\\"Each dictionary must contain 'fruit' and 'price_per_kg' keys.\\") fruit_name = selected_fruit['fruit'] price_per_kg = selected_fruit['price_per_kg'] if not isinstance(price_per_kg, (int, float)) or price_per_kg < 0: raise ValueError(\\"The price_per_kg must be a non-negative number.\\") price_for_2_5_kg = 2.5 * price_per_kg return (fruit_name, price_for_2_5_kg) except (ValueError, KeyError) as e: print(f\\"Error: {e}\\") return None"},{"question":"Write a function that updates a given dictionary with a given key-value pair. However, the function should check if the key already exists in the dictionary. If it does, the function should raise a custom exception indicating that the key already exists and cannot be updated. If the key does not exist, the function should add the key-value pair to the dictionary. The function should also log every operation using a logger.","solution":"import logging # Custom exception for already existing key class KeyExistsError(Exception): pass # Configure logger logging.basicConfig(level=logging.INFO) logger = logging.getLogger(__name__) def update_dictionary(dictionary, key, value): Updates the dictionary with the key-value pair. Raises KeyExistsError if the key already exists. Logs the operation. Parameters: dictionary (dict): The dictionary to update. key: The key to check/add. value: The value to associate with the key. Returns: dict: Updated dictionary. if key in dictionary: logger.error(\\"Key '%s' already exists. Cannot update the dictionary.\\", key) raise KeyExistsError(f\\"Key '{key}' already exists in the dictionary.\\") dictionary[key] = value logger.info(\\"Added key '%s' with value '%s' to the dictionary.\\", key, value) return dictionary"},{"question":"Create a function that takes two lists of equal length and zips them together into a dictionary, with the second list's elements as values and the first list's elements as keys. Ensure that the function returns an empty dictionary if either of the lists is empty. The function should handle strings and numbers as elements in the lists and return an error message if the elements in the first list are not unique.","solution":"def zip_into_dict(keys, values): Zips two lists into a dictionary with elements from 'keys' as dictionary keys and elements from 'values' as dictionary values. Args: - keys (list): The list to be used as the dictionary keys - values (list): The list to be used as the dictionary values Returns: - dict: A dictionary created by zipping the two lists together or {} - str: An error message if keys are not unique if not keys or not values: return {} if len(keys) != len(values): return {} if len(keys) != len(set(keys)): return \\"Key elements are not unique\\" return dict(zip(keys, values))"},{"question":"Generate a python code that takes a list of integers as input, checks if each number in the input list is divisible by 3 and returns a list of booleans corresponding to each number. Then, calculate the sum of all the numbers in the input list that are divisible by 3 and print it. Finally, find the largest and smallest number in the input list that are divisible by 3 and print them as well. Also, add comments explaining the working of the code.","solution":"def check_divisibility_and_calculate(numbers): This function takes a list of integers as input, checks if each number is divisible by 3, and returns a list of booleans indicating the result for each number. Additionally, it calculates and prints the sum of numbers divisible by 3, the largest, and the smallest number among them. # List to store boolean results divisible_by_3 = [num % 3 == 0 for num in numbers] # Filtering numbers divisible by 3 divisible_numbers = [num for num in numbers if num % 3 == 0] if not divisible_numbers: print(\\"No numbers in the list are divisible by 3.\\") return divisible_by_3 # Calculating the sum of numbers divisible by 3 sum_divisible_by_3 = sum(divisible_numbers) print(f\\"Sum of numbers divisible by 3: {sum_divisible_by_3}\\") # Finding the largest and smallest number divisible by 3 largest_divisible_by_3 = max(divisible_numbers) smallest_divisible_by_3 = min(divisible_numbers) print(f\\"Largest number divisible by 3: {largest_divisible_by_3}\\") print(f\\"Smallest number divisible by 3: {smallest_divisible_by_3}\\") return divisible_by_3"},{"question":"Create a Python function that takes in a string as input and returns a dictionary where the keys are the unique characters in the string and the values are lists containing the indices of each occurrence of the character in the string. The function should ignore any characters that are not letters. Additionally, the function should be case-insensitive, meaning that uppercase and lowercase letters should be treated as the same character.","solution":"def char_indices(s): Takes in a string s and returns a dictionary where the keys are unique alphabetic characters (case-insensitive) and the values are lists of indices where each character appears in the string. Non-alphabetic characters are ignored. indices = {} for idx, char in enumerate(s): if char.isalpha(): lower_char = char.lower() if lower_char not in indices: indices[lower_char] = [] indices[lower_char].append(idx) return indices"},{"question":"Given two strings, str1 and str2, write a function minDeletionstoMakeAnagram(str1, str2) that returns the minimum number of deletions required to make the two strings anagrams of each other.","solution":"from collections import Counter def minDeletionstoMakeAnagram(str1, str2): Returns the minimum number of deletions required to make the two strings anagrams of each other. count1 = Counter(str1) count2 = Counter(str2) num_deletions = 0 # Calculate deletions needed for str1 for char in count1: if char in count2: num_deletions += abs(count1[char] - count2[char]) else: num_deletions += count1[char] # Calculate deletions needed for str2 for char in count2: if char not in count1: num_deletions += count2[char] return num_deletions"},{"question":"What is the PyTorch code to calculate the dot product of two vectors? Please provide the implementation in the form of a Python function.","solution":"import torch def dot_product(vector1, vector2): Calculates the dot product of two vectors using PyTorch. Args: vector1 (torch.Tensor): The first input vector. vector2 (torch.Tensor): The second input vector. Returns: torch.Tensor: The dot product of the two input vectors. return torch.dot(vector1, vector2)"},{"question":"Create an algorithm that determines if a given linked list is a palindrome.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def is_palindrome(head: ListNode) -> bool: Determine if a given singly linked list is a palindrome. :param head: Head node of the linked list. :return: True if the linked list is a palindrome, False otherwise. # Convert linked list to list for easier comparison vals = [] current = head while current is not None: vals.append(current.val) current = current.next # Check if the list is a palindrome return vals == vals[::-1]"},{"question":"Use Regular Expressions to find all unique email addresses in a given string. Additionally, provide a piece of erroneous code as a reference to create confusion. Make sure to highlight the error and explain how to correct it.","solution":"import re def find_unique_emails(text): Finds all unique email addresses in the given string. Args: text (str): A string containing email addresses. Returns: list: A list of unique email addresses. emails = re.findall(r'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b', text) return list(set(emails)) # Erroneous code example: def erroneous_find_emails(text): An example of erroneous code to create confusion. Args: text (str): A string containing email addresses. Returns: list: A list of unique email addresses. emails = re.findall(r'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b', text) return emails # Error: Not converting the list to a set, hence not ensuring uniqueness. # Correction: Convert the list to a set to ensure uniqueness. # This is already demonstrated in the correct function \`find_unique_emails\`."},{"question":"Given two numbers x and y, write a Python function that returns their sum, difference, product, and division results (both integer and floating-point divisions). However, do not use the built-in arithmetic operators (+, -, *, /, //).","solution":"def arithmetic_operations(x, y): Returns the sum, difference, product, and division results (both integer and floating-point divisions) of x and y without using built-in arithmetic operators. # Sum sum_ = add(x, y) # Difference diff = subtract(x, y) # Product prod = multiply(x, y) # Floating-point Division if y == 0: float_div = None else: float_div = divide(x, y) # Integer Division if y == 0: int_div = None else: int_div = integer_divide(x, y) return sum_, diff, prod, float_div, int_div def add(x, y): return x.__add__(y) def subtract(x, y): return x.__sub__(y) def multiply(x, y): result = 0 for _ in range(abs(y)): result = add(result, abs(x)) if (x < 0 and y > 0) or (x > 0 and y < 0): result = subtract(0, result) return result def divide(x, y): result, sign = 0.0, 1.0 if x < 0: x, sign = -x, -sign if y < 0: y, sign = -y, -sign while x >= y: result = add(result, 1) x = subtract(x, y) result = result * sign return float(result + x / y) def integer_divide(x, y): result = 0 sign = 1 if x < 0: x, sign = -x, -sign if y < 0: y, sign = -y, -sign while x >= y: result = add(result, 1) x = subtract(x, y) return add(0, result) * sign"},{"question":"You're given Python code that calculates the average of a list lst of size n using some averaging function _average. Instead of getting the average for the whole list, you're tasked to create a function rolling_average that finds the rolling average for that list.","solution":"def rolling_average(lst, window_size): Calculate the rolling average for a list with a specified window size. :param lst: List of numbers. :param window_size: Size of the rolling window. :return: List of rolling averages. if window_size <= 0: raise ValueError(\\"Window size must be greater than 0.\\") if len(lst) < window_size: raise ValueError(\\"List length must be greater than or equal to the window size.\\") result = [] for i in range(len(lst) - window_size + 1): window = lst[i:i + window_size] average = sum(window) / window_size result.append(average) return result"},{"question":"Define a function that takes a list of positive integers as input and returns a list of all odd numbers greater than 10 and less than 100, while also ensuring that the returned list is sorted in ascending order. The function should handle cases where the input list is empty and should raise a ValueError if any negative numbers or duplicate numbers are present in the input list. Additionally, the function should handle cases where the input list contains non-integer elements and convert them to integers before processing.","solution":"def filter_and_sort_odds(lst): Takes a list of positive integers as input and returns a sorted list of all odd numbers that are greater than 10 and less than 100. The function raises a ValueError if any negative numbers or duplicate numbers are present in the input list. The function converts all elements in the list to integers before processing. Parameters: lst (list): list of numbers Returns: list: sorted list of odd numbers satisfying the conditions # Convert all elements to integers lst = [int(x) for x in lst] # Check for negative numbers if any(x < 0 for x in lst): raise ValueError(\\"Negative numbers are not allowed\\") # Check for duplicates if len(lst) != len(set(lst)): raise ValueError(\\"Duplicate numbers are not allowed\\") # Filter the list for odd numbers greater than 10 and less than 100 filtered_list = [x for x in lst if x > 10 and x < 100 and x % 2 != 0] # Return the sorted list return sorted(filtered_list)"},{"question":"Reverse a given list of strings, but each string should be reversed individually as well. For example, the given list [\\"hello\\", \\"world\\"] should be transformed to [\\"olleh\\", \\"dlrow\\"]. Then, reverse the order of the elements in the list, resulting in [\\"dlrow\\", \\"olleh\\"]. You should not use any built-in reverse methods in your solution.","solution":"def reverse_each_and_list(strings): Reverses each string in the list and then reverses the order of the elements in the list. reversed_strings = [s[::-1] for s in strings] reversed_order = [] for string in reversed_strings: reversed_order.insert(0, string) return reversed_order"},{"question":"How can I design an algorithm that finds an element common to three sorted arrays using Python?","solution":"def find_common_element(arr1, arr2, arr3): Returns a common element in three sorted arrays if one exists. If no common element exists, returns None. i, j, k = 0, 0, 0 while i < len(arr1) and j < len(arr2) and k < len(arr3): # If x = y and y = z, return any one of them if arr1[i] == arr2[j] == arr3[k]: return arr1[i] # If x < y, we increment x elif arr1[i] < arr2[j]: i += 1 # If y < z, we increment y elif arr2[j] < arr3[k]: j += 1 # Increment z else: k += 1 return None"},{"question":"Exeq data from sample.json file using Python, with a condition that the code must only utilize recursive functions. Additionally, you are required to modify the code such that it extracts data only from a specific subset of the JSON file, defined by a nested key value.","solution":"import json def extract_data(data, nested_key): Recursively extracts data from a JSON object for a specific nested key. Parameters: data (dict): The JSON object. nested_key (str): The nested key for which data needs to be extracted. Returns: list: List containing all values for the specified nested key. extracted = [] def recursive_search(data, nested_key): if isinstance(data, dict): for key, value in data.items(): if key == nested_key: extracted.append(value) else: recursive_search(value, nested_key) elif isinstance(data, list): for item in data: recursive_search(item, nested_key) recursive_search(data, nested_key) return extracted # Sample data to work with, assuming the JSON file content is passed as this dictionary sample_data = { \\"a\\": { \\"b\\": { \\"c\\": \\"value1\\", \\"d\\": {\\"c\\": \\"value2\\"} }, \\"e\\": \\"value3\\" }, \\"f\\": [ {\\"c\\": \\"value4\\"}, {\\"g\\": {\\"c\\": \\"value5\\"}} ] }"},{"question":"What is one possible implementation of a function that checks if a number is even or odd in Python?","solution":"def is_even(number): Returns True if the number is even, otherwise False. return number % 2 == 0"},{"question":"Implement a function in python which checks if a given number is prime or not. Additionally, implement it in a way that it also returns the smallest divisor if the number is not prime. Make sure to handle erroneous inputs as well.","solution":"def check_prime(number): Checks if a given number is prime. If the number is not prime, returns the smallest divisor. Handles erroneous inputs. Parameters: number (int): The number to check for primality. Returns: bool or tuple: True if the number is prime, or a tuple with (False, smallest_divisor) if not. Returns a string 'Invalid input' if the input is not a positive integer. if not isinstance(number, int) or number <= 1: return 'Invalid input' if number == 2: return True if number % 2 == 0: return False, 2 for i in range(3, int(number ** 0.5) + 1, 2): if number % i == 0: return False, i return True"},{"question":"Build a dictionary from a given list of tuples, where each key in the dictionary is a string and each value is a list of integers. The input list will have at most 1000 tuples. The keys in the dictionary will be at most 100 characters long and will only contain lowercase letters. The values in the list will be at most 1000 integers, ranging from -1000 to 1000. Ensure that the dictionary is sorted in lexicographical order based on the keys.","solution":"def build_sorted_dict(tuple_list): Builds a dictionary from a list of tuples where each key is a string and each value is a list of integers. The dictionary should be sorted in lexicographical order of its keys. Parameters: tuple_list (list of tuple): A list of tuples where each tuple contains a string and an integer. Returns: dict: A dictionary with strings as keys and lists of integers as values, sorted by keys. result_dict = {} for key, value in tuple_list: if key not in result_dict: result_dict[key] = [] result_dict[key].append(value) sorted_dict = dict(sorted(result_dict.items())) return sorted_dict"},{"question":"Write a function in your preferred programming language that takes a URL as input and returns the exact date and time, in ISO 8601 format, when the content of the page was last modified. The function should handle HTTP and HTTPS URLs, and should return an error if the URL is invalid or if the server does not support returning the Last-Modified header. In case of an error, the function should return a standardized error message in JSON format, containing the error code, error message, and any relevant details. Additionally, the function should include proper error handling for network connectivity issues, and should retry the request up to 5 times before giving up. For successful responses, the function should also return the HTTP status code and the length of the response body.","solution":"import requests import json import time def get_last_modified_date(url): Takes a URL and returns the date and time in ISO 8601 format when the content of the page was last modified. retry_count = 5 for _ in range(retry_count): try: response = requests.head(url) if response.status_code != 200: return json.dumps({ \\"error_code\\": response.status_code, \\"error_message\\": \\"Non-success status code received\\", \\"details\\": response.reason }) last_modified = response.headers.get('Last-Modified') if not last_modified: return json.dumps({ \\"error_code\\": \\"NO_LAST_MODIFIED\\", \\"error_message\\": \\"The server does not support returning the Last-Modified header\\", \\"details\\": None }) response_body_length = len(response.content) return json.dumps({ \\"status_code\\": response.status_code, \\"last_modified\\": last_modified, \\"response_body_length\\": response_body_length }) except requests.exceptions.RequestException as e: if _ == retry_count - 1: return json.dumps({ \\"error_code\\": \\"NETWORK_ERROR\\", \\"error_message\\": \\"Network connectivity issue\\", \\"details\\": str(e) }) time.sleep(1) # Wait for 1 second before retrying # Example usage: # result = get_last_modified_date(\\"https://www.example.com\\") # print(result)"},{"question":"System: Configure the auto-completion engine to suggest code for implementing a specific design pattern, such as the observer pattern.","solution":"class Observer: Observer base class that defines a method to update the observer. def update(self, message): pass class Subject: Subject class that manages observers and notifies them of changes. def __init__(self): self._observers = [] def attach(self, observer): Attach an observer to the subject. if observer not in self._observers: self._observers.append(observer) def detach(self, observer): Detach an observer from the subject. try: self._observers.remove(observer) except ValueError: pass def notify(self, message): Notify all observers about an event. for observer in self._observers: observer.update(message)"},{"question":"Given a recursive program, \\"a=4; if (a==1) print(1) else print(a*(a-1));\\" add more complexity for a senior computer science student. Enhance it to print the factorial of 'a' using recursion where 'a' is user input. Remember to handle edge cases including negative numbers and very large values of 'a'. Also, use exception handling to manage any errors or unusual cases.","solution":"def factorial(a): Returns the factorial of a. Factorial of a non-negative integer a is the product of all positive integers less than or equal to a. If a is negative, it raises a ValueError. Parameters: a (int): The integer to compute the factorial of. Returns: int: Factorial of a. if not isinstance(a, int): raise TypeError(\\"Input must be an integer.\\") if a < 0: raise ValueError(\\"Factorial is not defined for negative numbers.\\") if a == 0 or a == 1: return 1 else: return a * factorial(a - 1)"},{"question":"Sort the given array using QuickSort algorithm.","solution":"def quicksort(arr): Sorts the given array using the QuickSort algorithm. Parameters: arr (list): The list of elements to be sorted. Returns: list: A new sorted list. if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"question":"Develop a Python program to eliminate elements in a given array that have a singular occurrence, while retaining those with multiple instances. Utilize the following array for the task: [1, 2, 2, 3, 3, 3, 4, 4]. Approach this problem by devising a method to filter out the unique elements and keep the ones that are repeated.","solution":"from collections import Counter def eliminate_single_occurrences(arr): Returns a list of elements that appear more than once in the input array. element_counts = Counter(arr) result = [element for element in arr if element_counts[element] > 1] return result # Example array to test the function example_array = [1, 2, 2, 3, 3, 3, 4, 4] print(eliminate_single_occurrences(example_array)) # Expected output: [2, 2, 3, 3, 3, 4, 4]"},{"question":"Write a program that reads a text file and prints the total number of words in the file. The program should count only the words that contain at least one vowel.","solution":"def count_words_with_vowels(filename): Reads a text file and returns the total number of words that contain at least one vowel. vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'} word_count = 0 with open(filename, 'r') as file: for line in file: words = line.split() for word in words: if any(char in vowels for char in word): word_count += 1 return word_count"},{"question":"Please develop a python module named \\"obj_to_tensor\\" that can transform the given object into a tensor with specified attributes such as data type and device. Additionally, the module should be able to handle different types of input objects such as lists, numpy arrays, and tensors, and should be able to convert between them seamlessly. Please ensure that the module provides comprehensive error handling and informative messages for all possible scenarios, including a check for the input object being None.","solution":"import torch import numpy as np def obj_to_tensor(obj, dtype=None, device=None): Transforms the given object into a tensor with specified attributes such as data type and device. Parameters: obj: list, numpy array, or tensor The input object to be transformed into a tensor. dtype: torch.dtype, optional The desired data type of the tensor. device: torch.device, optional The desired device of the tensor. Returns: tensor: torch.Tensor The resulting tensor with the specified attributes. Raises: ValueError: If the input object is None. TypeError: If the input object type is not supported. if obj is None: raise ValueError(\\"Input object is None\\") if isinstance(obj, list): tensor = torch.tensor(obj, dtype=dtype, device=device) elif isinstance(obj, np.ndarray): tensor = torch.from_numpy(obj).to(dtype=dtype, device=device) elif isinstance(obj, torch.Tensor): tensor = obj.to(dtype=dtype, device=device) else: raise TypeError(\\"Unsupported input type. Supported types: list, numpy.ndarray, torch.Tensor\\") return tensor"},{"question":"Create a python program to count how many times a word appears in a given string. However, the program should also be able to handle multiple words at once and return the count of each word in the string. Additionally, the program should ignore case sensitivity and punctuation marks, and only consider alphanumeric characters as part of a word.","solution":"import re from collections import Counter def count_words(text, words): Returns the count of each word in the list \`words\` within the given \`text\`. It ignores case sensitivity and punctuation. :param str text: The text in which to count the words :param list words: A list of words to count in the text :return: A dictionary with words as keys and their counts as values :rtype: dict # Convert text to lower case and remove all non-alphanumeric characters clean_text = re.sub(r'[^a-zA-Z0-9s]', '', text.lower()) words_list = clean_text.split() # Create a counter for the words word_counts = Counter(words_list) # Prepare the output with the count of each word in the input list result = {word: word_counts[word.lower()] for word in words} return result"},{"question":"Using pseudocode, design an algorithm for in-place quicksort 2 (a variation of the quicksort algorithm), then implement it in your preferred programming language. Discuss the time and space complexity of your implementation. Compare this with standard quicksort and explain why in-place quicksort has advantages in terms of space complexity.","solution":"def quicksort_in_place(arr, low, high): In-place quicksort algorithm. This function sorts the array between indexes low and high inclusive. if low < high: pi = partition(arr, low, high) quicksort_in_place(arr, low, pi - 1) quicksort_in_place(arr, pi + 1, high) def partition(arr, low, high): Partition function for in-place quicksort. It selects a pivot element, places it in its correct position in the sorted array, and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot. pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1"},{"question":"Generate an 10-digit pseudo-random prime number in Python","solution":"import random from sympy import isprime def generate_10_digit_prime(): Generates a 10-digit pseudo-random prime number. while True: # Generate a random 10-digit number num = random.randint(10**9, 10**10 - 1) if isprime(num): return num"},{"question":"Write a Python program that takes in a dictionary where keys are strings representing integers and returns a list of strings representing numbers in descending order based on their integer value.","solution":"def sort_dict_keys_desc(dictionary): Returns a list of dictionary keys sorted in descending order based on their integer value. return sorted(dictionary.keys(), key=int, reverse=True)"},{"question":"Alter the following program such that it returns the complement of the given list, but without using any built-in functions or methods, and ensure that the program has a time complexity of O(n) and a space complexity of O(1), where n is the length of the list. Additionally, you are not allowed to use any temporary variables or modify the input list in-place.","solution":"def complement(lst): Returns the complement of the given list without using any built-in functions, temporary variables or modifying the input list in-place. :param lst: List of boolean values. :return: List of complemented boolean values. return [not elem for elem in lst]"},{"question":"Consider the given erroneous piece of code for a selection sort algorithm. Identify the bugs and modify the code to correctly sort the subsequent numerical array in ascending order: [4, 1, 10, 8, 5].","solution":"def selection_sort(arr): Sorts an array in ascending order using selection sort algorithm. n = len(arr) for i in range(n): min_index = i for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j # Swap the found minimum element with the first element arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"question":"Design an algorithm to solve the Eight-Queens puzzle using Backtracking. You must use a 2D array as your data structure and display the final configuration of the board on the console in a visual format, that clearly identifies the location of the queens. Additionally, incorporate a feature in your solution that allows the user to stop the execution of the algorithm at any point in time by pressing any key, however, ensure that the program safely terminates and doesn't leave any loose threads running in the background.","solution":"import threading import sys import time def print_board(board): Helper function to print the chessboard for row in board: print(\\" \\".join(row)) print() def is_safe(board, row, col): Check if it is safe to place a queen at board[row][col]. This means checking the current row, upper diagonal on left side, and lower diagonal on left side for an existing queen. for i in range(col): if board[row][i] == 'Q': return False for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i][j] == 'Q': return False for i, j in zip(range(row, len(board), 1), range(col, -1, -1)): if board[i][j] == 'Q': return False return True def solve_n_queens_util(board, col, stop_event): Utility function to solve the N Queens problem using backtracking if stop_event.is_set(): return False if col >= len(board): print_board(board) return True for i in range(len(board)): if is_safe(board, i, col): board[i][col] = 'Q' if solve_n_queens_util(board, col + 1, stop_event): return True board[i][col] = '.' return False def solve_n_queens(stop_event): Solves the N Queens problem board = [['.' for _ in range(8)] for _ in range(8)] if not solve_n_queens_util(board, 0, stop_event): print(\\"Solution does not exist\\") return def solve_n_queens_background(): stop_event = threading.Event() solver_thread = threading.Thread(target=solve_n_queens, args=(stop_event,)) solver_thread.start() try: input(\\"Press any key to stop the algorithm...n\\") except: pass finally: stop_event.set() solver_thread.join()"},{"question":"Write a Python program to find all the prime numbers in the range between 1 to 100 and print the product of all the prime numbers found.","solution":"def is_prime(n): Returns True if n is a prime number, else False if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_product_in_range(): Finds all prime numbers between 1 and 100 and returns their product. prime_list = [] for num in range(1, 101): if is_prime(num): prime_list.append(num) product = 1 for prime in prime_list: product *= prime return product"},{"question":"Create a Python program for implementing a linear search algorithm that finds the first occurrence of a target element in an array of integers.","solution":"def linear_search(arr, target): Performs a linear search to find the first occurrence of the target element in arr. :param arr: List of integers :param target: The target integer to find :return: The index of the first occurrence of the target element, or -1 if not found for index, element in enumerate(arr): if element == target: return index return -1"},{"question":"Using Python, let's see how various mathematic operations work. Firstly, can you write a function that adds two numbers together? Secondly, modify this function to return the subtraction of the two numbers instead. Thirdly, create a multiplication function. Finally, create a division function, handling potential ZeroDivisionError when the divisor is zero. For each function, include type hinting in your code.","solution":"def add(a: float, b: float) -> float: Returns the sum of a and b. return a + b def subtract(a: float, b: float) -> float: Returns the difference between a and b. return a - b def multiply(a: float, b: float) -> float: Returns the product of a and b. return a * b def divide(a: float, b: float) -> float: Returns the division of a by b. Handles division by zero. if b == 0: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") return a / b"},{"question":"Write a Python program that converts a string representation of a number in a given base (between 2 and 16) to an integer, and vice-versa, convert an integer to a string representation in the specified base. For both conversion methods, the program should support the use of the letters 'A' to 'F' (or 'a' to 'f') for bases higher than 10.","solution":"def str_to_int(string, base): Converts a string representation of a number in a given base to an integer. Parameters: string (str): The string representation of the number. base (int): The base of the number in the string. Returns: int: The integer representation of the number. return int(string, base) def int_to_str(number, base): Converts an integer to a string representation in the specified base. Parameters: number (int): The integer to convert. base (int): The base for the string representation. Returns: str: The string representation of the number in the specified base. if number == 0: return \\"0\\" digits = \\"0123456789ABCDEF\\" result = \\"\\" while number > 0: result = digits[number % base] + result number //= base return result"},{"question":"Given a 2D array 'matrix' of integers, sort each row of 'matrix' in ascending order without affecting the other elements or the original structure of 'matrix'. The function should allow for an option to sort the rows in descending order instead.","solution":"def sort_matrix_rows(matrix, descending=False): Sorts each row of the given 2D matrix in ascending or descending order. Args: matrix (list of list of int): The 2D array to be sorted. descending (bool): If True, sort rows in descending order. Default is False. Returns: list of list of int: The matrix with each row sorted. sorted_matrix = [] for row in matrix: if descending: sorted_row = sorted(row, reverse=True) else: sorted_row = sorted(row) sorted_matrix.append(sorted_row) return sorted_matrix"},{"question":"Design an algorithm to efficiently sort a random integer array in ascending order, while keeping memory usage to a minimum. Additionally, you are not allowed to use any built-in sorting functions or API's. The solution should ideally have a complexity of O(n log n) or better.","solution":"def quicksort(arr): An efficient in-place quicksort algorithm to sort an array in ascending order. This function modifies the input array directly. Parameters: arr (list): The list of integers to be sorted. def partition(low, high): pivot = arr[high] i = low - 1 # Index of the smaller element for j in range(low, high): if arr[j] <= pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i+1], arr[high] = arr[high], arr[i+1] return i+1 def quicksort_recursive(low, high): if low < high: pi = partition(low, high) quicksort_recursive(low, pi-1) quicksort_recursive(pi+1, high) quicksort_recursive(0, len(arr) - 1)"},{"question":"Print all the odd numbers from 1 to 100 using a for loop in Python. Additionally, modify the code to only print prime numbers among those odd numbers.","solution":"def is_prime(n): Returns True if n is a prime number, else False. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def print_odd_primes(): Prints all the prime numbers among the odd numbers from 1 to 100. for number in range(1, 101, 2): if is_prime(number): print(number) # Execute the function to print the prime numbers print_odd_primes()"},{"question":"please modify a function in python that finds and returns the largest value in a list of complex numbers. Also ensure that the function handles exceptions effectively when the list is empty or contains non-complex number types.","solution":"def find_max_complex(numbers): Finds and returns the largest value by magnitude in a list of complex numbers. Raises ValueError if the list is empty or contains non-complex number types. :param numbers: List of complex numbers :return: Complex number with the largest magnitude if not numbers: raise ValueError(\\"The list is empty\\") max_num = None for num in numbers: if not isinstance(num, complex): raise ValueError(\\"List contains non-complex number types\\") if max_num is None or abs(num) > abs(max_num): max_num = num return max_num"},{"question":"Write a Python program that generates a random list of 50 integers between 1 and 1000. Then write a function that takes this list as an argument and identifies the two smallest unique values within the list. Your program should handle any potential errors such as a non-integer entry in the list. For debugging purposes, print the input list and the two lowest unique values your function finds.","solution":"import random def generate_random_list(size=50, start=1, end=1000): Generates a list of random integers between the specified range. return [random.randint(start, end) for _ in range(size)] def find_two_smallest_unique_values(lst): Finds the two smallest unique values in the list. if not all(isinstance(item, int) for item in lst): raise ValueError(\\"List must contain only integers\\") unique_values = sorted(set(lst)) if len(unique_values) < 2: raise ValueError(\\"There must be at least two unique values in the list\\") return unique_values[:2] # Generating a random list random_list = generate_random_list() print(\\"Random List:\\", random_list) # Finding the two smallest unique values smallest_two = find_two_smallest_unique_values(random_list) print(\\"Two Smallest Unique Values:\\", smallest_two)"},{"question":"Write a Python program that takes a Pandas Series of numbers as the input and returns a new Pandas Series with each number being a count of multiply-by-three occurrences up to that point in the sequence for numbers divisible by 3.","solution":"import pandas as pd def count_multiples_of_three(series): Returns a new Pandas Series with each value being a count of multiply-by-three occurrences up to that point in the given Pandas Series. result = [] counter = 0 for number in series: if number % 3 == 0: counter += 1 result.append(counter) return pd.Series(result)"},{"question":"Write a function in Python to convert a given decimal number into its binary form, without using the built-in \`bin\` function. Your function should return a string representation of the binary number.","solution":"def decimal_to_binary(n): Converts a given decimal number n to its binary representation. Args: n (int): A decimal number. Returns: str: A string representing the binary form of the decimal number. if n == 0: return \\"0\\" binary = \\"\\" is_negative = n < 0 n = abs(n) while n > 0: binary = str(n % 2) + binary n = n // 2 if is_negative: # Handling negative number representation using two's complement return \\"-\\" + binary return binary"},{"question":"Create a Python program that reads in a directory path and prints out the names of all files and directories in that directory and its subdirectories.","solution":"import os def list_files_and_directories(directory_path): Lists all the filenames and directory names in a given directory and its subdirectories. Args: directory_path (str): The path of the directory to list the contents of. for dirpath, dirnames, filenames in os.walk(directory_path): for dirname in dirnames: print(os.path.join(dirpath, dirname)) for filename in filenames: print(os.path.join(dirpath, filename))"},{"question":"Given two lists A and B, write a program to find the common elements between the two lists. However, you are not allowed to use the Python set data structure or any built-in functions for set operations.","solution":"def find_common_elements(list1, list2): Returns a list of common elements between list1 and list2 without using sets. common_elements = [] for item in list1: if item in list2 and item not in common_elements: common_elements.append(item) return common_elements"},{"question":"Using python, create a function that takes a string and returns a new string with each character replaced with the next character in the alphabet. However, the function should also handle wrapping around the alphabet, uppercase characters, lowercase characters, and exclude certain characters from being replaced.","solution":"def shift_character(c): Shifts a character to the next character in the alphabet. Wraps around if necessary and retains case. If the character is non-alphabetic, returns it unchanged. if 'a' <= c <= 'z': return chr((ord(c) - ord('a') + 1) % 26 + ord('a')) elif 'A' <= c <= 'Z': return chr((ord(c) - ord('A') + 1) % 26 + ord('A')) else: return c def shift_string(s): Returns a new string with each character replaced with the next character in the alphabet. The function handles wrapping around the alphabet and excludes non-alphabetic characters from replacement. return ''.join(shift_character(c) for c in s)"},{"question":"Convert the following BST (Binary Search Tree) to a partially sorted list or a pseudo-array, maintaining the structure of the tree's left and right child pointers.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def flatten_bst(root): Flattens the BST to a partially sorted list by rearranging nodes to follow an in-order traversal. if not root: return None # Create a dummy node to act as the previous node to the head of the result list dummy = TreeNode(-1) prev = dummy def inorder_traversal(node): nonlocal prev if not node: return # Recursively flatten the left subtree inorder_traversal(node.left) # Visit the current node node.left = None # Left child is set to None prev.right = node # Right child of prev is set to current node prev = node # Move prev to current node # Recursively flatten the right subtree inorder_traversal(node.right) # Initiate the in-order traversal inorder_traversal(root) # The right child of the dummy node points to the head of the flattened list return dummy.right"},{"question":"Create a function that takes in an array of strings as input. Within the function, implement a for loop that iterates through each string in the array. For each string, determine if it contains at least one uppercase letter. If it does, print the string. Additionally, keep track of the total number of uppercase letters found in all the strings and store it in a variable. Finally, return the total count of uppercase letters.","solution":"def count_and_print_uppercase(strings): Takes an array of strings, prints strings containing at least one uppercase letter and returns the total count of uppercase letters in all strings. uppercase_count = 0 for string in strings: contains_uppercase = False for char in string: if char.isupper(): uppercase_count += 1 contains_uppercase = True if contains_uppercase: print(string) return uppercase_count"},{"question":"Write a Python function to classify a string of comma-separated numbers into odd and even, then sort them. Add an additional feature to remove any duplicate entries. The function should handle possible exceptions for non-integer inputs and maintain functionality despite them.","solution":"def classify_and_sort_numbers(input_string): Classifies a string of comma-separated numbers into odd and even, sorts them, and removes any duplicate entries. Handles non-integer inputs gracefully. Args: input_string (str): A string of comma-separated numbers. Returns: dict: A dictionary with two keys, 'even' and 'odd', each containing a sorted list of unique numbers. try: numbers = set() for num in input_string.split(','): try: number = int(num.strip()) numbers.add(number) except ValueError: continue evens = sorted(num for num in numbers if num % 2 == 0) odds = sorted(num for num in numbers if num % 2 != 0) return {'even': evens, 'odd': odds} except Exception as e: return str(e)"},{"question":"Create a python function that take two arguments, the first one is a list of integers and the second one is a list of values dividing each integer. The function should return a dictionary where every integer whose division corresponds to the list values is the key and the remainder is the value.","solution":"def divide_and_remainder(integers, divisors): Takes a list of integers and a list of divisors, and returns a dictionary where the keys are integers and the corresponding values are the remainders when each integer is divided by the corresponding divisor. Parameters: integers (list): List of integers divisors (list): List of divisors Returns: dict: Dictionary where keys are integers and values are remainders if len(integers) != len(divisors): raise ValueError(\\"The lists of integers and divisors must be of the same length.\\") result = {} for i in range(len(integers)): result[integers[i]] = integers[i] % divisors[i] return result"},{"question":"Merge two arrays using Python that are both sorted in non-decreasing order into one array that maintains the sorting. Additionally, implement the solution with a complexity of O(n), where n is the total number of elements in both arrays.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list): First sorted array arr2 (list): Second sorted array Returns: list: Merged sorted array containing all elements from arr1 and arr2 merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Write a function \\"square_elements\\" that takes a list of integers as input and returns a new list with each element squared.","solution":"def square_elements(lst): Returns a list with each element of the input list squared. Parameters: lst (list of int): A list of integers. Returns: list of int: A list with each element squared. return [x ** 2 for x in lst]"},{"question":"Below is a list of countries and their capital cities. Write a function in Python that takes in this list and returns a dictionary where the country (key) points to its capital (value), except when the country name starts with a vowel. For these cases, you reverse the key-value pair (capital as the key, and country as the value).","solution":"def generate_country_capital_dict(pairs): Returns a dictionary where the country points to its capital, except for countries starting with a vowel where the capital points to the country. :param pairs: List of tuples, where each tuple contains the country and its capital city. :return: Dictionary with the specified key-value structure. result = {} vowels = {\\"A\\", \\"E\\", \\"I\\", \\"O\\", \\"U\\"} for country, capital in pairs: if country[0].upper() in vowels: result[capital] = country else: result[country] = capital return result"},{"question":"Create a python dictionary of three elements 'name', 'age', and 'occupation' with the corresponding values 'John', 25, and 'student'. Ensure the solution uses comprehension and includes validation for data type and value constraints.","solution":"def create_person_dict(name, age, occupation): Returns a dictionary with keys 'name', 'age', and 'occupation'. Parameters: name (str): The name of the person. age (int): The age of the person. occupation (str): The occupation of the person. Returns: dict: Dictionary containing the person's name, age, and occupation. Raises: ValueError: If any of the values do not meet the constraints. if not isinstance(name, str) or not name: raise ValueError(\\"name must be a non-empty string\\") if not isinstance(age, int) or age < 0: raise ValueError(\\"age must be a non-negative integer\\") if not isinstance(occupation, str) or not occupation: raise ValueError(\\"occupation must be a non-empty string\\") return {key: value for key, value in zip(['name', 'age', 'occupation'], [name, age, occupation])} # Example usage person_dict = create_person_dict(\\"John\\", 25, \\"student\\")"},{"question":"Using the programming language Python, write a function that takes a list of numbers as input and returns the median of the numbers. Make sure to handle cases where the list has an even number of elements by returning the average of the two middle numbers. Also, include error handling to prevent the function from crashing if the input is not a list or if the list contains non-numeric elements. Additionally, use this function to find the median of the following set of numbers: [8, 2, 5, 1, 9, 3].","solution":"def median(numbers): Returns the median of a list of numbers. Handles cases where the list has an even number of elements by returning the average of the two middle numbers. Handles cases where the input is not a list or the list contains non-numeric elements. if not isinstance(numbers, list): raise TypeError(\\"Input must be a list.\\") for item in numbers: if not isinstance(item, (int, float)): raise ValueError(\\"All elements of the list must be numeric.\\") sorted_numbers = sorted(numbers) n = len(sorted_numbers) if n == 0: raise ValueError(\\"List must contain at least one number.\\") if n % 2 == 1: return sorted_numbers[n // 2] else: mid1 = sorted_numbers[n // 2 - 1] mid2 = sorted_numbers[n // 2] return (mid1 + mid2) / 2 # Finding the median of the given set of numbers median([8, 2, 5, 1, 9, 3])"},{"question":"How can I create a Python script that iterates through a directory, identifies all the CSV files, and converts them into JSON format using the pandas library?","solution":"import os import pandas as pd import json def convert_csv_to_json(directory_path): Converts all CSV files in the given directory to JSON format. for filename in os.listdir(directory_path): if filename.endswith('.csv'): csv_file_path = os.path.join(directory_path, filename) json_file_path = os.path.splitext(csv_file_path)[0] + '.json' # Read the CSV file df = pd.read_csv(csv_file_path) # Convert DataFrame to JSON df.to_json(json_file_path, orient='records', lines=True)"},{"question":"In Python, write a function that takes in a list of strings as an argument and returns the string that comes alphabetically first. Note that each string can contain both uppercase and lowercase letters, but you should consider the alphabetical order of the letters regardless of their case sensitivity. If two strings contain the same first letter, you should consider the second letter and so on, until you find distinct alphabetic order. For example, the string \\"Apple\\" appears before the string \\"banana\\" in alphabetical order.","solution":"def find_alpha_first(strings): Returns the string that comes alphabetically first, case insensitive. Args: strings (list of str): List of strings to be evaluated. Returns: str: The string that appears alphabetically first. if not strings: return None # Use case-insensitive sorting to find the alphabetically first string return min(strings, key=lambda s: s.lower())"},{"question":"Write a Python program that generates a random maze using Prim's algorithm and displays it as ASCII art.","solution":"import random def generate_maze(width, height): ''' Generates a random maze using Prim's algorithm and returns it as a 2D list of characters. Args: width: Width of the maze (number of columns). height: Height of the maze (number of rows). Returns: maze: 2D list representing the maze with walls as '#' and paths as ' '. ''' maze = [['#' for _ in range(width)] for _ in range(height)] def get_neighbors(x, y): neighbors = [] if x > 1: neighbors.append((x - 2, y)) if x < width - 2: neighbors.append((x + 2, y)) if y > 1: neighbors.append((x, y - 2)) if y < height - 2: neighbors.append((x, y + 2)) return neighbors def add_walls(walls, x, y): if x > 1 and maze[y][x - 2] == '#': walls.append((x - 2, y)) if x < width - 2 and maze[y][x + 2] == '#': walls.append((x + 2, y)) if y > 1 and maze[x][y - 2] == '#': walls.append((x, y - 2)) if y < height - 2 and maze[y + 2][x] == '#': walls.append((x, y + 2)) def remove_wall_between(curr, next): if curr[0] == next[0]: if curr[1] < next[1]: maze[curr[1]+1][curr[0]] = ' ' else: maze[curr[1]-1][curr[0]] = ' ' elif curr[1] == next[1]: if curr[0] < next[0]: maze[curr[1]][curr[0]+1] = ' ' else: maze[curr[1]][curr[0]-1] = ' ' start_x, start_y = (0,0) maze[start_y][start_x] = ' ' walls = [(start_x + 2, start_y), (start_x, start_y + 2)] while walls: curr = random.choice(walls) walls.remove(curr) x, y = curr if maze[y][x] == '#': neighbors = get_neighbors(x, y) if any(maze[n[1]][n[0]] == ' ' for n in neighbors): maze[y][x] = ' ' add_walls(walls, x, y) for n in neighbors: if maze[n[1]][n[0]] == ' ': remove_wall_between(curr, n) break return maze def display_maze(maze): ''' Prints the 2D list representing the maze as ASCII art. Args: maze: 2D list of characters representing the maze. ''' for row in maze: print(''.join(row)) # Example usage: # Generate a maze of size 11x11 maze = generate_maze(11, 11) display_maze(maze)"},{"question":"Below is a function that takes two string type parameters as input and outputs their concatenated result as a string. Please modify the function to take two lists as input and output a single list that includes the elements from both lists. Additionally, write code to test this function using two lists of strings.","solution":"def concatenate_lists(list1, list2): Returns the concatenated list of list1 and list2. return list1 + list2"},{"question":"Assume that given a series of values, we will need to convert them from their numerical form (integer) to textual English equivalent. Focusing on numbers within the integer range of 1 through 999. Given a piece of code similar to this, determine the rectifications required for this code to work accurately for converting numbers into English words for the specified range.","solution":"def convert_to_words(num): Convert a number between 1 and 999 to words. if not (1 <= num <= 999): raise ValueError(\\"Number out of range, must be between 1 and 999\\") ones = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] teens = [\\"\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"ten\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] hundreds = \\"hundred\\" word = \\"\\" if num >= 100: word += ones[num // 100] + \\" \\" + hundreds num %= 100 if num > 0: word += \\" and \\" if num >= 20: word += tens[num // 10] if num % 10 > 0: word += \\"-\\" + ones[num % 10] elif 10 < num < 20: word += teens[num-10] else: word += ones[num] return word.strip()"},{"question":"Given a binary search tree, write a function that performs an in-order traversal and collects the node values in a list. Additionally, optimize the function to use an iterative approach rather than a recursive one to enhance performance for large trees.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def iterative_in_order_traversal(root): Performs an iterative in-order traversal of a binary search tree and collects the node values in a list. :param root: The root node of the binary search tree. :return: A list of node values in in-order traversal. result = [] stack = [] current = root while current is not None or stack: # Reach the left most Node of the current Node while current is not None: # Place pointer to a tree node on the stack before traversing the node's left subtree stack.append(current) current = current.left # Current must be None at this point current = stack.pop() result.append(current.val) # We have visited the node and its left subtree. Now, it's right subtree's turn current = current.right return result"},{"question":"Design a code in Python to get the current date and time. Further, write functions to add or subtract a given number of days, months, or years from this date. Also, include error handling to ensure valid inputs.","solution":"from datetime import datetime, timedelta from dateutil.relativedelta import relativedelta def get_current_datetime(): Returns the current date and time. return datetime.now() def add_days(current_date, days): Adds a specified number of days to the given date. if not isinstance(days, int): raise ValueError(\\"Days must be an integer.\\") return current_date + timedelta(days=days) def add_months(current_date, months): Adds a specified number of months to the given date. if not isinstance(months, int): raise ValueError(\\"Months must be an integer.\\") return current_date + relativedelta(months=months) def add_years(current_date, years): Adds a specified number of years to the given date. if not isinstance(years, int): raise ValueError(\\"Years must be an integer.\\") return current_date + relativedelta(years=years) def subtract_days(current_date, days): Subtracts a specified number of days from the given date. if not isinstance(days, int): raise ValueError(\\"Days must be an integer.\\") return current_date - timedelta(days=days) def subtract_months(current_date, months): Subtracts a specified number of months from the given date. if not isinstance(months, int): raise ValueError(\\"Months must be an integer.\\") return current_date - relativedelta(months=months) def subtract_years(current_date, years): Subtracts a specified number of years from the given date. if not isinstance(years, int): raise ValueError(\\"Years must be an integer.\\") return current_date - relativedelta(years=years)"},{"question":"Create a 3D matrix of incrementing numbers starting from the number 5. The matrix should consist of 4 layers, each with 5 rows and 6 columns. Further, write a function that calculates the sum of all numbers in this 3D matrix. Make sure you solve this problem using Python programming language.","solution":"import numpy as np def create_3d_matrix(start=5, layers=4, rows=5, cols=6): This function creates a 3D matrix starting from the given start number, incrementing by 1 for each subsequent element. The matrix consists of layers x rows x cols dimensions. total_elements = layers * rows * cols matrix = np.arange(start, start + total_elements).reshape((layers, rows, cols)) return matrix def sum_3d_matrix(matrix): This function calculates the sum of all numbers in a 3D matrix. return np.sum(matrix)"},{"question":"You are given two folders of images: a source folder and a destination folder. You need to move the JPEG images from the source folder to the destination folder while ensuring that each image has a unique name. Furthermore, you have to create two Python scripts: one to automate the image movement and renaming process, and another to revert the process, i.e., move the images back to the source folder with their original names. Additionally, you should log the actions performed by each script in separate log files.","solution":"import os import shutil import logging from datetime import datetime # Configure logging for moving images logging.basicConfig(filename='move_images.log', level=logging.INFO) def move_images(source_folder, destination_folder): Moves JPEG images from source_folder to destination_folder with unique names. The original image names and their new unique names are logged. if not os.path.exists(destination_folder): os.makedirs(destination_folder) for filename in os.listdir(source_folder): if filename.lower().endswith('.jpeg') or filename.lower().endswith('.jpg'): original_path = os.path.join(source_folder, filename) new_filename = f\\"{datetime.now().strftime('%Y%m%d%H%M%S%f')}_{filename}\\" destination_path = os.path.join(destination_folder, new_filename) shutil.move(original_path, destination_path) log_entry = f\\"Moved {original_path} to {destination_path}\\" logging.info(log_entry) # Log the mapping of original to new filename for reverting with open('move_records.txt', 'a') as f: f.write(f\\"{new_filename} {filename}n\\") # Configure logging for reverting images logging.basicConfig(filename='revert_images.log', level=logging.INFO) def revert_images(source_folder, destination_folder): Reverts the JPEG images from the destination_folder to the source_folder with their original names. The actions are logged. with open('move_records.txt', 'r') as f: records = [line.strip().split() for line in f.readlines()] for new_filename, original_filename in records: original_path = os.path.join(destination_folder, new_filename) destination_path = os.path.join(source_folder, original_filename) shutil.move(original_path, destination_path) log_entry = f\\"Moved {original_path} to {destination_path}\\" logging.info(log_entry) # After reverting, you might want to clear the move_records.txt os.remove('move_records.txt')"},{"question":"Given a list of tuples where each tuple represents a range (start, end), write a Python program to merge overlapping intervals.","solution":"def merge_intervals(intervals): Merges overlapping intervals. :param intervals: List of tuples where each tuple represents a range (start, end). :return: List of merged intervals. if not intervals: return [] # Sort the intervals by the start value intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: previous = merged[-1] # If the current interval overlaps with the previous interval, merge them if current[0] <= previous[1]: merged[-1] = (previous[0], max(previous[1], current[1])) else: # If they don't overlap, just add the current interval to the merged list merged.append(current) return merged"},{"question":"Write a generic function to split an array into n equal slices","solution":"def split_array(arr, n): Splits an array into n equal slices. If the array cannot be split evenly, the last slice gets the remaining elements. Parameters: arr (list): The array to be split. n (int): The number of slices. Returns: list of lists: The list containing n slices of the array. if n <= 0: raise ValueError(\\"n must be greater than 0\\") k, m = divmod(len(arr), n) return [arr[i * k + min(i, m):(i + 1) * k + min(i + 1, m)] for i in range(n)]"},{"question":"Complete this basic recursive binary search algorithm in Python, including handling for an unsorted data array. Assure that the solution is not simply copying code from standard libraries or online resources, but rather reveals the logic and principles behind the binary search algorithm.","solution":"def binary_search_recursive(arr, target, low, high): Perform binary search recursively to find the target in the sorted array. Params: arr (list): The sorted array in which to search. target: The target value to find. low (int): The lower index of the search range. high (int): The upper index of the search range. Returns: int: The index of the target if found, otherwise -1. if low > high: return -1 mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] > target: return binary_search_recursive(arr, target, low, mid - 1) else: return binary_search_recursive(arr, target, mid + 1, high) def binary_search(arr, target): Perform binary search to find the target in the unsorted array by sorting it first. Params: arr (list): The unsorted array in which to search. target: The target value to find. Returns: int: The index of the target in the sorted array if found, otherwise -1. sorted_arr = sorted(arr) index = binary_search_recursive(sorted_arr, target, 0, len(sorted_arr) - 1) return index"},{"question":"In Python, write a function to utilize the bubble sort method for sorting a list of integers. Also, include functionality to sort the list in descending order if a boolean parameter is set to true. Here's an erroneous starting code, fix it and add the required functionality.","solution":"def bubble_sort(arr, descending=False): Sorts a list of integers using the bubble sort method. Parameters: arr (list): List of integers to be sorted. descending (bool): If True, sort the list in descending order. Defaults to False. Returns: list: Sorted list of integers. n = len(arr) for i in range(n): for j in range(0, n-i-1): if descending: if arr[j] < arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] else: if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Generate a random 100x75 array using NumPy, and then write a function to calculate the sum of all its elements. Additionally, find the average value of the elements and determine which element is closest to this average. Print the sum, average, and the value closest to the average. python","solution":"import numpy as np def generate_random_array(): Generates a random 100x75 array using NumPy. return np.random.rand(100, 75) def analyze_array(arr): Calculates the sum of all elements in the array, the average value of the elements, and finds the element closest to the average. total_sum = np.sum(arr) average_value = np.mean(arr) closest_value = arr.flat[np.abs(arr - average_value).argmin()] return total_sum, average_value, closest_value"},{"question":"What is a way to generate a link to a website with a specific query parameter using Python code?","solution":"from urllib.parse import urlencode def generate_link(base_url, params): Generates a URL with the specified base URL and query parameters. Parameters: base_url (str): The base URL to which the query parameters will be added. params (dict): A dictionary of query parameters. Returns: str: The generated URL with the query parameters. query_string = urlencode(params) full_url = f\\"{base_url}?{query_string}\\" return full_url"},{"question":"Using NumPy, create a 10x10 matrix with random integer values. Then, create two functions. The first one should determine the row with the highest average and the second one should determine the column with the highest standard deviation. Finally, verify your solution by also writing these functionalities using list comprehension and make a comparison of execution speeds between the function and list comprehension methods.","solution":"import numpy as np def create_random_matrix(): Returns a 10x10 matrix with random integer values. return np.random.randint(1, 101, size=(10, 10)) def row_with_highest_average(matrix): Returns the index of the row with the highest average value. row_averages = matrix.mean(axis=1) return np.argmax(row_averages) def column_with_highest_std(matrix): Returns the index of the column with the highest standard deviation. column_stds = matrix.std(axis=0) return np.argmax(column_stds) # Implementing the functionalities using list comprehension def row_with_highest_average_list_comp(matrix): Returns the index of the row with the highest average value using list comprehension. row_averages = [np.mean(row) for row in matrix] return row_averages.index(max(row_averages)) def column_with_highest_std_list_comp(matrix): Returns the index of the column with the highest standard deviation using list comprehension. column_stds = [np.std(matrix[:, col]) for col in range(matrix.shape[1])] return column_stds.index(max(column_stds))"},{"question":"Given two strings, create a program that finds the maximum number of common characters between them.","solution":"def max_common_characters(s1, s2): Returns the maximum number of common characters between two strings s1 and s2. from collections import Counter counter1 = Counter(s1) counter2 = Counter(s2) common_characters = counter1 & counter2 max_common_count = sum(common_characters.values()) return max_common_count"},{"question":"Construct a program that prints the first 1000 prime numbers and calculates the sum of all these prime numbers. Additionally, the program should identify and correct any errors in the provided erroneous code.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def first_n_primes(n): Generate the first n prime numbers. primes = [] count = 2 while len(primes) < n: if is_prime(count): primes.append(count) count += 1 return primes def sum_of_primes(primes): Calculate the sum of a list of prime numbers. return sum(primes) # Generate the first 1000 prime numbers primes = first_n_primes(1000) # Print the first 1000 prime numbers for prime in primes: print(prime) # Calculate and print the sum of the first 1000 prime numbers sum_primes = sum_of_primes(primes) print(f\\"The sum of the first 1000 prime numbers is: {sum_primes}\\")"},{"question":"Reverse the order of the items in the list using recursion. Additionally, you are not allowed to use any built-in or library functions for list manipulation. Your solution should have a time complexity of O(n), where n is the length of the list. The input list will always contain unique elements.","solution":"def reverse_list(lst): Recursively reverses the order of the items in the list. # Base case: if the list is empty or has one element, it is already reversed if len(lst) <= 1: return lst # Recursively reverse the rest of the list and append the first element to the end reversed_rest = reverse_list(lst[1:]) reversed_rest.append(lst[0]) return reversed_rest"},{"question":"Create a Python function named \\"caesar_cipher_decrypt\\" that takes two parameters: a string encrypted_message and an integer shift. The function should decrypt the encrypted message by shifting each letter in the message backward by the specified shift value, wrapping around the alphabet if necessary. Assume the message contains only uppercase letters. Return the decrypted message as a string.","solution":"def caesar_cipher_decrypt(encrypted_message, shift): Decrypts the encrypted message using the Caesar cipher by shifting each letter backward by the specified shift value. Parameters: encrypted_message (str): The encrypted message to decrypt. shift (int): The number of positions to shift each letter backward. Returns: str: The decrypted message. decrypted_message = \\"\\" for char in encrypted_message: # Calculate the original position using modulo arithmetic for wrapping around the alphabet original_position = (ord(char) - ord('A') - shift) % 26 decrypted_char = chr(original_position + ord('A')) decrypted_message += decrypted_char return decrypted_message"},{"question":"You have been provided with a list of integers. Write a function that rotates the list to the left by a specified number of positions. For instance, given the list \`[1, 2, 3, 4, 5]\` and \`2\` as the number of positions to rotate, the output should be \`[3, 4, 5, 1, 2]\`.","solution":"def rotate_left(lst, positions): Rotates the list to the left by a specified number of positions. Parameters: lst (list of int): The list of integers to rotate. positions (int): The number of positions to rotate the list. Returns: list of int: The rotated list. if not lst: return lst positions = positions % len(lst) return lst[positions:] + lst[:positions]"},{"question":"Write a Python function that takes three lists as input and returns a new list. This list should contain the elements which are common to the first two lists, but not in the third one. Also, add input validation to ensure that only lists are passed as arguments to the function.","solution":"def common_elements(list1, list2, list3): Returns a list containing the elements that are common to the first two lists, but not in the third one. if not all(isinstance(lst, list) for lst in [list1, list2, list3]): raise ValueError('All inputs must be lists') common_set = set(list1) & set(list2) result_set = common_set - set(list3) return list(result_set)"},{"question":"How can I create a Python program that generates a random airport name using the format \\"City Country Airport\\"? The program should include at least 5 different cities and their corresponding countries and should pick the city and country randomly. Additionally, it should use a function to generate the airport name and output it in the main program.","solution":"import random def generate_airport_name(): Generates a random airport name in the format \\"City Country Airport\\". cities_countries = [ (\\"New York\\", \\"USA\\"), (\\"Tokyo\\", \\"Japan\\"), (\\"Paris\\", \\"France\\"), (\\"Berlin\\", \\"Germany\\"), (\\"Sydney\\", \\"Australia\\") ] city, country = random.choice(cities_countries) return f\\"{city} {country} Airport\\" # Main program if __name__ == \\"__main__\\": print(generate_airport_name())"},{"question":"Refine the ensuing code chunk to implement a function that accepts a string argument and reciprocates with a duplicate of that string, rendered completely in lowercase alphabets. Additionally, the function should incorporate error handling to trigger a TypeError if the passed argument doesn't conform to string datatype. The utility of this function entails guaranteeing smooth functionality regardless of input inconsistency.","solution":"def to_lowercase(s): Converts the input string s to lowercase. Raises a TypeError if the input is not a string. if not isinstance(s, str): raise TypeError(\\"Input must be a string\\") return s.lower()"},{"question":"Is there a way to simulate falling objects in Python and visualize it with matplotlib? Can you provide a detailed code that takes into account the object's mass, height, and gravitational acceleration? Moreover, could you include a method to measure the time it takes for the object to hit the ground and plot the trajectory of the falling object?","solution":"import numpy as np import matplotlib.pyplot as plt def simulate_falling_object(mass, height, g=9.81): Simulate the falling of an object and return time to hit the ground and position over time. :param mass: Mass of the object in kg :param height: Initial height of the object in meters :param g: Gravitational acceleration in m/s^2 (default is 9.81 m/s^2) :return: time_to_hit_ground, time_series, height_series # Time to hit the ground using kinematic equation: h = 0.5 * g * t^2 time_to_hit_ground = np.sqrt((2 * height) / g) # Create a series of time points from 0 to time_to_hit_ground time_series = np.linspace(0, time_to_hit_ground, num=500) # Calculate height at each time point height_series = height - 0.5 * g * time_series ** 2 return time_to_hit_ground, time_series, height_series def plot_falling_object(time_series, height_series): Plot the height of a falling object over time. :param time_series: Array of time points :param height_series: Array of height values corresponding to the time points plt.figure(figsize=(10, 6)) plt.plot(time_series, height_series, label='Falling Object') plt.title('Simulation of a Falling Object') plt.xlabel('Time (s)') plt.ylabel('Height (m)') plt.legend() plt.grid(True) plt.show() # Usage mass = 5.0 # kg height = 100.0 # meters time_to_hit_ground, time_series, height_series = simulate_falling_object(mass, height) plot_falling_object(time_series, height_series)"},{"question":"Suppose I have a list of numbers and I want to locate the position of a specific number x within that list. The list does not have any particular order. How can I design a function in Python to accomplish this? Moreover, what if the number appears multiple times in the list? How can I handle all occurrences? Your solution must involve recursive or iterative methods.","solution":"def find_positions(lst, x): Returns a list of all positions (indices) where \`x\` occurs in \`lst\`. Uses an iterative approach. :param lst: List of elements to search :param x: The element to find the positions of :return: List of indices where \`x\` is found positions = [] for index, element in enumerate(lst): if element == x: positions.append(index) return positions"},{"question":"Write a function that takes in two strings as input and returns a new string that is the concatenation of the two input strings. However, the twist is to implement this function without using any built-in string concatenation methods or operators (such as the \\"+\\" operator).","solution":"def custom_concatenate(str1, str2): Concatenates two strings without using built-in string concatenation methods or operators. result = [] for char in str1: result.append(char) for char in str2: result.append(char) return ''.join(result)"},{"question":"Create a function in Python that takes two parameters a and b and returns the product of the two. However, you are not allowed to use the '*' operator to multiply the numbers. Instead, you should implement your own algorithm to multiply the two numbers. Additionally, your algorithm should have a time complexity of O(log n), where n is the larger of the two input numbers.","solution":"def multiply(a, b): Returns the product of a and b without using the '*' operator. def multiply_helper(a, b): if b == 0: return 0 if b == 1: return a # If b is even, multiply helper called with (a, b//2) and sum it twice if b % 2 == 0: half = multiply_helper(a, b // 2) return half + half # If b is odd, multiply helper called with (a, b//2) and sum it twice and add 'a' one more time else: half = multiply_helper(a, b // 2) return half + half + a # Handling negative numbers if a < 0 and b < 0: return multiply_helper(-a, -b) elif a < 0 or b < 0: return -multiply_helper(abs(a), abs(b)) else: return multiply_helper(a, b)"},{"question":"Please write a python function that takes in a list of numbers as input, finds the maximum and minimum values, and returns the difference between them. Then, modify this function to handle cases where the list might contain non-numeric values, such as strings or None, and prevent any errors from occurring. Finally, find the difference between the maximum and minimum numbers from a list that has been shuffled and reversed to ensure the function works regardless of the order of the elements.","solution":"def max_min_difference(numbers): Returns the difference between the maximum and minimum values from a list of numbers, ignoring non-numeric values. numeric_values = [num for num in numbers if isinstance(num, (int, float))] if not numeric_values: raise ValueError(\\"The list contains no numeric values.\\") max_value = max(numeric_values) min_value = min(numeric_values) return max_value - min_value def shuffled_and_reversed_difference(numbers): Shuffles and reverses the list before finding the difference between the maximum and minimum values. from random import shuffle shuffled_numbers = numbers.copy() shuffle(shuffled_numbers) reversed_numbers = list(reversed(shuffled_numbers)) return max_min_difference(reversed_numbers)"},{"question":"Write a Leetcode question that transforms a binary tree into an array of numbers when you read the numbers off in an in-order traversal. Note that the interviewer is asking for an implementation.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorder_traversal(root): Perform inorder traversal of a binary tree and return the values as a list. :param root: TreeNode, the root of the binary tree :return: list of values in in-order traversal def _inorder_traversal(node, result): if node is None: return _inorder_traversal(node.left, result) result.append(node.val) _inorder_traversal(node.right, result) result = [] _inorder_traversal(root, result) return result"},{"question":"In Python, write a function to print out every path from the root of a given binary tree (each node has no more than 2 children) to its leaves, and also return the sum of all node values on each path as a list.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def all_paths_and_sums(root): def dfs(node, current_path, current_sum): if not node: return current_path.append(node.value) current_sum += node.value if not node.left and not node.right: paths.append(list(current_path)) sums.append(current_sum) else: dfs(node.left, current_path, current_sum) dfs(node.right, current_path, current_sum) current_path.pop() paths = [] sums = [] dfs(root, [], 0) for path in paths: print(path) return sums"},{"question":"Write a program that uses nested loops to iterate over a list of lists, where each inner list has a different type of elements. The program should print only the elements that are of a specific type, which is determined by the user at runtime. To make it more challenging, implement error handling to address type inconsistency within inner lists and handle cases where the specified type is not found in the list of lists.","solution":"def print_elements_of_type(list_of_lists, element_type): Iterates over a list of lists and prints elements of the specified type. If a type inconsistency within inner lists is encountered, it handles the error. If the specified type is not found, it prints an appropriate message. Args: list_of_lists (list): A list of lists containing various types of elements. element_type (type): The type of elements to be printed. found = False try: for sublist in list_of_lists: for element in sublist: if isinstance(element, element_type): print(element) found = True if not found: print(f\\"No elements of type {element_type} found.\\") except Exception as e: print(f\\"Error during iteration: {e}\\")"},{"question":"Given two unsorted arrays, merge them in a sorted form without using any extra space.","solution":"def merge_sorted(arr1, arr2): Merges two unsorted arrays into a single sorted array and returns it. arr1.sort() arr2.sort() merged = [] i = j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 while i < len(arr1): merged.append(arr1[i]) i += 1 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Write a python function that takes two strings as parameters and returns the longest common substring.","solution":"def longest_common_substring(str1, str2): Returns the longest common substring between two strings. if not str1 or not str2: return \\"\\" len1, len2 = len(str1), len(str2) max_len = 0 ending_index = 0 # Create a 2D array to store lengths of longest common suffixes of substrings. lcsuff = [[0] * (len2 + 1) for _ in range(len1 + 1)] for i in range(1, len1 + 1): for j in range(1, len2 + 1): if str1[i - 1] == str2[j - 1]: lcsuff[i][j] = lcsuff[i - 1][j - 1] + 1 if lcsuff[i][j] > max_len: max_len = lcsuff[i][j] ending_index = i - 1 else: lcsuff[i][j] = 0 if max_len == 0: return \\"\\" return str1[ending_index - max_len + 1: ending_index + 1]"},{"question":"Create an algorithm in Python that takes a matrix A as input and outputs its transpose.","solution":"def transpose(matrix): Returns the transpose of the given matrix. Parameters: matrix (list of list of int): The input matrix Returns: list of list of int: The transposed matrix return [list(row) for row in zip(*matrix)]"},{"question":"Implement a method to check if two given strings are anagrams of each other without using built-in library functions or data structures. The function should also count the number of comparisons made.","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams of each other and return the number of comparisons made. Parameters: str1 (str): The first string. str2 (str): The second string. Returns: tuple: (bool, int) where the first element is True if str1 and str2 are anagrams, else False, and the second element is the number of comparisons made. if len(str1) != len(str2): return False, 1 # Only one comparison needed to check length char_count1 = {} char_count2 = {} comparisons = 0 for char in str1: if char in char_count1: char_count1[char] += 1 else: char_count1[char] = 1 comparisons += 1 for char in str2: if char in char_count2: char_count2[char] += 1 else: char_count2[char] = 1 comparisons += 1 for char in char_count1: comparisons += 1 if char_count1[char] != char_count2.get(char, 0): return False, comparisons return True, comparisons"},{"question":"Output the below binary tree level by level, with each level on a new line, using a Python function. However, you are not allowed to use any built-in data structures such as lists or queues. You can only use basic data types like integers and strings, as well as pointers.","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None class QueueNode: def __init__(self, node): self.tree_node = node self.next = None class Queue: def __init__(self): self.front = None self.rear = None def enqueue(self, node): new_queue_node = QueueNode(node) if self.rear is None: self.front = self.rear = new_queue_node return self.rear.next = new_queue_node self.rear = new_queue_node def dequeue(self): if self.front is None: return None temp = self.front self.front = temp.next if self.front is None: self.rear = None return temp.tree_node def is_empty(self): return self.front is None def level_order_traversal(root): if root is None: return \\"\\" result = \\"\\" queue = Queue() queue.enqueue(root) while not queue.is_empty(): level_size = CountNodesInCurrentLevel(queue) for _ in range(level_size): node = queue.dequeue() result += str(node.data) + \\" \\" if node.left: queue.enqueue(node.left) if node.right: queue.enqueue(node.right) if not queue.is_empty(): result = result.strip() + \\"n\\" return result.strip() def CountNodesInCurrentLevel(queue): temp = queue.front count = 0 while temp: count += 1 temp = temp.next return count"},{"question":"Write a function that takes in an array of positive integers and returns a new array where each element is the product of elements around it. Your function should not use division. Additionally, your function should have a time complexity of O(n) and a space complexity of O(1), where n is the length of the input array.","solution":"def product_except_self(nums): Given an array of positive integers, returns a new array where each element is the product of all other elements except itself without using division. n = len(nums) if n == 0: return [] # Initialize the result array with 1s result = [1] * n # Compute products of all elements to the left of each element left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Compute products of all elements to the right of each element and multiply right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Create a Python function that can calculate the arithmetic mean of three numbers. Additionally, ensure that the function can handle both integer and floating point numbers as inputs. The function should round the final result to the nearest integer if the inputs are all integers, and return a floating point number otherwise.","solution":"def arithmetic_mean(a, b, c): Calculate the arithmetic mean of three numbers. If all inputs are integers, round the result to the nearest integer. Return a floating point number otherwise. mean = (a + b + c) / 3 if all(isinstance(x, int) for x in [a, b, c]): return round(mean) else: return mean"},{"question":"Write a program that allows users to input multiple strings, storing each one in an array. The function should then determine and return the string with the most unique characters. If there are several strings with the equal unique character count, return the one which is lexicographically smallest (i.e., the one that would appear first if the strings were sorted in a dictionary).","solution":"def string_with_most_unique_chars(strings): Returns the string with the most unique characters. If there are several strings with the equal unique character count, returns the lexicographically smallest string among them. # Initialize variables to track the max unique characters and corresponding string max_unique_count = -1 result_string = \\"\\" for string in strings: unique_chars = set(string) count_unique = len(unique_chars) # Check if current string has more unique characters # or same amount of unique characters but is lexicographically smaller if (count_unique > max_unique_count or (count_unique == max_unique_count and string < result_string)): max_unique_count = count_unique result_string = string return result_string"},{"question":"Given two arrays both of length N, create a function that will return a new array that is the result of element-wise multiplication of the two arrays.","solution":"def elementwise_multiplication(arr1, arr2): Returns a new array that is the result of element-wise multiplication of two arrays. Parameters: arr1: List[int] - First input array arr2: List[int] - Second input array Returns: List[int] - Array resulting from element-wise multiplication if len(arr1) != len(arr2): raise ValueError(\\"Both arrays must have the same length\\") return [a * b for a, b in zip(arr1, arr2)]"},{"question":"Erich is fascinated by prime numbers and he likes to create puzzles based on them. One day, Erich decides to challenge his friend Max, a math enthusiast, with a prime number problem. Erich tells Max, \\"I have a series that progresses as follows: 2 to the power of (2 to the power of n) plus 1. I have calculated the first 5 terms of this series and I want you to determine if these numbers are prime.\\" Max, being well-versed in both math and programming, decides to write a python script to help him solve the problem. Can you help Max write a script to find the first 5 terms of the series and determine their primality?","solution":"from sympy import isprime def series_terms_and_primality(n_terms=5): Generate the first n_terms of the series: 2^(2^n) + 1 and determine their primality. results = [] for n in range(n_terms): term = 2 ** (2 ** n) + 1 prime_status = isprime(term) results.append((term, prime_status)) return results if __name__ == \\"__main__\\": print(series_terms_and_primality())"},{"question":"Modify the following code to insert the element 'x' into the list at position 'index' without using the built-in insert() function and without creating a new list. Additionally, ensure that the time complexity of your solution is O(n) and the space complexity is O(1).","solution":"def insert_element(lst, index, x): Inserts the element x into the list at position index without using the built-in insert() function and without creating a new list. Args: lst (list): The list into which the element will be inserted. index (int): The position at which the element will be inserted. x (any): The element to be inserted. # First, make space for the new element by shifting elements to the right. lst.append(0) # Add a dummy element to grow the list by 1. for i in range(len(lst) - 1, index, -1): lst[i] = lst[i - 1] # Insert the new element at the desired position. lst[index] = x"},{"question":"Create a Python program that prompts the user to enter a list of numbers separated by spaces, and then determines and displays the largest and smallest numbers in the list. Your program should also display the sum and average of all the numbers in the list. The program should handle cases where the user inputs an empty list or a list with non-numeric values gracefully. Your code should be well-documented, efficient, and use functions for reusable code blocks. Additionally, your program should utilize meaningful variable names and follow PEP 8 style guidelines for writing Python code.","solution":"def get_numbers_from_input(input_string): Converts a string of space-separated values into a list of floats. Ignores non-numeric values and logs an error message for each. numbers = [] for value in input_string.split(): try: number = float(value) numbers.append(number) except ValueError: print(f\\"Error: '{value}' is not a number and will be ignored.\\") return numbers def calculate_statistics(numbers): Returns the minimum, maximum, sum, and average of a list of numbers. If the list is empty, returns None for all statistics. if not numbers: return None, None, None, None minimum = min(numbers) maximum = max(numbers) total_sum = sum(numbers) average = total_sum / len(numbers) return minimum, maximum, total_sum, average def main(): input_string = input(\\"Enter a list of numbers separated by spaces: \\") numbers = get_numbers_from_input(input_string) if not numbers: print(\\"No valid numbers were entered.\\") else: minimum, maximum, total_sum, average = calculate_statistics(numbers) print(f\\"Minimum: {minimum}\\") print(f\\"Maximum: {maximum}\\") print(f\\"Sum: {total_sum}\\") print(f\\"Average: {average}\\") if __name__ == \\"__main__\\": main()"},{"question":"Write a Python function that determines whether all elements in a given list of strings are anagrams of each other. Your function should ignore case sensitivity and whitespace.","solution":"def are_anagrams(str_list): Determines whether all elements in the given list of strings are anagrams of each other. This function ignores case sensitivity and whitespace. Parameters: str_list (list of str): A list of strings to be checked. Returns: bool: True if all strings are anagrams of each other, False otherwise. def canonical_form(s): # Remove spaces and convert to lowercase before sorting s = s.replace(\\" \\", \\"\\").lower() return ''.join(sorted(s)) if not str_list: return True # Get the canonical form of the first string first_canonical = canonical_form(str_list[0]) # Check if all other strings have the same canonical form return all(canonical_form(s) == first_canonical for s in str_list)"},{"question":"Write a function in Python to compress a given string by replacing all repeated characters with the character followed by the count of repetition. For example, \\"aaabbcc\\" should become \\"a3b2c2\\".","solution":"def compress_string(input_string): Returns the compressed version of the given string. If a character is repeated consecutively, it is represented by that character followed by the count of repetitions. if not input_string: return \\"\\" compressed_str = [] count = 1 prev_char = input_string[0] for char in input_string[1:]: if char == prev_char: count += 1 else: compressed_str.append(prev_char + str(count)) prev_char = char count = 1 compressed_str.append(prev_char + str(count)) # for the last character group return ''.join(compressed_str)"},{"question":"Increase the complexity of the following code to create a function that processes converting a hexadecimal string to its decimal equivalent. The function should manage uppercase and lowercase alphabets as a part of the hexadecimal number. Incorporate a validation process within the function for checking the validity of the input hexadecimal string, and handle possible exceptions.","solution":"def hex_to_decimal(hex_str): Convert a hexadecimal string to its decimal equivalent. Handles both uppercase and lowercase letters and ensures valid input. Parameters: hex_str (str): The hexadecimal string to convert. Returns: int: The decimal equivalent of the hexadecimal string. Raises: ValueError: If the input string is not a valid hexadecimal number. hex_str = hex_str.strip() if not all(c in '0123456789abcdefABCDEF' for c in hex_str): raise ValueError(\\"Invalid hexadecimal string\\") return int(hex_str, 16)"},{"question":"create a function that takes 2 lists and returns the elements that are not in the second list.","solution":"def elements_not_in_second_list(list1, list2): Returns a list of elements that are in list1 but not in list2. :param list1: First list. :param list2: Second list. :return: A list of elements from list1 that are not in list2. return [element for element in list1 if element not in list2]"},{"question":"Write a code snippet that adds two matrices of equal dimensions and returns the result as a new matrix.","solution":"def add_matrices(matrix1, matrix2): Adds two matrices of equal dimensions and returns the result as a new matrix. if not matrix1 or not matrix2 or len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]): raise ValueError(\\"Matrices have different dimensions or are empty\\") rows = len(matrix1) cols = len(matrix1[0]) result_matrix = [[0 for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): result_matrix[i][j] = matrix1[i][j] + matrix2[i][j] return result_matrix"},{"question":"Given an array of numbers, write a Python function to remove even numbers from the array. The function should also remove any duplicate numbers in the array. If the array is empty, the function should return an empty array. If the array only contains even numbers, the function should return an empty array as well.","solution":"def remove_even_and_duplicates(numbers): Removes even numbers and duplicates from the array. :param numbers: List[int] - The array of numbers :return: List[int] - The filtered array with only unique odd numbers return list({num for num in numbers if num % 2 != 0})"},{"question":"Write a Python code to implement a function that takes an array, swaps the values of the first and last element of the array, prints the original input and the changed array, and then reverses the array. The function should also return the sum of all elements in the reversed array.","solution":"def manipulate_array(arr): Takes an array, swaps the values of the first and last element, prints the original input and the changed array, then reverses the array. Returns the sum of all elements in the reversed array. if not arr: # If the array is empty, return sum as 0 and print an empty array. print(\\"Original input: []\\") print(\\"Changed array: []\\") return 0 original_arr = arr.copy() # Swap first and last element arr[0], arr[-1] = arr[-1], arr[0] print(f\\"Original input: {original_arr}\\") print(f\\"Changed array: {arr}\\") # Reverse the array reversed_arr = arr[::-1] return sum(reversed_arr)"},{"question":"Display a gaussian curve in 3D python, then set random clusters of points under the curve by library random and scipy. Finally, use Machine learning Kmeans to fit random points to find the cluster of these points.","solution":"import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D from scipy.stats import multivariate_normal from sklearn.cluster import KMeans def plot_3d_gaussian_and_clusters(): # Define the grid and multivariate Gaussian x, y = np.mgrid[-5:5:.01, -5:5:.01] pos = np.dstack((x, y)) rv = multivariate_normal([0, 0], [[1.0, 0.0], [0.0, 1.0]]) # Plot the Gaussian distribution fig = plt.figure() ax = fig.add_subplot(111, projection='3d') ax.plot_surface(x, y, rv.pdf(pos), cmap='viridis', alpha=0.6) # Generate random clusters under the Gaussian curve rng = np.random.default_rng() data1 = rng.multivariate_normal([1, 1], [[0.1, 0], [0, 0.1]], 100) data2 = rng.multivariate_normal([-1, -1], [[0.1, 0], [0, 0.1]], 100) data3 = rng.multivariate_normal([1, -1], [[0.1, 0], [0, 0.1]], 100) data = np.vstack([data1, data2, data3]) # Plot these random clusters ax.scatter(data[:, 0], data[:, 1], rv.pdf(data), c='r', marker='o') # Using KMeans to fit random points kmeans = KMeans(n_clusters=3) kmeans.fit(data) labels = kmeans.labels_ axscatter = ax.scatter(data[:, 0], data[:, 1], rv.pdf(data), c=labels, marker='o', cmap='rainbow') legend1 = ax.legend(*axscatter.legend_elements(), loc=\\"upper right\\", title=\\"Clusters\\") ax.add_artist(legend1) plt.show()"},{"question":"Simulate a biased coin toss using Python. The coin has a 60% chance of landing on heads and a 40% chance of landing on tails. Perform the simulation 1000 times and print the number of times each side landed.","solution":"import random def biased_coin_toss(): Simulates a biased coin toss with a 60% chance of landing on heads and a 40% chance of landing on tails. Returns: str: \\"heads\\" or \\"tails\\" based on the biased probability. return \\"heads\\" if random.random() < 0.6 else \\"tails\\" def simulate_tosses(num_tosses): Simulates a given number of biased coin tosses and counts the number of times each side lands. Args: num_tosses (int): The number of coin tosses to simulate. Returns: dict: A dictionary with the count of heads and tails. results = {\\"heads\\": 0, \\"tails\\": 0} for _ in range(num_tosses): result = biased_coin_toss() results[result] += 1 return results simulation_results = simulate_tosses(1000) print(\\"Number of heads:\\", simulation_results[\\"heads\\"]) print(\\"Number of tails:\\", simulation_results[\\"tails\\"])"},{"question":"Create a Python function that calculates the sum of even numbers from a given list. Additionally, ensure your function filters out non-integer values and handles empty list cases gracefully.","solution":"def sum_even_numbers(lst): Returns the sum of even numbers from a given list, filtering out non-integer values. Parameters: lst (list): The input list containing elements. Returns: int: Sum of even numbers in the list. if not lst: return 0 return sum(num for num in lst if isinstance(num, int) and num % 2 == 0)"},{"question":"Given two parts of a concatenated string where the second part is a shuffled version of the first and the first part is any string, write a Python function that checks if it's possible for the two strings to be merged back into one concatenated string.","solution":"def can_merge_concatenated_parts(s1, s2): Checks if two parts of a concatenated string can be merged back into one string where s2 is a shuffled version of s1. if sorted(s1) == sorted(s2): return True return False"},{"question":"Build a dictionary from a list of key-value pairs where the keys and values are of different data types. The keys can be of integer, float, or string types, while the values can be of list, dictionary, or boolean types. The list should have at least 10 elements. Create an algorithm to populate the dictionary and implement a checking function to verify the correctness of your solution.","solution":"def build_dictionary(pairs): Constructs a dictionary from a list of key-value pairs. The keys can be of integer, float, or string types, while the values can be of list, dictionary, or boolean types. :param pairs: List of tuples containing key-value pairs :return: Dictionary constructed from the pairs new_dict = {} for key, value in pairs: new_dict[key] = value return new_dict"},{"question":"Given a list of strings, write code to sort the strings in descending order using a custom comparator function that sorts based on the number of vowels in each string. Additionally, for strings with the same number of vowels, sort them by their length, and in case of a tie, sort them alphabetically.","solution":"def sort_strings(strings): Sort strings based on the number of vowels in descending order. For strings with the same number of vowels, sort by length in descending order. In case of a tie, sort alphabetically in ascending order. def count_vowels(string): vowels = \\"aeiouAEIOU\\" return sum(1 for char in string if char in vowels) # Custom comparator def custom_comparator(s): return (-count_vowels(s), -len(s), s) # Sort using the custom comparator sorted_strings = sorted(strings, key=custom_comparator) return sorted_strings"},{"question":"Could you write a single line of code in Python to replace every occurrence of a letter with the letter that is two places to the right in the alphabet but be sure to write a command that will replace z with b and Z with B.","solution":"def replace_with_next_two_letters(text): Replaces every occurrence of a letter with the letter that is two places to the right in the alphabet. 'z' is replaced with 'b' and 'Z' is replaced with 'B'. return ''.join(chr(((ord(c) - 65 + 2) % 26) + 65) if c.isupper() else chr(((ord(c) - 97 + 2) % 26) + 97) if c.islower() else c for c in text)"},{"question":"Write a regex to detect any sequence starting with \\"abc\\" and ending with \\"xyz\\", allowing for any characters in between. Additionally, identify erroneous regex code and debug it.","solution":"import re def detect_sequence(text): Returns True if the text contains a sequence starting with 'abc' and ending with 'xyz' with any characters in between. pattern = r'abc.*xyz' return bool(re.search(pattern, text)) def debug_regex(pattern, text): Returns True if the regex pattern matches the text, otherwise returns False. try: return bool(re.search(pattern, text)) except re.error as e: print(f\\"Regex error: {e}\\") return False"},{"question":"Generate code for an application that takes an array of integers, finds the largest number in the array, and prints out the result.","solution":"def find_largest_number(arr): Finds the largest number in an array of integers. Parameters: arr (list of int): The array of integers. Returns: int: The largest number in the array, or None if the array is empty. if not arr: return None largest = arr[0] for num in arr: if num > largest: largest = num return largest"},{"question":"Given a list with multiple duplicate elements, write a program to delete all duplicates from the list and return the resulting list. However, you must solve this problem without using any built-in data structures such as sets or dictionaries.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list and returns the list of unique elements. Args: input_list (list): A list containing duplicate elements. Returns: list: A list with duplicate elements removed. unique_list = [] for element in input_list: if element not in unique_list: unique_list.append(element) return unique_list"},{"question":"Given an expression string, write a function to check if the parentheses, curly brackets, and square brackets in it are balanced. For example, the expression \\"{[( ])}\\" is not balanced, while \\"{[()]}\\" is balanced.","solution":"def is_balanced(expression): Returns True if the expression has balanced parentheses, curly brackets, and square brackets. stack = [] open_close_map = {')': '(', '}': '{', ']': '['} open_chars = set(open_close_map.values()) for char in expression: if char in open_chars: stack.append(char) elif char in open_close_map: if not stack or stack.pop() != open_close_map[char]: return False return not stack"},{"question":"Write a Python program that prints each line of a 'madlib' and prompts the user to replace specific words in the string with their own input.","solution":"def madlib(): Prompts the user to replace specific words in a madlib template with their own input and prints the resulting story. story = ( \\"Today I went to a zoo. I saw a(n) [adjective] [animal] jumping up and down in its tree. \\" \\"He [verb] [adverb] through the large tunnel that led to its [adjective] [noun]. \\" \\"I got some peanuts and passed them through the cage to a gigantic gray [animal] towering above my head. \\" \\"Feeding that animal made me hungry. I went to get a(n) [adjective] scoop of ice cream. \\" \\"It filled my stomach. Afterwards I had to [verb] [adverb] to catch our bus. \\" \\"When I got home I [verb] my mom for a [adjective] day at the zoo.\\" ) placeholders = [\\"adjective\\", \\"animal\\", \\"verb\\", \\"adverb\\", \\"adjective\\", \\"noun\\", \\"animal\\", \\"adjective\\", \\"verb\\", \\"adverb\\", \\"verb\\", \\"adjective\\"] for placeholder in placeholders: user_input = input(f\\"Please enter a(n) {placeholder}: \\") story = story.replace(f\\"[{placeholder}]\\", user_input, 1) print(\\"nHere's your story:\\") print(story)"},{"question":"Create a parser for an HTML table. The parser should take in an HTML document and output a two dimensional list containing all the contents of the table.","solution":"from bs4 import BeautifulSoup def parse_html_table(html): Parses an HTML table and returns the contents as a two dimensional list. Each inner list represents a row within the table. soup = BeautifulSoup(html, 'html.parser') table = soup.find('table') table_data = [] if table: for row in table.find_all('tr'): row_data = [] for cell in row.find_all(['td', 'th']): row_data.append(cell.get_text(strip=True)) table_data.append(row_data) return table_data"},{"question":"Implement a recursive function \`has_consecutive_custom(s: str, k: int = 3) -> bool\` that checks if the given string \`s\` contains any substring of length \`k\` that appears consecutively twice. This function should strictly follow the original constraints, including not using any external libraries, and the docstring should be maintained. Additionally, the function should include a hidden debug mode that can be toggled using another parameter. When debug mode is on (i.e., debug=True), the function will print the progress of the recursion. This feature will allow us to understand how the recursion works internally without altering the function's primary purpose.","solution":"def has_consecutive_custom(s: str, k: int = 3, debug: bool = False) -> bool: Recursively checks if the given string \`s\` contains any substring of length \`k\` that appears consecutively twice. :param s: The string to check. :param k: The length of the substring to look for. :param debug: When True, prints the progress of the recursion. :returns: True if there is a substring of length \`k\` that appears consecutively twice, otherwise False. n = len(s) if debug: print(f\\"Checking string: {s}\\") if n < 2 * k: return False if s[:k] == s[k:2*k]: return True return has_consecutive_custom(s[1:], k, debug)"},{"question":"Construct a function that accepts an array comprising textual strings, and returns a fresh array that encapsulates the character count of every individual string from the origin array. However, the result array should only contain the counts of strings which are palindromes. Thus, necessitating an intermediate process to identify if a string is a palindrome before calculating its length.","solution":"def palindrome_lengths(strings): Given a list of strings, returns a list of the lengths of the strings that are palindromes. def is_palindrome(s): Check if a string is a palindrome. return s == s[::-1] palindrome_lengths = [len(s) for s in strings if is_palindrome(s)] return palindrome_lengths"},{"question":"Implement a function in Python that takes a list of strings and returns a dictionary containing the count of each unique string in the given list.","solution":"def count_strings(strings): Returns a dictionary with the count of each unique string in the given list. Parameters: strings (list): A list of strings. Returns: dict: A dictionary where keys are unique strings from the list and values are their counts. count_dict = {} for string in strings: if string in count_dict: count_dict[string] += 1 else: count_dict[string] = 1 return count_dict"},{"question":"Given an unsorted array of integers, write a Python function to find the length of the longest consecutive elements sequence. The sequence must be strictly consecutive, meaning that every element in the sequence must be exactly one greater than the previous element.","solution":"def longest_consecutive_sequence(arr): Given an unsorted array of integers, return the length of the longest consecutive elements sequence. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Create a Python function \\"check_prime\\" that accepts an integer and returns a boolean value indicating whether the integer is a prime number or not. The function should also validate that the input is an integer and within the range of 2 to 10^6. If the input is not an integer, the function should raise a TypeError. If the input is out of range, the function should raise a ValueError. The check_prime function should be optimized for an efficient primality test. Also, write a set of assertions to test various input scenarios.","solution":"def check_prime(n): Returns True if n is a prime number, False otherwise. Raises TypeError if n is not an integer. Raises ValueError if n is not in the range 2 to 10^6. if not isinstance(n, int): raise TypeError(\\"Input must be an integer\\") if n < 2 or n > 10**6: raise ValueError(\\"Input must be in the range 2 to 10^6\\") if n == 2: return True if n % 2 == 0: return False sqrt_n = int(n**0.5) for i in range(3, sqrt_n + 1, 2): if n % i == 0: return False return True"},{"question":"Given two matrices A and B of the same dimensions, write a function to calculate their Hadamard product (the entry wise product of the two matrices) and return the result. If either of the matrices is not valid (dimensions don't match, or isn't numeric), your function should throw an error. Use Python language for this, and don't rely on any numerical computation libraries (like numpy). Manual handling of matrices is preferred.","solution":"def hadamard_product(A, B): Returns the Hadamard product of matrices A and B. # Check if provided matrices are valid if not all(isinstance(row, list) for row in A) or not all(isinstance(row, list) for row in B): raise ValueError(\\"Both inputs must be matrices (lists of lists).\\") if len(A) != len(B) or any(len(row) != len(B[i]) for i, row in enumerate(A)): raise ValueError(\\"Matrices do not have the same dimensions.\\") rows = len(A) cols = len(A[0]) # Check if all elements are numeric for row in A + B: for element in row: if not isinstance(element, (int, float)): raise ValueError(\\"All elements must be numeric.\\") # Calculating the Hadamard product result = [] for i in range(rows): result_row = [] for j in range(cols): result_row.append(A[i][j] * B[i][j]) result.append(result_row) return result"},{"question":"Create a random list of 10 prime numbers in the range of 100 to 1000 in Python.","solution":"import random def is_prime(n): Checks if a number is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def generate_random_primes(prime_count=10, start=100, end=1000): Generates a list of random prime numbers within the given range. primes = [num for num in range(start, end) if is_prime(num)] random_primes = random.sample(primes, prime_count) if len(primes) >= prime_count else primes return random_primes"},{"question":"Generate a fizzbuzz function in Python that, given a number, will return \\"fizz\\" if the number is divisible by 3, \\"buzz\\" if it's divisible by 5, and \\"fizzbuzz\\" if it's divisible by both. However, you must implement this without using any if or else statements.","solution":"def fizzbuzz(n): Returns \\"fizz\\" if n is divisible by 3, \\"buzz\\" if n is divisible by 5, and \\"fizzbuzz\\" if n is divisible by both, otherwise returns the number itself as a string. return (str(n) * (n % 3 != 0 and n % 5 != 0) + \\"fizz\\" * (n % 3 == 0) + \\"buzz\\" * (n % 5 == 0)) or \\"fizzbuzz\\""},{"question":"Write a program that decrypts a message encoded using the Caesar cipher. The user should input the encrypted message and then the program should output the decrypted message.","solution":"def caesar_decrypt(encrypted_message, shift): Decrypts a message encoded using the Caesar cipher. The \`shift\` parameter is the number of positions each letter in the ciphertext has been moved by. decrypted_message = \\"\\" for char in encrypted_message: # Check if character is a letter if char.isalpha(): # Handle lower and upper case letters separately if char.islower(): decrypted_message += chr((ord(char) - shift - 97) % 26 + 97) else: decrypted_message += chr((ord(char) - shift - 65) % 26 + 65) else: # If the character is not a letter, keep it unchanged decrypted_message += char return decrypted_message"},{"question":"Given an array of integers, write an algorithm to reorder the array so that all the prime numbers appear before all the non-prime numbers, while maintaining the relative order of the prime numbers and the relative order of the non-prime numbers. Your algorithm should have a time complexity of O(n) and should not use any extra space.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def reorder_primes(arr): Reorder the array so that primes come before non-primes. This maintains the relative order of primes and non-primes. if not arr: return arr # Find indices of prime numbers and non-prime numbers primes = [] non_primes = [] for num in arr: if is_prime(num): primes.append(num) else: non_primes.append(num) # Concatenate primes and non-primes return primes + non_primes"},{"question":"Develop a Python program to implement a ternary search on an array. Unlike binary search, in ternary search, the array is divided into three equal parts instead of two. The given array is sorted. Your task is to find the position of a given key. If the key occurs more than once, return the position of the first occurrence.","solution":"def ternary_search(arr, key): Perform ternary search on a sorted array to find the first occurrence of key. Parameters: arr (list): A sorted list of elements. key (int): The element to search for. Returns: int: The index of the first occurrence of the key in the array, or -1 if the key is not found. def recursive_search(arr, left, right, key): if right >= left: mid1 = left + (right - left) // 3 mid2 = right - (right - left) // 3 # Check mid1 and mid2 if arr[mid1] == key: return mid1 if arr[mid2] == key: return mid2 # Determine which segment to search in if key < arr[mid1]: return recursive_search(arr, left, mid1 - 1, key) elif key > arr[mid2]: return recursive_search(arr, mid2 + 1, right, key) else: return recursive_search(arr, mid1 + 1, mid2 - 1, key) return -1 index = recursive_search(arr, 0, len(arr) - 1, key) # Find the first occurrence if there are duplicates if index != -1: while index > 0 and arr[index - 1] == key: index -= 1 return index"},{"question":"Create a python code that determines the mode of an array of integers inputted by a user, without using python's inbuilt statistics function, or any other sort of statistical libraries for that matter. The input array can have any number of integers which can also be negative. Your program should be able to handle an array with a length of up to 10,000.","solution":"def find_mode(arr): Returns the mode of an array of integers. If multiple values have the same highest frequency, returns the smallest one. if not arr: return None frequency_dict = {} for num in arr: if num in frequency_dict: frequency_dict[num] += 1 else: frequency_dict[num] = 1 max_frequency = max(frequency_dict.values()) mode = min(key for key, value in frequency_dict.items() if value == max_frequency) return mode"},{"question":"Create an asyncio event loop and execute a coroutine that performs a CPU-intensive task. The coroutine should accept a list of integers as input and return a list containing the prime numbers from the input list. However, the prime numbers should be generated using a deterministic primality test algorithm such as AKS primality test or Lenstra elliptic-curve factorization. The event loop should run until the coroutine is complete, and the final result should be printed. Additionally, the coroutine should have a timeout of 5 seconds, and if the coroutine takes longer than 5 seconds to complete, the event loop should cancel the coroutine and print an error message. The input list can contain up to 1 million integers, and the integers can be up to 10^9 in size. import asyncio","solution":"import asyncio import math def is_prime(n): Check if a number is prime using a naive algorithm. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True async def find_primes(numbers): Coroutine that finds prime numbers in the given list. primes = [] for number in numbers: if is_prime(number): primes.append(number) return primes async def main(numbers): try: # Run the coroutine with a timeout of 5 seconds primes = await asyncio.wait_for(find_primes(numbers), timeout=5) print(\\"Prime numbers:\\", primes) except asyncio.TimeoutError: print(\\"The coroutine took too long to complete.\\") # This function is for testing purposes; will call it from tests directly async def run_main_with_numbers(numbers): await main(numbers) def run_event_loop(numbers): asyncio.run(run_main_with_numbers(numbers))"},{"question":"Write a function in Python that takes in two integers and returns a list of all the prime numbers between the two, inclusive, in descending order. The function should implement the Sieve of Eratosthenes algorithm to optimize the prime number generation.","solution":"def sieve_of_eratosthenes(n): Generates a list of all prime numbers up to and including n using the Sieve of Eratosthenes algorithm. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p] == True: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_numbers = [p for p in range(2, n + 1) if is_prime[p]] return prime_numbers def primes_between_desc(a, b): Returns a list of all prime numbers between a and b, inclusive, in descending order. if a > b: a, b = b, a primes = sieve_of_eratosthenes(b) primes_between = [p for p in primes if p >= a] return sorted(primes_between, reverse=True)"},{"question":"Create a Python code to generate a random string of length 8 made of uppercase letters and numbers.","solution":"import random import string def generate_random_string(length=8): Generates a random string of given length made of uppercase letters and numbers. characters = string.ascii_uppercase + string.digits return ''.join(random.choice(characters) for _ in range(length))"},{"question":"Write a python program using a do-while loop to print the first 10 numbers of the Fibonacci sequence. Also, incorporate error handling in your program such that it retry handling any instances of a RecursionError should one occur. Note that the program should only output even numbers from the Fibonacci sequence. Although Python does not have a built-in 'do-while' loop like other languages, we can implement similar functionality using a while loop and a boolean condition. However, Python has a limit recursion depth to prevent a stack overflow, and a Fibonacci sequence calculation doesn't require recursion anyway as it's prone to blowing up the call stack.","solution":"def fibonacci_even(n): fib_sequence = [] a, b = 0, 1 count = 0 while count < n: b = a + b a = b - a if b % 2 == 0: fib_sequence.append(b) count += 1 return fib_sequence def main_fibonacci_even(): attempt = 0 max_attempts = 3 while attempt < max_attempts: try: result = fibonacci_even(10) break except RecursionError: print(f\\"RecursionError encountered on attempt {attempt + 1}. Retrying...\\") attempt += 1 else: print(\\"Max attempts reached. Exiting without result.\\") return [] return result"},{"question":"Program a BeautifulSoup web crawler in Python to scrape the titles and hyperlinks of the top 25 articles on a given webpage.","solution":"import requests from bs4 import BeautifulSoup def scrape_top_articles(url): Fetches the titles and hyperlinks of the top 25 articles from the given webpage URL. Args: - url (str): The URL of the webpage to scrape. Returns: - List of tuples, where each tuple contains the title and hyperlink of an article. response = requests.get(url) page_content = response.content soup = BeautifulSoup(page_content, 'html.parser') articles = soup.find_all('article')[:25] top_articles = [] for article in articles: title = article.find('h2').get_text() link = article.find('a')['href'] top_articles.append((title, link)) return top_articles"},{"question":"Write a recursive function that returns the Nth number in the Fibonacci sequence, but with a twist. Instead of starting with 0 and 1, start the sequence with two given numbers, a and b. For instance, if a=3 and b=5, the sequence would go 3, 5, 8, 13, 21, etc. Implement and explain your solution. Your function will take parameters N, a, and b. Please also include a code to check the correctness of your solution using some test cases.","solution":"def twisted_fibonacci(n, a, b): Returns the Nth number in the Fibonacci sequence starting with a and b. if n == 0: return a elif n == 1: return b else: return twisted_fibonacci(n - 1, a, b) + twisted_fibonacci(n - 2, a, b)"},{"question":"Given a sorted array of integers and an integer, write a Python function to check if the array contains the given integer.","solution":"def contains(arr, target): Checks if the sorted array \`arr\` contains the integer \`target\`. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return True elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return False"},{"question":"Write a Python function using the urllib library to fetch data as XML from a URL, parse it and handle any exceptions during processing. Include error handling for network issues and invalid XML structure. Test your function using this link: http://httpbin.org/xml","solution":"import urllib.request import urllib.error import xml.etree.ElementTree as ET def fetch_and_parse_xml(url): Fetches data as XML from the specified URL and parses it. Args: url (str): The URL to fetch the XML data from. Returns: ET.Element: Parsed XML root element. Raises: ValueError: If the XML is invalid or cannot be parsed. urllib.error.URLError: If there is an issue with accessing the URL. try: with urllib.request.urlopen(url) as response: xml_data = response.read() root = ET.fromstring(xml_data) return root except urllib.error.URLError as e: raise urllib.error.URLError(f\\"Failed to fetch data from the URL: {e.reason}\\") except ET.ParseError as e: raise ValueError(f\\"Failed to parse the XML data: {e}\\")"},{"question":"Develop a Python program to reverse the order of the elements in a given list while ignoring any elements that are divisible by 3. Additionally, the program should ignore any elements that are greater than 10.","solution":"def reverse_and_filter_list(arr): Reverses the order of the elements in a given list while ignoring any elements that are divisible by 3 or greater than 10. return [x for x in reversed(arr) if x % 3 != 0 and x <= 10]"},{"question":"Can you write a code to find the first occurrence of an element in a sorted array with a time complexity of less than O(n)? The array arr is given as [-5, -1, 0, 2, 2, 3, 3, 3, 4, 5, 5, 6] and the target element x as 3. The function should return the index of the first occurrence of 3 in arr.","solution":"def find_first_occurrence(arr, x): Returns the index of the first occurrence of x in a sorted array arr. Uses binary search to achieve time complexity of O(log n). left, right = 0, len(arr) - 1 result = -1 while left <= right: mid = left + (right - left) // 2 if arr[mid] == x: result = mid right = mid - 1 # look on the left side for the first occurrence elif arr[mid] < x: left = mid + 1 else: right = mid - 1 return result"},{"question":"Write a function in Python that takes an integer as an input and prints the number of digits in the integer.","solution":"def count_digits(n): Returns the number of digits in the integer n. return len(str(abs(n)))"},{"question":"Modify the function such that it takes two arrays, one containing numbers and the other containing symbols as arguments and returns a string where each number is replaced with its associated symbol. The function should only replace the numbers that are divisible by 3 and the symbols should be in the order of the numbers replaced.","solution":"def replace_numbers_with_symbols(numbers, symbols): Replaces numbers divisible by 3 with symbols in the order of the numbers replaced. Args: - numbers: List of integers. - symbols: List of symbols (strings). Returns: A string with numbers replaced by their corresponding symbols. result = [] symbol_index = 0 for num in numbers: if num % 3 == 0 and symbol_index < len(symbols): result.append(symbols[symbol_index]) symbol_index += 1 else: result.append(str(num)) return ''.join(result)"},{"question":"Write a script in Python for drawing a hollow irregular hexagon on the screen with user-defined sides. Ensure each side has a different length input by the user. The output should also display the area and perimeter of the hexagon.","solution":"import turtle import math def draw_irregular_hexagon(sides): Draws a hollow irregular hexagon on the screen with the given sides. sides: List of lengths of the 6 sides of the hexagon. if len(sides) != 6: raise ValueError(\\"There must be exactly 6 side lengths.\\") turtle.penup() turtle.goto(-100, 0) turtle.pendown() angle = 120 # Internal angles for a regular hexagon # Draw the hexagon for side_length in sides: turtle.forward(side_length) turtle.right(60) turtle.hideturtle() turtle.done() def hexagon_perimeter(sides): Returns the perimeter of the hexagon. sides: List of lengths of the 6 sides of the hexagon. return sum(sides) def hexagon_area(sides): Returns the approximate area of an irregular hexagon. This calculation assumes the shape is mostly irregular but somewhat near a regular hexagon shape. sides: List of lengths of the 6 sides of the hexagon. # Use the fact that the area of regular hexagon is (3√3/2) s^2, where s is the side length. average_side = sum(sides) / len(sides) # Calculate an average side length for approximation area = (3 * math.sqrt(3) * math.pow(average_side, 2)) / 2 return area def main(): sides = [float(input(f\\"Enter the length of side {i+1}: \\")) for i in range(6)] draw_irregular_hexagon(sides) perimeter = hexagon_perimeter(sides) area = hexagon_area(sides) print(f\\"The perimeter of the hexagon is: {perimeter:.2f}\\") print(f\\"The approximate area of the hexagon is: {area:.2f}\\") if __name__ == \\"__main__\\": main()"},{"question":"Given the python set 's = set([1, 2, 3])', write a function to add up all elements in the set.","solution":"def sum_set_elements(s): Returns the sum of all elements in the set s. return sum(s)"},{"question":"Given the following erroneous Python code, fix the bugs, and write a proper function to convert a given string of floating point number(s) into a Python float. Your function should be capable of handling both single floating point numbers and lists of floating point numbers. For single numbers, the function should return the converted number, and for a list, it should return a list of converted numbers.","solution":"def convert_to_float(input_data): Converts a string of a floating point number or a list of such strings to float(s). Parameters: input_data (str or list of str): The input string or list of strings to convert. Returns: float or list of float: The converted float(s). if isinstance(input_data, str): return float(input_data) elif isinstance(input_data, list): return [float(item) for item in input_data] else: raise TypeError(\\"Input should be a string or a list of strings\\")"},{"question":"Create a Python program that implements a basic calculator. The calculator should accept two numbers and an operator (+, -, *, /) from the user and print the result.","solution":"def basic_calculator(num1, num2, operator): Perform basic arithmetic operations. :param num1: First number :param num2: Second number :param operator: A string representing the operator ('+', '-', '*', '/') :return: The result of the arithmetic operation if operator == '+': return num1 + num2 elif operator == '-': return num1 - num2 elif operator == '*': return num1 * num2 elif operator == '/': if num2 != 0: return num1 / num2 else: return \\"Error: Division by zero\\" else: return \\"Error: Invalid operator\\""},{"question":"Write a Python function named 'sort_user_list' that takes a list of dictionaries, where each dictionary represents a user with at least the key 'username' and returns the sorted list based on the 'username' key.","solution":"def sort_user_list(user_list): Sorts a list of dictionaries based on the 'username' key. Args: user_list (list of dicts): A list where each element is a dictionary with a 'username' key. Returns: list of dicts: The sorted list of dictionaries. return sorted(user_list, key=lambda x: x['username'])"},{"question":"Given two lists \`list1\` and \`list2\` of integers, where \`list1\` might contain duplicates, write a Python function \`remove_duplicates_and_intersect(list1, list2)\` that removes all duplicates from \`list1\` and returns a new list containing only the elements from \`list1\` that are also in \`list2\`. If there are no common elements, the function should return an empty list.","solution":"def remove_duplicates_and_intersect(list1, list2): Removes duplicates from list1 and returns a list containing only elements from list1 that are also in list2. set1 = set(list1) # Remove duplicates from list1 by converting to a set set2 = set(list2) # Convert list2 to a set for intersection operation intersection = set1.intersection(set2) # Find common elements return list(intersection) # Convert the set of common elements back to a list"},{"question":"Give me a Python program which takes as input two matrices A and B and multiplies them together, resulting in matrix C. Assume both matrices are N by N, where N > 0.","solution":"def multiply_matrices(A, B): Multiplies two N x N matrices A and B. Parameters: A (list of list of int/float): The first matrix. B (list of list of int/float): The second matrix. Returns: list of list of int/float: The resulting matrix product. N = len(A) # Assuming A is an N x N matrix C = [[0]*N for _ in range(N)] # Initialize result matrix C with zeros for i in range(N): for j in range(N): C[i][j] = sum(A[i][k] * B[k][j] for k in range(N)) return C"},{"question":"Given a list and a value, write a Python program that not only adds the new element at the beginning of the list, but also checks and confirms whether the element was already present in the list before adding. If the element already exists, the program should throw a warning message and not add the element.","solution":"def add_element_to_list(lst, value): Adds an element to the beginning of the list if it's not already present. If the element is already present, returns a warning message. :param lst: List to add the element to. :param value: Element to be added. :return: Modified list or a warning message. if value in lst: return \\"Warning: Element already exists in the list.\\" else: return [value] + lst"},{"question":"Given a text file \\"data.txt\\", write a python program to read the content from the file, find all occurrences of any numbers, add them up, and print out the sum. Handle any potential exceptions that might occur during the file operations.","solution":"import re def sum_numbers_in_file(file_path): Reads the content of the file at the given file_path, finds all occurrences of numbers, adds them up, and returns the sum. Handles any potential exceptions during file operations. try: with open(file_path, 'r') as file: content = file.read() # Find all numbers in the file content numbers = re.findall(r'd+', content) # Convert the numbers to integers and sum them up total_sum = sum(map(int, numbers)) return total_sum except FileNotFoundError: print(\\"Error: File not found.\\") return None except IOError: print(\\"Error: IO error occurred.\\") return None"},{"question":"Write a function to create a random sequence of 0s and 1s, with an added condition that no more than three consecutive identical numbers should appear in the sequence.","solution":"import random def generate_sequence(length): Generate a random sequence of 0s and 1s with no more than three consecutive identical numbers. if length <= 0: return [] sequence = [] for _ in range(length): if len(sequence) < 3: next_num = random.choice([0, 1]) else: # Check the last three numbers to avoid more than three consecutive identical numbers if sequence[-1] == sequence[-2] == sequence[-3]: next_num = 1 - sequence[-1] # Flip from 0 to 1 or from 1 to 0 else: next_num = random.choice([0, 1]) sequence.append(next_num) return sequence"},{"question":"Given two people's respective ages, write a function in Python that returns a boolean value indicating whether one is older than the other. Additionally, implement error checking to ensure valid input types and values.","solution":"def is_older(age1, age2): Returns True if age1 is greater than age2, False otherwise. Ensures that both ages are non-negative integers. if not (isinstance(age1, int) and isinstance(age2, int)): raise TypeError(\\"Both ages must be integers.\\") if age1 < 0 or age2 < 0: raise ValueError(\\"Ages must be non-negative.\\") return age1 > age2"},{"question":"Write a Python function that takes an integer as input and returns a list of all prime factors of that number, from smallest to largest. If the input number is less than 2, the function should return an empty list.","solution":"def prime_factors(n): Returns a list of all prime factors of the input integer n, sorted from smallest to largest. If n is less than 2, returns an empty list. if n < 2: return [] factors = [] # Check for number of 2's that divide n while n % 2 == 0: factors.append(2) n //= 2 # n must be odd at this point so checking for all odd numbers for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.append(i) n //= i # if n is a prime number greater than 2 if n > 2: factors.append(n) return factors"},{"question":"In Python, write a function that takes two integers a, b and returns a*b. However, you should not use the multiplication operator (*). Instead, use only addition (+), subtraction (-), and bitwise operators (&, |, ^, ~, <<, >>).","solution":"def multiply(a, b): Returns the product of a and b without using the multiplication operator. Uses bitwise operators, addition, and subtraction only. def add(x, y): Performs addition without using the + operator. while y != 0: carry = x & y x = x ^ y y = carry << 1 return x def negate(x): Returns the negation of x. return add(~x, 1) def absolute(x): Returns the absolute value of x. return x if x >= 0 else negate(x) result = 0 abs_a = absolute(a) abs_b = absolute(b) while abs_b > 0: if abs_b & 1: result = add(result, abs_a) abs_a <<= 1 abs_b >>= 1 if (a < 0) ^ (b < 0): result = negate(result) return result"},{"question":"Given a list of arrays where every array contains unique integers, write a function in a language of your choice, that merges all these arrays into one and returns a new list which is sorted in non-decreasing order, and any duplicate values among all the arrays must be removed.","solution":"def merge_and_sort_unique(arrays): Merges multiple arrays into one and returns a sorted list with unique values. :param arrays: List of arrays, where each array contains unique integers. :return: A sorted list containing unique integers. unique_numbers = set() for array in arrays: unique_numbers.update(array) sorted_unique_numbers = sorted(unique_numbers) return sorted_unique_numbers"},{"question":"Create a parity check machine that takes in a binary string and an additional parity bit. The machine should check if the number of 1's in the binary string is even or odd. If it's even, it should return \\"Even\\", if it's odd it should return \\"Odd\\". Also, verify if the parity bit is correct for the sequence. If it is, add a check message of \\"Correct Parity Bit\\". If it is not, add a message \\"Incorrect Parity Bit\\". If the binary sequence contains any number other than 0 and 1, the machine should return \\"Invalid Input\\".","solution":"def parity_check_machine(binary_string, parity_bit): Checks if the number of 1's in the binary string is even or odd. Also verifies if the parity bit is correct. Parameters: binary_string (str): The binary sequence. parity_bit (str): The parity bit ('0' or '1'). Returns: str: \\"Even\\" or \\"Odd\\" based on the number of 1's, and \\"Correct Parity Bit\\" or \\"Incorrect Parity Bit\\" based on the parity bit. If input is invalid, returns \\"Invalid Input\\". # Check if input is valid if not all(bit in '01' for bit in binary_string) or parity_bit not in '01': return \\"Invalid Input\\" # Count the number of 1's in the binary string num_ones = binary_string.count('1') parity = num_ones % 2 result = \\"Even\\" if parity == 0 else \\"Odd\\" if parity == int(parity_bit): return f\\"{result}, Correct Parity Bit\\" else: return f\\"{result}, Incorrect Parity Bit\\""},{"question":"Create a function that joins two strings into one, but the strings must be reversed before being joined. Additionally, the function should only use a single loop to reverse each string. The function should also check that the length of each string is not greater than 100 characters before reversing and joining them.","solution":"def reverse_and_join(str1, str2): Reverses two strings and then joins them together. It uses a single loop for both reversals. Ensures that the length of each string is not greater than 100 characters before processing. :param str1: First string to reverse and join. :param str2: Second string to reverse and join. :return: The reversed and joined string or an error message if any string exceeds 100 characters. if len(str1) > 100 or len(str2) > 100: return \\"Error: String length must not exceed 100 characters.\\" # Reverse both strings using a loop rev_str1 = \\"\\" rev_str2 = \\"\\" for i in range(len(str1)): rev_str1 = str1[i] + rev_str1 for i in range(len(str2)): rev_str2 = str2[i] + rev_str2 return rev_str1 + rev_str2"},{"question":"Write a Python function to check if a given string is a palindrome, ignoring case, spaces, and punctuation. Additionally, the function should return the reversed palindrome for further use.","solution":"import string def is_palindrome(s): Check if a given string is a palindrome, ignoring case, spaces, and punctuation. Returns a tuple (bool, str) where the first item is True if the string is a palindrome and False otherwise, and the second item is the reversed palindrome. # Remove punctuation cleaned_string = ''.join(char for char in s if char.isalnum()) # Convert to lowercase cleaned_string = cleaned_string.lower() # Check if palindrome is_palind = cleaned_string == cleaned_string[::-1] # Return result and reversed string return is_palind, cleaned_string[::-1]"},{"question":"Clone the repository from the provided URL and implement a new feature that allows users to dynamically change the text color of the widget's displayed text through an additional function. Moreover, enhance the testing process by integrating an automated testing tool like Travis CI to enable continuous integration and ensure code quality.","solution":"class Widget: def __init__(self, text): self.text = text self.text_color = \\"black\\" # Default color def set_text_color(self, color): Sets the color of the widget's text. :param color: The new color for the text. self.text_color = color def get_text(self): return self.text def get_text_color(self): return self.text_color"},{"question":"Create a program that can handle the dynamic addition of any number of distinct integers. The program should allow users to continuously enter numbers they would like to add until they choose to stop. Implement error checking to ensure that the entered values are indeed integers. The program should then display the resultant addition of these integers. For instance, if a user enters 5, 10, and 15, the program should return 30.","solution":"def add_integers(inputs): Sum all valid integer inputs from a list of strings. total = 0 for inp in inputs: try: number = int(inp) total += number except ValueError: print(f\\"Invalid input '{inp}', skipping...\\") return total"},{"question":"Create a code for string manipulation which takes a string as input and returns a new version of it with all uppercase letters converted to lowercase and all lowercase letters converted to uppercase.","solution":"def swap_case(s): Returns a new string with all uppercase letters converted to lowercase and all lowercase letters converted to uppercase. return s.swapcase()"},{"question":"Given a sorted list of integers and a target element, write a Python function to search for the target element. The function should return the index of the target element if it is found in the list, and -1 if it is not found. You may assume that the list does not contain duplicate elements.","solution":"def binary_search(arr, target): Conducts a binary search to find the index of the target in a sorted list. Returns the index of the target element if found, otherwise -1. Parameters: arr (list of int): A sorted list of integers. target (int): The target element to search for. Returns: int: The index of the target element if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Implement a function in Python that takes an array of floating-point numbers as argument. This function should return the sum of all numbers, while handling possible issues like non-numeric values. For an additional challenge, make this function recursive. A list of numbers like [1.1, 3.3, 5.5] should be manageable, but also lists with erroneous entries like [1.1, \\"String\\", 3.0] should not break the function.","solution":"def recursive_sum(arr): Returns the sum of all numeric values in the array recursively, ignoring non-numeric entries. if not arr: return 0 first_element = arr[0] if isinstance(first_element, (int, float)): return first_element + recursive_sum(arr[1:]) else: return recursive_sum(arr[1:])"},{"question":"Create a Python recursive function to repeat a given string a specified number of times. It should take two arguments: the string to be repeated and the number of repetitions. Also, include error handling to ensure that the number of repetitions provided is a positive integer.","solution":"def repeat_string(s, n): Recursively repeats a string s a specified number of times n. :param s: String to be repeated :param n: Number of repetitions :return: Repeated string if not isinstance(n, int) or n < 0: raise ValueError(\\"Number of repetitions must be a non-negative integer.\\") if n == 0: return \\"\\" return s + repeat_string(s, n - 1)"},{"question":"Create a python script to filter an input list and return only the even numbers from the list.","solution":"def filter_even_numbers(input_list): Filters and returns only the even numbers from the input list. Args: input_list (list): A list of integers. Returns: list: A list containing only the even integers from the input list. return [num for num in input_list if num % 2 == 0]"},{"question":"Create a robust Python program that will sieve through the current contents of a directory you specify, identifying files of a particular type the user specifies (by including patterns like \\".txt\\", \\".jpg\\", etc.). To make the program more sophisticated, undertake the additional challenges: ignore files in subdirectories; calculate the checksum of the identified files for uniqueness, and handle file access issues should they occur. The program should conclude with an accurate file count and a list of those identified file names.","solution":"import os import hashlib def get_files_by_type(directory, pattern): Identifies files in the specified directory matching the pattern. Args: directory: str - The directory path to search in. pattern: str - The file type pattern to search for (e.g., \\".txt\\"). Returns: tuple: (int, list) - Number of files found and list of file names along with their checksums. files = [] for entry in os.scandir(directory): if entry.is_file() and entry.name.endswith(pattern): try: checksum = calculate_checksum(entry.path) files.append((entry.name, checksum)) except OSError as e: print(f\\"Could not read file {entry.name}: {e}\\") return len(files), files def calculate_checksum(file_path): Calculate the checksum of the file. Args: file_path: str - The path to the file. Returns: str: The calculated SHA256 checksum. sha256 = hashlib.sha256() with open(file_path, \\"rb\\") as f: for block in iter(lambda: f.read(4096), b\\"\\"): sha256.update(block) return sha256.hexdigest()"},{"question":"Design a program to solve a 9x9 Sudoku puzzle using only recursive backtracking algorithm and without using any additional data structures. The program should also validate the input Sudoku puzzle before solving it, and return an error message if the puzzle is invalid. Additionally, the program should implement a user-friendly interface that allows the user to input the Sudoku puzzle manually and display the solved puzzle in a visually appealing format.","solution":"def is_valid_sudoku(grid): def is_valid_row(row): unique_num = [num for num in row if num != 0] return len(unique_num) == len(set(unique_num)) def is_valid_col(col): unique_num = [grid[row][col] for row in range(9) if grid[row][col] != 0] return len(unique_num) == len(set(unique_num)) def is_valid_box(start_row, start_col): unique_num = [] for r in range(3): for c in range(3): num = grid[start_row + r][start_col + c] if num != 0: unique_num.append(num) return len(unique_num) == len(set(unique_num)) for i in range(9): if not is_valid_row(grid[i]) or not is_valid_col(i): return False for row in range(0, 9, 3): for col in range(0, 9, 3): if not is_valid_box(row, col): return False return True def find_empty_location(grid): for row in range(9): for col in range(9): if grid[row][col] == 0: return row, col return None def is_safe(grid, row, col, num): def is_safe_row(): return num not in grid[row] def is_safe_col(): return num not in [grid[r][col] for r in range(9)] def is_safe_box(): start_row, start_col = 3 * (row // 3), 3 * (col // 3) for r in range(3): for c in range(3): if grid[start_row + r][start_col + c] == num: return False return True return is_safe_row() and is_safe_col() and is_safe_box() def solve_sudoku(grid): empty_loc = find_empty_location(grid) if not empty_loc: return True row, col = empty_loc for num in range(1, 10): if is_safe(grid, row, col, num): grid[row][col] = num if solve_sudoku(grid): return True grid[row][col] = 0 return False def display_grid(grid): for row in grid: print(\\" \\".join(str(num) if num != 0 else '.' for num in row)) def input_sudoku(): grid = [] print(\\"Please enter the sudoku puzzle, row by row:\\") for _ in range(9): row = list(map(int, input().strip().split())) grid.append(row) return grid def main(): grid = input_sudoku() if not is_valid_sudoku(grid): print(\\"Invalid Sudoku puzzle\\") else: if solve_sudoku(grid): display_grid(grid) else: print(\\"No solution exists\\")"},{"question":"Write a Python function that takes two string inputs as arguments and outputs the strings in alphabetical order.","solution":"def sort_strings_alpha(str1, str2): Takes two string inputs and returns them in alphabetical order. Parameters: str1 (str): The first input string. str2 (str): The second input string. Returns: tuple: A tuple containing the two strings in alphabetical order. return tuple(sorted([str1, str2]))"},{"question":"Write a Python 3 program to solve a shift-based cipher. The program should apply a shift of a given number on a given message and output the ciphered message. It should also be capable of deciphering the message if given the shift value. The program should preserve the case of alphabetic characters and ignore non-alphabetic characters.","solution":"def shift_cipher(message, shift): Applies a shift of a given number on a given message. Preserves the case of alphabetic characters and ignores non-alphabetic characters. Args: message (str): The input message to be ciphered or deciphered. shift (int): The number of positions to shift. Positive for ciphering and negative for deciphering. Returns: str: The result of applying the shift to the message. def shift_character(ch, shift): if 'a' <= ch <= 'z': return chr((ord(ch) - ord('a') + shift) % 26 + ord('a')) elif 'A' <= ch <= 'Z': return chr((ord(ch) - ord('A') + shift) % 26 + ord('A')) return ch return ''.join(shift_character(c, shift) for c in message)"},{"question":"Given arrays 'arr1' and 'arr2' which contain 'n' and 'm' integers respectively, you need to write a program that identifies and returns the repeated integers between the two arrays. In addition, implement your function to instead return a single combined array with only these repeated elements and in ascending order. Try to optimize your solution in terms of time and space complexity.","solution":"def find_repeated_elements(arr1, arr2): Returns a sorted array of repeated elements between arr1 and arr2. # Convert arrays to sets to find the intersection set1 = set(arr1) set2 = set(arr2) # Find the intersection repeated_elements = set1.intersection(set2) # Convert the set to a sorted list return sorted(repeated_elements)"},{"question":"Write a script to not only determine the number of vowels in a provided string but to also calculate the frequency of each vowel. Additionally, the program should be capable of delivering an error message if the input string is not of string data-type.","solution":"def count_vowels(s): Returns the number of vowels in the provided string and the frequency of each vowel. If the input is not a string, it returns an error message. Parameters: s (str): The input string. Returns: tuple: A tuple containing the total number of vowels and a dictionary with the frequency of each vowel. if not isinstance(s, str): return \\"Error: Input is not a string.\\" vowels = 'aeiouAEIOU' vowel_count = 0 frequency = {v: 0 for v in 'aeiou'} for char in s: if char in vowels: vowel_count += 1 if char.lower() in frequency: frequency[char.lower()] += 1 return vowel_count, frequency"},{"question":"Write a Python function that efficiently finds the intersection (common elements) between any number of sets provided in a list without using built-in set functions and operations (e.g., set(), union(), intersection(), issubset(), etc.). Demonstrate the correctness of your function with test cases.","solution":"def intersection_of_sets(sets_list): Finds the intersection (common elements) between any number of sets provided in a list. This function does not use built-in set functions and operations. :param sets_list: List of sets :return: List of common elements if not sets_list: return [] # Start with all elements from the first set common_elements = list(sets_list[0]) for s in sets_list[1:]: # Create a new list for elements found in current common_elements and s new_common_elements = [] for element in common_elements: if element in s: new_common_elements.append(element) common_elements = new_common_elements # If at any point common_elements is empty, return immediately if not common_elements: return [] return common_elements"},{"question":"Given a string s and a list of queries, find the kth character of the s after applying the caesar cipher using the shift given in the queries for the respective substring [L, R] in the s.","solution":"def caesar_cipher_shift(char, shift): Helper function to shift a character by a given number using Caesar Cipher. if char.islower(): return chr((ord(char) - ord('a') + shift) % 26 + ord('a')) elif char.isupper(): return chr((ord(char) - ord('A') + shift) % 26 + ord('A')) else: return char def apply_caesar_cipher(s, queries): Applies the caesar cipher as per the given queries and finds the k-th character after each transformation. result = [] for L, R, k, shift in queries: # Substring extraction and shifting shifted_substring = ''.join(caesar_cipher_shift(s[i], shift) for i in range(L, R + 1)) # Find the k-th character (1-indexed) result.append(shifted_substring[k - 1]) return result"},{"question":"Given a set of numbers, write a Python program that returns the mean average of the numbers and the number of prime numbers in the input set. Additionally, if the set contains any numbers that are not integers, raise a ValueError with a descriptive error message.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def analyze_numbers(numbers): Returns the mean average of the numbers and the number of prime numbers in the input set. if not all(isinstance(num, int) for num in numbers): raise ValueError(\\"All elements must be integers.\\") mean_average = sum(numbers) / len(numbers) prime_count = sum(1 for num in numbers if is_prime(num)) return mean_average, prime_count"},{"question":"Hello, how can I use recursion to print the Fibonacci sequence in Python?","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) def print_fibonacci_sequence(count): Prints the Fibonacci sequence up to the given count. sequence = [fibonacci(i) for i in range(count)] print(sequence) return sequence"},{"question":"Reverse the order of elements in a given array, without using any built-in functions or creating a new array for storing the reversed elements. The solution should have a time complexity of O(n) and a space complexity of O(1).","solution":"def reverse_array(arr): Reverse the order of elements in the given array in-place. Parameters: arr (list): The input array to be reversed. Returns: list: The same array with elements in reversed order. left, right = 0, len(arr) - 1 while left < right: arr[left], arr[right] = arr[right], arr[left] left, right = left + 1, right - 1 return arr"},{"question":"Write a Python function that takes a list of integers, and for all possible non-empty subsets of the list, it calculates the sum and returns the number of subsets that sum to a target value. You need to implement this using recursion and memoization.","solution":"def count_subsets_with_sum(nums, target): Returns the count of subsets whose sum is equal to the target value. Uses recursion and memoization for efficiency. memo = {} def recurse(i, current_sum): if i == len(nums): return 1 if current_sum == target else 0 if (i, current_sum) in memo: return memo[(i, current_sum)] # include nums[i] in the subset include = recurse(i + 1, current_sum + nums[i]) # exclude nums[i] from the subset exclude = recurse(i + 1, current_sum) memo[(i, current_sum)] = include + exclude return memo[(i, current_sum)] return recurse(0, 0)"},{"question":"Write a python function which parses a block of text extracted from a PDF document of a USA state's courts case results, for courts in California the are text fields 'Court Case number', 'Filed on:', 'Case Status:', create a python function which parses this text and returns a python dictionary for one case when passed in this text with these fields, the dictionary fields are the field names and the values are the associated paragraphs","solution":"import re def parse_court_case(text): Parses a block of text and extracts 'Court Case number', 'Filed on:', and 'Case Status:' into a dictionary for a California court case. Parameters: text (str): Block of text from a PDF document of a USA state's court case results. Returns: dict: Dictionary containing the 'Court Case number', 'Filed on:', and 'Case Status:' fields. case_details = {} # Define regex patterns case_number_pattern = re.compile(r'Court Case numbers*:s*(.*)') filed_on_pattern = re.compile(r'Filed ons*:s*(.*)') case_status_pattern = re.compile(r'Case Statuss*:s*(.*)') # Search for patterns case_number_match = case_number_pattern.search(text) filed_on_match = filed_on_pattern.search(text) case_status_match = case_status_pattern.search(text) # Extract and store the matches in the dictionary if case_number_match: case_details['Court Case number'] = case_number_match.group(1).strip() if filed_on_match: case_details['Filed on'] = filed_on_match.group(1).strip() if case_status_match: case_details['Case Status'] = case_status_match.group(1).strip() return case_details"},{"question":"Write a function 'addToTuple' that takes a tuple of integers and an integer, and returns a new tuple with the integer added to the end. Also, write a function 'reverseTuple' that reverses the order of elements in a tuple. After performing these operations, serialize the results into JSON and return the serialized output. Keep in mind that tuples in Python are converted to lists when serialized into JSON. Additionally, create a test suite to confirm the correctness of your functions.","solution":"import json def addToTuple(tpl, elem): Returns a new tuple with 'elem' added to the end of 'tpl'. if not isinstance(tpl, tuple) or not isinstance(elem, int): raise TypeError(\\"First argument must be a tuple of integers and second argument must be an integer\\") return tpl + (elem,) def reverseTuple(tpl): Returns a new tuple with elements in reverse order. if not isinstance(tpl, tuple): raise TypeError(\\"Argument must be a tuple\\") return tpl[::-1] def serializeToJson(tpl1, tpl2): Takes two tuples and serializes them into JSON format. return json.dumps({\\"addedTuple\\": list(tpl1), \\"reversedTuple\\": list(tpl2)}) def processTuples(inputTuple, elem): Adds 'elem' to 'inputTuple', and also returns the reversed tuple after performing these operations. Returns the serialized JSON. added_tuple = addToTuple(inputTuple, elem) reversed_tuple = reverseTuple(inputTuple) return serializeToJson(added_tuple, reversed_tuple)"},{"question":"Design an algorithm to reverse a linked list in-place. Your algorithm should have a time complexity of O(n) and should not use any extra space or auxiliary data structures other than a constant amount of pointers. You are not allowed to modify the values inside the nodes of the linked list.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverse_linked_list(head: ListNode) -> ListNode: Reverses the linked list in-place. :param head: ListNode - The head of the linked list. :return: ListNode - The new head of the reversed linked list. prev = None current = head while current: next_node = current.next # Store next current.next = prev # Reverse current node's pointer prev = current # Move pointers one position ahead. current = next_node return prev # New head of the reversed list"},{"question":"Implement a Python function that takes in a list of integers and returns the sum of all the numbers using the reduce() function.","solution":"from functools import reduce def sum_of_list(numbers): Returns the sum of all numbers in the list using the reduce() function. return reduce(lambda x, y: x + y, numbers, 0)"},{"question":"Create an algorithm to determine if an input string is a palindrome after ignoring case sensitivity and space characters.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, ignoring case and space characters. # Normalize the string: remove spaces and convert to lower case normalized_str = ''.join(s.split()).lower() # Compare the normalized string to its reverse return normalized_str == normalized_str[::-1]"},{"question":"Design a binary expression tree for the arithmetic equation (2+3)*4, and implement a function to evaluate this expression tree. The function should also handle potential subtraction and division operations in other instances of the tree.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def evaluate_expression_tree(node): if node is None: return 0 if node.left is None and node.right is None: return int(node.value) left_val = evaluate_expression_tree(node.left) right_val = evaluate_expression_tree(node.right) if node.value == '+': return left_val + right_val elif node.value == '-': return left_val - right_val elif node.value == '*': return left_val * right_val elif node.value == '/': return left_val / right_val # Constructing the tree for the expression (2 + 3) * 4 root = TreeNode('*') root.left = TreeNode('+') root.right = TreeNode('4') root.left.left = TreeNode('2') root.left.right = TreeNode('3') evaluated_result = evaluate_expression_tree(root)"},{"question":"Write a Python program to resolve the quadratic equation where the coefficients are provided by user input. The user will input the coefficients (a, b, c) for the equation of form \`ax^2 + bx + c = 0\`.","solution":"import cmath def solve_quadratic(a, b, c): Solves the quadratic equation ax^2 + bx + c = 0 and returns the roots. if a == 0: raise ValueError(\\"Coefficient 'a' cannot be 0 in a quadratic equation.\\") # Calculate the discriminant discriminant = cmath.sqrt(b**2 - 4*a*c) # Calculating the two solutions root1 = (-b + discriminant) / (2*a) root2 = (-b - discriminant) / (2*a) return (root1, root2)"},{"question":"Create an algorithm in Python to find the longest common prefix of two strings.","solution":"def longest_common_prefix(str1, str2): Returns the longest common prefix of two strings. min_length = min(len(str1), len(str2)) for i in range(min_length): if str1[i] != str2[i]: return str1[:i] return str1[:min_length]"},{"question":"I need a Python-based chatbot that is capable of participating in the game named 'Odd one out'. It should process user provided lists of minimum three and maximum six items and identify which one doesn't belong or is the odd one out based on a pre-defined criteria. Below is a piece of erroneous code that attempts to solve the problem but fails. Your task is to identify and fix the flaws in order to create a functional chatbot.","solution":"def odd_one_out(items): Identifies the odd one out in the provided list of items based on a predefined criterion. The criterion is that the odd one out is the item that differs in type from others (int, float, str, etc.) Args: items (list): List of 3 to 6 items Returns: str: The item that is the odd one out # Check if the list length is valid if not (3 <= len(items) <= 6): raise ValueError(\\"List must contain between 3 to 6 items\\") # Group items by their types type_count = {} for item in items: item_type = type(item) if item_type not in type_count: type_count[item_type] = [] type_count[item_type].append(item) # Identify the type that has one item for item_type in type_count: if len(type_count[item_type]) == 1: return type_count[item_type][0] # If no odd-one-out is found by type, it implies all items are of the same type # We return None in this case, although this scenario should be uncommon return None"},{"question":"Create a python function which finds the intersection of two lists and returns a sorted list of the common elements. The function should also handle duplicate elements correctly.","solution":"def intersection_of_lists(list1, list2): Finds the intersection of two lists and returns a sorted list of the common elements, handling duplicate elements correctly. # Converting lists to sets to find the intersection intersection = set(list1) & set(list2) # Create a dictionary to store element counts from the intersection common_counts = {} for el in intersection: common_counts[el] = min(list1.count(el), list2.count(el)) # Generate the final sorted list result = [] for el, count in common_counts.items(): result.extend([el] * count) return sorted(result)"},{"question":"Develop a python method to evaluate if a specified number is a divisor of another number. Additionally, the function should also return all the divisors of the given number if the number is not a prime number. Implement this in a manner that ensures the code runs efficiently even for very large numbers. Below is a piece of code that attempted to solve the problem but there seems to be some errors. Have a look and identify the errors and revise the code.","solution":"import math def is_divisor_and_divisors(num, potential_divisor): Determines if potential_divisor is a divisor of num and returns all divisors of num if num is not a prime number. Parameters: num (int): The number to check for divisors. potential_divisor (int): The number to check if it is a divisor of num. Returns: tuple: A tuple containing a boolean indicating if potential_divisor is a divisor, and a list of all divisors of num if num is not prime, otherwise an empty list. if num % potential_divisor == 0: is_divisor = True else: is_divisor = False def get_all_divisors(n): divisors = set() for i in range(1, int(math.sqrt(n)) + 1): if n % i == 0: divisors.add(i) divisors.add(n // i) return sorted(divisors) divisors = get_all_divisors(num) if len(divisors) > 2: return is_divisor, divisors else: return is_divisor, [] # Example usage: # is_divisor, divisors = is_divisor_and_divisors(28, 7) # print(is_divisor) # Should print True # print(divisors) # Should print [1, 2, 4, 7, 14, 28]"},{"question":"How can I generate a random password that meets specific requirements using Python?","solution":"import random import string def generate_password(length=12): Generates a random password of specified length that includes at least one lowercase letter, one uppercase letter, one digit, and one special character. Parameters: - length (int): The length of the generated password. Default is 12. Returns: - str: The generated password. if length < 4: raise ValueError(\\"Password length must be at least 4 characters to include all required character types.\\") # Characters that will be used in the password all_characters = string.ascii_letters + string.digits + string.punctuation # Ensure at least one character from each requirement password = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase), random.choice(string.digits), random.choice(string.punctuation) ] # Fill the rest of the password length with random characters from all_characters for _ in range(length - 4): password.append(random.choice(all_characters)) # Shuffle the password list to ensure randomness and convert it to a string random.shuffle(password) return ''.join(password)"},{"question":"Create a function that takes an integer as an argument and returns its binary representation as a string. The function should handle both positive and negative integers. For negative integers, use two's complement representation for the binary conversion.","solution":"def int_to_binary_string(n, bits=32): Converts an integer to its binary representation as a string. For negative integers, use two's complement representation. Parameters: n (int): The integer to convert. bits (int): The number of bits to use for the representation (default is 32). Returns: str: The binary representation of the integer. if n < 0: n = (1 << bits) + n return bin(n)[2:].zfill(bits)"},{"question":"Given the erroneous piece of code in Python below, debug and modify it so that it performs binary search on a sorted, reversed list (a list that's sorted in descending order). Ensure to consider the complexities of maintaining array's double-ended nature.","solution":"def binary_search_desc(arr, target): Perform binary search on a sorted, reversed list (descending order). :param arr: List[int], the sorted list in descending order :param target: int, the target value to search for :return: int, the index of the target in the list, or -1 if not found left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] > target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Given a string s, write a function that returns the longest palindrome substring within the string.","solution":"def longest_palindrome_substring(s): Returns the longest palindrome substring within the string s. n = len(s) if n == 0: return \\"\\" # Initialize a table to store whether s[i:j] is a palindrome dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes max_length = 1 start = 0 for i in range(n): dp[i][i] = True # Check for sub-string of length 2. for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return s[start:start + max_length]"},{"question":"Please revise the provided code function 'ConvertToPostfix(expression)' to function correctly and convert the infix expressions to postfix notation, also commonly referred to as Reverse Polish Notation (RPN). The infix expressions that you're dealing with will only include the binary operators: addition (+), subtraction (-), multiplication (*), and division (/). It will consist of only numbers and operators, and you can assume that it will always be a valid expression. The function 'EvaluatePostfix(postfixExpression)' that you have been given needs no change. In case you need to print an error message, use the 'sys.stderr.write()' function to print errors. For better understanding of the task, evaluate the prefix expression '3 4 + 5 *' and return 35 as an example.","solution":"from collections import deque def ConvertToPostfix(expression): Converts an infix expression to a postfix expression (Reverse Polish Notation). def precedence(op): if op in ('+', '-'): return 1 if op in ('*', '/'): return 2 return 0 # Initializing an empty stack and an output list stack = deque() output = [] # Iterating over each character in the expression for char in expression: if char.isdigit(): # If the character is an operand, add it to the output list output.append(char) elif char == '(': # If the character is '(', push it onto the stack stack.append(char) elif char == ')': # If the character is ')', pop from stack to output list until '(' is encountered while stack and stack[-1] != '(': output.append(stack.pop()) stack.pop() else: # If an operator is encountered while stack and precedence(stack[-1]) >= precedence(char): output.append(stack.pop()) stack.append(char) # Popping all remaining operators from the stack while stack: output.append(stack.pop()) return ''.join(output)"},{"question":"How can I create a password generator that includes uppercase and lowercase letters as well as numbers?","solution":"import random import string def generate_password(length=8): Generates a random password containing uppercase, lowercase letters, and digits. Parameters: length (int): Length of the password to be generated (must be at least 3). Returns: str: The generated password. if length < 3: raise ValueError(\\"Password length must be at least 3\\") # Define character sets upper = string.ascii_uppercase lower = string.ascii_lowercase digits = string.digits # Ensure the password contains at least one character from each set password = [random.choice(upper), random.choice(lower), random.choice(digits)] # Fill the rest of the password length with a random selection of characters from all sets all_characters = upper + lower + digits password += random.choices(all_characters, k=length-3) # Shuffle the resulting password list to remove any predictable patterns random.shuffle(password) return ''.join(password)"},{"question":"Write a Python function called \`multiply\`(num1, num2) that takes two numbers as arguments and returns the product of the two numbers.","solution":"def multiply(num1, num2): Returns the product of two numbers. Parameters: num1 (float): The first number. num2 (float): The second number. Returns: float: The product of the two numbers. return num1 * num2"},{"question":"How can I create random integers within a specific range in Python? I want the output to be in the format of a numpy array and I'm looking for a solution that involves a function which takes two arguments, 'low' and 'high', and returns the array of random integers. I would prefer if the solution does not use loops.","solution":"import numpy as np def random_integers(low, high, size): Generates a numpy array of random integers within a specific range [low, high). Parameters: low (int): The lower bound of the range (inclusive). high (int): The upper bound of the range (exclusive). size (int): The number of random integers to generate. Returns: np.ndarray: A numpy array of random integers. return np.random.randint(low, high, size)"},{"question":"Use the re module in Python to write a function that matches a string that has an 'a' followed by zero or more characters, ending in 'b'. Additionally, the function should not match strings where 'a' or 'b' are not at the start or end respectively, and the characters in between should not include any numbers.","solution":"import re def match_a_followed_by_zero_or_more_chars_ending_in_b(s): Returns True if the string matches the pattern where it starts with 'a', followed by zero or more non-numeric characters, and ends with 'b'. Otherwise, returns False. pattern = r'^a[^0-9]*b' if re.match(pattern, s): return True return False"},{"question":"Create a python program to recursively find the maximum value in a nested list of lists","solution":"def find_max_in_nested_lists(nested_list): Recursively finds the maximum value in a nested list of lists. def helper(sublist): max_value = float('-inf') for item in sublist: if isinstance(item, list): max_value = max(max_value, helper(item)) else: max_value = max(max_value, item) return max_value return helper(nested_list)"},{"question":"Create a function in Python that takes two list of integers as parameters and returns a third list of integers which are the elements common in both lists. The function should have a time complexity of O(n), where n is the length of the longer list.","solution":"def common_elements(list1, list2): Returns a list of integers which are common in both list1 and list2. The function has a time complexity of O(n). set1 = set(list1) set2 = set(list2) common = set1.intersection(set2) return list(common)"},{"question":"Create a function named \`binary_search\` that takes a sorted list of integers \`arr\` and an integer \`target\` as inputs. The function should perform a binary search to find the index of \`target\` in \`arr\` and return a tuple containing a boolean value indicating whether the target was found and the index of the target if found, otherwise -1. The function should have a time complexity of O(log n) and space complexity of O(1).","solution":"def binary_search(arr, target): Perform a binary search to find the target in sorted list arr. Parameters: arr (list of int): A sorted list of integers. target (int): The target integer to find. Returns: tuple: A tuple containing a boolean indicating whether the target was found, and the index of the target if found, otherwise -1. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return (True, mid) elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return (False, -1)"},{"question":"Create a python function to check if dragged objects are within a grid that has a size of m*m. The function should receive the coordinates of the objects dragged and the grid size m, and return True if the objects are all inside the grid else False.","solution":"def are_objects_within_grid(coords, m): Check if all objects are within a grid of size m x m. Parameters: - coords: List of tuples representing the coordinates of the objects (x, y) - m: Size of the grid (m x m) Returns: - True if all objects are within the grid, else False for x, y in coords: if x < 0 or x >= m or y < 0 or y >= m: return False return True"},{"question":"Build a Python program to calculate and create a visual representation of the shortest path between two nodes in a weighted, undirected graph. You should make use of Dijkstra's algorithm for calculating the shortest path. The graph can have up to 100 nodes. Label the nodes in your graph as 'A' to 'Z' and 'a' to 'z'. Implement a feature that allows the user to input the nodes they want to find the path between.","solution":"import heapq import matplotlib.pyplot as plt import networkx as nx def dijkstra(graph, start, end): Implements Dijkstra's algorithm to find the shortest path in a weighted, undirected graph. Parameters: graph (dict): The graph represented as an adjacency list where the keys are nodes and values are lists of tuples (neighbor, weight). start (str): The starting node. end (str): The ending node. Returns: tuple: A tuple containing the shortest distance and the path as a list of nodes. priority_queue = [(0, start, [])] seen = set() min_dist = {start: 0} while priority_queue: (current_distance, current_node, path) = heapq.heappop(priority_queue) if current_node in seen: continue path = path + [current_node] seen.add(current_node) if current_node == end: return (current_distance, path) for neighbor, weight in graph[current_node]: distance = current_distance + weight if neighbor not in seen or distance < min_dist.get(neighbor, float('inf')): min_dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor, path)) return (float('inf'), []) def create_graph(edges): Creates a graph from a list of edges. Parameters: edges (list): A list of tuples representing edges (node1, node2, weight). Returns: dict: The graph represented as an adjacency list. graph = {} for node1, node2, weight in edges: if node1 not in graph: graph[node1] = [] if node2 not in graph: graph[node2] = [] graph[node1].append((node2, weight)) graph[node2].append((node1, weight)) return graph def visualize_graph(graph, shortest_path): Visualizes the graph and the shortest path using NetworkX and Matplotlib. Parameters: graph (dict): The graph represented as an adjacency list. shortest_path (list): The nodes in the shortest path. G = nx.Graph() for node in graph: for neighbor, weight in graph[node]: G.add_edge(node, neighbor, weight=weight) pos = nx.spring_layout(G) edge_labels = nx.get_edge_attributes(G, 'weight') nx.draw(G, pos, with_labels=True, node_color='lightblue', node_size=500, font_size=10) nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='red') path_edges = list(zip(shortest_path, shortest_path[1:])) nx.draw_networkx_edges(G, pos, edgelist=path_edges, edge_color='blue', width=2) plt.show() # Example graph edges (node1, node2, weight) edges = [ ('A', 'B', 4), ('A', 'C', 2), ('B', 'C', 5), ('B', 'D', 10), ('C', 'E', 3), ('E', 'D', 4), ('D', 'F', 11), ('E', 'F', 6) ] graph = create_graph(edges) start_node = 'A' end_node = 'F' dist, path = dijkstra(graph, start_node, end_node) print(f\\"Shortest distance from {start_node} to {end_node} is {dist} with path {path}\\") visualize_graph(graph, path)"},{"question":"Alter the following code to create a function called \\"find_largest\\" to find the largest prime number in a given list of integers. The function should return -1 if there are no prime numbers in the list. The function should also throw a ValueError if the input list is empty. The function should only use a maximum of two loops for efficiency.","solution":"def is_prime(n): Helper function to determine if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def find_largest(lst): Finds the largest prime number in a given list. Returns -1 if there are no prime numbers. Throws ValueError if the input list is empty. if not lst: raise ValueError(\\"Input list is empty\\") largest_prime = -1 for number in lst: if is_prime(number): if number > largest_prime: largest_prime = number return largest_prime"},{"question":"Write a serial function that takes an array of integers and reverses the order of the elements, but with the following additional constraints: you cannot use any built-in array reversal functions or methods, you cannot create a new array to store the reversed elements, you cannot use any additional data structures (such as a stack or queue), and you must reverse the elements in-place with O(1) space complexity. Additionally, you must ensure that the time complexity of your algorithm is O(n), where n is the number of elements in the array.","solution":"def reverse_array(arr): Reverses the order of the elements in the array in-place with O(1) space complexity and O(n) time complexity. Parameters: arr (list): The list of integers to be reversed. Returns: The input list with elements reversed in-place. left = 0 right = len(arr) - 1 while left < right: # Swap the elements at left and right indices arr[left], arr[right] = arr[right], arr[left] left += 1 right -= 1 return arr"},{"question":"Write a Python function to check if an element is present in a given list or not. The function should return the index of the element if it is present in the list, otherwise, it should return -1. Additionally, the function should only use recursion to search for the element in the list. The list can contain duplicate elements. The function should also keep track of the number of occurrences of the element in the list and return the total number of occurrences along with the index.","solution":"def recursive_search(lst, element, index=0, count=0, first_index=-1): Recursively searches for an element in the list. Parameters: - lst: List in which to search for the element. - element: Element to search for. - index: Current index in recursion (default is 0). - count: Current count of occurrences found (default is 0). - first_index: Index of the first occurrence of element (default is -1). Returns: - A tuple (index of first occurrence, total count of occurrences). If the element is not found, the index of first occurrence should be -1. if index == len(lst): return (first_index, count) if lst[index] == element: count += 1 if first_index == -1: first_index = index return recursive_search(lst, element, index + 1, count, first_index)"},{"question":"Write a code to implement insertion sort on a given list. The list contains positive integers only. The maximum length of the list is 100,000. The integers in the list range from 1 to 10,000,000.","solution":"def insertion_sort(arr): Performs an insertion sort on a given list of positive integers. The list can have a length up to 100,000 and integers ranging from 1 to 10,000,000. Parameters: arr (list): The list to be sorted. Returns: list: The sorted list. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Write a function that uses recursion to return the factorial of a given number. Additionally, include error handling to account for scenarios where an invalid input is provided, such as a negative number or a non-integer data type.","solution":"def factorial(n): Returns the factorial of a given number n using recursion. Raises a ValueError if n is negative or not an integer. if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 return n * factorial(n - 1)"},{"question":"Given a linked list and an integer N, rotate the linked list to the right by N places and return the new head of the list.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotate_right(head, n): if not head or n == 0: return head # Find the length of the list and the last node length = 1 last_node = head while last_node.next: last_node = last_node.next length += 1 # Compute the effective rotations needed n = n % length if n == 0: return head # Find the new end after rotation new_end_position = length - n - 1 new_end = head for _ in range(new_end_position): new_end = new_end.next # Save new head and rearrange connections new_head = new_end.next new_end.next = None last_node.next = head return new_head"},{"question":"Write a program that determines the data type of the following string: '2947'. The program should only use built-in functions and not rely on any external libraries or packages. Additionally, ensure that the program can handle strings of any length and output the full name of the data type, such as 'integer' or 'float'.","solution":"def determine_data_type(input_string): Determines the data type of the given string. - If the input string can be converted to an integer, return 'integer'. - If the input string can be converted to a float, return 'float'. - Otherwise, return 'string'. try: int(input_string) return 'integer' except ValueError: pass try: float(input_string) return 'float' except ValueError: pass return 'string'"},{"question":"Develop a Python algorithm for distinguishing prime numbers from a given list of integers. The function should sift through the array, identify prime numbers, and compile them into a new list. Additionally, it should incorporate functionality to sort these primes in reverse without using in-built Python sorting functions. Your solution should include mechanisms for array manipulation and prime number determination.","solution":"def is_prime(num): Checks if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5)+1, 2): if num % i == 0: return False return True def reverse_sort(arr): Sorts an array in reverse order without using built-in sorting functions. for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] < arr[j]: arr[i], arr[j] = arr[j], arr[i] return arr def find_and_sort_primes(arr): Finds prime numbers in a list and sorts them in reverse order. primes = [num for num in arr if is_prime(num)] return reverse_sort(primes)"},{"question":"Write code to compute and print the median element of an array of integers.","solution":"def find_median(arr): Function to find and return the median of an array of integers. Parameters: arr (list): List of integers. Returns: float: The median of the array. if not arr: raise ValueError(\\"Array is empty\\") arr_sorted = sorted(arr) n = len(arr_sorted) if n % 2 == 1: # If odd, return the middle element median = arr_sorted[n // 2] else: # If even, return the average of the two middle elements mid1, mid2 = arr_sorted[n // 2 - 1], arr_sorted[n // 2] median = (mid1 + mid2) / 2 return median"},{"question":"Write a python function \`reorder_positive_integers\` that takes in a list as its argument and returns a new list that only includes the positive integers from the original list, but in reversed order. If the input list does not contain any positive integers, the function should return an empty list.","solution":"def reorder_positive_integers(lst): Returns a list of only the positive integers from the original list, but in reversed order. If the input list does not contain any positive integers, returns an empty list. return [x for x in reversed(lst) if isinstance(x, int) and x > 0]"},{"question":"In the realm of algorithm in Python, what is the most efficient technique to check if an element is present in an unsorted singly linked list?","solution":"class Node: def __init__(self, value): self.value = value self.next = None def search_in_linked_list(head, target): Checks if an element is present in an unsorted singly linked list. Args: head (Node): The head node of the linked list. target (Any): The value to be searched in the linked list. Returns: bool: True if the target is found in the linked list, otherwise False. current = head while current is not None: if current.value == target: return True current = current.next return False"},{"question":"Write a nested for loop in Python to print the first 10 prime numbers.","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def get_first_n_primes(n): Get the first n prime numbers. primes = [] num = 2 while len(primes) < n: if is_prime(num): primes.append(num) num += 1 return primes def print_first_10_primes(): Prints the first 10 prime numbers. primes = get_first_n_primes(10) for prime in primes: print(prime)"},{"question":"A GeoJSON file contains features that outline the boundary of Riverdale, a fictional town with real-world coordinates. If Archie's oreo radius is within the outer limit of the town boundary, he can operate normally. Your task is to write a Python function that validates any given GeoJSON file to ensure that it contains a unique feature collection and that each feature has a valid polygon geometry enclosing the fictional \\"Riverdale\\". The function should validate each feature to determine whether the geometry type is Polygon or MultiPolygon and verify if even the slightest part of the oreo delivery radius overlaps with the area of \\"Riverdale\\". The function should return True if the GeoJSON file is valid, and False otherwise.","solution":"import json def is_polygon_or_multipolygon(geometry): Checks if the geometry type is either Polygon or MultiPolygon. return geometry.get('type') in ['Polygon', 'MultiPolygon'] def validate_geojson(geojson_data): Validates that the GeoJSON file is a valid feature collection for \\"Riverdale\\". Each feature must contain a valid Polygon or MultiPolygon geometry. try: data = json.loads(geojson_data) if isinstance(geojson_data, str) else geojson_data if data.get('type') != 'FeatureCollection': return False features = data.get('features', []) if not features or not isinstance(features, list): return False for feature in features: geometry = feature.get('geometry') if not geometry or not is_polygon_or_multipolygon(geometry): return False return True except (json.JSONDecodeError, TypeError): return False"},{"question":"Create a program that determines if a given string is a palindrome or not. A palindrome is a string that reads the same forwards as backwards. For example, \\"racecar\\", \\"kayak\\", \\"radar\\".","solution":"def is_palindrome(s): Determines if a given string is a palindrome. A palindrome is a word that reads the same backwards as forwards. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. return s == s[::-1]"},{"question":"Is there a way to create a program that calculates the shortest path between two places using Dijkstra's algorithm?","solution":"import heapq def dijkstra(graph, start, end): Calculate the shortest path between the start and end nodes using Dijkstra's algorithm. :param graph: A dictionary where keys are node labels and values are dictionaries of neighboring node labels and edge weights. :param start: The starting node label. :param end: The ending node label. :return: The shortest path and its total weight as a tuple (path, weight). priority_queue = [(0, start, [])] # (cost, current_node, path) visited = set() min_distances = {start: 0} while priority_queue: current_cost, current_node, path = heapq.heappop(priority_queue) if current_node in visited: continue path = path + [current_node] visited.add(current_node) if current_node == end: return (path, current_cost) for neighbor, weight in graph[current_node].items(): if neighbor not in visited: old_cost = min_distances.get(neighbor, float('inf')) new_cost = current_cost + weight if new_cost < old_cost: min_distances[neighbor] = new_cost heapq.heappush(priority_queue, (new_cost, neighbor, path)) return ([], float('inf')) # In case there is no path from start to end"},{"question":"Write a Python algorithm to search a list of numbers for the index of the given element without using built in Python functions or libraries, such as .index() or numpy. Additionally, implement the algorithm using a Binary Search method, without converting the list to another data type. Ensure your solution handles cases where the element does not exist in the list.","solution":"def binary_search(arr, target): Perform binary search to find the index of the target in the list. If the target is not found, return -1. Arguments: arr -- list of numbers, must be sorted target -- element to search for Returns: index of the target in the list or -1 if target is not found left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Create a function in Python to split a given string into a list of strings using a comma as a delimiter. However, make sure to handle cases where there are multiple consecutive spaces in the string and remove any leading or trailing spaces.","solution":"def split_and_clean_string(input_string): Splits the input string by commas into a list of strings, removes leading or trailing spaces, and handles multiple consecutive spaces. # First, split by commas parts = input_string.split(',') # Remove leading and trailing spaces from each part and handle consecutive spaces clean_parts = [part.strip() for part in parts] return clean_parts"},{"question":"Create a python script to check if a substring exists in a given string. Additionally, the program should be able to determine the number of times the substring appears in the string and the indexes at which it starts in the original string.","solution":"def find_substring_details(main_string, substring): Check if a substring exists in the main string. Return a dictionary with: 'exists': Boolean indicating if the substring exists. 'count': Number of times the substring appears. 'indexes': List of starting indexes where substring is found. if not substring: return { 'exists': False, 'count': 0, 'indexes': [] } exists = substring in main_string count = main_string.count(substring) indexes = [] index = main_string.find(substring) while index != -1: indexes.append(index) index = main_string.find(substring, index + 1) return { 'exists': exists, 'count': count, 'indexes': indexes }"},{"question":"I want a completely random sequence of 10 numbers with the rules: No digit should repeat itself in the entire sequence and no number should start with a zero. Create an optimized python function for it without using inbuilt python libraries.","solution":"def generate_unique_sequence(): Generates a random sequence of 10 digits where no digit repeats and no number starts with zero. import random # Importing random to generate the sequence digits = list('123456789') # Possible digits for the start full_digits = list('0123456789') # All possible digits random.shuffle(digits) # Shuffle the digit list random.shuffle(full_digits) # Shuffle the full digit list sequence = digits[:1] # Start with first digit digits.extend(full_digits) # Combine both lists and shuffle again random.shuffle(digits) for digit in digits: if digit not in sequence: sequence.append(digit) if len(sequence) == 10: # Stop when we reach 10 digits break return ''.join(sequence)"},{"question":"How can an AI generate a code for exchanging greetings between two people in different languages?","solution":"def greet_in_language(name, language): Generate a greeting message for a person in the specified language. Parameters: name (str): The name of the person to greet. language (str): The language in which to greet. Returns: str: The greeting message. greetings = { 'English': 'Hello', 'Spanish': 'Hola', 'French': 'Bonjour', 'German': 'Hallo', 'Italian': 'Ciao' } greeting = greetings.get(language, 'Hello') return f\\"{greeting}, {name}!\\""},{"question":"Write a Python code snippet that can determine if a given 2D array has unique column values. The 2D array can be of any dimensions, but the number of rows will be equal for all columns. Also, the elements of this 2D array are integers in the range [0, 1000).","solution":"def has_unique_column_values(arr): Determine if a given 2D array has unique column values for each column. Args: arr (list of list of int): The 2D array to check. Returns: bool: True if each column has unique values, False otherwise. if not arr or not arr[0]: return True # Consider an empty array as having unique column values. num_columns = len(arr[0]) for col in range(num_columns): seen_values = set() for row in arr: val = row[col] if val in seen_values: return False seen_values.add(val) return True"},{"question":"Plot the Fourier Series of a square wave using Python","solution":"import numpy as np import matplotlib.pyplot as plt def square_wave_fourier_series(t, n_terms): Compute the Fourier Series approximation of a square wave. Parameters: t (numpy array): Time values at which to evaluate the series. n_terms (int): Number of terms to use in the series. Returns: numpy array: Fourier series approximation of the square wave at the given times. f = np.zeros_like(t) for n in range(1, n_terms + 1, 2): f += np.sin(2 * np.pi * n * t) / n return (4 / np.pi) * f # Example usage for plotting if __name__ == \\"__main__\\": # Time variable t = np.linspace(0, 1, 1000) # Number of terms in Fourier series n_terms = 10 # Compute Fourier series f_series = square_wave_fourier_series(t, n_terms) # Actual square wave for comparison square_wave = np.sign(np.sin(2 * np.pi * t)) # Plotting plt.figure(figsize=(10, 4)) plt.plot(t, f_series, label=f'Fourier Series Approximation (n={n_terms})') plt.plot(t, square_wave, label='Square Wave', linestyle='--') plt.xlabel('Time') plt.ylabel('Amplitude') plt.title('Fourier Series of a Square Wave') plt.legend() plt.grid(True) plt.show()"},{"question":"Implement a linear search algorithm and a binary search algorithm to find the index of a specific character in a sorted char array, and compare their efficiencies.","solution":"def linear_search(arr, target): Performs a linear search to find the index of the target character in the array. for index, char in enumerate(arr): if char == target: return index return -1 def binary_search(arr, target): Performs a binary search to find the index of the target character in the sorted array. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1 import time def compare_efficiency(arr, target): Compares the efficiency of linear search and binary search in terms of execution time. start_time = time.time() linear_search_result = linear_search(arr, target) linear_search_time = time.time() - start_time start_time = time.time() binary_search_result = binary_search(arr, target) binary_search_time = time.time() - start_time return { \\"linear_search_result\\": linear_search_result, \\"linear_search_time\\": linear_search_time, \\"binary_search_result\\": binary_search_result, \\"binary_search_time\\": binary_search_time }"},{"question":"Create a python function called \\"word_count\\" that takes a string called \\"text\\" as its argument and returns the number of words that the string contains. However, the function should also take into account cases where multiple consecutive spaces, tabs, or new lines are used as separators between words. In addition to this, the function should ignore any leading or trailing spaces, tabs, or new lines that may be present in the input string. For example, if the input string is \\" This is a test \\", the function should only count four words.","solution":"def word_count(text): Returns the number of words in the input string, accounting for multiple consecutive spaces, tabs, or new lines as separators, and ignoring leading or trailing spaces, tabs, or new lines. # Strip leading and trailing whitespace, then split by any whitespace words = text.strip().split() return len(words)"},{"question":"Extract a timestamp from a given string and convert it to a datetime object in Python. The timestamp will be in the format \\"YYYY-MM-DD HH:MM:SS\\". Additionally, handle any potential exceptions that may occur during the conversion process. Implement a function called \\"convert_to_datetime\\" that takes the string as an argument and returns the corresponding datetime object. The function should also validate that the string is in the correct format before performing the conversion.","solution":"from datetime import datetime def convert_to_datetime(timestamp_str): Takes a timestamp string in the format \\"YYYY-MM-DD HH:MM:SS\\" and converts it to a datetime object. Args: timestamp_str (str): A string representing date and time in the format \\"YYYY-MM-DD HH:MM:SS\\". Returns: datetime: A datetime object corresponding to the given timestamp string. Raises: ValueError: If the timestamp string is not in the correct format. try: # Define the expected timestamp format format_str = \\"%Y-%m-%d %H:%M:%S\\" # Attempt to parse the timestamp string to a datetime object return datetime.strptime(timestamp_str, format_str) except ValueError as e: # Raise an error if parsing fails raise ValueError(f\\"Invalid timestamp format: {timestamp_str}. Expected format 'YYYY-MM-DD HH:MM:SS'\\") from e"},{"question":"Encode the following string \\"Hello World!\\" using a Base64 encoder. Moreover, implement a function that can encode any input string in Base64 and decode it back to the original string. Ensure your solution is robust against errors, handling any non-string type inputs gracefully.","solution":"import base64 def encode_base64(input_string): Encodes the given input string in Base64. if not isinstance(input_string, str): raise ValueError(\\"Input must be a string\\") # Convert string to bytes byte_data = input_string.encode(\\"utf-8\\") # Base64 encode the bytes encoded_data = base64.b64encode(byte_data) # Return the encoded string return encoded_data.decode(\\"utf-8\\") def decode_base64(encoded_string): Decodes the given Base64 encoded string back to the original string. if not isinstance(encoded_string, str): raise ValueError(\\"Input must be a string\\") # Convert encoded string to bytes byte_data = encoded_string.encode(\\"utf-8\\") # Base64 decode the bytes decoded_data = base64.b64decode(byte_data) # Return the decoded string return decoded_data.decode(\\"utf-8\\") # Example usage for the given task encoded_string = encode_base64(\\"Hello World!\\")"},{"question":"Notice the sequence of both evens and odds in these two Python expressions: \\"x % 2 == 0\\" and \\"x % 2 == 1\\". Can you write a concise Python code that takes a list of integers and returns two lists; one contains the numbers at the even indices from the original list and the other contains those at odd ones, all while adhering to the sequence given?","solution":"def separate_even_odd_indices(lst): Separates the elements of the list into two lists: - One containing the elements at even indices. - One containing the elements at odd indices. evens = [lst[i] for i in range(len(lst)) if i % 2 == 0] odds = [lst[i] for i in range(len(lst)) if i % 2 == 1] return evens, odds"},{"question":"Establish a Python function that calculates the total number of leap years within a specified range of years, including the start and end year. The function should validate if the input years are in a logical sequence (start year is less than the end year). This function should also effectively handle any possible exceptions, including non-integer and non-numeric inputs. The function should also be able to handle large ranges, up to the maximum range of 32-bit signed integers.","solution":"def count_leap_years(start_year, end_year): Returns the total number of leap years between start_year and end_year, inclusive. A leap year is exactly divisible by 4 except for end-of-century years, which must be divisible by 400. Parameters: start_year (int): The starting year. end_year (int): The ending year. Returns: int: The number of leap years within the inclusive range. if not isinstance(start_year, int) or not isinstance(end_year, int): raise ValueError(\\"Both start_year and end_year must be integers.\\") if start_year > end_year: raise ValueError(\\"start_year must be less than or equal to end_year.\\") def is_leap_year(year): Helper function to check if a year is a leap year. if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return True return False leap_year_count = 0 for year in range(start_year, end_year + 1): if is_leap_year(year): leap_year_count += 1 return leap_year_count"},{"question":"Create a dictionary called \\"inventory\\" and add the following key-value pairs: \\"book\\" with a quantity of 20, \\"pen\\" with a quantity of 50, and \\"notebook\\" with a quantity of 10. Also, write a function called \\"update_inventory\\" that takes in two arguments: the current inventory dictionary and a dictionary of new items with their quantities. The function should update the inventory dictionary with the new items and quantities, but if an item already exists in the inventory, the function should add the new quantity to the existing quantity. The function should return the updated inventory dictionary.","solution":"def update_inventory(existing_inventory, new_items): Updates the inventory dictionary with new items and their quantities. Parameters: existing_inventory (dict): The current inventory dictionary. new_items (dict): Dictionary of new items with their quantities. Returns: dict: Updated inventory dictionary. for item, quantity in new_items.items(): if item in existing_inventory: existing_inventory[item] += quantity else: existing_inventory[item] = quantity return existing_inventory # Initializing the inventory dictionary inventory = { \\"book\\": 20, \\"pen\\": 50, \\"notebook\\": 10 }"},{"question":"Given a list of numbers and a rotation count, write a Python function to rotate the list by the given count clockwise. Additionally, provide an erroneous code snippet as a reference to find and fix issues.","solution":"def rotate_list(arr, k): Rotates a list by the given count k clockwise. if not arr or k <= 0: return arr k = k % len(arr) # Handle rotation greater than list length return arr[-k:] + arr[:-k]"},{"question":"Create a Python function named \\"is_palindrome\\" that takes a string as input and returns True if the string is a palindrome, and False otherwise. A palindrome is a word, phrase, or sequence that reads the same backward as forward.","solution":"def is_palindrome(s): Returns True if the string s is a palindrome, otherwise returns False. # Removing any spaces and converting to lowercase for uniform comparison cleaned_string = ''.join(s.split()).lower() # Checking if the string is equal to its reverse return cleaned_string == cleaned_string[::-1]"},{"question":"Develop a Python program to calculate and print the first 10 Fibonacci numbers in reverse order, but also include exception handling for potential errors. The fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones. Usually starting with 0 and 1, the sequence goes like: 0, 1, 1, 2, 3, 5, 8, 13,...","solution":"def fibonacci_reverse(n): Returns the first n Fibonacci numbers in reverse order. try: if n <= 0: raise ValueError(\\"The number of elements n must be a positive integer.\\") fibonacci_sequence = [0, 1] for i in range(2, n): fibonacci_sequence.append(fibonacci_sequence[-1] + fibonacci_sequence[-2]) return fibonacci_sequence[:n][::-1] except Exception as e: return str(e) def first_10_fibonacci_reverse(): return fibonacci_reverse(10) # Example usage if __name__ == \\"__main__\\": print(first_10_fibonacci_reverse())"},{"question":"How can I generate code to retrieve the top K most frequently occurring words in a given text?","solution":"from collections import Counter import re def top_k_frequent_words(text, k): Retrieve the top K most frequently occurring words in a given text. Args: text (str): The input text. k (int): The number of top frequent words to retrieve. Returns: List[str]: List of top K frequent words sorted by frequency and lexographically. # Normalize the text to lowercase and use regex to find words words = re.findall(r'bw+b', text.lower()) # Count the frequency of each word word_counts = Counter(words) # Get the top k most common words (sorted by frequency and then lexographically) top_k_words = sorted(word_counts.items(), key=lambda item: (-item[1], item[0])) # Return the list of words only return [word for word, count in top_k_words[:k]]"},{"question":"Create a web-app using Flask that adds two numbers entered by the user and display the result when a button is clicked.","solution":"from flask import Flask, request, render_template_string app = Flask(__name__) html = <!doctype html> <html> <head> <title>Add Two Numbers</title> </head> <body> <h1>Add Two Numbers</h1> <form method=\\"post\\" action=\\"/\\"> <label for=\\"a\\">Enter first number:</label> <input type=\\"text\\" id=\\"a\\" name=\\"a\\"><br><br> <label for=\\"b\\">Enter second number:</label> <input type=\\"text\\" id=\\"b\\" name=\\"b\\"><br><br> <input type=\\"submit\\" value=\\"Add\\"> </form> {% if result is not none %} <h2>Result: {{ result }}</h2> {% endif %} </body> </html> @app.route('/', methods=[\\"GET\\", \\"POST\\"]) def index(): result = None if request.method == \\"POST\\": a = request.form.get('a') b = request.form.get('b') try: result = float(a) + float(b) except ValueError: result = \\"Invalid input. Please enter numbers.\\" return render_template_string(html, result=result) if __name__ == '__main__': app.run(debug=True)"},{"question":"Implement an efficient algorithm to find the number of occurrences of a particular character in a given string. The string can have a maximum length of 10^6 characters. The time complexity of your algorithm should be O(n), where n is the length of the string, and the space complexity should be O(1). Additionally, you are not allowed to use any built-in functions or methods for string manipulation or iteration.","solution":"def count_occurrences(s, char): Count occurrences of a character in a given string. Parameters: s (str): The input string. char (str): The character to count in the string. Returns: int: The number of occurrences of \`char\` in \`s\`. count = 0 for c in s: if c == char: count += 1 return count"},{"question":"Write a Python function to compute the Fibonacci series up to n using a generator and return the sequence in reverse order.","solution":"def fibonacci_reverse(n): Generates the Fibonacci series up to n and returns it in reverse order. def fibonacci(): a, b = 0, 1 while a <= n: yield a a, b = b, a + b sequence = list(fibonacci()) return sequence[::-1]"},{"question":"Create a Python function to compute the factorial of a given number using both iterative and recursive approaches. Additionally, write a function to find the factorial of a range of numbers (e.g., from 1 to the given number). Optimize the code for time complexity and ensure to add necessary checks to prevent invalid input.","solution":"def factorial_iterative(n): Compute factorial of a number using iterative approach. Returns -1 for invalid input. if not isinstance(n, int) or n < 0: return -1 result = 1 for i in range(2, n + 1): result *= i return result def factorial_recursive(n): Compute factorial of a number using recursive approach. Returns -1 for invalid input. if not isinstance(n, int) or n < 0: return -1 if n == 0 or n == 1: return 1 return n * factorial_recursive(n - 1) def factorial_range(m, n): Compute the factorial of numbers from m to n-1 inclusive. Returns a list of factorials. Returns [-1] if inputs are invalid. if not isinstance(m, int) or not isinstance(n, int) or m < 1 or n < 1 or m > n: return [-1] return [factorial_iterative(i) for i in range(m, n)]"},{"question":"Write a routine to count the number of elements in a doubly linked list.","solution":"class ListNode: def __init__(self, value=0, next=None, prev=None): self.value = value self.next = next self.prev = prev def count_elements(head): Counts the number of elements in a doubly linked list. :param head: The head node of the doubly linked list. :return: The count of elements in the list. count = 0 current = head while current: count += 1 current = current.next return count"},{"question":"Rewrite the following code to handle an input that can be a list, a tuple, or a number. If the input is a list or a tuple, return the sum of all the elements inside it. If the input is a number, return its square. Additionally, if the input is a list or a tuple, check if all the elements inside are either integers or floats, and if not, raise a TypeError.","solution":"def process_input(input_data): Process the input data. If the input is a list or tuple, return the sum of all the elements inside it. If the input is a number, return its square. If the input is a list or tuple, check if all elements inside are either integers or floats, and if not, raise a TypeError. if isinstance(input_data, (list, tuple)): if all(isinstance(x, (int, float)) for x in input_data): return sum(input_data) else: raise TypeError(\\"All elements in the list or tuple must be integers or floats.\\") elif isinstance(input_data, (int, float)): return input_data ** 2 else: raise TypeError(\\"Input must be a number, list, or tuple.\\")"},{"question":"Given two lists, list1 and list2, with m and n elements respectively, write a function to create a new list that contains the elements that are unique to each list. Do not use Python's built-in set function or any external libraries. Handle lists up to 10^4 elements in length.","solution":"def unique_elements(list1, list2): Returns a new list containing elements that are unique to each of the input lists. :param list1: First list of elements :param list2: Second list of elements :return: List of elements unique to list1 and list2 unique_list1 = [item for item in list1 if item not in list2] unique_list2 = [item for item in list2 if item not in list1] return unique_list1 + unique_list2"},{"question":"Given a list of integers, create a function that prints the elements of the list that are divisible by both 5 and 7, while also sorting the resulting elements in descending order. Additionally, handle any potential errors that may occur during the function execution.","solution":"def find_divisible(numbers): Returns the elements of the list that are divisible by both 5 and 7 in descending order. if not isinstance(numbers, list): raise ValueError(\\"Input is not a list\\") for num in numbers: if not isinstance(num, int): raise ValueError(f\\"List contains a non-integer value: {num}\\") divisible_elements = [num for num in numbers if num % 35 == 0] return sorted(divisible_elements, reverse=True)"},{"question":"Design an edge detecting filter for images, which not only identifies edges based on pixel intensity changes, but also determines the orientation of the edges in terms of direction and angle. Additionally, implement a function to quantify the strength of the edge based on its intensity gradient.","solution":"import numpy as np import cv2 def detect_edge(image): Detects edges in the image using Sobel operators and returns the edge magnitude and orientation. Parameters: image (numpy.ndarray): Grayscale input image. Returns: edge_magnitude (numpy.ndarray): Magnitude of the edges. edge_orientation (numpy.ndarray): Orientation of the edges. # Compute gradients along the X and Y axis grad_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3) grad_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3) # Compute magnitude and orientation of the gradient edge_magnitude = np.sqrt(grad_x**2 + grad_y**2) edge_orientation = np.arctan2(grad_y, grad_x) * 180.0 / np.pi return edge_magnitude, edge_orientation def edge_strength(magnitude): Quantifies the strength of the edge based on its intensity gradient magnitude. Parameters: magnitude (numpy.ndarray): Magnitude of the edges. Returns: strength (float): Overall edge strength. return np.sum(magnitude) / magnitude.size"},{"question":"Rewrite these two Python functions to knit them into one consolidated function. The objective is to absorb the functionalities of both, 'remove_multiples', which purges elements from 'list_one' that are multiples of 'divisor' and 'add_multiple', which adds the multiple of 'divisor' up to 'limit' to the 'list_one'. Additionally, ensure this merged function operates in a sequence that first removes multiples of 'divisor' from 'list_one', then adds the positive multiples of 'divisor' up to 'limit' into the same list.","solution":"def modify_list(list_one, divisor, limit): Removes elements from 'list_one' that are multiples of 'divisor', and then adds the positive multiples of 'divisor' up to 'limit' to 'list_one'. # Remove elements that are multiples of divisor list_one = [x for x in list_one if x % divisor != 0] # Add multiples of divisor up to limit for multiple in range(divisor, limit + 1, divisor): list_one.append(multiple) return list_one"},{"question":"Develop a Python program which accepts an array of whole numbers as input and calculates the median. For an even-numbered list, instead of selecting the average of the two middle numbers, design your program to choose the lower value.","solution":"def median(numbers): Returns the median of the provided array of whole numbers. If the list has an even number of elements, returns the lower of the two middle elements. numbers.sort() length = len(numbers) middle = length // 2 if length % 2 == 0: return numbers[middle - 1] else: return numbers[middle]"},{"question":"Create a function in Python to find the highest common factor (HCF) of two numbers, but you cannot use the modulus operator (%) or any built-in Python functions that directly calculate the HCF.","solution":"def hcf(a, b): Returns the highest common factor (HCF) of two numbers a and b. # Starting with the smaller number as the potential HCF smaller = min(a, b) while smaller > 0: if a // smaller * smaller == a and b // smaller * smaller == b: return smaller smaller -= 1"},{"question":"Write a program that parses an XML document and prints each element tag with its corresponding text content and attributes. Make sure to include support for nested elements and attributes.","solution":"import xml.etree.ElementTree as ET def parse_and_print_xml(xml_string): Parses the given XML string and prints each element's tag, text content, and attributes. Parameters: xml_string (str): A string representation of the XML document. Returns: List of tuples: Each tuple contains (tag, text, attributes) def recurse_tree(element): result = [(element.tag, element.text.strip() if element.text else '', element.attrib)] for child in element: result.extend(recurse_tree(child)) return result root = ET.fromstring(xml_string) return recurse_tree(root)"},{"question":"Develop a program that evaluates whether an input string is a palindrome or a non-palindrome. Test your program using the string \\"madam\\". Additionally, provide a proof-of-concept for an erroneous function provided below that fails to correctly identify palindromes. Discuss why the function is incorrect and how it can be improved.","solution":"def is_palindrome(input_string): Returns True if input_string is a palindrome, False otherwise. normalized_str = ''.join(filter(str.isalnum, input_string)).lower() return normalized_str == normalized_str[::-1] # Erroneous function definition def erroneous_is_palindrome(input_string): Incorrect implementation of palindrome check return input_string == input_string[::-1] # Explanation why erroneous_is_palindrome is incorrect: # The erroneous_is_palindrome function fails to correctly identify palindromes when the input string contains # non-alphanumeric characters or has case differences. It compares the input string directly to its reverse, # without normalizing it first."},{"question":"Implement a strange function 'strange_sort_list(lst)' which takes a list of integers, and sorts them in a peculiar manner. The peculiarity of this sort is first taking the smallest number, then the largest of the rest, then the smallest of the rest and so on.","solution":"def strange_sort_list(lst): Sorts a list in a peculiar manner: smallest, then largest, then next smallest, then next largest, and so on. sorted_lst = sorted(lst) result = [] while sorted_lst: result.append(sorted_lst.pop(0)) # Smallest if sorted_lst: result.append(sorted_lst.pop(-1)) # Largest return result"},{"question":"The Fibonacci sequence is defined by the starting values f(0) = 0, f(1) = 1, and the recurrence relation f(n) = f(n-1) + f(n-2). However, suppose that every third Fibonacci number starting from f(2) is doubled. Thus, f(2) = 2 * (f(1) + f(0)) = 2. How would you formulate a function in Python to generate the nth element of this modified sequence?","solution":"def modified_fibonacci(n): Returns the nth element of the modified Fibonacci sequence. In this sequence, every third Fibonacci number starting from f(2) is doubled. if n == 0: return 0 elif n == 1: return 1 else: fib = [0, 1] for i in range(2, n+1): if i % 3 == 2: fib.append(2 * (fib[i-1] + fib[i-2])) else: fib.append(fib[i-1] + fib[i-2]) return fib[n]"},{"question":"How can I generate a valid IP address in Python from a given set of numbers? For example, if I have four numbers, I can generate the IP address as '192.168.1.1'. The numbers to generate the IP address can be less or more than four. Can you provide a solution to this?","solution":"def generate_ip(*numbers): Generates a valid IP address from a given set of numbers. Only considers the first 4 numbers and fills missing numbers with 0s. Args: *numbers (int): A variable number of integers to generate the IP address from. Returns: str: A valid IP address. # Ensure the provided numbers are within the 0-255 range and there are exactly 4 elements nums = [min(255, max(0, n)) for n in numbers[:4]] # Fill with zeros if less than 4 numbers provided while len(nums) < 4: nums.append(0) # Return the formatted IP address return '.'.join(map(str, nums))"},{"question":"write a python function to calculate the number of possible transcription initiation sites given two promoter sequences","solution":"def count_common_transcription_sites(seq1, seq2): Calculate the number of possible transcription initiation sites given two promoter sequences. A transcription initiation site is defined as a position where both sequences contain the same nucleotide. :param seq1: First promoter sequence (string) :param seq2: Second promoter sequence (string) :return: Number of possible transcription initiation sites if len(seq1) != len(seq2): raise ValueError(\\"Sequences must be of the same length\\") return sum(1 for a, b in zip(seq1, seq2) if a == b)"},{"question":"Given three arrays of integers, write an efficient algorithm to find the common elements among all three, ensuring that your solution does not use built-in Python set intersection methods for comparison. Additionally, optimize the solution to run in linear time complexity.","solution":"def find_common_elements(arr1, arr2, arr3): Find common elements among three sorted arrays without using Python set intersection. The solution should run in linear time complexity. common_elements = [] i, j, k = 0, 0, 0 while i < len(arr1) and j < len(arr2) and k < len(arr3): if arr1[i] == arr2[j] == arr3[k]: common_elements.append(arr1[i]) i += 1 j += 1 k += 1 elif arr1[i] < arr2[j]: i += 1 elif arr2[j] < arr3[k]: j += 1 else: k += 1 return common_elements"},{"question":"Given two strings s1 and s2, write a Python program to find whether s1 is an anagram of s2, considering case sensitivity and whitespace. Additionally, implement the program without using the built-in sort function.","solution":"def are_anagrams(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. Considers case sensitivity and whitespace. if len(s1) != len(s2): return False char_count = {} for char in s1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s2: if char in char_count: char_count[char] -= 1 else: return False return all(count == 0 for count in char_count.values())"},{"question":"Using List Comprehension, create a function that takes a list of strings as an argument and returns a new list that contains only the strings that are anagrams of each other.","solution":"def find_anagrams(word_list): Returns a list that contains only the strings that are anagrams of each other. anagram_groups = {} for word in word_list: sorted_word = ''.join(sorted(word)) if sorted_word in anagram_groups: anagram_groups[sorted_word].append(word) else: anagram_groups[sorted_word] = [word] result = [word for words in anagram_groups.values() if len(words) > 1 for word in words] return result"},{"question":"Devise a function that transforms a linked list into a binary search tree (BST), ensuring the final output adheres to the BST data structure. This function should have the capability to handle nested linked lists and convert them into nested BSTs. It should also be adept at managing a mix of linked lists and other data types within the same BST.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sorted_linked_list_to_bst(head): Transforms a sorted linked list into a balanced binary search tree. Nested linked lists within will be converted into nested BSTs. def find_middle(node): prev_ptr = None slow_ptr = node fast_ptr = node while fast_ptr and fast_ptr.next: prev_ptr = slow_ptr slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next.next if prev_ptr: prev_ptr.next = None return slow_ptr def linked_list_to_bst(node): if not node: return None mid = find_middle(node) root = TreeNode(mid.val) if node == mid: return root root.left = linked_list_to_bst(node) root.right = linked_list_to_bst(mid.next) return root return linked_list_to_bst(head)"},{"question":"Create a Python script that simulates a simple calculator capable of performing addition, subtraction, multiplication, division, and modulo operations. The script should accept two numbers and an operator as inputs and display the result. Ensure to handle potential errors such as division by zero.","solution":"def simple_calculator(a, b, operator): Perform a calculation based on the operator provided. Parameters: a (float): First operand. b (float): Second operand. operator (str): A string representing the operation ('+', '-', '*', '/', '%'). Returns: float: The result of the calculation. Raises: ValueError: If the operator is not recognized or if there is a division by zero. if operator == '+': return a + b elif operator == '-': return a - b elif operator == '*': return a * b elif operator == '/': if b == 0: raise ValueError(\\"Cannot divide by zero.\\") return a / b elif operator == '%': if b == 0: raise ValueError(\\"Cannot modulo by zero.\\") return a % b else: raise ValueError(\\"Invalid operator. Supported operators are '+', '-', '*', '/', '%'.\\")"},{"question":"Expand the existing Python program that identifies prime numbers less than 1000, using the Sieve of Eratosthenes algorithm, to also include an algorithm comparison with the Trial Division method. Additionally, create an interface that allows users to input a range of numbers and select which algorithm to use, and visually compare the execution times of both methods.","solution":"import time import numpy as np def sieve_of_eratosthenes(limit): Identify prime numbers less than the limit using the Sieve of Eratosthenes algorithm. sieve = np.ones(limit, dtype=bool) sieve[:2] = False for i in range(2, int(np.sqrt(limit)) + 1): if sieve[i]: sieve[i*i:limit:i] = False return np.nonzero(sieve)[0] def trial_division(limit): Identify prime numbers less than the limit using the Trial Division method. primes = [] for num in range(2, limit): is_prime = all(num % i != 0 for i in range(2, int(np.sqrt(num)) + 1)) if is_prime: primes.append(num) return primes def identify_primes(limit, algorithm='sieve'): Identify prime numbers less than the provided limit using the specified algorithm. if algorithm == 'sieve': return sieve_of_eratosthenes(limit) elif algorithm == 'trial': return trial_division(limit) else: raise ValueError(\\"Unsupported algorithm. Use 'sieve' or 'trial'.\\") def compare_algorithms(limit): Compare the execution times of the Sieve of Eratosthenes and Trial Division methods. start_time = time.time() primes_sieve = identify_primes(limit, 'sieve') sieve_time = time.time() - start_time start_time = time.time() primes_trial = identify_primes(limit, 'trial') trial_time = time.time() - start_time return sieve_time, trial_time, primes_sieve, primes_trial"},{"question":"Implement an iterative solution to calculate the nth Fibonacci number using constant space complexity. Additionally, optimize the time complexity of your solution to O(log n) by using matrix exponentiation.","solution":"def fibonacci(n): Returns the nth Fibonacci number using an iterative approach with constant space complexity and optimized O(log n) time complexity using matrix exponentiation. if n == 0: return 0 if n == 1: return 1 def multiply_matrices(m1, m2): return [ [m1[0][0] * m2[0][0] + m1[0][1] * m2[1][0], m1[0][0] * m2[0][1] + m1[0][1] * m2[1][1]], [m1[1][0] * m2[0][0] + m1[1][1] * m2[1][0], m1[1][0] * m2[0][1] + m1[1][1] * m2[1][1]] ] def matrix_power(matrix, power): if power == 1: return matrix if power % 2 == 0: half_power = matrix_power(matrix, power // 2) return multiply_matrices(half_power, half_power) else: return multiply_matrices(matrix, matrix_power(matrix, power - 1)) F = [[1, 1], [1, 0]] result = matrix_power(F, n - 1) return result[0][0]"},{"question":"Take an integer input and print the number of digits in the given number. Next, check if the number is a palindrome number or not. A number is considered to be a palindrome number if the number reads the same backward as forward (for instance, 121, 12321). Also, write the logic to handle negative numbers. The program should establish and print whether the resulting number is even or odd.","solution":"def analyze_number(n): Analyze the given integer n to determine the number of digits, if it's a palindrome, and whether the number is even or odd. Returns a tuple of three values: - Number of digits in the absolute value of n. - Boolean indicating if the absolute value of n is a palindrome. - String indicating if the absolute value of n is 'even' or 'odd'. abs_n = abs(n) num_str = str(abs_n) # Number of digits num_digits = len(num_str) # Check if palindrome is_palindrome = (num_str == num_str[::-1]) # Check if even or odd if abs_n % 2 == 0: even_odd = 'even' else: even_odd = 'odd' return num_digits, is_palindrome, even_odd"},{"question":"Implement a custom defined length function that works with strings. This function should count the number of characters in a string accurately, regardless of whether the string contains single-byte or multi-byte (Unicode) characters. Compare its output with the built-in len() function of Python for the strings provided below.","solution":"def custom_length(string): Custom function to return the number of characters in a string. count = 0 for char in string: count += 1 return count def compare_length_with_builtin(strings): Compare the custom length function with the built-in len function for a list of strings. Parameters: strings (list): List of strings to compare lengths. Returns: list: List of tuples containing string, custom_length result, and len function result. results = [] for string in strings: custom_len = custom_length(string) builtin_len = len(string) results.append((string, custom_len, builtin_len)) return results"},{"question":"Create a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string. The function should have a time complexity of O(n+m), where n and m are the lengths of the two strings respectively.","solution":"def is_subsequence(s1, s2): Checks if all characters of s1 appear in s2 in the same order. iter_s2 = iter(s2) return all(char in iter_s2 for char in s1)"},{"question":"Create a function to generate a random password of a given length. The password must include at least one uppercase letter, one lowercase letter, one digit, and one special character from the list ['!', '@', '#', '', '%', '^', '&', '*']. Additionally, the password must not contain any repeating characters.","solution":"import random import string def generate_password(length): Generates a random password of a given length. The password will include at least one uppercase, one lowercase letter, one digit, and one special character. No characters will be repeated in the password. if length < 4: raise ValueError(\\"Password length must be at least 4\\") special_characters = ['!', '@', '#', '', '%', '^', '&', '*'] # Ensure password meets the minimum requirements password_characters = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits), random.choice(special_characters) ] all_characters = string.ascii_letters + string.digits + \\"\\".join(special_characters) # Fill the rest of the password while len(password_characters) < length: next_char = random.choice(all_characters) if next_char not in password_characters: password_characters.append(next_char) random.shuffle(password_characters) return ''.join(password_characters)"},{"question":"Generate a whitespace and punctuation-insensitive function in Python. The function should check if a given string is a pangram — a phrase that contains every letter of the alphabet. For instance, \\"The five box jersey zip code thru just winksvyqx\\" is a pangram because it contains all the letters of the alphabet.","solution":"import string def is_pangram(input_str): Checks if the input string is a pangram (contains every letter of the alphabet at least once). Ignores whitespace and punctuation, and is case-insensitive. alphabet_set = set(string.ascii_lowercase) input_set = set(input_str.lower()) # Remove characters that are not in the alphabet filtered_set = {char for char in input_set if char in string.ascii_lowercase} return alphabet_set == filtered_set"},{"question":"The following code creates an empty list and then asks the user for input. It then appends the input to the list. The function will end when the user enters 'q' which will then print out the list. However, I want the list to reset to being empty after it's printed to the user, which is not happening when I run this code. I ended up resorting to creating a global blank list to bypass this but I feel like there should be an alternative and more elegant solution since creating \\"dummy data\\" or bypasses doesn't seem very efficient. How can I get this code to print the user inputs after they enter 'q' and once they want to make another list they can.","solution":"def collect_input(): user_inputs = [] while True: user_input = input(\\"Enter something (or 'q' to quit): \\") if user_input == 'q': print(user_inputs) return user_inputs.append(user_input)"},{"question":"Given two sets, set1 and set2, write a Python program to find the union of the two sets, set1 and set2 without using the union() function.","solution":"def union_sets(set1, set2): Returns the union of two sets without using the union() function. Parameters: set1 (set): First set. set2 (set): Second set. Returns: set: Union of set1 and set2. result = set1.copy() for element in set2: result.add(element) return result"},{"question":"Create a list comprehension that prints each pair in a given list of tuples only if the first element of the pair is a palindrome string and the second element is a prime number.","solution":"def is_prime(n): Checks if a number is a prime number. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def is_palindrome(s): Checks if a string is a palindrome. return s == s[::-1] def filter_tuples(tuples_list): Filters the list of tuples to include only those where the first element is a palindrome string and the second element is a prime number. return [(s, n) for s, n in tuples_list if is_palindrome(s) and is_prime(n)]"},{"question":"Propose a Python code that computes the average value of an arbitrary list of floating-point numbers. Consider dealing with potential issues like empty lists.","solution":"def compute_average(numbers): Returns the average value of a list of floating-point numbers. If the list is empty, returns None. :param numbers: List of floating-point numbers :return: Average value or None if list is empty if not numbers: return None return sum(numbers) / len(numbers)"},{"question":"Write a recursive Python function to print numbers from N to 1 in reverse order, where N can be up to 10^5. Also, implement error handling for cases where N is less than 1 or not an integer.","solution":"def print_reverse(N): Prints numbers from N to 1 in reverse order. Raises a ValueError if N is less than 1 or not an integer. if not isinstance(N, int): raise ValueError(\\"Input must be an integer.\\") if N < 1: raise ValueError(\\"Input must be greater than or equal to 1.\\") def recurse(n): if n == 0: return print(n) recurse(n - 1) recurse(N)"},{"question":"Write a Python program to insert a given string at the beginning of all items in a list and at the end of each item.","solution":"def insert_at_beginning_and_end(lst, string): Inserts a given string at the beginning of all items in a list and at the end of each item. Parameters: lst (list): The original list of strings string (str): The string to be inserted at the beginning and end of each item in the list Returns: list: A new list with the modified strings return [string + item + string for item in lst]"},{"question":"Use logical operators in Python to check if either one or both of two given numbers, let's say 5 and 9, are greater than 3, but not both at the same time. Additionally, explain the difference between short-circuit operators and logical operators in Python during your implementation.","solution":"def check_numbers(a, b): Checks if either one or both of the given numbers (a and b) are greater than 3, but not both at the same time. return (a > 3 or b > 3) and not (a > 3 and b > 3) # Explanation: # The expression (a > 3 or b > 3) checks if either a or b is greater than 3. # The expression (a > 3 and b > 3) checks if both a and b are greater than 3. # Combining these with 'and not' ensures that only one of the conditions can be true at the same time. # Short-circuit operators (and, or, not) stop evaluating expressions as soon as the result is determined. # For example, in the expression (a > 3 or b > 3), if 'a > 3' is true, 'b > 3' will not be evaluated because the result is already true. # On the other hand, logical operators like '==' or '!=' do not short-circuit and always evaluate both sides."},{"question":"Given a list of integers, write a Python program to create a new list that contains the logarithm (base 10) of each element from the original list. Additionally, include exception handling for scenarios where the original list might contain non-positive numbers, as logarithms for these do not exist. Your program should either skip these elements or report them in some way. You may also assume that the list will contain only integers.","solution":"import math def logarithm_base_10(input_list): Returns a new list containing the logarithm (base 10) of each positive element from the input list. Skips non-positive elements. Args: input_list (list): A list of integers Returns: list: A new list with logarithmic values of positive integers result_list = [] for num in input_list: if num > 0: result_list.append(math.log10(num)) else: print(f\\"Skipping non-positive number: {num}\\") return result_list"},{"question":"Develop a Python function that accepts three parameters, two of them being lists of integers with the same length, and the third being an integer \\"n\\". The function should return the combination of the total of both lists' integers if the total is a multiple of \\"n\\". If there are no totals that are multiples of \\"n\\", the function should return -1.","solution":"def combine_lists_multiples(lst1, lst2, n): Returns the combined sum of lst1 and lst2 if the sum is a multiple of n, otherwise returns -1. Parameters: lst1 (list of int): First list of integers. lst2 (list of int): Second list of integers. n (int): Integer to check if the sum of the lists is a multiple of. Returns: int: Combined sum of lst1 and lst2 if the sum is a multiple of n, otherwise -1. total = sum(lst1) + sum(lst2) if total % n == 0: return total else: return -1"},{"question":"Write the Python code to create a dictionary with keys 1,2,3 and values 'a','b','c'. Also, write a function that takes in two parameters: a dictionary and a key. The function should return the value corresponding to the input key from the dictionary. If the key is not present in the dictionary, the function should return 'Key not found'. Additionally, the function should use only a single line of code and cannot use any conditional statements or loops.","solution":"# Creating the dictionary with keys and values. my_dict = {1: 'a', 2: 'b', 3: 'c'} def get_value(dictionary, key): Returns the value corresponding to the input key from the dictionary. If the key is not present in the dictionary, returns 'Key not found'. return dictionary.get(key, 'Key not found')"},{"question":"Develop a computational routine that converts an input temporal notation into the standard American time format. Your routine should also appropriately handle leap years and.dst (Daylight Saving Time). The input can be 24 Hour Format, UTC time, or in different time zones. Additionally, conduct robust error checking to ensure that the input string is well-formed and correctly formatted. If not, your routine should return a meaningful error.","solution":"from datetime import datetime import pytz def convert_to_american_time(time_str, input_format, timezone): Converts the input time string to the standard American time format. :param time_str: The time string to be converted. :param input_format: The format of the input time string. :param timezone: The timezone of the input time string. :return: The converted time string in American format (HH:MM AM/PM). try: # Parse the input time string with the given input format dt = datetime.strptime(time_str, input_format) # Set the appropriate timezone input_tz = pytz.timezone(timezone) dt = input_tz.localize(dt) # Convert to American timezone, for example, 'America/New_York' american_tz = pytz.timezone('America/New_York') dt_american = dt.astimezone(american_tz) # Convert to American time format american_time_str = dt_american.strftime(\\"%I:%M %p\\") return american_time_str except ValueError as e: return f\\"Error: {str(e)}\\" except Exception as e: return f\\"An unexpected error occurred: {str(e)}\\""},{"question":"Write a program in Python that takes a list, tuple, set, dictionary, integer, float, string, boolean, or NoneType object as input and prints its elements in reverse order if it is a list, tuple, or set. If it is a dictionary, print the keys in reverse order. For an integer, float or string, print them as is. For a boolean value, print its opposite. If the input is None, print \\"None\\".","solution":"def reverse_or_print(input_object): This function takes an input of various types and prints their elements in reverse order for: - list, tuple or set: elements in reverse order - dictionary: keys in reverse order - boolean: print the opposite - None: print \\"None\\" - integer, float, string: print them as is if isinstance(input_object, (list, tuple, set)): print(list(input_object)[::-1]) elif isinstance(input_object, dict): print(list(input_object.keys())[::-1]) elif isinstance(input_object, bool): print(not input_object) elif input_object is None: print(\\"None\\") else: print(input_object)"},{"question":"Given a list of words, create a function that returns the index of the last occurrence of the word that contains a specific substring. If no word in the list contains the substring, return -1. Additionally, the function should only consider words that are at least 5 characters long and have at least two vowels in them.","solution":"def last_occurrence_with_substring(words, substring): Returns the index of the last occurrence of a word that contains the specific substring, is at least 5 characters long and has at least two vowels. If no such word is found, returns -1. def is_valid_word(word): vowels = set('aeiouAEIOU') return len(word) >= 5 and sum(1 for char in word if char in vowels) >= 2 for i in range(len(words) - 1, -1, -1): if substring in words[i] and is_valid_word(words[i]): return i return -1"},{"question":"I have a string and I need to find the upper case letters and numeric digits within the string. How can I design a function to accomplish this?","solution":"def find_uppercase_and_digits(s): Returns a tuple of two lists: first containing uppercase letters and second containing digits in the string. uppercase_letters = [char for char in s if char.isupper()] digits = [char for char in s if char.isdigit()] return (uppercase_letters, digits)"},{"question":"Design an algorithm that sorts an array of integers using the bubble sort technique. Additionally, implement a check to ensure the array has unique values, and handle negative integers and large numbers (10^9).","solution":"def bubble_sort_unique(arr): Sorts an array of integers using the bubble sort technique. Additionally ensures that the array contains unique values. Handles negative integers and large numbers up to 10^9. if len(arr) != len(set(arr)): raise ValueError(\\"Array must contain unique values\\") n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Write a function called \`sum_primes\` that takes in a list of integers and returns the sum of all prime numbers in the list. If the input list is empty or does not contain any prime numbers, the function should return 0.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def sum_primes(lst): Returns the sum of all prime numbers in the list. return sum(filter(is_prime, lst))"},{"question":"I need help with a Python code snippet. I want to take a sentence and output the frequency count of characters occurring in pairs. For instance, if I had the sentence \\"hello\\", I want the output to show the frequency of each pair of adjacent characters. Could you provide me with a code snippet to achieve this?","solution":"from collections import defaultdict def pair_frequency(sentence): Returns the frequency count of adjacent character pairs in the input sentence. :param sentence: A string for which to compute the character pair frequencies. :return: A dictionary with pairs of characters as keys and their frequency counts as values. pair_count = defaultdict(int) for i in range(len(sentence) - 1): pair = sentence[i:i+2] pair_count[pair] += 1 return dict(pair_count)"},{"question":"Create a Python program that performs a task. The task should involve defining a function that takes in an array of integers and returns a new array where each element is the product of all the elements in the original array except for the current element. Ensure that your solution uses only constant extra space without using division.","solution":"def product_except_self(nums): Given an array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i]. n = len(nums) # Initialize the result array with 1s result = [1] * n # Initialize prefix and postfix products prefix = 1 postfix = 1 # Calculate prefix products and store in result for i in range(n): result[i] = prefix prefix *= nums[i] # Calculate postfix products and update result for i in range(n - 1, -1, -1): result[i] *= postfix postfix *= nums[i] return result"},{"question":"Write a version of the following function in Python language: concat(x,y). This function concatenates an integer and a string, in x and y respectively, while converting the integer into a string.","solution":"def concat(x, y): Concatenates an integer 'x' and a string 'y', converting 'x' to a string. return str(x) + y"},{"question":"Generate a 255 character alphanumeric string with no repeated characters. Additionally, provide a function that checks if the generated string meets the requirements.","solution":"import random import string def generate_unique_alphanumeric_string(length=255): Generates a unique alphanumeric string of the given length with no repeated characters. If the length exceeds the available number of unique alphanumeric characters, it raises a ValueError. if length > 62: raise ValueError(\\"Cannot generate a unique alphanumeric string longer than 62 characters as there are only 62 unique alphanumeric characters.\\") alphanumeric_chars = string.ascii_letters + string.digits return ''.join(random.sample(alphanumeric_chars, length)) def is_unique_alphanumeric_string(s): Checks if the given string is an alphanumeric string with unique characters. return len(s) == len(set(s)) and all(c in string.ascii_letters + string.digits for c in s)"},{"question":"Software developer is implementing a function in his code that requires randomly selecting a character from a large string. The size of the string can be quite large, up to 1 million characters. The developer wants to select any character from the string with the same probability. The code should be efficient, minimizing both time complexity and space complexity.","solution":"import random def select_random_char(large_string): Selects a random character from the given large string. Parameters: large_string (str): A large string from which to select a random character. Returns: str: A randomly selected character from the large string. if not large_string: raise ValueError(\\"The input string must not be empty.\\") index = random.randint(0, len(large_string) - 1) return large_string[index]"},{"question":"As an exercise in computational randomness, create a Python program that generates a list of N random numbers between 1 and 1000 where N is an input by the user. Subsequently, shuffle this list and save the result. Then, write a line of code to print the 3rd element of this shuffled list. Ensure you import the necessary modules and use functions provided in the random module to achieve this task.","solution":"import random def generate_and_shuffle(N): Generates a list of N random numbers between 1 and 1000, shuffles the list, and returns the list and its 3rd element. if N < 3: raise ValueError(\\"N must be at least 3 to get the 3rd element.\\") random_numbers = [random.randint(1, 1000) for _ in range(N)] random.shuffle(random_numbers) return random_numbers, random_numbers[2] # Example usage: # shuffled_list, third_element = generate_and_shuffle(10) # print(third_element)"},{"question":"Suppose you have two sorted arrays, and you are asked to merge them. Write a function that implements this in an efficient way, without using additional memory to hold the merged array. Do this in place, by rearranging the inputs. Provide a brief explanation of your code along with its time and space complexity.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays arr1 and arr2 into arr1 in place, assuming arr1 has enough extra space at the end to hold the combined elements of arr1 and arr2. m = len(arr1) - len(arr2) # the number of initial elements in arr1 n = len(arr2) # the number of elements in arr2 # Start from the end of both arrays and merge into the end of arr1. while m > 0 and n > 0: if arr1[m - 1] > arr2[n - 1]: arr1[m + n - 1] = arr1[m - 1] m -= 1 else: arr1[m + n - 1] = arr2[n - 1] n -= 1 # If there are remaining elements in arr2, copy them to arr1. while n > 0: arr1[n - 1] = arr2[n - 1] n -= 1 # Example usage: # arr1 = [1, 3, 5, 0, 0, 0] # arr2 = [2, 4, 6] # merge_sorted_arrays(arr1, arr2) # arr1 is now [1, 2, 3, 4, 5, 6]"},{"question":"How can I create a text file to store a grocery list using Python? I want to be able to add items to the list and check them off as I go shopping. Can you provide some sample Shell cmd code to accomplish this?","solution":"def create_grocery_list(filename): Creates a new grocery list file. with open(filename, 'w') as file: file.write(\\"Grocery Listn\\") file.write(\\"============n\\") def add_item(filename, item): Adds an item to the grocery list file. with open(filename, 'a') as file: file.write(f\\"[ ] {item}n\\") def check_off_item(filename, item): Checks off an item in the grocery list file. with open(filename, 'r+') as file: lines = file.readlines() file.seek(0) file.truncate(0) for line in lines: if line.strip() == f\\"[ ] {item}\\": file.write(f\\"[x] {item}n\\") else: file.write(line)"},{"question":"Write a function in Python that takes in two arguments: an array of integers and a target integer to find in the array. The function should implement a binary search algorithm to find the index of the target integer in the array.","solution":"def binary_search(arr, target): Perform binary search on a sorted array to find the index of the target integer. Parameters: arr (list): Sorted list of integers target (int): Target integer to find in the array Returns: int: Index of the target integer if found, otherwise -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"Design a Python function, which accepts an array comprised solely of integer values, as its parameter. This function's duty is to examine and analyze the given array, with the ultimate goal of outputting a True signal if the array's structure is symmetric or palindromic in nature. For instance, invoking this function with a parameter like [1, 2, 3, 2, 1] should result in True.","solution":"def is_symmetric(arr): Returns True if the array is symmetric (palindromic), False otherwise. return arr == arr[::-1]"},{"question":"Create a program that implements the quicksort algorithm to sort a list of integers in non-decreasing order. The program should also determine the minimum, maximum, mean, median, and mode of the list.","solution":"from collections import Counter from statistics import mean, median, mode def quicksort(arr): Sorts a list of integers using the quicksort algorithm. if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) def calculate_statistics(arr): Calculates the minimum, maximum, mean, median, and mode of a list of integers. sorted_arr = quicksort(arr) min_value = sorted_arr[0] max_value = sorted_arr[-1] mean_value = mean(sorted_arr) median_value = median(sorted_arr) # To handle multiple modes, we use Counter and extract the most common elements counter = Counter(sorted_arr) mode_value = [k for k, v in counter.items() if v == max(counter.values())] return { 'min': min_value, 'max': max_value, 'mean': mean_value, 'median': median_value, 'mode': mode_value }"},{"question":"Create a function that takes in a list of integers and returns a set where no duplicates will be present. Additionally, you should ensure that the set is ordered in ascending order. The function should have a time complexity of O(n log n), where n is the length of the input list.","solution":"def unique_sorted_set(lst): Takes a list of integers and returns a set with no duplicates, sorted in ascending order. Args: lst (list): A list of integers. Returns: set: A set of unique integers in ascending order. return set(sorted(lst))"},{"question":"Write a piece of code that prints out the length of the longest hangul mora in a given word. A hangul mora is defined as a single unit of Korean pronunciation, represented by a single character.","solution":"def longest_hangul_mora_length(word): Returns the length of the longest Hangul mora in a given word. Since each Hangul mora is represented by one character, the length is 1 for all valid Hangul characters. # Verify that the input word is a string if not isinstance(word, str): raise ValueError(\\"Input must be a string\\") # Define Hangul Unicode range HANGUL_START = 0xAC00 HANGUL_END = 0xD7A3 max_length = 0 for char in word: if HANGUL_START <= ord(char) <= HANGUL_END: max_length = 1 # Since each Hangul mora is one character long return max_length"},{"question":"As a Python developer, you've been tasked with creating a program that simulates a simple text game. In this game, the user must input a keyword, and the program will interject that keyword into a pre-written story. The catch is, the program must also parse another keyword that the user inputs, and replace all instances of a third keyword in the story with the user's second input. As an added challenge, you must also include a function that generates a random error message when the user inputs something incorrect, rather than allowing the program to crash. Can you create a program that fulfills all of these requirements?","solution":"import random def insert_keyword(story, keyword, insert_point): Inserts the user's keyword at the specified insert point in the story. return story.replace(insert_point, keyword) def replace_keyword(story, old_keyword, new_keyword): Replaces all instances of the old keyword with the new keyword in the story. return story.replace(old_keyword, new_keyword) def random_error(): Generates a random error message. error_messages = [ \\"Oops, something went wrong!\\", \\"Error: Invalid input provided.\\", \\"Please try again later.\\", \\"Hmm, that doesn't seem right. Check your inputs.\\", \\"Unexpected input! Please retry.\\" ] return random.choice(error_messages) def process_story(story, keyword, insert_point, old_keyword, new_keyword): Processes the story by inserting the keyword and replacing another keyword. try: story_with_inserted_keyword = insert_keyword(story, keyword, insert_point) final_story = replace_keyword(story_with_inserted_keyword, old_keyword, new_keyword) return final_story except Exception as e: return random_error()"},{"question":"Given a string, write a Python function to check if it is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward. In this context, you can ignore case sensitivity, spaces, and punctuation. Also, provide a function to test your palindrome checker with a set of predefined strings: \`[\\"Madam, in Eden, I'm Adam\\", \\"A man, a plan, a canal: Panama\\", \\"Hello\\"]\`. Return \`True\` for palindromes and \`False\` for non-palindromes.","solution":"import re def is_palindrome(s): Check if the provided string is a palindrome. Parameters: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Remove case sensitivity, spaces, and non-alphanumeric characters cleaned_string = re.sub(r'[^A-Za-z0-9]', '', s).lower() # Check if the cleaned string reads the same forward and backward return cleaned_string == cleaned_string[::-1]"},{"question":"Given a stack with the operations of push, pop, and min, design a data structure that supports an additional operation max which should be performed in O(1) time complexity.","solution":"class StackWithMinMax: def __init__(self): self.stack = [] self.min_stack = [] self.max_stack = [] def push(self, value): self.stack.append(value) if not self.min_stack or value <= self.min_stack[-1]: self.min_stack.append(value) else: self.min_stack.append(self.min_stack[-1]) if not self.max_stack or value >= self.max_stack[-1]: self.max_stack.append(value) else: self.max_stack.append(self.max_stack[-1]) def pop(self): if not self.stack: return None self.min_stack.pop() self.max_stack.pop() return self.stack.pop() def min(self): if not self.min_stack: return None return self.min_stack[-1] def max(self): if not self.max_stack: return None return self.max_stack[-1]"},{"question":"How do I create an iterator that yields the kth smallest element from a list of lists, without sorting the entire thing? The lists can have different lengths, and the elements are integers. The goal is to have O(N log k) time complexity, where N is the total number of elements across all lists.","solution":"import heapq def kth_smallest_iterator(lists, k): Generates k-th smallest elements from the lists of lists. # Create a min-heap to keep track of elements min_heap = [] # Initialize the heap with the first element of each list, keeping track of which list they came from for i, lst in enumerate(lists): if lst: heapq.heappush(min_heap, (lst[0], i, 0)) # (value, list index, element index within the list) count = 0 while min_heap and count < k: value, list_idx, element_idx = heapq.heappop(min_heap) yield value count += 1 next_element_idx = element_idx + 1 # If the next element exists in the same list, push it into the heap if next_element_idx < len(lists[list_idx]): next_value = lists[list_idx][next_element_idx] heapq.heappush(min_heap, (next_value, list_idx, next_element_idx))"},{"question":"Write a Python function called \`merge_and_count\` that takes in two sorted lists of integers, \`list1\` and \`list2\`, as input parameters. The function should merge the two lists into a single list and return the number of times the integer \`x\` occurs in the merged list. If \`x\` is not provided as an argument, the function should return the count of the integer \`0\`.","solution":"def merge_and_count(list1, list2, x=0): Merges two sorted lists and returns the count of the integer x in the merged list. If x is not provided, the count of 0 is returned. merged_list = list1 + list2 merged_list.sort() return merged_list.count(x)"},{"question":"In Python, write a function that interfaces with a SQLite database to calculate the median age of students in each class. Your function should consider only those students who have at least 3 years of learning in the class. The function should be part of a class with methods in Object-Oriented Programming style and should handle all necessary error checking.","solution":"import sqlite3 from statistics import median class StudentDatabase: def __init__(self, db_name): self.conn = sqlite3.connect(db_name) self.cursor = self.conn.cursor() def calculate_median_age(self): Calculates the median age of students in each class who have at least 3 years of learning in the class. Returns a dictionary where the key is the class and the value is the median age. result = {} try: self.cursor.execute( SELECT class, age FROM students WHERE years_in_class >= 3 ) rows = self.cursor.fetchall() if not rows: return result class_age = {} for class_name, age in rows: if class_name not in class_age: class_age[class_name] = [] class_age[class_name].append(age) for class_name, ages in class_age.items(): result[class_name] = median(ages) except sqlite3.Error as e: print(f\\"Database error: {e}\\") except Exception as e: print(f\\"General error: {e}\\") return result def close(self): self.conn.close()"},{"question":"Given a list of JSON strings, write a function that converts each string into a dictionary using 'json.loads()'. Then for each dictionary, check if '_id' key exists. If it does, convert its value into a string if it's not already. Ensure integrity of the '_id' by checking that no two objects have the same '_id' value. Throw an error if there is a duplicate '_id' value.","solution":"import json class DuplicateIDError(Exception): pass def process_json_strings(json_strings): Converts a list of JSON strings into dictionaries. Ensures the '_id' key exists and is unique. Converts the '_id' to string if it's not already. Arguments: json_strings -- list of JSON strings Returns: List of processed dictionaries id_set = set() processed_dicts = [] for json_str in json_strings: dictionary = json.loads(json_str) if '_id' in dictionary: _id = dictionary['_id'] if not isinstance(_id, str): dictionary['_id'] = str(_id) if dictionary['_id'] in id_set: raise DuplicateIDError(f\\"Duplicate '_id' found: {dictionary['_id']}\\") id_set.add(dictionary['_id']) processed_dicts.append(dictionary) return processed_dicts"},{"question":"Given two different erroneous implementations of a program, that aims to detect whether a character is an uppercase letter or not in different programming languages. Analyse the given code, identify the errors, deduce the correct algorithm, then successfully implement a correct responsive function in Python programming language. The function should not only check if a single character is uppercase, but also handle cases where multiple characters, including strings, are inputted. In such scenarios, your function should return the count of all uppercase letters in the input.","solution":"def count_uppercase(input_data): This function takes a single character or a string as input and returns: - True if the input is a single uppercase character. - False if the input is a single non-uppercase character. - The count of uppercase characters if the input is a string with multiple characters. Args: input_data (str): A single character or a string. Returns: bool or int: True/False for single character input, or the count of uppercase letters for string input. if len(input_data) == 1: return input_data.isupper() elif len(input_data) > 1: return sum(1 for char in input_data if char.isupper()) else: raise ValueError(\\"Input should be a non-empty string.\\")"},{"question":"Write a recursive function to compute the n-th Fibonacci number using memoization to improve performance.","solution":"def fibonacci(n, memo=None): Returns the n-th Fibonacci number using memoization. if memo is None: memo = {} if n in memo: return memo[n] if n <= 0: return 0 elif n == 1: return 1 else: memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo) return memo[n]"},{"question":"Write a Python function that reverse the order of the alphabets in a given string and compare it with the original string to check if it's a palindrome. If it is, return \\"Palindrome\\", if not, return the reversed string in upper case.","solution":"def reverse_and_check_palindrome(input_string): Reverses the order of alphabets in the input string and checks if it is a palindrome. If it is a palindrome, returns \\"Palindrome\\". Otherwise, returns the reversed string in upper case. reversed_string = input_string[::-1] if reversed_string == input_string: return \\"Palindrome\\" else: return reversed_string.upper()"},{"question":"Write a Python generator function that outputs the prime factors of a given number, in ascending order. It should handle numbers as large as 2^50, so use an efficient algorithm. Also, provide a check function to verify the correctness of your solution with several data points.","solution":"def prime_factors(n): Generator function that yields the prime factors of a given number n in ascending order. # Handle the factor of 2 separately while n % 2 == 0: yield 2 n //= 2 # Handle odd factors factor = 3 while factor * factor <= n: while n % factor == 0: yield factor n //= factor factor += 2 # If n becomes a prime number greater than 2 if n > 2: yield n"},{"question":"Define a recursive function in Python that calculates the factorial of a given non-negative integer. In addition, implement error handling for situations where an invalid input (non-integer, negative integer) is provided.","solution":"def factorial(n): Returns the factorial of a given non-negative integer n. Raises ValueError for invalid inputs (non-integer or negative integer). if not isinstance(n, int): raise ValueError(\\"Input must be an integer.\\") if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 else: return n * factorial(n - 1)"},{"question":"Write a program that take a 4 digit string as input and check that if the digit four appears consecutively repeated inside the string or not. If the digit four appears consecutively equal or more than twice then the output is true else false.","solution":"def has_consecutive_fours(s): Function to check if the digit '4' appears consecutively in the input string for two or more times. Parameters: s (str): 4-digit string to be checked Returns: bool: True if '444' or more is in the string, False otherwise return '444' in s or '4444' in s"},{"question":"Write a Python function called 'odd_number_exponentiation' that takes in two arguments - a number and an exponent. The function should verify that the number is an integer, the exponent is non-negative and both are odd numbers. If all conditions are met, it should return the result of raising the number to the power of the exponent. If the conditions are not met, it should raise appropriate exceptions.","solution":"def odd_number_exponentiation(number, exponent): Raises a number to the power of an exponent if both are odd numbers. Verifies that: - number is an integer and an odd number - exponent is an odd number and non-negative :param number: The base number to be exponentiated. :param exponent: The exponent to which the base number is raised. :return: The result of number raised to the power of exponent. :raises TypeError: if number is not an integer. :raises ValueError: if exponent is negative, if number or exponent is not odd. if not isinstance(number, int): raise TypeError(\\"The number must be an integer.\\") if exponent < 0: raise ValueError(\\"The exponent must be non-negative.\\") if number % 2 == 0: raise ValueError(\\"The number must be an odd integer.\\") if exponent % 2 == 0: raise ValueError(\\"The exponent must be an odd integer.\\") return number ** exponent"},{"question":"I have two strings in Python, \\"abc\\" and \\"defg\\". I need a method to join them with a specific pattern. The desired output is \\"adbecf\\". Could you help me to achieve this?","solution":"def interleave_strings(s1, s2): Interleaves two strings s1 and s2. If one string is longer, the remaining characters are appended at the end. result = [] len_s1 = len(s1) len_s2 = len(s2) for i in range(max(len_s1, len_s2)): if i < len_s1: result.append(s1[i]) if i < len_s2: result.append(s2[i]) return ''.join(result)"},{"question":"Create a code in Python to generate a random password of length 10 containing alphanumeric as well lowercase and uppercase characters.","solution":"import random import string def generate_random_password(length=10): Generates a random password of specified length containing alphanumeric characters as well as lowercase and uppercase letters. characters = string.ascii_letters + string.digits password = ''.join(random.choice(characters) for i in range(length)) return password"},{"question":"Write a Python program to create a histogram from a list of numbers. The program should also allow for customization of color, width, and axis labels.","solution":"import matplotlib.pyplot as plt def create_histogram(data, color='blue', width=0.8, xlabel='', ylabel='', title=''): Creates a histogram from a list of numbers. Parameters: data (list): List of numbers. color (str): Color of the bars. Default is 'blue'. width (float): Width of the bars. Default is 0.8. xlabel (str): Label for the x-axis. ylabel (str): Label for the y-axis. title (str): Title for the histogram. Returns: None plt.hist(data, color=color, bins='auto', rwidth=width) plt.xlabel(xlabel) plt.ylabel(ylabel) plt.title(title) plt.show()"},{"question":"Create a python function that takes a string as an argument and then inserts the string \\"Python\\" at the beginning and the end of the string. The function should return the modified string.","solution":"def insert_python_around(text): Inserts the string \\"Python\\" at the beginning and the end of the input text. Parameters: text (str): The input string. Returns: str: The modified string with \\"Python\\" at the beginning and the end. return f\\"Python{text}Python\\""},{"question":"Write a python function to count the number of zeros at the end of a binary number represented as a string.","solution":"def count_trailing_zeros(binary_str): Returns the number of trailing zeros in a binary number represented as a string. Parameters: binary_str (str): A string representing a binary number. Returns: int: Number of trailing zeros in the binary string. if not isinstance(binary_str, str) or not all(c in '01' for c in binary_str): raise ValueError(\\"Input must be a binary string containing only '0' and '1'\\") count = 0 for char in reversed(binary_str): if char == '0': count += 1 else: break return count"},{"question":"Create a function that converts a given positive integer to a Roman numeral string in Python. The function should handle integers up to 3999.","solution":"def int_to_roman(n): Converts a given positive integer to a Roman numeral string. Handles integers up to 3999. if not 1 <= n <= 3999: raise ValueError(\\"The number must be between 1 and 3999\\") val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = '' for i in range(len(val)): while n >= val[i]: roman_numeral += syb[i] n -= val[i] return roman_numeral"},{"question":"Generate code to find the maximum length of a common sub-sequence in two strings","solution":"def longest_common_subsequence(text1, text2): Returns the length of the longest common subsequence of two strings. :param text1: The first string :param text2: The second string :return: Length of the longest common subsequence m, n = len(text1), len(text2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if text1[i - 1] == text2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"Reassign the value of variable 'b' to be the result of a function called 'f' which takes 'a' as an argument only if 'a' is a positive integer greater than zero. If 'a' is not a positive integer greater than zero, set 'b' to None. Additionally, if 'a' is a prime number, add 1 to the result of the function 'f' before assigning it to 'b'. If 'a' is a power of 2, subtract 1 from the result of the function 'f' before assigning it to 'b'.","solution":"def f(a): An example function that takes an integer a and returns some value. This function can be replaced with any specific implementation. return a * 2 def is_prime(n): Returns True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def is_power_of_2(n): Returns True if n is a power of 2, False otherwise. return (n & (n - 1)) == 0 and n != 0 def reassign_b(a): Reassign variable 'b' based on the value of 'a'. if isinstance(a, int) and a > 0: result = f(a) if is_prime(a): result += 1 if is_power_of_2(a): result -= 1 b = result else: b = None return b"},{"question":"Create a function to append a new element to a list, but only if the element is not already present in the list.","solution":"def add_unique_element(lst, element): Appends a new element to the list if it's not already present. Parameters: lst (list): The list to which the element should be added. element : The element to be added to the list. Returns: list: The updated list after attempting to add the element. if element not in lst: lst.append(element) return lst"},{"question":"Create a function in Python that takes as arguments two strings and returns a boolean indicating whether both strings are equal or not. The function should perform a case-sensitive comparison, consider whitespace characters, and ensure that the strings do not contain any leading or trailing whitespace characters before comparing them.","solution":"def are_strings_equal(str1, str2): Returns True if both strings are equal after stripping leading and trailing whitespace, considering case-sensitive comparison and exactly matching whitespaces in-between, otherwise returns False. return str1.strip() == str2.strip()"},{"question":"Build a simple parser for a protein structure file (PDB) in Python for getting the Cartesian coordinates of each atom in the molecule. Your parser should be able to handle large PDB files. Also, write a function to transform the coordinates according to a given transformation matrix. Finally, implement a function to filter by atom type or residue name, and a function to compute the center of mass of the protein structure. Pay extra attention to optimizing your code for performance.","solution":"import numpy as np def parse_pdb(file_path): Parses a PDB file and returns a list of dictionaries, where each dictionary contains information of an atom, including coordinates. Parameters: file_path (str): Path to the PDB file. Returns: list: List of dictionaries with atom information. atoms = [] with open(file_path, 'r') as pdb_file: for line in pdb_file: if line.startswith(\\"ATOM\\") or line.startswith(\\"HETATM\\"): atom = { 'atom_name': line[12:16].strip(), 'residue_name': line[17:20].strip(), 'chain_id': line[21].strip(), 'residue_seq': int(line[22:26].strip()), 'x': float(line[30:38].strip()), 'y': float(line[38:46].strip()), 'z': float(line[46:54].strip()) } atoms.append(atom) return atoms def transform_coordinates(atoms, transformation_matrix): Applies a transformation matrix to the coordinates of each atom. Parameters: atoms (list): List of dictionaries with atom information. transformation_matrix (numpy.array): 3x3 transformation matrix. Returns: list: List of transformed coordinates. transformed_atoms = [] for atom in atoms: original_coords = np.array([atom['x'], atom['y'], atom['z']]) transformed_coords = np.dot(transformation_matrix, original_coords) transformed_atoms.append({ **atom, 'x': transformed_coords[0], 'y': transformed_coords[1], 'z': transformed_coords[2] }) return transformed_atoms def filter_atoms(atoms, atom_type=None, residue_name=None): Filters atoms by atom type or residue name. Parameters: atoms (list): List of dictionaries with atom information. atom_type (str): Atom name to filter by (optional). residue_name (str): Residue name to filter by (optional). Returns: list: Filtered list of atoms. filtered_atoms = [atom for atom in atoms if (atom_type is None or atom['atom_name'] == atom_type) and (residue_name is None or atom['residue_name'] == residue_name)] return filtered_atoms def calculate_center_of_mass(atoms): Calculates the center of mass of the protein structure. Parameters: atoms (list): List of dictionaries with atom information. Returns: tuple: Cartesian coordinates of the center of mass. num_atoms = len(atoms) if num_atoms == 0: return (0.0, 0.0, 0.0) x_sum = sum(atom['x'] for atom in atoms) y_sum = sum(atom['y'] for atom in atoms) z_sum = sum(atom['z'] for atom in atoms) return (x_sum / num_atoms, y_sum / num_atoms, z_sum / num_atoms)"},{"question":"Consider the following Python program designed to calculate the area of an isosceles triangle. However, the program doesn't work as intended. Enhance the below given code so that it can accurately calculate the area of an isosceles triangle and additionally demands the base and height as mandatory parameters using default arguments in the function. If these parameters are not passed, the function should return an error message.","solution":"def area_isosceles_triangle(base=None, height=None): Returns the area of an isosceles triangle given base and height. If base or height is not provided, returns an error message. if base is None or height is None: return \\"Error: Base and Height are required parameters.\\" return 0.5 * base * height"},{"question":"I have an input array of integer values and I want to write a Python function that removes all the odd numbers from this array. How can I achieve this?","solution":"def remove_odd_numbers(arr): Removes all odd numbers from the input array and returns the resulting array. :param arr: List of integers. :return: List of integers with all odd numbers removed. return [x for x in arr if x % 2 == 0]"},{"question":"Write a python regex to extract any UK postcode from a string that might include double letters or spaces inside. Also, write unit tests to verify your solution works as expected.","solution":"import re def extract_uk_postcode(input_string): Extracts a UK postcode from the input string. A typical UK postcode format: - AOAO OAA - AOA OAA - AAO OAA - AOA OAA - AOA OAO - FPAOAO (e.g., GY1 1AA - Guernsey) postcode_regex = re.compile(r'b[A-Z]{1,2}[0-9R][0-9A-Z]?s?[0-9][A-Z]{2}b', re.IGNORECASE) match = postcode_regex.search(input_string) if match: return match.group(0) return None"},{"question":"How can I find the second smallest number in a list using Python, considering I have a list containing an unknown amount of numbers?","solution":"def find_second_smallest(numbers): Returns the second smallest number in the list. If the list contains less than 2 unique numbers, return None. if not numbers or len(numbers) < 2: return None first, second = float('inf'), float('inf') for n in numbers: if n <= first: if n < first: first, second = n, first elif n < second: second = n return second if second != float('inf') else None"},{"question":"Modify the following code to check if the input string is a palindrome. However, you are not allowed to use any additional data structures (such as lists or arrays) or built-in string manipulation functions (such as reverse() or any methods that directly manipulate the string). You can only use basic string operations and arithmetic.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, otherwise returns False. n = len(s) for i in range(n // 2): if s[i] != s[n - 1 - i]: return False return True"},{"question":"Write a Python program where you first define a function called \\"create_tuple\\" that takes three parameters, a string 'str_input', an integer 'int_input' and a float 'flt_input'. This function should then create and return a tuple with these three parameters as its elements. After defining the function, call it, using \\"Hello World\\", 20, and 50.7 as its inputs. Store the resulting tuple in a variable named 'my_tuple'.","solution":"def create_tuple(str_input, int_input, flt_input): Creates a tuple from a string, an integer, and a float. Parameters: str_input (str): The string input. int_input (int): The integer input. flt_input (float): The float input. Returns: tuple: A tuple containing the three inputs. return (str_input, int_input, flt_input) # Creating the tuple with specified inputs my_tuple = create_tuple(\\"Hello World\\", 20, 50.7) print(my_tuple) # Output for verification"},{"question":"Develop an algorithm for shuffling an array of numbers without using any built-in shuffle or random functions. Additionally, ensure the execution time does not exceed O(N log N).","solution":"def shuffle_array(arr): Shuffles the array of numbers without using any built-in shuffle or random functions. This can be achieved by using a custom function to generate pseudo-random indices. def pseudo_random_index(i, length): # Simple pseudo-random function based on bitwise operations return (i * (i + 3) % length + (length // 2)) % length length = len(arr) for i in range(length): swap_idx = pseudo_random_index(i, length) arr[i], arr[swap_idx] = arr[swap_idx], arr[i] return arr"},{"question":"Suppose we have a string S = \\"dogs\\", and a set of words D = {\\"dog\\", \\"god\\", \\"cat\\", \\"act\\", \\"doll\\", \\"cog\\", \\"log\\"}. Design a Python function that constructs all possible permutations of the input string, then checks which of these permutations exist in the word set D.","solution":"import itertools def find_permutations_in_set(s, words_set): Returns a set of permutations of the string s that are found in the words_set. :param s: input string to find permutations of. :param words_set: set of words to check permutations against. :return: set of permutations present in words_set. permutations = set(itertools.permutations(s)) permuted_words = {\\"\\".join(p) for p in permutations} return permuted_words.intersection(words_set)"},{"question":"Construct a snippet of code with the purpose of evaluating the occurrence rate of every unique alphabetical symbol within a specific textual sequence. The textual sequence provided is \\"frequency of each unique character\\". Enhanced version should consider case sensitivity and non-alphabetic characters as well.","solution":"def char_frequency(text): Returns a dictionary with the occurrence rate of each unique character in the text. frequency_dict = {} for char in text: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict"},{"question":"Given a list of strings, write a program to return all strings with first character as 'c'.","solution":"def strings_starting_with_c(strings): Returns a list of strings where each string starts with the letter 'c'. :param strings: List of strings :return: List of strings starting with 'c' return [string for string in strings if string.startswith('c')]"},{"question":"Given a binary tree with n nodes as input, write a Python function that returns the maximum path sum. Here, a path is considered a sequence of nodes from one of the root-to-leaf paths, where each pair of consecutive nodes in the sequence has an edge connecting them.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxPathSum(root): Returns the maximum path sum of a binary tree. def max_gain(node): nonlocal max_sum if not node: return 0 # Recursively call max_gain for left and right children and ignore negative paths left_gain = max(max_gain(node.left), 0) right_gain = max(max_gain(node.right), 0) # Path through the current node price_newpath = node.val + left_gain + right_gain # Update max_sum if new path is better max_sum = max(max_sum, price_newpath) # Return the gain if continuing the same path return node.val + max(left_gain, right_gain) max_sum = float('-inf') max_gain(root) return max_sum"},{"question":"I have a list of numbers and I want to write a program that counts and prints the numbers that are divisible by either 3 or 5. Can you provide an example solution using Python?","solution":"def count_divisible_by_3_or_5(numbers): Returns the count of numbers in the list that are divisible by either 3 or 5. return len([num for num in numbers if num % 3 == 0 or num % 5 == 0])"},{"question":"Write a Python program to find the shortest distance and path to deliver a package from one node to another in a graph using Dijkstra's algorithm.","solution":"import heapq def dijkstra(graph, start, end): Finds the shortest distance and path from start to end using Dijkstra's algorithm. :param graph: A dictionary representing the graph where the keys are nodes and the values are dictionaries of neighboring nodes and the cost to reach them :param start: The starting node :param end: The target node :return: A tuple (distance, path) where distance is the shortest distance and path is the list of nodes in the shortest path # Priority queue to store (distance, node, path) priority_queue = [(0, start, [])] visited = set() while priority_queue: (current_distance, current_node, path) = heapq.heappop(priority_queue) if current_node in visited: continue visited.add(current_node) path = path + [current_node] # If we reach the end node, return the distance and path if current_node == end: return (current_distance, path) # Explore neighbors for neighbor, weight in graph.get(current_node, {}).items(): if neighbor not in visited: heapq.heappush(priority_queue, (current_distance + weight, neighbor, path)) return (float(\\"inf\\"), []) # Example graph representation example_graph = { 'A': {'B': 1, 'C': 4}, 'B': {'A': 1, 'C': 2, 'D': 5}, 'C': {'A': 4, 'B': 2, 'D': 1}, 'D': {'B': 5, 'C': 1} }"},{"question":"Write a simple recursive function to find the maximum element from a given list of integers.","solution":"def find_max_recursive(lst): Returns the maximum element from a given list of integers. If the list is empty, returns None. if not lst: return None if len(lst) == 1: return lst[0] else: max_in_rest = find_max_recursive(lst[1:]) return lst[0] if lst[0] > max_in_rest else max_in_rest"},{"question":"Write a Python program that accepts a positive integer as input and calculates both the sum of digits and the factorial of each digit in that number. Print the sum of digits, and for each digit, print the digit along with its factorial.","solution":"import math def sum_and_factorials_of_digits(number): Takes a positive integer as input, calculates the sum of its digits, and prints the factorial of each digit. if number <= 0: raise ValueError(\\"Input must be a positive integer\\") digits = [int(digit) for digit in str(number)] sum_of_digits = sum(digits) result = { \\"sum_of_digits\\": sum_of_digits, \\"digit_factorials\\": {digit: math.factorial(digit) for digit in digits} } return result"}]`),F={name:"App",components:{PoemCard:C},data(){return{searchQuery:"",visibleCount:4,poemsData:I,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},z={class:"card-container"},E={key:0,class:"empty-state"},S=["disabled"],N={key:0},D={key:1};function L(i,e,l,m,s,a){const f=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),_(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):u("",!0)]),t("div",z,[(n(!0),r(b,null,v(a.displayedPoems,(o,p)=>(n(),w(f,{key:p,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",E,' No results found for "'+d(s.searchQuery)+'". ',1)):u("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",D,"Loading...")):(n(),r("span",N,"See more"))],8,S)):u("",!0)])}const W=c(F,[["render",L],["__scopeId","data-v-85f33b46"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"library/18.md","filePath":"library/18.md"}'),O={name:"library/18.md"},V=Object.assign(O,{setup(i){return(e,l)=>(n(),r("div",null,[x(W)]))}});export{M as __pageData,V as default};
