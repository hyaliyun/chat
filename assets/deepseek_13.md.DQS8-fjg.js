import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,p,a,r){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-331af741"]]),S=JSON.parse('[{"question":"# Problem Description You are developing a company website that sells books online. One of the features is to recommend books to customers based on their browsing history. The browsing history is stored as a list of book IDs. Each time a customer visits a book page, the book ID is added to the browsing history. Your task is to write a function that takes the browsing history of a customer and returns the ID of the book that has been visited the most. If there is a tie (i.e., multiple books have been visited the same maximum number of times), return the smallest book ID. # Function Signature ```python def most_visited_book(browsing_history: list) -> int: ``` # Input * browsing_history (list): A list of integers representing the book IDs in the order they were visited. The list will have at least one element. # Output * (int): The book ID that has been visited the most. If there is a tie, return the smallest book ID. # Example ```python browsing_history = [1, 2, 1, 2, 3, 1, 3, 1, 2, 2] most_visited_book(browsing_history) ``` This should return: ```output 2 ``` # Explanation - The book with ID 1 is visited 4 times. - The book with ID 2 is visited 4 times. - The book with ID 3 is visited 2 times. - Since there is a tie between book ID 1 and book ID 2, the function should return the smallest book ID, which is 1.","solution":"def most_visited_book(browsing_history: list) -> int: Returns the ID of the most visited book. If multiple books have been visited the same maximum number of times, returns the smallest book ID. from collections import Counter # Count the occurrences of each book ID book_count = Counter(browsing_history) # Find the maximum visit count max_visits = max(book_count.values()) # Filter the book IDs that have the maximum visit count most_visited_books = [book_id for book_id, count in book_count.items() if count == max_visits] # Return the smallest book ID among those return min(most_visited_books)"},{"question":"You are provided with a sequence of integers representing the prices of a stock on different days. Your task is to find the maximum profit you can achieve from making at most two transactions. A transaction is defined as buying and then selling one unit of stock. The order in which you perform the buy and sell operations matters, and you must buy the stock before you can sell it. You must also complete one transaction before starting another. Write a function `max_profit` that takes in a list of integers `prices` and returns an integer representing the maximum profit obtainable from two transactions. If no profit is possible, return 0. Note that you cannot engage in multiple transactions simultaneously. # Example: ```python def max_profit(prices): # Your code here # Example usage: print(max_profit([3,3,5,0,0,3,1,4])) # Output: 6 print(max_profit([1,2,3,4,5])) # Output: 4 print(max_profit([7,6,4,3,1])) # Output: 0 print(max_profit([1])) # Output: 0 ``` # Explanation: * In the first example, the maximum profit can be achieved by buying on day `4` at price `0` and selling on day `6` at price `3`, then buying again on day `7` at price `1` and selling on day `8` at price `4`. Therefore, the total profit is `(3-0) + (4-1) = 3 + 3 = 6`. * In the second example, you can just buy at `1` and then sell at `5`, resulting in a single transaction profit of `4`. * In the last example, no profit can be made because the price decreases each day. * The fourth example has only one price day, so no transaction is possible, and the profit is `0`. Your implementation should consider edge cases like: - When the number of days (length of prices list) is less than 2. - When the prices are always decreasing. - When prices contain only one element.","solution":"def max_profit(prices): if not prices or len(prices) < 2: return 0 n = len(prices) max_profit_one_txn = [0] * n max_profit_two_txn = [0] * n min_price_so_far = prices[0] for i in range(1, n): min_price_so_far = min(min_price_so_far, prices[i]) max_profit_one_txn[i] = max(max_profit_one_txn[i-1], prices[i] - min_price_so_far) max_price_so_far = prices[-1] for i in range(n-2, -1, -1): max_price_so_far = max(max_price_so_far, prices[i]) max_profit_two_txn[i] = max(max_profit_two_txn[i+1], max_price_so_far - prices[i] + max_profit_one_txn[i]) return max(max_profit_two_txn)"},{"question":"A company organizes regular events where employees can participate as either hosts or guests. Each event must have exactly one host and at least one guest. The company keeps a log of which employees have hosted or guest-participated in the past events. Your task is to determine the minimum number of additional employees needed to ensure that future events can always be properly hosted, given the past participation data. A company\'s log is given as an array where each element represents whether an employee has hosted or participated as a guest in past events. - \'H\' denotes that the employee has hosted. - \'G\' denotes that the employee has participated as a guest. You need to determine how many additional employees are needed to meet the requirement such that: 1. There is at least one host. 2. There is at least one guest. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000), the number of employees. The second line contains a string of length n, where each character is either \'H\' or \'G\'. -----Output----- Output a single integer, the minimum number of additional employees needed to ensure that future events can be hosted with at least one host and one guest. -----Examples----- Input 5 HHHHH Output 1 Input 4 GGGG Output 1 Input 3 HGH Output 0 -----Note----- For the first sample, you need at least one guest, so adding one guest will suffice. For the second sample, you need at least one host, so adding one host will suffice. In the third sample, you already have both hosts and guests. Hence, no additional employees are needed.","solution":"def additional_employees_needed(n, log): Determine the minimum number of additional employees needed to ensure that future events can be properly hosted. Parameters: n (int): The number of employees. log (str): A string representing employees participation in past events (\'H\' for hosts and \'G\' for guests). Returns: int: The minimum number of additional employees needed. has_host = \'H\' in log has_guest = \'G\' in log if has_host and has_guest: return 0 elif has_host: return 1 elif has_guest: return 1 else: return 2"},{"question":"Implement a Queue using two stacks stack1 and stack2. Example 1: Input: enqueue(2) enqueue(3) dequeue() enqueue(4) dequeue() Output: 2 3 Explanation: enqueue(2) the queue will be {2} enqueue(3) the queue will be {2, 3} dequeue() dequeued element will be 2 the queue will be {3} enqueue(4) the queue will be {3, 4} dequeue() dequeued element will be 3 Example 2: Input: enqueue(2) dequeue() dequeue() enqueue(3) Output: 2 -1 Your Task: Since this is a function problem, you don\'t need to take inputs. You are required to complete the two methods enqueue() which takes an integer \'x\' as input denoting the element to be enqueued into the queue and dequeue() which returns the integer dequeued from the queue(-1 if the queue is empty). Expected Time Complexity: O(1) for enqueue() and O(N) for dequeue() (or vice-versa). Expected Auxiliary Space: O(1) for both enqueue() and dequeue(). Constraints: 1 <= Number of queries <= 100 1 <= values of the queue <= 100","solution":"class QueueUsingStacks: def __init__(self): self.stack1 = [] self.stack2 = [] def enqueue(self, x): self.stack1.append(x) def dequeue(self): if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) if not self.stack2: return -1 return self.stack2.pop()"},{"question":"Sarah is organizing a team-building exercise for the company\'s employees. Each employee has a certain skill level, and Sarah wants to divide them into two teams in such a way that the difference in the total skill levels of the two teams is minimized. Write a function that takes a list of skill levels and returns the minimum possible difference between the total skill levels of the two teams. Input Format: The first line contains an integer, n, the number of employees. The second line contains n space-separated integers denoting the skill levels of the employees. Output Format: Output a single integer, denoting the minimum possible difference between the total skill levels of the two teams. Constraints: 1 ≤ n ≤ 20 1 ≤ skill levels ≤ 100 SAMPLE INPUT 4 1 6 11 5 SAMPLE OUTPUT 1 Explanation: The optimal division is [1, 11] and [6, 5], with total skill levels 12 and 11, respectively. The minimum difference is |12 - 11| = 1.","solution":"def find_min_difference(n, skill_levels): This function takes the number of employees (n) and a list of their skill levels (skill_levels), and returns the minimum possible difference between the total skill levels of the two teams. total_sum = sum(skill_levels) dp = [[False] * (total_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_sum + 1): if dp[i - 1][j]: dp[i][j] = True dp[i][j + skill_levels[i - 1]] = True min_diff = float(\'inf\') for j in range(total_sum // 2 + 1): if dp[n][j]: min_diff = min(min_diff, total_sum - 2 * j) return min_diff"},{"question":"Anna is working on a project to analyze the growth patterns of certain plants. Each plant can grow or shrink depending on environmental factors. She has recorded the height of a single plant over N consecutive days. Anna wants to determine the longest subsequence of days where the plant\'s height strictly alternates between growing and shrinking. Strictly alternating means that for every two consecutive days in the subsequence, one day\'s height is greater than the previous day\'s height, and the next day\'s height is less than the previous day\'s height, or vice versa. Write a program to help Anna determine the length of this longest strictly alternating subsequence. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - The first line of each test case contains a single integer N, the number of days recorded. - The second line of each test case contains N space-separated integers, each representing the height of the plant on that day. ------ Output Format ------ For each test case, output in a single line the length of the longest strictly alternating subsequence of days. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^{5} 1 ≤ height ; ≤ 10^{6} - The sum of N over all test cases does not exceed 2 cdot 10^{5}. ----- Sample Input 1 ------ 3 5 1 3 2 4 3 4 2 2 2 2 6 3 2 1 2 1 3 ----- Sample Output 1 ------ 5 1 5 ----- Explanation 1 ------ Test case 1: The longest strictly alternating subsequence is the entire array [1, 3, 2, 4, 3], so the length is 5. Test case 2: Since all elements are equal, the longest strictly alternating subsequence has only one day, so the length is 1. Test case 3: One possible longest strictly alternating subsequence is [3, 2, 1, 2, 1], so the length is 5.","solution":"def longest_alternating_subsequence(n, heights): if n == 0: return 0 # Initialization longest_length = 1 current_trend = 0 # 0 means no trend, 1 means increasing, -1 means decreasing for i in range(1, n): if heights[i] > heights[i - 1] and current_trend != 1: longest_length += 1 current_trend = 1 elif heights[i] < heights[i - 1] and current_trend != -1: longest_length += 1 current_trend = -1 return longest_length def process_test_cases(T, test_cases): results = [] for i in range(T): n, heights = test_cases[i] results.append(longest_alternating_subsequence(n, heights)) return results"},{"question":"Given an array of integers, perform a series of operations to determine the impact on the array. Each operation is one of the following: * add(x): Increase every element of the array by x. * mult(x): Multiply every element of the array by x. * get(index): Print the value at the specified index after all operations. Constraints * 1 leq n leq 100,000 (initial size of the array) * 1 leq q leq 100,000 (number of queries) * 1 leq x leq 1,000,000 * 0 leq index < n * 1 leq elements of the array leq 1,000,000 Input The input is given in the following format. n q array query_1 query_2 : query_q Each query query_i is given by add x or mult x or get index Output For each get operation, print the result in a new line. Example Input 5 4 1 2 3 4 5 add 2 mult 3 get 2 get 4 Output 15 21","solution":"def perform_operations(n, q, array, queries): add_sum = 0 mult_product = 1 results = [] for query in queries: command = query[0] if command == \\"add\\": d = int(query[1]) add_sum += d elif command == \\"mult\\": m = int(query[1]) add_sum *= m mult_product *= m elif command == \\"get\\": index = int(query[1]) value = array[index] * mult_product + add_sum results.append(value) return results"},{"question":"A new online retail store is gaining popularity, and they want to implement a feature that automatically assigns loyalty points to customers based on their purchase history. The store has the following rules for assigning loyalty points: - If the total amount spent by a customer is more than 1000, they receive 50 loyalty points. - If the total amount spent by a customer is between 500 and 1000 (inclusive), they receive 30 loyalty points. - If the total amount spent by a customer is less than 500, they receive no loyalty points. Given the details of purchases made by a set of customers, determine the loyalty points each customer should receive. -----Input----- The first line contains an integer n (1 le n le 10^4) — the number of customers. Each of the next n lines contains a single integer s_i (0 le s_i le 10^6) — the total amount spent by the i^{th} customer. -----Output----- Print n lines. Each line must contain the loyalty points assigned to the corresponding customer based on their total spending. -----Examples----- Input 5 1500 750 400 1001 500 Output 50 30 0 50 30 -----Note----- In the first test case of the example, the first customer spent 1500, so they receive 50 loyalty points. The second customer spent 750, so they receive 30 loyalty points. The third customer spent 400, so they receive no loyalty points. The fourth customer spent 1001, so they receive 50 loyalty points. The fifth customer spent exactly 500, so they receive 30 loyalty points.","solution":"def assign_loyalty_points(spendings): Returns a list of loyalty points assigned based on each customer\'s total spending. points = [] for spending in spendings: if spending > 1000: points.append(50) elif 500 <= spending <= 1000: points.append(30) else: points.append(0) return points"},{"question":"Implement a function `evaluate_arithmetic_expression` that takes a string representing an arithmetic expression in infix notation and returns the result of the expression as a float. The infix notation expression can include the following: - Non-negative integers (e.g., 10, 23, 42) - Binary operators: addition (+), subtraction (-), multiplication (*), and division (/) - Parentheses for grouping (e.g., (1 + 2) * 3) - Whitespace can appear between characters but should be ignored by the function The function should correctly handle operator precedence and parentheses to compute the correct result. Assume that the input expression is always valid. Examples: ```python evaluate_arithmetic_expression(\\"3 + 5\\") # Expected output: 8.0 evaluate_arithmetic_expression(\\"10 + 2 * 6\\") # Expected output: 22.0 evaluate_arithmetic_expression(\\"100 * 2 + 12\\") # Expected output: 212.0 evaluate_arithmetic_expression(\\"100 * (2 + 12)\\") # Expected output: 1400.0 evaluate_arithmetic_expression(\\"100 * (2 + 12) / 14\\") # Expected output: 100.0 ``` You are required to implement this function using a stack-based approach to evaluate the expression. This is a common method used to evaluate arithmetic expressions and will ensure that the correct operator precedence and associativity are maintained.","solution":"def evaluate_arithmetic_expression(expression): Evaluates an arithmetic expression in infix notation and returns the result as a float. def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a / b def calculate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] return float(calculate(expression))"},{"question":"Consider a grid of size n x m. Each cell in this grid can be either empty (.) or occupied with an obstacle (#). You need to find a path from the top-left corner to the bottom-right corner, moving only right or down, such that the path does not cross any obstacles. Write a program that determines whether such a path exists. Constraints: - 1 ≤ n, m ≤ 1000 Input: - The first line contains two integers n and m, the dimensions of the grid. - The next n lines each contain a string of length m representing the grid. Output: - Print \\"YES\\" if there exists a path without obstacles from the top-left to the bottom-right, otherwise print \\"NO\\". Examples: Input 3 3 ..# .#. ... Output YES Input 3 3 #.. .#. ..# Output NO","solution":"def is_path_exists(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" def dfs(x, y, visited): if x == n - 1 and y == m - 1: return True if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'#\' or visited[x][y]: return False visited[x][y] = True down = dfs(x + 1, y, visited) right = dfs(x, y + 1, visited) return down or right visited = [[False for _ in range(m)] for _ in range(n)] return \\"YES\\" if dfs(0, 0, visited) else \\"NO\\""},{"question":"A**Roman numerals** are represented by seven different symbols: I, V, X, L, C, D, and M, which have the following values: Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, the Roman numeral 2 is written as II in Roman numerals, just two ones added together. The number 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five, we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Given a Roman numeral, convert it to an integer. Input: The input is a single line containing a string representing a Roman numeral. Output: Output the integer representation of the Roman numeral. Constraints: - The input can contain any Roman numeral from 1 to 3999. - The string length is in the range [1, 15]. Example Input: MMXVIII Example Output: 2018 Example Input: IV Example Output: 4 Example Input: CDXLIV Example Output: 444","solution":"def roman_to_int(roman): Convert a Roman numeral to an integer. :param roman: str, string representation of a Roman numeral :return: int, the integer representation of the Roman numeral roman_to_value = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(roman): value = roman_to_value[char] if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"Given an undirected graph with n nodes and m edges, print the shortest path from node a to node b. Each edge has a weight. If there are multiple shortest paths, print any one of them. Constraints - 2 leq n leq 1000 - 1 leq m leq 10000 - 1 leq a, b leq n - 1 leq w leq 1000 (weight of each edge) - There is at least one path from a to b Input The input is given in the following format: n; m a; b Edge_1 Edge_2 : Edge_m In the first line, the number of nodes n and edges m are given. In the second line, the nodes a and b are given, representing the start and end nodes respectively for the path search. In the following m lines, each Edge_i is given (1 leq i leq m) in the following format: u; v; w Where u and v are the nodes connected by the edge and w is the weight of the edge. Each edge is represented by its two endpoints and the weight. Output Print the nodes in the shortest path from a to b. If there are multiple shortest paths, print any one of them. The nodes should be printed in order, starting with node a and ending with node b. Example Input 5 6 1 5 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 Output 1 2 3 5","solution":"import heapq def shortest_path(n, m, a, b, edges): graph = [[] for _ in range(n+1)] for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) dist = [float(\'inf\')] * (n+1) dist[a] = 0 prev = [None] * (n+1) pq = [(0, a)] while pq: d, node = heapq.heappop(pq) if d > dist[node]: continue for weight, neighbor in graph[node]: new_dist = d + weight if new_dist < dist[neighbor]: dist[neighbor] = new_dist prev[neighbor] = node heapq.heappush(pq, (new_dist, neighbor)) path = [] current = b while current: path.append(current) current = prev[current] return path[::-1] # Example usage: n = 5 m = 6 a = 1 b = 5 edges = [(1, 2, 2), (1, 3, 4), (2, 3, 1), (2, 4, 7), (3, 5, 3), (4, 5, 1)] print(shortest_path(n, m, a, b, edges)) # Output: [1, 2, 3, 5]"},{"question":"Imagine you are organizing a team-building event for a group of N participants. Each participant has a positive energy level indicated by E_1, E_2, ldots, E_N. The event is designed such that the participants are divided into teams, with each team consisting of one or more continuously sequential participants. The objective is to form the teams in such a way that the minimum energy level of the team with the highest minimum energy is as large as possible. In other words, you want to split the participants into teams in such a way that the weakest team among the formed teams is the strongest possible. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers E_1, E_2, ldots, E_N. -----Output:----- For each test case, print a single line containing one integer, which is the highest possible minimum energy level among the weakest teams formed. -----Constraints----- - 1 le T le 10 - 1 le N le 2 cdot 10^5 - 1 le E_i le 10^9 -----Sample Input:----- 2 4 1 3 6 2 5 4 2 7 1 3 -----Sample Output:----- 2 3","solution":"def highest_min_energy(T, test_cases): results = [] for _ in range(T): N = test_cases[_][0] energies = test_cases[_][1] energies.sort() max_min_energy = 0 for i in range(N): max_min_energy = max(max_min_energy, min(energies[i], N - i)) results.append(max_min_energy) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) energies = list(map(int, lines[index + 1].split())) test_cases.append((N, energies)) index += 2 return T, test_cases def format_output(results): return \'n\'.join(map(str, results)) # Example usage input_str = \\"2n4n1 3 6 2n5n4 2 7 1 3n\\" T, test_cases = parse_input(input_str) results = highest_min_energy(T, test_cases) output_str = format_output(results) print(output_str)"},{"question":"You are given an array of integers representing points scored by teams in a tournament. Each team i has scored p_i points. You need to determine if you can reorder the teams such that no two adjacent teams in the new order have the same number of points, or report if it is impossible. Input The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (2 ≤ n ≤ 10^5) — the number of teams. The second line contains n integers p_1, p_2, ..., p_n (0 ≤ p_i ≤ 10^5) — the points scored by the i-th team. The sum of n over all test cases does not exceed 10^5. Output For each test case, print the answer as follows: If it is possible to reorder the teams so that no two adjacent teams have the same number of points, print YES in the first line. Otherwise, print NO. Example Input 3 5 4 3 3 4 2 4 1 1 1 1 3 7 6 6 Output YES NO YES","solution":"def can_reorder_no_adjacent_same_points(t, cases): results = [] for case in cases: n, points = case freq = {} for p in points: if p in freq: freq[p] += 1 else: freq[p] = 1 max_freq = max(freq.values()) if max_freq > (n + 1) // 2: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"In a magical land, there are n houses arranged in a straight line, each house having some magic power associated with it. The power of the i-th house is represented by an integer a_i. The land has a unique culture of celebrating festivals where the people decorate their houses, and each festival\'s joy is determined by the power of the decorated houses. The people decide to maximize the joy of the festival by selecting a segment of consecutive houses such that the sum of magic powers in that segment is maximized. However, due to magical anomalies, the negative power of the houses reduces the festival joy, and they need to avoid such houses as much as possible. Your task is to write a program that calculates the maximum achievable sum of the magic powers of any segment of consecutive houses. -----Input----- The input starts with a line containing an integer n (1 le n le 10^5), the number of houses in the land. Then follows a line containing n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) representing the magic power of each house. -----Output----- Output one integer, the maximum sum of a segment of consecutive houses. -----Examples----- Sample Input 1: 5 -3 2 -1 4 -5 Sample Output 1: 5 Sample Input 2: 8 1 -2 3 5 -1 2 -1 4 Sample Output 2: 12","solution":"def max_magic_power(n, a): Returns the maximum sum of a segment of consecutive houses. max_sum = current_sum = a[0] for i in range(1, n): current_sum = max(a[i], current_sum + a[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an integer array `nums` (0-based index). Your task is to find the number of \\"good pairs\\" in the array. A pair `(i, j)` is called \\"good\\" if `nums[i] + nums[j]` is even and `i < j`. For example, if `nums = [2, 4, 6, 3, 5]`, the \\"good pairs\\" are `(0,1), (0,2), (1,2), (3,4)` since `2+4=6`, `2+6=8`, `4+6=10`, and `3+5=8` are all even. ----Input---- The input consists of multiple test cases. The first line contains a single integer `t` (`1 ≤ t ≤ 1000`), the number of test cases. The description of the test cases follows. The first line of each test case contains an integer `n` (`1 ≤ n ≤ 10^5`), the length of the array `nums`. The second line contains `n` space-separated integers, representing the elements of the array `nums` (`0 ≤ nums[i] ≤ 10^9`). ----Output---- For every test case, print a single integer — the number of \\"good pairs\\" in the given array. ----Example---- Input 3 5 2 4 6 3 5 4 1 1 1 1 3 2 1 3 Output 4 6 1 ----Note---- In the first test case, the good pairs are: - `(0,1)`, `2+4=6` which is even. - `(0,2)`, `2+6=8` which is even. - `(1,2)`, `4+6=10` which is even. - `(3,4)`, `3+5=8` which is even. In the second test case, all pairs `(i, j)` where `i < j` and `(1+1=2)` which is even. In the third test case, only pair `(0,2)` which is `2+3=5` which is odd.","solution":"def count_good_pairs(nums): This function takes a list of integers nums and returns the number of \\"good pairs\\". A pair (i, j) is called \\"good\\" if nums[i] + nums[j] is even and i < j. n = len(nums) evens = odds = 0 for num in nums: if num % 2 == 0: evens += 1 else: odds += 1 # Number of ways to pick two evens + Number of ways to pick two odds good_pairs = (evens * (evens - 1)) // 2 + (odds * (odds - 1)) // 2 return good_pairs def solve(test_cases): This function takes a list of tuples representing test cases. Each tuple consists of an integer n and a list of integers nums. It returns a list of integers where each integer is the number of good pairs for the respective test case. results = [] for n, nums in test_cases: results.append(count_good_pairs(nums)) return results"},{"question":"# Reversing the Effects of Multiplication You are given an array `b` of positive integers of length `n`. This array `b` was obtained by multiplying some array `a` with itself, element-wise, i.e., `b[i] = a[i] * a[i]` for all valid `i`. Given this array `b`, your task is to restore the original array `a`. Input The first line contains the integer `n` (1 ≤ n ≤ 1000) — the length of the array `b`. The second line contains `n` space-separated integers — the elements of the array `b`. All elements of `b` are positive integers, not exceeding `10^9`. Output Print the restored array `a` in a single line. If there are multiple valid solutions, you are allowed to print any of them. Examples Input 4 1 4 9 16 Output 1 2 3 4 Input 1 81 Output 9 Input 3 25 25 1 Output 5 5 1","solution":"import math def restore_array(b): Given an array b where b[i] = a[i] * a[i], restore and return the original array a. return [int(math.sqrt(b_i)) for b_i in b] # Example usage: # b = [1, 4, 9, 16] # print(restore_array(b)) # Output will be [1, 2, 3, 4]"},{"question":"A theater is selling tickets for a special show. To manage the crowd effectively, they decided to adopt a priority system for ticket booking. There are `N` customers each with a unique customer ID and a priority level from 1 to 100, where a lower number indicates higher priority. Given the bookings in the order of their arrival, you need to determine the order in which tickets should be processed based on priority. Write a program that, for each test case, reads the list of customer IDs and their corresponding priorities and outputs the customer IDs sorted by their priority levels. -----Input:----- - The first line contains a single integer `T` denoting the number of test cases. Then the test cases follow. - The first line of each test case contains an integer `N` denoting the number of customers. - The next `N` lines each contain a customer ID (a string of alphanumeric characters) and a priority level (an integer between 1 and 100). -----Output:----- - For each test case, output the list of customer IDs sorted by their priority levels in ascending order. Each customer ID should appear on a new line in the correct order. -----Constraints----- - `1 <= T <= 50` - `1 <= N <= 1000` - Each customer ID is a unique alphanumeric string of maximum length 20. -----Sample Input:----- 1 5 customer1 10 customer2 5 customer3 12 customer4 8 customer5 1 -----Sample Output:----- customer5 customer2 customer4 customer1 customer3 -----EXPLANATION:----- In the given example, customer5 has the highest priority with level 1, followed by customer2 with level 5, customer4 with level 8, customer1 with level 10, and lastly, customer3 with level 12. Thus, the order of processing will be customer5, customer2, customer4, customer1, and customer3.","solution":"def prioritize_tickets(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] customers = test_cases[i][1] customers.sort(key=lambda x: x[1]) # Sort by priority level result = [customer[0] for customer in customers] results.append(result) return results"},{"question":"A company wants to reward its employees with a bonus based on their performance. Every employee is assigned a score representing their performance, and the company has a rule that the bonus for an employee should be at least 1. If an employee has a strictly higher performance score than their adjacent colleagues, their bonus should be strictly more than their colleagues. Given an array of integers representing the performance scores of employees, your task is to determine the minimum total bonus the company must give to the employees while satisfying the given conditions. Input The first line of the input is an integer T (T ≤ 5), the number of test cases. Each test case contains 2 lines. The first line of each test case contains an integer N (0 < N ≤ 100000), the number of employees. The second line contains N positive integers, which are the performance scores of the employees. Output For each test case, output the minimum total bonus the company must give while satisfying the conditions mentioned. SAMPLE INPUT 2 3 1 2 2 4 1 2 2 3 SAMPLE OUTPUT 4 6 Explanation For the 1st test case, the optimal bonuses can be [1, 2, 1], ensuring the minimum total bonus is 4. For the 2nd test case, the optimal bonuses can be [1, 2, 1, 2], ensuring the minimum total bonus is 6.","solution":"def min_total_bonus(T, test_cases): results = [] for case in test_cases: N, scores = case if N == 0: results.append(0) continue bonuses = [1] * N # Left to right pass for i in range(1, N): if scores[i] > scores[i-1]: bonuses[i] = bonuses[i-1] + 1 # Right to left pass for i in range(N-2, -1, -1): if scores[i] > scores[i+1]: bonuses[i] = max(bonuses[i], bonuses[i+1] + 1) results.append(sum(bonuses)) return results"},{"question":"Problem Statement Alex is a digital artist who enjoys working with hexagonal grids. He wants to create a program that can help him fill these grids with colors. Each hexagon in the grid can be painted either \\"red\\" or \\"blue\\". The grid is represented by an arrangement of nodes, with each node being a hexagon and each edge representing a connection to another hexagon. A hexagonal grid of size n consists of n hexadecimal cells. The cells are connected in a way that each cell has exactly 6 neighboring cells, except for the cells on the boundary of the grid. The objective is to devise a way to paint the grid such that no two adjacent hexagons have the same color. Write a program to determine whether it is possible to paint the grid following these constraints. If it is possible, print a possible configuration of the grid. Otherwise, print \\"Impossible\\". The grid can be represented by a graph G with V vertices and E edges where |V| = n and each vertex representing a hexagon cell. The vertices are numbered from 1 to n. # Input: The first line of input contains an integer n (1 ≤ n ≤ 60) - the number of vertices (hexagon cells). The next line contains an integer m (0 ≤ m ≤ 300) - the number of edges representing the connections. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n) describing an undirected edge between vertex u and vertex v. # Output: Print \\"Possible\\" followed by a configuration string of length n where each character is either \'R\' (Red) or \'B\' (Blue) representing the color of each hexagonal cell in order from 1 to n, or print \\"Impossible\\" if no such configuration exists. # Example: Input: ``` 6 7 1 2 1 3 2 4 2 5 3 5 4 6 5 6 ``` Output: ``` Possible RBRBRB ``` Input: ``` 4 5 1 2 2 3 3 1 1 4 3 4 ``` Output: ``` Impossible ``` # Notes: - The graph is guaranteed to be connected and can represent a non-uniform hexagonal grid. - You need to implement a solution using a graph coloring method that ensures adjacent vertices do not share the same color.","solution":"def is_bipartite(graph, n): color = [-1] * n def bfs(source): queue = [source] color[source] = 0 while queue: node = queue.pop(0) for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for src in range(n): if color[src] == -1: if not bfs(src): return \\"Impossible\\" result = \'\'.join([\'R\' if c == 0 else \'B\' for c in color]) return f\\"Possiblen{result}\\" def paint_hex_grid(n, m, edges): graph = [[] for _ in range(n)] for u, v in edges: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) return is_bipartite(graph, n) # Example usage: # n = 6 # m = 7 # edges = [(1, 2), (1, 3), (2, 4), (2, 5), (3, 5), (4, 6), (5, 6)] # print(paint_hex_grid(n, m, edges))"},{"question":"Arkady is planning a multi-city trip. He first travels from city A to city B and then from city B to city C. To do so, he must choose exactly one flight for each segment. However, Arkady has a budget constraint and he wants to minimize the total cost of the trip. Each flight has a specific cost associated with it. There are n different flights from city A to city B, and m different flights from city B to city C. The total cost of the trip is the sum of the cost of the flight from city A to city B and the cost of the flight from city B to city C. Arkady wants to know the minimum possible total cost of the trip, given his budget constraint for each segment of the trip. ---Input--- The input consists of three lines: - The first line contains three integers n, m, and B (1 le n, m le 2 cdot 10^5, 1 le B le 10^9): the number of flights from city A to city B, the number of flights from city B to city C, and the maximum budget for any single flight, respectively. - The second line contains n integers p_1, p_2, ..., p_n (1 le p_i le 10^9), where p_i is the cost of the i-th flight from city A to city B. - The third line contains m integers q_1, q_2, ..., q_m (1 le q_j le 10^9), where q_j is the cost of the j-th flight from city B to city C. ---Output--- Output a single integer, the minimum possible total cost of the trip, or -1 if no valid combination of flights satisfies the budget constraint for each segment. ---Examples--- Input 3 4 100 80 40 60 20 10 50 90 Output 50 Input 2 3 30 25 35 10 30 40 Output 35 Input 3 3 15 20 25 30 10 15 20 Output -1 ---Explanation--- In the first example, the flight costs from city A to city B are 80, 40, and 60. The flight costs from city B to city C are 20, 10, 50, and 90. Arkady can choose the flight with cost 40 from city A to city B and the flight with cost 10 from city B to city C, making the total cost 50. In the second example, the flight costs from city A to city B are 25 and 35, and the flight costs from city B to city C are 10, 30, and 40. Arkady can choose the flight with cost 25 from city A to city B and the flight with cost 10 from city B to city C, making the total cost 35. In the third example, there are no valid flights from city A to city B and from city B to city C that satisfy the budget constraint of 15. Therefore, the output is -1.","solution":"def min_trip_cost(n, m, B, p, q): Returns the minimum possible total cost of the trip, given the budget constraint. If no valid combination of flights satisfies the budget constraint, returns -1. # Filter the flights within budget constraint B p = [cost for cost in p if cost <= B] q = [cost for cost in q if cost <= B] # If there are no valid flights left in either list, return -1 if not p or not q: return -1 # Find the minimum possible total cost min_total_cost = min(p) + min(q) return min_total_cost # Provided implementation following input as described in the prompt def parse_input_and_min_trip_cost(input_string): lines = input_string.strip().split(\'n\') n, m, B = map(int, lines[0].split()) p = list(map(int, lines[1].split())) q = list(map(int, lines[2].split())) return min_trip_cost(n, m, B, p, q)"},{"question":"In a fictional world, robots are powered by differently configured batteries. Each battery has a specific count of power units. The robots\' efficiency is determined by a balance in power units from all their batteries. Hence, the difference in the total power units between the most and the least charged batteries should be minimized. You are given `n` batteries each with different power capacities. Your task is to write a program that redistributes the power units from these batteries to achieve the most balanced configuration, i.e., the smallest possible difference between the most and the least charged battery, without wasting any power units. You will write a function `balance_batteries(n, batteries)` where: - `n` (1 ≤ `n` ≤ 100) represents the number of batteries. - `batteries` is a list of integers of size `n` where each integer (1 ≤ `battery` ≤ 10^6) represents the power units in that battery. The function will return the minimum possible difference between the most and the least charged battery after redistribution. # Example ```python def balance_batteries(n, batteries): # Your implementation here # Example usage: print(balance_batteries(3, [1, 6, 3])) # Output: 1 print(balance_batteries(4, [10, 10, 10, 10])) # Output: 0 print(balance_batteries(5, [3, 1, 4, 1, 5])) # Output: 1 ``` # Explanation 1. In the first example, you can transfer power as follows: - Transfer 2 units from the second battery to the first battery. Final configuration of batteries will be `[3, 4, 3]` with a difference of `4 - 3 = 1`. 2. In the second example, all batteries already have the same power units. No transfers are needed, so the difference is `0`. 3. In the third example, you can achieve balance by multiple transfers ensuring closest minimum difference. Final configuration might look like `[3, 3, 3, 3, 2]` with a difference of `1`. # Constraints - All power units in the batteries need to be redistributed such that no power unit is wasted. - The redistribution rule should maintain the integrity by doing minimum overhead of operations to achieve the goal.","solution":"def balance_batteries(n, batteries): Returns the minimum possible difference between the most and the least charged battery after redistributing the power units. total_power = sum(batteries) avg_power = total_power // n remainder = total_power % n # In case of exact divisibility, all batteries can have avg_power units, so difference is 0. if remainder == 0: return 0 # Distribute the power optimally more_power_batteries = n - remainder less_power_batteries = remainder return 1 # The difference will be just 1 unit in the worst balanced scenario # Example usage: print(balance_batteries(3, [1, 6, 3])) # Output: 1 print(balance_batteries(4, [10, 10, 10, 10])) # Output: 0 print(balance_batteries(5, [3, 1, 4, 1, 5])) # Output: 1"},{"question":"Annie loves trees, especially binary trees. She recently came up with a fun way to convert a binary tree into a special structure. She calls it a \\"zigzag level order\\". It involves traversing the tree level by level, but alternating the direction of traversal at each level. The first level is traversed from left to right, the next level from right to left, and so on. Given the root of a binary tree, write a function to return the zigzag level order traversal of its nodes\' values. # Input - You are given a binary tree represented as a `TreeNode` where each node contains an integer value. ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` - The function signature is: ```python def zigzagLevelOrder(root: TreeNode) -> List[List[int]]: ``` # Output - The function should return a list of lists of integers, where each nested list represents the nodes\' values at each level in zigzag order. # Example ```python # Input: # 3 # / # 9 20 # / # 15 7 # Output: # [ # [3], # [20, 9], # [15, 7] # ] root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20, TreeNode(15), TreeNode(7)) print(zigzagLevelOrder(root)) # Output: [[3], [20, 9], [15, 7]] ``` # Constraints - The number of nodes in the tree is in the range [0, 2000]. - -100 <= Node.val <= 100 # Notes - The binary tree can be empty. In such cases, return an empty list. - Consider edge cases, such as when the tree has only one node or when some levels have only one node.","solution":"from typing import List class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def zigzagLevelOrder(root: TreeNode) -> List[List[int]]: if not root: return [] result = [] current_level = [root] left_to_right = True while current_level: level_vals = [] next_level = [] for node in current_level: level_vals.append(node.val) if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) if not left_to_right: level_vals.reverse() result.append(level_vals) current_level = next_level left_to_right = not left_to_right return result"},{"question":"Marta is organizing a programming contest, and she wants to assign tasks to different teams. Teams are numbered from 1 to n. Each team can complete a set of tasks, but she wants to ensure that the total time taken to complete all tasks is minimized. Each task has a unique time requirement, and tasks are allocated based on the time they take. Specifically, the time taken by team i to complete task j is given by |i - j| + 1. Help Marta to determine the minimum total time needed to complete all tasks if there are n teams and n tasks. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of teams and tasks. -----Output----- Print a single integer: the minimum total time needed to complete all tasks. -----Examples----- Input 3 Output 4 Input 5 Output 12 -----Note----- In the first example with 3 tasks, the optimal way to allocate tasks to teams could be: - Team 1 takes task 1: |1 - 1| + 1 = 1 - Team 2 takes task 2: |2 - 2| + 1 = 1 - Team 3 takes task 3: |3 - 3| + 1 = 1 The total time is 1 + 1 + 1 = 3, but the minimum time to complete all tasks by optimal allocation can be less. In the second example with 5 tasks, one possible optimal allocation can be to allocate tasks sequentially resulting in the minimum total time.","solution":"def minimum_total_time(n): Returns the minimum total time needed to complete all tasks for n teams and n tasks. return n * (n + 1) // 2"},{"question":"Given an array of n integers, find the maximum sum subarray of size m. In other words, you need to find the contiguous subarray of length m that has the largest sum among all possible contiguous subarrays of that length. -----Input----- The first line contains two space-separated integers n and m (1 ≤ m ≤ n ≤ 10^5). The second line contains n space-separated integers representing the elements of the array. -----Output----- Print the maximum sum of the subarray of size m. -----Examples----- Input 10 3 1 2 3 4 5 6 7 8 9 10 Output 27 Input 5 2 -1 -2 -3 -4 -5 Output -3 Input 6 4 1 1 1 1 1 1 Output 4","solution":"def max_sum_subarray(n, m, arr): Returns the maximum sum of a subarray of size m from the given array arr. n: Length of the array m: Size of the subarray arr: Input integer array # Initialize the sum of first m elements current_sum = sum(arr[:m]) max_sum = current_sum # Use sliding window to calculate the rest of the sums for i in range(m, n): current_sum += arr[i] - arr[i - m] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In an office environment, employees are required to mark their attendance by logging their check-in and check-out times. To maintain an accurate record of working hours, a program is needed to calculate the total time worked by an employee in a given day. -----Input----- Input consists of a single integer N (1 le N le 500) indicating the number of employees. Each employee logs their attendance in four entries in a single line: - an integer H_{in} (0 le H_{in} < 24) indicating the check-in hour (in 24-hour format), - an integer M_{in} (0 le M_{in} < 60) indicating the check-in minutes, - an integer H_{out} (0 le H_{out} < 24) indicating the check-out hour (in 24-hour format), and - an integer M_{out} (0 le M_{out} < 60) indicating the check-out minutes. -----Output----- For each employee, output a line with the total time worked in hours and minutes, in the format \\"H M\\" where H is the total hours and M is the total minutes worked. Note that the check-out time will always be later in the same day than the check-in time. -----Examples----- Sample Input: 2 9 30 17 45 10 0 18 0 Sample Output: 8 15 8 0","solution":"def calculate_working_hours(n, times): results = [] for time in times: Hin, Min, Hout, Mout = time total_minutes_in = Hin * 60 + Min total_minutes_out = Hout * 60 + Mout total_work_minutes = total_minutes_out - total_minutes_in hours_worked = total_work_minutes // 60 minutes_worked = total_work_minutes % 60 results.append((hours_worked, minutes_worked)) return results"},{"question":"Given an integer array `A` of size `N` (1 <= N <= 100) and an integer `K` (1 <= K <= N), you need to perform a series of operations to make the array sorted non-decreasingly. An operation consists of selecting exactly `K` consecutive elements from the array and reversing their order. You can perform this operation exactly once. Your task is to find and print the lexicographically smallest array possible after exactly one such operation. Input: - The first line contains two integers, `N` and `K`. - The second line contains `N` space-separated integers representing the elements of the array `A`. Output: - Print the lexicographically smallest array achievable by performing exactly one reverse operation on any `K` consecutive elements. Example Input: 5 3 4 3 2 1 5 Output: 2 3 4 1 5 Explanation: By selecting the subarray from indices 3 to 5 (2, 1, 5) and reversing it, the array becomes [2, 3, 4, 1, 5], which is lexicographically the smallest possible array achievable with one operation. Note: - The array is 1-indexed when explaining the output transformation for clarity.","solution":"def find_lexicographically_smallest_array(N, K, A): Performs exactly one reverse operation on any K consecutive elements to make the array lexicographically smallest. smallest_array = A[:] for i in range(N - K + 1): current_array = A[:i] + A[i:i+K][::-1] + A[i+K:] if current_array < smallest_array: smallest_array = current_array return smallest_array # Example input N = 5 K = 3 A = [4, 3, 2, 1, 5] # Example usage result = find_lexicographically_smallest_array(N, K, A) print(result) # Output should be [2, 3, 4, 1, 5]"},{"question":"Given a string s, you are allowed to split s into as many substrings as you like. Determine the minimum number of substrings in which all characters are unique. For example, for the string \\"abac\\", the splits can be [\'a\', \'b\', \'a\', \'c\'] or [\'ab\', \'ac\'], and so on. Example 1: Input: \\"abac\\" Output: 2 Explanation: You can split the string into [\'ab\', \'ac\'] Example 2: Input: \\"world\\" Output: 1 Explanation: Since all characters are unique in the string, it can stay as one substring, [\'world\'] Your Task: You don\'t need to read input or print anything. Complete the function minUniqueSplit(s) that takes the string s as input and returns the minimum number of substrings with all unique characters. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= s.length <= 10^5 s consists of lowercase English letters only.","solution":"def minUniqueSplit(s): Determine the minimum number of substrings in which all characters are unique. last_seen = {} count = 1 for idx, char in enumerate(s): if char in last_seen: count += 1 last_seen = {} last_seen[char] = idx return count"},{"question":"A company has an internal messaging system where messages are sent between employees in a chain-like manner. Each message has a sender, a recipient, and a timestamp. Given a list of messages, identify if there is any chain of communication between two specific employees within a given timeframe. You are given multiple queries. For each query, you will receive the names of two employees and a timeframe. Your task is to determine if there exists a sequence of messages that starts with the first employee and ends with the second employee within the given timeframe. If such a sequence exists, return YES; otherwise, return NO. Example messages = [ {\\"sender\\": \\"Alice\\", \\"recipient\\": \\"Bob\\", \\"timestamp\\": 1}, {\\"sender\\": \\"Bob\\", \\"recipient\\": \\"Charlie\\", \\"timestamp\\": 2}, {\\"sender\\": \\"Charlie\\", \\"recipient\\": \\"Dave\\", \\"timestamp\\": 4}, {\\"sender\\": \\"Alice\\", \\"recipient\\": \\"Eve\\", \\"timestamp\\": 3}, {\\"sender\\": \\"Eve\\", \\"recipient\\": \\"Bob\\", \\"timestamp\\": 5}, ] queries = [ {\\"start\\": \\"Alice\\", \\"end\\": \\"Dave\\", \\"start_time\\": 1, \\"end_time\\": 4}, {\\"start\\": \\"Alice\\", \\"end\\": \\"Charlie\\", \\"start_time\\": 1, \\"end_time\\": 5}, {\\"start\\": \\"Eve\\", \\"end\\": \\"Charlie\\", \\"start_time\\": 2, \\"end_time\\": 6}, ] Function Description Complete the canCommunicate function in the editor below. It should return an array of strings, where each string is either YES or NO. canCommunicate has the following parameter(s): - list messages: a list of dictionaries, where each dictionary represents a message with keys \\"sender\\", \\"recipient\\", and \\"timestamp\\" - list queries: a list of dictionaries, where each dictionary represents a query with keys \\"start\\", \\"end\\", \\"start_time\\", and \\"end_time\\" Returns - list: an array of strings, either YES or NO for each query Input Format The first line contains an integer q, the number of queries. The next line contains the number of messages followed by the messages themselves: The first line contains an integer m, the number of messages. The next m lines each contain a space-separated string (sender), string (recipient), and integer (timestamp). Each of the next q lines represent a query with a space-separated string (start), string (end), integer (start_time), and integer (end_time). Constraints - 1 leq q leq 10 - 1 leq m leq 1000 - All employees\' names are alphanumeric strings. - 1 leq timestamp, start_time, end_time leq 10^9 - start_time ≤ end_time Sample Input 6 Alice Bob 1 Bob Charlie 2 Charlie Dave 4 Alice Eve 3 Eve Bob 5 Bob Alice 6 3 Alice Dave 1 4 Alice Charlie 1 5 Eve Charlie 2 6 Sample Output YES YES NO Explanation There are three queries: 1. From Alice to Dave within timeframe 1 to 4: - Alice to Bob at timestamp 1, Bob to Charlie at timestamp 2, Charlie to Dave at timestamp 4. All within the timeframe. Output is YES. 2. From Alice to Charlie within timeframe 1 to 5: - Alice to Bob at timestamp 1, Bob to Charlie at timestamp 2. Both within the timeframe. Output is YES. 3. From Eve to Charlie within timeframe 2 to 6: - There is no sequence that starts from Eve and ends at Charlie within the given timeframe. Output is NO.","solution":"from collections import defaultdict, deque def canCommunicate(messages, queries): def bfs(start, end, start_time, end_time, graph, times): queue = deque([(start, start_time)]) visited = set() while queue: current, curr_time = queue.popleft() if current in visited: continue visited.add(current) for next_node, timestamp in graph[current]: if start_time <= timestamp <= end_time and timestamp >= curr_time: if next_node == end: return \\"YES\\" queue.append((next_node, timestamp)) return \\"NO\\" # Building the graph graph = defaultdict(list) for msg in messages: if msg[\'timestamp\'] <= 10**9: graph[msg[\'sender\']].append((msg[\'recipient\'], msg[\'timestamp\'])) # Answering each query results = [] for query in queries: result = bfs(query[\'start\'], query[\'end\'], query[\'start_time\'], query[\'end_time\'], graph, messages) results.append(result) return results"},{"question":"A logistics company is optimizing its package delivery system by assigning delivery persons to specific routes. Each route has a certain number of packages to be delivered. The delivery persons can only carry a limited number of packages at once, and they will return to the starting point after each delivery. The goal is to determine the minimum number of trips each delivery person needs to complete all deliveries on their assigned route. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case consists of two space-separated integers N and K. - N is the total number of packages on the route. - K is the maximum number of packages a delivery person can carry in one trip. ------ Output Format ------ For each test case, output the minimum number of trips needed in a single line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^5 ------ Sample Input 1 ------ 3 10 3 15 5 20 4 ------ Sample Output 1 ------ 4 3 5 ------ Explanation 1 ------ Test Case 1: The delivery person has to make lceil dfrac{10}{3} rceil = 4 trips to deliver all 10 packages. Test Case 2: The delivery person has to make lceil dfrac{15}{5} rceil = 3 trips to deliver all 15 packages. Test Case 3: The delivery person has to make lceil dfrac{20}{4} rceil = 5 trips to deliver all 20 packages.","solution":"import math def minimum_trips(T, test_cases): result = [] for i in range(T): N, K = test_cases[i] trips = math.ceil(N / K) result.append(trips) return result"},{"question":"Write a Python function to check if a string can be segmented into a sequence of one or more dictionary words. Given a dictionary of words and a string, determine if the string can be segmented into a space-separated sequence of one or more dictionary words. For example, if the given dictionary contains the words {\'apple\', \'pie\'} and the string is \\"applepie\\", then the string can be segmented into the words \\"apple\\" and \\"pie\\". Your function should return a boolean value indicating whether the string can be segmented in this way. Function Signature ```python def word_break(s: str, word_dict: set) -> bool: pass ``` Input Format - The function `word_break` takes two arguments: - `s` (a string to be segmented). - `word_dict` (a set of strings representing the dictionary of words). Output Format - Return `True` if the string can be segmented using the dictionary words, `False` otherwise. Constraints - The length of `s` will not exceed 1000. - The length of `word_dict` will not exceed 1000. Sample Input ``` \\"applepie\\" {\\"apple\\", \\"pie\\"} ``` Sample Output ``` True ```","solution":"def word_break(s: str, word_dict: set) -> bool: Given a string and a dictionary of words, determine if the string can be segmented into a space-separated sequence of one or more dictionary words. :param s: A string to be segmented. :param word_dict: A set of strings representing the dictionary of words. :return: True if the string can be segmented using the dictionary words, False otherwise. n = len(s) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and s[j:i] in word_dict: dp[i] = True break return dp[n]"},{"question":"The Wildfire Forest Reserve is a protected area known for its rich biodiversity and scenic trails. During certain times of the year, the forest officials conduct safety drills to ensure that all tourists can be safely evacuated in case of an emergency such as a wildfire. Every morning, the forest reserve receives a list of arrival/departure times for tourists planning to visit that day. The management needs a way to determine the maximum number of tourists present in the reserve at any given time throughout the day to effectively plan their safety drills. You have been given the task to write a program that will help the forest officials by calculating this maximum number. **Input** The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of tourists. Each of the next n lines contains two integers ai and bi (0 ≤ ai, bi ≤ 1,000,000) — the arrival and departure times of the i-th tourist. It is guaranteed that a tourist always departs after they arrive (bi > ai). **Output** Print a single integer — the maximum number of tourists present in the forest at the same time. **Examples** **Input** ``` 3 1 5 2 8 4 6 ``` **Output** ``` 3 ``` **Input** ``` 5 1 7 3 6 5 8 2 4 6 9 ``` **Output** ``` 4 ``` **Input** ``` 4 1 3 4 6 2 5 7 8 ``` **Output** ``` 2 ```","solution":"def max_tourists(tourist_times): Given a list of tuples representing the arrival and departure times of tourists, returns the maximum number of tourists present in the forest at the same time. events = [] # create events for all tourist arrivals and departures for arrival, departure in tourist_times: events.append((arrival, \'arrival\')) events.append((departure, \'departure\')) # sort events first by time, then by type (arrival before departure in case of tie) events.sort(key=lambda x: (x[0], x[1] == \'departure\')) max_tourists_present = 0 current_tourists = 0 for event in events: if event[1] == \'arrival\': current_tourists += 1 else: current_tourists -= 1 max_tourists_present = max(max_tourists_present, current_tourists) return max_tourists_present"},{"question":"A company has developed a new task scheduling algorithm that assigns durations to various tasks and checks if they can be executed within a given time limit. Specifically, they want to ensure that each task is either fully executed or not started at all during each time slot. Given a list of tasks with their respective durations and a given maximum time limit per time slot, your task is to determine if the tasks can be scheduled within the given time slots without exceeding the limit. The function should return \'YES\' if it is possible, otherwise return \'NO\'. -----Input----- The first line contains an integer k (1 ≤ k ≤ 200 000) — the number of time slots. The next line contains k space-separated integers t_i (1 ≤ t_i ≤ 10^6) — the durations of the tasks. The third line contains a single integer m (1 ≤ m ≤ 10^6) — the maximum time limit per time slot. -----Output----- Print \'YES\' if it\'s possible to schedule all tasks within the given time slots without exceeding the time limit, otherwise print \'NO\'. -----Examples----- Input 3 4 2 3 5 Output YES Input 2 6 3 4 Output NO ----- Input 4 1 1 1 1 2 Output YES","solution":"def can_schedule_tasks(k, task_durations, max_time_per_slot): Determines if the tasks can be scheduled within the given time slots without exceeding the time limit. Args: k: int, number of time slots. task_durations: list of int, durations of the tasks. max_time_per_slot: int, maximum time limit per time slot. Returns: str: \'YES\' if tasks can be scheduled within the time slots without exceeding the limit, otherwise \'NO\'. # Check if any single task exceeds max_time_per_slot for task in task_durations: if task > max_time_per_slot: return \'NO\' current_sum = 0 time_slots_needed = 1 for duration in task_durations: if current_sum + duration <= max_time_per_slot: current_sum += duration else: time_slots_needed += 1 current_sum = duration if time_slots_needed > k: return \'NO\' return \'YES\'"},{"question":"You are tasked to develop a drone delivery system for a warehouse. The warehouse layout is represented as a grid with `n` rows and `m` columns. Each cell in the grid can either be empty or contain an obstacle. A drone can move between adjacent cells (up, down, left, right) if there\'s no obstacle. Initially, the drone is located at the top-left corner of the grid (cell (1, 1)). The drone must deliver a package to a designated location at the bottom-right corner of the grid (cell (n, m)). Your task is to determine the minimum number of moves required for the drone to reach the destination. If it\'s impossible for the drone to reach the destination, return -1. Input The first line contains `n` and `m` (1 ≤ n, m ≤ 1000) – the number of rows and columns in the grid, respectively. The next `n` lines contain `m` characters each, where \'*\' represents an obstacle and \'.\' represents an empty cell. Output Print a single integer – the minimum number of moves required for the drone to reach the destination, or -1 if it\'s impossible. Example Input 5 5 ..... .***. ..... .***. ..... Output 8 Input 3 4 .*** *... .... Output -1 Note In the first example, the drone can follow this path (denoted by P): P P P . . * * * * P . P P P * * * * . . . . P In the second example, there\'s no possible path for the drone to reach the destination.","solution":"from collections import deque def minimum_moves_to_deliver_package(grid, n, m): Determine the minimum number of moves required for the drone to reach the destination, or return -1 if it\'s impossible. Arguments: grid: List of strings representing the warehouse layout. n: Number of rows in the grid. m: Number of columns in the grid. Returns: int: Minimum number of moves to reach the destination or -1 if impossible. if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) # Start from (0, 0) moves = [[-1 for _ in range(m)] for _ in range(n)] moves[0][0] = 0 # Starting point while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and moves[nx][ny] == -1: moves[nx][ny] = moves[x][y] + 1 queue.append((nx, ny)) return moves[n-1][m-1] def execute_minimum_moves(n, m, layout): Execute the minimum_moves_to_deliver_package function with provided inputs. Args: n: int, number of rows in the grid. m: int, number of columns in the grid. layout: List of strings representing the grid. Returns: int: minimum number of moves or -1 if unreachable. return minimum_moves_to_deliver_package(layout, n, m)"},{"question":"Aidan is practicing sorting algorithms and is curious about the bubble sort algorithm. Given an array of integers, he wants to know how many swaps the bubble sort requires to sort the array in ascending order. Implement a function that counts the number of swaps needed for the bubble sort algorithm to sort an array. -----Input----- The first line of the input contains a single integer T (1 leq T leq 100), the number of test cases. Each of the next T test cases has the following description: The first line of each test case contains a single integer n (1 leq n leq 1000), the size of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 1000), the elements of the array. -----Output----- For each test case, output a single line containing an integer, the number of swaps needed to sort the array using the bubble sort algorithm. -----Example----- Input 3 5 1 3 2 5 4 5 5 4 3 2 1 3 3 2 1 Output 2 10 3 -----Note----- In the first example, the array [1, 3, 2, 5, 4] needs two swaps to become sorted: - Swap 3 and 2. - Swap 5 and 4. In the second example, the array [5, 4, 3, 2, 1] undergoes a series of swaps to become sorted: - Swap 5 and 4, swap 5 and 3, swap 5 and 2, swap 5 and 1. - Swap 4 and 3, swap 4 and 2, swap 4 and 1. - Swap 3 and 2, swap 3 and 1. - Swap 2 and 1. In the third example, the array [3, 2, 1] requires three swaps: - Swap 3 and 2. - Swap 3 and 1. - Swap 2 and 1.","solution":"def count_bubble_sort_swaps(T, test_cases): This function implements the bubble sort algorithm and counts the number of swaps required to sort the array in ascending order for multiple test cases. :param T: Number of test cases :param test_cases: A list of tuples, where each tuple contains: - the size of the array - the array itself :return: A list of integers where each integer represents the number of swaps needed for the corresponding test case result = [] for n, a in test_cases: swaps = 0 for i in range(n): for j in range(0, n - i - 1): if a[j] > a[j + 1]: a[j], a[j + 1] = a[j + 1], a[j] swaps += 1 result.append(swaps) return result"},{"question":"You are given a linked list where each node contains an integer value. Your task is to remove the k-th node from the end of the list and return the head of the updated list. If k is greater than the length of the list, return the list unchanged. Constraints The value of k will be between 1 and 10^5. You may assume all nodes contain distinct values and the length of the list will be between 1 and 10^5. Input and Output The input consists of n, the number of nodes in the linked list followed by the n node values and an integer k. Print the values of the updated linked list in order, separated by spaces. SAMPLE INPUT 5 1 2 3 4 5 2 SAMPLE OUTPUT 1 2 3 5 SAMPLE INPUT 5 1 2 3 4 5 6 SAMPLE OUTPUT 1 2 3 4 5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def remove_kth_from_end(head, k): Removes the k-th node from the end of the linked list. If k is greater than the length of the list, the list is returned unchanged. dummy = ListNode(0) dummy.next = head first = second = dummy # Move first k+1 steps ahead for _ in range(k + 1): if not first: return head first = first.next # Move first to the end, maintaining the gap while first: first = first.next second = second.next # Remove the k-th node second.next = second.next.next return dummy.next # Helper function to create linked list from list def create_linked_list(elements): head = ListNode(elements[0]) current = head for element in elements[1:]: current.next = ListNode(element) current = current.next return head # Helper function to convert linked list to list def linked_list_to_list(head): elements = [] while head: elements.append(head.val) head = head.next return elements"},{"question":"Imagine you are designing a simple banking system. Each account can make a certain number of transactions. The transactions can be either deposits or withdrawals. Given the list of transactions of several accounts, your task is to simulate the final balances of each account and identify accounts with potential overdrafts. # Input The first line contains an integer n (1 ≤ n ≤ 100), representing the number of accounts. Each of the next n lines contains an integer m (1 ≤ m ≤ 1000), representing the number of transactions for the i-th account, followed by m space-separated integers. Each integer is either positive (indicating a deposit) or negative (indicating a withdrawal). # Output Output n lines. Each line should contain the final balance of the account and either \\"OK\\" or \\"Overdraft\\" if the balance is negative. Your answer should be correct if it has no calculation or logical error. # Example **Input** ``` 3 5 100 -50 20 30 -10 2 -10 -20 4 50 50 -60 -40 ``` **Output** ``` 90 OK -30 Overdraft 0 OK ``` # Notes - Ensure no extra characters or whitespace are present in the output. - The balance starts at 0 for each account. - An \\"Overdraft\\" is flagged if the final balance is negative.","solution":"def calculate_final_balances(n, accounts): results = [] for account in accounts: num_transactions = account[0] transactions = account[1:num_transactions + 1] balance = sum(transactions) if balance < 0: results.append(f\\"{balance} Overdraft\\") else: results.append(f\\"{balance} OK\\") return results"},{"question":"A Unique Path in Grid You are provided with an M x N grid which includes some obstacles. Your task is to find the number of unique paths from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. The grid is represented by a two-dimensional list `grid` where `grid[i][j]` can either be 0 (representing an empty cell) or 1 (representing an obstacle). If `grid[i][j]` == 1, you cannot pass through that cell. Given the dimensions of the grid M (rows) and N (columns), write a function to return the number of unique paths that avoid obstacles. Function Signature: ```python def unique_paths_with_obstacles(grid: List[List[int]]) -> int: pass ``` **Input:** * The first line contains two integers M and N, the number of rows and columns respectively. (1 ≤ M, N ≤ 100) * The next M lines contain N integers each, representing the grid. **Output:** * Print a single integer representing the number of unique paths from the top-left corner to the bottom-right corner. **Example Input:** 6 7 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 **Example Output:** 5 **Explanation:** In this example, there are 5 unique paths that navigate from the top-left to the bottom-right without passing through the obstacles: 1. Right, Right, Right, Right, Down, Down, Down, Down, Down 2. Right, Right, Right, Right, Down, Down, Down, Right, Down, Down 3. Right, Right, Down, Right, Right, Down, Down, Down, Down, Right 4. Down, Down, Down, Down, Down, Right, Right, Right, Right 5. Down, Down, Right, Down, Down, Down, Right, Right, Right Your solution should efficiently compute the number of unique paths using dynamic programming to ensure performance within the constraints.","solution":"def unique_paths_with_obstacles(grid): M = len(grid) N = len(grid[0]) if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 dp = [[0]*N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1]"},{"question":"Petya likes to collect coins, and she has a peculiar way to do so. She collects coins by forming bundles of exactly K coins. Given a sequence of integers where each integer represents the number of coins in a pile, Petya can join multiple piles together to form the required bundles. However, she cannot break a pile to form smaller bundles. For instance, if the sequence of piles is [3, 5, 2, 7] and K is 6, Petya can form a bundle from the second and third piles (5 + 2 = 7, only takes 6 out of it), but she won\'t be able to form a bundle from any other combination without exceeding or lacking coins. Write a function to determine the maximum number of bundles Petya can form given the piles of coins and the bundle size K. -----Constraints----- - 1 ≤ the length of the sequence ≤ 10^5 - 1 ≤ size of pile ≤ 10^9 - 1 ≤ K ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: - First line contains an integer K - Second line contains a list of integers separated by space representing the piles of coins -----Output----- Print only a single integer, the maximum number of bundles Petya can form. -----Sample Input----- 6 3 5 2 7 1 8 -----Sample Output----- 2 Explanation: - Petya can form one bundle from 5 (second pile) and 1 (fifth pile) (5 + 1 = 6) - Petya can form another bundle from the last pile itself (8) by taking 6 out of it.","solution":"def max_bundles(K, piles): bundles_count = 0 for pile in piles: bundles_count += pile // K return bundles_count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() K = int(data[0]) piles = list(map(int, data[1:])) print(max_bundles(K, piles))"},{"question":"A park ranger is tracking the migration of a certain bird species. The birds migrate according to a pattern defined by \\"flight points\\", which are specific coordinates in a 2D plane that the birds touch upon during their journey. The ranger has observed and recorded these flight points on multiple days. Birds are said to be following a \\"circular path\\" on a given day if the recorded flight points form a perfect circle centered at the origin (0, 0). Given the coordinates of the flight points observed on a day, determine if they form a perfect circle centered at the origin. A perfect circle requires all given points to be at the same distance from the origin. Input & Output: The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of flight points observed on that day. The next N lines contain two integers X and Y, representing the coordinates of each flight point. For each test case, output \\"YES\\" if the points form a perfect circle centered at the origin, and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 100 3 ≤ N ≤ 1000 -10^4 ≤ X, Y ≤ 10^4 SAMPLE INPUT 2 4 1 1 -1 -1 -1 1 1 -1 3 0 2 2 2 -2 -2 SAMPLE OUTPUT YES NO Explanation: 1) In the first case, the four points all lie at the same distance from the origin, forming a circle centered at the origin. Hence, the output is \\"YES\\". 2) In the second case, the three points do not all lie at the same distance from the origin, so the output is \\"NO\\".","solution":"import math def is_perfect_circle(flight_points): distances = [math.sqrt(x**2 + y**2) for x, y in flight_points] return all(abs(d - distances[0]) < 1e-6 for d in distances) def check_circular_paths(test_cases): results = [] for points in test_cases: if is_perfect_circle(points): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 points = [] for _ in range(N): x, y = map(int, lines[index].split()) index += 1 points.append((x, y)) test_cases.append(points) return test_cases def main(input_str): test_cases = parse_input(input_str) results = check_circular_paths(test_cases) return \\"n\\".join(results)"},{"question":"You are given a string consisting of lowercase letters. Your task is to determine the length of the longest subsequence such that the subsequence is a valid palindrome and the frequency of each character in the subsequence is even. -----Input----- The input consists of a single line containing a string S of length 1 to 1000. -----Output----- Output a single integer, the length of the longest subsequence that is a palindrome and has an even frequency of each character. -----Examples----- Sample Input: abccccdd Sample Output: 6 Sample Input: aabbcc Sample Output: 6 Sample Input: abcdef Sample Output: 0","solution":"def longest_even_palindrome_subsequence(s): Given a string s, returns the length of the longest subsequence that is a palindrome and all characters have even frequencies. from collections import Counter char_count = Counter(s) length = 0 for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 return length"},{"question":"Max is a talented gardener who loves arranging his plant pots in the form of pyramids. Each layer of the pyramid is formed by placing plant pots in a row, and each successive row above has one less pot than the row below it. Max wants to build the tallest possible pyramid using the pots he has, and your task is to determine the height of the tallest pyramid that can be built with a given number of pots. The pyramid\'s height is the number of rows it contains. For example, if Max has 14 pots, the tallest pyramid he can build is: ``` * ** *** **** ``` This pyramid has 4 rows and uses 10 pots. If Max has more pots left after forming the tallest possible pyramid, they are not used. Input The input consists of a single integer n representing the number of pots Max has. Output The output should be a single integer representing the height of the tallest pyramid that can be built with n pots. Example Input 14 Output 4 Explanation With 14 pots, Max can build a pyramid of 4 rows (as shown above) using 10 pots in total. Input 20 Output 5 Explanation With 20 pots, Max can build a pyramid of 5 rows: ``` * ** *** **** ***** ``` This pyramid uses 15 pots in total. Thus, the height of the pyramid is 5.","solution":"def max_pyramid_height(n): This function calculates the height of the tallest pyramid that can be built with n pots. height = 0 total_pots = 0 while total_pots + (height + 1) <= n: height += 1 total_pots += height return height"},{"question":"You are given a sequence of integers and you are tasked with finding the maximal possible length of a subsequence where the absolute difference between any two consecutive elements is at least a given number. Input The first line contains two integers n and d (1 ≤ n ≤ 10^5, 1 ≤ d ≤ 10^9) — the number of elements in the sequence and the minimum allowed absolute difference between any two consecutive elements in the subsequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the sequence. Output Print a single integer — the maximal possible length of a subsequence where the absolute difference between any two consecutive elements is at least d. Examples Input 5 3 1 5 3 9 7 Output 3 Explanation: One possible subsequence could be [1, 5, 9]. Input 6 2 4 2 6 8 3 1 Output 4 Explanation: One possible subsequence could be [1, 3, 6, 8]. Input 4 5 10 1 6 2 Output 2 Explanation: One possible subsequence could be [1, 6].","solution":"def max_subsequence_length(n, d, sequence): Returns the maximal possible length of a subsequence where the absolute difference between any two consecutive elements is at least d. Parameters: n (int): Length of the input sequence. d (int): Minimum allowed absolute difference. sequence (list of int): List of integers representing the sequence. Returns: int: Maximal length of the subsequence. if not sequence: return 0 sequence.sort() count = 1 last_element = sequence[0] for i in range(1, n): if abs(sequence[i] - last_element) >= d: count += 1 last_element = sequence[i] return count # Example usage: # length = max_subsequence_length(5, 3, [1, 5, 3, 9, 7]) # print(length) # Output: 3"},{"question":"You are given a string s consisting of only lowercase English alphabets. Write a program to find the frequency of the character \'a\' in the string and output its count. Example 1: Input: s = \\"apple\\" Output: 1 Explanation: The character \'a\' appears once in \\"apple\\". Example 2: Input: s = \\"banana\\" Output: 3 Explanation: The character \'a\' appears three times in \\"banana\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function countA() which takes a string s and returns the count of character \'a\' in it. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Note: n is the length of the string s. Constraints: 1 ≤ n ≤ 1000","solution":"def countA(s): Returns the frequency of the character \'a\' in the string s. return s.count(\'a\')"},{"question":"Alex loves designing patterns using various characters. One of his favorite patterns is a pyramid of asterisks (\'*\'). He defines the pyramid such that the first row contains one asterisk, the second row contains two asterisks, and so on until the nth row which contains n asterisks. However, Alex has a twist in his pyramid. Each row must be right-aligned with respect to the base width of the pyramid. For example, if n is 5, the base width is also 5. This means the first row will have 4 leading spaces followed by 1 asterisk, the second row will have 3 leading spaces followed by 2 asterisks, and so forth. Write a program that takes an integer input n (1 ≤ n ≤ 100) representing the number of rows and prints the right-aligned pyramid based on the rules defined by Alex. -----Input----- The first line contains the integer n (1 ≤ n ≤ 100) — the number of rows in the pyramid. -----Output----- Print the pyramid where each row is right-aligned with respect to the base width. -----Examples----- Input 5 Output * ** *** **** ***** Input 3 Output * ** *** Input 6 Output * ** *** **** ***** ******","solution":"def right_aligned_pyramid(n): Prints a right-aligned pyramid of asterisks with n rows. for i in range(1, n + 1): leading_spaces = \' \' * (n - i) stars = \'*\' * i print(leading_spaces + stars)"},{"question":"In a bustling market, sellers have various techniques to attract customers. One popular method is the \\"buy one get x free\\" offer, where customers can buy one item and get x additional items for free. The sellers want to understand how enticing their offers are by analyzing how many items a customer can get if they buy n initial items and make full use of the \\"buy one get x free\\" offer. Write a program to determine the total number of items a customer can get under various promotions. The program should input the number of initial items n (1 ≤ n ≤ 1000) and the free items x (1 ≤ x ≤ 10000) provided with each purchase. The program will then output the total number of items the customer will receive including the initially bought items. Input The input consists of multiple datasets. Each dataset is provided in the following format: n x The end of input is indicated by a single line containing two zeros: \'0 0\'. Each pair-n x line is a dataset and must be processed independently. Output For each dataset, print the total number of items the customer receives. Output the results, one per line. Example Input 2 3 5 10 7 2 0 0 Output 8 55 21","solution":"def calculate_total_items(n, x): Calculate the total number of items a customer can get with \'buy n get x free\' offer. if n == 0 and x == 0: return None return n + n * x def process_input(input_data): results = [] for line in input_data: n, x = map(int, line.split()) if n == 0 and x == 0: break result = calculate_total_items(n, x) if result is not None: results.append(result) return results"},{"question":"You are given a string S of length N consisting of lowercase English letters. Your task is to check if you can remove characters from the string to form a palindrome. If possible, print \\"YES\\", otherwise print \\"NO\\". Constraints - 1 ≤ N ≤ 10^5 - S only consists of lowercase English letters. Input Input is given from Standard Input in the following format: N S Output Print \\"YES\\" if it is possible to remove some characters to make the string a palindrome, otherwise print \\"NO\\". Examples Input 6 abccba Output YES Input 5 abcde Output NO Input 7 racecar Output YES","solution":"def can_form_palindrome(S): Checks if characters can be removed from the string S to form a palindrome. from collections import Counter char_count = Counter(S) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd count. if odd_count <= 1: return \\"YES\\" else: return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) S = data[1] print(can_form_palindrome(S))"},{"question":"You are given a 2D binary grid of size m x n where 0 represents water and 1 represents land. An island is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water. Your task is to count the number of distinct islands in the grid. Example: Input: grid = [ [1,1,0,0,0], [1,1,0,0,0], [0,0,1,0,0], [0,0,0,1,1] ] Output: 3 Explanation: Here, the first island is formed by grid cells grid[0][0], grid[0][1], grid[1][0], and grid[1][1]. The second island is formed by the single grid cell grid[2][2]. The third island is formed by grid cells grid[3][3] and grid[3][4]. Your Task: You don\'t need to read input or print anything. Complete the function countIslands() which takes the 2D grid grid and returns the number of distinct islands. Constraint: 1 <= m, n <= 300 Expected Time Complexity: O(m * n) Expected Space Complexity: O(m * n)","solution":"def countIslands(grid): Returns the number of distinct islands in the given 2D binary grid. def dfs(grid, visited, i, j): stack = [(i, j)] while stack: x, y = stack.pop() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny] and grid[nx][ny] == 1: visited[nx][ny] = True stack.append((nx, ny)) if not grid: return 0 m, n = len(grid), len(grid[0]) visited = [[False for _ in range(n)] for _ in range(m)] islands_count = 0 for i in range(m): for j in range(n): if grid[i][j] == 1 and not visited[i][j]: dfs(grid, visited, i, j) islands_count += 1 return islands_count"},{"question":"A newly established delivery service company has received n delivery orders, each referred to as a \\"parcel\\". Each parcel has a delivery address and needs to be delivered to a designated location. The company has m delivery trucks available. Each truck has a maximum delivery capacity that limits the number of parcels it can carry at once. The company wants to ensure that all parcels are delivered as efficiently as possible. Your task is to determine an effective way to allocate parcels to trucks so that no truck exceeds its delivery capacity, and every parcel is assigned to exactly one truck. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), indicating the number of parcels and the number of trucks, respectively. The second line contains n integers, where the i-th integer pi (1 ≤ pi ≤ 1000) represents the delivery location of the i-th parcel. The third line contains m integers, where the j-th integer cj (1 ≤ cj ≤ 100) represents the maximum delivery capacity of the j-th truck. Output Output a matrix of dimension m x n, where each element is either 0 or 1. A 1 in row i and column j means that the i-th truck will deliver the j-th parcel. A 0 means it will not. Ensure that each column of the matrix has exactly one \'1\' (indicating each parcel is assigned to one truck) and the sum of each row does not exceed the corresponding truck\'s capacity. Example Input 5 3 20 35 50 40 60 2 1 2 Output 1 0 1 0 0 0 1 0 0 0 0 0 0 1 1 Note In this example, the trucks have the following capacities: Truck 1 can deliver 2 parcels, Truck 2 can deliver 1 parcel, and Truck 3 can deliver 2 parcels. The delivery locations of the parcels are given. The objective is to allocate parcels to trucks such that each truck does not exceed its delivery capacity and each parcel is delivered by exactly one truck.","solution":"def allocate_parcels(n, m, parcels, capacities): allocation = [[0] * n for _ in range(m)] parcel_index = 0 for truck_index in range(m): remaining_capacity = capacities[truck_index] while remaining_capacity > 0 and parcel_index < n: allocation[truck_index][parcel_index] = 1 remaining_capacity -= 1 parcel_index += 1 return allocation"},{"question":"You are given N tasks numbered from 1 to N, and M prerequisites numbered from 1 to M where each prerequisite is a pair of tasks (A_i, B_i) such that you must complete task A_i before you can start task B_i. Your goal is to find the order in which to complete tasks to satisfy all the prerequisites, if possible. If there are multiple valid orderings, output any one of them. If it\'s not possible to complete all the tasks due to a cycle, output \\"Impossible\\". Constraints * 1 leq N leq 100,000 * 0 leq M leq 100,000 * 1 leq A_i, B_i leq N Input Input is given from Standard Input in the following format: N M A_1 B_1 A_2 B_2 : A_M B_M Output Print the order of tasks to complete all the tasks, or \\"Impossible\\" if it\'s not possible. Example Input 4 3 1 2 3 2 4 3 Output 1 4 3 2 Example Input 2 2 1 2 2 1 Output Impossible","solution":"from collections import defaultdict, deque def find_task_order(N, M, prerequisites): # Create an adjacency list and indegree array adj_list = defaultdict(list) indegree = [0] * (N + 1) # Populate the adjacency list and indegree array for A, B in prerequisites: adj_list[A].append(B) indegree[B] += 1 # Initialize a queue with all tasks having 0 indegree queue = deque([i for i in range(1, N + 1) if indegree[i] == 0]) order = [] # Process the queue while queue: current = queue.popleft() order.append(current) # Decrease the indegree of neighbors and add to queue if they become 0 for neighbor in adj_list[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If the order contains all tasks, return the order, else return Impossible if len(order) == N: return \\" \\".join(map(str, order)) else: return \\"Impossible\\" def main(input_str): input_lines = input_str.strip().split(\\"n\\") N, M = map(int, input_lines[0].split()) prerequisites = [tuple(map(int, line.split())) for line in input_lines[1:]] return find_task_order(N, M, prerequisites)"},{"question":"Bob is organizing his library, which contains n books. Each book has a positive integer weight w_i. Bob wants to move exactly two books at a time into a box, such that the sum of the weights of these two books is maximized. Each book can be moved into the box only once. Determine the maximum possible sum of weights of two books that Bob can achieve. -----Input----- The first line contains a single integer t (1leq tleq 10^4) — the number of test cases. The first line of each test case contains a single integer n (2leq nleq 2cdot 10^5) — the number of books in the library. The second line of each test case contains n integers w_1, w_2, ..., w_n (1 leq w_i leq 10^9) — the weights of the books. It is guaranteed that the sum of n across all test cases does not exceed 2cdot 10^5. -----Output----- For each test case, print a single integer — the maximum sum of weights of two books that Bob can achieve. -----Examples----- Input 3 3 1 2 4 4 5 1 2 9 5 7 5 12 8 10 Output 6 14 22 -----Note----- In the first case, the optimal pair of books is those with weights 2 and 4, summing to 6. In the second case, the optimal pair of books is those with weights 5 and 9, summing to 14. In the third case, the optimal pair of books is those with weights 12 and 10, summing to 22.","solution":"def max_sum_of_two_books(test_cases): results = [] for books in test_cases: # Sort the books weights weights = sorted(books) # The maximum sum of two books will be the sum of the two heaviest books results.append(weights[-1] + weights[-2]) return results # Helper function to parse input into format required by max_sum_of_two_books function def parse_input(input_string): data = input_string.strip().split(\'n\') idx = 0 t = int(data[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(data[idx]) idx += 1 weights = list(map(int, data[idx].split())) idx += 1 test_cases.append(weights) return test_cases def max_sum_weights(input_string): test_cases = parse_input(input_string) return max_sum_of_two_books(test_cases)"},{"question":"You are given a string `X` and `Y` containing only lowercase letters. You need to determine if `X` is a \\"rotation\\" of `Y`. One string is considered a rotation of another if it can be obtained by rotating the characters of the original string around its ends. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\". Input: The first line contains the string `X`. The second line contains the string `Y`. Output: Output \\"YES\\" if `X` is a rotation of `Y`, otherwise output \\"NO\\". Constraints: - 1 ≤ length of `X`, `Y` ≤ 100 SAMPLE INPUT erbottlewat waterbottle SAMPLE OUTPUT YES SAMPLE INPUT hello ohell SAMPLE OUTPUT YES SAMPLE INPUT abc bac SAMPLE OUTPUT NO","solution":"def is_rotation(X, Y): Returns \\"YES\\" if X is a rotation of Y, otherwise returns \\"NO\\". if len(X) != len(Y): return \\"NO\\" return \\"YES\\" if Y in X + X else \\"NO\\""},{"question":"You are given a list of integers. Your task is to find the length of the longest contiguous subarray where the difference between the maximum and minimum element in the subarray is at most a given integer X. -----Constraints----- - 1 leq N leq 100 - 0 leq A_i leq 100 - 0 leq X leq 100 -----Input----- Input is given from Standard Input in the following format: N X A_1 A_2 A_3 ... A_{N} -----Output----- Print the length of the longest contiguous subarray where the difference between the maximum and minimum element is at most X. -----Sample Input----- 6 3 10 1 2 3 10 4 -----Sample Output----- 3 Explanation: The longest contiguous subarray satisfying the condition is either [1, 2, 3] or [2, 3, 10] where the difference between the maximum and minimum of the subarray is at most 3. The length of this subarray is 3.","solution":"def longest_contiguous_subarray(N, X, A): Finds the length of the longest contiguous subarray where the difference between the maximum and minimum element in the subarray is at most X. max_length = 0 for i in range(N): min_val = A[i] max_val = A[i] for j in range(i, N): min_val = min(min_val, A[j]) max_val = max(max_val, A[j]) if max_val - min_val <= X: max_length = max(max_length, j - i + 1) else: break return max_length"},{"question":"In a certain city, there is a famous street filled with food stalls called Foodie Street. Each stall is either a vegetarian stall, non-vegetarian stall, or a mixed stall (offering both vegetarian and non-vegetarian dishes). The local authority decides to keep track of how many stalls of each type are located on Foodie Street. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 100 000) — the number of food stalls on Foodie Street. Each of the following n lines contains a string s_{i} — the type of the i-th food stall. The string can be either: \\"Vegetarian\\" (without quotes), if the i-th food stall is a vegetarian stall. \\"Non-Vegetarian\\" (without quotes), if the i-th food stall is a non-vegetarian stall. \\"Mixed\\" (without quotes), if the i-th food stall is a mixed stall. -----Output----- Print three numbers on a single line separated by a space — the number of Vegetarian stalls, Non-Vegetarian stalls, and Mixed stalls respectively. -----Examples----- Input 5 Vegetarian Non-Vegetarian Mixed Vegetarian Mixed Output 2 1 2 Input 4 Mixed Mixed Vegetarian Non-Vegetarian Output 1 1 2 -----Note----- In the first sample, there are two vegetarian stalls, one non-vegetarian stall, and two mixed stalls. The output should be \\"2 1 2\\". In the second sample, there is one vegetarian stall, one non-vegetarian stall, and two mixed stalls. The output should be \\"1 1 2\\".","solution":"def count_stall_types(n, stall_types): Counts the number of each type of food stall. Parameters: n (int): The number of food stalls. stall_types (list of str): A list of strings where each string is one of \\"Vegetarian\\", \\"Non-Vegetarian\\", or \\"Mixed\\". Returns: tuple: A tuple of three integers representing the counts of \\"Vegetarian\\", \\"Non-Vegetarian\\", and \\"Mixed\\" stalls respectively. vegetarian_count = 0 non_vegetarian_count = 0 mixed_count = 0 for stall in stall_types: if stall == \\"Vegetarian\\": vegetarian_count += 1 elif stall == \\"Non-Vegetarian\\": non_vegetarian_count += 1 elif stall == \\"Mixed\\": mixed_count += 1 return vegetarian_count, non_vegetarian_count, mixed_count"},{"question":"You are given the duration of three tasks in minutes. There are three workers and each worker can work on only one task. The tasks should be assigned such that the task with the longest duration is assigned to the most experienced worker, the second longest to the second most experienced, and the shortest to the least experienced worker. The tasks should be assigned in a way that no worker is idle. Input The only line contains three integer numbers d1, d2, d3 (1 ≤ d1, d2, d3 ≤ 100) — the duration of the tasks. Output Print three numbers w1, w2, w3 (1 ≤ w1, w2, w3 ≤ 3), all of them should be distinct. The first number stands for the experience level of the worker which will get the first task (1 stands for the most experienced, 3 for the least experienced). The second and third numbers mean the experience level of the workers who get the second and the third task respectively. If there are multiple answers, print any of them. Examples Input 20 15 25 Output 2 3 1 Input 45 20 35 Output 1 3 2 Note In the second sample another possible answer is \\"1 2 3\\".","solution":"def assign_tasks(d1, d2, d3): Assigns tasks\' durations to workers based on their experience levels. The longest duration task goes to the most experienced worker (1), the second longest to the second most experienced (2), and the shortest to the least experienced (3). Returns: tuple: experience level assignments for each task in the order they were given. durations = [(d1, 1), (d2, 2), (d3, 3)] # Sort tasks by their durations in descending order sorted_durations = sorted(durations, key=lambda x: x[0], reverse=True) # Mapping of durations after sorting them into their experience levels experience_assignment = [0] * 3 for i, (_, original_index) in enumerate(sorted_durations): # Assign experience level (1-based) to original task position experience_assignment[original_index - 1] = i + 1 return tuple(experience_assignment)"},{"question":"Write a function, `largest_integer`, that takes a list of non-negative integers and returns the largest integer that can be formed by concatenating the integers together. For example, given `[50, 2, 1, 9]`, the largest integer would be `95021`. Function Signature `def largest_integer(numbers: List[int]) -> str:` Parameters - `numbers (List[int])`: A list of non-negative integers. Returns - `str`: A string representing the largest integer formed by concatenating the integers. Input Format - The input contains a single list of non-negative integers. Constraints - 1 leq text{len(numbers)} leq 100 - 0 leq text{numbers[i]} leq 10^9 Output Format - Return the largest integer formed by concatenating the integers as a string. Sample Input 1 `[10, 2]` Sample Output 1 `210` Sample Input 2 `[3, 30, 34, 5, 9]` Sample Output 2 `9534330` Explanation In the first sample, the largest integer that can be formed by concatenating `10` and `2` is `210`. In the second sample, the largest integer that can be formed by concatenating `3`, `30`, `34`, `5`, and `9` is `9534330`. The order of concatenation matters to form the largest possible integer. For instance, placing `3` before `30` results in a larger number because `330` is larger than `303`.","solution":"from typing import List from functools import cmp_to_key def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largest_integer(numbers: List[int]) -> str: # Convert all the integers to strings str_numbers = list(map(str, numbers)) # Sort the numbers based on their possible concatenation results str_numbers.sort(key=cmp_to_key(compare)) # Join all sorted numbers in a single string largest_num = \'\'.join(str_numbers) # Handle case where resulting number is all zeros if largest_num.lstrip(\'0\') == \'\': return \'0\' return largest_num"},{"question":"```python Write a function called `spiralTraversal` that takes a 2D matrix (a list of lists) as an argument and returns a list of its elements in spiral order. The spiral order starts at the top-left element and proceeds to the right, then down, then left, and finally up, repeating this pattern until all elements have been added to the output list. For example: ```python input_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] spiralTraversal(input_matrix) # Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` Note: - You can assume that the matrix will have at least one element. - Both the width and height of the matrix will be at most 100. ```","solution":"def spiralTraversal(matrix): Returns the elements of the matrix in spiral order. :param matrix: List[List[int]] - The 2D list of integers :return: List[int] - The elements of the matrix in spiral order if not matrix or not matrix[0]: return [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 result = [] while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"Sally has a string of lowercase English letters and wants to know if she can rearrange it to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd frequency, while all other characters have even frequencies. Determine whether Sally can rearrange the string to form a palindrome or not. # Constraints * 1 leq |S| leq 100 * S consists of lowercase English letters. # Input The input is a single string S. # Output Print `Yes` if Sally can rearrange the string to form a palindrome, otherwise print `No`. # Examples Input aabb Output Yes Input aaabb Output Yes Input abc Output No Input racecar Output Yes Input xxyyyzzz Output No","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. Args: s (str): The input string consisting of lowercase English letters. Returns: str: \'Yes\' if the string can be rearranged to form a palindrome, otherwise \'No\'. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # The string can be rearranged to form a palindrome if at most one character has an odd count if odd_count <= 1: return \'Yes\' else: return \'No\'"},{"question":"Given a list of non-negative integers representing the amount of money in each house, you are a burglar who wants to rob houses along a street while ensuring that you do not rob two adjacent houses, as this will trigger an alarm. Write a function `max_robbery(houses)` that returns the maximum amount of money you can rob without triggering the alarm. ``` EXAMPLES: max_robbery([1,2,3,1]) = 4 max_robbery([2,7,9,3,1]) = 12 max_robbery([5,3,4,11,2]) = 16 ``` The length of the list will be between 0 and 100, and each house\'s money amount will be an integer between 0 and 1,000.","solution":"def max_robbery(houses): Returns the maximum amount of money that can be robbed without triggering the alarm. :param houses: List of non-negative integers representing the amount of money in each house. :return: Maximum amount of money that can be robbed. n = len(houses) if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(houses[i] + dp[i - 2], dp[i - 1]) return dp[-1]"},{"question":"Min and Max Temperature Description: A weather station tracks the minimum and maximum temperatures recorded at various times throughout the day. You are given a sequence of these temperature records for a single day, and your task is to compute the minimum and maximum temperatures over a specific range of time, based on multiple queries. Constraints: * 1 ≤ n ≤ 100000 (number of temperature records) * 1 ≤ q ≤ 1000 (number of queries) * -100 ≤ temperaturei ≤ 100 (temperature value) * 1 ≤ timei ≤ 50000 (time value) * Each query specifies a range of time [start, end]. Input: The first line contains an integer n indicating the number of temperature records. The next n lines each contain a time and a temperature value separated by a space. The next line contains an integer q indicating the number of queries. The following q lines each contain two integers representing the start time and the end time of the query range, separated by a space. Output: For each query, print the minimum and maximum temperature in the specified time range (inclusive) on a new line. Example: Input: 6 1 30 2 35 3 25 4 40 5 32 6 28 3 1 3 2 5 4 6 Output: 25 35 25 40 28 40","solution":"def min_max_temperature(n, records, q, queries): Computes the minimum and maximum temperatures over a specific range of time for multiple queries. Parameters: n (int): number of temperature records records (list of tuples): each tuple contains (time, temperature) q (int): number of queries queries (list of tuples): each tuple contains (start_time, end_time) Returns: list of tuples: each tuple contains (min_temperature, max_temperature) for the respective query results = [] # Convert records into a dictionary for quick access temp_dict = {time: temp for time, temp in records} for start, end in queries: temps = [temp_dict[time] for time in range(start, end + 1) if time in temp_dict] if temps: min_temp = min(temps) max_temp = max(temps) results.append((min_temp, max_temp)) return results"},{"question":"You are given an array of integers representing the population of different towns. A government reform is to be implemented that affects a consecutive range of towns. For each reform operation, you need to find and output the minimum population among the towns in the specified range. **Input Format:** - The first line of the input contains two integers, `N` and `Q` - the number of towns and the number of queries, respectively. - The second line contains `N` space-separated integers, where each integer represents the population of a town. - Each of the next `Q` lines contains two integers, `L` and `R`, which represent the starting and ending indices of the range of towns to be considered in that query (inclusive). **Output Format:** - For each query, output the minimum population in the specified range of towns. **Constraints:** - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ population of any town ≤ 1000000 - 0 ≤ L ≤ R < N **Sample Input:** ``` 5 3 10 5 20 3 25 0 1 1 3 2 4 ``` **Sample Output:** ``` 5 3 3 ``` **Explanation:** Consider the array of populations: `[10, 5, 20, 3, 25]` 1. For the first query `(0, 1)`: The minimum population between towns 0 and 1 is `min(10, 5) = 5`. 2. For the second query `(1, 3)`: The minimum population between towns 1 and 3 is `min(5, 20, 3) = 3`. 3. For the third query `(2, 4)`: The minimum population between towns 2 and 4 is `min(20, 3, 25) = 3`.","solution":"def min_population_in_range(N, Q, populations, queries): Returns the minimum population for each query range. :param N: Number of towns :param Q: Number of queries :param populations: List of populations of the towns :param queries: List of tuples representing the queries :return: List of minimum populations for each query results = [] for query in queries: L, R = query min_population = min(populations[L:R+1]) results.append(min_population) return results"},{"question":"Given are positive integers N and K. You need to construct the smallest possible number by concatenating exactly K integers chosen from the interval [1, N] (both inclusive). -----Constraints----- - All values in input are integers. - 1 leq N leq 1000 - 1 leq K leq 10 -----Input----- Input is given from Standard Input in the following format: N K -----Output----- Print the smallest possible number formed by concatenating K integers chosen from the given range. -----Sample Input----- 5 3 -----Sample Output----- 111 Explanation: From the range [1, 5], the smallest possible number formed by concatenating three integers is \'111\'. For N = 10 and K = 4, the smallest possible number would be \'1111\'.","solution":"def smallest_concatenated_number(N, K): Constructs the smallest possible number by concatenating exactly K integers chosen from the interval [1, N]. Args: N : int : The upper limit of the selection range (inclusive). K : int : The number of integers to concatenate. Returns: str : The smallest possible concatenated number. return \'1\' * K"},{"question":"Emma is working on a project to organize a music playlist. She wants to create a playlist such that no two consecutive songs are of the same genre. You are given a list of song genres as an array. Help her determine if it\'s possible to reorder the array so that no two consecutive elements are the same. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the number of songs in the list. The second line contains n integers g_1, g_2, ldots, g_n (1 leq g_i leq 50) — the genre of each song. -----Output----- Print \\"YES\\" if it\'s possible to reorder the playlist such that no two consecutive songs have the same genre. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 1 2 2 3 Output YES Input 4 1 1 1 1 Output NO -----Note----- In the first example, one possible rearrangement is 1 2 1 3 2 where no two consecutive songs have the same genre. In the second example, it\'s not possible to reorder the songs in such a way because all songs are of the same genre.","solution":"def can_reorder_playlist(n, genres): Returns \\"YES\\" if it\'s possible to reorder the playlist such that no two consecutive songs have the same genre, otherwise returns \\"NO\\". from collections import Counter # Count frequencies of each genre freq = Counter(genres) # Find the maximum frequency max_freq = max(freq.values()) # If the most frequent element appears more than (n + 1) // 2 times, it\'s not possible if max_freq > (n + 1) // 2: return \\"NO\\" else: return \\"YES\\" # Example usage: # print(can_reorder_playlist(5, [1, 1, 2, 2, 3])) # Output: \\"YES\\" # print(can_reorder_playlist(4, [1, 1, 1, 1])) # Output: \\"NO\\""},{"question":"A social media platform is organizing a special event where users can participate on multiple days to win prizes. Each user has a unique ID and is active on different days. During the event, the platform wants to ensure that a user does not participate on consecutive days; otherwise, their participation will be invalid. The platform wants to determine the maximum number of valid participations. Given a list of user activities with user IDs and the day they participated, find the maximum number of valid user participations. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of an integer N representing the number of users, followed by N lines, each containing two space-separated integers: userID (a unique identifier for a user) and day (the day the user participated). ------ Output Format ------ For each test case, output a single line containing one integer – the maximum number of valid participations. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ userID ≤ 10^5 1 ≤ day ≤ 10^6 ----- Sample Input 1 ------ 2 5 1 1 2 2 1 3 3 4 2 5 4 1 1 2 1 3 2 1 2 ----- Sample Output 1 ------ 5 3 ----- explanation 1 ------ Test Case 1: There are five participations. The user participation days are: user 1 on day 1 and 3, user 2 on day 2 and 5, user 3 on day 4. All participations are valid since no user participates on consecutive days. Test Case 2: There are four participations. Users participate on day 1 and 2. Users 1 and 1 on consecutive days are invalid. Maximum valid participation is to choose users 1 on day 1, user 2 on day 1, and user 3 on day 2.","solution":"def max_valid_participations(T, test_cases): results = [] for i in range(T): N, activities = test_cases[i] user_days = {} for user_id, day in activities: if user_id not in user_days: user_days[user_id] = [] user_days[user_id].append(day) valid_count = 0 for user_id in user_days: days = sorted(user_days[user_id]) valid_count += 1 # First day is always valid for j in range(1, len(days)): if days[j] != days[j-1] + 1: valid_count += 1 results.append(valid_count) return results"},{"question":"To manage the logistics for a large-scale event, EventMaster needs to arrange transportation for all their guests. The guests are arriving at various times throughout the day, and each guest has a designated arrival time. EventMaster wants to ensure that all guests are transported with the fewest number of trips possible, given that each trip can only start when at least one guest is ready to leave (i.e., has arrived). Each trip can transport any number of guests but cannot wait for guests arriving after it has started. Your task is to determine the minimum number of trips required to transport all the guests. Input Format The first line of input contains the number of test cases T. (1 ≤ T ≤ 10) The second line of each test case contains the number of guests N. (1 ≤ N ≤ 100,000) The third line contains N space-separated integers representing the arrival times of the guests in minutes past midnight. Output Format For each test case, output a single line containing the minimum number of trips required. SAMPLE INPUT 2 5 1 3 3 9 10 4 0 0 0 0 SAMPLE OUTPUT 4 1","solution":"def min_trips(test_cases): results = [] for case in test_cases: N, arrival_times = case arrival_times.sort() trips = 0 current_time = -1 for time in arrival_times: if time > current_time: trips += 1 current_time = time results.append(trips) return results # Helper function for parsing input def parse_input(input_str): data = input_str.strip().split(\'n\') T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) arrival_times = list(map(int, data[index + 1].split())) test_cases.append((N, arrival_times)) index += 2 return test_cases"},{"question":"James has a collection of N different types of coins, each with a different value. He wants to calculate the number of ways he can make a particular amount of money, M, using any number of coins from his collection. Coins can be used multiple times. Write a function `coin_change` that takes in an array `coins` containing the values of the N coins, and an integer `M` representing the desired amount of money. Your function should return the number of distinct ways to make the amount M using the given coins. Input: - The function should take in the following parameters: - An array of integers `coins` of length N, where each integer represents the value of a coin. - An integer `M` representing the amount of money to be made. Output: - The function should return an integer representing the number of distinct ways to make the amount M using any number of coins from the collection. Constraints: - 1 ≤ N ≤ 100 - 1 ≤ coin values ≤ 1000 - 1 ≤ M ≤ 10000 Example: ```python def coin_change(coins, M): # Your implementation here # Sample Test Case coins = [1, 2, 5] M = 5 print(coin_change(coins, M)) # Output: 4 ``` Explanation: There are 4 ways to make amount 5 with coins [1, 2, 5]: 1. 1+1+1+1+1 2. 1+1+1+2 3. 1+2+2 4. 5","solution":"def coin_change(coins, M): Function to calculate the number of ways to make amount M using any number of given coins. # Create an array to store the number of ways we can make each amount from 0 to M dp = [0] * (M + 1) # There is one way to make zero amount, which is to use no coins dp[0] = 1 # Iterate over each coin and update the dp array for coin in coins: for amount in range(coin, M + 1): dp[amount] += dp[amount - coin] # The value at dp[M] will be the number of ways to make amount M return dp[M]"},{"question":"Write a function to reverse the digits of a positive integer number except for leading zeros. Make sure that the result does not contain any leading zeros. Function Signature: ```python def reverse_number(n: int) -> int: pass ``` # Input - An integer `n` (1 ≤ n ≤ 10^9). # Output - An integer representing the reversed digits. # Example Example 1 Input: ```python n = 1234 ``` Output: ```python 4321 ``` Example 2 Input: ```python n = 1200 ``` Output: ```python 21 ``` # Explanation - In Example 1, reversing `1234` yields `4321`. - In Example 2, reversing `1200` yields `0021`, but since leading zeros should be removed, the result is `21`. # Constraints - Do not use string manipulation to reverse the number. - Ensure that the solution is efficient even for the upper limits of the input constraints.","solution":"def reverse_number(n: int) -> int: reversed_num = 0 while n > 0: reversed_num = reversed_num * 10 + n % 10 n = n // 10 return reversed_num"},{"question":"Given a string containing digits from 0 to 9, find the maximum number you can obtain by deleting exactly one digit from the string. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. Each of the next T lines contains a single string of digits. ------ Output ------ For each test case, print the maximum number that can be obtained by deleting exactly one digit from the string. ------ Constraints ------ 1 ≤ T ≤ 10^5 2 ≤ length of string ≤ 10^5 Sum of lengths of strings over all test cases will be less than or equal to 10^6 ----- Sample Input 1 ------ 3 123 51423 9876 ----- Sample Output 1 ------ 23 5423 987 ----- explanation 1 ------ Example case 1. By deleting digit \'1\' from the string \\"123\\", the maximum number obtained is \\"23\\". Example case 2. By deleting digit \'1\' from the string \\"51423\\", the maximum number obtained is \\"5423\\". Example case 3. By deleting digit \'6\' from the string \\"9876\\", the maximum number obtained is \\"987\\".","solution":"def delete_one_digit_max(strings): results = [] for s in strings: max_num = 0 for i in range(len(s)): num = int(s[:i] + s[i+1:]) max_num = max(max_num, num) results.append(max_num) return results"},{"question":"You are given a string consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', which represent a sequence of parentheses. Your task is to determine whether the sequence is valid. A valid sequence is defined by the following rules: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type. For example, the sequence \\"()\\" and \\"()\\" are both valid, but \\"(]\\" and \\"([)]\\" are not valid. Write a program to check if the given sequence of parentheses is valid. ----- Input format ----- A single line containing a string S consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The length of the string is at most 10^4. ----- Output format ----- Output a single line containing \\"YES\\" if the sequence is valid, or \\"NO\\" if it is not. ----- Example ----- Here is the sample input and output corresponding to the example above. ----- Sample input ----- ([])() ----- Sample output ----- YES ----- Sample input ----- ([)] ----- Sample output ----- NO Note: Your program should only print either \\"YES\\" or \\"NO\\".","solution":"def is_valid_parentheses(sequence): Determine if the given sequence of parentheses is valid. :param sequence: A string containing \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. :return: \\"YES\\" if the sequence is valid, otherwise \\"NO\\". stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in sequence: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or stack.pop() != matching_bracket[char]: return \\"NO\\" else: return \\"NO\\" # Invalid character, though it should not be possible with the given input constraints if stack: return \\"NO\\" else: return \\"YES\\" # Example usage: # print(is_valid_parentheses(\\"([])()\\")) # Output: YES # print(is_valid_parentheses(\\"([)]\\")) # Output: NO"},{"question":"Alice is managing a farm, where she is growing a special type of crop that requires periodic irrigation. Each crop needs a certain amount of water every day to remain healthy. Alice has a limited amount of water supply each day, and she wants to maximize the number of days she can keep all crops healthy without running out of water. You need to determine the number of continuous days Alice can keep the crops healthy given the daily water requirement for each crop and the total daily water supply she has. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains two integers N and W - the number of crops, and the daily water supply available. - The second line contains N integers, each representing the daily water requirement for each crop. ------ Output Format ------ For each test case, output in a single line the maximum number of continuous days Alice can keep all crops healthy. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ W ≤ 10^6 1 ≤ text{daily water requirement} ≤ 10^3 ------ Sample Input 1 ------ 3 5 100 15 20 10 30 25 4 50 10 20 30 40 3 300 100 100 100 ------ Sample Output 1 ------ 4 3 3 ------ Explanation 1 ------ Test case 1: Alice has 5 crops with daily requirements of 15, 20, 10, 30, and 25 units of water, and a daily water supply of 100 units. She can water all crops for 4 days (15 + 20 + 10 + 30 = 75 units, which is ≤ 100), but she cannot water all 5 crops beyond this point since 15 + 20 + 10 + 30 + 25 = 100 units, which exactly meets her limit. Test case 2: Alice has 4 crops with daily requirements of 10, 20, 30, and 40 units of water, and a daily water supply of 50 units. She can only water the first 3 crops for all 3 days without exceeding the limit. Test case 3: Alice has 3 crops each with a daily water requirement of 100 units of water, and a daily water supply of 300 units. She can water all 3 crops for all 3 days as they exactly match her daily supply limit.","solution":"def max_consecutive_days(N, W, water_requirements): Returns the maximum number of continuous days Alice can keep all crops healthy. :param N: Number of crops :param W: Daily water supply :param water_requirements: List of daily water requirements for each crop :return: Maximum number of continuous days # Calculate the total daily water requirement for all crops total_daily_water_requirement = sum(water_requirements) # Determine the number of days Alice can keep the crops healthy if total_daily_water_requirement > W: return 0 # Alice cannot water all crops at all from the very start else: return W // total_daily_water_requirement # Determine the maximum days def process_test_cases(test_cases): Process all test cases and returns the results for each test case. :param test_cases: List of tuples where each tuple contains N, W, and water requirements :return: List of results for each test case results = [] for N, W, water_requirements in test_cases: result = max_consecutive_days(N, W, water_requirements) results.append(result) return results"},{"question":"Bitwise has a binary string s consisting of only 0s and 1s. He wants to flip a contiguous substring of the binary string exactly once such that the number of 1s in the entire string is maximized. A flip operation changes every 1 to 0 and every 0 to 1. Can you help him determine the length of the maximum number of 1s he can obtain after exactly one flip? -----Input----- The first line contains a single integer t (1 leq t leq 1000) – the number of test cases. The description of each test case follows. The first line of each test case contains a single integer n (1 leq n leq 100) — the length of the string s. The second line of each test case contains a binary string s of length n. -----Output----- For each test case, output a single integer — the maximum number of 1s that can be obtained after exactly one flip of a contiguous substring. -----Examples----- Input 3 5 11111 8 00000000 6 110100 Output 4 8 5 -----Note----- In the first test case, the string is already composed entirely of 1s, so flipping any part of the string will only decrease the number of 1s. Thus, the maximum number of 1s Bitwise can obtain is n-1 = 4. In the second test case, flipping the entire string will change all 0s to 1s, making the entire string composed of 1s. In the third test case, flipping the substring from the second to the fifth character (inclusive), 1010 -> 0101, results in the string 100111. The total number of 1s is 5.","solution":"def max_ones_after_flip(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] # Initial number of 1s in the string initial_ones = s.count(\'1\') # Kadane\'s algorithm to find the subarray (substring) that we should flip max_diff = 0 current_diff = 0 for char in s: value = 1 if char == \'0\' else -1 current_diff = max(current_diff + value, value) max_diff = max(max_diff, current_diff) # If initial_ones is already n, flip any substring will only decrease the number of 1s if initial_ones == n: results.append(n - 1) else: results.append(initial_ones + max_diff) return results"},{"question":"Robin loves making cocktails. She recently learned about making cocktails using different types and brands of spirits. She has `n` different spirits, each with a unique id ranging from `1` to `n`. Each spirit can only be used in certain other spirits\' cocktails. Robin wants to prepare as many unique cocktails as possible. A cocktail is unique if the combination of spirits used in it is unique. You are given a list of `m` valid combinations. Each combination consists of a list of integers representing the spirit ids that can go into making a particular cocktail. Your task is to calculate the maximum number of unique cocktails Robin can make with the given combinations. -----Input----- The first line of the input contains two integers `n` and `m` (1 leq n leq 1000, 1 leq m leq 20000) — the number of spirits and the number of valid combinations, respectively. Each of the next `m` lines contains a combination of spirit ids. Each combination is given in the format `ki s1 s2 ... sk`, where `ki` is the number of spirits in the combination, followed by `ki` integers representing the ids of the spirits used in that combination. -----Output----- Print the maximum number of unique cocktails Robin can make. -----Examples----- Input 3 4 2 1 2 2 2 3 3 1 2 3 1 3 Output 4 Input 5 3 2 1 2 2 3 4 3 2 3 5 Output 3 Input 3 3 2 1 2 2 1 2 2 2 3 Output 2 Input 4 5 2 1 2 2 3 4 1 2 3 1 3 4 2 2 3 Output 5 -----Note----- In the first example, all provided combinations are unique. In the second example, again all provided combinations are unique, hence all `3` cocktails can be made. In the third example, the first two combinations are identical, leaving only `2` unique combinations: `[1, 2]`, and `[2, 3]`. In the fourth example, all provided combinations are unique, hence all `5` cocktails can be made.","solution":"def max_unique_cocktails(n, m, combinations): Calculate the maximum number of unique cocktails Robin can make. Parameters: n (int): Number of spirits. m (int): Number of valid combinations. combinations (list of list of int): Each inner list represents a combination of spirit ids. Returns: int: Maximum number of unique cocktails. unique_combinations = set() for combo in combinations: # Convert the list to a frozenset to ensure it is hashable and can be added to the set unique_combinations.add(frozenset(combo)) return len(unique_combinations)"},{"question":"Given an array of integers, sort the array into a wave like array. An array is said to be in a wave like array if elements at even positions are greater than their adjacent elements and elements at odd positions are less than their adjacent elements. Formally: - For the array `A[i]` (0-based index), the final sorted array should satisfy A[0] >= A[1] <= A[2] >= A[3] <= A[4] >= and so on. Example 1: Input: arr = [3, 6, 5, 10, 7, 20] Output: [3, 6, 5, 10, 7, 20] Explanation: The output will be [3, 6, 5, 10, 7, 20] which is a valid wave array form. Example 2: Input: arr = [2, 4, 7, 8, 9, 10] Output: [2, 4, 7, 8, 9, 10] Explanation: The output will be [2, 4, 7, 8, 9, 10] which is a valid wave array form. Your Task: You don\'t need to read or print anything. Your task is to complete the function waveSort() which takes the array as input parameter and sorts the array into wave like array. Expected Time Complexity: O(N log N) Expected Space Complexity: O(1) Constraints: 1 ≤ N ≤ 10^6 0 ≤ Ai ≤ 10^6","solution":"def waveSort(arr): Given an array of integers, sorts the array into a wave like array. :param arr: List[int] :return: List[int] arr.sort() for i in range(0, len(arr)-1, 2): arr[i], arr[i+1] = arr[i+1], arr[i] return arr"},{"question":"You are given an array of n integers. Your task is to find the sum of the difference between the maximum and minimum elements of all possible subarrays of the given array. A subarray is defined as a contiguous segment of the array. -----Input----- The first line of input contains a single integer n (1 le n le 50) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 100) — the elements of the array. -----Output----- Print a single integer — the sum of the difference between the maximum and minimum elements of all subarrays of the given array. -----Example----- Input 3 1 2 3 Output 4 Explanation For the array [1, 2, 3], the subarrays are: - [1], with max-min = 0 - [2], with max-min = 0 - [3], with max-min = 0 - [1, 2], with max-min = 1 - [2, 3], with max-min = 1 - [1, 2, 3], with max-min = 2 The sum of differences is 0 + 0 + 0 + 1 + 1 + 2 = 4.","solution":"def sum_of_differences(n, arr): Calculate the sum of the difference between the maximum and minimum elements of all possible subarrays of the given array. Parameters: n (int): Number of elements in the array. arr (list[int]): List of integers representing the array. Returns: int: The sum of the differences. total_diff_sum = 0 for i in range(n): current_max = arr[i] current_min = arr[i] for j in range(i, n): current_max = max(current_max, arr[j]) current_min = min(current_min, arr[j]) total_diff_sum += current_max - current_min return total_diff_sum"},{"question":"Knight\'s Journey You are given a chessboard of size N times N and a knight starting at a given position (r1, c1). The knight moves in an \\"L\\" shape: it can move two squares in one direction and then one square in a perpendicular direction, or one square in one direction and then two squares in a perpendicular direction. Given a number K , you need to determine whether it is possible for the knight to reach another given position (r2, c2) in exactly K moves. The knight cannot move off the board. If it is possible to reach (r2, c2) in exactly K moves, return \\"YES\\". Otherwise, return \\"NO\\". # Input - An integer N representing the size of the chessboard. - Three integers r1, c1, r2 , and c2 representing the initial and the target positions (1-based indexing). - An integer K representing the exact number of moves. # Output - A single string \\"YES\\" if the knight can reach the target position in exactly K moves, otherwise \\"NO\\". # Constraints - 1 leq N leq 1000 - 1 leq r1, c1, r2, c2 leq N - 0 leq K leq 2 times N # Input Example 1 ``` 8 1 1 8 8 6 ``` # Output Example 1 ``` YES ``` # Input Example 2 ``` 8 1 1 8 8 5 ``` # Output Example 2 ``` NO ``` # Input Example 3 ``` 5 3 3 4 3 1 ``` # Output Example 3 ``` NO ```","solution":"from collections import deque def can_knight_reach(N, r1, c1, r2, c2, K): # Define all possible knight moves knight_moves = [ (-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1) ] # Use BFS to find the exact number of moves queue = deque([(r1-1, c1-1, 0)]) # Start from (r1, c1) with 0 moves visited = set((r1-1, c1-1)) # Keep track of visited squares while queue: x, y, moves = queue.popleft() if moves == K: if (x+1, y+1) == (r2, c2): return \\"YES\\" continue if moves < K: for dx, dy in knight_moves: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return \\"NO\\""},{"question":"Problem A social media company wants to create a new feature to suggest friends to users based on their interests. Each user can create groups, and each group contains a set of interests. You are required to implement a function that, given a user\'s groups and all other users\' groups, finds the most similar user based on the number of common interests. Two users are considered similar based on the number of shared interests. If there are multiple users with the same number of common interests, return the one who comes first in the given list of users. Constraints The input satisfies the following conditions. * 1 ≤ u ≤ 100 * 1 ≤ g ≤ 50 * 1 ≤ i ≤ 100 * 1 ≤ |interest| ≤ 20 Input The input is given in the following format: u user_0 interest_0_common ... interest_0_common user_1 interest_1_common ... interest_1_common ... user_u-1 interest_u-1_common ... interest_u-1_common The first line contains the number of users u. The next lines are grouped for each user, starting with their identifier followed by their interests, each on a new line. Each user comes with at least one interest. Example Input 4 Alice reading cycling Bob reading gaming Charlie cycling baking Dana reading cooking Output Alice Dana","solution":"def find_most_similar_user(users): Finds the most similar user based on the number of common interests. Parameters: users (List[Tuple[str, List[str]]]): A list of tuples where each tuple contains a user identifier and their interests. Returns: Tuple[str, str]: The pair of most similar users. def common_interests_count(interests1, interests2): return len(set(interests1) & set(interests2)) max_common_interests = -1 most_similar_pair = (\\"\\", \\"\\") for i in range(len(users)): for j in range(i+1, len(users)): user1, interests1 = users[i] user2, interests2 = users[j] common_count = common_interests_count(interests1, interests2) if common_count > max_common_interests: max_common_interests = common_count most_similar_pair = (user1, user2) return most_similar_pair"},{"question":"A group of n farmers is preparing to harvest crops from their fields. Each farmer has a field of a specific size, and they all help each other to finish the harvest. Every farmer requires a certain amount of help, which is proportional to the size of their field, in order to complete the harvest within a given period of time. You are given an array `sizes` of length `n` where `sizes[i]` represents the size of the field of the i-th farmer. Additionally, you are given an array `efficient` of length `n` where `efficient[i]` denotes the efficiency of the i-th farmer, which means how quickly they can harvest crops from their own field as well as from others\' fields. The efficiency is represented by the number of size units the farmer can harvest per unit of time. Your task is to determine the maximum number of farmers that can complete their harvest within the given period `totalTime`. Each farmer, once completed with their own harvest, can help others. Write a function `maxFarmers(n, sizes, efficient, totalTime)` that takes the following inputs: - `n`: an integer representing the number of farmers. - `sizes`: an array of integers where `sizes[i]` is the size of the field of the i-th farmer. - `efficient`: an array of integers where `efficient[i]` is the efficiency of the i-th farmer. - `totalTime`: an integer representing the total time available to complete the harvest. The function should return an integer representing the maximum number of farmers that can complete their harvest within the given period. # Input Format - The first line contains the integer n (1 <= n <= 2 * 10^5). - The second line contains n space-separated integers, the sizes array. - The third line contains n space-separated integers, the efficient array. - The fourth line contains a single integer totalTime (1 <= totalTime <= 10^4). # Output Format - Print a single integer representing the maximum number of farmers that can complete their harvest within the given period. # Sample Input ``` 5 10 12 15 8 6 3 2 4 1 5 10 ``` # Sample Output ``` 3 ``` # Explanation In this example, we have 5 farmers with the following field sizes and efficiency: - Farmer 1: size 10, efficiency 3 - Farmer 2: size 12, efficiency 2 - Farmer 3: size 15, efficiency 4 - Farmer 4: size 8, efficiency 1 - Farmer 5: size 6, efficiency 5 With a total of 10 units of time available, the goal is to maximize the number of farmers who can complete their harvest within this time frame. Importantly, once a farmer complete their harvest, they can help others. The result shows that a maximum of 3 farmers can complete their harvests within the given time.","solution":"def maxFarmers(n, sizes, efficient, totalTime): # Calculate the initial time required for each farmer to complete their own field times = [] for i in range(n): times.append(sizes[i] / efficient[i]) # Sort the times times.sort() # Count the number of farmers that can complete their field within the total time count = 0 currentTime = 0 for time in times: if currentTime + time <= totalTime: currentTime += time count += 1 else: break return count"},{"question":"**Connection Network Optimization** You are tasked with designing an optimal network for a new city. The city administration has a unique requirement: they want the entire city to be interconnected, but they want to minimize the overall cost of laying down the roads that form the network. The city comprises n districts, and some pairs of districts have known costs to build roads between them. You need to find out the minimum cost required to connect all districts. However, there\'s an additional requirement: no district should have more than m roads directly connected to it, as this would make traffic management too difficult. Write a program to determine the minimum cost to connect all districts under the given constraints, or determine if it’s impossible. -----Input----- The first line contains two integers n and m, representing the number of districts and the maximum number of roads a district can have, respectively. Next follows an integer e denoting the number of possible roads. Each of the next e lines contains three integers u, v, and c, denoting a possible road between districts u and v with a cost c. We have 1 leq n leq 1000, 0 leq e leq 10000, 1 leq c leq 10^6, 1 leq m < n, and 0 leq u, v < n (districts are numbered from 0 to n-1). -----Output----- Output a single line with the minimum cost required to connect all districts, considering the constraints. If it is impossible, output \\"impossible\\". -----Examples----- Sample Input 1: 4 2 5 0 1 10 0 2 6 0 3 5 1 2 15 2 3 4 Sample Output 1: 19 Sample Input 2: 4 1 4 0 1 10 0 2 6 0 3 5 1 2 15 Sample Output 2: impossible","solution":"def find(parent, i): while parent[i] != i: i = parent[i] return i def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_cost_to_connect_all_districts(n, m, edges): edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] degree = [0] * n for node in range(n): parent.append(node) rank.append(0) result = [] for u, v, weight in edges: if degree[u] < m and degree[v] < m: x = find(parent, u) y = find(parent, v) if x != y: result.append((u, v, weight)) union(parent, rank, x, y) degree[u] += 1 degree[v] += 1 if len(result) != n - 1: return \\"impossible\\" minimum_cost = sum([weight for u, v, weight in result]) return minimum_cost # Example usage: # n = 4, m = 2, e = 5 # edges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 2, 15), (2, 3, 4)] # print(minimum_cost_to_connect_all_districts(n, m, edges)) # Output: 19"},{"question":"Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they have the same characters with the same frequencies when case is ignored and non-alphabet characters are disregarded. Function Signature: `def are_anagrams(str1: str, str2: str) -> bool:` Input The function takes two arguments: 1. `str1` (1 ≤ len(str1) ≤ 1000): a string containing a mix of uppercase, lowercase letters, and possibly other characters. 2. `str2` (1 ≤ len(str2) ≤ 1000): a string containing a mix of uppercase, lowercase letters, and possibly other characters. Output Return `True` if the given strings are anagrams, otherwise return `False`. Examples Input \\"Listen\\", \\"Silent\\" Output True Input \\"A gentleman!\\", \\"Elegant man.\\" Output True Input \\"Clint Eastwood\\", \\"Old West action\\" Output True Input \\"Programming\\", \\"Gram ring mop!\\" Output True Input \\"Apple\\", \\"Peach\\" Output False","solution":"def are_anagrams(str1: str, str2: str) -> bool: Returns True if str1 and str2 are anagrams of each other, False otherwise. Non-alphabet characters are disregarded and case is ignored. from collections import Counter import re # Function to clean and prepare the string for comparison def clean_string(s: str) -> str: # Remove non-alphabetic characters and convert to lowercase return re.sub(r\'[^a-z]\', \'\', s.lower()) clean_str1 = clean_string(str1) clean_str2 = clean_string(str2) # Compare the character counts of both strings return Counter(clean_str1) == Counter(clean_str2)"},{"question":"Clark is interested in reading books and has a collection of n books, each book has a unique difficulty level di. He wants to place these books on shelves in such a way that each shelf contains books sorted in descending order of difficulty (from top to bottom). Moreover, he wants to minimize the number of shelves used, ensuring that no two books with the same difficulty level are placed on the same shelf. Help Clark to determine the minimum number of shelves required to accommodate all the books following the given criteria. Input The first line contains an integer n denoting the number of books. The next line contains n integers d1, d2, ..., dn, each representing the difficulty level of a book. Output Print the minimum number of shelves required. Input Constraints 1 ≤ n ≤ 10^5 1 ≤ di ≤ 10^6 SAMPLE INPUT 6 4 3 2 4 1 3 SAMPLE OUTPUT 3","solution":"def min_shelves(n, difficulty_levels): Calculates the minimum number of shelves required to accommodate all the books. Parameters: - n: Integer, number of books. - difficulty_levels: List of integers, difficulty levels of books. Returns: - Integer, minimum number of shelves required. from collections import Counter # Count the frequency of each difficulty level difficulty_count = Counter(difficulty_levels) # The minimum number of shelves required is the maximum frequency of any difficulty level return max(difficulty_count.values())"},{"question":"You are given the measurements of a right-angled triangle where `base` is the length of its base, `height` is the length of its height, and both are integers. Find the area of the right-angled triangle. -----Constraints----- - 1≦base≦100 - 1≦height≦100 - Both `base` and `height` are positive integers. -----Input----- The input is given from Standard Input in the following format: base height -----Output----- Print the area of the right-angled triangle. It is guaranteed that the area is an integer. -----Sample Input----- 5 3 -----Sample Output----- 7 When the lengths of the base and height are 5 and 3, respectively, the area of the triangle is 5×3/2 = 7.","solution":"def right_angled_triangle_area(base, height): Calculates the area of a right-angled triangle given its base and height. return (base * height) // 2"},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are two distinct elements in the array that add up to the target sum. If such a pair exists, return their indices; otherwise, return an empty list. Your function should have the following signature: `def find_pair_with_sum(arr: List[int], target: int) -> List[int]` # Constraints - The array will have at least two elements and at most 1000 elements. - Each element in the array will be an integer between -10^6 and 10^6. - The target sum will be an integer between -2 * 10^6 and 2 * 10^6. # Input Format The first line contains the integer `n`, the number of elements in the array. The second line contains `n` space-separated integers, which are the elements of the array. The third line contains the integer `target`, the target sum. # Output Format If a pair is found, return a list of two integers that are the indices of the two elements in the given array that add up to the target sum. The indices should be provided in increasing order. If no such pair exists, return an empty list. # Examples **Input:** ``` 5 1 2 3 4 5 6 ``` **Output:** ``` [1, 3] ``` **Input:** ``` 3 0 -1 1 0 ``` **Output:** ``` [1, 2] ``` **Input:** ``` 4 1 2 3 4 10 ``` **Output:** ``` [] ``` # Note - In the first example, the numbers at index 1 (2) and index 3 (4) sum up to 6 (2+4=6). - In the second example, the numbers at index 1 (-1) and index 2 (1) sum up to 0 (-1+1=0). - In the third example, there is no pair that sums up to 10 in the given array.","solution":"from typing import List def find_pair_with_sum(arr: List[int], target: int) -> List[int]: Returns the indices of the two distinct elements that add up to the target sum. If no such pair exists, returns an empty list. num_to_index = {} for i, num in enumerate(arr): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Write a function `is_anagram` that determines if two given strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and punctuation, and consider uppercase and lowercase letters to be the same. Function Description Complete the function `is_anagram` in the editor below. It should return the string \'anagram\' if the input strings are anagrams of each other. Otherwise, it should return \'not anagram\'. `is_anagram` has the following parameter(s): - `string str1`: the first string to compare - `string str2`: the second string to compare Returns - `string`: either \'anagram\' or \'not anagram\' Input Format - Two lines of input, each one containing a string. Constraints - 0 < text{length of} str1, str2 leq 10^4 - Each character of `str1` and `str2` belongs to {a-z, A-Z, space, punctuation} Sample Input Sample Input 0 ``` listen silent ``` Sample Output 0 ``` anagram ``` Sample Explanation 0 After ignoring spaces and punctuation, the strings \\"listen\\" and \\"silent\\" have the same character counts. Sample Input 1 ``` modern normed kayak ``` Sample Output 1 ``` not anagram ``` Sample Explanation 1 Even though \\"modern\\" and \\"normed kayak\\" can be transformed to the same letters (disregarding spaces and punctuation), the extra character \'k\' in \\"normed kayak\\" implies they are not anagrams.","solution":"def is_anagram(str1, str2): Determines if two given strings are anagrams of each other by ignoring spaces, punctuation, and considering uppercase and lowercase letters as the same. Parameters: str1 (string): the first string to compare str2 (string): the second string to compare Returns: string: \'anagram\' or \'not anagram\' import re # Remove all non-alphabetical characters and convert to lowercase cleaned_str1 = re.sub(r\'[^a-zA-Z]\', \'\', str1).lower() cleaned_str2 = re.sub(r\'[^a-zA-Z]\', \'\', str2).lower() # Compare sorted versions of the cleaned strings if sorted(cleaned_str1) == sorted(cleaned_str2): return \'anagram\' else: return \'not anagram\'"},{"question":"Given an integer array Arr[] of size N, and an integer K, the task is to find a subarray of length K such that the difference between the maximum and minimum values in the subarray is minimized. Print the minimized difference value. Example 1: Input: N = 7, K = 3 Arr[] = {10, 1, 5, 9, 3, 8, 12} Output: 2 Explanation: One of the subarrays of size 3 with the minimum difference between maximum and minimum values is {9, 5, 8}, where the difference is 3. Example 2: Input: N = 5, K = 2 Arr[] = {4, 7, 9, 2, 5} Output: 1 Explanation: One of the subarrays of size 2 with the minimum difference between maximum and minimum values is {4, 5}, where the difference is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minDiffSubarray() which takes Arr[], N, and K as input parameters and returns the minimized difference value. Expected Time Complexity: O(N log(N)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ Arr[i] ≤ 10^9 1 ≤ K ≤ N","solution":"def minDiffSubarray(Arr, N, K): Finds the minimum difference between the maximum and minimum values in any subarray of length K. # Sort the array Arr.sort() # Initialize the minimum difference to a very large number min_diff = float(\'inf\') # Slide the window of length K and find the minimum difference for i in range(N - K + 1): current_diff = Arr[i + K - 1] - Arr[i] if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"Given an integer array of size N, sort the array in non-decreasing order using the bubble sort algorithm. Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm gets its name from the way smaller elements \\"bubble\\" to the top of the list. Input First line contains T (number of test cases). Next T lines contain an integer N followed by N space-separated integers representing the array. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^6 ≤ array elements ≤ 10^6 Output For each test case, output the sorted array in a single line. SAMPLE INPUT 2 5 64 25 12 22 11 4 -1 -3 0 99 SAMPLE OUTPUT 11 12 22 25 64 -3 -1 0 99","solution":"def bubble_sort(arr): Sorts a list of integers in non-decreasing order using the bubble sort algorithm. n = len(arr) for i in range(n): for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr def process_test_cases(test_cases): Processes multiple test cases. Each test case is a tuple (N, array). Returns a list of results where each result is the sorted array for a test case. results = [] for case in test_cases: N, array = case sorted_array = bubble_sort(array) results.append(sorted_array) return results"},{"question":"A company needs to organize a series of meetings in such a way that no two meetings overlap. Each meeting has a start and end time. You are given N meetings where each meeting i has a start time S_i and end time E_i. Your task is to find the maximum number of non-overlapping meetings that can be scheduled. -----Constraints----- - 1 ≤ N ≤ 10^5 - 0 ≤ S_i < E_i ≤ 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N S_1 E_1 S_2 E_2 ... S_N E_N -----Output----- Print the maximum number of non-overlapping meetings that can be scheduled. -----Sample Input----- 6 1 4 2 3 3 5 7 8 5 6 4 7 -----Sample Output----- 4 The maximum number of non-overlapping meetings is 4. These meetings could be (2, 3), (3, 5), (5, 6), and (7, 8).","solution":"def max_non_overlapping_meetings(meetings): Returns the maximum number of non-overlapping meetings that can be scheduled. :param meetings: List of tuples where each tuple contains start time and end time of a meeting. :return: Maximum count of non-overlapping meetings # Sort meetings based on end time sorted_meetings = sorted(meetings, key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in sorted_meetings: if start >= last_end_time: count += 1 last_end_time = end return count def from_input_string(input_string): lines = input_string.strip().split(\\"n\\") N = int(lines[0]) meetings = [tuple(map(int, line.split())) for line in lines[1:]] return meetings def from_output_string(output_string): return int(output_string.strip()) def to_input_string(inputs): meetings = inputs input_str = f\\"{len(meetings)}n\\" + \\"n\\".join(f\\"{start} {end}\\" for start, end in meetings) return input_str def to_output_string(output): return str(output)"},{"question":"Maria enjoys working with strings and often engages in finding patterns within them. She recently came across a problem where she needs to identify and retrieve the longest substring that appears at least twice in a given string. The appearances of the substring can overlap, and Maria wants to ensure her method is efficient even for large strings. Given a string s of length n (1 ≤ n ≤ 1000), find the longest substring that appears at least twice. If there are multiple longest substrings with the same length, return any of them. Input The only line contains a string s consisting of lowercase English letters. Output Output the longest substring that appears at least twice in the given string. If no such substring exists, output an empty string. Examples Input banana Output ana Input abcd Output (empty string) Input aaabaaa Output aaa Note In the first example, \\"ana\\" is the longest substring that appears twice. In the second example, there are no repeating substrings, thus the output is an empty string. In the third example, \\"aaa\\" is the longest substring that appears twice.","solution":"def longest_repeating_substring(s): Returns the longest substring that appears at least twice in the given string. If no such substring exists, returns an empty string. n = len(s) longest_subs = \\"\\" # Function to check if there exists a substring of length \'length\' that appears at least twice def has_repeating_substring(length): seen = set() for i in range(n - length + 1): substr = s[i:i + length] if substr in seen: return substr seen.add(substr) return \\"\\" left, right = 1, n while left <= right: mid = (left + right) // 2 substr = has_repeating_substring(mid) if substr: longest_subs = substr left = mid + 1 else: right = mid - 1 return longest_subs"},{"question":"John and his friends are planning a charity event. They need to create groups of participants, with each group having a designated leader. However, John has some conditions for creating these groups: 1. Each group should have at least one participant (including the leader). 2. No participant should lead more than one group. 3. The total number of groups is exactly `k`. John has a list of participants\' names, and he wants you to help him determine if it is possible to create exactly `k` groups with these participants. -----Input----- The first line contains two integers `n` (1 ≤ n ≤ 100) and `k` (1 ≤ k ≤ n), where `n` is the number of participants and `k` is the number of groups. The second line contains `n` space-separated strings representing the names of the participants. Each name consists of lowercase English letters and has a length of at most 10. -----Output----- Output \\"YES\\" (without quotes) if it\'s possible to create exactly `k` groups. Otherwise, output \\"NO\\" (without quotes). -----Examples----- Input 6 3 alice bob charlie dave eve frank Output YES Input 4 5 john doe jennifer smith Output NO","solution":"def can_create_groups(n, k, participants): Determines if it is possible to create exactly k groups from n participants. Args: n (int): Number of participants. k (int): Number of groups to create. participants (list of str): List of participant names. Returns: str: \\"YES\\" if k groups can be created, otherwise \\"NO\\". if k > n: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers nums, your task is to determine if it is possible to partition the list into two subsets such that the sum of the elements in both subsets is equal. Example 1: Input: nums = [1, 5, 11, 5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11]. Example 2: Input: nums = [1, 2, 3, 5] Output: false Explanation: The array cannot be partitioned into equal sum subsets. Constraints: - The length of the list will be in the range [1, 200]. - Each element of the list will be a non-negative integer not greater than 100.","solution":"def can_partition(nums): Determine if the list can be partitioned into two subsets with equal sum. total_sum = sum(nums) # If total sum is odd, we cannot partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] | dp[i - num] return dp[target]"},{"question":"You are given a list of integers representing the heights of students in a class. Your task is to determine the maximum number of students that can be arranged in a sequence such that each student is shorter than the next one in the sequence. This sequence should be as long as possible. Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of students. - The second line contains n integers h_i (1 ≤ h_i ≤ 10000), the height of each student. Output - Print a single integer, the maximum number of students that can be arranged in strictly increasing height order. Examples Input ``` 6 1 3 5 2 6 4 ``` Output ``` 4 ``` Input ``` 5 5 4 3 2 1 ``` Output ``` 1 ```","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest increasing subsequence. if not heights: return 0 # Create an array to store longest increasing subsequence length for each element lis = [1] * len(heights) # Calculate the LIS values in a bottom up manner for i in range(1, len(heights)): for j in range(0, i): if heights[i] > heights[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # The maximum value in lis[] is the length of the longest increasing subsequence return max(lis) # Example usage: # n = int(input()) # heights = list(map(int, input().split())) # print(longest_increasing_subsequence(heights))"},{"question":"You are given a list of students with their respective marks in two subjects: Mathematics and Science. Your task is to find the student who has the maximum aggregate marks, where aggregate marks are calculated as the sum of Mathematics and Science marks. If there is a tie, the student with the highest Mathematics marks should be chosen. If there is still a tie, choose the student whose name comes first lexicographically. ------ Input ------ The first line contains an integer T, denoting the number of test cases. For each test case, the first line contains an integer n, the number of students. The following n lines contain a student\'s name (a string) followed by their Mathematics and Science marks (two integers). ------ Output ------ For each test case, output a single line containing the name of the student with the maximum aggregate marks. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 100 1 ≤ text{length of name} ≤ 100 0 ≤ text{Mathematics marks} ≤ 100 0 ≤ text{Science marks} ≤ 100 ------ Sample Input 1 ------ 2 3 Alice 98 99 Bob 95 96 Charlie 99 95 4 David 87 92 Eve 91 88 Frank 90 91 Gina 92 89 ------ Sample Output 1 ------ Alice Gina","solution":"def find_top_student(test_cases): results = [] for test_case in test_cases: n = test_case[0] students = test_case[1] top_student = None max_aggregate = -1 for student in students: name, math, science = student math, science = int(math), int(science) aggregate = math + science if (aggregate > max_aggregate or (aggregate == max_aggregate and (math > top_student[1] or (math == top_student[1] and name < top_student[0])))): top_student = (name, math, science, aggregate) max_aggregate = aggregate results.append(top_student[0]) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): n = int(lines[idx]) students = [lines[i].split() for i in range(idx + 1, idx + n + 1)] test_cases.append((n, students)) idx += n + 1 return test_cases def main(input_string): test_cases = parse_input(input_string) return find_top_student(test_cases)"},{"question":"In a software company, there are several projects, each with a unique project ID. Each project has a starting and ending date, represented as strings in the format \\"YYYY-MM-DD\\". There are also several employees, each working on one or more projects during given time periods, also specified by a unique employee ID, project ID, and the time period they were associated with the project. You need to write a program to answer queries about employee participation in projects. Each query provides a date and asks for a list of unique employee IDs who were involved in any project on that specified date. -----Input----- The first line contains two integers P and W (1 leq P, W leq 100000), the number of projects and work periods, respectively. The next P lines each contain three strings: a project ID, a start date, and an end date, each project identified by a unique project ID. The following W lines each contain a unique employee ID, a project ID, a first date, and a last date, representing the period the employee worked on that project. The final line contains the integer Q (1 leq Q leq 100000), the number of queries. Each of the following Q lines contains a date which you need to check for. -----Output----- Output Q lines. Each line should contain a list of the unique employee IDs who were involved in any project on the specified date. The order of employee IDs within each line does not matter. -----Examples----- Sample Input: 2 4 P1 2023-01-01 2023-12-31 P2 2024-01-01 2024-12-31 E1 P1 2023-01-10 2023-01-20 E2 P1 2023-01-15 2023-02-10 E3 P2 2024-03-01 2024-03-20 E1 P2 2024-01-05 2024-01-15 3 2023-01-15 2023-01-25 2024-01-10 Sample Output: E1 E2 E2 E1","solution":"import datetime from collections import defaultdict def parse_date(date_str): return datetime.datetime.strptime(date_str, \'%Y-%m-%d\').date() def find_employees_on_date(P, W, projects, work_periods, Q, queries): project_periods = {} for project in projects: project_id, start_str, end_str = project project_periods[project_id] = (parse_date(start_str), parse_date(end_str)) employee_work_periods = defaultdict(list) for work_period in work_periods: emp_id, project_id, first_str, last_str = work_period start_date, end_date = project_periods[project_id] emp_start_date = max(parse_date(first_str), start_date) emp_end_date = min(parse_date(last_str), end_date) if emp_start_date <= emp_end_date: employee_work_periods[emp_id].append((emp_start_date, emp_end_date)) results = [] for query_date_str in queries: query_date = parse_date(query_date_str) employees_working = set() for emp_id, periods in employee_work_periods.items(): for start_date, end_date in periods: if start_date <= query_date <= end_date: employees_working.add(emp_id) break results.append(sorted(employees_working)) return results"},{"question":"You are given a grid of size n x m filled with integers. You need to find the maximum sum you can achieve by following these rules: 1. You start at any cell in the first row. 2. From a cell (i,j), you can move to (i+1, j-1), (i+1, j), or (i+1, j+1) in the next row. 3. You cannot step out of the grid boundaries. Find the maximum sum you can achieve by starting at any cell in the first row and moving to the last row according to the given rules. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers a_ij (0 ≤ a_ij ≤ 100) — the values in the grid. Output Print a single integer, the maximum sum possible. Examples Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 Output 27 Input 2 3 1 2 3 4 5 6 Output 12 Note In the first example, starting at cell (1,4) and moving to cells (2,4) and (3,4) results in the maximum sum 4 + 8 + 12 = 24. In the second example, starting at cell (1,3) and moving to cell (2,3) results in the maximum sum 3 + 6 = 9.","solution":"def max_sum_path(grid): n = len(grid) m = len(grid[0]) # Create a DP table initialized with 0 dp = [[0] * m for _ in range(n)] # Initialize the first row of dp table for j in range(m): dp[0][j] = grid[0][j] # Fill the dp table for i in range(1, n): for j in range(m): dp[i][j] = grid[i][j] + max( dp[i-1][j] if j >= 0 and j < m else 0, dp[i-1][j-1] if j > 0 else 0, dp[i-1][j+1] if j < m-1 else 0, ) # The result will be the maximum value in the last row of dp table return max(dp[n-1]) # Example usage: n, m = 3, 4 grid = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] print(max_sum_path(grid)) # Output: 24"},{"question":"A company wants to organize data about its employees in a specific format. They want to store every employee’s first name, last name, age, and position within the company. The company also needs a function to search for employees by their last name and return their information if found. Write a program that performs the following tasks: 1. Reads a list of employees from the user input. The number of employees is specified by the first input line. 2. Each subsequent line contains an employee\'s information in the format: `FirstName LastName Age Position`. 3. After reading all the employees\' data, the program reads a last name to search for and prints the information of all employees with that last name. -----Input----- - The first line of input contains an integer `n` (1 ≤ n ≤ 100), the number of employees. - The next `n` lines each contain a string with an employee’s first name, last name, age, and position, separated by spaces. - The last line of input contains the last name to search for. -----Output----- For each employee with the given last name, print their information on a new line in this format: `FirstName LastName Age Position`. If no employee with the given last name exists, print \\"No employees with that last name found.\\" -----Examples----- Input: 3 John Doe 30 Manager Alice Smith 28 Developer Bob Doe 25 Designer Doe Output: John Doe 30 Manager Bob Doe 25 Designer Input: 2 Jane Austen 40 HR Mark Twain 35 Engineer Tenant Output: No employees with that last name found.","solution":"def read_employees_data(): Reads employees\' data from user input and returns a list of dictionaries containing employee information. import sys input = sys.stdin.read data = input().strip().split(\\"n\\") n = int(data[0]) employees = [] for i in range(1, n+1): first_name, last_name, age, position = data[i].split() employees.append({ \\"first_name\\": first_name, \\"last_name\\": last_name, \\"age\\": age, \\"position\\": position }) search_last_name = data[n+1] return employees, search_last_name def search_employees_by_last_name(employees, last_name): Searches for employees by their last name and returns a list of matching employee information. matching_employees = [e for e in employees if e[\'last_name\'] == last_name] if not matching_employees: return \\"No employees with that last name found.\\" result = [] for e in matching_employees: result.append(f\\"{e[\'first_name\']} {e[\'last_name\']} {e[\'age\']} {e[\'position\']}\\") return result"},{"question":"A group of friends is playing a word game where they form words by rearranging the letters of other words. One day, they become interested in the concept of palindromes. A palindrome is a word that reads the same backward as forward (e.g., \\"madam\\", \\"racecar\\"). They decide to create a special type of word called a \\"Super Palindrome\\". A Super Palindrome is defined as a word where each character can appear an even number of times, or at most one character can appear an odd number of times. This definition ensures that with the right arrangement, their characters can form at least one palindrome. Your task is to write a program that determines if a given word is a Super Palindrome. If the word is a Super Palindrome, the program should output \\"YES\\". Otherwise, it should output \\"NO\\". Input The input consists of multiple lines, each containing a word consisting of lowercase letters (a-z). Each word has at most 100000 characters. The end of the input is indicated by a line containing the word \\"END\\", which should not be processed. Output For each input word, output a line containing either \\"YES\\" if the word is a Super Palindrome, or \\"NO\\" otherwise. Example Input aabbcc racecar abc aaaaaa END Output YES YES NO YES","solution":"def is_super_palindrome(word): Checks if the given word is a Super Palindrome. :param word: The word to check. :return: \\"YES\\" if the word is a Super Palindrome, otherwise \\"NO\\". from collections import Counter # Count the occurrences of each character char_count = Counter(word) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character has an odd number of occurrences, it can\'t be rearranged to form a palindrome return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_input(words): Processes a list of words and returns if they are Super Palindromes :param words: List of words to process :return: List of results (\\"YES\\" or \\"NO\\") for each word results = [] for word in words: if word == \\"END\\": break results.append(is_super_palindrome(word)) return results"},{"question":"You are given a grid of size N x M consisting of lowercase English letters. Your task is to determine the length of the longest path such that the path does not revisit any character and all characters in the path are adjacent either horizontally or vertically. Example 1: Input: N = 3, M = 4 grid = [[\'a\', \'b\', \'c\', \'d\'], [\'e\', \'f\', \'g\', \'h\'], [\'i\', \'j\', \'k\', \'l\']] Output: 12 Explanation: One of the longest paths is: a -> b -> c -> d -> h -> g -> f -> e -> i -> j -> k -> l, length is 12. Example 2: Input: N = 2, M = 2 grid = [[\'a\', \'b\'], [\'c\', \'a\']] Output: 3 Explanation: One possible longest path is: a -> b -> c, length is 3. Your Task: - Implement the function longestUniquePath(N, M, grid) that receives the grid\'s dimensions and the grid itself, and returns the length of the longest path meeting the described criteria. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 20 All characters in grid are lowercase English letters.","solution":"def longestUniquePath(N, M, grid): def dfs(x, y, visited): max_length = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] not in visited: max_length = max(max_length, dfs(nx, ny, visited | {grid[nx][ny]})) return 1 + max_length longest_path = 0 for i in range(N): for j in range(M): longest_path = max(longest_path, dfs(i, j, {grid[i][j]})) return longest_path"},{"question":"Read problems statements in Mandarin Chinese, Russian, and Vietnamese as well. Chef has an array containing n integers. Fired up by boredom, he invented a game with the array. In the j-th move: He chooses two indices i and k such that 1 ≤ i < k ≤ n, and swaps the elements at these indices. The game stops when Chef is unable to make any more moves that result in a lexicographically smaller array. Chef wants to perform these moves in such a way that the lexicographically smallest possible array is achieved. Please help Chef find this array. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. Each test case consists of two lines: The first line contains an integer n indicating the size of the array. The second line contains n space-separated integers a_1, a_2, ..., a_n representing the elements of the array. ------ Output ------ For each test case, output a single line containing the lexicographically smallest array obtainable after performing the moves optimally. ------ Constraints ------ Subtask 1: (5 pts) 1 ≤ T ≤ 100 1 ≤ n ≤ 10 1 ≤ a_i ≤ 10^3 Subtask 2: (25 pts) 1 ≤ T ≤ 100 1 ≤ n ≤ 10^4 1 ≤ a_i ≤ 10^5 Subtask 3: (70 pts) 1 ≤ T ≤ 10^3 1 ≤ n ≤ 10^5 1 ≤ a_i ≤ 10^9 ------ Sample Input 1 ------ 2 3 3 2 1 5 5 3 2 4 1 ------ Sample Output 1 ------ 1 2 3 1 2 3 4 5","solution":"def lexicographically_smallest_array(n, arr): Return the lexicographically smallest array possible by swapping elements. return sorted(arr) def process_test_cases(T, test_cases): Process the given test cases and return the results. results = [] for i in range(T): n, arr = test_cases[i] smallest_array = lexicographically_smallest_array(n, arr) results.append(\\" \\".join(map(str, smallest_array))) return results"},{"question":"You are given a list of strings. Your task is to identify the group of strings that are anagrams of each other and return the largest group. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, given the following list of strings: ``` words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\", \\"inlets\\", \\"banana\\"] ``` - The group [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"] are anagrams of each other. - The group [\\"google\\", \\"gooegl\\"] are anagrams of each other. - \\"banana\\" does not have any anagrams in the list. Among the groups, the [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"] group is the largest with 4 elements. The function `largest_anagram_group` should return the following in this case: ```python largest_anagram_group([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\", \\"inlets\\", \\"banana\\"]) == [\\"listen\\", \\"silent\\", \\"enlist\\", \\"inlets\\"] ``` If there is a tie for the largest group, return any one of the groups that is of the maximum size. Here is a sample function signature: ```python def largest_anagram_group(words: List[str]) -> List[str]: # Your code here ``` You can use the method `sorted` for string comparison, useful to sort the letters of a word alphabetically. For example, `\'listen\'` becomes `\'eilnst\'` after sorting. This property helps in detecting anagrams.","solution":"from collections import defaultdict from typing import List def largest_anagram_group(words: List[str]) -> List[str]: Returns the largest group of anagram strings from the given list. anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) # Find the largest group of anagrams largest_group = [] for group in anagrams.values(): if len(group) > len(largest_group): largest_group = group return largest_group"},{"question":"Implement a function for matrix rotation. Input Format: First line contains two integers n and m denoting the dimensions of the matrix (n rows and m columns). Next n lines contain m space-separated integers each representing matrix elements. Output Format: Print the matrix after rotating it 90 degrees clockwise. Constraints: 1 ≤ n, m ≤ 100 1 ≤ matrix elements ≤ 1000 Problem Setter: Example Setter SAMPLE INPUT: 3 4 1 2 3 4 5 6 7 8 9 10 11 12 SAMPLE OUTPUT: 9 5 1 10 6 2 11 7 3 12 8 4","solution":"def rotate_matrix_90_degrees(matrix): Rotates a given matrix 90 degrees clockwise. :param matrix: A list of lists representing the matrix. :return: A list of lists representing the rotated matrix. if not matrix: return [] n, m = len(matrix), len(matrix[0]) rotated_matrix = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): rotated_matrix[j][n-1-i] = matrix[i][j] return rotated_matrix def transform_input(input_str): Transforms the input string into the required dimensions and matrix. :param input_str: A string representing the input. :return: Dimensions of the matrix and the matrix itself. lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [] for line in lines[1:]: matrix.append(list(map(int, line.split()))) return n, m, matrix def matrix_rotation(input_str): Main function to get input string, process it, rotate matrix and produce output string. :param input_str: A string representing the input. :return: A string representing the rotated matrix output. n, m, matrix = transform_input(input_str) rotated_matrix = rotate_matrix_90_degrees(matrix) return \'n\'.join(\' \'.join(map(str, row)) for row in rotated_matrix)"},{"question":"Alex is an avid reader and loves collecting books of various genres. He has a stack of n books, each book either being a fiction or non-fiction book. Alex wants to organize his stack in a way that no two fiction books are adjacent to each other. Given the number of fiction (f) and non-fiction (nf) books Alex has, determine the maximum number of books in the stack that Alex can organize while following the rules. Note: If it\'s not possible to organize the books such that no two fiction books are adjacent, return 0. Example 1: Input: f = 3 nf = 5 Output: 8 Explanation: One possible way to organize the books: nf, f, nf, f, nf, f, nf, nf. Example 2: Input: f = 4 nf = 2 Output: 0 Explanation: It\'s impossible to arrange 4 fiction books and 2 non-fiction books such that no two fiction books are adjacent. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxBooksStack() which takes two integers f and nf as input parameters and returns the maximum number of books that can be organized following the given rules. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= f, nf <= 10^{5}","solution":"def max_books_stack(f, nf): Calculate the maximum number of books that can be in the stack such that no two fiction books are adjacent. :param f: number of fiction books :param nf: number of non-fiction books :return: the maximum number of books in the stack that follows the rule if f > nf + 1: return 0 return f + nf"},{"question":"Chef is preparing a special dish and for that, he needs to collect exact quantities of several ingredients. There are N ingredients indexed from 1 to N, and he has access to a magical bag that helps him collect the ingredients in magical units. The magical units work as follows: Each ingredient i has a corresponding magical unit m_i which denotes the number of units of the ingredient i he can get in one magical operation. Chef can perform magical operations to collect exact quantities of each ingredient by combining these magical units. However, he must collect exactly k units of each ingredient i. The challenge is to determine the minimum number of magical operations Chef needs to collect exactly k units of each of the N ingredients. ------ Input ------ The first line of the input contains an integer N. Each of the next N lines contains two space-separated integers k and m_i, denoting the exact quantity of the ingredient required and the magical unit of the ingredient respectively. ------ Output ------ Print a single integer ― the minimum number of magical operations required to collect exactly k units for each of the N ingredients. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ k ≤ 10^{9} 1 ≤ m_i ≤ 10^{9} for each valid i ------ Subtasks ------ Subtask #1 (10 points): N ≤ 100 Subtask #2 (20 points): N ≤ 5,000 Subtask #3 (70 points): original constraints ------ Sample Input 1 ------ 3 10 3 15 4 20 5 ------ Sample Output 1 ------ 9 ------ Explanation 1 ------ For the first ingredient, Chef needs 4 magical operations (3+3+3+1). For the second ingredient, Chef needs 4 magical operations (4+4+4+3). For the third ingredient, Chef needs 4 magical operations (5+5+5+5). In total, the minimum number of magical operations required is 4 + 4 + 4 = 12.","solution":"def minimum_magical_operations(N, ingredients): total_operations = 0 for k, m in ingredients: total_operations += (k + m - 1) // m return total_operations # Example usage: # N = 3 # ingredients = [(10, 3), (15, 4), (20, 5)] # print(minimum_magical_operations(N, ingredients)) # Output: 12"},{"question":"You are tasked with developing software to optimize the deployment of resources for disaster management. Given the high risk of natural disasters in the designated area, your solution is to determine the optimal location to place a Disaster Relief Center (DRC) that minimizes the maximum distance from the DRC to any disaster zone (DZ). The operational area is modeled as a grid of size W x H, with specific points representing disaster zones. You are to find the grid coordinates that will serve as the optimal location for the DRC, such that the greatest distance from this point to any DZ in the grid is minimized. Distance between two points (x1, y1) and (x2, y2) is calculated using the Manhattan distance: Distance = |x1 - x2| + |y1 - y2| **Input:** 1. The first line contains two integers W and H (1 ≤ W, H ≤ 1000), denoting the width and height of the grid respectively. 2. The second line contains an integer N (1 ≤ N ≤ 1000), denoting the number of disaster zones. 3. The next N lines each contain two integers Xi and Yi (0 ≤ Xi < W, 0 ≤ Yi < H) representing the coordinates of each disaster zone. **Output:** Print two integers separated by space, denoting the coordinates (X, Y) of the optimal location for the DRC. If there are multiple optimal locations, print the one with the smallest X and if there is still a tie, with the smallest Y. **Example:** **Input:** 5 5 3 0 0 4 0 2 4 **Output:** 2 2 **Input:** 6 6 4 5 1 0 3 3 5 2 2 **Output:** 2 3","solution":"def optimal_drc_location(W, H, disaster_zones): max_x = max(dz[0] for dz in disaster_zones) min_x = min(dz[0] for dz in disaster_zones) max_y = max(dz[1] for dz in disaster_zones) min_y = min(dz[1] for dz in disaster_zones) optimal_x = (min_x + max_x) // 2 optimal_y = (min_y + max_y) // 2 return optimal_x, optimal_y # Example usage W = 5 H = 5 disaster_zones = [(0, 0), (4, 0), (2, 4)] print(optimal_drc_location(W, H, disaster_zones)) # Output: 2, 2"},{"question":"**Problem Statement** You are given a list of daily stock prices for a company over a certain number of days. Your task is to determine the maximum profit that could have been made by buying on one day and selling on another subsequent day. If no profit can be made, return 0. A single buy and sell transaction is allowed, and the buy must occur before the sell. # Input Format The input consists of two lines: - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of days. - The second line contains `n` integers separated by spaces, representing the stock prices on each day. # Output Format Output a single integer, the maximum possible profit. If no profit can be made, output 0. # Constraints - 1 ≤ n ≤ 1000 - 0 ≤ each stock price ≤ 10^4 # Example Input ``` 6 7 1 5 3 6 4 ``` Output ``` 5 ``` Explanation The maximum achievable profit is by buying on day 2 (price = 1) and selling on day 5 (price = 6), hence the profit is 6 - 1 = 5. Input ``` 5 7 6 4 3 1 ``` Output ``` 0 ``` Explanation No profit can be made as the stock prices are decreasing every day.","solution":"def max_profit(prices): Given a list of prices, computes the maximum profit that could have been made by buying one day and selling on a later day. If no profit can be made, it returns 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"You are given a list of N integers. Write a program that will find and print all pairs of integers in the list whose sum equals a given target value. Input The first line of input contains two integer numbers N (1 ≤ N ≤ 100 000) and T ( -10^9 ≤ T ≤ 10^9 ) — the number of integers in the list and the target sum, respectively. The second line contains N integers a1, a2, ..., aN ( -10^9 ≤ ai ≤ 10^9) — the elements of the list. It is guaranteed that each pair of integers appears at most once in the output, and the order of the pairs in the output does not matter. Output Print each pair of integers whose sum equals the target value on a new line. Each pair should be printed in ascending order (i.e., the smaller number should come first). If there are no such pairs, print nothing. Examples Input 5 10 2 8 3 7 1 Output 2 8 3 7 Input 4 0 -1 0 1 2 Output -1 1","solution":"def find_pairs_with_sum(N, T, numbers): Finds all pairs of integers in the list whose sum equals the target value. Arguments: N -- the number of integers in the list T -- the target sum numbers -- the list of N integers Returns: A list of tuples, each containing a pair of integers whose sum equals T seen = set() pairs = set() for num in numbers: complement = T - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(list(pairs)) # Example usage: if __name__ == \\"__main__\\": # Read input N, T = map(int, input().split()) numbers = list(map(int, input().split())) # Find and print pairs result = find_pairs_with_sum(N, T, numbers) for pair in result: print(pair[0], pair[1])"},{"question":"You are given an array of positive integers where each integer represents the height of a vertical bar. The distance between each pair of adjacent bars is 1. Write an algorithm to calculate the maximum water that can be trapped between the bars after raining. Example: Input: heights = [1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The bars at index 1 and 4 can trap 1 unit of water, the bars at index 2 and 3 can trap 1 unit of water, the bars at index 4 and 5 can trap 2 units of water, and the bars at index 7 and 8 can trap 2 units of water. Therefore, the total water trapped is 6 units. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxWaterTrapped() which takes a list of integers representing heights as input and returns an integer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= heights.length <= 10^5 0 <= heights[i] <= 10^4","solution":"def maxWaterTrapped(heights): Returns the maximum amount of water that can be trapped between the bars. if not heights or len(heights) < 3: return 0 left, right = 0, len(heights) - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) water_trapped += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += right_max - heights[right] return water_trapped"},{"question":"You have been tasked with creating a system to manage student grade entries and compute their average grade for a virtual classroom. Your program should allow adding student names along with their corresponding grades and then calculate the average grade for each student. Here are the requirements for the system: * A grade is represented as an integer between 0 and 100 inclusive. * You need to be able to add multiple grades for the same student. * You need to handle up to 1000 students and up to 10,000 grade entries. * Your program should be able to calculate the average grade for each student while discarding any invalid entries. **Input** The input consists of multiple lines. Each line contains a student\'s name followed by a grade, separated by a space. The student name is a sequence of alphabetic characters (both uppercase and lowercase) and is no more than 20 characters long. Each line of input ensures that a student grade entry is valid if and only if the grade is an integer between 0 and 100 inclusive. The input continues until a line containing only the string \\"STOP\\" is encountered. **Output** The output should consist of multiple lines. Each line contains a student\'s name followed by their average grade, formatted to two decimal places. The students\' names should be listed in alphabetical order. **Example** Input John 80 Jane 85 John 90 Jane 95 InvalidEntry -1 STOP Output Jane 90.00 John 85.00 **Note** * The name \\"InvalidEntry\\" is considered an invalid entry due to the presence of \\"-1\\" as the grade, which is outside the 0-100 range. * You should ignore any invalid entries and continue processing the remainder of the input. If multiple entries are provided for the same student, compute the average of all valid grades.","solution":"def compute_student_averages(input_lines): from collections import defaultdict # Dictionary to store grades for each student student_grades = defaultdict(list) for line in input_lines: if line == \\"STOP\\": break name, grade = line.split() grade = int(grade) if 0 <= grade <= 100: student_grades[name].append(grade) # Calculate the average for each student student_averages = {} for student, grades in student_grades.items(): if grades: avg_grade = sum(grades) / len(grades) student_averages[student] = f\\"{avg_grade:.2f}\\" # Sort the students alphabetically and generate the output sorted_students = sorted(student_averages.items()) output_lines = [f\\"{student} {avg_grade}\\" for student, avg_grade in sorted_students] return output_lines # Example input: input_lines = [ \\"John 80\\", \\"Jane 85\\", \\"John 90\\", \\"Jane 95\\", \\"InvalidEntry -1\\", \\"STOP\\" ] output = compute_student_averages(input_lines) for line in output: print(line)"},{"question":"Johnny is working on a project where he needs to encode and decode messages for secure communication. He is using a specific encryption technique where each letter in the plaintext is shifted a certain number of places down or up the alphabet. Characters other than letters remain unchanged. For example, with a shift of 1, \'a\' would be encoded as \'b\', \'b\' would be encoded as \'c\', and so on. With a shift of -1, \'b\' would be encoded as \'a\', \'c\' would be encoded as \'b\', and so on. The alphabet wraps around such that with a shift of 1, \'z\' would be encoded as \'a\', and with a shift of -1, \'a\' would be encoded as \'z\'. Given a string that represents the plaintext and an integer that represents the shift amount, write a program to encode the plaintext. Input: The first line of input will contain an integer N (|N| ≤ 1000) representing the shift amount. The second line of input will contain a string of length at most 1000 characters representing the plaintext. Output: Output the encoded string. Examples: Input: 1 abc XYZ Output: bcd YZA Input: -1 bcd YZA Output: abc XYZ Note: - The shift amount can be both positive (shift forward) and negative (shift backward). - The function should correctly handle wrapping around the end of the alphabet for both uppercase and lowercase letters.","solution":"def encode_message(shift, plaintext): Encodes the plaintext using the provided shift value. :param shift: Integer value representing the shift amount. :param plaintext: String representing the plaintext to be encoded. :return: String representing the encoded text. encoded_text = [] for char in plaintext: if \'a\' <= char <= \'z\': # lowercase letters new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'A\' <= char <= \'Z\': # uppercase letters new_char = chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\')) else: new_char = char # non-alphabet characters remain unchanged encoded_text.append(new_char) return \'\'.join(encoded_text)"},{"question":"Write a function that checks whether two strings are isomorphic. Two strings are isomorphic if the characters in one string can be replaced to get the other string. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. If the two strings are empty or of different lengths, return `False`. **Example** ```python string1 = \\"paper\\" string2 = \\"title\\" is_isomorphic(string1, string2) -> True string1 = \\"foo\\" string2 = \\"bar\\" is_isomorphic(string1, string2) -> False ```","solution":"def is_isomorphic(string1, string2): Checks if two strings are isomorphic. Parameters: string1 (str): The first string to check. string2 (str): The second string to check. Returns: bool: True if both strings are isomorphic, False otherwise. if len(string1) != len(string2): return False mapping_s1_to_s2 = {} mapping_s2_to_s1 = {} for char1, char2 in zip(string1, string2): if char1 in mapping_s1_to_s2: if mapping_s1_to_s2[char1] != char2: return False else: mapping_s1_to_s2[char1] = char2 if char2 in mapping_s2_to_s1: if mapping_s2_to_s1[char2] != char1: return False else: mapping_s2_to_s1[char2] = char1 return True"},{"question":"You are given a sequence of N positive integers a_1, a_2, ldots, a_N. You are allowed to perform the following operation any number of times (possibly zero): - Select two adjacent elements a_i and a_{i+1} in the sequence, remove them, and insert a new integer which is the greatest common divisor (GCD) of a_i and a_{i+1}. Your task is to determine the minimum possible integer that can be left in the sequence after performing the above operation any number of times. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains one integer N. - The second line contains N space-separated integers a_1, a_2, ldots, a_N. -----Output----- For each test case, print a single line containing one integer ― the minimum possible integer that can be left in the sequence. -----Constraints----- - 1 le T le 10 - 2 le N le 10^5 - 1 le a_i le 10^9 for each valid i -----Example Input----- 2 3 6 9 15 4 8 4 12 16 -----Example Output----- 3 4 -----Explanation----- Example case 1: The minimum possible integer that can be left is 3. We can combine 6 and 9 first to get 3, and then combine 3 and 15 to get 3 again. Example case 2: The minimum possible integer that can be left is 4. Combining any pair of adjacent elements does not alter the outcome in this case, as 4 is the GCD of all possible pairs.","solution":"import math from functools import reduce def solve_gcd_sequence(t, test_cases): results = [] for n, arr in test_cases: min_gcd = reduce(math.gcd, arr) results.append(min_gcd) return results"},{"question":"There is a sports tournament with n players. Each player can play against only one other player in each round. You are tasked with scheduling the matches in such a way that each player gets to play in every round. Moreover, no player should play against the same player more than once throughout the tournament. Input The first line contains a single integer n (2 ≤ n ≤ 100) — the number of players (n is always even). Output If it is possible to schedule the matches, print \\"YES\\" (without quotes). Followed by the tournament schedule in n/2 lines, each line containing n/2 pairs of integers representing the players\' numbers (the players are numbered from 1 to n). Each pair represents a match in that round. If it is not possible to schedule the matches, print \\"NO\\" (without quotes). Examples Input 4 Output YES 1 2 3 4 1 3 2 4 1 4 2 3 Input 6 Output YES 1 2 3 4 5 6 1 3 2 5 4 6 1 4 2 6 3 5 1 5 2 6 3 4 1 6 2 3 4 5 In the second example, there are 6 players, and the output shows each round\'s matches ensuring all players play and no pairs are repeated.","solution":"def schedule_tournament(n): if n % 2 != 0 or n < 2 or n > 100: return (\\"NO\\",) rounds = [] players = list(range(1, n + 1)) for i in range(n - 1): round_matches = [] for j in range(n // 2): player1 = players[j] player2 = players[n - 1 - j] round_matches.append((player1, player2)) rounds.append(round_matches) # Rotate the array for the next round, fixing the first element players = [players[0]] + [players[-1]] + players[1:-1] return (\\"YES\\", rounds) # Formatting the output def format_schedule_tournament(n): result = schedule_tournament(n) if result[0] == \\"NO\\": return \\"NO\\" else: output = [\\"YES\\"] for round_matches in result[1]: round_representation = \\" \\".join(f\\"{p1} {p2}\\" for p1, p2 in round_matches) output.append(round_representation) return \\"n\\".join(output)"},{"question":"In this problem, you need to determine how many pairs of integers (i, j) exist such that for a given array A, A[i] + A[j] equals a given value K. Input The first line of input contains two integers N and K, where N is the number of elements in the array A. The next line contains N space-separated integers, representing the elements of the array A. Output Print the number of pairs (i, j) such that A[i] + A[j] = K and i < j. Constraints 1 ≤ N ≤ 1000 -10^9 ≤ A[i] ≤ 10^9 -10^9 ≤ K ≤ 10^9 Example Input: 5 7 1 2 3 4 5 Output: 2 Explanation: The pairs (i, j) satisfying the given condition are (2, 5) and (3, 4).","solution":"def count_pairs_with_sum(N, K, A): Returns the number of pairs (i, j) such that A[i] + A[j] = K and i < j. count = 0 # Iterate through the array to find all pairs (i, j) such that i < j and A[i] + A[j] = K for i in range(N): for j in range(i + 1, N): if A[i] + A[j] == K: count += 1 return count"},{"question":"# Task: You are required to write a function that simulates an integration of a bot across a 2D grid based on given commands. The bot starts at position (0, 0) on an infinite 2D grid with initial direction \'N\' (North). The bot accepts three commands: \'L\' (left turn), \'R\' (right turn), and \'G\' (go forward by one unit). The bot\'s position and direction change according to these commands. Define a function `simulate_bot(commands)` that takes a string `commands`, consisting of the characters \'L\', \'R\', and \'G\', and returns the final position and direction of the bot as a tuple `(x, y, direction)`. The directions \'N\', \'E\', \'S\', and \'W\' represent North, East, South, and West respectively. Example: ``` simulate_bot(\\"GGLLGG\\") ``` The above example returns the tuple: ``` (0, 0, \'S\') ``` Explanation: 1. The bot starts at position (0, 0) facing North (N). 2. The first two \'G\' commands move the bot to position (0, 2). 3. The \'L\' command turns the bot to face West (W). 4. The second \'L\' command turns the bot to face South (S). 5. The last two \'G\' commands move the bot to position (0, 0). Note: - You must ensure to handle all possible edge cases, such as the bot making multiple turns without moving forward. - The bot should handle multiple and consecutive \'G\' commands appropriately.","solution":"def simulate_bot(commands): Simulates the movement of a bot according to given commands. Parameters: - commands (str): a string consisting of the characters \'L\', \'R\', and \'G\' Returns: - tuple: the final position (x, y) and direction of the bot as (x, y, direction) # Initial position and direction x, y = 0, 0 direction = \'N\' # Define movement changes for directions directions = [\'N\', \'E\', \'S\', \'W\'] # Movement vector for each direction (N, E, S, W) move_vector = { \'N\': (0, 1), \'E\': (1, 0), \'S\': (0, -1), \'W\': (-1, 0), } for command in commands: if command == \'L\': # Turn left direction = directions[(directions.index(direction) - 1) % 4] elif command == \'R\': # Turn right direction = directions[(directions.index(direction) + 1) % 4] elif command == \'G\': # Move forward in the current direction dx, dy = move_vector[direction] x += dx y += dy return (x, y, direction)"},{"question":"Given an n x m grid, you need to find the number of unique paths from the top-left corner to the bottom-right corner of the grid, such that no cell is visited more than once and movement is restricted to either right or down. Implement a function `unique_paths` that takes two integers `n` and `m` as input and returns the number of unique paths modulo 1000000007. # Constraints: * 1 <= n <= 100 * 1 <= m <= 100 # Input Input is given from Standard Input in the following format: ``` n m ``` # Output Output the number of unique paths modulo 1000000007. # Examples Example 1: ``` Input: 2 2 Output: 2 ``` Example 2: ``` Input: 3 3 Output: 6 ``` Example 3: ``` Input: 1 100 Output: 1 ``` **Explanation**: In Example 1: There are two paths from the top-left corner to the bottom-right corner: - Right -> Down - Down -> Right In Example 2: There are six paths from the top-left corner to the bottom-right corner: - Right -> Right -> Down -> Down - Right -> Down -> Right -> Down - Right -> Down -> Down -> Right - Down -> Down -> Right -> Right - Down -> Right -> Down -> Right - Down -> Right -> Right -> Down In Example 3: There is only one path from the 1x100 grid, which is moving right 99 times.","solution":"def unique_paths(n, m): MOD = 1000000007 # initialize a 2D list with zeroes dp = [[0] * m for _ in range(n)] # set the number of ways to reach each cell in the first row and first column to 1 for i in range(n): dp[i][0] = 1 for j in range(m): dp[0][j] = 1 # fill the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD return dp[n-1][m-1] # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read n, m = map(int, input().split()) print(unique_paths(n, m))"},{"question":"Given a list of n integers, you have to determine if you can rearrange the list so that the sum of the first half of the list is equal to the sum of the second half. If the number of elements in the list is odd, it is not possible to split the list into two equal halves, so the answer should be \\"NO\\" in that case. Formally, given an array of length n, you need to find if it is possible to rearrange the array such that: sum(array[1]...array[n/2]) = sum(array[n/2 + 1]...array[n]) Input The input consists of multiple test cases. - The first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. - Each test case consists of two lines: - The first line contains the integer n (1 ≤ n ≤ 10^5) — the number of integers in the list. - The second line contains n integers a_i (1 ≤ a_i ≤ 10^4) — the elements of the list. The sum of n over all test cases will not exceed 10^5. Output For each test case, print \\"YES\\" if it\'s possible to rearrange the array to satisfy the condition, and \\"NO\\" otherwise. Example Input 3 4 1 1 2 2 5 1 2 3 4 5 6 3 3 3 3 6 6 Output YES NO YES Note In the first test case, the numbers can be rearranged to [1, 2, 1, 2]. The sum of the first half is 3 and the sum of the second half is also 3. In the second test case, it is not possible to split the list into two parts with an equal sum because the number of elements is odd. In the third test case, the numbers can be rearranged to [3, 6, 3, 3, 3, 6]. The sum of the first half is 12 and the sum of the second half is also 12.","solution":"from itertools import combinations def can_split_into_equal_halves(n, arr): Determines if the array can be rearranged to have equal sums in its two halves. if n % 2 != 0: return \\"NO\\" half = n // 2 total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" half_sum = total_sum // 2 possible = sum_possible(half_sum, arr) return \\"YES\\" if possible else \\"NO\\" def sum_possible(target, nums): Determines if any subset of nums sums up to target. This is a variation of the subset-sum problem. dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return dp[target] def process_input(t, cases): results = [] for i in range(t): n, arr = cases[i] result = can_split_into_equal_halves(n, arr) results.append(result) return results"},{"question":"In a small town, there are several streets and intersections, which can be represented as a directed graph. The town officials want to ensure that people can travel efficiently between different intersections. To achieve this, they need to create a special type of path called a \\"bypass\\". A \\"bypass\\" is defined as a path from intersection `A` to intersection `B` such that the path does not include more than `K` other intersections between `A` and `B`. Given the directed graph of streets and intersections, you need to determine whether there exists a bypass from a given intersection `A` to a given intersection `B` with at most `K` intermediate intersections. **Example:** ``` Input: n = 5, m = 6, K = 2 edges = [(1, 2), (2, 3), (3, 4), (4, 5), (1, 3), (1, 4)] A = 1, B = 5 Output: True Explanation: There is a path from intersection 1 to intersection 5 through intersections [1 -> 3 -> 4 -> 5], which includes exactly 2 intermediate intersections (3 and 4), meeting the criteria of at most 2 intermediate intersections. ``` **Your Task:** You need to implement the function `isBypassExists(n, m, edges, K, A, B)` which takes the number of intersections `n`, the number of streets `m`, the list of directed edges `edges[]`, the maximum number of intermediate intersections `K`, and two intersections `A` and `B` as input, and returns a boolean value `True` if a bypass exists from `A` to `B` with at most `K` intermediate intersections, otherwise returns `False`. **Expected Time Complexity:** O(n + m) **Constraints:** - 1 <= n <= 10^5 - 1 <= m <= 2 * 10^5 - 1 <= A, B <= n - 0 <= K <= n - 1 - Edges are directed and there could be self-loops and multiple edges between two intersections.","solution":"from collections import deque, defaultdict def isBypassExists(n, m, edges, K, A, B): Determine if there exists a bypass from intersection A to intersection B with at most K intermediate intersections. :param n: Number of intersections :param m: Number of streets :param edges: List of tuples representing directed edges :param K: Maximum number of intermediate intersections :param A: Starting intersection :param B: Destination intersection :return: Boolean value indicating whether a bypass exists # Create the graph representation graph = defaultdict(list) for u, v in edges: graph[u].append(v) # BFS to find the shortest path from A to B with at most K intermediate nodes queue = deque([(A, 0)]) # (current node, current depth) visited = set((A, 0)) while queue: node, depth = queue.popleft() if node == B: return True if depth < K + 1: for neighbor in graph[node]: if (neighbor, depth + 1) not in visited: visited.add((neighbor, depth + 1)) queue.append((neighbor, depth + 1)) return False"},{"question":"- You have been provided with a grid filled with numbers. Your task is to write a function `find_largest_sum(grid)` that finds the greatest sum of any contiguous subgrid within the given grid. A subgrid is defined as a rectangular section of the grid. Given a grid as follows: ``` grid = [ [1, 2, -1, -4, -20], [-8, -3, 4, 2, 1], [3, 8, 10, 1, 3], [-4, -1, 1, 7, -6] ] ``` Your function should return: ``` 29 ``` Here, the subgrid with the maximum sum is: ``` 3 8 10 1 3 -4 -1 1 7 ``` and its sum is 29.","solution":"def find_largest_sum(grid): Finds the greatest sum of any contiguous subgrid within the given grid. Uses dynamic programming approach similar to Kadane\'s algorithm for 2D arrays. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) max_sum = float(\'-inf\') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += grid[i][right] current_sum = kadane(temp) max_sum = max(max_sum, current_sum) return max_sum def kadane(array): Helper function to perform Kadane\'s algorithm on a 1D array. Finds the maximum sum of any contiguous subarray within the array. max_sum = current_subarray_sum = array[0] for num in array[1:]: current_subarray_sum = max(num, current_subarray_sum + num) max_sum = max(max_sum, current_subarray_sum) return max_sum"},{"question":"You have been given an integer array `arr` of length `n` where each element represents the height of a building. The buildings form a skyline viewed from left to right. Your task is to determine the number of new buildings that would need to be added to the skyline in order to make it strictly increasing. A strictly increasing skyline means that each building from left to right is taller than the previous one. To accomplish this, you can add new buildings of any height at any position in the skyline. -----Input----- The input contains multiple test cases. The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. The next 2t lines contain descriptions of test cases. Each test case consists of two lines: 1. The first line of each test case contains a single integer n (1 leq n leq 1000) — the number of buildings in the array. 2. The second line contains n integers arr_i (0 leq arr_i leq 10^9) — the heights of the buildings in the array. -----Output----- For each test case, output a single integer — the minimum number of buildings that need to be added to make the skyline strictly increasing. -----Example----- Input 3 5 1 2 2 3 4 4 4 3 2 1 6 1 3 3 5 4 6 Output 1 3 2 -----Note----- In the first test case, you can add a building of height `3` between the second and third buildings, making the skyline strictly increasing: `[1, 2, 3, 2, 3, 4]`. In the second test case, you need to add three buildings to make the array strictly increasing, for example: `[4, 5, 6, 7]`. In the third test case, you can add buildings of heights `4` and `5` between the third and fourth buildings, changing the skyline to: `[1, 3, 3, 4, 5, 4, 5, 6]`.","solution":"def min_additions_to_increasing(arr): Determine the minimum number of buildings to add to make the skyline strictly increasing. n = len(arr) additions = 0 current_max = arr[0] for i in range(1, n): if arr[i] <= current_max: additions += 1 else: current_max = arr[i] return additions def process_test_cases(test_cases): Process multiple test cases to determine the number of additions for each one. results = [] for n, arr in test_cases: results.append(min_additions_to_increasing(arr)) return results"},{"question":"FurniCo is a company that sells handcrafted furniture. They receive orders for some pieces of furniture which need to be made from specific wood planks available in their inventory. Each piece of furniture is made from one or more types of wood, and each piece must use exactly the specified amount of each type of wood. Your task is to write a program that determines how many of each type of wood plank must be cut from the inventory to fulfill a given set of orders. Each order specifies an exact amount of each type of wood required per piece, and the quantity of pieces ordered. The inventory and orders should be managed such that the wastage (leftover wood) is minimized. Input The input consists of multiple datasets. Each dataset is formatted as follows: I J w1 l1 w2 l2 . . . wI lI n1 k1 t1 n2 k2 t2 . . . nJ kJ tJ The first line of a dataset contains two integers, I and J (1 ≤ I ≤ 100, 1 ≤ J ≤ 100), which indicate the number of types of wood and the number of orders, respectively. The following I lines describe the inventory. The i-th line contains two integers, wi and li (1 ≤ wi ≤ 1000, 1 ≤ li ≤ 1000) which denote the type and inventory length of the i-th type of wood. The next J lines describe the orders. The j-th line contains three integers, nj, kj, and tj (1 ≤ nj ≤ 1000, 1 ≤ kj ≤ 1000, 1 ≤ tj ≤ 1000) which denote the number of pieces ordered, the type of wood required, and the length of the wood required for each piece, respectively. There is at most one order for each type of wood. The end of the input is indicated by a line containing two zeros separated by a space, and you should not process this as a test case. Output Print the number of wood planks necessary to fulfill each order for each type of wood, in the same order as they are given. Example Input 3 2 1 500 2 1000 3 300 5 1 100 3 2 250 4 3 75 0 0 Output 2 1 2","solution":"def parse_input(data): lines = data.strip().split(\'n\') index = 0 result = [] while index < len(lines): I, J = map(int, lines[index].split()) if I == 0 and J == 0: break index += 1 inventory = [] for i in range(I): wi, li = map(int, lines[index].split()) inventory.append((wi, li)) index += 1 orders = [] for j in range(J): nj, kj, tj = lines[index].split() orders.append((int(nj), int(kj), int(tj))) index += 1 result.append((inventory, orders)) return result def compute_planks(inventory, orders): requirements = {wood_type: 0 for wood_type, _ in inventory} for pieces, wood_type, required_length in orders: requirements[wood_type] += pieces * required_length planks_needed = [] for wood_type, inventory_length in inventory: if requirements[wood_type] > 0: planks_needed.append(-(-requirements[wood_type] // inventory_length)) # Ceiling division else: planks_needed.append(0) return planks_needed def get_wood_planks(data): datasets = parse_input(data) results = [] for inventory, orders in datasets: result = compute_planks(inventory, orders) results.append(result) return results def format_output(results): result_lines = [] for result in results: result_lines.append(\\" \\".join(map(str, result))) return \\"n\\".join(result_lines)"},{"question":"A vending machine dispenses a snack item for a cost given in cents. The vending machine only accepts coins of 1 cent, 5 cents, 10 cents, and 25 cents. Write a function `min_coins` that calculates the minimum number of coins needed to make the exact payment. If it is impossible to make the exact payment with the given coin denominations, return -1. INPUT: `cost` as integer representing the cost in cents. OUTPUT: An integer representing the minimum number of coins needed or -1 if payment is impossible. Example 1: ```python min_coins(31) ``` Output: ```python 3 # Explanation: 25 + 5 + 1 ``` Example 2: ```python min_coins(3) ``` Output: ```python 3 # Explanation: 1 + 1 + 1 ``` Example 3: ```python min_coins(52) ``` Output: ```python -1 # Explanation: Without 1 cent coins, 52 cents cannot be made with 5, 10, and 25 cent coins. ```","solution":"def min_coins(cost): Calculate the minimum number of coins needed to make the exact payment. Parameters: cost (int): The cost in cents. Returns: int: The minimum number of coins needed or -1 if the payment is impossible. if cost < 0: return -1 coins = [25, 10, 5, 1] count = 0 for coin in coins: count += cost // coin cost %= coin return count if cost == 0 else -1"},{"question":"A software company organizes regular internal hackathons. In these hackathons, employees submit coding solutions to various challenges. Each solution is evaluated and given a score based on its efficiency and accuracy. As part of the evaluation process, the scores are then ranked, and the top `p` solutions get highlighted in the results. Given a list of scores and an integer `p`, you are required to determine which scores will appear in the top `p` positions if they were to be ranked. If ties exist in the scores, include all scores that are tied within the top `p` positions. # Input The first line contains two integers `n` and `p` (1 ≤ p ≤ n ≤ 1000) — the number of solutions and the number of top positions to determine. The second line contains `n` space-separated integers — the scores of the solutions. Each score is between `0` and `1000`. # Output Print the scores that would appear in the top `p` positions, sorted in non-increasing order. If there are ties in the scores, all tied scores should be included, even if it exceeds the top `p` positions. # Examples Input ``` 5 3 50 80 80 70 90 ``` Output ``` 90 80 80 ``` Input ``` 6 4 100 100 90 80 75 70 ``` Output ``` 100 100 90 80 ``` Input ``` 4 2 60 85 85 75 ``` Output ``` 85 85 ``` **Note** In the first example, the highest score is 90 and should be included. The next highest score, 80, appears twice, and both occurrences should be included, resulting in reporting exactly three scores. In the second example, the top four scores are 100, 100, 90, and 80. There are no ties beyond the top four positions. In the third example, the top two scores are both 85. Since they are tied for the first position, the output should contain both scores.","solution":"def top_scores(n, p, scores): Determines the top p scores, including ties. Parameters: n (int): The number of scores p (int): The number of top scores to return scores (List[int]): The list of scores Returns: List[int]: The list of top p scores, sorted in non-increasing order. # Sort scores in non-increasing order sorted_scores = sorted(scores, reverse=True) # Collect the top p scores including ties top_p_scores = sorted_scores[:p] cutoff_score = top_p_scores[-1] # Include all scores that are tied with the last score in top_p_scores result = [score for score in sorted_scores if score >= cutoff_score] return result"},{"question":"Design an algorithm that can transform a given sequence of elements to a new sequence based on specific rules. You are given a sequence of integers. Write a program to transform the sequence by performing a given set of operations repeatedly until a specified condition is met. Each operation is defined by a pair of integers (x, y), which means that all occurrences of x in the sequence should be replaced by y. Constraints * 1 leq length of the sequence leq 100 * 0 leq integer in the sequence leq 100 * 1 leq number of operations leq 50 * 0 leq x, y leq 100 * An integer can be replaced any number of times. * The sequence should be transformed until no more replacements can be applied. Input In the first line, an integer n representing the length of the sequence is given. In the second line, n integers that constitute the sequence. In the third line, an integer m representing the number of operations. In the subsequent m lines, pairs of integers (x, y) are given which define the replacement rules. Output Print the transformed sequence. Example Input 5 1 2 2 3 4 3 2 3 3 1 4 0 Output 1 1 1 1 0","solution":"def transform_sequence(n, sequence, m, operations): Transforms the sequence based on the given replacement rules (operations) until no more replacements can be applied. :param n: Length of the sequence :param sequence: List of integers constituting the sequence :param m: Number of operations :param operations: List of tuples [(x, y),...] defining the replacement rules :return: Transformed sequence # Apply the transformation rules until no more changes occur while True: # Flag to check if a change was made changed = False # Iterate over each operation (x, y) for (x, y) in operations: while x in sequence: idx = sequence.index(x) sequence[idx] = y changed = True # If no changes were made in this iteration, stop if not changed: break return sequence"},{"question":"You are organizing a charity event and you need to print invitations for the attendees. Each invitation should include the full names of the participants in a formatted list. The participants are represented as a list of dictionaries, where each dictionary contains the first and last names of an individual. Write a function that takes this list and returns a formatted multi-line string where each line contains the full name of an attendee in the format \\"Last name, First name\\". Example: ```python participants = [ {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\"}, {\\"first_name\\": \\"Jane\\", \\"last_name\\": \\"Smith\\"}, {\\"first_name\\": \\"Alice\\", \\"last_name\\": \\"Johnson\\"} ] print(format_invitations(participants)) ``` Expected output: ``` Doe, John Smith, Jane Johnson, Alice ``` Your function should be named `format_invitations` and should take a list of dictionaries `participants` as the argument. Ensure it handles an empty list by returning an empty string.","solution":"def format_invitations(participants): Returns a formatted multi-line string of participant names. Each name is in the format \\"Last name, First name\\". if not participants: return \\"\\" return \\"n\\".join(f\\"{participant[\'last_name\']}, {participant[\'first_name\']}\\" for participant in participants)"},{"question":"You are given a binary string S of length n, consisting of characters \'0\' and \'1\' only, and an integer k. Your task is to determine whether it is possible to obtain a binary string consisting of exactly k consecutive \'1\'s by flipping the bits of the given string S. A bit flip operation swaps the character \'0\' to \'1\' and \'1\' to \'0\'. You can perform as many bit flip operations as needed. -----Input----- The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the length of the binary string and the length of consecutive ones required. The second line contains a binary string S of length n. -----Output----- Print \\"YES\\" (without quotes) if it is possible to obtain exactly k consecutive \'1\'s in the binary string S after performing one or more bit flipping operations. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input 8 3 10001101 Output YES Input 5 5 00000 Output YES Input 5 6 11111 Output NO -----Note----- In the first example, flipping the bits at positions 2, 5, and 6 results in the string \\"11111101\\", which contains exactly one segment of 3 consecutive \'1\'s. In the second example, flipping all bits results in the string \\"11111\\", which contains exactly 5 consecutive \'1\'s. In the third example, since k is larger than n, it is impossible to achieve 6 consecutive \'1\'s regardless of any bit flips performed.","solution":"def can_obtain_k_consecutive_ones(n, k, S): Determines if it is possible to obtain exactly k consecutive \'1\'s by flipping bits in the binary string S. Args: n (int): Length of the binary string S. k (int): Length of consecutive \'1\'s required. S (str): Binary string of length n. Returns: str: \\"YES\\" if it is possible to obtain exactly k consecutive \'1\'s, otherwise \\"NO\\". if k > n: return \\"NO\\" # Scanning the string to find any section of k consecutive characters # If found k consecutive \'0\'s or \'1\'s then we can make it for i in range(n - k + 1): if S[i:i+k] == \'0\' * k or S[i:i+k] == \'1\' * k: return \\"YES\\" return \\"NO\\""},{"question":"Given a string s and a character c, find the number of substrings in s that start and end with the character c. Example 1: Input : s = \\"abcabc\\", c = \'a\' Output : 3 Explanation: The substrings that start and end with \'a\' are \\"a\\", \\"abc\\", and \\"a\\". Example 2: Input : s = \\"aaaa\\", c = \'a\' Output : 10 Explanation: The substrings that start and end with \'a\' are \\"a\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aaa\\", \\"aaa\\", \\"aaa\\", and \\"aaaa\\". Example 3: Input : s = \\"abcd\\", c = \'z\' Output : 0 Explanation: There are no substrings that start and end with \'z\'. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function countSubstrings() that takes a string (s), a character (c), and return the number of substrings that start and end with the character c. The driver code takes care of the printing. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ |s| ≤ 10^5 s contains only lowercase English letters. c is a single lowercase English letter.","solution":"def countSubstrings(s, c): Returns the number of substrings in s that start and end with the character c. Parameters: s (str): The input string. c (char): The character to look for. Returns: int: The number of substrings that start and end with the character c. count = 0 occurrences = 0 for char in s: if char == c: occurrences += 1 count += occurrences return count"},{"question":"Given an integer array `arr` and an integer `k`, determine if the array contains any duplicate elements within `k` distance from each other. Example 1: Input: arr = [1, 2, 3, 1], k = 3 Output: True Explanation: The number `1` appears twice within a distance of 3 indices. Example 2: Input: arr = [1, 0, 1, 1], k = 1 Output: True Explanation: The number `1` appears twice within a distance of 1 index. Example 3: Input: arr = [1, 2, 3, 4, 5], k = 2 Output: False Explanation: No duplicates within distance of 2 indices. Your Task: You don\'t need to read input or print anything. Complete the function `checkDupWithinK()` which takes `arr` and `k` as input parameters and returns a boolean whether duplicates within k distance exist. Expected Time Complexity: O(n) Expected Auxiliary Space: O(min(n, k)) Constraints: 1<= |arr| <=10^5 0 <= arr[i] <= 10^7 0 <= k <= 10^5","solution":"def checkDupWithinK(arr, k): Determines if the array contains any duplicate elements within k distance from each other. Parameters: arr (List[int]): The array to check for duplicates. k (int): The maximum allowed distance between duplicate elements. Returns: bool: True if there are duplicate elements within k distance, False otherwise. seen_elements = {} for i, value in enumerate(arr): if value in seen_elements and i - seen_elements[value] <= k: return True seen_elements[value] = i return False"},{"question":"Write a function that takes a list of integers and returns the product of all the elements in the list. For example: ```python [1, 2, 3, 4] ==> 24 [2, 5, 7] ==> 70 ```","solution":"def product_of_list(int_list): Returns the product of all elements in the list. product = 1 for num in int_list: product *= num return product"},{"question":"Implement a function that takes a string as input and returns the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one encountered. For example, given the input \\"abcabcbb\\", the output should be \\"abc\\" since it is the longest substring without repeating characters. Your implementation should consider both lowercase and uppercase letters and should be case-sensitive.","solution":"def longest_unique_substring(s: str) -> str: Returns the longest substring of s without repeating characters. If there are multiple substrings of the same length, the first one encountered is returned. n = len(s) longest_substr = \\"\\" char_map = {} start = 0 for end in range(n): if s[end] in char_map: start = max(start, char_map[s[end]] + 1) char_map[s[end]] = end if end - start + 1 > len(longest_substr): longest_substr = s[start:end + 1] return longest_substr"},{"question":"Write a function that calculates the factorial of a given non-negative integer. -----Input----- The input contains a single non-negative integer n (0 ≤ n ≤ 12). -----Output----- Output the factorial of the given integer. -----Examples----- Input 5 Output 120 Input 0 Output 1","solution":"def factorial(n): Returns the factorial of the given non-negative integer n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Given an array of integers. You are allowed to perform the following operation any number of times: - Choose two distinct elements A and B from the array. - Replace A and B with their absolute difference |A-B|. Your task is to determine the least possible non-zero element that can be left in the array after performing the operations optimally. -----Constraints----- - 1 leq length of array leq 1000 - Each element in the array is an integer between 1 and 10^6. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print the least possible non-zero element that can be left in the array after performing the operations. -----Sample Input----- 4 10 7 9 5 -----Sample Output----- 1 You can achieve the result by optimizing the operations as follows: - Choose (10, 7) ->|10-7|=3; Array: [3, 9, 5] - Choose (5, 3) ->|5-3|=2; Array: [2, 9] - Choose (9, 2) ->|9-2|=7; Array: [7]","solution":"def smallest_non_zero_element(arr): Returns the least possible non-zero element left after performing the operations optimally. from math import gcd from functools import reduce def gcd_of_list(lst): return reduce(gcd, lst) # Calculate the gcd of the entire array min_non_zero = gcd_of_list(arr) return min_non_zero"},{"question":"Due to recent security concerns, the Ministry of Magic has decided to enhance their encryption methods. One of their cryptographic approaches involves manipulating strings in a specific way. Given a string, they want to convert it such that each character in the string shifts a certain number of places down the alphabet. This shifted string is what they will use for encoding their messages. If the given string contains a ‘z’ and needs to be shifted by 1, it wraps around back to ‘a’. The same applies to uppercase characters. Spaces and other characters should remain unaffected. Given a string and the integer value by which each letter should be shifted, your task is to create the encoded string. Input The first line contains an integer T, the number of test cases. Each of the next T lines contains a string and an integer separated by a space. The string can contain any printable ASCII characters, and the integer specifies the shift amount. Output Output T lines, each containing the encoded string for the corresponding test case. Constraints 1 ≤ T ≤ 20 1 ≤ The length of each string ≤ 100 0 ≤ Shift amount ≤ 25 SAMPLE INPUT 2 hello 1 Zebra! 3 SAMPLE OUTPUT ifmmp Cheud! Note: In the second test case, \'Z\' shifted by 3 becomes \'C\', \'e\' shifted by 3 becomes \'h\', and so on. Spaces and punctuation marks are not shifted.","solution":"def encode_string(s, shift): Encode the string `s` by shifting each letter by `shift` positions in the alphabet. Non-letter characters are not affected. encoded_chars = [] for char in s: if \'a\' <= char <= \'z\': encoded_chars.append(chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': encoded_chars.append(chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\'))) else: encoded_chars.append(char) return \'\'.join(encoded_chars) def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') T = int(data[0]) results = [] for i in range(1, T + 1): parts = data[i].rsplit(\' \', 1) s = parts[0] shift = int(parts[1]) results.append(encode_string(s, shift)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a non-negative weight. The goal is to find the shortest path from a given start node s to a destination node d. The shortest path is defined as the path with the minimum total weight of edges connecting the start and destination nodes. Implement an algorithm to determine the shortest path weight from the start node to the destination node. If there is no path from the start node to the destination node, return -1. -----Input----- The first line contains two integers n and m (1 le n le 1000, 0 le m le 2500) — the number of nodes and edges in the graph, respectively. The (m + 1)-th line contains three integers u, v, and w (0 le u, v < n, 0 le w le 10^6) representing an edge between nodes u and v with weight w. The (m + 2)-th line contains two integers s and d (0 le s, d < n) — the start and destination nodes. -----Output----- If there is a path from start node s to destination node d, output the weight of the shortest path. Otherwise, output -1. -----Example----- Input 4 4 0 1 1 1 2 2 0 2 4 2 3 1 0 3 Output 4 Note: The shortest path from node 0 to node 3 is 0 -> 1 -> 2 -> 3 with a total weight of 1 + 2 + 1 = 4.","solution":"import heapq def shortest_path(n, m, edges, start, end): Returns the shortest path weight from start node to end node in a graph with n nodes and m edges. If no such path exists, returns -1. graph = [[] for _ in range(n)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, start)] dist = {i: float(\'inf\') for i in range(n)} dist[start] = 0 visited = set() while pq: current_dist, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return dist[end] if dist[end] != float(\'inf\') else -1"},{"question":"The guild of Wizards is preparing potions for an upcoming magical festival. Each potion is created by mixing certain amounts of specific ingredients. There are n types of ingredients and each potion recipe requires a specific quantity of each ingredient. To assist the guild, you need to determine if a potion can be created given the available quantities of the ingredients. You are given the quantities of n types of ingredients available and the recipe specifying how much of each ingredient is needed to make a single potion. Your task is to check if it is possible to create exactly one potion with the given ingredients. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 100), representing the number of types of ingredients. The second line contains n integers representing the quantity of each ingredient available. The third line contains n integers representing the quantity of each ingredient needed to create one potion. -----Output----- Output YES if it is possible to create one potion with the available ingredients, or output NO if it is not possible. -----Example----- Input 5 3 6 2 5 8 2 5 1 1 3 Output YES Input 4 2 1 0 4 1 2 1 2 Output NO","solution":"def can_create_potion(n, available, needed): Determine if a potion can be created given the available quantities of the ingredients. :param n: number of types of ingredients :param available: list of integers representing quantities of available ingredients :param needed: list of integers representing quantities of ingredients needed for one potion :return: \\"YES\\" if one potion can be created, otherwise \\"NO\\" for i in range(n): if available[i] < needed[i]: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array `arr` containing N integers, where each integer represents a different kind of flower. Your objective is to determine the number of operations required so that no two adjacent flowers in the array are of the same type. In one operation, you can change the type of any one flower to any other type. # Example 1: Input: arr[] = {1, 2, 2, 3, 3} Output: 2 Explanation: Change the second \'2\' to \'3\' and the second \'3\' to \'1\' or any other number different from its adjacent values to make the array {1, 2, 3, 3, 1} or similar. # Example 2: Input: arr[] = {4, 4, 4, 4} Output: 3 Explanation: Change three out of the four \'4\'s to different numbers to make them all distinct. # Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `minimum_operations()` that takes an array (arr), size of the array (N) and returns the minimum number of operations needed to ensure no two adjacent elements are the same. The driver code takes care of the printing. # Expected Time Complexity: O(N) # Expected Auxiliary Space: O(1) # Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^5","solution":"def minimum_operations(arr): Given an array of integers, determine the minimum number of operations needed so that no two adjacent integers are the same. Parameters: arr (list): List of integers representing flower types Returns: int: Minimum number of operations N = len(arr) if N == 0: return 0 operations = 0 for i in range(1, N): if arr[i] == arr[i - 1]: operations += 1 # Change the current element to a different value # In practical scenario, we can just mark this change, as it doesn\'t affect further steps in this loop return operations"},{"question":"Aria is practicing calculating the distances between cities. She has a list of cities connected by roads, where each road has a length associated with it. Aria wants to calculate the shortest path between two given cities. How can Aria determine the shortest distance between the two cities using the given road network? Note: - Each city is represented as a unique integer. - The cities and roads form a connected, undirected graph. - Each road\'s length is a positive integer. Write a function to help Aria find the shortest distance between two cities using Dijkstra\'s algorithm. If there is no path between the two cities, return -1. ----- Input Format ----- - The first line contains an integer N - the number of cities. - The second line contains an integer E - the number of roads. - Each of the next E lines contains three integers a, b, and c, where a and b are cities connected by a road of length c. - The next line contains two integers, start and end, representing the cities Aria is interested in. ----- Output Format ----- - The output is a single integer representing the shortest distance between the start and end cities. If no path exists, output -1. ----- Constraints ----- 1 ≤ N ≤ 1000 1 ≤ E ≤ 10000 1 ≤ a, b ≤ N 1 ≤ c ≤ 10^6 1 ≤ start, end ≤ N All roads are bidirectional. ----- Sample Input 1 ----- 4 4 1 2 4 1 3 2 2 3 3 3 4 1 1 4 ----- Sample Output 1 ----- 3 ----- Explanation 1 ----- The shortest path from city 1 to city 4 is 1 -> 3 -> 4 with a total length of 3.","solution":"import heapq def dijkstra(num_cities, roads, start, end): graph = {i: [] for i in range(1, num_cities + 1)} for a, b, length in roads: graph[a].append((b, length)) graph[b].append((a, length)) pq = [(0, start)] distances = {i: float(\'inf\') for i in range(1, num_cities + 1)} distances[start] = 0 while pq: current_distance, current_city = heapq.heappop(pq) if current_distance > distances[current_city]: continue for neighbor, length in graph[current_city]: distance = current_distance + length if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1"},{"question":"Given a string S containing only lowercase Latin characters, determine the frequency of each character in the string and print the characters in decreasing order of their frequency. If two characters have the same frequency, they should be printed in alphabetical order. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow. - Each test case is described with a single line containing a string S. -----Output----- - For each test case, output a single line containing the characters of the string S, sorted by frequency and then alphabetically within the same frequency. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 1000, where |S| is the length of the string S. -----Example----- Input: 2 bbaa abcabc Output: ab abc -----Explanation----- In the first case, both \'a\' and \'b\' appear twice. Since their frequencies are the same, they are printed in alphabetical order. In the second case, all characters \'a\', \'b\', and \'c\' appear twice each; hence, they are printed in alphabetical order.","solution":"def frequency_sort(S): Returns the characters of the string S sorted by frequency and then alphabetically within the same frequency. from collections import Counter # Count frequencies of each character in S freq_counter = Counter(S) # Generate a sorted list of characters based on frequency and alphabetically within the same frequency sorted_chars = sorted(freq_counter.keys(), key=lambda x: (-freq_counter[x], x)) return \'\'.join(sorted_chars) def process_test_cases(T, test_cases): Process and return results for multiple test cases. results = [] for S in test_cases: results.append(frequency_sort(S)) return results"},{"question":"Write a function named `filter_numbers` that takes a list of integers and a single integer as arguments. The function should return a list containing only the elements from the input list that are greater than the given single integer. If the input list is empty or no elements are greater, return an empty list. Examples: ```python filter_numbers([1, 2, 3, 4, 5], 3) => [4, 5] filter_numbers([10, 20, 30], 25) => [30] filter_numbers([5, 7, 2, 9], 9) => [] filter_numbers([], 1) => [] ``` Assume that: - The input list can contain zero or more integers. - The single integer can be positive, negative, or zero.","solution":"def filter_numbers(numbers, threshold): Returns a list of numbers from the input list that are greater than the given threshold. :param numbers: List[int] - A list of integers. :param threshold: int - A single integer threshold. :return: List[int] - A list of integers from the input list that are greater than the threshold. return [num for num in numbers if num > threshold]"},{"question":"You are a curator at the National Cyber Museum, and your task is to set up a brand new exhibit about the history of computing machines. The exhibit will feature a series of illustrious items from the museum\'s collection. Each item has a specific start and end date during which it can be shown. However, there is a problem. Due to space constraints, only one item can be displayed at a time. You need to determine the maximum number of items that can be scheduled for the exhibit without any overlap in their display periods. You have a list of items, each defined by its start and end date. Your goal is to select the maximum number of items such that no two of them overlap. -----Input----- The first line contains an integer 1 leq T leq 100000 denoting the total number of items. Each of the next T lines contains two integers 0 leq S < E leq 1000000000, which represent the start and end date of an item, respectively. -----Output----- Print a single integer, the maximum number of items that can be scheduled without any overlap. -----Examples----- Sample Input: 3 1 4 2 3 3 5 Sample Output: 2 Sample Input: 4 0 2 3 4 5 6 7 8 Sample Output: 4 Note: In the first example, the items [1,4] and [3,5] can be scheduled without overlap, or the items [2,3] and [3,5]. Hence, the maximum number of items that can be scheduled is 2. In the second example, none of the items overlap, so all 4 items can be scheduled.","solution":"def max_non_overlapping_items(items): # Sort the items by their end date items.sort(key=lambda x: x[1]) max_items = 0 current_end = -1 for start, end in items: if start >= current_end: max_items += 1 current_end = end return max_items"},{"question":"\\"Who\'s at the Door?\\" Sherlock is back home after saving Watson. While he was relaxing, someone knocked on the door. Sherlock was curious to know who it could be at this hour. He looked at the security feed and saw some encoded messages. To decipher them, he needs your help. The encoded message is given as a string and you need to tell whether the sum of the ASCII values of the characters in the string is divisible by 3. Sherlock thinks someone with encoded messages might be important, so he wants to solve this quickly with your programming skills. Can you help him? -----Input----- The first line contains T, the number of test cases. Each test case contains a single string, S. -----Output----- Output \\"YES\\" if the sum of the ASCII values of the characters in the string is divisible by 3, otherwise output \\"NO\\" for each test case. -----Constraints----- 1 <= T <= 20 1 <= |S| <= 1000 -----Example----- Input: 2 Sherlock Watson Output: NO YES Explanation: For the first test case, the sum of the ASCII values of the string \\"Sherlock\\" is 725, which is not divisible by 3. For the second test case, the sum of the ASCII values of the string \\"Watson\\" is 633, which is divisible by 3.","solution":"def is_sum_divisible_by_3(s): Checks if the sum of ASCII values of the characters in the string `s` is divisible by 3. ascii_sum = sum(ord(char) for char in s) return ascii_sum % 3 == 0 def who_is_at_the_door(test_cases): Given a list of test cases with strings, returns a list of \\"YES\\" or \\"NO\\" based on whether the sum of ASCII values of the characters in each string is divisible by 3. result = [] for s in test_cases: if is_sum_divisible_by_3(s): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Tom and Jerry lost their way in a maze described as a grid of size m × n. Each cell in the grid contains either a 0 (representing an empty space) or a 1 (representing an obstacle). Tom starts at cell (0, 0) and needs to reach cell (m-1, n-1). He can move up, down, left, or right, but cannot go through obstacles. Help Tom find the minimum number of steps required to reach (m-1, n-1). If it is not possible for Tom to reach the destination, return -1. Write a program to solve the problem. -----Input----- The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the grid. The following m lines each contain n integers (either 0 or 1) describing the grid. -----Output----- Output a single integer — the minimum number of steps required to reach (m-1, n-1). If it is not possible to reach the destination, print -1. -----Examples----- Input: 5 5 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 Output: 8 Input: 3 3 0 1 0 0 1 0 0 0 0 Output: 4","solution":"from collections import deque def min_steps_in_maze(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] visited = [[False] * n for _ in range(m)] queue = deque([(0, 0, 0)]) # (x, y, steps) visited[0][0] = True while queue: x, y, steps = queue.popleft() if x == m-1 and y == n-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == 0: queue.append((nx, ny, steps + 1)) visited[nx][ny] = True return -1"},{"question":"Alice is hosting a party and wants to arrange the seating of her guests. She has a list of n guests and m friendships among these guests. Two friends prefer to sit next to each other, meaning their seats should be consecutive. The seating is arranged in a straight line with seats numbered from 1 to n. Alice wants to satisfy as many friendships as possible while ensuring each guest gets exactly one seat. You need to determine the maximum number of friendships that can be satisfied and provide a possible seating arrangement of guests achieving this maximum. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n * (n-1) / 2) — the number of guests and the number of friendships. The next m lines contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that guest u and guest v are friends. Output On the first line, output the maximum number of friendships that can be satisfied. On the second line, output n integers representing the guest in each seat from 1 to n. If there are multiple solutions, output any. Example Input 5 4 1 2 2 3 3 4 4 5 Output 4 1 2 3 4 5","solution":"def max_friendships(n, m, friendships): from collections import defaultdict def find_root(guest): if parent[guest] != guest: parent[guest] = find_root(parent[guest]) return parent[guest] def union_sets(guest1, guest2): root1 = find_root(guest1) root2 = find_root(guest2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 parent = {i: i for i in range(1, n+1)} rank = {i: 0 for i in range(1, n+1)} for u, v in friendships: union_sets(u, v) satisfied_friendships = 0 components = defaultdict(list) for guest in range(1, n+1): components[find_root(guest)].append(guest) seating = [] for nodes in components.values(): seating.extend(nodes) satisfied_friendships += len(nodes) - 1 return satisfied_friendships, seating # Sample test scenario n = 5 m = 4 friendships = [(1, 2), (2, 3), (3, 4), (4, 5)] satisfied_friendships, seating = max_friendships(n, m, friendships) print(satisfied_friendships) print(\' \'.join(map(str, seating)))"},{"question":"You are given an array of N integers. Your task is to count the number of subarrays with an odd sum for each test case. ------ Input Format ------ - The first line of input contains one positive integer T, the number of test cases. The description of T test cases follows. - The first line of each test case contains one positive integer N, the number of elements in the array. - The second line of each test case contains N space-separated integers, the elements of the array. ------ Output Format ------ For each test case, output a single line containing the count of subarrays with an odd sum. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} |A_{i}| ≤ 10^{9} The sum of N over all test cases does not exceed 10^{6}. ----- Sample Input 1 ------ 2 3 1 2 3 4 1 2 3 4 ----- Sample Output 1 ------ 4 6 ----- Explanation 1 ------ - Test case 1: - The subarrays are: [1], [1, 2], [2, 3], [1, 2, 3] (odd subarrays) - Test case 2: - The subarrays are: [1], [1, 2], [2, 3], [2, 3, 4], [3], [3, 4] (odd subarrays)","solution":"def count_odd_sum_subarrays(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] array = test_cases[i][1] odd = 0 even = 1 # to account for the prefix sum of 0 which is even prefix_sum = 0 count = 0 for num in array: prefix_sum += num if prefix_sum % 2 == 0: count += odd even += 1 else: count += even odd += 1 results.append(count) return results"},{"question":"In a city\'s energy management system, two types of power generators are used to meet the city\'s electricity demand: solar generators and wind generators. Each generator has different power outputs depending on the time of day and weather conditions. There are n time slots in a day (represented by 0 to n-1) where the electricity demand, d[i], varies for each time slot i. The power output for the solar generator in the i-th time slot is given by s[i], and the power output for the wind generator in the i-th time slot is given by w[i]. You may choose to use either the solar generator or the wind generator’s power output for each time slot, but not both. Determine the maximum power output you can achieve such that the total power output matches exactly the city\'s demand for each time slot. If it is not possible to meet the exact demand, return -1. Example 1: Input: n = 4 d = {8, 7, 4, 5} s = {5, 3, 5, 6} w = {4, 5, 3, 2} Output: 24 Explanation: For time slot 0, use solar generator: 5, total power output = 5 For time slot 1, use wind generator: 5, total power output = 10 For time slot 2, use solar generator: 5, total power output = 15 For time slot 3, use solar generator: 6, total power output = 21 Example 2: Input: n = 3 d = {7, 6, 9} s = {3, 3, 3} w = {4, 4, 4} Output: -1 Explanation: It is not possible to match the exact demand for all time slots. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxPowerOutput() which takes array d[ ], array s[ ], array w[ ], and n as input parameters and returns an integer denoting the maximum power output possible or -1 if it is not possible to meet the exact demand for each time slot. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^{5} 1 ≤ d[i], s[i], w[i] ≤ 10^{5}","solution":"def maxPowerOutput(n, d, s, w): total_power_output = 0 for i in range(n): if d[i] == s[i]: total_power_output += s[i] elif d[i] == w[i]: total_power_output += w[i] else: return -1 return total_power_output"},{"question":"Given an undirected graph G with n vertices and m edges. Each vertex in the graph has a color, which is represented by an integer. You are to determine if there exists two vertices, u and v, such that the shortest path from u to v involves vertices with at least two distinct colors (including u and v). For simplicity, assume that the graph has no self-loops or multiple edges between the same pair of vertices. The graph is provided as an adjacency list where each vertex is labeled from 1 to n. Each vertex is connected to other vertices by edges with equal weight. ---Input--- The first line of input contains two integers, n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 2 * 10^5) - the number of vertices and the number of edges. The second line contains a list of n integers, each representing the color of the vertex (1 ≤ color ≤ 10^9). Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), representing an undirected edge between vertices u and v. ---Output--- Print \\"YES\\" if there exists a pair of vertices u and v such that the shortest path between them involves vertices with at least two distinct colors. Otherwise, print \\"NO\\". ---Examples--- Input 5 4 1 2 1 2 3 1 2 2 3 3 4 4 5 Output YES Input 4 3 1 1 1 2 1 2 2 3 3 4 Output YES Input 4 4 1 1 1 1 1 2 2 3 3 4 4 1 Output NO","solution":"from collections import deque def has_diverse_shortest_path(n, m, colors, edges): if len(set(colors)) == 1: return \\"NO\\" graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for start in range(1, n + 1): queue = deque([(start, 0)]) visited = [False] * (n + 1) visited[start] = True start_color = colors[start - 1] while queue: node, dist = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True if colors[neighbor - 1] != start_color: return \\"YES\\" queue.append((neighbor, dist + 1)) return \\"NO\\""},{"question":"> Given an integer array nums, return a new array counts where counts[i] is the number of smaller elements to the right of nums[i]. # Example: ```plaintext Input: nums = [5,2,6,1] Output: counts = [2,1,1,0] ``` # Explanation: To the right of 5 there are 2 smaller elements (2 and 1). To the right of 2 there is 1 smaller element (1). To the right of 6 there is 1 smaller element (1). To the right of 1 there are no smaller elements. # Constraints: ```plaintext * 1 <= nums.length <= 10^5 * -10^4 <= nums[i] <= 10^4 ``` # Notes: - It is recommended to derive an optimized solution. Using a simple O(n^2) approach might not be efficient enough due to the upper constraint limits. - Consider using data structures that can help in efficient counting and insertion operations.","solution":"from bisect import bisect_left def count_smaller(nums): For each element in nums, count the number of smaller elements to its right. Parameters: nums (list): List of integers. Returns: list: A new list where the i-th element is the count of smaller elements to the right of nums[i]. result = [] sorted_list = [] for num in reversed(nums): position = bisect_left(sorted_list, num) result.append(position) sorted_list.insert(position, num) return result[::-1]"},{"question":"Emma loves palindromes. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization). Given a string, Emma wants to know the longest palindrome that can be formed by rearranging the characters of that string. If there are multiple palindromes of the same length, any one of them will suffice. Input The input consists of a single string s (1 ≤ |s| ≤ 1000), consisting only of lowercase letters. Output Output a string that is the longest palindrome that can be formed by rearranging the characters of the input string. If no palindrome can be formed, output an empty string. Examples Input abba Output abba Input abc Output a Input abbccc Output bcccb","solution":"from collections import Counter def longest_palindrome(s): Returns the longest palindrome that can be formed by rearranging the characters of the input string. If no palindrome can be formed, returns an empty string. count = Counter(s) odd_char = \\"\\" half_palindrome = [] for char, freq in count.items(): if freq % 2 == 1: if not odd_char or freq > count[odd_char]: odd_char = char half_palindrome.append(char * (freq // 2)) half_palindrome = \'\'.join(sorted(half_palindrome)) return half_palindrome + odd_char + half_palindrome[::-1]"},{"question":"Penny loves collecting marbles. Each day she collects marbles and places them in two jars, labeled A and B. She follows a specific routine: on the i-th day, she adds exactly i marbles to jar A and i^2 marbles to jar B. Penny wants to know the total number of marbles in each jar after n days. Write a function that calculates the number of marbles in each jar after n days. Function signature: ```python def marble_collection(n: int) -> (int, int): pass ``` INPUT - Single integer n representing the number of days. 0 ≤ n ≤ 10^4 OUTPUT - Two integers, the total number of marbles in jar A and in jar B after n days, respectively. SAMPLE INPUT 3 SAMPLE OUTPUT 6 14 EXPLANATION After 3 days, - Jar A will have 1 + 2 + 3 = 6 marbles. - Jar B will have 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 marbles.","solution":"def marble_collection(n: int) -> (int, int): Calculate the total number of marbles in each jar after n days. Jar A: On i-th day, i marbles are added. Jar B: On i-th day, i^2 marbles are added. Parameters: n (int): The number of days. Returns: (int, int): Total marbles in jar A and B after n days. total_A = sum(i for i in range(1, n+1)) total_B = sum(i**2 for i in range(1, n+1)) return total_A, total_B"},{"question":"Write a function that takes a list of integers and a target integer. The function should return a Boolean indicating whether any two numbers in the list add up to the target integer. If the list is empty or contains less than two elements, the function should return False.","solution":"def has_pair_with_sum(arr, target): Checks if there are two numbers in `arr` that add up to `target`. Args: arr (list of int): The list of integers. target (int): The target sum. Returns: bool: True if there are two numbers in the list that add up to target, False otherwise. if len(arr) < 2: return False seen_numbers = set() for num in arr: complementary = target - num if complementary in seen_numbers: return True seen_numbers.add(num) return False"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is repeated as many times as its value. If an integer appears more than once in the input list, only process its first occurrence. Examples: ```python # 1 is repeated 1 time # 3 is repeated 3 times # 2 is repeated 2 times # 4 is repeated 4 times repeat_values([1, 3, 2, 4, 2, 3]) # => [1, 3, 3, 3, 2, 2, 4, 4, 4, 4] ``` More examples can be found in the test cases. Good luck!","solution":"def repeat_values(lst): Returns a new list where each integer is repeated as many times as its value. Only processes the first occurrence of each integer. seen = set() result = [] for num in lst: if num not in seen: result.extend([num] * num) seen.add(num) return result"},{"question":"In a distant future, the Galactic Empire has assigned you to manage one of the numerous space stations located on different planets. Each station is connected by a series of intergalactic tunnels which allow for travel between them. Your task as the manager is to ensure that every station is accessible from every other station via some series of tunnels. The empire’s engineers have already designed a potentially expensive plan of tunnels that may connect all the stations but they aren’t sure if it will be sufficient for accessibility. They need your help to validate if their plan works. If any station is not accessible from another, they will need to revise their plan. You will be given the number of space stations and a list of intergalactic tunnels between pairs of stations. Using this information, determine whether all stations are connected through the given tunnels or not. Input: The first line contains an integer, T, the number of test cases. For each test case: - The first line contains two integers, N and M, where N is the number of space stations and M is the number of tunnels. - The next M lines each contain two integers, u and v, representing a direct tunnel between stations u and v. Output: For each test case, print \\"CONNECTED\\" if all stations are accessible from each other, otherwise print \\"DISCONNECTED\\". Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 0 ≤ M ≤ 1000 SAMPLE INPUT 2 4 3 0 1 1 2 2 3 5 3 0 1 1 2 3 4 SAMPLE OUTPUT CONNECTED DISCONNECTED","solution":"def are_stations_connected(T, test_cases): def dfs(node, visited, adj_list): stack = [node] while stack: current = stack.pop() if not visited[current]: visited[current] = True for neighbor in adj_list[current]: if not visited[neighbor]: stack.append(neighbor) results = [] for case in test_cases: N, M, edges = case adj_list = [[] for _ in range(N)] for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * N dfs(0, visited, adj_list) if all(visited): results.append(\\"CONNECTED\\") else: results.append(\\"DISCONNECTED\\") return results"},{"question":"Background: You have been tasked with managing the inventory of a toy store. The inventory system tracks each toy by a unique code that has been generated sequentially starting from 1. Due to a recent system malfunction, some of the toy codes have been corrupted, leaving gaps in the sequential list of codes. Your job is to identify and return the first missing code in the sequence. Task: Write a function that takes a list of unique integers representing toy codes and returns the smallest missing code greater than 0. The list may be unsorted. **Note**: large lists will be tested. Examples: ``` [3, 4, 7, 1] => 2 [1, 2, 3, 5] => 4 [5, 6, 7, 8] => 1 ```","solution":"def find_missing_code(codes): Returns the smallest missing code greater than 0 from the list of codes. sorted_codes = sorted(set(codes)) expected_code = 1 for code in sorted_codes: if code == expected_code: expected_code += 1 elif code > expected_code: break return expected_code"},{"question":"You are building a new social networking platform. To ensure that users have diverse and engaging experiences, the platform recommends new friends to them based on mutual interests and existing connections. However, the number of recommendations that can be made at once is limited due to capacity constraints. To manage this, you need to determine the number of unique user pairs that can be formed without exceeding the maximum allowed recommendations. One unique user pair is defined as (A, B), where A and B are distinct users in the network, and the order does not matter (i.e., (A, B) is considered the same as (B, A)). Given the number of users in the network and the maximum number of allowable recommendations, calculate the total number of unique pairs of users and determine if it is within the allowed limit of recommendations. Input Format - The first line is an integer T that denotes the number of test cases. - The next T lines contain two integers each, N and M. - N is the number of users in the network. - M is the maximum allowed number of recommendations. Output Format - For each test case, output a single line: - If the number of unique pairs is within the allowed limit, print the number of unique pairs. - If the number of unique pairs exceeds the allowed limit, print \\"Exceeds Limit\\". Constraints 1<=T<=1000 1<=N<=10^7 1<=M<=10^14 Sample Input 2 5 10 10 30 Sample Output 10 45 Explanation: For the first test case, - Number of users (N) = 5 - Maximum allowed recommendations (M) = 10 - Total number of unique pairs possible = (5 * (5 - 1)) / 2 = 10 Since 10 is within the allowed limit, the output is 10. For the second test case, - Number of users (N) = 10 - Maximum allowed recommendations (M) = 30 - Total number of unique pairs possible = (10 * (10 - 1)) / 2 = 45 Since 45 exceeds the allowed limit, the output is \\"Exceeds Limit\\".","solution":"def unique_user_pairs_within_limit(T, test_cases): results = [] for case in test_cases: N, M = case # Calculate the number of unique pairs unique_pairs = (N * (N - 1)) // 2 if unique_pairs <= M: results.append(unique_pairs) else: results.append(\\"Exceeds Limit\\") return results"},{"question":"You are given an array of integers. Your task is to write a function that returns the length of the longest subsequence such that all elements of the subsequence are sorted in strictly increasing order. **Input**: An array of integers. **Output**: An integer representing the length of the longest increasing subsequence. **Example**: ```python Input: [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 18], which has a length of 4. ``` Please write a function, `longest_increasing_subsequence(arr: List[int]) -> int`, that takes an array of integers and returns the length of the longest increasing subsequence.","solution":"from typing import List def longest_increasing_subsequence(arr: List[int]) -> int: Returns the length of the longest strictly increasing subsequence in the given array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given an integer n, create a list of integers from 1 to n and output the sum of squares of all even numbers in the list. -----Constraints----- - n is an integer such that 1 leq n leq 10^4. -----Input----- Input is given from Standard Input in the following format: n -----Output----- Print a single integer representing the sum of the squares of all even numbers from 1 to n. -----Sample Input----- 5 -----Sample Output----- 20 Explanation: The even numbers from 1 to 5 are 2 and 4. Their squares are 4 and 16, respectively. So, the sum of these squares is 4 + 16 = 20.","solution":"def sum_of_squares_of_even_numbers(n): Given an integer n, return the sum of squares of all even numbers from 1 to n. sum_squares = sum(i**2 for i in range(2, n + 1, 2)) return sum_squares # Example usage: # n = int(input().strip()) # print(sum_of_squares_of_even_numbers(n))"},{"question":"You are given a rectangular matrix with dimensions n x m. Each cell of the matrix contains an integer, which could be either positive, negative, or zero. Your task is to find the maximum sum of any submatrix within the given matrix. A submatrix is defined as any contiguous rectangular part of the given matrix. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the matrix, respectively. Each of the next n lines contains m integers — the elements of the matrix. The elements of the matrix are guaranteed to be integers and will fit in the range of a 32-bit signed integer. Output Print a single integer — the maximum sum of any submatrix within the given matrix. Examples Input 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 Output 29 Note In the given example, the submatrix with the maximum sum is: 3 8 10 -4 -1 1 which sums up to 3 + 8 + 10 - 4 - 1 + 1 + 3 + 7 = 29. The challenge is to consider all possible submatrices and find the one with the highest sum, which may require employing advanced algorithmic strategies such as dynamic programming or the Kadane\'s algorithm extended to two dimensions.","solution":"def max_submatrix_sum(matrix): Returns the maximum sum of any submatrix within the given matrix. Uses an extension of Kadane\'s algorithm to 2D arrays. n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') # For each pair of rows, apply Kadane\'s algorithm on the columns for start_row in range(n): # This will accumulate column sums between the start_row and end_row col_sums = [0] * m for end_row in range(start_row, n): # Calculate the sum of elements in each column between start_row and end_row for col in range(m): col_sums[col] += matrix[end_row][col] # Now find the maximum sum subarray in col_sums using Kadane\'s algorithm current_max = float(\'-inf\') current_sum = 0 for x in col_sums: current_sum += x if current_sum > current_max: current_max = current_sum if current_sum < 0: current_sum = 0 # Update the maximum submatrix sum found so far if current_max > max_sum: max_sum = current_max return max_sum"},{"question":"A sequence of positive integers is called \\"almost increasing\\" if it can be converted into a strictly increasing sequence by removing at most one integer. Your task is to determine whether a given sequence is \\"almost increasing\\". -----Input----- The first line contains an integer n (1 le n le 1000), the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9), the elements of the sequence. -----Output----- For each test case, print \\"YES\\" if the sequence is \\"almost increasing\\", otherwise print \\"NO\\". -----Examples----- Input 5 1 3 2 1 4 Output NO Input 4 1 2 10 5 Output YES Input 6 1 2 3 4 5 6 Output YES -----Note----- In the first example, no matter which one integer you remove, you cannot get a strictly increasing sequence. In the second example, if you remove the integer 10, the resulting sequence [1, 2, 5] is strictly increasing. In the third example, the sequence is already strictly increasing, so it is \\"almost increasing\\".","solution":"def almost_increasing(sequence): Checks if a sequence is almost increasing. Args: sequence (list of int): The list of integers representing the sequence. Returns: bool: True if the sequence is almost increasing, False otherwise. def is_strictly_increasing(seq): return all(x < y for x, y in zip(seq, seq[1:])) # Check if the original sequence is already strictly increasing if is_strictly_increasing(sequence): return \\"YES\\" # Check by removing each element once for i in range(len(sequence)): if is_strictly_increasing(sequence[:i] + sequence[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"You are given a circular race track with n checkpoints. There are m runners in the race, and each runner i starts at a specific checkpoint a_i and has a maximum energy e_i which allows them to move from their starting checkpoint to any other checkpoint within their energy limit. Each unit of energy allows a runner to move from their current checkpoint to an adjacent checkpoint (either forward or backward along the circular track). Your task is to determine for each runner whether it is possible for them to reach all checkpoints on the track given their maximum energy. Input The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two parts: - The first line contains two integers n (3 ≤ n ≤ 10^5) — the number of checkpoints in the circular track, and m (1 ≤ m ≤ 10^5) — the number of runners. - The next m lines each contain two integers a_i (1 ≤ a_i ≤ n) — the starting checkpoint of the i-th runner, and e_i (0 ≤ e_i ≤ 10^5) — the maximum energy of the i-th runner. The sum of n over all test cases does not exceed 10^6. The sum of m over all test cases does not exceed 10^6. Output For each test case, print m lines. For each runner, print \\"YES\\" if the runner can reach all the checkpoints; otherwise, print \\"NO\\". Example Input 2 5 3 1 4 3 2 5 1 4 2 2 0 1 1 2 1 Output YES NO YES YES NO","solution":"def can_runner_reach_all_checkpoints(n, m, runners): results = [] for a, e in runners: if e >= n: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def solve_race_cases(test_cases): results = [] for tc in test_cases: n, m, runners = tc results.append(can_runner_reach_all_checkpoints(n, m, runners)) return results"},{"question":"Given a list of integers, you need to perform a series of operations to modify the list and answer some queries about it. The list of integers is numbered from 1 to n. There are three types of operations: 1. Add x to all integers from index l to index r (inclusive). 2. Multiply all integers from index l to index r (inclusive) by x. 3. Query the integer at index i. Write a program to handle these operations efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of integers in the list and the number of operations, respectively. The second line contains n integers a1, a2, ..., an — the initial list of integers (1 ≤ ai ≤ 10^9). Each of the next q lines contains an operation of one of the following three types: - \\"1 l r x\\", which means add x to all integers from index l to index r (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9). - \\"2 l r x\\", which means multiply all integers from index l to index r by x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9). - \\"3 i\\", which means output the integer at index i (1 ≤ i ≤ n). Output For each query of type \\"3 i\\", print the current value of the integer at index i. Examples Input 5 6 10 20 30 40 50 1 1 3 5 2 2 4 2 3 3 3 5 1 4 5 10 3 4 Output 70 50 90 Input 4 5 1 2 3 4 1 2 3 100 2 1 4 10 3 1 3 2 3 4 Output 10 1020 40","solution":"def process_operations(n, q, array, operations): Processes a list of operations on an array and returns results of queries. :param n: Number of integers in the list. :param q: Number of operations to perform. :param array: Initial list of integers. :param operations: List of operations to perform. :return: List of results from query operations. results = [] for op in operations: # Parse the operation op = op.split() op_type = int(op[0]) if op_type == 1: # Add x to all integers from index l to index r (inclusive) l = int(op[1]) - 1 r = int(op[2]) - 1 x = int(op[3]) for i in range(l, r+1): array[i] += x elif op_type == 2: # Multiply all integers from index l to index r (inclusive) by x l = int(op[1]) - 1 r = int(op[2]) - 1 x = int(op[3]) for i in range(l, r+1): array[i] *= x elif op_type == 3: # Output the integer at index i i = int(op[1]) - 1 results.append(array[i]) return results"},{"question":"A large e-commerce company wants to analyze its sales data to identify patterns and trends. One of their key analyses involves finding the number of distinct products bought during a specific period. Given a list of sales transactions, each containing a product ID and a timestamp, you need to determine the number of unique product IDs in a given time range. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of each test case follows. Each test case starts with an integer N, indicating the number of sales transactions. The next N lines each contain a string P (the product ID) and an integer Ti (the timestamp of the transaction), separated by a space. The next line contains two integers, Start and End, which indicate the time range (inclusive). ------ Output ------ For each test case, output a single line containing the number of distinct product IDs that have transactions within the given time range. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ |P| ≤ 20 0 ≤ Ti ≤ 10^9 0 ≤ Start ≤ End ≤ 10^9 ----- Sample Input 1 ------ 2 5 productA 1 productB 2 productC 3 productA 5 productB 8 1 5 4 item1 10 item2 20 item3 30 item1 40 15 35 ----- Sample Output 1 ------ 3 2 ----- Explanation 1 ------ Example case 1: The transactions within the time range 1 to 5 include productA, productB, and productC. There are 3 distinct product IDs. Example case 2: The transactions within the time range 15 to 35 include item2 and item3. There are 2 distinct product IDs.","solution":"def distinct_products_within_range(num_cases, cases): results = [] for i in range(num_cases): n = cases[i][\'n\'] transactions = cases[i][\'transactions\'] start_time = cases[i][\'time_range\'][0] end_time = cases[i][\'time_range\'][1] unique_products = set() for product_id, timestamp in transactions: if start_time <= timestamp <= end_time: unique_products.add(product_id) results.append(len(unique_products)) return results # Sample input parser for the function def parse_input(input_str): lines = input_str.strip().split(\'n\') idx = 0 T = int(lines[idx]) idx += 1 cases = [] for _ in range(T): N = int(lines[idx]) idx += 1 transactions = [] for _ in range(N): parts = lines[idx].split() product_id = parts[0] timestamp = int(parts[1]) transactions.append((product_id, timestamp)) idx += 1 time_range = tuple(map(int, lines[idx].split())) idx += 1 cases.append({ \'n\': N, \'transactions\': transactions, \'time_range\': time_range }) return T, cases # Example usage: T, cases = parse_input(2 5 productA 1 productB 2 productC 3 productA 5 productB 8 1 5 4 item1 10 item2 20 item3 30 item1 40 15 35) results = distinct_products_within_range(T, cases) for result in results: print(result)"},{"question":"Given a sequence of integers representing daily stock prices, your task is to determine the maximum profit you can achieve by making a single buy and a single sell transaction. You must buy before you sell. Example prices = [7, 1, 5, 3, 6, 4] A maximum profit can be achieved by buying on day 1 (price = 1) and selling on day 4 (price = 6). The resulting profit would be 6 - 1 = 5. Function Description Complete the function maxProfit in the editor below. It should return an integer representing the maximum profit achievable from a single buy-sell transaction. maxProfit has the following parameter(s): - prices: an array of integers representing daily stock prices. Returns - int: the maximum profit achievable. Input Format The first line contains n, the number of days. The second line contains n space-separated integers representing daily stock prices. Constraints 1 ≤ n ≤ 10^5 0 ≤ prices[i] ≤ 10^6 Sample Input STDIN Function ----- -------- 6 prices[] size n = 6 7 1 5 3 6 4 prices = [7, 1, 5, 3, 6, 4] Sample Output 5 Explanation In the sample input, a single buy-sell transaction can result in a profit of 5, achieved by buying on day 1 (price = 1) and selling on day 4 (price = 6).","solution":"def maxProfit(prices): Returns the maximum profit that can be achieved by making a single buy and sell transaction. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: profit = price - min_price if profit > max_profit: max_profit = profit if price < min_price: min_price = price return max_profit"},{"question":"Given a permutation of the integers from 1 to N, we define a swap operation as choosing any two elements of the permutation and swapping their positions. Your task is to determine the minimum number of swap operations required to sort the permutation in ascending order. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers, a permutation of the integers from 1 to N. -----Output----- For each test case, output a single integer — the minimum number of swap operations required to sort the permutation in ascending order. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - The sum of N over all test cases does not exceed 10^6 -----Example Input----- 3 5 4 3 2 5 1 4 1 3 2 4 6 6 5 4 3 2 1 -----Example Output----- 3 1 3","solution":"def min_swaps_to_sort_permutation(T, test_cases): def min_swaps(arr): n = len(arr) arr_pos = [(val, idx) for idx, val in enumerate(arr)] arr_pos.sort() visited = [False] * n swaps = 0 for i in range(n): if visited[i] or arr_pos[i][1] == i: continue cycle_length = 0 x = i while not visited[x]: visited[x] = True x = arr_pos[x][1] cycle_length += 1 if cycle_length > 0: swaps += (cycle_length - 1) return swaps results = [] for case in test_cases: N, perm = case results.append(min_swaps(perm)) return results"},{"question":"Alex wants to organize his bookshelf. He has `N` books, and each book has a certain thickness given in an array `T` of size `N`. Alex wants to stack all his books such that the total width of the stack doesn\'t exceed a specified limit `W`. Each book must be placed either horizontally (occupying its thickness) or vertically (occupying its width, which is `1` unit for each book). Help Alex determine the maximum number of books he can stack without exceeding the width limit `W`. # Input: - The first line contains an integer `T` denoting the number of test cases. - Each test case consists of two lines: - The first line contains two integers `N` and `W`. - The second line contains `N` integers representing the array `T` of book thicknesses. # Output: - For each test case, output a single integer representing the maximum number of books Alex can stack. # Constraints: - (1 leq T leq 100) - (1 leq N leq 1000) - (1 leq W leq 10^6) - (1 leq T[i] leq 10^4) for (1 leq i leq N) # Sample Input: ``` 2 5 10 2 3 4 5 6 3 3 2 2 2 ``` # Sample Output: ``` 4 2 ``` # Explanation: - In the first test case, Alex can stack four books with thicknesses 2, 3, 4, and 1 (one book vertically). The total width is (2 + 3 + 4 + 1 = 10), which is within the limit of 10. - In the second test case, Alex can stack two books either vertically or horizontally without exceeding the width limit of 3.","solution":"def max_books(N, W, T): Determine the maximum number of books that can be stacked without exceeding the width limit W. Parameters: N (int): The number of books. W (int): The width limit of the stack. T (list): List of integers representing the thickness of each book. Returns: int: Maximum number of books that can be stacked. # Sorting the array for optimal stacking T.sort() current_width = 0 count = 0 for thickness in T: if current_width + thickness <= W: # Stack horizontally current_width += thickness count += 1 else: if current_width + 1 <= W: # Stack vertically current_width += 1 count += 1 else: break return count def solve(test_cases): results = [] for case in test_cases: N, W, T = case results.append(max_books(N, W, T)) return results"},{"question":"You are managing a relay race track, where N runners are numbered 1 through N and arranged in a circle. The runners are initially positioned at coordinates on the track denoted by an array a, where a[i] is the starting position of the i-th runner, and all ai are distinct integers such that 1 ≤ a[i] ≤ K. The track can be thought of as a circle with positions 1 through K. In each round of the race, exactly one runner can either move one position forward or one position backward. If any runner\'s position goes below 1 or exceeds K, they reappear on the opposite side of the circle (i.e., if a runner at position 1 moves backward, they move to position K). The race proceeds until the runners return to their original positions. Determine the smallest number of rounds required for all runners to return to their initial positions. Constraints * 2 ≤ N ≤ 10^5 * 1 ≤ K ≤ 10^9 Input The input is given from Standard Input in the following format: N K a_1 a_2 ... a_N Output Print the smallest number of rounds required for all runners to return to their initial positions. Examples Input 3 5 1 3 5 Output 5 Input 4 6 2 4 6 1 Output 6 Input 5 7 1 2 3 4 5 Output 7 Input 4 12 3 6 9 12 Output 12","solution":"import math from functools import reduce def gcd(a, b): while b: a, b = b, a % b return a def lcm(x, y): return x * y // gcd(x, y) def min_rounds_return_to_initial(N, K, positions): def steps_to_return(pos, K): # Since it\'s a circle, if pos is at a[i] it should return after K steps. return K return reduce(lcm, [steps_to_return(pos, K) for pos in positions]) # Reading input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) positions = list(map(int, data[2:2+N])) print(min_rounds_return_to_initial(N, K, positions)) if __name__ == \\"__main__\\": main()"},{"question":"Given an integer array `arr` of size `n`, you need to perform a series of operations to make all elements of the array equal. In each operation, you can choose any subsequence of the array and increase each of its elements by 1. Your task is to find the minimum number of operations required to make all the elements of the array equal. A subsequence is derived from the array by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains an integer `n` (`1 <= n <= 10^5`), representing the number of elements in the array. The second line contains `n` space-separated integers `arr[i]` (`1 <= arr[i] <= 10^6`), representing the elements of the array. -----Output----- Print the minimum number of operations required to make all the elements of the array equal. -----Examples----- Input 4 3 7 2 5 Output 4 Input 3 4 4 4 Output 0 Input 5 1 2 3 4 5 Output 4 -----Note----- In the first example, you can perform the operations as follows: 1. Increase the elements `[3, 2]` by 1 to get `[4, 7, 3, 5]`. 2. Increase the elements `[4, 3]` by 1 to get `[5, 7, 4, 5]`. 3. Increase the elements `[5, 4]` by 1 to get `[6, 7, 5, 5]`. 4. Increase the elements `[6, 5, 5]` by 1 to get `[7, 7, 7, 7]`. In the second example, all elements are already equal, so no operations are needed.","solution":"def min_operations_to_equalize(arr): Returns the minimum number of operations required to make all elements of the array equal. max_val = max(arr) min_val = min(arr) if max_val == min_val: return 0 return max_val - min_val"},{"question":"A wealthy eccentric has decided to build an elaborate network of bridges in his grand estate. He has n wooden planks available and wants to use them to construct k identical bridges. Each bridge is made up of exactly m planks. The eccentric wants to use all n planks and ensure the bridges are identical. Your task is to determine the possible values of k and m such that all the conditions are met, or state that it is not possible. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. Each of the next t lines contains a single integer n (1 leq n leq 10^{18}) — the total number of available planks. -----Output----- For each test case, print all possible pairs of integers (k, m) such that k times m = n. Print the pairs starting with low values of k. If no such pair exists, print \\"-1\\". -----Examples----- Input 3 12 15 1 Output 1 12 2 6 3 4 4 3 6 2 12 1 1 15 3 5 5 3 15 1 1 1","solution":"def find_possible_k_m_pairs(n): Given an integer n, this function returns all pairs (k, m) such that k * m = n. If no such pairs exist, it returns an empty list. pairs = [] for k in range(1, int(n**0.5) + 1): if n % k == 0: pairs.append((k, n // k)) if k != n // k: pairs.append((n // k, k)) pairs.sort() return pairs def solve(t, numbers): results = [] for n in numbers: pairs = find_possible_k_m_pairs(n) if pairs: results.append(pairs) else: results.append([-1]) return results"},{"question":"Generate a sequence where each term is the sum of the digits of the previous term, starting with an initial number provided by the user. For example: ``` initial_number = 12345 Sequence: first term: 12345 sum of digits of 12345 = 15 second term: 15 sum of digits of 15 = 6 third term: 6 So the sequence would be: [12345, 15, 6] ``` You will be given the initial number and the length of the sequence. Your task is to return the sequence as a list. Examples: ```python generate_sequence(12345, 3) = [12345, 15, 6] generate_sequence(987, 4) = [987, 24, 6, 6] ``` More examples in test cases. Good luck!","solution":"def generate_sequence(initial_number, length): Generates a sequence where each term is the sum of the digits of the previous term. Parameters: - initial_number (int): The starting number of the sequence. - length (int): The length of the sequence. Returns: - list: A list containing the generated sequence. sequence = [initial_number] current_number = initial_number for _ in range(1, length): current_number = sum(int(digit) for digit in str(current_number)) sequence.append(current_number) return sequence"},{"question":"Imagine a situation in which you have a sequence of brackets that can be square `[]`, round `()`, curly `{}`, or angle `<>`. Your task is to determine if the sequence of brackets is balanced. A sequence of brackets is considered balanced if the following conditions are met: 1. It is an empty string, or 2. If `S` is a balanced string, then `{S}`, `[S]`, `(S)`, and `<S>` are also balanced strings, or 3. If `S` and `T` are balanced strings, then the concatenation `S+T` is a balanced string. Write a function that takes a string of brackets and returns `true` if the string is balanced and `false` otherwise. **Input** - A single string `s` (0 ≤ |s| ≤ 100), representing the sequence of brackets. **Output** - Return `true` if the sequence is balanced, otherwise return `false`. **Examples** **Input** ``` \\"([{}])\\" ``` **Output** ``` true ``` **Input** ``` \\"([)]\\" ``` **Output** ``` false ``` **Input** ``` \\"({[<>]})\\" ``` **Output** ``` true ``` **Input** ``` \\"\\" ``` **Output** ``` true ``` **Explanation** In the first example, the sequence \\"([{}])\\" is balanced because each opening bracket has a corresponding closing bracket in the correct order. In the second example, the sequence \\"([)]\\" is not balanced because the closing parenthesis `)` does not match the most recent unmatched opening square bracket `[`. In the third example, the sequence \\"({[<>]})\\" is balanced as every opening bracket correctly matches a closing bracket in proper nesting order. In the fourth example, the input is an empty string, which is trivially balanced.","solution":"def is_balanced(s): Determines if a string of brackets is balanced. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\', \'>\': \'<\'} for char in s: if char in \'([{<\': stack.append(char) elif char in \')]}>\': if not stack or stack.pop() != matching_bracket[char]: return False return not stack"},{"question":"Task Given a list of non-negative integers representing the amount of rainwater that falls on each building in a row, and assuming that the width of each building is 1 unit, determine how much water is trapped between the buildings after it rains. A building is defined by the height of its wall and the water will be trapped between the lower points of two taller buildings. Example For `heights = [0,1,0,2,1,0,1,3,2,1,2,1]`, the result should be `6`. For `heights = [4,2,0,3,2,5]`, the result should be `9`. For `heights = [2,0,2]`, the result should be `2`. Input/Output - `[input]` integer array `heights` An array of non-negative integers representing the height of buildings. - `[output]` integer The total amount of water trapped between the buildings.","solution":"def trap_rain_water(heights): Calculate the amount of trapped rainwater between the buildings. Args: heights (list of int): Heights of the buildings. Returns: int: The total amount of trapped water. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You are given a list of integers representing the temperatures recorded over a period of days. You need to find the length of the longest subarray (consecutive days) where the temperature does not decrease. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - -10^9 leq T_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N T_1 T_2 ... T_N -----Output----- Print the length of the longest subarray where the temperature does not decrease. -----Sample Input----- 7 1 2 2 3 1 2 2 -----Sample Output----- 4 The longest subarray where temperatures do not decrease is [1, 2, 2, 3].","solution":"def longest_non_decreasing_subarray(temperatures): Returns the length of the longest subarray where the temperature does not decrease. if not temperatures: return 0 max_length = 1 current_length = 1 for i in range(1, len(temperatures)): if temperatures[i] >= temperatures[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length) # Function to handle the input and output format def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) temperatures = list(map(int, data[1:])) print(longest_non_decreasing_subarray(temperatures))"},{"question":"Anna has a collection of different types of coins, and she\'s planning to give some of them to her friends. Anna wants to group the coins in such a way that each group contains the same type of coins, but no two groups have the same number of coins. Given the number of each type of coin Anna has, you need to determine the maximum number of groups she can create following this rule. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - First line contains M, representing the number of different types of coins. - The second line contains an array b[i] of size M containing the count of each type of coin Anna has. -----Output:----- For each test case, you have to output a single line containing the maximum number of groups Anna can create. -----Constraints----- - 1 leq T leq 1000 - 1 leq M leq 1000 - 1 leq b[i] leq 10^9 -----Sample Input:----- 2 5 10 20 30 40 50 3 3 3 3 -----Sample Output:----- 5 3","solution":"def max_groups(T, test_cases): Determines the maximum number of groups Anna can create following given rules. Args: T : int : number of test cases test_cases : List[Tuple[int, List[int]]] : list of test cases, each having a tuple with two elements: - an integer M representing the number of different types of coins - a list of integers representing the number of each type of coin Returns: List[int] : list of integers representing the maximum number of groups for each test case import heapq results = [] for M, counts in test_cases: counts.sort() used = set() max_groups = 0 for count in counts: if count not in used: used.add(count) max_groups += 1 else: new_count = count while new_count in used: new_count += 1 used.add(new_count) max_groups += 1 results.append(max_groups) return results"},{"question":"Write a program that reads a string and checks if it is a palindrome and prints \\"Yes\\" if it is a palindrome and \\"No\\" otherwise. Input The input consists of multiple datasets. For each dataset, a string s is given in a line. The length of the string does not exceed 1000 characters. The string consists of lowercase alphabets only. The input ends with a line including the word \\"end\\". Your program should not process this terminal symbol. Output For each dataset, print \\"Yes\\" if the string is a palindrome and \\"No\\" otherwise. Example Input racecar hello level end Output Yes No Yes","solution":"def is_palindrome(s): Checks if the given string is a palindrome. return s == s[::-1] def process_input(input_list): Process a list of strings and check for each if it is a palindrome. results = [] for s in input_list: if s == \\"end\\": break if is_palindrome(s): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a string `S` consisting only of lowercase alphabets. Your task is to determine the minimum cost to make the string a valid palindrome. A string is said to be a valid palindrome if it reads the same backward as forward. You are allowed to perform two types of operations: 1. Insert any character at any position in the string with a cost of 1. 2. Remove any character from the string with a cost of 1. Write a function `minCostToPalindrome(S)` that returns the minimum cost required to convert the given string into a valid palindrome. Example: Input: S = \\"abca\\" Output: 1 Explanation: By inserting \'b\' at the end, we get the palindrome \\"abcba\\". The total cost of this operation is 1. Input: S = \\"race\\" Output: 3 Explanation: To make \\"race\\" a palindrome, we can: - Insert \'c\' at the beginning: \\"crace\\" - Insert \'a\' at the beginning: \\"acrcea\\" - Insert \'r\' at the beginning: \\"racar\\" The total cost of these operations is 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minCostToPalindrome(S)` which takes a string `S` as input and returns an integer denoting the minimum cost required to make the string a valid palindrome. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N^2) Constraints: 1 ≤ N ≤ 1000 S only contains lowercase alphabets.","solution":"def minCostToPalindrome(S): Returns the minimum cost to make the string S a palindrome. n = len(S) if n == 0: return 0 # Create a 2D DP array dp = [[0] * n for _ in range(n)] # Fill the DP array for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1]"},{"question":"You are given a string S and an integer k. Your task is to determine the largest possible lexicographical string that can be obtained by removing exactly k characters from the string. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of a single line containing a string S (1 le |S| le 1000) and an integer k (0 le k le |S|-1), where S contains only lowercase English letters. -----Output----- For each test case, print the largest possible lexicographical string that can be obtained by removing exactly k characters from the given string S. -----Example----- Input 3 abcdefg 2 bca 1 mnop 3 Output cdefg ca p -----Note----- In the first test case, by removing \'a\' and \'b\', we obtain the string \'cdefg\' which is the largest possible lexicographical string. In the second test case, by removing \'b\', we get \'ca\'. In the third test case, by removing \'m\', \'n\', and \'o\', we are left with \'p\'.","solution":"def largest_lexicographical_string(test_cases): results = [] for case in test_cases: S, k = case stack = [] to_remove = k for char in S: while stack and to_remove > 0 and stack[-1] < char: stack.pop() to_remove -= 1 stack.append(char) results.append(\'\'.join(stack[:-to_remove] if to_remove else stack)) return results"},{"question":"You have been hired to design the control system for an autonomous vacuum cleaner, RoboVac, that operates in a rectangular room. RoboVac moves in straight lines and changes direction only when it encounters an obstacle or the boundary of the room. The room may contain multiple stationary obstacles placed at fixed positions. RoboVac starts from the lower-left corner of the room and moves right initially. Whenever RoboVac encounters an obstacle or boundary, it turns 90 degrees counterclockwise. The vacuum cleaner will keep cleaning until it returns to its starting position. Your task is to determine the path taken by RoboVac and the coordinates of the positions it visits. If there are multiple ways the RoboVac can move when encountering multiple obstacles, it will always prefer to turn left. -----Input----- The first line of input consists of two integers w and h, where 1 le w, h le 1000 represent the width and height of the room respectively. The next line contains an integer n (0 le n le 50) representing the number of obstacles in the room. The next n lines each consist of two integers x_i and y_i (0 le x_i < w and 0 le y_i < h) representing the coordinates of the obstacles. The coordinates of the obstacles are distinct and the starting position (0, 0) will not be an obstacle. -----Output----- Output the coordinates of the positions visited by RoboVac in order from the starting position to the point where it returns to the starting position. Each position should be printed on a new line in the format \\"(x, y)\\". -----Examples----- Sample Input 1: 5 5 1 2 2 Sample Output 1: (0, 0) (5, 0) (5, 5) (2, 5) (2, 2) (0, 2) (0, 0) Sample Input 2: 3 3 2 1 1 2 1 Sample Output 2: (0, 0) (3, 0) (3, 2) (2, 2) (2, 3) (0, 3) (0, 0)","solution":"def robovac_path(w, h, n, obstacles): Given the dimensions of the room, the number of obstacles and their positions, this function returns the path taken by the RoboVac. Args: w (int): Width of the room. h (int): Height of the room. n (int): Number of obstacles. obstacles (list of tuples): List containing the coordinates of the obstacles. Returns: list of tuples: A list containing the coordinates of the positions visited by RoboVac. # Define the initial position and direction x, y = 0, 0 direction = \\"RIGHT\\" visited_positions = [(x, y)] # Set of visited positions and set of obstacle coordinates for quick lookup obstacle_set = set(obstacles) while True: if direction == \\"RIGHT\\": while x < w and (x + 1, y) not in obstacle_set: x += 1 visited_positions.append((x, y)) direction = \\"UP\\" elif direction == \\"UP\\": while y < h and (x, y + 1) not in obstacle_set: y += 1 visited_positions.append((x, y)) direction = \\"LEFT\\" elif direction == \\"LEFT\\": while x > 0 and (x - 1, y) not in obstacle_set: x -= 1 visited_positions.append((x, y)) direction = \\"DOWN\\" elif direction == \\"DOWN\\": while y > 0 and (x, y - 1) not in obstacle_set: y -= 1 visited_positions.append((x, y)) direction = \\"RIGHT\\" # If RoboVac returns to the starting position, break the loop if (x, y) == (0, 0): break return visited_positions # Support function to print the path in the required format def print_robovac_path(w, h, obstacles): steps = robovac_path(w, h, len(obstacles), obstacles) for step in steps: print(f\\"({step[0]}, {step[1]})\\")"},{"question":"You are given an array of n integers. Your task is to write a program that counts the number of subarrays that have a sum equal to a given number k. A subarray is a contiguous part of an array. For example, in the array [1, 2, 3], there are six subarrays: [1], [2], [3], [1, 2], [2, 3], and [1, 2, 3]. Input The input consists of two lines: - The first line contains two integers n (1 ≤ n ≤ 10^5) and k (|k| ≤ 10^9). - The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^4), representing the elements of the array. Output Output a single integer, the number of subarrays whose sum is equal to k. Examples Input 5 5 1 2 3 4 5 Output 2 Input 4 0 1 -1 1 -1 Output 4 Note In the first example, the subarrays that sum to 5 are: [2, 3] and [5]. In the second example, the subarrays that sum to 0 are: [1, -1], [-1, 1], [1, -1, 1, -1], and [-1, 1, -1].","solution":"def count_subarrays_with_sum(nums, k): Returns the number of subarrays with a sum equal to k. count = 0 current_sum = 0 sum_map = {0: 1} for num in nums: current_sum += num if current_sum - k in sum_map: count += sum_map[current_sum - k] if current_sum in sum_map: sum_map[current_sum] += 1 else: sum_map[current_sum] = 1 return count"},{"question":"Create a function that calculates and returns the **Permutations** of a given string, where permutations are all possible rearrangements of the characters in the string. The function should handle: 1. Duplicate characters: Multiple occurrences of the same character in the string should be correctly permuted. 2. Empty string: The permutation of an empty string is a list containing an empty string. 3. Single character string: The permutation of a single character string is a list containing the character itself. 4. The result should be a list of strings, each representing a unique permutation. 5. Preserve the order of the original string as much as possible in the output. # Examples: ```python >>> permutations(\\"\\") [\\"\\"] >>> permutations(\\"a\\") [\\"a\\"] >>> permutations(\\"ab\\") [\\"ab\\", \\"ba\\"] >>> permutations(\\"aab\\") [\\"aab\\", \\"aba\\", \\"baa\\"] >>> permutations(\\"abc\\") [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] >>> permutations(\\"aabc\\") [\\"aabc\\", \\"aacb\\", \\"abac\\", \\"abca\\", \\"acab\\", \\"acba\\", \\"baac\\", \\"baca\\", \\"bcaa\\", \\"caab\\", \\"caba\\", \\"cbaa\\"] ``` # Note: - Ensure that the result contains all the possible permutations without any duplicates. - The order of permutations does not have to follow any specific rule but must include all possible unique rearrangements.","solution":"from itertools import permutations as itertools_permutations def permutations(s): Generates all unique permutations of a given string. :param s: The input string :type s: str :return: A list of unique permutations :rtype: list # Use itertools to generate all permutations and convert them to set to remove duplicates. if s == \\"\\": return [\\"\\"] perm_set = set(itertools_permutations(s)) return [\'\'.join(p) for p in perm_set]"},{"question":"# Minimum Number of Platforms You are given the arrival and departure times of trains at a railway station. Your task is to determine the minimum number of platforms required at the station to accommodate all the trains so that no train has to wait for a platform to become free. Example: Consider the following arrival and departure times of trains: - Train 1: Arrival: 09:00, Departure: 09:10 - Train 2: Arrival: 09:20, Departure: 09:30 - Train 3: Arrival: 09:25, Departure: 09:35 - Train 4: Arrival: 09:40, Departure: 09:50 - Train 5: Arrival: 10:00, Departure: 10:10 The minimum number of platforms required is 2. Your job is to write a function that, given the lists of arrival and departure times in 24-hour format (`\\"HH:MM\\"`), returns the minimum number of platforms needed. ```python def find_min_platforms(arrivals, departures): # Your code here # Sample Test arrivals = [\\"09:00\\", \\"09:20\\", \\"09:25\\", \\"09:40\\", \\"10:00\\"] departures = [\\"09:10\\", \\"09:30\\", \\"09:35\\", \\"09:50\\", \\"10:10\\"] print(find_min_platforms(arrivals, departures)) # Output: 2 ```","solution":"def find_min_platforms(arrivals, departures): Returns the minimum number of platforms required for the given train schedules. # Convert arrival and departure times to minutes past midnight def to_minutes(time_str): hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes arrival_times = sorted([to_minutes(time) for time in arrivals]) departure_times = sorted([to_minutes(time) for time in departures]) platform_count = 0 max_platforms = 0 i = 0 j = 0 while i < len(arrival_times) and j < len(departure_times): if arrival_times[i] < departure_times[j]: platform_count += 1 max_platforms = max(max_platforms, platform_count) i += 1 else: platform_count -= 1 j += 1 return max_platforms"},{"question":"You are given an array of integers that may contain both positive and negative numbers. Your task is to rearrange the array so that all negative numbers appear before all non-negative numbers. The relative order among the negative numbers and non-negative numbers should be preserved. Input Format A single line of input contains the integers (a_i) separated by space. Constraints 1 leq n leq 1000 — where n is the number of integers in the array. −10^5 leq a_i leq 10^5 — each a_i can be any integer value. Output Format Output the rearranged array as a single line of space-separated integers. Sample Input 3 -4 2 -1 5 0 -6 Sample Output -4 -1 -6 3 2 5 0","solution":"def rearrange_array(arr): Rearranges the array such that all negative numbers come before all non-negative numbers. The relative order among negative and non-negative numbers is preserved. Args: arr (list): List of integers which contains both negative and non-negative numbers. Returns: list: Rearranged list. negatives = [] non_negatives = [] for num in arr: if num < 0: negatives.append(num) else: non_negatives.append(num) return negatives + non_negatives"},{"question":"In a laboratory, there are N chemical solutions. Each solution has a certain toxicity level represented as an integer. The toxicity levels are listed in an array T of length N. A scientist needs to perform experiments with pairs of solutions and take note of the absolute difference in their toxicity levels. The experiment is repeated for every unique pair of solutions. Your task is to help the scientist by finding the maximum possible minimum absolute difference in the toxicity levels for any unique pair of solutions. Constraints * 2 leq N leq 100 * 0 leq T[i] leq 1000 * All input values are integers. Input Input is given from Standard Input in the following format: N T_1 T_2 ... T_N Output Print the maximum possible value of the minimum absolute difference for any unique pair of solutions. Examples Input 4 1 9 5 11 Output 2 Input 3 4 4 4 Output 0","solution":"def max_min_abs_difference(n, toxicity_levels): # Sort the array to make finding differences easier toxicity_levels.sort() # Initialize min_diff with a large number min_diff = float(\'inf\') # Iterate through the sorted array and find the minimum difference for i in range(1, n): min_diff = min(min_diff, abs(toxicity_levels[i] - toxicity_levels[i - 1])) return min_diff"},{"question":"In a small village, there are n houses connected by m roads. Each road connects exactly two houses bidirectionally and has a certain length. The houses and roads form a connected graph. The village head has decided to celebrate the village\'s anniversary by decorating the houses and roads with lights. However, she wants to minimize the cost by ensuring that the total length of the roads to be decorated is minimized while ensuring that it\'s still possible to go from any house to any other house by traveling along decorated roads. Your task is to determine the minimum total length of the roads that need to be decorated. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The description of the test cases follows. Each test case begins with two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 4950) — the number of houses and roads in the village. The next m lines describe the roads. Each line contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — the two houses connected by the road and the length of the road. It is guaranteed that the graph is connected. Output For each test case, print a single integer — the minimum total length of the roads that need to be decorated. Example Input 3 4 5 1 2 3 2 3 4 3 4 5 4 1 2 1 3 7 5 7 1 2 1 2 3 2 3 4 3 4 5 4 1 5 5 1 3 6 2 4 7 3 3 1 2 10 2 3 15 1 3 5 Output 9 10 15 Explanation In the first test case, one possible way to achieve the minimum total length is to decorate the roads with lengths 3, 4, and 2. This connects all houses with a minimal total length of 9. Other combinations that achieve this minimal length are also possible. In the second test case, the minimum total length is achieved by decorating the roads with lengths 1, 2, 3, and 4, connecting all houses with a total length of 10. In the third test case, all three roads must be decorated to ensure every house is connected, resulting in a total length of 10 + 15 + 5 = 15.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_minimum_spanning_tree(n, edges): result = [] # This will store the resultant MST i = 0 # An index variable for sorted edges e = 0 # An index variable for result[] # Step 1: Sort all edges in non-decreasing order of their weight. edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result.append([u, v, w]) union(parent, rank, x, y) minimum_cost = 0 for u, v, weight in result: minimum_cost += weight return minimum_cost def minimum_roads_to_decorate(t, test_cases): results = [] for n, m, roads in test_cases: results.append(kruskal_minimum_spanning_tree(n, roads)) return results def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") current_line = 0 t = int(input_lines[current_line].strip()) current_line += 1 test_cases = [] for _ in range(t): n, m = map(int, input_lines[current_line].strip().split()) current_line += 1 roads = [] for _ in range(m): u, v, w = map(int, input_lines[current_line].strip().split()) current_line += 1 roads.append((u, v, w)) test_cases.append((n, m, roads)) return t, test_cases def main(input_str): t, test_cases = process_input(input_str) results = minimum_roads_to_decorate(t, test_cases) return \\"n\\".join(map(str, results))"},{"question":"**Problem** You need to develop an application to track the uptime of a particular service. The service logs its status (active or inactive) at specific timestamps. Given this information, you need to calculate the total uptime of the service in seconds over a specified period. The status logs are given in chronological order. **Input Format** The input will be provided in the following format: * The first line contains an integer `Q`, the number of queries. * The second line contains two space-separated values, `start_time` and `end_time`, indicating the period to analyze. * The next `L` lines contain two space-separated values, `timestamp` and `status`, where `timestamp` is the time of the log in seconds since the Unix epoch and `status` is either \\"active\\" or \\"inactive\\". **Constraints** * `1 <= Q <= 10^4` * `1 <= L <= 10^5` * The `timestamp` values are unique and provided in non-decreasing order. * The `start_time` and `end_time` are within the range of the timestamp logs. * The service switches status at the provided timestamps, starting as inactive before the first timestamp. **Output Format** For each query, output the total uptime of the service over the specified period in seconds, one per line. **Input Example** ``` 2 1609459200 1609459800 1609459200 active 1609459500 inactive 1609459650 active 1609459800 inactive 1609470000 inactive 1609461000 1609461600 1609461000 inactive 1609461200 active 1609461400 inactive 1609461600 active ``` **Output Example** ``` 600 200 ``` **Explanation** In the first query: - The service logs its status at the given timestamps. - The analysis period is from 1609459200 to 1609459800. - The service is active from 1609459200 to 1609459500 (300 seconds) and from 1609459650 to 1609459800 (150 seconds). - Total uptime is 300 + 150 = 450 seconds. In the second query: - The service logs its status at the given timestamps. - The analysis period is from 1609461000 to 1609461600. - The service is inactive at 1609461000, active from 1609461200 to 1609461400, and inactive after 1609461400. - Total uptime is 200 seconds.","solution":"def calculate_uptime(query_count, queries): results = [] for query in queries: start_time, end_time = query[\'period\'] logs = query[\'logs\'] uptime = 0 in_active_period = False last_active_time = None for timestamp, status in logs: if timestamp < start_time: if status == \'active\': in_active_period = True continue if timestamp > end_time: if in_active_period: uptime += end_time - last_active_time break if in_active_period: if status == \'inactive\': uptime += timestamp - last_active_time in_active_period = False else: if status == \'active\': last_active_time = max(start_time, timestamp) in_active_period = True if in_active_period: uptime += end_time - last_active_time results.append(uptime) return results"},{"question":"You are given an array of n integers and q queries. For each query, you need to find the minimum and maximum element in the specified subarray and then calculate the absolute difference between these two values. Input The first line contains one integer n (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n integers a[i] (1 ≤ a[i] ≤ 10^9) — the elements of the array. The third line contains one integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices of the subarray for which you need to find the result. Output Output q lines, where the i-th line should contain the result for the i-th query. Example Input 7 1 5 2 4 6 3 7 3 1 3 4 7 2 5 Output 4 4 4 Explanation For the first query, the subarray is [1, 5, 2], the minimum is 1 and the maximum is 5. The absolute difference is 5 - 1 = 4. For the second query, the subarray is [4, 6, 3, 7], the minimum is 3 and the maximum is 7. The absolute difference is 7 - 3 = 4. For the third query, the subarray is [5, 2, 4, 6], the minimum is 2 and the maximum is 6. The absolute difference is 6 - 2 = 4.","solution":"def find_abs_difference(arr, queries): For each query, find the minimum and maximum values in the subarray and return their absolute difference. results = [] for l, r in queries: subarray = arr[l-1:r] min_val = min(subarray) max_val = max(subarray) abs_difference = abs(max_val - min_val) results.append(abs_difference) return results"},{"question":"A developer is asked to manipulate a list of integers following specific rules. The task is to find the sum of all odd integers in the list and the product of all even integers. Based on these results, return a new list as follows: 1. If the sum of odd integers is greater than the product of even integers, reverse the original list. 2. If the product of even integers is greater than or equal to the sum of odd integers, double each even integer in the list and halve each odd integer. For the purpose of this task, consider 0 to be an even integer. INPUT The input starts with an integer T, denoting the number of test cases. Each test case consists of an integer N, indicating the number of elements in the list. The next line contains N space-separated integers, representing the list of integers to be manipulated. OUTPUT Output T lines, each containing the resulting list for the corresponding test case. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 -1000 ≤ Each integer ≤ 1000 SAMPLE INPUT 2 5 1 2 3 4 5 4 10 1 3 5 SAMPLE OUTPUT 5 4 3 2 1 20 0.5 1.5 2.5 Explanation In the first test case: The sum of odd integers: 1 + 3 + 5 = 9 The product of even integers: 2 * 4 = 8 Since 9 > 8, we reverse the original list: [5, 4, 3, 2, 1] In the second test case: The sum of odd integers: 1 + 3 + 5 = 9 The product of even integers: 10 * 1 (treated as even) * 1 (treated as even) = 10 Since 10 > 9, we double each even integer and halve each odd integer: [20, 0.5, 1.5, 2.5]","solution":"def manipulate_list(nums): odd_sum = sum(num for num in nums if num % 2 != 0) even_product = 1 has_even = False for num in nums: if num % 2 == 0: even_product *= num if num != 0 else 1 has_even = True if not has_even: even_product = 0 if odd_sum > even_product: return nums[::-1] else: return [(num * 2 if num % 2 == 0 else num / 2) for num in nums] def process_test_cases(test_cases): results = [] for nums in test_cases: results.append(manipulate_list(nums)) return results def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) nums = list(map(int, lines[index + 1].split())) test_cases.append(nums) index += 2 results = process_test_cases(test_cases) return results"},{"question":"In an open field, there are several trees lined up in a row. Each tree is positioned at specific coordinates. Farmer John wants to build a straight fence from one tree to another to keep his cattle within a certain area. He needs to find out if this is possible given the constraint that no two trees can be on the same vertical line or the same horizontal line due to obstructions. You are tasked with checking whether a given set of trees can have such a fence built. Input Format The first line contains the integer N, the number of trees. Each of the next N lines contains two integers x_i and y_i, the coordinates of each tree. Output Format Print YES if a vertical or horizontal fence can be built between any pair of trees without encountering any other tree in the same vertical or horizontal line, otherwise print NO. Constraints 1 leq N leq 1000 -10^4 leq x_i, y_i leq 10^4 Sample Input 4 1 2 3 4 5 6 7 8 Sample Output YES Explanation In this example, no two trees are aligned vertically or horizontally, thus it\'s possible to build a fence.","solution":"def can_build_fence(trees): x_coordinates = set() y_coordinates = set() for x, y in trees: if x in x_coordinates or y in y_coordinates: return \\"NO\\" x_coordinates.add(x) y_coordinates.add(y) return \\"YES\\" # Read inputs (commented for testing purposes, usually provided via standard input) # n = int(input()) # trees = [tuple(map(int, input().split())) for _ in range(n)] # For Testing: # n = 4 # trees = [(1, 2), (3, 4), (5, 6), (7, 8)] # print(can_build_fence(trees))"},{"question":"Lauren has an array of n positive integers, [b_0, b_1, ldots, b_{n-1}]. She wants to find the number of distinct pairs (i, j), where 0 leq i < j < n, such that the bitwise AND of the elements at these positions equals zero, i.e., (b_i & b_j) = 0. Given textit{t} queries where each query consists of an array of integers, can you help Lauren count the number of valid pairs for each array? These numbers can be quite large, so return the answers modulo 10^9 + 7 for each query. Input Format The first line contains a single integer, textit{t}, denoting the number of queries. The 2 cdot t subsequent lines describe each query in the following format: The first line contains a single integer, n, denoting the number of integers in the array. The second line contains n space-separated integers describing the respective values of b_0, b_1, ldots, b_{n-1}. Constraints 1 leq t leq 10 2 leq n leq 100000 1 leq b_i leq 10^9 Output Format On a new line for each query, print a single integer denoting the number of valid pairs (i, j) such that (b_i & b_j) = 0. As these values can be quite large, return the answers modulo 10^9 + 7. Sample Input 1 4 1 2 4 8 Sample Output 6 Explanation The valid pairs (i, j) are: (0, 1)rightarrow(1 & 2) = 0 (0, 2)rightarrow(1 & 4) = 0 (0, 3)rightarrow(1 & 8) = 0 (1, 2)rightarrow(2 & 4) = 0 (1, 3)rightarrow(2 & 8) = 0 (2, 3)rightarrow(4 & 8) = 0 Because there are six valid pairs, we print the value of 6 %(10^9 + 7) = 6 on a new line.","solution":"MOD = 10**9 + 7 def count_valid_pairs(arr): n = len(arr) count = 0 for i in range(n): for j in range(i + 1, n): if (arr[i] & arr[j]) == 0: count += 1 if count >= MOD: count -= MOD return count def queries_number_of_valid_pairs(t, queries): results = [] for i in range(t): n = queries[i][0] array = queries[i][1] results.append(count_valid_pairs(array)) return results"},{"question":"The CFO of a multinational company is preparing the annual tax reports for various country branches. Each branch has a unique ID from 1 to n. The calculation of total taxable income for each branch is based on different sectors of revenue generation and expenditure such as Sales, Services, Manufacturing, R&D etc. Each branch has reported its income and expenditure for m sectors. The CFO wants to identify the branch with the lowest taxable income. In case of a tie, the branch with the smallest ID will be considered as having the lowest taxable income. Help the CFO determine which branch has the lowest taxable income. Input Format: First line contains n (the number of branches) and m (the number of sectors). Next n lines contain m pairs of integers denoting the income and expenditure for each sector of a branch. Next line contains q (the number of queries). Each query contains a value x indicating the number of sectors to be considered and then x distinct integers representing the sectors to be considered. Output Format: For each query output the unique ID of the branch with the lowest taxable income. Taxable income for each sector is calculated as income - expenditure. Total taxable income for each branch in a query is the sum of taxable incomes of the specified sectors. Constraints: 1 ≤ n ≤ 1000 1 ≤ m ≤ 20 -1000 ≤ income, expenditure ≤ 1000 1 ≤ q ≤ 1000 SAMPLE INPUT 3 3 500 100 300 50 200 80 400 200 300 100 200 150 600 200 400 200 100 70 2 2 1 2 3 1 2 3 SAMPLE OUTPUT 1 3 Explanation In query 1, we have to consider 2 sectors. For the first 2 sectors, the total taxable income is: Branch 1: (500-100) + (300-50) = 650 Branch 2: (400-200) + (300-100) = 400 Branch 3: (600-200) + (400-200) = 600 Branch 2 has the lowest taxable income, so the output for this query is 2. In query 2, we have to consider all 3 sectors. The total taxable income is: Branch 1: (500-100) + (300-50) + (200-80) = 770 Branch 2: (400-200) + (300-100) + (200-150) = 450 Branch 3: (600-200) + (400-200) + (100-70) = 630 Branch 2 again has the lowest taxable income, so the output for this query is 2.","solution":"def branch_with_lowest_income(n, m, branches, queries): results = [] for query in queries: x = query[0] sectors = query[1:] min_income = float(\'inf\') min_branch_id = -1 for i in range(n): total_income = sum(branches[i][sector*2] - branches[i][sector*2 + 1] for sector in sectors) if total_income < min_income or (total_income == min_income and i + 1 < min_branch_id): min_income = total_income min_branch_id = i + 1 results.append(min_branch_id) return results"},{"question":"# Your task is to write a function that calculates the number of possible ways to climb a staircase of `n` steps, given that you can only take 1, 2, or 3 steps at a time. # Requirements: - The function should take a single integer `n` as input, representing the number of steps in the staircase. - The function should return an integer, representing the total number of possible ways to reach the top of the staircase. # Example: If `n = 4`, the number of ways to climb a staircase with 4 steps is 7. The possible sequences are: 1. 1, 1, 1, 1 2. 1, 1, 2 3. 1, 2, 1 4. 2, 1, 1 5. 2, 2 6. 1, 3 7. 3, 1 # Constraints: - Assume `n` is a non-negative integer. # Function Signature: `def climb_stairs(n: int) -> int:` **Good Luck!**","solution":"def climb_stairs(n: int) -> int: Calculate the number of possible ways to climb a staircase of n steps, given that you can only take 1, 2, or 3 steps at a time. :param n: Number of steps in the staircase :return: Total number of possible ways to reach the top of the staircase if n == 0: return 1 elif n == 1: return 1 elif n == 2: return 2 elif n == 3: return 4 ways = [0] * (n + 1) ways[0] = 1 ways[1] = 1 ways[2] = 2 ways[3] = 4 for i in range(4, n + 1): ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3] return ways[n]"},{"question":"Given a list of integers representing the heights of buildings in a skyline, write a function to find the maximum area of a rectangular section formed using contiguous buildings. Example: Input: heights = [2, 1, 5, 6, 2, 3] Output: 10 Note: - The width of each building is 1 unit. - You may assume the heights array will have at least one building.","solution":"def largest_rectangle_area(heights): Given a list of integers representing the heights of buildings in a skyline, returns the maximum area of a rectangular section formed using contiguous buildings. stack = [] max_area = 0 index = 0 while index < len(heights): # Push the current building index to the stack if it\'s taller than the stack\'s top if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top building height top_of_stack = stack.pop() # Calculate the area with the popped height as the smallest (or minimum height) bar \'h\' area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update the max_area max_area = max(max_area, area) # Now pop the remaining buildings from the stack and calculate area after all buildings are processed while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"# Task You are given an array of integers and a target integer. Your task is to determine if there is a contiguous subarray within the given array that sums up to the target integer. Return \'True\' if such a subarray exists, and \'False\' otherwise. If the array is empty, return \'False\'. If you do not understand the task, please read the rewritten version below: You are provided with an array of integers and a target integer. Determine if any continuous subarray within the array adds up to the target integer. Return \'True\' if a qualified subarray is found, and \'False\' if none exists. # Example For `array = [1, 2, 3, 7, 5]` and `target = 12`, the output should be `True`. Explanation: The subarray [2, 3, 7] sums up to 12. For `array = [-1, 4, 2, -2, 5]` and `target = 7`, the output should be `False`. Explanation: None of the continuous subarrays in the array sums up to 7. # Note - `1 <= array.length <= 10^5` - `-10^5 <= array[i] <= 10^5` - `-10^5 <= target <= 10^5` - `2` fixed testcases - `5` random testcases, testing for correctness of solution - All inputs are valid. - If my reference solution gives the wrong result in the random tests, please let me know(post an issue).","solution":"def has_contiguous_subarray_with_sum(arr, target): Determine if there is a contiguous subarray within the given array that sums up to the target integer. if not arr: return False current_sum = 0 sum_set = {0} for num in arr: current_sum += num if current_sum - target in sum_set: return True sum_set.add(current_sum) return False"},{"question":"Write a function that takes two strings as input and determines if one is a permutation of the other. Both strings contain only lowercase letters. You should not consider whitespace or punctuation, and the comparison should be case insensitive. # Examples: ``` Input: \\"listen\\", \\"silent\\" Output: True Input: \\"triangle\\", \\"integral\\" Output: True Input: \\"apple\\", \\"pale\\" Output: False Input: \\"Astronomer\\", \\"Moon starer\\" Output: True ``` # Detailed Requirements: - Function Signature: `def is_permutation(str1: str, str2: str) -> bool:` - Both input strings `str1` and `str2` will not be null. - Ignore case sensitivity and non-alphabetic characters while comparing. - The function should return `True` if one string is a permutation of the other, otherwise `False`. - Aim for a solution with linear time complexity regarding the length of the input strings.","solution":"def is_permutation(str1: str, str2: str) -> bool: Determines if one string is a permutation of the other. Ignores case sensitivity and non-alphabetic characters. from collections import Counter import re # Remove non-alphabetic characters and convert to lowercase filtered_str1 = re.sub(r\'[^a-z]\', \'\', str1.lower()) filtered_str2 = re.sub(r\'[^a-z]\', \'\', str2.lower()) # Count character frequencies and compare return Counter(filtered_str1) == Counter(filtered_str2)"},{"question":"You are given an integer N. Write a program to generate a spiral matrix of size N x N. The spiral order starts from the top-left corner with the number 1 and continuously increases to the center of the matrix. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output a spiral matrix of size N x N. Print each row of the matrix in a new line. Separate numbers in a row by space. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 20 -----Sample Input:----- 2 3 4 -----Sample Output:----- 1 2 3 8 9 4 7 6 5 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 -----Explanation:----- No need, as the matrix pattern can be visually understood from the output.","solution":"def generate_spiral_matrix(N): Generates an N x N spiral matrix. matrix = [[0] * N for _ in range(N)] val = 1 left, right = 0, N - 1 top, bottom = 0, N - 1 while left <= right and top <= bottom: # Traverse from left to right across the top row for i in range(left, right + 1): matrix[top][i] = val val += 1 top += 1 # Traverse from top to bottom down the right column for i in range(top, bottom + 1): matrix[i][right] = val val += 1 right -= 1 # Traverse from right to left across the bottom row if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = val val += 1 bottom -= 1 # Traverse from bottom to top up the left column if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = val val += 1 left += 1 return matrix def print_spiral_matrices(test_cases): results = [] for case in test_cases: N = case matrix = generate_spiral_matrix(N) for row in matrix: results.append(\\" \\".join(map(str, row))) results.append(\\"\\") # Blank line separator after each matrix return results # Sample usage: # test_cases = [3, 4] # matrices = print_spiral_matrices(test_cases) # for line in matrices: # print(line)"},{"question":"You are given a string of parentheses. Your task is to create a function that determines the deepest level of nested parentheses in the input string. A properly nested parenthesis string is a string which meets the following criteria: - An empty string \\"\\" is properly nested. - If S is properly nested, then the string \\"(\\" + S + \\")\\" is properly nested, as well. The depth of a properly nested string is defined as the maximum level of nesting, which is the number of pairs of parentheses inside a given pair. If the string is not properly nested, return -1. Examples: For the input string \\"(())\\", the result will be 2 as the deepest nesting level is 2. For the input string \\"(()(()))\\", the result will be 3 as the deepest nesting level is 3. For the input string \\")(\\", the result will be -1 as the string is not properly nested. For the input string \\"(()\\", the result will be -1 as the string is not properly nested.","solution":"def max_nested_depth(s): Determines the deepest level of nested parentheses in the input string. Parameters: s (str): The input string containing parentheses. Returns: int: The maximum depth of nested parentheses if properly nested, otherwise -1. max_depth = 0 current_depth = 0 for char in s: if char == \\"(\\": current_depth += 1 if current_depth > max_depth: max_depth = current_depth elif char == \\")\\": if current_depth == 0: return -1 # Unmatched closing parenthesis current_depth -= 1 if current_depth != 0: return -1 # Unmatched opening parenthesis return max_depth"},{"question":"**Problem Statement:** You have been tasked with creating an innovative digital book reader for a small startup. One important feature of the reader is the ability to summarize the elapsed reading duration of a user. To simplify this feature, the team decided that the summary would consist of counting the total number of pages read in hour-long segments. Your task is to implement a function that takes an array of reading sessions and returns the number of pages read during each hour-long segment. Each reading session is represented as a tuple `(startTime, endTime, pagesRead)`, where: - `startTime` and `endTime` are timestamps in the format `hh:mm` (24-hour clock). - `pagesRead` is the number of pages read during that session. You can assume that: - all input times are within a single day (i.e., from `00:00` to `23:59`). - there are no overlapping sessions. - each session\'s duration is within one hour span. The output should be a list of integers where each integer represents the total number of pages read during that hour, starting from `00:00 - 00:59`, `01:00 - 01:59`, and so on till `23:00 - 23:59`. **Input:** - An integer `n` (1 ≤ n ≤ 105), representing the number of reading sessions. - An array of `n` tuples, each tuple consisting of: - `startTime` (a string in the format `hh:mm`) - `endTime` (a string in the format `hh:mm`) - `pagesRead` (an integer representing the number of pages read). **Output:** - A list of 24 integers, where each integer represents the total number of pages read within each respective hour-long segment. **Example:** ``` Input: 3 [ (\\"08:15\\", \\"08:45\\", 30), (\\"10:00\\", \\"10:30\\", 20), (\\"23:10\\", \\"23:55\\", 15) ] Output: [0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15] ``` Note that the segments with no reading sessions should have a score of 0. Your task is to implement the solution accordingly.","solution":"def summarize_reading_sessions(n, sessions): Returns the total number of pages read in each hour-long segment. Parameters: - n : int : number of reading sessions - sessions : list of tuples : reading sessions as (startTime, endTime, pagesRead) Returns: - list of int : pages read in each hour-long segment from 00:00 to 23:59 hours = [0] * 24 # Create a list of 24 zeros representing each hour of the day for session in sessions: start_time, end_time, pages_read = session # Extract the hour part from the startTime start_hour = int(start_time.split(\':\')[0]) # Add pages read to the respective hour hours[start_hour] += pages_read return hours"},{"question":"A warehouse has several shelves arranged in an n times n grid. Each cell in the grid can either be empty (denoted by 0) or contain a product (denoted by 1). The warehouse needs to efficiently find all clusters of products. A cluster is defined as a group of adjacent cells containing products, where adjacency is defined by sharing an edge (north, south, east, or west). Given the grid configuration, your task is to identify the number of distinct clusters of products and return their sizes in ascending order. -----Input----- The first line contains an integer n, 1 le n le 1000. The following n lines each contain n integers, either 0 or 1, representing the grid configuration. -----Output----- Output an integer k, the number of distinct clusters, followed by k integers in ascending order, representing the sizes of these clusters. -----Examples----- Sample Input: 5 11000 11000 00100 00011 00011 Sample Output: 3 1 4 4","solution":"def get_clusters_count_and_sizes(grid): Returns the number of clusters and their sizes in ascending order. Args: grid -- list of list of integers Returns: Tuple containing the number of clusters and a list of cluster sizes in ascending order n = len(grid) visited = [[False] * n for _ in range(n)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def dfs(x, y): stack = [(x, y)] size = 0 while stack: cx, cy = stack.pop() if not visited[cx][cy]: visited[cx][cy] = True size += 1 for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 1 and not visited[nx][ny]: stack.append((nx, ny)) return size clusters_sizes = [] for i in range(n): for j in range(n): if grid[i][j] == 1 and not visited[i][j]: clusters_sizes.append(dfs(i, j)) clusters_sizes.sort() return len(clusters_sizes), clusters_sizes"},{"question":"Diana is participating in a programming competition where she needs to generate sequences following specific rules. She is provided with an integer `n`, representing the length of the sequence, and two integers `a` and `b`, which she needs to use as coefficients in her sequence formula. Diana\'s task is to compute the `n`-length sequence using the following recurrence relation and initial values: S(0) = a S(1) = b S(k) = S(k-1) + S(k-2) for k >= 2 The sequence generation should follow these rules: 1. The sequence starts with `S(0)` and `S(1)`. 2. Each subsequent term in the sequence is the sum of the two preceding terms. Diana needs your help to write a program that computes this sequence for given values of `n`, `a`, and `b`. # Input The input consists of multiple datasets. Each dataset is a single line containing three integers separated by spaces: - An integer `n` (2 <= n <= 50), the length of the sequence. - An integer `a` (-1000 <= a <= 1000), the first element of the sequence. - An integer `b` (-1000 <= b <= 1000), the second element of the sequence. A line containing `0 0 0` indicates the end of the input and does not represent a dataset. # Output For each dataset, output a single line containing the `n` elements of the sequence separated by spaces. # Example Input ``` 5 3 4 7 1 -1 10 0 0 0 0 0 ``` Output ``` 3 4 7 11 18 1 -1 0 -1 -1 -2 -3 0 0 0 0 0 0 0 0 0 0 ``` # Note In the first example, the sequence of length 5 starting with 3 and 4 is `3, 4, 7, 11, 18` computed as follows: - S(2) = S(1) + S(0) = 4 + 3 = 7 - S(3) = S(2) + S(1) = 7 + 4 = 11 - S(4) = S(3) + S(2) = 11 + 7 = 18 In the second example, the sequence of length 7 starting with 1 and -1 is `1, -1, 0, -1, -1, -2, -3` and so on. Implement a program to output the required sequence for each input dataset.","solution":"def generate_sequence(n, a, b): Generates a sequence of length n using the specified recurrence relation. Parameters: n (int): Length of the sequence a (int): The first element of the sequence b (int): The second element of the sequence Returns: list: A list containing the generated sequence sequence = [0] * n sequence[0] = a sequence[1] = b for i in range(2, n): sequence[i] = sequence[i - 1] + sequence[i - 2] return sequence def parse_input(input_str): Parses the input string and generates output sequences for each dataset. Parameters: input_str (str): Input string containing multiple lines of datasets Returns: list: A list of output sequence strings for each dataset lines = input_str.strip().split(\'n\') result = [] for line in lines: n, a, b = map(int, line.split()) if n == 0 and a == 0 and b == 0: break sequence = generate_sequence(n, a, b) result.append(\\" \\".join(map(str, sequence))) return result"},{"question":"problem You are tasked with analyzing sales data for a company that sells multiple product types. Each product type has various product ID\'s and sales data representing the number of units sold. You need to create a program that identifies the product type with the highest overall sales. The input contains multiple datasets. Each dataset contains information on several product types and their associated sales data. Your program should determine which product type has the highest total sales and output the name of that product type along with the total sales number. The input format is as follows: The first line contains an integer `t` (1 ≤ t ≤ 10), representing the number of datasets. Each dataset begins with an integer `n` (1 ≤ n ≤ 50), the number of product types. For each product type, the input contains multiple lines. The first line contains the product type name (a single string with no spaces). The second line contains an integer `m` (1 ≤ m ≤ 100), the number of different product IDs for that product type. The next `m` lines each consist of a product ID (a single non-negative integer) and the number of units sold (a non-negative integer), both separated by a space. The output should contain one line per dataset, with the product type name and its total units sold, separated by a space. Example: Input ``` 2 3 Electronics 2 101 50 102 75 Furniture 3 201 30 202 55 203 40 Clothing 2 301 45 302 55 2 Grocery 4 401 10 402 20 403 30 404 40 Toys 3 501 25 502 35 503 20 ``` Output ``` Electronics 125 Grocery 100 ``` Explanation: In the first dataset: - The total units sold for Electronics are 125 (50 + 75). - The total units sold for Furniture are 125 (30+55+40). - The total units sold for Clothing are 100 (45+55). Since Electronics have the highest units sold among the three product types (125), the output for the first dataset is \\"Electronics 125\\". In the second dataset: - The total units sold for Grocery are 100 (10 + 20 + 30 + 40). - The total units sold for Toys are 80 (25 + 35 + 20). Since Grocery has the highest units sold among the two product types (100), the output for the second dataset is \\"Grocery 100\\".","solution":"def find_top_selling_product(datasets): results = [] for dataset in datasets: max_sales = 0 top_product_type = \\"\\" for product_type, sales_data in dataset.items(): total_sales = sum(sales_data.values()) if total_sales > max_sales: max_sales = total_sales top_product_type = product_type results.append(f\\"{top_product_type} {max_sales}\\") return results def process_input(input_data): datasets = [] idx = 0 t = int(input_data[idx]) idx += 1 for _ in range(t): n = int(input_data[idx]) idx += 1 dataset = {} for _ in range(n): product_type = input_data[idx] idx += 1 m = int(input_data[idx]) idx += 1 sales_data = {} for _ in range(m): product_id, units_sold = map(int, input_data[idx].split()) sales_data[product_id] = units_sold idx += 1 dataset[product_type] = sales_data datasets.append(dataset) return datasets def main(input_data): datasets = process_input(input_data) return find_top_selling_product(datasets)"},{"question":"You are given a binary tree with N nodes, where each node has a unique value between 1 and N. The values are given as a list of tuples of the form (parent, child) indicating that there is a directed edge from the parent to the child. The root of the tree is always the node with the value 1. You need to write a program to determine the sum of the values of nodes at the maximum depth of the tree (considering the root node has a depth of 0). For example, let us assume that the following binary tree is given: - (1, 2) - (1, 3) - (2, 4) - (2, 5) The tree can be visualized as follows: 1 / 2 3 / 4 5 The nodes at the maximum depth (2) are 4 and 5. Their sum is 9. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ parent, child ≤ N -----Input----- The input is given from Standard Input in the following format: N parent_1 child_1 parent_2 child_2 : parent_(N-1) child_(N-1) -----Output----- Print the sum of the values of nodes at the maximum depth of the tree. -----Sample Input----- 5 1 2 1 3 2 4 2 5 -----Sample Output----- 9 The tree can be visualized as described above.","solution":"def find_max_depth_sum(n, edges): from collections import deque, defaultdict # Build the tree as an adjacency list tree = defaultdict(list) for parent, child in edges: tree[parent].append(child) # BFS to find farthest nodes from the root (node 1) queue = deque([(1, 0)]) # (node, depth) max_depth = 0 depth_sums = defaultdict(int) while queue: node, depth = queue.popleft() max_depth = max(max_depth, depth) depth_sums[depth] += node for child in tree[node]: queue.append((child, depth + 1)) return depth_sums[max_depth] # Example usage # N = 5 # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(find_max_depth_sum(N, edges)) # Output should be 9"},{"question":"Write a function `max_subarray_sum` which takes an array of integers and returns the largest sum of a contiguous subarray. The subarray should contain at least one number. If the array is empty, return `None`.","solution":"def max_subarray_sum(arr): Returns the largest sum of a contiguous subarray. The subarray should contain at least one number. If the array is empty, return None. if not arr: return None max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a board game, each player starts with a certain number of tokens. Players take turns in a sequence, and on each turn, a player might lose some of their tokens due to certain game events. Your task here is to help simulate the token levels of all players after a series of game events. Given the initial tokens each player has, and a series of events where each event signifies the loss of a certain number of tokens for a specific player, determine the final token levels for each player. INPUT The first line contains an integer N (1 ≤ N ≤ 1000), representing the number of players. The second line contains N integers, each representing the initial number of tokens each player has. The third line contains an integer M (1 ≤ M ≤ 10000), representing the number of events. The next M lines each contain two integers P and L (1 ≤ P ≤ N and 1 ≤ L ≤ 1000), indicating that player P loses L tokens due to the event. OUTPUT Print a single line containing the final token levels of all players. CONSTRAINTS - A player\'s tokens cannot be less than zero. If a subtraction results in a negative number, set the player\'s tokens to zero. SAMPLE INPUT 3 50 60 70 5 1 30 2 50 3 80 1 10 2 20 SAMPLE OUTPUT 10 0 0 Explanation Initially, the players have tokens [50, 60, 70]. After the first event, player 1 loses 30 tokens: [20, 60, 70]. After the second event, player 2 loses 50 tokens: [20, 10, 70]. After the third event, player 3 loses 80 tokens: [20, 10, 0]. After the fourth event, player 1 loses 10 tokens: [10, 10, 0]. After the fifth event, player 2 loses 20 tokens: [10, 0, 0].","solution":"def update_token_levels(n, initial_tokens, events): Updates the token levels of players based on a series of events. Parameters: n (int): Number of players. initial_tokens (list of int): Initial tokens each player has. events (list of tuples): Each tuple contains (P, L) where player P loses L tokens. Returns: list of int: Final token levels of all players. tokens = initial_tokens[:] for event in events: player, loss = event tokens[player - 1] = max(0, tokens[player - 1] - loss) return tokens"},{"question":"A large historical museum decided to digitize its artifact collection and created a database for it. Each artifact has a unique identifier and various attributes such as age, origin, and type. They want to develop a system to find the oldest artifacts in the collection from a given type and within a specified age range. -----Input----- The first line contains three integers n, t, and q, where n is the number of artifacts in the database, t is the number of unique artifact types, and q is the number of queries. The next n lines describe the artifacts. Each line contains a unique identifier, an integer type (ranging from 1 to t), and an age as a positive integer. The following q lines provide a query, each containing three integers - a type t_i, a lower bound age l, and an upper bound age u. You may assume nleq 100000, tleq 1000, qleq 10000, and artifact ages are each leq 1000000. -----Output----- For each query, output the identifier of the oldest artifact within the given type and age range. If no such artifact exists, output -1. -----Examples----- Sample Input: 5 3 2 123 1 300 124 2 200 125 1 150 126 3 400 127 2 250 1 100 200 2 200 300 Sample Output: 125 124","solution":"def find_oldest_artifact(n, t, q, artifacts, queries): from collections import defaultdict # Create a dictionary to store artifacts by their type artifacts_by_type = defaultdict(list) for identifier, artifact_type, age in artifacts: artifacts_by_type[artifact_type].append((identifier, age)) # Function to find the oldest artifact satisfying the query conditions def get_oldest_artifact(artifact_type, l, u): relevant_artifacts = [ (identifier, age) for identifier, age in artifacts_by_type[artifact_type] if l <= age <= u ] if not relevant_artifacts: return -1 # Find the oldest among the relevant artifacts return min(relevant_artifacts, key=lambda x: x[1])[0] results = [] for artifact_type, l, u in queries: result = get_oldest_artifact(artifact_type, l, u) results.append(result) return results"},{"question":"A supermarket manager is trying to optimize the inventory tracking system. He has noticed that sometimes items are miscounted. To fix this, he needs to compare the recorded inventory counts between two consecutive days and identify discrepancies. Each item is represented by its unique ID (a positive integer). The inventory count for a day is a list of integers where each integer denotes the quantity of a specific item that was recorded on that day. He wants to find out the two item discrepancies between Day 1 and Day 3 after fixing discrepancies in Day 2. In other words, given the confirmed recorded inventory on Day 1 and Day 3, he needs to know which items had discrepancies corrected when comparing Day 1 to Day 2, and then Day 2 to Day 3. Can you help the manager find out these discrepancies? -----Input----- The first line of the input contains integer n (3 ≤ n ≤ 10^5) — the initial number of items recorded on Day 1. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the item counts recorded on Day 1. The third line contains n - 1 space-separated integers b_1, b_2, ..., b_{n-1} — the item counts recorded on Day 2. It is guaranteed that the sequence in the third line contains all numbers of the second string except for exactly one. The fourth line contains n - 2 space-separated integers c_1, c_2, ..., c_{n-2} — the item counts recorded on Day 3. It is guaranteed that the sequence in the fourth line contains all numbers of the third line except for exactly one. -----Output----- Print two numbers on a single line: the item quantities that were corrected from Day 1 to Day 2 and from Day 2 to Day 3, respectively. -----Examples----- Input 4 11 5 7 3 5 7 3 7 3 Output 11 5 Input 5 15 12 9 13 6 15 9 13 6 13 9 6 Output 12 15 -----Note----- In the first test sample, the count 11 was corrected first and then the count 5 was corrected next. In the second test sample, the count 12 was corrected first and then the count 15 was corrected next.","solution":"def find_discrepancies(day1_counts, day2_counts, day3_counts): Function to find discrepancy items between Day 1 and Day 2, and between Day 2 and Day 3. Parameters: day1_counts (list): Item counts recorded on Day 1. day2_counts (list): Item counts recorded on Day 2. day3_counts (list): Item counts recorded on Day 3. Returns: tuple: Discrepancies between Day 1 and 2, and between Day 2 and 3. def find_missing(list1, list2): count_map = {} for item in list1: count_map[item] = count_map.get(item, 0) + 1 for item in list2: if item in count_map and count_map[item] > 0: count_map[item] -= 1 if count_map[item] == 0: del count_map[item] for missing_item in count_map: return missing_item discrepancy_1_2 = find_missing(day1_counts, day2_counts) discrepancy_2_3 = find_missing(day2_counts, day3_counts) return (discrepancy_1_2, discrepancy_2_3)"},{"question":"A company is conducting a survey where they record the responses of customers on a scale from 1 to 5. You are given an array `responses` where each element represents the feedback score from a single customer (1 being the lowest and 5 being the highest). Your task is to calculate and return the average feedback score rounded to 2 decimal places. Example 1: Input: responses = [4, 5, 3, 2, 5] Output: 3.80 Explanation: The average of the feedback scores is (4+5+3+2+5)/5 = 3.80. Example 2: Input: responses = [5, 5, 5, 5, 5] Output: 5.00 Explanation: The average of the feedback scores is (5+5+5+5+5)/5 = 5.00. Your Task: You don\'t need to read or print anything. Your task is to complete the function `calculate_average_feedback()` which takes the array `responses` as input and returns the average feedback score as a float rounded to 2 decimal places. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(responses) <= 100 1 <= responses[i] <= 5","solution":"def calculate_average_feedback(responses): Calculate the average feedback score and round to 2 decimal places. :param responses: List of integers representing feedback scores :return: Float representing the average score rounded to 2 decimal places if not responses: return 0.0 average_score = sum(responses) / len(responses) return round(average_score, 2)"},{"question":"Implement a class LRUCache that simulates a LRU (Least Recently Used) cache mechanism. The class should have the following functions: 1. `LRUCache(int capacity)`: Initialize the cache with a positive size capacity. 2. `int get(int key)`: Return the value (integer) of the key if the key exists in the cache, otherwise return -1. 3. `void put(int key, int value)`: Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key. **Example:** ```plaintext LRUCache cache = new LRUCache(2); // capacity cache.put(1, 1); cache.put(2, 2); cache.get(1); // returns 1 cache.put(3, 3); // evicts key 2 cache.get(2); // returns -1 (not found) cache.put(4, 4); // evicts key 1 cache.get(1); // returns -1 (not found) cache.get(3); // returns 3 cache.get(4); // returns 4 ``` **Notes:** - The function `put` and `get` must each run in O(1) average time complexity. - The `capacity` is a positive integer. - The `key` and `value` are both integer values.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity: int): self.capacity = capacity self.cache = OrderedDict() def get(self, key: int) -> int: if key not in self.cache: return -1 else: self.cache.move_to_end(key) return self.cache[key] def put(self, key: int, value: int) -> None: if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False)"},{"question":"Given a list of strings `words` and a string `target`, find the minimum number of adjacent swaps needed to move `target` to the beginning of the list. If `target` is not present in the list, return -1. Each adjacent swap moves the element at index `i` to index `i-1` and the element at index `i-1` to index `i`. Example 1: Input: words = [\'apple\', \'banana\', \'cherry\', \'date\', \'fig\', \'grape\'] target = \'date\' Output: 3 Explanation: Initially, \'date\' is at index 3. Performing 3 adjacent swaps: 1. [\'apple\', \'banana\', \'cherry\', \'fig\', \'date\', \'grape\'] 2. [\'apple\', \'banana\', \'date\', \'cherry\', \'fig\', \'grape\'] 3. [\'apple\', \'date\', \'banana\', \'cherry\', \'fig\', \'grape\'] After 3 swaps, \'date\' is moved to the beginning. Example 2: Input: words = [\'lemon\', \'orange\', \'pear\', \'watermelon\'] target = \'grapefruit\' Output: -1 Explanation: Since \'grapefruit\' is not in the list, the output is -1. Your Task: You don\'t need to read input or print anything. Write the function `minSwapsToFront()` that takes the list of strings `words` and the string `target` as parameters and returns the minimum number of swaps or -1 if the target is not found. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: - 1 <= len(words) <= 10^{5} - 1 <= len(words[i]), len(target) <= 100 - The `words` list contains only lowercase English letters. - All the strings in `words` are unique.","solution":"def minSwapsToFront(words, target): Finds the minimum number of adjacent swaps needed to move `target` to the beginning of the list `words`. Returns -1 if `target` is not found. try: # Find the index of the target in the list target_index = words.index(target) except ValueError: # If target is not found, return -1 return -1 # The number of swaps needed to move the target to the front return target_index"},{"question":"**Reverse Every Other Word** a function `reverseEveryOther` that reverses every other word in a given sentence and leaves the rest as they are. Assume the sentence is a string of words separated by spaces. The function should return the modified sentence, while maintaining the original order of words. ``` reverseEveryOther(\\"Hello world this is a test\\"); // should return \\"Hello dlrow this si a tset\\" reverseEveryOther(\\"Coding is fun\\"); // should return \\"Coding si fun\\" reverseEveryOther(\\"I love programming\\"); // should return \\"I evol programming\\" reverseEveryOther(\\"\\"); // should return \\"\\" reverseEveryOther(\\"A B C D E F\\"); // should return \\"A B C D E F\\" ```","solution":"def reverseEveryOther(sentence): Reverses every other word in the given sentence. :param sentence: A string of words separated by spaces. :return: A modified sentence with every other word reversed. words = sentence.split() for i in range(len(words)): if i % 2 == 1: words[i] = words[i][::-1] return \' \'.join(words)"},{"question":"# Task: - Suppose you have a set of stacks of books. Each stack, starting from the first one, contains books with consecutive page numbers, where each subsequent stack has one additional book than the previous one. For example, the first stack has 1 book with 1 page, the second stack has 2 books (pages 2 and 3), the third stack has 3 books (pages 4, 5, and 6), and so on. This sequence continues indefinitely. - You are given an integer idx and you need to determine the page number of the book at the given index (0-based) in the overall sequence of books from all stacks concatenated together. # Input: - An integer idx representing the 0-based index in the concatenated sequence of books. # Output: - Return the page number of the book present at the given idx. # Example: - Consider the sequence of page numbers of books from all stacks: ``` Stack 1: [1] Stack 2: [2, 3] Stack 3: [4, 5, 6] Stack 4: [7, 8, 9, 10] ... ``` - Given idx = 5, the sequence is [1, 2, 3, 4, 5, 6, 7, ...], so the book at index 5 has page number 6. # Constraints: - 0 <= idx <= 10^9 # Note - Assume you have sufficient computation power and memory to handle the input within the constraints. # Hint: - Finding the correct stack and position within the stack might involve calculating the sum of the first n natural numbers to determine where an index falls within the concatenation of stacks. You may need to use mathematical formulas or efficient algorithms to handle large indices.","solution":"def find_page_number(idx): Returns the page number of the book at the given index (0-based) in the overall sequence of books from all stacks concatenated together. current_stack = 1 current_stack_start_idx = 0 current_stack_end_idx = 0 while True: current_stack_end_idx += current_stack if idx <= current_stack_end_idx - 1: break current_stack += 1 current_stack_start_idx = current_stack_end_idx # Calculate the starting page number of the current stack start_page_number = current_stack * (current_stack - 1) // 2 + 1 position_in_current_stack = idx - current_stack_start_idx return start_page_number + position_in_current_stack"},{"question":"Write a function that takes a list of integers as input and returns the smallest positive integer that is missing from the list. You should provide an efficient solution that runs in O(n) time. Example: Input [1, 3, 6, 4, 1, 2] Output 5 Input [1, 2, 3] Output 4 Input [-1, -3] Output 1","solution":"def first_missing_positive(nums): Returns the smallest positive integer that is missing from the list. This solution runs in O(n) time. n = len(nums) # Step 1: Replace non-positive numbers and numbers greater than n with n+1 for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Use the index as a hash key and mark the corresponding element negative for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: The first index which has a positive number represents the missing number for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"There is a new highway being planned which will connect n cities. This highway is a straight line, and cities have already been assigned their coordinates along this line. Each city i has a coordinate x_i. To avoid traffic congestion, the highway planners have decided to build exactly m highways such that each city must be connected to exactly one highway and each highway connects a consecutive subset of cities. The cost to build a highway connecting cities from i to j is proportional to the length of that segment, specifically text{cost} = x_j - x_i, where 1 leq i leq j leq n. Help the planners minimize the total cost of building the m highways. -----Input----- The first line contains two integers n and m (1 leq m leq n leq 1000): the number of cities and the number of highways. The next line contains n integers x_1, x_2, ldots, x_n (1 leq x_i leq 10^6): the coordinates of the cities. It is guaranteed that these coordinates are given in non-decreasing order. -----Output----- Output one integer: the minimum total cost of building the highways. -----Examples----- Input 4 2 1 3 5 7 Output 4 Input 5 3 1 2 3 4 5 Output 2 -----Note----- For the first test, the optimal way to divide the cities into highways is {1,3} and {5,7}. The cost is (3-1) + (7-5) = 4. For the second test, the optimal way to divide the cities into highways is {1,2}, {3}, and {4,5}. The cost is (2-1) + (5-4) = 2.","solution":"def minimize_highway_cost(n, m, coordinates): # Sort the coordinates to ensure they are in non-decreasing order coordinates.sort() # Calculate the segment lengths segment_lengths = [coordinates[i+1] - coordinates[i] for i in range(n-1)] # Sort segment lengths in non-decreasing order segment_lengths.sort() # The minimum total cost is the sum of the (n-m) smallest segment lengths return sum(segment_lengths[:n-m])"},{"question":"John has a rectangular garden represented by a 2D grid of dimensions M times N. Each cell in the grid can either be empty (represented by a 0) or contain a tree (represented by a 1). John wants to know the number of distinct groups of connected trees in his garden. Trees are considered connected if they are adjacent horizontally or vertically (not diagonally). Write a program to help John find the number of distinct groups of connected trees in his garden. -----Input:----- - First line will contain two integers M and N, the dimensions of the garden grid. - Next M lines will each contain N integers (0 or 1), representing the garden grid. -----Output:----- Print the number of distinct groups of connected trees. -----Constraints----- - 1 leq M, N leq 50 - Each cell in the grid is either 0 (empty) or 1 (tree). -----Sample Input:----- 4 5 1 0 0 1 0 1 0 0 1 0 0 1 1 0 0 0 0 0 0 1 -----Sample Output:----- 4 -----EXPLANATION:----- The garden grid is: [ [1, 0, 0, 1, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 0, 0, 1] ] There are four distinct groups of connected trees: 1. The trees at (0,0) and (1,0) 2. The trees at (0,3) and (1,3) 3. The trees at (2,1) and (2,2) 4. The tree at (3,4) John should output the number 4.","solution":"def num_distinct_groups_trees(M, N, grid): def dfs(x, y): if x < 0 or y < 0 or x >= M or y >= N or grid[x][y] == 0: return grid[x][y] = 0 # Mark the tree as visited dfs(x + 1, y) # Move down dfs(x - 1, y) # Move up dfs(x, y + 1) # Move right dfs(x, y - 1) # Move left count = 0 for i in range(M): for j in range(N): if grid[i][j] == 1: count += 1 dfs(i, j) return count"},{"question":"Monk has a peculiar interest in prime numbers. He recently came across an interesting problem. Given an integer N, Monk wants to find the total number of distinct prime factors of all integers from 1 to N. To do this efficiently, Monk needs your help to write a program that calculates this value. Input: The first line contains a single integer T, the number of test cases. Each of the next T lines contains a single integer N. Output: For each test case, output a single integer, the total number of distinct prime factors of all the integers from 1 to N. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100000 SAMPLE INPUT 2 10 15 SAMPLE OUTPUT 4 6 Explanation For the first test case, the prime factorization of integers from 1 to 10 is: 1 (no prime factors), 2 (prime factor: 2), 3 (prime factor: 3), 4 (prime factors: 2), 5 (prime factor: 5), 6 (prime factors: 2, 3), 7 (prime factor: 7), 8 (prime factors: 2), 9 (prime factors: 3), 10 (prime factors: 2, 5). The distinct prime factors are 2, 3, 5, 7, thus the result is 4. For the second test case, the prime factorization of integers from 1 to 15 includes the prime numbers 2, 3, 5, 7, 11, and 13. These account for the 6 distinct prime factors up to 15.","solution":"def count_distinct_prime_factors(N): Given an integer N, returns the total number of distinct prime factors of all integers from 1 to N. sieve = [True] * (N + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(N ** 0.5) + 1): if sieve[start]: for multiple in range(start * start, N + 1, start): sieve[multiple] = False distinct_primes = [num for num, is_prime in enumerate(sieve) if is_prime] return len(distinct_primes) def solve(test_cases): results = [] for N in test_cases: results.append(count_distinct_prime_factors(N)) return results"},{"question":"You are given a list of integers representing the amount of money in dollars each member of your team has contributed to a shared project. In addition, you are given a target amount that represents the total funding goal. Your task is to determine if the total amount contributed by the team meets or exceeds the target amount. Write a function that takes in two parameters: - An array of integers `contributions` representing the money each team member has contributed. - An integer `target` representing the funding goal. The function should return `True` if the total amount of contributions meets or exceeds the target, otherwise return `False`. # Example: ```python contributions = [50, 100, 25, 75] target = 200 # Total contributions: 50 + 100 + 25 + 75 = 250 # Since 250 >= 200, the function should return True contributions = [50, 50, 30] target = 150 # Total contributions: 50 + 50 + 30 = 130 # Since 130 < 150, the function should return False ``` # Note: You may assume that contributions and target are non-negative integers.","solution":"def meets_target(contributions, target): Returns True if the total amount of contributions meets or exceeds the target, otherwise returns False. Args: contributions (list of int): List of contributions by each team member. target (int): The funding goal. Returns: bool: True if total contributions >= target, otherwise False. total_contributions = sum(contributions) return total_contributions >= target"},{"question":"A company is maintaining a chain of stores and is concerned about inventory management. Each store has a certain number of items to be restocked daily, represented as an array. Due to limited resources, the company can perform restocking operations in a limited number of moves, where in each move, they can restock up to `k` items. The goal is to ensure each store has at least `x` items after all operations. You need to determine the minimum number of moves required for each store to achieve the target. If it\'s not possible to meet the requirement for a store, return -1 for that store. -----Input----- - The first line of input contains an integer `T` denoting the number of test cases. - Each test case consists of two lines: - The first line contains three integers `n`, `x`, and `k` — where `n` is the number of stores, `x` is the minimum required number of items, and `k` is the maximum number of items that can be restocked in each move. - The second line contains `n` integers separated by spaces, which represent the initial number of items in each store. -----Output----- For each test case, output a single line with `n` integers separated by spaces, where each integer represents the minimum number of moves required for the corresponding store, or -1 if it is not possible. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 100 - 0 ≤ x, k ≤ 10000 - 0 ≤ initial items in each store ≤ 10000 -----Example----- Input: 2 3 10 5 2 8 15 2 5 3 1 6 Output: 2 1 0 2 -1 -----Explanation----- Example case 1: - Store 1: Initially has 2 items, needs 10. Difference is 8. To achieve this with up to 5 items per move, it takes `ceil(8 / 5)` moves, which is 2 moves. - Store 2: Initially has 8 items, needs 10. Difference is 2. It takes `ceil(2 / 5)` moves, which is 1 move. - Store 3: Initially has 15 items, already meets requirement. No moves needed, hence 0. Example case 2: - Store 1: Initially has 1 item, needs 5. Difference is 4. To achieve this with up to 3 items per move, it takes `ceil(4 / 3)` moves, which is 2 moves. - Store 2: Initially has 6 items, and exceeds requirement. No moves needed, hence 0. - Store 3: Initially has 6 items, already meets requirement. No moves needed, hence 0.","solution":"import math def min_moves_to_restock(n, x, k, inventory): Calculates the minimum number of moves required for each store to ensure each store has at least x items after all operations or -1 if not possible. Parameters: n (int): Number of stores. x (int): Minimum required number of items. k (int): Maximum number of items that can be restocked in each move. inventory (list of int): Initial number of items in each store. Returns: list of int: Minimum number of moves required for each store or -1 if not possible. result = [] for items in inventory: if items >= x: result.append(0) else: required_items = x - items if required_items > 0 and k > 0: moves = math.ceil(required_items / k) result.append(moves) else: result.append(-1 if required_items > 0 else 0) return result"},{"question":"Write a function to analyze a string containing a sentence and perform certain modifications on the sentence based on a series of commands. Each command specifies a modification to be applied iteratively. COMMANDS AND THEIR FUNCTIONS: Upper N: Converts the first N words of the sentence to uppercase. For example, if the string is \\"hello world here I am\\" and the command is \\"Upper 3\\", the output should be \\"HELLO WORLD HERE I am\\". Lower N: Converts the last N words of the sentence to lowercase. For instance, if the string is \\"HELLO WORLD HERE I AM\\" and the command is \\"Lower 2\\", the output should be \\"HELLO WORLD HERE i am\\". Reverse N: Reverses the first N words in the sentence. For example, if the string is \\"one two three four five\\" and the command is \\"Reverse 3\\", the output should be \\"three two one four five\\". Your task is to create a program that reads an initial string and a sequence of commands, and then applies each command sequentially to the string. Input FORMAT The first line is a string representing the sentence. The second line contains an integer T, representing the number of commands. The following T lines each contain a command in the format described above. Output Format After processing each command, print the modified sentence. SAMPLE INPUT This is a simple sentence 3 Upper 2 Reverse 4 Lower 3 SAMPLE OUTPUT THIS IS a simple sentence simple a IS THIS sentence simple a is this sentence Note: Assume that words in the sentence are separated by a single space and that the number of words in the string is greater than or equal to the sum of all N values in the commands.","solution":"def modify_sentence(sentence, commands): Modifies the sentence based on the given commands. Each command is applied in sequence to the sentence. Parameters: sentence (str): The initial sentence to be modified. commands (list of str): The commands specifying modifications. Returns: str: The modified sentence. words = sentence.split() # Split the sentence into words. for command in commands: action, n = command.split() n = int(n) # Convert the number of words to be modified to an integer. if action == \\"Upper\\": for i in range(min(n, len(words))): words[i] = words[i].upper() elif action == \\"Lower\\": for i in range(max(0, len(words) - n), len(words)): words[i] = words[i].lower() elif action == \\"Reverse\\": words[:n] = reversed(words[:n]) return \' \'.join(words) # Join the modified words back into a sentence."},{"question":"Write a Python function `extract_integers` that takes a string and returns a list of integers extracted from the string. The function should adhere to the following rules: - It should only consider sequences of digits as valid integers. - It should handle negative integers (preceded by a `-` sign) correctly. - It should return the integers in the order they appear in the string. - If there are no integers in the string, the function should return an empty list. Example: - `extract_integers(\\"The temperatures are -3, -5, and -7 degrees.\\")` should return `[-3, -5, -7]`. - `extract_integers(\\"123 Main St.\\")` should return `[123]`. - `extract_integers(\\"No numbers here!\\")` should return `[]`.","solution":"import re def extract_integers(s): Extracts and returns a list of integers from the given string. Parameters: s (str): The input string. Returns: List[int]: A list of integers extracted from the string. pattern = r\'-?d+\' matches = re.findall(pattern, s) return [int(match) for match in matches]"},{"question":"You are given a list of integers representing the heights of trees in a forest. Your task is to find the largest set of trees with heights that are either strictly increasing or strictly decreasing. Input: The first line contains an integer n (1 ≤ n ≤ 500), the number of trees. The second line contains n space-separated integers representing the heights of the trees h1, h2, ..., hn (1 ≤ hi ≤ 1000). Output: Print a single integer representing the largest set of trees with strictly increasing or strictly decreasing heights. Examples Input 6 10 20 10 30 25 40 Output 4 Note In the given example, one of the largest sets with strictly increasing or strictly decreasing heights is: 10, 20, 30, 40.","solution":"def longest_increasing_or_decreasing_subsequence(n, heights): Returns the length of the longest subsequence of trees with heights that are either strictly increasing or strictly decreasing. if n == 0: return 0 # Initialize arrays to store the length of longest increasing and decreasing subsequences increasing = [1] * n decreasing = [1] * n # Compute the longest increasing subsequence for i in range(1, n): for j in range(0, i): if heights[i] > heights[j] and increasing[i] < increasing[j] + 1: increasing[i] = increasing[j] + 1 # Compute the longest decreasing subsequence for i in range(1, n): for j in range(0, i): if heights[i] < heights[j] and decreasing[i] < decreasing[j] + 1: decreasing[i] = decreasing[j] + 1 # Find the maximum length among increasing and decreasing subsequences max_length = max(max(increasing), max(decreasing)) return max_length"},{"question":"You are given a list of `n` integers. You have to determine if there exists a pair of distinct integers in the list such that their sum is equal to a given integer `k`. Write a function that returns `True` if such a pair exists, and `False` otherwise. Constraints 2 leq n leq 10^5 -10^9 leq text{Any integer in the input} leq 10^9 Input Format - The first line contains two integers `n` and `k` separated by a space. - The second line contains `n` integers, the elements of the list. Output Format Output a single line, `True` or `False`, depending on whether such a pair exists. Sample Input 5 9 1 3 5 7 8 Sample Output True Explanation In this case, the pair `(1, 8)` sums up to `9`, which is equal to `k`. Hence, the output is `True`. Sample Input 4 10 1 2 3 4 Sample Output False Explanation In this case, there are no pairs of distinct integers in the list that sum up to `10`. Hence, the output is `False`.","solution":"def has_pair_with_sum(n, k, arr): Determines if there exists a pair of distinct integers in the list such that their sum is equal to k. Args: n (int): Number of integers in the list. k (int): Target sum. arr (list): List of integers. Returns: bool: True if such a pair exists, False otherwise. seen = set() for num in arr: if k - num in seen: return True seen.add(num) return False"},{"question":"There\'s a popular notion that suggests mixing various colors will always lead to one unique color. However, in the world of coding, the mixture can yield multiple results based on different conditions. Let\'s leverage this idea to explore some programming concepts. -----Input----- The input consists of two lists: - The first list represents a set of base colors. Each color will be represented by a string of lowercase letters and will be unique within this list. - The second list represents a series of mixing instructions. Each mixing instruction is a string in the format \\"color1+color2=mixedColor\\" without spaces. \\"color1\\" and \\"color2\\" are always present in the base colors list, and \\"mixedColor\\" is the resulting color. Mixing instructions might create color duplicates. The input will be provided as multiple lines: - The first line contains all the base colors separated by spaces. - The following lines contain the mixing instructions, each on a new line. - The input ends with a line containing a single \\"*\\" character which should not be processed. -----Output----- The task is to output the resulting set of colors after all mixing instructions are applied. If a color is the result of multiple different mixing instructions, include it only once. Output each resulting color on a new line in the order they were first produced. -----Examples----- Sample Input: red blue yellow red+blue=purple blue+yellow=green red+yellow=orange black+white=gray purple+green=brown blue+yellow=lime * Sample Output: purple green orange brown lime","solution":"def mix_colors(base_colors, mixing_instructions): Returns the resulting set of colors after mixing the base colors according to the provided instructions. resulting_colors = [] seen_colors = set() for instruction in mixing_instructions: color1, rest = instruction.split(\'+\') color2, mixedColor = rest.split(\'=\') if mixedColor not in seen_colors: resulting_colors.append(mixedColor) seen_colors.add(mixedColor) return resulting_colors def process_input(input_lines): base_colors = input_lines[0].split() mixing_instructions = [] for line in input_lines[1:]: if line == \'*\': break mixing_instructions.append(line) return base_colors, mixing_instructions"},{"question":"You have been given a special keyboard with a single button and a display that can show a sequence of different lowercase letters. When you press the button, the keyboard performs one of the following operations: 1. Add a new lowercase letter to the end of the current sequence. 2. Replace the last letter of the current sequence with a new lowercase letter. For example, if the current sequence is \'ab\', the button press might change it to \'abc\' or \'aac\'. Given an initial sequence and a desired final sequence, determine the minimum number of button presses required to transform the initial sequence into the final sequence using only the allowed operations. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains two non-empty strings s and f (1 ≤ |s|, |f| ≤ 1000) — the initial and final sequences, respectively. Output Print t lines, each containing an answer for the corresponding test case — the minimum number of button presses required to transform the initial sequence into the final sequence. Examples Input 3 ab abc abc abcd ab ac Output 1 1 1 Note In the first sample, you can press the button once to add \'c\' to the end of \'ab\', resulting in \'abc\'. In the second sample, you can press the button once to add \'d\' to the end of \'abc\', resulting in \'abcd\'. In the third sample, you can press the button once to replace \'b\' with \'c\', transforming \'ab\' into \'ac\'. If replacing the last character seems optimal here given the transformation, however, it should get the single transformation count.","solution":"def min_button_presses(t, cases): Determines the minimum number of button presses required to transform the initial sequence into the final sequence for multiple test cases. :param t: The number of test cases :param cases: List of tuples where each tuple contains two strings (initial_str, final_str) :return: List of integers representing the minimum number of button presses for each test case results = [] for s, f in cases: len_s = len(s) len_f = len(f) # Find the point where the sequences differ i = 0 while i < min(len_s, len_f) and s[i] == f[i]: i += 1 if i == len_s and i == len_f: # Both sequences are already equal results.append(0) elif i == len_s: # All characters of `s` are part of `f` at the beginning results.append(len_f - len_s) else: # Replace the remaining characters of `s` to match `f` results.append(max(len_s, len_f) - i) return results"},{"question":"You are given an array of integers and you need to find the smallest positive integer that is not present in the array. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000000) which is the number of elements in the array. The second line contains n integers where each integer ai (|ai| ≤ 1000000) represents the elements of the array. Output Print one line containing the smallest positive integer that is not present in the array. Examples Input 5 1 3 6 4 1 2 Output 5 Input 3 -1 -3 -2 Output 1","solution":"def smallest_missing_positive_integer(arr): Finds the smallest positive integer that is not present in the array. Parameters: arr (list of int): The input array of integers. Returns: int: The smallest positive integer not present in the array. n = len(arr) present = [False] * (n + 1) # Mark present numbers for num in arr: if 1 <= num <= n: present[num] = True # Find the first missing number for i in range(1, n + 1): if not present[i]: return i return n + 1"},{"question":"Write a function that takes an integer `n` and generates an `n x n` spiral matrix. The spiral matrix is populated with the numbers from `1` to `n^2` in a clockwise direction starting from the top-left corner. For example: ``` generateSpiralMatrix(3) ``` Output: ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] generateSpiralMatrix(4) ``` Output: ``` [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ``` More examples in the test cases. Note: - You may assume that the input `n` will be a positive integer. Good luck!","solution":"def generateSpiralMatrix(n): Generates an n x n spiral matrix. if n <= 0: return [] # Initialize the matrix with zeros matrix = [[0] * n for _ in range(n)] # Starting positions for the layer left, right, top, bottom = 0, n-1, 0, n-1 num = 1 while left <= right and top <= bottom: # Fill top row for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Fill right column for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # Fill bottom row if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # Fill left column if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"In a distant galaxy, there exists a tree-like hierarchy of planets, where each planet governs a set of subordinate planets. Planets are connected by wormholes and the entire structure forms a tree rooted at Planet 1. Each wormhole has a direction, pointing from the parent planet to a subordinate planet. The supreme leader of the galaxy wants to ensure smooth governance and has given you the task to analyze the planetary hierarchy. Your task is to find the length of the path (number of wormholes) from the root planet (Planet 1) to its farthest planet. The planets are numbered from 1 to N and there are N-1 directional wormholes connecting them. Input Format: - The first line of input contains a single integer N, the number of planets. - Each of the next N-1 lines contains two space-separated integers u and v, denoting a directional wormhole from planet u to planet v. Output Format: - Output a single integer, the length of the longest path from Planet 1 to any other planet. Constraints: 1 ≤ N ≤ 100,000 1 ≤ u, v ≤ N SAMPLE INPUT 4 1 2 1 3 2 4 SAMPLE OUTPUT 2 Explanation The tree can be visualized as: ``` 1 / 2 3 | 4 ``` The longest path from Planet 1 is to Planet 4, and it traverses 2 wormholes: 1 -> 2 -> 4. Hence, the output is 2.","solution":"def longest_path_in_tree(N, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Function to perform BFS and return the farthest node and its distance def bfs(start): queue = deque([(start, 0)]) visited = set([start]) farthest_node, max_distance = start, 0 while queue: current, distance = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) if distance + 1 > max_distance: farthest_node, max_distance = neighbor, distance + 1 return farthest_node, max_distance # Starting from the root (planet 1) _, max_distance = bfs(1) return max_distance"},{"question":"Given an integer array of size N and an integer K, determine if there exists a pair of elements in the array whose absolute difference is exactly K. If such a pair exists, return \\"YES\\", otherwise return \\"NO\\". Constraints 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^9 1 ≤ Array elements ≤ 10^9 SAMPLE INPUT 5 3 1 5 3 4 2 SAMPLE OUTPUT YES","solution":"def find_pair_with_difference(arr, k): Determines if there exists a pair of elements in the array whose absolute difference is exactly K. :param arr: List of integers :param k: Integer :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\" elements = set(arr) for num in arr: if (num + k) in elements or (num - k) in elements: return \\"YES\\" return \\"NO\\""},{"question":"In a given list of integers, a pair (i, j) is considered elegant if the sum of elements at positions i and j is even. Two elements are considered positioned at different indices i and j (0 ≤ i < j < n). Your task is to find the number of elegant pairs in the provided list of integers. -----Input----- The first line contains an integer t (1 le t le 20), denoting the number of test cases. Each test case starts with an integer n (1 le n le 200) — the size of the list followed by n integers representing the elements of the list. Each element is an integer between 1 and 1000, inclusive. -----Output----- For each test case, print one integer – the count of elegant pairs in the list. -----Example----- Input 2 5 2 4 6 1 3 4 1 2 3 4 Output 4 2","solution":"def count_elegant_pairs(test_cases): Returns a list of counts of elegant pairs for each test case. Arguments: test_cases : list of dict : each dict has keys \'n\' and \'arr\' n : int : size of the list arr : list of int : the elements of the list Returns: list of int : counts of elegant pairs for each test case results = [] for case in test_cases: n = case[\'n\'] arr = case[\'arr\'] # Separate even and odd elements counts even_count = sum(1 for x in arr if x % 2 == 0) odd_count = n - even_count # Elegant pairs are combination of two even elements or two odd elements elegant_pairs = (even_count * (even_count - 1) // 2) + (odd_count * (odd_count - 1) // 2) results.append(elegant_pairs) return results def parse_input(data): Parses input data and returns structured test cases. Arguments: data : str : input data as a single string Returns: list of dict : each dict has keys \'n\' (size of the list) and \'arr\' (list of integers) lines = data.split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append({\'n\': n, \'arr\': arr}) index += 2 return test_cases def process_output(results): Formats results for printing. Arguments: results : list of int : results for each test case Returns: str : formatted output as a single string with each result in new line return \'n\'.join(map(str, results)) # Driver function to handle the input and output def main(data): test_cases = parse_input(data) results = count_elegant_pairs(test_cases) output = process_output(results) return output"},{"question":"Jonah has a peculiar collection of alien artifacts. Each artifact is uniquely numbered and has a certain \\"energy level\\" associated with it. However, the energy levels of these artifacts are bizarrely intermingled, and Jonah wants to figure out the order in which the energy levels will surge during an alien ritual. The surges in energy occur in an alternating high-low pattern: starting with the highest remaining energy level, followed by the lowest remaining energy level, then the second highest, then the second lowest, and so on. Your task is to help Jonah determine the exact sequence of energy level surges. Once the sequence is determined, he also wants to know the positions of these artifacts in the original list after their energies have surged. -------Input------- The first line contains an integer N (1 leq N leq 1000), the number of artifacts in Jonah\'s collection. The second line contains N space-separated integers, E_1, E_2, ..., E_N, representing the energy levels of the artifacts. -------Output------- The first line should contain the energy levels of the artifacts in the order they will surge. The second line should contain the positions (1-based index) of these artifacts in the original list as per the surged energy order. -----Examples----- Sample Input 1: 6 3 1 4 1 5 9 Sample Output 1: 9 1 5 1 4 3 6 2 5 4 3 1 Sample Input 2: 5 10 20 30 40 50 Sample Output 2: 50 10 40 20 30 5 1 4 2 3","solution":"def surging_energy_order(n, energies): Returns the surging order of energy levels and their original positions. Parameters: - n: int - number of artifacts - energies: list[int] - list of energy levels of the artifacts Returns: - surging_energies: list[int] - list of energy levels in surging order - surging_positions: list[int] - list of original positions of the energies in surging order indexed_energies = list(enumerate(energies, start=1)) indexed_energies.sort(key=lambda x: x[1]) left, right = 0, n - 1 surging_energies = [] surging_positions = [] while left <= right: if right >= left: surging_energies.append(indexed_energies[right][1]) surging_positions.append(indexed_energies[right][0]) right -= 1 if left <= right: surging_energies.append(indexed_energies[left][1]) surging_positions.append(indexed_energies[left][0]) left += 1 return surging_energies, surging_positions"},{"question":"A company has decided to revamp its internal communication platform and make some changes to its chat system. The system consists of multiple chat rooms, each identified by an integer id. Employees can join multiple chat rooms and each chat room tracks activity based on the last active timestamp of any user in that room. You need to develop a function that, given the list of chat rooms an employee is part of along with the last active timestamp in each chat room, identifies and returns the chat room with the earliest (oldest) last active timestamp. The timestamp is represented as a Unix timestamp which is the number of seconds that have elapsed since the Unix epoch, which is 00:00:00 UTC on 1 January 1970. -----Input----- - The first line contains one integer N, the number of chat rooms the employee is part of. - The next N lines each contain two space-separated integers, ci (the chat room id) and ti (the last active timestamp for that chat room). -----Output----- Output the id of the chat room with the earliest last active timestamp. In case of ties, output the smallest chat room id among the tied ones. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ ci ≤ 10^9 - 1 ≤ ti ≤ 10^18 -----Example----- Input: 3 101 1610000000 102 1610005000 103 1609999999 Output: 103 Explanation: The chat rooms and their last active timestamps are as follows: - Chat room 101: last active at 1610000000 - Chat room 102: last active at 1610005000 - Chat room 103: last active at 1609999999 Chat room 103 has the earliest last active timestamp. Hence, the output is 103.","solution":"def earliest_chat_room(chat_rooms): Returns the chat room id with the earliest last active timestamp. In case of ties, returns the smallest chat room id among the tied ones. Args: chat_rooms (list of tuples): a list where each tuple contains two integers, ci (chat room id) and ti (last active timestamp). Returns: int: the chat room id with the earliest last active timestamp. # Initialize variables to store the smallest timestamp and the corresponding chat room id smallest_timestamp = float(\'inf\') smallest_id = float(\'inf\') # Iterate over each chat room for chat_id, timestamp in chat_rooms: # Compare the current timestamp and chat room id with the smallest ones found so far if (timestamp < smallest_timestamp) or (timestamp == smallest_timestamp and chat_id < smallest_id): smallest_timestamp = timestamp smallest_id = chat_id return smallest_id def find_earliest_chat_room(N, chat_room_data): return earliest_chat_room(chat_room_data)"},{"question":"Problem Statement In many applications, we often need to manipulate and merge arrays based on specific criteria. One common operation is to merge two sorted arrays into one sorted array. This forms the basis for more complex operations like merge sort. Your task is to implement a function that takes two sorted arrays of integers and merges them into a single sorted array. # Requirements: - You need to write a function `mergeSortedArrays(arr1, arr2)` that: - Takes two sorted arrays of integers `arr1` and `arr2` as input. - Returns a single sorted array that contains all the elements of `arr1` and `arr2`. # Constraints: - All elements in the input arrays are integers. - The arrays may be of different lengths. - The arrays may include negative integers and duplicates. - You may not use any built-in sort functions for this task. - Try to achieve this with a time complexity of O(n). # Example: ```python Input: arr1 = [1, 3, 5], arr2 = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6] Input: arr1 = [0, 9, 10], arr2 = [-1, 3, 7, 8] Output: [-1, 0, 3, 7, 8, 9, 10] Input: arr1 = [5, 10, 15], arr2 = [1, 5, 7] Output: [1, 5, 5, 7, 10, 15] ``` # Function Signature: ```python def mergeSortedArrays(arr1: List[int], arr2: List[int]) -> List[int]: # Your code here ``` # Notes: - Focus on merging rather than sorting so as to optimize the solution for the merge operation. - Think about the common algorithmic paradigms that involve merging two sorted arrays. - Write efficient and clean code that correctly handles edge cases such as empty arrays and arrays with identical values.","solution":"def mergeSortedArrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: - arr1: List[int], first sorted array of integers - arr2: List[int], second sorted array of integers Returns: - List[int]: a single merged and sorted array consisting of all elements from arr1 and arr2 merged_array = [] i, j = 0, 0 # Traverse both arrays and put the smallest element into merged_array while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1, add them to merged_array while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2, add them to merged_array while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given a string `s` consisting of lowercase and uppercase letters. You are required to convert the string into a \\"beautiful\\" string. A \\"beautiful\\" string is defined as a string in which no two adjacent characters are the same. To convert the string into a \\"beautiful\\" one, you are allowed to replace any character in the string with any other lowercase or uppercase letter. What is the minimum number of replacements needed to make the string beautiful? Input The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 10000). Output Output the minimum number of replacements needed to make the string beautiful. Examples Input aabb Output 2 Input aAaAaA Output 0","solution":"def make_beautiful(s: str) -> int: This function takes a string s and returns the minimum number of replacements needed to convert the string into a \\"beautiful\\" string, where no two adjacent characters are the same. replacements = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: replacements += 1 return replacements"},{"question":"You are given an encoded string which represents a series of instructions for a robot. Each instruction consists of a direction (\'N\' for north, \'S\' for south, \'E\' for east, \'W\' for west) and a number which indicates how many steps the robot should move in that direction. For example, the string \\"E2N1W1S3\\" can be interpreted as follows: - Move east 2 steps - Move north 1 step - Move west 1 step - Move south 3 steps Your task is to decode the string and determine the final coordinates of the robot starting from the origin point (0, 0). Write a function `robot_position(instructions)` that takes a string of instructions and returns a tuple (x, y) representing the final coordinates. Example: ``` robot_position(\\"E2N1W1S3\\") -> (1, -2) ``` Explanation: - Initial position: (0, 0) - Move east 2 steps: (2, 0) - Move north 1 step: (2, 1) - Move west 1 step: (1, 1) - Move south 3 steps: (1, -2) Create a function that decodes the instructions and calculates the robot\'s final position.","solution":"def robot_position(instructions): Decodes the instructions and calculates the robot\'s final position. Parameters: instructions (str): The encoded string with direction and steps. Returns: tuple: The final coordinates (x, y). x, y = 0, 0 i = 0 while i < len(instructions): direction = instructions[i] i += 1 steps = 0 while i < len(instructions) and instructions[i].isdigit(): steps = steps * 10 + int(instructions[i]) i += 1 if direction == \'N\': y += steps elif direction == \'S\': y -= steps elif direction == \'E\': x += steps elif direction == \'W\': x -= steps return (x, y)"},{"question":"Problem Statement: Nina owns a beautiful garden with N flowers planted in a row. Each flower has a certain height hi. In spring, she wants to water them in such a way that the height of each flower increases. Nina can water any number of continuous flowers in a row. However, she has a restriction that she can water each flower only once. Nina wants to find the maximum number of flowers that can have strictly increasing heights after watering them exactly once. If there are multiple ways to achieve this with the same number of flowers, she wants to know the minimum number of watering operations needed. Help Nina determine the maximum number of flowers that can have strictly increasing heights, along with the minimum number of watering operations required to achieve this. # Input - The first line contains a positive integer N - the total number of flowers. - The second line contains N space-separated integers hi - the height of each flower. # Output - Print two space-separated values: The maximum number of flowers that can have strictly increasing heights and the minimum number of watering operations required to achieve this. # Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ hi ≤ 10^9 # SAMPLE INPUT 7 2 3 5 1 4 6 7 # SAMPLE OUTPUT 5 2 # Explanation One possible way to achieve the heights in strictly increasing order is by watering: - The sequence [2, 3, 5] - The sequence [1, 4, 6, 7] Thus, Nina can have a maximum of 5 flowers in strictly increasing order with 2 watering operations.","solution":"def max_flowers_increasing_heights(N, heights): def lis_length_and_segments(nums): if not nums: return 0, 0 tails = [] for num in nums: pos = binary_search(tails, num) if pos == len(tails): tails.append(num) else: tails[pos] = num return len(tails) def binary_search(tails, num): low, high = 0, len(tails) while low < high: mid = (low + high) // 2 if tails[mid] < num: low = mid + 1 else: high = mid return low lis_end_here = [0] * N longest_increasing_subsequence = [] for i in range(N): lis_end_here[i] = lis_length_and_segments(heights[:i+1]) longest_increasing_subsequence.append((lis_end_here[i], heights[i])) max_length = max(lis_end_here) watering_operations = 1 current_max = longest_increasing_subsequence[0][1] for i in range(1, N): if longest_increasing_subsequence[i][1] <= current_max: watering_operations += 1 current_max = longest_increasing_subsequence[i][1] return max_length, watering_operations"},{"question":"Three input numbers, A, B, and C, represent the lengths of the sides of a triangle. Determine if the triangle is valid based on these sides. A triangle is valid if the sum of any two sides is greater than the third side. Write a program that will check whether the given sides can form a valid triangle or not. -----Constraints----- - 1 ≦ A, B, C ≦ 100 -----Input----- The input is given from Standard Input in the following format: A B C -----Output----- If a triangle with the given sides is valid, print Yes. Otherwise, print No. -----Sample Input----- 3 4 5 -----Sample Output----- Yes Since 3 + 4 > 5, 3 + 5 > 4, and 4 + 5 > 3, a triangle with sides 3, 4, and 5 is valid.","solution":"def is_valid_triangle(A, B, C): Determines if the sides A, B, and C can form a valid triangle. A triangle is valid if the sum of any two sides is greater than the third side. if A + B > C and A + C > B and B + C > A: return \\"Yes\\" else: return \\"No\\""},{"question":"Lisa has a bracket sequence consisting of the characters \'(\' and \')\'. However, Lisa is not sure if her bracket sequence is valid. A valid bracket sequence is defined as follows: - An empty string is a valid bracket sequence. - If \'S\' is a valid bracket sequence, then \'(\' + \'S\' + \')\' is also a valid bracket sequence. - If \'S\' and \'T\' are valid bracket sequences, then their concatenation \'S\' + \'T\' is also a valid bracket sequence. Lisa wants to convert her invalid bracket sequence into a valid one. To do this, she can only insert additional \'(\' or \')\' characters into any positions of the original sequence. She cannot delete or alter any existing characters. Your task is to determine the minimum number of characters Lisa needs to insert to make the bracket sequence valid. -----Input----- The input consists of a single line containing a string s (1 le |s| le 200,000) representing Lisa\'s bracket sequence. The string contains only the characters \'(\' and \')\'. -----Output----- Output a single integer indicating the minimum number of characters that need to be inserted to make the bracket sequence valid. -----Examples----- Input (()) Output 0 Input ))( Output 4 Input (()())(()(() Output 3 -----Note----- In the first example, the sequence is already valid, so no characters need to be inserted. In the second example, adding two \'(\' at the beginning and two \')\' at the end results in the valid sequence \'(((()))\'. In the third example, adding one \')\' after the first \'(()())\', another \')\' after the second \'(()\' and one more \')\' at the end makes the sequence valid.","solution":"def min_insertions_to_make_valid(s): Returns the minimum number of insertions needed to make the bracket sequence valid. left_balance = 0 # Tracks excessive \'(\' needed to be closed right_balance = 0 # Tracks excessive \')\' needed to be opened for char in s: if char == \'(\': left_balance += 1 else: # char == \')\' if left_balance > 0: left_balance -= 1 else: right_balance += 1 # Total insertions needed is the sum of excessive \'(\' and \')\' return left_balance + right_balance"},{"question":"In a certain city, the traffic lights are programmed in such a way that they follow a specific pattern to control the flow of traffic. Each traffic light has a countdown timer that indicates how many seconds remain before the light changes. The lights can be green, yellow, or red. The sequence of lights is as follows: a green light becomes yellow, a yellow light becomes red, and a red light becomes green. The duration of each color is different: green lasts for G seconds, yellow for Y seconds, and red for R seconds. Your task is to determine the color of a specific traffic light at a given time T seconds after they all turned green simultaneously. -----Input----- The first line contains a single integer T, the number of queries. T queries follow. Each query consists of four integers: G, Y, R, and T. - G: The duration of the green light in seconds. - Y: The duration of the yellow light in seconds. - R: The duration of the red light in seconds. - T: The number of seconds after the lights turned green. -----Output----- For each query, output a single line containing the color of the traffic light at time T. The color should be one of \\"green\\", \\"yellow\\", or \\"red\\". -----Example----- Input: 3 5 3 2 7 10 5 7 24 6 4 5 10 Output: yellow green red -----Constraints----- - 1 <= T <= 100 - 1 <= G, Y, R <= 50","solution":"def traffic_light_color(G, Y, R, T): Determines the color of the traffic light at time T seconds after they all turned green. Parameters: G (int): Duration of the green light in seconds. Y (int): Duration of the yellow light in seconds. R (int): Duration of the red light in seconds. T (int): The number of seconds after the lights turned green. Returns: str: The color of the traffic light (\\"green\\", \\"yellow\\", or \\"red\\"). cycle_duration = G + Y + R t_in_cycle = T % cycle_duration if t_in_cycle < G: return \\"green\\" elif t_in_cycle < G + Y: return \\"yellow\\" else: return \\"red\\" # Reading input from stdin and processing each query def process_queries(queries): results = [] for query in queries: G, Y, R, T = query results.append(traffic_light_color(G, Y, R, T)) return results"},{"question":"Trees are fundamental data structures that support various operations such as insert, delete, and traversal. An AVL tree is a self-balancing binary search tree where the height of the two child subtrees of any node differs by at most one. If at any time the height difference becomes more than one, rebalancing is done to restore this property. The height of an AVL tree is defined as the length of the path from the root to the deepest leaf. In order to maintain balance after insertion or deletion, AVL trees perform rotations: there are four types of rotations - left rotation, right rotation, left-right rotation, and right-left rotation. The following operations and properties are implemented in an AVL tree: - **Insert**: Insert a new node in the AVL tree and perform necessary rotations to maintain the balance factor. - **Delete**: Remove a node from the AVL tree and perform necessary rotations to maintain the balance factor. - **Inorder traversal**: Retrieve the nodes of the tree in non-decreasing order. The AVL tree is to be represented by a linked data structure where each node has a key, height, left, and right pointer. Write a program that can perform the following operations on an AVL tree: - `insert k`: Insert a node with the given key `k` into the AVL tree. - `delete k`: Delete a node with the given key `k` from the AVL tree. - `inorder`: Print the keys of the nodes in the AVL tree in non-decreasing order. Constraints: - The number of operations ≤ 100,000 - The number of `inorder` operations ≤ 100. - `-10^9 ≤ key ≤ 10^9` - All the keys in the AVL tree are unique. Input: - The first line contains the number of operations `m`. - The next `m` lines contain operations represented by `insert k`, `delete k`, or `inorder`. Output: - For each `inorder` operation, print the keys of the AVL tree nodes in non-decreasing order in a single line, separated by a space. Example Input: ``` 7 insert 50 insert 30 insert 70 insert 20 insert 40 inorder delete 30 inorder ``` Output: ``` 20 30 40 50 70 20 40 50 70 ```","solution":"class TreeNode: def __init__(self, key): self.key = key self.height = 1 self.left = None self.right = None class AVLTree: def insert(self, root, key): if not root: return TreeNode(key) if key < root.key: root.left = self.insert(root.left, key) else: root.right = self.insert(root.right, key) root.height = 1 + max(self.get_height(root.left), self.get_height(root.right)) balance = self.get_balance(root) if balance > 1 and key < root.left.key: return self.right_rotate(root) if balance < -1 and key > root.right.key: return self.left_rotate(root) if balance > 1 and key > root.left.key: root.left = self.left_rotate(root.left) return self.right_rotate(root) if balance < -1 and key < root.right.key: root.right = self.right_rotate(root.right) return self.left_rotate(root) return root def delete(self, root, key): if not root: return root if key < root.key: root.left = self.delete(root.left, key) elif key > root.key: root.right = self.delete(root.right, key) else: if not root.left: return root.right elif not root.right: return root.left min_larger_node = self.get_min_value_node(root.right) root.key = min_larger_node.key root.right = self.delete(root.right, min_larger_node.key) if not root: return root root.height = 1 + max(self.get_height(root.left), self.get_height(root.right)) balance = self.get_balance(root) if balance > 1 and self.get_balance(root.left) >= 0: return self.right_rotate(root) if balance > 1 and self.get_balance(root.left) < 0: root.left = self.left_rotate(root.left) return self.right_rotate(root) if balance < -1 and self.get_balance(root.right) <= 0: return self.left_rotate(root) if balance < -1 and self.get_balance(root.right) > 0: root.right = self.right_rotate(root.right) return self.left_rotate(root) return root def inorder_traversal(self, root): result = [] self._inorder_traversal(root, result) return result def _inorder_traversal(self, root, result): if root: self._inorder_traversal(root.left, result) result.append(root.key) self._inorder_traversal(root.right, result) def left_rotate(self, z): y = z.right T2 = y.left y.left = z z.right = T2 z.height = 1 + max(self.get_height(z.left), self.get_height(z.right)) y.height = 1 + max(self.get_height(y.left), self.get_height(y.right)) return y def right_rotate(self, z): y = z.left T3 = y.right y.right = z z.left = T3 z.height = 1 + max(self.get_height(z.left), self.get_height(z.right)) y.height = 1 + max(self.get_height(y.left), self.get_height(y.right)) return y def get_height(self, root): if not root: return 0 return root.height def get_balance(self, root): if not root: return 0 return self.get_height(root.left) - self.get_height(root.right) def get_min_value_node(self, root): if root is None or root.left is None: return root return self.get_min_value_node(root.left)"},{"question":"In a fantasy land, there are n cities connected by m two-way roads. Each road connects two different cities and has a certain length in miles. The king of this land arranges a grand festival in one of the cities and wants citizens from all other cities to travel to the festival city with the least distance traveled. Additionally, given that roads often get damaged and repaired, the king is only interested in paths that do not exceed a certain distance d miles. For each pair of cities, your task is to find the shortest path distance between them that does not exceed d miles. If there\'s no such path, return -1 for that pair. Input The first line contains three integers n, m, and d (2 ≤ n ≤ 100; 1 ≤ m ≤ 1000; 1 ≤ d ≤ 10^4) — the number of cities, the number of roads, and the maximum allowed path distance, respectively. Each of the next m lines contains three integers u, v, and l (1 ≤ u, v ≤ n; u ≠ v; 1 ≤ l ≤ 10^4) — the information about the road from city u to city v and its length l miles. There will never be more than one road directly connecting the same pair of cities. The next line contains an integer q (1 ≤ q ≤ 10000) – the number of queries. The next q lines each contain two integers a and b (1 ≤ a, b ≤ n; a ≠ b) — the two cities for each query. Output For each query, print the distance of the shortest path from city a to city b that does not exceed d miles. If there\'s no such path, print -1. Examples Input 4 5 6 1 2 2 2 3 2 3 4 2 4 1 2 1 3 6 3 1 3 1 4 2 4 Output 4 2 4 Input 3 2 3 1 2 2 2 3 2 2 1 3 3 1 Output -1 -1 Note In the first example, the shortest path distances which do not exceed the allowed distance of 6 miles are: - From city 1 to city 3: 1 → 2 → 3 (distance = 4 miles) - From city 1 to city 4: 1 → 4 (distance = 2 miles) - From city 2 to city 4: 2 → 3 → 4 (distance = 4 miles) In the second example: - From city 1 to city 3: No path with a total distance of 3 miles or less. - From city 3 to city 1: No path with a total distance of 3 miles or less.","solution":"import heapq from collections import defaultdict def dijkstra(n, graph, start): Perform Dijkstra\'s algorithm to find shortest paths from a start node. distances = [float(\'inf\')] * n distances[start] = 0 pq = [(0, start)] heapq.heapify(pq) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def find_shortest_paths(n, m, d, roads, queries): graph = defaultdict(list) for u, v, l in roads: graph[u - 1].append((v - 1, l)) graph[v - 1].append((u - 1, l)) all_distances = [] for i in range(n): all_distances.append(dijkstra(n, graph, i)) results = [] for a, b in queries: if all_distances[a - 1][b - 1] <= d: results.append(all_distances[a - 1][b - 1]) else: results.append(-1) return results"},{"question":"In the land of Bitlandia, there is a beautiful garden of flowers arranged in a single row. Each flower can either be in full bloom (\'F\') or wilted (\'W\'). The gardener of Bitlandia has a special tool that can change the state of any flower from \'F\' to \'W\' or from \'W\' to \'F\'. The gardener wants to perform operations to maximize the number of fully bloomed flowers in the garden. The tool can be used multiple times, but there\'s a catch: each time the tool is used, it can only change the state of a contiguous segment of flowers at a time. Given the initial state of the flowers, determine the maximum number of fully bloomed flowers that can be achieved using the tool any number of times. -----Input----- - The first line of input contains a single integer T — the number of test cases. - Each of the next T lines contains a single string S, where each character is either \'F\' (fully bloomed) or \'W\' (wilted). This string represents the initial state of flowers in the garden. -----Output----- - For each test case, output a single line containing a single integer — the maximum number of fully bloomed flowers that can be achieved. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 10^5 -----Example----- Input: 3 FWFWF FFF WW Output: 5 3 2 -----Explanation----- Example case 1. The gardener can use the tool to change: - The entire string in one operation, resulting in \\"WWWWW\\" - The flower at positions 2 and 4 to get \\"FFFFF\\", thus all flowers are in full bloom. Example case 2. All the flowers are already fully bloomed. Example case 3. The gardener should use the tool to change the entire string, turning all to \'F\'.","solution":"def maximize_blooms(T, test_cases): Given the number of test cases T, and a list of strings representing the initial state of flowers, determine the maximum number of fully bloomed flowers that can be achieved for each test case. results = [] for S in test_cases: # Max blooming will be the length of the string as we can always flip the whole string. results.append(len(S)) return results"},{"question":"The task is to write a function that reorganizes a string such that no two adjacent characters are the same. If it is not possible to reorganize the string, return an empty string. -----Input----- The input is a single string s consisting of lowercase English letters. (1 ≤ |s| ≤ 10^4) -----Output----- Return the reorganized string if possible. Otherwise, return an empty string. -----Examples----- Input aab Output aba Input aaab Output \\"\\"","solution":"import heapq from collections import Counter def reorganize_string(s): Reorganizes the string such that no two adjacent characters are the same. If it is not possible, returns an empty string. count = Counter(s) max_heap = [(-value, key) for key, value in count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: current_count, current_char = heapq.heappop(max_heap) result.append(current_char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = current_count + 1, current_char result_string = \'\'.join(result) if len(result_string) != len(s): return \\"\\" return result_string"},{"question":"Alex is learning about data structures and especially interested in binary trees. After studying the theory, he decided to implement binary search trees (BST) and test their properties. A binary search tree is a binary tree where each node has a key greater than all the keys in its left subtree and less than or equal to all the keys in its right subtree. To practice his programming skills, Alex wants to calculate the sum of all values stored in a BST for several test cases. Given a sequence of unique integers, Alex must construct a BST and compute the sum of all the keys in the tree. Please help Alex in achieving this task. -----Input----- The first line contains an integer t (1 leq t leq 100) — the number of test cases to solve. Each test case consists of two lines. The first line contains an integer n (1 leq n leq 1000) — the number of elements in the sequence. The second line contains n unique integers, separated by space, representing the sequence of the elements to be inserted into the BST. -----Output----- For each test case, print a single integer — the sum of all values stored in the constructed BST. -----Examples----- Input 2 5 10 20 30 40 50 3 5 3 8 Output 150 16 -----Note----- Explanation for the first example: The BST constructed from the sequence [10, 20, 30, 40, 50] will result in a linear chain (a right-skewed tree) since each element is greater than the previous one. The sum of the values in the tree is 10 + 20 + 30 + 40 + 50 = 150. Explanation for the second example: The BST constructed from the sequence [5, 3, 8] will have 5 as the root, 3 as the left child of 5, and 8 as the right child of 5. The sum of the values in the tree is 5 + 3 + 8 = 16.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): if root is None: return TreeNode(key) if key < root.val: root.left = insert(root.left, key) else: root.right = insert(root.right, key) return root def sum_bst(root): if root is None: return 0 return root.val + sum_bst(root.left) + sum_bst(root.right) def calculate_sums(test_cases): results = [] for n, elements in test_cases: root = None for element in elements: root = insert(root, element) results.append(sum_bst(root)) return results # Example input and usage: test_cases = [ (5, [10, 20, 30, 40, 50]), (3, [5, 3, 8]) ] print(calculate_sums(test_cases)) # Output: [150, 16]"},{"question":"You\'re organizing a baseball tournament among N teams, each with a unique ID from 1 to N. The tournament is structured such that each team plays every other team exactly once. After all the matches are played, you want to determine the following for every team: 1. The total number of games they won. 2. The total number of games they lost. Assume the result of each game is predetermined and provided in the input. Each result lists the two teams that played, along with the winner of that game. Your task is to compute and output the win and loss tally for each team. Constraints * 2 leq N leq 1000 * There are (frac{N(N-1)}{2}) matches provided as input Input The first line contains an integer N, the number of teams. The next (frac{N(N-1)}{2}) lines each describe a game result in the following format: team_i team_j winner Where: * team_i and team_j are the IDs (integers) of the two teams that played. * winner is the ID of the team that won the match. Output Print N lines. Each line contains two integers: the number of wins and the number of losses for the respective team from team 1 to team N. Example Input: 5 1 2 1 1 3 1 1 4 4 1 5 1 2 3 3 2 4 2 2 5 5 3 4 3 3 5 5 4 5 5 Output: 3 1 1 3 2 2 1 3 3 1 Explanation: Team 1 wins against teams 2, 3, and 5 but loses to team 4. Team 2 wins against team 4 but loses to teams 1, 3, and 5. Team 3 wins against teams 2 and 4 but loses to teams 1 and 5. Team 4 wins against team 1 but loses to teams 2, 3, and 5. Team 5 wins against teams 2, 3, and 4 but loses to team 1.","solution":"def tally_results(N, games): Returns the win and loss tally for each of the N teams. Parameters: N (int): Number of teams. games (list): List of tuples containing game results in the format (team_i, team_j, winner). Returns: list: A list of tuples, each tuple containing the number of wins and losses for each team from team 1 to team N. wins = [0] * N losses = [0] * N for game in games: team_i, team_j, winner = game if winner == team_i: wins[team_i - 1] += 1 losses[team_j - 1] += 1 elif winner == team_j: wins[team_j - 1] += 1 losses[team_i - 1] += 1 result = [(wins[i], losses[i]) for i in range(N)] return result # Example usage: N = 5 games = [ (1, 2, 1), (1, 3, 1), (1, 4, 4), (1, 5, 1), (2, 3, 3), (2, 4, 2), (2, 5, 5), (3, 4, 3), (3, 5, 5), (4, 5, 5) ] # Expected output: # [ # (3, 1), # (1, 3), # (2, 2), # (1, 3), # (3, 1) # ] print(tally_results(N, games))"},{"question":"Sara is learning about number theory and she finds the concept of Greatest Common Divisor (GCD) intriguing. She wants to experiment with calculating the GCD of subarrays in different ways. In particular, she is interested in constructing a matrix where each element represents the GCD of a particular subarray. Consider an array a_1, a_2, ..., a_{n} of positive integers. Sara wants to create a matrix c of size n × n where each element c_{ij} (1 ≤ i, j ≤ n) is the GCD of the subarray starting at index i and ending at index j (inclusive). Formally, c_{ij} = GCD(a_i, a_{i+1}, ..., a_{j}). Your task is to help Sara generate this matrix c, given the array a. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the array a. The next line contains n space-separated positive integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9). -----Output----- Print n lines, each containing n space-separated integers. The j-th number in the i-th line should be the element c_{ij}, representing the GCD of the subarray a_i, a_{i+1}, ..., a_{j}. -----Examples----- Input 3 12 15 18 Output 12 3 3 0 15 3 0 0 18 Input 4 6 8 10 14 Output 6 2 2 2 0 8 2 2 0 0 10 2 0 0 0 14 -----Note----- The GCD (Greatest Common Divisor) of two or more integers is the largest positive integer that divides each of the integers without leaving a remainder. For more information about GCD, please refer to: https://en.wikipedia.org/wiki/Greatest_common_divisor.","solution":"import math def gcd_matrix(n, array): # Initialize the matrix with zeros matrix = [[0] * n for _ in range(n)] # Fill the matrix with GCD values for subarrays for i in range(n): current_gcd = array[i] for j in range(i, n): current_gcd = math.gcd(current_gcd, array[j]) matrix[i][j] = current_gcd return matrix"},{"question":"You are a software developer tasked with designing a scheduling system for a university. The system should calculate the minimum number of classrooms required to hold all classes without any overlap. Each class has a start time and an end time, and you need to determine how many classrooms will be simultaneously occupied at any point in time. -----Input----- The first line contains a single integer n (1 le n le 1000) — the number of classes. Each of the next n lines contains two integers s_i and e_i (0 le s_i < e_i le 10000) — the start and end time of each class. Times are given in minutes after midnight. -----Output----- Print a single integer — the minimum number of classrooms required. -----Examples----- Input 3 30 75 0 50 60 150 Output 2 Input 4 0 30 5 10 15 20 20 30 Output 2 -----Note----- In the first example, two of the classes overlap between 30 and 50 minutes, and the remaining class runs from 60 to 150 minutes. Thus, two classrooms are required to accommodate all classes without any overlap. In the second example, two classes overlap between 15 and 20 minutes, while the other two classes do not overlap with any other class. Thus, two classrooms are required.","solution":"def min_classrooms(classes): Calculates the minimum number of classrooms needed to hold all classes without overlap. :param classes: List of tuples where each tuple contains start and end time of a class :returns: Integer representing the minimum number of classrooms needed if not classes: return 0 starts = sorted([start for start, end in classes]) ends = sorted([end for start, end in classes]) start_ptr, end_ptr = 0, 0 max_rooms, rooms_needed = 0, 0 while start_ptr < len(classes): if starts[start_ptr] < ends[end_ptr]: rooms_needed += 1 start_ptr += 1 max_rooms = max(max_rooms, rooms_needed) else: rooms_needed -= 1 end_ptr += 1 return max_rooms"},{"question":"You are given a list of integers representing the heights of buildings in a row. Write a function to determine the amount of water that can be trapped after raining, when water cannot spill over the ends of the row. Each integer in the list represents the height of a building at that position, and there must be enough buildings to potentially trap water (at least 3 buildings). Your function should return the total number of \\"units\\" of water trapped between the buildings after it rains. Example input ============= ``` [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` Example output ============== 6 Example input ============= ``` [4, 2, 0, 3, 2, 5] ``` Example output ============== 9","solution":"def trap(height): Calculates the amount of water trapped between the buildings. Parameters: height (list): A list of integers representing the heights of buildings. Returns: int: Total units of water trapped. if len(height) < 3: return 0 left_max, right_max = [0] * len(height), [0] * len(height) left_max[0], right_max[-1] = height[0], height[-1] # Fill left_max and right_max arrays for i in range(1, len(height)): left_max[i] = max(left_max[i - 1], height[i]) for i in range(len(height) - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate trapped water trapped = 0 for i in range(1, len(height) - 1): trapped += max(min(left_max[i], right_max[i]) - height[i], 0) return trapped"},{"question":"Design a function that checks if a given integer number can be expressed as the sum of two prime numbers. Input An integer number n (1 ≤ n ≤ 10^9). Output Print \\"YES\\" if n can be expressed as the sum of two prime numbers. Otherwise, print \\"NO\\". Examples Input 34 Output YES Input 17 Output NO","solution":"def is_prime(num): Helper function to check if a number is a prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def can_be_expressed_as_sum_of_two_primes(n): Returns \\"YES\\" if n can be expressed as the sum of two prime numbers. Otherwise, returns \\"NO\\". if n < 4: # The smallest sum of two primes is 2 + 2 = 4 return \\"NO\\" for prime in range(2, n//2 + 1): if is_prime(prime) and is_prime(n - prime): return \\"YES\\" return \\"NO\\""},{"question":"A train is scheduled to travel through multiple stations, and we need to determine if a given seat booking is valid based on the rules defined. The rules are: 1. Each booking specifies a start station, an end station, and a seat number. 2. A seat can be booked by multiple passengers only if their journeys do not overlap. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M: - N denotes the number of stations. - M denotes the number of bookings. The next M lines describe the bookings. Each booking consists of three integers S_{i}, E_{i}, and K_{i}: - S_{i} is the start station. - E_{i} is the end station. - K_{i} is the seat number. ------ Output ------ For each test case, print a single line containing the string \\"VALID\\" if the bookings do not overlap, and \\"INVALID\\" if there is any overlapping booking. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 100 1 ≤ M ≤ 1,000 1 ≤ S_{i} < E_{i} ≤ N 1 ≤ K_{i} ≤ 100 ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 3 5 3 1 3 2 2 4 2 3 5 2 5 2 1 2 1 2 3 1 5 3 1 3 1 3 5 1 1 5 2 ----- Sample Output 1 ------ INVALID VALID VALID ----- Explanation 1 ------ Example case 1: The first and second bookings overlap in the station range from 2 to 3 for seat number 2, so it is INVALID. Example case 2: The two bookings do not overlap, so it is VALID. Example case 3: No bookings overlap, so it is VALID.","solution":"def check_bookings(T, test_cases): results = [] for i in range(T): N, M, bookings = test_cases[i] seat_map = {} valid = \\"VALID\\" for s, e, k in bookings: if k not in seat_map: seat_map[k] = [] # Check for overlap for st, en in seat_map[k]: if not (e <= st or s >= en): # Overlapping condition valid = \\"INVALID\\" break if valid == \\"INVALID\\": break seat_map[k].append((s, e)) results.append(valid) return results # Example Test Case T = 3 test_cases = [ (5, 3, [(1, 3, 2), (2, 4, 2), (3, 5, 2)]), (5, 2, [(1, 2, 1), (2, 3, 1)]), (5, 3, [(1, 3, 1), (3, 5, 1), (1, 5, 2)]) ] print(check_bookings(T, test_cases)) # Expected Output: [\'INVALID\', \'VALID\', \'VALID\']"},{"question":"You are given a sequence of integers that represents the heights of trees in a row. A tree-cutting robot can cut down any tree, but it\'s taxed based on the tallest remaining tree in the row. Your task is to help the robot determine the minimum tax (height of the tallest remaining tree) it will incur if it cuts down at most one tree. Input The first line contains an integer n (2 ≤ n ≤ 10^5), the number of trees. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), the heights of the trees. Output Output the minimum tax, which is the height of the tallest remaining tree after cutting down at most one tree. Example Input 5 2 3 9 7 4 Output 7 Explanation If the robot cuts down the tree with height 9, the remaining heights are [2, 3, 7, 4], and the tallest remaining tree has a height of 7. This is the minimum possible tallest remaining height.","solution":"def minimum_tax_after_one_cut(n, heights): Returns the minimum tax (height of the tallest remaining tree) after cutting down at most one tree. Parameters: n (int): The number of trees. heights (list): A list of tree heights. Returns: int: The minimum tax after cutting down one tree. if n == 2: return min(heights) # If there are only 2 trees, remove the taller one. sorted_heights = sorted(heights[:]) first_max = sorted_heights[-1] # Tallest tree second_max = sorted_heights[-2] # Second tallest tree min_tax = first_max for i in range(n): # If the current tree is the tallest, the tallest remaining becomes second_max if heights[i] == first_max: min_tax = min(min_tax, second_max) # Otherwise the tallest remaining tree is still first_max else: min_tax = min(min_tax, first_max) return min_tax"},{"question":"Alice and Bob are playing a board game that takes place on an infinite 2D grid. The game starts with a single token placed at the origin (0, 0). Alice and Bob take turns to move the token, with Alice going first. On a player\'s turn, they must move the token to a new position (x\', y\') where x\' or y\' must be one more than the current value of x or y, but not both. The players take alternate turns and the player who cannot make a move loses the game. Alice and Bob want to determine the outcome of the game by reaching a point (a, b). You need to help them find out who will win if they both play optimally. If Alice wins print \\"ALICE\\" without quotes, and if Bob wins print \\"BOB\\" without quotes. -----Input----- Input starts with an integer T denoting the number of test cases. Each test case starts with a line containing two integers a and b representing the coordinates of the point Alice and Bob are trying to reach. -----Output----- Outcome of each game in a separate line -----Constraints----- - 1 ≤ T ≤ 10^3 - 0 ≤ a, b ≤ 2 * 10^9 -----Sub tasks----- - Subtask #1: (20 points) - 1 ≤ T ≤ 10 - 0 ≤ a, b ≤ 10^2 - Subtask #2: (30 points) - 1 ≤ T ≤ 50 - 0 ≤ a, b ≤ 10^6 - Subtask #3: (50 points) - 1 ≤ T ≤ 10^3 - 0 ≤ a, b ≤ 2 * 10^9 -----Example----- Input: 3 1 2 2 2 3 1 Output: ALICE BOB ALICE","solution":"def game_winner(a, b): Determine the winner of the game at coordinates (a, b) if a == b: return \\"BOB\\" else: return \\"ALICE\\" def find_winner(T, coordinates): results = [] for a, b in coordinates: results.append(game_winner(a, b)) return results"},{"question":"A social network platform has implemented a new feature that assigns a score to each user\'s activity. The score is calculated based on the type of content a user interacts with: posts, comments, and likes. Each user is represented by a unique User ID, and their activity log is represented by a sequence of interactions, each with an associated score. The task is to compute the total score for each user based on their activity log. The activity types have the following scores: - Post: 5 points - Comment: 3 points - Like: 1 point Given the activity logs, calculate and display the total score for each user in descending order of their scores. If two users have the same score, sort them by their User ID in ascending order. Input The first line of the input contains T, the number of test cases. Each test case starts with an integer N, which is the number of activity entries. The next N lines each contain a User ID (string), followed by an activity type (string). Output For each test case, output the total scores for each user. Print one user per line in the format \'UserID: Score\', sorted first by the total score in descending order and then by User ID in ascending order if there are ties. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 UserID is a non-empty string of up to 10 characters Activity type is one of: \\"Post\\", \\"Comment\\", \\"Like\\" Example Input: 2 5 Alice Post Bob Comment Alice Like Alice Comment Bob Post 4 Eve Like Charlie Post Charlie Comment Eve Post Output: Alice: 9 Bob: 8 Charlie: 8 Eve: 6","solution":"def calculate_user_scores(test_cases): Calculate and sort user scores based on activity logs. results = [] for case in test_cases: activity_entries = case[1:] user_scores = {} for entry in activity_entries: user_id, activity_type = entry.split() if user_id not in user_scores: user_scores[user_id] = 0 if activity_type == \'Post\': user_scores[user_id] += 5 elif activity_type == \'Comment\': user_scores[user_id] += 3 elif activity_type == \'Like\': user_scores[user_id] += 1 sorted_users = sorted(user_scores.items(), key=lambda x: (-x[1], x[0])) results.append(sorted_users) return results"},{"question":"Mike is a savvy gardener who is trying out smart irrigation systems for his garden. Each irrigation zone can be scheduled to water for a specific duration at various times of the day. However, Mike wants to make sure that no two zones have overlapping watering schedules to ensure the pressure doesn\'t drop. You are given a list of watering schedules for different zones. Each schedule specifies the start and end time of watering in 24-hour format (HH:MM). Write a program to determine if Mike\'s watering schedules are conflict-free. Input - The first line contains an integer N (1 ≤ N ≤ 100), the number of watering schedules. - Each of the next N lines contains two strings representing the start and end time of watering in the format \\"HH:MM\\". Output - Output \\"NO OVERLAP\\" if no two schedules overlap. - Output \\"OVERLAP\\" if there is any overlap in the schedules. SAMPLE TEST CASE INPUT 3 06:00 07:00 07:00 08:00 08:00 09:00 OUTPUT NO OVERLAP SAMPLE INPUT 3 06:00 07:30 07:15 08:00 08:00 09:00 SAMPLE OUTPUT OVERLAP","solution":"def check_schedule_conflicts(n, schedules): Given the number of schedules and the schedules themselves, determines if there are any overlaps. :param n: int - number of schedules :param schedules: list of tuples - each tuple contains two strings representing start and end times :return: str - \\"NO OVERLAP\\" if there are no overlapping schedules, \\"OVERLAP\\" otherwise intervals = [(start, end) for start, end in schedules] intervals.sort() # Sort intervals based on start times for i in range(1, n): prev_end = intervals[i-1][1] curr_start = intervals[i][0] if prev_end > curr_start: return \\"OVERLAP\\" return \\"NO OVERLAP\\""},{"question":"Alice has a list of words with various lengths given to her by her friend Bob. Bob challenged Alice to find the longest word in the list that can be formed by deleting some characters of another given word `W` without rearranging the remaining characters of `W`. For example, suppose `W` is \\"abpcplea\\" and the list of words is `[\\"ale\\", \\"apple\\", \\"monkey\\", \\"plea\\"]`. Alice can form: - the word \\"ale\\" by deleting `b`, `p`, `c`, `p`, `l`, `e`, and `a` from \\"abpcplea\\" - the word \\"apple\\" by deleting `b` and `c` from \\"abpcplea\\" - the word \\"plea\\" by deleting `a`, `b`, `c`, and `p` from \\"abpcplea\\" However, Alice cannot form the word \\"monkey\\" as all characters of \\"monkey\\" do not appear in `W` in the same order. Alice needs to return the longest word from the list. If there are multiple results of the same length, Alice should return the word that appears first in the list. Can you help Alice write a function to solve this problem? -----Input----- The input consists of a string `W` and a list of words `words`. -----Output----- Output the longest word from the list that can be formed by deleting some characters of `W`. If there are multiple results of the same length, return the one that appears first in the list. -----Function Signature----- def findLongestWord(W: str, words: List[str]) -> str: ------Examples----- Example 1: Input W = \\"abpcplea\\" words = [\\"ale\\", \\"apple\\", \\"monkey\\", \\"plea\\"] Output \\"apple\\" Example 2: Input W = \\"abpcplea\\" words = [\\"a\\", \\"b\\", \\"c\\"] Output \\"a\\" Example 3: Input W = \\"abpcplea\\" words = [\\"abc\\", \\"abe\\", \\"abcd\\"] Output \\"abc\\"","solution":"from typing import List def findLongestWord(W: str, words: List[str]) -> str: def is_subsequence(word: str, W: str) -> bool: it = iter(W) return all(char in it for char in word) longest_word = \\"\\" for word in words: if is_subsequence(word, W): if len(word) > len(longest_word) or (len(word) == len(longest_word) and word < longest_word): longest_word = word return longest_word"},{"question":"You have a grid of size MxN representing a farm, where each cell in the grid can be a fertile land (\'F\') or a barren land (\'B\'). You can place a water sprinkler on any cell with \'F\'. If a sprinkler is placed on a cell, it will water itself and its immediate four neighbors (up, down, left, right), provided those neighbors are also \'F\'. Your task is to determine the minimum number of sprinklers needed to ensure that all fertile lands in the grid are watered. Example 1: Input: M = 3, N = 3 grid = [\'FFF\', \'FBF\', \'FFF\'] Output: 1 Explanation: Placing a sprinkler at (1,0) will water all \'F\' cells. Example 2: Input: M = 3, N = 3 grid = [\'FBF\', \'BFB\', \'FBF\'] Output: 5 Explanation: Each isolated \'F\' needs its own sprinkler. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minSprinklers() which takes integer M, integer N, and a list of strings grid as input parameters and returns the minimum number of sprinklers needed to water all fertile lands. Expected Time Complexity: O(M * N) Expected Space Complexity: O(M * N) Constraints: 1 ≤ M, N ≤ 1000 grid[i][j] is either \'F\' or \'B\'.","solution":"def minSprinklers(M, N, grid): # Helper function to loop through and mark all connected \'F\' cells def dfs(i, j): if i < 0 or i >= M or j < 0 or j >= N or grid[i][j] == \'B\' or visited[i][j]: return visited[i][j] = True dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) visited = [[False for _ in range(N)] for _ in range(M)] sprinklers = 0 # Loop through the grid to find all connected components of \'F\' for i in range(M): for j in range(N): if grid[i][j] == \'F\' and not visited[i][j]: # Found a new connected component, need at least 1 sprinkler sprinklers += 1 # Mark all cells in this component as visited dfs(i, j) return sprinklers"},{"question":"**Mysterious Islands** You are exploring a new grid of mysterious islands and water. Each island is represented by a \'1\' and water by a \'0\'. Islands are connected vertically and horizontally (not diagonally). Your task is to determine the number of distinct islands in the grid. Write a function `numberOfIslands(grid: List[List[str]]) -> int` that takes a 2D grid (list of lists) and returns the total number of distinct islands. # Input - grid: A 2D list of characters \'1\' (island) and \'0\' (water). # Output - The number of distinct islands in the grid. # Constraints - The grid dimensions will not exceed 100 x 100. # Examples Example 1: ``` Input: grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] Output: 3 ``` Example 2: ``` Input: grid = [ [\\"1\\",\\"0\\",\\"1\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"1\\",\\"1\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\"] ] Output: 4 ``` Note: - Ensure that the same island is not counted more than once by marking visited parts of the island.","solution":"from typing import List def numberOfIslands(grid: List[List[str]]) -> int: if not grid or not grid[0]: return 0 def dfs(grid, r, c): grid[r][c] = \'0\' # Mark as visited for dr, dc in [(1,0), (-1,0), (0,1), (0,-1)]: nr, nc = r + dr, c + dc if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and grid[nr][nc] == \'1\': dfs(grid, nr, nc) islands_count = 0 for r in range(len(grid)): for c in range(len(grid[0])): if grid[r][c] == \'1\': islands_count += 1 dfs(grid, r, c) return islands_count"},{"question":"You are tasked with designing a messaging system for a small office. The system must keep track of messages sent by employees to each other, and enable querying the communication history between pairs of employees. Your task is to implement a class `MessagingSystem` that supports the following operations: - **send_message(from_employee, to_employee, message_text):** Sends a message from `from_employee` to `to_employee` with the content `message_text`. Both `from_employee` and `to_employee` are strings representing employee names, and `message_text` is the content of the message. - **query_message_history(employee_1, employee_2):** Returns a list of all messages exchanged between `employee_1` and `employee_2`. The messages should be returned in the order they were sent. Each message is represented as a string formatted as: \\"from [sender] to [receiver]: [message_text]\\". -----Input/Output----- You do not need to read any input from standard input or write any output to standard output. Instead, focus on implementing the class with the specified methods. **Example Usage:** ```python ms = MessagingSystem() ms.send_message(\\"Alice\\", \\"Bob\\", \\"Hello Bob!\\") ms.send_message(\\"Bob\\", \\"Alice\\", \\"Hi Alice!\\") ms.send_message(\\"Alice\\", \\"Bob\\", \\"How are you?\\") history = ms.query_message_history(\\"Alice\\", \\"Bob\\") print(history) # Output: [\\"from Alice to Bob: Hello Bob!\\", \\"from Bob to Alice: Hi Alice!\\", \\"from Alice to Bob: How are you?\\"] ``` -----Constraints----- - Employee names are non-empty strings and contain only alphabetical characters. - The length of `message_text` is at most 100 characters. - Each employee name is not longer than 50 characters. - The `send_message` method will be called at most 10^5 times. - The `query_message_history` method will be called at most 10^5 times.","solution":"class MessagingSystem: def __init__(self): self.messages = [] def send_message(self, from_employee, to_employee, message_text): Sends a message from `from_employee` to `to_employee` with the content `message_text`. self.messages.append((from_employee, to_employee, message_text)) def query_message_history(self, employee_1, employee_2): Returns a list of all messages exchanged between `employee_1` and `employee_2`. history = [] for msg in self.messages: if (msg[0] == employee_1 and msg[1] == employee_2) or (msg[0] == employee_2 and msg[1] == employee_1): history.append(f\\"from {msg[0]} to {msg[1]}: {msg[2]}\\") return history"},{"question":"Develop a function `valid_move(grid, start, end)` to find out if it\'s possible to move from the `start` point to the `end` point on a 2D grid. The grid is represented by a list of lists containing \'1\'s and \'0\'s, where \'1\' indicates the cell is blocked and \'0\' indicates it is open. You can only move up, down, left, or right, and cannot step out of the grid boundaries. If a move is possible, the function should return `True`, otherwise it should return `False`. Function Signature: ```python def valid_move(grid: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> bool: ``` Parameters: - `grid`: A list of lists containing only 0s and 1s, representing an `m x n` grid. - `start`: A tuple (x, y) representing the start point\'s coordinates on the grid. - `end`: A tuple (x, y) representing the end point\'s coordinates on the grid. Examples: ```python grid = [ [0, 0, 1, 0], [1, 0, 1, 0], [1, 0, 0, 0], [1, 1, 0, 0] ] valid_move(grid, (0, 0), (3, 3)) == True valid_move(grid, (0, 0), (1, 0)) == False ``` Assumptions: - The grid will not be empty and will have at least one row and one column. - `start` and `end` will always be within grid boundaries. - You can assume the start and end points are always open (0s).","solution":"from typing import List, Tuple def valid_move(grid: List[List[int]], start: Tuple[int, int], end: Tuple[int, int]) -> bool: Determines if it\'s possible to move from the start point to the end point on a 2D grid. The cell contains \'1\' is blocked and \'0\' is open. You can only move up, down, left or right. rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and not visited[x][y] and grid[x][y] == 0 def dfs(x, y): if (x, y) == end: return True visited[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if is_valid(nx, ny): if dfs(nx, ny): return True return False return dfs(start[0], start[1])"},{"question":"# Task You are given a string which contains just the characters `\'A\'`, `\'B\'`, and `\'C\'`. You need to find the number of ways to select and remove three contiguous characters from the string such that their concatenation is `\'ABC\'`. After removing these three characters, the rest of the string remains unchanged. Different instances of removing the same `\'ABC\'` substring in different places in the original string are considered different (even if these convert the string to identical resultant strings). # Example For `s = \\"ABCFBCFxABC\\"`, the result should be `2`. Explanation: You can remove the substrings `\'ABC\'` starting at index `0` and at index `8`, so there are `2` ways. For `s = \\"AAAABBBCCCC\\"`, the result should be `0`. Explanation: There are no substrings `\'ABC\'` in the string, so there are `0` ways. # Input/Output - `[input]` a string of length `n` with `1 ≤ n ≤ 100`. - `[output]` an integer, the number of ways to select and remove a substring `\'ABC\'`.","solution":"def count_abc_substrings(s): Returns the number of ways to select and remove three contiguous characters \'ABC\' from the string s. count = 0 n = len(s) for i in range(n - 2): if s[i:i+3] == \'ABC\': count += 1 return count"},{"question":"Zara has a string S consisting of lowercase English alphabets. She wants to create the lexicographically smallest string by swapping some (or none) of the characters. However, each character can be swapped at most once, and only with the character that is exactly one position to its right. Write a program to determine the smallest lexicographically string Zara can achieve by following the above rules. -----Constraints----- - 1 <= |S| <= 100000 - S contains only lowercase English letters. -----Input----- The input is given from Standard Input in the following format: S -----Output----- Print the lexicographically smallest string Zara can achieve by swapping characters as described. -----Sample Input----- cba -----Sample Output----- bca Swapping the characters \'c\' and \'b\' results in the smallest possible string \\"bca\\" under the given constraints.","solution":"def lexicographically_smallest_string(S): Returns the lexicographically smallest string by swapping each character at most once with the character that is exactly one position to its right. S = list(S) length = len(S) for i in range(length - 1): if S[i] > S[i + 1]: S[i], S[i + 1] = S[i + 1], S[i] break return \\"\\".join(S)"},{"question":"Write a function `maxSumSubarray` that takes an array of integers and returns the maximum sum of any contiguous subarray within the array. A subarray is a contiguous part of an array. The input array can contain both positive and negative numbers. # Example For the array: ``` [-2,1,-3,4,-1,2,1,-5,4] ``` The maximum sum of a contiguous subarray is: ``` [4,-1,2,1] with sum 6 ``` Therefore, `maxSumSubarray([-2,1,-3,4,-1,2,1,-5,4])` should return `6`. # More Examples ``` maxSumSubarray([1, 2, 3, 4, -10]) # should return 10 # since [1, 2, 3, 4] is the subarray with the maximum sum maxSumSubarray([-2, -3, -1, -4]) # should return -1 # since [-1] is the subarray with the maximum sum maxSumSubarray([1, -3, 2, 1, -1]) # should return 3 # since [2, 1] is the subarray with the maximum sum ``` # Notes - You can assume that the input array will have at least one element. - The function should have a linear time complexity O(n).","solution":"def maxSumSubarray(nums): Returns the maximum sum of any contiguous subarray within the array. if not nums: return 0 max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A company wants to automate the process of generating invoices for its clients. Each client has a unique Client ID and may receive multiple invoices. Each invoice consists of several items, where each item has a description, quantity, and unit price. The company wants to generate a summary report for each invoice which includes the total amount due (sum of all items) and the total quantity of all items. You need to write a program that takes invoice details from multiple clients and generates the required summary report for each invoice. ------ Input: ------ The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case starts with an integer C, denoting the number of clients. For each client, there is a line containing the Client ID (string without spaces) followed by an integer I, denoting the number of invoices for this client. For each invoice, there is a line containing an integer N, the number of items in this invoice. The next N lines contain the description (string without spaces), quantity (integer), and unit price (float) of each item. ------ Output: ------ For each invoice, output the Client ID, the invoice number (1 to I), the total quantity of items, and the total amount due (formatted to 2 decimal places). ------ Constraints: ------ 1 ≤ T ≤ 10 1 ≤ C ≤ 50 1 ≤ I ≤ 20 1 ≤ N ≤ 100 1 ≤ text{quantity} ≤ 1000 0.01 ≤ text{unit price} ≤ 100 ----- Example Input 1 ------ 1 2 Client01 2 3 ItemA 2 10.50 ItemB 1 5.00 ItemC 3 2.75 2 ItemD 1 99.99 ItemE 4 0.50 Client02 1 2 ItemF 5 20.00 ItemG 2 7.50 ----- Example Output 1 ------ Client01 Invoice 1: Total Quantity: 6, Total Amount Due: 34.75 Client01 Invoice 2: Total Quantity: 5, Total Amount Due: 101.99 Client02 Invoice 1: Total Quantity: 7, Total Amount Due: 115.00","solution":"def generate_invoice_summary(test_cases): results = [] for test_case in test_cases: clients = test_case[\'clients\'] for client in clients: client_id = client[\'client_id\'] invoices = client[\'invoices\'] for i, invoice in enumerate(invoices): total_quantity = 0 total_amount_due = 0.0 for item in invoice[\'items\']: total_quantity += item[\'quantity\'] total_amount_due += item[\'quantity\'] * item[\'unit_price\'] results.append(f\\"{client_id} Invoice {i + 1}: Total Quantity: {total_quantity}, Total Amount Due: {total_amount_due:.2f}\\") return results # Example input for better visualization data = [ { \'clients\': [ { \'client_id\': \'Client01\', \'invoices\': [ { \'items\': [ {\'description\': \'ItemA\', \'quantity\': 2, \'unit_price\': 10.50}, {\'description\': \'ItemB\', \'quantity\': 1, \'unit_price\': 5.00}, {\'description\': \'ItemC\', \'quantity\': 3, \'unit_price\': 2.75}, ] }, { \'items\': [ {\'description\': \'ItemD\', \'quantity\': 1, \'unit_price\': 99.99}, {\'description\': \'ItemE\', \'quantity\': 4, \'unit_price\': 0.50}, ] } ] }, { \'client_id\': \'Client02\', \'invoices\': [ { \'items\': [ {\'description\': \'ItemF\', \'quantity\': 5, \'unit_price\': 20.00}, {\'description\': \'ItemG\', \'quantity\': 2, \'unit_price\': 7.50}, ] } ] } ] } ] print(generate_invoice_summary(data))"},{"question":"Given a list of integers, write a function that determines if it is possible to partition the list into two sublists such that the sum of elements in both sublists is the same. The function should return true if such a partition is possible, otherwise false. Example 1: Input: [1, 5, 11, 5] Output: true Explanation: The list can be partitioned as [1, 5, 5] and [11]. Example 2: Input: [1, 2, 3, 5] Output: false Explanation: No equal partition is possible. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canPartition() which takes the list arr[] as input parameter and returns true if a valid partition exists, false otherwise. Expected Time Complexity: O(n * sum(arr)) Expected Auxiliary Space: O(n * sum(arr)) Constraints: 1 <= len(arr) <= 200 1 <= arr[i] <= 100","solution":"def canPartition(arr): Determines if it\'s possible to partition the list into two sublists such that the sum of elements in both sublists is the same. :param arr: List of integers :return: True if such a partition is possible, otherwise False total_sum = sum(arr) # If the total sum is odd, we can\'t partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(arr) # DP array to store the state whether a particular sum is achievable or not dp = [False] * (target + 1) dp[0] = True for num in arr: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"In ancient civilizations, people used various forms of encryption to protect their secret messages. One such encryption method involved rotating the characters of a string. Given a string and a number `n`, where n indicates the number of positions each character in the string is to be shifted: - If n is positive, shift the characters to the right. - If n is negative, shift the characters to the left. For example, given the string \\"abcdef\\" and n = 2, the output should be \\"efabcd\\". Given the string \\"abcdef\\" and n = -2, the output should be \\"cdefab\\". Your task is to write a program that decrypts these rotated strings based on the given shift value `n`. **Input:** The input starts with an integer `t`, the number of test cases. Each of the next `t` lines contains a string followed by an integer `n`, separated by a space. **Output:** For each test case, output the decrypted string. **Constraints:** - 1 ≤ t ≤ 100 - 1 ≤ length of the string ≤ 1000 - -1000 ≤ n ≤ 1000 **SAMPLE INPUT** 3 abcdef 2 abcdef -2 encyclopedia 3 **SAMPLE OUTPUT** efabcd cdefab ediaencyclop","solution":"def rotate_string(s, n): Rotates the characters of the string s by n positions. If n is positive, shifts characters to the right. If n is negative, shifts characters to the left. n %= len(s) return s[-n:] + s[:-n] def process_input(input_lines): t = int(input_lines[0]) results = [] for i in range(1, t + 1): line = input_lines[i].strip() s, n = line.rsplit(\' \', 1) n = int(n) result = rotate_string(s, n) results.append(result) return results"},{"question":"Given an unsorted array of integers and an integer k, find the kth smallest element in the array using a min-heap. **Input:** - First line contains an integer T (1 ≤ T ≤ 100), representing the number of test cases. - For each test case: - First line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5), where n is the size of the array. - Second line contains n space-separated integers (each element of the array lies between -10^9 and 10^9). **Output:** - For each test case, print the kth smallest element in the array. **Sample Input:** 2 6 3 7 10 4 3 20 15 5 2 1 2 999999999 1000000000 2 **Sample Output:** 7 2 **Explanation:** In the first test case, the array is [7, 10, 4, 3, 20, 15] and the 3rd smallest element is 7. In the second test case, the array is [1, 2, 999999999, 1000000000, 2] and the 2nd smallest element is 2.","solution":"import heapq def find_kth_smallest_elements(test_cases): results = [] for n, k, array in test_cases: # Creating a min-heap from the array heapq.heapify(array) # Extracting the k-th smallest element kth_smallest = None for _ in range(k): kth_smallest = heapq.heappop(array) results.append(kth_smallest) return results # Function to parse input and call solution function def solve_problem(T, input_data): test_cases = [] index = 0 for _ in range(T): n, k = map(int, input_data[index].split()) array = list(map(int, input_data[index + 1].split())) test_cases.append((n, k, array)) index += 2 results = find_kth_smallest_elements(test_cases) return results"},{"question":"Nina is working with a unique string transformation. She wants to manipulate a string consisting of only lowercase English letters. The transformation involves replacing each character in the string with another character according to the character\'s position in the alphabet, with \'a\' being the 1st letter, \'b\' being the 2nd, and so on up to \'z\' which is the 26th letter. Here are the rules for the transformation: 1. Each character in the string must be replaced with the k-th next character in the alphabet. 2. If the replacement exceeds the letter \'z\', it should wrap around to the start of the alphabet (i.e., after \'z\' comes \'a\'). Given a string and an integer k, transform the string according to the rules specified and print the resulting string. Input format: - The first line contains a single integer k (1 ≤ k ≤ 25), the number of positions to shift each character. - The second line contains a string s (1 ≤ length of s ≤ 1000) which consists of only lowercase English letters. Output format: - Output the transformed string after applying the given transformations. Example 1: Input: 5 apple Output: fuuqj Example 2: Input: 3 xyz Output: abc Explanation: In the first example, each character of the string \\"apple\\" is shifted 5 positions forward in the alphabet: \'a\' -> \'f\', \'p\' -> \'u\', \'p\' -> \'u\', \'l\' -> \'q\', \'e\' -> \'j\'. In the second example, each character of the string \\"xyz\\" is shifted 3 positions forward, wrapping around from \'z\' to \'a\': \'x\' -> \'a\', \'y\' -> \'b\', \'z\' -> \'c\'.","solution":"def transform_string(k, s): Transforms the string s by shifting each character k positions forward in the alphabet. Wraps around from \'z\' to \'a\' if necessary. Parameters: k (int): Number of positions to shift each character (1 ≤ k ≤ 25). s (str): Input string consisting of only lowercase English letters (1 ≤ length of s ≤ 1000). Returns: str: Transformed string after applying the shifts. transformed = [] for char in s: new_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) transformed.append(new_char) return \'\'.join(transformed)"},{"question":"Given a list of strings, create a function that returns a new list containing the strings in reverse order. However, if a string contains any non-alphabetic characters, that string should be removed from the list and an error message mentioning the number of removed invalid entries should be returned instead. ```python reverse_alphabetic_strings([\'apple\', \'banana\', \'cherry\', \'date\']) == [\'date\', \'cherry\', \'banana\', \'apple\'] ``` The list should have all its elements as strings. If the function encounters any non-alphabetic character in the strings, it will not reverse the list and will compute and register them, outputting a message in singular or plural, depending on the number of invalid entries. ```python reverse_alphabetic_strings([\'apple\', \'banana2\', \'cherry\', \'d@te\']) == \\"There are 2 invalid entries: [\'banana2\', \'d@te\']\\" reverse_alphabetic_strings([\'apple\', \'b@nana\', \'cherry\', \'date\', \'1apple\']) == \\"There are 3 invalid entries: [\'b@nana\', \'1apple\']\\" ``` If the string consists of only valid alphabetic characters irrespective of case, the function will proceed to reverse the valid strings in the list. ```python reverse_alphabetic_strings([\'Apple\', \'Banana\', \'Cherry\', \'Date\']) == [\'Date\', \'Cherry\', \'Banana\', \'Apple\'] reverse_alphabetic_strings([\'apple\', \'banana\', \'Cherry\', \'date\']) == [\'date\', \'Cherry\', \'banana\', \'apple\'] ``` If an empty list or a list containing non-string items is given, handle it appropriately by outputting a suitable error message. ```python reverse_alphabetic_strings([]) == \\"The list is empty.\\" reverse_alphabetic_strings([\'apple\', 123, \'cherry\', True]) == \\"The list contains non-string items.\\" ``` Enjoy it","solution":"def reverse_alphabetic_strings(strings): This function takes a list of strings and returns a new list with the strings in reverse order. If any string contains non-alphabetic characters, the function returns an error message with the number of invalid entries. if not strings: return \\"The list is empty.\\" if not all(isinstance(s, str) for s in strings): return \\"The list contains non-string items.\\" invalid_entries = [s for s in strings if not s.isalpha()] if invalid_entries: error_message = f\\"There {\'are\' if len(invalid_entries) > 1 else \'is\'} {len(invalid_entries)} invalid entr{\'ies\' if len(invalid_entries) > 1 else \'y\'}: {invalid_entries}\\" return error_message return strings[::-1]"},{"question":"Find the Missing Number You are given an array of unique integers from 1 to n, where one number from this range is missing. Write a function that takes this array as input and returns the missing number. Function Signature: ```python def find_missing_number(arr: List[int]) -> int: ``` # Input - `arr` (List[int]): A list of unique integers from 1 to n with one integer missing. # Output - Return the missing integer (int). # Constraints - You may assume the list has at least one element and at most one number is missing. - It is guaranteed that the list size is n-1. # Example ```python assert find_missing_number([1, 2, 4, 5]) == 3 assert find_missing_number([2, 3, 1, 5]) == 4 assert find_missing_number([5, 3, 2, 1]) == 4 assert find_missing_number([1, 3]) == 2 ```","solution":"from typing import List def find_missing_number(arr: List[int]) -> int: Finds the missing number in an array containing unique integers from 1 to n. n = len(arr) + 1 total_sum = n * (n + 1) // 2 arr_sum = sum(arr) return total_sum - arr_sum"},{"question":"In a university, a library database system stores information about various books in a `books` table. The table contains columns for `book_id` (unique identifier for each book), `title`, `author`, `publication_year`, and `genre`. Occasionally, the library gets requests to find books that match certain criteria. Your task is to write a function that queries the library database to find books based on provided criteria. The function should allow filtering by `author`, `publication_year`, and `genre`, and return the results as a list of books sorted alphabetically by their titles. Each filter criterion is optional. When a filter criterion is not provided, it should not be applied in the query. # Input: - author: string (optional) - publication_year: integer (optional) - genre: string (optional) # Output: - A list of dictionaries, where each dictionary represents a book with the keys: \'book_id\', \'title\', \'author\', \'publication_year\', and \'genre\'. The list should be sorted by \'title\' in alphabetical order. # Function Signature: ```python def find_books(author: str = None, publication_year: int = None, genre: str = None) -> List[Dict]: pass ``` # Examples: Consider the books in the library database are as follows: | book_id | title | author | publication_year | genre | |---------|----------------------|--------------|------------------|----------| | 1 | \\"Python Basics\\" | \\"John Smith\\" | 2015 | \\"Tech\\" | | 2 | \\"Advanced Python\\" | \\"Jane Doe\\" | 2018 | \\"Tech\\" | | 3 | \\"Python Data Science\\"| \\"John Smith\\" | 2020 | \\"Science\\"| | 4 | \\"World History\\" | \\"Dave Clark\\" | 2010 | \\"History\\"| | 5 | \\"Creative Writing\\" | \\"Emily White\\"| 2018 | \\"Literature\\"| **Example 1:** ```python find_books(author=\\"John Smith\\") ``` Output: ```python [ {\\"book_id\\": 1, \\"title\\": \\"Python Basics\\", \\"author\\": \\"John Smith\\", \\"publication_year\\": 2015, \\"genre\\": \\"Tech\\"}, {\\"book_id\\": 3, \\"title\\": \\"Python Data Science\\", \\"author\\": \\"John Smith\\", \\"publication_year\\": 2020, \\"genre\\": \\"Science\\"} ] ``` **Example 2:** ```python find_books(genre=\\"Tech\\") ``` Output: ```python [ {\\"book_id\\": 2, \\"title\\": \\"Advanced Python\\", \\"author\\": \\"Jane Doe\\", \\"publication_year\\": 2018, \\"genre\\": \\"Tech\\"}, {\\"book_id\\": 1, \\"title\\": \\"Python Basics\\", \\"author\\": \\"John Smith\\", \\"publication_year\\": 2015, \\"genre\\": \\"Tech\\"} ] ``` **Example 3:** ```python find_books(publication_year=2018) ``` Output: ```python [ {\\"book_id\\": 2, \\"title\\": \\"Advanced Python\\", \\"author\\": \\"Jane Doe\\", \\"publication_year\\": 2018, \\"genre\\": \\"Tech\\"}, {\\"book_id\\": 5, \\"title\\": \\"Creative Writing\\", \\"author\\": \\"Emily White\\", \\"publication_year\\": 2018, \\"genre\\": \\"Literature\\"} ] ```","solution":"from typing import List, Dict def find_books(author: str = None, publication_year: int = None, genre: str = None) -> List[Dict]: Finds books that match the given criteria and returns them sorted by title. # Mock database of books books = [ {\\"book_id\\": 1, \\"title\\": \\"Python Basics\\", \\"author\\": \\"John Smith\\", \\"publication_year\\": 2015, \\"genre\\": \\"Tech\\"}, {\\"book_id\\": 2, \\"title\\": \\"Advanced Python\\", \\"author\\": \\"Jane Doe\\", \\"publication_year\\": 2018, \\"genre\\": \\"Tech\\"}, {\\"book_id\\": 3, \\"title\\": \\"Python Data Science\\", \\"author\\": \\"John Smith\\", \\"publication_year\\": 2020, \\"genre\\": \\"Science\\"}, {\\"book_id\\": 4, \\"title\\": \\"World History\\", \\"author\\": \\"Dave Clark\\", \\"publication_year\\": 2010, \\"genre\\": \\"History\\"}, {\\"book_id\\": 5, \\"title\\": \\"Creative Writing\\", \\"author\\": \\"Emily White\\", \\"publication_year\\": 2018, \\"genre\\": \\"Literature\\"}, ] # Filtering logic def matches_criteria(book): if author is not None and book[\\"author\\"] != author: return False if publication_year is not None and book[\\"publication_year\\"] != publication_year: return False if genre is not None and book[\\"genre\\"] != genre: return False return True # Filter books based on criteria filtered_books = filter(matches_criteria, books) # Sort filtered books by title sorted_books = sorted(filtered_books, key=lambda book: book[\\"title\\"]) return sorted_books"},{"question":"A sequence of integers a is said to be \\"almost sorted\\" if exactly one element of the array is out of place and the rest of the elements are in non-decreasing order. Given a sequence of integers a, determine if the sequence is almost sorted. -----Constraints----- - The sequence \'a\' contains between 1 and 100,000 integers. - Each integer in the sequence is between -10^9 and 10^9 inclusive. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print Yes if the sequence is almost sorted. Otherwise, print No. -----Sample Input----- 6 1 2 7 4 5 6 -----Sample Output----- Yes The sequence is almost sorted because the element 7 is out of place. If we move 7 to the end of the sequence, we would have a sorted sequence.","solution":"def is_almost_sorted(n, a): Determines if the sequence \'a\' is almost sorted with one element out of place. Parameters: n (int): The length of the sequence. a (list): The sequence of integers. Returns: str: \\"Yes\\" if the sequence is almost sorted, otherwise \\"No\\". count_out_of_place = 0 out_of_place_index = -1 for i in range(1, n): if a[i] < a[i - 1]: count_out_of_place += 1 if count_out_of_place > 1: return \\"No\\" out_of_place_index = i if count_out_of_place == 0: return \\"Yes\\" if count_out_of_place == 1: # Check if removing or replacing the element at out_of_place_index fixes the list. def is_sorted_except_one_removal(index): candidate = a[:index] + a[index+1:] return all(candidate[i] <= candidate[i + 1] for i in range(len(candidate) - 1)) if is_sorted_except_one_removal(out_of_place_index) or is_sorted_except_one_removal(out_of_place_index - 1): return \\"Yes\\" return \\"No\\""},{"question":"Write a function named `datasorted` that takes a list of integers as a parameter and returns a dictionary with three keys: - \'original\': the original list - \'ascending\': the list sorted in ascending order - \'descending\': the list sorted in descending order Examples: ```python datasorted([4, 2, 9, 1]) -> { \'original\': [4, 2, 9, 1], \'ascending\': [1, 2, 4, 9], \'descending\': [9, 4, 2, 1] } datasorted([7, 3, 5]) -> { \'original\': [7, 3, 5], \'ascending\': [3, 5, 7], \'descending\': [7, 5, 3] } datasorted([1, 2, 3]) -> { \'original\': [1, 2, 3], \'ascending\': [1, 2, 3], \'descending\': [3, 2, 1] } ``` Ensure your solution handles edge cases such as empty lists and lists with repeated elements.","solution":"def datasorted(lst): Takes a list of integers and returns a dictionary with the original list, the list sorted in ascending order, and the list sorted in descending order. Args: lst (list of int): The input list of integers. Returns: dict: A dictionary with the original list, the list sorted in ascending order, and the list sorted in descending order. return { \'original\': lst, \'ascending\': sorted(lst), \'descending\': sorted(lst, reverse=True) }"},{"question":"A software development team is working on a project with a centralized version control system. Each developer makes changes by editing files and commits their changes to the central repository. The system keeps track of which files have been modified by which developers in the logs. The project manager wants to know which files have been edited by multiple developers. This information helps identify files that might need more thorough merging and testing. You are given the commit logs which detail the file changes made by each developer. Your task is to determine which files have been edited by more than one developer. Input The first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of developers and the number of commit logs. Each of the next m lines contains a commit log in the format: * \'id file\': meaning that the developer with number id (1 ≤ id ≤ n) has modified the file named file. Output In the first line, print integer k (0 ≤ k ≤ m) — the number of files that have been modified by more than one developer. In the next k lines, print the names of such files in the lexicographical order. If no such file exists, print a single number 0. Examples Input 3 5 1 main.py 2 utils.py 3 main.py 2 main.py 1 models.py Output 1 main.py Input 2 3 1 data.csv 2 helper.js 1 app.js Output 0 Input 4 7 1 config.yaml 2 settings.ini 3 main.cpp 1 utils.cpp 2 main.cpp 1 README.md 4 utils.cpp Output 2 main.cpp utils.cpp","solution":"def find_files_edited_by_multiple_developers(n, m, commit_logs): from collections import defaultdict file_editors = defaultdict(set) for log in commit_logs: dev_id, file_name = log.split() dev_id = int(dev_id) file_editors[file_name].add(dev_id) multiple_edit_files = sorted([file for file, editors in file_editors.items() if len(editors) > 1]) print(len(multiple_edit_files)) for file in multiple_edit_files: print(file) # Example usage: n = 4 m = 7 commit_logs = [ \\"1 config.yaml\\", \\"2 settings.ini\\", \\"3 main.cpp\\", \\"1 utils.cpp\\", \\"2 main.cpp\\", \\"1 README.md\\", \\"4 utils.cpp\\" ] find_files_edited_by_multiple_developers(n, m, commit_logs)"},{"question":"The school library wants to organize its books such that it’s easy to find the right book by its unique ID number. For this, they decided to sort all books using a custom sorting algorithm based on the digits of the IDs. The sorting algorithm works as follows: 1. A book ID is considered smaller if the sum of its digits is smaller. 2. If two book IDs have the same sum of digits, the one with fewer digits is considered smaller. 3. If the above two criteria are the same, then the book ID which comes first lexicographically is considered smaller. Write a program that sorts the list of book IDs according to the described criteria. -----Input:----- - The first line will contain T, the number of test cases. - Each test case contains two lines. The first line contains N, the number of book IDs. - The second line contains N space-separated book IDs. -----Output:----- For each test case, output the sorted list of book IDs in a single line. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq Length of each book ID leq 15 -----Sample Input:----- 2 3 103 002 21 4 123 234 345 456 -----Sample Output:----- 002 21 103 123 234 345 456 -----EXPLANATION:----- For test case 1: - The sum of digits for 103 is 1+0+3=4, for 002 is 0+0+2=2 and for 21 is 2+1=3. Thus 002 comes before 21 and 21 comes before 103. For test case 2: - The sum of digits for 123 is 1+2+3=6, for 234 is 2+3+4=9, for 345 is 3+4+5=12, for 456 is 4+5+6=15. Since all sums are different, they remain in the same order.","solution":"def sum_of_digits(s): return sum(int(d) for d in s) def custom_sort_book_ids(book_ids): return sorted(book_ids, key=lambda x: (sum_of_digits(x), len(x), x)) def organize_books(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] book_ids = test_cases[i][1] sorted_ids = custom_sort_book_ids(book_ids) results.append(\\" \\".join(sorted_ids)) return results"},{"question":"Two cities, Alpha and Beta, are connected by a series of bridges. You can navigate from one city to another by crossing a series of these bridges. Each bridge connects exactly two points in the two cities. However, there are some restrictions: due to safety reasons, no two bridges can cross each other. That is, given two bridges connecting points (a1, b1) and (a2, b2) in cities Alpha and Beta respectively, we must have either a1 < a2 and b1 < b2, or a1 > a2 and b1 > b2, otherwise, the bridges would cross each other. Given the points in the two cities and the possible connections between them, determine the maximum number of bridges that can be built without any two of them crossing each other. -----Input----- The input starts with an integer n (1 leq n leq 1000), the number of potential bridges. The next n lines each contain two integers a_i and b_i (1 leq a_i, b_i leq 1000), representing a possible bridge between point a_i in city Alpha and point b_i in city Beta. -----Output----- Print a single integer, the maximum number of bridges that can be built without any two crossing. -----Examples----- Sample Input: 5 5 6 1 2 2 3 3 4 4 5 Sample Output: 5 Sample Input: 5 1 6 2 5 3 4 4 3 5 2 Sample Output: 1 Sample Input: 5 1 3 2 4 3 1 4 2 5 5 Sample Output: 3","solution":"def max_bridges(n, bridges): Given the points in the two cities and the possible connections between them, determine the maximum number of bridges that can be built without crossing each other. # Sort bridges by the first city points, and in case of tie by second city points bridges.sort() # Extract the second city points to apply LIS algorithm beta_points = [b for a, b in bridges] # Function to calculate LIS def lis(arr): from bisect import bisect_left dp = [] for num in arr: pos = bisect_left(dp, num) if pos == len(dp): dp.append(num) else: dp[pos] = num return len(dp) return lis(beta_points)"},{"question":"You are given a large collection of books, each with a unique ID and a set of topics it covers. The library wants you to write a program that helps in cataloging these books efficiently. The cataloging involves several operations which you need to implement. -----Operations----- 1. `ADD book_id topic_1 topic_2 ... topic_k`: Adds a new book with the given ID and topics to the collection. The book ID is guaranteed to be unique. 2. `REMOVE book_id`: Removes the book with the given ID from the collection. If the book does not exist, the operation is ignored. 3. `QUERY topic_1 topic_2 ... topic_k`: Returns a sorted list of book IDs that cover all the given topics. If no books cover the topics, return an empty list. -----Input----- The first line contains an integer `n` (`1 le n le 10^5`), the number of operations. The next `n` lines contain one of the three operations described above. Each book ID is a positive integer, and each topic is a string with a maximum length of 10 characters. There are no more than 50 unique topics. -----Output----- For each `QUERY` operation, output the sorted list of book IDs that cover all the specified topics. Each list of IDs should be outputted on a new line. If no books cover the topics, output an empty list. -----Example----- Input 10 ADD 1 science physics ADD 2 math physics ADD 3 science chemistry ADD 4 history QUERY physics QUERY physics math REMOVE 2 QUERY physics QUERY physics math Output 1 2 2 1","solution":"class Library: def __init__(self): self.books = {} # book_id -> set of topics self.topics_to_books = {} # topic -> set of book_ids def add_book(self, book_id, topics): self.books[book_id] = set(topics) for topic in topics: if topic not in self.topics_to_books: self.topics_to_books[topic] = set() self.topics_to_books[topic].add(book_id) def remove_book(self, book_id): if book_id in self.books: topics = self.books.pop(book_id) for topic in topics: self.topics_to_books[topic].remove(book_id) if not self.topics_to_books[topic]: del self.topics_to_books[topic] def query_books(self, topics): if not topics: return [] if topics[0] not in self.topics_to_books: return [] result = self.topics_to_books[topics[0]].copy() for topic in topics[1:]: if topic not in self.topics_to_books: return [] result &= self.topics_to_books[topic] return sorted(result) def process_operations(n, operations): library = Library() result = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": book_id = int(parts[1]) topics = parts[2:] library.add_book(book_id, topics) elif command == \\"REMOVE\\": book_id = int(parts[1]) library.remove_book(book_id) elif command == \\"QUERY\\": topics = parts[1:] result.append(library.query_books(topics)) return result"},{"question":"In a faraway land, the citizens use a unique communication system to send encrypted messages. They use an ancient device that accepts a sequence of integers and performs specific operations to decrypt the message. Recently, they discovered a bug in the device, causing some messages to be undecipherable. Your task is to determine if a given sequence of integers can be rearranged into a valid sequence that the device can process without errors. The device can only process sequences where every integer that appears more than once appears an even number of times. If every such integer appears exactly twice, the device works perfectly and the message is decrypted successfully. **Input** The first line contains an integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line of each test case contains an integer n (1 le n le 100) — the length of the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 100) — the elements of the sequence. **Output** For each test case, print either \\"YES\\" if it is possible to rearrange the sequence so that every integer that appears more than once appears exactly twice, or \\"NO\\" otherwise. **Examples** _Input_ ``` 5 4 1 2 2 1 5 3 3 2 2 2 6 4 4 1 1 2 2 3 7 7 7 2 5 6 ``` _Output_ ``` YES NO YES NO YES ``` **Explanation** 1. For the first test case, the sequence can be rearranged as [1, 1, 2, 2], which is valid. 2. For the second test case, the sequence contains three 2\'s, which cannot be rearranged to meet the requirements. 3. For the third test case, the sequence can be rearranged as [4, 4, 1, 1, 2, 2], which is valid. 4. For the fourth test case, the sequence contains three 7\'s, which cannot be rearranged to meet the requirements. 5. For the fifth test case, since each integer appears exactly once, it is inherently valid as no integer violates the rule.","solution":"def can_be_rearranged(n, sequence): Determine if a given sequence can be rearranged so every integer that appears more than once appears exactly twice. Args: n : int : length of the sequence sequence : list of int : the sequence of integers Returns: str : \\"YES\\" if the sequence can be rearranged; otherwise, \\"NO\\". from collections import Counter count = Counter(sequence) for freq in count.values(): if freq > 1 and freq != 2: return \\"NO\\" return \\"YES\\" def process_test_cases(t, test_cases): Process multiple test cases. Args: t : int : number of test cases test_cases : list of tuples : list containing tuples of (n, sequence) Returns: list : results for each test case results = [] for n, sequence in test_cases: results.append(can_be_rearranged(n, sequence)) return results"},{"question":"A group of friends has decided to create a shared shopping list. Each friend can add items to the list, and the list should be kept in a sorted order (case insensitive). However, friends can\'t add an item that already exists in the list, regardless of the case. Write a function `add_item` that takes in two parameters: `shopping_list` (a list of strings representing the current shopping list) and `item` (a string representing the item a friend wants to add to the list). The function should return the updated, sorted list if the item was successfully added. If the item was already in the list, return the list unchanged. # Examples ``` add_item([\\"Apples\\", \\"bananas\\", \\"Carrots\\"], \\"dates\\") --> [\\"Apples\\", \\"bananas\\", \\"Carrots\\", \\"dates\\"] add_item([\\"Apples\\", \\"bananas\\", \\"Carrots\\"], \\"Bananas\\") --> [\\"Apples\\", \\"bananas\\", \\"Carrots\\"] add_item([], \\"oranges\\") --> [\\"oranges\\"] ``` # Notes: - The list must remain in sorted order after adding a new item. - The check for duplicates should be case insensitive but the original casing should be preserved in the list. - The function should handle an empty list (initially no items on the shopping list).","solution":"def add_item(shopping_list, item): Adds an item to the shopping list in a case-insensitive manner and returns the sorted list. If the item already exists (case-insensitive), the list is returned unchanged. Parameters: shopping_list (list of str): The current shopping list. item (str): The item to be added to the list. Returns: list: The updated shopping list in sorted order. lower_shopping_list = [i.lower() for i in shopping_list] if item.lower() in lower_shopping_list: return shopping_list shopping_list.append(item) return sorted(shopping_list, key=str.lower)"},{"question":"Alice loves exploring mazes. She found a particularly interesting maze represented by a grid of size N times M, with some cells blocked and others open. She wants to know if there is a path from the top-left corner to the bottom-right corner of the grid. The grid is represented by a matrix where 0 indicates an open cell and 1 indicates a blocked cell. Alice can only move up, down, left, or right from an open cell to another open cell. Input Format: - First line contains the number of test cases, T. - The first line of each test case contains two space-separated integers N and M. - Next N lines each contain M space-separated integers representing the grid. Output Format: - Display YES for each test case if there is a path from the top-left corner to the bottom-right corner, otherwise display NO. Constraints: - 1 leq T leq 50 - 1 leq N, M leq 100 - Each element of the grid is either 0 or 1 Sample Input: 3 4 4 0 1 0 0 0 1 1 0 0 0 0 1 1 1 0 0 3 3 0 0 1 1 0 1 1 0 0 2 2 0 1 1 0 Sample Output: YES YES NO","solution":"def is_path_exists(maze): from collections import deque N, M = len(maze), len(maze[0]) if maze[0][0] == 1 or maze[N-1][M-1] == 1: return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = [[False] * M for _ in range(N)] visited[0][0] = True while queue: x, y = queue.popleft() if x == N - 1 and y == M - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and maze[nx][ny] == 0: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" def solve_mazes(test_cases): results = [] for maze in test_cases: results.append(is_path_exists(maze)) return results"},{"question":"Given a binary tree, implement an algorithm to flatten the binary tree into a linked list in place. The flattened tree should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. The linked list should follow the same order as a pre-order traversal of the binary tree. -----Input:----- - The first line consists of the number of test cases T. - For each test case, a binary tree is given. Each node\'s value is a unique integer. -----Output:----- For each test case, print the values of the nodes in the flattened linked list starting from the root node. -----Constraints----- - 1 leq T leq 100 - The number of nodes in each binary tree is between 1 and 10^4. -----Sample Input:----- 1 1 / 2 5 / 3 4 6 -----Sample Output:----- 1 2 3 4 5 6 -----EXPLANATION:----- The original binary tree is: 1 / 2 5 / 3 4 6 The flattened linked list should be: 1 -> 2 -> 3 -> 4 -> 5 -> 6.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root): Flatten the binary tree to a linked list in-place. if not root: return None stack = [root] prev = None while stack: node = stack.pop() if prev: prev.right = node prev.left = None if node.right: stack.append(node.right) if node.left: stack.append(node.left) prev = node def tree_to_list(root): Convert the flattened binary tree to a list of values. result = [] while root: result.append(root.val) root = root.right return result"},{"question":"Given an integer N, find the number of unique paths from the top-left corner to the bottom-right corner of an MxN grid. You can only move either down or right at any point in time. Input: The first line contains an integer T, the number of test cases. The next T lines each contain two integers M and N separated by a space (representing the dimensions of the grid). Output: For each test case, output an integer indicating the number of unique paths from the top-left to the bottom-right corner of the grid. Constraints: 1 ≤ T ≤ 10^5 1 ≤ M, N ≤ 1000 SAMPLE INPUT 3 2 2 3 7 1 10 SAMPLE OUTPUT 2 28 1","solution":"def unique_paths(M, N): Calculate the number of unique paths in an MxN grid from top-left to bottom-right corner. You can only move either down or right at any point in time. if M == 1 or N == 1: return 1 dp = [[1] * N for _ in range(M)] for i in range(1, M): for j in range(1, N): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[M-1][N-1] def process_test_cases(T, test_cases): results = [] for M, N in test_cases: results.append(unique_paths(M, N)) return results"},{"question":"Write a function `longest_sequence_of_ones(arr)` that receives as input a list of integers `arr` made of 0\'s and 1\'s. This function should return the length of the longest contiguous sequence of 1\'s in the list. However, you are allowed to flip at most one 0 to a 1. If flipping one 0 helps to get a longer contiguous sequence of 1\'s, consider that in your count. Examples: ```python longest_sequence_of_ones([1,1,0,1,1,1]) == 6 longest_sequence_of_ones([1,0,1,1,0,1]) == 4 longest_sequence_of_ones([0,0,0,1]) == 2 longest_sequence_of_ones([1,1,1,1]) == 4 ``` Constraints: - The input list `arr` will have at least one element and at most 1000 elements. - The elements of the list `arr` will only contain 0\'s and 1\'s. Good luck!","solution":"def longest_sequence_of_ones(arr): Returns the length of the longest contiguous sequence of 1\'s in the list after flipping at most one 0 to 1. max_ones = 0 zero_flipped = False left = 0 for right in range(len(arr)): if arr[right] == 0: if zero_flipped: while arr[left] == 1: left += 1 left += 1 zero_flipped = True max_ones = max(max_ones, right - left + 1) return max_ones"},{"question":"You are given two strings `s1` and `s2` consisting of lowercase alphabets. You need to implement a function to determine if `s1` is a subsequence of `s2`. A subsequence of a string is a new string which is formed from the original string by deleting some (or none) of the characters without disturbing the relative positions of the remaining characters. Return `true` if `s1` is a subsequence of `s2`, otherwise return `false`. Example 1: Input: s1 = \\"abc\\", s2 = \\"ahbgdc\\" Output: true Explanation: `sd` can be formed by removing the characters \'h\', \'g\', \'d\' from `s2`. Example 2: Input: s1 = \\"axc\\", s2 = \\"ahbgdc\\" Output: false Explanation: There\'s no way to form `axc` by removing characters from `s2`. Note: - 1 <= s1.length <= 100 - 1 <= s2.length <= 10^4","solution":"def is_subsequence(s1, s2): Determines if s1 is a subsequence of s2. :param s1: A string which we want to check if it\'s a subsequence. :param s2: A string from which we check if the subsequence can be formed. :return: True if s1 is a subsequence of s2, otherwise False. it = iter(s2) return all(char in it for char in s1)"},{"question":"A string is called \\"balanced\\" if it consists of exactly the same number of characters \'A\' and \'B\'. You are given a string ( S ) that consists only of characters \'A\' and \'B\'. Your task is to determine the length of the longest balanced substring of ( S ). If no balanced substring exists, return 0. -----Constraints----- - 1 (leq) |S| (leq) 10^5 - S consists only of characters \'A\' and \'B\'. -----Input----- The input is given from Standard Input in the following format: S -----Output----- Print the length of the longest balanced substring of ( S ). -----Sample Input----- AABBAA -----Sample Output----- 4 - The balanced substrings of the given string are \\"AABB\\" and \\"BBAA\\", both with length 4. - Thus, the length of the longest balanced substring is 4.","solution":"def longest_balanced_substring(S): Returns the length of the longest balanced substring of S. max_length = 0 balance = 0 first_occurrence = {0: -1} for i, char in enumerate(S): if char == \'A\': balance += 1 else: balance -= 1 if balance in first_occurrence: max_length = max(max_length, i - first_occurrence[balance]) else: first_occurrence[balance] = i return max_length"},{"question":"Flight Route Connections Problem Statement You are a travel planner working on optimizing flights between cities in a country. There are N cities and a set of M direct flights between them. The travel cost of each flight is given, and your task is to determine the minimum cost required to connect all cities directly or indirectly using the available flights. The cities are labeled from 0 to N-1 , and each direct flight is represented by a triplet (u, v, w), where u and v are the cities connected by the flight, and w is the cost of the flight. Write a program to find and print the minimum cost to connect all cities. If it\'s impossible to connect all cities, print \\"Impossible\\". Input The input is given in the following format. N M u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M - The first line of the input consists of two integers N and M separated by a single whitespace character. - N (2 ≤ N ≤ 100) is the number of cities. - M (1 ≤ M ≤ 1000) is the number of direct flights. - Each of the following M lines contains three integers u_i , v_i , and w_i . - u_i and v_i (0 ≤ u_i , v_i < N ) are the cities connected by the i -th flight. - w_i (1 ≤ w_i ≤ 10000) is the cost of the i -th flight. Output Print on one line the minimum cost to connect all cities. If it\'s impossible to connect all cities, print \\"Impossible\\". Sample Input 1 4 5 0 1 10 0 2 6 0 3 5 1 3 15 2 3 4 Sample Output 1 19 Sample Input 2 4 2 0 1 10 2 3 5 Sample Output 2 Impossible","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def minimum_cost_to_connect_all_cities(N, M, edges): uf = UnionFind(N) edges.sort(key=lambda x: x[2]) # Sort edges by cost total_cost = 0 edges_used = 0 for u, v, w in edges: if uf.find(u) != uf.find(v): uf.union(u, v) total_cost += w edges_used += 1 if edges_used == N - 1: break if edges_used == N - 1: return total_cost else: return \\"Impossible\\" # Reading input function can be defined as below if needed for actual input def read_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) edges = [] index = 2 for _ in range(M): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 return N, M, edges # Example usage: # N, M, edges = read_input() # print(minimum_cost_to_connect_all_cities(N, M, edges))"},{"question":"# Definition A string is considered a **_Palindrome_** if it reads the same forwards and backwards. **_Given_** a string, *determine if it is a palindrome or not*, ignoring spaces, punctuation, and capitalization. # Notes * The input string will not be empty. * Spaces, punctuation, and any non-alphabetic characters should be ignored. * Case should be ignored (e.g., \\"A\\" should be considered the same as \\"a\\"). # Input >> Output Examples ``` isPalindrome(\\"A man, a plan, a canal, Panama\\") ==> return True ``` Explanation: Ignoring spaces, punctuation, and capitalization, the string reads the same forwards and backwards. ``` isPalindrome(\\"race a car\\") ==> return False ``` Explanation: Ignoring spaces, punctuation, and capitalization, the string does not read the same forwards and backwards. ``` isPalindrome(\\"No \'x\' in Nixon\\") ==> return True ``` Explanation: Ignoring spaces, punctuation, and capitalization, the string reads the same forwards and backwards.","solution":"import re def isPalindrome(s): Checks if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. # Remove non-alphabetic characters and convert to lowercase cleaned_s = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() # Compare the cleaned string with its reverse return cleaned_s == cleaned_s[::-1]"},{"question":"John enjoys playing chess and is currently practicing by solving various chessboard puzzles. He wants to calculate how many possible moves a knight can make given its current position on an 8x8 standard chessboard. A knight moves in an \\"L\\" shape: - Two squares in one direction (vertical or horizontal), and then one square perpendicular to that direction. - One square in one direction (vertical or horizontal), and then two squares perpendicular to that direction. Given the knight\'s initial position on the board, write a program to determine the number of valid moves the knight can make. A move is considered valid if it ends within the bounds of the 8x8 chessboard. -----Input----- The first line of the input contains the initial position of the knight on the chessboard in standard chess notation (a letter from \'a\' to \'h\' followed by a number from \'1\' to \'8\'). -----Output----- Output a single integer representing the number of valid moves the knight can make from its starting position. -----Example----- Input d4 Output 8 Input a1 Output 2","solution":"def knight_moves(position): Returns the number of valid moves a knight can make from the given position on an 8x8 chessboard. Position is given in standard chess notation (e.g., \'d4\'). # Convert the position to board indices column, row = position[0], int(position[1]) col_idx = ord(column) - ord(\'a\') # Convert \'a\' to 0, \'b\' to 1, ..., \'h\' to 7 row_idx = row - 1 # Convert \'1\' to 0, \'2\' to 1, ..., \'8\' to 7 # Define all possible moves a knight can make possible_moves = [ (2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2) ] valid_moves = 0 # Check each possible move to see if it\'s valid for move in possible_moves: new_col = col_idx + move[0] new_row = row_idx + move[1] if 0 <= new_col < 8 and 0 <= new_row < 8: valid_moves += 1 return valid_moves"},{"question":"The popular social media company Instabook has introduced a new feature called \\"Story Sequence\\". In this feature, a user can create multiple short stories and combine them. Each story contains a list of words. Instabook wants to ensure that any word does not appear more than once in the combined sequence of stories. You need to write a function to determine the minimum number of words that must be removed from the stories to make sure all remaining words in the combined sequence are unique. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of stories. The next n lines represent the stories. Each story consists of a sequence of words separated by spaces. The total number of words across all stories does not exceed 10,000, and each word contains only lowercase English letters (a - z). -----Output----- Output a single integer, the minimum number of words to be removed to ensure that all words are unique in the combined sequence of stories. -----Examples----- Input 3 hello world hello instabook world wide web Output 2 Input 2 a quick brown fox jumps over the lazy dog Output 0 Input 4 good morning good night good evening hello good Output 3 -----Note----- In the first sample, we can remove 1 \\"hello\\" and 1 \\"world\\" to make all words unique, resulting in the sequence [\\"hello\\", \\"world\\", \\"instabook\\", \\"wide\\", \\"web\\"]. In the second sample, all words in the combined sequence are already unique. In the third sample, we need to remove 2 \\"good\\" from the sequence to have [\\"good\\", \\"morning\\", \\"night\\", \\"evening\\", \\"hello\\"].","solution":"def min_removals_to_unique_stories(n, stories): word_count = {} # Count how many times each word appears for story in stories: words = story.split() for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Calculate the number of words to be removed to make all words unique removals = 0 for count in word_count.values(): if count > 1: removals += count - 1 return removals"},{"question":"Determine the **number of distinct ways** to climb a staircase with *n* steps if you can take either 1 or 2 steps at a time. (Note: For n=0, there is 1 way to climb the staircase, i.e., not taking any steps.)","solution":"def climb_stairs(n): Returns the number of distinct ways to climb a staircase with n steps, if you can take either 1 or 2 steps at a time. # Base cases if n == 0: return 1 elif n == 1: return 1 # Use dynamic programming approach dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"A company wants to organize a fun event for its employees that introduces a little bit of healthy competition. They plan to conduct a series of team-building activities, where each team earns points based on their performance in various tasks. The company has `k` teams, and each team is identified by a unique integer ID ranging from 1 to k. A total of `n` tasks will be held during the event. After each task, the team that performed the best in that task earns some points. You are required to help determine which team has the highest total points after all the tasks are completed. If multiple teams have the highest total points, return the team with the smallest ID. Input - The input consists of two integers `k` and `n` (1 ≤ k, n ≤ 1000). - The next `n` lines each contain two integers `team_id` and `points` (1 ≤ team_id ≤ k, 1 ≤ points ≤ 100), where `team_id` is the ID of the team that won the task, and `points` is the number of points the team earned in that task. Output - Print the ID of the team with the highest total points. If multiple teams have the same highest points, print the smallest ID. SAMPLE INPUT 3 4 1 10 2 20 3 15 2 10 SAMPLE OUTPUT 2","solution":"def find_winner_team(k, n, task_results): Returns the ID of the team with the highest total points. If multiple teams have the highest points, returns the smallest ID. Parameters: k (int): Number of teams n (int): Number of tasks task_results (list of tuples): Each tuple contains (team_id, points) Returns: int: The ID of the winning team team_points = [0] * (k + 1) for team_id, points in task_results: team_points[team_id] += points max_points = max(team_points) for team_id in range(1, k + 1): if team_points[team_id] == max_points: return team_id"},{"question":"The organizers of a marathon event have assigned unique bib numbers to each participant. However, due to a technical glitch, some participants have received multiple bib numbers. You have been given a list of bib numbers assigned and need to determine the first duplicate bib number that appears in the list. If there are no duplicates, return -1. Your task is to write a program that finds the first duplicate bib number in the list. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of bib numbers. The second line contains n integers — the list of bib numbers. Each bib number is a positive integer and does not exceed 10^9. -----Output----- Output the first duplicate bib number. If there are no duplicates, output -1. -----Examples----- Input 5 8 3 5 7 3 Output 3 Input 6 1 2 3 4 5 6 Output -1 Input 8 4 1 2 3 4 5 6 7 Output 4","solution":"def first_duplicate_bib_number(bib_numbers): Returns the first duplicate bib number from the list. If there are no duplicates, returns -1. seen = set() for bib in bib_numbers: if bib in seen: return bib seen.add(bib) return -1"},{"question":"In a grid-based game, you are given a 2D grid with N rows and M columns. Each cell in the grid either contains an obstacle marked by \'#\', or is empty marked by \'.\'. You need to determine if there is a path from the top-left corner (0,0) to the bottom-right corner (N-1,M-1), such that you can only move right or down. Write a program to check whether such a path exists. Input - First line consists of no. of test cases. Each test case starts with two integers N and M, denoting the number of rows and columns respectively. The next N lines contains M characters each, representing the grid. Output - For each test case, print \\"YES\\" if there exists a path from (0,0) to (N-1,M-1), otherwise print \\"NO\\". Constraints: 1 ≤ N, M ≤ 1000 SAMPLE INPUT 2 3 3 ..# .#. ... 3 3 ..# . ... SAMPLE OUTPUT YES NO Explanation TC #1 - Path exists: (0,0) → (1,0) → (2,0) → (2,1) → (2,2) TC #2 - No path exists due to the obstacles blocking access to the bottom-right corner.","solution":"def is_path_exists(grid, n, m): Returns \'YES\' if there is a path from (0, 0) to (n-1, m-1) through the grid, only moving right or down. Returns \'NO\' otherwise. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" visited = [[False for _ in range(m)] for _ in range(n)] def dfs(x, y): if x == n-1 and y == m-1: return True if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == \'#\' or visited[x][y]: return False visited[x][y] = True # Move right if dfs(x, y + 1): return True # Move down if dfs(x + 1, y): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\" def has_path(test_cases): results = [] for n, m, grid in test_cases: results.append(is_path_exists(grid, n, m)) return results"},{"question":"Given a sorted array of integers `arr` and an integer `k`, the task is to find the `k` closest elements to a given value `x`. The result should also be sorted in ascending order. The `k` closest elements are defined as the `k` elements that have the smallest absolute difference to `x`. If there is a tie, the smaller elements are always preferred. Example 1: Input: arr = [1, 2, 3, 4, 5] k = 4, x = 3 Output: [1, 2, 3, 4] Explanation: The 4 closest elements to 3 are 1, 2, 3, and 4. Example 2: Input: arr = [1, 2, 3, 4, 5] k = 4, x = -1 Output: [1, 2, 3, 4] Explanation: The 4 closest elements to -1 are 1, 2, 3, and 4. User Task: Complete the function `findClosestElements()` which takes a list of integers `arr`, an integer `k` and an integer `x` as input parameters, and returns a list of `k` integers that represent the k closest elements to `x`, sorted in ascending order. Expected Time Complexity: O(log n + k) Expected Auxiliary Space: O(1) Constraints: 1 <= k <= len(arr) 1 <= len(arr) <= 10^4 -10^4 <= arr[i], x <= 10^4","solution":"def findClosestElements(arr, k, x): Given a sorted array of integers arr and an integer k, find the k closest elements to a given value x. Parameters: arr (List[int]): A sorted array of integers. k (int): The number of closest integers to return. x (int): The target integer to find the closest values to. Returns: List[int]: A list of k closest integers to x, sorted in ascending order. left, right = 0, len(arr) - k while left < right: mid = (left + right) // 2 if x - arr[mid] > arr[mid + k] - x: left = mid + 1 else: right = mid return arr[left:left + k]"},{"question":"Problem You are given a list of N integers representing the heights of N buildings in a row. You need to determine the maximum number of contiguous buildings that have decreasing heights. Write a function that takes the number of buildings and the list of heights and returns the maximum number of contiguous buildings with decreasing heights. Constraints The input satisfies the following conditions: * 1 leq N leq 10^5 * 1 leq heights[i] leq 10^9 Input The input is given in the following format: N heights_1 heights_2 ... heights_N All inputs are given as integers. N is given on the first line. In the following line, the heights of the N buildings are given, separated by blanks. Output Output a single integer representing the maximum number of contiguous buildings with decreasing heights. Examples Input 8 4 3 2 3 2 1 0 1 Output 4 Input 5 1 2 3 4 5 Output 1 Input 10 10 9 8 17 16 15 14 20 19 18 Output 4","solution":"def max_decreasing_buildings(N, heights): Determines the maximum number of contiguous buildings with decreasing heights. Parameters: N (int): The number of buildings. heights (list of int): The list of heights of the buildings. Returns: int: The maximum number of contiguous buildings with decreasing heights. if N == 0: return 0 max_decreasing = 1 current_decreasing = 1 for i in range(1, N): if heights[i] < heights[i - 1]: current_decreasing += 1 max_decreasing = max(max_decreasing, current_decreasing) else: current_decreasing = 1 return max_decreasing"},{"question":"You are given an initially empty Sudoku board represented as a 9x9 2D array. Each cell in the array may either be empty, represented by the character \'.\' (dot), or contain a digit from \'1\' to \'9\'. The objective of a Sudoku game is to fill the board such that each row, each column, and each of the nine 3x3 subgrids contain all of the digits from \'1\' to \'9\' exactly once. Write a function to solve a given Sudoku puzzle by filling the empty cells. A solved Sudoku board should not contain any empty cells. You may assume that the given puzzle is always solvable. # Input A list of lists (9x9 2D array) representing the Sudoku board. Each sublist represents a row of the Sudoku board and contains either digits \'1\' to \'9\' or \'.\' for empty cells. # Output The function should mutate the input board in-place to provide one valid solution. # Example ```python Input: board = [ [\'5\', \'3\', \'.\', \'.\', \'7\', \'.\', \'.\', \'.\', \'.\'], [\'6\', \'.\', \'.\', \'1\', \'9\', \'5\', \'.\', \'.\', \'.\'], [\'.\', \'9\', \'8\', \'.\', \'.\', \'.\', \'.\', \'6\', \'.\'], [\'8\', \'.\', \'.\', \'.\', \'6\', \'.\', \'.\', \'.\', \'3\'], [\'4\', \'.\', \'.\', \'8\', \'.\', \'3\', \'.\', \'.\', \'1\'], [\'7\', \'.\', \'.\', \'.\', \'2\', \'.\', \'.\', \'.\', \'6\'], [\'.\', \'6\', \'.\', \'.\', \'.\', \'.\', \'2\', \'8\', \'.\'], [\'.\', \'.\', \'.\', \'4\', \'1\', \'9\', \'.\', \'.\', \'5\'], [\'.\', \'.\', \'.\', \'.\', \'8\', \'.\', \'.\', \'7\', \'9\'] ] Output: board = [ [\'5\', \'3\', \'4\', \'6\', \'7\', \'8\', \'9\', \'1\', \'2\'], [\'6\', \'7\', \'2\', \'1\', \'9\', \'5\', \'3\', \'4\', \'8\'], [\'1\', \'9\', \'8\', \'3\', \'4\', \'2\', \'5\', \'6\', \'7\'], [\'8\', \'5\', \'9\', \'7\', \'6\', \'1\', \'4\', \'2\', \'3\'], [\'4\', \'2\', \'6\', \'8\', \'5\', \'3\', \'7\', \'9\', \'1\'], [\'7\', \'1\', \'3\', \'9\', \'2\', \'4\', \'8\', \'5\', \'6\'], [\'9\', \'6\', \'1\', \'5\', \'3\', \'7\', \'2\', \'8\', \'4\'], [\'2\', \'8\', \'7\', \'4\', \'1\', \'9\', \'6\', \'3\', \'5\'], [\'3\', \'4\', \'5\', \'2\', \'8\', \'6\', \'1\', \'7\', \'9\'] ] Explanation: The empty cells in the input board are filled according to the rules of Sudoku, resulting in one solved board. ```","solution":"def solve_sudoku(board): def is_valid(board, row, col, num): # Check the row for i in range(9): if board[row][i] == num: return False # Check the column for i in range(9): if board[i][col] == num: return False # Check the 3x3 grid startRow = (row // 3) * 3 startCol = (col // 3) * 3 for i in range(3): for j in range(3): if board[startRow + i][startCol + j] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == \'.\': for num in \'123456789\': if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = \'.\' return False return True solve(board)"},{"question":"A company wants to manage its employees\' data. You\'re tasked with writing a program that processes a series of commands to insert, delete, and query employee information. Each employee has a unique ID, name, and salary. The commands will be: - `INSERT <ID> <Name> <Salary>`: Adds a new employee to the database. - `DELETE <ID>`: Removes an employee from the database. - `QUERY <ID>`: Retrieves the name and salary of the employee with the given ID. If an `INSERT` command is given with an already existing ID, update the name and salary for that ID. If a `DELETE` or `QUERY` command is given with a non-existing ID, return a message \\"NOT FOUND\\". Your task is to process the commands and produce the appropriate output. Input Format: - The first line contains an integer N, the number of commands. - The next N lines contain one of the commands described above. Output Format: - For each `QUERY` command, print the employee’s name and salary, or \\"NOT FOUND\\" if the ID does not exist. - There is no output expected for `INSERT` and `DELETE` commands. Constraints: - 1 ≤ N ≤ 10^4 - Employee IDs are integers between 1 and 10^5. - Names are strings of up to 100 characters. - Salaries are integers between 1,000 and 100,000. SAMPLE INPUT 7 INSERT 1 John 50000 INSERT 2 Alice 60000 QUERY 1 QUERY 3 INSERT 1 Michael 70000 QUERY 1 DELETE 2 SAMPLE OUTPUT John 50000 NOT FOUND Michael 70000","solution":"def process_commands(commands): Process a list of commands to insert, delete, and query employees. Args: commands (list of str): The list of commands to be processed. Returns: list of str: The results of the query commands. database = {} results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"INSERT\\": employee_id = int(parts[1]) name = parts[2] salary = int(parts[3]) database[employee_id] = (name, salary) elif action == \\"DELETE\\": employee_id = int(parts[1]) if employee_id in database: del database[employee_id] elif action == \\"QUERY\\": employee_id = int(parts[1]) if employee_id in database: results.append(f\\"{database[employee_id][0]} {database[employee_id][1]}\\") else: results.append(\\"NOT FOUND\\") return results # Example usage: # commands = [ # \\"INSERT 1 John 50000\\", # \\"INSERT 2 Alice 60000\\", # \\"QUERY 1\\", # \\"QUERY 3\\", # \\"INSERT 1 Michael 70000\\", # \\"QUERY 1\\", # \\"DELETE 2\\" # ] # print(process_commands(commands))"},{"question":"You are given a binary matrix of size N x M, where each cell contains either a 0 or a 1. The task is to find and return the largest rectangular sub-matrix that contains only 1s. Input Format: - The first line contains two integers N and M, representing the number of rows and columns in the matrix. - Each of the following N lines contains M integers separated by spaces, each representing a cell in the matrix. Output Format: - Output a single integer which represents the area of the largest rectangle containing only 1s. Constraints: 1 ≤ N, M ≤ 1000 The matrix elements are either 0 or 1. Sample Input: 4 4 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 1 Sample Output: 6 Explanation: The given matrix can be visualized as: 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 1 The largest rectangle with all 1s has an area of 6, formed by the sub-matrix: 1 1 1 1 1 1","solution":"def maximalRectangle(matrix): if not matrix or not matrix[0]: return 0 N, M = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * M for i in range(N): for j in range(M): heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area"},{"question":"Given a string s which only contains lowercase letters. Your task is to generate all possible strings by capitalizing any subset of characters in s and then sort these capitalized strings in lexicographical order. Example: Input: s = \\"abc\\" Output: [ \\"ABC\\", \\"ABc\\", \\"AbC\\", \\"Abc\\", \\"aBC\\", \\"aBc\\", \\"abC\\", \\"abc\\" ] Explanation: All possible capitalizations of \\"abc\\" are: [\\"ABC\\", \\"ABc\\", \\"AbC\\", \\"Abc\\", \\"aBC\\", \\"aBc\\", \\"abC\\", \\"abc\\"] which after sorting in lexicographical order remain the same. Function Signature: def capitalizeSubsets(s: str) -> List[str]: # Your code here Constraints: - 1 <= len(s) <= 10","solution":"from itertools import product from typing import List def capitalizeSubsets(s: str) -> List[str]: Generates all possible strings by capitalizing any subset of characters in s and returns them sorted in lexicographical order. n = len(s) results = [] # Generate all combinations using a binary approach for pattern in product([0, 1], repeat=n): capitalized = \'\'.join(char.upper() if pattern[i] else char for i, char in enumerate(s)) results.append(capitalized) return sorted(results)"},{"question":"Develop a program that simulates the functionality of a rudimentary banking system. Your task is to implement classes for handling basic banking operations such as account creation, deposit, withdrawal, and balance inquiry. The system should adhere to the following specifications: 1. Define a class `Account` with the following attributes: - `account_number`: A unique integer representing the account number. - `account_holder`: A string representing the name of the account holder. - `balance`: A floating-point number representing the current balance of the account. 2. Implement methods in the `Account` class to perform the following operations: - `__init__(self, account_number, account_holder, initial_balance)`: Constructor to initialize a new account with the provided account number, account holder name, and initial balance. - `deposit(self, amount)`: Method to deposit a specified amount into the account and update the balance. - `withdraw(self, amount)`: Method to withdraw a specified amount from the account. The method should reduce the balance accordingly. If there are insufficient funds, it should raise an \\"Insufficient funds\\" exception. - `get_balance(self)`: Method to return the current balance of the account. 3. Create a `Bank` class to manage multiple accounts. This class should have: - A list of `Account` objects. - Methods to add new accounts, find an account by account number, deposit into an account, withdraw from an account, and display the balance of an account. 4. Implement the methods in the `Bank` class to perform the following operations: - `add_account(self, account)`: Method to add a new account to the list. - `find_account(self, account_number)`: Method to find and return an account object given the account number. - `deposit_to_account(self, account_number, amount)`: Method to deposit a specified amount into the account identified by the provided account number. - `withdraw_from_account(self, account_number, amount)`: Method to withdraw a specified amount from the account identified by the provided account number. If the withdrawal amount is greater than the balance, it should raise an \\"Insufficient funds\\" exception. - `display_balance(self, account_number)`: Method to display the balance of the account identified by the provided account number. Input/Output Your program should be able to handle input as follows: - The first line should contain an integer `n`, representing the number of operations to be performed. - Each of the next `n` lines should contain an operation in one of the following formats: - For adding a new account: `add_account <account_number> <account_holder> <initial_balance>` - For depositing money: `deposit <account_number> <amount>` - For withdrawing money: `withdraw <account_number> <amount>` - For displaying balance: `balance <account_number>` The program should output the results of \'balance\' operations and any \'Insufficient funds\' exceptions. Example Input: ``` 5 add_account 1001 Alice 1000.0 deposit 1001 500.0 withdraw 1001 200.0 balance 1001 withdraw 1001 2000.0 ``` Example Output: ``` 1300.0 Insufficient funds ``` Notes: - The account numbers will be unique. - Operations will be valid (e.g., no withdrawal or deposit to non-existent accounts).","solution":"class InsufficientFundsException(Exception): pass class Account: def __init__(self, account_number, account_holder, initial_balance): self.account_number = account_number self.account_holder = account_holder self.balance = initial_balance def deposit(self, amount): self.balance += amount def withdraw(self, amount): if self.balance < amount: raise InsufficientFundsException(\\"Insufficient funds\\") self.balance -= amount def get_balance(self): return self.balance class Bank: def __init__(self): self.accounts = [] def add_account(self, account): self.accounts.append(account) def find_account(self, account_number): for account in self.accounts: if account.account_number == account_number: return account return None def deposit_to_account(self, account_number, amount): account = self.find_account(account_number) if account: account.deposit(amount) def withdraw_from_account(self, account_number, amount): account = self.find_account(account_number) if account: account.withdraw(amount) def display_balance(self, account_number): account = self.find_account(account_number) if account: return account.get_balance()"},{"question":"Write a function that takes two strings as input and returns a new string that is the longest common subsequence of the two input strings. The longest common subsequence is the longest sequence that appears in both strings (not necessarily contiguously). If there are multiple longest common subsequences, you should return any one of them. Constraints - The input strings will have lengths of at most 1000. Input - Two strings are given in two separate lines. Output - Output a string that represents the longest common subsequence. Example Input ``` ABCBDAB BDCABC ``` Output ``` BCAB ```","solution":"def longest_common_subsequence(str1, str2): Returns the longest common subsequence of two input strings. m, n = len(str1), len(str2) dp = [[\\"\\" for _ in range(n+1)] for _ in range(m+1)] for i in range(1, m+1): for j in range(1, n+1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + str1[i-1] else: if len(dp[i-1][j]) > len(dp[i][j-1]): dp[i][j] = dp[i-1][j] else: dp[i][j] = dp[i][j-1] return dp[m][n]"},{"question":"John has a bookshelf with n books, each with a unique height. The i-th book from the left has a height h_i. Every time John can select any two adjacent books and swap their positions if and only if the height of the left book is greater than the height of the right book. However, John realizes that each time he performs a swap, the process takes some effort, so he wants to minimize the total number of swaps to sort the books in non-decreasing order. Write a program that determines the minimum number of swaps required to sort John\'s bookshelf. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 50) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the number of books on the shelf. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^5) — the heights of the books in order from left to right. It is guaranteed that the sum of n for all test cases does not exceed 10^5. Output For each test case, print a single integer — the minimum number of swaps required to sort the bookshelf in non-decreasing order. Example Input 2 4 4 3 1 2 5 2 3 4 5 1 Output 5 4 Note In the first test case, - Swap 4 and 3 → 3 4 1 2 - Swap 4 and 1 → 3 1 4 2 - Swap 3 and 1 → 1 3 4 2 - Swap 4 and 2 → 1 3 2 4 - Swap 3 and 2 → 1 2 3 4 In the second test case, - Swap 5 and 1 → 2 3 4 1 5 - Swap 4 and 1 → 2 3 1 4 5 - Swap 3 and 1 → 2 1 3 4 5 - Swap 2 and 1 → 1 2 3 4 5 Thus, the minimum number of swaps in the first test case is 5 and in the second test case is 4.","solution":"def minimum_swaps_to_sort_books(test_cases): results = [] def count_inversions(arr): A function to use the merge sort to count inversions if len(arr) < 2: return arr, 0 mid = len(arr) // 2 left, left_inv = count_inversions(arr[:mid]) right, right_inv = count_inversions(arr[mid:]) merged, split_inv = merge_and_count(left, right) return merged, left_inv + right_inv + split_inv def merge_and_count(left, right): i = j = inv_count = 0 merged = [] while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) j += 1 inv_count += len(left) - i merged += left[i:] merged += right[j:] return merged, inv_count for n, heights in test_cases: _, swap_count = count_inversions(heights) results.append(swap_count) return results # function to handle input and output def handle_input_output(): import sys input = sys.stdin.read data = input().strip().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) index += 1 heights = list(map(int, data[index:index + n])) index += n test_cases.append((n, heights)) results = minimum_swaps_to_sort_books(test_cases) for result in results: print(result)"},{"question":"Write a function `transform_matrix(matrix)` that takes a square matrix (a list of lists) as input and performs the following transformations: 1. Calculate the sum of the elements on the primary diagonal. 2. Calculate the sum of the elements on the secondary diagonal. 3. Replace all elements on the primary diagonal with the sum of the primary diagonal elements. 4. Replace all elements on the secondary diagonal with the sum of the secondary diagonal elements. The primary diagonal of a matrix consists of elements from the top left to the bottom right. The secondary diagonal consists of elements from the top right to the bottom left. Example: Input: ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ```python [ [15, 2, 15], [4, 15, 6], [15, 8, 15] ] ``` Explanation: - The primary diagonal sum is 1 + 5 + 9 = 15. - The secondary diagonal sum is 3 + 5 + 7 = 15. - Replace elements on the primary diagonal ([1, 5, 9]) and secondary diagonal ([3, 5, 7]) with 15.","solution":"def transform_matrix(matrix): n = len(matrix) if n == 0: return matrix primary_diagonal_sum = sum(matrix[i][i] for i in range(n)) secondary_diagonal_sum = sum(matrix[i][n - 1 - i] for i in range(n)) for i in range(n): matrix[i][i] = primary_diagonal_sum matrix[i][n - 1 - i] = secondary_diagonal_sum return matrix"},{"question":"Ohana Township organizes an annual reunion event that lasts for D days. Every P-th year, an extra feast is held, which extends the duration of the event by E extra days (i.e., D + E days in years with an extra feast). Residents eager to attend the event mark down the first day of each event year. Given a specific number of days Y from the start of Year 1, determine if it falls on the first day of a new event year. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line containing D, E, P, and Y — the number of days the event lasts in a normal year, the number of extra days in a year with an extra feast, the number of years between each extra feast, and the integer Y. ------ Output Format ------ For each test case, output YES on a new line if the Y-th day falls on the first day of an event year, and NO otherwise. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ D, E, P ≤ 10^{4} 1 ≤ Y ≤ 10^{9} ------ Sample Input 1 ------ 3 3 2 5 21 3 2 5 20 4 1 3 14 ------ Sample Output 1 ------ YES NO YES ------ Explanation 1 ------ Test case 1: Since D = 3, E = 2, and P = 5: - Year 1 has D = 3 days. - Year 2 has D = 3 days. - Year 3 has D = 3 days. - Year 4 has D = 3 days. - Year 5 (with an extra feast) has D + E = 5 days. - Year 6 has D = 3 days. - Year 7 has D = 3 days. - Year 8 has D = 3 days. - Year 9 has D = 3 days. - Year 10 (with an extra feast) has D + E = 5 days. The Y = 21-st day falls on the first day of Year 8, hence the answer is YES. Test case 2: The Y = 20-th day falls on the third day of Year 7, hence the answer is NO. Test case 3: Since D = 4, E = 1, and P = 3: - Year 1 has D = 4 days. - Year 2 has D = 4 days. - Year 3 (with an extra feast) has D + E = 5 days. The Y = 14-th day falls on the first day of Year 4, hence the answer is YES.","solution":"def is_first_day(D, E, P, Y): Determine if the Y-th day falls on the first day of an event year. normal_cycle_days = P * D + E year = 1 days_count = 0 while days_count < Y: if (year % P) == 0: days_in_year = D + E else: days_in_year = D days_count += days_in_year if days_count >= Y: break year += 1 return days_count - days_in_year + 1 == Y def process_input(t, cases): results = [] for case in cases: D, E, P, Y = case if is_first_day(D, E, P, Y): results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"A company is moving to a new office and wants to organize their employees into project teams. Each employee has a skill level denoted by an integer. The company wants to ensure that the skill levels within any team do not differ by more than a certain threshold. Given the skill levels of the employees and the maximum allowed difference in skill levels within a team, determine the minimum number of teams required to accommodate all employees. -----Input----- The first line of input contains two integers N and D (1 leq N leq 1000, 0 leq D leq 1000), where N is the number of employees and D is the maximum allowed difference in skill levels within any team. The second line contains N integers representing the skill levels of the employees. Each skill level is in the range 0 leq text{skill level} leq 1000. -----Output----- Print a single line containing an integer denoting the minimum number of teams required. -----Examples----- Sample Input 1: 6 3 1 4 6 8 9 10 Sample Output 1: 3 Sample Input 2: 5 2 1 2 2 3 4 Sample Output 2: 2","solution":"def min_teams_required(N, D, skill_levels): # Sort the skill levels skill_levels.sort() teams = 0 i = 0 # Iterate through the sorted skill levels while i < N: # Start a new team teams += 1 # Use a while loop to stay within the skill level threshold for the team j = i while j < N and skill_levels[j] - skill_levels[i] <= D: j += 1 # Move to the next set of employees i = j return teams"},{"question":"# Task Bank transactions in year-end reports must be reviewed for irregularities. You are asked to write a function that helps to identify the longest streak of continuous positive daily balance adjustments recorded in an integer array. Positive daily balance adjustments mean that each subsequent day\'s balance is higher than the one before. # Example For `arr = [-1, 2, 2, 0, 5, 6, 3, 4, 4]`, the output should be 3. Explanation: The longest streak of continuous positive daily balance adjustments is `0, 5, 6`, giving the length of 3. # Input/Output - [input] integer array `arr` Array of integers representing daily balance adjustments. Constraints: `2 ≤ arr.length ≤ 100,` `-1000 ≤ arr[i] ≤ 1000.` - `[output]` an integer The length of the longest streak of continuous positive daily balance adjustments.","solution":"def longest_positive_streak(arr): Returns the length of the longest streak of continuous positive daily balance adjustments. if not arr or len(arr) < 2: return 0 longest_streak = 0 current_streak = 1 for i in range(1, len(arr)): if arr[i] > arr[i-1]: current_streak += 1 else: longest_streak = max(longest_streak, current_streak) current_streak = 1 return max(longest_streak, current_streak)"},{"question":"Design a library management system: Suppose you are hired by a library to create a system that keeps track of the inventory of books. You need to implement the following features: 1. Add a book to the inventory. 2. Issue a book to a member. 3. Return a book to the library. 4. Check the inventory of a particular book. Implement this system using classes in Python. ------ Input: ------ The first line will contain an integer n, the number of operations. This is followed by n lines, each having one of the following formats: 1. ADD <book_id> <book_name>: Add a new book to the inventory. 2. ISSUE <book_id>: Issue a book to a member. 3. RETURN <book_id>: Return a book to the library. 4. INVENTORY <book_id>: Check the inventory of a particular book. The book_id is an integer, and book_name is a string without spaces. ------ Output: ------ For each INVENTORY operation, print the book_id, the book_name, and the number of copies currently available. ------ Constraints ------ 1 ≤ n ≤ 1000 1 ≤ book_id ≤ 10^6 book_name will contain only alphabets and will not exceed 100 characters in length. ----- Sample Input ------ 10 ADD 1 HarryPotter ADD 2 LordOfTheRings ISSUE 1 ISSUE 1 RETURN 1 INVENTORY 1 INVENTORY 2 ADD 2 LordOfTheRings INVENTORY 2 INVENTORY 3 ----- Sample Output ------ 1 HarryPotter 1 2 LordOfTheRings 1 2 LordOfTheRings 2","solution":"class LibraryManagementSystem: def __init__(self): self.inventory = {} def add_book(self, book_id, book_name): if book_id in self.inventory: self.inventory[book_id][\'quantity\'] += 1 else: self.inventory[book_id] = {\'name\': book_name, \'quantity\': 1} def issue_book(self, book_id): if book_id in self.inventory and self.inventory[book_id][\'quantity\'] > 0: self.inventory[book_id][\'quantity\'] -= 1 def return_book(self, book_id): if book_id in self.inventory: self.inventory[book_id][\'quantity\'] += 1 def check_inventory(self, book_id): if book_id in self.inventory: return book_id, self.inventory[book_id][\'name\'], self.inventory[book_id][\'quantity\'] return book_id, None, 0 def process_operations(n, operations): lms = LibraryManagementSystem() result = [] for operation in operations: parts = operation.split() action = parts[0] if action == \\"ADD\\": book_id, book_name = int(parts[1]), parts[2] lms.add_book(book_id, book_name) elif action == \\"ISSUE\\": book_id = int(parts[1]) lms.issue_book(book_id) elif action == \\"RETURN\\": book_id = int(parts[1]) lms.return_book(book_id) elif action == \\"INVENTORY\\": book_id = int(parts[1]) result.append(lms.check_inventory(book_id)) return result"},{"question":"Given an array of N integers, each element representing the height of a building, and another array R containing Q queries each denoting a triplet of integers {l, r, k}. Answer all Q queries asking whether there is a building with height greater than or equal to k in the subarray ranging from l to r (both inclusive). Note: The array A is 0-based but the queries will be 1-based. Example 1: Input: N=5, Q=3 A={3, 1, 4, 2, 5} R={{1, 3, 4}, {2, 4, 2}, {1, 5, 6}} Output: yes yes no Explanation: There is a building with height greater than or equal to 4 in the range [1, 3], which is 4. There is a building with height greater than or equal to 2 in the range [2, 4], which is 4. There is no building with height greater than or equal to 6 in the range [1, 5]. Example 2: Input: N=7, Q=2 A={1, 3, 9, 7, 8, 4, 2} R={{3, 6, 7}, {1, 7, 10}} Output: yes no Explanation: There is a building with height greater than or equal to 7 in the range [3, 6], which is 9. There is no building with height greater than or equal to 10 in the range [1, 7]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkHeights() which takes the two numbers N and Q as well as the two arrays A and R as input parameters and returns the answers of all Q queries. Expected Time Complexity: O(N * Q) Expected Auxiliary Space: O(Q) Constraints: 1<=N,Q<=10^5 1<=A[i]<=10^6 1<=l<=r<=N 1<=k<=10^6","solution":"def checkHeights(N, Q, A, R): Returns the answers for all queries about whether there is a building with height greater than or equal to k in the subarray ranging from l to r (both inclusive). N: number of buildings Q: number of queries A: list of integers representing building heights R: list of queries each being a list [l, r, k] results = [] for query in R: l, r, k = query # Convert 1-based indices to 0-based indices l -= 1 r -= 1 if any(height >= k for height in A[l:r + 1]): results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"David loves working with numbers and finding interesting patterns in them. Recently, he discovered a special sequence of numbers called \\"happy numbers.\\" A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. Your task is to write a program to determine if a given number is a happy number. -----Input----- A single line contains an integer n (1 ≤ n ≤ 10^9). -----Output----- Print \\"YES\\" if the number n is a happy number, and \\"NO\\" otherwise. -----Examples----- Input 19 Output YES Input 20 Output NO","solution":"def is_happy_number(n): Returns YES if n is a happy number, otherwise NO. def get_next_number(num): return sum(int(digit) ** 2 for digit in str(num)) seen_numbers = set() while n != 1 and n not in seen_numbers: seen_numbers.add(n) n = get_next_number(n) return \\"YES\\" if n == 1 else \\"NO\\""},{"question":"You have been dispatched to the mystical land of Binary Trees! Here, you will encounter a balanced binary tree with n nodes, where n is always a power of 2. Your task is to find the value of the deepest node that is the least common ancestor (LCA) of all leaf nodes of the tree. If the tree is drawn such that root is at level 0, the next level is 1, and so on, we can represent each node by their level and position: (l, p) where l is the level and p is the position at that level from left to right starting from 0. For a balanced binary tree: 1. The root node is (0, 0). 2. Each internal node (l, p) has two children: left child at (l+1, 2p) and right child at (l+1, 2p + 1). 3. The leaf nodes lie at level log_2(n) (which we\'ll call L). Your task is to identify the node (l, p) which is the deepest node that is the LCA for all leaf nodes, and output the pair (l, p). -----Input----- The first line of input contains an integer t (1 le t le 500), the number of test cases. Each test case consists of a single integer n (2 le n le 10^9), which is the number of nodes in the binary tree. It is guaranteed that n is always a power of 2. -----Output----- For each test case, output a single line containing two space-separated integers, l and p, which represent the level and position of the deepest node that is the least common ancestor of all leaf nodes. -----Example----- Input 2 4 16 Output 1 0 2 0","solution":"def deepest_lca_node(n): Returns the level (l) and position (p) of the deepest node that is the LCA of all leaf nodes in a balanced binary tree with n nodes. from math import log2 # Calculate the deepest level `L` where the leaf nodes are found L = int(log2(n)) # The LCA of all leaf nodes in a balanced binary tree is at level L-1 and position 0 return (L - 1, 0)"},{"question":"Ella is managing a warehouse and needs to optimize the storage of her items. The warehouse consists of a series of storage units arranged in a line, each having a specified capacity. To utilize the available space efficiently, Ella wants to store items in such a way that the total wasted space is minimized. The wasted space for a unit is defined as the unused capacity in that unit after storing an item. You are given the capacities of n storage units in the order they appear in the warehouse and the sizes of m items that need to be stored. You need to assign each item to exactly one storage unit such that the total wasted space is minimized. If it is not possible to store all the items, return -1. Input Format: The first line of input contains two space-separated integers n and m. The second line contains n space-separated integers representing the capacities of the storage units. The third line contains m space-separated integers representing the sizes of the items. Output Format: Print the minimized total wasted space if it is possible to store all items, otherwise print -1. Constraints: - 1 ≤ n, m ≤ 500 - 1 ≤ capacity of each storage unit, size of each item ≤ 10^6 SAMPLE INPUT 5 3 10 15 8 6 20 5 12 7 SAMPLE OUTPUT 5 Explanation: One way to minimize the wasted space is: - Store the item of size 5 in the storage unit with capacity 10 (wasted space = 10 - 5 = 5). - Store the item of size 12 in the storage unit with capacity 15 (wasted space = 15 - 12 = 3). - Store the item of size 7 in the storage unit with capacity 8 (wasted space = 8 - 7 = 1). So the total wasted space in this arrangement is 5 + 3 + 1 = 9. However, this is not the minimum total wasted space possible. The minimum total wasted space is obtained by the following arrangement: - Store the item of size 5 in the storage unit with capacity 6 (wasted space = 1). - Store the item of size 12 in the storage unit with capacity 15 (wasted space = 3). - Store the item of size 7 in the storage unit with capacity 8 (wasted space = 1). So, the minimized total wasted space is 1 + 3 + 1 = 5.","solution":"def minimize_wasted_space(n, m, capacities, sizes): Returns the minimized total wasted space if it is possible to store all items, otherwise returns -1. if n < m: return -1 capacities.sort() sizes.sort() total_wasted_space = 0 items_index = 0 for capacity in capacities: if items_index >= m: break if capacity >= sizes[items_index]: total_wasted_space += capacity - sizes[items_index] items_index += 1 return total_wasted_space if items_index == m else -1"},{"question":"You have a rectangular grid with n rows and m columns. Each cell in the grid has a positive integer value representing the amount of gold in that cell. You need to determine the maximum amount of gold you can collect if you start from any cell in the first column and can only move to the right, to the right-up, or to the right-down. Formally, you start from any cell in the first column and, from any cell (i, j), you can move to (i, j+1), (i-1, j+1), or (i+1, j+1), provided such cells are within the boundaries of the grid. -----Input----- The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. Each test case begins with two integers n and m (1 leq n, m leq 20) — the number of rows and columns in the grid, respectively. The next n lines each contain m integers — the gold amounts in the respective cells of the grid. -----Output----- For each test case, output a single integer — the maximum amount of gold you can collect starting from any cell in the first column. -----Examples----- Input 2 3 3 1 3 3 2 1 4 0 6 4 4 4 1 3 1 5 2 2 4 1 5 0 2 3 0 6 1 2 Output 12 16 -----Notes----- In the first test case, if you start in the first column of the second row with value 2, you can collect gold from cells (2,1), (3,2), and (3,3) to get 2 + 6 + 4 = 12. In the second test case, one of the optimal paths starts from cell (3,1), going to (4,2), and then (3,3) to (4,4) to collect gold. The maximum amount of gold collected from this path is 5 + 6 + 2 + 3 = 16.","solution":"def max_gold_collected(test_cases): results = [] for test_case in test_cases: n, m, grid = test_case # dp will store the maximum gold collected up to each cell dp = [[0] * m for _ in range(n)] # Initialize the dp table with the gold amounts in the first column for i in range(n): dp[i][0] = grid[i][0] # Fill the dp table for j in range(1, m): for i in range(n): # Collect gold from the left (j-1) left = dp[i][j-1] # Collect gold from the left-up (i-1, j-1) if i-1 >= 0: left_up = dp[i-1][j-1] else: left_up = 0 # Collect gold from the left-down (i+1, j-1) if i+1 < n: left_down = dp[i+1][j-1] else: left_down = 0 dp[i][j] = grid[i][j] + max(left, left_up, left_down) # The result for this test case is the max value in the last column max_gold = max(dp[i][m-1] for i in range(n)) results.append(max_gold) return results"},{"question":"Write a function that determines if a given string contains any repeating characters. ------ Input Format ------ A single line of input containing a string s. The string will be non-empty and consist of only lowercase English letters. ------ Output Format ------ Output \\"Yes\\" if the string contains repeating characters, otherwise output \\"No\\". ------ Constraints ------ 1 ≤ |s| ≤ 100 ----- Sample Input 1 ------ hello ----- Sample Output 1 ------ Yes ----- Explanation 1 ------ The character \'l\' repeats in the string \\"hello\\". ----- Sample Input 2 ------ world ----- Sample Output 2 ------ No ----- Explanation 2 ------ None of the characters in the string \\"world\\" repeat.","solution":"def contains_repeating_characters(s): Determines if the input string contains any repeating characters. Args: s (str): The input string consisting of only lowercase English letters. Returns: str: \\"Yes\\" if the string contains repeating characters, otherwise \\"No\\". seen = set() for char in s: if char in seen: return \\"Yes\\" seen.add(char) return \\"No\\""},{"question":"Given an array of integers, find the minimum length of the subarray that, if sorted, results in the entire array being sorted. If the array is already sorted, return 0. For example: Given the array [2, 6, 4, 8, 10, 9, 15], you should return 5. The subarray [6, 4, 8, 10, 9] needs to be sorted in order for the entire array to be sorted. Function Signature: `int findUnsortedSubarray(vector<int>& nums)` # Input: - A list of integers `nums` (1 ≤ nums.length ≤ 10^4, -10^5 ≤ nums[i] ≤ 10^5) # Output: - Return the minimal length of the continuous subarray # Sample Input and Output Example 1: ``` Input: [2, 6, 4, 8, 10, 9, 15] Output: 5 ``` Example 2: ``` Input: [1, 2, 3, 4] Output: 0 ``` Example 3: ``` Input: [1, 3, 2, 2, 2] Output: 4 ``` # Constraints: - You must read input from STDIN and print the output to STDOUT - Consider using a method that ensures the time complexity is no worse than O(n log n) for sorting based approaches or O(n) for linear scan approaches.","solution":"def findUnsortedSubarray(nums): Finds the minimum length of the subarray that if sorted, results in the entire array being sorted. Parameters: nums (list of int): The input array of integers. Returns: int: The minimal length of the subarray. n = len(nums) if n <= 1: return 0 start, end = 0, -1 max_seen, min_seen = float(\'-inf\'), float(\'inf\') # Traverse from left to right to find the end of the unsorted subarray for i in range(n): max_seen = max(max_seen, nums[i]) if nums[i] < max_seen: end = i # Traverse from right to left to find the start of the unsorted subarray for i in range(n - 1, -1, -1): min_seen = min(min_seen, nums[i]) if nums[i] > min_seen: start = i return end - start + 1"},{"question":"A warehouse has a robotic picking system that stores items in bulk. The system tracks each item with a unique identification number and stores the quantity of each item in the system. Given a list of item IDs and their quantities, your task is to write a program that retrieves the item IDs in descending order of their quantities. If two items have the same quantity, sort them by their item ID in ascending order. Input: The first line contains an integer N, the number of items. The next N lines each contain two integers, the item ID and the quantity. Output: Print the item IDs in the order specified above. Constraints: 1 ≤ N ≤ 1000 1 ≤ item_id ≤ 1000000 1 ≤ quantity ≤ 10000 SAMPLE INPUT 5 1001 10 1002 15 1003 10 1004 12 1005 15 SAMPLE OUTPUT 1002 1005 1004 1001 1003","solution":"def retrieve_item_ids(n, items): Retrieves the item IDs sorted by descending order of their quantities. If quantities are the same, the items are sorted by their item IDs in ascending order. :param n: Number of items :param items: List of tuples, each containing an item ID and its quantity :return: List of item IDs sorted based on the criteria # Sort the list of items first by quantity in descending order # and then by item ID in ascending order if quantities are the same sorted_items = sorted(items, key=lambda x: (-x[1], x[0])) # Extract only the item IDs in the required order sorted_ids = [item_id for item_id, quantity in sorted_items] return sorted_ids"},{"question":"Given a string, you need to find the longest substring that contains at most two distinct characters. -----Input----- The input consists of a single string s (1 le |s| le 10^5). The string consists of only lowercase English letters. -----Output----- Output the length of the longest substring that contains at most two distinct characters. -----Example----- Input eceba Output 3 -----Explanation----- In the input example, \\"ece\\" is the longest substring with at most 2 distinct characters, which has a length of 3. Input ccaabbb Output 5 -----Explanation----- In the input example, \\"aabbb\\" is the longest substring with at most 2 distinct characters, which has a length of 5.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most two distinct characters. if len(s) == 0: return 0 max_length = 0 left = 0 char_map = {} for right in range(len(s)): char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"A Digital Garden / Digital Botanical Garden Story Riku is an avid gardener who loves growing different types of flowers in her digital garden. In this garden, each type of flower is represented by a unique lowercase letter, and a sequence of flowers is represented by a string. Over time, Riku has developed a very specific preference for certain patterns of flowers. She realizes that some specific substring patterns make her garden extraordinarily beautiful. For instance, she particularly likes the sequence \\"garden\\" and often checks if it appears in different parts of her flower sequences. However, maintaining the garden has become difficult, and Riku needs help identifying the number of times her favorite patterns occur in the garden. Your task is to help Riku by counting how many times a given pattern appears as a substring in her digital garden. Problem Given a string G representing Riku\'s digital garden and a string P representing her favorite pattern, determine how many times P appears as a substring in G. Input The input consists of two lines: 1. G: a string of lowercase letters (1 ≤ |G| ≤ 10^3) representing Riku\'s garden. 2. P: a string of lowercase letters (1 ≤ |P| ≤ 100) representing Riku\'s favorite pattern. Output Output one line containing a single integer: the number of times P appears as a substring in G. Example Input gardenofgardeniasgarden garden Output 3 In this case, the pattern \\"garden\\" appears 3 times in the garden string: at the beginning, just before \\"ias\\", and at the end.","solution":"def count_pattern_occurrences(G, P): Counts how many times pattern P appears as a substring in the garden string G. :param G: str, the garden string :param P: str, the favorite pattern :return: int, the number of times pattern P appears in string G count = 0 start = 0 while start <= len(G) - len(P): pos = G.find(P, start) if pos == -1: break count += 1 start = pos + 1 return count"},{"question":"Imagine you are a software engineer hired to optimize air traffic at a busy airport. You need to write a program that helps the airport staff manage the arrival and departure timing of planes efficiently. The airport operates using two runways, and your goal is to ensure that there are no conflicts between the landing and take-off times of the airplanes. You are provided with two lists of tuples: - One list contains the scheduled landing times of planes. - The other list contains the scheduled departure times. Each tuple consists of a plane identifier (string), start time (integer), and end time (integer) where start time and end time represent the time when the runway is expected to be occupied by that particular plane. Your task is to determine if there are any conflicts in the schedule. A conflict occurs if two planes are scheduled to occupy the same runway at overlapping times. If a conflict is detected, output \\"Conflict detected\\" along with the plane identifiers involved in the conflict; otherwise, output \\"No conflicts.\\" Example: ```python landings = [(\\"PlaneA\\", 1, 3), (\\"PlaneB\\", 4, 6)] departures = [(\\"PlaneC\\", 2, 5), (\\"PlaneD\\", 7, 9)] Output: Conflict detected: (\\"PlaneA\\", \\"PlaneC\\") ``` Input: - Two lists of tuples: - `landings`: List of tuples [(str, int, int)] - `departures`: List of tuples [(str, int, int)] Output: - String, indicating whether there is a conflict, and if so, the conflicting plane identifiers. Note: - Consider the times are in a 24-hour format and represented as integers (e.g., `13` for 1 PM). - Each plane will occupy a runway exclusively between the start time and end time (inclusive).","solution":"def detect_conflicts(landings, departures): Determine if there are any conflicts in the arrival and departure timings of planes at the airport. Args: - landings: List of tuples [(str, int, int)] where each tuple contains the plane identifier, start time, and end time for landing. - departures: List of tuples [(str, int, int)] where each tuple contains the plane identifier, start time, and end time for departure. Returns: - String indicating whether there is a conflict, and if so, the conflicting plane identifiers. # Function to check if two time intervals overlap def overlap(start1, end1, start2, end2): return start1 <= end2 and end1 >= start2 # Check for conflicts between landing and departure times for l_plane, l_start, l_end in landings: for d_plane, d_start, d_end in departures: if overlap(l_start, l_end, d_start, d_end): return f\\"Conflict detected: ({l_plane}, {d_plane})\\" return \\"No conflicts\\""},{"question":"Binary Search Tree - Find Minimum Element Implement a function `findMinElement()` that accepts the root of a binary search tree (BST) and returns the minimum element in the BST. A binary search tree is a binary tree in which each node has at most two children, and for every node, the left child\'s value is less than the node\'s value, and the right child\'s value is greater than the node\'s value. The function should follow these guidelines: 1. The tree nodes will contain integer values. 2. If the tree is empty, the function should return `None`. ```python class TreeNode: def __init__(self, data, left=None, right=None): self.data = data self.left = left self.right = right def findMinElement(root: TreeNode) -> int: # Your code here pass ```","solution":"class TreeNode: def __init__(self, data, left=None, right=None): self.data = data self.left = left self.right = right def findMinElement(root: TreeNode) -> int: Returns the minimum element in a binary search tree. Args: root (TreeNode): The root of the binary search tree. Returns: int: The minimum element in the tree or None if the tree is empty. if root is None: return None current = root while current.left is not None: current = current.left return current.data"},{"question":"A social network platform allows users to follow each other. You are tasked with determining the number of unique followers each user has. Every user is represented by an integer from 1 to n. You will be given a series of pairs, where the first integer in each pair indicates the user doing the following, and the second integer indicates the user being followed. Write a program to calculate the number of unique followers for each user. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of users and the number of pairs of follow actions. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v) representing a follow action where user u follows user v. -----Output----- Print n integers. The ith integer should be the number of unique followers user i has. -----Examples----- Input 5 4 1 2 2 3 1 3 4 3 Output 0 1 3 0 0 Input 3 3 1 2 2 3 3 1 Output 1 1 1 Input 4 5 1 2 2 3 3 4 1 3 2 4 Output 0 1 2 2 -----Note----- In the first example: - User 1 is not followed by anyone. - User 2 is followed by user 1. - User 3 is followed by users 1, 2, and 4. - User 4 is not followed by anyone. - User 5 is not followed by anyone. In the second example, there is a cycle where each user follows one another. All users have one unique follower. In the third example, user 1 follows 2, user 2 follows 3, and both users 1 and 2 follow user 3, resulting in unique counts for followers of each user.","solution":"def unique_followers_count(n, m, follow_pairs): followers = {i: set() for i in range(1, n+1)} for u, v in follow_pairs: followers[v].add(u) result = [0] * n for i in range(1, n+1): result[i-1] = len(followers[i]) return result # Example usage n = 5 m = 4 follow_pairs = [(1, 2), (2, 3), (1, 3), (4, 3)] print(unique_followers_count(n, m, follow_pairs)) # Output: [0, 1, 3, 0, 0]"},{"question":"You are given a grid of size n x m filled with integers. Your task is to determine the size of the largest connected group of cells that all contain the same integer. Two cells are considered connected if they share an edge (i.e. they are horizontal or vertical neighbors). Input The first line contains two integers, n and m (1 ≤ n, m ≤ 50), representing the number of rows and columns in the grid, respectively. The next n lines each contain m integers. Each integer in the grid is between 0 and 9, inclusive. Output Print a single integer — the size of the largest connected group of cells that all contain the same integer. Examples Input 4 5 1 2 2 3 4 2 2 2 3 4 3 3 2 0 0 4 0 0 0 0 Output 6 Input 3 3 1 1 1 2 2 2 3 3 3 Output 3","solution":"def largest_connected_group(n, m, grid): def dfs(x, y, value, visited): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != value or visited[x][y]: return 0 visited[x][y] = True return 1 + dfs(x + 1, y, value, visited) + dfs(x - 1, y, value, visited) + dfs(x, y + 1, value, visited) + dfs(x, y - 1, value, visited) visited = [[False] * m for _ in range(n)] max_group_size = 0 for i in range(n): for j in range(m): if not visited[i][j]: max_group_size = max(max_group_size, dfs(i, j, grid[i][j], visited)) return max_group_size"},{"question":"A company wants to modernize its internal employee management system. They need a program that processes and manages the list of employees who are attending a particular training program. Your task is to design a function that allows the system to evaluate the invitation list dynamically. Specifically, you need to generate a list of employees who have accepted the invitation based on the employee IDs included in the original list and the updates received over time. Each update consists of either adding an employee ID to the list of attendees or removing an employee ID if they revoke their acceptance. The final list of attendees should reflect all updates accurately. **Function signature:** `def manage_invitation_list(n: int, updates: List[Tuple[str, int]]) -> List[int]:` **Parameters:** - `n` (int): The initial number of employees invited. Each employee has a unique ID from 1 to n. - `updates` (List[Tuple[str, int]]): A list of tuples where each tuple consists of a string (\\"add\\" or \\"remove\\") and an integer representing the employee ID for the respective action. **Returns:** - `List[int]`: A list of employee IDs who have accepted the invitation after processing all updates. The list should be sorted in ascending order. **Example** ```python Input: n = 5 updates = [(\\"add\\", 1), (\\"remove\\", 2), (\\"add\\", 3), (\\"add\\", 2), (\\"remove\\", 1)] Output: [2, 3] ``` **Explanation:** - Initially, the invitation list is empty. - The first update is `(\\"add\\", 1)`, so employee 1 is added to the list. - The second update is `(\\"remove\\", 2)`, but since employee 2 is not in the list, nothing changes. - The third update is `(\\"add\\", 3)`, so employee 3 is added to the list. - The fourth update is `(\\"add\\", 2)`, so employee 2 is added to the list. - The fifth update is `(\\"remove\\", 1)`, so employee 1 is removed from the list. - The final list is [2, 3] sorted in ascending order. **Note:** - The updates can contain both valid and invalid actions. For example, attempting to remove an employee ID that is not in the list will have no effect. The function should handle such cases gracefully. - The order of adding and removing should be maintained as provided in the updates. The final list should correctly represent all valid actions performed sequentially.","solution":"def manage_invitation_list(n: int, updates: list) -> list: Manages the list of attendees based on given updates. Parameters: - n (int): The initial number of employees invited. - updates (List[Tuple[str, int]]): A list of tuples where each tuple consists of a string (\\"add\\" or \\"remove\\") and an integer representing the employee ID. Returns: - List[int]: A list of employee IDs who have accepted the invitation after processing all updates. The list is sorted in ascending order. attendees = set() # Using a set to store current attendees for efficient add/remove operations. for action, employee_id in updates: if action == \\"add\\": attendees.add(employee_id) elif action == \\"remove\\": attendees.discard(employee_id) # discard does nothing if the element is not present return sorted(attendees)"},{"question":"You are given a sequence of N integers, arr[1], arr[2], ..., arr[N]. Your task is to find the length of the largest subsequence which contains elements in strictly alternating parity (i.e., odd-even-odd or even-odd-even, etc.). A subsequence is a sequence derived by deleting some or none of the elements of the array without changing the order of the remaining elements. # Input - The first line contains an integer T - the number of test cases. - Each of the next T test cases is described in two lines: - The first line contains a single integer N - the length of the sequence. - The second line contains N space-separated integers arr[1], arr[2], ..., arr[N] - the elements of the sequence. # Output For each test case, output a single integer denoting the length of the largest subsequence with strictly alternating parity. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ arr[i] ≤ 10^9 # Example Input 2 5 1 2 3 4 5 4 2 4 6 8 Output 5 1 Explanation - In the first test case, the entire sequence [1, 2, 3, 4, 5] is already alternating in parity. - In the second test case, since all the numbers are even, the longest alternating parity subsequence has length 1 with any single element.","solution":"def largest_alternating_subsequence_length(arr): if not arr: return 0 # Initialize the count with 1 assuming at least one element is there count = 1 # Iterate through the array to find the longest alternating subsequence for i in range(1, len(arr)): if (arr[i] % 2) != (arr[i-1] % 2): count += 1 return count def process_test_cases(test_cases): results = [] for N, arr in test_cases: results.append(largest_alternating_subsequence_length(arr)) return results # Example usage: # test_cases = [ # (5, [1, 2, 3, 4, 5]), # (4, [2, 4, 6, 8]) # ] # print(process_test_cases(test_cases)) # Output: [5, 1]"},{"question":"You are given a string s representing a sequence of lowercase alphabets. For each character c in the string, you can choose to replace it with the nearest lexicographically larger character. If no larger character exists (i.e., for \'z\'), it will remain the same. Your task is to determine the number of unique strings that can be generated by performing zero or more of these character replacements on the given original string. Note: The lexicographically larger character replacement operation can only be performed once for each character in the string. -----Input----- The input consists of a single string s of length n (1 ≤ n ≤ 1000), consisting of only lowercase alphabets. -----Output----- Print a single integer — the number of unique strings that can be generated. -----Examples----- Input abc Output 8 Input zzz Output 1","solution":"def count_unique_strings(s: str) -> int: Returns the number of unique strings that can be generated by performing zero or more lexicographical character replacements on the given string s. # There are two choices for each character: stay same or replace # Total number of unique strings is 2^n where n is the length of the string n = len(s) return 2 ** n"},{"question":"Ravi is a computer science student who is very interested in numbers and their properties. He likes to explore and play with different number sequences. One day, he came across an interesting sequence called the \\"Almost Sorted Sequence.\\" A sequence is considered \\"Almost Sorted\\" if it follows these rules: 1. Each element in the sequence can be equal to or greater than the preceding element. 2. There can be at most one inversion, where an element is smaller than the preceding element. Given an array of integers, Ravi wants to determine if the array can be converted into an \\"Almost Sorted Sequence\\" by removing at most one element from the array. Help Ravi solve this problem. Input: The first line contains an integer N indicating the size of the array. The second line contains N space-separated integers, representing the elements of the array. Output: Print \\"YES\\" if the array can be converted into an \\"Almost Sorted Sequence\\" by removing at most one element. Otherwise, print \\"NO\\". Constraints: 1 ≤ N ≤ 10^5 1 ≤ Array Value ≤ 10^9 SAMPLE INPUT 1: 5 10 5 7 10 12 SAMPLE OUTPUT 1: YES SAMPLE INPUT 2: 4 3 4 2 1 SAMPLE OUTPUT 2: NO Explanation: In the first sample example, removing the element \'5\' results in the sequence [10, 7, 10, 12], which follows the rules of an \\"Almost Sorted Sequence.\\" In the second sample example, no matter which element you remove, the array cannot be converted into an \\"Almost Sorted Sequence.\\"","solution":"def can_convert_to_almost_sorted_sequence(arr): Determines if the array can be converted into an \'Almost Sorted Sequence\' by removing at most one element. def is_sorted_or_one_removal_possible(arr): removed = False for i in range(1, len(arr)): if arr[i] < arr[i-1]: if removed: return False removed = True # Check if removing arr[i] or arr[i-1] helps if i == 1 or arr[i] >= arr[i-2]: continue elif i == len(arr) - 1 or arr[i+1] >= arr[i-1]: arr[i-1] = arr[i-2] # Temporarily make the list \\"skip\\" arr[i-1] else: return False return True return \\"YES\\" if is_sorted_or_one_removal_possible(arr) else \\"NO\\""},{"question":"Sarah is building a custom calendar application. Each time a user adds an event, Sarah wants to automatically check if the event conflicts with any existing events for that user. Events are stored as tuples consisting of a start time and an end time. If the new event overlaps with any existing event, it should be flagged as a conflict. Your task is to write a function `hasConflict(events, new_event)` to determine whether the new event conflicts with any existing events. Two events are considered to conflict if their time intervals overlap. The function will receive two arguments: 1. `events`: a list of tuples, where each tuple represents an event\'s start time and end time. An event tuple is formatted as `(start, end)` with `start` and `end` as non-negative integers representing the time in minutes past midnight. 2. `new_event`: a tuple representing the new event’s start time and end time, formatted the same way as the events in the list. Return `True` if there is a conflict, otherwise return `False`. -----Input Format----- - The list `events` contains up to 10^3 events. - Each event tuple `(start, end)` will satisfy 0 leq start < end leq 1440 (where 1440 is the number of minutes in a day). - The tuple `new_event` also satisfies these conditions. -----Output Format----- - Return `True` if there is a conflict with the `new_event`, otherwise return `False`. -----Examples----- Input: events = [(60, 120), (150, 210), (300, 360)] new_event = (100, 200) Output: True Input: events = [(60, 120), (150, 210), (300, 360)] new_event = (210, 300) Output: False [Note] In the first example, the new event (100, 200) overlaps with the existing event (60, 120) and (150, 210). In the second example, the new event (210, 300) does not overlap with any existing events.","solution":"def hasConflict(events, new_event): Determines if new_event conflicts with any existing events. Args: events (list of tuples): List of existing events where each is represented as (start, end). new_event (tuple): The new event represented as (start, end). Returns: bool: True if there is a conflict, otherwise False. new_start, new_end = new_event for event in events: start, end = event if new_start < end and new_end > start: return True return False"},{"question":"Given a binary search tree (BST), you need to find the k-th smallest element in the BST. A binary search tree is a binary tree in which for each node: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. Write a function `kth_smallest_element` that takes the root of the BST and an integer k, and returns the k-th smallest element in the BST. You may assume k is always valid, i.e., 1 ≤ k ≤ number of nodes in the BST. # Input Format - The input consists of multiple test cases. - Each test case consists of: - The number of nodes in the BST followed by the values of those nodes. - An integer k for which you need to find the k-th smallest element in the BST. # Output Format - For each test case, output a single integer which is the k-th smallest element in the BST. # Sample Input ``` 2 5 3 8 1 4 1 5 3 8 1 4 3 ``` # Sample Output ``` 3 4 ``` # Explanation Test case 1: - The BST formed from the nodes [5, 3, 8, 1, 4] is: ``` 5 / 3 8 / 1 4 ``` - The in-order traversal of the BST is [1, 3, 4, 5, 8]. - The 1st smallest element is 1. - The 2nd smallest element is 3. - The 3rd smallest element is 4. - The 4th smallest element is 5. - The 5th smallest element is 8. Test case 2: - The BST formed from the nodes [5, 3, 8, 1, 4] is: ``` 5 / 3 8 / 1 4 ``` - The in-order traversal of the BST is [1, 3, 4, 5, 8]. - The 1st smallest element is 1. - The 2nd smallest element is 3. - The 3rd smallest element is 4. - The 4th smallest element is 5. - The 5th smallest element is 8. Therefore, for the given test cases, the outputs are 3 and 4 respectively.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def insert_into_bst(root, val): if not root: return TreeNode(val) if val < root.val: root.left = insert_into_bst(root.left, val) else: root.right = insert_into_bst(root.right, val) return root def build_bst_from_list(values): root = None for value in values: root = insert_into_bst(root, value) return root def inorder_traversal(root, result): if root: inorder_traversal(root.left, result) result.append(root.val) inorder_traversal(root.right, result) def kth_smallest_element(root, k): result = [] inorder_traversal(root, result) return result[k-1] # Helper function to handle input and output in specified format def process_input(input_str): lines = input_str.splitlines() num_tests = int(lines[0]) results = [] for i in range(1, num_tests*2, 2): values = list(map(int, lines[i].split())) k = int(lines[i+1]) root = build_bst_from_list(values) results.append(kth_smallest_element(root, k)) for result in results: print(result)"},{"question":"Longest Substring Without Repeating Characters * Write a function named ```LongestSubstring``` that takes a string parameter and returns the length of the longest substring without repeating characters. * A substring is a contiguous sequence of characters within a string. Identify the maximum length of such a substring where each character appears only once. Example: - Given input: ```\\"abcabcbb\\"``` - The longest substring without repeating characters is ```\\"abc\\"```, which has a length of 3. - Given input: ```\\"bbbbb\\"``` - The longest substring without repeating characters is ```\\"b\\"```, which has a length of 1. - Given input: ```\\"pwwkew\\"``` - The longest substring without repeating characters is ```\\"wke\\"```, which has a length of 3 (Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring). Constraints: - The input string will contain only English letters (lower-case and upper-case). - The maximum length of the input string will be 1000 characters.","solution":"def LongestSubstring(s): Returns the length of the longest substring without repeating characters. :param s: str :return: int char_index_map = {} longest = 0 start = 0 for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"Lena is planning a party and wants to invite her colleagues. She has a list of N colleagues and a specific budget to host them. Each colleague has a unique ID (from 1 to N) and an associated cost for attending the party. Lena wants to maximize the number of colleagues she can invite without exceeding her budget. Write a program to determine the maximum number of colleagues Lena can invite with her available budget. ------ Input Format ------ - The first line of input contains two integers N and B, where N is the number of colleagues and B is the maximum budget Lena has for the party. - The second line contains N space-separated integers, where the i-th integer represents the cost for the i-th colleague. ------ Output Format ------ Print a single integer that represents the maximum number of colleagues Lena can invite within her budget. ------ Constraints ------ 1≤ N≤ 10^{4} 1≤ B≤ 10^{9} 1≤ cost_{i} ≤ 10^4 for each colleague\'s cost ----- Sample Input 1 ------ 5 50 10 20 30 40 50 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ Lena can invite colleagues with costs 10 and 20, spending a total of 30, or colleagues with costs 10 and 30 spending a total of 40. Both these options allow her to invite 2 colleagues out of the 5 within the budget of 50. Any other combination would either invite fewer colleagues or exceed the budget. ----- Sample Input 2 ------ 4 100 10 20 30 40 ----- Sample Output 2 ------ 4 ----- Explanation 2 ------ Lena can invite all 4 colleagues since the total cost (10 + 20 + 30 + 40 = 100) is exactly within her budget.","solution":"def max_invitees(N, B, costs): Returns the maximum number of colleagues Lena can invite within the budget B. N: int - Number of colleagues B: int - Budget costs: List[int] - List of costs for each colleague # Sort the list of costs costs.sort() invited = 0 total_cost = 0 for cost in costs: if total_cost + cost <= B: total_cost += cost invited += 1 else: break return invited"},{"question":"Little John has taken an interest in designing simple mazes based on a grid of cells, each of which can either be open (\\".\\") or blocked (\\"#\\"). He defines a valid maze path as a sequence of pairwise distinct open cells where each consecutive pair of cells shares a common side. Additionally, his path should start at a designated starting cell and end at a designated ending cell. John is curious if his initial design meets the criteria for having at least one valid maze path. Help John determine whether there\'s a valid path from the starting cell to the ending cell in his maze. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the maze, respectively. Each of the following n lines contains m characters each — the maze grid where \\".\\" represents an open cell and \\"#\\" represents a blocked cell. The last two lines will each contain two integers, defining the starting cell (si, sj) and the ending cell (ei, ej), respectively. Output Output \\"YES\\" if there is a valid maze path from the starting cell to the ending cell. Otherwise, output \\"NO\\". Examples Input 5 5 ..... .#.#. .#.#. .#.#. ..... 1 1 5 5 Output YES Input 5 5 # #.#.# # #.#.# # 1 1 5 5 Output NO Input 7 7 ....... .#. .....#. .#....# .#.#. .#..... ....... 1 1 7 7 Output YES Input 3 3 .#. #.# .#. 1 1 3 3 Output NO Note In the first example, there exists a valid path from cell (1,1) to cell (5,5) that takes a circuitous route around the blocked cells. In the second example, the entire maze is blocked, so no valid path exists. In the third example, there are multiple possible valid paths from (1,1) to (7,7), bypassing the blocked regions. In the fourth example, the open cells are isolated and not connecting the start and end cells, hence no valid path exists.","solution":"def is_valid_path(n, m, maze, start, end): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and maze[x][y] == \'.\' def dfs(x, y): if (x, y) == end: return True visited.add((x,y)) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: if dfs(nx, ny): return True return False directions = [(-1,0), (1,0), (0,-1), (0,1)] visited = set() si, sj = start ei, ej = end if maze[si][sj] == \\"#\\" or maze[ei][ej] == \\"#\\": return \\"NO\\" return \\"YES\\" if dfs(si, sj) else \\"NO\\" # Example usage: # print(is_valid_path(5, 5, [\\".....\\", \\".#.#.\\", \\".#.#.\\", \\".#.#.\\", \\".....\\"], (0, 0), (4, 4))) # should return \\"YES\\""},{"question":"In a town, the local government decided to issue special permits to a certain number of citizens for various events. Each citizen has a unique ID and a certain number of years they have lived in the town. Due to limited resources, the government decided to prioritize senior citizens for the permits based on how long they have lived in the town. There are n citizens in the town and the government will issue k permits. If two citizens have lived in the town for the same number of years, the citizen with the smaller ID will be given the permit first. -----Input----- The first line contains two integers n and k (1 leq n, k leq 1000) — the number of citizens and the number of permits. Each of the next n lines contains two integers id_i and y_i (1 leq id_i leq 10000, 1 leq y_i leq 100), where id_i is the ID of the citizen and y_i is the number of years the citizen has lived in the town. -----Output----- Print k lines containing the IDs of the citizens who will receive the permits, in the order of priority. -----Examples----- Input 5 3 101 20 103 10 102 30 104 30 105 10 Output 102 104 101 Input 4 2 201 15 202 15 203 20 204 10 Output 203 201 -----Note----- In the first example, there are 5 citizens, and the government will issue 3 permits. The citizens with IDs - 102 and 104 have lived in the town for the highest number of years (30 years). Citizen 102 is prioritized over 104 because 102 has a smaller ID. The next permit goes to citizen 101 who has lived for 20 years. In the second example, citizen 203 gets the first permit due to the highest years lived (20 years), followed by citizen 201 and 202 who lived for the same years (15 years). Citizen 201 is prioritized over 202 due to the smaller ID.","solution":"def issue_permits(n, k, citizens): Determines the IDs of citizens to receive permits based on their years lived in the town and their ID. :param n: int, number of citizens :param k: int, number of permits to issue :param citizens: list of tuples, each tuple contains (id, years lived) :return: list of integers, IDs of citizens who receive the permits # Sort the citizens based on years lived (descending) and then by ID (ascending) citizens.sort(key=lambda x: (-x[1], x[0])) # Extract the IDs of the first k citizens after sorting result = [citizen[0] for citizen in citizens[:k]] return result"},{"question":"-----Input----- The input consists of two integers m and n (0 le m, n le 100) representing the dimensions of a matrix, followed by m times n integers representing the matrix elements. -----Output----- Output the integer sum of all the diagonal elements of the matrix. For a matrix that is not square, only consider the main diagonal. -----Example----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 15","solution":"def sum_diagonal_elements(m, n, matrix_elements): Returns the sum of the diagonal elements for an m x n matrix. If the matrix is not square, only the main diagonal is considered. matrix = [] index = 0 for i in range(m): row = matrix_elements[index:index + n] matrix.append(row) index += n min_dimension = min(m, n) diagonal_sum = sum(matrix[i][i] for i in range(min_dimension)) return diagonal_sum"},{"question":"Given a positive integer N, check if it is possible to rearrange its digits to form a prime number. The resulting number must be a prime and must not have leading zeroes. Return true if and only if at least one such rearrangement exists. Example 1: Input: 13 Output: true Example 2: Input: 41 Output: true Example 3: Input: 15 Output: false Example 4: Input: 30 Output: false Example 5: Input: 23 Output: true Note: 1 <= N <= 10^9","solution":"from itertools import permutations def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def can_form_prime(N): str_n = str(N) perm = set(permutations(str_n)) for p in perm: if p[0] != \'0\': num = int(\'\'.join(p)) if is_prime(num): return True return False"},{"question":"You are given a string `s` consisting of lowercase English letters. You can perform the following operation any number of times: - Choose two adjacent characters in the string and if they are different, swap them. Your task is to determine the smallest lexicographic string you can obtain by performing the above operation any number of times. -----Input----- The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100), the string for that testcase. -----Output----- For each test case, output the smallest lexicographic string that can be obtained. -----Examples----- Input 3 cba zyx acbd Output abc xyz abcd -----Note----- In the first test case, you can repeatedly swap adjacent characters to reach the string \\"abc\\" which is the smallest lexicographical string. In the second test case, \\"zyx\\" can be transformed to \\"xyz\\". In the third test case, \\"acbd\\" can be transformed to \\"abcd\\".","solution":"def smallest_lexicographic_string(t, strings): results = [] for s in strings: results.append(\'\'.join(sorted(s))) return results"},{"question":"Given are two integers N and M. Find an N x N matrix filled with integers between 1 and 1000 (inclusive) such that the sum of all elements in exactly M rows is even. You can assume that such a matrix always exists under the provided constraints. Constraints * 1 leq N leq 100 * 0 leq M leq N Input Input is given from Standard Input in the following format: N M Output Print the matrix satisfying the condition, in the following format: ``` B_11 B_12 ... B_1N B_21 B_22 ... B_2N ... B_N1 B_N2 ... B_NN ``` Examples Input 3 2 Output 1 2 3 4 5 6 7 8 9 Input 4 1 Output 1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 5","solution":"def create_matrix(N, M): Create an N x N matrix where the sum of all elements in exactly M rows is even. Args: N (int): The dimensions of the matrix. M (int): The number of rows with even sum. Returns: List[List[int]]: An N x N matrix satisfying the given conditions. matrix = [[i * N + j + 1 for j in range(N)] for i in range(N)] for i in range(M): if sum(matrix[i]) % 2 != 0: matrix[i][N - 1] += 1 for i in range(M, N): if sum(matrix[i]) % 2 == 0: matrix[i][N - 1] += 1 return matrix from solution import create_matrix def print_matrix(matrix): for row in matrix: print(\\" \\".join(map(str, row))) if __name__ == \\"__main__\\": import sys input = sys.stdin.read() N, M = map(int, input.split()) matrix = create_matrix(N, M) print_matrix(matrix)"},{"question":"A common problem when managing libraries is detecting and resolving version conflicts in dependency graphs. Suppose you are given information about various libraries and their dependencies, and you need to detect if there is a cyclic dependency, meaning that at least one library indirectly depends on itself, causing a conflict in dependency resolution. For instance, consider libraries A, B, and C with the following dependencies: - A depends on B - B depends on C - C depends on A In this scenario, each library has an indirect dependency on itself, forming a cycle (A -> B -> C -> A). You are required to write a program that determines if there is a cyclic dependency in a given set of libraries and their dependencies. Input The input consists of multiple datasets, followed by a line containing two zeros separated by a space. Each dataset has the following format: n m lib1 dep1 lib2 dep2 … libm depm n is the number of libraries and m is the number of dependencies. Each of the next m lines contains two strings, lib and dep, where lib depends on dep. Output For each dataset, output \\"Cyclic\\" if there is at least one cyclic dependency, otherwise output \\"Acyclic\\". The output should not contain extra characters. Example Input 3 3 A B B C C A 4 4 A B B C C D D A 3 2 A B B C 2 0 X Y 3 0 A B C 0 0 Output Cyclic Cyclic Acyclic Acyclic Acyclic","solution":"def is_cyclic_dependency(n, m, dependencies): from collections import defaultdict, deque def has_cycle(graph): indegree = defaultdict(int) for node in graph: for neighbor in graph[node]: indegree[neighbor] += 1 queue = deque([node for node in graph if indegree[node] == 0]) count_of_processed_nodes = 0 while queue: node = queue.popleft() count_of_processed_nodes += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return count_of_processed_nodes != len(graph) graph = defaultdict(list) for lib, dep in dependencies: graph[lib].append(dep) if dep not in graph: graph[dep] = [] return \\"Cyclic\\" if has_cycle(graph) else \\"Acyclic\\" def detect_cycles(datasets): results = [] for dataset in datasets: n, m, dependencies = dataset if n == 0 and m == 0: break results.append(is_cyclic_dependency(n, m, dependencies)) return results"},{"question":"AtCoDeer the reindeer is preparing for Christmas by decorating N trees along the TopCoDeer street. Each tree has a height of h_i. He wants to make sure that all the trees have an equal height to make the street look symmetrical and neat. The only operation allowed is to increase the height of any tree by 1 foot, and AtCoDeer can perform this operation as many times as needed. He cannot decrease the height of any tree. Determine the minimum number of operations required to make all trees have the same height. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ h_i ≤ 1000 - h_i is an integer. -----Input----- Input is given from Standard Input in the following format: N h_1 h_2 ... h_N -----Output----- Print the minimum number of operations needed to make all trees equal in height. -----Sample Input----- 3 5 8 4 -----Sample Output----- 7 To make all trees have the same height, increase the height of: - The first tree by 3 feet (total operations: 3) - The third tree by 4 feet (total operations: 4) The total number of operations is 3 + 4 = 7.","solution":"def min_operations_to_equalize_heights(N, heights): Determines the minimum number of operations to make all trees have the same height. Parameters: N (int): The number of trees. heights (list of int): The initial heights of the trees. Returns: int: The minimum number of operations needed. max_height = max(heights) operations = 0 for height in heights: operations += max_height - height return operations # Example usage: # N = 3 # heights = [5, 8, 4] # print(min_operations_to_equalize_heights(N, heights)) # Output: 7"},{"question":"# Remove String Spaces Write a function that takes a string as input and returns a new string with all spaces removed. Example: ``` Input: \\"Hello World\\" Output: \\"HelloWorld\\" ``` ``` Input: \\"Python Programming\\" Output: \\"PythonProgramming\\" ```","solution":"def remove_spaces(s): Removes all spaces from the input string s. return s.replace(\\" \\", \\"\\")"},{"question":"Alice is given a string S consisting of lowercase English letters. She can perform the following operation on S exactly once: Choose a contiguous substring of S, reverse it, and replace that part of S with the reversed substring. Is it possible to make S a palindrome after applying this operation exactly once? Note: A palindrome is a word that reads the same forward and backward. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a string S. ------ Output Format ------ For each test case, output YES if it is possible to make the string S a palindrome after applying the given operation exactly once. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ |S| ≤ 10^5 - The sum of the lengths of all strings in all test cases will not exceed 10^6. ----- Sample Input 1 ------ 3 abca racecar abcdefg ----- Sample Output 1 ------ YES YES NO ----- explanation 1 ------ Test case 1: We can select the substring \'bc\' and reverse it to get \'cb\', so the string becomes \'acba\', which is a palindrome. Test case 2: The string \'racecar\' is already a palindrome, so no operation is needed. Test case 3: There is no contiguous substring which can be reversed to make \'abcdefg\' a palindrome.","solution":"def can_be_palindrome(S): Determines if a string can be made a palindrome by reversing exactly one contiguous substring. # Check if the string is already a palindrome if S == S[::-1]: return \\"YES\\" n = len(S) l, r = 0, n - 1 # Try to find the first pair of characters that don\'t match while l < r and S[l] == S[r]: l += 1 r -= 1 if l >= r: return \\"YES\\" # After finding the first mismatch, check if reversing the substring from l to r forms a palindrome def is_substr_palindrome(left, right): while left < right: if S[left] != S[right]: return False left += 1 right -= 1 return True # Check two scenarios: # 1. Remove mismatch character from left and check # 2. Remove mismatch character from right and check if is_substr_palindrome(l + 1, r) or is_substr_palindrome(l, r - 1): return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for S in test_cases: result = can_be_palindrome(S) results.append(result) return results"},{"question":"The local animal shelter has received a shipment of k kittens, and each kitten has a predefined weight. The shelter volunteers need to evenly distribute the kittens into groups where the difference between the heaviest and lightest kitten in a group is minimized. To help them, you need to write a program to partition the kittens optimally. Your task is to distribute the kittens into two groups such that the absolute difference between the sums of weights in the two groups is minimized. # Input Format The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer k, representing the number of kittens. - The second line contains k space-separated integers, representing the weights of the kittens. # Output Format For each test case, output a single line with the minimum possible absolute difference between the sums of weights of the two groups. # Constraints - 1 ≤ T ≤ 20 - 1 ≤ k ≤ 30 - 1 ≤ weight of each kitten ≤ 1000 # Sample Input ``` 2 4 1 3 5 7 3 10 20 30 ``` # Sample Output ``` 0 0 ``` # Explanation In both test cases, the kittens\' weights can be distributed in such a way that the sums of the two groups are equal, resulting in an absolute difference of 0.","solution":"def min_difference_between_groups(T, test_cases): def find_min_difference(weights, n, sum_total): dp = [[False for _ in range(sum_total + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, sum_total + 1): if weights[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-weights[i-1]] else: dp[i][j] = dp[i-1][j] diff = float(\'inf\') for j in range(sum_total // 2, -1, -1): if dp[n][j]: diff = sum_total - 2 * j break return diff results = [] for t in range(T): k = test_cases[t][0] weights = test_cases[t][1] sum_total = sum(weights) results.append(find_min_difference(weights, k, sum_total)) return results"},{"question":"You are given an array of integers a where 1 ≤ a[i] ≤ n (1-based index) and n is the size of the array. Each element represents a task that needs to be completed. Specifically, a[i] represents the time required to complete the i-th task. The tasks can be completed in any order, but you need to ensure that there is no consecutive repetition of the same task. Write a program to find the minimum possible time to complete all tasks such that no two consecutive tasks are the same. If it is impossible to achieve this, print \\"Impossible\\". -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 200 000), the size of the array. The second line contains n integers a[i] (1 ≤ a[i] ≤ n), representing the time to complete each task. -----Output----- Print a single integer denoting the minimum possible time to complete all tasks without consecutive repetitions. If it is impossible, print \\"Impossible\\". -----Examples----- Input 4 1 2 1 2 Output 6 Input 3 1 1 1 Output Impossible Input 5 2 1 2 2 1 Output 8 Input 6 3 3 3 3 3 3 Output Impossible -----Note----- In the first sample, one possible schedule is to perform tasks in order: 1, 2, 1, 2, which totals 6 units of time, and no task repeats consecutively. In the second sample, there\'s no way to complete all tasks without at least one task repeating consecutively, thus the output is \\"Impossible\\". In the third sample, a valid schedule could be: 2, 1, 2, 1, which totals 8 units of time. In the last sample, it is clear that all tasks are the same and thus consecutive repetitions cannot be avoided, leading to \\"Impossible\\". -----Constraints----- 1. All elements of array \'a\' will be between 1 and n inclusive. 2. The size of the array n will not exceed 200,000.","solution":"from collections import Counter def min_time_no_consecutive_repetitions(n, a): # Step 1: Calculate frequency of each task frequency = Counter(a) # Step 2: Find the task with maximum frequency max_count = max(frequency.values()) # Step 3: Check if the task with maximum frequency exceeds the safe limit if max_count > (n + 1) // 2: return \\"Impossible\\" # Step 4: Sum all the time to get the total minimum time total_time = sum(a) return total_time"},{"question":"Given an integer array `A` and an integer `k`, you need to partition the array into exactly `k` non-empty contiguous subarrays such that you minimize the maximum sum among these `k` subarrays. Write a function `minMaxSubarraySum(A, k)` that returns this minimized maximum subarray sum. # Function Signature ```python def minMaxSubarraySum(A: List[int], k: int) -> int: ``` # Input - `A`: A list of integers where `1 <= len(A) <= 1000` and `1 <= A[i] <= 10000`. The length of the list will always be at least as large as `k`. - `k`: An integer where `1 <= k <= min(50, len(A))`. # Output - Return an integer which is the minimized maximum sum of the subarrays. # Examples ```python # Example 1 A = [7, 2, 5, 10, 8] k = 2 # Explanation: One way to split the array is to split into [7, 2, 5] and [10, 8], # where the maximum sum is 15. Since it is possible to split it into subarrays of smaller sum, # the minimized maximum sum is 15. assert minMaxSubarraySum(A, k) == 18 # Example 2 A = [1, 2, 3, 4, 5] k = 2 # Explanation: Split into [1, 2, 3] and [4, 5], where the maximum sum is 9. assert minMaxSubarraySum(A, k) == 9 # Example 3 A = [1, 4, 4] k = 3 # Explanation: Split into [1], [4], and [4], where the maximum sum is 4. assert minMaxSubarraySum(A, k) == 4 ``` # Constraints 1. You need to handle large inputs efficiently; think about applying binary search combined with a greedy criterion. 2. Remember that the length of the array `A` is always greater than or equal to `k`, so every partition will contain at least one element.","solution":"from typing import List def minMaxSubarraySum(A: List[int], k: int) -> int: def canSplit(mid: int) -> bool: current_sum = 0 parts = 1 for num in A: if current_sum + num > mid: parts += 1 current_sum = num if parts > k: return False else: current_sum += num return True low, high = max(A), sum(A) while low < high: mid = (low + high) // 2 if canSplit(mid): high = mid else: low = mid + 1 return low"},{"question":"A factory produces plastic bottles of different sizes. Each bottle has a unique identifier and a volume. The factory manager needs to pack these plastic bottles into boxes. Each box can hold up to a certain volume of bottles. The goal is to minimize the number of boxes used. You are given the volume of each bottle and the maximum volume that each box can hold. Write a function to determine the minimum number of boxes required to pack all the bottles. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of bottles. The next line contains n integers, where the i-th integer represents the volume of the i-th bottle (1 ≤ volume ≤ 10^9). The last line contains a single integer V (1 ≤ V ≤ 10^9) — the maximum volume a box can hold. -----Output----- Output a single integer — the minimum number of boxes required to pack all the bottles. -----Example----- Input 5 1 2 3 4 5 5 Output 3 Input 3 6 8 10 10 Output 3","solution":"def min_boxes(n, volumes, box_capacity): Determine the minimum number of boxes required to pack all the bottles. :param n: Number of bottles :param volumes: List of volumes of the bottles :param box_capacity: Maximum volume a box can hold :return: Minimum number of boxes required volumes.sort(reverse=True) boxes = [] for volume in volumes: placed = False for i in range(len(boxes)): if boxes[i] + volume <= box_capacity: boxes[i] += volume placed = True break if not placed: boxes.append(volume) return len(boxes)"},{"question":"You are organizing a competition where participants need to program solutions to various challenges. Each challenge has a specified difficulty rating and you want to select a set of challenges such that the sum of their difficulty ratings is maximized, but does not exceed a given difficulty limit. -----Input----- The first line contains two integers n and D (1 ≤ n ≤ 50, 1 ≤ D ≤ 1000) representing the number of challenges and the difficulty limit respectively. The second line contains n integers d_{1}, d_{2}, ..., d_{n} (1 ≤ d_{i} ≤ 100) representing the difficulty ratings of the challenges. -----Output----- Print an integer representing the maximum possible sum of the difficulty ratings that does not exceed D. -----Examples----- Input 5 10 1 2 3 4 5 Output 10 Input 3 7 4 8 6 Output 6 Input 4 15 7 7 7 7 Output 14 -----Note----- In the first example, all the challenges can be taken (1 + 2 + 3 + 4 = 10). In the second example, the optimal choice is selecting the challenge with a difficulty of 6. In the third example, the optimal choice is selecting any two challenges of difficulty 7, since 7 + 7 = 14 which is the maximum possible without exceeding 15.","solution":"def max_difficulty_sum(n, D, difficulties): Returns the maximum possible sum of the difficulty ratings that does not exceed D. # Use dynamic programming to solve this knapsack-like problem. dp = [0] * (D + 1) for difficulty in difficulties: for i in range(D, difficulty-1, -1): dp[i] = max(dp[i], dp[i-difficulty] + difficulty) return dp[D]"},{"question":"Cirno_9baka has a directed acyclic graph (DAG) with n nodes and m edges. He wants to find the longest path in the DAG. However, some nodes have a time cost associated with visiting them, and Cirno_9baka wants to avoid paths where the total cost exceeds a given budget b. Can you help him determine the longest path length in terms of the number of edges, while ensuring that the total visiting cost stays within the budget? ---Input--- The first line contains three integers n, m, and b (2 le n le 10^5, 1 le m le 2 cdot 10^5, 1 le b le 10^9). The second line contains n integers c_1, c_2, ldots, c_n (1 le c_i le 10^6) where c_i is the cost of visiting the i-th node. Each of the following m lines contains two integers u and v (1 le u, v le n), denoting a directed edge from the node u to the node v. ---Output--- Output a single integer — the length of the longest path in the DAG such that the total visiting cost of the nodes on the path does not exceed the budget b. ---Examples--- Input 5 6 10 2 3 5 4 3 1 2 1 3 2 4 3 4 4 5 2 5 Output 3 Input 4 4 7 1 2 3 4 1 2 2 3 3 4 1 3 Output 2 ---Note--- In the first sample, one possible longest path with visiting cost within the budget is 1 to 3 to 4 to 5, but the total cost is 2 + 5 + 4 + 3 = 14 > 10. Therefore, the longest valid path is 1 to 2 to 5, with a total cost of 2 + 3 + 3 = 8 le 10. In the second sample, the longest path can be 2 to 3 to 4 or 1 to 2 to 3, but with the costs 2 + 3 + 4 = 9 > 7. Hence, the longest valid path is 2 to 3, with a total cost of 2 + 3 = 5 le 7.","solution":"from collections import defaultdict, deque def find_longest_path(n, m, b, costs, edges): graph = defaultdict(list) in_degree = [0] * n for u, v in edges: graph[u-1].append(v-1) in_degree[v-1] += 1 # Topological Sort using Kahn\'s algorithm queue = deque() for i in range(n): if in_degree[i] == 0: queue.append(i) topo_order = [] while queue: u = queue.popleft() topo_order.append(u) for v in graph[u]: in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) # DP array to store the longest path and cost array to store the total cost for each node reachable within budget dp = [-1] * n total_cost = [float(\'inf\')] * n max_path_length = 0 for u in topo_order: if total_cost[u] == float(\'inf\'): total_cost[u] = 0 dp[u] = 0 for v in graph[u]: if total_cost[u] + costs[v] <= b: if dp[u] + 1 > dp[v]: dp[v] = dp[u] + 1 total_cost[v] = total_cost[u] + costs[v] elif dp[u] + 1 == dp[v]: total_cost[v] = min(total_cost[v], total_cost[u] + costs[v]) max_path_length = max(max_path_length, dp[u]) return max_path_length if max_path_length != 0 else -1"},{"question":"A company wants to create a new search feature that can detect fraudulent transactions. A fraudulent transaction is defined as any transaction for which the amount is greater than a specified threshold. The company needs your help to implement a function that processes a list of transactions and identifies all fraudulent ones. Each transaction is represented as a tuple `(transaction_id, amount)`. The function should return a list of transaction IDs that are considered fraudulent. -----Input----- The input consists of two parts: 1. The first line contains the integer `n` (1 le n le 10^5) – the number of transactions. 2. The second line contains the integer `threshold` (0 le threshold le 10^9) – the threshold amount to identify a fraudulent transaction. 3. The next `n` lines each contain a transaction in the form of `transaction_id amount`, where `transaction_id` is a non-negated integer (1 le transaction_id le 10^5) and `amount` is a non-negated integer (0 le amount le 10^9). -----Output----- Print the transaction IDs of all fraudulent transactions in increasing order of their IDs. If there are no fraudulent transactions, print `None`. -----Examples----- Input 5 5000 1 1500 2 6000 3 7000 4 4500 5 500 Output 2 3 Input 3 10000 1 2000 2 15000 3 10000 Output 2 3 Input 4 9999 1 1000 2 8000 3 999 4 9998 Output None -----Note----- In the first example, only the transactions with IDs 2 and 3 have amounts greater than the threshold of 5000. In the second example, transactions with IDs 2 and 3 are considered fraudulent as their amounts are 15000 and 10000 respectively, which exceed the threshold of 10000. In the third example, none of the transactions exceed the threshold of 9999. Therefore, the output is `None`.","solution":"def identify_fraudulent_transactions(n, threshold, transactions): Identifies the fraudulent transactions based on the given threshold. Parameters: n (int): The number of transactions. threshold (int): The threshold amount to identify a fraudulent transaction. transactions (list of tuples): The list of transactions where each transaction is represented as a tuple (transaction_id, amount). Returns: list: A list of transaction IDs that are considered fraudulent. fraudulent_transactions = [transaction_id for (transaction_id, amount) in transactions if amount > threshold] if not fraudulent_transactions: return None else: return sorted(fraudulent_transactions)"},{"question":"Given a list of integers, write a program to determine the smallest positive integer that does not appear in the list. Input Format The first line contains a single integer, NN, denoting the size of the list. The second line contains NN space-separated integers representing the elements of the list. Output Format Print the smallest positive integer that is not present in the list. SAMPLE INPUT 5 1 2 0 4 5 SAMPLE OUTPUT 3 Explanation The numbers 1, 2, 4, and 5 are present in the list. The smallest positive integer not in the list is 3.","solution":"def smallest_missing_positive_integer(arr): numbers = set(arr) # Convert list to set for O(1) average time complexity for lookups i = 1 # Start checking from the smallest positive integer while i in numbers: # If i is found in the set, increment i i += 1 return i"},{"question":"In a magical forest, there is a talking tree named Groot. Groot speaks occasionally and every time he does, he produces a string of words. However, his speech is often jumbled, and the forest creatures find it hard to understand him. To help them, the forest wizard has devised a process that would help them reorder words into lexicographical (dictionary) order. Groot is famous and attracts many visitors who want to converse with him. Given the nature of Groot’s speech, the visitors often find it necessary to reorder his sentences. Your task is to write a program that will help the visitors by taking multiple sentences spoken by Groot and outputting each sentence with its words reordered in lexicographical order. # Input - The input consists of a series of sentences spoken by Groot. - Each sentence is on a separate line and contains words separated by single spaces. - A sentence only contains alphabetical characters and spaces. - The end of input is indicated by a line containing just the string \\"END\\", which should not be processed. # Output - For each sentence, print the sentence with the words sorted in lexicographical order. - Output each reordered sentence on a new line. # Example Input ``` I am Groot Groot am I I am hero END ``` Output ``` Groot I am Groot I am I am hero ```","solution":"def reorder_sentences(sentences): Takes a list of sentences and returns a list of the sentences with words sorted in lexicographical order. The list ends with a sentence containing \\"END\\", which should not be processed. result = [] for sentence in sentences: if sentence == \\"END\\": break words = sentence.split() sorted_words = sorted(words) sorted_sentence = \\" \\".join(sorted_words) result.append(sorted_sentence) return result # Reading input from the command line if __name__ == \\"__main__\\": import sys input_sentences = sys.stdin.read().splitlines() output_sentences = reorder_sentences(input_sentences) print(\\"n\\".join(output_sentences))"},{"question":"Min Transform Steps You are given a string `S` consisting of lowercase alphabets [a-z]. Your task is to determine the minimum number of adjacent swap operations required to transform the given string into its lexicographically smallest possible string. Input: The first line contains a single integer denoting the number of test cases (T). Each of the next T lines contains a single string `S`. Output: For each test case, print a single line containing the minimum number of adjacent swaps required. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 Note: If the string is already in its lexicographically smallest form, output `0`. SAMPLE INPUT 3 cba abac zyx SAMPLE OUTPUT 3 1 3 Explanation: For the test case 1, \\"cba\\" -> \\"bca\\" -> \\"bac\\" -> \\"abc\\", so 3 steps are needed. For the test case 2, \\"abac\\" -> \\"aabc\\", so 1 step is needed. For the test case 3, \\"zyx\\" -> \\"yzx\\" -> \\"yxz\\" -> \\"xyz\\", so 3 steps are needed.","solution":"def min_adjacent_swaps(S): Returns the minimum number of adjacent swap operations required to transform the string S into its lexicographically smallest possible string. target = \'\'.join(sorted(S)) swap_count = 0 s_list = list(S) for i in range(len(s_list)): for j in range(i + 1, len(s_list)): if s_list[j] < s_list[i]: s_list[i], s_list[j] = s_list[j], s_list[i] swap_count += 1 return swap_count def process_cases(cases): results = [] for s in cases: results.append(min_adjacent_swaps(s)) return results"},{"question":"You are given an array of integers and a sliding window of size k. Your task is to find the maximum number in each sliding window of size k across the entire array. # Input - The first line contains two integers n and k, where n is the number of elements in the array and k is the size of the sliding window (1 ≤ k ≤ n ≤ 2*10^5). - The second line contains n integers, the elements of the array (1 ≤ array[i] ≤ 10^9). # Output - Print the maximum number in each sliding window of size k. The outputs should be space-separated. # Examples Example 1 **Input:** ``` 8 3 1 3 -1 -3 5 3 6 7 ``` **Output:** ``` 3 3 5 5 6 7 ``` Explanation: The possible sliding windows are: - [1, 3, -1] → max is 3 - [3, -1, -3] → max is 3 - [-1, -3, 5] → max is 5 - [-3, 5, 3] → max is 5 - [5, 3, 6] → max is 6 - [3, 6, 7] → max is 7 Example 2 **Input:** ``` 5 2 2 1 5 3 4 ``` **Output:** ``` 2 5 5 4 ``` Explanation: The possible sliding windows are: - [2, 1] → max is 2 - [1, 5] → max is 5 - [5, 3] → max is 5 - [3, 4] → max is 4 # Note You can implement the solution using a deque (double-ended queue) to achieve an amortized O(n) time complexity. This involves maintaining a deque that stores indices of the array elements, ensuring that elements are ordered and removing elements that are out of the current window or smaller than the current element being processed.","solution":"from collections import deque def max_sliding_window(nums, k): Returns the maximum values in each sliding window of size k across the array nums. :param nums: List of integers representing the array. :param k: Int representing the size of the sliding window. :return: List of integers representing the maximum in each sliding window. n = len(nums) if n == 0 or k == 0: return [] dq = deque() # store indices of the array elements result = [] for i in range(n): # remove indices that are out of the current window if dq and dq[0] < i - k + 1: dq.popleft() # remove elements that are smaller than the current element # since they are not useful for future elements while dq and nums[dq[-1]] < nums[i]: dq.pop() dq.append(i) # window becomes valid when i >= k - 1 if i >= k - 1: result.append(nums[dq[0]]) return result"},{"question":"You are given an array of integers representing the altitudes of different points along a hiking trail, where the array elements are distinct. A hike is considered scenic if there exists a subarray of three elements such that the altitude first increases and then decreases (i.e., a peak formation). Your task is to determine the number of scenic hikes possible for the given array. In other words, count the number of triplets i, j, k such that 0 ≤ i < j < k < n and ai < aj > ak. Input The first line contains a single integer n (3 ≤ n ≤ 10^6) — the number of points on the hiking trail. The second line contains n distinct integers ai (1 ≤ ai ≤ 10^9) — the altitudes of the points on the hiking trail. Output A single integer, the number of scenic hikes. Example Input 5 1 3 2 4 5 Output 1 Input 4 10 20 15 30 Output 1 Input 6 5 6 3 4 2 1 Output 2","solution":"def count_scenic_hikes(n, altitudes): Count the number of scenic hikes in the given list of altitudes. A scenic hike is a subarray of three elements where the altitude first increases and then decreases (i.e., a peak formation). :param n: int - number of points on the hiking trail :param altitudes: list of int - altitudes of the points on the hiking trail :return: int - the number of scenic hikes count = 0 for i in range(1, n - 1): if altitudes[i - 1] < altitudes[i] > altitudes[i + 1]: count += 1 return count # Example usage: # n = 5 # altitudes = [1, 3, 2, 4, 5] # print(count_scenic_hikes(n, altitudes)) # Output: 1"},{"question":"In a grid of size N x M, you are given initial conditions where some cells are already \'live\' (value 1) while others are \'dead\' (value 0). The cells change state based on the following rules, similar to Conway\'s Game of Life: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Write a function `gameOfLife(grid, N, M)` to compute the next state (after one update) of the grid. Example: Input: N = 4, M = 3 grid = [ [0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0] ] Output: [ [0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0] ] Explanation: - The cell at (1,2) becomes \'live\' because it has exactly three \'live\' neighbors. - The cell at (2,1) stays \'live\' because it has two \'live\' neighbors. - The cell at (2,0) dies due to overpopulation. - Other cells update similarly according to the rules provided. Your Task: You do not need to read input or print anything. Complete the function `gameOfLife` which takes the grid, number of rows N, and number of columns M as input parameters and returns the grid after applying the rules of the Game of Life. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 50 The grid will only contain 0s and 1s.","solution":"def gameOfLife(grid, N, M): Computes the next state of the grid using the rules of Conway\'s Game of Life. Args: grid: List[List[int]] - The initial grid state with 0s and 1s. N: int - Number of rows in the grid. M: int - Number of columns in the grid. Returns: List[List[int]]: Next state of the grid after applying the game\'s rules. def count_live_neighbors(x, y): Counts the number of live neighbors for a cell at position (x, y). directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M: count += grid[nx][ny] return count new_grid = [[0 for _ in range(M)] for _ in range(N)] for i in range(N): for j in range(M): live_neighbors = count_live_neighbors(i, j) if grid[i][j] == 1: if live_neighbors < 2 or live_neighbors > 3: new_grid[i][j] = 0 else: new_grid[i][j] = 1 else: if live_neighbors == 3: new_grid[i][j] = 1 return new_grid"},{"question":"A peak element in an array is defined as an element that is greater than its neighbors. For a given array of integers, find the index of a peak element. If the array contains multiple peaks, return the index of any one of them. Constraints * The array length N satisfies 1 leq N leq 10^5 * The elements of the array satisfy -10^9 leq a_i leq 10^9 Input The input is given in the following format. N a_1 a_2 ... a_N Output Print the index of any one peak element. If the array has only one element, that element is considered a peak and its index (0) should be returned. Examples Input 6 1 3 20 4 1 0 Output 2 Input 5 10 20 15 2 23 Output 1","solution":"def find_peak_element(arr): Returns the index of any peak element in the array. A peak element is an element that is greater than its neighbors. n = len(arr) if n == 1: return 0 if arr[0] >= arr[1]: return 0 if arr[n-1] >= arr[n-2]: return n-1 for i in range(1, n-1): if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]: return i return -1 # This should not happen with given constraints"},{"question":"Linus has an array of n integers, and he can perform the following operation: choose any integer a_i from the array and replace it with another integer a_j from the same array (i.e., a_i and a_j can now be the same). Linus wants to know the minimum number of operations required to make the array consist of only one unique integer. -----Input----- The first line of the input contains an integer n (1 le n le 2 cdot 10^5) — the number of elements in the array. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer — the minimum number of operations required to make all elements of the array equal. -----Example----- Input 6 4 7 4 4 4 7 Output 2 Input 5 3 3 3 3 3 Output 0","solution":"def min_operations_to_unify_array(arr): This function returns the minimum number of operations required to make all elements in the array equal. Parameters: arr (list): List of integers representing the array. Returns: int: Minimum number of operations required. from collections import Counter # Count the frequency of each element frequencies = Counter(arr) # Find the frequency of the most common element max_frequency = max(frequencies.values()) # The minimum number of operations to make all elements the same # is the total number of elements minus the frequency of the most common element return len(arr) - max_frequency"},{"question":"You are given a string of length N containing only characters \'A\' and \'B\'. You need to determine the minimum number of operations required to make the string alternate. An alternating string is one where no two adjacent characters are the same. In one operation, you can change any character from \'A\' to \'B\' or from \'B\' to \'A\'. Input: First line will contain an integer \'T\' (number of test cases). For each test case, there is an integer \'N\' (length of the string). On next line, there will be a string of length N consisting of characters \'A\' and \'B\'. Output: For each test case, output the minimum number of operations required. Constraints: T ≤ 10 1 ≤ N ≤ 100000 The string will contain only \'A\' and \'B\'. Problem setter: Mohd Abdullah SAMPLE INPUT 2 3 ABA 5 AAABB SAMPLE OUTPUT 0 2 Explanation Test case 1: The string \\"ABA\\" is already alternating, so no operations are needed. Hence the output is 0. Test case 2: For the string \\"AAABB\\", we can change the first two \'A\'s and the last \'B\' to get the alternating string \\"ABABA\\" with two operations. Hence the output is 2.","solution":"def min_operations_to_alternate_string(s): Returns the minimum number of operations needed to make the string alternate. alternate1 = \'\'.join([\'A\' if i % 2 == 0 else \'B\' for i in range(len(s))]) alternate2 = \'\'.join([\'B\' if i % 2 == 0 else \'A\' for i in range(len(s))]) cost1 = sum([1 for i in range(len(s)) if s[i] != alternate1[i]]) cost2 = sum([1 for i in range(len(s)) if s[i] != alternate2[i]]) return min(cost1, cost2) def min_operations_for_test_cases(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] results.append(min_operations_to_alternate_string(s)) return results"},{"question":"Jack, an avid algorithm enthusiast, loves challenges involving permutations and lexicographical order. He constructed an interesting challenge for you: Given a string s, you need to determine the k-th permutation of its characters in lexicographical order. If k is larger than the total number of permutations, return \\"Invalid\\". Here\'s your task: INPUT: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string s (composed of lowercase English letters) followed by an integer k. OUTPUT: - For each test case, output the k-th permutation of string s in lexicographical order or \\"Invalid\\" if k exceeds the total number of permutations. CONSTRAINTS: 1 ≤ T ≤ 100 1 ≤ |s| ≤ 10 1 ≤ k ≤ 3,628,800 (Note: 10! = 3,628,800) SAMPLE INPUT 2 abc 2 abcd 24 SAMPLE OUTPUT acb dcba","solution":"import itertools def kth_permutation(s, k): Returns the k-th permutation of the string s in lexicographical order, or \\"Invalid\\" if k exceeds the total number of permutations of s. sorted_s = sorted(s) total_permutations = len(list(itertools.permutations(sorted_s))) if k > total_permutations or k < 1: return \\"Invalid\\" perm = itertools.permutations(sorted_s) for i in range(k): ans = next(perm) return \'\'.join(ans) def solve_kth_permutation_problems(test_cases): results = [] for s, k in test_cases: result = kth_permutation(s, k) results.append(result) return results"},{"question":"A city is planning to build a new metro system with multiple stations connected by direct routes. The city wants to ensure that passengers can travel between any two metro stations using these direct routes or by transferring between stations. They need your help to determine if their current metro configuration meets this requirement. Each station can be considered a node, and each direct route as an undirected edge. The city wants to check if their metro network of stations and routes forms a connected graph. Input The first line contains two integers n and m (1 ≤ n ≤ 100) — the number of metro stations and the number of direct routes, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) — representing a connection between stations u and v. Output Print \\"YES\\" if all the stations are connected, otherwise print \\"NO\\". Examples Input 5 4 1 2 2 3 3 4 4 5 Output YES Input 5 3 1 2 2 3 4 5 Output NO Input 1 0 Output YES","solution":"def is_connected(n, m, routes): from collections import defaultdict, deque if n == 1: # A single station is trivially connected return \\"YES\\" graph = defaultdict(list) for u, v in routes: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) bfs(1) return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"You are given a string S and an integer K. Your task is to rotate the string S to the right by K positions. Rotation means that each character is moved one position to the right, and the last character is moved to the first position. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a string S. - The second line of each test case contains an integer K. ------ Output Format ------ For each test case, output a single line containing the rotated string. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{5} 0 ≤ K ≤ 10^{9} - The sum of |S| (length of S) over all test cases does not exceed 10^{6}. ------ Sample Input 1 ------ 2 hello 2 abcde 5 ------ Sample Output 1 ------ lohel abcde ------ Explanation 1 ------ Test case 1: After rotating the string \\"hello\\" to the right by 2 positions, we get \\"lohel\\". Test case 2: After rotating the string \\"abcde\\" to the right by 5 positions (same as rotating by 0 positions as 5 is the same as the length of the string), the string remains \\"abcde\\".","solution":"def rotate_string(S, K): Rotates the string S to the right by K positions. n = len(S) K = K % n # Since rotating by the length of the string brings it back to the original return S[-K:] + S[:-K] def process_test_cases(T, test_cases): results = [] for i in range(T): S = test_cases[i][0] K = test_cases[i][1] rotated_string = rotate_string(S, K) results.append(rotated_string) return results # For example usage: # T = 2 # test_cases = [ (\\"hello\\", 2), (\\"abcde\\", 5) ] # print(process_test_cases(T, test_cases))"},{"question":"Given an integer array, write a function that determines whether the array can be rearranged such that all adjacent elements have a different parity (one is even, the other is odd). Return \\"YES\\" if it\'s possible, otherwise return \\"NO\\". Input Format The first line contains a single positive integer, n, denoting the number of elements in the array. Each line boldsymbol{i} of the next n lines contains a single integer a_i (i.e., the i^{mbox{th}} element of the array). Constraints 1 leq n leq 50 1 leq a_i leq 100 Output Format Print \\"YES\\" if the array can be rearranged such that all adjacent elements have different parities, otherwise print \\"NO\\". Sample Input 0 4 2 3 4 5 Sample Output 0 YES Explanation 0 The array [2, 3, 4, 5] can be rearranged to [2, 3, 4, 5] or [3, 2, 5, 4] such that every pair of adjacent elements has different parity. Sample Input 1 3 1 3 5 Sample Output 1 NO Explanation 1 The array [1, 3, 5] cannot be rearranged to satisfy the condition since all elements are odd.","solution":"def can_rearrange_with_different_parity(arr): Determines whether the array can be rearranged such that all adjacent elements have different parity. Returns \\"YES\\" if possible, otherwise \\"NO\\". count_even = sum(1 for x in arr if x % 2 == 0) count_odd = len(arr) - count_even if abs(count_even - count_odd) > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"A binary string is a string consisting of the characters \'0\' and \'1\' only. Two binary strings s and t are called similar if and only if the number of positions at which the corresponding characters of s and t are different is exactly one. Given a list of N binary strings, find the number of pairs of similar binary strings. -----Input----- - The first line of the input contains a single integer N denoting the number of binary strings. - Each of the next N lines contains a binary string. -----Output----- Print a single integer, the number of pairs of similar binary strings. -----Constraints----- - 2 le N le 1000 - The length of each binary string is the same and it is between 1 and 50 inclusive. -----Example Input----- 3 101 111 011 -----Example Output----- 2 -----Explanation----- Example case 1: The pairs (101, 111) and (111, 011) are similar because they differ in exactly one position. The pair (101, 011) differs in two positions and thus is not similar. Therefore, the total number of pairs of similar binary strings is 2.","solution":"def count_similar_pairs(binary_strings): Returns the number of similar pairs of binary strings from a list. :param binary_strings: List of binary strings :return: Number of similar pairs def is_similar(s, t): Returns True if the binary strings s and t are similar (differ by exactly one position). :param s: Binary string :param t: Binary string :return: Boolean indicating similarity difference_count = sum(1 for a, b in zip(s, t) if a != b) return difference_count == 1 count = 0 n = len(binary_strings) for i in range(n): for j in range(i + 1, n): if is_similar(binary_strings[i], binary_strings[j]): count += 1 return count"},{"question":"A group of friends decided to make a unique game where they have to guess a secret number. The secret number is always a positive integer S and is less than or equal to 10^6. The friends start guessing the secret number, and each time they guess a number, they receive a response indicating one of the following: - \\"High\\" if their guess is higher than the secret number. - \\"Low\\" if their guess is lower than the secret number. - \\"Correct\\" if their guess is the secret number. The game continues until they correctly identify the secret number. Given a list of guesses along with their respective responses, determine the smallest possible value for the secret number S that matches all the responses. -----Input----- The first line contains an integer n (1 le n le 1000) — the number of guesses made. Each of the next n lines contains an integer g_i (1 le g_i le 10^6) — the guess made, followed by a string r_i which will be either \\"High\\", \\"Low\\", or \\"Correct\\". -----Output----- Print the smallest possible value of the secret number S that matches all the responses. -----Examples----- Input 3 500000 High 250000 Low 300000 Correct Output 300000 Input 4 10 High 1 Low 5 High 2 Low Output 3 -----Note----- In the first example, the only number that fits all responses is 300000, which is the correct guess. In the second example, the secret number must be greater than or equal to 3, and the smallest such number is 3.","solution":"def find_secret_number(n, guesses): Determines the smallest possible value for the secret number based on guesses and responses. Parameters: n (int): The number of guesses made. guesses (list of tuples): Each tuple contains an integer guess and a string response (\\"High\\", \\"Low\\", or \\"Correct\\"). Returns: int: The smallest possible value for the secret number. low_bound = 1 high_bound = 10**6 for guess in guesses: g, response = guess if response == \\"High\\": high_bound = min(high_bound, g - 1) elif response == \\"Low\\": low_bound = max(low_bound, g + 1) elif response == \\"Correct\\": return g return low_bound"},{"question":"Given an array of integers and an integer K, find the maximum length of a subarray that contains at most K distinct integers. Example 1: Input: arr = [1, 2, 1, 2, 3] K = 2 Output: 4 Explanation: The longest subarray with at most 2 distinct integers is [1, 2, 1, 2], which has a length of 4. Example 2: Input: arr = [1, 2, 1, 3, 4] K = 3 Output: 4 Explanation: The longest subarray with at most 3 distinct integers is [1, 2, 1, 3], which has a length of 4. Your Task: You don\'t need to read, input, or print anything. Your task is to complete the function `maxLengthOfSubarray`, which takes an integer array `arr` and an integer `K` as input parameters and returns the length of the longest subarray with at most K distinct integers. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ arr.length ≤ 10^5 1 ≤ arr[i] ≤ 10^4 1 ≤ K ≤ arr.length","solution":"def maxLengthOfSubarray(arr, K): from collections import defaultdict n = len(arr) if n * K == 0: return 0 left, right = 0, 0 hashmap = defaultdict(int) max_len = 1 while right < n: hashmap[arr[right]] += 1 while len(hashmap) > K: hashmap[arr[left]] -= 1 if hashmap[arr[left]] == 0: del hashmap[arr[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"Write a function called `find_missing_number(numbers)` that takes a list of unique integers ranging from 1 to `n` (inclusive) with one number missing, and returns the missing number. The function should have the following signature: ```python def find_missing_number(numbers: List[int]) -> int: ``` # Example: ```python find_missing_number([1, 2, 4, 5, 6]) # returns 3 find_missing_number([7, 8, 10, 9, 6, 2, 1, 4, 5]) # returns 3 find_missing_number([1, 2, 3, 5]) # returns 4 find_missing_number([2, 3, 4, 5, 6, 7, 8, 9, 10]) # returns 1 ``` # Constraints: - The list `numbers` will contain `n-1` elements, where `n` is the length of the list plus one. - All numbers within the range from 1 to `n` will be unique and only one will be missing. - Solve the problem using an arithmetic approach without sorting or using extra storage.","solution":"from typing import List def find_missing_number(numbers: List[int]) -> int: Returns the missing number from the list of unique integers ranging from 1 to n. n = len(numbers) + 1 total_sum = n * (n + 1) // 2 return total_sum - sum(numbers)"},{"question":"In a 2D plane, there is a robot located at the origin (0, 0). The robot can perform the following three types of movements: 1. Move one unit to the right (R). 2. Move one unit upwards (U). 3. Move diagonally one unit upwards and to the right (D). Given a target point (tx, ty), determine the minimum number of movements required for the robot to reach this point. If the robot cannot reach the target point exactly, return -1. # Input The input is provided in the following format: ``` tx ty ``` Where: - `tx` and `ty` are integers representing the coordinates of the target point. # Output Output the minimum number of movements required to reach the target point. If it\'s not possible to reach the target, print -1. # Example Input 1 ``` 3 3 ``` Output 1 ``` 3 ``` Input 2 ``` 2 3 ``` Output 2 ``` 3 ``` Input 3 ``` 1 2 ``` Output 3 ``` -1 ``` Input 4 ``` 4 4 ``` Output 4 ``` 4 ```","solution":"def min_movements(tx, ty): Determines the minimum number of movements required for the robot to reach the target point (tx, ty). If it is not possible to reach the target point, returns -1. Parameters: tx (int): target x coordinate ty (int): target y coordinate Returns: int: minimum number of movements or -1 if unreachable if (tx - ty) % 2 != 0: return -1 return max(tx, ty)"},{"question":"Given an array of integers, a subarray is defined as a contiguous portion of the array. A subarray is \\"positive\\" if the sum of its elements is greater than 0. You are required to find the length of the smallest positive subarray in the given array. If no such subarray exists, return -1. Input The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the array. The second line contains n integers a1, a2, ..., an (-1000 ≤ ai ≤ 1000) — the elements of the array. Output Print a single integer — the length of the smallest positive subarray or -1 if there is no positive subarray. Examples Input 5 1 -2 3 -1 2 Output 1 Input 4 -1 -2 -3 -4 Output -1 Input 6 -1 2 -3 4 -5 6 Output 1 Note For the first example, the smallest positive subarray is [1]. For the second example, there is no positive subarray, so the result is -1. For the third example, the smallest positive subarray can be either [2], [4], or [6].","solution":"def find_smallest_positive_subarray_length(n, arr): min_length = float(\'inf\') found_positive = False for i in range(n): current_sum = 0 for j in range(i, n): current_sum += arr[j] if current_sum > 0: found_positive = True min_length = min(min_length, j - i + 1) break return min_length if found_positive else -1"},{"question":"A common task in programming competitions involves working with strings. In this kata, you will implement a simple compression algorithm that works by replacing substrings of repeated characters with a single instance of the character followed by the number of times it appears consecutively. For example, the string \\"aaabbbcccaaa\\" would be compressed to \\"a3b3c3a3\\". However, the compression should only be applied if it results in a shorter string than the original. If the compressed string is not shorter, return the original string. For instance: - The string \\"abcdef\\" would be returned as \\"abcdef\\" (since compressing \\"abcdef\\" to \\"a1b1c1d1e1f1\\" would not make it shorter). - The string \\"aaabb\\" would be compressed to \\"a3b2\\". Write a function `compress_string` that takes a single string as input and returns the compressed version of the string if it\'s shorter, otherwise returns the original string. Function signature: ```python def compress_string(s: str) -> str: pass ```","solution":"def compress_string(s: str) -> str: Compresses the given string by replacing substrings of repeated characters with a single instance of the character followed by the number of times it appears consecutively. If the compressed string is not shorter than the original, the original string is returned. :param s: Original string to compress. :return: Compressed string or original string if compression is not shorter. if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: compressed.append(f\\"{s[i-1]}{count}\\") count = 1 compressed.append(f\\"{s[-1]}{count}\\") compressed_str = \\"\\".join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Design a ParkingSystem class that supports three types of parking spaces: big, medium, and small. The class should support the following methods: 1. ParkingSystem(int big, int medium, int small) Initializes the ParkingSystem object with the number of available parking slots for each size. 2. bool addCar(int carType) Checks whether there is a parking space of carType available (1 for big, 2 for medium, and 3 for small). If so, the car gets parked in that type of slot, and the method returns true. Otherwise, returns false. Example: Input [\\"ParkingSystem\\", \\"addCar\\", \\"addCar\\", \\"addCar\\", \\"addCar\\"] [[1, 1, 0], [1], [2], [3], [1]] Output [null, true, true, false, false] Explanation ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0); parkingSystem.addCar(1); // return true because there is 1 available slot for a big car parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car parkingSystem.addCar(3); // return false because there is no available slot for a small car parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied. Constraints: - The number of carType is from 1 to 3. - The number of parking slots for each car type is between 0 and 1000. - At most 10000 calls will be made to addCar.","solution":"class ParkingSystem: def __init__(self, big: int, medium: int, small: int): self.available_spaces = { 1: big, 2: medium, 3: small } def addCar(self, carType: int) -> bool: if self.available_spaces[carType] > 0: self.available_spaces[carType] -= 1 return True else: return False"},{"question":"A company is developing a new navigation system for self-driving cars. One of the key challenges is to ensure that the car can safely navigate an area containing static obstacles. The developers have a grid representing the area, with some cells marked as \'obstacles\' and others as \'free space\'. The car needs to move from a given starting cell to a destination cell, if it\'s possible, while avoiding the obstacles. Your task is to determine whether there is a path from the start cell to the destination cell, moving only up, down, left, or right, and not through obstacles. -----Input----- The first line of input contains two integers N and M (1 leq N, M leq 1000) representing the number of rows and columns in the grid. The next N lines each contain a string of length M consisting of \'.\' and \'#\'. A \'.\' represents free space, and a \'#\' represents an obstacle. The next line contains two integers S_r and S_c (0 leq S_r < N, 0 leq S_c < M) representing the row and column of the starting cell. The last line contains two integers D_r and D_c (0 leq D_r < N, 0 leq D_c < M) representing the row and column of the destination cell. -----Output----- Print \\"YES\\" if there is a path from the start cell to the destination cell. Otherwise, print \\"NO\\". -----Examples----- Sample Input 1: 5 5 ..... .#. .#.#. .#.#. ..... 0 0 4 4 Sample Output 1: YES Sample Input 2: 5 5 ..... .#. .#.#. .#.#. ..... 0 0 3 3 Sample Output 2: NO Sample Input 3: 3 3 ..# #.. ..# 0 0 2 2 Sample Output 3: NO Sample Input 4: 3 3 ... .#. ... 0 0 2 2 Sample Output 4: YES","solution":"def is_path_possible(N, M, grid, S_r, S_c, D_r, D_c): Determines if there is a path from the start cell to the destination cell avoiding obstacles. :param N: int, number of rows in the grid :param M: int, number of columns in the grid :param grid: list of strings, the grid representing the area :param S_r: int, the starting row :param S_c: int, the starting column :param D_r: int, the destination row :param D_c: int, the destination column :return: str, \\"YES\\" if there is a path, \\"NO\\" otherwise from collections import deque def is_valid_move(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(S_r, S_c)]) visited = set((S_r, S_c)) while queue: x, y = queue.popleft() if (x, y) == (D_r, D_c): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"There is a certain number of communication satellites orbiting the Earth in such a way that they form a sequence of satellites. Each satellite can communicate directly with the satellites immediately before and after it in the sequence. The purpose is to relay a message from the first satellite (satellite 1) to the last satellite (satellite n) with the minimum possible time delay. Each satellite can either act as a relay or store the message temporarily, and the time delay for relaying a message from one satellite to another varies. For simplicity, the time delay of relaying a message between two consecutive satellites is given by an array `d`, where `d[i]` is the time delay for relaying a message from satellite `i` to satellite `i+1`. Your task is to calculate the minimum total time delay required to relay the message from satellite 1 to satellite `n`. Input The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (2 ≤ n ≤ 500) — the number of satellites. The second line of each test case contains `n-1` integers d_1, d_2, ..., d_(n-1) (1 ≤ d_i ≤ 10^6) — the time delays between consecutive satellites. Output For each test case, output a single integer representing the minimum total time delay to relay the message from the first satellite to the last satellite. Example Input 2 3 3 5 4 2 4 6 Output 8 12","solution":"def minimum_total_time_delay(test_cases): results = [] for n, delays in test_cases: results.append(sum(delays)) return results"},{"question":"You are given a set of words and two distinct words, `startWord` and `endWord`. Modify the words one character at a time, such that each new word created is a valid word that exists in the given set. Your task is to find the length of the shortest transformation sequence from `startWord` to `endWord`. If no such sequence exists, return 0. Example 1: Input: set_of_words = {\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"} startWord = \\"hit\\" endWord = \\"cog\\" Output: 5 Explanation: hit -> hot -> dot -> dog -> cog There are 5 steps required to reach from startWord to endWord in the shortest sequence. Example 2: Input: set_of_words = {\\"a\\", \\"b\\", \\"c\\"} startWord = \\"a\\" endWord = \\"c\\" Output: 2 Explanation: a -> c There are only 2 steps required to reach from startWord to endWord in the shortest sequence. Your Task: You don\'t need to read input or print anything. Your task is to: - Complete the function `findLadderLength` which takes a set of words (`set_of_words`), a string `startWord`, and a string `endWord` as input parameters and returns the length of the shortest transformation sequence from `startWord` to `endWord`. If no such sequence exists, return 0. Expected Time Complexity: O(N * L^2) Expected Auxiliary Space: O(N * L) Constraints: - 1 ≤ N ≤ 1000 (N is the number of words in the set) - 1 ≤ L ≤ 10 (L is the length of each word) - All words in the set and the startWord and endWord are of the same length.","solution":"from collections import deque def findLadderLength(set_of_words, startWord, endWord): if endWord not in set_of_words: return 0 word_length = len(startWord) queue = deque([(startWord, 1)]) set_of_words.add(endWord) while queue: current_word, length = queue.popleft() if current_word == endWord: return length for i in range(word_length): for c in \'abcdefghijklmnopqrstuvwxyz\': new_word = current_word[:i] + c + current_word[i+1:] if new_word in set_of_words: set_of_words.remove(new_word) queue.append((new_word, length + 1)) return 0"},{"question":"Given two sorted linked lists, merge them into a single sorted linked list. Example: Input: Linked List 1: 1->3->5->7->NULL Linked List 2: 2->4->6->8->10->NULL Output: 1->2->3->4->5->6->7->8->10->NULL","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def merge_two_sorted_lists(list1, list2): Merges two sorted linked lists into a single sorted linked list. dummy = ListNode() current = dummy while list1 and list2: if list1.value < list2.value: current.next = list1 list1 = list1.next else: current.next = list2 list2 = list2.next current = current.next if list1: current.next = list1 if list2: current.next = list2 return dummy.next def linked_list_to_list(node): Helper function to convert linked list to Python list for easy comparison. result = [] while node: result.append(node.value) node = node.next return result def list_to_linked_list(lst): Helper function to convert Python list to linked list. if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head"},{"question":"You are given an array A containing N integers representing the number of pages in each of N books. You need to allocate the books to K students such that each student gets at least one book, and the maximum number of pages assigned to a student is minimized. Write a function to determine the minimum possible value of the maximum number of pages assigned to a student. Constraints: * 1 leq N leq 10^4 * 1 leq K leq N * 1 leq A[i] leq 10^9 Input: The function will receive two arguments: * An integer array `A` of length `N` representing the number of pages. * An integer `K` representing the number of students. Output: Return an integer representing the minimum possible value of the maximum number of pages assigned to a student. Examples: Input: A = [12, 34, 67, 90] K = 2 Output: 113 Input: A = [10, 20, 30, 40] K = 2 Output: 60 Explanation: **Example 1:** - We can allocate as {12, 34, 67} and {90}. - The maximum number of pages assigned is 113. **Example 2:** - We can allocate as {10, 20, 30} and {40}. - The maximum number of pages assigned is 60.","solution":"def allocate_books(A, K): Determines the minimum possible value of the maximum number of pages assigned to a student. Parameters: A (list): Array containing the number of pages in each book. K (int): Number of students. Returns: int: Minimum possible value of the maximum number of pages assigned to a student. def is_valid_distribution(mid, A, K): required_students = 1 current_sum = 0 for pages in A: if current_sum + pages > mid: required_students += 1 current_sum = pages if required_students > K: return False else: current_sum += pages return True low, high = max(A), sum(A) result = high while low <= high: mid = (low + high) // 2 if is_valid_distribution(mid, A, K): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"You are given a positive integer N. If N is an even number, print the sum of all even numbers from 1 to N (inclusive); otherwise, print the sum of all odd numbers from 1 to N (inclusive). -----Constraints----- - The value in input is an integer. - 1 leq N leq 1000 -----Input----- Input is given from Standard Input in the following format: N -----Output----- If N is even, print the sum of all even numbers from 1 to N; otherwise, print the sum of all odd numbers from 1 to N. -----Sample Input----- 10 -----Sample Output----- 30 Since 10 is even, the sum of all even numbers from 1 to 10 (i.e., 2 + 4 + 6 + 8 + 10) is 30. -----Sample Input----- 7 -----Sample Output----- 16 Since 7 is odd, the sum of all odd numbers from 1 to 7 (i.e., 1 + 3 + 5 + 7) is 16.","solution":"def sum_even_or_odd(N): Returns the sum of all even numbers from 1 to N if N is even, or the sum of all odd numbers from 1 to N if N is odd. if N % 2 == 0: # Sum all even numbers from 1 to N return sum(i for i in range(1, N + 1) if i % 2 == 0) else: # Sum all odd numbers from 1 to N return sum(i for i in range(1, N + 1) if i % 2 != 0)"},{"question":"Complete the function that takes one argument, a list of integers, and returns a new list containing only the even numbers from the original list, in the same order. For example: ```python [1, 2, 3, 4, 5, 6] ==> [2, 4, 6] ``` Do not modify the input list.","solution":"def filter_even_numbers(lst): Returns a new list containing only the even numbers from the input list. Args: lst (list): The list of integers. Returns: list: A new list with only the even numbers. return [num for num in lst if num % 2 == 0]"},{"question":"A large online retail company processes millions of orders every day. Each order may contain multiple shipments, each with its own delivery time. The company\'s logistics team wants to optimize the total delivery time for all orders by analyzing patterns of delivery times across different regions. To help with this analysis, they have provided you with data on delivery times for multiple orders. Each order consists of several shipments, and each shipment has a delivery time in days. Your task is to write a program that calculates the maximum delivery time for each order and then determines the minimum of these maximum delivery times across all orders. Input The input begins with an integer T, the number of test cases (orders). Each test case starts with an integer N, the number of shipments in the order. This is followed by N integers separated by spaces, each representing the delivery time for a shipment in days. Output For each test case, output the minimum of the maximum delivery times across all orders. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ delivery time in days ≤ 10000 SAMPLE INPUT 3 5 3 1 6 8 2 4 5 10 2 7 3 4 3 9 SAMPLE OUTPUT 4 Explanation - For the first order, the maximum delivery time is 8 days. - For the second order, the maximum delivery time is 10 days. - For the third order, the maximum delivery time is 9 days. - Therefore, the minimum of these maximum delivery times is 8 among 10 and 9.","solution":"def find_minimum_of_max_delivery_times(test_cases): max_delivery_times = [] for case in test_cases: max_delivery_times.append(max(case)) return min(max_delivery_times) def process_input(data): lines = data.split(\'n\') T = int(lines[0]) test_cases = [] for i in range(1, T + 1): case_data = list(map(int, lines[i].split())) N = case_data[0] delivery_times = case_data[1:] if len(delivery_times) != N: raise ValueError(\\"Number of shipments does not match the given number of delivery times.\\") test_cases.append(delivery_times) return test_cases"},{"question":"Paul\'s Travel Plan Paul has decided to go on a long road trip across multiple cities. His travel plans require him to visit each city exactly once and return to the starting city. Given the pairwise distances between cities, Paul wants to determine the shortest possible complete route that visits each city once and then returns to the starting city—a problem known in computer science as the Travelling Salesman Problem (TSP). You are tasked with writing a program to assist Paul in determining the shortest route for his travel plans. Input The input starts with an integer T, representing the number of test cases. Each test case begins with an integer N (2 ≤ N ≤ 10), representing the number of cities. This is followed by an NxN matrix of integers representing the distances between the cities. The j-th integer in the i-th row of this matrix, dist[i][j] (0 ≤ dist[i][j] ≤ 1000, for i ≠ j and dist[i][i] = 0), represents the distance from city i to city j. Output For each test case, output the length of the shortest possible route that visits each city exactly once and returns to the starting city. Sample Input 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 Sample Output 80 64 Example Input 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 Output 80 64","solution":"def tsp_dp(dist): n = len(dist) memo = [[None] * (1 << n) for _ in range(n)] def tsp(pos, mask): if mask == (1 << n) - 1: return dist[pos][0] if memo[pos][mask] is not None: return memo[pos][mask] best = float(\'inf\') for nxt in range(n): if mask & (1 << nxt) == 0: best = min(best, dist[pos][nxt] + tsp(nxt, mask | (1 << nxt))) memo[pos][mask] = best return best return tsp(0, 1) def solve_tsp_problem(T, cases): results = [] for case in cases: N, dist = case results.append(tsp_dp(dist)) return results"},{"question":"Problem In a mystical land, there is a grid city composed of `m x n` blocks. Each block can be either open or blocked. Adventurers starting at the top-left corner (0, 0) want to reach the bottom-right corner (m-1, n-1) in the shortest time possible. They can move right, left, up, or down, but can only pass through open blocks denoted by `.`. Blocked blocks are denoted by `#`. Determine the minimum number of steps required to reach the bottom-right corner. If it is not possible to reach the destination, return -1. Constraints * The input meets the following conditions. * 1 ≤ m, n ≤ 1000 * grid[i][j] is either `.` or `#`. Input The first line contains two integers `m` and `n` representing the dimensions of the grid. The next `m` lines each contain `n` characters (`.` or `#`), representing the layout of the grid. Output Output the minimum number of steps required to go from the top-left corner to the bottom-right corner. If it is not possible, output -1. Examples Input 3 3 . .#. ... Output 4 Input 3 3 . #.# ..# Output -1","solution":"from collections import deque def min_steps_to_reach_end(grid): Returns the minimum number of steps to reach from the top-left to the bottom-right of the grid. If it is not possible, returns -1. m = len(grid) n = len(grid[0]) if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) steps = 0 visited = set((0, 0)) while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (m-1, n-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) steps += 1 return -1"},{"question":"Given an integer array representing coins of different denominations and an integer amount representing a total amount of money, return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin. **Input** n m c_1 c_2 ... c_n **Output** Minimum number of coins needed to make the amount m, or -1 if it\'s not possible. **Example:** Input: ``` 3 11 1 2 5 ``` Output: ``` 3 ``` Input: ``` 2 3 2 5 ``` Output: ``` -1 ``` **Explanation:** In the first example, the input specifies 3 coins with denominations 1, 2, and 5 and the amount to make is 11. The fewest number of coins needed to make up the amount 11 is 3 (using two 5-denomination coins and one 1-denomination coin). In the second example, it is not possible to make the amount 3 with coins of denominations 2 and 5, so the output is -1. **Constraints:** - 1 <= n <= 100 - 1 <= m <= 10^4 - 1 <= c_i <= 10^4","solution":"def min_coins(n, m, coins): Returns the fewest number of coins needed to make up the amount m. If that amount cannot be made up by any combination of the coins, returns -1. :param n: Number of different coin denominations :param m: Total amount of money :param coins: List of coin denominations :return: Minimum number of coins needed or -1 if not possible dp = [float(\'inf\')] * (m + 1) dp[0] = 0 for coin in coins: for x in range(coin, m + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[m] if dp[m] != float(\'inf\') else -1"},{"question":"You are given two arrays `arrival` and `departure` which contain the arrival and departure times of trains at a station. Each train is represented by an integer in both arrays. The goal is to determine the minimum number of platforms required at the station so that no train waits. Input: - First line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of trains arriving at the station. - Next line contains `n` integers representing the arrival times of the trains. - Next line contains `n` integers representing the departure times of the trains. Output: - Print a single integer representing the minimum number of platforms needed. It is guaranteed that the given times are valid, i.e., arrival and departure times are such that arrival[i] <= departure[i] for all i. Examples Input 6 900 940 950 1100 1500 1800 910 1200 1120 1130 1900 2000 Output 3 Input 3 900 940 1000 910 1200 1030 Output 2","solution":"def find_minimum_platforms(arrival, departure): Determines the minimum number of platforms required at the station so that no train waits. n = len(arrival) # Sort the arrival and departure times arrival.sort() departure.sort() # Initialize pointers for arrival and departure times i, j = 0, 0 # Initialize the count of platforms needed and the result platforms_needed = 0 max_platforms = 0 # Process arrivals and departures in sorted order while i < n and j < n: # If next event at the station is arrival, increment count of needed platforms if arrival[i] <= departure[j]: platforms_needed += 1 i += 1 # Else decrement count of needed platforms else: platforms_needed -= 1 j += 1 # Update result if needed max_platforms = max(max_platforms, platforms_needed) return max_platforms"},{"question":"A company has designed a new exercise app that includes various challenges for users. One of the challenges is to climb the stairs to certain levels. The app records the time each user takes to reach certain levels, and stores this data. Your task is to analyze this data to determine the most efficient user — the one who reaches a specified level of stairs in the shortest time. However, the data storage system is not well maintained and often contains duplicate entries and values that are not correctly recorded (like negative times). You need to clean this data and return the best (minimum) valid time to reach the specified level of stairs. # Input: 1. An integer `n` (1 ≤ n ≤ 10^5), the number of records in the dataset. 2. An integer `k` (1 ≤ k ≤ 100), the level of the stairs users need to reach. 3. An array of n integers, where each integer represents the recorded time for a user to reach the specified level. # Output: One integer — the best (minimum) valid time to reach the specified level of stairs. If no valid time is available, return -1. # Examples: Input: ``` 5 3 7 -3 10 5 5 ``` Output: ``` 5 ``` Input: ``` 6 4 -1 -7 12 10 10 9 ``` Output: ``` 9 ``` Input: ``` 4 5 -3 -5 -10 -1 ``` Output: ``` -1 ``` # Note: - In the first example, the valid times are {7, 10, 5, 5}. The minimum valid time is 5. - In the second example, the valid times are {12, 10, 10, 9}. The minimum valid time is 9. - In the third example, there are no valid times, so the output is -1.","solution":"def best_time_to_climb(n, k, times): Determine the minimum valid time to reach a specified level of stairs (k). :param n: int, the number of records in the dataset. :param k: int, the level of stairs users need to reach. :param times: list of int, recorded times for users to reach the specified level. :return: int, the best (minimum) valid time to reach the specified level, or -1 if no valid time is available. valid_times = [time for time in times if time > 0] if not valid_times: return -1 return min(valid_times)"},{"question":"Alice is a fan of numbers and their properties. One interesting property is the \\"Perfect Number\\". A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding the number itself). For example, 6 is a perfect number because its proper divisors are 1, 2, and 3, and their sum is 6. Given a number n, Alice wants to determine whether the number is a perfect number. Input The single line contains an integer n (1 ≤ n ≤ 10000) — the number that needs to be checked. Output Print \\"YES\\" (without the quotes) if the number is a perfect number. Otherwise, print \\"NO\\" (without the quotes). Examples Input 28 Output YES Input 10 Output NO","solution":"def is_perfect_number(n): Determines if a given number is a perfect number. :param n: Integer, the number to be checked :return: \\"YES\\" if the number is a perfect number, otherwise \\"NO\\" if n <= 1: return \\"NO\\" divisors_sum = sum(i for i in range(1, n) if n % i == 0) return \\"YES\\" if divisors_sum == n else \\"NO\\""},{"question":"Write a method named `isBalanced(s)` that checks whether the parentheses, brackets, and braces in the string `s` are balanced and properly nested. The method should return `true` if `s` is balanced, and `false` otherwise. To be considered balanced, every opening parenthesis (`(`), bracket (`[`), or brace (`{`) must have a corresponding closing character (`)`, `]`, `}`) and they must be correctly ordered. Examples: - `isBalanced(\\"(){}[]\\")` should return `true`. - `isBalanced(\\"([{}])\\")` should return `true`. - `isBalanced(\\"(]\\")` should return `false`. - `isBalanced(\\"([)]\\")` should return `false`.","solution":"def isBalanced(s): Checks whether the parentheses, brackets, and braces in the string s are balanced and properly nested. Parameters: s (str): Input string containing the characters \'(\', \')\', \'[\', \']\', \'{\', \'}\'. Returns: bool: Returns True if the string is balanced, otherwise False. stack = [] mapping = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in mapping.values(): stack.append(char) elif char in mapping.keys(): if stack == [] or mapping[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Word Transformation Challenge You are given a start word, an end word, and a dictionary of valid words. The task is to transform the start word into the end word by changing only one letter at a time, with each intermediate word also existing in the dictionary. Return the length of the shortest transformation sequence, or -1 if no such sequence exists. Input The input consists of a single dataset in the following format: ``` n start end word1 word2 ... wordn ``` - `n` is an integer indicating the number of words in the dictionary (1 ≤ n ≤ 1,000). - `start` is the start word. - `end` is the end word. - Each of the following n lines contains a single word from the dictionary. All words including `start` and `end` are lowercase strings with the same length, which will be at most 10 characters. Output Output the length of the shortest transformation sequence from the start word to the end word, or -1 if no such sequence is possible. Example Input ``` 6 hit cog hot dot dog lot log cog ``` Output ``` 5 ``` Explanation The shortest transformation sequence from \\"hit\\" to \\"cog\\" is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", which has a length of 5. Another Example Input ``` 5 cat dog bat cot pot fog ``` Output ``` -1 ``` Explanation There is no valid transformation from \\"cat\\" to \\"dog\\" using the given dictionary.","solution":"from collections import deque def shortest_transformation_sequence(n, start, end, words): words = set(words) if end not in words: return -1 queue = deque([(start, 1)]) # (current word, current length) visited = set() while queue: current_word, length = queue.popleft() if current_word == end: return length for i in range(len(start)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in words and next_word not in visited: visited.add(next_word) queue.append((next_word, length + 1)) return -1"},{"question":"Ashish loves rectangles and he likes arranging his collection of unique rectangular tiles. Recently, he found a new way to arrange tiles in a grid and wants to find out the number of ways he can select two tiles from his collection such that both of them have at least one common edge (i.e., they are either horizontally or vertically adjacent). Given the number of rows (R) and columns (C) in his grid, you need to calculate the number of ways to pick two tiles such that they are adjacent. Input: Two integers R and C separated by a space. Output: Print the number of ways to pick two adjacent tiles from the grid. SAMPLE INPUT 2 2 SAMPLE OUTPUT 4 Explanation In a 2x2 grid, the possible pairs of adjacent tiles are: - Top-left and top-right - Top-left and bottom-left - Top-right and bottom-right - Bottom-left and bottom-right","solution":"def count_adjacent_tiles(R, C): Returns the number of ways to pick two adjacent tiles in a grid with R rows and C columns. # Number of horizontal adjacent pairs is equal to R * (C - 1) horizontal_pairs = R * (C - 1) # Number of vertical adjacent pairs is equal to (R - 1) * C vertical_pairs = (R - 1) * C # Total pairs is the sum of horizontal and vertical pairs return horizontal_pairs + vertical_pairs"},{"question":"Alice has a list of M integers and Bob wants to perform some queries on this list. Each query requires checking if any subsequence (not necessarily contiguous) of the list can be found that sums up to a given integer K. Write a program that helps Bob in answering these queries efficiently. Input: - The first line contains a single integer M - the number of integers in Alice\'s list. - The second line contains M space-separated integers, representing Alice\'s list. - The third line contains a single integer Q - the number of queries Bob wants to ask. - The next Q lines each contain a single integer K, representing the desired sum. Output: - Print \\"YES\\" if there exists a subsequence of the list that sums up to K, otherwise print \\"NO\\" for each query. Constraints: 1 ≤ M ≤ 100 -10^6 ≤ elements in the list ≤ 10^6 1 ≤ Q ≤ 1000 -10^6 ≤ K ≤ 10^6 SAMPLE INPUT 5 1 2 3 -4 5 3 7 -1 0 SAMPLE OUTPUT YES YES YES Explanation There exists at least one subsequence summing to 7 (e.g., {2, 5}), one summing to -1 (e.g., {-4, -4, 5, 2}), and one summing to 0 (e.g., empty subsequence or {1, -4, 3}).","solution":"def can_sum(M, numbers, Q, queries): Determines if any subsequence of the list `numbers` sums up to each value in `queries`. Parameters: M (int): The number of integers in Alice\'s list. numbers (list of int): The list of integers. Q (int): The number of queries. queries (list of int): The list of query integers. Returns: list of str: List containing \\"YES\\" or \\"NO\\" for each query. def can_sum_to_k(nums, k): Helper function to determine if a particular sum k can be formed from a subsequence. Uses dynamic programming. possible_sums = {0} for num in nums: new_sums = set() for s in possible_sums: new_sums.add(s + num) possible_sums.update(new_sums) return k in possible_sums results = [] for query in queries: if can_sum_to_k(numbers, query): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # M = 5 # numbers = [1, 2, 3, -4, 5] # Q = 3 # queries = [7, -1, 0] # result = can_sum(M, numbers, Q, queries) # print(result) # Output: [\\"YES\\", \\"YES\\", \\"YES\\"]"},{"question":"Complete the function which takes an array of integers and returns the sum of all even numbers in the array. Example ```python sum_even_numbers([1, 2, 3, 4, 5, 6]) == 12 ```","solution":"def sum_even_numbers(numbers): Returns the sum of all even numbers in the array. return sum(n for n in numbers if n % 2 == 0)"},{"question":"# Task You have an array of integers representing the number of days you are willing to wait before you get paid for completing each task. You are given a threshold that indicates the maximum number of days you can wait and still get paid a bonus. Your goal is to determine the maximum possible sum of days you can wait without going over the threshold. # Example For: ```python days = [2, 3, 1, 5, 6] threshold = 10 ``` the output should be `10`. For: ```python days = [1, 2, 3, 4] threshold = 5 ``` the output should be `5`. # Input/Output - `[input]` array of integers `days` An array of integers representing the number of days you are willing to wait before getting paid. Constraints: `1 ≤ days.length ≤ 100`, `1 ≤ days[i] ≤ 20`. - `[input]` integer `threshold` An integer representing the maximum number of days you can wait without losing your bonus. Constraints: `1 ≤ threshold ≤ 1000`. - `[output]` an integer value Return the maximum possible sum of the days without exceeding the threshold.","solution":"def max_days_within_threshold(days, threshold): Determine the maximum sum of the days you can wait without exceeding the threshold. Parameters: days (list of int): List of integers representing the number of days. threshold (int): Maximum number of days you can wait without losing the bonus. Returns: int: Maximum possible sum of days without exceeding the threshold. n = len(days) # Initialize DP array where dp[i] is the maximum sum we can achieve using the first i elements dp = [0] * (threshold + 1) # Traverse each day in the list for day in days: # Update the DP array from the back to prevent overwriting the data prematurely for t in range(threshold, day - 1, -1): dp[t] = max(dp[t], dp[t - day] + day) # The answer will be the maximum value in DP array that is within the threshold. return max(dp)"},{"question":"Alice loves playing with numbers. She has an array of integers and a set of operations that can be applied multiple times. Each operation consists of choosing any subarray and applying one of three functions to it: 1. Increment all elements of the subarray by 1. 2. Multiply all elements of the subarray by 2. 3. Replace every element `x` in the subarray with `x mod K` where `K` is a given integer. Alice wants to know the maximum sum of elements she can achieve in the array using these operations. Each operation can be used at most once. Write a program to help Alice figure this out. Input The first line of input contains two integers, N and K where N is the length of the array and K is the integer mentioned in the third operation. The second line contains N integers, representing the elements of the array. Output Output a single integer which is the maximum possible sum of the array after applying at most one of the operations only once. Constraints 1 ≤ N ≤ 1000 0 ≤ array elements ≤ 1000 1 ≤ K ≤ 1000 SAMPLE INPUT 5 10 1 2 3 4 5 SAMPLE OUTPUT 30","solution":"def max_sum_after_operations(N, K, array): Function to determine the maximum possible sum of the array after applying one of the given operations once. :param N: Integer length of the array :param K: Integer for the mod operation :param array: List of integers, the array :return: Integer, the maximum possible sum of the array after one operation original_sum = sum(array) increment_sum = original_sum + N multiply_sum = original_sum * 2 mod_sum = sum(x % K for x in array) return max(original_sum, increment_sum, multiply_sum, mod_sum)"},{"question":"Serena is working on a new warehouse tracking system. In the warehouse, there are various packages stacked in different rows. Each row of packages can be represented as a list containing the weights of the packages. Serena needs to determine if it\'s possible to split each row of packages into two subarrays such that the sum of weights in both subarrays is equal. Write a function `can_partition` that takes a list of integers `packages` representing the weights of packages in a single row and returns `True` if it\'s possible to partition the row into two subarrays with equal sum, or `False` otherwise. Your task is to help Serena by implementing this function. Input: - The input will be a list of integers `packages` where 1 ≤ len(packages) ≤ 1000, and each integer will be in the range 1 ≤ packages[i] ≤ 10000. Output: - Return a boolean value `True` if it\'s possible to partition the list into two subarrays with equal sum, otherwise `False`. You can assume that an empty subarray is not allowed. Example 1: Input: [1, 5, 11, 5] Output: True Explanation: The array can be partitioned as [1, 5, 5] and [11]. Example 2: Input: [1, 2, 3, 5] Output: False Explanation: The array cannot be partitioned into two subarrays with equal sum.","solution":"def can_partition(packages): Determines if it\'s possible to partition the list of package weights into two subarrays with equal sum. total_sum = sum(packages) # If the total sum is odd, it cannot be split into two equal parts. if total_sum % 2 != 0: return False target = total_sum // 2 n = len(packages) # Use dynamic programming to check if a subset sum of target can be achieved. dp = [False] * (target + 1) dp[0] = True for package in packages: for i in range(target, package - 1, -1): if dp[i - package]: dp[i] = True return dp[target]"},{"question":"In a distant village lives an old, very wise man named Zotak. Zotak loves sequences and often challenges the villagers with interesting problems. Today, he gives the villagers a new task involving numbers. Given a sequence of integers, your task is to reorder the sequence so that the absolute difference between any two adjacent integers is minimized. If there are multiple solutions, you may return any of them. For example, given the sequence ([1, 6, 3, 9, 2]), one possible reordering is ([1, 2, 3, 6, 9]). -----Input----- The first line contains a single integer (t) ((1 le t le 100)) — the number of test cases. Each of the next (t) lines describes a test case. Each test case contains two lines: the first line contains an integer (n) ((1 le n le 1000)) representing the length of the sequence. The second line contains (n) integers (a_1, a_2, ldots, a_n) ((-1000 le a_i le 1000)). -----Output----- For each test case, print a single line containing (n) integers, the reordered sequence such that the absolute difference between any two adjacent integers is minimized. If there are multiple valid outputs, print any of them. -----Examples----- Input 3 5 1 6 3 9 2 4 10 4 15 12 3 -1 -5 -3 Output 1 2 3 6 9 4 10 12 15 -5 -3 -1 -----Note----- In the first test case, the sequence ([1, 2, 3, 6, 9]) has the smallest possible differences between adjacent elements: - (|1 - 2| = 1) - (|2 - 3| = 1) - (|3 - 6| = 3) - (|6 - 9| = 3) Another valid output could be ([2, 1, 3, 6, 9]), for instance.","solution":"def minimize_absolute_difference(t, cases): results = [] for i in range(t): n, arr = cases[i] arr_sorted = sorted(arr) results.append(\\" \\".join(map(str, arr_sorted))) return results"},{"question":"Write a function that processes a list of measurements taken by a weather station and outputs a summary of the weather data collected. The input will be a list of dictionaries, each containing a weather reading with a timestamp, temperature, humidity, and wind speed. The function should return a dictionary summarizing the minimum, maximum, average, and median values for temperature, humidity, and wind speed. Input: - A list of dictionaries, where each dictionary contains: - `timestamp`: A string representing the date and time of the reading in the format \\"YYYY-MM-DD HH:MM:SS\\". - `temperature`: A float representing the temperature in degrees Celsius. - `humidity`: An integer representing the humidity percentage. - `wind_speed`: A float representing the wind speed in meters per second. Output: - A dictionary containing the following keys and values: - `temperature`: A dictionary with the keys `min`, `max`, `average`, and `median`, and their corresponding values. - `humidity`: A dictionary with the keys `min`, `max`, `average`, and `median`, and their corresponding values. - `wind_speed`: A dictionary with the keys `min`, `max`, `average`, and `median`, and their corresponding values. Example Input: ```python [ {\\"timestamp\\": \\"2023-05-01 14:00:00\\", \\"temperature\\": 22.5, \\"humidity\\": 55, \\"wind_speed\\": 5.5}, {\\"timestamp\\": \\"2023-05-01 15:00:00\\", \\"temperature\\": 23.0, \\"humidity\\": 60, \\"wind_speed\\": 6.0}, {\\"timestamp\\": \\"2023-05-01 16:00:00\\", \\"temperature\\": 21.5, \\"humidity\\": 58, \\"wind_speed\\": 5.0}, {\\"timestamp\\": \\"2023-05-01 17:00:00\\", \\"temperature\\": 22.0, \\"humidity\\": 57, \\"wind_speed\\": 5.8} ] ``` Example Output: ```python { \\"temperature\\": {\\"min\\": 21.5, \\"max\\": 23.0, \\"average\\": 22.25, \\"median\\": 22.25}, \\"humidity\\": {\\"min\\": 55, \\"max\\": 60, \\"average\\": 57.5, \\"median\\": 57.5}, \\"wind_speed\\": {\\"min\\": 5.0, \\"max\\": 6.0, \\"average\\": 5.575, \\"median\\": 5.65} } ``` Note: - The average should be computed as the sum of the values divided by the number of values. - The median is the middle value when the values are sorted. If there is an even number of values, the median is the average of the two middle values.","solution":"import statistics def summarize_weather_data(data): Processes a list of weather measurements and returns a summary of the weather data. Args: data (list): A list of dictionaries, each containing a weather reading with keys \'timestamp\', \'temperature\', \'humidity\', and \'wind_speed\'. Returns: dict: A dictionary summarizing the min, max, average, and median values for temperature, humidity, and wind speed. temperatures = [reading[\'temperature\'] for reading in data] humidities = [reading[\'humidity\'] for reading in data] wind_speeds = [reading[\'wind_speed\'] for reading in data] summary = { \\"temperature\\": { \\"min\\": min(temperatures), \\"max\\": max(temperatures), \\"average\\": sum(temperatures) / len(temperatures), \\"median\\": statistics.median(temperatures) }, \\"humidity\\": { \\"min\\": min(humidities), \\"max\\": max(humidities), \\"average\\": sum(humidities) / len(humidities), \\"median\\": statistics.median(humidities) }, \\"wind_speed\\": { \\"min\\": min(wind_speeds), \\"max\\": max(wind_speeds), \\"average\\": sum(wind_speeds) / len(wind_speeds), \\"median\\": statistics.median(wind_speeds) } } return summary"},{"question":"In a retail store, there is a promotion where customers can buy items in bulk and get discounts. The discount is based on the number of items purchased. For every item bought in bulk of 10, a customer gets 1 additional item for free. Task Develop a function that calculates the total number of items a customer will receive when they buy a certain number of items. The provided code stub reads an integer, `n`, from STDIN, which represents the number of items purchased. Your function should print the total number of items received, including any free items. Example If a customer buys `21` items: - They will get `2` additional items for free (one for each set of 10 items bought). The total number of items received will be `21 + 2 = 23`. Input Format The first line contains an integer, `n`, representing the number of items bought. Output Format Print the total number of items received, including the additional free items. Sample Input 0 15 Sample Output 0 16 Sample Input 1 30 Sample Output 1 33 Sample Input 2 5 Sample Output 2 5","solution":"def total_items_received(n): Calculate the total number of items received including free items for every 10 items bought. Args: n (int): The number of items bought. Returns: int: The total number of items received. free_items = n // 10 return n + free_items"},{"question":"A robot is initially located at the origin (0, 0) on a 2D plane. The robot can move in 4 possible directions - \'L\' (left), \'R\' (right), \'U\' (up), and \'D\' (down) - given as a string of commands. Determine if the robot ends up at the origin after executing all the movements in the string. -----Constraints----- - 1 leq length of commands leq 10^5 - The commands string contains only \'L\', \'R\', \'U\', and \'D\'. -----Input----- Input is given from Standard Input in the following format: commands -----Output----- Print \\"YES\\" if the robot returns to the origin after completing all movements, otherwise print \\"NO\\". -----Sample Input----- UDLR -----Sample Output----- YES In this example, the robot moves up one unit, down one unit, left one unit, and right one unit, which brings it back to the origin. -----Sample Input----- UUDL -----Sample Output----- NO In this example, the robot ends up at position (0, 1) and does not return to the origin.","solution":"def does_robot_return_to_origin(commands): Determines if the robot returns to the origin after executing all movements in the string. Args: commands (str): A string of commands where each character is in \'L\', \'R\', \'U\', \'D\'. Returns: str: \\"YES\\" if the robot returns to the origin, otherwise \\"NO\\". x, y = 0, 0 for command in commands: if command == \'L\': x -= 1 elif command == \'R\': x += 1 elif command == \'U\': y += 1 elif command == \'D\': y -= 1 if x == 0 and y == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Ankit and Neha are playing a different game. Initially, they have a 2xN grid, and they take turns coloring one uncolored cell at a time. Cells can be colored in red or blue, but there cannot be two adjacent cells of the same color horizontally, vertically, or diagonally. Ankit starts the game. The first player who cannot make a valid move loses. For example, if the grid is 2x3 and initially all cells are uncolored, the game might progress as follows: Ankit colors cell (1, 1) red. Neha colors cell (2, 1) blue. Ankit colors cell (1, 2) red. Neha colors cell (2, 3) blue. Ankit colors cell (2, 2) red. Neha colors cell (1, 3) blue. The game ends with all cells colored and no invalid moves, thus resulting in a draw. Given an integer N, determine if there is a winning strategy for the player who starts the game, assuming both players play optimally. Input The first line of the input gives the number of test cases, T. T test cases follow, each containing one integer N, the length of the grid. Output For each test case, output one line containing \\"Case #x: y\\", where x is the case number (starting from 1), and y is \'Ankit\' if Ankit has a winning strategy, \'Neha\' if Neha has a winning strategy, or \'Draw\' if neither player has a guaranteed win. CONSTRAINTS 1 ≤ T ≤ 100. 1 ≤ N ≤ 1,000. SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT Case #1: Draw Case #2: Draw Case #3: Ankit","solution":"def determine_winner(N): Determine the winner of the game for a 2xN grid where N is the length of the grid. Returns \'Ankit\' if Ankit has a winning strategy, \'Neha\' if Neha has a winning strategy, or \'Draw\' if neither player has a guaranteed win. # When N is 1 or 2, there\'s only a draw if N == 1 or N == 2: return \'Draw\' # For N >= 3, Ankit has a winning strategy else: return \'Ankit\' def process_test_cases(T, cases): Processes multiple test cases. T: Number of test cases cases: List of integers representing the length of the grids for each test case Returns a list of strings formatted as \\"Case #x: y\\" results = [] for i in range(T): N = cases[i] result = determine_winner(N) results.append(f\\"Case #{i+1}: {result}\\") return results"},{"question":"Alex has a collection of N integers in an array B. He wants to determine if it\'s possible to partition the array into two non-empty subsequences such that the sum of elements in both subsequences are equal. Each element in the array must belong to exactly one of the two subsequences. Input format: The first line contains an integer N, the number of elements in array B. The second line contains N space-separated integers representing the elements of array B. Output format: Print \\"YES\\" (without quotes) if it\'s possible to partition the array into two subsequences with equal sums. Otherwise, print \\"NO\\". Constraints: 1 ≤ N ≤ 1000 1 ≤ Bi ≤ 10^4 SAMPLE INPUT 5 1 5 11 5 SAMPLE OUTPUT YES Explanation Alex can partition the array into two subsequences [1, 5, 5] and [11] both of which have an equal sum of 11.","solution":"def can_partition(B): Determines if it\'s possible to partition array B into two non-empty subsequences such that the sum of elements in both subsequences are equal. :param B: List of integers :return: \\"YES\\" if partition is possible, otherwise \\"NO\\" total_sum = sum(B) # If the total sum is odd, we can\'t partition into two equal parts if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(B) dp = [False] * (target + 1) dp[0] = True # There\'s always a way to make sum 0 for num in B: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[target] else \\"NO\\" def main(input_data): lines = input_data.split(\'n\') N = int(lines[0]) B = list(map(int, lines[1].split())) return can_partition(B)"},{"question":"Problem You are organizing a library system where books are stored in different shelves. Each shelf has a limited capacity and each book has a certain thickness. You want to determine if a set of books can be placed on a particular shelf without exceeding its capacity. You are given: - N, the number of shelves. - M, the number of books. - Q, the number of queries. Each shelf has a specific capacity. Each book has a specific thickness. For each query, you are asked if a certain subset of books can fit into a specific shelf based on its capacity. # Input Format ``` N M Q C1 C2 ... CN T1 T2 ... TM S1 B1_1 B1_2 ... B1_k S2 B2_1 B2_2 ... B2_l ... SQ BQ_1 BQ_2 ... BQ_p ``` - The first line contains three integers N (number of shelves), M (number of books), and Q (number of queries). - The second line contains N integers where Ci is the capacity of the ith shelf. - The third line contains M integers where Ti is the thickness of the ith book. - The next Q lines represent queries. Each query starts with an integer Si, the shelf number for the query, followed by a list of integers representing the books to be placed on that shelf. # Output Format For each query, print \\"Yes\\" if the books can fit on the specified shelf without exceeding its capacity, otherwise print \\"No\\". # Constraints - 1 ≤ N, M, Q ≤ 100 - 1 ≤ Ci ≤ 1000 - 1 ≤ Ti ≤ 500 - 1 ≤ number of books in each query ≤ M # Example Input ``` 2 4 3 10 15 3 4 2 1 1 1 2 2 3 4 1 4 1 ``` Output ``` No Yes Yes ``` # Explanation For the first query, the 1st shelf can hold a total of 10 units of thickness. The thicknesses of books 1 and 2 are 3 and 4 respectively. 3 + 4 = 7, which fits in the shelf of capacity 10. Hence, the answer is \\"Yes\\". For the second query, the 2nd shelf can hold 15 units of thickness. The thicknesses of books 3 and 4 are 2 and 1 respectively. 2 + 1 = 3, which fits in the shelf of capacity 15. Hence, the answer is \\"Yes\\". For the third query, the 1st shelf can hold a total of 10 units of thickness. The thicknesses of books 4 and 1 are 1 and 3 respectively. 1 + 3 = 4, which fits in the shelf of capacity 10. Hence, the answer is \\"Yes\\".","solution":"def can_books_fit(N, M, Q, capacities, thicknesses, queries): results = [] for query in queries: shelf_index = query[0] - 1 book_indices = query[1:] total_thickness = sum(thicknesses[book_index - 1] for book_index in book_indices) if total_thickness <= capacities[shelf_index]: results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"In a faraway galaxy, there are planets named A, B, and C. Each planet is connected to one another via teleporters that transport objects without altering them. On each planet, there is a station that can generate objects. Planet A generates an object and teleports it to planet B. Planet B then teleports this object to planet C, and then planet C sends it back to planet A. However, these teleporters have started to malfunction; specifically, sometimes an object that starts out as a string on planet A gets teleported incorrectly, resulting in a modified string on planet B, and so forth. Given the original string ‘s’ that Planet A generates, string ‘t’ that arrives at Planet B, and string ‘u’ that arrives back at Planet A, determine if it is possible that the teleporters\' modifications followed a consistent pattern. The modifications must follow these rules: 1. The teleporters can consistently replace any character with another one. 2. The replacement is one-to-one. If the teleport from Planet A to Planet B consistently replaces character ‘a’ with ‘b’, no other character should be replaced with ‘b’. Write a function that checks whether it\'s possible for the string modifications to follow a consistent pattern. -----Input----- The input consists of three non-empty strings \'s\', \'t\', and \'u\' of equal length N (1 ≤ N ≤ 10^5), composed of lowercase English letters. -----Output----- Output \\"Yes\\" if the teleporters can follow such a consistent pattern, \\"No\\" otherwise. The answer is case-sensitive. -----Examples----- Input abc bcd def Output Yes Input abc bcc cde Output No -----Note----- In the first sample, the pattern can be: - From String `s` to String `t`: a->b, b->c, c->d. - From String `t` to String `u`: b->d, c->e, d->f. In the second sample, the pattern is inconsistent because \'b\' is replaced by both \'c\' in `s` to `t` and \'d\' in `t` to `u`.","solution":"def is_consistent_pattern(s, t, u): def is_valid_transformation(source, target): mapping = {} reverse_mapping = {} for a, b in zip(source, target): if a in mapping and mapping[a] != b: return False if b in reverse_mapping and reverse_mapping[b] != a: return False mapping[a] = b reverse_mapping[b] = a return True return \\"Yes\\" if is_valid_transformation(s, t) and is_valid_transformation(t, u) else \\"No\\""},{"question":"Lilly enjoys riding her bicycle in her free time. She has recently purchased an advanced bicycle that can record her cycling speed in km/h at each minute. As she cycles, she wants to determine the maximum possible average speed she can achieve over any continuous segment of her journey. Given a list of integers where each integer represents her speed at a particular minute, your task is to find the highest possible average speed over any continuous subarray of at least length K. -----Input----- The first line contains two integers N and K, the number of minutes Lilly recorded her speed for and the minimum length of the subarray respectively. The second line contains N space-separated integers representing her speed at each minute. -----Output----- Output a single number, the highest possible average speed of any continuous subarray of at least length K. Print the result rounded to two decimal places. -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ speeds of each minute ≤ 100 - 1 ≤ K ≤ N -----Example----- Input 5 3 10 20 30 40 50 Output 40.00 -----Explanation----- The continuous subarray [30, 40, 50] has the highest average of 40.00 among all subarrays of at least length 3.","solution":"def find_max_average_speed(n, k, speeds): Find the highest possible average speed of any continuous subarray of at least length k. :param n: int : Number of minutes. :param k: int : Minimum length of the subarray. :param speeds: List[int] : List of recorded speeds during each minute. :return: float : The highest possible average speed, rounded to two decimal places. max_avg = float(\'-inf\') for start in range(n - k + 1): for end in range(start + k, n + 1): subarray = speeds[start:end] current_avg = sum(subarray) / len(subarray) if current_avg > max_avg: max_avg = current_avg return round(max_avg, 2)"},{"question":"You are given an array of integers. Your task is to determine for each subarray described by a range if the cumulative sum of elements in that subarray is even or odd. You need to process multiple queries efficiently. Example 1: Input: N = 5 arr[] = {1, 2, 3, 4, 5} Q = 3 Queries = [(0, 2), (1, 3), (2, 4)] Output: Odd Even Odd Explanation: For the first query with range (0, 2), the subarray is [1, 2, 3], and its sum is 6 which is even. For the second query with range (1, 3), the subarray is [2, 3, 4], and its sum is 9 which is odd. For the third query with range (2, 4), the subarray is [3, 4, 5], and its sum is 12 which is even. Your Task: Complete the function `processQueries()` which takes the array, size of the array, number of queries, and the list of queries as parameters. It should return an array of strings, \\"Even\\" if the sum of the subarray is even, \\"Odd\\" otherwise. Expected Time Complexity: O(N + Q) Expected Auxiliary Space: O(N) Constraints: 1 <= N, Q <= 10^5 1 <= arr[i] <= 10^6, for each valid i 0 <= L <= R < N","solution":"def processQueries(N, arr, Q, queries): This function takes an array arr of size N, number of queries Q, and a list of queries where each query is a tuple (L, R). It returns a list of strings \\"Even\\" or \\"Odd\\" for each query indicating whether the sum of the subarray from L to R is even or odd. # To handle the queries efficiently, we use prefix sums prefix_sum = [0] * (N + 1) # Building the prefix sum array for i in range(N): prefix_sum[i + 1] = prefix_sum[i] + arr[i] result = [] for L, R in queries: subarray_sum = prefix_sum[R + 1] - prefix_sum[L] if subarray_sum % 2 == 0: result.append(\\"Even\\") else: result.append(\\"Odd\\") return result"},{"question":"Doe is a software developer who loves to optimize his code. Recently, he came across a problem at work where he needed to process a large list of integers. Each integer represents a user action ID. Doe needs to determine how many times each distinct action ID appears in the list. Given a list of integers, you have to write a program that counts the frequency of each distinct integer and outputs these frequencies in non-decreasing order of the integers. -----Input----- - The first line of the input contains an integer n (1 le n le 1000) — the number of integers. - The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the action IDs. -----Output----- Print each distinct action ID and its frequency in two columns, with the action IDs sorted in non-decreasing order. -----Examples----- Sample Input: 5 3 3 1 2 2 Sample Output: 1 1 2 2 3 2 Sample Input: 8 5 4 6 5 6 5 4 6 Sample Output: 4 2 5 3 6 3","solution":"def count_frequencies(n, action_ids): Takes an integer n and a list of integers action_ids, and returns the frequencies of each distinct integer in the list, sorted in non-decreasing order of the integers. from collections import Counter # Count the frequencies of each action ID frequency_dict = Counter(action_ids) # Sort the dictionary by key (action ID) sorted_frequency = sorted(frequency_dict.items()) return sorted_frequency # Sample usage # print(count_frequencies(5, [3, 3, 1, 2, 2])) # Output: [(1, 1), (2, 2), (3, 2)] # print(count_frequencies(8, [5, 4, 6, 5, 6, 5, 4, 6])) # Output: [(4, 2), (5, 3), (6, 3)]"},{"question":"A software company has a project management system where each project is represented by a node in a directed graph. The graph contains n nodes and m edges, where each edge represents a task dependency between two projects. Every project can take a variable amount of time to complete, based on how long its dependent tasks take. As the lead developer, you need to find the longest time it can take to complete all projects if executed sequentially according to their dependencies. Here’s what you need to do: - Compute the longest path in the graph, where each path represents the sequence in which projects must be completed based on dependencies. Input The first line of input will contain two space-separated integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 2 x 10^5), the number of nodes and edges respectively. Each of the next m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n), indicating a directed edge from u to v. It is guaranteed that the graph is a Directed Acyclic Graph (DAG). Output Print a single integer — the length of the longest path in the graph. SAMPLE INPUT 6 6 1 2 2 3 2 4 3 5 4 5 5 6 SAMPLE OUTPUT 4 Explanation One of the longest paths in this DAG is: 1 -> 2 -> 4 -> 5 -> 6. This path involves 4 edges and thus the longest path length is 4.","solution":"from collections import defaultdict, deque def find_longest_path(n, m, edges): # Build the graph (adjacency list) and a list for in-degrees graph = defaultdict(list) in_degree = [0] * (n + 1) # Construct the graph for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Implementation of Topological Sorting using Kahn\'s Algorithm topo_order = [] queue = deque() # Initialize the queue with nodes having zero in-degree for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) while queue: node = queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Initialize distances to all vertices as minus infinite dist = [-float(\'inf\')] * (n + 1) # Distance to starting point of the graph is 0 # We will start assuming node 1 as the starting point for node in topo_order: if dist[node] == -float(\'inf\'): dist[node] = 0 for neighbor in graph[node]: if dist[neighbor] < dist[node] + 1: dist[neighbor] = dist[node] + 1 return max(dist) # Example execution: n = 6 m = 6 edges = [(1, 2), (2, 3), (2, 4), (3, 5), (4, 5), (5, 6)] print(find_longest_path(n, m, edges)) # Output should be 4"},{"question":"Given a 2-dimensional grid containing \'0\'s and \'1\'s, where \'1\' represents land and \'0\' represents water, an island is a group of \'1\'s (land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water. Your task is to write a function `numIslands` that determines the number of distinct islands in the grid. Input The input is provided as a list of strings, where each string represents a row in the grid. Each string contains only \'0\'s and \'1\'s. Constraints - The grid would have at most dimensions 100 x 100. - The depth-first search and breadth-first search algorithms are acceptable. Output The output should be a single integer representing the number of islands. Examples Input [ \\"11000\\", \\"11000\\", \\"00100\\", \\"00011\\" ] Output 3 Input [ \\"11010\\", \\"11010\\", \\"00000\\", \\"00011\\" ] Output 3 Function signature ```python def numIslands(grid: List[str]) -> int: ```","solution":"from typing import List def numIslands(grid: List[str]) -> int: if not grid: return 0 rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'0\' or visited[r][c]: return visited[r][c] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dr, dc in directions: dfs(r + dr, c + dc) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\' and not visited[r][c]: dfs(r, c) island_count += 1 return island_count"},{"question":"You are given a list of integer heights representing the elevation map where the width of each bar is 1. Write a function that calculates how much water can be trapped after raining. Input The first line contains an integer n, the number of elements. The second line contains n integers representing the height of each bar. Output Print the total units of water that can be trapped. Constraints 1 ≤ n ≤ 100 0 ≤ height[i] ≤ 1000 SAMPLE INPUT 6 0 1 0 2 1 0 SAMPLE OUTPUT 1 Explanation The elevation map is: ``` * * * * * ***** ******** 021210 ``` The amount of water trapped is 1 unit, which is the space occupied by water between heights 1 and 2. [Note: The above diagram visually represents the elevation map and trapped water for better understanding. The actual implementation will involve calculating this programmatically without visual aids.]","solution":"def trap(height): Given a list of integer heights representing the elevation map where the width of each bar is 1, calculates how much water can be trapped after raining. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate total water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Varun is organizing a coding competition. He wants to ensure that every participant gets an equal amount of initial tokens to start with. However, the total number of tokens Varun has might not be perfectly divisible by the number of participants. In that case, he will distribute as many tokens as possible to each participant and keep the remaining tokens to himself. Given the number of tokens Varun has and the number of participants, write a program to calculate how many tokens each participant will get and how many tokens will be left with Varun. ------ Input: ------ The first line of the input contains a single integer T denoting the number of test cases. Each of the next T lines contains two integers M and P where M is the total number of tokens and P is the number of participants. ------ Output: ------ For each test case, output two integers in a single line separated by a space: the number of tokens each participant will get and the number of tokens that will be left with Varun. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ M ≤ 10^9 1 ≤ P ≤ 10^5 ----- Sample Input 1 ------ 3 10 3 15 4 0 5 ----- Sample Output 1 ------ 3 1 3 3 0 0 ----- Explanation 1 ------ Example case 1: Varun has 10 tokens and 3 participants. Each participant gets floor(10/3) = 3 tokens, and Varun has 10 % 3 = 1 token left. Example case 2: Varun has 15 tokens and 4 participants. Each participant gets floor(15/4) = 3 tokens, and Varun has 15 % 4 = 3 tokens left. Example case 3: Varun has 0 tokens and 5 participants. Each participant gets 0 tokens, and Varun has 0 tokens left.","solution":"def distribute_tokens(T, cases): results = [] for case in cases: M, P = case tokens_per_participant = M // P tokens_left_with_varun = M % P results.append((tokens_per_participant, tokens_left_with_varun)) return results"},{"question":"You are building a software application to manage a library system. The library contains multiple books, and each book has the following attributes: Title, Author, Publication Year, and Number of Copies. The library system needs to support the addition of new books, searching for books based on different criteria, and generating a report of all books sorted by title. Write a program that can handle the following operations: 1. **Add a new book**: Provide details for a new book, including its title, author, publication year, and number of copies. Ensure that the same book (exact match of title and author) cannot be added more than once. If a duplicate book is attempted to be added, increment the number of copies of the existing book by the new book\'s number of copies. 2. **Search for books**: Search books based on a specific search type, which can be: - By title - By author - By publication year 3. **Generate a sorted report**: Generate a report of all the books in the library sorted by their titles in alphabetical order. You will implement these functionalities through a series of commands. Each command will be a string, and the input will be a list of such commands. The program should process these commands and produce the appropriate output. -----Input Format----- - The first line of input contains an integer Q, the number of commands to follow. - The next Q lines each contain a string representing a command in one of the following formats: - `ADD <Title> <Author> <Year> <Copies>` - Adds a new book to the library. - `SEARCH BY TITLE <Title>` - Searches for books by the given title and prints their details. - `SEARCH BY AUTHOR <Author>` - Searches for books by the given author and prints their details. - `SEARCH BY YEAR <Year>` - Searches for books published in the given year and prints their details. - `GENERATE REPORT` - Generates and prints a report of all the books sorted by title. For `ADD` operation, `<Title>`, `<Author>` are strings without spaces, `<Year>` is an integer, and `<Copies>` is an integer. For `SEARCH` operations, the search results should include all attributes of the matching books. In the `GENERATE REPORT` operation, print the attributes of the books sorted by title. -----Output Format----- - For `SEARCH BY TITLE`, `SEARCH BY AUTHOR` and `SEARCH BY YEAR` commands, print the details of the books that match the search criteria. Each book’s details should be printed in the format `Title,Author,Year,Copies`. - For `GENERATE REPORT` command, print a list of all books in the library sorted by their titles. Each book’s details should be printed in the format `Title,Author,Year,Copies`. -----Constraints----- - 1 le Q le 1000 - 1 le text{Year} le 2023 - 1 le text{Copies} le 1000 - All string attributes (Title, Author) will have a length of at most 100 characters. -----Sample Input----- 7 ADD TheGreatGatsby FScottFitzgerald 1925 3 ADD ToKillAMockingBird HarperLee 1960 2 SEARCH BY AUTHOR HarperLee ADD TheSunAlsoRises ErnestHemingway 1926 1 SEARCH BY TITLE TheSunAlsoRises ADD TheGreatGatsby FScottFitzgerald 1925 2 GENERATE REPORT -----Sample Output----- ToKillAMockingBird,HarperLee,1960,2 TheSunAlsoRises,ErnestHemingway,1926,1 TheGreatGatsby,FScottFitzgerald,1925,5 TheGreatGatsby,FScottFitzgerald,1925,5 TheSunAlsoRises,ErnestHemingway,1926,1 ToKillAMockingBird,HarperLee,1960,2","solution":"class Library: def __init__(self): self.books = [] def add_book(self, title, author, year, copies): for book in self.books: if book[\\"title\\"] == title and book[\\"author\\"] == author: book[\\"copies\\"] += copies return self.books.append({ \\"title\\": title, \\"author\\": author, \\"year\\": year, \\"copies\\": copies }) def search_by_title(self, title): return [book for book in self.books if book[\\"title\\"] == title] def search_by_author(self, author): return [book for book in self.books if book[\\"author\\"] == author] def search_by_year(self, year): return [book for book in self.books if book[\\"year\\"] == year] def generate_report(self): return sorted(self.books, key=lambda x: x[\\"title\\"]) def library_system(commands): library = Library() output = [] for command in commands: parts = command.split() if parts[0] == \\"ADD\\": title = parts[1] author = parts[2] year = int(parts[3]) copies = int(parts[4]) library.add_book(title, author, year, copies) elif command.startswith(\\"SEARCH BY TITLE\\"): title = \\" \\".join(parts[3:]) results = library.search_by_title(title) for book in results: output.append(f\\"{book[\'title\']},{book[\'author\']},{book[\'year\']},{book[\'copies\']}\\") elif command.startswith(\\"SEARCH BY AUTHOR\\"): author = \\" \\".join(parts[3:]) results = library.search_by_author(author) for book in results: output.append(f\\"{book[\'title\']},{book[\'author\']},{book[\'year\']},{book[\'copies\']}\\") elif command.startswith(\\"SEARCH BY YEAR\\"): year = int(parts[3]) results = library.search_by_year(year) for book in results: output.append(f\\"{book[\'title\']},{book[\'author\']},{book[\'year\']},{book[\'copies\']}\\") elif command == \\"GENERATE REPORT\\": results = library.generate_report() for book in results: output.append(f\\"{book[\'title\']},{book[\'author\']},{book[\'year\']},{book[\'copies\']}\\") return output"},{"question":"You are given a list of temperature readings taken at various times of the day. However, due to a sensor error, some of these readings might be unusable and are recorded as an outlier value, -9999. You need to write a program that processes these temperature readings to find the average valid temperature for the day. Input format: The input starts with a single integer, n, representing the number of temperature readings for the day. The next n lines each contain a reading which can be a valid temperature (a float) or the outlier value -9999. Output format: You need to print the average of the valid temperatures rounded to 2 decimal places. If there are no valid temperatures, print \\"No valid temperatures\\". Constraints: 1 ≤ n ≤ 1,000 The temperature readings are floats in the range -50.0 to 50.0, excluding the outlier value -9999. Example Input: 5 23.5 -9999 32.1 28.0 -9999 Example Output: 27.87 SAMPLE INPUT 3 -9999 -9999 -9999 SAMPLE OUTPUT No valid temperatures","solution":"def average_temperature(n, readings): Given the number of temperature readings and a list of readings, returns the average of the valid temperatures (excluding the outlier value -9999) rounded to 2 decimal places. If there are no valid temperatures, returns the string \\"No valid temperatures\\". Parameters: n (int): Number of temperature readings. readings (list of floats): List of temperature readings. Returns: float or str: The average valid temperature rounded to 2 decimal places or \\"No valid temperatures\\" if there are no valid temperatures. valid_readings = [r for r in readings if r != -9999] if not valid_readings: return \\"No valid temperatures\\" average = sum(valid_readings) / len(valid_readings) return round(average, 2)"},{"question":"Given a list of non-negative integers, write a function that finds the contiguous subarray (containing at least one number) which has the maximum sum and returns that sum. The function should also return the start and end indices of this subarray. Input: - An integer `n`, the number of elements in the list. - A list of `n` non-negative integers. Output: - The maximum sum. - The start and end indices of the subarray that has the maximum sum. Constraints: 1 <= n <= 10^5 0 <= array[i] <= 10^6 SAMPLE INPUT 6 1 2 3 4 5 6 SAMPLE OUTPUT 21 0 5 Explanation: In the given test case, the entire array forms the subarray which has the maximum sum 21 and it starts from index 0 and ends at index 5.","solution":"def max_subarray_sum(n, array): Finds the contiguous subarray with the maximum sum and returns the sum along with the start and end indices. if n == 0: return 0, -1, -1 max_sum = current_sum = array[0] start = end = temp_start = 0 for i in range(1, n): if current_sum + array[i] < array[i]: current_sum = array[i] temp_start = i else: current_sum += array[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, start, end"},{"question":"You are given an array of integers of length N. You need to find an increasing subsequence of the array such that the sum of the elements in this subsequence is the maximum possible. An increasing subsequence is a subsequence where each element is strictly greater than the preceding one. The subsequence does not need to consist of consecutive elements. Write a function: ```python def max_increasing_subsequence_sum(arr: List[int]) -> int: ``` # Input - An array `arr` of integers of length `N`. - 1 ≤ N ≤ 10^4 - -10^3 ≤ arr[i] ≤ 10^3 # Output - Return an integer representing the maximum sum of an increasing subsequence. # Examples Example 1 ```python arr = [4, 6, 1, 3, 8, 4, 6] # The increasing subsequence with the maximum sum is [4, 6, 8] # Hence the output should be 18 assert max_increasing_subsequence_sum(arr) == 18 ``` Example 2 ```python arr = [-1, -2, -3, -4] # The only increasing subsequence with the maximum sum is [-1] # Hence the output should be -1 assert max_increasing_subsequence_sum(arr) == -1 ``` Example 3 ```python arr = [10, 5, 4, 3] # The increasing subsequence with the maximum sum is [10] # Hence the output should be 10 assert max_increasing_subsequence_sum(arr) == 10 ``` # Note - It\'s guaranteed that your solution will run in a reasonable time frame for the given constraints. - You may use any algorithmic technique to solve the problem as long as it respects the input constraints and provides the correct result.","solution":"from typing import List def max_increasing_subsequence_sum(arr: List[int]) -> int: n = len(arr) # Create an array to store the maximum sum of the increasing subsequence ending at each index dp = arr[:] # Start from the second element and check for all previous elements if we can include the current element in an increasing subsequence for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + arr[i]) return max(dp)"},{"question":"The task is to implement a function that, given a string `sequence` representing a DNA sequence and an integer `k`, returns the most frequent k-length substring of the given sequence. A DNA sequence consists of characters \'A\', \'C\', \'G\', and \'T\'. A k-length substring is any substring of length `k` that can be found within the DNA sequence. For example, given `sequence = \\"ACGTACGTACGT\\"` and `k = 3`, the most frequent 3-length substring is `\\"ACG\\"` as it repeats 3 times. Here are some more examples: Example 1: Input: `sequence = \\"AAGTCCGTTAACG\\"`, `k = 2` Output: `\\"AA\\"` Example 2: Input: `sequence = \\"GGGCGGC\\"`, `k = 4` Output: `\\"GGGC\\"` Example 3: Input: `sequence = \\"ATGCTAGCTAGC\\"`, `k = 1` Output: `\\"A\\"` In the case where there are multiple substrings with the same highest frequency, return the lexicographically smallest one. Note: If the length of the sequence is less than `k`, return an empty string.","solution":"def most_frequent_k_length_substring(sequence, k): from collections import defaultdict if len(sequence) < k: return \\"\\" substring_freq = defaultdict(int) for i in range(len(sequence) - k + 1): substring = sequence[i:i + k] substring_freq[substring] += 1 max_frequency = max(substring_freq.values()) most_frequent_substrings = [key for key, value in substring_freq.items() if value == max_frequency] return min(most_frequent_substrings)"},{"question":">Write a function `group_even_odd(lst)` that takes a list of integers, `lst`, and returns a string representing the integers grouped by even and odd properties in the following manner: 1. All odd numbers are listed on the first line. 2. All even numbers are listed on the second line. 3. Each group of numbers should be sorted in ascending order. 4. Each group of numbers should be separated by a comma (`,`). 5. If there are no odd or even numbers, the respective line should be an empty string. # Examples ```python group_even_odd([4, 1, 3, 2, 7, 6, 8, 9]) # Output: # \'1,3,7,9n2,4,6,8\' group_even_odd([11, 13, 15, 17]) # Output: # \'11,13,15,17n\' group_even_odd([2, 4, 6, 8]) # Output: # \'n2,4,6,8\' group_even_odd([2, 3, 4, 5]) # Output: # \'3,5n2,4\' ``` # Constraints - Each number in the list `lst` is guaranteed to be a positive integer. - The length of `lst` will be between 0 and 1000.","solution":"def group_even_odd(lst): # Separate the list into odd and even numbers odd_numbers = sorted([num for num in lst if num % 2 != 0]) even_numbers = sorted([num for num in lst if num % 2 == 0]) # Join the numbers into comma-separated strings odd_line = \',\'.join(map(str, odd_numbers)) even_line = \',\'.join(map(str, even_numbers)) # Return the result in the specified format return f\\"{odd_line}n{even_line}\\""},{"question":"Anil works in a library and has to arrange a sequence of books on a shelf. Each book has a unique height. One day, his supervisor gave him a list of books to be arranged in a specific order and he has to frequently answer queries concerning the difference in height between the tallest book and the shortest book in certain subarrays. Anil decided to write a program to accomplish this task and help manage the queries more efficiently. Input The first line of the input contains N, the number of books Anil needs to arrange on the shelf. Next N lines each contain one integer representing the height of each book. The next line contains an integer Q, the number of queries given by the supervisor. Each of the next Q lines contains two space-separated integers (i, j), where i and j are 1-based indices, indicating the range of books Anil needs to consider for the query. Anil must find the difference in height between the tallest and the shortest book within the subarray from the i-th position to the j-th position (both included). Output: Q lines, each containing the height difference for the respective query. Constraints 1 ≤ N ≤ 1500 1 ≤ Q ≤ N^2 Each height given will be a positive integer that fits into a 32-bit signed integer. Note: Pay attention to the efficiency since the number of queries can be large. SAMPLE INPUT 5 2 5 3 8 6 3 1 3 2 4 1 5 SAMPLE OUTPUT 3 5 6","solution":"def height_difference(heights, queries): Given the heights of the books and the list of queries, return the differences between the tallest and shortest books for each query. :param heights: List[int], heights of the books. :param queries: List[Tuple[int, int]], the queries as tuples where each tuple consists of start and end indices (1-based). :return: List[int], the list of differences for each query. results = [] for (start, end) in queries: subarray = heights[start-1:end] max_height = max(subarray) min_height = min(subarray) results.append(max_height - min_height) return results # Example N = 5 heights = [2, 5, 3, 8, 6] queries = [(1, 3), (2, 4), (1, 5)] print(height_difference(heights, queries)) # Should print [3, 5, 6]"},{"question":"You are given a list of integers of length N and an integer X. Your task is to find whether the list contains two distinct integers whose sum is X. If such a pair exists, print \\"Yes\\", otherwise print \\"No\\". -----Constraints----- - 2 ≤ N ≤ 100 - -10^3 ≤ integers in the list ≤ 10^3 - -10^3 ≤ X ≤ 10^3 -----Input----- Input is given from Standard Input in the following format: N X a1 a2 a3 ... aN -----Output----- Print \\"Yes\\" if there are two distinct integers in the list whose sum is X, otherwise print \\"No\\". -----Sample Input----- 4 5 1 2 3 4 -----Sample Output----- Yes","solution":"def has_pair_with_sum(numbers, X): Returns \\"Yes\\" if there are two distinct integers in the list `numbers` whose sum is `X`, otherwise \\"No\\". seen = set() for num in numbers: if X - num in seen: return \\"Yes\\" seen.add(num) return \\"No\\" def process_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) X = int(data[1]) numbers = list(map(int, data[2:2+N])) print(has_pair_with_sum(numbers, X))"},{"question":"Lucy has a rectangular grid with n rows and m columns represented as a matrix of size n x m. Each cell contains a non-negative integer. Lucy can flip a rectangular subgrid (i.e., reverse the order of the rows and columns within the subgrid). She wants to find the largest sum of an element she can achieve in the grid by flipping at most one subgrid. Your task is to help Lucy by finding the maximum possible sum after flipping a single rectangular subgrid at most once. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 500). Each of the following n lines contains m integers describing the grid (0 ≤ grid[i][j] ≤ 10^6). -----Output----- Print a single integer denoting the maximum possible sum after flipping at most one rectangular subgrid. -----Examples----- Input 2 3 1 2 3 4 5 6 Output 21 Input 3 3 1 2 1 2 3 2 1 2 1 Output 5","solution":"def max_sum_after_flip(n, m, grid): Returns the maximum sum of an element in the grid after flipping one rectangular subgrid at most once. max_num = -1 # Initialize max number found in the grid for row in grid: max_num = max(max_num, max(row)) return max_num"},{"question":"Write a function that takes a string and returns a new string with the vowels (a, e, i, o, u, A, E, I, O, U) removed. All other characters, including punctuation and spaces, should remain in the same order and unchanged. If the string has leading or trailing spaces, they should be preserved. The input string will not be empty. Examples ``` \\"Hello, World!\\" => \\"Hll, Wrld!\\" \\" This is a test. \\" => \\" Ths s tst. \\" ```","solution":"def remove_vowels(input_string): Returns a new string with all vowels removed from the input string. Vowels are (a, e, i, o, u, A, E, I, O, U). All other characters, including punctuation and spaces, remain unchanged. vowels = \'aeiouAEIOU\' return \'\'.join([char for char in input_string if char not in vowels])"},{"question":"In a given grid of size m x n, each cell represents some chocolates. Each cell contains a positive integer which represents the number of chocolates in that cell. You need to collect the maximum number of chocolates starting from the top-left corner (0,0) to the bottom-right corner (m-1,n-1), moving only right or down at each step. Write a function maxChocolates() that takes an integer m representing the number of rows, an integer n representing the number of columns, and a 2D array grid representing the number of chocolates in each cell, and returns the maximum number of chocolates that can be collected on the path from the top-left corner to the bottom-right corner. Example 1: Input: m = 3 n = 3 grid = [[1, 3, 1], [1, 5, 1], [4, 2, 1]] Output: 12 Explanation: The path to collect the maximum chocolates is 1 -> 3 -> 5 -> 2 -> 1, thus the total number of chocolates collected is 12. Example 2: Input: m = 2 n = 2 grid = [[1, 2], [1, 1]] Output: 4 Explanation: The path to collect the maximum chocolates is 1 -> 2 -> 1, thus the total number of chocolates collected is 4. Your Task: You do not need to read input or print anything. Your task is to complete the function maxChocolates(), which takes integers m, n, and a 2D array grid as input and returns the maximum number of chocolates that can be collected. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(1) Constraints: 1 <= m, n <= 100 1 <= grid[i][j] <= 100","solution":"def maxChocolates(m, n, grid): Returns the maximum number of chocolates that can be collected moving from the top-left to the bottom-right of the grid. # Create a 2D array to store the maximum chocolates collected up to each cell dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"In a parallel world, Robert is known to be a legendary archer. His arrows never miss their target, and his accuracy is unprecedented. One day, his friends challenged him with a unique task to determine the longest sequence of increasing heights among the targets he hit. Each arrow hits a target of a certain height. Given the heights of multiple targets hit by Robert in the order he hit them, his friends want to find the maximum number of targets that can form a strictly increasing sequence in the order they were hit. Write a program to solve Robert\'s problem. -----Input----- The first line of input contains an integer N (1 leq N leq 100000), the number of targets hit by Robert. The second line of input contains N space-separated integers h_1, h_2, ..., h_N (1 leq h_i leq 10^9), the heights of the targets hit by Robert in the order he hit them. -----Output----- Output a single integer, the length of the longest strictly increasing subsequence of target heights. -----Examples----- Sample Input 1: 6 10 9 2 5 3 7 Sample Output 1: 3 Sample Input 2: 8 1 3 6 7 9 4 10 5 Sample Output 2: 6 Explanation: In the first example, one of the longest increasing subsequences is [2, 5, 7], of length 3. In the second example, one of the longest increasing subsequences is [1, 3, 6, 7, 9, 10], of length 6.","solution":"import bisect def longest_increasing_subsequence(heights): Returns the length of the longest strictly increasing subsequence. if not heights: return 0 lis = [] for height in heights: pos = bisect.bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis)"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation on the string any number of times (possibly zero): - Select a substring of s and reverse it. Determine the lexicographically smallest string you can obtain by performing the operation any number of times. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of one line containing a string s (1 le |s| le 1000) consisting of only lowercase English letters. It is guaranteed that the sum of the lengths of all strings in the input does not exceed 10000. -----Output----- For each test case, print the lexicographically smallest string you can obtain after performing the operation any number of times. -----Examples----- Input 3 cba abcd bca Output abc abcd abc -----Note----- In the first test case, we can reverse the entire string \\"cba\\" to get \\"abc\\", which is the lexicographically smallest string possible. In the second test case, the string \\"abcd\\" is already the lexicographically smallest possible string, so no operation needs to be performed. In the third test case, we can reverse the substring \\"bca\\" to get \\"acb\\", and then reverse \\"ac\\" to obtain \\"abc\\", which is the lexicographically smallest string possible.","solution":"def lexicographically_smallest_string(t, test_cases): Function to determine the lexicographically smallest string possible by reversing any substring any number of times. :param t: Number of test cases :param test_cases: List of strings (test cases) :return: List of lexicographically smallest strings for each test case result = [] for s in test_cases: result.append(\'\'.join(sorted(s))) return result"},{"question":"In an effort to stop the spread of misinformation, a council has decided to track all rumors in a small city and trace the origins of any falsehoods. Each person in the city can spread a rumor to exactly one other person. This information is collected and recorded, with each person either passing a rumor to another person or staying silent. Your task is to analyze the rumor spreading pattern to determine the origins of all rumors that have been spread, and identify all the distinct starting points of these rumors. Input: There are multiple test cases. Each case starts with an integer N, the number of people in the city (numbered from 1 to N) and M, the number of rumor spreading information. The next M lines each contain two integers A and B, indicating that person A passed the rumor to person B. Input is terminated with a case where N = 0 and M = 0. This case should not be processed. Output: For each test case, print a line containing all the distinct origins of the rumors in ascending order. If no rumors were spread, print \\"No rumors\\". Constraints: 1 ≤ N ≤ 100000 0 ≤ M ≤ 100000 Sample Input 5 4 1 2 2 3 3 4 4 5 0 0 Sample Output 1","solution":"def find_origins_of_rumors(cases): Determines the origins of all rumors in each test case. Parameters: cases (list): List of test cases with each test case being a tuple (N, M, rumors). N => number of people in the city M => number of rumor spreading information rumors => list of tuples (A, B) where A spread the rumor to B Returns: List of strings: Each entry in the list is the origins of the rumors in the respective test case. If no rumors were spread, returns \\"No rumors\\". results = [] for N, M, rumors in cases: if M == 0: results.append(\\"No rumors\\") continue receivers = set() givers = set() for rumor in rumors: A, B = rumor givers.add(A) receivers.add(B) origins = givers - receivers if not origins: results.append(\\"No rumors\\") else: results.append(\\" \\".join(map(str, sorted(origins)))) return results"},{"question":"A game consists of N rounds, and in each round, two players A and B score points. You are given two arrays, A[] and B[], of length N where A[i] and B[i] represent the scores of players A and B in the ith round, respectively. The goal is to determine the total score of the player who has the highest cumulative score at the end. Write a function `findWinner(int[] A, int[] B, int N)` that takes the arrays A and B, and the integer N as inputs, and returns the total score of the winning player. If both players have the same cumulative score, return -1. Example 1: Input: A = [10, 20, 30] B = [30, 20, 10] N = 3 Output: 60 Explanation: Player A\'s total score = 10 + 20 + 30 = 60 Player B\'s total score = 30 + 20 + 10 = 60 Since both players have the same score, return -1. Example 2: Input: A = [15, 25, 35] B = [10, 20, 30] N = 3 Output: 75 Explanation: Player A\'s total score = 15 + 25 + 35 = 75 Player B\'s total score = 10 + 20 + 30 = 60 Player A has a higher total score. Return 75. Your Task: You do not need to read input or print anything. Your task is to implement the function `findWinner()` which takes the arrays A and B and the integer N as inputs, and returns the total score of the player with the highest cumulative score or -1 if both players have the same cumulative score. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= A[i], B[i] <= 10^3","solution":"def findWinner(A, B, N): Finds the winner based on the cumulative scores from arrays A and B. Returns the total score of the player with the highest cumulative score, or -1 if both players have the same cumulative score. Parameters: A (list of int): Scores of player A in N rounds. B (list of int): Scores of player B in N rounds. N (int): Number of rounds. Returns: int: Total score of the winning player or -1 if scores are tied. total_A = sum(A) total_B = sum(B) if total_A > total_B: return total_A elif total_B > total_A: return total_B else: return -1"},{"question":"You are given a string S of length N. You need to find the lexicographically smallest string that can be obtained by removing exactly one character from string S. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of one line of input, a string S of length N. ------ Output Format ------ For each test case, output on a new line the lexicographically smallest string that can be obtained by removing exactly one character from string S. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 2 ≤ N ≤ 10^{5} - Sum of N over all test cases does not exceed 10^{6} ------ Subtasks ------ Subtask #1 (100 points): Original constraints ----- Sample Input 1 ------ 4 abcdef xyz cba aabbcc ----- Sample Output 1 ------ abcde xy ba aabbc ----- Explanation 1 ------ Test case 1: Removing the character \'f\' from \\"abcdef\\" results in the string \\"abcde\\", which is the lexicographically smallest possible string after removing one character. Test case 2: Removing the character \'z\' from \\"xyz\\" results in the string \\"xy\\", which is the lexicographically smallest possible string after removing one character. Test case 3: Removing the character \'c\' from \\"cba\\" results in the string \\"ba\\", which is the lexicographically smallest possible string after removing one character. Test case 4: Removing the character \'c\' from \\"aabbcc\\" results in the string \\"aabbc\\", which is the lexicographically smallest possible string after removing one character.","solution":"def lexicographically_smallest_string(S): Returns the lexicographically smallest string that can be obtained by removing exactly one character from the string S. N = len(S) # iterate through the string and compare lexicographical order after removing one character smallest_string = S[1:] # Initialize with the string after removing the first character for i in range(1, N): # Create a string after skipping the i-th character new_string = S[:i] + S[i+1:] if new_string < smallest_string: smallest_string = new_string return smallest_string def process_test_cases(test_cases): results = [] for S in test_cases: results.append(lexicographically_smallest_string(S)) return results"},{"question":"# Task Given an integer array `nums` of size `n`, your task is to find out the length of the longest contiguous subarray containing only even numbers, and the length of the longest contiguous subarray containing only odd numbers. Return these lengths as a dictionary/object with the keys `even` and `odd`. For example: If `nums=[4, 2, 1, 3, 5, 6, 8, 10, 7]`, the longest contiguous subarray of even numbers is `[6, 8, 10]` with length 3, and the longest contiguous subarray of odd numbers is `[1, 3, 5]` with length 3. Hence, the output should be `{\'even\': 3, \'odd\': 3}`. If `nums=[1, 1, 1, 1, 1]`, the longest contiguous subarray of even numbers does not exist, so its length is 0. The longest contiguous subarray of odd numbers is `[1, 1, 1, 1, 1]` with length 5. Hence, the output should be `{\'even\': 0, \'odd\': 5}`. If `nums=[2, 4, 6, 8, 2, 4]`, the longest contiguous subarray of even numbers is `[2, 4, 6, 8, 2, 4]` with length 6. The longest contiguous subarray of odd numbers does not exist, so its length is 0. Hence, the output should be `{\'even\': 6, \'odd\': 0}`. # Note - `1 <= nums.length <= 10000` - `-10^6 <= nums[i] <= 10^6` # Example For `nums = [4, 2, 1, 3, 5, 6, 8, 10, 7]`, the output should be `{\'even\': 3, \'odd\': 3}`. For `nums = [1, 1, 1, 1, 1]`, the output should be `{\'even\': 0, \'odd\': 5}`. For `nums = [2, 4, 6, 8, 2, 4]`, the output should be `{\'even\': 6, \'odd\': 0}`. For `nums = [1, 3, 2, 4, 7, 11, 13, 2, 6, 8, 10]`, the output should be `{\'even\': 4, \'odd\': 3}`.","solution":"def find_longest_subarrays(nums): Returns the lengths of the longest contiguous subarrays containing only even and only odd numbers. max_even_len = 0 max_odd_len = 0 current_even_len = 0 current_odd_len = 0 for num in nums: if num % 2 == 0: current_even_len += 1 max_even_len = max(max_even_len, current_even_len) current_odd_len = 0 else: current_odd_len += 1 max_odd_len = max(max_odd_len, current_odd_len) current_even_len = 0 return {\'even\': max_even_len, \'odd\': max_odd_len}"},{"question":"You are working on a file system simulation for a new operating system. In this file system, the structure follows a tree where each node represents a file or a directory. Each directory contains files and subdirectories, and each file has a specific size (in bytes). Write a function to compute the total size of a directory. The directory size is defined as the sum of all the sizes of files and subdirectories within it, recursively including all their contents. The input to your function will be a nested dictionary where: - Keys are the names of files or directories. - Values are either integers (representing file sizes in bytes) or nested dictionaries (representing subdirectories). Write a function `compute_directory_size(directory)` that takes a dictionary representing a directory and returns its total size in bytes. Input: - A dictionary representing the file system\'s directory structure. Output: - An integer representing the total size of the directory in bytes. Examples Input: ```python directory = { \\"file1.txt\\": 100, \\"file2.txt\\": 200, \\"subdir1\\": { \\"file3.txt\\": 300, \\"file4.txt\\": 400 }, \\"subdir2\\": { \\"file5.txt\\": 500, \\"subsubdir\\": { \\"file6.txt\\": 600 } } } ``` Output: ```python 2100 ``` Input: ```python directory = { \\"a.txt\\": 50, \\"b.txt\\": 150, \\"nested1\\": { \\"c.txt\\": 200, \\"d.txt\\": 250, \\"nested2\\": { \\"e.txt\\": 300 } } } ``` Output: ```python 950 ``` The structure ensures that all file names are unique within a directory, and every subdirectory\'s names are distinct from those at its same hierarchical level.","solution":"def compute_directory_size(directory): Computes the total size of a directory, including all its files and subdirectories recursively. Parameters: directory (dict): The directory structure represented as a nested dictionary. Returns: int: Total size of the directory in bytes. total_size = 0 for key, value in directory.items(): if isinstance(value, int): total_size += value elif isinstance(value, dict): total_size += compute_directory_size(value) return total_size"},{"question":"# Problem Statement A biologist is studying a new species of bacteria. The biologist observes that the bacteria multiply in a peculiar pattern. The bacteria start with a single cell and divide every hour, but following a specific rule. In the `i-th` hour, each cell divides into `i + 1` cells. Given the number of hours `h`, the biologist wants to determine the total number of bacteria cells present at the end of the `h-th` hour. Write a program to help the biologist calculate this number. Input - One integer `h` denoting the number of hours. Constraints - 0 ≤ `h` ≤ 50 Output - Print the total number of bacteria cells present at the end of the `h-th` hour on one line. Sample Sample Input 1 ``` 0 ``` Sample Output 1 ``` 1 ``` Sample Input 2 ``` 1 ``` Sample Output 2 ``` 2 ``` Sample Input 3 ``` 3 ``` Sample Output 3 ``` 15 ``` Example Input ``` 2 ``` Output ``` 6 ```","solution":"def bacteria_cells(h): Returns the total number of bacteria cells at the end of the h-th hour. :param h: Number of hours :type h: int :return: Total number of bacteria cells :rtype: int if h == 0: return 1 cells = 1 for i in range(1, h + 1): cells *= (i + 1) return cells"},{"question":"During a treasure hunt, Sandra discovers an ancient book containing mathematical puzzles. She comes across a sequence that piques her interest. First number: 3 Second number: 5 Third number: 11 Fourth number: 21 She deduced that there must be a specific rule guiding this sequence. Help Sandra determine the number at the \\"mth\\" position in this sequence. ** Input:** 7 NOTE: You do not need to create a program for this problem; just write your answers based on the given code snippet To see how to submit solution please check this link SAMPLE INPUT 6 SAMPLE OUTPUT 43","solution":"def find_mth_term(m): Returns the mth term in the sequence. if m == 1: return 3 elif m == 2: return 5 elif m == 3: return 11 elif m == 4: return 21 a, b = 11, 21 # Initial values corresponding to T_3 and T_4 for _ in range(5, m+1): a, b = b, b + 2 * a return b"},{"question":"You are given a series of temperature readings recorded every hour by a thermometer over a day. Calculate the largest temperature difference that occurred during any continuous period of hours. -----Constraints----- - The number of readings n is between 1 and 100 (1 ≤ n ≤ 100) - The temperature t_i is an integer where -50 ≤ t_i ≤ 50 -----Input----- Input is given from Standard Input in the following format: First line: number of readings n Second line: n space-separated integers indicating the temperature readings t_1, t_2, ..., t_n -----Output----- Print a single integer representing the largest temperature difference during any continuous period of hours. -----Sample Input----- 5 -10 0 10 20 30 -----Sample Output----- 40 For example, the largest difference occurred between the first reading (-10) and the last reading (30) during the period of 5 hours, resulting in a 40 degree difference.","solution":"def largest_temperature_difference(n, temperatures): Calculate the largest temperature difference that occurred during any continuous period of hours. :param n: int - The number of readings. :param temperatures: list of int - The list of temperature readings recorded each hour. :return: int - The largest temperature difference. # Initialize variables to store the minimum and maximum encountered temperatures min_temp = float(\'inf\') max_temp = float(\'-inf\') # Iterate over all temperature readings for temp in temperatures: if temp < min_temp: min_temp = temp if temp > max_temp: max_temp = temp # Return the difference between maximum and minimum temperature return max_temp - min_temp"},{"question":"Monocarp is managing a warehouse and needs to move several items from the initial location to target locations. The warehouse is represented as a grid with dimensions n x m. Each cell in the grid is either empty or contains an item. Monocarp can move the items UP, DOWN, LEFT, or RIGHT. An item cannot move into a cell occupied by another item or a wall. Given the initial and target positions of each item, determine the sequence of moves Monocarp needs to perform. Input The first line contains two integers n and m (1 ≤ n, m ≤ 50), the dimensions of the grid. The next n lines contain m characters each, describing the grid. Each character is one of the following: - \'.\' represents an empty cell, - \'*\' represents a cell with a wall, - \'A\' to \'Z\' represent the initial positions of the items, - \'a\' to \'z\' represent the target positions for the items \'A\' to \'Z\' (i.e., \'a\' is the target for \'A\', \'b\' is the target for \'B\', etc). Output Print the sequence of moves Monocarp needs to perform, one per line. The moves should be in the form \\"X direction\\", where X is the item being moved and direction is one of: UP, DOWN, LEFT, or RIGHT. If it\'s not possible to move all the items to their target positions, print \\"Impossible\\". Examples Input 5 5 A..*. ..... ..... .*... ...a. Output A DOWN A DOWN A DOWN A RIGHT A RIGHT Note In the example, the item \'A\' starts at position (0, 0) and needs to move to the target position (4, 4) labeled \'a\'. Monocarp moves \'A\' three steps DOWN and two steps RIGHT to reach its target position.","solution":"def parse_input(data): lines = data.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(line) for line in lines[1:n+1]] return n, m, grid def find_positions(grid): initial_positions = {} target_positions = {} for i in range(len(grid)): for j in range(len(grid[0])): char = grid[i][j] if \'A\' <= char <= \'Z\': initial_positions[char] = (i, j) elif \'a\' <= char <= \'z\': target_positions[chr(ord(char) - 32)] = (i, j) return initial_positions, target_positions def generate_moves(grid, n, m, initial_positions, target_positions): moves = [] for char in initial_positions: if char in target_positions: initial_x, initial_y = initial_positions[char] target_x, target_y = target_positions[char] while initial_x < target_x: initial_x += 1 moves.append(f\\"{char} DOWN\\") while initial_x > target_x: initial_x -= 1 moves.append(f\\"{char} UP\\") while initial_y < target_y: initial_y += 1 moves.append(f\\"{char} RIGHT\\") while initial_y > target_y: initial_y -= 1 moves.append(f\\"{char} LEFT\\") return moves def solve_monocarp(data): n, m, grid = parse_input(data) initial_positions, target_positions = find_positions(grid) moves = generate_moves(grid, n, m, initial_positions, target_positions) return \'n\'.join(moves) example_input = 5 5 A..*. ..... ..... .*... ...a. print(solve_monocarp(example_input))"},{"question":"You are given a string `s` consisting of lowercase alphabets and an integer `k`. Your task is to remove `k` characters from the string such that the resulting string is the lexicographically smallest string possible. For example, given: ``` s = \\"abcde\\" k = 2 ``` We can remove \\"d\\" and \\"e\\" to get \\"abc\\", which is the smallest string possible. Another example: ``` s = \\"acb\\" k = 1 ``` We can remove \\"c\\" to get \\"ab\\", which is the smallest string possible. Function Signature: ```python def smallest_lexicographical_string(s: str, k: int) -> str: pass ``` Constraints: - 1 <= len(s) <= 10^5 - 0 <= k <= len(s) - `s` consists of only lowercase English letters. Your function should be efficient in both time and space.","solution":"def smallest_lexicographical_string(s: str, k: int) -> str: Removes k characters from the string s to make it the lexicographically smallest possible. stack = [] to_remove = k for char in s: while stack and to_remove > 0 and stack[-1] > char: stack.pop() to_remove -= 1 stack.append(char) # If we still need to remove characters (k > 0), do it from the end final_result = stack[:len(stack) - to_remove] return \'\'.join(final_result)"},{"question":"You are given an array of n integers, where each element represents the height of a building. You can remove at most one building from the array. Determine the maximum number of consecutive buildings of the same height that can be obtained after removing at most one building. -----Input----- The first line of the input contains the integer n (1 ≤ n ≤ 1000) — the number of buildings. The second line contains the sequence of heights h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 1000), where h_{i} represents the height of the i-th building. -----Output----- Print one integer — the maximum number of consecutive buildings of the same height that can be obtained after removing at most one building. -----Examples----- Input 6 1 2 2 3 3 3 Output 3 Input 5 5 1 5 5 5 Output 4 Input 3 10 10 20 Output 2 -----Note----- In the first example, removing the first building gives the sequence 2, 2, 3, 3, 3. The maximum number of consecutive buildings of the same height is 3. In the second example, removing the second building gives the sequence 5, 5, 5, 5. The maximum number of consecutive buildings of the same height is 4. In the third example, removing the third building gives the sequence 10, 10. The maximum number of consecutive buildings of the same height is 2.","solution":"def max_consecutive_buildings(n, heights): if n == 1: return 1 max_count = 0 for i in range(n): # Try removing each building once new_heights = heights[:i] + heights[i+1:] current_count = 1 max_temp_count = 1 for j in range(1, n-1): if new_heights[j] == new_heights[j-1]: current_count += 1 max_temp_count = max(max_temp_count, current_count) else: current_count = 1 max_count = max(max_count, max_temp_count) return max_count"},{"question":"Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k. Note: - The function should return a boolean value. - You may assume that all elements in the array are distinct or contain duplicates as specified. -----Input----- - The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n). - The second line contains n integers representing the array nums where each integer (0 ≤ nums[i] ≤ 10^9). -----Output----- The output should contain a single line: \\"true\\" if the condition is met, otherwise \\"false\\". -----Examples----- Input 3 2 1 2 3 Output false Input 3 2 1 0 1 Output true","solution":"def contains_nearby_duplicate(nums, k): Returns true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k. index_map = {} for i, num in enumerate(nums): if num in index_map: if abs(i - index_map[num]) <= k: return True index_map[num] = i return False"},{"question":"Dasha has recently bought a new smartphone and wants to organize her app icons on the home screen in a specific way. The screen is divided into a grid of a times b cells. Each cell can have one app icon. Dasha wants to place m app icons on the screen such that the icons form a rectangle (a subgrid) of size x times y. Dasha can rearrange the app icons as needed, but she can place each app icon only once and all m app icons must be used to form the x times y rectangle. Help Dasha determine if it is possible to arrange the m app icons into a single x times y rectangle on the a times b screen. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case consists of one line containing four integers a, b, x, y (1 le a, b, x, y le 100, m is always equal to x times y) — the dimensions of the screen and the dimensions of the desired rectangle. -----Output----- For each test case, output on a separate line: \\"YES\\", if it is possible to arrange the m app icons into an x times y rectangle on the a times b screen; \\"NO\\" otherwise. -----Examples----- Input 4 5 5 3 2 4 4 2 2 3 3 4 1 6 2 3 2 Output YES YES NO YES -----Note----- In the first test case, it is possible to place a 3 times 2 rectangle on the 5 times 5 screen. In the second test case, it is possible to place a 2 times 2 rectangle on the 4 times 4 screen. In the third test case, it is not possible to place a 4 times 1 rectangle on the 3 times 3 screen as 4 is greater than 3. In the fourth test case, it is possible to place a 3 times 2 rectangle on the 6 times 2 screen.","solution":"def can_place_rectangle(t, test_cases): Determine if it is possible to arrange the m app icons into a single x by y rectangle on the a by b screen for all test cases. Arguments: t : int : number of test cases test_cases : list of tuples : each tuple contains four integers (a, b, x, y) Returns: list of str : \\"YES\\" or \\"NO\\" for each test case results = [] for case in test_cases: a, b, x, y = case if (x <= a and y <= b) or (y <= a and x <= b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Artie is a talented software engineer who loves geometric problems. He\'s currently working on dividing a convex polygon into non-overlapping triangles, which is known as triangulation. Artie knows that a convex polygon with n vertices can be triangulated such that the number of triangles is always n-2. He also knows that the sum of the internal angles for each polygon is fixed. However, he is interested in finding the specific total internal angle sum for triangulations involving varying numbers of vertices, given specific side lengths. -----Input----- The input begins with an integer k (3 leq k leq 10^5), the number of sides (or vertices) of the convex polygon. The next k lines consist of k integers each, representing the lengths of the sides of the polygon in counterclockwise order. -----Output----- Output one integer, the sum of all internal angles of the polygon in degrees. -----Examples----- Sample Input 1: 3 3 4 5 Sample Output 1: 180 Sample Input 2: 4 2 2 2 2 Sample Output 2: 360 Sample Input 3: 6 1 1 1 1 1 1 Sample Output 3: 720","solution":"def total_internal_angle_sum(k, side_lengths): Calculates the sum of all internal angles of a convex polygon. Parameters: k (int): The number of sides/vertices of the polygon. side_lengths (list of int): The lengths of the sides of the polygon. Returns: int: The sum of all internal angles of the polygon in degrees. return (k - 2) * 180"},{"question":"Sophie loves playing with a specific type of tiles. Each tile is either a 0 (representing water) or 1 (representing land). Given a grid of these tiles, Sophie wants to find the largest contiguous area of land (connected horizontally or vertically, but not diagonally). -----Input----- The first line of input contains two integers M and N (1 leq M, N leq 100) – the number of rows and columns in the grid. The next M lines each contain N integers, each either 0 or 1. -----Output----- The output should contain a single integer – the size of the largest contiguous area of land. -----Examples----- Sample Input 1: 4 5 0 1 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 0 1 Sample Output 1: 4 Sample Input 2: 3 3 1 0 1 0 1 0 1 0 1 Sample Output 2: 1","solution":"def largest_contiguous_area_of_land(M, N, grid): def dfs(x, y): if x < 0 or x >= M or y < 0 or y >= N or grid[x][y] == 0: return 0 grid[x][y] = 0 # Mark this cell as visited area = 1 area += dfs(x+1, y) area += dfs(x-1, y) area += dfs(x, y+1) area += dfs(x, y-1) return area max_area = 0 for i in range(M): for j in range(N): if grid[i][j] == 1: max_area = max(max_area, dfs(i, j)) return max_area"},{"question":"Create a function **\\"rotate_list\\"** that rotates the elements of a list to the right by a given number of steps. For example: ``` rotate_list([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3], because the list [1, 2, 3, 4, 5] shifted to the right by 2 steps results in [4, 5, 1, 2, 3] ``` If the number of steps is greater than the length of the list, the rotation should continue from the beginning. For negative steps, rotate the elements to the left. ``` rotate_list([1, 2, 3, 4, 5], 7) == [4, 5, 1, 2, 3], because 7 steps to the right is the same as 2 steps to the right (7 % 5 = 2) rotate_list([1, 2, 3, 4, 5], -2) == [3, 4, 5, 1, 2], because 2 steps to the left is the opposite of moving 3 steps to the right ```","solution":"def rotate_list(lst, steps): Rotates the elements of the list to the right by a given number of steps. If steps is negative, rotates to the left by -steps. if not lst: return [] n = len(lst) steps = steps % n # Normalize the number of steps return lst[-steps:] + lst[:-steps]"},{"question":"You are organizing a special Cooking Contest in a city which has N available restaurants, numbered 1 through N. Each restaurant has a specific maximum capacity of contestants it can host. You want to accommodate as many contestants as possible, without exceeding the capacity of any restaurant. However, there\'s a catch. Contestants have dietary restrictions, and every contestant can only participate if their dietary needs can be met in the assigned restaurant. The dietary restrictions are given, specifying which restaurant can serve each contestant. We need to determine the maximum number of contestants that can be assigned to restaurants given their dietary restrictions and the maximum capacity of each restaurant. -----Input----- The first line of input contains two integers N and M (1 leq N, M leq 1000), the number of restaurants and the number of contestants. The second line contains N integers representing the capacity of each restaurant, where the i-th integer is the capacity C_i of the i-th restaurant (1 leq C_i leq 1000). Each of the next M lines contains a list of up to N integers. The j-th integer in the i-th line is 0 or 1: 1 if contestant i can be assigned to the j-th restaurant, and 0 otherwise. -----Output----- Output a single integer representing the maximum number of contestants that can be assigned to the restaurants respecting both the capacity and dietary restrictions. -----Examples----- Sample Input 1: 3 4 2 3 1 1 0 0 0 1 1 1 1 0 0 1 1 Sample Output 1: 4 Sample Input 2: 2 3 1 1 1 0 0 1 1 1 Sample Output 2: 2","solution":"from collections import defaultdict def maximum_contestants(N, M, capacities, dietary_restrictions): # Transform constraints to be easier to handle restaurant_contestant_map = defaultdict(list) for i in range(M): for j in range(N): if dietary_restrictions[i][j] == 1: restaurant_contestant_map[j].append(i) assignments = [-1] * M def can_assign(contestant, visited, assignments): for restaurant in range(N): if dietary_restrictions[contestant][restaurant] and visited[restaurant] == False: visited[restaurant] = True if capacities[restaurant] > 0: capacities[restaurant] -= 1 assignments[contestant] = restaurant return True elif can_reassign(assignments[restaurant], visited, assignments): assignments[contestant] = restaurant assignments[restaurant] = contestant return True return False def can_reassign(contestant, visited, assignments): if contestant == -1: return True for restaurant in range(N): if dietary_restrictions[contestant][restaurant] and visited[restaurant] == False: visited[restaurant] = True if capacities[restaurant] > 0 or can_assign(assignments[restaurant], visited, assignments): capacities[restaurant] -= 1 assignments[contestant] = restaurant return True return False max_contestants = 0 for contestant in range(M): visited = [False] * N if can_assign(contestant, visited, assignments): max_contestants += 1 return max_contestants"},{"question":"Write a function that takes a list of integers and an integer threshold as input, and returns a new list containing only the elements from the input list that are greater than or equal to the threshold. The order of the elements in the new list should be the same as their order in the input list. Example 1: Input: numbers = [1, 2, 5, 6, 3, 8] threshold = 5 Output: [5, 6, 8] Explanation: The numbers greater than or equal to 5 in the list are 5, 6, and 8. Your Task: Your task is to complete the function filterGreaterOrEqual() which takes the input list and threshold, and returns the filtered list.","solution":"def filterGreaterOrEqual(numbers, threshold): Returns a list containing elements from the numbers list that are greater than or equal to the threshold. return [num for num in numbers if num >= threshold]"},{"question":"Write a function `reverse_words` that takes a string as input and returns a new string where the words are in the reverse order. For example: Input: \\"hello world from coding assessment\\" Output: \\"assessment coding from world hello\\"","solution":"def reverse_words(s): Reverses the words in the input string `s`. Args: s (str): The input string. Returns: str: The string with words in reverse order. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"During a coding competition, contestants earn points by solving challenges and can also lose or gain points by forfeiting or participating in side activities like debugging exercises. Each contestant’s total score determines his or her ranking in the competition. You are asked to determine the highest-scoring contestant. Each side activity has a predefined point value. Completing the side activity successfully gives you points, while failing it subtracts a percentage of those points. Input The first line contains an integer n, which represents the number of contestants (1 ≤ n ≤ 50). The second line contains two integers pos and neg separated by space, representing the positive points awarded for successful side activities and the percentage of points lost (in whole numbers) for failing the side activity respectively (0 ≤ pos ≤ 200, 0 ≤ neg ≤ 100). The following n lines contain the details of each contestant. Each line has the format \\"handlei challenges sc_sa sc_fa dc_sa dc_fa\\", where handlei is the unique handle (name) of the contestant, challenges is the number of challenge points earned (0 ≤ challenges ≤ 5000), sc_sa is the number of successful side activities completed and sc_fa is the number of failed side activities. Similarly, dc_sa and dc_fa represent the number of successful and failed debug challenges respectively. Each handlei is composed of Latin letters and digits, length between 1 to 15 characters. Contestant names are unique and alphanumeric. Output Print the handle of the contestant with the highest score. Examples Input 4 100 20 Alice 3000 5 2 3 1 Bob 3500 6 1 1 0 Charlie 2800 4 3 4 2 Diana 3200 3 0 5 5 Output: Bob Explanation: - Alice: 3000 + 5*100 - 2*20%*100 + 3*100 - 1*20%*100 = 3000 + 500 - 40 + 300 - 20 = 3740 - Bob: 3500 + 6*100 - 1*20%*100 + 1*100 - 0 = 3500 + 600 - 20 + 100 = 4180 - Charlie: 2800 + 4*100 - 3*20%*100 + 4*100 - 2*20%*100 = 2800 + 400 - 60 + 400 - 40 = 3500 - Diana: 3200 + 3*100 - 0 + 5*100 - 5*20%*100 = 3200 + 300 + 500 - 100 = 3900 Thus, Bob has the highest score and is the leader.","solution":"def highest_scoring_contestant(n, pos, neg, contestants): highest_score = float(\\"-inf\\") highest_scorer = \\"\\" for contestant in contestants: parts = contestant.split() handle = parts[0] challenges = int(parts[1]) sc_sa = int(parts[2]) sc_fa = int(parts[3]) dc_sa = int(parts[4]) dc_fa = int(parts[5]) # Calculate score score = ( challenges + sc_sa * pos - sc_fa * (neg / 100) * pos + dc_sa * pos - dc_fa * (neg / 100) * pos ) if score > highest_score: highest_score = score highest_scorer = handle return highest_scorer"},{"question":"Chef has an array of integers and likes to perform a unique string manipulation game on it. He converts the array into a string by mapping each integer to its corresponding lowercase English alphabet character (1 -> \'a\', 2 -> \'b\', ..., 26 -> \'z\'). His friend suggests a substring from the converted string and a target string. Chef needs to find out how many times the target string appears as a subsequence in the given substring. Write a program to help Chef win the game. -----Input----- The first line of the input contains an integer N, denoting the number of elements in the given array. The next line contains N integers Ai separated with spaces. The third line contains the number of games T. Each of the next T lines contain 3 integers Li, Ri, and a string S, the left side of the segment, the right side of the segment, and the target string respectively. -----Output----- For each game, output a single line containing the answer for the respective segment. -----Constraints----- - 1 ≤ N ≤ 100,000 - 1 ≤ Ai ≤ 26 - 1 ≤ T ≤ 100,000 - 1 ≤ Li ≤ Ri ≤ N - 1 ≤ |S| ≤ 100 -----Example----- Input: 5 1 2 3 4 5 3 1 5 abc 1 3 ab 2 4 abc Output: 1 1 0","solution":"def count_subsequences(arr, queries): # Convert array to corresponding string (1 -> \'a\', 2 -> \'b\', ..., 26 -> \'z\') alphabet_arr = \'\'.join(chr(96 + num) for num in arr) def count_ways(source, target): # Length of source and target strings m, n = len(source), len(target) if n == 0: return 1 if m == 0: return 0 # Create a dp array to store the counts dp = [[0] * (n + 1) for _ in range(m + 1)] # If target is empty, there\'s one way to match it for i in range(m + 1): dp[i][0] = 1 # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if source[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] return dp[m][n] results = [] for l, r, s in queries: substring = alphabet_arr[l - 1:r] results.append(count_ways(substring, s)) return results"},{"question":"Given a list of integers, implement a function to find the maximum sum of a contiguous subarray. This problem is a classic example of the **Maximum Subarray Problem**, also known as Kadane’s Algorithm. The function should return an integer representing the highest sum possible from a contiguous subarray within the provided list. ```if:python Complete the function `max_subarray_sum(arr)` which takes in a list `arr` of integers and returns an integer representing the maximum sum of a contiguous subarray. ``` ```if-not:python Complete the function `maxSubarraySum(arr)` which takes in a list `arr` of integers and returns an integer representing the maximum sum of a contiguous subarray. ``` ```if:typescript **TypeScript note:** The function signature can be defined as follows: ~~~typescript function maxSubarraySum(arr: number[]): number; ~~~ ``` ```markdown Examples ```if-not:python ~~~js maxSubarraySum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6 // [4, -1, 2, 1] has the largest sum maxSubarraySum([1]) == 1 // [1] is the only subarray maxSubarraySum([5, 4, -1, 7, 8]) == 23 // [5, 4, -1, 7, 8] is the largest sum subarray maxSubarraySum([-2, -5, -3, -1]) == -1 // [-1] is the largest sum subarray ~~~ ``` ```if:python ~~~py max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6 # [4, -1, 2, 1] has the largest sum max_subarray_sum([1]) == 1 # [1] is the only subarray max_subarray_sum([5, 4, -1, 7, 8]) == 23 # [5, 4, -1, 7, 8] is the largest sum subarray max_subarray_sum([-2, -5, -3, -1]) == -1 # [-1] is the largest sum subarray ~~~ ```","solution":"def max_subarray_sum(arr): Returns the maximum sum of a contiguous subarray using Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a 2D grid of dimensions n times m where each cell contains either a stone (denoted by \'*\') or is empty (denoted by \'.\'). The stones fall straight down unless obstructed by another stone or the bottom of the grid. Your task is to compute the final state of the grid after all stones have fallen down. For example, starting with the grid ``` .*.. ***. .... .... ``` the finalized grid would be: ``` .... .... .*.. ***. ``` -----Input----- The first line of the input contains two integers n and m (1 le n, m le 50) — the number of rows and columns of the grid, respectively. Then n lines follow, each containing m characters, each of which is either \'*\' or \'.\'. -----Output----- Output n lines, each containing m characters representing the final state of the grid after all stones have fallen. -----Example----- Input 4 4 .*.. ***. .... .... Output .... .... .*.. ***. -----Note----- In this example, the stars on the second row move down to the third and fourth rows because there are empty cells below them. The star in the first column and second row moves to the fourth row\'s first column. The stars in the second column and third column follow the same pattern until they reach the bottommost empty cells.","solution":"def drop_stones(grid): Simulates the process of stones falling in the grid. Parameters: grid (list of list of str): The input grid representing stones (*) and empty spaces (.). Returns: list of list of str: The grid after all stones have fallen. n = len(grid) m = len(grid[0]) for col in range(m): count = 0 # Count the number of stones in each column for row in range(n): if grid[row][col] == \'*\': count += 1 # Place the stones at the bottom of the column for row in range(n): if row < n - count: grid[row][col] = \'.\' else: grid[row][col] = \'*\' return grid"},{"question":"Alex likes jigsaw puzzles, and he has recently received a series of puzzles where each puzzle consists of a sequence of pieces that need to be rearranged to form a consecutive sequence of integers (each piece represented by an integer). However, some of the puzzles are missing pieces. Alex needs your help to determine which pieces are missing from a given set to complete the sequence. Your task is to write a program that, given a list of integers representing the puzzle pieces, finds all the integers that are missing to form the consecutive sequence starting from the smallest integer in the list to the largest integer in the list. Input: The first line contains an integer T (number of test cases). Each test case starts with an integer N (number of pieces), followed by a list of N integers representing the pieces of the puzzle. Output: For each test case, output the missing pieces in sorted order, each on a new line. If there are no missing pieces, output \\"None\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 -10^6 ≤ pieces[i] ≤ 10^6 SAMPLE INPUT 2 5 4 2 7 1 6 3 10 11 13 SAMPLE OUTPUT 3 5 12 Explanation: For the first test case, the provided pieces are [4, 2, 7, 1, 6]. The consecutive sequence starting from the smallest piece (1) to the largest piece (7) would be [1, 2, 3, 4, 5, 6, 7]. The missing pieces are [3, 5]. For the second test case, the provided pieces are [10, 11, 13]. The consecutive sequence would be [10, 11, 12, 13]. The missing piece is [12].","solution":"def find_missing_pieces(pieces): Given a list of integers representing the pieces of a puzzle, finds all the integers that are missing to form the consecutive sequence starting from the smallest integer in the list to the largest integer in the list. if not pieces: return [] min_piece = min(pieces) max_piece = max(pieces) complete_sequence = set(range(min_piece, max_piece + 1)) missing_pieces = list(complete_sequence - set(pieces)) return sorted(missing_pieces) def solve(input_data): Given input data for multiple test cases, returns the results for each test case. data = input_data.strip().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): N = int(data[index]) index += 1 pieces = list(map(int, data[index:index + N])) index += N missing_pieces = find_missing_pieces(pieces) if missing_pieces: results.append(\\" \\".join(map(str, missing_pieces))) else: results.append(\\"None\\") return \\"n\\".join(results)"},{"question":"Given N words, the task is to find the word that can be formed by concatenating exactly two of the given words, or determine if it is not possible to form such a word from the given list. Formally, given a list of words W_1, W_2, ..., W_n, determine if there exist two words W_i and W_j from the list such that their concatenation W_i + W_j is also present in the list. Input: - The first line of input contains an integer T, denoting the number of test cases. - Each test case starts with an integer N, denoting the number of words. - The next N lines contain a word each. Output: For each test case, print the word that can be formed by concatenating exactly two of the given words. If no such word exists, print \\"No valid word\\". Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ Length of each word ≤ 100 SAMPLE INPUT 2 4 cat dog catdog bird 3 app le apple SAMPLE OUTPUT catdog apple Explanation: In the 1st test case, \'catdog\' is formed by concatenating \'cat\' and \'dog\' from the list of words. In the 2nd test case, \'apple\' is formed by concatenating \'app\' and \'le\' from the list of words.","solution":"def find_concatenated_word(test_cases): results = [] for words in test_cases: found = \\"No valid word\\" word_set = set(words) for word in words: for i in range(1, len(word)): prefix, suffix = word[:i], word[i:] if prefix in word_set and suffix in word_set: found = word break if found != \\"No valid word\\": break results.append(found) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) words = lines[index + 1:index + 1 + N] test_cases.append(words) index += N + 1 return test_cases"},{"question":"Harry has found another challenge within the maze of the Triwizard Tournament. He encounters a magical door that opens only if he can produce the correct magic phrase. The phrase is generated by an old magical system following specific rules based on integers. The rules are as follows: You are given an integer N. You need to generate the phrase by performing the following operations: 1. Start with the integer N. 2. If N is even, divide it by 2. 3. If N is odd and greater than 1, subtract 1 from it. 4. Repeat the process until N becomes 1. Your task is to find the sequence of integers from the start until the integer becomes 1. Note Print the sequence of integers generated during the process in a single line. Input The first line contains T - the number of test cases. For each test case, there is a single integer N. Output For each test case, output the sequence of integers generated until N becomes 1. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 Use efficient reading and writing to handle large input/output. SAMPLE INPUT 3 6 15 8 SAMPLE OUTPUT 6 3 2 1 15 14 7 6 3 2 1 8 4 2 1 Explanation 1. For N = 6, the sequence generated is 6 -> 3 -> 2 -> 1. 2. For N = 15, the sequence generated is 15 -> 14 -> 7 -> 6 -> 3 -> 2 -> 1. 3. For N = 8, the sequence generated is 8 -> 4 -> 2 -> 1. In all cases, the sequence is printed as space-separated integers in one line per test case.","solution":"def generate_sequence(n): Generates the sequence of integers from the given integer n to 1 following the rules specified. Parameters: n (int): The starting integer. Returns: list: The sequence of integers until n becomes 1. sequence = [] while n != 1: sequence.append(n) if n % 2 == 0: n = n // 2 else: n -= 1 sequence.append(1) return sequence def solve_tournament_challenge(test_cases): Solves the challenge for each test case. Parameters: test_cases (list): List of integers for each test case. Returns: list: List of sequences for each test case. results = [] for n in test_cases: results.append(generate_sequence(n)) return results"},{"question":"You are given a list of integers representing the number of candies in different jars. Two players, Alice and Bob, take turns to play, starting with Alice. In each turn, a player must take any positive number of candies from only one jar. The player who cannot make a move because all jars are empty loses the game. Predict the outcome of the game, assuming both players play optimally. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of jars containing candies. The next line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^5), where c_i is the number of candies in the i-th jar. -----Output----- If Alice wins, print \\"Alice\\" (without quotes); otherwise, print \\"Bob\\" (without quotes). -----Examples----- Input 3 3 4 5 Output Alice Input 2 1 1 Output Bob -----Note----- In the first example, Alice can take all candies from the jar with 3 candies in her first move. This forces Bob to take candies from one of the remaining two jars. No matter what Bob does, Alice will always be able to ultimately make the game such that she is not forced to take candies from the last jar available, thus winning the game. In the second example, Alice will take 1 candy from one of the jars, leaving the last jar with 1 candy for Bob to take, and Bob will win the game as he won\'t be forced to leave any candies for Alice on her turn.","solution":"def predict_winner(n, jars): Predicts the winner of the game based on the initial candy distribution in jars. Parameters: n (int): Number of jars. jars (list of int): List containing the number of candies in each jar. Returns: str: \\"Alice\\" if Alice wins, otherwise \\"Bob\\". xor_sum = 0 # Compute the XOR sum of all the jar candies for candies in jars: xor_sum ^= candies # If xor_sum is 0, Bob wins; otherwise, Alice wins if xor_sum == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"# Task You are given a list of integers `nums`. You need to find the length of the longest subarray of `nums` where the difference between any two elements in the subarray is at most 1. # Example For `nums = [1, 2, 2, 3, 1, 2]`, the result should be `5`. The subarray `[1, 2, 2, 1, 2]` has length 5 and the difference between any two elements is at most 1. # Input/Output - `[input]` list of integers `nums` (1 <= length <= 10^5, -10^9 <= nums[i] <= 10^9) - `[output]` an integer Length of the longest subarray satisfying the condition.","solution":"def longest_subarray_with_diff_at_most_one(nums): Given a list of integers nums, returns the length of the longest subarray where the difference between any two elements is at most 1. if not nums: return 0 num_count = {} max_length = 0 for num in nums: num_count[num] = num_count.get(num, 0) + 1 current_length = num_count[num] + num_count.get(num - 1, 0) max_length = max(max_length, current_length) current_length = num_count[num] + num_count.get(num + 1, 0) max_length = max(max_length, current_length) return max_length"},{"question":"In a faraway kingdom, there is a magical garden with an infinite number of plants, each with a unique serial number starting from 1. Each plant can either grow or shrink in height each day. The gardener keeps a log of daily height changes for certain plants. The log records are presented in pairs: the serial number of the plant and the change in its height on that day (a positive number if the plant grew or a negative number if it shrunk). Given a specified plant\'s serial number, you need to determine the height of that plant on the final day after considering all logged changes. Initially, all plants have a height of zero. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and P — the number of log entries and the serial number of the plant you are interested in, respectively. The following N lines each contain two integers S and H: the serial number of a plant and the height change for that plant on that day. ------ Output ------ For each test case, output a single integer — the final height of the plant with the specified serial number P after all the log entries have been applied. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 1 ≤ P, S ≤ 10^9 -10^6 ≤ H ≤ 10^6 The sum of N over all test cases does not exceed 10^5 ------ Sample Input ------ 2 4 3 1 2 2 -1 3 5 3 -2 3 2 3 1 2 5 3 -3 ------ Sample Output ------ 3 3 ------ Explanation ------ In the first test case, there are 4 log entries and we are interested in the plant with serial number 3. The logs state: - Plant 1 grows by 2 units. - Plant 2 shrinks by 1 unit. - Plant 3 grows by 5 units. - Plant 3 shrinks by 2 units. Thus, the final height of plant 3 is 5 - 2 = 3 units. In the second test case, there are 3 log entries and we are interested in the plant with serial number 2. The logs state: - Plant 3 grows by 1 unit. - Plant 2 grows by 5 units. - Plant 3 shrinks by 3 units. Thus, the final height of plant 2 is 5 units.","solution":"def final_height_of_plant(T, test_cases): Determines the final height of the plant with the specified serial number after applying all log entries. Args: T (int): The number of test cases. test_cases (list): A list of tuples for each test case. Each tuple contains (N, P, logs) where N is the number of log entries, P is the plant serial number of interest, and logs is a list of (S, H) tuples with S being the plant serial number and H being the height change. Returns: list: A list of final heights for each test case corresponding to the specified plant serial number. results = [] for N, P, logs in test_cases: height = 0 for S, H in logs: if S == P: height += H results.append(height) return results"},{"question":"# Problem Statement: You are given a list of `n` words. Your task is to write a function that finds the word that can be formed by combining any two different words from the list (concatenating them in any order). If multiple such words exist, return the one that appears first in the list. If no such word exists, return the string `\\"No such word\\"`. # Input: - A list of strings `words` of length `n` (1 <= n <= 1000), where each string consists of lowercase alphabets only, with length between 1 and 100. # Output: - A single string representing the first word from the list that can be formed by concatenating any two different words from the list. If no such word exists, return `\\"No such word\\"`. # Example __Input:__ ``` words = [\\"cat\\", \\"dog\\", \\"cats\\", \\"dogcat\\"] ``` __Output:__ ``` \\"dogcat\\" ``` __Explanation:__ ``` \\"dogcat\\" can be formed by concatenating \\"dog\\" and \\"cat\\". ``` __Input:__ ``` words = [\\"hello\\", \\"world\\", \\"helloworld\\", \\"test\\"] ``` __Output:__ ``` \\"helloworld\\" ``` __Explanation:__ ``` \\"helloworld\\" can be formed by concatenating \\"hello\\" and \\"world\\". ```","solution":"def find_concatenated_word(words): word_set = set(words) for word in words: for i in range(1, len(word)): prefix = word[:i] suffix = word[i:] if prefix in word_set and suffix in word_set: return word return \\"No such word\\""},{"question":"# Task You are given a collection of intervals. A unique integer is an integer that appears in exactly one of the intervals. Write a function that receives a list of intervals and returns the total number of unique integers across all the given intervals. An interval is represented by a pair of integers [a, b] and includes all integers between a and b (both inclusive). All intervals are closed intervals. # Example For `intervals = [[1, 3], [2, 5], [7, 9]]`, the output should be `4`. Unique integers in [1, 3] are {1}, unique integers in [2, 5] are {4, 5}, and unique integers in [7, 9] are {7, 8, 9}. The unique integers are: `[1, 4, 5, 7, 8, 9]`, and there are 6 unique integers in total. # Input/Output - `[input]` list of intervals `intervals` A list of intervals. Each interval is a list with two integers [a, b] where a ≤ b. Constraints: `1 ≤ len(intervals) ≤ 1000` and `-10000 ≤ a ≤ b ≤ 10000`. - `[output]` an integer The total number of unique integers across the intervals.","solution":"def count_unique_integers(intervals): Returns the number of unique integers across all given intervals. An interval is represented by a pair of integers [a, b] and includes all integers between a and b (both inclusive). :param intervals: list of lists, where each inner list contains two integers [a, b] :return: integer, total number of unique integers across all intervals integer_occurrences = {} for interval in intervals: start, end = interval for num in range(start, end + 1): if num in integer_occurrences: integer_occurrences[num] += 1 else: integer_occurrences[num] = 1 unique_integers = [num for num, count in integer_occurrences.items() if count == 1] return len(unique_integers)"},{"question":"Alex loves cars and he spends a lot of time at various auto-repair shops. He noticed that different car workshops have different systems for keeping track of car repairs. He decided to create a system that helps him to manage a list of cars and their respective repair times more efficiently. Each car has a unique identification number (ID) and a list of repair times, recorded in hours, for each repair session. Alex wants a function that can help him find out how much time, on average, each car spends in the workshop for repairs. Given a dictionary where the keys are car IDs (strings), and the values are lists of integers representing the repair times in hours for each session, compute the average repair time for each car. Function Description Complete the `average_repair_times` function in the editor below. It should return a dictionary where each key is a car ID and the value is the average repair time for that car, rounded to two decimal places. `average_repair_times` has the following parameter: - `repairs`: a dictionary with string keys representing car IDs and list of integers values representing repair times in hours. Input Format - A dictionary where the keys are car IDs (represented as strings). - The values are lists of integers, with each integer representing a repair time in hours for that car. Constraints - All car IDs are unique. - Each list of repair times will have at least one entry and no more than 100 entries. - Each repair time will be a positive integer no greater than 100 hours. Output Format Return a dictionary where each key is a car ID and the value is the average repair time for that car, rounded to two decimal places. Sample Input 0 { \\"car1\\": [4, 5, 6], \\"car2\\": [10, 10, 10, 10], \\"car3\\": [7] } Sample Output 0 { \\"car1\\": 5.00, \\"car2\\": 10.00, \\"car3\\": 7.00 } Explanation 0 For car1, the average repair time is (4+5+6)/3 = 5.00. For car2, the average repair time is (10+10+10+10)/4 = 10.00. For car3, the average repair time is 7, since it has only one repair session. Sample Input 1 { \\"carA\\": [2, 3], \\"carB\\": [8, 9, 10, 1], \\"carC\\": [5, 5, 5, 5, 5] } Sample Output 1 { \\"carA\\": 2.50, \\"carB\\": 7.00, \\"carC\\": 5.00 } Explanation 1 For carA, the average repair time is (2+3)/2 = 2.50. For carB, the average repair time is (8+9+10+1)/4 = 7.00. For carC, the average repair time is (5+5+5+5+5)/5 = 5.00.","solution":"def average_repair_times(repairs): Calculate the average repair time for each car, rounded to two decimal places. Parameters: repairs (dict): A dictionary where the keys are car IDs (strings) and the values are lists of integers representing repair times in hours. Returns: dict: A dictionary where each key is a car ID and the value is the average repair time for that car, rounded to two decimal places. averages = {} for car_id, times in repairs.items(): avg_time = round(sum(times) / len(times), 2) averages[car_id] = avg_time return averages"},{"question":"You are given an integer in its binary form as a string. Your task is to write a function to return the count of \'1\'s present in the binary string. This is also known as the Hamming Weight or the population count of the binary string. Constraints: * The input string will always be a valid binary number and will have at most 10^6 digits. Input: The input consists of a single line containing a binary string s. Output: Print a single integer, the number of \'1\'s in the binary string. Example: Input: 110101 Output: 4","solution":"def count_ones(binary_string): Returns the count of \'1\'s in the binary string. return binary_string.count(\'1\')"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to find the length of the longest contiguous segment of the string where the number of distinct characters does not exceed a given integer `K`. -----Constraints----- - 1 leq |s| leq 10^5 - 1 leq K leq 26 - The string `s` will contain only lowercase English letters. -----Input----- Input is given from Standard Input in the following format: First line: s Second line: K -----Output----- Output the length of the longest contiguous segment of the string such that the number of distinct characters in this segment does not exceed `K`. -----Sample Input----- abcba 2 -----Sample Output----- 3 In the input example, the longest contiguous segment where the number of distinct characters is at most 2 is \\"bcb\\", which has a length of 3.","solution":"def longest_subsegment_with_k_distinct_chars(s, K): Return the length of the longest contiguous segment where the number of distinct characters does not exceed K from collections import defaultdict n = len(s) if K == 0 or n == 0: return 0 left = 0 right = 0 max_length = 0 char_count = defaultdict(int) while right < n: char_count[s[right]] += 1 while len(char_count) > K: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"# Task You are given two matrices A and B, write a function that returns the result of matrix multiplication of the two matrices. If the matrices cannot be multiplied, return an empty matrix. # Example For `A = [[1, 2, 3], [4, 5, 6]]` and `B = [[7, 8], [9, 10], [11, 12]]`, the output should be `[[58, 64], [139, 154]]`. For `A = [[1, 2]]` and `B = [[3, 4]]`, the output should be `[]` since the matrices cannot be multiplied. # Input/Output - `[input]` 2D integer array `A` A 2D array of integers representing matrix A. Constraints: `1 ≤ A.length ≤ 100` `1 ≤ A[0].length ≤ 100` - `[input]` 2D integer array `B` A 2D array of integers representing matrix B. Constraints: `1 ≤ B.length ≤ 100` `1 ≤ B[0].length ≤ 100` - `[output]` 2D integer array The result of the matrix multiplication of the input matrices or an empty matrix if they cannot be multiplied.","solution":"def matrix_multiplication(A, B): Returns the result of matrix multiplication of A and B or an empty matrix if they cannot be multiplied. if len(A[0]) != len(B): return [] result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))] for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result"},{"question":"# Aligning Texts You are working on a text analysis software that determines if two given texts are aligned. Two texts are considered aligned if they contain exactly the same words with the same frequency, regardless of the order of the words or case sensitivity. Your task is to write a program that checks if two given texts are aligned by following these steps: 1. Convert both texts to lower case. 2. Split each text into words based on spaces. 3. Check whether both texts have the same set of words with the exact same frequency. Input The input consists of multiple lines of text. The end of the input is indicated by a single line containing \\"`END`\\". Each dataset consists of two lines of text. Both lines will contain only alphabetic characters and spaces. You may assume that each line will have at most 1000 characters and at least one word. Output For each dataset, output \\"`aligned`\\" if the two texts are aligned, or \\"`not aligned`\\" otherwise. Example Input ``` Hello world WORLD HELLO The quick brown fox Jumps over the lazy dog Here we go again HERE we GO AGAIN this is a test Is this a TesT END ``` Output ``` aligned not aligned aligned not aligned ``` Write a function to solve this problem.","solution":"def are_texts_aligned(text1, text2): Check if two texts are aligned. Texts are aligned if they contain the same words with the same frequency, regardless of case sensitivity and order. from collections import Counter # Convert both texts to lower case text1 = text1.lower() text2 = text2.lower() # Split each text into words based on spaces words1 = text1.split() words2 = text2.split() # Create counters for each text counter1 = Counter(words1) counter2 = Counter(words2) # Compare the two counters return counter1 == counter2"},{"question":"A palindrome is a sequence of characters that reads the same backward as forward. Given a non-negative integer n, determine whether the binary representation of n is a palindrome. For example, if n = 9, the binary representation is \\"1001\\", which is a palindrome. But if n = 10, the binary representation is \\"1010\\", which is not a palindrome. Write a program that takes a non-negative integer n as input and outputs \\"yes\\" if the binary representation of n is a palindrome, and \\"no\\" otherwise. Input A single integer n (0 ≤ n ≤ 10^18). Output A single line containing \\"yes\\" if the binary representation of n is a palindrome, and \\"no\\" otherwise. Example 1 Input 9 Output yes Example 2 Input 10 Output no","solution":"def is_binary_palindrome(n): Determines if the binary representation of a non-negative integer n is a palindrome. Parameters: n (int): A non-negative integer. Returns: str: \\"yes\\" if binary representation of n is a palindrome, \\"no\\" otherwise. binary_rep = bin(n)[2:] # Convert to binary and strip the \'0b\' if binary_rep == binary_rep[::-1]: return \\"yes\\" else: return \\"no\\""},{"question":"You are given a binary tree with n nodes. Your task is to determine the longest path in the binary tree where consecutive nodes have alternating even-odd values. Input The first line of input contains the integer n (1 ≤ n ≤ 10^5), the number of nodes in the binary tree. Next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) representing an edge between nodes u and v. Next line contains n space-separated integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^6), representing the values at each node, where a_i is the value of the i-th node. Output Output a single integer, the length of the longest path with consecutive nodes having alternating even-odd values. Examples Input 5 1 2 1 3 3 4 3 5 4 2 7 6 5 Output 3 Input 4 1 2 2 3 3 4 4 1 2 3 Output 4 Note In the first example, the longest path with alternating even-odd values is either (2, 1, 3, 4) or (2, 1, 3, 5), both of which have length 3. In the second example, the longest path with alternating even-odd values is (1, 2, 3, 4), which has length 4.","solution":"def longest_alternating_path(n, edges, values): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(node, parent): max_len = 1 for neighbor in graph[node]: if neighbor != parent: path_len = dfs(neighbor, node) if values[node - 1] % 2 != values[neighbor - 1] % 2: max_len = max(max_len, path_len + 1) return max_len longest_path = 0 for node in range(1, n + 1): longest_path = max(longest_path, dfs(node, -1)) return longest_path # Example use case: # Number of nodes n = 4 # Edges between nodes edges = [(1, 2), (2, 3), (3, 4)] # Values at each node values = [4, 1, 2, 3] # Function call print(longest_alternating_path(n, edges, values))"},{"question":"You are given a directed acyclic graph (DAG) comprising n vertices and m edges. Each vertex has a distinct value assigned to it. Your task is to determine and print the length of the longest path in the graph and the sequence of vertices in such a path, such that the values of the vertices strictly increase along the path. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5), representing the number of vertices and edges in the graph. The second line contains n space-separated integers v1, v2, ..., vn (1 ≤ vi ≤ 10^9), where vi is the value assigned to the i-th vertex. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), representing a directed edge from vertex u to vertex v. -----Output----- In the first line, print an integer k, the length of the longest path. If there are multiple paths with the same length, print any of them. In the second line, print k space-separated integers, the sequence of vertex indices forming the longest path. If no path exists, print 0. -----Examples----- Input 5 6 5 3 7 6 8 1 2 2 3 1 3 1 4 4 3 4 5 Output 3 2 3 5 Input 4 4 1 2 3 4 1 2 2 3 3 4 1 3 Output 4 1 2 3 4 Input 3 2 4 5 6 1 2 2 3 Output 3 1 2 3","solution":"from collections import defaultdict, deque def longest_increasing_path(n, m, values, edges): # Adjacency list of the graph and in degree of vertices. graph = defaultdict(list) in_degree = [0] * n for u, v in edges: graph[u-1].append(v-1) in_degree[v-1] += 1 # Topological sorting using Kahn\'s algorithm. zero_in_degree = deque([i for i in range(n) if in_degree[i] == 0]) topo_order = [] while zero_in_degree: node = zero_in_degree.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) # Array to store the longest increasing path ending at each vertex. longest_path = [-1] * n # Previous node to reconstruct the path. prev_node = [-1] * n max_length = 0 end_node = -1 for u in topo_order: if longest_path[u] == -1: longest_path[u] = 1 # Each node alone is a path of length 1. for v in graph[u]: if values[u] < values[v] and longest_path[u] + 1 > longest_path[v]: longest_path[v] = longest_path[u] + 1 prev_node[v] = u if longest_path[v] > max_length: max_length = longest_path[v] end_node = v if max_length == 0: return 0, [] path = [] while end_node != -1: path.append(end_node + 1) end_node = prev_node[end_node] path.reverse() return max_length, path # Assuming the function is called with input as follows: # number_of_vertices, number_of_edges, list_of_values, list_of_edges # Here is how the function can be used: # n = 5 # m = 6 # values = [5, 3, 7, 6, 8] # edges = [(1, 2), (2, 3), (1, 3), (1, 4), (4, 3), (4, 5)] # print(longest_increasing_path(n, m, values, edges))"},{"question":"Vegeta is training to master a new technique. During his training, he needs to perform a series of jumps over obstacles. The obstacles are arranged in a line, and each obstacle has a certain height. Vegeta can jump over these obstacles, but the energy required for each jump depends on the difference in height between the current and the next obstacle. The energy required for Vegeta to jump from an obstacle of height h_i to an obstacle of height h_{i+1} is calculated as follows: - If h_{i+1} > h_i, the energy required is the square of the difference: (h_{i+1} - h_i)^2. - If h_{i+1} le h_i, the energy required is just the difference: h_i - h_{i+1}. Given the heights of the obstacles, you need to calculate the total energy Vegeta requires to jump over all the obstacles. ------ Input: ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follow. The first line of each test case contains a single integer N denoting the number of obstacles. The second line of each test case contains N integers separated by spaces, representing the heights of the obstacles from left to right. ------ Output: ------ For each test case, print a single line containing one integer denoting the total energy needed by Vegeta to jump over all the obstacles. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ h_i ≤ 10^6 ----- Sample Input 1 ------ 2 4 5 2 7 3 3 4 1 4 ----- Sample Output 1 ------ 30 6 ----- Explanation 1 ------ Example case 1: h_1 = 5, h_2 = 2, h_3 = 7, h_4 = 3 The energy required for each jump: - Jump from 5 to 2: 5 - 2 = 3 - Jump from 2 to 7: (7 - 2)^2 = 25 - Jump from 7 to 3: 7 - 3 = 4 Total energy: 3 + 25 + 4 = 32 Example case 2: h_1 = 4, h_2 = 1, h_3 = 4 The energy required for each jump: - Jump from 4 to 1: 4 - 1 = 3 - Jump from 1 to 4: (4 - 1)^2 = 9 Total energy: 3 + 9 = 12","solution":"def calculate_energy(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] total_energy = 0 for j in range(N-1): h_i = heights[j] h_next = heights[j+1] if h_next > h_i: total_energy += (h_next - h_i) ** 2 else: total_energy += h_i - h_next results.append(total_energy) return results"},{"question":"Problem Statement Greenville is a small town where all the houses are lined up in a straight line on a long street. Due to a new local law to enhance community interaction, the town council has decided to connect some of the houses with bidirectional pathways such that the pathways form a tree structure. That is, any house can reach any other house through a unique path. As the town\'s head architect, your job is to ensure that the pathways are set up correctly. You are given a list of houses and pathways, and you need to verify whether the resulting structure forms a valid tree. Additionally, you need to determine the maximum distance between any two houses in the formed tree (the diameter of the tree). Input The input consists of multiple datasets. Each dataset is formatted as follows: > N > A_1 B_1 > : > : > A_{N-1} B_{N-1} The first line of a dataset contains a single integer N (1 le N le 100{,}000), the number of houses in Greenville. Each of the following N-1 lines contains two integers A_i and B_i (1 le A_i, B_i le N), indicating a bidirectional pathway between house A_i and house B_i. The end of the input is indicated by a line containing a zero. Output For each dataset, output a line containing the word `Yes` if the provided pathways form a valid tree and the diameter of the tree, or the word `No` if they do not form a valid tree. Sample Input ``` 5 1 2 1 3 3 4 3 5 4 1 2 2 3 3 1 6 1 2 2 3 3 4 4 5 5 6 0 ``` Output for the Sample Input ``` Yes 3 No Yes 5 ``` Example Input ``` 5 1 2 1 3 3 4 3 5 4 1 2 2 3 3 1 6 1 2 2 3 3 4 4 5 5 6 0 ``` Output ``` Yes 3 No Yes 5 ```","solution":"from collections import defaultdict, deque def is_tree(N, edges): if len(edges) != N - 1: return False, 0 # A tree must have exactly N-1 edges adj_list = defaultdict(list) for a, b in edges: adj_list[a].append(b) adj_list[b].append(a) visited = [False] * (N + 1) parent = [-1] * (N + 1) def bfs(start): q = deque([start]) visited[start] = True last_node = start while q: node = q.popleft() for neighbor in adj_list[node]: if visited[neighbor] and neighbor != parent[node]: return False, 0 # Not a tree because it has a cycle if not visited[neighbor]: parent[neighbor] = node visited[neighbor] = True q.append(neighbor) last_node = neighbor return True, last_node # Check if the graph is connected tree_check, farthest_node = bfs(1) if not tree_check or not all(visited[1:N + 1]): return False, 0 # Run BFS from one farthest node to find the diameter def bfs_depth(start): visited = [False] * (N + 1) q = deque([(start, 0)]) visited[start] = True max_depth = 0 farthest_node = start while q: node, depth = q.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True q.append((neighbor, depth + 1)) if depth + 1 > max_depth: farthest_node = neighbor max_depth = depth + 1 return max_depth # Find the diameter by running BFS twice farthest_depth = bfs_depth(farthest_node) return True, farthest_depth def process_input(input_data): input_lines = input_data.strip().split(\'n\') i = 0 results = [] while i < len(input_lines): N = int(input_lines[i]) if N == 0: break i += 1 edges = [] for _ in range(N - 1): A, B = map(int, input_lines[i].split()) edges.append((A, B)) i += 1 valid, diameter = is_tree(N, edges) if valid: results.append(f\\"Yes {diameter}\\") else: results.append(\\"No\\") return results"},{"question":"A group of students is preparing for their final exams. Each student can study a certain number of units per hour and has a specific number of hours they can dedicate before the exams. Your task is to determine the total number of study units covered by each student. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - For each test case: - The first integer, N, represents the number of students. - The next 2*N integers represent the units per hour and hours available for each student. For each student i, the units per hour U[i] and hours available H[i] are given. ------ Output Format ------ For each test case, output the total study units covered by each student on a new line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ U[i], H[i] ≤ 10 ----- Sample Input 1 ------ 2 3 3 4 2 3 1 5 2 6 2 4 1 ----- Sample Output 1 ------ 12 6 5 12 4 ----- Explanation 1 ------ Test case 1: - Student 1 can study 3 units per hour and has 4 hours, so they cover 3 * 4 = 12 units. - Student 2 can study 2 units per hour and has 3 hours, so they cover 2 * 3 = 6 units. - Student 3 can study 1 unit per hour and has 5 hours, so they cover 1 * 5 = 5 units. Test case 2: - Student 1 can study 6 units per hour and has 2 hours, so they cover 6 * 2 = 12 units. - Student 2 can study 4 units per hour and has 1 hour, so they cover 4 * 1 = 4 units.","solution":"def calculate_study_units(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] students_data = test_cases[i][1:] units_covered = [] for j in range(N): units_per_hour = students_data[2 * j] hours_available = students_data[2 * j + 1] units_covered.append(units_per_hour * hours_available) results.append(units_covered) return results # Example Usage # T = 2 # test_cases = [ # (3, 3, 4, 2, 3, 1, 5), # first test case with 3 students # (2, 6, 2, 4, 1) # second test case with 2 students # ] # print(calculate_study_units(T, test_cases)) # Output should be: [[12, 6, 5], [12, 4]]"},{"question":"Task Write a function that accepts a list of integers and returns a new list containing only the unique integers in their original order of appearance from the input list. Input A list of integers which can include both positive and negative numbers, but without any floating point numbers or other data types. Example ```python unique_integers([1, 2, 2, 3, 4, 4, 5]) # --> [1, 2, 3, 4, 5] unique_integers([4, 5, 4, 6, 6, 7, 8, 8, 9]) # --> [4, 5, 6, 7, 8, 9] ```","solution":"def unique_integers(lst): Returns a list containing only the unique integers in their original order of appearance. Parameters: lst (list): A list of integers Returns: list: A list of unique integers in their original order seen = set() unique_lst = [] for number in lst: if number not in seen: seen.add(number) unique_lst.append(number) return unique_lst"},{"question":"A popular fast-food chain wants to analyze the customer traffic in their different branches. They have multiple branches in various locations and want to identify the busiest branch within a specific timeframe. Each branch generates a log that records the number of customers served at different times throughout the day. The company has hired you to write a program that can process these logs and identify the branch with the highest customer traffic during a given timeframe. Input: - The first line contains an integer B, the number of branches. - The next B sections each represent the logs for a branch: - The first line of each section contains an integer L, the number of log entries for that branch. - Each of the next L lines contains a log entry which is a pair of integers: the timestamp (in HHMM format) and the number of customers served at that time. - The final line contains two integers, start_time and end_time, representing the timeframe (inclusive) within which you need to calculate the customer traffic. Output: - The branch number (1-based index) of the branch with the highest customer traffic within the given timeframe. If there is a tie, output the branch with the smallest index. Constraints: - 1 ≤ B ≤ 10 - 1 ≤ L ≤ 100 - 0000 ≤ HHMM ≤ 2359 - 0 ≤ number of customers ≤ 500 - start_time and end_time will always be valid timestamps within the same day. SAMPLE INPUT 3 3 0800 15 1200 40 1900 30 2 1000 20 1500 35 3 0900 25 1300 15 1600 25 1000 1900 SAMPLE OUTPUT 1","solution":"def find_busiest_branch(B, branch_logs, start_time, end_time): max_customers = -1 busiest_branch = -1 for i in range(B): total_customers = 0 for timestamp, customers in branch_logs[i]: if start_time <= timestamp <= end_time: total_customers += customers if total_customers > max_customers: max_customers = total_customers busiest_branch = i + 1 return busiest_branch"},{"question":"Implement a data structure which supports the following operations: 1. Adding a number to the data structure. 2. Finding the median of the numbers in the data structure. A median is the middle value in an ordered integer list. If the size of the list is even, the median is the average of the two middle values. ---Input--- The first line consists of an integer q — the number of queries (1 le q le 2 cdot 10^5). The following q lines specify the queries. Each query is one of the following: - \\"ADD x\\": where x is an integer (1 le x le 10^9). - \\"MEDIAN\\": which asks to print the median of the elements present in the data structure at that moment. ---Output--- For each \\"MEDIAN\\" query, print the median (if the list size is even, print the floating point number with exactly one digit after the decimal point). ---Example--- Input 7 ADD 1 ADD 2 MEDIAN ADD 3 MEDIAN ADD 4 ADD 5 MEDIAN Output 1.5 2.0 3.0 ---Note--- The operations in the example are as follows: 1. Add 1 -> List: [1] 2. Add 2 -> List: [1, 2] 3. Median -> (1+2)/2 = 1.5 4. Add 3 -> List: [1, 2, 3] 5. Median -> 2 (as the middle element of [1, 2, 3]) 6. Add 4 -> List: [1, 2, 3, 4] 7. Add 5 -> List: [1, 2, 3, 4, 5] 8. Median -> 3 (as the middle elements of [1, 2, 3, 4, 5])","solution":"import heapq class MedianFinder: def __init__(self): self.min_heap = [] # Min-heap for the larger half self.max_heap = [] # Max-heap for the smaller half def addNum(self, num): heapq.heappush(self.max_heap, -num) heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) if len(self.max_heap) < len(self.min_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) def findMedian(self): if len(self.max_heap) > len(self.min_heap): return float(-self.max_heap[0]) return (-self.max_heap[0] + self.min_heap[0]) / 2 def process_queries(queries): mf = MedianFinder() result = [] for query in queries: if query.startswith(\\"ADD\\"): _, num = query.split() mf.addNum(int(num)) elif query == \\"MEDIAN\\": median = mf.findMedian() result.append(f\\"{median:.1f}\\") return result"},{"question":"You are given an integer matrix `grid` with `m` rows and `n` columns. Each element of the matrix represents a value in the grid, where `1` denotes land and `0` denotes water. The grid is completely surrounded by water. You need to count the number of distinct islands in the grid. An island is defined as a group of connected land cells (cells with value `1`) that are connected horizontally or vertically (not diagonally). Two islands are considered distinct if they are not connected or if the shapes of the connected land cells are unique among all islands in the grid. For example, in the grid: ``` Example 1: Input: 1 1 0 0 1 0 1 0 0 Example 2: Input: 1 1 0 0 1 0 1 1 0 ``` In Example 1, there are two distinct islands. The first island consists of the land cells `[(0, 0), (0, 1), (1, 1)]` and the second island consists of `[(2, 0)]`. Therefore, the output should be: ``` Output: 2 ``` In Example 2, there is only one island which includes all land cells: `[(0, 0), (0, 1), (1, 1), (2, 0), (2, 1)]`. Therefore, the output should be: ``` Output: 1 ``` Input - The first line contains a single integer `t` (1 leq t leq 1000) — the number of test cases. - For each test case, the first line contains two integers `m` (1 leq m leq 100) and `n` (1 leq n leq 100) — the number of rows and columns in `grid`. - The next `m` lines each contain `n` integers — the matrix `grid`. Output - For each test case, print the number of distinct islands. Example - Input: ``` 2 3 3 1 1 0 0 1 0 1 0 0 3 3 1 1 0 0 1 0 1 1 0 ``` - Output: ``` 2 1 ``` Note In Example 1, there are two distinct islands: - First island shape: ``` 1 1 1 ``` - Second island shape: ``` 1 ``` In Example 2, there is only one island comprising all land cells. Write a function to find the number of distinct islands for each test case. Each test case is independent.","solution":"def num_distinct_islands(grid): def dfs(x, y, direction): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] != 1: return [] grid[x][y] = -1 shape.append(direction) dfs(x + 1, y, \'D\') dfs(x - 1, y, \'U\') dfs(x, y + 1, \'R\') dfs(x, y - 1, \'L\') shape.append(\'B\') return shape shapes = set() for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: shape = [] shapes.add(tuple(dfs(i, j, \'S\'))) return len(shapes) def num_distinct_islands_from_input(t, test_cases): results = [] for testcase in test_cases: m, n, grid = testcase results.append(num_distinct_islands(grid)) return results def read_input_to_test_cases(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): m, n = map(int, lines[index].split()) grid = [] for i in range(m): grid.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append((m, n, grid)) index = index + 1 + m return t, test_cases"},{"question":"Write a function named `matrixInvert` that accepts a 2D list (matrix) as input. The `matrixInvert` function should invert the binary values in the matrix by changing all 0s to 1s and all 1s to 0s. The matrix will only contain binary values (0s and 1s). # Input The function takes in a single parameter: - `matrix` (List[List[int]]): a 2D list where each element is either 0 or 1. The dimensions of the matrix (i.e., the number of rows and columns) are both between 1 and 100. # Output The function should return a modified 2D list (matrix) after inverting the binary values. # Examples ``` matrixInvert([[1, 0, 0], [0, 1, 1], [1, 0, 1]]) # Output: [[0, 1, 1], [1, 0, 0], [0, 1, 0]] matrixInvert([[1, 1, 1], [0, 0, 0], [1, 0, 1]]) # Output: [[0, 0, 0], [1, 1, 1], [0, 1, 0]] matrixInvert([[0, 0], [0, 0]]) # Output: [[1, 1], [1, 1]] ``` # Note The function should maintain the structure of the matrix and invert each element individually. Consider edge cases where the matrix has minimum (1x1) or maximum (100x100) dimensions.","solution":"def matrixInvert(matrix): Accepts a 2D list (matrix) and inverts the binary values in the matrix. Changes all 0s to 1s and all 1s to 0s. Args: matrix (List[List[int]]): a 2D list of binary values (0s and 1s). Returns: List[List[int]]: The matrix after inverting binary values. return [[1 - cell for cell in row] for row in matrix]"},{"question":"Tom has recently been tasked with sorting his bookshelf. There are n books on the shelf, and each book is labeled with an integer representing its weight. Tom can select any book and move it to any location in the sequence. However, Tom wants to minimize the number of moves required to put the books in non-decreasing order of their weights using this strategy. Given the weights of the books, determine the minimum number of moves Tom needs to complete the task. -----Constraints----- - 1≦n≦10^5 - 1≦weights of books≦10^9 -----Input----- The input is given from Standard Input in the following format: n w1 w2 ... wn -----Output----- Print the minimum number of moves required to sort the books in non-decreasing order. -----Sample Input----- 5 3 1 2 5 4 -----Sample Output----- 3 Three moves can be: Move book with weight 3 to the end, move book with weight 1 to the beginning, and move book with weight 5 after the book with weight 4.","solution":"def min_moves_to_sort_books(n, weights): Returns the minimum number of moves required to sort books in non-decreasing order. :param n: Number of books :param weights: List of integers representing the weights of the books :return: Minimum number of moves sorted_weights = sorted(weights) longest_increasing_subsequence_length = 0 lis_end_at = {} for weight in weights: if weight in lis_end_at: lis_end_at[weight] += 1 else: lis_end_at[weight] = 1 if weight-1 in lis_end_at: lis_end_at[weight] = max(lis_end_at[weight], lis_end_at[weight-1] + 1) longest_increasing_subsequence_length = max(longest_increasing_subsequence_length, lis_end_at[weight]) return n - longest_increasing_subsequence_length"},{"question":"You are given a string S representing a mathematics expression that can contain digits, the operators +, -, *, and /, and parentheses. Your task is to write a function that evaluates the string expression and returns the result as a number. Consider the following rules for evaluating the expression: 1. The division operator (/) should perform integer division, meaning the result should be the floor of the division of two integers. 2. The expression is well-formed, meaning it does not contain any spaces, malformed parentheses, invalid characters, or misplaced operators. Constraints: - The length of S is between 1 and 10^5. - The expression is valid according to standard mathematical rules. Input Input is given from Standard Input in the following format: S Output Print the result of the evaluated expression. Examples Input 3+2*2 Output 7 Input (2+3)*(5/2) Output 10","solution":"def evaluate_expression(s: str) -> int: Evaluates a string mathematical expression and returns the result as an integer. Division (/) performs integer division. import re import operator # Define operators and their corresponding functions ops = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': lambda a, b: a // b # Integer division } def parse_expression(expression): tokens = re.findall(r\'d+|[+-*/()]\', expression) return tokens def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operator(operators, values): right = values.pop() left = values.pop() op = operators.pop() values.append(ops[op](left, right)) def evaluate(tokens): values = [] operators = [] i = 0 while i < len(tokens): token = tokens[i] if token.isdigit(): values.append(int(token)) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # Remove the \'(\' else: while (operators and operators[-1] in ops and precedence(operators[-1]) >= precedence(token)): apply_operator(operators, values) operators.append(token) i += 1 while operators: apply_operator(operators, values) return values[0] tokens = parse_expression(s) return evaluate(tokens)"},{"question":"Imagine you are designing a game where you need to calculate the total score based on various actions performed by the player. Each action has a specific point value associated with it. The actions and their respective points are as follows: - \\"attack\\": 5 points - \\"defend\\": 3 points - \\"heal\\": 2 points - \\"run\\": 1 point You need to create a program that takes a list of actions as input, and outputs the total score of the player. input A single line containing the actions separated by a space. Each action is one of the following strings: \\"attack\\", \\"defend\\", \\"heal\\", \\"run\\". output Output the total score in one line. Example Input attack defend heal run attack Output 16","solution":"def calculate_total_score(actions): Takes a list of actions and calculates the total score based on point values of each action. Parameters: actions (list of str): The list of actions performed by the player. Returns: int: The total score based on the actions. points = { \\"attack\\": 5, \\"defend\\": 3, \\"heal\\": 2, \\"run\\": 1 } total_score = 0 for action in actions: if action in points: total_score += points[action] return total_score"},{"question":"You are given a string composed of only lowercase letters. Your goal is to count the number of unique substrings that can be formed from the given string. A substring is defined as any contiguous sequence of characters within the string. The number of unique substrings should include all possible substrings of different lengths, from a single character to the entire length of the string. Since the number of substrings can be quite large, return the result modulo 1,000,000,007 (10^9 + 7). # Input - A single line containing the string s (1 ≤ |s| ≤ 100), where |s| is the length of the string. # Output - Print one integer — the number of unique substrings modulo 1,000,000,007. # Examples Input ``` abc ``` Output ``` 6 ``` Input ``` aaa ``` Output ``` 3 ``` # Note In the first example, the substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". All of these substrings are unique. In the second example, the substrings are: \\"a\\", \\"aa\\", \\"aaa\\". These are the only unique substrings since repeating characters do not count as different substrings.","solution":"def count_unique_substrings(s): Returns the number of unique substrings modulo 1,000,000,007 MOD = 1_000_000_007 substrings = set() n = len(s) for i in range(n): for j in range(i+1, n+1): substrings.add(s[i:j]) return len(substrings) % MOD"},{"question":"In a distant town, there lies a magical treasure trove containing precious items represented by an array of integers. The wizard guarding the treasure has set up a challenge for any adventurer seeking the treasure: one must transform an array using a combination of prefix and suffix operations to maximize the total sum of the array. You are given an array of integers. You can perform the following operations: 1. Choose a non-negative integer p and take the prefix sum of the array up to index p. 2. Choose a non-negative integer s and take the suffix sum of the array starting from index s to the end. You need to find the maximum possible sum you can achieve by choosing appropriate indices p and s such that you can either: 1. Take the prefix sum up to index p. 2. Take the suffix sum starting from index s. 3. Take the sum of elements between any valid prefix and suffix indices p and s such that there is no overlap (i.e., p < s). Formally, given an array A of n integers A[0], A[1], ..., A[n-1], you need to calculate the maximum possible sum using the given operations. -----Input----- The first line contains an integer t (1 leq t leq 100), the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (1 leq n leq 1000) denoting the length of the array. - The second line contains n integers A[i] (-1000 leq A[i] leq 1000), the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 1000. -----Output----- For each test case, print a single line containing the maximum possible sum that can be achieved. -----Example----- Input 3 5 1 2 3 -2 5 4 -1 -2 -3 -4 6 5 -1 2 3 -4 6 Output 9 -1 11 -----Explanation----- In the first test case, the maximum sum can be achieved by taking the entire array as a suffix sum (1+2+3-2+5 = 9). In the second test case, the maximum sum is achieved by taking just the first element (-1). In the third test case, the maximum sum is achieved by taking the sum from the suffix array starting from index 4 to the end (6+5 = 11). Note: Taking both prefix and suffix sums might not always yield the highest result. For example, in the first test case, taking the prefix sum up to index 2 and suffix sum starting from index 4 would be 1 + 2 + (5-2) = 6 which is less than 9.","solution":"def max_sum(arr): n = len(arr) # Calculate prefix sums prefix_sums = [0] * n prefix_sums[0] = arr[0] for i in range(1, n): prefix_sums[i] = prefix_sums[i - 1] + arr[i] # Calculate suffix sums suffix_sums = [0] * n suffix_sums[-1] = arr[-1] for i in range(n - 2, -1, -1): suffix_sums[i] = suffix_sums[i + 1] + arr[i] # Find the maximum sum using only prefix sums or suffix sums max_prefix_sum = max(prefix_sums) max_suffix_sum = max(suffix_sums) # Find the maximum combined sum where prefix and suffix do not overlap combined_max_sum = float(\'-inf\') for i in range(n - 1): combined_max_sum = max(combined_max_sum, prefix_sums[i] + suffix_sums[i + 1]) return max(max_prefix_sum, max_suffix_sum, combined_max_sum) def solve(t, cases): results = [] for i in range(t): n, arr = cases[i] results.append(max_sum(arr)) return results"},{"question":"Given a list of integers, determine the unique values and find their frequencies. Return the unique values in ascending order along with their frequencies. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of elements in the list. The following n lines contain the elements of the list, one per line. Each element is an integer between 1 and 100, inclusive. Output For each unique value, print the value followed by its frequency, all in ascending order of the values. Examples Input 7 4 1 2 4 3 2 3 Output 1 1 2 2 3 2 4 2 Input 5 5 5 5 5 5 Output 5 5","solution":"def unique_values_with_frequencies(n, elements): Given the number of elements and the elements themselves, return a list of tuples containing unique values and their frequencies in ascending order. :param n: Integer, number of elements in the input list :param elements: List of integers :return: List of tuples [(unique_value, frequency), ...] from collections import Counter # Count the frequency of each element frequency = Counter(elements) # Sort by the unique values (keys of the frequency dictionary) sorted_items = sorted(frequency.items()) return sorted_items"},{"question":"There are M delivery locations arranged in a circular path and D drones to deliver packages. Each drone has a battery limit, representing how many units of distance it can travel in both directions (clockwise or counterclockwise) along the path. The drones want to minimize their battery consumption and maximize efficiency. Help the drones figure out the minimum battery limit required so that all delivery locations can receive packages. Input Format: The first line contains two integers, M and D - denoting the number of delivery locations and number of drones. The next line contains M integers denoting the positions of the delivery locations in the circular path. Output Format: Print the answer in a new line. Constraints: 1 ≤ M ≤ 10^5 1 ≤ D < M 1 ≤ Positioni ≤ 10^7 Update: The battery limit is an integer. SAMPLE INPUT 3 2 1 7 15 SAMPLE OUTPUT 6 Explanation The optimal answer is 6. A drone positioned at 4 (travelling distance 3 from position 1 clockwise) can serve delivery locations at 1, 7. The other drone can be placed at 15 without travelling any distance to serve its respective delivery location.","solution":"def min_battery_limit(M, D, positions): positions.sort() def possible(battery): count = 1 last_position = positions[0] for i in range(1, M): if (positions[i] - last_position) % (positions[-1] - positions[0] + positions[0]) <= battery: continue count += 1 last_position = positions[i] if count > D: return False return True low, high = 0, positions[-1] - positions[0] result = high while low <= high: mid = (low + high) // 2 if possible(mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"Stadium Event Scheduling story You are the manager of a stadium that can be booked for events. The stadium hosts various events, and each event requires specific slots of time. Due to the popularity of the stadium, multiple events can be organized in a single day as long as their time slots do not overlap. Your objective is to maximize the number of events that can be scheduled on a given day. Therefore, you decided to create a program to determine the maximum number of events that can be held without any time conflicts. problem You are given the number of total events, and for each event, you are given the start and end times. An event can be scheduled if there is no other event that overlaps with its time slot. You need to find the maximum number of events that can be scheduled on that day. Input format The input will take the following format: n s1 e1 s2 e2 ... sn en The first line gives the number of events n (1 ≤ n ≤ 1000). The following n lines each contain two integers s and e which represent the start and end times of an event. The time is given in 24-hour format as integers (0 ≤ s < e ≤ 23). Output format Output a single integer, denoting the maximum number of events that can be scheduled without overlapping. Input example 1 4 1 4 2 5 3 8 10 12 Output example 1 2 Explanation: In this example, the first, second and third events overlap, so only one of them can be scheduled. The fourth event does not overlap with any other event, so it can also be scheduled, thus two events in total. Input example 2 5 0 6 1 4 3 5 5 7 8 9 Output example 2 3 Explanation: The second event can be scheduled from 1 to 4, the third event from 3 to 5 (since there is no overlap), and the fifth event from 8 to 9.","solution":"def max_events(events): Determines the maximum number of events that can be held without overlapping time slots. Args: events (list): A list of tuples where each tuple contains the start and end times of an event. Returns: int: Maximum number of non-overlapping events that can be scheduled. # Sort the events based on their end times events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = -1 for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"You are given a grid with n rows and m columns. Each cell contains a character that is either \'.\' (representing an empty cell) or \'*\' (representing a blocked cell). You need to determine the the shortest path from the top-left corner of the grid (1,1) to the bottom-right corner (n,m) moving only through empty cells (\'.\'). You can move in four directions: left, right, up, and down. You cannot move diagonally or through blocked cells. If it is impossible to reach the destination, return -1. ------ Input ------ The first line of input contains a single integer t — the number of test cases. The description of the test cases follows. The first line of each test case contains two space-separated integers n and m — the number of rows and columns in the grid. The next n lines contain m characters each — the i-th character of the j-th line represents the character in the i-th row and j-th column of the grid. ------ Output ------ For each test case, print a single integer — the length of the shortest path from the top-left corner to the bottom-right corner or -1 if there is no such path. ------ Constraints ------ 1 ≤ t ≤ 1000 1 ≤ n, m ≤ 100 It\'s guaranteed that there are at least two empty cells (\'.\') in each grid. ------ Sample Input 1 ------ 2 3 4 .... .*.. .... 4 4 *..* .*.* .*.* *..* ------- Sample Output 1 ------- 5 -1","solution":"from collections import deque def shortest_path_in_grid(t, test_cases): def bfs(grid, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: r, c, dist = queue.popleft() if r == n - 1 and c == m - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'.\': queue.append((nr, nc, dist + 1)) visited[nr][nc] = True return -1 results = [] for case in test_cases: n, m, grid = case if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': results.append(-1) else: results.append(bfs(grid, n, m)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) grid = [lines[index + i + 1] for i in range(n)] test_cases.append((n, m, grid)) index += n + 1 return t, test_cases def solution(input_string): t, test_cases = parse_input(input_string) results = shortest_path_in_grid(t, test_cases) return \'n\'.join(map(str, results))"},{"question":"Little Carol loves playing with strings and she has just learned about palindromes. A palindrome is a word that reads the same backwards as forwards. Carol has a special game where she takes a string and tries to make it a palindrome by removing one character at most. Given a string, determine whether it is possible to make it a palindrome by removing at most one character. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100000) which consists only of lowercase English letters. Output Output a single line containing \\"YES\\" if it is possible to make the string a palindrome by removing at most one character, or \\"NO\\" otherwise. Examples Input abcba Output YES Input abcca Output YES Input abcdef Output NO Explanation In the first example, the string \\"abcba\\" is already a palindrome, so no need to remove any character. In the second example, removing the \'b\' from \\"abcca\\" results in \\"acca\\", which is a palindrome. In the third example, \\"abcdef\\" cannot be turned into a palindrome by removing just one character.","solution":"def can_be_palindrome_by_removing_one_char(s): Check if it is possible to make the string a palindrome by removing at most one character. def is_palindrome(subs): Helper function to check if a given string is a palindrome. return subs == subs[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try removing either the left or the right character and check for palindrome return is_palindrome(s[left:right]) or is_palindrome(s[left+1:right+1]) left += 1 right -= 1 return True def main(): s = input().strip() if can_be_palindrome_by_removing_one_char(s): print(\\"YES\\") else: print(\\"NO\\") if __name__ == \\"__main__\\": main()"},{"question":"Romy likes to play with numbers and has invented a new game using two sequences of integers. He defines two sequences: a \\"JUMP\\" sequence and a \\"STEP\\" sequence. The \\"JUMP\\" sequence J is defined as follows: - ( J[i] = A * i ) where A is a given constant integer and i starts from 1. The \\"STEP\\" sequence S is defined as follows: - ( S[1] = B ) - ( S[i] = S[i-1] + B ) for i > 1 where B is a given constant integer. Given N, determine whether N can appear in both sequences. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line containing three integers A, B and N — the constants defining the sequences and the integer N. ------ Output Format ------ For each test case, output YES on a new line if N can appear in both the \\"JUMP\\" and the \\"STEP\\" sequence, and NO otherwise. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ A, B ≤ 10^{9} 1 ≤ N ≤ 10^{9} ----- Sample Input 1 ------ 3 3 5 15 4 6 24 5 10 50 ----- Sample Output 1 ------ NO YES YES ----- explanation 1 ------ Test case 1: The \\"JUMP\\" sequence J with A = 3 is 3, 6, 9, 12, 15, ... and the \\"STEP\\" sequence S with B = 5 is 5, 10, 15, 20, 25, ... The number 15 appears in both sequences. Hence the answer is NO. Test case 2: The \\"JUMP\\" sequence J with A = 4 is 4, 8, 12, 16, 20, 24, ... and the \\"STEP\\" sequence S with B = 6 is 6, 12, 18, 24, 30, ... The number 24 appears in both sequences. Hence the answer is YES. Test case 3: The \\"JUMP\\" sequence J with A = 5 is 5, 10, 15, 20, 25, 30, ... and the \\"STEP\\" sequence S with B = 10 is 10, 20, 30, 40, 50, ... The number 50 appears in both sequences. Hence the answer is YES.","solution":"def can_appear_in_both_sequences(A, B, N): Given constants A, B, and a number N, determine if N can appear in both JUMP and STEP sequences. if N % A == 0 and N % B == 0: return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for case in test_cases: A, B, N = case results.append(can_appear_in_both_sequences(A, B, N)) return results"},{"question":"Given a large network of computers, we want to perform data transfer between two computers through the shortest possible path. The network is represented as an undirected graph, where nodes denote computers and edges denote direct communication links between them. Each edge has a weight representing the time taken to transfer data through that link. Write a program to compute the minimum transfer time between two specific computers in the network. Input: - The first line of input contains two integers, `n` and `m`, where `n` is the number of computers (nodes) and `m` is the number of direct communication links (edges). You can assume that 1 <= n <= 1000 and 1 <= m <= 100000. - The next `m` lines each contain three integers `u`, `v`, and `w`, where `u` and `v` are the two computers connected by the link, and `w` is the weight of the link (1 <= w <= 1000). Each link is bidirectional. - The last line contains two integers, `start` and `end`, which are the source and destination computers, respectively. Output: - Output a single integer which is the minimum time to transfer data from `start` to `end`. If no path exists, output -1. Example: Input: ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 5 ``` Output: ``` 7 ``` Explanation: The shortest path from computer 1 to computer 5 is 1 -> 2 -> 3 -> 5 with a total transfer time of 2 + 1 + 3 = 6. In another example, if two computers are not connected directly or indirectly through any other computer, your program should return -1.","solution":"import heapq def dijkstra(n, edges, start, end): # Create an adjacency list adj = {i: [] for i in range(1, n + 1)} for u, v, w in edges: adj[u].append((v, w)) adj[v].append((u, w)) # Priority queue to store (weight, node) pq = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == end: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in adj[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[end] == float(\'inf\') else distances[end] # Function to help with input format def minimum_transfer_time(n, m, edges, start, end): return dijkstra(n, edges, start, end)"},{"question":"You are helping coordinate a marathon event where runners are given a unique bib number. Each runner can pick up snacks from refreshment points positioned at specific intervals along the route. Due to logistical reasons, not all refreshment points offer all types of snacks; instead, each point offers some combination out of three kinds of snacks: water, energy bars, and fruits. The event organizers want to make sure that each runner has access to all three types of snacks during the marathon. Given the total number of refreshment points and the specific combinations of snacks available at each point, you need to determine the minimum number of refreshment points a runner needs to stop at to collect all three types of snacks. For example, if the snacks at each refreshment point form a set of intervals on the marathon route where at each point i, a subset of {W, E, F} (for water, energy bars, and fruits) is provided. Write a function to determine the minimum number of stops required for a runner to collect all snack types at least once. Input: The first line contains an integer n (1 ≤ n ≤ 5000) indicating the number of refreshment points. The next n lines contain three integers each, representing the types of snacks available at each refreshment point in the format: wi ei fi (1/0), which indicates whether water (wi), energy bars (ei), and fruits (fi) are available at that point (1 for available, 0 for not available). Output: Output a single integer representing the minimum number of stops needed to collect all three types of snacks. If it\'s not possible to get all types of snacks, return -1. Examples: Input: 3 1 0 0 0 1 0 0 1 1 Output: 2 Input: 5 1 1 0 0 1 1 1 0 0 0 0 1 1 1 1 Output: 1 Input: 2 1 1 0 0 0 1 Output: 2 Input: 4 0 0 0 0 0 0 0 0 0 0 0 0 Output: -1","solution":"def min_stops_for_all_snacks(n, points): Determines the minimum number of stops required for a runner to collect all types of snacks at least once. Parameters: n (int): Number of refreshment points. points (list of tuples): List of tuples, each containing three integers (wi, ei, fi) indicating the availability of water, energy bars, and fruits at each refreshment point. Returns: int: Minimum number of stops needed to collect all three types of snacks, or -1 if not possible. from itertools import combinations all_snacks_set = {1, 2, 3} # Create a list of sets representing the snacks available at each refreshment point snack_combinations = [] for point in points: available_snacks = set() if point[0] == 1: available_snacks.add(1) if point[1] == 1: available_snacks.add(2) if point[2] == 1: available_snacks.add(3) snack_combinations.append(available_snacks) # Find the minimum number of stops needed for i in range(1, n + 1): for combo in combinations(snack_combinations, i): combined_snacks = set().union(*combo) if combined_snacks == all_snacks_set: return i return -1"},{"question":"You are working in a software company and your team is building an event scheduling application. One of the requirements is to manage event conflicts efficiently. You are tasked with writing a program that helps to resolve conflicts among various events based on their starting and ending times. Each event has a start time and an end time. You need to determine the maximum number of non-overlapping events that can be attended. Write a program that, given a list of events with their start and end times, finds the maximum number of non-overlapping events. Input: The input consists of multiple datasets. Each dataset begins with an integer n (1 <= n <= 10^5), the number of events. This is followed by n lines, each containing two integers Si and Ei (0 <= Si < Ei <= 10^6), the start time and end time of each event, respectively. The input ends with a dataset where n = 0, which should not be processed. Output: For each dataset, output a single integer representing the maximum number of non-overlapping events that can be attended. Example: Input: 3 1 3 2 4 3 5 4 4 5 4 6 6 7 7 8 0 Output: 2 3 Explanation: For the first dataset, the maximum number of non-overlapping events that can be attended is 2 (events [1, 3] and [3, 5]). For the second dataset, the maximum number of non-overlapping events that can be attended is 3 (events [4, 5], [6, 7], and [7, 8]).","solution":"def max_non_overlapping_events(datasets): results = [] for n, events in datasets: if n == 0: break # Sort events by their end times events.sort(key=lambda x: x[1]) last_end_time = 0 count = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results"},{"question":"Background: Cassie works in a software company and is currently assigned to a task involving sequences. Given a sequence of integers, she needs to find the maximum sum of any non-empty subarray (contiguous segment of the array). However, the array Cassie is working with is quite unique and has a special characteristic — each element in the array is either a positive integer or a strictly negative integer. Help Cassie accomplish her task by writing a program that computes the maximum subarray sum for any given sequence. Task: You will be given a number of test cases. For each test case, you will be given a sequence of integers. Your task is to determine the maximum sum of any non-empty subarray within each given sequence. Input: The first line contains an integer T, the number of test cases. Each of the next T pairs of lines contains: - An integer N, the length of the sequence. - N integers a1, a2, ..., aN, representing the sequence. Output: For each test case, print the maximum sum of any non-empty subarray on a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^9 ≤ ai ≤ 10^9 SAMPLE INPUT 3 5 -2 1 -3 4 -1 6 -1 -2 -3 -4 -5 -6 4 2 -1 2 3 SAMPLE OUTPUT 4 -1 6","solution":"def max_subarray_sum(arr): Returns the maximum sum of any non-empty subarray from the given array of integers. Uses Kadane\'s algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(test_cases): Processes multiple test cases and returns the results for maximum subarray sums. results = [] for case in test_cases: n, arr = case result = max_subarray_sum(arr) results.append(result) return results"},{"question":"Problem A group of archaeologists has discovered an ancient stone tablet that contains a mysterious inscription. The inscription appears to describe a series of directions on a grid that will lead to an ancient treasure. The grid is a 2D plane, and the archaeologists can start at any grid point. The directions are given as a list of moves, where each move can be one of the following: - \\"U\\" (up) : move from `(x, y)` to `(x, y+1)` - \\"D\\" (down) : move from `(x, y)` to `(x, y-1)` - \\"L\\" (left) : move from `(x, y)` to `(x-1, y)` - \\"R\\" (right) : move from `(x, y)` to `(x+1, y)` The treasure is hidden at a location that the archaeologists will reach after following all the moves from the starting point. You are tasked with writing a program to determine the final coordinates of the treasure based on the list of moves and the starting point. # Input The input consists of two parts: 1. A string `S` of directions (e.g., \\"UUDDLRLR\\"). 2. Two integers `X` and `Y` which represent the starting point `(X, Y)` on the grid. # Constraints * The string `S` will only contain the characters \'U\', \'D\', \'L\', \'R\'. * The length of `S` will be between 1 and 100,000. * `-10^9 ≤ X, Y ≤ 10^9` # Output Output the final coordinates of the treasure in the format \\"X Y\\". # Examples Example 1 Input: ``` UUDDLRLR 0 0 ``` Output: ``` 0 0 ``` Example 2 Input: ``` RRUULLDD 2 3 ``` Output: ``` 2 3 ``` Example 3 Input: ``` ULDRULDR 1000000 1000000 ``` Output: ``` 1000000 1000000 ``` # Note The movement directions \\"UUDDLRLR\\" starting from (0, 0) bring the archaeologists back to (0, 0). Similarly, \\"RRUULLDD\\" starting from (2, 3) and \\"ULDRULDR\\" starting from (1000000, 1000000) also bring the archaeologists back to their respective starting points.","solution":"def final_coordinates(S, X, Y): Determines the final coordinates after following a series of moves from a starting point. Args: S (str): A string representing the moves. Each character can be \'U\', \'D\', \'L\', or \'R\'. X (int): The initial X-coordinate. Y (int): The initial Y-coordinate. Returns: (int, int): The final coordinates after all moves. for move in S: if move == \'U\': Y += 1 elif move == \'D\': Y -= 1 elif move == \'L\': X -= 1 elif move == \'R\': X += 1 return X, Y"},{"question":"Given an array arr[] of size n, find the length of the longest subarray consisting of elements which when sorted forms a contiguous sequence of numbers without any duplicates. Example 1: Input : arr[] = {1, 3, 5, 2, 4, 6, 7} Output : 7 Explanation: The entire array is a contiguous sequence from 1 to 7. Example 2: Input : arr[] = {10, 12, 11, 14, 13, 17, 18} Output : 5 Explanation: The longest contiguous subarray is [10, 12, 11, 14, 13] which forms a contiguous sequence from 10 to 14. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function longestContiguousSubarray() that takes an array (arr), sizeOfArray (n), and return the length of the longest contiguous subarray. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). CONSTRAINTS: 1 ≤ arr[i], n ≤ 10^5","solution":"def longestContiguousSubarray(arr, n): Returns the length of the longest subarray consisting of elements which when sorted forms a contiguous sequence of numbers without any duplicates. if n == 0: return 0 max_length = 1 for i in range(n): min_val = max_val = arr[i] unique_elements = set() for j in range(i, n): if arr[j] in unique_elements: break unique_elements.add(arr[j]) min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) if max_val - min_val == j - i: max_length = max(max_length, j - i + 1) return max_length"},{"question":"You are given a list of integers representing the positions of cars parked along a straight road. You need to find the minimum total travel distance for a new car to park at any position on the road. The total travel distance is defined as the sum of the absolute differences between the new car\'s position and each of the existing cars\' positions. By optimizing the position where the new car parks, you can minimize this total travel distance. Return this minimum total travel distance. -----Input----- The input consists of: - A single line containing an integer `n` (1 le n le 10^5) — the number of cars already parked. - A second line containing `n` space-separated integers p_1, p_2, ldots, p_n (1 le p_i le 10^9) — the positions of the parked cars on the road. -----Output----- Output a single integer — the minimized total travel distance for the new car. -----Examples----- Input 5 1 2 3 6 7 Output 10 Input 4 2 4 6 8 Output 8 -----Notes----- In the first example, the median position of the existing cars is 3. Parking the new car at position 3 results in the minimal total travel distance of 10. In the second example, the median position of the existing cars is 5. Parking the new car at position 5 results in the minimal total travel distance of 8.","solution":"def minimize_total_travel_distance(n, positions): Returns the minimized total travel distance for the new car. :param n: Number of cars already parked. :param positions: List of positions of the parked cars on the road. :return: Integer representing the minimized total travel distance. # Sorting the positions positions.sort() # Finding the median if n % 2 == 1: median = positions[n // 2] else: median = positions[(n - 1) // 2] # Calculating the total travel distance by parking at the median total_distance = sum(abs(median - pos) for pos in positions) return total_distance"},{"question":"You are given a list of n items, and each item has a prefix expression associated with it. Your task is to convert each prefix expression to its corresponding infix expression. A prefix expression is a mathematical notation in which every operator precedes all of its operands. For example, the prefix expression `+ * A B C` is equivalent to the infix expression `(A * B) + C`. The input consists of multiple test cases. Each test case contains an integer n (1 leq n leq 100) denoting the number of items, followed by n lines, each containing a single prefix expression. Your output should be n lines, each containing the infix expression corresponding to the input prefix expression. # Input Format - The first line contains an integer t (1 leq t leq 100) — the number of test cases. - The description of t test cases follows. - The first line of each test case contains an integer n (1 leq n leq 100) — the number of items. - The next n lines each contain a prefix expression. # Output Format For each test case, output n lines containing the corresponding infix expressions. # Example Input ``` 2 3 + A B * + A B - C D + * A B C 2 - A B + + A B C ``` Output ``` (A + B) ((A + B) * (C - D)) ((A * B) + C) (A - B) ((A + B) + C) ``` Notes - Each operator is a single character among `+`, `-`, `*`, or `/`. - Each operand is a single uppercase letter. - Assume the input expressions are valid prefix expressions.","solution":"def prefix_to_infix(prefix_expr): Converts a prefix expression to an infix expression. stack = [] operators = set([\'+\', \'-\', \'*\', \'/\']) # Reversing the order of the prefix expression for token in reversed(prefix_expr.split()): if token not in operators: stack.append(token) else: operand1 = stack.pop() operand2 = stack.pop() new_expr = f\\"({operand1} {token} {operand2})\\" stack.append(new_expr) return stack[0] def convert_prefix_test_cases(test_cases): Processes multiple test cases to convert prefix expressions to infix expressions. results = [] for case in test_cases: n, expressions = case case_result = [] for expr in expressions: case_result.append(prefix_to_infix(expr)) results.append(case_result) return results"},{"question":"Largest Number Write a program that takes two non-negative integers `a` and `b` with `a <= b`, and finds the largest integer less than or equal to `b` that is divisible by `a`. For example: ```if-not:racket ~~~ largestDivisible(2, 8) -> 8 Explanation: The numbers divisible by 2 up to 8 are [2, 4, 6, 8]. The largest is 8. largestDivisible(3, 10) -> 9 Explanation: The numbers divisible by 3 up to 10 are [3, 6, 9]. The largest is 9. largestDivisible(5, 20) -> 20 Explanation: The numbers divisible by 5 up to 20 are [5, 10, 15, 20]. The largest is 20. ~~~ ``` ```if:racket ~~~racket (largestDivisible 2 8) ; 8 ; The numbers divisible by 2 up to 8 are [2, 4, 6, 8]. The largest is 8. (largestDivisible 3 10) ; 9 ; The numbers divisible by 3 up to 10 are [3, 6, 9]. The largest is 9. (largestDivisible 5 20) ; 20 ; The numbers divisible by 5 up to 20 are [5, 10, 15, 20]. The largest is 20. ~~~ ```","solution":"def largestDivisible(a, b): Returns the largest integer less than or equal to b that is divisible by a. return (b // a) * a"},{"question":"A group of friends decided to play a game of word transformation. The game is played on a grid of letters with dimensions n times m. Starting from any given cell, a player can form a word by moving to one of the adjacent cells (up, down, left, right, but not diagonally). The goal is to find the longest word that can be formed by following these rules: 1. A word must always form a valid sequence in the grid, i.e., every letter in the word must be adjacent to the previous one. 2. A cell can be used more than once while forming a word. Given the grid and a starting position, write a program to determine the length of the longest possible word. Input - The first line contains two integers n and m (1 leq n cdot m leq 10^5), specifying the dimensions of the grid. - The following n lines each contain m uppercase Latin letters, representing the grid. - The last line contains two integers x and y (0 leq x < n, 0 leq y < m), representing the starting position. Output - Output a single integer, the length of the longest word that can be formed starting from the given position. Examples # Example 1: Input: ``` 3 3 ABC DEF GHI 1 1 ``` Output: ``` 9 ``` # Example 2: Input: ``` 2 2 AB CD 0 0 ``` Output: ``` 4 ``` # Note In the first example, starting from \'E\' at position (1,1), one possible longest word is \\"EDCFEHGBA\\". In the second example, starting from \'A\' at position (0,0), the longest possible word is \\"ABCD\\".","solution":"def longest_word_length(n, m, grid, start_x, start_y): def dfs(x, y, visited): visited.add((x, y)) max_length = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: max_length = max(max_length, dfs(nx, ny, visited)) visited.remove((x, y)) return 1 + max_length return dfs(start_x, start_y, set())"},{"question":"You are given a sequence of n integers a_1, a_2, ..., a_n. There are also q queries of two types you need to answer: * 1 l r k — count the number of elements in the subarray a[l], a[l+1], ..., a[r] which are equal to k. * 2 i x — update the element at index i in the sequence to x. Input: The first line contains two integers n and q (1 ≤ n, q ≤ 10^5). The second line contains n integers a_1, a_2, ..., a_n — the initial sequence (1 ≤ a_i ≤ 100). Each of the next q lines contains either of the queries: * 1 l r k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 100) * 2 i x (1 ≤ i ≤ n, 1 ≤ x ≤ 100) Output: For each query of the first type, print the result in a new line. Example Input: 5 5 2 1 2 1 2 1 1 5 2 2 3 1 1 1 5 2 1 1 3 1 1 3 5 1 Output: 3 2 1 2","solution":"def process_queries(n, q, arr, queries): Processes and handles the given queries on the initial array `arr`. Parameters: n (int): Length of the array `arr` q (int): Number of queries arr (list of int): Initial sequence of integers queries (list of tuples): List of queries. Each query is a tuple. Returns: list of int: Results of the type 1 queries. results = [] for query in queries: if query[0] == 1: # Type 1 query l, r, k = query[1], query[2], query[3] count = sum(1 for i in range(l-1, r) if arr[i] == k) results.append(count) elif query[0] == 2: # Type 2 query i, x = query[1], query[2] arr[i-1] = x return results"},{"question":"Example Input 8 4 (()(())) 5 6 7 3 Output 3 2 1 4","solution":"def find_closing_parenthesis(s, index): Given a string \'s\' of balanced parentheses and an index of an opening parenthesis, return the index of the corresponding closing parenthesis. # Check if the given index is out of bounds or is not an opening parenthesis if index < 0 or index >= len(s) or s[index] != \'(\': return -1 # Initialize a count for open parenthesis open_count = 1 # Iterate through the string starting from the next character after the opening parenthesis for i in range(index + 1, len(s)): if s[i] == \'(\': open_count += 1 elif s[i] == \')\': open_count -= 1 # When the count of open parenthesis is zero, we found the match if open_count == 0: return i # If no matching closing parenthesis is found return -1"},{"question":"You are given a number X. Your task is to determine if X is a pronic number. A number is called pronic if it is the product of two consecutive integers. Example 1: Input: X = 12 Output: 1 Explanation: 12 = 3 * 4. So the answer is 1. Example 2: Input: X = 11 Output: 0 Explanation: There are no consecutive integers whose product is 11. So the answer is 0. Your Task: You don\'t need to read input or print anything. Complete the function isPronic() which takes X as input parameter and returns 1 if X is a pronic number else return 0. Expected Time Complexity: O(√X) Expected Auxiliary Space: O(1) Constraints: 1 <= X <= 10^{18}","solution":"def isPronic(X): Returns 1 if X is a pronic number, otherwise returns 0. i = 0 while i * (i + 1) <= X: if i * (i + 1) == X: return 1 i += 1 return 0"},{"question":"Given an array of integers, generate and return all possible subsets of the array (the power set). The solution must not include duplicate subsets. Input Format: The first line contains an integer `n`: 0 ≤ n ≤ 16 representing the number of elements in the array. The second line contains `n` space-separated integers representing the elements of the array. Output Format: Print all unique subsets of the given array in any order. Each subset should be printed in a new line, and each subset should be represented by space-separated integers. If the array is empty, print a single empty line. SAMPLE INPUT 3 1 2 2 SAMPLE OUTPUT 1 1 2 1 2 2 2 2 2","solution":"def generate_subsets(arr): Generate all unique subsets of the input array. from itertools import combinations arr.sort() subsets = set() for i in range(len(arr) + 1): for combo in combinations(arr, i): subsets.add(combo) return subsets def format_subsets(subsets): Format the subsets for printing. formatted_subsets = [] for subset in subsets: formatted_subsets.append(\\" \\".join(map(str, subset)) if subset else \\"\\") return sorted(formatted_subsets) def main(n, arr): Generate and print all unique subsets of the array. if n == 0: print(\\"\\") return subsets = generate_subsets(arr) formatted_subsets = format_subsets(subsets) for subset in formatted_subsets: print(subset)"},{"question":"John has recently learned about sequences and wanted to create an interesting problem for his friend, Alice. He came up with the following problem: Consider a sequence of integers A of size N. John defines a function F on this sequence, which is the sum of absolute differences between every pair of integers in the sequence. That is, F(A) = Σ |A[i] - A[j]| for all 1 ≤ i < j ≤ N Alice finds it easy to calculate F(A) for small sequences, but for large sequences, it becomes a tedious task. Can you help Alice in finding the value of F(A) for a given sequence A? Input: The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines: - The first line contains an integer N, the size of the sequence. - The second line contains N integers which represent the sequence A. Output: For each test case, output the value of F(A) in a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 -10^6 ≤ A[i] ≤ 10^6 SAMPLE INPUT 1 3 1 3 2 SAMPLE OUTPUT 4 Explanation: In the given test case, the sequence A is [1, 3, 2]. |1 - 3| + |1 - 2| + |3 - 2| = 2 + 1 + 1 = 4","solution":"def calculate_F(A): A.sort() N = len(A) total = 0 for i in range(N): total += A[i] * (2 * i - N + 1) return total def solve(test_cases): results = [] for case in test_cases: N, A = case result = calculate_F(A) results.append(result) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) A = list(map(int, data[index+1:index+1+N])) test_cases.append((N, A)) index += N + 1 results = solve(test_cases) for result in results: print(result)"},{"question":"Write a program that simulates purchasing books from a bookstore. You are given a list of book prices and the goal is to purchase as many books as possible without exceeding a given budget. Each book can only be purchased once. You also have a discount coupon that can be used on one book to halve its price. The discount can only be applied to a single book and must be used once. Write a program that determines the maximum number of books that can be purchased with the given budget using the discount effectively. INPUT First line contains an integer T, the number of test cases. For each test case: - The first line contains two integers N (the number of books) and B (the budget). - The second line contains N integers representing the prices of the books. OUTPUT For each test case, output the maximum number of books that can be purchased. Constraints: 1 ≤ N ≤ 1000 1 ≤ B ≤ 10^6 1 ≤ book prices ≤ 1000 SAMPLE INPUT 2 5 100 20 50 30 40 90 4 80 50 70 80 90 SAMPLE OUTPUT 3 1 Explanation In the first test case: - Without discount: buying books worth 20, 30, and 40 will use up 90 budget. - Using the discount on the 50 priced book reduces it to 25, so buying books worth 20, 30, and 25 will use only 75 budget. Hence, 3 books can be bought with the budget. In the second test case: - The budget of 80 only allows for one book even if the cheapest (50) is halved (to 25), then only one book worth 50 can be bought. Hence, only 1 book can be bought with the budget.","solution":"def max_books(T, test_cases): results = [] for i in range(T): N, B = test_cases[i][0] prices = test_cases[i][1] min_book_count = 0 prices.sort() for j in range(N): discounted_prices = prices[:j] + [prices[j] // 2] + prices[j + 1:] discounted_prices.sort() total_spent = 0 book_count = 0 for price in discounted_prices: if total_spent + price <= B: total_spent += price book_count += 1 else: break min_book_count = max(min_book_count, book_count) results.append(min_book_count) return results"},{"question":"Given a directed graph, determine if there is a way to start at a vertex and visit every other vertex exactly once. If such a path exists, it is called a Hamiltonian Path. If such a path exists starting at any vertex, print \\"Yes\\", otherwise print \\"No\\". Input Format: The first line contains an integer T - number of test cases. Each test case starts with a line containing two space-separated integers N and M - the number of vertices and the number of directed edges respectively. The next M lines each contain two space-separated integers u and v, indicating a directed edge from vertex u to vertex v. Output Format: For each test case, print \\"Yes\\" if there exists a Hamiltonian Path in the directed graph, otherwise print \\"No\\". Constraints: 1 ≤ T ≤ 5 2 ≤ N ≤ 15 1 ≤ M ≤ 50 It is guaranteed that there will be no self-loops or multiple edges in the graph. SAMPLE INPUT 1 4 4 1 2 2 3 3 4 4 1 SAMPLE OUTPUT Yes","solution":"import itertools def has_hamiltonian_path(N, edges): def dfs(v, visited, path_length): if path_length == N: return True visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, visited, path_length + 1): return True visited[v] = False return False graph = {i: [] for i in range(N)} for u, v in edges: graph[u-1].append(v-1) for start_vertex in range(N): visited = [False] * N if dfs(start_vertex, visited, 1): return \\"Yes\\" return \\"No\\" def hamiltonian_paths(T, test_cases): results = [] for N, M, edges in test_cases: results.append(has_hamiltonian_path(N, edges)) return results"},{"question":"Given an array of integers, find the length of the longest subarray with a positive product. Example 1: Input: [1, -2, -3, 4] Output: 4 Explanation: The entire array forms a subarray with a positive product. Example 2: Input: [0, 1, -2, -3, -4] Output: 3 Explanation: The subarray [1, -2, -3] has a positive product. Example 3: Input: [-1, -2, -3, 0, 1] Output: 2 Explanation: The subarray [-1, -2] (or [-2, -3]) has a positive product.","solution":"def longestSubarrayWithPositiveProduct(nums): Returns the length of the longest subarray with a positive product. max_len = 0 pos_len = 0 neg_len = 0 for num in nums: if num == 0: pos_len = 0 neg_len = 0 elif num > 0: pos_len += 1 neg_len = neg_len + 1 if neg_len != 0 else 0 else: new_pos_len = neg_len + 1 if neg_len != 0 else 0 neg_len = pos_len + 1 pos_len = new_pos_len max_len = max(max_len, pos_len) return max_len"},{"question":"You are given an array `a` of length `n` and an integer `x`. Determine the minimal length of a contiguous subarray for which the sum of its elements is at least `x`. If no such subarray exists, output `-1`. A subarray is a contiguous part of the array `a`, i.e., the array a[l, l+1, ..., r] for some 1 leq l leq r leq n. -----Input----- The first line contains two integers `n` and `x` (1 leq n leq 10^5, 1 leq x leq 10^9). The second line contains `n` integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4). -----Output----- Output a single integer, the minimal length of a contiguous subarray with a sum of at least `x`. If no such subarray exists, output `-1`. -----Examples----- Input 5 11 1 2 3 4 5 Output 3 Input 4 15 1 2 3 4 Output -1 -----Note----- In the first example, the subarray [3, 4, 5] has a sum of 12 which is the minimal subarray length with a sum at least 11. In the second example, there is no subarray with a sum of 15 or more.","solution":"def minimal_subarray_length(a, n, x): Returns the minimal length of a contiguous subarray with a sum of at least x. If no such subarray exists, returns -1. left = 0 curr_sum = 0 min_len = float(\'inf\') for right in range(n): curr_sum += a[right] while curr_sum >= x: min_len = min(min_len, right - left + 1) curr_sum -= a[left] left += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"There is a delivery network. The network has N locations and M paths. The locations are numbered from 1 to N, and the paths are numbered from 1 to M. Each path i connects location A_i to location B_i bidirectionally. You can traverse any path in either direction. Location 1 is the central hub with main dispatch facilities. We need to determine if it\'s possible to assign a direct supervisor from another location to each location (other than the central hub) such that starting from any location and following the chain of supervisors will eventually lead to the central hub in the minimum number of paths possible. If it\'s possible, print such a supervisor assignment. -----Constraints----- - All values in input are integers. - 2 leq N leq 10^5 - 1 leq M leq 2 times 10^5 - 1 leq A_i, B_i leq N (1 leq i leq M) - A_i neq B_i (1 leq i leq M) - One can travel between any two locations by traversing paths. -----Input----- Input is given from Standard Input in the following format: N M A_1 B_1 : A_M B_M -----Output----- If there is no way to assign direct supervisors as specified, print No. Otherwise, print N lines. The first line should contain Yes, and the i-th line (2 leq i leq N) should contain the integer representing the direct supervisor of Location i. -----Sample Input----- 5 5 1 2 2 3 3 4 4 5 5 2 -----Sample Output----- Yes 1 2 3 2 In this example, the following happens: - Starting from Location 2, you will reach Location 1 after traversing one path: (2) to 1. This is the minimum number of paths possible. - Starting from Location 3, you will reach Location 1 after traversing two paths: (3) to 2 to 1. This is the minimum number of paths possible. - Starting from Location 4, you will reach Location 1 after traversing three paths: (4) to 3 to 2 to 1. This is the minimum number of paths possible. - Starting from Location 5, you will reach Location 1 after traversing three paths: (5) to 2 to 1. This is the minimum number of paths possible. Thus, the objective is satisfied.","solution":"from collections import deque, defaultdict def find_supervisors(N, M, paths): graph = defaultdict(list) for A, B in paths: graph[A].append(B) graph[B].append(A) supervisors = [-1] * (N + 1) supervisors[1] = 0 # Hub has no supervisor queue = deque([1]) while queue: current = queue.popleft() for neighbor in graph[current]: if supervisors[neighbor] == -1: # Not yet visited supervisors[neighbor] = current queue.append(neighbor) # If there are any locations that don\'t have a supervisor, the task is impossible if -1 in supervisors[2:]: return \\"No\\" result = [\\"Yes\\"] result.extend(map(str, supervisors[2:])) return \\"n\\".join(result) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) paths = [(int(data[i * 2 + 2]), int(data[i * 2 + 3])) for i in range(M)] print(find_supervisors(N, M, paths)) if __name__ == \\"__main__\\": main()"},{"question":"Emily\'s hardware store stocks different lengths of ropes that can be cut to various sizes for customer orders. Each rope can be cut into smaller pieces, but no piece should have a length less than or equal to a given minimum length L. Customers can request any number of pieces, but they must all come from a single rope and the total length of the pieces must equal the original rope length. Emily wants a program that determines the number of ways to cut a given rope such that each piece has a length greater than or equal to L. -----Input----- The first line contains two integers: N and L (1 leq N leq 10^9, 1 leq L leq N) — the original length of the rope and the minimum length of each piece, respectively. -----Output----- Print the number of ways to cut the rope such that each piece is at least L in length. -----Examples----- Input 10 2 Output 1 Input 10 1 Output 42 Input 15 3 Output 1 Input 20 4 Output 0 -----Note----- In the first example, the only way to cut the rope into pieces all greater than or equal to 2 units in length is to leave it as a single piece. In the second example, there are 42 different ways to cut a rope of length 10 into pieces each at least 1 unit long. In the third example, the only way to cut the rope into pieces all greater than or equal to 3 units in length is to leave it as a single piece. In the fourth example, there is no way to cut the rope into pieces each at least 4 units long, since the rope\'s length is not a multiple of 4.","solution":"def number_of_ways_to_cut_rope(N, L): Returns the number of ways to cut a rope of length N such that each piece is greater than or equal to L units in length. if N < L: return 0 if N % L == 0: return 1 return 0"},{"question":"You are given a list of integers where each integer represents a letter\'s position in the alphabet (1 for A, 2 for B, and so on until 26 for Z). Write a function that converts this list into a corresponding string of letters. For example: [1, 2, 3] -> \\"ABC\\" If the list contains any number outside the range 1-26, return \\"invalid input\\". If the list is empty, return an empty string.","solution":"def convert_to_string(letter_positions): Converts a list of integers representing letter positions into a string of letters. Returns \\"invalid input\\" for any integers outside the range 1-26. result = [] for pos in letter_positions: if 1 <= pos <= 26: result.append(chr(pos + 64)) # Convert position to corresponding letter else: return \\"invalid input\\" return \'\'.join(result)"},{"question":"A cat named Luna is playing a game with her friends. The game consists of several rounds, and in each round, Luna receives a string `S` consisting of lowercase English letters. Luna loves palindromes and she wants to know how many palindromic substrings are present in her string `S`. A substring is defined as a contiguous sequence of characters within a string. A palindrome is a string that reads the same backward as forward. For example, \\"aba\\" is a palindrome while \\"abc\\" is not. Help Luna determine the number of palindromic substrings in her string `S` for each round. Input Format - The first line contains an integer `T`, the number of test cases. - Each of the next `T` lines contains a single string `S`. Output Format For each test case, print a single integer on a new line, the number of palindromic substrings in the string `S`. Constraints - 1 <= T <= 100 - 1 <= |S| <= 1000 - The string `S` consists of lowercase English letters only. Sample Input 3 aba abc aaa Sample Output 4 3 6 Explanation In the first test case, the palindromic substrings of \\"aba\\" are [\\"a\\", \\"b\\", \\"a\\", \\"aba\\"]. In the second test case, the palindromic substrings of \\"abc\\" are [\\"a\\", \\"b\\", \\"c\\"]. In the third test case, the palindromic substrings of \\"aaa\\" are [\\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\"].","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the given string s. n = len(s) count = 0 for i in range(n): # count odd length palindromes with center at i l = r = i while l >= 0 and r < n and s[l] == s[r]: count += 1 l -= 1 r += 1 # count even length palindromes with center at i and i+1 l = i r = i + 1 while l >= 0 and r < n and s[l] == s[r]: count += 1 l -= 1 r += 1 return count def solve_palindromic_substrings(T, strings): results = [] for s in strings: results.append(count_palindromic_substrings(s)) return results"},{"question":"In this problem, you need to help an orchestra group arrange their practice session in a clean and structured way. The group will have a sequence of practice segments, each defined by a starting time and an ending time. Your task is to merge overlapping practice segments to reduce complexity. A practice segment [start, end) overlaps with another segment [start\', end\') if start < end\' and start\' < end. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of practice segments. Each of the next n lines contains two integers start and end (0 ≤ start < end ≤ 1000000), representing the start and end times of a practice segment. Output Output the merged list of practice segments sorted by the starting times. For each merged segment, print the start and end time as two integers separated by a space. Examples Input 3 1 3 2 6 8 10 Output 1 6 8 10 Input 5 1 4 4 5 7 8 8 10 12 15 Output 1 5 7 10 12 15","solution":"def merge_practice_segments(n, segments): Merges overlapping practice segments. :param n: int - number of practice segments :param segments: list of tuples - each tuple contains start and end time of a practice segment :return: list of tuples - merged practice segments if n == 0: return [] # Sort the segments by start time segments.sort(key=lambda x: x[0]) merged_segments = [segments[0]] for i in range(1, n): prev_start, prev_end = merged_segments[-1] curr_start, curr_end = segments[i] if curr_start <= prev_end: # there is an overlap merged_segments[-1] = (prev_start, max(prev_end, curr_end)) else: merged_segments.append((curr_start, curr_end)) return merged_segments"},{"question":"You are given a sequence of n integers. Your task is to find the maximum possible sum of its non-empty subsequence such that no two elements of this subsequence are adjacent in the original sequence. Input The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The following line contains n integers a_i (−10^9 ≤ a_i ≤ 10^9). The sum of values n over all test cases does not exceed 10^5. Output For each test case print one integer — the maximum sum of the desired subsequence. Example Input 2 4 3 2 5 10 4 -1 -1 -2 -4 Output 13 0 Note In the first test case, the maximum sum is 13, which can be obtained by choosing the elements 3 and 10. In the second test case, the maximum sum is 0 since all elements are negative, and taking an empty subsequence is optimal.","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of non-adjacent elements in the array. include, exclude = 0, 0 for num in arr: new_exclude = max(include, exclude) include = exclude + num exclude = new_exclude return max(include, exclude) def solve(t, test_cases): Solve the problem for each test case and return the results in a list. results = [] for n, sequence in test_cases: results.append(max_non_adjacent_sum(sequence)) return results"},{"question":"Little Alice has just learned about matrices and matrix operations in her math class. She is intrigued by the concept of matrix transposition, where the rows and columns of the matrix are swapped. Now, she wants to write a program to transpose a given matrix. Your task is to help Alice by writing a program that takes a matrix as input and outputs its transpose. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the matrix respectively. The next n lines contain m integers each, representing the elements of the matrix. Output Output the transpose of the given matrix. The transposed matrix should have m rows and n columns. Examples Input 2 3 1 2 3 4 5 6 Output 1 4 2 5 3 6 Input 3 2 1 2 3 4 5 6 Output 1 3 5 2 4 6","solution":"def transpose_matrix(n, m, matrix): Transposes the given n x m matrix to an m x n matrix. Parameters: n (int): number of rows in the input matrix m (int): number of columns in the input matrix matrix (list of lists): the n x m matrix to transpose Returns: list of lists: transposed m x n matrix transposed = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): transposed[j][i] = matrix[i][j] return transposed # Example usage: # n, m = 2, 3 # matrix = [[1, 2, 3], [4, 5, 6]] # print(transpose_matrix(n, m, matrix))"},{"question":"Stock Prices Analysis As a financial analyst working for a tech-savvy investment firm, you are often required to analyze the stock prices of various companies to provide insights that help in decision-making. You\'re given the stock prices of a particular company over a number of days and need to identify the maximum profit that can be made by buying a stock on one day and selling it on a later day. Write a function `maxProfit` that takes a list of daily stock prices and returns the maximum possible profit. If no profit can be made, return 0. **Function Signature:** ```python def maxProfit(prices: List[int]) -> int: ``` **Input:** - `prices (List[int])`: A list of integers where each element represents the stock price on that particular day. - 1 <= len(prices) <= 10^5 - 0 <= prices[i] <= 10^4 **Output:** - An integer representing the maximum profit by buying and selling the stock on different days. If no profit can be made, return 0. **Example:** **Example 1:** *Input:* [7, 1, 5, 3, 6, 4] *Output:* 5 *Explanation:* Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5 (Not 7-1 = 6, as selling price needs to be larger than buying price). **Example 2:** *Input:* [7, 6, 4, 3, 1] *Output:* 0 *Explanation:* In this case, no transactions are done and the max profit = 0. **Example 3:** *Input:* [3, 3, 5, 0, 0, 3, 1, 4] *Output:* 4 *Explanation:* Buy on day 4 (price = 0) and sell on day 8 (price = 4), profit = 4-0 = 4.","solution":"def maxProfit(prices): Calculate the maximum possible profit from buying and selling a stock on different days. :param prices: List[int] - A list of integers representing the stock prices on each day :return: int - The maximum profit, or 0 if no profit can be made if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid initially contains either a `0` or a `1`. You can perform the following operation any number of times: Choose a subgrid that is entirely within the given grid, flip all the `0`s in the subgrid to `1`s, and flip all the `1`s in the subgrid to `0`s. Your task is to determine the minimum number of operations required to make all cells in the grid equal. Note that flipping a subgrid means choosing two rows and two columns, such that the resulting subgrid is a rectangular region, and toggling all the `0`s and `1`s inside that region. -----Input----- The first line contains two integers n and m (1 le n, m le 50) — the number of rows and columns in the grid. Each of the next n lines contains a string of length m consisting of `0`s and `1`s. -----Output----- Print a single integer — the minimum number of operations needed to make all cells in the grid equal. -----Example 1----- Input 2 2 01 10 Output 1 -----Example 2----- Input 3 3 111 111 111 Output 0 -----Note----- In the first test case, we can flip the entire 2 times 2 grid in one operation to make all cells equal. In the second test case, all cells are already equal, so no operations are needed.","solution":"def min_operations_to_make_grid_equal(n, m, grid): Determine the minimum number of operations required to make all cells in the grid equal by performing flip operations on subgrids. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: List of strings representing the grid :return: Minimum number of operations needed to make all cells in the grid equal count_1 = sum(row.count(\'1\') for row in grid) count_0 = n * m - count_1 if count_1 == 0 or count_0 == 0: return 0 return 1"},{"question":"You are given a 2D grid containing different integers representing heights. It is defined that water can flow from a cell to its neighboring cells (left, right, up, down) if the height of the destination cell is less than or equal to the height of the origin cell. Your task is to find all cells from which water can flow to both the Pacific and Atlantic oceans. The Pacific ocean touches the left and top edges of the grid, and the Atlantic ocean touches the right and bottom edges of the grid. INPUT The first line will contain two integers m and n, representing the dimensions of the grid. The next m lines will contain n integers each, representing the height of each cell in the grid. OUTPUT Output a list of coordinates of all cells where water can flow to both the Pacific and Atlantic oceans, sorted lexicographically by their row and column indices. CONSTRAINTS 1 ≤ m, n ≤ 200 1 ≤ height[i][j] ≤ 10^6 SAMPLE INPUT 5 5 1 2 2 3 5 3 2 3 4 4 2 4 5 3 1 6 7 1 4 5 5 1 1 2 4 SAMPLE OUTPUT [[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] NOTE In the example grid, cells (0, 4), (1, 3), (1, 4), and other listed cells can flow to both oceans. Each coordinate is given in zero-based indexing.","solution":"def pacific_atlantic(matrix): if not matrix or not matrix[0]: return [] m, n = len(matrix), len(matrix[0]) pacific_reachable = [[False for _ in range(n)] for _ in range(m)] atlantic_reachable = [[False for _ in range(n)] for _ in range(m)] def dfs(x, y, reachable): reachable[x][y] = True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not reachable[nx][ny] and matrix[nx][ny] >= matrix[x][y]: dfs(nx, ny, reachable) # Initialize borders for i in range(m): dfs(i, 0, pacific_reachable) dfs(i, n - 1, atlantic_reachable) for j in range(n): dfs(0, j, pacific_reachable) dfs(m - 1, j, atlantic_reachable) # Find all cells that can reach both oceans result = [] for i in range(m): for j in range(n): if pacific_reachable[i][j] and atlantic_reachable[i][j]: result.append([i, j]) # Sort the result lexicographically by row and column result.sort() return result"},{"question":"A digital artist has a palette of n distinct colors, each identified by a unique integer from 1 to n. The artist wants to use exactly k different colors to create a new masterpiece, but the order in which the colors appear does not matter and no color can be repeated in the selection. To save time, the artist decides to write a program that will compute the number of possible ways to select k colors out of n. -----Task----- Given two integers n and k, calculate the number of ways to choose k colors from a palette of n distinct colors. -----Input----- The input consists of two space-separated integers n and k. You can assume that 1 leq k leq n leq 1000. -----Output----- Output one line with one integer – the number of possible ways to choose k colors from n distinct colors. -----Examples----- Sample Input: 5 3 Sample Output: 10 Sample Input: 7 4 Sample Output: 35 Explanation: In the first example, a palette of 5 colors can create binom{5}{3} = 10 combinations of 3 colors. In the second example, a palette of 7 colors can create binom{7}{4} = 35 combinations of 4 colors.","solution":"from math import comb def calculate_combinations(n, k): Returns the number of ways to choose k different colors from a palette of n distinct colors. return comb(n, k)"},{"question":"You are given an array of n positive integers. You can perform the following operation as many times as you like (including zero times): - Choose an index i (1 ≤ i ≤ n), then choose another index j (1 ≤ j ≤ n, j ≠ i). If a_i ≤ a_j, set a_j = a_j - a_i. Your task is to determine the minimum possible value of the maximum element in the array after performing any number of operations. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the elements of the array. Output Print a single integer — the minimum possible value of the maximum element in the array. Examples Input 3 5 9 12 Output 1 Input 4 8 15 6 3 Output 1 Input 5 2 4 6 8 10 Output 2 Note In the first example, you can perform the following operations: - Choose i = 1, j = 2: subtract 5 from 9 to get the array [5, 4, 12] - Choose i = 1, j = 3: subtract 5 from 12 continuously to get [5, 4, 2] - Now, the maximum element is 5. Continue with further operations to reduce the maximum value until the minimum possible value of the maximum element in the array is reached, which eventually results in 1.","solution":"def min_max_value(n, arr): Returns the minimum possible value of the maximum element in the array. Args: n (int): Size of the array. arr (list of int): The elements of the array. Returns: int: The minimum possible value of the maximum element. from math import gcd from functools import reduce def find_gcd_of_list(nums): return reduce(gcd, nums) if n == 1: return arr[0] # Find the gcd of the entire array array_gcd = find_gcd_of_list(arr) # The minimum possible value of the maximum element in the array min_possible_value = min(arr) // array_gcd return array_gcd"},{"question":"You are tasked with creating a small system that simulates a basic checkout process in a store. The store carries a variety of items, each with a unique price. Design a class `Store` that has the following functionalities: 1. Add a new item with a specified price. 2. Remove an item if it is present in the store. 3. Calculate the total cost of items given an item list. 4. Apply a discount to the total cost if a discount code is provided (only one discount can be applied per transaction). Here are the specifications: - The `Store` class should have methods to add and remove items with their prices. - The `Store` class should have a method to calculate the total cost based on a list of items. - The `Store` class should have a method to apply a discount based on provided discount codes. The discount is a percentage and should be subtracted from the total cost. - The `Store` class should keep track of items and their prices. - If an item does not exist in the store, trying to remove it should not raise an error, and its total cost should be zero. Example: ```python # Example usage # Setting up the store with items store = Store() store.add_item(\\"apple\\", 1.0) store.add_item(\\"banana\\", 0.5) store.add_item(\\"orange\\", 0.75) # Calculating total cost without discount purchase_list = [\\"apple\\", \\"banana\\", \\"orange\\"] total = store.calculate_cost(purchase_list) print(total) # Expected output: 2.25 # Applying discount discount_code = {\\"WELCOME10\\": 10} store.add_discount(discount_code) discounted_total = store.apply_discount(total, \\"WELCOME10\\") print(discounted_total) # Expected output: 2.25 * 0.90 = 2.025 # Removing an item and re-calculating total store.remove_item(\\"banana\\") total_after_remove = store.calculate_cost(purchase_list) print(total_after_remove) # Expected output: 1.75 (since banana is not considered) ``` Constraints: - The `add_item` method should not add an item if it already exists. - Prices should be positive numbers. - Only one discount can be applied at a time. If the provided discount code does not exist or is invalid, the total cost remains unchanged. - Assume the discount codes and their percentages are provided as a dictionary to the `add_discount` method.","solution":"class Store: def __init__(self): self.items = {} self.discounts = {} def add_item(self, name, price): if name not in self.items and price > 0: self.items[name] = price def remove_item(self, name): if name in self.items: del self.items[name] def calculate_cost(self, item_list): total = 0 for item in item_list: if item in self.items: total += self.items[item] return total def add_discount(self, discount_dict): self.discounts.update(discount_dict) def apply_discount(self, total_cost, discount_code): if discount_code in self.discounts: discount_percentage = self.discounts[discount_code] total_cost -= total_cost * (discount_percentage / 100) return total_cost"},{"question":"Write a function `maxSubArraySum(arr)` that takes an array of integers `arr` and returns the sum of the largest sum contiguous subarray. For example, given the array `arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the function should return `6`, which is the sum of the subarray `[4, -1, 2, 1]` with the largest sum. Good luck!","solution":"def maxSubArraySum(arr): Function to find the sum of the largest sum contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a positive integer `num`, the task is to determine if `num` is a perfect square. If `num` is a perfect square, return its square root; otherwise, return the smallest integer greater than the square root of `num`. Your function `checkSquare` should take an integer `num` and return an array: ``` [squareRoot, true] or {squareRoot, 1} or (squareRoot, True) ``` depending on the language if `num` is a perfect square. If `num` is not a perfect square, you will return: ``` [ceilSquareRoot, false] or {ceilSquareRoot, 0} or (ceilSquareRoot, False) ``` where `ceilSquareRoot` is the smallest integer greater than the square root of `num`. # Some Examples of Return: (depend on the language) ``` checkSquare(16) # should return (4, true), # since 4 * 4 = 16 checkSquare(20) # should return (5, false), # since 4 * 4 < 20 < 5 * 5 ----- checkSquare(16) # should return [4, true], checkSquare(20) # should return [5, false], ----- checkSquare(16) # should return {4, 1}, checkSquare(20) # should return {5, 0}, ----- checkSquare(16) # should return {4, true}, checkSquare(20) # should return {5, false}, ```","solution":"import math def checkSquare(num): Determines if num is a perfect square and returns the square root. If num is a perfect square, returns (squareRoot, True). Otherwise, returns (ceilSquareRoot, False). sqrt_num = math.isqrt(num) if sqrt_num * sqrt_num == num: return (sqrt_num, True) else: return (sqrt_num + 1, False)"},{"question":"You are given an array of N integers. You need to process Q queries on this array. There are two types of queries: 1. Update the value at a specific index. 2. Find the maximum value in a specified subarray. Your task is to efficiently handle these queries. -----Input----- - The first line of the input contains two integers N and Q, the number of elements in the array and the number of queries respectively. - The second line contains N space-separated integers representing the initial values in the array. - The next Q lines each contain one of the two types of queries: - `1 X Y`: This type of query means update the element at index X to Y (1 le X le N). - `2 L R`: This type of query means find the maximum value in the subarray from index L to R (1 le L le R le N). -----Output----- For each query of type 2, output the result on a new line. -----Constraints----- - 1 le N, Q le 100,000 - 1 le A_i le 10^9 - 1 le X, Y, L, R le N -----Example Input----- 5 5 1 2 3 4 5 2 1 5 1 3 10 2 2 4 1 5 6 2 1 5 -----Example Output----- 5 10 10","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): # Build the segment tree for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i << 1], self.tree[i << 1 | 1]) def update(self, index, value): # Update the value at the given index pos = index + self.n self.tree[pos] = value while pos > 1: pos >>= 1 self.tree[pos] = max(self.tree[pos << 1], self.tree[pos << 1 | 1]) def range_query(self, left, right): # Query the maximum value in the range [left, right) left += self.n right += self.n max_val = 0 while left < right: if left & 1: max_val = max(max_val, self.tree[left]) left += 1 if right & 1: right -= 1 max_val = max(max_val, self.tree[right]) left >>= 1 right >>= 1 return max_val def process_queries(N, Q, array, queries): segment_tree = SegmentTree(array) result = [] for query in queries: q_type, x, y = query if q_type == 1: segment_tree.update(x - 1, y) elif q_type == 2: result.append(segment_tree.range_query(x - 1, y - 1 + 1)) return result"},{"question":"In the kingdom of Westeros, Tyrion Lannister, the clever dwarf, loves to play with numbers. He has a magical number sequence generator. The generator takes two integer inputs `N` and `K` and generates a sequence of length `N` where each element is the sum of the last `K` elements in the sequence. By default, the first `K` elements of the sequence are all `1`. Your task is to implement the function that generates this sequence and prints it. **Input:** - The first line contains the integer `T`, the number of test cases. - Each of the next `T` lines contains two integers `N` and `K`. **Output:** - For each test case, print the generated sequence. **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ N, K ≤ 20 **Sample Input:** ``` 2 5 2 7 3 ``` **Sample Output:** ``` 1 1 2 3 5 1 1 1 3 5 9 17 ```","solution":"def generate_sequence(N, K): Generates a sequence of length N where each element is the sum of the last K elements in the sequence. The first K elements are all 1. :param N: Length of the sequence :param K: Number of elements to sum for generating the next element in the sequence :return: The generated sequence as a list of integers if N <= 0 or K <= 0: return [] sequence = [1] * min(N, K) # First K elements are all 1 for i in range(K, N): next_val = sum(sequence[-K:]) sequence.append(next_val) return sequence def generate_sequences(test_cases): Processes multiple test cases to generate sequences. :param test_cases: list of tuples, where each tuple contains two integers N and K :return: list of lists, where each inner list is a sequence generated for the corresponding test case results = [] for N, K in test_cases: results.append(generate_sequence(N, K)) return results def process_input(T, cases): results = generate_sequences(cases) for result in results: print(\' \'.join(map(str, result)))"},{"question":"Mark is learning about data structures and is currently focused on binary trees. He is particularly interested in Balanced Binary Search Trees (BSTs) and decides to explore how many unique balanced BSTs he can construct given a certain number of nodes, {N}. A BST is balanced if, for every node in the tree, the height difference between its left and right subtrees is at most one. Mark knows that for a given number of nodes, {N}, different balanced BSTs can be constructed. Given a positive integer {T} denoting the number of test cases, and {T} additional lines each containing a positive integer {N}, help Mark determine the number of unique balanced BSTs possible with {N} nodes. As the answer can be very large, print it modulo 10^9+7. Input Format: - The first line contains a single positive integer {T}, denoting the number of test cases. - Each of the {T} subsequent lines contains a single positive integer {N} (the number of nodes). Constraints: 1leq Tleq 1000 1leq Nleq1000 Output Format: - For each test case, print the number of different unique balanced BSTs modulo 10^9+7. Sample Input: 3 3 5 10 Sample Output: 5 42 16796 Explanation: For the first test case, {N}=3, there are 5 unique balanced BSTs. These are: 1. Tree rooted with 1 having 2 as right child and 3 as right grandchild. 2. Tree rooted with 3 having 2 as left child and 1 as left grandchild. 3. Tree rooted with 2 having 1 as left child and 3 as right child. 4. Tree rooted with 2 having 3 as left child and 1 as left grandchild (if nodes are not balanced, rearrange them from above). 5. Tree rooted with 2 having 1 as right child and 3 as right grandchild (if nodes are not balanced, rearrange them from above). Similarly, for {N} = 5 and {N} = 10, the number of unique balanced BSTs you can construct are {42} and {16796} respectively.","solution":"MOD = 10**9 + 7 def num_balanced_bsts(n): Returns the number of unique balanced BSTs that can be constructed with n nodes. if n == 0 or n == 1: return 1 dp = [0] * (n + 1) dp[0], dp[1] = 1, 1 for i in range(2, n + 1): for j in range(i): dp[i] = (dp[i] + dp[j] * dp[i - j - 1]) % MOD return dp[n] def solve(test_cases): Given a list of test_cases, returns the number of unique balanced BSTs for each test case. results = [] for n in test_cases: results.append(num_balanced_bsts(n)) return results"},{"question":"DJ Girl is trying to organize an online music festival. She plans to host N different events, and she has M different time slots available. Her aim is to select exactly M events such that the sum of their durations is minimized, and no two selected events overlap. Given the start and end times of each event, help DJ Girl determine the minimum total duration of exactly M non-overlapping events she can schedule. Input: The first line of input contains an integer T denoting the number of test cases. The first line of each test case contains two space-separated integers N and M. The next N lines contain two integers each, representing the start and end times of each event. Output: For each test case, output the minimum total duration of exactly M non-overlapping events. Constraints: - 1 ≤ T ≤ 1000 - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ N - 1 ≤ start_time < end_time ≤ 10^9 SAMPLE INPUT 2 4 2 1 5 2 6 4 7 6 8 3 2 1 3 2 5 4 6 SAMPLE OUTPUT 6 4 Explanation: In the first test case, DJ Girl can select events (1, 5) and (6, 8), with total duration 4 + 2 = 6. In the second test case, DJ Girl can select events (1, 3) and (4, 6), with total duration 2 + 2 = 4.","solution":"import heapq def min_total_duration(T, test_cases): results = [] for case in test_cases: N, M, events = case events.sort(key=lambda x: x[1]) # Sort by end times def compatible(event1, event2): return event1[1] <= event2[0] # Priority queue for dynamic programming dp = [[(float(\'inf\'), -1)]*(M+1) for _ in range(N+1)] dp[0][0] = (0, -1) # 0 duration with 0 events selected initially for i in range(1, N+1): start, end = events[i-1] duration = end - start for j in range(1, M+1): dp[i][j] = dp[i-1][j] # Not selecting the i-th event previous_event_idx = dp[i-1][j-1][1] if previous_event_idx == -1 or compatible(events[previous_event_idx], (start, end)): if dp[i-1][j-1][0] + duration < dp[i][j][0]: dp[i][j] = (dp[i-1][j-1][0] + duration, i-1) optimal_duration = dp[N][M][0] results.append(optimal_duration) return results # Parse input function def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) idx = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[idx].split()) events = [] for i in range(N): start, end = map(int, lines[idx + 1 + i].split()) events.append((start, end)) test_cases.append((N, M, events)) idx += N + 1 return T, test_cases"},{"question":"Python provides a very versatile way of handling and manipulating strings and their characters. One common task is to reverse a string entirely. Here is a function that takes in a string and returns its reverse: def reverse_string(s): return s[::-1] For example: - \\"hello\\" becomes \\"olleh\\" - \\"world\\" becomes \\"dlrow\\" The aim of this task is to write a similar function but only reverse the words in a given sentence while maintaining their original order relative to each other. Function Signature: ```python def reverse_words(sentence: str) -> str: pass ``` Input Format A single line containing a sentence `sentence` with words separated by a space. Output Format A single line containing the sentence with each word reversed but in their original order. Constraints - The sentence will have at least one word. - The length of the sentence will not exceed 10^3 characters. - Each word will consist of alphanumeric characters only. Sample Input 0 ``` Hello World ``` Sample Output 0 ``` olleH dlroW ``` Sample Input 1 ``` Reverse the words in this sentence ``` Sample Output 1 ``` esreveR eht sdrow ni siht ecnetnes ```","solution":"def reverse_words(sentence: str) -> str: Reverses each word in the sentence while maintaining their original order. Args: sentence (str): The input sentence with words separated by spaces. Returns: str: The sentence with each word reversed but in original order. words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"You are given an array of integers that represents the coordinates of points in a 1-dimensional space. You can perform a teleportation move between any two points with the following cost: The cost to teleport between points at coordinates `x` and `y` is the absolute difference `|x - y|`. You need to determine the minimum cost required to bring all points to the same coordinate using any number of teleportation moves. The target coordinate must be one of the original coordinates. Input Each test contains multiple test cases. The first line contains the number of test cases `t` (1 ≤ t ≤ 100). The first line of each test case contains an integer `n` (1 ≤ n ≤ 10^5) — the number of points. The second line of each test case contains `n` integers `x_1, x_2, ..., x_n` (−10^9 ≤ x_i ≤ 10^9) — the coordinates of the points. Output For each test case, output one integer — the minimum cost required to bring all points to the same coordinate. Example # Input 2 3 1 3 5 4 -1 0 1 2 # Output 4 4 # Explanation For the first test case, you can bring all points to the coordinate `3` with a move cost of `|1 - 3| + |3 - 3| + |5 - 3| = 2 + 0 + 2 = 4`. For the second test case, you can bring all points to the coordinate `0` or `1` with a total cost of `|-1 - 0| + |0 - 0| + |1 - 0| + |2 - 0| = 1 + 0 + 1 + 2 = 4`.","solution":"def min_cost_to_teleport_all_points(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] points = test_cases[i][1] points.sort() median = points[n // 2] if n % 2 == 1 else points[n // 2 - 1] cost = sum(abs(p - median) for p in points) results.append(cost) return results"},{"question":"Alice is passionate about organizing code competitions. She always aims to create interesting challenges for the participants. She has a series of distinct problems that she wants to assign to teams in such a way that no two consecutive teams receive the same problem. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100) — the number of problems. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — the difficulties of the problems. The third line contains an integer k (1 ≤ k ≤ 100) — the number of teams. -----Output----- Print k integers, where the i-th integer is the index (1-based) of the problem assigned to the i-th team such that no two consecutive teams receive the same problem. If multiple valid assignments exist, any of them will be accepted. -----Examples----- Input 5 3 1 4 1 5 3 Output 1 2 3 Input 3 2 2 3 4 Output 1 3 1 2 -----Note----- In the first test case, we need to assign 3 problems to 3 teams. One valid solution is to assign problems at indices 1, 2, and 3. In the second test case, we need to assign 4 problems to 4 teams. One valid solution is to assign problems at indices 1, 3, 1, and 2.","solution":"def assign_problems(n, problems, k): Assigns problems to teams such that no two consecutive teams receive the same problem. Parameters: n (int): The number of problems. problems (list): A list of n integers representing the difficulties of the problems. k (int): The number of teams. Returns: list: A list of k integers, the indices of the problems assigned to the teams. result = [0] * k result[0] = 1 prev_index = 1 for i in range(1, k): for j in range(1, n + 1): if j != prev_index: result[i] = j prev_index = j break return result"},{"question":"In a city of ByteLand, there are n people, each with a unique name. These individuals have friendships represented as an undirected graph, where each person is a node and each friendship is an edge between two nodes. ByteLand is about to host a large festival, and the organizers want to analyze the \\"reach\\" of each person. The reach of a person refers to the number of distinct people they can communicate with, either directly or indirectly, through the chain of friendships. Given a list of friendships, your task is to compute the size of the largest reach among all individuals in ByteLand. In other words, you need to find the size of the largest connected component in the undirected graph formed by the people and their friendships. -----Input----- The first line contains an integer n (1 ≤ n ≤ 500). The second line contains an integer m (0 ≤ m ≤ n*(n-1)/2), the number of friendships. Each of the next m lines contain two distinct integers u and v (1 ≤ u, v ≤ n), representing a friendship between person u and person v. -----Output----- Print the size of the largest reach in ByteLand. -----Examples----- Input 5 4 1 2 2 3 3 4 5 5 Output 4 Input 3 0 Output 1 -----Note----- In the first example, the largest connected component has the individuals {1, 2, 3, 4}, resulting in a reach of 4. Person 5 is isolated. In the second example, each person is isolated, so the largest reach is 1.","solution":"def largest_reach(n, m, friendships): from collections import defaultdict, deque neighbors = defaultdict(list) # Create adjacency list for u, v in friendships: neighbors[u].append(v) neighbors[v].append(u) visited = set() def bfs(start): queue = deque([start]) visited.add(start) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in neighbors[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return count largest_component = 0 for person in range(1, n + 1): if person not in visited: component_size = bfs(person) largest_component = max(largest_component, component_size) return largest_component"},{"question":"Arya is learning about prime numbers and came up with a sequence of integers. She wants to know if this sequence can be arranged into a special format. Specifically, she wants to rearrange the sequence such that all prime numbers appear first in ascending order, followed by all non-prime numbers in descending order. -----Input----- The input consists of two lines: - The first line contains an integer n (1 le n le 1000), the number of integers in the sequence. - The second line contains n space-separated integers a_1, a_2, ..., a_n (-10000 le a_i le 10000). -----Output----- Print a single line containing the rearranged sequence such that all prime numbers appear first (in ascending order), followed by all non-prime numbers (in descending order). If there are no prime numbers, only the non-prime numbers should be printed in descending order. -----Examples----- Sample Input 1: 6 4 7 9 5 2 10 Sample Output 1: 2 5 7 10 9 4 Sample Input 2: 5 -10 -5 0 1 6 Sample Output 2: 6 1 0 -5 -10","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def special_sort(n, sequence): primes = [num for num in sequence if is_prime(num)] non_primes = [num for num in sequence if not is_prime(num)] primes.sort() non_primes.sort(reverse=True) return primes + non_primes"},{"question":"Write a function that determines the maximum difference between any two elements in a list of integers after removing exactly one element from the list. Constraints * 2 ≤ n ≤ 10^5 * -10^9 ≤ ai ≤ 10^9 Input n a1 a2 ... an The first line contains an integer n, the number of elements in the list. The second line contains n space-separated integers representing the elements of the list. Output Print the maximum difference between any two elements in the list after removing exactly one element. Examples Input 4 1 2 3 4 Output 3 Input 5 10 -2 5 3 8 Output 12","solution":"def max_difference_after_removal(n, arr): Returns the maximum difference between any two elements in the list after removing exactly one element from the list. if n <= 2: return 0 # Edge case when the list has only two elements min_val = float(\'inf\') max_val = float(\'-inf\') # Calculate overall min and max values for num in arr: min_val = min(min_val, num) max_val = max(max_val, num) # Calculate the potential max differences after removal of each element max_diff = float(\'-inf\') for num in arr: current_min = min_val if num != min_val else float(\'inf\') current_max = max_val if num != max_val else float(\'-inf\') for other_num in arr: if other_num != num: current_min = min(current_min, other_num) current_max = max(current_max, other_num) max_diff = max(max_diff, current_max - current_min) return max_diff"},{"question":"You are given a list of N integers. Your task is to determine the smallest positive integer (greater than 0) that does not occur in the list. ------ Input Format ------ - The first line of the input contains a single integer T — the number of test cases. - For each test case: - The first line contains a single integer N — the length of the list. - The second line contains N space-separated integers. ------ Output Format ------ For each test case, output the smallest positive integer that does not occur in the list. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^6 ≤ text{list element} ≤ 10^6 The sum of N over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 3 5 2 3 7 6 8 4 -1 -3 4 2 3 1 2 3 ------ Sample Output 1 ------ 1 1 4 ------ Explanation 1 ------ Test case 1: The list is [2, 3, 7, 6, 8]. The smallest positive integer greater than 0 that does not occur in the list is 1. Test case 2: The list is [-1, -3, 4, 2]. The smallest positive integer greater than 0 that does not occur in the list is 1. Test case 3: The list is [1, 2, 3]. The smallest positive integer greater than 0 that does not occur in the list is 4.","solution":"def smallest_missing_positive_integer(t, test_cases): result = [] for i in range(t): n, lst = test_cases[i] nums = set(lst) smallest_missing = 1 while smallest_missing in nums: smallest_missing += 1 result.append(smallest_missing) return result"},{"question":"Given a list of integers, write a function that returns the indices of all the local maxima in the list. A local maximum is an element that is strictly greater than its neighbors. For example: ```Python find_local_maxima([1, 3, 2, 4, 1, 5, 1]) = [1, 3, 5] because 3 is greater than 1 and 2, 4 is greater than 2 and 1, and 5 is greater than 1. find_local_maxima([1, 2, 3, 4, 5]) = [] because there are no local maxima in the list. ``` Note: The first and the last element can never be local maxima since they do not have both neighbors. More examples in the test cases. Happy coding!","solution":"def find_local_maxima(lst): Returns the indices of all the local maxima in the list. A local maximum is an element that is strictly greater than its neighbors. local_maxima_indices = [] for i in range(1, len(lst) - 1): if lst[i] > lst[i - 1] and lst[i] > lst[i + 1]: local_maxima_indices.append(i) return local_maxima_indices"},{"question":"Given a string S consisting of only lowercase letters. The task is to count the frequency of the most frequent character in the string. Example 1: Input: S = \\"abcaac\\" Output: 3 Explanation: The character \'a\' appears 3 times, which is the highest frequency. Example 2: Input: S = \\"bbbb\\" Output: 4 Explanation: The character \'b\' appears 4 times, which is the highest frequency. Your Task: You don\'t need to read input or print anything. Your task is to complete the function highestFrequencyCharCount() which takes the string S as input and returns the frequency of the most frequent character in the string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) (Considering a constant space hashmap for 26 letters) Constraints: 1 <= |S| <= 10^{3} S contains only lowercase English letters.","solution":"def highestFrequencyCharCount(S): This function takes a string S consisting of only lowercase letters and returns the frequency of the most frequent character in the string. # Initialize a dictionary to count the frequency of each character frequency = [0] * 26 # There are 26 lowercase English letters # Count the frequency of each character for char in S: frequency[ord(char) - ord(\'a\')] += 1 # Return the maximum frequency return max(frequency)"},{"question":"You are designing a parking lot for a new shopping mall. The parking lot consists of multiple parking sections arranged in a grid pattern. You have full flexibility with the design, but you want to maximize efficiency by ensuring that the total number of parking spaces is a perfect square. To help with planning, you need to calculate the number of sections along the length (`l`) and width (`w`) of the parking lot grid so that the product of the number of sections along the length and width equals a given perfect square `n`. Given the perfect square `n`, find two positive integers `l` and `w` such that `n = l * w`, or print \\"impossible\\" if no such integers exist. -----Input----- - One line containing a single integer `n` representing a perfect square such that 1 leq n leq 10^6. It is guaranteed that `n` is a perfect square. -----Output----- Print two positive integers `l` and `w` such that `n = l * w`, or print \\"impossible\\" if no such integers exist. If there are multiple valid solutions, you may output any one of them. -----Examples----- Sample Input 1: 36 Sample Output 1: 6 6 Sample Input 2: 49 Sample Output 2: 7 7 Sample Input 3: 100 Sample Output 3: 10 10","solution":"def find_parking_sections(n): Finds two factors of n such that n = l * w and returns them. If no such factors exist, returns \\"impossible\\". from math import isqrt for i in range(1, isqrt(n) + 1): if n % i == 0: return i, n // i return \\"impossible\\""},{"question":"Write a function that determines if a string can be formed using a set of given words. Each word can be used multiple times. Your function should return True if the string can be formed, otherwise False. Input: * A string \'s\' which needs to be formed. * A list of strings \'words\', which contains the words that can be used to form the string \'s\'. Note: * 1 ≤ |s| ≤ 10^3 * 1 ≤ |words[i]| ≤ 10^3 * The length of the list \'words\' does not exceed 100. * All characters in the input are lowercase letters (a-z). Function signature: ``` def can_form_string(s: str, words: List[str]) -> bool: ``` Examples: ``` s = \\"applepie\\" words = [\\"apple\\", \\"pie\\"] Output: True ``` ``` s = \\"appleapple\\" words = [\\"apple\\", \\"pie\\"] Output: True ``` ``` s = \\"applepiedonut\\" words = [\\"apple\\", \\"pie\\"] Output: False ``` Explanation: In the first example, \\"applepie\\" can be formed by concatenating \\"apple\\" and \\"pie\\". In the second example, \\"appleapple\\" can be formed by concatenating \\"apple\\" two times. In the third example, \\"applepiedonut\\" cannot be formed with the given words.","solution":"from typing import List def can_form_string(s: str, words: List[str]) -> bool: # Create a set from the list of words for quick lookup word_set = set(words) # Create a DP array to store results. dp[i] will be True if s[0:i] can be formed. dp = [False] * (len(s) + 1) dp[0] = True # Empty string can always be formed # Dynamic programming to fill the dp array for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"~~~ Write a function that takes in a string `s` and an integer `k`, and returns a new string where every `k`-th character is capitalized. # Constraints: * The input string `s` will only contain alphabetic characters and will be in lowercase. * The integer `k` will be a positive integer and less than or equal to the length of the string `s`. * If `k` is greater than the length of the string, return the original string. # Examples: ``` s = \\"abcdefg\\", k = 2 Output: \\"aBcDeFg\\" s = \\"abcdefghij\\", k = 3 Output: \\"abCdeFghIj\\" s = \\"hello\\", k = 6 Output: \\"hello\\" ``` ~~~","solution":"def capitalize_kth_character(s, k): Returns a new string where every k-th character in the input string s is capitalized. :param s: Input string consisting of lowercase alphabetic characters. :param k: The interval of characters to capitalize. :return: A new string with every k-th character capitalized. if k > len(s): return s result = [] for i in range(len(s)): if (i + 1) % k == 0: result.append(s[i].upper()) else: result.append(s[i]) return \'\'.join(result)"},{"question":"Landsville is a town with several parks, each uniquely numbered from 1 to P. Emily is responsible for managing the connectivity between these parks through pathways. A pathway can only connect two parks directly. Landsville undergoes frequent construction, so the connectivity between parks can change over time. Emily wants to ensure that the town is designed such that people can travel between any two parks through a series of pathways without any isolated parks. She needs your help to determine if the current connectivity setup meets this requirement. Moreover, she plans to test various configurations of pathways to find a minimal number of pathways that can still ensure complete connectivity between all parks. Your task is to help Emily by implementing a function that determines if the current pathway configuration forms a fully connected graph (i.e., every park can be reached from any other park). Additionally, you need to determine the minimal number of pathways required such that the town remains fully connected. ----- Input ----- The first line of input contains an integer t (1 ≤ t ≤ 10), the number of test cases. Each test case starts with an integer P (2 ≤ P ≤ 1000), the number of parks, followed by an integer C (1 ≤ C ≤ 2000), the number of currently configured pathways. The next C lines each contain two space-separated integers u and v (1 ≤ u, v ≤ P and u ≠ v), indicating that there is a pathway between parks u and v. ----- Output ----- For each test case, print \\"YES\\" if the parks are fully connected, otherwise print \\"NO\\". Additionally, if the answer is \\"YES\\", print the minimal number of pathways required to maintain the connectivity. ----- Sample Input 1 ----- 2 5 4 1 2 2 3 3 4 4 5 4 2 1 2 3 4 ----- Sample Output 1 ----- YES 4 NO","solution":"from collections import defaultdict def is_connected(P, pathways): graph = defaultdict(list) for u, v in pathways: graph[u].append(v) graph[v].append(u) visited = [False] * (P + 1) def dfs(node): stack = [node] while stack: curr = stack.pop() for neighbor in graph[curr]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) visited[1] = True dfs(1) return all(visited[1:]) def min_pathways_to_connect(P): return P - 1 def solve(t, cases): results = [] for P, C, pathways in cases: if is_connected(P, pathways): results.append(f\\"YES {min_pathways_to_connect(P)}\\") else: results.append(\\"NO\\") return results def landsville_connectivity(t, cases): return solve(t, cases)"},{"question":"You are given a sequence of integers representing the heights of buildings in a skyline. Your task is to determine the total amount of water that can be trapped between the buildings after it rains. The water trapped is defined as the unit of water that can be accumulated between two taller buildings with shorter buildings between them. Essentially, you need to find how much water can be collected on top of each building. -----Input----- Input contains a sequence of integers where each integer represents the height of a building. The sequence is non-empty and has at least one building. The number of buildings, n, is between 1 and 10^6. -----Output----- Output one integer: the total amount of water that can be trapped between the given buildings after it rains. -----Examples----- Input [0,1,0,2,1,0,1,3,2,1,2,1] Output 6 Input [4,2,0,3,2,5] Output 9 -----Note----- In the first test case, the buildings are represented as [0,1,0,2,1,0,1,3,2,1,2,1], and the water trapped between those buildings is 6 units. The water collected at each position is: [0,0,1,0,1,2,1,0,0,1,0,0]. In the second test case, the buildings are represented as [4,2,0,3,2,5]. The water trapped between these buildings is 9 units. The breakdown of water collected at each position is: [0,2,4,1,2,0].","solution":"def trap(height): Given a list of integers representing the height of buildings, calculate the total amount of water that can be trapped after raining. :param height: List of integers representing the height of buildings :return: Integer representing the total amount of trapped water if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n # Fill left max height array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right max height array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the total water trapped water = 0 for i in range(n): water += min(left_max[i], right_max[i]) - height[i] return water"},{"question":"You are given two arrays of integers, nums1 and nums2, representing two sets of integers. Write a function to return the intersection of these two arrays, where each element in the result must be unique. The result can be in any order. Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [9,4] Note: - Each element in the result should appear as many times as it shows in both arrays. - The result can be in any order. - The provided arrays are not necessarily sorted. - Use built-in set operations to solve this problem efficiently.","solution":"def intersection(nums1, nums2): Returns the intersection of two arrays, where each element in the result must be unique. set1 = set(nums1) set2 = set(nums2) return list(set1 & set2)"},{"question":"Rina has a string S containing only lowercase English letters. She wants to find the length of the smallest substring that contains all distinct characters present in S. -----Constraints----- - 1 leq |S| leq 200 - S contains only lowercase English letters, i.e., \'a\' to \'z\'. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the length of the smallest substring containing all distinct characters in S. -----Sample Input----- abac -----Sample Output----- 3 Explanation: The substring \\"bac\\" or \\"aca\\" contains all distinct characters \'a\', \'b\', and \'c\'.","solution":"def min_length_substring_with_all_chars(s): Returns the length of the smallest substring of `s` that contains all distinct characters present in `s`. if not s: return 0 from collections import Counter # Get the set of distinct characters in the input string distinct_characters = set(s) required_chars_count = len(distinct_characters) # Sliding window approach to find the smallest substring containing all distinct characters left = 0 min_length = float(\'inf\') current_window_count = Counter() distinct_count_in_window = 0 for right in range(len(s)): char_right = s[right] current_window_count[char_right] += 1 if current_window_count[char_right] == 1: distinct_count_in_window += 1 while distinct_count_in_window == required_chars_count: min_length = min(min_length, right - left + 1) char_left = s[left] current_window_count[char_left] -= 1 if current_window_count[char_left] == 0: distinct_count_in_window -= 1 left += 1 return min_length"},{"question":"Given a list of integers, your task is to find the maximum sum of a contiguous subarray with the condition that no two adjacent integers in the subarray were adjacent in the original array. In other words, if you pick an element from index `i`, you cannot pick elements from indices `i-1` or `i+1`. Return the maximum sum that can be achieved by such a subarray. Example Given the array arr = text{[2, 3, 4, 5, 2]}, the maximum sum that can be achieved is 9 by picking the elements 2, 4, 2. Function Description Complete the `maxNonAdjacentSum` function below. maxNonAdjacentSum has the following parameter(s): - A list of integers: `arr` Returns - An integer: The maximum sum of a subarray with no two adjacent elements Input Format A single line containing space-separated integers representing the array `arr`. Constraints - 1 leq text{len(arr)} leq 10^5 - -10^4 leq text{arr}[i] leq 10^4 for 0 leq i < text{len(arr)} Sample Input 0 3 2 7 10 Sample Output 0 13 Explanation 0 The maximum sum is 13, obtained by picking 3 and 10. Sample Input 1 3 2 5 10 7 Sample Output 1 15 Explanation 1 The maximum sum is 15, obtained by picking 3, 5, and 7. Sample Input 2 5 5 10 100 10 5 Sample Output 2 110 Explanation 2 The maximum sum is 110, obtained by picking 5, 100, and 5.","solution":"def maxNonAdjacentSum(arr): Returns the maximum sum of a subarray with no two adjacent elements. :param arr: List of integers :return: Maximum sum of non-adjacent elements if not arr: return 0 if len(arr) == 1: return arr[0] incl = arr[0] excl = 0 for i in range(1, len(arr)): new_excl = max(incl, excl) incl = excl + arr[i] excl = new_excl return max(incl, excl)"},{"question":"Given a string consisting of lowercase letters from `\'a\'` to `\'z\'`, your task is to determine if the string is a happy string. A string is considered \\"happy\\" if there are no two adjacent characters that are the same. Write a function `is_happy_string` that takes in a string `s` and returns a boolean indicating whether the string is happy. Requirements: 1. The function should be efficient with a linear time complexity. 2. An empty string is considered as a happy string. Examples: ``` is_happy_string(\\"abb\\") = False is_happy_string(\\"abcdefg\\") = True is_happy_string(\\"aabbcc\\") = False is_happy_string(\\"ababab\\") = True is_happy_string(\\"\\") = True ``` Function Signature: ```python def is_happy_string(s: str) -> bool: # your code here ```","solution":"def is_happy_string(s: str) -> bool: Returns True if the string is a happy string, False otherwise. A happy string has no two adjacent characters that are the same. if not s: return True for i in range(1, len(s)): if s[i] == s[i-1]: return False return True"},{"question":"Aria is organizing a competition where participants need to build the tallest lego tower with specific constraints. Each participant receives a set of lego blocks, each block having a given height. However, only a continuous segment of blocks can be used to build the tower. The goal is to maximize the total height of the tower while ensuring the number of blocks used does not exceed a given limit. Your task is to write a program that finds this maximum height for any given participant. Given the list of heights of the lego blocks and the maximum number of blocks allowed, determine the maximum possible height of the tower. **Input:** - List of integers representing the heights of the lego blocks. - An integer representing the maximum number of blocks allowed. **Output:** - A single integer representing the maximum height of the lego tower. **Example Input:** ``` [1, 3, 2, 4, 5] 3 ``` **Example Output:** ``` 11 ``` **Explanation:** By selecting the segment [2, 4, 5], the total height is 11, which is the maximum possible height with at most 3 blocks.","solution":"def max_tower_height(heights, max_blocks): Determines the maximum height of the lego tower using at most max_blocks continuous blocks. :param heights: List of integers representing heights of the lego blocks. :param max_blocks: An integer representing the maximum number of blocks allowed. :return: An integer representing the maximum height of the lego tower. n = len(heights) if n == 0 or max_blocks == 0: return 0 # Initialize the maximum height max_height = 0 # Sliding window to find the maximum sum of at most max_blocks continuous blocks current_sum = 0 for i in range(n): current_sum += heights[i] if i >= max_blocks: current_sum -= heights[i - max_blocks] max_height = max(max_height, current_sum) return max_height"},{"question":"Calculate the sum of the prime numbers in the range [1, N] inclusive. Constraints * 2 leq N leq 10^6 * All values in input are integers. Input Input is given from Standard Input in the following format: N Output Print the sum of the prime numbers within the given range. Examples Input 10 Output 17 Input 30 Output 129","solution":"def sum_of_primes(N): Returns the sum of all prime numbers in the range [1, N] inclusive. if N < 2: return 0 sieve = [True] * (N + 1) sieve[0] = sieve[1] = False for start in range(2, int(N**0.5) + 1): if sieve[start]: for multiples in range(start*start, N + 1, start): sieve[multiples] = False return sum(index for index, is_prime in enumerate(sieve) if is_prime)"},{"question":"There is a network of computers connected by bidirectional cables. Each cable has a certain latency associated with it, represented as an integer. The network can be represented as a graph where each computer is a node, and each cable is an edge with an associated latency. Given the representation of the graph and two specific nodes, you need to determine the minimum latency path between these two nodes. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), where `n` is the number of computers and `m` is the number of cables. The next `m` lines contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 0 ≤ w ≤ 10000), where `u` and `v` are the endpoints of the cable and `w` is the latency of the cable. The last line contains two integers `src` and `dest` (1 ≤ src, dest ≤ n), where `src` is the starting computer and `dest` is the destination computer. Output Output a single integer which is the minimum latency from the starting computer to the destination computer. If there is no path between the given computers, output `-1`. Examples Input 5 6 1 2 10 1 3 20 2 3 5 2 4 1 3 4 15 4 5 5 1 5 Output 16 Input 3 3 1 2 1 1 3 4 2 3 2 1 3 Output 3 Input 4 2 1 2 7 3 4 10 1 4 Output -1","solution":"import heapq def minimum_latency(n, m, connections, src, dest): from collections import defaultdict import heapq graph = defaultdict(list) for u, v, w in connections: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start, end): heap = [(0, start)] distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 visited = set() while heap: current_dist, current_node = heapq.heappop(heap) if current_node in visited: continue visited.add(current_node) if current_node == end: return current_dist for neighbor, weight in graph[current_node]: if neighbor in visited: continue new_dist = current_dist + weight if new_dist < distances[neighbor]: distances[neighbor] = new_dist heapq.heappush(heap, (new_dist, neighbor)) return -1 result = dijkstra(src, dest) return result"},{"question":"In a company’s HR system, each employee is represented by an employee ID number. Additionally, every employee except the highest-ranking one has a manager who is also an employee, identified by their own employee ID. The company\'s structure forms a hierarchy similar to a tree, where each employee (except the top one) has a unique immediate manager. Given the relationships between employees and their managers, your task is to find the number of distinct levels in the hierarchy, starting from the topmost employee at level 1. A level in the hierarchy consists of all employees who are the same number of steps away from the topmost employee. Function Description Complete the function countHierarchyLevels in the editor below. ```python def countHierarchyLevels(n, relations): # Your code here ``` countHierarchyLevels has the following parameters: - int n: integer, the number of employees. - int relations[n-1][2]: a 2D array of integer pairs where each element is [x, y], representing that employees y reports directly to x. Returns - int: the number of distinct levels in the hierarchy. Input Format - The first line contains an integer n, the number of employees. - Each of the next n-1 lines contains two space-separated integers x and y, indicating the manager relationship where employee y reports to employee x. Constraints - (2 leq n leq 10^5) - 1 ≤ x, y ≤ n - Each employee except the topmost one has exactly one manager. Sample Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 ``` Sample Output ``` 3 ``` Explanation In this sample case, employee 1 is the topmost employee (level 1). Employees 2 and 3 are directly managed by employee 1, thus being on level 2. Employees 4, 5, 6, and 7 are managed by employees 2 or 3, therefore they are on level 3. Hence, there are 3 distinct levels in the hierarchy.","solution":"def countHierarchyLevels(n, relations): from collections import defaultdict, deque # Create an adjacency list to represent the tree structure tree = defaultdict(list) for manager, employee in relations: tree[manager].append(employee) # Find the root (topmost employee) all_employees = set(range(1, n + 1)) for manager, employee in relations: all_employees.discard(employee) root = all_employees.pop() # Use BFS to determine the depth of each level queue = deque([root]) levels = 0 while queue: levels += 1 for _ in range(len(queue)): current_employee = queue.popleft() for subordinate in tree[current_employee]: queue.append(subordinate) return levels"},{"question":"Given an integer array of size N, you have to find out the sum of all elements in the array that are not prime numbers. It\'s guaranteed that the array size N will be between 1 and 1000, and each element in the array will be between 1 and 10000. -----Input----- The first line of input contains an integer T (1 ≤ T ≤ 100), the number of test cases. The first line of each test case contains an integer N (1 ≤ N ≤ 1000). The second line of each test case contains N integers. -----Output----- For each test case, output a single line containing the sum of non-prime elements in the array. -----Example----- Input: 2 5 1 2 3 4 5 4 20 22 25 27 Output: 10 94","solution":"def is_prime(n): Returns True if the number n is prime, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_non_prime_numbers(arr): Returns the sum of non-prime numbers in the array. return sum(x for x in arr if not is_prime(x)) def process_test_cases(test_cases): Given multiple test cases, this function processes all and returns a list of results. results = [] for case in test_cases: N, array = case result = sum_of_non_prime_numbers(array) results.append(result) return results"},{"question":"Sophia the Squirrel loves to collect acorns in the forest. She stores them in a large tree, and each branch of the tree has a specific number of acorns. The branches are arranged in a straight line and are sequentially numbered from 1 to n. Sometimes, Sophia likes to count how many acorns she has in a specific range of branches. Can you help her with that? You are given an array a of length n, where a[i] represents the number of acorns on the i-th branch. You need to answer q queries of the form (li, ri) which ask for the sum of acorns from branch li to branch ri inclusive. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of branches in the tree. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the number of acorns on each branch. The third line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the next q lines contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the range of branches for the query. Output Print q integers, each being the answer to the respective query, representing the total number of acorns in the range from li to ri inclusive. SAMPLE INPUT 5 3 1 4 1 5 3 1 3 2 5 1 5 SAMPLE OUTPUT 8 11 14","solution":"def acorn_sums(n, acorns, queries): # Precompute prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + acorns[i - 1] # Answer each query using the prefix sums results = [] for (li, ri) in queries: results.append(prefix_sums[ri] - prefix_sums[li - 1]) return results"},{"question":"Write a function that takes as input a string of lowercase Latin letters and determines whether it can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. Input The input consists of a single line containing a string of lowercase Latin letters. The length of the string is between 1 and 100, inclusive. Output Print \\"YES\\" (without quotes) if the input string can be rearranged to form a palindrome. Otherwise, print \\"NO\\" (without quotes). Examples Input aabb Output YES Input abc Output NO","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. from collections import Counter # Count frequencies of each character counts = Counter(s) # Calculate how many characters have an odd count odd_count = sum(1 for count in counts.values() if count % 2 != 0) # For a string to be rearranged into a palindrome, # there must be at most one character with an odd count. return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a city map represented as an undirected graph consisting of `n` nodes (intersections) and `m` edges (roads). Each road has a certain non-negative length `l`. Your task is to determine the shortest path from a given starting intersection `s` to a given destination intersection `d`. Input The first line of input contains three space-separated integers `n`, `m`, and `s` (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^5, 1 ≤ s ≤ n), the number of intersections, the number of roads, and the starting intersection. Each of the next `m` lines contains three space-separated integers `u`, `v`, and `l` (1 ≤ u, v ≤ n, 0 ≤ l ≤ 10^4), representing a road between intersections `u` and `v` with length `l`. Intersections are labeled from `1` to `n`. The last line contains an integer `d` (1 ≤ d ≤ n), representing the destination intersection. Output Output a single integer — the length of the shortest path from intersection `s` to intersection `d`. If there is no path, print `-1`. Examples Input 5 7 1 1 2 3 1 3 1 2 4 5 3 4 2 2 5 4 4 5 1 1 4 10 5 Output 4 Input 4 2 1 1 2 1 3 4 2 4 Output -1 Note In the first test case, the shortest path from intersection `1` to intersection `5` is `1 -> 3 -> 4 -> 5` with total length `4`. In the second test case, there is no path from intersection `1` to intersection `4`.","solution":"import heapq import sys def shortest_path(n, m, s, edges, d): Returns the length of the shortest path from intersection s to intersection d or -1 if there is no path. Parameters ---------- n : int Number of intersections m : int Number of roads s : int Starting intersection edges : list of tuples Each tuple (u, v, l) represents a road between intersections u and v with length l d : int Destination intersection Returns ------- int Length of the shortest path from s to d, or -1 if there is no path graph = {i: [] for i in range(1, n + 1)} for u, v, l in edges: graph[u].append((v, l)) graph[v].append((u, l)) # Dijkstra\'s algorithm heap = [(0, s)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 visited = set() while heap: current_distance, u = heapq.heappop(heap) if u in visited: continue visited.add(u) for v, length in graph[u]: distance = current_distance + length if distance < distances[v]: distances[v] = distance heapq.heappush(heap, (distance, v)) return distances[d] if distances[d] != float(\'inf\') else -1"},{"question":"Julia is an experienced software developer and she is building a custom-built search engine for her company. She is working on optimizing search queries for fast response times. The search system she is implementing uses a dictionary-like data structure to store and search words. However, to improve search efficiency, she wants to build a prefix tree (trie) that stores a given list of words and allows for efficient prefix search. Julia needs to design a function that, given a list of words, constructs the trie. Furthermore, she should be able to query the trie to check if any words in the trie start with a given prefix. -----Class Definition----- Implement a class `Trie` with the following methods: 1. `__init__()` - Initializes the trie object. 2. `insert(word: str) -> None` - Inserts a word into the trie. 3. `startsWith(prefix: str) -> bool` - Returns `True` if there is any word in the trie that starts with the given prefix, otherwise returns `False`. -----Input----- - When calling `insert(word: str)`, the `word` is a string of lowercase English letters (1 <= `len(word)` <= 100). - When calling `startsWith(prefix: str)`, the `prefix` is a string of lowercase English letters (1 <= `len(prefix)` <= 100). - There will be at most 10^4 calls combined to `insert` and `startsWith`. -----Output----- - For each `startsWith(prefix: str)` call, return a boolean indicating if there is any word in the trie with the given prefix. -----Example----- ```python # Example usage: trie = Trie() trie.insert(\\"apple\\") print(trie.startsWith(\\"app\\")) # Outputs: True print(trie.startsWith(\\"apl\\")) # Outputs: False trie.insert(\\"apricot\\") print(trie.startsWith(\\"apr\\")) # Outputs: True ``` -------Note------- To maintain the efficiency of the operations, use a Trie (prefix tree) data structure.","solution":"class TrieNode: def __init__(self): self.children = {} self.is_end_of_word = False class Trie: def __init__(self): self.root = TrieNode() def insert(self, word: str) -> None: node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.is_end_of_word = True def startsWith(self, prefix: str) -> bool: node = self.root for char in prefix: if char not in node.children: return False node = node.children[char] return True"},{"question":"You are an aspiring artist and you’ve decided to practice your talent by creating a series of canvases. Each of your canvases can be represented as a rectangular grid of pixels, with dimensions N x M. You want to fill your canvas with a special pattern made up of concentric layers (or borders) of different colors. Your task is to determine the number of distinct color layers you can fit into a given canvas. For a grid with dimensions N x M, a layer is considered a border that goes around the grid. The outermost layer is layer 1, the next innermost border is layer 2, and so on, until you reach the center of the grid. If the grid has even dimensions, the smallest possible layer could be of size 2x2, and for odd dimensions, it could be a 1x1 at the very center. Given the dimensions N and M, calculate the number of distinct layers that can fit into the canvas grid. Input consists of T in the first line, which is the total number of test cases to be processed. Followed by T lines of inputs. Each testcase consists of values N and M which are the dimensions of the canvas. Output the number of distinct layers for each case in a new line. 1 ≤ T ≤ 100 1 ≤ N, M ≤ 10^5 SAMPLE INPUT 3 5 4 4 4 6 3 SAMPLE OUTPUT 2 2 1","solution":"def count_layers(T, dimensions): Given the number of test cases and the respective dimensions of canvases, return the number of distinct layers for each canvas. Parameters: T : int : Number of test cases dimensions : list of tuples : List containing tuples (N, M) denoting the dimensions of each canvas Returns: list : Number of distinct layers for each test case result = [] for N, M in dimensions: layers = min(N, M) // 2 result.append(layers) return result # Handling input and output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) dimensions = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(T)] results = count_layers(T, dimensions) for res in results: print(res)"},{"question":"You are given an array of n integers and an integer k. Your task is to reorder the integers of the array in such a way that the sum of every adjacent pair of elements is not divisible by k. If it is not possible to reorder the array to satisfy the condition, return -1. -----Input----- The first line of input contains an integer n (1 leq n leq 100) and an integer k (1 leq k leq 100) — the number of elements in the array and the divisor. The second line contains n integers (1 leq text{array}[i] leq 100) — the elements of the array. -----Output----- If it is possible to reorder the array to satisfy the condition, print the reordered array. If there are multiple answers, you may print any of them. If it is not possible, return -1. -----Examples----- Input 4 3 1 4 2 3 Output 4 1 3 2 Input 5 4 1 2 3 4 5 Output 1 3 2 5 4 Input 3 2 2 4 6 Output -1","solution":"from itertools import permutations def reorganize_array(n, k, arr): Reorganizes the array such that the sum of every adjacent pair of elements is not divisible by k. If not possible, returns -1. for perm in permutations(arr): valid = True for i in range(n-1): if (perm[i] + perm[i+1]) % k == 0: valid = False break if valid: return list(perm) return -1"},{"question":"Given a circular array of integers, find the maximum sum of any contiguous subarray. The circular array means that the end of the array wraps around to the beginning. Your task is to implement the function `maxCircularSubarraySum()` which takes the integer array `arr` and its length `n` as input parameters and returns the maximum possible sum of a contiguous subarray in the circular array. Example 1: Input: arr = [8, -1, 3, 4], n = 4 Output: 15 Explanation: The subarray [3, 4, 8] has the maximum contiguous subarray sum of 15. Example 2: Input: arr = [-4, 5, 1, 0], n = 4 Output: 6 Explanation: The subarray [5, 1, 0] has the maximum contiguous subarray sum of 6. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxCircularSubarraySum(arr, n)` which takes the array `arr` and its length `n` as input parameters and returns the maximum sum of a contiguous subarray in the circular array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^4 -10^6 ≤ arr[i] ≤ 10^6","solution":"def maxCircularSubarraySum(arr, n): def kadane(arr): max_end_here = max_so_far = arr[0] for x in arr[1:]: max_end_here = max(x, max_end_here + x) max_so_far = max(max_so_far, max_end_here) return max_so_far max_kadane = kadane(arr) # Calculate total sum of the array total_sum = sum(arr) # Invert the array for finding minimum sum using modified Kadane\'s algorithm for i in range(n): arr[i] = -arr[i] # Sum of non-wrapping subarray that will be minimum (we can use Kadane\'s Algorithm) max_negative_kadane = kadane(arr) # Inverse back the array for i in range(n): arr[i] = -arr[i] max_wrap = total_sum + max_negative_kadane # max sum considering circular subarray if max_wrap == 0: # Edge case when all numbers are negative return max_kadane return max(max_wrap, max_kadane)"},{"question":"A: Number Conversion story Kenji is an AI enthusiast studying machine learning. He\'s currently working on a project where he needs to convert a number from its representation in one base to another base. During the implementation, he realized he needs to frequently handle conversions between base 10 (decimal) and any other given base from 2 to 36 (inclusive). To streamline his project, Kenji decided to write a utility function to convert numbers efficiently. For example, given the number `255` in base `10`, he wants to convert it to its equivalent in base `16`, which would be `FF`. Kenji needs this conversion both from base 10 to another base and from another base to base 10. problem Write a program that can convert a number between base 10 and another specified base (2 to 36). The base 10 number is provided as an input string along with the target base for conversion. Additionally, a number in a different base will be provided as an input string along with its base, and your task is to convert it to base 10. Input format The input consists of three lines: - The first line contains a string `number` representing the number to be converted. - The second line contains an integer `base_from`, which is the base of the given number. - The third line contains an integer `base_to`, which is the base to which the number should be converted. The given number will always be a valid number in the provided base. Output format Output the converted number as a string. Input example 1 255 10 16 Output example 1 FF Input example 2 1010 2 10 Output example 2 10 Input example 3 1A7 16 10 Output example 3 423 Input example 4 Z 36 10 Output example 4 35","solution":"def convert_base(number: str, base_from: int, base_to: int) -> str: Converts a number from one base to another base. :param number: The number to be converted as a string. :param base_from: The base of the given number. :param base_to: The base to which the number should be converted. :return: The number in the target base as a string. # Convert from the base_from to a decimal base (base 10) base_10_number = int(number, base_from) # Handling conversion to the target base (base_to) if base_to == 10: return str(base_10_number) # Characters used for digits in bases up to 36 digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" # Convert from base 10 to the target base result = \\"\\" while base_10_number > 0: result = digits[base_10_number % base_to] + result base_10_number //= base_to return result if result else \\"0\\""},{"question":"The city has a unique traffic management system where they display a number on a traffic board at each intersection, and vehicles must obey the number as the speed limit. If a 3-digit number is displayed, vehicles should follow the unit digit as their speed. If a 2-digit number is displayed, the sum of the digits is the desired speed limit. For a single-digit number, drivers can drive at any speed. Example to identify the pattern: Input Output 234 4 58 13 7 0 32 5 -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, N. -----Output:----- For each test case, output in a single line the required speed limit for vehicles as per the traffic board. -----Constraints----- - 1 leq T leq 10^6 - 0 leq N leq 999 -----Sample Input:----- 2 307 16 -----Sample Output:----- 7 7","solution":"def speed_limit(T, cases): Determines the speed limit based on the given rules. Parameters: T (int): Number of test cases. cases (List[int]): List of integers representing the speed limits. Returns: List[int]: The computed speed limits for each case. results = [] for N in cases: if N < 10: results.append(0) elif N < 100: results.append(sum(int(digit) for digit in str(N))) else: results.append(N % 10) return results"},{"question":"A bookstore has a sale on a particular book series, with the following pricing scheme: | Quantity of Books Purchased | Price per Book | |-----------------------------|----------------| | 1 to 3 | 12 | | 4 to 6 | 10 | | 7 or more | 8 | Additionally, the bookstore offers a 10% discount on the total price if the purchase is made over the weekend (Saturday or Sunday). Write a function `calculate_total_cost` that takes two parameters: the number of books purchased (an integer) and a boolean indicating whether the purchase is made on a weekend. The function should calculate and return the total cost based on the pricing scheme and applicable discount. Example: - If 5 books are purchased on a Tuesday, the function should return 50. - If 5 books are purchased on a Sunday, the function should return 45.","solution":"def calculate_total_cost(num_books, is_weekend): Calculates the total cost based on the number of books and whether it is the weekend. Parameters: - num_books (int): Number of books purchased. - is_weekend (bool): Whether the purchase is made on a weekend. Returns: - float: Total cost after applying the pricing scheme and any discounts. if num_books <= 0: return 0 if 1 <= num_books <= 3: price_per_book = 12 elif 4 <= num_books <= 6: price_per_book = 10 elif num_books >= 7: price_per_book = 8 total_cost = num_books * price_per_book if is_weekend: total_cost *= 0.9 return total_cost"},{"question":"# Task Given a list of non-negative integers, find the contiguous subarray (containing at least one number) which has the largest product. Your solution should handle both positive and negative numbers. # Input/Output - `[input]` array of integers `nums` array containing non-negative integers - `[output]` an integer The largest product of a contiguous subarray within the input array. # Example - `maxProduct([2, 3, -2, 4])` -> `6` Explanation: `[2, 3]` has the largest product `6`. - `maxProduct([-2, 0, -1])` -> `0` Explanation: The result cannot be `2`, because the subarray must contain at least one number.","solution":"def maxProduct(nums): This function returns the largest product of a contiguous subarray within the input array. if not nums: return 0 max_product = nums[0] min_product = nums[0] result = nums[0] for n in nums[1:]: if n < 0: max_product, min_product = min_product, max_product max_product = max(n, max_product * n) min_product = min(n, min_product * n) result = max(result, max_product) return result"},{"question":"-----Input----- The input consists of a single integer N (1 ≤ N ≤ 1,000). -----Output----- Output a single integer, which is the sum of all even digits of N. -----Examples----- Input 12345 Output 6 Input 24680 Output 20 Input 13579 Output 0 Input 10203 Output 2 Input 628 Output 16","solution":"def sum_of_even_digits(N): Returns the sum of all even digits of N. return sum(int(digit) for digit in str(N) if int(digit) % 2 == 0)"},{"question":"# Task Write a function that takes a string and returns whether the string is a valid mathematical expression containing properly matched parentheses, brackets, and braces. A valid mathematical expression contains the symbols `(`, `)`, `[`, `]`, `{`, `}`, digits (`0-9`), basic arithmetic operators (`+`, `-`, `*`, `/`), and whitespace characters. The function should determine if: 1. All the parentheses, brackets, and braces are properly matched and nested. 2. The expression follows the correct order of operations and grouping. # Example For `expression = \\"3 + (2 - (4 / 2) * [2 + {3 * 4}])\\"`, the output should be `true`. For `expression = \\"3 + (4 - 5]\\"`, the output should be `false`. # Input/Output - `[input]` string expression A string representing a mathematical expression. Constraints: `1 ≤ expression.length ≤ 104` - `[output]` a boolean value, `true` if the expression is valid, `false` otherwise.","solution":"def is_valid_math_expression(expression): Returns whether the string is a valid mathematical expression containing properly matched parentheses, brackets, and braces. stack = [] matching_paren = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in expression: if char in matching_paren.values(): stack.append(char) elif char in matching_paren.keys(): if stack == [] or matching_paren[char] != stack.pop(): return False return stack == []"},{"question":"Maria is preparing for a coding competition and she practices by solving various types of problems. One day, she encounters a problem about sorting arrays. The problem is related to the uniqueness and frequency of array elements after sorting them. She finds it interesting and decides to challenge her friends with a similar problem. Your task is to help Maria solve the following problem: Given an array of integers, you need to determine how many unique elements exist in the array after it has been sorted. Additionally, you need to return the frequencies of each unique element in the sorted order. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the size of the array. The second line contains N space-separated integers, the elements of the array. ------ Output ------ For each test case, print: 1. The number of unique elements in the sorted array. 2. The frequencies of each unique element in the sorted order, separated by space. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10,000 -10^9 ≤ array elements ≤ 10^9 ------ Sample Input 1 ------ 2 5 4 5 4 2 2 6 1 1 1 1 1 1 ------ Sample Output 1 ------ 3 2 2 1 1 6 ------ Explanation 1 ------ Example case 1: After sorting, the array becomes [2, 2, 4, 4, 5]. We have 3 unique elements: 2 (appears 2 times), 4 (appears 2 times), and 5 (appears 1 time). Example case 2: After sorting, the array becomes [1, 1, 1, 1, 1, 1]. We have 1 unique element: 1 (appears 6 times).","solution":"def unique_elements_and_frequencies(test_cases): results = [] for case in test_cases: N, array = case sorted_array = sorted(array) frequencies = {} for num in sorted_array: if num in frequencies: frequencies[num] += 1 else: frequencies[num] = 1 unique_count = len(frequencies) freq_values = list(frequencies.values()) results.append((unique_count, freq_values)) return results def process_input(input_data): lines = input_data.split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((N, array)) index += 2 return test_cases def format_output(results): output = [] for result in results: unique_count, frequencies = result output.append(f\\"{unique_count}\\") output.append(\\" \\".join(map(str, frequencies))) return \\"n\\".join(output) # Main function to process the input and generate output def solve_problem(input_data): test_cases = process_input(input_data) results = unique_elements_and_frequencies(test_cases) output = format_output(results) return output"},{"question":"The city is planning to build new bollards to prevent vehicles from entering certain areas. The bollards will be placed along the border of a square, each side of which has a different number of bollards (specified in the input). The square\'s sides are connected to form a continuous boundary. Given the number of bollards for each side of the square, determine the total number of bollards required. Input The input consists of four space-separated integers a, b, c, and d (1 ≤ a, b, c, d ≤ 1000), where each integer represents the number of bollards on one side of the square in order. Output Print a single integer — the total number of bollards required. Note: The bollards at the corners of the square are shared between two sides. SAMPLE INPUT 3 4 3 4 SAMPLE OUTPUT 12 Explanation: - Side 1 has 3 bollards - Side 2 has 4 bollards - Side 3 has 3 bollards - Side 4 has 4 bollards Each corner bollard is shared between two sides, so the total number of bollards is given by the sum of the bollards on all four sides minus the four corners (which were counted twice): 3 (side 1) + 4 (side 2) + 3 (side 3) + 4 (side 4) - 4 (one for each corner) = 12 bollards.","solution":"def total_bollards(a, b, c, d): Returns the total number of bollards required given the number of bollards on each side of the square. return a + b + c + d - 4"},{"question":"In a small town, there is a popular social networking app called \\"TownMeet\\" where residents of the town can create different types of gatherings (meetings, parties, etc.) and invite each other. Each gathering is represented as a unique string and a list of people invited to that gathering. Two gatherings are considered to overlap if they have at least one person in common. Your task is to write a function that takes a list of gatherings and determines the maximal set of non-overlapping gatherings that can be attended by the residents. -----Input----- The input starts with a single positive integer N, 1 le N le 1000, representing the number of gatherings. Each of the following N lines contains a string G_i (the name of the gathering) and a list of names (strings) of people invited to that gathering. Each line is separated by a semicolon. Each name is unique within each gathering. It is guaranteed that no gathering name will be repeated. -----Output----- Print the names of the non-overlapping gatherings in lexicographical order. If there are multiple solutions with different gatherings but the same size, any solution is acceptable. -----Examples----- Sample Input: 3 Picnic; Alice Bob Charlie Concert; Bob David Workshop; Alice Eve Sample Output: Concert Workshop","solution":"def get_non_overlapping_gatherings(gatherings): def overlap(g1, g2): return not set(g1[1:]).isdisjoint(set(g2[1:])) sorted_gatherings = sorted(gatherings, key=lambda x: x[0]) non_overlapping_set = [] attendee_set = set() for gathering in sorted_gatherings: name, *attendees = gathering if not attendee_set.intersection(set(attendees)): non_overlapping_set.append(name) attendee_set.update(attendees) return sorted(non_overlapping_set) # Function to process the input details def process_gatherings_input(input_data): lines = input_data.strip().split(\\"n\\") n = int(lines[0]) gatherings = [] for line in lines[1:n+1]: name, raw_attendees = line.split(\';\') attendees = raw_attendees.strip().split() gatherings.append([name.strip()] + attendees) return gatherings"},{"question":"Happy PMP has found another interesting problem to solve. He has been given a binary string of length n. He needs to make all the characters in the string equal either to \'0\' or \'1\' with the minimum number of operations. In one operation, he can remove a contiguous substring of characters and place it at the beginning or at the end of the string. Write a program to calculate the minimum number of operations required to make all the characters of the binary string the same. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the length of the binary string. The next line contains a binary string of length n. Output Print a single integer denoting the minimum number of operations required to make all characters of the string equal. Examples Input 5 01100 Output 1 Input 7 1111111 Output 0 Input 6 100110 Output 2 Note In the first sample, you can remove \\"11\\" and place it at the beginning to get \\"11000\\", which requires one operation. In the second sample, all characters are already the same, so it requires zero operations. In the third sample, the sequence of changes is like this: * Remove \\"10\\" and place it at the beginning to get \\"101100\\". * Remove \\"01\\" and place it at the beginning to get \\"010110\\". * Remove \\"100\\" and place it at the beginning to get \\"110010\\". * Remove \\"110\\" and place it at the beginning to get \\"110110\\". * Remove \\"011\\" and place it at the beginning to get \\"111011\\". * Remove \\"100\\" and place it at the beginning to get \\"011100\\". * Remove \\"011\\" and place it at the beginning to get \\"000111\\". * Remove \\"111\\" and place it at the beginning to get \\"111111\\". So, it takes two operations, although other optimal sequences are also possible.","solution":"def min_operations_to_uniform(n, binary_string): zero_count = binary_string.count(\'0\') one_count = n - zero_count return min(zero_count, one_count)"},{"question":"Given a list of integers, write a function that returns the sum of the greatest even number and the smallest odd number in the list. The function should return the result as an integer. If there are no even numbers, the greatest even number should be considered as zero. If there are no odd numbers, the smallest odd number should be considered as zero. For example: ```python greatest_even_smallest_odd([2, 4, 1, 3, 6, 5]) => 8 # greatest even is 6, smallest odd is 1 greatest_even_smallest_odd([7, 7, 7, 7]) => 7 # greatest even is 0 as there are no evens, smallest odd is 7 greatest_even_smallest_odd([0, 2, 4, 8]) => 8 # greatest even is 8, smallest odd is 0 as there are no odds ``` Function Signature: ```python def greatest_even_smallest_odd(lst: List[int]) -> int: pass ```","solution":"from typing import List def greatest_even_smallest_odd(lst: List[int]) -> int: if not lst: return 0 greatest_even = float(\'-inf\') smallest_odd = float(\'inf\') for num in lst: if num % 2 == 0: greatest_even = max(greatest_even, num) else: smallest_odd = min(smallest_odd, num) greatest_even = greatest_even if greatest_even != float(\'-inf\') else 0 smallest_odd = smallest_odd if smallest_odd != float(\'inf\') else 0 return greatest_even + smallest_odd"},{"question":"You are given a string containing only lowercase alphabetical characters. Your task is to determine the number of distinct substrings of length 3 that are palindromes. A palindrome is a string that reads the same backward as forward. ``` \\"ababa\\" ==> 3 // \\"aba\\" (twice), \\"bab\\" (once) ``` All inputs will be valid lowercase alphabetical strings. More examples in test cases. Good luck!","solution":"def count_palindromic_substrings(s): Returns the number of distinct substrings of length 3 that are palindromes. seen = set() for i in range(len(s) - 2): substr = s[i:i+3] if substr == substr[::-1]: seen.add(substr) return len(seen)"},{"question":"You are given a list of integers. Your task is to find the pair of distinct integers that have the smallest absolute difference between them and print that difference. -----Constraints----- - The list contains at least 2 and at most 10^5 integers. - Each integer in the list lies between -10^9 and 10^9. -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ldots a_N Where: - N is the number of integers in the list. - a_i represents the i-th integer in the list. -----Output----- Output the smallest absolute difference between any pair of distinct integers in the list. -----Sample Input----- 5 1 3 6 9 10 -----Sample Output----- 1 The smallest absolute difference is between 9 and 10, which is 1.","solution":"def smallest_absolute_difference(arr): Returns the smallest absolute difference between any pair of distinct integers in the list. arr.sort() # Sort the array to find the nearest pairs efficiently min_diff = float(\'inf\') # Initialize the minimum difference to infinity for i in range(len(arr) - 1): # Compute the absolute difference between current and next element diff = abs(arr[i] - arr[i + 1]) # Update the minimum difference if the current difference is smaller if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a string S consisting of lowercase letters and an integer d. Your task is to find the lexicographically smallest string that can be obtained by deleting exactly d characters from S. Note: When deleting d characters, the remaining characters in the string must preserve their original order. Input The first line contains an integer d (1 ≤ d ≤ |S|), the number of characters to delete from the string. The second line contains the string S (1 ≤ |S| ≤ 1000), consisting of only lowercase letters. Output Print a single line containing the lexicographically smallest string that can be obtained by deleting exactly d characters from S. Examples Input 2 abcde Output abc Input 3 cabacd Output aac","solution":"def smallest_string_after_deletions(d, S): Finds the lexicographically smallest string that can be obtained by deleting exactly d characters from S. stack = [] to_delete = d for char in S: while stack and to_delete > 0 and stack[-1] > char: stack.pop() to_delete -= 1 stack.append(char) # If there are still characters to delete, remove from the end while to_delete > 0: stack.pop() to_delete -= 1 return \'\'.join(stack)"},{"question":"Write a function that, given a string s representing a file path in a Unix-style file system, returns the shortest possible equivalent path. A Unix-style file path uses forward slashes (\'/\') to separate directories and may contain the following special elements: - \'.\' (current directory) - \'..\' (parent directory) - multiple consecutive slashes (\'//\') which are treated as a single slash (\'/\') The returned path should always start with a single slash (\'/\') and must not end with a trailing slash unless it\'s the root directory. Example 1: Input: s = \\"/home/\\" Output: \\"/home\\" Explanation: The input string does not need simplification. Example 2: Input: s = \\"/a/./b/../../c/\\" Output: \\"/c\\" Explanation: From \\"/a/./b/../../c/\\" to \\"/a/b/../../c/\\" to \\"/c\\". Example 3: Input: s = \\"/../\\" Output: \\"/\\" Explanation: The input string represents moving up from the root directory, which is not possible, so it remains \\"/\\". Example 4: Input: s = \\"/home//foo/\\" Output: \\"/home/foo\\" Explanation: Consecutive slashes are replaced by a single slash. Your Task: You don\'t need to read or write input or output. Your task is to complete the function simplifyPath(), which takes a string s as an input parameter and returns the shortest possible equivalent path. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(s) ≤ 300 s consists of English letters, digits, period (\'.\'), slash (\'/\'), and underscores (\'_\').","solution":"def simplifyPath(s): Given a string s representing a file path in a Unix-style file system, returns the shortest possible equivalent path. stack = [] components = s.split(\'/\') for component in components: if component == \'\' or component == \'.\': # Ignore empty and the current directory components continue elif component == \'..\': # Go up to the parent directory if possible if stack: stack.pop() else: # Add the component to the stack stack.append(component) # Construct the simplified path by joining the stack components with \'/\' and prepend with \'/\' return \'/\' + \'/\'.join(stack)"},{"question":"You are given a string, S. Your task is to determine the longest substring of S in which the characters occur in a strict alphabetical order. If there are multiple substrings of the same maximum length, return the first one. Function Description Complete the function alphabeticallyOrderedSubstring in the editor below. alphabeticallyOrderedSubstring has the following parameters: string S: the input string Returns string: the longest substring with strictly increasing alphabetical order. If multiple substrings have the same length, return the first one found. Input Format Only one line of input containing S, the input string. Constraints 1 ≤ |S| ≤ 10^5 Sample Input 1 abacabadabacaba Sample Output 1 ab Sample Input 2 abcdeedcbaabc Sample Output 2 abcde Explanation: In the first sample, \'ab\' is the longest substring where each character strictly follows the previous one in alphabetical order. Although \'ab\' appears multiple times, the first occurrence is considered. In the second sample, \'abcde\' is the longest substring where each character strictly follows the previous one in alphabetical order. There are no other substrings of the same length.","solution":"def alphabeticallyOrderedSubstring(S): n = len(S) if n == 0: return \\"\\" max_len = 1 current_len = 1 max_substring = S[0] current_substring = S[0] for i in range(1, n): if S[i] > S[i - 1]: current_len += 1 current_substring += S[i] else: if current_len > max_len: max_len = current_len max_substring = current_substring current_len = 1 current_substring = S[i] # Check the last substring if current_len > max_len: max_substring = current_substring return max_substring"},{"question":"Alice and Bob are playing a game with sticks. Initially, there are `n` sticks on the table, and each of them can take turns picking up between 1 to 3 sticks from the table. Alice goes first. The player who cannot make a move because there are no sticks left on the table loses the game. Given the initial number of sticks, determine who will win the game if both players play optimally. -----Input----- The first line contains a single integer `t` (1 leq t leq 100) — number of test cases. Below comes their description. Each test case consists of a single integer `n` (1 leq n leq 10^9), representing the number of sticks on the table. -----Output----- For each test case, output \\"Alice\\" if Alice will win the game and \\"Bob\\" if Bob will win the game. You can output each name in any case (for example, \\"alice\\", \\"Alice\\", \\"ALICE\\" will be recognized as a positive answer). -----Examples----- Input 5 1 2 3 4 7 Output Alice Alice Alice Bob Bob -----Explanation----- In the first three examples (1 stick, 2 sticks, and 3 sticks), Alice can simply take all the sticks on her turn and win the game. In the fourth example (4 sticks), no matter how many sticks Alice takes (1, 2, or 3), there will always be 1, 2, or 3 sticks left for Bob, and he can take the remaining sticks to win the game. In the fifth example (7 sticks), Alice can take 3 sticks first, leaving 4 sticks for Bob. Regardless of how Bob plays next, Alice will always leave Bob with a situation where Bob takes the last stick and loses.","solution":"def determine_winner(n): Determines the winner of the game given the initial number of sticks `n`. Parameters: n (int): The number of sticks on the table. Returns: str: \\"Alice\\" if Alice wins the game, \\"Bob\\" otherwise. if n % 4 == 0: return \\"Bob\\" else: return \\"Alice\\" def solve(t, cases): Solves multiple test cases and returns the winner for each case. Parameters: t (int): The number of test cases. cases (list of int): A list containing the number of sticks for each case. Returns: list of str: A list of results where each result is either \\"Alice\\" or \\"Bob\\". results = [] for case in cases: results.append(determine_winner(case)) return results"},{"question":"Create a function `spot_the_squares(n)` that takes an integer `n` and returns a list of all square numbers up to but not exceeding `n` (non-zero positive perfect squares). The resulting list should be sorted in ascending order. Expressing it in code: ```python spot_the_squares(n) #-> [s1, s2, ..., sk] ``` Where each `si` is a square number and: ``` 0 < s1 < s2 < ... < sk ≤ n ``` Examples: ```python spot_the_squares(20) # -> [1, 4, 9, 16] spot_the_squares(50) # -> [1, 4, 9, 16, 25, 36, 49] spot_the_squares(5) # -> [1, 4] spot_the_squares(0) # -> [] spot_the_squares(1) # -> [1] ``` Features of the input: ``` 0 ≤ n ≤ 100000 ``` Your task is to implement the function `spot_the_squares(n)`.","solution":"def spot_the_squares(n): Returns a list of all square numbers up to but not exceeding n. squares = [] i = 1 while i * i <= n: squares.append(i * i) i += 1 return squares"},{"question":"A company has a distribution warehouse represented by an n x m grid. Each cell in this grid either contains an obstacle or is empty, and you need to navigate from the top-left cell to the bottom-right cell. You can move vertically or horizontally but cannot move diagonally. Additionally, you can\'t move through obstacles. Your task is to count the number of unique paths from the top-left corner to the bottom-right corner of the grid, considering that obstacles may block the path. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. - The following n lines each contain m characters representing the grid. Each character is either \'.\' to represent an empty cell or \'#\' to represent an obstacle. Output - Print a single integer — the number of unique paths from the top-left to the bottom-right cell. Constraints - The start and end points (i.e., top-left and bottom-right corners) are always empty cells (\'.\'). Examples Input 3 3 ... .#. ... Output 2 Input 3 3 .#. .#. ... Output 1 Note In the first example, there are 2 unique paths from the top-left to the bottom-right: - Right → Right → Down → Down - Down → Down → Right → Right In the second example, there is only 1 unique path from the top-left to the bottom-right: - Down → Down → Right → Right","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) # Create a 2D table to store the number of paths to each cell dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = 1 if grid[0][0] == \'.\' else 0 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"-----General Statement:----- Given a list of employee names and their reported work hours for a single day, calculate the percentage of time each employee worked relative to the total work hours for all employees combined. -----Input:----- The first line of the data set is an integer that represents the number of employees. Each of the following lines contains the name of the employee (a string without spaces) and the number of hours they worked (an integer). -----Output:----- For each employee, output their name followed by the percentage of total hours they contributed. Round the percentage to 2 decimal places. Ensure the output is formatted as shown in the example below. -----Assumptions:----- - There will be at least one employee. - Work hours are in the range 1..24. - The total work hours among all employees will be nonzero. -----Discussion:----- Calculate the total hours worked by all employees. Then, for each employee, compute the percentage of total hours they contributed. -----Sample Input:----- 3 Alice 5 Bob 3 Charlie 7 -----Sample Output:----- Alice: 33.33% Bob: 20.00% Charlie: 46.67%","solution":"def calculate_work_percentage(employee_data): Given a list of employees and their reported work hours, this function returns the percentage of time each employee worked relative to the total work hours for all employees combined. n = employee_data[0] employee_hours = employee_data[1:] total_hours = sum(hours for _, hours in employee_hours) result = {} for name, hours in employee_hours: percentage = (hours / total_hours) * 100 result[name] = f\\"{percentage:.2f}%\\" return result"},{"question":"Alice loves collecting coins. She has N coins, each with a particular value. Unfortunately, some of these coins have gone missing, but she only remembers the sum of all the coins she originally had. Given this sum and the values of the remaining coins, she wants to find the total value of the missing coins. ------ Input Format ------ - The first line contains an integer T - the number of test cases. - Each test case consists of two lines: - The first line contains two integers S and N - the original sum of all the coins and the number of remaining coins. - The second line contains N integers, representing the values of the remaining coins. ------ Output Format ------ For each test case, output the total value of the missing coins. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ N ≤ 100 1 ≤ S ≤ 10^9 1 ≤ value of each coin ≤ 10^6 ----- Sample Input 1 ------ 3 15 3 2 5 6 20 4 4 5 6 2 10 0 ----- Sample Output 1 ------ 2 3 10 ----- Explanation 1 ------ * Test case-1: The original sum was 15, and the sum of the remaining coins is 2+5+6=13. Therefore, the total value of the missing coins is 15-13=2. * Test case-2: The original sum was 20, and the sum of the remaining coins is 4+5+6+2=17. Therefore, the total value of the missing coins is 20-17=3. * Test case-3: The original sum was 10, and no coins are left, so all coins are missing. Therefore, the total value of the missing coins is 10-0=10.","solution":"def missing_coins_value(t, test_cases): Determines the total value of the missing coins for each test case. :param t: Number of test cases :param test_cases: List of tuples, each containing (S, N, remaining_coins) :return: List of integers, each representing the total value of the missing coins for each test case. results = [] for case in test_cases: S, N, remaining_coins = case sum_remaining = sum(remaining_coins) result = S - sum_remaining results.append(result) return results"},{"question":"Artem is back with his time machine, and he\'s now interested in tracking changes over a sequence of strings. He wants to apply operations to a list of strings over different moments in time. The list supports the following types of operations: 1. Add a string to the list at a specific moment in time. The string can be added multiple times. 2. Remove a string from the list at a specific moment in time. Only one instance of the string is removed. Artem ensures that any string subjected to removal is already in the list at that moment in time. 3. Count the number of instances of a given string in the list at a specific moment in time. For example: - Artem adds the string \\"hello\\" at moment 1. - He adds \\"world\\" at moment 3. - At moment 4, he asks how many times \\"hello\\" appears in the list. The answer is 1. - He goes back in time and removes \\"hello\\" at moment 2. - At moment 5, he asks how many times \\"hello\\" appears in the list. The answer is 0. Implement Artem\'s time travelers list. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of Artem\'s queries. Then follow n lines with query descriptions. Each contains three elements: an integer a_{i}, an integer t_{i}, and a string s_{i} (1 ≤ a_{i} ≤ 3, 1 ≤ t_{i} ≤ 10^9, 1 ≤ |s_{i}| ≤ 100) — type of the query, moment of time Artem travels to in order to execute this query, and the string value of the query, respectively. The moments of time are distinct, and all operations of the first and second types are consistent. -----Output----- For each query of type 3, output the number of instances of the string in the list at the specified moment in time. -----Examples----- Input 6 1 1 hello 3 4 hello 1 3 world 3 5 hello 2 2 hello 3 6 hello Output 1 1 0 Input 5 1 1 test 1 2 test 3 3 test 2 4 test 3 5 test Output 2 1","solution":"from collections import defaultdict import bisect class TimeTravelersList: def __init__(self): self.timeline = defaultdict(list) def add(self, time, string): bisect.insort(self.timeline[string], (time, 1)) def remove(self, time, string): index = bisect.bisect_left(self.timeline[string], (time, 0)) self.timeline[string].insert(index, (time, -1)) def count(self, time, string): count = 0 for t, operation in self.timeline[string]: if t > time: break count += operation return count def process_queries(n, queries): t_list = TimeTravelersList() results = [] for query in queries: a_i, t_i, s_i = query if a_i == 1: t_list.add(t_i, s_i) elif a_i == 2: t_list.remove(t_i, s_i) elif a_i == 3: results.append(t_list.count(t_i, s_i)) return results"},{"question":"In a small town, there is a network of roads connecting various houses. The town consists of n houses, numbered from 1 to n, and m roads, each connecting two houses bidirectionally. Each road has a positive integer weight representing the time it takes to travel between the two houses. Residents complain about the travel time between certain pairs of houses, dubbed critical pairs. As the town planner, you are asked to compute the shortest travel time for each of these critical pairs. Input: The first line contains two space-separated integers: n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), the number of houses and roads, respectively. The next m lines each contain three space-separated integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating a road that connects house u to house v with a weight of w. The next line contains an integer k (1 ≤ k ≤ 1000), the number of critical pairs. The next k lines each contain two space-separated integers a and b (1 ≤ a, b ≤ n), representing each critical pair. Output: For each critical pair, output a single line containing the shortest travel time between the two houses. If the houses are not connected, output -1. Examples: Input: 4 4 1 2 4 2 3 3 3 4 2 1 4 10 3 1 3 2 4 1 4 Output: 7 5 9 Input: 5 3 1 2 5 1 3 2 3 4 1 2 1 4 2 5 Output: 3 -1","solution":"import heapq def dijkstra(n, graph, source): dist = [float(\'inf\')] * (n + 1) dist[source] = 0 pq = [(0, source)] while pq: current_distance, u = heapq.heappop(pq) if current_distance > dist[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def shortest_travel_time(n, m, roads, k, critical_pairs): graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) results = [] for a, b in critical_pairs: dist = dijkstra(n, graph, a) results.append(dist[b] if dist[b] != float(\'inf\') else -1) return results"},{"question":"You are organizing a sequence of events in a venue with multiple rooms. Each event has a start and end time, and can only take place in one room. You need to assign events to rooms such that no two events in the same room overlap in time. Additionally, you would like to minimize the number of rooms used to host all events. Your task is to calculate the minimum number of rooms required to schedule all the events. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of events. Each of the next n lines contains two integers s and e (0 ≤ s < e ≤ 10^9) — the start and end times of an event. -----Output----- Print the minimum number of rooms required to schedule all the events. -----Examples----- Input 4 1 3 2 4 3 5 7 8 Output 2 Input 3 2 6 4 8 5 7 Output 3 -----Note----- In the first example, events (1, 3) and (3, 5) can be held in the same room, and events (2, 4) and (7, 8) can be held in another room, thus requiring a total of 2 rooms. In the second example, all events overlap, so each event needs to be in a different room, thus requiring a total of 3 rooms.","solution":"def minimum_number_of_rooms(events): Given a list of events with their start and end times, this function calculates the minimum number of rooms required to host all events without any overlapping in the same room. Args: events: List of tuples, where each tuple contains two integers (start_time, end_time) Returns: int: Minimum number of rooms required if not events: return 0 # Extracting start and end times separately, marking start times with +1 and end times with -1 times = [] for start, end in events: times.append((start, +1)) # Event starts times.append((end, -1)) # Event ends # Sorting times, breaking ties by giving priority to end times times.sort(key=lambda x: (x[0], x[1])) # Sweep line algorithm to find the maximum number of simultaneous events rooms = 0 current_rooms = 0 for time, ttype in times: current_rooms += ttype rooms = max(rooms, current_rooms) return rooms"},{"question":"_Advanced Calculator_ _Upskill your python skills with this exciting challenge!_ Overview In this task, you are going to implement an **Advanced Calculator** class that supports basic arithmetic operations and also provides some extended functionality for handling multiple operations at once. You must implement the calculator using special methods and operator overloading, enabling both typical usage and more complex functionality. The Goal # Class Definition Define a class named `AdvancedCalculator` that must include the following functionalities: - **Initialization**: Should take an optional initial value (default is 0). - **Addition**: Support addition using operator overloading (`+`). - **Subtraction**: Support subtraction using operator overloading (`-`). - **Multiplication**: Support multiplication using operator overloading (`*`). - **Division**: Support division using operator overloading (`/`). Additionally, it must handle bulk operations through special methods: - **Sum**: A method named `sum` that takes a list of numbers and returns their sum. - **Product**: A method named `product` that takes a list of numbers and returns their product. - **History**: Maintain a history of all operations performed. # Implementation ```python class AdvancedCalculator: def __init__(self, initial_value=0): self.value = initial_value self.history = [] def __add__(self, other): result = self.value + other self.history.append(f\'Added {other}: {result}\') self.value = result return self def __sub__(self, other): result = self.value - other self.history.append(f\'Subtracted {other}: {result}\') self.value = result return self def __mul__(self, other): result = self.value * other self.history.append(f\'Multiplied by {other}: {result}\') self.value = result return self def __truediv__(self, other): if other == 0: raise ValueError(\\"Cannot divide by zero\\") result = self.value / other self.history.append(f\'Divided by {other}: {result}\') self.value = result return self def sum(self, numbers): result = sum(numbers) self.history.append(f\'Summed {numbers}: {result}\') return result def product(self, numbers): result = 1 for number in numbers: result *= number self.history.append(f\'Product of {numbers}: {result}\') return result def get_history(self): return self.history ``` # Example Usage ```python calc = AdvancedCalculator(10) calc + 5 # Adds 5 calc - 2 # Subtracts 2 calc * 3 # Multiplies by 3 calc / 2 # Divides by 2 calc.sum([1, 2, 3]) # Returns the sum of [1, 2, 3] calc.product([1, 2, 3, 4]) # Returns the product of [1, 2, 3, 4] # View the history of operations calc.get_history() ``` Specifications - Ensure that division by zero raises a `ValueError` with the message `\\"Cannot divide by zero\\"`. - The calculator should maintain a history of all operations performed in the order they were executed. - Implement operator overloading for `+`, `-`, `*`, and `/`. - Ensure that the calculator can handle both integers and floating-point numbers. Notes - Pay attention to edge cases such as division by zero and ensure the class raises appropriate exceptions. - The history should be returned as a list of strings, each detailing the operation performed and its result. - Focus on efficiency and simplicity of the methods. _Enjoy the challenge!_ _Happy Coding!_","solution":"class AdvancedCalculator: def __init__(self, initial_value=0.0): self.value = initial_value self.history = [] def __add__(self, other): result = self.value + other self.history.append(f\'Added {other}: {result}\') self.value = result return self def __sub__(self, other): result = self.value - other self.history.append(f\'Subtracted {other}: {result}\') self.value = result return self def __mul__(self, other): result = self.value * other self.history.append(f\'Multiplied by {other}: {result}\') self.value = result return self def __truediv__(self, other): if other == 0: raise ValueError(\\"Cannot divide by zero\\") result = self.value / other self.history.append(f\'Divided by {other}: {result}\') self.value = result return self def sum(self, numbers): result = sum(numbers) self.history.append(f\'Summed {numbers}: {result}\') return result def product(self, numbers): result = 1 for number in numbers: result *= number self.history.append(f\'Product of {numbers}: {result}\') return result def get_history(self): return self.history"},{"question":"You have recently found a new hobby in solving jigsaw puzzles. You decided to write a program to determine if a set of jigsaw puzzle pieces can be assembled to form a valid rectangle. Each puzzle piece is represented by a pair (width, height). You are given \'n\' puzzle pieces. Your task is to determine if these pieces can be assembled to form a valid rectangle. -----Input----- The first line of input contains a single integer \'n\' (1 ≤ n ≤ 100), the number of puzzle pieces. Each of the following \'n\' lines contains two space-separated integers w_i and h_i (1 ≤ w_i, h_i ≤ 1000) representing the dimensions of each puzzle piece (width and height). -----Output----- Output \\"YES\\" (quotes for clarity) if the pieces can form a valid rectangle, otherwise output \\"NO\\". -----Examples----- Input 4 2 4 4 2 4 2 2 4 Output YES Input 3 1 2 2 1 2 2 Output NO Input 6 1 2 2 3 2 1 3 4 2 1 1 3 Output NO -----Note----- In the first sample, you can pair up the pieces as (2x4) and (4x2), and they can form a valid rectangle of dimensions 4x4 or 2x8. In the second sample, with only 3 pieces, it is impossible to form a rectangle. In the third sample, the pieces do not match properly to form any valid combination of rectangles.","solution":"def can_form_rectangle(n, pieces): Determines if the given n puzzle pieces can be assembled to form a valid rectangle. :param n: Number of puzzle pieces :param pieces: List of tuple representing the width and height of each piece :return: \\"YES\\" if the pieces can form a valid rectangle, otherwise \\"NO\\" # Dictionary to count occurrences of each piece, considering both orientations piece_count = {} for w, h in pieces: if (w, h) in piece_count: piece_count[(w, h)] += 1 elif (h, w) in piece_count: piece_count[(h, w)] += 1 else: piece_count[(w, h)] = 1 # Each piece must appear an even number of times to form a rectangle for count in piece_count.values(): if count % 2 != 0: return \\"NO\\" return \\"YES\\""},{"question":"Determine Valid Sentences problem Given a string consisting of uppercase letters and the special character `\'*\'`, design a function to determine all possible valid sentences by replacing each occurrence of `\'*\'` with any of the uppercase letters from \'A\' to \'Z\'. A valid sentence is defined as a sequence of uppercase letters without any `\'*\'` in it. Your task is to count the number of unique valid sentences that can be generated from the input string by replacing the `\'*\'` characters. Input format s Constraint * 1 leq |s| leq 12 * s contains only uppercase letters and the special character `\'*\'`. Output format Output the number of unique valid sentences on a single line. Input example 1 A*B Output example 1 26 There are 26 unique valid sentences, `AAB, ABB, ACB, ..., AZB`. Input example 2 **C Output example 2 676 There are 676 unique valid sentences, `AAC, ABC, ACC, ..., AZC, BAC, BBC, ..., ZZC`. Example Input XYZ* Output 26","solution":"def count_valid_sentences(s): Counts the number of valid sentences generated by replacing \'*\' with any uppercase letter from \'A\' to \'Z\'. Parameters: s (str): Input string consisting of uppercase letters and the special character \'*\' Returns: int: Number of unique valid sentences # Count the number of \'*\' in the string star_count = s.count(\'*\') # Each \'*\' can be replaced by any letter from \'A\' to \'Z\' (26 possibilities) return 26 ** star_count"},{"question":"A restaurant has a unique way of serving dishes. Each dish can be rated by its spiciness level on a scale from 1 to 10. The customer can place an order by specifying a sum of spiciness level they desire in their dish. The task is to determine if it\'s possible to create a dish by selecting some or all of the available dishes such that their combined spiciness levels exactly add up to the desired sum. Write a function `can_create_dish` that takes two inputs: 1. A list of integers representing the spiciness levels of available dishes. 2. An integer representing the desired spiciness level. The function should return either \\"YES\\" if it\'s possible to create a dish with the exact desired spiciness level, or \\"NO\\" if it is not possible. Input - A single integer `N` representing the number of available dishes, followed by `N` integers representing the spiciness levels of the dishes. (1 ≤ N ≤ 30, 1 ≤ spiciness level of each dish ≤ 10) - An integer `M` representing the desired spiciness level. (1 ≤ M ≤ 100) Output - A single string \\"YES\\" or \\"NO\\". Example Input: 4 1 3 2 5 8 Output: YES Explanation: 1+3+2+2 = 8, therefore it is possible to create a dish with spiciness level 8. Input: 3 1 2 3 7 Output: NO Explanation: Using given dishes, it is not possible to create a dish with spiciness level 7.","solution":"def can_create_dish(dishes, desired_sum): Determines if there exists a subset of dishes whose spiciness levels sum up to the desired sum. Parameters: - dishes: list of integers representing the spiciness levels of available dishes - desired_sum: an integer representing the desired spiciness level Returns: - \\"YES\\" if it is possible to create the dish with the exact desired spiciness level, otherwise \\"NO\\" n = len(dishes) # Use a dynamic programming approach dp = [False] * (desired_sum + 1) dp[0] = True # A sum of 0 is always possible with an empty subset for dish in dishes: for i in range(desired_sum, dish - 1, -1): if dp[i - dish]: dp[i] = True return \\"YES\\" if dp[desired_sum] else \\"NO\\""},{"question":"Alyssa has an array of N elements a1, a2, ..., aN. She wants to determine the sum of the maximum elements of all possible contiguous subarrays of length K. Given an array of size N and an integer K, determine the sum of the maximum elements of all contiguous subarrays of length K. Your task is to implement a function that computes this sum efficiently. Input: The first line of input consists of two integers N and K. The second line contains N integers a1, a2, ..., aN. Output: Output a single integer which is the sum of the maximum elements of all contiguous subarrays of length K. Constraints: 1 ≤ K ≤ N ≤ 10^6 1 ≤ ai ≤ 10^9 SAMPLE INPUT 7 3 5 1 3 2 6 4 8 SAMPLE OUTPUT 33 Explanation: The contiguous subarrays of length 3 are: - [5, 1, 3] with maximum element 5 - [1, 3, 2] with maximum element 3 - [3, 2, 6] with maximum element 6 - [2, 6, 4] with maximum element 6 - [6, 4, 8] with maximum element 8 The sum of these maximum elements is 5 + 3 + 6 + 6 + 8 = 28.","solution":"from collections import deque def sum_of_max_elements(N, K, array): if K > N or not array: return 0 deq = deque() max_sum = 0 for i in range(K): while deq and array[i] >= array[deq[-1]]: deq.pop() deq.append(i) for i in range(K, N): max_sum += array[deq[0]] while deq and deq[0] <= i - K: deq.popleft() while deq and array[i] >= array[deq[-1]]: deq.pop() deq.append(i) max_sum += array[deq[0]] return max_sum"},{"question":"You are given a list of integers. Your task is to find and return the length of the longest contiguous subarray that contains only unique elements. A contiguous subarray is a single sublist within a given list where all elements must be adjacent in the original list. Your solution should be efficient enough to handle arrays of significant length. -----Input----- The first line contains an integer number n (1 ≤ n ≤ 10^5). The second line contains n integers a_1, a_2, ..., a_{n} (-10^5 ≤ a_{i} ≤ 10^5). -----Output----- Print the length of the longest contiguous subarray with all unique elements. -----Examples----- Input 5 1 2 3 2 1 Output 3 Input 6 1 2 3 4 5 6 Output 6 Input 7 1 1 1 1 1 1 1 Output 1 -----Note----- In the first example the longest contiguous subarray with all unique elements is [1, 2, 3] and its length is 3. In the second example the entire array is the longest subarray with all unique elements, hence the output is 6. In the third example every element is the same, so the longest subarray with unique elements is any single element, hence the output is 1.","solution":"def longest_unique_subarray_length(arr): Finds the length of the longest contiguous subarray with all unique elements. :param arr: List of integers :return: int, length of the longest subarray with unique elements n = len(arr) if n == 0: return 0 max_length = 0 start = 0 used_elements = {} for end in range(n): if arr[end] in used_elements: start = max(start, used_elements[arr[end]] + 1) used_elements[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are working as an engineer for a company that designs and implements advanced sorting algorithms. Your team has come up with a hybrid sorting algorithm named HybridSort, which combines the properties of QuickSort and InsertionSort. Your task is to implement this HybridSort algorithm. HybridSort works as follows: 1. Choose a threshold value, T. 2. If the size of the array to be sorted is less than or equal to T, use InsertionSort to sort the array. 3. Otherwise, use QuickSort to sort the array, and recursively apply HybridSort to the partitions. You are provided with the following function signatures: ```python def hybrid_sort(arr, T): Sorts the array `arr` using the HybridSort algorithm. Parameters: arr (list): The array to be sorted. T (int): The threshold value to decide between QuickSort and InsertionSort. Returns: list: The sorted array. def quick_sort(arr): Sorts the array `arr` using the QuickSort algorithm. Parameters: arr (list): The array to be sorted. Returns: list: The sorted array. def insertion_sort(arr): Sorts the array `arr` using the InsertionSort algorithm. Parameters: arr (list): The array to be sorted. Returns: list: The sorted array. ``` Write the HybridSort algorithm and the helper functions QuickSort and InsertionSort. # Input - The `hybrid_sort` function will be given an array `arr` of integers and a threshold value `T`. # Output - Your function should return the sorted array. # Constraints - 0 ≤ len(arr) ≤ 10^5 - 1 ≤ T ≤ 100 - -10^9 ≤ arr[i] ≤ 10^9 # Example ```python # Example 1 arr = [12, 4, 5, 6, 7, 3, 1, 15] T = 4 print(hybrid_sort(arr, T)) # Output: [1, 3, 4, 5, 6, 7, 12, 15] # Example 2 arr = [4, 3, 2, 10, 12, 1, 5, 6] T = 3 print(hybrid_sort(arr, T)) # Output: [1, 2, 3, 4, 5, 6, 10, 12] ```","solution":"def hybrid_sort(arr, T): Sorts the array `arr` using the HybridSort algorithm. Parameters: arr (list): The array to be sorted. T (int): The threshold value to decide between QuickSort and InsertionSort. Returns: list: The sorted array. if len(arr) <= T: return insertion_sort(arr) else: if len(arr) < 2: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return hybrid_sort(left, T) + middle + hybrid_sort(right, T) def quick_sort(arr): Sorts the array `arr` using the QuickSort algorithm. Parameters: arr (list): The array to be sorted. Returns: list: The sorted array. if len(arr) < 2: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) def insertion_sort(arr): Sorts the array `arr` using the InsertionSort algorithm. Parameters: arr (list): The array to be sorted. Returns: list: The sorted array. for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"question":"Determine the number of even and odd numbers in an integer array. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first line of each test case will contain a single integer N, denoting the length of the array. - The second line of each test case will contain N integers separated by space, representing the elements of the array. ------ Output Format ------ For each test case, output two integers separated by space, the number of even numbers and the number of odd numbers in the array. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 0 ≤ A[i] ≤ 10^4 where A[i] is the i-th element of the array ----- Sample Input 1 ------ 3 5 1 2 3 4 5 4 2 4 6 8 3 1 3 5 ----- Sample Output 1 ------ 2 3 4 0 0 3 ----- Explanation 1 ------ Test case 1: The array [1, 2, 3, 4, 5] contains 2 even numbers (2, 4) and 3 odd numbers (1, 3, 5). Test case 2: The array [2, 4, 6, 8] contains 4 even numbers (2, 4, 6, 8) and 0 odd numbers. Test case 3: The array [1, 3, 5] contains 0 even numbers and 3 odd numbers (1, 3, 5).","solution":"def count_even_odd(arr): Returns the count of even and odd numbers in the given array. even_count = 0 odd_count = 0 for num in arr: if num % 2 == 0: even_count += 1 else: odd_count += 1 return even_count, odd_count def process_test_cases(test_cases): Processes multiple test cases and returns the results for each case. results = [] for case in test_cases: n, arr = case results.append(count_even_odd(arr)) return results"},{"question":"Problem: A scientist is researching patterns in DNA sequences. To assist with this research, you are to implement a program that generates all possible k-letter combinations from a given set of n unique letters. Each combination should be lexicographically ordered and must use every letter exactly once. Input The first line contains T, the number of test cases. The following lines contain each test case consisting of an integer k (length of each combination), an integer n (number of letters), and a string of n unique uppercase letters. Output For each test case, print all the k-letter combinations in lexicographical order separated by spaces. Print the result for each test case on a new line. Constraints: 1 ≤ T ≤ 5 1 ≤ k ≤ n ≤ 10 Example Input 2 2 3 ABC 3 3 XYZ Example Output AB AC BA BC CA CB XYZ Note: The input set of letters should not contain any duplicate letters, and each letter should be used once per combination.","solution":"from itertools import permutations def generate_combinations(k, n, letters): Generate all possible k-letter combinations from a given set of n unique letters. Parameters: k (int): length of each combination n (int): number of letters letters (str): string of n unique uppercase letters Returns: List[str]: list of k-letter combinations in lexicographical order letters = \'\'.join(sorted(letters)) # sort the letters to ensure lexicographical order perm = permutations(letters, k) # generate all k-length permutations result = sorted([\'\'.join(p) for p in perm]) # join tuples to strings and sort return result def process_test_cases(T, test_cases): results = [] for k, n, letters in test_cases: result = generate_combinations(k, n, letters) results.append(\\" \\".join(result)) return results"},{"question":"A team of software developers decided to create an application that helps users keep track of their tasks effectively. They want to implement a feature that schedules reminders based on the due dates of the tasks. Each task has a title, a description, a priority level, and a due date. The priority level of a task is an integer where a higher number indicates a higher priority. The due date is given in the format \\"YYYY-MM-DD\\". Your task is to write a program that takes a list of tasks and generates a list of reminders sorted firstly by the due date (earliest to latest) and then by priority (highest to lowest) in case of a tie. Input The first line contains an integer N (1 ≤ N ≤ 1000), representing the number of tasks. Each of the following N lines contains details of a task in the format: \\"Title Description Priority YYYY-MM-DD\\". Title and Description are alphanumeric strings without spaces, Priority is an integer (1 ≤ Priority ≤ 10), and YYYY-MM-DD represents the due date. Output For each task, print a line containing the title, description, priority, and due date in the same format as the input, but sorted as specified above. Example Input 5 Task1 WriteCode 5 2023-11-10 Task2 FixBugs 8 2023-11-05 Task3 UpdateDocs 4 2023-11-10 Task4 TeamMeeting 7 2023-11-01 Task5 CodeReview 6 2023-11-05 Output Task4 TeamMeeting 7 2023-11-01 Task2 FixBugs 8 2023-11-05 Task5 CodeReview 6 2023-11-05 Task1 WriteCode 5 2023-11-10 Task3 UpdateDocs 4 2023-11-10","solution":"def sort_tasks(tasks): Sorts tasks based on due date and priority. Parameters: tasks (list): List of tasks where each task is a dictionary with keys \'title\', \'description\', \'priority\', and \'due_date\'. Returns: list: Sorted list of tasks. # Sort tasks first by due_date, and in case of tie, by priority in descending order sorted_tasks = sorted(tasks, key=lambda x: (x[\'due_date\'], -x[\'priority\'])) return sorted_tasks def parse_input(input_str): Parses the input string into a list of tasks. Parameters: input_str (str): The input string. Returns: list: List of tasks where each task is a dictionary. lines = input_str.strip().split(\\"n\\") n_tasks = int(lines[0]) tasks = [] for i in range(1, n_tasks + 1): parts = lines[i].split() title = parts[0] description = parts[1] priority = int(parts[2]) due_date = parts[3] tasks.append({\'title\': title, \'description\': description, \'priority\': priority, \'due_date\': due_date}) return tasks def format_output(tasks): Formats the sorted tasks into the required output format. Parameters: tasks (list): List of sorted tasks. Returns: str: Formatted string of tasks. output = [] for task in tasks: output.append(f\\"{task[\'title\']} {task[\'description\']} {task[\'priority\']} {task[\'due_date\']}\\") return \\"n\\".join(output)"},{"question":"There is a circular conveyor belt with n (2 leq n leq 10^4) compartments, each containing exactly one item. Each item is represented by a positive integer number a_i denoting its type. The compartments are arranged in a circle and can be rotated. You are allowed to remove items from the conveyor belt but can only remove all occurrences of a specific item type in one operation. Removal can be repeated multiple times, and each operation is counted. Your task is to determine the minimum number of operations required to completely clear the conveyor belt of all items. -----Input----- The first line contains an integer n, the number of compartments in the conveyor belt. The second line contains n integers a_1, a_2, ..., a_n representing the item types in the compartments. -----Output----- Output a single integer, which is the minimum number of operations required to empty the conveyor belt. -----Examples----- Sample Input 1: 5 1 2 2 3 1 Sample Output 1: 3 Sample Input 2: 6 4 4 4 4 4 4 Sample Output 2: 1 Sample Input 3: 7 1 2 3 4 5 6 7 Sample Output 3: 7","solution":"def min_operations_to_clear_belt(n, a): Calculates the minimum number of operations required to empty the conveyor belt by removing all occurrences of each item type in one operation. Parameters: n (int): the number of compartments in the conveyor belt a (list of int): the item types in the compartments Returns: int: the minimum number of operations required to empty the conveyor belt # Using a set to find the unique elements in the list unique_items = set(a) # The number of unique items is the number of operations needed return len(unique_items) # Example usage: n = 5 a = [1, 2, 2, 3, 1] print(min_operations_to_clear_belt(n, a)) # Output: 3"},{"question":"In the bustling land of Codeville, every Codevillager follows a daily routine consisting of multiple activities. Each activity has a specific start time and end time within the day. The mayor of Codeville wants to ensure that each Codevillager has a well-structured schedule, where no two activities overlap in their routine. You are tasked with writing a program to help Codeville\'s mayor verify if a given routine of a Codevillager is conflict-free. In other words, you need to check whether no two activities overlap in the Codevillager\'s routine. Each activity is represented by a pair of integers (start time, end time). Input The first line contains an integer N, the number of activities in the routine (1 ≤ N ≤ 1000). The next N lines contain pairs of integers Si and Ei (0 ≤ Si < Ei ≤ 24), representing the start time and end time of each activity. Output Print \\"NO CONFLICT\\" if no two activities overlap. Otherwise, print \\"CONFLICT\\". Examples Input 3 1 3 5 8 2 4 Output CONFLICT Input 2 9 10 10 12 Output NO CONFLICT Input 4 1 5 5 8 6 7 8 9 Output CONFLICT","solution":"def check_schedule_conflict(n, activities): Returns \\"NO CONFLICT\\" if no two activities overlap in the given schedule, otherwise returns \\"CONFLICT\\". :param n: Number of activities :param activities: List of tuples, where each tuple represents (start time, end time) of an activity. # Sort activities by start time activities.sort(key=lambda x: x[0]) for i in range(1, n): if activities[i][0] < activities[i-1][1]: return \\"CONFLICT\\" return \\"NO CONFLICT\\""},{"question":"Palindrome Index A palindrome is a string that reads the same from left to right as it does from right to left. Given a string, you need to determine the index of a character that can be removed to make the string a palindrome. If the string is already a palindrome or no single character can be removed to make it a palindrome, return -1. The string will consist of lowercase English letters only. For example, given the string \\"aaab\\", removing the character at index 3 will result in the string \\"aaa\\", which is a palindrome. Another example is \\"baa\\", where removing the character at index 0 results in \\"aa\\", a palindrome. Task Given a string, find the index of the character that can be removed to make the string a palindrome. If the string is already a palindrome or no single character can be removed to make a palindrome, return -1. Input Format - The first line contains an integer T, the number of test cases. - The following T lines each contain a string to be evaluated. Constraints 1 leq T leq 20 1 leq text{length of string} leq 10^5 Output Format Print the index of the character to be removed or -1 if the string is already a palindrome or no single character can be removed to make a palindrome. Sample Input 3 aaab baa abc Sample Output 3 0 -1 Explanation The first string \\"aaab\\" becomes \\"aaa\\" if we remove the character at index 3. The second string \\"baa\\" becomes \\"aa\\" if we remove the character at index 0. The third string \\"abc\\" does not have any single character that can be removed to make it a palindrome.","solution":"def palindrome_index(s): Given a string s, return the index of the character that can be removed to make the string a palindrome. If the string is already a palindrome or no single character can be removed to make it a palindrome, return -1. def is_palindrome(sub): return sub == sub[::-1] if is_palindrome(s): return -1 n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: if is_palindrome(s[i + 1: n - i]): return i if is_palindrome(s[i: n - i - 1]): return n - i - 1 return -1 return -1"},{"question":"Alex is a software engineer who loves bitwise operations. He recently encountered a problem that he couldn\'t solve, and he needs your help. Problem is: Given an array of integers, find the maximum product of any two distinct elements in the array using only bitwise operations. For example: Given the array [4, 7, 2, 8, 1], the maximum product of any two distinct elements is obtained by multiplying 7 and 8 to get 56. [Input] The input consists of: - The first line contains an integer t denoting the number of test cases. - The first line of each test case contains an integer n denoting the size of the array. - The second line of each test case contains n space-separated integers denoting the elements of the array. [Output] For each test case, output a single integer representing the maximum product of any two distinct elements. [Constraints] 1 ≤ t ≤ 100000 2 ≤ n ≤ 1000 1 ≤ arr[i] ≤ 100000 Note: Use bitwise operations to solve the problem. SAMPLE INPUT 2 5 4 7 2 8 1 3 3 6 9 SAMPLE OUTPUT 56 54","solution":"def max_product_bitwise(arr): Returns the maximum product of any two distinct elements in the array using bitwise operations. # Initialize first and second largest elements first_largest = second_largest = 0 for num in arr: if num > first_largest: second_largest = first_largest first_largest = num elif num > second_largest: second_largest = num # Return their product return first_largest * second_largest def solve(test_cases): Processes multiple test cases and returns a list of results for each test case. results = [] for arr in test_cases: results.append(max_product_bitwise(arr)) return results # Read input def parse_input(input_string): input_lines = input_string.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].strip().split())) test_cases.append(arr) index += 2 return test_cases def process_input(input_string): test_cases = parse_input(input_string) results = solve(test_cases) return \\"n\\".join(map(str, results))"},{"question":"The company PowerTech is developing a power management system for various electrical devices. They need your help to design a program that can provide useful statistics about energy consumption. -----Input:----- - The first line contains the integer N, the number of devices in the log. - The next N lines each contain a device log entry consisting of two space-separated values: - The first value is a string D_i representing the device name (unique for each device). - The second value is an integer E_i representing the energy consumption in watts for that device. -----Output:----- Your program should output exactly two lines: - The first line should be the average energy consumption across all devices, rounded to 2 decimal places. - The second line should be the name of the device with the highest energy consumption. -----Constraints----- - 1 leq N leq 100 - 1 leq E_i leq 10^4 -----Sample Input:----- 3 Laptop 150 TV 200 Fridge 300 -----Sample Output:----- 216.67 Fridge -----EXPLANATION:----- The average energy consumption is the sum of the energy consumptions of all devices divided by the number of devices: (150 + 200 + 300) / 3 = 216.67. The device with the highest energy consumption is the Fridge with 300 watts.","solution":"def power_statistics(device_logs): total_energy = 0 max_device = \'\' max_energy = -1 for device, energy in device_logs: total_energy += energy if energy > max_energy: max_energy = energy max_device = device avg_energy = total_energy / len(device_logs) return round(avg_energy, 2), max_device"},{"question":"Tracy is planning to attend a music festival where multiple bands are performing across various stages. Each stage has a unique schedule of performances with defined start and end times. Tracy wants to see as many performances as possible but can only watch one performance at a time. Your task is to help Tracy figure out the maximum number of performances she can attend without any overlap. Given `n` performances, each performance `i` has a start time `start[i]` and an end time `end[i]`. Example n = 4 start = [1, 3, 0, 5] end = [2, 4, 6, 7] The performances are: Performance 1: start at 1, end at 2 Performance 2: start at 3, end at 4 Performance 3: start at 0, end at 6 Performance 4: start at 5, end at 7 Tracy can attend Performance 1 (1 to 2), Performance 2 (3 to 4), and Performance 4 (5 to 7) without any overlaps. Function Description Complete the maxPerformances function in the editor below. maxPerformances has the following parameters: int n: the number of performances int start[n]: the start times of the performances int end[n]: the end times of the performances Returns int: the maximum number of non-overlapping performances Tracy can attend Input Format - The first line contains an integer `n`, the number of performances. - Each of the next `n` lines contains two space-separated integers, the start and end times of each performance. Constraints 1 leq n leq 10^5 0 leq start[i] < end[i] leq 10^9 It is guaranteed that all elements of the start array are distinct and all elements of the end array are distinct.","solution":"def maxPerformances(n, start, end): # Combine start and end into a list of tuples and sort by end times performances = sorted(zip(start, end), key=lambda x: x[1]) max_performances = 0 last_end_time = -1 # Initialize to a time before any possible performance for s, e in performances: if s >= last_end_time: max_performances += 1 last_end_time = e return max_performances"},{"question":"Given a list of strings, merge all the strings into one string such that the final string contains all characters from each string in the list, in any order, without any duplicates. Example 1: Input: strings = [\\"abc\\", \\"de\\", \\"a\\", \\"f\\"] Output: \\"abcdef\\" Explanation: Merge all characters from \'abc\', \'de\', \'a\', \'f\' without duplicates, the result is \'abcdef\'. Example 2: Input: strings = [\\"aab\\", \\"bca\\", \\"xyz\\"] Output: \\"abcxyz\\" Explanation: Merge all characters from \'aab\', \'bca\', \'xyz\' without duplicates, the result is \'abcxyz\'. Your Task: You do not need to read input or print anything. Complete the function mergeStrings() which takes a list of strings as input parameter and returns the merged string containing all unique characters from the input list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 1000 1 <= Length of each string <= 100","solution":"def mergeStrings(strings): Merge all strings in the list into one string that contains all unique characters. # Use a set to keep track of unique characters unique_chars = set() # Iterate over each string in the list for string in strings: # Add characters to the set unique_chars.update(string) # Convert set to string (order may vary since using set) return \'\'.join(sorted(unique_chars))"},{"question":"You are given an array of integers. Your task is to find an integer value, `X`, such that if you replace every element of the array with the integer `X`, the sum of absolute differences between the original array elements and `X` is minimized. Input - The first line contains an integer `n` (1 <= n <= 100,000) — the number of elements in the array. - The second line contains `n` integers `a1, a2, ..., an` (|ai| <= 10^9) — the elements of the array. Output - Print the integer `X` which minimizes the sum of absolute differences. If there are multiple values with the same sum, print the smallest one. Example Input 5 1 3 6 7 8 Output 6 Explanation If we replace every element with `6`, the differences would be: |1-6| + |3-6| + |6-6| + |7-6| + |8-6| = 5 + 3 + 0 + 1 + 2 = 11 If we replace every element with a different `X`, the sum of absolute differences will be higher. For example, try `X = 3`: |1-3| + |3-3| + |6-3| + |7-3| + |8-3| = 2 + 0 + 3 + 4 + 5 = 14, which is higher than 11.","solution":"def find_minimal_X(n, arr): This function returns the integer X that minimizes the sum of absolute differences if each element in the array is replaced by X. arr.sort() median_index = n // 2 return arr[median_index] if n % 2 == 1 else min(arr[median_index - 1], arr[median_index])"},{"question":"Write a function that takes an integer array and a target integer as inputs and returns the indices of the two numbers in the array that add up to the target. If no such pair exists, return an empty array. ~~~if:c For C, you must return a dynamically allocated array containing the indices. You will also need to handle returning the size of this array through a pointer passed to the function. ~~~ # Example: ```python Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Input: nums = [3, 3], target = 6 Output: [0, 1] ``` # Constraints: - You may assume that each input would have exactly one solution, and you may not use the same element twice. - The function should aim for a time complexity better than O(n^2).","solution":"def two_sum(nums, target): Returns indices of the two numbers in the array that add up to the target. Parameters: nums (list): list of integers target (int): target sum Returns: list: indices of the two numbers index_map = {} for i, num in enumerate(nums): complement = target - num if complement in index_map: return [index_map[complement], i] index_map[num] = i return []"},{"question":"In a small town, a group of friends plays a game in which they pass a ball around a circle. Each person has a unique ID, and the ball is passed according to specific instructions. Given a list of instructions where each instruction specifies the ID of the person who currently has the ball and the ID of the person to whom the ball should be passed next, determine the final holder of the ball after all instructions are executed. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case begins with an integer N, denoting the number of instructions. - The next N lines each contain two space-separated integers A and B, where A is the ID of the person who currently has the ball and B is the ID of the person to whom the ball should be passed next. ------ Output Format ------ For each test case, output the ID of the final holder of the ball. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ N ≤ 100 1 ≤ A, B ≤ 1000 Each person has a unique ID. ------ Sample Input 1 ------ 2 3 1 2 2 3 3 4 4 4 5 5 6 6 7 7 8 ------ Sample Output 1 ------ 4 8 ------ explanation 1 ------ Test case 1: The ball is passed from person 1 to 2, then from 2 to 3, and finally from 3 to 4. Thus, the final holder of the ball is person 4. Test case 2: The ball is passed from person 4 to 5, then from 5 to 6, from 6 to 7, and finally from 7 to 8. Therefore, the final holder of the ball is person 8.","solution":"def find_final_holder(T, test_cases): Determines the final holder of the ball after all instructions are executed. Parameters: T (int): The number of test cases. test_cases (list): A list of test cases where each test case is a list of tuples (A, B) representing the instructions. Returns: list: A list of IDs representing the final holder of the ball for each test case. results = [] for i in range(T): instructions = test_cases[i] holder = instructions[0][0] for instruction in instructions: holder = instruction[1] # Pass the ball to the next person results.append(holder) return results"},{"question":"Description Write a function that takes two strings and determines whether they are anagrams or not. Two strings are considered anagrams if they contain the same characters in the same frequency, but in a different order. The function `are_anagrams` should take two parameters, `string1` and `string2`, and return `True` if the strings are anagrams of each other, otherwise it should return `False`. Criteria - The function will always receive valid input: two non-empty strings consisting of lowercase alphabetic characters (`a-z`). - Ignore white spaces and consider only the characters. - The comparison should be case-sensitive (although only lowercase input is provided). - Optimize your solution to run efficiently for longer strings. # Example `are_anagrams(\'listen\', \'silent\')` should return `True`. `are_anagrams(\'triangle\', \'integral\')` should return `True`. `are_anagrams(\'apple\', \'pale\')` should return `False`.","solution":"def are_anagrams(string1, string2): Determines whether two strings are anagrams of each other. Parameters: string1 (str): The first string. string2 (str): The second string. Returns: bool: True if the strings are anagrams, otherwise False. from collections import Counter return Counter(string1.replace(\\" \\", \\"\\")) == Counter(string2.replace(\\" \\", \\"\\"))"},{"question":"You are given an array `arr` consisting of `n` integers. Your task is to split this array into the minimum number of contiguous subarrays where each subarray is strictly increasing. Let\'s call a subarray strictly increasing if every element at position `i` is smaller than the element at position `i+1` for all `i` in the subarray. For example, if the array is `[1, 2, 1, 2, 3]`, you can split it into `[1, 2]`, `[1, 2, 3]`. Return the minimum number of such subarrays. -----Input----- The first line contains an integer `n` (1 le n le 10^5), the number of elements in the array. The second line contains `n` integers `arr[i]` (1 le arr[i] le 10^9) representing the elements of the array. -----Output----- Print a single integer — the minimum number of strictly increasing subarrays. -----Examples----- Input 6 1 2 1 2 3 1 Output 3 Input 5 5 4 3 2 1 Output 5 Input 4 1 2 3 4 Output 1 -----Note----- In the first example, the array can be split into `[1, 2]`, `[1, 2, 3]`, and `[1]`, thus requiring a minimum of 3 subarrays. In the second example, since the entire array is non-increasing, each element must be in its own subarray, resulting in 5 subarrays. In the third example, the entire array is already strictly increasing, so only one subarray is needed.","solution":"def min_increasing_subarrays(arr): Given an array arr, return the minimum number of strictly increasing subarrays. if not arr: # handle empty array case return 0 n = len(arr) subarray_count = 1 # Start with at least one subarray for i in range(1, n): if arr[i] <= arr[i - 1]: subarray_count += 1 return subarray_count"},{"question":"Chef has recently bought a new house and needs to arrange his furniture. However, he\'s curious about how many distinct ways he can place a certain number of identical chairs in a row. You are given N, the number of chairs Chef has bought. Chef can only place them in a straight line. You need to count and return the number of distinct ways the chairs can be arranged such that no two chairs are next to each other. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. - Each test case consists of a single integer N, indicating the number of chairs. ------ Output Format ------ For each test case, output the number of distinct ways Chef can place the chairs such that no two chairs are next to each other. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 30 ------ Sample Input 1 ------ 4 1 2 3 4 ------ Sample Output 1 ------ 1 1 2 3 ------ Explanation 1 ------ Test case 1: With 1 chair, there is only 1 way to place it in the row. Test case 2: With 2 chairs, there is only 1 way to place them such that they are not next to each other, which is: `X_` or `_X`. Test case 3: With 3 chairs, there are 2 ways to place them: `X_X_` or `_X_X`. Test case 4: With 4 chairs, there are 3 ways to place them: `X_X_X`, `_X_X_X`, and `X__X_`. Note that `_` represents an empty space where no chair is placed.","solution":"def distinct_ways_to_place_chairs(N): Returns the number of distinct ways to arrange N chairs in such a way that no two chairs are next to each other. # Handling base cases if N == 1: # If there\'s 1 chair, only 1 way to place it return 1 elif N == 2: # If there are 2 chairs, only 1 way to place them non-adjacent return 1 # Using dynamic programming to count the number of ways dp = [0] * (N + 1) dp[1] = 1 dp[2] = 1 for i in range(3, N + 1): dp[i] = dp[i-1] + dp[i-2] return dp[N] def solve_chair_arrangement(T, test_cases): results = [] for N in test_cases: results.append(distinct_ways_to_place_chairs(N)) return results"},{"question":"Alice loves creating unique password patterns. She is currently working on her latest design, which involves two types of characters: alphabetical letters (from \'a\' to \'z\') and digits (from \'0\' to \'9\'). Each password must be a sequence of exactly n characters. However, the passwords have two constraints: 1. No two consecutive characters are the same type (i.e., a digit must be followed by a letter and a letter must be followed by a digit). 2. The password must start with a letter. Given the length of the password n, Alice wants to know how many possible valid passwords can be generated under these constraints. -----Input----- The only line contains a single integer n (1 ≤ n ≤ 200) — the length of the password. -----Output----- Print a single integer — the number of possible valid passwords of length n. -----Examples----- Input 3 Output 93600 Input 4 Output 3499200 -----Note----- In the first example, the password must be 3 characters long and start with a letter. The valid patterns are L-D-L (Letter-Digit-Letter) where: - L: 26 possible letters - D: 10 possible digits So, the total number of possible valid passwords is 26 * 10 * 26 = 6760. In the second example, the password must be 4 characters long and start with a letter. The valid patterns are L-D-L-D where: - L: 26 possible letters - D: 10 possible digits So, the total number of possible valid passwords is 26 * 10 * 26 * 10 = 67600.","solution":"def count_valid_passwords(n): This function calculates the number of possible valid passwords of length n, starting with a letter, ensuring no two consecutive characters are of the same type. if n == 0: return 0 elif n % 2 == 0: return (26 * 10) ** (n // 2) else: return 26 * (10 * 26) ** (n // 2)"},{"question":"A car racing tournament is taking place where cars compete against each other in several rounds. Each round involves all the cars racing simultaneously, and their rankings are recorded. After all rounds, the final ranking of each car is determined by its average ranking across all rounds. Cars with the same average ranking will share the same final position. Your task is to determine the final positions of all the cars based on their average rankings. -----Input----- The input consists of: - one line with two integers n and m (1 le n, m le 1000), the number of cars and the number of rounds respectively; - m subsequent lines, each containing n integers r_1, ldots, r_n (1 le r_i le n for all i), representing the ranking of the cars in each round. Each ranking line r_{j1}, ldots, r_{jn} means that car r_{j1} finished first, car r_{j2} finished second, and so on in that particular round. The cars are numbered 1, ldots, n. -----Output----- Output n integers, where the i-th integer indicates the final position of the i-th car in the tournament. Positions are 1-based, with lower numbers indicating better rankings (i.e., 1-st position is the best). -----Examples----- Sample Input: 3 2 1 2 3 2 1 3 Sample Output: 1 1 3 Sample Input: 4 3 4 1 2 3 3 1 4 2 2 1 3 4 Sample Output: 1 2 2 2","solution":"def determine_final_positions(n, m, rankings): import numpy as np # Initialize the sums of rankings for each car total_rankings = [0] * n # Compute the total ranking for each car for ranking in rankings: for i, car in enumerate(ranking): total_rankings[car - 1] += (i + 1) # Compute the average ranking for each car average_rankings = [(total_rankings[i] / m, i + 1) for i in range(n)] # Sort the cars based on average ranking (lower is better) average_rankings.sort() # Determine the final positions final_positions = [0] * n current_position = 1 i = 0 while i < n: j = i # Find all cars with the same ranking while j < n and average_rankings[j][0] == average_rankings[i][0]: j += 1 # Assign the same position to all cars with the same average ranking for k in range(i, j): final_positions[average_rankings[k][1] - 1] = current_position current_position += (j - i) i = j return final_positions"},{"question":"Palindrome Decomposition A **palindrome** is a string that reads the same backward as forward (e.g., \\"madam\\", \\"racecar\\"). Given a string, its **palindrome decomposition** is a way of breaking the string into contiguous substrings such that each substring is a palindrome. Your objective is to find all possible palindrome decompositions of a given string. For example, for the string \\"aab\\", the possible palindrome decompositions are: - \\"a\\", \\"a\\", \\"b\\" - \\"aa\\", \\"b\\" Write a program that takes a single string as input and outputs all possible palindrome decompositions. The output for each decomposition should be formatted as a space-separated string of palindromes. # Input - The input consists of a single string for which you will generate the palindrome decompositions. - The length of the input string will be between 1 and 16 characters inclusive. - The characters in the input string are lowercase English letters only. # Output - The output consists of all palindrome decompositions, one per line. The order of output lines does not matter. - Each decomposition should be a space-separated list of palindromes. - If there are no possible decompositions, output a single line containing \\"No decomposition possible\\" (though for this problem, there will always be at least one decomposition). # Example Input ``` aab ``` Output ``` a a b aa b ``` Input ``` racecar ``` Output ``` r a c e c a r r a c e c ar ra c e c a r r aceca r racecar ``` Write a program to achieve the functionality described above.","solution":"def is_palindrome(s): Check if a given string s is a palindrome. return s == s[::-1] def palindrome_decomposition(s): Find all possible palindrome decompositions of a given string s. The function returns a list of lists, where each list represents a decomposition. def decompose(start, path): # If we have reached the end of the string, add the current path to result if start == len(s): result.append(path[:]) return # Try to partition the string and backtrack for end in range(start + 1, len(s) + 1): substring = s[start:end] if is_palindrome(substring): path.append(substring) decompose(end, path) path.pop() result = [] decompose(0, []) return result def decompose_string(s): decompositions = palindrome_decomposition(s) return decompositions"},{"question":"You are working on a project to efficiently store large amounts of numerical data by using a custom compression mechanism. Given a sequence of integers, the compressor identifies and encodes ranges of consecutive numbers. For example, the sequence `2, 3, 4, 7, 8, 9` would be encoded as `2-4,7-9`. Your task is to decompress the encoded string into the sequence of integers. Write a function `decompress_ranges(s: str) -> List[int]` that takes a string s representing the encoded ranges and returns the list of integers in the original sequence. # Input Format The input `s` will be a single string consisting of one or more encoded ranges separated by commas. Each range is represented in the format `a-b` where `a` and `b` are integers and `a ≤ b`. # Constraints - All integers in the input string are non-negative and do not exceed 10000. - The length of the input string `s` will be between 1 and 100 inclusive. - The input string `s` will always be valid and properly formatted. # Output Format Return the decompressed list of integers as a list of integers. # Sample Input 0 ``` 1-3,5-7 ``` # Sample Output 0 ``` [1, 2, 3, 5, 6, 7] ``` # Sample Input 1 ``` 2-4,7-9,12-12 ``` # Sample Output 1 ``` [2, 3, 4, 7, 8, 9, 12] ``` # Explanation 0 In the first example, `1-3` expands to `[1, 2, 3]` and `5-7` expands to `[5, 6, 7]`. Therefore, the combined result is `[1, 2, 3, 5, 6, 7]`. In the second example, `2-4` expands to `[2, 3, 4]`, `7-9` expands to `[7, 8, 9]`, and `12-12` expands to `[12]`, making the final list `[2, 3, 4, 7, 8, 9, 12]`.","solution":"from typing import List def decompress_ranges(s: str) -> List[int]: Decompress the encoded ranges of consecutive numbers into a list of integers. ranges = s.split(\',\') result = [] for r in ranges: start, end = map(int, r.split(\'-\')) result.extend(range(start, end + 1)) return result"},{"question":"Petya is learning about sorting algorithms in his computer science class. Given a list of integers, he wants to sort them in a specific way where all even numbers come before all odd numbers while maintaining the relative order of even and odd numbers. Help Petya to implement such a sorting algorithm. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of integers in the list. The second line contains n integers ai (1 ≤ ai ≤ 1000) — the integers in the list. Output Output the sorted list where all even numbers appear before all odd numbers in the same relative order as they were in the input. Example Input 5 4 1 3 2 5 Output 4 2 1 3 5","solution":"def sort_even_before_odd(numbers): Returns a list of numbers sorted so that all even numbers come before odd numbers while maintaining the relative order of even and odd numbers. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] return evens + odds"},{"question":"Given a positive integer, N. Generate the N-th Fibonacci number. Example 1: Input: N = 6 Output: 8 Explanation: The first six Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8. The 6th Fibonacci number is 8. Example 2: Input: N = 9 Output: 34 Explanation: The first nine Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34. The 9th Fibonacci number is 34. Your Task: You don\'t need to read input or print anything. Your task is to complete the function fibonacci() which takes an integer N as input parameters and returns an integer, the N-th Fibonacci number. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 0 <= N <= 30","solution":"def fibonacci(N): Returns the N-th Fibonacci number. if N == 0: return 0 elif N == 1: return 1 a, b = 0, 1 for _ in range(2, N + 1): a, b = b, a + b return b"},{"question":"Given a basketball court in a rectangular grid and a basketball player standing at one corner of the court, the player needs to dribble the basketball from the starting point to the opposite corner while avoiding obstacles. The player can only move in two directions: right or down. The court is represented as an `n x m` grid, where `1 <= n, m <= 10`. Some cells in the grid might contain obstacles denoted by \'#\', and the player cannot pass through these cells. The player starts at the top-left corner and needs to reach the bottom-right corner. Write a program to determine the number of distinct paths the player can take to reach the bottom-right corner from the top-left corner without hitting any obstacles. You are given multiple datasets. Each dataset is defined as follows: - The first line contains two integers `n` and `m`, the dimensions of the court. - The next `n` lines each contain `m` characters, representing the court layout. Each character is either \'.\' representing an empty cell or \'#\' representing an obstacle. - Input ends with a line containing two zeros `0 0`. There can be up to 5 datasets. For each dataset, output a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner without hitting any obstacles. Example: Input: 3 3 ... .#. ... 4 4 .... .#.. ..#. .... 0 0 Output: 2 4 Explanation: For the first dataset: There are 2 distinct paths from the top-left corner to the bottom-right corner avoiding the obstacle: 1. Right, Right, Down, Down 2. Down, Down, Right, Right For the second dataset: There are 4 distinct paths avoiding the obstacles, as indicated by: 1. Right, Right, Right, Down, Down, Down 2. Right, Down, Down, Down, Right, Right 3. Down, Right, Down, Right, Down, Right 4. Down, Down, Right, Right, Down, Right","solution":"def count_paths(n, m, court): if court[0][0] == \'#\' or court[n - 1][m - 1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if court[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[n - 1][m - 1] def process_input(data): result = [] i = 0 while i < len(data): n, m = map(int, data[i].split()) if n == 0 and m == 0: break court = [] for j in range(i + 1, i + 1 + n): court.append(list(data[j])) result.append(count_paths(n, m, court)) i = i + 1 + n return result"},{"question":"Dr. Strange has just arrived at the Stark Tower and sees Tony working on a new simulation. Tony has a list of integers and he wants to determine if there\'s a subarray within the list, whose sum equals to a given number X. Dr. Strange decides to help Tony, but to make it challenging, he sets the following constraints: - The subarray should be of at least length 2. - The subarray should be contiguous (i.e., all elements in the subarray must be consecutive). Tony is excited to figure this out with your help. Write a code to determine if such a subarray exists. Input Format The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains integers N (the number of elements in the array) and X (the desired sum). - The second line contains N integers, representing the elements of the array. Output Format For each test case, output \\"YES\\" if such a subarray exists. Otherwise, output \\"NO\\". Constraints 1<=T<=1000 2<=N<=10^5 -10^9 <= array elements <= 10^9 Sample Input 3 5 12 1 2 3 7 5 4 10 1 2 3 4 3 7 1 0 6 Sample Output YES YES YES Explanation For the 1st test case, there is a subarray (2, 3, 7) which sums to 12. For the 2nd test case, there is a subarray (1, 2, 3, 4) which sums to 10. For the 3rd test case, there is a subarray (1, 6) which sums to 7.","solution":"def has_subarray_with_sum(arr, desired_sum): Determines if there exists a subarray of at least length 2 whose sum equals to the desired sum. n = len(arr) # Prefix sum approach with a dictionary to store the prefix sums # where the prefix sum is stored corresponding to the latest end index prefix_sum = 0 prefix_sum_map = {0: -1} # Initialize with prefix sum of 0 at index -1 for i in range(n): prefix_sum += arr[i] if (prefix_sum - desired_sum) in prefix_sum_map: if i - prefix_sum_map[prefix_sum - desired_sum] >= 2: return \\"YES\\" # Store the current prefix sum with index if prefix_sum not in prefix_sum_map: prefix_sum_map[prefix_sum] = i return \\"NO\\" def check_subarrays(test_cases): For each test case, check if there is a subarray with the specified sum. results = [] for n, x, array in test_cases: results.append(has_subarray_with_sum(array, x)) return results"},{"question":"Maria is working on a project where she needs to filter out the unique numbers from a list of integers and then sort them in descending order. She seeks your help to achieve this. Your task is to write a program that takes a list of integers as input, removes any duplicates, and outputs the list in descending order. Input First line inputs an integer \'n\', the number of integers in the list. Second line contains \'n\' integers separated by space. Output Print the unique integers in descending order in a single line separated by space. Constraint 1 ≤ n ≤ 50 0 ≤ integers ≤ 1000 SAMPLE INPUT 7 4 5 2 5 8 2 1 SAMPLE OUTPUT 8 5 4 2 1","solution":"def unique_descending(numbers): Takes a list of integers, removes duplicates, and returns the list in descending order. unique_numbers = list(set(numbers)) unique_numbers.sort(reverse=True) return unique_numbers"},{"question":"John loves solving puzzles involving numbers. Recently, he came across an interesting problem where he needs to transform a given integer array into a non-decreasing sequence by performing a series of operations. In one operation, John can increment or decrement any element in the array by 1. John wants to know the minimum number of operations required to achieve this transformation. Can you help him? -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) – the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000) – the initial elements of the array. -----Output----- Print a single integer – the minimum number of operations required to transform the array into a non-decreasing sequence. -----Examples----- Input 5 4 2 3 1 5 Output 6 Input 3 1 2 1 Output 1","solution":"def min_operations_to_non_decreasing(arr): Returns the minimum number of operations required to make the array non-decreasing by incrementing or decrementing any element by 1. n = len(arr) operations = 0 # For a non-decreasing sequence, each element has to be at least as large as the previous element. for i in range(1, n): if arr[i] < arr[i-1]: operations += (arr[i-1] - arr[i]) arr[i] = arr[i-1] # Make it non-decreasing by equalizing the current element return operations"},{"question":"In a chess game, pieces can move to different positions on the board following specific rules. Given the location of a knight on an 8x8 chessboard, we want to determine all possible positions the knight can move to in one turn. A knight moves in an L-shape: two squares in one direction and then one square perpendicular to that direction, or one square in one direction and then two squares perpendicular to that direction. The knight cannot move off the board. Write a function that finds all valid positions a knight can move to, given its current position. ------Input------ The input consists of a single line containing the knight\'s current position on the board, represented as a string in standard chess notation (e.g., \\"e4\\", \\"a1\\", etc.). The string will consist of a letter (a-h) and a number (1-8). ------Output------ Output all valid positions the knight can move to in standard chess notation. The positions should be in lexicographical order. ------Examples------ Input e4 Output c3 c5 d2 d6 f2 f6 g3 g5 Input a1 Output b3 c2 Input h8 Output f7 g6 ------Note------ Consider the first example. The knight starts at position \\"e4\\". From there, the possible moves are c3, d2, c5, d6, f2, g3, f6, and g5. These positions are then printed in lexicographical order: c3, c5, d2, d6, f2, f6, g3, g5.","solution":"def knight_moves(position): Given the current position of a knight on a chessboard, return all possible valid moves it can make in one turn in standard chess notation, sorted in lexicographical order. # Mapping from file character to index (0-7) file_to_index = {\'a\': 0, \'b\': 1, \'c\': 2, \'d\': 3, \'e\': 4, \'f\': 5, \'g\': 6, \'h\': 7} # Mapping from index (0-7) to file character index_to_file = \'abcdefgh\' # Movement offsets for a knight moves = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)] # Current position current_file = position[0] current_rank = int(position[1]) # Get the current position in terms of (file index, rank index) current_file_index = file_to_index[current_file] current_rank_index = current_rank - 1 valid_positions = [] for move in moves: new_file_index = current_file_index + move[0] new_rank_index = current_rank_index + move[1] if 0 <= new_file_index < 8 and 0 <= new_rank_index < 8: new_position = index_to_file[new_file_index] + str(new_rank_index + 1) valid_positions.append(new_position) valid_positions.sort() return valid_positions"},{"question":"Linda has an array of n integers and she is curious about how she can modify the array to achieve a certain structure. She invented a positive integer x and decided that she wants to ensure that the sum of every pair of consecutive elements in the array is divisible by x. To achieve this, she can add or subtract the same integer x from any element in the array. Formally, given an array a of n integers, Linda can apply a series of operations where in each operation she chooses an integer i (1 ≤ i ≤ n) and replaces the i-th element of the array a_i with either a_i + x or a_i - x. She wants to find an array b such that for every consecutive pair of elements (b_i, b_{i+1}), (b_{i+1} + b_i) is divisible by x. -----Input----- The first line of the input contains two integers n and x (2 ≤ n ≤ 200 000, 1 ≤ x ≤ 10^9) — the number of elements in the array and the number invented by Linda, respectively. The second line contains n integers a_1, a_2, ..., a_{n} (|a_{i}| ≤ 10^9) — the elements of the array. -----Output----- Print n integers b_1, b_2, ..., b_{n} in one line — the array elements after applying the operations, such that the difference between each consecutive pair sums to a multiple of x. If there are multiple answers, print any of them. -----Examples----- Input 5 3 5 4 3 2 1 Output 6 3 6 3 6 Input 4 2 4 6 8 10 Output 4 6 8 10 Input 3 5 5 9 12 Output 10 5 10 Input 3 6 3 -3 0 Output -3 3 -3","solution":"def modify_array_to_satisfy_condition(n, x, a): b = a[:] # Copy the original array to avoid modifying it for i in range(n): if i % 2 == 0: # Even index in 0-based index (odd in 1-based) b[i] += x else: # Odd index in 0-based index (even in 1-based) b[i] -= x return b # To facilitate testing input and output format def main(input_string): lines = input_string.strip().split(\'n\') n, x = map(int, lines[0].split()) a = list(map(int, lines[1].split())) b = modify_array_to_satisfy_condition(n, x, a) return \' \'.join(map(str, b))"},{"question":"You are given two arrays of integers, `A` and `B`, both of length `n`. You can perform the following operation any number of times (including zero): 1. Choose any pair of indices `i` and `j` such that `0 ≤ i, j < n`. 2. Swap the values of `A[i]` and `B[j]`. Your goal is to make the arrays `A` and `B` exactly the same after performing zero or more of the above operations. Determine the minimum number of swaps required to make the two arrays identical. If it\'s not possible, return -1. Input The input consists of three lines: - The first line contains an integer `n` (1 ≤ n ≤ 100) indicating the size of arrays `A` and `B`. - The second line contains `n` space-separated integers representing the array `A`, where each integer is between 1 and 1000. - The third line contains `n` space-separated integers representing the array `B`, where each integer is between 1 and 1000. Output Print a single integer, the minimum number of swaps required to make the two arrays identical, or -1 if it is not possible. Examples Input 3 3 2 1 2 1 3 Output 1 Input 4 1 2 3 4 1 2 3 5 Output -1 Input 5 1 1 1 1 1 1 1 1 1 1 Output 0 Note In the first example, you can swap A[2] with B[0] to make the arrays identical. In the second example, it is impossible to make the arrays identical as they have different elements. In the third example, the arrays are already identical, so no swaps are needed.","solution":"def min_swaps_to_make_arrays_identical(n, A, B): from collections import Counter # Check if both arrays have the same elements with the same frequencies if Counter(A) != Counter(B): return -1 # Finding positions where the elements differ diffs = [] for i in range(n): if A[i] != B[i]: diffs.append(i) # The smallest swaps are half the number of differing positions since swapping a unique pair fixes 2 positions return len(diffs) // 2"},{"question":"A hospital uses a priority-based system to manage patients in their Emergency Department (ED). Each patient is characterized by an arrival time and a severity level. The severity level is an integer between 1 and 100, where 1 is the least severe and 100 is the most severe. The ED can handle a certain number of patients at the same time, denoted by the variable `p`. As new patients arrive, they are either admitted to the ED or placed in a waiting area. If the ED is full (i.e., already handling `p` patients), the patient with the lowest severity is discharged if the new patient has a higher severity. If the entering patient\'s severity is the same as that of the patient with the lowest severity in the ED, the new patient will not be admitted. Your task is to simulate the patient admission process and determine which patients are handled in the ED at the end of the simulation based on their arrival time. -----Input----- The first line of the input contains two integers `n` and `p` (1 leq n leq 10^5, 1 leq p leq n), the number of patients and the maximum number of patients the ED can handle at any time. The next `n` lines each contain two integers t and s (0 leq t leq 10^9, 1 leq s leq 100), representing the arrival time and severity level of the patients in the order they arrive. -----Output----- Output `p` lines, each containing two integers t and s, representing the arrival time and severity level of the patients handled in the ED at the end of the simulation. Print the patients in the order they arrived. -----Examples----- Sample Input 1: 5 3 1 50 2 40 3 60 4 70 5 30 Sample Output 1: 1 50 3 60 4 70 Sample Input 2: 7 4 1 80 2 90 3 85 4 30 5 70 6 95 7 40 Sample Output 2: 1 80 2 90 3 85 6 95","solution":"import heapq def admit_patients(n, p, patients): # Use a min-heap to maintain the current patients in the ED based on severity ed_heap = [] # Iterate over patients for t, s in patients: if len(ed_heap) < p: heapq.heappush(ed_heap, (s, t)) else: # Peek at the patient with the lowest severity min_severity, min_time = ed_heap[0] if s > min_severity: heapq.heappop(ed_heap) heapq.heappush(ed_heap, (s, t)) # Since we need to print in the order of arrival, sort by time handled_patients = sorted(ed_heap, key=lambda x: x[1]) return [(time, severity) for severity, time in handled_patients]"},{"question":"Consider a warehouse with multiple racks of containers arranged in a grid. Each container contains a certain number of items. You need to find the maximum number of items that can be fetched from this grid if you are allowed to make a single straight path in either a horizontal or vertical direction across the grid. Write a function maxItems(grid) that takes a 2D list \\"grid\\" representing the number of items in each container and returns the maximum number of items that can be fetched in a single straight path. Example 1: Input: grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: 24 Explanation: The maximum number of items can be fetched by going through the third column: 3 + 6 + 9 = 18. However, if we traverse the third row, we get more items: 7 + 8 + 9 = 24. Example 2: Input: grid = [ [1, 2], [3, 4] ] Output: 6 Explanation: The maximum number of items can be fetched by going through the second row: 3 + 4 = 7, which is more than any column or the first row. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxItems() which takes the 2D list grid and returns an integer representing the maximum number of items fetched in a single straight path. Constraints: - The grid will be a list of lists of integers. - The number of rows (R) and columns (C) in the grid will be such that 1 <= R, C <= 1000. - The number of items in each container will be an integer in the range 0 to 100.","solution":"def maxItems(grid): Returns the maximum number of items that can be fetched in a single straight path in the grid. max_sum = 0 # Check each row for row in grid: row_sum = sum(row) if row_sum > max_sum: max_sum = row_sum # Check each column cols = len(grid[0]) for col in range(cols): col_sum = sum(grid[row][col] for row in range(len(grid))) if col_sum > max_sum: max_sum = col_sum return max_sum"},{"question":"You are given a list of integers representing scores of different players in a game. A player is considered a winner if their score is greater than the average score. Write a program that calculates the average score and determines the number of players who are winners. Input The only line of the input contains a list of space-separated integers si (0 ≤ si ≤ 100) — scores of the players. The size of the list is between 1 and 20, inclusive. Note that the size of the list is not given explicitly! Output Output the number of players who have a score greater than the average score. Examples Input 45 67 23 89 34 Output 2 Input 20 20 20 20 Output 0 Input 90 100 95 85 Output 2","solution":"def count_winners(scores): Returns the number of players who have a score greater than the average score. scores : list a list of integers representing scores of different players in a game if not scores: return 0 average_score = sum(scores) / len(scores) winners_count = sum(1 for score in scores if score > average_score) return winners_count # Example usage scores_list = [45, 67, 23, 89, 34] print(count_winners(scores_list)) # Output: 2"},{"question":"Given an array of n integers and a target sum, determine whether there exist two distinct indices i and j in the array such that arr[i] + arr[j] equals the target sum. Note: Return 1, if there are two such indices otherwise return 0. Example 1: Input: n = 5, arr[] = {1, 2, 3, 4, 5}, target = 7 Output: 1 Explanation: 2 and 5 are at indices 1 and 4, which sum up to the target. Example 2: Input: n = 4, arr[] = {0, 3, 1, 2}, target = 6 Output: 0 Explanation: No two elements in the array sum up to the target. Your Task: You don\'t need to read input or print anything. Your task is to complete the boolean function findPairs() which takes the array arr[], the size of the array n, and the target sum as inputs and print 1 if the function returns true else print 0 if the function returns false. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^4 -10^6 <= arr[i] <= 10^6 -10^6 <= target <= 10^6","solution":"def findPairs(arr, n, target): Returns 1 if there exist two distinct indices i and j in the array such that arr[i] + arr[j] equals the target sum. Otherwise, returns 0. seen = set() for num in arr: if target - num in seen: return 1 seen.add(num) return 0"},{"question":"Task Write a function that takes an array of strings and returns a new array where each string is reversed, and all characters are converted to lowercase. Example ```python >>> reverse_and_lowercase([\\"Hello\\", \\"World\\"]) [\'olleh\', \'dlrow\'] >>> reverse_and_lowercase([\\"Python\\", \\"Programming\\"]) [\'nohtyp\', \'gnimmargorp\'] ```","solution":"def reverse_and_lowercase(strings): Takes an array of strings and returns a new array where each string is reversed and all characters are converted to lowercase. Args: strings (list): List of strings. Returns: list: List of processed strings. return [s[::-1].lower() for s in strings]"},{"question":"Given a list of integers, find all the unique pairs of integers whose sum is equal to a specified target value and print the pairs. Example arr = [1, 2, 3, 4, 3] target = 6 The pairs are (2, 4) and (3, 3) Function Description Complete the findPairs function in the editor below. findPairs has the following parameter(s): arr: an array of integers target: an integer representing the target sum Print Print all unique pairs of integers from the array whose sum equals the target value, one pair per line. Each pair should be printed in ascending order and each unique pair should be printed only once. Input Format The first line is an integer n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. The third line is the target integer. Constraints 1 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9 Output Format Print each unique pair on a new line in the format: (x, y) where x ≤ y. Pairs should be printed in ascending order based on the first element, and if the first elements are the same, based on the second element. Sample Input 5 1 2 3 4 3 6 Sample Output (2, 4) (3, 3) Explanation The numbers are [1, 2, 3, 4, 3]. The pairs that add up to the target value 6 are (2, 4) and (3, 3).","solution":"def findPairs(arr, target): Prints all unique pairs of integers from the array whose sum equals the target value. found = set() pairs = set() for num in arr: complement = target - num if complement in found: pair = tuple(sorted((num, complement))) pairs.add(pair) found.add(num) for pair in sorted(pairs): print(pair)"},{"question":"Conference Room Scheduling You have been given the task of developing a scheduling system for conference rooms in a company. Each conference room is available from 9:00 AM to 5:00 PM, and meetings can be scheduled in 30-minute increments. Multiple meetings can be scheduled in one day across different rooms, but no two meetings can overlap in the same room. The meetings are represented by their start and end times. Your task is to assign each meeting to a room in such a way that no two meetings in the same room overlap and to determine the minimum number of rooms required. Input The input consists of a single test case. The first line contains an integer n (1 leq n leq 100,000), where n is the number of meetings. Each of the following n lines contains two integers s_i and e_i (1 leq s_i < e_i leq 16), representing the start and end times of the meetings in 30-minute intervals past 9:00 AM. For example: - 9:00 AM is represented as 1 - 9:30 AM is represented as 2 - 10:00 AM is represented as 3 - and so on up to 5:00 PM represented as 16. Output Output the minimum number of conference rooms required. If multiple scheduling arrangements use the same number of rooms, you may return any valid arrangement. Sample Input 1 3 1 4 2 5 6 8 Sample Output 1 2 Sample Input 2 4 1 3 3 5 5 7 7 9 Sample Output 2 1 Explanation for Sample Outputs In the first sample input, the meetings are scheduled as follows: - The first meeting from 9:00 AM to 10:30 AM (1 to 4). - The second meeting from 9:30 AM to 11:00 AM (2 to 5). - The third meeting from 12:00 PM to 1:00 PM (6 to 8). Two rooms are required because the first two meetings overlap. In the second sample input, all meetings can be scheduled in a single room without any overlaps.","solution":"import heapq def minMeetingRooms(meetings): Determine the minimum number of conference rooms required to schedule all meetings such that no two meetings overlap in the same room. Args: meetings (List[Tuple[int, int]]): A list of tuples where each tuple contains the start and end times of a meeting. Returns: int: The minimum number of conference rooms required. if not meetings: return 0 # Sort meetings by starting time meetings.sort(key=lambda x: x[0]) # Initialize a min heap to keep track of end times of meetings in rooms minHeap = [] # Add the first meeting end time to the heap heapq.heappush(minHeap, meetings[0][1]) for i in range(1, len(meetings)): current_meeting_start = meetings[i][0] current_meeting_end = meetings[i][1] # If the current meeting starts after or when the earliest meeting ends, reuse the room if current_meeting_start >= minHeap[0]: heapq.heappop(minHeap) # Allocate a new room heapq.heappush(minHeap, current_meeting_end) # The size of the heap is the number of rooms needed return len(minHeap)"},{"question":"Given a string `s` and a pattern `p`, implement a function to determine if `s` matches `p`. The pattern `p` is a string with two types of characters: 1. `?` which matches any single character. 2. `*` which matches any sequence of characters (including the empty sequence). The function should return `True` if `s` matches the pattern `p` and `False` otherwise. Example 1: ``` Input: s = \\"aa\\", p = \\"a\\" Output: False Explanation: \\"a\\" does not match \\"aa\\". ``` Example 2: ``` Input: s = \\"aa\\", p = \\"*\\" Output: True Explanation: \'*\' matches any sequence. ``` Example 3: ``` Input: s = \\"cb\\", p = \\"?a\\" Output: False Explanation: \'?\' matches \'c\', but second character in pattern is \'a\', which does not match \'b\'. ``` Example 4: ``` Input: s = \\"adceb\\", p = \\"*a*b\\" Output: True Explanation: The pattern matches \'adceb\', as \'*\' matches \'ad\' and then \'a\' matches \'a\', followed by \'*\' matching \'c\' and \'e\', and \'b\' matches \'b\'. ``` You are required to write a function `isMatch(s: str, p: str) -> bool` that implements the above logic.","solution":"def isMatch(s: str, p: str) -> bool: Determines if the given string s matches the given pattern p. ? matches any single character. * matches any sequence of characters (including the empty sequence). # Initialize a 2D DP array with False values. dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)] # Empty pattern matches empty string dp[0][0] = True # Handle patterns with * for j in range(1, len(p) + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 1] for i in range(1, len(s) + 1): for j in range(1, len(p) + 1): if p[j - 1] == \'*\': # Star can match zero or more characters dp[i][j] = dp[i][j - 1] or dp[i - 1][j] elif p[j - 1] == \'?\' or s[i - 1] == p[j - 1]: # Character matches dp[i][j] = dp[i - 1][j - 1] return dp[len(s)][len(p)]"},{"question":"In the world of binary operations, a common task involves working with sequences of binary digits (0s and 1s). Suppose you are provided with a sequence of binary digits. Your task is to determine the minimum number of operations required to make all the digits in the sequence the same, either all 0s or all 1s. An operation is defined as selecting a contiguous subsequence of the binary sequence and flipping all the bits within that subsequence (changing 0s to 1s and 1s to 0s). Write a program that computes the minimum number of such operations needed. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains a binary string S representing the sequence of binary digits. Output Format For each test case, output the minimum number of operations required on a new line. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 Sample Input 00 2 000111000 11111 Sample Output 00 1 0 Explanation For the first test case, you can flip the entire sequence once to make it all 1s, or you can flip any one of the contiguous subsequences of 0s to make it all zeros. In this case, you need at least 1 operation. For the second test case, the sequence is already all 1s, so no operations are needed, hence 0 operations.","solution":"def min_operations_to_make_uniform(binary_strings): Computes the minimum number of operations needed to make all binary digits in the sequence the same, either all 0s or all 1s. Parameters: binary_strings (list of str): A list of binary strings. Returns: list of int: A list of integers representing the minimum number of operations needed. result = [] for s in binary_strings: # If the string is already uniform if \'0\' not in s or \'1\' not in s: result.append(0) continue # Counting transitions between 0s and 1s transitions = 0 for i in range(1, len(s)): if s[i] != s[i-1]: transitions += 1 # The number of flips required is half the number of transitions plus one result.append((transitions + 1) // 2) return result"},{"question":"Given an integer `n` and a list of `n` tasks represented by their durations, write a function that computes the minimal total time required to complete all tasks if you are allowed to perform up to two tasks simultaneously. The tasks need to be performed in the order given in the list. Input: - An integer `n` (1 ≤ n ≤ 100), the number of tasks. - A list of `n` positive integers representing the duration of each task. Output: - A single integer representing the minimal total time required to complete all tasks. # Examples: **Example 1:** Input: ``` 3 4 2 5 ``` Output: ``` 9 ``` **Example 2:** Input: ``` 4 1 2 3 4 ``` Output: ``` 6 ``` Explanation: In Example 1, you can perform the tasks like this: - Perform task 1 (4 units) and task 2 (2 units) simultaneously. Total time: `max(4, 2) = 4` units. - Then perform task 3 (5 units). Total time: `4 + 5 = 9` units. In Example 2, you can perform the tasks like this: - Perform task 1 (1 unit) and task 2 (2 units) simultaneously. Total time: `max(1, 2) = 2` units. - Perform task 3 (3 units) and task 4 (4 units) simultaneously. Total time: `max(3, 4) = 4` units. - In the end, total time required is `2 + 4 = 6` units.","solution":"def minimal_total_time(n, tasks): Computes the minimal total time required to complete all tasks if you are allowed to perform up to two tasks simultaneously. :param n: int - the number of tasks :param tasks: list of int - the duration of each task :return: int - the minimal total time required to complete all tasks total_time = 0 i = 0 # Iterate over tasks two at a time while i < n: if i + 1 < n: # Perform two tasks simultaneously total_time += max(tasks[i], tasks[i + 1]) i += 2 else: # Perform the last remaining task total_time += tasks[i] i += 1 return total_time"},{"question":"In this problem, you need to find the smallest window in a string containing all characters of another string. You are given two strings `s` and `t`. Your task is to find the minimum window in `s` which will contain all the characters in `t` (including duplicates). If no such window exists, return the empty string. If there are multiple such windows, return the one which occurs first. -----Input----- Two strings, `s` and `t` where: * 1 leq |s|, |t| leq 10^5 * Strings `s` and `t` consist of only lowercase English letters. -----Output----- A string representing the minimum window in `s` which contains all characters of `t`. If no such window exists, return the empty string. -----Examples----- Input: ADOBECODEBANC ABC Output: BANC Input: a a Output: a Input: a aa Output: (empty string) -----Note----- In the first example, the window \\"BANC\\" is the smallest window in `s` which contains all characters of `t`. In the second example, since both strings are identical, the output is the single character \\"a\\". In the third example, the string `t` has two \'a\' characters, but the string `s` has only one, hence no valid window exists.","solution":"from collections import Counter, defaultdict def min_window(s, t): Returns the minimum window in `s` which contains all characters in `t`. If no such window exists, returns the empty string. if not s or not t or len(t) > len(s): return \\"\\" t_freq = Counter(t) current_freq = defaultdict(int) required = len(t_freq) formed = 0 l, r = 0, 0 min_len = float(\'inf\') min_window = (0, 0) while r < len(s): current_char = s[r] current_freq[current_char] += 1 if current_char in t_freq and current_freq[current_char] == t_freq[current_char]: formed += 1 while l <= r and formed == required: current_len = r - l + 1 if current_len < min_len: min_len = current_len min_window = (l, r) current_char = s[l] current_freq[current_char] -= 1 if current_char in t_freq and current_freq[current_char] < t_freq[current_char]: formed -= 1 l += 1 r += 1 if min_len == float(\'inf\'): return \\"\\" else: start, end = min_window return s[start:end+1]"},{"question":"You are given an array of integers and multiple queries. Each query consists of two integers, l and r. The task is to compute and print the sum of elements from index l to index r (inclusive) for each query. The array is 0-indexed. Constraints * 1 leq n leq 100,000 * 1 leq q leq 100,000 * 1 leq a_i leq 1,000 (the value of each element in the array) * 0 leq l leq r < n Input The input is given in the following format. ``` n ; q a_1 ; a_2 ; ... ; a_n l_1 ; r_1 l_2 ; r_2 : l_q ; r_q ``` Output For each query, output the sum of elements from index l to r inclusive. Example Input ``` 5 3 1 2 3 4 5 0 1 1 3 0 4 ``` Output ``` 3 9 15 ```","solution":"def preprocess_array(arr): Preprocess the array to create a prefix sum array. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] return prefix_sum def range_sum(prefix_sum, l, r): Compute the sum of elements from index l to index r using the prefix sum array. return prefix_sum[r + 1] - prefix_sum[l] def answer_queries(arr, queries): Answer the sum queries on the array. prefix_sum = preprocess_array(arr) results = [] for l, r in queries: results.append(range_sum(prefix_sum, l, r)) return results"},{"question":"You are managing a warehouse that holds a variety of electronic components. Each component is identified by a unique product code and has a specific quantity in stock. Your task is to create a system that can process a series of orders and update the stock quantity accordingly. If an order requests more units of a component than are available in stock, the order should be partially fulfilled with the available stock, and the stock quantity for that component should be set to zero. Input The program will receive multiple datasets as input. Each dataset begins with an integer n (1 ≤ n ≤ 1000) indicating the number of different components in the warehouse, followed by n lines, where each line contains a product code (a string of maximum 10 characters) and an integer qi (1 ≤ qi ≤ 10000), representing the quantity of the component in stock. This is followed by an integer m (1 ≤ m ≤ 1000) indicating the number of orders, followed by m lines, where each line contains a product code and an integer oi (1 ≤ oi ≤ 10000), representing the quantity ordered. Output For each dataset, the program should output one line for each order, indicating the product code and the quantity actually supplied. If an order cannot be fully fulfilled, the remaining quantity should be 0. Example Input 3 PC123 50 PC124 80 PC125 60 4 PC123 30 PC124 100 PC126 10 PC125 45 2 COMP1 100 COMP2 200 3 COMP1 50 COMP3 30 COMP2 250 0 Output PC123 30 PC124 80 PC126 0 PC125 45 COMP1 50 COMP3 0 COMP2 200","solution":"def manage_warehouse(datasets): output = [] for dataset in datasets: n = dataset[0] stock = {} # Read stock information idx = 1 for _ in range(n): product_code, quantity = dataset[idx].split() stock[product_code] = int(quantity) idx += 1 m = int(dataset[idx]) idx += 1 # Read orders and fulfill them for _ in range(m): product_code, order_quantity = dataset[idx].split() order_quantity = int(order_quantity) idx += 1 if product_code in stock: available_quantity = stock[product_code] if available_quantity >= order_quantity: fulfilled_quantity = order_quantity stock[product_code] -= order_quantity else: fulfilled_quantity = available_quantity stock[product_code] = 0 else: fulfilled_quantity = 0 output.append(f\\"{product_code} {fulfilled_quantity}\\") return output"},{"question":"You are working on a logistics management system for a large warehouse. The warehouse keeps track of the movement of items in and out of the storage units on a daily basis. Each item movement record consists of the following information: - An item identifier - The quantity of the item moved - The day of the movement - A type indicating whether the movement is an \\"IN\\" or \\"OUT\\" movement You need to generate a report that shows the closing inventory count for each item for each day where there was at least one movement record. The closing inventory count is calculated by summing the quantities of all \\"IN\\" movements and subtracting the quantities of all \\"OUT\\" movements for each item up to that day. -----Input----- The first line of input contains an integer M (1 le M le 50), the total number of movement records. The next M lines contain the movement records. Each record consists of an item identifier (a string without spaces of maximum length 10), an integer quantity Q (1 le Q le 100), an integer day D (1 le D le 365), and a type (\\"IN\\" or \\"OUT\\"). -----Output----- Print the closing inventory count for each item for each day where there was at least one movement record, sorted first by day and then by item identifier. -----Examples----- Sample Input: 5 ItemA 20 10 IN ItemB 10 10 IN ItemA 5 11 OUT ItemB 4 12 OUT ItemA 10 12 IN Sample Output: 10 ItemA 20 10 ItemB 10 11 ItemA 15 12 ItemA 25 12 ItemB 6","solution":"def calculate_closing_inventory(movements): Calculate the closing inventory count for each item for each day where there was at least one movement record. Parameters: movements (list): List of tuples containing the movement records. Returns: list: List of tuples showing the day, item identifier, and closing inventory count. inventory = {} for item_id, quantity, day, movement_type in movements: if item_id not in inventory: inventory[item_id] = {} if day not in inventory[item_id]: inventory[item_id][day] = 0 if movement_type == \\"IN\\": inventory[item_id][day] += quantity elif movement_type == \\"OUT\\": inventory[item_id][day] -= quantity closing_inventory = {} for item_id, days in inventory.items(): sorted_days = sorted(days.keys()) cumulative_quantity = 0 for day in sorted_days: cumulative_quantity += days[day] if day not in closing_inventory: closing_inventory[day] = [] closing_inventory[day].append((item_id, cumulative_quantity)) result = [] for day in sorted(closing_inventory.keys()): for item_count in sorted(closing_inventory[day]): result.append((day, item_count[0], item_count[1])) return result"},{"question":"Given a list of words, write a function that groups the words that are anagrams of each other. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. The function should return a list of lists, where each inner list contains words that are anagrams of each other. **Example:** ```python group_anagrams([\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]) # returns [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ``` ```C# AnagramGrouper.Group(new List<string> {\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"}); # returns new List<List<string>> {new List<string> {\\"eat\\", \\"tea\\", \\"ate\\"}, new List<string> {\\"tan\\", \\"nat\\"}, new List<string> {\\"bat\\"}} ```","solution":"from collections import defaultdict def group_anagrams(words): Groups the words that are anagrams of each other. Args: words (list of str): List of words to group. Returns: list of list of str: Grouped anagrams. anagram_dict = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"Given an integer array, find the sum of the maximum subarray using the Kadane\'s algorithm. Input Format A single line containing space-separated integers - the elements of the array. Output Format Print a single integer which is the sum of the maximum subarray. Input Constraints 1 ≤ N ≤ 1000, where N is the number of elements in the array. -1000 ≤ Ai ≤ 1000, where Ai is the ith element of the array. SAMPLE INPUT -2 1 -3 4 -1 2 1 -5 4 SAMPLE OUTPUT 6 Explanation The maximum subarray is [4, -1, 2, 1], with a sum of 6.","solution":"def max_subarray_sum(arr): Returns the sum of the maximum subarray using Kadane\'s algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function `normalize_names(*names)` that takes a variable number of names as arguments and returns a list where each name has the first letter of each word capitalized and the rest of the letters in lowercase. For example, given `normalize_names(\\"alice smith\\", \\"JOHN DOE\\", \\"aVA bRoWN\\", \\"mary-jane\\", \\"MARy bELLe\\")`, the function should return: ```python [\'Alice Smith\', \'John Doe\', \'Ava Brown\', \'Mary-jane\', \'Mary Belle\'] ``` # Constraints - Each element in the list of names will be a non-empty string containing alphabetic characters only or hyphens. - The function should handle an arbitrary number of names. - The input names are guaranteed to be valid strings.","solution":"def normalize_names(*names): Takes a variable number of names as arguments and returns a list where each name has the first letter of each word capitalized and the rest of the letters in lowercase. def capitalize_name(name): # Split the name by spaces parts = name.split(\' \') # Capitalize each part and join them back with spaces return \' \'.join(part.capitalize() for part in parts) # Normalize each name return [capitalize_name(name) for name in names]"},{"question":"Given an integer array, determine the smallest positive integer that cannot be represented as a sum of any subset of the given array. Your task is to write a function that, given an array of positive integers, returns the smallest positive integer that is not the sum of a subset of the array. ------ Input Format ------ - The first line of input contains a single integer n, denoting the number of elements in the array. - The second line contains n space-separated integers, denoting the elements of the array. ------ Output Format ------ - Output a single integer, the smallest positive integer that cannot be represented as a sum of any subset of the array. ------ Constraints ------ 1 ≤ n ≤ 10^{5} 1 ≤ a_{i} ≤ 10^{9} ---- Sample Input 1 ---- 5 1 2 2 5 7 ---- Sample Output 1 ---- 18 ---- Sample Input 2 ---- 3 1 1 1 ---- Sample Output 2 ---- 4 ---- Explanation ---- For the first sample, the subsets of the array can generate sums of 1 through 17 using different combinations. However, 18 is the smallest positive integer that cannot be formed. For the second sample, the possible sums we can get from different combinations of the array elements are 1, 2, and 3. Thus, 4 is the smallest integer that cannot be formed.","solution":"def smallest_missing_positive_integer(arr): Determine the smallest positive integer that cannot be represented as a sum of any subset of the given array. arr.sort() smallest_missing = 1 for num in arr: if num > smallest_missing: break smallest_missing += num return smallest_missing"},{"question":"Jenny loves trading on the stock market. She follows a pattern of buying and selling based on the historical prices of a particular stock. Given a series of daily prices for a stock, Jenny wants to maximize her profit by choosing a single day to buy shares and another(later) day to sell those shares. Write a function that takes in a list of integers representing the daily prices of a stock and returns the maximum profit Jenny can achieve. If no profit can be made, return 0. Function Signature: ```python def max_profit(prices: List[int]) -> int: ``` **Input:** - A list of integers `prices` representing the price of a stock on each day. **Output:** - An integer which is the maximum profit Jenny can achieve from buying and then selling one share of the stock. **Constraints:** - The length of the prices list will be between 1 and 10^5. - Each price will be a non-negative integer and less than or equal to 10^4. **Example:** **Input:** ``` [7, 1, 5, 3, 6, 4] ``` **Output:** ``` 5 ``` **Explanation:** - Jenny can buy the stock on day 2 (price = 1) and sell it on day 5 (price = 6), for a maximum profit of 6-1=5. **Example:** **Input:** ``` [7, 6, 4, 3, 1] ``` **Output:** ``` 0 ``` **Explanation:** - In this case, no transaction is done, and the maximum profit is 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling stock on given days. If no profit can be made, returns 0. # Initialize the minimum price to a very high value and maximum profit to 0 min_price = float(\'inf\') max_profit = 0 # Iterate over each price in the list for price in prices: # Update the minimum price if the current price is lower than the minimum price seen so far if price < min_price: min_price = price # Calculate the potential profit with the current price and update the maximum profit if it\'s higher than the previous maximum profit elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"In a certain country, the postal system organizes the distribution of letters in batches. Each batch is identified by a unique batch number and can carry several letters destined for different postal codes. Keeping track of which batch contains letters for which postal codes is essential for efficiently managing the distribution process. You are tasked with implementing a reporting tool to help the postal system. Given the information about several batches and the postal codes they include, your goal is to determine the number of unique postal codes across all batches. Input: - The first line of input contains a single integer ( T ) (1 ≤ ( T ) ≤ 100), the number of batches. - The next ( T ) lines each describe a batch: the first value in each line is an integer ( B_i ) (1 ≤ ( B_i ) ≤ 50), the number of postal codes in the batch, followed by ( B_i ) unique integers representing the postal codes (each postal code is a positive integer not exceeding 10000). Output: - Output a single integer, the number of unique postal codes across all batches. Example: Input: 3 5 101 202 303 404 505 3 202 606 707 4 808 909 1010 101 Output: 10 Explanation: The batches are as follows: - Batch 1: Postal codes 101, 202, 303, 404, 505 - Batch 2: Postal codes 202, 606, 707 - Batch 3: Postal codes 808, 909, 1010, 101 The unique postal codes across all batches are 101, 202, 303, 404, 505, 606, 707, 808, 909, and 1010, giving a total of 10 unique postal codes.","solution":"def count_unique_postal_codes(T, batches): unique_postal_codes = set() for batch in batches: postal_codes = batch[1:] unique_postal_codes.update(postal_codes) return len(unique_postal_codes)"},{"question":"A popular online bookshop gives a discount on books based on the following criteria: - If the number of books is less than 4, no discount is applied. - If the number of books is 4 or 5, a discount of 10% is applied. - If the number of books is 6 or more, a discount of 15% is applied. You are given the prices of N books as input. Your task is to calculate the total cost after applying the appropriate discount if applicable. -----Constraints----- - 1 leq N leq 20 - Each price is a floating-point number such that 1.0 leq price leq 200.0 -----Input----- Input is given from Standard Input in the following format: N price_1 price_2 : price_N -----Output----- If the total cost after discount is Y, print the value Y (up to two decimal places). -----Sample Input----- 5 100.0 150.0 200.0 100.0 50.0 -----Sample Output----- 540.00 The total cost without discount is 600.0. Since the number of books is 5, a discount of 10% is applied, making the final cost 600.0 * 0.90 = 540.0. Therefore, the output is 540.00.","solution":"def calculate_total_cost(N, prices): Calculate the total cost after applying appropriate discount based on the given number of books and their prices. Args: N (int): Number of books. prices (list of float): List of prices of the books. Returns: float: Total cost after applying discount, rounded to two decimal places. total_cost = sum(prices) if N >= 6: discount = 0.15 elif N >= 4: discount = 0.10 else: discount = 0.0 discounted_cost = total_cost * (1 - discount) return round(discounted_cost, 2)"},{"question":"Write a function that takes a list of integers and returns a list of the same integers sorted in ascending order but with even integers appearing before odd integers, while maintaining their original relative order among even and odd numbers. # Example ```python special_sort([3, 1, 2, 4, 7, 9, 6]) ==> [2, 4, 6, 3, 1, 7, 9] ```","solution":"def special_sort(nums): Sort the numbers such that even numbers come first, maintaining their original relative order among even and odd numbers. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"Jessica loves organizing parties and always prepares treat bags for her guests. Each treat bag must contain at least one treat. The types of treats available are: - lollipops (each lollipop costs 2 units), - chocolates (each chocolate costs 3 units), - cookies (each cookie costs 5 units). Jessica wants to spend exactly m units to prepare treat bags such that she maximizes the total number of treats per bag. Each treat bag can contain only one type of treat. Your task is to determine the maximum number of treats that can be placed in the treat bags with the given amount of money. For example: if Jessica has 20 units, she can buy 10 lollipops or 6 chocolates or 4 cookies, thereby maximizing the treats per bag; if Jessica has 7 units, she can buy 3 lollipops for 6 units and have 1 unit remaining which cannot be used to buy another treat; if Jessica has 13 units, she can buy 4 lollipops for 8 units and have 5 units remaining to buy 1 cookie or 1 chocolate; if Jessica has 25 units, she can buy 12 lollipops for 24 units and have 1 unit remaining which cannot be used to buy another treat. -----Input----- The first line contains a single integer q (1 le q le 10^4) — the number of test cases. Each test case consists of a single line that contains a single integer m (1 le m le 10^9) — the amount of money Jessica has. -----Output----- For each test case, print one integer — the maximum number of treats Jessica can buy with the given amount of money. -----Examples----- Input 5 20 7 13 25 3 Output 10 3 8 12 1","solution":"def max_treats(m): Given amount of money m, return the maximum number of treats that can be bought. Treat prices are defined as: - Lollipops: 2 units - Chocolates: 3 units - Cookies: 5 units Since we want to maximize the number of treats, lollipops (least expensive) should be chosen first. return m // 2"},{"question":"You are given a number of apples and a bag with a specified capacity. Each apple has a certain weight. Determine the minimum number of apples required to fill the bag to at least its capacity using a given list of apple weights. -----Input----- There will be a single test case in the input. Each test case will begin with a line with two integers: n C Where n (1 le n le 1000) is the number of apples and C (1 le C le 10000) is the capacity of the bag. The next line will contain n integers: w_1, w_2, ..., w_n Each w_i (1 le w_i le 1000) represents the weight of the i-th apple. -----Output----- Output the minimum number of apples required to fill the bag to at least its capacity. If it is not possible to reach the capacity with the given apples, print -1. -----Examples----- Sample Input: 5 20 5 7 1 10 2 Sample Output: 3 Sample Input: 4 15 10 10 10 10 Sample Output: 2","solution":"def min_apples_to_fill_bag(n, C, weights): Returns the minimum number of apples required to fill the bag to at least its capacity C. :param n: int - number of apples :param C: int - capacity of the bag :param weights: list of int - list of apple weights :return: int - minimum number of apples needed or -1 if it\'s not possible weights.sort(reverse=True) # Sort weights in descending order current_sum = 0 for i, weight in enumerate(weights): current_sum += weight if current_sum >= C: return i + 1 return -1"},{"question":"You are given a list of integers representing heights of various peaks along a mountain range. The problem is to identify all the peaks, where a peak is defined as any integer that is greater than its immediate neighbors. For the first and last elements, only one comparison is done since they have only one neighbor. Write a function to find all the peaks and return their heights. If there are no peaks, return an empty list. **Input**: - An integer list `heights` of length n (1 ≤ n ≤ 10^5). **Output**: - A list of integers representing the heights of all the peaks. **Function Signature**: ```python def find_peaks(heights: List[int]) -> List[int]: pass ``` **Example Input**: ```python heights = [1, 3, 2, 4, 1, 0] ``` **Example Output**: ```python [3, 4] ``` **Explanation**: - For the input list `[1, 3, 2, 4, 1, 0]`, the peaks are 3 and 4. - 3 is greater than both its neighbors (1 and 2). - 4 is greater than both its neighbors (2 and 1). **Example Input**: ```python heights = [5, 2, 7, 3, 8, 6, 4] ``` **Example Output**: ```python [5, 7, 8] ``` **Explanation**: - For the input list `[5, 2, 7, 3, 8, 6, 4]`, the peaks are 5, 7, and 8. - 5 is greater than its only neighbor 2. - 7 is greater than both its neighbors (2 and 3). - 8 is greater than both its neighbors (3 and 6).","solution":"from typing import List def find_peaks(heights: List[int]) -> List[int]: Finds all the peaks in the list of heights. A peak is defined as an element greater than its immediate neighbors. if not heights: return [] n = len(heights) peaks = [] for i in range(n): if i == 0: # First element if n == 1 or heights[i] > heights[i + 1]: peaks.append(heights[i]) elif i == n - 1: # Last element if heights[i] > heights[i - 1]: peaks.append(heights[i]) else: # Middle elements if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: peaks.append(heights[i]) return peaks"},{"question":"There are n employees in a company, each with a certain level of productivity. The manager wants to improve overall productivity by replacing some employees with new hires. Replacing an employee incurs a certain cost proportional to the difference in productivity between the old employee and the new hire. The manager has set a budget for replacements, and replacements can only happen if the total replacement cost does not exceed this budget. You need to determine whether it\'s possible to achieve an average productivity of at least a given target T with the budget provided. ---Input--- The first line contains three integers n, T, and B (1 le n le 10^5, 0 le T le 10^5, 1 le B le 10^9) — the number of employees, the target productivity, and the budget for replacements, respectively. The second line contains n space-separated integers p_1, p_2, dots, p_n (0 le p_i le 10^5) — the current productivity levels of the employees. The third line contains n space-separated integers c_1, c_2, dots, c_n (1 le c_i le 10^5) — the cost to replace each employee. ---Output--- Print \\"YES\\" if it is possible to achieve an average productivity of at least T with the given budget, and \\"NO\\" otherwise. ---Examples--- Input 5 15 100 10 20 5 30 25 10 5 20 15 25 Output YES Input 4 40 50 10 20 30 40 30 20 10 50 Output NO ---Note--- In the first example, it is possible to replace the employee with productivity 5 with a new hire that has a higher productivity within the given budget. The manager can replace specific employees while keeping the total replacement cost within the budget and achieving the desired average productivity. In the second example, it is not possible to achieve the target productivity even with the maximum allowed replacements within the budget, so the output is \\"NO\\".","solution":"def can_achieve_target_productivity(n, T, B, current_productivities, replacement_costs): import heapq deficit = (T * n) - sum(current_productivities) if deficit <= 0: return \\"YES\\" deficit_per_productivity = [] for p, c in zip(current_productivities, replacement_costs): if p < T: additional_prod = T - p heapq.heappush(deficit_per_productivity, (c / additional_prod, additional_prod, c)) total_cost = 0 while deficit > 0 and deficit_per_productivity: cost_efficiency, additional_prod, cost = heapq.heappop(deficit_per_productivity) if deficit >= additional_prod: total_cost += cost deficit -= additional_prod else: total_cost += cost * (deficit / additional_prod) deficit = 0 if total_cost > B: return \\"NO\\" return \\"YES\\" if deficit <= 0 and total_cost <= B else \\"NO\\""},{"question":"You are given a list of n projects. Each project i takes a[i] number of days to complete. Due to limited resources, you can only work on a single project at any given time. However, you can pause a project you are currently working on to start another project, and you can resume any paused project at any later time without any additional cost. Your goal is to create a schedule for completing all projects in such a way that you minimize the total number of days before all projects are completed. Formally, you should output the total number of days required to complete all projects when scheduled optimally. # Input The first line contains an integer n (1 le n le 2 cdot 10^5), the number of projects. The second line contains n space-separated integers a[1], a[2], ..., a[n] (1 le a[i] le 10^9), representing the number of days required to complete each project. # Output Print a single integer representing the minimum total number of days required to complete all projects. # Example Input ``` 5 4 2 1 3 5 ``` Output ``` 15 ``` # Explanation One optimal way to complete the projects is in the order 1 rightarrow 3 rightarrow 2 rightarrow 4 rightarrow 5: - Day 1: Work on project 3 (1 day required, 1 day elapsed). - Day 2: Work on project 2 (2 days required, 2 days elapsed). - Day 4: Work on project 4 (3 days required, 3 days elapsed). - Day 7: Work on project 1 (4 days required, 4 days elapsed). - Day 11: Work on project 5 (5 days required, 5 days elapsed). Total days elapsed: 1 + 2 + 3 + 4 + 5 = 15.","solution":"def min_total_days(n, a): Calculates the minimum total number of days required to complete all projects. Parameters: n (int): The number of projects. a (list): List of integers where each integer represents the number of days to complete each project. Returns: int: The minimum total number of days required to complete all projects. # Sort the list of projects by required days in ascending order a.sort() # Calculate the total number of days by summing all elements return sum(a)"},{"question":"As an experienced software engineer, you are tasked with implementing a feature for an online bookstore\'s recommendation system. The bookstore has a list of n books, each with a unique identifier, title, and author. The system recommends books based on user search queries, which are substrings of the titles. Your task is to write a function that, given a list of books and a search query (a single string), returns a list of books whose titles contain the search query as a substring. The list should be sorted alphabetically by title. Input: The first line contains an integer n (1 ≤ n ≤ 100), the number of books in the list. Each of the next n lines contains a string representing a book\'s title. It\'s guaranteed that the book title length does not exceed 100 characters. The last line contains a string q (1 ≤ |q| ≤ 100), the search query. Output: Print the titles of the books whose titles contain the search query as a substring, sorted alphabetically. If no books match the search query, print \\"No match found\\". Examples Input 4 Harry Potter and the Sorcerer\'s Stone The Great Gatsby To Kill a Mockingbird Pride and Prejudice Potter Output Harry Potter and the Sorcerer\'s Stone Input 3 Deep Work Thinking, Fast and Slow The Power of Habit fast Output Thinking, Fast and Slow Input 3 War and Peace Crime and Punishment The Catcher in the Rye Hobbit Output No match found Note In the first example, only the book \\"Harry Potter and the Sorcerer\'s Stone\\" contains the substring \\"Potter\\". In the second example, the title \\"Thinking, Fast and Slow\\" contains the substring \\"fast\\". In the third example, none of the book titles contain the substring \\"Hobbit\\".","solution":"def recommend_books(n, books, query): Recommends books based on the search query. Parameters: n (int): Number of books books (list of str): List of book titles query (str): Search query string Returns: list of str: List of book titles which contain the search query sorted alphabetically. matching_books = [book for book in books if query.lower() in book.lower()] if not matching_books: return [\\"No match found\\"] return sorted(matching_books)"},{"question":"You are an explorer entering a series of caves in search of hidden treasures. Each cave has a number of chambers connected by tunnels, with each chamber containing a certain amount of gold. You start in the entrance chamber of the first cave and can move to other chambers within the same cave if they are connected. You aim to collect the maximum amount of gold possible, but you must leave the cave after visiting a specified number of chambers including the starting one. Each cave is represented by N chambers, M tunnels connecting them, and an array G where Gi is the amount of gold in the i-th chamber. All tunnels are bidirectional, and there are no loops or multiple tunnels between chambers. Determine the maximum amount of gold you can collect if you are allowed to visit exactly K chambers in one cave. Input The first line contains three integers, N, M, and K (2 ≤ N ≤ 100, 1 ≤ M ≤ 5000, 1 ≤ K ≤ N), separated by spaces. The second line contains N integers, where the i-th integer is the amount of gold in the i-th chamber (0 ≤ Gi ≤ 1000). The next M lines contain two integers u and v each, representing a tunnel between chambers u and v (0 ≤ u, v < N). Output Output a single integer — the maximum amount of gold you can collect by visiting exactly K chambers. Example Input 5 5 3 10 20 30 40 50 0 1 0 2 1 3 2 4 3 4 Output 90 Explanation There are 5 chambers with gold amounts [10, 20, 30, 40, 50]. The tunnels connect the chambers as follows: - Chamber 0 to Chamber 1 - Chamber 0 to Chamber 2 - Chamber 1 to Chamber 3 - Chamber 2 to Chamber 4 - Chamber 3 to Chamber 4 One optimal way to collect gold visiting exactly 3 chambers is: 0 -> 1 -> 3. Total gold collected = 10 + 20 + 40 = 70. Another optimal way to collect gold visiting 3 chambers is: 0 -> 2 -> 4. Total gold collected = 10 + 30 + 50 = 90.","solution":"def max_gold(N, M, K, gold, tunnels): from collections import defaultdict, deque # Create graph graph = defaultdict(list) for u, v in tunnels: graph[u].append(v) graph[v].append(u) def bfs_max_gold(start): max_gold = 0 queue = deque([(start, [start], gold[start])]) while queue: current, path, current_gold = queue.popleft() if len(path) == K: max_gold = max(max_gold, current_gold) continue for neighbor in graph[current]: if neighbor not in path: queue.append((neighbor, path + [neighbor], current_gold + gold[neighbor])) return max_gold # We start from chamber 0 return bfs_max_gold(0)"},{"question":"Marina is training for a competitive running event. She has a rectangular training field of size n × m, marked with a grid. Each cell in the grid can have some obstacles or pits that Marina needs to avoid. Each cell is either passable (\'.\') or blocked (\'#\'). Marina can move from a cell to another adjacent cell if and only if the destination cell is passable and they are horizontally or vertically adjacent. Marina wants to find out the shortest distance from her starting position (sx, sy) to the finishing position (fx, fy). Help Marina determine this distance. -----Input----- The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 1000), the dimensions of the field. The following n lines contain m characters each, describing the field. Each character is either a \'.\' (passable) or a \'#\' (obstacle). The characters on the i-th row and j-th column describe the cell (i, j). The next line contains two integers, sx and sy (1 ≤ sx ≤ n; 1 ≤ sy ≤ m), the starting position of Marina (sx-th row, sy-th column). The last line contains two integers, fx and fy (1 ≤ fx ≤ n; 1 ≤ fy ≤ m), the finishing position of Marina (fx-th row, fy-th column). It is guaranteed that the cells at the starting and finishing positions are passable (\'.\'). -----Output----- Print a single integer representing the shortest distance from the starting to the finishing position. If there is no such path, print -1. -----Examples----- Input 5 5 ..... .#.#. .#.#. .#.#. ..... 1 1 5 5 Output 8 Input 5 5 ..... . ..... . ..... 2 2 4 4 Output -1 -----Note----- Note to sample 1: Marina can move from (1,1) to (5,5) with the following path: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (1,5) -> (2,5) -> (3,5) -> (4,5) -> (5,5). Therefore, the shortest distance is 8. Note to sample 2: There is no passable path from (2,2) to (4,4) due to the obstacles. Hence, the output is -1.","solution":"from collections import deque def shortest_distance(n, m, grid, sx, sy, fx, fy): # Directions for moving in 4 possible directions (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Convert to 0-based indexing sx, sy, fx, fy = sx - 1, sy - 1, fx - 1, fy - 1 # BFS initialization queue = deque([(sx, sy)]) distances = [[-1] * m for _ in range(n)] distances[sx][sy] = 0 while queue: x, y = queue.popleft() if (x, y) == (fx, fy): return distances[x][y] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and distances[nx][ny] == -1: distances[nx][ny] = distances[x][y] + 1 queue.append((nx, ny)) return -1"},{"question":"You are given a string of lowercase English letters and a word length n. Your task is to generate all possible distinct substrings of the given string that are exactly n characters long. The substrings should be listed in lexicographical order. -----Input----- The input consists of a single line containing a string s and an integer n (1 ≤ n ≤ |s| ≤ 1000), where s is a string of lowercase English letters and n is the required length of substrings. -----Output----- Print all possible distinct substrings of length n in lexicographical order, each on a new line. If no such substrings exist, print \\"None\\" (without the quotes). -----Examples----- Input abcdef 3 Output abc bcd cde def Input aaabc 2 Output aa ab bc","solution":"def distinct_substrings_lexicographical(s, n): This function returns all unique substrings of length \'n\' from string \'s\' in lexicographical order. # Store all substrings of length n in a set to ensure uniqueness substrings = set() # Iterate over the string to extract all substrings of length n for i in range(len(s) - n + 1): substrings.add(s[i:i + n]) # Convert the set to a sorted list sorted_substrings = sorted(substrings) # If there are no substrings, return \\"None\\" if not sorted_substrings: return [\\"None\\"] return sorted_substrings"},{"question":"There is a small island with n houses aligned in a row from 1 to n. During a strong storm, each house either remains safe, gets damaged, or gets completely destroyed. The government wants to repair all the houses in exactly d days. You are given the initial state of the houses and can repair them according to the following rules: 1. A safe house remains safe. 2. A damaged house can be repaired to a safe state in one day. 3. A destroyed house can only be repaired in two phases: on the first day, it turns into a damaged house, and on the second day, it turns into a safe house. On each day, you can repair any number of houses simultaneously. Your task is to output the houses repaired each day such that the process finishes in exactly d days. If it is not possible to repair all the houses in d days, print `-1`. -----Input----- The first line contains two integers n and d (1 le n le 1000, 0 le d le 2000) - the number of houses and the number of days available. The next line contains a string of length n consisting of characters \'S\', \'D\', and \'R\', where: \'S\' means the house is safe, \'D\' means the house is damaged, and \'R\' means the house is destroyed. -----Output----- If it is not possible to repair all the houses in d days, print `-1`. Otherwise, output d lines. Each line should list the numbers of the houses repaired on that day. If there are multiple solutions, print any of them. -----Examples----- Input 5 3 SSRDR Output 1 4 1 5 2 5 Input 3 2 SDR Output -1 Input 6 4 RRDDSS Output 2 1 2 1 3 1 4 -----Note----- In the first example, one possible sequence of repairs could be: - Day 1: Repair house 4 to safe state. - Day 2: Repair house 5 to damaged state. - Day 3: Repair house 5 to safe state. In the second example, it\'s not possible to repair all houses within the given days. In the third example: - Day 1: Repair houses 1 and 2 to damaged state. - Day 2: Repair house 3 to safe state. - Day 3: Repair house 4 to safe state. - Remaining days could be left empty or with any safe houses listed as no-op operations.","solution":"def repair_houses(n, d, state): Repairs the houses in exactly d days according to the rules specified. n: int - the number of houses d: int - the number of days to finish repairing state: str - initial state of the houses Returns a list of lists, each containing the 1-based indices of houses repaired on that day or -1 if it\'s not possible. damaged = [] destroyed = [] for i in range(n): if state[i] == \'D\': damaged.append(i + 1) elif state[i] == \'R\': destroyed.append(i + 1) total_repair_length = len(damaged) + 2 * len(destroyed) if total_repair_length > d: return -1 days_left = d - total_repair_length repair_days = [[] for _ in range(d)] current_day = 0 for house in destroyed: repair_days[current_day].append(house) current_day += 1 if current_day >= d: return -1 for i in range(len(destroyed)): repair_days[current_day].append(destroyed[i]) current_day += 1 if current_day >= d: return -1 for house in damaged: repair_days[current_day].append(house) current_day += 1 if current_day >= d: return -1 return repair_days"},{"question":"The internet giant Komodix has recently launched a new streaming service. They are interested in recommending a playlist to their users based on the genre preferences of the users. Each user has provided a list of their top p favorite genres. Komodix wants to create a playlist of songs that includes as many of these top genres as possible, while keeping the number of songs in the playlist to a minimum. Komodix has a library of n songs, each tagged with a set of genres. They need help to generate the optimal playlist. -----Input----- The first line of input will contain two integers n and p (1 ≤ n ≤ 1000, 1 ≤ p ≤ 100) — the number of songs in the library and the number of genres each user prefers. The next line of input will contain p integers g_1, g_2, ..., g_{p} (1 ≤ g_{i} ≤ 1000). These integers represent the user\'s favorite genres. The following n lines of input will contain the genres for each of the n songs. Each line will start with an integer t (1 ≤ t ≤ 100) indicating the number of genres that the song is tagged with, followed by t space-separated integers representing these genres. -----Output----- Output a single integer, the minimum number of songs required to create a playlist that covers as many of the user\'s top genres as possible. If no such playlist can cover any of the user\'s top genres, output 0. -----Examples----- Input 5 3 2 3 5 3 1 2 3 2 2 5 1 3 2 4 5 3 1 2 5 Output 2 Input 4 2 7 8 2 4 6 3 5 7 8 1 9 2 8 10 Output 1 -----Note----- For the first sample test, the available songs cover genres like this: - Song 1: {1, 2, 3} - Song 2: {2, 5} - Song 3: {3} - Song 4: {4, 5} - Song 5: {1, 2, 5} The optimal solution is to select song 1 and song 2, which together cover the genres {2, 3, 5}. This is the smallest possible playlist size that covers all of the favorite genres. For the second sample test, the optimal solution is to select song 2, which covers genres {7, 8}, fulfilling the user\'s preferences with just one song.","solution":"from itertools import combinations def minimum_playlist(n, p, favorite_genres, songs): Returns the minimum number of songs required to create a playlist that covers as many of the user\'s top genres as possible. favorite_set = set(favorite_genres) # Generate all the genre sets for each song song_genre_sets = [] for song in songs: t, genres = song[0], set(song[1:]) song_genre_sets.append(genres) # Try increasing sizes of combinations until we find a playlist that covers the favorites for r in range(1, n + 1): # Check all combinations of songs of size r for song_comb in combinations(song_genre_sets, r): # Union of all genre sets in this combination combined_genres = set().union(*song_comb) # Check if this covers all favorite genres if favorite_set.issubset(combined_genres): return r return 0 # Example usage: # n, p = 5, 3 # favorite_genres = [2, 3, 5] # songs = [ # [3, 1, 2, 3], # [2, 2, 5], # [1, 3], # [2, 4, 5], # [3, 1, 2, 5] # ] # print(minimum_playlist(n, p, favorite_genres, songs)) # Output: 2"},{"question":"A programmer is working on a project that involves the manipulation of strings. As part of the project, they need to determine if a string can be rearranged to form a palindrome. A string is considered a palindrome if it reads the same backward as forward. Given a string, the task is to determine if it can be rearranged to become a palindrome by reordering its characters. Input The input consists of a single string s (1 ≤ |s| ≤ 1000) where |s| represents the length of the string. The string s contains only lowercase English letters. Output Print \\"YES\\" if the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. Examples Input civic Output YES Input ivicc Output YES Input hello Output NO Note In the first example, the string \\"civic\\" is already a palindrome. In the second example, the string \\"ivicc\\" can be rearranged to \\"civic\\" or \\"icvci\\" which are both palindromes. In the third example, the string \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if and only if the number of characters with odd frequencies is at most one. from collections import Counter char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 == 1) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a large rectangular grid with N rows and M columns (1 ≤ N, M ≤ 1000). Each cell of the grid has either a 0 or a 1 written on it. Two cells are said to be \\"connected\\" if they share a common side and both contain the number 1. Your task is to determine the number of distinct groups of connected cells that contain the number 1. Input The first line contains two integers, N and M, the number of rows and columns in the grid, respectively. Each of the next N lines contains M integers (either 0 or 1), representing the grid. Output Output a single integer, the number of distinct groups of connected cells containing the number 1. Example Input: 5 6 0 1 0 0 0 1 0 1 1 0 1 0 0 0 0 0 1 1 1 0 0 1 1 0 1 1 0 0 0 0 Output: 4 Explanation The grid looks like this: - There is one group in the first two rows formed by two 1\'s: (1,2), (2,2), and (2,3). - Another group is formed by two 1\'s in the first row at positions (1,6) and (4,4). - The third group consists of three 1\'s in the second to fourth rows: (2,5), (3,5), (3,6), and (4,5). - The final group is at the bottom-left corner with six 1\'s connected.","solution":"def count_connected_groups(grid): This function counts the number of distinct groups of connected cells containing the number 1 in a 2D grid. def dfs(grid, visited, x, y, N, M): if x < 0 or x >= N or y < 0 or y >= M or grid[x][y] == 0 or visited[x][y]: return visited[x][y] = True # Explore the 4 possible directions dfs(grid, visited, x + 1, y, N, M) dfs(grid, visited, x - 1, y, N, M) dfs(grid, visited, x, y + 1, N, M) dfs(grid, visited, x, y - 1, N, M) N = len(grid) M = len(grid[0]) if N > 0 else 0 visited = [[False for _ in range(M)] for _ in range(N)] count = 0 for i in range(N): for j in range(M): if grid[i][j] == 1 and not visited[i][j]: count += 1 dfs(grid, visited, i, j, N, M) return count"},{"question":"A gardener has a rectangular garden of dimension M x N (M rows and N columns). He wants to plant trees in the garden such that each tree has at least a 1-unit distance (vertically, horizontally, or diagonally) from any other tree. Determine the maximum number of trees the gardener can plant adhering to the given constraint. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains two integers M, N representing the dimensions of the garden. -----Output:----- For each test case, output in a single line the maximum number of trees that can be planted. -----Constraints----- - 1 leq T leq 50 - 1 leq M, N leq 1000 -----Sample Input:----- 2 2 2 3 3 -----Sample Output:----- 2 4","solution":"def max_trees(M, N): Returns the maximum number of trees that can be planted in a garden with dimensions M x N such that no two trees are adjacent vertically, horizontally, or diagonally. return (M * N + 1) // 2 def solve_max_trees(test_cases): results = [] for M, N in test_cases: results.append(max_trees(M, N)) return results"},{"question":"You are given a matrix of integers where each cell represents a person’s health status in a grid. Each cell has a value of 0, 1, or 2, where: - 0 indicates an empty cell - 1 indicates a healthy person - 2 indicates a person infected by a virus The virus spreads to healthy persons (value 1) in their 4-directionally adjacent cells (up, down, left, right) in one unit of time. Write a function to determine the minimum time taken for all the healthy persons to get infected. If it is not possible to infect all the healthy persons, return -1. # Example 1: Input: [[2, 1, 0, 2, 1], [1, 0, 1, 2, 1], [1, 0, 0, 2, 1]] Output: 2 Explanation: In the first time unit: [[2, 2, 0, 2, 1], [2, 0, 1, 2, 1], [1, 0, 0, 2, 1]] In the second time unit: [[2, 2, 0, 2, 2], [2, 0, 2, 2, 2], [1, 0, 0, 2, 2]] # Example 2: Input: [[1, 0, 2, 0, 1], [0, 0, 1, 2, 0], [1, 2, 0, 0, 1]] Output: -1 Explanation: It is not possible to infect all healthy persons. # Your Task: You don\'t need to read or print anything. Your task is to complete the function `minTimeToInfectAll()` which takes a 2D array `grid` of integers as input and returns the minimum time (integer) required to infect all healthy persons. Also if it is not possible to infect, return -1. # Expected Time Complexity: O(m * n) # Expected Auxiliary Space: O(m * n) # Constraints: 1. 1 <= m, n <= 100","solution":"from collections import deque def minTimeToInfectAll(grid): rows = len(grid) cols = len(grid[0]) queue = deque() healthy_count = 0 # Initialize the queue with all infected persons for r in range(rows): for c in range(cols): if grid[r][c] == 2: queue.append((r, c)) elif grid[r][c] == 1: healthy_count += 1 # Directions for adjacency (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] time = 0 # Perform BFS to spread the infection while queue and healthy_count > 0: time += 1 for _ in range(len(queue)): r, c = queue.popleft() for dr, dc in directions: new_r, new_c = r + dr, c + dc if 0 <= new_r < rows and 0 <= new_c < cols and grid[new_r][new_c] == 1: grid[new_r][new_c] = 2 healthy_count -= 1 queue.append((new_r, new_c)) return time if healthy_count == 0 else -1"},{"question":"Sum Range Query Given an array of integers and a series of queries, each query asks for the sum of the elements in a specified range. **Input** The first line contains two integers N (number of elements in the array) and Q (number of queries). The second line contains N integers, representing the elements of the array. The following Q lines each contain two integers l and r (inclusive), specifying the range for which the sum should be calculated. **Output** For each query, output the sum of elements in the specified range. **Constraints** * 1 ≤ N, Q ≤ 10^5 * 1 ≤ a_i ≤ 10^9 * 1 ≤ l, r ≤ N **Input example** ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` **Output example** ``` 6 9 15 ``` **Example Input ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output ``` 6 9 15 ```","solution":"def sum_range_query(array, queries): Computes the sum in the specified ranges for each query. Parameters: array (list): List of integers representing the array. queries (list): List of tuples, where each tuple contains two integers (l, r). Returns: list: List of integers representing the sum for each query range. n = len(array) # Create prefix sums prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + array[i] # Answer each query results = [] for l, r in queries: # Convert 1-based index to 0-based sum_range = prefix_sum[r] - prefix_sum[l - 1] results.append(sum_range) return results"},{"question":"Given a linked list, rotate the list to the right by k places, where k is non-negative. For example: Given 1->2->3->4->5->NULL and k = 2, return 4->5->1->2->3->NULL. Examples: Input: head = [0,1,2], k = 4 Output: [2,0,1] Input: head = [1,2,3,4,5], k = 2 Output: [4,5,1,2,3]","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head, k): if not head or k == 0: return head # Determine length of the list and make it circular old_tail = head length = 1 while old_tail.next: old_tail = old_tail.next length += 1 old_tail.next = head # Find the new tail and new head k = k % length new_tail = head for _ in range(length - k - 1): new_tail = new_tail.next new_head = new_tail.next # Break the circular list new_tail.next = None return new_head # Helper function to convert list to linked list def array_to_list(arr): if not arr: return None head = ListNode(arr[0]) current = head for val in arr[1:]: current.next = ListNode(val) current = current.next return head # Helper function to convert linked list to list def list_to_array(head): arr = [] current = head while current: arr.append(current.val) current = current.next return arr"},{"question":"# Unique Characters Write a function to check if a string has all unique characters. The function should return `true` if all characters in the string are unique, and `false` if there are any duplicate characters. For example: - \\"abcdef\\" => true (all characters are unique) - \\"hello\\" => false (character \'l\' is repeated) - \\"123456\\" => true (all characters are unique) - \\"112233\\" => false (characters \'1\', \'2\', and \'3\' are repeated)","solution":"def is_unique(s): Check if a string has all unique characters. Args: s (str): The input string. Returns: bool: True if all characters in the string are unique, False otherwise. return len(s) == len(set(s))"},{"question":"Write a program that detects if two strings a and b are anagrams of each other. Constraints * 1 leq length of a leq 1000 * 1 leq length of b leq 1000 * a and b consist of lower-case letters only Input In the first line, the string a is given. In the second line, the string b is given. Output If a and b are anagrams, print True in a line; otherwise, print False. Examples Input listen silent Output True Input hello billion Output False","solution":"def are_anagrams(a, b): Returns True if strings a and b are anagrams, False otherwise. if len(a) != len(b): return False return sorted(a) == sorted(b)"},{"question":"Tina has a field of size NxM represented by a grid of characters. Some cells in the grid contain obstacles represented by \'#\', and other cells are empty, represented by \'.\'. Tina wants to know the number of distinct paths from the top-left corner (1,1) to the bottom-right corner (N, M), moving only right or down, and without passing through any obstacles. Input The first line contains two integers N and M (1 ≤ N, M ≤ 1000), representing the dimensions of the grid. Each of the next N lines contains M characters (either \'.\' or \'#\'), representing the grid. Output In a single line print the number of distinct paths from the top-left to the bottom-right corner if such paths exist, otherwise print 0. Example Input 3 3 . . . . # . . . . Output 2 Input 3 3 . # . # . # . . . Output 0","solution":"def num_paths(N, M, grid): Returns the number of distinct paths from (1,1) to (N,M), moving only right or down, and avoiding obstacles. if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"Given a list of intervals, merge all overlapping intervals and return an array of the non-overlapping intervals that cover all the intervals in the input. For example, intervals = [[1,3],[2,6],[8,10],[15,18]], => [[1,6],[8,10],[15,18]] intervals = [[1,4],[4,5]], => [[1,5]] Corner Cases: - If there are no intervals, you should return an empty list. - Make sure the resultant intervals are returned in the sorted order based on their start values. - Consider intervals like [[1,3],[3,5]]: they should be merged into [[1,5]]. Function Signature: ```python def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: # Your code here ```","solution":"from typing import List def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: Merges overlapping intervals and returns the resultant list of non-overlapping intervals. if not intervals: return [] # Sort the intervals based on their start values intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If the list of merged intervals is empty or if the current # interval does not overlap with the previous one, simply add it. if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # Otherwise, there is overlap, so we merge the current and previous intervals. merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"Problem Statement: You are tasked with implementing a simple language detector for a text processing system. The system processes a stream of character strings. You need to determine if a string is written in English or not. For simplicity, assume that a string is in English if it contains only the letters \'a\' through \'z\' or \'A\' through \'Z\'. If the string is in English, print \\"English\\". Otherwise, print \\"Not English\\". Input format: The input is a stream of words, one per line. The stream ends with a line containing \\"END\\". Output format: For each word, print either \\"English\\" or \\"Not English\\". Input Constraints: - Each word has a length ≤ 100. - Each word can contain any valid Unicode characters. SAMPLE INPUT hello こんにちは world 你好 END SAMPLE OUTPUT English Not English English Not English","solution":"def detect_language(word): Returns whether the word is in English or not. if all(\'a\' <= char <= \'z\' or \'A\' <= char <= \'Z\' for char in word): return \\"English\\" return \\"Not English\\" def process_stream(stream): Processes a stream of words and outputs \\"English\\" or \\"Not English\\" for each word until it sees \\"END\\". results = [] for word in stream: if word == \\"END\\": break results.append(detect_language(word)) return results"},{"question":"(Question): A popular streaming platform is hosting a live event, and they have decided to give away promotional codes to viewers based on their viewing duration. They want to ensure that the giveaway is fair and only viewers who have watched at least a certain threshold of content qualify. Your task is to write a program that determines the number of viewers eligible for the giveaway based on their viewing durations. Each viewer has a start and end time representing the duration they watched the event. The times are represented in seconds from the start of the event (time=0). A viewer is eligible for the giveaway if they have watched for at least `T` seconds in total, which may be split across multiple sessions. ---Input--- The first line of the input contains two integers, `N` (1 <= N <= 10^5), the number of viewers, and `T` (0 <= T <= 10^6), the threshold viewing duration in seconds. The next `N` lines describe each viewer\'s watching sessions. Each line starts with an integer `M_i` (1 <= M_i <= 100), the number of watching sessions for the i-th viewer, followed by `M_i` pairs of integers, where each pair represents the start and end times (0 <= start < end <= 10^6) of one watching session. ---Output--- Output a single integer representing the number of viewers eligible for the giveaway. ---Examples--- Sample Input 1: 3 1800 2 0 1000 2000 3000 1 0 3600 2 500 1500 1600 2100 Sample Output 1: 2 Sample Input 2: 2 600 1 0 500 1 0 1000 Sample Output 2: 1 Explanation: - In the first example, viewer 1 watches the event for 1000 + 1000 = 2000 seconds, viewer 2 watches for 3600 seconds consecutively, and viewer 3 watches for 1000 + 500 = 1500 seconds. All three viewers watch more than 1800 seconds except viewer 3, making only two viewers eligible. - In the second example, viewer 1 watches for 500 seconds, and viewer 2 for 1000 seconds. Only the second viewer meets the 600-second threshold.","solution":"def eligible_viewers(N, T, viewers_sessions): eligible_count = 0 for sessions in viewers_sessions: watching_time = 0 for start, end in sessions: watching_time += end - start if watching_time >= T: eligible_count += 1 return eligible_count"},{"question":"A famous bakery chain is expanding its reach and opening a specific number of new bakeries across various towns in a new region. The towns are interconnected by a set of roads such that there is always a path from any town to any other town. The bakery chain wants to minimize the maximum distance any resident has to travel to get to their nearest bakery. You are required to determine the optimal placement of specified new bakeries to achieve this goal. -----Input----- The first line of the input contains two integers N (2 ≤ N ≤ 1000) and M (1 ≤ M ≤ N) – where N is the number of towns, and M is the number of new bakeries to be opened. The next N - 1 lines describe the roads between towns. Each of the lines contains two space-separated integers u and v (1 ≤ u, v ≤ N) indicating that there is a bidirectional road between the towns u and v. It is guaranteed that every two towns are connected by a path of roads, and that each road connects a different pair of towns. -----Output----- A single integer denoting the minimum possible maximum distance any resident will need to travel to reach the nearest bakery. -----Examples----- Input 5 2 1 2 1 3 3 4 3 5 Output 1 Input 6 1 1 2 2 3 3 4 4 5 5 6 Output 3 -----Note----- - In the first example, placing one bakery in town 1 and another in town 3 minimizes the maximum distance any resident would need to travel to 1. - In the second example, placing the bakery in town 3 ensures that the maximum distance any resident would need to travel is 3.","solution":"from collections import deque def find_max_distance_from_bakeries(n, bakeries, roads): def bfs(start): visited = [-1] * n queue = deque([(start, 0)]) visited[start] = 0 while queue: node, dist = queue.popleft() for neighbor in graph[node]: if visited[neighbor] == -1: visited[neighbor] = dist + 1 queue.append((neighbor, dist + 1)) return visited graph = [[] for _ in range(n)] for u, v in roads: graph[u].append(v) graph[v].append(u) def is_valid_distance(mid): covered = [False] * n for bakery in bakeries: distances = bfs(bakery) for i in range(n): if distances[i] <= mid: covered[i] = True return all(covered) low, high = 0, n answer = high while low <= high: mid = (low + high) // 2 if is_valid_distance(mid): answer = mid high = mid - 1 else: low = mid + 1 return answer def optimal_bakery_placement(N, M, roads_input): towns = list(range(N)) roads = [(u-1, v-1) for u, v in roads_input] min_max_distance = float(\'inf\') from itertools import combinations for bakeries in combinations(towns, M): current_max_distance = find_max_distance_from_bakeries(N, bakeries, roads) min_max_distance = min(min_max_distance, current_max_distance) return min_max_distance"},{"question":"You are given a string `str` and a list of words `wordList`. You need to determine if the string can be segmented into a space-separated sequence of one or more words from the list. Input The first line of the input contains the string `str`. The second line contains the number of words `N` in the `wordList`. The subsequent `N` lines each contain one word from the `wordList`. Output Print \\"YES\\" if the string can be segmented, otherwise print \\"NO\\". Constraints 1 ≤ length of `str` ≤ 10^4 1 ≤ N ≤ 10^3 1 ≤ length of each word in the `wordList` ≤ 20 SAMPLE INPUT applepie 3 apple pie orange SAMPLE OUTPUT YES","solution":"def can_segment_string(s, wordList): Determines if the string can be segmented into a sequence of one or more words from the word list. word_set = set(wordList) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return \\"YES\\" if dp[len(s)] else \\"NO\\""},{"question":"A company is organizing a coding competition that requires participants to form unique teams. Each team should consist of exactly two participants, and no participant can be a member of more than one team. The difficulty lies in ensuring that no participant is left out if it is possible to form such a pairing. Given a list of participants\' availability, determine whether it is possible to form the required teams. If it is, also list all the valid pairs that can be formed. Input The first line contains a single integer n (1 ≤ n ≤ 200) – the number of participants. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) – the availability status of each participant. Here, ai represents participant i\'s unique identifier. Output If it is not possible to form n/2 unique teams, print a single line \\"Not possible\\". Otherwise, print n/2 lines, each containing two integers representing a team formed. Examples Input 4 1 2 3 4 Output 1 2 3 4 Input 5 5 2 8 6 1 Output Not possible Note In the first example, it is possible to pair the participants as (1, 2) and (3, 4). One possible output could be: 1 2 3 4 In the second example, there are 5 participants, and it\'s impossible to form 2.5 pairs. Therefore, the output is \\"Not possible\\".","solution":"def form_teams(n, availability): Determines if it is possible to form n/2 unique teams from the list of participant IDs. If possible, returns a list of teams (pairs of integers). Otherwise, returns \\"Not possible\\". :param int n: Number of participants. :param list availability: List of participant IDs. :return: List of pairs or \\"Not possible\\" if n is odd. if n % 2 != 0: return \\"Not possible\\" teams = [] for i in range(0, n, 2): teams.append((availability[i], availability[i + 1])) return teams"},{"question":"You are given an array of integers. Your task is to determine the length of the longest subsequence with elements that form a strictly increasing arithmetic progression. If no such subsequence exists, output 0. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The next T lines each start with an integer N denoting the length of the array, followed by N space-separated integers representing the elements of the array. ------ Output ------ For each test case, output the length of the longest subsequence that forms a strictly increasing arithmetic progression. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ array[i] ≤ 10^5 ------ Sample Input 1 ------ 3 5 1 2 3 4 5 6 1 7 10 13 14 19 4 5 10 15 20 ------ Sample Output 1 ------ 5 4 4 ------ Explanation 1 ------ Example 1: The whole array itself is a strictly increasing arithmetic progression (1, 2, 3, 4, 5). Example 2: One of the longest subsequences that form an arithmetic progression is (1, 7, 13, 19) with a common difference of 6. Example 3: The entire array is a strictly increasing arithmetic progression with a common difference of 5.","solution":"def longest_increasing_arithmetic_subsequence_length(arr): Returns the length of the longest subsequence in the array that forms a strictly increasing arithmetic progression. if len(arr) < 2: return 0 n = len(arr) # dp[i][d] will store the length of the longest arithmetic progression # ending at index i with common difference d dp = {} max_length = 1 for i in range(n): for j in range(i): diff = arr[i] - arr[j] if (j, diff) in dp: dp[(i, diff)] = dp[(j, diff)] + 1 else: dp[(i, diff)] = 2 # starting a new subsequence with two elements max_length = max(max_length, dp[(i, diff)]) return max_length def solve(test_cases): results = [] for n, arr in test_cases: results.append(longest_increasing_arithmetic_subsequence_length(arr)) return results"},{"question":"You are working on a video streaming platform where users can follow series of their favorite TV shows. Each series is defined by its episodes, and each episode can be released on a different day. A series is considered \\"follow-worthy\\" if there is at least one day where 3 or more episodes of the series are released. Given multiple series, your task is to find out how many series are follow-worthy. Input The first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Each test case describes one series and is presented in two lines. The first line of each test case contains an integer n (1 ≤ n ≤ 2⋅10^5) — the number of episodes in the series. The second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10^6), where d_i is the day when the i-th episode is released. It is guaranteed that the sum of the values of n for all test cases in the input does not exceed 2⋅10^6. Output Print t integers — the answers to the given test cases in the order they follow in the input. The answer to a test case is \\"YES\\" if the series is follow-worthy and \\"NO\\" otherwise. Example Input 3 5 1 2 2 2 3 4 1 1 1 1 6 1 2 3 4 5 6 Output YES YES NO Note In the first test case of the example, the series has 3 episodes released on day 2, which makes it follow-worthy. In the second test case, all episodes are released on the same day making the series follow-worthy. In the third test case, no day has 3 or more episodes, so the series is not follow-worthy.","solution":"def is_follow_worthy(n, days): Determines if a series with n episodes is follow-worthy given the days the episodes are released. A series is follow-worthy if there is at least one day where 3 or more episodes are released. :param n: Number of episodes in the series :param days: List of integers where each integer represents the release day of an episode :return: \'YES\' if the series is follow-worthy, \'NO\' otherwise from collections import Counter day_counts = Counter(days) for count in day_counts.values(): if count >= 3: return \\"YES\\" return \\"NO\\" def follow_worthy_series(test_cases): Processes multiple test cases and determines if each series is follow-worthy. :param test_cases: List of tuples where each tuple contains the number of episodes and a list of release days :return: List of results for each test case (\'YES\' or \'NO\') results = [] for n, days in test_cases: results.append(is_follow_worthy(n, days)) return results"},{"question":"Given an array of integers ```nums``` and an integer ```target```, return an array of the indices of the two numbers such that they add up to ```target```. You may assume that each input would have exactly one solution, and you may not use the same element twice. For example: - Given ```nums = [2, 7, 11, 15]```, ```target = 9```, because ```nums[0] + nums[1] = 2 + 7 = 9```, the function should return ```[0, 1]```. - Given ```nums = [3, 2, 4]```, ```target = 6```, because ```nums[1] + nums[2] = 2 + 4 = 6```, the function should return ```[1, 2]```. - Given ```nums = [3, 3]```, ```target = 6```, because ```nums[0] + nums[1] = 3 + 3 = 6```, the function should return ```[0, 1]```. Write ```function twoSum(nums, target)``` that, given an array of integers ```nums``` and an integer ```target```, returns an array of the indices of the two numbers such that they add up to ```target```. The function should return an empty array if there are no such indices.","solution":"def twoSum(nums, target): Returns the indices of the two numbers such that they add up to target. :param nums: List[int], List of integers. :param target: int, Target sum. :return: List[int], Indices of the two numbers adding up to target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Given an array of integers, each element represents a different type of fruit, and the same type of fruit is represented by the same integer. Imagine you have a basket that can only hold up to two different types of fruits, but can hold an unlimited quantity of each type. Your task is to find the length of the longest contiguous subarray with at most two different types of fruits. Example 1: Input: fruits = [1,2,1] Output: 3 Explanation: We can pick all the fruits since there are only two types of fruits. Example 2: Input: fruits = [0,1,2,2] Output: 3 Explanation: The longest subarray with at most two different fruits is [1,2,2]. Example 3: Input: fruits = [1,2,3,2,2] Output: 4 Explanation: The longest subarray with at most two different fruits is [2,3,2,2]. Constraints: 1 <= fruits.length <= 10000 0 <= fruits[i] < fruits.length","solution":"def total_fruit(fruits): Returns the length of the longest contiguous subarray with at most two different types of fruits. count = {} max_len = start = 0 for end, fruit in enumerate(fruits): count[fruit] = count.get(fruit, 0) + 1 while len(count) > 2: count[fruits[start]] -= 1 if count[fruits[start]] == 0: del count[fruits[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"There is a group of N children standing in a line, each identified by a unique number from 1 to N. Each child can only see the child immediately ahead of them. They all play a game where each child passes a card to the one in front of them until it reaches the first child in the line. Given the initial arrangement of the children and the time T it takes for a child to pass the card to the next one, calculate the total time required to deliver the card from the last child to the first child. -----Input:----- - The first line contains an integer N, the number of children. - The second line contains N integers in the range of 1 to N, representing the initial positions of the children from first to last. - The third line contains a single integer T, the time in seconds it takes for a child to pass the card to the next child. -----Output:----- - Print a single integer, the total time required for the card to reach the first child in the line. -----Constraints:----- - 1 leq N leq 10^5 - 1 leq T leq 10^3 -----Sample Input:----- 5 5 4 3 2 1 2 -----Sample Output:----- 8 Explanation: Here we have 5 children standing in line in the order 5 -> 4 -> 3 -> 2 -> 1. The card has to pass from the child numbered 5 to 4, from 4 to 3, from 3 to 2, and finally from 2 to 1. Each pass takes 2 seconds, hence the total time is 4 * 2 = 8 seconds.","solution":"def calculate_total_time(N, positions, T): Calculate the total time required for the card to reach the first child from the last child. Args: N: int - number of children positions: list of int - list of children\'s positions from first to last T: int - time in seconds for passing the card Returns: int - total time required # Total passes required is N - 1 (card goes from last to first child in N-1 passes) total_passes = N - 1 # Total time is the number of passes multiplied by the time per pass total_time = total_passes * T return total_time # Example usage for testing print(calculate_total_time(5, [5, 4, 3, 2, 1], 2)) # Output: 8"},{"question":"Given a list of integers, your task is to write a function that returns a new list containing only the elements of the original list that are prime numbers in the same order they appeared. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. A number n is prime if it is only divisible by 1 and n. For example: ```python filter_primes([10, 3, 4, 7, 6, 11, 15]) == [3, 7, 11] ``` Here, 10, 4, 6, and 15 are not prime numbers, so they are filtered out, leaving only the prime numbers 3, 7, and 11 in the resulting list.","solution":"def filter_primes(lst): Returns a new list containing only the prime numbers from the given list. Args: lst: List of integers. Returns: List of prime integers. def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True return [x for x in lst if is_prime(x)]"},{"question":"Snuke has a tree with N nodes, where each node is assigned a positive integer value. Each node has exactly one parent, except the root node which has no parent. Snuke wants to know the maximum sum of node values in any path that starts at the root and ends at any leaf node. A leaf node is defined as a node with no children. Constraints: - 1 ≤ N ≤ 100000 - 1 ≤ value of each node ≤ 10^9 Input The input is provided in the following format: - The first line contains N. - The second line contains N space-separated integers representing the values of the nodes, in the order of their node numbers (1-based index). - The following N-1 lines each contain two integers u and v, which indicate there is an edge between nodes u and v. Output Print the maximum sum of node values in any path from the root to any leaf. Examples Input 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output 8 Input 3 10 20 30 1 2 2 3 Output 60","solution":"from collections import defaultdict, deque def max_sum_path_from_root_to_leaf(N, values, edges): # Building the tree from edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to find a path that starts at the root (node 1) and ends at any leaf node def max_sum_dfs(node, parent): max_sum = 0 is_leaf = True for child in tree[node]: if child != parent: is_leaf = False max_sum = max(max_sum, max_sum_dfs(child, node)) return max_sum + values[node - 1] return max_sum_dfs(1, -1)"},{"question":"Farmer John has a rectangular field of dimensions N x M meters. He wants to build a rectangular barn within this field such that its area is exactly K square meters. The task is to determine if it is possible to build such a barn with integer dimensions. Given the field’s dimensions and the desired barn area, help Farmer John determine whether he can build the barn or not. Print \\"POSSIBLE\\" if it is possible to build the barn with an area of exactly K square meters within the given field dimensions. Otherwise, print \\"IMPOSSIBLE\\". ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - Each test case consists of three integers N, M, and K. ------ Output Format ------ For each test case, output \\"POSSIBLE\\" if it is possible to build the barn, otherwise output \\"IMPOSSIBLE\\". You may print each character of the string in uppercase or lowercase (for example, the strings \\"pOsSiBlE\\", \\"PoSSIBle\\", \\"possible\\" and \\"POSSIBLE\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 10^{9} 1 ≤ K ≤ 10^{9} ----- Sample Input 1 ------ 3 5 4 6 3 3 10 4 4 16 ----- Sample Output 1 ------ POSSIBLE IMPOSSIBLE POSSIBLE ----- Explanation 1 ------ Test case 1: Farmer John can build a 2 x 3 or 3 x 2 barn which has an area of 6 square meters, fitting within the 5 x 4 field. Test case 2: It is impossible to build a barn with an area of 10 square meters using integer dimensions that fit within the 3 x 3 field. Test case 3: Farmer John can build a barn of 4 x 4 dimensions exactly, as its area is 16 square meters, fitting perfectly within the 4 x 4 field.","solution":"def can_build_barn(N, M, K): Determines if it\'s possible to build a barn with area K within a N x M field using integer dimensions. if K > N * M: return \\"IMPOSSIBLE\\" for width in range(1, int(K**0.5) + 1): if K % width == 0: length = K // width if length <= N and width <= M or width <= N and length <= M: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\" def process_test_cases(test_cases): results = [] for N, M, K in test_cases: result = can_build_barn(N, M, K) results.append(result) return results"},{"question":"You are given an array of integers `a` of length N and an integer X. Your task is to find out if there exists a pair of distinct elements in the array that adds up to X. Constraints: - All input values are integers. - 1 ≤ N ≤ 10^5 - 1 ≤ a_i ≤ 10^9 - 1 ≤ X ≤ 2 times 10^9 Input: Input is given from Standard Input in the following format: ``` N X a_1 a_2 ... a_N ``` Output: Print `YES` if there exists a pair of distinct elements in the array that adds up to X. Otherwise, print `NO`. Examples Input ``` 5 9 2 7 11 15 5 ``` Output ``` YES ``` Input ``` 4 8 1 2 3 9 ``` Output ``` NO ``` Input ``` 6 14 1 5 9 7 12 3 ``` Output ``` YES ```","solution":"def pair_sum_exists(n, x, a): Determines if there exists a pair of distinct elements in the array `a` that adds up to `x`. Parameters: n (int): The number of elements in the array. x (int): The target sum. a (list of int): The list of integers. Returns: str: \'YES\' if such a pair exists, \'NO\' otherwise. seen = set() for num in a: if x - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"In ancient times, an enchanted forest was guarded by a sequence of magical entities represented as an array of integers. Each integer signifies the power level of an entity. A wise wizard has devised a challenge: you must select continuous subarrays such that their sum is equal to a specific magical number K. Given the number of test cases T, each test case contains the following: - The length of the array, N - The array of N integers - The magical number K - The number of queries Q For each query, you are given the indices L and R, and you need to determine the number of continuous subarrays within the segment [L, R] whose sums are equal to K. Input: - The number of test cases, T. - For each test case: - An integer N, the length of the array (1 ≤ N ≤ 100,000) - The array of N integers - An integer K, the magical number - An integer Q, the number of queries (1 ≤ Q ≤ 100,000) - Q pairs of integers L and R Output: - For each query in each test case, print the number of valid continuous subarrays between indices L and R that sum to K. Constraints: - The absolute value of any integer in the array or K does not exceed 1,000,000. - Sum of N over all test cases in one test file does not exceed 100,000. - Sum of Q over all test cases in one test file does not exceed 100,000. Sample Input: 1 5 1 2 3 -2 5 5 3 1 5 1 3 2 4 Sample Output: 2 1 1 Explanation: For the input array [1, 2, 3, -2, 5] with K = 5: - For the range [1, 5], there are two subarrays that sum to 5: [2, 3], and [1, 2, 3, -2, 5]. - For the range [1, 3], there is one subarray that sums to 5: [2, 3]. - For the range [2, 4], there is one subarray that sums to 5: [2, 3].","solution":"def count_subarrays_with_sum(arr, N, K, L, R): count = 0 for start in range(L, R+1): sum_subarray = 0 for end in range(start, R+1): sum_subarray += arr[end] if sum_subarray == K: count += 1 return count def process_test_cases(T, test_cases): results = [] for case in test_cases: N, arr, K, Q, queries = case result_for_case = [] for L, R in queries: # Convert 1-based index to 0-based L -= 1 R -= 1 result_for_case.append(count_subarrays_with_sum(arr, N, K, L, R)) results.append(result_for_case) return results"},{"question":"You are given a string, S, consisting of lowercase English letters. Write a program to determine the smallest lexicographical rotation of the string. The lexicographical order is a generalization of the way words are alphabetically ordered in dictionaries. The smallest rotation of a string S is the lexicographically smallest string that can be obtained by rotating (shifting) the characters of the string. For example, the string \\"baca\\" has the following rotations: \\"baca\\", \\"acba\\", \\"caba\\", and \\"abac\\". The smallest lexicographical rotation of \\"baca\\" is \\"abac\\". Function Description Complete the smallestRotation function in the editor below. smallestRotation has the following parameters: - string s: the string to rotate Returns - string: the smallest lexicographical rotation of the string Input Format A single line containing the string S. Constraints 1leq |S|leq10^4 Sample Input ``` baca ``` Sample Output ``` abac ``` Explanation The rotations of the string \\"baca\\" are: - \\"baca\\" - \\"acba\\" - \\"caba\\" - \\"abac\\" Among these, \\"abac\\" is lexicographically smallest.","solution":"def smallestRotation(s): Returns the smallest lexicographical rotation of the string s. concatenated = s + s min_rotation = s for i in range(1, len(s)): rotation = concatenated[i:i+len(s)] if rotation < min_rotation: min_rotation = rotation return min_rotation"},{"question":"Given an integer num, return a list of all prime numbers less than num. The primes can be in any order. Example 1: Input: num = 10 Output: [2, 3, 5, 7] Explanation: These are all the prime numbers less than 10. Example 2: Input: num = 20 Output: [2, 3, 5, 7, 11, 13, 17, 19] Explanation: These are all the prime numbers less than 20. Example 3: Input: num = 1 Output: [] Explanation: There are no prime numbers less than 1. Constraints: 1 <= num <= 100","solution":"def primes_less_than(num): Returns a list of all prime numbers less than num. if num <= 1: return [] primes = [] is_prime = [True] * num is_prime[0] = is_prime[1] = False for i in range(2, num): if is_prime[i]: primes.append(i) for j in range(i * i, num, i): is_prime[j] = False return primes"},{"question":"Given an array of strings, each string representing a sentence, your task is to return a new array of strings, where each string is a sentence with reversed words positions. Each element in the input array is a single space separated sentence consisting of lowercase and uppercase Latin letters and denotes a single sentence. Words in each sentence are delimited by a single space. Your task is to reverse the order of words in each sentence. Input - The first line contains n (1 ≤ n ≤ 100) — the number of sentences in the array. - The next n lines are the strings representing the sentences. Output - Return an array of strings with reversed words for each sentence. Examples Input 3 hello world the sky is blue good morning Output [\\"world hello\\", \\"blue is sky the\\", \\"morning good\\"] Input 2 keep moving forward never give up Output [\\"forward moving keep\\", \\"up give never\\"]","solution":"def reverse_words(sentences): Given an array of strings, returns a new array of strings where each string has the words in reverse order. Parameters: sentences (list of str): List of sentences (strings) to be reversed. Returns: list of str: List of sentences with words in reversed order. reversed_sentences = [] for sentence in sentences: words = sentence.split() reversed_sentence = \' \'.join(reversed(words)) reversed_sentences.append(reversed_sentence) return reversed_sentences"},{"question":"-----Input----- The input contains a single integer n (1 le n le 100), representing a person\'s age. -----Output----- Output \\"Adult\\" if the person is 18 years of age or older, otherwise output \\"Underage\\". -----Examples----- Input 17 Output Underage Input 18 Output Adult Input 25 Output Adult Input 12 Output Underage","solution":"def age_category(n): Returns \\"Adult\\" if the age n is 18 or older, otherwise returns \\"Underage\\". return \\"Adult\\" if n >= 18 else \\"Underage\\""},{"question":"David loves puzzles, especially when they involve strings! He is currently obsessed with a particular puzzle involving palindromic substrings and wants your help to solve it. Given a string s consisting of lowercase English letters, find the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. Input The first line contains an integer t (1 ≤ t ≤ 100) indicating the number of test cases. For each test case: - The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the string. - The second line contains the string s of length n. Output For each test case, print a single line: the longest palindromic substring in s. If there are multiple answers, print any one of them. Examples Input 2 7 racecar 6 banana Output racecar anana Note Consider the second test example. The longest palindromic substring in \\"banana\\" is \\"anana\\". Another possible longest palindromic substring is \\"anana\\", as both read the same forward and backward. In case of multiple correct answers, print any.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. def expand_around_center(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] n = len(s) if n == 0: return \\"\\" longest_palindrome = s[0] for i in range(n): palindrome1 = expand_around_center(i, i) palindrome2 = expand_around_center(i, i + 1) longer_palindrome = palindrome1 if len(palindrome1) > len(palindrome2) else palindrome2 if len(longer_palindrome) > len(longest_palindrome): longest_palindrome = longer_palindrome return longest_palindrome def solve(t, test_cases): Solves the given problem with t test cases. results = [] for n, s in test_cases: results.append(longest_palindromic_substring(s)) return results # Example data for tests t = 2 test_cases = [ (7, \\"racecar\\"), (6, \\"banana\\") ] result = solve(t, test_cases) print(result) # [\\"racecar\\", \\"anana\\"]"},{"question":"Develop a function to validate if a given credit card number is valid or not using the Luhn algorithm. The Luhn algorithm works as follows: 1. From the second last digit moving left, double the value of every second digit. If doubling a digit results in a number greater than 9, subtract 9 from the product. 2. Sum the digits of the adjusted credit card number. 3. If the total sum modulo 10 is equal to 0, then the credit card number is valid. Otherwise, it is invalid. Implement a function that takes a string representing a credit card number and returns \\"VALID\\" if the number is valid according to the Luhn algorithm, otherwise return \\"INVALID\\". Input - A single line containing a string representing the credit card number. The string consists of digits and may contain spaces or hyphens as separators. The length of the stripped number (without spaces or hyphens) will be between 13 and 19, inclusive. Output - Print \\"VALID\\" if the credit card number is valid according to the Luhn algorithm. Print \\"INVALID\\" otherwise. Example Input \\"4539 3195 0343 6467\\" Output VALID Input \\"1234-5678-9012-3456\\" Output INVALID","solution":"def validate_credit_card(card_number): Validates a credit card number using the Luhn algorithm. card_number = card_number.replace(\' \', \'\').replace(\'-\', \'\') if not card_number.isdigit() or not 13 <= len(card_number) <= 19: return \\"INVALID\\" def digits_of(n): return [int(d) for d in str(n)] digits = digits_of(card_number) odd_digits = digits[-1::-2] even_digits = digits[-2::-2] total_sum = sum(odd_digits) for d in even_digits: total_sum += sum(digits_of(d * 2)) return \\"VALID\\" if total_sum % 10 == 0 else \\"INVALID\\""},{"question":"In the land of Quadgonia, the currency comprises coins of various denominations. The king has recently introduced a new taxation policy where individuals have to pay N quads per month in taxes. The citizens of Quadgonia, however, are not fond of carrying large amounts of coins and strive to use the minimum number of coins necessary to pay their taxes each month. You, the chief Royal Programmer, have been tasked to write a program that determines the least number of coins required to pay exactly N quads in taxes, given the available denominations of coins. For instance, if a citizen needs to pay 11 quads and the available denominations are 1, 5, and 10 quads, the minimum number of coins required is 2 (one 10-quad coin and one 1-quad coin). -----Input----- The input consists of: - An integer T, the number of test cases (1 ≤ T ≤ 100). - For each test case: - An integer N, the amount in quads that needs to be paid (1 ≤ N ≤ 10^4). - An integer M, the number of different coin denominations available (1 ≤ M ≤ 100). - M space-separated integers in increasing order, representing the values of the coin denominations (each coin denomination is between 1 and 1000 inclusive). -----Output----- For each test case, output the minimum number of coins required to pay exactly N quads. If it is impossible to pay exactly N quads with the given denominations, return -1. -----Example----- Sample Input: 2 11 3 1 5 10 15 3 2 3 5 Sample Output: 2 3 Explanation: In the first test case: - To pay 11 quads, the best way is to use one 10-quad coin and one 1-quad coin, for a total of 2 coins. In the second test case: - To pay 15 quads, the best way is to use three 5-quad coins, for a total of 3 coins.","solution":"def min_coins_for_tax(T, test_cases): def minimum_coins(N, denominations): dp = [float(\'inf\')] * (N + 1) dp[0] = 0 for coin in denominations: for x in range(coin, N + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[N] if dp[N] != float(\'inf\') else -1 results = [] for case in test_cases: N, denominations = case result = minimum_coins(N, denominations) results.append(result) return results"},{"question":"George loves playing with strings, and he has recently discovered an interesting problem involving two strings, S and T. He wants to know if it\'s possible to transform string S into string T by performing any number of operations. Each operation consists of selecting any character in S and relocating it anywhere within the string (including at the beginning or end). Help George determine if such a transformation is possible. -----Input----- The first line contains two integers n and m separated by space (1 leq n, m leq 1000) — the lengths of strings S and T respectively. The second line contains the string S of length n. The third line contains the string T of length m. -----Output----- Print \\"YES\\" (without quotes) if it is possible to transform S to T and \\"NO\\" (without quotes) otherwise. You can print each letter in any case (upper or lower). -----Examples----- Input 3 3 abc bca Output YES Input 4 4 abcd dabc Output YES Input 4 3 abcd abc Output NO -----Note----- Consider the first example. The string S is \\"abc\\" and string T is \\"bca\\". By relocating \'a\' to the end of the string, we get \\"bca\\", which is equal to T. In the second example, by relocating the last character \'d\' to the beginning of the string, we get \\"dabc\\", which is equal to T. In the third example, since the strings have different lengths, it is impossible to transform S to T.","solution":"def can_transform(S, T): Returns whether it\'s possible to transform string S into string T by performing any number of operations. Each operation consists of selecting any character in S and relocating it anywhere within the string (including at the beginning or end). if sorted(S) == sorted(T) and len(S) == len(T): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of integers. A segment of this list is any contiguous subsequence of it. The score of a segment is the sum of its elements. Write a program to find the maximum possible score of a segment of the given list, where you are allowed to remove at most one element from the segment to maximize the sum. Input The first line contains an integer n (1 ≤ n ≤ 200000), the number of elements in the list. The second line contains n integers a1, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the list. Output Print the maximum possible score of a segment under the described condition. Examples Input 5 1 -2 3 4 -5 Output 7 Input 6 -1 -2 -3 -4 -5 -6 Output -1 Input 4 1 2 3 4 Output 10 Explanation for examples: In the first example, the segment [3, 4] yields a score of 7, and removing other elements like -2 or -5 won\'t give a better result. In the second example, the best segment is just [-1], as removing any other element still results in negative sums. In the third example, the entire list forms the segment as removing any element reduces the score.","solution":"def max_segment_score(n, arr): if n == 1: return arr[0] max_end_here = arr[0] max_so_far = arr[0] min_element_in_segment = float(\'inf\') for i in range(1, n): min_element_in_segment = min(min_element_in_segment, arr[i]) max_end_here = max(arr[i], max_end_here + arr[i]) max_so_far = max(max_so_far, max_end_here) possible_max_with_removal = max_so_far for i in range(n): temp_sum = sum(arr[j] for j in range(n) if j != i) possible_max_with_removal = max(possible_max_with_removal, temp_sum) return possible_max_with_removal"},{"question":"A transport company is developing an application to optimize its truck loading process. Each truck has a fixed loading capacity, and each item to be shipped has a certain weight. Given the weights of the items and the truck\'s maximum capacity, determine the maximum possible total weight of items that can be loaded onto the truck without exceeding its capacity. You are to write a program that finds the optimal subset of item weights that can be loaded onto the truck to maximize the available capacity usage. -----Input----- The input consists of two lines. The first line contains two integers n and C, where n is the number of items (1 <= n <= 100) and C is the truck\'s loading capacity (1 <= C <= 10^5). The second line contains n integers representing the weights of the items (1 <= weight <= 10^4). -----Output----- Output a single integer, the maximum total weight of items that can be loaded onto the truck without exceeding its capacity. -----Examples----- Sample Input 1: 5 10 1 4 5 7 3 Sample Output 1: 10 Sample Input 2: 3 50 10 20 30 Sample Output 2: 50 Sample Input 3: 4 22 8 16 7 5 Sample Output 3: 21","solution":"def max_weight(n, C, weights): dp = [0] * (C + 1) for weight in weights: for j in range(C, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) return dp[C] # Sample inputs for testing n1, C1, weights1 = (5, 10, [1, 4, 5, 7, 3]) n2, C2, weights2 = (3, 50, [10, 20, 30]) n3, C3, weights3 = (4, 22, [8, 16, 7, 5]) # Expected outputs print(max_weight(n1, C1, weights1)) # Expected output is 10 print(max_weight(n2, C2, weights2)) # Expected output is 50 print(max_weight(n3, C3, weights3)) # Expected output is 21"},{"question":"Maya has a collection of books, and she wants to organize them on her bookshelf such that all the books with even number of pages appear before the books with odd number of pages. Write a function to help Maya sort the books based on the number of pages. -----Input:----- - The first line will contain an integer N (number of books). - The second line will contain N space-separated integers, where each integer represents the number of pages in a book. -----Output:----- For each testcase, output the number of pages of books, all even numbered pages first followed by odd numbered pages. -----Constraints----- - 1 leq N leq 1000 - 1 leq (number of pages in the books) leq 10000 -----Sample Input:----- 5 34 23 55 12 78 -----Sample Output:----- 34 12 78 23 55","solution":"def sort_books_by_pages(pages): Returns the list of book pages sorted such that books with even number of pages come before those with odd number of pages. :param pages: List of integers representing the number of pages in books :return: List of integers sorted such that even numbered pages come first even_pages = [page for page in pages if page % 2 == 0] odd_pages = [page for page in pages if page % 2 != 0] return even_pages + odd_pages"},{"question":"You are given a string consisting of lowercase English letters. You want to reorder the characters of the string such that no two adjacent characters are the same. If it is possible to achieve this reordering, return one possible way to do it. Otherwise, return an empty string. -----Input----- The input consists of a single line containing a string s (1 leq |s| leq 10^4), which contains only lowercase English letters. -----Output----- Output one possible way to reorder the characters of the string such that no two adjacent characters are the same. If it is not possible, output an empty string. -----Examples----- Input aab Output aba Input aaab Output (empty string) Input aabc Output abac or other valid outputs -----Note----- In the first example, it is possible to reorder the characters to form \\"aba\\", where no two adjacent characters are the same. In the second example, there is no way to reorder the characters of \\"aaab\\" such that no two adjacent characters are the same since there are three \'a\'s and only one \'b\'. In the third example, one possible reordering of the characters is \\"abac\\"; there are also other valid reorderings such as \\"acab\\", etc.","solution":"import heapq from collections import Counter def reorganize_string(s): Rearranges the string such that no two adjacent characters are the same. Returns an empty string if it\'s not possible. :param s: input string consisting of lowercase letters :return: rearranged string or empty string if not possible # Count the frequency of each character freq = Counter(s) max_heap = [(-cnt, char) for char, cnt in freq.items()] heapq.heapify(max_heap) # Previous character (initially None) prev_char = None prev_cnt = 0 result = [] while max_heap: cnt, char = heapq.heappop(max_heap) if prev_char and -prev_cnt > 0: heapq.heappush(max_heap, (prev_cnt, prev_char)) result.append(char) prev_char = char prev_cnt = cnt + 1 # decrement the count since we\'re using one instance of char result = \'\'.join(result) return result if len(result) == len(s) else \\"\\""},{"question":"Palindromania is a small town that celebrates palindromes with great enthusiasm. A string is called a palindrome if it reads the same backward as forward. One fascinating game in Palindromania involves substrings of a given string. Given a string, the task is to determine the length of the longest substring that forms a palindrome. Input The first line contains an integer n (1 ≤ n ≤ 1000), which represents the length of the string. The second line contains a string s of length n comprising lowercase Latin letters. Output Output a single integer representing the length of the longest palindromic substring. Examples Input 7 racecar Output 7 Input 8 abcdefgh Output 1 Note Consider the first example. The entire string \\"racecar\\" is a palindrome, so the longest palindromic substring is the whole string with a length of 7. In the second example, there are no palindromic substrings of length greater than 1, so the answer is 1.","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring in the given string s. n = len(s) if n == 0: return 0 # Initialize a table to store lengths of palindromic substrings dp = [[0] * n for _ in range(n)] max_length = 1 # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = 1 # Check for substrings of length 2 for i in range(n-1): if s[i] == s[i+1]: dp[i][i+1] = 1 max_length = 2 # Check for lengths greater than 2 for length in range(3, n+1): for i in range(n-length+1): j = i + length - 1 if s[i] == s[j] and dp[i+1][j-1]: dp[i][j] = 1 max_length = length return max_length def longest_palindromic_substring_length_from_input(n, s): return longest_palindromic_substring_length(s)"},{"question":"In a zebra-patterned sequence, every even-indexed element must be less than its neighbors and every odd-indexed element must be greater than its neighbors. Given an array, transform it into a zebra-patterned sequence. If multiple transformations are possible, return any of them. A zebra-patterned sequence is defined as follows for an array indices starting from 0: - For all indices i such that i is even, a[i] < a[i+1] and a[i] < a[i-1] (where applicable). - For all indices i such that i is odd, a[i] > a[i+1] and a[i] > a[i-1] (where applicable). Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output - Output a single line containing n integers representing the transformed zebra-patterned sequence. If no such transformation is possible, return the original array. Example Input 6 1 3 2 4 5 6 Output 1 3 2 5 4 6 Note The given array is [1, 3, 2, 4, 5, 6], and one possible zebra-patterned sequence transformation is [1, 3, 2, 5, 4, 6]. Multiple valid transformations might exist. If the array cannot be transformed into a zebra-patterned sequence, simply return the original array.","solution":"def transform_to_zebra_pattern(arr): Transforms the given array into a zebra-patterned sequence. n = len(arr) # For a single element or empty array, return the array itself if n < 2: return arr for i in range(1, n, 2): # If the current element is less than the previous element, swap them if arr[i] <= arr[i-1]: arr[i], arr[i-1] = arr[i-1], arr[i] # For the last index, no need to compare with the next element if i + 1 < n and arr[i] <= arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr"},{"question":"Write a function that generates a text-based representation of a spiral pattern. Your function will accept a positive integer `n` which represents the size of the grid (nxn). The spiral should start from the top-left corner and spiral in clockwise direction until the middle is reached. Each cell in the grid should be represented by a number indicating its step in the spiral sequence, starting from 1. For example, for an input `n = 5`, the spiral pattern should be: ``` 1 2 3 4 5 16 17 18 19 6 15 24 25 20 7 14 23 22 21 8 13 12 11 10 9 ``` Function signature: ```python def spiral_pattern(n: int) -> List[List[int]]: # Your code here ``` You may use the following helper function to print the pattern: ```python def print_spiral(spiral: List[List[int]]) -> None: for row in spiral: print(\\" \\".join(f\\"{num:2d}\\" for num in row)) ``` **Constraints:** 1. `1 ≤ n ≤ 20` **Example:** ```python n = 3 pattern = spiral_pattern(n) print_spiral(pattern) ``` Expected output: ``` 1 2 3 8 9 4 7 6 5 ```","solution":"from typing import List def spiral_pattern(n: int) -> List[List[int]]: Generates a text-based representation of a spiral pattern. # Create an nxn matrix filled with zeros matrix = [[0] * n for _ in range(n)] # Initial conditions for spiral traversal left, right = 0, n - 1 top, bottom = 0, n - 1 current_value = 1 # Traverse the matrix in a spiral order while left <= right and top <= bottom: # Traverse from left to right along the top row for col in range(left, right + 1): matrix[top][col] = current_value current_value += 1 top += 1 # Traverse from top to bottom along the right column for row in range(top, bottom + 1): matrix[row][right] = current_value current_value += 1 right -= 1 # Traverse from right to left along the bottom row if top <= bottom: for col in range(right, left - 1, -1): matrix[bottom][col] = current_value current_value += 1 bottom -= 1 # Traverse from bottom to top along the left column if left <= right: for row in range(bottom, top - 1, -1): matrix[row][left] = current_value current_value += 1 left += 1 return matrix def print_spiral(spiral: List[List[int]]) -> None: Prints the spiral pattern in a formatted manner. for row in spiral: print(\\" \\".join(f\\"{num:2d}\\" for num in row))"},{"question":"You are given a list of strings, where each string represents a mathematical expression containing positive integers and the operators `+`, `-`, `*`, `/`. Check if each expression is mathematically valid, which means it contains proper operations between integers, and there is no division by zero. Return a list of results in the same order where each result is either: * `\\"Valid\\"` if the expression is mathematically correct. * `\\"Invalid\\"` if the expression contains any non-integer or unrecognized operator. * `\\"Division by zero\\"` if the expression attempts to divide by zero. Assume the input does not contain white spaces. Examples ``` [\\"3+5\\", \\"10-2*3\\", \\"7/2\\", \\"8/0\\", \\"5+*7\\"] ==> [\\"Valid\\", \\"Valid\\", \\"Valid\\", \\"Division by zero\\", \\"Invalid\\"] [\\"14/2\\", \\"9+3-4\\", \\"6*7/8\\", \\"5//2\\", \\"*/2\\"] ==> [\\"Valid\\", \\"Valid\\", \\"Valid\\", \\"Invalid\\", \\"Invalid\\"] ``` Write a function to achieve the above functionality.","solution":"def is_valid_expression(expression): Checks if a mathematical expression is valid. Returns \'Valid\', \'Invalid\', or \'Division by zero\'. operators = set(\'+-*/\') try: prev_char = None for char in expression: if char not in \'0123456789\' and char not in operators: return \'Invalid\' if prev_char in operators and char in operators: return \'Invalid\' prev_char = char # Evaluate the expression and catch division by zero result = eval(expression) return \'Valid\' except ZeroDivisionError: return \'Division by zero\' except: return \'Invalid\' def check_expressions(expressions): Checks a list of mathematical expressions for validity. return [is_valid_expression(expr) for expr in expressions]"},{"question":"Write a function that takes in a string and returns a new string with all the vowels removed. Examples: ``` \\"hello\\" => \\"hll\\" \\"world\\" => \\"wrld\\" \\"aeiou\\" => \\"\\" ```","solution":"def remove_vowels(s): Returns a new string with all vowels removed from the input string \'s\'. vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in s if char not in vowels])"},{"question":"You are given a string s consisting of lowercase Latin letters. Your task is to transform this string into another string t by performing the following operation zero or more times: - Pick two distinct indices i and j such that s[i] = s[j], and then remove the characters at these positions from the string. For example, starting with the string \\"ababa\\", if you remove the characters at positions 1 and 4 (both \'a\'), you get the string \\"bba\\". Your task is to determine whether it is possible to transform the string s into a palindrome by performing the above operation zero or more times. If it is possible, output \\"YES\\". Otherwise, output \\"NO\\". -----Input----- The first line contains a single integer n (1 le n le 1000) — the length of the string s. The second line contains the string s of length n consisting of lowercase Latin letters. -----Output----- Output \\"YES\\" if it is possible to transform the string s into a palindrome by performing the described operation zero or more times. Otherwise, output \\"NO\\". -----Examples----- **Input** 5 ababa **Output** YES **Input** 4 aabb **Output** YES **Input** 3 abc **Output** NO -----Note----- In the first example, the string \\"ababa\\" can be transformed into the palindrome \\"aba\\" by removing the characters at positions 1 and 4. Continuing, it can be further transformed into \\"a\\" by removing characters at positions 2 and 3. In the second example, the string \\"aabb\\" can be transformed into the palindrome \\"aa\\" by removing the characters at positions 2 and 4, and finally into an empty string by removing the characters at positions 1 and 3. In the third example, the string \\"abc\\" cannot be transformed into any palindrome irrespective of the number of operations performed.","solution":"def can_transform_to_palindrome(s): Determines if it\'s possible to transform the string s into a palindrome by performing the described operation zero or more times. :param s: Input string :return: \\"YES\\" if it\'s possible, \\"NO\\" otherwise from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count the number of characters with odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # It is possible to form a palindrome if at most one character has an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a contiguous block of text made up of words separated by spaces. Your goal is to determine whether it is possible to reorder the words so that no two adjacent words start with the same letter. -----Input----- The first line contains an integer ( t ) (( 1 leq t leq 10^4 )) — the number of test cases. The next ( 2t ) lines describe the test cases. For each test case, the first line contains an integer ( n ) (( 1 leq n leq 10^5 )) — the number of words in the block of text. The second line contains ( n ) words, each consisting of only lowercase English letters. It\'s guaranteed that the total number of characters in all words of a single test case does not exceed ( 10^6 ). Additional constraint on the input: each test case will contain only words of length at least 1 and at most 100. -----Output----- For each test case, print YES if the words can be reordered such that no two adjacent words start with the same letter, or NO if it\'s not possible. You may print each letter in any case (YES, yes, Yes will all be recognized as a positive answer; NO, no, and nO will all be recognized as a negative answer). -----Examples----- Input 3 3 apple banana cherry 4 ant antelope aardvark art 5 goose grape golf gifted grand Output YES NO NO -----Note----- None","solution":"def can_reorder_words(t, test_cases): import math results = [] for i in range(t): n = test_cases[i * 2] words = test_cases[i * 2 + 1] first_letter_count = {} for word in words: first_letter = word[0] if first_letter in first_letter_count: first_letter_count[first_letter] += 1 else: first_letter_count[first_letter] = 1 max_count = max(first_letter_count.values()) if max_count > math.ceil(n / 2): results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"In an undirected graph G consisting of N vertices and M edges, you are required to find the length of the shortest cycle, also known as the girth of the graph. A cycle in an undirected graph is a path that starts and ends at the same vertex and contains at least three edges, with all edges and vertices along the path being distinct. Input The input consists of a single test case formatted as follows: N M u_1 v_1 u_2 v_2 : u_M v_M The first line contains two integers N and M (3 leq N leq 100,000, 3 leq M leq 200,000)—the number of vertices and edges, respectively. Each of the next M lines contains two integers u_i and v_i (1 leq u_i, v_i leq N, u_i ne v_i), representing an edge between vertices u_i and v_i. Output Output a single integer, the length of the shortest cycle in the graph. If the graph doesn\'t contain any cycles, print -1. Examples Input 6 7 1 2 2 3 3 4 4 1 2 5 5 6 6 3 Output 4 Input 5 4 1 2 2 3 3 4 4 5 Output -1 Input 7 10 1 2 2 3 3 4 4 1 1 3 2 4 4 5 5 6 6 7 7 1 Output 3","solution":"from collections import deque, defaultdict def shortest_cycle_girth(n, m, edges): def bfs(source): dist = [-1] * (n + 1) parent = [-1] * (n + 1) dist[source] = 0 q = deque([source]) while q: v = q.popleft() for to in graph[v]: if dist[to] == -1: dist[to] = dist[v] + 1 parent[to] = v q.append(to) elif parent[v] != to: # Found a cycle return dist[v] + dist[to] + 1 return float(\'inf\') graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) girth = float(\'inf\') for i in range(1, n + 1): girth = min(girth, bfs(i)) return girth if girth != float(\'inf\') else -1"},{"question":"You are given a sequence of N integers and you need to perform Q operations on it. Each operation is of the following type: 1. Add a given value V to all elements in a specified range. 2. Find the sum of elements in a specified range. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each test case starts with two integers N and Q, the number of elements in the sequence and the number of operations respectively. - The next line contains N integers, representing the sequence. - Each of the next Q lines describes an operation in one of the following forms: - `1 l r V` for adding the value V to all elements from index l to index r (inclusive). - `2 l r` for querying the sum of elements from index l to index r (inclusive). -----Output:----- For each test case, output the results of all querying operations for that test case in separate lines. -----Constraints----- - 1 leq T leq 10 - 1 leq N, Q leq 10^5 - -10^9 leq element of the sequence, V leq 10^9 - 0 leq l leq r < N -----Sample Input:----- 1 5 4 1 2 3 4 5 1 1 3 2 2 1 3 1 0 2 -1 2 0 4 -----Sample Output:----- 9 14 -----EXPLANATION:----- For the first test case: - Initial sequence: [1, 2, 3, 4, 5] - After operation `1 1 3 2`, sequence: [1, 4, 5, 6, 5] - After operation `2 1 3`, the sum of elements from index 1 to 3 is 4 + 5 + 6 = 15 - After operation `1 0 2 -1`, sequence: [0, 3, 4, 6, 5] - After operation `2 0 4`, the sum of elements from index 0 to 4 is 0 + 3 + 4 + 6 + 5 = 18","solution":"def process_test_cases(test_cases): results = [] for case in test_cases: N, Q, sequence, operations = case[\'N\'], case[\'Q\'], case[\'sequence\'], case[\'operations\'] # Process each operation for operation in operations: if operation[0] == 1: # Perform add operation _, l, r, V = operation for i in range(l, r + 1): sequence[i] += V elif operation[0] == 2: # Perform sum query operation _, l, r = operation results.append(sum(sequence[l:r + 1])) return results # Example input for ease if __name__ == \\"__main__\\": test_cases = [ { \'N\': 5, \'Q\': 4, \'sequence\': [1, 2, 3, 4, 5], \'operations\': [ (1, 1, 3, 2), (2, 1, 3), (1, 0, 2, -1), (2, 0, 4) ] } ] result = process_test_cases(test_cases) for res in result: print(res)"},{"question":"Write a function that takes a list of integers and a target integer as inputs. The function should return tuples of pairs of integers from the list which add up to the target integer. The order of pairs in the result should follow the order they appear in the input list. Each pair should be sorted in ascending order, and no pair should appear twice. For example, given the list `lst = [2, 4, 3, 5, 7, 8, -1]` and `target = 7` , the function should return `[(2, 5), (3, 4), (-1, 8)]`. > Note: Each pair must be a tuple of two integers, and the output should be a list of such tuples. Each pair should be unique and should not be repeated in reverse order, i.e., (2, 5) is the same as (5, 2) and should only be counted once.","solution":"def find_pairs(lst, target): Given a list of integers and a target integer, this function returns a list of unique tuples of pairs of integers from the list which add up to the target integer. Each pair in the result is sorted in ascending order. Each pair appears only once in the result, and the order of pairs follows the order they appear in the input list. :param lst: List of integers :param target: Target integer :return: List of tuples of pairs of integers adding up to the target seen = set() pairs = [] for i in range(len(lst)): for j in range(i + 1, len(lst)): if lst[i] + lst[j] == target: pair = tuple(sorted((lst[i], lst[j]))) if pair not in seen: seen.add(pair) pairs.append(pair) return pairs"},{"question":"You are managing a library and need to keep track of which books are currently borrowed by students. Each book has a unique ID, and students check out and return books throughout the day. Write a function to determine the current set of books that are still borrowed by students at the end of the day. The function named `updateLibraryStatus` should have the following parameters: - An integer `n` representing the number of transactions. - A 2D array `transactions` where each `transactions[i]` contains two space-separated integers: the first integer `book_id` which can be positive or negative, and the second integer `student_id`. Positive `book_id` indicates the book is checked out, and negative `book_id` (absolute value) indicates the book is returned. Ensure that the function returns a list of unique book IDs that are still borrowed by students sorted in ascending order. If no books are borrowed, return an empty list. Input Format The first line contains an integer n, the number of transactions. Each of the next n lines contains two space-separated integers, a book ID (can be positive or negative) and a student ID. Constraints 1leq nleq 10^4 1leq |book_id|leq 10^5 1leq student_idleq 10^5 Output Format Print a single line of space-separated unique book IDs still borrowed by students, sorted in ascending order. Print an empty line if no books are currently borrowed. Sample Input 0 5 1 101 2 102 -1 101 3 103 -2 102 Sample Output 0 3 Explanation 0 The transactions are: - Book ID 1 is checked out by student 101. - Book ID 2 is checked out by student 102. - Book ID -1 (1) is returned by student 101. - Book ID 3 is checked out by student 103. - Book ID -2 (2) is returned by student 102. The books still borrowed are only Book ID 3. Sample Input 1 4 10 201 20 202 -10 201 30 203 Sample Output 1 20 30 Explanation 1 The transactions are: - Book ID 10 is checked out by student 201. - Book ID 20 is checked out by student 202. - Book ID -10 (10) is returned by student 201. - Book ID 30 is checked out by student 203. The books still borrowed are Book IDs 20 and 30.","solution":"def updateLibraryStatus(n, transactions): borrowed_books = set() for transaction in transactions: book_id, _ = transaction if book_id > 0: borrowed_books.add(book_id) else: borrowed_books.discard(-book_id) return sorted(borrowed_books)"},{"question":"Given a list of integers, you are required to find all the unique elements that appear exactly three times in the list and print them in ascending order. Input format: - The first line contains an integer N, the number of elements in the list. - The second line contains N space-separated integers. Output format: - The first line contains a single integer M, the number of unique elements that appear exactly three times in the list. - The next M lines contain one integer each, the unique elements that appear exactly three times in ascending order. Constraints: - 1 ≤ N ≤ 100000 - Each integer in the list is between 1 and 100000 Example: Sample input: 12 1 2 2 3 3 3 4 4 4 4 5 6 Sample output: 2 3 4","solution":"def find_elements_appearing_three_times(N, elements): from collections import Counter counter = Counter(elements) thrice_elements = sorted([el for el, count in counter.items() if count == 3]) return len(thrice_elements), thrice_elements # Example usage: def process_input(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) elements = list(map(int, data[1:])) M, result = find_elements_appearing_three_times(N, elements) print(M) for el in result: print(el)"},{"question":"You are given a string S consisting of N characters. Your task is to find out the number of unique characters in the longest substring of S that contains all unique characters and its length. For example, if the given string is S = \\"abcdefggahijk\\", the longest substring with all unique characters is \\"abcdefg\\", which includes 7 distinct characters, and its length is also 7. Input The first line contains a single integer T, the number of test cases. Each of the next T lines contains a string S. Output For each test case, output two integers – the number of unique characters and the length of the longest substring containing all unique characters. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 S contains only lowercase English characters (\'a\' - \'z\') Example Input: 3 abcbcbb bbbbb pwwkew Output: 3 3 1 1 3 3 Explanation Example case 1: The longest substring containing all unique characters in \\"abcbcbb\\" is \\"abc\\", which has 3 unique characters and its length is 3. Example case 2: The longest substring containing all unique characters in \\"bbbbb\\" is \\"b\\", which has 1 unique character and its length is 1. Example case 3: The longest substring containing all unique characters in \\"pwwkew\\" is \\"wke\\", which has 3 unique characters and its length is 3.","solution":"def longest_unique_substring(S): This function finds the number of unique characters in the longest substring that contains all unique characters and its length. Parameters: S (str): The input string Returns: int, int: The number of unique characters and the length of the longest substring containing all unique characters. char_index_map = {} start = 0 max_length = 0 max_unique_count = 0 for end in range(len(S)): if S[end] in char_index_map: start = max(start, char_index_map[S[end]] + 1) char_index_map[S[end]] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length max_unique_count = len(set(S[start:end+1])) return max_unique_count, max_length def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(longest_unique_substring(S)) return results"},{"question":"You are given a matrix of integers with N rows and M columns. The goal is to find the largest rectangular area (formed by contiguous elements) in the matrix that contains only 1s (ones). You need to return the size of this largest rectangle. # Input - The first line contains two integers N and M, the number of rows and columns in the matrix respectively. - The next N lines each contain M integers (either 0 or 1) representing the matrix. # Output - A single integer denoting the size of the largest rectangle containing only 1s. # Constraints - 1 ≤ N, M ≤ 1000 - Each element of the matrix is either 0 or 1. # Example Input ``` 4 4 1 0 1 0 1 0 1 1 1 1 1 1 1 0 0 1 ``` # Example Output ``` 4 ``` # Explanation In the provided example, the largest rectangle containing only 1s has a size of 4 (which is the 2x2 rectangle in the bottom-right corner of the matrix).","solution":"def maximalRectangle(matrix): Given a 2D binary matrix filled with 0\'s and 1\'s, finds the largest rectangle containing only 1\'s and return its area. if not matrix or not matrix[0]: return 0 N, M = len(matrix), len(matrix[0]) heights = [0] * (M + 1) # Add an extra zero height at the end to handle the end condition of the row max_area = 0 for row in matrix: for i in range(M): # Update heights based on the current row if row[i] == 0: heights[i] = 0 else: heights[i] += 1 stack = [-1] for i in range(M + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Consider a tree in which each node is assigned a weight. The weight of the tree is defined as the sum of the weights of all its nodes. You are given a tree with n nodes, where each node is labeled uniquely from 1 to n. Additionally, you are provided an array w of size n, where w[i] represents the weight of the node with label i + 1. Your task is to process q queries on this tree. Each query can be of two types: 1. **Update**: Change the weight of a specific node to a new value. 2. **Find**: Compute the weight of the subtree rooted at a specific node. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000), representing the number of nodes in the tree. The second line contains n integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^9), representing the initial weights of the nodes. Each of the next n - 1 lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v), representing an edge between nodes u and v. The following line contains an integer q (1 ≤ q ≤ 100000), representing the number of queries. Each of the next q lines represents a query and can be of one of the following formats: - `1 x y`: Update the weight of node x to y (1 ≤ x ≤ n; 1 ≤ y ≤ 10^9). - `2 x`: Find the weight of the subtree rooted at node x (1 ≤ x ≤ n). -----Output----- For each query of type `2 x`, output a single integer, the weight of the subtree rooted at node x. -----Examples----- Input 5 2 1 4 2 6 1 2 1 3 3 4 3 5 3 2 1 1 3 5 2 3 Output 15 13","solution":"class Tree: def __init__(self, n, weights): self.n = n self.weights = weights self.tree = [[] for _ in range(n + 1)] self.subtree_weights = [0] * (n + 1) self.parent = [-1] * (n + 1) self.dfs_visited = [False] * (n + 1) def add_edge(self, u, v): self.tree[u].append(v) self.tree[v].append(u) def dfs(self, node): self.dfs_visited[node] = True subtree_sum = self.weights[node - 1] for neighbor in self.tree[node]: if not self.dfs_visited[neighbor]: self.parent[neighbor] = node subtree_sum += self.dfs(neighbor) self.subtree_weights[node] = subtree_sum return subtree_sum def update_weight(self, node, new_weight): diff = new_weight - self.weights[node - 1] self.weights[node - 1] = new_weight current = node while current != -1: self.subtree_weights[current] += diff current = self.parent[current] def find_subtree_weight(self, node): return self.subtree_weights[node] def process_queries(n, weights, edges, queries): tree = Tree(n, weights) for u, v in edges: tree.add_edge(u, v) tree.dfs(1) # assuming node 1 is the root results = [] for query in queries: if query[0] == 1: _, x, y = query tree.update_weight(x, y) elif query[0] == 2: _, x = query results.append(tree.find_subtree_weight(x)) return results"},{"question":"Alice and Bob are collaboratively developing a new language called AlphaLang, which heavily relies on the manipulation of lists of integers. In AlphaLang, there are pre-defined functions that perform various operations on these integer lists. These functions include: - repeat(x,n): Creates a new list by repeating the elements of list x for n times. For instance, repeat([1, 2], 3) results in [1, 2, 1, 2, 1, 2]. - merge(x,y): Combines two lists x and y into a single list by alternating elements from each list. If one list is longer, the remaining elements of the longer list are appended at the end. For example, merge([1, 2, 3], [4, 5, 6, 7]) results in [1, 4, 2, 5, 3, 6, 7]. - slice(x, a, b): Extracts a subset of list x starting from index a (inclusive) to index b (exclusive). For example, slice([1, 2, 3, 4, 5], 1, 3) results in [2, 3]. Your task is to evaluate an expression containing these operations and return the resulting list. The input expression is guaranteed to be valid, and functions should be evaluated from the innermost to the outermost. Commands in AlphaLang are case-insensitive. Input - A single line containing a valid expression. The length of the expression will not exceed 200 characters. - All lists in the input are enclosed in square brackets and consist of integers only. - All integers in the lists as well as the arguments to the functions are within the range of -100 to 100. Output - A single line containing the resulting list in standard list notation. Examples Input repeat([1, 2], 3) Output [1, 2, 1, 2, 1, 2] Input merge([1, 2, 3], [4, 5, 6, 7]) Output [1, 4, 2, 5, 3, 6, 7] Input slice(repeat([0, 1], 5), 2, 8) Output [0, 1, 0, 1, 0, 1] Input merge(slice([1, 2, 3, 4], 2, 4), repeat([0, 1], 1)) Output [3, 0, 4, 1] Input slice(merge([1, 3, 5], [2, 4, 6]), 1, 5) Output [2, 3, 4, 5]","solution":"import re import ast def repeat(lst, n): return lst * n def merge(lst1, lst2): merged = [] i = 0 while i < len(lst1) and i < len(lst2): merged.append(lst1[i]) merged.append(lst2[i]) i += 1 if i < len(lst1): merged.extend(lst1[i:]) if i < len(lst2): merged.extend(lst2[i:]) return merged def slice(lst, a, b): return lst[a:b] def evaluate_alpha_lang(expression): # Normalize to lower case to make functions case-insensitive expression = expression.lower() # Prepare helper functions to handle the operations def eval_repeat(match): lst = ast.literal_eval(match.group(1)) n = int(match.group(2)) return str(repeat(lst, n)) def eval_merge(match): lst1 = ast.literal_eval(match.group(1)) lst2 = ast.literal_eval(match.group(2)) return str(merge(lst1, lst2)) def eval_slice(match): lst = ast.literal_eval(match.group(1)) a = int(match.group(2)) b = int(match.group(3)) return str(slice(lst, a, b)) # Regular expressions to match function calls repeat_pattern = re.compile(r\'repeat(([.*?]),s*(d+))\') merge_pattern = re.compile(r\'merge(([.*?]),s*([.*?]))\') slice_pattern = re.compile(r\'slice(([.*?]),s*(d+),s*(d+))\') # Evaluate from the innermost to the outermost function calls while \'(\' in expression: expression = repeat_pattern.sub(eval_repeat, expression) expression = merge_pattern.sub(eval_merge, expression) expression = slice_pattern.sub(eval_slice, expression) return ast.literal_eval(expression)"},{"question":"Susan is working on a text analysis tool that helps her count the frequency of unique words in a given text. She needs your help to optimize her code to handle edge cases and different formats of input. The text can include punctuation, numbers, and special characters, and words are case-insensitive (e.g., \\"Hello\\" is the same as \\"hello\\"). Your task is to write a function that processes the given text and returns a dictionary where the keys are unique words and the values are their respective frequencies. Function Description Complete the word_frequency function in the editor below. word_frequency has the following parameters(s): - text: a string containing the input text Return: - a dictionary where the keys are unique words, and the values are their respective counts Input Format A single string containing the input text. The string can include letters, numbers, special characters, and punctuation. Constraints 1 <= len(text) <= 1000 Output Format A dictionary where the keys are unique words (lowercased and stripped of punctuation), and the values are their respective counts. Sample Input 0 \\"I am excited to try this new text analysis tool, aren\'t you excited too?\\" Sample Output 0 { \\"i\\": 1, \\"am\\": 1, \\"excited\\": 2, \\"to\\": 1, \\"try\\": 1, \\"this\\": 1, \\"new\\": 1, \\"text\\": 1, \\"analysis\\": 1, \\"tool\\": 1, \\"arent\\": 1, \\"you\\": 1, \\"too\\": 1 } Explanation 0 In the sample input, the text \\"I am excited to try this new text analysis tool, aren\'t you excited too?\\" is processed as follows: - All words are converted to lowercase. - Punctuation marks (like comma and apostrophe) are removed. - Each word is counted to calculate its frequency. - The apostrophe in \\"aren\'t\\" is removed, treating it as \\"arent\\". Note: Ensure any leading or trailing punctuation is handled while preserving word counts accurately.","solution":"import re from collections import defaultdict def word_frequency(text): This function returns the frequency of unique words in a given text. Arguments: text : str : input text Returns: dict : dictionary with unique words as keys and their frequencies as values # Remove punctuation and special characters from the text cleaned_text = re.sub(r\'[^a-zA-Z0-9s]\', \'\', text) # Convert to lowercase to make it case insensitive cleaned_text = cleaned_text.lower() # Split the text into words words = cleaned_text.split() # Initialize a default dictionary to count word frequencies frequency_dict = defaultdict(int) # Count each word\'s frequency for word in words: frequency_dict[word] += 1 return dict(frequency_dict) # Sample usage text = \\"I am excited to try this new text analysis tool, aren\'t you excited too?\\" print(word_frequency(text))"},{"question":"You are given two integers, `n` and `k`. Your task is to construct a list of length `n` where each element is either 0 or 1, such that the k-th smallest value of the sum of any continuous subarray of the list is maximized. For example, if `n = 5` and `k = 3`, an optimal list you can construct is `[1, 0, 1, 1, 0]` because the sums of all possible continuous subarrays are: - `[1] -> 1` - `[0] -> 0` - `[1] -> 1` - `[1] -> 1` - `[0] -> 0` - `[1, 0] -> 1` - `[0, 1] -> 1` - `[1, 1] -> 2` - `[1, 0, 1] -> 2` - `[0, 1, 1] -> 2` - `[1, 1, 0] -> 2` - `[1, 1, 1] -> 3` - `[1, 0, 1, 1] -> 3` - `[0, 1, 1, 0] -> 2` - `[1, 1, 1, 0] -> 3` - `[1, 0, 1, 1, 0] -> 3` The sorted sums would be `[0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3]`. The k-th smallest sum when `k = 3` in this example is `1`. -----Input Format:----- - The first line contains two integers, `n` and `k`. -----Output Format:----- - You should print a list of length `n` containing only 0s and 1s. -----Constraints:----- - 1 leq n leq 50 - 1 leq k leq frac{n(n+1)}{2} -----Sample Input:----- 5 3 -----Sample Output:----- 1 0 1 1 0 -----Explanation:----- In this example, the generated list `[1, 0, 1, 1, 0]` when analyzed for all continuous subarray sums, the k-th (3rd) smallest sum is 1, maximizing the possible value of such a k. This is one optimal solution, there might be others.","solution":"def construct_list(n, k): Constructs a list of length `n` where each element is either 0 or 1, such that the k-th smallest value of the sum of any continuous subarray of the list is maximized. # Simple heuristic for demonstration purpose: # Place 1s in alternating positions to ensure some high early sums. lst = [0] * n for i in range(0, n, 2): lst[i] = 1 # Adjust if necessary to keep the length exactly n if n > 1 and lst[-2] == 0: lst[-1] = 1 return lst"},{"question":"Given a string containing only lowercase alphabets, determine if the string can be rearranged to form a palindrome. If it can, return \\"YES\\", otherwise return \\"NO\\".","solution":"def can_form_palindrome(s): This function determines if a string can be rearranged to form a palindrome. Parameters: s (str): The input string containing only lowercase alphabets. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\". from collections import Counter count = Counter(s) # count number of characters that have odd occurrence odd_count = sum(1 for count in count.values() if count % 2 != 0) # a string can be rearranged to form a palindrome if there is at most one char with an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Create a function that accepts an array of integers as a parameter and returns the length of the longest sequence of consecutive integers present in the array. The sequence can be in any order and may contain gaps between elements. Example: find_longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) Returns: 4 Explanation: The longest sequence of consecutive integers is [1, 2, 3, 4], which has a length of 4. Assume the input array can be empty, in which case the function should return 0.","solution":"def find_longest_consecutive_sequence(nums): Returns the length of the longest sequence of consecutive integers in the array. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A transportation company needs to track the movement of their fleet of vehicles across multiple depots. Each vehicle can move from one depot to another in a specified order. All movements are logged and operations managers need a tool to extract specific data about vehicle movements. You need to write a program to handle multiple queries about the number of vehicles that have visited a given depot within a particular date range. Each query specifies the depot and the date range. # Input Your program will receive the following input: 1. The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 100,000) representing the number of movement logs and the number of queries respectively. 2. The next `n` lines each contain a log of a vehicle\'s movement: an integer `d_i` (1 ≤ d_i ≤ 100,000) representing the depot number and a string `date_i` in the format `YYYY-MM-DD` representing the date of the movement. 3. The following `q` lines each contain a query: an integer `d` (1 ≤ d ≤ 100,000) representing the depot number, and two strings `start_date` and `end_date` in the format `YYYY-MM-DD` representing the inclusive start and end dates for the query. # Output For each query, output the number of unique vehicles that have visited the specified depot within the given date range. # Example Input ``` 5 3 1 2023-01-01 2 2023-01-02 1 2023-01-03 3 2023-01-02 1 2023-01-04 1 2023-01-01 2023-01-04 2 2023-01-02 2023-01-02 3 2023-01-01 2023-01-02 ``` Output ``` 3 1 1 ``` # Explanation The first query asks for the number of unique vehicles that visited depot 1 between January 1, 2023, and January 4, 2023. Three distinct movements occurred at depot 1 within this time frame, hence the result is 3. The second query asks for the number of unique vehicles that visited depot 2 on January 2, 2023. Only one movement occurred, hence the result is 1. The third query asks for the number of unique vehicles that visited depot 3 between January 1, 2023, and January 2, 2023. One movement occurred, hence the result is 1.","solution":"from collections import defaultdict from datetime import datetime def parse_log_entries(n, log_entries): Parse log_entries into a dictionary grouped by depot number with each value being a list of dates (in string format). depot_movements = defaultdict(list) for log in log_entries: depot, date = log.split() depot = int(depot) depot_movements[depot].append(date) return depot_movements def count_vehicles(depot_movements, depot, start_date, end_date): Count the number of vehicle movements to a given depot within the date range including start_date and end_date. if depot not in depot_movements: return 0 visits = depot_movements[depot] start_date = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date = datetime.strptime(end_date, \\"%Y-%m-%d\\") unique_dates = set() for visit_date in visits: visit_date_obj = datetime.strptime(visit_date, \\"%Y-%m-%d\\") if start_date <= visit_date_obj <= end_date: unique_dates.add(visit_date) return len(unique_dates) def handle_queries(n, q, logs, queries): Handle all input queries and return the results as a list. depot_movements = parse_log_entries(n, logs) results = [] for query in queries: depot, start_date, end_date = query.split() depot = int(depot) result = count_vehicles(depot_movements, depot, start_date, end_date) results.append(result) return results def extract_input(data): Extract input from the provided data string. data = data.strip().split(\\"n\\") n, q = map(int, data[0].split()) logs = data[1:n+1] queries = data[n+1:n+1+q] return n, q, logs, queries"},{"question":"Amber recently discovered a fascinating character grid puzzle related to word search. You are given an `M x N` grid filled with characters and a word. Your task is to determine if the given word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in the construction of the word. Write a function that takes in the grid and the word and returns `true` if the word exists in the grid and `false` otherwise. Input: - The first line contains two space-separated integers `M` and `N` representing the number of rows and columns in the grid respectively. - The next `M` lines each contain `N` characters, separated by spaces, representing the grid. - The last line contains the word to be searched in the grid. Output: - Output `true` if the word exists in the grid; otherwise, output `false`. Constraints: - 1 ≤ M, N ≤ 200 - 1 ≤ length of the word ≤ 10 SAMPLE INPUT 3 4 A B C E S F C S A D E E ABCCED SAMPLE OUTPUT true SAMPLE INPUT 3 4 A B C E S F C S A D E E SEE SAMPLE OUTPUT true SAMPLE INPUT 3 4 A B C E S F C S A D E E ABCB SAMPLE OUTPUT false","solution":"def exists_in_grid(grid, word): Determines if the word exists in the M x N grid. M = len(grid) N = len(grid[0]) def dfs(x, y, index): if index == len(word): return True if x < 0 or x >= M or y < 0 or y >= N or grid[x][y] != word[index]: return False temp, grid[x][y] = grid[x][y], \'#\' found = (dfs(x + 1, y, index + 1) or dfs(x - 1, y, index + 1) or dfs(x, y + 1, index + 1) or dfs(x, y - 1, index + 1)) grid[x][y] = temp return found for i in range(M): for j in range(N): if dfs(i, j, 0): return True return False"},{"question":"Alan is playing a game with a set of N cards, each containing a unique integer. He can make a move by choosing any two cards, say A_i and A_j, and then reducing A_i by A_j. This move changes the value of A_i to (A_i - A_j) and leaves A_j unchanged. Alan aims to reduce each card value to its smallest non-negative value. Write a program to find and return the smallest non-negative value for each card after performing any number of moves. -----Input----- The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. For each test case: - The first line contains an integer N (2 leq N leq 100) — the number of cards. - The second line contains N space-separated integers A_i (1 leq A_i leq 10^9) — the values on the cards. -----Output----- For each test case, output N space-separated integers representing the smallest non-negative value for each card after performing any number of moves. -----Examples----- Input 2 4 15 20 25 30 3 6 9 12 Output 5 5 5 5 3 3 3 -----Note----- In the first test case, the smallest non-negative value for each card is 5. This is because the greatest common divisor (GCD) of 15, 20, 25, 30 is 5, and this is the smallest value reachable for each card through the move operation described. In the second test case, the smallest non-negative value for each card is 3. The greatest common divisor (GCD) of 6, 9, 12 is 3, so all cards can be reduced to 3.","solution":"import math def smallest_non_negative_values(test_cases): results = [] for cards in test_cases: gcd_value = math.gcd(*cards) results.append([gcd_value] * len(cards)) return results # Helper function to parse the input correctly def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): N = int(lines[index]) cards = list(map(int, lines[index + 1].split())) test_cases.append(cards) index += 2 return test_cases # Function to format the output correctly def format_output(results): output = [] for result in results: output.append(\\" \\".join(map(str, result))) return \\"n\\".join(output) # Main function to handle input and output def main(input_str): test_cases = parse_input(input_str) results = smallest_non_negative_values(test_cases) return format_output(results)"},{"question":"In a certain village, there is a tradition of crafting unique patterns using tiles. Each tile is a square with side length 1, and the surface of each tile is either white or black. The villagers follow a rule to determine the color of each tile in the pattern. The pattern is made on an N times N grid based on the following rules: 1. The first column of the grid is entirely made of black tiles. 2. Any other tiles in the grid (except the first column) will be black if and only if there is at least one black tile in the cells to the left (i.e., in the same row and any column to the left). 3. If the cell is not black, it will be white. Given an integer N (2 leq N leq 100), create a program to print the described tile pattern. Each black tile is represented by a \'#\' character, and each white tile is represented by a \'.\' character. Input - The input consists of a single integer N, which is the size of the grid. Output - Print the resulting N times N grid, with each row in a new line. Example Input ``` 5 ``` Output ``` #.... #.... #.... #.... #.... ``` Input ``` 3 ``` Output ``` #.. #.. #.. ```","solution":"def generate_tile_pattern(N): Generates a tile pattern for a given N as described in the problem. :param N: Integer, the size of the grid (N x N) :return: list of strings, where each string represents a row of the pattern pattern = [] for _ in range(N): row = \'#\' + \'.\' * (N - 1) # First tile is black (#), the rest are white (.) pattern.append(row) return pattern"},{"question":"Website Uptime Monitor A company monitors the uptime of its website using a list of logs. Each log entry records the start and end time of a period when the website was down for maintenance. The website is considered down for the entire duration specified in each log entry. The company wants to track the total downtime during a specified range of dates and times. You need to write a program that, given a list of logs and a query range, calculates the total number of minutes the website was down during that range. Input The input consists of two parts: 1. The first part is a list of log entries, where each entry contains two strings in the format \\"YYYY-MM-DD HH:MM\\" representing the start and end times of a downtime period. 2. The second part is a query range consisting of two strings in the same format, representing the start and end of the query range. Output Output a single integer representing the total number of minutes the website was down during the specified range. Constraints - The log entries and the query range will always be valid and follow the \\"YYYY-MM-DD HH:MM\\" format. - The start time will always be before the end time. - The dates will be in the Gregorian calendar period. - There will be no overlapping log entries. Sample Input 1 ``` 2023-01-01 00:00 2023-01-01 02:00 2023-01-01 03:00 2023-01-01 05:00 2023-01-01 10:00 2023-01-01 12:00 2023-01-01 01:00 2023-01-01 06:00 ``` Query range: ``` 2023-01-01 01:00 2023-01-01 04:00 ``` Sample Output 1 ``` 180 ``` Sample Input 2 ``` 2023-01-01 00:00 2023-01-01 01:30 2023-01-01 02:00 2023-01-01 03:00 2023-01-01 04:00 2023-01-01 05:30 2023-01-02 09:00 2023-01-02 11:00 ``` Query range: ``` 2023-01-01 00:00 2023-01-01 02:00 ``` Sample Output 2 ``` 90 ``` Sample Input 3 ``` 2023-01-01 00:00 2023-01-01 01:00 2023-01-01 05:00 2023-01-01 06:00 2023-01-03 09:00 2023-01-03 10:00 ``` Query range: ``` 2023-01-02 10:00 2023-01-03 09:00 ``` Sample Output 3 ``` 0 ```","solution":"from datetime import datetime def calculate_downtime(logs, query_range): Calculate the total downtime in minutes during the specified query range. Args: logs (list of tuples): List of tuples where each tuple contains two strings representing the start and end time of a downtime period. query_range (tuple): A tuple with two strings representing the start and end time of the query range. Returns: int: Total number of minutes the website was down during the query range. query_start, query_end = [datetime.strptime(time, \\"%Y-%m-%d %H:%M\\") for time in query_range] total_downtime = 0 for log in logs: log_start, log_end = [datetime.strptime(time, \\"%Y-%m-%d %H:%M\\") for time in log] # Calculate the overlapping period between the log entry and the query range overlap_start = max(log_start, query_start) overlap_end = min(log_end, query_end) if overlap_start < overlap_end: downtime_minutes = (overlap_end - overlap_start).total_seconds() / 60 total_downtime += downtime_minutes return int(total_downtime)"},{"question":"Your friend is passionate about hiking and decides to build a trail with some fascinating viewpoints. She wants to organize the viewpoints such that each viewpoint is connected to exactly two other viewpoints (one before it and one after it), forming a single continuous path starting at the first viewpoint and ending at the last one. To achieve this, she provides you with a list of viewpoints and pairs of viewpoints which are directly connected. Your task is to output the order of viewpoints that form the path she desires. If there are multiple possible valid paths, return any one of them. If there is no valid path, return \\"No valid path\\". # Input The input consists of: - An integer `N` (2 ≤ N ≤ 1000), the number of viewpoints. - An integer `M` (N-1 ≤ M ≤ N * (N-1) / 2), the number of connections. - A list of M pairs of integers (u, v), each pair denotes a connection between viewpoint `u` and viewpoint `v` (1 ≤ u, v ≤ N). # Output Print a single line containing the order of viewpoints from the first to the last forming a single continuous path. If there is no valid path, print \\"No valid path\\". # Example Input 1 ``` 5 4 1 2 2 3 3 4 4 5 ``` Output 1 ``` 1 2 3 4 5 ``` Input 2 ``` 4 4 1 2 1 3 1 4 2 3 ``` Output 2 ``` No valid path ```","solution":"def find_valid_path(N, M, connections): from collections import defaultdict, deque # create adjacency list adj = defaultdict(list) degree = [0] * (N + 1) for u, v in connections: adj[u].append(v) adj[v].append(u) degree[u] += 1 degree[v] += 1 # detect endpoints endpoints = [i for i in range(1, N + 1) if degree[i] == 1] if len(endpoints) != 2: return \\"No valid path\\" # Breadth First Search (BFS) or Depth First Search (DFS) to find the path start = endpoints[0] path = [] visited = set() def dfs(node): path.append(node) visited.add(node) for neighbor in adj[node]: if neighbor not in visited: dfs(neighbor) dfs(start) if len(path) == N: return \\" \\".join(map(str, path)) else: return \\"No valid path\\""},{"question":"Write a function to calculate the minimum number of steps required to make two given strings anagrams of each other. Return -1 if the two strings are of different lengths. An anagram of a string is another string that contains the same characters, only the order of characters can be different. *For example, the strings \\"listen\\" and \\"silent\\" are anagrams of each other.* *The strings \\"hello\\" and \\"billion\\" are not anagrams of each other.* You may assume the input strings consist only of lowercase English letters. The function should handle edge cases like empty strings efficiently.","solution":"from collections import Counter def min_steps_to_make_anagram(str1, str2): Returns the minimum number of steps required to make two given strings anagrams of each other. If the two strings have different lengths, returns -1. Steps are defined as changing a character from one string to any other character. :param str1: First string :param str2: Second string :return: Minimum number of steps or -1 if strings have different lengths if len(str1) != len(str2): return -1 count1 = Counter(str1) count2 = Counter(str2) steps = 0 for char in count1: if char in count2: if count1[char] > count2[char]: steps += count1[char] - count2[char] else: steps += count1[char] return steps"},{"question":"Alex is a competitive programmer who wants to practice problem-solving with integer arrays. He has come up with a new task to help himself improve his ability to manipulate arrays and handle queries. You are given an array of integers and a number of queries. Each query consists of two integers (l) and (r) which are the starting and ending indices of a subarray. For each query, you need to compute the sum of all even numbers within the range ([l, r]) (inclusive) of the array. -----Input----- The first line of input contains two integers (n, q) ((1 leq n leq 100,000); (1 leq q leq 50,000)). The second line contains (n) integers (a_1, a_2, ldots, a_n) ((0 leq a_i leq 1,000,000)), the elements of the array. Each of the next (q) lines contains two integers (l) and (r) ((1 leq l leq r leq n)), representing a query. -----Output----- For each query, output the sum of all even numbers within the specified subarray on a new line. -----Examples----- Sample Input 1: 5 3 1 2 3 4 5 1 3 2 5 1 5 Sample Output 1: 2 6 6 Sample Input 2: 6 2 6 2 4 1 3 5 1 4 2 6 Sample Output 2: 12 6","solution":"def sum_of_even_numbers_in_subarray(n, q, array, queries): # Pre-compute the prefix sums of even numbers prefix_evens = [0] * (n + 1) for i in range(1, n + 1): if array[i - 1] % 2 == 0: prefix_evens[i] = prefix_evens[i - 1] + array[i - 1] else: prefix_evens[i] = prefix_evens[i - 1] results = [] for l, r in queries: sum_evens = prefix_evens[r] - prefix_evens[l - 1] results.append(sum_evens) return results"},{"question":"A famous game developer has designed a new game called \\"Island Hopper\\". In this game, players start on an island located at point (sx, sy) and need to reach a target island located at (tx, ty) on a 2-D coordinate plane. There are several teleportation points on the plane that can help players reach their destination faster. Each teleportation point consists of an input coordinate (inX, inY) and an output coordinate (outX, outY). When a player reaches an input coordinate, they can immediately teleport to the corresponding output coordinate. The player can also move one unit in any of the four cardinal directions (up, down, left, right) in one second. You need to determine the minimum time required for the player to move from the starting point to the target point, either through normal movement or by using the teleportation points optimally. Input: The first line contains two space-separated integers sx and sy representing the starting coordinates, followed by two space-separated integers tx and ty representing the target coordinates. The second line contains an integer n, the number of teleportation points. The next n lines each contain four space-separated integers inX, inY, outX, and outY representing each teleportation point. Output: Print the minimum time required to reach the target island from the starting island. Constraints: 0 ≤ sx, sy, tx, ty, inX, inY, outX, outY ≤ 1000 0 ≤ n ≤ 100 0 ≤ |sx - tx|, |sy - ty| ≤ 1000 SAMPLE INPUT 0 0 10 10 3 1 1 8 8 2 2 3 3 6 6 10 5 SAMPLE OUTPUT 6 Explanation: In the given sample input, the player starts at point (0,0) and needs to reach (10,10). Using the first teleportation point (1,1) -> (8,8), the player can significantly reduce the travel time: - The player first moves from (0,0) to (1,1) in 2 seconds. - Then teleports from (1,1) to (8,8) instantly. - Finally, the player moves from (8,8) to (10,10) in another 4 seconds. Thus, the total minimum time required is 2 + 4 = 6 seconds.","solution":"from collections import deque def min_time_to_target(sx, sy, tx, ty, teleport_points): def bfs(): queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: x, y, time = queue.popleft() if (x, y) == (tx, ty): return time # Move in 4 cardinal directions for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx <= 1000 and 0 <= ny <= 1000 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, time + 1)) # Use teleportation points for inX, inY, outX, outY in teleport_points: if (x, y) == (inX, inY) and (outX, outY) not in visited: visited.add((outX, outY)) queue.append((outX, outY, time)) return float(\'inf\') return bfs() # Function to process input and invoke solution def island_hopper(sx, sy, tx, ty, n, teleport_list): teleport_points = [tuple(map(int, tpl.split())) for tpl in teleport_list] return min_time_to_target(sx, sy, tx, ty, teleport_points)"},{"question":"You are a member of the organizing committee for a prestigious coding competition. This year, you\'ve been tasked with creating a unique challenge. The problem should explore a classical algorithm or data structure but place it in a unique context, making it engaging for participants. Design a problem involving an array of positive integers where the goal is to determine the number of distinct subarrays which have a specific sum. This should leverage knowledge of prefix sums and maps (dictionaries). Format the question as follows: Write a function `countSubarraysWithSum(arr, target)` that takes in an array of positive integers `arr` and a target sum `target`, and returns the number of distinct subarrays that sum up to `target`. # Input - An array `arr` of positive integers, where `1 <= len(arr) <= 10^5` and `1 <= arr[i] <= 10^4`. - An integer `target` where `1 <= target <= 10^9`. # Output - An integer denoting the number of distinct subarrays in `arr` that sum up to `target`. # Example Input ```plaintext arr = [1, 2, 3, 4, 2] target = 6 ``` Output ```plaintext 2 ``` Explanation There are two subarrays that sum to `6`: `[1, 2, 3]` and `[4, 2]`. # Constraints - The array may be very large, so consider efficient approaches both in terms of time and space complexity. - Aim to utilize the properties of prefix sums and hash maps (dictionaries) to achieve an optimal solution.","solution":"def countSubarraysWithSum(arr, target): Returns the number of distinct subarrays with the given sum. :param arr: List[int] - array of positive integers :param target: int - target sum for the subarrays :return: int - number of distinct subarrays that sum to target prefix_sum_counts = {0: 1} count = 0 current_sum = 0 for num in arr: current_sum += num if (current_sum - target) in prefix_sum_counts: count += prefix_sum_counts[current_sum - target] if current_sum in prefix_sum_counts: prefix_sum_counts[current_sum] += 1 else: prefix_sum_counts[current_sum] = 1 return count"},{"question":"Given an array of integers `arr`, sort the array in a way that the relative order of the even and odd numbers remain the same: even numbers should come first, followed by odd numbers, while preserving the original order of the even numbers and the original order of the odd numbers. Write a function `reorderEvenOdd(arr)` that takes an array `arr` of integers and returns the reordered array. Example 1: Input: arr = [3, 1, 2, 4] Output: [2, 4, 3, 1] Explanation: The even numbers [2, 4] come first and keep their original order, followed by the odd numbers [3, 1] in their original order. Example 2: Input: arr = [1, 3, 5, 7, 2, 4, 6] Output: [2, 4, 6, 1, 3, 5, 7] Explanation: The even numbers [2, 4, 6] come first and keep their original order, followed by the odd numbers [1, 3, 5, 7] in their original order. Example 3: Input: arr = [2, 4, 6, 1, 3, 5, 7] Output: [2, 4, 6, 1, 3, 5, 7] Explanation: The even numbers [2, 4, 6] remain first, followed by the odd numbers [1, 3, 5, 7], both keeping their original order. Constraints: 1. 1 <= arr.length <= 10^5 2. -10^6 <= arr[i] <= 10^6","solution":"def reorderEvenOdd(arr): Reorders the array so that even numbers come first, followed by odd numbers, while preserving the relative order of even and odd numbers in the input array. Parameters: arr (list of int): The input array of integers. Returns: list of int: The reordered array with even numbers first followed by odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Given a string S, check if it is a palindrome. Input There is a single positive integer T on the first line of input. It stands for the number of strings to follow. Then there are T lines, each containing exactly one string S. Each string S consists of lower case alphabetical characters only, and its length does not exceed 100 characters. Output For every input string S, output \\"YES\\" if it is a palindrome, otherwise \\"NO\\". Example Input: 3 racecar hello madam Output: YES NO YES","solution":"def is_palindrome(S): Returns \'YES\' if string S is a palindrome, otherwise \'NO\'. return \\"YES\\" if S == S[::-1] else \\"NO\\" def check_palindromes(T, strings): Checks multiple strings if they are palindromes. Parameters: T (int): number of strings strings (list of str): list of strings to be checked Returns: list of str: list of \'YES\' or \'NO\' for each string results = [] for s in strings: results.append(is_palindrome(s)) return results"},{"question":"You are given an array of positive integers representing the heights of buildings in a row. You need to process q queries of three types: 1. 1 x h: Increase the height of the x-th building by h. 2. 2 x h: Decrease the height of the x-th building by h. 3. 3 x y: Find the maximum height among the buildings from the x-th to the y-th building, inclusive. Input The first line contains two integers n, q (1 ≤ n, q ≤ 2 ⋅ 10^5) — the number of buildings and the number of queries. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) — the initial heights of the buildings. Each of the next q lines contains three integers t, x, y (1 ≤ t ≤ 3, 1 ≤ x ≤ n, 1 ≤ y ≤ 10^9), each describing the next query. Output For each query of type 3, output the result on a new line. Example Input 5 5 3 1 4 1 5 1 3 2 2 1 1 3 1 3 3 2 5 3 3 5 Output 5 5 6 Note After first query, the array of heights becomes {3, 1, 6, 1, 5}. After the second query, the array of heights becomes {2, 1, 6, 1, 5}. For the third query, the maximum height among buildings 1, 2, and 3 is 6. For the fourth query, the maximum height among buildings 2, 3, 4, and 5 is also 6. For the fifth query, the maximum height among buildings 3, 4, and 5 is 6.","solution":"def process_queries(n, q, heights, queries): Process the list of queries on a given array of building heights. Parameters: n (int): Number of buildings. q (int): Number of queries. heights (list): List of initial heights of buildings. queries (list of tuples): Each tuple contains (t, x, y) representing the query. Returns: list: Results of the type 3 queries. results = [] for query in queries: t, x, y = query if t == 1: heights[x - 1] += y elif t == 2: heights[x - 1] -= y elif t == 3: results.append(max(heights[x - 1:y])) return results # Sample usage: # n = 5 # q = 5 # heights = [3, 1, 4, 1, 5] # queries = [(1, 3, 2), (2, 1, 1), (3, 1, 3), (3, 2, 5), (3, 3, 5)] # print(process_queries(n, q, heights, queries)) # [6, 6, 6]"},{"question":"You are leading a software engineering team that builds a system to analyze sales data from multiple branches of a store. Each branch generates a daily sales report. The report for each day consists of the total number of products sold for each product category. You need to determine the product category that generated the highest average daily sales across all branches over a given time period. -----Input----- - The first line contains two integers 1 leq b leq 500 and 1 leq d leq 100, which represent the number of branches and the number of days, respectively. - The second line contains an integer 1 leq c leq 100, the number of product categories. - This is followed by b sets of d lines each. Each of these lines contains c integers, where the j^{th} integer denotes the number of products sold in the j^{th} category on that day by the respective branch. -----Output----- Print the 1-based index of the product category with the highest average daily sales across all branches. If there is a tie, print the smallest index among the tied categories. -----Examples----- Sample Input: 2 3 3 5 3 8 6 1 7 2 4 9 7 2 5 3 6 8 4 3 7 Sample Output: 3","solution":"def highest_avg_sales_category(b, d, c, sales_data): total_sales = [0] * c category_sales_days = [0] * c index = 0 for branch in range(b): for day in range(d): for category in range(c): total_sales[category] += sales_data[index][category] index += 1 avg_sales = [(total_sales[i] / (b * d)) for i in range(c)] max_avg_sales = max(avg_sales) for i in range(c): if avg_sales[i] == max_avg_sales: return i + 1 # Example usage: # b = 2 # d = 3 # c = 3 # sales_data = [ # [5, 3, 8], # [6, 1, 7], # [2, 4, 9], # [7, 2, 5], # [3, 6, 8], # [4, 3, 7] # ] # print(highest_avg_sales_category(b, d, c, sales_data)) # Output: 3"},{"question":"Given an array of integers `arr`, you are to implement a function that re-arranges the elements so that every `arr[i]` is less than or equal to `arr[2*i+1]` (if it exists) and `arr[2*i+2]` (if it exists), which effectively organizes the array into a max-heap. For example, in a heap the largest element is the root and every parent node is greater than or equal to its child nodes. The specific ordering within left and right children does not matter. Write a function: ```python def max_heapify(arr: List[int]) -> List[int]: pass ``` # Input - `arr`: a list of integers # Output - Return an array that represents the max-heap rooted at index 0 # Examples ```python Example 1: Input: arr = [1,3,6,5,9,8] Output: [9, 5, 8, 1, 3, 6] Explanation: By re-arranging the elements we get a valid max-heap [9, 5, 8, 1, 3, 6]. Other correct outputs could be [9, 6, 8, 5, 1, 3] or any heap that satisfies the max-heap property. Example 2: Input: arr = [3,1,5,2,4] Output: [5, 4, 3, 1, 2] Explanation: One possible max-heap arrangement is [5, 4, 3, 1, 2]. Other valid heaps satisfying the max-heap property are also acceptable. Example 3: Input: arr = [10, 15, 20, 17, 25] Output: [25, 17, 20, 10, 15] Explanation: One possible max-heap arrangement is [25, 17, 20, 10, 15]. Another could be [25, 15, 20, 10, 17], etc. Example 4: Input: arr = [5, 7] Output: [7, 5] Explanation: One possible max-heap arrangement is [7, 5]. ``` # Constraints - The length of the array will be between 1 and 10^5. - The values in the array will be between -10^5 and 10^5. Note: The function should not utilize any built-in heap library methods. Instead, the heap property should be enforced by the function manually.","solution":"def max_heapify(arr): Function to convert arr into a max-heap. def heapify(arr, n, i): largest = i left = 2 * i + 1 right = 2 * i + 2 if left < n and arr[largest] < arr[left]: largest = left if right < n and arr[largest] < arr[right]: largest = right if largest != i: arr[i], arr[largest] = arr[largest], arr[i] heapify(arr, n, largest) n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) return arr"},{"question":"Fruit Basket Competition You are organizing a fruit basket competition where participants submit their basket of fruits each day for N days. Each basket contains one type of fruit with a unique count assigned to it. The number of fruits in the basket on day 1, 2, 3, ldots, N were F_1, F_2, F_3, ldots, F_N , respectively. You feel accomplished if there is at least one day when the number of fruits in the basket is an even number and another day when it is an odd number. Write a program that determines whether there was at least one even and one odd number of fruits across the N days. **Input** The input will be given in the following format from standard input: N F_1 F_2 F_3 ldots F_N **Output** Print \\"YES\\" if there was at least one day with an even number of fruits and at least one day with an odd number of fruits. Otherwise, print \\"NO\\". **Constraints** - 1 leq N leq 100000 - 1 leq F_i leq 1000000000 - All inputs are integers. **Input example 1** ``` 5 1 2 3 4 5 ``` **Output example 1** ``` YES ``` **Input example 2** ``` 3 2 4 6 ``` **Output example 2** ``` NO ``` **Input example 3** ``` 4 1 3 5 7 ``` **Output example 3** ``` NO ``` **Explanation** In the first example, there are both even and odd numbers of fruits (e.g., 2 is even and 1, 3, 5 are odd) in the given days. In the second example, all fruits counts are even numbers, so it\'s impossible to find an odd count. In the third example, all fruits counts are odd numbers, so it\'s impossible to find an even count.","solution":"def check_even_and_odd(N, fruits): Checks if there is at least one day with an even number of fruits and one day with an odd number of fruits. Args: N (int): Number of days fruits (list of int): List of fruits count for each day Returns: str: \\"YES\\" if there is at least one even and one odd, otherwise \\"NO\\" has_even = False has_odd = False for count in fruits: if count % 2 == 0: has_even = True else: has_odd = True if has_even and has_odd: return \\"YES\\" return \\"NO\\""},{"question":"Availability of Products Given an inventory of products in a warehouse, you need to implement a system that can answer queries about product availability. There are N products in the warehouse, numbered from 1 to N. Each product has an initial availability status which is either \\"available\\" (A) or \\"not available\\" (N). You need to process two types of operations: 1. **Update Operation:** Change the availability status of a product. 2. **Query Operation:** Check if a given product is currently available. ------ Input ------ - The first line of the input contains an integer N (1 leq N leq 10^6), the number of products. - The second line contains a string of length N consisting of the characters \'A\' (available) and \'N\' (not available), representing the initial availability status of the products. - The third line contains an integer Q (1 leq Q leq 10^5), the number of operations. - The following Q lines represent the operations: - For an update operation, the line will be of the form `U i s`, where U is the character representing an update operation, i (1 leq i leq N) is the index of the product, and s is the new status (\'A\' or \'N\'). - For a query operation, the line will be of the form `Q i`, where Q is the character representing a query operation, and i (1 leq i leq N) is the index of the product to query. ------ Output ------ For each query operation, output \\"YES\\" if the product is available, and \\"NO\\" if it is not available. ------ Sample Input ------ 5 AANNA 6 Q 1 Q 3 U 3 A Q 3 U 5 A Q 5 ------ Sample Output ------ YES NO YES YES ------ Explanation ------ - Initial status: AANNA - Query 1: Product 1 is available, so output \\"YES\\". - Query 2: Product 3 is not available, so output \\"NO\\". - Update 3: Change product 3 status to available, updated status is AAANA. - Query 3: Product 3 is now available, so output \\"YES\\". - Update 5: Change product 5 status to available, updated status is AAAA. - Query 5: Product 5 is now available, so output \\"YES\\".","solution":"def process_operations(N, initial_status, operations): status = list(initial_status) results = [] for operation in operations: op_parts = operation.split() if op_parts[0] == \'U\': _, i, s = op_parts i = int(i) - 1 status[i] = s elif op_parts[0] == \'Q\': _, i = op_parts i = int(i) - 1 if status[i] == \'A\': results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are a software engineer in a robotics company and need to design a path planning algorithm for a robot inside a grid-based warehouse. Given an m x n grid warehouse represented by a 2D array grid, where: - Each cell in grid represents a location in the warehouse. - grid[i][j] is either 0 (an empty cell) or 1 (an obstacle). The robot needs to move from the top-left corner of the grid (0, 0) to the bottom-right corner (m-1, n-1). The robot can only move one step at a time, either right or down. Write a function that will count the number of unique paths that the robot can take to reach the destination. The function should implement the following signature: ```python def unique_paths_with_obstacles(grid: List[List[int]]) -> int: # Your code here ``` # Input - An integer T representing the number of test cases. - For each test case: - An integer m representing the number of rows in the grid. - An integer n representing the number of columns in the grid. - A 2D array grid of size m x n, where each element is either 0 or 1. # Output - For each test case, output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner in the corresponding grid. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ m, n ≤ 100 - grid[i][j] ∈ {0, 1} # Example Input ``` 2 3 3 0 0 0 0 1 0 0 0 0 3 3 0 1 0 0 1 0 0 0 0 ``` # Example Output ``` 2 1 ``` # Explanation Test Case #1: The grid is ``` 0 0 0 0 1 0 0 0 0 ``` The robot can take the following paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Test Case #2: The grid is ``` 0 1 0 0 1 0 0 0 0 ``` The only path the robot can take is: 1. Down -> Down -> Right -> Right Assume the robot cannot move through cells with obstacles (1s) and cannot go outside the grid boundaries. If there is no valid path, the function should return 0.","solution":"from typing import List def unique_paths_with_obstacles(grid: List[List[int]]) -> int: m = len(grid) n = len(grid[0]) # If the starting cell or the ending cell is an obstacle, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Create a DP table with the same dimensions as the grid dp = [[0] * n for _ in range(m)] # Initialize the starting position dp[0][0] = 1 # Fill the DP table for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are organizing a charity run and want to find the best date for it. To ensure maximum participation, you decide to pick a date that happens to be a Sunday. Given a list of potential dates, find out how many of them fall on a Sunday. Input The first line of the input contains an integer n (1 ≤ n ≤ 20) — the number of potential dates you have. The following n lines contain dates, one per line, formatted as \\"YYYY-MM-DD\\" (2000 ≤ YYYY ≤ 2099; 01 ≤ MM ≤ 12; 01 ≤ DD ≤ 31). It\'s guaranteed that all the given dates are correct. Output Output a single integer — the number of dates which fall on a Sunday. Examples Input 4 2023-08-13 2023-09-17 2025-12-25 2026-01-04 Output 2","solution":"from datetime import datetime def count_sundays(dates): Returns the number of dates that fall on a Sunday. sunday_count = 0 for date_str in dates: date = datetime.strptime(date_str, \\"%Y-%m-%d\\") if date.weekday() == 6: # Sunday is represented by 6 sunday_count += 1 return sunday_count def main(): n = int(input()) dates = [input().strip() for _ in range(n)] print(count_sundays(dates)) if __name__ == \\"__main__\\": main()"},{"question":"**Problem** A professional photo editor is working on a series of images and needs to apply a color filter uniformly to enhance specific colors based on given requirements. The editor has to make adjustments to the RGB values of the pixels based on three types of filters. - Filter Type 1: Increase the red component of every pixel by `v` units (this value is denoted as `r_u`). - Filter Type 2: Increase the green component of every pixel by `v` units (this value is denoted as `g_u`). - Filter Type 3: Increase the blue component of every pixel by `v` units (this value is denoted as `b_u`). Given the initial RGB values of a single pixel and a series of filters to be applied, determine the final RGB values of the pixel after all the filters have been applied. **Constraints** - 0 ≤ initial_r, initial_g, initial_b ≤ 255 (initial RGB values) - 1 ≤ m ≤ 100000 (number of filters) - 0 ≤ qi ≤ 2 (filter type: 0 for red, 1 for green, and 2 for blue) - 0 ≤ vi ≤ 255 (value increase for each filter) **Input** The input consists of several lines: - The first line contains three integers: `initial_r`, `initial_g`, and `initial_b`. - The second line contains an integer `m` indicating the number of filters. - The next `m` lines each contain two integers `q` (filter type) and `v` (value increase). **Output** Output three integers representing the final `r`, `g`, and `b` values of the pixel, each clamped to a maximum of 255. **Examples** **Input** ``` 100 150 200 3 0 60 1 50 2 10 ``` **Output** ``` 160 200 210 ``` **Input** ``` 10 20 30 4 0 100 1 200 1 50 2 250 ``` **Output** ``` 110 255 255 ```","solution":"def apply_filters(initial_r, initial_g, initial_b, filters): Apply the given filters to the initial RGB values. Parameters: initial_r (int): Initial red component. initial_g (int): Initial green component. initial_b (int): Initial blue component. filters (list of tuples): List of filters, each filter is a tuple (q, v). Returns: tuple: Final RGB values after applying all filters. r, g, b = initial_r, initial_g, initial_b for filter_type, value in filters: if filter_type == 0: # Red filter r += value elif filter_type == 1: # Green filter g += value elif filter_type == 2: # Blue filter b += value # Clamp each value to the range [0, 255] r = min(255, r) g = min(255, g) b = min(255, b) return r, g, b"},{"question":"A researcher named Alex is working on analyzing genetic sequences to identify specific patterns. Each genetic sequence is composed of the characters \'A\', \'T\', \'C\', and \'G\'. To reduce the complexity of his analysis, Alex needs a program that can determine if a given sequence contains any repetitions of length k. A repetition of length k is a subsequence of the given sequence which appears more than once. Your task is to write a function that will help Alex identify if such repetitions exist in the sequence. -----Input----- The input contains two lines. The first line contains an integer k (1 ≤ k ≤ 100) representing the length of the subsequence to look for. The second line contains a string s (1 ≤ |s| ≤ 10000) representing the genetic sequence to be analyzed. The string consists only of the characters \'A\', \'T\', \'C\', \'G\'. -----Output----- Print \\"YES\\" (without quotes) if there is any repetition of length k in the sequence, otherwise print \\"NO\\" (without quotes). -----Examples----- Input 3 ATCGATCGA Output YES Input 2 ATCG Output NO Input 4 ATCGATCGAA Output YES","solution":"def has_repetition_of_length_k(k, s): Determines if the sequence contains any repetitions of length k. Parameters: k (int): Length of the subsequence to look for. s (str): The genetic sequence to be analyzed. Returns: str: \\"YES\\" if there is any repetition of length k, otherwise \\"NO\\". seen = set() for i in range(len(s) - k + 1): substring = s[i:i+k] if substring in seen: return \\"YES\\" seen.add(substring) return \\"NO\\""},{"question":"Consider a grid with R rows and C columns. Each cell in the grid has a certain number of coins, given by an R x C matrix. A robot starts at the top-left corner of the grid (1,1) and wants to move to the bottom-right corner (R,C). It can only move either right or down at each step. The robot wants to gather the maximum number of coins along its path. Determine the maximum number of coins the robot can collect. -----Constraints----- - 1 ≤ R, C ≤ 50 - 0 ≤ Number of coins in each cell ≤ 1000 -----Input----- The input is given from Standard Input in the following format: R C matrix[1][1] matrix[1][2] ... matrix[1][C] matrix[2][1] matrix[2][2] ... matrix[2][C] : matrix[R][1] matrix[R][2] ... matrix[R][C] -----Output----- Output a single integer representing the maximum number of coins the robot can collect on its path from the top-left corner to the bottom-right corner of the grid. -----Sample Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 29 The optimal path that maximizes the number of coins collected is: Right -> Right -> Down -> Down. The coins collected along this path are 1 + 2 + 3 + 6 + 9 = 21, which is the maximum possible.","solution":"def max_coins(R, C, matrix): # Initialize a 2D dp array where dp[i][j] represents the maximum coins collected to reach cell (i,j) dp = [[0] * C for _ in range(R)] # Fill in the dp array for i in range(R): for j in range(C): # Take the value of the current cell dp[i][j] = matrix[i][j] # If not in the first row, add the maximum coins collected from the cell directly above if i > 0: dp[i][j] += dp[i-1][j] # If not in the first column, add the maximum coins collected from the cell directly to the left if j > 0: dp[i][j] = max(dp[i][j], matrix[i][j] + dp[i][j-1]) # If both top cell and left cell exist, take the maximum of the two possible paths if i > 0 and j > 0: dp[i][j] = max(dp[i][j], matrix[i][j] + dp[i-1][j], matrix[i][j] + dp[i][j-1]) # The value at the bottom-right corner will be the maximum coins collected return dp[R-1][C-1]"},{"question":"Create a function `smallest_unique` that identifies the smallest unique number in a list of integers. If there are no unique numbers in the list, return -1. -----Input----- The function `smallest_unique` receives a list of integers `nums` where 1 ≤ len(nums) ≤ 2000, and each integer in the list is in the range from 0 to 10^6. -----Output----- The function should return a single integer which is the smallest unique number in the list. If there is no unique number, return -1. -----Examples----- Input [4, 2, 3, 2, 4, 3, 1] Output 1 Input [5, 4, 4, 3, 5, 2] Output 2 Input [7, 7, 7, 7] Output -1 -----Note----- In the first example, the unique numbers are [1], and the smallest is 1. In the second example, the unique numbers are [3, 2], and the smallest is 2. In the last example, there are no unique numbers, so the function returns -1. -----Function Signature----- ```python def smallest_unique(nums: List[int]) -> int: ```","solution":"def smallest_unique(nums): Identifies the smallest unique number in a list of integers. If there are no unique numbers, returns -1. from collections import Counter count = Counter(nums) unique_nums = [num for num, freq in count.items() if freq == 1] if not unique_nums: return -1 return min(unique_nums)"},{"question":"You are given a list of strings representing different activities John can engage in throughout the day. Each activity has a specific energy cost associated with it: - \\"working\\" = 8 - \\"exercising\\" = 5 - \\"socializing\\" = 3 - \\"relaxing\\" = -2 - \\"sleeping\\" = -8 Your task is to compute the Net Energy Score (NES) based on the activities listed. The NES is calculated by summing up the energy costs of all activities in the list. Depending on the NES, return one of the following states: - NES < 0 : \'Exhausted\' - 0 <= NES < 10 : \'Tired\' - 10 <= NES < 20 : \'Balanced\' - NES >= 20 : \'Energetic\' Implement the function `energy_state(activities: List[str]) -> str` that takes in a list of activities and returns the corresponding energy state. Example: ```python activities = [\\"working\\", \\"relaxing\\", \\"sleeping\\", \\"exercising\\"] print(energy_state(activities)) # Output: \'Tired\' ```","solution":"from typing import List def energy_state(activities: List[str]) -> str: # Energy costs associated with each activity energy_costs = { \\"working\\": 8, \\"exercising\\": 5, \\"socializing\\": 3, \\"relaxing\\": -2, \\"sleeping\\": -8 } # Calculate the Net Energy Score (NES) nes = sum(energy_costs[activity] for activity in activities if activity in energy_costs) # Determine the energy state based on the NES if nes < 0: return \'Exhausted\' elif 0 <= nes < 10: return \'Tired\' elif 10 <= nes < 20: return \'Balanced\' else: return \'Energetic\'"},{"question":"You are passionate about running and often participate in marathons, which are organized in various cities. You have decided to plan your participation in upcoming marathons over the next year. Each marathon is organized on a specific day and at a specific city. You have a list of the marathons\' schedules, and you want to know how many marathons you can participate in without participating in more than one marathon on any given day. To simplify, consider each marathon as an interval [start_day, end_day], and you intend to maximize the number of non-overlapping intervals you can fit into your schedule. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Next t cases follow. Each test case starts with an integer n (1 le n le 2 cdot 10^5) — the number of marathons. The next n lines each contain two integers start_day and end_day (1 le start_day le end_day le 10^9), representing the schedule of a marathon. It\'s guaranteed that the total sum of n across all test cases doesn\'t exceed 2 cdot 10^5. -----Output----- For each test case, print one integer — the maximum number of marathons you can participate in without any overlap. -----Examples----- Input 2 3 1 2 2 4 3 5 4 3 4 2 3 1 2 5 6 Output 2 4 -----Note----- In the first test case, you can participate in 2 marathons by choosing the intervals [1, 2] and [3, 5]. In the second test case, you can participate in all 4 marathons because none of them overlap.","solution":"def max_non_overlapping_intervals(test_cases): results = [] for marathons in test_cases: sorted_marathons = sorted(marathons, key=lambda x: x[1]) count = 0 current_end_time = 0 for start, end in sorted_marathons: if start >= current_end_time: count += 1 current_end_time = end results.append(count) return results"},{"question":"**Step 1:** Write a function `camel_to_snake()` that converts a given camel case string to snake case. In snake case, words are separated by underscores and all letters are in lowercase. For example, `camel_to_snake(\\"camelCaseString\\")` should return `\\"camel_case_string\\"`. **Step 2:** Write a function `snake_to_camel()` that converts a given snake case string to camel case. In camel case, the first word is in lowercase and subsequent words have their initial letters capitalized. For example, `snake_to_camel(\\"snake_case_string\\")` should return `\\"snakeCaseString\\"`.","solution":"import re def camel_to_snake(camel_str): Converts a camel case string to snake case. Parameters: - camel_str: The camel case string to be converted. Returns: A snake case representation of the input string. snake_str = re.sub(r\'(?<!^)(?=[A-Z])\', \'_\', camel_str).lower() return snake_str def snake_to_camel(snake_str): Converts a snake case string to camel case. Parameters: - snake_str: The snake case string to be converted. Returns: A camel case representation of the input string. parts = snake_str.split(\'_\') camel_str = parts[0] + \'\'.join(word.capitalize() for word in parts[1:]) return camel_str"},{"question":"An online bookstore sells books in various genres. Each book has a unique ISBN and belongs to one or more genres. The catalogue contains an array of N books, where each book is represented by an ISBN and a list of genres separated by spaces. As a new feature, the bookstore wants to recommend books to users based on their genre preferences. Given a genre, the bookstore should list out all the unique ISBNs of books that belong to that genre. Write a program that, for each test case, reads the catalogue of books and a genre, and outputs the unique ISBNs of books of that genre, sorted in ascending order. Input The first line contains T, the number of test cases. The description of T test cases follows. Each test case contains: 1. An integer N, the number of books in the catalogue. 2. N lines, each containing an ISBN followed by a list of genres. 3. A single genre by which to filter the books. Output For each test case, output a single line containing the sorted unique ISBNs of books of the given genre. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^3 1 ≤ length of ISBN ≤ 20 1 ≤ number of genres per book ≤ 10 1 ≤ length of each genre ≤ 20 SAMPLE INPUT 2 3 12345 fiction romance 45678 action romance 78901 fiction mystery fiction 3 13579 history 24680 fantasy 97531 history mystery history SAMPLE OUTPUT 12345 78901 13579 97531","solution":"def get_books_by_genre(test_cases): results = [] for case in test_cases: N, books, genre_to_search = case isbn_list = [] for isbn, genres in books: if genre_to_search in genres: isbn_list.append(isbn) isbn_list = sorted(set(isbn_list)) results.append(\\" \\".join(isbn_list)) return results def format_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) books = [] for i in range(1, N + 1): parts = lines[index + i].split() isbn = parts[0] genres = parts[1:] books.append((isbn, genres)) genre_to_search = lines[index + N + 1] test_cases.append((N, books, genre_to_search)) index += N + 2 return test_cases def format_output(output_list): return \\"n\\".join(output_list)"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to find the length of the longest substring of `s` such that no two consecutive characters in that substring are the same. Input The first line contains a single integer `t` (1 ≤ t ≤ 100), the number of test cases. The following `t` lines each contain a string `s` (1 ≤ |s| ≤ 100), representing the input strings. Output For each test case, output a single integer representing the length of the longest substring with no consecutive identical characters. Examples Input 3 abababab aaabbbccc abcdef Output 8 3 6 Note In the first example, the entire string \\"abababab\\" is a valid substring where no two consecutive characters are the same, hence the output is 8. In the second example, the longest substring without consecutive identical characters is any single letter, such as \'a\', \'b\', or \'c\', so the output is 3. In the third example, the entire string \\"abcdef\\" is already without consecutive identical characters, hence the output is 6.","solution":"def longest_non_consecutive_substring_len(s): Returns the length of the longest substring of s such that no two successive characters are the same. if not s: return 0 max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] != s[i-1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len def solve(test_cases): results = [] for s in test_cases: results.append(longest_non_consecutive_substring_len(s)) return results"},{"question":"A railway platform has a line of `n` ticket vending machines, where each machine may dispense a ticket at a slightly different rate. Each machine has a probability `p_i` (0 <= p_i <= 1) of successfully dispensing a ticket to a passenger standing in front of it. However, a passenger will always choose the machine that maximizes their chance of getting a ticket — even if some machines are slower. Given the probabilities for each machine, write a function to find the expected number of passengers needed to get one ticket. Input: - The first line will contain `t`, the number of test cases. - For each test case, the first line contains a single integer `n`, the number of ticket vending machines. - The next line contains `n` floating point numbers `p_i`, where `p_i` is the probability that the `i-th` machine will dispense a ticket. Output: - For each test case, output the expected number of passengers required to get one ticket (up to 6 decimal places). Constraints: - 1 ≤ t ≤ 1000 - 1 ≤ n ≤ 50 - 0 ≤ p_i ≤ 1 SAMPLE INPUT 3 3 0.2 0.5 0.8 2 0.1 0.9 4 0.3 0.4 0.6 0.9 SAMPLE OUTPUT 1.249128 1.111111 1.123457","solution":"def expected_passengers_for_ticket(n, probabilities): Calculate the expected number of passengers needed to get one ticket from the vending machine with the highest probability. max_prob = max(probabilities) if max_prob == 0: # If the highest probability is zero, return infinity return float(\'inf\') return 1 / max_prob def process_test_cases(t, test_cases): results = [] for case in test_cases: n, probabilities = case result = expected_passengers_for_ticket(n, probabilities) results.append(f\\"{result:.6f}\\") return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) probabilities = list(map(float, lines[index + 1].split())) test_cases.append((n, probabilities)) index += 2 return t, test_cases"},{"question":"You are given a list of dictionaries representing users and their ages. Create a function `oldest_user(users)` that takes this list as input and returns the name of the oldest user. If the list is empty, return `None`. If multiple users have the same highest age, return the name that comes first alphabetically.","solution":"def oldest_user(users): Returns the name of the oldest user. If there are multiple users with the same age, returns the name that comes first alphabetically. If the list is empty, returns None. if not users: return None oldest = max(users, key=lambda x: (x[\'age\'], -ord(max(x[\'name\'])))) return oldest[\'name\']"},{"question":"Write a function to convert a given integer (between 1 and 3999) to a Roman numeral. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, the number 1987 is written as MCMLXXXVII: - M = 1000 - CM = 900 - L = 50 - X = 10 - XXX = 30 - VII = 7 **Example inputs and outputs**: - Input: 58; Output: LVIII - Input: 1994; Output: MCMXCIV Your task is to implement the function `def int_to_roman(num: int) -> str:` that takes an integer and returns its Roman numeral representation as a string. Blocked libraries: any external libraries.","solution":"def int_to_roman(num: int) -> str: Converts an integer to a Roman numeral. Parameters: num (int): An integer between 1 and 3999 Returns: str: The Roman numeral representation of the integer # Define the Roman numerals and their corresponding values val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += syms[i] num -= val[i] i += 1 return roman_numeral"},{"question":"A scientist is working on chemical reactions and wants to simulate a specific reaction process in a test tube. The test tube initially contains a certain number of molecules, and in each subsequent second, the number of molecules doubles. The scientist wants to know the number of molecules present in the test tube after a given number of seconds. ---- Input: ---- - First-line will contain N, the number of test cases. Then the test cases follow. - Each test case contains two integers M and S: the initial number of molecules M and the number of seconds S after which the scientist wants to measure the molecules. ---- Output: ---- For each test case, output the number of molecules in the test tube after S seconds. ---- Constraints ---- - 1 leq N leq 50 - 1 leq M leq 100 - 0 leq S leq 30 ---- Sample Input: ---- 3 2 3 4 2 1 5 ---- Sample Output: ---- 16 16 32 ---- EXPLANATION: ---- In the first case, starting with 2 molecules, after 3 seconds, the number of molecules doubles each second: 2 -> 4 -> 8 -> 16. In the second case, starting with 4 molecules, after 2 seconds, it doubles: 4 -> 8 -> 16. In the third case, starting with 1 molecule, after 5 seconds, it doubles: 1 -> 2 -> 4 -> 8 -> 16 -> 32.","solution":"def calculate_molecules(N, test_cases): Calculate the number of molecules present in the test tube after a given number of seconds for each test case. Parameters: N (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers M (initial number of molecules) and S (number of seconds). Returns: list: a list containing the number of molecules for each test case. results = [] for M, S in test_cases: result = M * (2 ** S) results.append(result) return results"},{"question":"Given an array of integers, determine whether it is possible to partition the array into two subsets with equal sums. If possible, return `true`; otherwise, return `false`. You may assume the array will contain only positive integers and will have at least one element. Complete the function that accepts a sequence of integers as input and returns a boolean value indicating whether the array can be partitioned into two subsets of equal sum. Examples ``` [1, 5, 11, 5] --> true // two subsets {1, 5, 5} and {11} [1, 2, 3, 5] --> false // no possible partition with equal sum [6, 6, 7, 7, 8, 8] --> true // two subsets {6, 7, 8} and {6, 7, 8} ```","solution":"def can_partition(nums): Returns True if the array can be partitioned into two subsets with equal sum, otherwise returns False. total_sum = sum(nums) # If total_sum is odd, it\'s not possible to partition it into two equal subsets if total_sum % 2 != 0: return False # Determine the subset sum we\'re looking for subset_sum = total_sum // 2 # Initialize a boolean array to keep track of possible sums dp = [False] * (subset_sum + 1) dp[0] = True for num in nums: for i in range(subset_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[subset_sum]"},{"question":"A bookshelf at a library needs to be rearranged by height. Each book has a unique height, and the librarian must ensure that the books are organized in non-decreasing order of their height. The librarian accidentally shuffled the books, and now she must write a code to determine the fewest number of adjacent swaps required to sort the books by their height. A swap consists of exchanging two adjacent books. Given the number of books and their heights, determine the minimum number of swaps needed to sort the books in non-decreasing order. Constraints * 1 leq N leq 1000 * 1 leq height leq 10000 * All numbers given in input are integers Input Input is given from Standard Input in the following format: N height_1 height_2 ... height_N Output Print the minimum number of adjacent swaps needed. Examples Input 3 3 1 2 Output 2 Input 4 4 3 2 1 Output 6","solution":"def min_swaps_to_sort_books(n, heights): Returns the minimum number of adjacent swaps needed to sort the books by height. swaps = 0 heights = list(heights) for i in range(n): for j in range(0, n-i-1): if heights[j] > heights[j+1]: heights[j], heights[j+1] = heights[j+1], heights[j] swaps += 1 return swaps # This function reads the input, calls the main function, and prints the output. if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) heights = list(map(int, data[1:])) print(min_swaps_to_sort_books(n, heights))"},{"question":"The Kingdom of Codetopia has its own unique calendar system. Each year in Codetopia consists of 10 months, and each month has exactly 30 days. There is a special day in Codetopia called \\"CodetoBirthday\\" which always occurs on the 300th day of the year (10th month, 15th day). However, people in Codetopia often struggle to calculate how many days are left until CodetoBirthday from any given date. Given the current day and month in Codetopia, write a program to compute the number of days remaining until the next CodetoBirthday. If the given date is the same as CodetoBirthday, output 0. -----Constraints----- - 1 <= month <= 10 - 1 <= day <= 30 -----Input----- Input is given from Standard Input in the following format: month day -----Output----- Print the number of days remaining until the next CodetoBirthday. -----Sample Input 1----- 9 10 -----Sample Output 1----- 35 Explanation: Current date is 9th month, 10th day. CodetoBirthday occurs on 10th month, 15th day, which is 30 - 10 + 15 = 35 days from the given date. -----Sample Input 2----- 10 15 -----Sample Output 2----- 0 Explanation: Current date is already CodetoBirthday, so no days are remaining.","solution":"def days_until_codetobirthday(month, day): Calculate the number of days remaining until the next CodetoBirthday. Parameters: month (int): The current month (1 to 10) day (int): The current day (1 to 30) Returns: int: Number of days until the next CodetoBirthday # CodetoBirthday is on 10th month and 15th day codeto_birthday_day_of_year = 10 * 30 - 15 # Current day of the year calculation current_day_of_year = (month - 1) * 30 + day # If the input date is already CodetoBirthday, return 0 if current_day_of_year == codeto_birthday_day_of_year: return 0 # Calculate days remaining days_remaining = codeto_birthday_day_of_year - current_day_of_year return days_remaining"},{"question":"Write a function to print all the permutations of a given string with unique characters. The permutations can be printed in any order. Example 1: Input: str = \\"ABC\\" Output: ABC ACB BAC BCA CAB CBA Explanation: All possible permutations of \\"ABC\\" are printed. Example 2: Input: str = \\"XY\\" Output: XY YX Explanation: All possible permutations of \\"XY\\" are printed. Example 3: Input: str = \\"A\\" Output: A Explanation: All possible permutations of \\"A\\" are printed because it has only one character. Your task: You don\'t need to read input or print anything. Your task is to complete the function printPermutations() which takes a string as input and prints all the permutations of the string. Expected Time Complexity: O(n*n!) where n is length of the string. Expected Auxiliary Space: O(n) where n is length of the string. Constraints: 1 ≤ len ≤ 10 String contains only unique uppercase letters.","solution":"def printPermutations(s): Function to print all permutations of a given string with unique characters. def backtrack(start, end): if start == end: print(\\"\\".join(s)) for i in range(start, end): s[start], s[i] = s[i], s[start] backtrack(start + 1, end) s[start], s[i] = s[i], s[start] s = list(s) backtrack(0, len(s))"},{"question":"Create a function `card_game_winner` that determines the winner of a card game between two players. Each player is dealt a hand of 5 cards, represented by strings, such as \\"2H\\" for 2 of Hearts or \\"KD\\" for King of Diamonds. The value of the cards from lowest to highest is: \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"10\\", \\"J\\", \\"Q\\", \\"K\\", \\"A\\". If one player\'s hand contains a higher total value of cards, they are the winner. The function should take two lists of strings, `hand1` and `hand2`, representing the cards of each player, and return the result as a string: \\"Player 1 wins\\", \\"Player 2 wins\\", or \\"Tie\\" if both hands have the same total value. Here\'s the point value for each card: ``` \\"2\\" -> 2, \\"3\\" -> 3, \\"4\\" -> 4, \\"5\\" -> 5, \\"6\\" -> 6, \\"7\\" -> 7, \\"8\\" -> 8, \\"9\\" -> 9, \\"10\\" -> 10, \\"J\\" -> 11, \\"Q\\" -> 12, \\"K\\" -> 13, \\"A\\" -> 14 ``` Example: ``` hand1 = [\\"2H\\", \\"3D\\", \\"5S\\", \\"9C\\", \\"KD\\"] hand2 = [\\"2C\\", \\"3H\\", \\"4S\\", \\"8C\\", \\"AH\\"] card_game_winner(hand1, hand2) -> \\"Player 2 wins\\" ``` Note: - The suits (H, D, S, C) do not affect the value of the cards. - Capitalization and card value strings follow consistent formatting.","solution":"def card_game_winner(hand1, hand2): values = { \\"2\\": 2, \\"3\\": 3, \\"4\\": 4, \\"5\\": 5, \\"6\\": 6, \\"7\\": 7, \\"8\\": 8, \\"9\\": 9, \\"10\\": 10, \\"J\\": 11, \\"Q\\": 12, \\"K\\": 13, \\"A\\": 14 } def calculate_hand_value(hand): return sum(values[card[:-1]] for card in hand) hand1_value = calculate_hand_value(hand1) hand2_value = calculate_hand_value(hand2) if hand1_value > hand2_value: return \\"Player 1 wins\\" elif hand2_value > hand1_value: return \\"Player 2 wins\\" else: return \\"Tie\\""},{"question":"A digital notebook app stores notes as strings and includes a feature to search for specific phrases within the notes. Your task is to implement a search function that helps identify the number of times a particular query phrase appears within a given note. The search algorithm should be case-insensitive and should consider overlapping phrases. For example, the phrase \\"ana\\" in the note \\"banana\\" appears twice (\\"[ana]na\\" and \\"ban[ana]\\"). Input: The first line of the input will contain a single integer N, the number of test cases. Each test case consists of two lines: - The first line contains the note as a string. - The second line contains the query phrase as a string. Output: For each test case, print the number of times the query phrase appears within the note, considering overlapping occurrences. Constraints: 1 ≤ N ≤ 500 1 ≤ length of note, query phrase ≤ 500 SAMPLE INPUT 3 banana ana Hello World world aaaa aa SAMPLE OUTPUT 2 1 3 Explanation: In the first case, the query \\"ana\\" appears twice within the note \\"banana\\". In the second case, the query \\"world\\" appears once within the note \\"Hello World\\" when considered case-insensitively. In the third case, the query \\"aa\\" appears three times within the note \\"aaaa\\" (overlapping as \\"[aa]aa\\", \\"a[aa]a\\", and \\"aa[aa]\\").","solution":"def count_phrase_occurrences(note, query): Returns the number of times the query phrase appears within the note, considering case-insensitivity and overlapping occurrences. note = note.lower() query = query.lower() count = start = 0 while True: start = note.find(query, start) if start == -1: break count += 1 start += 1 return count def process_notes_search(n, test_cases): results = [] for i in range(n): note = test_cases[i*2] query = test_cases[i*2+1] results.append(count_phrase_occurrences(note, query)) return results"},{"question":"# Definition **_Palindromic difference_** is defined as the absolute difference between the original number and its reverse. ____ # Task **_Given_** a number, **_Find the palindromic difference_**. ____ # Warm-up (Highly recommended) # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ # Notes * **_Number_** *passed is always* **_Positive_** . * **_Return the result as_** **_Integer_**. ___ # Input >> Output Examples ``` palindromicDifference(1234) ==> return 3087 ``` **_Explanation_**: * **_Reverse of 1234 is 4321_** * **_Palindromic difference is |1234 - 4321| = 3087_** ___ ``` palindromicDifference(100) ==> return 99 ``` **_Explanation_**: * **_Reverse of 100 is 001 (treated as 1)_** * **_Palindromic difference is |100 - 1| = 99_** ___ ``` palindromicDifference(3) ==> return 0 ``` **_Explanation_**: * **_Reverse of 3 is 3_** * **_Palindromic difference is |3 - 3| = 0_** ___ ``` palindromicDifference(56789) ==> return 86466 ``` **_Explanation_**: * **_Reverse of 56789 is 98765_** * **_Palindromic difference is |56789 - 98765| = 41976_** ___ ``` palindromicDifference(12321) ==> return 0 ``` **_Explanation_**: * **_Reverse of 12321 is 12321_** * **_Palindromic difference is |12321 - 12321| = 0_** ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def palindromic_difference(n): Returns the palindromic difference of the given number n. reversed_n = int(str(n)[::-1]) return abs(n - reversed_n)"},{"question":"In the distant land of Numerovia, there exists a peculiar numerical tree called the Binary Parity Tree (BPT). The BPT is a binary tree where each node holds a single integer value. In this tree, the word \\"parity\\" refers to whether a number is even or odd. The Binary Parity Tree comes with a special property: for any given node, all even numbers must be on the left subtree and all odd numbers must be on the right subtree. The root of the Binary Parity Tree is always an even number. Given a list of integers, we need to construct a Binary Parity Tree according to the rules mentioned and print the inorder traversal of the tree. # Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of integers. The second line contains n space-separated integers. # Output Print a single line containing the inorder traversal of the Binary Parity Tree. # Example **Input** 5 2 3 4 1 5 **Output** 2 4 3 1 5 **Explanation** Given the integers 2, 3, 4, 1, and 5: - The root is initialized with 2 (since it is the first even number). - 4 is also an even number and should be placed in the left subtree of 2. - 3, 1, and 5 are odd numbers and go to the right subtree of 2. - The resulting Binary Parity Tree structure is: ``` 2 / 4 3 / 1 5 ``` - The inorder traversal of this tree yields 2 4 3 1 5. # Note Ensure that your solution can handle up to the maximum constraint efficiently within time limits.","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def insert(root, value): if not root: return Node(value) if value % 2 == 0: if not root.left: root.left = Node(value) else: insert(root.left, value) else: if not root.right: root.right = Node(value) else: insert(root.right, value) return root def inorder_traversal(node, result): if node: result.append(node.value) inorder_traversal(node.left, result) inorder_traversal(node.right, result) def build_bpt(arr): root = Node(arr[0]) for value in arr[1:]: insert(root, value) result = [] inorder_traversal(root, result) return result def binary_parity_tree(n, arr): result = build_bpt(arr) return result if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) result = binary_parity_tree(n, arr) print(\' \'.join(map(str, result)))"},{"question":"You are given a list of employees in a company. Each employee record is represented by an employee ID and a boolean value that indicates whether the employee is a manager or not. Your task is to organize these employees into departments such that each department has at least one manager and no department contains more than three employees. Create a system that returns the optimal way to group the employees into departments while adhering to the given constraints. If it\'s not possible to organize all employees according to the rules, output \\"Impossible\\". -----Input----- - The first line contains T, the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N, the number of employees. - The next N lines each contain a string ID followed by a space and an integer(boolean) is_manager, representing the employee ID and whether the employee is a manager (1 if manager, 0 otherwise). -----Output----- For each test case, output the groups of employees by their IDs for each department. Each department should be on a new line. If it\'s impossible to organize all employees, output \\"Impossible\\". -----Constraints----- - 1 le T le 10 - 3 le N le 30 - 1 le |ID| le 8 for each valid i - Each ID is a unique alphanumeric string (containing both lowercase English letters and digits) -----Example Input----- 3 4 abc123 1 xyz456 0 lmn789 0 pqr012 1 6 mgr05 1 emp99 0 emp01 0 mgr22 1 emp11 0 emp33 0 3 empA 0 empB 0 empC 0 -----Example Output----- abc123 xyz456 lmn789 pqr012 mgr05 emp99 emp01 mgr22 emp11 emp33 Impossible -----Explanation----- Example case 1: You can create two departments: [\'abc123\', \'xyz456\', \'lmn789\'] and [\'pqr012\']. Both departments have at least one manager and no more than three employees. Example case 2: You can create three departments: [\'mgr05\', \'emp99\', \'emp01\'], [\'mgr22\', \'emp11\', \'emp33\']. Both departments adhere to the constraints. Example case 3: It is impossible to create a department since there is no manager in the employee list.","solution":"def organize_departments(test_cases): result = [] for case in test_cases: N, employees = case managers = [emp for emp in employees if emp[1] == 1] non_managers = [emp for emp in employees if emp[1] == 0] if len(managers) == 0: result.append(\\"Impossible\\") continue departments = [] non_managers_idx = 0 for manager in managers: department = [manager[0]] while len(department) < 3 and non_managers_idx < len(non_managers): department.append(non_managers[non_managers_idx][0]) non_managers_idx += 1 departments.append(department) if non_managers_idx < len(non_managers): result.append(\\"Impossible\\") else: for department in departments: result.append(\\" \\".join(department)) return result def parse_input(input_data): input_data = input_data.strip().split(\\"n\\") T = int(input_data[0]) idx = 1 test_cases = [] for _ in range(T): N = int(input_data[idx]) employees = [] for i in range(1, N + 1): parts = input_data[idx + i].split() employees.append((parts[0], int(parts[1]))) test_cases.append((N, employees)) idx += N + 1 return test_cases def serialize_output(output_data): return \\"n\\".join(output_data) def solution(input_data): test_cases = parse_input(input_data) results = organize_departments(test_cases) return serialize_output(results)"},{"question":"Create a function that takes a list of integers and returns a new list where each integer is replaced with the product of all other integers in the list. Do not use division in your solution and ensure the function works efficiently for large lists. For example, given the input list: [1, 2, 3, 4], the function should return: [24, 12, 8, 6].","solution":"def products_except_self(nums): Given an input list nums, returns a new list where each integer is replaced by the product of all other integers in the list. n = len(nums) if n == 0: return [] if n == 1: return [0] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for j in range(n - 2, -1, -1): right_products[j] = right_products[j + 1] * nums[j + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"A new programming language class has just started, and the instructor provides a warm-up exercise to help the students understand string manipulation. Your task is to assist the students in solving a problem where they need to find substrings that are palindromes within a given string. A palindrome is a sequence of characters that reads the same backward as forward. The problem is to write a function that identifies and counts all unique palindromic substrings in the given string. INPUT: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single string S. OUTPUT: - For each test case, print the number of unique palindromic substrings in the string S. CONSTRAINTS: - 1 ≤ T ≤ 100 - 1 ≤ len(S) ≤ 1000 - S consists of lowercase English letters only. SAMPLE INPUT: 2 abba racecar SAMPLE OUTPUT: 4 7 Explanation: For the input string \\"abba\\", the unique palindromic substrings are {\\"a\\", \\"b\\", \\"bb\\", \\"abba\\"}. For the input string \\"racecar\\", the unique palindromic substrings are {\\"a\\", \\"c\\", \\"e\\", \\"r\\", \\"cec\\", \\"aceca\\", \\"racecar\\"}.","solution":"def count_unique_palindromic_substrings(T, test_cases): Function to count unique palindromic substrings for each test case. def is_palindrome(s): return s == s[::-1] results = [] for S in test_cases: unique_palindromes = set() for i in range(len(S)): for j in range(i, len(S)): substr = S[i:j+1] if is_palindrome(substr): unique_palindromes.add(substr) results.append(len(unique_palindromes)) return results"},{"question":"You are given two integers N and X. Create a function that determines if N is a power of X. In other words, determine if there exists an integer k such that N = X^k. Example 1: Input: N = 16, X = 2 Output: True Explanation: 16 can be expressed as 2^4. Example 2: Input: N = 27, X = 3 Output: True Explanation: 27 can be expressed as 3^3. Example 3: Input: N = 20, X = 3 Output: False Explanation: 20 cannot be expressed as 3 raised to any power. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPowerOfX() which takes the integers N and X as inputs and returns a boolean indicating whether N is a power of X. Expected Time Complexity: O(log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^9 2 ≤ X ≤ 10^9","solution":"def isPowerOfX(N, X): Determine if N is a power of X, i.e., if there exists an integer k such that N = X^k. Args: N (int): The number to be checked. X (int): The base number. Returns: bool: True if N is a power of X, otherwise False. if N == 1: return True current = X while current <= N: if current == N: return True current *= X return False"},{"question":"Leo is attempting to solve a unique string manipulation problem. Given a string consisting of lowercase alphabets, he needs to determine if he can rearrange the characters of the string to form a palindrome. A palindrome is a string that reads the same backward as forward. For example, \\"madam\\" and \\"racecar\\" are palindromes. Input First line, number of test cases 1 ≤ t ≤ 50 Each test case consists of a string s where 1 ≤ |s| ≤ 100 Output For each test case, print \\"YES\\" (without quotes) if it is possible to rearrange the characters of the string to form a palindrome, otherwise print \\"NO\\" (without quotes). SAMPLE INPUT 3 aabb abc racecar SAMPLE OUTPUT YES NO YES Explanation Case 1: The string \\"aabb\\" can be rearranged to form \\"abba\\" which is a palindrome. Hence, the output is YES. Case 2: The string \\"abc\\" cannot be rearranged to form a palindrome. Hence, the output is NO. Case 3: The string \\"racecar\\" is already a palindrome, so it can be rearranged to form a palindrome as well. Hence, the output is YES.","solution":"def can_form_palindrome(s): Determine if the characters of the string s can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1 def process_test_cases(test_cases): results = [] for s in test_cases: result = \\"YES\\" if can_form_palindrome(s) else \\"NO\\" results.append(result) return results"},{"question":"A robot is placed on an infinite 2D grid. The robot starts at the position (0, 0) and can be instructed to move in one of four directions: up, down, left, or right. Each command instructs the robot to move exactly one unit in the given direction. Let\'s denote the commands as: - \'U\' for moving up, - \'D\' for moving down, - \'L\' for moving left, - \'R\' for moving right. The robot follows a sequence of such commands and you need to determine its final position on the grid after executing all commands. -----Input----- The input consists of a single string of length n (1 ≤ n ≤ 100) consisting of characters \'U\', \'D\', \'L\', \'R\'. -----Output----- Output two space-separated integers, the final coordinates (x, y) of the robot after executing all commands. -----Examples----- Input UUDDLR Output 0 0 Input LLRR Output 0 0 Input UUDDLLRR Output 0 0 Input UDLR Output 0 0 -----Note----- In the first sample, the robot moves up twice, down twice, left once, and right once, which brings it back to the origin (0, 0). In the second sample, the robot moves left twice, and then right twice, which also brings it back to the origin (0, 0). In the third sample, the robot moves up twice, down twice, left twice, and right twice, yet again ending up at the origin (0, 0). In the fourth sample, the robot moves up once, down once, left once, and right once, returning to the origin (0, 0).","solution":"def final_position(commands): Returns the final position of the robot after executing the given commands. Parameters: commands (str): A string of commands consisting of \'U\', \'D\', \'L\', \'R\'. Returns: tuple: A tuple (x, y) representing the final coordinates. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"Anton loves playing board games. One of his favorite games involves a board of size n x m, where each cell contains a number. He has a special move called the \\"magic jump\\". In one magic jump, Anton can choose any cell (i, j) and jump to any other cell (k, l), and add the value of cell (k, l) to his current cell (i, j). He can perform as many magic jumps as he wants. Anton wants to maximize the value in a specific target cell (t1, t2). You need to help Anton find the maximum possible value he can achieve in this target cell after performing any number of magic jumps. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the board. The next n lines contain m integers each a_ij (1 ≤ a_ij ≤ 10^9) — the values in each cell of the board. The last line contains two integers t1 and t2 (1 ≤ t1 ≤ n, 1 ≤ t2 ≤ m) — the target cell\'s coordinates. Output Print a single integer — the maximum possible value Anton can achieve in the target cell (t1, t2). Example Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 2 3 Output 78 Note Consider the example: * Initially, the value in cell (2, 3) is 7. * Anton can perform the following sequence of magic jumps to maximize the value in cell (2, 3): * Jump from any cell to (2, 3): * From (1, 1): 7 + 1 = 8 * From (1, 2): 8 + 2 = 10 * From (1, 3): 10 + 3 = 13 * From (1, 4): 13 + 4 = 17 * From (2, 1): 17 + 5 = 22 * From (2, 2): 22 + 6 = 28 * From (2, 4): 28 + 8 = 36 * From (3, 1): 36 + 9 = 45 * From (3, 2): 45 + 10 = 55 * From (3, 3): 55 + 11 = 66 * From (3, 4): 66 + 12 = 78 Therefore, the maximum possible value in cell (2, 3) after any number of magic jumps is 78.","solution":"def maximize_cell_value(n, m, board, t1, t2): max_value = board[t1-1][t2-1] # Starting value at the target coordinates for i in range(n): for j in range(m): if (i != t1-1) or (j != t2-1): max_value += board[i][j] return max_value # Sample Usage # n = 3, m = 4 # board = [ # [1, 2, 3, 4], # [5, 6, 7, 8], # [9, 10, 11, 12] # ] # t1, t2 = 2, 3 # The expected result is 78 expected_output = maximize_cell_value(3, 4, [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2, 3) print(expected_output) # Output: 78"},{"question":"Little Bob is trying to paint his room with some interesting patterns. The room is a rectangular grid with n rows and m columns (1-based indexing). Each cell of the grid initially has no color. Bob wants to paint it such that each row contains exactly one cell painted in blue. However, Bob\'s been given a peculiar constraint by his friend Alice: No two adjacent cells can be painted in blue. Two cells are considered adjacent if they share a side (left, right, up, or down). Given the dimensions of the room, determine if it\'s possible to paint the room following these constraints, and if so, provide the coordinates of the blue-painted cells. -----Input----- The first line contains a single integer T - the number of test cases. The next T lines each contain two integers n and m - the number of rows and columns of the grid, respectively. -----Output----- For each test case, output \\"YES\\" if it is possible to paint the room following the constraints. If it is possible, output the coordinates of the blue-painted cells for each test case. Otherwise, output \\"NO\\". -----Constraints----- 1 ≤ T ≤ 50 2 ≤ n, m ≤ 100 -----Example----- Input: 3 3 3 4 4 3 2 Output: YES (1, 1) (2, 2) (3, 3) YES (1, 1) (2, 2) (3, 3) (4, 4) NO -----Explanation----- In the first test case, it is possible to paint the grid by selecting coordinates (1, 1), (2, 2), (3, 3). In the second test case, selecting (1, 1), (2, 2), (3, 3), (4, 4) meets the constraints. In the third test case, it is not possible to paint the grid as it is too narrow to follow the no-adjacent-cells rule.","solution":"def paint_room(T, cases): results = [] for n, m in cases: if m >= n: results.append(\\"YES\\") coordinates = [(i + 1, i + 1) for i in range(n)] results.extend(coordinates) else: results.append(\\"NO\\") return results"},{"question":"You are given a rectangle of size `n x m` that is made up of `1 x 1` unit squares. Your task is to calculate the number of distinct rectangles (including squares) that can be formed within the `n x m` rectangle. Implement the function `count_rectangles(n, m)` that takes in two integers, `n` and `m` (where `1 <= n, m <= 1000`), and returns the number of distinct rectangles. # Example ```python count_rectangles(1, 1) # should return 1 (only the single 1x1 rectangle) count_rectangles(2, 2) # should return 9 (four 1x1 squares, one 2x2 square, and four 1x2 or 2x1 rectangles) count_rectangles(3, 2) # should return 18 ``` # Explanation In the `2 x 2` example: - We have 4 small `1 x 1` squares, - 4 `1 x 2` rectangles, - 4 `2 x 1` rectangles, - 1 large `2 x 2` rectangle. Totaling 1 + 4 + 4 + 4 + 1 = 14 rectangles altogether. # Constraints - The function should be efficient and able to handle the upper constraint values gracefully.","solution":"def count_rectangles(n, m): Returns the number of distinct rectangles that can be formed within an n x m rectangle. :param n: Number of rows in the rectangle. :param m: Number of columns in the rectangle. :return: Total number of distinct rectangles. # The number of ways to choose 2 distinct rows from n+1 horizontal lines # and 2 distinct columns from m+1 vertical lines decides the distinct rectangles. return (n * (n + 1) // 2) * (m * (m + 1) // 2)"},{"question":"Given a string, find the length of the longest substring without repeating characters. For example, the longest substring without repeating characters in \\"abcabcbb\\" is \\"abc\\", which has a length of 3. Function Signature: ```python def length_of_longest_substring(s: str) -> int: pass ``` **Example 1:** ``` Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. ``` **Example 2:** ``` Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. ``` **Example 3:** ``` Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. ``` **Your Task:** You don\'t need to read input or print anything. Your task is to complete the function `length_of_longest_substring(s: str) -> int` that takes a single string as input and returns the length of the longest substring without repeating characters. **Expected Time Complexity:** O(N) **Expected Auxiliary Space:** O(min(N, M)), where N is the length of the input string and M is the size of the character set. **Constraints:** - 0 <= s.length <= 5 * 10^4 - s consists of English letters, digits, symbols and spaces.","solution":"def length_of_longest_substring(s: str) -> int: # Dictionary to store the last indexes of already visited characters index_map = {} # Result variable to store the maximum length of substring found max_length = 0 # Starting point of the current substring start = 0 for i, char in enumerate(s): # If the character is found in the dictionary and the start is less than equal to its value if char in index_map and start <= index_map[char]: # Move the start to the right of the previous index of the repeating character start = index_map[char] + 1 else: # If not repeating, calculate the maximum length max_length = max(max_length, i - start + 1) # Update the last index of the character index_map[char] = i return max_length"},{"question":"In a quaint village, people often send gifts to their friends living in the surrounding villages. There are several paths connecting these villages, and some paths might have tolls. Each path is bidirectional and has a certain length and a toll associated with it. The residents of the village wish to find the shortest path to deliver gifts to their friends while considering both the distance and the toll cost. Your task is to write a program that, given the descriptions of the villages and the paths between them, calculates the shortest path from a specified starting village to a destination village, considering both distance and tolls. If there are multiple paths with the same minimum distance, choose the one with the minimum toll cost. Input: The input consists of multiple datasets. The format of each dataset is as follows: v e s t u1 v1 l1 p1 u2 v2 l2 p2 ... ue ve le pe Here: - v (2 ≤ v ≤ 100) represents the number of villages. - e (1 ≤ e ≤ 1000) represents the number of paths. - s (1 ≤ s ≤ v) represents the starting village. - t (1 ≤ t ≤ v) represents the destination village. - ui vi li pi represents the information of each path, where ui and vi are the village indices, li is the length of the path, and pi is the toll cost of the path. (1 ≤ li, pi ≤ 100) The input ends with a line containing two zeros (0 0). Output: For each dataset, output the minimum distance and the corresponding toll cost to travel from the starting village to the destination village. If it\'s impossible to reach the destination village from the starting village, output \\"Impossible\\". Example: Input: 5 6 1 5 1 2 3 10 1 3 4 5 2 4 2 4 3 4 5 8 4 5 3 2 2 5 6 15 0 0 Output: 8 16 Note: In this example, the shortest path from village 1 to village 5 is 1 -> 3 -> 4 -> 5 with a total length of 8 and a total toll cost of 16.","solution":"import heapq def shortest_path(v, e, s, t, edges): graph = {i: [] for i in range(1, v+1)} for u, v, l, p in edges: graph[u].append((v, l, p)) graph[v].append((u, l, p)) # To store the minimum distance and minimum toll when the distance is the same dist_and_toll = {i: (float(\'inf\'), float(\'inf\')) for i in range(1, v+1)} dist_and_toll[s] = (0, 0) heap = [(0, 0, s)] # (distance, toll, village) while heap: current_dist, current_toll, current_village = heapq.heappop(heap) if current_village == t: return current_dist, current_toll for neighbor, length, toll in graph[current_village]: new_dist = current_dist + length new_toll = current_toll + toll # Compare based on distance first, and then toll if (new_dist < dist_and_toll[neighbor][0]) or (new_dist == dist_and_toll[neighbor][0] and new_toll < dist_and_toll[neighbor][1]): dist_and_toll[neighbor] = (new_dist, new_toll) heapq.heappush(heap, (new_dist, new_toll, neighbor)) return \\"Impossible\\" def process_input(data): datasets = [] i = 0 while i < len(data): v, e = map(int, data[i].split()) if v == 0 and e == 0: break s, t = map(int, data[i+1].split()) edges = [] for j in range(i+2, i+2+e): edges.append(tuple(map(int, data[j].split()))) datasets.append((v, e, s, t, edges)) i += 2 + e return datasets def main(data): datasets = process_input(data) results = [] for v, e, s, t, edges in datasets: results.append(shortest_path(v, e, s, t, edges)) return results"},{"question":"You are given a list of distinct integers where each integer appears exactly once except for one integer which appears twice and one integer which is missing. Write a program to find the integer that is duplicated and the missing integer. Input The input consists of a single dataset. The dataset is described on one line, containing a space-separated list of integers. Output Output the integer that is duplicated followed by the missing integer, separated by a space. Constraints: - The length of the input does not exceed 1000 integers. - All integers in the list are within the range 1 to n, where n is the length of the list. Example Input 1 2 2 4 5 Output 2 3","solution":"def find_duplicate_and_missing(nums): Returns the duplicate and missing integers from the list. n = len(nums) expected_sum = n * (n + 1) // 2 expected_square_sum = n * (n + 1) * (2 * n + 1) // 6 actual_sum = sum(nums) actual_square_sum = sum(x * x for x in nums) sum_diff = actual_sum - expected_sum square_sum_diff = actual_square_sum - expected_square_sum duplicate = (sum_diff + square_sum_diff // sum_diff) // 2 missing = duplicate - sum_diff return duplicate, missing # Input example for testing: # nums = [1, 2, 2, 4, 5] # find_duplicate_and_missing(nums) should return (2, 3)"},{"question":"The renowned museum of Larpect City has been infiltrated by a skilled thief who intends to steal the most valuable paintings from its gallery. The thief starts at a designated entry point in the gallery, which you can imagine as a rectangular n-by-m grid. Each cell in the grid can be represented by a character that defines the room type: - \'E\' for Entry (only one such cell exists) - \'P\' for Painting - \'.\' for empty spaces where the thief can move freely - Walls are impassable cells represented by \'#\' - \'X\' denotes that the thief will be caught immediately if they step into this room. The thief can move up, down, left, or right, from one cell to another, and their objective is to collect as many paintings as possible without getting caught (i.e., stepping into \'X\'). Create a program that determines the maximum number of paintings the thief can steal before getting caught or reaching a point where no more moves are possible. -----Input----- The first line contains two integers n and m (1 le n, m le 30): the dimensions of the grid representing the gallery. The next n lines each contain m characters, representing the layout of the gallery grid. -----Output----- Print one integer, the maximum number of paintings the thief can steal. -----Examples----- Sample Input 1: 5 5 # #E.P# #...# #PX.# # Sample Output 1: 1 Sample Input 2: 5 5 # #E.P# #.P.# #P..# # Sample Output 2: 3 In the first example, the thief can steal only one painting before hitting \'X\' or exiting the possible moves. In the second example, the thief can steal all three paintings without stepping into \'X\'.","solution":"def max_paintings(n, m, grid): def valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' and grid[x][y] != \'X\' def dfs(x, y): if grid[x][y] == \'X\': return 0 paintings = 0 if grid[x][y] == \'P\': paintings = 1 grid[x][y] = \'#\' max_paintings = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if valid_move(nx, ny): max_paintings = max(max_paintings, dfs(nx, ny)) grid[x][y] = \'.\' # revert back to original state for other potential paths return paintings + max_paintings for i in range(n): for j in range(m): if grid[i][j] == \'E\': entry_x, entry_y = i, j return dfs(entry_x, entry_y)"},{"question":"Sunnyville is a small town with a unique grid-like road system consisting of `n` horizontal avenues and `m` vertical streets, forming a rectangular grid. Each avenue is numbered from 1 to n from south to north, and each street is numbered from 1 to m from west to east. The distance between each pair of consecutive avenues or streets is exactly 1 unit. The town planning committee wants to place a new hospital such that the maximum Manhattan distance from the hospital to any house is minimized. Note that the hospital can be located at any intersection of an avenue and a street. The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is defined as `|x1 - x2| + |y1 - y2|`. Your task is to determine the optimal intersection for the hospital to minimize the maximum distance to any house in the town. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 10^7) — the number of avenues and the number of streets in Sunnyville. Output Print two integers `av` and `st` (1 ≤ av ≤ n, 1 ≤ st ≤ m) — the optimal avenue and street intersection for the hospital. Examples Input 3 5 Output 2 3 Input 6 4 Output 3 2","solution":"def optimal_hospital_location(n, m): Returns the optimal intersection for the hospital to minimize the maximum Manhattan distance. The hospital should be placed in the center of the grid to minimize the maximum distance. av = (n + 1) // 2 st = (m + 1) // 2 return av, st"},{"question":"The organizers of a trivia night have a novel way of rewarding participants. They distribute prizes based on the participants\' scores at the end of the game. However, the prize distribution needs to be optimized to ensure the highest-scoring players get the best prizes. Each participant will receive exactly one prize. The score and prize arrays are guaranteed to be of the same length and the number of elements in each will be between 1 and 1000. Your task is to write a function that pairs the scores with the prize values in such a way that the highest score gets the highest prize, the second highest score gets the second highest prize, and so on. Input: The function will receive two lists, scores and prizes: - scores (list of integers): Each integer represents a participant\'s score. - prizes (list of integers): Each integer represents a prize\'s value. Output: The function should return a list of tuples where each tuple contains a score and the corresponding prize. The tuples should be sorted based on the score in descending order. Example: Input: ``` scores = [10, 20, 30] prizes = [300, 200, 100] ``` Output: ``` [(30, 300), (20, 200), (10, 100)] ``` Input: ``` scores = [40, 10, 50, 30] prizes = [500, 200, 400, 300] ``` Output: ``` [(50, 500), (40, 400), (30, 300), (10, 200)] ```","solution":"def distribute_prizes(scores, prizes): Pair scores with prizes so that the highest score gets the best prize, the second highest score gets the second best prize, etc. Parameters: scores (list of int): List of participants\' scores. prizes (list of int): List of available prizes. Returns: list of tuples: List of tuples where each tuple contains a score and the corresponding prize, sorted by scores in descending order. # Sort the scores in descending order and keep track of original indices sorted_scores_indices = sorted(range(len(scores)), key=lambda i: scores[i], reverse=True) # Sort the prizes in descending order sorted_prizes = sorted(prizes, reverse=True) # Create the result list of tuples (score, prize) result = [(scores[i], sorted_prizes[j]) for j, i in enumerate(sorted_scores_indices)] return result"},{"question":"Given a grid of size m times n with non-negative integers representing the elevation of each cell, determine the elevation loss for the path that starts from the top-left corner to the bottom-right corner, moving only right or down, in a way that minimizes the maximum absolute difference in elevation between two adjacent cells on the path. Input Format The first line contains 2 space-separated integers, m (number of rows) and n (number of columns), respectively. The following m lines each contain n space-separated integers representing the elevation values of the cells in the grid. Constraints 1 leq m, n leq 500 0 leq text{elevation of each cell} leq 10^6 Output Format Print the minimum possible elevation loss (maximum absolute difference in elevation between two adjacent cells on the path) for the path from the top-left corner to the bottom-right corner. Sample Input 3 3 1 3 5 2 8 3 4 9 2 Sample Output 2 Explanation One possible optimal path is 1 → 2 → 2 → 3 → 2 The maximum absolute difference in elevation between two adjacent cells in this path is left|2-1right| = 1, left|2-2right| = 0, left|3-2right| = 1, and left|2-3right| = 1. So the maximum elevation difference along this path is 1. Another possible path with the same cost of maximum elevation difference is 1 → 3 → 5 → 3 → 2. Thus, the minimum possible elevation loss is textbf{2}.","solution":"import heapq def minimum_elevation_loss(grid): m, n = len(grid), len(grid[0]) directions = [(1, 0), (0, 1)] def is_valid(x, y): return 0 <= x < m and 0 <= y < n priority_queue = [(0, 0, 0)] visited = set() while priority_queue: max_diff, x, y = heapq.heappop(priority_queue) if (x, y) in visited: continue if x == m - 1 and y == n - 1: return max_diff visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): next_diff = abs(grid[nx][ny] - grid[x][y]) heapq.heappush(priority_queue, (max(max_diff, next_diff), nx, ny))"},{"question":"Emily is working on text editing software and has implemented a feature to convert shorthand dates into a more readable format. She needs your help to ensure this feature functions correctly. Given a string containing dates in the shorthand format `dd/mm/yyyy` or `dd-mm-yyyy`, convert all occurrences into the format `Month dd, yyyy` where `Month` is the full name of the month. Assume the input string only contains valid dates, and you must correctly handle both formats and multiple occurrences within the string. Examples: ``` Input: \\"The meeting is scheduled for 21/08/2023 and the deadline is 15-09-2023.\\" Output: \\"The meeting is scheduled for August 21, 2023 and the deadline is September 15, 2023.\\" Input: \\"Independence Day in the US is celebrated on 04/07/2023.\\" Output: \\"Independence Day in the US is celebrated on July 04, 2023.\\" Input: \\"My birthday is on 11/11/2023 and my brother\'s is on 12-12-2023.\\" Output: \\"My birthday is on November 11, 2023 and my brother\'s is on December 12, 2023.\\" Input: \\"We have holidays on 01-01-2023, 25/12/2023, and 31/10/2023 this year.\\" Output: \\"We have holidays on January 01, 2023, December 25, 2023, and October 31, 2023 this year.\\" Input: \\"\\" Output: \\"\\" ``` Develop a function that receives a string as an input and returns the converted string following the described format. Notes: - The months and their corresponding numerical representations: - January: 01 - February: 02 - March: 03 - April: 04 - May: 05 - June: 06 - July: 07 - August: 08 - September: 09 - October: 10 - November: 11 - December: 12 - Ensure that the function works with both \\"/\\" and \\"-\\" delimiters in the dates. - If the input string is empty, the function should return an empty string. Happy coding!","solution":"import re from datetime import datetime def convert_shorthand_dates(text): Converts dates from `dd/mm/yyyy` or `dd-mm-yyyy` format to `Month dd, yyyy` format. def repl(match): date_str = match.group() date_obj = datetime.strptime(date_str, \'%d/%m/%Y\') if \'/\' in date_str else datetime.strptime(date_str, \'%d-%m-%Y\') return date_obj.strftime(\'%B %d, %Y\') return re.sub(r\'bd{2}[-/]d{2}[-/]d{4}b\', repl, text)"},{"question":"You are given an array of n integers representing the heights of n buildings. Each building is aligned from left to right such that the i-th building\'s height is h_i. A water container is placed on each building such that it can collect water from any previous building that is taller. Specifically, the amount of water a container on building i can collect is equal to the height difference between the tallest building to its left and the building i, provided the tallest building to its left is taller than building i. If no such building exists, the container collects no water on that building. Your task is to find out the total amount of water collected in all containers on all buildings. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) - the number of buildings. The second line contains n integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9) - the heights of the buildings. -----Output----- Output a single integer - the total amount of water collected in all containers. -----Example----- Input 6 3 1 2 4 2 3 Output 4 -----Note----- In the given example, - The first building collects no water since there are no buildings to its left. - The second building (height 1) collects 3 - 1 = 2 units of water from the first building. - The third building (height 2) collects 3 - 2 = 1 unit of water from the first building. - The fourth building (height 4) collects no water since it is taller than all buildings to its left. - The fifth building (height 2) collects 4 - 2 = 2 units of water from the fourth building. - The sixth building (height 3) collects 4 - 3 = 1 unit of water from the fourth building. Therefore, the total water collected is 2 + 1 + 2 + 1 = 6 units. Hence, the output is 4.","solution":"def total_water_collected(n, heights): if n <= 1: return 0 max_left = [0] * n max_left[0] = heights[0] for i in range(1, n): max_left[i] = max(max_left[i-1], heights[i-1]) total_water = 0 for i in range(1, n): if max_left[i] > heights[i]: total_water += max_left[i] - heights[i] return total_water"},{"question":"A car is navigating a grid-based city where each intersection can be represented as a coordinate in a matrix. The car starts at the top-left intersection (0, 0) and its goal is to reach the bottom-right intersection (n-1, n-1). The car can only move either down or to the right at any point in time. However, certain intersections have traffic jams, and the car needs to avoid these intersections. Determine the number of unique paths that the car can take from the starting intersection to the destination intersection, avoiding any intersections with traffic jams. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (1 le n le 100) — the size of the grid city (n x n). The next n lines each contain n characters, with \'.\' representing a free intersection and \'#\' representing an intersection with a traffic jam. -----Output----- For each test case, print the number of unique paths from the top-left intersection to the bottom-right intersection. -----Example----- Input 2 3 . . . . # . . . . 3 . # . # # . . . . Output 2 0","solution":"def unique_paths(grid): n = len(grid) # If starting or ending point is a traffic jam, return 0 if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return 0 # Initialize a 2D dp array dp = [[0] * n for _ in range(n)] dp[0][0] = 1 # Starting point # Fill in dp array for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(unique_paths(grid)) return results"},{"question":"Anticipate a meteor shower: Minimal movements You are part of a space observation team that monitors meteor showers. Each meteor moves in a straight line and has a constant speed. The team aims to collect data on these meteors to predict future showers. Your task is to predict the exact landing point of each meteor based on given points in time. You are given the initial positions (x, y) and velocities (vx, vy) of each meteor. For each point in time, you must calculate the position of each meteor. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows: For each test case: - The first line contains a single integer N denoting the number of meteors. - The next N lines each contain four integers x, y, vx, and vy representing the initial position (x, y) and velocity (vx, vy) of one meteor. - The following line contains an integer Q denoting the number of queries. - The next Q lines each contain a single integer t representing a point in time. ------ Output ------ For each query, print N lines. Each line should contain the position (x\', y\') of the meteor at time t in the format (x\', y\'). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 −10^3 ≤ x, y, vx, vy ≤ 10^3 1 ≤ Q ≤ 100 0 ≤ t ≤ 10^3 ------ Sample Input 1 ------ 1 2 0 0 1 1 1 -1 -1 0 2 1 2 ------ Sample Output 1 ------ 1 1 0 -1 2 2 -1 -1 ------ Explanation 1 ------ Example case 1: - Query 1: After 1 unit of time, - The first meteor moves from (0, 0) with velocity (1, 1) to position (1, 1). - The second meteor moves from (1, -1) with velocity (-1, 0) to position (0, -1). - Query 2: After 2 units of time, - The first meteor moves from (0, 0) to position (2, 2) since its velocity is (1, 1). - The second meteor moves from (1, -1) to position (-1, -1) since its velocity is (-1, 0).","solution":"def calculate_meteor_positions(T, test_cases): results = [] for test_case in test_cases: N, meteors, Q, times = test_case for t in times: positions = [] for meteor in meteors: x, y, vx, vy = meteor new_x = x + vx * t new_y = y + vy * t positions.append((new_x, new_y)) results.append(positions) return results def format_input(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) index += 1 meteors = [] for _ in range(N): x, y, vx, vy = map(int, input_lines[index].split()) meteors.append((x, y, vx, vy)) index += 1 Q = int(input_lines[index]) index += 1 times = [] for _ in range(Q): t = int(input_lines[index]) times.append(t) index += 1 test_cases.append((N, meteors, Q, times)) return T, test_cases def format_output(results): output_list = [] for positions in results: for (x, y) in positions: output_list.append(f\\"{x} {y}\\") output_list.append(\\"\\") # for separating different query results return \\"n\\".join(output_list).strip()"},{"question":"You have been tasked with developing a new scheduling system for a fleet of autonomous taxis. Each taxi operates on a fixed route, picking up and dropping off passengers at predetermined stops. However, certain routes overlap, causing congestion at some stops. Your goal is to identify the stops where the congestion is the highest, in order to optimize those locations with additional resources. -----Input----- There will be a single test case in the input. This test case will begin with a line with a single integer m (1 le m le 50000) representing the number of taxi routes. Each of the next m lines will start with an integer n_i (2 le n_i le 100) representing the number of stops for the i-th route, followed by a sequence of n_i distinct integers s_{i1}, s_{i2}, ..., s_{in_i} (0 le s_{ij} le 100000), which represent the stops for that route, in the order the taxi visits them. -----Output----- Output a single integer, which is the stop with the highest congestion. If there is a tie, output the smallest stop number among those with the highest congestion. -----Examples----- Sample Input 1: 3 3 1 2 3 4 2 3 4 5 2 3 6 Sample Output 1: 3 Sample Input 2: 2 3 10 20 30 4 10 20 25 30 Sample Output 2: 10 Sample Input 3: 1 5 5 10 15 20 25 Sample Output 3: 5","solution":"def find_highest_congestion_stop(m, routes): stop_counts = {} for route in routes: stops = route[1:] for stop in stops: if stop in stop_counts: stop_counts[stop] += 1 else: stop_counts[stop] = 1 max_congestion = max(stop_counts.values()) most_congested_stops = [stop for stop, count in stop_counts.items() if count == max_congestion] return min(most_congested_stops)"},{"question":"Clara is a software developer working on network optimization. One day, she encounters a network represented by a directed graph with `n` nodes and `m` edges. Each node has a unique identifier from 1 to `n`, and each edge has a weight associated with it. Clara needs to determine the shortest path from a source node to all other nodes in the network. If a node is not reachable from the source, Clara must indicate that. Your task is to help Clara by writing a program that performs this operation. # Input: - The first line contains two integers `n` (1 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ 10000), the number of nodes and the number of edges, respectively. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a directed edge from node `u` to node `v` with weight `w`. - The last line contains a single integer `s` (1 ≤ s ≤ n), the source node from which the shortest paths are to be calculated. # Output: - Output `n` lines. For each node from 1 to `n`, print the shortest distance from the source node `s` to that node. If a node is not reachable from the source, print `-1`. # Example: Input: ``` 5 6 1 2 2 1 3 4 2 3 1 3 4 7 2 5 10 5 4 3 1 ``` Output: ``` 0 2 3 10 12 ``` Input: ``` 3 1 1 2 3 2 ``` Output: ``` -1 0 -1 ``` # Note: - The graph might have nodes that are unreachable from the source node. - Make sure your solution is efficient enough to handle the upper limits of the constraints.","solution":"import heapq def shortest_paths(n, m, edges, s): Determines the shortest path from a source node s to all other nodes in the network. graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) # Distance dictionary, initializing all distances to infinity distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [distances[i] if distances[i] != float(\'inf\') else -1 for i in range(1, n+1)]"},{"question":"You are given two arrays of integers a and b, each of length n. Create a program that prints \\"Yes\\" if there exists an integer x such that a_x + b_x is odd, and \\"No\\" otherwise. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the arrays. The second line contains n space-separated integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 100000) — the elements of the first array. The third line contains n space-separated integers b_1, b_2, …, b_n (1 ≤ b_i ≤ 100000) — the elements of the second array. Output Output \\"Yes\\" if there exists an integer x such that a_x + b_x is odd, otherwise print \\"No\\". Example Input 5 1 2 4 8 16 9 3 7 5 1 Output Yes Note In the given example, several pairs such as (1+9), (2+3), and (4+7) exist in arrays `a` and `b` whose sum is odd, so the answer is \\"Yes\\".","solution":"def is_odd_sum_possible(n, a, b): Returns \\"Yes\\" if there exists an integer x such that a_x + b_x is odd, otherwise \\"No\\". Parameters: n (int): Length of the arrays (1 ≤ n ≤ 100000) a (list of int): First array containing integers (1 ≤ a_i ≤ 100000) b (list of int): Second array containing integers (1 ≤ b_i ≤ 100000) Returns: str: \\"Yes\\" if there exists an index x such that a[x] + b[x] is odd, otherwise \\"No\\" for i in range(n): if (a[i] + b[i]) % 2 == 1: return \\"Yes\\" return \\"No\\""},{"question":"Implement a function that takes a list of integers and returns a dictionary where the keys are the integers and the values are the frequency of each integer in the list.","solution":"def frequency_counter(lst): Takes a list of integers and returns a dictionary where the keys are the integers and the values are the frequency of each integer in the list. freq_dict = {} for num in lst: if num in freq_dict: freq_dict[num] += 1 else: freq_dict[num] = 1 return freq_dict"},{"question":"Write a function that takes an integer `n` and returns a list of all prime factors of `n` in ascending order. If `n` is less than 2, the function should return an empty list. Ensure that the function handles both small and large values of `n` efficiently.","solution":"def prime_factors(n): Returns the prime factors of n in ascending order. if n < 2: return [] factors = [] # Check for number of 2s in n while n % 2 == 0: factors.append(2) n //= 2 # n must be odd at this point so a skip of 2 (i.e., i += 2) can be used for i in range(3, int(n**0.5)+1, 2): # While i divides n, add i and divide n while n % i == 0: factors.append(i) n //= i # This condition is to check if n is a prime number # greater than 2 if n > 2: factors.append(n) return factors"},{"question":"You are given a sequence of integers and a set of commands. Each command modifies the sequence, and the task is to return the sequence status after executing all commands. This problem will test your ability to effectively manage and manipulate arrays based on specified operations. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the length of the initial sequence. - The second line contains `n` space-separated integers `a1, a2, ..., an` — the elements of the sequence. - The third line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of commands. - Each of the next `q` lines contains a command, which can be one of the following: 1. `1 x v` — Set the x-th element of the sequence to value `v` (1 ≤ x ≤ n, -10^9 ≤ v ≤ 10^9). 2. `2 l r` — Reverse the subsequence from index `l` to `r` (1 ≤ l ≤ r ≤ n, for a 1-based index). # Output Print the status of the sequence after all commands are executed. # Examples Input ``` 5 1 2 3 4 5 3 1 3 10 2 2 4 1 5 6 ``` Output ``` 1 4 10 2 6 ``` Input ``` 4 5 6 7 8 2 2 1 4 1 2 9 ``` Output ``` 8 9 6 5 ``` Explanation In the first example: - The sequence starts as `[1, 2, 3, 4, 5]`. - The first command changes the 3rd element to 10, resulting in `[1, 2, 10, 4, 5]`. - The second command reverses the subsequence from index 2 to 4, resulting in `[1, 4, 10, 2, 5]`. - The third command changes the 5th element to 6, resulting in `[1, 4, 10, 2, 6]`. In the second example: - The sequence starts as `[5, 6, 7, 8]`. - The first command reverses the entire sequence, resulting in `[8, 7, 6, 5]`. - The second command changes the 2nd element to 9, resulting in `[8, 9, 6, 5]`.","solution":"def modify_sequence(n, sequence, q, commands): Modifies the sequence according to the given commands and returns the final sequence. :param n: Length of the sequence :param sequence: List of integers representing the initial sequence :param q: Number of commands :param commands: List of commands to be executed on the sequence :return: Modified sequence after all commands have been executed for command in commands: cmd = command.split() if cmd[0] == \'1\': x = int(cmd[1]) - 1 v = int(cmd[2]) sequence[x] = v elif cmd[0] == \'2\': l = int(cmd[1]) - 1 r = int(cmd[2]) - 1 sequence[l:r+1] = sequence[l:r+1][::-1] return sequence"},{"question":"You are given an integer array `arr` of length `n`. Your task is to determine the minimum number of operations required to make all the array elements distinct. In each operation, you can increment any element by 1. -----Input----- The input contains multiple test cases. The first line contains a single integer `t` (1 le t le 10^5) — the number of test cases. Each test case consists of two lines. The first line contains the integer `n` (1 le n le 2 cdot 10^5) — the length of the array. The second line contains `n` space-separated integers arr_i (0 le arr_i le 10^9) — the elements of the array. The sum of `n` across all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print the minimum number of operations required to make all the array elements distinct. -----Examples----- Input 3 3 1 2 2 4 1 1 1 1 2 5 5 Output 1 6 1 -----Note----- Consider the example: In the first test case, the array `[1, 2, 2]` can be made distinct by performing 1 operation: increment the last element by 1 to get `[1, 2, 3]`. In the second test case, the array `[1, 1, 1, 1]` requires 6 operations to become `[1, 2, 3, 4]`. Each element must be incremented to be unique. In the third test case, the array `[5, 5]` can be made distinct by performing 1 operation: increment the last element by 1 to get `[5, 6]`.","solution":"def min_operations_to_make_distinct(t, test_cases): results = [] for case in test_cases: n, arr = case arr.sort() operations = 0 for i in range(1, n): if arr[i] <= arr[i-1]: operations += (arr[i-1] - arr[i] + 1) arr[i] = arr[i-1] + 1 results.append(operations) return results"},{"question":"Given an array of non-negative integers representing the heights of walls in a 2D elevation map where the width of each bar is 1, calculate how much water it can trap after raining. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The elevation map is represented as [0,1,0,2,1,0,1,3,2,1,2,1], and the water it can trap is represented by the six blue sections. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The elevation map is represented as [4,2,0,3,2,5], and the water it can trap is represented by the nine blue sections. Note: - The array should have at least two elements. - The total amount of trapped water will be non-negative.","solution":"def trap(height): Calculate the total amount of trapped water in the elevation map represented by the height array. Args: height (List[int]): A list of non-negative integers representing the heights of the walls in the 2D elevation map. Returns: int: The total amount of water that can be trapped after raining. if not height or len(height) < 3: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if left_max <= right_max: left += 1 left_max = max(left_max, height[left]) water_trapped += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) water_trapped += max(0, right_max - height[right]) return water_trapped"},{"question":"Given an array of integers, find the nearest smaller values for each element in the array. Specifically, for each element in the array, you are to find the first smaller value to its left. If no such value exists, the answer for that element is -1. Write a function to perform this task: Function Description Complete the `nearest_smaller_values` function in the editor below. `nearest_smaller_values` has the following parameter(s): - `int arr[]`: an array of integers Returns - `int[]`: an array of integers representing the nearest smaller values Input Format The first line contains an integer `n`, the number of elements in the array. The second line contains `n` space-separated integers, representing the elements of the array. Constraints 1 leq n leq 10^5 -10^9 leq arr[i] leq 10^9 Sample Input ```plaintext 6 2 5 3 7 8 1 ``` Sample Output ```plaintext -1 2 2 3 7 -1 ``` Explanation For each element, the nearest smaller value to the left is: - For 2, no smaller value to the left exists, so the result is -1. - For 5, the nearest smaller value is 2. - For 3, the nearest smaller value is 2. - For 7, the nearest smaller value is 3. - For 8, the nearest smaller value is 7. - For 1, no smaller value to the left exists, so the result is -1.","solution":"def nearest_smaller_values(arr): Returns an array of integers representing the nearest smaller values for each element in the input array. Args: arr (int[]): an array of integers Returns: int[]: an array of integers representing the nearest smaller values result = [] stack = [] for num in arr: while stack and stack[-1] >= num: stack.pop() if not stack: result.append(-1) else: result.append(stack[-1]) stack.append(num) return result"},{"question":"Write a program to check if a given string is a valid email address. According to the standard email format, an email address consists of three main parts: a local-part, an \\"@\\" symbol, and a domain part. The local-part contains letters (a-z, A-Z), digits (0-9), and special characters (., _, and -). The local-part should not start or end with a special character, and consecutive special characters are not allowed. The domain part consists of a series of labels separated by dots. Each label must start and end with letters (a-z, A-Z) or digits (0-9), and may contain hyphens (-) in between. The last label must be at least two characters long. Your task is to complete the function isValidEmail which returns 1 if the given email address is valid, else returns 0. The function takes the email address as the only argument in the form of a string. Example 1: Input: Email address = \\"example.user@domain.com\\" Output: 1 Explanation: The given email address follows the standard format and all parts are valid. Example 2: Input: Email address = \\"invalid-mail@com\\" Output: 0 Explanation: The domain part must have at least one dot, and the last label must be at least two characters. Your Task: Complete the function isValidEmail() which takes the email address in the form of string s as an input parameter and returns 1 if this is a valid email address otherwise returns 0. Expected Time Complexity: O(N), N = length of the string. Expected Auxiliary Space: O(1) Constraints: 1<=length of string <= 100 Note: The Input/Output format and Example given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"import re def isValidEmail(s): Returns 1 if the given email address is valid, else returns 0. # Define a regular expression pattern for email validation pattern = r\\"^[a-zA-Z0-9]+([._-]?[a-zA-Z0-9]+)*@[a-zA-Z0-9]+([.-]?[a-zA-Z0-9]+)*.[a-zA-Z]{2,}\\" # Match the input string with the pattern if re.match(pattern, s): return 1 else: return 0"},{"question":"There’s an ancient digital clock in a museum that shows time in the 24-hour format (HH:MM) with precisely 4 digits (HH is always two digits from 00 to 23 and MM is always two digits from 00 to 59). Sometimes, the clock stops and shows mirrored or malformed times. Your task is to write a program that reads multiple times from the given input, each representing a time displayed on such a clock, and determine how many of these times can potentially correspond to valid times on a 24-hour clock if interpreted as a mirrored image. Keep in mind that certain digits when mirrored might transform into other digits, for example, \'2\' to \'5\'. Valid mirrored digits: - 0 mirrors to 0 - 1 mirrors to 1 - 2 mirrors to 5 - 5 mirrors to 2 - 8 mirrors to 8 Invalid mirrored digits include 3, 4, 6, 7, and 9. Input: The input consists of T test cases (1 ≤ T ≤ 100), where T is given on the first line of the input. Each test case consists of a single time string in the format “HH:MM”. Output: For each test case, output \\"Valid\\" if the time can represent a valid time when mirrored, and \\"Invalid\\" otherwise. Example: Sample input: 3 20:50 13:31 08:80 Sample output: Valid Invalid Invalid","solution":"def is_valid_mirrored_time(time_str): Determines if a given time string (HH:MM) can represent a valid time when mirrored. Args: time_str (str): The input time string in the format \\"HH:MM\\". Returns: bool: True if the mirrored time is valid, False otherwise. mirrored_digits = {\'0\': \'0\', \'1\': \'1\', \'2\': \'5\', \'5\': \'2\', \'8\': \'8\'} try: hours, minutes = time_str.split(\':\') mirrored_hours = mirrored_digits[minutes[1]] + mirrored_digits[minutes[0]] mirrored_minutes = mirrored_digits[hours[1]] + mirrored_digits[hours[0]] if int(mirrored_hours) < 24 and int(mirrored_minutes) < 60: return \\"Valid\\" else: return \\"Invalid\\" except (KeyError, IndexError, ValueError): return \\"Invalid\\" def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] for i in range(1, T + 1): time_str = data[i] results.append(is_valid_mirrored_time(time_str)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Ryan is an archaeologist who loves solving mazes. Today, he has encountered a challenging maze of ancient ruins represented as an N x M grid. Each cell of the grid has either a path (\'.\') or a wall (\'#\'). Ryan can only move through the cells with paths. His objective is to start at the top-left corner of the grid (0,0) and reach the bottom-right corner (N-1,M-1) with the least amount of steps possible. Additionally, Ryan has a special magical tool that allows him to break exactly one wall (\'#\') in the grid, turning it into a path (\'.\'). This tool, however, can only be used once. If the direct path is blocked by walls, Ryan must decide the optimal wall to break to minimize his steps. Input format: - The first line contains the number of test cases t. - For each test case: - The first line contains two integers N and M, the number of rows and columns in the grid. - The following N lines each contain a string of M characters representing the maze grid. Output format: - For each test case, print the minimum number of steps required for Ryan to reach the bottom-right corner from the top-left corner. If it\'s impossible to reach the destination, print \\"Impossible\\". Constraints: 1 ≤ t ≤ 10 2 ≤ N, M ≤ 1000 SAMPLE INPUT: 1 5 5 ..... .#. .#.#. .#.#. ....# SAMPLE OUTPUT: 8 Explanation: Ryan can break the wall at (1,2) which will then yield the path: ..... .#..# .#.#. .#.#. ....# The shortest path from (0,0) to (4,4) can now be traversed in 8 steps: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4).","solution":"from collections import deque import sys def minimum_steps_to_exit(t, test_cases): def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M: yield nx, ny def bfs(start, end, break_wall): queue = deque([(start[0], start[1], break_wall, 0)]) # (x, y, can_break_wall, cost) visited = set((start[0], start[1], break_wall)) while queue: x, y, can_break, cost = queue.popleft() if (x, y) == end: return cost for nx, ny in neighbors(x, y): if (nx, ny, can_break) not in visited: if grid[nx][ny] == \'.\': visited.add((nx, ny, can_break)) queue.append((nx, ny, can_break, cost + 1)) elif grid[nx][ny] == \'#\' and can_break: visited.add((nx, ny, False)) queue.append((nx, ny, False, cost + 1)) return float(\'inf\') result = [] for i in range(t): N, M, grid = test_cases[i] start, end = (0, 0), (N-1, M-1) # First try without breaking any wall min_steps = bfs(start, end, True) if min_steps == float(\'inf\'): result.append(\\"Impossible\\") else: result.append(min_steps) return result"},{"question":"Chef has two game tokens, each initially holding a certain integer value. In one move, Chef can increment one of the tokens by 2 or decrement one of the tokens by 1. Chef wants both tokens to hold the same value after a certain number of moves. Write a program to determine the minimum number of moves required to make the values of both tokens equal. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line of input containing two space-separated integers X and Y representing the initial values of the two tokens. ------ Output Format ------ For each test case, output the minimum number of moves required to make the values of the two tokens equal. ------ Constraints ------ 1 ≤ T ≤ 1000 -1000 ≤ X, Y ≤ 1000 ------ Sample Input 1 ------ 4 3 7 10 5 -5 5 -2 -3 ------ Sample Output 1 ------ 4 3 5 1 ------ Explanation 1 ------ Test case 1: Chef can decrement the value of the second token 4 times to get 3: 7-1-1-1-1 = 3. Test case 2: Chef can increment the value of the second token 3 times to get 10: 5+2+2+1 = 10. Test case 3: Chef can increment the value of the first token 5 times to get 5: -5+2+2+2+2+2 = 5. Test case 4: Chef can increment the value of the first token once to get -1: -2+2-1 = -1.","solution":"def min_moves_to_equal_tokens(X, Y): Returns the minimum number of moves required to make the values of two tokens X and Y equal. One move can increment one token by 2 or decrement one token by 1. return abs(X - Y) def process_test_cases(test_cases): results = [] for X, Y in test_cases: results.append(min_moves_to_equal_tokens(X, Y)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0].strip()) test_cases = [] for i in range(T): X, Y = map(int, lines[i+1].strip().split()) test_cases.append((X, Y)) return test_cases"},{"question":"Flatten Binary Tree to Linked List Given the root of a binary tree, flatten the tree into a \\"linked list\\": * The \\"linked list\\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. * The \\"linked list\\" should be in the same order as a pre-order traversal of the binary tree. Write a function to flatten the binary tree into a linked list in-place. # Input * `root`: The root node of the binary tree. # Output The tree should be modified in-place, thus the function should not return anything. # Example Example 1 Input: ``` 1 / 2 5 / 3 4 6 ``` Output: ``` 1 2 3 4 5 6 ``` Example 2 Input: ``` 0 ``` Output: ``` 0 ``` # Constraints * The number of nodes in the tree is in the range [0, 2000]. * `-100 <= Node.val <= 100`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def flatten(root: TreeNode): if not root: return # Start from the root and iterate through nodes stack = [root] prev = None while stack: curr = stack.pop() if prev: prev.right = curr prev.left = None if curr.right: stack.append(curr.right) if curr.left: stack.append(curr.left) prev = curr"},{"question":"Define a function `longestConsecutiveSubsequence` that identifies the length of the longest consecutive elements subsequence from a given unsorted list of integers. The elements of the subsequence should be consecutive integers. The function should take a list of integers as input and return an integer representing the length of the longest consecutive subsequence. For example: ```python longestConsecutiveSubsequence([100, 4, 200, 1, 3, 2]) ----> 4 # The longest consecutive subsequence is [1, 2, 3, 4], which has a length of 4. longestConsecutiveSubsequence([0, -1, 9, 11, 10, -3, -2, -4]) ----> 5 # The longest consecutive subsequence is [-4, -3, -2, -1, 0], which has a length of 5. ``` Your task is to implement the `longestConsecutiveSubsequence` function to determine the longest sequence of consecutive integers within an unordered list of integers. Happy coding!","solution":"def longestConsecutiveSubsequence(nums): Returns the length of the longest consecutive elements subsequence in an unsorted list of integers. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in nums_set: # only check for the start of streaks current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"A popular social media company is planning to launch a new feature that shows the top trending hashtags within a given time period. As a part of their backend team, you are assigned to create a program to help determine these trending hashtags. Given a list of hashtags with their respective frequencies, you need to identify the top k trending hashtags. Your task is to write a program that inputs a list of hashtags and their frequencies, and outputs the top k trending hashtags in descending order of their frequencies. If two hashtags have the same frequency, they should be ordered lexicographically. Input The input consists of multiple datasets. Each dataset is given in the following format: n k hashtag1 frequency1 hashtag2 frequency2 ... hashtagn frequencyn The first line gives two integers, n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ n), where n is the number of hashtags and k is the number of top trending hashtags to return. The following n lines each contain a hashtag (a string of up to 50 characters) and its frequency (an integer, 1 ≤ frequency ≤ 10000). The end of the input is indicated by a line with two zeros. Output For each dataset, print the top k trending hashtags in descending order of their frequencies. If two hashtags have the same frequency, output them in lexicographical order. Each output should be in a separate line. Example Input 5 3 hashtag1 250 hashtag2 500 hashtag3 500 hashtag4 100 hashtag5 300 3 2 tag1 100 tag2 200 tag3 150 0 0 Output hashtag2 hashtag3 hashtag5 tag2 tag3","solution":"def top_trending_hashtags(datasets): Given multiple datasets of hashtags and their frequencies, return the top k trending hashtags for each dataset. Inputs: - datasets: A list of tuples, where each tuple contains an integer n, an integer k, and a list of n tuples (hashtag, frequency). Output: - A list of lists, where each inner list contains the top k trending hashtags for the corresponding dataset. results = [] for data in datasets: n, k, hashtag_data = data sorted_hashtags = sorted( hashtag_data, key=lambda x: (-x[1], x[0]) ) top_k_hashtags = [hashtag for hashtag, _ in sorted_hashtags[:k]] results.append(top_k_hashtags) return results def process_input(input_str): Process the input string and convert it into a usable format for the top_trending_hashtags function. lines = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): n, k = map(int, lines[i].split()) if n == 0 and k == 0: break hashtag_data = [] for j in range(i + 1, i + n + 1): parts = lines[j].rsplit(\' \', 1) hashtag = parts[0] frequency = int(parts[1]) hashtag_data.append((hashtag, frequency)) datasets.append((n, k, hashtag_data)) i += n + 1 return datasets def main(input_str): Main function to process the input and get the output. datasets = process_input(input_str) results = top_trending_hashtags(datasets) output_lines = [] for result in results: output_lines.extend(result) return \'n\'.join(output_lines)"},{"question":"You have been asked to implement a simple text editor that can perform 3 types of operations on a string `S`: 1. Append a given string `W` at the end of `S`. 2. Delete the last `k` characters from `S`. 3. Print the `p`-th character of `S` (1-based index). You need to perform a sequence of such operations and provide the output for all print operations. Input: First line of input contains an integer `N` denoting the number of operations to be performed. Next `N` lines contain one of the following operations: - \\"APPEND W\\" where `W` is the string to be appended. - \\"DELETE k\\" where `k` is the number of characters to be deleted. - \\"PRINT p\\" where `p` is the position of the character to be printed (1-based index). Output: For each \\"PRINT\\" operation, print the `p`-th character of string `S` in a new line. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ |W| ≤ 100 - 1 ≤ k ≤ |S| - 1 ≤ p ≤ |S| SAMPLE INPUT 5 APPEND hello APPEND world PRINT 5 DELETE 5 PRINT 5 SAMPLE OUTPUT o o Explanation: The sequence of operations is as follows: - APPEND \\"hello\\" -> S = \\"hello\\" - APPEND \\"world\\" -> S = \\"helloworld\\" - PRINT 5 -> \'o\' (5th character of \\"helloworld\\") - DELETE 5 -> S = \\"hello\\" - PRINT 5 -> \'o\' (5th character of \\"hello\\")","solution":"def text_editor(operations): S = \\"\\" output = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"APPEND\\": W = parts[1] S += W elif command == \\"DELETE\\": k = int(parts[1]) S = S[:-k] elif command == \\"PRINT\\": p = int(parts[1]) output.append(S[p-1]) return output"},{"question":"Given an array of integers arr[] of size n, find the maximum sum of a subarray with the constraint that no adjacent elements are selected in the subarray. Example 1: Input: n = 5 arr = [3, 2, 5, 10, 7] Output: 15 Explanation: Selecting the elements 3, 10, and 2 results in a maximum sum of 15. Example 2: Input: n = 4 arr = [3, 2, 7, 10] Output: 13 Explanation: Selecting the elements 3 and 10 results in a maximum sum of 13. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSumSubarray() which takes the array and its size n as input parameters and returns the maximum sum of the subarray with the specified constraints. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^6 1 <= arr[i] <= 10^4","solution":"def maxSumSubarray(arr, n): Returns the maximum sum of a subarray with the constraint that no two adjacent elements are selected. if n == 0: return 0 if n == 1: return arr[0] # Initializing variables to store the maximum sum excluding and including the current element prev2 = 0 prev1 = arr[0] for i in range(1, n): current = max(prev1, prev2 + arr[i]) prev2 = prev1 prev1 = current return prev1"},{"question":"Aeron, the ancient code-master, has discovered an encrypted message. To decipher it, he needs to determine the longest subsequence of distinct characters from within the encrypted message. Being a master of codes, Aeron defines a subsequence as any sequence that can be derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. Help Aeron by writing a program to find the length of the longest subsequence of distinct characters in the given message. **Input** - A single string `message` (1 ≤ length of message ≤ 1000) containing only lowercase English letters. **Output** - Output a single integer – the length of the longest subsequence of distinct characters. **Example** Input ``` aabbccddeeff ``` Output ``` 6 ``` Input ``` abcabcabcabc ``` Output ``` 3 ``` Input ``` abcdefghijklmnopqrstuvwxyz ``` Output ``` 26 ``` **Note** In the first sample case, the longest subsequence of distinct characters is \\"abcdef\\", which has a length of 6. In the second sample case, the longest subsequence of distinct characters is any permutation of \\"abc\\", which has a length of 3. In the third sample case, the entire string is the longest subsequence, with a length of 26.","solution":"def longest_subsequence_of_distinct_characters(message): Returns the length of the longest subsequence of distinct characters from the given message. # Convert the message to a set which will automatically remove duplicate characters distinct_characters = set(message) # The length of the set will be the length of the longest subsequence of distinct characters return len(distinct_characters)"},{"question":"You are given a list of books. Each book consists of a title, an author, and a publication year. Your task is to implement a function that sorts the list of books based on multiple criteria in the following order of priority: 1. First by year in descending order (most recent books first). 2. If two books have the same year, they should be sorted by the author\'s name in alphabetical order. 3. If two books have the same year and author, they should be sorted by the title in alphabetical order. Implement a function `sort_books(books)` that takes a list of dictionaries where each dictionary represents a book with the aforementioned properties and returns the sorted list of books. # Input - A list of dictionaries representing books. Each dictionary contains the following keys: - \\"title\\": A string representing the title of the book. - \\"author\\": A string representing the author of the book. - \\"year\\": An integer representing the publication year of the book. # Output - A list of dictionaries representing the sorted books. # Examples ```python def sort_books(books): # Your code here # Example 1 books = [ {\\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"year\\": 2020}, {\\"title\\": \\"Data Science\\", \\"author\\": \\"Jane Smith\\", \\"year\\": 2019}, {\\"title\\": \\"Machine Learning\\", \\"author\\": \\"John Doe\\", \\"year\\": 2020}, {\\"title\\": \\"Data Analysis\\", \\"author\\": \\"Jane Smith\\", \\"year\\": 2020} ] print(sort_books(books)) # Output: # [ # {\\"title\\": \\"Data Analysis\\", \\"author\\": \\"Jane Smith\\", \\"year\\": 2020}, # {\\"title\\": \\"Machine Learning\\", \\"author\\": \\"John Doe\\", \\"year\\": 2020}, # {\\"title\\": \\"Python Programming\\", \\"author\\": \\"John Doe\\", \\"year\\": 2020}, # {\\"title\\": \\"Data Science\\", \\"author\\": \\"Jane Smith\\", \\"year\\": 2019} # ] # Example 2 books = [ {\\"title\\": \\"AI Basics\\", \\"author\\": \\"Zara White\\", \\"year\\": 2018}, {\\"title\\": \\"Deep Learning\\", \\"author\\": \\"Xander Black\\", \\"year\\": 2018}, {\\"title\\": \\"Robotics\\", \\"author\\": \\"Amy Brown\\", \\"year\\": 2019}, {\\"title\\": \\"NLP Fundamentals\\", \\"author\\": \\"John Doe\\", \\"year\\": 2021} ] print(sort_books(books)) # Output: # [ # {\\"title\\": \\"NLP Fundamentals\\", \\"author\\": \\"John Doe\\", \\"year\\": 2021}, # {\\"title\\": \\"Robotics\\", \\"author\\": \\"Amy Brown\\", \\"year\\": 2019}, # {\\"title\\": \\"Deep Learning\\", \\"author\\": \\"Xander Black\\", \\"year\\": 2018}, # {\\"title\\": \\"AI Basics\\", \\"author\\": \\"Zara White\\", \\"year\\": 2018} # ] ``` # Note In the first example: - \\"Data Analysis\\" and \\"Machine Learning\\" come before \\"Python Programming\\" as they are recent and in alphabetical order of author and title. - \\"Python Programming\\" and \\"Machine Learning\\" have the same year and author hence sorted by title. In the second example: - \\"NLP Fundamentals\\" is the most recent. - \\"Robotics\\" follows next based on the year. - \\"Deep Learning\\" and \\"AI Basics\\" have the same year, hence sorted by author name.","solution":"def sort_books(books): Sorts a list of books based on year (descending), author (alphabetical), and title (alphabetical). sorted_books = sorted(books, key=lambda x: (-x[\'year\'], x[\'author\'], x[\'title\'])) return sorted_books"},{"question":"Given an array of integers and a window size K, the task is to find the maximum number of prime numbers in any subarray of size K. Example 1: Input: K = 3 arr = [1, 3, 7, 6, 13, 19, 18, 22] Output: 2 Explanation: The subarrays of size 3 are: [1, 3, 7], [3, 7, 6], [7, 6, 13], [6, 13, 19], [13, 19, 18], [19, 18, 22] Primes in each subarray are: [3, 7], [3, 7], [7, 13], [13, 19], [13, 19], [19] The maximum count of primes in any subarray of size 3 is 2. Example 2: Input: K = 2 arr = [11, 15, 8, 5, 33, 7, 2] Output: 2 Explanation: The subarrays of size 2 are: [11, 15], [15, 8], [8, 5], [5, 33], [33, 7], [7, 2] Primes in each subarray are: [11], [], [5], [], [7], [7, 2] The maximum count of primes in any subarray of size 2 is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxPrimeCount() which takes an Integer K and an array arr as input and returns the maximum number of prime numbers in any subarray of size K. Expected Time Complexity: O(n * sqrt(m)) Expected Auxiliary Space: O(1) Constraints: 1 <= K <= n <= 10^5 1 <= arr[i] <= 10^6","solution":"from math import isqrt def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def maxPrimeCount(K, arr): Function to find the maximum number of prime numbers in any subarray of size K. n = len(arr) max_prime_count = 0 current_prime_count = 0 # Initialize the prime count for the first window for i in range(K): if is_prime(arr[i]): current_prime_count += 1 max_prime_count = current_prime_count for i in range(K, n): if is_prime(arr[i - K]): current_prime_count -= 1 if is_prime(arr[i]): current_prime_count += 1 max_prime_count = max(max_prime_count, current_prime_count) return max_prime_count"},{"question":"Samantha is practicing sorting algorithms and wants to focus on a special kind of list which only contains unique integers. She wants to test her understanding by writing a program that counts the number of inversions needed to make the list sorted in ascending order. An inversion is any pair of indices (i, j) such that i < j and list[i] > list[j]. You are asked to help Samantha by writing a program to determine the number of inversions required to sort the given list. Input::: The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of elements in the list. The second line contains n distinct integers — the elements of the list. Output::: Print the number of inversions required to sort the list in ascending order. SAMPLE INPUT 5 2 3 8 6 1 SAMPLE OUTPUT 5 Explanation In the given list, the inversions are as follows: - (2, 1) - (3, 1) - (8, 6) - (8, 1) - (6, 1) Therefore, the number of inversions required to sort the list is 5.","solution":"def count_inversions(arr): This function returns the number of inversions required to sort the array in ascending order. def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},P=["disabled"],D={key:0},j={key:1};function R(s,e,l,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",Y,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",j,"Loading...")):(n(),i("span",D,"See more"))],8,P)):u("",!0)])}const M=d(A,[["render",R],["__scopeId","data-v-77f999a5"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/13.md","filePath":"deepseek/13.md"}'),L={name:"deepseek/13.md"},G=Object.assign(L,{setup(s){return(e,l)=>(n(),i("div",null,[x(M)]))}});export{B as __pageData,G as default};
