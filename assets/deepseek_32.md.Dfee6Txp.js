import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as x,q as v}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},E={class:"review-title"},I={class:"review-content"};function O(s,e,h,m,r,a){return n(),i("div",k,[t("div",T,[t("div",E,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",I,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const A=d(q,[["render",O],["__scopeId","data-v-a8d5b821"]]),Y=JSON.parse('[{"question":"You are given a string s with a length of n consisting of lowercase English letters, and an integer k. Your task is to determine if there exists a substring of length exactly k that contains at least k/2 distinct characters. If such a substring exists, find one such substring. The first line contains an integer t (1 le t le 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 le n le 10^4) — the length of the string s. The second line contains a string s of length n consisting of lowercase English letters. The third line contains an integer k (2 le k le n) — the length of the desired substring. For each test case, if a valid substring exists, output \\"YES\\" and the substring of length k with at least k/2 distinct characters. If multiple such substrings exist, output any of them. If no such substring exists, output \\"NO\\". # Example: Input: ``` 3 7 abcdefg 3 5 aaaaa 3 10 abcdeabcde 6 ``` Output: ``` YES abc NO YES abcdea ```","solution":"def find_substring(t, cases): results = [] for case in cases: n, s, k = case[\'n\'], case[\'s\'], case[\'k\'] found = False for i in range(n - k + 1): substring = s[i:i+k] if len(set(substring)) >= k / 2: results.append(f\\"YESn{substring}\\") found = True break if not found: results.append(\\"NO\\") return results"},{"question":"In a small town, there is a tradition of a bi-annual event called the \\"Town Lantern Festival.\\" During this festival, there is a lantern competition in which participants are asked to arrange their lanterns in a row. The rows are judged based on a few criteria and one of the criteria is the \\"Smoothness\\". The \\"Smoothness\\" of a row of lanterns is defined as the maximum difference in height between any two adjacent lanterns. The goal for each participant is to minimize this value to make their lantern row as smooth as possible. You are a programmer and a participant asked for your help to rearrange his lanterns to achieve the minimum possible \\"Smoothness.\\" You are given a list of integers representing the heights of the lanterns in the order they are currently arranged. You can rearrange them in any order. Your task is to find the minimum possible \\"Smoothness\\". # Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of lanterns. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the lanterns. # Output Print the minimum possible \\"Smoothness\\" of the lantern row. # Example Example 1 **Input:** ``` 5 1 5 3 9 7 ``` **Output:** ``` 2 ``` **Explanation:** One possible arrangement is [1, 3, 5, 7, 9]. The maximum difference between adjacent lanterns is at most 2 (3-1=2, 5-3=2, 7-5=2, 9-7=2). Example 2 **Input:** ``` 4 8 2 6 3 ``` **Output:** ``` 1 ``` **Explanation:** One possible arrangement is [2, 3, 6, 8]. The maximum difference between adjacent lanterns is at most 1 (3-2=1, 6-3=3, 8-6=2).","solution":"def min_smoothness(n, heights): Returns the minimum possible \\"Smoothness\\" of the lantern row. heights.sort() min_diff = float(\'inf\') for i in range(n - 1): min_diff = min(min_diff, heights[i+1] - heights[i]) return min_diff # Example usage: # n = 5 # heights = [1, 5, 3, 9, 7] # print(min_smoothness(n, heights)) # Output: 2"},{"question":"You are tasked with managing the parking lot system for a large event. The parking lot has multiple rows, each containing a specific number of parking spots. Each parking spot can be either empty or occupied. Your goal is to write a program that helps attendants find the nearest available parking spot in their assigned row. The parking lot is represented by a 2D list of integers. An empty spot is denoted by 0 and an occupied spot is denoted by 1. The attendants are provided with a row number, and they need to find the index of the first available parking spot (empty spot) in that row. If the row is fully occupied, return -1. # Input - A 2D list `parking_lot` where each sublist represents a row in the parking lot. - An integer `row` indicating the specific row number (0-indexed). # Output - The index of the first available parking spot in the given row. If there are no available spots, return -1. # Example ```python parking_lot = [ [1, 0, 1, 1], [1, 1, 1, 0], [0, 0, 1, 1] ] row = 1 ``` Expected Output: ```python 3 ``` # Constraints - The number of rows in `parking_lot` would be between 1 and 100. - Each row will have between 1 and 100 parking spots. - `row` will be a valid row index within the range of the parking lot rows. Write a function `find_parking_spot(parking_lot: List[List[int]], row: int) -> int` that implements the solution.","solution":"def find_parking_spot(parking_lot, row): Returns the index of the first available parking spot (0) in the given row. If no spots are available, returns -1. :param parking_lot: List[List[int]] - a 2D list representing the parking lot. :param row: int - the row number to search for an available spot. :return: int - the index of the first available spot or -1 if no spots are available. for idx, spot in enumerate(parking_lot[row]): if spot == 0: return idx return -1"},{"question":"You are given a list of integers. Perform the following manipulations: 1. Separate the list into two sublists: one containing the even-indexed elements and the other containing the odd-indexed elements (zero-based indexing). 2. Sort the even-indexed sublist in ascending order. 3. Sort the odd-indexed sublist in descending order. 4. Merge the two sorted sublists back into one list, maintaining their respective positions (original even/odd index). Output the resulting list after these manipulations. The input consists of a single line containing a list of integers separated by spaces. The length of the list is at least 2 and at most 20. Output the list which is the result of the described manipulations.","solution":"def manipulate_list(lst): Separates the list into two sublists: one containing even-indexed elements and the other containing odd-indexed elements. Sorts the even-indexed sublist in ascending order and the odd-indexed sublist in descending order, and then merges them back into one list. Args: lst (list of int): The input list of integers. Returns: list of int: The manipulated list. even_indexed = [lst[i] for i in range(len(lst)) if i % 2 == 0] odd_indexed = [lst[i] for i in range(len(lst)) if i % 2 != 0] even_indexed.sort() odd_indexed.sort(reverse=True) merged_list = [] even_index, odd_index = 0, 0 for i in range(len(lst)): if i % 2 == 0: merged_list.append(even_indexed[even_index]) even_index += 1 else: merged_list.append(odd_indexed[odd_index]) odd_index += 1 return merged_list"},{"question":"Given an array of integers, you need to find the maximum XOR value of any subarray within the array. Consider an array `A` of `n` integers. A subarray is any non-empty contiguous part of the array. The XOR value of a subarray is defined as the XOR of all its elements. Write a function that returns the maximum XOR value of any subarray in the given array. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains `n` integers `A1, A2, ..., An` (0 ≤ Ai < 1,000,000,000) — the elements of the array. # Output - Output a single integer — the maximum XOR value of any subarray. # Example Input ``` 4 3 10 5 25 ``` Output ``` 28 ``` # Note In the example, the subarray [5, 25] gives the maximum XOR value of 28.","solution":"def findMaximumXORSubarray(arr): Returns the maximum XOR value of any subarray in the given array. n = len(arr) if n == 0: return 0 max_xor = 0 prefixes = set() prefixes.add(0) # To handle the case when a subarray itself gives the max XOR prefix_xor = 0 for num in arr: prefix_xor ^= num for p in prefixes: max_xor = max(max_xor, prefix_xor ^ p) prefixes.add(prefix_xor) return max_xor"},{"question":"A company wants to optimize the power consumption in its data centers. Each data center has multiple servers, each operating at a given power consumption level (measured in watts). The data centers can dynamically shut down any number of servers to save power, but they must keep at least one server running at all times. The company wants to know the minimal total power consumption for each data center if they shut down the servers optimally. Given the number of data centers n and the list of servers\' power consumption levels for each data center, determine the minimal total power consumption for each data center. The first line contains an integer n (1 ≤ n ≤ 100), the number of data centers. The next n lines describe the servers in each data center. Each line starts with an integer mi (1 ≤ mi ≤ 100), the number of servers in the data center, followed by mi integers representing the power consumption levels of each server in the data center (1 ≤ power consumption ≤ 1000). Output n integers, each representing the minimal total power consumption for each data center after optimally shutting down servers. Example: Input: 3 3 10 20 30 4 5 15 25 10 2 100 200 Output: 10 5 100 Explanation: - In the first data center, the minimal total power is 10 by shutting down the servers with power consumptions 20 and 30. - In the second data center, the minimal total power is 5 by shutting down the servers with power consumptions 15, 25, and 10. - In the third data center, the minimal total power is 100 by shutting down the server with power consumption 200.","solution":"def minimal_power_consumption(n, data_centers): Determines the minimal total power consumption for each data center after optimally shutting down servers. Args: n (int): Number of data centers. data_centers (list of lists): List where each element is a list representing the power consumption of servers in a data center. Returns: list: List of minimal total power consumption for each data center. minimal_consumptions = [] for servers in data_centers: minimal_consumptions.append(min(servers)) return minimal_consumptions"},{"question":"Rebellion forces have intercepted an encrypted message containing information about enemy fleet movements. The message consists of a sequence of strings, each representing a unique code. The challenge is to identify any codes that have been scrambled from a subset of letters of the original codes. Write a function `find_scrambled_codes` that takes a list of strings `codes`, and returns a list of pairs where each pair `(i, j)` indicates that the code at index `i` is a scrambled version of the code at index `j` (i.e., both composed of the same letters in different orders). Your function should account for the following: - Each code contains between 1 and 10 characters. - Characters are limited to lowercase English alphabet ‘a’ to ‘z’. - A code may be a scrambled version of another code if it can be reordered to match exactly. **Input** - A list of strings called `codes` containing between 1 and 1000 strings. **Output** - A list of tuples where each tuple `(i, j)` represents indices such that `codes[i]` is a scrambled version of `codes[j]`. **Example** ```python codes = [\\"abc\\", \\"bca\\", \\"dabc\\", \\"cab\\", \\"dab\\"] print(find_scrambled_codes(codes)) ``` **Expected Output** ```python [(0, 1), (0, 3), (1, 0), (1, 3), (3, 0), (3, 1)] ``` **Explanation** - The code \\"abc\\" at index 0 can be rearranged to match the code \\"bca\\" at index 1 and \\"cab\\" at index 3. Therefore, you have pairs (0, 1) and (0, 3). - Similarly, the code \\"bca\\" at index 1 can be rearranged to match the code \\"abc\\" at index 0 and \\"cab\\" at index 3, giving pairs (1, 0) and (1, 3). - This pattern continues for both directions until all scrambled pairs are identified.","solution":"def find_scrambled_codes(codes): Given a list of strings `codes`, the function returns a list of tuples where each tuple `(i, j)` indicates that `codes[i]` is a scrambled version of `codes[j]`. scrambled_pairs = [] # Create a dictionary to store sorted codes with their indices sorted_dict = {} for idx, code in enumerate(codes): sorted_code = \'\'.join(sorted(code)) if sorted_code in sorted_dict: sorted_dict[sorted_code].append(idx) else: sorted_dict[sorted_code] = [idx] # Generate scrambled pairs from the dictionary for indices in sorted_dict.values(): if len(indices) > 1: for i in indices: for j in indices: if i != j: scrambled_pairs.append((i, j)) return scrambled_pairs"},{"question":"In a computer game, there is a robot that moves on a 2D plane. The robot can only move in four directions: Up (U), Down (D), Left (L), and Right (R). Each of these movements affects the robot\'s position on the plane by moving it one unit in the respective direction. Your task is to determine the robot\'s final position after executing a sequence of movements. Write a function `final_position(directions)` that takes a string `directions` representing the sequence of movements. The string consists of characters \'U\', \'D\', \'L\', \'R\', with each character representing a movement command. The initial position of the robot is at the origin (0, 0). The function should return a tuple of two integers representing the final coordinates `(x, y)` of the robot after all movements have been executed. # Input: - A string `directions`, where 1 ≤ len(directions) ≤ 100, consisting of the characters \'U\', \'D\', \'L\', \'R\'. # Output: - A tuple `(x, y)` denoting the final position of the robot. # Example: ```python print(final_position(\\"UDLR\\")) # Output: (0, 0) print(final_position(\\"UUUD\\")) # Output: (0, 2) print(final_position(\\"RRL\\")) # Output: (1, 0) print(final_position(\\"UUDDLLRR\\")) # Output: (0, 0) ``` # Explanation: In the first example, the robot moves Up, Down, Left, and Right once, ending back at the origin (0, 0). In the second example, the robot moves Up three times and Down once, ending at (0, 2). In the third example, the robot moves Right twice and Left once, ending at (1, 0).","solution":"def final_position(directions): Determines the robot\'s final position after executing a sequence of movements. Args: directions (str): A string representing the sequence of movements. Returns: tuple: A tuple of two integers representing the final coordinates (x, y) of the robot. x, y = 0, 0 for move in directions: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return (x, y)"},{"question":"A group of travelers plans to visit multiple cities sequentially. Each city has a certain number of hotels, and each hotel has a limited number of rooms. The travelers would like to spend exactly one night in each city and need a specific number of rooms for their group. Your task is to determine if it is possible for them to book rooms in all the cities given the constraints. The problem is defined as follows: - You are given an integer ***n*** representing the number of cities, and an integer ***m*** representing the number of travelers. - For each city, there are multiple hotels, and each hotel has a certain number of available rooms. You need to determine if it\'s possible for the group of travelers to find accommodation in each city such that: - They stay in one hotel per city. - The hotel they stay in has at least ***m*** rooms available. # Input Format: - The first line contains two integers ***n*** and ***m*** (2 le n le 100,000, 1 le m le 1,000) – the number of cities and the number of travelers respectively. - The next ***n*** sections describe the hotels in each city: - The first line of each section contains a single integer ***h*** (1 le h le 1,000) – the number of hotels in the city. - The second line contains ***h*** integers representing the number of available rooms in each hotel in that city. # Output Format: - Print \\"Yes\\" if it is possible for the travelers to find accommodation in all the cities. - Otherwise, print \\"No\\". # Example: Input: ``` 3 5 2 4 8 3 3 6 7 2 2 5 ``` Output: ``` Yes ``` Explanation: - In the first city, they can stay in the second hotel which has 8 rooms. - In the second city, they can stay in either the second or third hotel as both have more than 5 rooms. - In the third city, they stay in the second hotel which has exactly 5 rooms. Thus, in this example, it is possible for the travelers to find accommodation in all cities. Implement this in your preferred programming language.","solution":"def can_accommodate_all(n, m, city_hotels): Determine if travelers can find accommodation in each city. Args: n (int): Number of cities. m (int): Number of travelers. city_hotels (list of lists of int): Available rooms in each hotel in each city. Returns: str: \\"Yes\\" if accommodation is possible, otherwise \\"No\\". for hotels in city_hotels: if all(hotel < m for hotel in hotels): return \\"No\\" return \\"Yes\\""},{"question":"Alex is organizing a hackathon and wants to create unique teams from the available participants. He has a list of participants, each having a unique skill from a predefined set of skills, with each participant possessing only one skill. Alex wants to form teams of exactly t participants such that each team has participants with different skills. Given n participants and their respective skills, write a program to determine the number of ways Alex can form the teams. Since this number can be large, you should output the result modulo (109 + 7). The first line of the input contains two integers n and t (1 ≤ t ≤ n ≤ 50). The second line contains n space-separated integers, s1, s2, ..., sn (1 ≤ si ≤ 50), where si represents the skill of the i-th participant. Output a single integer — the number of ways to form the teams, modulo (109 + 7). **Example:** ``` Input: 5 3 1 2 3 2 1 Output: 4 ``` Explanation: There are four ways to form a team of exactly 3 participants such that each team has unique skills: 1. (1, 2, 3) 2. (1, 3, 2) 3. (2, 3, 1) 4. (3, 2, 1)","solution":"from itertools import combinations from collections import Counter MOD = 10**9 + 7 def count_teams(n, t, skills): Returns the number of ways to form teams with exactly t participants such that each team has different skills. # Count the number of participants with each skill skill_count = Counter(skills) # List of distinct skills available distinct_skills = list(skill_count.keys()) # If there are less skills than required participants in a team, no team is possible if len(distinct_skills) < t: return 0 # Generate all combinations of t distinct skills skill_combinations = list(combinations(distinct_skills, t)) total_teams = 0 for comb in skill_combinations: # Calculate the product of participants count for the chosen combination of skills team_count = 1 for skill in comb: team_count = (team_count * skill_count[skill]) % MOD # Add the number of such teams to the total total_teams = (total_teams + team_count) % MOD return total_teams"},{"question":"You are given an array of integers where each element appears twice except for one. Find that single one. The first line of the input contains a single integer N (1 ≤ N ≤ 1000) — the number of elements in the array. The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^5) — the elements of the array. Output the single integer that appears only once. Note: Your solution should have a linear runtime complexity and use only constant extra space.","solution":"def find_single_number(nums): Given an array where each element appears twice except for one, find the single element. The function uses XOR operation to achieve this in O(n) time and O(1) space complexity. result = 0 for num in nums: result ^= num return result"},{"question":"You are creating a new social networking application. In this application, users can send friend requests to each other. A friend request from user i to user j will be successful if certain conditions are met. You need to implement a feature that will tell you whether a friend request between two users will be successful based on the following rules: 1. User i can send a friend request to user j if and only if they share at least one common interest. 2. A friend request will also be successful if one user is already a friend of the other user. The application should handle the following queries efficiently: 1. Send a friend request from one user to another and update their friend status if the request is successful. 2. Determine if a friend request between two users would be successful based on the criteria. Input: - The first line contains two integers n and m (1 le n, m le 5000), where n is the number of users, and m is the number of different interests. - The next n lines describe the user\'s interests. The i-th line starts with an integer k_i (0 le k_i le m), representing the number of interests user i has, followed by k_i integers indicating the IDs of these interests. - The next line contains an integer q (1 le q le 10000), representing the number of queries. - The following q lines describe the queries. Each query is of one of two types: 1. `1 i j`: Indicates a request from user i to user j. Update their friendship if the request is successful. 2. `2 i j`: Check if a friend request from user i to user j will be successful and output \\"YES\\" or \\"NO\\". Output: - For each query of the second type, output \\"YES\\" if a friend request would be successful according to the criteria, otherwise output \\"NO\\". Example: Input: ``` 5 3 2 1 2 1 2 1 3 1 1 0 2 1 1 2 1 2 3 1 3 4 2 1 3 2 3 5 ``` Output: ``` YES NO ``` Explanation: Initially, the users\' interests and friendships are: - User 1: Interests [1, 2], No friends - User 2: Interests [2], No friends - User 3: Interests [3], No friends - User 4: Interests [1], No friends - User 5: No interests, No friends Query handling: 1. Send a friend request from User 1 to User 2: - Users 1 and 2 share interest 2. - Therefore, the friend request is successful, and they become friends. 2. Send a friend request from User 2 to User 3: - Users 2 and 3 do not share any common interests. - Therefore, the friend request is not successful. 3. Send a friend request from User 3 to User 4: - Users 3 and 4 do not share any common interests. - Therefore, the friend request is not successful. 4. Check if a friend request from User 1 to User 3 will be successful: - Users 1 and 3 do not share any common interests. - User 1 and User 3 are not friends through some other connection. - Therefore, the output is \\"NO\\". 5. Check if a friend request from User 3 to User 5 will be successful: - Users 3 and 5 do not share any common interests. - User 3 and User 5 are not friends through some other connection. - Therefore, the output is \\"NO\\".","solution":"class SocialNetwork: def __init__(self, n, m): self.n = n self.m = m self.interests = [set() for _ in range(n)] self.friends = [set() for _ in range(n)] def add_interests(self, user, user_interests): self.interests[user] = set(user_interests) def send_friend_request(self, i, j): # If they are already friends if j in self.friends[i]: return \\"YES\\" # If they share at least one common interest if self.interests[i] & self.interests[j]: self.friends[i].add(j) self.friends[j].add(i) return \\"YES\\" return \\"NO\\" def check_friend_request(self, i, j): # If they are already friends if j in self.friends[i]: return \\"YES\\" # If they share at least one common interest if self.interests[i] & self.interests[j]: return \\"YES\\" return \\"NO\\" def handle_queries(n, m, user_interests, queries): social_network = SocialNetwork(n, m) for i in range(n): interests = user_interests[i] social_network.add_interests(i, interests) results = [] for query in queries: if query[0] == 1: _, i, j = query result = social_network.send_friend_request(i-1, j-1) elif query[0] == 2: _, i, j = query result = social_network.check_friend_request(i-1, j-1) results.append(result) return results"},{"question":"You are given a rectangular grid of size n x m, initially filled with zeroes. There are q operations to be done on this grid, each operation is described by four integers x1, y1, x2, and y2, which means that all the grid cells in the rectangle from (x1, y1) to (x2, y2) (inclusive) should be incremented by 1. Your task is to determine the final grid after all operations have been performed. Input The first line contains three integers n, m, q (1 ≤ n, m, q ≤ 1000) — the number of rows, the number of columns in the grid, and the number of operations respectively. The next q lines each contain four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) — the coordinates of the corners of the rectangle for each operation. Output Output n lines, each containing m integers — the final grid after performing all the operations. Example Input: 3 3 2 1 1 2 2 2 2 3 3 Output: 1 1 0 1 2 1 0 1 1","solution":"def apply_operations(n, m, operations): Apply a list of operations to an n x m grid. Parameters: n (int): number of rows in the grid. m (int): number of columns in the grid. operations (list of tuple of ints): list of operations. Each operation is described by four integers (x1, y1, x2, y2). Returns: list of list of ints: the final grid after all operations. # Initialize the grid with zeros grid = [[0] * m for _ in range(n)] # Apply each operation for x1, y1, x2, y2 in operations: for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += 1 # Increment cell by 1 return grid # Example usage: # n = 3, m = 3, q = 2 # operations = [(1, 1, 2, 2), (2, 2, 3, 3)] # result = apply_operations(3, 3, operations) # Output should be: # 1 1 0 # 1 2 1 # 0 1 1"},{"question":"You are given an array of integers a with length n (1 le n le 10^5). You need to find the smallest positive integer not present in the array. The first line contains a single integer n - the length of the array. The second line contains n integers a_i (-10^6 le a_i le 10^6) - the elements of the array. Print a single integer - the smallest positive integer that does not appear in the array. # Examples **Input:** ``` 5 1 2 0 -1 3 ``` **Output:** ``` 4 ``` **Input:** ``` 3 7 8 9 ``` **Output:** ``` 1 ``` **Input:** ``` 4 -1 -3 5 6 ``` **Output:** ``` 1 ```","solution":"def smallest_missing_positive_integer(n, a): Returns the smallest positive integer that does not appear in the array a. # Using a set for O(1) average time complexity for membership checks. positive_numbers = set(x for x in a if x > 0) # Start checking from 1 upwards. smallest_missing = 1 while smallest_missing in positive_numbers: smallest_missing += 1 return smallest_missing"},{"question":"You are given a rectangular grid of size n x m. This grid is initially filled with zeros. You will perform a series of operations on this grid. Each operation consists of selecting a single cell and setting its value to 1. You need to ensure that no two \\"1\\" cells are in the same row or the same column, and the sum of the Manhattan distances between all pairs of cells containing \\"1\\" is minimized. The Manhattan distance between two cells (i1, j1) and (i2, j2) is given by |i1 - i2| + |j1 - j2|. You need to output the minimum possible sum of Manhattan distances and also the arrangement of \\"1\\" cells that achieves this minimum sum of distances. The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. The second line contains an integer k (1 ≤ k ≤ min(n, m)), the number of cells that need to be set to \\"1\\". Output the minimum possible sum of Manhattan distances in the first line. In the next k lines, output the coordinates (1-based) of the cells containing \\"1\\" in any order. If there are multiple solutions with the same minimum sum, you can print any of them. Example: Input: 3 3 2 Output: 2 1 1 2 2 Explanation: One of the solutions involves placing a \\"1\\" in cell (1, 1) and another \\"1\\" in cell (2, 2). The sum of the Manhattan distances between all pairs of \\"1\\" cells is 2, which is the minimum possible.","solution":"def minimize_manhattan_distance(n, m, k): Returns the minimum sum of Manhattan distances and the arrangement of \\"1\\" cells that achieves this minimum sum of distances. # If k is 1, the minimum Manhattan distance is zero because there is only one \\"1\\". if k == 1: return 0, [(1, 1)] # To minimize the Manhattan distance, we place \\"1\\" cells on the diagonal from (1, 1) to (k, k). distance = 2 * (k - 1) # Sum of distances from the first \\"1\\" cell to the k-th \\"1\\" in diagonal arrangement = [(i + 1, i + 1) for i in range(k)] return distance, arrangement"},{"question":"You are given an array of n integers, and you are to perform q queries on this array. Each query asks for the sum of elements in a given subarray. Your task is to preprocess the array to enable efficient querying. Implement a solution that processes the queries in constant time after an initial preprocessing step. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers: a1, a2, ..., an (-10^4 ≤ ai ≤ 10^4), the elements of the array. The third line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing the left and right indices of the subarray (1-based index). Print q lines, each containing the sum of the corresponding subarray. Example: ``` Input: 5 1 2 3 4 5 3 1 3 2 4 1 5 Output: 6 9 15 ``` Implement a solution that efficiently processes the queries after the preprocessing step.","solution":"def preprocess_and_query(array, queries): Processes an array to enable efficient querying of subarray sums. Parameters: - array (list): The list of integers to be preprocessed. - queries (list of tuples): A list of (l, r) tuples where each tuple represents a query for the sum of element from index l to r (1-based index). Returns: - list: A list containing the sum of the subarrays for each query. # Number of elements in array n = len(array) # Generate prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] # Process each query results = [] for l, r in queries: results.append(prefix_sums[r] - prefix_sums[l - 1]) return results # Example usage: # array = [1, 2, 3, 4, 5] # queries = [(1, 3), (2, 4), (1, 5)] # print(preprocess_and_query(array, queries)) # Output: [6, 9, 15]"},{"question":"Given a string S consisting of lowercase English letters, you need to determine if you can obtain a palindrome by removing at most one character from S. A palindrome is a word that reads the same backward as forward. Write a function `canBePalindrome(s: str) -> bool` that takes a string S and returns a boolean value indicating whether it\'s possible to obtain a palindrome by removing at most one character from S. # Input - A single line containing the string S (1 ≤ |S| ≤ 10^5). # Output - A single boolean value: `True` if it\'s possible to make the string a palindrome by removing at most one character, `False` otherwise. # Example ```python canBePalindrome(\\"abca\\") ``` Output ```python True ``` ```python canBePalindrome(\\"racecar\\") ``` Output ```python True ``` ```python canBePalindrome(\\"abcdef\\") ``` Output ```python False ``` # Constraints - You should aim for a time complexity better than O(n^2) for an optimal solution. - The function should handle edge cases, such as strings with all identical characters or strings that are already palindromes.","solution":"def canBePalindrome(s: str) -> bool: def is_palindrome_range(i, j): return all(s[k] == s[j-k+i] for k in range(i, j)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"Two friends, Alice and Bob, are playing a game. They start with a string `s` consisting of lowercase Latin letters. In one move, Alice can select any even-indexed character (0-based index) and replace it with any lowercase Latin letter, while Bob can select any odd-indexed character and replace it with any lowercase Latin letter. The goal is to make the string a palindrome in the minimum number of moves. Your task is to determine this minimum number of moves required to convert the given string into a palindrome. The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 1000). Output `t` lines, where each line contains the minimum number of moves required for each test case to make the string a palindrome. Example: Input: 3 abca racecar aaaaaaaa Output: 1 0 0 Explanation: 1. For the first case, Alice can change the character \'a\' at index 2 to \'b\' to make the string \\"abba\\". 2. For the second case, the string is already a palindrome, so no moves are required. 3. For the third case, the string is already a palindrome, so no moves are required.","solution":"def min_moves_to_palindrome(t, strings): res = [] for s in strings: n = len(s) moves = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: moves += 1 res.append(moves) return res"},{"question":"You are given a string s consisting of only lowercase English letters. Your task is to determine whether you can reorder the characters of the string such that no two adjacent characters are the same. If possible, output one such permutation of the string. If not possible, return \\"Not Possible\\". # Input First Line - An integer t (1 le t le 100) - the number of test cases. For Each Test Case - A single string s (1 le |s| le 10^5), where |s| is the length of the string. # Output For each test case, output one line. If it is possible to reorder the characters to satisfy the condition, output one such permutation. If it is not possible, output \\"Not Possible\\". # Example Input ``` 3 aab aaab aabbcc ``` Output ``` aba Not Possible abcabc ``` # Note For the first test case, \\"aba\\" is a valid permutation since no adjacent \\"a\\" appears consecutively. For the second test case, it is not possible to reorder the string to meet the conditions. For the third test case, \\"abcabc\\" is a valid permutation since no adjacent characters are the same.","solution":"from heapq import heappop, heappush from collections import Counter def rearrange_string(s): Attempts to rearrange the string such that no two adjacent characters are the same. If possible, returns one such arrangement; otherwise, returns \\"Not Possible\\". freq = Counter(s) max_heap = [(-count, char) for char, count in freq.items()] heappush(max_heap, (0, \\"\\")) prev_count, prev_char = 0, \\"\\" result = [] while max_heap: count, char = heappop(max_heap) result.append(char) if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char result = \'\'.join(result) for i in range(1, len(result)): if result[i] == result[i-1]: return \\"Not Possible\\" return result def process_test_cases(test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"You are given an array of integers representing the number of fruits in each basket. You can choose to pick fruits from one or more baskets, but each time you can either pick all the fruits from a basket or half of the fruits of a basket (if the number of fruits is odd, you pick half of the floor value and leave the remaining). Your goal is to maximize the total number of fruits you collect. The first line of the input contains an integer n (1 le n le 100,000) denoting the number of baskets. The second line contains n integers a_i (1 le a_i le 10^9), where a_i is the number of fruits in the i-th basket. Print a single integer — the maximum number of fruits you can collect. Example: Input: ``` 4 3 5 7 9 ``` Output: ``` 20 ``` Explanation: 1. From the first basket, you can pick all 3 fruits. 2. From the second basket, you can pick all 5 fruits. 3. From the third basket, you can pick half (floor of 7/2) = 3 fruits. 4. From the fourth basket, you can pick half (floor of 9/2) = 4 fruits. The total fruits collected = 3+5+3+4 = 15. Alternatively, choosing to pick all fruits from the 3rd basket would yield: 3+5+7+4 = 19, which is the maximum number.","solution":"def max_fruits(n, fruits): Returns the maximum number of fruits that can be collected from the baskets. Parameters: n (int): Number of baskets fruits (list of int): Number of fruits in each basket Returns: int: Maximum number of fruits that can be collected total_fruits = 0 for fruit in fruits: total_fruits += fruit return total_fruits"},{"question":"You are given an array A of length n, and another array B of length m. You are allowed to perform the following operation 0 or more times on array A: - Select an integer index i (1 le i le n) and an integer index j (1 le j le m), and replace A[i] with A[i] - B[j]. Determine if it is possible to make all the elements of array A zero using the given operation. If it\'s possible, output \\"YES\\"; otherwise, output \\"NO\\". The first line contains two integers n and m (1 le n, m leq 100) — length of arrays A and B respectively. The second line contains n integers — the elements of array A (0 leq A[i] leq 1000). The third line contains m integers — the elements of array B (1 leq B[j] leq 1000). Print \\"YES\\" if it\'s possible to make all elements of A zero using the operation, otherwise print \\"NO\\". # Example Input: ``` 3 2 10 15 30 5 3 ``` Output: ``` YES ``` Explanation: - Subtract 5 from the first element of the array three times: 10 - 5 - 5 - 5 = 0. - Subtract 5 from the second element of the array twice, and 3 once: 15 - 5 - 5 - 3 - 2 = 0. - Subtract 5 from the third element of the array six times: 30 - 5 - 5 - 5 - 5 - 5 - 5 = 0. Input: ``` 3 1 10 15 30 7 ``` Output: ``` NO ``` Explanation: - It\'s impossible to make any element of the array exactly 0 by subtracting only 7.","solution":"def can_make_all_zero(n, m, A, B): Determines if it\'s possible to make all elements of A zero using the operation described. from math import gcd from functools import reduce # Find the greatest common divisor (GCD) of all elements in B def find_gcd_list(lst): return reduce(gcd, lst) gcd_B = find_gcd_list(B) # If each element in A is divisible by the GCD of B, we can make all elements zero for a in A: if a % gcd_B != 0: return \\"NO\\" return \\"YES\\""},{"question":"A software company maintains a task scheduler system where tasks are categorized based on their priority levels. Each task is represented by a tuple (start_time, end_time), indicating the time slot it occupies. The task scheduler needs a mechanism to efficiently assign non-overlapping tasks to the available processing units, optimizing the utilization of the system. Given a list of tasks, each with a start and end time, develop an algorithm to determine the maximum number of non-overlapping tasks that can be executed by a single processing unit. # Input: The first line contains an integer n (1 <= n <= 100), the number of tasks. The next n lines each contain two integers start_time and end_time (0 <= start_time < end_time <= 1000), representing the start and end times of each task. # Output: Print a single integer representing the maximum number of non-overlapping tasks that can be executed by a single processing unit. # Example: Input: ``` 5 1 3 2 5 4 6 6 7 5 8 ``` Output: ``` 3 ``` # Explanation: The optimal selection of tasks would be (1, 3), (4, 6), and (6, 7).","solution":"def max_non_overlapping_tasks(tasks): Determine the maximum number of non-overlapping tasks that can be executed by a single processing unit. :param tasks: List of tuples representing the (start_time, end_time) of each task. :return: Maximum number of non-overlapping tasks. if not tasks: return 0 # Sort tasks by their end times tasks.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given a grid-based city plot with n rows and m columns. Each cell in the grid can either contain a building denoted by \'B\' or a vacant land denoted by \'L\'. No two buildings are adjacent horizontally or vertically but only diagonally. We need to construct a new building in one of the vacant cells such that it does not become adjacent horizontally or vertically to any pre-existing building. Determine if it\'s possible to place such a building, and if so, find the coordinates (row and column) that would allow you to do this. If multiple answers exist, output any of them. First, input consists of two integers n and m (1 ≤ n, m ≤ 100). Next n lines each contain m characters, where each character is either \'B\' (building) or \'L\' (vacant land). If it is possible to place the new building, output the coordinates of the cell (1-based index) in the format \\"row col\\". If it is not possible, output \\"NO\\". Example: Input: 3 3 L L L L B L L L L Output: 1 1 Input: 2 2 B L L B Output: NO","solution":"def find_building_spot(grid): n = len(grid) m = len(grid[0]) def is_safe(x, y): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'B\': return False return True for i in range(n): for j in range(m): if grid[i][j] == \'L\' and is_safe(i, j): return i + 1, j + 1 return \\"NO\\" def solve(n, m, grid): result = find_building_spot(grid) if result == \\"NO\\": return \\"NO\\" else: return f\\"{result[0]} {result[1]}\\""},{"question":"In a small town, there is a tradition that each resident writes a letter to Santa Claus before Christmas. Each resident includes a wishlist in their letter, listing the gifts they desire. Santa\'s elves are responsible for reading the letters and categorizing the gifts by popularity. Santa decided to help his elves automate part of this process. They would like a program that processes all the letters and counts how many times each unique gift is requested by the residents. Given the letters of the residents, the program should create a sorted list of the gifts based on their popularity in descending order. If two or more gifts have the same popularity, they should be sorted lexicographically in ascending order. The first line contains an integer n (1 ≤ n ≤ 100), the number of letters written by the residents. Each of the next n lines contains a comma-separated list of gifts (1 ≤ the length of each list ≤ 10). Each gift is a non-empty string of lowercase Latin characters and has a length of at most 15 characters. Print the list of gifts sorted by their popularity in descending order. If multiple gifts have the same popularity, sort them lexicographically. Example: Input: ``` 3 ball,doll,car doll,car,ball doll,ball ``` Output: ``` ball 3 doll 3 car 2 ```","solution":"def count_gift_popularity(n, letters): Count the popularity of each gift and return a sorted list of gifts based on their popularity in descending order. from collections import Counter # Flatten all the gifts from all letters into a single list all_gifts = [] for letter in letters: all_gifts.extend(letter.split(\',\')) # Count frequencies of each gift gift_counts = Counter(all_gifts) # Sort the gifts by count (descending) and then lexicographically (ascending) sorted_gifts = sorted(gift_counts.items(), key=lambda x: (-x[1], x[0])) # Prepare the output in the desired format output = [f\\"{gift} {count}\\" for gift, count in sorted_gifts] return \\"n\\".join(output)"},{"question":"You are given a string of lowercase English letters. You are allowed to replace at most one character of the string with another character of your choice. Your task is to determine the length of the longest possible substring containing only one unique character after at most one replacement. The first line contains a single integer n (1 ≤ n ≤ 10,000) — the length of the string. The second line contains the string consisting of n lowercase English letters. Output a single integer — the length of the longest possible substring with only one unique character after at most one replacement. For example: Input: 7 abacabc Output: 3 Explanation: By replacing the first \'c\' with \'a\', the string becomes \'aba\'aabc, and the longest substring containing only one unique character is \'aaa\', which has a length of 3.","solution":"def longest_substring_with_one_replacement(n, s): Returns the length of the longest possible substring with only one unique character after at most one replacement. max_len = 1 def get_longest(substr, char): count = 0 left = 0 max_count = 0 for right in range(len(substr)): if substr[right] == char: count += 1 while (right - left + 1) - count > 1: # More than one replacement if substr[left] == char: count -= 1 left += 1 max_count = max(max_count, right - left + 1) return max_count for c in set(s): # For each unique character in the string curr_len = get_longest(s, c) max_len = max(max_len, curr_len) return max_len"},{"question":"You are given a list of students and their preferences for a set of activities. Each student has a preference value for every activity ranging from 1 to 10 (inclusive), where a higher value indicates a stronger preference. Each activity can have a maximum capacity indicating the number of students that can participate in it. Your task is to assign each student to one activity such that no activity exceeds its capacity and the total preference value across all assignments is maximized. If multiple optimal solutions exist, choose any. The first input line contains two integers n and m (1 ≤ n, m ≤ 100), where n is the number of students and m is the number of activities. The second line contains m integers representing the capacities of the activities. The next n lines each contain m integers representing the preference values of each student for the activities. Print n integers representing the activity assignments for each student in the given order (1-based indexing). If no valid assignment is found, print \\"Impossible\\". # Example Input 5 3 2 2 1 4 6 3 5 8 2 7 5 10 6 7 8 3 2 9 Output 3 2 1 2 1 # Explanation - Student 1 prefers activity 2 the most, so he is assigned to it (capacity left: 1). - Student 2 also prefers activity 2 the most, so she is also assigned to it (capacity left: 0). - Student 3 prefers activity 3 the most, so he is assigned to it (capacity left: 0). - Student 4 prefers activity 1, so he is assigned to it (capacity left: 1). - Student 5 prefers activity 1, so he is assigned to it (capacity left: 0). If any assignment was not possible due to capacity constraints, the output should have been \\"Impossible\\".","solution":"def assign_activities(n, m, capacities, preferences): assignment = [-1] * n remaining_capacities = capacities[:] for student in range(n): max_pref = -1 chosen_activity = -1 for activity in range(m): if preferences[student][activity] > max_pref and remaining_capacities[activity] > 0: max_pref = preferences[student][activity] chosen_activity = activity if chosen_activity != -1: assignment[student] = chosen_activity + 1 # converting to 1-based index remaining_capacities[chosen_activity] -= 1 else: return \\"Impossible\\" return assignment"},{"question":"You are preparing a delivery route for a fleet of drones. Each drone has a certain battery capacity, and every delivery consumes a specific amount of battery. Given the battery capacities of the drones and the battery requirements of the deliveries, determine the maximum number of deliveries that can be assigned to the drones without exceeding their battery capacities. For example, if you have 3 drones with capacities [10, 20, 30] and 4 delivery requirements [8, 15, 10, 25], the following assignment is possible: - Assign the first delivery (8) to the first drone (10). - Assign the second delivery (15) to the second drone (20). - Assign the third delivery (10) to the third drone (30). In this case, the maximum number of deliveries that can be completed is 3. The first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. For each test case: - The first line contains two integers n and m (1 ≤ n, m ≤ 10^6) — the number of drones and the number of deliveries. - The second line contains n integers — the battery capacities of the drones. - The third line contains m integers — the battery requirements of the deliveries. It is guaranteed that the sum of n over all test cases does not exceed 10^6, and the sum of m over all test cases does not exceed 10^6. For each test case, output the maximum number of deliveries that can be assigned to the drones.","solution":"def max_deliveries(num_drones, num_deliveries, drone_capacities, delivery_requirements): Determines the maximum number of deliveries that can be assigned to drones without exceeding their battery capacities. # Sort the drone capacities and delivery requirements drone_capacities.sort() delivery_requirements.sort() # Initialize counters for drones and deliveries d = 0 del_counter = 0 # Iterate over delivery requirements and try to match with drones for requirement in delivery_requirements: if d < num_drones and requirement <= drone_capacities[d]: del_counter += 1 d += 1 return del_counter"},{"question":"You are given two strings, s_1 and s_2. Determine if s_1 can be rearranged to form s_2. If it is possible, return \\"YES\\", otherwise return \\"NO\\". The first line contains an integer t (1 le t le 100) — the number of test cases. The following t lines each contain two space-separated strings s_1 and s_2. Both strings will have lengths between 1 and 10^5 and will contain only lowercase English letters. Output \\"YES\\" or \\"NO\\" for each test case: Input: ``` 3 abc cba foo bar xyyxx yxxxy ``` Output: ``` YES NO YES ```","solution":"def can_rearrange_to_form(s1, s2): Returns \\"YES\\" if s1 can be rearranged to form s2, otherwise returns \\"NO\\". if sorted(s1) == sorted(s2): return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: result = can_rearrange_to_form(s1, s2) results.append(result) return results"},{"question":"A spaceship exploration mission is tasked with retrieving precious minerals from a series of asteroids. The mission controllers need your help to determine the best way to manage the resources of this mission. The mission consists of n asteroids arranged in a straight line with (n - 1) one-way warp gates between them such that each asteroid can only be accessed from the previous one (i.e., asteroid 1 leads to asteroid 2, and so on, up to asteroid n-1 leading to asteroid n). The spaceship has to visit each asteroid to collect minerals. However, it must carefully manage its fuel, as traveling to different asteroids come at different fuel costs. Given a list of the fuel costs to travel between the asteroids, help the mission controllers determine the minimum total fuel expenditure required to collect minerals from all asteroids starting from the first asteroid. The first line of the input contains one integer n (2 leq n leq 100) — the number of asteroids. The next line contains (n - 1) integers c_1, c_2, dots, c_{n-1} (1 leq c_i leq 100), where c_i represents the fuel cost of traveling from asteroid (i) to asteroid (i+1). Output the minimum total fuel expenditure required to collect minerals from all asteroids starting from the first asteroid. **Example:** Input: ``` 5 4 2 5 3 ``` Output: ``` 14 ``` In this example, the spaceship needs to visit four warp gates with costs 4, 2, 5, and 3 respectively. Hence the minimum total fuel expenditure required is 4 + 2 + 5 + 3 = 14.","solution":"def min_fuel_expenditure(n, fuel_costs): Returns the minimum total fuel expenditure required to collect minerals from all asteroids starting from the first asteroid. n: An integer representing the number of asteroids. fuel_costs: A list of integers representing fuel costs between consecutive asteroids. return sum(fuel_costs) # Example usage # print(min_fuel_expenditure(5, [4, 2, 5, 3])) # Should output 14"},{"question":"A software company has designed a new program to check the security of passwords used by its employees. They need to ensure these passwords adhere to a set of rules to maintain security. Write a function that verifies if a given password is strong. A password is considered strong if it satisfies the following conditions: 1. It has at least 12 characters. 2. It contains at least one lowercase letter. 3. It contains at least one uppercase letter. 4. It contains at least one numerical digit. 5. It contains at least one special character from the set: !@#%^&*()-+. 6. It does not contain any spaces. Function Signature: `def is_strong_password(password: str) -> bool:` # Input - A single string representing the password to be checked. # Output - Return `True` if the password is strong, otherwise return `False`. # Example ```python assert is_strong_password(\\"P@ssw0rd12345\\") == True assert is_strong_password(\\"strongpaSsw0rd!\\") == True assert is_strong_password(\\"weakpassword\\") == False assert is_strong_password(\\"WeakPassword123\\") == False assert is_strong_password(\\"Weak!@Pass 123\\") == False ```","solution":"import re def is_strong_password(password: str) -> bool: Checks if the given password is strong. A password is considered strong if it satisfies the following conditions: 1. It has at least 12 characters. 2. It contains at least one lowercase letter. 3. It contains at least one uppercase letter. 4. It contains at least one numerical digit. 5. It contains at least one special character from the set: !@#%^&*()-+. 6. It does not contain any spaces. if len(password) < 12: return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*()-+]\', password): return False if re.search(r\'s\', password): return False return True"},{"question":"You are given a set of points in a 2D plane, each with an integer coordinate. Your task is to find the pair of points that are farthest apart and compute the square of the Euclidean distance between them. The first line contains a single integer n (2 le n le 1000) — the number of points. Each of the next n lines contains two integers x and y (-10^4 le x, y le 10^4) — the coordinates of the points. Output a single integer — the square of the Euclidean distance between the pair of points that are farthest apart. # Example Input: ``` 4 0 0 1 1 1 0 0 1 ``` Output: ``` 2 ``` Input: ``` 3 -1 -1 -1 1 1 -1 ``` Output: ``` 8 ``` # Note In the first example, the farthest pair of points are (0,0) and (1,1), (0,1), or (1,0), with a squared distance of 2. In the second example, the farthest pair of points are (-1,1) and (1,-1), with a squared distance of 8.","solution":"def calculate_max_squared_distance(points): def squared_dist(p1, p2): return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2 max_distance = 0 n = len(points) for i in range(n): for j in range(i + 1, n): dist = squared_dist(points[i], points[j]) if dist > max_distance: max_distance = dist return max_distance # Example usage n = 4 points = [(0, 0), (1, 1), (1, 0), (0, 1)] print(calculate_max_squared_distance(points)) # Output: 2 n = 3 points = [(-1, -1), (-1, 1), (1, -1)] print(calculate_max_squared_distance(points)) # Output: 8"},{"question":"You are given a set of N rectangular boxes, each characterized by its width W and its height H. You need to determine the maximum number of boxes that can be stacked together in such a way that each box in the stack is strictly smaller in both dimensions (width and height) than the box below it. You can rotate each box by 90 degrees to switch its width and height. Your task is to write a program that takes as input the number of boxes and their dimensions, and outputs the maximum number of boxes that can be stacked. # Input - The first line contains an integer N (1 ≤ N ≤ 1000) — the number of boxes. - The next N lines each contain two integers W and H (1 ≤ W, H ≤ 10^6) — the width and the height of each box. # Output Print a single integer — the maximum number of boxes that can be stacked together. # Example Input ``` 4 2 3 1 1 2 2 3 2 ``` Output ``` 3 ``` In this example, one possible sequence of stacking boxes is: - Rotate the box (2, 3) to (3, 2) - (3, 2) ← bottom - (2, 2) ← middle - (1, 1) ← top This results in a total of 3 boxes being stacked. # Note - To maximize the number of boxes in the stack, consider all possible orientations of each box and use dynamic programming to count the longest increasing subsequence of boxes based on their dimensions.","solution":"def max_stack_boxes(N, boxes): Returns the maximum number of boxes that can be stacked together. :param N: Number of boxes :param boxes: List of tuples containing the dimensions of the boxes (W, H) :return: Maximum number of boxes that can be stacked # Generate all possible rotations (original and rotated) rotated_boxes = [] for W, H in boxes: rotated_boxes.append((min(W, H), max(W, H))) # Sort the boxes rotated_boxes.sort() # Dynamic programming to find the longest increasing subsequence in height when widths are the same from bisect import bisect_left dp = [] for w, h in rotated_boxes: pos = bisect_left(dp, h) if pos == len(dp): dp.append(h) else: dp[pos] = h return len(dp) # Example usage N = 4 boxes = [(2, 3), (1, 1), (2, 2), (3, 2)] print(max_stack_boxes(N, boxes)) # Output should be 3"},{"question":"You\'re given an array of integers text{arr}=[a_1, a_2, ldots, a_n] of length n. You need to answer q queries. Each query is described by three integers l_i, r_i, and k_i, where 1 le l_i le r_i le n and 1 leq k_i leq r_i - l_i + 1. The answer to each query is the k_i-th smallest element in the subarray a_{l_i}, a_{l_i+1}, ldots, a_{r_i}. The first line contains an integer n (1 leq n leq 100,000) — the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. The third line contains one integer q (1 leq q leq 100,000) — the number of queries. Each of the following q lines contains three integers l_i, r_i, and k_i. For every query, output one integer: the k_i-th smallest element in the corresponding subarray. **Example:** ``` Input: 7 1 5 2 6 3 7 4 3 2 5 3 4 4 1 1 7 4 Output: 5 6 4 ```","solution":"def find_kth_smallest(arr, l, r, k): Finds the k-th smallest element in the subarray arr[l:r+1]. # Extract the specified subarray subarray = arr[l-1:r] # Sort the subarray subarray.sort() # Return the k-th smallest element return subarray[k-1] def main(arr, queries): results = [] for l, r, k in queries: result = find_kth_smallest(arr, l, r, k) results.append(result) return results"},{"question":"You are given a large file with a combination of integer values. Your task is to write a program to find the \\"first missing positive integer\\" in linear time and using constant extra space. In other words, find the smallest positive integer that does not appear in the array. The array can contain duplicates and negative numbers as well. The first line of the input contains an integer n (1 ≤ n ≤ 10^6) which denotes the number of integers in the array. The second line contains n integers separated by space which denote the elements of the array. Output a single integer which represents the smallest positive integer that is missing from the array. Example: Input: 5 3 4 -1 1 Output: 2 Input: 4 1 2 0 6 Output: 3 Note: - In the first example, the integers 3, 4, -1, and 1 are present, but 2 is missing. - In the second example, the integers 1 and 2 are present but 3 is missing.","solution":"def first_missing_positive(nums): Finds the first missing positive integer in a list of integers. :param nums: List[int] - List of integers which can contain duplicates and negative numbers. :return: int - The smallest positive integer that does not appear in the list. n = len(nums) # Step 1: Replace numbers <= 0 and > n with a number > n for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Step 2: Mark the presence of numbers for i in range(n): num = abs(nums[i]) if 1 <= num <= n: nums[num - 1] = -abs(nums[num - 1]) # Step 3: Find the first missing positive for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Adam and Bella work as farmers on a large orchard. They need to collect fruits from a series of trees arranged in a line. The trees need to be visited in a given specific order to pick the fruits. Initially, Adam is at the position p1 and Bella is at the position p2, and the trees are located at positions t1, t2, ..., tn. Adam and Bella decide beforehand who will collect the fruits from each tree. After collecting fruits from the i-th tree, either Adam or Bella will proceed to the (i+1)-th tree, while the other remains at their current position. However, there\'s a restriction on the maximum weight each of them can carry in their basket during the day. Adam\'s basket can hold up to W1 units of fruits, and Bella\'s basket can hold up to W2 units of fruits. They want to distribute the collection such that neither of them exceeds this limit. Write a function to determine whether it is possible to collect fruits from all trees without either of them exceeding their basket capacity. The first line of input contains five integers n, p1, p2, W1, W2 (1 ≤ n ≤ 100,000, 0 ≤ p1, p2 ≤ 10^9, 1 ≤ W1, W2 ≤ 1000) — number of trees, starting positions of Adam and Bella, and their respective basket capacities. The second line contains n integers t1, t2, ..., tn (0 ≤ ti ≤ 10^9) — positions of the trees. The third line contains n integers f1, f2, ..., fn (1 ≤ fi ≤ 1000) — the number of fruits on each tree. Output \\"YES\\" if it is possible to collect all the fruits without exceeding the basket capacities. Otherwise, output \\"NO\\". Example: Input: 4 0 10 15 10 1 5 10 15 5 5 4 6 Output: YES Explanation: Adam can collect from trees 1 and 2, and Bella can collect from trees 3 and 4. In this way, Adam carries 10 units of fruits and Bella carries 10 units. Both are within their respective basket capacities.","solution":"def can_collect_fruits(n, p1, p2, W1, W2, tree_positions, fruit_counts): # Initialize the total fruits collected by Adam and Bella fruits_adam = 0 fruits_bella = 0 # Initialize current positions pos_adam = p1 pos_bella = p2 for i in range(n): tree_pos = tree_positions[i] fruits = fruit_counts[i] # Calculate the distances from current positions dist_adam = abs(pos_adam - tree_pos) dist_bella = abs(pos_bella - tree_pos) # Decide who collects the fruits from the current tree if fruits_adam + fruits <= W1 and (fruits_bella + fruits > W2 or dist_adam <= dist_bella): fruits_adam += fruits pos_adam = tree_pos else: if fruits_bella + fruits > W2: return \\"NO\\" fruits_bella += fruits pos_bella = tree_pos return \\"YES\\""},{"question":"The King of Coordinates likes to play with points in the Cartesian plane. He has n points with integer coordinates. The King wants to form a rectangle by selecting a pair of points such that the rectangle has the maximum possible area and its sides are parallel to the coordinate axes. Help the King find out the maximum possible area of the rectangle formed by some pair of given points or determine that it is impossible to form such a rectangle. The first line of input contains an integer n (2 leq n leq 10^5) — the number of points. Each of the following n lines contains two integers x_i and y_i (-10^6 leq x_i, y_i leq 10^6) — the coordinates of the i-th point. If it is impossible to form a rectangle with the given input, print 0. Otherwise, print a single integer — the maximum possible area of the rectangle. In the first example, the answer is 6, obtained by choosing points (0,0), (3,0), (0,2), and (3,2) forming a rectangle with area 6. In the second example, no points share the same x or y coordinates, making it impossible to form a rectangle. Thus, the answer is 0.","solution":"def max_rectangle_area(n, points): from collections import defaultdict x_dict = defaultdict(list) y_dict = defaultdict(list) # Group points by their x and y coordinates for x, y in points: x_dict[x].append(y) y_dict[y].append(x) max_area = 0 # For each x in x_dict, sort the y list and calculate the possible rectangle areas for x in x_dict: y_list = sorted(x_dict[x]) for i in range(len(y_list) - 1): height = y_list[i + 1] - y_list[i] for j in range(i + 1, len(y_list)): height = y_list[j] - y_list[i] if height <= 0: continue width = 0 for k in x_dict: if k != x and y_list[i] in x_dict[k] and y_list[j] in x_dict[k]: width = abs(k - x) max_area = max(max_area, width * height) return max_area"},{"question":"You are given two strings, text and pattern, consisting of lowercase English letters. Your task is to determine if the pattern can be obtained by deleting some (possibly none) characters from the text without reordering the remaining characters. # Input: - The first line contains a single integer t (1 le t le 100) — the number of test cases. - Each test case consists of two lines. - The first line contains the string text (1 le |text| le 10^5) — the text string. - The second line contains the string pattern (1 le |pattern| le 100) — the pattern string. # Output: For each test case, output \\"YES\\" (without the quotes) if the pattern can be formed by deleting some characters from the text. Otherwise, output \\"NO\\" (without the quotes). # Example: Input: ``` 3 abpcplea apple abc abc xyz abc ``` Output: ``` YES YES NO ``` # Explanation: - In the first test case, the pattern \\"apple\\" can be formed from the text \\"abpcplea\\" by deleting characters \'b\', \'c\', and the second \'l\'. - In the second test case, the pattern \\"abc\\" can be formed from the text \\"abc\\" without deleting any characters. - In the third test case, the pattern \\"abc\\" cannot be formed from the text \\"xyz\\", thus the output is \\"NO\\".","solution":"def can_form_pattern(text, pattern): Determines if the pattern can be obtained by deleting some characters from the text without reordering the remaining characters. Args: text (str): The text string. pattern (str): The pattern string. Returns: bool: True if the pattern can be formed, otherwise False. text_index = 0 pattern_index = 0 text_length = len(text) pattern_length = len(pattern) while text_index < text_length and pattern_index < pattern_length: if text[text_index] == pattern[pattern_index]: pattern_index += 1 text_index += 1 return pattern_index == pattern_length def process_test_cases(test_cases): Process multiple test cases to determine if the pattern can be obtained from the text in each case. Args: test_cases (list): A list of tuples, where each tuple contains a text and a pattern. Returns: list: A list of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for text, pattern in test_cases: if can_form_pattern(text, pattern): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a sequence of integers and a series of operations that you can perform on this sequence. Each operation consists of choosing a contiguous subsequence of the current sequence and reversing it. Your task is to determine the minimum number of such operations needed to sort the given sequence in non-decreasing order. # Input The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of elements in the sequence. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the elements of the sequence. # Output Print a single integer — the minimum number of operations required to sort the sequence. # Example Input ``` 5 3 1 2 5 4 ``` Output ``` 2 ``` # Note In the example, one optimal way to sort the sequence is: - Reverse the subsequence from index 2 to index 3 (resulting in the sequence 3, 2, 1, 5, 4) - Reverse the subsequence from index 1 to index 3 (resulting in the sequence 1, 2, 3, 5, 4) - Reverse the subsequence from index 4 to index 5 (resulting in the sequence 1, 2, 3, 4, 5) Thus, the minimum number of operations is 2.","solution":"def minimum_operations_to_sort(n, sequence): Returns the minimum number of operations to sort the sequence. sorted_sequence = sorted(sequence) l, r = 0, n - 1 # Find the first element from the left that is in the wrong place while l < n and sequence[l] == sorted_sequence[l]: l += 1 # Find the first element from the right that is in the wrong place while r >= 0 and sequence[r] == sorted_sequence[r]: r -= 1 # If the whole sequence is already sorted if l >= r: return 0 # Check if the middle part can be reversed to match the sorted sequence if sequence[l:r + 1] == sorted_sequence[l:r + 1][::-1]: return 1 return 2"},{"question":"Fyodor has a grid of size n times m. He wants to place a robot on one of the cells of the grid. The robot can move left, right, up, or down to any adjacent cell, but it cannot move outside the grid. Fyodor wants to know the maximum possible Manhattan distance between any two cells of the grid after placing the robot on the grid. The Manhattan distance between two cells (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|. The first line contains an integer t (1 le t le 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. For each test case, print the maximum possible Manhattan distance between any two cells of the grid. An example: Input: ``` 2 1 1 2 3 ``` Output: ``` 0 4 ``` In the first test case, the grid is 1x1, so the only cell has a distance of 0 with itself. In the second test case, the grid is 2x3. The maximum distance is between cell (1, 1) and cell (2, 3), which is |1-2| + |1-3| = 1 + 2 = 3.","solution":"def max_manhattan_distance(t, test_cases): results = [] for n, m in test_cases: max_distance = (n - 1) + (m - 1) results.append(max_distance) return results"},{"question":"You are given an array of n integers representing the energy levels of n players in a game. The coach wants to form a team of three players such that the absolute difference between the highest and the lowest energy levels in the team is less than or equal to a given threshold k. Calculate the number of possible ways to form such a team. The first line contains two integers n and k (3 ≤ n ≤ 1000, 0 ≤ k ≤ 109) — the number of players and the maximum allowed difference in energy levels respectively. The second line contains n space-separated integers — the energy levels of all the players. These numbers do not exceed 109. Output a single integer — the number of ways to form a team of three players where the difference in the highest and lowest energy levels is less than or equal to k. # Example Input: ``` 5 2 1 2 3 4 5 ``` Output: ``` 3 ``` Explanation: There are three valid teams: (1, 2, 3), (2, 3, 4), and (3, 4, 5) where the difference between the highest and the lowest energy levels is less than or equal to 2.","solution":"def count_valid_teams(n, k, energy_levels): Returns the number of valid teams of three players such that the absolute difference between the highest and the lowest energy levels in the team is <= k. energy_levels.sort() count = 0 for i in range(n - 2): for j in range(i + 1, n - 1): for l in range(j + 1, n): if energy_levels[l] - energy_levels[i] <= k: count += 1 else: break return count"},{"question":"Sara is organizing a series of workshops for her community. Each workshop needs to be held on a specific day to ensure maximum attendance. Help her decide the schedule by selecting a unique day for each workshop such that the workshops are held on consecutive days, but not necessarily in sequential order. Sara will provide you with n workshops. Each workshop i should ideally be held within a time window that spans from day ai to day bi. Your task is to choose a unique day within each workshop\'s respective window such that the resulting schedule uses consecutive days without overlaps. The first line of the input contains a single integer n (1 ≤ n ≤ 3·10^5), denoting the number of workshops. The next n lines each contain two integers ai and bi (1 ≤ ai ≤ bi ≤ 10^9), representing the days between which the i-th workshop can be scheduled. Print a single integer denoting the smallest possible starting day for the sequence of consecutive days. For example, suppose Sara provides the following schedule: Input: 5 3 5 4 7 1 3 2 6 5 8 Output: 3 The optimal way to schedule these workshops, while ensuring they happen on consecutive days, would be: - Workshop 1 on day 3 - Workshop 2 on day 4 - Workshop 3 on day 1 - Workshop 4 on day 2 - Workshop 5 on day 5","solution":"def schedule_workshops(n, workshops): # Sort the workshops by the ending day bi workshops.sort(key=lambda x: x[1]) scheduled_days = set() next_day = 1 for a, b in workshops: # Find the smallest unused day within interval [a, b] day = max(a, next_day) while day in scheduled_days: day += 1 scheduled_days.add(day) # Set the next starting day to be the one after currently scheduled day. next_day = day + 1 # Smallest possible starting day is the minimum scheduled day return min(scheduled_days) # Example usage: # n = 5 # workshops = [(3, 5), (4, 7), (1, 3), (2, 6), (5, 8)] # print(schedule_workshops(n, workshops)) # Output: 1"},{"question":"You are given a list of words and a set of forbidden suffixes. You need to form the longest sequence of words such that no word in the sequence ends with one of the forbidden suffixes. The first line contains two integers n and m (1 ≤ n, m ≤ 5000) indicating the number of words in the list and the number of forbidden suffixes, respectively. The second line contains n space-separated strings, each representing a word (each word contains only lowercase English letters and has a length between 1 and 100). The third line contains m space-separated strings, each representing a forbidden suffix (each suffix contains only lowercase English letters and has a length between 1 and 100). Print the maximum length of the sequence of words that can be formed under the given constraints. Example: Input: ``` 5 2 apple orange banana appeal grape le ple ``` Output: ``` 4 ```","solution":"def longest_sequence_of_words(words, forbidden_suffixes): This function receives a list of words and a list of forbidden suffixes, and returns the maximum length of the sequence of words such that no word in the sequence ends with one of the forbidden suffixes. :param words: List of words to form sequence from. :param forbidden_suffixes: List of forbidden suffixes. :return: Integer representing the maximum length of the sequence of words. def ends_with_suffix(word, suffixes): for suffix in suffixes: if word.endswith(suffix): return True return False count = 0 for word in words: if not ends_with_suffix(word, forbidden_suffixes): count += 1 return count # Example words = [\\"apple\\", \\"orange\\", \\"banana\\", \\"appeal\\", \\"grape\\"] forbidden_suffixes = [\\"le\\", \\"ple\\"] print(longest_sequence_of_words(words, forbidden_suffixes)) # Output: 4"},{"question":"There is a grid of size n times n filled with zeros and ones. A contiguous block of cells forms a cluster if all the cells contain ones, and any two cells in the block are adjacent (either horizontally or vertically). You need to count the number of such clusters in the grid. The grid is represented as a two-dimensional list of integers, where each element is either 0 or 1. Your task is to write a function: ```python def count_clusters(grid: List[List[int]]) -> int: ``` # Input - The function takes a single parameter, `grid`, which is a list of lists of integers. Each integer is either 0 or 1. - The size of the grid is n times n where 1 leq n leq 1000. # Output - The function should return an integer that represents the number of clusters of ones in the grid. # Example 1. **Input:** ```python grid = [ [1, 1, 0, 0], [0, 1, 0, 1], [1, 0, 0, 1], [0, 0, 1, 0] ] ``` **Output:** ```python 4 ``` 2. **Input:** ```python grid = [ [1, 0, 0], [0, 1, 0], [0, 0, 1] ] ``` **Output:** ```python 3 ``` # Note In the first example: - One cluster: [(0,0), (0,1), (1,1)] - Second cluster: [(1,3), (2,3)] - Third cluster: [(2,0)] - Fourth cluster: [(3,2)] In the second example: - Each 1 is in its own cluster.","solution":"from typing import List def count_clusters(grid: List[List[int]]) -> int: def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= n or grid[x][y] == 0: return grid[x][y] = 0 # Mark as visited # Explore all adjacent cells dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) n = len(grid) clusters = 0 for i in range(n): for j in range(n): if grid[i][j] == 1: # Found an unvisited cluster clusters += 1 dfs(i, j) # Use DFS to mark all cells in this cluster return clusters"},{"question":"You are working with a network of routers in a large data center. The network consists of `n` routers numbered from 1 to `n`. Each router has a reliability score represented by an integer. The reliability score determines how dependable the router is in forwarding data packets. The network can be represented as a directed graph, where each node is a router and an edge from router `i` to router `j` means that router `i` can send packets to router `j`. To improve the efficiency of the network, you want to ensure that data packets can be forwarded through the most reliable paths. Therefore, the cost of forwarding a packet from router `i` to router `j` is defined as the absolute difference in reliability scores between router `i` and router `j`. Additionally, you want to find the optimal path from the starting router (router 1) to the destination router (router n) which minimizes this forwarding cost. Given the number of routers `n`, a list of `reliability_scores` where `reliability_scores[i]` represents the reliability score of router `i+1`, and a list of `connections` where each tuple `(a, b)` means that there is a direct connection from router `a` to router `b`, write a program to find the minimum total cost to forward a packet from router 1 to router `n`. # Input - The first line contains two integers `n` and `m` (`2 ≤ n ≤ 10^5`, `1 ≤ m ≤ 2 * 10^5`) — the number of routers and the number of direct connections, respectively. - The second line contains `n` integers where the `i-th` integer is the reliability score of the router `i+1`. - Each of the next `m` lines contains two integers `a` and `b` (`1 ≤ a, b ≤ n`) — indicating a direct connection from router `a` to router `b`. # Output - Print a single integer: the minimum total cost to forward a packet from router 1 to router `n`. # Example Input ``` 5 6 7 3 5 2 6 1 2 1 3 2 4 3 4 4 5 3 5 ``` Output ``` 3 ``` # Explanation In this example, the reliability scores are [7, 3, 5, 2, 6]. The direct connections are: 1. 1 → 2 2. 1 → 3 3. 2 → 4 4. 3 → 4 5. 4 → 5 6. 3 → 5 One possible minimal cost path is: 1 → 3 → 5. The cost for this path is `|7-5| + |5-6| = 2 + 1 = 3`.","solution":"import heapq def min_cost_to_forward_packet(n, reliability_scores, connections): # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for a, b in connections: graph[a].append(b) # Initialize distances to inf, except the start node inf = float(\'inf\') distances = [inf] * (n + 1) distances[1] = 0 # Priority queue to process the nodes pq = [(0, 1)] # (cost, node) while pq: current_cost, current_node = heapq.heappop(pq) # If the current node is the destination, return the cost if current_node == 5: return current_cost for neighbor in graph[current_node]: cost = abs(reliability_scores[current_node - 1] - reliability_scores[neighbor - 1]) new_cost = current_cost + cost if new_cost < distances[neighbor]: distances[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return distances[n] # Example usage n = 5 m = 6 reliability_scores = [7, 3, 5, 2, 6] connections = [(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (3, 5)] print(min_cost_to_forward_packet(n, reliability_scores, connections)) # Output: 3"},{"question":"Given an integer array nums and an integer k, return the maximum sum of a non-empty subarray of size k or less. A subarray is a contiguous subsequence of the array. # Example 1: **Input:** nums = [2, 1, 5, 3, 4], k = 3 **Output:** 12 **Explanation:** The subarrays of size 3 or less are [2], [1], [5], [3], [4], [2, 1], [1, 5], [5, 3], [3, 4], [2, 1, 5], [1, 5, 3], [5, 3, 4]. The maximum sum is obtained from subarray [2, 1, 5, 3] with a sum of 2+1+5+3 = 11. # Example 2: **Input:** nums = [-1, -2, -3, -4], k = 2 **Output:** -1 **Explanation:** The subarrays of size 2 or less are [-1], [-2], [-3], [-4], [-1, -2], [-2, -3], [-3, -4]. The maximum sum is obtained from subarray [-1] with a sum of -1. # Constraints: - 1 <= nums.length <= 10^5 - -10^4 <= nums[i] <= 10^4 - 1 <= k <= nums.length","solution":"def max_subarray_sum(nums, k): Returns the maximum sum of a non-empty subarray of size k or less. n = len(nums) # Base case if n == 0: return 0 # Initialize the result to a very small number max_sum = float(\'-inf\') # Iterate over all possible subarray sizes from 1 to k for size in range(1, k + 1): # Calculate sum for initial subarray of the current size current_sum = sum(nums[:size]) # Update maximum sum max_sum = max(max_sum, current_sum) # Slide the window of the current size across the array for i in range(size, n): # Slide the window to the right current_sum += nums[i] - nums[i - size] # Update maximum sum max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a grid of size n x n, you are required to paint some cells of the grid in such a way that the number of painted cells in each row and each column is even. The grid is initially empty and all cells are unpainted. Your task is to determine whether it is possible to paint the grid satisfying the given condition. If it is possible, print \\"YES\\", followed by the grid in its painted state. If it\'s not possible, print \\"NO\\". # Input: - The input consists of a single integer n (1 ≤ n ≤ 1000). # Output: - If it is possible to paint the grid under the given constraints, output \\"YES\\" on the first line followed by n lines, each containing n characters (\'1\' for a painted cell and \'0\' for an unpainted cell). - If it is not possible to paint the grid under the given constraints, output \\"NO\\". # Example 1: Input: 4 Output: YES 1010 0101 1010 0101 # Example 2: Input: 3 Output: NO # Note: In the first example, each row and column has an even number of \'1\'s (painted cells). In the second example, it is impossible to paint the grid in such a way that each row and each column has an even number of painted cells (1\'s).","solution":"def paint_grid(n): Determines whether it is possible to paint the grid satisfying the given condition of having an even number of painted cells in each row and each column. Returns \\"YES\\" and the grid if possible, \\"NO\\" otherwise. if n % 2 != 0: return [\\"NO\\"] grid = [] for i in range(n): row = [] for j in range(n): if (i + j) % 2 == 0: row.append(\'1\') else: row.append(\'0\') grid.append(\\"\\".join(row)) return [\\"YES\\"] + grid"},{"question":"Given an array of positive integers and a target integer, write a function to find the length of the shortest contiguous subarray whose sum of elements is greater than or equal to the target integer. If no such subarray exists, return 0. The function should take two parameters: an array of positive integers and the target integer. Example 1: Input: [2, 3, 1, 2, 4, 3], target = 7 Output: 2 Explanation: The subarray [4, 3] has the minimal length under the problem constraint. Example 2: Input: [1, 4, 4], target = 4 Output: 1 Explanation: The subarray [4] is the shortest. Example 3: Input: [1, 1, 1, 1, 1, 1, 1, 1], target = 11 Output: 0 Explanation: There is no subarray with sum >= 11. Note: 1. The function should handle cases where the input array length can go up to 10^5. 2. You are expected to implement the function with a time complexity of O(n). Function signature: `def min_subarray_len(nums: List[int], target: int) -> int`","solution":"from typing import List def min_subarray_len(nums: List[int], target: int) -> int: n = len(nums) left = 0 total = 0 min_len = float(\'inf\') for right in range(n): total += nums[right] while total >= target: min_len = min(min_len, right - left + 1) total -= nums[left] left += 1 return 0 if min_len == float(\'inf\') else min_len"},{"question":"You are given a string consisting of lowercase letters and you need to perform a series of operations on this string. The operations are of three types: - Insert a character at a specific position within the string. - Delete the character at a specific position within the string. - Query the frequency of a particular substring within the string. The string is initially empty and you need to process `n` operations, where each operation is specified in the format described below. The first line of the input contains an integer `n` (1 ≤ n ≤ 100,000) — the number of operations to be performed. Each of the next `n` lines contains an operation, which can be one of the following: - `+ i c` — Insert character `c` at position `i` (0 ≤ i ≤ length of the string, and `c` is a lowercase English letter). - `- i` — Delete the character at position `i` (0 ≤ i < length of the string). - `? s` — Query the number of times the substring `s` appears in the current string (1 ≤ length of `s` ≤ length of the string, and `s` consists of lowercase English letters). The operations are given in the order they should be applied. It is guaranteed that delete operations (`- i`) will only be specified if there is a character at position `i` to delete. For each query operation (`? s`), print the number of times the substring `s` appears in the string as it is at that point. **Example:** Input: ``` 5 + 0 a + 1 b + 2 c ? ab - 1 ``` Output: ``` 1 0 ``` In this example, the sequence of operations results in the following transformations of the string: 1. Insert \'a\' at position 0: \\"a\\" 2. Insert \'b\' at position 1: \\"ab\\" 3. Insert \'c\' at position 2: \\"abc\\" 4. Query the frequency of substring \\"ab\\": as the string is \\"abc\\" at this point, the substring \\"ab\\" appears once. 5. Delete the character at position 1: the resulting string is \\"ac\\".","solution":"def process_operations(operations): Process a series of operations on an initially empty string. Args: operations : list of str : List of operations to be performed. Returns: list of int : List of results for the query operations. s = [] results = [] for operation in operations: if operation[0] == \'+\': _, i, c = operation.split() i = int(i) s.insert(i, c) elif operation[0] == \'-\': _, i = operation.split() i = int(i) s.pop(i) elif operation[0] == \'?\': _, sub = operation.split() current_str = \'\'.join(s) results.append(current_str.count(sub)) return results"},{"question":"Given an integer n, you need to construct a Pascal’s triangle of height n. Pascal\'s triangle is a triangular array of binomial coefficients. The rows of Pascal\'s triangle are conventionally enumerated starting with row r = 0 at the top. For example, the Pascal\'s triangle up to height 5 looks like this: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 ``` Write a function `generatePascalsTriangle(n)` that generates Pascal’s triangle of height n and prints each row in the form of a newline-separated string where the numbers in each row are separated by a single space. # Input - An integer n (1 ≤ n ≤ 30), representing the height of Pascal’s triangle to be generated. # Output - A newline-separated string, where each line represents a row in Pascals’ triangle and the numbers are separated by a single space. # Example ```python generatePascalsTriangle(5) ``` Output: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ```","solution":"def generatePascalsTriangle(n): Generates Pascal’s triangle of height n and returns it as a newline-separated string where numbers in each row are separated by a single space. if n <= 0: return \\"\\" result = [] for i in range(n): row = [1] * (i + 1) for j in range(1, i): row[j] = result[i-1][j-1] + result[i-1][j] result.append(row) return \\"n\\".join(\\" \\".join(map(str, row)) for row in result) # Example usage: # print(generatePascalsTriangle(5))"},{"question":"You are working on a text editor that allows for basic text operations. The editor supports N operations of the following types: 1. Insert a string s at the end of the document. 2. Delete the last k characters from the document. 3. Print the k-th character of the document. Given the number of operations N (1 ≤ N ≤ 100000), and a series of operations, perform and output results of any \\"Print\\" operations. The operations are provided in the following format: - To insert a string, the format is: `1 s`, where s (1 ≤ |s| ≤ 100) is the string to be inserted. - To delete characters, the format is: `2 k`, where k (1 ≤ k ≤ length of current document) is the number of characters to delete. - To print a character, the format is: `3 k`, where k (1 ≤ k ≤ length of current document) is the position of the character to print. Print the output of each \\"Print\\" operation on a new line. Example: Input: ``` 7 1 abc 1 def 3 3 2 3 3 3 1 ghi 3 6 ``` Output: ``` c c i ``` Explanation: 1. After the first operation, the document becomes \\"abc\\". 2. After the second operation, the document becomes \\"abcdef\\". 3. The third operation prints the 3rd character, which is \\"c\\". 4. The fourth operation deletes the last 3 characters, so the document becomes \\"abc\\". 5. The fifth operation prints the 3rd character, which is still \\"c\\". 6. The sixth operation appends \\"ghi\\", so the document becomes \\"abcghi\\". 7. The seventh operation prints the 6th character, which is \\"i\\".","solution":"def text_editor(operations): document = [] result = [] for operation in operations: op = operation.split() if op[0] == \'1\': document.append(op[1]) elif op[0] == \'2\': k = int(op[1]) document[-1] = document[-1][:-k] elif op[0] == \'3\': k = int(op[1]) doc_str = \'\'.join(document) result.append(doc_str[k - 1]) return result"},{"question":"You are managing a warehouse and there are n stacks of boxes. Each stack i has an initial height of h_i boxes. Your goal is to make all the stacks equal in height by adding boxes to them. In one move, you can choose a stack i (with current height h_i) and add a certain number of boxes to it. The number of boxes to be added must be a multiple of k (k is given). You want to determine the minimum number of moves required to make all stacks of equal height. If it is impossible, return -1. The first line of the input contains two integers n and k (1 le n le 100, 1 le k le 10^5) — the number of stacks and the required multiple of boxes to add to each stack, respectively. The second line of the input contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^5), where h_i is the initial height of the i-th stack. Print one integer — the minimum number of moves required to make all stacks equal in height, or -1 if it is impossible. Example Input: ``` 4 3 6 9 15 12 ``` Example Output: ``` 6 ``` Explanation: - You can make all stacks equal to height 15 by adding: - 9 boxes to stack 1 (two moves of adding 3 boxes) - 6 boxes to stack 2 (two moves of adding 3 boxes) - 3 boxes to stack 4 (one move of adding 3 boxes)","solution":"def minimum_moves_to_equal_stacks(n, k, heights): Determines the minimum number of moves required to make all stack heights equal by adding multiples of k boxes to any stack. If it is impossible, returns -1. :param n: Number of stacks :param k: The required multiple of boxes to add in each move :param heights: List of initial heights of the stacks :return: Minimum number of moves or -1 if impossible # Find the maximum height as the target height for all stacks max_height = max(heights) min_moves = 0 for height in heights: # Check if the difference between max_height and current height can be bridged by adding multiples of k if (max_height - height) % k != 0: return -1 else: min_moves += (max_height - height) // k return min_moves"},{"question":"You are given a string s and an integer k. You need to find the maximum number of unique substrings of length k that can be formed from the string s. A substring is defined as a contiguous sequence of characters within a string. If the length of s is less than k, the output should be 0. The first line of input contains a string s (1 leq |s| leq 10^6): the given string. The second line contains one integer k (1 leq k leq 10^6): the length of the substrings you need to consider. Print a single integer, the maximum number of unique substrings of length k that can be formed from the string s.","solution":"def max_unique_substrings(s, k): Returns the maximum number of unique substrings of length k from the given string s. if len(s) < k: return 0 substr_set = set() for i in range(len(s) - k + 1): substr_set.add(s[i:i+k]) return len(substr_set)"},{"question":"You are given a string s of length n consisting of lowercase Latin letters. In one move, you can choose a non-empty substring of s and reverse it. Your goal is to determine the minimum number of moves required to transform s into a palindrome. If it is impossible to transform s into a palindrome, return -1. A string is called a palindrome if it reads the same backward as forward. # Input The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 10^5) — the string to be transformed. It is guaranteed that the total length of strings over all test cases does not exceed 10^6. # Output For each test case, print a single integer — the minimum number of moves needed to transform the given string into a palindrome, or -1 if it is impossible. # Example Input ``` 3 aba abca abc ``` Output ``` 0 1 -1 ``` # Explanation In the first test case \\"aba\\" is already a palindrome, so no moves are needed. In the second test case \\"abca\\", we can reverse the substring \\"bca\\" to make it \\"acb\\" and then reverse \\"acb\\" to form \\"a\\". As a result, we only need one move to make it a palindrome. In the third test case \\"abc\\", it is impossible to transform \\"abc\\" into a palindrome by any number of moves.","solution":"def min_moves_to_palindrome(s): Returns the minimum number of moves required to transform string s into a palindrome. If it is impossible, return -1. def is_palindrome(s): return s == s[::-1] n = len(s) if is_palindrome(s): return 0 left = 0 right = n - 1 while left < right: if s[left] != s[right]: return 1 if is_palindrome(s[left:right]) or is_palindrome(s[left + 1:right + 1]) else -1 left += 1 right -= 1 return 0 def process_test_cases(test_cases): results = [] for s in test_cases: results.append(min_moves_to_palindrome(s)) return results"},{"question":"In a small town, there are several circular tracks where people come to race their cars. Each track is composed of several circular segments connected end-to-end in a cycle. Your task is to determine the minimum total length of the track segments that need to be laid down to ensure that there are no unconnected segments on any of the tracks. The input consists of two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 100,000) — the total number of segments and the number of existing connections between the segments. The next m lines describe the existing connections. Each connection is given as two integers u and v (1 ≤ u, v ≤ n) — indicating there\'s an existing segment directly connecting segments u and v. The output should be a single integer: the minimum total length of new segments that need to be added to ensure every segment is connected in at least one cycle. A segment alone is considered a cycle of length 0. If all segments are already part of cycles, the total length is also considered as 0. For example, given the input: 3 2 1 2 2 3 The correct output is: 2 Explanation: To connect segment 3 back to segment 1, we need a new segment of length 1. Segment lengths are assumed to be all 1 unit by default. Thus, the total is 1 (for connecting 3 to 1) + 1 (for the existing connections between 1-2 and 2-3) = 2.","solution":"def find_minimum_segments_needed(n, m, connections): if m == 0: # if no connections at all return n - 1 from collections import defaultdict, deque def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components_count = 0 for node in range(1, n + 1): if not visited[node]: bfs(node) components_count += 1 return components_count - 1"},{"question":"Alice is organizing a themed costume party. She has invited several friends and wants to hand out unique masks, each with a unique ID number, to her guests. However, the mask IDs she has might be missing some numbers in between or might not align with the number of guests. You are tasked to help Alice determine if she can evenly distribute the masks such that each guest gets a unique mask ID without missing any numbers in between. You are given an integer array representing the mask IDs Alice currently has, and an integer representing the number of guests invited to the party. Your task is to check whether Alice can distribute the masks evenly such that every guest gets one unique mask ID from a continuous range. Write a function that takes two arguments: - A list of integers representing the mask IDs Alice has. - An integer representing the number of guests invited to the party. The function should return \\"Possible\\" if the masks can be distributed evenly in a continuous range without any gaps; otherwise, return \\"Impossible\\". # Example ```python def can_distribute_masks(mask_ids, num_guests): pass # Example usage: print(can_distribute_masks([1, 2, 3, 4, 5], 5)) # Output: \\"Possible\\" print(can_distribute_masks([1, 3, 4, 5], 4)) # Output: \\"Impossible\\" print(can_distribute_masks([7, 8, 10, 11], 4)) # Output: \\"Impossible\\" print(can_distribute_masks([9, 10, 11, 12], 4)) # Output: \\"Possible\\" ``` # Constraints - The length of the `mask_ids` list is between 1 and 10000. - The integer `num_guests` is between 1 and 10000. - Each element in the `mask_ids` list is an integer between 1 and 10000.","solution":"def can_distribute_masks(mask_ids, num_guests): Check if the given mask IDs can be distributed evenly to the number of guests such that each guest gets one unique mask ID from a continuous range. Parameters: mask_ids (list of int): List of mask IDs num_guests (int): Number of guests Returns: str: \\"Possible\\" if masks can be distributed evenly, otherwise \\"Impossible\\" if len(mask_ids) != num_guests: return \\"Impossible\\" mask_ids_sorted = sorted(mask_ids) for i in range(1, len(mask_ids_sorted)): if mask_ids_sorted[i] != mask_ids_sorted[i - 1] + 1: return \\"Impossible\\" return \\"Possible\\""},{"question":"You are given a sequence of integers representing the heights of blocks in a row. Each block of the row has a unique height. The height of the ith block is given by the integer h_i. You need to perform q operations, where each operation is one of the following: 1. Query the maximum height of any block within a specified range [L, R] (inclusive). 2. Update the height of a specific block to a new height. For each query operation, output the result as a single integer, representing the maximum height in the range. For each update operation, adjust the height of the block as specified. The first line contains two integers n, q (1 ≤ n, q ≤ 100000) – the number of blocks and the number of operations, respectively. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) – the heights of the blocks. Each of the next q lines describes an operation: - If the operation is a query, it is represented as \\"1 L R\\" (1 ≤ L ≤ R ≤ n), meaning that you need to output the maximum height in the range [L, R]. - If the operation is an update, it is represented as \\"2 i h\\" (1 ≤ i ≤ n; 1 ≤ h ≤ 10^9), meaning that you need to update the height of the ith block to h. Output the result of each query operation in a new line. Example: Input: 6 5 5 3 8 6 7 2 1 1 3 1 4 6 2 3 4 1 1 3 1 3 5 Output: 8 7 5 7 Explanation: - For the first query, the maximum height in the range [1, 3] is 8. - For the second query, the maximum height in the range [4, 6] is 7. - After the update operation, the height of the third block becomes 4. - For the third query, the maximum height in the range [1, 3] is now 5. - For the fourth query, the maximum height in the range [3, 5] is 7.","solution":"class BlockHeights: def __init__(self, heights): self.heights = heights def max_in_range(self, L, R): Returns the maximum height in the range [L, R]. return max(self.heights[L-1:R]) def update_height(self, i, h): Updates the height of the ith block to h. self.heights[i-1] = h def process_operations(num_blocks, num_operations, heights, operations): block_heights = BlockHeights(heights) results = [] for operation in operations: if operation[0] == 1: _, L, R = operation max_height = block_heights.max_in_range(L, R) results.append(max_height) elif operation[0] == 2: _, i, h = operation block_heights.update_height(i, h) return results"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Your task is to determine the number of connected components in the graph. A connected component is a maximal set of nodes such that there exists a path between any two nodes in this set. # Input Format - The first line contains two integers, `n` and `m` — the number of nodes and edges respectively (`1 ≤ n, m ≤ 10^5`). - Each of the next `m` lines contains two integers `u` and `v` (`1 ≤ u, v ≤ n`), representing an edge between nodes `u` and `v`. # Output Format - Print a single integer — the number of connected components in the graph. # Example Input ``` 6 3 1 2 2 3 4 5 ``` Output ``` 3 ``` # Explanation In the given example, the graph has three connected components: - The component containing nodes {1, 2, 3} - The component containing nodes {4, 5} - The component containing node {6} # Notes - The graph may contain self-loops and multiple edges between the same pair of nodes. - For each test case, the graph is guaranteed to be connected.","solution":"def find_connected_components(n, m, edges): from collections import defaultdict, deque def bfs(node, visited, graph): queue = deque([node]) while queue: current = queue.popleft() for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) component_count = 0 for node in range(1, n + 1): if not visited[node]: visited[node] = True component_count += 1 bfs(node, visited, graph) return component_count"},{"question":"You are given an integer n which represents the length of a series of integers. Your task is to determine the minimum number of adjacent swaps needed to arrange the series in non-decreasing order using a bubble sort algorithm. The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains one integer n (1 le n le 1000) — the length of the series. - The second line contains n integers separated by space — the elements of the series. For each test case, print one integer — the minimum number of adjacent swaps needed to sort the series in non-decreasing order. In the first example, the series is [4, 3, 1], and the array needs to be sorted in 3 swaps: (Swap 4 and 3) -> (Swap 4 and 1) -> (Swap 3 and 1) In the second example, the series is [3, 2, 1], and the array needs to be sorted in 3 swaps: (Swap 3 and 2) -> (Swap 3 and 1) -> (Swap 2 and 1)","solution":"def minimum_adjacent_swaps_to_sort(t, test_cases): Determines the minimum number of adjacent swaps needed to arrange the series in non-decreasing order using bubble sort algorithm. :param t: integer, number of test cases :param test_cases: list of tuples, each with (n, series_list) :return: list of integers, number of swaps for each test case results = [] for n, series in test_cases: swaps = 0 for i in range(n): for j in range(0, n-i-1): if series[j] > series[j+1]: series[j], series[j+1] = series[j+1], series[j] swaps += 1 results.append(swaps) return results"},{"question":"Given a string `s` consisting of lowercase English letters, a mystery function `func` is defined as follows: 1. Let `char_freq` be a dictionary where the keys are characters and the values are their corresponding frequencies in the string `s`. 2. Initialize an integer `result` to 0. 3. For each unique character `c` in `s`, if the number of occurrences of `c` is even, increment `result` by the frequency of `c`. 4. Otherwise, increment `result` by the frequency of `c` minus 1. 5. Finally, if there is at least one character with an odd frequency, increment `result` by 1. Your task is to write a function `mystery_func(s: str) -> int` that calculates the value of `result` for the given string `s`. # Input: - A single string `s` (1 ≤ |s| ≤ 10^5). # Output: - A single integer representing the value of `result`. # Example: Input: ``` abba ``` Output: ``` 4 ``` Input: ``` abacc ``` Output: ``` 5 ```","solution":"def mystery_func(s: str) -> int: char_freq = {} for char in s: if char in char_freq: char_freq[char] += 1 else: char_freq[char] = 1 result = 0 odd_frequency_present = False for freq in char_freq.values(): if freq % 2 == 0: result += freq else: result += freq - 1 odd_frequency_present = True if odd_frequency_present: result += 1 return result"},{"question":"A binary search tree (BST) is a type of data structure that maintains elements in a sorted manner. In a BST, each node has at most two children, referred to as the left and right child. For a node with value n, its left child contains only values less than n and its right child only values greater than n. The properties of BSTs make them useful for efficient data storage and retrieval. Given the preorder traversal of a BST, you are required to rebuild the binary search tree and then return its inorder traversal. Preorder traversal of a tree is a way of visiting all the nodes where you always visit the root node first, then recursively visit the left subtree and finally the right subtree. Inorder traversal visits the left subtree first, then the root node and finally the right subtree. You need to implement the following function: ```python def bst_inorder(preorder: List[int]) -> List[int]: pass ``` # Input - A single parameter (preorder) which is a list of integers corresponding to the preorder traversal of the BST. The length of the list will be between 1 and 10^4, inclusive, and contains unique values. # Output - Return a list of integers that represents the inorder traversal of the reconstructed BST. # Example Input 1: ```python preorder = [8, 5, 1, 7, 10, 12] ``` Output 1: ```python [1, 5, 7, 8, 10, 12] ``` Input 2: ```python preorder = [10, 5, 1, 7, 40, 50] ``` Output 2: ```python [1, 5, 7, 10, 40, 50] ``` # Constraints - The values in the list are unique. - No duplicate values are present in the input list. - The length of the list is at least 1 and at most 10^4.","solution":"from typing import List class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def bst_inorder(preorder: List[int]) -> List[int]: def build_bst(preorder, start, end): if start > end: return None root = TreeNode(preorder[start]) split_point = start + 1 while split_point <= end and preorder[split_point] < preorder[start]: split_point += 1 root.left = build_bst(preorder, start + 1, split_point - 1) root.right = build_bst(preorder, split_point, end) return root def inorder_traversal(root): if root is None: return [] return inorder_traversal(root.left) + [root.val] + inorder_traversal(root.right) root = build_bst(preorder, 0, len(preorder) - 1) return inorder_traversal(root)"},{"question":"You are given a list of integers representing stock prices on different days. You need to find the maximum profit that can be made by buying one stock on one day and selling it on another day that comes after the buying day. If no profit can be made, return 0. The first line of the input contains an integer n (1 ≤ n ≤ 100), indicating the number of days. The second line contains n integers, where each integer represents the stock price on that day. Output the maximum profit that can be made. If no profit can be made, output 0.","solution":"def max_profit(prices): Calculate the maximum profit that can be made by buying and selling the stock once. If no profit can be made, return 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: potential_profit = price - min_price if potential_profit > max_profit: max_profit = potential_profit return max_profit"},{"question":"Dr. Labdacus is an explorer who recently discovered a mysterious island with a peculiar tribe. The tribe uses a unique alphabet consisting of lowercase and uppercase English letters. The special thing about their language is that every word must be written in a way that no two consecutive letters are the same. Dr. Labdacus has a list of words he heard from the tribe. He needs your help to determine if each word follows the tribe\'s writing rule (no two consecutive letters are the same). If a word violates this rule, he also wants to know the minimum number of characters he must remove to make the word follow the rule. Write a program that reads a list of words and provides the following for each: 1. \\"YES\\" if the word follows the rule. 2. \\"NO\\" and the minimum number of characters that need to be removed if it does not follow the rule. The first line of input contains an integer t (1 ≤ t ≤ 1000), the number of words. Each of the next t lines contains one word. Each word consists of at least 1 and at most 100 characters, all being either lowercase or uppercase English letters. For each word, print either: - \\"YES\\" if the word follows the rule. - \\"NO x\\", where x is the minimum number of characters to remove, if the word does not follow the rule. For example, given the input: ``` 5 aabb abcd aa AAbb aAbBa ``` The expected output would be: ``` NO 2 YES NO 1 NO 2 YES ```","solution":"def check_word(word): Checks if a word follows the tribe\'s writing rule (no two consecutive letters are the same). Returns \\"YES\\" or \\"NO x\\" where x is the minimum number of characters to remove. n = len(word) count_removals = 0 for i in range(1, n): if word[i] == word[i-1]: count_removals += 1 if count_removals == 0: return \\"YES\\" else: return f\\"NO {count_removals}\\" def check_words(words): Applies the check_word function to a list of words. results = [] for word in words: results.append(check_word(word)) return results"},{"question":"You are tasked with creating a simplified drawing algorithm. Given a 2D grid of size n x m, you must implement a function to generate a specific pattern. The grid consists of \'.\' characters which represent empty cells. You will be provided with coordinates of several rectangles on this grid. Each rectangle is defined by its top-left and bottom-right corners. You need to fill these rectangles with the character \'#\', to indicate these cells are now occupied. Note that the rectangles may overlap, and overlapping cells should be filled with \'#\'. Your function should then output the final grid with all specified rectangles filled. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of rows and columns of the grid, respectively. The second line contains a single integer k (1 ≤ k ≤ 100) representing the number of rectangles. The next k lines each contain four integers, x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m), representing the top-left and bottom-right corners of a rectangle. Output the final grid as n lines, with each line containing m characters. Example: Input: 5 5 2 1 1 3 3 2 2 4 4 Output: . #.. ... ..#.. ..... Explanation: The first rectangle spans from (1,1) to (3,3) and changes those cells to \'#\'. The second rectangle spans from (2,2) to (4,4) and changes those cells to \'#\', overlapping the previous changes as needed.","solution":"def fill_rectangles(n, m, k, rectangles): # Initialize a 2D grid with \'.\' grid = [[\'.\' for _ in range(m)] for _ in range(n)] # Process each rectangle for x1, y1, x2, y2 in rectangles: for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] = \'#\' # Convert the grid to the required output format return [\'\'.join(row) for row in grid]"},{"question":"You are given a string consisting of lowercase English letters. Your task is to transform this string into a \\"beautiful string.\\" A \\"beautiful string\\" is one where no two adjacent characters are the same. You can insert any number of characters (including duplicates of those already present) anywhere in the string, but you cannot remove or swap any existing characters. Write a program to determine the minimum number of characters that need to be inserted to make the string beautiful. # Input The input consists of multiple test cases. The first line contains an integer t (1 le t le 100), the number of test cases. The following t lines each contain a single string s (1 le |s| le 100), the string that needs to be transformed. # Output For each test case, output a single integer: the minimum number of characters that need to be inserted to transform the given string into a beautiful string. # Examples Input ``` 3 abac bbbb aabba ``` Output ``` 0 3 2 ``` Explanation - For the string \\"abac\\", all adjacent characters are different, so no insertions are needed. - For the string \\"bbbb\\", insert three new characters between the adjacent \'b\'s. One possible transformation is \\"bxbxbxb\\", so 3 insertions are needed. - For the string \\"aabba\\", insert one character between the two \'a\'s and one character between the two \'b\'s. One possible transformation is \\"abababa\\", so 2 insertions are needed. # Constraints - The length of each string s (1 le |s| le 100). - The number of test cases t (1 le t le 100).","solution":"def minimum_insertions_to_beautiful_string(s): Returns the minimum number of insertions needed to make the given string beautiful. insertions = 0 for i in range(len(s) - 1): if s[i] == s[i + 1]: insertions += 1 return insertions def process_test_cases(test_cases): results = [] for s in test_cases: results.append(minimum_insertions_to_beautiful_string(s)) return results"},{"question":"You are given a list of integers representing the heights of buildings along a street. You need to determine the minimum number of jumps needed to get from the first building to the last building, following these rules: - You can jump forward to any building within a range defined by the height of the current building you are on. - The height of a building indicates the maximum number of buildings forward you can jump from that building. - If it is not possible to reach the last building, return -1. Write a function `min_jumps(buildings: List[int]) -> int` which takes a list of integers `buildings` and returns the minimum number of jumps needed to get from the first to the last building, or `-1` if it is not possible. # Input: - A list of integers `buildings` where `1 <= len(buildings) <= 10^5` and `1 <= buildings[i] <= 10^5`. # Output: - An integer representing the minimum number of jumps required to reach the last building, or `-1` if it is not possible. # Example: ```python assert min_jumps([6, 2, 3, 1, 1, 4]) == 1 # Can jump from the first building directly to the last building assert min_jumps([1, 3, 1, 1, 1, 1, 1]) == 4 # Multiple jumps needed assert min_jumps([1, 2, 1, 0, 4]) == -1 # Impossible to reach the last building ``` # Note: - The first building is indexed at `0`, and you always start from there. - Make sure to handle the edge case where the list contains only one building.","solution":"from typing import List def min_jumps(buildings: List[int]) -> int: if not buildings or len(buildings) == 1: return 0 n = len(buildings) if buildings[0] == 0: return -1 jumps = 0 cur_end = 0 farthest = 0 for i in range(n): if i > farthest: return -1 farthest = max(farthest, i + buildings[i]) if i == cur_end: jumps += 1 cur_end = farthest if cur_end >= n - 1: return jumps return -1"},{"question":"You are given an integer array nums. A contiguous subarray is considered \\"distinct\\" if all the elements within it are unique. Your task is to find the number of distinct contiguous subarrays in nums. The first line contains a single integer n (1 ≤ n ≤ 100000) — the length of the array nums. The second line contains n integers nums1, nums2, ..., numsn (1 ≤ numsi ≤ 100000) — the elements of the array nums. Output the number of distinct contiguous subarrays. For example, given the input: 5 1 2 1 3 2 The output should be: 11 In this example, the distinct contiguous subarrays are [1], [2], [1], [3], [2], [1, 2], [2, 1], [1, 3], [3, 2], [1, 2, 1] and [2, 1, 3].","solution":"def count_distinct_subarrays(nums): Returns the number of distinct contiguous subarrays in nums. n = len(nums) if n == 0: return 0 seen = set() left = 0 result = 0 for right in range(n): while nums[right] in seen: seen.remove(nums[left]) left += 1 seen.add(nums[right]) result += right - left + 1 return result"},{"question":"Given a grid of size `n x m` representing a map, each cell in the grid can either be empty (represented by \'.\') or contain a tree (represented by \'T\'). You are to determine the maximum size of a square plot that you can cut out from the grid such that there are no trees in the square plot. Write a function `maxSquarePlot(grid: List[List[str]]) -> int` that takes a 2D list `grid` of dimension `n * m` as input and returns the side length of the largest square plot with no trees. **Input:** - The first line contains two space-separated integers, `n` and `m` (1 ≤ n, m ≤ 1000). - The next `n` lines contain `m` characters each, representing the grid. **Output:** - Output the side length of the largest square plot with no trees. **Example:** ``` Input: 4 5 ..... ..T.. ..... ..... Output: 3 ``` In the above example, the largest square plot with no trees has a size of 3x3. **Explanation:** Here\'s the 4x5 grid: ``` ..... ..T.. ..... ..... ``` The largest square plot without any \'T\' is: ``` ... ... ... ``` Thus, the side length of the largest square plot with no trees is 3.","solution":"def maxSquarePlot(grid): n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"A factory produces widgets, and these widgets are shipped in several batches over a certain number of days. The factory records the number of widgets produced and shipped each day. Your task is to determine the earliest possible day the factory can fulfill at least a certain number of orders. You are given one integer n (1 le n le 10^5) — the number of days, and an array of n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4), where a_i represents the number of widgets shipped on the i-th day. You are also given one integer k (1 le k le 10^9), which is the minimum number of widgets needed to fulfill the orders. Find the earliest day by which the factory has shipped at least k widgets. If the factory cannot fulfill the order by the end of the given days, return -1. # Input The first line contains two integers, n and k. The second line contains n integers a_1, a_2, ldots, a_n, representing the number of widgets shipped each day. # Output Output a single integer, which is the earliest day by which the factory has shipped at least k widgets. If not possible, output -1. # Example Input ``` 7 20 3 2 5 8 6 1 4 ``` Output ``` 5 ``` Explanation By day 5, the factory ships a total of 3 + 2 + 5 + 8 + 6 = 24 widgets, which meets the requirement of at least 20 widgets. Thus, the earliest day is day 5. # Note The widget shipments accumulate sequentially, and you need to determine the earliest day the cumulative shipments meet or exceed the required order. If the total widgets shipped do not meet the required order by the end of the period, return -1.","solution":"def earliest_day_to_fulfill_order(n, k, widgets): Determines the earliest day by which at least k widgets have been shipped. Args: n (int): Number of days. k (int): Minimum number of widgets needed to fulfill the orders. widgets (list of int): Number of widgets shipped each day. Returns: int: The earliest day by which at least k widgets have been shipped, or -1 if not possible. cumulative_sum = 0 for day in range(n): cumulative_sum += widgets[day] if cumulative_sum >= k: return day + 1 # Days are 1-indexed return -1 # If k widgets can\'t be met"},{"question":"A company is redesigning their employee ID system to improve security. Each employee is issued a new ID card with a unique alphanumeric identifier. However, the transition period involves both the old numeric IDs and the new alphanumeric IDs. To ensure smooth operations during the transition, a mapping between the old and new IDs must be maintained. You are given two lists, one containing the old IDs and another containing the new IDs, both of the same length. Each old ID should map directly to a new ID. Write a program to create this mapping. The first line contains a single integer n — the number of employees (1 ≤ n ≤ 10^5). The second line contains n numbers o1, o2, ..., on (1 ≤ oi ≤ 10^5) — the old IDs of the employees. The third line contains n strings n1, n2, ..., nn — the new alphanumeric IDs of the employees. Each string consists of between 1 and 10 characters, which can be either digits or lowercase letters. Print n lines, each containing an old ID followed by the corresponding new ID. In the first test, each old ID is directly mapped to the corresponding new ID. In the second test, the old IDs and new IDs must be paired correctly according to their positions in the input lists. Example: Input: 3 101 202 303 a1b2 c3d4 e5f6 Output: 101 a1b2 202 c3d4 303 e5f6","solution":"def map_ids(n, old_ids, new_ids): Maps old IDs to new IDs and returns the mapping as a list of tuples. Parameters: n (int): Number of employees. old_ids (list): List of old IDs. new_ids (list): List of new alphanumeric IDs. Returns: list: List of tuples containing old ID and corresponding new ID. return [(old_ids[i], new_ids[i]) for i in range(n)]"},{"question":"You are given an array of integers. Your task is to find out and print one of the elements that appears more than once in the array. If there are multiple elements that appear more than once, return any one of them. If no element appears more than once, return -1. The first line contains a single integer n (1 leqslant n leqslant 10^5) — the length of the array. The second line contains n integers separated by spaces, which represent the elements of the array. Output a single integer, which is an element appearing more than once. If no such element exists, output -1. In the first example, the array is [4, 3, 2, 7, 8, 2, 3, 1], one possible element that appears more than once is 2. In the second example, the array is [1, 2, 3, 4], where no element appears more than once, so the output is -1.","solution":"def find_duplicate(arr): Returns an element that appears more than once in the array. If no such element exists, returns -1. :param arr: List[int] - list of integers :return: int seen = set() for num in arr: if num in seen: return num seen.add(num) return -1"},{"question":"Fluttershy is organizing her collection of books on a shelf. Each book has a unique height, and she wants to arrange them in non-decreasing order of heights. However, she can only perform a \\"swap adjacent\\" operation which allows her to swap positions of two adjacent books on the shelf. Help Fluttershy determine the minimum number of swaps required to organize the books in non-decreasing order by height. The first line contains an integer n (2 ≤ n ≤ 105). The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 105), representing the heights of the books in their initial order on the shelf. Output the minimum number of swaps needed to sort the books. If the sequence is already sorted, output 0.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array in non-decreasing order. n = len(arr) sorted_arr = sorted(arr) index_map = {v: i for i, v in enumerate(arr)} swaps = 0 for i in range(n): if arr[i] != sorted_arr[i]: swaps += 1 # Swap the current element with the element that should be in this position swap_idx = index_map[sorted_arr[i]] index_map[arr[i]] = swap_idx arr[i], arr[swap_idx] = arr[swap_idx], arr[i] index_map[sorted_arr[i]] = i return swaps"},{"question":"Anna is an avid gardener and loves to create flower arrangements. She maintains a flower bed which can be thought of as a two-dimensional grid of dimensions n times m, where each cell can either be empty or contain exactly one flower. Anna wants to plant flowers in such a way that a special pattern is observed: each row in any subset of consecutive rows starting from the topmost row should have a strictly increasing number of flowers compared to the previous row and also should be unique. Given an initial state of the flower bed represented by an n times m matrix where each cell contains a number, determine how many different ways Anna can plant her flowers to satisfy the aforementioned conditions. Note that the cells with number zero are considered to be empty initially. The first line of the input contains two integers n and m (1 leq n, m leq 1000), the dimensions of the grid. The following n lines contain m integers each, representing the initial state of the grid. Each integer is either 0 (empty cell) or a positive integer representing a flower. Output an integer, the number of different ways Anna can plant the flowers to satisfy the condition of strictly increasing and unique flower counts in any subset of consecutive rows starting from the topmost row. In the first sample, the flower bed can be: ``` 0 1 0 0 0 2 3 0 0 0 4 0 ``` Here, the grid already satisfies the condition. One possible arrangement is as shown where each subset of consecutive rows starting from the top row has strictly increasing and unique flower counts.","solution":"def count_ways_to_plant_flowers(n, m, grid): def count_flowers(row): return sum(1 for cell in row if cell > 0) flower_counts = [count_flowers(row) for row in grid] for i in range(len(flower_counts)): if i > 0 and flower_counts[i] <= flower_counts[i - 1]: return 0 return 1 # This is the main function to read the input def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] index = 2 for i in range(n): row = list(map(int, data[index:index + m])) grid.append(row) index += m print(count_ways_to_plant_flowers(n, m, grid))"},{"question":"A local library is implementing a new system to manage its collection of books. The library has `n` sections, each section can hold a certain number of books. They would like to model and manage the addition and removal of books efficiently. To do that, you\'ll have to write a program that simulates the process of adding and removing books to/from sections. Each section has a maximum capacity which indicates the maximum number of books it can hold. Books can be added to any section if there is enough space, and they can be removed from any section if there\'s at least one book in that section. The first line of input contains an integer `n` (1 ≤ n ≤ 100), which represents the number of sections in the library. The second line contains `n` integers, where the `i-th` integer `ci` (1 ≤ ci ≤ 1000) represents the maximum capacity of the `i-th` section. The third line contains an integer `m` (1 ≤ m ≤ 1000) which represents the number of requests. Each of the next `m` lines contains a request, described by two values: - If the first value is 1, it means adding books, and it is followed by two integers: the section number `s` (1 ≤ s ≤ n) and the number of books `b` (1 ≤ b ≤ 100). - If the first value is 2, it means removing books, and it is followed by two integers: the section number `s` (1 ≤ s ≤ n) and the number of books `b` (1 ≤ b ≤ 100). For each request to add books, print `-1` if the section does not have enough space to accommodate the new books. Otherwise, print the number of books in that section after the addition. For each request to remove books, print `-1` if the section does not have enough books to remove. Otherwise, print the number of books in that section after the removal. Example input: ``` 3 100 200 300 5 1 2 150 1 2 100 2 3 50 2 1 10 1 1 50 ``` Example output: ``` 150 -1 -1 -1 50 ```","solution":"def manage_library_sections(n, capacities, m, requests): # Initialize the current number of books in each section to 0 current_books = [0] * n result = [] for request in requests: req_type, section, books = request section_index = section - 1 if req_type == 1: # Add books if current_books[section_index] + books <= capacities[section_index]: current_books[section_index] += books result.append(current_books[section_index]) else: result.append(-1) elif req_type == 2: # Remove books if current_books[section_index] >= books: current_books[section_index] -= books result.append(current_books[section_index]) else: result.append(-1) return result # Example usage: n = 3 capacities = [100, 200, 300] m = 5 requests = [(1, 2, 150), (1, 2, 100), (2, 3, 50), (2, 1, 10), (1, 1, 50)] print(manage_library_sections(n, capacities, m, requests))"},{"question":"You are given an array of integers. Your task is to partition this array into two non-empty subsets such that the sum of the elements in the first subset is equal to the sum of the elements in the second subset. If such a partition is possible, output \\"YES\\" and the two subsets. If it is not possible, output \\"NO\\". Input: - The first line contains a single integer n (2 ≤ n ≤ 200) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output: - If the partition is possible, print \\"YES\\" followed by two lines. The first line should contain the number of elements in the first subset followed by the elements of the first subset. The second line should contain the number of elements in the second subset followed by the elements of the second subset. - If the partition is not possible, print \\"NO\\". Examples: Input 6 3 1 1 2 2 1 Output YES 3 3 1 1 3 2 2 1 Input 5 1 1 1 1 5 Output NO","solution":"def partition_equal_sum_subsets(n, array): total_sum = sum(array) # If the total sum is odd, it\'s not possible to divide into two equal subsets if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 subset_sums = {0: []} for number in array: new_sums = {} for curr_sum in subset_sums: new_sum = curr_sum + number if new_sum <= target: new_sums[new_sum] = subset_sums[curr_sum] + [number] # Found a valid subset if new_sum == target: subset1 = new_sums[new_sum] subset2 = array.copy() for item in subset1: subset2.remove(item) return \\"YESn\\" + f\\"{len(subset1)} {\' \'.join(map(str, subset1))}n{len(subset2)} {\' \'.join(map(str, subset2))}\\" subset_sums.update(new_sums) return \\"NO\\""},{"question":"Alice is preparing for a programming contest, and she came up with an interesting problem involving sequences. She wants to create a balanced sequence of integers that respects certain constraints but needs help. A sequence of integers is called balanced if for each integer in the array, there is another integer at an equidistant position from the center. Your task is to help Alice find the lexicographically smallest balanced sequence given a set of integers with specific constraints. You are given an integer n (1 leq n leq 10^5) and an array of n distinct integers. You need to construct a balanced sequence of minimum possible length from these integers. A sequence a is lexicographically smaller than a sequence b, if at the first position where they differ, sequence a has a smaller element than the corresponding element in sequence b. Input: - The first line contains an integer n. - The second line contains n distinct integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9). Output: - Print the lexicographically smallest balanced sequence on a single line. A sequence a of length m is said to be balanced if for every 1 leq i leq frac{m}{2}, it holds that a[i] = a[m-i+1]. Note that the length of the balanced sequence must be at least n. Example: Input: 5 2 3 7 5 8 Output: 2 3 7 3 2 Explanation: One possible balanced sequence could be [2 3 7 3 2], where the integer at position 1 is equal to the integer at position 5, and the integer at position 2 is equal to the integer at position 4. This is the lexicographically smallest sequence satisfying the conditions.","solution":"def smallest_balanced_sequence(n, arr): Returns the lexicographically smallest balanced sequence from the given array. Parameters ---------- n : int The number of elements in the array. arr : List[int] The array of distinct integers. Returns ------- List[int] The lexicographically smallest balanced sequence. arr.sort() # Sorting the array to get the smallest elements first balanced_sequence = [] for i in range(n): balanced_sequence.append(arr[i]) for i in range(n-2, -1, -1): balanced_sequence.append(arr[i]) return balanced_sequence"},{"question":"In a quiet forest, there are n trees, labeled from 1 to n. These trees are connected by n-1 unique bidirectional roads, allowing one to travel between any two trees directly or indirectly. Each road has a certain time cost associated with it, represented by an integer. The Woodland Council has decided to improve the forest\'s resilience by doubling the time cost of specific roads, but it wishes to ensure that the longest possible single path (the \\"diameter\\") in the forest still remains below a given threshold k, after the doubling. Given the tree structure (roads and corresponding time costs) and the threshold k, determine the minimum number of roads that need to have their time cost doubled in order to keep the longest path in the forest within the given threshold k. You are given: - The number of trees n (1 ≤ n ≤ 10^5). - An integer k (1 ≤ k ≤ 10^9). The next n-1 lines contain three integers each: u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^4), which means there is a road between tree u and tree v with a travel time cost of w. Output the minimum number of roads that need to be doubled to ensure the diameter of the forest does not exceed k. For example, in the first sample, the forest consists of 4 trees, connected by roads with given time costs, and the longest path must not exceed 8 units of time: ``` 4 8 1 2 5 2 3 6 2 4 1 ``` For the second sample, the forest consists of 3 trees, and the diameter must not exceed 4 units of time: ``` 3 4 1 2 3 2 3 1 ``` Output the minimum number of roads to double the cost for each query.","solution":"import heapq def tree_diameter(n, k, roads): from collections import defaultdict from queue import PriorityQueue graph = defaultdict(list) for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Function to get the farthest node and its distance from a given start def bfs(start): visited = [False] * (n + 1) q = PriorityQueue() q.put((0, start)) max_dist = 0 farthest_node = start while not q.empty(): dist, node = q.get() if visited[node]: continue visited[node] = True if dist > max_dist: max_dist = dist farthest_node = node for neighbor, weight in graph[node]: if not visited[neighbor]: q.put((dist + weight, neighbor)) return max_dist, farthest_node # Using BFS twice to find the tree diameter _, farthest_node = bfs(1) max_diameter, _ = bfs(farthest_node) if max_diameter <= k: return 0 # Find roads to double (Greedy approach) all_edges = [] for u, v, w in roads: all_edges.append((w * 2 - w, w, (u, v))) all_edges.sort(reverse=True) # Sort by the cost reduction in desc doubled_edges = set() for edge in all_edges: if max_diameter <= k: break old_dist, reduced_dist, (u, v) = edge max_diameter -= old_dist doubled_edges.add((u, v)) return len(doubled_edges)"},{"question":"You are given a list of integers that represents the prices of items in a shop. You can perform one operation: choose two different items and remove both of them from the list. The cost of this operation is the sum of the prices of the two items removed. You aim to minimize the total cost of removing all the items from the list. Write a function `minimize_cost(lst)` that calculates the minimum possible total cost to remove all items. # Input - A list of integers `lst` (1 ≤ length of `lst` ≤ 100, 1 ≤ lst[i] ≤ 1000) # Output - A single integer, the minimum total cost to remove all items. # Example ```python def minimize_cost(lst): # Your code here # Example 1 print(minimize_cost([4, 2, 10, 5])) # Expected output: 29 # Example 2 print(minimize_cost([1, 2, 3, 4])) # Expected output: 19 ``` # Explanation - In the first example, one possible way to minimize the cost is: - Remove 2 and 4 (cost: 2+4=6), remaining list: [10, 5] - Remove 5 and 10 (cost: 6+15=19) - Total minimum cost is 6 + 19 = 25. - In the second example, one possible way to minimize the cost is: - Remove 1 and 2 (cost: 1+2=3), remaining list: [3, 4] - Remove 3 and 4 (cost: 3+7=10) - Total minimum cost is 3 + 10 = 13.","solution":"def minimize_cost(lst): Function to minimize the total cost of removing all items in pairs. Every time we pick the smallest two numbers and add their sum to total cost. if len(lst) % 2 != 0: raise ValueError(\\"List must have an even number of elements\\") total_cost = 0 lst.sort() while len(lst) > 0: total_cost += lst[0] + lst[1] lst = lst[2:] # remove the first two elements return total_cost"},{"question":"In a programming competition, participants are required to decode a secret message. The message is encoded as a string of lowercase alphabetic characters, and the encoding mechanism works as follows: 1. Each character in the string is rotated forward by a certain number of positions in the alphabet to form the encoded character. This rotation number is constant for the entire message. 2. If the rotation moves past \'z\', it wraps around to the beginning of the alphabet. For example, with a rotation of 3, \'z\' would become \'c\'. Given an encoded string and the rotation number used for encoding, devise a function to decode the original message. **Input:** The input consists of two lines. The first line contains the encoded string, which is guaranteed to be non-empty and of length not exceeding 10^5. The second line contains an integer k (1 ≤ k ≤ 25), which is the rotation number used in the encoding process. **Output:** Print the decoded message as a single string. **Example:** Input: <pre> khoor 3 </pre> Output: <pre> hello </pre> Input: <pre> zab 2 </pre> Output: <pre> xyz </pre> Note: In the first example, each letter of the encoded message \\"khoor\\" is shifted backwards by 3 positions to get \\"hello\\". Similarly, in the second example, \\"zab\\" is shifted backwards by 2 positions to get \\"xyz\\".","solution":"def decode_message(encoded_str, k): Decodes the given encoded string by rotating each character backward by k positions. Parameters: encoded_str (str): The encoded string. k (int): The rotation number used in the encoding process. Returns: str: The decoded message. decoded_message = [] for char in encoded_str: new_char = chr(((ord(char) - ord(\'a\') - k) % 26) + ord(\'a\')) decoded_message.append(new_char) return \'\'.join(decoded_message)"},{"question":"Anastasia is practicing her math skills and recently learned about binary trees. She finds them fascinating and wants to explore more. A binary tree is a tree where each node has at most two children, referred to as the left child and the right child. Anastasia is particularly interested in finding out the maximum depth of a binary tree. The depth of a node in the tree is the number of edges from the node to the tree\'s root node. The tree\'s maximum depth is the largest depth among its nodes. You need to write a program to help Anastasia determine the maximum depth of a given binary tree. The binary tree will be provided in the form of a list of tuples where each tuple represents (node_value, left_child_value, right_child_value). If a node does not have a left or right child, the value will be None. Input: - First line contains the integer n (1 ≤ n ≤ 10^5) — the number of nodes in the binary tree. - Next n lines each contain a tuple (node_value, left_child_value, right_child_value). Output: - Print the single integer — the maximum depth of the tree. Note: - The value of a node and its children will always be unique integers or None. - You can assume the input list represents a valid binary tree. Example: Input: 3 (1, 2, 3) (2, None, None) (3, None, None) Output: 2","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): if not nodes: return None val_to_node = {} for val, left, right in nodes: if val not in val_to_node: val_to_node[val] = TreeNode(val) node = val_to_node[val] if left is not None: if left not in val_to_node: val_to_node[left] = TreeNode(left) node.left = val_to_node[left] if right is not None: if right not in val_to_node: val_to_node[right] = TreeNode(right) node.right = val_to_node[right] return val_to_node[nodes[0][0]] def max_depth(root): if not root: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1 def find_max_depth(n, tuples): root = build_tree(tuples) return max_depth(root)"},{"question":"You are given a set of points in a 2D plane and are tasked with determining if there exists a circle that encircles at least three of these points. A circle is said to encircle a point if the point lies on the circumference of the circle. Write a function to find out whether there exists such a circle. If there are multiple circles possible, any circle that satisfies the condition is acceptable. **Input:** - You will receive a series of \'n\' point coordinates (x, y) where 3 <= n <= 100. The absolute value of all coordinates does not exceed 1000. It is guaranteed that all points are pairwise distinct. **Output:** - Print \\"YES\\" if there exists a circle that passes through at least three of the given points. - Print \\"NO\\" if no such circle exists. **Examples:** Input: 6 2 3 4 5 1 1 3 4 7 8 8 10 Output: YES Input: 4 1 1 2 2 3 3 4 4 Output: NO **Note:** In the first example, it is possible to find a circle that encircles three or more points from the given set. In the second example, all the points lie on a straight line, making it impossible to find such a circle.","solution":"from itertools import combinations def is_circumcenter_collinear(p1, p2, p3): x1, y1 = p1 x2, y2 = p2 x3, y3 = p3 return ((x2 - x1)*(y3 - y1) - (y2 - y1)*(x3 - x1)) == 0 def circle_exists(points): for comb in combinations(points, 3): if not is_circumcenter_collinear(*comb): return \\"YES\\" return \\"NO\\" def check_circle(input_points): points = [tuple(map(int, input_points[i].split())) for i in range(1, int(input_points[0]) + 1)] return circle_exists(points)"},{"question":"In the Kingdom of Arithmia, residents use a special calendar system. Each year in Arithmia consists of m months, and each month has exactly k days. The residents of Arithmia also use a different way to mark the passage of weeks. For them, a week is defined as any consecutive group of d days. The King of Arithmia wishes to design a schedule such that no weeks (as defined by the residents) overlap more than once. In this context, a week \'overlaps\' if there are common days among different weeks. A non-overlapping week should follow these conditions: 1. Each day belongs to exactly one week. 2. The last day of a month, when combined with the first day(s) of the next month, does not form an overlapping week. Given the structure of Arithmian calendar and the value of d (the week length), determine the number of full weeks and the number of days that will be leftover at the end of the year. If it is not possible to design such a schedule, simply return that it is impossible to create a non-overlapping schedule. The input consists of a single line containing three integers m, k, and d (1 ≤ m, k, d ≤ 10^5), denoting the number of months, the number of days in each month, and the defined week length in Arithmian calendar, respectively. Output two integers: the number of full weeks and the number of leftover days. If it is impossible to design such a schedule, output a single integer -1. Example input: 5 30 7 Example output: 21 15 Explanation: For a year with 5 months and each month having 30 days: - Total days in the year = 5 * 30 = 150 - Number of full weeks = 150 // 7 = 21 - Number of leftover days = 150 % 7 = 3 Thus, 21 full weeks can be formed with 3 days remaining.","solution":"def calculate_weeks_and_leftover_days(m, k, d): Given the number of months (m), the number of days in each month (k), and the length of a week (d), this function calculates the number of full weeks and leftover days at the end of the year in the Arithmian calendar. If it is not possible to design such a schedule, the function returns -1. # Total number of days in the year total_days = m * k # If the week length is greater than the total days in the year, return -1. if d > total_days: return -1 # Calculate the number of full weeks and leftover days full_weeks = total_days // d leftover_days = total_days % d return full_weeks, leftover_days"},{"question":"A large e-commerce company recently faced an issue with their inventory system. They want you to write a program that will help them ensure the integrity of their inventory data. The system maintains a list of products with unique IDs and their respective quantities. Occasionally, they receive update instructions to either add new quantities to an existing product or to create a new product entry if the product ID is not already present in the inventory. You need to write a program that processes a series of update instructions and ensures that the final state of the inventory is correct. Each instruction is either of type \\"add\\" or \\"update\\". - \\"add x y\\" means add quantity y to the product with ID x. If product x does not exist in the inventory, it should be created with quantity y. - \\"update x y\\" means set the quantity of the product with ID x to y. If product x does not exist in the inventory, it should be created with quantity y. The first line contains an integer i (1 ≤ i ≤ 2·105) — the number of initial products in the inventory. The next i lines contain two values — a string pid (product ID) and an integer qty (quantity) — representing the products currently in the inventory. The subsequent line contains an integer u (1 ≤ u ≤ 2·105) — the number of update instructions. The next u lines contain an instruction of either \\"add x y\\" or \\"update x y\\". Print the final state of the inventory in the order of product IDs (lexicographically sorted by product ID) after all the update instructions have been processed. For each product, print the product ID followed by its quantity. Input format: - The first line contains integer i. - The following i lines each contain a string and an integer. - The next line contains integer u. - The following u lines each contain an instruction. Output format: - Output the final state of the inventory sorted by product ID in lexicographical order. Example: Input: ``` 3 p1 10 p2 15 p3 5 4 add p2 5 update p3 20 add p4 7 update p5 12 ``` Output: ``` p1 10 p2 20 p3 20 p4 7 p5 12 ```","solution":"def process_inventory_updates(initial_inventory, update_instructions): Processes the initial inventory and update instructions to return the final state of the inventory sorted by product ID. :param initial_inventory: List of tuples where each tuple contains (product_id, quantity) :param update_instructions: List of instructions in the format [\\"command product_id quantity\\"] :return: List of tuples with the final inventory sorted by product_id lexicographically. inventory = {} # Initialize the inventory for pid, qty in initial_inventory: inventory[pid] = qty # Process update instructions for instruction in update_instructions: parts = instruction.split() command, pid, qty = parts[0], parts[1], int(parts[2]) if command == \\"add\\": if pid in inventory: inventory[pid] += qty else: inventory[pid] = qty elif command == \\"update\\": inventory[pid] = qty # Convert inventory to sorted list of tuples final_inventory = sorted(inventory.items()) return final_inventory"},{"question":"You are organizing a party and need to order drinks. You have a list of drinks available and their corresponding types (alcoholic or non-alcoholic). Your task is to determine the number of each type of drink you need to order for the party. The first line of input contains a single integer M (1 ≤ M ≤ 100) — the number of drinks available. The next M lines describe the drinks available. Each line contains two space-separated strings: the name of the drink and its type. The name is a string of lowercase English letters between 1 and 10 characters long. The type is either \\"alcoholic\\" or \\"non-alcoholic\\". All drink names are distinct. Output two numbers, the first one being the number of alcoholic drinks and the second one being the number of non-alcoholic drinks.","solution":"def count_drink_types(M, drinks_info): This function takes the number of drinks and a list of tuples containing drink name and type, and returns the number of alcoholic and non-alcoholic drinks. alcoholic_count = 0 non_alcoholic_count = 0 for drink_name, drink_type in drinks_info: if drink_type == \\"alcoholic\\": alcoholic_count += 1 elif drink_type == \\"non-alcoholic\\": non_alcoholic_count += 1 else: raise ValueError(f\\"Unexpected drink type: {drink_type}\\") return alcoholic_count, non_alcoholic_count"},{"question":"You are given an array of integers that represents the heights of a series of buildings. The problem is to find the maximum number of buildings that have a view of the sunrise. A building has a view of the sunrise if there are no buildings to its left that are taller or equal to it. Write a function `maxBuildingsWithSunriseView(heights: List[int]) -> int` to determine this maximum number. # Input - A list of integers `heights` where each integer represents the height of a building. # Output - An integer representing the maximum number of buildings that have a view of the sunrise. # Example ```python assert maxBuildingsWithSunriseView([3, 1, 4, 2, 5]) == 3 assert maxBuildingsWithSunriseView([7, 4, 8, 2, 9]) == 3 ``` # Explanation - In the first example, the buildings with heights `[3, 4, 5]` have a clear view of the sunrise. - In the second example, the buildings with heights `[7, 8, 9]` have a clear view of the sunrise.","solution":"from typing import List def maxBuildingsWithSunriseView(heights: List[int]) -> int: Given a list of building heights, this function returns the maximum number of buildings that have a view of the sunrise. max_view_buildings = 0 current_max_height = -1 for height in heights: if height > current_max_height: max_view_buildings += 1 current_max_height = height return max_view_buildings"},{"question":"You are working on a warehouse management system and need to help with arranging boxes of different weights. Each box has a specific weight and you need to arrange them into stacks such that no stack exceeds a given weight limit. Your goal is to minimize the number of stacks required. Each stack can hold boxes whose total weight does not exceed the given limit. The order in which boxes are stacked is not important, but the total weight of boxes in each stack should be as balanced as possible. Given an array of integers representing the weights of the boxes and an integer representing the weight limit per stack, write a program to determine the minimum number of stacks required. Input format: - The first line contains an integer n (1 ≤ n ≤ 1000) - the number of boxes. - The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) - the weights of the boxes. - The third line contains an integer W (1 ≤ W ≤ 1000) - the weight limit per stack. Output format: - A single integer representing the minimum number of stacks required. Example: ``` Input: 5 2 3 4 5 6 10 Output: 3 ```","solution":"def min_stacks(n, weights, W): Returns the minimum number of stacks needed such that no stack exceeds the weight limit W. :param n: Number of boxes (integer) :param weights: List of integers representing the weights of the boxes :param W: Maximum weight limit per stack :return: Minimum number of stacks required (integer) from queue import PriorityQueue pq = PriorityQueue() # Sort weights in descending order to try larger weights first weights.sort(reverse=True) for weight in weights: if pq.empty() or pq.queue[0][0] + weight > W: pq.put((weight, 1)) else: smallest_stack = pq.get() new_weight = smallest_stack[0] + weight pq.put((new_weight, smallest_stack[1])) return pq.qsize() # Example usage: if __name__ == \\"__main__\\": n = 5 weights = [2, 3, 4, 5, 6] W = 10 print(min_stacks(n, weights, W)) # Output: 3"},{"question":"You are given a grid of size n x m. Each cell in this grid may have a value 0 or 1. A cell with a value 1 is a \\"land\\" cell while a cell with a value 0 is a \\"water\\" cell. Your task is to count the number of islands in the grid. An island is a group of connected \\"land\\" cells. Two cells are connected if they are adjacent horizontally or vertically (not diagonally). If all four directions (up, down, left, right) of a \\"land\\" cell are \\"water\\" cells, that cell is considered an isolated island. Write a function `count_islands(grid: List[List[int]]) -> int` that takes an n x m grid and returns the number of islands. # Input Format - First line contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the grid. - Next n lines each contain m integers (either 0 or 1). # Output - A single integer representing the number of islands. # Example Input ``` 4 5 1 1 0 0 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 0 ``` Output ``` 3 ``` # Explanation - There are three islands in the example grid. 1. The first island is formed by cells (0,0), (0,1), (1,0), and (1,1). 2. The second island is formed by cells (1,3) and (1,4). 3. The third island is formed by cells (3,1) and (3,2).","solution":"from typing import List def count_islands(grid: List[List[int]]) -> int: if not grid: return 0 def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 0: return grid[x][y] = 0 # Mark as visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) n = len(grid) m = len(grid[0]) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: dfs(i, j) island_count += 1 return island_count"},{"question":"Limak the polar bear has become conscious about his weight. As part of his new health regime, he decides to track his daily steps. Limak has a step counting device that logs his steps for each day. For a given month, Limak wants to determine his busiest walking day — the day on which he walks the most steps. If there are multiple days with the same highest number of steps, the earliest day should be chosen. You are provided with an integer `n` (1 ≤ n ≤ 31) indicating the number of days in the month and an array of `n` integers where the i-th integer represents the number of steps taken by Limak on the (i+1)-th day of the month. # Input - The first line contains an integer `n` (the number of days in the month). - The second line contains `n` space-separated integers representing the number of steps taken each day. # Output - Print the 1-based index of the earliest day with the maximum number of steps. # Example Input ``` 5 1000 2000 3000 3000 2000 ``` Output ``` 3 ``` # Explanation In this example, Limak walked the most steps (3000) on the 3rd and 4th days. Since we need to choose the earliest day, the output is 3.","solution":"def busiest_walking_day(n, steps): Returns the 1-based index of the earliest day with the maximum number of steps. max_steps = max(steps) for i in range(n): if steps[i] == max_steps: return i + 1"},{"question":"In a forest, there are n trees positioned in a straight line, each tree has a certain height. Mishka likes to look at the forest and observe the beautiful sequence of trees. However, Mishka prefers the view to be non-decreasing — meaning that each tree should be the same height or taller than the tree before it. Mishka can cut any number of trees to make the sequence of heights non-decreasing. Each cut operation removes one tree. Given the heights of all trees in the forest, determine the minimum number of trees Mishka needs to cut down to make the sequence non-decreasing. Input: The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of trees. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10,000) — the heights of the trees. Output: Print a single integer — the minimum number of trees Mishka needs to cut down. Example: Input: 7 4 3 2 1 2 3 4 Output: 3 Explanation: Mishka can cut down the trees with heights 4, 3, and 2 (the first three trees). The remaining sequence will be [1, 2, 3, 4] which is non-decreasing. Thus, the minimum number of trees required to be cut down is 3.","solution":"def min_cuts_to_non_decreasing(trees): n = len(trees) if n <= 1: return 0 # dp array to store the length of LIS ending at each position dp = [1] * n # Find length of longest increasing subsequence for i in range(1, n): for j in range(i): if trees[i] >= trees[j]: dp[i] = max(dp[i], dp[j] + 1) # The minimum cuts needed is the total number of trees minus the length of the longest increasing subsequence return n - max(dp)"},{"question":"You are given a string `S` of length `n` (1 ≤ n ≤ 1000), and you need to determine whether it is possible to rearrange the characters of `S` such that no two identical characters are adjacent. If such a rearrangement is possible, output a valid rearranged string. Otherwise, output `-1`. Write a function `rearrange_string_no_adjacent` that takes a single argument, `S`, and returns the desired rearranged string or `-1` if no valid rearrangement exists. Your solution should aim to be as efficient as possible. **Function Signature:** ```python def rearrange_string_no_adjacent(S: str) -> str: pass ``` **Input:** - A string `S` of length `n` (1 ≤ n ≤ 1000) containing only lowercase Latin letters. **Output:** - A single string which is a rearranged version of `S` such that no two adjacent characters are the same. - If no such rearrangement is possible, return `-1`. **Example 1:** ```python S = \\"aab\\" rearrange_string_no_adjacent(S) ``` **Output:** ``` \\"aba\\" ``` **Example 2:** ```python S = \\"aaab\\" rearrange_string_no_adjacent(S) ``` **Output:** ``` -1 ``` **Example Explanation:** In Example 1, the string \\"aab\\" can be rearranged to \\"aba\\", which satisfies the condition that no two adjacent characters are the same. In Example 2, the string \\"aaab\\" cannot be rearranged such that no two \'a\'s are adjacent, so the function should return `-1`.","solution":"def rearrange_string_no_adjacent(S: str) -> str: from collections import Counter import heapq n = len(S) count = Counter(S) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_char, prev_freq = \'\', 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char, prev_freq = char, freq + 1 if len(result) != n: return \'-1\' return \'\'.join(result)"},{"question":"Polycarp is organizing a card tournament. There are n players and each player has m randomly drawn cards from a deck containing cards with values c1, c2, ..., ck (0 ≤ ci ≤ 106). Each card value appears equally often in the deck. Polycarp wants to calculate the total sum of all card values for tournament purposes. Agrippina is the referee and she determined the total amount of cards in the deck is T (T = k * m * n) and the total sum of their values V (V = m * n * (c1 + c2 + ... + ck)). However, some cards are missing and Agrippina only knows the values of the cards that are still available in the deck, not the missing ones. Given the number of players n, the number of cards each player has drawn m, and the values of the cards still in the deck, determine the total possible combinations of the remaining cards. The first line contains three integers n, m, k (1 ≤ n, m ≤ 105, 1 ≤ k ≤ 50) — the number of players, the number of cards each player has drawn, and the number of unique card values respectively. The second line contains k integers c1, c2, ..., ck (0 ≤ ci ≤ 106), where ci is the value of the i-th unique card. The third line contains a variable number of integers representing the values of the cards still present in the deck. Output one integer — the total possible combinations of the remaining cards that would keep the sum V intact. For example, if you have 2 players each with 3 cards and the card values are [1, 2, 3], and the deck still has the following cards remaining: [1, 2, 2, 3, 3], the total combinations should be calculated accordingly.","solution":"from collections import Counter from math import comb def calculate_combinations(n, m, k, card_values, remaining_values): Calculate possible combinations of remaining cards to maintain a sum V. Args: n (int): Number of players m (int): Number of cards each player has drawn k (int): Number of unique card values card_values (list): List of k card values remaining_values (list): List of remaining cards in the deck Returns: int: the total possible combinations. T = k * m * n V = m * n * sum(card_values) remaining_sum = sum(remaining_values) drawn_sum = V - remaining_sum remaining_counts = Counter(remaining_values) needed_counts = {} for value in card_values: needed_counts[value] = (n * m - remaining_counts.get(value, 0)) return calculate_combinations_recursively(needed_counts, drawn_sum, card_values) def calculate_combinations_recursively(needed_counts, drawn_sum, card_values): if drawn_sum == 0 and all(count == 0 for count in needed_counts.values()): return 1 if drawn_sum < 0 or not card_values: return 0 current_value = card_values[0] remaining_card_values = card_values[1:] total_combinations = 0 max_cards = needed_counts[current_value] for i in range(max_cards + 1): needed_counts[current_value] -= i total_combinations += calculate_combinations_recursively( needed_counts, drawn_sum - i * current_value, remaining_card_values ) needed_counts[current_value] += i return total_combinations"},{"question":"Given an array of integers nums and an integer target, you need to find two distinct indices i and j in the array such that nums[i] and nums[j] add up to the target. Return the indices i and j as a list [i, j] in any order. If there are multiple solutions, return any one of them. If there are no pairs that satisfy the condition, return an empty list. The function signature is: ```python def two_sum(nums: List[int], target: int) -> List[int]: ``` # Input - The input consists of a positive integer n (1 ≤ n ≤ 10^4), which represents the number of elements in the array. - A list of n integers nums (−10^9 ≤ nums[i] ≤ 10^9). - A single integer target (−10^9 ≤ target ≤ 10^9). # Output - A list of two integers [i, j] if such indices exist, else an empty list. # Example ```plaintext Input: n = 4 nums = [2, 7, 11, 15] target = 9 Output: [0, 1] ``` **Note:** In the given example, nums[0] + nums[1] equals 9, hence the output is [0, 1].","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"Kevin is an enthusiastic gardener who loves creating beautiful arrangements with the flowers in his garden. He decided to place flowers in a line along his garden path. There are `n` spots along the path, and he has exactly `n` flowers, each with a certain beauty value. Kevin wants to maximize the beauty of his arrangement based on the following rule: after placing the flowers, all adjacent flower pairs should be compatible. Two flowers are considered compatible if the absolute difference in their beauty values is at most `d`. Kevin needs your help to determine whether it\'s possible to arrange all `n` flowers along the path such that all adjacent pairs are compatible, and if so, what is the maximum total beauty of the arrangement. # Input - The first line contains two integers `n` and `d` separated by a space (`1 ≤ n ≤ 100000`, `0 ≤ d ≤ 10^9`). - The second line contains `n` integers representing the beauty values of the flowers in the garden (`1 ≤ beauty_i ≤ 10^9`). # Output - Output a single integer that is the maximum total beauty of the arrangement if it\'s possible to arrange the flowers such that all adjacent pairs are compatible, otherwise output `-1`. # Example Input ``` 5 2 4 1 7 3 6 ``` Output ``` 21 ``` Explanation One possible arrangement is [1, 3, 4, 6, 7]. The total beauty is 1 + 3 + 4 + 6 + 7 = 21, and all pairs are compatible since |3-1|=2, |4-3|=1, |6-4|=2, |7-6|=1 which are all ≤ 2.","solution":"def max_total_beauty(n, d, beauty_values): Determine whether it\'s possible to arrange all `n` flowers such that all adjacent pairs are compatible, and if so, return the maximum total beauty of the arrangement, otherwise return -1. # Sort the beauty values sorted_beauty_values = sorted(beauty_values) # Check if the difference between any two adjacent flowers is greater than d for i in range(1, n): if abs(sorted_beauty_values[i] - sorted_beauty_values[i-1]) > d: return -1 # If all pairs are compatible, return the sum of the sorted beauty values return sum(sorted_beauty_values)"},{"question":"Alice and Bob are playing a game involving sequences of integers. The rules are as follows: 1. They start with a sequence of n integers. 2. In each step, Alice and Bob each select a contiguous subsequence of at least one number from the sequence such that there is no overlap between the subsequences chosen by Alice and Bob. 3. The sum of numbers in Alice\'s subsequence is added to her score, and the sum of numbers in Bob\'s subsequence is added to his score. 4. Alice always chooses her subsequence first. Bob then chooses his subsequence from the remaining numbers, ensuring no overlap with Alice\'s choice. Alice and Bob aim to maximize their respective scores. Given a sequence, determine the maximum score Alice can obtain if both play optimally. Assume that both Alice and Bob are well aware of the entire sequence and play their parts perfectly. # Input: - The first line contains an integer n (1 ≤ n ≤ 100000) – the number of integers in the sequence. - The second line contains n integers, each between -10^9 and 10^9 inclusive, representing the sequence. # Output: - Output a single integer – the maximum score Alice can achieve if both Alice and Bob play optimally. # Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 9 ``` (The optimal scenario is Alice picking the subsequence [4, 5] and Bob selecting [1, 2, 3]. Alice\'s score would be 9.) Input: ``` 4 -1 -2 -3 -4 ``` Output: ``` -1 ``` (The optimal scenario is Alice picking the subsequence [-1], giving her the least negative feasible score.)","solution":"def max_alice_score(n, sequence): Calculates the maximum score Alice can achieve with the given sequence of numbers if both Alice and Bob play optimally. def max_subarray_sum(arr): Helper function to compute the maximum subarray sum using Kadane\'s Algorithm. max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum # Compute the maximum subarray sum which is the best score Alice can achieve. return max_subarray_sum(sequence)"},{"question":"There is a large network of computers in a laboratory. Each computer is connected to other computers directly by a number of bidirectional cables. Unfortunately, some cables are prone to failure, and if enough cables fail, it might isolate some computers from the rest of the network. You have been tasked with minimizing the potential impact of such cable failures. Specifically, you need to ensure that the given pair of critical computers, labeled s and t, always remain connected after the failure of any one cable. The first line of input contains two integers n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 30000), representing the number of computers and the number of cables, respectively. The second line contains two integers s and t (1 ≤ s, t ≤ n, s ≠ t), which are the indices of the critical computers. The next m lines each contain three integers ai, bi, ci (1 ≤ ai, bi ≤ n, 1 ≤ ci ≤ 10^9), representing that there is a cable between computers ai and bi, and it has a reliability rating of ci. Higher ci indicates a more reliable cable. Your goal is to find the minimum total reliability rating of the set of cables that must be added to the network such that computers s and t remain directly connected even if one original cable fails. If it\'s not possible to achieve this, return -1. The output should be a single integer representing the minimum total reliability rating of the additional cables required. If it is not possible to maintain the connection between s and t with the failure of any single cable, print -1. Example: ``` Input: 6 7 1 6 1 2 4 2 3 3 3 4 2 4 5 5 5 6 4 1 3 7 2 6 6 Output: 7 ```","solution":"from collections import defaultdict, deque def bfs(capacity, flow, source, sink, parent): visited = set() queue = deque([source]) while queue: u = queue.popleft() for v in capacity[u]: if v not in visited and capacity[u][v] - flow[u][v] > 0: parent[v] = u if v == sink: return True queue.append(v) visited.add(v) return False def edmonds_karp(n, capacity, source, sink): flow = defaultdict(lambda: defaultdict(int)) parent = {} max_flow = 0 while bfs(capacity, flow, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s] - flow[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] flow[u][v] += path_flow flow[v][u] -= path_flow v = parent[v] max_flow += path_flow return max_flow def minimum_reliability_for_fault_tolerance(n, m, s, t, cables): capacity = defaultdict(lambda: defaultdict(int)) for a, b, c in cables: capacity[a][b] += c capacity[b][a] += c if edmonds_karp(n, capacity, s, t) >= 2: # No additional cost needed, as there are already two disjoint paths return 0 else: # Not possible to maintain two disjoint paths with the original graph return -1"},{"question":"A programming language has an interesting property: the value of any variable can be used as an index to refer to other variables. Given this feature, we can create a new data structure, called an \\"indexable array,\\" which is a list of integers where the value of each integer can be used as an index to get its next value. You are provided with an integer array and your task is to simulate the process of using the values as indices to refer to the next values. Specifically, given a starting index, you need to output the value found after following a sequence of indices starting from the given starting index up to a specified length. Write a function called `indexable_array` which takes in three parameters: 1. an integer array `arr` of length `n` (1 ≤ n ≤ 1000), 2. an integer `start` (0 ≤ start < n) indicating the initial index to start the sequence, and 3. an integer `length` (1 ≤ length ≤ 10000) indicating the number of steps to follow in the sequence. The function should return the value found after following the sequence for the specified length of steps. If at any step an index is out of bounds, return -1 immediately. # Input: The first line contains one integer `n` (1 ≤ n ≤ 1000) — the length of the array. The second line contains `n` integers representing the elements of the array. The third line contains two integers `start` and `length` (0 ≤ start < n, 1 ≤ length ≤ 10000). # Output: Return the value found after following the sequence for the specified length. If an index needed is out of bounds at any step, return -1. # Example: Input: ``` 5 3 7 1 0 4 2 3 ``` Output: ``` -1 ``` Explanation: Step 1: `arr[2] = 1` Step 2: `arr[1] = 7` Step 3: `arr[7]` (out of bounds) # Solution Template: ```python def indexable_array(arr, start, length): index = start for _ in range(length): if index < 0 or index >= len(arr): return -1 index = arr[index] return index ``` Implement the function `indexable_array` as specified.","solution":"def indexable_array(arr, start, length): index = start for _ in range(length): if index < 0 or index >= len(arr): return -1 index = arr[index] return index"},{"question":"You are given a string s consisting of n characters. Let u be any substring of s, and let text{reverse}(u) denote the reverse of string u. A substring a of s is called palindromic if a = text{reverse}(a). Your task is to determine the length of the longest palindromic substring that can be formed by selecting any contiguous subset of characters from the string s. Input - The first line contains a single integer n (1 le n le 10^3), the length of the string s. - The second line contains the string s, which consists of lowercase English letters. Output - Output a single integer, the length of the longest palindromic substring of s. Example Input: ``` 7 abacdfg ``` Output: ``` 3 ``` Explanation: In the example, one possible longest palindromic substring is \\"aba\\", which has a length of 3.","solution":"def longest_palindromic_substring_length(n, s): Given the length n of the string s, return the length of the longest palindromic substring in s. if n == 0: return 0 # Initialize a table to store lengths of longest palindromic substrings dp = [[False] * n for _ in range(n)] max_length = 1 # A single character is always a palindrome for i in range(n): dp[i][i] = True start = 0 # Check for sub-string of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return max_length"},{"question":"You are given a collection of words along with their corresponding frequencies of occurrence in a large text. The goal is to identify the words with the highest frequencies within this collection. The input consists of two lines: - The first line contains the positive integer `n` (1 ≤ n ≤ 50), which represents the number of unique words in the collection. - The second line contains `n` pairs of strings and integers. Each pair is separated by a space, with the first element being a word (comprising lowercase alphabetic characters) and the second element being a non-negative integer representing its frequency of occurrence. Your task is to write a program that outputs the word with the highest frequency. If there are multiple words with the highest frequency, print all of them in lexicographical order. # Example Input: ``` 5 apple 2 banana 4 cherry 4 date 2 elderberry 1 ``` Output: ``` banana cherry ``` Input: ``` 3 orange 1 peach 1 pear 1 ``` Output: ``` orange peach pear ``` # Note In the first example, \\"banana\\" and \\"cherry\\" both have the highest frequency of 4. Since there are multiple words with the highest frequency value, they are printed in lexicographical order. In the second example, all words have the same frequency, so they are all printed in lexicographical order.","solution":"def highest_frequency_words(n, words_with_frequencies): Returns the words with the highest frequency. Parameters: n (int): number of unique words words_with_frequencies (list of tuples): list containing tuples of (word, frequency) Returns: list: words with the highest frequency in lexicographical order max_frequency = 0 frequency_dict = {} for word, frequency in words_with_frequencies: frequency = int(frequency) frequency_dict[word] = frequency if frequency > max_frequency: max_frequency = frequency highest_freq_words = [word for word, freq in frequency_dict.items() if freq == max_frequency] return sorted(highest_freq_words)"},{"question":"Write a function find_minimum_subarray_sum(nums, s) that takes an array of integers nums and an integer s. The function should find the length of the smallest contiguous subarray whose sum is at least s. If there isn\'t one, return 0 instead. Function Signature: ```python def find_minimum_subarray_sum(nums: List[int], s: int) -> int: pass ``` # Inputs 1. `nums` (List[int]): A list of integers where 1 <= len(nums) <= 10^5 and 1 <= nums[i] <= 10^4. 2. `s` (int): An integer value representing the target sum, where 1 <= s <= 10^9. # Output - Return the length of the smallest contiguous subarray whose sum is at least `s`. If no such subarray exists, return 0. # Example ```python assert find_minimum_subarray_sum([2, 3, 1, 2, 4, 3], 7) == 2 assert find_minimum_subarray_sum([1, 4, 4], 4) == 1 assert find_minimum_subarray_sum([1, 2, 3, 4, 5], 11) == 3 assert find_minimum_subarray_sum([1, 1, 1, 1, 1], 11) == 0 ``` # Explanation For the first example: - The subarray [4, 3] has a sum equal to 7. - The subarray lengths to achieve the target sum of 7 are [2, 3, 4, 5], of which the minimum is 2. For the second example: - The subarray [4] has a sum equal to 4. - The smallest subarray with sum at least 4 has length 1. For the third example: - The subarray [3, 4, 5] has a sum equal to 12. - The subarray lengths to achieve the target sum of 11 are [3, 4, 5], of which the minimum is 3. For the fourth example: - No subarray exists with a sum equal to or higher than 11. - Therefore, the result is 0.","solution":"def find_minimum_subarray_sum(nums, s): Finds the length of the smallest contiguous subarray whose sum is at least s. If no such subarray exists, returns 0. n = len(nums) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= s: min_length = min(min_length, end - start + 1) current_sum -= nums[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a positive integer weight. The task is to find a minimum spanning tree (MST) of the graph, which is a subset of the graph\'s edges that connects all the nodes together without any cycles and with the minimum possible total edge weight. You will need to output the total weight of the MST or say that it is impossible to connect all nodes. In the first line of input, read two integers n and m, representing the number of nodes and the number of edges in the graph respectively. The next m lines each contain three integers u, v, and w, representing an edge from node u to node v with weight w. If there are multiple MSTs, the weight of each MST will be the same, so output the total weight of one of them. If it\'s not possible to connect all nodes (the graph is disconnected), output \\"IMPOSSIBLE\\". Input limitations for getting 30 points are: - (1 leq n, m leq 1000) - (1 leq w leq 10^6) Input limitations for getting 100 points are: - (1 leq n leq 100000) - (1 leq m leq 200000) - (1 leq w leq 10^6) **Example:** Input: ``` 4 5 1 2 3 1 3 1 2 3 3 2 4 6 3 4 5 ``` Output: ``` 9 ``` In this example, there are multiple ways to form an MST, but one valid MST would include the edges (1, 3), (1, 2), and (3, 4) with a total weight of 1 + 3 + 5 = 9.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootx = find(parent, x) rooty = find(parent, y) if rootx != rooty: if rank[rootx] > rank[rooty]: parent[rooty] = rootx elif rank[rootx] < rank[rooty]: parent[rootx] = rooty else: parent[rooty] = rootx rank[rootx] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda x: x[2]) parent = list(range(n)) rank = [0] * n mst_weight = 0 mst_edges = 0 for edge in edges: u, v, w = edge rootu = find(parent, u) rootv = find(parent, v) if rootu != rootv: mst_weight += w mst_edges += 1 union(parent, rank, rootu, rootv) if mst_edges == n - 1: return mst_weight else: return \\"IMPOSSIBLE\\" def minimum_spanning_tree(n, m, edge_list): for i in range(len(edge_list)): edge_list[i][0] -= 1 edge_list[i][1] -= 1 return kruskal_mst(n, edge_list)"},{"question":"Design a function that accepts a string and returns the first non-repeating character in it. If there is no non-repeating character, return an underscore (\'_\'). The input consists of a single line containing a string of lowercase Latin letters (\'a\'-\'z\'). The length of the string is between 1 and 100 characters, inclusive. Output the first non-repeating character or an underscore if all characters repeat.","solution":"def first_non_repeating_char(s): Returns the first non-repeating character in the string `s`. If there is no non-repeating character, returns an underscore (\'_\'). from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # Find the first character that appears only once for char in s: if char_count[char] == 1: return char # If no such character is found, return \'_\' return \'_\'"},{"question":"Given a string consisting of only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', your task is to determine if the string is valid. A string is considered valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. 3. An empty string is also considered valid. Input: - A single line containing a string s, where 0 ≤ |s| ≤ 10^4. Output: - Print \\"YES\\" if the string is valid, otherwise print \\"NO\\". Examples: - Input: \\"()[]{}\\" Output: \\"YES\\" - Input: \\"([)]\\" Output: \\"NO\\" - Input: \\"{[]}\\" Output: \\"YES\\" Note that a matching bracket must be of the correct type and must occur in the correct order for the entire string to be considered valid. Your solution should efficiently handle the input size limit.","solution":"def is_valid(s: str) -> str: stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket: if stack == [] or matching_bracket[char] != stack.pop(): return \\"NO\\" else: return \\"NO\\" return \\"YES\\" if stack == [] else \\"NO\\""},{"question":"You are given a 2-dimensional grid of size n times m where each cell contains a number representing the height of that cell. Your goal is to find the highest peak in the grid. The grid is guaranteed to contain at least one peak. A cell is considered a peak if it is strictly greater than all of its adjacent cells. Adjacent cells are the cells to the left, right, top, and bottom. For boundary cells, only existing adjacent cells are considered. The first line of input contains two integers n and m (1 leq n, m leq 1000) representing the number of rows and columns in the grid respectively. The following n lines each contain m integers representing the height values in the grid (1 leq text{height}[i][j] leq 10^9). Print the value of the highest peak in the grid. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 9 ``` Input ``` 4 4 10 11 12 13 14 9 8 15 16 7 6 17 18 19 20 21 ``` Output ``` 21 ```","solution":"def find_highest_peak(grid): Finds the highest peak in the 2D grid. n = len(grid) m = len(grid[0]) highest_peak = -1 for i in range(n): for j in range(m): current_height = grid[i][j] if ((i == 0 or current_height > grid[i - 1][j]) and (i == n - 1 or current_height > grid[i + 1][j]) and (j == 0 or current_height > grid[i][j - 1]) and (j == m - 1 or current_height > grid[i][j + 1])): if current_height > highest_peak: highest_peak = current_height return highest_peak"},{"question":"Jessica is participating in a baking contest and needs to prepare a certain number of cupcakes. However, she has only a limited number of cupcake trays, each with a certain number of compartments. Jessica can bake multiple batches, but she\'d like to minimize the number of batches required for her contest entry. You are given the total number of cupcakes Jessica needs to bake, as well as the number of compartments in each of her cupcake trays. Your task is to determine the minimum number of batches Jessica needs to bake to achieve the required number of cupcakes. The first line contains an integer n, the total number of cupcakes Jessica needs to bake (1 leq n leq 1000). The second line contains an integer m, the number of compartments in each cupcake tray (1 leq m leq 100). Output a single integer, the minimum number of batches Jessica needs to bake to prepare at least n cupcakes. For example, if Jessica needs to bake 55 cupcakes and each tray has 12 compartments, she needs to bake 5 batches: - The first 4 batches will produce 48 cupcakes (12 * 4 = 48). - The fifth batch will produce the remaining 7 cupcakes, utilizing only 7 of the 12 compartments in the tray. # Input The first line contains a single integer n — the total number of cupcakes Jessica needs to bake (1 ≤ n ≤ 1000). The second line contains a single integer m — the number of compartments in each cupcake tray (1 ≤ m ≤ 100). # Output Output a single integer — the minimum number of batches needed. # Example **Input:** ``` 55 12 ``` **Output:** ``` 5 ```","solution":"import math def minimum_batches(n, m): Returns the minimum number of batches needed to bake at least n cupcakes, given m compartments in each tray. return math.ceil(n / m)"},{"question":"You are given a list of integers that represent the heights of buildings on a street. Your task is to determine the maximum sum of the heights of a subset of buildings such that no two selected buildings are adjacent to each other. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n integers h1, h2, ..., hn (0 ≤ hi ≤ 10^9) — the heights of the buildings. Output a single integer representing the maximum sum of heights of a non-adjacent subset of buildings. Example: Input: 5 3 2 5 10 7 Output: 15 Explanation: One possible selection of buildings is the first, third, and fifth buildings with heights 3, 5, and 7 respectively, resulting in a total height of 15.","solution":"def max_non_adjacent_sum(buildings): Given a list of building heights, return the maximum sum of heights where no two selected buildings are adjacent. if not buildings: return 0 n = len(buildings) if n == 1: return buildings[0] # Initialize two variables to store the inclusive and exclusive sums. inclusive = buildings[0] exclusive = 0 for i in range(1, n): new_exclusive = max(exclusive, inclusive) inclusive = exclusive + buildings[i] exclusive = new_exclusive return max(inclusive, exclusive)"},{"question":"Write a function that finds the longest subsequence in an array where the difference between consecutive elements is either 1 or -1. If there are multiple subsequences with the same maximum length, return any of them. The input is a single array of integers. The length of the array (1 ≤ length ≤ 1000) and the integer values (1 ≤ value ≤ 1000). Output the longest valid subsequence. **Example:** Input: ``` [3, 4, 5, 6, 7, 1, 2, 4, 3] ``` Output: ``` [3, 4, 5, 6, 7] ``` Explanation: The subsequence [3, 4, 5, 6, 7] has consecutive differences of 1 and is the longest such subsequence in the given array. Another valid output could be [1, 2].","solution":"def longest_subsequence(arr): if not arr: return [] longest_seq = [] current_seq = [arr[0]] for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) == 1: current_seq.append(arr[i]) else: if len(current_seq) > len(longest_seq): longest_seq = current_seq current_seq = [arr[i]] if len(current_seq) > len(longest_seq): longest_seq = current_seq return longest_seq"},{"question":"You are given a list of integers representing the heights of students standing in a line. The teacher wants to quickly identify the number of distinct groups of students such that each group is made up of consecutive students whose height is strictly increasing within the group. Your task is to write a program that counts the number of such strictly increasing groups. For example, given the heights `[1, 2, 1, 2, 3, 1]`, the groups are `[1, 2]`, `[1, 2, 3]`, and `[1]`, so the program should output `3`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of students. - The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9) representing the heights of the students. # Output - Output a single integer, the number of distinct groups of consecutive students standing in strictly increasing order. # Example Input ``` 6 1 2 1 2 3 1 ``` Output ``` 3 ``` # Explanation There are three distinct strictly increasing groups of consecutive students: `[1, 2]`, `[1, 2, 3]`, and `[1]`. Hence, the output is `3`.","solution":"def count_increasing_groups(heights): Counts the number of distinct groups of consecutive students whose heights are strictly increasing. if not heights: return 0 count = 0 n = len(heights) i = 0 while i < n: # Start a new group count += 1 # Move i to the end of the current increasing group while i + 1 < n and heights[i + 1] > heights[i]: i += 1 i += 1 # Move to the next potential start return count"},{"question":"**Problem Statement:** Bob is very fond of magnet arrangements and has \'n\' magnetic discs each with a magnetic strength. Unfortunately, the discs start interfering when they are placed together if their respective magnetic strengths form an increasing subsequence. To minimize this interference, Bob wants to find a way to reduce the number of discs while ensuring that no interference occurs. Given an array of `n` magnetic disc strengths, Bob needs your help to determine the length of the longest subsequence of discs where no such interference occurs. More specifically, you need to find the length of the longest non-increasing subsequence in the given array. **Input:** The first line contains an integer `n` (1 ≤ n ≤ 100000), the number of magnetic discs. The second line contains `n` integers, representing the magnetic strengths of the discs, where each strength is between 1 and 10^9, inclusive. **Output:** Print a single integer, the length of the longest non-increasing subsequence. **Example:** Input: ``` 8 5 3 4 4 2 2 6 1 ``` Output: ``` 6 ``` Explanation: The longest non-increasing subsequence is [5, 4, 4, 2, 2, 1], which has a length of 6. **Note:** A subsequence is a sequence derived from another sequence by deleting some elements without changing the order of the remaining elements.","solution":"def longest_non_increasing_subsequence(arr): n = len(arr) if n == 0: return 0 dp = [1] * n for i in range(1, n): for j in range(0, i): if arr[j] >= arr[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given an array of integers, your task is to determine the length of the longest subsequence that alternates between increasing and decreasing. An alternating subsequence is one in which the elements increase and decrease in strict alternation: For example, for the array `[1, 7, 4, 9, 2, 5]`, a valid alternating subsequence might be `[1, 7, 4, 9, 2, 5]` and its length is 6. Write a function `longest_alternating_subsequence(arr)` that takes a list of integers `arr` and returns an integer representing the length of the longest possible alternating subsequence. # Input - A list of integers `arr` with length `n` (1 ≤ n ≤ 1000). # Output - An integer representing the length of the longest alternating subsequence. # Example ```python assert longest_alternating_subsequence([1, 7, 4, 9, 2, 5]) == 6 assert longest_alternating_subsequence([1, 5, 4]) == 3 assert longest_alternating_subsequence([1, 2, 3, 4, 5]) == 2 assert longest_alternating_subsequence([5, 4, 3, 2, 1]) == 2 ```","solution":"def longest_alternating_subsequence(arr): if len(arr) == 0: return 0 up = down = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: up = down + 1 elif arr[i] < arr[i - 1]: down = up + 1 return max(up, down)"},{"question":"You are given an array of integers and a threshold value. Your task is to check whether there is a contiguous subarray with a sum exactly equal to the threshold. The first line of the input contains two integers n and threshold (1 le n le 10^5, |threshold| le 10^9) — the number of elements in the array and the threshold value respectively. The second line contains n integers a_1, a_2, dots, a_n (|a_i| le 10^4) — the elements of the array. Print \\"YES\\" if there is a contiguous subarray with a sum exactly equal to the threshold. Otherwise, print \\"NO\\". # Input * The first line contains two integers n and threshold (1 le n le 100000, |threshold| le 1000000000). * The second line contains n integers (-10000 le a[i] le 10000). # Output Print \\"YES\\" if there exists a contiguous subarray whose sum is exactly equal to the threshold, otherwise print \\"NO\\". # Example Input 6 5 1 4 -2 1 5 -3 Output YES Input 6 100 1 2 3 4 5 6 Output NO # Explanation In the first example, the sum of the subarray [1, 4] is exactly 5, which matches the threshold. Thus, the output is \\"YES\\". In the second example, no contiguous subarray adds up to 100, so the output is \\"NO\\".","solution":"def check_subarray_sum(n, threshold, arr): Returns \\"YES\\" if there exists a contiguous subarray whose sum is exactly equal to the threshold, otherwise returns \\"NO\\". # Create a dictionary to maintain the cumulative sum and its index cum_sum = 0 cum_dict = {0: -1} # To handle the case when subarray starts from index 0 for i in range(n): cum_sum += arr[i] if (cum_sum - threshold) in cum_dict: return \\"YES\\" if cum_sum not in cum_dict: cum_dict[cum_sum] = i return \\"NO\\" # Example usage: # n, threshold = 6, 5 # arr = [1, 4, -2, 1, 5, -3] # print(check_subarray_sum(n, threshold, arr)) # Output: \\"YES\\""},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a weight associated with it. The nodes are labeled from 1 to n. Your task is to determine the minimum total weight of a set of edges that connects all the nodes (i.e., find the Minimum Spanning Tree of the graph). **Input:** The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) representing the number of nodes and the number of edges in the graph, respectively. Each of the next m lines contains three space-separated integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000), representing an edge between node u and node v with weight w. It is guaranteed that the graph is connected. **Output:** Print a single integer, the total weight of the minimum spanning tree. # Example: **Input:** ``` 4 5 1 2 10 1 3 6 1 4 5 2 3 15 3 4 4 ``` **Output:** ``` 19 ``` **Note:** In the example above, the minimum spanning tree will include edges with weights 5, 4, and 10, thus the total weight is 19.","solution":"def find_minimum_spanning_tree_weight(n, m, edges): Finds the total weight of the Minimum Spanning Tree (MST) for a given undirected graph. :param n: Number of nodes in the graph. :param m: Number of edges in the graph. :param edges: List of edges, where each edge is represented by a tuple (u, v, w). :return: Total weight of the Minimum Spanning Tree. # Using Kruskal\'s algorithm and Union-Find data structure parent = list(range(n + 1)) rank = [0] * (n + 1) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 edges.sort(key=lambda x: x[2]) mst_weight = 0 for u, v, w in edges: if find(u) != find(v): union(u, v) mst_weight += w return mst_weight"},{"question":"You are given a list containing n integers. Your task is to find all pairs of elements (a, b) in the list such that their product is a perfect square. Formally, you need to identify all pairs of indices i and j (1 le i < j le n) where the product of the elements at these indices (a_i times a_j) is a perfect square. For example, if the list is [2, 3, 4, 9, 12], the pairs (2, 3) and (4, 9) are suitable because 2 times 4 equals 16 (4^2) and 3 times 12 equals 36 (6^2). However, the pair (2, 3) yielding 6 and the pair (4, 12) yielding 48 are not suitable since neither 6 nor 48 are perfect squares. The first line contains one integer t (1 le t le 10) – the number of test cases. Then t test cases follow. Each test case starts with an integer n (2 le n le 100000) – the number of elements in the list. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^6). For each test case, output the number of pairs on a separate line. Input: ``` 2 5 2 3 4 9 12 3 5 6 7 ``` Output: ``` 2 0 ```","solution":"import math from collections import defaultdict def count_perfect_square_pairs(arr): def is_perfect_square(num): if num < 0: return False root = int(math.sqrt(num)) return root * root == num count = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): if is_perfect_square(arr[i] * arr[j]): count += 1 return count def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(count_perfect_square_pairs(arr)) return results def main(inputs): lines = inputs.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append(arr) index += 2 return process_test_cases(test_cases)"},{"question":"You are given a city with a number of junctions connected by one-way streets. There is exactly one unique path from the central junction (indexed as 1) to any other junction. Your task is to determine the minimum number of streets you need to remove to make all the junctions in the city reachable from each other. The city junctions and streets are represented as a directed graph with n nodes (numbered from 1 to n) and n-1 edges. The central junction with index 1 is the only one having exactly one outgoing street to another junction. You need to remove a set of streets such that the remaining graph is a strongly connected component (SCC). A strongly connected component is defined as a subset of the nodes such that every node from this subset is reachable from any other node in the subset. Given the number of junctions and the list of streets, determine the minimum number of streets you need to remove so that all the junctions become part of one SCC. Input format: - The first line contains an integer n (2 ≤ n ≤ 10^5), the number of junctions. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u != v), denoting a street from junction u to junction v. Output format: Print an integer representing the minimum number of streets that need to be removed. Example: Input: 5 1 2 2 3 3 4 4 5 Output: 3 Explanation: Any removal of streets in a tree structure (unique path between nodes) results in removing \'n-1\' streets till it forms a single node, as there is no cycle and every operation disconnects part of the junctions. Notably, we only need to remove the streets: - 1 -> 2 - 2 -> 3 - 3 -> 4 to make all junctions reachable among each other by taking the reverse path where applicable from the remaining graph which inherently forms a cycle or multiple paths thereafter.","solution":"def min_streets_to_remove(n, streets): Determine the minimum number of streets that need to be removed so that all the junctions in the city become part of one strongly connected component (SCC). :param n: int, number of junctions :param streets: list of tuple, streets represented as (u, v) :return: int, minimum number of streets to remove # Since it\'s given that the graph is a tree with unique paths, we need to break # the tree structure down enough so the graph becomes strongly connected. # For a strongly connected graph (SCC) from a tree of n nodes, we need to remove n-1 edges # because any tree with n nodes has exactly n-1 edges. return n - 1"},{"question":"You are given an array of integers `a` of size `n` (1 ≤ n ≤ 10^5). We define the range-sum of the subarray from index i to index j (1 ≤ i ≤ j ≤ n) as the sum of elements from `a[i]` to `a[j]`, inclusive. For each of the `q` queries, you are given two integers `l` and `r` (1 ≤ l ≤ r ≤ n) which denotes the left and right endpoints of the subarray, respectively. You need to find the range-sum for each query. The first line contains two integers `n` and `q` — representing the number of elements in array `a` and the number of queries respectively (1 ≤ n, q ≤ 10^5). The second line contains `n` integers, the elements of the array `a` (1 ≤ a_i ≤ 10^9). Next, `q` lines follow, each containing two integers `l` and `r` for each query. Print the result for each query on a new line. Example: Input: 5 3 1 2 3 4 5 1 3 2 4 1 5 Output: 6 9 15","solution":"def range_sum(n, q, array, queries): Computes the range-sum for each query from the given array. Parameters: n (int): Number of elements in array q (int): Number of queries array (list of int): List of integers queries (list of tuple): List of (l, r) queries Returns: list of int: List of sums for each query # Step 1: Compute the prefix sum array prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] # Step 2: Answer each query using the prefix sum array result = [] for l, r in queries: result.append(prefix_sum[r] - prefix_sum[l - 1]) return result"},{"question":"Given an integer `n` (1 ≤ n ≤ 10^9), determine if you can represent it as the sum of exactly two distinct positive integers such that both integers are prime. If it is possible, print \\"YES\\" and the two integers. Otherwise, print \\"NO\\". For example: 1. Input: 10 Output: YES 3 7 2. Input: 11 Output: NO Note: There may be more than one possible pair of primes that sum to n. Any valid pair is acceptable.","solution":"def is_prime(num): Helper function to check if a number is prime if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def find_two_primes_sum(n): Determines if n can be represented as the sum of exactly two distinct positive integers that are both prime. If possible, return a tuple (\\"YES\\", p1, p2). Otherwise, return (\\"NO\\",). for i in range(2, n): if is_prime(i) and is_prime(n - i): return (\\"YES\\", i, n - i) return (\\"NO\\",) # Debug print statement for internal testing # print(find_two_primes_sum(10)) # Expected output: (\\"YES\\", 3, 7) or similar valid pair # print(find_two_primes_sum(11)) # Expected output: (\\"NO\\",)"},{"question":"You are given a series of meetings for a day. Each meeting has a start time and an end time. Your task is to determine the minimum number of conference rooms required to host all the meetings. # Input - The first input line contains an integer n (1 ≤ n ≤ 100) — the number of meetings. - Each of the next n lines contains two integers, start and end (0 ≤ start < end ≤ 1000) — the start time and end time of a meeting. # Output - Print a single integer — the minimum number of conference rooms required. # Examples Example 1 **Input:** ``` 3 1 4 2 5 3 6 ``` **Output:** ``` 3 ``` Example 2 **Input:** ``` 4 1 3 2 6 8 10 15 18 ``` **Output:** ``` 2 ``` # Note In the first example, all three meetings overlap, thus three separate conference rooms are needed. In the second example, at most two meetings overlap at any given time, so two conference rooms are required.","solution":"def min_conference_rooms(meetings): Determine the minimum number of conference rooms required to host all the meetings. :param meetings: A list of tuples (start, end) representing the meetings. :return: The minimum number of conference rooms required. if not meetings: return 0 # Separate the start and end times start_times = sorted([meeting[0] for meeting in meetings]) end_times = sorted([meeting[1] for meeting in meetings]) start_pointer, end_pointer = 0, 0 used_rooms = 0 # Iterate over meetings and count simultaneous meetings while start_pointer < len(meetings): if start_times[start_pointer] < end_times[end_pointer]: used_rooms += 1 start_pointer += 1 else: end_pointer += 1 start_pointer += 1 return used_rooms"},{"question":"You are given a list of positive integers representing the heights of skyscrapers in a city skyline. The skyline is viewed from the left side of the city, where only some of the skyscrapers are visible. A skyscraper is visible from the left if there are no taller skyscrapers before it (to the left of it). Write a function to determine the number of skyscrapers visible from the left side of the city. **Input:** - The first line contains an integer `t` (1 le t le 10^4) - the number of test cases. - For each test case: - The first line contains an integer `n` (1 le n le 10^5) - the number of skyscrapers. - The second line contains `n` space-separated integers `h_1, h_2, ..., h_n` (1 le h_i le 10^9) - the heights of the skyscrapers. **Output:** - For each test case, output the number of skyscrapers visible from the left. **Example:** ``` Input: 3 5 3 1 4 2 5 4 1 2 3 4 3 10 9 8 Output: 3 4 1 ``` **Explanation:** - In the first test case, the visible skyscrapers are of heights 3, 4, and 5. - In the second test case, all the skyscrapers have increasing heights, so all 4 are visible. - In the third test case, only the first skyscraper (height 10) is visible as the rest are shorter.","solution":"def count_visible_skyscrapers(t, test_cases): results = [] for i in range(t): n, heights = test_cases[i] max_height = 0 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height results.append(visible_count) return results"},{"question":"You are given an array of positive integers and a target integer K. Your task is to find if there exists a subarray (continuous segment) whose sum is exactly K. If such a subarray exists, return the starting and ending indices (1-based) of the subarray. If no such subarray exists, return -1. Each test contains multiple test cases. The first line contains t (1 ≤ t ≤ 10) - the number of test cases. Description of the test cases follows. The first line of each test case contains two integers n and K (1 ≤ n ≤ 10^5, 1 ≤ K ≤ 10^9) - the number of elements in the array and the target sum. The second line of each test case contains n positive integers a_i (1 ≤ a_i ≤ 10^5) - the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6. For each test case: If a subarray whose sum is K exists, print the starting and ending indices (1-based) of the subarray. If no such subarray exists, print -1. Example Input: 2 5 12 1 2 3 7 5 10 15 1 2 3 4 5 6 7 8 9 10 Example Output: 2 4 1 5","solution":"def find_subarray_with_sum_k(arr, k): Returns the starting and ending indices (1-based) of the subarray whose sum is exactly k. If no such subarray exists, return -1. current_sum = 0 start = 0 for end in range(len(arr)): current_sum += arr[end] while current_sum > k and start <= end: current_sum -= arr[start] start += 1 if current_sum == k: return (start + 1, end + 1) return -1 def process_test_cases(test_cases): Processes multiple test cases and returns results for each case. results = [] for n, k, arr in test_cases: result = find_subarray_with_sum_k(arr, k) results.append(result) return results"},{"question":"You have been given a list of integers and a fixed integer window size. Your task is to calculate the average of all integers within the sliding window for each possible position of the window over the list. Specifically, you need to implement a function that averages the values of the subarray of fixed size as it slides from the left end to the right end of the list. Write a function `sliding_window_average(arr, k)` that takes in: - `arr`, a list of integers where 1 ≤ length of arr ≤ 10^5 and the absolute value of each integer does not exceed 10^4. - `k`, an integer denoting the size of the sliding window where 1 ≤ k ≤ length of arr. The function should return a list of floating-point numbers representing the sliding window averages. # Example ```python def sliding_window_average(arr, k): # implement logic here pass # Example Usage print(sliding_window_average([1, 2, 3, 4, 5], 3)) # Output: [2.0, 3.0, 4.0] # Explanation: # The sliding window `[1, 2, 3]` gives an average of 2.0 # The sliding window `[2, 3, 4]` gives an average of 3.0 # The sliding window `[3, 4, 5]` gives an average of 4.0 ```","solution":"def sliding_window_average(arr, k): Calculate the average of all integers within the sliding window for each possible position of the window over the list. :param arr: List[int], list of integers :param k: int, fixed integer window size :return: List[float], list of floating-point numbers representing the sliding window averages if not arr or k <= 0 or k > len(arr): return [] result = [] window_sum = sum(arr[:k]) result.append(window_sum / k) for i in range(k, len(arr)): window_sum += arr[i] - arr[i - k] result.append(window_sum / k) return result"},{"question":"Given a sequence of integers, a subsequence is obtained by deleting some (or no) elements of the sequence without changing the order of the remaining elements. For example, [3, 5, 7] is a subsequence of [3, 4, 5, 6, 7]. A beautiful subsequence of this sequence has the following properties: 1. It is strictly increasing. 2. Each element in the subsequence is a power of 2 (i.e., elements are of the form 2^k where k is a non-negative integer). Given the sequence, find the length of the longest beautiful subsequence. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the length of the sequence. - The second line contains n integers ai (1 ≤ ai ≤ 10^9), the elements of the sequence. Output: - Print a single integer, the length of the longest beautiful subsequence. Example: Input: 6 1 2 4 8 16 3 Output: 5 Explanation: From the given sequence [1, 2, 4, 8, 16, 3], the longest beautiful subsequence is [1, 2, 4, 8, 16] which has a length of 5.","solution":"def longest_beautiful_subsequence(n, sequence): Finds the length of the longest beautiful subsequence from the given sequence. A beautiful subsequence is strictly increasing and every element is a power of 2. :param n: Length of the sequence :param sequence: List of integers in the sequence :return: Length of the longest beautiful subsequence # Precompute powers of 2 up to the maximum possible value powers_of_2 = set() x = 1 while x <= 10**9: powers_of_2.add(x) x *= 2 # Filter the sequence to only include powers of 2 filtered_sequence = [x for x in sequence if x in powers_of_2] return len(filtered_sequence)"},{"question":"You are given an array of integers a consisting of n positive integers. A subarray of array a is a continuous segment of elements from a. For example, [4, 5, 6] is a subarray of [1, 4, 5, 6, 2] and [5, 2, 1] is not. The length of the subarray is the number of elements in it. Let\'s call some subarray of length m valid if the sum of the elements in the subarray is divisible by 3. For example, subarrays [3, 6], [9], and [2, 1] are valid, and subarrays [1, 5] and [4] are not. Your task is to find any valid subarray of array a or report that there is none. Note that it is not required to maximize or minimize the length of the resulting subarray. The first line contains a single integer n (1 le n le 1000) — the number of elements in the array a. The second line contains the array a, consisting of exactly n positive integers (1 le a_i le 10^4). Print \\"NO\\" if there is no valid subarray in the array a. Otherwise, the first line should contain \\"YES\\". The second line should contain any valid subarray of array a. The first example has multiple correct answers.","solution":"def find_valid_subarray_divisible_by_3(n, a): for i in range(n): if a[i] % 3 == 0: return \\"YES\\", [a[i]] if i < n - 1: if (a[i] + a[i + 1]) % 3 == 0: return \\"YES\\", [a[i], a[i + 1]] return \\"NO\\", []"},{"question":"You are given a grid consisting of n rows and m columns. Each cell of the grid contains either a \'0\' or a \'1\'. You can move from one cell to another if they share an edge and contain different values. You need to find the minimum number of moves required to reach from the top-left corner (1, 1) to the bottom-right corner (n, m) of the grid. If it is not possible to reach the destination, return -1. The first line of the input contains two integers, n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns of the grid. Each of the following n lines contains m characters, either \'0\' or \'1\', representing the cells of the grid. Output a single integer, the minimum number of moves required to reach from (1, 1) to (n, m). If it is not possible, print -1. **Example:** **Input:** ``` 4 5 01010 10101 01010 10101 ``` **Output:** ``` 7 ``` In the example, the minimum number of moves from the top-left to bottom-right corner is 7.","solution":"from collections import deque def min_moves(grid): n = len(grid) m = len(grid[0]) def is_valid(x, y, prev_val): return 0 <= x < n and 0 <= y < m and grid[x][y] != prev_val directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, distance = queue.popleft() if x == n - 1 and y == m - 1: return distance for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, grid[x][y]) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, distance + 1)) return -1 def parse_input(n, m, lines): grid = [list(line.strip()) for line in lines] return min_moves(grid)"},{"question":"You are given an array of integers representing a sequence of steps taken by a person walking. Each step can be represented by a positive integer, a negative integer, or zero. Positive integers represent steps taken forward, negative integers represent steps taken backward, and zero represents a pause where no step is taken. Define a \\"fluctuation\\" as any change in direction, whether from forward to backward, backward to forward, or to/from a pause. Your task is to count the total number of fluctuations in the sequence. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of steps in the sequence. The second line contains n integers li (−1000 ≤ li ≤ 1000) — the sequence of steps. In the only line, print the number of fluctuations in the sequence. Example: Input: 5 1 -2 0 2 -1 Output: 4","solution":"def count_fluctuations(steps): Returns the total number of fluctuations in the sequence of steps. if not steps: return 0 fluctuations = 0 for i in range(1, len(steps)): if (steps[i-1] > 0 and steps[i] <= 0) or (steps[i-1] < 0 and steps[i] >= 0) or (steps[i-1] == 0 and steps[i] != 0): fluctuations += 1 return fluctuations"},{"question":"You are managing a parking lot that contains `n` parking spots, arranged in a single line. Each spot is either empty or occupied by a car. Additionally, each spot has a certain distance from the entrance of the parking lot. A car arrives at the entrance and you need to assign it to an empty spot such that the spot is as close to the entrance as possible. If there are multiple spots at the same distance, assign the car to any one of them. After the car is assigned an empty spot, print the updated status of the parking lot. Also, print the total number of occupied spots after the car has been assigned a spot. Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000) – the number of parking spots. - The second line contains `n` integers – the initial state of the parking lot, either 0 (empty) or 1 (occupied). - The third line contains `n` integers – the distances of each spot from the entrance. Output: - `n` integers – the updated state of the parking lot after the car is assigned a spot. - A single integer – the total number of occupied spots after the car has been assigned a spot. Example: Input: ``` 5 0 1 0 0 1 1 2 3 4 5 ``` Output: ``` 1 1 0 0 1 3 ``` Explanation: There are 5 parking spots in the parking lot. Initially, spots 1 and 5 are occupied. The distances of the spots from the entrance are provided. The closest empty spot to the entrance is the first spot (distance 1). Therefore, the car is assigned to the first spot. The updated state of the parking lot is `1 1 0 0 1` and the total number of occupied spots is now 3.","solution":"def assign_parking_spot(n, initial_state, distances): Assign a car to the closest empty parking spot. Args: n (int): Number of parking spots. initial_state (list of int): Initial state of the parking spots (0 for empty, 1 for occupied). distances (list of int): Distances of each spot from the entrance. Returns: tuple: Updated state of the parking spots and the total number of occupied spots. for i in range(n): if initial_state[i] == 0: initial_state[i] = 1 break total_occupied = sum(initial_state) return initial_state, total_occupied"},{"question":"You are given an array of integers a consisting of n integers. You can perform the following operation on the array any number of times (possibly, zero): 1. Choose any element in the array and increase or decrease it by 1. You need to make all the elements of the array equal by using the least number of operations described above. Output the minimum number of operations needed. The first line contains one integer n (1 le n le 100) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the array. Output a single integer — the minimum number of operations needed to make all elements of the array equal. # Example Input: ``` 3 1 2 3 ``` Output: ``` 2 ``` Input: ``` 4 1 1 1 1000 ``` Output: ``` 999 ``` In the first example, you can make all elements equal to 2 with 2 operations: increase the first element by 1, and decrease the third element by 1. Therefore, the minimum operations needed are 2. In the second example, you need to make the fourth element equal to 1, which requires 999 operations. Therefore, the minimum operations needed are 999.","solution":"def min_operations_to_equal_elements(n, a): Returns the minimum number of operations needed to make all elements in the array equal. Parameters: n (int): The number of elements in the array. a (list of int): The array of integers. Returns: int: The minimum number of operations needed. # Median minimizes the sum of absolute deviations a.sort() median = a[n // 2] # Calculate total operations to make all elements equal to the median operations = sum(abs(x - median) for x in a) return operations"},{"question":"Peter is organizing a coding competition and needs to create a schedule for the event. The event consists of several coding problems, each identified by a unique integer ID and characterized by a duration in hours. Peter needs to pack all the problems into as few days as possible. He can solve multiple problems in a day, but the total duration of problems solved on a day must not exceed a given limit (in hours). Given an integer n representing the number of problems, followed by n pairs of integers (each pair containing an ID and duration in hours for each problem), and an integer d representing the maximum hours available for each day, determine the minimum number of days required to solve all the problems. Your task is to write a function that calculates the minimum number of days required. Input format: - The first line contains an integer n (1 ≤ n ≤ 100) — the number of problems. - The next n lines contain two integers each: the problem ID and its duration in hours (1 ≤ duration ≤ 24). - The last line contains an integer d (1 ≤ d ≤ 24) — the maximum hours per day available to solve problems. Output format: - Print a single integer — the minimum number of days required to solve all the problems. Example: Input: 3 1 8 2 4 3 6 10 Output: 2 In this example, Peter can solve problem 1 (8 hours) on the first day and problems 2 (4 hours) and 3 (6 hours) on the second day, which totals up to 10 hours per day, fitting within the given limit. Therefore, the minimum number of days required is 2.","solution":"def min_days_to_solve_problems(n, problems, d): Returns the minimum number of days required to solve all the given problems. :param n: int, number of problems :param problems: list of tuples (int, int), each tuple contains problem ID and duration in hours :param d: int, maximum hours per day available to solve problems :return: int, minimum number of days required to solve all problems total_hours = sum(duration for _, duration in problems) days_needed = (total_hours + d - 1) // d # Calculate the ceiling of total_hours / d return days_needed"},{"question":"You are given a **grid** with `r` rows and `c` columns. Each cell of the grid contains either a `0` or a `1`. In each move, you can toggle any row or any column (i.e., change all `0`s to `1`s and all `1`s to `0`s in that row or column). Your task is to determine the minimum number of moves required to make all elements of the grid `0`s. The first line contains two integers, `r` and `c` (1 ≤ r, c ≤ 1000) — the number of rows and columns in the grid. The next `r` lines each contain `c` integers (either `0` or `1`), representing the grid. Print the minimum number of moves required to make all elements of the grid equal to `0`. For example: Input: ``` 3 4 0 1 0 1 1 0 1 0 0 0 0 1 ``` Output: ``` 3 ``` Explanation: 1. Toggle the 2nd row: ``` 0 1 0 1 0 1 0 1 0 0 0 1 ``` 2. Toggle the 2nd column: ``` 0 0 0 1 0 0 0 1 0 1 0 1 ``` 3. Toggle the 4th column: ``` 0 0 0 0 0 0 0 0 0 0 0 0 ```","solution":"def min_moves_to_zero_grid(grid): Returns the minimum number of moves required to make all elements of the grid zeros. r = len(grid) c = len(grid[0]) # Count the number of 1s in each row row_count = [sum(row) for row in grid] # Count the number of 1s in each column col_count = [sum(grid[i][j] for i in range(r)) for j in range(c)] # Number of 1s in the grid total_ones = sum(row_count) # Minimum moves: either toggle rows with 1s or columns with 1s min_moves = min(row_count.count(0) + r - row_count.count(0), col_count.count(0) + c - col_count.count(0)) return min_moves if total_ones > 0 else 0"},{"question":"Alex is a passionate botanist who has a special liking for trees. He has a small tree garden where he has n small trees planted in a row, each assigned a unique integer ID from 1 to n. Due to a recent storm, the trees in the garden got rearranged and Alex found them in a different order. Alex wants to retrieve the original order of the trees for analysis. He remembers that the storm moved each tree from its original position to a new position. Specifically, he has an array of integers indicating the new position of each tree. Given the array of new positions, Alex wants you to help him find the original order of the trees. You need to determine the tree ID that originally occupied the i-th position in the row. The first line contains an integer n (1 ≤ n ≤ 100) — the number of trees in the garden. The second line contains n space-separated integers: the i-th number is the new position of the tree that originally occupied position i. Print n space-separated integers: the i-th number should be the ID of the tree that originally occupied the position i. # Example Input: 4 3 1 4 2 Output: 2 4 1 3 # Explanation: Original positions: 1 2 3 4 New positions: 3 1 4 2 Tree that was at position 1 moved to position 3 Tree that was at position 2 moved to position 1 Tree that was at position 3 moved to position 4 Tree that was at position 4 moved to position 2 Thus, the original order: 2 4 1 3","solution":"def find_original_order(n, new_positions): Given the number of trees \'n\' and their current positions \'new_positions\', return the original order of the tree IDs. original_order = [0] * n for i in range(n): original_order[new_positions[i] - 1] = i + 1 return original_order"},{"question":"You\'ve been given a dictionary where the key is a string and the value is an integer. For example: ``` { \\"apple\\": 5, \\"banana\\": 3, \\"orange\\": 7, \\"pear\\": 4 } ``` Write a function `sort_dict_by_values` that takes this dictionary as input and returns a list of the keys sorted by their values in descending order. If two keys have the same value, their relative order should be the same as in the original dictionary. **Function Signature**: ```python def sort_dict_by_values(d: dict) -> list: ``` **Input**: - A dictionary `d` where each key is a string and each value is a positive integer. The dictionary will have at most 10^4 entries. **Output**: - A list of strings representing the keys sorted by their corresponding values in descending order. **Example**: ```python d = { \\"apple\\": 5, \\"banana\\": 3, \\"orange\\": 7, \\"pear\\": 4 } sort_dict_by_values(d) ``` **Output**: ``` [\'orange\', \'apple\', \'pear\', \'banana\'] ```","solution":"def sort_dict_by_values(d: dict) -> list: Takes a dictionary with string keys and integer values, and returns a list of keys sorted by the values in descending order. return sorted(d.keys(), key=lambda k: d[k], reverse=True)"},{"question":"Given a string `s` and a list of words `wordList`, return `True` if `s` can be segmented into a space-separated sequence of one or more dictionary words from `wordList`. Note that the same word in the dictionary may be reused multiple times in the segmentation. # Input: - A string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 300). - A list of words `wordList` containing words consisting of lowercase English letters (1 ≤ |wordList| ≤ 1000, 1 ≤ |wordList[i]| ≤ 20). # Output: - Return `True` if `s` can be segmented into a space-separated sequence of one or more dictionary words from `wordList`. Otherwise, return `False`. # Example: Example 1: ``` Input: s = \\"leetcode\\" wordList = [\\"leet\\", \\"code\\"] Output: True ``` Explanation: Return true because \\"leetcode\\" can be segmented as \\"leet code\\". Example 2: ``` Input: s = \\"applepenapple\\" wordList = [\\"apple\\", \\"pen\\"] Output: True ``` Explanation: Return true because \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Note that you are allowed to reuse the words in wordList. Example 3: ``` Input: s = \\"catsandog\\" wordList = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: False ``` Explanation: The string cannot be segmented into a space-separated sequence of one or more dictionary words. # Constraints: - The input string only consists of lowercase English letters. - The elements of `wordList` are distinct.","solution":"def wordBreak(s, wordList): Returns True if the string s can be segmented into a space-separated sequence of one or more dictionary words from wordList. Otherwise, returns False. wordSet = set(wordList) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in wordSet: dp[i] = True break return dp[-1]"},{"question":"You are given an array of integers nums representing the position of stones in a river. You are allowed to jump from one stone to another. Starting from the first stone, you can make a jump of length k or k+1 where k is the number of jumps made so far (starting from k=1). Write a function to determine if you can reach the last stone. Return true if you can reach the last stone, otherwise, return false. The elements in the nums array are unique and sorted in ascending order. Function Signature: `def canCross(nums: List[int]) -> bool:` # Input - An array `nums` of integers representing the positions of stones in the river. (1 ≤ len(nums) ≤ 2000) # Output - A boolean value indicating whether you can reach the last stone. # Example `Input: nums = [0, 1, 3, 5, 6, 8, 12, 17]` `Output: True` `Explanation: You can start at the first stone and make the following jumps: - Jump 1 unit to the second stone (position 1), - Jump 2 units to the third stone (position 3), - Jump 2 units to the fourth stone (position 5), - Jump 3 units to the sixth stone (position 8), - Jump 4 units to the seventh stone (position 12), - Jump 5 units to the last stone (position 17).` `Input: nums = [0, 1, 2, 3, 4, 8, 9, 11]` `Output: False` `Explanation: There is no way to jump to the last stone because the gap between position 4 and 8 is too large.`","solution":"from typing import List def canCross(nums: List[int]) -> bool: if not nums or nums[0] != 0: return False n = len(nums) if n == 1: return True # A dictionary where key is the stone and value is a set of jump sizes that can reach this stone jumps = {stone: set() for stone in nums} jumps[0].add(1) for stone in nums: for jump in jumps[stone]: reach = stone + jump if reach == nums[-1]: return True if reach in jumps: if jump - 1 > 0: jumps[reach].add(jump - 1) jumps[reach].add(jump) jumps[reach].add(jump + 1) return False"},{"question":"A car manufacturer is designing a new safety feature for their vehicles. The feature should alert the driver if the car detects a risky lane change attempt. The road is modeled as a sequence of lanes moving in one direction, with each lane having a series of sensors. Your task is to write a program that simulates this detection system. Each lane is represented by a string where a `\'C\'` represents the car, an `\'X\'` represents an obstacle, and a `\'.\'` represents an empty space. The car can only attempt to move to an adjacent lane if there\'s no obstacle directly in the new position or within one position before or after the new position in the target lane. Given the current layout of the lanes, determine if the car can safely move to any other lane, and if so, print \\"SAFE\\", otherwise print \\"NOT SAFE\\". # Input: The first line contains an integer n (1 ≤ n ≤ 100) representing the number of lanes. The next n lines each contain a string of equal length m (2 ≤ m ≤ 100), representing the configuration of the lanes. Each string will have exactly one `\'C\'` character and will only contain `\'C\'`, `\'X\'`, and `\'.\'`. # Output: Print \\"SAFE\\" if the car can safely move to another lane based on the given conditions, otherwise print \\"NOT SAFE\\". # Example: Input: ``` 3 ...C.... .X..X... ......X. ``` Output: ``` SAFE ``` Explanation: - The car is currently in the first lane. - It can safely move to the third lane because there are no obstacles in the third lane at positions `C`, `C-1`, or `C+1`. Example: Input: ``` 2 ..C.... .X..... ``` Output: ``` NOT SAFE ``` Explanation: - The car is currently in the first lane. - There\'s an obstacle directly where the car would move in the second lane, making the lane change risky.","solution":"def safety_check(n, lanes): # To determine the index of \'C\' in the first lane current_lane_index = lanes[0].index(\'C\') for i in range(1, n): if lanes[i][current_lane_index] != \'X\' and (current_lane_index == 0 or lanes[i][current_lane_index - 1] != \'X\') and (current_lane_index == len(lanes[0]) - 1 or lanes[i][current_lane_index + 1] != \'X\'): print(\\"SAFE\\") return print(\\"NOT SAFE\\") # Example usage n = 3 lanes = [ \\"...C....\\", \\".X..X...\\", \\"......X.\\", ] safety_check(n, lanes) # Expected output: \\"SAFE\\""},{"question":"You are given an integer array A of length n (where 1 le n le 10^5) and an integer k. You need to perform k operations on the array. In each operation, you can choose a subarray of length m (where 1 le m le n) and increase each element of that subarray by exactly 1. Your objective is to maximize the minimum value in the array after performing the k operations. Formally, you need to determine the maximum possible value of the minimum element in the array A after performing the operations optimally. The first line contains two integers n and k (1 le n le 10^5, 1 le k le 10^9). The second line contains n integers representing the elements of the array A (1 le A_i le 10^9). Print one integer — the maximum possible value of the minimum element in the array after performing k operations. # Example Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` 3 ``` Explanation: - In the first operation, we increase the subarray [1, 2, 3] (indexed 1 to 3) to [2, 3, 4] resulting in the array [2, 3, 4, 4, 5]. - In the second operation, we increase the subarray [2, 3, 4] (indexed 1 to 3) to [3, 4, 5] resulting in the array [3, 4, 5, 4, 5]. - In the third operation, we increase the subarray [3, 4, 4] (indexed 2 to 4) to [5, 5, 5] resulting in the array [3, 5, 5, 5, 5]. Thus, the maximum possible value of the minimum element in the array is 3.","solution":"def max_min_after_operations(n, k, A): def can_achieve_min_value(mid): required_operations = 0 for value in A: if value < mid: required_operations += (mid - value) return required_operations <= k low, high = min(A), min(A) + k answer = low while low <= high: mid = (low + high) // 2 if can_achieve_min_value(mid): answer = mid low = mid + 1 else: high = mid - 1 return answer"},{"question":"A rectangular grid of size n x m is initially empty. You can perform the following operation as many times as you want: - Choose any cell (i, j) on the grid and fill it with the number 1. However, there is a restriction: No two adjacent cells (either horizontally, vertically, or diagonally) can have the number 1 in them. Two cells (i1, j1) and (i2, j2) are considered adjacent if they share an edge or a corner. Your task is to determine the maximum number of cells that can be filled with the number 1 under the given condition. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Output: Print a single integer — the maximum number of cells that can be filled with the number 1. Example: Input: 2 2 Output: 2 Explanation: One possible way to achieve the maximum filling is: 1 0 0 1","solution":"def max_filled_cells(n, m): Calculate the maximum number of cells that can be filled with 1 in an n x m grid such that no two adjacent cells have the number 1. # The strategy is to fill every 2nd cell in a checkerboard pattern. # This will ensure no two adjacent cells are filled with 1. return (n * m + 1) // 2 # This formula works for both even and odd sized grids."},{"question":"Peter is working on optimizing a large dataset of numerical records. He wants to write a program that can compress a sequence of numbers by combining consecutive duplicates into a single number and recording the count of these duplicates. To achieve this, he plans to use run-length encoding. Run-length encoding is a simple form of data compression where consecutive elements of a sequence are stored as a single data value and a count. Write a function that performs run-length encoding on a given list of integers. # Input - A single line containing integers separated by spaces representing the sequence of numbers (1 ≤ length of the sequence ≤ 3000, each integer fitting within a 32-bit signed integer). # Output - A single line containing pairs of each unique integer followed by their count. # Example Input: ``` 4 4 4 4 5 5 1 1 1 ``` Output: ``` 4 4 5 2 1 3 ``` # Explanation In the given example, the input sequence has four \'4\'s, followed by two \'5\'s, and three \'1\'s. Therefore, the run-length encoding outputs `4 4` (four 4\'s), `5 2` (two 5\'s), and `1 3` (three 1\'s).","solution":"def run_length_encoding(sequence): Perform run-length encoding on a given list of integers. Args: sequence (list of int): List of integers to encode. Returns: list of tuples: Each tuple contains a number and its count. if not sequence: return [] encoded = [] current_number = sequence[0] count = 1 for number in sequence[1:]: if number == current_number: count += 1 else: encoded.append((current_number, count)) current_number = number count = 1 encoded.append((current_number, count)) return encoded def sequence_to_string(sequence): return \' \'.join(map(str, sequence)) def run_length_encoding_from_string(input_string): sequence = list(map(int, input_string.split())) encoded = run_length_encoding(sequence) flat_list = [item for sublist in encoded for item in sublist] return sequence_to_string(flat_list)"},{"question":"You are given an array of integers, and your task is to find a subsequence of consecutive numbers which has the highest sum. A subsequence of consecutive numbers is defined as a subset of the array elements that appear in the original order, and the elements are next to each other without any breaks. Formally, given an array A of length n (1 leq n leq 10^{5}) with elements A_i (-10^9 leq A_i leq 10^9), find the subsequence A_l, A_{l+1}, ..., A_r (1 leq l leq r leq n) such that the sum A_l + A_{l+1} + ... + A_r is maximized. # Input - The first line contains an integer T (1 leq T leq 10) – the number of test cases. Each test case consists of two lines: - The first line contains a single integer n. - The second line contains n space-separated integers A_1, A_2, ..., A_n. # Output - For each test case, print a single integer – the sum of the subsequence of consecutive numbers which has the highest sum. # Example Input ``` 2 5 1 -2 3 4 -5 3 -1 -2 -3 ``` Output ``` 7 -1 ``` # Explanation - For the first test case, the maximum sum is obtained by taking the subsequence [3, 4] which adds up to 7. - For the second test case, the maximum sum is -1, which is the least negative number among the negative elements.","solution":"def max_consecutive_sum(arr): Returns the maximum sum of a subsequence of consecutive numbers. max_sum = float(\'-inf\') current_sum = 0 for number in arr: current_sum = max(number, current_sum + number) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for case in test_cases: n, arr = case results.append(max_consecutive_sum(arr)) return results"},{"question":"James loves string manipulations and recently he came across a problem. He has a string consisting of lowercase English letters, and he wants to perform some manipulations on the string. The manipulation involves splitting the string into contiguous sub-strings such that each sub-string is a palindrome. A palindrome is a string that reads the same forwards and backwards. James is interested in finding the minimum number of sub-strings that the original string can be split into, such that every sub-string is a palindrome. Write a function `min_palindrome_partitions(s)` that takes a string `s` of length `n` (1 ≤ n ≤ 1000) and returns the minimum number of sub-strings the string can be split into, where each sub-string is a palindrome. # Input: - A single string `s` consisting of lowercase English letters (1 ≤ |s| ≤ 1000). # Output: - A single integer representing the minimum number of sub-strings the given string can be split into, where each sub-string is a palindrome. # Example: ```python assert min_palindrome_partitions(\\"aab\\") == 1 # \\"aa\\", \\"b\\" assert min_palindrome_partitions(\\"racecar\\") == 1 # \\"racecar\\" assert min_palindrome_partitions(\\"level\\") == 1 # \\"level\\" assert min_palindrome_partitions(\\"abcbm\\") == 2 # \\"abc\\", \\"cbm\\" ``` # Constraints: - The length of the input string `s` will be between 1 and 1000. - The string will consist of only lowercase English letters.","solution":"def min_palindrome_partitions(s): Returns the minimum number of sub-strings the given string can be split into, where each sub-string is a palindrome. n = len(s) dp = [0] * (n + 1) pal = [[False] * n for _ in range(n)] for i in range(n): pal[i][i] = True for length in range(2, n + 1): for start in range(n - length + 1): end = start + length - 1 if length == 2: pal[start][end] = (s[start] == s[end]) else: pal[start][end] = (s[start] == s[end]) and pal[start + 1][end - 1] for i in range(n): if pal[0][i]: dp[i + 1] = 1 else: dp[i + 1] = float(\'inf\') for j in range(i): if pal[j + 1][i]: dp[i + 1] = min(dp[i + 1], dp[j + 1] + 1) return dp[n]"},{"question":"Polycarp is learning about the properties of Fibonacci numbers and differences between consecutive Fibonacci numbers. He starts with two positive integers of a Fibonacci sequence and generates the next numbers of the sequence up to n elements. Polycarp then calculates the absolute difference between every two consecutive numbers in his generated sequence. He then gets curious and asks you a question: If you are given a sequence of n integers, can you determine whether this sequence of differences can come from some Fibonacci sequence? The first line of the input contains an integer number n (2 le n le 100) — the number of elements in the sequence. The second line of the input contains n integer numbers a_1, a_2, dots, a_n (1 le a_i le 10^9). Print \\"Yes\\" if the given sequence of differences can be generated from some Fibonacci sequence, otherwise print \\"No\\". In the first example, the given sequence of differences (3, 5, 8, 13, 21) corresponds to the differences of a Fibonacci sequence (1, 1, 2, 3, 5, 8, 13, 21, 34), thus the answer is \\"Yes\\". In the second example, the given sequence of differences (2, 3, 5, 8, 12) doesn\'t match any Fibonacci sequence, thus the answer is \\"No\\". Example: Input: 5 3 5 8 13 21 Output: Yes Input: 5 2 3 5 8 12 Output: No","solution":"def is_fibonacci_diff_sequence(n, diff_seq): Returns \'Yes\' if the given sequence of differences can be generated from some Fibonacci sequence, otherwise \'No\'. if n <= 2: return \\"Yes\\" def generate_fibonacci(upper_limit): fib = [1, 1] while True: next_fib = fib[-1] + fib[-2] if next_fib > upper_limit: break fib.append(next_fib) return fib # Since the maximum difference is large, we generate Fibonacci sequence with sufficiently high values. max_diff = max(diff_seq) fibonacci_numbers = generate_fibonacci(2 * max_diff) # A safe margin to cover all possible differences in the sequence for i in range(2, n): if diff_seq[i] != diff_seq[i-1] + diff_seq[i-2]: return \\"No\\" return \\"Yes\\" # Example usage: # Input: 5 [3 5 8 13 21] print(is_fibonacci_diff_sequence(5, [3, 5, 8, 13, 21])) # Output: Yes # Input: 5 [2 3 5 8 12] print(is_fibonacci_diff_sequence(5, [2, 3, 5, 8, 12])) # Output: No"},{"question":"You are tasked with developing a system that identifies and categorizes books based on their genre. Each book belongs to one of four genres represented by integers 1, 2, 3, and 4, where: 1. Fiction 2. Non-Fiction 3. Science 4. Fantasy You have access to a training dataset which you can download here: http://download4.bookdata.com/a2/X2RZ2ZWXBG5VYWAL61H76ZQM/train_books.zip. The archive contains four directories labeled \\"1\\", \\"2\\", \\"3\\", and \\"4\\" each containing books of the respective genres. Each book is stored as a unique text file. The format of the text files is as follows: - The first line contains the book identifier, an integer (0 ≤ id ≤ 10^6). - The second line contains the title of the book. - The third and subsequent lines contain the book\'s text. You need to build a program that reads a given book\'s content and predicts its genre based on the data from the training set. # Input The input consists of: - A single integer id (0 ≤ id ≤ 10^6) – the book identifier. - A string that is the title of the book. - Multiple lines of text that make up the content of the book. It is guaranteed that each book belongs to one of the four genres. The size of any given book will not exceed 50 kilobytes. # Output Print a single integer from 1 to 4 – the genre to which the given book belongs. # Examples Input ``` 12345 The Mysterious Island In the year 1865, the American Civil War had ended. Five Northern prisoners of war decided to escape. They hijacked a hot air balloon and ended up on a mysterious island... ``` Output ``` 4 ```","solution":"# Solution uses dummy logic here due to the lack of dataset and actual classifier model training # The function will return a random genre for demonstration purposes. # Note: A real implementation would use Natural Language Processing (NLP) techniques and train a model on the given dataset. import random def predict_genre(book_id, title, content): Predicts the genre of a book based on its content. Dummy implementation returns a random genre for demonstration. :param book_id: int, the identifier of the book :param title: str, the title of the book :param content: list of str, the lines of the book\'s text :return: int, the predicted genre (integer from 1 to 4) # For demo purposes, we randomly return one of the genres. return random.choice([1, 2, 3, 4])"},{"question":"You are given a sequence of `n` unique numbers, but the sequence is randomly permuted. Your task is to find out the minimum number of adjacent swaps needed to sort the sequence in ascending order. A single adjacent swap allows you to swap the numbers in positions `i` and `i+1`, where `1 ≤ i < n`. Given an integer `n` representing the length of the sequence and the sequence itself, determine the minimum number of adjacent swaps required. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the length of the sequence. - The second line contains `n` distinct integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the sequence of numbers. # Output - Print a single integer — the minimum number of adjacent swaps needed to sort the sequence in ascending order. # Example Input ```plaintext 5 3 1 5 4 2 ``` Output ```plaintext 5 ``` Explanation The sequence can be sorted to `[1, 2, 3, 4, 5]` using minimum 5 adjacent swaps: 1. Swap positions 2 and 3: `[3, 1, 5, 4, 2]` -> `[3, 1, 4, 5, 2]` 2. Swap positions 3 and 4: `[3, 1, 4, 5, 2]` -> `[3, 1, 4, 2, 5]` 3. Swap positions 2 and 3: `[3, 1, 4, 2, 5]` -> `[3, 1, 2, 4, 5]` 4. Swap positions 1 and 2: `[3, 1, 2, 4, 5]` -> `[1, 3, 2, 4, 5]` 5. Swap positions 2 and 3: `[1, 3, 2, 4, 5]` -> `[1, 2, 3, 4, 5]`","solution":"def minimum_adjacent_swaps(n, sequence): Returns the minimum number of adjacent swaps needed to sort the sequence in ascending order. swaps = 0 arr = list(sequence) # Implementing bubble sort to count the number of swaps for i in range(n): for j in range(n - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swaps += 1 return swaps"},{"question":"You are given a list of integers. Print the number of elements in the list that are greater than the average of the list. The first line contains an integer n (1 le n le 10^4) — the number of integers in the list. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^3 le a_i le 10^3). Print a single integer — the number of elements in the list that are greater than the average of the list.","solution":"def count_elements_greater_than_average(n, elements): Returns the number of elements in the list that are greater than the average of the list. Parameters: n (int): The number of elements in the list. elements (list): A list of integers. Returns: int: The count of elements greater than the average of the list. average = sum(elements) / n count = sum(1 for element in elements if element > average) return count"},{"question":"You are given a list of positive integers and a target positive integer n. Your goal is to determine if there exists a set of integers from the list that can be summed to exactly equal n. Each integer in the list can be used at most once. The first line of input contains two integers m and n, where m is the number of integers in the list and n is the target sum (1 ≤ m ≤ 100, 1 ≤ n ≤ 1,000,000). The second line contains m positive integers, each between 1 and 1,000,000 (inclusive). Output \\"Possible\\" if there exists a subset of the given integers that sums up to n, otherwise output \\"Impossible\\". Example input: 5 9 3 34 4 12 5 Example output: Possible","solution":"def can_sum_subset(m, n, numbers): Determines if there exists a subset of \'numbers\' that sums up to the target \'n\'. # Initialize a boolean list for DP to record possible sums dp = [False] * (n + 1) dp[0] = True # Zero sum is always possible for num in numbers: for i in range(n, num - 1, -1): if dp[i - num]: dp[i] = True return \\"Possible\\" if dp[n] else \\"Impossible\\""},{"question":"Given a sequence represented by the recursive formula x_{n+1} = 2x_n + 3 , where x_1 = 1 . Write a function that calculates the value of x_n for a given positive integer n . The function should follow an iterative approach without using recursion to avoid stack overflow for large inputs.","solution":"def iterative_sequence(n): Calculate the value of x_n for the given sequence x_{n+1} = 2x_n + 3 with initial value x_1 = 1, using an iterative approach. :param n: A positive integer representing the position in the sequence. :return: The value of x_n. if n < 1: raise ValueError(\\"The input must be a positive integer.\\") x = 1 # Initial value x_1 for i in range(1, n): x = 2 * x + 3 return x"},{"question":"Nina loves hiking and has a set of n hiking trails she wants to explore. Each trail is represented by a pair of integers (a_i, b_i) where a_i is the starting time and b_i is the ending time of trail i. Nina wants to hike as many trails as possible in a single day, but she can only hike one trail at a time. Given the hiking trail schedule, determine the maximum number of non-overlapping trails Nina can hike in a day. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of hiking trails. Each of the next n lines contains two integers a_i and b_i (0 ≤ a_i < b_i ≤ 100000) representing the start and end times of the trail. Output a single integer — the maximum number of non-overlapping trails Nina can hike in a day. For example: Input: 3 1 4 2 3 3 5 Output: 2 In this example, Nina can hike the trails (2, 3) and (3, 5) without any overlapping, hence the answer is 2.","solution":"def max_non_overlapping_trails(n, trails): Determines the maximum number of non-overlapping hiking trails Nina can hike in a day. Parameters: n (int): The number of hiking trails. trails (list of tuples): Each tuple contains two integers (a_i, b_i) representing the start and end times of a trail. Returns: int: The maximum number of non-overlapping trails. # Sort trails by their ending times trails.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in trails: if start >= end_time: count += 1 end_time = end return count"},{"question":"You are given a binary matrix where each cell can either be 0 or 1. The task is to find the largest square sub-matrix consisting entirely of 1\'s and return its area. The input consists of: - An integer n (1 ≤ n ≤ 1000), the number of rows in the matrix. - An integer m (1 ≤ m ≤ 1000), the number of columns in the matrix. - n lines of m space-separated integers (either 0 or 1), representing the binary matrix. Output the area of the largest square sub-matrix filled with 1\'s. # Example Input 5 6 1 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 Output 9 # Explanation The largest square sub-matrix filled with 1\'s in the provided example is of size 3x3. Hence, the area is 9.","solution":"def maximalSquare(matrix): Given a binary matrix, finds the area of the largest square sub-matrix consisting entirely of 1\'s. if not matrix or not matrix[0]: return 0 n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side def largest_square_submatrix_area(n, m, matrix): return maximalSquare(matrix)"},{"question":"A digital billboard displays advertisements from different companies. Each company can reserve one or more time slots on the billboard. If two companies reserve overlapping time slots, both of their advertisements will be displayed for the entirety of the overlapping period. The billboard\'s display time is divided into one-minute intervals, and an advertisement can start at any minute and end at any minute, inclusive. Your task is to keep track of the total number of different minutes during which advertisements are displayed on the billboard. After each reservation, you need to recalculate and report the total number of minutes during which the billboard is being utilized by any advertisement. The first line contains two integers n and m — the number of reservations and initial number of minutes the billboard is set to display advertisements respectively (1 leq n leq 10^5, 1 leq m leq 10^6). The next n lines describe the reservations. Each reservation is given as two integers a_j and b_j, representing the start and end times of the advertisement in minutes, inclusive (1 leq a_j leq b_j leq 10^6). Print n integers, each representing the total number of minutes during which the billboard is being utilized after processing each respective reservation. For example, if the input is: ``` 3 0 1 3 2 5 6 8 ``` The output should be: ``` 3 5 8 ```","solution":"def track_billboard_usage(n, m, reservations): usage_times = set() results = [] for start, end in reservations: for minute in range(start, end + 1): usage_times.add(minute) results.append(len(usage_times)) return results"},{"question":"You have been tasked with developing a numerical manipulation algorithm for a specific application. The challenge is to reverse the digits in a given integer while maintaining the sign (positive or negative) of the original number. Write a function `reverse_integer` that takes an integer `n` as input and returns the integer with its digits reversed. The function should preserve the sign of the input integer. # Input - An integer `n` where -10^9 <= n <= 10^9. # Output - An integer which is the reversed digits of `n` maintaining the sign of `n`. # Examples ```python reverse_integer(123) # 321 reverse_integer(-456) # -654 reverse_integer(1200) # 21 reverse_integer(0) # 0 ``` # Constraints - Leading zeros in the reversed integer should be discarded. For example, reversing 1200 should yield 21. - Consider edge cases like 0 and negative numbers. Your task is to implement the function with efficient handling of the provided constraints and guarantee correct results within the given range.","solution":"def reverse_integer(n): Reverses the digits of the input integer while maintaining its sign. Parameters: n (int): The integer to be reversed. Returns: int: The integer obtained by reversing the digits of n. sign = -1 if n < 0 else 1 reversed_number = int(str(abs(n))[::-1]) return sign * reversed_number"},{"question":"Arkady has now decided to develop a new monitoring system for his high-speed Internet exchange point. The system logs network activity using timestamps. Each activity is recorded in the format `(node_id, timestamp)` where `node_id` is the ID of the node where the activity occurred, and `timestamp` is the time the activity was logged. You need to process a list of such activity logs and be able to efficiently answer two types of queries: 1. Count how many activities occurred at a specific node within a given time range. 2. Count the total number of activities across all nodes within a given time range. # Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 2·10^5) — the number of nodes and the number of activity logs, respectively. The next `m` lines each contain two integers `node_id` and `timestamp` (1 ≤ node_id ≤ n, 1 ≤ timestamp ≤ 10^9) representing an activity logged at `node_id` at the given timestamp. The next line contains an integer `q` (1 ≤ q ≤ 10^5) — the number of queries. The following `q` lines each contain a query in the format described below: - `1 node_id start_time end_time` (1 ≤ node_id ≤ n, 1 ≤ start_time ≤ end_time ≤ 10^9) — Count how many activities occurred at the specific `node_id` within the time range [start_time, end_time]. - `2 start_time end_time` (1 ≤ start_time ≤ end_time ≤ 10^9) — Count the total number of activities across all nodes within the time range [start_time, end_time]. # Output For each query, output a single integer representing the result for that query. # Example Input ``` 5 6 1 100 2 200 3 150 1 300 2 400 4 500 3 1 1 50 350 2 100 450 1 4 450 550 ``` Output ``` 2 5 1 ``` # Note In the example, the first query counts the activities at node `1` between timestamps `50` and `350`, which are `100` and `300`, so the answer is `2`. The second query counts all activities across all nodes between timestamps `100` and `450`, which are `100, 200, 150, 300, 400`, so the answer is `5`. The third query counts the activities at node `4` between timestamps `450` and `550`, which is `500`, so the answer is `1`.","solution":"from collections import defaultdict from bisect import bisect_left, bisect_right class MonitoringSystem: def __init__(self, n, m, activities): self.node_activities = defaultdict(list) self.all_activities = [] for node_id, timestamp in activities: self.node_activities[node_id].append(timestamp) self.all_activities.append(timestamp) for node_id in self.node_activities: self.node_activities[node_id].sort() self.all_activities.sort() def count_node_activities_in_range(self, node_id, start_time, end_time): if node_id not in self.node_activities: return 0 activity_list = self.node_activities[node_id] return bisect_right(activity_list, end_time) - bisect_left(activity_list, start_time) def count_total_activities_in_range(self, start_time, end_time): return bisect_right(self.all_activities, end_time) - bisect_left(self.all_activities, start_time) def process_logs_and_queries(n, m, activities, q, queries): system = MonitoringSystem(n, m, activities) results = [] for query in queries: if query[0] == 1: _, node_id, start_time, end_time = query results.append(system.count_node_activities_in_range(node_id, start_time, end_time)) elif query[0] == 2: _, start_time, end_time = query results.append(system.count_total_activities_in_range(start_time, end_time)) return results"},{"question":"You are working on a secure messaging app and are tasked with implementing a system where messages can self-destruct after being read, ensuring privacy and security. Each message can be sent to a specific user and should only be readable once. After the message has been read by the recipient, it should be marked as \\"read\\" and should no longer be retrievable. The system should support three types of operations: 1. Send a message to a user. 2. Read a message sent to a user. 3. Check if a message has been read. You will be provided with a series of operations. Each operation is described by a type followed by relevant arguments: - Type 1 operation to send a message: `1 userId messageContent` - Type 2 operation to read a message: `2 userId` - Type 3 operation to check if a message has been read: `3 userId` For type 2 operation, if the message exists for the given user and has not been read yet, output the message and mark it as read. If there is no message or if it has already been read, output \\"No new message.\\" For type 3 operation, output \\"READ\\" if the message has been read and \\"UNREAD\\" if it has not been read. The first line of the input contains two integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 1000) — the number of users and the number of queries. The next q lines contain the queries in the format described above. For each query of type 2 and type 3, print the appropriate result as explained. Example input: ``` 3 6 1 1 Hello 1 2 Hi 2 1 2 1 3 1 3 2 ``` Example output: ``` Hello No new message. READ UNREAD ```","solution":"class SecureMessagingApp: def __init__(self, n): self.messages = {} self.read_status = {} def send_message(self, user_id, message_content): self.messages[user_id] = message_content self.read_status[user_id] = False def read_message(self, user_id): if user_id in self.messages and not self.read_status[user_id]: self.read_status[user_id] = True return self.messages[user_id] else: return \\"No new message.\\" def check_read_status(self, user_id): if user_id in self.read_status and self.read_status[user_id]: return \\"READ\\" else: return \\"UNREAD\\" def process_operations(n, operations): app = SecureMessagingApp(n) results = [] for operation in operations: op_type = operation[0] if op_type == 1: _, user_id, message_content = operation app.send_message(user_id, message_content) elif op_type == 2: _, user_id = operation results.append(app.read_message(user_id)) elif op_type == 3: _, user_id = operation results.append(app.check_read_status(user_id)) return results"},{"question":"Emily loves reading books so much that she decided to build a bookshelf to store her collection. The bookshelf Emily designed has a single row and can hold a maximum of `n` books. Each book has a certain width, and the total width of the books must not exceed the width of the bookshelf. Emily has `m` books, each with a certain width and a value representing its importance to her. She wants to maximize the total importance of the books that she can place on the shelf without exceeding the shelf\'s width capacity. Formally, given the maximum width capacity of the shelf `n`, and an array of `m` books where each book is represented by a pair of integers `[width, importance]`, determine the maximum total importance of the books that can be placed on the shelf. # Input The first line of the input contains two integers `n` (1 ≤ n ≤ 10^3) and `m` (1 ≤ m ≤ 100). The next `m` lines each contain two integers `width` and `importance` (1 ≤ width ≤ n, 1 ≤ importance ≤ 100). # Output Print the maximum total importance of the books that can be placed on the shelf without exceeding the shelf\'s width capacity. # Example Input ``` 10 3 4 10 6 7 8 15 ``` Output ``` 17 ``` Explanation: Emily can choose the first and second books with widths 4 and 6 respectively. Their total importance is 10 + 7 = 17, which is the maximum total importance without exceeding the width of the shelf. The third book cannot be included as it alone exceeds the width capacity of 10.","solution":"def max_importance(n, books): dp = [0] * (n + 1) # dp array to store the max importance for each width for width, importance in books: for j in range(n, width - 1, -1): dp[j] = max(dp[j], dp[j - width] + importance) return dp[n] # Example usage if __name__ == \\"__main__\\": n = 10 books = [(4, 10), (6, 7), (8, 15)] print(max_importance(n, books)) # Output: 17"},{"question":"You are given a non-negative integer n. In one move, you are allowed to perform one of the following operations: - If n is even, divide it by 2. - If n is odd, either add 1 to it or subtract 1 from it. Your task is to determine the minimum number of moves required to reduce n to 1. The first line of input contains an integer t (1 le t le 10^4), the number of test cases. Each of the next t lines contains a single non-negative integer n (0 le n le 10^9). For each test case, output the minimum number of moves to reduce n to 1. Examples: Input ``` 3 3 10 0 ``` Output ``` 2 4 0 ```","solution":"def min_moves_to_reduce_to_one(n): Returns the minimum number of moves required to reduce n to 1. moves = 0 while n > 1: if n % 2 == 0: n //= 2 elif n == 3 or ((n >> 1) & 1) == 0: n -= 1 else: n += 1 moves += 1 return moves def min_moves_multiple_cases(test_cases): results = [] for n in test_cases: results.append(min_moves_to_reduce_to_one(n)) return results"},{"question":"In order to fund R&D projects, a laboratory sells rare minerals. Each mineral type is associated with a distinct price per unit. The lab has a limited stock of each mineral type and receives orders that specify the desired quantities of these mineral types. Due to high demand and limited supply, they need a way to efficiently fulfill these orders either partially or completely while maximizing the revenue generated from available stocks. Given: - A list of mineral types, each associated with the available quantity and price per unit. - A list of orders, each specifying the desired quantities of these mineral types. For each order, determine the maximum revenue the laboratory can obtain using the available stock of minerals while fulfilling the order as completely as possible. # Input Format: - The first line contains an integer `m` (1 le m le 1000) — the number of different types of minerals. - The next `m` lines each contain two integers `a_i` and `p_i` (1 le a_i, p_i le 10^9) — representing the available quantity and price per unit of the ith mineral type respectively. - The following line contains an integer `t` (1 le t le 1000) — the number of orders. - The next `t` lines each contain `m` integers (0 le o_{i,j} le 10^9) — representing the desired quantity of each mineral type in the jth order. # Output Format: - For each order, print a single integer — the maximum revenue generated for that order given the available stock. # Example: Input: ``` 3 10 5 20 3 15 8 2 5 10 7 10 10 10 ``` Output: ``` 111 180 ``` # Explanation: For the first order: - Mineral 1: 5 units at 5 per unit = 25 - Mineral 2: 10 units at 3 per unit = 30 - Mineral 3: 7 units at 8 per unit = 56 Total revenue for the first order = 25 + 30 + 56 = 111 For the second order: - Mineral 1: 10 units at 5 per unit = 50 - Mineral 2: 10 units at 3 per unit = 30 - Mineral 3: 10 units at 8 per unit = 80 Total revenue for the second order = 50 + 30 + 80 = 160","solution":"def max_revenue(m, mineral_info, t, orders): revenues = [] for order in orders: revenue = 0 for i in range(m): a_i, p_i = mineral_info[i] required_quantity = order[i] used_quantity = min(a_i, required_quantity) revenue += used_quantity * p_i revenues.append(revenue) return revenues"},{"question":"You are given a sequence of \'n\' integers. Your task is to find the length of the longest subsequence which is strictly increasing. Note that the subsequence does not have to be contiguous. The first input line contains an integer \'n\', the length of the sequence (1 ≤ n ≤ 1000). The second line contains \'n\' space-separated integers, representing the sequence. Each integer in the sequence is between -10^9 and 10^9. Print a single integer which is the length of the longest strictly increasing subsequence. Example: Input: 6 10 9 2 5 3 7 101 18 Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], and its length is 4.","solution":"def length_of_longest_increasing_subsequence(sequence): Find the length of the longest strictly increasing subsequence. Parameters: sequence (list of int): A list of integers representing the sequence. Returns: int: The length of the longest strictly increasing subsequence. if not sequence: return 0 n = len(sequence) dp = [1] * n for i in range(1, n): for j in range(0, i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Создайте утилиту для управления контактами. Программа должна иметь следующий функционал: 1. Добавление нового контакта с информацией (имя, номер телефона, электронная почта). 2. Удаление контакта по имени. 3. Поиск контакта по имени. 4. Вывод всех контактов в алфавитном порядке. Замечания: - Имя контакта должно быть уникальным. - Реализуйте простую консольную программу, которая будет взаимодействовать с пользователем через текстовый интерфейс. Функционал программы должен быть проверен с использованием тестов или сценариев.","solution":"class Contact: def __init__(self, name, phone, email): self.name = name self.phone = phone self.email = email def __eq__(self, other): return self.name == other.name and self.phone == other.phone and self.email == other.email def __lt__(self, other): return self.name < other.name class ContactManager: def __init__(self): self.contacts = {} def add_contact(self, name, phone, email): if name in self.contacts: return False new_contact = Contact(name, phone, email) self.contacts[name] = new_contact return True def remove_contact(self, name): if name in self.contacts: del self.contacts[name] return True return False def find_contact(self, name): return self.contacts.get(name, None) def list_contacts(self): return sorted(self.contacts.values()) # Instance of ContactManager to be used in the test contact_manager = ContactManager()"},{"question":"You are given an array of integers, and your task is to determine whether it is possible to rearrange the array into a strictly increasing sequence by performing at most one swap (exchanging the positions of two elements). If it is possible to achieve such a rearrangement, return \\"YES\\", otherwise return \\"NO\\". # Input The first line contains a single integer T (1 le T le 100) — the number of test cases. The next T lines each contain an integer n (2 le n le 10^4) — the number of elements in the array, followed by n space-separated integers which represent the array. # Output For each test case, print \\"YES\\" if it is possible to rearrange the array into a strictly increasing sequence by performing at most one swap. Otherwise, print \\"NO\\". # Example Input ``` 3 3 3 2 1 4 1 5 3 3 5 1 2 3 5 4 ``` Output ``` YES NO YES ``` # Note In the first example, we can swap 3 and 1 to get [1, 2, 3], which is strictly increasing. In the second example, even after one swap, we cannot achieve a strictly increasing sequence. In the third example, we can swap 5 and 4 to get [1, 2, 3, 4, 5], which is strictly increasing.","solution":"def can_be_strictly_increasing_by_one_swap(n, arr): # Check if the array is already strictly increasing if arr == sorted(arr) and len(arr) == len(set(arr)): return \\"YES\\" for i in range(n - 1): for j in range(i + 1, n): # swap arr[i] and arr[j] arr[i], arr[j] = arr[j], arr[i] if arr == sorted(arr) and len(arr) == len(set(arr)): return \\"YES\\" # undo the swap arr[i], arr[j] = arr[j], arr[i] return \\"NO\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(can_be_strictly_increasing_by_one_swap(n, arr)) return results"},{"question":"You are given a string consisting of lowercase Latin letters and a pattern string of the same length. Each character in the pattern is either a lowercase Latin letter or a \'?\' (question mark). The \'?\' character can match any single character. Your task is to determine if the string matches the pattern. Write a function `matches_pattern(string: str, pattern: str) -> bool` that takes a string `string` and a pattern `pattern`, and returns a boolean indicating whether the string matches the pattern. # Input The input consists of: - A string `string` (1 ≤ len(string) ≤ 100) consisting of lowercase Latin letters. - A pattern `pattern` (1 ≤ len(pattern) ≤ 100) of the same length as the string, consisting of lowercase Latin letters and/or \'?\' characters. # Output Return `True` if the string matches the pattern, and `False` otherwise. # Example ```python assert matches_pattern(\\"abcde\\", \\"a?c?e\\") == True assert matches_pattern(\\"abcde\\", \\"a?c?x\\") == False assert matches_pattern(\\"apple\\", \\"a??le\\") == True assert matches_pattern(\\"banana\\", \\"b?n?n?\\") == True ``` # Constraints - Both `string` and `pattern` will have the same length. - The length of `string` and `pattern` is between 1 and 100, inclusive.","solution":"def matches_pattern(string: str, pattern: str) -> bool: Determine if the string matches the pattern. The pattern can contain \'?\' which can match any single character. :param string: The string to be matched :param pattern: The pattern to match the string against :return: True if the string matches the pattern, False otherwise if len(string) != len(pattern): return False for ch_str, ch_pat in zip(string, pattern): if ch_pat != \'?\' and ch_str != ch_pat: return False return True"},{"question":"A company has a team of software engineers who often collaborate on different projects. They usually communicate via a group chat, and each team member has unique preferences for how they like to be notified about new messages. Some prefer instant notifications, while others check messages only a few times a day. The team lead wants to ensure that all team members are notified about important messages as quickly as possible, but also wants to respect each member\'s preferences. Given an array of integers where each integer represents the preferred notification interval (in minutes) for each team member, write a program to determine the maximum time it would take for all team members to be notified about a message, assuming the notification system can send messages to multiple members simultaneously but only within their preferred intervals. For example, if the array is [5, 10, 15], it means that one member prefers notifications every 5 minutes, another every 10 minutes, and another every 15 minutes. The task is to find the least common multiple (LCM) of the given intervals, as this represents the longest time before a message could be received by all team members. Write a function `max_notification_time(intervals)` that takes in a list of integers `intervals` and returns an integer representing the maximum time (in minutes) it would take for all team members to be notified. # Function Signature ```python def max_notification_time(intervals: List[int]) -> int: ``` # Input - `intervals (List[int])`: A list of integers, where each integer represents the preferred notification interval (in minutes) for each team member. The length of the list is between 1 and 20, and each interval is between 1 and 1000. # Output - An integer representing the maximum time (in minutes) it would take for all team members to be notified. # Example ```python assert max_notification_time([5, 10, 15]) == 30 assert max_notification_time([1, 2, 3]) == 6 assert max_notification_time([7, 5, 6]) == 210 ```","solution":"from math import gcd from functools import reduce from typing import List def lcm(a, b): Helper function to calculate the least common multiple of two numbers. return abs(a * b) // gcd(a, b) def max_notification_time(intervals: List[int]) -> int: Given an array of integers where each integer represents the preferred notification interval (in minutes) for each team member, returns the least common multiple of the intervals, representing the maximum time it would take for all team members to be notified. return reduce(lcm, intervals)"},{"question":"In a magical kingdom, there are n wizards standing in a line, and each wizard has a certain power level represented by an integer. The king wants to select a team of k consecutive wizards such that the total power of the team is maximized. Can you help the king find the maximum total power of a team of k consecutive wizards? The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100), representing the number of wizards and the size of the team, respectively. The second line contains n integers, where the i-th integer represents the power level of the i-th wizard. The power levels are integers that can be positive, negative, or zero. Print a single integer representing the maximum total power of a team of k consecutive wizards. For example: Input: 7 3 3 -2 5 -1 6 2 -1 Output: 10 In this example, selecting the wizards with power levels 5, -1, and 6 (indices 3 to 5) will give the maximum total power of 10.","solution":"def max_total_power(n, k, power_levels): Returns the maximum total power of a team of k consecutive wizards. Args: n (int): Number of wizards. k (int): Size of the team. power_levels (list of int): Power levels of the wizards. Returns: int: Maximum total power of a team of k consecutive wizards. # Initialize the maximum power with the sum of the first k elements max_power = sum(power_levels[:k]) # Compute the sum of k consecutive elements using a sliding window approach current_power = max_power for i in range(1, n - k + 1): current_power = current_power - power_levels[i - 1] + power_levels[i + k - 1] if current_power > max_power: max_power = current_power return max_power"},{"question":"You are working on a text-editing software and you need to implement a feature that converts numbers to their corresponding written English words. Write a function `numberToWords(n)` that takes as input a non-negative integer `n` (0 ≤ n ≤ 99999) and returns the English words representation of that number. Your function should handle different ranges of numbers correctly, for example: - 0 should be converted to \\"zero\\" - 5 should be converted to \\"five\\" - 19 should be converted to \\"nineteen\\" - 42 should be converted to \\"forty-two\\" - 100 should be converted to \\"one hundred\\" - 123 should be converted to \\"one hundred twenty-three\\" - 1001 should be converted to \\"one thousand one\\" - 11001 should be converted to \\"eleven thousand one\\" - 99999 should be converted to \\"ninety-nine thousand nine hundred ninety-nine\\" Consider edge cases where numbers might contain successive zeros. You can assume that input will always be within the specified range. Your task is to implement the `numberToWords` function using your preferred programming language, ensuring it is efficient and accurate. Example: ```python def numberToWords(n): # Your implementation here print(numberToWords(0)) # Output: zero print(numberToWords(5)) # Output: five print(numberToWords(19)) # Output: nineteen print(numberToWords(42)) # Output: forty-two print(numberToWords(100)) # Output: one hundred print(numberToWords(123)) # Output: one hundred twenty-three print(numberToWords(1001)) # Output: one thousand one print(numberToWords(11001)) # Output: eleven thousand one print(numberToWords(99999)) # Output: ninety-nine thousand nine hundred ninety-nine ```","solution":"def numberToWords(n): if n == 0: return \\"zero\\" units = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] teens = [\\"ten\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] def two_digit_to_words(n): if n < 10: return units[n] elif n < 20: return teens[n - 10] else: tens_unit = tens[n // 10] + (\\"-\\" + units[n % 10] if n % 10 != 0 else \\"\\") return tens_unit def three_digit_to_words(n): if n < 100: return two_digit_to_words(n) else: return units[n // 100] + \\" hundred\\" + (\\" \\" + two_digit_to_words(n % 100) if n % 100 != 0 else \\"\\") def four_five_digit_to_words(n): if n < 1000: return three_digit_to_words(n) elif n < 10000: return units[n // 1000] + \\" thousand\\" + (\\" \\" + three_digit_to_words(n % 1000) if n % 1000 != 0 else \\"\\") else: return two_digit_to_words(n // 1000) + \\" thousand\\" + (\\" \\" + three_digit_to_words(n % 1000) if n % 1000 != 0 else \\"\\") return four_five_digit_to_words(n)"},{"question":"You are given a string consisting of lowercase Latin letters and digits. Your task is to rearrange the characters of the string such that the letters appear in alphabetical order and the digits appear in ascending order. The digits should be placed before the letters in the resulting string. For example, given the string \\"c2a1b3\\", the result should be \\"123abc\\". Note: If the input string contains only letters or only digits, the output should be the same as the input string but sorted accordingly. # Input The input consists of a single string containing lowercase Latin letters (\'a\' to \'z\') and digits (\'0\' to \'9\'). The length of the string will be between 1 and 10^5. # Output Print the rearranged string with digits in ascending order followed by letters in alphabetical order. # Examples **Example 1:** Input: \\"b3a1c2\\" Output: \\"123abc\\" **Example 2:** Input: \\"abc123\\" Output: \\"123abc\\" **Example 3:** Input: \\"54321\\" Output: \\"12345\\" **Example 4:** Input: \\"xyz\\" Output: \\"xyz\\" **Example 5:** Input: \\"z9a8b7c6\\" Output: \\"6789abcz\\"","solution":"def rearrange_string(s): Rearranges characters of the string such that digits appear in ascending order, followed by letters in alphabetical order. digits = sorted([char for char in s if char.isdigit()]) letters = sorted([char for char in s if char.isalpha()]) return \'\'.join(digits + letters)"},{"question":"A theft alarm system protects a museum exhibit room, which is represented as a 2D grid of n rows and m columns. The grid elements can either be \'E\', representing an empty cell, or \'A\', representing an object that could potentially trigger the alarm upon being tampered with. The alarm system works as follows: an alarm is triggered if there\'s any two \'A\' cells such that they can connect directly through consecutive horizontal or vertical cells, or through paths of consecutive \'E\' cells. Your task is to determine whether the alarm system will be triggered, based on the configuration of the exhibit room. The input is given as follows: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid. - Each of the next n lines contains a string of length m, consisting of the characters \'E\' and \'A\'. Output \\"YES\\" if the alarm will be triggered, and \\"NO\\" otherwise. Example: Input: 4 4 EAEA EEEE EAEA EAEA Output: YES Explanation: There is a path through consecutive \'E\' cells that connects \'A\'s in the second and fourth rows, triggering the alarm.","solution":"def will_alarm_trigger(n, m, grid): def bfs(start): queue = [start] visited = set() visited.add(start) while queue: x, y = queue.pop(0) for dx, dy in [(-1, 0), (0, 1), (1, 0), (0, -1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: if grid[nx][ny] == \'A\': return True elif grid[nx][ny] == \'E\': queue.append((nx, ny)) visited.add((nx, ny)) return False for i in range(n): for j in range(m): if grid[i][j] == \'A\': if bfs((i, j)): return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers. Your task is to find a contiguous subarray with the maximum sum and display the subarray as well as the sum. For example, in the array [-2,1,-3,4,-1,2,1,-5,4], the contiguous subarray with the maximum sum is [4,-1,2,1], and the sum is 6. Function Signature: `def max_subarray(arr: List[int]) -> Tuple[List[int], int]` # Input - One single array `arr` which contains `n` integers where `1 <= n <= 10^5` and each integer is in the range of `-10^4` to `10^4`. # Output - A tuple containing the contiguous subarray with the maximum sum and the sum itself. # Example ```python assert max_subarray([-2,1,-3,4,-1,2,1,-5,4]) == ([4, -1, 2, 1], 6) assert max_subarray([1]) == ([1], 1) ``` Note: If there are multiple subarrays with the same maximum sum, return any one of them.","solution":"from typing import List, Tuple def max_subarray(arr: List[int]) -> Tuple[List[int], int]: Returns the contiguous subarray with the maximum sum and the sum itself. max_so_far = float(\'-inf\') max_ending_here = 0 start = end = s = 0 for i in range(len(arr)): max_ending_here += arr[i] if max_so_far < max_ending_here: max_so_far = max_ending_here start = s end = i if max_ending_here < 0: max_ending_here = 0 s = i + 1 return arr[start:end+1], max_so_far"},{"question":"You are given a string `s` consisting of lowercase English letters. In one move, you can pick any contiguous substring that is a palindrome and remove it from the string. Your task is to find the minimum number of moves required to remove the entire string by repeatedly picking a palindromic substring and removing it. # Input - The first line contains a single integer `t` (1 le t le 100) — the number of test cases. - The first line of each test case contains a single integer `n` (1 le n le 10^5) — the length of the string `s`. - The second line of each test case contains the string `s` which consists of lowercase English letters. # Output For each test case, print a single integer — the minimum number of moves required to remove the string for that test case. # Example Input ``` 3 3 aba 4 abba 5 abcde ``` Output ``` 1 1 5 ``` # Explanation In the first test case, `aba` is already a palindrome, so we can remove it in one move. In the second test case, `abba` is already a palindrome, so we can remove it in one move. In the third test case, the string has no palindromic substring larger than 1 character that can be removed, so we need 5 moves to remove each character individually. # Note A string is a palindrome if it reads the same forwards and backwards.","solution":"def min_moves_to_remove_string(t, test_cases): result = [] for n, s in test_cases: if s == s[::-1]: result.append(1) else: result.append(2) return result"},{"question":"A company\'s data network is represented as a tree with N nodes. The tree nodes are numbered from 1 to N, with the root node having a number 1. Each network node can either be operational or faulty, and the goal is to determine the minimum time required to inspect the entire network and identify the faulty nodes. Every node can be inspected in one unit of time, and the inspection of nodes can happen in parallel as long as the paths do not overlap. To perform inspections efficiently, the company wants to break the network into clusters such that each cluster will be inspected sequentially in a non-overlapping manner. Write a function to determine the minimum time required to inspect all nodes in the company’s network. The input consists of: - A single integer N (1 leq N leq 3000), representing the number of nodes. - N-1 lines, each containing two integers u and v (1 leq u, v leq N), representing an undirected edge between node u and node v. - A string of length N, containing characters \'O\' and \'F\'. The i-th character represents the status of node i+1: \'O\' denotes an operational node while \'F\' denotes a faulty node. Output a single integer, the minimum time required to inspect the entire network to identify the faulty nodes. # Example: Input: ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 OFOFFFO ``` Output: ``` 3 ``` Explanation: One possible way to inspect the entire network is: - Inspect node 1 in the first unit of time. - Inspect nodes 2 and 3 in the second unit of time. - Inspect nodes 4, 5, 6, and 7 in the third unit of time. Therefore, the minimum time required to inspect all nodes is 3. # Constraints: - The tree\'s structure ensures that there is always a unique path between any two nodes. - Nodes with fewer children and deeper nodes might be inspected later. # Additional Notes: - The inspection of nodes can happen in parallel for nodes that are not in a direct ancestor-descendant relationship. - In any real scenario, planning inspections efficiently can save significant time and resources.","solution":"from collections import defaultdict, deque def min_inspection_time(N, edges, status): # Build the tree using adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # BFS to calculate depth of each node from the root (node 1) depth = [0] * (N + 1) max_depth = 0 visited = [False] * (N + 1) queue = deque([1]) visited[1] = True while queue: node = queue.popleft() current_depth = depth[node] for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True depth[neighbor] = current_depth + 1 max_depth = max(max_depth, depth[neighbor]) queue.append(neighbor) # Inspection time is the maximum depth found return max_depth + 1"},{"question":"You are given an array of positive integers and an integer limit k. Your task is to find the longest subarray such that the sum of the subarray elements is less than or equal to k. # Input - The first line contains two integers n and k (1 leq n leq 10^5, 1 leq k leq 10^9) — the size of the array and the limit. - The second line contains n space-separated positive integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. # Output - Output a single integer — the length of the longest subarray with sum not exceeding k. # Example Input ``` 5 10 1 2 3 4 5 ``` Output ``` 4 ``` Input ``` 6 15 5 1 2 3 10 3 ``` Output ``` 4 ``` Note In the first example, the longest subarray whose sum does not exceed 10 is `[1, 2, 3, 4]`, which has a length of 4. In the second example, the longest subarray would be `[5, 1, 2, 3]` which sums to 11, and its length is 4.","solution":"def longest_subarray_with_sum_at_most_k(n, k, arr): Returns the length of the longest subarray with sum not exceeding k. :param n: Length of the array. :param k: The maximum allowed sum of the subarray. :param arr: The array of integers. :return: The length of the longest subarray whose sum does not exceed k. start = 0 current_sum = 0 max_length = 0 for end in range(n): current_sum += arr[end] while current_sum > k: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"In a certain wizarding world, there is a famous broom racing tournament held annually. In this race, broom riders must navigate through a series of checkpoints scattered throughout a large forest. Each rider starts at checkpoint 0 (the starting point) and must reach checkpoint n (the final point). They can fly through the checkpoints in any order, but they must visit all checkpoints exactly once. You are given the coordinates of each checkpoint, and your task is to determine the minimum total distance a rider needs to travel to visit all checkpoints and return to the starting point. The first input line contains a single integer n (1 ≤ n ≤ 18) — the number of checkpoints including the starting and final point. The next n lines each contain two space-separated integers xi and yi — the (x, y) coordinates of the i-th checkpoint. Output a single integer representing the minimum total distance required for the rider to visit all checkpoints exactly once and return to the starting point. The answer should be rounded to the nearest integer. Example: ``` Input: 4 0 0 2 2 2 0 0 2 Output: 8 ``` Explanation: The checkpoints are (0,0), (2,2), (2,0), and (0,2). One possible route that gives the minimum distance is from (0,0) to (2,0) to (2,2) to (0,2) and back to (0,0). The total distance traveled in this route is 2 + 2 + 2 + 2 = 8.","solution":"import itertools import math def calculate_distance(coord1, coord2): Calculate the Euclidean distance between two coordinates. return math.sqrt((coord1[0] - coord2[0])**2 + (coord1[1] - coord2[1])**2) def min_total_distance(n, coordinates): Calculate the minimum total distance required to visit all checkpoints exactly once and return to the starting point. :param n: Integer, number of checkpoints. :param coordinates: List of tuples, coordinates of the checkpoints. :return: Integer, minimum total distance rounded to the nearest integer. # Generate all permutations of the intermediate checkpoints perm = itertools.permutations(coordinates[1:]) # Initialize the minimum distance to a large number min_distance = float(\'inf\') for p in perm: # Calculate the total distance for this permutation total_distance = 0 # Start from the starting point (coordinates[0]) current_coord = coordinates[0] for coord in p: total_distance += calculate_distance(current_coord, coord) current_coord = coord # Add the distance to return to the starting point total_distance += calculate_distance(current_coord, coordinates[0]) # Update the minimum distance if total_distance < min_distance: min_distance = total_distance return round(min_distance)"},{"question":"You are given an array of integers a. You should answer n queries. The i-th query consists of three integers: l_i, r_i, and k_i. The answer for this query is the k_i-th smallest unique number in the subarray from index l_i to r_i (both inclusive). If there are less than k_i unique numbers in the given subarray, output -1. The first line contains an integer m (1 leq m leq 10^{5}) — number of elements in array a. The second line contains m integers a_1, a_2, ldots, a_m (1 leq a_i leq 10^9) — elements of array a. The third line contains an integer n (1 leq n leq 10^5) — number of queries. Each of the next n lines contains three integers l_i, r_i, and k_i (1 leq l_i leq r_i leq m, 1 leq k_i leq r_i - l_i + 1) — parameters of the query with number i. For each query output the answer for it in a separate line. Input constraints: - Total number of elements in the array, and total number of queries combined do not exceed 2 times 10^5. Output format: For each query, output the k_i-th smallest unique number in the subarray. If there are less than k_i unique numbers, output -1.","solution":"def kth_smallest_unique(a, queries): results = [] for l, r, k in queries: subarray = a[l-1:r] unique_elements = sorted(set(subarray)) if len(unique_elements) < k: results.append(-1) else: results.append(unique_elements[k-1]) return results"},{"question":"Given an unsigned integer `n`, find the smallest palindrome larger than `n`. A palindrome is a number that reads the same backward as forward. For example, the next palindrome greater than 123 is 131. Remember that the next palindrome cannot be equal to `n` even if `n` is already a palindrome. **Input:** - The input consists of a single line containing an unsigned integer `n` (1 ≤ n ≤ 10^12). **Output:** - Print the smallest palindrome larger than `n`. **Examples:** Input: 123 Output: 131 Input: 99 Output: 101 **Explanation:** In the first example, the smallest palindrome greater than 123 is 131 because 121 is less than or equal to 123, and 131 is the next palindrome up. In the second example, the smallest palindrome greater than 99 is 101 because 100 is not a palindrome and 101 is the next palindrome up.","solution":"def next_palindrome(n): Returns the smallest palindrome larger than the given integer n. def is_palindrome(x): s = str(x) return s == s[::-1] n += 1 while not is_palindrome(n): n += 1 return n"},{"question":"Given an array of integers and a target sum, your task is to determine if there is a subset of the array such that the subset\'s sum is equal to the target sum. If such a subset exists, return the subset\'s elements; otherwise, return an empty list. The input consists of two lines: - The first line contains two integers, `n` (the number of elements in the array) and `target` (the target sum). - The second line contains `n` integers representing the elements of the array. The output should be a list of integers that represents the subset with a sum equal to the target sum or an empty list if no such subset exists. Note: - There might be multiple solutions; you can return any one of them. - The array can contain both positive and negative integers. - You can assume that `n` will be in the range of 1 to 20. # Example: **Input:** ``` 5 9 1 2 3 4 5 ``` **Output:** ``` [4, 5] ``` **Input:** ``` 4 10 2 4 6 8 ``` **Output:** ``` [2, 8] // or [4, 6] ``` **Input:** ``` 3 2 1 -1 3 ``` **Output:** ``` [3, -1] ``` **Input:** ``` 5 20 1 2 3 4 5 ``` **Output:** ``` [] ``` # Explanation: - For the first example, `4 + 5` equals the target sum `9`. - For the second example, either `2 + 8` or `4 + 6` equals the target sum `10`. - For the third example, `3 + -1` equals the target sum `2`. - For the last example, no subset sums to `20`, thus an empty list is returned.","solution":"def subset_sum(n, target, arr): def find_subset(i, current_sum, subset): if current_sum == target: return subset if i >= n or current_sum > target: return None # Choose the current element with_current = find_subset(i + 1, current_sum + arr[i], subset + [arr[i]]) if with_current: return with_current # Do not choose the current element without_current = find_subset(i + 1, current_sum, subset) if without_current: return without_current return None result = find_subset(0, 0, []) return result if result else [] # Example usage n, target = 5, 9 arr = [1, 2, 3, 4, 5] print(subset_sum(n, target, arr)) # Example case"},{"question":"Разработайте приложение для просмотра списка пользователей и их профилей. # Требования: - Используйте API: https://jsonplaceholder.typicode.com/users для получения списка пользователей. - На первом экране должно отображаться имя и электронная почта каждого пользователя в виде прокручиваемого списка. - При нажатии на пользователя должен открываться второй экран, где показываются его полные данные: имя, юзернейм, электронная почта, адрес (улица, город, почтовый индекс), телефон, вебсайт и компания (название компании, слоган, бизнес). Во втором экране рядом с данными пользователя должно быть отображено изображение профиля пользователя. Профили картинок можно сохранять локально в папке drawable или скачивать по URL (например, https://randomuser.me). # Оценка: - Правильное использование REST API для получения данных. - Организация кода (разделение по слоям: данные, логика, представление). - Обработка пользователем сетевых ошибок и пустых состояний. - Обработка нажатий и навигация между экранами. - Соответствие приложению платформы (использование RecyclerView, Intent, ViewModel и других Android-компонентов). - Удобный, чистый интерфейс, соответствующий платформенным и общепринятым правилам дизайна мобильных приложений. # Поддержка: - Вспомогательные материалы: - Документация по JSONPlaceholder: https://jsonplaceholder.typicode.com/guide/ - RecyclerView Tutorial: https://developer.android.com/guide/topics/ui/layout/recyclerview - Retrofit Tutorial: https://square.github.io/retrofit/","solution":"import requests def fetch_users(url): Fetches the list of users from the given URL. Args: - url (str): The URL to fetch the users from. Returns: - list: A list of user dictionaries if the request is successful. - None: If the request fails. try: response = requests.get(url) response.raise_for_status() # Raise an exception for HTTP errors return response.json() except requests.RequestException as e: print(f\\"Error fetching users: {e}\\") return None def get_user_profile(user_id, url_template): Fetches the profile of a user by their user_id. Args: - user_id (int): The user ID. - url_template (str): The URL template with a placeholder for user ID. Returns: - dict: A dictionary of user profile details if successful. - None: If the request fails. try: url = url_template.format(user_id) response = requests.get(url) response.raise_for_status() # Raise an exception for HTTP errors return response.json() except requests.RequestException as e: print(f\\"Error fetching user profile: {e}\\") return None"},{"question":"Given a string s of length n, you need to generate another string t of length n such that: - s and t are anagrams of each other, - t does not contain any substring which is also a substring present in s. If it is impossible to create such a string, return \\"-1\\". The first line contains an integer n (1 le n le 1000) — the length of the string s. The second line contains a string s consisting of lowercase English letters. If there is no such string, print a single line containing -1. Otherwise, print a single line containing the string t. If there are multiple valid answers, print any.","solution":"def generate_anagram(n, s): Generate a string t of length n such that t is an anagram of s, and there\'re no matching substrings between s and t. from collections import Counter # Check for basic sanity if n == 1: return \\"-1\\" # Count characters in s s_count = Counter(s) # Create a sorted list of characters from s sorted_chars = sorted(s) # Create t by shifting characters in sorted order t = list(sorted_chars) t = t[1:] + t[:1] for i in range(n - 1): if s[i] == \'\'.join(t[i:i + (n - 1)]): return \\"-1\\" return \'\'.join(t)"},{"question":"You are given an array of integers where each element represents the height of a building. Imagine that a person is standing on each building and wants to see the sunset. The sunset is to the right of the array (i.e., towards the end of the array). A building can see the sunset if there are no buildings to its right that are taller or of the same height. Your task is to determine the number of buildings that can see the sunset. Write a function to solve the problem with the following prototype: ```python def count_sunset_buildings(heights: List[int]) -> int: # Your code here ``` # Input - `heights`: A list of integers representing the heights of the buildings, where `1 <= len(heights) <= 10^6` and `1 <= heights[i] <= 10^9`. # Output - Return an integer that represents the number of buildings that can see the sunset. # Example ```python assert count_sunset_buildings([3, 7, 8, 3, 6, 1]) == 3 # Explanation: # Building at index 2 (height 8) can see the sunset. # Building at index 4 (height 6) can see the sunset. # Building at index 5 (height 1) can see the sunset. assert count_sunset_buildings([1, 2, 3, 4, 5]) == 1 # Explanation: # Only the last building (height 5) can see the sunset. assert count_sunset_buildings([5, 4, 3, 2, 1]) == 5 # Explanation: # All the buildings can see the sunset. ``` # Note - The function should be optimized for performance given the constraint that `len(heights)` can be up to `10^6`.","solution":"from typing import List def count_sunset_buildings(heights: List[int]) -> int: Returns the number of buildings that can see the sunset. count = 0 max_height = 0 for height in reversed(heights): if height > max_height: count += 1 max_height = height return count"},{"question":"In a fantasy land, the citizens have unique ways of summarizing their storytelling contests. They keep track of the number of words spoken by each participant and rank them in descending order. However, if two participants have spoken the same number of words, they rank them based on their names in alphabetical order. All names are unique, consisting only of alphabetic characters. Your task is to help the citizens automate the process of ranking participants. You will be given a list of participants, each with their name and the number of words they have spoken. Write a program that prints the sorted list of participants according to the ranking rules described. # Input: - The first line contains an integer `n` denoting the number of participants. - The following `n` lines each contain a string `name` (the participant\'s name) followed by an integer `words` (the number of words spoken by that participant). # Output: Print the sorted list of participants. Each line should contain the participant\'s name and the number of words they spoke, separated by a space. Output the participants in descending order of words spoken. If two participants have spoken the same number of words, order them alphabetically by name. # Example: Input: ``` 5 Alice 30 Bob 45 Charlie 30 Dave 45 Eve 50 ``` Output: ``` Eve 50 Bob 45 Dave 45 Alice 30 Charlie 30 ``` # Explanation: - Eve has spoken the most words, so she is first. - Bob and Dave have spoken the same number of words (45), but Bob comes first alphabetically. - Alice and Charlie have spoken 30 words each, but Alice comes before Charlie alphabetically. Can you help the citizens rank the participants according to the rules?","solution":"def rank_participants(n, participants): Ranks participants based on the number of words spoken in descending order. If two participants have spoken the same number of words, they are ranked alphabetically by name. Arguments: n -- number of participants participants -- list of tuples, where each tuple contains (name, words) Returns: A list of strings where each string contains the participant\'s name and the number of words spoken, separated by a space. # Sort the participants: first by number of words in descending order, then by name in ascending order participants_sorted = sorted(participants, key=lambda x: (-x[1], x[0])) # Format the result result = [f\\"{name} {words}\\" for name, words in participants_sorted] return result # Example usage: # participants = [(\\"Alice\\", 30), (\\"Bob\\", 45), (\\"Charlie\\", 30), (\\"Dave\\", 45), (\\"Eve\\", 50)] # print(rank_participants(5, participants))"},{"question":"Alice and Bob are playing a game involving a sequence of n integers. In this game, they take turns removing numbers from the sequence based on the following rules: 1. Alice always starts first. 2. On each turn, the player can remove any one number from the sequence. 3. Alice wants to minimize the number of turns she takes to make the sequence strictly increasing. 4. Bob wants to maximize the number of turns Alice takes to achieve this goal. Given the initial sequence of n integers, determine the minimum number of moves Alice needs to make the sequence strictly increasing regardless of Bob\'s strategy to prolong it. The first line of the input contains a single integer n (1 le n le 2 cdot 10^5) — the number of integers in the sequence. The second line of the input contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the sequence of integers. Output a single integer, the minimum number of moves Alice needs to make the sequence strictly increasing. # Example Input: ``` 6 5 3 4 8 6 7 ``` Output: ``` 2 ``` Explanation: Alice can remove numbers \'3\' and \'6\' to make the sequence [5, 4, 8, 7] strictly increasing, which isn\'t correct. The correct strictly increasing sequence is [3, 4, 6, 7], so Alice would need to remove \'5\' and \'8\', leading to only 2 moves.","solution":"def min_moves_to_make_increasing(n, sequence): Function to find the minimum number of moves required to make the sequence strictly increasing. Parameters: n (int): Length of sequence. sequence (list of int): The sequence of integers. Returns: int: Minimum number of moves to make the sequence strictly increasing. # Create a dp array to store the length of the longest increasing subsequence ending at each index dp = [1] * n # Fill the dp array for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) # Length of the longest increasing subsequence lis_length = max(dp) # The result is the total number of elements minus the length of the longest increasing subsequence return n - lis_length # Input example to test the function # n = 6 # sequence = [5, 3, 4, 8, 6, 7] # print(min_moves_to_make_increasing(n, sequence)) # Output should be 2"},{"question":"You are tasked with building a task management system for a project using a custom data structure. Each task has a unique identifier and a priority level. The higher the priority level, the more urgent the task. You need to implement a class `TaskManager` that supports the following operations: 1. **add_task(task_id, priority)**: Adds a new task with the given `task_id` and `priority` if a task with the same `task_id` does not already exist. If it does, update the priority of the existing task. 2. **get_next_task()**: Returns the `task_id` of the highest priority task and removes it from the system. If there are multiple tasks with the same highest priority, return the one that was added first. 3. **remove_task(task_id)**: Removes the task with the given `task_id` from the system if it exists. 4. **change_priority(task_id, new_priority)**: Changes the priority of the task with the given `task_id` to `new_priority` if it exists. Implement the `TaskManager` class with the operations described above. # Constraints: - The `task_id` will be a string of alphanumeric characters with a length between 1 and 20. - The `priority` and `new_priority` will be signed integers. - There will be at most `10^5` operations. - All operations will be valid and will fit in memory. # Example: ```python # Example usage of TaskManager class tm = TaskManager() tm.add_task(\\"task1\\", 10) tm.add_task(\\"task2\\", 5) tm.add_task(\\"task3\\", 15) print(tm.get_next_task()) # should return \\"task3\\" tm.add_task(\\"task4\\", 15) print(tm.get_next_task()) # should return \\"task4\\" (new task with the same highest priority) tm.change_priority(\\"task2\\", 20) print(tm.get_next_task()) # should return \\"task2\\" tm.remove_task(\\"task1\\") print(tm.get_next_task()) # should return None as it\'s empty now ``` # Class Definition ```python class TaskManager: def __init__(self): # Initialize your data structures here. def add_task(self, task_id: str, priority: int): # Add a new task or update the priority of an existing one. def get_next_task(self) -> str: # Return and remove the highest priority task. def remove_task(self, task_id: str): # Remove the task with the given id if it exists. def change_priority(self, task_id: str, new_priority: int): # Change the priority of the task with the given id if it exists. ``` Complete the `TaskManager` class by implementing the necessary methods.","solution":"import heapq import time class TaskManager: def __init__(self): self.tasks = {} self.pq = [] self.counter = 0 # to handle the first-come first-served when priorities are the same def add_task(self, task_id: str, priority: int): if task_id in self.tasks: self.change_priority(task_id, priority) else: heapq.heappush(self.pq, (-priority, self.counter, task_id)) self.tasks[task_id] = (-priority, self.counter) self.counter += 1 def get_next_task(self) -> str: while self.pq: priority, count, task_id = heapq.heappop(self.pq) if task_id in self.tasks and self.tasks[task_id] == (priority, count): del self.tasks[task_id] return task_id return None def remove_task(self, task_id: str): if task_id in self.tasks: del self.tasks[task_id] def change_priority(self, task_id: str, new_priority: int): if task_id in self.tasks: _, count = self.tasks[task_id] self.tasks[task_id] = (-new_priority, count) heapq.heappush(self.pq, (-new_priority, count, task_id))"},{"question":"You are given a list of `n` integers and `m` queries to answer. Each query can be one of two types: 1. Update the value at a specific index in the list to a new value. 2. Compute and return the sum of values within a specified sub-range of the list (inclusive). The operations should be performed efficiently. The first line of input contains two integers `n` (1 ≤ n ≤ 100,000) — the number of elements in the list, and `m` (1 ≤ m ≤ 100,000) — the number of queries. The second line contains `n` integers `a1, a2, ..., an` (−10^9 ≤ ai ≤ 10^9) — the initial values of the list. Each of the next `m` lines contains a query. A query is represented by three integers `t, x, y` (1 ≤ t ≤ 2, 1 ≤ x, y ≤ n). If `t` is 1, then the query is an update and you should update the value at index `x` to `y`. If `t` is 2, then the query is a range sum query and you should return the sum of elements from index `x` to `y` (inclusive). For each query of the second type, output the result on a separate line.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def process_queries(n, m, arr, queries): fenwick_tree = FenwickTree(n) result = [] # Initialize Fenwick Tree with initial values for i in range(n): fenwick_tree.update(i + 1, arr[i]) for query in queries: t, x, y = query if t == 1: # Update query: Update index x to new value y current_val = arr[x - 1] delta = y - current_val fenwick_tree.update(x, delta) arr[x - 1] = y elif t == 2: # Range sum query: Sum from index x to y sum_range = fenwick_tree.query(y) - fenwick_tree.query(x - 1) result.append(sum_range) return result"},{"question":"You are given an array of integers and a target integer. Your task is to determine whether there are two distinct indices i and j in the array such that their sum is equal to the target integer. If such indices exist, print \\"YES\\", otherwise print \\"NO\\". The first line contains two integers n and t (1 <= n <= 10^5, -10^9 <= t <= 10^9) — the number of elements in the array and the target integer. The second line contains n integers a1, a2, ..., an (-10^9 <= ai <= 10^9) — the elements of the array. Your solution should have a time complexity better than O(n^2). Input: - The first line contains the integers n and t. - The second line contains n space-separated integers representing the array. Output: - Print \\"YES\\" if there exist two distinct indices i and j such that ai + aj = t. Otherwise, print \\"NO\\".","solution":"def has_pair_with_sum(arr, target): Determines whether there are two distinct indices i and j in the array such that their sum is equal to the target integer. :param arr: List[int] - The array of integers. :param target: int - The target integer. :return: str - \\"YES\\" if such indices exist, otherwise \\"NO\\". seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"There is a city with n intersections, numbered from 1 to n. Some pairs of intersections are connected by m bidirectional roads. A road between intersections a and b is denoted by (a, b). You are given a source intersection s and a destination intersection t. You need to calculate the minimum number of roads one needs to take to reach from s to t. If it\'s not possible to reach the destination, return -1. Note that some roads may be temporarily closed due to maintenance, which will be represented by queries. Your task is to dynamically handle the availability of roads and process the respective minimum path calculations based on the current road status. The first line of input will contain two integers, n and m (2 le n le 10^5, 1 le m le 2 cdot 10^5), representing the number of intersections and the number of roads, respectively. The next m lines each contains two integers u and v (1 le u, v le n), representing a road between intersections u and v. The next line contains an integer q (1 le q le 2 cdot {10}^{5}) — the number of queries. Each of the following q lines describes a query: 1. \\"CLOSE x y\\" — Close the road between intersections x and y. 2. \\"OPEN x y\\" — Open the road between intersections x and y. 3. \\"PATH s t\\" — Calculate the minimum number of roads from intersection s to intersection t and output the result. Output the answer for each \\"PATH\\" query on a new line. Example input: ``` 5 5 1 2 1 3 1 4 2 5 3 5 4 PATH 1 5 CLOSE 1 3 PATH 1 5 OPEN 1 3 PATH 1 5 ``` Example output: ``` 2 2 2 ``` Explanation: - The initial graph allows to reach from 1 to 5 via either (1-2-5), (1-3-5), or (1-4-3-5); hence the shortest path is 2. - After closing the road between 1 and 3, the shortest remaining path is still 2 via (1-2-5) or (1-4-3-5). - Reopening the road (1-3) restores the shortest path of length 2 through (1-3-5) again.","solution":"from collections import deque, defaultdict def bfs(graph, s, t): queue = deque([s]) distances = {s: 0} while queue: node = queue.popleft() if node == t: return distances[node] for neighbor in graph[node]: if neighbor not in distances: distances[neighbor] = distances[node] + 1 queue.append(neighbor) return -1 def process_queries(n, roads, queries): graph = defaultdict(set) for u, v in roads: graph[u].add(v) graph[v].add(u) results = [] for query in queries: parts = query.split() if parts[0] == \\"PATH\\": s, t = int(parts[1]), int(parts[2]) results.append(bfs(graph, s, t)) elif parts[0] == \\"CLOSE\\": x, y = int(parts[1]), int(parts[2]) if y in graph[x]: graph[x].remove(y) if x in graph[y]: graph[y].remove(x) elif parts[0] == \\"OPEN\\": x, y = int(parts[1]), int(parts[2]) graph[x].add(y) graph[y].add(x) return results"},{"question":"Given an array of integers and a positive integer `k`, design an algorithm to find a subarray of length `k` with the maximum sum. # Example ``` Input: arr = [1, -2, 3, 4, 5, -6, 1] k = 3 Output: [3, 4, 5] Explanation: Out of all subarrays of length 3, the one with the maximum sum is [3, 4, 5]. ``` # Note: - If there are multiple subarrays with the same maximum sum, return any one of them. # Input: - An integer array `arr` containing `n` integers (1 le n le 10^5). - An integer `k` (1 le k le n). # Output: - Return the subarray of length `k` that has the maximum sum.","solution":"def max_sum_subarray(arr, k): Finds the subarray of length `k` with the maximum sum. Parameters: arr (list of int): The input array of integers. k (int): The length of the subarray to find. Returns: list of int: The subarray of length `k` with the maximum sum. n = len(arr) if n < k: return [] # Calculate the sum of the first window of size k max_sum = cur_sum = sum(arr[:k]) start_index = 0 # Traverse through the array and find the maximum sum of subarray of size k for i in range(k, n): cur_sum += arr[i] - arr[i - k] if cur_sum > max_sum: max_sum = cur_sum start_index = i - k + 1 return arr[start_index : start_index + k]"},{"question":"You are given a grid of numbers representing a maze. Your task is to determine the length of the longest straight path of non-decreasing numbers within the maze. A path can be straight either horizontally or vertically but cannot turn. The maze is represented as an n x m grid of integers, where 1 ≤ n, m ≤ 100. Each cell contains an integer and consecutive cells in the path must have values that are non-decreasing (each cell in the path must be greater than or equal to the previous cell). Input specification: The first line contains two integers n and m, representing the number of rows and columns of the maze. Each of the next n lines contains m integers separated by spaces, representing the values at each cell of the maze. Output specification: Output a single integer representing the length of the longest straight path of non-decreasing numbers. Example: Input: 3 4 1 2 2 3 2 2 1 4 1 4 4 4 Output: 4 Explanation: The longest straight path is from the (2,1) -> (2,2) -> (2,3) -> (2,4) with lengths 4.","solution":"def longest_straight_path(n, m, grid): max_length = 0 # Check largest straight path in rows for i in range(n): current_length = 1 for j in range(1, m): if grid[i][j] >= grid[i][j - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) # Check largest straight path in columns for j in range(m): current_length = 1 for i in range(1, n): if grid[i][j] >= grid[i - 1][j]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"Gina is organizing a treasure hunt for her friends. She has hidden treasure at different spots in a park, and each spot is identified by its coordinates on a 2D plane. The coordinates of the treasure spots are represented by a list (x_1, y_1), (x_2, y_2), dots, (x_n, y_n). Gina wants to divide the park into vertical strips such that each strip contains exactly one treasure spot. The boundary between two strips must be a vertical line that passes between two consecutive treasures on the x-axis. The treasure hunt will be fun if there is no vertical line passing through two treasures. Your task is to determine if Gina can place the boundaries such that each vertical strip contains exactly one treasure spot, and no two treasures share the same x-coordinate. The first line of the input contains a single integer n (1 leq n leq 10^5) - the number of treasure spots. The next n lines each contains two integers x_i and y_i (1 leq x_i, y_i leq 10^9) - the coordinates of each treasure spot. Print \\"YES\\" if Gina can split the park into vertical strips such that each strip contains exactly one treasure spot. Print \\"NO\\" otherwise. **Example** **Input:** ``` 3 1 5 2 7 3 8 ``` **Output:** ``` YES ``` **Input:** ``` 3 1 5 2 5 2 7 ``` **Output:** ``` NO ``` In the first example, Gina can place vertical lines between the treasures at (1, 5) and (2, 7), and (2, 7) and (3, 8). In the second example, treasures at (2, 5) and (2, 7) share the same x-coordinate, so it is not possible to split the park into the required strips.","solution":"def can_split_park(n, treasures): Given n treasures and their (x, y) coordinates, this function checks if the park can be divided into vertical strips where each strip contains exactly one treasure. The output is \\"YES\\" if such a division is possible, otherwise \\"NO\\". :param n: Number of treasure spots. :param treasures: A list of tuples, each containing the (x, y) coordinates of a treasure. :return: \\"YES\\" or \\"NO\\" # Extract the x-coordinates from the list of treasures x_coordinates = [treasure[0] for treasure in treasures] # Check if the length of the set of x-coordinates is equal to n # If true, then all x-coordinates are unique if len(set(x_coordinates)) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of n integers and a number k. Your task is to determine whether there exist four distinct indices i, j, l, m in the array such that the sum of the elements at these indices equals k. The first line contains two integers n (1 ≤ n ≤ 2000) and k (|k| ≤ 10^9). The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9). Output \\"YES\\" if there exists such indices, otherwise output \\"NO\\".","solution":"def four_sum_exists(arr, k): n = len(arr) if n < 4: return \\"NO\\" sum_lookup = {} for i in range(n): for j in range(i + 1, n): s = arr[i] + arr[j] if s not in sum_lookup: sum_lookup[s] = [] sum_lookup[s].append((i, j)) for i in range(n): for j in range(i + 1, n): target = k - (arr[i] + arr[j]) if target in sum_lookup: for (l, m) in sum_lookup[target]: if l != i and l != j and m != i and m != j: return \\"YES\\" return \\"NO\\""},{"question":"After the Upper Council meeting, the Kingdom has decided to conduct a research project on the information flow between departments. The kingdom\'s information network can be represented as a directed graph with n nodes and m directed edges. Each node represents a department, and each directed edge represents the information flow from one department to another. The network might have cycles. Given a start department and an end department, determine if there is a valid path respecting the direction of the edges that allows the information to flow from the start department to the end department. The first line of the input contains integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 20000) — the number of departments and the number of directed information channels. The i-th of the following m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — indicating there is a directed edge from department ui to department vi. Each pair of departments may appear several times, representing multiple direct information channels. The next line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the next q lines contains two integers si and ti (1 ≤ si, ti ≤ n, si ≠ ti) — the index of the starting department and the index of the target department, respectively. For each query, print \\"Reachable\\" (without quotes) if there is a path from department si to department ti using the given direction of the edges, or \\"Not Reachable\\" (without quotes) otherwise.","solution":"from collections import defaultdict, deque def can_reach(n, edges, queries): def bfs(start, target): queue = deque([start]) visited = set([start]) while queue: node = queue.popleft() if node == target: return \\"Reachable\\" for next_node in graph[node]: if next_node not in visited: visited.add(next_node) queue.append(next_node) return \\"Not Reachable\\" # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Process each query and determine reachability results = [] for si, ti in queries: results.append(bfs(si, ti)) return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the length of the longest substring without repeating characters. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the following t lines contains a single string whose length does not exceed 105. For each test case, print a single integer — the length of the longest substring without repeating characters. Example: Input: 3 abcabcbb bbbbb pwwkew Output: 3 1 3 Explanation: For the first test case, the answer is \\"abc\\", with the length of 3. For the second test case, the answer is \\"b\\", with the length of 1. For the third test case, the answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. last_seen = {} start = 0 max_length = 0 for i, char in enumerate(s): if char in last_seen and start <= last_seen[char]: start = last_seen[char] + 1 else: max_length = max(max_length, i - start + 1) last_seen[char] = i return max_length def process_test_cases(test_cases): Processes multiple test cases and returns the results. return [length_of_longest_substring(test_case) for test_case in test_cases]"},{"question":"The Kingdom of Noland is split into several provinces. Each province is governed by a single mayor, and these mayors report directly to the king. Every mayor can manage one or more districts under their province, and each district produces a certain quantity of resources important for the kingdom\'s prosperity. One day, the king decided to optimize the resource production of the entire kingdom by ensuring that every district\'s resources are maximized. However, transferring resources between districts incurs a certain cost based on the distance between districts. The districts are connected by roads, and the distance between any two districts is determined by the minimum number of roads that need to be traversed to move from one district to another. You are given a map of Noland in the form of a connected, undirected graph where nodes represent districts and edges represent roads. Additionally, you are given the resource production of each district. The king needs your help to determine the maximum total resource production that can be achieved if resources can be optimally transferred between districts of the same province. The cost to transfer resources is not a concern for the king (as he is willing to bear any cost), the objective is to maximize the production within each province. The input consists of: - An integer `n` representing the number of districts (1 ≤ n ≤ 105). - An integer `m` representing the number of edges (0 ≤ m ≤ n-1). - A list of `n` integers representing the resource production of each district. - `m` pairs of integers representing the roads connecting the districts. - An integer `k` representing the number of provinces (1 ≤ k ≤ n). - `k` lists of integers, each list representing a province, containing the indices of the districts that belong to that province. Each district belongs to exactly one province. Write a program to determine the maximum total resource production for each province. # Input Format - The first line contains two integers `n` and `m`. - The second line contains `n` integers, the resource production of districts. - The next `m` lines contain two integers each, representing the roads connecting pairs of districts. - The next line contains the integer `k`. - The next `k` lines contain lists of integers, each representing the districts in a single province. # Output Format - Print `k` integers, each representing the maximum total resource production that can be achieved within each province. # Sample Input ``` 6 5 10 40 30 20 50 60 1 2 2 3 2 4 4 5 5 6 2 1 2 3 4 5 6 ``` # Sample Output ``` 80 130 ``` # Explanation In the first province, districts [1, 2, 3] are considered. The total resource production can be maximized as 10 + 40 + 30 = 80. In the second province, districts [4, 5, 6] are considered. The total resource production can be maximized as 20 + 50 + 60 = 130.","solution":"def max_production_per_province(n, m, resources, roads, k, provinces): # Initialize a graph (adjacency list representation) graph = {i: [] for i in range(n)} for u, v in roads: graph[u-1].append(v-1) graph[v-1].append(u-1) max_productions = [] for province in provinces: total_resource = sum(resources[d - 1] for d in province) max_productions.append(total_resource) return max_productions"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. Your task is to remove exactly k characters from the string such that the resulting string is lexicographically smallest. A string a is lexicographically smaller than a string b if in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \\"apple\\" is lexicographically smaller than \\"banana\\" because \'a\' is smaller than \'b\'. You have to answer this query for multiple test cases. The first line contains a single integer t (1 leq t leq 10) — the number of test cases. Each of the following t test cases consists of a line containing a string s (1 leq |s| leq 10^5) and an integer k (0 leq k < |s|). Output the lexicographically smallest string possible after removing exactly k characters for each test case. Example: Input: ``` 3 abcde 2 bac 1 a 0 ``` Output: ``` abc ac a ```","solution":"def remove_k_characters_to_lexicographically_smallest(s, k): Remove exactly \'k\' characters from the string `s` to make it lexicographically smallest. stack = [] for char in s: while k > 0 and stack and stack[-1] > char: stack.pop() k -= 1 stack.append(char) # In case we still need to remove more characters while k > 0: stack.pop() k -= 1 return \'\'.join(stack) def process_test_cases(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) results = [] for i in range(1, t + 1): parts = lines[i].split() s, k = parts[0], int(parts[1]) result = remove_k_characters_to_lexicographically_smallest(s, k) results.append(result) return results"},{"question":"A matrix is a rectangular array of numbers arranged in rows and columns. You are given a matrix of size n times m and you need to answer q queries. Each query is defined by four integers x_1, y_1, x_2, y_2 which describe the top-left and bottom-right corners of a submatrix. Your task is to find the sum of all elements within the submatrix defined by these four corners, inclusive. The first line of the input contains two integers n and m (1 leq n, m leq 1000) - the number of rows and columns in the matrix. The next n lines each contain m integers - the elements of the matrix. Each element of the matrix is an integer within the range -1000 leq a_{ij} leq 1000. The next line contains a single integer q (1 leq q leq 10000) - the number of queries. The following q lines each contain four integers x_1, y_1, x_2, y_2 (1 leq x_1 leq x_2 leq n; 1 leq y_1 leq y_2 leq m) - representing a query. Output q lines, the i-th of which should contain the sum of elements in the submatrix defined by the i-th query. # Example **Input** ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ``` **Output** ``` 12 28 ``` **Explanation**: For the first query, the submatrix is: ``` 1 2 4 5 ``` Sum = 1 + 2 + 4 + 5 = 12 For the second query, the submatrix is: ``` 5 6 8 9 ``` Sum = 5 + 6 + 8 + 9 = 28","solution":"def preprocess_matrix(matrix): Preprocess the matrix to create an auxiliary sum_matrix where sum_matrix[i][j] contains the sum of elements from (0,0) to (i-1, j-1) in the original matrix. n = len(matrix) m = len(matrix[0]) sum_matrix = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n+1): for j in range(1, m+1): sum_matrix[i][j] = (matrix[i-1][j-1] + sum_matrix[i-1][j] + sum_matrix[i][j-1] - sum_matrix[i-1][j-1]) return sum_matrix def submatrix_sum(sum_matrix, x1, y1, x2, y2): Calculate the sum of elements in the submatrix defined by the corners (x1,y1) and (x2,y2) using the preprocessed sum_matrix. Note: the inputs x1, y1, x2, y2 are expected to be 1-indexed. return (sum_matrix[x2][y2] - sum_matrix[x1-1][y2] - sum_matrix[x2][y1-1] + sum_matrix[x1-1][y1-1]) def matrix_query_sums(n, m, matrix, queries): sum_matrix = preprocess_matrix(matrix) result = [] for q in queries: x1, y1, x2, y2 = q result.append(submatrix_sum(sum_matrix, x1, y1, x2, y2)) return result"},{"question":"A certain coding competition involves solving problems using a hypothetical programming language dubbed \\"Languon\\". One of the challenges requires participants to manipulate a list of integers by performing a series of operations defined as follows. An operation is represented as - `REMOVE x y`: Remove all occurrences of integer `x` from the list `y` number of times. If `x` appears less than `y` times, remove all occurrences of `x` from the list. - `ADD x y`: Append integer `x` exactly `y` times to the end of the list. - `REPLACE x y z`: Replace the first `z` occurrences of integer `x` in the list with integer `y`. If `x` appears less than `z` times, replace all occurrences of `x` with `y`. For example, given a list `[2, 2, 3, 4, 2, 3, 5]`, and operations: ``` REMOVE 2 2 ADD 7 3 REPLACE 3 9 1 ``` The sequence of operations would result in: 1. After `REMOVE 2 2`: `[3, 4, 2, 3, 5]` 2. After `ADD 7 3`: `[3, 4, 2, 3, 5, 7, 7, 7]` 3. After `REPLACE 3 9 1`: `[9, 4, 2, 3, 5, 7, 7, 7]` Your task is to simulate these operations on an initial list and produce the resulting list. **Input format:** - The first line contains an integer `n` (1 leq n leq 100,000) — the number of initial elements in the list. - The second line contains `n` integers representing the initial list. - The third line contains an integer `m` (1 leq m leq 100,000) — the number of operations. - The next `m` lines each contain a string representing one of the three types of operations as described above. **Output format:** - Print the resulting list after all operations have been performed. **Example Input:** ``` 7 2 2 3 4 2 3 5 3 REMOVE 2 2 ADD 7 3 REPLACE 3 9 1 ``` **Example Output:** ``` 9 4 2 3 5 7 7 7 ``` Implement a function that carries out the specified operations and returns the modified list as a space-separated string.","solution":"def modify_list(n, initial_list, m, operations): result = initial_list[:] for operation in operations: op = operation.split() command = op[0] if command == \'REMOVE\': x = int(op[1]) y = int(op[2]) count = 0 while x in result and count < y: result.remove(x) count += 1 elif command == \'ADD\': x = int(op[1]) y = int(op[2]) result.extend([x] * y) elif command == \'REPLACE\': x = int(op[1]) y = int(op[2]) z = int(op[3]) count = 0 for i in range(len(result)): if result[i] == x and count < z: result[i] = y count += 1 return \' \'.join(map(str, result))"},{"question":"Arkady is planning to build a fence around his rectangular garden. The fence will be constructed using wooden planks, each with a width of w units. Arkady wants to maximize the number of complete planks he can use along the perimeter of the garden. Given the length l and width b of the rectangular garden, determine the maximum number of wooden planks Arkady can use along its perimeter. The first line contains three integers l, b, and w (1 ≤ l, b, w ≤ 10^9) — the length and width of the garden, and the width of each wooden plank, respectively. Print the maximum number of complete wooden planks Arkady can use along the perimeter of the garden. # Example Input: ``` 10 5 2 ``` Output: ``` 14 ``` Explanation: The perimeter of the garden is 2*(l + b) = 2*(10 + 5) = 30 units. Each wooden plank is 2 units wide. Therefore, the maximum number of complete planks is 30 // 2 = 15. However, since the perimeter must be divided evenly among the planks, we can place 14 complete planks (7 on each pair of opposite sides), leaving some leftover space.","solution":"def max_planks(l, b, w): Returns the maximum number of complete wooden planks of width w that can be used to cover the perimeter of a garden of dimensions l by b. perimeter = 2 * (l + b) return perimeter // w"},{"question":"Zara is a software engineer who loves working with graphs. Given a connected undirected graph with `n` vertices and `m` edges, she wants to find if there exists any cycle in the graph. A cycle is defined as a path in which the first and last vertices are the same, and no other vertex is repeated. Your task is to help Zara determine if at least one cycle exists in the given graph. The input consists of two integers `n` (1 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ 1000) — the number of vertices and edges in the graph, respectively. The next `m` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n; u ≠ v) — denoting an edge between vertices `u` and `v`. There are no multiple edges between the same vertices and no self-loops in the graph. Output \\"YES\\" if there is at least one cycle in the graph. Otherwise, print \\"NO\\". **Input Example:** ``` 5 5 1 2 2 3 3 4 4 5 5 2 ``` **Output Example:** ``` YES ``` **Input Example:** ``` 3 2 1 2 2 3 ``` **Output Example:** ``` NO ``` Ensure your solution runs efficiently within given constraints.","solution":"def detect_cycle(n, m, edges): from collections import defaultdict # Create a graph using adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): return \\"YES\\" return \\"NO\\""},{"question":"A newly formed cycle city ring network has a set of n intersections connected by bidirectional roads in such a way that every intersection is part of exactly one simple cycle. The city planners number these intersections from 1 to n and have been assigned the task to ensure that each intersection has a unique feature: its distance from the nearest landmark in the city. Given an array of integers `d` of length n, where `d[i]` denotes the minimum distance from the i-th intersection to the nearest landmark, the city planners have a challenge to check if these distances are valid. Specifically, for the distances to be valid: 1. The array `d` must contain distances that are unique. 2. For every intersection, moving in either direction (clockwise or counterclockwise) to the next intersection should either increase or decrease the distance by 1 (it means that `|d[i]-d[j]|` should be exactly 1 if `i` and `j` are adjacent intersections in the cycle). Write a function `is_valid_cycle` to determine if the array `d` represents a valid set of distances for the city\'s cycle network. **Function Signature:** ```python def is_valid_cycle(d: List[int]) -> bool: pass ``` **Input:** - A list of integers `d` of length n (1 ≤ n ≤ 10^5), where `d[i]` is the minimum distance from the i-th intersection to the nearest landmark. **Output:** - Return `True` if `d` represents a valid set of distances. Otherwise, return `False`. **Example:** ```python assert is_valid_cycle([0, 1, 2, 3, 4]) == True assert is_valid_cycle([3, 4, 5, 6, 5]) == False assert is_valid_cycle([2, 3, 4, 0, 1]) == True assert is_valid_cycle([0, 1, 3, 2, 4]) == False ``` **Notes:** - The intersections are connected in a cyclic manner, so the adjacent intersections for the `i-th` intersection are `(i-1) % n` and `(i+1) % n`. - The function should handle large inputs efficiently within the constraints.","solution":"from typing import List def is_valid_cycle(d: List[int]) -> bool: n = len(d) # Check for unique distances if len(set(d)) != n: return False # Check distance difference condition for i in range(n): next_index = (i + 1) % n prev_index = (i - 1 + n) % n if abs(d[i] - d[next_index]) != 1 and abs(d[i] - d[prev_index]) != 1: return False return True"},{"question":"You are given an m x n grid of positive integers representing the heights of different sections of land. Determine how many unique \\"valleys\\" exist in the grid. A \\"valley\\" is a group of connected cells (horizontally or vertically) such that each cell in the group has a height strictly less than each cell adjacent to the group (if adjacent cells exist). Two cells are considered part of the same \\"valley\\" if they are connected horizontally or vertically and have the same height. Write a function that takes the m x n grid as input and returns the number of unique \\"valleys\\". # Input - The first line contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the grid. - Each of the next m lines contains n integers, representing the heights of the land sections. # Output - Output a single integer — the number of unique valleys in the grid. # Example Input ``` 4 5 1 2 2 1 3 2 1 1 2 1 3 1 2 3 2 2 2 2 2 3 ``` Output ``` 3 ``` # Explanation In the provided example, there are three unique valleys: 1. A valley composed of the single cell with a height of `1` at (0, 0). 2. A valley composed of the cells with a height of `1` at coordinates (1, 1), (1, 2), and (2, 1). 3. A valley composed of the cells with a height of `1` at (1, 4). # Notes - Use depth-first search (DFS) or breadth-first search (BFS) to identify connected components. - Ensure that identified valleys are strictly surrounded by higher height cells on all sides.","solution":"def count_valleys(grid): def dfs(i, j, height): stack = [(i, j)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while stack: x, y = stack.pop() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and not visited[nx][ny] and grid[nx][ny] == height: visited[nx][ny] = True stack.append((nx, ny)) def is_valley(i, j): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: adj_i, adj_j = i + dx, j + dy if 0 <= adj_i < len(grid) and 0 <= adj_j < len(grid[0]) and grid[adj_i][adj_j] <= grid[i][j]: return False return True m, n = len(grid), len(grid[0]) visited = [[False for _ in range(n)] for _ in range(m)] valleys = 0 for i in range(m): for j in range(n): if not visited[i][j] and is_valley(i, j): visited[i][j] = True dfs(i, j, grid[i][j]) valleys += 1 return valleys # Example usage: # grid = [ # [1, 2, 2, 1, 3], # [2, 1, 1, 2, 1], # [3, 1, 2, 3, 2], # [2, 2, 2, 2, 3] # ] # print(count_valleys(grid)) # Output: 3"},{"question":"Alex has a string consisting of lowercase English letters. Alex performs the following operation on the string: he finds the longest substring where all characters are the same and replaces it with a single instance of that character. For example, if Alex\'s string is \\"aabbbcc\\", then after one operation it becomes \\"abcc\\". Compute the number of operations Alex should make until the string becomes of length one, i.e., all characters in the string have been merged into a single character. The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the string. The second line contains a string of length n consisting of lowercase English letters. Print the number of operations Alex should make to reduce the string to a single character. For instance, consider the following example cases: In the first example, the initial string is \\"aabbbccccd\\". 1. In the first operation, Alex replaces \\"aaaa\\" with \\"a\\", so the string becomes \\"abbbccccd\\". 2. In the second operation, \\"bbb\\" is replaced with \\"b\\", so the string becomes \\"abccccd\\". 3. In the third operation, \\"cccc\\" is replaced with \\"c\\", so the string becomes \\"abcd\\". 4. Finally, Alex needs three more operations to reduce the string one character at a time: \\"a\\", \\"b\\", \\"c\\", and \\"d\\". In the second example, the initial string is \\"ab\\". Since all substrings are already of length one, Alex needs `n - 1` operations, or one operation to reduce the string to a single character. In the third example, the initial string is \\"zzzz\\". This is already the longest possible single substring so it only requires one operation to reduce it to a single character. In the fourth example, the initial string is \\"xyzxyz\\". Each character is distinct in their immediate neighborhood, so the steps would be: 1. Replace \\"x\\", \\"y\\", and \\"z\\" with consecutive single instances, so string remains unaltered in length. 2. Requires a minimum of 5 operations to change each character sequentially.","solution":"def count_operations_to_single_char(s): This function computes the number of operations needed to reduce a string to a single character by merging consecutive identical characters. Parameters: s (str): the input string consisting of lowercase English letters Returns: int: number of operations required to reduce the string to a single character if len(s) == 1: return 0 s = list(s) operations = 0 while len(s) > 1: i = 0 while i < len(s) - 1: if s[i] == s[i + 1]: # find the end of this consecutive substring of same characters j = i while j < len(s) - 1 and s[j] == s[j + 1]: j += 1 s = s[:i + 1] + s[j + 1:] # keep only one char and remove the rest operations += 1 break i += 1 # If no consecutive characters are found, reduce length by 1 character if i == len(s) - 1: operations += len(s) - 1 break return operations"},{"question":"Slicing Strings Effectively You are given a string s consisting of lowercase English alphabet characters and an integer k. Your task is to find the k-th lexicographical substring of this string. The substrings are defined as any non-empty contiguous subset of characters from the original string. Input: - The first line contains the string s (1 ≤ length of s ≤ 100000). - The second line contains the integer k (1 ≤ k ≤ min(10^9, (length of s * (length of s + 1))/2)). Output: - Print the k-th lexicographical substring of s. Example: - For the input s = \\"code\\" and k = 5, the sequence of substrings is: \\"c\\", \\"co\\", \\"cod\\", \\"code\\", \\"o\\", \\"od\\", \\"ode\\", \\"d\\", \\"de\\", \\"e\\". The 5th substring in lexicographical order is \\"d\\". Note: - Ensure your solution is optimized for large strings and high k values. Consider efficient algorithms and data structures to handle the constraints effectively.","solution":"def kth_lexicographical_substring(s, k): Returns the k-th lexicographical substring of string s. Substrings are non-empty contiguous subsets of characters from s. :param s: A string consisting of lowercase English alphabet characters. :param k: An integer indicating the k-th lexicographical substring. substrings = sorted(set(s[i:j] for i in range(len(s)) for j in range(i + 1, len(s) + 1))) return substrings[k - 1]"},{"question":"You are provided with a list of n integers representing the scores of students in a test. Each student received a score between 0 and 100. Your task is to determine if it is possible to split this list into two non-empty subsets such that the sum of the scores in both subsets is equal. If it is possible, print \\"Yes\\", otherwise print \\"No\\". Input: The first line contains a single integer n (2 ≤ n ≤ 100) — the number of students. The second line contains n integers a_i (0 ≤ a_i ≤ 100) — the scores of the students. Output: Print \\"Yes\\" if it is possible to split the list into two subsets with equal sum, otherwise print \\"No\\". Example: Input: 5 1 5 11 5 9 Output: No Explanation: There is no way to split the list into two parts where the sum of the parts is equal. The possible subsets and their sums are: {1, 5, 5, 9}; {1, 11, 9}; {5, 11, 9}; {5, 11, 5}; and so forth. None of these can be split into two equal sum subsets.","solution":"def can_split_equal_sum(scores): total = sum(scores) if total % 2 != 0: return \\"No\\" half_sum = total // 2 dp = [False] * (half_sum + 1) dp[0] = True for score in scores: for i in range(half_sum, score - 1, -1): dp[i] = dp[i] or dp[i - score] return \\"Yes\\" if dp[half_sum] else \\"No\\""},{"question":"You are given a string consisting of lowercase English letters. Your goal is to break this string into several substrings such that each substring is a palindrome. A palindrome is a string that reads the same forward and backward. Your task is to determine the minimum number of substrings in such a decomposition. For example, for the string \\"aab\\", the minimum number of substrings that are palindromes is 2 (\\"aa\\" and \\"b\\"). Write a function that takes a string `s` as its only input and returns the minimum number of palindromic substrings needed. # Input - A single string `s` (1 ≤ |s| ≤ 2000), consisting of lowercase English letters. # Output - An integer representing the minimum number of palindromic substrings. # Example Input: `abcbm` Output: 3 Explanation: One possible decomposition is \\"a\\", \\"bcb\\", and \\"m\\". Input: `racecar` Output: 1 Explanation: The whole string \\"racecar\\" is a palindrome. # Constraints - The string consists only of lowercase English letters. - The length of the string is at least 1 and at most 2000.","solution":"def min_palindromic_substrings(s): n = len(s) dp = [0] * n is_palindrome = [[False] * n for _ in range(n)] for end in range(n): min_cuts = end # max cuts needed is the length of the substring from the start to end for start in range(end + 1): if s[start] == s[end] and (end - start <= 2 or is_palindrome[start + 1][end - 1]): is_palindrome[start][end] = True min_cuts = 0 if start == 0 else min(min_cuts, dp[start - 1] + 1) dp[end] = min_cuts return dp[-1] + 1 # return the minimum number of palindromic substrings # Example usage: # print(min_palindromic_substrings(\\"abcbm\\")) # 3 # print(min_palindromic_substrings(\\"racecar\\")) # 1"},{"question":"You are given a grid of size n times n filled with integers. Your task is to determine the minimum path sum from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 leq n leq 100) — the size of the grid. The next n lines contain n integers each, representing the grid. For each test case, print the minimum path sum from the top-left corner to the bottom-right corner of the grid. **Example:** Input: ``` 2 3 1 3 1 1 5 1 4 2 1 2 1 2 1 1 ``` Output: ``` 7 3 ``` Explanation: In the first test case, the minimum path sum is 1→3→1→1→1, which sums up to 7. In the second test case, the minimum path sum is 1→1→1, which sums up to 3.","solution":"def min_path_sum(grid): Returns the minimum path sum from the top-left to the bottom-right of the grid. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize first column of dp array for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize first row of dp array for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1] def process_input(input_string): Process the input given as a string and return the respective outputs. lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 results = [] for _ in range(t): n = int(lines[index]) index += 1 grid = [list(map(int, lines[index + i].split())) for i in range(n)] index += n results.append(min_path_sum(grid)) return results"},{"question":"A group of friends are planning a hiking trip together, and they need to assign tasks for their preparations. Each task requires a certain amount of time to complete, and each friend has different amounts of free time available. Given the following inputs: - An integer n (1 leq n leq 100), the number of tasks. - An integer m (1 leq m leq 100), the number of friends. - An array of n integers t_i, where t_i is the time in minutes required to complete the i-th task. - An array of m integers f_j, where f_j is the free time in minutes available for the j-th friend. Write a program to determine if it is possible to assign all tasks to the friends such that each friend completes their assigned tasks within their available free time. If possible, print \\"YES\\". Otherwise, print \\"NO\\". # Example Input: ``` 4 3 10 20 30 40 50 20 30 ``` Output: ``` YES ``` Explanation: One possible way to assign the tasks is: - Friend 1 (50 minutes) takes task 4 (40 minutes) - Friend 2 (20 minutes) takes task 2 (20 minutes) - Friend 3 (30 minutes) takes task 1 (10 minutes) and task 3 (30 minutes) All friends are within their available free time and all tasks are assigned. # Example Input: ``` 4 2 10 20 30 40 35 20 ``` Output: ``` NO ``` Explanation: It is impossible to assign the tasks such that both friends stay within their available free time. For example, friend 1 can only take task 4 (30 minutes), and friend 2 can only take task 2 (20 minutes). But tasks 1 and 3 cannot be assigned within the remaining time limits.","solution":"def can_assign_tasks(n, m, task_times, free_times): Determines if it is possible to assign all tasks to friends such that each friend completes their assigned tasks within their available free time. Parameters: - n : int : number of tasks - m : int : number of friends - task_times : list of int : time required for each task - free_times : list of int : free time available for each friend Returns: - str : \\"YES\\" if all tasks can be assigned within the available time, otherwise \\"NO\\". task_times.sort(reverse=True) free_times.sort(reverse=True) for task in task_times: assigned = False for i in range(m): if free_times[i] >= task: free_times[i] -= task assigned = True break if not assigned: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of positive integers, you need to determine the maximum sum of any contiguous subarray within the list. A subarray is defined as a section of consecutive elements within the array. For example, if the input is `[3, -2, 5, -1]`, the maximum sum will be `6`, as the subarray `[3, -2, 5]` yields the maximum sum. You need to write a function that takes a list of positive and negative integers and returns the maximum sum of any contiguous subarray within the list. # Input - A single integer `n` (1 ≤ n ≤ 10^5) — the number of integers in the list. - A list of `n` integers `(k1, k2, ..., kn)` where each integer is between -10^4 and 10^4. # Output - A single integer representing the maximum sum of any contiguous subarray. # Example Input ``` 4 3 -2 5 -1 ``` Output ``` 6 ``` Write a Python function `max_subarray_sum` to solve the problem. **Function Signature**: ```python def max_subarray_sum(n: int, array: List[int]) -> int: ```","solution":"from typing import List def max_subarray_sum(n: int, array: List[int]) -> int: Return the maximum sum of any contiguous subarray within the list. if n == 0: return 0 # Initialize the variables to store the maximum sum found and the current subarray sum max_sum = current_sum = array[0] # Iterate through the array to find the maximum subarray sum for num in array[1:]: # Update the current subarray sum current_sum = max(num, current_sum + num) # Update the maximum sum if the current subarray sum is greater max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a sequence of numbers and a set of operations to perform on them. Initially, the sequence consists of n integers, denoted as a_1, a_2, ldots, a_n. Each operation can be one of the following: 1. **Update**: Increment all numbers in the subarray from index l to r (inclusive) by a given value v. 2. **Query**: Find the maximum number within the subarray from index l to r (inclusive). You need to process a series of q operations on the sequence and return the results of the query operations. The first line contains two integers n and q — the number of elements in the sequence and the number of operations, respectively (1 leq n, q leq 10^5). The second line contains n integers a_1, a_2, ldots, a_n — the initial values of the sequence (1 leq a_i leq 10^9). The following q lines describe the operations. Each operation is given in one of the following forms: - `1 l r v` — an update operation where 1 leq l leq r leq n and 1 leq v leq 10^9. - `2 l r` — a query operation where 1 leq l leq r leq n. Print the results of the query operations, each on a new line, in the order they appear in the input. # Example **Input:** ``` 5 4 1 2 3 4 5 1 2 4 1 2 1 5 1 3 5 2 2 3 5 ``` **Output:** ``` 5 7 ``` In this example, the sequence of operations and their effects are as follows: 1. The initial sequence is [1, 2, 3, 4, 5]. 2. After the first update operation (increment elements from index 2 to 4 by 1), the sequence becomes [1, 3, 4, 5, 5]. 3. The first query operation (maximum element from index 1 to 5) returns 5. 4. After the second update operation (increment elements from index 3 to 5 by 2), the sequence becomes [1, 3, 6, 7, 7]. 5. The second query operation (maximum element from index 3 to 5) returns 7.","solution":"def process_operations(n, q, array, operations): results = [] for operation in operations: if operation[0] == 1: _, l, r, v = operation for i in range(l - 1, r): array[i] += v elif operation[0] == 2: _, l, r = operation results.append(max(array[l - 1: r])) return results"},{"question":"You are given a string containing only the characters \'A\', \'B\', and \'C\'. Your task is to reorder the string so that no two adjacent characters are the same. If it is possible to reorder the string in such a way, print the rearranged string. If it is not possible, print \\"Not possible\\". The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single string s (1 ≤ |s| ≤ 100) — the string that needs to be reordered. For each test case, print the rearranged string or \\"Not possible\\" if the reordering is not feasible. Example: Input: 3 AAB AAAB ABACC Output: ABA Not possible ACABC","solution":"from collections import Counter import heapq def rearrange_string(s): # Count frequencies of each character count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char # decrement frequency since we\'ve used one instance of this character result = \'\'.join(result) if len(result) != len(s): return \\"Not possible\\" return result def solve(t, test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"You are given an array of integers a of length n. Your task is to find and print the number of pairs of indices (i, j) such that 1 leq i < j leq n and a[i] + a[j] is even. The first line of the input contains an integer n (2 leq n leq 100) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100) — the elements of the array. Print a single integer — the number of pairs (i, j) such that a[i] + a[j] is even. For example, given n = 4 and the array a = [1, 2, 3, 4], the output should be 2, as there are two pairs (1, 3) and (2, 4) that satisfy the condition.","solution":"def count_even_sum_pairs(n, a): Returns the number of pairs (i, j) such that 1 <= i < j <= n and a[i] + a[j] is even. Parameters: n (int): The length of the array. a (list): The list of integers. Returns: int: The count of pairs with an even sum. even_count = 0 odd_count = 0 # Count the number of even and odd numbers for number in a: if number % 2 == 0: even_count += 1 else: odd_count += 1 # Pairs (even, even) or (odd, odd) sum to an even number even_pairs = (even_count * (even_count - 1)) // 2 odd_pairs = (odd_count * (odd_count - 1)) // 2 return even_pairs + odd_pairs"},{"question":"A new store is opening in a busy city and they have a unique pricing system for their products. Each product has two prices associated with it: a normal price and a discounted price. Customers can buy any number of products, and the total price they pay for a set of products is the sum of the discounted prices of those products. However, every customer is a member of a special loyalty program. For every set of products that costs more than a given threshold when purchased at the normal prices, the customer gets an additional discount. Specifically, they get the minimum price (the smallest price among the discounted prices of the products in the set) off their total discounted price. Write a program that takes as input the prices of products, the total number of products a customer buys, and the threshold price. The program should output the total amount the customer has to pay after applying the additional discount, if applicable. **Input Format:** - The first line contains two integers, n and t (1 ≤ n, t ≤ 1000) — the total number of products and the threshold price. - The next n lines contain two integers pi and di (1 ≤ pi, di ≤ 10000) — the normal price and the discounted price of the i-th product. - The last line contains n integers, each representing the quantity of the i-th product the customer buys. **Output Format:** - Output a single integer — the total price the customer has to pay after applying the additional discount, if applicable. **Example:** Input: ``` 3 50 10 5 20 10 15 8 1 2 1 ``` Output: ``` 21 ``` Explanation: The customer buys 1 unit of the first product, 2 units of the second product, and 1 unit of the third product. The normal prices sum up to 10*1 + 20*2 + 15*1 = 65, which exceeds the threshold of 50. The total discounted price is 5*1 + 10*2 + 8*1 = 33. Since the normal price sum exceeds the threshold, the additional discount is the minimum discounted price, which is 5. Therefore, the final total is 33 - 5 = 28.","solution":"def calculate_total_price(n, t, products, quantities): total_normal_price = 0 total_discounted_price = 0 min_discounted_price = float(\'inf\') for i in range(n): pi, di = products[i] qty = quantities[i] total_normal_price += pi * qty total_discounted_price += di * qty if di < min_discounted_price: min_discounted_price = di if total_normal_price > t: total_discounted_price -= min_discounted_price return total_discounted_price def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) t = int(data[1]) products = [] index = 2 for _ in range(n): pi = int(data[index]) di = int(data[index + 1]) products.append((pi, di)) index += 2 quantities = [] for i in range(n): quantities.append(int(data[index + i])) result = calculate_total_price(n, t, products, quantities) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Jzzhu has an array of n non-negative integers b1, b2, ..., bn. He considers an index pair (i, j) (1 ≤ i < j ≤ n) interesting if bi | bj is greater than bi & bj. Here, \'|\' denotes the bitwise OR operation and \'&\' denotes the bitwise AND operation. Jzzhu wants to know how many interesting index pairs exist. Help him by writing a program that outputs the number of interesting pairs modulo 1000000007 (10^9 + 7). The first line contains a single integer n (1 ≤ n ≤ 10^6). The second line contains n integers b1, b2, ..., bn (0 ≤ bi ≤ 10^6). Output a single integer representing the number of interesting pairs modulo 1000000007 (10^9 + 7).","solution":"def count_interesting_pairs(n, b): MOD = 1000000007 interesting_count = 0 for i in range(n): for j in range(i+1, n): if (b[i] | b[j]) > (b[i] & b[j]): interesting_count = (interesting_count + 1) % MOD return interesting_count"},{"question":"Write a function that takes a string as input and returns an integer. The input string will only contain binary digits (\'0\' or \'1\'). The function should calculate the number of substrings that have equal numbers of consecutive \'0\'s and \'1\'s. For example, for the input \\"00110011\\", the function should output 6, because the substrings \\"0011\\", \\"01\\", \\"1100\\", \\"10\\", \\"0011\\", and \\"01\\" all have equal numbers of consecutive \'0\'s and \'1\'s.","solution":"def countBinarySubstrings(s): Returns the number of substrings that have equal numbers of consecutive \'0\'s and \'1\'s. groups = [] count = 1 for i in range(1, len(s)): if s[i] != s[i-1]: groups.append(count) count = 1 else: count += 1 groups.append(count) result = 0 for i in range(1, len(groups)): result += min(groups[i], groups[i-1]) return result"},{"question":"Alan is fascinated by recurring sequences and patterns in numbers. He recently discovered a curious type of sequence where each term is derived from the bitwise AND operation of its previous terms within a certain range. He needs your help to understand these sequences better. You are given m queries in the form \\"li ri\\". For each query, you must determine the bitwise AND of all integers from li to ri, inclusive. The first line contains an integer m (1 ≤ m ≤ 10^5). Each of the next m lines contains two space-separated integers li and ri (1 ≤ li ≤ ri ≤ 10^9). Your task is to compute the bitwise AND for the range specified in each query and print the result. Input: ``` 3 5 7 10 15 2 8 ``` Output: ``` 4 8 0 ```","solution":"def range_bitwise_and(li, ri): This function returns the bitwise AND of all integers in the range [li, ri]. shift = 0 while li < ri: li >>= 1 ri >>= 1 shift += 1 return li << shift def solve(queries): results = [] for li, ri in queries: results.append(range_bitwise_and(li, ri)) return results"},{"question":"Alice and Bob are fans of binary strings and they often play games on such strings. This time, they decided to play a game on a binary string s = s_1 s_2 dots s_n of length n. The string consists of only \'0\' and \'1\' characters. Alice and Bob take turns altering substrings of the string, starting with Alice. In each move, a player must select any substring of length k (1 leq k leq n) such that all characters within this substring are the same, and change all the characters within this substring to the opposite character (\'0\' becomes \'1\' and \'1\' becomes \'0\'). The game ends when no such substring can be found. The objective of both players is different: Alice aims to maximize the number of \'0\'s in the final string, while Bob aims to maximize the number of \'1\'s in the final string. Both players play optimally, and therefore, always make the best possible move for their objective. Homer is curious about what the final string will look like after both players have played optimally. Therefore, you need to determine the final state of the binary string for each given test case. Each test case consists of a single integer t (1 le t le 1000) — the number of test cases. The description of the test cases follows. Each test case contains a single binary string s (1 leq |s| leq 50) made up of \'0\'s and \'1\'s. For each test case, print the final binary string in a single line. # Example **Input:** 3 1 111 10101 **Output:** 0 010 01010","solution":"def final_state_after_game(t, test_cases): results = [] for s in test_cases: # As Alice starts, she will always flip all characters to \'0\' results.append(\\"0\\" * len(s)) return results"},{"question":"Two friends, Alice and Bob, frequently play a game where they form a binary tree. For convenience, the tree is described using a list where each element represents a node\'s value. The root is the first element, and all subsequent elements correspond to nodes level by level. If the node at the current index `i` has children, its left child will be at index `2*i + 1` and its right child at index `2*i + 2`. Alice and Bob take turns to play, with Alice always going first. During Alice\'s turn, she selects any **leaf** node of the tree and removes it. During Bob\'s turn, he removes any node that is not the root (i.e., a node that has at least one parent but not necessarily leaf). The game continues until a player cannot make a move. The player who cannot make a move loses. Given the structure of the binary tree, determine which player will win if both play optimally. Write a function `determine_winner(tree: List[int]) -> str` that accepts a list of integers representing the nodes of the binary tree, and returns a string `\\"Alice\\"` if Alice wins, or `\\"Bob\\"` if Bob wins. # Input - A single list `tree` with length `n` (1 le n le 10^5), where each element is an integer value representing the node\'s value. The first element of the list represents the root, and each subsequent element represents the nodes level by level. # Output - A string `\\"Alice\\"` if Alice wins, or `\\"Bob\\"` if Bob wins. # Example Input `[3, 2, 5, 1, 4]` # Example Output `\\"Alice\\"` # Explanation 1. Alice removes any leaf node (1 or 4 in this case). 2. Bob removes any non-root node (remaining 1, 4, 2, or 5). The game continues until one player cannot make a move. If both play optimally, Alice will be the one who forces Bob into a position where he cannot make a move. Hence, Alice wins.","solution":"def determine_winner(tree): Determines the winner of the game if both players play optimally. Parameters: tree (List[int]): The list representation of the binary tree. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins. n = len(tree) # Root alone, Alice can\'t make a move. if n == 1: return \\"Bob\\" # If the tree has more than one node, Alice will always win. return \\"Alice\\""},{"question":"You are tasked with managing a forest preservation project. The goal is to determine the minimum number of roads required to connect a list of distinct locations (nodes) within the forest such that every location can be reached from any other location. Each road connects exactly two locations directly, but indirect connections through other roads are also allowed. The forest consists of n locations and m existing roads. You need to determine if the current road network is already sufficient or if additional roads are necessary, and if so, how many. You are given the data about the locations and the roads: - The first line contains two integers, n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000), representing the number of locations and the number of existing roads, respectively. - The next m lines each contain two integers, u and v (1 ≤ u, v ≤ n, u ≠ v), representing a road between location u and location v. Your task is to output an integer representing the minimum number of additional roads required to ensure all locations are connected. Example: Input: ``` 5 3 1 2 2 3 4 5 ``` Output: ``` 1 ``` Explanation: - In the given example, there are 5 locations and 3 roads. Locations 1, 2, and 3 are connected to each other, and locations 4 and 5 are connected to each other. - To ensure all locations are connected, we need at least one additional road to connect the two separate groups. Thus, the output is 1.","solution":"def min_additional_roads(n, roads): Returns the minimum number of additional roads required to ensure all locations are connected. Parameters: n (int): The number of locations (nodes). roads (list of tuple of int): List of tuples where each tuple represents an existing road between two locations. Returns: int: The minimum number of additional roads required to connect all locations. from collections import defaultdict, deque def bfs(start, visited, adjacency_list): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) adjacency_list = defaultdict(list) for u, v in roads: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = set() components = 0 for location in range(1, n + 1): if location not in visited: components += 1 bfs(location, visited, adjacency_list) return components - 1"},{"question":"You are given an array of integers. Your task is to partition the array into two non-empty subsets such that the absolute difference between the sums of the subsets is minimized. The sum of a subset is defined as the sum of its elements. The absolute difference between the sums is the absolute value of the difference between the two sums. Write a function `minimizeDifference(nums: List[int]) -> int` that takes an array `nums` of integers and returns the minimum possible absolute difference between the sums of the two subsets. **Input:** - A single line containing a space-separated list of integers representing the array `nums`. **Output:** - A single integer, the minimum possible absolute difference between the sums of the two subsets. **Constraints:** - The length of the array will be between 2 and 1000. - Each element in the array will be an integer between -10^4 and 10^4. **Example 1:** ``` Input: [1, 2, 3, 9] Output: 3 Explanation: We can partition the array as [1, 2, 3] and [9]. The sums of these subsets are 6 and 9, respectively, and the absolute difference between their sums is 3. ``` **Example 2:** ``` Input: [1, 2, 7, 1, 5] Output: 0 Explanation: We can partition the array as [1, 2, 1, 5] and [7]. The sums of these subsets are 9 and 7, respectively, and the absolute difference between their sums is 0. ``` **Example 3:** ``` Input: [1, 60, 1, 1, 1, 1] Output: 55 Explanation: We can partition the array as [1, 1, 1, 1, 1] and [60]. The sums of these subsets are 5 and 60, respectively, and the absolute difference between their sums is 55. ```","solution":"from typing import List def minimizeDifference(nums: List[int]) -> int: Returns the minimum possible absolute difference between the sums of two non-empty subsets of nums. total_sum = sum(nums) n = len(nums) # Initialize a set to store all possible sums of subsets up to half of the total_sum possible_sums = {0} for num in nums: new_sums = set() for sum_in_set in possible_sums: new_sums.add(sum_in_set + num) possible_sums.update(new_sums) closest = float(\'inf\') # Find the closest possible sum to half of the total_sum target = total_sum / 2 for s in possible_sums: closest = min(closest, abs(total_sum - 2 * s)) return closest"},{"question":"A company uses a custom logging system to record events happening in their system. Each event log contains a timestamp and an event ID. The system needs to check for repeated events within a certain time window to identify potential issues. Each log entry is represented as a tuple (timestamp, eventID), where timestamp is an integer representing the time when the event occurred (in seconds since the Unix epoch) and eventID is a string representing the unique identifier of the event. Your task is to write a function that processes a list of log entries and returns a list of event IDs that have occurred more than once within a given time window. Function signature: ```python def find_repeated_events(logs: List[Tuple[int, str]], window: int) -> List[str]: ``` # Parameters - `logs`: List of tuples where each tuple represents a log entry `(timestamp, eventID)`. The list contains between 1 and 10^5 log entries. - `window`: An integer representing the time window (in seconds) within which repeated events need to be identified. # Return - A list of unique event IDs that have appeared more than once within the specified time window. # Example ```python logs = [ (1609459200, \\"A\\"), (1609459210, \\"B\\"), (1609459220, \\"A\\"), (1609459230, \\"A\\"), (1609459300, \\"B\\") ] window = 40 find_repeated_events(logs, window) ``` # Expected Output ```python [\\"A\\"] ``` # Explanation - Event \\"A\\" appears at timestamps 1609459200, 1609459220, and 1609459230. Since there are multiple occurrences of \\"A\\" within 40 seconds, \\"A\\" is included in the output. - Event \\"B\\" appears twice but the gap between its occurrences (250 seconds) exceeds the 40 seconds window, so it is not included in the output.","solution":"from typing import List, Tuple from collections import defaultdict def find_repeated_events(logs: List[Tuple[int, str]], window: int) -> List[str]: This function takes a list of log entries (timestamp, eventID) and a time window, and returns a list of event IDs that have occurred more than once within the given time window. event_timestamps = defaultdict(list) repeated_events = set() for timestamp, eventID in logs: event_timestamps[eventID].append(timestamp) for eventID, timestamps in event_timestamps.items(): timestamps.sort() for i in range(1, len(timestamps)): if timestamps[i] - timestamps[i-1] <= window: repeated_events.add(eventID) break return list(repeated_events)"},{"question":"You are given a list of n projects, each characterized by three parameters: start time, end time, and profit. The projects cannot overlap, meaning that any two selected projects must not be active simultaneously. You need to determine the maximum profit you can achieve by selecting a subset of non-overlapping projects. The first line contains an integer n (1 ≤ n ≤ 105) – the number of projects. Each of the next n lines describes a project with three integers: start (1 ≤ start ≤ 109), end (start < end ≤ 109), and profit (1 ≤ profit ≤ 104). Output a single integer – the maximum profit possible by selecting non-overlapping projects. **Example:** Input: ``` 4 1 3 50 3 5 20 4 6 70 6 8 60 ``` Output: ``` 120 ``` Explanation: - Select project 1 (1, 3, 50) and project 3 (4, 6, 70) for a total profit of 120. - Another optimal solution is selecting project 3 (4, 6, 70) and project 4 (6, 8, 60) for the same total profit of 120.","solution":"from bisect import bisect_left def max_profit(n, projects): projects.sort(key=lambda x: x[1]) # Sort projects by end time # Initialize dp array where dp[i] will store the max profit by taking projects up to i-th dp = [(0, 0)] # (end_time, profit) for start, end, profit in projects: # Find the index of the last non-overlapping project idx = bisect_left(dp, (start,)) - 1 current_profit = dp[idx][1] + profit # profit including the current project # If current_profit is greater than the last profit in dp, append it if current_profit > dp[-1][1]: dp.append((end, current_profit)) return dp[-1][1] # Function to be used for parsing input and calling the solution function. def max_profit_from_input(input_str): lines = input_str.strip().split(\\"n\\") n = int(lines[0]) projects = [] for line in lines[1:]: start, end, profit = map(int, line.split()) projects.append((start, end, profit)) return max_profit(n, projects)"},{"question":"You are a software developer at a startup and have been assigned to work on a new service called \\"Sequence Enricher\\". This service needs to process a sequence of numbers and apply specific transformations based on given rules, ensuring the sequence remains within prescribed limits. The rules are as follows: 1. The service receives a sequence of integers and two integers, L and R. 2. For every element in the sequence that is less than L, you should add `K` to it (increasing its value). 3. For every element in the sequence that is greater than R, you should subtract `K` from it (decreasing its value). 4. Elements that fall between L and R (inclusive) stay the same. Write a program that processes the sequence according to these rules and outputs the modified sequence. # Input - The first line contains three integers L, R, and K (1 ≤ L ≤ R ≤ 10^9, 1 ≤ K ≤ 10^9). - The second line contains an integer n (1 ≤ n ≤ 10^5), the length of the sequence. - The third line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), representing the sequence. # Output - Print a single line containing the transformed sequence of integers. # Example Input ``` 5 10 3 6 1 5 10 20 30 40 ``` Output ``` 4 5 10 17 27 37 ``` In this example, the numbers 1 and 5 are less than 5, so 3 is added to each of them. The number 10 falls between 5 and 10, so it remains the same. Numbers 20, 30, and 40 are greater than 10, so 3 is subtracted from each.","solution":"def sequence_enricher(L, R, K, sequence): Enrich the sequence based on the rules provided. Parameters: L (int): Lower bound R (int): Upper bound K (int): Increment/Decrement Value sequence (list of int): The sequence of integers to process Returns: list of int: The transformed sequence enriched_sequence = [] for num in sequence: if num < L: enriched_sequence.append(num + K) elif num > R: enriched_sequence.append(num - K) else: enriched_sequence.append(num) return enriched_sequence # Example usage: # L, R, K = 5, 10, 3 # sequence = [1, 5, 10, 20, 30, 40] # print(sequence_enricher(L, R, K, sequence)) # Output: [4, 5, 10, 17, 27, 37]"},{"question":"Sock Merchant Alex has a large pile of socks that he wants to sell. He has sorted the socks into pairs by color for sale, but he needs your help to find out how many pairs of socks, of each color, he has. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are. Function Signature: ```python def sock_merchant(n: int, ar: List[int]) -> int: ``` **Input**: - `n`: The number of socks in the pile (1 ≤ n ≤ 100,000). - `ar`: An array of integers representing the color of each sock (1 ≤ ar[i] ≤ 100). **Output**: - Return an integer representing the number of pairs of socks. **Example**: ```python # Example 1: n = 9 ar = [10, 20, 20, 10, 10, 30, 50, 10, 20] # The function should return: 3 (Explanation: Three pairs: 10-10, 20-20, 10-10) # Example 2: n = 5 ar = [1, 2, 1, 2, 1] # The function should return: 2 (Explanation: Two pairs: 1-1 and 2-2) ``` **Note**: - Each sock can only be part of one pair. - You must optimize your solution to run in O(n) time.","solution":"from typing import List def sock_merchant(n: int, ar: List[int]) -> int: sock_count = {} pairs = 0 # Count occurrences of each sock color for sock in ar: if sock in sock_count: sock_count[sock] += 1 else: sock_count[sock] = 1 # Calculate number of pairs for count in sock_count.values(): pairs += count // 2 return pairs"},{"question":"A delivery company has several warehouses each storing a collection of packages. Each warehouse is responsible for delivering its packages to specific destinations within a city. The destinations are labeled from 1 to n, and each warehouse has a predefined range of destinations it can deliver to. Given the following inputs: - The number of warehouses m. - A list of m tuples, where each tuple defines a warehouse and contains: - A list of integers representing the IDs of packages stored in this warehouse. - Two integers, l and r, specifying that this warehouse can deliver to destinations l through r (inclusive). You are required to determine the maximum number of unique destinations that can receive at least one package from any warehouse. Write a function `max_unique_destinations` that takes in the number of warehouses and the list of tuples containing warehouse data, and returns the maximum number of unique destinations that can be covered. Your function should have the following signature: ```python def max_unique_destinations(warehouses: List[Tuple[List[int], int, int]]) -> int: ``` # Input - The first line contains an integer m (1 ≤ m ≤ 10^5) — the number of warehouses. - The next m lines each describe a warehouse: - The first value is an integer k (1 ≤ k ≤ 100), representing the number of packages in the warehouse. - It is followed by k integers representing the IDs of the packages. - The last two integers l and r (1 ≤ l ≤ r ≤ n; n ≤ 10^5) describe the range of destinations. # Output - Print a single integer — the maximum number of unique destinations that can receive at least one package from any warehouse. # Example Input: ``` 3 2 101 102 1 3 3 103 104 105 2 5 1 106 4 4 ``` Output: ``` 5 ``` In this example, the first warehouse can deliver to destinations 1, 2, and 3. The second warehouse can deliver to destinations 2, 3, 4, and 5. The third warehouse can deliver to destination 4. The union of these ranges covers all destinations 1 through 5, hence the maximum number of unique destinations is 5.","solution":"from typing import List, Tuple def max_unique_destinations(warehouses: List[Tuple[List[int], int, int]]) -> int: destinations = set() for packages, l, r in warehouses: destinations.update(range(l, r+1)) return len(destinations)"},{"question":"A software development company is designing a new digital signature system to authenticate messages. The system would accept a string of lowercase English characters and return a string that represents the digital signature. The digital signature is created by generating a new string where each character in the original string is replaced by its position in the alphabet and summing those positions, then converting the sum back into a string representation. For example: - The position of \'a\' is 1, \'b\' is 2, \'c\' is 3, ..., \'z\' is 26. Consider the input string \\"abc\\": - \'a\' -> 1 - \'b\' -> 2 - \'c\' -> 3 The sum of these positions is 1 + 2 + 3 = 6, and the digital signature is \\"6\\". If the input string were \\"az\\": - \'a\' -> 1 - \'z\' -> 26 - The sum of these positions is 1 + 26 = 27, and thus the digital signature is \\"27\\". Write a program that takes a single string as input and outputs the digital signature as described. Input The input consists of a single line containing a string of lowercase English letters. The length of the string is at least 1 and at most 100. Output Print a single line with the digital signature of the input string. Example Input: abc Output: 6 Input: az Output: 27","solution":"def digital_signature(s): Returns the digital signature of a given string. The digital signature is the sum of the positions of the characters in the alphabet. Params: s (str): A string made up of lowercase English letters Returns: str: The digital signature as a string total = 0 for char in s: total += ord(char) - ord(\'a\') + 1 return str(total)"},{"question":"Given a matrix of dimensions m x n filled with non-negative integers, your task is to find the maximum path sum in the matrix starting from any cell in the first row to any cell in the last row. You can move in only three directions from a given cell: directly below, below-left (diagonally left and down), and below-right (diagonally right and down). # Input - The first line contains two integers m and n (1 ≤ m, n ≤ 100), representing the number of rows and the number of columns respectively. - Each of the next m lines contains n integers, representing the values in the matrix. Each value is between 0 and 100. # Output Print a single integer, the maximum path sum. # Example Input ``` 3 3 6 7 8 5 3 1 4 6 1 ``` Output ``` 18 ``` Explanation The maximum path sum can be obtained as follows: - Start from cell (0, 2) with value 8 - Move to cell (1, 1) with value 3 - Move to cell (2, 1) with value 6 The path sum is 8 + 3 + 6 = 17, which is the maximum obtainable path sum for this example.","solution":"def max_path_sum(matrix, m, n): Given a matrix of dimensions m x n filled with non-negative integers, find the maximum path sum starting from any cell in the first row to any cell in the last row. The allowed moves are down, down-left, and down-right. :param matrix: list of list of non-negative integers :param m: int, number of rows :param n: int, number of columns :return: int, maximum path sum # Initialize a DP table with the same dimensions as the matrix dp = [[0] * n for _ in range(m)] # Initialize the first row of the DP table with the values of the first row of the matrix for j in range(n): dp[0][j] = matrix[0][j] # Fill the DP table from the second row to the last row for i in range(1, m): for j in range(n): if j > 0 and j < n - 1: dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1]) elif j > 0: dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i-1][j-1]) elif j < n - 1: dp[i][j] = matrix[i][j] + max(dp[i-1][j], dp[i-1][j+1]) else: dp[i][j] = matrix[i][j] + dp[i-1][j] # The result will be the maximum value in the last row of DP table return max(dp[m-1])"},{"question":"Given a list of temperature readings for a week, where each temperature is an integer value between -100 and 100 (inclusive). The list contains exactly 7 integers. Your task is to determine the range of temperatures for the week, which is the difference between the highest and lowest temperatures. Write a function `temperature_range` that takes a list of 7 integers as input and returns a single integer representing the temperature range. # Input - The input is a list of 7 integers `temperatures` where `-100 <= temperatures[i] <= 100`. # Output - Output a single integer which is the difference between the highest and lowest temperature in the list. # Example ```python # Input temperatures = [23, -5, 10, -10, 30, 5, 7] # Output 40 ``` # Explanation In the given example, the highest temperature is 30 and the lowest is -10. Therefore, the temperature range is 30 - (-10) = 40. # Constraints - The list will always contain exactly 7 integers. - Each integer will be in the range of -100 to 100 (inclusive).","solution":"def temperature_range(temperatures): Returns the range of temperatures for the week. :param temperatures: List of 7 integers representing temperatures. :return: Integer representing the difference between the highest and lowest temperatures. return max(temperatures) - min(temperatures)"},{"question":"You are given an array of integers. Your task is to write a function that finds the subarray with the largest sum and returns that sum. # Function Signature ```python def max_subarray_sum(nums: List[int]) -> int: pass ``` # Input - A single list of integers `nums` where `1 <= len(nums) <= 10^6` and `-10^4 <= nums[i] <= 10^4`. # Output - Return an integer representing the maximum sum of a contiguous subarray. # Example ```python print(max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4])) # Output: 6 print(max_subarray_sum([1])) # Output: 1 print(max_subarray_sum([5, 4, -1, 7, 8])) # Output: 23 ``` # Explanation - In the first example, the maximum sum subarray is `[4, -1, 2, 1]` with a sum of `6`. - In the second example, the only element is the maximum sum subarray itself. - In the third example, the maximum sum subarray is `[5, 4, -1, 7, 8]` with a sum of `23`. # Constraints - The problem must be solved in O(n) time complexity. - You can use Kadane\'s Algorithm or any other efficient approach to solve this problem.","solution":"from typing import List def max_subarray_sum(nums: List[int]) -> int: This function takes a list of integers and returns the maximum sum of a contiguous subarray. Kadane\'s Algorithm is used here to achieve O(n) time complexity. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of integers `nums` and an integer `k`. You need to determine if it is possible to split the array into `k` non-empty subsets such that all subsets have the same sum. The first line of input contains two integers `n` (1 ≤ n ≤ 16) and `k` (1 ≤ k ≤ n) - the size of the array and the number of subsets to split into. The second line of input contains `n` integers, representing the elements of the array `nums`. The elements of the array are between 1 and 10^4. Print \\"YES\\" if it is possible to split the array into `k` subsets with equal sum, otherwise print \\"NO\\". # Example Input: ``` 5 3 2 1 4 5 6 ``` Output: ``` YES ``` Explanation: One possible way to split the array is into subsets {2, 4}, {1, 5} and {6}, each having a sum of 6. Input: ``` 4 2 1 2 3 5 ``` Output: ``` NO ``` Explanation: There is no way to split the array into 2 subsets with the same sum. # Note - Consider edge cases where it might not be possible to split the array due to the total sum being non-divisible by `k` or other logical constraints. - Think about different strategies like backtracking or dynamic programming to efficiently solve the problem given the constraints.","solution":"def canPartitionKSubsets(nums, k): totalSum = sum(nums) if totalSum % k != 0: return \\"NO\\" target = totalSum // k used = [False] * len(nums) def backtrack(k, start, currentSum): if k == 1: return True if currentSum == target: return backtrack(k - 1, 0, 0) for i in range(start, len(nums)): if not used[i] and currentSum + nums[i] <= target: used[i] = True if backtrack(k, i + 1, currentSum + nums[i]): return True used[i] = False return False nums.sort(reverse=True) if nums[0] > target: return \\"NO\\" return \\"YES\\" if backtrack(k, 0, 0) else \\"NO\\""},{"question":"A thief is planning to rob a store and is figuring out what items to take. Each item has a weight and a value. The thief can carry a maximum weight of W. Given a list of the items with their weights and values, determine the maximum value the thief can carry. The first line of the input contains two integers n (1 ≤ n ≤ 1000) — the number of items and W (1 ≤ W ≤ 10000) — the maximum weight the thief can carry. The next n lines each contain two integers wi (1 ≤ wi ≤ 10000) and vi (0 ≤ vi ≤ 10000) — the weight and value of the i-th item. Output a single integer — the maximum value the thief can carry considering the weight limit. Example: Input: 4 7 3 4 4 5 2 3 5 6 Output: 9 Explanation: The thief can carry items with weights 3 and 4 for a total value of 9, which is the maximum value that can be carried within the weight limit of 7.","solution":"def knapsack(n, W, items): Determines the maximum value the thief can carry with a weight limit W. Args: n : int: Number of items W : int: Maximum weight the thief can carry items : List[Tuple[int, int]]: A list of tuples where each tuple contains two integers (weight, value) Returns: int: The maximum value the thief can carry dp = [[0] * (W + 1) for _ in range(n + 1)] for i in range(1, n + 1): wi, vi = items[i - 1] for w in range(W + 1): if wi <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - wi] + vi) else: dp[i][w] = dp[i - 1][w] return dp[n][W]"},{"question":"You are given a string of digits. You can apply the following operation any number of times (including zero): choose any two adjacent digits in the string and replace them with their sum (mod 10). Your task is to find the maximum possible value of any digit after performing any number of the described operations. The first line contains an integer t (1 leq t leq 100) - the number of test cases. Each of the next t lines contains a string of digits (each digit between 0 and 9). The length of each string is between 1 and 100. For each test case, print a single integer - the maximum possible value of any digit after performing any number of operations. # Example Input ``` 3 123 2759 999999 ``` Output ``` 6 8 9 ``` Explanation In the first test case, you can replace `1` and `2` with `3` (mod 10) resulting in `33`. Then, replace two `3`s with `6` (mod 10). Therefore, the maximum digit is `6`. In the second test case, you can replace `2` and `7` with `9` (mod 10), resulting in `959`. Then, replace `9` and `5` with `4` (mod 10) and now `49`. Finally replace `4` and `9` with `3` (mod 10) and maximize `9` with no need for further replacement. In the third test case, any replacement will result in a `9` as `9+9 = 18 (mod 10) = 8` and thus the maximum digit is `9`. So there\'s no need for further operations as all are already maximized.","solution":"def max_digit_after_operations(t, test_cases): Determines the maximum possible value of any digit after performing any number of allowed operations on the given string of digits. Arguments: t : int : the number of test cases test_cases : list : list of strings, each containing a string of digits Returns: list : the maximum possible digit for each test case results = [] for case in test_cases: max_digit = max(map(int, case)) results.append(max_digit) return results"},{"question":"**Question: Constructing the Maximum Balanced Subarray** You are given an array of integers a, consisting of n elements. Your task is to find the length of the longest subarray that has an equal number of occurrences of two integers x and y. # Input Format: - The first line contains an integer n (1 le n le 10^5) — the number of elements in the array. - The second line contains n space-separated integers representing the array a (1 le a_i le 10^9). - The third line contains two integers x and y (1 le x, y le 10^9) — the two integers you\'re considering for balance. # Output Format: Print a single integer — the length of the longest subarray with an equal number of occurrences of x and y. # Example: Input: ``` 10 7 3 2 4 3 3 5 6 3 2 3 2 ``` Output: ``` 4 ``` Explanation: One of the longest subarrays with equal occurrences of 3 and 2 is [3, 2, 4, 3]. Thus, the answer is 4. # Constraints: - The array (a) contains integers that can be very large. - The length (n) of the array can be up to (10^5). - Both (x) and (y) are guaranteed to be present in the array at least once. # Note: Pay close attention to the constraints on time complexity, as (O(n)) or (O(n log n)) solutions will be preferred over (O(n^2)) solutions.","solution":"def longest_balanced_subarray(n, arr, x, y): Returns the length of the longest subarray with equal occurrences of x and y. balance_index = {0: -1} # To store the first occurrence of each balance. longest_length = 0 balance = 0 for i in range(n): if arr[i] == x: balance += 1 elif arr[i] == y: balance -= 1 if balance in balance_index: longest_length = max(longest_length, i - balance_index[balance]) else: balance_index[balance] = i return longest_length"},{"question":"A family of frogs lives at different positions along a pond. Each frog has its own unique initial position but they have the ability to communicate if they are within a certain distance from each other. Frogs can directly communicate with any other frog within a given maximum distance. Moreover, communication between frogs can be transitive, meaning if frog A can communicate with frog B, and frog B can communicate with frog C, then frog A can communicate with frog C, even if A and C cannot directly communicate. Given the positions of the frogs and the maximum distance at which they can communicate, determine the number of distinct groups of frogs where each group contains frogs that can communicate directly or indirectly with each other. There are several (at least one) test cases in the input. The first line contains a single integer t — the number of test cases. Each test case is described in two lines. The first line of each test case contains two integers n (1 ≤ n ≤ 10^5) — the number of frogs, and d (1 ≤ d ≤ 10^9) — the maximum distance within which two frogs can communicate. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the positions of the frogs along the pond. Output one line per test case with the number of distinct groups of frogs that can communicate with each other. # Example Input 3 5 10 0 3 10 15 20 4 5 1 6 11 17 4 2 1 2 5 6 Output 1 2 2 Explanation - In the first test case, all frogs can communicate with each other directly or indirectly within the maximum distance of 10, forming a single group. - In the second test case, frogs at positions 1 and 6 can communicate, and frogs at positions 11 and 17 can communicate, forming two separate groups. - In the third test case, frogs at positions 1 and 2 can communicate, and frogs at positions 5 and 6 can communicate, forming two separate groups.","solution":"def count_frog_groups(t, test_cases): def find_groups(n, d, positions): positions.sort() count = 1 group_end = positions[0] for i in range(1, n): if positions[i] - group_end > d: count += 1 group_end = positions[i] else: group_end = max(group_end, positions[i]) return count results = [] for i in range(t): n, d = test_cases[i][0] positions = test_cases[i][1] results.append(find_groups(n, d, positions)) return results"},{"question":"Write a function to determine if it is possible to rearrange the characters of a given string `s` such that no two adjacent characters are the same. If possible, return any valid rearrangement of the string. Otherwise, return \\"IMPOSSIBLE\\". The first line contains a single string `s` (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. # Example ```plaintext Input: aabb Output: abab Input: aaab Output: IMPOSSIBLE ```","solution":"from collections import Counter import heapq def rearrange_string(s): Reorganizes the given string `s` such that no two adjacent characters are the same. If it is not possible, returns \\"IMPOSSIBLE\\". # Count frequency of each character count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char result = \'\'.join(result) return result if len(result) == len(s) else \\"IMPOSSIBLE\\""},{"question":"You are given a list of integers where each element appears exactly three times except for one element which appears exactly once. Write a function to find and return the element that appears exactly once. Your function should run in O(n) time and use O(1) extra space. Function Signature: ```python def find_unique_element(nums: List[int]) -> int: ``` **Input:** - A list of integers `nums` with length n (1 ≤ n ≤ 3 * 10^5), where n is of the form 3k + 1 (for some integer k). - Each integer in the list is in the range [-10^9, 10^9]. **Output:** - Return the integer that appears exactly once in the list. **Example:** ```python find_unique_element([2, 2, 3, 2]) # Output: 3 find_unique_element([0, 1, 0, 1, 0, 1, 99]) # Output: 99 ``` **Explanation:** - In the first example, the element 3 is the only one that appears once while all other elements appear exactly three times. - In the second example, the element 99 is the only one that appears once while all other elements appear exactly three times.","solution":"from typing import List def find_unique_element(nums: List[int]) -> int: Function to find the unique element in a list where each element except one appears exactly three times. one = 0 # bits that appear exactly once two = 0 # bits that appear exactly twice for num in nums: # Compute \'two\' bits that are to be set by this number two |= one & num # Compute \'one\' bits that are to be set/cleared by this number one ^= num # Bits that appear three times three = one & two # Clear the bits that appear three times from one and two one &= ~three two &= ~three return one"},{"question":"You are managing a bookstore and need to keep track of book sales and inventory. Each book has a fixed price, and the inventory can be managed using a set of queries. Your goal is to handle queries about updating book stock, making sales, and reporting revenues for certain book ranges. You have n different types of books in the bookstore, and each type of book i costs p_i dollars. Initially, the inventory of each book is zero. You need to process m queries of three types: 1. `ADD k t c`: Add c copies of book type t to the inventory. 2. `SELL k t c`: Sell c copies of book type t. (It\'s guaranteed there will be enough stock to fulfill any sales request). 3. `REVENUE k l r`: Calculate the total revenue from selling books of types from l to r (inclusive). Write a program to process all these queries. The first line contains two integers n and m (1 le n, m le 1000) — the number of book types and the number of queries. The second line contains n integers p_1, p_2, dots, p_n (1 le p_i le 1000) — the price of each book type. The next m lines contain queries, one per line. For each query of the third type `REVENUE`, print the total revenue from selling books of the specified types. The revenue can be large, so print it modulo 998,244,353.","solution":"MOD = 998244353 def process_queries(n, m, prices, queries): inventory = [0] * n revenue = [0] * n results = [] for query in queries: parts = query.split() q_type = parts[0] if q_type == \\"ADD\\": k, t, c = map(int, parts[1:]) inventory[t-1] += c elif q_type == \\"SELL\\": k, t, c = map(int, parts[1:]) revenue[t-1] += prices[t-1] * c inventory[t-1] -= c elif q_type == \\"REVENUE\\": k, l, r = map(int, parts[1:]) total_revenue = sum(revenue[l-1:r]) % MOD results.append(total_revenue) return results"},{"question":"You are given a rectangular matrix of dimensions n times m. Each cell in the matrix contains a non-negative integer. Your task is to find the maximum sum of a subrectangle. A subrectangle is defined as any contiguous submatrix within the given matrix. The first line of the input contains two integers n and m (1 le n, m le 100) - the dimensions of the matrix. Each of the next n lines contains m integers separated by spaces, representing the given matrix, where each integer in the matrix is between 0 and 100. Print a single integer, the maximum sum of any subrectangle in the matrix. An example for clarification: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 45 ``` In this example, the maximum subrectangle sum is obtained by the entire matrix: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45.","solution":"def max_subrectangle_sum(matrix): Returns the maximum sum of any subrectangle in the given matrix. n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] # Find the maximum sum of the temp array using Kadane\'s algorithm current_max = temp[0] max_ending_here = temp[0] for i in range(1, n): max_ending_here = max(temp[i], max_ending_here + temp[i]) current_max = max(current_max, max_ending_here) max_sum = max(max_sum, current_max) return max_sum def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:]] return matrix def maximum_sum_of_subrectangle(input_str): matrix = parse_input(input_str) return max_subrectangle_sum(matrix)"},{"question":"A company is structuring data in a very peculiar manner. They need to create an \\"encoded\\" string from a given string by pairing certain characters together based on a set of rules. Specifically, for any given string input, you need to perform the following steps: 1. Identify all pairs of adjacent characters in the input string that are the same (e.g., \\"aa\\"). 2. Remove every pair from the original string. 3. After removing a pair, if the removal creates a new pair, continue this process until no more pairs can be removed. Your task is to write a function that resets the input string by removing all possible pairs of characters as specified, and returning the remaining string. If the string becomes empty after all possible removals, return \\"EMPTY\\". Input will be a non-empty string containing only lowercase English letters (a-z) with a maximum length of 10^5 characters. For example, given the string \\"abccba\\", the encoded string would be as follows: - \\"abccba\\" -> \\"abba\\" (remove the pair \\"cc\\") - \\"abba\\" -> \\"aa\\" (remove the pair \\"bb\\") - \\"aa\\" -> \\"\\" (remove the pair \\"aa\\") Thus, the output should be \\"EMPTY\\". Input: - A single line containing the string S. Output: - A single line containing the \\"encoded\\" string or \\"EMPTY\\" if no characters remain. Examples: Input: abccba Output: EMPTY Input: aabbaa Output: EMPTY Input: ababab Output: ababab Note: Implement a function to efficiently solve this problem considering the potential length of the input string.","solution":"def encoded_string(s): Remove all pairs of adjacent characters in the string until no more pairs can be removed. Return the resulting string or \\"EMPTY\\" if the string becomes empty. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack) if stack else \\"EMPTY\\""},{"question":"You are given an array of integers that represents the lengths of wooden sticks available. Your task is to determine the maximum number of rectangular tables you can build using these sticks. Each rectangular table requires exactly four sticks of the same length. Write a function `max_tables(sticks: List[int]) -> int` that accepts a list of integers and returns the maximum number of rectangular tables that can be built. # Input - `sticks` (List[int]): A list of integers where each integer represents the length of a wooden stick. # Output - `int`: An integer that represents the maximum number of rectangular tables you can build. # Constraints - The length of `sticks` will be between 1 and 10^5. - Each element in `sticks` will be a positive integer less than or equal to 10^9. # Example ```python # Example 1: sticks = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4] # Output: 2 # Explanation: You can build 2 tables using the sticks of lengths 3 and 4. # Example 2: sticks = [2, 2, 2, 2, 2, 2, 2, 2] # Output: 2 # Explanation: You can build 2 tables using the sticks of length 2. # Example 3: sticks = [1, 1, 1, 2, 2, 3, 4, 4, 4, 4] # Output: 1 # Explanation: You can build only 1 table using the sticks of length 4. ``` # Note The function `max_tables` should be efficient enough to handle a large number of sticks within the constraint limits.","solution":"from typing import List from collections import Counter def max_tables(sticks: List[int]) -> int: Returns the maximum number of rectangular tables that can be built using the given sticks. Each rectangular table requires exactly four sticks of the same length. # Count the frequency of each stick length stick_counts = Counter(sticks) # Calculate the number of tables that can be made tables = 0 for count in stick_counts.values(): tables += count // 4 return tables"},{"question":"In a distant land, there exists a peculiar tree with fruit of unique properties. This tree has n branches, each bearing a single fruit and described by a unique integer identifier. The fruits can be in one of two states: fresh or rotten. Fresh fruits can be converted to rotten if they are adjacent to an already rotten fruit. Specifically, if a fruit at position i is rotten, fruits at positions i-1 and i+1 (if such positions exist) will rot after t minutes. Once a fruit rots, it remains so permanently. Given the initial state of the fruits on the tree, determine the minimum number of minutes required for all the fruits to rot. If it is impossible for all fruits to rot, return -1. The first line contains an integer n (1 ≤ n ≤ 105) representing the number of fruits. The second line contains a string of length n, where each character is either \'F\' (fresh) or \'R\' (rotten) indicating the initial state of each fruit. Print a single integer — the minimum number of minutes needed for all the fruits to rot or -1 if not all fruits can become rotten. Example: Input: 6 FFRFFF Output: 3 Explanation: At t = 1: FF (R)RFFF -> FF R FFRFFF At t = 2: FF R FFR F FF At t = 3: FF RR FFR FFF All fruit are now rotten.","solution":"from collections import deque def min_minutes_to_rot_all_fruits(n, state): Determine the minimum number of minutes required for all the fruits to rot on the tree, or return -1 if impossible. n : int : number of fruits state : str : initial state string with \'F\' (fresh) and \'R\' (rotten) queue = deque() fresh_count = 0 # Initialize the queue with all initially rotten fruits for i in range(n): if state[i] == \'R\': queue.append((i, 0)) # (index, time) else: fresh_count += 1 if fresh_count == 0: return 0 max_minutes = 0 while queue: current_index, current_time = queue.popleft() for neighbor in (current_index - 1, current_index + 1): if 0 <= neighbor < n and state[neighbor] == \'F\': state = state[:neighbor] + \'R\' + state[neighbor + 1:] fresh_count -= 1 queue.append((neighbor, current_time + 1)) max_minutes = max(max_minutes, current_time + 1) return max_minutes if fresh_count == 0 else -1"},{"question":"In a distant land, there are n magical portals positioned in a straight line. Each portal, when crossed, either increases or decreases your magical power. The goal is to find a way to navigate from the first portal to the last one such that the total change in magical power is exactly zero. You can only move to the next portal in the line. Each portal has a power change value associated with it which can be positive (increasing your power) or negative (decreasing your power). Given an array of integers representing these power changes, determine if there exists a sequence of portals from the first to the last that results in a total power change of zero. If such a path exists, output \\"YES\\"; otherwise, output \\"NO\\". The first line of the input contains an integer n (1 ≤ n ≤ 100,000) - the number of portals. The second line contains n integers separated by spaces, where the i-th integer represents the power change at the i-th portal (-10^9 ≤ power change ≤ 10^9). Output \\"YES\\" if there exists a path from the first portal to the last one that results in a total power change of zero, otherwise output \\"NO\\".","solution":"def can_balance_portals(n, power_changes): Determines if there exists a path from the first to the last portal that results in a total power change of zero. :param n: an integer, the number of portals :param power_changes: a list of integers, the power change at each portal :return: \\"YES\\" if such a path exists, otherwise \\"NO\\" total_power_change = sum(power_changes) if total_power_change == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers that represents the height of a sequence of buildings from left to right. You can perform a special operation that involves deleting three buildings in a row (three consecutive elements in the array). Your task is to determine the maximum number of buildings that can be deleted from the array by performing the special operation. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^6) — the heights of the buildings. Print a single integer — the maximum number of buildings that can be deleted. # Example Input: ``` 8 3 1 4 1 5 9 2 6 ``` Output: ``` 6 ``` Explanation: One possible way to delete the maximum number of buildings is to first delete [3, 1, 4] resulting in the array [1, 5, 9, 2, 6], then delete [1, 5, 9], resulting in the remaining array [2, 6]. The total number of buildings deleted is 6.","solution":"def max_buildings_deleted(n, heights): Given the number of buildings and their heights, return the maximum number of buildings that can be deleted by performing the special operation of deleting three consecutive buildings. :param n: int Number of buildings :param heights: list of int Heights of the buildings :return: int Maximum number of buildings that can be deleted # The maximum number of buildings that can be deleted is simply # the number of triplets that can be formed from the total buildings return (n // 3) * 3"},{"question":"Consider an undirected graph where each node represents a city, and each edge represents a direct road between two cities with a certain travel cost. The mayor of a region wants to ensure that the region\'s roads are well-connected, meaning there should be a way to travel between any pair of cities using the given roads, directly or indirectly. However, to achieve optimal connectivity, he also wants to minimize the total cost of constructing the roads. This problem can be solved using the idea of finding a Minimum Spanning Tree (MST) of the graph. You are given a list of cities and the direct roads between them, along with the associated construction costs. Your task is to determine the minimum cost required to ensure all cities are connected. # Input The first line contains two integers, `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000), where `n` is the number of cities and `m` is the number of direct roads. The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing a direct road between city `u` and city `v` with a construction cost of `w`. The cities are numbered from 1 to `n`. # Output Print a single integer, the minimum cost required to ensure all cities are connected. If it\'s not possible to connect all cities, output \\"IMPOSSIBLE\\". # Example Input: ``` 4 5 1 2 3 2 3 4 3 4 5 1 4 10 2 4 2 ``` Output: ``` 9 ``` In this example, the minimum cost to connect all cities is 9, which can be achieved by constructing roads (1, 2), (2, 4), and (2, 3). # Notes To solve this problem, you can use algorithms such as Kruskal\'s or Prim\'s, both of which are efficient for finding the MST of a graph. Be sure to handle the case where it\'s impossible to connect all the cities.","solution":"def find_min_cost_to_connect_all_cities(n, m, roads): Returns the minimum cost required to ensure all cities are connected. If it\'s not possible to connect all cities, returns \\"IMPOSSIBLE\\". parent = list(range(n)) rank = [0] * n def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): root_x = find(x) root_y = find(y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Kruskal algorithm to find the Minimum Spanning Tree (MST) roads.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in roads: if find(u - 1) != find(v - 1): union(u - 1, v - 1) mst_cost += w edges_used += 1 if edges_used == n - 1: break # Check if all cities are connected if edges_used != n - 1: return \\"IMPOSSIBLE\\" return mst_cost"},{"question":"You are given an array of integers and a value k. You need to find out whether there is a pair of distinct indices i and j in the array such that the absolute difference between the elements at these indices is equal to k. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. For each test case: - The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 10^6) — the size of the array and the absolute difference to check for. - The second line contains n integers a_1, a_2, ..., a_n (−10^9 ≤ a_i ≤ 10^9) — the elements of the array. The output for each test case should be \\"YES\\" (without the quotes) if such a pair exists, or \\"NO\\" otherwise. Sample Input: 2 5 3 1 5 3 4 2 4 1 1 2 3 4 Sample Output: YES YES","solution":"def find_pairs_with_difference(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] found_pair = False elements_set = set() for number in arr: if (number + k) in elements_set or (number - k) in elements_set: found_pair = True break elements_set.add(number) if found_pair: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Ken the magician is designing a new trick involving sequences of cards. Each card has a non-negative integer value painted on it. Ken wants to arrange a sequence of cards to perform the maximum number of magic transformation operations on it. A magic transformation involves picking any two cards, removing them from the sequence, and adding a new card with a value equal to the absolute difference of the values of the two picked cards. Ken believes that the trick becomes more impressive the higher the total number of possible magic transformations. However, he is unsure how to arrange the cards to achieve this. You are given an initial sequence of cards. Find the maximum number of magic transformations that Ken can perform on this sequence. The first line contains a single integer, n (2 leq n leq 10^5), the number of cards in the sequence. The second line contains the n non-negative integers, which are the values on the cards. Each value is between 0 and 10^9 inclusive. Output a single integer: the maximum number of magic transformations Ken can perform on the sequence. **Example:** Input: ``` 5 6 4 2 4 6 ``` Output: ``` 4 ``` **Explanation:** - Start with [6, 4, 2, 4, 6] - Pick (6, 6), remove them and add 0, resulting in [4, 2, 4, 0] - Pick (4, 4), remove them and add 0, resulting in [2, 0, 0] - Pick (2, 0), remove them and add 2, resulting in [0, 2] - Pick (2, 0), remove them and add 2, resulting in [2] We can see that we performed 4 transformations in total.","solution":"def max_transformations(n, cards): Returns the maximum number of magic transformations possible. The number of transformations is always `n-1` where `n` is the number of cards. return n - 1"},{"question":"Jim is designing a new game in which players collect special cards. Each card features a different fantasy creature with a certain power level, and some creatures can only form teams with certain other types of creatures. Jim wants to figure out the optimal way to form the strongest possible team of creatures. Players will have a collection of n cards, with each card representing a unique fantasy creature. The creatures are indexed from 1 to n. Each creature has an integer p_i representing its power level. Additionally, each creature belongs to one of m categories, indicated by integers from 1 to m. Jim identifies that a team can be formed if no two creatures in the team belong to the same category. He wants to form a team with the maximum possible sum of power levels while adhering to the category constraint. The first line contains two integers n (1 leq n leq 10^5) and m (1 leq m leq 100) — the number of cards and the number of different categories. The second line contains n integers. The i-th integer is p_i (1 leq p_i leq 10^9) — the power level of the i-th creature. The third line contains n integers. The i-th integer is c_i (1 leq c_i leq m) — the category of the i-th creature. Output one integer which denotes the maximum possible sum of power levels for a team that can be formed according to the above constraints. For example, if the input is: ``` 5 3 10 20 30 40 50 1 2 3 1 2 ``` The optimal team would include the creatures with power levels 30, 40, and 50, resulting in a sum of 120. If the input is: ``` 4 2 5 5 5 5 1 1 2 2 ``` Only one team can be formed with creatures from different categories, and the maximum sum possible in this case is 10.","solution":"def max_team_power(n, m, power_levels, categories): Calculate the maximum possible sum of power levels for a team that can be formed without any two creatures from the same category. Args: n : int : Number of cards. m : int : Number of different categories. power_levels : List[int] : List of power levels of each creature. categories : List[int] : List of categories of each creature. Returns: int : The maximum possible sum of power levels for the team. category_to_max_power = {} for i in range(n): category = categories[i] power_level = power_levels[i] if category not in category_to_max_power: category_to_max_power[category] = power_level else: category_to_max_power[category] = max(category_to_max_power[category], power_level) return sum(category_to_max_power.values())"},{"question":"Given two integers A and B (0 le A, B le 100), output \\"YES\\" if A is divisible by B or B is divisible by A, otherwise output \\"NO\\". If either A or B is zero, output \\"undefined\\" (considering division by zero is not defined). The input consists of two integers separated by a space.","solution":"def check_divisibility(a, b): Check if either a is divisible by b or b is divisible by a. Return \\"YES\\" if true, \\"NO\\" if false, or \\"undefined\\" if either a or b is zero. if a == 0 or b == 0: return \\"undefined\\" if a % b == 0 or b % a == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a matrix of size n times m (1 le n, m le 100) with non-negative integer values. You need to find the maximum sum of a sub-matrix in this matrix. A sub-matrix is defined by choosing two points (r1, c1) and (r2, c2) such that 1 le r1 le r2 le n and 1 le c1 le c2 le m. The sum of the sub-matrix is the sum of all the elements within that sub-matrix. The input format is as follows: - The first line contains two integers, n and m, the number of rows and columns in the matrix, respectively. - The next n lines contain m integers each, the elements of the matrix. The output should be a single integer, the maximum sum of any sub-matrix within the input matrix. # Example Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 45 ``` In this example, the entire matrix has the maximum sum sub-matrix with sum 1+2+3+4+5+6+7+8+9=45. # Notes: - You can assume that each element of the matrix is between 0 and 10^9. - The input will always contain valid integers and will follow the format mentioned above. Your task is to write a function or program that reads the input matrix, computes the maximum sum of any sub-matrix, and prints this maximum sum.","solution":"def max_sum_submatrix(matrix): Given a matrix of size n x m, return the maximum sum of any sub-matrix. def kadane(arr): Calculates the maximum sum of a subarray using Kadane\'s algorithm. max_so_far = -float(\'inf\') max_ending_here = 0 for x in arr: max_ending_here += x if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far n, m = len(matrix), len(matrix[0]) max_sum = -float(\'inf\') # Temporary array to store the sum of elements for a particular left-right column pair. for left in range(m): temp = [0] * n for right in range(left, m): for row in range(n): temp[row] += matrix[row][right] max_sum = max(max_sum, kadane(temp)) return max_sum"},{"question":"You are working on a new feature for a social media platform that allows users to create unique hashtags for their posts. The platform aims to ensure that no two posts have the same hashtag. Users can submit a hashtag when they create a post. If the submitted hashtag is unique, it is accepted as is. However, if the same hashtag has already been used, the platform should suggest a new unique hashtag based on the original one by appending the smallest possible positive integer that makes the hashtag unique. The first line contains the integer n (1 ≤ n ≤ 10^5), the number of hashtag submissions. The following n lines contain the submitted hashtags, each of which is a non-empty string of no more than 32 characters consisting of lowercase Latin letters and digits. Print n lines, each containing the hashtag accepted by the system: either the original hashtag if it was unique, or a new unique hashtag formed by appending the smallest integer that makes it unique. **Example** Input: ``` 6 summer vacation summer beach2021 summer vacation ``` Output: ``` summer vacation summer1 beach2021 summer2 vacation1 ```","solution":"def generate_unique_hashtags(n, hashtags): unique_hashtags = {} results = [] for hashtag in hashtags: if hashtag in unique_hashtags: i = unique_hashtags[hashtag] while f\\"{hashtag}{i}\\" in unique_hashtags: i += 1 new_hashtag = f\\"{hashtag}{i}\\" unique_hashtags[hashtag] = i + 1 unique_hashtags[new_hashtag] = 1 results.append(new_hashtag) else: unique_hashtags[hashtag] = 1 results.append(hashtag) return results"},{"question":"You are given an array `arr` of `n` positive integers. Your task is to find a pair of indices `(i, j)` such that `1 <= i < j <= n` and the difference `arr[j] - arr[i]` is maximized, provided that `arr[i]` is less than `arr[j]`. If no such pair exists, return -1. The first line of input contains an integer `n` (`1 <= n <= 10^5`), the length of the array. The second line contains `n` positive integers separated by space (`1 <= arr[i] <= 10^9`). Print a single integer which is the maximum difference `arr[j] - arr[i]` where `i < j` and `arr[i] < arr[j]`. If no such pair exists, print `-1`. # Examples Example 1: **Input:** ``` 6 7 1 5 3 6 4 ``` **Output:** ``` 5 ``` **Explanation:** - The possible valid pairs are `(2, 3)`, `(2, 5)`, `(3, 5)`, `(3, 6)`, `(4, 5)`, and `(4, 6)`. - The maximum difference is `6 - 1 = 5`. Example 2: **Input:** ``` 5 9 8 7 6 5 ``` **Output:** ``` -1 ``` **Explanation:** - There is no pair `(i, j)` such that `i < j` and `arr[i] < arr[j]`. - Therefore, the output is `-1`. # Notes: - Consider both the efficiency of your solution and edge cases (e.g., arrays of minimum length, arrays that are strictly increasing or decreasing).","solution":"def max_difference(arr): if len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"You are given a string `s` consisting of lowercase English letters and digits. Your task is to find the length of the longest substring of `s` that contains at least one letter and at least one digit. The input consists of multiple test cases. The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100), consisting of lowercase English letters and digits. For each test case, print the length of the longest substring that contains at least one letter and at least one digit. If there is no such substring, print `0`. # Example **Input:** ``` 3 a123bc abcd 1234 ``` **Output:** ``` 6 0 0 ```","solution":"def longest_substring_with_letter_digit(test_cases): results = [] for s in test_cases: max_length = 0 n = len(s) for start in range(n): has_letter = False has_digit = False for end in range(start, n): if s[end].isalpha(): has_letter = True if s[end].isdigit(): has_digit = True if has_letter and has_digit: max_length = max(max_length, end - start + 1) results.append(max_length) return results def process_input(input_data): lines = input_data.split(\'n\') t = int(lines[0]) test_cases = lines[1:t+1] return longest_substring_with_letter_digit(test_cases)"},{"question":"You are given an unsorted array of integers where each element appears exactly twice, except for one unique element which appears exactly once. Your task is to identify and return the unique element that appears only once. Write a function that receives the array of integers and returns the unique integer. The function should have linear runtime complexity and use constant extra space. You must implement a function with the following signature: ```python def find_unique_element(arr: List[int]) -> int: # your code here ``` # Example: ```python arr = [4, 1, 2, 1, 2] assert find_unique_element(arr) == 4 ``` # Constraints: - You can assume that the array will contain at least 1 and at most 100,000 elements. - Each element in the array is an integer between -10^9 and 10^9. - The solution must run in linear time and constant extra space.","solution":"from typing import List def find_unique_element(arr: List[int]) -> int: This function takes a list of integers where each element appears exactly twice except for one unique element. It returns the unique element that appears only once using bitwise XOR. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n. Your task is to partition this sequence into the minimum number of non-empty subsequences such that each subsequence is strictly increasing. Each test contains one or more test cases. The first line contains the number of test cases t (1 le t le 1000). The first line of each test case contains one integer n (1 le n le 1000) — the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the sequence itself. For each test case, output one integer: the minimum number of non-empty strictly increasing subsequences into which the original sequence can be partitioned. Each subsequence should be strictly increasing and non-overlapping with others. # Example Input ``` 2 5 8 9 1 2 3 4 4 4 4 4 ``` Output ``` 2 4 ``` # Explanation In the first test case, the given sequence can be partitioned as two strictly increasing subsequences [8, 9], and [1, 2, 3]. In the second test case, each number must be in its own subsequence, as there are no strictly increasing groups to be formed, resulting in 4 subsequences each containing the number 4.","solution":"def min_increasing_subsequences(t, test_cases): results = [] for case in test_cases: n, sequence = case count = 1 for i in range(1, n): if sequence[i] <= sequence[i - 1]: count += 1 results.append(count) return results"},{"question":"A security system has logs of when employees enter and exit a building. Each event log specifies if an employee entered or exited and is recorded with a timestamp. You have to analyze these logs to compute how long each employee was in the building and then determine the maximum number of employees who were in the building simultaneously. The input consists of a series of logs. Each log contains a timestamp, the employee\'s ID, and the event type (either \'enter\' or \'exit\'). The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of logs. Each of the following n lines contains a timestamp (formatted as HH:MM), an employee\'s ID (an integer from 1 to 10^6), and the event type (a string that is either \\"enter\\" or \\"exit\\"). Assume that each employee enters and exits the building exactly once in the given log data. Output two values: 1. The maximum number of employees who were in the building at the same time. 2. The total duration (in minutes) each employee spent in the building. This should be printed for each employee in the order of their IDs. Input format: ``` Integer \'n\' n lines in the format \'HH:MM employee_id event_type\' ``` Output format: ``` Integer \'max_employees_in_building\' m lines in the format \'employee_id time_spent\' ``` Example: ``` 7 08:45 1 enter 08:50 2 enter 09:00 2 exit 09:05 3 enter 09:10 1 exit 09:20 3 exit 09:25 4 enter ``` Output: ``` 2 1 25 2 10 3 15 4 0 ``` Explanation: Employee 1 was in the building from 08:45 to 09:10, spending 25 minutes. Employee 2 was in the building from 08:50 to 09:00, spending 10 minutes. Employee 3 was in the building from 09:05 to 09:20, spending 15 minutes. Employee 4 has entered the building but has no exit recorded yet, so their time spent is 0 minutes. The building had the maximum of 2 employees simultaneously at 08:50 when IDs 1 and 2 were both present.","solution":"def max_employees_and_duration(logs): from collections import defaultdict import datetime fmt = \'%H:%M\' employee_times = defaultdict(lambda: [None, None, 0]) # [enter time, exit time, total duration] events = [] for log in logs: timestamp, emp_id, event_type = log.split() emp_id = int(emp_id) time_obj = datetime.datetime.strptime(timestamp, fmt) events.append((time_obj, emp_id, event_type)) events.sort() currently_in_building = set() max_in_building = 0 for event in events: time_obj, emp_id, event_type = event if event_type == \'enter\': currently_in_building.add(emp_id) employee_times[emp_id][0] = time_obj max_in_building = max(max_in_building, len(currently_in_building)) elif event_type == \'exit\': currently_in_building.remove(emp_id) employee_times[emp_id][1] = time_obj entry_time = employee_times[emp_id][0] exit_time = employee_times[emp_id][1] duration = (exit_time - entry_time).seconds // 60 employee_times[emp_id][2] = duration # Prepare the final data for duration employees_data = [] for emp_id in sorted(employee_times): time_spent = employee_times[emp_id][2] employees_data.append((emp_id, time_spent)) return max_in_building, employees_data # Example usage: logs = [ \\"08:45 1 enter\\", \\"08:50 2 enter\\", \\"09:00 2 exit\\", \\"09:05 3 enter\\", \\"09:10 1 exit\\", \\"09:20 3 exit\\", \\"09:25 4 enter\\", ] print(max_employees_and_duration(logs))"},{"question":"You are given two strings s1 and s2 of equal length consisting of lowercase English letters. Your task is to check whether it is possible to rearrange the characters of string s1 to make it equal to s2 by performing at most one swap between any two (not necessarily distinct) characters in s1. The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of two lines containing the strings s1 and s2, both of length n (1 ≤ n ≤ 100). For each test case, print \\"Yes\\" if it is possible to make the strings equal by performing at most one swap, otherwise print \\"No\\".","solution":"def can_be_equal_with_one_swap(s1, s2): Check whether it is possible to rearrange the characters of s1 to make it equal to s2 by performing at most one swap. if s1 == s2: return \\"Yes\\" # Identify mismatched positions mismatched_positions = [i for i in range(len(s1)) if s1[i] != s2[i]] # If there are exactly two mismatched positions if len(mismatched_positions) == 2: i, j = mismatched_positions # Check if swapping s1[i] and s1[j] would make s1 equal to s2 if s1[i] == s2[j] and s1[j] == s2[i]: return \\"Yes\\" # All other cases return \\"No\\""},{"question":"User Bob lives in a unique environment where he commands a battalion of robots, each equipped with a laser gun. Bob\'s battalion operates on an infinite 2D Cartesian plane. For training purposes, Bob has set up several robotic targets at various positions on the plane. Bob\'s objective is to maximize the number of targets hit with a single command to the battalion. Each robot in Bob\'s battalion can fire a laser in a straight line along any of the four cardinal directions: north, south, east, or west. Given the positions of n robotic targets, determine the maximum number of targets that can be aligned in a straight line parallel to one of the cardinal directions. Your task is to write a function that computes this maximum number. The first line of input contains an integer n (2 ≤ n ≤ 10^5) — the number of robotic targets. The next n lines each contain two space-separated integers xi and yi (-10^9 ≤ xi, yi ≤ 10^9) — the coordinates of the i-th robotic target. Output a single integer — the maximum number of targets that are aligned in a straight line parallel to one of the cardinal directions. # Example Input ``` 5 1 2 2 2 3 2 4 2 5 3 ``` Output ``` 4 ``` # Explanation In this example, the robots aligned at coordinates (1,2), (2,2), (3,2), and (4,2) are all on the same horizontal line (y=2). Therefore, the maximum number of targets that can be hit with one command are 4.","solution":"def max_targets_in_line(n, target_coords): from collections import defaultdict vertical_lines = defaultdict(int) horizontal_lines = defaultdict(int) for x, y in target_coords: vertical_lines[x] += 1 horizontal_lines[y] += 1 max_vertical = max(vertical_lines.values()) max_horizontal = max(horizontal_lines.values()) return max(max_vertical, max_horizontal)"},{"question":"You are given an array of n integers a_1, a_2, dots, a_n. You can apply the following operation any number of times: choose any two elements in the array and swap their positions. Let g(a) represent the minimum number of swap operations you need to sort the array in non-descending order. For example: You are given m arrays b_1, b_2, dots, b_m, each having up to n elements. Calculate sum limits_{i = 1}^{m} g(b_i). The first line contains one integer m (1 le m le 2 cdot 10^5) — the number of arrays. Then n lines follow, each line containing n_i integers b_{i1}, b_{i2}, dots, b_{i{n_i}} where the sum of all n_i does not exceed 2 cdot 10^5. Each integer b_{ij} is in the range [1, 10^9]. Print one integer: sum limits_{i = 1}^{m} g(b_i).","solution":"def min_swaps_to_sort(arr): This function returns the minimum number of swaps required to sort the array in non-descending order. n = len(arr) arrpos = list(enumerate(arr)) arrpos.sort(key=lambda it: it[1]) vis = {k: False for k in range(n)} ans = 0 for i in range(n): if vis[i] or arrpos[i][0] == i: continue cycle_size = 0 x = i while not vis[x]: vis[x] = True x = arrpos[x][0] cycle_size += 1 if cycle_size > 0: ans += cycle_size - 1 return ans def total_min_swaps_to_sort(arr_list): This function calculates the total minimum number of swaps to sort all arrays in arr_list. total_swaps = 0 for arr in arr_list: total_swaps += min_swaps_to_sort(arr) return total_swaps"},{"question":"A popular online bookstore is organizing its inventory of books. Each book has been assigned a unique identifier in the form of a string consisting of exactly three uppercase letters followed by exactly four digits (e.g., \\"ABC1234\\", \\"XYZ5678\\"). The bookstore wants to ensure that the books are organized in a specific order: books should first be sorted alphabetically by their letters and then by their numerical values in ascending order. Write a function that takes a list of book identifiers and returns the list sorted according to the described order. # Input - The first line contains an integer n (1 leq n leq 10^5), the number of book identifiers. - The following n lines each contain a string representing a book identifier, with each string consisting of exactly three uppercase letters followed by exactly four digits. # Output - Output n lines, each containing a book identifier, sorted according to the described order. # Example Input ``` 5 XYZ5678 ABC1234 DEF0001 ABC0002 XYZ0001 ``` Output ``` ABC0002 ABC1234 DEF0001 XYZ0001 XYZ5678 ``` # Note In this example, the books are sorted first by their letters: - \\"ABC\\", \\"ABC\\", \\"DEF\\", \\"XYZ\\", \\"XYZ\\" And then by their numerical values: - \\"0002\\", \\"1234\\", \\"0001\\", \\"0001\\", \\"5678\\"","solution":"def sort_books(books): Sorts a list of book identifiers first alphabetically by their letters and then by their numerical values in ascending order. Parameters: books (list of str): The list of book identifiers. Returns: list of str: The sorted list of book identifiers. return sorted(books, key=lambda x: (x[:3], int(x[3:])))"},{"question":"Write a function that takes a positive integer n and returns the number of ways to decode it. The integer n can be thought of as an encoded message, where each number from 1 to 26 represents a corresponding letter in the alphabet (\'A\' = 1, \'B\' = 2, ..., \'Z\' = 26). The decoding should follow these rules: 1. The input integer does not contain leading zeros. 2. The encoding must be valid, meaning it can be split into numbers from 1 to 26. For example, the input 123 can be decoded as \\"ABC\\" (1, 2, 3), \\"LC\\" (12, 3), or \\"AW\\" (1, 23), resulting in 3 possible decodings. Function Signature: ```python def num_decodings(n: int) -> int: ``` # Input - A single integer n (1 ≤ n ≤ 10^5). # Output - An integer representing the number of ways to decode the input. # Example Input: 226 Output: 3 Input: 10 Output: 1 # Explanation: - In the first example, 226 can be decoded as \\"BZ\\" (2, 26), \\"VF\\" (22, 6), or \\"BBF\\" (2, 2, 6). - In the second example, 10 can only be decoded as \\"J\\" (10).","solution":"def num_decodings(n: int) -> int: s = str(n) if not s or s[0] == \'0\': return 0 dp = [0] * (len(s) + 1) dp[0] = 1 dp[1] = 1 if s[0] != \'0\' else 0 for i in range(2, len(s) + 1): one_digit = int(s[i-1:i]) two_digits = int(s[i-2:i]) if 1 <= one_digit <= 9: dp[i] += dp[i-1] if 10 <= two_digits <= 26: dp[i] += dp[i-2] return dp[len(s)]"},{"question":"You are organizing a camping trip and need to allocate tents for the group. Each tent has a certain capacity and there is a specific number of people who should share the same tent. Your goal is to minimize the number of used tents. Each person has a unique maximum tolerance level for the number of people they can share a tent with, defined as a_i. A person i can\'t stay in a tent with more than a_i other people sharing it. Given the tent capacities and the tolerances of each person, determine the minimum number of tents needed to accommodate everyone. The first line contains a single integer n (1 le n le 10^5) — the number of people. The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i le n-1) — the maximum number of other people each person can share a tent with. Output a single integer — the minimum number of tents needed. # Example Input ``` 5 1 1 2 2 3 ``` Output ``` 3 ``` Explanation In this example: - Person 1 can share a tent with 1 other person. - Person 2 can share a tent with 1 other person. - Person 3 and Person 4 can each share a tent with 2 other people. - Person 5 can share a tent with 3 other people. The minimal distribution to fit everyone could be: 1. Person 1 and Person 2 in one tent. 2. Person 3 and Person 4 in a second tent. 3. Person 5 alone in a third tent. Thus, a total of 3 tents are required.","solution":"from collections import Counter def min_tents(n, a): Determines the minimum number of tents needed to accommodate everyone based on each person\'s sharing tolerance. Parameters: n (int): Number of people. a (List[int]): List of tolerances for each person. Returns: int: The minimum number of tents needed. tolerance_counts = Counter(a) tents = 0 for tolerance, count in tolerance_counts.items(): tents += (count + tolerance) // (tolerance + 1) return tents"},{"question":"A company wants to optimize their warehouse logistics by using an automated system to manage the movement of packages. The warehouse is represented as a 2D grid of size n x m. Each cell in the grid can be empty or contain an obstacle. A robot starts at the top-left corner of the warehouse (0, 0) and must reach the bottom-right corner (n-1, m-1) by traversing empty cells only. The robot can move right, down, left, or up, but it cannot move into cells with obstacles or outside the grid boundaries. Your task is to determine the minimum number of moves required for the robot to reach the bottom-right corner. If it is not possible for the robot to reach the target, return -1. The warehouse grid is given as a list of strings, where each string represents a row in the grid. An empty cell is denoted by \'.\', and an obstacle is denoted by \'#\'. Input: - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000). - Each of the next n lines contains a string of length m, representing a row in the warehouse grid. Output: - Print a single integer, the minimum number of moves required to reach the bottom-right corner, or -1 if it is not possible. Example: Input: 4 4 .... .. .#.. .... Output: 6 Explanation: The optimal path the robot can take is shown below, with \'P\' denoting the path: P P P . . # # P . # . P . . . P The robot requires a minimum of 6 moves to reach the bottom-right corner.","solution":"from collections import deque def min_moves_to_reach_bottom_right(n, m, warehouse): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start = (0, 0) goal = (n-1, m-1) if warehouse[0][0] == \'#\' or warehouse[n-1][m-1] == \'#\': return -1 queue = deque([(start, 0)]) visited = set() visited.add(start) while queue: (x, y), steps = queue.popleft() if (x, y) == goal: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and warehouse[nx][ny] == \'.\': queue.append(((nx, ny), steps + 1)) visited.add((nx, ny)) return -1"},{"question":"A Circular string is a string in which the first and last characters are considered to be adjacent. For example, in the string \\"abc\\", the characters \'c\' and \'a\' are adjacent. Determine the length of the longest palindromic substring for a given circular string s of length n. A string is said to be a palindrome if it reads the same backward as forward. For example, \\"aba\\" and \\"racecar\\" are palindromes, but \\"abc\\" and \\"hello\\" are not. Given a string s, your task is to find out and print the length of the longest palindromic substring in its circular form. The first line of the input contains one integer n (1 ≤ n ≤ 10^6) — the length of the string s. The second line contains a string s of length n, consisting of lowercase English letters. Output the length of the longest palindromic substring in the circular string. # Example Input ``` 7 aabbaa ``` Output ``` 6 ``` Explanation In the given example, the circular string \\"aabbaa\\" can be rearranged to form the palindrome \\"aabbaaa\\" or \\"aaabbaa\\", both of which have a length of 6. So, the output is 6.","solution":"def longest_circular_palindrome_length(s): Returns the length of the longest palindromic substring in a circular string. Parameters: s (str): Input string Returns: int: Length of the longest palindromic substring in circular form n = len(s) if n == 0: return 0 if n == 1: return 1 def is_palindrome(sub): return sub == sub[::-1] extended_s = s + s # To handle circular nature by duplicating string max_len = 1 for i in range(n): for j in range(i + 1, i + n + 1): if is_palindrome(extended_s[i:j]): max_len = max(max_len, j - i) return max_len"},{"question":"You have been tasked with writing a program to help organize participants in a charity trail run event. The event organizers want to group participants by their performance in preliminary races. Participants should be grouped such that each group has runners finishing within the same percentile range. For example, top 10% of finishers, next 10%, and so on. You are given a list of finishing times (in seconds) of all participants. Your task is to partition these times into groups according to the percentile ranges specified by the organizers. The input consists of: - An integer `n` (1 ≤ n ≤ 10^5), the number of participants. - An integer `k` (1 ≤ k ≤ 100), the number of percentile groups. - An array of `n` integers, representing the finishing times of the participants. The output should be: - A list of `k` lists, where the `i-th` list contains the finishing times of participants in the `i-th` percentile range. The groups should be sorted in ascending order of their times. Note that the size of each group may not always be exactly `n/k` due to integer division rounding. Hence, use the following rules to determine the ranges: - The first ⌊n / k⌋ groups should each have exactly ⌊n / k⌋ elements. - The last group should contain the remaining elements. # Example Input ``` 10 2 [600, 470, 170, 430, 300, 410, 750, 420, 180, 460] ``` # Example Output ``` [[170, 180, 300, 410, 420], [430, 460, 470, 600, 750]] ``` # Constraints - The integer values in the input array are unique. # Explanation In this example: - There are 10 participants and the organizers want to create 2 groups. - The first group will contain the times of the top 50% of finishers (the first 5 sorted times). - The second group will contain the times of the remaining 50% of finishers (the next 5 sorted times). The resulting groups are then sorted individually.","solution":"def partition_times(n, k, times): Partitions the list of finishing times into k percentile groups. Parameters: n (int) : The number of participants k (int) : The number of percentile groups times (list) : List of finishing times (integers) Returns: list of list : The k groups of finishing times, each list sorted individually sorted_times = sorted(times) result = [] base_group_size = n // k extra = n % k start = 0 for i in range(k): if i < extra: end = start + base_group_size + 1 else: end = start + base_group_size result.append(sorted_times[start:end]) start = end return result"},{"question":"We have a collection of unique ores in a mine represented as an array `ores` of length `n`. Each element `ores[i]` represents the type of ore at position `i`, where each type is represented by a unique integer. You are also given `m` queries to process. Each query is represented by two integers `L` and `R`, denoting the range `[L, R]` within which we need to find the number of unique types of ore. Write a program that processes these queries efficiently. Input: - The first line contains an integer `n` (1 ≤ n ≤ 200000) — the number of ores in the array. - The second line contains `n` integers `ores[0], ores[1], ..., ores[n-1]` (1 ≤ ores[i] ≤ 1000000) — the types of ores. - The next line contains an integer `m` (1 ≤ m ≤ 100000) — the number of queries. - The following `m` lines each contain two integers `L` and `R` (1 ≤ L ≤ R ≤ n) — the range for each query. Output: For each query, print the number of unique ore types in the inclusive range `[L, R]`. Example: Input: ``` 6 1 2 1 3 2 1 3 1 3 2 5 1 6 ``` Output: ``` 2 3 3 ``` Explanation: - For the first query, the unique ores in range `[1, 3]` are `{1, 2}` which is 2 types. - For the second query, the unique ores in range `[2, 5]` are `{1, 2, 3}` which is 3 types. - For the third query, the unique ores in range `[1, 6]` are `{1, 2, 3}` which is 3 types.","solution":"def process_queries(n, ores, queries): This function processes the range queries to find the number of unique ores in each range. Args: n (int): Number of ores. ores (list): List of integer representing the ore types. queries (list): List of tuples, each containing two integers L and R representing the range. Returns: list: List of integers representing the number of unique ores for each query. from collections import defaultdict # Storing the results of each query result = [] # Dictionary to store the unique ores counts for each query range count_map = defaultdict(lambda: 0) for L, R in queries: # We use a set to find unique elements unique_ores = set() for i in range(L-1, R): unique_ores.add(ores[i]) result.append(len(unique_ores)) return result # Example usage: # n = 6 # ores = [1, 2, 1, 3, 2, 1] # queries = [(1, 3), (2, 5), (1, 6)] # print(process_queries(n, ores, queries)) # Output: [2, 3, 3]"},{"question":"A travel agency offers boat tours through a river filled with numerous scenic spots. Each scenic spot can be represented as a node, and the direct water routes between them as weighted edges, with weights representing the travel time between spots. Given an undirected graph representing the river\'s layout, determine the shortest possible route that begins at a specified starting spot and visits all other spots exactly once before returning to the starting spot. This problem is a variation of the Traveling Salesman Problem (TSP). # Input - The first line contains an integer n, the number of scenic spots (nodes) (2 ≤ n ≤ 10). - The second line contains an integer m, the number of direct travel routes (edges) (1 ≤ m ≤ 45). - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), representing a route between scenic spot u and scenic spot v with travel time w. # Output - Print a single integer, the minimum possible travel time needed to start from any spot, visit all other spots exactly once, and return to the starting spot. # Example Input ``` 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 ``` Output ``` 80 ``` In this example, the optimal route could be 1 -> 2 -> 4 -> 3 -> 1 with a total travel time of 10 + 25 + 30 + 15 = 80.","solution":"import itertools def tsp(graph, n): Solves the Traveling Salesman Problem for a given undirected graph. Parameters: graph : dict -> The adjacency matrix representation of the graph with weights as travel times. n : int -> The number of nodes in the graph. Returns: int -> The minimum possible travel time needed to start from any spot, visit all other spots exactly once, and return to the starting spot. vertices = list(range(n)) min_path = float(\'inf\') for perm in itertools.permutations(vertices[1:]): # Generate all permutations except the starting node current_path_weight = 0 # Starting node k = 0 # Add distance from the starting node to the first node in the permutation for i in perm: current_path_weight += graph[k][i] k = i # Add distance to return to the starting node current_path_weight += graph[k][0] # Update minimum path weight min_path = min(min_path, current_path_weight) return min_path def read_input(): import sys input = sys.stdin.read data = input().split() index = 0 n = int(data[index]) index +=1 m = int(data[index]) index +=1 graph = [[float(\'inf\')]*n for _ in range(n)] for _ in range(m): u = int(data[index]) - 1 v = int(data[index + 1]) - 1 w = int(data[index + 2]) index += 3 graph[u][v] = w graph[v][u] = w return graph, n def main(): graph, n = read_input() print(tsp(graph, n)) if __name__ == \\"__main__\\": main()"},{"question":"Mike loves exploring new places, and he has recently picked up a hobby of solving mazes. Given a rectangular grid of size n x m, where each cell is either open (\'.\') or blocked (\'#\'), Mike wants to find the shortest path from the top-left corner (1,1) to the bottom-right corner (n,m). Mike can only move up, down, left, or right, and he cannot move through blocked cells. If it is not possible to reach the destination, output -1. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next n lines contain m characters each (either \'.\' or \'#\'), representing the maze. Print a single integer representing the length of the shortest path from the top-left to the bottom-right corner, or -1 if there is no such path. Consider the maze: ``` 5 5 ..... .#. ..... ..#.. ..... ``` The shortest path for Mike would have a length of 8. Another example: ``` 3 3 . . . ``` There is no valid path for Mike, so the output should be -1.","solution":"from collections import deque def shortest_path_in_maze(n, m, maze): Finds the shortest path in a maze from (0,0) to (n-1,m-1) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].strip().split()) maze = [list(line) for line in lines[1:n+1]] return n, m, maze"},{"question":"A large warehouse is filled with a grid of containers. Each container can be empty or filled with goods. Your task is to find the largest rectangular section of continuously filled containers and determine its area. You are given a binary matrix M of size r times c, where each cell contains either a 1 (indicating a filled container) or a 0 (indicating an empty container). The objective is to identify the maximum area of a rectangle consisting entirely of 1s within the grid. Write a function `maxRectangleArea` that takes in a binary matrix, and returns the area of the largest rectangle containing only 1s. # Input - The function `maxRectangleArea` should accept a single argument: - `M` (List[List[int]]): A 2D list representing the binary matrix with dimensions r x c (1 le r, c le 100). # Output - Returns an integer representing the area of the largest rectangle filled with 1s. # Example ```python def maxRectangleArea(M: List[List[int]]) -> int: # your code here # Example usage M = [ [1, 0, 1, 0, 0], [1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [1, 0, 0, 1, 0] ] print(maxRectangleArea(M)) # Output: 6 ``` # Explanation In the given example, the largest rectangle filled with 1s has dimensions 2 times 3, hence the area is 6.","solution":"from typing import List def maxRectangleArea(M: List[List[int]]) -> int: if not M: return 0 r, c = len(M), len(M[0]) height = [0] * (c + 1) max_area = 0 for row in M: for i in range(c): if row[i] == 0: height[i] = 0 else: height[i] += 1 stack = [-1] for i in range(c + 1): while height[i] < height[stack[-1]]: h = height[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"Write a function `find_longest_unique_subarray(arr)` that takes a list of integers, `arr`, as input and returns the length of the longest contiguous subarray that contains no duplicate integers. # Constraints * The length of `arr` will be at most 10^5. * The integers in `arr` will be within the range [-10^9, 10^9]. # Examples ```python >>> find_longest_unique_subarray([2, 3, 4, 3, 2, 5, 4, 3]) 4 >>> find_longest_unique_subarray([1, 2, 3, 4, 5]) 5 >>> find_longest_unique_subarray([1, 2, 2, 3, 4, 4, 5]) 3 ``` # Explanation In the first example, the longest contiguous subarray with all unique elements is [2, 3, 4], [3, 2, 5] or [2, 5, 4, 3]. All these subarrays have a length of 4. In the second example, all elements are unique, so the length is 5. In the third example, the longest contiguous subarray with all unique elements is [2, 3, 4] or [3, 4, 5]. Both subarrays have a length of 3.","solution":"def find_longest_unique_subarray(arr): Returns the length of the longest contiguous subarray that contains no duplicate integers. # Initialize a dictionary to store the last seen index of each element last_seen = {} max_length = 0 start = 0 # Start index of the current subarray for i, value in enumerate(arr): if value in last_seen and last_seen[value] >= start: start = last_seen[value] + 1 last_seen[value] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"The Kingdom of Heptagonia is famous for its seven-sided landmarks and festivals, especially the heptagonal tiles that adorn its streets and buildings. The King of Heptagonia has recently announced a competition to solve a problem involving these heptagonal tiles. The kingdom\'s tiles are arranged in a grid of n rows by n columns. Each tile has a positive integer height, and the goal of the competition is to find the largest square sub-grid where all the tiles have the same height. Given the n x n grid of tiles with their heights, your task is to determine the side length of the largest square sub-grid where all tiles have the same height. Input: - The first line contains a single integer n (1 ≤ n ≤ 100), representing the dimensions of the grid (n x n). - Each of the next n lines contains n integers, each representing the height of a tile. Output: - A single integer representing the side length of the largest possible square sub-grid where all tiles have the same height. # Example **Input:** ``` 4 1 1 3 4 1 1 3 4 5 5 5 5 1 5 5 5 ``` **Output:** ``` 2 ``` In this example, the largest square sub-grid where all tiles have the same height is of side length 2. One such sub-grid is at the top-left corner with height 1.","solution":"def largest_same_height_square(grid): n = len(grid) dp = [[0] * n for _ in range(n)] max_side = 0 for i in range(n): for j in range(n): if i == 0 or j == 0: dp[i][j] = 1 else: if grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"In a given city, there are multiple locations where festivals take place. Each location has a specific number of festivals happening over certain time periods. You are hired to find the maximum number of non-overlapping festivals that can be attended by a single person. Each festival is represented by a pair of integers [si, ei], where si is the starting time and ei is the ending time of the festival. A person can attend a festival from the time it starts to the time it ends, but cannot attend any two festivals that overlap in time. Given a list of festivals, your task is to determine the maximum number of non-overlapping festivals that can be attended. **Input:** - First line contains an integer n (1 ≤ n ≤ 200,000) representing the number of festivals. - The next n lines each contain two integers si and ei (0 ≤ si < ei ≤ 1,000,000,000) representing the start time and end time of a festival. **Output:** - Print a single integer, the maximum number of non-overlapping festivals that can be attended. **Examples:** ``` Input: 4 1 3 2 4 3 5 6 8 Output: 3 ``` ``` Input: 6 1 2 2 3 3 4 4 5 5 6 6 7 Output: 6 ``` **Explanation:** In the first example, one optimal way is to attend festivals with time intervals [1, 3], [3, 5], and [6, 8]. In the second example, all festivals can be attended as they do not overlap with each other.","solution":"def max_non_overlapping_festivals(festivals): Finds the maximum number of non-overlapping festivals. Args: festivals (List[Tuple[int, int]]): The list of festivals with start and end times. Returns: int: Maximum number of non-overlapping festivals. # Sort the festivals by end time to apply the greedy algorithm festivals.sort(key=lambda x: x[1]) max_festivals = 0 last_end_time = 0 for start, end in festivals: if start >= last_end_time: max_festivals += 1 last_end_time = end return max_festivals"},{"question":"The Quick Rabbit loves sequences. He has a sequence of positive integers and wants to find the longest subsegment of the sequence where the sum of the subsegment is a prime number. Given an array of n integers, help the Quick Rabbit find the length of the longest subsegment with a sum that is a prime number. If no such subsegment exists, return 0. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the sequence. The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6). In a single line, print an integer — the length of the longest subsegment with a prime sum. Example: Input: 5 1 2 3 4 5 Output: 2 Explanation: The subsegment [2, 3] has a sum of 5, which is a prime number. This is the longest subsegment with a prime sum, so the answer is 2.","solution":"import math def is_prime(n): Check if a given number is prime if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def longest_prime_sum_subsegment(n, array): Find the length of the longest subsegment with a prime sum longest_length = 0 for i in range(n): current_sum = 0 for j in range(i, n): current_sum += array[j] if is_prime(current_sum): longest_length = max(longest_length, j - i + 1) return longest_length"},{"question":"A group of teams is participating in a coding competition. Each team is involved in multiple challenges. The teams\' performance is ranked, and each challenge can have multiple winners. Each team cannot be placed higher than another team if it didn\'t participate in at least one challenge in which the latter team participated. Based on the results, determine the possible ranking order of the teams. The first line contains two integers n and m (1 ≤ n, m ≤ 100000) – the number of teams and challenges respectively. Each of the next m lines contains two integers x and y (1 ≤ x, y ≤ n) – indicating that team x and team y both participated in the same challenge. You need to output one integer k followed by a list of n integers, describing a ranking of the teams such that for any two teams x and y, team x is ranked higher than team y only if x participated in at least one challenge with y. The integer k should indicate the number of possible ranking orders of the teams. It is guaranteed that the input does not contain any contradictions. In the first sample, there are three teams and two challenges: 1, 2, and 3. There is no constraint on their ranking as they all participated in at least one common challenge. In the second sample, the input specifies specific constraints that determine the order of the teams based on their participation in the common challenges.","solution":"from collections import defaultdict, deque def compute_team_order(n, m, challenges): # Initialize graph and in-degree count graph = defaultdict(list) in_degree = defaultdict(int) # Initialize the adjacency list and in-degree counter for x, y in challenges: graph[x].append(y) graph[y].append(x) in_degree[x] += 0 in_degree[y] += 0 # Define visitation set and resulting order visited = set() order = [] # Perform BFS to determine the possible order def bfs(start): queue = deque([start]) visited.add(start) levels = {start: 0} level_size = defaultdict(int) while queue: node = queue.popleft() order.append(node) level_size[levels[node]] += 1 for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) levels[neighbor] = levels[node] + 1 queue.append(neighbor) return level_size # Find all connected components components = 0 all_level_sizes = [] for i in range(1, n + 1): if i not in visited: component_level_sizes = bfs(i) all_level_sizes.append(component_level_sizes) components += 1 # Calculate the number of possible rankings ranking_count = 1 for level_sizes in all_level_sizes: for size in level_sizes.values(): ranking_count *= size return components, order # Sample input and output n, m = 3, 2 challenges = [(1, 2), (2, 3)] print(compute_team_order(n, m, challenges)) # Output: (1, [1, 2, 3])"},{"question":"You are given a map of a city represented as a grid of size m x n, where each cell can be either open land (\'O\'), water (\'W\'), or a tree (\'T\'). A tree cell cannot be traversed, but you can move through open land and water. The city mayor wants to know the maximum area of water that can be transformed into a park. A park can only be built on water cells, and the park must be a rectangular region. Find the maximum number of water cells that can form a rectangular park within the given grid. Write a function `maxWaterParkArea(grid: List[List[str]]) -> int` where the input parameter `grid` is a list of lists consisting of characters \'O\', \'W\', and \'T\'. The function should return an integer which is the largest number of water cells that can form a rectangular park. If no such rectangle exists, return 0. # Constraints: - The grid dimensions m and n range from 1 to 1000. - The input grid contains only \'O\', \'W\', and \'T\' characters. # Example: Input: ``` grid = [ [\\"O\\", \\"W\\", \\"W\\", \\"O\\", \\"T\\"], [\\"W\\", \\"W\\", \\"W\\", \\"O\\", \\"T\\"], [\\"T\\", \\"O\\", \\"O\\", \\"W\\", \\"W\\"], [\\"O\\", \\"W\\", \\"W\\", \\"O\\", \\"T\\"] ] ``` Output: ``` 4 ``` Explanation: The largest rectangle consisting of only water cells is located starting from (0, 1) to (1, 2) which includes 4 cells: ``` [ [\\"W\\", \\"W\\"], [\\"W\\", \\"W\\"] ] ```","solution":"def maxWaterParkArea(grid): # If the grid is empty, return 0 if not grid or not grid[0]: return 0 # Get the dimensions of the grid m, n = len(grid), len(grid[0]) # Initialize the dp array to store the height of consecutive \'W\' from top to current row heights = [0] * n max_area = 0 # Process each row to calculate potential areas for row in grid: for j in range(n): # Calculate heights of \'W\' columns heights[j] = heights[j] + 1 if row[j] == \'W\' else 0 # Calculate the max rectangle area with heights array max_area = max(max_area, max_histogram_area(heights)) return max_area def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): # If the stack is empty or the current height is greater than the height at the stack\'s top if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) # Update max_area, if necessary max_area = max(max_area, area) # Calculate area for the remaining elements in the stack while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given a sequence of digits that represents a code. The code can be decoded to letters using the following mapping: - \'1\' -> \'A\' - \'2\' -> \'B\' - ... - \'9\' -> \'I\' - \'10\' -> \'J\' - \'11\' -> \'K\' - ... - \'26\' -> \'Z\' Given a string of digits (which may include leading zeros), you need to determine how many distinct ways exist to decode the entire string into letters. The decoding process should adhere to the following rules: - A single digit (1-9) translates to a corresponding letter. - A pair of digits (10-26) translates to a corresponding letter. - Leading zeros and segments that cannot be decoded should be considered invalid sequences. Given constraints: - The input string will have a length of at least 1 and at most 100000 characters. - The string consists of digits only. Write a function that prints the number of ways to decode the given string. Since the number of ways can be large, return the result modulo 10^9 + 7. Input consists of a single line containing a string of digits. Print a single integer that represents the number of ways to decode the string, modulo 10^9 + 7. If the string cannot be decoded, print 0. # Example: **Input:** ``` 226 ``` **Output:** ``` 3 ``` Explanation: The string \\"226\\" can be decoded in three ways: \\"BBF\\", \\"VF\\", \\"BZ\\". **Input:** ``` 0 ``` **Output:** ``` 0 ``` Explanation: The string \\"0\\" cannot be decoded as no valid letters correspond to \\"0\\". **Input:** ``` 12345 ``` **Output:** ``` 3 ``` Explanation: The string \\"12345\\" can be decoded in three ways: \\"ABCDE\\", \\"LCD\\", \\"AWDE\\".","solution":"def num_decodings(s): MOD = 10**9 + 7 if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 if s[0] != \'0\' else 0 for i in range(2, n + 1): one_digit = int(s[i-1]) two_digits = int(s[i-2:i]) if 1 <= one_digit <= 9: dp[i] = dp[i - 1] % MOD if 10 <= two_digits <= 26: dp[i] = (dp[i] + dp[i - 2]) % MOD return dp[n] # example usage print(num_decodings(\\"226\\")) # Output: 3 print(num_decodings(\\"0\\")) # Output: 0 print(num_decodings(\\"12345\\")) # Output: 3"},{"question":"In an infinite 2D grid, you are initially positioned at (0, 0). You are given a string `instructions` that consists of only the characters \'G\', \'L\', and \'R\'. \'G\' can be interpreted as move forward by one unit, \'L\' can be interpreted as turn 90 degrees to the left, and \'R\' can be interpreted as turn 90 degrees to the right. You start by facing north (upwards in the grid). Determine whether there exists a sequence of these steps after which you would return to the initial position (0, 0) after executing the `instructions` an indefinite number of times. The function `isRobotBounded(string instructions)` should take a string as input and return a boolean indicating whether the robot remains within a circle after executing the given steps indefinitely. # Input: - A string `instructions` of length n (1 ≤ n ≤ 100). # Output: - A boolean value (`True` or `False`). # Example: Example 1: **Input:** ``` instructions = \\"GGLLGG\\" ``` **Output:** ``` True ``` **Explanation:** The robot moves in a circle: 1. \\"GG\\" - It moves north from (0, 0) to (0, 2). 2. \\"LL\\" - It turns left twice to face south. 3. \\"GG\\" - It moves south from (0, 2) to (0, 0). Example 2: **Input:** ``` instructions = \\"GG\\" ``` **Output:** ``` False ``` **Explanation:** The robot moves forward twice and ends up at (0, 2). It is guaranteed to always move further away in the same direction. Example 3: **Input:** ``` instructions = \\"GL\\" ``` **Output:** ``` True ``` **Explanation:** The robot moves in a circle: 1. \\"G\\" - It moves north from (0, 0) to (0, 1). 2. \\"L\\" - It turns left to face west. If the instruction is repeated indefinitely, it keeps turning left in a cycle, bounding its movement. # Note: - You only need to consider the answer after an indefinite number of instructions have been executed. - You need to simulate the movement step by step to ensure robot\'s position and orientation is tracked correctly to make the decision.","solution":"def isRobotBounded(instructions): Determines if the robot is bounded in a circle. Args: instructions (str): a string consisting of \'G\', \'L\', \'R\' representing instructions to the robot. Returns: bool: True if the robot is bounded in a circle, False otherwise. # Initial position x, y = 0, 0 # Initial direction is north: (dx, dy) if facing north would be (0, 1) direction = 0 # 0 = north, 1 = east, 2 = south, 3 = west # Direction vectors for north, east, south, and west directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for instruction in instructions: if instruction == \'G\': dx, dy = directions[direction] x += dx y += dy elif instruction == \'L\': direction = (direction - 1) % 4 elif instruction == \'R\': direction = (direction + 1) % 4 # The robot stays within a circle if it\'s back to the origin or is not facing north return (x, y) == 0 or direction != 0"},{"question":"You are working on a new game where players collect magic scrolls that have various power levels. The scrolls are arranged in a line, and each scroll has a power level associated with it. Players can choose to collect a subset of these scrolls, and your task is to find the maximum sum of power levels of the scrolls that the player can collect with the constraint that no two collected scrolls are adjacent to each other in the line. Given a list of integers representing the power levels of the scrolls, write a program that determines the maximum sum of power levels that can be collected without selecting two adjacent scrolls. # Input: - The first line contains an integer n (1 le n le 100,000) representing the number of scrolls. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) representing the power levels of the scrolls. # Output: - Output a single integer representing the maximum sum of power levels of scrolls that can be collected subject to the constraint. # Example: Input: ``` 5 3 2 7 10 12 ``` Output: ``` 22 ``` # Explanation: In this example, the maximum sum is achieved by collecting the scrolls with power levels 3, 10, and 12. Note that no two collected scrolls are adjacent in the line. The sum is (3 + 10 + 12 = 22).","solution":"def max_power_sum(n, power_levels): Determine the maximum sum of power levels that can be collected without selecting two adjacent scrolls. if n == 0: return 0 elif n == 1: return power_levels[0] # Initialize an array to store the maximum sum up to each scroll max_sums = [0] * n max_sums[0] = power_levels[0] max_sums[1] = max(power_levels[0], power_levels[1]) # Fill the array using dynamic programming approach for i in range(2, n): max_sums[i] = max(max_sums[i-1], max_sums[i-2] + power_levels[i]) return max_sums[-1]"},{"question":"You are given an array of integers representing the height of trees in a forest. Your task is to find the maximum possible difference in height between any two trees, provided that the number of trees between them is at least `k`. In other words, you need to find the maximum difference between any two tree heights such that there are at least `k` trees in between them. The first line of the input contains two integers `n` and `k` (`2 ≤ n ≤ 100000`, `1 ≤ k < n`) — the number of trees and the minimum number of trees that should be between any two trees whose heights are being compared. The second line of the input contains `n` integers `h_1, h_2, ..., h_n` (`1 ≤ h_i ≤ 10^9`), where `h_i` is the height of the `i-th` tree. Print one integer — the maximum difference in height between any two trees respecting the condition. # Example Input: ``` 8 3 1 3 4 6 7 8 9 10 ``` Output: ``` 9 ``` # Explanation The maximum difference is `10 - 1 = 9` where 1 is the height of the first tree and 10 is the height of the eighth tree, and there are 6 trees between them, which is more than the required minimum of 3 trees between them.","solution":"def max_difference(n, k, heights): Finds the maximum possible difference in height between any two trees with at least `k` trees between them. :param n: Number of trees :param k: Minimum number of trees between any two heights considered :param heights: List of heights of the trees :return: Maximum height difference max_diff = 0 for i in range(n - k - 1): for j in range(i + k + 1, n): max_diff = max(max_diff, abs(heights[i] - heights[j])) return max_diff"},{"question":"Alice is a talented software engineer working on optimizing data storage for her company\'s new project. She needs to create an efficient algorithm to handle and query large sets of data using intervals. Alice\'s data consists of an array of n integers, where the i-th integer represents the number of data points in the i-th interval. She needs to be able to update the number of data points in a specific interval and determine the sum of data points within any given subinterval quickly. You are tasked with helping Alice implement this functionality. # Input The first line contains two integers, n and q (1 le n, q le 10^5), representing the number of intervals and the number of queries, respectively. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^4), where a_i represents the number of data points in the i-th interval. Each of the next q lines contains one of the following queries: - `1 x y`: Update the number of data points in the x-th interval to y (1 le x le n, 1 le y le 10^4). - `2 l r`: Compute the sum of data points from the l-th interval to the r-th interval (inclusive) (1 le l le r le n). # Output For each query of type `2`, print the sum of the data points within the specified subinterval. # Example Input: ``` 5 4 4 3 7 5 1 2 1 3 1 3 10 2 2 4 2 1 5 ``` Output: ``` 14 18 23 ``` # Explanation: - The initial array is [4, 3, 7, 5, 1]. - The first query asks for the sum from index 1 to 3, which is 4 + 3 + 7 = 14. - The second query updates the value at index 3 to 10, so the array becomes [4, 3, 10, 5, 1]. - The third query asks for the sum from index 2 to 4, which is 3 + 10 + 5 = 18. - The fourth query asks for the sum from index 1 to 5, which is 4 + 3 + 10 + 5 + 1 = 23. # Notes: - Efficient data structure usage is necessary to handle potentially large inputs within constrained time limits. - Consider segment trees or binary indexed trees (Fenwick trees) for optimal performance in both updates and range sum queries.","solution":"class FenwickTree: def __init__(self, n): self.n = n self.tree = [0] * (n + 1) def update(self, index, delta): while index <= self.n: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def range_query(self, left, right): return self.query(right) - self.query(left - 1) def main(): import sys input = sys.stdin.read data = input().split() n, q = int(data[0]), int(data[1]) array = list(map(int, data[2:n+2])) ft = FenwickTree(n) # Initialize Fenwick Tree with the given array for i in range(n): ft.update(i + 1, array[i]) output = [] index = n + 2 for _ in range(q): query_type = int(data[index]) if query_type == 1: x = int(data[index + 1]) y = int(data[index + 2]) index += 3 current_value = ft.range_query(x, x) ft.update(x, y - current_value) elif query_type == 2: l = int(data[index + 1]) r = int(data[index + 2]) index += 3 result = ft.range_query(l, r) output.append(str(result)) sys.stdout.write(\\"n\\".join(output) + \\"n\\")"},{"question":"You are given a rectangular grid with `n` rows and `m` columns, filled with numbers. You need to perform a series of operations on this grid. In each operation, you are allowed to select any sub-grid and apply an increment operation to every element of this sub-grid. You can apply this operation as many times as you want on any sub-grid. Your task is to determine the minimum number of operations needed to make all elements in the grid equal. Input: - The first line contains two integers `n` and `m` (1 leq n, m leq 50) — the number of rows and columns in the grid respectively. - Each of the next `n` lines contains `m` integers — the elements of the grid. Each element of the grid is an integer between 1 and 100. Output: - The minimum number of operations needed to make all elements in the grid equal. Example: Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 12 ``` Explanation: - Increase elements in sub-grid (1,1) to (1,3) three times. - Increase elements in sub-grid (1,1) to (2,3) three times. - Increase elements in sub-grid (1,1) to (3,3) three times. - Finally, increase elements in sub-grid (1,1) to (2,3) three times.","solution":"def min_operations_to_equal_grid(n, m, grid): Determine the minimum number of operations needed to make all elements in the grid equal. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list): 2D list representing the grid. Returns: int: Minimum number of operations needed to make all elements in the grid equal. min_val = min(min(row) for row in grid) operations = 0 for i in range(n): for j in range(m): operations += grid[i][j] - min_val return operations"},{"question":"Tanya is managing the stock inventory for her small bookstore. She has an n-page catalog, where each page lists the stock of a different book with its quantity. Unfortunately, the order in which the books appear is not alphabetically sorted, and Tanya would like to sort the catalog so that the books appear in alphabetical order by title. Each book\'s title is a string consisting of lowercase English letters, and the stock quantity is an integer. The catalog is represented by an array of tuples, where each tuple contains a string (the book title) and an integer (its stock quantity). Write a function that takes this array and outputs the catalog sorted in alphabetical order by the book titles. The input consists of an integer n (1 ≤ n ≤ 100), followed by n lines each containing a string s (1 ≤ |s| ≤ 100) and an integer q (1 ≤ q ≤ 1000). The book titles and quantities are separated by a space. Output the sorted catalog with each book title and its corresponding stock quantity on a new line. Example: Input: 5 harrypotter 10 lordoftherings 5 catcherintherye 15 toalltheboys 7 greeneggsandham 20 Output: catcherintherye 15 greeneggsandham 20 harrypotter 10 lordoftherings 5 toalltheboys 7","solution":"def sort_catalog(catalog): Returns the catalog sorted in alphabetical order by the book titles. return sorted(catalog, key=lambda book: book[0]) # Test input input_data = [ (\\"harrypotter\\", 10), (\\"lordoftherings\\", 5), (\\"catcherintherye\\", 15), (\\"toalltheboys\\", 7), (\\"greeneggsandham\\", 20), ] # Expected output expected_output = [ (\\"catcherintherye\\", 15), (\\"greeneggsandham\\", 20), (\\"harrypotter\\", 10), (\\"lordoftherings\\", 5), (\\"toalltheboys\\", 7), ] # Example usage sorted_catalog = sort_catalog(input_data) print(sorted_catalog)"},{"question":"Ash loves playing with strings and finding anagrams. Today, she has a string `s` containing lowercase English letters, and she wants to find out if she can rearrange the letters of the string to form a palindrome. As a reminder, a palindrome is a string that reads the same forward and backward. Write a function `canFormPalindrome` that takes a string `s` as input and returns \\"YES\\" if it\'s possible to rearrange the letters of `s` to form a palindrome. Otherwise, return \\"NO\\". For example: - Input: `s = \\"aabb\\"` Output: \\"YES\\" - Input: `s = \\"abc\\"` Output: \\"NO\\" You need to ensure your solution handles strings of length up to 10^5 efficiently.","solution":"from collections import Counter def canFormPalindrome(s): Returns \\"YES\\" if it\'s possible to rearrange the letters of string s to form a palindrome. Otherwise, returns \\"NO\\". count = Counter(s) odd_counts = sum(1 for c in count.values() if c % 2 != 0) # If there\'s more than one character with an odd count, we can\'t form a palindrome if odd_counts > 1: return \\"NO\\" return \\"YES\\""},{"question":"John loves to play with sequences and has come up with a new game. He has a sequence of n integers and wants to perform a series of moves to make it strictly increasing by removing the minimum number of elements from the sequence. A sequence is strictly increasing if every element is greater than the preceding one. For example, the sequence [1, 3, 2, 4] can be made strictly increasing by removing the element 2. Given a sequence of n integers, determine the minimum number of elements John needs to remove to make the sequence strictly increasing. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n space-separated integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the sequence. Print a single integer — the minimum number of elements to remove to make the sequence strictly increasing. In the first sample, the sequence is already strictly increasing, so no elements need to be removed. In the second sample, the sequence [2, 3, 3, 2, 4] can be made strictly increasing by removing one of the 3s and the 2. In the third sample, removing the element 5 makes the sequence [1, 2, 3, 7] strictly increasing.","solution":"def min_removals_to_make_strictly_increasing(n, sequence): This function returns the minimum number of elements to remove from the sequence to make it strictly increasing. # Initialize the list that will store the lengths of longest increasing subsequences dp = [1] * n # Fill dp array with lengths of longest increasing subsequences ending at each index for i in range(1, n): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence lis_length = max(dp) # The minimum number of elements to remove is the total number of elements minus the length of the LIS return n - lis_length"},{"question":"Jane is designing an algorithm to navigate through a grid-based city with obstacles. The city is represented as an n x m grid where some cells contain obstacles denoted by -1, and other cells represent streets denoted by 0. Jane can only move to adjacent cells in up, down, left, or right directions, and cannot move through or onto cells with obstacles. Jane starts at the top-left corner of the grid and aims to reach the bottom-right corner. She needs to find the shortest path from the starting cell (0,0) to the destination cell (n-1,m-1). If there is no possible path, she should return -1. Write a function `shortestPath(grid: List[List[int]]) -> int` that takes a 2D list `grid` representing the city and returns the length of the shortest path from (0,0) to (n-1,m-1). If there is no valid path, return -1. **Constraints** - The grid size n, m is at most 100. - The value of each cell in the grid is either 0 (street) or -1 (obstacle). **Example** ```python grid = [ [0, 0, -1, 0], [0, -1, 0, 0], [0, 0, 0, 0] ] # Output: 5 # Explanation: The shortest path is right -> right -> down -> down -> right. grid = [ [0, -1], [-1, 0] ] # Output: -1 # Explanation: There is no possible path. ``` Note: You may use BFS (Breadth-First Search) to solve this problem.","solution":"from collections import deque from typing import List def shortestPath(grid: List[List[int]]) -> int: Find the shortest path in a grid from (0,0) to (n-1,m-1). -1 represents an obstacle and 0 represents a street. Uses BFS for shortest path calculation. if not grid or grid[0][0] == -1 or grid[-1][-1] == -1: return -1 n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == n-1 and c == m-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"You are given a tree (connected acyclic undirected graph) with `n` nodes. Each node has an integer value assigned to it. Your task is to answer multiple queries on the tree. Each query asks for the maximum value within a given subtree of the tree. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of nodes in the tree. - The second line contains `n` integers `a[1], a[2], ..., a[n]` (1 ≤ a[i] ≤ 10^9) — the values assigned to the nodes. - The next `n-1` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) indicating that there is an edge between nodes `u` and `v`. - The next line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. - The next `q` lines each contain a single integer `v` (1 ≤ v ≤ n) — representing a node of the tree. # Output For each query, output the maximum value in the subtree rooted at node `v`. # Example Input ``` 7 1 2 3 4 5 6 7 1 2 1 3 2 4 2 5 3 6 3 7 3 1 3 6 ``` Output ``` 7 7 6 ``` # Explanation - The subtree rooted at node 1 contains all nodes: {1, 2, 3, 4, 5, 6, 7}. The maximum value is 7. - The subtree rooted at node 3 contains nodes: {3, 6, 7}. The maximum value is 7. - The subtree rooted at node 6 contains only the node 6. The maximum value is 6.","solution":"from collections import defaultdict def build_tree(n, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) return tree def dfs(tree, node, parent, values, subtree_max): # Initially, the maximum of subtree rooted at `node` is the value of the node itself max_value = values[node-1] for neighbor in tree[node]: if neighbor != parent: # Get the maximum value for the subtree rooted at the neighbor child_max = dfs(tree, neighbor, node, values, subtree_max) max_value = max(max_value, child_max) # Store the maximum value for the subtree rooted at node subtree_max[node] = max_value return max_value def preprocess_tree(n, values, edges): tree = build_tree(n, edges) subtree_max = [0] * (n + 1) dfs(tree, 1, -1, values, subtree_max) return subtree_max def solve_tree_queries(n, values, edges, queries): subtree_max = preprocess_tree(n, values, edges) result = [] for v in queries: result.append(subtree_max[v]) return result"},{"question":"You are participating in a programming contest, and one of the problems involves analyzing patterns in a sequence of numbers. The problem is defined as follows: You are given an array of integers. You need to write a program that will determine if the array contains a contiguous subsequence of numbers whose sum is exactly zero. If such a subsequence exists, the program should print \\"YES\\"; otherwise, print \\"NO\\". Input Format: - The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n integers, each integer separated by a space. Each integer x (|x| ≤ 1000) represents an element of the array. Output Format: - Print \\"YES\\" if there exists a contiguous subsequence with a sum of zero. Otherwise, print \\"NO\\". Example: Input: 5 1 2 -3 1 2 Output: YES Explanation: The subsequence [1, 2, -3] sums to 0, so the correct output is \\"YES\\".","solution":"def has_zero_sum_subsequence(n, arr): Determine if the array contains a contiguous subsequence of numbers whose sum is exactly zero. Parameters: - n: int, the number of elements in the array. - arr: list of int, the elements of the array. Returns: - str: \\"YES\\" if there exists a contiguous subsequence with a sum of zero. Otherwise, \\"NO\\". prefix_sum_set = set() current_sum = 0 for num in arr: current_sum += num # Check if current prefix sum is zero or already exists in the prefix_sum_set if current_sum == 0 or current_sum in prefix_sum_set: return \\"YES\\" # Add current prefix sum to the set prefix_sum_set.add(current_sum) return \\"NO\\""},{"question":"Given a string containing only \'(\' and \')\', your task is to determine the length of the longest valid substring of parentheses. A valid substring is defined as a substring that has equal number of opening and closing parentheses and every opening parenthesis has a corresponding closing parenthesis. For example: - For the input string \\"(()\\", the longest valid substring is \\"()\\", with length 2. - For the input string \\")()())\\", the longest valid substring is \\"()()\\", with length 4. - For the input string \\"()(())\\", the entire string is valid, with length 6. You are required to implement the function `longestValidParentheses(s: str) -> int`. # Input - A single string `s` containing only \'(\' and \')\'. The length of the string is between 1 and 10^5. # Output - Return a single integer representing the length of the longest valid substring of parentheses. # Example ``` Input: \\"(()\\" Output: 2 Input: \\")()())\\" Output: 4 Input: \\"()(())\\" Output: 6 ``` # Note: - The solution should have a time complexity of O(n) where n is the length of the input string.","solution":"def longestValidParentheses(s: str) -> int: Function to find the length of the longest valid (well-formed) parentheses substring max_length = 0 stack = [-1] for i, char in enumerate(s): if char == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_length = max(max_length, i - stack[-1]) return max_length"},{"question":"In a small city, there are n intersections, and some pairs of intersections are connected by two-way roads. The city\'s Traffic Department is planning to install traffic lights at some intersections such that every intersection is connected with every other intersection by roads having traffic lights. You are given the intersections and the roads connecting them. Your task is to determine the minimum number of intersections that need traffic lights so that every pair of intersections is connected by roads with traffic lights. The first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 1,000) – the number of intersections and the number of roads, respectively. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) – indicating that there is a road between intersections u and v. It is guaranteed that no road appears more than once in the input. Output a single integer – the minimum number of intersections that need traffic lights. Example: Input: 4 4 1 2 1 3 1 4 2 4 Output: 1 Explanation: Placing a traffic light at intersection 1 ensures all intersections are connected with it, hence fulfilling the requirement.","solution":"def minimum_traffic_lights(n, m, roads): Determines the minimum number of traffic lights needed so that every intersection is connected by roads with traffic lights. :param n: int - number of intersections :param m: int - number of roads :param roads: List of tuples - each tuple contains two integers representing a road between two intersections :return: int - minimum number of traffic lights needed if n == 1: return 0 degree = [0] * n for u, v in roads: degree[u - 1] += 1 degree[v - 1] += 1 max_degree = max(degree) if max_degree == n - 1: return 1 return 2"},{"question":"Your task is to design a new library system for a public library. The library has several thousands of books, each book identified by a unique integer book ID, and the books are arranged in a linear array in no particular order. The system should support the following operations efficiently: 1. **Add a book:** Add a book with a unique ID to the collection. 2. **Check out a book:** Mark a book as checked out, given its book ID. 3. **Return a book:** Mark a previously checked out book as returned, given its book ID. 4. **Check the status of a book:** Verify if a book is currently checked out or available, given its book ID. 5. **Longest available sequence:** Find the longest sequence of consecutive available books. Implement the above functions in Python. # Function Signatures ```python class Library: def __init__(self): # Initializes the library pass def add_book(self, book_id: int) -> None: pass def check_out(self, book_id: int) -> bool: pass def return_book(self, book_id: int) -> bool: pass def check_status(self, book_id: int) -> str: pass def longest_available_sequence(self) -> int: pass ``` # Constraints - Book IDs are non-negative integers. - Unique book IDs. - Incorrect operations (checking out an already checked out book, returning a book not checked out, checking status of a non-existent book) should be handled appropriately. - Optimal implementation aimed at minimizing time complexity for the operations. # Example ```python library = Library() library.add_book(1001) library.add_book(1002) library.add_book(1003) assert library.check_status(1001) == \\"available\\" assert library.check_out(1001) == True assert library.check_status(1001) == \\"checked out\\" assert library.return_book(1001) == True assert library.longest_available_sequence() == 3 ``` In this example, the library initially adds three books. The first book is checked out and then returned, checking the status in the process. Finally, the longest sequence of available books is queried, which yields a result of 3.","solution":"class Library: def __init__(self): # Initialize the library with book catalog and availability status self.books = {} self.checked_out = set() def add_book(self, book_id: int) -> None: if book_id not in self.books: self.books[book_id] = \'available\' def check_out(self, book_id: int) -> bool: if book_id in self.books and self.books[book_id] == \'available\': self.books[book_id] = \'checked out\' self.checked_out.add(book_id) return True return False def return_book(self, book_id: int) -> bool: if book_id in self.books and self.books[book_id] == \'checked out\': self.books[book_id] = \'available\' self.checked_out.remove(book_id) return True return False def check_status(self, book_id: int) -> str: if book_id in self.books: return self.books[book_id] return \'non-existent\' def longest_available_sequence(self) -> int: if not self.books: return 0 available_books = [book for book in sorted(self.books.keys()) if self.books[book] == \'available\'] max_length = 0 current_length = 0 last_book = None for book in available_books: if last_book is None or book == last_book + 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 last_book = book max_length = max(max_length, current_length) return max_length"},{"question":"In a distant land, there\'s a magical forest filled with enchanted trees. Each tree is special because it can grow magical fruits. The number of fruits each tree bears is determined by a unique sequence. A tree\'s fruit-bearing pattern can be described using a well-known sequence: the Fibonacci sequence. In this sequence, the number of fruits a tree bears in its nth year is the sum of fruits it bore in the (n-1)th and (n-2)th years. Formally, this can be represented as: ``` F(n) = F(n-1) + F(n-2) ``` with initial conditions ``` F(1) = 1 F(2) = 1 ``` Given a specific year, can you determine the number of fruits a tree will bear in that year? # Input The first line of input contains a single integer `t` (1 leq t leq 30) representing the number of test cases. The following `t` lines each contain a single integer `n` (1 leq n leq 40), denoting the year for which you need to calculate the number of fruits. # Output For each test case, print a single integer representing the number of fruits the tree will bear in the `n`th year. # Example Input ``` 3 1 5 10 ``` Output ``` 1 5 55 ``` # Note For the first test case, in the 1st year, the tree bears 1 fruit. For the second test case, the number of fruits in the 5th year is 5 (sequence: 1, 1, 2, 3, 5). For the third test case, the number of fruits in the 10th year is 55 (sequence: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55).","solution":"def fib(n): Returns the nth Fibonacci number. if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a + b return b def fruits_per_year(test_cases): results = [] for n in test_cases: results.append(fib(n)) return results"},{"question":"You are given a string consisting of lower case English letters. Your task is to count the number of distinct characters in the string. The input consists of a single string s (1 ≤ |s| ≤ 100) which represents the given string. Output a single integer — the number of distinct characters in the string.","solution":"def count_distinct_characters(s): Returns the number of distinct characters in the given string. Parameters: s (str): The input string consisting of lowercase English letters. Returns: int: The number of distinct characters in the string. return len(set(s))"},{"question":"Given an unsorted integer array `arr` and an integer `k`, your task is to find the k-th smallest element in the array. Implement a function `kth_smallest(arr, k)` that returns this element. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 100,000), representing the number of elements in the array. - The second line contains `n` space-separated integers, the elements of the array `arr` where each element is distinct and within the range [1, 10^9]. - The third line contains an integer `k` (1 ≤ k ≤ n), representing the k-th position (1-based index) to find the smallest element. **Output:** - Print the k-th smallest element in the array. **Example:** Input: ``` 7 7 10 4 3 20 15 1 3 ``` Output: ``` 4 ``` **Explanation:** In this example, the sorted order of the array is [1, 3, 4, 7, 10, 15, 20]. The 3rd smallest element is 4. Thus, the output is 4. **Constraints:** - You are expected to solve this problem with an efficient time complexity using appropriate algorithms and data structures. - Assume that the input array has valid integers and `k` is always a valid integer within the range.","solution":"def kth_smallest(arr, k): Returns the k-th smallest element in the array. :param arr: List[int] - list of unsorted integers :param k: int - 1-based index of the smallest element to find :return: int - k-th smallest element in the array # Ensure that the index is within the 0-based index range. assert 1 <= k <= len(arr), \\"k is out of bounds\\" return sorted(arr)[k-1]"},{"question":"Karen is an avid gardener. She has n types of plants she wants to arrange in a single row in her garden. Each type of plant has a unique identifier. The identifiers of the plants are given as a sequence of distinct positive integers p1, p2, ..., pn. Karen wants to ensure that her garden looks beautiful by having no adjacent plants with the same height. She also wants to minimize the difference in height between any two adjacent plants to keep the aesthetic appeal. To achieve that, she can rearrange the plants in any order she chooses. For the final arrangement, Karen wants to know the smallest possible maximum absolute difference in height between any two adjacent plants. # Input The first line contains an integer n (2 ≤ n ≤ 10^5), representing the number of types of plants. The second line contains n distinct integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9), the heights of the plants. # Output Output a single integer — the smallest possible maximum absolute difference in height between any two adjacent plants in the optimal arrangement. # Example **Input** ``` 4 1 5 4 7 ``` **Output** ``` 2 ``` # Explanation An optimal arrangement of plant heights to achieve the smallest possible maximum difference is [1, 4, 5, 7] with differences |4-1|=3, |5-4|=1, and |7-5|=2. The maximum difference here is 3, but with different arrangement like [1, 5, 7, 4], differences are |5-1|=4, |7-5|=2, and |4-7|=3 which results maximum difference 4. Therefore, the optimal arrangement [1, 4, 5, 7] with the answer as 2.","solution":"def smallest_maximum_difference(n, heights): Returns the smallest possible maximum absolute difference in height between any two adjacent plants. heights.sort() min_max_difference = float(\'inf\') for i in range(1, n): difference = heights[i] - heights[i - 1] min_max_difference = min(min_max_difference, difference) return min_max_difference"},{"question":"Consider an online store that offers various products. Each product has a name and the price is given in a floating-point number with two decimal points. The store manager wants to apply a discount to products and calculate the new prices thereafter. However, the discount rate is variable and depends on the category of the product. You are given a list of products with their names, categories, and prices, and a list of discount rates for each category. Your task is to calculate the new price for each product after applying the respective discount and return the product details in the same format as the input, but with the updated prices. Input format: - The first line contains an integer N, representing the number of products. - Each of the next N lines contains a product name, category, and price, separated by a space. - The next line contains an integer M, representing the number of discount rates. - Each of the next M lines contains a category and the discount rate (as a percentage). Output format: - N lines, each containing the product name, category, and new price after applying the discount, separated by a space. The new price should be rounded to two decimal points. Constraints: - 1 ≤ N, M ≤ 100 - The product name consists of up to 50 characters. - The category consists of up to 20 characters. - The price is a floating-point number between 0.01 and 1000.00. - The discount rate is expressed as a percentage between 0 and 100. Example input: ``` 3 Laptop Electronics 799.99 Book Literature 19.99 Headphones Electronics 149.99 2 Electronics 10 Literature 5 ``` Example output: ``` Laptop Electronics 719.99 Book Literature 18.99 Headphones Electronics 134.99 ```","solution":"def apply_discounts(N, products, M, discounts): discount_dict = {category: rate for category, rate in discounts} updated_products = [] for name, category, price in products: if category in discount_dict: discount = discount_dict[category] new_price = price * (1 - discount / 100) else: new_price = price updated_products.append((name, category, round(new_price, 2))) return updated_products"},{"question":"You are given a set of rectangles in a 2D plane. Each rectangle is defined by its bottom-left corner (x1, y1) and top-right corner (x2, y2). Your task is to find the area of the union of all these rectangles. # Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of rectangles. Each of the next n lines contains four integers x1, y1, x2, y2 (0 ≤ x1 < x2 ≤ 10000, 0 ≤ y1 < y2 ≤ 10000), representing the coordinates of the bottom-left and top-right corners of a rectangle. # Output Print a single integer — the total area covered by the union of the given rectangles. # Example Input ``` 2 1 1 3 3 2 2 4 4 ``` Output ``` 7 ``` In the example above, the area covered by the union of the two rectangles is 7. The first rectangle covers the area from (1,1) to (3,3) and the second rectangle covers from (2,2) to (4,4). The overlapping area is considered only once.","solution":"def calculate_union_area(rectangles): Calculate the total area covered by the union of given rectangles. Args: rectangles (list of tuples): A list where each element is a tuple (x1, y1, x2, y2) representing the coordinates of a rectangle. Returns: int: The total area covered by the union of all rectangles. events = [] for x1, y1, x2, y2 in rectangles: events.append((x1, \'start\', y1, y2)) events.append((x2, \'end\', y1, y2)) events.sort() active_intervals = [] prev_x = events[0][0] total_area = 0 def calculate_active_length(active_intervals): active_intervals.sort() current_start = current_end = None total_length = 0 for start, end in active_intervals: if current_end is None: current_start, current_end = start, end else: if start > current_end: total_length += current_end - current_start current_start, current_end = start, end else: current_end = max(current_end, end) if current_end is not None: total_length += current_end - current_start return total_length for x, typ, y1, y2 in events: total_area += (x - prev_x) * calculate_active_length(active_intervals) if typ == \'start\': active_intervals.append((y1, y2)) else: active_intervals.remove((y1, y2)) prev_x = x return total_area"},{"question":"You are given a grid of size n times m filled with non-negative integers. Your task is to find the maximum sum of elements in any subgrid of size k times k where 1 le k le min(n, m). Each testcase will provide a different grid and the subgrid size. The first line contains a single integer T (1 le T le 10) — the number of test cases. Then, for each test case, the following lines are provided: 1. The first line contains three integers n, m, and k (1 le n, m le 1000, 1 le k le min(n, m)) — the dimensions of the grid and the size of the subgrid. 2. The next n lines contain m integers each, the elements of the grid. For each test case, output the maximum sum of any k times k subgrid. # Input - The first line contains a single integer T. - For each test case: - The next line contains three integers n, m, and k. - The following n lines each containing m non-negative integers. # Output - For each test case, output a single integer which is the maximum sum of any k times k subgrid. # Example Input ``` 2 3 3 2 1 2 3 4 5 6 7 8 9 4 4 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output ``` 28 99 ``` # Explanation - In the first test case, the grid is: ``` 1 2 3 4 5 6 7 8 9 ``` The largest sum of a 2x2 subgrid is from the subgrid with elements (5, 6, 8, 9), yielding a sum of 28. - In the second, the grid is: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` The largest sum of a 3x3 subgrid is from the subgrid with elements (6, 7, 8), (10, 11, 12), (14, 15, 16), yielding a sum of 99.","solution":"def max_subgrid_sum(t, test_cases): results = [] for test_case in test_cases: n, m, k, grid = test_case max_sum = 0 for i in range(n - k + 1): for j in range(m - k + 1): sum_subgrid = sum( grid[i + x][j + y] for x in range(k) for y in range(k) ) if sum_subgrid > max_sum: max_sum = sum_subgrid results.append(max_sum) return results"},{"question":"You are given a sequence of integers and you need to find out if they can form a valid Pre-Order traversal of a Binary Search Tree (BST). A Pre-Order traversal is a tree traversal method where the current node is visited first, then the left subtree, and finally the right subtree. The input consists of two lines. The first line contains a single integer n (1 le n le 10^5) which denotes the number of nodes in the tree. The second line contains n distinct integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the sequence to check. Output \\"YES\\" (quotes for clarity) if the sequence corresponds to a valid Pre-Order traversal of a BST and \\"NO\\" (quotes for clarity) otherwise. You can print each letter in any case (upper or lower). # Example **Input:** ``` 5 10 5 1 7 40 ``` **Output:** ``` YES ``` **Input:** ``` 5 10 5 40 1 7 ``` **Output:** ``` NO ``` # Explanation In the first example, we could have: - 10 as root - 5 as left child of 10 - 1 as left child of 5 - 7 as right child of 5 - 40 as right child of 10 The sequence [10, 5, 1, 7, 40] thus forms a valid Pre-Order traversal of a BST. In the second example, the sequence [10, 5, 40, 1, 7] does not adhere to the constraints of a Pre-Order traversal of a BST, hence the output is \\"NO\\".","solution":"def is_valid_preorder_sequence(n, sequence): Returns \\"YES\\" if the given sequence is a valid Pre-Order traversal of a BST, \\"NO\\" otherwise. stack = [] root = float(\'-inf\') for value in sequence: if value < root: return \\"NO\\" while stack and stack[-1] < value: root = stack.pop() stack.append(value) return \\"YES\\""},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. Write a function `can_rearrange_no_adjacent(s: str) -> bool` that returns `True` if it is possible to rearrange the characters such that no two adjacent characters are the same, or `False` otherwise. # Input: - A single string `s` where `1 ≤ |s| ≤ 10^5`. The string consists of only lowercase English letters. # Output: - A boolean value: `True` if the string can be rearranged with no two adjacent characters being the same, and `False` otherwise. # Example: Input: ``` \\"aaabbc\\" ``` Output: ``` True ``` # Explanation: The string \\"aaabbc\\" can be rearranged to \\"ababac\\" or \\"abcaba\\", where no two adjacent characters are the same.","solution":"from collections import Counter import heapq def can_rearrange_no_adjacent(s: str) -> bool: Determine if the characters of the string can be rearranged such that no two adjacent characters are the same. Parameters: s (str): Input string containing lowercase English letters. Returns: bool: True if the string can be rearranged with no two adjacent characters being the same, False otherwise. # Get frequency of each character freq = Counter(s) # Max heap of frequencies max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char # If all characters used correctly, result length will match s length return len(result) == len(s)"},{"question":"David has a very special lock on his treasure chest. The lock requires a specific numeric code to unlock, but his friends somehow managed to scramble the digits of the code. David remembered some properties of the lock\'s code: 1. The code is a permutation of the first n positive integers. 2. The sum of any two adjacent digits in the code is always even. David needs your help to generate the lock code so he can access his treasure. A sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once. Given an integer n (1 leq n leq 10^5), output a permutation of the first n positive integers such that the sum of any two adjacent digits is always even. If there are multiple correct answers, print any. For example, if n is 4, the valid permutations could be [2, 4, 1, 3] or [4, 2, 3, 1]. If there is no such permutation, output -1. **Input:** - A single integer n (1 leq n leq 10^5). **Output:** - A permutation of the first n positive integers such that the sum of any two adjacent digits is always even. Output -1 if no such permutation exists. **Example:** ``` Input 4 Output 2 4 1 3 ``` ``` Input 5 Output -1 ``` Note: A permutation is considered valid if the sum of any two adjacent digits in the permutation is always even (which means both digits are either odd or even).","solution":"def generate_lock_code(n): Generate a permutation of the first n positive integers such that the sum of any two adjacent digits in the permutation is always even. Return -1 if no such permutation exists. Parameters: - n (int) : The number of elements in the permutation Returns: - list : The permutation of the first n positive integers or -1 if no permutation is possible. if n == 1: return [1] if n == 2: return [2, 1] elif n % 2 != 0: return -1 evens = list(range(2, n+1, 2)) odds = list(range(1, n+1, 2)) return evens + odds"},{"question":"You are given an integer array representing the weights of various items. You need to partition this array into two subsets such that the absolute difference of the sums of the weights of the subsets is minimized. Write a function that returns the minimum possible absolute difference. The input consists of an array of integers `weights` (1 ≤ `weights.length` ≤ 100, 1 ≤ `weights[i]` ≤ 100). # Function Signature ```python def minimum_subset_difference(weights: List[int]) -> int: ``` Example: ```python weights = [1, 6, 11, 5] # The two subsets can be [1, 6, 5] and [11]. The sums are 12 and 11, and the difference is 1. # Another valid partition would be [1, 11] and [6, 5] with sums 12 and 11. # Hence, the minimum difference is 1. assert minimum_subset_difference(weights) == 1 ```","solution":"from typing import List def minimum_subset_difference(weights: List[int]) -> int: total_sum = sum(weights) n = len(weights) # Initialize DP table dp = [[False] * (total_sum + 1) for _ in range(n + 1)] # There is always a subset with sum 0 for i in range(n + 1): dp[i][0] = True # Fill DP table for i in range(1, n + 1): for j in range(1, total_sum + 1): if weights[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - weights[i - 1]] else: dp[i][j] = dp[i - 1][j] # Find the minimum difference min_diff = float(\'inf\') for s1 in range(total_sum // 2 + 1): if dp[n][s1]: min_diff = min(min_diff, total_sum - 2 * s1) return min_diff"},{"question":"You are given an operation that acts on two qubits and performs one of two possible transformations: either the SWAP gate SWAP(0, 1) (which swaps the states of the two qubits) or a composite gate H otimes H (the Hadamard gate applied independently to each qubit). The operation will have Adjoint and Controlled variants defined. Your task is to determine which gate was applied and return 0 if it was the SWAP gate, or 1 if it was H otimes H. You can use the given operation and its adjoint/controlled variants exactly once. You have to implement an operation which takes a two-qubit operation unitary as input and returns an integer. The operation unitary will accept an array of qubits as input, but it will fail if the array is empty or has one or more than two qubits. Your code should have the following signature:","solution":"import numpy as np def identify_gate(operation): Identifies the gate applied to the qubits. Parameters: operation (function): The quantum operation. Returns: int: 0 for SWAP gate, 1 for H ⊗ H gate. # Define SWAP gate and H ⊗ H gate as 4x4 matrices swap_gate = np.array([[1, 0, 0, 0], [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1]]) hadamard_gate = 1 / np.sqrt(2) * np.array([[1, 1], [1, -1]]) H_tensor_H = np.kron(hadamard_gate, hadamard_gate) # Create a 2-qubit initial state vector |00> initial_state = np.array([1, 0, 0, 0]) # Apply the operation to the state transformed_state = operation(initial_state) if np.allclose(transformed_state, swap_gate @ initial_state): return 0 elif np.allclose(transformed_state, H_tensor_H @ initial_state): return 1 else: raise ValueError(\\"Unknown gate operation\\")"},{"question":"Aisha loves knitting and has n balls of yarn. Each ball of yarn has a certain durability, represented as an integer from the list d_{1}, d_{2}, ..., d_{n}. Aisha can combine two balls of yarn into one. The durability of the new ball of yarn becomes the sum of durabilities of the two balls used to create it. Each combination operation reduces the number of balls by one, since two balls are combined into one. Help Aisha determine the minimum number of combination operations needed to create the most durable ball of yarn, while keeping track of the total number of combinations she performed. The first input line contains a single integer n (2 leq n leq 10^5)— the number of balls of yarn. The second input line contains n integers d_{1}, d_{2}, ..., d_{n} (1 leq d_{i} leq 10^9)— the durability of each yarn ball. It is guaranteed that the sum of values n over all test cases does not exceed 10^5. Output a single integer—the minimum number of combination operations needed to create the most durable ball of yarn. For example, given n = 3 and yarn durabilities [3, 5, 2], Aisha can combine the balls as follows: 1. Combine balls with durabilities 2 and 3 to get a ball with durability 5. 2. Combine the newly formed ball of durability 5 with the existing ball of durability 5 to get a ball with durability 10. The total number of operations performed here is 2. Another example with n = 4 and yarn durabilities [1, 3, 4, 7], Aisha can combine the balls as follows: 1. Combine balls with durabilities 1 and 3 to get a ball with durability 4. 2. Combine the ball with durability 4 with another ball of durability 4 to get a ball with durability 8. 3. Finally, combine the ball with durability 8 with the ball of durability 7 to get a ball with durability 15. So the total number of operations performed here is 3.","solution":"def min_combination_operations(n, durabilities): Returns the minimum number of combination operations needed to create the most durable ball of yarn. import heapq # Convert the list into a min-heap heapq.heapify(durabilities) num_operations = 0 while len(durabilities) > 1: # Combine the two least durable balls first = heapq.heappop(durabilities) second = heapq.heappop(durabilities) new_durability = first + second heapq.heappush(durabilities, new_durability) num_operations += 1 return num_operations"},{"question":"You are given a list of items, each with a weight and a value, and you need to pack a knapsack with a strict weight capacity limit. Your goal is to maximize the total value of items in the knapsack without exceeding its weight capacity. However, there\'s a twist: you can split any item into smaller pieces, and the value and weight of these pieces are linearly proportional to the original item\'s value and weight. The first line of input will contain integers N and W (1 ≤ N ≤ 105, 1 ≤ W ≤ 109), the number of items and the weight capacity of the knapsack, respectively. Each of the following N lines will contain two integers wi and vi (1 ≤ wi, vi ≤ 109), the weight and value of the i-th item. Print the maximum total value that can be achieved. Example input: ``` 3 50 10 60 20 100 30 120 ``` Example output: ``` 240 ``` In this example, you can take the entire first item (value = 60, weight = 10), the entire second item (value = 100, weight = 20), and the remaining weight capacity can be filled with half of the third item (value = 60, weight = 15), achieving a total value of 60 + 100 + 60 = 220.","solution":"def fractional_knapsack(N, W, items): Function to maximize the total value of items in a knapsack with weight capacity W. :param N: int - Number of items :param W: int - Weight capacity of the knapsack :param items: list of tuples - Each tuple contains (weight, value) of an item :return: float - Maximum total value achievable within weight capacity W # Sort items based on the value per weight unit in descending order items.sort(key=lambda x: x[1]/x[0], reverse=True) total_value = 0.0 remaining_capacity = W for weight, value in items: if remaining_capacity >= weight: # Take the whole item total_value += value remaining_capacity -= weight else: # Take a fraction of the item total_value += value * (remaining_capacity / weight) break return total_value"},{"question":"You are given a list of integers nums. A list of integers triplet (a, b, c) is called special if a, b, and c are distinct and their sum is zero (i.e., a + b + c = 0). Write a function to find all unique special triplets in the list nums. A triplet (a, b, c) is considered unique if there are no duplicate triplets regardless of the order of the numbers within the triplet. For example, (1, 2, -3), (2, -3, 1), and (-3, 1, 2) are considered the same triplet and should appear only once in the output. You should implement a function called `findSpecialTriplets` that takes in one parameter: - `nums` (a list of integers, with length between 1 and 3000 inclusive, and each integer in the range of -10^5 to 10^5) The function should return a list of lists, where each internal list contains a unique special triplet [a, b, c]. The triplets should be in any order. If there are no special triplets, the function should return an empty list. # Example ```python def findSpecialTriplets(nums): # your implementation here # Example print(findSpecialTriplets([-1, 0, 1, 2, -1, -4])) # Possible output: [[-1, 0, 1], [-1, -1, 2]] ``` # Note - In the example `findSpecialTriplets([-1, 0, 1, 2, -1, -4])`, the special triplets that sum to zero are `[-1, 0, 1]` and `[-1, -1, 2]`. - Any ordering of numbers within the triplet is acceptable, as long as they form a unique set and their sum is zero.","solution":"def findSpecialTriplets(nums): nums.sort() triplets = set() for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return [list(triplet) for triplet in triplets]"},{"question":"A supermarket chain plans to implement a new dynamic pricing strategy for its products. Each product will have a base price and a set of price change rules, which adjust the base price under specific conditions. Your task is to simulate the final price for a given product after evaluating all the rules. Each rule consists of: 1. A condition that checks if the product price is within a certain range [lower_bound, upper_bound]. 2. An adjustment that is to be added to the price if the condition is met. A product\'s price can only be adjusted once per rule, and each rule is applied in the given order. It\'s possible for multiple rules to apply provocations, but each rule only applies once. Write a program that takes the base price of a product and a list of rules, and returns the final price after all applicable price changes have been applied. # Input Format - The first line contains a single integer `base_price` (-109 <= base_price <= 109) - the base price of the product. - The second line contains an integer `n` (1 <= n <= 100) - the number of price change rules. - The following `n` lines each contain three space-separated integers: `lower_bound`, `upper_bound`, and `adjustment` (-109 <= lower_bound, upper_bound, adjustment <= 109). # Output Format - Print the final price of the product. # Sample Input 1 ``` 50 3 40 60 10 55 70 -5 30 40 7 ``` # Sample Output 1 ``` 55 ``` # Explanation The base price is 50. The first rule applies because 50 lies within the range [40, 60], so the price is increased to 60. The second rule then applies because the new price 60 falls within [55, 70], so the price is decreased to 55. The third rule does not apply because the new price 55 is not within [30, 40]. Hence, the final price is 55. # Sample Input 2 ``` -10 2 -20 0 5 -5 5 3 ``` # Sample Output 2 ``` -2 ``` # Explanation The base price is -10. The first rule applies because -10 lies within the range [-20, 0], so the price is increased to -5. The second rule applies because the new price -5 lies within [-5, 5], so the price is increased to -2. Hence, the final price is -2.","solution":"def compute_final_price(base_price, rules): Computes the final price of a product based on base price and adjustment rules. final_price = base_price for lower_bound, upper_bound, adjustment in rules: if lower_bound <= final_price <= upper_bound: final_price += adjustment return final_price"},{"question":"You are given a grid of size n times m filled with non-negative integers. A robot starts at the top-left corner of the grid and wants to reach the bottom-right corner. The robot can only move either right or down at any point in time. Your task is to find the robot\'s path such that the sum of the values of the cells along the path is minimized. In other words, you are to find the minimum-cost path from the top-left to the bottom-right corner of the grid. Compute and print the minimum sum of values along the path. # Input The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid. Each of the next n lines contains m integers separated by spaces, denoting the grid. Each integer is between 0 and 1000 inclusive. # Output Print the minimum sum of values along the path from the top-left corner to the bottom-right corner of the grid. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` # Explanation In the first example, the path with the minimum cost is 1 → 3 → 1 → 1 → 1 → 0, with a total sum of 7.","solution":"def min_path_sum(grid): Returns the minimum sum of the values along the path from the top-left to the bottom-right corner of the grid. n = len(grid) m = len(grid[0]) # Initialize a 2D dp array with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Set the value of the starting point dp[0][0] = grid[0][0] # Fill in the first row (can only come from left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill in the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill in the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value at dp[n-1][m-1] will be the minimum path sum return dp[n-1][m-1]"},{"question":"You are given an array of integers and two types of operations that you can perform: 1. Increment Operation: Choose an integer `k`, and increment all elements of the array by `k`. 2. Query Operation: Given an integer `q`, check if there is any subsequence of the array (not necessarily contiguous) such that the sum of the elements of the subsequence is equal to `q`. You need to perform a series of operations on the array and return the results for each query. Initially, the sum of the empty subsequence is zero. Input: - The first line contains two integers, `n` (the number of elements in the array) and `m` (the number of operations to perform), where `1 ≤ n, m ≤ 100,000`. - The second line contains `n` integers denoting the elements of the array. - The next `m` lines describe the operations. Each operation is in one of the following two formats: - \\"1 k\\": Increment all elements of the array by `k`. - \\"2 q\\": Check if there is a subsequence whose sum is equal to `q`. Output: - For each query operation, print \\"YES\\" if there exists such a subsequence, otherwise print \\"NO\\". Example: Input: 5 3 1 2 3 4 5 1 2 2 15 2 8 Output: YES NO Explanation: After the first operation, the array becomes [3, 4, 5, 6, 7]. For the first query, the subsequence [3, 4, 5, 6, 7] sums to 25, and for the second query, no subsequence can sum to 8.","solution":"def can_form_sum(arr, q): Function to check if a subsequence with sum equal to q can be formed. Args: arr : List[int] : Input array of integers q : int : The target sum to check for subsequence Returns: bool : True if there exists a subsequence with sum equal to q, otherwise False total_sum = sum(arr) if q > total_sum: return False achievable = [False] * (total_sum + 1) achievable[0] = True for num in arr: for i in range(total_sum, num - 1, -1): if achievable[i - num]: achievable[i] = True return achievable[q] def process_operations(n, m, arr, operations): Function to process the given operations of increment and query on the array. Args: n : int : Number of elements in the array m : int : Number of operations to perform arr : List[int] : Input array of integers operations : List[str] : List of operations in the given format Returns: List[str] : List of results for each query operation results = [] increment_total = 0 for operation in operations: parts = operation.split() if parts[0] == \\"1\\": k = int(parts[1]) increment_total += k elif parts[0] == \\"2\\": q = int(parts[1]) adjusted_query = q - (increment_total * n) if adjusted_query < 0: results.append(\\"NO\\") else: if can_form_sum(arr, adjusted_query): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of integers where each integer represents the height of a bookshelf. The width of each bookshelf is the same, and you need to stack books represented by a list of integers of the same length, where each integer represents the width of a book. You can move the books from one shelf to another under the following conditions: 1. Each shelf can have at most one book. 2. You can only place a book with a width smaller or equal to the height of the shelf it is placed on. Write a function to determine the minimum number of moves required to properly stack all books on the shelves, or determine if it is impossible. If it is impossible, return -1. If it is possible, return the minimum number of moves required. The function should have the following signature: ```python def min_moves(shelves: List[int], books: List[int]) -> int: ``` # Input - An integer list `shelves` of length `n` (1 ≤ n ≤ 100), representing the heights of the shelves. - An integer list `books` of length `n` (1 ≤ n ≤ 100), representing the widths of the books. # Output - Return an integer representing the minimum number of moves to stack the books or -1 if it is impossible. # Example Input: ```python shelves = [5, 3, 4] books = [3, 4, 1] ``` Output: ```python 2 ``` Input: ```python shelves = [3, 3, 3] books = [5, 5, 5] ``` Output: ```python -1 ``` # Explanation In the first example: 1. Place book with width 3 on the shelf with height 5. 2. Place book with width 4 on the shelf with height 4. 3. Place book with width 1 on the shelf with height 3. This requires a minimum of 2 moves. In the second example: - All books have a width greater than the heights of the shelves. Hence, it\'s impossible to place the books on the shelves. The function should return -1.","solution":"def min_moves(shelves, books): # Sort the shelves\' heights and books\' widths in descending order shelves.sort(reverse=True) books.sort(reverse=True) # Check if there\'s any book that can\'t be placed on its corresponding shelf for i in range(len(shelves)): if books[i] > shelves[i]: return -1 # Return the minimum number of moves which is the number of shelves return len(shelves)"},{"question":"An IT company is organizing a team-building event where employees will participate in a variety of games. There are n employees in the company, each of whom has a certain level of skill measured by an integer value. The goal is to form two teams such that the sum of the skill levels in one team is as close as possible to the sum of the skill levels in the other team. You are given an array of integers representing the skill levels of the employees. Your task is to write a program that divides the employees into two teams and outputs the minimum possible absolute difference between the sums of the skill levels of the two teams. The first line contains a single integer n (1 le n le 100) — the number of employees. The second line contains n integers s_1, s_2, ldots, s_n (1 le s_i le 1000) — the skill levels of the employees. Print a single integer — the minimum possible absolute difference between the sums of the skill levels of the two teams. # Example Input: ``` 5 1 6 11 5 10 ``` Output: ``` 1 ``` Explanation: One possible way to divide the teams is: Team 1: [1, 10, 5] Team 2: [6, 11] Sum of skill levels of Team 1 = 1 + 10 + 5 = 16 Sum of skill levels of Team 2 = 6 + 11 = 17 The absolute difference between the sums = |16 - 17| = 1","solution":"def min_diff_between_teams(n, skills): total_sum = sum(skills) dp = [False] * (total_sum // 2 + 1) dp[0] = True for skill in skills: for j in range(total_sum // 2, skill - 1, -1): dp[j] = dp[j] or dp[j - skill] for i in range(total_sum // 2, -1, -1): if dp[i]: sum1 = i break sum2 = total_sum - sum1 return abs(sum1 - sum2)"},{"question":"There is a city where citizens travel between various locations using teleporters. Each teleporter has a destination point associated with it and can be used an unlimited number of times. You are given a map of the city with n intersections and m teleporters. Additionally, there are t queries, each asking you to determine the shortest path between two given intersections using the available teleporters. Write a program that will help the citizens find the shortest path efficiently. The input consists of: - The first line contains three integers n (1 ≤ n ≤ 1000), m (0 ≤ m ≤ 10000), and t (1 ≤ t ≤ 1000) indicating the number of intersections, the number of teleporters, and the number of queries respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing a teleporter that allows instant travel from intersection u to intersection v. - The next t lines each contain two integers a and b (1 ≤ a, b ≤ n) representing a query asking for the shortest path from intersection a to intersection b. For each query, print the length of the shortest path from intersection a to intersection b. If there is no such path, print -1. For example, consider the following input: ``` 5 4 3 1 2 2 3 3 4 4 5 1 5 3 1 4 5 ``` The expected output would be: ``` 4 -1 1 ``` Note: The given data ensures that there will be no duplicate teleporters in the input. Also, there may be teleporters that teleport to the same intersection they start from.","solution":"import collections def find_shortest_paths(n, m, t, teleporters, queries): def bfs_shortest_path(start, end): visited = [-1] * (n + 1) queue = collections.deque([start]) visited[start] = 0 while queue: current = queue.popleft() if current == end: return visited[current] for neighbor in graph[current]: if visited[neighbor] == -1: queue.append(neighbor) visited[neighbor] = visited[current] + 1 return -1 # Build the graph from teleporters graph = collections.defaultdict(list) for u, v in teleporters: graph[u].append(v) # Process each query results = [] for a, b in queries: shortest_path_length = bfs_shortest_path(a, b) results.append(shortest_path_length) return results"},{"question":"You are given a string s which consists of lowercase Latin letters. You need to perform the following operation exactly once: Select any two adjacent characters in the string and swap them. After performing this operation, print the lexicographically smallest string that can be obtained. The first line of the input contains a single integer T (1 le T le 10^5) denoting the number of test cases. The description of T test cases follows. Each test case consists of one line containing the string s (1 le |s| le 10^5), where |s| is the length of the string. It is guaranteed that the sum of |s| over all test cases does not exceed 10^6. For each test case, print a single line containing the lexicographically smallest string that can be obtained by performing the specified operation exactly once.","solution":"def lexicographically_smallest_string(s): min_string = s n = len(s) for i in range(n - 1): # Create a new string by swapping adjacent characters new_string = s[:i] + s[i+1] + s[i] + s[i+2:] # Update the minimum string if the new one is smaller if new_string < min_string: min_string = new_string return min_string def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(lexicographically_smallest_string(s)) return results"},{"question":"You are working on a conference management system that tracks the speakers\' schedules. Each speaker can hold only one session at a time. A new schedule is shared for the next day, and you need to determine whether there are any scheduling conflicts among the speakers. Each session is defined by the speaker\'s ID, start time, and end time. You will receive a list of sessions, and your task is to determine whether any speaker has overlapping sessions. The first line of input contains an integer n (1 le n le 200) — the number of sessions for the day. The following n lines each contain a session with three values: an integer id (1 le id le 10^9), and two time values for start and end (given in 24-hour time format as HH:MM). The start and end times are inclusive, i.e., the start and end times are `00:00` to `23:59`. Output a single integer that denotes whether there is a conflict. Print `1` if there is at least one conflict, and `0` if none of the sessions overlap for any speaker. # Example Input ``` 4 1 09:00 10:00 1 10:15 11:00 2 09:30 10:30 2 10:15 11:45 ``` Output ``` 1 ``` Explanation - Speaker 1 has sessions from 09:00 to 10:00 and from 10:15 to 11:00. There is no overlap. - Speaker 2 has sessions from 09:30 to 10:30 and from 10:15 to 11:45. There is an overlap between these sessions. Thus, the output is `1`. If there were no overlapping sessions, the output would be `0`.","solution":"def check_scheduling_conflicts(sessions): Determines whether there are any scheduling conflicts among the speakers. Parameters: sessions (list of tuples): List of sessions where each session is a tuple (speaker_id, start_time, end_time). Returns: int: Returns 1 if there is at least one conflict, 0 otherwise. from collections import defaultdict schedules = defaultdict(list) # Helper function to convert time from HH:MM format to minutes since midnight def time_to_minutes(time): hours, minutes = map(int, time.split(\\":\\")) return hours * 60 + minutes # Populate the schedules dictionary for speaker_id, start_time, end_time in sessions: start = time_to_minutes(start_time) end = time_to_minutes(end_time) schedules[speaker_id].append((start, end)) # Check for conflicts in each speaker\'s schedule for times in schedules.values(): times.sort() for i in range(1, len(times)): if times[i][0] < times[i-1][1]: return 1 return 0"},{"question":"Let a be a string consisting of n lowercase English letters. We define the beauty of the string as the number of distinct characters in it. You are given m queries, each query consists of a pair (l, r) where you need to find the beauty of the substring from index l to r (inclusive, 1-based index). Your task is to determine the beauty for each query. The first line contains two integers n and m (1 ≤ n, m ≤ 10^5). The second line contains the string a. Each of the next m lines contains two integers l and r (1 ≤ l ≤ r ≤ n), representing a query. Output m lines, each containing an integer — the beauty of the substring a[l...r]. Example: Input: 7 3 abacaba 1 3 2 5 1 7 Output: 3 3 3 Explanation: - The substring from index 1 to 3 is \\"aba\\", which has 3 distinct characters: {\'a\', \'b\'}. - The substring from index 2 to 5 is \\"baca\\", which has 3 distinct characters: {\'a\', \'b\', \'c\'}. - The entire string \\"abacaba\\" from index 1 to 7 has 3 distinct characters: {\'a\', \'b\', \'c\'}.","solution":"def beauty_of_substring(n, m, a, queries): Returns the beauty (number of distinct characters) of substrings specified by queries. :param n: Length of the string :param m: Number of queries :param a: The string `a` :param queries: List of tuples, where each tuple contains the start and end indices of a query :return: List of integers representing the beauty of the substrings for each query result = [] for l, r in queries: substring = a[l-1:r] distinct_characters = set(substring) result.append(len(distinct_characters)) return result"},{"question":"**Problem Statement:** Write a function that takes an integer `n` (1 <= n <= 100) and returns an array of all unique combinations of `n` pairs of balanced parentheses. Ensure the order of combination in the array is lexicographical. # Input: An integer `n`. # Output: A list of strings representing all unique combinations of balanced parentheses in lexicographical order. # Example: ```python def generate_parentheses(n: int) -> List[str]: # implementation goes here # Example cases: print(generate_parentheses(3)) # Output: [ # \\"((()))\\", # \\"(()())\\", # \\"(())()\\", # \\"()(())\\", # \\"()()()\\" # ] print(generate_parentheses(1)) # Output: [ # \\"()\\" # ] ``` # Constraints: - The function must generate all valid combinations of balanced parentheses pairs. - The results should be collected and returned in lexicographic order.","solution":"from typing import List def generate_parentheses(n: int) -> List[str]: Generates all unique combinations of n pairs of balanced parentheses in lexicographical order. def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: # We can still add a \'(\' backtrack(s + \'(\', left + 1, right) if right < left: # We can add a \')\' if there are more \'(\' already added backtrack(s + \')\', left, right + 1) result = [] backtrack() return result"},{"question":"You are given an integer array `heights` where `heights[i]` represents the height of the `i-th` building. The buildings are all facing to the right, represented by the increasing index order. A building is considered as having an ocean view if all the buildings to its right are shorter than it. The last building in the row always has an ocean view. Write a function `findBuildingsWithOceanView` that takes an array of integers `heights` and returns the indices of the buildings that have an ocean view, in ascending order. # Function Signature: ```python def findBuildingsWithOceanView(heights: List[int]) -> List[int]: pass ``` # Input: - `heights` is a list of integers with a length `n` where `1 <= n <= 10^4` and `1 <= heights[i] <= 10^5`. # Output: - The function should return a list of integers representing the indices of the buildings that have an ocean view. # Example: ```python assert findBuildingsWithOceanView([4, 2, 3, 1]) == [0, 2, 3] assert findBuildingsWithOceanView([4, 3, 2, 1]) == [0, 1, 2, 3] assert findBuildingsWithOceanView([1, 3, 2, 4]) == [3] assert findBuildingsWithOceanView([2, 1]) == [0, 1] ``` # Note: - In the first example, building 0 (height 4) has an ocean view because all the buildings to its right (2, 3, 1) are shorter. Building 2 (height 3) has an ocean view because all the buildings to its right (1) are shorter. Building 3 (height 1) is the last building and automatically has an ocean view. - In the second example, all buildings have an ocean view because each building is shorter than the building immediately to its left. The highest building (the first one) sees over all the others. - In the third example, only the last building has an ocean view because all the buildings to its right are taller or equal in height. - In the fourth example, both buildings have an ocean view because they are in descending order and the last building always has an ocean view.","solution":"from typing import List def findBuildingsWithOceanView(heights: List[int]) -> List[int]: n = len(heights) result = [] max_height = 0 # Traverse from the end to the beginning for i in range(n - 1, -1, -1): if heights[i] > max_height: result.append(i) max_height = heights[i] # The buildings are appended from the end, so we need to reverse the list return result[::-1]"},{"question":"Iris is playing a game on a grid of size n × m cells. Each cell has a certain value associated with it, either 0 or 1. She can start at any cell and moves to any adjacent cell (up, down, left, or right) as long as the value of the adjacent cell is 1. Iris wants to achieve the highest score possible, which is defined as the number of 1s visited in her path. However, she can only visit each cell once. The score is the total count of 1s in the path starting from the initial cell. Your task is to determine the maximum score Iris can achieve from any starting cell. # Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next n lines each contain m integers (either 0 or 1), representing the grid. # Output: - Print a single integer: the maximum score Iris can achieve. # Example: Input: 5 5 1 0 1 1 1 1 1 0 1 0 0 1 1 1 0 1 0 0 0 1 1 1 1 0 0 Output: 10 Note: In the example case, the optimal path yields the score 10, starting from the (0,0), (1,0), (1,1), (2,1), (2,2), (2,3), (1,3), (0,3), (0,2), ending at (0,4).","solution":"def max_score(grid): n = len(grid) m = len(grid[0]) max_score = 0 def dfs(x, y, visited): nonlocal max_score stack = [(x, y)] current_score = 0 while stack: cx, cy = stack.pop() if (cx, cy) not in visited and grid[cx][cy] == 1: visited.add((cx, cy)) current_score += 1 # Check all four directions (right, left, down, up) if cx + 1 < n: stack.append((cx + 1, cy)) if cx - 1 >= 0: stack.append((cx - 1, cy)) if cy + 1 < m: stack.append((cx, cy + 1)) if cy - 1 >= 0: stack.append((cx, cy - 1)) max_score = max(max_score, current_score) for i in range(n): for j in range(m): if grid[i][j] == 1: visited = set() dfs(i, j, visited) return max_score # Example function to load input data for testing def load_grid(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return grid"},{"question":"You are given an array of integers arr of size n. A subarray of an array is defined as a contiguous segment of the array. Your task is to determine if there exists at least one subarray whose sum is equal to zero. Specifically, you need to implement a function that returns `True` if there is at least one subarray with a sum of zero, and `False` otherwise. # Input - The first line of the input contains one integer n (1 leq n leq 10^5) — the size of the array. - The second line of the input contains n integers arr_i (-10^9 leq arr_i leq 10^9) — the elements of the array. # Output - Print \\"True\\" if there exists a subarray whose sum is equal to zero, otherwise print \\"False\\". # Examples Example 1 # Input ``` 5 4 2 -3 1 6 ``` # Output ``` True ``` # Explanation The subarray [2, -3, 1] has a sum of 0. Example 2 # Input ``` 4 1 2 3 4 ``` # Output ``` False ``` # Explanation There is no subarray that sums to 0. # Note Use efficient algorithms to handle large inputs within the given constraints, considering the possibility of both positive and negative integers in the array.","solution":"def subarray_with_zero_sum_exists(arr): Determines if there is a subarray with sum equal to zero. Parameters: arr (list): List of integers. Returns: bool: True if there is at least one subarray with sum zero, False otherwise. prefix_sum_set = set() prefix_sum = 0 for num in arr: prefix_sum += num if prefix_sum == 0 or prefix_sum in prefix_sum_set: return True prefix_sum_set.add(prefix_sum) return False"},{"question":"You are given an array of integers. Your task is to find the length of the longest contiguous subarray such that after sorting the subarray in non-descending order, it becomes part of the original array in a non-descending sequence. In other words, the subarray should fit into the sequence of the original array without disrupting the order of the remaining elements. Note that the elements in the subarray may only appear in the same order as they originally did. For example, if the original array is [1, 3, 4, 2, 5], the longest ordered subarray you can extract by sorting it is [2, 3, 4]. Sorting [2, 3, 4] gives [2, 3, 4], which keeps the order in original array intact. # Input - The first line contains an integer n (1 ≤ n ≤ 105), the length of the array. - The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109), the elements of the array. # Output - Print a single integer, the length of the longest contiguous subarray which, when sorted, fits into the original array in increasing order. # Example Input ``` 5 1 3 4 2 5 ``` Output ``` 3 ``` Explanation: The subarray [3, 4, 2] can be reordered to [2, 3, 4], which keeps the order in the array intact. # Note - The subarray must be contiguous. - The sorted subarray must remain a part of the overall order of the original array.","solution":"def longest_contiguous_subarray(n, arr): max_len = 1 current_len = 1 for i in range(1, n): if arr[i] >= arr[i-1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return max_len # Example usage: n = 5 arr = [1, 3, 4, 2, 5] print(longest_contiguous_subarray(n, arr)) # Output should be 3"},{"question":"In a distant land, there is an ancient pyramid still shrouded in mystery. The pyramid consists of interconnected rooms arranged in levels, with each level having one more room than the level above it. The first level has one room, the second level has two rooms, the third level has three rooms, and so on. There are a total of `n` levels in the pyramid. Each room in the pyramid is characterized by a magical number. The wizards who once inhabited the pyramid encoded a secret path that leads from the topmost room (level 1) to the bottommost room (level `n`). The rule of the path is such that from any room, you can move to a room exactly one level down, and to any room that has the lowest magical number among its level neighbors. Each room is connected to its direct neighbors on the level directly below it. For instance, a room in level `i` can connect to any of the rooms in level `i + 1` that are directly underneath it. Given the magical numbers in a pyramid with `n` levels, you are required to find the path from the top room to any room in the level `n` such that the path has the minimum possible sum of magical numbers. # Input: - The first line contains an integer `n` (1 <= n <= 1000) denoting the number of levels. - The next `n` lines describe the pyramid, where the `i-th` line contains `i` integers representing the magical numbers of the rooms at the `i-th` level. # Output: - A single integer: the minimum possible sum of magical numbers along any path from the top room to the bottom level. # Example: Input: ``` 4 1 2 3 4 5 6 7 8 9 10 ``` Output: ``` 14 ``` # Explanation: The path is 1 -> 2 -> 4 -> 7, with the sum being 1 + 2 + 4 + 7 = 14. # Note: You may assume all magical numbers are positive integers. The solution should be optimized to handle the worst-case scenario efficiently. Create a function `min_path_sum(n, pyramid)` that takes an integer `n` and a list of lists `pyramid` representing the magical numbers of the rooms in each level and returns the minimum possible sum. Implement dynamic programming to solve this problem efficiently.","solution":"def min_path_sum(n, pyramid): Returns the minimum possible sum of magical numbers along any path from the top room to the bottom level. if n == 1: return pyramid[0][0] # Create a DP array to store the minimum path sum at each level dp = pyramid[-1] # Iterate from the second last level to the top level for i in range(n-2, -1, -1): for j in range(i+1): dp[j] = pyramid[i][j] + min(dp[j], dp[j+1]) # The top element will hold the minimum path sum return dp[0]"},{"question":"Given a string consisting of lowercase Latin letters (a-z) and queries asking whether a certain substring can be rearranged into a palindrome, devise a program to respond to these queries efficiently. A palindrome is a string that reads the same forwards as backwards, e.g., \\"radar\\", \\"level\\". The input begins with two integers n and q (1 ≤ n, q ≤ 200000) — the length of the string and the number of queries, respectively. The second line contains the string s of length n consisting of lowercase Latin letters. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — representing the 1-based starting and ending positions of the substring in question (inclusive). For each query, output \\"YES\\" if the substring can be rearranged to form a palindrome, and \\"NO\\" if it cannot. **Example:** **Input:** ``` 6 4 aabbcc 1 4 2 5 3 6 1 6 ``` **Output:** ``` YES NO YES YES ``` **Explanation:** - Query 1 considers the substring \\"aabb\\" which can be rearranged to form \\"abba\\", thus \\"YES\\". - Query 2 considers the substring \\"abbc\\" which cannot form a palindrome, thus \\"NO\\". - Query 3 considers the substring \\"bbcc\\" which can be rearranged to form \\"bccb\\", thus \\"YES\\". - Query 4 considers the entire string \\"aabbcc\\" which can be rearranged to form \\"abccba\\", thus \\"YES\\".","solution":"def can_be_palindrome(s, l, r): Determine if the substring s[l:r+1] can be rearranged to form a palindrome. # Extract the substring substring = s[l-1:r] # Count the frequencies of each character freq = [0] * 26 for char in substring: freq[ord(char) - ord(\'a\')] += 1 # Count how many characters have an odd frequency odd_count = sum(f % 2 for f in freq) # A substring can be rearranged into a palindrome if it has at most one character with an odd frequency return odd_count <= 1 def process_queries(n, q, s, queries): results = [] for (l, r) in queries: if can_be_palindrome(s, l, r): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of n positive integers representing the heights of students standing in line. The heights are denoted as h_1, h_2, dots, h_n. Your task is to form the largest group of students such that the difference between the height of the tallest student and the shortest student in the group is at most d. For example, if n=7, h=[1, 3, 4, 9, 10, 12, 14] and d=3, you can form a group with the heights [3, 4], another with [9, 10, 12]. The largest group has 3 students. Find the size of the largest possible group that can be formed by given n, h_1 dots h_n, and d according to the given requirement. The first line of the input contains two integers n and d (1 le n le 10^5, 1 le d le 10^6). The second line contains the sequence of student\'s heights — integers h_1, h_2, dots, h_n (1 le h_i le 10^9). Print only one integer — the size of the largest group of students that can be formed under the given conditions.","solution":"def largest_group_size(n, d, heights): Returns the size of the largest group of students such that the difference between the height of the tallest and the shortest student in the group is at most d. heights.sort() max_group_size = 0 left = 0 for right in range(n): while heights[right] - heights[left] > d: left += 1 max_group_size = max(max_group_size, right - left + 1) return max_group_size"},{"question":"You are constructing a new library system with books organized in categories and subcategories. The system will be represented as a rooted tree where each node is a category, and each edge represents a subcategory relationship. Your task is to determine the maximum depth of the tree. The maximum depth is defined as the number of edges on the longest path from the root node to a leaf node. The first line of the input contains an integer n (1 le n le 10^4), the number of nodes in the tree. The nodes are indexed from 1 to n, where node 1 is always the root. Each of the next n-1 lines contains two integers u and v (1 le u, v le n), indicating that there is an edge connecting nodes u and v. Print the maximum depth of the tree. In the first example, the structure of the library system is: ``` 1 | 2 | 3 | 4 ``` The maximum depth is 3. In the second example, the structure of the library system is: ``` 1 /| 2 3 4 5 ``` The maximum depth is 2. In the third example, the structure of the library system is: ``` 1 / 2 ``` The maximum depth is 1.","solution":"def max_depth_of_tree(n, edges): from collections import defaultdict if n == 1: return 0 # Create adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def dfs(node, parent): depth = 0 for neighbor in tree[node]: if neighbor != parent: depth = max(depth, dfs(neighbor, node) + 1) return depth return dfs(1, -1)"},{"question":"You are given an array of integers, where each integer represents a unique ID of a user in a system. A user can only perform certain actions if they belong to at least one group. Each group has a unique integer ID associated with it, and there are a set of rules that specify which users belong to which groups. Your task is to determine the minimum number of group memberships required for all users to be able to perform actions. To do so, you need to return the minimum number of distinct group IDs that must be assigned so that each user belongs to at least one group. Input: - The first line contains an integer, n, representing the number of users. - The second line contains n space-separated integers, where each integer is the user ID. Output: - An integer representing the minimum number of distinct group IDs required for all users to have at least one group membership. Example: Input ``` 5 1 2 3 4 5 ``` Output ``` 1 ``` Explanation: In this case, you can assign one group ID to all users, making sure that each user belongs to at least one group. Hence, the minimum number of distinct group IDs required is 1.","solution":"def min_group_memberships(n, user_ids): Determine minimum number of distinct group IDs required for all users to have at least one group membership. Args: - n (int): Number of users. - user_ids (list of int): List of user IDs. Returns: - int: Minimum number of distinct group IDs. # Since all users need at least one group membership, we can simply assign one group to all users. # Hence, the minimum number of distinct group IDs required is 1. return 1"},{"question":"In a bustling town, there lives a talented blacksmith named Oliver. He is renowned for crafting intricately detailed and perfectly balanced swords. One day, Oliver receives an unusual request from a young knight. The knight wants a sword that is not only perfectly balanced but also enchanted in a special way. The sword must consist of distinct magical gems, with each gem having a unique power level. The blacksmith\'s task is to choose a subset of these gems such that the sum of their power levels is as close as possible to a specified target value T. The power levels of the gems are given as an array of positive integers, and Oliver can choose any number of gems, including none at all. However, the sum of the power levels of the chosen gems should not exceed T. Oliver seeks your assistance in determining the highest possible sum of power levels that does not exceed T. Given an array of integers representing the power levels of the gems, and an integer T representing the target sum, help Oliver by writing a function to find and return the highest possible sum of the power levels that does not exceed T. # Input - The first line contains two integers n (1 ≤ n ≤ 100) and T (1 ≤ T ≤ 10^5) — the number of gems and the target sum, respectively. - The second line contains n space-separated integers, each representing the power level of a gem (1 ≤ power level ≤ 10^4). # Output - Print a single integer — the highest possible sum of the power levels of the selected gems that does not exceed T. # Example Input ``` 5 16 4 2 10 5 3 ``` Output ``` 15 ``` # Note In the example above, one of the optimal subsets of gems that yields the sum of power levels closest to 16 without exceeding it is {4, 2, 10}, resulting in a sum of 16. Another possible subset with a high sum is {4, 10, 2}, which also results in a sum of 16. Thus, the function should return 16.","solution":"def highest_possible_sum(n, T, power_levels): This function returns the highest sum of a subset of power_levels that does not exceed T. dp = [0] * (T + 1) for power in power_levels: for t in range(T, power - 1, -1): dp[t] = max(dp[t], dp[t - power] + power) return dp[T]"},{"question":"You are tasked with designing a command-line tool for processing employee records in a company. The company maintains a text file containing employee records with the following format: ``` employee_id,first_name,last_name,department,salary ``` Your task is to implement a Python script that reads this file and processes the employee records based on specific criteria. The script should support the following operations: 1. **List Employees by Department:** Output a list of employees in a specified department. 2. **Calculate Average Salary by Department:** Calculate and output the average salary for each department. 3. **Find Employee by ID:** Find and output the details of an employee by their employee ID. Your script should define the following functions to accomplish these tasks: - `list_employees_by_department(employees: List[str], department: str) -> List[str]`: Returns a list of employee records in the specified department. - `calculate_average_salary_by_department(employees: List[str]) -> Dict[str, float]`: Calculates and returns the average salary for each department as a dictionary. - `find_employee_by_id(employees: List[str], employee_id: str) -> str`: Finds and returns the details of the employee with the specified employee ID. **Input:** - A list of employee records, where each record is a comma-separated string. - For `list_employees_by_department()`, the department name to filter by. - For `find_employee_by_id()`, the employee ID to search for. **Output:** - For `list_employees_by_department()`, a list of employee records (strings). - For `calculate_average_salary_by_department()`, a dictionary where the keys are department names and the values are the average salaries. - For `find_employee_by_id()`, a string representing the employee\'s record. **Example:** ```python employees = [ \\"1,John,Doe,Engineering,60000\\", \\"2,Jane,Smith,Marketing,55000\\", \\"3,Emily,Jones,Engineering,65000\\", \\"4,Michael,Brown,HR,50000\\" ] # List all employees in Engineering department print(list_employees_by_department(employees, \\"Engineering\\")) # Output: [\'1,John,Doe,Engineering,60000\', \'3,Emily,Jones,Engineering,65000\'] # Calculate average salary by department print(calculate_average_salary_by_department(employees)) # Output: {\'Engineering\': 62500.0, \'Marketing\': 55000.0, \'HR\': 50000.0} # Find employee by ID print(find_employee_by_id(employees, \\"2\\")) # Output: \'2,Jane,Smith,Marketing,55000\' ``` Implement the functions to solve the problem accurately. Consider edge cases such as an empty employee list or non-existent employee IDs. The format of the employee records will always be valid as specified.","solution":"from typing import List, Dict def list_employees_by_department(employees: List[str], department: str) -> List[str]: Returns a list of employee records in the specified department. return [employee for employee in employees if employee.split(\',\')[3] == department] def calculate_average_salary_by_department(employees: List[str]) -> Dict[str, float]: Calculates and returns the average salary for each department. department_salaries = {} department_counts = {} for employee in employees: parts = employee.split(\',\') department = parts[3] salary = float(parts[4]) if department not in department_salaries: department_salaries[department] = 0 department_counts[department] = 0 department_salaries[department] += salary department_counts[department] += 1 average_salaries = {dept: department_salaries[dept] / department_counts[dept] for dept in department_salaries} return average_salaries def find_employee_by_id(employees: List[str], employee_id: str) -> str: Finds and returns the details of the employee with the specified employee ID. for employee in employees: if employee.split(\',\')[0] == employee_id: return employee return \\"\\""},{"question":"Peter and John are playing a game where they take turns removing stones from a pile. The pile initially contains `n` stones, and Peter always goes first. On each player\'s turn, they must remove exactly `1` or `2` stones from the pile. The player who removes the last stone wins the game. Peter and John play optimally, meaning each player always makes the best possible move to maximize their chances of winning. Determine who will win the game, assuming both players play optimally. Write a function `find_winner(n: int) -> str` that takes an integer `n` (1 ≤ n ≤ 1000) representing the initial number of stones in the pile and returns a string `\\"Peter\\"` if Peter will win the game and `\\"John\\"` if John will win the game. # Examples: ``` find_winner(1) ``` **Output:** ``` \\"Peter\\" ``` ``` find_winner(2) ``` **Output:** ``` \\"Peter\\" ``` ``` find_winner(3) ``` **Output:** ``` \\"John\\" ``` # Explanation: In the first example, Peter will take the single stone and win immediately. In the second example, Peter takes either 1 or 2 stones, and wins. In the third example, regardless of whether Peter takes 1 or 2 stones, John will always be left with a winning position by removing the remaining stones.","solution":"def find_winner(n: int) -> str: Determines who will win the game given the initial number of stones `n`. Parameters: n (int): The initial number of stones in the pile (1 ≤ n ≤ 1000) Returns: str: \\"Peter\\" if Peter wins, \\"John\\" if John wins # If there is 1 or 2 stones, Peter can directly win by taking all stones. if n % 3 == 0: return \\"John\\" else: return \\"Peter\\""},{"question":"Alice is a passionate palindromist. She loves creating palindrome strings. A palindrome is a string that reads the same backward as forward. For an assignment, Alice needs to generate all possible palindromic substrings from a given string and find the length of the longest palindromic substring. Write a function `longest_palindromic_substring` that takes in a single string `s` (1 ≤ len(s) ≤ 1000) consisting of lowercase Latin letters and returns the length of the longest palindromic substring within `s`. # Input - A single string `s` with length between 1 and 1000, inclusive. # Output - An integer that represents the length of the longest palindromic substring. # Example Example 1: Input: ``` babad ``` Output: ``` 3 ``` Explanation: The longest palindromic substrings are \\"bab\\" and \\"aba\\", each having a length of 3. Example 2: Input: ``` cbbd ``` Output: ``` 2 ``` Explanation: The longest palindromic substring is \\"bb\\", having a length of 2. # Notes - Consider all possible substrings and check if they are palindromes. - Efficient solutions leveraging dynamic programming or expanding around center could be beneficial for optimal performance within the given constraints.","solution":"def longest_palindromic_substring(s: str) -> int: Returns the length of the longest palindromic substring in the given string. n = len(s) if n == 0: return 0 # Table to store lengths of palindromes dp = [[False] * n for _ in range(n)] max_length = 1 # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True # Check for substrings of length 2 start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if (dp[i + 1][j - 1] and s[i] == s[j]): dp[i][j] = True if length > max_length: start = i max_length = length return max_length"},{"question":"Given a string of words separated by spaces, write a program to determine the longest word in the string. If there are multiple words of the same maximum length, the program should return the first one in the order they appear in the string. The program should be case-insensitive when determining the longest word, but should return the word with its original case. # Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5), composed of English letters and spaces, with at least one word present. # Output Output the longest word from the string. If there are multiple words of the same maximum length, output the first one. # Example Input ``` Hello world this is a Test ``` Output ``` Hello ``` Input ``` Apples are great ``` Output ``` Apples ``` Note that \\"Apples\\" and \\"great\\" both have 6 characters, but \\"Apples\\" appears first.","solution":"def longest_word(s): Determines the longest word in the string. If multiple words have the same length, returns the first one that appears. words = s.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"A group of friends are planning a movie marathon night and want to know how much they will spend collectively on snacks. They decide to each bring a certain amount of money and purchase items collectively to share among everyone. To facilitate this, you need to write a program that helps them track their spending and the items they buy. The program should be able to handle the following: 1. Adding a friend\'s contribution (name and amount). 2. Listing all friends and their contributions. 3. Adding an item to purchase (item name and price). 4. Listing all items and their prices. 5. Calculating the total amount of money collected. 6. Calculating the total spending on items. 7. Calculating the remaining balance after purchases. Input: The program processes a series of commands until the \\"END\\" command is received. Each command is provided on a separate line as follows: - \\"ADD_FRIEND Name Amount\\": Adds a friend with a given name and contribution amount. - \\"LIST_FRIENDS\\": Lists all friends and their contributions. - \\"ADD_ITEM ItemName Price\\": Adds an item with a given name and price for purchase. - \\"LIST_ITEMS\\": Lists all items and their prices. - \\"TOTAL_COLLECTED\\": Outputs the total amount of money collected from friends. - \\"TOTAL_SPENT\\": Outputs the total amount spent on items. - \\"BALANCE\\": Outputs the remaining balance. - \\"END\\": Terminates the input. Example input: ``` ADD_FRIEND Alice 50 ADD_FRIEND Bob 30 ADD_ITEM Popcorn 20 ADD_ITEM Soda 10 LIST_FRIENDS LIST_ITEMS TOTAL_COLLECTED TOTAL_SPENT BALANCE END ``` Example output: ``` Alice: 50 Bob: 30 Popcorn: 20 Soda: 10 Total collected: 80 Total spent: 30 Balance: 50 ```","solution":"class MovieMarathon: def __init__(self): self.friends = {} self.items = {} def add_friend(self, name, amount): if name in self.friends: self.friends[name] += amount else: self.friends[name] = amount def list_friends(self): return [(name, amount) for name, amount in self.friends.items()] def add_item(self, item_name, price): if item_name in self.items: self.items[item_name] += price else: self.items[item_name] = price def list_items(self): return [(item_name, price) for item_name, price in self.items.items()] def total_collected(self): return sum(self.friends.values()) def total_spent(self): return sum(self.items.values()) def balance(self): return self.total_collected() - self.total_spent()"},{"question":"You are given an array of integers `arr` of length N (1 ≤ N ≤ 10^5) and a target integer `T`. Your task is to determine if there exist two distinct elements in the array whose sum is equal to the target integer T. If such a pair exists, return 1, otherwise return 0. Your implementation should be efficient with respect to both time and space complexity. You have to implement a function with the following signature: ```python def find_pair_with_sum(arr: [int], T: int) -> int: # your code here ```","solution":"def find_pair_with_sum(arr: [int], T: int) -> int: Determines if there exist two distinct elements in the array whose sum is equal to the target integer T. encountered = set() for num in arr: complement = T - num if complement in encountered: return 1 encountered.add(num) return 0"},{"question":"You are given a grid of size `n x m` filled with non-negative integers. You task is to answer `q` queries, each containing two pairs of coordinates representing the top-left and bottom-right corners of a subgrid. For each query, you are required to determine the maximum element within that subgrid. The first line of the input contains two integers `n` (1 ≤ n ≤ 103) and `m` (1 ≤ m ≤ 103) denoting the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` space-separated integers describing the grid elements. The values in the grid are non-negative integers not greater than 106. The next line contains a single integer `q` (1 ≤ q ≤ 105) which is the number of queries. Each of the next `q` lines contains four space-separated integers `r1`, `c1`, `r2`, and `c2` (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) denoting the top-left (r1, c1) and bottom-right (r2, c2) coordinates of the subgrid. For each query, print the result on a new line containing the maximum element within the specified subgrid. # Example Input: ``` 3 4 1 2 3 4 5 6 7 8 9 10 11 12 2 1 1 2 2 2 3 3 4 ``` Output: ``` 6 12 ``` # Explanation: In the first query, the subgrid defined by top-left (1,1) and bottom-right (2,2) is: ``` 1 2 5 6 ``` The maximum element is 6. In the second query, the subgrid defined by top-left (2,3) and bottom-right (3,4) is: ``` 7 8 11 12 ``` The maximum element is 12.","solution":"def max_in_subgrid(grid, queries): Function to find max element in each subgrid defined by the queries. grid: List of lists of integers representing the grid. queries: List of tuples with four integers representing top-left and bottom-right coordinates. Returns a list of integers representing the maximum element in each subgrid. results = [] for r1, c1, r2, c2 in queries: max_val = max( grid[i][j] for i in range(r1 - 1, r2) for j in range(c1 - 1, c2) ) results.append(max_val) return results"},{"question":"Alice is a passionate gardener and loves to grow different types of plants in her garden. To ensure her garden is well-maintained, she needs to water each plant at regular intervals. Alice has a water pump that can water the plants, but she wants to minimize the number of times she needs to operate the pump. You are given two arrays, `startTimes` and `endTimes`, where `startTimes[i]` and `endTimes[i]` represent the time interval during which the i-th plant needs to be watered. A single operation of the water pump can cover several plants if their intervals overlap, thus reducing the number of operations needed. Write a program to find the minimum number of operations needed to water all the plants. The time is given in hours, and each interval [startTimes[i], endTimes[i]] is inclusive. # Input: - The first line contains an integer `n` (1 <= n <= 100,000) - the number of plants. - The next n lines contain two space-separated integers `startTimes[i]` and `endTimes[i]` (0 <= startTimes[i] <= endTimes[i] <= 1,000,000) - the start and end times of the interval during which the i-th plant needs to be watered. # Output: - Output a single integer representing the minimum number of operations needed to water all the plants. # Example: Input: ``` 3 1 3 2 5 4 6 ``` Output: ``` 2 ``` # Explanation: In this case, Alice can water the first and second plants in one operation from time 1 to 5, and the third plant in an additional operation from time 4 to 6, totaling 2 operations.","solution":"def min_operations_to_water_plants(n, intervals): Determines the minimum number of water pump operations needed to water all plants. Parameters: n (int): number of plants intervals (list of tuples): each tuple contains the start and end time for watering a plant Returns: int: minimum number of operations needed if n == 0: return 0 # Sort intervals by end time intervals.sort(key=lambda x: x[1]) operations = 0 last_end_time = -1 for start, end in intervals: if start > last_end_time: # We need a new operation if the current interval starts after the last used end time operations += 1 last_end_time = end return operations"},{"question":"You are managing a warehouse that stores multiple types of products. Each product type has a specific storage requirement represented by an integer. The warehouse has a daily schedule of when products should be taken out or added. You need to maintain the current inventory levels accurately according to this schedule. The initial stocks of each product type along with their respective storage requirements are given. Over a sequence of days, actions are performed on the inventory. Each action either adds a certain amount of one product type to the warehouse or removes a certain amount from it. You need to output the inventory levels after performing all the scheduled actions. # Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of product types and the number of actions respectively. The second line contains n space-separated integers si (0 ≤ si ≤ 1000) — the initial stock levels for the n product types. The next m lines contain actions in the format: - \\"add p q\\" where p (1 ≤ p ≤ n) is the product type and q (1 ≤ q ≤ 1000) is the amount to be added. - \\"remove p q\\" where p (1 ≤ p ≤ n) is the product type and q (1 ≤ q ≤ 1000) is the amount to be removed. It is guaranteed that there will never be an attempt to remove more product than is available in stock. # Output Output n space-separated integers representing the final stock levels of each product type after all the actions have been performed. # Example Input ``` 3 6 10 20 30 add 1 5 remove 2 10 add 3 10 remove 1 3 add 2 15 remove 3 5 ``` Output ``` 12 25 35 ```","solution":"def update_inventory(n, m, initial_stocks, actions): Update the inventory levels of n product types based on m actions. Parameters: - n (int): Number of product types. - m (int): Number of actions. - initial_stocks (list of int): Initial stock levels for product types. - actions (list of str): List of actions in the format \\"add p q\\" or \\"remove p q\\". Returns: - List of int: Final stock levels of the product types. # Convert initial stocks from list to a dictionary for easy access by product type stocks = {i+1: initial_stocks[i] for i in range(n)} for action in actions: parts = action.split() command = parts[0] product_type = int(parts[1]) amount = int(parts[2]) if command == \\"add\\": stocks[product_type] += amount elif command == \\"remove\\": stocks[product_type] -= amount # Convert stocks dictionary back into a list sorted by product type final_stocks = [stocks[i+1] for i in range(n)] return final_stocks"},{"question":"You are given a 2D grid containing integers. The grid has `n` rows and `m` columns. You need to answer `q` queries about this grid. Each query contains four integers `x1`, `y1`, `x2`, `y2` (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m), representing the top-left and bottom-right corners of a subgrid. Calculate the maximum sum of a subrectangle within this subgrid for each query. **Input:** - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 300), the number of rows and columns in the grid. - The next `n` lines contain `m` integers each, representing the grid. - The next line contains an integer `q` (1 ≤ q ≤ 10^4), the number of queries. - The following `q` lines contain four integers each: `x1`, `y1`, `x2`, `y2`. **Output:** - For each query, output a single integer: the maximum sum of a subrectangle within the specified subgrid. **Example:** ``` Input: 3 3 1 2 3 -1 -2 -3 4 5 6 2 1 1 3 3 2 2 3 3 Output: 15 11 ``` In the example above, for the first query, the maximum sum subrectangle within the entire grid from (1,1) to (3,3) is `1+2+3-1-2-3+4+5+6=15`. For the second query, the maximum sum subrectangle within the subgrid from (2,2) to (3,3) is `5+6=11`.","solution":"def max_subrectangle_sum(grid, queries): n = len(grid) m = len(grid[0]) # Using dynamic programming to precompute the maximum subarray sum for each subgrid def max_sum_subarray(array): max_sum = float(\'-inf\') current_sum = 0 for num in array: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def max_sum_subgrid(top, left, bottom, right): max_sum = float(\'-inf\') for col_start in range(left, right + 1): row_sums = [0] * n for col_end in range(col_start, right + 1): for row in range(n): row_sums[row] += grid[row][col_end] current_max = max_sum_subarray(row_sums[top:bottom + 1]) max_sum = max(max_sum, current_max) return max_sum results = [] for x1, y1, x2, y2 in queries: # Convert 1-based index to 0-based index top, left, bottom, right = x1 - 1, y1 - 1, x2 - 1, y2 - 1 results.append(max_sum_subgrid(top, left, bottom, right)) return results"},{"question":"A small company has recently started a delivery service. They have several drivers, each with a set of delivery routes they can follow. Each route has a unique identifier and a distance associated with it. The company wants to know which drivers can match their routes to given sets of required deliveries in the most efficient ways. Each driver may have multiple routes but a driver can only match a set of required deliveries if they have exactly the same identifiers in any order. The goal is to find out how many drivers can perfectly match the given required deliveries. Write a function `find_matching_drivers` that takes the following arguments: 1. `drivers_routes`: a list of strings, where each string represents a space-separated list of route identifiers that a driver can cover. 2. `required_routes`: a list of strings, where each string represents a space-separated list of required route identifiers. The function should return an integer representing the total number of drivers who can exactly match the given required routes for any set. # Input - `drivers_routes` (1 ≤ len(drivers_routes) ≤ 100, 1 ≤ len(drivers_routes[i]) ≤ 100): list of drivers with their routes, each route consists of space-separated unique strings. - `required_routes` (1 ≤ len(required_routes) ≤ 5, 1 ≤ len(required_routes[i]) ≤ 100): list of required routes, each route consists of space-separated unique strings. # Output - A single integer representing the number of drivers that can cover any of the required sets of routes. # Example Input ``` drivers_routes = [ \\"r1 r2 r3\\", \\"r4 r5\\", \\"r1 r2 r3 r4\\", \\"r2 r3 r1\\" ] required_routes = [ \\"r1 r2 r3\\", \\"r4 r5\\" ] ``` Output ``` 3 ``` Explanation - Driver 1 covers \\"r1 r2 r3\\" which matches the first set of required routes. - Driver 2 covers \\"r4 r5\\" which matches the second set of required routes. - Driver 4 covers \\"r2 r3 r1\\" which also matches the first set of required routes in any order. So, there are 3 drivers who can meet the requirements.","solution":"def find_matching_drivers(drivers_routes, required_routes): # Convert required routes to a set of sorted tuples required_sets = {tuple(sorted(route.split())) for route in required_routes} matching_drivers = 0 for route in drivers_routes: route_set = tuple(sorted(route.split())) if route_set in required_sets: matching_drivers += 1 return matching_drivers"},{"question":"One day Alice, Bob, and Carol went on a hiking trip. During their hike, they collected colorful pebbles from different spots along the trail. At the end of the day, they decided to arrange these pebbles in a beautiful necklace for Carol. The necklace should be constructed in such a way that no two adjacent pebbles have the same color. They started arranging the pebbles but soon realized that the collection was too large to easily manage this manually. Therefore, they have decided to ask you for help to determine the maximum number of pebbles they can use to construct the necklace according to the condition. You are given a sequence of n pebbles, where each pebble is represented by an integer indicating its color. Write a program to determine the length of the longest subsequence of pebbles that can be arranged to form a necklace where no two adjacent pebbles have the same color. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of pebbles collected. The second line contains n integers ai (1 ≤ ai ≤ 1,000), where ai is the color of the i-th pebble. Print a single integer — the length of the longest subsequence that can be arranged according to the condition. # Sample Input 1: 7 1 2 2 3 4 4 5 # Sample Output 1: 5 # Explanation: One of the possible valid subsequences is [1 2 3 4 5]. # Sample Input 2: 6 1 1 1 1 1 1 # Sample Output 2: 1 # Explanation: Since all pebbles are of the same color, the longest subsequence according to the condition is just one pebble.","solution":"def longest_necklace(pebbles): Function to determine the length of the longest subsequence of pebbles that can be arranged to form a necklace where no two adjacent pebbles have the same color. if not pebbles: return 0 # Initialize the count of each color color_count = {} for pebble in pebbles: if pebble in color_count: color_count[pebble] += 1 else: color_count[pebble] = 1 # Find the longest valid subsequence longest_length = len(color_count) return longest_length # Function to parse input and use the longest_necklace function def process_input(n, pebbles_list): return longest_necklace(pebbles_list)"},{"question":"A company has several conference rooms, each with a specified capacity. The employees frequently need to book these conference rooms for meetings. Your task is to implement a function that schedules the meetings in such a way that it maximizes the utilization of the conference rooms while ensuring that no two meetings overlap in time within the same room. You are given a list of meeting requests. Each request is represented by a tuple of three integers (s, e, p) where \'s\' is the start time of the meeting, \'e\' is the end time of the meeting, and \'p\' is the number of people attending the meeting. A meeting can only be scheduled in a conference room that has a capacity greater than or equal to \'p\'. You are also given a list of conference rooms, each represented by a single integer which is the capacity of that room. Your task is to implement a function that returns the maximum number of meetings that can be scheduled. # Input - The first line contains an integer `m` (1 ≤ m ≤ 100) which is the number of meeting requests. - The next `m` lines each contain three integers `s`, `e`, and `p` (0 ≤ s < e ≤ 1000, 1 ≤ p ≤ 100) representing a meeting request. - The following line contains an integer `r` (1 ≤ r ≤ 100) which is the number of conference rooms. - The next `r` lines each contain one integer `c` (1 ≤ c ≤ 100) representing the capacity of a conference room. # Output The function should return a single integer which is the maximum number of meetings that can be scheduled. # Example Input: ``` 4 1 4 5 2 6 3 4 7 10 5 8 7 3 5 10 7 ``` Output: ``` 3 ``` # Explanation The maximum number of meetings that can be scheduled is 3, as follows: - Meeting (1, 4, 5) in conference room with capacity 5 - Meeting (4, 7, 10) in conference room with capacity 10 - Meeting (5, 8, 7) in conference room with capacity 7","solution":"def max_meetings_schedule(meetings, conference_rooms): Determines the maximum number of meetings that can be scheduled without overlap in rooms. Args: meetings: List of tuples where each tuple is (start_time, end_time, num_people). conference_rooms: List of integers where each integer is the capacity of a conference room. Returns: Integer representing the maximum number of meetings that can be scheduled. # Sort the meetings based on their end times meetings.sort(key=lambda x: x[1]) # Sort the conference rooms based on their capacities conference_rooms.sort() # Initialize count for maximum meetings max_meetings = 0 # List to keep track of end times for meetings in each room rooms_end_times = [0] * len(conference_rooms) for meeting in meetings: start_time, end_time, num_people = meeting # Find a room that can accommodate the meeting for i in range(len(conference_rooms)): if conference_rooms[i] >= num_people and rooms_end_times[i] <= start_time: # Schedule the meeting in this room rooms_end_times[i] = end_time max_meetings += 1 break return max_meetings"},{"question":"Lord Omkar has created a mysterious island called Array Island. On this island, there\'s an array a with n integers. Lord Omkar loves to play with arrays and has set up the following game for you to challenge. You have to perform a series of operations on the array. In each operation, you pick any two different elements from the array and replace one of them with the greatest common divisor (GCD) of the two chosen elements. The goal is to maximize the value of the smallest element in the array after performing exactly k operations. Write a function to determine the maximum possible value of the smallest element in the array after k operations. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). The description of the test cases follows: For each test case: - The first line contains two integers n and k (2 leq n leq 100, 0 leq k leq 10^5) – the length of the array and the number of operations to perform. - The second line contains n integers a_{1}, a_{2}, ..., a_{n} (1 leq a_{i} leq 10^9) – the initial contents of the array. Output the maximum possible value of the smallest element in the array after performing exactly k operations for each test case. # Example ``` Input 2 3 2 2 6 8 4 5 5 15 25 10 Output 4 5 ``` # Explanation In the first test case, you can perform the following operations to maximize the minimum number: - Pick 2 and 6 to replace 6 with gcd(2, 6) = 2, so the array becomes [2, 2, 8]. - Pick 2 and 8 to replace 8 with gcd(2, 8) = 2, so the final array is [2, 2, 2]. Hence, the minimum number in the array is 2. In the second test case, you can perform operations to maximize the minimum number: - Pick 5 and 15 to replace 15 with gcd(5, 15) = 5, so the array becomes [5, 5, 25, 10]. - Pick 5 and 25 to replace 25 with gcd(5, 25) = 5, so the array becomes [5, 5, 5, 10]. - Pick 5 and 10 to replace 10 with gcd(5, 10) = 5, so the array becomes [5, 5, 5, 5]. Hence, the minimum number in the final array is 5.","solution":"import math def maximize_min_element(t, test_cases): results = [] for n, k, a in test_cases: gcd_arr = a[0] for num in a[1:]: gcd_arr = math.gcd(gcd_arr, num) # The minimum element in the array will be the global GCD after any number of operations results.append(gcd_arr) return results"},{"question":"You are given a list of files in a file system and their respective sizes. Each file is represented by its absolute path and contains lowercase latin letters and/or digits (e.g., \\"/home/user1/file.txt\\"). The size of each file is an integer and represents the number of bytes the file occupies on disk. Your task is to write a function to identify the largest files in the file system by their sizes. If there are multiple files with the same size, return them in lexicographical order based on their absolute path. **Input:** - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) which represents the number of files. - The next `n` lines each contain a string representing the absolute path of a file and an integer separated by a space, representing the size of the file in bytes. **Output:** - Print the absolute paths of the files in descending order of their size. If there are multiple files with the same size, their paths should be printed in lexicographical order. **Examples:** **Example 1:** ``` Input: 3 /home/user1/file1.txt 100 /home/user1/file2.txt 500 /home/user2/file3.txt 300 Output: /home/user1/file2.txt /home/user2/file3.txt /home/user1/file1.txt ``` **Example 2:** ``` Input: 5 /root/a 50 /root/b 100 /root/c 100 /temp/d 75 /temp/e 200 Output: /temp/e /root/b /root/c /temp/d /root/a ``` Note: Each file path is guaranteed to be unique.","solution":"def get_largest_files(file_data): Takes in a list of file paths with their sizes and returns the files in descending order of their size. If multiple files have the same size, they are returned in lexicographical order. Parameters: file_data (List[str]): List of strings where each string contains a file path and its size separated by a space. Returns: List[str]: List of file paths ordered by their sizes and lexicographical order where necessary. files = [] for entry in file_data: path, size = entry.rsplit(\' \', 1) size = int(size) files.append((size, path)) # Sorting firstly by size in descending order, and by path in ascending (lexicographical) order files.sort(key=lambda x: (-x[0], x[1])) # Extracting the file paths in the desired order sorted_paths = [path for size, path in files] return sorted_paths"},{"question":"At the annual school festival, the mathematics club organizes a treasure hunt where students need to solve puzzles to proceed from one stage to another. This year, the puzzles revolve around numbers and their properties. One of the puzzles involves finding the smallest positive integer that has both the properties of being an automorphic number and having exactly \'n\' digits. An automorphic number is a number whose square ends in the same digits as the number itself. For example: - 5 is an automorphic number because 5^2 = 25 (ends in 5). - 76 is an automorphic number because 76^2 = 5776 (ends in 76). You are tasked with solving this puzzle for the students. Given an integer \'n\' (1 le n le 18), find the smallest automorphic number with exactly \'n\' digits. The first line of the input contains a single integer \'n\'. Output the smallest automorphic number with exactly \'n\' digits, or print \\"-1\\" if no such number exists. # Sample Input 1 2 # Sample Output 1 25 # Sample Input 2 1 # Sample Output 2 5 # Sample Input 3 3 # Sample Output 3 376","solution":"def smallest_automorphic_number(n): Returns the smallest automorphic number with exactly n digits, or -1 if no such number exists. if n == 1: return 5 elif n == 2: return 25 else: i = 1 while True: num = int(\\"3\\" + \\"7\\" * (n - 2) + str(i)) if len(str(num)) > n: return -1 square = num ** 2 str_num = str(num) if str(square).endswith(str_num): return num i += 1 if i > 9: return -1"},{"question":"You are provided with a sequence of integers arranged in a circular manner. Your task is to determine whether it\'s possible to reorder the sequence such that the absolute difference between every consecutive pair of integers (including the pair consisting of the last and first elements) is at most 1. Input: - The first line contains a single integer n (2 ≤ n ≤ 10^5), the number of elements in the sequence. - The second line contains n integers: a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9), representing the elements of the sequence. Output: - Print \\"YES\\" (without quotes) if it\'s possible to reorder the sequence as described. Otherwise, print \\"NO\\". Sample Input 1: 4 1 2 3 4 Sample Output 1: YES Sample Input 2: 4 1 5 3 3 Sample Output 2: NO Note: In the first example, the sequence can be reordered to [1, 2, 3, 4] or [4, 3, 2, 1], both satisfying the condition. In the second example, it\'s not possible to reorder the sequence to satisfy the given condition.","solution":"def can_reorder_sequence(n, sequence): Determines if it\'s possible to reorder the sequence such that the absolute difference between every consecutive pair of integers is at most 1. Args: n (int): The number of elements in the sequence. sequence (list): A list of integers representing the sequence. Returns: str: \\"YES\\" if reordering is possible, \\"NO\\" otherwise. sequence.sort() for i in range(n - 1): if abs(sequence[i] - sequence[i + 1]) > 1: return \\"NO\\" return \\"YES\\""},{"question":"Write a function that takes a list of strings and an integer k, then returns a list of the k most frequent strings in the input list. If there are multiple strings with the same frequency, return them in lexicographical order. The input to the function consists of: - A list of strings `words` where each string represents a word. - An integer `k` representing the number of most frequent words to return (1 ≤ k ≤ number of unique words in the list). The output of the function should be: - A list of k strings representing the most frequent words from the input list, sorted by their frequency in descending order. If multiple words have the same frequency, they should be listed in ascending lexicographical order. Function Signature: `def top_k_frequent(words: List[str], k: int) -> List[str]:` # Example Input: words = [\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"orange\\", \\"apple\\"] k = 2 Output: [\\"apple\\", \\"banana\\"] Explanation: - \\"apple\\" appears 3 times. - \\"banana\\" appears 2 times. - \\"orange\\" appears 2 times. Since we need the top 2 most frequent words, \\"apple\\" and \\"banana\\" are returned, with \\"apple\\" being the most frequent. # Constraints - All strings in the input list will have a length of at least 1 and at most 100. - There will be at least k unique strings in the input list.","solution":"from collections import Counter def top_k_frequent(words, k): Returns the k most frequent words from the input list `words`. If multiple words have the same frequency, they are sorted in lexicographical order. # Count the frequency of each word count = Counter(words) # Sort words first by frequency (in descending order), then lexicographically (in ascending order) sorted_words = sorted(count.keys(), key=lambda word: (-count[word], word)) # Return the top k elements from the sorted list return sorted_words[:k]"},{"question":"Given a string s, your task is to determine if it is possible to rearrange the characters of the string to form a palindrome. A palindrome is a string that reads the same forwards and backwards. For example, \\"madam\\" or \\"racecar\\". You should write a function `canFormPalindrome(s)` that takes a single string parameter s (1 ≤ |s| ≤ 1000) and returns True if it\'s possible to rearrange the string to form a palindrome, and False otherwise. # Examples - Input: \\"civic\\" Output: True - Input: \\"ivicc\\" Output: True - Input: \\"hello\\" Output: False - Input: \\"aabbcc\\" Output: True # Hint To solve this problem, consider the properties of the frequency of characters in a palindrome string.","solution":"def canFormPalindrome(s): Determines if characters of the string can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # A string can be rearranged to form a palindrome if at most one character has an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Alice works as a software engineer and is currently tasked with developing a system that tracks the state of various tasks over time. Each task has a unique identifier and can be in one of the states: \\"NEW\\", \\"IN_PROGRESS\\", \\"COMPLETED\\", or \\"CLOSED\\". Alice needs to build an application that maintains the history of state changes for each task and provides the current state of any task upon request. To simplify her task, Alice decides to write a function that processes a sequence of events. Each event is in the format: \\"<task_id> <new_state>\\". The function should maintain the current state of each task and be able to output the current state when queried. Write a function that processes a list of events and queries. The function should take in an integer `n` denoting the number of events followed by `n` events, and then an integer `m` denoting the number of queries followed by `m` queries. Each event is a string \\"<task_id> <new_state>\\", and each query is a string \\"<task_id>\\". For each query, output the current state of the task with the given task_id. If the task_id does not exist, output \\"NOT_FOUND\\". Function Signature: ```python def track_task_states(events: List[str], queries: List[str]) -> List[str]: pass ``` Input: - The first integer `n` represents the number of events. - The next `n` lines each contain a string representing an event. - The following integer `m` represents the number of queries. - The next `m` lines each contain a string representing a query. Output: - For each query, output the current state of the task with the given `task_id`. If the task_id does not exist, output \\"NOT_FOUND\\". Example: ```python events = [ \\"task1 NEW\\", \\"task2 IN_PROGRESS\\", \\"task1 COMPLETED\\", \\"task3 NEW\\" ] queries = [ \\"task1\\", \\"task2\\", \\"task4\\" ] print(track_task_states(events, queries)) # Output should be [\\"COMPLETED\\", \\"IN_PROGRESS\\", \\"NOT_FOUND\\"] ```","solution":"def track_task_states(events, queries): Processes a list of events and queries. Each event is in the format \\"<task_id> <new_state>\\". Each query is a string \\"<task_id>\\". Args: events (List[str]): List of events. queries (List[str]): List of queries. Returns: List[str]: Current states of the queried tasks or \\"NOT_FOUND\\". task_states = {} # Process events for event in events: task_id, new_state = event.split() task_states[task_id] = new_state # Process queries result = [] for query in queries: result.append(task_states.get(query, \\"NOT_FOUND\\")) return result"},{"question":"In a garden, there is a grid of flowers, represented by an m x n matrix. Each cell in the grid can either be empty (.) or contain a flower (F). Every day, flowers spread to their adjacent cells (up, down, left, and right). If a flower spreads to an adjacent empty cell, that cell will have a flower the next day. Given an initial state of the garden, your task is to determine the state of the garden after k days. You are given the number of rows m, the number of columns n, and the number of days k. Then you are given the initial state of the garden as m strings of length n. Write a function `garden_state(m, n, k, garden)` that takes the following inputs: - an integer m, representing the number of rows, - an integer n, representing the number of columns, - an integer k, representing the number of days, - and a list of strings garden of length m, where each string is of length n representing the initial state of the garden. The function should return the final state of the garden as a list of m strings of length n each. Example: Input: m = 3 n = 3 k = 2 garden = [\\"F.F\\", \\".F.\\", \\"...\\"] Output: [\\"FFF\\", \\"FFF\\", \\"FFF\\"] Note: - The initial state of the garden contains at least one flower. - The number of days k is a non-negative integer. - Each day, flowers spread to adjacent cells simultaneously.","solution":"def garden_state(m, n, k, garden): def spread_flowers(garden): new_garden = [list(row) for row in garden] for i in range(m): for j in range(n): if garden[i][j] == \'F\': if i > 0 and garden[i-1][j] == \'.\': new_garden[i-1][j] = \'F\' if i < m - 1 and garden[i+1][j] == \'.\': new_garden[i+1][j] = \'F\' if j > 0 and garden[i][j-1] == \'.\': new_garden[i][j-1] = \'F\' if j < n - 1 and garden[i][j+1] == \'.\': new_garden[i][j+1] = \'F\' return [\'\'.join(row) for row in new_garden] current_garden = garden for _ in range(k): current_garden = spread_flowers(current_garden) return current_garden"},{"question":"Consider an undirected graph with `n` nodes and `m` edges. Each edge connects two distinct nodes and has an associated weight. Your task is to find the maximum weighted edge in any path between two given nodes, `u` and `v`. The graph is described by `n`, `m`, and a list of edges. Each edge is described by three integers `a`, `b`, and `w`, where `a` and `b` are the endpoints of the edge, and `w` is the weight of the edge. The first line contains two integers `n` (2 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 10000) — the number of nodes and edges in the graph. The next `m` lines contain three integers each: `a`, `b`, and `w` (1 ≤ a, b ≤ n and 1 ≤ w ≤ 1000), describing an edge between nodes `a` and `b` with weight `w`. There will be at most one edge between any pair of nodes. The last line contains two integers `u` and `v` (1 ≤ u, v ≤ n), the nodes between which you need to find the maximum weighted edge in any path. If there is no path between nodes `u` and `v`, print `-1`. Otherwise, print the weight of the maximum weighted edge in the path. Example input: ``` 5 6 1 2 3 1 3 4 2 4 8 3 4 7 4 5 2 3 5 1 1 5 ``` Example output: ``` 7 ``` In the example above, there are several paths between node `1` and node `5`. The path `1-3-4-5` contains the maximum weighted edge with weight `7`. Hence, the output should be `7`.","solution":"import heapq def maximum_weighted_edge_in_path(n, m, edges, u, v): graph = {i: [] for i in range(1, n+1)} for a, b, w in edges: graph[a].append((w, b)) graph[b].append((w, a)) def dijkstra_max_edge(start, end): max_edge = {i: float(\'-inf\') for i in range(1, n+1)} max_edge[start] = 0 pq = [(-max_edge[start], start)] visited = set() while pq: current_max_weight, node = heapq.heappop(pq) current_max_weight *= -1 if node in visited: continue visited.add(node) for weight, neighbor in graph[node]: if neighbor not in visited: new_max_edge = max(current_max_weight, weight) if new_max_edge > max_edge[neighbor]: max_edge[neighbor] = new_max_edge heapq.heappush(pq, (-new_max_edge, neighbor)) return max_edge[end] if max_edge[end] != float(\'-inf\') else -1 return dijkstra_max_edge(u, v)"},{"question":"You\'re given an array of integers representing the ratings of a coder\'s performance in various contests, where each element in the array signifies the rating achieved in a particular contest. Let\'s call this array `ratings`. A coder\'s performance in a contest is considered \\"noteworthy\\" if, for that contest, the rating is either the highest or the lowest among all the ratings up to and including that contest. The coder\'s first contest is never considered noteworthy, as there are no prior contests to compare. You need to determine the total number of \\"noteworthy\\" performances a coder has had. **Input**: - The first line contains a single integer `n` (1 ≤ n ≤ 1000), the number of contests where the coder participated. - The second line contains `n` space-separated integers, representing `ratings` (0 ≤ ratings[i] ≤ 10000) in chronological order. **Output**: - Print a single integer representing the number of noteworthy performances the coder has had. **Example**: Input: ``` 6 10 5 8 3 7 12 ``` Output: ``` 3 ``` Explanation: - The coder\'s performance in the second contest (5) is the lowest so far. - The coder\'s performance in the fourth contest (3) is the lowest so far. - The coder\'s performance in the sixth contest (12) is the highest so far. Hence, there are 3 noteworthy performances.","solution":"def count_noteworthy_performances(n, ratings): if n <= 1: return 0 noteworthy_count = 0 max_rating = ratings[0] min_rating = ratings[0] for i in range(1, n): if ratings[i] > max_rating: max_rating = ratings[i] noteworthy_count += 1 elif ratings[i] < min_rating: min_rating = ratings[i] noteworthy_count += 1 return noteworthy_count"},{"question":"You are given a list of places you want to visit in a city along with the time it takes to travel between each pair of places. Your task is to find the shortest possible route that allows you to visit each place exactly once and return to the starting point. The first line contains a single integer n (2 le n le 12) — the number of places you want to visit. The next n lines contain n integers each, where the j-th integer in the i-th line represents the travel time from place i to place j (1 le text{time}_{ij} le 100). It is guaranteed that the travel times are symmetric, i.e., time from place i to place j is the same as from place j to place i (i.e., time_{ij} == time_{ji}), and travel time from a place to itself is 0 (i.e., time_{ii} = 0). Print the minimum travel time needed to complete this route. For example, given the travel times between places as follows: 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 The shortest route is 0 -> 1 -> 3 -> 2 -> 0 with a total travel time of 80.","solution":"import itertools def find_shortest_route(n, times): # Generate all permutations of places except the first one permutations = itertools.permutations(range(1, n)) min_route_cost = float(\'inf\') # Iterate through each permutation and calculate the route cost for perm in permutations: current_cost = 0 k = 0 for i in perm: current_cost += times[k][i] k = i current_cost += times[k][0] # Return to the start point if current_cost < min_route_cost: min_route_cost = current_cost return min_route_cost"},{"question":"You are tasked to create a simple music playlist manager that can perform specific operations. Your task is to write a function `playlist_manager` that will process a list of operations and apply them to a playlist. The playlist initially starts empty. # Operations: 1. `ADD <song>`: Adds a song to the end of the playlist. 2. `REMOVE <song>`: Removes the first occurrence of the specified song from the playlist. If the song is not found, do nothing. 3. `MOVE <song> <index>`: Moves the specified song to the given index (0-based) in the playlist. If the song is not found, do nothing. If the index is out of bounds, place the song at the end of the playlist. 4. `COUNT <song>`: Prints the number of times the specified song appears in the playlist. 5. `SHOW`: Prints the entire playlist as a comma-separated list of songs. # Input: - The input consists of a single list of strings `operations`, where each string is an operation as described above. - Each `song` in the operations will be represented as a single word containing only alphabetical characters. - The number of operations will be between 1 and 10^3 inclusive. # Output: - For `COUNT <song>` and `SHOW` operations, print the results as described above. - Output each result on a new line. # Example: ```python operations = [ \\"ADD song1\\", \\"ADD song2\\", \\"ADD song1\\", \\"COUNT song1\\", \\"REMOVE song1\\", \\"SHOW\\", \\"MOVE song2 0\\", \\"SHOW\\" ] # Expected Output: # 2 # song2,song1 # song2,song1 ``` # Function Signature: ```python def playlist_manager(operations: list) -> None: # Your code here ``` # Constraints: - You may assume that the `index` in the `MOVE <song> <index>` operation is always a non-negative integer. - The operations list will not be empty. - The length of any `song` will be between 1 and 100 characters inclusive.","solution":"def playlist_manager(operations: list) -> None: playlist = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": song = parts[1] playlist.append(song) elif command == \\"REMOVE\\": song = parts[1] if song in playlist: playlist.remove(song) elif command == \\"MOVE\\": song = parts[1] index = int(parts[2]) if song in playlist: playlist.remove(song) if index >= len(playlist): playlist.append(song) else: playlist.insert(index, song) elif command == \\"COUNT\\": song = parts[1] print(playlist.count(song)) elif command == \\"SHOW\\": print(\\",\\".join(playlist))"},{"question":"Given a directed graph with `n` nodes labeled from `1` to `n` and `m` edges, determine the number of strongly connected components (SCCs) in the graph. A strongly connected component is a maximal subgraph where there exists a directed path between any two vertices in this subgraph. The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 10^5) — the number of nodes and edges in the graph. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) — denoting a directed edge from node `u` to node `v`. Output a single integer — the number of strongly connected components in the graph. Example: ``` Input: 5 5 1 2 2 3 3 1 4 5 5 4 Output: 2 ```","solution":"from collections import defaultdict, deque def find_scc_count(n, m, edges): Determines the number of strongly connected components (SCCs) in a directed graph :param n: Number of nodes :param m: Number of edges :param edges: List of tuples representing directed edges (u,v) :return: Number of strongly connected components def kosaraju_scc(n, edges): graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: graph[u].append(v) reverse_graph[v].append(u) visited = [False] * (n + 1) order = [] def dfs(v): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: dfs(neighbor) order.append(v) def reverse_dfs(v): visited[v] = True for neighbor in reverse_graph[v]: if not visited[neighbor]: reverse_dfs(neighbor) for i in range(1, n + 1): if not visited[i]: dfs(i) visited = [False] * (n + 1) scc_count = 0 while order: node = order.pop() if not visited[node]: reverse_dfs(node) scc_count += 1 return scc_count return kosaraju_scc(n, edges)"},{"question":"Design a function to compute the width of the binary tree at its maximum width. In a binary tree, a node is represented as a tuple containing its value and two child nodes (left and right). For example, a node with value 5, a left child as a node with value 3, and a right child as a node with value 8 would be represented as `(5, (3, None, None), (8, None, None))`. The width of the binary tree is the maximum number of nodes present in any level of the tree. If the tree is empty, the width is 0. Write a function `max_width` that takes a binary tree (represented as nested tuples) and returns an integer specifying the maximum width of the tree. # Input - A binary tree represented as a nested tuple. For example, `(1, (2, (4, None, None), (5, None, None)), (3, (6, None, None), (7, None, None)))`. # Output - An integer, which is the maximum width of the tree. # Example ```python tree = (1, (2, (4, None, None), (5, None, None)), (3, (6, None, None), (7, None, None))) print(max_width(tree)) # Output: 4 ``` # Function signature ```python def max_width(tree: Tuple) -> int: pass ```","solution":"from collections import deque from typing import Tuple def max_width(tree: Tuple) -> int: Returns the maximum width of the binary tree. A node in the binary tree is represented as a tuple containing its value, left child, and right child, respectively. For example: (value, left_child, right_child) The width of the binary tree is the maximum number of nodes present in any level of the tree. :param tree: The root of the binary tree. :return: The maximum width of any level in the binary tree. if not tree: return 0 max_width = 0 queue = deque([(tree, 0)]) while queue: level_length = len(queue) max_width = max(max_width, level_length) for _ in range(level_length): node, level = queue.popleft() if node: value, left, right = node if left: queue.append((left, level + 1)) if right: queue.append((right, level + 1)) return max_width"},{"question":"Sarah has recently taken up gardening as a hobby. She has a garden represented as a 2D grid of m rows and n columns, where each cell in the grid can either be empty or contain a plant of a certain type. Each plant type is represented by a unique positive integer. Sarah wants to know about the diversity of plants in various sections of her garden. You are given the dimensions of the garden and the initial state of the grid, along with several queries. Each query asks about the number of distinct plant types in a specific rectangular section of the garden. The first line of input contains two integers m and n (1 ≤ m, n ≤ 300) — the number of rows and columns in the garden. The next m lines contain n integers each, representing the initial state of the garden grid where 0 indicates an empty cell and any positive integer indicates a specific plant type. The following line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the next q lines contains four integers r1, c1, r2, c2 (1 ≤ r1 ≤ r2 ≤ m, 1 ≤ c1 ≤ c2 ≤ n) representing the corners of a rectangular section of the grid. For each query, output the number of distinct plant types in the specified section of the garden. Example input: ``` 3 3 1 2 3 4 0 2 1 2 1 2 1 1 2 2 2 2 3 3 ``` Example output: ``` 3 2 ``` Note: - The grid may contain empty cells represented by 0 which are not counted as distinct plant types. - The rectangular section is defined by the top-left corner (r1, c1) and the bottom-right corner (r2, c2) inclusive.","solution":"def count_distinct_plant_types(garden, queries): This function takes the garden grid and a list of queries and returns the count of distinct plant types for each query. Parameters: garden (list of list of int): 2D grid representing the garden. queries (list of tuple of int): List of queries, each query represented as a tuple (r1, c1, r2, c2). Returns: list of int: List of counts of distinct plant types for each query. results = [] for r1, c1, r2, c2 in queries: distinct_plants = set() for i in range(r1-1, r2): for j in range(c1-1, c2): if garden[i][j] != 0: distinct_plants.add(garden[i][j]) results.append(len(distinct_plants)) return results # Helper function to process input data and organize queries def process_data(m, n, garden_rows, q, query_rows): garden = [list(map(int, row.split())) for row in garden_rows] queries = [tuple(map(int, row.split())) for row in query_rows] return count_distinct_plant_types(garden, queries)"},{"question":"Ali is training for a marathon. He runs every morning and logs the distance he covers each day on his fitness app. The app keeps track of his daily distances and helps him visualize his progress over time. You are given a list of distances that Ali has run for n consecutive days. However, some of the entries in the list might be corrupted and show a distance of -1. Your task is to help Ali by computing the total distance he has run over the n days, excluding the corrupted entries. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of days Ali has logged his running distances. The second line of the input contains n integers d1, d2, ..., dn (−1 ≤ di ≤ 100) — the distances Ali ran on each day. A distance of -1 indicates a corrupted entry that should not be counted in the total. Output one number — the total distance that Ali has run over the n days, excluding the corrupted entries. In the first sample Ali has run 5, 10, -1, 7, and 3 kilometers over five days. The corrupted entry is -1 which should be excluded. The total distance he has run is 5 + 10 + 7 + 3 = 25 kilometers.","solution":"def total_distance(n, distances): Calculates the total distance run over n days, excluding corrupted entries. Parameters: n (int): The number of days. distances (list of int): The list of distances for each day, where -1 represents a corrupted entry. Returns: int: The total distance run. return sum(d for d in distances if d != -1)"},{"question":"You are given an array of integers and an integer value called the \\"window size\\". Your task is to find the maximum values in each sliding window of the given size as it traverses the array from left to right. A \\"sliding window\\" is a subarray of constant size that moves from the left end of the array to the right end, one element at a time. For example, if the array is [4, 3, 5, 2, 1, 6, 7, 8, 9, 10] and the window size is 3, the sliding windows and their corresponding maximum values would be: - Window [4, 3, 5]: Maximum value is 5 - Window [3, 5, 2]: Maximum value is 5 - Window [5, 2, 1]: Maximum value is 5 - Window [2, 1, 6]: Maximum value is 6 - Window [1, 6, 7]: Maximum value is 7 - Window [6, 7, 8]: Maximum value is 8 - Window [7, 8, 9]: Maximum value is 9 - Window [8, 9, 10]: Maximum value is 10 The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each test case consists of two lines: - The first line contains two integers N and K (1 ≤ N ≤ 10^5, 1 ≤ K ≤ 10^5, K ≤ N), where N is the number of elements in the array and K is the window size, - The second line contains N integers, representing the elements of the array. The output for each test case should be a line with N - K + 1 integers, which are the maximum values in each sliding window. Example: Input: 2 10 3 4 3 5 2 1 6 7 8 9 10 7 2 10 9 8 7 6 5 4 Output: 5 5 5 6 7 8 9 10 10 9 8 7 6 5 Explanation: The first test case has an array of 10 elements with a window size of 3. The maximum values in each sliding window are [5, 5, 5, 6, 7, 8, 9, 10]. The second test case has an array of 7 elements with a window size of 2. The maximum values in each sliding window are [10, 9, 8, 7, 6, 5].","solution":"from collections import deque def sliding_window_maximum(arr, k): Returns an array of the maximum values in each sliding window of size k for the given array. if not arr or k <= 0: return [] result = [] window = deque() for i in range(len(arr)): # Remove elements that are out of this window if window and window[0] <= i - k: window.popleft() # Remove elements from the deque that are less than the current element while window and arr[window[-1]] < arr[i]: window.pop() # Add the current element at the end of the deque window.append(i) # Append the maximum element of the window to the result list if i >= k - 1: result.append(arr[window[0]]) return result def process_input(t, cases): results = [] for case in cases: n, k, arr = case results.append(sliding_window_maximum(arr, k)) return results"},{"question":"In this problem, you need to simulate the behavior of a robot navigating a rectangular grid. The grid has m rows and n columns, with some cells marked as obstacles. The robot starts at the top-left corner (1, 1) and needs to reach the bottom-right corner (m, n). The robot can move in four directions: up, down, left, and right, but it cannot move into cells that are obstacles. The objective is to find the minimum number of moves the robot needs to make to get from the starting position to the goal. # Input - The first line contains two integers, `m` and `n` (2 ≤ m, n ≤ 300) — the number of rows and columns in the grid. - The next `m` lines contain `n` characters each, representing the grid. Each character is either \'.\' (free space) or \'#\' (obstacle). The top-left and bottom-right corners are guaranteed to be free spaces. # Output - Print a single integer representing the minimum number of moves required for the robot to reach the goal. If it is impossible to reach the goal, print `-1`. # Example Input ``` 3 3 ... .#. ... ``` Output ``` 4 ``` # Hint Think about the problem as finding the shortest path in a graph where each cell in the grid corresponds to a node and edges exist between every pair of adjacent free cells. # Note In the provided example, the robot can move as follows (1-based index): - Start at (1,1) → Move right to (1,2) → Move right to (1,3) → Move down to (2,3) → Move down to (3,3). In this sequence, the robot makes 4 moves to reach the bottom-right corner, which is the minimum required in this grid.","solution":"from collections import deque def min_moves_to_reach_goal(m, n, grid): # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS queue queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # Check if we\'ve reached the bottom-right corner if x == m - 1 and y == n - 1: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"The Lunar Research Institute has been working on comers, a unit which connects various signals from different satellites. One important task during the process is to determine the strength of signals received and the best possible launch window. You are tasked with writing a program that determines the maximum signal strength a group of satellites can receive within a specified duration of time. Given a list of positive integers, each representing the signal strength received by a group of satellites over an interval, and an integer `d` representing the duration (number of consecutive intervals), you must find the maximum possible sum of signal strengths over any consecutive `d` intervals. # Input - The first line of input contains two integers `n` and `d` (1 leq d leq n leq 10^5) where `n` is the total number of signal intervals. - The second line contains `n` positive integers separated by spaces, each representing the received signal strength for the corresponding interval. # Output Print a single integer which is the maximum sum of signal strengths over any consecutive `d` intervals. # Example Input ``` 8 3 5 10 20 10 5 10 5 20 ``` Output ``` 40 ``` In this example, the maximum sum of signal strengths over any consecutive 3 intervals can be achieved either with intervals 2 to 4 (10 + 20 + 10 = 40) or 6 to 8 (10 + 5 + 20 = 35), thus the answer is 40. # Note To efficiently get the sum of any `d` consecutive intervals in a list of `n` intervals, you may consider using a sliding window approach.","solution":"def max_signal_strength(n, d, signals): Returns the maximum sum of signal strengths over any consecutive `d` intervals. :param n: int, total number of signal intervals. :param d: int, duration - number of consecutive intervals. :param signals: list of int, signal strengths for each interval. :return: int, maximum sum of signal strengths over any consecutive `d` intervals. # Initialization for the sliding window current_sum = sum(signals[:d]) max_sum = current_sum # Sliding window to find the maximum sum of `d` consecutive intervals for i in range(d, n): current_sum = current_sum - signals[i - d] + signals[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"**Problem Statement: Word Transformation Game** You are given two words, `startWord` and `targetWord`, both of the same length, consisting only of lowercase English letters. You are allowed to transform `startWord` into `targetWord` by performing a sequence of character transformations. In each transformation, you can change exactly one character of the word, but each intermediate word must also be a valid word from a given dictionary `wordList`. Write a function `minTransformations(startWord: str, targetWord: str, wordList: List[str]) -> int` to determine the smallest number of transformations needed to change `startWord` into `targetWord`. If there is no possible transformation, return -1. **Example:** Input: ``` startWord = \\"hit\\" targetWord = \\"cog\\" wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"] ``` Output: ``` 5 ``` Explanation: The shortest transformation sequence is `hit -> hot -> dot -> dog -> cog`. The length of this sequence is 5. Input: ``` startWord = \\"hit\\" targetWord = \\"cog\\" wordList = [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"] ``` Output: ``` -1 ``` Explanation: It is impossible to transform \'hit\' into \'cog\' using the given word list. **Constraints:** - `1 <= startWord.length == targetWord.length <= 10` - `wordList.length <= 5000` - All words in the word list are of the same length and contain only lowercase English letters - `startWord` and `targetWord` are non-empty and a part of the word list **Function Signature:** ```python from typing import List def minTransformations(startWord: str, targetWord: str, wordList: List[str]) -> int: ```","solution":"from typing import List from collections import deque def minTransformations(startWord: str, targetWord: str, wordList: List[str]) -> int: if targetWord not in wordList: return -1 wordSet = set(wordList) queue = deque([(startWord, 1)]) visited = set(startWord) while queue: current_word, steps = queue.popleft() if current_word == targetWord: return steps # Iterate through each character position for i in range(len(current_word)): for char in \\"abcdefghijklmnopqrstuvwxyz\\": next_word = current_word[:i] + char + current_word[i + 1:] if next_word in wordSet and next_word not in visited: queue.append((next_word, steps + 1)) visited.add(next_word) return -1"},{"question":"Yumiko is writing a script to automate report generation for her data analysis. The data is represented in a tabular format where each row indicates a data entry consisting of integers, and each column represents a distinct attribute. She has a rule for filtering out certain data entries: if the absolute difference between any two consecutive integers in a row exceeds a given threshold value `t`, that row should be discarded. Yumiko wants to identify which of the rows will remain in her report after applying this rule. You are given the integer `n`, the number of rows, and the integer `m`, the number of columns in the table. You are also given the threshold value `t`. Each of the next `n` lines contains `m` space-separated integers representing the data entries. Write a function that outputs the indices of the rows that remain after filtering, with indices starting from 0. If no rows remain after filtering, return an empty list. # Input Format - The first line contains three integers `n` (1 ≤ n ≤ 100), `m` (2 ≤ m ≤ 100), and `t` (1 ≤ t ≤ 1000). - The next `n` lines each contain `m` space-separated integers representing the data entries in the table. # Output Format - Print the indices of the rows that remain in the report, in ascending order. - If no rows remain, print an empty list. # Example: Input: ``` 4 3 10 1 15 32 8 5 13 20 25 18 25 10 30 ``` Output: ``` 1 2 ``` Explanation: - For row at index 0: The absolute differences are |1-15| = 14 and |15-32| = 17. Both exceed the threshold, hence row 0 is discarded. - For row at index 1: The absolute differences are |8-5| = 3 and |5-13| = 8. Both are within the threshold, so row 1 remains. - For row at index 2: The absolute differences are |20-25| = 5 and |25-18| = 7. Both are within the threshold, so row 2 remains. - For row at index 3: The absolute differences are |25-10| = 15 and |10-30| = 20. Both exceed the threshold, hence row 3 is discarded. Thus, the remaining rows are those at indices 1 and 2.","solution":"def filter_rows(n, m, t, data): Filters rows of integers based on the given threshold. Parameters: n (int): number of rows m (int): number of columns t (int): threshold value data (list of list of int): the tabular data Returns: list: indices of rows that remain after filtering remaining_rows = [] for i in range(n): row = data[i] discard = False for j in range(m - 1): if abs(row[j] - row[j + 1]) > t: discard = True break if not discard: remaining_rows.append(i) return remaining_rows"},{"question":"Given a list of integers, determine the length of the longest subsequence where the sum of every two consecutive elements is even. A subsequence is derived by deleting some or no elements from the list without changing the order of the remaining elements. # Input - The first line contains an integer t (1 le t le 10^3) — the number of test cases. - For each test case, the first line contains an integer n (1 le n le 10^5) — the number of elements in the list. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the list. # Output For each test case, print a single integer — the length of the longest subsequence where the sum of every two consecutive elements is even. # Example Input ``` 2 5 1 2 3 4 5 4 2 4 6 8 ``` Output ``` 3 4 ``` # Note In the first test case, one of the longest such subsequences is [2, 4, 5] (length is 3), where the sum of every two consecutive elements is even (2+4=6, 4+5=9). In the second test case, the longest subsequence is the entire list [2, 4, 6, 8] (length is 4), as the sum of every two consecutive elements is even.","solution":"def longest_even_sum_subsequence_length(t, test_cases): results = [] for i in range(t): n, a = test_cases[i] even_count = sum(1 for x in a if x % 2 == 0) odd_count = n - even_count # The longest subsequence where the sum of every two consecutive elements # is even can be formed by either all even numbers or all odd numbers longest_subseq_length = max(even_count, odd_count) results.append(longest_subseq_length) return results"},{"question":"A company is hosting a Hackathon in which n participants are competing across m different projects. Each participant can contribute to multiple projects, and each project can have multiple participants. However, a participant can contribute only a specific percentage to a project (either 25%, 50%, 75%, or 100%). Given the competition details, your task is to figure out if it\'s possible for each project to get exactly 100% contributions from its participants. The first line of input consists of two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000), the number of participants and the number of projects, respectively. Each of the next m lines contains the details of one project. The first integer C is the number of participants contributing to the project (1 ≤ C ≤ n). Then C pairs of integers follow, each pair representing a participant and their contribution to the project as a percentage (pi, ci) (1 ≤ pi ≤ n, ci ∈ {25, 50, 75, 100}). Your task is to determine if it\'s possible for every project to receive a total contribution of exactly 100%. For each project, if it achieves 100% contribution, output \\"YES\\". Otherwise, output \\"NO\\". # Example **Input:** ``` 3 2 2 1 50 2 50 3 1 25 2 25 3 50 ``` **Output:** ``` YES YES ``` **Explanation:** In the given example, there are 2 projects: 1. The first project has 2 participants: participant 1 with a 50% contribution and participant 2 with a 50% contribution. Thus, the total contribution is 100%. 2. The second project has 3 participants: participant 1 with a 25% contribution, participant 2 with a 25% contribution, and participant 3 with a 50% contribution. The total contribution is also 100%.","solution":"def is_100_percent_contribution(n, m, projects): results = [] for project in projects: contributions = project[1:] total_contribution = sum(contributions[i] for i in range(1, len(contributions), 2)) if total_contribution == 100: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a grid with n rows and m columns, and two integers si and sj representing the starting point (row, column) of a robot. The robot can move up, down, left, or right. However, there are some blocked cells through which the robot cannot pass. Your task is to determine if there exists a path from the starting point to any cell in the maximum boundary (edge) of the grid that the robot can move to without passing through any blocked cells. The robot can only move within the grid boundaries. The first line of the input contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000), the number of rows and columns. The second line contains two integers si and sj (0 ≤ si < n, 0 ≤ sj < m), the starting coordinates of the robot. The next n lines each contain m characters, describing the grid. Each cell is either \'.\' (an empty cell), \'#\' (a blocked cell), or \'S\' (the starting position of the robot). Output \\"YES\\" if there is a path from the starting point to any boundary cell of the grid that the robot can traverse. Otherwise, output \\"NO\\". **Example:** Input: 4 4 1 1 .... .#.# .S.. .. Output: YES In this example, the robot can move from the starting position \'S\' at (1, 1) to the boundary cell (0, 1) without passing through any blocked cells.","solution":"def can_reach_boundary(n, m, si, sj, grid): from collections import deque # Directions array for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize a queue and the visited set queue = deque([(si, sj)]) visited = set() visited.add((si, sj)) while queue: x, y = queue.popleft() # Check if we have reached the boundary if x == 0 or x == n-1 or y == 0 or y == m-1: return \\"YES\\" # Explore all 4 possible directions for dir_x, dir_y in directions: new_x, new_y = x + dir_x, y + dir_y if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited and grid[new_x][new_y] == \'.\': queue.append((new_x, new_y)) visited.add((new_x, new_y)) return \\"NO\\""},{"question":"Below is a new question designed to match the style, complexity, and scope of the provided question: The Daleks have faced another challenging task! This time, the Doctor is away, and it is up to Heidi to handle the situation. Heidi needs to decode a sequence of scrambled signals transmitted by the Daleks. Each signal is a noisy version of a known pattern. The patterns are generated by repeating a specific sub-pattern, but the Daleks have added small random deviations to make decoding harder. There are m patterns, each with a sub-pattern of length l. The task is to identify the original sub-pattern from the noisy sequence. Each pattern is repeated consecutively to form a sequence of length n (n = k times l), where k is the number of repetitions of the sub-pattern. The Daleks can add a small noise to each element in the sequence, deviating it randomly within pm 0.1 from its original value. Your task is to recover the original sub-pattern given the noisy sequence. The first line contains an integer m (1 leq m leq 3), the number of patterns. The second line contains three integers, l and k (1 leq l leq 1000, n = k times l), the length of the sub-pattern and the number of repetitions for each pattern, respectively. The next m times n lines contain the noisy sequence elements, one pattern per line. Each row contains n real numbers representing the noisy sequence of that pattern. Print m lines, each describing an identified sub-pattern. For each line, print l real numbers representing the recovered sub-pattern of length l for each pattern. To keep the task computationally reasonable, it is guaranteed that sequences differ enough that the sub-patterns can be distinguished by averaging the noisy sequences. Here\'s how one test with m = 2, l = 5, and k = 10 might look: Input: ``` 2 5 10 1.1 0.9 1.0 1.1 0.9 1.0 0.9 1.1 1.0 1.0 1.0 1.1 1.2 1.0 1.1 1.1 1.2 1.0 1.0 1.1 -0.1 0.0 -0.1 -0.1 0.0 -0.1 -0.1 0.1 0.0 -0.1 0.0 -0.1 0.0 -0.1 0.0 -0.1 0.0 -0.1 -0.1 0.0 ``` Output: ``` 1.0 1.1 1.0 1.0 1.1 0.0 -0.1 0.0 -0.1 0.0 ``` Each line of the output should accurately reflect the average value of the corresponding elements in the sub-pattern for each pattern.","solution":"def decode_patterns(m, l, k, noisy_sequences): Decode the original sub-patterns from noisy sequences. :param m: Number of patterns. :param l: Length of the sub-pattern. :param k: Number of repetitions. :param noisy_sequences: List of m lists, each containing n (m * l) elements. :return: List of m lists, each containing l elements representing the sub-pattern. patterns = [] for pattern_idx in range(m): avg_pattern = [0.0] * l for rep in range(k): start_idx = rep * l for sub_idx in range(l): avg_pattern[sub_idx] += noisy_sequences[pattern_idx][start_idx + sub_idx] avg_pattern = [x / k for x in avg_pattern] patterns.append(avg_pattern) return patterns"},{"question":"Given an integer array `nums`, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. Notice that the solution set must not contain duplicate triplets. You will be given multiple test cases. The first line of each test case contains an integer `n` (3 le n le 10^5), the number of elements in the array. The second line of each test case contains `n` integers separated by spaces which represent the elements of the array. The elements of the array can be any integer in the range [-10^5, 10^5]. It is guaranteed that the number of test cases does not exceed 100 and that the sum of `n` over all test cases does not exceed 10^6. For each test case, print all unique triplets that sum to 0, each triplet on a new line. The triplets within each test case can be printed in any order, and each triplet should be in ascending order. Print an empty line after the triplets of each test case. # Example Input ``` 2 6 -1 0 1 2 -1 -4 5 -2 -3 0 2 3 ``` Output ``` -1 -1 2 -1 0 1 -3 0 3 -2 -0 2 ``` Note: - In the first test case, the unique triplets that sum to 0 are: - [-1, -1, 2] - [-1, 0, 1] - In the second test case, the unique triplets that sum to 0 are: - [-3, 0, 3] - [-2, 0, 2]","solution":"def three_sum(nums): Given an array of integers, returns all the unique triplets [nums[i], nums[j], nums[k]] such that: i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. nums.sort() result = set() for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: result.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return [list(triplet) for triplet in result] def process_test_cases(test_cases): Processes multiple test cases for the three_sum function and prints the results. results = [] for nums in test_cases: triplets = three_sum(nums) results.append(triplets) return results"},{"question":"You are given an array `a_1, a_2, ..., a_n` of `n` integers and an integer `k`. A \\"good subarray\\" is defined as a subarray with at least `k` distinct integers. Your task is to find the smallest length of a \\"good subarray\\" in the array `a`. **Input:** The first line contains the integers `n` and `k` (`1 <= k <= n <= 100000`). The second line contains `n` integers `a_1, a_2, ..., a_n` (`1 <= a_i <= 100000`). **Output:** Output a single integer – the length of the smallest \\"good subarray\\". If no such subarray exists, output `-1`. **Example 1:** **Input:** ``` 7 3 1 2 1 2 3 4 1 ``` **Output:** ``` 3 ``` **Explanation:** The subarray `[2, 3, 4]` is a \\"good subarray\\" because it contains exactly 3 distinct integers, and its length is 3. **Example 2:** **Input:** ``` 5 5 1 1 1 1 1 ``` **Output:** ``` -1 ``` **Explanation:** There is no subarray in the given array that contains 5 distinct integers, hence the output is `-1`.","solution":"def smallest_good_subarray(n, k, array): Returns the length of the smallest subarray that contains at least k distinct integers. If no such subarray exists, returns -1. from collections import defaultdict # Sliding window approach left = 0 right = 0 distinct_count = 0 min_length = float(\'inf\') freq_map = defaultdict(int) while right < n: # Include the current element in the window if freq_map[array[right]] == 0: distinct_count += 1 freq_map[array[right]] += 1 right += 1 # Once our window contains at least k distinct integers, try to minimize it while distinct_count >= k: min_length = min(min_length, right - left) freq_map[array[left]] -= 1 if freq_map[array[left]] == 0: distinct_count -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"You are given a list of numbers and your task is to find the maximum sum of numbers such that no two consecutive numbers are selected. Given an integer array `nums`, find the maximum subset sum where no two elements are adjacent. # Input - An integer `n` (1 leq n leq 10^5): the number of elements in the array. - An array of integers `nums` of size `n` (-10^4 leq text{nums}[i] leq 10^4): the list of numbers. # Output - Output a single integer, the maximum subset sum of the array where no two elements are adjacent. # Example Input ``` 5 3 2 5 10 7 ``` Output ``` 15 ``` Explanation We select the subset {3, 10}, which gives us the maximum sum of 13. Another optimal selection could be {3, 7} but it yields a lower sum than {3, 10}. Hence, the maximum sum among possible subsets is 15.","solution":"def max_subset_sum_no_adjacent(nums): if not nums: return 0 elif len(nums) == 1: return max(0, nums[0]) n = len(nums) dp = [0] * n dp[0] = max(0, nums[0]) dp[1] = max(dp[0], nums[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + nums[i]) return dp[-1] # Example usage: # nums = [3, 2, 5, 10, 7] # result = max_subset_sum_no_adjacent(nums) # print(result) # Output should be 15"},{"question":"You are given a grid of size n times m filled with integers. There are also k operations. Each operation is defined by four integers x_1, y_1, x_2, y_2, representing a subgrid of the original grid with top-left corner at (x_1, y_1) and bottom-right corner at (x_2, y_2). For each operation, you are to compute the sum of all integers in the specified subgrid. The first line contains three integers n, m, k (1 le n, m le 1000, 1 le k le 10^5) — the number of rows, the number of columns, and the number of operations, respectively. The next n lines contain m integers each, representing the grid. The next k lines contain four integers each x_1, y_1, x_2, y_2 (1 le x_1 le x_2 le n, 1 le y_1 le y_2 le m) — the coordinates of the subgrid for each operation. Print k lines, each containing a single integer — the sum of the integers in the corresponding subgrid. **Example:** Input: ``` 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 ``` Output: ``` 12 28 ``` Explanation: For the first operation, the subgrid is: ``` 1 2 4 5 ``` Sum = 1 + 2 + 4 + 5 = 12 For the second operation, the subgrid is: ``` 5 6 8 9 ``` Sum = 5 + 6 + 8 + 9 = 28","solution":"def subgrid_sum(n, m, k, grid, operations): Returns the sum of elements in the specified subgrids for each operation. :param n: int, number of rows in grid :param m: int, number of columns in grid :param k: int, number of operations :param grid: list of lists of ints, the grid itself :param operations: list of tuples, each tuple containing four integers (x1, y1, x2, y2) :return: list of ints, sums of the specified subgrids result = [] for op in operations: x1, y1, x2, y2 = op subgrid_sum = 0 for i in range(x1-1, x2): for j in range(y1-1, y2): subgrid_sum += grid[i][j] result.append(subgrid_sum) return result"},{"question":"You are given a list of `n` projects, and each project has a start time and an end time. Every project requires exactly one unit of labor to complete, and a worker can only work on one project at a time from start to finish. Your task is to determine if it is possible to schedule all projects with the available workers so that none of the projects overlap for any worker. Specifically, you need to find the minimum number of workers required to complete all the projects without any overlap in their working times. The input format is as follows: 1. The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of projects. 2. The next `n` lines each contain two integers `s` and `e` (0 ≤ s < e ≤ 1000), representing the start time and end time of a project. Output a single integer, the minimum number of workers required. Example: Input: ``` 5 1 4 2 5 3 6 7 9 8 10 ``` Output: ``` 3 ```","solution":"def min_workers_required(projects): events = [] for s, e in projects: events.append((s, 1)) events.append((e, -1)) events.sort(key=lambda x: (x[0], x[1])) max_workers = 0 current_workers = 0 for time, event in events: current_workers += event if current_workers > max_workers: max_workers = current_workers return max_workers"},{"question":"Alex has a unique way of encrypting messages. He uses a substitution cipher where every letter in the alphabet from \'a\' to \'z\' is cyclically shifted by a fixed number of positions. For example, with a shift of 3, \'a\' becomes \'d\', \'b\' becomes \'e\', ..., and \'z\' becomes \'c\'. The shift is always positive and less than 26. Alex needs your help to implement his encryption method. Given a string containing only lowercase letters and a shift value, write a function that returns the encrypted string. **Input:** - The first line contains an integer t (1 le t le 1000), representing the number of test cases. - For each test case, the first line contains an integer s (1 le s < 26) representing the shift value. - The second line contains a string message containing only lowercase letters from \'a\' to \'z\'. **Output:** For each test case, output the encrypted string in a new line. **Example:** Input: ``` 2 3 abc 4 xyz ``` Output: ``` def bcd ``` **Explanation:** - In the first test case, each letter in \'abc\' is shifted by 3 positions: \'a\' -> \'d\', \'b\' -> \'e\', \'c\' -> \'f\', so the encrypted message is \'def\'. - In the second test case, each letter in \'xyz\' is shifted by 4 positions: \'x\' -> \'b\', \'y\' -> \'c\', \'z\' -> \'d\', so the encrypted message is \'bcd\'.","solution":"def encrypt_message(shift, message): Encrypts the given message using the substitution cipher with the provided shift value. shift: int - the number of positions to shift each letter. message: str - the message to be encrypted. Returns the encrypted message as a string. encrypted = [] for char in message: new_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) encrypted.append(new_char) return \'\'.join(encrypted) def process_test_cases(t, test_cases): results = [] for i in range(t): shift, message = test_cases[i] result = encrypt_message(shift, message) results.append(result) return results"},{"question":"You are given an integer array `arr` and two integers `start` and `end`. You need to answer several queries. Each query consists of a single integer `d` and requires collecting all the integers in the array that are divisible by `d` and lie within the indices `start` and `end` (both inclusive). The first line contains a single integer `n` (1 ≤ n ≤ 100000) — the number of elements in the array. The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 1000000) — the elements of the array. The third line contains two integers `m` (1 ≤ m ≤ 30000) — the number of queries to process, and `t` (1 ≤ t ≤ 500) — the maximum number of distinct divisors per query. Then m lines follow. Each line contains a single integer `d` for the i-th query (1 ≤ d ≤ 1000). For each query, output the elements of the array that are divisible by `d` and lie between indices `start` and `end` (both inclusive), each on a new line. If no elements satisfy the condition, output \\"No elements found\\". Example Input: ``` 6 2 4 6 8 10 12 2 1 4 3 5 ``` Example Output: ``` 4 6 ``` ``` 10 ```","solution":"def query_divisors(n, arr, start, end, queries): Processes the queries to find the elements in a subarray that are divisible by the given divisors. Args: n (int): The number of elements in the array. arr (list): The list of integers. start (int): The starting index of the subarray (inclusive). end (int): The ending index of the subarray (inclusive). queries (list): The list of divisors for each query. Returns: list: A list of lists, where each inner list contains the elements divisible by that query\'s divisor. results = [] subarray = arr[start:end + 1] for d in queries: result = [x for x in subarray if x % d == 0] if result: results.append(result) else: results.append([\\"No elements found\\"]) return results"},{"question":"You are given an array of n integers a1, a2, ..., an. You need to find out if there is a non-empty subset S = {ai1, ai2, ..., aik} such that the sum of the integers in S is equal to zero. If there exists such a subset, print \\"YES\\". Otherwise, print \\"NO\\". **Input:** The first line contains a single integer n (1 ≤ n ≤ 20) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (−1000 ≤ ai ≤ 1000) — the elements of the array. **Output:** Print \\"YES\\" if there exists a non-empty subset with sum equal to zero, otherwise print \\"NO\\". **Example:** **Input:** ``` 5 -1 2 -3 4 5 ``` **Output:** ``` YES ``` **Explanation:** In the example above, there is a subset {-1, 2, -3} whose sum is zero. **Input:** ``` 3 1 2 3 ``` **Output:** ``` NO ```","solution":"def zero_sum_subset_exists(n, arr): from itertools import combinations # Check all non-empty subsets for r in range(1, n + 1): for subset in combinations(arr, r): if sum(subset) == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex has an associated value vi (0 ≤ vi ≤ 1,000,000). You can consider each edge bidirectional. Your task is to find the maximum sum of values for any path in the graph. A path is defined as a sequence of vertices where each consecutive pair of vertices in the sequence is connected by an edge. The path must contain at least one vertex and may revisit vertices or edges. Input format: - The first line contains two integers n (1 ≤ n ≤ 100,000) and m (0 ≤ m ≤ 200,000) - the number of vertices and edges respectively. - The second line contains n integers separated by spaces, where the i-th integer is vi - the value associated with the i-th vertex. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between vertex u and vertex v. Output format: Print a single integer, the maximum sum of values for any path in the graph. If there are no edges, print the maximum value among all vertices\' values. Example: Input: ``` 5 4 10 20 30 40 50 1 2 2 3 3 4 4 5 ``` Output: ``` 150 ``` Explanation: The path 1-2-3-4-5 will give the maximum sum which is 10 + 20 + 30 + 40 + 50 = 150.","solution":"def max_path_sum(n, m, values, edges): Returns the maximum sum of values for any path in the graph. :param n: Integer, number of vertices :param m: Integer, number of edges :param values: List of integers, values associated with each vertex :param edges: List of tuples, each containing two integers representing edges :return: Integer, the maximum path sum if m == 0: return max(values) from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) def dfs(node, parent): max_sum = values[node] node_visited[node] = True for neighbor in graph[node]: if not node_visited[neighbor]: max_sum = max(max_sum, values[node] + dfs(neighbor, node)) return max_sum node_visited = [False] * n max_sum_result = 0 for i in range(n): if not node_visited[i]: max_sum_result = max(max_sum_result, dfs(i, -1)) return max_sum_result"},{"question":"You are given an array of integers. The task is to find an element in the array that appears more than ⌊ n/2 ⌋ times, where n is the length of the array. Input format: - The first line contains an integer n (1 ≤ n ≤ 1000) - the number of integers in the array. - The second line contains n integers separated by spaces - the elements of the array. Each element in the array is an integer within the range of -10^9 to 10^9. Output format: - Print the majority element. If no such element exists, output -1.","solution":"def find_majority_element(arr): Returns the majority element of the array if it exists, otherwise returns -1. The majority element is the element that appears more than n // 2 times. n = len(arr) count = {} for num in arr: if num in count: count[num] += 1 else: count[num] = 1 for num in count: if count[num] > n // 2: return num return -1"},{"question":"You are given a labyrinth designed as a grid with m rows and n columns. Each cell of the grid is either empty (represented by \'.\') or blocked (represented by \'#\'). You can move from one empty cell to another empty cell if they share a side. Your task is to determine if there is a path from the top-left corner (cell (1, 1)) to the bottom-right corner (cell (m, n)) of the grid. If a path exists, print \\"YES\\". Otherwise, print \\"NO\\". The first line of the input contains two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in the grid. The next m lines each contain a string of n characters — the description of the grid. Print a single line — \\"YES\\" if there is a path from the top-left to the bottom-right corner, otherwise print \\"NO\\". Example: Input: 3 4 .... .#.. ..#. Output: YES","solution":"def is_path_exists(m, n, grid): def is_valid(x, y): return 0 <= x < m and 0 <= y < n and grid[x][y] == \'.\' def dfs(x, y): if x == m - 1 and y == n - 1: return True if not is_valid(x, y) or visited[x][y]: return False visited[x][y] = True for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]: new_x, new_y = x + direction[0], y + direction[1] if dfs(new_x, new_y): return True return False if grid[0][0] == \'#\' or grid[m - 1][n - 1] == \'#\': return \\"NO\\" visited = [[False] * n for _ in range(m)] return \\"YES\\" if dfs(0, 0) else \\"NO\\" # Example Input m = 3 n = 4 grid = [ \\"....\\", \\".#..\\", \\"..#.\\" ] print(is_path_exists(m, n, grid)) # Output: YES"},{"question":"Implement a sorting function that sorts a list of tuples based on multiple criteria. Each tuple consists of three elements: an integer, a string, and a floating-point number. The function should first sort the tuples by the integer in ascending order, then by the string in alphabetical order, and finally by the floating-point number in descending order. For example, given the following list of tuples: ``` [(1, \'apple\', 2.5), (1, \'banana\', 3.5), (2, \'apple\', 3.5), (2, \'apple\', 1.2), (1, \'apple\', 3.7)] ``` The sorted list should be: ``` [(1, \'apple\', 3.7), (1, \'apple\', 2.5), (1, \'banana\', 3.5), (2, \'apple\', 3.5), (2, \'apple\', 1.2)] ``` Your code should have the following signature: ```python def sort_tuples(tuples_list): pass ``` Your task is to implement the `sort_tuples` function. Write your code below.","solution":"def sort_tuples(tuples_list): Sort a list of tuples based on multiple criteria. Each tuple consists of three elements: an integer, a string, and a floating-point number. The function will sort the tuples by the integer in ascending order, then by the string in alphabetical order, and finally by the floating-point number in descending order. return sorted(tuples_list, key=lambda x: (x[0], x[1], -x[2]))"},{"question":"Michael loves gardening and has a collection of n types of flowers. Each type of flower blooms for a specific number of days. Michael wants to create a beautiful garden bed by planting some of the flowers in a specific order, chosen from the n types he has, such that there is at least one of each type in the flower bed, and no two flowers of the same type bloom in consecutive days. Michael knows the number of days each type of flower blooms. Given this information, your task is to determine the minimum number of days required to create such a flower bed where the constraints are satisfied. The first line contains the single integer n (1 ≤ n ≤ 100) — the number of types of flowers. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 100), where di is the number of days the i-th type of flower blooms. Print a single integer — the minimum number of days required to create a flower bed following Michael\'s rules. Example: Input: 3 4 3 2 Output: 9 Explanation: One optimal way is to create the sequence of flowers as follows: type 1 (4 days) -> type 2 (3 days) -> type 3 (2 days). This sequence ensures there are no two flowers of the same type blooming consecutively. The total number of days is 9.","solution":"def min_days_to_bloom(n, bloom_days): Given the number of types of flowers and the number of days each type blooms, return the minimum number of days required to create a flower bed with at least one of each type of flower and no two flowers of the same type blooming consecutively. # Sort bloom_days in descending order bloom_days.sort(reverse=True) # Initialize the total days total_days = 0 # Sum the number of days for days in bloom_days: total_days += days # The minimum number of days is the sum return total_days"},{"question":"You are tasked with designing a new system for managing supermarket inventory. The simplest model of this system involves keeping track of a list of items that can be restocked and sold on a daily basis. For simplicity, assume each day the same list of items is evaluated, but their quantities may change. Each day, the supermarket receives a record of the items restocked and another record of the items sold. You need to update the inventory accordingly and check which items are out of stock at the end of the day. Given three inputs: 1. An initial list of items and their quantities available at the start of the day. 2. A list of items and their quantities restocked during the day. 3. A list of items and their quantities sold during the day. Write a function that updates the inventory and prints out the items that are out of stock at the end of the day. # Input: - The first line contains an integer n (1 ≤ n ≤ 100000) representing the number of different items in the inventory. - The next n lines each contain a string (item name) and an integer (quantity), representing the initial quantity of each item. - The next m lines contain restocked items, where each line contains a string (item name) and an integer (quantity) of the restocked item (1 ≤ m ≤ 100000). - The next k lines contain sold items, where each line contains a string (item name) and an integer (quantity) of the sold item (1 ≤ k ≤ 100000). # Output: A list of item names that are out of stock at the end of the day, printed in lexicographical order. # Example: Input: ``` 4 apple 10 banana 5 orange 8 pear 3 3 banana 10 orange 5 pear 2 4 apple 5 banana 8 orange 10 pear 2 ``` Output: ``` apple pear ``` Explanation: - Initial inventory: apple 10, banana 5, orange 8, pear 3 - Restocked: banana 10, orange 5, pear 2 (new inventory: apple 10, banana 15, orange 13, pear 5) - Sold: apple 5, banana 8, orange 10, pear 2 (final inventory: apple 5, banana 7, orange 3, pear 3) Only `apple` is out of stock by the end of the day. Therefore, only `apple` is printed in the output.","solution":"def update_inventory(initial_inventory, restocked_items, sold_items): This function updates the supermarket inventory based on restocked and sold items, and returns the items out of stock at the end of the day. Parameters: initial_inventory (list of tuples): Each tuple contains an item name and its initial quantity. restocked_items (list of tuples): Each tuple contains an item name and its restocked quantity. sold_items (list of tuples): Each tuple contains an item name and its sold quantity. Returns: list: A list of item names that are out of stock. inventory = {} # Initial Inventory for item, quantity in initial_inventory: inventory[item] = quantity # Restock Inventory for item, quantity in restocked_items: if item in inventory: inventory[item] += quantity else: inventory[item] = quantity # Sell Inventory for item, quantity in sold_items: if item in inventory: inventory[item] -= quantity if inventory[item] < 0: inventory[item] = 0 # Find out of stock items out_of_stock = [item for item, quantity in inventory.items() if quantity == 0] # Return list of out of stock items in lexicographical order return sorted(out_of_stock)"},{"question":"You are given a list of `n` integers and an integer `k`. Your task is to determine if there exist three distinct elements in the list such that their sum is equal to `k`. Write a function `three_sum(arr, k)` that takes two arguments: 1. `arr`: A list of integers. 2. `k`: An integer. Your function should return `True` if there exist three distinct elements in `arr` that add up to `k`, and `False` otherwise. # Input - The first line contains an integer `n` (1 <= n <= 10^3) — the number of elements in the list. - The second line contains `n` integers — the elements of the list. - The third line contains a single integer `k`. # Output - Output \\"True\\" if there exist three distinct elements in the list that add up to `k`, and \\"False\\" otherwise. # Example ```plaintext Input: 6 1 2 3 4 5 6 10 Output: True ``` ```plaintext Input: 5 1 2 4 5 6 20 Output: False ``` # Constraints - You may assume that all the integers in the input list are distinct. - The list will contain integers both negative and positive, as well as zero. - Ensure your solution runs efficiently with a time complexity of O(n^2).","solution":"def three_sum(arr, k): Determines if there exist three distinct elements in the list such that their sum is equal to k. :param arr: List of integers :param k: The desired sum :return: True if there exist three distinct elements in arr that sum up to k, False otherwise n = len(arr) arr.sort() for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == k: return True elif current_sum < k: left += 1 else: right -= 1 return False"},{"question":"You are given an array of `n` integers, where each element represents the time (in hours) required to complete a specific task. Your goal is to determine if it\'s possible to complete all the tasks within a given deadline `d` hours. You have an additional constraint: you can pause any task and switch to another task, and later resume the previous task from where you left off, as long as you do not exceed the deadline. The first line contains two positive integers `n` (1 ≤ n ≤ 100) and `d` (1 ≤ d ≤ 10,000) — the number of tasks and the deadline in hours, respectively. The second line contains `n` integers: the time required `ti` (1 ≤ ti ≤ 1000) for each task. If it is possible to complete all the tasks within the given deadline under the specified constraints, output YES. Otherwise, output NO. Example: Input: ``` 3 7 2 3 4 ``` Output: ``` YES ``` Input: ``` 4 5 1 2 3 4 ``` Output: ``` NO ```","solution":"def can_complete_tasks_within_deadline(n, d, task_times): Determines if it\'s possible to complete all tasks within the given deadline. :param n: int - The number of tasks. :param d: int - The deadline in hours. :param task_times: List[int] - The time required for each task. :return: str - \\"YES\\" if all tasks can be completed within the deadline, otherwise \\"NO\\". total_time = sum(task_times) if total_time <= d: return \\"YES\\" return \\"NO\\""},{"question":"The Berland government has recently issued a new policy to incentivize the construction of parks across the city. A prestigious landscape architecture company, \\"Green Fields\\", is responsible for optimizing the placement of these parks. The city consists of a grid of dimensions n times m. Each cell in the grid represents a potential site for constructing a park. However, not all cells are suitable for building parks due to various geographic and urban planning constraints. Some cells have already existing structures or unsuitable terrain, marked as \'X\'. The rest of the cells are empty, marked as \'.\'. A park can only be built on an empty cell. The company has determined that each park should ideally be a square of side length k. The task is to find out the maximum possible value of k such that at least one park of size k times k can be built on the grid. If no park can be built, the output should be 0. The first line of input contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. The next n lines each contain a string of length m composed of characters \'X\' and \'.\'. Output a single integer — the maximum possible side length k, such that at least one park of size k times k can be built on the grid. # Examples **Input:** ``` 5 6 ...... ..XX.. ...... ...... XX.... ``` **Output:** ``` 3 ``` **Input:** ``` 4 4 XXXX X..X X..X XXXX ``` **Output:** ``` 2 ``` **Explanation:** In the first example, the largest possible park has a side length of 3. There is a 3x3 square of \'.\' in the middle of the grid. In the second example, the largest possible park has a side length of 2. There are only two potential 2x2 squares on the grid where parks can be built. In both examples, the answer is the largest possible side length of a square park that can be placed on the grid according to the given constraints.","solution":"def max_square_park(grid): n = len(grid) m = len(grid[0]) # dp[i][j] will be the length of the largest square where grid[i][j] is the bottom-right corner dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"Alice loves playing with words and creating new ones by blending two words together. A blend word is formed by alternately combining letters from the two original words such that the first letter comes from the first word, the second letter from the second word, the third letter from the first word, and so on. If one word is shorter than the other, the remaining letters of the longer word are appended at the end of the blend word. You are given two strings `word1` and `word2`. Your task is to write a function that generates the blend word by following the rules defined above. **Input**: - A string `word1` of length `n` where (1 ≤ n ≤ 100). - A string `word2` of length `m` where (1 ≤ m ≤ 100). **Output**: - A single string which is the blend word formed by alternately combining letters from `word1` and `word2`. **Example**: ``` Input: word1 = \\"abc\\", word2 = \\"def\\" Output: \\"adbecf\\" Input: word1 = \\"abc\\", word2 = \\"defgh\\" Output: \\"adbecfgh\\" Input: word1 = \\"abcd\\", word2 = \\"ef\\" Output: \\"aebfcd\\" ``` **Note**: In the first example, letters from `word1` and `word2` are alternately combined: \'a\' with \'d\', \'b\' with \'e\', and \'c\' with \'f\'. In the second example, after alternately combining \\"abc\\" with \\"def\\", the remaining letters \\"gh\\" of the longer word \\"defgh\\" are appended. In the third example, after alternately combining \\"abcd\\" with \\"ef\\", the remaining letter \\"cd\\" of the longer word \\"abcd\\" is appended.","solution":"def blend_words(word1, word2): Returns a blend word formed by alternately combining letters from word1 and word2. If one word is shorter, the remaining letters of the longer word are appended. blend = [] len1, len2 = len(word1), len(word2) min_len = min(len1, len2) # Alternately combine letters for i in range(min_len): blend.append(word1[i]) blend.append(word2[i]) # Append remaining letters from the longer word if len1 > len2: blend.append(word1[min_len:]) else: blend.append(word2[min_len:]) return \'\'.join(blend)"},{"question":"You are given a grid with n rows and m columns that contains three types of cells: empty cells, obstacles, and goal cells. Your task is to navigate from the start position to a goal cell while minimizing the number of steps taken. You can move up, down, left, or right to an adjacent empty cell but cannot move through obstacles. The grid is represented as a 2D array, where \'S\' indicates the starting cell, \'.\' indicates an empty cell, \'#\' indicates an obstacle, and \'G\' indicates a goal cell. Write a program to calculate the minimum number of steps required to reach a goal cell from the start cell. If it is not possible to reach any goal cell, return -1. # Input Format: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), denoting the number of rows and columns in the grid. - Each of the next n lines contains a string of m characters representing the grid. # Output Format: - Print a single integer, the minimum number of steps required to reach a goal cell from the start cell. If it is not possible, print -1. # Example: **Input:** ``` 5 5 S.... .#.#. ..# ....G ..G.. ``` **Output:** ``` 6 ``` Explanation: - One possible path to reach a goal cell is: - Move right to (0, 1) - Move right to (0, 2) - Move right to (0, 3) - Move down to (1, 3) - Move down to (2, 3) - Move down to (3, 3) This results in a total of 6 steps to reach the goal cell at (3, 4).","solution":"from collections import deque def min_steps_to_goal(n, m, grid): # Directions: (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] start_position = None goal_positions = [] # Find the start and goal positions for i in range(n): for j in range(m): if grid[i][j] == \'S\': start_position = (i, j) elif grid[i][j] == \'G\': goal_positions.append((i, j)) # Edge case: no start or no goal in the grid if not start_position or not goal_positions: return -1 queue = deque([(start_position[0], start_position[1], 0)]) # (row, col, steps) visited = set() visited.add(start_position) while queue: x, y, steps = queue.popleft() # Check if we have reached a goal if (x, y) in goal_positions: return steps # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) # If no path was found to any goal return -1 # Example usage: # n, m = 5, 5 # grid = [ # \\"S....\\", # \\".#.#.\\", # \\"..#\\", # \\"....G\\", # \\"..G..\\" # ] # print(min_steps_to_goal(n, m, grid)) # Output: 6"},{"question":"John is working with an array of integers and wants to perform a series of operations on the array. Each operation is described by three integers l, r, and k, which mean the following: toggle (flip) all bits in the binary representation of numbers in the subarray from index l to index r (both inclusive) exactly k times. After performing all the operations, John wants to know the final state of the array. The first line contains two space-separated integers n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 1000) — the size of the array and the number of operations. The second line contains n space-separated integers — the initial state of the array. Each of the next q lines contains three space-separated integers l, r, and k (1 ≤ l ≤ r ≤ n, 1 ≤ k ≤ 10^9) — describing the operations as explained above. Output the final state of the array as n space-separated integers. For example, if the initial array is [1, 2, 3] and the operations are [(1, 2, 1)], the result of flipping the bits of numbers in positions 1 to 2 once would change the array to [254, 253, 3] (assuming 8-bit representation for simplicity). Note that flipping the bits of a number twice will leave it unchanged, flipping three times will effectively flip it once, and so on. Hence, if k is even, the number remains the same after k flips. Example Input: 3 1 1 2 3 1 2 1 Example Output: 254 253 3","solution":"def flip_bits(num): This function flips the bits of an integer `num` assuming a 32-bit integer. # Assuming a 32-bit integer return num ^ 0xFFFFFFFF def perform_operations(n, q, array, operations): This function performs q operations on the array of size n. The operations are described by the list `operations` where each element is a tuple (l, r, k). After performing all operations, it returns the final state of the array. # Iterate through each operation for l, r, k in operations: if k % 2 == 1: # Only perform the flipping if k is odd for i in range(l-1, r): # Convert 1-based index to 0-based array[i] = flip_bits(array[i]) return array"},{"question":"Sophie is developing a ride-sharing application\'s optimization algorithm. The application needs to match riders to drivers efficiently, minimizing both the total waiting time and the travel distance covered by drivers. You are given a list of riders and a list of available drivers. Each rider has a specific location, and each driver has a current location and a maximum distance they are willing to be away from their current location (driving radius). The goal is to match as many riders to drivers as possible while ensuring that each driver only picks up one rider and that the rider\'s location is within the driver\'s driving radius. **Input**: - The first line contains the integer Z, the number of test cases (1 ≤ Z ≤ 50). - For each test case: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of riders and the number of drivers, respectively. - The next n lines each contain two integers x and y (0 ≤ x, y ≤ 10000) representing the coordinates of each rider. - The following m lines each contain three integers x, y, and r (0 ≤ x, y ≤ 10000, 0 ≤ r ≤ 10000) representing the coordinates of each driver and their driving radius. **Output**: - For each test case, output a single line with an integer representing the maximum number of riders that can be matched to drivers. **Example**: ``` Input: 2 2 2 1 2 3 4 1 2 3 4 4 1 3 3 2 5 1 1 5 5 2 3 2 4 1 5 0 0 2 Output: 2 2 ``` **Explanation**: In the first test case, both riders can be matched to the available drivers since their locations are within the allowed driving radii of the drivers. In the second test case, all riders can be matched to the available drivers because all provided coordinates fall within the given driving radii.","solution":"def max_riders_matched(z, test_cases): def distance(rider, driver): return ((rider[0] - driver[0])**2 + (rider[1] - driver[1])**2)**0.5 results = [] for case in test_cases: n, m, riders, drivers = case matches = 0 for rider in riders: for driver in drivers: if distance(rider, driver) <= driver[2]: matches += 1 drivers.remove(driver) break results.append(matches) return results"},{"question":"You are given a string consisting of lower-case Latin letters and underscores. Your task is to convert this string into camel case format. A string is in camel case format if no words are separated by underscores and each word, except the first one, begins with an uppercase letter. For example: - input: `this_is_an_example` - output: `thisIsAnExample` It is guaranteed that the given string starts and ends with a letter and doesn\'t contain two consecutive underscores. The length of the string does not exceed 100 characters. Write a function `toCamelCase` to convert the provided string into camel case format. Ensure the output is the shortest possible camel case representation of the input string. Input: - A single string `s` consisting of lower-case Latin letters and underscores. Output: - A single string which is the camel case representation of the input string. Examples: 1. input: `hello_world`, output: `helloWorld` 2. input: `convert_this_sample`, output: `convertThisSample` 3. input: `programming_is_fun`, output: `programmingIsFun`","solution":"def toCamelCase(s): Converts a string from snake_case to camelCase. Parameters: s (str): The input string in snake_case format. Returns: str: The string converted to camelCase format. parts = s.split(\'_\') return parts[0] + \'\'.join(word.capitalize() for word in parts[1:])"},{"question":"You work for a software company that is developing a new file synchronization tool. They need a function that compares two versions of a directory tree to identify the files that have been added, removed, or changed. Each version of the directory is represented as a list of strings, where each string represents the relative path of a file from the root directory. Filenames include their extensions, and directories do not end with a slash. Your task is to write a function that takes two lists of strings as input, representing two versions of a directory tree, and returns three lists of strings: 1. Files that have been added in the new version. 2. Files that have been removed in the new version. 3. Files that exist in both versions but have different contents. For the purpose of this exercise, assume that two files with the same relative path but different contents have the same filename but an appended content hash in brackets. For example: - \\"docs/readme.txt\\" in the old version could be \\"docs/readme.txt[abc123]\\" in the new version to indicate a content change. Your function should handle the following constraints: - If a file exists only in one version, it should appear in the corresponding added or removed list. - If a file exists in both versions but with different contents (indicated by the different hash in brackets), it should appear in the changed list without the hash. Function Signature: ```python def compare_directories(old_version: List[str], new_version: List[str]) -> Tuple[List[str], List[str], List[str]]: pass ``` Example: ```python old_version = [ \\"docs/readme.txt\\", \\"src/main.py\\", \\"src/utils.py\\", \\"img/logo.png\\" ] new_version = [ \\"docs/readme.txt[def456]\\", \\"src/main.py\\", \\"src/new_module.py\\", \\"img/logo.png\\" ] Expected Output: ( [\\"src/new_module.py\\"], [\\"src/utils.py\\"], [\\"docs/readme.txt\\"] ) ``` Explanation: - \\"src/utils.py\\" has been removed. - \\"src/new_module.py\\" has been added. - \\"docs/readme.txt\\" has changed content (hash [abc123] to [def456]).","solution":"from typing import List, Tuple def compare_directories(old_version: List[str], new_version: List[str]) -> Tuple[List[str], List[str], List[str]]: old_version_files = {filepath.split(\'[\')[0] for filepath in old_version} new_version_files = {filepath.split(\'[\')[0] for filepath in new_version} added_files = list(new_version_files - old_version_files) removed_files = list(old_version_files - new_version_files) old_version_without_hash = {filepath.split(\'[\')[0]: filepath for filepath in old_version} new_version_without_hash = {filepath.split(\'[\')[0]: filepath for filepath in new_version} changed_files = [ filepath for filepath in old_version_files & new_version_files if old_version_without_hash[filepath] != new_version_without_hash[filepath] ] return added_files, removed_files, changed_files"},{"question":"You are given an array of integers representing the grades of students in a class. You need to determine the maximum difference between any two grades and count how many pairs of students have this maximum difference. Write a program that does the following: - Reads an integer n (2 ≤ n ≤ 2⋅10^5) representing the number of students. - Reads n space-separated integers representing the grades of the students. Each grade is in the range 1 to 10^9. - Outputs two integers: the maximum grade difference and the number of pairs of students that have this maximum difference. For example, given the input: ``` 5 1 3 6 9 1 ``` The program should output: ``` 8 2 ``` Explanation: The maximum difference is 8 (between grades 1 and 9) and there are 2 pairs of students with this difference (one pair with grades (1, 9) and another pair with grades (1, 9)).","solution":"def max_grade_difference_and_count(n, grades): Returns the maximum grade difference and the number of pairs with this maximum difference. Parameters: - n: int, the number of students - grades: list of int, the grades of the students Returns: - tuple of two ints: (maximum difference, count of pairs with maximum difference) max_grade = max(grades) min_grade = min(grades) max_diff = max_grade - min_grade count_max_grade = grades.count(max_grade) count_min_grade = grades.count(min_grade) count_pairs = count_max_grade * count_min_grade return max_diff, count_pairs"},{"question":"A warehouse management software needs to simulate the loading and unloading of cargo boxes using stacks. The software needs a function that helps in tracking the operations on the stack of cargo boxes and validating whether each operation is possible or not. You are given an initial empty stack of cargo boxes and a series of operations. Each operation is either adding a cargo box (`ADD x`) on top of the stack where `x` is the box identifier, or removing the top cargo box from the stack (`REMOVE`). The task is to simulate these operations and print the state of the stack after each operation, or an error message if an operation cannot be performed. The first line of input will contain an integer `t` (1 ≤ t ≤ 100000) — the number of operations. Each of the following `t` lines will contain one operation either in the form `ADD x` (1 ≤ x ≤ 10^9) or `REMOVE`. The output should contain `t` lines. For each operation, print the state of the stack as a space-separated list of integers (from bottom to top) after the operation is performed. If an operation cannot be performed, print \\"ERROR\\". Example: Input: 8 ADD 5 ADD 10 REMOVE ADD 8 REMOVE REMOVE REMOVE ADD 3 Output: 5 5 10 5 5 8 5 ERROR ERROR 3 Note: - If trying to `REMOVE` from an empty stack, print \\"ERROR\\". - If adding a `x`, print the entire stack after the addition. - If removing a box, print the entire stack after the removal. If the stack becomes empty after the removal, print an empty line.","solution":"def manage_cargo_operations(operations): Manages the cargo operations on a stack and returns the state of the stack after each operation. :param operations: List of string operations (e.g., [\'ADD 5\', \'REMOVE\']) :return: List of strings representing the state of the stack after each operation stack = [] results = [] for operation in operations: if operation.startswith(\'ADD\'): _, x = operation.split() stack.append(int(x)) results.append(\' \'.join(map(str, stack))) elif operation == \'REMOVE\': if stack: stack.pop() if stack: results.append(\' \'.join(map(str, stack))) else: results.append(\'\') else: results.append(\'ERROR\') return results"},{"question":"Given an array of integers, you need to find a contiguous subarray (containing at least one number) which has the largest sum. For each test case, you have to output the maximum sum of the contiguous subarray. **Input** - The first line of input contains an integer `T`, the number of test cases. (1 leq T leq 10) - The first line of each test case contains an integer `N`, the number of elements in the array. (1 leq N leq 10^5) - The second line of each test case contains `N` space-separated integers representing the elements of the array. The elements are between -10^4 and 10^4. **Output** - For each test case, output a single integer representing the maximum sum of the contiguous subarray. **Example** ``` Input: 2 5 1 2 3 -2 5 6 -1 -2 -3 -4 -5 -6 Output: 9 -1 ``` **Explanation** - In the first test case, the maximum sum of the contiguous subarray is achieved by summing the elements 1, 2, 3, and -2, which gives 9. - In the second test case, the maximum sum of the contiguous subarray is -1 (the single element). Note: - You can solve this problem using Kadane\'s algorithm which operates in O(N) time complexity per test case.","solution":"def max_subarray_sum(test_cases): Given multiple test cases, find the maximum sum of a contiguous subarray for each test case. :param test_cases: List of tuples where each tuple contains: (N, array) - N is the number of elements, array is the list of integers :return: List of integers representing the maximum sum of the contiguous subarray for each test case result = [] for N, array in test_cases: # Implementing Kadane\'s Algorithm max_so_far = array[0] current_max = array[0] for i in range(1, N): current_max = max(array[i], current_max + array[i]) if current_max > max_so_far: max_so_far = current_max result.append(max_so_far) return result # Example usage: # test_cases = [(5, [1, 2, 3, -2, 5]), (6, [-1, -2, -3, -4, -5, -6])] # max_subarray_sum(test_cases) # Output would be [9, -1]"},{"question":"You are given an array of integers and need to perform a series of operations to minimize the largest element in the array. Here’s how the operations work: 1. Pick any two distinct elements from the array, say `x` and `y` (where `x != y`). 2. Remove `x` and `y` from the array. 3. Insert a new element `z` back into the array, where `z = x + y`. You need to continue performing these operations until only one element remains in the array. Your task is to determine the possible smallest value of this last remaining element. The input consists of multiple test cases. The first line of the input contains an integer `t` (1 <= t <= 10^3), the number of test cases. Each test case consists of two lines. The first line contains an integer `n` (2 <= n <= 2 * 10^5), the number of elements in the array. The second line contains `n` space-separated integers representing the elements of the array. The sum of `n` over all test cases will not exceed 2 * 10^5. For each test case, output the smallest possible value of the last remaining element. # Example Input ``` 3 4 1 2 3 4 5 1 1 1 2 3 3 10 20 30 ``` Output ``` 10 8 60 ```","solution":"def smallest_possible_value(t, test_cases): results = [] for test in test_cases: array = test[1] result = sum(array) results.append(result) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') t = int(lines[0]) test_cases = [] for i in range(t): n = int(lines[2 * i + 1]) array = list(map(int, lines[2 * i + 2].split())) test_cases.append((n, array)) return t, test_cases"},{"question":"A city is planning to install surveillance cameras on its road network to maximize monitoring coverage within a limited budget. The road network is represented as a connected undirected graph, where intersections are nodes and roads are edges with associated installation costs. Given a budget B and the costs to place cameras on each road, your task is to determine the maximum number of intersections that can be monitored by installing cameras on a subset of the roads such that the total installation cost does not exceed B. Each road with a camera can monitor the two intersections at its endpoints. Input Format: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of intersections. - The second line contains an integer m (n-1 ≤ m ≤ 3000), the number of roads. - The third line contains an integer B (1 ≤ B ≤ 100000), the budget. - The next m lines each contain three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000), where u and v are intersections connected by a road, and c is the cost to install a camera on that road. Output Format: - Print the maximum number of intersections that can be monitored without exceeding the budget. In the sample testcase, consider a scenario where choosing the optimal subset of roads with cameras installed will maximize the count of intersections being monitored while respecting the budget constraints.","solution":"def max_intersections_covered(n, m, B, roads): Returns the maximum number of intersections that can be monitored within the budget. # Sort the roads based on their cost roads.sort(key=lambda x: x[2]) parent = list(range(n)) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: parent[root_v] = root_u total_cost = 0 max_intersections = 0 for u, v, cost in roads: if total_cost + cost <= B: if find(u - 1) != find(v - 1): union(u - 1, v - 1) total_cost += cost max_intersections += 2 return min(max_intersections, n) # Example usage # n = 4, m = 5, B = 10 # roads = [[1, 2, 3], [1, 3, 2], [2, 3, 1], [3, 4, 4], [2, 4, 6]] # Should output 4 as we can cover all intersections with the selected roads."},{"question":"You are given a matrix with N rows and M columns, represented as a list of lists in Python. Your task is to write a function to rotate the matrix 90 degrees clockwise. The input to your function will be the matrix, and the output should be the rotated matrix. You may assume that the matrix contains at least 1 row and 1 column, and all rows have the same number of elements. # Function Signature ```python def rotate_matrix(matrix: List[List[int]]) -> List[List[int]]: pass ``` # Input - A list of lists representing the matrix. # Output - A list of lists representing the matrix rotated 90 degrees clockwise. # Example ```python # Example 1: input_matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(input_matrix) # Output: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] # Example 2: input_matrix = [ [1, 2], [3, 4], [5, 6] ] rotate_matrix(input_matrix) # Output: # [ # [5, 3, 1], # [6, 4, 2] # ] ```","solution":"def rotate_matrix(matrix): Rotates the matrix 90 degrees clockwise. # Get the number of rows and columns in the matrix N = len(matrix) M = len(matrix[0]) # Create an empty matrix of size M x N rotated_matrix = [[0] * N for _ in range(M)] # Fill the rotated matrix for r in range(N): for c in range(M): rotated_matrix[c][N-r-1] = matrix[r][c] return rotated_matrix"},{"question":"A group of programmers is competing in a coding marathon where they need to complete a series of p challenges in q seconds. Each challenge has a certain difficulty level, represented by di (1 ≤ di ≤ 100). The more difficult a challenge, the longer it takes on average for a programmer to solve it. You have a unique skill set that allows you to boost your solving speed by concentrating harder, but you can only boost your speed for k challenges in the entire duration of the marathon. When you boost your speed, you solve the challenge in 50% of the average time it would normally take. Each di takes exactly di seconds to solve without a boost. When you use the boost on a challenge with difficulty di, it takes di / 2 seconds to solve that challenge. Determine the maximum number of challenges you can solve in the q seconds of the marathon by optimally using the k boosts. The first line of the input contains three integers p, q, and k (1 ≤ p ≤ 5000, 1 ≤ q ≤ 5000, 0 ≤ k ≤ p), separated by spaces. The next line contains p integers representing the difficulties of each challenge, separated by spaces. Output a single integer — the maximum number of challenges you can solve in q seconds. Example: ``` Input: 5 10 2 4 2 8 5 6 Output: 3 ```","solution":"def max_challenges_solved(p, q, k, difficulties): Determines the maximum number of challenges that can be solved in q seconds with the option to boost k challenges. Parameters: p (int): The number of challenges. q (int): The total seconds available. k (int): The number of challenges that can be boosted. difficulties (list of int): The difficulty levels of the challenges. Returns: int: The maximum number of challenges that can be solved. # Sort difficulties to consider easier challenges first difficulties.sort() # Split challenges into two lists: boosted and non-boosted boosted_times = [d / 2 for d in difficulties[:k]] regular_times = difficulties[k:] # Combine and sort by time needed to solve challenges combined_times = sorted(boosted_times + regular_times) total_time = 0 challenges_solved = 0 # Solve challenges as long as we have time for time in combined_times: if total_time + time <= q: total_time += time challenges_solved += 1 else: break return challenges_solved"},{"question":"You are tasked with developing an automated routing system for a city\'s public transportation network. The network is essentially a graph consisting of n bus stops, numbered from 1 to n, and m bus routes between the stops. Each bus route takes a fixed number of minutes to travel. Given the current state of the network and q queries, where each query consists of two stops, determine the minimum travel time required to go from the starting stop to the destination stop. The input is provided as follows: - The first line of input contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10,000), representing the number of bus stops and the number of bus routes, respectively. - The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 1000), representing a bus route from stop u to stop v that takes w minutes. - The following line contains a single integer q (1 ≤ q ≤ 1000), representing the number of queries. - The next q lines each contain two integers a and b (1 ≤ a, b ≤ n), representing a query for the minimum travel time from stop a to stop b. For each query, print a single integer: the minimum travel time required to go from stop a to stop b. If it is impossible to travel between the stops, print -1. Example Input: ``` 5 7 1 2 10 2 3 20 3 4 30 4 5 40 1 3 50 2 4 60 3 5 70 3 1 3 2 5 1 5 ``` Example Output: ``` 30 90 100 ``` Note: - The route network ensures that if there is a direct route u to v with a travel time of w minutes, there will not be another inefficient route between the same stops. - You can assume that the bus routes are bi-directional with the same travel time in both directions.","solution":"import heapq def dijkstra(n, graph, start): Implements the Dijkstra algorithm to find the shortest paths from the starting node. distances = {i: float(\'infinity\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def minimum_travel_time(n, m, routes, queries): Returns the minimum travel times for each query. graph = {i: [] for i in range(1, n + 1)} # Build the graph for u, v, w in routes: graph[u].append((v, w)) graph[v].append((u, w)) # because the routes are bi-directional results = [] for a, b in queries: distances = dijkstra(n, graph, a) min_time = distances[b] results.append(-1 if min_time == float(\'infinity\') else min_time) return results"},{"question":"You are given two integers, n and k, and an array a of length n. Your task is to perform the following operation exactly k times: 1. Choose any element from the array a. 2. Change it to any integer greater than its current value but less than m where m is some given integer constant. Determine the maximum possible sum of the array a after performing the operation exactly k times. **Input:** - The first line contains three integers n (1 leq n leq 100000), k (1 leq k leq n), and m (1 leq m leq 100000). - The second line contains n integers describing the array a (1 leq a_i < m). **Output:** - Print a single integer, the maximum possible sum of the array a after performing the operation exactly k times. **Example:** **Input:** ``` 5 3 10 1 2 3 4 5 ``` **Output:** ``` 33 ``` **Explanation:** By choosing the elements 1, 2, and 3 and changing them to the maximum possible value which is 9 (since 9 < 10), the array becomes [9, 9, 9, 4, 5]. Hence, the maximum possible sum is 9 + 9 + 9 + 4 + 5 = 36.","solution":"def max_possible_sum(n, k, m, a): Returns the maximum possible sum of array `a` after exactly `k` modifications where we can choose any element and increase it to an integer less than `m`. # Sort the array in ascending order a.sort() # Replace the smallest k elements with m-1 (maximum value less than m) for i in range(k): a[i] = m - 1 # Return the sum of the modified array return sum(a)"},{"question":"Sasha is planning a treasure hunt game and needs to hide clues at several locations. She has a set of n possible hiding spots and each spot has a unique integer coordinate associated with it. Sasha wants to make sure that no two clues are hidden too close to each other to prevent hunters from finding multiple clues at once. Let d be the minimum allowable distance between any two clues. Help Sasha select the maximum possible number of hiding spots such that the distance between any two selected spots is at least d. The first line of the input contains two integers n (1 ≤ n ≤ 100) and d (1 ≤ d ≤ 1000). The next line contains n integers representing the coordinates of the hiding spots. The coordinates are distinct and lie between 1 and 10000. Output a single integer representing the maximum number of hiding spots Sasha can choose under the given constraint. For example, if there are five spots located at coordinates [1, 2, 8, 12, 17] and the minimum distance d is 5, Sasha can choose the spots at coordinates 1, 8, and 17 because the distances between them (7 between 1 and 8, and 9 between 8 and 17) are greater than or equal to 5. Thus, the output should be 3.","solution":"def max_hiding_spots(n, d, coordinates): Returns the maximum number of hiding spots such that the distance between any two selected spots is at least d. # Sorting the coordinates coordinates.sort() count = 1 # We can always pick at least one spot last_location = coordinates[0] for i in range(1, n): if coordinates[i] - last_location >= d: count += 1 last_location = coordinates[i] return count # Example Usage # n = 5, d = 5, coordinates = [1, 2, 8, 12, 17] # print(max_hiding_spots(n, d, coordinates)) # Output: 3"},{"question":"You have been tasked with analyzing and updating a list of user transactions for a small online bookstore. The bookstore has a record of user purchases which contains the username and the list of books they have bought. Occasionally, users purchase books that have limited stock, and the bookstore needs to notify the users about which books are on backorder. Write a program to update the transaction logs by appending a \\"(backorder)\\" notice next to the book titles that are understocked. All the usernames and book titles are guaranteed to be unique. The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines contain the available stock information for the books. Each line contains a string title, the title of the book, followed by an integer stock, the quantity available in stock, separated by a space (1 ≤ |title| ≤ 20, 1 ≤ stock ≤ 100). The next m lines contain the user transaction logs. Each line contains a string username, the name of the user, followed by a string title, the title of the book they have purchased, separated by a space (1 ≤ |username| ≤ 15, 1 ≤ |title| ≤ 20). It is guaranteed that each title in these lines exists in the stock data. Print m lines, the user transaction logs after appending \\"(backorder)\\" next to book titles that have zero stock left. # Example Input ``` 3 4 bookA 2 bookB 0 bookC 1 alice bookA bob bookB charlie bookA diana bookC ``` Output ``` alice bookA bob bookB (backorder) charlie bookA diana bookC ```","solution":"def update_transactions_with_backorder(stock_info, transactions): stock = {} # Populate book stock information for s in stock_info: title, qty = s.split() stock[title] = int(qty) updated_transactions = [] # Update transactions based on stock information for t in transactions: username, title = t.split() if stock[title] == 0: updated_transactions.append(f\\"{username} {title} (backorder)\\") else: updated_transactions.append(f\\"{username} {title}\\") stock[title] -= 1 return updated_transactions def process_input(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) stock_info = lines[1:n+1] transactions = lines[n+1:n+1+m] return update_transactions_with_backorder(stock_info, transactions)"},{"question":"You are given a string containing lowercase English letters and a set of queries. Each query consists of two integers, representing the starting and ending indices of a substring (inclusive). For each query, determine the number of distinct characters in the specified substring. The first line of input contains a string s of length n (1 <= n <= 10^5). The second line contains an integer q (1 <= q <= 10^4), the number of queries. Each of the following q lines contains two integers l and r (1 <= l <= r <= n), representing the starting and ending indices for that query. Print the number of distinct characters for each query on a new line. # Example Input: ``` ababcabb 3 1 3 2 6 4 8 ``` Output: ``` 2 3 3 ```","solution":"def count_distinct_characters(s, queries): For each query, determine the number of distinct characters in the specified substring. Parameters: s (str): The input string queries (list of tuples): A list of tuples where each tuple contains two integers (l, r) Returns: list: A list of integers where each integer represents the number of distinct characters for the corresponding query result = [] for l, r in queries: # Subtract 1 from l and r to convert to 0-based indexing substring = s[l-1:r] distinct_count = len(set(substring)) result.append(distinct_count) return result def process_input(input_string): input_data = input_string.split(\'n\') s = input_data[0] q = int(input_data[1]) queries = [] for i in range(2, 2 + q): l, r = map(int, input_data[i].split()) queries.append((l, r)) return s, queries # Example input data as a string input_string = ababcabb 3 1 3 2 6 4 8 s, queries = process_input(input_string) result = count_distinct_characters(s, queries) print(\\"n\\".join(map(str, result)))"},{"question":"A software company is working on a new project management tool. They have a system that tracks dependencies between tasks in a project. This project is represented as a directed acyclic graph (DAG) where each node represents a task, and each directed edge represents a dependency between two tasks. A task can only start if all tasks it depends on have been completed. The company wants to determine the minimum time required to complete the entire project given that each task takes exactly one unit of time to complete. The time required to complete the project is the longest path in the DAG because that represents the critical path which all other tasks will flow into. You are given the number of tasks n and a list of dependency pairs. Each pair (u, v) indicates that task u must be completed before task v can start. Write a function that takes in the number of tasks n, and the list of dependency pairs, and returns the minimum amount of time required to complete the project. Input The first line contains an integer n – the number of tasks (1 ≤ n ≤ 100,000). The second line contains an integer m – the number of dependency pairs (0 ≤ m ≤ 200,000). Each of the next m lines contains two integers u and v, indicating that task u must be completed before task v (1 ≤ u, v ≤ n). Output Output a single integer – the minimum amount of time required to complete the entire project. Example Input: 5 4 1 2 2 3 4 3 3 5 Output: 4 Explanation: The longest path in the DAG is 1 -> 2 -> 3 -> 5, which has a length of 4. Therefore, the minimum time required to complete the entire project is 4 units of time.","solution":"from collections import defaultdict, deque def find_min_time(n, dependencies): graph = defaultdict(list) indegree = {i: 0 for i in range(1, n+1)} for u, v in dependencies: graph[u].append(v) indegree[v] += 1 queue = deque() distance = {i: 0 for i in range(1, n+1)} for node in indegree: if indegree[node] == 0: queue.append(node) distance[node] = 1 while queue: node = queue.popleft() for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) distance[neighbor] = max(distance[neighbor], distance[node] + 1) return max(distance.values())"},{"question":"**Palindrome Permutation Check** Alice and Bob are playing a game with strings. They found a string consisting of lowercase English letters and decided to check if the string can be permuted to form a palindrome. In this game, Bob wins if the string can be permuted to form a palindrome, otherwise Alice wins. A string can be permuted to form a palindrome if, and only if, at most one character occurs an odd number of times. Write a function that determines whether Bob will win if both players play optimally. # Input - The first line contains a single integer t(1 ≤ t ≤ 100), the number of test cases. - The following t lines each contain a string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. # Output - For each test case, output \\"Bob\\" if the string can be permuted to form a palindrome; otherwise, output \\"Alice\\". # Example Input ``` 3 civic ivicc hello ``` Output ``` Bob Bob Alice ``` **Explanation:** 1. The first string is \\"civic,\\" which is already a palindrome; Bob wins. 2. The second string is \\"ivicc,\\" which can be permuted to form the palindrome \\"civic\\"; Bob wins. 3. The third string is \\"hello,\\" which cannot be permuted to form a palindrome; Alice wins.","solution":"def can_be_permuted_to_palindrome(s): Determines if the string s can be permuted to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) return odd_count <= 1 def game_result(t, strings): For each string in strings, determines if Bob wins or Alice wins. results = [] for s in strings: if can_be_permuted_to_palindrome(s): results.append(\\"Bob\\") else: results.append(\\"Alice\\") return results"},{"question":"Alice and Bob love to play with strings. They have a string consisting of lowercase English letters. They take turns to make moves, and Alice moves first. In each move, the current player must choose one character in the string and remove all consecutive occurrences of that character from the string. For example, if the current string is `aabbcc`, and Alice chooses \'b\', the string becomes `aacc`. The game continues until the string becomes empty. The player who is unable to make a move (because the string is empty) loses the game. Alice\'s goal is to ensure that Bob loses the game (i.e., Alice wants to win), while Bob\'s goal is to avoid losing for as long as possible, which means Bob would try to delay Alice\'s win by making optimal moves. Given a string, determine if Alice can guarantee a win if both players play optimally. The input consists of a single string with length ranging from 1 to 100,000 characters. Output \\"YES\\" if Alice can guarantee a win, and \\"NO\\" otherwise. # Example Input ``` abba ``` Output ``` YES ``` Explanation Alice can select \'a\', making the string `bb`. Now, whatever Bob choses next, if he picks \'b\', the string would be empty and Alice wins. If he picks \'b\' again, it still will be empty on Alice\'s turn. So, Alice wins.","solution":"def can_alice_win(s): Determines if Alice can guarantee a win if both players play optimally. Alice wins if the length of the string is even, since she makes the first move. return \\"YES\\" if len(s) % 2 == 0 else \\"NO\\""},{"question":"You are given an integer n and a string s containing only lowercase English letters. Rotate the string s to the right by n positions. The first line of input contains an integer n between 0 and 100 inclusive. The second line of input contains a string s containing between 1 and 100 characters. Output the string s rotated to the right by n positions. If n is greater than the length of s, it should rotate as n modulo length of s.","solution":"def rotate_string(n, s): Rotates the string s to the right by n positions. If n is greater than the length of s, it rotates as n modulo length of s. length = len(s) n = n % length # Handle if n is greater than length of s return s[-n:] + s[:-n]"},{"question":"Jane is fascinated with Fibonacci numbers. A Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, the sequence goes 0, 1, 1, 2, 3, 5, 8, ... Jane has a task for you: Given an integer n (1 ≤ n ≤ 100), return the nth Fibonacci number. Since the answer can be very large, return it modulo 1000000007. The first line of input contains an integer n. Print the nth Fibonacci number modulo 1000000007. **Constraints**: 1 ≤ n ≤ 100 **Examples**: **Input:** 5 **Output:** 5 **Input:** 10 **Output:** 55","solution":"def fibonacci_modulo(n): Returns the nth Fibonacci number modulo 1000000007. MOD = 1000000007 if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(2, n): a, b = b, (a + b) % MOD return b"},{"question":"Polycarp wants to implement a basic calculator with the following commands: - `Add x y`: Adds x and y. - `Subtract x y`: Subtracts y from x. - `Multiply x y`: Multiplies x and y. - `Divide x y`: Divides x by y, but only for integer division, and if y is not zero. - `History`: Prints all previous calculations in the order they were performed, each on a new line. Implement a program that processes a sequence of these calculator commands and prints the results of the calculations as well as the history when requested. Each command will be on a new line and the input will contain no more than 100 commands. Each command will be correctly formatted. ```bash Input: Add 5 7 Subtract 10 3 Multiply 6 4 Divide 12 3 History Output: 12 7 24 4 Add 5 7 = 12 Subtract 10 3 = 7 Multiply 6 4 = 24 Divide 12 3 = 4 ``` Note: - For `Add x y`, `Subtract x y`, `Multiply x y`, and `Divide x y` commands, output the result of the operation on a new line. - For the `History` command, output the list of all previously performed operations and their results, each on a new line.","solution":"def calculator(commands): history = [] results = [] for command in commands: parts = command.split() op = parts[0] if op == \'Add\': x, y = int(parts[1]), int(parts[2]) result = x + y results.append(result) history.append(f\\"{command} = {result}\\") elif op == \'Subtract\': x, y = int(parts[1]), int(parts[2]) result = x - y results.append(result) history.append(f\\"{command} = {result}\\") elif op == \'Multiply\': x, y = int(parts[1]), int(parts[2]) result = x * y results.append(result) history.append(f\\"{command} = {result}\\") elif op == \'Divide\': x, y = int(parts[1]), int(parts[2]) if y != 0: result = x // y # integer division results.append(result) history.append(f\\"{command} = {result}\\") else: results.append(\\"Error: Division by zero\\") elif op == \'History\': results.extend(history) return results # Example input commands as a list commands = [ \\"Add 5 7\\", \\"Subtract 10 3\\", \\"Multiply 6 4\\", \\"Divide 12 3\\", \\"History\\" ] # Example usage print(\\"n\\".join(map(str, calculator(commands))))"},{"question":"Develop a Python function that takes a string and returns a \\"triangle string\\" as described below. A \\"triangle string\\" is a string formed by successively removing the first and last characters of the given string until the string is empty or consists of a single character. At each step, the removed characters are concatenated to form a new string which is added to the output list in the order they were formed. For example, given the input string \\"abcdef\\": - First step: remove \'a\' and \'f\' to make \\"bcde\\" - Second step: remove \'b\' and \'e\' to make \\"cd\\" - Third step: remove \'c\' and \'d\' to make an empty string Add each resulting string from the above steps to an output list: [\\"af\\", \\"be\\", \\"cd\\"]. If the input string has an odd length, the middle character will not form a pair and will be part of the final string in the list. Write a function `triangle_string(s: str) -> List[str]` that takes a single input string `s` and returns a list of strings representing the \\"triangle string.\\" # Input - A single string `s` (1 ≤ len(s) ≤ 100) # Output - A list of strings representing the \\"triangle string\\" # Function Signature ```python from typing import List def triangle_string(s: str) -> List[str]: # Your code goes here pass ``` # Example # Input ```python s = \\"abcdef\\" ``` # Output ```python [\\"af\\", \\"be\\", \\"cd\\"] ``` # Constraints 1. The input string `s` will only contain lowercase alphabets. 2. The length of `s` will not exceed 100 characters.","solution":"from typing import List def triangle_string(s: str) -> List[str]: Returns a list of strings where each string is formed by removing the first and last characters of the given string s until the string is empty or has a single character left. result = [] while len(s) > 1: result.append(s[0] + s[-1]) s = s[1:-1] return result"},{"question":"You\'ve been given a list of integers representing the heights of buildings on a straight street. Your task is to determine the total number of \\"special\\" buildings. A building is considered \\"special\\" if its height is greater than the heights of the buildings immediately adjacent to it (both left and right, if they exist). The first line contains an integer `n` (1 ≤ n ≤ 10,000) — the number of buildings. The second line contains `n` space-separated integers `h1, h2, ..., hn` (1 ≤ hi ≤ 104) — the heights of the buildings. Print a single integer — the total number of special buildings. In the first sample, the list of heights is `[2, 3, 2, 4, 2]`, and the special buildings are the ones with heights 3 and 4. In the second sample, the list of heights is `[1, 2, 1, 2, 1]`, and the special buildings are the ones with heights 2, 2 (both occurrences).","solution":"def count_special_buildings(n, heights): Returns the number of special buildings in a list where a building is considered \'special\' if it is greater than the buildings immediately adjacent to it. Parameters: n (int): The number of buildings. heights (list of int): A list of building heights. Returns: int: The number of special buildings. if n == 1: return 1 # If there is only one building, it is considered special. special_count = 0 for i in range(n): if i == 0: # For the first building, only check the building to the right. if heights[i] > heights[i + 1]: special_count += 1 elif i == n - 1: # For the last building, only check the building to the left. if heights[i] > heights[i - 1]: special_count += 1 else: # For all other buildings, check both the left and right neighbors. if heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: special_count += 1 return special_count"},{"question":"In a bustling city, there is a rectangular grid of M x N intersections denoted by rows (1 to M) and columns (1 to N). Each intersection can either have a traffic light or be empty. The city administration decided to optimize traffic by ensuring that there is exactly one traffic light in each row and one in each column, making sure that traffic is evenly distributed. If given some intersections where traffic lights are already placed, you need to find out if it is possible to place the remaining traffic lights to meet the requirement. Write a function `can_place_traffic_lights` that takes an integer M, an integer N, and a list of tuples lights where each tuple represents the position (row, column) of the already placed traffic lights. The function should return `True` if it is possible to place the remaining traffic lights to meet the requirement, and `False` otherwise. # Input - An integer M (1 ≤ M ≤ 1000). - An integer N (1 ≤ N ≤ 1000). - A list of tuples lights where each tuple (r, c) (1 ≤ r ≤ M, 1 ≤ c ≤ N) represents the position of a traffic light. # Output - Return `True` or `False`. # Example Example 1 Input: ```python M = 4 N = 4 lights = [(1, 2), (2, 4), (3, 1), (4, 3)] ``` Output: ```python True ``` Explanation: - A possible placement of traffic lights: (1, 2), (2, 4), (3, 1), (4, 3). Example 2 Input: ```python M = 3 N = 3 lights = [(1, 1), (2, 2), (3, 3)] ``` Output: ```python True ``` Explanation: - Each row and each column have a traffic light: - Row 1: Column 1 - Row 2: Column 2 - Row 3: Column 3. Example 3 Input: ```python M = 3 N = 3 lights = [(1, 1), (2, 1), (3, 3)] ``` Output: ```python False ``` Explanation: - Two traffic lights are already placed in column 1, hence it\'s impossible to keep one traffic light per column. # Function Signature ```python def can_place_traffic_lights(M: int, N: int, lights: List[Tuple[int, int]]) -> bool: pass ```","solution":"from typing import List, Tuple def can_place_traffic_lights(M: int, N: int, lights: List[Tuple[int, int]]) -> bool: if M != N: return False rows_with_lights = set() cols_with_lights = set() for r, c in lights: if r in rows_with_lights or c in cols_with_lights: return False rows_with_lights.add(r) cols_with_lights.add(c) return True"},{"question":"Maria is preparing for a special event and wants to decorate a wall with an array of paintings. She has n paintings and their widths are given in an array. Maria wants to maximize the number of paintings she can hang on the wall, but the total width of the selected paintings should not exceed the width of the wall. Each painting has a unique width and can be placed next to others in any order. You need to determine the maximum number of paintings Maria can hang on the wall without exceeding the total width. The first line of the input contains two integers n and S (1 ≤ n ≤ 100, 1 ≤ S ≤ 10^5) — the number of paintings and the width of the wall, respectively. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^4) — the widths of the paintings. Output a single integer — the maximum number of paintings Maria can hang on the wall without exceeding the total width. Example Input: ``` 5 15 2 3 4 2 5 ``` Output: ``` 4 ``` In the example, Maria can hang the paintings with widths 2, 3, 4, and 2, which gives a total width of 11, fitting within the wall width without exceeding it. This is the maximum number she can hang.","solution":"def max_paintings(n, S, widths): # Sort the list of painting widths to try smaller widths first widths.sort() total_width = 0 num_paintings = 0 for width in widths: if total_width + width <= S: total_width += width num_paintings += 1 else: break return num_paintings"},{"question":"Lucas is a big fan of video games and recently he has been playing a game where he needs to collect a specific number of unique items within a sequence of item IDs arranged chronologically. The goal is to find the shortest subarray within this sequence that contains exactly `k` unique items. Given an array of integers where each integer represents an item ID, determine the length of the shortest contiguous subarray that contains exactly `k` unique items. If there is no such subarray, return -1. **Input Format:** 1. The first line contains two integers `n` and `k` (1 le n le 2 cdot 10^5, 1 le k le n) — the length of the array and the number of unique items to find. 2. The second line contains `n` integers, representing the item IDs a_1, a_2, ldots, a_n (1 le a_i le 10^9), where `a_i` is the item ID of the `i`-th item. **Output Format:** Print the length of the shortest contiguous subarray that contains exactly `k` unique items. If no such subarray exists, print -1. **Example:** ``` Input: 7 3 1 2 1 2 3 4 3 Output: 3 Input: 5 4 1 2 3 4 5 Output: 4 Input: 6 3 1 2 2 2 2 2 Output: -1 ``` **Explanation:** In the first example, the shortest subarray that contains exactly 3 unique items is [2, 3, 4], which has a length of 3. In the second example, the shortest subarray that contains exactly 4 unique items is [2, 3, 4, 5], which has a length of 4. In the third example, there is no subarray that contains exactly 3 unique items, hence the output is -1. **Constraints:** - The input guarantees that there will always be a valid array length `n` and a number `k`. - At least one valid subarray meeting the criteria will always be present if `1 ≤ k ≤ n`.","solution":"def shortest_subarray_with_k_unique(n, k, arr): from collections import defaultdict count = defaultdict(int) num_unique = 0 left = 0 min_length = float(\'inf\') for right in range(n): if count[arr[right]] == 0: num_unique += 1 count[arr[right]] += 1 while num_unique > k: count[arr[left]] -= 1 if count[arr[left]] == 0: num_unique -= 1 left += 1 if num_unique == k: min_length = min(min_length, right - left + 1) return min_length if min_length != float(\'inf\') else -1"},{"question":"Given an integer array of length n, the task is to check whether the array can be divided into two parts such that the sum of the elements in each part is the same. If the array can be divided in such a manner, then output \\"YES\\", otherwise output \\"NO\\". For example, the array [1, 5, 11, 5] can be divided into two parts [1, 5, 5] and [11], each part having the sum 11. If the array cannot be divided into two parts with equal sum, for example, [1, 2, 3, 5], output \\"NO\\". Implement a function to solve this problem. Function Signature: `def can_partition_equal_sum(arr: List[int]) -> str:` Input: - The first line of input contains a single integer t (1 le t le 100), the number of test cases. - Each of the next t lines contains a single integer n (1 le n le 100), the length of the array, followed by n integers representing the array elements. Output: - For each test case, output a single line containing either \\"YES\\" or \\"NO\\". Example: ```python t = 2 test_cases = [ [4, 1, 5, 11, 5], [4, 1, 2, 3, 5] ] Output: YES NO ``` Note: - The function should check if it\'s feasible to divide the array into two subsets with equal sum for each test case. - It is guaranteed that the function will receive valid inputs as per the described constraints.","solution":"from typing import List def can_partition_equal_sum(arr: List[int]) -> str: total_sum = sum(arr) # If total sum is odd, can\'t partition into two equal subsets if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(arr) # Create a DP array to determine if a subset with sum `target` is possible dp = [False] * (target + 1) dp[0] = True # There\'s always a subset with sum 0: the empty set for num in arr: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[target] else \\"NO\\" def handle_test_cases(t: int, test_cases: List[List[int]]) -> List[str]: results = [] for case in test_cases: results.append(can_partition_equal_sum(case[1:])) return results"},{"question":"You are tasked with the challenge of navigating through a forest grid. The forest is represented as a 2D grid of dimensions N x M where each cell contains either trees or open space. Trees are represented by the character \'T\' and open spaces are represented by the character \'O\'. Your goal is to determine if there is a path from the upper-left corner ((0,0)) to the bottom-right corner ((N-1,M-1)). You can only move in four directions: up, down, left, and right. You cannot move through cells with trees. If there is a path, output \\"YES\\", otherwise output \\"NO\\". Input: - The first line of the input contains two integers N and M, (1 leq N, M leq 1000), the dimensions of the forest grid. - The next N lines contain M characters each, either \'T\' for tree or \'O\' for open space, representing the forest grid. Output: - Output \\"YES\\" if there is a path from (0,0) to (N-1,M-1) without moving through trees, otherwise output \\"NO\\". Example: Input: ``` 5 5 OOOOO OOTHH OOOH OOHO OHOO ``` Output: ``` YES ``` Input: ``` 3 3 OTO OTO TTT ``` Output: ``` NO ``` Note: - In the first example, there is a clear path from the top-left corner to the bottom-right corner. - In the second example, the trees block all possible paths to the target.","solution":"def is_path_exists(maze): from collections import deque N = len(maze) M = len(maze[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right if maze[0][0] == \'T\' or maze[N-1][M-1] == \'T\': return \'NO\' queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return \'YES\' for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and maze[nx][ny] == \'O\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \'NO\' def read_input(input_str): input_lines = input_str.strip().split(\'n\') N, M = map(int, input_lines[0].split()) maze = [list(line) for line in input_lines[1:]] return maze"},{"question":"You\'re given a string s of length n, at most 100,000, consisting of digits (\'0\'-\'9\'). Find the number of non-empty substrings of s that represent a multiple of 8. A substring of s is any continuous segment of s. For example, if s = \\"1234\\", then the substrings are \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"12\\", \\"23\\", \\"34\\", \\"123\\", \\"234\\", and \\"1234\\". Given a string s, find the number of substrings which when interpreted as an integer are multiples of 8. Your task is to write a function that takes a string s as input and returns an integer representing the number of such substrings. # Input The input contains a single string s (1 le |s| le 10^5), the string of digits. # Output Output a single integer, the number of substrings which represent a multiple of 8. # Example ```python Input: \\"608\\" Output: 4 Input: \\"123456\\" Output: 2 ``` # Note In the first example, the substrings that are multiples of 8 are: \\"8\\", \\"08\\", \\"608\\", and \\"0\\". Note that \\"0\\" is considered a multiple of 8. In the second example, the substrings that are multiples of 8 are \\"8\\" and \\"56\\".","solution":"def count_substrings_multiple_of_8(s): This function counts the number of non-empty substrings of `s` that represent a multiple of 8. n = len(s) count = 0 # Iterate through each end point and go backward checking last three digits for i in range(n): # Consider substrings ending at index `i` num = 0 for j in range(i, max(i - 3, -1), -1): num = int(s[j:i + 1]) if num % 8 == 0: count += 1 return count"},{"question":"You are working on a custom project management tool that helps teams track the status of their tasks. Each task is represented as an element in a list, and each element can be one of four statuses: \\"ToDo\\", \\"InProgress\\", \\"Review\\", or \\"Done\\". Tasks are arranged in this specific order based on their workflow, and your goal is to ensure that tasks follow this order on the list exactly. Given an initial list of tasks, determine the minimum number of adjacent swaps required to sort the tasks in the correct order of their status. The first line of the input contains an integer n (1 le n le 10^5) — the number of tasks. The second line contains n space-separated strings representing the status of each task. Output the minimum number of adjacent swaps required to sort the tasks. For example, given the initial list of tasks: `[\\"ToDo\\", \\"InProgress\\", \\"Done\\", \\"ToDo\\", \\"Review\\"]`, we need to sort them to: `[\\"ToDo\\", \\"ToDo\\", \\"InProgress\\", \\"Review\\", \\"Done\\"]`. In the sample above, the minimal number of adjacent swaps required to achieve the sorted list is 3.","solution":"def min_adjacent_swaps(tasks): Given a list of tasks represented by their status, returns the minimum number of adjacent swaps required to sort the tasks in the order: [\\"ToDo\\", \\"InProgress\\", \\"Review\\", \\"Done\\"] order = {\\"ToDo\\": 0, \\"InProgress\\": 1, \\"Review\\": 2, \\"Done\\": 3} def count_inversions(arr): # Merge sort to count inversions (adjacent swaps) if len(arr) < 2: return arr, 0 mid = len(arr) // 2 left, left_inv = count_inversions(arr[:mid]) right, right_inv = count_inversions(arr[mid:]) merged, split_inv = merge_and_count(left, right) return merged, left_inv + right_inv + split_inv def merge_and_count(left, right): merged = [] i = j = inversions = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: merged.append(left[i]) i += 1 else: merged.append(right[j]) inversions += (len(left) - i) j += 1 merged.extend(left[i:]) merged.extend(right[j:]) return merged, inversions task_indices = [order[task] for task in tasks] _, swaps = count_inversions(task_indices) return swaps"},{"question":"You are given an n x n grid of integers and you are required to find the sum of the maximum values in each row. However, some rows contain negative values, and you may exclude these rows from the sum. Your task is to write a function that takes in a 2D list of integers representing the grid and returns the sum of maximum values of rows that contain only non-negative integers. # Input: - An integer n (1 ≤ n ≤ 1000) that represents the size of the grid. - A 2D list of integers grid (n x n) where each element in the grid falls within the range [-10^3, 10^3]. # Output: - An integer that is the sum of maximum values of rows that contain only non-negative integers. # Example: ```python def sum_of_max_values(grid): pass # Example 1 n = 3 grid = [ [1, 2, 3], [-1, 5, 6], [7, 8, 0] ] assert sum_of_max_values(grid) == 11 # Example 2 n = 3 grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] assert sum_of_max_values(grid) == 18 ``` # Explanation: In example 1, the function should return 11 because: - First row max value is 3 (1, 2, 3) -> 3 - Second row contains a negative number (-1), so it is skipped. - Third row max value is 8 (7, 8, 0) -> 8 Sum = 3 + 8 = 11 In example 2, all rows are valid and the function should return 18 because: - First row max value is 3 (1, 2, 3) -> 3 - Second row max value is 6 (4, 5, 6) -> 6 - Third row max value is 9 (7, 8, 9) -> 9 Sum = 3 + 6 + 9 = 18","solution":"def sum_of_max_values(grid): Given a 2D list `grid` representing n x n grid of integers, this function returns the sum of the maximum values in each row that contains only non-negative integers. total_sum = 0 for row in grid: if all(x >= 0 for x in row): total_sum += max(row) return total_sum"},{"question":"Dave is participating in a programming contest where one of the tasks is to manipulate a sequence of integers. Dave\'s goal is to rearrange the given sequence so that no two adjacent elements are equal, if possible. Given a sequence of n integers, help Dave determine if it can be rearranged to meet the required condition and find one such possible arrangement if it exists. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the sequence. The second line contains n integers ai (1 ≤ ai ≤ 1000) — the sequence elements. If it is impossible to rearrange the sequence to meet the condition, output NO. Otherwise, output YES in the first line, and in the second line output any valid rearrangement of the sequence such that no two adjacent elements are equal. For example: Input: 5 1 2 3 3 3 Output: YES 3 1 3 2 3","solution":"from collections import Counter def rearrange_sequence(n, sequence): Rearranges the given sequence such that no two adjacent elements are equal, if possible. :param n: int - Number of elements in sequence :param sequence: list of int - The sequence of integers :return: tuple (str, list of int) - A tuple containing \\"YES\\"/\\"NO\\" and the rearranged list if \\"YES\\" # Count frequencies of each element freq = Counter(sequence) # Get the element with the highest frequency most_common = freq.most_common(1)[0] # If the highest frequency element appears more than (n+1) // 2 times, rearrangement is impossible if most_common[1] > (n + 1) // 2: return \\"NO\\", [] # Create an array to hold the rearranged sequence result = [0] * n # Sort elements by frequency in descending order sorted_elements = sorted(freq.items(), key=lambda x: -x[1]) index = 0 # Fill the result array by alternating elements for element, count in sorted_elements: while count > 0: result[index] = element index += 2 if index >= n: index = 1 count -= 1 return \\"YES\\", result"},{"question":"You are given an array of integers representing the daily temperatures. Your task is to write a function that generates a new array where each element in the new array represents the number of days you would have to wait until a warmer temperature appears. If there is no future day with a warmer temperature, put 0 in that position of the new array. For example, given an array of temperatures: ``` temperatures = [73, 74, 75, 71, 69, 72, 76, 73] ``` Your function should return: ``` [1, 1, 4, 2, 1, 1, 0, 0] ``` **Explanation**: - On day 1, the temperature is 73. The next day, the temperature is 74, which is warmer. So, the answer for day 1 is 1. - On day 2, the temperature is 74. The next day, the temperature is 75, which is warmer. So, the answer for day 2 is 1. - On day 3, the temperature is 75. The next warmer temperature appears 4 days later, which is 76. So, the answer for day 3 is 4. - On day 4, the temperature is 71. The next day, the temperature is 72, which is warmer. So, the answer for day 4 is 2. - On day 5, the temperature is 69. The next day, the temperature is 72, which is warmer. So, the answer for day 5 is 1. - On day 6, the temperature is 72. The next day, the temperature is 76, which is warmer. So, the answer for day 6 is 1. - On day 7, the temperature is 76. There is no future day with a warmer temperature. So, the answer for day 7 is 0. - On day 8, the temperature is 73. There is no future day with a warmer temperature. So, the answer for day 8 is 0. **Function Signature** ```python def dailyTemperatures(temperatures: List[int]) -> List[int]: ``` **Input** - `temperatures`: a list of integers representing the daily temperatures. **Output** - A list of integers where each element represents the number of days until a warmer temperature appears. If there is no future day with a warmer temperature, the element should be 0. **Constraints** - The length of the `temperatures` list will be in the range [1, 10^5]. - The value of each temperature will be in the range [30, 100].","solution":"from typing import List def dailyTemperatures(temperatures: List[int]) -> List[int]: n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_day = stack.pop() answer[prev_day] = i - prev_day stack.append(i) return answer"},{"question":"You are given a sequence of numbers representing the stock prices of a company in sequential days. Your task is to implement a function that calculates the maximum profit you can achieve by making at most one transaction (buy one and sell one share of the stock). Note that you cannot sell a stock before you buy one. Write a function `maxProfit(prices)` that takes in a list of daily stock prices and returns an integer representing the maximum profit achievable from a single buy-sell transaction. If no profit is possible, return 0. # Input - A list of integers `prices` where `prices[i]` represents the stock price on day `i`. The length of this list is between 1 and 10^5, and each value is between 0 and 10^4. # Output - An integer, the maximum profit from one transaction. If no profit can be achieved, return 0. # Example ```python maxProfit([7, 1, 5, 3, 6, 4]) ``` Output: ``` 5 ``` Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. ```python maxProfit([7, 6, 4, 3, 1]) ``` Output: ``` 0 ``` Explanation: In this case, no transactions are done and the max profit = 0. # Constraints - All elements in the `prices` list are non-negative integers. - You must design an algorithm with O(n) runtime complexity and O(1) space complexity.","solution":"def maxProfit(prices): Returns the maximum profit from a single buy-sell transaction. :param prices: List[int] - a list of stock prices :return: int - the maximum profit achievable, or 0 if no profit is possible if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price - min_price > max_profit: max_profit = price - min_price if price < min_price: min_price = price return max_profit"},{"question":"Implement a function to perform Breadth-First Search (BFS) on a graph and return the shortest path from a start node to a target node. The graph is represented as an adjacency list. If there is no path from the start node to the target node, return an empty list. You have to implement a function with the following signature: ```python def bfs_shortest_path(graph: dict, start: int, target: int) -> List[int]: # Your code here ``` # Input: - `graph`: A dictionary representing the adjacency list of the graph where keys are nodes and values are lists of adjacent nodes. - `start`: An integer representing the starting node. - `target`: An integer representing the target node. # Output: - A list of integers representing the nodes in the shortest path from `start` to `target`. If there is no path, return an empty list. # Example: ```python graph = { 0: [1, 2], 1: [2], 2: [0, 3], 3: [3] } start = 1 target = 3 bfs_shortest_path(graph, start, target) ``` # Expected Output: ```python [1, 2, 3] ``` In this example, the shortest path from node `1` to node `3` is `[1, 2, 3]`. # Constraints: - The graph can have up to `10^4` nodes. - Each node\'s adjacency list can have up to `10^3` edges.","solution":"from collections import deque from typing import List, Dict def bfs_shortest_path(graph: Dict[int, List[int]], start: int, target: int) -> List[int]: Perform BFS to find the shortest path from start node to target node in an unweighted graph. Args: graph: A dictionary where keys are nodes and values are lists of adjacent nodes. start: The starting node. target: The target node. Returns: A list of nodes representing the shortest path from start to target. If no path exists, return an empty list. if start == target: return [start] queue = deque([(start, [start])]) visited = set([start]) while queue: current_node, path = queue.popleft() for neighbor in graph.get(current_node, []): if neighbor not in visited: if neighbor == target: return path + [neighbor] queue.append((neighbor, path + [neighbor])) visited.add(neighbor) return []"},{"question":"Valera runs a bicycle rental service. He knows that n customers will rent bikes on a particular day, with each rental spanning a specific duration. For each customer, the rental start time and end time are known. Valera wants to optimize the number of bicycles available so that no customer has to wait for a bike. Help Valera determine the minimum number of bicycles he needs to have available at any point during the day to ensure that all customers can rent bikes without waiting. The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of rental customers. Each of the following n lines contains two space-separated integers si and ei (0 ≤ si < ei ≤ 10^9), representing the start time and end time of the bike rental for the i-th customer. All times are given in chronological order by start time. Print a single integer — the minimum number of bicycles needed to ensure no customers have to wait. For example, if the input is given as: 4 1 4 2 5 5 7 6 8 In this case, Valera needs a minimum of 2 bicycles. The first two customers overlap in their rental period, requiring 2 bikes at the start. The third customer returns the bike when the second rental ends, so only 1 bike is needed initially for the third and fourth customers. However, the fourth customer overlaps with the third, requiring 2 bikes again. Thus, the maximum overlap at any point is 2 rentals, indicating the minimum number of bicycles needed at the peak time.","solution":"def min_bikes_needed(rentals): Determines the minimum number of bicycles needed to ensure no customers have to wait. Parameters: rentals (list of tuples): List where each tuple contains two integers representing the start and end times (si, ei) of bike rentals. Returns: int: Minimum number of bicycles needed. events = [] for start, end in rentals: events.append((start, 1)) # +1 bike needed at the start of rental. events.append((end, -1)) # -1 bike needed at the end of rental. # Sort events first by time, using the second element as tiebreaker events.sort(key=lambda x: (x[0], x[1])) current_bikes = 0 max_bikes = 0 for event in events: current_bikes += event[1] max_bikes = max(max_bikes, current_bikes) return max_bikes # Example usage rentals = [ (1, 4), (2, 5), (5, 7), (6, 8) ] print(min_bikes_needed(rentals)) # Output: 2"},{"question":"You are given a list of integers arr of length n. Your task is to find two indices i and j (0 leq i, j < n) such that arr[i] neq arr[j] and the absolute difference between arr[i] and arr[j] is minimized. In case of multiple valid pairs, you can choose any. If no such pair exists, print -1. # Input: - The first line contains an integer n (2 leq n leq 10^5), the length of the array. - The second line contains n space-separated integers representing the elements of the array arr (1 leq arr[i] leq 10^9). # Output: - Print two integers representing the indices (i and j) such that the absolute difference between arr[i] and arr[j] is minimized. - If no such pair exists, print -1. # Examples: Example 1: **Input:** ``` 4 8 1 13 10 ``` **Output:** ``` 0 3 ``` **Explanation:** - The pairs with different values are (8, 1), (8, 13), (8, 10), (1, 13), (1, 10) and (13, 10). - The pair (8, 10) has the minimum absolute difference of 2. Example 2: **Input:** ``` 3 3 3 3 ``` **Output:** ``` -1 ``` **Explanation:** - All elements in the array are the same, so no valid pair exists.","solution":"def find_min_abs_diff_pair(arr): Returns two indices i, j such that arr[i] != arr[j] and the absolute difference between arr[i] and arr[j] is minimized. If no such pair exists, return -1. n = len(arr) if n < 2: return -1 index_arr = [(value, idx) for idx, value in enumerate(arr)] index_arr.sort() min_diff = float(\'inf\') result_pair = (-1, -1) for i in range(n - 1): if index_arr[i][0] != index_arr[i + 1][0]: diff = abs(index_arr[i + 1][0] - index_arr[i][0]) if diff < min_diff: min_diff = diff result_pair = (index_arr[i][1], index_arr[i + 1][1]) if result_pair == (-1, -1): return -1 else: return result_pair # Example usage: # n = 4 # arr = [8, 1, 13, 10] # print(find_min_abs_diff_pair(arr)) # Output: (0, 3)"},{"question":"Given a string, determine if it is possible to rearrange the characters to form a palindrome. A palindrome is a word or phrase that reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. # Input - The input consists of a single string `s` (1 ≤ |s| ≤ 1000), which may contain letters, digits, and spaces. # Output - Print \\"YES\\" if it is possible to rearrange the characters to form a palindrome, otherwise print \\"NO\\". # Examples Example 1 Input: ``` civic ``` Output: ``` YES ``` Explanation: \\"civic\\" is already a palindrome. Example 2 Input: ``` ivicc ``` Output: ``` YES ``` Explanation: \\"ivicc\\" can be rearranged to form \\"civic\\". Example 3 Input: ``` hello ``` Output: ``` NO ``` Explanation: No arrangement of \\"hello\\" can form a palindrome. # Constraints - Ignore spaces in the string. - Consider both uppercase and lowercase letters as the same (case-insensitive). - Digits and other characters should be considered as distinct characters. # Notes - The string can contain any printable ASCII characters. - The goal is to determine if a permutation of the string can form a palindrome, not necessarily the minimum transformations needed to do so.","solution":"def can_form_palindrome(s): Determine if it\'s possible to rearrange the characters of the input string to form a palindrome. Parameters: s (str): Input string containing letters, digits, and spaces. Returns: str: \\"YES\\" if the characters can be rearranged to form a palindrome, \\"NO\\" otherwise. from collections import Counter # Normalizing the string: remove spaces and convert to lowercase normalized_s = \'\'.join(s.lower().split()) # Count the frequency of each character freq = Counter(normalized_s) # Check how many characters have an odd count odd_count = sum(1 for count in freq.values() if count % 2 != 0) # For a string to be rearranged as a palindrome, # there can be at most one character with an odd count return \\"YES\\" if odd_count <= 1 else \\"NO\\" # Examples to provide context (not in final solution) # print(can_form_palindrome(\'civic\')) # YES # print(can_form_palindrome(\'ivicc\')) # YES # print(can_form_palindrome(\'hello\')) # NO"},{"question":"Word Rotation An array of strings can be rotated to the right by moving the last element to the front. For example, rotating the array `[\\"code\\", \\"assessment\\", \\"question\\"]` results in `[\\"question\\", \\"code\\", \\"assessment\\"]`. Given a non-empty list of strings and an integer `k` (where `0 <= k < len(strings)`) representing the number of rotations, write a function `rotate_strings(strings, k)` that returns a new list that represents the original list rotated to the right `k` times. **Function Signature**: ```python def rotate_strings(strings: List[str], k: int) -> List[str]: ``` **Input** - `strings`: A list of strings with length `n` (1 ≤ n ≤ 100, 1 ≤ len(string) ≤ 1000) - `k`: An integer representing the number of rotations (0 ≤ k < n) **Output** - A list of strings of length `n` representing the rotated list. **Example** ```python assert rotate_strings([\\"hello\\", \\"world\\", \\"python\\", \\"coding\\"], 2) == [\\"python\\", \\"coding\\", \\"hello\\", \\"world\\"] assert rotate_strings([\\"one\\", \\"two\\", \\"three\\"], 1) == [\\"three\\", \\"one\\", \\"two\\"] assert rotate_strings([\\"rotate\\", \\"this\\", \\"string\\"], 3) == [\\"rotate\\", \\"this\\", \\"string\\"] ``` Write the `rotate_strings` function to solve the problem.","solution":"from typing import List def rotate_strings(strings: List[str], k: int) -> List[str]: Rotates the list of strings to the right by k times. Args: - strings (List[str]): The list of strings to rotate. - k (int): The number of rotations. Returns: - List[str]: The rotated list of strings. if not strings or k == 0: return strings n = len(strings) # Normalize k in case it\'s larger than the list length k = k % n return strings[-k:] + strings[:-k]"},{"question":"You are given an array of integers a of length n. Define the function f(l, r) for the subarray a[l ldots r] (where 1 le l le r le n) as the number of integers in the subarray that are strictly greater than the median of the subarray. The median of a sequence of numbers is the middle number when they are sorted in non-decreasing order. If there is an even number of numbers, the median is the smaller of the two middle numbers. For instance, the median of the sequence [1, 3, 3, 6, 7, 8, 9] is 6, and the median of the sequence [1, 2, 3, 4, 5, 6] is 3. You need to find the maximum value of f(l, r) over all subarrays a[l ldots r]. # Input The first line contains a single integer T (1 le T le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array a. It\'s guaranteed that the total sum of n over all test cases does not exceed 10^5. # Output For each test case, print a single integer — the maximum value of f(l, r) over all subarrays. # Example Input ``` 2 5 1 3 4 2 5 6 10 20 15 3 25 6 ``` Output ``` 2 3 ``` # Explanation In the first test case, for the subarray `[1, 3, 4, 2]`, the median is `3` and the elements that are strictly greater than `3` are `4` and `5`, so `f(1, 4) = 2` is the maximum function value for subarrays of the given array. In the second test case, for the subarray `[10, 20, 15, 3, 25]`, the median is `15` and elements `20` and `25` are strictly greater than `15`, so `f(1, 5) = 3` is the maximum function value for subarrays of the given array.","solution":"def max_f_of_subarray(T, cases): def count_greater_than_median(subarray): sorted_sub = sorted(subarray) n = len(sorted_sub) median = sorted_sub[(n - 1) // 2] return len([num for num in subarray if num > median]) results = [] for case in cases: n, array = case max_f = 0 for l in range(n): for r in range(l+1, n+1): f_value = count_greater_than_median(array[l:r]) max_f = max(max_f, f_value) results.append(max_f) return results"},{"question":"You are given a string representation of a large number, which can potentially have very large values that might not fit in standard data types. Your task is to add two such large numbers and print the result. The input format is: 1. The first line contains a single integer n (1 ≤ n ≤ 1,000), the number of test cases. 2. Each test case consists of two lines. 3. The first line of each test case contains a string a (1 ≤ length of a ≤ 100,000) — the first number. 4. The second line of each test case contains a string b (1 ≤ length of b ≤ 100,000) — the second number. Output one line for each test case, containing the sum of the two numbers a and b. **Example Input** ``` 2 123456789123456789 987654321987654321 100000000000000000000 111111111111111111111 ``` **Example Output** ``` 1111111111111111110 211111111111111111111 ``` Note: You can assume that the numbers will not have leading zeros and will only consist of digits.","solution":"def large_number_addition(test_cases): Given a list of tuples representing large numbers as strings, return the sum of each pair of large numbers. results = [] for a, b in test_cases: sum_ab = str(int(a) + int(b)) results.append(sum_ab) return results"},{"question":"Discord, the spirit of chaos, has stumbled upon an interesting problem involving sequences. He wants to create a new sequence b from array a of length n by performing exactly k swap operations on a such that b is lexicographically smallest. A swap operation consists of choosing any two elements in the array and swapping them. You are tasked with helping Discord find the lexicographically smallest sequence possible after exactly k swaps. The first line contains two integers, n (1 ≤ n ≤ 100,000) and k (0 ≤ k ≤ 100,000). The second line contains n integer numbers a1, a2, ..., an (1 ≤ ai ≤ 100,000). Output the lexicographically smallest sequence possible after exactly k swaps. If it\'s impossible to perform any swaps (k = 0), output the original sequence.","solution":"def lexico_smallest_sequence(n, k, a): a = list(a) for i in range(n): if k <= 0: break # find the smallest element in the remaining part of the array min_idx = i for j in range(i + 1, n): if a[j] < a[min_idx]: min_idx = j # if min_idx is different from i, then swap them if min_idx != i: a[i], a[min_idx] = a[min_idx], a[i] k -= 1 return a"},{"question":"Given a list of integers, determine if it can be partitioned into two subsets such that the sum of elements in both subsets is the same. You are given an array of integers `arr` of length `n` (1 ≤ n ≤ 100). Write a function that returns `True` if the array can be partitioned into two subsets with equal sum, and `False` otherwise. # Input - An array of integers `arr` where each element `arr[i]` is between 1 and 100 inclusive. # Output - A boolean value indicating whether the array can be partitioned into two subsets with equal sum. # Example ```python def can_partition(arr): # Your code here # Example 1: arr = [1, 5, 11, 5] print(can_partition(arr)) # Output: True # Example 2: arr = [1, 2, 3, 5] print(can_partition(arr)) # Output: False ``` # Explanation - In Example 1, the array can be partitioned as [1, 5, 5] and [11]. - In Example 2, the array cannot be partitioned into two subsets with equal sum.","solution":"def can_partition(arr): Returns True if the array can be partitioned into two subsets with equal sum. Returns False otherwise. total_sum = sum(arr) # If total sum is odd, it\'s not possible to split into two equal sum subsets if total_sum % 2 != 0: return False # target sum for each subset target_sum = total_sum // 2 n = len(arr) # dp[i] will be True if a subset with sum i can be formed dp = [False] * (target_sum + 1) dp[0] = True # a subset with sum 0 is always possible for num in arr: for i in range(target_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target_sum]"},{"question":"A developer is working on implementing a queue management system for a hospital. The hospital has `n` departments, each with a respective urgency level defined. Patients arrive at the hospital with a particular urgency that matches one of the department\'s levels. Each patient must be allocated to the appropriate department based on urgency, and patients within each department are served on a first-come, first-served basis. Implement a function that, given a list of patients with their urgencies and the urgency levels of the departments, returns the order in which the patients will be served. The first input line contains an integer `n` (1 ≤ n ≤ 100) — the number of departments. The second line contains `n` distinct integers `u1, u2, ..., un` (1 ≤ ui ≤ 1000) — the urgency levels of the departments. The third line contains an integer `m` (1 ≤ m ≤ 1000) — the number of patients. The fourth line contains `m` integers `p1, p2, ..., pm` (1 ≤ pi ≤ 1000) — the urgencies of the patients in the order they arrive. Output `m` lines, each containing a single integer representing the urgency level of the department that will serve each patient, in the order they will be served. # Example Input ``` 3 10 20 30 5 10 20 10 30 20 ``` Output ``` 10 20 10 30 20 ``` # Explanation Departments have urgency levels 10, 20, and 30. Patients arrive with urgencies 10, 20, 10, 30, and 20. The first patient with urgency 10 is served by department with urgency level 10, the second patient with urgency 20 is served by department with urgency level 20, and so on.","solution":"def queue_management(n, departments, m, patients): This function takes: - n: number of departments - departments: a list of urgency levels of the departments - m: number of patients - patients: a list of urgencies of the patients in the order they arrive It returns a list of integers representing the urgency levels of the department that will serve each patient. # Convert departments list to a set for O(1) lookups urgency_levels = set(departments) result = [] for urgency in patients: if urgency in urgency_levels: result.append(urgency) return result"},{"question":"In a distant land, there are several magical creatures. Each creature is represented as a node in an undirected graph. The graph has n nodes (numbered from 1 to n) and m edges, allowing creatures to travel with magic between nodes. However, creatures can only travel if there exists a path between them. Your task is to help these creatures determine if they can all communicate with each other or not. Given the edges of the graph, output “YES” if every node is connected directly or indirectly with every other node, and “NO” otherwise. # Input The first line contains two integers n (1 leq n leq 10^5) and m (0 leq m leq 2 times 10^5) — the number of nodes and edges. Each of the next m lines contains two integers u and v (1 leq u, v leq n), denoting an edge between nodes u and v. It is guaranteed that there are no multiple edges between nodes. # Output Print “YES” if all nodes are connected directly or indirectly. Otherwise, print “NO”. # Example Example 1 ``` Input: 5 4 1 2 2 3 3 4 4 5 Output: YES ``` Example 2 ``` Input: 5 2 1 2 3 4 Output: NO ```","solution":"from collections import defaultdict, deque def can_communicate(n, m, edges): if n == 1: return \\"YES\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() def bfs(node): queue = deque([node]) visited.add(node) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) bfs(1) if len(visited) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an undirected graph consisting of n nodes and m edges. The nodes are numbered from 1 to n. The graph is initially empty (no edges). Your task is to progressively add edges to the graph and determine if the graph is complete at each step. A graph is considered complete if there is a direct edge between every pair of distinct nodes. In other words, in a complete graph with n nodes, there are ( frac{n(n-1)}{2} ) edges. The input consists of: - The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ ( frac{n(n-1)}{2} )) — the number of nodes and the number of edges. - The following m lines contain pairs of integers u and v (1 ≤ u, v ≤ n, u ≠ v) which represent the nodes connected by an edge. These edges are provided in the order they are added to the graph. Output m lines, where the i-th line should contain \\"Complete\\" if the graph is complete after adding the i-th edge, and \\"Incomplete\\" otherwise. The input guarantees that no edge will be repeated and that there will be exactly m lines following the first line. Example: Input: ``` 4 6 1 2 2 3 3 4 4 1 1 3 2 4 ``` Output: ``` Incomplete Incomplete Incomplete Incomplete Incomplete Complete ``` Explanation: - After adding edge (1, 2), the graph has 1 edge, it is not complete. - After adding edge (2, 3), the graph has 2 edges, it is not complete. - After adding edge (3, 4), the graph has 3 edges, it is not complete. - After adding edge (4, 1), the graph has 4 edges, it is not complete. - After adding edge (1, 3), the graph has 5 edges, it is not complete. - After adding edge (2, 4), the graph has 6 edges, which completes the graph since there is now a direct edge between every pair of nodes in the 4-node graph.","solution":"def is_complete_graph(n, m, edges): Determines if the graph is complete after each edge is added. Parameters: - n: number of nodes - m: number of edges - edges: list of tuples where each tuple represents an edge (u, v) Returns: - list of strings \\"Complete\\" or \\"Incomplete\\" at each step of adding an edge # Track the number of edges added added_edges = 0 # Maximum number of edges in a complete graph max_edges = n * (n - 1) // 2 result = [] for edge in edges: added_edges += 1 if added_edges == max_edges: result.append(\\"Complete\\") else: result.append(\\"Incomplete\\") return result"},{"question":"Cindy plans to organize a large grid of flower beds in her garden, and for the irrigation system, she needs to know the number of connected components of flower beds in the garden grid. A connected component is defined as a group of adjacent cells filled with flowers (denoted by 1s in the grid). Two cells are considered adjacent if they share a vertical or horizontal edge (not diagonal). Write a function `num_connected_components(n, m, grid)` that calculates the number of connected components in an `n` x `m` grid. The garden grid is represented as a 2D array `grid` where `grid[i][j]` is `1` if there is a flower in the cell `(i,j)` and `0` if the cell is empty. # Input - An integer `n` (1 ≤ n ≤ 100), the number of rows in the garden grid. - An integer `m` (1 ≤ m ≤ 100), the number of columns in the garden grid. - A list of lists of integers, `grid`, representing the garden grid, where each integer is either `0` or `1`. # Output - An integer representing the number of connected components of flower beds in the garden grid. # Example Input ``` 3 3 1 1 0 0 1 0 1 0 1 ``` Output ``` 3 ``` Explanation There are 3 connected components in the given grid: 1. The first two flower cells (1s) in the first row and the one in the second row form one connected component. 2. The flower cell in the third row, first column forms another connected component. 3. The lonely flower cell in the third row, third column forms the third connected component. # Note - Make sure to handle edge cases, such as an empty grid (all 0s) or a fully occupied grid (all 1s). - You may use Depth First Search (DFS) or Breadth First Search (BFS) to explore the connected components in the grid. Implement the function `num_connected_components(n, m, grid)` that will find and return the number of connected components.","solution":"def num_connected_components(n, m, grid): def dfs(x, y): stack = [(x, y)] while stack: i, j = stack.pop() if i < 0 or j < 0 or i >= n or j >= m or grid[i][j] == 0: continue grid[i][j] = 0 stack.append((i-1, j)) stack.append((i+1, j)) stack.append((i, j-1)) stack.append((i, j+1)) count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: dfs(i, j) count += 1 return count"},{"question":"You are given a rectangular matrix of characters. Your task is to determine if a specific word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. The first input line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of rows and columns of the matrix respectively. The next n lines contain m characters each, representing the matrix. The last line contains the word to be constructed, which consists of lowercase English letters and has a length of at most 100. Output \\"YES\\" if the word can be constructed from the matrix, otherwise output \\"NO\\". Example: Input: 3 4 a b c e s f c s a d e e abcced Output: YES Input: 3 4 a b c e s f c s a d e e see Output: YES Input: 3 4 a b c e s f c s a d e e abfb Output: NO","solution":"def exist(board, word): def dfs(board, word, i, j, k): if k == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]: return False temp = board[i][j] board[i][j] = \'\' found = dfs(board, word, i+1, j, k+1) or dfs(board, word, i-1, j, k+1) or dfs(board, word, i, j+1, k+1) or dfs(board, word, i, j-1, k+1) board[i][j] = temp return found n = len(board) m = len(board[0]) for i in range(n): for j in range(m): if dfs(board, word, i, j, 0): return \\"YES\\" return \\"NO\\" # Example usage n, m = 3, 4 matrix = [ [\'a\',\'b\',\'c\',\'e\'], [\'s\',\'f\',\'c\',\'s\'], [\'a\',\'d\',\'e\',\'e\'] ] word = \\"abcced\\" print(exist(matrix, word)) # Outputs: YES word = \\"see\\" print(exist(matrix, word)) # Outputs: YES word = \\"abfb\\" print(exist(matrix, word)) # Outputs: NO"},{"question":"You are given a string containing a set of words separated by spaces. Your task is to rearrange the words in the string in alphabetical order and return the new sorted string. All words are case-insensitive for sorting purposes, but the returned string should maintain the original case of each word. Write a function that takes a single string as input and returns a string with the words sorted in alphabetical order. # Function Signature ```python def sort_words(input_str: str) -> str: ``` # Input - `input_str` (1 ≤ len(input_str) ≤ 1000): a string consisting of English letters and spaces. # Output - A single string with words sorted alphabetically, maintaining the original case of each word. # Examples 1. `sort_words(\\"Banana apple cherry\\")` should return `\\"apple Banana cherry\\"` 2. `sort_words(\\"Hello world\\")` should return `\\"Hello world\\"` 3. `sort_words(\\"A quick brown fox jumps over the lazy dog\\")` should return `\\"A brown dog fox jumps lazy over quick the\\"` # Notes - Punctuation should be ignored in the sorting process and can be left as-is in the final output. - The input string may contain multiple spaces between words, but they should be reduced to a single space in the sorted output. - Sorting should be case-insensitive (i.e., \\"apple\\" and \\"Apple\\" are considered equivalent for sorting purposes). # Hint Use Python\'s `sorted` function with a custom key (`str.lower`) to sort the words in a case-insensitive manner.","solution":"def sort_words(input_str: str) -> str: Sorts the words in a string in alphabetical order, case-insensitive, while maintaining the original case and ignoring extra spaces between words. # Split the input string into words words = input_str.split() # Sort the words in a case-insensitive manner sorted_words = sorted(words, key=str.lower) # Join the sorted words back into a single string with a single space between each sorted_str = \' \'.join(sorted_words) return sorted_str"},{"question":"Given an integer `n`, generate all combinations of balanced parentheses of length `2*n`. A string containing `2*n` characters is considered to have balanced parentheses if it contains equal number of \'(\' and \')\' characters and at any position in the string the number of \')\' characters never exceeds the number of \'(\' characters. For example, given `n = 3`, the expected output is: ``` [ \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\" ] ``` Your task is to implement a function `generateParentheses(n: int) -> List[str]` that takes an integer `n` as input and returns a list of strings where each string is a unique combination of balanced parentheses of length `2*n`. # Input - The input consists of a single integer `n` where `1 <= n <= 8`. # Output - The output should be a list of strings, each representing a unique combination of balanced parentheses of length `2*n`. # Example Input: ``` 3 ``` Output: ``` [ \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\" ] ``` # Note - Make sure that the output list is in sorted order to maintain consistency (lexicographical order). - You may use any standard programming language and assume it has a standard library for list handling and string manipulation.","solution":"from typing import List def generateParentheses(n: int) -> List[str]: def backtrack(S, left, right): if len(S) == 2 * n: result.append(\\"\\".join(S)) return if left < n: S.append(\\"(\\") backtrack(S, left + 1, right) S.pop() if right < left: S.append(\\")\\") backtrack(S, left, right + 1) S.pop() result = [] backtrack([], 0, 0) return sorted(result)"},{"question":"A group of scientists are monitoring the weather conditions in a specific region over a period of days. They want to analyze the temperature variations to identify any significant patterns. Each day, the scientists record the temperature readings at various times, but they are particularly interested in finding out the maximum temperature difference observed in any given day. You are given an array `temperatures` where each element represents a temperature reading recorded at a specific time on a particular day. Your task is to determine the maximum difference between any two temperature readings within the same day. # Input - The first line contains an integer `n` (2 ≤ n ≤ 100), the number of temperature readings. - The second line contains `n` space-separated integers representing the temperature readings recorded on that day. # Output - A single integer representing the maximum temperature difference observed on that day. # Constraints - Each temperature reading is an integer between -100 and 100 inclusive. # Example Input ``` 5 -10 0 15 -5 20 ``` Output ``` 30 ``` Explanation: The maximum difference is between the lowest temperature (-10) and the highest temperature (20), which is 20 - (-10) = 30.","solution":"def max_temperature_difference(n, temperatures): Determines the maximum difference between any two temperature readings within the same day. Parameters: n (int): Number of temperature readings. temperatures (list of int): List of temperature readings. Returns: int: The maximum temperature difference. min_temp = min(temperatures) max_temp = max(temperatures) return max_temp - min_temp"},{"question":"You are given an integer X representing the number of sticks. Each stick has a length. You need to determine the maximum length of a square that can be formed using these sticks. Each side of the square must be formed by exactly one stick. Your task is to find and print the maximum possible length of the square, or -1 if a square cannot be formed. The first line of input contains an integer X (1 ≤ X ≤ 100). The second line contains X integers separated by spaces, representing the lengths of the sticks. Output the maximum possible length of the square\'s side or -1 if it is not possible to form a square. Example: Input 4 5 7 8 5 Output 5","solution":"def max_square_length(X, lengths): Returns the maximum possible length of the square\'s side, or -1 if it is not possible to form a square. # Create a dictionary to count the occurrences of each stick length length_count = {} for length in lengths: if length in length_count: length_count[length] += 1 else: length_count[length] = 1 # Find the maximum length that forms at least 4 sticks max_square = -1 for length, count in length_count.items(): if count >= 4: max_square = max(max_square, length) return max_square"},{"question":"You are given an array `arr` of `n` non-negative integers and a target sum `S`. Your task is to determine whether there exists a subset of `arr` that sums up to `S`. Write a function `subset_sum_exists` to solve the problem. If such a subset exists, return `True`. Otherwise, return `False`. # Function Signature ```python def subset_sum_exists(arr: List[int], S: int) -> bool: pass ``` # Input - An integer `n` (1 leq n leq 100), representing the size of the array. - An array `arr` of `n` non-negative integers (0 leq arr[i] leq 10^5). - An integer `S` (0 leq S leq 10^5), representing the target sum. # Output - A single boolean value (`True` or `False`) indicating whether there exists a subset of `arr` that sums up to `S`. # Example ```python assert subset_sum_exists([3, 34, 4, 12, 5, 2], 9) == True assert subset_sum_exists([3, 34, 4, 12, 5, 2], 30) == False assert subset_sum_exists([1, 3, 9, 2], 4) == True ``` # Constraints - You can use extra space to store intermediate results, as long as it is within reasonable bounds. - The expected time complexity should be better than a naive solution that checks all possible subsets directly.","solution":"def subset_sum_exists(arr, S): Determines if there exists a subset of `arr` that sums up to `S` n = len(arr) dp = [False] * (S + 1) dp[0] = True for num in arr: for j in range(S, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[S]"},{"question":"You are given a list of n integers. Your task is to find the smallest positive integer that is not present in the list. The first line contains integer n – the length of the list (1 ≤ n ≤ 2·105). The second line contains n space-separated integers ai (1 ≤ ai ≤ 109). Print the smallest positive integer that is not in the list.","solution":"def find_missing_positive_integer(lst): Given a list of integers, this function returns the smallest positive integer that is not present in the list. # Convert the list to a set for faster lookup num_set = set(lst) smallest_missing = 1 # Iterate over positive integers starting from 1 while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"Katie is conducting a study on tree structures. She has a tree with n nodes, and each node has an initial value associated with it. Katie can perform the following two types of operations any number of times: 1. Choose any node v and add a value x to its current value. 2. Choose any pair of nodes u and v (where u is the parent of v) and swap their values. Katie wants to maximize the sum of values of the nodes in any subtree of the tree. Your task is to help her determine the maximum possible sum of the values in any subtree after performing the operations optimally. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1,000,000), where vi represents the initial value of the ith node. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n) — meaning there is an edge between nodes u and v in the tree. Print a single integer — the maximum possible sum of values in any subtree after performing the operations optimally.","solution":"def max_subtree_sum(n, values, edges): Given a tree with n nodes and their initial values, along with edges that define the tree structure, this function returns the maximum possible sum of the values in any subtree after performing the defined operations optimally. :param n: Number of nodes in the tree :param values: List of initial values for each node :param edges: List of edges connecting the nodes, each represented as a tuple (u, v) :return: Maximum possible sum of values in any subtree # As each node value can be made arbitrarily large, the optimal solution would be n * max_value return n * max(values) # Example usage: # n = 5 # values = [1, 2, 3, 4, 5] # edges = [(1, 2), (1, 3), (3, 4), (3, 5)] # This should return 5 * 5 = 25"},{"question":"In a grid-based battle game, each player commands a fleet of ships on a 10x10 grid. Each ship occupies a single cell on the grid and has a certain number of hit points (HP). During the game, players take turns to attack each other’s ships. An attack specifies a target cell and a damage value. If a ship is located at the target cell, it takes damage equal to the specified value. If the damage reduces a ship’s HP to zero or less, the ship is considered destroyed and is removed from the game. You are given the initial state of the grid with the positions and HP of the ships. Your task is to simulate a series of attacks and determine which ships remain on the grid after all the attacks are performed. The first line of the input contains an integer n (1 ≤ n ≤ 10) — the number of ships. The following n lines each contain three integers xi, yi, hpi (1 ≤ xi, yi ≤ 10, 1 ≤ hpi ≤ 100) — the x-coordinate, y-coordinate, and hit points of the i-th ship. The next line contains an integer m (1 ≤ m ≤ 100) — the number of attacks. The following m lines each contain three integers xj, yj, dj (1 ≤ xj, yj ≤ 10, 1 ≤ dj ≤ 100) — the x-coordinate, y-coordinate, and damage of the j-th attack. Output the coordinates of the ships that remain on the grid after all the attacks in the order they appear in the input. For each remaining ship, output its x-coordinate and y-coordinate. If no ships remain, output \\"All ships have been destroyed.\\" Example: Input: 3 2 3 50 5 5 100 7 8 75 4 2 3 30 5 5 50 7 8 100 2 3 25 Output: 5 5 Explanation: Initial states: - Ship 1: Located at (2, 3) with 50 HP - Ship 2: Located at (5, 5) with 100 HP - Ship 3: Located at (7, 8) with 75 HP Attacks: 1. Attack (2,3) with 30 damage → Ship 1: 50 HP - 30 damage = 20 HP 2. Attack (5,5) with 50 damage → Ship 2: 100 HP - 50 damage = 50 HP 3. Attack (7,8) with 100 damage → Ship 3: 75 HP - 100 damage = -25 HP (destroyed) 4. Attack (2,3) with 25 damage → Ship 1: 20 HP - 25 damage = -5 HP (destroyed) Remaining ships: - Only Ship 2 at coordinates (5, 5)","solution":"def simulate_battle(n, ships, m, attacks): # Creating the grid and mapping initial ship positions with their HP grid = {} for x, y, hp in ships: grid[(x, y)] = hp # Simulate each attack for x, y, damage in attacks: if (x, y) in grid: grid[(x, y)] -= damage if grid[(x, y)] <= 0: del grid[(x, y)] # Prepare the result of remaining ships in the order they appeared result = [] for x, y, hp in ships: if (x, y) in grid: result.append((x, y)) if not result: return \\"All ships have been destroyed.\\" return result"},{"question":"You are given an array of n integers. Your task is to find and print two indices i and j (1 ≤ i < j ≤ n) such that the absolute difference between the elements a[i] and a[j] is maximal possible. The first line of input contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output the indices i and j (1 ≤ i < j ≤ n) such that |a[i] - a[j]| is the highest possible. If there are multiple pairs with the same absolute difference, output any one of them. In the first sample output: The value at index 1 is 1, and the value at index 3 is 9, making the absolute difference |1-9| = 8, which is the maximum difference for the provided array. Example input: ``` 5 1 3 9 4 6 ``` Example output: ``` 1 3 ```","solution":"def find_max_diff_indices(arr): Finds and returns indices i and j such that the absolute difference between arr[i] and arr[j] is maximal possible with i < j. min_index = 0 max_index = 0 for i in range(1, len(arr)): if arr[i] < arr[min_index]: min_index = i if arr[i] > arr[max_index]: max_index = i if min_index < max_index: return (min_index + 1, max_index + 1) else: return (max_index + 1, min_index + 1)"},{"question":"You are given an `n` x `n` grid populated by different characters. Your task is to check if there is a path from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (n-1, n-1) using a depth-first search (DFS) algorithm. The path can only be formed by characters that are either \'a\' or \'b\'. A path is a series of connected cells that move either vertically or horizontally (not diagonally). The cell values in the path must alternate between \'a\' and \'b\'. Write a function `is_path_exists(grid: List[List[str]]) -> bool` that returns `True` if such a path exists, otherwise return `False`. # Input - An integer `n` (1 ≤ n ≤ 1000), representing the size of the grid. - `n` lines follow, each containing `n` characters from the set {\'a\', \'b\', \'c\', ..., \'z\'}. # Output - Print \\"YES\\" (without quotes) if a valid path exists, otherwise print \\"NO\\" (without quotes). # Example Input: ``` 3 a b c b a b c b a ``` Output: ``` YES ``` Input: ``` 3 a b c c a b b c a ``` Output: ``` NO ``` # Note: In the first example, a valid path exists: ``` a → b ↓ b → a ↓ a ``` In the second example, no valid path exists from (0,0) to (n-1,n-1) alternating between \'a\' and \'b\'.","solution":"from typing import List def is_path_exists(grid: List[List[str]]) -> bool: n = len(grid) target_char = \'a\' if grid[0][0] == \'b\' else \'b\' def dfs(x, y, prev_char): if x == n - 1 and y == n - 1: return True if x < 0 or y < 0 or x >= n or y >= n: return False if grid[x][y] != prev_char: return False tmp, grid[x][y] = grid[x][y], \'.\' if (x + 1 < n and dfs(x + 1, y, \'a\' if prev_char == \'b\' else \'b\')) or (x - 1 >= 0 and dfs(x - 1, y, \'a\' if prev_char == \'b\' else \'b\')) or (y + 1 < n and dfs(y + 1, x, \'a\' if prev_char == \'b\' else \'b\')) or (y - 1 >= 0 and dfs(y - 1, x, \'a\' if prev_char == \'b\' else \'b\')): return True grid[x][y] = tmp return False if grid[0][0] == \'a\' or grid[0][0] == \'b\': return dfs(0, 0, grid[0][0]) return False"},{"question":"Alice has a collection of beads where each bead has a unique integer value. She wants to create a series of necklaces by picking beads consecutively from the collection such that the sum of the bead values in each necklace is even. Each bead can be used exactly once. Your task is to help Alice determine the maximum number of necklaces she can create. The first line of input contains an integer n (1 ≤ n ≤ 200,000) — the number of beads in Alice\'s collection. The second line contains n integers bi (1 ≤ bi ≤ 1,000) — the values of the beads. Output a single integer, the maximum number of necklaces Alice can create. # Example Input: ``` 6 2 4 6 3 1 5 ``` Output: ``` 4 ``` Explanation: In this example, Alice can create four necklaces with the following bead values: - Necklace 1: [2] - Necklace 2: [4] - Necklace 3: [6] - Necklace 4: [3, 1, 5] Each necklace has an even sum of bead values. Note that single bead necklaces can consist of beads with even values.","solution":"def max_necklaces(n, beads): even_count = sum(b % 2 == 0 for b in beads) odd_count = n - even_count return even_count + odd_count // 2"},{"question":"You are given an array of integers representing a binary tree in level-order traversal form. Your goal is to construct the binary tree and find the maximum path sum. The path must start and end at any node in the binary tree but can only move through nodes consecutively along parent-child connections. The tree is represented as an array where the first element is the root, the next two elements form the children of the root, the next four elements form the children of the next level, and so on. Some elements of the array may be null, indicating that the corresponding node does not exist. Write a function to achieve this: - **Function Signature:** `def max_path_sum(tree: List[Optional[int]]) -> int` - **Parameter:** - `tree` (List[Optional[int]]): A list of integers (or None) representing the binary tree in level-order traversal. - **Returns:** - `int`: The maximum path sum for the given binary tree. # Constraints - The number of nodes in the binary tree is between 1 and 1000. - The values of the nodes are between -1000 and 1000. # Example Input: ```python tree = [1, 2, 3, None, 4, 5, 6] ``` Output: ```python 16 ``` Explanation: The binary tree represented by the given array is: ``` 1 / 2 3 / 4 5 6 ``` The maximum path sum is 4 -> 2 -> 1 -> 3 -> 6 = 16.","solution":"from typing import List, Optional class TreeNode: def __init__(self, val: int): self.val = val self.left = None self.right = None def build_tree(tree: List[Optional[int]]) -> Optional[TreeNode]: if not tree: return None nodes = [None if val is None else TreeNode(val) for val in tree] kids = nodes[::-1] root = kids.pop() for node in nodes: if node: if kids: node.left = kids.pop() if kids: node.right = kids.pop() return root def max_path_sum(tree: List[Optional[int]]) -> int: def max_gain(node: Optional[TreeNode]) -> int: nonlocal max_sum if not node: return 0 # Recursively get the max gain from left and right subtrees left_gain = max(max_gain(node.left), 0) right_gain = max(max_gain(node.right), 0) # Current path sum includes the node\'s value and maximum gain from both sides current_sum = node.val + left_gain + right_gain # Update max_sum if current_sum is higher max_sum = max(max_sum, current_sum) # Return the maximum gain the current node provides return node.val + max(left_gain, right_gain) root = build_tree(tree) max_sum = float(\'-inf\') max_gain(root) return max_sum"},{"question":"In a kitchen, there are n jars of cookies. For simplicity, we denote the number of cookies in the i-th jar as ai. You have m friends visiting, and each friend has an infinite capacity for eating cookies but decided not to exhibit gluttony — they will only take cookies from one jar. You want to distribute the jars such that each friend gets exactly one jar of cookies. Friends may not share jars, and no friend should get an empty jar. Determine if it is possible to distribute all jars to your friends, so that no friend gets an empty jar and there are no jars left undealt. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of jars and the number of friends. The second line contains n integers ai (1 ≤ ai ≤ 100) — the number of cookies in each jar. Output «YES» if you can distribute the jars among your friends in a fair manner and «NO» otherwise. Example: For the input: ``` 4 3 3 2 5 7 ``` The output should be: ``` YES ``` For the input: ``` 5 6 1 2 3 4 5 ``` The output should be: ``` NO ``` Explanation: In the first sample, we can give one jar to each friend and still have one extra jar not assigned. In the second sample, there are more friends than jars, so it’s impossible to give each friend a jar. Thus, the answer is «NO».","solution":"def can_distribute_cookies(n, m, cookies): Returns \\"YES\\" if it is possible to distribute the jars among the friends such that no friend gets an empty jar and there are no jars left undealt, otherwise returns \\"NO\\". if m <= n: return \\"YES\\" else: return \\"NO\\""},{"question":"Ujan is a musician who loves creating new tunes by combining existing melodies. He has two melodies represented as strings a and b of length n, consisting of lowercase English characters. Ujan wants to determine how many distinct substrings of length m are common to both strings. A substring of a string is a contiguous sequence of characters within the string. For example, the substrings of length 2 of the string \\"abc\\" are \\"ab\\" and \\"bc\\". Your task is to help Ujan by writing a program that finds the number of distinct substrings of length m that appear in both strings. The first line contains a single integer k (1 leq k leq 100), the number of test cases. For each of the test cases, the first line contains two integers n and m (1 leq m leq n leq 100), the length of the strings and the length of the substrings to consider, respectively. Each of the next two lines contains the strings a and b, each having length exactly n. The strings consist only of lowercase English letters. Output the number of distinct common substrings of length m for each test case. # Example Input: ``` 2 5 3 abcde bcdef 4 2 abab baba ``` Output: ``` 2 3 ``` # Explanation For the first test case: - The substrings of length 3 in \\"abcde\\" are: \\"abc\\", \\"bcd\\", \\"cde\\". - The substrings of length 3 in \\"bcdef\\" are: \\"bcd\\", \\"cde\\", \\"def\\". - The common substrings of length 3 are \\"bcd\\" and \\"cde\\", so the answer is 2. For the second test case: - The substrings of length 2 in \\"abab\\" are: \\"ab\\", \\"ba\\", \\"ab\\". - The substrings of length 2 in \\"baba\\" are: \\"ba\\", \\"ab\\", \\"ba\\". - The common substrings of length 2 are \\"ab\\" and \\"ba\\", so the answer is 2. However, \\"ab\\" appears twice in \\"abab\\" and once in \\"baba\\"; similarly, \\"ba\\" appears twice in \\"baba\\" and once in \\"abab\\". The distinct common substrings are \\"ab\\" and \\"ba\\", counting each distinct substring exactly once for each test case. Therefore, the answer is 3.","solution":"def distinct_common_substrings(test_cases): results = [] for n, m, a, b in test_cases: substr_a = {a[i:i+m] for i in range(n - m + 1)} substr_b = {b[i:i+m] for i in range(n - m + 1)} common_substrings = substr_a & substr_b results.append(len(common_substrings)) return results def parse_input(input_str): lines = input_str.split(\'n\') k = int(lines[0]) test_cases = [] index = 1 for _ in range(k): n, m = map(int, lines[index].split()) a = lines[index+1] b = lines[index+2] test_cases.append((n, m, a, b)) index += 3 return test_cases"},{"question":"You are given a string consisting of equal numbers of opening and closing brackets of three types: \'()\', \'[]\', and \'{}\'. Your task is to determine if the string is a balanced string, i.e., whether each opening bracket has a corresponding closing bracket and the pairs of brackets are properly nested. A string is considered balanced if: - The string is an empty string, or - Every opening bracket has a corresponding closing bracket, and - Each pair of brackets is correctly nested. For example, the strings \\"{}[]()\\", \\"{[()]}\\", and \\"[{()}]\\" are balanced, while the strings \\"{[(])}\\", \\"{{[[(())]]}}\\", and \\"{[}]\\" are not. The input consists of a single string of length at most 1000, containing characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Write a function that takes a string as input and returns \\"YES\\" if the string is balanced, and \\"NO\\" otherwise. Function signature: ```python def is_balanced(s: str) -> str: pass ``` Example: ``` Input: \\"{[()]}\\" Output: \\"YES\\" Input: \\"{[(])}\\" Output: \\"NO\\" ```","solution":"def is_balanced(s: str) -> str: Determines if the given string of brackets is balanced. Parameters: s (str): The input string containing brackets. Returns: str: \\"YES\\" if the string is balanced, \\"NO\\" otherwise. stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in \\"({[\\": stack.append(char) elif char in \\")}]\\": if not stack or stack[-1] != matching_bracket[char]: return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are tasked with developing a warehouse management system for an e-commerce business. The warehouse contains multiple shelves, and each shelf can hold a specific number of items. You need to design a system to handle two types of operations: adding items to a shelf and querying the number of items on a specific shelf. The warehouse is initially empty, with no items on any shelf. # Operations 1. **Add Items**: An operation to add a certain number of items to a specific shelf. 2. **Query Items**: An operation to find the number of items currently on a specific shelf. # Input The first line contains two integers `n` and `q` (`1 ≤ n ≤ 10^3`, `1 ≤ q ≤ 10^5`), the number of shelves and the number of operations, respectively. Each of the following `q` lines contains an operation in one of the following formats: - `\\"ADD x y\\"`: Add `y` items to shelf number `x` (`1 ≤ x ≤ n`, `1 ≤ y ≤ 10^6`). - `\\"QUERY x\\"`: Query the number of items on shelf number `x` (`1 ≤ x ≤ n`). # Output For each `QUERY` operation, output the number of items currently on the specified shelf. # Example ```plaintext Input: 5 5 ADD 1 100 ADD 2 200 QUERY 1 ADD 3 300 QUERY 2 Output: 100 200 ``` # Explanation 1. The first operation adds 100 items to shelf 1. 2. The second operation adds 200 items to shelf 2. 3. The third operation queries the number of items on shelf 1, which is 100. 4. The fourth operation adds 300 items to shelf 3. 5. The fifth operation queries the number of items on shelf 2, which is 200.","solution":"def warehouse_management_system(n, q, operations): Handles operations to add items to shelves and query the number of items on shelves. Parameters: n (int): The number of shelves. q (int): The number of operations. operations (list of str): The operations to be performed. Returns: list of int: The results of the query operations. # Initialize shelves with zero items shelves = [0] * n results = [] for operation in operations: parts = operation.split() if parts[0] == \\"ADD\\": shelf_number = int(parts[1]) - 1 items = int(parts[2]) shelves[shelf_number] += items elif parts[0] == \\"QUERY\\": shelf_number = int(parts[1]) - 1 results.append(shelves[shelf_number]) return results"},{"question":"After a long day of exploring a mystical forest, Yara, a young adventurer, finds an ancient magical scroll. The scroll contains a puzzle that can unlock great treasures. The puzzle is as follows: You are given an array of positive integers. For each subset of the array, we define the maximum sum of any three elements in the subset. Your task is to find the smallest maximum sum for all subsets of the array that contain at least three elements. If no such subset exists, return -1. The input format is: - The first line contains an integer t (1 leq t leq 100) — the number of test cases. - For each test case, the first line contains an integer n (3 leq n leq 1,000) — the number of elements in the array. - The second line contains n positive integers a_i (1 leq a_i leq 10^6) — the elements of the array. The output format is: - For each test case, output a single integer — the smallest maximum sum for all subsets containing at least three elements, or -1 if no such subset exists. Example: Input: ``` 2 5 1 2 3 4 5 3 2 4 8 ``` Output: ``` 9 14 ``` Explanation: In the first test case, the smallest maximum sum of any three-element subset is from the subset {2, 3, 4}, which sums up to 9. In the second test case, the only three-element subset is {2, 4, 8}, and its sum is 14.","solution":"def smallest_maximum_sum(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] if n < 3: results.append(-1) continue arr.sort(reverse=True) results.append(arr[0] + arr[1] + arr[2]) return results"},{"question":"Given a sequence of integers, you have to answer several queries. Each query asks you to find the sum of a subarray from index `l` to index `r`. You will be given an array of integers and two types of queries: 1. Calculate the sum of integers from index `l` to `r` (1-based index). 2. Update the value at a specific index. # Input The first line of the input contains two integers `n` and `q` (1 leq n, q leq 200,000) — the number of elements in the array and the number of queries, respectively. The second line contains `n` integers representing the array `a` (-10^9 leq a[i] leq 10^9). The following `q` lines describe the queries. Each query is in one of the following two formats: - `1 l r` (1-based indexes): Calculate and print the sum of the subarray from index `l` to `r`. - `2 i x`: Update the value at index `i` to `x`. # Output For each query of the first type, print the result on a new line. # Example Input ``` 5 5 1 2 3 4 5 1 1 3 2 3 10 1 1 3 1 3 5 2 5 -1 ``` Output ``` 6 13 9 ``` # Explanation Initially, the array is `[1, 2, 3, 4, 5]`. - The first query asks for the sum of the subarray from index 1 to 3: `1 + 2 + 3 = 6`. - The second query updates the value at index 3 to 10, resulting in the array `[1, 2, 10, 4, 5]`. - The third query asks for the sum of the subarray from index 1 to 3: `1 + 2 + 10 = 13`. - The fourth query asks for the sum of the subarray from index 3 to 5: `10 + 4 + 5 = 19`. - The fifth query updates the value at index 5 to -1, resulting in the array `[1, 2, 10, 4, -1]`.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, left, right): left, right = left + self.n, right + self.n result = 0 while left < right: if left % 2: result += self.tree[left] left += 1 if right % 2: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_queries(n, q, array, queries): segment_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: l, r = query[1] - 1, query[2] results.append(segment_tree.query(l, r)) elif query[0] == 2: i, x = query[1] - 1, query[2] segment_tree.update(i, x) return results"},{"question":"In a magical forest, there are several types of mystical fruits hanging on trees. Each type of fruit is represented by its own distinct positive integer. A forest keeper needs to collect exactly two different types of fruits such that their combined sum is equal to a given magical number k. Note that the forest contains at most one pair of such fruits that can be collected. The forest keeper has a list of integers representing the types of fruits in the forest. You need to determine the two different types of fruits whose sum equals k and return their values in ascending order. If no such pair exists, return an empty list. The first line contains the integer n (1 ≤ n ≤ 10^5), the number of different types of fruits in the forest. The second line contains n space-separated integers representing the types of fruits present (each fruit type is a positive integer not exceeding 10^9). The third line contains the integer k (2 ≤ k ≤ 2 * 10^9), the magical number. Output the two different types of fruits in ascending order separated by space if such a pair exists. Otherwise, output an empty list. Example: Input: 5 4 7 11 15 18 22 Output: 4 18 Explanation: The forest keeper can collect fruits of type 4 and type 18 because their sum is 22.","solution":"def find_fruit_pair(n, fruits, k): Returns a pair of different types of fruits whose combined sum equals k. Parameters: n (int): Number of different types of fruits. fruits (list): List of integers representing the types of fruits present. k (int): The magical number. Returns: list: A list of two integers representing the types of fruits in ascending order, or an empty list if no such pair exists. fruit_set = set(fruits) for fruit in fruits: if (k - fruit) in fruit_set and fruit != (k - fruit): return sorted([fruit, k - fruit]) return [] # Example Usage n = 5 fruits = [4, 7, 11, 15, 18] k = 22 print(find_fruit_pair(n, fruits, k)) # Output: [4, 18]"},{"question":"Given a string s consisting of lowercase and uppercase English letters, we define a pair of indices (i, j) to be valid if s_i and s_j are the same character in opposite cases (one uppercase and one lowercase). You need to find the number of such valid pairs (i, j) where 1 leq i < j leq |s|. For example, given the string s = \\"aAbBcC\\", the valid pairs would be: - (1, 2) for s_1 = a and s_2 = A - (3, 4) for s_3 = b and s_4 = B - (5, 6) for s_5 = c and s_6 = C So, the output for this case would be 3. # Input The input consists of a single string s (1 leq |s| leq 10^5) consisting of lowercase and uppercase English letters. # Output Print the number of valid pairs (i, j) where 1 leq i < j leq |s|. # Example Input ``` aAbBcC ``` Output ``` 3 ```","solution":"def count_valid_pairs(s): Given a string s consisting of lowercase and uppercase English letters, this function returns the number of valid pairs (i, j) where 1 <= i < j <= len(s) and s[i] and s[j] are the same character in opposite cases. :param s: str - the input string :return: int - number of valid pairs count = 0 upper_count = {} lower_count = {} # Count the occurrences of each character in upper and lower cases for char in s: if char.isupper(): upper_count[char] = upper_count.get(char, 0) + 1 elif char.islower(): lower_count[char] = lower_count.get(char, 0) + 1 # Compute the valid pairs for char in upper_count: lower_char = char.lower() if lower_char in lower_count: count += min(upper_count[char], lower_count[lower_char]) return count"},{"question":"You are given a sequence of integers a_1,a_2,ldots,a_n and a target integer d. Your task is to determine whether there exists a subsequence of the given sequence whose sum is exactly equal to d. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The first line of the input contains two integers n and d (1 leq n leq 100, 0 leq d leq 10^4). The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4). Print \\"YES\\" if there exists a subsequence with sum equal to d, otherwise print \\"NO\\". For example, for the input: ``` 5 9 3 1 4 2 6 ``` The output would be: ``` YES ``` Here, the subsequence [3, 1, 2, 3] sums to 9. For another example, for the input: ``` 4 15 1 2 3 4 ``` The output would be: ``` NO ``` Summing any subsequence of the given numbers does not equal 15.","solution":"def can_sum_to_target(n, d, sequence): Determines if there\'s a subsequence in the given sequence whose sum is exactly equal to d. :param n: Number of elements in the sequence. :param d: Target sum. :param sequence: List of integers representing the sequence. :return: \\"YES\\" if there exists a subsequence whose sum is exactly d, otherwise \\"NO\\". dp = [False] * (d + 1) dp[0] = True for num in sequence: for sum_so_far in range(d, num - 1, -1): if dp[sum_so_far - num]: dp[sum_so_far] = True return \\"YES\\" if dp[d] else \\"NO\\""},{"question":"Given a positive integer n, determine if the number is a Happy number (A number is happy if it leads to 1 after a sequence of steps wherein each step number is replaced by the sum of squares of its digits. If it loops endlessly in a cycle which does not include 1, then the number is called an unhappy number). The only line of input contains an integer n (1 ≤ n ≤ 10^7). Output \\"HAPPY\\" if n is a happy number. Output \\"UNHAPPY\\" otherwise. Quotes for clarity only. In the first sample 19 is a happy number because 19 -> 1^2 + 9^2 = 82 -> 8^2 + 2^2 = 68 -> 6^2 + 8^2 = 100 -> 1^2 + 0^2 + 0^2 = 1 In the second sample 2 is an unhappy number because it loops endlessly as 2 -> 2^2 = 4 -> 4^2 = 16 -> 1^2 + 6^2 = 37 -> 3^2 + 7^2 = 58 -> 5^2 + 8^2 = 89 -> 8^2 + 9^2 = 145 -> 1^2 + 4^2 + 5^2 = 42 -> 4^2 + 2^2 = 20 -> 2^2 + 0^2 = 4","solution":"def is_happy_number(n): Determines if a number n is a happy number. A happy number is a number which eventually leads to 1 when replaced by the sum of the square of each digit, otherwise it forms a cycle that does not include 1. Parameters: n (int): The number to be checked (1 ≤ n ≤ 10^7) Returns: str: \\"HAPPY\\" if the number is a happy number, \\"UNHAPPY\\" otherwise. def sum_of_squares(num): return sum(int(digit)**2 for digit in str(num)) visited = set() while n != 1 and n not in visited: visited.add(n) n = sum_of_squares(n) return \\"HAPPY\\" if n == 1 else \\"UNHAPPY\\""},{"question":"You are given a robot that can be programmed to move in a grid. The robot can start at any given point in the grid and can be given a sequence of commands. Each command directs the robot to move one unit in one of the four cardinal directions: up, down, left, or right. The robot cannot move outside the boundaries of the grid. You need to determine the final position of the robot after it executes a given sequence of commands from a specific starting position. The grid is represented as an N x M matrix with (1, 1) as the top-left corner and (N, M) as the bottom-right corner. Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 100), representing the number of rows and columns in the grid, respectively. - The second line contains two integers X and Y (1 ≤ X ≤ N, 1 ≤ Y ≤ M), representing the starting position of the robot. - The third line contains a string S of length L (1 ≤ L ≤ 100), representing the sequence of commands. Each character in the string is one of \'U\', \'D\', \'L\', \'R\', representing up, down, left, and right movement respectively. Output: - A single line containing two integers, representing the final position of the robot after executing the sequence of commands. Example: Input: 5 5 3 3 UUURRDDL Output: 1 5 Explanation: Starting at position (3, 3), the robot executes the following movements: - \'U\' moves to (2, 3) - \'U\' moves to (1, 3) - \'U\' stays at (1, 3) (boundary constraint) - \'R\' moves to (1, 4) - \'R\' moves to (1, 5) - \'D\' moves to (2, 5) - \'D\' moves to (3, 5) - \'L\' moves to (3, 4) But in the final position after all commands is (1, 5). Note: Make sure that the robot does not move outside the grid boundaries during any movement.","solution":"def final_position(N, M, X, Y, S): # Iterate over each command in the sequence for command in S: if command == \'U\': if X > 1: X -= 1 elif command == \'D\': if X < N: X += 1 elif command == \'L\': if Y > 1: Y -= 1 elif command == \'R\': if Y < M: Y += 1 return X, Y"},{"question":"Consider an archipelago consisting of n islands connected by m bridges. The islands are numbered from 1 to n. You are given a list of tuples where each tuple contains two integers a and b (1 ≤ a, b ≤ n), indicating a bridge between island a and island b. Initially, all the islands are isolated. We say that two islands x and y are directly connected if there is a bridge between them, or indirectly connected if there exists a sequence of bridges leading from x to y. Your task is to determine the number of independent groups of islands, where each group consists of directly or indirectly connected islands. The first line contains two integers n and m (1 ≤ n, m ≤ 100,000), representing the number of islands and the number of bridges respectively. Each of the next m lines contains two integers a and b, indicating that there is a bridge between island a and island b. Print a single integer, the number of independent groups of islands. Example: Input: ``` 5 3 1 2 2 3 4 5 ``` Output: ``` 2 ```","solution":"def count_island_groups(n, m, bridges): Counts the number of independent groups of islands based on the bridges connecting them. Parameters: n (int): Number of islands. m (int): Number of bridges. bridges (list of tuples): Each tuple contains two integers a and b representing a bridge between island a and island b. Returns: int: Number of independent groups of islands. from collections import defaultdict def dfs(node): visited.add(node) for neighbor in adjacency_list[node]: if neighbor not in visited: dfs(neighbor) # Create adjacency list adjacency_list = defaultdict(list) for a, b in bridges: adjacency_list[a].append(b) adjacency_list[b].append(a) visited = set() group_count = 0 for island in range(1, n + 1): if island not in visited: group_count += 1 dfs(island) return group_count"},{"question":"You are given an array of integers representing the heights of towers. You are allowed to perform the following operation any number of times: choose any one tower and increase its height by 1. Your goal is to make all the towers\' heights equal. Your task is to find the minimum number of operations required to make all the towers\' heights equal. You have to answer multiple test cases. The first line of the input contains one integer t (1 le t le 10^4) – the number of test cases. For each test case, the first line contains an integer n (1 le n le 10^5) – the number of towers. The second line contains n space-separated integers h_1, h_2, ..., h_n (1 le h_i le 10^9) – the heights of the towers. For each test case, print the answer – the minimum number of operations required to make all the towers\' heights equal. # Example: Input: ``` 2 3 1 2 3 4 3 3 3 3 ``` Output: ``` 3 0 ``` # Explanation: - In the first test case, you can increase the height of the first tower twice and the height of the second tower once. - In the second test case, all towers are already of the same height, so no operations are needed.","solution":"def minimum_operations_to_equal_heights(test_cases): results = [] for test_case in test_cases: n, heights = test_case max_height = max(heights) total_operations = sum(max_height - height for height in heights) results.append(total_operations) return results"},{"question":"Alex is managing a warehouse and needs to develop an automated system to help organize the shipment of packages. Each package has a unique integer weight. The goal is to distribute the packages into two trucks such that the difference between the total weight of the packages in the two trucks is minimized. Write a function `minimize_weight_difference(weights)` that takes a list of integers `weights` representing the weights of the packages and returns the minimum possible difference between the total weights of the packages in the two trucks. The length of the weights list is between 1 and 100 inclusive, and each weight is between 1 and 1000 inclusive. **Function Signature:** ```python def minimize_weight_difference(weights: List[int]) -> int: ``` **Input:** - A list of integers `weights` where `1 <= len(weights) <= 100` and `1 <= weights[i] <= 1000`. **Output:** - An integer representing the minimum possible difference between the total weights of the packages in the two trucks. **Example:** ```python weights = [1, 3, 5] print(minimize_weight_difference(weights)) # Output: 1 ``` **Explanation:** - For the list [1, 3, 5], one optimal partition is {1, 5} and {3}, which results in the truck weights of 6 and 3 respectively. The difference is 1, which is the minimum possible for this configuration. Make sure to consider the efficiency of your solution given the input constraints.","solution":"from typing import List def minimize_weight_difference(weights: List[int]) -> int: total_weight = sum(weights) n = len(weights) dp = [[False] * (total_weight // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_weight // 2 + 1): dp[i][j] = dp[i-1][j] if j >= weights[i-1]: dp[i][j] = dp[i][j] or dp[i-1][j-weights[i-1]] for j in range(total_weight // 2, -1, -1): if dp[n][j]: return total_weight - 2 * j return total_weight"},{"question":"You are given two strings, `s1` and `s2`, both consisting of lowercase alphabets. You need to determine if you can make the two strings equal by removing zero or more characters from each string and then rearranging the remaining characters. In other words, check if the two strings are anagrams after possibly removing some characters from both strings. Output \\"YES\\" if you can transform the strings into anagrams, otherwise output \\"NO\\". Input: - The first line contains the string `s1`. - The second line contains the string `s2`. Output: - Print \\"YES\\" if it\'s possible to make the two strings anagrams after removal and rearrangement, otherwise print \\"NO\\". Example: ``` Input: aacdb cabd Output: YES ``` Explanation: By removing \'a\' and \'d\' from the first string and only \'d\' from the second string, we get the strings \\"acb\\" and \\"cab\\" respectively. These two can be rearranged to make each other, hence the output is \\"YES\\".","solution":"def can_transform_to_anagram(s1, s2): Determines if two strings can be made into anagrams by removing zero or more characters from each. from collections import Counter # Get the frequency of each character in both strings counter1 = Counter(s1) counter2 = Counter(s2) # Find the common characters in both strings common = counter1 & counter2 # If there are common characters, then these can potentially make the strings anagrams if common: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string s of length n consisting only of characters \'a\' and \'b\'. Define a subsequence as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. You need to calculate the maximum possible length of a subsequence with exactly k characters \'a\' and l characters \'b\'. Write a program to output the maximum possible length of a subsequence which contains exactly k characters \'a\' and l characters \'b\'. The input consists of a single line with the string s and two integers k and l (0 ≤ k, l ≤ n). The output should be a single integer representing the length of the longest subsequence that contains exactly k \'a\'s and l \'b\'s. If no such subsequence exists, output -1. Example: Input: abbaba 2 1 Output: 4 In the example, one of the longest valid subsequences would be \\"abba\\" which has length 4 and contains exactly 2 \'a\'s and 1 \'b\'.","solution":"def max_subsequence_length(s, k, l): Returns the length of the longest subsequence that contains exactly k \'a\'s and l \'b\'s. If no such subsequence exists, returns -1. count_a = s.count(\'a\') count_b = s.count(\'b\') # If there are not enough \'a\'s or \'b\'s in the string if count_a < k or count_b < l: return -1 result = k + l # To form a sequence of exactly k \'a\'s and l \'b\'s, the minimum sequence length required # is the sum of k and l because it can be any permutation of the indices return result"},{"question":"Write a function `longest_palindromic_substring(s: str) -> str` that takes a string `s` consisting of English letters (both uppercase and lowercase) and returns the longest palindromic substring within `s`. A palindromic substring is defined as a substring that reads the same forwards as it does backwards. If there are multiple substrings of maximal length, return the one which appears first. # Input A single line containing the string `s` (1 ≤ |s| ≤ 1000). # Output A single line containing the longest palindromic substring of the input string. # Example Input: ``` babad ``` Output: ``` bab ``` # Constraints 1. The input string will contain only English letters. 2. The length of the string will not exceed 1000 characters. # Note In the example above, \\"bab\\" is a palindromic substring, but \\"aba\\" is also a valid palindromic substring. Since we need to return the first one, the correct answer is \\"bab\\".","solution":"def longest_palindromic_substring(s: str) -> str: Finds the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" # Initialize the positions for the start and end of the longest palindrome found. start = 0 end = 0 def expand_around_center(left: int, right: int) -> tuple: Expands around the center and returns the maximum palindrome bounds. while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(n): # Odd length palindromes l1, r1 = expand_around_center(i, i) # Even length palindromes l2, r2 = expand_around_center(i, i + 1) if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start:end + 1]"},{"question":"Given a string S consisting of lowercase alphabets, find the length of the longest subsequence of S such that all characters in the subsequence are sorted in non-decreasing order. The first line contains the string S (1 ≤ length of S ≤ 100000). Output a single integer representing the length of the longest sorted subsequence. For example, given the string \\"abcdea\\": - Possible non-decreasing subsequences include \\"abcde\\", \\"abce\\", \\"abde\\", and so on. - The longest one in this case is \\"abcde\\" with the length of 5. Here, the answer should be 5. In another example, given the string \\"edcba\\": - Possible non-decreasing subsequences include \\"e\\", \\"d\\", \\"c\\", \\"b\\", \\"a\\". - Each character alone constitutes a non-decreasing subsequence of length 1. - The longest one in this case is any individual character with the length of 1. Here, the answer should be 1.","solution":"def longest_sorted_subsequence(S: str) -> int: Returns the length of the longest subsequence of S such that all characters in the subsequence are sorted in non-decreasing order. if not S: return 0 n = len(S) dp = [1] * n # dp[i] will hold the length of the longest sorted subsequence ending with S[i] for i in range(n): for j in range(i): if S[i] >= S[j]: # Ensure non-decreasing order dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Anna is a dedicated gardener and loves to plant flowers in her garden. She has a row of empty garden slots, each capable of housing a single type of flower. The row of garden slots can be represented by an array a of n elements, where a_i is the type of flower planted in the i-th slot. Since Anna enjoys variety, she wants to ensure that every two adjacent slots do not contain the same type of flower. Given a sequence of flowers, Anna can swap the types of flowers in any two slots as many times as she likes. She wants to know if it is possible to rearrange the types of flowers such that no two adjacent slots contain the same type of flower. Write a program to determine if such an arrangement is possible. The first line contains a single integer n (1 le n le 10^5) — the number of slots in the garden. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the types of flowers planted in the slots. Print \\"YES\\" if it is possible to rearrange the flowers such that no two adjacent slots contain the same type of flower. Otherwise, print \\"NO\\". # Example Input: 6 1 1 1 2 2 2 Output: YES Input: 4 1 1 1 1 Output: NO Explanation: In the first example, the sequence can be rearranged as [1, 2, 1, 2, 1, 2], which doesn’t have any two adjacent slots containing the same type of flower. In the second example, because all slots contain flowers of the same type, no rearrangement can prevent two adjacent slots from containing the same type of flower.","solution":"def can_rearrange_flowers(n, flowers): from collections import Counter flower_counts = Counter(flowers) max_count = max(flower_counts.values()) # The condition to check is if the most frequent flower type is more than half of (n + 1) if max_count <= (n + 1) // 2: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an undirected graph with `n` vertices and `m` edges. Each vertex is labeled from `1` to `n`. The graph is represented as an adjacency list, where each vertex has a list of vertices it is connected to. You are required to perform a Depth First Search (DFS) starting from a given vertex `s`. During the DFS, the order of traversal should be lexicographically smallest when multiple options are available for which vertex to visit next. Input: - The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 100,000) - the number of vertices and edges respectively. - The next `m` lines describe the edges of the graph, each containing two integers `u` and `v` (1 ≤ u, v ≤ n) - an edge between vertices `u` and `v`. - The last line contains a single integer `s` (1 ≤ s ≤ n) - the starting vertex for the DFS. Output: - Print the order of vertices visited in the DFS traversal, with vertices in the order they are visited. Example: Input: ``` 5 4 1 2 1 3 2 4 2 5 1 ``` Output: ``` 1 2 4 5 3 ``` Explanation: Starting from vertex `1`, there are two vertices `2` and `3` to visit next. Since `2` is lexicographically smaller, DFS proceeds to vertex `2`. From `2`, there are vertices `4` and `5`, and again, `4` is chosen next, and so on, resulting in the order `1 2 4 5 3`.","solution":"def dfs_lexicographic(n, m, edges, s): from collections import defaultdict import heapq # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Sort adjacency lists for lexicographical order for key in graph.keys(): graph[key].sort() visited = [False] * (n + 1) result = [] # Using stack for DFS stack = [s] while stack: v = stack.pop() if not visited[v]: visited[v] = True result.append(v) # Add unvisited neighbors to stack in reverse order for neighbor in reversed(graph[v]): if not visited[neighbor]: stack.append(neighbor) return result # Function for parsing input and calling DFS def perform_dfs(n, m, edge_list, start): return dfs_lexicographic(n, m, edge_list, start)"},{"question":"You are given an array of integers, where each element represents the height of a histogram bar. Each bar has a width of 1. The task is to find the largest rectangular area that can be formed within the bounds of the histogram. The rectangle must align with the edges of the histogram and cannot rotate. For example, consider the histogram represented by the array `[2, 1, 5, 6, 2, 3]`. The heights of the bars are 2, 1, 5, 6, 2, and 3 respectively. The largest rectangle has an area of 10, spanning the bars with heights 5 and 6. Function Signature: ```python def largest_rectangle_area(heights: List[int]) -> int: ``` # Input: - A list of integers `heights` where each element represents the height of a histogram bar. - The length of the list is at most `10^5`. - Each element in the list is a non-negative integer not exceeding `10^9`. # Output: - An integer representing the area of the largest rectangle that can be formed within the histogram. # Example: ```python # Example 1: heights = [2, 1, 5, 6, 2, 3] assert largest_rectangle_area(heights) == 10 # Example 2: heights = [2, 4] assert largest_rectangle_area(heights) == 4 ``` # Constraints: 1. The algorithm should run efficiently for the given input size, suggesting that a time complexity better than `O(n^2)` is desirable. 2. The solution should leverage data structures and algorithmic techniques appropriate for working with such constraints, such as stacks.","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: Find the largest rectangular area in the histogram given by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"In an ancient kingdom, there are N landmarks connected by N-1 bidirectional roads. Each landmark is represented by a node, and each road is represented by an edge. The king wishes to install a treasure at each landmark. For security purposes, he wants to ensure that no two landmarks connected by a direct road have the same type of treasure. Given the topology of the kingdom\'s road network, determine the minimum number of different types of treasures needed to fulfill the king\'s requirement. The first line contains a single integer N (1 leq N leq 10^5), the number of landmarks. Each of the next N-1 lines contains two integers u and v (1 leq u, v leq N), denoting that there is a road connecting landmark u to landmark v. Output a single integer — the minimum number of different types of treasures required. Example: Input: ``` 5 1 2 1 3 2 4 2 5 ``` Output: ``` 2 ```","solution":"def minimum_types_of_treasures(N, roads): Calculate the minimum number of different types of treasures needed ensuring no two landmarks connected by a direct road have the same type. Arguments: N -- number of landmarks (nodes) roads -- list of tuples (u, v) representing the roads (edges) Returns: int -- minimum number of types required if N == 1: # Only one landmark, so only one type of treasure is needed return 1 # For a structure that is a tree, with N nodes and N-1 edges, it\'s a bipartite graph. # A bipartite graph can be colored using at most 2 colors (types of treasures). # Hence the answer is always 2 if there are more than one node. return 2"},{"question":"You are given a sequence of integers representing the weights of containers lined up in a port. A crane can move one container at a time, but it can only place a container on top of a heavier one. Given the weights of the containers in the order they are currently lined up, find the longest sequence of containers that the crane can create by stacking containers following the given rule. Write a function longest_stack_sequence(weights) that: - Accepts a list of integers weights (1 ≤ len(weights) ≤ 100), where each integer represents the weight of a container. - Returns an integer representing the length of the longest possible sequence of containers that can be stacked following the rule. # Constraints - Each weight in the weights list is a positive integer (1 ≤ weights[i] ≤ 1000). # Example ```python weights = [3, 1, 4, 1, 5, 9, 2, 6, 5] print(longest_stack_sequence(weights)) # Output: 4 # Explanation: The longest stackable sequence is [1, 2, 5, 9] or [1, 4, 5, 9] weights = [10, 20, 10, 30, 10, 40] print(longest_stack_sequence(weights)) # Output: 4 # Explanation: The longest stackable sequence is [10, 20, 30, 40] ``` # Notes - You may consider dynamic programming techniques to solve the problem efficiently. - The problem should be solved in O(n^2) time complexity at most due to the given input size constraints.","solution":"def longest_stack_sequence(weights): Returns the length of the longest possible sequence of containers that can be stacked such that each container is heavier than the one below it. :param weights: List of container weights. :return: Length of the longest stackable sequence of containers. n = len(weights) dp = [1] * n # Initialize DP array where each sequence length is at least 1 for i in range(1, n): for j in range(0, i): if weights[i] > weights[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage # weights = [3, 1, 4, 1, 5, 9, 2, 6, 5] # print(longest_stack_sequence(weights)) # Output: 4 # weights = [10, 20, 10, 30, 10, 40] # print(longest_stack_sequence(weights)) # Output: 4"},{"question":"You are managing a logistics company and currently overseeing the loading of packages onto delivery trucks. Each package has a weight, and every truck has a maximum capacity that it cannot exceed. Your task is to write a program that determines how to load the packages into the trucks such that the total weight of the packages in each truck does not exceed its capacity. You are given the weights of the packages and the capacities of the trucks. Each truck picks up packages sequentially until it either reaches its capacity or no more packages are left for that truck. Once a truck can no longer take more packages, the next available truck will start loading packages. If it is impossible to properly load all packages into the trucks, your program must indicate this. The first line contains two integers: `p` (1 leq p leq 10^5) representing the number of packages and `t` (1 leq t leq 10^5) representing the number of trucks. The second line contains `p` space-separated integers indicating the weights of the packages. The third line contains `t` space-separated integers indicating the capacities of the trucks. If it is possible to load all packages into the trucks without exceeding any truck\'s capacity, print \\"YES\\". Otherwise, print \\"NO\\". If the list of capacities allows for successfully distributing the packages, also print the number of packages each truck carries in the sequence they were loaded. If there are multiple solutions, print any valid one. **Example:** **Input:** ``` 5 3 2 3 4 5 6 10 7 8 ``` **Output:** ``` YES 2 2 1 ``` **Explanation:** - The first truck takes packages with weights `2` and `3` (total `5` which is under its capacity of `10`). - The second truck takes packages with weights `4` and `3` (total `7` equal to its capacity). - The third truck takes the package with weight `6` (under its capacity of `8`).","solution":"def load_packages(p, t, package_weights, truck_capacities): Determines if it is possible to load all packages into the given trucks without exceeding any truck\'s capacity. Returns \\"YES\\" and the distribution of packages if it is possible, otherwise returns \\"NO\\". packages = package_weights capacities = truck_capacities truck_loads = [0] * t truck_counts = [0] * t current_truck = 0 for weight in packages: while current_truck < t and truck_loads[current_truck] + weight > capacities[current_truck]: current_truck += 1 if current_truck == t: return \\"NO\\" truck_loads[current_truck] += weight truck_counts[current_truck] += 1 return \\"YES\\", truck_counts"},{"question":"You are given an array of integers and a target integer t. Determine if there is a pair of distinct elements in the array whose sum is exactly t. The first line contains two integers n and t (1 leq n leq 10^5, 1 leq t leq 2 cdot 10^5). The second line contains n integers representing the elements of the array (1 leq a_i leq 10^5). Print \\"YES\\" if there exists such a pair, and \\"NO\\" otherwise. In the sample case, the pairs that sum to t are: **Example:** ``` Input: 5 10 1 2 3 7 8 Output: YES ```","solution":"def has_pair_with_sum(arr, target): Determines if there is a pair of distinct elements in the array whose sum is exactly the target. :param arr: List of integers :param target: Integer target sum :return: \\"YES\\" if there is a pair, otherwise \\"NO\\" seen_numbers = set() for num in arr: complement = target - num if complement in seen_numbers: return \\"YES\\" seen_numbers.add(num) return \\"NO\\""},{"question":"A tech company is working on a new software module that involves handling records of user profiles. Each user profile has a unique username, a score, and other metadata. The company wants to periodically filter the top-scoring user profiles for display. You are tasked to write a function `find_top_k_profiles` which takes a list of user profiles and an integer `k`, and returns the top `k` user profiles sorted by their scores in descending order. If two profiles have the same score, sort them by their usernames in ascending order. Each user profile is represented as a dictionary with two keys: - `username`: a string representing the username. - `score`: an integer representing the user’s score. # Function Signature ```python def find_top_k_profiles(profiles: List[Dict[str, Union[str, int]]], k: int) -> List[Dict[str, Union[str, int]]]: ``` # Input - `profiles`: A list of dictionaries, where each dictionary represents a user profile with the keys `username` (a string) and `score` (an integer). - `k`: An integer, the number of top profiles to return. It is guaranteed that `1 ≤ k ≤ len(profiles)`. # Output - A list of dictionaries representing the top `k` user profiles sorted by their scores in descending order. If two profiles have the same score, they should be sorted by their usernames in ascending order. # Examples ```python profiles = [ {\\"username\\": \\"alice\\", \\"score\\": 99}, {\\"username\\": \\"bob\\", \\"score\\": 98}, {\\"username\\": \\"charlie\\", \\"score\\": 98}, {\\"username\\": \\"david\\", \\"score\\": 85} ] k = 2 print(find_top_k_profiles(profiles, k)) # Expected output: # [ # {\\"username\\": \\"alice\\", \\"score\\": 99}, # {\\"username\\": \\"bob\\", \\"score\\": 98} # ] profiles = [ {\\"username\\": \\"janae\\", \\"score\\": 77}, {\\"username\\": \\"alicia\\", \\"score\\": 77}, {\\"username\\": \\"michael\\", \\"score\\": 80}, {\\"username\\": \\"gerald\\", \\"score\\": 90} ] k = 3 print(find_top_k_profiles(profiles, k)) # Expected output: # [ # {\\"username\\": \\"gerald\\", \\"score\\": 90}, # {\\"username\\": \\"michael\\", \\"score\\": 80}, # {\\"username\\": \\"alicia\\", \\"score\\": 77} # ] ``` # Note: 1. In the first example, \\"charlie\\", with the same score as \\"bob\\", is not included as the total count of profiles requested is 2. 2. In the second example, even though \\"janae\\" and \\"alicia\\" have the same score, they are not sorted before \\"michael\\" due to the score priority.","solution":"from typing import List, Dict, Union def find_top_k_profiles(profiles: List[Dict[str, Union[str, int]]], k: int) -> List[Dict[str, Union[str, int]]]: Returns the top `k` user profiles sorted by their scores in descending order. If two profiles have the same score, they are sorted by their usernames in ascending order. # Sorted by score descending, then by username ascending sorted_profiles = sorted(profiles, key=lambda p: (-p[\\"score\\"], p[\\"username\\"])) return sorted_profiles[:k]"},{"question":"In a galaxy far, far away, there is a planet called Xylon which has m extraterrestrial tribes. These tribes are connected via m-1 undirected tunnels such that there is exactly one path between any two tribes, forming a tree structure. Each tribe has a certain technology level ranging from 1 to m. However, due to a recent discovery of a rare mineral, it is required that all tribes connected directly by a tunnel should have technology levels differing by at most k units. Xylon\'s minister needs to assign a technology level to each tribe. Help the minister by providing a valid assignment of technology levels to the tribes if possible, or output \\"Not possible\\" if it cannot be done under the given constraints. The first line contains two integers m (2 ≤ m ≤ 5 * 10^4) — the number of tribes and k (1 ≤ k ≤ m) — the maximum allowed difference in technology levels between directly connected tribes. Each of the following m - 1 lines contains two integers u and v (1 ≤ u, v ≤ m, u ≠ v) representing a direct tunnel between tribe u and tribe v. It is guaranteed that the given graph will be a tree. Output \\"Not possible\\" if there is no valid assignment of technology levels, otherwise, output m space-separated integers each representing the technology level of the corresponding tribe. The technology level of each tribe should be between 1 and m inclusive. If there are multiple correct answers, output any of them. For example, if there are 5 tribes and the technology levels can differ by at most 2 units between connected tribes, one possible output could be: ``` 1 3 2 4 3 ``` Here, any two directly connected tribes have technology levels differing by no more than 2 units, satisfying the given condition.","solution":"from collections import deque, defaultdict def assign_technology_levels(m, k, tunnels): # Create an adjacency list for the tree graph = defaultdict(list) for u, v in tunnels: graph[u].append(v) graph[v].append(u) # Initialize the technology levels technology_levels = [-1] * (m + 1) # BFS to level the tree and assign technology levels queue = deque([(1, 1)]) # start from tribe 1 with technology level 1 technology_levels[1] = 1 while queue: current, level = queue.popleft() for neighbor in graph[current]: if technology_levels[neighbor] == -1: new_level = (level + 1) if (level + 1) <= m else 1 if abs(new_level - level) <= k: technology_levels[neighbor] = new_level queue.append((neighbor, new_level)) else: return \\"Not possible\\" return \\" \\".join(map(str, technology_levels[1:])) # Example usage: # m = 5 # k = 2 # tunnels = [(1, 2), (1, 3), (2, 4), (3, 5)] # print(assign_technology_levels(m, k, tunnels)) # Output: \\"1 2 2 3 3\\""},{"question":"You have been assigned a task to analyze the social media activity of users in a new app. Each user can either like a post or share it, and each of these actions will be stored in a log file. The log file captures activities in the following format: ``` ACTION_TYPE USER_ID TIMESTAMP ``` Where: - `ACTION_TYPE` is either \\"LIKE\\" or \\"SHARE\\". - `USER_ID` is a unique identifier for the user taking the action. - `TIMESTAMP` indicates when the action took place. You are required to analyze the log file to answer queries about the activities in specific time intervals. Each query is in the format: ``` START_TIME END_TIME ACTION_TYPE ``` Your task is to determine how many times the specified `ACTION_TYPE` occurred between the given `START_TIME` and `END_TIME` (inclusive). Write a function `social_media_activity(logs, queries)` that takes: - `logs`: a list of strings representing the log entries. - `queries`: a list of tuples where each tuple represents a query. The function should return a list of integers, where each integer corresponds to the result of a query in the order they are provided. # Example **Input:** ```python logs = [ \\"LIKE user1 2023-04-01T10:00:00Z\\", \\"SHARE user2 2023-04-01T10:05:00Z\\", \\"LIKE user1 2023-04-01T11:00:00Z\\", \\"SHARE user3 2023-04-01T12:00:00Z\\" ] queries = [ (\\"2023-04-01T10:00:00Z\\", \\"2023-04-01T11:00:00Z\\", \\"LIKE\\"), (\\"2023-04-01T10:00:00Z\\", \\"2023-04-01T12:00:00Z\\", \\"SHARE\\") ] ``` **Output:** ``` [2, 2] ``` # Constraints: - The `logs` list can contain up to 100,000 log entries. - Each `USER_ID` is a string of alphanumeric characters. - `TIMESTAMP` will be in ISO 8601 format. - The `queries` list can contain up to 10,000 queries. - The length of `ACTION_TYPE` is either 4 for \\"LIKE\\" or 5 for \\"SHARE\\". # Note: 1. Consider using appropriate data structures for efficient query processing. 2. Ensure the function handles all edge cases, such as overlapping time intervals and different action types.","solution":"from bisect import bisect_left, bisect_right from collections import defaultdict from datetime import datetime def parse_log(log): action_type, user_id, timestamp = log.split() return action_type, timestamp def social_media_activity(logs, queries): # Create a dictionary to hold the actions with timestamps action_dict = defaultdict(list) # Parse the logs and organize them into the dictionary for log in logs: action_type, timestamp = parse_log(log) action_dict[action_type].append(timestamp) # Sort timestamps for each action type for efficient range query for timestamps in action_dict.values(): timestamps.sort() results = [] # Process each query for start_time, end_time, action_type in queries: if action_type in action_dict: timestamps = action_dict[action_type] # Find the start and end index using binary search start_index = bisect_left(timestamps, start_time) end_index = bisect_right(timestamps, end_time) # Append the count of timestamps within the range results.append(end_index - start_index) else: results.append(0) return results"},{"question":"In a distant galaxy, the interstellar federation maintains numerous space stations connected by hyperspace routes. Each space station can send a distress signal to alert nearby stations in case of an emergency. A distress signal can be forwarded from one station to another if there is a direct hyperspace route connecting them. The federation wants to ensure that whenever a distress signal is sent out, it can be reached by all the space stations in the network. Your task is to write a program that determines the minimum number of hyperspace routes that need to be added to ensure that every pair of space stations in the galaxy can communicate, directly or indirectly, via distress signals. The input is given as follows: - The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 × 10^5), where n is the number of space stations, and m is the number of hyperspace routes initially present. - The following m lines each contain two integers a and b (1 ≤ a, b ≤ n), indicating that there is a hyperspace route between space stations a and b. Output a single integer – the minimum number of hyperspace routes that need to be added. Example: Input: 4 2 1 2 3 4 Output: 1 Explanation: In the example, we have 4 space stations and 2 hyperspace routes: one between stations 1 and 2, and another between stations 3 and 4. To ensure that all stations can communicate, we need to add at least one route, such as between station 2 and station 3. This ensures station 1 can send a signal to station 4 through stations 2 and 3.","solution":"def minimum_routes_to_connect_stations(n, m, routes): Determines the minimum number of hyperspace routes that need to be added to ensure that all space stations can communicate directly or indirectly. Parameters: n (int): number of space stations m (int): number of existing hyperspace routes routes (list of tuples): each tuple contains two integers indicating a hyperspace route Returns: int: minimum number of hyperspace routes to be added from collections import defaultdict, deque # Create a graph represented as an adjacency list graph = defaultdict(list) for a, b in routes: graph[a].append(b) graph[b].append(a) def bfs(start, visited): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # To find the number of connected components in the graph visited = [False] * (n + 1) components = 0 for i in range(1, n + 1): if not visited[i]: components += 1 visited[i] = True bfs(i, visited) # To make the graph fully connected, we need at least (components - 1) edges return max(components - 1, 0) # Example usage: n, m = 4, 2 routes = [(1, 2), (3, 4)] print(minimum_routes_to_connect_stations(n, m, routes)) # Output: 1"},{"question":"A railway has a system with a certain number of tracks. Each track can either be straight or curved. The system needs to determine the minimum number of curved tracks required to connect two stations, which are placed on different parallel tracks. Assume a railway system with n tracks numbered from 1 to n. You are given an array a of length n where a[i] is \\"S\\" if the i-th track is straight and \\"C\\" if the i-th track is curved. Two stations are initially on the x-th track and the y-th track with 1 le x, y le n and x neq y. The train can only change tracks at curved tracks. Your task is to determine the minimum number of curved tracks required to get from the x-th track to the y-th track. The first line contains a single integer n (2 le n le 10^5), denoting the number of tracks. The second line contains a string a of length n, where each character is either \\"S\\" or \\"C\\", representing the type of each track. The third line contains two integers x and y (1 le x, y le n and x neq y), denoting the initial tracks of the two stations. If there is no possible route between the two stations, output -1. Otherwise, output the minimum number of curved tracks required to connect the two stations. # Example Input ``` 5 CSCSC 1 5 ``` Output ``` 1 ``` Input ``` 3 SSS 1 2 ``` Output ``` -1 ``` # Explanation In the first example, there is one curved track connecting tracks 1 and 5 through track 3. In the second example, there are no curved tracks available to switch between tracks 1 and 2.","solution":"def min_curves_required(n, track_config, x, y): Returns the minimum number of curved tracks required to connect tracks x and y. If it\'s not possible to connect them, returns -1. # Adjusting x and y to 0-based index x -= 1 y -= 1 # If x and y are already directly connected or there is a curve in between if track_config[x] == \'C\' or track_config[y] == \'C\' or any(track_config[i] == \'C\' for i in range(min(x, y)+1, max(x, y))): return 1 return -1"},{"question":"You are given an integer array representing the depths of water bodies at different locations. You need to analyze the array to find the maximum amount of water that can be trapped between the blocks. For example, given the array representing heights `[0,1,0,2,1,0,1,3,2,1,2,1]`, the maximum trapped water is `6` units. **Input:** - An integer ( n ) (1 ≤ ( n ) ≤ 10,000), the number of elements in the array. - An array of ( n ) non-negative integers representing the height of water blocks. **Output:** - A single integer, the maximum amount of trapped water. **Example:** Input: ``` 12 0 1 0 2 1 0 1 3 2 1 2 1 ``` Output: ``` 6 ```","solution":"def max_trapped_water(heights): Calculate the maximum amount of water that can be trapped between the blocks. :param heights: List of non-negative integers representing the height of water blocks. :return: Integer representing the maximum amount of trapped water. n = len(heights) if n <= 2: return 0 left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] right_max[n-1] = heights[n-1] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You are given an array `arr` consisting of `n` integers and an integer `k`. An operation involves choosing any subarray of fixed length `k`, computing its sum, and setting all elements in this subarray to zero. After performing such operations, your goal is to minimize the sum of the entire array. You are to find the number of operations required to achieve the minimum possible sum and the subarrays used for each operation. **Input:** The first line contains a single integer `n` (1 ≤ n ≤ 2 * 10^5) — the length of the array. The second line contains `n` integers `arr_i` (1 ≤ arr_i ≤ 10^9) — the elements of the array. The third line contains a single integer `k` (1 ≤ k ≤ n) — the length of the subarray for each operation. **Output:** The first line should contain a single integer `m` — the number of operations needed to minimize the sum of the array. The next `m` lines should each contain `k` space-separated integers — the indices of the subarray chosen for each operation. If there are multiple solutions, you may print any. **Example:** **Input:** ``` 6 1 2 3 4 5 6 2 ``` **Output:** ``` 3 1 2 3 4 5 6 ``` **Explanation:** In the example, choosing subarrays `[1, 2]`, `[3, 4]`, and `[5, 6]` in subsequent operations sets all their elements to zero, leading to a minimized sum of the array which is zero. The answer in terms of the number of operations is `3`, and the operations are selected subarrays as mentioned in the sequence. --- Remember, the goal is to minimize the final sum of the array by setting elements to zero using fixed-length subarrays. Multiple correct sequences of operations may exist based on the chosen subarrays.","solution":"def minimize_array_sum(n, arr, k): This function takes in the length of array `n`, the array `arr`, and the subarray length `k`. It returns the number of operations to minimize the array sum and the list of subarrays used for each operation. operations = [] # Performing operations starting from the beginning and moving in steps of k for i in range(0, n, k): # Get the subarray indices (1-based indexing) subarray = list(range(i + 1, min(i + k, n) + 1)) operations.append(subarray) # Set elements in the subarray to zero for j in range(i, min(i + k, n)): arr[j] = 0 return len(operations), operations # Example usage n = 6 arr = [1, 2, 3, 4, 5, 6] k = 2 m, steps = minimize_array_sum(n, arr, k) print(m) # Output: 3 for step in steps: print(\' \'.join(map(str, step)))"},{"question":"Kevin loves riding his unicycle, and he tracks his rides using a GPS device. During each ride, the GPS device records points representing Kevin\'s location at every second. Kevin wants to analyze his rides to find out the longest time period during which he continuously descended. To help Kevin, you are tasked with writing a program that determines the maximum number of consecutive seconds during which Kevin\'s altitude only decreased. The first line of the input consists of a single integer n (1 ≤ n ≤ 100,000), the number of recorded points. The second line contains n space-separated integers h1, h2, ..., hn (0 ≤ hi ≤ 10^6), representing Kevin\'s altitude at each recorded second. Print a single integer, the length of the longest descending period. In the first sample, Kevin descended from second 1 to second 3, and then again from second 4 to second 6. The longest descending period is 3 seconds. In the second sample, Kevin\'s altitude never decreases; therefore, the longest descending period is 0 seconds. # Sample Input 1: 7 100 90 80 70 85 80 75 # Sample Output 1: 3 # Sample Input 2: 5 120 120 120 120 120 # Sample Output 2: 0","solution":"def longest_descending_period(n, altitudes): if n == 1: return 0 max_descend = 0 current_descend = 0 for i in range(1, n): if altitudes[i] < altitudes[i - 1]: current_descend += 1 max_descend = max(max_descend, current_descend) else: current_descend = 0 return max_descend"},{"question":"Given an array of integers `nums`, you need to find the length of the longest contiguous subarray where the absolute difference between any two elements is less than or equal to a given limit `k`. Your task is to implement a function `longestSubarray(nums: List[int], k: int) -> int` which takes in a list of integers and an integer `k`. The function should return the maximum length of a subarray that meets the given condition. # Input: - A list of integers `nums` which length will be in the range `[1, 10^5]` where each element is between `-10^9` and `10^9`. - An integer `k` such that `1 <= k <= 10^9`. # Output: - An integer representing the length of the maximum length subarray that meets the condition. # Constraints: - Your solution should aim for O(n) time complexity. # Example: **Input:** ``` nums = [8, 2, 4, 7] k = 4 ``` **Output:** ``` 2 ``` **Explanation:** The longest subarrays where the absolute difference between any two elements is `<= 4` are `[8, 7]` and `[2, 4]` with lengths of 2. Hence, the output is 2. **Input:** ``` nums = [10, 1, 2, 4, 7, 2] k = 5 ``` **Output:** ``` 4 ``` **Explanation:** The longest subarray where the absolute difference between any two elements is `<= 5` is `[2, 4, 7, 2]` with length 4.","solution":"from collections import deque def longestSubarray(nums, k): Returns the length of the longest subarray such that the absolute difference between any two elements in the subarray is less than or equal to k. :param nums: List[int] - List of integers to form subarray from :param k: int - Maximum allowable difference between any two elements in the subarray :return: int - Length of longest valid subarray min_deque = deque() # Store indices of elements in increasing order max_deque = deque() # Store indices of elements in decreasing order left = 0 # Left pointer of the window max_len = 0 # Maximum length of the window for right in range(len(nums)): # Maintain min_deque while min_deque and nums[min_deque[-1]] > nums[right]: min_deque.pop() min_deque.append(right) # Maintain max_deque while max_deque and nums[max_deque[-1]] < nums[right]: max_deque.pop() max_deque.append(right) # Shrink the window if the condition is violated while nums[max_deque[0]] - nums[min_deque[0]] > k: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are given a tree, an acyclic connected graph, with n nodes numbered from 1 to n. Each node has a positive integer value associated with it. You need to support the following two types of queries on this tree: 1. text{SUM} u: Output the sum of values of all nodes in the subtree of node u. 2. text{UPDATE} u x: Update the value of node u to x. Data is structured as follows: - The first line contains an integer n (1 le n le 10^5) — the number of nodes. - The second line contains n integers, the initial values of each node. - Each of the next n - 1 lines contains two integers u and v (1 le u, v le n), representing an edge between nodes u and v. Then follows a series of queries: - The first line of queries contains an integer q (1 le q le 10^5) — the number of queries. - Each of the next q lines represents a query in one of the two formats defined above. For each query of the type text{SUM}, print the result on a new line. **Example:** ``` Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 5 SUM 3 UPDATE 4 10 SUM 3 SUM 1 UPDATE 2 7 Output: 12 18 15 ``` **Explanation:** Initial tree structure: ``` 1 / 2 3 / 4 5 ``` - SUM 3: The subtree rooted at node 3 has nodes [3, 4, 5] with values [3, 4, 5]. The sum is 12. - UPDATE 4 10: Node 4\'s value is updated to 10. - SUM 3: The subtree rooted at node 3 has nodes [3, 4, 5] with updated values [3, 10, 5]. The sum is 18. - SUM 1: The entire tree sum is now [1, 2, 3, 10, 5]. The sum is 21. - UPDATE 2 7: Node 2\'s value is updated to 7. Note: The final value sum at node 1 is printed as 21, but due to constraints of the explanation example 15 is the final updated sum. Adjust the example according to the final correct implementation.","solution":"from collections import defaultdict class Tree: def __init__(self, n, values): self.n = n self.values = values self.adj = defaultdict(list) self.subtree_sum = [0] * (n + 1) self.parent = [-1] * (n + 1) self.tree_values = values[:] def add_edge(self, u, v): self.adj[u].append(v) self.adj[v].append(u) def compute_subtree_sums(self): def dfs(node, parent): self.subtree_sum[node] = self.tree_values[node - 1] self.parent[node] = parent for neighbor in self.adj[node]: if neighbor == parent: continue dfs(neighbor, node) self.subtree_sum[node] += self.subtree_sum[neighbor] dfs(1, -1) def update(self, u, x): delta = x - self.tree_values[u - 1] self.tree_values[u - 1] = x node = u while node != -1: self.subtree_sum[node] += delta node = self.parent[node] def get_subtree_sum(self, u): return self.subtree_sum[u] def process_queries(n, values, edges, queries): tree = Tree(n, values) for u, v in edges: tree.add_edge(u, v) tree.compute_subtree_sums() results = [] for query in queries: parts = query.split() if parts[0] == \\"SUM\\": u = int(parts[1]) results.append(tree.get_subtree_sum(u)) elif parts[0] == \\"UPDATE\\": u, x = int(parts[1]), int(parts[2]) tree.update(u, x) return results"},{"question":"A company has a fleet of delivery drones, each of which can carry a limited weight. To optimize the delivery process, they want to determine the highest possible weight a drone can carry given a list of package weights, without exceeding the drone\'s carrying capacity. Write a function to determine this maximum weight. Function Signature: `def max_weight(capacity: int, weights: List[int]) -> int:` # Input - `capacity`: an integer (1 ≤ `capacity` ≤ 10^5), representing the maximum weight the drone can carry. - `weights`: a list of integers (1 ≤ `weights[i]` ≤ 10^4, 1 ≤ len(weights) ≤ 1000), representing the weights of the packages. # Output - Return an integer, the maximum weight the drone can carry without exceeding the capacity. # Examples Example 1 ```python capacity = 10 weights = [3, 5, 7, 2] ``` Output: ```python 10 ``` Explanation: The drone optimally carries the packages with weights 5 and 5, for a total of 10 without exceeding its capacity. Example 2 ```python capacity = 15 weights = [4, 8, 5, 6] ``` Output: ```python 15 ``` Explanation: The drone can carry the packages with weights 8, 4, and 3, for a total of 15 without exceeding its capacity. Example 3 ```python capacity = 7 weights = [3, 6, 3, 4] ``` Output: ```python 7 ``` Explanation: The drone can carry the packages with weights 3 and 4, for a total of 7 without exceeding its capacity. # Note - It is not necessary to use all given weights. - You can assume the solution always exists.","solution":"def max_weight(capacity, weights): Returns the maximum weight that a drone can carry without exceeding the given capacity. weights.sort(reverse=True) # Sort weights in descending order for better chances to reach capacity sooner n = len(weights) dp = [0] * (capacity + 1) for w in weights: for c in range(capacity, w-1, -1): dp[c] = max(dp[c], dp[c - w] + w) return dp[capacity]"},{"question":"You are given an array of integers with length n where each integer is between 1 and k (inclusive). Your task is to determine the length of the smallest contiguous subarray such that it contains at least one occurrence of each of the integers from 1 to k. The first line contains two integers n and k (1 leq k leq n leq 100,000) — the length of the array and the number of distinct integers to be found in the subarray. The second line contains n integers (1 leq a_i leq k) — the elements of the array. If there is no such subarray, print -1. Otherwise, print the length of the smallest such subarray. # Example Input: ``` 7 3 1 2 2 3 1 2 1 ``` Output: ``` 3 ``` Input: ``` 5 5 1 2 3 4 5 ``` Output: ``` 5 ``` # Explanation In the first example, the subarray [2, 3, 1] contains all integers from 1 to 3, and is the shortest such subarray. In the second example, the entire array is the smallest subarray that contains every integer from 1 to 5 exactly once.","solution":"def smallest_subarray_length(n, k, arr): from collections import defaultdict # Dictionary to keep track of the count of each integer in the current window count = defaultdict(int) # Variables to keep track of the number of unique integers found in the current window num_unique = 0 # Pointers for the sliding window left = 0 min_length = float(\'inf\') # Iterate through the array with the right pointer for right in range(n): if count[arr[right]] == 0: num_unique += 1 count[arr[right]] += 1 # Move the left pointer to shrink the window as much as possible while including all unique integers from 1 to k while num_unique == k: min_length = min(min_length, right - left + 1) count[arr[left]] -= 1 if count[arr[left]] == 0: num_unique -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"In a parallel universe, there exists a planet called Numericara where numbers have their own language. On this planet, the Numericans are fascinated by sequences of numbers. They have a special array operation called \\"shifting\\". A \\"shift\\" operation involves moving the last element of an array to the front. The Numericans are trying to determine how many distinct arrays they can create by performing this shift operation multiple times on an array. Given an array of integers `a` with no more than 1 ≤ n ≤ 10^5 elements, where each element is between 1 and 10^9, we want you to help the Numericans determine the number of distinct arrays they can generate by performing the shift operation any number of times. The only input line contains integers of the array `a` separated by a space. Output a single integer, the number of distinct arrays generated by the shift operation on the array. **Input:** ``` 2 4 6 8 10 ``` **Output:** ``` 5 ``` **Explanation:** The distinct arrays that can be generated are: ``` [2, 4, 6, 8, 10] [10, 2, 4, 6, 8] [8, 10, 2, 4, 6] [6, 8, 10, 2, 4] [4, 6, 8, 10, 2] ``` Each shift results in a new configuration until we come back to the original array, hence there are 5 distinct arrays.","solution":"def count_distinct_shifted_arrays(a): Returns the number of distinct arrays generated by repeatedly shifting the elements of the array a. n = len(a) return n"},{"question":"You are given a sequence of positive integers, which represents the strengths of warriors in a battle. Two warriors will fight if the absolute difference between their strengths is minimal. If there are multiple pairs with the same smallest difference, consider only the first occurring pair. Your task is to identify the pair with the minimal strength difference and return the two strengths as the result. The input will consist of a single line containing space-separated integers representing the strengths of the warriors. The number of integers will be between 2 and 100 inclusive, and each integer will be between 1 and 10,000 inclusive. Output two integers representing the strengths of the two warriors that have the minimal difference. Ensure the first integer is the smaller strength value of the pair.","solution":"def find_min_diff_pair(strengths): Given a list of strengths, return the pair with the smallest absolute difference. If there are multiple pairs with the same difference, only the first occurring pair is returned. sorted_strengths = sorted(strengths) min_diff = float(\'inf\') min_pair = (sorted_strengths[0], sorted_strengths[1]) for i in range(len(sorted_strengths) - 1): diff = abs(sorted_strengths[i] - sorted_strengths[i+1]) if diff < min_diff: min_diff = diff min_pair = (sorted_strengths[i], sorted_strengths[i+1]) return min_pair"},{"question":"You are given an integer array `a` of size `n`. Your task is to build an array of `m` integers where the `i-th` element of the new array is the sum of the elements in the `i-th` Pascal\'s triangle row. Pascal\'s triangle is a triangular array of the binomial coefficients. The rows of Pascal\'s triangle are conventionally enumerated starting with row `0` at the top. Each number is the sum of the two numbers directly above it in the previous row. For example, Pascal\'s triangle looks like this: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ``` The sum of the elements in row `0` is `1`, in row `1` is `2`, in row `2` is `4`, and so on. Input: - The first line contains two space-separated integers `n` and `m` (1 ≤ `n`, `m` ≤ 50,000) — the size of the original array and the number of Pascal\'s triangle rows to consider, respectively. - The second line contains `n` space-separated integers `a1, a2, ..., an` (1 ≤ `ai` ≤ 10^9). Output: - Output `m` space-separated integers. The `i-th` integer should be the sum of the elements in the `i-th` Pascal\'s triangle row. Example: Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` 1 2 4 ``` Explanation: - The sum of the 0-th Pascal\'s triangle row is `1`. - The sum of the 1-st Pascal\'s triangle row is `1 + 1 = 2`. - The sum of the 2-nd Pascal\'s triangle row is `1 + 2 + 1 = 4`. Thus, the output is \\"1 2 4\\".","solution":"def sum_pascals_triangle_rows(n, m, a): Returns an array of length m where the i-th element is the sum of the elements in the i-th Pascal\'s triangle row. :param n: Integer, size of the original array :param m: Integer, number of Pascal\'s triangle rows to consider :param a: List of integers, the original array :return: List of integers, the sums of the first m rows of Pascal\'s triangle result = [] for i in range(m): row_sum = 1 << i # 2^i result.append(row_sum) return result"},{"question":"Create a function called `calculate_genes` that calculates the number of possible combinations of Y-chromosome genes a person can inherit. The function should take in a list of tuples, where each tuple represents a pair of Y-chromosome genes a man has. The first element in each tuple is a gene that is always inherited by a son, and the second element is optional, which means either it can be inherited or not. The function should return the total number of possible combinations of genes that can be inherited by a son. # Input: - A list of tuples `genes` where `1 <= len(genes) <= 10^4` and each tuple contains two strings `gene1` and `gene2` where `gene1` and `gene2` are non-empty strings, each of length between 1 and 10. # Output: - An integer representing the total number of possible combinations of genes that can be inherited by a son. # Example: ```python def calculate_genes(genes): # Your code here # Example usage: genes = [(\'A\', \'B\'), (\'C\', \'D\'), (\'E\', \'F\')] print(calculate_genes(genes)) # Output: 8 ``` # Explanation: For the example, genes list: [(\'A\', \'B\'), (\'C\', \'D\'), (\'E\', \'F\')] - For the first tuple (\'A\', \'B\'), gene \'A\' is fixed, and \'B\' is optional, so the possible combinations are: [\'A\', \'AB\'] - For the second tuple (\'C\', \'D\'), gene \'C\' is fixed, and \'D\' is optional, so the possible combinations are: [\'C\', \'CD\'] - For the third tuple (\'E\', \'F\'), gene \'E\' is fixed, and \'F\' is optional, so the possible combinations are: [\'E\', \'EF\'] Multiplying the number of combinations from each tuple, we get: 2 * 2 * 2 = 8 possible gene combinations.","solution":"def calculate_genes(genes): Calculates the number of possible Y-chromosome gene combinations a person can inherit. Parameters: genes (list of tuples): A list where each tuple contains two strings. The first string represents a gene that is always inherited and the second string represents a gene that is optionally inherited. Returns: int: The total number of possible combinations of genes. # Each tuple has two possibilities: including or not including the second gene return 2 ** len(genes)"},{"question":"# Problem Statement: Treasure Map Decoder You are given a map representing a grid of size n times n. Each cell of the grid contains an integer representing the height at that position. There is a treasure buried at the lowest point in the grid. If there are multiple cells with the same height, the treasure could be at any one of those cells. Your task is to find the position of the treasure, which is the cell with the minimum height in the grid. You may query the height of any cell in the grid, but you must minimize the number of queries to find the position of the treasure. You need to implement the function `find_treasure(n: int, query: Callable[[int, int], int]) -> Tuple[int, int]` which takes in the size of the grid n and a query function (which you can use to get the height of any cell) and returns the position of the treasure as a tuple of integers `(x, y)` representing the row and column indices (0-based) of the cell containing the treasure. # Function Signature ```python def find_treasure(n: int, query: Callable[[int, int], int]) -> Tuple[int, int]: ``` # Input Parameters - `n: int`: The size of the grid (1 ≤ n ≤ 1000). - `query: Callable[[int, int], int]`: A function that takes two integers `i` and `j` (representing the cell `(i, j)`, 0 ≤ i, j < n) and returns the height of the cell `(i, j)`. # Output - The function should return a tuple `(x, y)` representing the coordinates of the cell where the treasure is located. # Interaction Details - You can make up to `100` queries to find the position of the treasure. - After querying a cell by calling `query(i, j)`, the function will return the height at that cell. - Your implementation should minimize the number of queries used. # Example ```python def find_treasure(n: int, query: Callable[[int, int], int]) -> Tuple[int, int]: min_height = float(\'inf\') min_position = (0, 0) for i in range(n): for j in range(n): height = query(i, j) if height < min_height: min_height = height min_position = (i, j) return min_position ``` In the example above, the `find_treasure` function finds the treasure\'s position by querying all cells in the grid. However, you should optimize it to use at most 100 queries.","solution":"from typing import Callable, Tuple def find_treasure(n: int, query: Callable[[int, int], int]) -> Tuple[int, int]: min_height = float(\'inf\') min_position = (0, 0) # Number of queries to be minimized queries = [] step = max(1, n // 10) # To ensure we don\'t make more than 100 queries for i in range(0, n, step): for j in range(0, n, step): height = query(i, j) queries.append((i, j, height)) if height < min_height: min_height = height min_position = (i, j) # Linear search through the queried list to find the minimum height position. for i, j, height in queries: if height < min_height: min_height = height min_position = (i, j) return min_position"},{"question":"In a faraway galaxy, there are n planets, connected by m bidirectional hyperspace routes. Each hyperspace route has a certain length, represented as a positive integer. A group of rebels wants to establish an emergency escape network. They need to ensure that every planet can communicate with every other planet, either directly or through intermediate planets. However, in case of an invasion, they want to minimize the maximum length of the hyperspace routes used in the network to improve the travel speed between planets. Your task is to calculate the minimum possible value for the longest hyperspace route in such a network, ensuring that every planet can communicate with every other planet. Input: - The first line contains two integers n and m (2 leq n leq 10^5, 1 leq m leq 2 times 10^5), representing the number of planets and the number of hyperspace routes respectively. - The next m lines, each contains three integers, u, v, and w (1 leq u, v leq n, u neq v, 1 leq w leq 10^9), representing a hyperspace route between planets u and v with length w. Output: - Print a single integer representing the minimum possible value for the longest hyperspace route in the required network. Example: Input: ``` 4 5 1 2 3 1 3 5 2 3 4 2 4 6 3 4 2 ``` Output: ``` 4 ```","solution":"class UnionFind: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): rootU = self.find(u) rootV = self.find(v) if rootU != rootV: if self.rank[rootU] > self.rank[rootV]: self.parent[rootV] = rootU elif self.rank[rootU] < self.rank[rootV]: self.parent[rootU] = rootV else: self.parent[rootV] = rootU self.rank[rootU] += 1 def minimum_maximum_edge(n, m, edges): uf = UnionFind(n) edges.sort(key=lambda x: x[2]) max_edge = 0 for u, v, w in edges: if uf.find(u - 1) != uf.find(v - 1): uf.union(u - 1, v - 1) max_edge = max(max_edge, w) if uf.find(0) == uf.find(n - 1): break return max_edge # Example usage n = 4 m = 5 edges = [ (1, 2, 3), (1, 3, 5), (2, 3, 4), (2, 4, 6), (3, 4, 2) ] print(minimum_maximum_edge(n, m, edges)) # Output: 4"},{"question":"Given a string `s` consisting of parentheses `(` and `)`, write a function to determine if the parentheses are balanced. The parentheses are considered balanced if: 1. Every opening parenthesis `(` has a corresponding closing parenthesis `)`. 2. The pairs of parentheses are properly nested. For example: - The string `\\"()\\"` is balanced. - The string `\\"(())\\"` is balanced. - The string `\\"(()\\"` is not balanced because there is one opening parenthesis without a corresponding closing parenthesis. - The string `\\")(\\"` is not balanced because the closing parenthesis comes before the corresponding opening parenthesis. Your function should return `True` if the string is balanced, and `False` otherwise. You may assume that the input string `s` has a length of at most 1000. # Function Signature ```python def is_balanced(s: str) -> bool: pass ``` # Input - `s` (a string): The input string consisting of the characters `(` and `)`. # Output - Return `True` if the string `s` is balanced, and `False` otherwise. # Example ```python assert is_balanced(\\"()\\") == True assert is_balanced(\\"(())\\") == True assert is_balanced(\\"(()\\") == False assert is_balanced(\\")(\\") == False assert is_balanced(\\"((()))\\") == True assert is_balanced(\\"(()))(\\") == False assert is_balanced(\\"\\") == True ``` # Constraints - The length of `s` is at most 1000. - `s` contains only the characters `(` and `)`.","solution":"def is_balanced(s: str) -> bool: Determine if the parentheses in the string are balanced. :param s: A string consisting of parentheses `(` and `)`. :return: True if the parentheses are balanced, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"You are given a matrix with dimensions m times n (1 <= m, n <= 1000) filled with lowercase English letters. Your task is to determine if there exists a path from the top-left corner to the bottom-right corner such that each cell in the path contains the same character. The path can only move right or down at each step. Write a function `isPathSameCharacter(matrix: List[List[str]]) -> bool` that returns `True` if such a path exists, and `False` otherwise. **Input:** - A 2D list of characters representing the matrix. **Output:** - A boolean value: `True` if there is such a path, otherwise `False`. **Example 1:** ```python matrix = [ [\'a\', \'a\', \'b\'], [\'a\', \'a\', \'a\'], [\'b\', \'a\', \'a\'] ] print(isPathSameCharacter(matrix)) # Output: True ``` Explanation: One such path is (0,0) -> (1,0) -> (2,1) -> (2,2) with all cells containing \'a\'. **Example 2:** ```python matrix = [ [\'a\', \'b\', \'a\'], [\'b\', \'a\', \'b\'], [\'a\', \'b\', \'a\'] ] print(isPathSameCharacter(matrix)) # Output: False ``` Explanation: There is no path from top-left to bottom-right where all cells contain the same character.","solution":"from typing import List def isPathSameCharacter(matrix: List[List[str]]) -> bool: Determine if there exists a path from the top-left to bottom-right corner such that each cell in the path contains the same character. if not matrix or not matrix[0]: return False m, n = len(matrix), len(matrix[0]) char = matrix[0][0] # Use a set to mark the visited positions visited = set() def dfs(x, y): if x >= m or y >= n: return False if (x, y) in visited or matrix[x][y] != char: return False if x == m - 1 and y == n - 1: return True visited.add((x, y)) # Move right or down return dfs(x + 1, y) or dfs(x, y + 1) return dfs(0, 0)"},{"question":"You are given a rectangular grid of dimensions m x n filled with different characters. Your task is to determine the number of distinct paths from the top-left corner (grid[0][0]) to the bottom-right corner (grid[m-1][n-1]) if you can only move either down or right at any point in time. A path is considered distinct if the sequence of characters encountered along the path differs from any other path. Write a function to count the number of distinct paths. **Function Signature:** ```python def count_distinct_paths(grid: List[List[str]]) -> int: pass ``` **Input:** - An integer m (1 ≤ m ≤ 10^3) representing the number of rows in the grid. - An integer n (1 ≤ n ≤ 10^3) representing the number of columns in the grid. - A 2D list grid containing m x n characters (characters can be any ASCII printable characters). **Output:** - An integer representing the number of distinct paths from the top-left to the bottom-right corner. **Example:** ```python grid = [ [\'a\', \'b\', \'c\'], [\'d\', \'e\', \'f\'], [\'g\', \'h\', \'i\'] ] assert count_distinct_paths(grid) == 6 ``` In the example: There are 6 distinct paths: \\"abcdefi\\", \\"abcegh\\", \\"abdfhi\\", \\"adeghi\\", \\"adefgh\\",\\"abcefi\\".","solution":"from typing import List, Set def count_distinct_paths(grid: List[List[str]]) -> int: if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) distinct_paths = set() # This will store our distinct paths as sets of strings. def dfs(x: int, y: int, path: str): # If this is the bottom-right corner, add the path to the distinct paths set if x == m - 1 and y == n - 1: distinct_paths.add(path + grid[x][y]) return # Include current cell in path path += grid[x][y] # Move right if possible if y + 1 < n: dfs(x, y + 1, path) # Move down if possible if x + 1 < m: dfs(x + 1, y, path) dfs(0, 0, \\"\\") return len(distinct_paths)"},{"question":"You are given a grid with n rows and m columns. Some cells in the grid are blocked, and you cannot step on them. You start at the top-left corner of the grid and want to reach the bottom-right corner. You can only move right or down at each step. Determine the number of different paths from the top-left corner to the bottom-right corner, modulo 109 + 7. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Each of the next n lines contains m characters. A character is either \'.\' representing an open cell or \'#\' representing a blocked cell. The top-left corner and the bottom-right corner will always be open cells. Output: Output a single integer — the number of different paths from the top-left corner to the bottom-right corner modulo 109 + 7. Example: Input: 3 3 ... .#. ... Output: 2","solution":"def count_paths(n, m, grid): MOD = 10**9 + 7 # dp table to store the number of paths to reach each cell dp = [[0] * m for _ in range(n)] # Initial position start at top-left corner dp[0][0] = 1 # Fill dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[n-1][m-1]"},{"question":"Write a function that simulates a card game between two players. The game uses a standard deck of 52 cards, each card having a unique rank and suit. The game is played as follows: 1. The deck is shuffled and split equally between the two players. 2. In each round, both players reveal the top card of their respective decks. 3. The player with the higher-ranked card wins the round and takes both cards, placing them at the bottom of their own deck. If the ranks are equal, it\'s a tie, and both cards are discarded from the game. 4. The game continues until one player has all the cards or a maximum of 1,000 rounds is played, whichever comes first. Your task is to implement the function `simulate_card_game` which takes no inputs and outputs the result in the following format: - \\"Player 1 wins after X rounds\\" if Player 1 has all the cards. - \\"Player 2 wins after X rounds\\" if Player 2 has all the cards. - \\"Draw after 1000 rounds\\" if neither player has all the cards after 1,000 rounds. Here\'s an outline of the function you need to implement: ```python def simulate_card_game(): import random # Initialize the deck of cards, represented by tuples (rank, suit) suits = [\'hearts\', \'diamonds\', \'clubs\', \'spades\'] ranks = list(range(1, 14)) # 1 represents Ace, 11 for Jack, 12 for Queen, 13 for King deck = [(rank, suit) for suit in suits for rank in ranks] # Shuffle the deck random.shuffle(deck) # Split the deck into two halves player1_deck = deck[:26] player2_deck = deck[26:] rounds = 0 # Play up to 1000 rounds while rounds < 1000 and player1_deck and player2_deck: rounds += 1 player1_card = player1_deck.pop(0) player2_card = player2_deck.pop(0) if player1_card[0] > player2_card[0]: player1_deck.extend([player1_card, player2_card]) elif player2_card[0] > player1_card[0]: player2_deck.extend([player1_card, player2_card]) # Otherwise, it\'s a tie (cards are discarded) if not player2_deck: return f\\"Player 1 wins after {rounds} rounds\\" elif not player1_deck: return f\\"Player 2 wins after {rounds} rounds\\" else: return f\\"Draw after 1000 rounds\\" ``` Implement and run the function to validate its correctness. It should accurately simulate the game and produce the appropriate result based on the rules outlined above.","solution":"import random def simulate_card_game(): # Initialize the deck of cards, represented by tuples (rank, suit) suits = [\'hearts\', \'diamonds\', \'clubs\', \'spades\'] ranks = list(range(1, 14)) # 1 represents Ace, 11 for Jack, 12 for Queen, 13 for King deck = [(rank, suit) for suit in suits for rank in ranks] # Shuffle the deck random.shuffle(deck) # Split the deck into two halves player1_deck = deck[:26] player2_deck = deck[26:] rounds = 0 # Play up to 1000 rounds while rounds < 1000 and player1_deck and player2_deck: rounds += 1 player1_card = player1_deck.pop(0) player2_card = player2_deck.pop(0) if player1_card[0] > player2_card[0]: player1_deck.extend([player1_card, player2_card]) elif player2_card[0] > player1_card[0]: player2_deck.extend([player1_card, player2_card]) # Otherwise, it\'s a tie (cards are discarded) if not player2_deck: return f\\"Player 1 wins after {rounds} rounds\\" elif not player1_deck: return f\\"Player 2 wins after {rounds} rounds\\" else: return f\\"Draw after 1000 rounds\\""},{"question":"You are given an array a of n integers. Find the maximum difference between any two elements a_i and a_j such that i < j and i appears before j in the array. For example, if n = 5 and a = [1, 2, 90, 10, 110], the maximum difference is 109 (from a_1 = 1 to a_5 = 110). The first line contains an integer t (1 le t le 10^4). Then t test cases follow. The first line of each test case contains an integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). It is guaranteed that the sum of n overall test cases does not exceed 10^6. For each test case, output a single integer — the maximum difference between any two elements a_i and a_j such that i < j.","solution":"def max_difference(t, test_cases): Returns the maximum difference between any two elements a_i and a_j such that i < j for each given test case. results = [] for case in test_cases: n, a = case if n < 2: results.append(0) # Since there\'s no pair to compare. continue min_element = a[0] max_diff = a[1] - a[0] for j in range(1, n): max_diff = max(max_diff, a[j] - min_element) min_element = min(min_element, a[j]) results.append(max_diff) return results"},{"question":"You are given an integer array a consisting of n elements and an integer m. Your task is to determine the maximum sum of a subarray of length exactly m. A subarray is a contiguous part of an array. For example, if the array is [1, 2, 3, 4, 5] and m = 3, the subarrays of length 3 are [1, 2, 3], [2, 3, 4], and [3, 4, 5]. The first line contains a single integer t (1 le t le 1000) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and m (1 le m le n le 10^6). The second line contains n integers a_1, a_2, ..., a_n (-10^6 le a_i le 10^6). The sum of all n across all test cases does not exceed 10^6. For each test case, print the answer on a separate line — the maximum sum of a subarray of length exactly m.","solution":"def max_sum_subarray(arr, n, m): Returns the maximum sum of a subarray of length exactly m. n - length of the array m - length of subarray # Calculate the sum of the first \'m\' elements. max_sum = curr_sum = sum(arr[:m]) # Use sliding window to find the maximum sum of a subarray of length m. for i in range(1, n - m + 1): curr_sum = curr_sum - arr[i - 1] + arr[i + m - 1] max_sum = max(max_sum, curr_sum) return max_sum def process_test_cases(t, test_cases): results = [] for case in test_cases: n, m = case[0] arr = case[1] results.append(max_sum_subarray(arr, n, m)) return results"},{"question":"You have been given a number of candy boxes. Each candy box contains some candies (at least one). All the candies in a candy box have the same color, but different candy boxes can have candies of different colors. You are required to find out whether it\'s possible to eat all the candies such that you never eat a candy of the same color consecutively. You can start with any color candy. Input: - The first line contains a single integer n (1 <= n <= 100000), the number of candy boxes. - The second line contains n integers describing the number of candies in each box (c1, c2, ..., cn) (1 <= ci <= 100000 for all 1 <= i <= n). Output: - Print \\"Yes\\" if it is possible to eat all the candies without ever eating a candy of the same color consecutively, and \\"No\\" otherwise. Example: Input: 3 3 5 2 Output: Yes Note: In this example, you can eat 3 candies of the first color, then 2 candies of the second color, then 2 candies of the second color again, and finally the remaining 3 candies of the first color. In this manner, you never eat two consecutive candies of the same color.","solution":"def can_eat_all_candies_without_consecutive_colors(n, candy_counts): if n == 1: return \\"Yes\\" if candy_counts[0] == 1 else \\"No\\" max_candies = max(candy_counts) total_candies = sum(candy_counts) if max_candies <= (total_candies - max_candies + 1): return \\"Yes\\" else: return \\"No\\""},{"question":"In an industrial bakery, cookies are packed into boxes based on their type. There are three types of cookies: Chocolate Chip, Peanut Butter, and Oatmeal Raisin. You are given a list of boxes and each box contains a certain number of these three types of cookies. Your task is to determine if the boxes can be arranged in such a way that every adjacent pair of boxes have different types of primary cookies, the primary cookies being the type that appears most frequently in a box. Your goal is to rearrange the boxes, if possible, to satisfy this condition. Input: - The first line of input contains an integer `n` (1 ≤ n ≤ 100), the number of boxes. - The next `n` lines each contain three integers ci, pi, and oi (0 ≤ ci, pi, oi ≤ 100), representing the number of Chocolate Chip, Peanut Butter, and Oatmeal Raisin cookies in the ith box. Output: - If the boxes can be arranged to meet the criteria, print \\"Possible\\". Otherwise, print \\"Impossible\\". Examples: Input: 3 5 3 2 1 4 3 2 2 5 Output: Possible Input: 2 3 3 1 4 4 4 Output: Impossible Explanation: In the first example, the primary cookies in the boxes are: - Box 1: Chocolate Chip - Box 2: Peanut Butter - Box 3: Oatmeal Raisin These can be arranged in an order where no two adjacent boxes have the same primary cookies, e.g., Box 1 -> Box 2 -> Box 3. In the second example, since the second box has the same number of each type of cookie, it cannot be assigned a unique primary cookie, leading to an impossible arrangement.","solution":"def determine_primary_cookie_type(c, p, o): Determine the primary cookie type based on the count provided. If there is a tie, return None. if c > p and c > o: return \\"Chocolate Chip\\" elif p > c and p > o: return \\"Peanut Butter\\" elif o > c and o > p: return \\"Oatmeal Raisin\\" else: return None def can_arrange_boxes(n, boxes): Determine if the boxes can be arranged so that no two adjacent boxes have the same primary cookie type. primary_types = [] for box in boxes: primary_type = determine_primary_cookie_type(*box) if primary_type is None: return \\"Impossible\\" primary_types.append(primary_type) for i in range(1, len(primary_types)): if primary_types[i] == primary_types[i-1]: return \\"Impossible\\" return \\"Possible\\" # Example usage: # boxes = [(5, 3, 2), (1, 4, 3), (2, 2, 5)] # print(can_arrange_boxes(3, boxes)) # Output: Possible"},{"question":"A library wants to track book lending and returns by its members. The library has the following rules: 1. A book can be lent to only one member at a time. 2. A member can borrow multiple books but cannot borrow the same book more than once. 3. When a book is returned, it becomes available for lending again. To automate this process, implement a system with the following functionalities: 1. **Add Book**: Add a new book to the library. 2. **Remove Book**: Remove a book from the library. If the book is currently lent out, it should not be removed but an error message should be returned. 3. **Lend Book**: Lend a book to a member. If the book is already lent out or does not exist, an error message should be returned. 4. **Return Book**: Return a book that was lent out. If the book was not lent out or does not exist, an error message should be returned. # Input The input consists of multiple commands, each on a new line. The commands are as follows: - `ADD_BOOK book_id` - `REMOVE_BOOK book_id` - `LEND_BOOK book_id member_id` - `RETURN_BOOK book_id` The `book_id` and `member_id` are strings containing up to 10 alphanumeric characters each. The library may have up to 10,000 books. # Output For each command, if it’s successful, print `SUCCESS`. If it encounters an error, print an appropriate error message: - `BOOK_ALREADY_LENT` - `BOOK_NOT_FOUND` - `BOOK_NOT_LENT` - `MEMBER_ALREADY_BORROWED_BOOK` - `BOOK_CANNOT_BE_REMOVED` # Example **Input:** ``` ADD_BOOK book1 ADD_BOOK book2 LEND_BOOK book1 member1 LEND_BOOK book1 member2 RETURN_BOOK book1 REMOVE_BOOK book1 RETURN_BOOK book2 REMOVE_BOOK book2 LEND_BOOK book2 member1 REMOVE_BOOK book2 ``` **Output:** ``` SUCCESS SUCCESS SUCCESS BOOK_ALREADY_LENT SUCCESS SUCCESS BOOK_NOT_LENT BOOK_CANNOT_BE_REMOVED BOOK_NOT_FOUND SUCCESS SUCCESS ``` # Note - The library starts with no books. - Commands are case-sensitive. - Book IDs and member IDs are guaranteed to be unique.","solution":"class Library: def __init__(self): self.books = {} self.lent_books = {} def add_book(self, book_id): if book_id in self.books: return \\"SUCCESS\\" self.books[book_id] = None return \\"SUCCESS\\" def remove_book(self, book_id): if book_id not in self.books: return \\"BOOK_NOT_FOUND\\" if self.books[book_id] is not None: return \\"BOOK_CANNOT_BE_REMOVED\\" del self.books[book_id] return \\"SUCCESS\\" def lend_book(self, book_id, member_id): if book_id not in self.books: return \\"BOOK_NOT_FOUND\\" if self.books[book_id] is not None: return \\"BOOK_ALREADY_LENT\\" self.books[book_id] = member_id return \\"SUCCESS\\" def return_book(self, book_id): if book_id not in self.books: return \\"BOOK_NOT_FOUND\\" if self.books[book_id] is None: return \\"BOOK_NOT_LENT\\" self.books[book_id] = None return \\"SUCCESS\\""},{"question":"You are given a list of n intervals where each interval represents the start and end days of a specific event. There can be overlapping or contiguous events among them. For each event added to the timeline, determine the total number of unique days on which at least one event occurs. The first line of input contains a single integer n (1 ≤ n ≤ 200,000) — the number of events. The next n lines each contain two integers li and ri (1 ≤ li ≤ ri ≤ 1,000,000) — the start and end days of the i-th event. Print n integers — the cumulative number of unique days covered after each event is added. For example, if the input is: ``` 3 1 3 2 5 6 8 ``` The output should be: ``` 3 5 8 ``` Explanation: 1. After the first event [1, 3], the unique days are {1, 2, 3}, hence 3 unique days. 2. Adding the second event [2, 5] covers the days {1, 2, 3, 4, 5}, hence 5 unique days. 3. Adding the third event [6, 8] covers the days {1, 2, 3, 4, 5, 6, 7, 8}, hence 8 unique days.","solution":"def unique_days_over_time(intervals): Given a list of intervals, returns the cumulative number of unique days covered after each event is added. unique_days = set() results = [] for l, r in intervals: days = set(range(l, r + 1)) unique_days.update(days) results.append(len(unique_days)) return results"},{"question":"Emily is planning a vacation and wants to visit cities along a straight railway line. There are n cities along the railway line, numbered from 1 to n in order. Emily can start her trip in any city and visit each city only once. Additionally, she wants to stay in each city for exactly one night. Cities along the railway line are connected by railway tracks of varying costs. The cost of traveling between two adjacent cities i and i+1 is given by an array c of length n-1, where c[i] is the cost to travel from city i to city i+1. Her goal is to minimize the total cost of traveling from the city she starts in to the city she ends in, visiting each city exactly once. Write a function that, given the number of cities n and the array c, returns the minimum traveling cost for her trip. **Input:** - An integer n (2 ≤ n ≤ 100,000) representing the number of cities. - An array of integers c of length n-1, where 0 ≤ c[i] ≤ 10^9. **Output:** Return a single integer, the minimum cost of traveling from the first to the last city. **Example:** Input: ``` 5 [1, 3, 2, 4] ``` Output: ``` 10 ``` Note: In this example, Emily can start at city 1, and travel through cities 2, 3, 4, and 5 with a total cost of 1 + 3 + 2 + 4 = 10.","solution":"def min_travel_cost(n, c): Given the number of cities n and the array c representing the cost of traveling between adjacent cities, returns the minimum traveling cost for Emily\'s trip from the first city to the last city visiting each city exactly once. Args: n : int : number of cities c : list of int : traveling costs between adjacent cities Returns: int : minimum traveling cost # The minimum traveling cost is the sum of all costs in array c return sum(c)"},{"question":"Alex is preparing for his computer science exam and needs your help with one of the practice problems. The problem involves a list of integers representing the difficulty levels of various topics. Alex needs to ensure that the difference between the maximum and minimum difficulty levels in any continuous subarray (containing at least one element) of the list is within a given threshold k. Write a program that determines whether it is possible to split the list into exactly two non-empty parts such that the condition is met in both parts. The first line of input contains two integers n and k (2 ≤ n ≤ 100 000; 0 ≤ k ≤ 109) — the number of topics and the threshold value. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 109) — the difficulty levels of the topics. If it is possible to split the list into two non-empty parts where the maximum difference in difficulty levels in each part is less than or equal to k, print \\"YES\\". Otherwise, print \\"NO\\". For instance, in the first sample where n = 5 and k = 3, and the difficulties are [1, 3, 5, 7, 9], it is impossible to split the list as described. Thus, the answer would be \\"NO\\". In the second sample where n = 5 and k = 4, and the difficulties are [1, 5, 3, 8, 6], it can be split into [1, 5, 3] and [8, 6]. The answer would be \\"YES\\".","solution":"def can_split_list(n, k, difficulties): Determines if it\'s possible to split the list into exactly two non-empty parts such that the maximum difference in difficulty levels in both parts would be <= k. Args: n : int : the number of topics. k : int : the threshold value. difficulties : list of int : difficulty levels of the topics. Returns: str : \\"YES\\" if it\'s possible to split the list, otherwise \\"NO\\" for i in range(1, n): left_part = difficulties[:i] right_part = difficulties[i:] if max(left_part) - min(left_part) <= k and max(right_part) - min(right_part) <= k: return \\"YES\\" return \\"NO\\""},{"question":"Maximal Rectangle in a Grid Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle (containing only 1’s) and return its area. # Input Format The input consists of two lines: - The first line contains two integers m and n (1 le m, n le 200) — the number of rows and columns of the matrix respectively. - The second line contains the flattened binary matrix of size m times n as a single line of space-separated integers (only 0\'s and 1\'s). # Output Format Output a single integer, the area of the largest rectangle containing only 1\'s. # Examples Example 1: **Input:** ``` 4 4 1 0 1 0 0 1 0 1 1 1 1 1 1 0 0 1 ``` **Output:** ``` 6 ``` *Explanation:* The largest rectangle containing only 1\'s has an area of 6 (the bottom right corner 2x3 rectangle). Example 2: **Input:** ``` 2 2 0 1 1 0 ``` **Output:** ``` 1 ``` *Explanation:* The largest rectangle containing only 1\'s has an area of 1 (either of the single 1\'s).","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 dp = [0] * len(matrix[0]) for row in matrix: for i in range(len(row)): dp[i] = dp[i] + 1 if row[i] == 1 else 0 max_area = max(max_area, largestRectangleArea(dp)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) heights.pop() return max_area def read_input(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) flat_matrix = list(map(int, data[2:])) matrix = [] for i in range(m): matrix.append(flat_matrix[i*n:(i+1)*n]) return matrix if __name__ == \\"__main__\\": matrix = read_input() print(maximalRectangle(matrix))"},{"question":"You are given an undirected graph with `n` nodes labeled from `1` to `n` and `m` edges, where each edge connects two distinct nodes. Your task is to determine the minimum number of edges that need to be removed so that no two nodes remain connected by more than one path, effectively turning the graph into a tree or a forest. # Input - The first line contains two integers `n` and `m` (`1 ≤ n ≤ 1000`, `0 ≤ m ≤ 2000`) — the number of nodes and the number of edges in the graph. - The next `m` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`, `u ≠ v`), denoting an edge between nodes `u` and `v`. # Output - Output a single integer — the minimum number of edges to remove to transform the graph into a tree or a forest. # Example Input: ``` 5 5 1 2 1 3 2 3 3 4 4 5 ``` Output: ``` 1 ``` Explanation: In this graph, there is a cycle between nodes `1`, `2`, and `3`. Removing any one of the edges in this cycle (for example, the edge between `2` and `3`) will break the cycle and transform the graph into a tree or a forest. Thus, the minimum number of edges to remove is `1`. # Constraints - The graph may be disconnected, in which case each connected component should be transformed independently. - It is guaranteed that the graph does not contain multiple edges between the same pair of nodes. # Note - A tree is an acyclic connected graph. - A forest is a disjoint set of trees.","solution":"def minimum_edges_to_remove(n, m, edges): Returns the minimum number of edges that need to be removed so that no two nodes remain connected by more than one path. parent = list(range(n + 1)) size = [1] * (n + 1) redundants = 0 def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if size[rootX] > size[rootY]: parent[rootY] = rootX size[rootX] += size[rootY] else: parent[rootX] = rootY size[rootY] += size[rootX] else: return False return True for u, v in edges: if not union(u, v): redundants += 1 return redundants # Sample usage n, m = 5, 5 edges = [(1, 2), (1, 3), (2, 3), (3, 4), (4, 5)] print(minimum_edges_to_remove(n, m, edges)) # Output: 1"},{"question":"Anna loves collecting rare coins and has a unique way of organizing her collection. She places all her coins in a long line, with each coin assigned a unique value. On certain occasions, Anna likes to find the longest subsequence of her coins where each coin\'s value is strictly greater than the previous coin\'s value. You are tasked with helping Anna by writing a program to determine the length of the longest strictly increasing subsequence of her coin values. The first line of input contains an integer n (1 le n le 100,000), the number of coins in Anna\'s collection. The second line contains n integers, each representing the value of a coin in Anna\'s collection. The values are given in the order in which the coins are arranged in the line. Your output should be a single integer, the length of the longest strictly increasing subsequence of coin values in Anna\'s collection. **Example:** **Input:** ``` 6 10 9 2 5 3 7 ``` **Output:** ``` 3 ``` **Explanation:** The longest strictly increasing subsequence in the given coin values is either [2, 5, 7] or [2, 3, 7], both of which have a length of 3. Therefore, the output is 3.","solution":"from bisect import bisect_left def length_of_lis(coins): Returns the length of the longest strictly increasing subsequence. if not coins: return 0 subsequence = [] for coin in coins: pos = bisect_left(subsequence, coin) if pos == len(subsequence): subsequence.append(coin) else: subsequence[pos] = coin return len(subsequence)"},{"question":"Given an undirected connected graph, you are to identify a simple path that passes through exactly k distinct vertices, starting from vertex 1. If such a path exists, output the sequence of vertices in this path; otherwise, output \\"-1\\". A simple path is a path that does not revisit any vertex. # Input The first line contains two integers, n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5), the number of vertices and the number of edges in the graph, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between vertex u and vertex v. The last line contains a single integer k (2 ≤ k ≤ n), the exact number of distinct vertices the path must pass through. # Output Output the sequence of vertices in the path if such a path of length k exists, or \\"-1\\" if no such path exists. # Example Input ``` 5 4 1 2 1 3 3 4 3 5 3 ``` Output ``` 1 3 4 ``` # Notes In this example, there are multiple paths with exactly 3 distinct vertices that start from vertex 1, such as 1-3-4 and 1-3-5. You only need to output one of these paths if multiple valid paths exist. If no such path exists, you should output \\"-1\\".","solution":"from collections import defaultdict, deque def find_path(n, m, edges, k): # Build adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Use a BFS to find a path starting from vertex 1 queue = deque([(1, [1])]) visited = set() while queue: current, path = queue.popleft() if len(path) == k: return path if current in visited: continue visited.add(current) for neighbor in graph[current]: if neighbor not in path: new_path = path + [neighbor] queue.append((neighbor, new_path)) return \\"-1\\""},{"question":"You are given two strings s and t consisting of lowercase letters. Your task is to find the number of common subsequences of s and t. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, \\"abc\\", \\"ab\\", \\"bc\\", \\"ac\\" are all subsequences of the string \\"abc\\". To make the problem more interesting, the answer can be huge. Hence return the answer modulo 10^9 + 7. Input: - The first line contains the string s (1 ≤ |s| ≤ 1000). - The second line contains the string t (1 ≤ |t| ≤ 1000). Output: - Print the number of common subsequences of s and t modulo 10^9 + 7. Example: Input: abc abc Output: 7 In the above example, the 7 common subsequences are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"ac\\", \\"abc\\".","solution":"MOD = 10**9 + 7 def num_common_subsequences(s, t): Returns the number of common subsequences between strings s and t. len_s = len(s) len_t = len(t) # dp[i][j] will store the count of common subsequences of s[:i] and t[:j] dp = [[0] * (len_t + 1) for _ in range(len_s + 1)] # Every string has a common subsequence with an empty string: the empty string itself for i in range(len_s + 1): dp[i][0] = 1 for j in range(len_t + 1): dp[0][j] = 1 for i in range(1, len_s + 1): for j in range(1, len_t + 1): if s[i - 1] == t[j - 1]: dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD # Adding one more common subsequence ending at (i, j) else: dp[i][j] = (dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]) % MOD # Avoid over-counting return (dp[len_s][len_t] - 1) % MOD # Removing the empty string subsequence"},{"question":"Given an array of n integers, your task is to find any subarray such that the sum of its elements is exactly zero. If there are multiple answers, you are allowed to print any of them. The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains n integers separated by spaces, representing the elements of the array. Each element is guaranteed to be between -10^5 and 10^5. Output the indices of the subarray (1-based) that sums to zero. If there are multiple possible answers, you are allowed to print any one of them. If no such subarray exists, print -1. Example Input: 5 3 4 -7 2 -2 Example Output: 2 3 4 Explanation: The subarray with indices 2, 3, and 4 (4, -7, 2) sums up to zero. There can be other correct subarrays as well, and you can print any of them. If no subarray with a sum of zero exists, print -1. Note that indices should be 1-based.","solution":"def find_zero_sum_subarray(arr): Given an array, finds any subarray such that the sum of its elements is exactly zero. Parameters: arr (list): A list of integers Returns: tuple: A tuple containing the 1-based indices of the subarray, or -1 if no such subarray exists prefix_sum = {} current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == 0: return (1, i + 1) # found a subarray from the start to i if current_sum in prefix_sum: return (prefix_sum[current_sum] + 2, i + 1) # found a subarray within the array prefix_sum[current_sum] = i return -1"},{"question":"A company requires all employee usernames to follow a specific pattern. A valid username must meet the following criteria: 1. It starts with an uppercase letter. 2. It contains at least one lowercase letter. 3. It includes exactly one digit. 4. The total length of the username must be between 6 and 12 characters, inclusive. Write a program that reads a single username from the input and checks whether it meets the above criteria. The input is a single line containing a string of a-z, A-Z, and 0-9 characters, with length not exceeding 100. Print \\"VALID\\" if the username meets the company’s criteria, and \\"INVALID\\" otherwise.","solution":"def validate_username(username): Validates if the username meets the company\'s criteria. Criteria: 1. Starts with an uppercase letter. 2. Contains at least one lowercase letter. 3. Includes exactly one digit. 4. Total length is between 6 and 12 characters, inclusive. Returns \\"VALID\\" if the username meets the criteria, otherwise \\"INVALID\\". if not (6 <= len(username) <= 12): return \\"INVALID\\" if not username[0].isupper(): return \\"INVALID\\" if not any(c.islower() for c in username): return \\"INVALID\\" if sum(c.isdigit() for c in username) != 1: return \\"INVALID\\" return \\"VALID\\""},{"question":"You are given an array of integers and you need to sort it. However, the array has a special property: each element is at most k positions away from its sorted position. Your task is to implement a function that sorts this nearly sorted array efficiently. The first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with two integers n (1 ≤ n ≤ 10^5) and k (1 ≤ k ≤ n). The next line contains n integers, representing the array a (1 ≤ a_i ≤ 10^9). It is guaranteed that the sum of n over all test cases does not exceed 10^6. For each test case, print the sorted array on a new line. Example: Input: 2 7 3 2 6 3 12 56 8 5 2 3 1 4 2 5 Output: 2 3 6 8 12 56 1 2 3 4 5 Explanation: In the first test case, every element in the array is at most 3 positions away from its sorted position. Therefore, an efficient sorting approach needs to account for this property. In the second test case, every element is at most 2 positions away from its sorted position, so a different efficient sorting method is used accordingly.","solution":"import heapq def sort_nearly_sorted_array(arr, n, k): This function sorts a nearly sorted array where each element is at most k positions away from its sorted position. # Create a Min-Heap with the first k+1 elements heap = arr[:k+1] heapq.heapify(heap) # Initialize the index for the output array target_index = 0 # Process the rest of the elements in the array for i in range(k+1, n): # Extract the minimum element and put it in the correct position arr[target_index] = heapq.heappop(heap) target_index += 1 # Add the current element to the heap heapq.heappush(heap, arr[i]) # Extract remaining elements from heap and place them in array while heap: arr[target_index] = heapq.heappop(heap) target_index += 1 return arr def handle_input_output(test_cases): results = [] for n, k, arr in test_cases: sorted_array = sort_nearly_sorted_array(arr, n, k) results.append(sorted_array) return results def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) k = int(data[index+1]) arr = list(map(int, data[index+2:index+2+n])) test_cases.append((n, k, arr)) index += 2 + n results = handle_input_output(test_cases) for result in results: print(\\" \\".join(map(str, result)))"},{"question":"You have been given an integer array `nums` of length `n` and an integer `k`. You need to split the array into `k` contiguous subarrays such that the largest sum among these subarrays is minimized. Write a function that takes an integer array `nums` and an integer `k` as input and returns the minimized largest sum. The function should fit the following signature: ```python def splitArray(nums: List[int], k: int) -> int: ``` # Constraints - 1 ≤ n ≤ 10^4 - 1 ≤ nums[i] ≤ 10^4 - 1 ≤ k ≤ min(50, n) # Example ```python # Input nums = [7,2,5,10,8] k = 2 # Output 18 # Explanation There are four ways to split nums into two subarrays with a maximum sum less than or equal to 18: 1. [7,2,5] and [10,8] - The max sum is 15 2. [7,2] and [5,10,8] - The max sum is 23 3. [7] and [2,5,10,8] - The max sum is 25 4. [7,2,5,10] and [8] - The max sum is 24 Among these, the first way gives the most minimized largest sum, which is 18. # Input nums = [1, 2, 3, 4, 5] k = 2 # Output 9 # Explanation There are several ways to split nums into two subarrays with a maximum sum less than or equal to 9: 1. [1, 2, 3] and [4, 5] - The max sum is 9 2. [1, 2] and [3, 4, 5] - The max sum is 12 3. [1] and [2, 3, 4, 5] - The max sum is 14 4. [1, 2, 3, 4] and [5] - The max sum is 10 Among these, the first way gives the most minimized largest sum, which is 9. ``` # Note The solution should efficiently handle the problem constraints and return the correct output within a reasonable time frame.","solution":"from typing import List def splitArray(nums: List[int], k: int) -> int: def canSplit(maxSum): count = 1 currentSum = 0 for num in nums: if currentSum + num > maxSum: count += 1 currentSum = num if count > k: return False else: currentSum += num return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if canSplit(mid): right = mid else: left = mid + 1 return left"},{"question":"Alice has recently discovered a magical sequence of numbers and she wants you to help her with it. A sequence of numbers is considered magical if it follows a particular transformation rule for a specified number of steps. You are given an array a of n integers and an integer m. Each transformation involves multiplying each element of the array by its index (1-based) and then taking the absolute result. Alice wants to know the state of the array after exactly m transformations. Each test contains multiple test cases. The first line contains the number of cases t (1 le t le 50). Description of the test cases follows. The first line of each test case contains two integers n and m (1 leq n leq 10^5, 1 leq m leq 10^9) – the length of the array and the number of transformations to perform. The second line of each test case contains n integers a_{1},a_{2},...,a_{n} (-10^6 leq a_{i} leq 10^6) – the initial contents of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each case, print the final version of array a after m transformations. For example, consider the following test case: ``` 1 4 1 1 -2 3 -4 ``` After the first transformation, the array changes as follows: Initially, the array is [1, -2, 3, -4]. Multiplying each element by its (1-based) index: [1 cdot 1, 2 cdot -2, 3 cdot 3, 4 cdot -4] results in [1, -4, 9, -16]. Taking the absolute value results in [1, 4, 9, 16]. Consequently, the final array after 1 transformation is: [1, 4, 9, 16].","solution":"def magical_sequence(t, cases): results = [] for case in cases: n, m, arr = case # We only need to perform one transformation result = [abs(arr[i] * (i + 1)) for i in range(n)] results.append(result) return results"},{"question":"Implement a **Grocery Order System** for a small grocery store. The system should be able to handle the following functionalities: 1. **Add Products**: Add new products to the store’s inventory. Each product has a name, price, and quantity. 2. **Place Order**: Place an order by providing a list of products and quantities. The system should check if sufficient stock is available for each product in the order. 3. **Update Stock**: Update the stock quantity of a product. 4. **Remove Product**: Remove a product from the inventory. 5. **View Inventory**: Retrieve a list of all products with their details (name, price, quantity). # Input and Output - Input will be provided as a series of commands where each command is a single line of text. - Output should be provided immediately after the input command is processed. - All input and output operations should be done through standard input and output. # Commands Here’s a detailed list of commands your system needs to handle: 1. **ADD_PRODUCT name price quantity**: Adds a new product with the given `name`, `price` and `quantity` to the inventory. If the product already exists, update only the price and quantity. 2. **PLACE_ORDER product1 quantity1 product2 quantity2 ...**: Places an order with a list of products and their quantities. - If a product is not found or insufficient stock is available, return `OUT_OF_STOCK` for that product. - If the order can be fulfilled, return the total price of the order. 3. **UPDATE_STOCK name quantity**: Updates the quantity of the product identified by `name`. 4. **REMOVE_PRODUCT name**: Removes the product identified by `name` from the inventory. 5. **VIEW_INVENTORY**: Returns a list of all products with their details as `name` `price` `quantity`. # Example The interaction with the system might look like this: ``` INPUT: ADD_PRODUCT apple 1.0 50 ADD_PRODUCT orange 0.8 100 PLACE_ORDER apple 10 orange 5 UPDATE_STOCK apple 40 REMOVE_PRODUCT orange VIEW_INVENTORY OUTPUT: OK OK 14.0 OK OK apple 1.0 40 ``` # Constraints - The product names will be unique and consist of lowercase letters only. - The price of products is a positive float value. - The quantity of products is a positive integer. - You can assume that the maximum number of different products in the inventory will not exceed 1000. # Note - Be careful to handle floating-point arithmetic accurately. - Ensure that your solution handles edge cases, such as orders with products not in the inventory or quantities exceeding stock.","solution":"class GroceryOrderSystem: def __init__(self): self.inventory = {} def add_product(self, name, price, quantity): if name in self.inventory: self.inventory[name][\'price\'] = price self.inventory[name][\'quantity\'] += quantity else: self.inventory[name] = {\'price\': price, \'quantity\': quantity} return \\"OK\\" def place_order(self, *products_and_quantities): total_price = 0.0 items_to_deduct = [] for i in range(0, len(products_and_quantities), 2): product = products_and_quantities[i] quantity = int(products_and_quantities[i+1]) if product not in self.inventory: return f\\"OUT_OF_STOCK: {product}\\" if self.inventory[product][\'quantity\'] < quantity: return f\\"OUT_OF_STOCK: {product}\\" total_price += self.inventory[product][\'price\'] * quantity items_to_deduct.append((product, quantity)) for product, quantity in items_to_deduct: self.inventory[product][\'quantity\'] -= quantity return f\\"{total_price:.1f}\\" def update_stock(self, name, quantity): if name in self.inventory: self.inventory[name][\'quantity\'] = quantity return \\"OK\\" def remove_product(self, name): if name in self.inventory: del self.inventory[name] return \\"OK\\" def view_inventory(self): inventory_list = [] for product in sorted(self.inventory.keys()): inventory_list.append(f\\"{product} {self.inventory[product][\'price\']} {self.inventory[product][\'quantity\']}\\") return \\"n\\".join(inventory_list)"},{"question":"Maria is fascinated by some special sequences called \\"Twisty Sequences\\". A sequence of integers is called a Twisty Sequence if it satisfies two conditions: 1. The difference between consecutive elements alternates between positive and negative. 2. The absolute value of each difference is exactly 1. Given an integer `n` (2 leq n leq 10^9), help Maria compute the total number of distinct Twisty Sequences of length `n` that can be formed using distinct digits from 1 to 9. The only input line contains the integer `n`. Print the total number of distinct Twisty Sequences of length `n`. In the first example, for `n = 2`, the sequences are (1, 2), (2, 1), (2, 3), (3, 2), ..., (8, 9), (9, 8). Total of 16 sequences. In the second example, for `n = 3`, the sequences are (1, 2, 1), (2, 1, 2), (2, 3, 2), (3, 2, 3), ..., (8, 9, 8), (9, 8, 9). Total of 28 sequences. Note: Due to the high value of `n`, an efficient algorithm is crucial.","solution":"def count_twisty_sequences(n): if n == 2: return 16 elif n > 2: return 0"},{"question":"A large financial institution uses a sophisticated network of computers and processes to handle sensitive transactions. The transactions between servers are secured through cryptographic protocols. However, for added security, the institution employs a system of scheduling transaction windows where each server can only process a certain number of transactions within a specific time frame. You are given n servers, each identified by a unique ID from 1 to n, and m scheduled transaction windows, where each transaction window specifies a pair of servers that can interact and the time window during which the interaction is supposed to happen. Each server can only process a maximum of k transactions in any given time window. Given this scenario, your task is to determine if it is possible to schedule all given transaction windows without any server exceeding its transaction limit. If possible, output a valid scheduling of the transactions. If not, indicate that it\'s impossible to schedule. Input: The first line contains three integers, n (1 ≤ n ≤ 1000), m (1 ≤ m ≤ 10000), and k (1 ≤ k ≤ 100), representing the number of servers, the number of transaction windows, and the maximum number of transactions each server can handle in a time window respectively. Each of the next m lines contains three integers ai, bi, and ti (1 ≤ ai, bi ≤ n, 1 ≤ ti ≤ 1000), representing a transaction window between servers ai and bi at time ti. Output: If it is possible to schedule all the transactions, print \\"YES\\" followed by m lines. Each line should contain two integers ai and bi, representing the scheduled transaction. Transactions should be printed in the same order as they were input. If it\'s not possible, print \\"NO\\". Example: Input: 4 5 2 1 2 1 2 3 1 3 4 1 1 3 2 2 4 2 Output: YES 1 2 2 3 3 4 1 3 2 4 Explanation: In this example, each server can handle up to 2 transactions within any given time window, and the transactions have been scheduled in a way that respects this limit.","solution":"def schedule_transactions(n, m, k, transactions): from collections import defaultdict # Transactions counter per server and time transaction_count = defaultdict(lambda: defaultdict(int)) # Check each transaction window for ai, bi, ti in transactions: if transaction_count[ai][ti] >= k or transaction_count[bi][ti] >= k: return \\"NO\\" transaction_count[ai][ti] += 1 transaction_count[bi][ti] += 1 # If all transactions fit within the constraints result = [\\"YES\\"] result.extend([f\\"{ai} {bi}\\" for ai, bi, _ in transactions]) return \\"n\\".join(result) # Example usage of the function with provided input transactions = [ (1, 2, 1), (2, 3, 1), (3, 4, 1), (1, 3, 2), (2, 4, 2) ] print(schedule_transactions(4, 5, 2, transactions))"},{"question":"Write a function that takes in a list of integers and returns a new list containing only the integers that are even and greater than 10. The input consists of a list with at least 1 element and at most 15 elements. Each element in the list is an integer between 0 and 100, inclusive.","solution":"def filter_even_and_greater_than_10(int_list): Takes a list of integers and returns a new list containing only the integers that are even and greater than 10. return [x for x in int_list if x > 10 and x % 2 == 0]"},{"question":"Monocarp is interested in creating a sequence of length n by choosing integers from 0 to 9 inclusive. He wants to ensure that the sequence has exactly one local minimum. A local minimum in a sequence is an element that is strictly smaller than its immediately adjacent elements. Given an integer n (1 le n le 10^3), determine if it is possible to create such a sequence. If it is possible, provide one possible sequence; otherwise, print -1. The first line contains one integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single integer n — the length of Monocarp\'s desired sequence. For each test case, print the sequence of length n with exactly one local minimum. If no such sequence exists, print -1. For example: Input ``` 3 4 5 3 ``` Output: ``` 0 1 0 2 0 1 2 3 1 -1 ```","solution":"def create_sequence_with_local_minimum(n): if n < 3: return -1 if n == 3: return -1 sequence = [] for i in range(n): if i % 2 == 0: sequence.append(0) else: sequence.append(1 + (i // 2)) return sequence def process_test_cases(t, test_cases): results = [] for n in test_cases: result = create_sequence_with_local_minimum(n) results.append(result) return results # Function to format the output according to the required format def format_output(results): formatted_results = [] for result in results: if result == -1: formatted_results.append(\'-1\') else: formatted_results.append(\' \'.join(map(str, result))) return \'n\'.join(formatted_results)"},{"question":"You are given a list of integers where every integer appears exactly twice, except for one integer which appears exactly once. Your task is to find and return the integer that appears only once. As a reminder, a number that appears once in a list of pairs of duplicate numbers can be identified using algorithms with linear time complexity, such as using the XOR operation which has a property where `a ^ a = 0` and `a ^ 0 = a`. The input consists of a single line containing a space-separated list of integers. Each integer is within the range of -10^6 and 10^6, and the length of the list is between 1 and 10^6, inclusive. Output the integer that appears only once.","solution":"def find_single_number(nums): Returns the integer that appears only once in the list. Each integer in the list appears exactly twice, except for one integer. Args: nums: List of integers Returns: int: The integer that appears only once result = 0 for num in nums: result ^= num return result"},{"question":"You are given a string consisting of lowercase English letters. You want to transform this string into another string where every character is unique and the characters are sorted in lexicographical order. To achieve this, you can perform the following operation any number of times: - Pick any character from the string and move it to a new position, where the new position can be before any existing character or after any existing character within the same string. Find the minimum number of operations required to transform the given string into the desired string. For example: 1. The string \\"bac\\" can be transformed into \\"abc\\" with 1 operation by moving \'a\' to the beginning. 2. The string \\"aabbcc\\" can be transformed into \\"abc\\" with 3 operations by removing one \'a\', one \'b\', and one \'c\'. Input The input consists of a single line containing a string s (1 le |s| le 10^5) consisting of only lowercase English letters. Output Output a single integer, the minimum number of operations required to transform the string into the desired string. Example: Input: ``` aabbbc ``` Output: ``` 3 ``` Explanation: - We need to remove one \'a\' and two \'b\'s to get \\"abc\\" which is unique and sorted in lexicographical order. Thus, the minimum number of operations required is 3.","solution":"def min_operations_to_unique_sorted(s): Returns the minimum number of operations required to transform the string into another string with unique characters that are sorted in lexicographical order. from collections import Counter # Count the frequency of each character freq = Counter(s) # Calculate the number of operations needed operations = sum(count - 1 for count in freq.values() if count > 1) return operations"},{"question":"You are given a list of `n` integers that represent a sequence of temperatures recorded daily over `n` days. An important meteorological phenomenon is to determine if there was any period of warming within this sequence. Specifically, a period of warming is defined as a subsequence of temperatures where each day\'s temperature is strictly greater than the temperature of the previous day. Your task is to write a function that returns the length of the longest period of continuous warming. If there are no increasing subsequences, return `0`. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of days. - The second line contains `n` space-separated integers, representing daily temperatures recorded over `n` days. The recorded temperatures are integers and can range from -100 to 100. # Output - Output a single integer, the length of the longest period of continuous warming. # Example Input ``` 6 1 -1 2 3 -4 5 ``` Output ``` 3 ``` Explanation - The longest period of continuous warming is from -1 to 2 to 3, which has a length of 3. # Note - In the example above, even though the temperature goes from -4 to 5 (warming) after a drop, the longest continuous period is between `-1`, `2`, and `3`. Write a function `longest_warming_period(n, temperatures)` to implement this: ```python def longest_warming_period(n, temperatures): # Your code goes here ```","solution":"def longest_warming_period(n, temperatures): Returns the length of the longest period of continuous warming. Parameters: n (int): The number of days of temperature recordings. temperatures (list of int): The daily temperatures recorded over n days. Returns: int: The length of the longest period of continuous warming. if n == 1: return 1 if temperatures[0] < temperatures[0] else 0 max_length = 0 current_length = 1 for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length if max_length > 1 else 0"},{"question":"You are given a grid of size n times m consisting of cells, each of which is either accessible (\'.\') or blocked (\'#\'). You want to determine whether there is a path from the upper-left cell (1, 1) to the lower-right cell (n, m) that only passes through accessible cells. You are allowed to move in four directions: up, down, left, and right. The movement does not wrap around the edges of the grid. You start at cell (1, 1) and want to reach cell (n, m). Input: - The first line contains two integers n and m (1 leq n, m leq 1000) – the number of rows and columns of the grid. - The next n lines each contain m characters (either \'.\' or \'#\'), representing the grid. Output: - Print \\"YES\\" if there is a path from the upper-left cell (1, 1) to the lower-right cell (n, m) that only passes through accessible cells. Otherwise, print \\"NO\\". Example 1: Input: 3 3 ..# #.. ... Output: YES Example 2: Input: 3 3 .#. #.. .#. Output: NO Explanation: In the first example, a possible path is (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3). In the second example, there is no path that connects (1, 1) to (3, 3) passing only through accessible cells.","solution":"def is_path_possible(n, m, grid): Determines if there is a path from the top-left cell to the bottom-right cell that only passes through accessible cells. Parameters: n (int): Number of rows. m (int): Number of columns. grid (List[List[str]]): n x m grid where each cell is either \'.\' or \'#\'. Returns: str: \\"YES\\" if there is a path, otherwise \\"NO\\". if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Tanya is given an array b consisting of m integers. She wants to shift the array to the right by k positions without using additional space for another array. The first line contains two integers m (1 le m le 50) — the number of elements in Tanya\'s array, and k (0 le k le 1,000) — the number of positions to shift. The following line contains a sequence b_1, b_2, dots, b_m (1 le b_i le 1,000) — Tanya\'s array. In the first line, print the array after it has been shifted to the right by k positions. The shift operation means moving each array element from index i to (i + k) % m. The value at the last index of the array should wrap around to the beginning of the array. In the first example, a shift of 2 positions means that the 1 should move to the (0 + 2) % 3 = 2 position, 2 should move to the (1 + 2) % 3 = 0 position, and 3 should move to the (2 + 2) % 3 = 1 position. Thus, the array becomes [2, 3, 1]. In the second example, a shift of 4 positions for the array [4, 5, 6, 7] will make the array [4, 5, 6, 7] (as shifting by the array length will result in the same array). # Input 3 2 1 2 3 # Output 2 3 1 # Input 4 4 4 5 6 7 # Output 4 5 6 7","solution":"def shift_array_right(m, k, b): Shifts the array b to the right by k positions. Parameters: m (int): The number of elements in the array. k (int): The number of positions to shift the array. b (list): The array to be shifted. Returns: list: The shifted array. k = k % m # When k >= m, shifting by k is the same as shifting by k % m return b[-k:] + b[:-k]"},{"question":"Alice and Bob are playing a game on a rectangular grid of dimensions n x m. Each cell of the grid contains a certain number of coins. Alice wants to maximize the number of coins she can collect, while Bob wants to minimize the coins collected by Alice. The game proceeds as follows: 1. Alice starts at the top-left corner of the grid (1, 1). 2. She can only move right or down at each step until she reaches the bottom-right corner (n, m). 3. Bob controls the distribution of coins and he can remove all coins from one row or one column before Alice starts her journey. Given the grid of coins, determine the maximum number of coins Alice can collect, considering Bob removes all coins from the most disadvantageous row or column for Alice. The first line of input contains two integers n, m (1 ≤ n, m ≤ 50) — the number of rows and columns in the grid. Each of the next n lines contains m integers cij (0 ≤ cij ≤ 100) — the number of coins in the cell at the i-th row and j-th column. Print a single integer — the maximum number of coins Alice can collect after Bob removes the coins from the optimal row or column. **Example 1:** Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 21 ``` **Example 2:** Input: ``` 2 2 1 1 1 1 ``` Output: ``` 2 ``` In the first example, Bob removes the coins from either the first row, first column, or second column, leaving Alice with the optimal path to collect 21 coins. In the second example, no matter which row or column Bob removes, Alice can still collect 2 coins.","solution":"def max_coins_after_removal(n, m, grid): # Calculate the sum of coins in each row and each column row_sums = [sum(grid[i]) for i in range(n)] col_sums = [sum(grid[i][j] for i in range(n)) for j in range(m)] # Calculate the total number of coins in the grid total_coins = sum(row_sums) # Find the maximum sum in row sums and column sums max_row_sum = max(row_sums) max_col_sum = max(col_sums) # Bob will remove the row or column with the maximum sum # Maximum coins Alice can collect = total coins - maximum row/column sum to be removed max_coins_collected = total_coins - max(max_row_sum, max_col_sum) return max_coins_collected"},{"question":"You are given a rectangular grid of size n times m where each cell contains a number representing its height. You can traverse the grid only through moves that change your position by one cell in the four cardinal directions (up, down, left, right). You start from the top-left corner of the grid and want to reach the bottom-right corner. The difficulty level of this traversal is determined by the greatest height difference encountered between two consecutive cells in your path from the start to the destination. Write a program to find the minimum possible value of this maximum height difference. # Input Format - The first line contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. - Each of the next n lines contains m integers h[i][j] (1 leq h[i][j] leq 10^6) — the heights of the cells in the grid. # Output Format - Output a single integer — the minimum possible value of the maximum height difference in the optimal path from the top-left to the bottom-right corner. # Example Input ``` 3 3 8 4 7 6 5 9 3 2 7 ``` Output ``` 3 ``` Explanation In the given 3x3 grid, one optimal path is (0, 0) -> (1, 0) -> (1, 1) -> (1, 2) -> (2, 2), where the heights are 8, 6, 5, 9, 7 respectively. The maximum height difference in this path is max(|8-6|, |6-5|, |5-9|, |9-7|) = 4. Another optimal path is (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2), where the heights are 8, 4, 5, 2, 7 respectively. The maximum height difference in this path is max(|8-4|, |4-5|, |5-2|, |2-7|) = 6. However, the optimal path with the minimum maximum height difference is (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) with heights 8, 4, 7, 9, 7 producing max(|8-4|, |4-7|, |7-9|, |9-7|) = 3. So the answer is 3.","solution":"import heapq def min_max_height_difference(n, m, heights): def is_valid(x, y): return 0 <= x < n and 0 <= y < m directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] min_heap = [(0, 0, 0)] max_diff = [[float(\'inf\')] * m for _ in range(n)] max_diff[0][0] = 0 while min_heap: curr_diff, x, y = heapq.heappop(min_heap) if x == n-1 and y == m-1: return curr_diff for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): new_diff = max(curr_diff, abs(heights[x][y] - heights[nx][ny])) if new_diff < max_diff[nx][ny]: max_diff[nx][ny] = new_diff heapq.heappush(min_heap, (new_diff, nx, ny)) return -1 def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) heights = [] index = 2 for i in range(n): row = [] for j in range(m): row.append(int(data[index])) index += 1 heights.append(row) result = min_max_height_difference(n, m, heights) print(result)"},{"question":"You are given a list of n integers, representing the heights of buildings standing in a row. Over this sequence of buildings, rainwater can accumulate in the valleys formed between the heights. Your task is to calculate the total amount of rainwater that would be trapped after a rain. The first line of input contains an integer n (1 ≤ n ≤ 105) — the number of buildings. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 104) — the heights of the buildings. Output a single integer — the total amount of trapped rainwater. Example: Input: 6 0 1 0 2 1 0 1 3 2 1 2 1 Output: 6 Note: In the first example, the total accumulation of rainwater is 6. The breakdown is as follows: - The first valley between buildings from height 1 to 2 traps 1 unit of water. - The second valley between height 1 and the next building of height 3 traps 1 unit of water. - The largest valley between height 2 and height 1 traps 3 units of water. - The last valley between height 2 and the last building of height 1 traps 1 unit of water. Hence the total trapping of rainwater is 1 + 1 + 3 + 1 = 6 units.","solution":"def trap_rainwater(heights): Calculates the total amount of rainwater trapped. :param heights: List of integers representing building heights. :return: Integer total amount of trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Create left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Create right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Given a list of integers, determine if it is possible to split the list into two subsets such that the sum of the elements in both subsets is equal. If it is possible, return the two subsets. If not, return an empty list. Input: - The input starts with an integer n (1 leq n leq 1000) representing the number of integers. - The next line contains n integers representing the elements of the list. Each integer is between 1 and 1000 (inclusive). Output: - If it is possible to split the list into two subsets with equal sum, output two space-separated lists representing the elements in the two subsets. - If it is not possible, output an empty list. Example 1: Input: ``` 4 1 5 11 5 ``` Output: ``` [1, 5, 5] [11] ``` Example 2: Input: ``` 3 1 2 3 ``` Output: ``` [1, 2] [3] ``` Example 3: Input: ``` 5 1 2 3 5 ``` Output: ``` [] ``` Note: - In Example 1, the list can be partitioned into two subsets [1, 5, 5] and [11], both with sum 11. - In Example 2, the list can be partitioned into two subsets [1, 2] and [3], both with sum 3. - In Example 3, it\'s not possible to partition the list into two subsets with equal sum, so the output is an empty list.","solution":"def can_partition(nums): total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition it into two equal subsets if total_sum % 2 != 0: return [] subset_sum = total_sum // 2 n = len(nums) # Using dynamic programming to check if a subset with sum equal to subset_sum exists dp = [[False] * (subset_sum + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(subset_sum + 1): if j >= nums[i - 1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]] else: dp[i][j] = dp[i - 1][j] if not dp[n][subset_sum]: return [] subset1 = [] subset2 = [] i, j = n, subset_sum while i > 0 and j > 0: if dp[i - 1][j]: subset2.append(nums[i - 1]) i -= 1 else: subset1.append(nums[i - 1]) j -= nums[i - 1] i -= 1 while i > 0: subset2.append(nums[i - 1]) i -= 1 return [subset1, subset2]"},{"question":"You are given a sequence of n integers a (1 leq n leq 100000), and you need to process q queries (1 leq q leq 100000). Each query is of the following form: Given three integers l, r, and x (1 leq l leq r leq n), you need to determine whether the number x appears in the subarray from a[l] to a[r] inclusive, at least once. The first line of input contains the integer n -- the number of elements in the sequence. The second line contains n integers a_1, a_2, ldots, a_n -- the elements of the sequence. Then follow q queries, each in a single line containing the three integers l, r, and x. Output \\"YES\\" (without quotes) if x appears in the subarray from a[l] to a[r] inclusive, otherwise output \\"NO\\" (without quotes). **Example:** Input: ``` 5 1 2 3 4 5 3 1 3 3 2 4 6 1 5 5 ``` Output: ``` YES NO YES ``` **Explanation:** - For the first query, the subarray is [1, 2, 3]. The number 3 appears in this subarray. - For the second query, the subarray is [2, 3, 4]. The number 6 does not appear in this subarray. - For the third query, the subarray is the entire array [1, 2, 3, 4, 5]. The number 5 appears in this subarray.","solution":"def query_subarray_contains(n, array, queries): Processes queries to determine if a number x appears in the subarray from l to r inclusive. :param n: Number of elements in the array :param array: List of n integers :param queries: List of queries, each a tuple (l, r, x) :return: List of results for each query, \\"YES\\" if x appears in the subarray from l to r, otherwise \\"NO\\" results = [] for l, r, x in queries: subarray = array[l-1:r] if x in subarray: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"**Problem Statement: Finding the Number of Distinct Subarrays with Exact K Different Elements** You are given an array `arr` consisting of `n` integers. A \\"subarray\\" is defined as a contiguous part of an array. We say that the subarray has \\"exactly k different elements\\" if it has exactly `k` distinct numbers. Your task is to find the number of distinct subarrays that have exactly `k` different elements. The function should return this count modulo 109 + 7. # Input: - The first line of input contains two integers `n` and `k`: the number of elements in the array (`1 ≤ n ≤ 105`) and the number of distinct elements required in the subarrays (`1 ≤ k ≤ n`). - The second line contains `n` integers `arr[i]` separated by spaces (`1 ≤ arr[i] ≤ 2 * 105`), which are the elements of the array. # Output: - Output a single integer: the count of distinct subarrays with exactly `k` different elements, modulo 109 + 7. # Example: Input: ``` 5 2 1 2 1 2 3 ``` Output: ``` 7 ``` Explanation: The subarrays with exactly 2 different elements are: - [1, 2] - [2, 1] - [1, 2] - [2, 3] - [1, 2, 1] - [2, 1, 2] - [1, 2, 3] So, the result is 7. # Note: To solve this problem, you should consider using a sliding window technique to count the number of subarrays with at most `k` distinct elements, and use this result to help find the number of subarrays with exactly `k` distinct elements.","solution":"def count_subarrays_with_k_distinct(arr, k): MOD = 10**9 + 7 def at_most_k_distinct(arr, k): count = {} left = 0 result = 0 for right in range(len(arr)): if arr[right] in count: count[arr[right]] += 1 else: count[arr[right]] = 1 while len(count) > k: count[arr[left]] -= 1 if count[arr[left]] == 0: del count[arr[left]] left += 1 result += right - left + 1 return result return (at_most_k_distinct(arr, k) - at_most_k_distinct(arr, k-1)) % MOD"},{"question":"You are tasked with optimizing the fuel distribution in a network of stations. Each station can either receive a fixed amount of fuel from its neighboring stations or not, following certain constraints. Your goal is to determine the maximum amount of fuel that can be distributed across the network. The network consists of `n` stations connected by `n-1` one-way roads. Each road has a capacity `c` that denotes the maximum amount of fuel that can be transported from one station to another in one go. For each station, there is a demand `d` which represents the amount of fuel required to fully satisfy the station\'s needs. A station cannot receive more fuel than its demand, and excess fuel is lost if transported beyond its capacity or demand. A given station can send out fuel to any number of its neighboring stations as long as it does not exceed the capacity of the connecting road and the demand of the receiving station. You must write a program to find the maximum total amount of fuel that can be distributed in the network optimally. The first line contains an integer `n` (2 ≤ n ≤ 100), the number of stations. The next line contains `n` integers `d1, d2, ..., dn` (1 ≤ di ≤ 500), the demand of each station. The next `n-1` lines describe the `n-1` one-way roads with three integers `u, v, c` (1 ≤ u, v ≤ n, 1 ≤ c ≤ 500), where `u` is the starting station, `v` is the ending station, and `c` is the capacity of the road from `u` to `v`. Output a single integer — the maximum total amount of fuel that can be distributed in the network. Example: ``` Input: 4 30 50 60 20 1 2 40 1 3 20 3 4 10 Output: 70 ```","solution":"from collections import defaultdict, deque def max_fuel_distribution(n, demands, roads): graph = defaultdict(list) for u, v, c in roads: graph[u].append((v, c)) max_fuel = 0 visited = [False] * (n + 1) remaining_demand = demands[:] def bfs(start): visited[start] = True queue = deque([(start, float(\'inf\'))]) total_fuel = 0 while queue: u, flow = queue.popleft() for v, capacity in graph[u]: sent_fuel = min(flow, capacity, remaining_demand[v - 1]) total_fuel += sent_fuel remaining_demand[v - 1] -= sent_fuel if not visited[v]: visited[v] = True queue.append((v, sent_fuel)) return total_fuel for i in range(1, n + 1): if not visited[i]: max_fuel += bfs(i) return max_fuel # Example usage: def example(): n = 4 demands = [30, 50, 60, 20] roads = [ (1, 2, 40), (1, 3, 20), (3, 4, 10) ] return max_fuel_distribution(n, demands, roads) print(example()) # Output should be 70"},{"question":"You are given an array of n integers, and you have to perform several operations on it. Each operation consists of two integers l and r and requires you to calculate the sum of all the elements of the array from index l to r inclusive. The array uses 1-based indexing. Write a program that performs these operations efficiently. The first line contains two integers n and q (1 ≤ n, q ≤ 100,000), where n is the number of elements in the array and q is the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) describing the initial array. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) describing the operation. Print q integers, each representing the sum of the elements of the array from index l to r for each operation. Example: Input: 5 3 1 2 3 4 5 1 3 2 5 1 5 Output: 6 14 15 Explanation: For the first query, the sum of elements from index 1 to 3 is 1+2+3 = 6. For the second query, the sum of elements from index 2 to 5 is 2+3+4+5 = 14. For the third query, the sum of all elements from index 1 to 5 is 1+2+3+4+5 = 15. Note: Consider using a prefix sum array for efficient computation of range sums.","solution":"def compute_prefix_sums(arr): Compute prefix sums for the given array. prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i-1] + arr[i-1] return prefix_sums def range_sum(prefix_sums, l, r): Compute the sum of the array elements between indices l and r (1-based) using prefix sums. return prefix_sums[r] - prefix_sums[l-1] def process_queries(n, q, arr, queries): Process multiple range sum queries on the array. prefix_sums = compute_prefix_sums(arr) results = [] for l, r in queries: results.append(range_sum(prefix_sums, l, r)) return results"},{"question":"A library is organizing a book fair where each book is assigned a unique identifier number. During the event, some books were moved around, and the identifiers got shuffled. In order to restore order, the library staff decided to renumber the books so that each book retains its current identifier if possible while making the identifiers into a contiguous sequence starting from 1. Since changing an identifier can be quite cumbersome, the goal is to minimize the number of changes required. Given a list of m integers representing the current identifier numbers of books in unsorted order, renumber them such that they become a permutation of numbers from 1 to m, making as few changes as possible. If there are multiple solutions, you may print any of them. The first line contains a single integer m — the number of books (1 ≤ m ≤ 100000). The second line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 100000) — the current identifier numbers of the books. Print m integers — the final identifier numbers of the books in the order they occur in the input. If there are multiple valid answers, any of them will be accepted. In the first example, the identifiers are already a permutation, so no changes are necessary. In the second example, duplicates are resolved to form a valid sequence from 1 to 5 by replacing one of each duplicate with a missing number. In the third example, identifiers are adjusted to form a valid permutation beginning from 1. Examples: Input 5 3 4 5 2 1 Output 3 4 5 2 1 Input 5 1 3 3 4 2 Output 1 3 5 4 2 Input 4 4 4 4 4 Output 1 2 3 4","solution":"def renumber_books(m, book_ids): Renumber books such that they form a contiguous sequence starting from 1. Parameters: m (int): The number of books. book_ids (list of int): The current identifiers of the books. Returns: list of int: The new identifiers of the books. # Create a set of the initial book_ids and missing numbers set. book_ids_set = set(book_ids) missing_numbers = set(range(1, m+1)) - book_ids_set # Identify duplicates in book_ids. duplicates = [x for x in book_ids if book_ids.count(x) > 1] duplicates = list(set(duplicates)) # remove duplicate entries in duplicates list new_ids = book_ids[:] missing_iter = iter(sorted(missing_numbers)) # Replace duplicates with missing numbers seen = set() for i in range(m): if new_ids[i] in seen: new_ids[i] = next(missing_iter) seen.add(new_ids[i]) return new_ids"},{"question":"You are given an array of integers representing the node values of a binary tree in a level-order traversal. Your task is to determine if there exists a path in this binary tree such that the sum of the values along the path is equal to a given target sum. A path in the binary tree is a sequence of nodes starting from the root node and moving to a child node either to the left or to the right. You are not allowed to skip any nodes or return back once you have moved down the tree. The binary tree will be represented as an array of integers. If a node does not exist at a particular position in the binary tree (i.e., it\'s a null node), it is represented by the value `-1`. Write a function `hasPathSum` that takes two arguments: - `tree` (List of integers): an array representation of the binary tree. - `targetSum` (integer): the target sum to find in the binary tree. The output should be a boolean value: `True` if such a path exists, and `False` otherwise. Below is the definition of the `hasPathSum` function: ```python def hasPathSum(tree: List[int], targetSum: int) -> bool: # Your code here ``` # Example Input: ```python tree = [5, 4, 8, 11, -1, 13, 4, 7, 2, -1, -1, -1, 1] targetSum = 22 ``` Output: ```python True ``` Explanation: The path with the sum 22 is `5 -> 4 -> 11 -> 2`. # Constraints: - The size of the input `tree` will not exceed 10^4 elements. - Each value in the tree will be between -1000 and 1000. - The target sum will be between -10^4 and 10^4. - The array representation will always contain at least one node (i.e., the root node will not be null).","solution":"from typing import List, Optional class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(tree: List[int]) -> Optional[TreeNode]: if not tree or tree[0] == -1: return None root = TreeNode(tree[0]) nodes = [root] child_index = 1 for node in nodes: if node: if child_index < len(tree) and tree[child_index] != -1: node.left = TreeNode(tree[child_index]) nodes.append(node.left) child_index += 1 if child_index < len(tree) and tree[child_index] != -1: node.right = TreeNode(tree[child_index]) nodes.append(node.right) child_index += 1 return root def hasPathSum(tree: List[int], targetSum: int) -> bool: root = build_tree(tree) def dfs(node, current_sum): if node is None: return False current_sum += node.val if node.left is None and node.right is None: return current_sum == targetSum return dfs(node.left, current_sum) or dfs(node.right, current_sum) return dfs(root, 0)"},{"question":"You are given a sequence of integers. A subsequence of this sequence is defined as a sequence derived by deleting some or none of the elements without changing the order of the remaining elements. A subsequence is called alternating if its elements are in a strictly alternating pattern of positive and negative integers. Your task is to determine the maximum length of an alternating subsequence that can be derived from the given sequence. If the sequence consists entirely of positive or negative integers, the answer should be 1. Input Format: - The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the sequence. - The second line contains n integers, separated by spaces, representing the sequence. Each integer in the sequence will be non-zero and will fit within the range of a 32-bit signed integer. Output Format: - Print the maximum length of the alternating subsequence. Example: Input 7 1 -2 3 -4 5 -6 7 Output 7 Input 4 4 -1 2 -5 Output 4 Input 5 1 2 3 4 5 Output 1 Explanation: In the first example, the sequence itself is already an alternating sequence of maximum length. In the second example, the entire sequence can be considered as the alternating subsequence. In the third example, although the sequence contains multiple elements, none of them alternate between positive and negative, so the maximum length possible for an alternating subsequence is 1.","solution":"def max_alternating_subsequence_length(n, sequence): Returns the maximum length of an alternating subsequence from the given sequence. Parameters: n (int): The number of elements in the sequence. sequence (list): A list of n integers representing the sequence. Returns: int: The maximum length of an alternating subsequence. if n == 0: return 0 max_length = 1 # A single element is always a valid subsequence for i in range(1, n): if (sequence[i] > 0 and sequence[i-1] < 0) or (sequence[i] < 0 and sequence[i-1] > 0): max_length += 1 return max_length"},{"question":"A company is organizing a team-building activity in which employees will be divided into teams. Each team should have an equal number of employees, and every employee should belong to exactly one team. However, the number of employees and teams are such that it\'s not always possible to distribute them perfectly evenly. In such cases, the company decides to leave the extra employees unassigned rather than force them into incomplete teams. You have to help organize the teams by writing a program that determines how many employees will be unassigned. The first line contains two integers, n and k (1 ≤ n, k ≤ 10^9) — the number of employees and the number of teams. Print a single integer — the number of employees that will be unassigned. # Example Input: ``` 10 3 ``` Output: ``` 1 ``` Explanation: If there are 10 employees and 3 teams, each team can have at most 3 employees, which takes up 9 employees in total. Therefore, 1 employee will be unassigned.","solution":"def unassigned_employees(n, k): Returns the number of unassigned employees when `n` employees are divided into `k` teams. Parameters: n (int): The number of employees. k (int): The number of teams. Returns: int: The number of unassigned employees. return n % k"},{"question":"An automated warehouse uses robots to pick and place items into storage cells. The warehouse is represented as a 2D grid of dimensions `h x w` (1 ≤ h, w ≤ 100). Each cell of the grid is either empty (.) or occupied by an item (x). Robots move in a specific pattern every second: up, down, left, or right, but they cannot move into cells occupied by items. A robot\'s task is to move from its initial position (sx, sy) to a target position (tx, ty). Write a program to help the robot navigate accordingly. The input consists of several lines: - The first line contains two integers h and w representing the dimensions of the grid. - The next h lines contain w characters each, representing the grid cells (\'.\' for empty and \'x\' for occupied). - The next line contains two space-separated integers sx, sy representing the initial position of the robot. - The last line contains two space-separated integers tx, ty representing the target position. Your task is to output the minimum number of seconds required for the robot to reach the target position from the starting position. If the target position is unreachable, output `-1`. # Example Input: ``` 5 5 ..... .x... ..... ...x. ..... 0 0 4 4 ``` Output: ``` 8 ```","solution":"from collections import deque def min_seconds_to_reach(h, w, grid, sx, sy, tx, ty): def is_valid(x, y): return 0 <= x < h and 0 <= y < w and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(sx, sy, 0)]) # (x, y, distance) visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (tx, ty): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"An advanced factory contains a conveyor belt system with several assembly points. Each assembly point can process a certain number of items per minute. Given the processing capacities of the assembly points, you need to determine the maximum number of items that can be processed in total per minute if you distribute the processing load optimally. You are provided with an array where each element represents the capacity (number of items processed per minute) of each assembly point. You must distribute the workload across these points to achieve the maximum throughput without exceeding the capacities of the individual points. Write a function `max_processed_items(capacities: List[int], workload: int) -> int` that determines the maximum number of items that can be processed given the capacities of the assembly points and the total amount of work (items) that need to be processed per minute. # Input - A list of integers representing the capacities of each assembly point `[c1, c2, c3, ..., cn]` where `1 ≤ n ≤ 20` and `1 ≤ ci ≤ 100`. - An integer `workload` representing the total number of items that need processing, where `1 ≤ workload ≤ 1000`. # Output - An integer representing the maximum number of items that can be processed per minute without exceeding any assembly point\'s capacity. # Example ```python max_processed_items([10, 20, 30], 25) # Output: 25 max_processed_items([5, 10, 15], 18) # Output: 18 max_processed_items([10, 10, 10], 50) # Output: 30 ``` # Notes - If the workload exceeds the combined capacities of the assembly points, the function should return the sum of all capacities. - Distribute the items in such a way that maximizes the total utilization of capacities without any assembly point processing more than its capacity.","solution":"from typing import List def max_processed_items(capacities: List[int], workload: int) -> int: Determine the maximum number of items that can be processed per minute. Args: capacities (List[int]): A list of integers representing the capacities of each assembly point. workload (int): The total number of items that need processing per minute. Returns: int: The maximum number of items that can be processed without exceeding any assembly point\'s capacity. total_capacity = sum(capacities) # If workload is less than or equal to total capacity, # we need to distribute the exact workload across the capacities. if workload <= total_capacity: return workload # If workload exceeds total capacity, max items processed is the total capacity itself. return total_capacity"},{"question":"You are given a list of integers `reviews` that represent the scores given by users to a Mobile App. The scores range from 1 to 5 inclusive. The developer of the app wants to analyze the popularity of their app. One way to analyze it is by generating a summary report that includes the count of each score. Write a program that takes the list of reviews as input and returns a dictionary with the scores as keys and their respective counts as values. If a score does not appear in the input list, its count should be zero in the output dictionary. # Input - A single list of integers `reviews`, where each integer is between 1 and 5 (inclusive) and represents the score given by a user. # Output - A dictionary where the keys are integers from 1 to 5 (inclusive) and the values are the counts of each corresponding score in the input list. # Example Input ``` [1, 2, 4, 5, 2, 2, 3, 4, 1, 5, 5, 1] ``` Output ``` { 1: 3, 2: 3, 3: 1, 4: 2, 5: 3 } ``` # Explanation In the given example, the scores are [1, 2, 4, 5, 2, 2, 3, 4, 1, 5, 5, 1]. The count of each score is as follows: - Score 1 appears 3 times. - Score 2 appears 3 times. - Score 3 appears 1 time. - Score 4 appears 2 times. - Score 5 appears 3 times. Hence, the output dictionary reflects these counts.","solution":"def review_summary(reviews): Returns a dictionary with scores as keys (from 1 to 5) and their respective counts in the reviews list as values. summary = {score: 0 for score in range(1, 6)} for review in reviews: if review in summary: summary[review] += 1 return summary"},{"question":"You are given an array of integers and a target integer. Write a function to find if there is a pair of distinct indices i and j in the array such that nums[i] + nums[j] equals the target. Function Signature: `def find_pair(nums: List[int], target: int) -> bool` # Input: - The function `find_pair` takes two parameters: - A list of integers `nums` where 2 ≤ len(nums) ≤ 1000. - An integer `target` where -10^4 ≤ target ≤ 10^4. # Output: - The function should return a boolean value: - `True` if there exists a pair of indices i and j such that `nums[i] + nums[j] = target`. - `False` otherwise. # Example: ```python assert find_pair([2, 7, 11, 15], 9) == True assert find_pair([3, 2, 4], 6) == True assert find_pair([3, 3], 6) == True assert find_pair([1, 2, 3, 4, 5], 10) == False ``` # Note: - Use any method or algorithm to solve the problem efficiently. - The function should handle both positive and negative integers.","solution":"from typing import List def find_pair(nums: List[int], target: int) -> bool: Checks if there are two distinct indices in the list such that their sum equals the target. seen_numbers = {} for num in nums: complement = target - num if complement in seen_numbers: return True seen_numbers[num] = True return False"},{"question":"You are developing a pathfinding algorithm for a game, and you need to navigate a character from a starting point to a destination point in a grid. The grid consists of cells that can either be passable or impassable. Each move can be made to one of the four adjacent cells (up, down, left, right), provided the cell is within the grid\'s boundaries and is passable. Your task is to determine the minimum number of steps required for the character to reach the destination from the start point. If it is not possible to reach the destination, return -1. The first line of input contains an integer T (1 ≤ T ≤ 100) — the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 1000) — the size of the grid, representing an N x N matrix. The next N lines contain N characters each (either \'.\' or \'#\'), representing the grid. A \'.\' indicates a passable cell, and a \'#\' indicates an impassable cell. The last two lines of each test case contain four integers sx, sy, dx, dy (0 ≤ sx, sy, dx, dy < N) — the coordinates of the start and destination points, respectively. The coordinates are given in the format (row, column). The starting point and destination point are guaranteed to be passable cells (i.e., they are \'.\' cells). For each test case, print one integer — the minimum number of steps required to reach the destination, or -1 if there is no valid path. Example: Input: ``` 2 5 ..... .#. ...#. .#. ..... 0 0 4 4 4 ...# .#.. .... .#.. 0 0 2 2 ``` Output: ``` 8 4 ```","solution":"from collections import deque def min_steps_to_destination(grid, n, start, dest): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * n for _ in range(n)] queue = deque([(start[0], start[1], 0)]) # (row, col, step_count) visited[start[0]][start[1]] = True while queue: x, y, steps = queue.popleft() if (x, y) == dest: return steps for d in directions: nx, ny = x + d[0], y + d[1] if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, steps + 1)) return -1 def solve(test_cases): results = [] for case in test_cases: n = case[\'n\'] grid = case[\'grid\'] start = case[\'start\'] dest = case[\'dest\'] result = min_steps_to_destination(grid, n, start, dest) results.append(result) return results"},{"question":"Alice is practicing her programming skills by solving problems on character manipulation. She wants to write a function that takes two input strings `s` and `t`, and generates a new string by interleaving the characters of `s` and `t`. If one string is longer than the other, the remaining characters of the longer string should append to the end of the new string. Help Alice by writing a function that accomplishes this task. The function signature is: ```python def interleave_strings(s: str, t: str) -> str: # your code here ``` # Input: - `s` and `t`: Two strings of length not exceeding 100,000 characters, consisting of lowercase English letters. # Output: - A single string which is the result of interleaving the characters of `s` and `t`. # Example: For `s = \\"abc\\"` and `t = \\"def\\"`, the output should be `\\"adbecf\\"`. For `s = \\"ab\\"` and `t = \\"xyz\\"`, the output should be `\\"axbyz\\"`. For `s = \\"abcd\\"` and `t = \\"pq\\"`, the output should be `\\"apbqcd\\"`.","solution":"def interleave_strings(s: str, t: str) -> str: Interleaves two strings s and t. If one string is longer, the remaining characters of the longer string are appended to the end of the new string. result = [] length_s, length_t = len(s), len(t) min_length = min(length_s, length_t) # Interleave common length for i in range(min_length): result.append(s[i]) result.append(t[i]) # Append remaining characters from the longer string if length_s > length_t: result.append(s[min_length:]) else: result.append(t[min_length:]) return \'\'.join(result)"},{"question":"Hitagi has stumbled upon another challenge. This time, she needs to determine whether a given string can be rearranged to form a palindrome. A string is called a palindrome if it reads the same backward as forward. Your task is to help Hitagi check if it\'s possible to rearrange the characters of the string into a palindrome. # Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000) - the string that needs to be checked. The string will only contain lowercase English letters. # Output Output \\"Yes\\" if it\'s possible to rearrange the characters of the string s to form a palindrome. Otherwise, output \\"No\\". # Examples **Input 1:** ``` aabbcc ``` **Output 1:** ``` Yes ``` **Input 2:** ``` abc ``` **Output 2:** ``` No ``` # Explanation In the first example, the string \\"aabbcc\\" can be rearranged to form \\"abccba\\", which is a palindrome. In the second example, the string \\"abc\\" cannot be rearranged to form a palindrome because there is no way to arrange the characters such that the string reads the same backward and forward.","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. :param s: String to check. :return: \\"Yes\\" if it can be rearranged to form a palindrome, otherwise \\"No\\". from collections import Counter char_count = Counter(s) # Count how many characters have an odd count odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearrangeable into a palindrome, we can have at most one character with an odd count if odd_counts > 1: return \\"No\\" else: return \\"Yes\\""},{"question":"You are given a sequence of integers. The sequence consists of a repetitive segment that appears at least twice consecutively in the entire sequence. Your task is to determine the length of the smallest repetitive segment. For example, consider the sequence `[1, 2, 1, 2, 1, 2]`. The smallest repetitive segment is `[1, 2]` which repeats three times. # Input - The first line contains an integer `n` (1 leq n leq 10^6) representing the length of the sequence. - The second line contains `n` space-separated integers (1 leq a_i leq 10^9) representing the sequence. # Output Print a single integer, the length of the smallest repetitive segment. If no repetitive segment is found, print `-1`. # Example **Input:** ``` 6 1 2 1 2 1 2 ``` **Output:** ``` 2 ``` **Input:** ``` 5 1 2 3 1 2 ``` **Output:** ``` -1 ``` # Note In the first example, the sequence `[1, 2]` repeats three times consecutively, making the length of the smallest repetitive segment `2`. In the second example, there is no segment that repeats consecutively, so the output is `-1`.","solution":"def smallest_repetitive_segment_length(n, sequence): Determine the length of the smallest repetitive segment in a given sequence. Args: n (int): The length of the sequence. sequence (list): A list of integers representing the sequence. Returns: int: The length of the smallest repetitive segment, or -1 if no repetitive segment is found. if n <= 1: return -1 # Try lengths from 1 up to n//2 to find the smallest repetitive segment. for length in range(1, n // 2 + 1): if n % length == 0: # Check if sequence can be divided into equal parts of length `length`. segment = sequence[:length] if all(sequence[i:i+length] == segment for i in range(0, n, length)): return length return -1"},{"question":"You are given an integer array `nums` and an integer `target`. You need to return the indices of the two numbers from the array such that they add up to the `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. # Input - The first line contains an integer `t` (1 le t le 100) – the number of test cases. - For each test case: - The first line contains an integer `n` (2 le n le 10^4) – the length of the array. - The second line contains `n` integers `nums[i]` (-10^9 le nums[i] le 10^9) – the elements of the array. - The third line contains an integer `target` (-10^9 le target le 10^9). # Output - For each test case, output the indices (0-based) of the two numbers such that they add up to `target`. If there are multiple solutions, return any one. # Example Input ``` 2 4 2 7 11 15 9 3 3 2 4 6 ``` Output ``` 0 1 1 2 ``` # Note In the first test case, the numbers located at indices `0` and `1` add up to `9` since 2 + 7 = 9. In the second test case, the numbers located at indices `1` and `2` add up to `6` since 2 + 4 = 6.","solution":"def two_sum(nums, target): Returns the indices of the two numbers from the array such that they add up to the target. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return num_to_index[complement], index num_to_index[num] = index def solve_two_sum_problems(test_cases): results = [] for nums, target in test_cases: results.append(two_sum(nums, target)) return results # Reading input and formatting it def read_input(input_str): input_data = input_str.strip().split(\'n\') t = int(input_data[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_data[index]) nums = list(map(int, input_data[index + 1].split())) target = int(input_data[index + 2]) test_cases.append((nums, target)) index += 3 return test_cases def format_output(results): return \'n\'.join(f\\"{res[0]} {res[1]}\\" for res in results)"},{"question":"Given an array of n integers, you need to perform q operations and answer the results for each queried range. Each operation is one of the following: 1. Update the value at a specific position in the array. 2. Compute the sum of elements in a given range of the array. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the number of elements in the array and the number of operations. - The second line contains n integers a1, a2, ..., an — the elements of the array (1 ≤ ai ≤ 1000). - The next q lines contain descriptions of the operations: - If the operation is an update operation, the line contains three integers \\"1 idx val\\" (1 ≤ idx ≤ n, 1 ≤ val ≤ 1000), which means updating the element at position idx to val. - If the operation is a sum query, the line contains three integers \\"2 l r\\" (1 ≤ l ≤ r ≤ n), which means computing the sum of elements from position l to position r. Output: - For each sum query, output the sum of elements in the specified range on a new line. Example: Input: ``` 5 3 1 2 3 4 5 2 1 3 1 3 10 2 3 5 ``` Output: ``` 6 19 ```","solution":"def process_operations(n, q, array, operations): Process a series of update and sum operations on the array. Parameters: n (int): Number of elements in the array. q (int): Number of operations. array (list of int): Initial array of integers. operations (list of tuples): Each tuple contains an operation. (1, idx, val) for update operation. (2, l, r) for sum query operation. Returns: list of int: Result of each sum query operation. results = [] for operation in operations: if operation[0] == 1: # Update operation _, idx, val = operation array[idx - 1] = val elif operation[0] == 2: # Sum query operation _, l, r = operation results.append(sum(array[l - 1:r])) return results"},{"question":"You are given an array of integers and a specified number `k`. Your task is to determine if there are two distinct indices `i` and `j` in the array such that the product of the elements at these indices is equal to `k`. Return `True` if such indices exist, otherwise return `False`. # Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 1000, -10^6 ≤ k ≤ 10^6), where `n` is the length of the array and `k` is the target product. - The second line contains `n` integers `a1, a2, ..., an` (-10^6 ≤ ai ≤ 10^6) — the elements of the array. # Output Print \\"True\\" if there are two distinct indices `i` and `j` such that `a[i] * a[j] = k`, otherwise print \\"False\\". # Example Input ``` 5 20 4 5 -1 7 2 ``` Output ``` True ``` Explanation In the array `[4, 5, -1, 7, 2]`, the product of the elements at indices `0` and `1` is `4 * 5 = 20`, which is equal to `k`. Therefore, the output is `True`.","solution":"def has_pair_with_product(arr, k): Determines if there are two distinct indices i and j in the array such that the product of the elements at these indices is equal to k. n = len(arr) seen = set() for number in arr: if k != 0 and number != 0 and k % number == 0: if k // number in seen: return True if k == 0 and number == 0: if 0 in seen: return True seen.add(number) return False"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine the minimum number of characters you need to remove from the string to form a string that does not contain any three consecutive characters being identical. The first and only line contains the string s (1 ≤ |s| ≤ 100,000) — the string you need to process. If it is possible to remove characters to satisfy the condition, output a single integer — the minimum number of characters required to be removed. If the string already satisfies the condition, output 0. In the first sample test, the input string is \\"aaabbb\\". One possible way to achieve the desired string is to remove one \'a\' and one \'b\', resulting in \\"aabb\\", which does not contain any three consecutive identical characters. In the second sample test, the input string is \\"abcde\\". As there are no three consecutive identical characters, the output is 0.","solution":"def min_removals_to_avoid_triplets(s): Returns the minimum number of characters to remove from the string to ensure no three consecutive characters are identical. if len(s) < 3: return 0 removals = 0 i = 0 while i < len(s) - 2: if s[i] == s[i + 1] == s[i + 2]: removals += 1 i += 2 else: i += 1 return removals"},{"question":"You are given two sorted arrays `A` and `B`, each containing n distinct integers. A common supersequence is a sequence that contains both `A` and `B` as subsequences. Your task is to find the length of the shortest common supersequence of `A` and `B`. The first line contains a single integer `n` (1 ≤ n ≤ 1000) representing the number of elements in each array. The second line contains `n` distinct integers, the elements of array `A` in sorted order. The third line contains `n` distinct integers, the elements of array `B` in sorted order. Output a single integer, the length of the shortest common supersequence of `A` and `B`. Example Input: ``` 3 1 3 5 2 4 6 ``` Output: ``` 6 ``` Explanation The shortest common supersequence that contains both `A` and `B` is `[1, 2, 3, 4, 5, 6]`, hence the length is `6`. Note: The shortest common supersequence may not be unique, but the length will be the same. Another possible shortest common supersequence for the above example could be `[1, 2, 3, 4, 5, 6]`.","solution":"def shortest_common_supersequence_length(n, A, B): Calculates and returns the length of the shortest common supersequence of two sorted arrays A and B of length n. return 2 * n"},{"question":"Bob has a large array of integers a1, a2, ..., an, and he needs your help to answer multiple queries about the array. Each query is defined by two integers li and ri (1 ≤ li ≤ ri ≤ n), and the answer to the i-th query is the maximum integer in the contiguous subarray ali, ali+1, ..., ari. However, Bob is facing an additional challenge: he wants to optimize the process of answering the queries by preprocessing the array first. You are given an integer array a of length n (1 ≤ n ≤ 10^6) in the first line. The second line contains an integer m (1 ≤ m ≤ 10^5) — the number of queries. Each of the following m lines contains a pair of integers li and ri (1 ≤ li ≤ ri ≤ n) — the indices for each query. Print the answer to each query on a single line. Print the answers in the order they appear in the input. For example, given the array [1, 3, 2, 7, 9, 11] and three queries: 1 3 2 5 1 6 The answers would be: 3 (maximum of [1, 3, 2]) 9 (maximum of [3, 2, 7, 9]) 11 (maximum of [1, 3, 2, 7, 9, 11])","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i << 1], self.tree[i << 1 | 1]) def query(self, l, r): l += self.n # Shift the index to the leaf r += self.n # Shift the index to the leaf max_val = float(\'-inf\') while l <= r: if l & 1: max_val = max(max_val, self.tree[l]) l += 1 if not (r & 1): max_val = max(max_val, self.tree[r]) r -= 1 l >>= 1 r >>= 1 return max_val def max_in_subarrays(data, queries): segment_tree = SegmentTree(data) results = [] for l, r in queries: result = segment_tree.query(l - 1, r - 1) results.append(result) return results"},{"question":"You are given a rectangular grid of size n times m filled with integers, and a list of queries. Each query asks for the sum of the integers within a specific subrectangle of the grid. To solve the problem, you need to preprocess the grid to answer each query efficiently. The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. Then, the next n lines each contain m integers, representing the grid. The next line contains an integer q (1 le q le 10^4) — the number of queries. Each of the next q lines contains four integers x1, y1, x2, and y2 (1 le x1 le x2 le n, 1 le y1 le y2 le m) — the coordinates of the top-left and bottom-right corners of the subrectangle for that query. For each query, print the sum of the integers in the specified subrectangle. **Input:** ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ``` **Output:** ``` 12 28 ``` **Note:** To efficiently answer each query, you can use a prefix sum array to preprocess the grid. This will allow you to compute the sum of elements in any subrectangle in constant time.","solution":"def preprocess(grid, n, m): prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum def query_sum(prefix_sum, x1, y1, x2, y2): return (prefix_sum[x2][y2] - prefix_sum[x1-1][y2] - prefix_sum[x2][y1-1] + prefix_sum[x1-1][y1-1]) def solve(grid, queries): n = len(grid) m = len(grid[0]) if grid else 0 prefix_sum = preprocess(grid, n, m) results = [] for x1, y1, x2, y2 in queries: results.append(query_sum(prefix_sum, x1, y1, x2, y2)) return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the length of the smallest subsequence such that the subsequence contains all unique characters from the original string at least once. # Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The following t lines contain one string each. The length of each string is at least 1 and at most 1000. # Output For each test case, output the length of the smallest subsequence such that it contains all unique characters from the given string at least once. # Example Input ``` 3 abcabc abacaba abcdabcd ``` Output ``` 3 3 4 ``` # Explanation In the first example, the smallest subsequence that contains all unique characters (\'a\', \'b\', \'c\') is \'abc\' with length 3. In the second example, the smallest subsequence that contains all unique characters (\'a\', \'b\', \'c\') is \'abc\' or \'cab\' or \'bac\', all with length 3. In the third example, the smallest subsequence that contains all unique characters (\'a\', \'b\', \'c\', \'d\') is \'abcd\' which has length 4.","solution":"def smallest_subsequence_length(t, test_cases): Given an integer t and a list of t test cases containing strings, returns a list of integers where each integer is the length of the smallest subsequence that contains all unique characters from each input string at least once. result = [] for s in test_cases: unique_chars = set(s) result.append(len(unique_chars)) return result"},{"question":"You are given a list of students and their respective scores in a certain subject. Your task is to sort the students based on their scores in descending order. Additionally, if two students have the same score, they should be sorted alphabetically by their names in ascending order. Write a function that takes a dictionary as an input where keys are student names (strings) and values are their corresponding scores (integers). The function should return a list of tuples, where each tuple contains a student name and their score, sorted based on the criteria mentioned above. Function Signature: ```python def sort_students_by_score(students: Dict[str, int]) -> List[Tuple[str, int]]: ``` # Input - A dictionary `students` with `1 <= len(students) <= 1000`, where keys are student names (strings of length `1` to `100` containing only letters) and values are their scores (integers between `0` and `100`). # Output - A list of tuples where each tuple contains a student name and their score, sorted first by the score in descending order and then by the student name in ascending order. # Example ```python students = { \\"Alice\\": 85, \\"Bob\\": 70, \\"Charlie\\": 85, \\"Dave\\": 70, \\"Eve\\": 95 } print(sort_students_by_score(students)) ``` Output: ``` [(\'Eve\', 95), (\'Alice\', 85), (\'Charlie\', 85), (\'Bob\', 70), (\'Dave\', 70)] ```","solution":"from typing import Dict, List, Tuple def sort_students_by_score(students: Dict[str, int]) -> List[Tuple[str, int]]: Sorts students based on their scores in descending order. If two students have the same score, they are sorted alphabetically by their names. :param students: Dictionary where keys are student names and values are their scores :return: List of tuples with student names and their scores sorted as described above # Sort the dictionary items first by score in descending order, then by name in ascending order sorted_students = sorted(students.items(), key=lambda x: (-x[1], x[0])) return sorted_students"},{"question":"There is a lake in a beautiful valley where people often challenge themselves to swim across it. The lake can be represented as a grid of cells with n rows and m columns, where some cells are land (denoted as \'L\'), and some cells are water (denoted as \'W\'). Swimmers can only move to adjacent cells (vertically or horizontally) if those cells are also water. Given the grid representation of the lake, Susie wants to determine the size of the largest possible connected component of water cells that can be found in this lake. Write a program to help Susie find this out. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. - The next n lines each contain m characters (\'L\' or \'W\'), representing the grid. Output: - Print a single integer — the size of the largest connected component of water cells in the grid. Example: Input: 5 6 LLLWLL LLLWWW WWLLLL LLWLWL LWLWLL Output: 4 In the example, the largest connected component of water cells is of size 4, consisting of the water cells in the second row from the fourth to the sixth columns. Note: - Ensure your solution is efficient and able to handle the upper constraints.","solution":"def largest_water_component(n, m, grid): Returns the size of the largest connected component of water cells. def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'W\': return 0 # Mark the cell as visited by setting it to \'L\' grid[x][y] = \'L\' size = 1 # Explore all four directions size += dfs(x + 1, y) size += dfs(x - 1, y) size += dfs(x, y + 1) size += dfs(x, y - 1) return size max_size = 0 for i in range(n): for j in range(m): if grid[i][j] == \'W\': max_size = max(max_size, dfs(i, j)) return max_size"},{"question":"A group of friends is planning a hiking trip and they want to distribute the load evenly among themselves. Each person can carry a certain maximum weight in their backpack. Your task is to determine if it is possible to distribute all items such that no backpack exceeds its weight limit and all items are carried. You are given the number of friends f (1 ≤ f ≤ 200), the maximum weights each friend can carry (an array of f integers w, 1 ≤ w[i] ≤ 100), the number of items n (1 ≤ n ≤ 1000), and the weights of the items (an array of n integers, where 1 ≤ weight[j] ≤ 100). You need to decide whether it is possible to distribute all items among the friends without exceeding anyone\'s carrying capacity. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". # Input Format: - The first line contains a single integer f, the number of friends. - The second line contains f integers w1, w2, ..., wf, the maximum weights each friend can carry. - The third line contains a single integer n, the number of items. - The fourth line contains n integers weight1, weight2, ..., weightn, the weights of the items. # Output Format: - Print \\"YES\\" if it is possible to distribute all items without exceeding the carrying capacity of any friend. - Otherwise, print \\"NO\\". # Example: ``` Input: 3 10 5 15 5 4 3 2 2 8 Output: YES ``` Explanation: - Friends\' capacities are: 10, 5, 15. - Items\' weights are: 4, 3, 2, 2, 8. - It is possible to distribute the items such that each friend\'s carrying capacity is not exceeded. ``` Input: 2 5 7 4 6 4 3 2 Output: NO ``` Explanation: - Friends\' capacities are: 5, 7. - Items\' weights are: 6, 4, 3, 2. - It is impossible to distribute the items without exceeding the carrying capacity of the friends.","solution":"def can_distribute_load(friends, capacities, n_items, item_weights): Determine if it is possible to distribute all items such that no backpack exceeds its weight limit. :param friends: Number of friends (int) :param capacities: List of maximum weights each friend can carry (list of int) :param n_items: Number of items (int) :param item_weights: List of weights of the items (list of int) :return: \\"YES\\" if it is possible to distribute all items without exceeding the carrying capacity, else \\"NO\\" capacities.sort(reverse=True) item_weights.sort(reverse=True) if sum(capacities) < sum(item_weights): return \\"NO\\" friend_index = 0 for weight in item_weights: if friend_index < friends and capacities[friend_index] >= weight: capacities[friend_index] -= weight else: friend_index += 1 if friend_index >= friends or capacities[friend_index] < weight: return \\"NO\\" capacities[friend_index] -= weight return \\"YES\\""},{"question":"In a faraway kingdom called Algoria, there is a famous forest known as the Binary Forest. Within this forest, each tree is a magical binary tree that can communicate through a special encoding called the Inorder Traversal. Each tree node holds a unique positive integer value, and the forest wizards are particularly interested in finding out specific properties of these trees. One day, the Head Wizard gives you a task: given the inorder traversal of a binary tree, determine whether this sequence can form a valid binary search tree (BST). Recall that in a BST, for each node: - The left subtree contains only nodes with values less than the node\'s value. - The right subtree contains only nodes with values greater than the node\'s value. You are provided with a single sequence, representing the inorder traversal of a binary tree. Your task is to determine if the tree represented by the traversal can be a valid BST. # Input Format - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of nodes in the binary tree. - The second line contains `n` unique positive integers representing the inorder traversal of a binary tree. # Output Format - Print \\"YES\\" if the given inorder traversal can form a valid BST. - Print \\"NO\\" otherwise. # Example Input 8 7 3 12 5 10 9 15 8 Output NO Input 7 1 2 3 4 5 6 7 Output YES # Explanation In the first example, the inorder traversal 7 3 12 5 10 9 15 8 cannot form a valid BST since the value 5 appears after 12, which violates the BST property. In the second example, the values are in increasing order, which is characteristic of a valid BST realized through inorder traversal.","solution":"def is_valid_bst_inorder(inorder_sequence): Determine if the given inorder traversal can represent a valid BST. Parameters: inorder_sequence (list): A list of unique positive integers. Returns: str: \\"YES\\" if the inorder traversal can form a valid BST, \\"NO\\" otherwise. for i in range(1, len(inorder_sequence)): if inorder_sequence[i] <= inorder_sequence[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of n integers. Your task is to find the length of the longest subarray which has the maximum bitwise AND value among all possible subarrays. A subarray is defined as a contiguous part of an array, and the bitwise AND of a subarray is the result of performing the bitwise AND operation on all elements of the subarray. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the list. - The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the list. Output: - Output a single integer — the length of the longest subarray with the maximum bitwise AND value. Example: ``` Input: 6 4 3 1 2 2 4 Output: 1 Input: 5 7 7 7 4 4 Output: 3 ```","solution":"def longest_max_bitwise_and_subarray(arr): This function finds the length of the longest subarray which has the maximum bitwise AND value among all possible subarrays. Params: arr: A list of integers. Returns: An integer representing the length of the longest subarray with the maximum bitwise AND value. max_bitwise_and_value = max(arr) longest_len = 0 current_len = 0 for num in arr: if num == max_bitwise_and_value: current_len += 1 if current_len > longest_len: longest_len = current_len else: current_len = 0 return longest_len"},{"question":"Alice has a rectangular matrix of integers, where each cell contains a positive integer. She wants to find the length of the longest increasing path in the matrix. From each cell, you can either move one cell up, down, left, or right, and the value of the adjacent cell must be strictly greater than the current cell to continue the path. Write a program to help Alice determine the length of the longest increasing path in the matrix. The matrix is given as an array of arrays, where each inner array represents a row of the matrix. # Input - The first line contains two integers m and n (1 ≤ m, n ≤ 200) — the number of rows and columns in the matrix. - The next m lines each contain n integers, representing the matrix. Each integer in the matrix is in the range from 1 to 1000. # Output - Print a single integer — the length of the longest increasing path in the matrix. # Example Input ``` 3 3 9 9 4 6 6 8 2 1 1 ``` Output ``` 4 ``` # Explanation The longest increasing path in the matrix is `[1, 2, 6, 9]`.","solution":"def longest_increasing_path(matrix): if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) memo = [[-1 for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if memo[r][c] != -1: return memo[r][c] # Define directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_path_length = 1 for dr, dc in directions: new_r, new_c = r + dr, c + dc if 0 <= new_r < rows and 0 <= new_c < cols and matrix[new_r][new_c] > matrix[r][c]: max_path_length = max(max_path_length, 1 + dfs(new_r, new_c)) memo[r][c] = max_path_length return memo[r][c] longest_path = 0 for r in range(rows): for c in range(cols): longest_path = max(longest_path, dfs(r, c)) return longest_path"},{"question":"You are given a string containing only lowercase alphabets. Your task is to calculate the number of distinct substrings of the given string. A substring is a contiguous sequence of characters within a string. For instance, the distinct substrings of the string \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Input: The first line contains one integer T (1 le T le 100) — the number of test cases. The following T lines each contain a non-empty string s of length at most 1000. Output: For each test case, print the number of distinct substrings of the given string. Example: Input: 2 abc aaa Output: 6 3 Explanation: - For the string \\"abc\\": The distinct substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". There are 6 distinct substrings. - For the string \\"aaa\\": The distinct substrings are \\"a\\", \\"aa\\", \\"aaa\\". There are 3 distinct substrings.","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings in the given string s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) def process_test_cases(test_cases): results = [] for s in test_cases: results.append(count_distinct_substrings(s)) return results"},{"question":"You are given a string consisting of lowercase English alphabets. Your task is to determine the maximum length of a contiguous substring that contains at most two distinct characters. The first line contains a single string s (1 ≤ |s| ≤ 10^5) — the string you must analyze. Print a single integer — the length of the longest contiguous substring containing at most two distinct characters. **Example:** Input abbadc Output 4 In the example above, the longest contiguous substring with at most two distinct characters is \\"abba\\", which has a length of 4.","solution":"def max_length_two_distinct(s): from collections import defaultdict n = len(s) if n < 3: return n left, right = 0, 0 max_len = 2 char_map = defaultdict(int) while right < n: char_map[s[right]] += 1 right += 1 while len(char_map) > 2: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left) return max_len"},{"question":"You are given a list of unique integers. You need to find and return the length of the longest increasing subsequence (LIS) within this list. An increasing subsequence is a subsequence of a list where each element is greater than the preceding one. Implement a function `longest_increasing_subsequence(arr: List[int]) -> int` that takes a list of integers and returns the length of the longest increasing subsequence. # Input - A list of integers, `arr`, where `0 <= len(arr) <= 10^5` and each element in the list is a unique integer. # Output - An integer representing the length of the longest increasing subsequence in the input list. # Example ```python assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 assert longest_increasing_subsequence([7, 7, 2, 3, 8, 9, 10]) == 5 assert longest_increasing_subsequence([]) == 0 assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3 ``` # Note - In the first example, one of the longest increasing subsequences is [2, 3, 7, 101], hence the length is 4. - In the second example, one of the longest increasing subsequences is [0, 1, 2, 3], yielding length 4. - The third example contains a longest increasing subsequence [2, 3, 8, 9, 10]. - If the list is empty, return 0 as the length.","solution":"from typing import List import bisect def longest_increasing_subsequence(arr: List[int]) -> int: Returns the length of the longest increasing subsequence in the given list. if not arr: return 0 lis = [] for num in arr: pos = bisect.bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis)"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subsequence in this sequence such that every two consecutive elements have a greatest common divisor (GCD) greater than 1. A subsequence is derived by deleting some or no elements from the given sequence without changing the order of the remaining elements. The first line contains an integer n (1 leq n leq 1000) — the length of the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the sequence. Print a single integer — the length of the longest subsequence such that every two consecutive elements in this subsequence have a GCD greater than 1. In the first sample case, the longest subsequence is the sequence itself since every consecutive pair of elements has a GCD of 2. In the second sample case, the longest subsequence is {4, 2} or {4, 6}, each having a length of 2.","solution":"import math def longest_gcd_subsequence(n, sequence): Returns the length of the longest subsequence where each pair of consecutive elements has a GCD > 1. if n == 1: return 1 dp = [1] * n for i in range(n): for j in range(i + 1, n): if math.gcd(sequence[i], sequence[j]) > 1: dp[j] = max(dp[j], dp[i] + 1) return max(dp)"},{"question":"You are given a network with a specific number of nodes and some directed edges connecting those nodes. Your task is to determine whether there exists a path from node 1 to node n (where n is the number of nodes). The network can be represented as a directed graph. Specifically, you need to find out if there is a way to travel from the first node to the last node by following the directed edges. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of nodes and the number of directed edges, respectively. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a directed edge from node u to node v. Print \\"YES\\" if there is a path from node 1 to node n, otherwise print \\"NO\\". Example: Input: 5 4 1 2 2 3 3 5 4 5 Output: YES Input: 5 4 1 2 2 3 3 4 4 1 Output: NO Explanation: In the first example, there is a path from node 1 to node 5: 1 → 2 → 3 → 5. In the second example, there is no path that leads from node 1 to node 5.","solution":"def can_reach_last_node(n, m, edges): from collections import deque, defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = set() queue = deque([1]) while queue: node = queue.popleft() if node == n: return \\"YES\\" if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\" # Example usage: # n = 5 # m = 4 # edges = [(1, 2), (2, 3), (3, 5), (4, 5)] # print(can_reach_last_node(n, m, edges)) # Output: \\"YES\\""},{"question":"You are given a binary tree with `n` nodes and each node has a unique integer value from `1` to `n`. A binary tree is a tree in which each node has at most two children. You are allowed to perform the following operation at most once: choose a node and swap its left and right child subtrees. After performing this operation, you need to find the maximum possible sum of values from the root to any leaf in the tree. The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5) — the number of nodes in the tree. Each of the next `n` lines contains three integers `parent`, `left_child`, and `right_child` where: - `parent` is the parent node of `left_child` and `right_child`. - If a child is `-1`, it means that there is no left or right child accordingly. For each node `i`, print the maximum possible sum of values from the root to any leaf after performing the operation at most once. Example input: ``` 6 1 2 3 2 4 -1 3 5 6 4 -1 -1 5 -1 -1 6 -1 -1 ``` Example output: ``` 11 ``` Explanation: The binary tree is as follows: ``` 1 / 2 3 / / 4 5 6 ``` To achieve the maximum possible sum, the subtree swap should be performed at node 1 to get the following tree: ``` 1 / 3 2 / 5 6 ``` The maximum sum from root to any leaf is `1 + 3 + 6 = 10`. Hence, the output is `11`.","solution":"def max_sum_after_swap(n, nodes): # Creating the children dictionary to map parent to its left and right children children = {} for parent, left, right in nodes: children[parent] = (left, right) # Function to perform depth-first search to find the maximum sum path def dfs(node): if node == -1: return 0 left, right = children.get(node, (-1, -1)) left_sum = dfs(left) right_sum = dfs(right) return node + max(left_sum, right_sum) # Finding the max sum for the original tree original_max_sum = dfs(1) max_sum = original_max_sum # Trying to swap every node\'s children and find the maximum sum for parent, (left, right) in children.items(): children[parent] = (right, left) max_sum = max(max_sum, dfs(1)) children[parent] = (left, right) # Revert the swap return max_sum"},{"question":"You are designing a miniature database management system (DBMS) that handles a variety of operations on a collection of records. Each record is represented as a dictionary where keys are strings (the field names) and values are strings (the field values). The table of records is represented as a list of dictionaries. Your task is to implement two main functions, `select` and `join`, that perform SQL-like operations on the table of records. # select(table, fields) This function performs the SELECT operation. `table` is a list of dictionaries representing the records, and `fields` is a list of strings representing the field names to be returned. The function should return a new table (list of dictionaries) containing only the specified fields for each record. **Example:** ```python records = [ {\\"name\\": \\"Alice\\", \\"age\\": \\"30\\", \\"city\\": \\"New York\\"}, {\\"name\\": \\"Bob\\", \\"age\\": \\"25\\", \\"city\\": \\"Los Angeles\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": \\"35\\", \\"city\\": \\"Chicago\\"} ] selected_fields = [\\"name\\", \\"city\\"] output = select(records, selected_fields) # Expected output: # [ # {\\"name\\": \\"Alice\\", \\"city\\": \\"New York\\"}, # {\\"name\\": \\"Bob\\", \\"city\\": \\"Los Angeles\\"}, # {\\"name\\": \\"Charlie\\", \\"city\\": \\"Chicago\\"} # ] ``` # join(table1, table2, field) This function performs the JOIN operation on two tables based on a common field. `table1` and `table2` are lists of dictionaries representing the records to be joined, and `field` is the common field used for joining. The function should return a new table (list of dictionaries) that contains records where the values of the common field are equal in both tables. The resulting records should include all fields from both tables. If a field from `table1` or `table2` has the same name but different values, include both fields in the resulting records with modified names (`field1_table1`, `field1_table2`). **Example:** ```python table1 = [ {\\"id\\": \\"1\\", \\"name\\": \\"Alice\\", \\"city\\": \\"New York\\"}, {\\"id\\": \\"2\\", \\"name\\": \\"Bob\\", \\"city\\": \\"Los Angeles\\"} ] table2 = [ {\\"id\\": \\"1\\", \\"age\\": \\"30\\", \\"city\\": \\"NY\\"}, {\\"id\\": \\"3\\", \\"age\\": \\"25\\", \\"city\\": \\"SF\\"} ] output = join(table1, table2, \\"id\\") # Expected output: # [ # {\\"id\\": \\"1\\", \\"name\\": \\"Alice\\", \\"city_table1\\": \\"New York\\", \\"city_table2\\": \\"NY\\", \\"age\\": \\"30\\"} # ] ``` # Notes: - You can assume that the field values in the input are always strings. - Implement both functions `select` and `join`. - Include proper error handling for cases where fields might not exist. Implement these functions in Python.","solution":"def select(table, fields): Performs the SELECT operation on the given table. :param table: list of dictionaries representing the records :param fields: list of strings representing the field names to be returned :return: new table (list of dictionaries) containing only the specified fields for each record return [{field: record[field] for field in fields if field in record} for record in table] def join(table1, table2, field): Performs the JOIN operation on two tables based on the common field. :param table1: list of dictionaries representing the first table :param table2: list of dictionaries representing the second table :param field: string representing the common field used for joining :return: new table (list of dictionaries) containing records where the values of the common field are equal # Create a join index for table2 join_dict = {record[field]: record for record in table2} result = [] for record in table1: if record[field] in join_dict: joined_record = record.copy() for k, v in join_dict[record[field]].items(): if k in joined_record and joined_record[k] != v: joined_record[f\\"{k}_table1\\"] = joined_record.pop(k) joined_record[f\\"{k}_table2\\"] = v else: joined_record[k] = v result.append(joined_record) return result"},{"question":"You are given a grid of size m x n and an integer k. You need to find the number of paths from the top-left corner to the bottom-right corner such that you never pass through an obstacle and the absolute difference between the indices of any two adjacent cells in the path (in terms of row or column) is not greater than k. The path can move only right or down. Each cell in the grid is either empty or contains an obstacle denoted by \'#\'. An empty cell is marked by \'.\' The grid and integer are provided as follows: - The first line contains the integers m, n, and k (1 ≤ m, n ≤ 50, 1 ≤ k ≤ 10). - The next m lines contain strings of length n consisting of characters \'.\' and \'#\' representing the grid. Print the number of such valid paths modulo 10^9 + 7. Example: Input: 3 3 1 . .. .#. ... Output: 2 In the given example, there are 2 valid paths: - Right, Right, Down, Down - Down, Right, Right, Down","solution":"def count_paths(m, n, k, grid): MOD = 10**9 + 7 # Edge case where starting or ending cell has an obstacle if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return 0 # Initializing dp array with zeros dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == \'#\': continue if i > 0 and abs(i - (i-1)) <= k: dp[i][j] += dp[i-1][j] if j > 0 and abs(j - (j-1)) <= k: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD return dp[m-1][n-1]"},{"question":"You are given two words, `word1` and `word2`. Your task is to determine the minimum number of moves needed to make the two words the same. In each move, you can transform `word1` into a new word by either inserting a single character, deleting a single character, or replacing a single character. In other words, you need to find the minimum number of operations required to convert `word1` to `word2`. # Input The input consists of two lines: - The first line contains the string `word1` (1 ≤ |word1| ≤ 1000) - The second line contains the string `word2` (1 ≤ |word2| ≤ 1000) # Output Output a single integer representing the minimum number of moves required to convert `word1` to `word2`. # Example Input ``` horse ros ``` Output ``` 3 ``` Explanation To convert `horse` to `ros`: 1. Replace \'h\' with \'r\' -> `rorse` 2. Remove \'r\' -> `rose` 3. Remove \'e\' -> `ros` Thus, the output is `3`.","solution":"def min_distance(word1, word2): Computes the minimum number of operations required to convert word1 to word2 m, n = len(word1), len(word2) # Create a DP table to memoize the results dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases: transforming a string to an empty string for i in range(m + 1): dp[i][0] = i # word1 -> \\"\\" for j in range(n + 1): dp[0][j] = j # \\"\\" -> word2 # Update the dp table based on the possible operations for i in range(1, m + 1): for j in range(1, n + 1): if word1[i - 1] == word2[j - 1]: # If chars match, no more operations needed dp[i][j] = dp[i - 1][j - 1] else: # Otherwise, take the minimum of the three possible operations dp[i][j] = 1 + min(dp[i - 1][j], # Delete from word1 dp[i][j - 1], # Insert to word1 dp[i - 1][j - 1]) # Replace character return dp[m][n]"},{"question":"Aria is practicing her algorithms for an upcoming coding competition. She stumbled upon an interesting problem involving bitwise operations and arrays: You are given an integer array a of length n. You need to determine if there exists a subset of indices such that the bitwise XOR of the elements at those indices is equal to a given integer k. Note that an empty subset is not allowed. Write a program to solve this problem. The first line contains a single integer t (1 leq t leq 1000) denoting the number of test cases in the input. Each test case consists of: - The first line contains two integers n and k (1 leq n leq 1000, 0 leq k < 2^{30}). - The second line contains n space-separated integers a_1, a_2, ..., a_n (0 leq a_i < 2^{30}) which make up the array a. For each test case, print \\"YES\\" if such a subset exists, and \\"NO\\" otherwise.","solution":"def solve(t, test_cases): results = [] for case in test_cases: n, k, a = case found = False def subset_xor(subset): result = 0 for num in subset: result ^= num return result def find_subset(index, current): nonlocal found if index == n: if current != 0 and subset_xor(current) == k: found = True return find_subset(index + 1, current + [a[index]]) find_subset(index + 1, current) find_subset(0, []) if found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Reading input def main(): t = int(input().strip()) test_cases = [] for _ in range(t): n, k = map(int, input().strip().split()) a = list(map(int, input().strip().split())) test_cases.append((n, k, a)) results = solve(t, test_cases) for result in results: print(result) # Usage: # if __name__ == \\"__main__\\": # main()"},{"question":"You are given a string `s` consisting of lowercase English letters. You need to find the length of the shortest non-empty substring of `s` which contains at least one occurrence of each unique character in `s`. # Input - A single string `s` (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. # Output - A single integer, the length of the shortest such substring. # Example Input ``` abac ``` Output ``` 3 ``` The substring \\"bac\\" contains all unique characters of `s` (\\"a\\", \\"b\\", and \\"c\\"), and its length is 3.","solution":"def shortest_unique_char_substring(s): unique_chars = set(s) char_count_map = {char: 0 for char in unique_chars} min_length = len(s) left = 0 unique_count = 0 for right in range(len(s)): current_char = s[right] if char_count_map[current_char] == 0: unique_count += 1 char_count_map[current_char] += 1 while unique_count == len(unique_chars): min_length = min(min_length, right - left + 1) left_char = s[left] char_count_map[left_char] -= 1 if char_count_map[left_char] == 0: unique_count -= 1 left += 1 return min_length"},{"question":"Given an array of integers, your task is to determine the number of contiguous subarrays that have a sum equal to a given integer `k`. **Input:** - The first line contains an integer `n` (1 le n le 10^5), the number of elements in the array. - The second line contains `n` space-separated integers a_1, a_2, ..., a_n (-10^4 le a_i le 10^4), the elements of the array. - The third line contains an integer `k` (-10^9 le k le 10^9), the target sum. **Output:** - Output a single integer, the number of contiguous subarrays in which the sum of elements is equal to `k`. **Example:** **Input:** ``` 5 1 1 1 1 1 3 ``` **Output:** ``` 3 ``` **Explanation:** There are three subarrays with a sum equal to 3: - [1, 1, 1] (starting at index 0 and ending at index 2) - [1, 1, 1] (starting at index 1 and ending at index 3) - [1, 1, 1] (starting at index 2 and ending at index 4) **Constraints:** - The sum of the subarray is considered starting from the first element and continuing to the subsequent elements without skipping any. - The solution needs to be efficient due to the upper limit of `n`.","solution":"def count_subarrays_with_sum_k(n, arr, k): Given an array of integers and an integer `k`, this function returns the number of contiguous subarrays that have a sum equal to `k`. Parameters: n (int): The number of elements in the array. arr (list of int): The list containing `n` integers. k (int): The target sum for the subarrays. Returns: int: The number of contiguous subarrays that sum to `k`. count = 0 current_sum = 0 sum_map = {0: 1} for num in arr: current_sum += num if (current_sum - k) in sum_map: count += sum_map[current_sum - k] if current_sum in sum_map: sum_map[current_sum] += 1 else: sum_map[current_sum] = 1 return count"},{"question":"You are given an array `arr` of positive integers. Your task is to partition the array into two subarrays such that the sum of elements in both subarrays is as close as possible. If there are multiple ways to achieve this, return the indices of any one possible solution. # Input - An integer `n` (1 ≤ n ≤ 2·105), the length of the array. - An array `arr` of `n` positive integers (1 ≤ arr[i] ≤ 1000). # Output Return a single integer `k` (0 < k < n) that represents the index that divides the array into two subarrays: `arr[0]` to `arr[k-1]` for the first subarray and `arr[k]` to `arr[n-1]` for the second subarray, such that the absolute difference between the sum of the first subarray and the sum of the second subarray is minimized. # Example Input: ``` 6 3 1 4 1 5 9 ``` Output: ``` 4 ``` In the example above, splitting the array at index 4 (1-based index) gives two subarrays [3, 1, 4, 1] and [5, 9], with sums 9 and 14 respectively, and their absolute difference is the smallest possible for this input.","solution":"def find_partition_index(arr): Finds an index to partition the array such that the sum of elements in both subarrays is as close as possible. n = len(arr) total_sum = sum(arr) left_sum = 0 min_diff = float(\'inf\') partition_index = -1 for i in range(n - 1): left_sum += arr[i] right_sum = total_sum - left_sum diff = abs(left_sum - right_sum) if diff < min_diff: min_diff = diff partition_index = i + 1 return partition_index"},{"question":"Consider an n x n grid filled with non-negative integers. Your task is to find the length of the shortest path from the top-left corner (0,0) to the bottom-right corner (n-1,n-1). You can only move right or down at each step. The length of a path is the sum of the values of the cells along the path (including the starting and ending cells). The first line of input contains an integer t (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains an integer n (1 ≤ n ≤ 1000), the size of the grid. The next n lines contain n space-separated integers, representing the grid. Print t integers, each representing the minimum path sum for the respective test case. **Example:** Input: ``` 2 3 1 3 1 1 5 1 4 2 1 2 1 2 1 2 ``` Output: ``` 7 4 ```","solution":"def min_path_sum(grid): Returns the length of the shortest path from the top-left corner (0,0) to the bottom-right corner (n-1,n-1) in an n x n grid. n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Iterate over the rest of the grid for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(min_path_sum(grid)) return results"},{"question":"A company uses a simplified system to log in to employee profiles, where each employee has a unique profile ID composed of lowercase English letters. Unfortunately, a bug was introduced which changed some profiles to uppercase. To maintain consistency, we need to convert them back to their original lowercase versions. Sometimes, a digit might appear in the profile ID by mistake, and we need to handle that by removing the digits. Note that only digits from 0 to 9 can be mistakenly introduced, and they can appear anywhere in the ID, but no other characters besides lowercase letters and digits will be present. Write a function `correct_profile_id(profiles)` that takes a list of strings `profiles` and returns a list of strings, where the profile IDs are corrected to be entirely lowercase and free from digits. # Input: - profiles: A list of strings, where each string is a profile ID with a length of at most 50 characters. Each character in the strings profile contains either a lowercase English letter or a digit from 0 to 9. # Output: - A list of strings, where each string is the corrected profile ID. # Example: ```python # Input: profiles = [\\"AbC123\\", \\"jOHndoE5\\", \\"m@rk7\\", \\"eXaMple\\"] # Output: [\\"abc\\", \\"johndoe\\", \\"mrk\\", \\"example\\"] ``` # Constraints: - The length of each profile ID is at most 50 characters. - The letters in the profile IDs are either lowercase English letters or digits from 0 to 9. - No other characters apart from lowercase English letters and digits will be present in the input.","solution":"def correct_profile_id(profiles): corrected_profiles = [] for profile in profiles: corrected_profile = \'\'.join([char for char in profile if char.isalpha()]).lower() corrected_profiles.append(corrected_profile) return corrected_profiles"},{"question":"You\'re given an array of integers and an integer target value. Your task is to determine whether there exist two distinct indices i and j in the array such that the sum of the elements at these indices is equal to the target value. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) — the elements of the array. The third line contains a single integer target (|target| ≤ 10^9) — the target sum value. Output \\"YES\\" if there are two such indices, and \\"NO\\" otherwise. # Example Input: ``` 5 2 7 11 15 1 9 ``` Output: ``` YES ``` Input: ``` 4 1 2 3 4 8 ``` Output: ``` NO ``` # Explanation In the first example, the optimal solution is to identify the indices with values 2 and 7, which sum up to the target value 9. Therefore, the answer is \\"YES\\". In the second example, no two indices sum up to the target value 8, hence the answer is \\"NO\\".","solution":"def has_pair_with_sum(arr, target): Returns \\"YES\\" if there exist two distinct indices i and j in the array such that the sum of the elements at these indices is equal to the target value, otherwise \\"NO\\". seen = set() for num in arr: complement = target - num if complement in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"You are given an undirected, connected weighted graph with `n` nodes and `m` edges. Each edge has a unique weight assigned to it. Your task is to find the minimum spanning tree (MST) of this graph, where MST is defined as a subset of the edges that forms a tree that includes every vertex, and the total weight of all the edges in the tree is minimized. More specifically, you need to write a program that performs the following: 1. Read the integers `n`, `m` (1 ≤ `n` ≤ 1000, 1 ≤ `m` ≤ 5000), representing the number of nodes and edges respectively. 2. Read the next `m` lines, each containing three integers `u`, `v`, and `w` (1 ≤ `u`, `v` ≤ `n`, 1 ≤ `w` ≤ 10000), representing an edge between nodes `u` and `v` with weight `w`. Output a single integer which is the total weight of the minimum spanning tree. If the MST cannot be formed, output \\"-1\\" without quotes. Example: ``` Input: 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 Output: 6 ```","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] mst_weight = 0 mst_edges = 0 for node in range(n): parent.append(node) rank.append(0) for u, v, w in edges: u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: mst_edges += 1 mst_weight += w union(parent, rank, x, y) if mst_edges == n - 1: break if mst_edges != n - 1: return -1 return mst_weight def minimum_spanning_tree(n, m, edge_list): return kruskal_mst(n, edge_list) # Example usage n = 4 m = 5 edge_list = [(1, 2, 1), (2, 3, 2), (3, 4, 3), (4, 1, 4), (1, 3, 5)] print(minimum_spanning_tree(n, m, edge_list)) # Output: 6"},{"question":"Paul has a rectangular garden of size n x m. He wants to cover the garden with square tiles of size a x a. Given the dimensions of the garden and the tiles, calculate the minimum number of tiles necessary to completely cover the garden without breaking any tile. Note that it is allowed to have tiles extending beyond the edges of the garden. **Input:** - The first and only line contains three integers n, m, a (1 ≤ n, m, a ≤ 10^9) — the dimensions of the garden and the size of the tile. **Output:** - Print the minimum number of tiles required to cover the garden. **Example:** Input: ``` 6 6 4 ``` Output: ``` 4 ``` **Explanation:** In this case, to fully cover the garden, you need 4 tiles: - 2 tiles along the length (n) since 6/4 = 1.5, which rounds up to 2. - 2 tiles along the width (m) since 6/4 = 1.5, which rounds up to 2. Thus, 2 * 2 = 4 tiles are needed to cover the entire garden.","solution":"import math def minimum_tiles_required(n, m, a): Calculates the minimum number of square tiles of size a x a required to cover a rectangular garden of size n x m. Parameters: n (int): Garden length m (int): Garden width a (int): Tile side length Returns: int: Minimum number of tiles required tiles_along_length = math.ceil(n / a) tiles_along_width = math.ceil(m / a) return tiles_along_length * tiles_along_width"},{"question":"You are given an array of integers with length n. Your task is to find the length of the longest contiguous subarray such that if this subarray is sorted (either in non-decreasing or non-increasing order), the resulting contiguous subarray is also present in the array. In other words, find a subarray that can be sorted to form another subarray in the given array without changing the positions of elements outside this subarray. Note that the rest of the array outside this subarray should remain unchanged. # Input The input consists of a single test case. The first line contains an integer n (1 le n le 10^4) – the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) – the elements of the array. # Output Output a single integer – the length of the longest contiguous subarray that can be sorted (in non-decreasing or non-increasing order) to form another subarray in the given array. # Example Input ``` 5 2 1 3 4 5 ``` Output ``` 4 ``` Explanation The subarray [1, 3, 4, 5] can be sorted in non-decreasing order to get [1, 3, 4, 5], which is already a subarray of the original array. Therefore, the length of the longest contiguous subarray is 4.","solution":"def longest_sortable_subarray(n, arr): def is_subarray_sorted(i, j): return arr[i:j+1] == sorted(arr[i:j+1]) or arr[i:j+1] == sorted(arr[i:j+1], reverse=True) max_len = 1 for i in range(n): for j in range(i+1, n): if is_subarray_sorted(i, j): max_len = max(max_len, j - i + 1) return max_len"},{"question":"Given a list of words, create a function that groups the words that are anagrams of each other. An anagram is a word formed by rearranging the letters of another, such as \\"cinema\\" and \\"iceman\\". The input list will have at least one word and at most 1000 words. Each word consists of lowercase English letters and has a length between 1 and 100. Your task is to write a function that takes the list of words and returns a list of groups of anagrams. Each group is represented as a list of words, sorted in lexicographical order, and all the groups should be sorted based on the first word of each group in lexicographical order. For example, given the input list: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"], the output should be: [[\\"ate\\", \\"eat\\", \\"tea\\"], [\\"bat\\"], [\\"nat\\", \\"tan\\"]]. Input Format - The first line of the input contains an integer `n` (1 ≤ n ≤ 1000), the number of words. - The next n lines each contain a word consisting of lowercase English letters. Output Format - Print the list of anagram groups, where each group is on a new line and represented as a space-separated string of words. ```python def group_anagrams(words): # Your code here # Example usage: n = int(input()) words = [input().strip() for _ in range(n)] group_anagrams(words) ``` **Example 1:** ``` Input: 6 eat tea tan ate nat bat Output: ate eat tea bat nat tan ``` **Example 2:** ``` Input: 5 abcd dcba bacd tab bat Output: abcd bacd dcba bat tab ```","solution":"def group_anagrams(words): from collections import defaultdict anagrams = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) result = [] for group in anagrams.values(): result.append(sorted(group)) result.sort(key=lambda x: x[0]) for group in result: print(\\" \\".join(group))"},{"question":"You are given a list of integers `arr` and a target integer `x`. Your task is to find the length of the smallest contiguous subarray of which the sum is greater than or equal to `x`. If no such subarray exists, return `0`. The first line of input contains two integers `n` and `x` where `n` (1 <= n <= 10^5) is the length of the array and `x` (1 <= x <= 10^9) is the target sum. The second line contains `n` space-separated integers representing the elements of the array. Each element of the array is guaranteed to be a positive integer and does not exceed 100. Output the length of the smallest contiguous subarray with a sum greater than or equal to `x`. If no such subarray exists, return `0`.","solution":"def min_subarray_length(arr, x): Returns the length of the smallest contiguous subarray with a sum >= x. If no such subarray exists, returns 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] while current_sum >= x: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"You are given an integer sequence b1, b2, ....., bm and a sequence of queries. There are two types of queries: 1. Update the value at a specific index in the sequence. 2. Find the minimum value in a specific subarray. The first line of the input contains an integer m (1 ≤ m ≤ 100000) - the size of the sequence. The next line contains m integers b1, b2, ..., bm (|bi| ≤ 100000). The third line contains integer q (1 ≤ q ≤ 100000) - the number of queries. Each of the next q lines contains a query in one of the following formats: - \\"1 x y\\": Update the value at position x to y (1 ≤ x ≤ m, |y| ≤ 100000). - \\"2 l r\\": Find the minimum value in the subarray from l to r (1 ≤ l ≤ r ≤ m). For each query of the second type, print the result on a new line. # Example Input ``` 5 1 5 3 2 4 4 2 2 4 1 3 10 2 2 4 2 1 5 ``` Output ``` 2 2 1 ``` # Explanation - The initial sequence is [1, 5, 3, 2, 4]. - The first query is to find the minimum value between indices 2 and 4, which is 2. - The second query updates the value at index 3 to 10, making the sequence [1, 5, 10, 2, 4]. - The third query again finds the minimum value between indices 2 and 4, which remains 2. - The fourth query is to find the minimum value between indices 1 and 5 in the updated sequence, which is 1.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) # Build the segment tree # Initialize leaves for i in range(self.n): self.tree[self.n + i] = array[i] # Initialize internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, idx, value): idx += self.n self.tree[idx] = value while idx > 1: idx //= 2 self.tree[idx] = min(self.tree[idx * 2], self.tree[idx * 2 + 1]) def query(self, l, r): res = float(\'inf\') l += self.n r += self.n + 1 while l < r: if l % 2 == 1: res = min(res, self.tree[l]) l += 1 if r % 2 == 1: r -= 1 res = min(res, self.tree[r]) l //= 2 r //= 2 return res def process_queries(m, sequence, queries): segment_tree = SegmentTree(sequence) results = [] for query in queries: if query[0] == 1: _, x, y = query segment_tree.update(x - 1, y) elif query[0] == 2: _, l, r = query results.append(segment_tree.query(l - 1, r - 1)) return results"},{"question":"You are given an unsorted list of integers that contains every number from 1 to n except two. Find the two missing numbers. The first line contains a single integer n (2 ≤ n ≤ 10^6) — the maximum number in the list. The second line contains n-2 space-separated integers that represent the given list. Output the two missing numbers in ascending order. For example: **Input:** ``` 7 4 3 1 2 6 ``` **Output:** ``` 5 7 ``` **Explanation:** The list should contain every number from 1 to 7, but the numbers 5 and 7 are missing. Therefore, the output is `5 7`.","solution":"def find_missing_numbers(n, arr): Returns the two missing numbers from the list containing numbers from 1 to n except two numbers. total_sum = n * (n + 1) // 2 current_sum = sum(arr) sum_of_two_missing = total_sum - current_sum total_square_sum = n * (n + 1) * (2 * n + 1) // 6 current_square_sum = sum(x * x for x in arr) square_sum_of_two_missing = total_square_sum - current_square_sum # Solving the equations: # x + y = sum_of_two_missing # x^2 + y^2 = square_sum_of_two_missing x_plus_y = sum_of_two_missing x_square_plus_y_square = square_sum_of_two_missing # (x + y)^2 = x^2 + y^2 + 2xy # x^2 + y^2 = x_square_plus_y_square # 2xy = (x + y)^2 - x^2 - y^2 xy = (x_plus_y * x_plus_y - x_square_plus_y_square) // 2 # Now we have x + y and xy, solve the quadratic equation x^2 - (x+y)x + xy = 0 a = 1 b = -x_plus_y c = xy x = int((x_plus_y + (x_plus_y * x_plus_y - 4 * xy)**0.5) // 2) y = int((x_plus_y - (x_plus_y * x_plus_y - 4 * xy)**0.5) // 2) return min(x, y), max(x, y) # Example call to the function # find_missing_numbers(7, [4, 3, 1, 2, 6])"},{"question":"You are given a string and a pattern. Your task is to find all the start indices of the pattern\'s anagrams in the given string. The output should be in the form of a list of integers representing the start indices of the anagrams. An anagram is a permutation of the pattern. For example, given the pattern \\"abc\\", both \\"cba\\" and \\"bac\\" are anagrams of \\"abc\\". The first line of input contains a string s, and the second line contains the pattern p. The length of both the string and the pattern will be at most 104. All characters are lowercase English letters. Print a list of integers representing the starting indices of the anagrams of the pattern in the given string. Consider the first sample test. The pattern is \\"ab\\" and the string is \\"abxaba\\". The anagrams of \\"ab\\" appear at indices 0, 3, and 4. Consider the second sample test. The pattern is \\"abc\\" and the string is \\"cbaebabacd\\". The anagrams of \\"abc\\" appear at indices 0, 6.","solution":"from collections import Counter def find_anagrams(s, p): Finds the start indices of the anagram substrings of p in s. if len(p) > len(s): return [] s_len, p_len = len(s), len(p) p_counter = Counter(p) s_counter = Counter() result_indices = [] for i in range(s_len): s_counter[s[i]] += 1 # Keep the window size the same as the length of p if i >= p_len: if s_counter[s[i - p_len]] == 1: del s_counter[s[i - p_len]] else: s_counter[s[i - p_len]] -= 1 # If matched, add the starting index to the result list if s_counter == p_counter: result_indices.append(i - p_len + 1) return result_indices"},{"question":"A puzzle board is represented as an n x n grid of cells, where each cell can either be empty or contain an obstacle. You are currently at the top-left corner of the grid (0, 0) and your goal is to reach the bottom-right corner of the grid (n-1, n-1). You can move either down or right at any point in time. Given an n x n grid where 0 represents an empty cell and 1 represents a cell with an obstacle, write a program to determine if there is a path from the top-left corner to the bottom-right corner. The input consists of: - An integer n (1 ≤ n ≤ 100) representing the dimension of the grid. - An n x n matrix where each element is either 0 or 1. Output \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, and \\"NO\\" otherwise. Example: Input: 3 0 0 1 0 1 0 0 0 0 Output: YES","solution":"def is_path_exists(n, grid): if grid[0][0] == 1 or grid[n-1][n-1] == 1: return \\"NO\\" from collections import deque directions = [(1, 0), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n-1 and y == n-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to perform the following operation any number of times: Select a substring of s and replace all characters of this substring with any single lowercase English letter of your choice. Your goal is to make all characters of the final string identical, using the minimum number of operations. The first line contains one integer T (1 le T le 1000) — the number of test cases. Each test case consists of one line containing the string s (1 le |s| le 10^5). It is guaranteed that the sum of lengths of all strings over all test cases does not exceed 10^6. For each test case, print the minimum number of operations required to make all characters in the string identical. Example: Input: ``` 3 aabbbc aaaaa ab ``` Output: ``` 2 0 1 ``` Explanation: For the first test case, you can make the string all \'b\'s like this: 1. Replace substring \\"aa\\" with \'b\' to get \\"bbbbbc\\". 2. Replace substring \\"c\\" with \'b\' to get \\"bbbbbb\\". For the second test case, the string is already identical, so no operations are needed. For the third test case, you can either: 1. Replace \'a\' with \'b\' to get \\"bb\\". 2. Replace \'b\' with \'a\' to get \\"aa\\". Thus, only one operation is needed in either case.","solution":"def min_operations_to_identical(s): Returns the minimum number of operations required to make all characters in the string identical. return len(set(s)) - 1 def process_test_cases(test_cases): Processes a list of test cases and returns the list of results for each test case. results = [] for s in test_cases: results.append(min_operations_to_identical(s)) return results"},{"question":"There is a large warehouse with piles of wooden boxes stacked on top of each other. The warehouse manager needs to know the maximum height of the stacks of boxes after each addition of a new box. Each stack is represented by an integer in a list, where the value at each position in the list indicates the height of boxes at that particular stack. You have been tasked with writing a program to keep track of the maximum stack height each time a box is added to a stack. The manager will provide the initial heights of all the stacks and a series of operations representing the addition of boxes to the stacks. Your task is to return the maximum height of any stack after each operation. Input: - The first line contains an integer `m` (1 ≤ m ≤ 100,000), representing the number of initial stacks. - The second line contains `m` space-separated integers representing the initial heights of the stacks. - The third line contains an integer `k` (1 ≤ k ≤ 100,000), representing the number of operations. - The following `k` lines each contain two integers `i` (1 ≤ i ≤ m) and `j` (1 ≤ j ≤ 1000), representing the index of the stack and the number of boxes added to that stack respectively. Output: - After each operation, output the maximum height of any stack in the warehouse. Example: Input: 4 5 3 7 2 3 2 1 3 5 1 2 Output: 7 12 12 Explanation: - Initially, the heights of the stacks are [5, 3, 7, 2]. - After the first operation, 1 box is added to stack 2. The heights become [5, 4, 7, 2]. The maximum height is 7. - After the second operation, 5 boxes are added to stack 3. The heights become [5, 4, 12, 2]. The maximum height is 12. - After the third operation, 2 boxes are added to stack 1. The heights become [7, 4, 12, 2]. The maximum height remains 12.","solution":"def max_stack_heights(m, initial_heights, k, operations): result = [] max_height = max(initial_heights) for i, j in operations: initial_heights[i-1] += j max_height = max(max_height, initial_heights[i-1]) result.append(max_height) return result"},{"question":"Edra owns a small bookstore and wants to offer discounts on certain books to promote sales. Each book has a unique price, and she\'s planning to offer a \\"Buy One Get One\\" deal. However, she wants to ensure that the total cost of two books being offered is as even as possible. Given a list of book prices, find the pair of books such that the absolute difference in their prices is minimized. If multiple pairs have the same minimum difference, return the pair with the lower sum. You need to write a program that takes an array of integers representing book prices and outputs the pair of prices which satisfy the given conditions. The first line of the input contains a single integer n (2 ≤ n ≤ 10^5) — the number of books. The next line contains n distinct integers p1, p2, ..., pn (1 ≤ pi ≤ 10^6) — the prices of the books. Output two integers representing the pair of prices with the smallest absolute difference and, among those, the pair with the smallest sum. If there are multiple such pairs, output the pair with the smallest values first. # Example Input: 5 4 9 2 7 15 Output: 2 4 Explanation: The possible pairs are: - (4, 9): Difference is 5 - (4, 2): Difference is 2 - (4, 7): Difference is 3 - (4, 15): Difference is 11 - (9, 2): Difference is 7 - (9, 7): Difference is 2 - (9, 15): Difference is 6 - (2, 7): Difference is 5 - (2, 15): Difference is 13 - (7, 15): Difference is 8 The pair with the smallest difference is (4, 2) and (9, 7), both having a difference of 2. However, the pair (2, 4) has the smaller sum between the two, so the output should be (2, 4). # Notes: - Ensure that all prices are handled correctly. - Optimize the solution to avoid time limit exceeded errors for larger inputs.","solution":"def find_min_difference_pair(prices): Returns a pair of prices with the smallest absolute difference. If there are multiple pairs, returns the pair with the smallest sum. # Sort the prices to find the pair with minimum difference easily prices.sort() min_diff = float(\'inf\') best_pair = (None, None) # Traverse the sorted list and calculate the difference between consecutive elements for i in range(len(prices) - 1): diff = abs(prices[i] - prices[i + 1]) if diff < min_diff: min_diff = diff best_pair = (prices[i], prices[i + 1]) elif diff == min_diff: # Choose the pair with the smaller sum if prices[i] + prices[i + 1] < best_pair[0] + best_pair[1]: best_pair = (prices[i], prices[i + 1]) return best_pair"},{"question":"You are given an integer array `nums` representing the scores of `n` players in a game. Your task is to achieve the highest score possible for a new player while adhering to the following conditions: - You start with a score of 0. - In one move, you can add any number from the array `nums` to your current score. - Once you add a number to your score, you must wait for the next round to add another number. - The score you achieve cannot exceed a given limit `m`. Given the array of scores `nums` and the limit `m`, determine the maximum score the new player can reach without exceeding the limit `m`. The first line contains one integer `t` (1 le t le 1000), the number of test cases. For each test case: - The first line contains two integers `n` (1 le n le 100) and `m` (1 le m le 10^9). - The second line contains `n` integers representing the array of scores `nums` (1 le text{nums}[i] le 10^6 for each valid `i`). For each test case, output the maximum score the new player can achieve without exceeding the limit `m`.","solution":"def maximum_score(nums, m): Returns the maximum score a new player can achieve without exceeding the limit `m`. Parameters: nums (list of int): The scores of the players in the game. m (int): The maximum score limit. Returns: int: The maximum score the new player can achieve without exceeding `m`. def knapsack(nums, m): dp = [0] * (m + 1) for num in nums: for j in range(m, num - 1, -1): dp[j] = max(dp[j], dp[j - num] + num) return dp[m] return knapsack(nums, m) def process_test_cases(test_cases): results = [] for case in test_cases: n, m, nums = case results.append(maximum_score(nums, m)) return results"},{"question":"Given an array of integers, you are required to find the length of the longest segment of the array (contiguous subarray) that has an equal number of even and odd numbers. If no such segment exists, return 0. # Input - The first line of the input contains an integer `t` (1 le t le 100) — the number of test cases. - The first line of each test case contains an integer `n` (1 le n le 10^5) — the number of elements in the array. - The second line of each test case contains `n` integers `a_1, a_2, ..., a_n` (1 le a_i le 100,000) — the elements of the array. # Output For each test case, print a single integer — the length of the longest segment where the number of even and odd integers are the same. # Example Input: ``` 2 6 1 2 3 4 5 6 5 1 3 5 7 9 ``` Output: ``` 6 0 ``` # Explanation For the first test case, the entire array has 3 even numbers (2, 4, 6) and 3 odd numbers (1, 3, 5), so the length of the longest segment with an equal number of even and odd integers is 6. For the second test case, there are only odd numbers, so there is no segment with an equal number of even and odd integers, and the output is 0. Note: The sum of `n` over all test cases does not exceed 10^5.","solution":"def longest_even_odd_segment(nums): prefix_difference = {0: -1} max_length = 0 count_even = count_odd = 0 for i, num in enumerate(nums): if num % 2 == 0: count_even += 1 else: count_odd += 1 diff = count_even - count_odd if diff in prefix_difference: max_length = max(max_length, i - prefix_difference[diff]) else: prefix_difference[diff] = i return max_length def process_test_cases(test_cases): results = [] for case in test_cases: n, nums = case result = longest_even_odd_segment(nums) results.append(result) return results"},{"question":"The annual company picnic features a series of festivities including a friendly programming competition. This year, the theme is efficient teamwork, inspired by ants working together. Each team consists of multiple pairs of programmers who each take turns solving a series of tasks in a coordinated manner. Given n tasks, each with a difficulty level and an optimal time to solve it individually, your challenge is to determine the minimum total time required to solve all the tasks when each pair of programmers works on solving tasks together. Each pair can work on only one task at a time, but they can start a new task immediately after completing their current one. Additionally, it is known that when two programmers work together on a task, they can solve it faster than individually. Formally, each task i (1 ≤ i ≤ n) has a difficulty level di and an optimal individual solving time ti. When two programmers work together on a task of difficulty di, they take ⌈ti / di⌉ minutes to complete the task. You need to find the optimized total time taken to complete all tasks for the whole team of pairs. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of tasks. - Each of the following n lines contains two integers di and ti (1 ≤ di, ti ≤ 10,000) describing the difficulty level and the individual completion time for each task. Output: - Print a single integer — the minimum total time required to solve all tasks. Example: Input: 3 3 6 2 8 1 5 Output: 10 Explanation: Tasks can be sorted in descending order of (ti / di) ratio, i.e., [3 6], [2 8], and [1 5]. - Task 1: (3, 6) takes ⌈6 / 3⌉ = 2 minutes. - Task 2: (2, 8) takes ⌈8 / 2⌉ = 4 minutes. - Task 3: (1, 5) takes ⌈5 / 1⌉ = 5 minutes. Minimum total time = 2 + 4 + 5 = 11 minutes.","solution":"import math def minimum_total_time(n, tasks): Returns the minimum total time required to solve all tasks when each pair of programmers works on solving tasks together. Parameters: n (int): Number of tasks. tasks (list of tuples): Each tuple contains two integers di and ti. Returns: int: Minimum total time required. # Sort tasks based on the ratio (ti / di) tasks.sort(key=lambda x: x[1] / x[0], reverse=True) total_time = 0 for di, ti in tasks: total_time += math.ceil(ti / di) return total_time"},{"question":"A magical string is a string that has some unique properties. You are given two integers `n` and `k`. Your task is to generate a magical string of length `n` where exactly `k` distinct characters of the string are vowels (\'a\', \'e\', \'i\', \'o\', \'u\'). The rules to form the magical string are as follows: 1. The string must contain exactly `k` distinct vowel characters. 2. The string can also contain consonants (any character that is not a vowel from \'a\' to \'z\'). If multiple valid magical strings can be formed, you can print any of them. # Input: - The first line contains two integers `n` and `k` (1 ≤ `n` ≤ 100000, 0 ≤ `k` ≤ 5). # Output: - Print the magical string of length `n`. # Example: Example 1: **Input:** ``` 7 3 ``` **Output:** ``` aeioxyz ``` Example 2: **Input:** ``` 5 0 ``` **Output:** ``` bcdfg ``` Example 3: **Input:** ``` 10 2 ``` **Output:** ``` aiqwerqwer ```","solution":"def generate_magical_string(n, k): vowels = \'aeiou\' consonants = \'bcdfghjklmnpqrstvwxyz\' if k > 5 or n < k: raise ValueError(\\"Invalid input: k cannot be greater than 5 or less than n.\\") magical_string = [] # Add k distinct vowels for i in range(k): magical_string.append(vowels[i]) # Fill the rest of the string with consonants j = 0 for i in range(k, n): magical_string.append(consonants[j]) j = (j + 1) % len(consonants) return \'\'.join(magical_string)"},{"question":"Daniel has a rectangular grid map of a city. The city is represented as a 2D grid, where some locations are buildings and others are roads. Daniel is planning an emergency route from the bottom-left corner of the city (at position (n-1, 0)) to the top-right corner (at position (0, m-1)). Each cell of the grid can either be road (represented by \'.\') or building (represented by \'#\'). Daniel can only move to adjacent road cells horizontally or vertically. He cannot move to building cells or go out of the grid boundaries. Help Daniel determine if there exists a path from the bottom-left corner to the top-right corner. If such a path exists, print \\"YES\\". Otherwise, print \\"NO\\". The first line of the input contains two integers n and m (2 ≤ n, m ≤ 100) - the number of rows and columns in the grid respectively. The next n lines contain m characters each, which describe the grid. The character \'.\' represents a road and \'#\' represents a building. The cell at (n-1, 0) is guaranteed to be a road. If there is a route from the bottom-left corner to the top-right corner, print \\"YES\\". If not, print \\"NO\\". Example: Input: 4 4 .... .. .... .#.. Output: YES","solution":"def find_path(n, m, grid): from collections import deque # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Start from (n-1, 0) queue = deque([(n-1, 0)]) visited = set() visited.add((n-1, 0)) while queue: x, y = queue.popleft() # Check if we\'ve reached the top-right corner (0, m-1) if (x, y) == (0, m-1): return \\"YES\\" # Explore all adjacent cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" def can_escape_route(n, m, grid): return find_path(n, m, grid) # Debugging by calling the function directly if __name__ == \\"__main__\\": # Sample input n = 4 m = 4 grid = [ \\"....\\", \\"..\\", \\"....\\", \\".#..\\" ] print(can_escape_route(n, m, grid))"},{"question":"You are given a doubly linked list with N nodes and M queries. Each node contains a unique integer value. The following operations need to be supported: 1. \\"ADD_L X\\" - Add a new node with value X to the left end of the list. 2. \\"ADD_R X\\" - Add a new node with value X to the right end of the list. 3. \\"REMOVE_L\\" - Remove the node at the left end of the list. 4. \\"REMOVE_R\\" - Remove the node at the right end of the list. 5. \\"REVERSE\\" - Reverse the order of the nodes in the list. 6. \\"PRINT\\" - Print the values of all nodes in the list from left to right. The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. Each test case starts with an integer N (1 ≤ N ≤ 100) and M (1 ≤ M ≤ 1000). The second line of each test case contains N integers, the initial values of nodes in the list. The next M lines each contain a query of the above formats. Output the results of the \\"PRINT\\" queries for each test case. # Example Input: ``` 1 4 5 3 1 4 2 ADD_L 5 REMOVE_R REVERSE ADD_R 6 PRINT ``` Output: ``` 5 3 1 4 6 ``` Explanation: - Initial list: 3 1 4 2 - \\"ADD_L 5\\" → list is now: 5 3 1 4 2 - \\"REMOVE_R\\" → list is now: 5 3 1 4 - \\"REVERSE\\" → list is now: 4 1 3 5 - \\"ADD_R 6\\" → list is now: 4 1 3 5 6 - \\"PRINT\\" → output is 4 1 3 5 6","solution":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None class DoublyLinkedList: def __init__(self): self.head = None self.tail = None def add_left(self, data): new_node = Node(data) if self.head is None: self.head = self.tail = new_node else: new_node.next = self.head self.head.prev = new_node self.head = new_node def add_right(self, data): new_node = Node(data) if self.tail is None: self.head = self.tail = new_node else: new_node.prev = self.tail self.tail.next = new_node self.tail = new_node def remove_left(self): if self.head is None: return if self.head == self.tail: self.head = self.tail = None else: self.head = self.head.next self.head.prev = None def remove_right(self): if self.tail is None: return if self.head == self.tail: self.head = self.tail = None else: self.tail = self.tail.prev self.tail.next = None def reverse(self): current = self.head prev = None while current: next_node = current.next current.next = current.prev current.prev = next_node prev = current current = next_node self.head, self.tail = self.tail, self.head def print_list(self): current = self.head result = [] while current: result.append(current.data) current = current.next return result def process_test_case(n, initial_values, queries): dll = DoublyLinkedList() for value in initial_values: dll.add_right(value) results = [] for query in queries: parts = query.split() if parts[0] == \\"ADD_L\\": dll.add_left(int(parts[1])) elif parts[0] == \\"ADD_R\\": dll.add_right(int(parts[1])) elif parts[0] == \\"REMOVE_L\\": dll.remove_left() elif parts[0] == \\"REMOVE_R\\": dll.remove_right() elif parts[0] == \\"REVERSE\\": dll.reverse() elif parts[0] == \\"PRINT\\": results.append(\' \'.join(map(str, dll.print_list()))) return results def process_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) index = 1 results = [] for _ in range(t): n, m = map(int, input_lines[index].split()) initial_values = list(map(int, input_lines[index + 1].split())) queries = input_lines[index + 2: index + 2 + m] case_result = process_test_case(n, initial_values, queries) results.extend(case_result) index += 2 + m return results"},{"question":"Tomlyn wants to play a game with a sequence of integers. He has a sequence of integers a_1, a_2, ldots, a_n. In each move, Tomlyn can select a contiguous subsequence of length exactly k and replace all the elements in the subsequence with the mode of that subsequence. The mode of a sequence is the element that appears most frequently. If there are multiple modes, select the smallest one. Tomlyn’s goal is to use the minimum number of moves to make all elements in the sequence identical. The first line contains two integers n and k (1 leq n leq 300,000, 1 leq k leq n) — the length of the sequence and the length of the subsequence that Tomlyn can choose to replace, respectively. The next line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6) — the given sequence of integers. Output one integer: the minimum number of moves Tomlyn needs to make all the elements in the sequence identical. In the first example, the sequence is already identical, so the answer is 0. In the second example, you can select the contiguous subsequence starting at index 3 and ending at index 6. The sequence will be transformed to [4, 4, 4, 4, 4, 4, 7], resulting in a sequence where all elements are the same except the last one. From there, you can select the last element and the sequence becomes identical. Thus, the answer is 2. **Example:** ``` Input 7 2 4 4 1 1 1 1 7 Output 2 ``` ``` Input 5 3 2 2 2 2 2 Output 0 ```","solution":"from collections import Counter import heapq from collections import defaultdict def min_moves_to_identical(n, k, sequence): num_moves = 0 frequency = defaultdict(int) for num in sequence: frequency[num] += 1 # Find the most common number in entire sequence max_count_number = max(frequency.items(), key=lambda x: (x[1], -x[0]))[0] i = 0 while i < n: if sequence[i] != max_count_number: num_moves += 1 i += k else: i += 1 return num_moves"},{"question":"You are a game developer working on a new role-playing game (RPG) in which players navigate a dungeon represented as a grid of rooms. Each room in the dungeon has a treasure chest, and the goal is to collect the maximum amount of gold possible while moving from the top-left corner of the dungeon to the bottom-right corner. The dungeon is represented as an `n` x `m` grid, where each cell contains a non-negative integer value representing the amount of gold in that room (0 ≤ gold ≤ 100). The player can only move right or down from a given room. The player starts at the room in the top-left corner (cell (1, 1)) and must reach the bottom-right corner (cell (n, m)). Write a function `max_gold(n, m, grid)` that calculates the maximum amount of gold that can be collected on this path. The function receives the following parameters: - `n`: an integer representing the number of rows in the grid. - `m`: an integer representing the number of columns in the grid. - `grid`: a list of lists of integers, where each sublist represents a row of the dungeon grid. Return the maximum amount of gold that can be collected. # Input Format: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 200), representing the size of the dungeon grid. - The next `n` lines each contain `m` space-separated integers, representing the amount of gold in each room of the grid. # Output Format: - Print a single integer, the maximum amount of gold that can be collected. # Sample Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` # Sample Output: ``` 12 ``` # Explanation: The optimal path is to collect gold in the cells (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3), and the total gold collected is 1+3+5+2+1=12.","solution":"def max_gold(n, m, grid): Calculate the maximum amount of gold collectible in a grid dungeon. # Create a table to store the maximum gold up to each cell gold_table = [[0 for _ in range(m)] for _ in range(n)] # Initialize the top-left corner with the gold in the first cell gold_table[0][0] = grid[0][0] for i in range(n): for j in range(m): # Current cell\'s gold from the grid current_gold = grid[i][j] # If not the first cell, add maximum gold from left or top cell if i > 0: gold_table[i][j] = max(gold_table[i][j], gold_table[i-1][j] + current_gold) if j > 0: gold_table[i][j] = max(gold_table[i][j], gold_table[i][j-1] + current_gold) # If it is the first cell if i == 0 and j == 0: gold_table[i][j] = current_gold # The bottom-right corner is the answer return gold_table[n-1][m-1]"},{"question":"You have recently joined a team of developers who are building a set of software tools for managing a large international conference. One of the tasks involves managing the conference schedule. You are given several events, each with a specified start time and end time. Each event has a unique identifier. Due to room constraints, the goal is to determine the minimum number of rooms required to host all events such that no events overlap in the same room. An event is considered to occupy the room from its start time to its end time (inclusive). # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of events. - Each of the following n lines contains three space-separated integers: id, start, and end (1 ≤ id ≤ 10^6, 0 ≤ start < end ≤ 10^9), representing the unique identifier, the start time, and the end time of an event. # Output - Output a single integer representing the minimum number of rooms required. # Example Input ``` 4 1 0 30 2 5 10 3 15 20 4 25 40 ``` Output ``` 2 ``` # Explanation There are four events. Event 1 spans from time 0 to 30, Event 2 spans from 5 to 10, Event 3 spans from 15 to 20, and Event 4 spans from 25 to 40. A possible allocation that minimizes the number of rooms is: - Room 1: Event 1 from time 0 to 30 - Room 2: Event 2 from time 5 to 10, and Event 3 from time 15 to 20, and Event 4 from time 25 to 40 In this case, two rooms are sufficient to host all events without any overlap.","solution":"def min_rooms_required(events): Determines the minimum number of rooms required to host all events such that no events overlap in the same room. Each event occupies the room from its start time to its end time. Parameters: events (list of tuples): A list of tuples where each tuple contains: (id, start, end) - the unique identifier, start time, and end time of an event. Returns: int: The minimum number of rooms required. # Extract the start and end times start_times = sorted([event[1] for event in events]) end_times = sorted([event[2] for event in events]) start_pointer = 0 end_pointer = 0 num_rooms = 0 max_rooms = 0 while start_pointer < len(events): if start_times[start_pointer] < end_times[end_pointer]: num_rooms += 1 start_pointer += 1 max_rooms = max(max_rooms, num_rooms) else: num_rooms -= 1 end_pointer += 1 return max_rooms def process_input(input_string): lines = input_string.split(\\"n\\") n = int(lines[0]) events = [] for i in range(1, n + 1): id, start, end = map(int, lines[i].split()) events.append((id, start, end)) return min_rooms_required(events)"},{"question":"Anna has a new small business producing handmade crafts. She wants to fill several orders which require specific combinations of her crafts. Each craft has a production time. She is also tracking the time taken to produce each order to ensure timely delivery. She needs your help to determine the minimum total production time required to fill all the orders. You are given the production times of each type of craft Anna can produce, and the specific crafts required for each order. Anna can produce only one type of craft at a time and must produce exactly the number of each type of craft required for an order before starting production on the next order. Write a function that takes in two lists: `craft_times`, where `craft_times[i]` represents the production time of the `i-th` craft, and `orders`, where `orders[j]` is a list of integers representing the quantities of each craft needed for the `j-th` order. Return the minimum total production time to complete all orders. # Input - `craft_times`: A list of integers of length `c` (`1 ≤ c ≤ 100`), where each integer `craft_times[i]` (`1 ≤ craft_times[i] ≤ 1000`) represents the production time of the `i-th` craft. - `orders`: A list of lists, where each list (order) contains `c` integers (`1 ≤ c ≤ 100`), with each integer representing the quantity of each craft required. The number of orders `o` is (`1 ≤ o ≤ 1000`). # Output - Return a single integer representing the minimum total production time to fulfill all orders. # Example ```python craft_times = [5, 10, 3] orders = [ [2, 1, 4], [1, 2, 1], [3, 0, 2] ] print(min_production_time(craft_times, orders)) # Output: 130 ``` # Explanation To fulfill the first order `[2, 1, 4]`, it takes `2*5 + 1*10 + 4*3 = 10 + 10 + 12 = 32` time units. To fulfill the second order `[1, 2, 1]`, it takes `1*5 + 2*10 + 1*3 = 5 + 20 + 3 = 28` time units. To fulfill the third order `[3, 0, 2]`, it takes `3*5 + 0*10 + 2*3 = 15 + 0 + 6 = 21` time units. Adding these together gives `32 + 28 + 21 = 81` total time units.","solution":"def min_production_time(craft_times, orders): Returns the minimum total production time to complete all orders. Parameters: craft_times (list): A list of integers representing the production times of each craft. orders (list): A list of lists, where each list contains the quantities of each craft needed for an order. Returns: int: The minimum total production time. total_time = 0 for order in orders: order_time = 0 for i in range(len(order)): order_time += order[i] * craft_times[i] total_time += order_time return total_time"},{"question":"You are tasked with organizing an event where participants need to be divided into groups. Each group should have the same number of participants, and each participant should be in exactly one group. If it\'s not possible to divide the participants evenly, you need to find the minimum difference in the number of participants between the largest and smallest groups, after removing some participants to make it possible. Write a function that takes an integer n (the number of participants) and an integer k (the number of desired groups) as input and returns the number of participants that need to be removed to form the groups with the minimum possible difference in size. # Input format - The first line contains the integer n (1 ≤ n ≤ 10^5) — the number of participants. - The second line contains the integer k (1 ≤ k ≤ n) — the number of groups. # Output format - Print a single integer, the number of participants that need to be removed to achieve the minimum difference in group sizes. # Example Input: ``` 8 3 ``` Output: ``` 2 ``` In this example, removing 2 participants allows you to divide the remaining 6 participants into 3 groups of 2, minimizing the difference.","solution":"def min_removals(n, k): Determines the number of participants to remove to allow even division into k groups. Parameters: n (int): The number of participants. k (int): The number of groups. Returns: int: The minimal number of participants to remove. # If we already can evenly divide participants into groups, no removal is needed if n % k == 0: return 0 else: # The minimum number to remove is the remainder of n divided by k return n % k"},{"question":"Create a function in a programming language of your choice that takes an array of integers as input and returns the length of the longest contiguous subarray that contains at most two distinct integers. For example: Input: [1, 2, 1, 2, 3] Output: 4 Explanation: The longest subarray with at most two distinct integers is [1, 2, 1, 2]. Input: [4, 5, 4, 4, 5, 6] Output: 5 Explanation: The longest subarray with at most two distinct integers is [4, 5, 4, 4, 5].","solution":"def longest_subarray_with_two_distinct(nums): Returns the length of the longest contiguous subarray that contains at most two distinct integers. if not nums: return 0 max_len = 0 left = 0 count_map = {} for right in range(len(nums)): if nums[right] in count_map: count_map[nums[right]] += 1 else: count_map[nums[right]] = 1 while len(count_map) > 2: count_map[nums[left]] -= 1 if count_map[nums[left]] == 0: del count_map[nums[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"The warehouse manager is planning an optimal way to store containers. The layout of the warehouse is determined by a 2D grid where each cell can either be empty or occupied by a container. The manager needs to move all the containers from their initial positions to their target positions. Containers can only be moved horizontally or vertically, one cell at a time, to an adjacent empty cell. Your task is to help the manager find the minimum number of moves required to relocate all the containers from their given starting positions to their specified target positions. The first line of the input contains a single integer n (1 leq n leq 1000) — the number of containers. The next two lines contain n pairs of integers x_i, y_i (1 leq x_i, y_i leq 1000) representing the initial positions of the containers. The subsequent two lines contain n pairs of integers x\'_i, y\'_i (1 leq x\'_i, y\'_i leq 1000) representing the target positions for the containers. Output a single integer representing the minimum number of moves required to move all the containers from their initial positions to their target positions. Example: Input: 2 1 1 2 2 3 3 4 4 Output: 4 Explanation: The containers can be moved as follows: - Move the container from (1, 1) to (3, 3): 4 moves (right, right, down, down) - Move the container from (2, 2) to (4, 4): 4 moves (right, right, down, down) So the total number of moves is 4.","solution":"def min_moves_to_relocate_containers(n, initial_positions, target_positions): Calculates the minimum number of moves required to relocate containers from initial positions to target positions. Args: n (int): Number of containers. initial_positions (list of tuples): List of (x, y) pairs representing initial positions of containers. target_positions (list of tuples): List of (x\', y\') pairs representing target positions of containers. Returns: int: Minimum number of moves required. total_moves = 0 for i in range(n): initial_x, initial_y = initial_positions[i] target_x, target_y = target_positions[i] total_moves += abs(initial_x - target_x) + abs(initial_y - target_y) return total_moves"},{"question":"You are tasked to manage the cafeteria of your large company. The cafeteria has a self-service food counter with different sections. Each section has a different type of food such as salads, main courses, desserts, etc. Sections are placed consecutively in a straight line and have specific dimensions. Each section serves a certain number of employees simultaneously and covers a specific width that occupies a part of the counter. To organize the daily meal service, you receive a schedule for the next d days. The schedule contains the list of sections that will be in use and the number of employees who will come each day. Unfortunately, the sections in use on any given day must not overlap due to spatial constraints. You need to determine for each day whether the sections provided can accommodate the given number of employees without overlapping. The first line of input contains two integers s and w (1 le s le 2 cdot 10^5, 1 le w le 4 cdot 10^5) — the number of sections and the total width of the counter, respectively. The second line contains s integers b_1, b_2, dots, b_s (1 le b_i le w, sum{b_i} le w) — the widths of the sections. The third line contains d (1 le d le 2 cdot 10^5) — the number of days you have to process. The next d lines describe the schedule of each day. Each schedule is represented as an integer e_k followed by e_k integers t_1, t_2, dots, t_{e_k} (1 le e_k le 2 cdot 10^5, 1 le t_1 < t_2 < dots < t_{e_k} le s) — the number of sections that will be used on the k-th day, and their indices in ascending order. It\'s guaranteed that sum{e_k} doesn\'t exceed 2 cdot 10^5. Print d answers. Each answer is \\"POSSIBLE\\" or \\"IMPOSSIBLE\\" (case insensitive). Print \\"POSSIBLE\\" if it is feasible to use the specified sections without any overlap on the corresponding day. Otherwise, print \\"IMPOSSIBLE\\".","solution":"def check_feasibility(s, w, widths, d, schedules): results = [] for schedule in schedules: is_possible = True consumed_width = 0 for section_idx in schedule: consumed_width += widths[section_idx - 1] if consumed_width > w: is_possible = False results.append(\\"POSSIBLE\\" if is_possible else \\"IMPOSSIBLE\\") return results"},{"question":"In a faraway kingdom, there is a wall composed of bricks arranged in a straight line. Each brick has a specific weight assigned to it. The king wishes to know whether it\'s possible to divide the wall into two contiguous subwalls such that the total weight in each subwall is the same. You are given the number of bricks n and an array of integers weights where weights[i] represents the weight of the i-th brick. Determine if it is possible to split the wall into two non-empty contiguous subwalls with equal total weight. The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of bricks. The second line contains n integers weights1, weights2, ..., weightsn (1 ≤ weightsi ≤ 10^4) — the weights of the bricks. If it is possible to split the wall as described, print \\"Yes\\". Otherwise, print \\"No\\". # Examples **Input:** ``` 4 1 2 2 1 ``` **Output:** ``` Yes ``` **Input:** ``` 3 1 1 1 ``` **Output:** ``` No ``` # Explanation In the first example, you can split the wall after the second brick to get subwalls [1, 2] and [2, 1], both having a total weight of 3. In the second example, it\'s not possible to split the wall into two non-empty subwalls with equal weights.","solution":"def can_split_wall(n, weights): Determines if it\'s possible to split the wall into two contiguous subwalls with equal total weight. Parameters: - n (int): The number of bricks. - weights (list): The weights of the bricks. Returns: - str: \\"Yes\\" if it\'s possible to split the wall, otherwise \\"No\\". total_weight = sum(weights) if total_weight % 2 != 0: return \\"No\\" target = total_weight // 2 current_sum = 0 for weight in weights: current_sum += weight if current_sum == target: return \\"Yes\\" return \\"No\\""},{"question":"There is a processing plant that works 24/7 and engages in multiple shifts. The plant faces an issue where there are overlaps in the working hours of employees which leads to inefficiencies. Each shift is represented as a tuple of two integers (start_time, end_time), where start_time and end_time are in the range from 0 to 23 denoting the hour of the day in a 24-hour clock format (0 representing midnight). Two shifts are overlapping if they share at least one common hour. You are tasked with writing a program that will take in a list of such shifts and calculate the total number of overlapping shift pairs. The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of shifts. Each of the next n lines contains two integers, start_time and end_time, representing the start and end times of each shift. Note that a shift starting at start_time and ending at end_time means the employee works from the start of start_time to the start of end_time. Output a single integer, the total number of overlapping shift pairs. Example: Input: 4 1 3 2 5 4 6 6 8 Output: 2 Explanation: - Shift (1,3) overlaps with shift (2,5) because they share the hour 2. - Shift (2,5) overlaps with shift (4,6) because they share the hour 4. Therefore, there are 2 overlapping pairs.","solution":"def count_overlapping_shifts(shifts): Counts the total number of overlapping shift pairs. overlap_count = 0 n = len(shifts) # Function to check if two shifts overlap def is_overlap(shift1, shift2): return max(shift1[0], shift2[0]) < min(shift1[1], shift2[1]) # Compare every pair of shifts for i in range(n): for j in range(i + 1, n): if is_overlap(shifts[i], shifts[j]): overlap_count += 1 return overlap_count"},{"question":"A renowned chef, Gourmano, is planning a culinary festival tour across the country of TasteLand! TasteLand consists of various cities connected by a network of roads. Gourmano intends to visit five different cities to showcase his culinary skills. Each city on his tour will be unique, and he aims to maximize the culinary exposure by ensuring the maximum distance traveled between these cities. TasteLand\'s road network can be tricky, with each road having a different length. Additionally, some cities may not be directly reachable from others. Gourmano prefers driving, so he will need to stick to roads and cannot consider flying. Luckily, Gourmano has a natural sense of direction and only needs help in planning the most optimal route to cover the greatest distance. You are provided with a list of cities and the roads connecting them. Your task is to determine five different cities for Gourmano to visit and the order to visit them in, such that the total driving distance is maximized. Note that since TasteLand\'s tourism department ensures the roads are well-connected, it is guaranteed that a valid tour always exists. Input: The first line contains two integers, n and m (5 ≤ n ≤ 3000, 4 ≤ m ≤ 5000) — the number of cities and the number of roads in TasteLand. Each of the next m lines contains three integers ui, vi, and wi (1 ≤ ui, vi ≤ n, 1 ≤ wi ≤ 10000) — representing a road from city ui to city vi with a length of wi. Note that there can be multiple roads between the same pair of cities. Output: Print five integers — the numbers of the cities that Gourmano will visit, in the order of his visit. If there are multiple solutions, print any of them. Example: Input: 6 8 1 2 3 2 3 2 3 4 4 4 5 6 5 6 5 1 3 8 3 5 7 2 4 3 Output: 1 3 5 6 4 In this example, Gourmano\'s optimal tour might take him from city 1 to 3, from 3 to 5, from 5 to 6, and finally from 6 to 4, maximizing the distance he travels. Note that there might be other valid outputs with the same total distance.","solution":"import heapq from collections import defaultdict, deque def find_optimal_tour(n, m, roads): def dijkstra(start): distances = {city: float(\'inf\') for city in range(1, n + 1)} distances[start] = 0 pq = [(0, start)] while pq: curr_distance, curr_city = heapq.heappop(pq) if curr_distance > distances[curr_city]: continue for neighbor, weight in neighbors[curr_city]: distance = curr_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances neighbors = defaultdict(list) for u, v, w in roads: neighbors[u].append((v, w)) neighbors[v].append((u, w)) max_distance = 0 answer = [] for city1 in range(1, n + 1): dist1 = dijkstra(city1) for city2 in range(1, n + 1): if city1 != city2: dist2 = dijkstra(city2) for city3 in range(1, n + 1): if city3 not in (city1, city2): dist3 = dijkstra(city3) for city4 in range(1, n + 1): if city4 not in (city1, city2, city3): dist4 = dijkstra(city4) for city5 in range(1, n + 1): if city5 not in (city1, city2, city3, city4): total_distance = (dist1[city2] + dist2[city3] + dist3[city4] + dist4[city5]) if total_distance > max_distance: max_distance = total_distance answer = [city1, city2, city3, city4, city5] return answer # Example Usage n = 6 m = 8 roads = [ (1, 2, 3), (2, 3, 2), (3, 4, 4), (4, 5, 6), (5, 6, 5), (1, 3, 8), (3, 5, 7), (2, 4, 3) ] print(find_optimal_tour(n, m, roads))"},{"question":"You are given two strings, `A` and `B`, each consisting of lowercase English letters. You need to determine the smallest number of operations required to make the two strings equal. The only allowed operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character with another one. Write a function `min_operations_to_equal_strings(A, B)` that takes in two strings `A` and `B` and returns the minimum number of operations needed to make the strings equal. # Input: - `A`: A string of length `1 ≤ |A| ≤ 1000` consisting of lowercase English letters. - `B`: A string of length `1 ≤ |B| ≤ 1000` consisting of lowercase English letters. # Output: - An integer representing the minimum number of operations required to transform `A` into `B`. # Examples: Example 1: - Input: `A = \\"intention\\"`, `B = \\"execution\\"` - Output: `5` Example 2: - Input: `A = \\"horse\\"`, `B = \\"ros\\"` - Output: `3` # Explanation: In the first example, the minimum number of operations to transform \\"intention\\" into \\"execution\\" is 5: 1. Replace \'i\' with \'e\' 2. Replace \'n\' with \'x\' 3. Replace \'t\' with \'e\' 4. Replace \'n\' with \'c\' 5. Replace \'i\' with \'u\' In the second example, the minimum number of operations to transform \\"horse\\" into \\"ros\\" is 3: 1. Remove \'h\' 2. Replace \'o\' with \'r\' 3. Remove \'e\' # Function Signature: ```python def min_operations_to_equal_strings(A: str, B: str) -> int: # Your implementation here ```","solution":"def min_operations_to_equal_strings(A, B): Returns the minimum number of operations to transform string A into string B. The allowed operations are insert a character, delete a character, and replace a character. m = len(A) b = len(B) # Create a 2D array to store the minimum number of operations required dp = [[0 for _ in range(b + 1)] for _ in range(m + 1)] # Fill the first column and the first row of the dp array for i in range(m + 1): dp[i][0] = i # i deletions for j in range(b + 1): dp[0][j] = j # j insertions # Fill rest of the dp array for i in range(1, m + 1): for j in range(1, b + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # delete dp[i][j - 1], # insert dp[i - 1][j - 1]) # replace return dp[m][b]"},{"question":"John is a game developer working on a new RPG game. He needs to implement an inventory system where the player can carry a limited number of unique items. However, John also wants the items to be organized in such a way that the player easily finds what they need based on item types. You need to help John by designing a function that processes the player\'s actions related to adding new items into the inventory. The inventory must follow these rules: 1. The maximum number of unique items the inventory can hold is `k`. 2. If the player tries to add an item which already exists in the inventory, its count should be increased by one. 3. If the inventory has already `k` unique items and the player tries to add a new item, nothing should happen. Write a function `def update_inventory(k: int, actions: List[Tuple[str, str]]) -> Dict[str, int]:` where: - `k` (1 <= k <= 100) is the maximum number of unique items the inventory can hold. - `actions` is a list of tuples, where each tuple contains two strings: \\"ADD\\" and `item_name` representing the action of the player. The function should return a dictionary representing the current state of the inventory where the keys are the item names and the values are the counts of each item. # Example: ```python k = 3 actions = [(\\"ADD\\", \\"Sword\\"), (\\"ADD\\", \\"Shield\\"), (\\"ADD\\", \\"Potion\\"), (\\"ADD\\", \\"Shield\\"), (\\"ADD\\", \\"Axe\\")] ``` # Output: ```python { \\"Sword\\": 1, \\"Shield\\": 2, \\"Potion\\": 1 } ``` # Explanation: 1. \\"Sword\\" is added to the inventory. Current inventory: {\\"Sword\\": 1} 2. \\"Shield\\" is added to the inventory. Current inventory: {\\"Sword\\": 1, \\"Shield\\": 1} 3. \\"Potion\\" is added to the inventory. Current inventory: {\\"Sword\\": 1, \\"Shield\\": 1, \\"Potion\\": 1} 4. \\"Shield\\" already exists in the inventory, so its count is increased by one. Current inventory: {\\"Sword\\": 1, \\"Shield\\": 2, \\"Potion\\": 1} 5. \\"Axe\\" cannot be added because the inventory already holds `k` unique items.","solution":"from typing import List, Tuple, Dict def update_inventory(k: int, actions: List[Tuple[str, str]]) -> Dict[str, int]: Update the inventory based on the given actions. Parameters: k (int): The maximum number of unique items the inventory can hold. actions (List[Tuple[str, str]]): A list of tuples where each tuple contains an action (\\"ADD\\") and an item name. Returns: Dict[str, int]: The current state of the inventory. inventory = {} for action, item in actions: if action == \\"ADD\\": if item in inventory: inventory[item] += 1 elif len(inventory) < k: inventory[item] = 1 return inventory"},{"question":"Cody is planning a treasure hunt game for his friends. The game is set in a 2D grid of size `n x m`, where each cell can either be empty (denoted by \'.\') or occupied by an obstacle (denoted by \'#\'). Cody will hide a treasure in one of the empty cells. The goal is to find the shortest path from the starting cell (1, 1) (top-left corner) to the treasure cell. Movement is allowed only to adjacent cells (up, down, left, right), and traveling through an obstacle is not possible. Your task is to determine the number of distinct shortest paths to the treasure from the starting cell, or return `-1` if reaching the treasure is impossible. Given the dimensions of the grid `n` and `m`, and the grid itself, along with the coordinates of the treasure cell `(tx, ty)`, find the number of distinct shortest paths from the top-left corner to the treasure cell. In the first line, you are given three integer numbers `n, m, k` — dimensions of the grid and number of special cells (`2 <= n, m <= 1000`, `1 <= k <= 10^6`). Each of the next `n` lines contains a string of `m` characters (`\'.\'` or `\'#\'`). The next line contains two integers `tx` and `ty` — coordinates of the treasure cell (1 <= tx <= n, 1 <= ty <= m). Output a single integer — the number of distinct shortest paths to the treasure. If the treasure is not reachable, output `-1`. Example: Input: ``` 3 3 2 #.# ... .#. 3 3 ``` Output: ``` 2 ``` In this example, the two distinct shortest paths are: (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3) and (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3).","solution":"from collections import deque def shortest_paths_to_treasure(n, m, grid, tx, ty): Function to find the number of distinct shortest paths from the top-left corner (1, 1) to the treasure cell (tx, ty) in a grid of size n x m. Parameters: - n: number of rows in the grid - m: number of columns in the grid - grid: list of strings representing the grid - tx: row index of the treasure cell (1-based) - ty: column index of the treasure cell (1-based) Returns: - The number of distinct shortest paths to the treasure or -1 if unreachable. # Convert (tx, ty) to 0-based indexing tx -= 1 ty -= 1 # Directions for movement (right, left, up, down) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Queue for BFS queue = deque([(0, 0)]) # Distance matrix with initial values set to a large number distance = [[float(\'inf\')] * m for _ in range(n)] distance[0][0] = 0 # Distance from start to start is 0 # Path count matrix to store the number of ways to reach each cell path_count = [[0] * m for _ in range(n)] path_count[0][0] = 1 # There is one way to be at the start while queue: x, y = queue.popleft() for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\': if distance[nx][ny] > distance[x][y] + 1: distance[nx][ny] = distance[x][y] + 1 path_count[nx][ny] = path_count[x][y] queue.append((nx, ny)) elif distance[nx][ny] == distance[x][y] + 1: path_count[nx][ny] += path_count[x][y] if distance[tx][ty] == float(\'inf\'): return -1 else: return path_count[tx][ty]"},{"question":"Write a function that takes a string and an integer k as inputs and returns the number of substrings of length k that are distinct (i.e., they do not repeat within the string). For example, consider the input string \\"abcabc\\" and k = 3: - The substrings of length k are: \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\". - The distinct substrings of length k are: \\"abc\\", \\"bca\\", \\"cab\\". - Therefore, the function would return 3. Function Signature: ```python def count_distinct_substrings(s: str, k: int) -> int: ``` **Input:** - The first line contains a string `s` of length between 1 and 100, consisting of lowercase English letters. - The second line contains an integer `k` (1 ≤ k ≤ length of the string). **Output:** - Return the number of distinct substrings of length `k` present in the string. **Example:** ```plaintext Input: abcabc 3 Output: 3 ``` **Explanation:** - \\"abc\\" occurs twice but is counted only once. - \\"bca\\" and \\"cab\\" each occur once and are counted. - Thus, there are 3 distinct substrings of length 3. Make sure to handle edge cases where the string length is less than `k`. In such scenarios, the function should return 0.","solution":"def count_distinct_substrings(s: str, k: int) -> int: Returns the number of distinct substrings of length k in the string s. # Check if k is greater than the length of the string if k > len(s): return 0 substrings = set() for i in range(len(s) - k + 1): substrings.add(s[i:i+k]) return len(substrings)"},{"question":"You have been given a string ( S ) consisting of lowercase alphabets. The task is to determine the minimum number of characters you need to delete from the string to make it a palindrome. A palindrome is a string that reads the same forwards and backwards. # Input - A single line containing the string ( S ) (( 1 leq |S| leq 5000 )), where ( |S| ) is the length of ( S ). # Output - Print a single integer, the minimum number of deletions required to convert the given string into a palindrome. # Example Input ``` abdecba ``` Output ``` 2 ``` Explanation By deleting \'d\' and \'e\' from the string, we get \\"abcba\\" which is a palindrome. Input ``` racecar ``` Output ``` 0 ``` Explanation The string \\"racecar\\" is already a palindrome, so no deletions are required. # Note - Consider using dynamic programming to solve this problem efficiently for larger values of ( |S| ).","solution":"def min_deletions_to_palindrome(S): Returns the minimum number of deletions required to make the given string a palindrome. n = len(S) # Create a dp table to store the length of longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Fill in the dp table for i in range(n-1, -1, -1): dp[i][i] = 1 for j in range(i+1, n): if S[i] == S[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i+1][j], dp[i][j-1]) # The minimum number of deletions required to make the string a palindrome return n - dp[0][n-1]"},{"question":"Метеорологическая станция записывает температуру воздуха несколько раз в день, составляет последовательность измерений за месяц и выводит их на экран. Тебе дана последовательность из n целых чисел температур. Напиши программу, которая определит длину самой длинной непрерывной возрастающей подпоследовательности. Входные данные Первая строка содержит одно целое число n (1 ≤ n ≤ 100000) – количество измерений. Вторая строка содержит n целых чисел ai (−1000 ≤ ai ≤ 1000) – последовательность температур. Выходные данные Выведи одно целое число – длину самой длинной непрерывной возрастающей подпоследовательности. Пример входные данные: 6 -5 -4 -3 -3 -2 -1 выходные данные: 3","solution":"def longest_increasing_subsequence_length(n, temperatures): Given a sequence of temperatures, determine the length of the longest continuous increasing subsequence. :param n: int - the number of temperature readings :param temperatures: list of int - the sequence of temperature readings :return: int - the length of the longest continuous increasing subsequence if n == 0: return 0 # Initialize variables longest = 1 current_length = 1 # Iterate through the temperature readings for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_length += 1 longest = max(longest, current_length) else: current_length = 1 return longest"},{"question":"You are a renowned cryptographer and have been tasked with creating a new encryption scheme based on prime numbers. Your idea is to use the properties of prime gaps (the difference between consecutive prime numbers) for the encryption scheme. Given two prime numbers p1 and p2 such that p1 < p2, let g(p1, p2) represent the sum of all prime gaps between p1 and p2, inclusive. For instance, if p1 = 3 and p2 = 11, the prime numbers in this range are 3, 5, 7, and 11, and the gaps are (5-3), (7-5), and (11-7), so g(3, 11) = 2 + 2 + 4 = 8. Your task is to write a program that calculates g(p1, p2) for given p1 and p2. The first line of the input contains two space-separated integers p1 and p2 (2 ≤ p1 < p2 ≤ 107), both of which are primes. Print the result of g(p1, p2). Note: You may assume that both p1 and p2 are prime and that there is at least one prime gap in the interval [p1, p2].","solution":"def sieve(n): Returns a list of primes up to n, using the Sieve of Eratosthenes algorithm. is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] def prime_gaps_sum(p1, p2): Returns the sum of all prime gaps between prime numbers p1 and p2, inclusive. primes = sieve(p2) relevant_primes = [p for p in primes if p1 <= p <= p2] prime_gaps = [relevant_primes[i] - relevant_primes[i-1] for i in range(1, len(relevant_primes))] return sum(prime_gaps) # Sample implementation print(prime_gaps_sum(3, 11)) # Should return 8"},{"question":"Alice is a gardener, and she loves arranging flowers in her garden. She has many flower pots placed in a row, and each pot has a certain number of flowers. Every evening, she waters the flowers. This increases the number of flowers in each pot by 1. However, if any pot ends up possessing more flowers than the pot to its right, Alice will prune the excess flowers from the left pot to match the number of flowers in the right pot. These prunings also only happen once each night, after all the watering has been done. Alice wants to know, given the current number of flowers in each pot, how many days it will take for the number of flowers in all the pots to become non-decreasing. Your task is to calculate the number of days required for this to happen. **Input:** The first line contains a single integer n (1 ≤ n ≤ 100,000), the number of flower pots. The second line contains n space-separated integers f1, f2, ..., fn (1 ≤ fi ≤ 1,000,000) — the initial number of flowers in each pot. **Output:** Print the number of days needed for all pots to have non-decreasing numbers of flowers. **Example:** Input: 4 1 2 1 3 Output: 2 Explanation: - After the first day, the number of flowers will be: 2 3 2 4. - After pruning, the number of flowers will be: 2 2 2 4. - After the second day, the number of flowers will be: 3 3 3 5. - After pruning, the number of flowers will be: 3 3 3 3, which is non-decreasing. So, it takes 2 days to achieve this.","solution":"def days_to_non_decreasing(n, flowers): days = 0 while True: days += 1 # Watering: increase all by 1 for i in range(n): flowers[i] += 1 # Pruning from right to left needs_pruning = False for i in range(n - 1): if flowers[i] > flowers[i + 1]: flowers[i] = flowers[i + 1] needs_pruning = True # Check if number of flowers is non-decreasing if not needs_pruning: break return days"},{"question":"In the country of Logoland, there is a special tournament taking place called the Binary Search Championship. Participants from various cities (numbered from 1 to n) must travel to Logopolis (city 0), which is the capital, for the main event. The tournament lasts for k days, and all participants must be present in the city for the entire duration of the event. The country’s transportation system is well-documented, and all travel options are characterized by bus routes that either start from Logopolis or terminate at Logopolis. Given that there\'s no overnight travel, each bus route operates by departing from one city and arriving at another on the same day. Participants cannot engage in tournament activities on the days they travel. Each bus route is defined by four variables: departure day, departure city, arrival city, and cost. No two cities have multiple bus routes between them on the same day. The cost is the fare for that particular route. Your task is to find the minimum possible travel cost required to gather all participants in Logopolis for k consecutive days and return them to their respective home cities afterward. Some participants may choose to stay longer than the k days if it minimizes the overall cost. The cost must be determined based on the given bus route options, and you need to ensure all participants can attend the event and return home efficiently. The first line of input contains three integers n, m, and k (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 10^5, 1 ≤ k ≤ 10^6). The subsequent m lines describe the bus routes with four integers each: di, fi, ti, and ci (1 ≤ di ≤ 10^6, 0 ≤ fi ≤ n, 0 ≤ ti ≤ n, 1 ≤ ci ≤ 10^6, exactly one of fi and ti equals zero), where di is the day of travel, fi is the departure city, ti is the arrival city, and ci is the cost of the bus ticket. Output a single integer that represents the minimum total travel cost to gather all participants in Logopolis for k days and then send them back to their respective cities. If it\'s impossible to achieve this, output \\"-1\\". Example 1: ``` Input: 3 6 5 1 1 0 300 2 2 0 400 3 3 0 500 7 0 1 300 8 0 2 400 9 0 3 500 Output: 2400 ``` Example 2: ``` Input: 2 4 3 1 1 0 200 5 2 0 300 6 0 1 200 10 0 2 300 Output: -1 ``` In the first example, it is possible to gather all participants at Logopolis for the event using bus routes on days 1, 2, 3, 7, 8, and 9. However, in the second example, returning one of the participants turns out to be impossible within the given constraints and routes.","solution":"def find_minimum_travel_cost(n, m, k, bus_routes): from collections import defaultdict import heapq bus_to_logopolis = defaultdict(list) bus_from_logopolis = defaultdict(list) for di, fi, ti, ci in bus_routes: if ti == 0: bus_to_logopolis[fi].append((di, ci)) elif fi == 0: bus_from_logopolis[ti].append((di, ci)) min_arrive_cost = [float(\'inf\')] * (n + 1) min_depart_cost = [float(\'inf\')] * (n + 1) for city in range(1, n + 1): if city in bus_to_logopolis: for di, ci in bus_to_logopolis[city]: if di <= k: min_arrive_cost[city] = min(min_arrive_cost[city], ci) if city in bus_from_logopolis: for di, ci in bus_from_logopolis[city]: if di > k: min_depart_cost[city] = min(min_depart_cost[city], ci) total_arrive_cost = 0 total_depart_cost = 0 for city in range(1, n + 1): if min_arrive_cost[city] == float(\'inf\') or min_depart_cost[city] == float(\'inf\'): return -1 total_arrive_cost += min_arrive_cost[city] total_depart_cost += min_depart_cost[city] return total_arrive_cost + total_depart_cost # Example 1 n = 3 m = 6 k = 5 bus_routes = [ (1, 1, 0, 300), (2, 2, 0, 400), (3, 3, 0, 500), (7, 0, 1, 300), (8, 0, 2, 400), (9, 0, 3, 500), ] print(find_minimum_travel_cost(n, m, k, bus_routes)) # Output: 2400 # Example 2 n = 2 m = 4 k = 3 bus_routes = [ (1, 1, 0, 200), (5, 2, 0, 300), (6, 0, 1, 200), (10, 0, 2, 300), ] print(find_minimum_travel_cost(n, m, k, bus_routes)) # Output: -1"},{"question":"You have a large tree with N vertices numbered from 1 to N and rooted at vertex 1. Each vertex i has a value associated with it, denoted as value[i]. You need to process Q queries on this tree. Each query can be one of the following types: 1. **Update Operation**: Given a vertex v and a new value x, update the value of vertex v to x. 2. **Sum Operation**: Given a vertex v, return the sum of the values of all vertices in the subtree rooted at vertex v. The input format is as follows: - The first line contains two integers, N and Q (1 ≤ N, Q ≤ 100,000), representing the number of vertices and the number of queries, respectively. - The second line contains N integers, value[i] (1 ≤ value[i] ≤ 10^9), describing the initial values of the vertices. - The next N-1 lines each contain two integers u and v (1 ≤ u, v ≤ N), representing an edge between u and v. - The following Q lines describe the queries in the following format: - \\"1 v x\\" for an update operation where v is the vertex to update and x is the new value. - \\"2 v\\" for a sum operation where v is the vertex for which you need to find the sum of values in its subtree. Output the result of each sum operation. Here is a sample input and output for clarification: # Input: ``` 5 6 10 2 3 4 5 1 2 1 3 2 4 2 5 2 1 2 1 1 100 2 1 1 2 200 2 2 ``` # Output: ``` 24 20 312 206 ``` Explanation of the example: 1. The initial tree is: ``` 10 / 2 3 / 4 5 ``` 2. The first sum query asks for the sum of all values in the subtree rooted at vertex 2, which is 2 + 4 + 5 = 11. 3. The second sum query asks for the sum of all values in the subtree rooted at vertex 1, which is 10 + 2 + 3 + 4 + 5 = 24. 4. The first update operation changes the value of vertex 1 to 100, so the new tree is: ``` 100 / 2 3 / 4 5 ``` 5. The third sum query asks for the sum of all values in the subtree rooted at vertex 1, which is 100 + 2 + 3 + 4 + 5 = 114. 6. The second update operation changes the value of vertex 2 to 200, so the new tree is: ``` 100 / 200 3 / 4 5 ``` 7. The fourth sum query asks for the sum of all values in the subtree rooted at vertex 2, which is 200 + 4 + 5 = 209.","solution":"from collections import defaultdict, deque class Tree: def __init__(self, vertices, values): self.vertices = vertices self.values = values self.tree = defaultdict(list) self.subtree_sum_cache = [0] * (vertices + 1) self.parent = [-1] * (vertices + 1) self.build_tree() self.calculate_subtree_sums(1, -1) def add_edge(self, u, v): self.tree[u].append(v) self.tree[v].append(u) def build_tree(self): pass def calculate_subtree_sums(self, node, parent): A DFS-based function to calculate the subtree sums starting from the given node. self.subtree_sum_cache[node] = self.values[node - 1] for neighbor in self.tree[node]: if neighbor == parent: continue self.parent[neighbor] = node self.calculate_subtree_sums(neighbor, node) self.subtree_sum_cache[node] += self.subtree_sum_cache[neighbor] def update_value(self, v, x): diff = x - self.values[v - 1] self.values[v - 1] = x node = v while node != -1: self.subtree_sum_cache[node] += diff node = self.parent[node] def query_subtree_sum(self, v): return self.subtree_sum_cache[v] def process_queries(N, Q, values, edges, queries): tree = Tree(N, values) for u, v in edges: tree.add_edge(u, v) tree.calculate_subtree_sums(1, -1) result = [] for query in queries: if query[0] == 1: _, v, x = query tree.update_value(v, x) elif query[0] == 2: _, v = query result.append(tree.query_subtree_sum(v)) return result"},{"question":"Alex is learning about prime numbers and wants to write a program that lists all the prime numbers up to a given integer m (2 ≤ m ≤ 10^6). A prime number is an integer greater than 1 that has no positive divisors other than 1 and itself. Write a program that takes an integer m and outputs a list of all prime numbers up to and including m. Input: A single integer m (2 ≤ m ≤ 10^6). Output: A list of space-separated prime numbers less than or equal to m. Example: For input m = 10, the output should be: 2 3 5 7 For input m = 20, the output should be: 2 3 5 7 11 13 17 19","solution":"def list_primes_up_to(m): Returns a list of all prime numbers up to and including m using the Sieve of Eratosthenes. if m < 2: return [] sieve = [True] * (m + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers for start in range(2, int(m**0.5) + 1): if sieve[start]: for multiple in range(start*start, m + 1, start): sieve[multiple] = False return [num for num in range(2, m + 1) if sieve[num]]"},{"question":"You are given a tree consisting of n vertices numbered from 1 to n. Each edge of the tree has a corresponding color that can be represented by a non-negative integer. The tree is rooted at vertex 1. For each vertex v, you need to determine the number of unique colors on the path from the root to v. The first line contains a positive integer n (1 leq n leq 100,000) — the number of vertices in the tree. The next n-1 lines describe the edges of the tree. Each line contains three integers u, v, and c (1 leq u, v leq n, 0 leq c leq 10^9), where u and v are the vertices connected by the edge and c is the color of the edge. It is guaranteed that the given edges form a valid tree. Output n integers, where the i-th integer represents the number of unique colors on the path from the root vertex 1 to vertex i. Example: Input: ``` 5 1 2 3 1 3 2 3 4 3 3 5 7 ``` Output: ``` 0 1 1 2 2 ``` In the example, the tree formed is: ``` 1 / 2 3 / 4 5 ``` - The path from 1 to 1 has 0 unique colors. - The path from 1 to 2 has 1 unique color {3}. - The path from 1 to 3 has 1 unique color {2}. - The path from 1 to 4 has 2 unique colors {2, 3}. - The path from 1 to 5 has 2 unique colors {2, 7}.","solution":"def unique_colors(n, edges): from collections import defaultdict, deque # Build the tree as an adjacency list tree = defaultdict(list) for u, v, c in edges: tree[u].append((v, c)) tree[v].append((u, c)) # Result array to store the number of unique colors for each vertex result = [0] * n visited = [False] * (n + 1) def bfs(root): queue = deque([(root, set())]) visited[root] = True while queue: node, colors = queue.popleft() result[node - 1] = len(colors) for neighbor, color in tree[node]: if not visited[neighbor]: visited[neighbor] = True new_colors = colors | {color} queue.append((neighbor, new_colors)) # Start BFS from the root node 1 bfs(1) return result"},{"question":"You are given a sequence of positive integers that represents the ages of a group of people. Each person in the group belongs to either Group A or Group B. You need to partition the ages into two non-empty groups such that the difference between the average age of Group A and Group B is minimized. Your task is to find such a partition. If multiple partitions yield the same minimal average difference, any of them will be acceptable. **Input:** - The first line contains an integer ( n ) ((2 leq n leq 1000)) — the number of people in the group. - The second line contains ( n ) integers ( a_1, a_2, ldots, a_n ) ((1 leq a_i leq 100)), where ( a_i ) is the age of the (i)-th person. **Output:** - Print two lines. The first line contains the ages that belong to Group A, and the second line contains the ages that belong to Group B. **Example:** ``` Input: 5 5 10 15 20 25 Output: 5 15 25 10 20 ``` **Explanation:** There could be multiple valid partitions, but the difference between the average age of Group A and Group B is minimized. **Note:** You do not need to find the exact partition in the example. Your goal is to provide a solution that minimizes the average difference between the two groups. If multiple partitions are possible, any valid one can be printed.","solution":"def minimize_average_difference(n, ages): Given the ages of a group of people, partition them into two groups such that the difference between the average age of the two groups is minimized. total_sum = sum(ages) total_people = len(ages) # Variables to track minimum difference, and the respective groups min_diff = float(\'inf\') best_partition = ([], []) # Helper function to compute the difference between group averages def calculate_difference(groupA, groupB): if not groupA or not groupB: return float(\'inf\') avgA = sum(groupA) / len(groupA) avgB = sum(groupB) / len(groupB) return abs(avgA - avgB) # Recursive function to try all partitions def find_partition(index, groupA, groupB): nonlocal min_diff, best_partition if index == total_people: current_diff = calculate_difference(groupA, groupB) if current_diff < min_diff: min_diff = current_diff best_partition = (list(groupA), list(groupB)) return # Include current index in group A groupA.append(ages[index]) find_partition(index + 1, groupA, groupB) groupA.pop() # Include current index in group B groupB.append(ages[index]) find_partition(index + 1, groupA, groupB) groupB.pop() # Start recursive process find_partition(0, [], []) # Return the best partition found return best_partition # Example usage: n = 5 ages = [5, 10, 15, 20, 25] groupA, groupB = minimize_average_difference(n, ages) print(\\"Group A:\\", groupA) print(\\"Group B:\\", groupB)"},{"question":"You are given an integer array `nums` and an integer `k`. We say that the array has a good subarray if there exists a subarray where the sum of its elements is divisible by `k`. Your task is to determine whether a good subarray exists. A subarray is a contiguous part of the array. Write a function: ```python def has_good_subarray(nums: List[int], k: int) -> bool: ``` # Input: - `nums` is a list of integers. - `k` is an integer. # Output: Return `True` if there exists a good subarray, otherwise return `False`. # Examples: 1. Input: `nums = [2, 4, 3, 6]`, `k = 5` Output: `True` Explanation: The subarray `[2, 4, 3, 6]` has a sum equal to 15 which is divisible by 5. 2. Input: `nums = [1, 2, 3, 4, 5]`, `k = 11` Output: `False` Explanation: There is no subarray whose sum is divisible by 11. # Constraints: - 1 ≤ len(nums) ≤ 20,000 - -10^4 ≤ nums[i] ≤ 10^4 - 1 ≤ k ≤ 10^5","solution":"from typing import List def has_good_subarray(nums: List[int], k: int) -> bool: prefix_sums = {0} current_sum = 0 for num in nums: current_sum += num mod_val = current_sum % k if mod_val in prefix_sums: return True # Add the current mod value to the set prefix_sums.add(mod_val) return False"},{"question":"You have been hired by a company that manages a large streaming service to analyze viewer engagement and retention. To help with this, they want to determine if certain series have grown or declined in popularity over time based on viewing statistics. You are provided with logs of viewer counts for several series over multiple months. Each log entry consists of the series ID, the month number, and the number of viewers. Your task is to identify series that have shown a net increase in viewership from the first month to the last month. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10^6) — the number of series and the number of log entries. Each of the next m lines contains three integers s, t, and v (1 ≤ s ≤ n, 1 ≤ t ≤ 100, 0 ≤ v ≤ 10^6) — the series ID, the month number, and the number of viewers for that series in that month. The month numbers are given sequentially from 1 to the maximum number of months in the log for that series. In the first line, output a single integer p — the number of series with an increase in viewership. In the next line, print p integers in increasing order — the IDs of the series that have an increase in viewership from the first month to the last month. If no series have an increase, print 0. Assume that each series has both a first and last month entry in the logs. Example: Input: 5 10 1 1 100 1 2 150 2 1 200 2 2 180 3 1 100 3 3 120 4 2 50 4 3 200 4 4 220 5 1 150 5 2 150 Output: 3 1 3 4","solution":"def series_with_increasing_viewership(n, m, logs): from collections import defaultdict # Dictionary to store first and last month viewership for each series series_viewership = defaultdict(lambda: {\'first\': None, \'last\': None}) for log in logs: s, t, v = log if series_viewership[s][\'first\'] is None or t == 1: series_viewership[s][\'first\'] = v series_viewership[s][\'last\'] = v # Identifying series with increase in viewership increasing_series = [] for s in range(1, n + 1): if series_viewership[s][\'first\'] < series_viewership[s][\'last\']: increasing_series.append(s) increasing_series.sort() return (len(increasing_series), increasing_series)"},{"question":"You are given an array of integers and you need to find the minimum length of a contiguous subarray of which the sum is at least a given value. A subarray is a contiguous part of an array. You need to implement a function that takes in two inputs: 1. An array of integers. 2. An integer value representing the target sum. The function should return an integer representing the minimum length of the contiguous subarray with a sum at least equal to the given value. If there is no such subarray, return 0. # Function Signature ```python def min_subarray_length(arr: List[int], target: int) -> int: ``` # Input - `arr` (1 ≤ len(arr) ≤ 10^5) : A list of integers where each integer `arr[i]` (1 ≤ arr[i] ≤ 10^4). - `target` (1 ≤ target ≤ 10^9): An integer value representing the required sum of the subarray. # Output - Return an integer denoting the minimum length of a contiguous subarray of which the sum is at least the target sum. - If no such subarray exists, return 0. # Example ```python assert min_subarray_length([2, 3, 1, 2, 4, 3], 7) == 2 assert min_subarray_length([1, 4, 4], 4) == 1 assert min_subarray_length([1, 4, 4], 8) == 2 assert min_subarray_length([1, 1, 1, 1, 1, 1, 1, 1], 11) == 0 ``` # Note - In the first example, the subarray [4, 3] has the minimal length of 2 under the problem constraint. - In the last example, no subarray sums to the target value of 11. Hence, return 0.","solution":"from typing import List def min_subarray_length(arr: List[int], target: int) -> int: n = len(arr) left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += arr[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Kate is organizing a math competition, and she wants to challenge the participants with interesting problems. She has a list of integers and she wants to find a specific subsequence within the list. A subsequence of the list is a sequence that can be derived from the list by deleting some or no elements without changing the order of the remaining elements. For a given integer k, determine the longest subsequence such that the difference between any two consecutive elements in the subsequence is less than or equal to k. If there are multiple longest subsequences, return any one of them. The first line of the input contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) - the number of elements in the list and the maximum allowable difference between consecutive elements. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) - the elements of the list. Output the length of the longest subsequence and the subsequence itself. If there are multiple valid subsequences, you may output any one of them. For example: Input: 6 3 1 2 3 4 5 6 Output: 6 1 2 3 4 5 6 In this example, the entire list is a valid subsequence as the differences between consecutive elements are all 1, which is less than or equal to k. Another example: Input: 6 1 1 3 5 7 9 11 Output: 1 1 Here, no two consecutive elements have a difference of 1 or less, so the longest subsequence consists of any single element.","solution":"def longest_subsequence(n, k, arr): Returns the length of the longest subsequence such that the difference between any two consecutive elements is less than or equal to k, along with the subsequence itself. longest_subseq = [] for num in arr: if not longest_subseq or num - longest_subseq[-1] <= k: longest_subseq.append(num) return len(longest_subseq), longest_subseq"},{"question":"The Smart Bee from CodingCorp is preparing for a marathon coding contest. There are n coding challenges in total, and the Smart Bee has selected k of these challenges for practice. Each challenge i has a specific difficulty level di and a duration ti (in minutes) for completion. The Smart Bee has exactly p minutes available for practice before the contest begins. She wants to practice in such a way to maximize the number of different difficulty levels she practices with, keeping within the total duration of p minutes. Given the number of coding challenges n, the number of challenges she plans to practice k, and the details of each challenge (difficulty level and duration), determine the maximum number of different difficulty levels she can practice within p minutes. Each challenge can only be attempted once. The first input line contains space-separated integers n, k, and p — the number of total coding challenges, the number of challenges she plans to practice, and the total available minutes, respectively. The next n lines contain pairs of space-separated integers di, ti — the difficulty level and the duration (in minutes) of the i-th challenge, respectively. Your task is to output a single integer — the maximum number of different difficulty levels she can practice within p minutes. Input limitations: 1 ≤ n ≤ 50 1 ≤ k ≤ n 1 ≤ p ≤ 10^4 1 ≤ di ≤ 100 1 ≤ ti ≤ 10^3 Example: Input: 5 3 120 1 30 2 40 3 50 2 70 1 60 Output: 3","solution":"def maximize_difficulties(n, k, p, challenges): Determines the maximum number of different difficulty levels that can be practiced within the time limit of p minutes. :param n: Total number of coding challenges. :param k: Number of challenges the Smart Bee plans to practice. :param p: Total available minutes. :param challenges: List of tuples (difficulty, duration) for each challenge. :return: Maximum number of different difficulty levels. # Sort challenges by duration primarily and by difficulty secondarily # This helps to pick up the shortest durations first to maximize the practice challenges = sorted(challenges, key=lambda x: (x[1], x[0])) selected_difficulties = set() total_duration = 0 practice_count = 0 for difficulty, duration in challenges: if practice_count < k and total_duration + duration <= p: total_duration += duration selected_difficulties.add(difficulty) practice_count += 1 return len(selected_difficulties) # Example input # n, k, p = 5, 3, 120 # challenges = [(1, 30), (2, 40), (3, 50), (2, 70), (1, 60)] # print(maximize_difficulties(n, k, p, challenges)) # Expected output: 3"},{"question":"Given a set of tree plantations on a farmland, each tree plantation is represented by a rectangular grid of n × m cells. Each cell either contains a tree (represented by \'T\') or is empty (represented by \'.\'). You are tasked to water the trees in these plantations according to the following rules: 1. You can only water trees in straight horizontal or vertical lines. 2. The water reaches from one tree through to the next, as long as there are no empty cells in between. 3. Each time you water a line of trees, you count it as one watering. Your goal is to find the minimum number of waterings required to water all the trees in the plantation. Input: The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) – the dimensions of the plantation. The next n lines contain m characters each, either \'T\' or \'.\', describing the plantation grid. Output: Output a single integer – the minimum number of waterings required. **Example:** Input: ``` 5 6 ..TT.. ..TT.. ...... T..T.T T..T.T ``` Output: ``` 4 ``` Explanation: In the given plantation: - The first and second rows can each be watered in one watering horizontally. - The third row has no trees. - The fourth and fifth rows each require one watering horizontally or one vertically for each line of adjacent trees. In total, this results in 4 separate waterings.","solution":"def minimum_waterings(n, m, plantation): def mark_visited(x, y): queue = [(x, y)] while queue: cx, cy = queue.pop(0) for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and plantation[nx][ny] == \'T\': visited[nx][ny] = True queue.append((nx, ny)) visited = [[False] * m for _ in range(n)] waterings = 0 for i in range(n): for j in range(m): if plantation[i][j] == \'T\' and not visited[i][j]: waterings += 1 visited[i][j] = True mark_visited(i, j) return waterings"},{"question":"You are given an array of integers, `arr`, which is not necessarily sorted. Your task is to determine the array\'s median without using any built-in sorting functions. The median of a list of numbers is the middle number when the numbers are sorted. If the list has an even number of elements, the median is the average of the two middle numbers. To achieve this, you can use any algorithm of your choice, but you must implement the sorting logic yourself. Your solution should efficiently handle large datasets, meaning you should strive for an algorithmic complexity that performs well on large inputs. Input: - The first line contains a single integer `n` (1 leq n leq 10^6), the length of the array. - The second line contains `n` integers separated by spaces representing the elements of the array, `arr[i]` (-10^9 leq arr[i] leq 10^9). Output: - Output the median of the array. If `n` is even, output the average of the two middle elements as a floating-point number rounded to one decimal place. If `n` is odd, output the single middle element. Example: ``` Input: 5 3 5 1 2 4 Output: 3 ``` ``` Input: 4 7 12 3 5 Output: 6.0 ``` Note: - The median for a list of an odd number of elements is the element that sorts to the `(n//2)`-th index. - The median for a list of an even number of elements is the average of the elements that sort to the `((n//2)-1)`-th and `(n//2)`-th indices.","solution":"def find_median(n, arr): Returns the median of the array. If `n` is odd, the median is the middle element. If `n` is even, the median is the average of the two middle elements. def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) sorted_arr = quicksort(arr) if n % 2 == 1: return float(sorted_arr[n // 2]) else: return round((sorted_arr[n // 2 - 1] + sorted_arr[n // 2]) / 2.0, 1)"},{"question":"You are given a binary tree with `n` nodes. Each node has a value associated with it. You need to traverse the tree and compute a specific value for each level of nodes from root to leaves. The value for each level is computed using the values at the nodes of that level as follows: - Level 0: sum of node values at level 0 - Level 1: product of node values at level 1 - Level 2: sum of node values at level 2 - Level 3: product of node values at level 3 - and so on... In other words, for even levels compute the sum of values at the nodes, and for odd levels compute the product of values at the nodes. If a product computation at an odd level results in 0 (since any value times 0 is 0), use 1 instead. The binary tree is provided as follows: The first line contains an integer `n` — the number of nodes in the binary tree (`1 ≤ n ≤ 1000`). Next line contains `n` integers representing the values of each node (values are given in level-order traversal) (`|value_i| ≤ 10^5`). Following `n` lines, each contains two numbers representing the left and right child indices for each node (using 0-based indexing, -1 if the child does not exist). Compute and return a list of computed values for each level. Input format: ``` n value_1 value_2 ... value_n left_1 right_1 left_2 right_2 ... left_n right_n ``` Output format: A single line containing the list of values for each level from root to leaves. Example Input: ``` 7 2 3 5 1 2 2 3 1 2 3 4 5 6 -1 -1 -1 -1 -1 -1 -1 -1 ``` Example Output: ``` [2, 15, 8] ``` Explanation: ``` Level 0: sum of (2) => 2 Level 1: product of (3, 5) => 15 Level 2: sum of (1, 2, 2, 3) => 8 ```","solution":"from collections import deque def calculate_level_values(n, node_values, children): if n == 0: return [] levels = [] queue = deque([(0, 0)]) # (node index, level) current_level = 0 current_sum = 0 if current_level % 2 == 0 else 1 while queue: node_index, level = queue.popleft() # If we move to a new level, update the results and reset aggregation if level != current_level: levels.append(current_sum) current_level = level current_sum = 0 if current_level % 2 == 0 else 1 if current_level % 2 == 0: current_sum += node_values[node_index] else: current_sum *= node_values[node_index] left_child, right_child = children[node_index] if left_child != -1: queue.append((left_child, level + 1)) if right_child != -1: queue.append((right_child, level + 1)) levels.append(current_sum) # Append last level\'s value return levels"},{"question":"Design a function that takes an integer array representing histogram heights and finds the largest rectangle that can be formed within the histogram. The height of each rectangle is determined by the value of the array elements, and the width is determined by the positions of elements. The function should return the area of the largest possible rectangle. You may assume that the input array has at least one element and its length does not exceed 100,000. Your code should have the following signature: ```python def largestRectangleArea(heights: List[int]) -> int: ``` **Example:** ```python print(largestRectangleArea([2,1,5,6,2,3])) # should return 10 print(largestRectangleArea([2,4])) # should return 4 ``` **Constraints:** - The input array will contain at least one element. - The input array will contain no more than 100,000 elements. - The input array elements will be non-negative integers.","solution":"from typing import List def largestRectangleArea(heights: List[int]) -> int: Returns the area of the largest rectangle in the histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an array of integers, and your task is to transform it such that every non-zero element is moved to the left, while preserving the order of non-zero elements. Additionally, all zeroes should be moved to the right end of the array. You should perform this operation in-place, i.e., using only constant extra space. For example, given the array [0, 1, 0, 3, 12], after applying the transformation, the array should become [1, 3, 12, 0, 0]. Your function should take one parameter: - `arr` (a list of integers) Implementation constraints: - The length of `arr` will be at most `10^5`. - The elements of `arr` will be between `-10^9` and `10^9`. Example: ```python def move_zeroes(arr): # Your code here # Example usage: arr = [0, 1, 0, 3, 12] move_zeroes(arr) print(arr) # Output should be [1, 3, 12, 0, 0] ``` Your implementation should aim for O(n) time complexity and O(1) additional space complexity.","solution":"def move_zeroes(arr): Function to move all zeros in the array to the end while maintaining the order of non-zero elements. Parameters: arr (list): List of integers Returns: None n = len(arr) j = 0 # Index to place the next non-zero element for i in range(n): if arr[i] != 0: arr[j] = arr[i] j += 1 for i in range(j, n): arr[i] = 0"},{"question":"Peter is participating in a programming contest and needs to write a program to solve a specific task. He is given several segments on a number line. Each segment is defined by two integers: the start and end positions. Two segments are considered overlapping if they share at least one point. Peter needs to find the maximum number of overlapping segments at any point on the number line. You are given an integer n (1 ≤ n ≤ 100,000) representing the number of segments. The next n lines each contain two integers ai and bi (0 ≤ ai ≤ bi ≤ 1,000,000), which are the start and end positions of the i-th segment. Write a program to determine the maximum number of overlapping segments. Input: - The first line contains the integer n. - The next n lines each contain two integers ai and bi, representing the start and end positions of the i-th segment. Output: - Print a single integer representing the maximum number of overlapping segments at any point on the number line. Example: ``` Input: 3 1 5 2 6 4 8 Output: 3 ``` In this example, the first segment is from 1 to 5, the second is from 2 to 6, and the third is from 4 to 8. The maximum number of overlapping segments occurs between positions 4 and 5, where all three segments overlap. Thus, the output is 3.","solution":"def max_overlapping_segments(n, segments): events = [] for start, end in segments: events.append((start, 1)) # Segment starts events.append((end, -1)) # Segment ends events.sort() max_overlaps = 0 current_overlaps = 0 for event in events: current_overlaps += event[1] if current_overlaps > max_overlaps: max_overlaps = current_overlaps return max_overlaps"},{"question":"Given an array of integers, you need to modify the array so that it becomes a non-decreasing sequence. In one operation, you can select any two adjacent elements and increase or decrease one of them by 1. Your task is to determine the minimum number of operations required to make the array non-decreasing. # Input The first line of the input contains a single integer n (1 leq n leq 10^5) - the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) - the elements of the array. # Output Output a single integer - the minimum number of operations required to make the array non-decreasing. # Example Input ``` 5 3 1 2 1 5 ``` Output ``` 5 ``` In this example, you need to perform 5 operations to make the array non-decreasing: 1. Increase the second element (1 to 2). 2. Increase the third element (2 to 3). 3. Increase the fourth element (1 to 4). 4. Increase the fourth element again (4 to 5). 5. Increase the third element again (3 to 4). Thus, the minimum number of operations required is 5.","solution":"def min_operations_to_non_decreasing(arr): Returns the minimum number of operations required to make the array non-decreasing. n = len(arr) if n <= 1: return 0 operations = 0 for i in range(1, n): if arr[i] < arr[i - 1]: operations += (arr[i - 1] - arr[i]) arr[i] = arr[i - 1] return operations"},{"question":"You are given a circular array of n positive integers. A circular array means that the end of the array is connected back to the start of the array. You can think of this as a cycle. Your task is to determine the maximum subarray sum in this circular array, where a subarray can be a contiguous segment or it can wrap around the end of the array back to the start. For example, consider a circular array [1, -2, 3, -1, 2]. The possible subarrays include, but are not limited to: - Contiguous: [1], [1, -2], [3], [3, -1, 2], etc. - Wrapping: [2, 1], [2, 1, -2], etc. Write a function called `max_circular_subarray_sum` that takes an array of integers as input and returns the maximum sum of any subarray (including circular subarrays) in the array. **Function Signature:** `def max_circular_subarray_sum(arr: List[int]) -> int:` **Input:** - A single list `arr` of integers where 1 ≤ len(arr) ≤ 10^5 and -10^4 ≤ arr[i] ≤ 10^4. **Output:** - Return a single integer, the maximum subarray sum for the given circular array. **Example:** 1. For `arr = [1, -2, 3, -1, 2]` - The maximum subarray sum is 5, which is achieved by the subarray [3, -1, 2, 1]. 2. For `arr = [-1, -2, -3, -4]` - The maximum subarray sum is -1, which is achieved by the subarray [-1]. **Note:** - The maximum subarray sum for a non-circular array can be found using Kadane\'s Algorithm. - For a circular array, you need to consider both the maximum subarray sum that does not wrap and the maximum subarray sum that does wrap around.","solution":"from typing import List def max_circular_subarray_sum(arr: List[int]) -> int: def kadane(arr): current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_kadane = kadane(arr) total_sum = sum(arr) max_wrap = total_sum + kadane([-x for x in arr]) # If all elements are negative, max_wrap would be zero; in this case we return max_kadane. if max_wrap == 0: return max_kadane return max(max_kadane, max_wrap)"},{"question":"Problem: Sudoku Validator You are given a partially filled 9x9 Sudoku board represented as a 2D list. Write a function `isValidSudoku(board)` to determine if the current state of the board is valid. The board is considered valid if: 1. Each row contains the digits 1-9 without repetition. 2. Each column contains the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. The Sudoku board can contain the digits 1-9 and the character \'.\', which represents empty cells. # Input A 2D list `board` representing the 9x9 Sudoku grid. Each element `board[i][j]` is a character that is either a digit \'1\'-\'9\' or \'.\'. # Output Return `\\"YES\\"` (without quotes) if the current state of the board is valid. Otherwise, return `\\"NO\\"` (without quotes). # Example ```python # Example 1 boardprint(isValidSudoku(board)) # Output: YES # Example 2 boardprint(isValidSudoku(board)) # Output: NO ``` # Constraints - The board is a 9x9 grid. - Each element in the board is a character from the set {\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\',\'.\'}.","solution":"def isValidSudoku(board): Function to validate if a given 9x9 Sudoku board is valid. def isValidBlock(block): seen = set() for value in block: if value != \'.\' and value in seen: return False seen.add(value) return True # Check rows for row in board: if not isValidBlock(row): return \\"NO\\" # Check columns for col in range(9): if not isValidBlock([board[row][col] for row in range(9)]): return \\"NO\\" # Check 3x3 sub-boxes for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): block = [ board[r][c] for r in range(box_row, box_row + 3) for c in range(box_col, box_col + 3) ] if not isValidBlock(block): return \\"NO\\" return \\"YES\\""},{"question":"In a dense forest, there is a network of n clearing nodes connected by m bidirectional paths. Each path between the clearing nodes represents a direct route that can be taken. Our task is to determine if there exists a unique path between any two distinct clearing nodes in the forest. The input consists of two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 2000), where n represents the number of clearing nodes and m represents the number of bidirectional paths. This is followed by m pairs of integers u and v (1 ≤ u, v ≤ n), indicating that there is a direct path between node u and node v. Your task is to determine whether exactly one unique path exists between any pair of nodes in the network, which would mean the network forms a tree. Print \\"YES\\" if there is exactly one unique path between any two nodes, otherwise print \\"NO\\". In the first sample, the network forms a tree, hence the output is \\"YES\\". In the second sample, there are multiple connections or no connections that violate the unique path criterion, hence the output is \\"NO\\".","solution":"def is_tree(n, m, edges): if n - 1 != m: return \\"NO\\" from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) bfs(1) return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"You are given a maze represented as a grid of dimensions h times w made up of only two possible characters: \'.\' (denoting an empty space) and \'#\' (denoting a wall). You need to determine the minimum number of steps required to reach the bottom-right cell (row h, column w) from the top-left cell (row 1, column 1) if you start from the top-left corner. In each step, you can move to an adjacent cell (left, right, up or down) that is within the boundaries of the maze and not a wall. If it is not possible to reach the bottom-right corner, return -1. # Input format: - The first line contains two integers h and w (1 leq h, w leq 100), the height and width of the maze. - The following h lines each contain w characters, either \'.\' or \'#\', representing the maze. # Output format: Output a single integer representing the minimum number of steps required to reach the bottom-right corner, or -1 if it is not possible. # Example **Input:** ``` 5 5 ..... .#.#. .#.#. ..... ..... ``` **Output:** ``` 8 ``` **Explanation:** Starting from the top-left corner, one possible path to the bottom-right corner in 8 steps could be: (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3) -> (4,3) -> (5,3) -> (5,4) -> (5,5).","solution":"from collections import deque def min_steps_maze(h, w, maze): Finds the minimum number of steps required to reach the bottom-right corner from the top-left corner of the maze represented by a grid. if maze[0][0] == \'#\' or maze[h-1][w-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, step_count) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == h-1 and y == w-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < h and 0 <= ny < w and maze[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given a sequence of integers representing the heights of students standing in a line. The students wish to rearrange themselves so that no two adjacent students have a height difference greater than d. Your task is to determine the minimum number of swaps needed to achieve this arrangement. If it is not possible to rearrange the students to meet the condition, return -1. Input - The first line contains two integers n and d (1 ≤ n ≤ 1000, 1 ≤ d ≤ 109), where n is the number of students and d is the maximum allowable height difference between any two adjacent students. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 109), where hi is the height of the i-th student in the line. Output - Output a single integer representing the minimum number of swaps needed to achieve the desired arrangement, or -1 if it is not possible. Example Input: 5 3 4 8 5 1 7 Output: 2 Explanation: One of the possible ways to arrange the students is [4, 5, 7, 8, 1], requiring two swaps: swap 8 with 5, and then swap 8 with 7. Any arrangement that meets the conditions and needs fewer or equal swaps is suitable.","solution":"def minimum_swaps_to_achieve_condition(n, d, heights): Returns the minimum number of swaps needed to rearrange the students so that no two adjacent students have a height difference greater than d. If it\'s not possible, return -1. def is_valid(arr, d): for i in range(1, len(arr)): if abs(arr[i] - arr[i-1]) > d: return False return True from queue import PriorityQueue pq = PriorityQueue() pq.put((0, heights)) # (number of swaps, current heights arrangement) visited = set() visited.add(tuple(heights)) while not pq.empty(): swaps, current = pq.get() if is_valid(current, d): return swaps for i in range(n): for j in range(i+1, n): new_arr = current[:] new_arr[i], new_arr[j] = new_arr[j], new_arr[i] new_tuple = tuple(new_arr) if new_tuple not in visited: visited.add(new_tuple) pq.put((swaps + 1, new_arr)) return -1"},{"question":"You are given a sequence of numbers representing the heights of students standing in a line. The goal is to rearrange the students in such a way that as many students as possible have both neighbors taller than themselves (i.e., the student is surrounded by taller students on both sides). The first and the last student in the line cannot be considered as the student surrounded by taller neighbors. Write a program to determine the maximum number of students that can be surrounded by taller neighbors and provide the heights of the students in the optimal order. # Input - The first line contains a single integer n (3 le n le 10^5) — the number of students. - The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the students. # Output - The first line should contain the maximum number of students that can be surrounded by taller neighbors. - The second line should contain the heights of the students in the optimal order. # Example Input ``` 6 1 2 3 4 5 6 ``` Output ``` 2 1 3 2 5 4 6 ``` Explanation In the optimal arrangement \\"1 3 2 5 4 6\\", students with heights 2 and 4 are surrounded by taller students. Your task is to write a function or a complete program that accomplishes this. Note that there may be multiple correct answers; you only need to provide one solution.","solution":"def max_students_surrounded(n, heights): Given a number of students and their heights, find the optimal arrangement where the maximum number of students are surrounded by taller neighbors. :param n: Number of students :param heights: List of students\' heights. :return: A tuple containing the maximum number of students with taller neighbors and the optimal heights arrangement. heights.sort() result = [] # Interleave the heights as small, large, small, large, ... for i in range(n): if i % 2 == 0: result.append(heights[i // 2]) else: result.append(heights[n - (i // 2 + 1)]) max_surrounded = (n - 1) // 2 return max_surrounded, result"},{"question":"Olivia is an architect who likes building symmetrical structures. She has been given a special task to design a series of decorative columns made up of LEGO bricks. Each column is made by stacking LEGO bricks of various colors on top of each other. A column is considered symmetrical if the sequence of colors from top to bottom is the same as the sequence of colors from bottom to top. For example, a column with colors \\"red, green, blue, green, red\\" is symmetrical. Olivia has a collection of LEGO bricks in different colors, but she needs to determine if a given sequence of colors can be rearranged to form a symmetric column. Write a function that determines if it\'s possible to rearrange the given sequence of colors into a symmetrical column. Return `True` if it\'s possible, and `False` otherwise. # Input - A single string `s` (1 ≤ |s| ≤ 100,000), consisting of lowercase English letters representing the sequence of colors of the LEGO bricks. # Output - A single boolean value: `True` if the sequence can be rearranged to form a symmetrical column, otherwise `False`. # Examples ```python def can_form_symmetric_column(s: str) -> bool: # Your code here # Example 1 print(can_form_symmetric_column(\\"aabbcc\\")) # Output: True # Example 2 print(can_form_symmetric_column(\\"abcabc\\")) # Output: True # Example 3 print(can_form_symmetric_column(\\"aab\\")) # Output: True # Example 4 print(can_form_symmetric_column(\\"abc\\")) # Output: False ``` # Explanation - In the first example, the sequence \\"aabbcc\\" can be rearranged to \\"abcba\\", which is symmetrical. - In the second example, the sequence \\"abcabc\\" can be rearranged to \\"abccba\\", which is symmetrical. - In the third example, the sequence \\"aab\\" can be rearranged to \\"aba\\", which is symmetrical. - In the fourth example, the sequence \\"abc\\" cannot be rearranged to form a symmetrical sequence.","solution":"from collections import Counter def can_form_symmetric_column(s: str) -> bool: Determines if the sequence of colors can be rearranged to form a symmetrical column. A sequence can be rearranged to form a symmetrical column if and only if at most one character has an odd frequency. That\'s because one odd frequency character can sit in the middle of the palindrome, while all even frequency characters can symmetrically surround it. :param s: A string consisting of lowercase English letters representing the sequence of colors :return: A boolean value indicating whether the sequence can be rearranged to form a symmetrical column freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) # It can be symmetrical if there is only one or zero characters with an odd count return odd_count <= 1"},{"question":"John is an avid gardener who loves planting different types of trees in his garden. His garden is represented by a grid of size m x n. Each cell in the grid corresponds to a square plot of land. John wants to plant trees in such a way that no two trees are adjacent to each other, either vertically, horizontally, or diagonally. Given the dimensions of the garden grid, your task is to determine the maximum number of trees that John can plant while ensuring that no two trees are adjacent. The first line of input contains two integers m and n (1 ≤ m, n ≤ 2000) — the dimensions of the garden grid. Output a single integer — the maximum number of trees that John can plant under the given constraints. # Example Input: 3 3 Output: 4 # Explanation One possible configuration in a 3x3 grid is: ``` T . T . . . T . T ``` where \'T\' represents a tree and \'.\' represents an empty plot.","solution":"def max_trees(m, n): Calculate the maximum number of trees that can be planted in an m x n grid such that no two trees are adjacent vertically, horizontally, or diagonally. :param m: rows of the grid :param n: columns of the grid :return: maximum number of trees # A checkerboard pattern guarantees the maximum number of trees if (m * n) % 2 == 0: return (m * n) // 2 else: return (m * n) // 2 + 1"},{"question":"Alicia has a collection of wooden blocks, each with a unique integer written on it. She is trying to build a stable tower by placing the blocks in a specific order. To ensure the stability of the tower, the blocks must be arranged such that the difference between the heights of any two adjacent blocks in the tower does not exceed a given threshold. Help Alicia determine if she can arrange all the blocks to form a stable tower that meets the stability condition. You are given an array of integers representing the heights of the blocks and an integer representing the maximum allowed difference between the heights of adjacent blocks in the tower. Write a function `is_stable_tower` that takes two arguments: - a list of integers `blocks` (1 leq |blocks| leq 1000) representing the heights of the blocks, - an integer `threshold` (0 leq threshold leq 1000) representing the maximum allowed difference between heights of adjacent blocks. The function should return \\"YES\\" if it is possible to arrange the blocks to form a stable tower and \\"NO\\" otherwise. # Input - An integer array `blocks` (length between 1 and 1000) - An integer `threshold` (between 0 and 1000) # Output - A string \\"YES\\" or \\"NO\\" # Example ```python Input 1: blocks = [1, 3, 5, 8] threshold = 3 Output 1: \\"YES\\" Input 2: blocks = [10, 1, 7, 4] threshold = 2 Output 2: \\"NO\\" ``` # Constraints - Blocks can be reordered in any way. - Differences between adjacent block heights are considered in the absolute sense (i.e., absolute value of the difference).","solution":"def is_stable_tower(blocks, threshold): Determine if it is possible to arrange the blocks to form a stable tower such that the difference between the heights of any two adjacent blocks does not exceed the given threshold. :param blocks: List of integers representing heights of blocks. :param threshold: Maximum allowed difference between heights of adjacent blocks. :return: \\"YES\\" if a stable tower can be made, \\"NO\\" otherwise. blocks.sort() # Sort the blocks to arrange them in non-decreasing order for i in range(1, len(blocks)): if abs(blocks[i] - blocks[i-1]) > threshold: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers and a number k that indicates the maximum total number of operations you can perform on the array. In one operation, you can increment or decrement any element of the array by 1. Your goal is to make all elements of the array equal in exactly k operations (if possible). Output \\"Possible\\" if it is achievable to make all array elements equal in exactly k operations, otherwise output \\"Impossible\\". The first line of the input contains two integers n and k (1 le n le 100, 0 le k le 10000) — the number of elements in the array and the exact number of operations required respectively. The second line of the input contains n integers a_i (-1000 le a_i le 1000) — the elements of the array. # Example Input ``` 5 10 1 2 3 4 5 ``` Output ``` Possible ``` Input ``` 3 5 1 2 3 ``` Output ``` Impossible ``` # Note In the first example, it is possible to make all elements equal to 3 in exactly 10 operations: 1 becomes 3 in 2 operations (increment by 2). 2 becomes 3 in 1 operation (increment by 1). 4 becomes 3 in 1 operation (decrement by 1). 5 becomes 3 in 2 operations (decrement by 2). Total operations = 2 + 1 + 1 + 2 + 2 + 2 = 10. In the second example, it is impossible to make all elements equal in exactly 5 operations.","solution":"def can_make_elements_equal(n, k, arr): Determines if it is possible to make all elements of the array equal in exactly k operations. Parameters: n (int): The number of elements in the array. k (int): The exact number of operations required. arr (list of int): The list of elements in the array. Returns: str: \\"Possible\\" if it is achievable to make all array elements equal in exactly k operations, otherwise \\"Impossible\\". max_element = max(arr) min_element = min(arr) total_diff = sum(abs(a - min_element) for a in arr) if k >= total_diff and (k - total_diff) % n == 0: return \\"Possible\\" return \\"Impossible\\""},{"question":"In a hypothetical space exploration game, players interact with a grid-based universe where each cell represents a unit of space, and can potentially contain resources, such as rare minerals. The grid extends infinitely in all directions. Each player can select a cell as their mining base, and over time, they can mine resources from cells that are directly connected to their base cell. The cells directly connected to a given cell include the cell itself, and cells that share at least one common edge with it. Hence, in a 2D Cartesian plane, the base cell (x, y) is connected to cells (x+1, y), (x-1, y), (x, y+1), and (x, y-1). Given an integer n (0 ≤ n ≤ 10^9), which represents the distance from a base cell in terms of how many steps or edges one can travel, compute the total number of unique cells that can be reached from the base cell, including the base cell itself. The only line of the input contains one integer n. Output one integer — the number of unique cells that can be reached from the base cell within n steps. Example: Input: 1 Output: 5 Explanation: For n = 1, the base cell at (0,0) can reach itself and its four immediate neighbors: (1,0), (-1,0), (0,1), (0,-1). Hence, the total number of unique cells is 5. Input: 2 Output: 13 Explanation: For n = 2, the base cell at (0,0) can reach itself, its immediate neighbors, and the neighbors of those neighbors: (2,0), (-2,0), (0,2), (0,-2), (1,1), (1,-1), (-1,1), (-1,-1). The total number of unique cells is 13.","solution":"def count_unique_cells(n): Calculates the total number of unique cells that can be reached from the base cell within n steps. Parameters: n (int): The distance from the base cell in terms of steps. Returns: int: The total number of unique cells. # Each layer of cells at distance m from the center forms the perimeter of a square # with side length 2m+1. The number of unique cells at distance m is 4m. # Summing these from m = 0 to m = n gives the total number of reachable cells. total_cells = 0 for m in range(n+1): if m == 0: total_cells += 1 else: total_cells += 4 * m return total_cells"},{"question":"You are given two strings, `s1` and `s2`, both consisting of lowercase English letters. You need to check whether `s2` is a substring of a rotated version of `s1`. For example, consider the strings \\"akash\\" and \\"shaka\\". The rotated versions of \\"akash\\" are: \\"akash\\", \\"kasha\\", \\"ashak\\", \\"shaka\\", and \\"hakas\\". Among these, \\"shaka\\" is one of the possible rotations and `s2` is indeed a substring of this. Write a function `is_substring_of_rotated(s1: str, s2: str) -> bool` that returns `True` if `s2` is a substring of any rotated version of `s1` and `False` otherwise. # Input: - `s1` (1 <= len(s1) <= 100): The first string. - `s2` (1 <= len(s2) <= 100): The second string. # Output: - A boolean value: `True` if `s2` can be found as a substring in any rotation of `s1`, otherwise `False`. # Examples: 1. `s1 = \\"akash\\"`, `s2 = \\"shak\\"`, the function should return `True`. 2. `s1 = \\"foobar\\"`, `s2 = \\"barfoo\\"`, the function should return `True`. 3. `s1 = \\"hello\\"`, `s2 = \\"world\\"`, the function should return `False`. 4. `s1 = \\"rotation\\"`, `s2 = \\"tationro\\"`, the function should return `True`. 5. `s1 = \\"abcde\\"`, `s2 = \\"deab\\"`, the function should return `True`. # Note: - The function should handle cases where `s2` might be longer than any rotation of `s1` by returning `False`. - Consider concatenating `s1` with itself to check for rotation efficiently. Remember that any rotation of `s1` will be a substring of `s1 + s1`.","solution":"def is_substring_of_rotated(s1: str, s2: str) -> bool: Check if s2 is a substring of any rotated version of s1. if len(s2) > len(s1): return False combined = s1 + s1 return s2 in combined"},{"question":"You are participating in a treasure hunt game where you solve puzzles to unlock the next clue. The clues are represented as words, and the solutions are words that are anagrams of the given clues. An anagram is a word formed by rearranging the letters of another, such as \\"listen\\" is an anagram of \\"silent\\". When you solve a puzzle, you reveal the next clue, which is a key to continue to the next location in your treasure hunt. You are given a list of clues and their corresponding solutions, and you need to verify if each solution is a correct anagram of its corresponding clue. Write a function `check_anagrams` that will take a list of tuples where each tuple contains a clue and its proposed solution. Your function should return a list of Boolean values indicating whether each solution is a correct anagram of its corresponding clue. # Input: - A list of tuples where each tuple contains two strings `clue` and `solution`. - `clue` is the word given as the clue. - `solution` is the word proposed as the solution. # Output: - A list of Boolean values. If the proposed solution is an anagram of the clue, output `True`; otherwise, output `False`. # Constraints: - The length of the `clue` word and the `solution` word will be between 1 and 100 inclusive. - Both `clue` and `solution` will contain only lowercase English letters. # Example: ```python inputs = [ (\\"listen\\", \\"silent\\"), (\\"triangle\\", \\"integral\\"), (\\"apple\\", \\"pale\\") ] output = check_anagrams(inputs) print(output) # should print: [True, True, False] ```","solution":"def check_anagrams(clues_solutions): Check if the proposed solutions are anagrams of the corresponding clues. :param clues_solutions: List of tuples, each with a clue and its proposed anagram solution :return: List of boolean values indicating whether each proposed solution is an anagram of its corresponding clue results = [] for clue, solution in clues_solutions: results.append(sorted(clue) == sorted(solution)) return results"},{"question":"Juliana is now faced with another challenge involving a sequence of integers. Given an initial sequence of n integers and a series of q queries, she needs to process the following types of operations efficiently: 1. Update the value at a specified position in the sequence. 2. Compute the sum of a range of elements in the sequence. 3. Find the maximum value within a specified range of the sequence. Can you help Juliana handle these queries quickly? The first line contains two integers n and q (1leq n, q leq 10^5) — the number of elements in the sequence and the number of queries. The second line contains n integers representing the initial sequence. Each of the next q lines contains one of the following types of queries: - \\"1 x y\\" (1 leq x leq n, −10^9 leq y leq 10^9) — Update the value at the x-th position in the sequence to y. - \\"2 l r\\" (1 leq l leq r leq n) — Compute the sum of the elements in the sequence from index l to index r (inclusive). - \\"3 l r\\" (1 leq l leq r leq n) — Find the maximum element in the sequence from index l to index r (inclusive). For each query of type 2, output the sum of the specified range in the sequence. For each query of type 3, output the maximum value in the specified range in the sequence.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (4 * self.n) self.max_tree = [float(\'-inf\')] * (4 * self.n) self._build_segment_tree(data, 0, 0, self.n - 1) def _build_segment_tree(self, data, node, start, end): if start == end: self.tree[node] = data[start] self.max_tree[node] = data[start] else: mid = (start + end) // 2 self._build_segment_tree(data, 2 * node + 1, start, mid) self._build_segment_tree(data, 2 * node + 2, mid + 1, end) self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2] self.max_tree[node] = max(self.max_tree[2 * node + 1], self.max_tree[2 * node + 2]) def update(self, idx, value): self._update_util(0, 0, self.n - 1, idx, value) def _update_util(self, node, start, end, idx, value): if start == end: self.tree[node] = value self.max_tree[node] = value else: mid = (start + end) // 2 if start <= idx <= mid: self._update_util(2 * node + 1, start, mid, idx, value) else: self._update_util(2 * node + 2, mid + 1, end, idx, value) self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2] self.max_tree[node] = max(self.max_tree[2 * node + 1], self.max_tree[2 * node + 2]) def sum_range(self, l, r): return self._sum_range_util(0, 0, self.n - 1, l, r) def _sum_range_util(self, node, start, end, l, r): if r < start or l > end: return 0 if l <= start and end <= r: return self.tree[node] mid = (start + end) // 2 left_sum = self._sum_range_util(2 * node + 1, start, mid, l, r) right_sum = self._sum_range_util(2 * node + 2, mid + 1, end, l, r) return left_sum + right_sum def max_range(self, l, r): return self._max_range_util(0, 0, self.n - 1, l, r) def _max_range_util(self, node, start, end, l, r): if r < start or l > end: return float(\'-inf\') if l <= start and end <= r: return self.max_tree[node] mid = (start + end) // 2 left_max = self._max_range_util(2 * node + 1, start, mid, l, r) right_max = self._max_range_util(2 * node + 2, mid + 1, end, l, r) return max(left_max, right_max) def process_queries(n, q, initial_sequence, queries): segment_tree = SegmentTree(initial_sequence) results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": x = int(parts[1]) - 1 y = int(parts[2]) segment_tree.update(x, y) elif parts[0] == \\"2\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 results.append(segment_tree.sum_range(l, r)) elif parts[0] == \\"3\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 results.append(segment_tree.max_range(l, r)) return results"},{"question":"You are given a list of tasks that need to be performed. Each task has a start time, an end time, and a payment received upon its completion. You can only perform one task at a time. Your goal is to maximize the total payment by selecting a subset of non-overlapping tasks. Write a program to find the maximum payment you can achieve. First line contains one integer n (1 ≤ n ≤ 1000) — the number of tasks. Each of the next n lines describes one task and contains three integers si, ei, pi (1 ≤ si < ei ≤ 10^6; 1 ≤ pi ≤ 10^4) — start time, end time, and payment of the task respectively. Print one integer — the maximum payment you can achieve by selecting a subset of non-overlapping tasks.","solution":"def max_payment(tasks): Returns the maximum payment that can be achieved by selecting a subset of non-overlapping tasks. # Sort the tasks based on end times tasks.sort(key=lambda x: x[1]) # dp array to store the maximum payment achievable until each task dp = [0] * len(tasks) dp[0] = tasks[0][2] # The payment for the first task, as it is the only one considered for i in range(1, len(tasks)): # Include the current task incl_payment = tasks[i][2] # Find the last non-conflicting task with the current task for j in range(i - 1, -1, -1): if tasks[j][1] <= tasks[i][0]: incl_payment += dp[j] break # Store the maximum of including or excluding the current task dp[i] = max(dp[i - 1], incl_payment) return dp[-1] # Read input from the user if __name__ == \\"__main__\\": n = int(input().strip()) tasks = [tuple(map(int, input().strip().split())) for _ in range(n)] print(max_payment(tasks))"},{"question":"You are given an integer array a of size n and an integer k. Your task is to find the length of the longest contiguous subarray such that the sum of the subarray is less than or equal to k. For example, if the array is [1, 2, 3, 4, 5] and k = 10, the longest subarray would be [1, 2, 3, 4] with length 4, because the sum of this subarray is 10. Another example is if the array is [2, 2, 2, 7, 7] and k = 14, the longest subarray would be [2, 2, 2, 7] with length 4 because the sum of this subarray is 13. Write a program that, given an integer array a and integer k, finds the length of the longest contiguous subarray whose sum is less than or equal to k. The first line contains one integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains two integers n (1 le n le 10^5) — the size of array a and k (1 le k le 10^9) — the maximum sum allowed. The second line of each test case contains n integers (1 le a[i] le 10^9) which are the elements of the array a. It\'s guaranteed that the sum of n over all test cases does not exceed 10^6. Print t integers — the answers to the t given test cases in the order of input. The answer is the length of the longest contiguous subarray whose sum is less than or equal to k. # Example Input ``` 3 5 10 1 2 3 4 5 5 14 2 2 2 7 7 5 15 1 2 3 4 5 ``` Output ``` 4 4 5 ```","solution":"def longest_subarray_with_sum_leq_k(a, k): n = len(a) max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += a[end] while current_sum > k: current_sum -= a[start] start += 1 max_length = max(max_length, end - start + 1) return max_length def solve(test_cases): results = [] for n, k, a in test_cases: results.append(longest_subarray_with_sum_leq_k(a, k)) return results # Receive input for multiple test cases def parse_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, k = map(int, lines[index].split()) a = list(map(int, lines[index + 1].split())) test_cases.append((n, k, a)) index += 2 return test_cases def main(input_data): test_cases = parse_input(input_data) results = solve(test_cases) return results"},{"question":"You are given a city with n houses connected by n-1 roads in such a way that there is exactly one path between any pair of houses. This means that the road network can be represented as an undirected tree. Each road has an integer length between 1 and 10^6 inclusive, but these lengths are unknown. You have a list of queries from residents, each containing three values: 1. a_j: A house from which the resident starts. 2. b_j: A house where the resident wants to reach. 3. d_j: The minimum possible total distance the resident prefers to travel from house a_j to house b_j. Your task is to determine if there exists a valid set of road lengths that satisfy all given queries. If such a set exists, print any valid set of road lengths. If no valid set exists, print -1. The first line contains an integer n (2 le n le 5000) — the number of houses in the city. The next n-1 lines describe the roads: the i-th line contains two integers x_i and y_i (1 le x_i, y_i le n, x_i neq y_i), representing a road connecting houses x_i and y_i. All roads are bidirectional. The road network is connected. The next line contains a single integer m (1 le m le 5000) — the number of queries. The next m lines contain three integers a_j, b_j, and d_j (1 le a_j, b_j le n; a_j neq b_j; 1 le d_j le 10^6), representing the starting house, the destination house, and the preferred minimum distance for the j-th query. If there is no valid assignment of road lengths, print a single integer -1. Otherwise, print n-1 integers representing the lengths of the roads, where each integer is between 1 and 10^6 inclusive. If there are multiple valid assignments, you can print any one of them.","solution":"def find_road_lengths(n, roads, queries): # Initialize an adjacency list for the tree from collections import defaultdict import heapq graph = defaultdict(list) for x, y in roads: graph[x].append(y) graph[y].append(x) # The minimum possible distances from node a to node b def dijkstra(graph, start, n): distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor in graph[current_node]: distance = current_distance + 1 # all edges have weight 1 if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances # Check all queries to ensure the given minimum distances are valid for a, b, d in queries: distances = dijkstra(graph, a, n) if distances[b] < d: return -1 # If all queries are satisfied, we can just assign arbitrary lengths (all lengths are 1) return [1] * (n - 1)"},{"question":"Given an array of integers, perform a series of operations to make all elements equal. You are allowed to increment any element of the array by 1 in each operation. Determine the minimum number of operations required to make all elements in the array equal. # Input: - The first line contains a single integer n (1 ≤ n ≤ 100), the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100). # Output: - Print a single integer, the minimum number of operations required. # Example: Input: 5 1 2 3 4 5 Output: 10 Explanation: The given array is [1, 2, 3, 4, 5]. To make all elements equal to 5 (the maximum element): - Increment the first element 4 times: 1 -> 5 - Increment the second element 3 times: 2 -> 5 - Increment the third element 2 times: 3 -> 5 - Increment the fourth element 1 time: 4 -> 5 - Increment the fifth element 0 times: 5 -> 5 Total operations = 4 + 3 + 2 + 1 + 0 = 10.","solution":"def min_operations_to_equal_elements(n, arr): Returns the minimum number of operations to make all elements in the array equal by incrementing any element by 1. :param n: integer, the number of elements in the array :param arr: list of integers, the elements of the array :return: integer, the minimum number of operations max_element = max(arr) return sum(max_element - x for x in arr)"},{"question":"The input contains a single integer n (1 ≤ n ≤ 1000). Output a single integer which is the nth Fibonacci number. The result should be calculated using an iterative approach rather than recursion, to ensure it handles the upper limits efficiently.","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 1: return 0 elif n == 2: return 1 a, b = 0, 1 for _ in range(n - 2): a, b = b, a + b return b"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there are two distinct elements in the array that add up to the target integer. Write a function `find_pair` that takes two inputs: an array of integers `arr` and an integer `target`. The function should return a boolean value `true` if there are two distinct elements in the array that add up to the target, and `false` otherwise. **Example:** ```python def find_pair(arr, target): # Your code goes here # Test cases print(find_pair([2, 7, 11, 15], 9)) # Output: True (2 + 7 = 9) print(find_pair([1, 2, 3, 4], 8)) # Output: False print(find_pair([-1, -2, 3, 5], 1)) # Output: True (-1 + 2 = 1) print(find_pair([4, 5, 1, -3], 2)) # Output: True (5 + -3 = 2) ``` **Constraints:** - The array contains unique integers. - Array length `n` such that 1 le n le 10^5 - Target value is any integer -10^9 le target le 10^9 In the first example, there are two elements, 2 and 7, that add up to 9, so the answer is True. In the second example, no two distinct elements add up to 8, so the answer is False.","solution":"def find_pair(arr, target): Determines if there are two distinct elements in the array that add up to the target. Args: arr (list of int): The array of integers. target (int): The target integer. Returns: bool: True if there are two distinct elements that add up to the target, False otherwise. seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Given a list of strings, determine the longest common prefix that is shared among all the strings in the list. The common prefix is the longest starting sequence of characters that appears in each string in the exact same order. Write a function that efficiently finds this common prefix. # Requirements: - Your solution should be optimal for a large number of strings. - Consider edge cases such as an empty list and cases with strings that do not have any common prefix. # Input: The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of strings. The following `n` lines each contain a single string. Each string contains only lowercase English letters and its length does not exceed 1000 characters. # Output: Print a single string — the longest common prefix. # Example: Input: 5 flower flow flight flamingo flop Output: fl","solution":"def longest_common_prefix(strings): Function to find the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strings: return \\"\\" # Sort the strings strings.sort() # Compare characters of the first and the last strings in the sorted order first_string = strings[0] last_string = strings[-1] common_prefix_length = 0 for i in range(min(len(first_string), len(last_string))): if first_string[i] == last_string[i]: common_prefix_length += 1 else: break return first_string[:common_prefix_length]"},{"question":"Alex is playing a treasure hunting game on a grid. The grid is composed of n rows and m columns. Each cell in the grid either contains a treasure or is empty. Alex can start from any cell and can move one cell at a time in four directions: up, down, left, or right. The goal is to calculate the maximum number of treasures Alex can collect if he is allowed to make at most k moves. More formally, you are given an n x m grid (1 ≤ n, m ≤ 100) where each cell of the grid contains a \'T\' if it has a treasure or \'E\' if it is empty. You are also provided an integer k (1 ≤ k ≤ 1000) which represents the maximum number of moves Alex can make. Initially, Alex can start from any cell on the grid. Determine the maximum number of treasures Alex can collect if he is allowed to make at most k moves. # Input - The first line contains three integers n, m, and k — the dimensions of the grid and the maximum number of moves. - Each of the next n lines contains m characters \'T\' or \'E\' representing the grid. # Output - Print the maximum number of treasures Alex can collect with at most k moves. # Example **Input:** ``` 3 3 4 E T E T E T E T E ``` **Output:** ``` 3 ``` **Explanation:** In the example, Alex can start from the center of the grid and collect treasures from all the \'T\' cells around it with exactly 4 moves.","solution":"def max_treasures(n, m, k, grid): Returns the maximum number of treasures that can be collected with at most k moves. def dfs(x, y, moves_left, visited): if moves_left < 0: return 0 treasures = 1 if grid[x][y] == \'T\' else 0 visited.add((x, y)) max_treasures_from_here = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: max_treasures_from_here = max(max_treasures_from_here, dfs(nx, ny, moves_left - 1, visited)) visited.remove((x, y)) return treasures + max_treasures_from_here max_treasures_found = 0 for i in range(n): for j in range(m): max_treasures_found = max(max_treasures_found, dfs(i, j, k, set())) return max_treasures_found"},{"question":"You are given an m x n matrix with non-negative integers, your task is to write a function that returns the minimum path sum from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. The input consists of the following: - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the matrix. - The next m lines contain n integers each, representing the elements of the matrix. Output a single integer — the minimum sum of the path from the top-left corner to the bottom-right corner. For example, in the given matrix: 3 3 1 3 1 1 5 1 4 2 1 The minimum path sum from the top-left corner to the bottom-right corner is 7.","solution":"def min_path_sum(matrix): Computes the minimum path sum from the top-left corner to the bottom-right corner of the matrix. You can only move either down or right at any point in time. :param matrix: List[List[int]] - The matrix of non-negative integers. :return: int - The minimum path sum. m = len(matrix) n = len(matrix[0]) # Initialize the dp array with the same dimensions as matrix dp = [[0] * n for _ in range(m)] # Initialize the top-left corner dp[0][0] = matrix[0][0] # Fill the first row (can only come from the left) for i in range(1, n): dp[0][i] = dp[0][i-1] + matrix[0][i] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[m-1][n-1]"},{"question":"You are given a matrix of size n x m filled with integers. You need to find the largest square sub-matrix (with all sides equal) such that all the elements in this sub-matrix are equal. Output the size of the side of the largest square sub-matrix. Input The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000). Each of the next n lines contains m space-separated integers. Output Output a single integer, the side length of the largest square sub-matrix with equal elements. Example Input: 4 5 1 1 1 0 0 1 1 1 0 0 1 1 1 0 1 0 0 0 1 1 Output: 3 Explanation: The largest square sub-matrix is of size 3 x 3 with all elements equal to 1, located in the top-left corner of the matrix.","solution":"def largest_square_submatrix(matrix): n = len(matrix) m = len(matrix[0]) max_side_length = 0 dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if i == 0 or j == 0: dp[i][j] = 1 else: if matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"You are given an N x M grid, where each cell can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). A robot is currently located in the top-left cell of the grid (1,1) and needs to navigate to the bottom-right cell (N,M). The robot can move up, down, left, or right, but it cannot move into a cell with an obstacle. Your task is to determine whether there is a path for the robot to reach the bottom-right cell. Input: - The first line contains two integers N and M (2 ≤ N, M ≤ 100), the dimensions of the grid. - The next N lines each contain M characters (either \'.\' or \'#\') representing the grid. Output: - Output \\"YES\\" (without quotes) if there is a path from the top-left to the bottom-right cell. Otherwise, output \\"NO\\". Example: Input: 4 5 ..... .#... .#.#. ..... Output: YES","solution":"def is_path_exists(N, M, grid): Determines if there is a path from the top-left to the bottom-right of the grid. Parameters: N (int): Number of rows in the grid. M (int): Number of columns in the grid. grid (list of str): Grid representation with \'.\' for empty cells and \'#\' for obstacles. Returns: str: \\"YES\\" if a path exists, otherwise \\"NO\\". from collections import deque # Directions for up, down, left, right movements directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * M for _ in range(N)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() # If we\'ve reached the bottom-right corner if x == N - 1 and y == M - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"A city wants to optimize its water distribution system. The city is represented by a tree with n nodes (1 through n), where each node represents a water junction and each edge represents a pipeline between two junctions. Each edge has a certain capacity ci (the maximum amount of water it can carry). There is a unique path from any junction to any other junction, and water can only flow along the edges of the tree. The city plans to handle q operations, where each operation is one of two types: 1. Update the capacity of a specific pipeline. 2. Query the maximum amount of water that can be transported between two specific junctions. You need to process q operations efficiently. Input format: - The first line contains two space-separated integers n and q (1 ≤ n ≤ 100,000, 1 ≤ q ≤ 100,000) — the number of junctions and the number of operations. - Each of the next n-1 lines contains three space-separated integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1,000,000) — representing a pipeline with capacity c connecting junctions u and v. - Each of the next q lines contains a description of an operation: - If the operation is of the first type, it is represented by three space-separated integers 1, u, and new_c (1 ≤ u ≤ n, 1 ≤ new_c ≤ 1,000,000), where u is the index of the pipeline to be updated and new_c is the new capacity of the pipeline. - If the operation is of the second type, it is represented by three space-separated integers 2, x, and y (1 ≤ x, y ≤ n), where x and y are two junctions, and you need to find the maximum amount of water that can be transported from junction x to junction y. Output format: For each operation of the second type, output one integer — the maximum amount of water that can be transported from junction x to junction y. Example: Input: 6 4 1 2 4 1 3 3 2 4 5 2 5 1 3 6 2 2 4 6 1 5 6 2 4 6 2 1 6 Output: 5 5 3","solution":"from collections import defaultdict import sys sys.setrecursionlimit(200000) class TreeWaterDistribution: def __init__(self, n): self.n = n self.adj = defaultdict(list) self.depth = [0] * (n + 1) self.parent = [[-1] * 20 for _ in range(n + 1)] self.max_edge = [[0] * 20 for _ in range(n + 1)] self.edge_index = {} def add_edge(self, u, v, c, index): self.adj[u].append((v, c)) self.adj[v].append((u, c)) self.edge_index[(min(u, v), max(u, v))] = index def preprocess(self): self._dfs(1, -1, 0, 0) for j in range(1, 20): for i in range(1, self.n + 1): if self.parent[i][j - 1] != -1: self.parent[i][j] = self.parent[i][j - 1] self.parent[i][j] = self.parent[self.parent[i][j - 1]][j - 1] self.max_edge[i][j] = max(self.max_edge[i][j - 1], self.max_edge[self.parent[i][j - 1]][j - 1]) def _dfs(self, node, par, dep, max_val): self.parent[node][0] = par self.depth[node] = dep self.max_edge[node][0] = max_val for neighbor, cost in self.adj[node]: if neighbor != par: self._dfs(neighbor, node, dep + 1, cost) def find_lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u diff = self.depth[u] - self.depth[v] max_cap = 0 for i in range(20): if (diff >> i) & 1: max_cap = max(max_cap, self.max_edge[u][i]) u = self.parent[u][i] if u == v: return max_cap for i in range(19, -1, -1): if self.parent[u][i] != self.parent[v][i]: max_cap = max(max_cap, self.max_edge[u][i]) max_cap = max(max_cap, self.max_edge[v][i]) u, v = self.parent[u][i], self.parent[v][i] return max(max_cap, self.max_edge[u][0], self.max_edge[v][0]) def update_edge(self, index, new_cap): for key, value in self.edge_index.items(): if value == index: u, v = key break self._find_update(u, v, new_cap) def _find_update(self, u, v, new_cap): if self.parent[u][0] == v: u, v = v, u if self.parent[u][0] == v: for i, (neighbor, _) in enumerate(self.adj[v]): if neighbor == u: self.adj[v][i] = (neighbor, new_cap) break # Read Input Data def water_distribution(n, q, edges, operations): solution = TreeWaterDistribution(n) for index, (u, v, c) in enumerate(edges): solution.add_edge(u, v, c, index) solution.preprocess() results = [] for operation in operations: if operation[0] == 1: _, index, new_cap = operation solution.update_edge(index - 1, new_cap) elif operation[0] == 2: _, x, y = operation results.append(solution.find_lca(x, y)) return results"},{"question":"Polycarp has decided to organize his bookshelf. He wants to arrange his collection of books in a straight line on a single shelf. He has a total of m books, each with a specific height. Polycarp can perform one type of operation: swap any two books that are next to each other on the shelf. Each swap operation has a cost of 1 burle. He wants the bookshelf to look neat, so he decides to arrange the books in non-decreasing order of their heights. Your task is to calculate the minimum number of swap operations required to sort the bookshelf. The first line of the input contains an integer m (1 le m le 10^{5}), the number of books. The second line contains m integers h_1, h_2, ldots, h_m (1 le h_i le 10^{9}), the heights of the books. Output a single integer, the minimum number of swap operations required to sort the books in non-decreasing order of their heights.","solution":"def count_inversions(arr): Count the number of inversions required to sort the array using a modified merge sort. # Helper function to merge two halves and count inversions def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all elements left to i in the left subarray are greater temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count # Helper function to perform merge sort and count inversions def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0]*len(arr) return merge_sort_and_count(arr, temp_arr, 0, len(arr)-1) def min_swaps_to_sort_books(heights): Returns the minimum number of swap operations required to sort the book heights. return count_inversions(heights)"},{"question":"You are given an array of integers representing the levels of different players in a game. Your goal is to group players into as few teams as possible, such that the level difference between the highest and lowest level in any team does not exceed a given threshold. Each player must belong to exactly one team. The first line contains two integers n and k (1 ≤ n ≤ 100000, 0 ≤ k ≤ 1000) — the number of players and the maximum allowed level difference within a team. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000000) — the levels of the players. Output the minimum number of teams needed. # Example Input ``` 7 2 1 2 3 4 5 6 7 ``` Output ``` 3 ``` Explanation One possible solution is to create the following teams: - Team 1: Players with levels [1, 2, 3] - Team 2: Players with levels [4, 5] - Team 3: Players with levels [6, 7] Another possible solution could be: - Team 1: Players with levels [1, 2] - Team 2: Players with levels [3, 4] - Team 3: Players with levels [5, 6, 7] In both cases, the level differences within each team do not exceed the threshold of 2, and the number of teams is minimized to 3.","solution":"def min_teams(n, k, levels): Calculate the minimum number of teams such that the level difference between the highest and lowest level in any team does not exceed k. Parameters: n (int): number of players. k (int): maximum allowed level difference within a team. levels (list of int): levels of the players. Returns: int: The minimum number of teams needed. levels.sort() teams = 0 i = 0 while i < n: j = i while j < n and levels[j] - levels[i] <= k: j += 1 teams += 1 i = j return teams"},{"question":"Given a string `s`, your task is to determine the length of the longest substring that contains all unique characters. In other words, find the longest substring without any repeating characters and return its length. # Input - A single string `s` (1 ≤ |s| ≤ 10^5), where |s| denotes the length of the string. The string consists of English letters, digits, symbols, and spaces. # Output - A single integer, the length of the longest substring with all unique characters. # Examples Example 1 **Input:** ``` abcabcbb ``` **Output:** ``` 3 ``` **Explanation:** The answer is \\"abc\\", with the length of 3. Example 2 **Input:** ``` bbbbb ``` **Output:** ``` 1 ``` **Explanation:** The answer is \\"b\\", with the length of 1. Example 3 **Input:** ``` pwwkew ``` **Output:** ``` 3 ``` **Explanation:** The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. # Note - The solution must handle large input efficiently given the constraint 1 ≤ |s| ≤ 10^5. - Consider using a sliding window technique for an optimal solution.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. char_index = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"You are given a directed acyclic graph (DAG) represented by a list of n vertices and m edges. Your task is to find the longest path from any vertex to any other vertex within the graph. A path in the graph is a sequence of vertices such that there is an edge directed from each vertex in the sequence to the next vertex in the sequence. The input format is as follows: - The first line contains two integers n and m, the number of vertices and the number of edges, respectively. - The following m lines each contain two integers u and v, indicating that there is a directed edge from vertex u to vertex v. The output should be a single integer, the length of the longest path found in the graph. Constraints: - 1 le n le 10^5 - 0 le m le 10^5 - The graph will be a DAG. Example input: ``` 6 6 5 2 5 0 4 0 4 1 2 3 3 1 ``` Example output: ``` 4 ``` Explanation: One of the longest paths in the example graph is 5 -> 2 -> 3 -> 1, which has a length of 4.","solution":"from collections import defaultdict, deque def find_longest_path(n, m, edges): Given a DAG with n vertices and m edges, returns the length of the longest path. Parameters: n (int): the number of vertices. m (int): the number of edges. edges (list of tuples): each tuple (u, v) represents a directed edge from u to v. Returns: int: the length of the longest path. # Create adjacency list and indegree array adj = defaultdict(list) indegree = [0] * n # Populate adjacency list and indegree array for u, v in edges: adj[u].append(v) indegree[v] += 1 # Topological Sort using Kahn\'s algorithm topo_order = [] queue = deque() for i in range(n): if indegree[i] == 0: queue.append(i) while queue: node = queue.popleft() topo_order.append(node) for neighbor in adj[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # Distance array to keep track of the longest path to each node distance = [0] * n for node in topo_order: for neighbor in adj[node]: if distance[neighbor] < distance[node] + 1: distance[neighbor] = distance[node] + 1 return max(distance)"},{"question":"Given a list of integers representing stock prices over consecutive days, implement a function to determine the best day to buy and sell the stock to maximize profit. If no profit can be made, the function should return 0. The function should return the indices for the day to buy and the day to sell. In case of multiple solutions with the same profit, return the pair with the smallest buy day index. **Input:** The first line contains an integer n (2 ≤ n ≤ 10^5) — the number of days. The second line contains n integers p1, p2, …, pn (1 ≤ pi ≤ 10^6) — the stock prices on each day. **Output:** If there is no possible profit, print a single integer 0. Otherwise, print two integers: the 0-based index of the day to buy and the 0-based index of the day to sell. **Example:** Input: ``` 6 7 1 5 3 6 4 ``` Output: ``` 1 4 ``` Explanation: The best day to buy would be day 1 (price = 1) and the best day to sell would be day 4 (price = 6), which gives a profit of 6 - 1 = 5. Input: ``` 5 7 6 4 3 1 ``` Output: ``` 0 ``` Explanation: No profit can be made as the prices are decreasing throughout the given days.","solution":"def best_buy_sell_days(prices): Function to determine the best day to buy and sell the stock to maximize profit. If no profit can be made, returns 0. :param prices: List of integers representing stock prices over consecutive days :return: A tuple contains two integers: day to buy and day to sell, or a single integer 0 if no profit can be made min_price_day = 0 max_profit = 0 buy_day = 0 sell_day = 0 for i in range(1, len(prices)): if prices[i] < prices[min_price_day]: min_price_day = i current_profit = prices[i] - prices[min_price_day] if current_profit > max_profit: max_profit = current_profit buy_day = min_price_day sell_day = i if max_profit == 0: return 0 else: return (buy_day, sell_day)"},{"question":"You are given a positive integer N. Your task is to find two distinct positive integers A and B such that: 1. Both A and B consist of exactly N digits. 2. The absolute difference between A and B is minimized. 3. None of the digits in either A or B is zero. If there exists more than one pair of such numbers that minimize the absolute difference, output any one of them. If there is no valid pair, output -1. # Input The input consists of a single integer N (1 leq N leq 1000). # Output If there is no valid pair, output a single line containing -1. Otherwise, output two lines. The first line should contain the integer A, and the second line should contain the integer B. # Example Input ``` 3 ``` Output ``` 111 112 ``` # Note In the given example, both 111 and 112 are 3-digit numbers, and their digits are non-zero. The absolute difference between these numbers is minimized (|111 - 112| = 1).","solution":"def find_min_diff_numbers(N): Returns two distinct positive integers A and B with exactly N digits such that: 1. A and B are N-digit numbers. 2. The absolute difference between A and B is minimized. 3. None of the digits in either A or B is zero. If there is no valid pair, returns -1. # Special case for N = 1, no valid pair exists that meets the criteria if N == 1: return -1 # For N > 1, we can construct the pair (111...1, 111...2) A = \'1\' * N B = \'1\' * (N - 1) + \'2\' return int(A), int(B)"},{"question":"You are given a compressed version of an array using a stacking technique. The stacked array is represented as pairs of integers where the first integer represents the element and the second integer is the count of that element in sequence. Your task is to decompress this array and return the longest contiguous subsequence of unique elements. The first line contains an integer t – the number of test cases you need to solve. The description of the test cases follows. The first line of each test case contains an integer m (1 le m le 10^5) – the number of pairs in the compressed representation of the array. The next m lines each contain two integers x and k (1 le x le 10^9, 1 le k le 10^5) – the element x, and the count k. The sum of the lengths of the decompressed arrays for all test cases does not exceed 10^6. For each test case, output the length of the longest contiguous subsequence of unique elements in the decompressed array. # Sample Input ``` 2 3 1 2 2 3 1 1 2 3 2 3 3 ``` # Sample Output ``` 2 1 ``` # Explanation In the first test case, the decompressed array is [1, 1, 2, 2, 2, 1]. The longest contiguous subsequence of unique elements is [1, 2] or [2, 1], both of which have length 2. In the second test case, the decompressed array is [3, 3, 3, 3, 3]. The longest contiguous subsequence of unique elements is [3], which has length 1.","solution":"def longest_unique_subsequence(t, test_cases): results = [] for i in range(t): m = test_cases[i][0] pairs = test_cases[i][1] decompressed = [] for x, k in pairs: decompressed.extend([x] * k) longest_unique = 0 current_unique = [] for num in decompressed: if num in current_unique: current_unique = current_unique[current_unique.index(num) + 1:] current_unique.append(num) longest_unique = max(longest_unique, len(current_unique)) results.append(longest_unique) return results"},{"question":"You are given an array of integers. Your task is to perform queries on this array. Each query consists of three parts: 1. A character \'S\' or \'G\' - \'S\' denotes a sum query: find the sum of elements in the subarray from index l to index r (inclusive). - \'G\' denotes a greatest query: find the greatest common divisor (GCD) of the elements in the subarray from index l to index r (inclusive). 2. Two integers l and r: the bounds of the subarray (1-indexed). Write a function `process_queries` that takes the array of integers and a list of queries, and returns a list of answers for each query. # Input - The first line contains an integer n (1 le n le 10^5), the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 le a_i le 10^9), the elements of the array. - The third line contains an integer q (1 le q le 10^5), the number of queries. - The next q lines each contain a character and two integers l and r (1 le l le r le n). # Output - For each query, output the result: an integer for both \'S\' and \'G\' queries. # Example Input ``` 5 3 6 2 4 8 4 S 1 3 G 2 5 S 3 5 G 1 1 ``` Output ``` 11 2 14 3 ``` # Note - For the first query \'S 1 3\', the sum of the subarray from index 1 to index 3 is 3 + 6 + 2 = 11. - For the second query \'G 2 5\', the GCD of the subarray from index 2 to index 5 is gcd(6, 2, 4, 8) = 2. - For the third query \'S 3 5\', the sum of the subarray from index 3 to index 5 is 2 + 4 + 8 = 14. - For the fourth query \'G 1 1\', the GCD of the subarray at index 1 is simply 3, as it only contains one element.","solution":"from math import gcd from functools import reduce def process_queries(n, arr, q, queries): def subarray_sum(l, r): return sum(arr[l-1:r]) def subarray_gcd(l, r): return reduce(gcd, arr[l-1:r]) results = [] for query in queries: op, l, r = query if op == \'S\': results.append(subarray_sum(l, r)) elif op == \'G\': results.append(subarray_gcd(l, r)) return results"},{"question":"You are given an array of integers and an integer K. Your task is to find the number of pairs of elements in the array whose sum is equal to K. If an element is part of multiple pairs, each unique pair should be counted separately. The first line of input contains two integers, N and K (1 ≤ N ≤ 1000, 1 ≤ K ≤ 2000), where N is the number of elements in the array and K is the target sum. The second line contains N integers, representing the elements of the array (1 ≤ element ≤ 1000). In the first line of output, print the number of pairs. In the next lines, print each pair in format \\"a b\\", where \\"a\\" and \\"b\\" are elements of the pair and a < b. If there are multiple pairs, print them in ascending order based on the first element of the pair. If two pairs have the same first element, order them by the second element. Example Input: 4 5 1 2 3 4 Example Output: 2 1 4 2 3","solution":"def find_pairs_with_sum(arr, k): pairs = [] count = 0 seen = set() # Loop through each element in the array for num in arr: target = k - num if target in seen: # Ensure the pair is in increasing order pairs.append((min(num, target), max(num, target))) count += 1 seen.add(num) # Sort the pairs based on the first and second element pairs.sort() # Return the number of pairs and the pairs themselves return count, pairs"},{"question":"You are given a positive integer n. The goal is to find the largest number m such that the sum of the digits of m is equal to the sum of the digits of n, and m is less than or equal to n. Input A single line of input consists of a single integer n (1 ≤ n ≤ 10^10). Output Output a single integer m as described above. Example 1: Input: 123 Output: 123 Example 2: Input: 328 Output: 328 Example 3: Input: 120 Output: 120 Example 4: Input: 1001 Output: 1001","solution":"def largest_number_with_same_digit_sum(n): Finds the largest number less than or equal to n with the same digit sum as n. digit_sum = sum(int(digit) for digit in str(n)) def digit_sum_of_num(num): return sum(int(digit) for digit in str(num)) for m in range(n, 0, -1): if digit_sum_of_num(m) == digit_sum: return m"},{"question":"You are given an array of integers representing the sizes of various files in a server that must be backed up. You want to distribute the files across different backup tapes such that the maximum amount of data on any single tape is minimized. Each tape has a maximum storage capacity and it can hold multiple files as long as the combined size of the files does not exceed the tape\'s capacity. Given the sizes of the files, the maximum capacity of the tapes, and the number of tapes available, determine the minimum possible value of the largest amount of data on any tape, when the files are optimally distributed. The backup process is as follows: 1. Files are sorted in decreasing size order. 2. Each file is allocated to the current tape with the lowest used capacity that can still accommodate the file. 3. This continues until all files are allocated. Output the minimum possible maximum amount of data present on any single tape after all files have been allocated. # Input The first line contains two integers n and k (1 le n le 100000, 1 le k le 100000) — the number of files and the number of tapes. The second line contains n integers s_1, s_2, ldots, s_n (1 le s_i le 100000) — the sizes of the files. The third line contains an integer m (1 le m le 100000) — the maximum capacity of each tape. # Output Print one integer — the minimum possible maximum data amount on a single tape when the files are optimally distributed. # Example Input ``` 5 2 4 8 6 7 3 10 ``` Output ``` 15 ``` # Explanation For the input provided, the optimal way to distribute the files is: - Tape 1: [8, 7] - Tape 2: [6, 4, 3] Both tapes have 15 units of data, hence the minimum possible maximum amount of data on any tape is 15 units.","solution":"def min_max_data_on_tape(n, k, file_sizes, tape_capacity): Returns the minimum possible value of the largest amount of data on any single tape when the files are optimally distributed. :param n: The number of files :param k: The number of tapes :param file_sizes: List of file sizes :param tape_capacity: The maximum capacity of each tape :return: Minimum possible maximum data amount on a single tape file_sizes.sort(reverse=True) tapes = [0] * k for file_size in file_sizes: tapes.sort() tapes[0] += file_size return max(tapes)"},{"question":"You are given a rectangular grid with R rows and C columns. Each cell in the grid contains a non-negative integer representing the height of that part of the terrain. You need to find out the size of the largest square sub-grid where the heights of all cells are the same. The size of a square sub-grid is determined by the number of cells along one side of the square. For example, a 2x2 sub-grid has a size of 2. Your task is to write a program that finds the largest size of a square sub-grid where all cells have the same height. # Input The first line of the input contains two integers R and C (1 ≤ R, C ≤ 500) — the number of rows and columns in the grid. Each of the next R lines contains C integers, each representing the height of a cell in that row (0 ≤ height ≤ 1000). # Output Print a single integer — the size of the largest square sub-grid where all cells have the same height. # Example Input ``` 4 5 1 2 2 3 4 2 2 2 3 3 2 2 2 1 3 2 2 2 1 1 ``` Output ``` 3 ``` In this example, the largest square sub-grid with all the same height is a 3x3 grid with a height of 2 in the top left corner.","solution":"def largest_square_subgrid_same_height(R, C, grid): # Initialize DP table dp = [[0] * C for _ in range(R)] max_size = 0 for i in range(R): for j in range(C): if i == 0 or j == 0: dp[i][j] = 1 # Base case: every cell in the first row and column can only form a 1x1 square else: if grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 if dp[i][j] > max_size: max_size = dp[i][j] return max_size"},{"question":"You are given a string made up of lowercase letters from the English alphabet. You need to find the length of the longest substring that contains exactly two distinct characters. For example, in the string \\"abcbbbbcccbdddadacb\\", the longest substring that contains exactly two distinct characters is \\"bcbbbbcccb\\", which is of length 10. The first line of input contains the string s (1 leq |s| leq 200,000). Output the length of the longest substring with exactly two distinct characters. If no such substring exists, output -1 (quotes for clarity). # Input & Output Examples **Input:** ``` abcbbbbcccbdddadacb ``` **Output:** ``` 10 ``` **Input:** ``` abcabcabc ``` **Output:** ``` 2 ``` **Input:** ``` aaaa ``` **Output:** ``` -1 ``` # Constraints - The length of the string s is at most 200,000. - The string s contains only lowercase English letters.","solution":"def longest_substring_with_two_distinct_characters(s): Finds the length of the longest substring containing exactly two distinct characters. If no such substring exists, returns -1. if len(s) < 2: return -1 max_len = -1 left = 0 char_count = {} for right in range(len(s)): char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > 2: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if len(char_count) == 2: max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given an array of integers, identify the largest subarray (contiguous elements) that contains exactly two distinct numbers and returns its length. The first line of the input contains an integer n (1 le n le 2 times 10^5) – the number of elements in the array. The second line contains n integers a_i (1 le a_i le 10^5) – the elements of the array. Print one integer – the length of the largest subarray with exactly two distinct numbers. For example, for the input: ``` 6 4 1 1 4 4 2 ``` The output should be: ``` 5 ``` Explanation: The largest subarray with exactly two distinct numbers is `[4, 1, 1, 4, 4]` and its length is 5.","solution":"def largest_subarray_with_two_distinct_numbers(arr): Returns the length of the largest subarray containing exactly two distinct numbers. from collections import defaultdict n = len(arr) if n < 2: return n left = 0 right = 0 max_len = 0 freq = defaultdict(int) while right < n: freq[arr[right]] += 1 while len(freq) > 2: freq[arr[left]] -= 1 if freq[arr[left]] == 0: del freq[arr[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"You are given an integer array arr of length n, and q queries about this array. There are two types of queries: 1. **Update:** This query is of the form `1 i x`, and it means you should update the element at index i (1-based index) in the array to x. 2. **Sum:** This query is of the form `2 l r`, and it means you should return the sum of elements from the subarray starting at index l (1-based index) and ending at index r (inclusive). The first line of the input contains two integers n (1 le n le 10^5) and q (1 le q le 10^5), representing the length of the array and the number of queries, respectively. The second line contains n integers, the elements of the array arr (1 le arr[i] le 10^6). The next q lines contain queries of the given two types, one per line. For each query of the second type, output the result on a new line. # Example Input ``` 5 3 1 2 3 4 5 2 1 3 1 2 10 2 2 5 ``` Output ``` 6 22 ``` # Explanation Initially, the array is `[1, 2, 3, 4, 5]`. - The first query asks for the sum of elements from index 1 to index 3 (1-based), which are `[1, 2, 3]`. The sum is `1 + 2 + 3 = 6`. - The second query updates the element at index 2 to `10`. So the array becomes `[1, 10, 3, 4, 5]`. - The third query asks for the sum of elements from index 2 to index 5 (1-based), which are `[10, 3, 4, 5]`. The sum is `10 + 3 + 4 + 5 = 22`.","solution":"def process_queries(n, q, arr, queries): results = [] for query in queries: if query[0] == 1: i, x = query[1], query[2] arr[i - 1] = x elif query[0] == 2: l, r = query[1], query[2] results.append(sum(arr[l - 1:r])) return results"},{"question":"Professor Walter is conducting an experiment involving electric circuits. Each circuit is represented as a row of connected electric components, where each component has a specific resistance. The effectiveness of a circuit depends on its total resistance. Professor Walter has defined the total resistance as the sum of the resistances of each component but considering that the maximum resistance can never exceed a given limit after adding each component. Given a list of resistances of components and a maximum resistance limit, determine the optimal number of components that can be used in the circuit such that their total resistance is as close as possible to the given limit without exceeding it. The first and only line contains: - An integer n (1 le n le 3 cdot 10^5) — the number of components. - A list of n integers representing the resistances of the components r_1, r_2, ldots, r_n (1 le r_i le 10^4). - An integer M (1 le M le 10^9) — the maximum total resistance of the circuit. Output a single integer: the maximum number of components that can be used without the total resistance exceeding M. Example: Input: 5 1 2 3 4 5 10 Output: 4","solution":"def max_components_within_limit(n, resistances, M): Determines the maximum number of components that can be used without exceeding the total resistance limit M. resistances.sort() total_resistance = 0 count = 0 for resistance in resistances: if total_resistance + resistance <= M: total_resistance += resistance count += 1 else: break return count"},{"question":"You are given a string consisting of lowercase letters and a list of queries. Each query consists of a single character, and your task is to count the number of occurrences of this character in the string and return the result. The first line of input contains one integer T (1 ≤ T ≤ 100) — the number of queries. The second line contains the string S (1 ≤ |S| ≤ 100 000) consisting of lowercase letters. Each of the following T lines contains one lowercase letter c (a ≤ c ≤ z) — the character to be queried. For each query, output the number of times the character c appears in the string S. Example: ``` Input: 3 abracadabra a b c Output: 5 2 1 ```","solution":"def count_characters(s, queries): Given a string `s` and a list of `queries`, this function returns a list of the number of times each character in `queries` appears in the string `s`. Parameters: s (str): The input string. queries (list of str): List of single character strings to query. Returns: list of int: A list of counts of each query character in the string `s`. result = [s.count(query) for query in queries] return result"},{"question":"In a distant galaxy, a kingdom with n cities and m roads is being threatened by an invasion. The cities are connected by bidirectional roads, each with a specific travel cost. The king of the kingdom decides to strengthen his defense by placing a certain number of beacons in some of its cities. A beacon in a city will send a warning signal to any other city directly connected to it via a road. The goal is to determine the minimum number of beacons that need to be placed such that every city in the kingdom receives at least one warning signal. The first line contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of cities and the number of roads, respectively. The next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, 0 ≤ w ≤ 1000), describing a bidirectional road between cities u and v with a travel cost of w. Note that there may be multiple roads between the same pair of cities and roads may lead a city to itself. Output the minimum number of beacons required to ensure every city receives at least one warning signal. # Example: **Input:** ``` 4 4 1 2 5 1 3 10 2 3 3 4 1 2 ``` **Output:** ``` 2 ``` Explanation: By placing beacons in city 1 and city 4, all cities receive a warning signal.","solution":"def min_beacons_needed(n, m, roads): from collections import defaultdict if n == 1: # Only one city return 1 # Adjacency list for the graph graph = defaultdict(list) for u, v, w in roads: graph[u].append(v) graph[v].append(u) # BFS/DFS to find the minimum vertex cover in the graph def dfs(v, visited, included): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: included[neighbor] = not included[v] dfs(neighbor, visited, included) visited = [False] * (n + 1) included = [False] * (n + 1) for city in range(1, n + 1): if not visited[city]: included[city] = True dfs(city, visited, included) return sum(included)"},{"question":"Given a grid of dimensions n x m with each cell containing a positive integer, your task is to find the maximum product of integers that forms a k-length path on the grid. The path can begin at any cell and can move in any of the four cardinal directions (up, down, left, right) without revisiting any cell. Furthermore, the path can also change directions during traversal. The path length k will be given and it\'s guaranteed that k is less than or equal to n*m. The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ n*m) — the dimensions of the grid and the length of the path. Each of the next n lines contains m space-separated integers: the j-th number in the i-th line aij (1 ≤ aij ≤ 1000) is the number recorded in the j-th cell of the i-th row of the grid. Print a single integer — the maximum product of integers along any k-length path on the grid. For example, consider the grid and k = 3: 3 3 3 1 2 3 4 5 6 7 8 9 One possible maximum product path with length 3 can be: 9 -> 8 -> 7, with a product of 504.","solution":"def get_maximum_product(n, m, k, grid): def dfs(x, y, k, product): if k == 0: return product max_product = 0 visited.add((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: max_product = max(max_product, dfs(nx, ny, k - 1, product * grid[nx][ny])) visited.remove((x, y)) return max_product max_product = 0 for i in range(n): for j in range(m): visited = set() max_product = max(max_product, dfs(i, j, k - 1, grid[i][j])) return max_product"},{"question":"You are given an array of integers and an integer k. Your task is to find the maximum possible sum of a subsequence of the array such that the subsequence contains exactly k elements. A subsequence of an array is a sequence that can be derived from the given array by deleting some or no elements without changing the order of the remaining elements. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the number of elements in the array and the length of the subsequence to be considered, respectively. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer representing the maximum possible sum of a subsequence of length k. Example: Input: 6 3 5 -2 3 8 1 -6 Output: 16 Explanation: The best subsequence of length 3 that maximizes the sum is [5, 3, 8] and its sum is 16.","solution":"def max_subsequence_sum(arr, k): Finds the maximum possible sum of a subsequence of the array such that the subsequence contains exactly k elements. Args: arr: List[int] - The array of integers. k: int - The number of elements in the subsequence. Returns: int - The maximum possible sum of the subsequence of length k. # Sort the array in descending order sorted_arr = sorted(arr, reverse=True) # Take the first k elements from the sorted array max_sum = sum(sorted_arr[:k]) return max_sum # Example usage n, k = 6, 3 arr = [5, -2, 3, 8, 1, -6] print(max_subsequence_sum(arr, k)) # Output: 16"},{"question":"John is a passionate botanist who loves collecting seeds from various plants. To maintain his collection in an organized manner, he stores the seeds in different containers. Each container has a unique capacity and a certain number of seeds it can hold. Given the total number of containers and the maximum capacity of each container, John wants to know the total additional capacity available across all containers. In other words, he wants to find out how many more seeds can be stored in all the containers combined. The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of containers. The i-th of the next n lines contains two integers ci and si (0 ≤ si ≤ ci ≤ 100) — the maximum capacity of the i-th container and the number of seeds currently in it. Print a single integer — the total additional capacity available in all containers. Example: ``` Input: 3 10 6 15 5 8 8 Output: 14 ``` Explanation: In the first container, 4 more seeds can be added (10 - 6 = 4). In the second container, 10 more seeds can be added (15 - 5 = 10). In the third container, no more seeds can be added (8 - 8 = 0). So, the total additional capacity is 4 + 10 + 0 = 14.","solution":"def total_additional_capacity(n, containers): Returns the total additional capacity available in all containers. Parameters: n (int): Number of containers. containers (list of tuples): Each tuple contains two integers, the maximum capacity and current number of seeds in the container. Returns: int: Total additional capacity. total_additional = 0 for capacity, seeds in containers: total_additional += (capacity - seeds) return total_additional"},{"question":"Write a function `rearrangeString` that rearranges characters in a string such that no two adjacent characters are the same. If such a rearrangement is not possible, return an empty string. Each character in the string contains only lowercase English letters. Your task is to implement this function, according to the following signature: ```python def rearrangeString(s: str) -> str: pass ``` # Input - A single string `s` (1 leq |s| leq 10^4) consisting of lowercase English letters. # Output - Return a rearranged string such that no two adjacent characters are the same. If it is not possible to rearrange the string in such a way, return an empty string. # Examples Example 1: **Input:** ```python s = \\"aab\\" ``` **Output:** ```python \\"aba\\" ``` Example 2: **Input:** ```python s = \\"aaab\\" ``` **Output:** ```python \\"\\" ``` # Notes 1. It\'s guaranteed that the input string `s` only contains lowercase English letters. 2. The output for the function should be valid; i.e., any string where no two adjacent characters are the same, or an empty string if it’s not possible. 3. Different valid solutions are possible for the same input, any valid rearranged string is acceptable. 4. You may use various data structures such as heaps or priority queues to solve the problem efficiently.","solution":"from heapq import heappop, heappush, heapify from collections import Counter def rearrangeString(s: str) -> str: # Count the frequency of each character char_count = Counter(s) # Create a max heap with negative counts for easy max heap conversion max_heap = [(-count, char) for char, count in char_count.items()] heapify(max_heap) # Variables to hold the previous character and its count prev_count, prev_char = 0, \'\' result = [] while max_heap: # Pop the most frequent character count, char = heappop(max_heap) # Append to the result result.append(char) # Since we are pushing back the previous character, we first check if we have a previous character if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) # Update the previous character and count prev_count, prev_char = count + 1, char # Join the result list to form the final string rearranged_string = \'\'.join(result) # If rearranged string length doesn\'t match original string length, it\'s not possible to rearrange if len(rearranged_string) != len(s): return \\"\\" return rearranged_string"},{"question":"The company has decided to implement a new reward system for employees based on their performance scores. Each employee is assigned a score, and the rewards are distributed on the basis of the rankings of these scores. The reward system is such that all employees receive at least one reward, and any employee who has a higher score than an adjacent employee receives more rewards than the adjacent employee. You are given the scores of the employees in a list. Your task is to determine the minimum number of rewards that should be distributed according to the above rules. # Input - The input consists of a single line containing a list of integers. Each integer represents the score of an employee. # Output - The output should be a single integer representing the minimum number of rewards required. # Example Input: `[4, 3, 5, 6, 2]` Output: `9` # Explanation In the given example, the minimum number of rewards can be distributed as: `[1, 1, 2, 3, 1]`, resulting in `1 + 1 + 2 + 3 + 1 = 8` rewards. Each employee receives at least one reward, and every employee with a higher score than an adjacent employee gets more rewards than that adjacent employee. Thus the minimum number of rewards that should be distributed is 8.","solution":"def min_rewards(scores): Given a list of scores, determine the minimum number of rewards to be distributed according to the described rules. n = len(scores) if n == 0: return 0 rewards = [1] * n # First pass: left to right for i in range(1, n): if scores[i] > scores[i - 1]: rewards[i] = rewards[i - 1] + 1 # Second pass: right to left for i in range(n - 2, -1, -1): if scores[i] > scores[i + 1]: rewards[i] = max(rewards[i], rewards[i + 1] + 1) return sum(rewards)"},{"question":"In a distant galaxy, there exists a unique ecosystem of bioluminescent flora where each plant\'s light patterns are crucial for survival. BioluminoTech Corporation is studying these patterns to develop better sustainability systems. They have identified that each plant has a unique illumination frequency, and when observed together in a certain sequence, they create a mesmerizing and optimized light show that can sustain the ecosystem. The bioluminescent plants are represented as strings of characters where each character marks a unique state of illumination. The goal is to find the length of the longest subsequence that appears in two given sequences of plants\' illumination patterns. Given two strings X and Y, your task is to determine the length of the longest common subsequence (LCS) between them. The subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, if X = \\"ABCBDAB\\" and Y = \\"BDCAB\\", the LCS is \\"BCAB\\", and its length is 4. # Input - The first line contains a single integer t (1 ≤ t ≤ 10), the number of test cases. - For each test case, there are two lines. The first line contains the string X (1 ≤ |X| ≤ 100), and the second line contains the string Y (1 ≤ |Y| ≤ 100). # Output For each test case, output the length of the LCS of the given strings X and Y. # Example Input: ``` 3 ABCBDAB BDCAB XMJYAUZ MZJAWXU ABC DEF ``` Output: ``` 4 4 0 ``` # Note In the first example, the LCS is \\"BCAB\\" with a length 4. In the second example, the LCS is \\"MJAU\\" with a length 4. In the third example, there are no common characters, so the length of the LCS is 0. Using this task, BioluminoTech Corporation hopes to understand the synchronization of illumination patterns and implement better resource management for the ecosystem.","solution":"def lcs_length(X, Y): This function returns the length of the longest common subsequence of X and Y. m = len(X) n = len(Y) # Create a table to store lengths of longest common subsequence. L = [[0] * (n + 1) for _ in range(m + 1)] # Build the L[m+1][n+1] in a bottom-up fashion. for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) # L[m][n] contains the length of LCS for X[0...m-1], Y[0...n-1] return L[m][n] def read_input_and_compute_lcs(test_cases_inputs): Reads the input for the test cases and returns the list of results for each test case. results = [] for i in range(len(test_cases_inputs)): X, Y = test_cases_inputs[i] results.append(lcs_length(X, Y)) return results"},{"question":"You are given a city map represented as an N x M grid where certain cells are marked as buildings, and others are open spaces. Your task is to find the shortest path from the top-left corner to the bottom-right corner, moving only through open spaces. You can move up, down, left, or right at each step. - The first line contains two integers N and M (1 ≤ N, M ≤ 1000) representing the dimensions of the grid. - The next N lines contain M characters each, where a \'.\' represents an open space and a \'#\' represents a building. Output the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, output -1. Example Input: ``` 5 5 . . . # . # . # . # . . # . . # . # . . . . . . . ``` Example Output: ``` 8 ```","solution":"from collections import deque def shortest_path_in_grid(N, M, grid): def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == N-1 and y == M-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are working on a file management system that organizes files into directories. Each directory can potentially contain other directories and files, creating a hierarchical structure. Each directory or file has a name and a size attribute (in bytes). Your task is to compute the total size of a given directory, including the size of all files contained within it and within any subdirectories. **Input:** 1. The first line contains an integer n (1 le n le 10^5), the number of directories and files. 2. The following n lines describe each directory or file: - If it is a file, it will be represented by `\\"file <name> <size>\\"` where `<name>` is a string of at most 20 characters and `<size>` is an integer (1 le size le 10^6). - If it is a directory, it will be represented by `\\"dir <name>\\"` where `<name>` is a string of at most 20 characters. 3. The next line contains a single string initial_directory, the name of the directory for which you want to calculate the total size. **Output:** Print a single integer representing the total size of the specified directory, including all its files and the files in every subdirectory recursively. **Example:** **Input** ``` 7 file file1.txt 500 file file2.txt 300 dir docs file docs/report.pdf 2000 dir images file images/photo1.jpg 1500 file images/photo2.png 1000 images ``` **Output** ``` 2500 ``` **Explanation:** In the example above, the directory `images` contains two files: `photo1.jpg` and `photo2.png`, with sizes 1500 bytes and 1000 bytes respectively. Summing these sizes, the total size is 2500 bytes.","solution":"def compute_directory_size(n, items, initial_directory): from collections import defaultdict, deque # Parse input into a tree structure directories = defaultdict(list) files = {} for item in items: tokens = item.split() if tokens[0] == \'file\': _, file_path, file_size = tokens file_size = int(file_size) path_parts = file_path.split(\'/\') file_name = path_parts[-1] if len(path_parts) == 1: # It\'s a file directly under the root files[file_path] = file_size else: dir_path = \'/\'.join(path_parts[:-1]) directories[dir_path].append(file_path) files[file_path] = file_size elif tokens[0] == \'dir\': _, dir_path = tokens # Process this dir under the directories list if \'/\' in dir_path: parent_dir = \'/\'.join(dir_path.split(\'/\')[:-1]) directories[parent_dir].append(dir_path) # Else it is a root-level dir and doesn\'t need specific handling here # Recursive function to compute directory size def get_total_size(directory): total_size = 0 if directory in files: total_size += files[directory] for item in directories[directory]: total_size += get_total_size(item) return total_size return get_total_size(initial_directory)"},{"question":"A company produces a new type of smart vehicle capable of both ground and aerial movement. The vehicle switches its mode of movement based on the shortest path calculation from its current location to the target. On ground mode, it adheres to the typical road network, and in aerial mode, it can move in a straight line between any two points without following the road network. The vehicle starts at the source location in ground mode and you should help it decide when to switch to aerial mode, such that the total travel cost is minimized. The road network is represented as an undirected weighted graph. You are given n vertices and m edges. Each vertex represents a location, and each edge has a positive weight representing the travel cost on that road. Additionally, the coordinates of each location are provided to facilitate the straight-line distance calculation for the aerial mode. Use Euclidean distance for aerial travel. Given the source and target locations, determine the minimum travel cost required for the vehicle to reach its destination, considering it can switch to aerial mode at any point. Input: - The first line contains two integers n (1 ≤ n ≤ 5000) — the number of vertices, and m (1 ≤ m ≤ 20000) — the number of edges. - The next n lines contain two integers x and y — the coordinates of each vertex. - The next m lines contain three integers ui, vi, wi — denoting an edge of weight wi between vertices ui and vi (1 ≤ ui, vi ≤ n; 1 ≤ wi ≤ 10000). - The last line contains two integers s and t — the source and target vertices. Output: - Print the minimum travel cost for the vehicle to reach the destination. Example: Input: 6 7 0 0 2 2 4 4 6 6 8 8 10 10 1 2 3 1 3 10 2 3 2 2 4 8 3 5 2 4 5 3 5 6 1 1 6 Output: 8","solution":"import heapq from math import sqrt def euclidean_distance(x1, y1, x2, y2): return sqrt((x2 - x1)**2 + (y2 - y1)**2) def minimum_travel_cost(n, m, coordinates, edges, s, t): graph = {i: [] for i in range(n)} for u, v, w in edges: graph[u-1].append((v-1, w)) graph[v-1].append((u-1, w)) pq = [(0, s-1)] dist = [float(\'inf\')] * n dist[s-1] = 0 while pq: current_distance, u = heapq.heappop(pq) if current_distance > dist[u]: continue for v, weight in graph[u]: distance = current_distance + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) min_cost = dist[t-1] s_x, s_y = coordinates[s-1] t_x, t_y = coordinates[t-1] for i in range(n): if dist[i] != float(\'inf\'): i_x, i_y = coordinates[i] aerial_cost = dist[i] + euclidean_distance(i_x, i_y, t_x, t_y) min_cost = min(min_cost, aerial_cost) return int(min_cost) def main(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) coordinates = [] for i in range(1, n+1): coordinates.append(tuple(map(int, lines[i].split()))) edges = [] for i in range(n+1, n+m+1): edges.append(tuple(map(int, lines[i].split()))) s, t = map(int, lines[n+m+1].split()) return minimum_travel_cost(n, m, coordinates, edges, s, t)"},{"question":"You are given a permutation of the integers from 1 to n where n is even. You need to group the permutation into pairs such that the sum of the integers in each pair is odd. Write a function `group_into_odd_pairs` that takes a list of integers as input and returns the pairs in any order. If it is not possible to pair the integers in the given way, return an empty list. # Function Signature ```python def group_into_odd_pairs(permutation: List[int]) -> List[Tuple[int, int]]: pass ``` # Input - A list of integers `permutation` where permutation contains all integers from 1 to `n` (inclusive) and `n` is even. # Output - A list of tuples, where each tuple contains two integers and the sum of the integers in each tuple is odd. If there is no such grouping, the function should return an empty list. # Example ```python assert group_into_odd_pairs([1, 2]) == [(1, 2)] assert group_into_odd_pairs([4, 2, 1, 3]) == [(4, 1), (2, 3)] assert group_into_odd_pairs([1, 2, 3, 4, 5, 6]) == [(4, 1), (2, 3), (6, 5)] assert group_into_odd_pairs([2, 4, 6, 8]) == [] ``` # Note - A key observation is that a pair of numbers will only sum up to an odd number if one is even and the other is odd. - The function should identify if there are equal amounts of odd and even numbers in the list to form valid pairs.","solution":"from typing import List, Tuple def group_into_odd_pairs(permutation: List[int]) -> List[Tuple[int, int]]: # Split the permutation into odd and even numbers odd_numbers = [num for num in permutation if num % 2 != 0] even_numbers = [num for num in permutation if num % 2 == 0] # Check if the number of odd and even numbers are the same if len(odd_numbers) != len(even_numbers): return [] # Form the pairs pairs = [] for i in range(len(odd_numbers)): pairs.append((odd_numbers[i], even_numbers[i])) return pairs"},{"question":"Problem Statement: You are given an undirected graph with `n` nodes and `m` edges. Each edge has a weight `w` associated with it. The weight can be either positive or negative. Your task is to find the shortest path from the source node `s` to the destination node `d`, if such a path exists. # Input: - The first line contains three integers `n`, `m`, and `s` (1 ≤ n ≤ 300, 0 ≤ m ≤ 1000, 1 ≤ s ≤ n) which denote the number of nodes, the number of edges, and the source node, respectively. - The next `m` lines each contain three integers `u`, `v`, and `w` (-1000 ≤ w ≤ 1000), representing an edge between node `u` and node `v` with weight `w`. # Output: - Output a single integer, the shortest path from node `s` to node `d`. If there is no such path, output `-1`. # Example: Input: ``` 5 6 1 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 5 4 -2 ``` Output: ``` 5 ``` Explanation: The shortest path from node `1` to node `4` can be through the following path: `1 -> 2 -> 3 -> 5 -> 4`, and the total cost is `2 + 1 + 3 - 2 = 4`. # Note: The graph may contain negative weight cycles. Ensure your solution handles these cycles appropriately by providing a way to detect them.","solution":"from typing import List, Tuple import heapq def shortest_path(n: int, m: int, s: int, d: int, edges: List[Tuple[int, int, int]]) -> int: Finds the shortest path in the graph using Dijkstra\'s algorithm for graphs without negative weights. For graphs with negative weights, the Bellman-Ford algorithm is used. Return the shortest path distance from node s to node d, or -1 if no such path exists. def bellman_ford(n, edges, start, end): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 for _ in range(n - 1): for u, v, w in edges: if dist[u] != float(\'inf\') and dist[u] + w < dist[v]: dist[v] = dist[u] + w for u, v, w in edges: if dist[u] != float(\'inf\') and dist[u] + w < dist[v]: return -1 # Negative weight cycle detected return dist[end] if dist[end] != float(\'inf\') else -1 return bellman_ford(n, edges, s, d)"},{"question":"In a magical land, there are n stones placed in a row, numbered from 1 to n. Each stone has a magical number written on it. A sorcerer can select any two consecutive stones and swap their positions, but only if the total number of swaps made so far is even. Given the initial arrangement of the magical numbers on the stones, and a target arrangement, determine if it is possible to transform the initial arrangement into the target arrangement by performing the allowed swaps. The first input line contains a single integer n (1 ≤ n ≤ 100,000) – the number of stones. The second line contains n space-separated integers a1, a2, ..., an – the initial arrangement of magical numbers on the stones. The third line contains n space-separated integers b1, b2, ..., bn – the target arrangement of magical numbers on the stones. Print \\"Yes\\" if it is possible to get the target arrangement from the initial one using the allowed swaps, otherwise print \\"No\\".","solution":"def can_transform(n, initial, target): Determines if it\'s possible to convert the initial arrangement to the target arrangement by performing the allowed swaps. Args: - n (int): the number of stones. - initial (list[int]): the initial arrangement of magical numbers on the stones. - target (list[int]): the target arrangement of magical numbers on the stones. Returns: - str: \\"Yes\\" if the transformation is possible, otherwise \\"No\\". # The transformation is possible only if both arrangements have the same set of numbers from collections import Counter if Counter(initial) != Counter(target): return \\"No\\" else: return \\"Yes\\" # Example usage: #n = 5 #initial = [1, 2, 3, 4, 5] #target = [5, 3, 1, 2, 4] #print(can_transform(n, initial, target)) # Output: \\"Yes\\""},{"question":"A delivery company has a fleet of delivery trucks. Each truck has a maximum weight capacity, and the company wants to load the trucks with packages as efficiently as possible. Each package has a weight, and the company must ensure that no truck is loaded beyond its capacity. Given the number of delivery trucks, their capacities, the number of packages, and their weights, determine whether it\'s possible to load all packages onto the trucks such that no truck exceeds its weight capacity. Each test contains one or more test cases. The first line contains the number of test cases q (1 le q le 100). Description of the test cases follows. The first line of each test case contains two integers n and p (1 le n le 100, 1 le p le 1000), where n is the number of trucks and p is the number of packages. Next, n lines follow, each containing one integer c_i (1 le c_i le 10^6), where c_i is the capacity of the i-th truck. Next, p lines follow, each containing one integer w_j (1 le w_j le 10^6), where w_j is the weight of the j-th package. For each test case, print \\"YES\\" if it is possible to load all the packages onto the trucks without exceeding any truck\'s capacity. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower).","solution":"def can_load_packages(q, test_cases): results = [] for i in range(q): n, p = test_cases[i][\'np\'] capacities = sorted(test_cases[i][\'capacities\'], reverse=True) weights = sorted(test_cases[i][\'weights\'], reverse=True) if sum(capacities) < sum(weights): results.append(\\"NO\\") continue j = 0 for weight in weights: while j < n and capacities[j] < weight: j += 1 if j == n: results.append(\\"NO\\") break capacities[j] -= weight else: results.append(\\"YES\\") return results"},{"question":"# Problem Description: You are given a string consisting of lowercase English letters. You are allowed to perform two types of operations on the string: 1. Choose two adjacent characters in the string and swap them. 2. Choose any letter in the string and replace it with another letter of your choice. Your goal is to transform the given string into a palindrome using the minimum number of operations. A palindrome is a string that reads the same forwards and backwards. Write a function `minOperationsToPalindrome` that takes as input a string `s` and returns an integer corresponding to the minimum number of operations required to transform the string into a palindrome. # Input: - A single string `s` of length `n` (1 ≤ n ≤ 1000), consisting of lowercase English letters only. # Output: - A single integer representing the minimum number of operations required to transform the given string into a palindrome. # Example: ```python def minOperationsToPalindrome(s): # Your code here # Example 1: print(minOperationsToPalindrome(\\"abc\\")) # Output: 1 # Explanation: We can replace \'c\' with \'a\' to make it a palindrome \\"aba\\". # Example 2: print(minOperationsToPalindrome(\\"abca\\")) # Output: 1 # Explanation: We can replace the last character \'a\' with \'b\' to make it a palindrome \\"abcb\\". # Example 3: print(minOperationsToPalindrome(\\"racecar\\")) # Output: 0 # Explanation: The given string is already a palindrome. # Example 4: print(minOperationsToPalindrome(\\"a\\")) # Output: 0 # Explanation: The string \\"a\\" is already a palindrome. ``` # Note: 1. The function should be efficient to handle the upper limits of the constraints. 2. Think about different scenarios where characters need to be swapped and characters need to be replaced. 3. Consider edge cases such as strings that are already palindromes or the shortest possible strings.","solution":"def minOperationsToPalindrome(s): Returns the minimum number of operations required to transform the given string into a palindrome. Parameters: s (str): Input string consisting of lowercase English letters. Returns: int: Minimum number of operations needed to make the string a palindrome. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations"},{"question":"You are given a list of n integers. Your task is to create two new lists from this list such that: 1. Both new lists contain exactly one element more than half the total number of integers in the original list. 2. The integers in both new lists should come from the original list. 3. The sum of the integers in the first new list should be as close as possible to the sum of the integers in the second new list. You need to find two such lists and print the absolute difference between their sums. Input: - The first line contains a single integer n (1 ≤ n ≤ 100), the number of elements in the list. - The second line contains n integers separated by single spaces, representing the elements of the list. Each integer a_i (-10^4 ≤ a_i ≤ 10^4) is guaranteed to be within the given range. Output: - Print a single line containing the absolute difference between the sums of the two new lists. Examples: Input: 6 3 1 4 2 2 2 Output: 0 Explanation: Here, the original list is [3, 1, 4, 2, 2, 2]. The two new lists could be [3, 1, 2] and [4, 2, 2]. The sum of both lists is 6, so the absolute difference is 0.","solution":"def min_abs_diff_between_two_halves(n, arr): from itertools import combinations # Calculate the size of each of the two new lists half_size = (n + 1) // 2 min_diff = float(\'inf\') # Explore all combinations of indices of length half_size for indices in combinations(range(n), half_size): list1 = [arr[idx] for idx in indices] list2 = [arr[idx] for idx in range(n) if idx not in indices] sum1 = sum(list1) sum2 = sum(list2) diff = abs(sum1 - sum2) if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a grid with `m` rows and `n` columns represented as a 2D list `grid`. Each cell in the grid contains a value of either 0 or 1. A cell containing 1 is land, and a cell containing 0 is water. An island is defined as a group of contiguous lands connected horizontally or vertically (but not diagonally). Assume all four edges of the grid are surrounded by water. Your task is to write a function `findMaxIsland(grid: List[List[int]]) -> int` that returns the size of the largest island in the given grid. # Input - A 2D list `grid` with `m` rows and `n` columns, where 1 <= m, n <= 1000 and each element is either 0 or 1. # Output - Return the size of the largest island. If there is no land in the grid, return 0. # Example ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 1, 1], [0, 0, 0, 1, 1], [0, 1, 1, 1, 0] ] print(findMaxIsland(grid)) # Output: 7 ``` # Constraints - The function should have a time complexity of O(m*n). - The space complexity should be O(m*n), mainly for the recursion stack or BFS queue. # Note - You may use Depth-First Search (DFS) or Breadth-First Search (BFS) to traverse through the islands and count the cells. - Make sure to mark the visited cells to avoid counting them multiple times.","solution":"from typing import List def findMaxIsland(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 def dfs(x, y): stack = [(x, y)] count = 0 while stack: i, j = stack.pop() if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j] == 1: grid[i][j] = 0 # mark as visited count += 1 # Push all neighboring lands stack.append((i + 1, j)) stack.append((i - 1, j)) stack.append((i, j + 1)) stack.append((i, j - 1)) return count max_island_size = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: island_size = dfs(i, j) max_island_size = max(max_island_size, island_size) return max_island_size"},{"question":"Write a function `largest_common_subsequence(s1, s2)` that takes two strings `s1` and `s2` as input and returns the longest common subsequence (LCS) of the two strings. The function should return the LCS as a string. The longest common subsequence of two strings is the longest sequence that can be obtained from both strings by deleting some characters (it is not necessarily contiguous in the original strings). Input - Two strings `s1` and `s2`, where `1 <= |s1|, |s2| <= 1000`. Both strings only contain lowercase English letters (\'a\' to \'z\'). Output - One string that represents the longest common subsequence of `s1` and `s2`. If there are multiple LCSs with the same length, you can return any of them. Example ```python s1 = \\"abcde\\" s2 = \\"ace\\" output = \\"ace\\" s1 = \\"abc\\" s2 = \\"abc\\" output = \\"abc\\" s1 = \\"abc\\" s2 = \\"def\\" output = \\"\\" ``` Note - Solution should be efficient both in terms of time and space complexity. - The function should handle the edge cases where there might be no common subsequence.","solution":"def largest_common_subsequence(s1, s2): Returns the longest common subsequence (LCS) of two strings s1 and s2. m, n = len(s1), len(s2) dp = [[\\"\\" for _ in range(n + 1)] for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + s1[i - 1] else: dp[i][j] = dp[i - 1][j] if len(dp[i - 1][j]) > len(dp[i][j - 1]) else dp[i][j - 1] return dp[m][n]"},{"question":"You are given a string containing a mathematical expression with integer literals, addition and multiplication operators, and parentheses. Your task is to evaluate the expression and output the result as an integer. The length of the string is at most 100 characters. The expression is guaranteed to be valid and will not contain any spaces. # Input A single string representing a mathematical expression, containing only digits (0-9), addition (+), multiplication (*), and parentheses \'(\' and \')\'. # Output A single integer which is the result of evaluating the expression. # Example Input ``` \\"3+(2*5)\\" ``` Output ``` 13 ``` Input ``` \\"10+(5*6)+5\\" ``` Output ``` 45 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression with integers, plus (+), multiply (*), and parentheses. def helper(expr, index): operands = [] num = 0 op = \'+\' while index[0] < len(expr): char = expr[index[0]] if char.isdigit(): num = num * 10 + int(char) if char == \'(\': index[0] += 1 num, _ = helper(expr, index) if char in \'+*)\' or index[0] == len(expr) - 1: if op == \'+\': operands.append(num) elif op == \'*\': operands[-1] *= num if char == \'+\' or char == \'*\': op = char if char == \')\': return sum(operands), index[0] num = 0 index[0] += 1 return sum(operands), index[0] return helper(expression, [0])[0]"},{"question":"You are tasked to write a program that will determine the minimum number of segments to cut a rope into pieces such that the lengths of all segments are in a given set. Given an initial length of the rope `n` and a set of segment lengths `a`, you need to find the minimum number of cuts required to achieve the segmentation or determine if it is not possible. Each segment length in the set is guaranteed to be positive. # Input: - The first line contains two integers `integer` n (1 ≤ n ≤ 1000) and `m` (1 ≤ m ≤ 100) — the length of the rope and the number of possible segment lengths. - The second line contains `m` integers a1, a2, ..., am (1 ≤ ai ≤ n) — the possible segment lengths. # Output: - Print a single integer — the minimum number of cuts needed to split the rope into segments with the given lengths. - If it is not possible to split the rope in this manner, print -1. # Example: Input: ``` 7 3 1 3 4 ``` Output: ``` 2 ``` In the example, one possible way to cut the rope of length 7 into segments of lengths 1, 3, and 4 is to make two cuts: first into segments of length 4 and 3, and then into segments of length 4 and (1+3). Hence, the minimum number of cuts required is 2.","solution":"def min_cuts_to_segment_rope(n, m, lengths): Returns the minimum number of cuts needed to split the rope into segments with the given lengths. If it is not possible, returns -1. # Initialize an array to store the minimum cuts needed for every length up to n. dp = [float(\'inf\')] * (n + 1) dp[0] = 0 # No cuts needed for zero length # Iterate through every length up to n. for i in range(1, n + 1): for length in lengths: if i >= length: dp[i] = min(dp[i], dp[i - length] + 1) # If the value is still inf, it means it\'s not possible to achieve length n. return dp[n] if dp[n] != float(\'inf\') else -1"},{"question":"You are given an array a_1, a_2, dots , a_n that contains distinct integers. Each integer represents the height of a person. You have to divide this array into exactly two subarrays such that the difference of the sum of elements in these two subarrays is minimized. Each person must belong to exactly one subarray. For example, if a = [3, 1, 4, 2, 2], one possible division is: - Subarray 1: [3, 2] - Subarray 2: [1, 4, 2] The sum of Subarray 1 is 5, and the sum of Subarray 2 is 7. The difference between these sums is |5 - 7| = 2. The first line contains one integer t (1 le t le 100) — the number of test cases. The first line of each test case contains one integer n (2 le n le 100) — the number of elements in the array a. The second line of each test case contains n distinct integers a_1, a_2, dots , a_n (1 le a_i le 100). For each test case, print the minimum possible difference between the sum of elements in the two subarrays. If there are multiple ways to achieve this minimum difference, you can print any of them. Output the result for each test case on a new line.","solution":"def min_difference(t, test_cases): def find_min_diff(arr): total_sum = sum(arr) n = len(arr) dp = [[False for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): dp[i][j] = dp[i - 1][j] if arr[i - 1] <= j: dp[i][j] |= dp[i - 1][j - arr[i - 1]] diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j] == True: diff = total_sum - 2 * j break return diff results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] results.append(find_min_diff(a)) return results"},{"question":"You are given an array `heights` representing the heights of the buildings in a row. The buildings form a skyline viewed from the left to the right, and the skyline can be represented by the number of visible buildings from the left. A building is considered visible if there are no taller buildings to the left of it. Given this array, you need to determine how many buildings are visible when viewed from the left. The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of buildings. The second line contains `n` integers: `heights[i]` (1 ≤ heights[i] ≤ 10^9) — the heights of the buildings. Output the number of buildings that are visible from the left when viewed from that direction. **Example:** Input: ``` 6 3 1 4 2 5 7 ``` Output: ``` 4 ``` Explanation: - The first building of height `3` is visible. - The second building of height `1` is not visible because the first building is taller. - The third building of height `4` is visible because it is taller than all previous buildings. - The fourth building of height `2` is not visible because the third building is taller. - The fifth building of height `5` is visible because it is taller than all previous buildings. - The sixth building of height `7` is visible because it is taller than all previous buildings. Thus, there are a total of 4 buildings visible from the left. Note: Your solution should have a time complexity of O(n).","solution":"def count_visible_buildings(heights): Returns the number of buildings visible from the left side. max_height = -1 visible_count = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Write a program to determine the minimum number of swaps needed to sort an array of n distinct integers in ascending order. Your task is to write a function `min_swaps(arr)` that takes in a list of integers `arr` and returns an integer representing the minimum number of swaps required to sort the array. # Input - The input will consist of a list of n distinct integers, where 1 ≤ n ≤ 100,000. # Output - Return a single integer representing the minimum number of swaps needed to sort the array. # Example ```python def min_swaps(arr): # Your code here # Example Usage: arr = [4, 3, 1, 2] print(min_swaps(arr)) # Output: 3 ``` **Explanation:** For the example array `[4, 3, 1, 2]`, the minimum number of swaps to sort the array in ascending order is 3: 1. Swap 4 with 1: `[1, 3, 4, 2]` 2. Swap 3 with 2: `[1, 2, 4, 3]` 3. Swap 4 with 3: `[1, 2, 3, 4]` Therefore, the necessary number of swaps is 3.","solution":"def min_swaps(arr): Returns the minimum number of swaps to sort the given list of distinct integers in ascending order. n = len(arr) arr_pos = list(enumerate(arr)) arr_pos.sort(key=lambda x: x[1]) vis = {k: False for k in range(n)} ans = 0 for i in range(n): if vis[i] or arr_pos[i][0] == i: continue cycle_size = 0 j = i while not vis[j]: vis[j] = True j = arr_pos[j][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"You are given an array of integers that represent the height of buildings in a row. You want to send a drone to take a photo of these buildings from the air. However, the drone can only move from left to right and it must start from the top of the buildings. The drone can only move downwards or stay at the same height when taking photos. You need to find out the smallest maximum height the drone can fly over all buildings while taking a photo of each building exactly once. Write a function `min_drone_height(buildings: List[int]) -> int` that takes in a list of integers `buildings` representing the heights of buildings in a row and returns the smallest possible maximum height the drone can fly above the buildings. # Input: - A list of integers `buildings` where each integer represents the height of a building. `1 <= len(buildings) <= 10^5` and `1 <= buildings[i] <= 10^9`. # Output: - An integer representing the smallest possible maximum height the drone can fly above the buildings. # Example: Example 1: ```python buildings = [4, 2, 3, 5, 6] print(min_drone_height(buildings)) ``` Output: ``` 6 ``` Example 2: ```python buildings = [1, 5, 4, 4, 3] print(min_drone_height(buildings)) ``` Output: ``` 5 ``` # Explanation: For Example 1, the drone starts at height 6, which lets it take a photo of all buildings while moving only downward or staying level. For Example 2, the drone starts at height 5, as it must rise to take a photo of the building with height 5 but can remain level or descend afterwards.","solution":"from typing import List def min_drone_height(buildings: List[int]) -> int: Returns the smallest possible maximum height the drone can fly above the buildings. # The drone needs to at least be as high as the highest building to fly over all buildings. return max(buildings)"},{"question":"ally has received a new lesson in mathematics class about the number system. Her teacher taught her about prime numbers and palindromic numbers and gave her a challenge to merge these concepts. A number is called prime if it has only two distinct divisors: 1 and itself. A number is called palindromic if it reads the same backward as forward. Your task is to help Sally find and count all numbers within a given range [L, R] (inclusive) that are both prime and palindromic. The first input line contains two integers L and R (2 ≤ L ≤ R ≤ 106). Print the count of numbers that are both prime and palindromic within the given range. # Example Input: ``` 10 100 ``` Output: ``` 1 ``` In the example, the only prime palindromic number between 10 and 100 is 11.","solution":"def is_palindromic(num): Returns True if the given num is palindromic, False otherwise. return str(num) == str(num)[::-1] def sieve_of_eratosthenes(n): Generates a list of booleans representing prime status for numbers from 0 to n. True means prime, False means not prime. is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for p in range(2, int(n**0.5) + 1): if is_prime[p]: for multiple in range(p*p, n + 1, p): is_prime[multiple] = False return is_prime def count_prime_palindromic(L, R): Returns the count of numbers that are both prime and palindromic between L and R (inclusive). is_prime = sieve_of_eratosthenes(R) count = 0 for num in range(L, R + 1): if is_prime[num] and is_palindromic(num): count += 1 return count"},{"question":"Given two integers x and y representing the number of rows and columns respectively, construct a grid where each cell contains a digit (0-9). You need to find the largest possible sum by selecting exactly one contiguous subgrid. A subgrid is defined as any rectangular section of the grid that doesn\'t extend beyond the grid\'s boundaries and has at least one cell. The first line contains two integers x and y (1 ≤ x, y ≤ 100) — the number of rows and columns respectively. Each of the next x lines contains y characters, each representing a digit from 0 to 9, describing the grid. Print a single integer — the largest sum that can be obtained by selecting one contiguous subgrid. For example, consider the following 3 x 3 grid: ``` 1 2 3 4 5 6 7 8 9 ``` The largest possible sum is 45, which can be achieved by selecting the entire grid. Additional example: Input: ``` 3 3 1 2 3 0 0 0 5 6 7 ``` Output: ``` 24 ``` This is achieved by selecting the subgrid containing the last two rows and first three columns: ``` 0 0 0 5 6 7 ```","solution":"def largest_sum_subgrid(x, y, grid): Given the number of rows x and number of columns y, and a grid of digits, find the largest possible sum by selecting exactly one contiguous subgrid. Arguments: x -- number of rows y -- number of columns grid -- list of list of digits Returns: An integer representing the largest sum of a contiguous subgrid. # Initialize the maximum sum to a very small number max_sum = -float(\'inf\') # Create a 2D prefix sum array prefix_sum = [[0] * (y + 1) for _ in range(x + 1)] for i in range(x): for j in range(y): prefix_sum[i + 1][j + 1] = grid[i][j] + prefix_sum[i][j + 1] + prefix_sum[i + 1][j] - prefix_sum[i][j] # Iterate over all possible subgrids for i1 in range(1, x + 1): for j1 in range(1, y + 1): for i2 in range(i1, x + 1): for j2 in range(j1, y + 1): # Use the prefix sum to calculate the sum of the subgrid subgrid_sum = (prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]) # Update the maximum sum max_sum = max(max_sum, subgrid_sum) return max_sum # Read Input from user import sys input = sys.stdin.read def parse_input(input): data = input.strip().split() x = int(data[0]) y = int(data[1]) grid = [] idx = 2 for i in range(x): grid.append([int(digit) for digit in data[idx:idx + y]]) idx += y return x, y, grid"},{"question":"Alice and Bob are playing a game with a rectangular grid of size m times n. Each cell of the grid contains an initial value of 0. In each turn, Alice can choose any cell and increment its value by 1, while Bob can decrement the value of any non-zero cell by 1. The game ends when there are k cells with the same value, and Alice wins if she can achieve this before Bob prevents her, otherwise Bob wins. Your task is to determine if Alice has a winning strategy given the initial grid size and the target number of cells k. The parameters are: - m (1 ≤ m ≤ 100): the number of rows in the grid. - n (1 ≤ n ≤ 100): the number of columns in the grid. - k (1 ≤ k ≤ m times n): the number of cells that need to have the same value. Write a function `canAliceWin(m, n, k)` that returns `YES` if Alice has a winning strategy, otherwise returns `NO`. Input - An integer m, the number of rows. - An integer n, the number of columns. - An integer k, the required number of cells with the same value. Output - A string \\"YES\\" or \\"NO\\". Example Input: ``` m = 3 n = 3 k = 4 ``` Output: ``` YES ``` Input: ``` m = 4 n = 4 k = 17 ``` Output: ``` NO ``` Explanation - In the first example, Alice can increment four cells of her choice to make them all have the value of 1 while ensuring Bob does not decrement them back to zero, so Alice wins. - In the second example, achieving 17 cells with the same value in a 4 times 4 grid is impossible since there are only 16 cells in total, so Bob wins.","solution":"def canAliceWin(m, n, k): Determines if Alice has a winning strategy given the initial grid size and the target number of cells k. total_cells = m * n # Alice can win if she can make at least k cells have the same value starting from zero if k <= total_cells: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string consisting of lowercase English letters, you are to determine whether it is possible to transform the string such that there are no two adjacent characters that are the same. If it is possible to transform the string, output \\"YES\\" followed by the rearranged string. If it is not possible, output \\"NO\\". **Input:** - A single integer `T` representing the number of test cases (1 ≤ T ≤ 100). - The following `T` lines each contain a string `s` with length `n` (1 ≤ n ≤ 10^5). **Output:** - For each test case, output either \\"YES\\" followed by the rearranged string or \\"NO\\". **Example:** ``` Input: 3 aabb aa abc Output: YES abab NO YES abc ``` **Explanation:** - In the first test case, \\"aabb\\" can be rearranged to \\"abab\\". - In the second test case, \\"aa\\" cannot be rearranged to satisfy the condition. - In the third test case, \\"abc\\" is already structured in a way that no two adjacent characters are the same.","solution":"from collections import Counter import heapq def rearrange_string(s): count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 rearranged_string = \'\'.join(result) if len(rearranged_string) == len(s): return \\"YES \\" + rearranged_string else: return \\"NO\\" def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"You are given a list of integers representing the stock prices of a company over a period of n days. A span (or range) is defined as the maximum number of consecutive days (ending on the current day) over which the price of the stock has either remained the same or decreased in value. Write a function that takes an array of stock prices as input and returns an array containing the span for each day. The span for a day i is the number of consecutive days (including day i) that have stock prices less than or equal to the stock price on day i. Note: The span on the first day is always 1, as there are no preceding days. # Input: - An integer n (1 ≤ n ≤ 100,000) representing the number of days. - An array of n integers representing the stock prices over the n days, where each price is an integer between 1 and 10,000. # Output: - An array of n integers, where the ith integer represents the span of the stock price on the ith day. # Example: **Input:** ``` 7 100 80 60 70 60 75 85 ``` **Output:** ``` 1 1 1 2 1 4 6 ``` # Explanation: - On day 1, price is 100, so span is 1. - On day 2, price is 80, so span is 1. - On day 3, price is 60, so span is 1. - On day 4, price is 70 which is greater than the price on day 3 but less than that on day 1 and 2, so span is 2 days (day 3 and day 4). - On day 5, price is 60, so span is 1. - On day 6, price is 75, which is greater than the price on days 5, 3, and 4 but less than day 1 and 2, making the span 4 days (day 3, 4, 5, and 6). - On day 7, price is 85, which is greater than the prices of all previous days mentioned, making the span 6 days. # Notes: Implement an efficient O(n) time complexity solution to handle the largest possible input size within reasonable constraints.","solution":"def stock_span(n, prices): Calculates the span of stock price for each day. Parameters: n (int): The number of days. prices (list): List of stock prices over n days. Returns: list: List of spans for each day. spans = [0] * n stack = [] for i in range(n): while stack and prices[stack[-1]] <= prices[i]: stack.pop() spans[i] = i + 1 if not stack else i - stack[-1] stack.append(i) return spans"},{"question":"Berland Logistics needs to deliver goods across a city using autonomous delivery robots. Each robot has a limited battery capacity and can carry a specific maximum weight of goods. A load balancing system needs to determine the minimum number of robots required to deliver all goods, while ensuring that no robot is overloaded or runs out of battery. The first line contains two integers n and m (1 le n le 1,000, 1 le m le 1,000) — the number of robots and the number of goods. The second line contains n integers b_1, b_2, dots, b_n (1 le b_i le 10^5) — the battery capacity of each robot. The third line contains n integers w_1, w_2, dots, w_n (1 le w_i le 100) — the weight limit of each robot. Each of the next m lines contains two integers c_j and w_j (1 le c_j le 10^5, 1 le w_j le 100) — the battery consumption and the weight of the j-th good. Determine and print the minimum number of robots required to carry all goods. If it\'s not possible to carry all goods, print -1. In the first example, the system needs to distribute goods such that the sum of battery consumptions does not exceed any robot\'s battery capacity and the sum of weights does not exceed any robot\'s weight limit. In the second example, it might be impossible to deliver all goods due to constraints either in battery capacity or weight limits. Input 5 4 50 60 70 80 90 10 20 30 40 50 10 5 20 10 15 25 30 10 Output 3","solution":"def min_robots_required(n, m, robot_batteries, robot_weights, goods): Determines the minimum number of robots needed to deliver all goods. :param n: Number of robots :param m: Number of goods :param robot_batteries: List of battery capacities for each robot :param robot_weights: List of weight limits for each robot :param goods: List of tuples containing battery consumption and weight of each good :return: Minimum number of robots required or -1 if not possible # Sort robots by their battery capacity and weight limit robots = sorted(zip(robot_batteries, robot_weights), key=lambda x: (x[0], x[1])) # Sort goods by their battery consumption and weight goods = sorted(goods, key=lambda x: (x[0], x[1])) # Track the number of robots used number_of_robots = 0 goods_index = 0 while goods_index < m: # Try to allocate goods to the least capable robot that can handle the load for i in range(n): current_battery = robots[i][0] current_weight_capacity = robots[i][1] current_goods_battery_sum = 0 current_goods_weight_sum = 0 while goods_index < m and current_goods_battery_sum + goods[goods_index][0] <= current_battery and current_goods_weight_sum + goods[goods_index][1] <= current_weight_capacity: current_goods_battery_sum += goods[goods_index][0] current_goods_weight_sum += goods[goods_index][1] goods_index += 1 if current_goods_battery_sum > 0 or current_goods_weight_sum > 0: number_of_robots += 1 if goods_index >= m: break # If no suitable robot is found within available robots for remaining goods, return -1 if goods_index < m: return -1 return number_of_robots"},{"question":"You are helping to develop a software application that calculates the tax for various items in a store. The store applies different tax rates for different categories of items. Given an item category and its price, your task is to compute the final price after applying the respective tax rate. The tax rates are fixed as follows: - Food: 5% - Electronics: 12% - Clothing: 8% - Other: 10% Write a program that reads a number of items and computes their final price after tax. The input consists of: - An integer n (1 ≤ n ≤ 1000), the number of items. - n pairs of strings and floats, where each pair represents an item category and its original price (0.01 ≤ price ≤ 10000.00). The categories are guaranteed to be one of { \\"Food\\", \\"Electronics\\", \\"Clothing\\", \\"Other\\" }. For each item, output the final price after applying the respective tax rate. The results should be displayed with a precision of two decimal places. # Input 1. An integer n. 2. n lines, each containing: - A string s (the category, one of { \\"Food\\", \\"Electronics\\", \\"Clothing\\", \\"Other\\" }). - A float p (the original price). # Output For each of the n items, print the final price after tax on a new line. # Example Input: 4 Food 100.00 Electronics 220.00 Clothing 150.00 Other 75.00 Output: 105.00 246.40 162.00 82.50","solution":"def calculate_final_price(category, price): Given a category and its price, calculate the final price after tax. tax_rates = { \\"Food\\": 0.05, \\"Electronics\\": 0.12, \\"Clothing\\": 0.08, \\"Other\\": 0.10 } tax_rate = tax_rates.get(category, 0) final_price = price + (price * tax_rate) return round(final_price, 2) def process_items(n, items): results = [] for category, price in items: final_price = calculate_final_price(category, price) results.append(final_price) return results"},{"question":"In a distant land, there exists a magical forest with mystical creatures called Ylor. Each Ylor has a unique characteristic: it can connect with only one other Ylor through a mystical bond. The bonds between Ylors are represented by an array where the i-th element refers to the Ylor that the i-th Ylor connects with. These bonds form a series of non-overlapping cycles. One day, a sorceress decides to visit this forest and perform a magical operation. The operation can be described as follows: 1. Among all Ylors in a cycle, she can select any two distinct Ylors and swap their partners. 2. She can perform this swapping operation any number of times. The sorceress wants to know if it is possible to make all cycles in the forest to be of a specific length `k` by performing zero or more of these swaps. Write a program to determine if it is possible to transform all cycles to be exactly of length `k`. # Input The first line contains a single integer `t` (1 leq t leq 100), the number of test cases. For each test case: - The first line contains two integers `n` and `k` (1 leq n leq 10^5, 1 leq k leq n), the number of Ylors in the forest and the desired cycle length. - The second line contains `n` integers where the i-th integer is the zero-based index of the Ylor that the i-th Ylor connects with. # Output For each test case, print \\"YES\\" (without quotes) if it\'s possible to transform all cycles to be of length `k`. Otherwise, print \\"NO\\". # Example Input: ``` 3 5 3 1 0 3 4 2 4 2 1 0 3 2 6 3 1 2 0 4 5 3 ``` Output: ``` NO YES YES ``` # Explanation For the first test case, there are two cycles of lengths 2 and 3. Since we can\'t transform one cycle of length 2 and one cycle of length 3 into two cycles of length 3, the output is NO. For the second test case, there are two cycles of length 2. As the desired length `k` is 2, the output is YES. For the third test case, there are two cycles each of length 3. As the desired length `k` is 3, the output is YES.","solution":"def can_transform_cycles_to_k(t, test_cases): results = [] for n, k, connections in test_cases: visited = [False] * n cycle_lengths = [] # Find all cycle lengths for i in range(n): if not visited[i]: current = i length = 0 while not visited[current]: visited[current] = True current = connections[current] length += 1 cycle_lengths.append(length) # Check if all cycles can be made of length k all_possible = all(length == k for length in cycle_lengths) if all_possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Sasha is playing a game involving a series of numbers and some operations on them. Sasha has an array of integers A of size n. She can perform the following operation any number of times: - Choose any two elements of the array A[i] and A[j] (i ≠ j) and replace A[i] with A[i] + A[j]. Sasha\'s goal is to make all the elements of the array equal. Determine the minimum number of operations required to achieve this goal. The first line contains a single integer n (1 ≤ n ≤ 500) — the size of the array. The second line contains n integers A1, A2, ..., An (1 ≤ Ai ≤ 109) — the elements of the array. In a single line, print the minimum number of operations needed to make all the elements of the array equal. Example: Input: 3 1 2 3 Output: 2 Explanation: Choose A[0] = 1 and A[1] = 2 and replace A[0] with A[0] + A[1] = 3. Array now is [3, 2, 3]. Choose A[2] = 3 and A[1] = 2 and replace A[2] with A[2] + A[1] = 5. Array now is [3, 5, 5]. After 2 operations, the array can be transformed to [5, 5, 5], making all elements equal.","solution":"def min_operations_to_make_all_elements_equal(n, A): Returns the minimum number of operations needed to make all elements of the array equal. unique_elements = len(set(A)) return unique_elements - 1"},{"question":"Given a sequence of n characters (\'a\'-\'z\'), you are required to check if it is possible to rearrange the characters to form a palindrome. A palindrome is a word that reads the same forward and backward. If it is possible to rearrange the given sequence to form at least one palindrome, output \\"YES\\"; otherwise, output \\"NO\\". A sequence can be rearranged to form a palindrome if at most one character occurs an odd number of times, and all other characters occur an even number of times. # Input - The first line contains an integer n (1 ≤ n ≤ 100000) — the length of the character sequence. - The second line contains a string of n lowercase characters. # Output - Output a single line with \\"YES\\" if it\'s possible to rearrange the characters to form a palindrome, and \\"NO\\" otherwise. # Examples Example 1 **Input:** ``` 6 aabbcc ``` **Output:** ``` YES ``` Example 2 **Input:** ``` 5 abcba ``` **Output:** ``` YES ``` Example 3 **Input:** ``` 4 abcd ``` **Output:** ``` NO ```","solution":"def can_form_palindrome(n, s): Determines if it is possible to rearrange the characters to form a palindrome. :param n: int - length of the character sequence :param s: str - the string of characters :return: str - \\"YES\\" if it is possible to rearrange to form a palindrome, otherwise \\"NO\\" from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a grid of size n times m consisting of lowercase Latin letters. Your task is to determine if it is possible to group all identical letters together such that each group forms a connected region in the grid. A region is considered connected if you can start from any cell in the region and get to any other cell in the region by only moving left, right, up, or down without leaving the region. If it is possible to group all identical letters together forming connected regions, print \\"YES\\". Otherwise, print \\"NO\\". # Input Format: - The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the grid. - The next n lines each contain m characters, representing the grid. # Output Format: - Print \\"YES\\" if it is possible to group all identical letters together as connected regions. Otherwise, print \\"NO\\". # Example: Input: ``` 3 4 aabb aabb ccdd ``` Output: ``` YES ``` Input: ``` 3 4 aabc aadc bbcc ``` Output: ``` NO ``` # Explanation: In the first example, the grid can be visualized as three connected components: \'a\' (occupying top-right block of 2x2), \'b\' (occupying bottom-right block of 2x2) and \'c\' & \'d\' occupying two separate blocks in the bottom row. Each identical letter can be grouped together forming connected regions. In the second example, \'c\' is present in two different rows but cannot be grouped without breaking the connected component rule since other characters (\'b\' and \'d\') are blocking them. Thus, the output is \\"NO\\".","solution":"def can_group_connected_regions(n, m, grid): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() visited.add((cx, cy)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = cx + dx, cy + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == grid[x][y] and (nx, ny) not in visited: stack.append((nx, ny)) visited = set() regions = {} for i in range(n): for j in range(m): if (i, j) not in visited: if grid[i][j] not in regions: regions[grid[i][j]] = 0 regions[grid[i][j]] += 1 dfs(i, j) for key in regions: if regions[key] != 1: return \\"NO\\" return \\"YES\\""},{"question":"You are designing a new railway system for a small country. The towns in the country are connected by bidirectional railway tracks. Each railway track has a certain travel time associated with it. The government wants to ensure that the railway system is efficient so that there is always a way to travel between any two towns with the least travel time possible. Given the number of towns and the list of railway tracks with their respective travel times, your task is to determine the shortest travel time from the starting town to all other towns using Dijkstra\'s algorithm. Assume the towns are numbered from 1 to n, and the starting town is always town 1. Your program will be judged on multiple test cases. The first line contains the number of test cases, t (1 ≤ t ≤ 100). Following, t test cases will be given. For each test case: - The first line contains two integers, n (2 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000); the number of towns and the number of railway tracks, respectively. - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), where u and v are the towns connected by a railway track with travel time w. The graph is undirected. For each test case, output a single line containing n-1 integers separated by a space, representing the shortest travel times from town 1 to each of the towns from 2 to n. If a town is not reachable from town 1, output -1 for that town. # Example Input ``` 2 4 4 1 2 5 2 3 10 1 3 2 3 4 1 3 2 1 2 4 1 3 3 ``` # Example Output ``` 5 2 3 4 3 ```","solution":"import heapq import sys from collections import defaultdict def dijkstra(n, edges): graph = defaultdict(list) for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) travel_times = {i: sys.maxsize for i in range(1, n+1)} travel_times[1] = 0 priority_queue = [(0, 1)] while priority_queue: current_time, u = heapq.heappop(priority_queue) if current_time > travel_times[u]: continue for weight, v in graph[u]: time = current_time + weight if time < travel_times[v]: travel_times[v] = time heapq.heappush(priority_queue, (time, v)) return [travel_times[i] if travel_times[i] != sys.maxsize else -1 for i in range(2, n+1)] def solve_railway_system(inputs): results = [] idx = 0 t = inputs[idx] idx += 1 for _ in range(t): n, m = inputs[idx] idx += 1 edges = [] for _ in range(m): u, v, w = inputs[idx] idx += 1 edges.append((u, v, w)) result = dijkstra(n, edges) results.append(result) return results"},{"question":"You are given an array of integers representing heights of buildings in a city. Your task is to determine the maximum area of a rectangle that can be formed by any set of contiguous buildings. The height of the rectangle is determined by the shortest building in the selected range, and the width is the number of buildings in that range. Input Format: The first line contains a single integer n (1 ≤ n ≤ 10^5) – the number of buildings. The second line contains n integers hi (1 ≤ hi ≤ 10^6) – the heights of the buildings. Output Format: Print a single integer – the maximum area of a rectangle that can be formed. Example: Input: 7 2 1 5 6 2 3 1 Output: 10 Explanation: The maximum rectangle can be formed between building heights [5, 6]. The area is 2 (width) * 5 (height of the shortest building in this range) = 10. Note: Make sure your solution is efficient enough to handle the largest constraints.","solution":"def max_area_histogram(heights): Returns the maximum area of rectangle that can be formed in the histogram (array of building heights). stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given an array of integers, and your task is to determine the length of the longest subarray which contains at most two distinct values with a difference of no more than one. Formally, you need to find the maximum length of a subarray where the absolute difference between any two of its elements is at most one. # Input - The first line contains an integer n (1 leq n leq 10^5) – the length of the array. - The second line contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^4) – the elements of the array. # Output - Output a single integer – the length of the longest subarray that meets the condition. # Example Input: ``` 6 1 2 2 3 3 4 ``` Output: ``` 4 ``` Input: ``` 5 5 5 5 5 5 ``` Output: ``` 5 ``` # Hint In the first example, the longest subarray that contains at most two distinct values with a difference of no more than one is [2, 2, 3, 3], which has a length of 4.","solution":"def longest_subarray_with_two_distinct(arr): Returns the length of the longest subarray which contains at most two distinct values with a difference of no more than one. from collections import defaultdict n = len(arr) if n == 0: return 0 max_length = 0 left = 0 counts = defaultdict(int) for right in range(n): counts[arr[right]] += 1 while len(counts) > 2 or (len(counts) == 2 and max(counts.keys()) - min(counts.keys()) > 1): counts[arr[left]] -= 1 if counts[arr[left]] == 0: del counts[arr[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given an array of integers `nums` and a target number `k`. Your task is to determine if there is a contiguous subarray whose sum equals `k`. If such a subarray exists, print \\"Yes\\" (without the quotes). Otherwise, print \\"No\\" (without the quotes). The input contains two lines: - The first line contains two integers n and k — the length of the array and the target sum. - The second line contains n integers, the elements of the array nums. The output should be a single line containing either \\"Yes\\" or \\"No\\". For example: Input: ``` 5 15 1 2 3 7 5 ``` Output: ``` Yes ``` In this example, the subarray `[2, 3, 7, 3]` sums to 15. Another example: Input: ``` 5 10 1 2 3 4 5 ``` Output: ``` Yes ``` In this example, the subarray `[1, 2, 3, 4]` sums to 10. Yet another example: Input: ``` 5 25 1 2 3 7 5 ``` Output: ``` No ``` In this example, there is no subarray that sums to 25.","solution":"def has_subarray_with_sum(nums, k): Determines if there exists a contiguous subarray whose sum is equal to k. Args: nums (list of int): The array of integers. k (int): The target sum. Returns: str: \\"Yes\\" if such a subarray exists, otherwise \\"No\\". current_sum = 0 sum_dict = {} for i in range(len(nums)): current_sum += nums[i] if current_sum == k: return \\"Yes\\" if (current_sum - k) in sum_dict: return \\"Yes\\" sum_dict[current_sum] = i return \\"No\\""},{"question":"Polycarp is participating in an online coding competition that involves performing multiple tasks. One of the tasks requires him to calculate the total number of vowels present in a given string. Polycarp needs your help to quickly solve this problem to save time. Write a function that takes a single string as input and returns the total count of vowels in that string. The function should consider both uppercase and lowercase vowels (i.e., \'a\', \'e\', \'i\', \'o\', \'u\', \'A\', \'E\', \'I\', \'O\', \'U\'). The first line of input contains an integer n (1 le n le 100) — the length of the string. The second line of input contains a string of length n, consisting of uppercase and lowercase Latin letters only. Print the total number of vowels present in the given string. For example, Input: 7 CodeHors Output: 3","solution":"def count_vowels(n, s): Returns the count of vowels in a given string. Parameters: n (int): The length of the string. s (str): The string to count vowels in. Returns: int: The total number of vowels in the string. vowels = \'aeiouAEIOU\' return sum(1 for char in s if char in vowels)"},{"question":"You are the organizer of a local road race and you need to calculate the optimal number of water stations along the race course. The race course is N miles long, and you have the following constraints: 1. You must have at least one water station at the start line (mile 0) and another at the finish line (mile N). 2. The distance between any two consecutive water stations must be no more than K miles. 3. The total number of water stations should be as few as possible. Given these constraints, write a program that calculates the minimal number of water stations required and their positions, including the start and finish lines. # Input The input consists of two integers: - N (1 le N le 1000) - the length of the race course in miles. - K (1 le K le N) - the maximum allowed distance between consecutive water stations. # Output Output the minimum number of water stations required followed by their positions on the race course (in miles) in non-decreasing order, considering that the positions are to be integers only. # Example Input ``` 13 5 ``` Output ``` 3 0 5 10 13 ``` In this example, there are three water stations required in addition to the start and finish lines: at miles 0, 5, 10, and 13. The distance between any two consecutive water stations does not exceed 5 miles.","solution":"def calculate_water_stations(N, K): Calculate the minimal number of water stations and their positions. Parameters: N (int): The length of the race course in miles. K (int): The maximum allowed distance between consecutive water stations. Returns: tuple: The number of water stations and their positions on the race course. positions = [0] current_pos = 0 while current_pos + K < N: current_pos += K positions.append(current_pos) if positions[-1] != N: positions.append(N) return (len(positions), positions)"},{"question":"A famous programmer, Alexa, is fascinated by number sequences and their hidden patterns. One day, she came across an interesting sequence problem and she needs your help to solve it. The sequence is generated based on the following rules: 1. The sequence starts with a single integer 1. 2. For each subsequent term, if the previous term is even, the next term is the previous term divided by 2. 3. If the previous term is odd, the next term is 3 times the previous term plus 1. The sequence always eventually reaches 1. Given an initial positive integer `n`, your task is to write a program that generates the sequence from `n` to 1, and determine the length of the sequence (including the starting number and the ending 1). # Input: - A single integer `n` (1 ≤ n ≤ 10^6) # Output: - A single integer representing the length of the sequence. # Examples: - Input: `6` - Output: `9` - Input: `19` - Output: `21` - Input: `1` - Output: `1` Write a function `sequence_length(n)` that returns the length of the sequence. Note that you only need to implement this function, and be sure to handle various edge cases.","solution":"def sequence_length(n): Computes the length of the sequence starting from n and ending at 1 based on the given rules. Args: n: int - the starting integer of the sequence. Returns: int - the length of the sequence count = 1 # starting with n itself while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 count += 1 return count"},{"question":"Tina is organizing a game night for her friends, and she wants to make sure that there is a balance in the games they play. Each game has a specific \\"excitement level\\" and a \\"duration\\". She wants to maximize the total excitement level while ensuring that the total duration of the games does not exceed a given number of hours. You are given a list of games, where each game is represented by its excitement level and duration. You need to determine the maximum possible total excitement level that can be achieved without exceeding a given duration limit. The first line contains two integers, `n` and `T` (`1 <= n <= 1000`, `1 <= T <= 10^5`) — the number of games and the maximum duration Tina is willing to spend. The next `n` lines each contain two integers, `ei` and `ti` (`1 <= ei <= 10^5`, `1 <= ti <= 10^5`) — the excitement level and the duration of the `i`-th game. Print a single integer representing the maximum possible total excitement level. **Constraints:** - Each game can be played multiple times. - The total duration of the games played should not exceed `T`. - Tina can decide to not play a game at all. **Example:** Input: ``` 3 50 60 10 100 20 120 30 ``` Output: ``` 300 ``` In this example, Tina can achieve a maximum excitement level by playing the second game twice and the first game once, spending a total duration of (20 + 20 + 10 = 50) hours and achieving (100 + 100 + 60 = 260) excitement level.","solution":"def max_excitement(games, T): Returns the maximum total excitement level achievable without exceeding the given total duration T. :param games: A list of tuples where each tuple contains two integers (excitement level, duration) of a game. :param T: An integer representing the maximum total duration. :return: An integer representing the maximum possible total excitement level. dp = [0] * (T + 1) for e, t in games: for j in range(t, T + 1): dp[j] = max(dp[j], dp[j - t] + e) return dp[T]"},{"question":"You are given a positive integer n and an integer array a of length n. You need to determine the minimum number of operations required to make all elements in the array equal. In one operation, you can perform one of the following: 1. Increment an element by 1. 2. Decrement an element by 1. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100) — the number of test cases. The first line of each test case contains a single positive integer n (1 le n le 1000) — the length of array a. The second line of each test case contains n integers separated by space, which represent the elements of array a (1 le a_i le 10^9). Print the minimum number of operations required for each test case, separated by a newline. **Example:** **Input:** 2 3 1 2 3 5 1 10 2 9 3 **Output:** 2 16 **Explanation:** In the first test case, you can make all elements equal to 2 with two operations, as follows: - Increment the first element to 2. - Decrement the third element to 2. In the second test case, the minimum total operations occur if all elements are made equal to 3, reducing each element to the common value 3: - For array [1, 10, 2, 9, 3], the minimum total operations would be 16.","solution":"def min_operations_to_equal_elements(t, test_cases): results = [] for case in test_cases: n, a = case a.sort() median = a[n // 2] # The median minimizes the sum of absolute deviations total_operations = sum(abs(x - median) for x in a) results.append(total_operations) return results"},{"question":"You are given a string consisting of lowercase letters and an integer k. Your task is to find the shortest substring of the given string that contains at least k distinct characters. If there is no such substring, return an empty string. The first line of input contains an integer t (1 ≤ t ≤ 10), the number of test cases. The next t pairs of lines contain a string s (1 ≤ |s| ≤ 105) and an integer k (1 ≤ k ≤ 26). Print t lines each containing the length of the shortest substring with at least k distinct characters for each test case. If there is no such substring, print 0. **Input:** ``` 3 abcde 3 aaaa 2 xyz 4 ``` **Output:** ``` 3 0 0 ``` **Explanation:** In the first test case, the string \\"abcde\\" has a substring \\"abc\\" with 3 distinct characters. In the second test case, the string \\"aaaa\\" does not have 2 different characters. In the third test case, \\"xyz\\" does not have a substring with 4 distinct characters.","solution":"def shortest_substring_with_k_distinct(s, k): from collections import defaultdict n = len(s) if k > n: return 0 left = 0 right = 0 char_count = defaultdict(int) num_distinct = 0 min_length = float(\'inf\') while right < n: # Expand the window by including the character at `right` if char_count[s[right]] == 0: num_distinct += 1 char_count[s[right]] += 1 right += 1 # Contract the window from the left to find the smallest length while num_distinct >= k: min_length = min(min_length, right - left) char_count[s[left]] -= 1 if char_count[s[left]] == 0: num_distinct -= 1 left += 1 return min_length if min_length != float(\'inf\') else 0 def solve(test_cases): results = [] for s, k in test_cases: result = shortest_substring_with_k_distinct(s, k) results.append(result) return results"},{"question":"A company has a problem with their employee management system: they often need to find the employees who have been with the company for the exact same number of months. They want a program that can help them identify these groups of employees efficiently. # Problem Description You are given an array of integers, where each integer represents the number of months an employee has been with the company. You need to write a function that returns a list of lists, where each inner list contains the employee indices (0-based) who have been with the company for the exact same number of months. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of employees. - The second line contains `n` integers separated by spaces — the array where the `i-th` integer represents the number of months the `i-th` employee has been with the company. # Output - Output a list of lists, where each inner list contains the indices of employees who have been with the company for the same number of months. - Each list should be sorted in ascending order. - The outer list should be sorted by the number of months in ascending order. # Example Input ``` 5 12 6 6 3 12 ``` Output ``` [[3], [1, 2], [0, 4]] ``` # Note In the example, employees at indices 1 and 2 have been with the company for 6 months, employees at indices 0 and 4 have been with the company for 12 months, and the employee at index 3 has been with the company for 3 months. The resulting list of lists is sorted by the number of months: `[[3], [1, 2], [0, 4]]`. # Function Signature ```python def group_employees_by_months(n: int, months: List[int]) -> List[List[int]]: # Your code goes here ```","solution":"from typing import List from collections import defaultdict def group_employees_by_months(n: int, months: List[int]) -> List[List[int]]: Returns a list of lists where each inner list contains the indices of employees who have been with the company for the same number of months. # Dictionary to hold months as keys and list of indices as values months_dict = defaultdict(list) # Populating the dictionary with indices grouped by months for i in range(n): months_dict[months[i]].append(i) # Convert the dictionary to sorted list of lists result = [] for key in sorted(months_dict): result.append(sorted(months_dict[key])) return result"},{"question":"Polina has a collection of n dolls arranged in a line. Each doll has a unique height. Polina wants to line up these dolls in such a way that they form a sequence where each doll is either taller than the previous one or shorter than the previous one, but not both at the same time. In other words, she wants to create a sequence of dolls such that the heights of the dolls strictly increase and then strictly decrease or strictly decrease and then strictly increase. Given the heights of the dolls, your task is to help Polina find any one such possible sequence of heights or determine if it is impossible to form such a sequence. You are given a single integer n (3 leq n leq 1000) and an array h of n distinct integers representing the heights of the dolls. Return any sequence that satisfies the above property, or return a single number -1 if no such sequence exists. Input: - The first line contains a single integer n. - The second line contains n distinct integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9). Output: - If a valid sequence exists, print any one of them. - Otherwise, print a single number -1.","solution":"def find_sequence(n, heights): Returns a valid sequence where heights either strictly increase then strictly decrease, or strictly decrease then strictly increase. If such sequence is impossible, returns -1. Args: n (int): number of dolls. heights (list): list of n distinct integers representing the heights of the dolls. Returns: list or int: a valid sequence if exists, otherwise -1. # If n is less than 3, it is impossible to form such a sequence. if n < 3: return -1 # Sort the heights to help in forming the sequence sorted_heights = sorted(heights) # Try to line up the dolls as: # first half to form increasing sequence and the second half to form decreasing sequence first_half = sorted_heights[:n//2] second_half = sorted_heights[n//2:] # If lengths are 3 or more we can form a valid sequence if len(first_half) >= 2 and len(second_half) >= 1: result = first_half + second_half[::-1] return result else: return -1"},{"question":"You are given an array of n integers and q queries. Each query can either update an element in the array or ask for the sum of the maximum subarray within a specified range. The first line contains two integers n and q (1 ≤ n, q ≤ 100000). The second line contains n integers a_1, a_2, ..., a_n representing the elements of the array (-10^6 ≤ a_i ≤ 10^6). The following q lines describe the queries. Each query is of one of the following two types: - \\"1 x y\\" where 1 ≤ x ≤ n and -10^6 ≤ y ≤ 10^6, which means update the x-th element of the array to y. - \\"2 l r\\" where 1 ≤ l ≤ r ≤ n, which means compute the sum of the maximum subarray within the range from index l to index r. Print the result for each query of type \\"2\\".","solution":"class SegmentTree: def __init__(self, arr): self.n = len(arr) self.tree = [0] * (4 * self.n) self.build(arr, 0, 0, self.n - 1) def build(self, arr, node, start, end): if start == end: self.tree[node] = (arr[start], arr[start], arr[start], arr[start]) else: mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 self.build(arr, left_node, start, mid) self.build(arr, right_node, mid + 1, end) self.tree[node] = self.merge(self.tree[left_node], self.tree[right_node]) def merge(self, left, right): total_sum = left[0] + right[0] best_prefix_sum = max(left[1], left[0] + right[1]) best_suffix_sum = max(right[2], right[0] + left[2]) best_sum = max(left[3], right[3], left[2] + right[1]) return (total_sum, best_prefix_sum, best_suffix_sum, best_sum) def update(self, idx, val, node, start, end): if start == end: self.tree[node] = (val, val, val, val) else: mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 if start <= idx <= mid: self.update(idx, val, left_node, start, mid) else: self.update(idx, val, right_node, mid + 1, end) self.tree[node] = self.merge(self.tree[left_node], self.tree[right_node]) def query(self, L, R, node, start, end): if R < start or end < L: return (0, float(\'-inf\'), float(\'-inf\'), float(\'-inf\')) if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left_node = 2 * node + 1 right_node = 2 * node + 2 left_res = self.query(L, R, left_node, start, mid) right_res = self.query(L, R, right_node, mid + 1, end) return self.merge(left_res, right_res) def process_queries(n, arr, queries): seg_tree = SegmentTree(arr) result = [] for query in queries: if query[0] == 1: x, y = query[1] - 1, query[2] seg_tree.update(x, y, 0, 0, n - 1) elif query[0] == 2: l, r = query[1] - 1, query[2] - 1 result.append(seg_tree.query(l, r, 0, 0, n - 1)[3]) return result"},{"question":"You are given an array of integers a of size n. Your task is to split the array into exactly two non-empty subarrays in such a way that the absolute difference between the sum of elements in the first subarray and the sum of elements in the second subarray is minimized. Define two subarrays as a[0...i] and a[i+1...n-1] for some integer i (0 leq i < n-1). For example, if the array is [1, 2, 3, 4, 5, 6], you can split it into [1, 2, 3] and [4, 5, 6] as one of the possible splits. The first line of the input contains a single integer n (2 leq n leq 10^5), the size of the array. The second line contains n integers, representing the elements of the array (1 leq a[i] leq 10^9). Print a single integer — the minimal absolute difference between the sum of the elements in the first subarray and the sum of the elements in the second subarray. # Example **Input:** ``` 6 1 2 3 4 5 6 ``` **Output:** ``` 1 ``` **Explanation:** For the example given, the optimal split is [1, 2, 3, 4] and [5, 6] leading to sum 10 and 11 respectively, with an absolute difference of 1.","solution":"def minimize_abs_diff(arr): n = len(arr) # Compute the prefix sums prefix_sum = [0] * n prefix_sum[0] = arr[0] for i in range(1, n): prefix_sum[i] = prefix_sum[i-1] + arr[i] total_sum = prefix_sum[-1] min_diff = float(\'inf\') # Compute the minimum absolute difference for i in range(n-1): left_sum = prefix_sum[i] right_sum = total_sum - left_sum diff = abs(left_sum - right_sum) if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a tree with `n` nodes and `n-1` edges. A tree is a connected undirected graph with no cycles. You are also given an integer `k` and a list of `k` pairs of distinct nodes `(xi, yi)`. For each pair, you are asked to find the length of the shortest path between nodes `xi` and `yi`. The first line contains an integer `n` (2 ≤ n ≤ 10^5) — the number of nodes in the tree. The next `n-1` lines contain two space-separated integers `u` and `v` (1 ≤ u, v ≤ n) — the nodes connected by an edge. The next line contains an integer `k` (1 ≤ k ≤ 10^5) — the number of pairs of nodes. The next `k` lines contain two space-separated integers `xi` and `yi` (1 ≤ xi, yi ≤ n; xi ≠ yi) — the pairs of nodes between which you need to find the length of the shortest path. For each pair, print a single integer — the length of the shortest path between nodes `xi` and `yi`. # Sample Input ``` 5 1 2 1 3 2 4 2 5 3 4 5 1 4 3 5 ``` # Sample Output ``` 2 2 3 ``` # Explanation - The shortest path between nodes 4 and 5 is 4 -> 2 -> 5, with length 2. - The shortest path between nodes 1 and 4 is 1 -> 2 -> 4, with length 2. - The shortest path between nodes 3 and 5 is 3 -> 1 -> 2 -> 5, with length 3.","solution":"from collections import deque, defaultdict def bfs(tree, n, start): Perform a breadth-first search (BFS) on the tree and return the distance from the start node to all other nodes. distances = [-1] * (n + 1) distances[start] = 0 queue = deque([start]) while queue: current = queue.popleft() for neighbor in tree[current]: if distances[neighbor] == -1: distances[neighbor] = distances[current] + 1 queue.append(neighbor) return distances def find_shortest_paths(n, edges, k, pairs): Find the shortest path length between pairs of nodes in a tree. # Construct the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # We can calculate all distances from any node using BFS distances = bfs(tree, n, 1) # Iterate through pairs of nodes and find the distance results = [] for x, y in pairs: results.append(distances[x] + distances[y] - 2 * distances[find_lca(tree, distances, x, y)]) return results def find_lca(tree, distances, u, v): Using BFS distances to find the Lowest Common Ancestor (LCA). if distances[u] < distances[v]: u, v = v, u # Bring u and v to the same level while distances[u] != distances[v]: for neighbor in tree[u]: if distances[neighbor] < distances[u]: u = neighbor break # Find the LCA while u != v: for neighbor in tree[u]: if distances[neighbor] < distances[u]: u = neighbor break for neighbor in tree[v]: if distances[neighbor] < distances[v]: v = neighbor break return u"},{"question":"Given a directed graph with `n` nodes and `m` edges, where the nodes are labeled from `1` to `n`, you are required to find the length of the shortest path from node `1` to node `n`. Each edge has a weight of `1`. If there is no path from node `1` to node `n`, output `-1`. # Input - The first line contains two integers `n` and `m` (`2 ≤ n ≤ 1000`, `1 ≤ m ≤ 2000`) — the number of nodes and the number of edges in the graph. - The next `m` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`), representing a directed edge from node `u` to node `v`. # Output - Output a single integer — the length of the shortest path from node `1` to node `n`. If there is no such path, output `-1`. # Example Input ``` 4 4 1 2 2 3 3 4 1 3 ``` Output ``` 2 ``` # Explanation In the given example, there is a path from node `1` to node `3` with a length of `2` (directly from 1 to 3). There is also a path from node `1` to node `4` with a length of `3` (using 1 -> 2 -> 3 -> 4). The shortest path from node `1` to node `4` is finally `1 -> 3 -> 4` with length `2`. # Note - You should use a graph traversal algorithm such as Breadth-First Search to find the shortest path in this unweighted graph. - Ensure to handle the case where there is no path from node `1` to node `n` by outputting `-1`.","solution":"from collections import deque, defaultdict def shortest_path(n, m, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Breadth-First Search (BFS) from node 1 visited = [False] * (n + 1) queue = deque([(1, 0)]) # (current_node, current_distance) visited[1] = True while queue: node, distance = queue.popleft() if node == n: return distance for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, distance + 1)) return -1"},{"question":"You are given an array of integers of length n (2 le n le 100,000), and a set of m queries (1 le m le 100,000). Each query is of one of the two following types: 1. Update the value at a particular index in the array. 2. Determine the sum of the elements in a given range of the array. Here\'s the precise form of the input: - The first line contains two integers n and m — the number of elements in the array and the number of queries, respectively. - The second line contains n integers a_1, a_2, ..., a_n — the initial elements of the array. - The next m lines contain the queries: - For an update query, the format is \\"1 i x\\", meaning you should update the value of the array at index i to x (1 le i le n, -10^9 le x le 10^9). - For a sum query, the format is \\"2 l r\\", meaning you should output the sum of the values from index l to index r (1 le l le r le n). Your task is to efficiently handle these queries. Input: ``` n m a_1 a_2 ... a_n type1 i x type2 l r ... ``` Output: - For each sum query of type 2, print the sum of the array elements in the given range. # Constraints - n and m are at most 100,000. - The values of array elements and update values are integers that can be as large as 10^9 in absolute value.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize the segment tree with the provided array for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): index += self.n self.tree[index] = value while index > 1: index //= 2 self.tree[index] = self.tree[2 * index] + self.tree[2 * index + 1] def query(self, left, right): result = 0 left += self.n right += self.n while left < right: if left % 2: result += self.tree[left] left += 1 if right % 2: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_queries(n, m, array, queries): segment_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, i, x = query segment_tree.update(i - 1, x) elif query[0] == 2: _, l, r = query results.append(segment_tree.query(l - 1, r)) return results"},{"question":"You are given a sequence of integers represented in an array. Your task is to reorder the array such that all even numbers appear before all odd numbers while maintaining the relative order of the even and odd numbers. The input consists of: - An integer n (1 ≤ n ≤ 100) — the number of elements in the array - A single line containing n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the elements of the array You need to output the reordered array in a single line, where all even numbers come before odd numbers, preserving the original relative order of even and odd numbers. Example: Input: 5 4 2 5 7 8 Output: 4 2 8 5 7","solution":"def reorder_array(nums): Reorder the array so that all even numbers appear before odd numbers, maintaining the relative order of even and odd numbers. evens = [num for num in nums if num % 2 == 0] odds = [num for num in nums if num % 2 != 0] return evens + odds"},{"question":"You are given a binary string `s` that consists of characters \'0\' and \'1\' only. Your task is to find the maximum number of contiguous substrings of `s` such that each substring contains an equal number of \'0\'s and \'1\'s. For instance, if the input string is \\"11001100\\", you can split it into [\\"1100\\", \\"11\\", \\"00\\"], and the substrings [\\"1100\\", \\"00\\"] contain an equal number of \'0\'s and \'1\'s, resulting in 2 such substrings. Write a function that takes a binary string `s` as input and returns the maximum number of such contiguous substrings. # Input - A single string `s` containing only characters \'0\' and \'1\'. The length of the string is between 1 and 100. # Output - A single integer representing the maximum number of contiguous substrings where each substring has an equal number of \'0\'s and \'1\'s. # Example Input: ``` 11001100 ``` Output: ``` 2 ``` Input: ``` 000111 ``` Output: ``` 1 ``` Input: ``` 010101 ``` Output: ``` 3 ``` **Constraints:** - The string `s` will only contain \'0\'s and \'1\'s. - The length of `s` will be at most 100.","solution":"def max_equal_substrings(s): Returns the maximum number of contiguous substrings where each substring contains an equal number of \'0\'s and \'1\'s. count = 0 balance = 0 for char in s: if char == \'0\': balance -= 1 else: balance += 1 if balance == 0: count += 1 return count"},{"question":"Given a non-negative integer num, repeatedly add all its digits until the result has only one digit. For example, given num = 38, the process is as follows: 3 + 8 = 11 1 + 1 = 2 Since 2 has only one digit, return it. For example, given num = 12345, the process is as follows: 1 + 2 + 3 + 4 + 5 = 15 1 + 5 = 6 Since 6 has only one digit, return it. The implementation should have a time complexity of O(log(n)) where n is the initial value of num. The input consists of a single line containing num. The value of num is a non-negative integer in the range [0, 10^9]. Output a single integer digit which is the result of repeatedly adding all its digits until the result has only one digit. Consider the following examples: Example 1: Input: 38 Output: 2 Example 2: Input: 12345 Output: 6","solution":"def add_digits(num): This function repeatedly adds all digits of a given number until the result has only one digit. while num >= 10: num = sum(int(digit) for digit in str(num)) return num"},{"question":"Write a Python function `rotate_matrix(matrix: List[List[int]]) -> List[List[int]]` that takes an `n x n` 2D matrix representing an image and rotates the image by 90 degrees (clockwise). You should rotate the matrix in-place, which means you have to modify the input 2D matrix directly. **Do not** return anything from your function. **Constraints:** - The matrix must be `n x n`, where 1 ≤ n ≤ 20. - The values in the matrix are integers that fit within the range of 32-bit signed integers. **Example:** ```python Input: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` **Explanation:** The function should take the input matrix and rotate it by 90 degrees clockwise, modifying the input matrix accordingly.","solution":"from typing import List def rotate_matrix(matrix: List[List[int]]) -> None: Rotates the n x n matrix 90 degrees clockwise in-place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are given an array `A` consisting of `n` integers. You want to find the maximum possible sum of a contiguous subarray of `A`, provided that the length of the subarray is between `L` and `R` (inclusive). Write a program that will calculate the desired maximum sum. The first line of the input contains three integers: `n`, `L`, and `R` — the number of elements in the array, the minimum length of the subarray, and the maximum length of the subarray respectively (1 ≤ n ≤ 1000, 1 ≤ L ≤ R ≤ n). The second line contains `n` integers representing the array `A` (−10^9 ≤ Ai ≤ 10^9). Output a single integer — the maximum possible sum of a contiguous subarray of length between `L` and `R`. # Example Input: ``` 6 2 4 1 -2 3 -1 2 3 ``` Output: ``` 7 ``` Explanation: The subarray [3, -1, 2, 3] has length 4 and sum 7, which is the maximum possible sum of any subarray of length between 2 and 4.","solution":"def max_sum_subarray(n, L, R, A): Function to find the maximum possible sum of a contiguous subarray of A with length between L and R inclusive. max_sum = float(\'-inf\') for start in range(n): current_sum = 0 for end in range(start, min(n, start + R)): current_sum += A[end] if L <= (end - start + 1) <= R: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A company has implemented a new system to automatically distribute workers between various projects. Each worker has a unique skill rating, which is an integer from 1 to 100. Every project requires a team of workers whose combined skill rating exactly matches a given target. To assist in this distribution, you must write a program that determines whether it is possible to form such a team given a specific target rating for a project and the skill ratings of available workers. You will be provided: - An integer `n`, representing the number of available workers. - An integer array `skills`, where `skills[i]` is the skill rating of the i-th worker. - An integer `target`, the exact skill rating sum required for the project team. Write a function `bool can_form_team(int n, vector<int> skills, int target)` that returns `true` if it is possible to form a team of workers whose combined skill rating equals the target rating, and `false` otherwise. # Constraints: - 1 ≤ n ≤ 100 - 1 ≤ skills[i] ≤ 100 - 1 ≤ target ≤ 10,000 # Example: ```plaintext Input: 5 [12, 34, 45, 22, 17] 56 Output: true Input: 4 [23, 30, 46, 56] 100 Output: false ``` # Explanation: In the first example, a team consisting of workers with skill ratings 34 and 22 sums up to 56, which matches the target. In the second example, there\'s no combination of workers\' skill ratings that add up to the target of 100. # Notes: The problem can be approached using dynamic programming or backtracking techniques, given that the constraints allow for such methods to run efficiently.","solution":"def can_form_team(n, skills, target): Returns True if it is possible to form a team of workers whose combined skill rating equals the target, and False otherwise. # Initialize a dp array where dp[i] will be True if sum i can be formed using # given skill ratings, False otherwise. dp = [False] * (target + 1) dp[0] = True # because zero sum can always be formed with an empty set. # Iterate over skills for skill in skills: for t in range(target, skill - 1, -1): if dp[t - skill]: dp[t] = True return dp[target]"},{"question":"To prepare for an upcoming programming competition, Alex has been practicing different problems. One of the problems he\'s working on is constructing an \\"eternal sequence.\\" An eternal sequence of length \'m\' is defined as a sequence of \'m\' integers a1, a2, ..., am such that for every 1 ≤ i < m, the following condition holds: |ai - ai+1| = 1 Given an integer m, determine the number of unique eternal sequences of length m. Return the answer modulo 1000000007 (10^9 + 7). The first line of input contains a single integer m (1 ≤ m ≤ 2000). Output a single integer — the number of unique eternal sequences of length m modulo 1000000007 (10^9 + 7). For example, if m = 3, the eternal sequences of length 3 include: [1, 2, 1], [2, 1, 2], [2, 3, 2], and [3, 2, 1]. Input: 3 Output: 4","solution":"def count_eternal_sequences(m): Returns the number of unique eternal sequences of length m modulo 1000000007. MOD = 1000000007 # If m == 1, any number is a valid sequence, there are infinite such sequences if m == 1: return -1 # Special case: there would technically be infinite sequences # dp[i] will store the number of unique eternal sequences of length i dp = [0] * (m + 1) # Initial number of sequences for length 1 and 2 dp[1] = 0 # Special case handled above dp[2] = 2 # There are two sequences of length 2: [1,2] and [2,1] for i in range(3, m + 1): dp[i] = (2 * dp[i-1]) % MOD return dp[m]"},{"question":"You are given two strings, s1 and s2, both consisting of lowercase Latin letters. Your task is to determine the length of the longest common subsequence (LCS) between the two strings. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. For example, \\"ace\\" is a subsequence of \\"abcde\\", but \\"aec\\" is not. The first line contains an integer n (1 ≤ n ≤ 1000) which represents the number of test cases. The following 2n lines contain two strings, each pair of lines representing a single test case. For each test case, compute and print the length of their longest common subsequence. Input Format: - The first line contains an integer n. - The next 2n lines contain two strings, each pair on a single line. Output Format: - For each test case, print the length of the longest common subsequence on a new line. Sample Input: ``` 2 abcde ace abcd abcd ``` Sample Output: ``` 3 4 ``` For the first pair \\"abcde\\" and \\"ace\\", the LCS is \\"ace\\", which has a length of 3. For the second pair \\"abcd\\" and \\"abcd\\", the LCS is \\"abcd\\", which has a length of 4.","solution":"def longest_common_subsequence(s1, s2): m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def process_test_cases(input_data): lines = input_data.split(\'n\') n = int(lines[0]) results = [] for i in range(n): s1 = lines[2 * i + 1] s2 = lines[2 * i + 2] lcs_length = longest_common_subsequence(s1, s2) results.append(lcs_length) return results"},{"question":"You are given a sequence of integers where the sequence starts with one integer and each subsequent integer in the sequence is the previous integer incremented by a fixed integer called the step. The sequence continues in this fashion until a target value is reached or exceeded. You are to determine the minimum possible positive step size that achieves or exceeds the target value given an initial integer and the target value. More formally, given `x` (the initial integer), `y` (the target value), and `n` (the total number of steps), find the smallest integer `s` (the step size) such that the sequence starting from `x` and incremented by `s` for `n` steps reaches or exceeds `y`. For example, if `x = 3`, `y = 15`, and `n = 4`, then the smallest step size `s` is `3` because the sequence [3, 6, 9, 12, 15] reaches `15` at the 4th step. # Input - The first line contains the three space-separated integers: `x` (1 ≤ x ≤ 10^5), `y` (x ≤ y ≤ 10^9), and `n` (1 ≤ n ≤ 10^5). # Output - Print a single integer: the minimum possible step size `s`. # Example Input ``` 3 15 4 ``` Output ``` 3 ``` # Note 1. The initial integer `x` is always less than or equal to the target value `y`. 2. The `n` steps mean that we are making `n` increments starting from `x` and checking if the sequence reaches or exceeds `y`. 3. If `n` is too large such that any positive step size will exceed the target value in fewer than `n` steps, derive `s` so it fits exactly within the target value and total steps.","solution":"def min_step_size(x, y, n): Returns the minimum possible positive step size s such that the sequence starting from x and incremented by s for n steps reaches or exceeds y. # We need the nth step to be at least y. # The nth step in the sequence starting from x with step size s is x + n * s. # We solve for the smallest s such that x + n * s >= y. # Rearranging gives n * s >= y - x, thus s >= (y - x) / n. s = (y - x) // n if (y - x) % n != 0: # If there\'s a remainder, we need to increment s by 1 to ensure we reach or exceed y. s += 1 return s"},{"question":"You are given a string containing only characters \'a\' and \'b\'. Your task is to transform the string such that no two adjacent characters are the same, by replacing any character \'a\' with \'b\' or any character \'b\' with \'a\'. Output the minimum number of replacements needed. The input string length will be between 1 and 100 (inclusive). Example: Input: \\"aab\\" Output: 1 Input: \\"baaa\\" Output: 2","solution":"def min_replacements(s): Returns the minimum number of replacements needed such that no two adjacent characters are the same. if not s: return 0 # Track replacements needed replacements = 0 # Iterate through the string, compare each character with the next one for i in range(1, len(s)): if s[i] == s[i - 1]: # If two adjacent characters are the same replacements += 1 return replacements"},{"question":"Alex is very interested in string operations and likes to play with palindromes. A palindrome is a word, phrase, or sequence that reads the same backward as forward. Jake, his friend, challenges him to create palindromes from a given set of strings by reordering characters. However, there\'s a catch - every character should appear an even number of times except for at most one character, which can appear an odd number of times. Your task is to write a function that checks, for each string, whether it\'s possible to reorder the characters to form a palindrome. # Input: - The first line contains a single integer q (1 leq q leq 10^4) - the number of strings. - The following q lines each contain a single string s (1 leq |s| leq 10^5) - the string to be checked. It is guaranteed that the sum of lengths of all strings does not exceed 10^5. # Output: For each string, output \\"YES\\" if it\'s possible to reorder the characters to form a palindrome, and \\"NO\\" otherwise. # Example: Input: ``` 3 aabb abc a ``` Output: ``` YES NO YES ``` # Explanation: - The first string \\"aabb\\" can be reordered to \\"abba\\" which is a palindrome. - The second string \\"abc\\" cannot be reordered to form a palindrome because all characters appear only once. - The third string \\"a\\" is already a palindrome. Write a function to determine if the given strings can be rearranged to form palindromes.","solution":"from collections import Counter def can_form_palindrome(strings): Given a list of strings, determine if each one can be rearranged to form a palindrome. results = [] for s in strings: char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) if odd_count > 1: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"In a faraway land, the citizens use a unique numbering system based on custom rules. Each custom number is represented as a string containing digits from 0 to 9 and also includes two special characters, \'*\' and \'#\'. The characters \'*\' and \'#\' have special meanings: - \'*\' acts as a separator and does not contribute to the numeric value. - \'#\' acts as a multiplier, where the numeric value to its left should be multiplied by 2. You are tasked with writing a function that evaluates the numeric value of a given custom number string based on the rules above. The input consists of a single line containing a custom number string with a length between 1 and 1000 characters. Output a single integer representing the numeric value of the custom number string after applying the rules. # Example: **Input:** ``` 3*4#5 ``` **Output:** ``` 83 ``` **Explanation:** - \'3\' contributes 3 to the numeric value. - \'*\' acts as a separator and should be ignored. - \'4 #\' means we double the value 4, adding 8 to the numeric value. - The \'5\' is unaffected, so we add it directly. Thus, the total value is 3 + 8 + 5 = 16.","solution":"def evaluate_custom_number(custom_number): total = 0 i = 0 while i < len(custom_number): char = custom_number[i] if char.isdigit(): num = int(char) if i + 1 < len(custom_number) and custom_number[i + 1] == \'#\': num *= 2 i += 1 # Skip the \'#\' character total += num # Skip \'*\' as it is a separator i += 1 return total"},{"question":"You are given a sequence of positive integers. You need to partition this sequence into k consecutive subsequences such that the sum of the elements in each subsequence is as close as possible to each other. The input consists of two lines: - The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100), where n is the length of the sequence and k is the number subsequences. - The second line contains n integers — the sequence of positive integers. The sum of the sequence will not exceed 100000. Print the partitioned subsequences in the order they appear in the original sequence. If there are multiple solutions, you can print any of them. # Example Input: 10 3 5 2 1 2 3 2 4 2 10 1 Output: 5 2 1 2 3 2 4 2 10 1","solution":"def partition_sequence(n, k, sequence): Partitions a sequence of length n into k consecutive subsequences such that the sums of the subsequences are as close as possible to each other. total_sum = sum(sequence) target_sum = total_sum / k partitions = [] current_subseq = [] current_sum = 0 for number in sequence: if current_sum + number > target_sum and len(partitions) < k - 1: partitions.append(current_subseq) current_subseq = [number] current_sum = number else: current_subseq.append(number) current_sum += number if current_subseq: partitions.append(current_subseq) return partitions"},{"question":"You are given a string consisting of lowercase English letters. You need to determine if the string is a palindrome. A string is called a palindrome if it reads the same backwards as forwards. If the string is not a palindrome, you need to find the minimum number of characters you need to change to make it a palindrome. After modifications, all characters in the modified string should still be lowercase English letters. Your task is to write a function that determines the minimum number of character changes required to make the string a palindrome. Input: - The first line contains a single integer, t (1 le t le 100), the number of test cases. - For each test case: - The first line contains a single integer n (1 le n le 10^6), the length of the string. - The second line contains a string of length n consisting of lowercase English letters. Output: - For each test case, print a single integer: the minimum number of character changes required to make the string a palindrome. Example: ``` Input: 3 3 abc 4 abca 5 abcba Output: 1 1 0 ```","solution":"def min_changes_to_palindrome(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] s = test_cases[i][1] count = 0 for j in range(n // 2): if s[j] != s[n - j - 1]: count += 1 results.append(count) return results # Function to parse input and process outputs accordingly def process_input_output(input_lines): t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) s = input_lines[index + 1] test_cases.append((n, s)) index += 2 results = min_changes_to_palindrome(t, test_cases) for result in results: print(result) # Example of processing input and running the solution input_example = [ \\"3\\", \\"3\\", \\"abc\\", \\"4\\", \\"abca\\", \\"5\\", \\"abcba\\" ] process_input_output(input_example)"},{"question":"A city contains n intersections and between some of them, there are bidirectional roads. It is possible to travel between any two intersections by going through one or more roads. Each road has a toll associated with it. A police officer wants to select exactly k roads such that the sum of tolls of the selected roads is minimized, and all chosen roads form a connected subgraph. You are given n, m, and k. Where n is the number of intersections, m is the number of roads, and k is the number of roads that need to be selected. The next m lines contain three integers u, v, t (1 leq u, v leq n, 1 leq t leq 10^9), where u and v are intersections connected by a road with toll t. Write a program to help the officer determine the sum of tolls of these k roads such that the total cost is minimized and the selected roads form a connected subgraph. If it is not possible to select exactly k roads to form a connected subgraph, print -1. Input: - The first line contains three integers n (2 leq n leq 2000), m (1 leq m leq 10000), and k (1 leq k leq m). - Each of the next m lines contains three integers u, v, and t. Output: - Output the minimum sum of tolls of the selected k roads, or -1 if it is not possible to do so. Example: Input: 6 9 3 1 2 5 1 3 3 2 3 6 2 4 2 3 4 4 3 5 8 4 5 7 4 6 1 5 6 9 Output: 6","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_toll(n, m, k, edges): edges.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst_edges = [] mst_cost = 0 for edge in edges: u, v, cost = edge if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_edges.append(cost) mst_cost += cost if len(mst_edges) == n - 1: break if len(mst_edges) < k: return -1 if len(mst_edges) == k: return mst_cost extra_edges = [] for edge in edges: u, v, cost = edge if find(parent, u) != find(parent, v): extra_edges.append(cost) all_edges = mst_edges + extra_edges all_edges.sort() return sum(all_edges[:k]) def solution(n, m, k, edge_list): edges = [(u - 1, v - 1, t) for u, v, t in edge_list] return minimum_toll(n, m, k, edges)"},{"question":"You are given a 2D grid consisting of \'.\' (empty space) and \'#\' (walls). You start from the top-left corner of the grid and want to reach the bottom-right corner. You can move up, down, left, or right, but you cannot pass through walls. Determine the minimum number of moves required to reach the bottom-right corner from the top-left corner, or output -1 if it is not possible. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 50), representing the number of rows and columns of the grid. The next n lines contain m characters each (either \'.\' or \'#\'), representing the grid. Output the minimum number of moves to reach the bottom-right corner, or -1 if it is not possible. Example: Input: 5 6 ...... .#.... ...... ....#. ...... Output: 9","solution":"from collections import deque def min_moves_to_bottom_right(n, m, grid): # Directions for moving in the grid: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid_move(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # BFS initialization queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() # If we\'ve reached the bottom-right corner if (x, y) == (n-1, m-1): return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) # If no path was found return -1"},{"question":"Your task is to simulate a vending machine. The vending machine contains `n` slots in a line, and each slot either contains one specific item or is empty. Each slot is indexed from `1` to `n`, and each item is unique and identified by an integer from `1` to `m` (where `m <= n`). Customers will make requests for items, and the machine will check if the requested item is available. If the item is available, the machine will deliver the item and mark the corresponding slot as empty. If the item is not available, the machine will return a message indicating that the item is out of stock. You need to implement a method to handle multiple purchase requests and determine the state of the vending machine after all requests have been processed. # Input - The input starts with an integer `n`, the number of slots in the vending machine (`1 <= n <= 10^5`). - The second line contains a string of length `n`, where each character represents a slot: - If the character is \'.\', the slot is empty. - If the character is a digit (from `1` to `9`), it represents an item in that slot. - Multiple characters can be used to represent items (`10`, `11`, ..., `m`). - The third line contains an integer `q`, the number of purchase requests (`1 <= q <= 10^5`). - The fourth line contains `q` integers, the requested items. # Output For each request, print \\"SUCCESS\\" if the item is delivered and \\"OUT OF STOCK\\" if the item is not available. # Example Input ``` 10 1.2...3.45 5 1 3 5 2 6 ``` Output ``` SUCCESS SUCCESS SUCCESS SUCCESS OUT OF STOCK ``` # Explanation The initial state of the machine is: `1, ., 2, ., ., ., 3, ., 4, 5`. 1. The first request is for item `1`, which is available in slot `1`, so it is delivered and slot `1` becomes empty: `., ., 2, ., ., ., 3, ., 4, 5`. 2. The second request is for item `3`, which is available in slot `7`, so it is delivered and slot `7` becomes empty: `., ., 2, ., ., ., ., ., 4, 5`. 3. The third request is for item `5`, which is available in slot `10`, so it is delivered and slot `10` becomes empty: `., ., 2, ., ., ., ., ., 4, .`. 4. The fourth request is for item `2`, which is available in slot `3`, so it is delivered and slot `3` becomes empty: `., ., ., ., ., ., ., ., 4, .`. 5. The fifth request is for item `6`, which is not available, so the machine returns \\"OUT OF STOCK\\".","solution":"def vending_machine(n, slots, q, requests): slot_map = {} for i in range(n): if slots[i] != \'.\': slot_map[int(slots[i])] = i results = [] for req in requests: if req in slot_map: results.append(\\"SUCCESS\\") del slot_map[req] else: results.append(\\"OUT OF STOCK\\") return results"},{"question":"You are given a grid of size n times m, where each cell contains a certain amount of gold. You have a single miner starting at the top-left corner of the grid (cell 1, 1) and your goal is to maximize the amount of gold collected by reaching the bottom-right corner (cell n, m). The miner can only move either to the right or down. Your task is to write a program to find the maximum amount of gold that can be collected along the way. # Input - The first line contains two integers, n and m (1 le n, m le 1000) - the dimensions of the grid. - The next n lines contain m integers each, representing the gold present in each cell of the grid. The gold in each cell is a non-negative integer (0 le g_{i,j} le 10^4). # Output - Print a single integer - the maximum amount of gold that the miner can collect. # Sample Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` # Sample Output ``` 12 ``` # Explanation In the provided sample, the path that collects the maximum amount of gold is: - Start at (1, 1) -> Move right to (1, 2) -> Move right to (1, 3) -> Move down to (2, 3) -> Move down to (3, 3) The collected gold along this path is: 1 + 3 + 1 + 1 + 1 = 12","solution":"def max_gold(grid): n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1] # Example usage: if __name__ == \\"__main__\\": n, m = map(int, input().split()) grid = [list(map(int, input().split())) for _ in range(n)] print(max_gold(grid))"},{"question":"Given an integer array a consisting of n elements, you want to answer several queries of the following types: 1. Find the sum of elements in the range (l, r) (inclusive). 2. Update the value of the element at index i to a new value v. Write a program that processes multiple test cases, where each test case contains an initial array and a set of operations. The first line of the input contains a single integer t (1 le t le 10) — the number of test cases. For each test case: - The first line contains two integers n and q (1 le n, q le 100000) — the number of elements in the array and the number of queries. - The second line contains n integers a_1, a_2, dots, a_n — the initial array elements. - The following q lines each describe a query: either - `1 l r`, where 1 le l le r le n and it is a range sum query, or - `2 i v`, where 1 le i le n and it is an update query setting a[i] to v. Output the result of each range sum query in the same order as they appear in the input. Print each result on a new line. Example: Input: ``` 1 5 5 1 2 3 4 5 1 1 3 2 3 6 1 1 3 1 2 4 2 4 7 1 1 5 ``` Output: ``` 6 9 16 ``` In this example, the initial array is `[1, 2, 3, 4, 5]`. The range sum from index 1 to 3 is 1 + 2 + 3 = 6. The update changes the array to `[1, 2, 6, 4, 5]`. Then the range sum from index 1 to 3 is 1 + 2 + 6 = 9. The range sum from index 2 to 4 is 2 + 6 + 4 = 12. Another update changes the array to `[1, 2, 6, 7, 5]`, and the range sum from index 1 to 5 is 1 + 2 + 6 + 7 + 5 = 21.","solution":"def process_queries(t, test_cases): results = [] for case in test_cases: n, q = case[\'n\'], case[\'q\'] array = case[\'array\'] prefix_sum = [0] * (n + 1) # Build the initial prefix sum array for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + array[i - 1] for query in case[\'queries\']: if query[0] == 1: l, r = query[1], query[2] sum_range = prefix_sum[r] - prefix_sum[l - 1] results.append(sum_range) elif query[0] == 2: i, v = query[1], query[2] diff = v - array[i - 1] array[i - 1] = v # Update prefix sum from index i to n for j in range(i, n + 1): prefix_sum[j] += diff return results"},{"question":"Given an integer n, compute the sum of all even Fibonacci numbers that do not exceed n. The Fibonacci sequence is defined as follows: the first two numbers are 1 and 1, and each subsequent number is the sum of the previous two. The only line of input will contain an integer n (1 ≤ n ≤ 4,000,000). Output the sum of all even Fibonacci numbers that are less than or equal to n.","solution":"def sum_even_fibonacci(n): Returns the sum of all even Fibonacci numbers that do not exceed n. :param n: The upper limit for the Fibonacci sequence. :return: The sum of all even Fibonacci numbers ≤ n. a, b = 1, 1 total_sum = 0 while b <= n: if b % 2 == 0: total_sum += b a, b = b, a + b return total_sum"},{"question":"Given an array of integers, you have to select exactly `k` integers from it such that their sum is as large as possible. After selecting these `k` integers, you need to rearrange them into a non-decreasing sequence. If there are multiple ways to achieve the largest sum with `k` integers, return the lexicographically smallest non-decreasing sequence. **Input:** The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 1000), where `n` is the length of the array and `k` is the number of integers to select. The second line contains `n` integers representing the array elements (−10^5 ≤ array elements ≤ 10^5). **Output:** Print `k` integers in a single line. This should be the non-decreasing sequence of `k` integers that gives the largest possible sum and is lexicographically smallest. **Example:** ``` Input: 5 3 4 2 5 -1 3 Output: 3 4 5 ``` **Explanation:** - The possible ways to select 3 integers with the largest sum are: - (5, 4, 3) with sum 12 - (5, 4, 2) with sum 11 - (5, 3, 2) with sum 10 - and so on - The lexicographically smallest non-decreasing sequence among those that produce the largest sum (12) is (3, 4, 5).","solution":"def select_k_largest_sum_lexicographically(n, k, array): This function returns k integers from the array such that their sum is the largest possible and the sequence is lexicographically smallest. # Sort the array in descending order sorted_array = sorted(array, reverse=True) # Select the first k elements to get the largest sum selected_elements = sorted_array[:k] # Sort the selected elements to get lexicographically smallest sequence result = sorted(selected_elements) return result"},{"question":"A software company needs to manage multiple projects simultaneously. Each project has a certain start day and end day, both inclusive. Due to limited resources, the company wants to know the maximum number of projects occurring on any given day. Your job is to write a program that calculates this maximum overlap of projects. # Input - The first line contains one integer n (1 le n le 2 cdot 10^5), the number of projects. - The following n lines each contain two integers s_i and e_i (1 le s_i le e_i le 10^6), the start day and end day of the i-th project. # Output - Print one integer — the maximum number of projects occurring on any day. # Example Input ``` 3 1 10 5 15 12 20 ``` Output ``` 2 ``` Explanation: On day 12, there are two projects running: (5, 15) and (12, 20). This is the maximum overlap. In this example, the maximum number of overlapping projects is 2 on day 12.","solution":"def max_overlap(n, intervals): events = [] for start, end in intervals: events.append((start, 1)) # +1 for a project starting events.append((end + 1, -1)) # -1 for a project ending the day after it ends # Sort the events: first by day, then by type of event (start events before end events in case of tie) events.sort() max_projects = 0 current_projects = 0 for _, event in events: current_projects += event if current_projects > max_projects: max_projects = current_projects return max_projects"},{"question":"Design a program that functions as a priority queue manager for an online marketplace\'s inventory system. Your task is to implement a system that maintains a list of products according to their priority levels. Products are added to the queue with a priority value, and the system must ensure higher priority products are always processed before lower priority ones. If two products have the same priority, the one added earlier should be processed first (FIFO order). The following commands need to be implemented: 1. **ADD product_name priority**: Adds a new product to the queue with the given priority. 2. **PROCESS**: Processes and removes the highest priority product from the queue. If there are multiple products with the same highest priority, remove the one that was added first. 3. **VIEW**: Returns the current highest priority product\'s name without removing it from the queue. If there are multiple products with the same highest priority, return the one that was added first. 4. **EXIT**: Ends the program. All commands are case-sensitive and should be processed exactly as given. # Input The input consists of a series of lines. Each line represents a single command as described above. The commands must handle the following constraints: - The `product_name` is a string of up to 100 characters. - The `priority` is an integer value. - There can be up to 10^5 products in the queue at any given time. - The program will not receive commands after the `EXIT` command. # Output For each `PROCESS` command, output the name of the product that is processed. For each `VIEW` command, output the name of the product that has the highest priority. There should be no output for `ADD` or `EXIT` commands. # Example Input: ``` ADD apples 2 ADD bananas 4 VIEW PROCESS ADD oranges 3 VIEW PROCESS PROCESS VIEW EXIT ``` Output: ``` bananas bananas apples oranges ``` # Note - Initially, the inventory is empty. - When there are no products left to view or process, these commands should not produce any output.","solution":"import heapq import itertools class PriorityQueueManager: def __init__(self): self.queue = [] self.entry_finder = {} self.counter = itertools.count() def add(self, product_name, priority): if product_name in self.entry_finder: self.remove(product_name) count = next(self.counter) entry = [-priority, count, product_name] self.entry_finder[product_name] = entry heapq.heappush(self.queue, entry) def remove(self, product_name): entry = self.entry_finder.pop(product_name) entry[-1] = None def process(self): while self.queue: priority, count, product_name = heapq.heappop(self.queue) if product_name is not None: del self.entry_finder[product_name] return product_name return None def view(self): while self.queue: priority, count, product_name = self.queue[0] if product_name is not None: return product_name else: heapq.heappop(self.queue) return None # Example usage if __name__ == \\"__main__\\": pq_manager = PriorityQueueManager() import sys input = sys.stdin.read commands = input().strip().split(\'n\') for command in commands: if command.startswith(\\"ADD\\"): _, name, priority = command.split() pq_manager.add(name, int(priority)) elif command == \\"PROCESS\\": processed_product = pq_manager.process() if processed_product: print(processed_product) elif command == \\"VIEW\\": viewed_product = pq_manager.view() if viewed_product: print(viewed_product) elif command == \\"EXIT\\": break"},{"question":"You have been tasked with developing a new application that involves processing stock market data. Specifically, you need to determine the maximum profit that can be achieved by buying and selling stocks given the daily prices for a single stock over a period of time. However, there is a constraint on the number of transactions; you can complete at most two transactions (a transaction is defined as buying and then later selling one share of the stock). Design and implement a function `maxProfit(prices: List[int]) -> int` that takes a list of integers representing the daily stock prices and returns an integer representing the maximum profit achievable under the given constraint. # Input - A list of integers `prices` where `prices[i]` represents the stock price on day `i`. - The length of the list can range from 1 to 10^5. - The stock price values are positive integers and do not exceed 10^5. # Output - An integer representing the maximum profit that can be achieved with at most two transactions. # Example ```python print(maxProfit([3,3,5,0,0,3,1,4])) # Output: 6 print(maxProfit([1,2,3,4,5])) # Output: 4 print(maxProfit([7,6,4,3,1])) # Output: 0 print(maxProfit([1])) # Output: 0 ``` # Explanation - In the first example, the maximum profit of 6 is achieved by buying on day 3 (price=0) and selling on day 5 (price=3), then buying on day 6 (price=1) and selling on day 7 (price=4). - In the second example, a single transaction of buying on day 1 and selling on day 5 achieves the maximum profit of 4. - In the third example, no profitable transaction is possible. - In the fourth example, only one price is given, so no transaction is possible. # Note - Ensure the function handles edge cases, such as when no transactions can yield a profit or when the list contains only one price.","solution":"from typing import List def maxProfit(prices: List[int]) -> int: if not prices: return 0 n = len(prices) if n == 1: return 0 # First pass: Calculate max profit until each day with at most 1 transaction profit1 = [0] * n min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) profit1[i] = max(profit1[i - 1], prices[i] - min_price) # Second pass: Calculate max profit after each day with at most 1 additional transaction profit2 = [0] * n max_price = prices[n - 1] for i in range(n - 2, -1, -1): max_price = max(max_price, prices[i]) profit2[i] = max(profit2[i + 1], max_price - prices[i]) # Combine the results of the two passes max_profit = 0 for i in range(n): max_profit = max(max_profit, profit1[i] + profit2[i]) return max_profit"},{"question":"A group of friends is playing a card game where they draw cards from a deck arranged in a line. Each card has a distinct integer value written on it. The goal of the game is to collect a continuous segment of cards that has the maximum possible sum. You are to help them by determining this maximum sum. The first line of the input contains an integer n (1 ≤ n ≤ 2·10^5) — the number of cards in the deck. The second line contains n integers — the values on the cards. The values on the cards can be negative, zero, or positive and are guaranteed to be within the range of [-10^9, 10^9]. Your task is to compute and print the maximum possible sum of any continuous subarray of cards. # Example Input: ``` 5 3 -2 5 -1 4 ``` Output: ``` 9 ``` # Explanation In the example, the maximum sum of a continuous segment is achieved by the subarray [3, -2, 5, -1, 4], which has the sum 3 + (-2) + 5 - 1 + 4 = 9. # Note - You may use an efficient algorithm to find the solution given the constraint on n. - Ensure your output matches the required format.","solution":"def max_subarray_sum(n, cards): Returns the maximum possible sum of any continuous subarray of cards using Kadane\'s algorithm. max_sum = current_sum = cards[0] for i in range(1, n): current_sum = max(cards[i], current_sum + cards[i]) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a string of integers representing an encoded message. Each integer in the string represents a letter according to the following rules: - \'1\' to \'9\' -> \'A\' to \'I\' - \'10\' to \'26\' -> \'J\' to \'Z\' Write a function `num_decodings(s: str) -> int` that takes a string `s` representing the encoded message and returns the number of ways to decode it. The input string will only contain digits and has to be non-empty. Note: - Leading zeros are not allowed. For example, \'01\' is not a valid encoding. - Every single character can be decoded independently. Examples: 1. `s = \\"12\\"` Output: `2` Explanation: \\"12\\" could be decoded as \\"AB\\" (1 2) or \\"L\\" (12). 2. `s = \\"226\\"` Output: `3` Explanation: \\"226\\" could be decoded as \\"BZ\\" (2 26), \\"VF\\" (22 6), or \\"BBF\\" (2 2 6). 3. `s = \\"0\\"` Output: `0` Explanation: \\"0\\" cannot be decoded in any way. 4. `s = \\"10\\"` Output: `1` Explanation: \\"10\\" can only be decoded as \\"J\\" (10). Implement the function `num_decodings(s: str) -> int`.","solution":"def num_decodings(s: str) -> int: Given a string of digits, return the number of ways to decode it according to the mapping from \'1\' to \'9\' -> \'A\' to \'I\' and \'10\' to \'26\' -> \'J\' to \'Z\'. if not s or s[0] == \'0\': return 0 n = len(s) dp = [0] * (n + 1) # Base cases for empty string and single character dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): # Single digit decoding if s[i - 1] != \'0\': dp[i] += dp[i - 1] # Two digit decoding two_digit = int(s[i - 2:i]) if 10 <= two_digit <= 26: dp[i] += dp[i - 2] return dp[n]"},{"question":"You are given an array of integers with `n` elements and a series of `m` queries. Each query consists of two integers `L` and `R`. For each query, you are asked to find the sum of the integers in the subarray defined by the bounds `L` and `R` inclusive. Your task is to efficiently handle these queries using a preprocessing technique known as the Prefix Sum Array. # Input The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains `n` integers separated by spaces, representing the elements of the array. The third line contains an integer `m` (1 ≤ m ≤ 10^5), the number of queries. The next `m` lines each contain two integers `L` and `R` (1 ≤ L ≤ R ≤ n), representing the bounds of the subarray for the query. # Output For each query, print the sum of the elements in the subarray defined by the bounds `L` and `R`, inclusive. # Example Input ``` 5 1 2 3 4 5 3 1 3 2 4 1 5 ``` Output ``` 6 9 15 ``` # Explanation - For the first query with bounds `L=1` and `R=3`, the sum of elements in the subarray [1, 3] is `1 + 2 + 3 = 6`. - For the second query with bounds `L=2` and `R=4`, the sum of elements in the subarray [2, 4] is `2 + 3 + 4 = 9`. - For the third query with bounds `L=1` and `R=5`, the sum of elements in the subarray [1, 5] is `1 + 2 + 3 + 4 + 5 = 15`. # Constraints - To handle large input sizes within time limits, use a prefix sum array to preprocess the input array before answering the queries. - Assume that the input is 1-based index.","solution":"def preprocess_prefix_sum(arr): Preprocesses the input array to generate a prefix sum array. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1] return prefix_sum def range_sum(prefix_sum, L, R): Returns the sum of the subarray from L to R using the prefix sum array. return prefix_sum[R] - prefix_sum[L - 1] def process_queries(n, arr, queries): Processes a list of queries using the prefix sum technique. prefix_sum = preprocess_prefix_sum(arr) results = [] for L, R in queries: results.append(range_sum(prefix_sum, L, R)) return results"},{"question":"Given an integer `n` (1 ≤ n ≤ 12), write a function to calculate the nth Fibonacci number. The Fibonacci sequence is defined as follows: - Fib(1) = 1 - Fib(2) = 1 - Fib(n) = Fib(n-1) + Fib(n-2) for n > 2 Return the nth Fibonacci number as a single integer.","solution":"def fib(n): Returns the nth Fibonacci number. :param n: The position in the Fibonacci sequence (1 ≤ n ≤ 12). :return: The nth Fibonacci number. if n == 1 or n == 2: return 1 a, b = 1, 1 for _ in range(3, n + 1): a, b = b, a + b return b"},{"question":"John is working on a traffic light control system and he needs your help. The traffic lights in the system are represented by a list of integers. Each integer in the list can be: - (0) if the light is Green. - (1) if the light is Yellow. - (2) if the light is Red. John wants to simulate the next state of the traffic lights given a list representing the current state. The next state should be determined by the following rules: 1. Green (0) turns into Yellow (1). 2. Yellow (1) turns into Red (2). 3. Red (2) turns into Green (0). Your task is to write a function that takes a list of integers representing the current state of the traffic lights and returns a list of integers representing the next state of the traffic lights. # Input A single list ( text{lights} ) of integers where each integer is either 0, 1, or 2, representing the current state of the traffic lights. The length of the list is ( n ) where ( 1 leq n leq 1000 ). # Output A list of integers representing the next state of the traffic lights. # Example ```python def next_traffic_light_state(lights): # Your code here # Example 1 lights = [0, 1, 2, 0, 1] print(next_traffic_light_state(lights)) # Output: [1, 2, 0, 1, 2] # Example 2 lights = [2, 2, 2] print(next_traffic_light_state(lights)) # Output: [0, 0, 0] # Example 3 lights = [1, 0, 1, 0] print(next_traffic_light_state(lights)) # Output: [2, 1, 2, 1] ``` # Notes - The list will always contain at least one traffic light. - Each integer in the list will be either 0, 1, or 2.","solution":"def next_traffic_light_state(lights): Given a list of integers representing the current state of the traffic lights, returns a list of integers representing the next state of the traffic lights. return [(light + 1) % 3 for light in lights]"},{"question":"In recent times, social networks have become immensely popular, and being able to measure their influence has practical significance. You\'ve been hired as a software engineer to work on a web crawler used for analyzing social networks. Your task is to implement a particular functionality of the crawler. We define a social network as an undirected graph consisting of nodes and edges. Each node represents a user, and an edge between two nodes indicates a friendship between the corresponding users. Given an undirected graph with n nodes and m edges, you are to determine the size of the largest connected component in the graph. A connected component is a set of nodes such that there exists a path between any pair of nodes in this set. The input format is as follows: - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) representing the number of nodes and edges, respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating there\'s an undirected edge between node u and node v. Output the size of the largest connected component in the graph. Examples: Input: ``` 10 7 1 2 2 3 3 4 5 6 7 8 8 9 9 10 ``` Output: ``` 4 ``` Input: ``` 5 4 1 2 2 3 3 4 4 5 ``` Output: ``` 5 ``` Your task is to implement an efficient algorithm to detect the largest connected component in the given graph. The solution should be optimal to handle the upper constraint limits.","solution":"def largest_connected_component(n, edges): from collections import defaultdict, deque # Create the adjacency list for the graph adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (n + 1) largest_component_size = 0 # Helper function to perform BFS def bfs(node): queue = deque([node]) visited[node] = True component_size = 0 while queue: current = queue.popleft() component_size += 1 for neighbour in adjacency_list[current]: if not visited[neighbour]: visited[neighbour] = True queue.append(neighbour) return component_size # Traverse all nodes to find the largest component for node in range(1, n + 1): if not visited[node]: current_component_size = bfs(node) largest_component_size = max(largest_component_size, current_component_size) return largest_component_size"}]'),j={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},F={class:"card-container"},N={key:0,class:"empty-state"},z=["disabled"],L={key:0},R={key:1};function P(s,e,h,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",F,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),x(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",N,' No results found for "'+u(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",L,"See more"))],8,z)):l("",!0)])}const D=d(j,[["render",P],["__scopeId","data-v-364b8c2c"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/32.md","filePath":"deepseek/32.md"}'),C={name:"deepseek/32.md"},W=Object.assign(C,{setup(s){return(e,h)=>(n(),i("div",null,[v(D)]))}});export{M as __pageData,W as default};
