import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},k={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,p,a,r){return n(),i("div",T,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(q,[["render",O],["__scopeId","data-v-db4ca59d"]]),S=JSON.parse('[{"question":"Sam is passionate about numbers and mathematical sequences. He recently became interested in a unique sequence that he calls the \\"Repeated Fibonacci.\\" In the \\"Repeated Fibonacci\\" sequence, every element is the sum of the previous two elements, but each element can repeat a certain number of times before the sequence moves on to the next element. Your task is to help Sam generate the first n elements of this \\"Repeated Fibonacci\\" sequence, where the initial two numbers a and b and the repeat count r are given as input. # Problem: Given initial values a and b, a repeat count r, and a number n, generate the first n elements of the \\"Repeated Fibonacci\\" sequence. # Input: - The first line contains three integers a, b, and r (1 leq a, b leq 100), (1 leq r leq 50). - The second line contains an integer n (1 leq n leq 1000). # Output: - Print the first n elements of the \\"Repeated Fibonacci\\" sequence, each separated by a space. # Example Input 1: ``` 2 3 2 10 ``` # Example Output 1: ``` 2 2 3 3 5 5 8 8 13 13 ``` # Example Input 2: ``` 1 1 3 15 ``` # Example Output 2: ``` 1 1 1 1 1 1 2 2 2 3 3 3 5 5 5 ``` # Explanation: 1. For the first example: - The sequence starts with 2, which repeats twice; - Then 3, which repeats twice; - Then 2+3 = 5, which repeats twice; - Then 3+5 = 8, which repeats twice; - Then 5+8 = 13, which repeats twice, generating the first 10 elements as required. 2. For the second example: - The sequence starts with 1, which repeats three times; - Then 1 again, which repeats three times; - Then 1+1 = 2, which repeats three times; - Then 1+2 = 3, which repeats three times, and so on. Make sure to follow these rules to construct the sequence, taking into account the repeating behavior as specified.","solution":"def repeated_fibonacci(a, b, r, n): Generates the first n elements of the Repeated Fibonacci sequence. Args: a: int - The first number of the sequence. b: int - The second number of the sequence. r: int - The repeat count for each element in the sequence. n: int - The number of elements to generate. Returns: List[int] - The first n elements of the Repeated Fibonacci sequence. if n == 0: return [] sequence = [] sequence.extend([a] * r) if n <= len(sequence): return sequence[:n] sequence.extend([b] * r) if n <= len(sequence): return sequence[:n] i, j = a, b while len(sequence) < n: i, j = j, i + j sequence.extend([j] * r) return sequence[:n]"},{"question":"------ Problem Statement ------ Alicia is fascinated by prime numbers and has devised a game that involves finding prime numbers in a certain range. Given a range [L, R], Alicia wants to find out the sum of all prime numbers that are present within the range. However, calculating primes in a large range can be challenging, so she needs your help. Your task is to write a function that takes L and R as input and returns the sum of all prime numbers between L and R, inclusive. ------ Input ------ The first line of the input contains an integer T, denoting the number of test cases. The next T lines contain two space-separated integers, L and R, denoting the range. ------ Output ------ For each test case, output the sum of all prime numbers between L and R, inclusive. If there are no prime numbers in the range, output 0. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ L ≤ R ≤ 10^6 ------ Sample Input 1 ------ 3 10 20 1 10 14 14 ------ Sample Output 1 ------ 60 17 0 Note: The prime numbers between 10 and 20 are 11, 13, 17, 19, and their sum is 60. The prime numbers between 1 and 10 are 2, 3, 5, 7, and their sum is 17. There are no prime numbers in the range [14, 14], so the output is 0.","solution":"def sum_of_primes(L, R): Returns the sum of all prime numbers between L and R, inclusive. def sieve(n): Return a list of primes up to n using Sieve of Eratosthenes is_prime = [True] * (n + 1) p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] # Primes up to 10^6 primes = sieve(10**6) prime_set = set(primes) if L < 2: L = 2 # Compute the sum in the range return sum(p for p in primes if L <= p <= R) def process_input(T, ranges): Processes multiple ranges to find the sum of primes in each range. results = [] for L, R in ranges: results.append(sum_of_primes(L, R)) return results"},{"question":"A company is organizing a marathon in which participants run along a straight track. The track is marked with checkpoints at consistent intervals. Each participant\'s progress along the track is recorded as they reach certain checkpoints. Your job is to determine the number of participants who crossed at least one checkpoint. Each participant\'s progress is provided in distinct intervals. The intervals include the participant\'s starting and ending points along the track. A participant is considered to have crossed a checkpoint if their interval contains at least one of the checkpoints. -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains two space separated integers C and P: - C is the number of checkpoints. - P is the number of participants. - The second line of each test case contains C space separated integers representing the positions of the checkpoints. - The following lines contain two space separated integers a and b for each participant, representing the starting and ending points of their interval. -----Output:----- For each test case, output in a single line the number of participants who crossed at least one checkpoint. -----Constraints----- - 1 leq T leq 10^3 - 1 leq C leq 10^3 - 1 leq P leq 10^3 - 1 leq sum of all participants\' start and end points over all test cases leq 10^6 - 1 leq checkpoint position, start point, end point leq 10^9 -----Sample Input:----- 2 3 4 1 5 8 0 3 4 6 7 9 2 10 2 2 5 10 3 6 11 15 -----Sample Output:----- 4 1 -----Explanation:----- Test Case 1: Participant 1\'s interval [0, 3] contains checkpoint 1. Participant 2\'s interval [4, 6] contains checkpoint 5. Participant 3\'s interval [7, 9] contains checkpoint 8. Participant 4\'s interval [2, 10] contains checkpoints 5 and 8. All 4 participants have crossed at least one checkpoint. Test Case 2: Participant 1\'s interval [3, 6] contains no checkpoints. Participant 2\'s interval [11, 15] contains checkpoint 10. Only participant 2 has crossed at least one checkpoint.","solution":"def participants_crossed_checkpoints(T, test_cases): results = [] for idx in range(T): C, P = test_cases[idx][0] checkpoints = test_cases[idx][1] participant_intervals = test_cases[idx][2] crossed_count = 0 for start, end in participant_intervals: for checkpoint in checkpoints: if start <= checkpoint <= end: crossed_count += 1 break results.append(crossed_count) return results"},{"question":"Given an array of integers, write a function to find the maximum possible sum of a non-empty subarray that contains at most `k` distinct elements. A subarray is a contiguous part of the original array, and you are required to determine the subarray that meets the condition with the highest sum. Function Signature: ```python def max_sum_with_k_distinct(arr: List[int], k: int) -> int: ``` Example 1: ```plaintext Input: arr = [1, 2, 1, 2, 3], k = 2 Output: 6 Explanation: The subarray [1, 2, 1, 2] has the maximum sum of 6 with at most 2 distinct elements. ``` Example 2: ```plaintext Input: arr = [4, 1, 1, 3, 6], k = 1 Output: 6 Explanation: The subarray [6] has the maximum sum of 6 with at most 1 distinct element. ``` Constraints: - The length of the given array is at most 10000. - The value of each element in the array is between -10000 and 10000. - `k` is a positive integer less than or equal to the length of the array.","solution":"from collections import defaultdict from typing import List def max_sum_with_k_distinct(arr: List[int], k: int) -> int: Returns the maximum possible sum of a subarray with at most k distinct elements. left = 0 current_sum = 0 max_sum = float(\'-inf\') count = defaultdict(int) distinct_count = 0 for right in range(len(arr)): if count[arr[right]] == 0: distinct_count += 1 count[arr[right]] += 1 current_sum += arr[right] while distinct_count > k: count[arr[left]] -= 1 if count[arr[left]] == 0: distinct_count -= 1 current_sum -= arr[left] left += 1 if distinct_count <= k: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a list of N integers representing the heights of buildings, find the longest sequence of buildings such that the height of each building in the sequence is greater than the height of the previous building. Write a function that determines the length of this sequence. ------ Input Format ------ - The first line contains an integer N — the number of buildings. - The second line contains N space-separated integers H_{1}, H_{2}, ..., H_{N} where H_{i} is the height of the i^{th} building. ------ Output Format ------ Output a single integer representing the length of the longest increasing sequence of building heights. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ H_{i} ≤ 10^4 ------ Sample Input 1 ------ 6 2 5 1 8 3 6 ------ Sample Output 1 ------ 3 ----- Explanation 1 ------ In the input example, the longest increasing sequence is [2, 5, 8] or [1, 8, 6], which have lengths of 3. ------ Sample Input 2 ------ 5 5 4 3 2 1 ------ Sample Output 2 ------ 1 ----- Explanation 2 ------ In this case, no building is taller than the previous one, so the longest sequence is any single building, with length 1.","solution":"def longest_increasing_sequence(N, heights): Returns the length of the longest increasing sequence of buildings\' heights. Args: N : int : The number of buildings. heights : List[int] : The heights of the buildings. Returns: int : The length of the longest increasing sequence. if N == 0: return 0 # Initialize a list to store the length of the LIS ending at each index lis = [1] * N # Loop through the list to compute the LIS values for i in range(1, N): for j in range(i): if heights[i] > heights[j]: lis[i] = max(lis[i], lis[j] + 1) # The longest increasing subsequcne is the maximum value in the LIS list return max(lis)"},{"question":"You are given a binary tree where each node contains an integer value. Write a program to determine whether there exists a root-to-leaf path that sums up to a given number. A root-to-leaf path is a sequence of nodes in a tree starting from the root node and ending at any leaf node. The sum of a path is the sum of the values of all nodes in that path. Input The first line contains an integer value `targetSum` (1 ≤ targetSum ≤ 1000) — the sum you need to check for. The second line contains an integer `n` (0 ≤ n ≤ 1000) — the number of nodes in the tree. Each of the next n lines contains three integers `value`, `left_index` and `right_index`. Here `value` is the value stored in the node, and `left_index` and `right_index` are the indices of the left and right children, respectively. A value of -1 indicates that the child doesn\'t exist. Output Print \\"Yes\\" (without quotes) if there exists a root-to-leaf path such that adding up all the values along the path equals `targetSum`. Otherwise, print \\"No\\". Example Input ``` 22 6 5 1 2 4 3 4 8 -1 5 11 -1 -1 13 -1 -1 4 -1 -1 ``` Output ``` Yes ``` Note In the given example, the binary tree is constructed as follows: 5 / 4 8 / / 11 13 4 The function should return \\"Yes\\" because the path 5 -> 8 -> 4 gives us the required sum 22.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def hasPathSum(root, targetSum): if not root: return False if not root.left and not root.right and root.val == targetSum: return True targetSum -= root.val return hasPathSum(root.left, targetSum) or hasPathSum(root.right, targetSum) def buildTree(nodes): if not nodes: return None tree = [None] * len(nodes) for i in range(len(nodes)): if nodes[i][0] != -1: # if the node value is not -1 tree[i] = TreeNode(nodes[i][0]) for i in range(len(nodes)): if nodes[i][1] != -1: tree[i].left = tree[nodes[i][1]] if nodes[i][2] != -1: tree[i].right = tree[nodes[i][2]] return tree[0] def checkRootToLeafPath(targetSum, n, nodes): if n == 0: return \\"No\\" root = buildTree(nodes) if hasPathSum(root, targetSum): return \\"Yes\\" return \\"No\\""},{"question":"# Description: Given a list of integers, return a new list such that each element at index `i` of the new list is the product of all the numbers in the original list except the one at `i`. # Examples ``` product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6] product_except_self([5, 6, 7, 8]) == [336, 280, 240, 210] product_except_self([2, 3, 4]) == [12, 8, 6] product_except_self([0, 1, 2, 3]) == [6, 0, 0, 0] product_except_self([1, 1, 1, 1]) == [1, 1, 1, 1] ```","solution":"def product_except_self(nums): Return a list such that each element at index i of the new list is the product of all the numbers in the original list except the one at i. length = len(nums) result = [1] * length # Create an array of length `nums` filled with 1s # Traverse from left to right left = 1 for i in range(length): result[i] = left left *= nums[i] # Traverse from right to left right = 1 for i in reversed(range(length)): result[i] *= right right *= nums[i] return result"},{"question":"Given an integer N, generate all unique combinations of balanced parentheses that can be formed using N pairs of parentheses. For example, for N=3, the possible combinations include ((())), (()()), (())(), ()(()), and ()()(). Constraints * 1 leq N leq 10 Input The input is given in the following format. N Output Print each unique combination of balanced parentheses in a new line, in any order. Example Input 3 Output ((())) (()()) (())() ()(()) ()()()","solution":"def generate_parentheses(n): Generates all unique combinations of balanced parentheses for n pairs. :param n: Number of pairs of parentheses :type n: int :return: List of strings, where each string represents a unique combination of balanced parentheses :rtype: list def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack() return result"},{"question":"Given an array of n integers and a range [l, r], find the maximum value of the sum of all the subarrays that lie completely within the range [l, r]. ----Constraints---- - 1 ≤ n ≤ 10^5 - 1 ≤ array[i] ≤ 10^5 - 1 ≤ l, r ≤ n (l ≤ r) -----Input----- The input is given from Standard Input in the following format: n array l r -----Output----- Print the maximum sum of any subarray within the range [l, r]. -----Sample Input----- 5 1 2 3 4 5 2 4 -----Sample Output----- 9 (The subarray [2, 3, 4] has the maximum sum)","solution":"def max_subarray_sum(arr, l, r): Returns the maximum sum of any subarray within the range [l, r]. :param arr: list[int], list of integers representing the array :param l: int, start index of the range (1-based index) :param r: int, end index of the range (1-based index) :return: int, maximum sum of subarray within the given range # Convert l and r from 1-based index to 0-based index l -= 1 r -= 1 # Extract the subarray from l to r inclusive subarray = arr[l:r+1] # Initialize variables for Kadane\'s algorithm max_sum = -float(\'inf\') current_sum = 0 # Apply Kadane\'s algorithm to find the maximum subarray sum for num in subarray: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are a hardware store manager who wants to manage the stock levels of various products in the store. The store sells different types of items, each identified by a unique item code (an integer). You need to ensure that stock levels are always kept up-to-date based on transactions. Each transaction can be either a sale (which decreases stock), a restock (which increases stock), or a query (to check the current stock level of an item). You have decided to write a computer program to automate this process. Your program should accept a series of transactions and provide the current stock level for an item when a query is made. Transaction Format: - A sale transaction is represented as \\"S <item_code> <quantity>\\". - A restock transaction is represented as \\"R <item_code> <quantity>\\". - A query transaction is represented as \\"Q <item_code>\\". Your program should output the stock level for each query transaction. Assume that all item codes will be positive integers and quantities will be non-negative integers. There will be no negative stock levels (i.e., a sale transaction will never reduce the stock below zero). INPUT FORMAT - A series of transactions, one per line. - The input terminates when the program encounters the word \\"END\\". OUTPUT FORMAT - For each query transaction, output the current stock level of the specified item. SAMPLE INPUT R 101 10 S 101 2 Q 101 R 102 5 Q 102 S 101 3 Q 101 END SAMPLE OUTPUT 8 5 5 Implement a program that manages stock levels as described.","solution":"def manage_stock(transactions): stock_levels = {} output = [] for transaction in transactions: parts = transaction.split() if len(parts) == 1 and parts[0] == \\"END\\": break transaction_type, item_code = parts[0], int(parts[1]) if transaction_type == \\"R\\": quantity = int(parts[2]) if item_code in stock_levels: stock_levels[item_code] += quantity else: stock_levels[item_code] = quantity elif transaction_type == \\"S\\": quantity = int(parts[2]) if item_code in stock_levels and stock_levels[item_code] >= quantity: stock_levels[item_code] -= quantity elif transaction_type == \\"Q\\": output.append(stock_levels.get(item_code, 0)) return output # Example usage, should output [8, 5, 5] # print(manage_stock([ # \\"R 101 10\\", # \\"S 101 2\\", # \\"Q 101\\", # \\"R 102 5\\", # \\"Q 102\\", # \\"S 101 3\\", # \\"Q 101\\", # \\"END\\" # ]))"},{"question":"Yash has an array a1, a2, ..., aN and Q queries. Each query consists of three integers l, r, and k. For each query, you need to count how many integers in the range l to r (inclusive) are greater than or equal to k. INPUT: The first line contains two integers N and Q. The next line contains N integers, representing the array a1, a2, ..., aN. The next Q lines each contain three integers l, r, and k. OUTPUT: Output Q integers, where the i-th integer is the answer to the i-th query. CONSTRAINTS: 1 ≤ N, Q ≤ 10^5 1 ≤ ai ≤ 10^9 1 ≤ l ≤ r ≤ N SAMPLE INPUT: 5 3 1 3 5 7 9 1 4 4 2 5 6 1 5 8 SAMPLE OUTPUT: 2 2 1 Explanation: For the 1st query, the integers in the range [1, 4] are {1, 3, 5, 7}. Among these, integers >= 4 are {5, 7}, which makes the count 2. For the 2nd query, the integers in the range [2, 5] are {3, 5, 7, 9}. Among these, integers >= 6 are {7, 9}, which makes the count 2. For the 3rd query, the integers in the range [1, 5] are {1, 3, 5, 7, 9}. Among these, the integer >= 8 is {9}, which makes the count 1.","solution":"def count_elements_greater_or_equal(arr, queries): For each query, count how many numbers in the range l to r (1-indexed) are greater than or equal to k. :param arr: List of integers representing the array :param queries: List of tuples, each containing three integers (l, r, k) :return: List of integers, each representing the result of a query results = [] for query in queries: l, r, k = query count = sum(1 for i in range(l-1, r) if arr[i] >= k) results.append(count) return results"},{"question":"Problem: Conduit of Ladders Alice is playing a game with ladders and needs your help to figure out the number of distinct ways to build ladders using rods of various lengths. Each ladder must be formed such that the total height of the ladder is exactly `d` units, and each rod can be used at most once. Each rod has a unique length between 1 and `n` inclusive, and the lengths are given in an array. Your task is to calculate the number of possible distinct ladders that can be formed using these rods such that the total height is exactly `d` units. Input The input consists of a single test case in the following format: ``` n d l1 l2 l3 ... ln ``` - `n` is an integer representing the number of rods. - `d` is an integer representing the desired height of the ladder. - `l1, l2, l3, ... ln` represents the lengths of the rods, separated by spaces. Constraints - 1 ≤ n ≤ 30 - 1 ≤ d ≤ 100 Output Output a single integer - the number of distinct ways to construct a ladder with the exact height `d` using the rods provided. Sample Input 1 ``` 5 5 1 2 3 4 5 ``` Sample Output 1 ``` 3 ``` Sample Input 2 ``` 4 6 2 3 4 6 ``` Sample Output 2 ``` 2 ``` Sample Input 3 ``` 3 10 2 4 8 ``` Sample Output 3 ``` 1 ``` Explanation: In Sample Input 1, there are 3 ways to make a ladder of height 5 using the rods: 1. [5] 2. [1, 4] 3. [2, 3] In Sample Input 2, there are 2 ways to make a ladder of height 6 using the rods: 1. [6] 2. [2, 4] In Sample Input 3, there is only 1 way to make a ladder of height 10 using the rods: 1. [2, 8]","solution":"def count_ladders(n, d, rods): Calculate the number of distinct ways to build ladders using given rods such that the total height is exactly d units. from itertools import combinations count = 0 # Iterate over all possible lengths of combinations for r in range(1, n + 1): for combo in combinations(rods, r): if sum(combo) == d: count += 1 return count"},{"question":"In a particular city, there are N houses built along a straight street. The street is represented as an array A of length N, where A[i] denotes the number of people living in the i-th house. The government plans to build one or more medical facilities along this street to minimize the maximum distance a resident has to travel to the nearest facility. You are tasked with determining the minimum of such maximum distances that can be achieved if we decide to build exactly F facilities. The distance between two houses i and j is defined as the absolute difference |i - j|. Write a function `minimize_max_distance` that takes in two integers, N (number of houses) and F (number of facilities), and an array A of length N representing the number of people in each house, and returns the minimum possible maximum distance any resident must travel to reach the nearest facility. **Example:** ```python A = [1, 2, 3, 4, 5] N = 5 F = 1 minimize_max_distance(N, F, A) should return 4 A = [1, 2, 3, 4, 5] N = 5 F = 2 minimize_max_distance(N, F, A) should return 2 A = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] N = 10 F = 3 minimize_max_distance(N, F, A) should return 3 ``` In the first example, building one facility results in a worst-case travel distance of 4 (if the single facility is in the middle). In the second example, with two facilities, the worst-case travel distance reduces to 2 if placed optimally. In the third, three facilities would mean the worst-case travel distance reduces further.","solution":"def minimize_max_distance(N, F, A): Given a number of houses along a street and a number of medical facilities to build, determine the minimum possible maximum distance any resident must travel to reach the nearest facility. :param N: int - Number of houses :param F: int - Number of facilities to build :param A: list of int - Number of people in each house (not directly relevant to the solution) :return: int - Minimum possible maximum distance any resident must travel def can_place_facilities(max_distance): count = 1 # Place the first facility at the first house last_position = 0 # Last placed facility position for i in range(1, N): if i - last_position > max_distance: count += 1 last_position = i if count > F: return False return True left, right = 0, N - 1 while left < right: mid = (left + right) // 2 if can_place_facilities(mid): right = mid else: left = mid + 1 return left"},{"question":"Given an array of n non-negative integers, you are required to find the maximum sum of elements such that no two elements are adjacent. The adjacent elements are defined as elements having indices i and i+1 (i.e., they differ by exactly 1). Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^4). Output: - Output a single integer, the maximum sum of non-adjacent elements. Example 1: Input: 5 3 2 5 10 7 Output: 15 Example 2: Input: 3 3 2 7 Output: 10 Note: In the first example, the maximum sum of non-adjacent elements can be obtained by picking 3, 5, and 7, resulting in a sum of 15. In the second example, the maximum sum can be obtained by picking 3 and 7, resulting in a sum of 10. The challenge is to find an optimized solution that works efficiently for large inputs.","solution":"def max_non_adjacent_sum(arr): if not arr: return 0 if len(arr) == 1: return arr[0] prev = 0 curr = 0 for num in arr: new_curr = max(curr, prev + num) prev = curr curr = new_curr return curr"},{"question":"Given an array of integers and a target sum, determine if any two numbers in the array add up to the target sum. Return the indices of the two numbers in an array if found, otherwise return an empty array. Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] = 2 + 7 = 9, we return [0, 1]. Example 2: Input: nums = [3, 2, 4] target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] = 2 + 4 = 6, we return [1, 2]. Example 3: Input: nums = [3, 3] target = 6 Output: [0, 1] Explanation: Because nums[0] + nums[1] = 3 + 3 = 6, we return [0, 1]. Your Task: You only need to complete the function twoSum() that returns an array containing the indices of the two numbers that add up to the target, or an empty array if such a pair does not exist. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 2 ≤ |nums| ≤ 10^5 -10^9 ≤ nums[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def twoSum(nums, target): Given an array of integers and a target sum, determine if any two numbers in the array add up to the target sum. Return the indices of the two numbers in an array if found, otherwise return an empty array. num_to_index = {} for i, num in enumerate(nums): diff = target - num if diff in num_to_index: return [num_to_index[diff], i] num_to_index[num] = i return []"},{"question":"=====Function Descriptions===== mean The mean function computes the arithmetic mean along the specified axis. import numpy my_array = numpy.array([[1, 2], [3, 4]]) print numpy.mean(my_array, axis=0) #[ 2. 3.] print numpy.mean(my_array, axis=1) #[ 1.5 3.5] sum The sum function returns the sum of array elements over a given axis. import numpy my_array = numpy.array([[1, 2], [3, 4]]) print numpy.sum(my_array, axis=0) #[ 4 6] print numpy.sum(my_array, axis=1) #[ 3 7] transpose The transpose function permutes the dimensions of an array. import numpy my_array = numpy.array([[1, 2], [3, 4]]) print numpy.transpose(my_array) #[[1 3] # [2 4]] =====Problem Statement===== You are given a 2-D array, A. Your task is to print the mean, sum and transpose of the array. =====Input Format===== The first line contains two integers separated by a space, representing the number of rows (N) and columns (M) for the array. The next N lines each contain M integers separated by spaces representing the elements of the array. =====Output Format===== On the first line, print the mean of the array along axis 1. On the second line, print the sum of the array along axis 0. On the third line, print the transpose of the array.","solution":"import numpy as np def compute_array_statistics(N, M, array_input): # Convert the input list into a numpy array my_array = np.array(array_input) # Compute mean along axis 1 mean_axis_1 = np.mean(my_array, axis=1) # Compute sum along axis 0 sum_axis_0 = np.sum(my_array, axis=0) # Compute transpose of the array transpose_array = np.transpose(my_array) return mean_axis_1.tolist(), sum_axis_0.tolist(), transpose_array.tolist()"},{"question":"A company wants to optimize the distribution of its limited workforce to complete a set of projects before a deadline. Each project requires a certain number of employees and a specific amount of time to be completed. The company wants to maximize the number of completed projects within the given constraints. Given the number of available employees and the total available work hours, determine the maximum number of projects that can be completed. ------ Input Format ------ - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case contains three lines of input. - The first line of each test case contains two space-separated integers E (number of available employees) and H (total available work hours). - The second line contains a single integer P denoting the number of projects. - The third line contains P pairs of space-separated integers, where the first integer in each pair is the number of employees required for the project and the second integer is the amount of time required to complete the project. ------ Output Format ------ For each test case, print a single line containing one integer - the maximum number of projects that can be completed. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ E ≤ 10^5 1 ≤ H ≤ 10^9 1 ≤ P ≤ 10^4 1 ≤ text{employees_required} ≤ 10^5 1 ≤ text{time_required} ≤ 10^9 The sum of the number of projects in all test cases does not exceed 10^5. ------ Sample Input 1 ------ 2 5 10 3 2 5 3 4 4 8 8 20 4 2 5 2 6 3 7 4 8 ------ Sample Output 1 ------ 2 3 ------ Explanation 1 ------ Test case 1: Out of the available 5 employees and 10 hours, we can complete at most two projects: - Assign 2 employees to the first project which takes 5 hours. - Then, assign 3 employees to the second project which takes 4 hours. - The third project cannot be started since it requires 4 employees and takes 8 hours, which exceeds the remaining resources. Test case 2: Out of the available 8 employees and 20 hours, we can maximize the completed projects as follows: - Select the projects that require fewer resources first. - Thus, we can complete the first project (2 employees, 5 hours), the second project (2 employees, 6 hours), and the third project (3 employees, 7 hours). - The fourth project cannot be completed as we already consumed available resources.","solution":"def maximize_projects(T, test_cases): results = [] for case in test_cases: E, H, P, projects = case # Sort projects by lesser employees required and then by lesser time required projects.sort(key=lambda x: (x[0], x[1])) completed_projects = 0 for employees_required, time_required in projects: if E >= employees_required and H >= time_required: E -= employees_required H -= time_required completed_projects += 1 else: break results.append(completed_projects) return results #Reading input def process_input(input_data): lines = input_data.split(\'n\') T = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(T): E, H = map(int, lines[index].strip().split()) P = int(lines[index + 1].strip()) projects = [] for i in range(P): employees_required, time_required = map(int, lines[index + 2 + i].strip().split()) projects.append((employees_required, time_required)) test_cases.append((E, H, P, projects)) index += 2 + P return T, test_cases def main(input_data): T, test_cases = process_input(input_data) return maximize_projects(T, test_cases)"},{"question":"A company has recently launched a new data storage system that organizes files in a tree-like folder structure. Each folder and file can be uniquely identified by an id. The company wants to understand the depth of the folder structure, i.e., the maximum number of nested subfolders. You are provided with information about the parent-child relationships in the folder structure. Each folder or file has a unique id and you are given the parent id for each folder or file except for the root (which has a parent id of -1). Write a function to calculate the maximum depth of the folder structure. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of folders and files. Each of the next n lines contains two integers x and p (0 ≤ x, p ≤ 10^5), indicating that item x has parent p. For the root item, p will be -1. -----Output----- Print an integer, the maximum depth of the folder structure. -----Examples----- Input 5 1 -1 2 1 3 1 4 2 5 4 Output 4 Input 3 1 -1 2 1 3 1 Output 2 -----Note----- In the first example, the folder structure can be visualized as: 1 |__2 | |__4 | |__5 |__3 The maximum depth is 4. In the second example, the folder structure is: 1 |__2 |__3 The maximum depth is 2.","solution":"def max_depth(n, folder_structure): from collections import defaultdict # Create an adjacency list representation of the folder structure tree = defaultdict(list) root = None for x, p in folder_structure: if p == -1: root = x else: tree[p].append(x) def dfs(node): if not tree[node]: return 1 return 1 + max(dfs(child) for child in tree[node]) return dfs(root)"},{"question":"You are given a grid with N rows and M columns. Your task is to determine the number of ways to move from the top-left corner of the grid to the bottom-right corner. You can move only right or down at any point in time. Additionally, certain cells in the grid are blocked and cannot be traversed. The grid is given as a 2D list where 0 represents a traversable cell and 1 represents a blocked cell. Find the total number of unique paths to get from the top-left corner to the bottom-right corner avoiding all blocked cells. Example 1: Input: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 Explanation: There are two paths to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: grid = [ [0, 1], [0, 0] ] Output: 1 Explanation: There is only one path to reach the bottom-right corner: Down -> Right Your Task: You don\'t need to take any input. Complete the function `uniquePaths` that takes an array named `grid` as parameter and returns the number of unique paths to the bottom-right corner. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 100","solution":"def uniquePaths(grid): Returns the number of unique paths from top-left corner to bottom-right corner of the grid while avoiding obstacles. # Check for an empty grid if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) # If the starting or the ending cell is blocked, return 0 as no paths exist if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # Create a dp table to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"It\'s the annual company picnic, and the company has decided to organize a fun relay race. Each of the N employees has a different running ability represented by their running speed. The race is a series of legs where each employee will run exactly once. To make the race fair and fun for everyone, the company has decided that no employee should run consecutively. That is, no employee should run both leg i and leg i+1 of the race. Given the speeds of all N employees, your task is to determine the maximum possible sum of the speeds for the race while ensuring no employee runs consecutively. You can choose any subset of the employees\' speeds that adheres to the consecutive rule while maximizing the overall speed. -----Input:----- - The first line consists of the number T representing the number of test cases. - Each test case consists of 2 lines. - The first line contains the number N representing the number of employees. - The second line contains space-separated numbers (S[1] to S[N]) representing the running speeds of each employee. -----Output:----- For each test case, you must print the maximum possible sum of speeds for the race. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq S[i] leq 10^4 -----Sample Input:----- 2 5 3 2 5 10 7 3 1 2 3 -----Sample Output:----- 15 3","solution":"def max_non_consecutive_sum(speeds): n = len(speeds) if n == 0: return 0 if n == 1: return speeds[0] # dp[i] will store the maximum sum of speeds we can get considering the first i employees dp = [0] * n dp[0] = speeds[0] dp[1] = max(speeds[0], speeds[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + speeds[i]) return dp[-1] def solve_race(inputs): index = 0 results = [] T = int(inputs[index]) index += 1 for _ in range(T): N = int(inputs[index]) index += 1 speeds = list(map(int, inputs[index].split())) index += 1 results.append(max_non_consecutive_sum(speeds)) return results"},{"question":"Problem description. Mariana wants to create a string S of length exactly N using the letters \'a\' and \'b\'. She must follow a special rule: she can only place the letter \'a\' if the previous letter is not \'a\'. In other words, two consecutive \'a\'s are not allowed, but two consecutive \'b\'s are allowed. You are tasked with determining how many distinct strings S of length N Mariana can create following this rule. Input The first line contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the length of the string Mariana wants to create. Output For each test case, output a single line containing the number of distinct strings of length N that can be created following Marianna\'s rule. Constraints 1 <= T <= 20 1 <= N <= 50 Example Input: 3 1 2 3 Output: 2 3 5","solution":"def count_valid_strings(N): if N == 1: return 2 # \'a\' and \'b\' # Initialize arrays for dynamic programming end_with_a = [0] * (N + 1) end_with_b = [0] * (N + 1) # Base cases end_with_a[1] = 1 end_with_b[1] = 1 # Fill the arrays using the recurrence relations for i in range(2, N + 1): end_with_a[i] = end_with_b[i-1] end_with_b[i] = end_with_a[i-1] + end_with_b[i-1] # The total number of valid strings of length N return end_with_a[N] + end_with_b[N] def solve(test_cases): results = [] for N in test_cases: results.append(count_valid_strings(N)) return results"},{"question":"You are given an array of integers where each element represents the height of a tree. You need to find out how many water traps (or pockets) are formed after raining across the given trees. A water trap is a pocket that will hold rainwater and is formed between two higher trees with smaller or equal heights in between. For example, given heights [4, 1, 1, 0, 2, 3], the water traps are formed at indices 1, 2, and 3, and they hold a total of 8 units of water. -----Input----- The first line contains a single integer n (1 leq n leq 1000) — the number of trees. The next line contains an array of n non-negative integers representing the heights of the trees. -----Output----- Print a single integer — the total amount of water trapped after raining. -----Examples----- Input 6 4 1 1 0 2 3 Output 8 Input 5 3 0 2 0 4 Output 7 Input 3 1 0 1 Output 1 -----Note----- In the first example, the heights of the trees form three pockets: between 4 and 2, 4 and 3, and 2 and 3. The water trapped in these pockets sums up to 8 units. In the second example, the heights of the trees form two pockets: between 3 and 2, and 2 and 4. The water trapped is 3 + 2 + 2 = 7 units.","solution":"def calculate_water_trap(heights): n = len(heights) if n <= 2: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"A company is organizing a game where employees form pairs to participate in different events. Each employee has a unique skill level represented by an integer. The company wants to ensure that pairs formed have minimal skill level differences, so the game is fair for everyone. Write a program that takes the number of employees and their skill levels, and outputs the minimal possible maximum skill level difference between any two consecutive pairs. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - The first line of each test case contains an integer N denoting the number of employees. - The second line contains N space-separated integers Ai denoting the skill levels of the employees. -----Output----- - For each test case, output a single line containing an integer corresponding to the minimal possible maximum skill level difference between any two consecutive pairs. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ Ai ≤ 109 -----Subtasks----- - Subtask #1 (10 points): N ≤ 10 - Subtask #2 (30 points): N ≤ 100 - Subtask #3 (60 points): N ≤ 105 -----Example----- Input: 3 4 1 2 3 4 4 1 5 10 15 6 1 3 3 5 6 7 Output: 1 4 1 -----Explanation----- Example case 1. The pairs can be formed as follows: (1,2), (3,4). The maximum difference in any pair is 1. Example case 2. The pairs can be formed as follows: (1,5), (10,15). The maximum difference in any pair is 4. Example case 3. The pairs can be formed as follows: (1,3), (3,5), (6,7). The maximum difference in any pair is 1.","solution":"def minimal_max_difference(T, test_cases): results = [] for i in range(T): N, skill_levels = test_cases[i] skill_levels.sort() min_max_diff = float(\'inf\') # Pairing the employees such that the difference is minimal for j in range(0, N-1, 2): current_diff = skill_levels[j+1] - skill_levels[j] min_max_diff = min(min_max_diff, current_diff) results.append(min_max_diff) return results # Example usage: T = 3 test_cases = [ (4, [1, 2, 3, 4]), (4, [1, 5, 10, 15]), (6, [1, 3, 3, 5, 6, 7]) ] print(minimal_max_difference(T, test_cases))"},{"question":"In modern warehouses, robots are used to move items from one place to another. The robots are controlled by a central system that assigns tasks based on the shortest route needed to move items. Each robot can travel through designated paths that connect different points in the warehouse. These paths can have varying lengths, and in some cases, it is more efficient for the robot to take a longer but less congested path. Your task is to develop an algorithm to determine the shortest path for a robot to travel from a starting point to a destination within the warehouse. The robot may pass through any number of intermediate points, but you should ensure the total travel distance is minimized. -----Input----- The first line of the input contains three integers n, m, and q, where n is the number of points in the warehouse, m is the number of paths between the points, and q is the number of queries about travel distances. Each of these integers is no larger than 100,000. The next m lines each contain three non-negative integers: the first two integers represent the points connected by a path, and the third integer is the length of that path, a positive integer no larger than 1,000,000. The following q lines each contain two integers, representing a query to find the shortest path between two points. -----Output----- For each query, output a line containing the shortest distance between the two queried points. If there does not exist a path between the points, output -1. -----Examples----- Sample Input: 5 7 3 0 1 2 0 2 4 1 2 1 1 3 7 2 3 3 2 4 5 3 4 1 0 3 3 4 0 4 Sample Output: 6 1 7","solution":"def shortest_paths(n, m, paths, q, queries): inf = float(\'inf\') # Initialize the distance matrix dist = [[inf] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Add all the given paths to the distance matrix for u, v, w in paths: dist[u][v] = min(dist[u][v], w) dist[v][u] = min(dist[v][u], w) # Floyd-Warshall Algorithm to find all pair shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][k] + dist[k][j] < dist[i][j]: dist[i][j] = dist[i][k] + dist[k][j] # Process each query and prepare the results results = [] for u, v in queries: if dist[u][v] == inf: results.append(-1) else: results.append(dist[u][v]) return results"},{"question":"A company has multiple departments, each with a unique project. Every employee in the company is part of exactly one department, and each department\'s project has a specific priority and deadline. Your task is to process a series of commands to update the project information and answer queries about the earliest project deadline across specific departments. Commands: - `update(id, new_deadline)`: Update the deadline of the project for the department with given `id` to `new_deadline`. - `query(l, r)`: Find and report the smallest (earliest) deadline among the projects from department `id = l` to department `id = r` inclusive. Constraints: - `1 <= n <= 100,000`: Number of departments. - `1 <= q <= 200,000`: Number of commands. - `1 <= id, l, r <= n` - `1 <= new_deadline <= 1,000,000` Input: - The first line contains two integers `n` and `q`, the number of departments and the number of commands, respectively. - The next line contains `n` integers representing the initial deadlines of the projects for each department. - The following `q` lines describe each command in one of two formats: - `0 id new_deadline`: Update the deadline of the project for the department with `id` to `new_deadline`. - `1 l r`: Query the smallest deadline among the projects from department `l` to department `r` inclusive. Output: - For each query command, output the smallest deadline among the specified range of departments. Example: Input: ``` 5 4 10 20 5 15 25 1 1 3 0 2 6 1 1 3 1 1 5 ``` Output: ``` 5 5 5 ``` Explanation: - The initial deadlines for the projects are [10, 20, 5, 15, 25]. - The first query asks for the smallest deadline between departments `1` and `3`, which are `10`, `20`, `5`, so the answer is `5`. - The second command updates the deadline for the department `2` to `6`. The new deadlines are [10, 6, 5, 15, 25]. - The third query asks again for the smallest deadline between departments `1` and `3`, which are now `10`, `6`, `5`, so the answer remains `5`. - The fourth query asks for the smallest deadline between departments `1` and `5`, which are `10`, `6`, `5`, `15`, `25`, so the answer is `5`.","solution":"import sys from bisect import bisect_left, bisect_right def create_segment_tree(arr, n): seg_tree = [sys.maxsize] * 4 * n build(seg_tree, arr, 0, n - 1, 0) return seg_tree def build(seg_tree, arr, start, end, node): if start == end: seg_tree[node] = arr[start] else: mid = (start + end) // 2 build(seg_tree, arr, start, mid, 2 * node + 1) build(seg_tree, arr, mid + 1, end, 2 * node + 2) seg_tree[node] = min(seg_tree[2 * node + 1], seg_tree[2 * node + 2]) def update(seg_tree, start, end, idx, value, node): if start == end: seg_tree[node] = value else: mid = (start + end) // 2 if start <= idx <= mid: update(seg_tree, start, mid, idx, value, 2 * node + 1) else: update(seg_tree, mid + 1, end, idx, value, 2 * node + 2) seg_tree[node] = min(seg_tree[2 * node + 1], seg_tree[2 * node + 2]) def query(seg_tree, qs, qe, start, end, node): if qs <= start and qe >= end: return seg_tree[node] if end < qs or start > qe: return sys.maxsize mid = (start + end) // 2 left = query(seg_tree, qs, qe, start, mid, 2 * node + 1) right = query(seg_tree, qs, qe, mid + 1, end, 2 * node + 2) return min(left, right) def process_commands(n, commands, deadlines): seg_tree = create_segment_tree(deadlines, n) results = [] for command in commands: if command[0] == 0: # update command _, id, new_deadline = command update(seg_tree, 0, n - 1, id - 1, new_deadline, 0) elif command[0] == 1: # query command _, l, r = command result = query(seg_tree, l - 1, r - 1, 0, n - 1, 0) results.append(result) return results # Example usage: # n, q = 5, 4 # deadlines = [10, 20, 5, 15, 25] # commands = [(1, 1, 3), (0, 2, 6), (1, 1, 3), (1, 1, 5)] # print(process_commands(n, commands, deadlines)) # Output: [5, 5, 5]"},{"question":"Given an integer array of size N, partition the array into two sub-arrays (possibly empty) such that the difference between the sum of the elements in the two sub-arrays is minimized. Return the minimum difference. Example 1: Input: N = 4 array = [1, 6, 11, 5] Output: 1 Explanation: The array can be partitioned into sub-arrays {[1, 5, 6], [11]} or {[1, 6, 5], [11]} or any other valid partitions producing a difference of the sums 1. Example 2: Input: N = 3 array = [10, 20, 15] Output: 5 Explanation: The array can be partitioned into sub-arrays {[10, 15], [20]} or {[10], [20, 15]} or any other valid partitions producing a difference of the sums 5. Your task: You don\'t need to read input or print anything. Your task is to complete the function minPartitionDiff(), which takes an array and an integer N as input parameters and returns the minimum difference of the partition. Expected Time Complexity: O(N * sum) Expected Auxiliary Space: O(N * sum) Constraints: 1 <= N <= 20 1 <= array[i] <= 100","solution":"def minPartitionDiff(N, array): Function to minimize the difference between the sum of elements in two sub-arrays. total_sum = sum(array) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for num in array: for j in range(half_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(half_sum, -1, -1): if dp[i]: return total_sum - 2 * i # Example to demonstrate the usage. print(minPartitionDiff(4, [1, 6, 11, 5])) # Output: 1 print(minPartitionDiff(3, [10, 20, 15])) # Output: 5"},{"question":"During a video game match, a player collects various types of power-ups. Each power-up has a unique ID and a certain duration for which it is effective after being collected. Power-ups of the same type cannot be stacked, so collecting the same power-up again before its duration expires will reset the duration to the maximum value for that power-up. Given the sequence in which the player collects the power-ups and their respective durations, you are to determine the total number of distinct power-ups active at the end of the match. Input The first line contains an integer n (1 ≤ n ≤ 2·105) — the number of power-ups collected during the game. The next n lines each contain an integer pi (1 ≤ pi ≤ 109) and an integer di (1 ≤ di ≤ 109) — the ID of the power-up and the duration (in seconds) for which it remains active. Output Print a single integer — the number of distinct active power-ups at the end of the match. Examples Input 5 1 10 2 5 1 20 3 10 2 15 Output 3 Input 3 1 10 2 10 3 10 Output 3 Input 4 1 30 1 20 1 10 1 40 Output 1","solution":"def active_powerups(n, powerups): Returns the count of distinct active power-ups at the end of the match. Args: n : int : number of power-ups collected powerups : list of tuple : each tuple contains (power-up ID, and its duration) Returns: int : number of distinct active power-ups active_powerups = {} for pu_id, duration in powerups: active_powerups[pu_id] = duration return len(active_powerups)"},{"question":"Given a matrix, find the number of distinct paths from the top-left to the bottom-right corner of the matrix, such that you can only move either down or right at any point in time. Additionally, certain cells are blocked, and you cannot pass through those cells. # Input Format - The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) — the dimensions of the matrix. - The next `m` lines contain `n` characters each, with each character either being `.` (an open cell) or `#` (a blocked cell). # Output Format - Output a single integer — the number of distinct paths from the top-left to the bottom-right of the matrix. # Notes - The top-left and bottom-right cells are always open (i.e., they will always contain a `.`). # Example Input ``` 3 3 . . . . # . . . . ``` Output ``` 2 ``` In this example, there are two paths: 1. Right → Down → Down → Right 2. Down → Right → Right → Down","solution":"def unique_paths_with_obstacles(matrix): m = len(matrix) n = len(matrix[0]) # Create a 2D dp array initializing zeros everywhere dp = [[0]*n for _ in range(m)] # Initialize the starting point dp[0][0] = 1 if matrix[0][0] == \'.\' else 0 # Fill the dp array for i in range(m): for j in range(n): if matrix[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The bottom-right corner will have the number of unique paths return dp[-1][-1] # Function to parse the input and call the path finding function def find_unique_paths(m, n, grid): matrix = [list(row) for row in grid] return unique_paths_with_obstacles(matrix) # Example usage # grid = [ # \\". . .\\", # \\". # .\\", # \\". . .\\" # ] # m, n = 3, 3 # grid = [row.split() for row in grid] # print(find_unique_paths(m, n, grid)) # Output: 2"},{"question":"In a given kingdom, there is a famous magician who can create magical pathways between different cities. The king has asked the magician to connect cities in such a way that the path should be the shortest possible to travel between two specific cities. However, the magician can\'t directly connect the cities; instead, he is provided with certain pathways and their distances. You are given several queries to find the shortest distance between different pairs of cities. Help the magician to determine the shortest path for each query using the provided pathways. Input: First line of input contains number of Test Cases T. Each test case starts with an integer C, the number of cities, followed by an integer P, the number of pathways. In the next P lines, each line contains three space-separated values: city1, city2 (representing a pathway between city1 and city2) and an integer d (distance of the pathway). Next, an integer Q follows which represents the number of queries. For each query, there are two integers city1 and city2, representing the start and end cities for which the shortest path distance is to be determined. Output: For each query, print the shortest distance between the given pairs of cities. If there is no possible path, print -1. Constraints: 1 ≤ T ≤ 5 1 ≤ C ≤ 1000 0 ≤ P ≤ C*(C-1)/2 1 ≤ d ≤ 10000 1 ≤ Q ≤ 1000 1 ≤ city1, city2 ≤ C SAMPLE INPUT 2 4 4 1 2 5 2 3 3 3 4 1 4 1 7 2 1 3 2 4 3 3 1 2 1 2 3 1 1 1 3 SAMPLE OUTPUT 8 4 2","solution":"def floyd_warshall(n, distance): INF = float(\'inf\') dist = [[INF] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): dist[i][i] = 0 for u in range(1, n + 1): for v in range(1, n + 1): if distance[u][v] != -1: dist[u][v] = distance[u][v] for k in range(1, n + 1): for i in range(1, n + 1): for j in range(1, n + 1): if dist[i][k] < INF and dist[k][j] < INF: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) return dist def shortest_path_between_cities(T, test_cases): results = [] for test_case in test_cases: C, P, pathways, Q, queries = test_case distance = [[-1] * (C + 1) for _ in range(C + 1)] for city1, city2, d in pathways: distance[city1][city2] = d distance[city2][city1] = d # Assuming bidirectional pathways dist = floyd_warshall(C, distance) for city1, city2 in queries: result = dist[city1][city2] if dist[city1][city2] != float(\'inf\') else -1 results.append(result) return results # Example input processing and function call: T = 2 test_cases = [ (4, 4, [(1, 2, 5), (2, 3, 3), (3, 4, 1), (4, 1, 7)], 2, [(1, 3), (2, 4)]), (3, 3, [(1, 2, 1), (2, 3, 1)], 1, [(1, 3)]) ] results = shortest_path_between_cities(T, test_cases) print(results) # Output should be [8, 4, 2]"},{"question":"Chef is given a 2D grid of size NxM filled with numbers, and he faces a challenging task. Chef can move only right or down from any cell he starts at. He wants to devise a way to move from the top-left corner (1, 1) to the bottom-right corner (N, M) such that the sum of the numbers along his path is minimized. Help Chef to find the minimum possible sum of the numbers on the path from the top-left corner to the bottom-right corner of the grid. ------ Input Format ------ - The first line of input will contain two integers, N and M, denoting the dimensions of the grid. - The next N lines each contain M integers, representing the grid. ------ Output Format ------ Output a single integer, the minimum sum of numbers along a path from the top-left corner to the bottom-right corner. ------ Constraints ------ 1 ≤ N, M ≤ 1000 0 ≤ text{grid}[i][j] ≤ 10^9 ----- Sample Input 1 ------ 3 3 1 3 1 1 5 1 4 2 1 ----- Sample Output 1 ------ 7 ----- Explanation 1 ------ One of the possible paths with the minimum sum of 7 is: 1 → 3 → 1 → 1 → 1 In this path, the cell values sum up to 7, which is the minimum possible sum among all possible paths.","solution":"def min_path_sum(grid): Returns the minimum sum of numbers along a path from the top-left corner to the bottom-right corner of the grid. N = len(grid) M = len(grid[0]) # Create a 2D dp array to store the min sum up to each cell dp = [[0] * M for _ in range(N)] # Initialize first cell with the first grid value dp[0][0] = grid[0][0] # Fill in the first row for j in range(1, M): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill in the first column for i in range(1, N): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[N - 1][M - 1]"},{"question":"You are given an integer `N` which represents the number of servers in a data center. Each server has a load value that indicates the amount of work it can handle. You are also given a list of `N` integers where the `i-th` integer represents the load value of the `i-th` server. Additionally, there are two types of queries you need to handle: 1. **Update Query:** Update the load value of a specific server. 2. **Load Query:** Determine the maximum load among all servers within a specific range of indices. To accomplish this, you need to write a program that supports these two types of operations efficiently. # Input - The first line contains an integer `N` (1 ≤ N ≤ 10^5) which is the number of servers. - The second line contains `N` space-separated integers representing the initial load values of the servers. - The third line contains an integer `Q` (1 ≤ Q ≤ 10^5) which indicates the number of queries. - The following `Q` lines contain one of the following two types of queries: 1. **1 i v**: Update the load value of the `i-th` server to `v`. 2. **2 l r**: Output the maximum load value among all servers in the range `[l, r]` (inclusive). # Output - For each load query (type 2), output the maximum load value in the specified range. # Example Input ``` 5 1 3 5 7 9 4 2 1 3 1 2 6 2 2 4 2 1 5 ``` Output ``` 5 7 9 ``` # Note - In the example above, the initial load values are `[1, 3, 5, 7, 9]`. - The first query `2 1 3` asks for the maximum load between indices 1 and 3, which is `5`. - The second query `1 2 6` updates the load value of the server at index 2 to `6`, resulting in the new load values `[1, 6, 5, 7, 9]`. - The third query `2 2 4` asks for the maximum load between indices 2 and 4, which is `7`. - The fourth query `2 1 5` asks for the maximum load between indices 1 and 5, which is `9`.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize segment tree with initial data self.build(data) def build(self, data): # Insert leaf nodes in the tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): # Update the value at the leaf node pos = index + self.n self.tree[pos] = value # Then move upward and update parents pos //= 2 while pos > 0: self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) pos //= 2 def query(self, left, right): # Query the maximum in the range [left, right] left += self.n right += self.n max_val = float(\'-inf\') while left < right: if left % 2: max_val = max(max_val, self.tree[left]) left += 1 if right % 2: right -= 1 max_val = max(max_val, self.tree[right]) left //= 2 right //= 2 return max_val def process_queries(N, loads, queries): segment_tree = SegmentTree(loads) results = [] for query in queries: if query[0] == 1: _, i, v = query segment_tree.update(i - 1, v) elif query[0] == 2: _, l, r = query results.append(segment_tree.query(l - 1, r)) return results"},{"question":"You are given a list of integers where each integer represents the ASCII value of a character. Your task is to return a string that is created by concatenating the characters corresponding to each ASCII value in the list. Example 1: Input: nums = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100] Output: \\"Hello World\\" Example 2: Input: nums = [65, 115, 115, 101, 115, 115, 109, 101, 110, 116] Output: \\"Assessment\\" Your Task: You don\'t need to read input or print anything. Your task is to complete the function ascii_to_string() which takes a list of integers as input and returns the corresponding string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= len(nums) <= 1000 32 <= nums[i] <= 126","solution":"def ascii_to_string(nums): Converts a list of ASCII values to a corresponding string. Args: nums (list of int): List of integers representing ASCII values of characters. Returns: str: Concatenated string of characters corresponding to the ASCII values. return \'\'.join(chr(num) for num in nums)"},{"question":"A company\'s office layout is designed as a grid where each cell represents either an empty desk or a blocked desk (which cannot be used). The company wishes to find the number of distinct paths from the top-left corner (grid[0][0]) to the bottom-right corner (grid[n-1][m-1]), given certain rules. The employees can only move either right or down at any point in time, and they must move around the blocked desks. Write a function `countPaths()` that takes in the dimensions of the grid `n` and `m`, and an `n x m` grid `office_layout` as input and returns the number of distinct paths from the top-left corner to the bottom-right corner. If there is no path, return 0. Example 1: Input : n = 3, m = 3 office_layout = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output : 2 Explanation: From the top-left corner, the two paths to the bottom-right corner are: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input : n = 2, m = 2 office_layout = [ [0, 1], [1, 0] ] Output : 0 Explanation: There is no path from grid[0][0] to grid[1][1] due to the blocked desks. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `countPaths()` which takes the dimensions of the grid `n` and `m`, and the office layout grid as inputs and returns the number of distinct paths. Expected Time Complexity: O(n*m) Expected Auxiliary Space: O(n*m) Constraints: 1 <= n, m <= 100 0 <= office_layout[i][j] <= 1 Where 0 represents an empty desk and 1 represents a blocked desk.","solution":"def countPaths(n, m, office_layout): if office_layout[0][0] == 1 or office_layout[n-1][m-1] == 1: return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if office_layout[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Given an array of integers, your task is to group all the identical elements together while preserving the order of their first appearances in the array. Your output should be a 2D array where each subarray contains the grouped identical elements. Example 1: Input: arr = [4, 5, 6, 4, 3, 5] Output: [[4, 4], [5, 5], [6], [3]] Example 2: Input: arr = [1, 2, 3, 1, 4, 2] Output: [[1, 1], [2, 2], [3], [4]] Your Task: You don\'t need to read input or print anything. Your task is to complete the function groupIdenticalElements() which takes an array of integers as input and returns a 2D array where each subarray contains the grouped identical elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ len(arr) ≤ 1000 1 ≤ arr[i] ≤ 1000","solution":"def groupIdenticalElements(arr): Groups all identical elements together while preserving the order of their first appearances in the array. from collections import defaultdict grouped_elements = defaultdict(list) order = [] for num in arr: if num not in grouped_elements: order.append(num) grouped_elements[num].append(num) return [grouped_elements[num] for num in order]"},{"question":"Tom is a movie director and he is working on a new scene that involves a lot of special effects. For each effect, there are some stages, and each stage depends on the completion of other stages. Tom wants to know which stages are independent, meaning they can be completed without waiting for any other stage. He also wants to ensure there are no cyclic dependencies between the stages. You will be given the list of stages and their dependencies. Your task is to identify all independent stages and check for cyclic dependencies. -----Input----- The first line contains a positive integer N, the number of stages. The second line contains space-separated list of N strings, stage names. All stage names are distinct. The third line contains the non-negative integer M, the number of dependencies. Each of the next M lines describes one dependency and contains names S1 and S2 of two stages, where S1 must be completed before S2. It is guaranteed that S1 and S2 will be correct names of two different stages from the list of N stages given in the second line of the input file. There is at most one dependency in each direction for each pair of stages, and each dependency will be described exactly once in the input file. Strings in the input file consist only of lowercase letters and have a maximum length of 20. Consecutive elements in a line are separated by exactly one space, with no leading or trailing spaces on each line. -----Output----- For the input, output two lines. - First line: If there are cyclic dependencies, output the word CYCLE. Otherwise, output the names of all independent stages in any order (joining them with a single space). - Second line: If there is no cycle, output the word NO CYCLE. -----Constraints----- 1 <= N <= 100 0 <= M <= N * (N - 1) / 2 -----Example----- Input: 6 idea script filming editing specialeffects finalcut 5 idea script script filming filming editing editing specialeffects specialeffects finalcut Output: idea NO CYCLE Explanation: In this example, \\"idea\\" is an independent stage as it doesn\'t depend on any other stages. All other stages depend on previous stages, forming a directed acyclic graph (DAG). Therefore, there are no cyclic dependencies.","solution":"def find_independent_stages(N, stages, M, dependencies): from collections import defaultdict, deque # Graph initialization graph = defaultdict(list) indegree = {stage: 0 for stage in stages} # Building the graph for dep in dependencies: S1, S2 = dep graph[S1].append(S2) indegree[S2] += 1 # Identifying independent stages independent_stages = [stage for stage in stages if indegree[stage] == 0] # Detecting cycles using Kahn\'s Algorithm (Topological Sorting) queue = deque(independent_stages) count = 0 while queue: current = queue.popleft() count += 1 for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If count of processed nodes is not equal to the number of stages, there is a cycle if count != N: return \\"CYCLE\\", \\"\\" return \\" \\".join(independent_stages), \\"NO CYCLE\\" # Example usage N = 6 stages = [\\"idea\\", \\"script\\", \\"filming\\", \\"editing\\", \\"specialeffects\\", \\"finalcut\\"] M = 5 dependencies = [ (\\"idea\\", \\"script\\"), (\\"script\\", \\"filming\\"), (\\"filming\\", \\"editing\\"), (\\"editing\\", \\"specialeffects\\"), (\\"specialeffects\\", \\"finalcut\\") ] independent_stages, cycle_info = find_independent_stages(N, stages, M, dependencies) print(independent_stages) print(cycle_info)"},{"question":"You are given a string containing digits from \'2\' to \'9\' inclusive. Each digit maps to a set of alphabets as per the mapping on a traditional telephone keypad. (2 maps to \\"abc\\", 3 maps to \\"def\\", and so on). Write a function that returns all possible letter combinations that the number could represent. You can return the answer in any order. Example 1: Input: \\"23\\" Output: [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] Example 2: Input: \\"7\\" Output: [\\"p\\",\\"q\\",\\"r\\",\\"s\\"] Example 3: Input: \\"\\" Output: [] Note: The digits are guaranteed to contain only digits from \'2\' to \'9\'. The order of the combinations in the output does not matter.","solution":"def letter_combinations(digits): if not digits: return [] phone = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = phone[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"Juana loves studying arrays of integers. She is particularly interested in finding the largest possible sum of any contiguous subarray. A contiguous subarray is defined as a sequence of consecutive elements from the array. Given an array of integers, Juana asks you to calculate the maximum possible sum of any contiguous subarray. Input The first line contains a single integer n (1 ≤ n ≤ 105), the length of the array. The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109), representing the elements of the array. Output Print a single integer, the maximum sum of any contiguous subarray. Example Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation: The subarray with the largest sum is [4, -1, 2, 1], which has a sum of 6.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any contiguous subarray in arr. Args: arr (list): List of integers. Returns: int: Maximum sum of any contiguous subarray. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"A university runs an annual coding competition that takes place over several days. During this competition, participants solve coding problems and earn points for each correct solution. The top participant with the most points at the end of each day is awarded a prize. If there is a tie, the participant who solved the problems the fastest is awarded the prize. You are tasked with determining the winner each day, given the points earned by each participant and the time taken to solve the problems. -----Input----- The input consists of several cases. Each case starts with an integer D (1 leq D leq 30) representing the number of days of competition. For each day, the first line contains an integer P (1 leq P leq 100), the number of participants. The next P lines contain the data for each participant in the format: participant name (a string without spaces of up to 50 characters), points earned (an integer between 0 and 10000), and the total time taken in minutes (an integer between 1 and 10000). -----Output----- For each day, output the name of the participant who wins the prize, followed by their points and time. In case of a tie in points, the participant with the lesser time wins. If there is still a tie, output the participant whose name comes first alphabetically. -----Example----- Sample Input: 2 3 Alice 500 120 Bob 500 110 Charlie 400 100 3 Dave 600 150 Eve 600 145 Frank 600 130 Sample Output: Bob 500 110 Frank 600 130","solution":"def determine_winners(input_data): def winner_of_day(participants): return min(participants, key=lambda x: (-x[1], x[2], x[0])) lines = input_data.strip().split(\\"n\\") idx = 0 num_of_days = int(lines[idx]) idx += 1 results = [] for _ in range(num_of_days): num_of_participants = int(lines[idx]) idx += 1 participants = [] for _ in range(num_of_participants): data = lines[idx].split() name = data[0] points = int(data[1]) time = int(data[2]) participants.append((name, points, time)) idx += 1 winner = winner_of_day(participants) results.append(f\\"{winner[0]} {winner[1]} {winner[2]}\\") return \\"n\\".join(results)"},{"question":"Implement a function that simulates a 4-way traffic light system at a crossroad. Each traffic light can be either red (0) or green (1). The function should determine if the current state of the traffic lights is safe, which means no two adjacent lights should be green at the same time. The crossroad is represented as follows: - Lights A and B control the north-south direction. - Lights C and D control the east-west direction. The state is represented by 4 binary digits, where: - A is the state of the north traffic light (0 or 1) - B is the state of the south traffic light (0 or 1) - C is the state of the west traffic light (0 or 1) - D is the state of the east traffic light (0 or 1) Write a function trafficLightState(A, B, C, D) that returns True if the state is safe and False otherwise. Examples: 1. Input: A = 0, B = 1, C = 0, D = 1 Output: True Explanation: No adjacent lights are green. 2. Input: A = 1, B = 1, C = 0, D = 0 Output: False Explanation: Both A and B are green. Your Task: You do not need to read input or print anything. Complete the function trafficLightState() which takes A, B, C, and D as input parameters and returns a Boolean indicating if the traffic light state is safe. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 0 <= A,B,C,D <= 1","solution":"def trafficLightState(A, B, C, D): Determine if the traffic light state is safe. Parameters: A (int): State of the north traffic light (0 or 1) B (int): State of the south traffic light (0 or 1) C (int): State of the west traffic light (0 or 1) D (int): State of the east traffic light (0 or 1) Returns: bool: True if the state is safe, False otherwise # Check if any adjacent traffic lights are green at the same time if (A == 1 and B == 1) or (C == 1 and D == 1): return False return True"},{"question":"A company organized a programming competition where participants had to demonstrate their skill in basic data structures. One of the tasks required participants to work with stacks and implement a simple command processor. The command processor can handle the following commands: - \\"push X\\" - Push integer X onto the stack. - \\"pop\\" - Remove the integer on top of the stack. If the stack is empty, do nothing. - \\"top\\" - Print the integer on top of the stack. If the stack is empty, print \\"Empty\\". You need to implement the command processor. Write a program that: 1. Receives a series of commands from Standard Input. 2. For each command, processes it and prints the result for \\"top\\" commands. -----Constraints----- - Commands are given one per line. - Each command is either of the format \\"push X\\" where X is an integer between 1 and 100 (inclusive), or \\"pop\\", or \\"top\\". - The number of commands does not exceed 100. -----Input----- The input consists of a series of commands, one per line. -----Output----- For each \\"top\\" command, print the integer on top of the stack or \\"Empty\\" if the stack is empty. -----Sample Input----- push 5 push 3 top pop top pop top -----Sample Output----- 3 5 Empty","solution":"def process_commands(commands): stack = [] output = [] for command in commands: if command.startswith(\\"push\\"): _, value = command.split() stack.append(int(value)) elif command == \\"pop\\": if stack: stack.pop() elif command == \\"top\\": if stack: output.append(stack[-1]) else: output.append(\\"Empty\\") return output"},{"question":"You are given a list `operations` of length M where each element is a tuple consisting of two elements: a string `op` representing an arithmetic operation (\\"+\\", \\"-\\", \\"*\\", \\"/\\") and an integer `val` to be used in the operation. You start with an initial value `init_val`. You need to simulate the operations in the given sequence on `init_val`. Write a function `simulate_operations(init_val, operations)` that returns the final result after performing all operations in order. -----Constraints----- - The initial value `init_val` is an integer. - `operations` is a list of tuples of the form (str, int), where str is one of \\"+\\", \\"-\\", \\"*\\", \\"/\\" and int is a non-zero integer. - M (length of operations) is 1 ≤ M ≤ 100,000. -----Input----- - `init_val`: an integer representing the initial value. - `operations`: a list of M tuples representing the operations and values. -----Output----- Return the final result as an integer. -----Sample Input----- init_val = 10 operations = [(\\"+\\", 5), (\\"-\\", 3), (\\"*\\", 2), (\\"/\\", 4)] -----Sample Output----- 6 After performing the operations in order, the result would be as follows: 10 + 5 = 15 15 - 3 = 12 12 * 2 = 24 24 / 4 = 6 Ensure to handle integer division as such where 24 / 4 would result in 6 rather than 6.0.","solution":"def simulate_operations(init_val, operations): Simulate a series of operations on an initial value. Parameters: init_val (int): The initial value to start the operations. operations (list of tuple): A list of tuples where each tuple contains a string representing the operation and an integer value. Returns: int: The final result after performing all operations. current_value = init_val for op, val in operations: if op == \\"+\\": current_value += val elif op == \\"-\\": current_value -= val elif op == \\"*\\": current_value *= val elif op == \\"/\\": current_value //= val else: raise ValueError(\\"Invalid operation\\") return current_value"},{"question":"Consider a scenario where you need to keep track of the minimum element in a stack at all times. Design a stack that supports the following operations: `push(x)` to add an element `x` to the stack, `pop()` to remove the element from the top of the stack, and `getMin()` to retrieve the minimum element in the stack. Implement these functionalities in a Python class. Example 1: Input: push(3) push(5) getMin() push(2) push(1) getMin() pop() getMin() pop() getMin() Output: 3 2 1 2 3 Explanation: push(3) the stack will be {3} push(5) the stack will be {3, 5} getMin() the minimum element is 3 push(2) the stack will be {3, 5, 2} push(1) the stack will be {3, 5, 2, 1} getMin() the minimum element is 1 pop() the stack will be {3, 5, 2} getMin() the minimum element is 2 pop() the stack will be {3, 5} getMin() the minimum element is 3 Example 2: Input: getMin() push(4) getMin() push(6) push(3) getMin() Output: -1 4 3 Explanation: getMin() the stack is empty, so return -1 push(4) the stack will be {4} getMin() the minimum element is 4 push(6) the stack will be {4, 6} push(3) the stack will be {4, 6, 3} getMin() the minimum element is 3 Your Task: You are required to complete the following methods in the class `MinStack`: - `push(self, x: int) -> None` to push the element `x` to the stack. - `pop(self) -> None` to remove the element on the top of the stack. - `getMin(self) -> int` to retrieve the minimum element in the stack. If the stack is empty, return -1. Expected Time Complexity: O(1) for all operations. Expected Auxiliary Space: O(n) for storing the stack elements and supporting data. Constraints: 1 <= x <= 100 1 <= Q <= 100","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, val: int) -> None: self.stack.append(val) if not self.min_stack or val <= self.min_stack[-1]: self.min_stack.append(val) def pop(self) -> None: if self.stack: value = self.stack.pop() if value == self.min_stack[-1]: self.min_stack.pop() def getMin(self) -> int: if not self.min_stack: return -1 return self.min_stack[-1]"},{"question":"Given an integer array arr[] of size N, find the length of the longest subsequence such that every element in the subsequence is a perfect square. Example 1: Input: N = 6, arr = [1, 2, 3, 4, 5, 16] Output: 3 Explanation: The longest subsequence where every element is a perfect square is [1, 4, 16]. Therefore, the output is 3. Example 2: Input: N = 4, arr = [10, 15, 14, 7] Output: 0 Explanation: There is no perfect square number in the given array, so the output is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function longestPerfectSquareSubseq() which takes an integer N and an array arr[] as input parameters and returns the length of the longest subsequence where every element is a perfect square. Expected Time Complexity: O(N * sqrt(max(arr[i]))) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^9","solution":"import math def is_perfect_square(num): Helper function to check if a number is a perfect square. if num < 0: return False root = int(math.isqrt(num)) return root * root == num def longestPerfectSquareSubseq(N, arr): Function to find the length of the longest subsequence such that every element in the subsequence is a perfect square. count = 0 for num in arr: if is_perfect_square(num): count += 1 return count"},{"question":"You are given two matrices A and B, each of size N x M. The task is to determine if it\'s possible to make the two matrices identical by performing the following operation any number of times (including zero): Select a submatrix of any size (1x1, 2x2, ..., NxM) and add 1 to all its elements in matrix A. Write a program that reads matrices A and B, and determines if it is possible to make A identical to B. ------ Input ------ The first line contains a single integer T (1 ≤ T ≤ 10), the number of test cases. Each test case consists of the following: The first line contains two integers N and M (1 ≤ N, M ≤ 50), the dimensions of matrices A and B. The next N lines each contain M integers, representing the elements of matrix A. The following N lines each contain M integers, representing the elements of matrix B. ----- Output ------ For each test case, output \\"Yes\\" if it\'s possible to transform matrix A into matrix B. Otherwise, output \\"No\\". ------ Constraints------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 50 0 ≤ A[i][j], B[i][j] ≤ 100 ----- Sample Input ----- 2 2 2 1 2 3 4 2 3 4 5 1 2 3 3 3 3 5 6 7 ----- Sample Output ----- Yes No ----- Explanation ----- In the first test case, it\'s possible to transform A into B by adding 2 to the first column of A, which results in matrix B. In the second test case, it\'s not possible to transform A into B using the allowable operations.","solution":"def check_matrices_identical(A, B, N, M): diff = B[0][0] - A[0][0] for i in range(N): for j in range(M): if B[i][j] - A[i][j] != diff: return \\"No\\" return \\"Yes\\" def transform_matrices(T, test_cases): results = [] for case in test_cases: N, M = case[0] A = case[1:1+N] B = case[1+N:1+2*N] result = check_matrices_identical(A, B, N, M) results.append(result) return results # Reading Input and Parser def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) index += 2 A = [] for _ in range(N): row = list(map(int, data[index:index + M])) A.append(row) index += M B = [] for _ in range(N): row = list(map(int, data[index:index + M])) B.append(row) index += M test_cases.append([(N, M)] + A + B) results = transform_matrices(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Paul has a collection of n books. Each book has a hardness value represented by an integer w_i. Paul wants to arrange these books in two piles such that the total hardness of books in both piles are as equal as possible. The difference in total hardness between the two piles should be minimized. -----Input----- The first line contains a single integer n (1 leq n leq 20). The second line contains n integers w_1, w_2, ldots, w_n (1 leq w_i leq 1000). -----Output----- Output a single integer — the minimum possible difference between the total hardness of the two piles. -----Examples----- Input 3 3 1 4 Output 0 Input 4 1 2 3 9 Output 3 -----Note----- In the first example, you can split the books into piles with hardness values {3, 1} and {4}, achieving a difference of 0. In the second example, you can split the books into piles with hardness values {1, 2, 3} and {9}, achieving a minimum difference of 3.","solution":"def minimum_hardness_difference(n, hardness_values): total_sum = sum(hardness_values) half_sum = total_sum // 2 dp = [0] * (half_sum + 1) for hardness in hardness_values: for j in range(half_sum, hardness - 1, -1): dp[j] = max(dp[j], dp[j - hardness] + hardness) max_half = dp[half_sum] other_half = total_sum - max_half return abs(other_half - max_half)"},{"question":"You are given two strings A and B consisting of lowercase English letters. Determine if you can form string B by rearranging the letters of string A and inserting exactly one additional lowercase English letter anywhere in the sequence. -----Constraints----- - 1 ≤ |A| ≤ 100 - 2 ≤ |B| ≤ 101 - |B| = |A| + 1 - A and B consist of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: A B -----Output----- If you can form B by rearranging the letters of A and inserting exactly one additional lowercase English letter anywhere, print Yes; otherwise, print No. -----Sample Input----- apple apples -----Sample Output----- Yes - By adding \'s\' to \\"apple\\", we can form \\"apples\\".","solution":"def can_form_with_one_extra_letter(A, B): Determines if string B can be formed by rearranging the letters of string A and inserting exactly one additional lowercase English letter. Parameters: A (str): The base string. B (str): The target string formed by rearranging A and adding one letter. Returns: str: \'Yes\' if B can be formed as described, otherwise \'No\'. from collections import Counter if len(B) != len(A) + 1: return \\"No\\" count_A = Counter(A) count_B = Counter(B) for char, count in count_B.items(): if count - count_A.get(char, 0) > 1: return \\"No\\" return \\"Yes\\" # Example usage: # A = \\"apple\\" # B = \\"apples\\" # print(can_form_with_one_extra_letter(A, B)) # Output: \\"Yes\\""},{"question":"Given an array of integers, return the length of the longest subarray with a sum equal to zero. For example: Given array [1, -1, 3, 2, -2, -3, 3], The longest subarray with sum equal to zero is [1, -1, 3, 2, -2, -3] with length 6. Another example: Given array [-3, 1, 2, -3, 4], The longest subarray with sum equal to zero is [-3, 1, 2] with length 3. Note: - You may assume the array contains at least one integer.","solution":"def longest_zero_sum_subarray(arr): Returns the length of the longest subarray with a sum equal to zero. sum_indices = {} max_len = 0 current_sum = 0 for i in range(len(arr)): current_sum += arr[i] if current_sum == 0: max_len = i + 1 if current_sum in sum_indices: max_len = max(max_len, i - sum_indices[current_sum]) else: sum_indices[current_sum] = i return max_len"},{"question":"Given a string s containing only lowercase and uppercase alphabets and an integer k, your task is to check if it is possible to convert the string into a palindrome by replacing at most k characters. A palindrome is a string that reads the same backward as forward. Input Format The first line of input contains an integer mathbf{T}, the number of test cases. Each test case consists of a single line containing the string s and the integer k separated by a space. Output Format For each test case, output \\"Yes\\" if it is possible to convert the string into a palindrome by replacing at most k characters, otherwise output \\"No\\". Constraints 1 leq T leq 100 1 leq |s| leq 10^5 0 leq k leq 10^5 The total length of all strings combined will not exceed 10^6. Sample Input 3 abca 1 racecar 1 abcdef 2 Sample Output Yes Yes No Explanation In the first test case, replacing `b` with `c` or `c` with `b` will make the string a palindrome. In the second test case, the given string is already a palindrome, so zero replacements are needed. In the third test case, at least three replacements are needed to convert the string to a palindrome, which exceeds the allowed limit of k, hence the output is \\"No\\".","solution":"def can_convert_to_palindrome(s, k): Check if it is possible to convert the string into a palindrome by replacing at most k characters. Parameters: s (str): The input string. k (int): The maximum number of allowed replacements. Returns: str: \\"Yes\\" if it is possible to convert the string into a palindrome by replacing at most k characters, otherwise \\"No\\". n = len(s) mismatch_count = 0 # Compare characters from both ends towards the center for i in range(n // 2): if s[i] != s[n - i - 1]: mismatch_count += 1 # Check if the number of mismatches is within the allowed number of replacements return \\"Yes\\" if mismatch_count <= k else \\"No\\" def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(can_convert_to_palindrome(s, k)) return results"},{"question":"Given a string containing both lowercase and uppercase alphabets. The problem is to find the length of the longest contiguous substring such that all the characters in the substring are either only lowercase or only uppercase. Example 1: Input: str = \\"aAbBcCDeEfFgG\\" Output: 2 Example 2: Input: str = \\"aaaBBBccccDDD\\" Output: 4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function lenOfLongContSubstr() which takes the string str as input and returns the length of the longest contiguous substring with uniform case characters. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1<=|str|<=10^5","solution":"def lenOfLongContSubstr(s): Returns the length of the longest contiguous substring with uniform case characters. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i].islower() and s[i-1].islower(): current_length += 1 elif s[i].isupper() and s[i-1].isupper(): current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a sequence of integers and you need to process a series of queries. Each query can be one of the following types: 1. Sum of elements in a given range. 2. Update a particular element in the sequence to a new value. For each query of the first type, output the sum of elements in the specified range. After processing all the queries, print the final sequence. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the number of elements in the sequence and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) representing the initial sequence. Each of the next q lines contains a query in one of the following formats: 1. \\"1 l r\\" (1 ≤ l ≤ r ≤ n) – asking for the sum of elements from index l to r (inclusive). 2. \\"2 i x\\" (1 ≤ i ≤ n, 1 ≤ x ≤ 10^9) – update the value at index i to x. -----Output----- For each query of the first type, output a single integer — the sum of elements in the specified range. After processing all the queries, output the final sequence as a space-separated list of integers. -----Examples----- Input 5 5 1 2 3 4 5 1 1 3 2 3 10 1 2 4 2 5 7 1 1 5 Output 6 24 25 1 2 10 4 7","solution":"def process_queries(n, q, sequence, queries): results = [] for query in queries: if query[0] == 1: _, l, r = query results.append(sum(sequence[l-1:r])) elif query[0] == 2: _, i, x = query sequence[i-1] = x return results, sequence # Sample input n = 5 q = 5 sequence = [1, 2, 3, 4, 5] queries = [ [1, 1, 3], [2, 3, 10], [1, 2, 4], [2, 5, 7], [1, 1, 5] ] results, final_sequence = process_queries(n, q, sequence, queries) for result in results: print(result) print(\' \'.join(map(str, final_sequence)))"},{"question":"There are m people standing in a line and they want to rearrange themselves to form a queue sorted by their heights in non-decreasing order. You can only swap any two adjacent people. Determine the minimum number of adjacent swaps required to sort the queue. Input The first line contains an integer m (1 ≤ m ≤ 1000), which is the number of people. The second line contains m integers h1, h2, ..., hm (1 ≤ hi ≤ 1000), where hi is the height of the ith person in the initial queue. Output Print a single integer, the minimum number of adjacent swaps needed to sort the queue. Examples Input 4 4 3 2 1 Output 6 Input 5 1 2 3 4 5 Output 0","solution":"def minimum_adjacent_swaps(m, heights): Determines the minimum number of adjacent swaps required to sort the queue by height. Parameters: m (int): The number of people. heights (list): A list of integers representing the heights of the people in the queue. Returns: int: The minimum number of adjacent swaps required to sort the queue. swap_count = 0 for i in range(m): for j in range(0, m - i - 1): if heights[j] > heights[j + 1]: heights[j], heights[j + 1] = heights[j + 1], heights[j] swap_count += 1 return swap_count"},{"question":"**Question: Rotating Arrays** You are given an array of integers and a number k. Write a function to rotate the array to the right by k steps, where k is non-negative. A rotation to the right means each element of the array is shifted to the right by one place, and the last element\'s new position is at the first place. You need to solve it in-place with O(1) extra space. -----Input----- - The input consists of two lines. - The first line contains an integer array `nums` of length `n` (1 leq n leq 10^5). - The second line contains an integer `k` (0 leq k leq 10^9). -----Output----- - Output the modified array after k rotations. -----Examples----- **Example 1:** Input: ``` [1,2,3,4,5,6,7] 3 ``` Output: ``` [5,6,7,1,2,3,4] ``` **Example 2:** Input: ``` [-1,-100,3,99] 2 ``` Output: ``` [3,99,-1,-100] ``` **Example 3:** Input: ``` [1,2,3,4,5,6,7,8,9] 18 ``` Output: ``` [1,2,3,4,5,6,7,8,9] ``` **Explanation:** 1. In the first example, rotating `[1,2,3,4,5,6,7]` to the right by 3 steps results in `[5,6,7,1,2,3,4]`. 2. In the second example, rotating `[-1,-100,3,99]` to the right by 2 steps results in `[3,99,-1,-100]`. 3. In the third example, rotating `[1,2,3,4,5,6,7,8,9]` to the right by 18 steps (which is actually equivalent to 0 steps since 18 % 9 = 0) results in the same array `[1,2,3,4,5,6,7,8,9]`.","solution":"def rotate(nums, k): Rotates the array nums to the right by k steps. n = len(nums) k = k % n # To handle cases where k is greater than n # Reverse the entire array nums.reverse() # Reverse the first k elements nums[:k] = reversed(nums[:k]) # Reverse the remaining elements nums[k:] = reversed(nums[k:]) return nums"},{"question":"Given an integer array `nums` consisting of `n` integers, return the length of a shortest non-empty subarray of `nums` with a sum greater than or equal to a given integer `target`. If there is no such subarray, return `-1`. Constraints * 1 leq n leq 10^5 * -10^4 leq nums[i] leq 10^4 * -10^9 leq target leq 10^9 Input Input is given from Standard Input in the following format: n target nums_1 nums_2 ... nums_n Output Output the length of the shortest non-empty subarray with sum greater than or equal to `target`. If no such subarray exists, return `-1`. Examples Input 6 5 2 3 1 2 4 3 Output 2 Input 4 11 1 2 3 4 Output -1","solution":"def shortest_subarray_length(nums, target): import collections n = len(nums) # Prefix sums and deque to store minimum length prefix_sums = [0] * (n + 1) for i in range(n): prefix_sums[i + 1] = prefix_sums[i] + nums[i] # A deque to store the indices of prefix sums deque = collections.deque() min_length = float(\'inf\') for i in range(n + 1): while deque and prefix_sums[i] - prefix_sums[deque[0]] >= target: min_length = min(min_length, i - deque.popleft()) while deque and prefix_sums[i] <= prefix_sums[deque[-1]]: deque.pop() deque.append(i) return min_length if min_length != float(\'inf\') else -1"},{"question":"Given an undirected graph with V vertices and E edges, find the articulation points in the graph. An articulation point is a vertex that, when removed, increases the number of connected components of a graph. Example 1: Input: Output: 1 2 Explanation: In the given graph, removing vertex 1 or 2 results in a disconnected graph. Example 2: Input: Output: 0 3 Explanation: Removing vertex 0 or 3 results in a disconnected graph. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findArticulationPoints() which takes the number of vertices V and adjacency list of the graph as input parameters and returns a list of integers denoting the articulation points in the given graph. Note: The resulting list should contain articulation points sorted in ascending order. Expected Time Complexity: O(V + E). Expected Auxiliary Space: O(V). Constraints: 1 ≤ V ≤ 10^{5} 1 ≤ E ≤ 10^{5} 0 ≤ u, v ≤ V-1","solution":"def findArticulationPoints(V, adj): def dfs(u, parent, visited, disc, low, time, ap): children = 0 visited[u] = True disc[u] = low[u] = time[0] time[0] += 1 for v in adj[u]: if not visited[v]: children += 1 dfs(v, u, visited, disc, low, time, ap) low[u] = min(low[u], low[v]) if parent is None and children > 1: ap[u] = True if parent is not None and low[v] >= disc[u]: ap[u] = True elif v != parent: low[u] = min(low[u], disc[v]) visited = [False] * V disc = [float(\'Inf\')] * V low = [float(\'Inf\')] * V ap = [False] * V time = [0] for i in range(V): if not visited[i]: dfs(i, None, visited, disc, low, time, ap) articulation_points = [index for index, value in enumerate(ap) if value] return sorted(articulation_points)"},{"question":"Riya loves reading novels. She has NN novels in her bookshelf, each with a certain number of pages. She likes to read the novels consecutively, starting from any novel she selects. However, she wants to optimize her reading by choosing a segment where the average number of pages per novel is minimized, but she also has a constraint on the minimum number of novels she wants to read in a segment. You are a friend of Riya, write a program to help her find the starting and ending positions of the segment that has the minimum average number of pages per novel, given the segment\'s length is at least MM. -----Input:----- - First line will contain TT, number of test cases. - For each test case, the first line contains two space-separated integers NN and MM. - The second line of each test case contains NN integers representing the number of pages in each novel. -----Output:----- For each test case, print two space-separated integers representing the 1-based starting and ending positions of the segment that has the minimum average number of pages per novel. If there are multiple such segments, print any one of them. -----Constraints:----- - 1≤T≤101 leq T leq 10 - M≤N≤10^5M leq N leq 10^5 - 1≤pages in each novel≤10^51 leq text{pages in each novel} leq 10^5 -----Sample Input:----- 2 6 3 10 20 30 40 50 60 5 2 5 1 2 3 4 -----Sample Output:----- 1 3 2 3 -----EXPLANATION:----- For the first test case: - Considering segments of length at least 3, the segment [10, 20, 30] has the minimum average pages per novel, which is 20. For the second test case: - The segment [1, 2] has the minimum average pages per novel, which is 1.5.","solution":"def find_min_avg_segment(novels, n, m): Finds the starting and ending positions of the segment with the minimum average number of pages per novel, with a segment length of at least m. min_avg = float(\'inf\') start_index = 0 end_index = 0 # Calculate the prefix sum to quickly compute sum of any segment prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + novels[i] # Try every possible segment length from m to n for length in range(m, n + 1): for i in range(n - length + 1): sum_segment = prefix_sum[i + length] - prefix_sum[i] avg_segment = sum_segment / length if avg_segment < min_avg: min_avg = avg_segment start_index = i end_index = i + length - 1 return start_index + 1, end_index + 1 # Convert to 1-based indexing def process_test_cases(test_cases): results = [] for case in test_cases: n, m, novels = case result = find_min_avg_segment(novels, n, m) results.append(result) return results"},{"question":"You are given an array of N integers and an integer X. Your task is to find the number of contiguous subarrays where the sum of elements is exactly X. A contiguous subarray is defined as a sequence of consecutive elements from the array. ------ Input: ------ First line of input contains an integer N, denoting the size of the array. Second line contains N space-separated integers, denoting the elements of the array. Third line contains a single integer X. ------ Output: ------ A single integer, denoting the number of contiguous subarrays whose sum is exactly X. ------ Constraints ------ 1 ≤ N ≤ 2 * 10^5 -10^9 ≤ array[i] ≤ 10^9 -10^9 ≤ X ≤ 10^9 ----- Sample Input 1 ------ 5 1 2 1 2 1 3 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The subarrays with sum equal to 3 are: - [1, 2] - [2, 1] - [1, 2] - [3] Therefore, the output is 4. ----- Sample Input 2 ------ 4 1 -1 1 -1 0 ----- Sample Output 2 ------ 4 ----- Explanation 2 ------ The subarrays with sum equal to 0 are: - [1, -1] - [-1, 1] - [1, -1] - [0] Therefore, the output is 4.","solution":"def count_subarrays_with_sum(arr, X): Function to find the number of contiguous subarrays such that their sum is equal to X. :param arr: List of integers -- the array of elements. :param X: Integer -- the target sum. :return: Integer -- the number of contiguous subarrays with sum equal to X. from collections import defaultdict count = 0 current_sum = 0 prefix_sum_count = defaultdict(int) # Initialize the default case where a sum of 0 is seen once prefix_sum_count[0] = 1 for num in arr: current_sum += num # Check if there is a subarray (ending at the current index) whose sum is `current_sum - X` if (current_sum - X) in prefix_sum_count: count += prefix_sum_count[current_sum - X] # Increase the count of current_sum in the dictionary prefix_sum_count[current_sum] += 1 return count"},{"question":"Samuel is studying patterns within arrays and their sequential repetitions. He is particularly interested in consecutive identical elements, referred to as \\"blocks\\". A block is defined as a sequence of identical elements that are contiguous. For example, the array [1, 1, 2, 2, 2, 3, 4, 4] has four blocks: [1, 1], [2, 2, 2], [3], and [4, 4]. Given an array of integers, Samuel wants to determine the number of blocks it contains. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. Each of the next T lines contains an integer N followed by N integers, representing the elements of the array. ------ Output ------ Print T lines, each containing an integer: the number of blocks in the given array for each test case. ------ Constraints ------ Subtask #1: 30 points 1 ≤ T ≤ 10, 1 ≤ N ≤ 100 Subtask #2: 70 points 1 ≤ T ≤ 10, 1 ≤ N ≤ 10^{5} The elements of the array can be any integer in the range of -10^9 to 10^9. ----- Sample Input 1 ----- 2 7 1 1 2 2 2 3 3 5 4 4 4 4 4 ----- Sample Output 1 ----- 3 1 ----- explanation 1 ----- In the first test case, the given array [1, 1, 2, 2, 2, 3, 3] has 3 blocks: [1, 1], [2, 2, 2], and [3, 3]. In the second test case, the given array [4, 4, 4, 4, 4] has only 1 block: [4, 4, 4, 4, 4].","solution":"def count_blocks(T, test_cases): Takes an integer T and a list of test_cases, where each test case is a tuple containing an integer N followed by N elements of the array. Returns a list of integers representing the number of blocks in each array. result = [] for i in range(T): _, *array = test_cases[i] blocks = 0 if array: blocks = 1 for j in range(1, len(array)): if array[j] != array[j - 1]: blocks += 1 result.append(blocks) return result"},{"question":"Write a function toReverseWords which takes a string and reverses the order of the words in it. Rules for reversing words in this kata: 1. split the string into words by space character 2. reverse the order of the words 3. join them back together with space character Example: \\"hello world\\" -> \\"world hello\\" \\"Python is fun\\" -> \\"fun is Python\\"","solution":"def to_reverse_words(s): Reverses the order of words in the given string. Parameters: s (str): Input string. Returns: str: A string with the order of words reversed. words = s.split() reversed_words = words.reverse() # This operation reverses the list in-place. return \' \'.join(words)"},{"question":"Given a circular race track with N checkpoints and a runner starting from checkpoint 1, the runner must visit each checkpoint in order without skipping. Each checkpoint has a different terrain which takes a different amount of time to cross. If the runner can only move to the next checkpoint or move back to the previous checkpoint, calculate the minimum time for the runner to complete one full lap around the track, starting and finishing at checkpoint 1. You are given an array of integers T where T[i] represents the time required to move from checkpoint i to i+1. The track is circular, which means after the last checkpoint, the runner returns to the first checkpoint. Input Format: First line contains an integer N, the number of checkpoints. Second line contains N integers separated by spaces, representing the array T. Output Format Output a single integer, the minimum time required to complete one full lap around the track. SAMPLE INPUT 5 2 3 1 5 4 SAMPLE OUTPUT 15 Explanation: The race track has 5 checkpoints and the times required to move between them are [2, 3, 1, 5, 4]. The runner must visit each checkpoint in sequence and return to the starting point. The minimum time to complete one full lap without skipping any checkpoint would be the sum of all the times, which is 2+3+1+5+4 = 15.","solution":"def minimum_time_to_complete_lap(N, T): This function calculates the minimum time required to complete one full lap around the track. Parameters: N (int): The number of checkpoints. T (list of int): The time required to move from checkpoint i to i+1, for all checkpoints. Returns: int: The minimum time to complete one full lap around the track. return sum(T)"},{"question":"Write a function `FindLongestWord` that takes a string of words and returns the longest word in the string. If there are multiple words of the same longest length, return the first one that appears in the string.","solution":"def FindLongestWord(s): Returns the longest word in the string. If there are multiple words of the same longest length, returns the first one that appears in the string. words = s.split() longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"Alex is working on a new project that involves generating all possible permutations of a given string. However, due to the specific requirements of his project, he only needs the permutations where all characters are unique. To simplify his task, he also wants to sort the resulting permutations in lexicographical order. Write a function that takes a string as input and returns a list of all lexicographically sorted unique permutations of that string. -----Input----- A string `s` of length between 1 and 8 inclusive, containing only lowercase Latin letters. -----Output----- Return a list of all unique permutations of the string `s`, sorted in lexicographical order. -----Example----- Input abc Output [\'abc\', \'acb\', \'bac\', \'bca\', \'cab\', \'cba\'] Input aab Output [\'aab\', \'aba\', \'baa\'] -----Explanation----- In the first example, the string \'abc\' has 6 unique permutations, all of which are unique and sorted lexicographically. In the second example, the string \'aab\' has 3 unique permutations: \'aab\', \'aba\', and \'baa\'. These are sorted in lexicographical order in the output list.","solution":"from itertools import permutations def unique_permutations(s): Returns a list of all unique permutations of the string `s`, sorted in lexicographical order. perm_set = set(permutations(s)) sorted_perm_list = sorted(\'\'.join(p) for p in perm_set) return sorted_perm_list"},{"question":"You are given a sequence of n integers, where each element represents the height of a tower of cubes. In one move, you can either: 1. Add one cube to the top of any tower. 2. Remove one cube from the top of any tower. Your objective is to make all the towers of equal height using the minimum number of moves. Determine the minimum number of moves required to achieve this. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each of the following lines describe a test case, starting with an integer n (1 le n le 10^5) followed by n integers h_1, h_2, ..., h_n (1 le h_i le 10^9) where h_i denotes the height of the i-th tower. -----Output----- For each test case, print the minimum number of moves required to make all towers of equal height. -----Examples----- Input 3 3 1 2 3 4 3 3 3 5 5 1 2 3 4 5 Output 2 2 6 -----Note----- In the first test case, you can increase the height of the first tower by 2, and increase the height of the second tower by 1 to make all the towers height 3. Thus, the total number of moves needed is 2+1=3. In the second test case, you can decrease the height of the fourth tower by 2, so all the towers will be of height 3. The total number of moves is 2. In the third test case, you can make all towers height 3 by increasing the height of the first tower by 2 and increasing the height of the second tower by 1, and also decreasing the height of the fourth tower by 1 and decreasing the height of the fifth tower by 2. So, the total number of moves is 2+1+1+2=6.","solution":"def min_moves_to_equal_height(t, test_cases): results = [] for i in range(t): n, heights = test_cases[i] max_height = max(heights) min_height = min(heights) min_moves = float(\'inf\') for target_height in range(min_height, max_height + 1): moves = 0 for height in heights: moves += abs(height - target_height) min_moves = min(min_moves, moves) results.append(min_moves) return results"},{"question":"There is a robot on an infinite grid starting at the origin (0, 0). Each step, the robot can move to one of its four adjacent cells (up, down, left, or right). The robot is given a series of instructions to follow, represented as a string containing the characters \'U\', \'D\', \'L\', \'R\'. Each character in the string represents a move: - \'U\' means move one step up - \'D\' means move one step down - \'L\' means move one step left - \'R\' means move one step right The robot can ignore some of the instructions such that it visits every unique cell at most once. Find the minimum number of instructions the robot needs to use in order to reach the farthest possible cell from the origin. -----Constraints----- - The instruction string will have a length between 1 and 10^5 inclusive. - The instruction string consists of characters \'U\', \'D\', \'L\', and \'R\' only. -----Input----- The input is given from Standard Input in the following format: instructions -----Output----- Print the minimum number of instructions the robot needs to use in order to reach the farthest possible cell from the origin. -----Sample Input----- UUURRDDLLL -----Sample Output----- 8 The robot can ignore some \'U\' and \'D\' instructions and move to (1,2) using 8 valid instructions: U, R, U, U, R, R, D, L","solution":"def min_instructions_to_farthest_cell(instructions): Calculate the minimum number of instructions needed to reach the farthest cell. up = instructions.count(\'U\') down = instructions.count(\'D\') left = instructions.count(\'L\') right = instructions.count(\'R\') vertical_movement = min(up, down) * 2 horizontal_movement = min(left, right) * 2 return vertical_movement + horizontal_movement"},{"question":"In a race, a player is given 3 lap times in seconds, and the overall performance score is determined by the least (fastest) lap time. You are given the lap times for all 3 laps of a player. Determine the performance score of the player. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains of a single line of input, three integers X, Y, and Z denoting the lap times in seconds. ------ Output Format ------ For each test case, output the performance score of the player. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ X, Y, Z ≤ 1000 ----- Sample Input 1 ------ 3 120 135 150 54 54 54 200 180 210 ----- Sample Output 1 ------ 120 54 180 ----- Explanation 1 ------ Test Case 1: The fastest lap time is achieved in the first lap, which is equal to 120 seconds. Thus, the answer is 120. Test Case 2: In all laps, the time is 54 seconds. Thus, the performance score is 54. Test Case 3: The fastest lap time is achieved in the second lap which is equal to 180 seconds. Thus, the answer is 180.","solution":"def performance_score(t, lap_times): results = [] for i in range(t): X, Y, Z = lap_times[i] results.append(min(X, Y, Z)) return results"},{"question":"A company is organizing an event in which participants compete in a game to collect the most tokens. Each participant is identified by a unique ID and starts with a certain number of tokens. Throughout the game, participants can either win or lose tokens in predefined rounds. You are required to write a program to determine the top 3 participants with the most tokens at the end of the game. If there are ties, consider the participant with the smaller ID to rank higher. Input: The input consists of multiple test cases. Each test case starts with an integer n (1 ≤ n ≤ 100), representing the number of participants. The next n lines each contain a participant ID (an integer between 1 and 10^4), followed by the starting token count of that participant, and then followed by an integer m (1 ≤ m ≤ 50), representing the number of rounds. Each of the next m lines will contain an integer t (-1000 ≤ t ≤ 1000) representing the tokens won or lost in that round. The end of the input is indicated by a line where a single \\"0\\" is present. Output: For each test case, output the IDs of the top 3 participants with the most tokens at the end of the game, sorted in descending order of their tokens. If fewer than 3 participants are present, output as many as there are, including ties. Example: Input: 3 101 100 3 20 -10 15 102 200 2 -50 30 103 150 4 10 -20 -5 5 0 Output: 102 103 101","solution":"def calculate_final_tokens(n, participants_data): Calculate final token counts for all participants and return the IDs of the top 3 participants. :param n: Number of participants :param participants_data: List containing data for each participant :return: List of top 3 participant IDs participants = [] for data in participants_data: participant_id, starting_tokens, m, rounds = data total_tokens = starting_tokens + sum(rounds) participants.append((total_tokens, participant_id)) # Sort primarily by total tokens (descending) and secondarily by participant ID (ascending) participants.sort(key=lambda x: (-x[0], x[1])) return [participant[1] for participant in participants[:3]] def top_3_participants(input_data): Process the input data to determine the top 3 participants for each test case. :param input_data: List of strings representing the input :return: List of lists containing the top 3 participant IDs for each test case results = [] index = 0 while index < len(input_data): n = int(input_data[index]) if n == 0: break index += 1 participants_data = [] for _ in range(n): parts = input_data[index].split() participant_id = int(parts[0]) starting_tokens = int(parts[1]) m = int(parts[2]) index += 1 rounds = [int(input_data[index + j]) for j in range(m)] participants_data.append((participant_id, starting_tokens, m, rounds)) index += m results.append(calculate_final_tokens(n, participants_data)) return results"},{"question":"Tom loves playing with strings. He came up with a new game in which he takes a string and a number K, and he needs to find the length of the longest substring that contains at most K distinct characters. Your task is to help Tom by writing a program to solve the problem. Input Format: - The first line contains an integer T, the number of test cases. - Each of the next T pairs of lines contains: - An integer K, the number of distinct characters allowed in the substring. - A string S. Output Format: - For each test case, output an integer representing the length of the longest substring that contains at most K distinct characters. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ K ≤ 26 - 1 ≤ |S| ≤ 100000 (|S| denotes the length of the string S) - The string S only contains lowercase English letters. SAMPLE INPUT 3 2 abcba 1 aaabb 3 abcabcbb SAMPLE OUTPUT 3 3 8 Explanation For Case 1: The longest substring with at most 2 distinct characters is \\"bcb\\", so the length is 3. For Case 2: The longest substring with at most 1 distinct character is \\"aaa\\" or \\"bbb\\", so the length is 3. For Case 3: The entire string \\"abcabcbb\\" has at most 3 distinct characters, so the length is 8.","solution":"def longest_substring_with_k_distinct(T, test_cases): from collections import defaultdict results = [] for i in range(T): K, S = test_cases[i] n = len(S) if K == 0: # If 0 distinct characters allowed, return 0 length results.append(0) continue left = 0 right = 0 max_length = 0 char_count = defaultdict(int) while right < n: char_count[S[right]] += 1 # Check if the current window contains more than K distinct characters while len(char_count) > K: char_count[S[left]] -= 1 if char_count[S[left]] == 0: del char_count[S[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 results.append(max_length) return results"},{"question":"A busy executive needs to maximize the value of meetings he can attend in a single day without any overlaps. His schedule for the day includes multiple meetings where each meeting has a specific start time, end time, and value. The executive can only attend one meeting at a time, but he can completely or partially (in the order they appear) skip meetings to attend those that offer higher value. Your task is to find the maximum total value of meetings the executive can attend in a day given the constraints. -----Input:----- - First line will contain T, the number of test cases. Each test case follows: - First line contains an integer N, the number of meetings. - Next N lines each contain three integers S_i, E_i, and V_i representing the start time, end time, and value of the i-th meeting respectively. -----Output:----- For each test case, output a single line containing the maximum value the executive can obtain by attending the meetings optimally. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 1000 - 0 leq S_i < E_i leq 24 - 1 leq V_i leq 10^5 -----Sample Input:----- 1 3 1 3 50 3 5 10 4 6 40 -----Sample Output:----- 90 -----EXPLANATION:----- In the given example, the executive can attend the first meeting from 1 to 3 and then the third meeting from 4 to 6, making the total value of meetings attended 50 + 40 = 90. The second meeting overlaps with the end of the first meeting, so it\'s skipped.","solution":"def max_meeting_value(test_cases): results = [] for meetings in test_cases: N = len(meetings) # Sort meetings based on their ending time meetings.sort(key=lambda x: x[1]) # dp[i] will store the maximum value of meetings up to the i-th meeting dp = [0] * N dp[0] = meetings[0][2] for i in range(1, N): include_value = meetings[i][2] # Find the latest non-overlapping meeting for j in range(i - 1, -1, -1): if meetings[j][1] <= meetings[i][0]: include_value += dp[j] break dp[i] = max(dp[i - 1], include_value) results.append(dp[-1]) return results def process_input(input_data): lines = input_data.split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 meetings = [] for _ in range(N): S, E, V = map(int, lines[index].split()) meetings.append((S, E, V)) index += 1 test_cases.append(meetings) return test_cases def main(input_data): test_cases = process_input(input_data) results = max_meeting_value(test_cases) for result in results: print(result)"},{"question":"In a far-off kingdom, a powerful wizard has enchanted a series of magical stones. These stones possess a unique property: each stone has a number N inscribed on it and can transform into a different number based on specific magical rules. The transformation must be performed until the stone can no longer be altered. The number inscribed on the stone can be transformed according to the following magic rules: 1. If the number is even, divide it by 2. 2. If the number is odd, multiply it by 3 and add 1. Your task is to determine how many transformations are needed for the number inscribed on the stone to reach the number 1. Input: The first line will contain the total number of test cases T. The next T lines will each contain an integer N representing the number on the stone. Output: For each test case, output the number of transformations required for the stone to reach 1. Example: Input: 3 6 19 27 Output: 8 20 111","solution":"def transformations_needed(n): Returns the number of transformations needed for the number n to reach 1 based on the defined magical rules. count = 0 while n != 1: if n % 2 == 0: n //= 2 else: n = n * 3 + 1 count += 1 return count def transformations_for_stones(stones): Returns a list with the number of transformations for each stone in the input list. results = [] for stone in stones: results.append(transformations_needed(stone)) return results"},{"question":"You are given an array of N integers. You are allowed to perform at most one operation of the following kind: Choose any element in the array, remove it from its position, and insert it back into any other position of the array. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains the single integer N denoting the length of the array. The second line contains N space-separated integers forming the array. Output For each test case, output a single line containing the lexicographically smallest array that can be obtained after the described operation. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 50 -1000 ≤ A[i] ≤ 1000 SAMPLE INPUT 2 5 4 8 2 7 5 6 3 1 4 1 5 9 SAMPLE OUTPUT 2 4 8 7 5 1 1 3 4 5 9","solution":"def lexicographically_smallest_array(arr): n = len(arr) if n <= 1: return arr min_elem = min(arr) min_index = arr.index(min_elem) smallest_array = arr[:min_index] + arr[min_index+1:] smallest_array.sort() smallest_array.insert(0, min_elem) return smallest_array def solve(arrays): results = [] for array in arrays: results.append(lexicographically_smallest_array(array)) return results def array_to_string(array): return \\" \\".join(map(str, array)) def main(test_cases): results = solve(test_cases) for res in results: print(array_to_string(res))"},{"question":"Given an unsorted array A of size n, find the smallest positive integer (greater than 0) that is not present in the array. Constraints * 1 leq n leq 300,000 * -10^9 leq A[i] leq 10^9 Input The input is given in the following format: n A_0 ; A_1 ; ... ; A_{n-1} Output Print the smallest positive integer that is not in the array. Example Input 6 3 4 -1 1 9 5 Output 2 Explanation The smallest positive integer missing from the array is 2, since 1, 3, 4, and 5 are present but 2 is not.","solution":"def smallest_missing_positive(n, A): Find the smallest positive integer that is not present in the array A. # Eliminate non-positive and excessively large values from consideration A = [x for x in A if x > 0] # Create a set from the array for O(1) look-up times A_set = set(A) # Check from 1 upwards for the first missing positive integer smallest_missing = 1 while smallest_missing in A_set: smallest_missing += 1 return smallest_missing"},{"question":"You are organizing a photo exhibition and have several photo frames that need to be displayed. You have m walls available, and each wall has a maximum weight capacity. Each photo frame has a certain weight, and it is your task to determine if you can distribute the photo frames across the walls such that no wall exceeds its weight capacity. There are n photo frames in total, each with a given weight, and m walls each with a weight capacity. You need to find out if it\'s possible to place all the photo frames on the walls without exceeding the weight capacity of any wall. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 300 000) — the number of photo frames and the number of walls. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 10^9) — the weights of the photo frames. The third line contains m integers c1, c2, ..., cm (1 ≤ ci ≤ 10^9) — the weight capacities of the walls. Output Print \\"YES\\" if it is possible to place all the photo frames on the walls without exceeding the capacity of any wall. Otherwise, print \\"NO\\". Examples Input 4 2 10 20 30 40 100 100 Output YES Input 3 3 50 60 70 60 50 50 Output NO Note In the first sample: - You can place the photo frames with weights 10, 20, 30, and 40 on the two walls with capacities 100 each. One possible distribution is to place frames with weights 10 and 40 on the first wall and frames with weights 20 and 30 on the second wall. In the second sample: - You have three photo frames with weights 50, 60, and 70, and three walls with capacities 60, 50, and 50. There is no way to distribute the photo frames such that no wall exceeds its capacity. For example, the third frame with weight 70 cannot be placed on any of the walls since they all have capacities less than 70.","solution":"def can_distribute_frames(n, m, weights, capacities): Determine if it\'s possible to place all the photo frames on the walls without exceeding the weight capacity of any wall. Parameters: n (int): The number of photo frames. m (int): The number of walls. weights (list of int): The weights of the photo frames. capacities (list of int): The weight capacities of the walls. Returns: str: \\"YES\\" if it is possible to place all the photo frames on the walls, otherwise \\"NO\\". # Sort weights in descending order weights.sort(reverse=True) # Sort capacities in descending order capacities.sort(reverse=True) # Iterate over each weight for i in range(n): # Check if there is no capacity that can handle this weight if weights[i] > capacities[min(i, m-1)]: return \\"NO\\" return \\"YES\\""},{"question":"Write a program that simulates the operation of a warehouse robot that picks up packages and delivers them to specified locations within a 2-dimensional grid warehouse. The robot starts at the origin (0,0) and follows a series of instructions to move and deliver packages. Each instruction is of the form: - `U x` - Move up by `x` units - `D x` - Move down by `x` units - `L x` - Move left by `x` units - `R x` - Move right by `x` units - `P x y` - Pick up the package and move directly to coordinates `(x, y)` to deliver it Your task is to write a program that reads the size of the grid, the list of instructions, and outputs the final coordinates of the robot after executing all instructions. The grid size will ensure that the robot never moves out of bounds. The robot always starts at the origin (0, 0). Assume there are no obstacles and the robot can move freely within the bounds of the grid. Input The input consists of multiple datasets. Each dataset is given in the following format: ``` n size instruction_1 instruction_2 ... instruction_n ``` Where: - `n` is the number of instructions. - `size` is the maximum size of the grid (width and height), given as a single integer value. - `instruction_i` is the i-th instruction in the list (one of `U`, `D`, `L`, `R`, or `P`). The end of input is indicated by `n` being 0. The number of instructions `n` will be a positive integer, and the size of the grid will be a positive integer. Output For each dataset, output the final coordinates of the robot after executing all instructions. Example Input ``` 5 10 U 3 R 4 P 2 2 D 1 L 5 4 5 U 1 R 3 D 2 L 2 0 ``` Output ``` 2, 2 (0, 0) ``` Explanation For the first dataset: - The robot starts at (0,0). - `U 3` moves the robot to (0,3). - `R 4` moves the robot to (4,3). - `P 2 2` delivers a package to (2,2) and moves the robot there. - `D 1` moves the robot to (2, 1). - `L 5` moves the robot to (-3, 1), but since the maximum size is 10, it will be clamped to (0, 1).","solution":"def simulate_warehouse_robot(n, size, instructions): Simulates the movement of a warehouse robot based on given instructions. Parameters: n (int): Number of instructions size (int): Maximum size of the grid (width and height) instructions (list): List of instruction strings Returns: (int, int): Final coordinates of the robot x, y = 0, 0 for instruction in instructions: action = instruction.split() if action[0] == \'U\': y = min(y + int(action[1]), size - 1) elif action[0] == \'D\': y = max(y - int(action[1]), 0) elif action[0] == \'L\': x = max(x - int(action[1]), 0) elif action[0] == \'R\': x = min(x + int(action[1]), size - 1) elif action[0] == \'P\': x, y = int(action[1]), int(action[2]) return (x, y)"},{"question":"# Counting Valleys You are a hiker who has been tracking your hikes over the years. Your hikes consist of alternating between taking steps up and taking steps down. Each hike can be represented as a string where each character corresponds to either an upward step `U` or a downward step `D`. A valley is defined as a sequence of consecutive steps below sea level, starting with a step down from sea level and ending with a step up to sea level. You need to determine the number of valleys walked through during your hike. Example Consider the hike described by the string \\"UDDDUDUU\\". This string represents the following sequence of steps: 1. Step Up (`U`) - Reaches 1 meter above sea level 2. Step Down (`D`) - Returns to sea level 3. Step Down (`D`) - Goes 1 meter below sea level 4. Step Down (`D`) - Goes 2 meters below sea level 5. Step Up (`U`) - Returns to 1 meter below sea level 6. Step Down (`D`) - Goes 2 meters below sea level 7. Step Up (`U`) - Returns to 1 meter below sea level 8. Step Up (`U`) - Returns to sea level In this hike, there is one valley: the sequence from the first step down (`D`) to the last step up (`U`). Function Description Write the `countingValleys` function to return an integer representing the number of valleys traversed. `countingValleys` has the following parameters: - int n: the number of steps in the hike - string s: a string describing the path Returns - int: the number of valleys traversed Input Format - The first line contains an integer `n`, the number of steps in the hike. - The second line contains a single string `s` of `n` characters that describe the path. Constraints - 2 leq n leq 10^6 - `s[i]` ∈ {`U`, `D`} Sample Input 0 8 UDDDUDUU Sample Output 0 1 Explanation 0 The user takes one step up from sea level, followed by three steps down into a valley. Then, they take one step up, one step down, and finally, two steps up reaching sea level again. Sample Input 1 12 DDUUDDUDUUUD Sample Output 1 2 Explanation 1 The user keeps trekking from sea level and enters valleys twice during the journey. Each valley starts with a downward step and ends with an upward step to sea level.","solution":"def countingValleys(n, s): Determines the number of valleys traversed during the hike. Parameters: n (int): the number of steps in the hike s (string): a string describing the path (consisting of \'U\' and \'D\') Returns: int: the number of valleys traversed sea_level = 0 current_level = 0 valleys_count = 0 in_valley = False for step in s: if step == \'U\': current_level += 1 else: current_level -= 1 if current_level < sea_level and not in_valley: in_valley = True if current_level == sea_level and in_valley: valleys_count += 1 in_valley = False return valleys_count"},{"question":"Problem: Dr. Xavier\'s team of mutants are planning a strategy to defeat their enemies. They need to analyze the strengths of their opponents and come up with a new plan based on the enemy\'s formation. The formation of enemies can be represented as a 2D grid, where each cell contains a number representing the strength of the enemy in that position. Dr. Xavier asks his team to calculate the maximum strength that can be achieved by moving through the grid from the top-left corner to the bottom-right corner. They can only move either down or right at any point in time. The strength of a path is defined as the sum of the values of the cells along the path. Input: The first line of input contains an integer T, the number of test cases. Each test case starts with a line containing two integers M and N, denoting the dimensions of the grid. The next M lines contain N integers each, representing the strength values in the grid. Output: For each test case, output a single integer, the maximum strength that can be achieved. Constraints: 1 ≤ T ≤ 10 1 ≤ M, N ≤ 100 0 ≤ Grid[i][j] ≤ 100 Sample Input: 2 3 3 1 2 3 4 5 6 7 8 9 2 2 5 3 1 7 Sample Output: 21 15 Explanation: For the first test case: The grid is: 1 2 3 4 5 6 7 8 9 The path with the maximum strength is 1 → 4 → 7 → 8 → 9, which has a strength of 29. For the second test case: The grid is: 5 3 1 7 The path with the maximum strength is 5 → 1 → 7, which has a strength of 15.","solution":"def max_strength_path(grid): Given a 2D grid of strengths, compute the maximum strength path from top-left to bottom-right. M = len(grid) N = len(grid[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = grid[0][0] for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[M-1][N-1] def compute_max_strengths(T, test_cases): Compute the maximum strengths for a number of test cases. results = [] for case in test_cases: M, N = case[0] grid = case[1] results.append(max_strength_path(grid)) return results"},{"question":"Given an array of n integers, find the maximum sum of its diameters. The diameter of the array is defined as the sum of the absolute differences between all pairs of distinct elements in the array. More formally, for an array a of length n, its diameter is defined as: D(a) = sum_{1 le i < j le n} |a_i - a_j| Your task is to compute and print the maximum possible sum of diameters among all possible single-element subsets of the given array. -----Input----- The first line contains an integer t (1 le t le 50) — the number of test cases. Each of the next t lines contains an integer n (2 le n le 100), followed by n integers representing the elements of the array. -----Output----- For each test case, print the maximum possible diameter of any subset of length 1 chosen from the array. -----Examples----- Input 2 3 1 2 3 4 4 3 2 1 Output 3 3 -----Note----- In the first example, we can form the subsets {1}, {2}, and {3}. However, the diameter requires at least two elements, so it remains 3 given the input constraints. In the second example, the optimal subset {2} achieves a sum of absolutemax diameter 3.","solution":"def max_diameter_sum(arr): Computes the maximum possible diameter of subset of array. The diameter of the array is defined as the sum of the absolute differences between all pairs of distinct elements in the array. n = len(arr) max_value = max(arr) min_value = min(arr) return max_value - min_value def process_test_cases(test_cases): Processes multiple test cases and returns results for each. results = [] for n, arr in test_cases: results.append(max_diameter_sum(arr)) return results"},{"question":"Baahubali is facing another mathematical challenge from Kattappa. This time, he is given a sequence of integers and a target number. Baahubali\'s task is to determine if there is a way to insert any combination of + or - operations between the integers such that the resulting arithmetic expression evaluates to the target number. Input The first line contains the number of test cases 1 ≤ t ≤ 100. Each test case starts with an integer n (the number of integers in the sequence) followed by the target number k, (where 1 ≤ n ≤ 10 and 0 ≤ k ≤ 100). The next line contains n integers in the range 0 to 50 (inclusive). Output For each test case, print \\"YES\\" (without quotes) if the target number k is obtainable, otherwise print \\"NO\\" (without quotes). SAMPLE INPUT 2 4 10 1 2 3 4 3 5 1 1 1 SAMPLE OUTPUT YES NO Explanation Test Case 1: Using the sequence 1, 2, 3, and 4, one possible combination is 1 + 2 + 3 + 4 = 10. Hence, the output is YES. Test Case 2: Using the sequence 1, 1, 1, it is not possible to obtain 5 with any combination of + and -. Hence, the output is NO.","solution":"def can_obtain_target(nums, target): Determine if we can insert + or - between numbers to reach the target number. def dfs(index, current_sum): if index == len(nums): return current_sum == target return dfs(index + 1, current_sum + nums[index]) or dfs(index + 1, current_sum - nums[index]) return dfs(0, 0) def solve(test_cases): results = [] for case in test_cases: n, k, numbers = case if can_obtain_target(numbers, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"David loves playing a game with his friends where he rearranges the letters of a given word to form new words. However, he wants to know if it\'s possible to rearrange the letters of a given word to form a palindrome. A palindrome is a word that reads the same backward as forward. Write a function to help David determine if the letters of a given word can be rearranged to form a palindrome. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains a single word consisting of lowercase Latin letters. -----Output:----- For each test case print either \\"YES\\" (without quotes) if the letters can be rearranged to form a palindrome else \\"NO\\" (without quotes). -----Constraints----- - 1 leq T leq 100 - 1 leq length of the word leq 10^5 -----Sample Input:----- 3 civic ivicc hello -----Sample Output:----- YES YES NO -----EXPLANATION:----- - Example 1: The word \\"civic\\" is already a palindrome. - Example 2: The word \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. - Example 3: The word \\"hello\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(word): Returns \\"YES\\" if the given word\'s letters can be rearranged to form a palindrome, otherwise returns \\"NO\\". from collections import Counter count = Counter(word) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def check_palindromes(T, words): Process multiple test cases to determine for each word if it can be rearranged to form a palindrome. Returns a list of \\"YES\\" or \\"NO\\" for each word. results = [] for word in words: results.append(can_form_palindrome(word)) return results"},{"question":"Two friends, Sam and Alex, have a hobby of collecting books. They often exchange books with each other. Each book has a unique ID number, and they keep a record of the exchanges they have made over a period of time. Initially, each of the friends has a distinct set of books. Your task is to determine, for a given number of exchanges, the number of books each friend has after all the exchanges have been made. -----Input----- The first line contains two integers k and n — the number of initial books each friend has and the number of exchanges respectively (1 le k le 10^9, 0 le n le 10^5). The next line contains k integers a_i — the unique IDs of books that Sam initially has (1 le a_i le 10^9). The third line contains k integers b_i — the unique IDs of books that Alex initially has (1 le b_i le 10^9). Each of the next n lines contains two integers e_i and t_i — specifying that the i-th exchange involves Sam giving book with ID e_i to Alex and receiving book with ID t_i from Alex. -----Output----- In the only line, print two integers — the number of books Sam and Alex have after all the exchanges. -----Examples----- Input 3 2 1 2 3 4 5 6 1 4 2 5 Output 3 3 Input 4 3 1 2 3 4 5 6 7 8 1 5 3 7 2 6 Output 4 4 -----Note----- In the first example, Sam initially has books with IDs {1, 2, 3} and Alex has books with IDs {4, 5, 6}. After the first exchange, Sam has {2, 3, 4} and Alex has {1, 5, 6}. After the second exchange, Sam has {3, 4, 5} and Alex has {1, 2, 6}. Finally, the number of books each possesses remains the same as the initial count at 3 each. In the second example, the exchanges do not change the initial count of books, so the final count stays the same.","solution":"def book_exchange(k, n, initial_books_sam, initial_books_alex, exchanges): Function to determine the number of books each friend has after all exchanges. Parameters: k (int): Initial number of books each friend has n (int): Number of exchanges initial_books_sam (list): List of book IDs Sam initially has initial_books_alex (list): List of book IDs Alex initially has exchanges (list of tuples): List of book exchanges Returns: tuple: Number of books Sam and Alex have after all exchanges # Simulating exchanges for e_i, t_i in exchanges: initial_books_sam.remove(e_i) initial_books_sam.append(t_i) initial_books_alex.remove(t_i) initial_books_alex.append(e_i) # Number of books after all exchanges sam_books_count = len(initial_books_sam) alex_books_count = len(initial_books_alex) return sam_books_count, alex_books_count # Example input: k = 3 n = 2 initial_books_sam = [1, 2, 3] initial_books_alex = [4, 5, 6] exchanges = [(1, 4), (2, 5)] print(book_exchange(k, n, initial_books_sam, initial_books_alex, exchanges)) # Output: (3, 3)"},{"question":"Given a positive integer array `nums` of size `n`, create an algorithm to find the maximum sum of elements such that no two chosen elements are adjacent to each other in the array. You are to write a function `maxSumNonAdjacent(nums)`, which takes a list of integers as input, and returns the maximum sum. -----Constraints----- - 1 leq n leq 10^5 - 1 leq nums[i] leq 10^4 -----Input----- The input is a single list of integers given to the function as its argument. -----Output----- Return an integer which is the maximum sum of non-adjacent elements in the list. -----Example----- Input: nums = [3, 2, 7, 10] Output: 13 Explanation: The sum of the maximum non-adjacent elements (3 + 10) is 13. -----Example----- Input: nums = [3, 2, 5, 10, 7] Output: 15 Explanation: The sum of the maximum non-adjacent elements (3 + 10 + 2) is 15.","solution":"def maxSumNonAdjacent(nums): Returns the maximum sum of non-adjacent elements in the array. if not nums: return 0 if len(nums) == 1: return nums[0] include = 0 exclude = 0 for num in nums: new_exclude = max(include, exclude) include = exclude + num exclude = new_exclude return max(include, exclude)"},{"question":"Design a program that finds the longest palindrome that can be built with given letters. Given a string consisting of lowercase letters, return the length of the longest possible palindrome that can be built with letters from the string. A palindrome is word that reads the same forward and backward. Examples of palindromes include \\"racecar\\" and \\"madam\\". # Input: The input consists of a single line containing a string of lowercase letters. The length of the string will not exceed 1000. # Output: Output a single integer representing the length of the longest possible palindrome that can be built with the input letters. # Example: Input: ``` abccccdd ``` Output: ``` 7 ``` Explanation: One longest palindrome that can be built is \\"dccaccd\\", whose length is 7. # Notes: - If there are multiple longest palindromes possible, the program only needs to return the length of one of them. - The order of letters in the output is not important, as long as the length is correct.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindrome that can be built with the given letters in s. from collections import Counter counts = Counter(s) length = 0 odd_found = False for count in counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True return length + 1 if odd_found else length"},{"question":"Let\'s consider a grid of size `n x m`. You are initially positioned at the top-left corner of the grid (1,1). You need to navigate to the bottom-right corner of the grid (n,m), but you can only move right or down one step at a time. You need to find the number of unique paths from the top-left corner to the bottom-right corner. Write a function `uniquePaths(n, m)` that returns the number of unique paths. ```python # Examples n = 2, m = 2 #(→→), (↓↓) #Unique Paths: 2 return 2 n = 3, m = 2 # (→→↓), (→↓→), (↓→→) # Unique Paths: 3 return 3 n = 3, m = 3 #(→→↓↓), (→↓↓→), (↓→→↓), (↓↓→→), (→↓→↓), (→↓↓→), (↓→↓→), (↓↓→→) #Unique Paths: 6 return 6 ``` The dimensions `n` and `m` can go up to 100.","solution":"def uniquePaths(n, m): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid of size n x m by only moving right or down. # Create a 2D array to store the results of subproblems dp = [[0] * m for _ in range(n)] # There is only one way to reach a cell in the first row or first column for i in range(n): dp[i][0] = 1 for j in range(m): dp[0][j] = 1 # Fill the array using the recurrence relation: dp[i][j] = dp[i-1][j] + dp[i][j-1] for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][m-1]"},{"question":"Given a 2D grid of size n X m and an integer k, write a function that returns the number of different paths from the top-left corner to the bottom-right corner of the grid, given that you can only move either down or right at any point in time, and you must take exactly k steps in total. If there are no such paths that satisfy the conditions, return 0. Input: The first line of the input contains the number of test cases T. For each test case, the first line contains three integers n, m, and k. Output: The function should return the number of unique paths for each test case. User Task: The task is to complete the function numberOfPaths() which takes the integers n, m, and k as inputs and returns the number of different paths that satisfy the conditions. Constraints: 1 <= T <= 100 1 <= n, m <= 50 1 <= k <= 100 Example: Input: 2 2 2 2 3 3 4 Output: 2 4 Explanation: Testcase 1: There are exactly 2 different paths that go from (0,0) to (1,1) and take exactly 2 steps: Right → Down, Down → Right. Testcase 2: There are exactly 4 different paths that go from (0,0) to (2,2) and take exactly 4 steps: Right → Right → Down → Down, Right → Down → Right → Down, Down → Down → Right → Right, Down → Right → Down → Right.","solution":"def numberOfPaths(n, m, k): # If the number of steps k is less than (n-1 + m-1) or more than (n-1 + m-1), # there\'s no point to proceed as it\'s not possible to reach the destination in exactly k steps. if k != n + m - 2: return 0 # Function to compute nCr efficiently def nCr(n, r): if r > n - r: r = n - r c = 1 for i in range(r): c = c * (n - i) // (i + 1) return c # To reach from top-left to bottom-right in a grid of n x m in (n-1) downs and # (m-1) rights steps, the number of distinct permutations is given by: # (k choose (n-1)) = k! / ((n-1)! * (k-(n-1))!) total_steps = k down_steps = n - 1 right_steps = m - 1 return nCr(total_steps, down_steps) def process_test_cases(T, test_cases): results = [] for i in range(T): n, m, k = test_cases[i] results.append(numberOfPaths(n, m, k)) return results"},{"question":"Write a function that takes a list of integers and returns the length of the longest contiguous subsequence where the sum of the elements is equal to zero. If there is no such subsequence, return 0.","solution":"def longest_zero_sum_subsequence(arr): Returns the length of the longest contiguous subsequence where the sum of the elements is zero. if not arr: return 0 sum_map = {} max_len = 0 curr_sum = 0 for i in range(len(arr)): curr_sum += arr[i] if curr_sum == 0: max_len = i + 1 if curr_sum in sum_map: max_len = max(max_len, i - sum_map[curr_sum]) else: sum_map[curr_sum] = i return max_len"},{"question":"# Problem Statement: You are given a string representing a mathematical expression containing integers and the operators \'+\', \'-\', \'*\', \'/\', and \'()\'. Assume the string is a valid expression that follows the standard rules of arithmetic precedence. Your task is to evaluate this expression and return its value. To help manage the complexity of the task, consider implementing the Shunting Yard algorithm to convert the expression to Reverse Polish Notation (RPN) and then evaluating the RPN expression. Input - A single line containing a string `s` representing the mathematical expression. The length of the string `s` can be up to 100 characters. Output - A single integer which is the result of evaluating the expression. Example **Input:** \\"3+(2*2)-1\\" **Output:** 6 **Input:** \\"10/(2+3)\\" **Output:** 2 Note - The operators \'*\', \'/\', \'+\' and \'-\' follow the normal precedence rules. - \'(\' and \')\' can be used to override the usual precedence rules. - Division results should be truncated towards zero. To solve this problem, you might find it useful to break it down into two main steps: 1. **Conversion to Reverse Polish Notation (RPN)**: Using the Shunting Yard algorithm to convert the infix expression to RPN. 2. **Evaluation of RPN**: Evaluating the RPN expression to obtain the final result. In your solution, handle possible edge cases such as: - Empty strings - Division by zero - Unbalanced parentheses (although the problem assures a valid expression, it\'s good practice to think about it during implementation)","solution":"def evaluate_expression(s): Evaluates a given mathematical expression string containing integers, the operators \'+\', \'-\', \'*\', \'/\', and \'()\' using the Shunting Yard algorithm to convert the expression to Reverse Polish Notation (RPN) and then evaluating the RPN expression. :param s: str - a valid mathematical expression :return: int - the result of evaluating the expression def precedence(op): Return the precedence of the given operator if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_op(a, b, op): Apply an operator to two operands. if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return int(a / b) # use int to truncate towards zero def to_rpn(expression): Convert infix expression to Reverse Polish Notation using the Shunting Yard algorithm. stack = [] # stack to hold operators and parentheses output = [] # list to build the RPN expression i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 output.append(val) i -= 1 elif expression[i] == \'(\': stack.append(expression[i]) elif expression[i] == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # pop \'(\' else: while (stack and precedence(stack[-1]) >= precedence(expression[i])): output.append(stack.pop()) stack.append(expression[i]) i += 1 while stack: output.append(stack.pop()) return output def evaluate_rpn(tokens): Evaluate the RPN expression. stack = [] for token in tokens: if isinstance(token, int): stack.append(token) else: b = stack.pop() a = stack.pop() stack.append(apply_op(a, b, token)) return stack[0] rpn = to_rpn(s) return evaluate_rpn(rpn)"},{"question":"In a town with n different restaurants, each restaurant offers a unique dish, numbered from 1 to n. Each dish has a specific preparation time ti (in minutes). Recently, a food critic has started writing reviews for the dishes. Critic can update the time taken to prepare a dish based on his experience. Also, foodies want to know the minimum total preparation time for a combination of dishes from different restaurants. There are two types of queries you need to handle: \\"C d t\\": Change the preparation time for dish d to t. \\"T l r\\": Find the minimum total preparation time for dishes numbered from l to r, inclusive. Input The first line of input contains two integers n and q (1 ≤ n, q ≤ 100,000), separated by a single space. The second line contains n integers ti (1 ≤ ti ≤ 10^9). Next q lines describe a query in one of the following formats: \\"C d t\\" or \\"T l r\\" (1 ≤ d, l, r ≤ n, 1 ≤ t ≤ 10^9). Output For each query of type \\"T\\", output the corresponding answer. SAMPLE INPUT 5 4 5 1 10 7 3 T 1 3 C 2 12 T 1 3 T 3 5 SAMPLE OUTPUT 16 27 20 Explanation: - The first query asks for the sum of the preparation times for dishes numbered 1 through 3: 5 + 1 + 10 = 16. - The second query updates the preparation time for dish 2 to 12. - The third query asks for the sum of the preparation times for dishes numbered 1 through 3 after the update: 5 + 12 + 10 = 27. - The fourth query asks for the sum of the preparation times for dishes numbered 3 through 5: 10 + 7 + 3 = 20.","solution":"def process_queries(n, q, times, queries): result = [] for query in queries: parts = query.split() if parts[0] == \\"C\\": d = int(parts[1]) - 1 t = int(parts[2]) times[d] = t elif parts[0] == \\"T\\": l = int(parts[1]) - 1 r = int(parts[2]) result.append(sum(times[l:r])) return result"},{"question":"You are a software developer tasked with developing a new scheduling algorithm for hospital shifts. Hospitals have different numbers of doctors available each day, and each doctor has different start and end times for their shifts. Your goal is to find the maximum number of overlapping shifts on any given day. A shift is defined by its start time and end time in 24-hour format (e.g., 9:00 to 17:00). -----Input----- The first line contains a single integer n (1 le n le 1000), the number of shifts. The next n lines each contain two strings, representing the start time and end time of a shift in the format \\"HH:MM\\". The start time and end time are guaranteed to be valid 24-hour times, and the end time is always later than the start time. -----Output----- Output a single integer, the maximum number of overlapping shifts. -----Examples----- Input 3 09:00 17:00 12:00 20:00 11:00 15:00 Output 3 Input 4 08:00 12:00 12:00 16:00 10:00 14:00 11:00 15:00 Output 3 -----Note----- In the first example, all three shifts overlap between 12:00 and 15:00. In the second example, the maximum overlap occurs between 11:00 and 12:00 and between 12:00 and 14:00, with three shifts overlapping.","solution":"def convert_to_minutes(time_str): hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def max_overlapping_shifts(shifts): events = [] for start, end in shifts: events.append((convert_to_minutes(start), \'start\')) events.append((convert_to_minutes(end), \'end\')) events.sort() max_overlaps = 0 current_overlaps = 0 for time, event in events: if event == \'start\': current_overlaps += 1 if current_overlaps > max_overlaps: max_overlaps = current_overlaps else: current_overlaps -= 1 return max_overlaps"},{"question":"You are given an array of integers representing the heights of a row of bushes. Chef wants to trim the bushes such that each bush is not taller than the previous bush to its left. Trimming a bush means reducing its height to a non-negative value less than or equal to its current height. Chef wants to minimize the sum of the differences between the original heights and the trimmed heights for all bushes. Your task is to find the minimum total cost required to trim the bushes to meet the given condition. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - The first line of each test case contains an integer N denoting the number of bushes. - The second line of each test case contains N integers separated by spaces, representing the heights of the bushes. ------ Output Format ------ For each test case, output the minimum total cost required to trim the bushes. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{3} 0 ≤ height_of_bush ≤ 10^4 - Sum of N over all test cases does not exceed 5 cdot 10^{5} ------ Sample Input 1 ------ 3 4 3 2 4 1 5 5 3 8 3 2 3 2 2 2 ------ Sample Output 1 ------ 2 5 0 ------ Explanation 1 ------ - For the first test case, Chef can trim the bushes to heights [3, 2, 2, 1]. The cost is (4-2) = 2 . - For the second test case, Chef can trim the bushes to heights [5, 3, 3, 3, 2]. The cost is (8-3) + (3-3) = 5 . - For the third test case, the bushes already meet the condition, so the cost is 0 .","solution":"def trim_bushes(T, test_cases): results = [] for case in test_cases: N, heights = case total_cost = 0 for i in range(1, N): if heights[i] > heights[i-1]: total_cost += heights[i] - heights[i-1] heights[i] = heights[i-1] results.append(total_cost) return results # Main function to read input and provide output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) heights = list(map(int, data[index+1:index+1+N])) test_cases.append((N, heights)) index += N + 1 results = trim_bushes(T, test_cases) for result in results: print(result)"},{"question":"You are given a list of integers and a target integer K. Your task is to determine if there exist two distinct integers in the list whose sum is equal to K. Example 1: Input: arr = [1, 3, 4, 2, 5] K = 6 Output: YES Explanation: Because 1 + 5 = 6 or 2 + 4 = 6 Example 2: Input: arr = [1, 2, 3, 9] K = 8 Output: NO Explanation: There are no two integers in the list whose sum is 8. Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasPairWithSum() which takes a list of integers arr and an integer K, and returns \\"YES\\" if there are two distinct integers whose sum is K, otherwise returns \\"NO\\". Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 2 <= len(arr) <= 10^6 -10^9 <= arr[i] <= 10^9 -2*10^9 <= K <= 2*10^9","solution":"def hasPairWithSum(arr, K): Determines if there exist two distinct integers in arr whose sum is equal to K. Parameters: arr (list of int): A list of integers. K (int): Target integer. Returns: str: \\"YES\\" if there are two distinct integers whose sum is K, otherwise \\"NO\\". seen = set() for number in arr: if K - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"-----Input----- You are given an integer n (1 ≤ n ≤ 10^3), followed by n integers, each on a new line. -----Output----- Output the product of the n integers. -----Examples----- Input 3 4 5 2 Output 40 Input 5 1 2 3 4 5 Output 120","solution":"def product_of_integers(n, integers): Returns the product of the n integers. Args: n: int - the number of integers integers: list of int - the n integers Returns: int - the product of the n integers product = 1 for integer in integers: product *= integer return product"},{"question":"Write a program to solve the following problem: Given an integer n (1 <= n <= 15), generate an n x n matrix filled with integers from 1 to n^2 in a spiral order starting from the top-left corner. Spiral order is defined as starting from the top left, moving to the right along the top row, then down the last column, then to the left along the bottom row, then up the first column, and repeating this process for the inner layers. Your program should take as input an integer n, and output the corresponding n x n matrix in spiral order. # Input: Multiple inputs are given. Each input specifies an integer n on a single line. The input ends with 0. # Output: For each input integer n, output an n x n matrix filled with integers from 1 to n^2 in spiral order, right-justified with 4-digit numbers in each cell. # Example: Input: 4 3 0 Output: 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 1 2 3 8 9 4 7 6 5","solution":"def generate_spiral_matrix(n): if n < 1 or n > 15: return \\"Invalid input. n must be between 1 and 15.\\" matrix = [[0] * n for _ in range(n)] num = 1 left, right, top, bottom = 0, n-1, 0, n-1 while left <= right and top <= bottom: for i in range(left, right+1): matrix[top][i] = num num += 1 top += 1 for i in range(top, bottom+1): matrix[i][right] = num num += 1 right -= 1 for i in range(right, left-1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 for i in range(bottom, top-1, -1): matrix[i][left] = num num += 1 left += 1 return matrix def print_matrix(matrix): for row in matrix: print(\\"\\".join(f\\"{num:5}\\" for num in row)) def main(): import sys input = sys.stdin.read().strip().split() for n in input: n = int(n) if n == 0: break matrix = generate_spiral_matrix(n) print_matrix(matrix) print() if __name__ == \'__main__\': main()"},{"question":"Given an array of integers and a specified sum target, determine if there are two distinct numbers in the array that add up to the target sum. More formally, check if there exist two indices i and j such that: - i != j - 0 <= i, j < arr.length - arr[i] + arr[j] == target Example 1: Input: arr = [2, 7, 11, 15], target = 9 Output: true Explanation: Pair (2, 7) adds up to the target 9. Example 2: Input: arr = [3, 2, 4], target = 6 Output: true Explanation: Pair (2, 4) adds up to the target 6. Example 3: Input: arr = [3, 3], target = 6 Output: true Explanation: Pair (3, 3) adds up to the target 6. Example 4: Input: arr = [1, 2, 3], target = 7 Output: false Explanation: There does not exist two numbers in the array that add up to the target 7. Constraints: 1 <= arr.length <= 500 -10^3 <= arr[i] <= 10^3","solution":"def two_sum(arr, target): Returns True if there are two distinct numbers in the array that add up to the target, and False otherwise. seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return True seen[num] = i return False"},{"question":"**Problem** You are developing a new multiplayer online game. This game includes a challenging maze environment. The game consists of an N times N grid with walls, empty spaces, and treasure. Players must navigate from a given starting point to the treasure while avoiding walls. They can move in one of four directions: up, down, left, or right. If they step into a cell with a wall, they cannot move, and must try another direction. The objective is to find the shortest path to the treasure, or determine if it\'s impossible to reach. Given the maze layout and the player\'s starting coordinates, your task is to determine the minimum number of steps required to reach the treasure, or if it is not possible to reach the treasure, return `-1`. # Input The input is provided in the following format: ``` N sx sy tx ty grid ``` - `N` (1 ≤ N ≤ 1000): The size of the grid. - `sx sy`: The starting coordinates of the player. - `tx ty`: The coordinates of the treasure. - `grid`: An N x N grid, where each cell is either \'.\' (empty space) or \'#\' (wall). # Output Output a single integer representing the minimum number of steps required to reach the treasure. If it is not possible to reach the treasure, output `-1`. # Example Input ``` 5 0 0 4 4 ..... .#.#. .#... .#..# ..... ``` Output ``` 8 ``` Input ``` 3 0 0 2 2 .#. # .#. ``` Output ``` -1 ``` # Note In the first example, the player navigates from (0,0) to (4,4) in 8 steps avoiding the walls. In the second example, it is impossible to reach the treasure due to walls blocking all possible paths.","solution":"from collections import deque def shortest_path_to_treasure(N, sx, sy, tx, ty, grid): Finds the shortest path from start (sx, sy) to treasure (tx, ty) in a given N x N grid. Returns the minimum number of steps, or -1 if not possible. # Directions for movement: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if starting or target points are walls if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return -1 # BFS initialization queue = deque([(sx, sy, 0)]) # (x, y, steps) visited = set() visited.add((sx, sy)) while queue: x, y, steps = queue.popleft() # Check if we have reached the treasure if x == tx and y == ty: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"Emily recently discovered a programming problem in an old notebook from her college days. The problem involves constructing a specific binary array from an integer array using certain rules. The original problem statement is written as follows: Given an array `a` of length `n` consisting of integers, Emily wants to create a binary array `b` of length `n` such that: - `b[i]` = 1 if the subarray `a[0: i + 1]` is strictly increasing, otherwise `b[i]` = 0. A subarray is strictly increasing if every subsequent element is strictly greater than the preceding one. Below are some examples: For `a = [1, 2, 3, 4, 5]`, the array `b` would be `[1, 1, 1, 1, 1]`. For `a = [2, 2, 3, 4, 3]`, the array `b` would be `[1, 0, 1, 1, 0]`. Write a program to help Emily generate this binary array `b`. -----Input----- The first line contains an integer `n` (`1 leq n leq 10^5`) — the length of the array `a`. The second line contains `n` integers `a_1, a_2, ldots, a_n` (`1 leq a_i leq 10^9`) — the elements of array `a`. -----Output----- Print `n` integers `b_1, b_2, ldots, b_n` (`0 leq b_i leq 1`) — the elements of the binary array `b`. -----Examples----- Input: 5 1 2 3 4 5 Output: 1 1 1 1 1 Input: 5 2 2 3 4 3 Output: 1 0 1 1 0","solution":"def construct_binary_array(a): n = len(a) b = [0] * n b[0] = 1 # The first element is always part of an increasing subarray for i in range(1, n): if a[i] > a[i - 1]: b[i] = 1 else: b[i] = 0 return b # Example usage: # n = 5 # a = [1, 2, 3, 4, 5] # print(construct_binary_array(a))"},{"question":"You are given a string boldsymbol{mathrm{S}} consisting of lowercase English letters and you want to perform a series of operations to convert boldsymbol{mathrm{S}} into a \\"palindromic string.\\" A \\"palindromic string\\" is defined as a string that reads the same forward and backward. You can perform the following operation any number of times: choose any position in the string and replace the character at this position with any other lowercase English letter at a cost. Given the string boldsymbol{mathrm{S}}, find the minimum total cost to convert it into a palindromic string. Function Description Complete the makingPalindrome function in the editor below. makingPalindrome has the following parameter(s): string s: a string of lowercase English letters Returns int: the minimum total cost of converting the input string to a palindromic string Input Format - A single line containing the string boldsymbol{mathrm{S}}, consisting of lowercase English letters. Constraints - 1le |s|le 10^5 Example 1 Input ``` abc ``` Output ``` 2 ``` Explanation To make the string \\"abc\\" a palindromic string, the minimum cost operations would be to change \'a\' to \'c\' or \'c\' to \'a\', resulting in \\"cbc\\" or \\"aba\\". Both operations have a total cost of |a-c|=2. Example 2 Input ``` abcd ``` Output ``` 4 ``` Explanation To make the string \\"abcd\\" a palindromic string, you need to change \'a\' to \'d\' and \'c\' to \'b\' or \'b\' to \'c\' and \'d\' to \'a\', among other possible modifications. This results in \\"dbcd\\", \\"abca\\" etc. All these operations have a total cost of |a-d| + |c-b| = 4.","solution":"def makingPalindrome(s): Returns the minimum total cost to convert the input string to a palindromic string. # Initialize total cost total_cost = 0 # Compute the lengths n = len(s) # Iterate over the string, considering pairs from both ends towards the center for i in range(n // 2): # Cost is the absolute difference between the ASCII values of mismatched characters total_cost += abs(ord(s[i]) - ord(s[n - i - 1])) return total_cost"},{"question":"Consider an infinite sequence defined as follows: The first term is 3, the second term is 5, and each subsequent term is the sum of the previous two terms. Hence, the sequence begins as 3, 5, 8, 13, 21, 34, ... You are given an integer M and a list of integers Q of length K. For each query in Q, find the smallest term in the sequence that is greater than or equal to the query integer. -----Constraints----- - 1 leq M leq 10^{14} - 1 leq K leq 10^5 - 1 leq Q_i leq M -----Input----- Input is given from Standard Input in the following format: M K Q_1 Q_2 ... Q_K -----Output----- For each query, print the smallest term in the sequence that is greater than or equal to the query integer. -----Sample Input----- 100 3 50 21 8 -----Sample Output----- 55 21 8 Explanation: The sequence starts as: 3, 5, 8, 13, 21, 34, 55, 89, ... For the queries: - The smallest term greater than or equal to 50 is 55. - The smallest term greater than or equal to 21 is 21. - The smallest term greater than or equal to 8 is 8.","solution":"def generate_sequence_up_to(max_value): sequence = [3, 5] while sequence[-1] < max_value: sequence.append(sequence[-1] + sequence[-2]) return sequence def smallest_term(sequence, query): for term in sequence: if term >= query: return term return None def process_queries(m, k, queries): sequence = generate_sequence_up_to(m) results = [] for query in queries: results.append(smallest_term(sequence, query)) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() M = int(data[0]) K = int(data[1]) Q = list(map(int, data[2:])) results = process_queries(M, K, Q) for result in results: print(result)"},{"question":"In the kingdom of Graphland, there are `n` cities connected by `n - 1` roads such that there is exactly one path between any two cities. The king has decided to build a high-speed train network between selected cities to maximize the efficiency of travel. However, due to budget constraints, the project will only connect specific groups of cities. These groups are determined based on their importance, given by their city number, such that the king wants to directly connect every city to the city with the closest higher number. You are tasked to calculate the minimum total length of the roads necessary to connect each city to the city with the closest higher number. All roads are considered to have the same length, which is 1. ----- Input ----- The first line of the input contains an integer `n` (2 ≤ n ≤ 200 000) — the number of cities in Graphland. The next `n - 1` lines contain the description of roads. Each line contains two integers `x_{j}` and `y_{j}` (1 ≤ x_{j}, y_{j} ≤ n), which means that the `j`-th road connects cities `x_{j}` and `y_{j}`. All of them are two-way roads. You can move from any city to any other using only these roads. ----- Output ----- Print the minimum total length of the roads required to connect every city to the city with the closest higher number. ----- Examples ----- Input 5 1 2 2 3 3 4 4 5 Output 4 Input 7 2 3 1 2 5 6 6 7 4 5 3 4 Output 6 ----- Note ----- In the first test case, the cities are connected consecutively in a straight line: - Connect city 1 to city 2 (cost = 1) - Connect city 2 to city 3 (cost = 1) - Connect city 3 to city 4 (cost = 1) - Connect city 4 to city 5 (cost = 1) Thus, the total cost is 1 + 1 + 1 + 1 = 4. In the second test case, each city gets connected to the next higher city: - Connect city 1 to city 2 (cost = 1) - Connect city 2 to city 3 (cost = 1) - Connect city 3 to city 4 (cost = 1) - Connect city 4 to city 5 (cost = 1) - Connect city 5 to city 6 (cost = 1) - Connect city 6 to city 7 (cost = 1) Thus, the total cost is 6.","solution":"def minimum_total_length(n, roads): # As each city must be connected to the next higher city, which means we will connect 1 to 2, 2 to 3, and so on. # Since all roads are of equal length 1, we need n-1 roads to connect n cities in a direct sequence. return n - 1"},{"question":"You are a member of a team that is responsible for managing a large collection of books in a library. Each book is identified by a unique alphanumeric code. The library has recently updated its catalog, and you need to implement a function to sort and categorize books based on these codes. Each book code consists of two parts: 1. An alphabetic prefix that represents the genre of the book. 2. A numeric suffix that indicates the book\'s unique identifier within that genre. For example: - \\"FIC123\\" could represent a fiction book with identifier 123. - \\"HIS002\\" could represent a history book with identifier 002. The task is to write a function that sorts a list of book codes first by their alphabetic prefix and then by their numeric suffix. The function should return the sorted list of book codes. # Input: - A list of strings, where each string represents a unique book code. # Output: - A list of strings, where each string is a book code from the input list, sorted first by the alphabetic prefix and then by the numeric suffix. # Constraints: - The alphabetic prefix will contain only uppercase English letters. - The numeric suffix will contain only digits and can have leading zeros. - There are no guarantees about the length of the prefix or suffix, but both will be non-empty in every input. # Example: ```python def sort_books(book_codes): # Your code here # Example usage: books = [\\"FIC123\\", \\"HIS002\\", \\"FIC005\\", \\"SCI010\\", \\"SCI001\\", \\"HIS010\\"] sorted_books = sort_books(books) print(sorted_books) # Output: [\\"FIC005\\", \\"FIC123\\", \\"HIS002\\", \\"HIS010\\", \\"SCI001\\", \\"SCI010\\"] ``` # Notes: - You can assume that books from different genres will not have the same numeric suffix. - The sorting should be stable, meaning that if two book codes have the same prefix and suffix, their relative order in the input list should be preserved in the output list.","solution":"def sort_books(book_codes): Sorts a list of book codes first by their alphabetic prefix and then by their numeric suffix. return sorted(book_codes, key=lambda x: (x.rstrip(\'0123456789\'), int(x[len(x.rstrip(\'0123456789\')):])))"},{"question":"In a certain card game, each player receives a list of cards represented by positive integers. The value of each card represents the points it adds to the player\'s total score. However, there is also a special rule: if a player has more than one consecutive card with the same value (e.g., [4, 4] or [7, 7, 7]), those consecutive cards only count as one instance of that value for the total score calculation. Write a function `calculate_score(cards)` that takes a list of integers representing the cards and returns the total score based on the special rule. # Input - A list of positive integers where each integer represents a card\'s value. - The list contains at least 1 card and no more than 10,000 cards. # Output - An integer representing the total score of the player. # Example ```python assert calculate_score([5, 5, 9, 1, 1, 1, 6, 7]) == 28 # 5 (one instance of 5\'s) + 9 + 1 (one instance of 1\'s) + 6 + 7 = 28 assert calculate_score([4, 4, 4, 4]) == 4 # Only one instance of 4\'s should be counted assert calculate_score([3, 5, 7, 7, 8, 8, 8, 9, 10]) == 42 # 3 + 5 + 7 (one instance of 7\'s) + 8 (one instance of 8\'s) + 9 + 10 = 42 ``` # Constraints - The list will contain only positive integers. - The list contains at least 1 card and no more than 10,000 cards.","solution":"def calculate_score(cards): Calculate the total score of a list of cards considering consecutive duplicates as a single instance for scoring. Parameters: cards (list of int): The list of card values. Returns: int: The total score considering the sequential card rule. if not cards: return 0 total_score = 0 previous_card = None for card in cards: if card != previous_card: total_score += card previous_card = card return total_score"},{"question":"Laura is interested in designing a data structure that enables efficient addition and lookup of employee records. Each employee record has a unique integer ID and an associated string containing the employee\'s name. You need to implement a solution that performs the following operations efficiently: 1. **Add** an employee record with a unique ID and name. 2. **Lookup** an employee\'s name using their unique ID. Input - The first line contains a single integer T, the number of test cases. - Each test case consists of a series of operations. The first line of a test case contains an integer N, the number of operations to be performed. - Each of the next N lines is either of the form `1 ID Name` (to add an employee record) or `2 ID` (to lookup an employee name). Output - For each lookup operation (type `2 ID`), output the name associated with the given ID on a new line. - If the ID does not exist, output \\"Not found\\". Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^4 - 1 ≤ ID ≤ 10^9 - 1 ≤ length of Name ≤ 100 Note: Assume that the operations are provided in a valid manner, i.e., no duplicate IDs for add operations and lookup operations are only performed for previously added IDs. SAMPLE INPUT 2 3 1 101 John 1 102 Alice 2 101 4 1 201 Bob 1 202 Carol 2 202 2 203 SAMPLE OUTPUT John Carol Not found","solution":"class EmployeeRecords: def __init__(self): self.records = {} def add(self, ID, name): self.records[ID] = name def lookup(self, ID): return self.records.get(ID, \\"Not found\\") def process_test_cases(test_cases): results = [] for ops in test_cases: emp_records = EmployeeRecords() for operation in ops: if operation[0] == 1: _, ID, name = operation emp_records.add(ID, name) elif operation[0] == 2: _, ID = operation results.append(emp_records.lookup(ID)) return results def main(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(input_lines[idx]) operations = [] for i in range(N): parts = input_lines[idx + 1 + i].split() if parts[0] == \'1\': operations.append((1, int(parts[1]), parts[2])) elif parts[0] == \'2\': operations.append((2, int(parts[1]))) test_cases.append(operations) idx += 1 + N results = process_test_cases(test_cases) return \\"n\\".join(results)"},{"question":"Your task is to write a function named `shift_and_sum` that receives two arguments: a list of integers and a non-negative integer `k`. For each integer in the list, you need to perform a left bitwise shift operation by `k` positions. After shifting, sum all the modified integers and return the result. Here are the steps to follow: 1. Iterate through each integer in the list. 2. Apply the bitwise left shift operation on each integer by `k` positions. 3. Sum up all the shifted integers. 4. Return the total sum of the shifted integers. For example: ```python shift_and_sum([1, 2, 3, 4], 2) = (1 << 2) + (2 << 2) + (3 << 2) + (4 << 2) = 4 + 8 + 12 + 16 = 40 shift_and_sum([10, 20, 30], 1) = (10 << 1) + (20 << 1) + (30 << 1) = 20 + 40 + 60 = 120 shift_and_sum([5, 15, 25], 3) = (5 << 3) + (15 << 3) + (25 << 3) = 40 + 120 + 200 = 360 ``` **Constraints:** * The list will contain at most 100 integers. * Each integer will be in the range of 0 to 1000. * `k` will be a non-negative integer up to 10. Implement the function as described and ensure it handles the edge cases effectively.","solution":"def shift_and_sum(int_list, k): Performs a left bitwise shift operation on each integer in the list by k positions, sums up all the modified integers, and returns the result. Args: int_list: list of integers k: non-negative integer indicating the number of positions to shift Returns: int: The sum of all shifted integers return sum(x << k for x in int_list)"},{"question":"You are given a string `s` consisting of lowercase alphabets. You need to convert the string into a palindrome by performing no more than one modification. In one modification, you can change any single character to any other character. If it is possible to create a palindrome with at most one modification, print \\"YES\\". Otherwise, print \\"NO\\". Input The input consists of a single line containing a string `s` (1 ≤ |s| ≤ 100) — the string that needs to be checked. Output Output a single line containing \\"YES\\" if the string can be converted to a palindrome with no more than one modification, otherwise print \\"NO\\". Examples Input abca Output YES Input abcd Output NO Input a Output YES","solution":"def can_be_palindrome_with_one_change(s): Check if the string can be converted to a palindrome with at most one modification. n = len(s) left, right = 0, n - 1 mismatch_count = 0 while left < right: if s[left] != s[right]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"You are given an integer array `A` of size `N`. You need to create an array `B` of the same size by following these rules: 1. For each element in `A`, indicate whether it is an even or odd number. 2. The array `B` should have `0` in the positions corresponding to even numbers in `A` and `1` in the positions corresponding to odd numbers in `A`. Print the array `B`. # Input - The first line of the input contains a single integer `T` denoting the number of test cases. - The description of `T` test cases follows. - The first line of each test case contains a single integer `N`, the size of the array `A`. - The second line contains `N` space-separated integers representing the array `A`. # Output For each test case, print a single line containing `N` space-separated integers representing the array `B`. # Constraints - 1 ≤ T ≤ 10^{3} - 1 ≤ N ≤ 10^{5} - 0 ≤ A_{i} ≤ 10^{9} for each valid i - the sum of N over all test cases does not exceed 10^{6} # Example Sample Input 1 ``` 2 5 1 2 3 4 5 3 6 7 8 ``` Sample Output 1 ``` 1 0 1 0 1 0 1 0 ``` Explanation - In the first test case, the array `A` is `[1, 2, 3, 4, 5]`. The corresponding array `B` is `[1, 0, 1, 0, 1]` because `1, 3 and 5` are odd, and `2 and 4` are even. - In the second test case, the array `A` is `[6, 7, 8]`. The corresponding array `B` is `[0, 1, 0]` because `6 and 8` are even, and `7` is odd.","solution":"def get_even_odd_array(T, test_cases): This function takes in the number of test cases and a list of test cases. Each test case is a tuple containing N and the array A. It returns a list of arrays B where 0 represents even numbers and 1 represents odd numbers. results = [] for i in range(T): N, A = test_cases[i] B = [1 if x % 2 != 0 else 0 for x in A] results.append(B) return results"},{"question":"You are given a string s consisting of lowercase English letters and an integer n. Your task is to determine if it is possible to modify the string s by removing exactly n characters such that the resultant string is a palindrome. A palindrome is a string that reads the same backward as forward. -----Input----- The input consists of two lines: - The first line contains the string s (1 ≤ length(s) ≤ 2000), which consists of lowercase English letters. - The second line contains the integer n (0 ≤ n < length(s)). -----Output----- Output \\"YES\\" if it is possible to modify the string s by removing exactly n characters to make it a palindrome. Otherwise, output \\"NO\\". -----Examples----- Input abca 1 Output YES Input racecar 2 Output YES Input abcdef 2 Output NO","solution":"def is_possible_to_make_palindrome(s, n): Determines if it\'s possible to remove exactly n characters from the string s to make it a palindrome. Parameters: s (str): The input string. n (int): Number of characters to remove. Returns: str: \\"YES\\" if it\'s possible to make the string a palindrome by removing exactly n characters, otherwise \\"NO\\". from functools import lru_cache @lru_cache(None) def min_deletions(l, r): if l >= r: return 0 if s[l] == s[r]: return min_deletions(l + 1, r - 1) return 1 + min(min_deletions(l + 1, r), min_deletions(l, r - 1)) min_del = min_deletions(0, len(s) - 1) return \\"YES\\" if min_del <= n else \\"NO\\""},{"question":"Write a function that takes an array of integers and returns a new array with each element replaced by the sum of itself and all previous elements in the original array. For example, given the array [1, 2, 3, 4], the function should return [1, 3, 6, 10] because: - The first element is 1. - The second element is 1 + 2 = 3. - The third element is 1 + 2 + 3 = 6. - The fourth element is 1 + 2 + 3 + 4 = 10.","solution":"def cumulative_sum(arr): Given an array of integers, return a new array with each element replaced by the sum of itself and all previous elements in the original array. result = [] current_sum = 0 for num in arr: current_sum += num result.append(current_sum) return result"},{"question":"The town of Happyville is famous for its vibrant community and splendid parks. Every weekend, the town\'s children gather in the main park to play games. Each child either plays a cooperative game or a competitive game with other children. Children who play cooperative games form groups wherein each child helps others in their group. Children playing competitive games participate individually and compete against others. The mayor of Happyville wants to ensure that every child has a rewarding experience, so he decides to calculate the total satisfaction points gained by all children over a given weekend. The satisfaction points are based on two factors: 1. For cooperative games, each child in a group with `k` children earns `2k` satisfaction points for contributing and cooperating. 2. For competitive games, each child earns a fixed number of points, `p`. You are given the number of children who play cooperative and competitive games, the sizes of cooperative groups, and the points earned in competitive games. Write a program to calculate the total satisfaction points for all children during the weekend. ------ Input ------ The first line of the input contains a single integer `T` – the number of test cases. `T` test cases follow. For each test case, the first line contains two integers `C` and `N` – the number of children in cooperative groups and the number of children participating in competitive games respectively. The second line contains `C` integers representing the sizes of the cooperative groups. The third line contains a single integer `P` – the points earned by each child in competitive games. ------ Output ------ For each test case, output a single integer – the total satisfaction points gained by all children during the weekend. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ C, N ≤ 100 1 ≤ size of each cooperative group ≤ 100 1 ≤ P ≤ 1000 ------ Sample Input ------ 2 3 4 2 3 1 10 2 1 4 5 20 ------ Sample Output ------ 26 28 Explanation: In the first test case, there are 3 cooperative groups with sizes 2, 3 and 1. The total points for cooperative kids is: (2 * 2) + (2 * 3) + (2 * 1) = 4 + 6 + 2 = 12 points. There are 4 competitive kids earning 10 points each: 4 * 10 = 40 points. Total points: 12 + 40 = 52 points. In the second test case, there are 2 cooperative groups with sizes 4 and 5. The total points for cooperative kids is: (2 * 4) + (2 * 5) = 8 + 10 = 18 points. There is 1 competitive kid earning 20 points: 1 * 20 = 20 points. Total points: 18 + 20 = 38 points.","solution":"def calculate_total_satisfaction(test_cases): results = [] for case in test_cases: C, N, group_sizes, P = case cooperative_points = sum(2 * size for size in group_sizes) competitive_points = N * P total_points = cooperative_points + competitive_points results.append(total_points) return results"},{"question":"There is an ancient kingdom called Arraylandia, ruled by King Arraysus the IV. King Arraysus is very particular about the order of things and believes that the beauty of arrays lies in their sorted order. King Arraysus has recently retired and handed over his throne to his daughter, Queen Arrayne. Queen Arrayne wants to ensure that the kingdom continues to thrive under her rule by keeping all arrays in the kingdom sorted. However, she faces a challenge as the citizens of Arraylandia often present her with unsorted arrays. She needs your help to count how many elements need to be removed from an unsorted array to make the remaining array sorted in strictly increasing order. Given an array, help Queen Arrayne by determining the minimum number of elements to remove to achieve the desired order. Input The first line contains a single integer n (1 ≤ n ≤ 105) — the size of the array. The second line contains n integers a1, a2, ..., an (-109 ≤ ai ≤ 109) — the array elements. Output Print a single integer — the minimum number of elements that need to be removed to make the remaining array sorted in strictly increasing order. Examples Input 5 3 4 2 1 5 Output 2 Input 6 10 20 10 30 40 20 Output 2 Note In the first example, removing elements 2 and 1 will leave the array [3, 4, 5], which is sorted in strictly increasing order. In the second example, removing elements 10 and 20 at the end will leave the array [10, 20, 30, 40], which is sorted in strictly increasing order.","solution":"def min_removals_to_sort(arr): Given an array, determine the minimum number of elements to remove to make the remaining array sorted in strictly increasing order. Parameters: arr (list of int): The list of integers representing the array. Returns: int: The minimum number of elements to remove. from bisect import bisect_left def length_of_lis(seq): lis = [] for x in seq: idx = bisect_left(lis, x) if idx == len(lis): lis.append(x) else: lis[idx] = x return len(lis) n = len(arr) lis_length = length_of_lis(arr) return n - lis_length"},{"question":"You are an urban planner tasked with creating the optimal route plan for bus lines in a city. The city is represented as a graph with n intersections and m bidirectional roads between those intersections. Each road has a certain bus route associated with it and a travel time. The goal is to determine the shortest travel time from a given starting intersection to all other intersections, while only traveling on roads that belong to a particular bus route. Write a program that helps determine the shortest travel times for each valid route from the starting intersection. Input The first input line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000) — the number of intersections and roads, respectively. The second line contains an integer s (1 ≤ s ≤ n) — the starting intersection. Each of the following m lines contains three integers u, v (1 ≤ u, v ≤ n; u ≠ v) and t (1 ≤ t ≤ 1000) and a string r — the travel time and the bus route associated with the road between intersections u and v. Output For each distinct bus route r, output one line containing the shortest travel time from the starting intersection to each of the other intersections separated by a space. If a destination is not reachable using the bus route r, denote this with -1. Example Input 5 6 1 1 2 2 A 2 3 3 A 3 4 1 A 1 3 8 B 3 5 2 B 4 5 3 C Output A: 0 2 5 6 -1 B: 0 -1 8 -1 10 C: 0 -1 -1 -1 -1 Explanation - For bus route A, the shortest travel times from intersection 1 are: - 1 -> 1: 0 (starting point) - 1 -> 2: 2 (direct route on A) - 1 -> 3: 5 (via 1 -> 2 -> 3 on A) - 1 -> 4: 6 (via 1 -> 2 -> 3 -> 4 on A) - 1 -> 5: Not reachable on A - For bus route B, the shortest travel times from intersection 1: - 1 -> 1: 0 (starting point) - 1 -> 2: Not reachable on B - 1 -> 3: 8 (direct route on B) - 1 -> 4: Not reachable on B - 1 -> 5: 10 (via 1 -> 3 -> 5 on B) - For bus route C, none of the intersections except for the starting point are reachable directly on route C.","solution":"from collections import defaultdict import heapq def dijkstra(n, edges, start, route): graph = defaultdict(list) for u, v, t in edges: graph[u].append((v, t)) graph[v].append((u, t)) dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 min_heap = [(0, start)] while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > dist[u]: continue for v, t in graph[u]: distance = current_dist + t if distance < dist[v]: dist[v] = distance heapq.heappush(min_heap, (distance, v)) return [dist[i] if dist[i] != float(\'inf\') else -1 for i in range(1, n+1)] def shortest_travel_times(n, m, s, routes): edges_by_route = defaultdict(list) for u, v, t, r in routes: edges_by_route[r].append((u, v, t)) results = {} for r, edges in edges_by_route.items(): results[r] = dijkstra(n, edges, s, r) return results"},{"question":"Takashi is working on a crafting project in his workshop. He needs to cut several wooden rods to a specific length for his project. You are given N wooden rods and their lengths. Additionally, Takashi needs M rods, each of exactly L meters in length. Determine whether Takashi can obtain the required M rods of length L by cutting the given rods. -----Constraints----- - 1 leq N leq 1000 - 1 leq L leq 10000 - 1 leq M leq 1000 - The length of each wooden rod is a positive integer and does not exceed 10000. - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N L M followed by a line with N integers representing the lengths of the wooden rods. -----Output----- If Takashi can get the required M rods of length L, print Yes; otherwise, print No. -----Sample Input----- 4 5 3 11 9 5 7 -----Sample Output----- Yes Takashi can cut: - one rod of length 11 into two rods of 5 meters each. - one rod of length 9 into one rod of 5 meters. - one rod of length 7 into one rod of 5 meters. In total, he can get the required 3 rods of length 5 meters.","solution":"def can_obtain_rods(N, L, M, lengths): Determines if Takashi can obtain M rods of length L. Params: N (int): Number of wooden rods. L (int): Length of each required rod. M (int): Number of required rods. lengths (list of int): Lengths of the given rods. Returns: str: \\"Yes\\" if he can obtain the required rods, otherwise \\"No\\". total_rods = 0 for length in lengths: total_rods += length // L if total_rods >= M: return \\"Yes\\" return \\"No\\""},{"question":"Nadia loves gardening and wants to plant flowers along her garden fence. She has n sections of the fence and m types of flowers. Nadia wants to make sure that no two adjacent sections have the same type of flowers. Help Nadia by determining whether it\'s possible to arrange the flowers in such a way that no two adjacent sections have the same type of flowers. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5), representing the number of sections in the fence and the number of flower types respectively. Output If it\'s possible to plant the flowers such that no two adjacent sections have the same type, print \\"Yes\\". Otherwise, print \\"No\\". Examples Input 5 3 Output Yes Input 6 2 Output Yes Input 4 1 Output No Note In the first case, Nadia can arrange the flowers in the sequence 1, 2, 3, 1, 2 to satisfy the condition. In the second case, she can use the sequence 1, 2, 1, 2, 1, 2 to meet the requirements. In the third case, since there is only one type of flower and multiple sections, it is impossible to avoid having two adjacent sections with the same type of flower.","solution":"def can_plant_flowers(n, m): Function to determine if it\'s possible to arrange flowers such that no two adjacent sections have the same type. Parameters: n (int): Number of sections in the fence. m (int): Number of flower types. Returns: str: \\"Yes\\" if possible, \\"No\\" if not possible. # If there is only one type of flower and more than one section, it\'s not possible if m == 1 and n > 1: return \\"No\\" return \\"Yes\\""},{"question":"You are given a string that contains a mixture of characters and numbers. Your task is to sort characters and numbers in the string. However, all characters should appear before any numbers. -----Input----- The input starts with a line containing just one integer T : (1 le T le 10), denoting the number of test cases. Each test case is a line containing the string. The length of the string is at most 10^{6}, and it will only contain lowercase letters from the English alphabet [‘a’; ldots ; ‘z’], digits [‘0’; ldots ; ‘9’]. -----Output----- For each test case, output one line containing the sorted string with all characters at the beginning followed by all numbers. -----Subtasks----- - textbf{(30 points)}: 1 le T le 10, string length is at most 10^{3}. - textbf{(70 points)}: 1 le T le 4, string length is at most 10^{6}. -----Examples----- Sample Input: 2 a1b2c3 hello12345world Sample Output: abc123 helloworld12345","solution":"def sort_characters_and_numbers(t, test_cases): For each test in test_cases, sort characters to the front and numbers to the back. :param t: Number of test cases :param test_cases: List of strings, each being a test case :return: List of sorted strings result = [] for test in test_cases: characters = [] numbers = [] for char in test: if char.isdigit(): numbers.append(char) else: characters.append(char) sorted_string = \'\'.join(characters) + \'\'.join(numbers) result.append(sorted_string) return result"},{"question":"You are given a square `n x n` chessboard. Each cell of the chessboard can either be empty (`.`) or contain a piece (`*`). There is exactly one piece on the board. Your task is to find the Manhattan distance between the piece and the nearest edge of the chessboard. The Manhattan distance between two points (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|, where \\"|\\" denotes absolute value. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the dimension of the chessboard. - The next `n` lines contain `n` characters each (`.` or `*`), representing the chessboard. # Output - Print a single integer — the Manhattan distance between the piece and the nearest edge of the chessboard. # Examples Input ``` 5 ..... ..... ..*.. ..... ..... ``` Output ``` 2 ``` Input ``` 3 *.. ... ... ``` Output ``` 0 ``` # Note In the first example, the piece is in the center of the 5x5 chessboard. The distance to the nearest edge (top, bottom, left, or right) is 2. In the second example, the piece is already on the edge of the 3x3 chessboard, so the distance is 0.","solution":"def nearest_edge_distance(n, chessboard): piece_position = None # Find the position of the piece on the chessboard for i in range(n): for j in range(n): if chessboard[i][j] == \'*\': piece_position = (i, j) break if piece_position: break x, y = piece_position # Calculate distances to the edges distance_to_top = x distance_to_bottom = n - 1 - x distance_to_left = y distance_to_right = n - 1 - y # Find the minimum distance min_distance = min(distance_to_top, distance_to_bottom, distance_to_left, distance_to_right) return min_distance"},{"question":"David is working on a problem involving different types of sequences. He encountered a special type of sequence he calls a \\"magical sequence.\\" A magical sequence of length N contains only positive integers and satisfies the following properties: 1. Any prefix sum of the sequence should be divisible by its length. More formally, for any prefix of the sequence with length i where 1 leq i leq N, the sum of the first i elements should be divisible by i. 2. All elements of the sequence are distinct. David wants to create such sequences and calculate them for different values of N. Please help him to find out how many distinct magical sequences of length N can be formed. Given an integer N, determine the number of distinct magical sequences of length N. Since the result could be large, return the count mod 10^9 + 7. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains a single integer N. Output Format For each test case, print a single line containing the count of distinct magical sequences of length N modulo 10^9 + 7. Constraints 1 leq T leq 100 1 leq N leq 10^5 Sample Input 2 2 3 Sample Output 2 5 Explanation For N = 2, the distinct magical sequences are: - (1, 2) - (2, 4) For N = 3, the distinct magical sequences are: - (1, 2, 3) - (1, 4, 9) - (1, 5, 8) - (2, 6, 12) - (2, 8, 14)","solution":"MOD = 10**9 + 7 def count_magical_sequences(N): Calculate the number of distinct magical sequences of length N. Args: N : int : Length of the magical sequence. Returns: int : Number of distinct magical sequences of length N modulo 10^9 + 7. dp = [0] * (N + 1) # Dynamic programming table dp[1] = 1 for n in range(2, N + 1): dp[n] = (dp[n - 1] * n) % MOD return dp[N] def process_test_cases(T, cases): Process multiple test cases and compute the number of distinct magical sequences for each case. Args: T : int : Number of test cases. cases : list : List of test case values. Returns: list : Results for each test case. results = [] for i in range(T): results.append(count_magical_sequences(cases[i])) return results"},{"question":"Heidi has just decoded the last level of encryption to gain access to the hidden archives of the Empire. Now, she encounters another problem that she needs your help with to extract the final piece of data. Heidi is given a sequence of N integers, and she needs to perform operations on this sequence to maximize a particular value. The operation consists of removing exactly k elements from the sequence in such a way that the product of the remaining elements is maximized. You are to write a program to find this maximum product after removing exactly k elements from the given sequence. Input The first line of the input contains two space-separated integers N and k (1 ≤ k < N ≤ 100) – the number of elements in the sequence, and the number of elements to be removed, respectively. The second line contains N space-separated integers that are the elements of the sequence. Each integer is from the interval [-100, 100]. Output Output the maximum product of the remaining sequence after removing exactly k elements. Examples Input 5 2 3 -2 5 -1 4 Output 60 Input 6 3 1 -2 3 -4 5 -6 Output 120 Note In the first example, by removing the elements -2 and -1, the remaining elements are [3, 5, 4], and their product is 60, which is the maximum possible. In the second example, by removing elements 1, -4, and -6, the remaining elements are [-2, 3, 5], and their product is 120, which is the maximum possible.","solution":"from itertools import combinations from functools import reduce from operator import mul def max_product_after_removals(N, k, sequence): Returns the maximum product of the remaining sequence after removing exactly k elements. max_product = float(\'-inf\') # Generate all possible combinations for removing k elements all_combinations = combinations(sequence, N - k) for combination in all_combinations: # Calculate the product for the current combination current_product = reduce(mul, combination, 1) if current_product > max_product: max_product = current_product return max_product"},{"question":"A robotics company has developed a new self-organizing robot that must navigate a unique type of grid. This grid is represented as an n × n set of cells, each of which can either be an empty cell, represented by \'.\', or an obstacle, represented by \'#\'. The robot starts at the top-left corner of the grid and needs to reach the bottom-right corner. The robot can move horizontally or vertically to any adjacent cell but cannot move diagonally or through obstacles. The robot has an additional feature: it can push obstacles, but only if the adjacent cell in the direction it is pushing is empty. However, the robot has a limited number of pushes it can make, given by the parameter p (0 ≤ p ≤ 100). Write a program to determine whether the robot can reach the bottom-right corner from the top-left corner given the grid layout and the number of allowed pushes. Input The first line contains two integers, n (1 ≤ n ≤ 50) and p (0 ≤ p ≤ 100). The next n lines contain n characters each, representing the grid layout. Output Print \\"YES\\" if the robot can reach the bottom-right corner using no more than p pushes, otherwise print \\"NO\\". Examples Input 5 1 .#. .#.#. .#.#. .#.#. ...#. Output YES Input 5 0 .#. .#.#. .#.#. .#.#. ...#. Output NO","solution":"from collections import deque def can_reach_end(n, p, grid): Determines if the robot can reach the bottom-right corner given the grid layout and the number of allowed pushes. Args: n: The dimension of the grid (n x n). p: The number of allowed pushes. grid: The grid layout. Returns: \\"YES\\" if the robot can reach the bottom-right corner with no more than p pushes, otherwise \\"NO\\". directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up def is_valid(x, y): return 0 <= x < n and 0 <= y < n visited = set() queue = deque([(0, 0, p)]) # (x, y, remaining pushes) while queue: x, y, remaining_pushes = queue.popleft() if (x, y) == (n-1, n-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if grid[nx][ny] == \'.\': if (nx, ny, remaining_pushes) not in visited: visited.add((nx, ny, remaining_pushes)) queue.append((nx, ny, remaining_pushes)) elif grid[nx][ny] == \'#\' and remaining_pushes > 0: nnx, nny = nx + dx, ny + dy if is_valid(nnx, nny) and grid[nnx][nny] == \'.\' and (nx, ny, remaining_pushes - 1) not in visited: visited.add((nx, ny, remaining_pushes - 1)) queue.append((nx, ny, remaining_pushes - 1)) return \\"NO\\" # Example usage: # input_grid = [ # \\".#.\\", # \\".#.#.\\", # \\".#.#.\\", # \\".#.#.\\", # \\"...#.\\" # ] # print(can_reach_end(5, 1, input_grid))"},{"question":"John is practicing for a coding competition and is working on understanding the concept of prime numbers. He reads about twin primes, which are pairs of prime numbers that have a difference of two. John wants to write a program to check if two given numbers are twin primes. -----Input:----- - The first line contains two integers A and B. -----Output:----- - Output \\"YES\\" if A and B are twin primes, otherwise output \\"NO\\". -----Constraints----- - 1 leq A, B leq 1000 -----Sample Input:----- 3 5 -----Sample Output:----- YES","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def are_twin_primes(A, B): Checks if A and B are twin primes. if abs(A - B) == 2 and is_prime(A) and is_prime(B): return \\"YES\\" else: return \\"NO\\""},{"question":"In a parallel world, a set of intelligent robots code in a language called RoboLang which uses a different approach for number systems. Instead of conventional decimal or binary systems, RoboLang uses a unique number system defined by a sequence of digits: D0, D1, ..., D(N-1) where each digit can range from 0 to (N-1). For example, for a number system of base 5, digits can be 0, 1, 2, 3, or 4. Your task is to help the robots convert numbers between their unique number system and the standard decimal system. Specifically, you need to write a function that can convert a given number from the decimal system to the RoboLang number system. -----Input section----- First line contains an integer T, denoting the number of test cases. Each of the next T lines contain two integers N and X: - N is the base of the RoboLang number system. - X is the number in the decimal system that needs to be converted to the RoboLang number system. -----Output section----- For each test case, print the number in the RoboLang number system as a string of digits. -----Input constraints----- 1 ≤ T ≤ 20 2 ≤ N ≤ 10 0 ≤ X ≤ 10^9 -----Sample Input----- 3 5 23 3 42 4 15 -----Sample Output----- 43 1120 33 -----Explanation----- For test case 1: - 23 in base 5 is represented as 43. For test case 2: - 42 in base 3 is represented as 1120. For test case 3: - 15 in base 4 is represented as 33.","solution":"def decimal_to_robolang(N, X): Convert a number X from decimal system to RoboLang number system with base N. Args: N (int): The base of the RoboLang number system. X (int): The number in the decimal system. Returns: str: The number in the RoboLang number system. if X == 0: return \\"0\\" result = [] while X > 0: result.append(str(X % N)) X = X // N return \'\'.join(result[::-1]) def convert_numbers(T, cases): Convert a list of numbers from decimal to RoboLang number system. Args: T (int): Number of test cases. cases (list): List of tuples where each tuple contains two integers: N and X. Returns: list: List of converted numbers in RoboLang number system. results = [] for case in cases: N, X = case results.append(decimal_to_robolang(N, X)) return results"},{"question":"Jatin is a software developer who loves dealing with arrays. One day, his friend Ria came up with a challenge for Jatin: Find the next greater element for every element in an array. The next greater element of an element X in the array is the first greater element to the right of X in the same array. Jatin found it interesting and decided to solve it using his coding skills. Now, Jatin needs your help to write a program for this problem. If there is no next greater element for a specific element, output -1 for that position. INPUT: First line consists of the number of test cases t. For each test case: - The first line contains an integer n, the size of the array. - The next line contains n space-separated integers representing the array elements. OUTPUT: For each test case, display the next greater element for each element in the array. 0 < t ≤ 50 0 < n ≤ 100 The array elements are between -1000 and 1000. SAMPLE INPUT 2 4 13 7 6 12 5 4 5 2 25 7 SAMPLE OUTPUT [ -1 12 12 -1 ] [ 5 25 25 -1 -1 ]","solution":"def next_greater_element(arr): Returns a list of the next greater elements for each element in arr. If there is no greater element to the right, returns -1 for that position. result = [-1] * len(arr) stack = [] for i in range(len(arr)): while stack and arr[stack[-1]] < arr[i]: result[stack.pop()] = arr[i] stack.append(i) return result def process_test_cases(test_cases): Processes multiple test cases. results = [] for arr in test_cases: results.append(next_greater_element(arr)) return results"},{"question":"You are given a grid with R rows and C columns consisting of units as indicated by each cell, which can be either: - \\"0\\": Empty unit in the grid. - \\"1\\": A tree. A group of people are in cell (0, 0), the top-left corner of the grid, and they need to reach cell (R-1, C-1), the bottom-right corner of the grid. They can only move: - \\"Right\\" to the adjacent cell in the same row. - \\"Down\\" to the adjacent cell in the same column. Unfortunately, the group cannot pass through trees (\\"1\\"). Determine the minimum number of steps required for the group to reach the bottom-right corner of the grid from the top-left corner. If it is not possible to reach the destination, return -1. -----Constraints----- - 2 leq R, C leq 1000 - The grid is represented as a list of R strings each of length C. - Each cell of the grid contains either \'0\' or \'1\'. - The top-left and bottom-right cells are always \'0\'. -----Input Format----- The input consists of the following: - An integer R followed by an integer C. - R lines each containing a string of length C representing the grid. -----Output------ Print the minimum number of steps required to reach the destination, or -1 if it is not possible. -----Sample Input----- 5 5 00000 01110 00010 01110 00000 -----Sample Output----- 8 -----Explanation----- One possible path is: Starting at (0, 0), and move: Right to (0, 1), Right to (0, 2), Right to (0, 3), Down to (1, 3), Down to (2, 3), Down to (3, 3), Right to (3, 4), Down to (4, 4). Hence, the group will have moved through 8 steps to reach the bottom-right corner.","solution":"from collections import deque def minimum_steps_to_reach_end(R, C, grid): Compute the minimum number of steps to move from the top-left to the bottom-right corner in the grid. :param R: Number of rows in the grid :param C: Number of columns in the grid :param grid: List of strings representing the grid :return: Minimum number of steps or -1 if not possible if grid[0][0] == \'1\' or grid[R-1][C-1] == \'1\': return -1 directions = [(0, 1), (1, 0)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == R-1 and col == C-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < R and 0 <= new_col < C and grid[new_row][new_col] == \'0\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) return -1"},{"question":"You have been tasked with creating a unique inventory management system. The system should help keep track of inventory levels of various products in a warehouse. One important feature of this system is to re-order products when their inventory count falls below a certain threshold. You need to write a function that receives a list of products, their current inventory levels, and their respective re-order thresholds. For products that need re-ordering, the function should output the product names sorted alphabetically. # Input Format - The first line contains an integer, n, the number of products. - Each of the next n lines contains the product information in the following format: langleproduct_namerangle langlecurrent_inventoryrangle langlereorder_thresholdrangle. # Constraints - 1 leq n leq 100 - 1 leq text{length of product_name} leq 20 - 0 leq text{current_inventory} leq 1000 - 0 leq text{reorder_threshold} leq 1000 # Output Format A list of product names that need re-ordering, printed in alphabetical order. Print each product name on a new line. If no product needs re-ordering, print \\"All products are sufficiently stocked.\\" # Sample Input ``` 4 sugar 10 15 rice 50 30 flour 5 10 salt 20 5 ``` # Sample Output ``` flour sugar ```","solution":"def check_reordering(products): Checks which products need reordering based on their current inventory levels and reorder thresholds. Args: products (list of tuple): List of tuples where each tuple contains the product name, current inventory level, and reorder threshold. Returns: list: List of product names that need reordering, sorted alphabetically. reorder_list = [] for product in products: name, current_inventory, reorder_threshold = product if current_inventory < reorder_threshold: reorder_list.append(name) if not reorder_list: return [\\"All products are sufficiently stocked.\\"] return sorted(reorder_list)"},{"question":"# Task Given an array of integers, for each position i, search among the subsequent positions for the first (from the left) position that contains a greater value. Store this value at position i in the answer. If no such value can be found, store `-1` instead. # Example For `items = [3, 5, 2, 4, 5]`, the output should be `[5, -1, 4, 5, -1]`. # Input/Output - `[input]` integer array `arr` Non-empty array of positive integers. Constraints: `3 ≤ arr.length ≤ 1000, 1 ≤ arr[i] ≤ 1000.` - `[output]` an integer array Array containing answer values computed as described above.","solution":"def find_next_greater_elements(arr): For each element in the array, find the first greater value to its right. If no such value is found, store -1. result = [-1] * len(arr) for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[j] > arr[i]: result[i] = arr[j] break return result"},{"question":"A computer system performs a series of tasks to ensure that the processes are running smoothly. Each task has a start time and an end time, and can run concurrently with other tasks as long as their times do not overlap. Given a list of tasks, your objective is to find the maximum number of non-overlapping tasks that can be performed. -----Input----- The first line contains an integer t (1 leq t leq 10^5) — the number of test cases. The following lines contain the description of each test case. The first line of each test case contains an integer n (1 leq n leq 10^5), indicating the number of tasks. The next n lines each contain two integers s_i and e_i (1 leq s_i < e_i leq 10^9), where s_i is the start time and e_i is the end time of the i-th task. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output the maximum number of non-overlapping tasks that can be performed. -----Examples----- Input 3 3 1 2 2 3 3 4 4 4 5 2 3 1 2 5 6 2 2 4 3 5 Output 3 4 1 -----Note----- In the first test case, we can perform all tasks [(1, 2), (2, 3), (3, 4)] as there are no overlapping times. Therefore, the maximum number of non-overlapping tasks is 3. In the second test case, we can perform all tasks [(1, 2), (2, 3), (4, 5), (5, 6)] as there are no overlapping times. Thus, the maximum number of non-overlapping tasks is 4. In the third test case, no tasks can fully run without interruption, so the output is 1 as any single task can be picked.","solution":"def max_non_overlapping_tasks(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] tasks = sorted(test_cases[i][1:], key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results # For testing in this notebook, we\'ll define a helper function to parse the input def parse_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] line_number = 1 for _ in range(t): n = int(input_lines[line_number]) tasks = [] for task_number in range(n): start, end = map(int, input_lines[line_number + 1 + task_number].split()) tasks.append((start, end)) test_cases.append((n, *tasks)) line_number += n + 1 return t, test_cases"},{"question":"Write a function that takes an array of integers and returns an array containing only the unique elements, in the same order they first appeared in the input array. You may not use any built-in methods that directly solve the task (such as `Array.prototype.filter`), but you may use other helper methods like `indexOf` or `includes`.","solution":"def unique_elements(arr): Returns a list containing only the unique elements from the input array in the order they first appeared. :param arr: A list of integers :return: A list of integers with only unique elements seen = set() unique_list = [] for item in arr: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"You are organizing a marathon where participants need to collect tokens at various checkpoints throughout the course. Each participant starts with zero tokens and can collect a variable number of tokens at each checkpoint. However, there\'s a rule: if a participant fails to collect any tokens at a checkpoint, they are automatically disqualified. Given an array tokens[] of size N where tokens[i] represents the number of tokens collected by the participant at the ith checkpoint, determine if the participant completed the marathon without being disqualified. Return true if the participant successfully completes the marathon, or false otherwise. Example 1: Input: N = 6 tokens[] = {3, 2, 5, 0, 1, 4} Output: False Explanation: The participant is disqualified at the 4th checkpoint because they collected 0 tokens. Example 2: Input: N = 4 tokens[] = {2, 1, 3, 4} Output: True Explanation: The participant collected tokens at all checkpoints without getting disqualified. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canCompleteMarathon() which takes the integer N and integer array tokens[] as parameters and returns true if the participant completes the marathon, otherwise false. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 0 ≤ tokens[i] ≤ 10^6","solution":"def canCompleteMarathon(N, tokens): Determines if the participant completed the marathon without being disqualified. Parameters: N (int): Number of checkpoints. tokens (list of int): Number of tokens collected at each checkpoint. Returns: bool: True if participant completes the marathon, False otherwise. for token in tokens: if token == 0: return False return True"},{"question":"You are given a list of integers. Your task is to rearrange them to form the largest integer possible. Each integer in the list can be single or multiple digits. You should concatenate the integers to produce the final result. If there are multiple valid results, return any of them. -----Input----- The first line contains a single integer t (1 le t le 10) — the number of testcases. Each testcase begins with an integer n (1 le n le 100), which represents the number of elements in the list. The next n lines contain one integer each. Each integer is between 0 and 10^9. -----Output----- For each testcase, print the largest integer you can form by concatenating the given list of integers. -----Examples----- Input 2 3 10 2 9 4 3 30 34 5 Output 9102 534330 -----Note----- In the first example, the largest number is formed by placing \'9\' first, followed by \'10\', and then \'2\'. In the second example, the largest number is formed by placing \'5\', followed by \'34\', \'3\', and \'30\'.","solution":"from functools import cmp_to_key def largest_number(nums): Returns the largest number that can be formed from a list of integers. def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 nums_str = list(map(str, nums)) nums_str.sort(key=cmp_to_key(compare)) result = \'\'.join(nums_str) # Edge case for numbers like [0, 0] return \'0\' if result[0] == \'0\' else result def solve_test_cases(test_cases): Solves the list of test cases and returns the results. results = [] for nums in test_cases: results.append(largest_number(nums)) return results"},{"question":"You are given a string s consisting of digits and letters. Each digit can be between 0 and 9, and each letter can be either a lowercase or an uppercase English letter. Your task is to check if it\'s possible to rearrange the characters in the string such that no two adjacent characters are the same type (i.e., a digit cannot be adjacent to another digit, and a letter cannot be adjacent to another letter). If such a rearrangement is possible, output the rearranged string. If multiple rearrangements are possible, you can output any one of them. If it is not possible to rearrange the string to meet the requirements, output \\"NO\\". # Input Format - The first line contains an integer boldsymbol{t}, the number of test cases. - Each of the next boldsymbol{t} lines contains a string boldsymbol{s}. # Constraints - 1 leq t leq 100 - 1 leq |s| leq 100 - The total length of all strings in the input does not exceed 10,000. # Output Format For each test case, print the rearranged string if possible. Otherwise, print \\"NO\\". # Sample Input 0 ``` 4 a1b2 1122 abcd 12345 ``` # Sample Output 0 ``` a1b2 NO NO 1a2b3 ``` # Explanation 0 1. In the first test case, \\"a1b2\\" is already in the correct format where no two digits or letters are adjacent. 2. In the second test case, it is impossible to rearrange \\"1122\\" such that no two digits are next to each other. 3. In the third test case, it is impossible to rearrange \\"abcd\\" because it contains only letters. 4. In the fourth test case, one valid rearrangement is \\"1a2b3\\". Other valid arrangements are possible as well, such as \\"a1b2c3\\" if there were enough letters in between digits, but the constraint gives just these digits.","solution":"def rearrange_string(s): digits = [] letters = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) if abs(len(digits) - len(letters)) > 1: return \\"NO\\" result = [] if len(digits) > len(letters): while digits or letters: if digits: result.append(digits.pop(0)) if letters: result.append(letters.pop(0)) else: while digits or letters: if letters: result.append(letters.pop(0)) if digits: result.append(digits.pop(0)) return \\"\\".join(result) def solve(t, test_cases): results = [] for i in range(t): s = test_cases[i] results.append(rearrange_string(s)) return results"},{"question":"Polly the Parrot has just learned how to type on a keyboard and now wants to send messages to friends. However, Polly tends to make typing mistakes, especially with special characters. Polly\'s friend designed a custom keyboard that only includes alphabetic characters (both uppercase and lowercase). Your task is to help Polly by writing a program that takes an input message and outputs the corrected version by removing all non-alphabetic characters. Polly\'s friend really values the original case of the message, so your output should preserve the case of the original letters in the input. -----Input----- The input consists of a single line containing a string S of at most 100000 characters. The string may contain alphabetic characters (both uppercase and lowercase), digits, spaces, and special characters. -----Output----- Output a single line with the corrected message containing only alphabetic characters in the original case from the input. -----Examples----- Sample Input 1: H3ll0 W0rld! Sample Output 1: HllWrld Sample Input 2: P3@c3 L0v3 & C0d1ng! Sample Output 2: PcLvCdng Sample Input 3: _Programming_in_Python3_ Sample Output 3: ProgramminginPython","solution":"def correct_message(message): Returns the corrected message by removing all non-alphabetic characters. Parameters: message (str): The input message containing alphabetic and non-alphabetic characters. Returns: str: The corrected message with only alphabetic characters. return \'\'.join(filter(str.isalpha, message))"},{"question":"Given a positive integer `n`, write a function to return a string that represents an `n x n` grid where each cell contains an increasing number from 1 to `n*n`. The numbers should be filled row-wise from left to right, and top to bottom. For example, given `n = 3`, the function should return: ``` 1 2 3 4 5 6 7 8 9 ``` And for `n = 5`, the function should return: ``` 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ``` The numbers in each cell should be separated by a single space. Note that if `n = 0`, the function should return an empty string. The function should return the grid as a single string with each row separated by a newline character.","solution":"def generate_grid(n): Generate an n x n grid with each cell containing an increasing number from 1 to n*n. if n == 0: return \\"\\" grid = \\"\\" number = 1 for row in range(n): row_values = [] for col in range(n): row_values.append(str(number)) number += 1 grid += \\" \\".join(row_values) + \\"n\\" return grid.strip()"},{"question":"Leah is planning a hiking trip with her friends. To make the hike more challenging, they want to meet at a location which is the optimal center of all their starting points in terms of minimizing the maximum euclidean distance any friend has to travel to the meeting point. Given the starting positions of Leah and her friends, you need to determine the optimal meeting point that minimizes the maximum distance any friend has to travel. -----Input----- The first line of the input contains an integer N, with 1 leq N leq 100, the number of friends including Leah. Then, there are N lines, each with two integers with absolute value at most 10^8, which give the locations (X, Y) of the N friends. -----Output----- Output a single line containing two integers X_{center} and Y_{center} which are the coordinates of the optimal meeting point. If there are multiple such points, choose the one with the smallest X coordinate, and if there is still a tie, choose the one with the smallest Y coordinate. -----Examples----- Sample Input 1: 3 0 0 1 1 0 2 Sample Output 1: 0 1 Sample Input 2: 4 1 1 4 4 1 4 4 1 Sample Output 2: 2 2 Sample Input 3: 2 -1 -1 1 1 Sample Output 3: 0 0","solution":"def optimal_meeting_point(N, positions): Finds the optimal center point minimizing the maximum distance any friend has to travel. If there are multiple such points, chooses the one with the smallest X coordinate, and if there is still a tie, the one with the smallest Y coordinate. # Sort the x coordinates and y coordinates separately x_coords = sorted(pos[0] for pos in positions) y_coords = sorted(pos[1] for pos in positions) # The optimal point will be the median of the sorted coordinates if N % 2 == 1: x_center = x_coords[N//2] y_center = y_coords[N//2] else: x_center = (x_coords[N//2 - 1] + x_coords[N//2]) // 2 y_center = (y_coords[N//2 - 1] + y_coords[N//2]) // 2 return (x_center, y_center) def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) positions = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(N)] result = optimal_meeting_point(N, positions) print(result[0], result[1])"},{"question":"Write a program to read a 2D matrix of integers, and count the number of unique \\"islands\\" in the matrix. An \\"island\\" is defined as groups of contiguous cells with the value 1, connected horizontally or vertically (not diagonally). Constraints * The matrix dimensions are n times m where 1 leq n, m leq 100. Input The first line contains two integers, n and m, denoting the number of rows and columns in the matrix respectively. The next n lines each contain m integers, representing the matrix. Output Output a single integer, the number of unique islands in the matrix. Example Input 4 5 1 1 0 0 0 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 Output 3","solution":"def count_islands(matrix): Returns the count of unique islands in the given 2D matrix. An island is defined as groups of contiguous cells with the value 1, connected horizontally or vertically. if not matrix: return 0 n, m = len(matrix), len(matrix[0]) def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or matrix[x][y] != 1: return matrix[x][y] = -1 # mark as visited dfs(x-1, y) dfs(x+1, y) dfs(x, y-1) dfs(x, y+1) island_count = 0 for i in range(n): for j in range(m): if matrix[i][j] == 1: dfs(i, j) island_count += 1 return island_count # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) matrix = [] index = 2 for _ in range(n): row = list(map(int, data[index:index+m])) matrix.append(row) index += m print(count_islands(matrix))"},{"question":"You are given a string of lowercase English letters and a dictionary of valid words. Your task is to implement a function that returns all the unique anagrams of the given string that are also valid words in the dictionary. An anagram of a string is another string formed by rearranging the letters of the original string, using all the original letters exactly once. # Input - The input string `s` consists of lowercase English letters (1 ≤ |s| ≤ 10). - The dictionary `words` contains a set of lowercase English words. # Output - Return a list of all unique valid anagrams of the string `s` that are present in the dictionary. The output list should be sorted in lexicographical order. # Examples Example 1 Input: ``` s = \\"ate\\" words = {\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"} ``` Output: ``` [\\"ate\\", \\"eat\\", \\"tea\\"] ``` Example 2 Input: ``` s = \\"listen\\" words = {\\"enlist\\", \\"tinsel\\", \\"banana\\", \\"stone\\", \\"listen\\", \\"silent\\"} ``` Output: ``` [\\"enlist\\", \\"listen\\", \\"silent\\", \\"tinsel\\"] ``` # Constraints - The length of the string `s` will not exceed 10 characters. - The dictionary `words` will contain at most 1000 words. # Solution Signature ```python from typing import List, Set def find_anagrams(s: str, words: Set[str]) -> List[str]: ``` Implement the function `find_anagrams(s: str, words: Set[str]) -> List[str]` which returns a list of valid anagrams of the string `s` present in the dictionary.","solution":"from typing import List, Set from itertools import permutations def find_anagrams(s: str, words: Set[str]) -> List[str]: Returns a list of all unique valid anagrams of the string `s` that are present in the dictionary `words`. The output list is sorted in lexicographical order. # Generate all possible permutations of the string `s` perm = set(permutations(s)) # Join each permutation tuple to form string and check if it is in `words` valid_anagrams = {\\"\\".join(p) for p in perm if \\"\\".join(p) in words} # Return the sorted list of valid anagrams return sorted(valid_anagrams)"},{"question":"A robot is located at the top-left corner of an m times n grid (marked \'Start\' in the diagram below). The robot can move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' in the diagram below). How many possible unique paths are there? **Diagram:** | Start -> | | | | | | | | | | | | | Finish| Write a function `uniquePaths(m, n)` that returns the number of unique paths that the robot can take to reach the bottom-right corner of the grid. **Function Signature:** ```python def uniquePaths(m: int, n: int) -> int: ``` **Input:** - An integer `m` (1 ≤ m ≤ 100) – the number of rows in the grid. - An integer `n` (1 ≤ n ≤ 100) – the number of columns in the grid. **Output:** - Return an integer representing the number of unique paths that the robot can take. **Examples:** - Example 1: ```python m = 3 n = 7 uniquePaths(m, n) ``` Output: ```plaintext 28 ``` - Example 2: ```python m = 3 n = 2 uniquePaths(m, n) ``` Output: ```plaintext 3 ``` **Example Description:** In the first example, the robot has 28 unique paths to go from the top-left corner to the bottom-right corner in a 3x7 grid. In the second example, the robot has 3 unique paths in a 3x2 grid. **Constraints:** - The values for `m` and `n` are positive integers, i.e., you do not need to handle invalid inputs. - Both `m` and `n` will be at least 1, so the minimum grid size is `1x1`. - The function should be efficient enough to handle larger inputs up to the constraint limit.","solution":"def uniquePaths(m: int, n: int) -> int: Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. # Initialize a 2D DP array with 1s since there\'s only one way to get to each cell # in the first row or first column (by only moving right or down respectively) dp = [[1]*n for _ in range(m)] # Start filling the DP table from cell (1,1) since the first row and column are already filled with 1s for i in range(1, m): for j in range(1, n): # The number of ways to reach cell (i,j) is the sum of ways to reach # the cell directly above it (i-1,j) and the cell directly left of it (i,j-1) dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a sequence of integers A_1, A_2, ldots, A_N. A subarray of this sequence is a contiguous segment of the sequence. You are tasked with finding the length of the longest subarray that contains at most K distinct integers. -----Input----- - The first line of input contains two integers N and K where N is the length of the sequence and K is the maximum number of distinct integers allowed in the subarray. - The second line contains N space-separated integers A_1, A_2, ldots, A_N representing the sequence. -----Output----- Print a single integer, the length of the longest subarray containing at most K distinct integers. -----Constraints----- - 1 le N le 10^5 - 1 le K le N - 1 le A_i le 10^6 for each valid i -----Example Input----- 7 2 1 2 1 2 3 4 1 -----Example Output----- 4 -----Explanation----- Example case 1: The longest subarray with at most 2 distinct integers is [1, 2, 1, 2] with a length of 4. The subarray [2, 3, 4] would contain 3 distinct integers and thereby isn\'t valid.","solution":"def longest_subarray_k_distinct(n, k, A): Returns the length of the longest subarray with at most k distinct integers. :param n: Length of the array :param k: Maximum number of distinct integers allowed in the subarray :param A: List of integers :return: Length of the longest subarray with at most k distinct integers from collections import defaultdict left = 0 right = 0 max_length = 0 current_window = defaultdict(int) while right < n: current_window[A[right]] += 1 while len(current_window) > k: current_window[A[left]] -= 1 if current_window[A[left]] == 0: del current_window[A[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given an array of positive integers. Your task is to determine the maximum product of two distinct elements of this array. If the array has less than two elements, return -1. -----Input----- The input consists of two lines: The first line contains a single integer t (1 le t le 1000) — the number of test cases. For each test case: - The first line contains a single integer n (1 le n le 1000) — the number of elements in the array. - The second line contains n positive integers separated by spaces, representing the elements of the array. Each integer is guaranteed to be between 1 and 10^6. It is guaranteed that the sum of all n across all test cases does not exceed 10^5. -----Output----- For each test case, print a single integer — the maximum product of two distinct elements of the array. If there are no two distinct elements, print -1. -----Examples----- Input 3 5 1 2 3 4 5 3 7 1 9 1 10 Output 20 63 -1 -----Note----- In the first test case, the maximum product is 4 * 5 = 20. In the second test case, the maximum product is 7 * 9 = 63. In the third test case, there is only one element, so the output is -1.","solution":"def max_product_of_two(arr): Returns the maximum product of two distinct elements of the array. If the array has less than two elements, returns -1. if len(arr) < 2: return -1 arr = sorted(arr, reverse=True) return arr[0] * arr[1] def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(max_product_of_two(arr)) return results def parse_input(input_data): data = input_data.split(\'n\') t = int(data[0]) test_cases = [] index = 1 for _ in range(t): n = int(data[index]) arr = list(map(int, data[index + 1].split())) test_cases.append((n, arr)) index += 2 return t, test_cases def max_product_main(input_data): t, test_cases = parse_input(input_data) results = process_test_cases(t, test_cases) return \\"n\\".join(map(str, results))"},{"question":"You are provided with a string containing a mathematical expression in prefix notation (also known as Polish notation), where operators precede their operands. Your task is to evaluate the expression and return the result as an integer. The input will be a single string representing a valid prefix expression involving integers and the four basic arithmetic operators (+, -, *, /). Operands and operators will be separated by a single space. Example: - Input: \\"+ 3 * 2 4\\" - Output: 11 Explanation: - The expression \\"+ 3 * 2 4\\" in infix notation is \\"3 + (2 * 4)\\". - First, evaluate the multiplication: 2 * 4 = 8. - Then, add the result to 3: 3 + 8 = 11. Note: - You can assume the input expression is always valid and will not involve division by zero. - The operators and operands will always be separated by a single space.","solution":"def evaluate_prefix(expression): Evaluate the given prefix expression and return the result as an integer. tokens = expression.split()[::-1] def helper(): token = tokens.pop() if token in \\"+-*/\\": left = helper() right = helper() if token == \\"+\\": return left + right elif token == \\"-\\": return left - right elif token == \\"*\\": return left * right elif token == \\"/\\": return left // right # Use integer division else: return int(token) return helper()"},{"question":"You are given a list of integers. Your task is to find the largest possible product of two distinct elements from the list. Input: The first line contains an integer N, the number of elements in the list. The second line contains N space-separated integers A_i. Output: Print the largest possible product of two distinct elements from the list. Constraints: 2 ≤ N ≤ 10^5 -10^4 ≤ A_i ≤ 10^4 SAMPLE INPUT 5 1 2 3 4 5 SAMPLE OUTPUT 20 Explanation The largest possible product is 4 * 5 = 20.","solution":"def largest_product(N, A): Returns the largest possible product of two distinct elements from the list A. Parameters: N (int): Number of elements in the list. A (list of int): List of integers. Returns: int: The largest product of two distinct elements. if N < 2: return 0 # Sort the array A.sort() # The largest product can be obtained by either: # 1. Multiplying the two largest positive numbers. # 2. Multiplying the two smallest (most negative) numbers. # Since the list is sorted, the two largest positive numbers # will be at the end of the list. max1 = A[-1] * A[-2] # The two most negative numbers will be at the beginning of the list. min1 = A[0] * A[1] # The result will be the maximum of these two products. return max(max1, min1)"},{"question":"An arcade game developer has designed a new game where a player has to collect coins while navigating through a grid. The grid is represented by a matrix of size `m x n`. Each cell in the grid contains a certain number of coins. The player starts at the top-left corner of the grid (cell [1, 1]) and has to move to the bottom-right corner of the grid (cell [m, n]). The player can only move either down or right at any point in time. Your task is to compute the maximum number of coins the player can collect by the time they reach the bottom-right corner of the grid. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 100) – the number of rows and columns in the grid, respectively. The next `m` lines contain `n` integers each, representing the number of coins in each cell of the grid. Output Print a single integer – the maximum number of coins the player can collect. Examples Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 Input: 2 2 1 2 1 1 Output: 4 Note: In the first example, the path that allows the player to collect the maximum number of coins is: 1 -> 3 -> 5 -> 2 -> 1, which sums up to 12 coins. In the second example, the path that allows the player to collect the maximum number of coins is: 1 -> 2 -> 1, which sums up to 4 coins.","solution":"def max_coins(grid): Return the maximum number of coins a player can collect navigating from the top-left to the bottom-right corner of the grid. m = len(grid) n = len(grid[0]) # Create a dp table to store the maximum coins collected up to each cell dp = [[0] * n for _ in range(m)] # Initialize the dp table with the coin values at the first cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The answer is the maximum coins collected up to the bottom-right cell return dp[m - 1][n - 1] # Example usage if __name__ == \\"__main__\\": grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] print(max_coins(grid)) # Output: 12"},{"question":"You have recently joined an online coding platform where you build teams to compete in programming contests. Each team has a distinct name and unique set of team members, ranging from 1 to N members. To prepare for the contests, you need to manage the following operations efficiently: 1. **ADD <team_name> <member1> <member2> ... <memberN>**: Adds a new team with the specified name and members. If a team with the same name already exists, its members should be updated to the new set of members provided in the query. 2. **REMOVE <team_name>**: Removes the team with the specified name. If the team does not exist, this operation has no effect. 3. **QUERY <team_name>**: Returns the members of the specified team in the order they were added. If the team does not exist, return \\"Team does not exist.\\" 4. **QUERY_MEMBER <member_name>**: Returns the name of the team(s) that the specified member belongs to. If the member does not belong to any team, return \\"No team found for <member_name>.\\" Your task is to write a program that processes a series of operations described above and outputs the results accordingly. # Input The input consists of multiple lines. Each line contains one of the following queries: - `ADD <team_name> <member1> <member2> ... <memberN>`: Adds or updates a team. Team names and member names are strings without spaces. - `REMOVE <team_name>`: Removes a team by its name. - `QUERY <team_name>`: Queries for the members of a specified team. - `QUERY_MEMBER <member_name>`: Queries for the teams a member is part of. The last line of the input will be `END`, indicating the end of input. # Output For each `QUERY` or `QUERY_MEMBER` operation, output the results as described above. # Example Input ``` ADD Alpha Alice Bob Charlie ADD Beta David Eve QUERY Alpha QUERY_MEMBER Eve REMOVE Alpha QUERY Alpha QUERY_MEMBER Alice END ``` Output ``` Alice Bob Charlie Beta Team does not exist No team found for Alice ```","solution":"class TeamManager: def __init__(self): self.teams = {} self.members = {} def add_team(self, team_name, *members): self.teams[team_name] = list(members) # Update members mapping for member in members: if member not in self.members: self.members[member] = [] if team_name not in self.members[member]: self.members[member].append(team_name) def remove_team(self, team_name): if team_name in self.teams: for member in self.teams[team_name]: if team_name in self.members[member]: self.members[member].remove(team_name) if not self.members[member]: del self.members[member] del self.teams[team_name] def query_team(self, team_name): if team_name in self.teams: return \\" \\".join(self.teams[team_name]) return \\"Team does not exist\\" def query_member(self, member_name): if member_name in self.members: return \\" \\".join(self.members[member_name]) return f\\"No team found for {member_name}\\" def process_operations(operations): manager = TeamManager() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": team_name = parts[1] members = parts[2:] manager.add_team(team_name, *members) elif command == \\"REMOVE\\": team_name = parts[1] manager.remove_team(team_name) elif command == \\"QUERY\\": team_name = parts[1] results.append(manager.query_team(team_name)) elif command == \\"QUERY_MEMBER\\": member_name = parts[1] results.append(manager.query_member(member_name)) elif command == \\"END\\": break return results"},{"question":"Shopping List Operations Write a program to manage a shopping list. The program should handle a series of commands on a list of items. The commands are: * add x: add item x to the shopping list. * remove x: remove the item x from the shopping list if it exists. Print \\"item not found\\" if the item does not exist. * list: print all items in the shopping list in the order they were added, one per line. * sort: sort the items in the shopping list alphabetically. Constraints * Each command will be one of the specified commands. * The shopping list cannot initially contain any items. * Items consist of lowercase letters only. * There will be at most 100 commands. Input The first line contains the number of commands n. The next n lines each contain a command. Output For each list command, print the items of the shopping list, one per line. If the remove command item is not found, print \\"item not found\\". Examples Input 6 add apple add banana list remove orange add carrot list Output apple banana item not found apple banana carrot Input 5 add milk add honey remove honey add bread list Output milk bread","solution":"def manage_shopping_list(commands): Function to manage the shopping list based on commands. shopping_list = [] results = [] for command in commands: if command.startswith(\\"add \\"): item = command.split(\\" \\", 1)[1] shopping_list.append(item) elif command.startswith(\\"remove \\"): item = command.split(\\" \\", 1)[1] if item in shopping_list: shopping_list.remove(item) else: results.append(\\"item not found\\") elif command == \\"list\\": results.extend(shopping_list) elif command == \\"sort\\": shopping_list.sort() return results"},{"question":"Little Maya loves to play with strings. Her favorite game is to take a string and generate its \\"Shrink Value\\". Let’s define the shrink value of a string as follows: 1. A string can be \\"shrunk\\" by removing any one character, after which it can transform into any string of the same length by rearrangement of its characters. 2. The process continues until only one unique character is left. Help Maya by determining the shrink value of various strings she provides. Input: The first line contains an integer T, denoting the number of test cases. Each of the following T lines contains a single string consisting of lowercase English letters. Output: For each test case, output the shrink value of the given string on a new line. Constraints: 1 ≤ T ≤ 1000 1 ≤ length of string ≤ 1000 SAMPLE INPUT 3 abac abc aaaaaaa SAMPLE OUTPUT 4 6 7 Explanation: Test Case # 1: - Remove \'b\' from \\"abac\\" to get \\"aac\\". - \\"aac\\" can be rearranged to form \\"aca\\". Remove \'c\' to get \\"aa\\". - Continue removing one character at a time while rearranging: Remove \'a\' to get \\"a\\". - Total removals required are: 4. Test Case # 2: - Remove \'a\' from \\"abc\\" to get \\"bc\\". - Continue removing one character at a time while rearranging: Remove \'b\' to get \\"c\\". - Total removals required are: 6. Test Case # 3: - Since all characters are the same, the shrink value is simply the length of the string, which is 7.","solution":"def shrink_value(s): Computes the shrink value of the string. return 2 * len(s) - 2 def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(shrink_value(s)) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = data[1:T+1] results = process_test_cases(T, test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Write a function that takes an integer n as input and generates a list of strings representing a diamond pattern. Each ‘*’ symbol forms part of the diamond, with \' \' (space) padding to correctly format it. The diamond pattern should have 2*n - 1 rows, with n rows forming the upper part of the diamond, followed by (n-1) rows forming the lower part. Example 1: Input: 3 Output: [ \' * \', \' *** \', \'*****\', \' *** \', \' * \' ] Example 2: Input: 5 Output: [ \' * \', \' *** \', \' ***** \', \' ******* \', \'*********\', \' ******* \', \' ***** \', \' *** \', \' * \' ] Your Task: You don’t need to read any input or produce any output. Complete the function generateDiamond(n: int) -> List[str] that takes an integer n as the input parameter and returns a list of strings representing the diamond pattern. Constraints: 1 <= n <= 10 Your implementation should ensure that each string in the list correctly represents one row of the diamond pattern.","solution":"def generateDiamond(n): Generates a diamond pattern with 2*n - 1 rows. :param n: Integer representing the size of the diamond. :return: List of strings representing the diamond pattern. diamond = [] # Create the top part of the diamond for i in range(n): row = \' \' * (n - i - 1) + \'*\' * (2 * i + 1) + \' \' * (n - i - 1) diamond.append(row) # Create the bottom part of the diamond for i in range(n - 2, -1, -1): row = \' \' * (n - i - 1) + \'*\' * (2 * i + 1) + \' \' * (n - i - 1) diamond.append(row) return diamond"},{"question":"Deepak is fascinated by palindromic sequences and wants to explore them in the context of strings. A string is called a palindrome if it reads the same forwards and backwards. For example, \\"radar\\" is a palindrome, but \\"hello\\" is not. Deepak would like to determine if it\'s possible to rearrange the characters of a given string in such a way that it forms a palindrome. Write a program that accepts a list of strings and for each string, it determines whether the characters of the string can be rearranged to form a palindrome. Input The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a single string consisting of lowercase English letters. Output For each test case, output \\"YES\\" if the characters of the string can be rearranged to form a palindrome, and \\"NO\\" otherwise. Constraints 1 ≤ T ≤ 100 1 ≤ Length of each string ≤ 5000 Example: Input: 3 aabbcc abcdef aaabb Output: YES NO YES Explanation: - The string \\"aabbcc\\" can be rearranged as \\"abcabc\\" or \\"abccba\\", both of which are palindromes. - The string \\"abcdef\\" cannot be rearranged to form a palindrome. - The string \\"aaabb\\" can be rearranged as \\"ababa\\", which is a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of the string s can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency return odd_count <= 1 def batch_check_palindromic_rearrangement(strings): results = [] for s in strings: if can_form_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of strings, where each string represents a sequence of Balanced Parentheses. Your task is to write a function that finds the longest subsequence of Balanced Parentheses in each string. The function should return a list of lengths of the longest subsequences for each string in the input list. ```python sequences = [\\"(()())\\", \\"(())\\", \\")(\\", \\"(()\\", \\"((()))\\"] longest_balanced_subsequences(sequences) == [6, 4, 0, 2, 6] ``` In the first string, the entire sequence \\"(()())\\" is balanced, so the length is 6. In the second string, the entire sequence \\"(())\\" is balanced, so the length is 4. In the third string, there are no balanced subsequences, so the length is 0. In the fourth string, the longest balanced subsequence is \\"()\\", so the length is 2. In the fifth string, the entire sequence \\"((()))\\" is balanced, so the length is 6. If a sequence is empty, the function should consider its longest subsequence\'s length as 0: ```python sequences = [\\"\\", \\"(())()\\"] longest_balanced_subsequences(sequences) == [0, 6] ``` The function will receive a list of strings, and it should output a list of integers representing the lengths of the longest balanced subsequences for each input string. ```python sequences = [\\")()(()\\", \\"(())(())\\", \\"())(()((())\\", \\"(())(())())(()\\"] longest_balanced_subsequences(sequences) == [4, 8, 4, 10] ``` If the function receives an empty list, it should return an empty list: ```python sequences = [] longest_balanced_subsequences(sequences) == [] ```","solution":"def longest_balanced_subsequences(sequences): def find_longest_balanced(s): # Use a stack to keep track of the parentheses stack = [] max_len = 0 current_len = 0 start = -1 for i, char in enumerate(s): if char == \'(\': stack.append(i) elif char == \')\': if stack: stack.pop() if stack: current_len = i - stack[-1] else: current_len = i - start max_len = max(max_len, current_len) else: start = i current_len = 0 return max_len return [find_longest_balanced(seq) for seq in sequences]"},{"question":"Given an m x n matrix mat of integers, you are required to find the minimum path sum from the top-left corner to the bottom-right corner, only allowing you to move either down or right at any point in time. Example 1: Input: mat = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: As follows the path 1→3→1→1→1 having a minimum sum of 7. Example 2: Input: mat = [[1,2,3],[4,5,6]] Output: 12 Explanation: As follows the path 1→2→3→6 having a minimum sum of 12. Your Task: You don\'t need to read or print anything. Your task is to complete the function minPathSum() which takes mat as input parameters and returns an integer denoting the minimum path sum from the top-left to the bottom-right corner. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Constraints: 1 ≤ m, n ≤ 100 -100 ≤ mat[i][j] ≤ 100","solution":"def minPathSum(mat): if not mat: return 0 m, n = len(mat), len(mat[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = mat[0][0] for i in range(1, m): dp[i][0] = dp[i-1][0] + mat[i][0] for j in range(1, n): dp[0][j] = dp[0][j-1] + mat[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + mat[i][j] return dp[-1][-1]"},{"question":"You are given a string `s` containing only lowercase English letters. Your task is to find out how many times the same character appears consecutively in the string. You need to find the character which has the longest consecutive repetition and output the length of such repetition. -----Input----- The input contains a single string `s` (1 leq |s| leq 100,000) which consists of only lowercase English letters. -----Output----- Output a single integer representing the length of the character\'s longest consecutive repetition. -----Examples----- Input aaabbcccddeeee Output 4 Input aabbcc Output 2 Input abcd Output 1 -----Explanation----- In the first example, the longest repetition is \'e\' which appears consecutively for 4 times. In the second example, the length of the longest consecutive repetition is 2, for the characters \'a\', \'b\', and \'c\'. As all of them have the same repetition length, the answer is 2. In the third example, all the characters appear consecutively for exactly 1 time, so the answer is 1.","solution":"def longest_consecutive_repetition(s): Returns the length of the longest consecutive repetition of a character in the input string. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"The city is planning to erect a series of signposts along a straight road. Each signpost has a specified height. To ensure uniformity in design, the height of each signpost in any given subsegment of the road must not differ by more than a fixed number, k. You are given the heights of n signposts and an integer k. You need to determine for q different subsegments, whether the heights of the signposts within each subsegment satisfy the uniformity condition. Input The first line contains two space-separated integers n and q (1 ≤ n, q ≤ 100,000) — the number of signposts and the number of subsegment queries. The next line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), representing the heights of the signposts. The third line contains an integer k (1 ≤ k ≤ 10^9). The next q lines each contain two space-separated integers li and ri (1 ≤ li ≤ ri ≤ n), representing the start and end indices of each subsegment. Output For each query, print \\"Yes\\" if the height difference within the subsegment does not exceed k, otherwise print \\"No\\". Examples Input 6 3 1 5 3 9 2 6 4 1 3 2 5 1 6 Output Yes No No","solution":"def is_uniform(subsegment_heights, k): Checks if height difference within the subsegment does not exceed k. return max(subsegment_heights) - min(subsegment_heights) <= k def check_subsegments(n, h, k, queries): Checks each subsegment query for the uniformity condition. results = [] for l, r in queries: if is_uniform(h[l-1:r], k): results.append(\\"Yes\\") else: results.append(\\"No\\") return results def process_input(n, q, h, k, queries): return check_subsegments(n, h, k, queries)"},{"question":"RoboLawnCare is a startup providing automated lawn mowing services using drones. Each drone follows a specific set of instructions passed through a string of characters to mow the designated area efficiently. Each character in the string corresponds to a specific direction the drone needs to take in its current position: \'N\' for North, \'S\' for South, \'E\' for East, and \'W\' for West. Your task is to simulate the drone\'s movement on a lawn grid based on a given set of instructions and determine the final position of the drone after executing all the directions. Assume the drone starts at position (0, 0). Input The input consists of a single string of up to 1000 characters representing the directions (N, S, E, W) the drone follows in sequence. Output Output the final coordinates of the drone as two space-separated integers. Example Input NNESWESW Output 1 2 Explanation Starting at (0, 0): - \'N\' moves to (0, 1) - \'N\' moves to (0, 2) - \'E\' moves to (1, 2) - \'S\' moves to (1, 1) - \'W\' moves to (0, 1) - \'E\' moves to (1, 1) - \'S\' moves to (1, 0) - \'W\' moves to (0, 0)","solution":"def final_drone_position(directions): Returns the final position of the drone on the lawn grid. Parameters: directions (str): A string of up to 1000 characters representing the directions (N, S, E, W). Returns: tuple: A tuple containing two integers representing the final coordinates of the drone. x, y = 0, 0 for direction in directions: if direction == \'N\': y += 1 elif direction == \'S\': y -= 1 elif direction == \'E\': x += 1 elif direction == \'W\': x -= 1 return x, y"},{"question":"Given a binary tree, the task is to write a function diagonalSum() that computes the sum of the nodes present at each diagonal of the tree. The diagonals of a binary tree begin from the root and extend rightwards and downwards, forming a cascading pattern. Input: - The function takes a single argument as input, which is the pointer to the root of the binary tree. Output: - The function should return a list of integers where each integer represents the sum of the nodes on each diagonal, starting from the topmost diagonal. Constraints: - The binary tree will have at most 1000 nodes. - The value of each node is between 1 and 1000. Example: Input: 1 / 2 3 / / 4 5 6 7 / 8 Output: [11, 16, 10] Explanation: - Diagonal 1: {1, 3, 7}, sum = 1 + 3 + 7 = 11 - Diagonal 2: {2, 5, 6, 8}, sum = 2 + 5 + 6 + 8 = 21 - Diagonal 3: {4}, sum = 4 = 4 Note: The Input/Output format and example provided are used for system\'s internal purposes. The task is to complete the function specified and not to write the full code.","solution":"class Node: def __init__(self, key): self.data = key self.left = None self.right = None def diagonalSum(root): if root is None: return [] diagonal_map = {} _diagonalSumUtil(root, 0, diagonal_map) # Extract sums from the map and return as a list result = [] level = 0 while level in diagonal_map: result.append(sum(diagonal_map[level])) level += 1 return result def _diagonalSumUtil(node, d, diagonal_map): if node is None: return if d in diagonal_map: diagonal_map[d].append(node.data) else: diagonal_map[d] = [node.data] _diagonalSumUtil(node.left, d + 1, diagonal_map) _diagonalSumUtil(node.right, d, diagonal_map)"},{"question":"You are given `n` strings consisting of lowercase English letters. Your task is to group the given strings into the minimum number of anagram groups. Two strings are considered anagrams if one can be rearranged to become the other. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of strings. The next `n` lines contain one string each. The length of each string is between 1 and 100 (inclusive). Output Print a single integer — the minimum number of anagram groups. Examples Input 5 eat tea tan ate nat Output 2 Input 3 a b c Output 3 Input 4 listen silent enlist tinsel Output 1","solution":"def count_anagram_groups(strings): Returns the minimum number of anagram groups from the list of strings. from collections import defaultdict anagram_groups = defaultdict(list) for s in strings: key = \'\'.join(sorted(s)) anagram_groups[key].append(s) return len(anagram_groups)"},{"question":"A magician is performing a magic show, and his trick involves a mystical square grid of size N times N. Each cell in the grid contains a non-negative integer. The magician starts in the top-left corner of the grid (cell (1,1)) and aims to reach the bottom-right corner of the grid (cell (N,N)). He can only move either right to the adjacent cell or down to the adjacent cell. The magic trick happens when the magician can find the path that maximizes the sum of the integers in the cells he visits along his way to the bottom-right corner. Help the magician by writing a program to determine the maximum sum path. Input Format The first line contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N denoting the size of the grid. The next N lines contain N space-separated integers each, representing the grid. Output Format For each test case, print the maximum sum path as an integer on a new line. Constraints 1 leq T leq 10^3 1 leq N leq 100 0 leq text{grid}[i][j] leq 10^3 Sample Input: 2 3 5 3 2 1 9 8 6 4 3 2 1 2 5 6 Sample Output: 28 12 Explanation: In the first test case, the grid is: 5 3 2 1 9 8 6 4 3 The path yielding the maximum sum is: 5 -> 3 -> 9 -> 8 -> 3 = 28 In the second test case, the grid is: 1 2 5 6 The path yielding the maximum sum is: 1 -> 2 -> 6 = 12","solution":"def max_sum_path(grid, N): dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] # Initialize first row of dp table for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize first column of dp table for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the dp table for i in range(1, N): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][N-1] def handle_test_cases(test_cases): results = [] for test_case in test_cases: N, grid = test_case results.append(max_sum_path(grid, N)) return results def parse_input(data): lines = data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) grid = [] for i in range(N): grid.append(list(map(int, lines[index + 1 + i].split()))) index += N + 1 test_cases.append((N, grid)) return test_cases"},{"question":"Sophia is creating a digital diary application, and she needs your help to generate unique diary entry IDs for each new entry. Each entry ID should consist of exactly N characters and follow these rules: 1. The ID should only contain uppercase English letters (A-Z). 2. The first character of the ID must be \'A\'. 3. The ID must be lexicographically larger than the previous entry\'s ID (initially, assume the previous ID was an empty string). Given the length of the ID (N) and the previous entry\'s ID, generate the next smallest lexicographically valid ID for a new entry. Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains two space-separated inputs: an integer N (the length of the ID) and a string P (the previous entry\'s ID). Output: - For each test case, output the next smallest lexicographically valid ID of length N. Constraints: 1 ≤ T ≤ 10000 1 ≤ N ≤ 100000 P is always a valid ID of length N SAMPLE INPUT 3 3 AAC 4 AZZZ 2 AB SAMPLE OUTPUT AAD BAAA AC","solution":"def generate_next_id(N, P): Generates the next smallest lexicographically valid ID for a new diary entry. Parameters: N (int): Length of the ID. P (str): Previous entry\'s ID. Returns: str: Next smallest lexicographically valid ID. id_list = list(P) for i in reversed(range(N)): if id_list[i] != \'Z\': id_list[i] = chr(ord(id_list[i]) + 1) return \\"\\".join(id_list[:i + 1] + [\'A\'] * (N - i - 1)) return \'A\' * (N + 1) def process_test_cases(T, test_cases): results = [] for test in test_cases: N, P = test result = generate_next_id(N, P) results.append(result) return results"},{"question":"Anna loves coding contests and is preparing for her next competition. One of the problems she faces involves calculating the number of ways she can climb a staircase with exactly n steps. She can either climb one step at a time or two steps at a time. For instance, if the staircase has 3 steps, Anna can reach the top in 3 ways: (1 step + 1 step + 1 step), (1 step + 2 steps), or (2 steps + 1 step). Write a program to determine the number of ways Anna can climb a staircase with n steps. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 1000) — the total number of steps in the staircase. -----Output----- Print the number of ways Anna can climb the staircase with exactly n steps. -----Examples----- Input 3 Output 3 Input 4 Output 5 Input 5 Output 8 -----Note----- In the first example, Anna has 3 ways to climb the staircase: 1. (1 step + 1 step + 1 step) 2. (1 step + 2 steps) 3. (2 steps + 1 step) In the second example, Anna has 5 ways to climb the staircase: 1. (1 step + 1 step + 1 step + 1 step) 2. (1 step + 1 step + 2 steps) 3. (1 step + 2 steps + 1 step) 4. (2 steps + 1 step + 1 step) 5. (2 steps + 2 steps) In the third example, Anna has 8 ways to climb the staircase: 1. (1 step + 1 step + 1 step + 1 step + 1 step) 2. (1 step + 1 step + 1 step + 2 steps) 3. (1 step + 1 step + 2 steps + 1 step) 4. (1 step + 2 steps + 1 step + 1 step) 5. (2 steps + 1 step + 1 step + 1 step) 6. (2 steps + 2 steps + 1 step) 7. (2 steps + 1 step + 2 steps) 8. (1 step + 2 steps + 2 steps)","solution":"def climb_stairs(n): Returns the number of ways to climb a staircase with exactly n steps. if n == 1: return 1 elif n == 2: return 2 # Initialize dp array where dp[i] represents the number of ways to reach step i dp = [0] * (n + 1) dp[1] = 1 dp[2] = 2 for i in range(3, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n]"},{"question":"Alice is passionate about collecting rare gemstones and loves organizing them in a unique way. She has a list of gemstones, each identified by a unique number assigned at the time of collection. Alice wants to rearrange this list in a special order based on her own set of rules. Whenever she acquires a new gemstone, she logs its number and the minute she obtained it. However, she has a tendency to switch to a new organization strategy every day. She uses the following specific ordering rules: - On even-numbered days, she organizes her gemstones in ascending order of their number. - On odd-numbered days, she organizes her gemstones in descending order of their number. You are to help Alice sort her gemstones based on the day she acquired them according to her rules. Input: - The first line contains G, the number of days for which you need to process the gemstones. - Each of the next G lines represents a day and follows the format: - The first number D represents the day (1 for the first day, 2 for the second day, etc.) - The second number N represents the number of gemstones acquired that day. - The next N numbers are the unique numbers of the gemstones obtained on that day in the order they were logged. Output: - For each day, output the list of gemstone numbers sorted according to Alice\'s organization rules. - Each day\'s result should be printed on a new line. Constraints: - 0 < G, D ≤ 100. - 1 ≤ N ≤ 100. - Each gemstone\'s unique number is between 1 and 10000. SAMPLE INPUT 3 1 5 12 3 5 7 1 2 4 6 8 2 4 3 3 10 15 13 SAMPLE OUTPUT 12 7 5 3 1 2 4 6 8 15 13 10 Explanation: For the first day, the list of gemstones [12, 3, 5, 7, 1] is sorted in descending order because it is the 1st day (odd-numbered day). For the second day, the list of gemstones [6, 8, 2, 4] is sorted in ascending order because it is the 2nd day (even-numbered day). For the third day, the list of gemstones [10, 15, 13] is again sorted in descending order because it is the 3rd day (odd-numbered day).","solution":"def organize_gemstones(G, days_info): result = [] for info in days_info: day = info[0] gemstones = info[2:] if day % 2 == 0: # even-numbered day sorted_gemstones = sorted(gemstones) else: # odd-numbered day sorted_gemstones = sorted(gemstones, reverse=True) result.append(sorted_gemstones) return result"},{"question":"The purpose of this problem is to test your ability to manipulate strings and process lists efficiently. You should be able to handle problems involving basic string operations and list handling at runtime. -----Input----- The input consists of two lines. The first line contains a single integer n (1 ≤ n ≤ 105), the number of strings. The second line contains n strings each of length between 1 and 100, separated by spaces. -----Output----- Write a single string to output, which is the concatenation of all the strings in the input, sorted in non-decreasing order by their length. If two strings have the same length, maintain their original order. -----Example----- Input: 5 apple banana grape orange peach Output: apple grape peach banana orange","solution":"def concatenate_sorted_strings(n, strings): Concatenates strings in non-decreasing order of their length, and returns the concatenated result. If two strings have the same length, maintains their original order. :param n: Number of strings :param strings: List of strings :return: Concatenated string sorted by length sorted_strings = sorted(strings, key=len) return \' \'.join(sorted_strings) # Example usage: # n = 5 # strings = [\\"apple\\", \\"banana\\", \\"grape\\", \\"orange\\", \\"peach\\"] # output = concatenate_sorted_strings(n, strings) # print(output) # Should print: \\"apple grape peach banana orange\\""},{"question":"You are given an array of integers where each integer represents the height of a building. The buildings are placed in a straight line and the amount of sunlight they receive depends on their height compared to the buildings to their left. A building will receive sunlight if it is taller than all the buildings to its left. Write a function to determine how many buildings will receive sunlight. Input The first line of input contains an integer n (1 ≤ n ≤ 105) representing the number of buildings. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) representing the heights of the buildings from left to right. Output Output a single integer representing the number of buildings that will receive sunlight. Examples Input 6 3 2 4 6 5 1 Output 3 Input 5 1 2 3 4 5 Output 5 Explanation In the first sample, the buildings with heights 3, 4, and 6 will receive sunlight because they are each taller than all buildings to their left. In the second sample, all buildings are in increasing order of height, so each building will receive sunlight.","solution":"def count_buildings_with_sunlight(building_heights): Count the number of buildings that will receive sunlight. Parameters: - building_heights: List of integers representing the heights of the buildings Returns: - An integer representing the number of buildings that will receive sunlight if not building_heights: return 0 max_height = 0 count = 0 for height in building_heights: if height > max_height: count += 1 max_height = height return count"},{"question":"Tim has an array of N distinct integers. He wants to find out the number of \\"interesting\\" subarrays in this array. A subarray is called interesting if the difference between its largest and smallest elements is exactly equal to a given integer D. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ A_i ≤ 10^9 (where A_i is an element of the array) * 1 ≤ D ≤ 10^9 Input Input is given from Standard Input in the following format: N D A1 A2 ... AN Output Print the number of interesting subarrays in the given array. Examples Input 5 2 1 3 5 7 9 Output 4 Input 4 3 4 1 7 6 Output 1 Input 3 1 10 11 12 Output 2","solution":"def count_interesting_subarrays(N, D, A): Returns the number of interesting subarrays in the given array. An interesting subarray is one where the difference between its largest and smallest elements is exactly D. count = 0 for i in range(N): min_elem = max_elem = A[i] for j in range(i, N): min_elem = min(min_elem, A[j]) max_elem = max(max_elem, A[j]) if max_elem - min_elem == D: count += 1 elif max_elem - min_elem > D: break return count"},{"question":"Given an n times m grid, each cell of the grid contains a value which represents the altitude at that position. Alice and Bob are going for a hike, and they want to find a path from the top-left corner (1, 1) to the bottom-right corner (n, m) of the grid such that the maximum difference in altitude between any two adjacent cells in the path is as small as possible. Alice and Bob can only move to adjacent cells in the grid, either to the right, down, left, or up. Your task is to help Alice and Bob find the maximum difference in altitude between any two adjacent cells in the optimal path, or determine that it is impossible to reach the bottom-right corner from the top-left corner. -----Input----- The first line of the input contains two integers n and m (2 le n, m le 1000), which represent the dimensions of the grid. The next n lines contain m integers each, where the j-th integer in the i-th line a_{ij} (0 le a_{ij} le 10^6) represents the altitude at position (i, j) in the grid. -----Output----- If it is impossible to reach the bottom-right corner from the top-left corner, print only one integer -1. Otherwise, print one integer - the minimum possible value of the maximum difference in altitude between any two adjacent cells in the optimal path. -----Examples----- Input 3 3 1 2 2 3 8 2 5 3 5 Output 2 Input 2 2 1 1000000 1000000 1 Output 999999","solution":"from collections import deque def can_reach_with_diff(grid, n, m, max_diff): directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: if abs(grid[nx][ny] - grid[x][y]) <= max_diff: visited[nx][ny] = True queue.append((nx, ny)) return False def minimum_max_diff(grid): n = len(grid) m = len(grid[0]) low, high = 0, max(max(row) for row in grid) result = high while low <= high: mid = (low + high) // 2 if can_reach_with_diff(grid, n, m, mid): result = mid high = mid - 1 else: low = mid + 1 if result == max(max(row) for row in grid): return -1 return result"},{"question":"You are given a string S consisting of uppercase and lowercase alphabets. A \\"valid string\\" is defined as a string where every uppercase letter has a corresponding lowercase letter of the same alphabet present in the string, and vice versa. For example, the string \\"aA\\" is valid, while \\"aB\\" is not. You can delete any number of characters from the string S. Determine the length of the longest valid string that can be obtained by deleting some (or no) characters from S. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of a single line of input, a string S. ------ Output Format ------ For each test case, output a single integer — the length of the longest valid string that can be obtained. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 5000 S consists of uppercase and lowercase English letters. ----- Sample Input 1 ------ 3 aA abAB aBcCbA ----- Sample Output 1 ------ 2 4 6 ----- Explanation 1 ------ Test case 1: The string \\"aA\\" is already a valid string of length 2. Test case 2: Remove characters \'b\' and \'B\' to obtain the string \\"aA\\", or remove characters \'a\' and \'A\' to get \\"bB\\". In any case, the longest valid string has a length of 2. Test case 3: The string \\"aBcCbA\\" is already a valid string of length 6.","solution":"def longest_valid_string_length(S): from collections import Counter def pair_count(s): lower_upper_count = Counter(s) count = 0 for char in set(s): if char.islower() and char.upper() in lower_upper_count: count += min(lower_upper_count[char], lower_upper_count[char.upper()]) * 2 return count return pair_count(S) def process_test_cases(T, cases): results = [] for case in cases: results.append(longest_valid_string_length(case)) return results"},{"question":"Taro is planning a road trip with his friends and wants to make sure they use the least amount of fuel while traveling. He has a list of cities and the distances between them. He\'s looking to find the shortest route that visits each city exactly once and returns to the starting city. To help Taro, you will write a program that solves the traveling salesperson problem for a given set of cities and distances. Constraints: - You can assume that the number of cities, N, is between 2 and 10. - The distance between any two cities is a positive integer. - The distance from a city to itself is 0. - The distance between any two cities is the same in both directions. Input: - The first line of input consists of a single integer, N, indicating the number of cities. - The next N lines each contain N integers. The j-th integer of the i-th line indicates the distance between city i and city j. Output: - A single integer which is the shortest possible distance to visit all cities and return to the starting point. Example: Input: 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output: 80","solution":"import itertools def traveling_salesman(N, distances): Solves the Traveling Salesman Problem using a brute force approach. Parameters: N (int): Number of cities. distances (list of list of int): Distances between each pair of cities. Returns: int: The minimum possible distance to visit all cities and return to the starting point. min_distance = float(\'inf\') for perm in itertools.permutations(range(1, N)): # Start from city 0 and follow the current permutation current_distance = distances[0][perm[0]] for i in range(len(perm) - 1): current_distance += distances[perm[i]][perm[i+1]] current_distance += distances[perm[-1]][0] min_distance = min(min_distance, current_distance) return min_distance # Example usage: # N = 4 # distances = [ # [0, 10, 15, 20], # [10, 0, 35, 25], # [15, 35, 0, 30], # [20, 25, 30, 0] # ] # print(traveling_salesman(N, distances)) # Output: 80"},{"question":"A knight is on an infinite chessboard starting at position (0, 0) at time 0. A knight can move in an \\"L\\" shape, which means it can move: - Two squares in one direction and then one square perpendicular to that direction, or - One square in one direction and then two squares perpendicular to that direction. Each move requires exactly one unit of time. Given a target position (X, Y) on the chessboard, determine the minimum number of moves required for the knight to reach (X, Y) starting from (0, 0). -----Constraints----- - X and Y are integers. - -10^9 ≤ X, Y ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: X Y -----Output----- Print the minimum number of moves required for the knight to reach the target position (X, Y) from the starting position (0, 0). -----Sample Input----- 2 1 -----Sample Output----- 1 The knight can reach position (2, 1) in just 1 move by directly making an \\"L\\" shaped move.","solution":"from collections import deque def min_knight_moves(X, Y): moves = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)] # Normalize the target coordinates to the first quadrant X, Y = abs(X), abs(Y) # Queue stores tuples of (current_x, current_y, current_num_moves) queue = deque([(0, 0, 0)]) # Set to keep track of visited positions visited = set((0, 0)) while queue: current_x, current_y, current_num_moves = queue.popleft() if current_x == X and current_y == Y: return current_num_moves for move in moves: next_x, next_y = current_x + move[0], current_y + move[1] # Limiting moves to the first quadrant or neighboring quadrants if (next_x, next_y) not in visited and next_x >= -1 and next_y >= -1: visited.add((next_x, next_y)) queue.append((next_x, next_y, current_num_moves + 1)) # To read the input from standard input def main(): import sys input = sys.stdin.read X, Y = map(int, input().strip().split()) result = min_knight_moves(X, Y) print(result) if __name__ == \\"__main__\\": main()"},{"question":"The kings of a distant land enjoy hosting elaborate feasts. Each king has an array of dishes they personally prefer, numbered from 1 to n. Kings are particularly picky about their favorite dish; they will request this dish multiple times during a feast. During each feast, the king can request their favorite dish several times. Let’s say their favorite dish is dish number `k`. The king will request this dish exactly `m` times during the entire feast. Every time they request dish `k`, it must be prepared fresh. Each preparation of dish `k` requires a certain number of minutes, denoted by `p`. Given the total time units (in minutes) available for the feast and a list of time units required to prepare each requested dish (including the favorite dish `k`), determine if it is possible to complete the feast and how much time would be left after serving the king\'s dish `m` times. Your task is to write a program that, given the number of dishes, favorite dish, number of requests, preparation times for each dish, and the total available time, checks if it is feasible to meet the king\'s requirements and the remaining time if possible. Print \\"IMPOSSIBLE\\" if it cannot be done. -----Input----- The first line contains three integers n, k, and m (1 ≤ n ≤ 100, 1 ≤ k ≤ n, 1 ≤ m ≤ 100). The second line contains n integers where the i-th integer represents the preparation time p_i for the i-th dish (1 ≤ p_i ≤ 100). The third line contains one integer t which represents the total time units available for the feast (1 ≤ t ≤ 10000). -----Output----- If it is impossible to prepare the favorite dish `k` exactly `m` times during the feast within the given total time, print \\"IMPOSSIBLE\\". Otherwise, print a single integer — the remaining time units after serving the favorite dish `k` `m` times. -----Examples----- Input 5 3 4 10 20 30 40 50 300 Output 180 Input 3 1 2 15 25 35 40 Output 10 Input 4 2 10 5 15 25 10 100 Output IMPOSSIBLE -----Note----- In the first sample, the favorite dish is dish 3 and it must be prepared 4 times. Each preparation takes 30 minutes, so a total of 120 minutes are needed. The given total time is 300 minutes, so after serving the favorite dish 4 times, 180 minutes remain. In the second sample, the favorite dish is dish 1 and it must be prepared 2 times. Each preparation takes 15 minutes, so a total of 30 minutes are needed. The given total time is 40 minutes, so after serving the favorite dish 2 times, 10 minutes remain. In the third sample, the favorite dish is dish 2 and it must be prepared 10 times. Each preparation takes 15 minutes, hence a total of 150 minutes are needed. The given total time is 100 minutes, which is insufficient. Thus, it is impossible to prepare the favorite dish the required number of times.","solution":"def feast_time(n, k, m, preparation_times, t): Determines if it is feasible to meet the king\'s requirements and calculates the remaining time. Args: n (int): number of dishes. k (int): favorite dish number. m (int): number of requests for the favorite dish. preparation_times (list of int): list containing time required to prepare each dish. t (int): total time available for the feast. Returns: int or str: remaining time units after serving the favorite dish `k` `m` times or \\"IMPOSSIBLE\\". required_time = preparation_times[k-1] * m if required_time <= t: return t - required_time else: return \\"IMPOSSIBLE\\""},{"question":"You are given two strings, text{S} and text{T}, both containing only lowercase English letters. A shuffle of a string is a permutation of its characters. For instance, the shuffles of \\"abc\\" are \\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", and \\"cba\\". Your task is to determine whether string text{T} can be made a shuffle of text{S} by rearranging at most one character in text{T}. In other words, you need to check if it\'s possible to make text{T} a permutation of text{S} with at most one change in text{T}. Function Description Complete the function `canBeShuffled` in the editor below. It should return a boolean value (`True` or `False`) indicating whether text{T} can be transformed into a shuffle of text{S} by changing at most one character in text{T}. `canBeShuffled` has the following parameters: - `S`: a string - `T`: a string Input Format The first line contains a single string text{S}. The second line contains a single string text{T}. Constraints - 1 leq text{len(S)}, text{len(T)} leq 1000 - text{S} and text{T} contain only lowercase English letters. Output Format Return `True` if text{T} can be made a shuffle of text{S} by changing at most one character in text{T}. Otherwise, return `False`. Sample Input 0 ``` abcde ebcda ``` Sample Output 0 ``` True ``` Explanation 0 The original strings are text{S} = \\"abcde\\" and text{T} = \\"ebcda\\". text{T} is already a shuffle of text{S}, so no changes are needed, and the result is `True`. Sample Input 1 ``` abcde ebcdf ``` Sample Output 1 ``` True ``` Explanation 1 The original strings are text{S} = \\"abcde\\" and text{T} = \\"ebcdf\\". By changing the character \'f\' in text{T} to \'a\', we get \\"ebcda\\", which is a shuffle of text{S}. Therefore, the result is `True`. Sample Input 2 ``` abcde ebcdfg ``` Sample Output 2 ``` False ``` Explanation 2 The original strings are text{S} = \\"abcde\\" and text{T} = \\"ebcdfg\\". Even by changing one character in text{T}, it cannot be made a shuffle of text{S} because the lengths of text{S} and text{T} are different. Therefore, the result is `False`.","solution":"def canBeShuffled(S, T): if len(S) != len(T): return False diff_count = 0 char_counts_S = {} char_counts_T = {} for char in S: char_counts_S[char] = char_counts_S.get(char, 0) + 1 for char in T: char_counts_T[char] = char_counts_T.get(char, 0) + 1 for char in char_counts_S: if char in char_counts_T: diff_count += abs(char_counts_S[char] - char_counts_T[char]) else: diff_count += char_counts_S[char] for char in char_counts_T: if char not in char_counts_S: diff_count += char_counts_T[char] # Each difference adds up for the need of changing chars twice hence we allow 2 differences return diff_count <= 2"},{"question":"You are given an array of n integers. Each element in the array is in the range [0, n-1]. Some elements may be duplicated, and some may be missing. Your task is to sort the array in place and then identify the missing and duplicated elements. Write a function that takes a list of integers as input and returns two lists: one containing the missing numbers and the other containing the duplicated numbers. Input - The first line contains an integer n (3 ≤ n ≤ 10^5), the length of the array. - The second line contains n space-separated integers a_1, a_2, ..., a_n — the elements of the array. Output - The first line should contain the sorted array. - The second line should contain the missing numbers in ascending order. - The third line should contain the duplicated numbers in ascending order. Function signature: `def find_missing_and_duplicates(arr: List[int]) -> Tuple[List[int], List[int], List[int]]:` Example Input: 6 4 3 6 2 1 1 Output: 1 1 2 3 4 6 5 1 Note In the input array, the elements are in the range [0, 5]. The sorted array is [1, 1, 2, 3, 4, 6]. The missing number is [5], and the duplicated number is [1].","solution":"from typing import List, Tuple def find_missing_and_duplicates(arr: List[int]) -> Tuple[List[int], List[int], List[int]]: n = len(arr) sorted_arr = sorted(arr) # Determine missing and duplicated numbers full_range = set(range(n)) present_numbers = set(arr) missing_numbers = sorted(list(full_range - present_numbers)) duplicated_numbers = sorted([num for num in set(arr) if arr.count(num) > 1]) return sorted_arr, missing_numbers, duplicated_numbers"},{"question":"Given a list of integers, find the length of the longest subsequence that can be removed such that the remaining list is strictly increasing. # Input The input consists of multiple test cases. Each test case is given in two lines: - The first line contains an integer `N`, the length of the list (1 ≤ N ≤ 100,000). - The second line contains `N` space-separated integers representing the list `A` (-10^9 ≤ A_i ≤ 10^9). The input ends with a line containing a single `0`, which should not be processed. # Output For each test case, print a single line containing the length of the longest subsequence that can be removed to make the remaining list strictly increasing. # Example Input: ``` 5 5 3 4 8 6 6 10 20 20 30 10 40 0 ``` Output: ``` 2 2 ``` # Explanation - In the first test case, removing the subsequence `[5, 6]` results in the list `[3, 4, 8]`, which is strictly increasing. - In the second test case, removing either `[20, 10]` or any other valid subsequence of length 2 can make the list strictly increasing.","solution":"def longest_subsequence_to_remove(N, A): if N == 0: return 0 # Create an array to store the length of LIS ending at each position lis = [1] * N # Compute the LIS values for i in range(1, N): for j in range(i): if A[i] > A[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 # Get the length of the longest increasing subsequence (LIS) max_lis_length = max(lis) # The length of the longest subsequence that can be removed is # the difference between N and the length of the LIS return N - max_lis_length"},{"question":"A group of friends loves to play a game in which they build towers using blocks. They decided to compete to see who can build the highest tower. The rules of their game are: - There are `n` different types of blocks, and each type of block has a height and a limit on how many blocks of that type can be used. - Each block type can be represented by three integers: height `h`, limit `l`, and type `t`. - They need to follow a sequence of towers, and each tower can only have blocks of one type. Given a list of block type descriptions, determine the maximum height of any single tower that can be built under the constraints of the game. Input The first line of input contains an integer `n` (1 ≤ n ≤ 1000), representing the number of different types of blocks. Each of the next `n` lines contains three space-separated integers `h_i`, `l_i`, and `t_i` (1 ≤ h_i ≤ 100, 1 ≤ l_i ≤ 100, 1 ≤ t_i ≤ 100) representing the height, limit, and type of the block, respectively. Output In the only line of output, print the maximum height of any single tower that can be built using the blocks. Examples Input 3 4 5 1 2 3 2 3 4 3 Output 20 Input 4 2 10 1 3 5 2 1 20 3 5 2 4 Output 10","solution":"def max_tower_height(n, blocks): Determine the maximum height of any single tower that can be built under the constraints. :param n: Number of different types of blocks. :param blocks: List of tuples (height, limit, type) representing each block. :return: Maximum height of the tower. max_height = 0 for h, l, t in blocks: max_height = max(max_height, h * l) return max_height # Input reading and function call (uncomment for detailed testing in a local environment) # if __name__ == \\"__main__\\": # import sys # input = sys.stdin.read # data = input().strip().split(\'n\') # n = int(data[0]) # blocks = [tuple(map(int, line.split())) for line in data[1:]] # print(max_tower_height(n, blocks))"},{"question":"Write a function to check if a given string contains all the letters of the alphabet (a-z). Input A string that may contain various characters and spaces. Output Print \\"Yes\\" if the string contains all the letters of the alphabet, otherwise print \\"No\\". Example Input: The quick brown fox jumps over the lazy dog Output: Yes Input: Hello World Output: No","solution":"def contains_all_alphabet(input_string): Checks if the input string contains all the letters of the alphabet (a-z). Parameters: input_string (str): The string to be checked. Returns: str: \\"Yes\\" if the string contains all letters of the alphabet, otherwise \\"No\\". alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') input_set = set(input_string.lower()) return \\"Yes\\" if alphabet.issubset(input_set) else \\"No\\""},{"question":"A car rental service has a list of car rental orders for each day. Each order specifies the start time and end time of the rental. The service wants to maximize the number of rentals that can be scheduled without overlapping. Your task is to write a function that takes a list of rental orders and returns the maximum number of non-overlapping rentals that can be scheduled in a day. ------ Problem Statement ------ You are provided with a list of rental orders. Each rental order is represented by a tuple containing the start and end time of the rental in the format HH:MM. You need to find the maximum number of non-overlapping rentals that can be scheduled in a day. ------ Input ------ - The function `max_rentals` takes a list of tuples, where each tuple contains two strings: the start time and end time of a rental in the format HH:MM (24-hour format). ------ Output ------ - The function should return a single integer - the maximum number of non-overlapping rentals. ------ Constraints ------ 1 ≤ text{len(rentals)} ≤ 1000 Each time is in the format HH:MM and guaranteed to be valid. The end time of a rental is always greater than the start time. All rentals are within a single day (00:00 to 23:59). ------ Sample Input 1 ------ ```python rentals = [(\\"09:00\\", \\"10:00\\"), (\\"10:00\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\"), (\\"09:30\\", \\"10:30\\")] ``` ------ Sample Output 1 ------ ```python 3 ``` ------ Sample Input 2 ------ ```python rentals = [(\\"09:00\\", \\"12:00\\"), (\\"11:00\\", \\"14:00\\"), (\\"13:00\\", \\"15:00\\"), (\\"10:00\\", \\"11:00\\"), (\\"14:00\\", \\"15:00\\")] ``` ------ Sample Output 2 ------ ```python 3 ``` Explanation: 1. In the first sample input, the maximum number of non-overlapping rentals is 3: [(\\"09:00\\", \\"10:00\\"), (\\"10:00\\", \\"11:00\\"), (\\"11:00\\", \\"12:00\\")]. 2. In the second sample input, the maximum number of non-overlapping rentals is 3: [(\\"09:00\\", \\"12:00\\"), (\\"13:00\\", \\"15:00\\"), (\\"14:00\\", \\"15:00\\")].","solution":"def max_rentals(rentals): from datetime import datetime # Convert the time from HH:MM format to datetime objects for easy comparison rentals = [(datetime.strptime(start, \\"%H:%M\\"), datetime.strptime(end, \\"%H:%M\\")) for start, end in rentals] # Sort the rentals by end time rentals.sort(key=lambda x: x[1]) # Initialize variables to keep track of the maximum rentals max_non_overlapping_rentals = 0 last_end_time = datetime.strptime(\\"00:00\\", \\"%H:%M\\") # Iterate over the sorted rentals for start, end in rentals: # If the start time of the current rental is greater than or equal to the end time of the last rental if start >= last_end_time: # Increment the count of non-overlapping rentals max_non_overlapping_rentals += 1 # Update the end time of the last rental last_end_time = end return max_non_overlapping_rentals"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has an associated cost. Your task is to find the minimum cost to visit every node at least once, starting and ending at the same node. You can perform the following operations on the graph: - Traverse each edge exactly once. - Repeat some nodes if necessary. -----Input----- The first line contains two integers n and m (2 le n le 50, 1 le m le frac{n(n-1)}{2}) — the number of nodes and edges in the graph respectively. The next m lines each contain three integers u, v, and w (1 le u, v le n, u neq v, 1 le w le 1000) — indicating there is an undirected edge between node u and node v with cost w. -----Output----- Output the minimum cost to visit every node at least once, starting and ending at the same node. If it is impossible, output -1. -----Examples----- Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output 80 Input 3 3 1 2 10 1 3 15 2 3 20 Output 45 Input 3 1 1 2 10 Output -1 -----Note----- In the first test case, the minimum cost to visit all nodes starting and ending at node 1 is 80, and the path can be 1 rightarrow 2 rightarrow 4 rightarrow 3 rightarrow 1. In the second test case, the minimum cost to visit all nodes starting and ending at node 1 is 45, and the path can be 1 rightarrow 3 rightarrow 2 rightarrow 1.","solution":"import itertools def travel_cost(graph, path): cost = 0 for i in range(len(path) - 1): u, v = path[i], path[i+1] if v in graph[u]: cost += graph[u][v] else: return float(\'inf\') return cost def find_min_cost_to_visit_all_nodes(n, m, edges): if m < n - 1: return -1 # If there are fewer than n-1 edges, it\'s impossible to form a connected graph graph = {i: {} for i in range(1, n + 1)} for u, v, w in edges: graph[u][v] = w graph[v][u] = w # Get all nodes nodes = list(graph.keys()) min_cost = float(\'inf\') for perm in itertools.permutations(nodes[1:]): # Fix node 1 as start point path = [nodes[0]] + list(perm) + [nodes[0]] cost = travel_cost(graph, path) min_cost = min(min_cost, cost) return min_cost if min_cost != float(\'inf\') else -1"},{"question":"A company is holding a competition to identify unique patterns in binary trees. Each pattern is defined as a sequence of nodes visited in an in-order traversal. You are given an integer N which represents the number of nodes in a binary tree. Each node is uniquely identified by an integer between 1 and N. Your task is to construct a binary tree and output its in-order traversal sequence. Additionally, you need to ensure that the sequence follows these rules: 1. The sequence should form a palindrome. 2. No integer is included more than once in the sequence. Help the company by generating a valid binary tree that meets the given constraints. -----Input----- - The first line contains an integer T denoting the number of test cases. - Each of the next T lines contains a single integer N. -----Output----- - For each test case, output N space-separated integers representing the in-order traversal of the binary tree. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 -----Sample Input----- 3 1 3 5 -----Sample Output----- 1 2 1 2 3 2 1 2 3 -----Explanation----- In the first test case, there\'s only one node, so the in-order traversal is trivial. In the second test case, the sequence is 2 1 2, which is a palindrome. In the third test case, the sequence is 3 2 1 2 3, which is also a palindrome. Note: For each test case with even N, it may not be possible to generate a valid palindrome sequence. The output is determined only for odd N where palindrome sequences are feasible.","solution":"def generate_palindromic_sequence(N): Generate a palindrome sequence using integers from 1 to N if N is odd. If N is even, return an empty list as palindrome sequence is not possible. if N % 2 == 0: return [] sequence = list(range(1, N//2 + 2)) sequence += sequence[-2::-1] # Mirroring the first part to make it a palindrome return sequence def process_test_cases(T, cases): Process multiple test cases. results = [] for n in cases: results.append(generate_palindromic_sequence(n)) return results"},{"question":"You are given a string consisting of lowercase English letters. You are allowed to perform at most one move, where you can remove any one character from the string. Your task is to determine whether it is possible to rearrange the remaining characters of the string to form a palindrome after this move. A string is a palindrome if it reads the same forwards and backwards. Write a function `canFormPalindromeAfterOneRemoval` to perform this task. Input: A string `s` containing only lowercase English letters (1 ≤ |s| ≤ 10^5). Output: Return \\"YES\\" if it is possible to rearrange the remaining characters to form a palindrome after removing one character, otherwise return \\"NO\\". Example: Input: baca Output: YES Explanation: After removing \'b\', the remaining characters \\"aca\\" can be rearranged to form the palindrome \\"aca\\".","solution":"from collections import Counter def canFormPalindromeAfterOneRemoval(s): Determine if it is possible to rearrange the string to form a palindrome after removing one character. # Count the frequency of each character in the string. freq = Counter(s) # Count how many characters have an odd frequency odd_freq_count = sum(1 for count in freq.values() if count % 2 != 0) # If more than two characters have an odd frequency, it\'s not possible to form a palindrome if odd_freq_count > 2: return \\"NO\\" return \\"YES\\""},{"question":"Implement a Custom Hash Map Implement a hash map from scratch, with support for the following operations: insertion, deletion, lookup, and update. You should use separate chaining to handle collisions. Preloaded A class `ListNode` is provided to you which will be useful for constructing a linked list within each bucket: ```python class ListNode: def __init__(self, key=None, value=None, next=None): self.key = key self.value = value self.next = next ``` Task Create a class `MyHashMap` that supports the following methods: - `put(key, value)`: Insert the key-value pair into the hash map. If the key already exists, update its value. - `get(key)`: Return the value associated with the key. If the key does not exist, return `-1`. - `remove(key)`: Remove the key-value pair from the hash map. If the key does not exist, do nothing. The hash map should be initialized with a fixed number of buckets (e.g., `1000`). Within each bucket, use a linked list to manage collisions. You can assume that the input keys are non-negative integers. # Example ```python # Create a new hash map hash_map = MyHashMap() # Insert a few key-value pairs hash_map.put(1, 10) hash_map.put(2, 20) hash_map.put(3, 30) # Retrieve values assert hash_map.get(1) == 10 assert hash_map.get(2) == 20 assert hash_map.get(10) == -1 # Key does not exist # Update a value hash_map.put(2, 25) assert hash_map.get(2) == 25 # Remove a key hash_map.remove(2) assert hash_map.get(2) == -1 # Key has been removed ``` # Constraints - You should ensure that your solution offers average-case O(1) time complexity for insertion, deletion, and lookup operations. - Python’s built-in hash functions or libraries are not allowed for this task; you must implement the hash map logic yourself.","solution":"class ListNode: def __init__(self, key=None, value=None, next=None): self.key = key self.value = value self.next = next class MyHashMap: def __init__(self): self.size = 1000 self.buckets = [None] * self.size def hash(self, key: int) -> int: return key % self.size def put(self, key: int, value: int) -> None: index = self.hash(key) if self.buckets[index] is None: self.buckets[index] = ListNode(key, value) else: current = self.buckets[index] while current: if current.key == key: current.value = value return if current.next is None: break current = current.next current.next = ListNode(key, value) def get(self, key: int) -> int: index = self.hash(key) current = self.buckets[index] while current: if current.key == key: return current.value current = current.next return -1 def remove(self, key: int) -> None: index = self.hash(key) current = self.buckets[index] if not current: return if current.key == key: self.buckets[index] = current.next return prev = current current = current.next while current: if current.key == key: prev.next = current.next return prev = current current = current.next"},{"question":"Joseph has n numbers arranged in a circular manner, and he wants to find the maximum possible distance between any two numbers. The distance between numbers a and b in the given sequence is defined as the number of positions between them moving clockwise, including both a and b. Consider the list of numbers to be 1 to n, positioned in a circle such that 1 is followed by 2, followed by 3, and so on, with n being followed again by 1. Given the total number of numbers, n, your task is to determine the maximum possible distance between any two numbers when arranged in a circular sequence. -----Input----- The first line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of numbers. -----Output----- Output a single integer, the maximum distance between any two numbers in a circular arrangement of n numbers. -----Examples----- Input 5 Output 3 Input 7 Output 4 -----Note----- In the first sample, the numbers arranged in a circle will result in maximum distance being 3 as any two diametrically opposite numbers (1 and 4, 2 and 5, etc.) are at a maximum distance. The same rule applies in the second example, where the maximum distance comes out to be 4 for 7 numbers arranged in a circle.","solution":"def maximum_distance_in_circle(n): Returns the maximum possible distance between any two numbers when arranged in a circular sequence of n numbers. return (n + 1) // 2"},{"question":"A tree has been planted in my garden. It keeps growing every day! # What is its height after n days? Rules * The tree doubles its height every even day. * The tree increases by 1 meter every odd day. Goal Calculate the height of the tree after a given number of days. Example * Input: ```n = 3``` * Output: ```6``` * Input: ```n = 6``` * Output: ```30``` ^ Note: Consider the initial height of the tree to be 1 meter. Only positive values of n will be passed as input.","solution":"def tree_height_after_n_days(n): Returns the height of the tree after n days. The initial height of the tree is 1 meter. :param n: int, number of days :return: int, height of the tree after n days height = 1 # initial height for day in range(1, n + 1): if day % 2 == 0: # even day, tree doubles its height height *= 2 else: # odd day, tree increases by 1 meter height += 1 return height"},{"question":"The task is to determine the largest possible contiguous subarray sum of a given array of integers. The subarray can contain both positive and negative numbers. -----Input----- The first line contains an integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^4 le a_i le 10^4) — the elements of the array. -----Output----- Print an integer representing the largest possible sum of a contiguous subarray. -----Examples----- Input 5 1 -2 3 -1 2 Output 4 Input 4 -1 -2 -3 -4 Output -1 -----Note----- In the first sample input, the largest possible sum of a contiguous subarray is 4 which can be obtained by the subarray [3, -1, 2]. In the second sample input, the largest possible sum of a contiguous subarray is -1 as all elements are negative and the least negative number is -1.","solution":"def max_subarray_sum(arr): Returns the largest possible sum of a contiguous subarray. n = len(arr) max_current = max_global = arr[0] for i in range(1, n): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of integers and a target value. Determine if there are any two distinct numbers in the array that add up to the target value. If such a pair exists, return their indices as a tuple (index1, index2). If no such pair exists, return (-1, -1). Input Format You are given a function, ```python def find_pair(nums, target): ``` - `nums`: List of integers - `target`: Integer Constraints * 2 leq len(nums) leq 10^3 * -10^9 leq nums[i] leq 10^9 * -10^9 leq target leq 10^9 Output Format Return a tuple of two integers, representing the indices of the two numbers adding up to the target value, or (-1, -1) if no such pair exists. Sample Input ```python nums = [2, 7, 11, 15] target = 9 ``` Sample Output ```python (0, 1) ```","solution":"def find_pair(nums, target): Returns the indices of the two numbers in nums that add up to the target. If no such pair exists, returns (-1, -1). seen = {} for i, num in enumerate(nums): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return (-1, -1)"},{"question":"Byteairlines Ltd. operates in Byteland and needs an optimal way to schedule their flights. The city has n airports, each represented by a point in the 2D plane, and the coordinate of the i-th airport is (x_i, y_i). The dropoff of passengers is at a central hub located at coordinate (X, Y) in the plane. Byteairlines wants to minimize the maximum time among all the travel times for flights from the airports to the central hub. Each plane can travel at a constant speed of 1 unit distance per second. Your task is to determine the minimum time needed for all the planes to reach the central hub, assuming each plane travels the straight-line distance from its airport to the hub. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of airports. Each of the next n lines contains two integers x_i and y_i (−10^9 ≤ x_i, y_i ≤ 10^9) — the coordinates of the airports. The last line contains two integers X and Y (−10^9 ≤ X, Y ≤ 10^9) — the coordinates of the central hub. -----Output----- Print the minimum time (in seconds) needed for all the planes to reach the central hub. Your answer will be considered correct if its absolute or relative error is not greater than 10^{ - 6}. Formally, let your answer be a, while jury\'s answer be b. Your answer will be considered correct if frac{|a - b|}{operatorname{max}(1, b)} leq 10^{-6} holds. -----Examples----- Input 3 1 1 2 2 3 3 0 0 Output 4.242640687119 Input 5 0 0 0 1 1 0 1 1 2 2 1 1 Output 1.414213562373 -----Note----- In the first sample, all planes travel the straight-line distance from their respective airports to the central hub located at (0, 0). The longest travel time is 4.242640687119 seconds, for the plane at (3, 3). In the second sample, the centralized hub is at (1, 1). The longest travel time is 1.414213562373 seconds, for the plane at (2, 2).","solution":"import math def min_travel_time_to_hub(n, airports, hub_coordinates): X, Y = hub_coordinates max_time = 0 for x_i, y_i in airports: distance = math.sqrt((x_i - X)**2 + (y_i - Y)**2) if distance > max_time: max_time = distance return max_time"},{"question":"Carmen loves playing with strings, and she recently learned about palindromes. A palindrome is a string that reads the same forwards and backwards. Carmen wants to write a function that can determine, for a given string, the length of the longest palindromic substring. For example, in the string \\"babad\\", the longest palindromic substring is \\"bab\\" (or \\"aba\\" since they are the same length). Carmen wants to generalize this into a function that can be called multiple times efficiently. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000), which denotes the string for which Carmen wants to find the longest palindromic substring. Output For each test case, print a single integer — the length of the longest palindromic substring for the given string. Example Input 3 babad cbbd aabcdefedcbaaa Output 3 2 13","solution":"def longest_palindromic_substring_length(s): Returns the length of the longest palindromic substring for a given string s. max_length = 1 n = len(s) # Table to store results of sub-problems dp = [[False] * n for _ in range(n)] # All substrings of length 1 are palindromes for i in range(n): dp[i][0] = True # Check for sub-string of length 2. start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][1] = True start = i max_length = 2 # Check for lengths greater than 2. for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][length - 3] and s[i] == s[j]: dp[i][length - 1] = True if length > max_length: start = i max_length = length return max_length def longest_palindromic_substrings(t, strings): results = [] for s in strings: results.append(longest_palindromic_substring_length(s)) return results"},{"question":"In a software development company, developers often have to debug code and understand the flow of logic. One common task is to analyze and manipulate lists of integers based on certain criteria. Your task is to help a developer understand a given list by performing a specific operation that helps in identifying important data points. You are given a list of integers and a fixed integer k. You need to perform the following operation: find the k largest numbers in the list, add them together, and return the resulting sum. If there are fewer than k elements in the list, return the sum of all elements. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of elements in the list. The second line contains n integers ai ( - 104 ≤ ai ≤ 104) — the list itself. The third line contains an integer k (1 ≤ k ≤ 105) — the number of largest elements to find. Output Print a single integer — the sum of the k largest numbers in the list. Examples Input 5 2 -4 3 7 1 3 Output 12 Input 3 -2 -1 0 2 Output -1 Input 4 10 20 30 40 5 Output 100","solution":"def sum_k_largest_elements(n, numbers, k): Returns the sum of the k largest numbers in the list. If there are fewer than k elements in the list, returns the sum of all elements. if n <= 0 or k <= 0: return 0 sorted_numbers = sorted(numbers, reverse=True) return sum(sorted_numbers[:min(k, n)])"},{"question":"Lara is a passionate gardener who loves to decorate her garden with various types of beautiful plants. Her garden has N different sections, and there are M paths connecting these sections. Each path has a certain aesthetic value that represents how beautiful that path makes the garden look when taken. Some paths are uni-directional, while others are bi-directional. Lara likes to walk in her garden, starting from a particular section, and explore the garden by walking along the paths. She finds it calming and wants to maximize her experience by following the most beautiful paths. However, each path she takes reduces the overall beauty value of that path by a certain depreciation factor which is given for each path. Your task is to help Lara find the maximum total aesthetic value she can enjoy by walking from one section to another. -----Input----- The first line contains two integers 1 le N le 200 and 1 le M le 10^4, the number of sections and paths respectively. Then follow M lines, each describing a path with five numbers 0 le a, b < N, 0 le v le 1000, 0 le d le 1, and an integer 1 or 2. Here, a and b are the numbers of the sections the path connects, v is the initial aesthetic value of the path, d is the depreciation factor that reduces the aesthetic value each time the path is taken, and the final integer indicates if the path is uni-directional (1) or bi-directional (2). Finally, the last line contains two integers s and t which represent the starting section and the ending section respectively, 0 le s, t < N. -----Output----- Output should be a single floating point number representing the maximum aesthetic value Lara can enjoy while walking from section s to section t following any paths optimally. If it is impossible to reach section t from section s, output 0. Your answer is considered correct if the relative or absolute error is at most 10^{-6}. -----Examples----- Sample Input: 3 3 0 1 10 0.1 2 1 2 20 0.2 1 0 2 15 0.05 1 0 2 Sample Output: 15.000000","solution":"import heapq def maximum_aesthetic_value(N, M, paths, s, t): graph = [[] for _ in range(N)] for a, b, v, d, path_type in paths: if path_type == 1: graph[a].append((b, v, d)) elif path_type == 2: graph[a].append((b, v, d)) graph[b].append((a, v, d)) # Dijkstra-like approach with max-heap pq = [] heapq.heappush(pq, (-0, s, 0)) # (negative beauty value, current node, path taken count) max_value = {i: float(\'-inf\') for i in range(N)} max_value[s] = 0 while pq: current_value, node, count = heapq.heappop(pq) current_value = -current_value if node == t: return current_value for neighbor, value, depreciation in graph[node]: new_value = current_value + value * (1 - depreciation) ** count if new_value > max_value[neighbor]: max_value[neighbor] = new_value heapq.heappush(pq, (-new_value, neighbor, count + 1)) return 0 # Example usage: # N = 3 # M = 3 # paths = [ # (0, 1, 10, 0.1, 2), # (1, 2, 20, 0.2, 1), # (0, 2, 15, 0.05, 1) # ] # s = 0 # t = 2 # print(maximum_aesthetic_value(N, M, paths, s, t)) # Output: 15.000000"},{"question":"Task Devise a function `pair_and_multiply(arr, S)` that receives a list of positive integers `arr` and a positive integer `S`, and returns a list of all unique pairs of numbers from `arr` that multiply to `S`. Each pair should be a tuple of two integers, sorted in ascending order, and the result should be a list of tuples sorted in ascending order (lexicographically). For example, given the array `[1, 2, 3, 4, 6]` and `S = 6`, valid pairs that multiply to `S` are `(1, 6)` and `(2, 3)`. Therefore, the function should return `[(1, 6), (2, 3)]`. Examples ```python pair_and_multiply([1, 2, 3, 4, 6], 6) => [(1, 6), (2, 3)] pair_and_multiply([1, 2, 3, 4], 7) => [] pair_and_multiply([5, 10, 2, 20, 4], 20) => [(2, 10), (4, 5)] pair_and_multiply([1, 1, 1, 1], 1) => [(1, 1)] ``` Notes: 1. The input list `arr` is not guaranteed to be sorted. 2. Each pair (tuple) should only appear once in the output list. 3. A pair `(a, b)` is considered the same as `(b, a)`, so include only one of them. 4. Ensure the pairs in each tuple are in ascending order. 5. The final list of pairs should be in ascending order as well. 6. If there are no pairs that satisfy the condition, return an empty list. 7. The array\'s length can range up to 10000 elements, and values can go up to 100000.","solution":"def pair_and_multiply(arr, S): Returns a list of unique pairs of numbers from arr that multiply to S. Each pair is a tuple of two integers, sorted in ascending order. The result is a list of unique tuples sorted in ascending order (lexicographically). pairs = set() seen = set() for num in arr: if num == 0: continue if S % num == 0: complement = S // num if complement in seen: pair = tuple(sorted([num, complement])) pairs.add(pair) seen.add(num) return sorted(pairs)"},{"question":"A friend of yours is a world-class mathematician who loves solving complex mathematical challenges. Recently, he encountered a problem in converting an array of integers into a magic square. A magic square is a square matrix in which the sum of the numbers in each row, each column, and both main diagonals are the same. To help your friend, you need to write a program that takes an array of integers and rearranges them (if possible) into a magic square. If it is not possible to form a magic square with the given array, the program should indicate so. A traditional n x n magic square will have the sum of each row, column, and diagonal equal to the “magic constant” which is given by the formula: M = n(n^2 + 1) / 2. Your task is to check if the provided array can be rearranged into an n x n magic square and if so, print the magic square, otherwise print \\"No magic square can be formed”. Input The input consists of: - An integer `n` which indicates the size of the magic square. - An array of `n^2` integers. The input data will be provided such that `1 ≤ n ≤ 10` and all integers in the array are positive integers less than or equal to 100. Output If the array can be rearranged to form a magic square, output `n` lines each containing `n` integers representing the magic square. If it is not possible, output a single line containing \\"No magic square can be formed\\". Example Input 3 8 1 6 3 5 7 4 9 2 Output 8 1 6 3 5 7 4 9 2 Input 3 7 12 1 14 2 9 4 8 11 Output No magic square can be formed Explanation In the first example, the array can be rearranged to form a 3x3 magic square where each row, column, and diagonal sums to the magic constant 15. In the second example, it is impossible to rearrange the array to form a magic square as no such arrangement exists where all rows, columns, and diagonals sum to the same value.","solution":"def is_magic_square(square, n): # Calculate the magic constant magic_constant = n * (n * n + 1) // 2 # Check rows for row in square: if sum(row) != magic_constant: return False # Check columns for col in range(n): if sum(square[row][col] for row in range(n)) != magic_constant: return False # Check diagonals if sum(square[i][i] for i in range(n)) != magic_constant: return False if sum(square[i][n - 1 - i] for i in range(n)) != magic_constant: return False return True def to_magic_square(arr, n): from itertools import permutations if len(arr) != n * n: return \\"No magic square can be formed\\" for perm in permutations(arr): square = [list(perm[i * n: (i + 1) * n]) for i in range(n)] if is_magic_square(square, n): return square return \\"No magic square can be formed\\" def format_output(square): if isinstance(square, str): return square else: return \'n\'.join(\' \'.join(map(str, row)) for row in square) def solve_magic_square_problem(n, arr): square = to_magic_square(arr, n) return format_output(square)"},{"question":"The town of Algoria has a grid-like street layout. Each intersection in the town can be described by a pair of coordinates (x, y). Some intersections are specially marked as \\"important.\\" Given the coordinates of multiple \\"important\\" intersections, your task is to determine if these intersections form a rectangle with sides parallel to the coordinate axes. If they do, output \\"YES\\"; otherwise, output \\"NO\\". -----Input:----- - First line will contain T, the number of testcases. Then the testcases follow. - Each testcase starts with an integer N denoting the number of important intersections. - The next N lines contain two integers each, x and y, denoting the coordinates of an important intersection. -----Output:----- For each testcase, output \\"YES\\" if the important intersections form a rectangle, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 10^3 - 1 leq N leq 10^4 - 0 leq x, y leq 10^5 -----Sample Input:----- 2 4 1 2 1 4 3 2 3 4 4 0 0 1 1 2 2 3 3 -----Sample Output:----- YES NO","solution":"def check_if_rectangle(n, points): if n != 4: return \\"NO\\" x_coords = set() y_coords = set() for x, y in points: x_coords.add(x) y_coords.add(y) if len(x_coords) == 2 and len(y_coords) == 2: return \\"YES\\" else: return \\"NO\\" def is_rectangle(test_cases): results = [] for n, points in test_cases: result = check_if_rectangle(n, points) results.append(result) return results"},{"question":"During a city festival, an enormous line of people has gathered, waiting to participate in a highly anticipated game. To keep the action flowing smoothly, the organizers have set up a queue system where each person in the queue has a patience level, which dictates how many minutes they are willing to wait before leaving. However, the game has certain slots opening up periodically. Each slot can be utilized by one person from the front of the queue. Your task is to simulate the process of people leaving the queue if their patience runs out before they get a chance to play the game. You will determine how many people are left in the queue after processing all the slots. # The rules are: 1. The queue is represented by an array where each element denotes the patience level (in minutes) of a person. 2. The slots array represents the indices at which a new slot becomes available. 3. Every minute, the patience level of each person in the queue decreases by 1. When a slot becomes available, the person at the front of the queue (if any) will get the slot and leave the queue immediately. # Input - The first line contains an integer `n`, the number of people in the queue (1 ≤ n ≤ 1000). - The second line contains `n` space-separated integers where the i-th integer represents the patience level of the i-th person in the queue (1 ≤ patience level ≤ 1000). - The third line contains an integer `m`, the number of slots (1 ≤ m ≤ 1000). - The fourth line contains `m` space-separated integers where the i-th integer represents the minute at which a slot will be available (1 ≤ minute ≤ 1000). The slots are in ascending order of time. # Output Print a single integer, the number of people left in the queue after processing all slot openings. # Example Input ``` 4 5 3 6 2 5 1 2 4 5 6 ``` Output ``` 2 ``` Explanation - Minute 1: A slot opens, person with patience 5 leaves. Queue: [3, 6, 2] - Minute 2: A slot opens, person with patience 3 leaves. Queue: [6, 2] - Minute 3: Queue: [5, 1] - Minute 4: A slot opens, person with patience 5 leaves. Queue: [1] - Minute 5: A slot opens, person with patience 1 leaves. Queue: [] - Minute 6: No one left to leave. After processing all slot openings, no one remains in the queue. So the output is `0`.","solution":"def remaining_people_in_queue(n, patience_levels, m, slot_times): Determines the number of people left in the queue after all slot openings are processed. Parameters: n (int): Number of people in the queue. patience_levels (list): List of patience levels of the people in the queue. m (int): Number of slots. slot_times (list): List of times at which slots open. Returns: int: Number of people left in the queue. queue = patience_levels[:] current_minute = 0 slot_index = 0 while slot_index < m and queue: slot_time = slot_times[slot_index] while current_minute < slot_time: current_minute += 1 queue = [p - 1 for p in queue if p - 1 > 0] if queue: # If there\'s someone in queue at slot time, they get the slot queue.pop(0) slot_index += 1 return len(queue)"},{"question":"A logistics company needs to optimize the process of loading boxes onto trucks. You are given a list of boxes, where each box has a weight. Each truck can carry boxes up to a certain maximum weight limit. The objective is to determine the minimum number of trucks required to load all the boxes, without exceeding the weight limit of any truck. Write a function that takes in two parameters: a list of integers `boxes` representing the weights of the boxes, and an integer `truck_limit` representing the maximum weight limit of each truck. Return the minimum number of trucks required to load all the boxes. Example 1: Input: boxes = [10, 20, 30, 40, 50, 60], truck_limit = 100 Output: 3 Explanation: One possible solution is to use the following three trucks: - Truck 1: [10, 30, 60] - Truck 2: [20, 50] - Truck 3: [40] Example 2: Input: boxes = [9, 8, 2, 7, 5, 4], truck_limit = 10 Output: 4 Explanation: One possible solution is to use the following four trucks: - Truck 1: [9] - Truck 2: [8] - Truck 3: [7, 2] - Truck 4: [5, 4] Constraints: 1 <= boxes.length <= 10^4 1 <= boxes[i] <= 10^4 1 <= truck_limit <= 10^4","solution":"def min_trucks_required(boxes, truck_limit): boxes.sort(reverse=True) trucks = 0 while boxes: trucks += 1 current_weight = 0 to_remove = [] for i in range(len(boxes)): if current_weight + boxes[i] <= truck_limit: current_weight += boxes[i] to_remove.append(i) for i in reversed(to_remove): del boxes[i] return trucks"},{"question":"Princess Celestia owns a collection of magic mirrors. These mirrors are capable of infinitely reflecting light which forms a unique pattern. Each mirror has a distinct reflectivity level that diminishes the light energy by a certain percentage with every reflection. Given enough time, light energy in front of any mirror will eventually stabilize at a specific minimum value. Given an array of integers representing the initial light energy in front of each mirror and another array of percentages representing reflectivity of each mirror, your task is to determine the stabilized light energy in front of each mirror. Reflectivity is defined as follows: if a mirror has a reflectivity of 50%, upon each reflection, the light energy in front of it is reduced by 50%. The final stabilized energy can be calculated by using the formula for the sum of an infinite geometric series. Input The first line contains a single integer n (1 ≤ n ≤ 1000), the number of mirrors. The second line contains n integers e[i] (1 ≤ e[i] ≤ 109), the initial light energy in front of each mirror. The third line contains n integers r[i] (0 ≤ r[i] < 100), the reflectivity percentages of each mirror. Output Output n lines, each containing a single integer representing the stabilized light energy in front of the corresponding mirror, rounded to the nearest integer. Examples Input 3 100 200 300 50 75 25 Output 200 800 400","solution":"def stabilized_light_energy(n, energies, reflectivities): stabilized_energies = [] for i in range(n): e = energies[i] r = reflectivities[i] reflectivity_ratio = r / 100.0 stabilized_energy = e / (1 - reflectivity_ratio) stabilized_energies.append(round(stabilized_energy)) return stabilized_energies"},{"question":"A city has a grid of MxN blocks. Residents can walk along the roads that run parallel to the grid lines. The city wants to analyze the optimal routes for residents walking from the top-left corner (0,0) to the bottom-right corner (M-1,N-1). However, some blocks on the grid have obstacles and can\'t be traversed. You need to write a program that can take the city grid as input and determine the number of unique paths from the top-left corner to the bottom-right corner, avoiding the blocks with obstacles. ------ Input ------ The first line contains two integers M and N, which are the dimensions of the grid. The next M lines each contain N characters, representing the grid where \'.\' denotes an empty block and \'#\' denotes an obstacle. ------ Output ------ Print the number of unique paths from the top-left corner to the bottom-right corner. If there is no path, return 0. ------ Constraints ------ 1 ≤ M, N ≤ 100 The top-left corner (0,0) and the bottom-right corner (M-1,N-1) are always empty (\'.\'). ----- Sample Input 1 ------ 3 3 ... .#. ... ----- Sample Output 1 ------ 2 ----- Sample Input 2 ------ 3 3 ..# .#. ... ----- Sample Output 2 ------ 1 ----- Sample Input 3 ------ 3 3 #.# .#. #.. ----- Sample Output 3 ------ 0 ----- Explanation 1 ------ For the first sample, there are two paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from top-left to bottom-right corner of the grid avoiding obstacles represented as \'#\'. M = len(grid) N = len(grid[0]) # If starting or ending point is an obstacle, return 0 if grid[0][0] == \'#\' or grid[M-1][N-1] == \'#\': return 0 dp = [[0 for _ in range(N)] for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[M-1][N-1]"},{"question":"Log Processing System You are in charge of developing a log processing system for a server. The logs record various events with timestamps, and your task is to generate a summary report based on the input logs. The format of each log entry is as follows: - The first part is the timestamp in the format `YYYY-MM-DD HH:MM:SS`. - The second part is the event description, which can be any string without newlines. Your system needs to generate a summary for each hour specifying the event counts. # Input: The input consists of multiple lines: 1. Each line contains a timestamp and an event description separated by a space, representing a log entry. 2. The input ends with a single line containing the string `END_OF_LOGS`. # Output: The output should list the summary of the event counts for each hour in the input, in chronological order. The format for each line should be: ``` YYYY-MM-DD HH: [Event Count] ``` # Example Input: ``` 2023-04-01 14:45:23 User login 2023-04-01 14:50:00 File downloaded 2023-04-01 15:01:12 User logout 2023-04-01 15:15:45 User login 2023-04-01 15:45:23 File uploaded 2023-04-01 16:00:00 Server reboot END_OF_LOGS ``` # Example Output: ``` 2023-04-01 14: 2 2023-04-01 15: 3 2023-04-01 16: 1 ``` # Constraints: - The timestamp will always be in the `YYYY-MM-DD HH:MM:SS` format. - The event description will contain alphanumeric characters, spaces, and punctuation marks, but will never contain newlines. - The logs are provided in chronological order. - The log entries for each hour will be considered as a unique event count. - The summary format must include the year, month, day, and hour, followed by the event count.","solution":"def log_summary(logs): Processes the input logs and returns a summary report of event counts per hour. Parameters: logs (list): List of log entries as strings. Returns: list: List of summary strings for each hour. from collections import defaultdict import re event_counts = defaultdict(int) for log in logs: if log == \\"END_OF_LOGS\\": break match = re.match(r\\"(d{4}-d{2}-d{2} d{2}):d{2}:d{2} .+\\", log) if match: hour = match.group(1) event_counts[hour] += 1 summary_report = [f\\"{hour}: {count}\\" for hour, count in sorted(event_counts.items())] return summary_report"},{"question":"A research laboratory is conducting an experiment involving various chemical reactions. Each reaction yields a unique chemical compound, and some compounds can react with others to form new compounds. Given the record of reactions and an initial set of compounds available, determine the set of all possible compounds that can be produced. A reaction is represented as a tuple containing two compounds that react together to produce a third compound. A compound can only be produced if both reactant compounds are already available in the lab. -----Input----- The first line of the input contains two integers C and R, where 2 leq C leq 100 represents the number of distinct compounds labeled from 1 to C, and 1 leq R leq 200 represents the number of reactions. The second line contains a list of integers representing the initial set of available compounds. The next R lines each contain three integers A, B, and D, indicating that compounds A and B react together to yield compound D. -----Output----- Output all possible compounds that can be produced, including the initially available ones, one integer per line in ascending order. -----Examples----- Sample Input 1: 5 4 1 2 1 2 3 3 4 5 2 3 4 1 4 5 Sample Output 1: 1 2 3 4 5 Sample Input 2: 6 3 1 3 5 1 3 6 5 6 4 4 3 2 Sample Output 2: 1 2 3 4 5 6","solution":"def find_all_compounds(C, R, initial_compounds, reactions): from collections import defaultdict possible_compounds = set(initial_compounds) reactions_map = defaultdict(list) for A, B, D in reactions: reactions_map[(A, B)].append(D) reactions_map[(B, A)].append(D) changed = True while changed: changed = False new_compounds = set() for (A, B), result_list in reactions_map.items(): if A in possible_compounds and B in possible_compounds: for result in result_list: if result not in possible_compounds: new_compounds.add(result) changed = True possible_compounds.update(new_compounds) return sorted(possible_compounds)"},{"question":"In a certain online course, students are required to complete a series of assignments. After all assignments are graded, the students who participated can be grouped into three categories: 1. **Category A:** Students who did not submit any assignments. 2. **Category B:** Students who submitted assignments but did not pass any of them. They receive a participation score in the range 40 - 50. 3. **Category C:** Students who passed at least one assignment. They receive a participation score strictly greater than 50. Given the total number of students enrolled in the course (N), the number of students who fall into **Category A** (A), and the number of students who fall into **Category B** (B), calculate and print the number of students who received a participation score and the number of students who received a score strictly greater than 50. ------ Input Format ------ - A single line containing three integers N, A, and B - representing the total number of students, students who did not submit any assignments, and students who submitted assignments but did not pass any, respectively. ------ Output Format ------ Print two integers separated by a space - the number of students who received a participation score and the number of students who received a score strictly greater than 50. ------ Constraints ------ 2 leq N leq 1000 1 leq A leq 1000 1 leq B leq 1000 A + B leq N ----- Sample Input 1 ------ 20 5 8 ----- Sample Output 1 ------ 15 7 ----- Explanation 1 ------ There are 20 students in total. Out of these, 5 students did not submit any assignments, leaving 20 - 5 = 15 students who receive a participation score (first integer). Among these 15 students, 8 did not pass any assignments, therefore 15 - 8 = 7 students received a score strictly greater than 50 (second integer). ----- Sample Input 2 ------ 50 10 15 ----- Sample Output 2 ------ 40 25 ----- Explanation 2 ------ There are 50 students in total. Out of these, 10 students did not submit any assignments, leaving 50 - 10 = 40 students who receive a participation score (first integer). Among these 40 students, 15 did not pass any assignments, therefore 40 - 15 = 25 students received a score strictly greater than 50 (second integer). ----- Sample Input 3 ------ 100 40 30 ----- Sample Output 3 ------ 60 30 ----- Explanation 3 ------ There are 100 students in total. Out of these, 40 students did not submit any assignments, leaving 100 - 40 = 60 students who receive a participation score (first integer). Among these 60 students, 30 did not pass any assignments, therefore 60 - 30 = 30 students received a score strictly greater than 50 (second integer). ----- Sample Input 4 ------ 15 2 13 ----- Sample Output 4 ------ 13 0 ----- Explanation 4 ------ There are 15 students in total. Out of these, 2 students did not submit any assignments, leaving 15 - 2 = 13 students who receive a participation score (first integer). Among these 13 students, all 13 did not pass any assignments, therefore 13 - 13 = 0 students received a score strictly greater than 50 (second integer).","solution":"def participation_scores(total_students, no_submission, no_pass): Calculates the number of students who received a participation score and the number of students who received a score strictly greater than 50. Parameters: total_students (int): Total number of students enrolled in the course. no_submission (int): Number of students who did not submit any assignments. no_pass (int): Number of students who submitted assignments but did not pass any. Returns: tuple: A tuple containing two integers - the number of students who received a participation score and the number of students who received a score strictly greater than 50. received_scores = total_students - no_submission strictly_greater_than_50 = received_scores - no_pass return received_scores, strictly_greater_than_50"},{"question":"You are given a sequence of integers and a list of queries. For each query, you need to find the maximum value in a specific subarray of the sequence. -----Constraints----- - 1 leq N leq 10^5 - 1 leq Q leq 10^4 - 1 leq a_i leq 10^9 - 1 leq l_j leq r_j leq N - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N Q a_1 a_2 ... a_N l_1 r_1 l_2 r_2 : l_Q r_Q -----Output----- For each query, print the maximum value in the subarray from a[l_j] to a[r_j] (1-indexed). -----Sample Input----- 5 3 1 3 2 5 4 1 3 2 4 1 5 -----Sample Output----- 3 5 5 - For the first query, the subarray is [1, 3, 2], and the maximum value is 3. - For the second query, the subarray is [3, 2, 5], and the maximum value is 5. - For the third query, the subarray is [1, 3, 2, 5, 4], and the maximum value is 5.","solution":"def maximum_in_subarrays(n, q, sequence, queries): Returns the maximum value in the specified subarrays for each query. Parameters: n (int): The length of the sequence q (int): The number of queries sequence (list of int): The sequence of integers queries (list of tuples): Each tuple contains (l, r), the indices (1-indexed) of the subarray for a query Returns: list: A list of maximum values for each query results = [] for l, r in queries: # Convert 1-indexed to 0-indexed subarray = sequence[l-1:r] results.append(max(subarray)) return results"},{"question":"Write a function `findUniqueElements` that takes two lists of integers, `listA` and `listB`, and returns a sorted list of the elements that are present in one list but not the other. For example, for `findUniqueElements([1, 2, 3, 4], [3, 4, 5, 6])`, the result should be: ``` [1, 2, 5, 6] ``` which represents the elements that are in either `listA` or `listB` but not in both. You should consider edge cases such as: * Both lists are empty. * One of the lists is significantly longer than the other. * One of the lists is empty while the other is not.","solution":"def findUniqueElements(listA, listB): Returns a sorted list of elements that are present in one list but not the other. setA = set(listA) setB = set(listB) unique_elements = setA.symmetric_difference(setB) return sorted(unique_elements)"},{"question":"You are given two arrays `A` and `B`, both containing integers. Your task is to determine if there exists a pair of elements, one from `A` and one from `B`, such that their sum is equal to a given integer `K`. Constraints - 1 ≤ |A|, |B| ≤ 10^5 - -10^9 ≤ A[i], B[i] ≤ 10^9 - -10^9 ≤ K ≤ 10^9 Input - The first line of input contains an integer K. - The second line contains a space-separated list of integers representing array A. - The third line contains a space-separated list of integers representing array B. Output Output \\"YES\\" if a pair exists whose sum is equal to K, and \\"NO\\" otherwise. Example Input: 10 1 2 3 4 5 5 6 7 8 9 Output: YES Explanation There are pairs (1, 9) and (2, 8) whose sum is equal to 10.","solution":"def pair_exists_with_sum(K, A, B): Determines if there exists a pair of elements, one from A and one from B, such that their sum is equal to K. Args: K: An integer, the target sum. A: A list of integers. B: A list of integers. Returns: \\"YES\\" if such a pair exists, otherwise \\"NO\\". required = set() for num in A: required.add(K - num) for num in B: if num in required: return \\"YES\\" return \\"NO\\""},{"question":"The goal is to filter a list of dictionaries containing student records, and extract records of students who scored above a certain threshold in physics. Each student record contains the following three fields: `name`, `math_score`, and `physics_score`. Concept Using Python\'s filter() function can help filter out data based on a condition. The function takes two parameters: a function and an iterable. The function is applied to each element in the iterable, and only the elements that return True are included in the final result. Let\'s say you are given a list of numbers, and you need to filter out only the even numbers. ```python numbers = [1, 2, 3, 4, 5] even_numbers = list(filter(lambda x: x % 2 == 0, numbers)) print(even_numbers) ``` Output: ``` [2, 4] ``` In this task, use a lambda function with filter() to achieve the desired filtering. Input Format The first line of input is an integer N, the number of students. Each of the next N lines contains a student\'s record in the format: name math_score physics_score The last line is an integer threshold, the minimum score a student must have in physics. Constraints 0leq Nleq100 0 leq text{math_score}, text{physics_score} leq 100 0 leq text{threshold} leq 100 Output Format A list of dictionaries, each dictionary representing a student record who meets the physics score threshold. The list should be printed on a single line. Sample Input ``` 3 John 50 80 Emily 90 95 Bob 60 70 75 ``` Sample Output ``` [{\'name\': \'John\', \'math_score\': 50, \'physics_score\': 80}, {\'name\': \'Emily\', \'math_score\': 90, \'physics_score\': 95}] ``` Explanation There are 3 student records given. The physics score threshold is 75. The students who scored more than 75 in physics are John and Emily. So, their records are included in the output list.","solution":"def filter_students_by_physics_score(student_records, threshold): Filters students based on their physics score. Parameters: student_records (list of dict): List containing student records with fields \'name\', \'math_score\', and \'physics_score\' threshold (int): The physics score threshold Returns: list of dict: List of student records where the physics score is greater than the threshold filtered_students = list(filter(lambda student: student[\'physics_score\'] > threshold, student_records)) return filtered_students def parse_input(input_string): Parses the input string into student records and threshold. Parameters: input_string (str): The input string in the specified format Returns: tuple: A tuple containing the list of student records and the threshold input_lines = input_string.strip().split(\'n\') N = int(input_lines[0]) student_records = [] for i in range(1, N + 1): name, math_score, physics_score = input_lines[i].split() student_records.append({ \'name\': name, \'math_score\': int(math_score), \'physics_score\': int(physics_score) }) threshold = int(input_lines[N + 1]) return student_records, threshold"},{"question":"Sumit is a coding enthusiast who likes solving math puzzles during his free time. He recently came across an interesting problem involving prime numbers and now wants to create a program to solve it efficiently. The problem is about finding out the count of prime numbers in a given range [L, R]. Can you help Sumit by writing a program to find the number of primes in the specified range? Input The first line contains an integer T, denoting the number of test cases. Each of the next T lines contains two integers L and R, denoting the range [L, R]. Output For each test case, print the number of prime numbers in the given range. Constraints 1 <= T <= 10 1 <= L <= R <= 10^6 0 <= R - L <= 10^5 Example Input: 2 10 30 15 25 Output: 6 3 Explanation: In the first test case, the prime numbers between 10 and 30 are {11, 13, 17, 19, 23, 29}, so the count is 6. In the second test case, the prime numbers between 15 and 25 are {17, 19, 23}, so the count is 3.","solution":"def count_primes_in_range(L, R): # Function to generate all prime numbers up to max_n using Sieve of Eratosthenes def sieve(max_n): primes = [True] * (max_n + 1) primes[0] = primes[1] = False # 0 and 1 are not prime numbers p = 2 while p * p <= max_n: if primes[p]: for i in range(p * p, max_n + 1, p): primes[i] = False p += 1 return primes max_r = max(R) # since the maximum R will be the upper limit for Sieve primes = sieve(max_r) result = [] for l, r in zip(L, R): count = sum(1 for i in range(l, r + 1) if primes[i]) result.append(count) return result def count_primes_in_test_cases(test_cases): L, R = zip(*test_cases) return count_primes_in_range(L, R)"},{"question":"Problem description In a remote village, there is a unique tradition of naming newborns based on the letter counts of their parents\' names. Each name consists of lowercase English letters only. The rules for naming the baby are as follows: 1. Create a frequency map of each letter for both parents\' names. 2. Merge these two frequency maps to get a combined frequency map. 3. Create the baby\'s name by concatenating each letter in alphabetic order based on the combined frequency map. For example, if \'a\' appears 3 times, it should be in the baby\'s name as \\"aaa\\". Given two parent names, your task is to generate the baby\'s name using the above rules. Input The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line is the name of the first parent. - The second line is the name of the second parent. Output For each test case, output a single line containing the baby\'s name based on the given rules. Constraints 1 ≤ T ≤ 100 1 ≤ Length of each name ≤ 100 Example Input: 2 amy john bob alice Output: ahjmnoy abbceilo Explanation For the first test case, the frequency maps for \\"amy\\" and \\"john\\" are combined to get: \'a\': 1, \'h\': 1, \'j\': 1, \'m\': 1, \'n\': 1, \'o\': 1, \'y\': 1 Sorting these letters alphabetically and concatenating gives \\"ahjmnoy\\".","solution":"def combine_names(name1, name2): Combine the names of two parents to form the baby\'s name based on the unique tradition. from collections import Counter # Create frequency maps freq1 = Counter(name1) freq2 = Counter(name2) # Merge the frequency maps combined_freq = freq1 + freq2 # Create the baby\'s name from the combined frequency map baby_name = \'\'.join(char * combined_freq[char] for char in sorted(combined_freq)) return baby_name def process_test_cases(t, test_cases): results = [] for name1, name2 in test_cases: baby_name = combine_names(name1, name2) results.append(baby_name) return results"},{"question":"You are given two arrays A and B of sizes N and M respectively. The task is to find the count of all distinct elements in array B which are not present in array A. Example 1: Input: N = 6, M = 5 A = [1, 2, 3, 4, 5, 6] B = [3, 4, 5, 7, 8] Output: 2 Explanation: Elements 7 and 8 are present in B but not in A. Total distinct such elements are 2. Example 2: Input: N = 4, M = 4 A = [1, 2, 3, 4] B = [2, 3, 4, 5] Output: 1 Explanation: Element 5 is present in B but not in A. Total distinct such elements are 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countDistinctNotInA() which takes two integers N and M and two arrays A and B and returns the count of distinct elements in array B not present in array A. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(N) Constraints: 1 <= N, M <= 10^5 1 <= A[i], B[i] <= 10^6","solution":"def countDistinctNotInA(N, M, A, B): Returns the count of all distinct elements in array B which are not present in array A. :param N: size of array A :param M: size of array B :param A: list of integers representing array A :param B: list of integers representing array B :return: count of distinct elements in B not present in A set_A = set(A) set_B = set(B) # Elements in B but not in A distinct_elements_not_in_A = set_B - set_A return len(distinct_elements_not_in_A)"},{"question":"A company tracks its employees\' activities across various projects. Each employee can be assigned to multiple projects, and each project can have multiple employees. You are required to implement a system to manage these assignments and report on them. The system should support the following operations: * assign(e, p): Assign employee e to project p. * unassign(e, p): Remove the assignment of employee e from project p if it exists. * projects(e): Report the list of projects to which employee e is assigned. * employees(p): Report the list of employees assigned to project p. Note that an employee or project can be represented by an integer identifier, and the initial state is that no employee is assigned to any project. Constraints * 1 leq e leq 1,000 * 1 leq p leq 1,000 * 1 leq q leq 100,000 Input The input is given in the following format. q query_1 query_2 : query_q Each query query_i is given by assign e p or unassign e p or projects e or employees p Output For each projects operation, print the list of projects assigned to the employee, sorted in ascending order. If no projects are assigned, output a blank line. For each employees operation, print the list of employees assigned to the project, sorted in ascending order. If no employees are assigned to the project, output a blank line. Example Input 10 assign 1 2 assign 1 3 assign 2 3 projects 1 projects 2 employees 3 unassign 1 3 projects 1 employees 3 employees 2 Output 2 3 3 1 2 2 1","solution":"class ProjectManagementSystem: def __init__(self): # Tracks assignments with e as key and set of projects as value self.employee_projects = {} # Tracks assignments with p as key and set of employees as value self.project_employees = {} def assign(self, e, p): if e not in self.employee_projects: self.employee_projects[e] = set() if p not in self.project_employees: self.project_employees[p] = set() self.employee_projects[e].add(p) self.project_employees[p].add(e) def unassign(self, e, p): if e in self.employee_projects and p in self.employee_projects[e]: self.employee_projects[e].remove(p) if p in self.project_employees and e in self.project_employees[p]: self.project_employees[p].remove(e) def projects(self, e): if e in self.employee_projects: return sorted(self.employee_projects[e]) else: return [] def employees(self, p): if p in self.project_employees: return sorted(self.project_employees[p]) else: return []"},{"question":"In a fictional city, there is a strict policy to manage the traffic by setting up multiple traffic lights along the main road. Each traffic light has a unique timer that controls the light\'s switch between red and green, represented by an integer in seconds. A traffic management system is to be implemented to calculate the time taken for a car to cross a series of traffic lights without stopping. When a car arrives at a traffic light, if the light is red, the car must wait until it turns green. The timer starts counting from zero when the car reaches the first traffic light and continues until the car crosses the last light or waits due to red lights. Input: - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the number of traffic lights. - The next line contains N integers, representing the switching timers (in seconds) for each of the N traffic lights. Output: For each test case, print the total time (in seconds) it takes for a car to cross all the traffic lights without stopping. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ Timer Value ≤ 10^9 SAMPLE INPUT 2 3 2 3 5 4 7 1 3 1 SAMPLE OUTPUT 7 12","solution":"def calculate_total_time(T, test_cases): results = [] for t in range(T): N = test_cases[t][0] timers = test_cases[t][1] total_time = 0 for timer in timers: total_time += timer results.append(total_time) return results"},{"question":"A farmer owns a large rectangular field, which is divided into a grid of cells numbered from (1, 1) to (N, M). The farmer is planning to lay out an irrigation system by selecting a specific subset of cells to be watered. To save water, he wants to ensure that no two watered cells share a row or column. Your task is to determine the maximum number of cells that can be watered under the given constraint for different values of N and M. -----Input:----- - The first line contains T the number of test cases. Then the test cases follow. - Each test case contains two integers, N and M. -----Output:----- For each test case, print a single line containing one integer -- the maximum number of cells that can be watered. -----Constraints----- - 1 le T le 10^4 - 1 le N, M le 10^9 -----Sample Input:----- 4 3 3 4 2 5 5 1 7 -----Sample Output:----- 3 2 5 1 -----Explanation:----- Test Case 1: We have a 3x3 grid, and we can water up to 3 cells such as (1, 1), (2, 2), and (3, 3) ensuring no two watered cells are in the same row or column. So, the maximum number of watered cells is 3. Test Case 2: With a 4x2 grid, we can only select up to 2 cells to water: one per row and one per column. Thus, the maximum is 2.","solution":"def max_cells_watered(t, test_cases): Function to determine the maximum number of cells that can be watered without two cells sharing the same row or column. :param t: Number of test cases :param test_cases: List of tuples containing (N, M) values for each test case :return: List of integers representing the maximum number of cells that can be watered in each test case results = [] for n, m in test_cases: results.append(min(n, m)) return results # Example of how the function is used: # result = max_cells_watered(4, [(3, 3), (4, 2), (5, 5), (1, 7)]) # print(result) # Output should be [3, 2, 5, 1]"},{"question":"Given a list of integers, all of which are between 1 and 100 (inclusive), generate the list of their frequencies. Then, construct a new list such that each integer that appears in the input list is repeated by its frequency. For example, if the input list is arr = [3, 3, 9, 2, 2, 2, 5], the frequency list would be: [(1, 0), (2, 3), (3, 2), (4, 0), (5, 1), ..., (9, 1), (10, 0), ..., (100, 0)]. The output list would then be [2, 2, 2, 3, 3, 5, 9. . .]. Write a function `frequencyExpansion` which takes a list of integers as input and returns the expanded list based on their frequencies. Function Signature: ```python def frequencyExpansion(arr: List[int]) -> List[int]: # Your code here ``` # Input - A list of integers, arr, where 1 leq arr[i] leq 100. - The length of the list 1 leq len(arr) leq 10^6. # Output - A new list of integers where each integer in the original list is repeated by its frequency. # Example **Input** ``` arr = [3, 3, 9, 3, 7] ``` **Output** ``` [3, 3, 3, 3, 7, 9] ``` # Additional Notes Consider the computational efficiency as you will be dealing with potentially large lists.","solution":"def frequencyExpansion(arr): Generate a new list based on the frequencies of elements in the input list. # Initialize frequency array with 101 elements (from 0 to 100), all set to 0 frequency = [0] * 101 # Calculate the frequency of each element in the input list for num in arr: frequency[num] += 1 # Generate the expanded list based on frequencies result = [] for num, freq in enumerate(frequency): result.extend([num] * freq) return result"},{"question":"Given an array of integers, perform a series of queries on the array where each query is either to find the sum of a subarray or update an element of the array. The queries will be executed in the order they are provided. Input The first line of input consists of two integers: n (1 ≤ n ≤ 10^5) - the number of elements in the array, and q (1 ≤ q ≤ 10^5) - the number of queries. The second line contains n integers a1, a2, ..., an (|ai| ≤ 10^9) - the initial elements of the array. The next q lines describe the queries in one of the following formats: 1. \\"1 l r\\" (1 ≤ l ≤ r ≤ n) - a query to find the sum of the subarray from index l to index r (inclusive). 2. \\"2 i x\\" (1 ≤ i ≤ n) - a query to update the ith element of the array to x (|x| ≤ 10^9). Output For each sum query, output the sum of the specified subarray in a new line. Example Input 5 3 1 2 3 4 5 1 1 3 2 2 10 1 1 3 Output 6 14 Explanation Initially, the array is [1, 2, 3, 4, 5]. The first query is a sum query for the subarray from index 1 to 3, which is [1, 2, 3], so the sum is 6. The second query updates the second element to 10, making the array [1, 10, 3, 4, 5]. The third query is a sum query for the subarray from index 1 to 3, which is now [1, 10, 3], so the sum is 14.","solution":"def process_queries(n, q, array, queries): Process a series of queries on the array where each query is either to find the sum of a subarray or update an element of the array. Parameters: n (int): Number of elements in the array. q (int): Number of queries. array (list): List of integers representing the array. queries (list): List of queries, where each query is a list [query_type, arg1, arg2]. Returns: list: List of results for each sum query. results = [] for query in queries: if query[0] == 1: l, r = query[1] - 1, query[2] - 1 results.append(sum(array[l:r+1])) elif query[0] == 2: i, x = query[1] - 1, query[2] array[i] = x return results"},{"question":"In this problem, you are given a 2D grid where each cell contains an integer value. Your task is to find the largest square subgrid (containing only 1\'s) with its top-left corner at (0,0) and compute its area. The size of the square is defined by the length of its side, and the area is the square of that length. Your program should handle the following query type: \\"1 x y val\\" (x, y are zero-based indices, val is either 0 or 1) — update the cell at (x, y) to val. -----Input----- The first line of the input contains two space-separated integers n and m, which represent the number of rows and columns of the grid, respectively (1 ≤ n, m ≤ 100). The following n lines contain m space-separated integers each, representing the initial grid. Each integer is either 0 or 1. The next line contains an integer q, the number of update queries (1 ≤ q ≤ 100). Each of the following lines contains a query of the form \\"1 x y val\\". -----Output----- For each query, after applying the update, output the area of the largest square subgrid (containing only 1\'s) with its top-left corner at (0,0). -----Examples----- Input 3 3 1 1 0 1 1 0 0 0 1 1 1 2 2 1 Output 4 Input 5 5 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 0 0 1 1 1 0 0 1 1 1 2 1 0 4 1 1 4 0 1 Output 9 9","solution":"def largest_square_subgrid(grid, queries): def find_largest_square(grid): n = len(grid) m = len(grid[0]) dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side ** 2 results = [] for query in queries: _, x, y, val = query grid[x][y] = val results.append(find_largest_square(grid)) return results # Example usage: grid = [ [1, 1, 0], [1, 1, 0], [0, 0, 1] ] queries = [ (1, 2, 2, 1) ] print(largest_square_subgrid(grid, queries)) # Output: [4]"},{"question":"A restaurant is implementing a priority seating system for managing reservations. They need a software program that handles reservations through priority queues where customers with higher priority should be seated first. The following operations need to be supported: - add(reservation_id, priority): Add a new reservation with a unique reservation ID and a specified priority. - serve(): Serve the reservation with the highest priority. If multiple reservations have the same priority, serve the one that was added first. - cancel(reservation_id): Cancel a reservation using its unique reservation ID. - snapshot(): Print a snapshot of all current reservations in the queue, sorted by priority in descending order. If two reservations have the same priority, they should appear in the order they were added. Constraints: - The number of operations ( leq 100,000 ) - ( 0 leq text{reservation_id}, text{priority} leq 2,000,000,000 ) - Reservation IDs are unique. - The size of the output for the snapshot operation ( leq 10 ) MB Input: The first line of input contains an integer ( m ), the number of operations. The next ( m ) lines each describe one of the operations add, serve, cancel, or snapshot. Output: For each serve operation, print the reservation ID that was served. For each snapshot operation, print the list of current reservation IDs in the queue in ascending order of their input sequence. Example: Input: ``` 10 add 1 20 add 2 30 add 3 25 serve snapshot add 4 35 add 5 30 serve cancel 4 snapshot ``` Output: ``` 2 1 3 5 1 3 5 ```","solution":"import heapq class ReservationSystem: def __init__(self): self.counter = 0 # to maintain the order of reservations self.pq = [] # priority queue self.reservation_map = {} # map to store reservation_id to (priority, counter) def add(self, reservation_id, priority): # Insert using negative priority to create a max-heap effect with min-heap implementation entry = (-priority, self.counter, reservation_id) heapq.heappush(self.pq, entry) self.reservation_map[reservation_id] = entry self.counter += 1 def serve(self): while self.pq: priority, counter, reservation_id = heapq.heappop(self.pq) if reservation_id in self.reservation_map: # Serving the reservation del self.reservation_map[reservation_id] return reservation_id return None def cancel(self, reservation_id): if reservation_id in self.reservation_map: del self.reservation_map[reservation_id] def snapshot(self): # Collecting valid reservations and sorting by priority and insertion order valid_reservations = sorted( (entry for entry in self.pq if entry[2] in self.reservation_map), key=lambda x: (-x[0], x[1]) ) return [entry[2] for entry in valid_reservations]"},{"question":"You are given a string S consisting of lower case English alphabets. You can perform the following operation on the string any number of times: Choose any subsequence of characters from the string such that each character in the subsequence is the same and remove them from the string. Find the minimum number of operations required to remove all characters from the string. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output a single line with the minimum number of operations required to remove all characters from the string. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 10^5 - Sum of the lengths of all strings across all test cases will not exceed 2 cdot 10^5. ----- Sample Input 1 ------ 3 aabbcc abc aabbccaa ----- Sample Output 1 ------ 2 1 3 ----- Explanation 1 ------ Test Case 1: In the first operation, remove one subsequence of \'a\'s, one of \'b\'s, and one of \'c\'s, resulting in one \'a\', \'b\', and \'c\' left. In the second operation, remove the remaining \'a\', \'b\', and \'c\'. Test Case 2: In one operation, remove one subsequence containing \'a\', \'b\', and \'c\'. Test Case 3: In the first operation, remove all \'a\'s, in the second operation, all \'b\'s, and in the third one, all \'c\'s.","solution":"def min_operations_to_empty_string(s): Given a string s, this function returns the minimum number of operations to remove all characters from the string by removing subsequences of the same character. # Utilize a set to find the unique characters in the string unique_chars = set(s) # The number of unique characters is the minimum number of operations needed return len(unique_chars) def process_test_cases(test_cases): Given a list of test cases (strings), this function processes each test case and returns the results as a list of integers indicating the minimum number of operations for each string. results = [] for s in test_cases: result = min_operations_to_empty_string(s) results.append(result) return results"},{"question":"In a small country, there are n cities connected by m bidirectional roads. The cities are numbered from 1 to n, and there is a company operating a delivery service between these cities. The road network is modeled as an undirected graph. The delivery company needs to carefully choose a subset of roads to ensure the following: 1. There is exactly one path between any two cities in the chosen subset (i.e., the chosen subset forms a tree). 2. The total length of the roads in the chosen subset is minimized. Given the number of cities n, the number of roads m, and the description of each road, find the minimum possible total length of the roads in the chosen subset that forms the required tree. Input: - The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and the number of roads, respectively. - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000) — indicating there is a road between cities u and v with length w. Output: - Print one integer — the minimum possible total length of the roads in the chosen subset. Examples: Input: 4 5 1 2 1 1 3 4 1 4 3 2 3 2 3 4 5 Output: 6 Input: 5 7 1 2 3 1 3 4 2 4 2 2 5 6 3 4 1 3 5 3 4 5 2 Output: 10 In the first example, one of the possible trees that can be formed is: - Road from city 1 to city 2 with length 1 - Road from city 2 to city 3 with length 2 - Road from city 1 to city 4 with length 3 This tree covers all cities with a total length of 1 + 2 + 3 = 6, which is the minimum. In the second example, one of the possible trees that can be formed is: - Road from city 2 to city 4 with length 2 - Road from city 4 to city 5 with length 2 - Road from city 4 to city 3 with length 1 - Road from city 3 to city 1 with length 4 This tree covers all cities with a total length of 2 + 2 + 1 + 4 = 9, which is the minimum.","solution":"def find_minimum_spanning_tree(n, m, roads): Uses Kruskal\'s algorithm to find the minimum spanning tree of a given graph. Parameters: n (int): Number of cities. m (int): Number of roads. roads (list): List of tuples representing the roads (u, v, w). Returns: int: Minimum total length of the roads in the chosen subset. # Helper function to find the root of a city def find(parent, city): if parent[city] != city: parent[city] = find(parent, parent[city]) return parent[city] # Helper function to unify two subsets def union(parent, rank, city1, city2): root1 = find(parent, city1) root2 = find(parent, city2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 # Initialize parent and rank for Union-Find parent = list(range(n + 1)) rank = [0] * (n + 1) # Sort all the roads by their weight roads.sort(key=lambda x: x[2]) # Kruskal\'s algorithm min_cost = 0 for u, v, w in roads: if find(parent, u) != find(parent, v): union(parent, rank, u, v) min_cost += w return min_cost"},{"question":"Given a sorted array of distinct integers and a target value, determine if there is a pair of elements in the array whose sum is equal to the target value. Example 1: Input: arr = [1, 2, 3, 4, 5], target = 9 Output: True Explanation: Pair (4, 5) sums up to 9. Example 2: Input: arr = [1, 2, 3, 4, 5], target = 10 Output: False Explanation: No pairs sum up to 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function checkPairSum() which takes the sorted array \'arr\' and integer \'target\' as input and returns a boolean value indicating whether there exists a pair whose sum equals the target. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 <= len(arr) <= 10^5 -10^6 <= arr[i], target <= 10^6","solution":"def checkPairSum(arr, target): Determines if there is a pair of elements in the sorted array \'arr\' whose sum equals \'target\'. left, right = 0, len(arr) - 1 while left < right: current_sum = arr[left] + arr[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"-----Input----- The input consists of a single integer n (2 le n le 100) representing the number of sticks. -----Output----- Output a single integer which represents the maximum number of distinct triangles that can be formed by selecting three different sticks such that the sum of the lengths of any two sticks is greater than the length of the third one. -----Example----- Input 4 Output 4","solution":"def count_distinct_triangles(n): Finds the number of distinct triangles that can be formed by n sticks such that the sum of the lengths of any two sticks is greater than the length of the third one. if n < 3: return 0 # Calculate the number of ways to choose 3 out of n sticks, given n is at least 3 return n * (n - 1) * (n - 2) // 6"},{"question":"To give a consistent Coding Assessment Question: Task: There is a sequence of numbers described as follows: - Start with an integer `start` - Each next number in the sequence is generated by multiplying the current number by `multiplier` and then adding `increment` - Repeat this process `n` times to generate the sequence I will give you four parameters: - `start`, an integer representing the first term of the sequence - `multiplier`, an integer used to multiply the current number in the sequence - `increment`, an integer added to the product of the current number and `multiplier` - `n`, an integer representing the number of terms in the sequence to generate Return the generated sequence as a list of integers. # Example: ```python Example 1: start = 2, multiplier = 3, increment = 1, n = 5 The sequence will be: 2, (2*3+1)=7, (7*3+1)=22, (22*3+1)=67, (67*3+1)=202 So, generate_sequence(2, 3, 1, 5) = [2, 7, 22, 67, 202] Example 2: start = 1, multiplier = 2, increment = 0, n = 4 The sequence will be: 1, (1*2+0)=2, (2*2+0)=4, (4*2+0)=8 So, generate_sequence(1, 2, 0, 4) = [1, 2, 4, 8] Example 3: start = 0, multiplier = 5, increment = -3, n = 6 The sequence will be: 0, (0*5-3)=-3, (-3*5-3)=-18, (-18*5-3)=-93, (-93*5-3)=-468, (-468*5-3)=-2343 So, generate_sequence(0, 5, -3, 6) = [0, -3, -18, -93, -468, -2343] ```","solution":"def generate_sequence(start, multiplier, increment, n): Generates a sequence of numbers based on the start value, multiplier, increment, and length n. Parameters: start (int): The initial term of the sequence. multiplier (int): The multiplier for generating the next term. increment (int): The increment added after multiplication. n (int): The number of terms in the sequence. Returns: list: A list containing the generated sequence of integers. if n <= 0: return [] sequence = [start] current_value = start for _ in range(n - 1): next_value = current_value * multiplier + increment sequence.append(next_value) current_value = next_value return sequence"},{"question":"You are given an array `arr` of length `n` consisting of non-negative integers. Your task is to find if there exists a subarray of length at least 2 such that the subarray is palindromic. A palindromic subarray is one that reads the same backward as forward. Example 1: Input: arr = [1, 2, 3, 2, 1] Output: True Explanation: The subarray [2, 3, 2] is a palindrome. Example 2: Input: arr = [8, 9, 10, 1, 2] Output: False Explanation: There are no subarrays of length at least 2 which are palindromes. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `containsPalindromicSubarray()` which takes an integer array `arr` as input and returns a boolean value indicating if there exists a palindromic subarray of length at least 2. Constraints: 2 ≤ n ≤ 10^5 0 ≤ arr[i] ≤ 10^9 Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def containsPalindromicSubarray(arr): Check if there exists a subarray of length at least 2 that is a palindrome. n = len(arr) if n < 2: return False # Check subarrays of length 2 for i in range(n - 1): if arr[i] == arr[i + 1]: return True # Check subarrays of length 3 for i in range(n - 2): if arr[i] == arr[i + 2]: return True return False"},{"question":"You are given an N x N matrix where each cell contains a positive integer. You are allowed to move from one cell to another in either the right or down direction. Design an algorithm to find the maximum sum of integers you can collect starting from the top-left cell and moving to the bottom-right cell following the allowed directions. Constraints * 1 ≤ N ≤ 10^3 * 1 ≤ matrix[i][j] ≤ 10^4 Input The input is given in the following format: N matrix[0][0] matrix[0][1] ... matrix[0][N-1] matrix[1][0] matrix[1][1] ... matrix[1][N-1] : matrix[N-1][0] matrix[N-1][1] ... matrix[N-1][N-1] Output Print a single integer: the maximum sum of integers collected on the path described. Examples Input 3 5 3 2 1 7 1 3 2 1 Output 18 Input 2 1 2 1 1 Output 4","solution":"def max_path_sum(N, matrix): if N == 0 or not matrix: return 0 # Create a DP array to store the maximum sum up to each cell dp = [[0] * N for _ in range(N)] dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the remaining cells for i in range(1, N): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[N-1][N-1]"},{"question":"A small factory custom designs T-shirts in bulk. They have m different orders, each requiring a specific number of T-shirts with varying sizes. For each order, only one type of size (either \'S\', \'M\', \'L\', etc.) is needed. The factory workers retrieve the T-shirts from a single storage container where all the T-shirts are kept unsorted. Each retrieval action allows workers to pick multiple T-shirts of the same size. The factory aims to minimize retrieval actions to fulfill all orders. -----Input----- The first line contains integer m (1 ≤ m ≤ 50000), the number of orders. The second line contains m integers, where the i-th integer represents the number of T-shirts required for the i-th order. The third line contains m uppercase English letters (each \'A\' to \'Z\'), where the i-th letter represents the size needed for the i-th order. -----Output----- Print the total minimum number of retrieval actions. -----Examples----- Input 4 3 4 2 5 S M S M Output 4 Input 3 5 6 3 L L L Output 1","solution":"def min_retrieval_actions(m, quantities, sizes): Returns the minimum number of retrieval actions required to fulfill all orders. from collections import Counter # Count the number of orders for each size size_counts = Counter(sizes) # The minimum number of retrieval actions is equal to the number of unique sizes needed return len(size_counts)"},{"question":"Given an array of integers in the input, return an array where each element is the product of all the other elements of the input array except the one at the given index. Do not use the division operation. Input Input array of integers Output Output array of integers Example Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [4, 5, 1, 8, 2] Output: [80, 64, 320, 40, 160]","solution":"def product_except_self(nums): Returns an array where each element is the product of all the other elements of the input array except the one at the given index. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n # Calculate products of all elements to the left of each element for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate products of all elements to the right of each element for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate the result by multiplying left and right products result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"You are given an integer array A of length N. The array is deemed \\"symmetric\\" if for every element A[i] there exists a corresponding element A’[j] such that A’[j] = -A[i]. Write a function to determine if the array is symmetric. Function Signature: `def is_symmetric(arr: List[int]) -> str:` **Input:** - The first line contains an integer T, the number of test cases. - Each test case consists of a single line containing N (the length of the array) followed by the elements of the array A. **Output:** - For each test case, output \\"Symmetric\\" if the array is symmetric, otherwise output \\"Not Symmetric\\". **Constraints:** - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - -1000 ≤ A[i] ≤ 1000 **Example Input:** ``` 2 4 1 -1 2 -2 3 3 5 -3 ``` **Example Output:** ``` Symmetric Not Symmetric ``` **Explanation:** In the first test case, the array [1, -1, 2, -2] is symmetric because: - 1 has its corresponding -1 - 2 has its corresponding -2 In the second test case, the array [3, 5, -3] is not symmetric because: - 3 has no corresponding -3 (since -3 would have been counted already for the first 3, we need another -3 for the second 3, which is not available).","solution":"from typing import List def is_symmetric(arr: List[int]) -> str: Determines if an array is symmetric. from collections import Counter count = Counter(arr) for num in arr: if count[num] != count[-num]: return \\"Not Symmetric\\" return \\"Symmetric\\""},{"question":"A new ecommerce platform tracks the orders as they come in through its system. Each order is recorded with its unique order ID and a timestamp indicating the time at which the order was received. Due to the platform’s high traffic, it is essential to analyze the order data to find specific patterns, such as the most frequent time interval when the orders are received. Given a list of orders with their timestamps, you need to identify the hour during which the maximum number of orders were placed. # Input Description The input consists of: - An integer `n` (1 ≤ n ≤ 10<sup>6</sup>) representing the number of orders. - `n` lines follow, each containing a string in the format “HH:MM” representing the hour and minute timestamp of an order. # Output Description Output a single line with the hour in the format “HH” during which the maximum number of orders were placed. If there is a tie (multiple hours with the same number of orders), return the earliest hour. # Example Input ``` 5 12:45 13:05 12:15 12:35 13:45 ``` Output ``` 12 ``` # Explanation In the example above, the orders were received at the following times: - 12:45, 13:05, 12:15, 12:35, 13:45 Between 12:00 and 12:59, there are 3 orders. Between 13:00 and 13:59, there are 2 orders. The maximum number of orders were received during the hour “12”, so the output is “12”.","solution":"def most_frequent_hour(n, timestamps): Returns the hour (in \\"HH\\" format) during which the maximum number of orders were placed. If there is a tie, the earliest hour is returned. hour_counts = {} for timestamp in timestamps: hour = timestamp.split(\':\')[0] if hour not in hour_counts: hour_counts[hour] = 0 hour_counts[hour] += 1 max_orders = max(hour_counts.values()) most_frequent_hours = [hour for hour, count in hour_counts.items() if count == max_orders] return min(most_frequent_hours) # Example Usage: # n = 5 # timestamps = [\\"12:45\\", \\"13:05\\", \\"12:15\\", \\"12:35\\", \\"13:45\\"] # print(most_frequent_hour(n, timestamps)) # Output: \\"12\\""},{"question":"A company wants to analyze their employee check-in data to ensure that employees are efficiently utilizing office space. Each time an employee checks in at the office, the system logs their ID and the room number they have entered. The company wants to identify whether there exist any two distinct rooms that eliminate the need for employees to walk too far by ensuring at least one of those rooms is visited by the employees frequently enough. -----Input----- The first line contains two space-separated integers n and k (2 leq n leq 100,000, 1 leq k leq 100,000) — the total number of rooms, and the total number of check-in records. The next k lines each contain two space-separated integers e_i and r_i (1 leq e_i leq 100,000, 1 leq r_i leq n) — the employee ID and the room number they checked into. -----Output----- Output \\"YES\\" if there exist two room numbers x and y (1 leq x < y leq n) such that for every check-in record, the room number is either x or y. Otherwise, print \\"NO\\". Case sensitivity of the output does not matter. -----Examples----- Input 5 6 1 2 2 3 3 3 4 2 5 2 6 3 Output YES Input 4 4 1 1 2 2 3 3 4 4 Output NO Input 6 10 1 1 2 2 1 3 2 4 3 5 4 6 5 1 6 2 7 3 8 4 Output NO -----Note----- In the first example, you can choose rooms 2 and 3. In the second example, you cannot choose any pair of rooms since all check-ins are evenly distributed across all rooms. In the third example, each room is visited by different employees but not sufficiently to meet the criteria of the problem statement effectively.","solution":"def can_optimize_office_space(n, k, checkins): Determines if there exist two rooms such that every check-in record is in either of these rooms. Parameters: n (int): Total number of rooms. k (int): Total number of check-in records. checkins (list of tuples): Each tuple contains two integers, (employee_id, room_number). Returns: str: \\"YES\\" if such rooms exist, otherwise \\"NO\\". from collections import defaultdict room_freq = defaultdict(int) for emp, room in checkins: room_freq[room] += 1 max_freq_rooms = sorted(room_freq.items(), key=lambda x: x[1], reverse=True) if len(max_freq_rooms) < 2: return \\"NO\\" freq_sum = 0 for room, freq in max_freq_rooms[:2]: freq_sum += freq if freq_sum == k: return \\"YES\\" return \\"NO\\""},{"question":"Matrix Battle You are given a square matrix of integers and a sequence of operations which either update specific elements of the matrix or query the sum of a rectangular sub-matrix. Your task is to perform the given operations in order and return the result of each query. Input The input consists of a single test case of the following format. ``` n matrix m operation_1 ... operation_m ``` The first line contains an integer n (1 leq n leq 500), the size of the matrix. The next n lines each contain n integers. Each integer in the matrix is between −10^9 and 10^9 inclusive. The next line contains an integer m (1 leq m leq 100,000), the number of operations. Each of the following m lines describes an operation as follows: ``` U i j x ``` or ``` Q i_1 j_1 i_2 j_2 ``` When the operation starts with U, it means an update operation that sets the element at row i and column j (1 leq i, j leq n) to x (−10^9 leq x leq 10^9). When the operation starts with Q, it means a query asking for the sum of the elements in the rectangular sub-matrix from (i_1, j_1) to (i_2, j_2) (1 leq i_1 leq i_2 leq n and 1 leq j_1 leq j_2 leq n). Output For each query, output the sum of the specified sub-matrix. Sample Input 1 ``` 3 1 2 3 4 5 6 7 8 9 5 Q 1 1 2 2 U 2 2 10 Q 2 2 3 3 U 3 3 -5 Q 1 1 3 3 ``` Sample Output 1 ``` 12 25 36 ``` Explanation The given matrix is initially: ``` 1 2 3 4 5 6 7 8 9 ``` 1. The first query sums the sub-matrix from (1,1) to (2,2): 1+2+4+5=12. 2. The update operation changes matrix element at (2,2) to 10. 3. The updated matrix is: ``` 1 2 3 4 10 6 7 8 9 ``` 4. The second query sums the sub-matrix from (2,2) to (3,3): 10+6+8+9=33. 5. The update operation changes matrix element at (3,3) to -5. 6. The updated matrix is: ``` 1 2 3 4 10 6 7 8 -5 ``` 7. The third query sums the entire matrix: 1+2+3+4+10+6+7+8-5=36.","solution":"def matrix_operations(n, matrix, operations): def prefix_sum_2d(matrix): n = len(matrix) prefix_sum = [[0]*(n+1) for _ in range(n+1)] for i in range(1, n+1): for j in range(1, n+1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) return prefix_sum results = [] prefix_sum = prefix_sum_2d(matrix) for op in operations: parts = op.split() if parts[0] == \'U\': i, j, x = int(parts[1]), int(parts[2]), int(parts[3]) matrix[i-1][j-1] = x prefix_sum = prefix_sum_2d(matrix) # Update prefix sum after each update elif parts[0] == \'Q\': i1, j1, i2, j2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) total = (prefix_sum[i2][j2] - prefix_sum[i1-1][j2] - prefix_sum[i2][j1-1] + prefix_sum[i1-1][j1-1]) results.append(total) return results"},{"question":"Genetic Algorithm: Shortest Path in a Grid Genetic algorithms are a type of optimization algorithm inspired by the process of natural selection. In this exercise, you\'re asked to use a genetic algorithm to find the shortest path from the top-left corner to the bottom-right corner of a grid. The grid is represented as a 2D list of dimensions `n x m`, where some cells are walkable (represented by 0), and others are obstacles (represented by 1). The goal is to navigate from the cell (0, 0) to the cell (n-1, m-1). # Requirements: 1. Implement a class `GeneticPathFinder` with the following methods: - `__init__(self, grid: List[List[int]], population_size: int, mutation_rate: float, generations: int)`: Initializes the class with the grid, the initial population size, the mutation rate (a float between 0 and 1), and the number of generations. - `generate_population(self) -> List[str]`: Generates an initial population. Each path can be represented as a string of directions: `U` for up, `D` for down, `L` for left, `R` for right. The length of each path should be `n + m - 2`. - `fitness(self, path: str) -> int`: Evaluates the fitness of a path based on the number of steps it takes to reach the goal and how many obstacles it encounters. A path that reaches the goal with fewer obstacles is more fit. - `crossover(self, path1: str, path2: str) -> str`: Performs a crossover operation between two paths and returns a new path. - `mutate(self, path: str) -> str`: Mutates the given path by randomly changing one or more directions based on the mutation rate. - `evolve(self) -> str`: Runs the genetic algorithm for the given number of generations and returns the best path found. 2. The class should follow these steps: 1. Generate the initial population. 2. Evaluate the fitness of all paths in the population. 3. Select parents based on their fitness to create a new population. 4. Perform crossover and mutation to create new paths. 5. Repeat the process for the given number of generations. 3. Constraints: - The grid dimensions `n` and `m` are between 2 and 20. - The population size is between 10 and 100. - The mutation rate is between 0.01 and 0.1. - The number of generations is between 100 and 1000. # Example: ```python grid = [ [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0] ] finder = GeneticPathFinder(grid=grid, population_size=50, mutation_rate=0.05, generations=200) best_path = finder.evolve() print(best_path) # Output: A string representing the directions of the path, e.g. \\"DDRRUURD\\" ``` # Notes: - The pathfinding should adhere to the grid boundaries and avoid obstacles. - If there are multiple paths with the same fitness, any of the valid paths is acceptable. - Ensure your algorithm can handle scenarios where no valid path exists. In such cases, return an empty string or a message indicating the failure. By the end of this task, you should have a `GeneticPathFinder` class that can find a near-optimal path in a grid using genetic algorithm principles.","solution":"import random class GeneticPathFinder: def __init__(self, grid, population_size, mutation_rate, generations): self.grid = grid self.n = len(grid) self.m = len(grid[0]) self.population_size = population_size self.mutation_rate = mutation_rate self.generations = generations self.directions = [\'U\', \'D\', \'L\', \'R\'] # Available directions def generate_population(self): population = [] for _ in range(self.population_size): path = \'\'.join(random.choices(\'DR\', k=self.n + self.m - 2)) population.append(self._ensure_valid_initial_path(path)) return population def _ensure_valid_initial_path(self, path): # Convert to valid initial path ensuring it can potentially reach destination d_count = path.count(\'D\') r_count = path.count(\'R\') while d_count > self.n - 1: path = path.replace(\'D\', \'R\', 1) d_count -= 1 r_count += 1 while r_count > self.m - 1: path = path.replace(\'R\', \'D\', 1) d_count += 1 r_count -= 1 return path def fitness(self, path): x, y = 0, 0 for move in path: if move == \'U\': if x > 0: x -= 1 elif move == \'D\': if x < self.n - 1: x += 1 elif move == \'L\': if y > 0: y -= 1 elif move == \'R\': if y < self.m - 1: y += 1 if self.grid[x][y] == 1: return float(\'inf\') return abs(x - (self.n - 1)) + abs(y - (self.m - 1)) # Manhattan distance to goal def crossover(self, path1, path2): cut = random.randint(1, len(path1) - 2) return path1[:cut] + path2[cut:] def mutate(self, path): path = list(path) for i in range(len(path)): if random.random() < self.mutation_rate: path[i] = random.choice(self.directions) return \'\'.join(path) def evolve(self): population = self.generate_population() for _ in range(self.generations): population = sorted(population, key=self.fitness) if self.fitness(population[0]) == 0: break next_gen = population[:self.population_size // 2] while len(next_gen) < self.population_size: parents = random.sample(population[:self.population_size // 2], 2) child = self.crossover(parents[0], parents[1]) next_gen.append(self.mutate(child)) population = next_gen best_path = min(population, key=self.fitness) if self.fitness(best_path) == float(\'inf\'): return \\"\\" # No valid path return best_path"},{"question":"----- SHOPPING CART ----- A local grocery store uses an electronic system for tracking their daily sales. Each product sold in the store has an attached weight and price. The system records each sale as a combination of product name, the weight of the product (in grams), and the total price (in cents). Multiple sales of the same product might occur on the same day. The store manager wants to analyze the sales data and needs help calculating the total revenue generated per product and the total weight sold of each product. Write a program to help the manager with this task. For each unique product, your program should output the total weight sold and the total revenue generated. ----- -----Input Format----- The first line contains the integer n, the number of sales records. The next n lines contain three space-separated values: - A string representing the product name - An integer representing the weight of the product in grams - An integer representing the price of the product in cents -----Output----- For each unique product, print a line with the product name, total weight sold (in grams), and total revenue generated (in cents). Output should be sorted alphabetically by product name. -----Example Test Case----- Input: 5 apple 200 300 banana 150 200 apple 150 225 banana 200 300 apple 100 150 Output: apple 450 675 banana 350 500","solution":"def calculate_sales(sales): Given a list of sales records, return a sorted dictionary with total weight and revenue for each product. Args: sales (list of tuples): Each tuple contains a string (product name), an integer (weight in grams), and an integer (price in cents). Returns: dict: A dictionary where keys are product names and values are tuples of total weight and total revenue. sales_summary = {} for product, weight, price in sales: if product in sales_summary: sales_summary[product][0] += weight sales_summary[product][1] += price else: sales_summary[product] = [weight, price] return {k: tuple(v) for k, v in sorted(sales_summary.items())} # Example usage: # sales = [ # (\\"apple\\", 200, 300), # (\\"banana\\", 150, 200), # (\\"apple\\", 150, 225), # (\\"banana\\", 200, 300), # (\\"apple\\", 100, 150) # ] # print(calculate_sales(sales))"},{"question":"Mega Corp plans to install surveillance cameras in their new office building. The floor plan of the office is represented as a tree with N nodes (rooms) and N-1 edges (hallways). The goal is to ensure that each room is monitored by at least one camera. Each camera can only monitor the room it\'s placed in and the rooms directly connected to it. You need to write a program that determines the minimum number of cameras needed to monitor all rooms. Input The first line contains an integer N (1 ≤ N ≤ 1000) — the number of rooms. Rooms are numbered from 1 to N. The next N-1 lines each contain two integers u and v (1 ≤ u, v ≤ N) — representing a hallway between rooms u and v. Output Output a single integer — the minimum number of cameras required. Example Input 6 1 2 1 3 5 2 6 2 2 4 Output 2 Explanation To cover all rooms, you can place cameras in room 1 and room 4. Room 1 covers itself and rooms 2 and 3. Room 4 covers itself and room 2. Room 5 and room 6 are covered by the camera in room 1 through room 2. Another optimal solution is placing cameras in room 2 and room 3. Room 2 covers itself, rooms 1, 5, and 6. Room 3 covers itself. Room 4 is covered by the camera in room 2. Room 1 is covered by the camera in room 2. Room 1 covers itself and its direct connected rooms: rooms 2 and 3. Room 4 is covered by the camera in room 2. Room 5 is covered by the camera in room 2. Room 6 is covered by the camera in room 2. Hence, the camera in room 2 covers all rooms directly except room itself which makes it optimal to place another camera in room 3 to cover room 3 itself. Hence the total number of cameras required is also 2 directors.","solution":"def minCameraCover(N, edges): from collections import defaultdict # Tree structure initialization tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # States: 0 -> not covered, 1 -> has camera, 2 -> covered by a child camera def dfs(node, parent): nonlocal cameras children = [dfs(child, node) for child in tree[node] if child != parent] if any(child == 0 for child in children): cameras += 1 return 1 # Has camera if any(child == 1 for child in children): return 2 # Covered by a camera return 0 # Not covered cameras = 0 if dfs(1, -1) == 0: cameras += 1 return cameras # Parsing input in the main function format def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) edges = [] for i in range(1, len(data), 2): u = int(data[i]) v = int(data[i+1]) edges.append((u, v)) print(minCameraCover(N, edges)) # Sample test if __name__ == \\"__main__\\": main()"},{"question":"Alice is managing a library system and wants to ensure that clients can borrow books efficiently. She has a list of books and a list of borrow requests from clients. Each request has a client\'s ID and the book they want to borrow. The library allows only one client to borrow a book at a time. If a requested book is already borrowed, the request will be denied. Alice needs a system that processes each request in the order they are received and outputs whether the request is successful or denied. Your task is to implement this system. Input Format The first line contains an integer T, the number of test cases. (1 ≤ T ≤ 10) For each test case: - The first line contains an integer B, the number of books in the library. (1 ≤ B ≤ 100) - The second line contains B space-separated strings representing the titles of the books in the library. - The third line contains an integer R, the number of requests. (1 ≤ R ≤ 1000) - Each of the next R lines contains a Client ID (an integer) and a book title (a string), representing a borrow request. Output Format For each borrow request in each test case, print either \\"Successful\\" if the book can be borrowed, or \\"Denied\\" if the book is already borrowed. SAMPLE INPUT 2 3 BookA BookB BookC 5 1 BookA 2 BookB 1 BookB 3 BookA 4 BookD 2 BookX BookY 4 1 BookX 2 BookX 3 BookX 4 BookY SAMPLE OUTPUT Successful Successful Denied Denied Denied Successful Denied Denied Successful","solution":"def process_requests(test_cases): results = [] for case in test_cases: books_available = case[\'books\'] requests = case[\'requests\'] borrowed_books = set() for client_id, book_title in requests: if book_title in borrowed_books: results.append(\\"Denied\\") else: if book_title in books_available: borrowed_books.add(book_title) results.append(\\"Successful\\") else: results.append(\\"Denied\\") return results def parse_input(input): data = input.strip().split(\'n\') T = int(data[0]) index = 1 test_cases = [] for _ in range(T): B = int(data[index]) books = data[index + 1].split() R = int(data[index + 2]) requests = [] for i in range(R): parts = data[index + 3 + i].split() client_id = int(parts[0]) book_title = \' \'.join(parts[1:]) requests.append((client_id, book_title)) test_cases.append({ \'books\': books, \'requests\': requests }) index += 3 + R return test_cases"},{"question":"You are given n integers and you need to find the maximum sum of any contiguous subarray of these integers. A contiguous subarray is a sequence of adjacent elements in the array. You need to return the sum and the start and end indices (1-based) of this subarray. For example, given the array [-2,1,-3,4,-1,2,1,-5,4], the maximum sum of a contiguous subarray is 6 which comes from the subarray [4,-1,2,1] starting at index 4 and ending at index 7. Write a function that takes the number of elements in the array and the array itself as input, and returns the maximum sum and the start and end indices of the subarray achieving this sum. -----Input----- The first line contains an integer t (1 le t le 50), which indicates the number of test cases. Each test case consists of two lines. The first line contains one integer n (1 le n le 10^5) — the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^4 le a_i le 10^4). It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case output on a separate line three integers: the maximum sum of the contiguous subarray, and the 1-based start and end indices of this subarray. If there are multiple subarrays with the same maximum sum, output the one with the smallest start index. If there are still multiple answers, output the one with the smallest end index. -----Examples----- Input 2 9 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 Output 6 4 7 15 1 5","solution":"def max_sum_subarray(n, arr): Returns the maximum sum of any contiguous subarray, and the start and end indices (1-based) of this subarray. max_sum = float(\'-inf\') current_sum = 0 start = 0 temp_start = 0 end = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i if current_sum < 0: current_sum = 0 temp_start = i + 1 return max_sum, start + 1, end + 1 def process_test_cases(t, cases): results = [] for i in range(t): n, arr = cases[i] result = max_sum_subarray(n, arr) results.append(result) return results"},{"question":"Leah loves to play with palindromes. A palindrome is a string that reads the same forward and backward. Leah wondered what would happen if she inserted one character at any position in a string, to make it a palindrome. She asked you to help find the minimum number of characters that need to be inserted to make a given string a palindrome. **Input** The input consists of a single line containing a non-empty string ( s ) of lowercase English letters. The length of ( s ) will be at most 1000. **Output** Print the minimum number of characters that need to be inserted to turn ( s ) into a palindrome. **Examples** Input ``` abca ``` Output ``` 1 ``` Input ``` race ``` Output ``` 3 ``` **Explanation** In the first example, adding \'b\' at position 2 of the string \\"abca\\" makes it a palindrome: \\"abcba\\". In the second example, adding \'c\', \'e\', and \'r\' at the appropriate positions of the string \\"race\\" makes it a palindrome: \\"ecarace\\".","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of characters that need to be inserted to make the string \'s\' a palindrome. n = len(s) # Create a table to store results of subproblems dp = [[0] * n for _ in range(n)] # Fill the table for length in range(1, n): for i in range(n - length): j = i + length if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1]"},{"question":"Alice and Bob are playing a game using strings. The objective of the game is to form a palindromic string using given characters from two strings. A palindromic string reads the same backward as forward. Alice and Bob each have a string, A and B respectively, containing lowercase English letters. They want to create the longest possible palindromic string by concatenating a subsequence of A with a subsequence of B, where a subsequence is derived from deleting zero or more characters without changing the order of the remaining characters. Write a program to determine the length of the longest palindromic string that can be formed using subsequences of A and B. # Input: The first line of the input contains a single integer T, the number of test cases. Each test case contains two lines: - The first line contains the string A. - The second line contains the string B. # Output: For each test case, output a single integer representing the length of the longest palindromic string that can be formed using subsequences of A and B. # Constraints: - 1 ≤ T ≤ 10 - 1 ≤ |A|, |B| ≤ 1000 # Example: Input: ``` 3 abc cba xy yx abcde edcba ``` Output: ``` 3 2 5 ``` Explanation: 1. In the first test case, the longest palindromic string is \\"aba\\" or \\"cac\\". 2. In the second test case, the longest palindromic string is \\"xyx\\" or \\"yxy\\". 3. In the third test case, the entire string \\"abcba\\" (or \\"edcde\\") is a palindrome.","solution":"def longest_palindromic_subsequence(A, B): Returns the length of the longest palindromic string that can be formed using subsequences of A and B. # Reverse string B to check for palindromes easily B_rev = B[::-1] m, n = len(A), len(B_rev) # DP table to store the length of LCS dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp table for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B_rev[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of the longest palindromic subsequence is in dp[m][n] return dp[m][n] def process_test_cases(T, test_cases): results = [] for i in range(T): A, B = test_cases[i] results.append(longest_palindromic_subsequence(A, B)) return results"},{"question":"Given a string consisting of only \'a\' and \'b\' characters, you need to determine the minimum number of deletions required to make the string such that there are no two consecutive \'a\' or \'b\' characters. Example 1: Input: s = \\"abba\\" Output: 1 Explanation: We can delete one \'b\' to get the string \\"aba\\", which has no two consecutive \'a\' or \'b\' characters. Example 2: Input: s = \\"aaaa\\" Output: 3 Explanation: We can delete three \'a\'s to get the string \\"a\\", which has no two consecutive \'a\' or \'b\' characters. Example 3: Input: s = \\"abab\\" Output: 0 Explanation: The string \\"abab\\" already has no consecutive \'a\' or \'b\' characters. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minDeletions() which takes the string s as input and returns the minimum number of deletions required. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= |s| <= 10^5","solution":"def minDeletions(s): Determine the minimum number of deletions required to make the string such that there are no two consecutive \'a\' or \'b\' characters. Parameters: s (str): The input string consisting of only \'a\' and \'b\' characters. Returns: int: The minimum number of deletions required. deletions = 0 for i in range(1, len(s)): if s[i] == s[i-1]: deletions += 1 return deletions"},{"question":"Given an array of integers and an integer \'K\'. The task is to find the maximum sum subarray of size K. Example 1: Input: arr = [100, 200, 300, 400] K = 2 Output: 700 Explanation: The subarray of size 2 with maximum sum is [300, 400] which gives a sum of 700. Example 2: Input: arr = [1, 4, 2, 10, 23, 3, 1, 0, 20] K = 4 Output: 39 Explanation: The subarray of size 4 with maximum sum is [4, 2, 10, 23] which gives a sum of 39. Your Task: Complete the maxSumSubArray function to return an integer representing the maximum sum of a subarray of size K. Constraints: 1 <= arr.length <= 10^5 -10^4 <= arr[i] <= 10^4 1 <= K <= arr.length","solution":"def maxSumSubArray(arr, K): This function calculates the maximum sum of a subarray of size K. if not arr or K <= 0 or K > len(arr): return 0 # Calculate the sum of the first subarray of size K max_sum = sum(arr[:K]) current_sum = max_sum # Sliding window approach for i in range(K, len(arr)): current_sum = current_sum - arr[i - K] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A wizard in a magical land has a few spells that he can cast. Each spell has a casting time and some energy cost. The wizard wants to practice his spells, but he has limited time and energy for each practice session. Given the total time `T` that the wizard has and the total energy `E` he can expend, determine the maximum number of different spells the wizard can practice in his session. Each spell can only be cast once per session. Constraints - The input satisfies the following conditions. - 1 ≤ N ≤ 1000 - 1 ≤ Ti, Ei ≤ 10000 - 0 ≤ T, E ≤ 100000 Input - The integer N is given on the first line. - The second line contains two integers T and E separated by a space. - The next N lines contain two integers each Ti and Ei separated by a space, representing the casting time and energy cost of each spell. Output Output the maximum number of different spells the wizard can practice in one line. Examples Input 5 10 15 2 3 3 4 4 5 5 6 6 7 Output 3 Input 4 12 10 3 3 4 2 6 5 7 4 Output 2","solution":"def max_spells(N, T, E, spells): spells.sort(key=lambda x: (x[0], x[1])) # Sort by casting time, then energy cost time_used = 0 energy_used = 0 spell_count = 0 for time, energy in spells: if time_used + time <= T and energy_used + energy <= E: time_used += time energy_used += energy spell_count += 1 return spell_count"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to determine the length of the longest subsequence of S in which the letters appear in non-decreasing alphabetical order. ------ Input ------ The input consists of a single line containing the string S. ------ Output ------ Output a single integer, which is the length of the longest subsequence of S where the letters are in non-decreasing order. ------ Constraints ------ 1 ≤ |S| ≤ 1000 ----- Sample Input 1 ------ abcpqr ----- Sample Output 1 ------ 6 ----- Sample Input 2 ------ zyx ----- Sample Output 2 ------ 1 ----- Explanation 1 ------ Example case 1: The entire string \\"abcpqr\\" is already in non-decreasing order, so the longest subsequence is \\"abcpqr\\" with length 6. Example case 2: The string \\"zyx\\" is in decreasing order, so the longest subsequence in non-decreasing order can only be one of the individual characters, hence the length is 1.","solution":"def longest_non_decreasing_subsequence_length(S): Returns the length of the longest subsequence of S where the letters are in non-decreasing order. n = len(S) if n == 0: return 0 dp = [1] * n for i in range(1, n): for j in range(i): if S[i] >= S[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 return max(dp)"},{"question":"Mark is a developer working on a new feature for a chat application. In this feature, he needs to implement a functionality that detects if any given message is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Your task is to help Mark by writing a function that determines if a given message is a palindrome. Input: The first line of input contains an integer T, representing the number of test cases. The next T lines each contain a single string S, which is the message to be checked. Output: For each test case, print \\"YES\\" if the message is a palindrome and \\"NO\\" otherwise. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 SAMPLE INPUT 3 A man a plan a canal Panama Was it a car or a cat I saw No \'x\' in Nixon SAMPLE OUTPUT YES YES YES Explanation: In the first test case, after removing spaces and converting to lowercase, \\"A man a plan a canal Panama\\" becomes \\"amanaplanacanalpanama\\", which is a palindrome. In the second test case, \\"Was it a car or a cat I saw\\" becomes \\"wasitacaroracatisaw\\", which is also a palindrome. In the third test case, \\"No \'x\' in Nixon\\" becomes \\"noxinnixon\\", which is another palindrome.","solution":"import re def is_palindrome(s): Returns \\"YES\\" if the input string s is a palindrome, \\"NO\\" otherwise. # Normalize the string to ignore spaces, punctuation, and capitalization normalized_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the normalized string is a palindrome return \\"YES\\" if normalized_s == normalized_s[::-1] else \\"NO\\" def detect_palindromes(T, messages): For T test cases, check if each message is a palindrome. Returns a list of results (\\"YES\\" or \\"NO\\") for each message. results = [] for message in messages: results.append(is_palindrome(message)) return results"},{"question":"The king in a certain kingdom has a rectangular garden of dimension n x m (n rows and m columns). The garden is initially completely barren due to a recent drought. The king decides to plant flowers in the garden in such a way that no two flowers are planted in adjacent cells (considering 4-directional adjacency). Your task is to determine the maximum number of flowers that can be planted in the garden following the above rule. Input A single line contains two integers n and m (1 ≤ n, m ≤ 1000). Output Print a single integer — the maximum number of flowers that can be planted. Examples Input 3 3 Output 5 Input 4 5 Output 10 Input 1 7 Output 4 Note In the first test case, one possible arrangement is: ``` F . F . F . F . F ``` where \'F\' denotes a flower and \'.\' denotes an empty space.","solution":"def max_flowers(n, m): Calculate the maximum number of flowers that can be planted in an n x m garden such that no two flowers are planted in adjacent cells. Parameters: n (int): Number of rows. m (int): Number of columns. Returns: int: Maximum number of flowers. return (n * m + 1) // 2"},{"question":"In a game, there is a square grid of size `n x n`. Each cell in the grid can either be empty or contain an obstacle. The goal of the game is to move from the top-left corner of the grid (1, 1) to the bottom-right corner of the grid (n, n) while avoiding obstacles. You can move one step at a time either to the right or downward. Determine the number of unique paths from the top-left corner to the bottom-right corner of the grid while avoiding obstacles. Input The first line of the input gives the number of test cases `t`. Then `t` test cases follow. Each test case has the following format: - The first line contains an integer `n` (2 ≤ n ≤ 10) representing the size of the grid. - The next `n` lines each contain `n` integers (0 or 1). A `0` indicates an empty cell, and a `1` indicates an obstacle. Output For each test case, output a single integer: the number of unique paths from the top-left corner to the bottom-right corner of the grid while avoiding obstacles. If there is no possible path, output 0. Example Input 3 3 0 0 0 0 1 0 0 0 0 4 0 1 0 0 0 0 0 1 1 0 0 0 0 0 1 0 2 0 1 1 0 Output 2 2 0","solution":"def unique_paths_with_obstacles(t, test_cases): def count_paths(grid, n): if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1] results = [] for case in test_cases: n, grid = case result = count_paths(grid, n) results.append(result) return results"},{"question":"Create a function that takes a list of positive integers and returns a dictionary. The dictionary should contain two keys: \'even\' and \'odd\'. The values for these keys should be lists containing the even and odd numbers from the input list, respectively. For example: ```python input_list = [1, 2, 3, 4, 5, 6, 7, 8, 9] returns {\'even\': [2, 4, 6, 8], \'odd\': [1, 3, 5, 7, 9]} ```","solution":"def separate_even_odd(numbers): Takes a list of positive integers and returns a dictionary with keys \'even\' and \'odd\' containing lists of even and odd numbers respectively. result = {\'even\': [], \'odd\': []} for number in numbers: if number % 2 == 0: result[\'even\'].append(number) else: result[\'odd\'].append(number) return result"},{"question":"You are given a sequence of N positive integers and an integer M. You are required to perform the following operation any number of times (including zero): 1. Pick a contiguous subsequence of the array. 2. Multiply each element in this subsequence by M. Determine if it is possible to make all the elements of the array equal. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M. The second line contains N space-separated integers A_{1}, A_{2}, dots, A_{N}. ------ Output ------ For each test case, print a single line containing the string \\"YES\\" if it is possible to make all the elements of the array equal or \\"NO\\" if it is impossible. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 10^{9} for each valid i 1 ≤ M ≤ 10^{9} ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ N, M ≤ 100 1 ≤ A_{i} ≤ 100 for each valid i Subtask #2 (70 points): original constraints ------ Sample Input 1 ------ 2 3 2 4 8 16 3 3 6 9 18 ------ Sample Output 1 ------ YES NO","solution":"def can_make_all_elements_equal(T, test_cases): results = [] for test_case in test_cases: N, M, A = test_case gcd_set = set() for num in A: while num % M == 0: num //= M gcd_set.add(num) if len(gcd_set) == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function `rotate_matrix(matrix)` that takes a square matrix (a list of lists) and rotates it 90 degrees clockwise. The matrix is guaranteed to be non-empty and square (n x n dimensions). **Example:** ```python matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # Output: [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ``` **Constraints:** - The input `matrix` will have dimensions `n x n` where `1 <= n <= 1000`. - The elements within the matrix are integers with absolute values not exceeding 10^9.","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix 90 degrees clockwise. Args: matrix (list of list of int): A square matrix to be rotated. Returns: list of list of int: The rotated matrix. n = len(matrix) rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"You are given a string representing a mathematical expression containing only non-negative integers, \'+\', \'-\', \'*\', \'/\', and spaces. Write a function to evaluate the expression. The expression must be evaluated using the standard operator precedence: 1. Multiplication and division have higher precedence over addition and subtraction. 2. Operators of the same precedence should be applied from left to right. Note: - Division should truncate toward zero. - The expression is guaranteed to be valid and not empty. Input A single line containing the expression as a string. Output Print the integer result of the expression. Constraints 1. The length of the input string will be between 1 and 1000. 2. The input string will contain only non-negative integers, \'+\', \'-\', \'*\', \'/\', and spaces. SAMPLE INPUT \\"3+2*2\\" SAMPLE OUTPUT 7 Explanation The multiplications and division are evaluated first and then addition and subtraction, respecting the left-to-right precedence. SAMPLE INPUT \\" 3/2 \\" SAMPLE OUTPUT 1 Explanation 3 divided by 2 should be truncated towards zero, resulting in 1. SAMPLE INPUT \\"3+5 / 2\\" SAMPLE OUTPUT 5 Explanation First, division is performed: 5 / 2 = 2 (truncated towards zero). Then addition: 3 + 2 = 5.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing only non-negative integers, \'+\', \'-\', \'*\', \'/\', and spaces. def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def apply_operation(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return int(a / b) # truncate towards zero def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue if tokens[i] >= \'0\' and tokens[i] <= \'9\': val = 0 while (i < len(tokens) and tokens[i] >= \'0\' and tokens[i] <= \'9\'): val = val * 10 + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_operation(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_operation(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_operation(val1, val2, op)) return values[-1] return evaluate(expression)"},{"question":"A large company has N employees, and each employee has a unique ID represented by an integer from 1 to N. The company wants to establish a mentorship program where each employee can choose one other employee as their mentor following these rules: 1. An employee cannot mentor themselves. 2. If employee A chooses employee B as their mentor, then employee B can not choose employee A as their mentor (no mutual mentorship). You are given a list containing T test cases. For each test case, determine the number of valid mentorship configurations modulo 1000000007. ------ Input ------ The first line of the input contains T, the number of test cases. For each test case, there is a line containing a single integer N, the number of employees. ------ Output ------ For each test case, print the number of valid mentorship configurations modulo 1000000007 on a separate line. ------ Constraints ------ 1 ≤ T ≤ 30 2 ≤ N ≤ 1000000000 ----- Sample Input 1 ------ 3 2 3 4 ----- Sample Output 1 ------ 1 2 9 ----- Explanation 1 ------ For N = 2, the configurations are: - Employee 1 chooses Employee 2 as mentor, and Employee 2 cannot choose anyone as mentor or vice versa. For N = 3, the configurations are: - Employee 1 chooses Employee 2, Employee 2 chooses Employee 3, Employee 3 cannot choose a mentor. - Employee 1 chooses Employee 3, Employee 2 chooses Employee 1, Employee 3 cannot choose a mentor. For N = 4, more combinations exist and can be found using the formula for derangements.","solution":"MOD = 1000000007 def derangement(n): if n == 1: return 0 if n == 2: return 1 dp = [0] * (n + 1) dp[1] = 0 dp[2] = 1 for i in range(3, n + 1): dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2]) % MOD return dp[n] def valid_mentorship_configurations(test_cases): results = [] for n in test_cases: results.append(derangement(n)) return results"},{"question":"In a distant city called Numerica, every year, the city holds a grand number-guessing festival. In this festival, contestants are given a number and they must guess the numbers that, when combined using multiplication, equal the given number. Specifically, the festival has a unique twist. Contestants need to find two sets of numbers where the product of each set equals the given number, and all numbers in the sets are primes. If multiple solutions exist, any will suffice. Given a number, determine if it is possible to find such two sets of prime numbers. If it is possible, return two lists of primes that satisfy the condition. If it is not possible, return \\"No solution\\". Input The first line contains a single integer T (1 ≤ T ≤ 100) – the number of test cases. The next T lines each contain a single integer N (2 ≤ N ≤ 10^12) – the number that needs to be factored into prime products. Output For each test case, if it is possible to find two sets of primes whose products are the given number, print the two sets of primes on two separate lines. If it is impossible, print \\"No solution\\". Examples Input 3 10 30 18 Output 2 5 2 5 2 3 5 2 3 5 3 3 2 3","solution":"import math def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_factors(n): factors = [] while n % 2 == 0: factors.append(2) n = n // 2 for i in range(3, int(math.sqrt(n)) + 1, 2): while n % i == 0: factors.append(i) n = n // i if n > 2: factors.append(n) return factors def find_two_sets(n): factors = prime_factors(n) if len(factors) < 2: return \\"No solution\\" return factors, factors def solve(T, cases): results = [] for n in cases: result = find_two_sets(n) if result == \\"No solution\\": results.append(result) else: results.append(\\" \\".join(map(str, result[0]))) results.append(\\" \\".join(map(str, result[1]))) return results def number_guessing_festival(T, cases): results = solve(T, cases) for res in results: print(res) # Example run: # number_guessing_festival(3, [10, 30, 18])"},{"question":"**Task** You are given an input string that represents a mathematical expression containing integers and the operators `+` and `*` without any spaces. Your task is to evaluate the expression according to the standard order of operations (PEMDAS/BODMAS rules) and return the result as an integer. **Example:** For the input `\\"2+3*4\\"`, the result should be `14`. For the input `\\"5*6+7\\"`, the result should be `37`. For the input `\\"1+2*3+4*5+6\\"`, the result should be `33`. **Input/Output** - `[input]` string `expression` A string representing a mathematical expression containing integers and the operators `+` and `*`, with no spaces. - `[output]` integer The result of evaluating the expression.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers and the operators `+` and `*` without any spaces according to the standard order of operations. # Split the expression into components keeping only + and * import re tokens = re.split(r\'(D)\', expression) # First, evaluate all multiplications i = 0 while i < len(tokens): if tokens[i] == \'*\': # evaluate the multiplication and replace it in the list left = int(tokens[i-1]) right = int(tokens[i+1]) product = left * right tokens = tokens[:i-1] + [str(product)] + tokens[i+2:] i -= 1 # re-evaluate the same position as the array has shifted i += 1 # After multiplication, process the additions result = 0 i = 0 while i < len(tokens): if tokens[i] == \'+\': result += int(tokens[i+1]) i += 1 else: result += int(tokens[i]) i += 1 return result"},{"question":"Alex is participating in a local chess tournament and is currently solving some practice problems. One of the problems involves a grid with multiple empty cells and some obstacles. The objective is to find the number of distinct paths from the top-left corner of the grid to the bottom-right corner. Alex can only move right or down at each step, and he cannot move into a cell with an obstacle. Write a function `countPaths(grid)` that takes a 2D list representing the grid, where `0` indicates an empty cell and `1` indicates an obstacle, and returns the number of distinct paths from the top-left corner to the bottom-right corner. If there is no valid path, the function should return 0. -----Input----- The input grid will be a 2D list of integers with dimensions m x n (1 ≤ m, n ≤ 100), where `0` represents an empty cell and `1` represents an obstacle. -----Output----- Print a single integer, the number of distinct paths from the top-left corner to the bottom-right corner of the grid. -----Examples----- Input ``` [[0, 0, 0], [0, 1, 0], [0, 0, 0]] ``` Output 2 Input ``` [[0, 1], [0, 0]] ``` Output 1 -----Note----- In the first sample, the grid looks like this: ``` 0 0 0 0 1 0 0 0 0 ``` There are two possible paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second sample: ``` 0 1 0 0 ``` There is only one path from the top-left corner to the bottom-right corner: Down -> Right","solution":"def countPaths(grid): m, n = len(grid), len(grid[0]) # Early exit if starting or ending point is an obstacle if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize the dp array dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Start point for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 # If there\'s an obstacle, there\'s no path else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a grid with n rows (numbered from 1 to n) and m columns (numbered from 1 to m). Each cell in the grid contains a number a_{i, j} which can be a positive integer or zero. You need to start at the top-left cell (1, 1) and reach the bottom-right cell (n, m). In each step, you can either move to the right cell ( (x, y+1)) or the bottom cell (x+1, y), but you must collect exactly k items (the sum of the values in the visited cells should be exactly k). Determine if it is possible to reach the bottom-right cell (n, m) from the top-left cell (1, 1) while collecting exactly k items. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". -----Input----- The first line contains one integer t (1 le t le 200) — the number of test cases. The first line of each test case contains three integers n, m, and k (2 le n, m le 30, 0 le k le 450) — the dimensions of the grid and the number of items to collect. Then n lines follow, the i-th line contains m integers a_{i, 1}, a_{i, 2}, ..., a_{i, m} (0 le a_{i, j} le 30). -----Output----- For each test case, print the result. It should be \\"YES\\" if you can reach the bottom-right cell with exactly k items, otherwise print \\"NO\\". -----Example----- Input 3 2 2 3 1 2 1 0 3 3 6 0 2 1 1 0 2 1 2 1 3 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Output YES YES NO -----Note----- In the first test case, you can move from (1, 1) to (2, 1) to (2, 2) and collect exactly 1+1+1=3 items. In the second test case, a possible path is (1, 1) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3), collecting exactly 0+2+0+2+1+1=6 items. In the third test case, it is impossible to collect exactly 5 items in any path.","solution":"def is_possible_to_collect_k_items(n, m, k, grid): from collections import deque # Define the directions in which movement is allowed: right and down directions = [(0, 1), (1, 0)] target = (n-1, m-1) # Initial BFS setup queue = deque([(0, 0, grid[0][0])]) visited = set([(0, 0, grid[0][0])]) while queue: x, y, collected = queue.popleft() # If we reached the target with exact k items if (x, y) == target and collected == k: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_collected = collected + grid[nx][ny] state = (nx, ny, new_collected) if state not in visited: visited.add(state) queue.append(state) return \\"NO\\" def solve(t, test_cases): results = [] for i in range(t): n, m, k = test_cases[i][0] grid = test_cases[i][1] result = is_possible_to_collect_k_items(n, m, k, grid) results.append(result) return results"},{"question":"A delivery van has a maximum weight capacity `W` (1 ≤ W ≤ 10^4). To maximize the value of the shipments, the delivery company has several packages available, where each package has a weight `wi` (1 ≤ wi ≤ W) and a value `vi` (1 ≤ vi ≤ 10^4). Given `n` packages and their respective weights and values, determine the maximum total value the delivery van can carry without exceeding the weight limit `W`. Input The first line contains two integers, `n` and `W` (1 ≤ n ≤ 100, 1 ≤ W ≤ 10^4) — the number of packages and the maximum weight capacity of the delivery van. Each of the next `n` lines contains two integers, `wi` and `vi` — the weight and value of the `i`-th package. Output Print a single integer — the maximum total value of the packages that can be carried by the delivery van without exceeding the weight capacity `W`. Examples Input 4 7 2 10 3 14 5 7 4 8 Output 24 Input 3 50 10 60 20 100 30 120 Output 220","solution":"def maximize_delivery_value(n, W, packages): Given n packages with weights and values, and a max weight capacity W, determine the maximum total value of the packages that can be carried. Parameters: n (int): Number of packages W (int): Maximum weight capacity of the delivery van packages (list of tuples): List of (weight, value) tuples for each package Returns: int: The maximum total value of the packages that can be carried # Create a dp array to store the maximum value for each weight capacity dp = [0] * (W + 1) # Iterate through each package for weight, value in packages: # Update the dp array from right to left for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W] # Example usage n = 4 W = 7 packages = [(2, 10), (3, 14), (5, 7), (4, 8)] print(maximize_delivery_value(n, W, packages)) # Output: 24"},{"question":"Given an array `arr[]` of size `N`, the task is to identify the element that appears more than `N/2` times (if any). Example 1: Input: N = 7 arr[] = 3 3 4 2 4 4 2 4 4 Output: 4 Explanation: The frequency of 4 is 5 which is more than 7/2 = 3.5, so 4 is the majority element. Example 2: Input: N = 5 arr[] = 3 1 3 3 2 Output: 3 Explanation: The frequency of 3 is 3 which is more than 5/2 = 2.5, so 3 is the majority element. Example 3: Input: N = 4 arr[] = 1 2 3 4 Output: -1 Explanation: Since there is no element that appears more than 4/2 = 2 times, the output is -1. Your Task: You don\'t need to read or print anything. Your task is to complete the function `find_majority_element()` which takes the array as input parameter and returns the majority element. If there is no majority element, return -1. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= Length of Array <= 100 1 <= Elements of Array <= 100","solution":"def find_majority_element(arr): Returns the majority element (appears more than N/2 times) in the array `arr`. If no such element exists, returns -1. candidate = None count = 0 # Phase 1: Finding a candidate for majority element for num in arr: if count == 0: candidate = num count += (1 if num == candidate else -1) # Phase 2: Verify if the candidate is actually a majority element if candidate is not None: if arr.count(candidate) > (len(arr) // 2): return candidate return -1"},{"question":"In many programming scenarios, calculating the minimum weight required to traverse a graph or tree efficiently is crucial. Such problems often involve algorithms like Dijkstra\'s for graphs or dynamic programming for trees. Given a tree with `n` nodes, each node has a value representing the weight or cost to traverse that node. The tree is structured such that each node has zero or more child nodes. You are required to write a program that determines the minimum path sum from the root node to any leaf node. A leaf node is defined as a node with no children. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of nodes in the tree. - The second line contains `n` space-separated integers, where the i-th integer (1-based index) represents the weight of the i-th node. - The next `n-1` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n), representing an edge between nodes `a` and `b`. # Output - Print the minimum path sum from the root node (node `1`) to any leaf node. # Constraints - Each node has at most one parent (except for the root node which has none), making the input a valid tree. - The weight of each node is a non-negative integer. # Examples Example 1 **Input:** ``` 5 3 2 4 1 6 1 2 1 3 2 4 2 5 ``` **Output:** ``` 8 ``` **Explanation:** - The tree can be represented as: ``` 1(3) / 2(2) 3(4) / 4(1) 5(6) ``` - Possible paths from root to leaf nodes and their sums: - 1 -> 2 -> 4 = 3 + 2 + 1 = 6 - 1 -> 2 -> 5 = 3 + 2 + 6 = 11 - 1 -> 3 = 3 + 4 = 7 - Minimum path sum is 6. Example 2 **Input:** ``` 3 1 5 2 1 2 1 3 ``` **Output:** ``` 3 ``` **Explanation:** - The tree can be represented as: ``` 1(1) / 2(5) 3(2) ``` - Possible paths from root to leaf nodes and their sums: - 1 -> 2 = 1 + 5 = 6 - 1 -> 3 = 1 + 2 = 3 - Minimum path sum is 3.","solution":"def min_path_sum_from_root_to_leaf(n, weights, edges): from collections import defaultdict import sys tree = defaultdict(list) for a, b in edges: tree[a].append(b) tree[b].append(a) def dfs(node, parent): # If the node is a leaf node if not tree[node] or (len(tree[node]) == 1 and tree[node][0] == parent): return weights[node - 1] min_sum = sys.maxsize for neighbor in tree[node]: if neighbor != parent: min_sum = min(min_sum, dfs(neighbor, node)) return weights[node - 1] + min_sum return dfs(1, -1)"},{"question":"You are given a string containing capital letters, and your task is to determine whether the string can be converted to a \\"special\\" string by removing some characters. A \\"special\\" string is defined as a string that reads the same backward as forward (i.e., it is a palindrome), and it should have at least three unique characters. Write a function that checks if it is possible to create such a \\"special\\" string from the given input string. Note that the only operation allowed is the deletion of characters, and the order of the remaining characters cannot be changed. Input format: There is only one line in the input, which contains the string to be checked. Output format: If it is possible to convert the given string to a \\"special\\" string, print \\"It\'s special!\\" - else, print \\"Sorry, try again!\\" Constraints: 1 ≤ Length of string ≤ 100 Example: Consider the string: \\"AABCCBAA\\", the answer would be \\"It\'s special!\\" since the string \\"ABCCBA\\" is a palindrome and has at least three unique characters: \'A\', \'B\', \'C\'. Consider the string: \\"AAABB\\", the answer would be \\"Sorry, try again!\\" because even though the string \\"ABA\\" is a palindrome, it does not have at least three unique characters. SAMPLE INPUT ABBACBCBA SAMPLE OUTPUT It\'s special! Explanation By deleting certain characters, you can get the palindrome \\"ABBACBBA\\" which has at least three unique characters: \'A\', \'B\', \'C\'. Therefore, it is possible to create a \\"special\\" string.","solution":"def is_special_string(s): Check if it is possible to convert the given string into a \\"special\\" string. A \\"special\\" string is a palindrome with at least three unique characters. :param s: Input string :return: \\"It\'s special!\\" if possible to create a special string, otherwise \\"Sorry, try again!\\" from collections import Counter def is_palindrome_check_possible(s): # Check if there is a possibility for the string to become a palindrome by counting character frequencies frequency = Counter(s) odd_count = sum(1 for count in frequency.values() if count % 2 == 1) # A string can form a palindrome if at most one character has an odd frequency return odd_count <= 1 if is_palindrome_check_possible(s): unique_chars = set(s) if len(unique_chars) >= 3: return \\"It\'s special!\\" return \\"Sorry, try again!\\""},{"question":"In a busy workshop, there are a number of different types of tools lying around. Each tool can be identified by a string of lowercase Latin letters. A tool is considered \\"useful\\" if its identifier can be turned into a palindrome by reordering its characters. The workshop owner, Gina, wants to identify which tools are useful and which are not. A palindrome is a string that reads the same forwards and backwards, such as \\"aba\\" or \\"racecar\\". Given a list of tool identifiers, determine which tools are useful. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000), the number of tools. - Each of the next n lines contains a single string of lowercase Latin letters which represents the identifier of a tool. The length of each string is between 1 and 1000. Output: - For each tool identifier, output \\"Useful\\" if the identifier can be rearranged to form a palindrome, otherwise, output \\"Not Useful\\". Examples: Input: 4 radar abc abb car Output: Useful Not Useful Useful Not Useful Note: - In the first example, \\"radar\\" is already a palindrome. - In the second example, \\"abc\\" cannot be rearranged to form a palindrome because all characters are distinct. - In the third example, \\"abb\\" can be rearranged to form \\"bab\\", which is a palindrome. - In the fourth example, \\"car\\" cannot be rearranged to form a palindrome.","solution":"def is_useful_tool(identifier): Determines if the tool identifier can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the identifier char_counts = Counter(identifier) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can be rearranged to a palindrome if it has at most one character with an odd frequency return odd_count <= 1 def determine_useful_tools(n, identifiers): Determines which of the given tool identifiers are useful. results = [] for identifier in identifiers: if is_useful_tool(identifier): results.append(\\"Useful\\") else: results.append(\\"Not Useful\\") return results"},{"question":"In a distant land, there is a peculiar type of magic called \\"string inversion\\". This magic allows you to transform a string into its reverse, but only under certain conditions. A string is considered \\"invertible\\" if and only if the following conditions are met: 1. The length of the string is even. 2. The first half of the string is equal to the reverse of the second half. Two wizards are playing a game where they have to determine if a given string can be inverted. Given a list of strings, you need to determine whether each string is invertible according to the rules described. Input Format The first line contains an integer, t, denoting the number of strings. Each of the following t lines contains a single string s. Constraints 1 leq t leq 1000 1 leq |s| leq 1000 All strings contain only lowercase English letters. Output Format For each string, print \\"YES\\" if the string is invertible, and \\"NO\\" otherwise. Sample Input 3 abba aabb abcba Sample Output YES NO NO Explanation The first string \\"abba\\" is invertible because it has an even length and the first half \\"ab\\" is equal to the reverse of the second half \\"ba\\". The second string \\"aabb\\" is not invertible because the first half \\"aa\\" is not equal to the reverse of the second half \\"bb\\". The third string \\"abcba\\" is not invertible because its length is odd.","solution":"def is_invertible(s): Determines if the string s is invertible according to the defined rules. n = len(s) if n % 2 != 0: return \\"NO\\" half = n // 2 first_half = s[:half] second_half_reversed = s[half:][::-1] if first_half == second_half_reversed: return \\"YES\\" else: return \\"NO\\" def check_strings(strings): Checks each string in the list to see if it is invertible. results = [] for s in strings: results.append(is_invertible(s)) return results"},{"question":"Given an array and a value k, reverse the array from the start to the kth element (inclusive). Example 1: Input: N = 6 k = 3 A[] = {1, 2, 3, 4, 5, 6} Output: 4 3 2 1 5 6 Example 2: Input: N = 7 k = 5 A[] = {10, 20, 30, 40, 50, 60, 70} Output: 50 40 30 20 10 60 70 Your Task: You don\'t need to read input or print anything. Your task is to complete the function reverseK() which takes the array A[], its size N, and the value k as inputs and modify the array in place. Expected Time Complexity: O(k) Expected Auxiliary Space: O(1) Constraints: 1<=N<=10^5 1<=k<=N 0<=A[i]<=10^5","solution":"def reverseK(A, N, k): Reverses the array A from the start to the kth element (inclusive) in place. Parameters: A (list): The array to be reversed N (int): The size of the array k (int): The index up to which the array should be reversed Returns: None # First we need to reverse the elements from the start to the kth element. # We reverse A[0:k+1] to include the kth element. start = 0 end = k - 1 while start < end: A[start], A[end] = A[end], A[start] start += 1 end -= 1"},{"question":"Create a function `anagram_pair?(str1, str2)` that takes two string arguments and returns true if the two strings are anagrams of each other and false otherwise. An anagram is a word formed by rearranging the letters of another, such as `cinema`, formed from `iceman`. **Properties:** - Both inputs must be strings - Neither of the strings can be nil or empty - Two strings are anagrams if they contain the same letters in the same frequencies - The comparison should be case insensitive - Non-letter characters should be ignored in the comparison","solution":"def anagram_pair(str1, str2): Returns True if str1 and str2 are anagrams of each other, excluding non-letter characters and ignoring case. # Ensure both inputs are valid strings and not empty if not isinstance(str1, str) or not isinstance(str2, str) or not str1 or not str2: return False # Filter out non-letter characters and convert to lowercase str1_filtered = \\"\\".join(char.lower() for char in str1 if char.isalpha()) str2_filtered = \\"\\".join(char.lower() for char in str2 if char.isalpha()) # Compare sorted versions of the filtered strings return sorted(str1_filtered) == sorted(str2_filtered)"},{"question":"Alice has N chocolates, and she wants to distribute them equally among her M friends. Alice can perform a series of operations to break and distribute the chocolates. In the i^{th} operation, she\'ll break a chocolate into i+1 pieces (from a single chocolate). Each piece can be considered as an individual smaller chocolate in further operations or distributions. Can Alice distribute the chocolates equally among her M friends after performing these operations? ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first and only line of each test case contains two space-separated integers N and M. ------ Output Format ------ For each test case, output YES if Alice can distribute the chocolates equally, NO otherwise. Note that the checker is case-insensitive. So, YES, Yes, yEs are all considered the same. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N, M ≤ 10^{9} ----- Sample Input 1 ------ 3 10 2 7 3 9 9 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: Alice can distribute 10 chocolates among 2 friends by simply giving 5 chocolates to each friend. Test case 2: It is impossible to distribute 7 chocolates equally among 3 friends. Test case 3: Since the number of chocolates is the same as the number of friends, Alice can simply give one chocolate to each friend.","solution":"def can_distribute_chocolates(N, M): Returns \'YES\' if N chocolates can be distributed equally among M friends, otherwise returns \'NO\'. return \'YES\' if N % M == 0 else \'NO\' def process_test_cases(test_cases): results = [] for N, M in test_cases: results.append(can_distribute_chocolates(N, M)) return results"},{"question":"Two robots are playing a game on a 5x5 grid. Each robot starts at a distinct cell and their goal is to reach a meeting point on the grid within a limited number of moves. A move consists of moving one cell either up, down, left, or right. The robots can pass through obstacles but cannot end their move in an obstacle cell. The robots can also pass through each other but can only meet in a single cell to win the game. Given the initial positions of the robots, the positions of the obstacles, and the maximum number of moves allowed, determine if the robots can meet within the given moves. Input Format: The first line contains an integer, g, the number of games. For each game: - The first line contains three space-separated integers: r1, c1, the starting row and column for the first robot, respectively. - The second line contains three space-separated integers: r2, c2, the starting row and column for the second robot, respectively. - The third line contains an integer, o, the number of obstacles. - The next o lines each contain two space-separated integers: r, c, the row and column of an obstacle. - The last line contains an integer, m, the maximum number of moves allowed. Output Format: For each game, print \\"YES\\" if the robots can meet within the given moves; otherwise, print \\"NO\\". Constraints: 1 <= g <= 100 1 <= r1, c1, r2, c2 <= 5 1 <= o <= 5 1 <= r, c <= 5 1 <= m <= 10 Example input: 1 1 1 5 5 2 2 3 3 4 5 Example output: NO Explanation: In this example, the robots start at (1, 1) and (5, 5). Even though they have 5 moves, they cannot meet due to the positioning of the obstacles. Hence, the output is \\"NO\\".","solution":"from collections import deque def can_robots_meet(games): results = [] directions = [(-1,0), (1,0), (0,-1), (0,1)] def within_bounds(r, c): return 1 <= r <= 5 and 1 <= c <= 5 def bfs(start1, start2, obstacles, max_moves): # BFS for robot 1 queue1 = deque([(start1[0], start1[1], 0)]) visited1 = {} visited1[(start1[0], start1[1])] = 0 while queue1: r, c, moves = queue1.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if within_bounds(nr, nc) and (nr, nc) not in obstacles and (nr, nc) not in visited1: if moves + 1 <= max_moves: queue1.append((nr, nc, moves + 1)) visited1[(nr, nc)] = moves + 1 # BFS for robot 2 queue2 = deque([(start2[0], start2[1], 0)]) visited2 = {} visited2[(start2[0], start2[1])] = 0 while queue2: r, c, moves = queue2.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if within_bounds(nr, nc) and (nr, nc) not in obstacles and (nr, nc) not in visited2: if moves + 1 <= max_moves: queue2.append((nr, nc, moves + 1)) visited2[(nr, nc)] = moves + 1 # Check for meeting point for pos, move1 in visited1.items(): if pos in visited2 and move1 + visited2[pos] <= max_moves: return True return False for game in games: r1, c1, r2, c2, obstacles, max_moves = game obstacles = set(tuple(ob) for ob in obstacles) if bfs((r1, c1), (r2, c2), obstacles, max_moves): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In the village of Parkhoward, there is a tradition of building custom jewel necklaces for the annual fair. Each necklace is made up of a series of beads, and different types of beads are represented by lowercase letters. Artisans receive orders specifying the exact sequence of beads (i.e., the type and order of beads) for each necklace that customers want. However, due to the high demand for custom jewelry, the artisans sometimes need to quickly reorder them from their initial configuration. Your task is to write an algorithm to determine the minimum number of adjacent swaps required to transform a given sequence of beads (initial configuration) into the desired sequence (target configuration). An adjacent swap consists of swapping two neighboring beads in the necklace. Input The input consists of multiple datasets. Each dataset contains an initial configuration of beads and a target configuration of the same length. The input format is as follows: n s1 t1 s2 t2 ... sn tn n is the number of datasets. Each of the following n lines contains two strings of the same length, s and t: - s is the initial configuration of the beads. - t is the desired configuration of the beads. The length of each string is between 1 and 10, inclusive, and both strings consist only of lowercase letters. Output For each dataset, output the minimum number of adjacent swaps required to transform s into t in a new line. If it is impossible to transform s into t, output `-1`. Example Input 3 abc cba abcd dcba ab cd Output 3 6 -1","solution":"def min_adjacent_swaps(n, datasets): Returns the minimum number of adjacent swaps needed to transform the initial configuration to the target configuration for each dataset. If it\'s impossible to transform, return -1 for that dataset. def swap_count(s, t): n = len(s) if sorted(s) != sorted(t): return -1 s = list(s) t = list(t) swaps = 0 for i in range(n): if s[i] != t[i]: swap_idx = s.index(t[i], i) while swap_idx > i: s[swap_idx], s[swap_idx - 1] = s[swap_idx - 1], s[swap_idx] swaps += 1 swap_idx -= 1 return swaps results = [] for dataset in datasets: s, t = dataset.split() results.append(swap_count(s, t)) return results # Example Usage # n = 3 # datasets = [\\"abc cba\\", \\"abcd dcba\\", \\"ab cd\\"] # print(min_adjacent_swaps(n, datasets)) # Output: [3, 6, -1]"},{"question":"Given an array of integers, you need to find the length of the longest subsequence that consists of consecutive integers. The consecutive numbers can be in any order within the subsequence. # Input Format - The first line contains an integer N denoting the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. # Output Format Print a single integer representing the length of the longest subsequence of consecutive integers. # Constraints - 1 ≤ N ≤ 10^5 - -10^9 ≤ array[i] ≤ 10^9 # Examples Input ``` 7 100 4 200 1 3 2 101 ``` Output ``` 4 ``` Explanation The longest subsequence of consecutive integers is [1, 2, 3, 4]. Input ``` 9 1 9 3 10 4 20 2 5 6 ``` Output ``` 6 ``` Explanation The longest subsequence of consecutive integers is [1, 2, 3, 4, 5, 6].","solution":"def longest_consecutive_subsequence_length(arr): Finds the length of the longest subsequence of consecutive integers in the array. num_set = set(arr) longest_length = 0 for num in num_set: if num - 1 not in num_set: # start of a new sequence current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length"},{"question":"Create a function that takes a single parameter, a string representing a time in 24-hour format (e.g., \\"14:30\\", \\"03:15\\"), and returns the corresponding time in 12-hour format with AM/PM suffix. **Rules:** - The input string will always be in the format \\"HH:MM\\" where HH is two digits from 00 to 23 and MM is two digits from 00 to 59. - The output string should be in the format \\"HH:MM AM/PM\\" where HH is two digits from 01 to 12 and MM is the unchanged two digits from the input. **Examples:** ```python convert_to_12_hour_format(\\"14:30\\") == \\"02:30 PM\\" convert_to_12_hour_format(\\"03:15\\") == \\"03:15 AM\\" convert_to_12_hour_format(\\"00:00\\") == \\"12:00 AM\\" convert_to_12_hour_format(\\"12:45\\") == \\"12:45 PM\\" convert_to_12_hour_format(\\"23:59\\") == \\"11:59 PM\\" ```","solution":"def convert_to_12_hour_format(time24): Converts a time from 24-hour format to 12-hour format with AM/PM suffix. Args: time24 (str): A string representing the time in 24-hour format \\"HH:MM\\" Returns: str: The time in 12-hour format with AM/PM suffix # Splitting the time string into hours and minutes hours, minutes = map(int, time24.split(\\":\\")) # Determining the period (AM/PM) period = \\"AM\\" if hours < 12 else \\"PM\\" # Converting 0 hours to 12 for 12-hour format if hours == 0: hours = 12 # Adjusting hours greater than 12 for 12-hour format elif hours > 12: hours -= 12 # Formatting the hours into two digits return f\\"{hours:02}:{minutes:02} {period}\\""},{"question":"Given a sequence of movements in a 2D grid, your task is to determine the final position of an object starting from a given initial position. The grid has dimensions m x n (1 <= m, n <= 100). Each point in the grid is represented by coordinates (i, j) where 1 <= i <= m and 1 <= j <= n. The object can move in four possible directions: UP, DOWN, LEFT, and RIGHT. The movements will be provided as a sequence of commands with the direction and the number of steps to move in that direction, e.g., \\"UP 3\\", \\"RIGHT 2\\". If a movement causes the object to move outside the borders of the grid, it should stop exactly at the border. Input: - The first line of input contains two integers `m` and `n`, separated by a space, which represent the dimensions of the grid. - The second line contains two integers `start_i` and `start_j`, separated by a space, representing the initial position of the object. - The next lines contain the movement commands until the line \\"STOP\\" is encountered. Each command is of the form \\"DIRECTION k\\" where `DIRECTION` can be \\"UP\\", \\"DOWN\\", \\"LEFT\\", or \\"RIGHT\\", and `k` is the number of steps to move in that direction. Output: - The output should be the final position of the object as two integers, separated by a space. Example: Input: 6 5 3 3 UP 1 LEFT 2 DOWN 3 RIGHT 1 STOP Output: 2 2 Explanation: 1. The object starts at (3, 3). 2. It moves UP 1 step to (2, 3). 3. It moves LEFT 2 steps to (2, 1). 4. It moves DOWN 3 steps but stops at the border at (5, 1). 5. It moves RIGHT 1 step to (5, 2). 6. \\"STOP\\" command signifies the end of movement. The final position is (5, 2).","solution":"def final_position(m, n, start_i, start_j, commands): Determines the final position of an object in a m x n grid after a sequence of movement commands. Parameters: m (int): Number of rows in the grid. n (int): Number of columns in the grid. start_i (int): Initial row position of the object. start_j (int): Initial column position of the object. commands (list of str): List of movement commands in the format \\"DIRECTION k\\". Returns: tuple: Final position of the object as (i, j). i, j = start_i, start_j for command in commands: if command == \\"STOP\\": break direction, steps = command.split() steps = int(steps) if direction == \\"UP\\": i = max(1, i - steps) elif direction == \\"DOWN\\": i = min(m, i + steps) elif direction == \\"LEFT\\": j = max(1, j - steps) elif direction == \\"RIGHT\\": j = min(n, j + steps) return (i, j)"},{"question":"In a remote village, there are `n` houses connected by `n-1` paths. Each path connects exactly two houses and enables them to communicate. The network of houses and paths forms a tree structure, which means there is exactly one path between any two houses. The head of the village wants to add a new path between any two houses to improve the communication network. The cost of adding a new path between two houses is proportional to the distance between them, which is measured as the shortest path in the current tree. Your task is to find the minimum cost to add a single new path to the current tree so that the cost is minimized. **Input** The first line contains an integer `n` (2 ≤ n ≤ 100,000) — the number of houses. The next `n-1` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) — indicating that there is a path of length `w` connecting house `u` and house `v`. **Output** Print a single integer — the minimum cost of adding a new path between any two houses. **Examples** **Input** 4 1 2 3 2 3 1 3 4 4 **Output** 2 **Input** 5 1 2 2 1 3 3 3 4 2 3 5 5 **Output** 3","solution":"def min_cost_to_add_path(n, paths): min_cost = float(\'inf\') for path in paths: u, v, w = path if w < min_cost: min_cost = w return min_cost # Example usage n = 4 paths = [(1, 2, 3), (2, 3, 1), (3, 4, 4)] print(min_cost_to_add_path(n, paths)) # Output: 1"},{"question":"Given an array of integers, you need to perform the following operations efficiently: 1. **Update the value** of an element at a given index. 2. Find the **minimum value** in a subarray. Write a program to support these operations. ----- Input ----- First line contains two integers `N` and `Q` denoting the number of elements in the array and the number of operations respectively. The second line contains N integers representing the elements of the array. Each of the next Q lines describes an operation and can be one of the following two types: - `1 x y`: Update the element at index `x` to `y`. - `2 l r`: Query the minimum value in the subarray from index `l` to `r` (inclusive). Note: - Arrays are zero-indexed. - Indexes for the update and query operations are inclusive. - Print the answers for query operations in the order they are performed. ----- Output ----- For each query of type `2 l r`, output the minimum value in the specified range. ----- Constraints ----- - 1 ≤ N, Q ≤ 10^{5} - -10^{9} ≤ Array elements, y ≤ 10^{9} - 0 ≤ x < N - 0 ≤ l ≤ r < N ----- Sample Input 1 ----- 5 5 1 3 2 7 9 2 1 3 1 2 6 2 1 3 2 0 4 1 4 1 ----- Sample Output 1 ----- 2 6 1 ----- Explanation 1 ---- The initial array is [1, 3, 2, 7, 9]. - For the first query `2 1 3`, the subarray is [3, 2, 7], the minimum value is 2. - The operation `1 2 6` changes the array to [1, 3, 6, 7, 9]. - The second query `2 1 3`, the subarray is [3, 6, 7], the minimum value is 3. - The third query `2 0 4`, the subarray is [1, 3, 6, 7, 9], the minimum value is 1. - The operation `1 4 1` changes the array to [1, 3, 6, 7, 1]. The output corresponds to the results of the query operations.","solution":"class NumArray: def __init__(self, nums): self.nums = nums self.n = len(nums) self.st = [0] * (4 * self.n) self.build(0, 0, self.n - 1) def build(self, node, start, end): if start == end: self.st[node] = self.nums[start] else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self.build(left_child, start, mid) self.build(right_child, mid + 1, end) self.st[node] = min(self.st[left_child], self.st[right_child]) def update(self, idx, value, node=0, start=0, end=None): if end is None: end = self.n - 1 if start == end: self.nums[idx] = value self.st[node] = value else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 if start <= idx <= mid: self.update(idx, value, left_child, start, mid) else: self.update(idx, value, right_child, mid + 1, end) self.st[node] = min(self.st[left_child], self.st[right_child]) def query(self, L, R, node=0, start=0, end=None): if end is None: end = self.n - 1 if R < start or L > end: return float(\'inf\') if L <= start and end <= R: return self.st[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 left_query = self.query(L, R, left_child, start, mid) right_query = self.query(L, R, right_child, mid + 1, end) return min(left_query, right_query) def perform_operations(N, Q, nums, operations): numArray = NumArray(nums) results = [] for op in operations: if op[0] == 1: numArray.update(op[1], op[2]) elif op[0] == 2: results.append(numArray.query(op[1], op[2])) return results"},{"question":"A company organizes a coding competition where participants earn points based on their performance. Each participant is awarded a score between 0 and 100, inclusive. Given an array of integers representing the scores of participants, the organizers want to determine the rank of each participant. The rank is determined as follows: 1. The participant with the highest score gets rank 1. 2. Participants with the same score receive the same rank. 3. The participants are ranked in descending order of their scores. Write a function that takes an array of integers representing the scores of participants and returns an array of integers representing the ranks of the participants. Function Signature: ```python def calculate_ranks(scores: List[int]) -> List[int]: ``` # Input - An array of integers `scores` where `0 <= scores[i] <= 100` for `1 <= i <= n` and `1 <= n <= 10^5`. # Output - An array of integers representing the ranks of the participants. # Example Input ```python scores = [50, 80, 80, 70] ``` Output ```python [4, 1, 1, 3] ``` # Explanation - The participant with the score 80 is ranked 1st. - The next participant with the score 80 also gets the 1st rank. - The participant with the score 70 is ranked 3rd. - The participant with the score 50 is ranked 4th.","solution":"from typing import List def calculate_ranks(scores: List[int]) -> List[int]: scores_with_index = [(score, index) for index, score in enumerate(scores)] scores_sorted = sorted(scores_with_index, reverse=True, key=lambda x: x[0]) ranks = [0] * len(scores) current_rank = 1 for i, (score, index) in enumerate(scores_sorted): if i > 0 and score < scores_sorted[i - 1][0]: current_rank = i + 1 ranks[index] = current_rank return ranks"},{"question":"David is hosting a coding competition and wants to include a challenge that involves string manipulation. He wants a program that, given a string, can determine the length of the longest substring with all unique characters. David provides you with the task of writing such a program. INPUT The first line of input contains an integer T denoting the number of test cases. Each test case consists of a single line containing a string S. OUTPUT Output contains T lines, each line containing the length of the longest substring with all unique characters for the respective test cases. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 S consists of only English letters and digits. SAMPLE INPUT 2 abcabcbb bbbbb SAMPLE OUTPUT 3 1 Explanation In the first test case, the longest substring with all unique characters is \\"abc\\", which has a length of 3. For the second test case, the longest substring with all unique characters is \\"b\\", which has a length of 1.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all unique characters in the string s. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 else: longest = max(longest, i - start + 1) char_index_map[char] = i return longest def process_test_cases(T, test_cases): Given a number of test cases and the test cases themselves, returns the results for each test case. results = [] for i in range(T): results.append(longest_unique_substring_length(test_cases[i])) return results"},{"question":"Alice is very interested in palindromic sequences. She defines a sequence as palindromic if it reads the same backward as forward. For example, \\"radar\\", \\"level\\", and \\"madam\\" are palindromic sequences, but \\"hello\\" and \\"world\\" are not. Alice has an array `a` of `n` positive integers. She wants to know how many different continuous subarrays of `a` are palindromic. -----Input----- The input consists of multiple test cases. The first line contains a single integer `t` (`1 <= t <= 100`), which denotes the number of test cases. Description of the test cases follows. The first line of each test case contains an integer `n` (`1 <= n <= 1000`). The second line of each test case contains `n` integers `a_1, a_2, ..., a_n` (`1 <= a_i <= 1000`). It is guaranteed that the sum of `n` over all test cases does not exceed `1000`. -----Output----- For each test case, print an integer — the number of different continuous palindromic subarrays. -----Examples----- Input 2 5 1 2 3 2 1 4 1 3 2 4 Output 7 4 -----Note----- In the first example, the palindromic subarrays are: [1], [2], [3], [2], [1], [2, 3, 2], and [1, 2, 3, 2, 1]. In the second example, all single element subarrays are palindromic, namely: [1], [3], [2], [4].","solution":"def count_palindromic_subarrays(a): def is_palindromic(subarray): return subarray == subarray[::-1] n = len(a) count = 0 for i in range(n): for j in range(i, n): if is_palindromic(a[i:j+1]): count += 1 return count def count_palindromes(test_cases): results = [] for a in test_cases: results.append(count_palindromic_subarrays(a)) return results"},{"question":"Alex and Ben are learning about graphs and algorithms in their computer science class. Their teacher gave them a challenging assignment to test their understanding of graph traversal techniques. The assignment is as follows: Given an undirected graph with N nodes and M edges, Alex and Ben need to find the shortest path between a given pair of nodes in terms of the number of edges. Two nodes A and B are said to be directly connected if there is an edge between them. Write a program that, given the graph and multiple queries, outputs the shortest path for each query. Each query consists of two nodes, u and v, and you need to find the shortest path between these two nodes. If there is no path between u and v, output -1. INPUT: The first line of the input contains two integers N and M - the number of nodes and edges, respectively. The next M lines each contain two integers x and y, indicating that there is an edge between node x and node y. The next line contains an integer Q - the number of queries. Each of the following Q lines contains two integers u and v, describing a query for the shortest path between node u and node v. OUTPUT: For each query, output the shortest path between node u and node v in terms of the number of edges. If no path exists, output -1. CONSTRAINTS: 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ x, y, u, v ≤ N 1 ≤ Q ≤ 1000 SAMPLE INPUT: 6 7 1 2 1 3 2 4 3 4 3 5 4 6 5 6 3 1 6 1 5 2 3 SAMPLE OUTPUT: 3 2 2","solution":"from collections import deque, defaultdict def shortest_path(N, M, edges, queries): Returns the shortest path between nodes u and v for each query. # Build the graph as an adjacency list graph = defaultdict(list) for x, y in edges: graph[x].append(y) graph[y].append(x) def bfs(start, target): # Perform BFS to find the shortest path from start to target queue = deque([(start, 0)]) visited = set() while queue: node, dist = queue.popleft() if node == target: return dist if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, dist+1)) return -1 results = [] for u, v in queries: results.append(bfs(u, v)) return results"},{"question":"Problem You are tasked with writing a program that can simulate the behavior of a simple graphics editor. The editor can manipulate a 2D canvas of pixels (represented as a matrix) with the following operations: 1. Fill a subrectangle with a specific color. 2. Flip the contents of the canvas horizontally. 3. Flip the contents of the canvas vertically. 4. Rotate the entire canvas 90 degrees clockwise. 5. Rotate the entire canvas 90 degrees counterclockwise. Here’s how these operations should work: - **Fill**: Given the top-left and bottom-right coordinates of a subrectangle and a color, fill the subrectangle with the specified color. - **Horizontal Flip**: Reverse the order of pixels in each row of the canvas. - **Vertical Flip**: Reverse the order of pixels in each column of the canvas. - **Rotate Clockwise**: Rotate the entire canvas 90 degrees clockwise. - **Rotate Counterclockwise**: Rotate the entire canvas 90 degrees counterclockwise. Constraints The input satisfies the following conditions: - 1 ≤ n ≤ 50 (size of the canvas along each dimension) - 1 ≤ m ≤ 100 (number of operations) - 0 ≤ ai,j ≤ 255 (initial grayscale value of each pixel) - 0 ≤ r1, c1, r2, c2 < n (coordinates for fill operation) - 0 ≤ color ≤ 255 (new grayscale value for fill operation) Input The input consists of: - An integer n, the size of the n x n canvas. - n lines of n integers each, representing the initial grayscale values of the canvas. - An integer m, the number of operations. - m lines where each line represents an operation. The first item is an integer t (the type of operation): - If t is 1, the operation is a fill. It is followed by five integers: r1, c1, r2, c2, and color. - If t is 2, the operation is a horizontal flip. - If t is 3, the operation is a vertical flip. - If t is 4, the operation is a 90-degree clockwise rotation. - If t is 5, the operation is a 90-degree counterclockwise rotation. Output Output the final state of the canvas after all operations. Examples Input 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 1 1 1 2 2 128 4 2 Output 0 0 0 0 0 128 128 0 0 128 128 0 0 0 0 0 Input 3 255 255 255 255 255 255 255 255 255 2 3 5 Output 255 255 255 255 255 255 255 255 255 Input 5 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 4 1 1 1 3 3 255 2 3 Output 255 255 255 40 50 255 255 255 90 100 255 255 255 140 150 160 170 180 190 200 210 220 230 240 250","solution":"def fill_subrectangle(canvas, r1, c1, r2, c2, color): for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): canvas[i][j] = color def horizontal_flip(canvas): for row in canvas: row.reverse() def vertical_flip(canvas): n = len(canvas) for j in range(n): for i in range(n // 2): canvas[i][j], canvas[n - 1 - i][j] = canvas[n - 1 - i][j], canvas[i][j] def rotate_90_clockwise(canvas): n = len(canvas) new_canvas = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): new_canvas[j][n - 1 - i] = canvas[i][j] for i in range(n): for j in range(n): canvas[i][j] = new_canvas[i][j] def rotate_90_counterclockwise(canvas): n = len(canvas) new_canvas = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): new_canvas[n - 1 - j][i] = canvas[i][j] for i in range(n): for j in range(n): canvas[i][j] = new_canvas[i][j] def manipulate_canvas(n, canvas, operations): for operation in operations: if operation[0] == 1: r1, c1, r2, c2, color = operation[1:] fill_subrectangle(canvas, r1, c1, r2, c2, color) elif operation[0] == 2: horizontal_flip(canvas) elif operation[0] == 3: vertical_flip(canvas) elif operation[0] == 4: rotate_90_clockwise(canvas) elif operation[0] == 5: rotate_90_counterclockwise(canvas) return canvas"},{"question":"You\'ll be given an array B of M integers as input. Check if each element of the array B[i] is odd or even and print \\"odd\\" if it\'s odd, otherwise print \\"even\\". Input: There will be M+1 lines of input each consisting of a single integer. Integer in the first line denotes M. For the following M lines, the integer in i^{th} line denotes the integer B[i-1]. Output: For each element of the array B[i], print \\"odd\\" or \\"even\\" in a new line. Constraints: 1 ≤ M ≤ 10 1 ≤ B[i] ≤ 100 SAMPLE INPUT 3 4 7 19 SAMPLE OUTPUT even odd odd","solution":"def check_odd_even(arr): Takes an array of integers and prints \\"odd\\" if the integer is odd, and \\"even\\" if the integer is even. Parameters: arr (list): The list of integers to check. Returns: list: A list of strings, \\"odd\\" or \\"even\\" corresponding to each integer. result = [] for num in arr: if num % 2 == 0: result.append(\\"even\\") else: result.append(\\"odd\\") return result"},{"question":"You are given a grid-based maze where each cell is either passable or blocked. You need to find the shortest path from the top-left corner of the maze (0, 0) to the bottom-right corner (n-1, m-1). You are allowed to move vertically or horizontally, but not diagonally. The maze is represented by a matrix where `0` indicates a blocked cell, and `1` indicates a passable cell. If there is no valid path from the start to the end, return `-1`. Write a program to calculate the number of steps in the shortest path. -----Input----- The input consists of: - The first line containing two integers n and m (2 leq n, m leq 1000), representing the dimensions of the maze. - The next n lines each containing m integers (either `0` or `1`), representing the maze. -----Output----- Output the length of the shortest path from the top-left corner to the bottom-right corner. If there is no such path, output `-1`. -----Examples----- Sample Input 1: 4 4 1 0 0 0 1 1 0 1 0 1 1 0 0 0 1 1 Sample Output 1: 7 Sample Input 2: 4 4 0 0 0 0 0 1 1 0 0 1 0 0 0 0 0 1 Sample Output 2: -1","solution":"from collections import deque def shortest_path_in_maze(n, m, maze): Find the shortest path in a maze from (0, 0) to (n-1, m-1). if maze[0][0] == 0 or maze[n-1][m-1] == 0: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if (x, y) == (n-1, m-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and maze[nx][ny] == 1: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"In a certain country, the postal codes are composed of digits only, and each code must follow these rules: 1. The length of the postal code must be exactly 6 digits. 2. The postal code cannot contain increasing or decreasing consecutive sequences of 3 or more digits. For example, \\"123xxx\\" or \\"xxx321\\" are invalid postal codes. 3. The postal code cannot contain any repeating sequence of digits of length 2 or more. Write a function `validate_postal_code(code)` that accepts a string `code` and returns `True` if the postal code is valid according to the rules above, otherwise `False`. For example: - `validate_postal_code(\\"123456\\")` should return `False` (because \\"123\\" is an increasing sequence). - `validate_postal_code(\\"654321\\")` should return `False` (because \\"654\\" is a decreasing sequence). - `validate_postal_code(\\"121212\\")` should return `False` (because \\"12\\" repeats). - `validate_postal_code(\\"124356\\")` should return `True`. You may assume the input string always has a length of 6 and consists of digit characters only.","solution":"def validate_postal_code(code): Validates the postal code according to the given rules. 1. Length must be 6. 2. No increasing or decreasing consecutive sequences of 3 or more digits. 3. No repeating sequence of digits of length 2 or more. Args: code (str): The postal code to validate. Returns: bool: True if the postal code is valid, False otherwise. # Check for length condition (although given that input is always length of 6, this is redundant) if len(code) != 6: return False # Check for increasing or decreasing sequence of 3 or more digits for i in range(4): if (int(code[i]) == int(code[i+1]) - 1 == int(code[i+2]) - 2) or (int(code[i]) == int(code[i+1]) + 1 == int(code[i+2]) + 2): return False # Check for repeating sequences of 2 or more digits for length in range(2, 4): # Check for repeating sequence of length 2 and 3, as longer will already cover the shorter ones. for i in range(6 - length): if code[i:i+length] == code[i+length:i+2*length]: return False return True"},{"question":"A forest consists of a straight line of trees, each with a different height. The trees are indexed from left to right, starting with tree 1. The forest is subject to a windstorm that blows from left to right, causing taller trees to overshadow shorter trees that are to their right. Specifically, a tree is overshadowed if there is any taller tree to its left. Your task is to determine how many trees are not overshadowed after the windstorm. -----Input----- The input consists of a single line containing an integer N, 1 leq N leq 100000, the number of trees, followed by N integers h_1, h_2, ldots, h_N (1 leq h_i leq 10^9), where h_i is the height of the i-th tree. -----Output----- Output a single integer, the number of trees that are not overshadowed. -----Examples----- Sample Input 1: 5 3 7 4 6 5 Sample Output 1: 2 Sample Input 2: 4 1 2 3 4 Sample Output 2: 4 Sample Input 3: 6 5 3 9 8 7 10 Sample Output 3: 3 Explanation: In the first example, only trees with heights 7 and 6 are not overshadowed. Tree with height 3 is overshadowed by the taller trees to its right. Similarly, tree with height 4 is overshadowed by tree 7, and tree with height 5 is overshadowed by tree 6. In the second example, all trees are of increasing height and none is overshadowed by any other tree. In the third example, trees with height 5, 9, and 10 are not overshadowed. The rest are overshadowed by the taller trees to their left.","solution":"def count_non_overshadowed_trees(N, heights): Function to count the number of trees that are not overshadowed. Args: N : int : Number of trees heights : list of int : Heights of the trees Returns: int : Number of non-overshadowed trees max_height_seen = 0 count_non_overshadowed = 0 for height in heights: if height > max_height_seen: count_non_overshadowed += 1 max_height_seen = height return count_non_overshadowed"},{"question":"Emma has a string, S, of length n consisting of lowercase English letters. She can perform exactly one operation: she can choose any character in the string and change it to any other lowercase English letter. Emma considers a string \\"amazing\\" if no two adjacent characters are the same. Help Emma determine the minimum number of operations required to make her string \\"amazing\\". Input Format The first line contains a single integer, t, denoting the number of test cases. The 2 cdot t subsequent lines describe each test case in the following form: The first line contains an integer, n, denoting the length of the string S. The second line contains a string S of length n. Constraints 1 leq t leq 100 1 leq n leq 1000 Output Format For each test case, print the minimum number of operations required to make the string \\"amazing\\" on a new line. Sample Input 0 3 5 aabaa 4 bbbb 6 abcdef Sample Output 0 2 2 0 Explanation 0 We perform the following t=3 test cases: For the string S = texttt{aabaa}, we can make the string \\"amazing\\" with 2 operations: texttt{aabaa} rightarrow texttt{ababa}. For the string S = texttt{bbbb}, we can make the string \\"amazing\\" with 2 operations: texttt{bbbb} rightarrow texttt{baba}. For the string S = texttt{abcdef}, it is already \\"amazing\\" since no two adjacent characters are the same, so we don\'t need any operations. Thus, we print 2, 2, and 0 on separate lines for each test case.","solution":"def min_operations_to_amazing(n, S): Returns the minimum number of operations required to make the string amazing. operations = 0 for i in range(1, n): if S[i] == S[i - 1]: operations += 1 # Change the current character by assuming it to be different from previous (any valid character would work for counting operations) S = S[:i] + \'_\' + S[i + 1:] return operations def solve_multiple_cases(test_cases): results = [] for n, S in test_cases: results.append(min_operations_to_amazing(n, S)) return results"},{"question":"Find the Missing Integer You are given an array of unique integers ranging from 1 to (N) with one element missing. The size of the array is (N-1). Write a function that finds the missing integer in linear time. Your function should return the missing integer. # Example Input: [1, 2, 4, 6, 3, 7, 8] Output: 5 # Constraints 1. The array will always have exactly one missing integer. 2. You can assume all elements in the input array are unique and within the range 1 to (N). 3. Do not use any extra space other than variables used for calculation (i.e. no additional array, set, dictionary, etc.). # Function Signature ```python def find_missing_number(arr: List[int]) -> int: pass ```","solution":"from typing import List def find_missing_number(arr: List[int]) -> int: Finds the missing number in an array of unique integers from 1 to N where one integer is missing. n = len(arr) + 1 # Since one number is missing, the length of arr is N-1, so N = len(arr) + 1 total_sum = n * (n + 1) // 2 # Sum of the first N natural numbers actual_sum = sum(arr) # Sum of the elements present in the array missing_number = total_sum - actual_sum # The missing number return missing_number"},{"question":"# Compose a function that finds the single distinct integer that appears an odd number of times in a given list of integers. Write a function `find_odd_count_integer` that takes a list of integers `numbers` as input and returns the single integer that occurs an odd number of times in the list. You may assume that the list has exactly one integer that appears an odd number of times, while all other integers appear an even number of times. Example ```python def find_odd_count_integer(numbers): # Your code here # Test cases print(find_odd_count_integer([1, 2, 3, 2, 3, 1, 3])) # Output: 3 print(find_odd_count_integer([4, 5, 4, 5, 4])) # Output: 4 print(find_odd_count_integer([10, 10, 11, 11, 10, 10, 12])) # Output: 12 ``` Explanation - For the first test case, the integers 1, 2, and 3 all appear twice, except for 3, which appears three times. - For the second test case, the integers 4 and 5 appear twice, except for 4, which appears three times. - For the third test case, the integers 10 and 11 appear four times, except for 12, which appears once.","solution":"def find_odd_count_integer(numbers): Find the single integer that occurs an odd number of times in the list. :param numbers: List of integers. :return: Integer that occurs an odd number of times. result = 0 for number in numbers: result ^= number return result"},{"question":"Containers are used to store different types of liquids. You are given an array of integers where each integer represents the capacity of a container. You need to evenly distribute a certain amount of liquid among all containers. Write a program to determine how much liquid to add into each container if the total amount of liquid to be distributed is given. If the liquid cannot be evenly distributed, the program should output the extra amount of liquid that cannot be divided equally. To keep things simple, assume all container capacities are positive and the total amount of liquid is non-negative. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 100) — the number of containers. The second line contains n positive integers c_{i} (1 ≤ c_{i} ≤ 1000) — representing the capacity of the i-th container. The final line contains an integer `m` (0 ≤ m ≤ 10000) — the total amount of liquid to be distributed. -----Output----- Print two integers. The first integer represents the amount of liquid each container would get if the total liquid is evenly distributed. The second integer represents the extra amount of liquid that cannot be evenly distributed. -----Examples----- Input 3 3 5 8 9 Output 3 0 Input 4 10 10 10 10 15 Output 3 3 -----Note----- In the first example, the liquid is evenly distributed as follows: each of the three containers will get 3 units of liquid, with no extra liquid left. Hence the output is `3 0`. In the second example with four containers, each container will get 3 units of liquid, and there will be 3 units left undistributed. Hence the output is `3 3`.","solution":"def distribute_liquid(n, capacities, m): Distribute liquid evenly among containers and return the distribution amount and extra liquid. Parameters: n (int): Number of containers. capacities (list): List of integers representing the capacities of containers. m (int): Total amount of liquid to be distributed. Returns: tuple: (Amount of liquid each container gets, Extra liquid that cannot be evenly distributed) liquid_per_container = m // n extra_liquid = m % n return liquid_per_container, extra_liquid"},{"question":"In a rectangular grid of size MxN, you are initially positioned at the top-left corner of the grid (1, 1). Your goal is to reach the bottom-right corner of the grid (M, N). You can only move either down or right at any point in time. However, certain cells in the grid are blocked and cannot be used. Count the number of different paths you can take to reach the bottom-right corner of the grid. Report this number modulo 10^9 + 7. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains two integers, M and N, representing the number of rows and columns of the grid. - The second line of each test case contains a single integer K, the number of blocked cells. - The next K lines each contain two integers x and y, representing a blocked cell at row x and column y. ------ Output Format ------ For each test case, output in a single line, the number of different paths to reach the bottom-right corner of the grid modulo 10^9 + 7. If it\'s not possible to reach the target, output 0. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ M, N ≤ 1000 0 ≤ K ≤ Mcdot N 1 ≤ x ≤ M 1 ≤ y ≤ N ----- Sample Input 1 ------ 2 3 3 1 2 2 3 3 2 1 2 2 1 ----- Sample Output 1 ------ 2 0 ----- Explanation 1 ------ Test Case 1: The grid looks like this (B denotes a blocked cell): ``` 1 0 0 1 B 0 1 1 1 ``` There are two paths from (1, 1) to (3, 3): - (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) - (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) Test Case 2: The grid looks like this: ``` 1 B 0 B 0 0 0 0 0 ``` There are no possible paths to reach (3, 3) due to the two blocked cells. Therefore, the output is 0.","solution":"MOD = 10**9 + 7 def count_paths(T, test_cases): results = [] for case in range(T): M, N, K, blocked_cells = test_cases[case] dp = [[0] * N for _ in range(M)] if (1, 1) in blocked_cells or (M, N) in blocked_cells: results.append(0) continue dp[0][0] = 1 for i in range(M): for j in range(N): if (i + 1, j + 1) in blocked_cells: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD results.append(dp[M - 1][N - 1]) return results # Sample Input Processing def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(T): M, N = map(int, input_lines[idx].split()) idx += 1 K = int(input_lines[idx]) idx += 1 blocked_cells = set() for _ in range(K): x, y = map(int, input_lines[idx].split()) blocked_cells.add((x, y)) idx += 1 test_cases.append((M, N, K, blocked_cells)) return T, test_cases"},{"question":"Given an array of integers, you are tasked to find the minimum number of adjacent swaps required to sort the array in non-decreasing order. A swap operation consists of swapping two adjacent elements in the array. Your goal is to determine the total number of such swaps needed to sort the array. -----Input----- - The first line of the input contains a single integer n, the size of the array. - The second line contains n space-separated integers representing the array. -----Output----- Print a single integer representing the minimum number of adjacent swaps required to sort the array. -----Constraints----- - 1 le n le 100,000 - 1 le a[i] le 100,000 for each valid i -----Example Input----- 5 3 2 1 5 4 -----Example Output----- 4 -----Explanation----- One of the possible sequences of adjacent swaps to sort the array is: 1. Swap 3 with 2 -> [2, 3, 1, 5, 4] 2. Swap 3 with 1 -> [2, 1, 3, 5, 4] 3. Swap 2 with 1 -> [1, 2, 3, 5, 4] 4. Swap 5 with 4 -> [1, 2, 3, 4, 5] Thus, the minimum number of swaps required is 4.","solution":"def min_adjacent_swaps_to_sort(arr): Given an array, determines the minimum number of adjacent swaps required to sort the array in non-decreasing order. Parameters: arr (list): List of integers representing the array. Returns: int: Minimum number of adjacent swaps required to sort the array. # Function to use Merge Sort along with inversion count def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) # Number of swaps needed j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n - 1)"},{"question":"You are given the heights of three buildings. A helicopter needs to land on top of these buildings. It is known that the helicopter will land in the order of building heights, from the tallest to the shortest. If the heights of two or more buildings are the same, the helicopter can land on any of those buildings in random order. Input The only line contains three integer numbers h1, h2, h3 (1 ≤ h1, h2, h3 ≤ 100) — the heights of the buildings. Output Print three numbers i1, i2, i3 (1 ≤ i1, i2, i3 ≤ 3), all of them should be distinct. The first number stands for the index of the building where the helicopter lands first (tallest building). The second and third numbers mean the indices of the buildings where the helicopter lands second and third, respectively. If there are multiple answers, print any of them. Examples Input 45 60 55 Output 2 3 1 Input 75 75 50 Output 1 2 3","solution":"def helicopter_landing_order(h1, h2, h3): heights = [(h1, 1), (h2, 2), (h3, 3)] sorted_heights = sorted(heights, key=lambda x: x[0], reverse=True) return sorted_heights[0][1], sorted_heights[1][1], sorted_heights[2][1]"},{"question":"# Task You are given a list of strings representing the salary structure of employees in a company. Each string contains an employee name followed by one or more positions they have held and their respective salaries. Your job is to find out the total salary expense for the company. Each string is formatted as follows: `\\"EmployeeName position1 salary1 position2 salary2 ... positionN salaryN\\"`. Assume that there is at least one position and salary in each string and that positions do not repeat for any single employee. Calculate the total salary expense by summing up all the salaries for all the employees. # Input/Output `[input]` string array `employees` A string array where each string contains an employee\'s name and their positions with respective salaries. `[output]` an integer The total salary expense for the company. # Example For ``` employees = [ \\"John manager 5000 developer 4000\\", \\"Jane designer 3000\\", \\"Bob developer 4500 team_lead 6000\\", \\"Alice CEO 7000\\" ] ``` the output should be `29500`. `5000 (John\'s manager) + 4000 (John\'s developer) + 3000 (Jane\'s designer) + 4500 (Bob\'s developer) + 6000 (Bob\'s team lead) + 7000 (Alice\'s CEO) = 29500`.","solution":"def total_salary_expense(employees): Calculate the total salary expense for the company. Parameters: employees (list of str): A list of strings representing employees\' names, their positions and respective salaries. Returns: int: The total salary expense for the company. total_salary = 0 for employee in employees: parts = employee.split() salaries = [int(parts[i]) for i in range(2, len(parts), 2)] total_salary += sum(salaries) return total_salary"},{"question":"Kate is organizing a marathon in her city and needs to register participants efficiently. The registration system assigns each participant a unique ID number and stores it in an array. However, due to a bug, some ID numbers are missing from the array, and Kate needs to quickly find these missing numbers to ensure everyone is accounted for. You are given an array of unique integers `participant_ids` of length `n`, representing the IDs of participants who have successfully registered. The IDs are guaranteed to be within the range from 1 to `n + m` (inclusive), where `m` is the number of missing participants. Your task is to determine the missing IDs. ----------Input---------- The first line contains a single integer `t` (1 le t le 10^3)— the number of test cases. The next line consists of two integers `n` and `m` (1 le n, m le 10^5) separated by a space — the length of the `participant_ids` array and the number of missing participants, respectively. The next line contains `n` unique integers representing the `participant_ids` — the IDs of participants currently registered. It is guaranteed that the sum of all `n` across all test cases will not exceed 10^6. ----------Output---------- For each test case, output a single line containing the `m` missing participant IDs in ascending order, separated by spaces. ----------Example---------- Input 2 5 2 1 2 4 6 7 3 1 1 2 4 Output 3 5 3 ----------Note---------- In the first test case, the range of IDs is from 1 to 7. The registered IDs are [1, 2, 4, 6, 7]. The missing IDs are 3 and 5. In the second test case, the range of IDs is from 1 to 4. The registered IDs are [1, 2, 4]. The missing ID is 3.","solution":"def find_missing_ids(n, m, participant_ids): Finds the missing participant IDs from the range 1 to n + m. Parameters: n (int): The number of registered participants. m (int): The number of missing participants. participant_ids (list): List of IDs of registered participants. Returns: list: List of missing participant IDs in ascending order. all_ids = set(range(1, n + m + 1)) registered_ids = set(participant_ids) missing_ids = list(all_ids - registered_ids) missing_ids.sort() return missing_ids def process_test_cases(t, test_cases): results = [] for test_case in test_cases: n, m, participant_ids = test_case missing_ids = find_missing_ids(n, m, participant_ids) results.append(\\" \\".join(map(str, missing_ids))) return results # Example usage: def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 test_cases = [] for _ in range(t): n = int(data[index]) m = int(data[index + 1]) participant_ids = list(map(int, data[index + 2: index + 2 + n])) test_cases.append((n, m, participant_ids)) index += 2 + n results = process_test_cases(t, test_cases) for result in results: print(result)"},{"question":"Jack and Jill are learning about graphs in their computer science class. Their teacher has given them an interesting challenge involving trees. A tree is a connected, undirected graph with no cycles. The challenge is to find the longest path in the tree, also known as the diameter of the tree. The diameter of a tree is the length of the longest path between any two nodes in the tree. The length of a path is the number of edges in the path. Your task is to help Jack and Jill by writing a program that calculates the diameter of a given tree. Input The first line of the input contains an integer N, the number of nodes in the tree. The next N-1 lines describe the edges of the tree. Each line contains two integers u and v, indicating that there is an edge between node u and node v. Output Output a single integer, the diameter of the tree. Constraints 1 ≤ N ≤ 10^5 1 ≤ u, v ≤ N SAMPLE INPUT 5 1 2 1 3 2 4 2 5 SAMPLE OUTPUT 3 Explanation In the sample input, the tree has the following edges: - 1 is connected to 2 - 1 is connected to 3 - 2 is connected to 4 - 2 is connected to 5 The longest path is from node 4 to node 5 through nodes 2 and 1, which has a length of 3 edges. Therefore, the diameter of the tree is 3.","solution":"from collections import deque, defaultdict def longest_path_length(tree: dict, start: int) -> (int, int): BFS to find the longest path from the start node in the tree. Returns the farthest node found and the distance to that node. visited = set() queue = deque([(start, 0)]) farthest_node = start max_distance = 0 while queue: current, distance = queue.popleft() if distance > max_distance: farthest_node = current max_distance = distance visited.add(current) for neighbor in tree[current]: if neighbor not in visited: queue.append((neighbor, distance + 1)) return farthest_node, max_distance def tree_diameter(n, edges): Calculates the diameter of a given tree. if n == 1: return 0 tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Step 1: Perform first BFS from any node (e.g. node 1 if it exists) first_farthest_node, _ = longest_path_length(tree, 1) # Step 2: Perform second BFS from the farthest node found in the first BFS _, diameter = longest_path_length(tree, first_farthest_node) return diameter"},{"question":"Given a string of space-separated words, your task is to write a program that counts and prints the number of unique words present in the given string. Words are considered the same if they are identical irrespective of their case (i.e., \\"Word\\" and \\"word\\" are considered the same). -----Constraints----- - The input string will consist of alphabets and spaces only. - The input string will contain at least one word and the length of the string will not exceed 1000 characters. -----Input----- Input is given from Standard Input in the following format: string -----Output----- Print the number of unique words in the input string. -----Sample Input----- Hello world hello -----Sample Output----- 2","solution":"def count_unique_words(s): Counts the number of unique words in a given string. Args: s (str): Input string of space-separated words. Returns: int: Number of unique words. words = s.lower().split() unique_words = set(words) return len(unique_words)"},{"question":"In the Kingdom of CodeLand, there\'s an annual fireworks event. All fireworks need to be launched in a specific sequence from different launch pads so that they create beautiful patterns in the sky. For safety reasons, each launch pad can only launch one firework every minute, and the fireworks have a defined launch order. However, a computer malfunction caused the launch pads to randomly launch the fireworks out of order. You are tasked with reordering the logs of fireworks launches to their correct order based on their sequence numbers. Each firework log contains a sequence number and a launch pad number that identifies the launch pad it was launched from. Your task is to reorder these logs based on the sequence number in ascending order. The input will be a list of logs, where each log is represented as a tuple containing the sequence number and the launch pad number. The output should be the reordered list of logs. Function Signature: ```python def reorder_logs(logs: List[Tuple[int, int]]) -> List[Tuple[int, int]]: pass ``` # Input: - logs: A list of tuples (sequence_number, launch_pad_number) where sequence_number is an integer representing the order of the firework in the sequence (1 ≤ sequence_number ≤ 10^5), and launch_pad_number is an integer representing the launch pad number (1 ≤ launch_pad_number ≤ 10^5). # Output: - A list of tuples (sequence_number, launch_pad_number) reordered based on the sequence number in ascending order. # Example: ```python logs = [(3, 2), (1, 3), (2, 1), (4, 5)] reorder_logs(logs) # Output: [(1, 3), (2, 1), (3, 2), (4, 5)] ``` # Note: - The logs need to be reordered based on the sequence_number while maintaining the launch_pad_number association. - The solution should be efficient enough to handle the upper constraints of the input size. # Constraints: - 1 ≤ len(logs) ≤ 10^5 - 1 ≤ sequence_number, launch_pad_number ≤ 10^5","solution":"from typing import List, Tuple def reorder_logs(logs: List[Tuple[int, int]]) -> List[Tuple[int, int]]: Reorder the logs of fireworks launches based on the sequence number in ascending order. Args: logs (List[Tuple[int, int]]): A list of tuples where each tuple contains the sequence number and the launch pad number. Returns: List[Tuple[int, int]]: A list of tuples reordered based on the sequence number in ascending order. return sorted(logs, key=lambda log: log[0])"},{"question":"Problem Statement In a hilly city, bus routes are designed such that they always travel either uphill or downhill. There are N bus stops in the city, labeled from 1 to N. There are M directed bus routes connecting these stops, each described by three integers: U, V, W where the route goes from stop U to stop V with a travel time of W minutes. Given a start bus stop S and a destination bus stop D, you need to determine the minimum travel time required to reach stop D from stop S. If it is not possible to reach stop D from stop S, return -1. Input - The first line contains three integers: N (number of bus stops), M (number of bus routes), and Q (number of queries). - The next M lines each contain three integers U, V, W describing a bus route. - The next Q lines each contain two integers S and D, representing a query to find the minimum travel time from stop S to stop D. Output For each query, output the minimum travel time from stop S to stop D. If it is not possible to reach stop D from stop S, output -1. Constraints - 2 ≤ N ≤ 500 - 1 ≤ M ≤ 5000 - 1 ≤ U, V, S, D ≤ N - 1 ≤ W ≤ 1000 - 1 ≤ Q ≤ 1000 Example Input 5 6 3 1 2 10 2 3 10 3 4 10 1 3 30 4 5 10 1 5 50 1 5 1 4 2 1 Output 40 30 -1 Explanation In the given example, there are 5 bus stops and 6 routes. The minimum travel time to reach stop 5 from stop 1 is 40 minutes (1 -> 2 -> 3 -> 4 -> 5). The minimum travel time to reach stop 4 from stop 1 is 30 minutes (1 -> 2 -> 3 -> 4). There is no possible route to reach stop 1 from stop 2, so the output is -1.","solution":"import heapq def dijkstra(graph, start, n): Returns the minimum travel time from start to all other stops using Dijkstra\'s algorithm. min_time = {i: float(\'inf\') for i in range(1, n + 1)} min_time[start] = 0 priority_queue = [(0, start)] while priority_queue: current_time, current_stop = heapq.heappop(priority_queue) if current_time > min_time[current_stop]: continue for neighbor, travel_time in graph[current_stop]: time = current_time + travel_time if time < min_time[neighbor]: min_time[neighbor] = time heapq.heappush(priority_queue, (time, neighbor)) return min_time def solve(n, m, q, routes, queries): Solves the problem of finding the minimum travel time for each query. graph = {i: [] for i in range(1, n + 1)} for u, v, w in routes: graph[u].append((v, w)) results = [] for s, d in queries: min_time = dijkstra(graph, s, n) if min_time[d] == float(\'inf\'): results.append(-1) else: results.append(min_time[d]) return results"},{"question":"John is a student learning to play guitar. He practices different chords every day. He wants to track his progress by noting down the difficulty levels of the chords he practices each day. John follows a strict routine where he never practices more than one chord on the same day. After practicing for several days, he has noted down the difficulty level of each chord he practiced in order of the days he practiced them. John wants to calculate his progress index, which is the maximum difference in difficulty levels between any two chords he practiced, such that the easier chord was practiced before the harder chord. Input Format: The first line contains an integer n, which denotes the number of days John practiced. The second line contains n integers, where the i-th integer denotes the difficulty level of the chord practiced on the i-th day. Output Format: Print a single integer, the progress index. Constraints: 1 ≤ n ≤ 10^5 1 ≤ Difficulty level ≤ 10^6 SAMPLE INPUT 5 3 1 4 1 5 SAMPLE OUTPUT 4 Explanation Here\'s how it happens: John practiced the following chords over 5 days with difficulty levels: 3, 1, 4, 1, 5. - The biggest increase in difficulty happened from the chord practiced on the 2nd day (difficulty 1) to the chord practiced on the 5th day (difficulty 5), so the progress index is 4 (5 - 1).","solution":"def calculate_progress_index(n, difficulty_levels): if n <= 1: return 0 min_difficulty = difficulty_levels[0] max_diff = 0 for i in range(1, n): if difficulty_levels[i] > min_difficulty: max_diff = max(max_diff, difficulty_levels[i] - min_difficulty) min_difficulty = min(min_difficulty, difficulty_levels[i]) return max_diff"},{"question":"Given an array of integers, you are required to find the subarray with the maximum sum among all possible subarrays of the given array. The subarray selection should not include adjacent elements from the original array. If multiple subarrays with the same maximum sum exist, return any one of them. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains a single integer N denoting the size of the array. - The second line contains N space-separated integers representing the elements of the array. ------ Output ------ For each test case, print a single line containing the maximum sum of the subarray that can be obtained based on the described selection criteria. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^4 ≤ A[i] ≤ 10^4 ----- Sample Input 1 ------ 2 5 3 2 5 10 7 3 1 -1 3 ----- Sample Output 1 ------ 15 4 ----- explanation 1 ------ Example case 1: The subarray {3, 5, 7} yields the maximum sum of 15. Note that adjacent elements are not selected. Example case 2: The subarray {1, 3} yields the maximum sum of 4.","solution":"def max_non_adjacent_subarray_sum(arr): Returns the maximum sum of non-adjacent elements in the array. incl = 0 # Sum including the previous element excl = 0 # Sum excluding the previous element for num in arr: # Current max excluding the current num new_excl = max(incl, excl) # Current max including the current num incl = excl + num excl = new_excl # Maximum of incl and excl represents the maximum sum return max(incl, excl) def max_non_adjacent_sum_multiple_cases(T, test_cases): results = [] for case in test_cases: results.append(max_non_adjacent_subarray_sum(case)) return results"},{"question":"Talia and Starla are engaged in a training session to enhance their logical reasoning and strategic thinking. Their mentor has designed a unique game to test their skills. The game involves a grid of size N times M filled with stones. Each cell in the grid initially contains exactly one stone. Talia and Starla take turns, and on each turn, a player must select a subgrid of size k times k (where 1 leq k leq min(N, M)) and destroy all the stones in that subgrid. The player who cannot make a move loses the game. Talia plays first, and she wants to ensure that she follows an optimal strategy to guarantee her win if possible. Your task is to determine the result of the game if both players play optimally. Input Format The first line of the input contains an integer T, the number of test cases. Each of the next T lines contains two integers N and M, the dimensions of the grid. Constraints 1 leq T leq 10^5 1 leq N, M leq 10^9 Output Format For each test case, output \\"Talia\\" if Talia can guarantee a win with optimal play, or \\"Starla\\" if Starla can force a win regardless of Talia\'s moves. Sample Input 0 3 2 2 3 4 5 5 Sample Output 0 Talia Starla Starla Explanation 0 In the first test case, Talia can select the entire 2 times 2 grid and win immediately. In the second test case, any subgrid Talia chooses will not cover the entire grid, giving Starla a strategy to eventually cover the last stones. In the third test case, Starla has a winning strategy by ensuring Talia is forced to take suboptimal choices in the larger grid. By analyzing the game rules and making strategic moves, Talia and Starla can determine the winner based on the initial grid dimensions.","solution":"def game_winner(n, m): Determines the winner of the game on an NxM grid. Args: n (int): The number of rows of the grid. m (int): The number of columns of the grid. Returns: str: \\"Talia\\" if Talia can guarantee a win, \\"Starla\\" otherwise. if n % 2 != 0 or m % 2 != 0: return \\"Talia\\" else: return \\"Starla\\""},{"question":"Alice is participating in a programming contest. One of the problems in the contest requires her to manipulate a matrix in an interesting way. Given a matrix of size ( N times N ) with elements from 1 to ( N^2 ) arranged in row-major order (i.e., the first row contains values from 1 to ( N ), the second row contains values from ( N+1 ) to ( 2N ), and so on), she needs to transform this matrix based on the given instructions. The instructions are: 1. Rotate the entire matrix 90 degrees clockwise. 2. After rotating, sum up the values on both the main diagonal and the secondary diagonal of the matrix. Implement a function `matrix_diagonal_sum` that takes an integer ( N ) as input and returns a tuple of two integers representing the sum of the values on the main diagonal and the secondary diagonal, respectively, after rotating the matrix 90 degrees clockwise. # Function Signature ```python def matrix_diagonal_sum(N: int) -> (int, int): ``` # Input - An integer ( N ) representing the size of the matrix. # Output - A tuple of two integers where the first integer is the sum of the values on the main diagonal and the second integer is the sum of the values on the secondary diagonal of the rotated matrix. # Example ```python >>> matrix_diagonal_sum(3) (15, 15) >>> matrix_diagonal_sum(4) (34, 34) ``` # Constraints - ( 1 leq N leq 1000 ) # Explanation For ( N = 3 ): Original matrix (before rotation): ``` 1 2 3 4 5 6 7 8 9 ``` Matrix after 90-degree rotation clockwise: ``` 7 4 1 8 5 2 9 6 3 ``` Main diagonal sum after rotation: ( 7 + 5 + 3 = 15 ) Secondary diagonal sum after rotation: ( 9 + 5 + 1 = 15 )","solution":"def matrix_diagonal_sum(N: int) -> (int, int): Rotate an NxN matrix 90 degrees clockwise and return the sum of the main and secondary diagonals. # Create the initial matrix in row-major order matrix = [[(i * N) + j + 1 for j in range(N)] for i in range(N)] # Create a new matrix to store the rotated version rotated_matrix = [[0] * N for _ in range(N)] # Rotate the matrix by 90 degrees clockwise for i in range(N): for j in range(N): rotated_matrix[j][N-i-1] = matrix[i][j] # Calculate the sum of the main and secondary diagonals main_diagonal_sum = 0 secondary_diagonal_sum = 0 for i in range(N): main_diagonal_sum += rotated_matrix[i][i] secondary_diagonal_sum += rotated_matrix[i][N-i-1] return (main_diagonal_sum, secondary_diagonal_sum)"},{"question":"Carlos recently started his new job at a company where he is responsible for managing tasks assigned to different projects. Each project is represented as a list of tasks. The company has a rule that every task must be completed in a non-decreasing order of their difficulty levels. Carlos needs your help to check if the tasks of each project follow this rule. Input - The first line of input is the number of projects (P). - For each project, there are two lines: - The first line contains an integer (N) representing the number of tasks in the project. - The second line contains N space-separated integers representing the difficulty levels of the tasks. Output - For each project, output \\"YES\\" if the tasks\' difficulty levels are in non-decreasing order. Otherwise, output \\"NO\\". Constraints: 1 < P ≤ 15 1 < N ≤ 100 1 ≤ difficulty levels ≤ 10^4 SAMPLE INPUT 2 5 1 2 2 3 4 3 4 3 2 SAMPLE OUTPUT YES NO Explanation Case 1: The difficulty levels of the tasks are [1, 2, 2, 3, 4], which are in non-decreasing order. Hence, the output is \\"YES\\". Case 2: The difficulty levels of the tasks are [4, 3, 2], which are not in non-decreasing order. Hence, the output is \\"NO\\".","solution":"def check_tasks_order_by_project(projects): Checks if tasks in each project are in non-decreasing order of difficulty levels. Args: projects (list of list of int): each sublist represents difficulty levels of tasks in a project. Returns: list of str: list containing \\"YES\\" for projects that have tasks in non-decreasing order, and \\"NO\\" otherwise. results = [] for tasks in projects: if all(tasks[i] <= tasks[i + 1] for i in range(len(tasks) - 1)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers representing the heights of a row of buildings. The width of each building is 1. It starts to rain, and water collects on top of the buildings. Your task is to calculate how much water is stored after it rains. To illustrate, if the given array represents the heights of the buildings from left to right, water will be trapped between the buildings and the heights of water in each cell will directly depend on the height of the neighboring buildings. Write a function `waterTrap` that calculates the total amount of trapped water. # Input - The first line contains an integer `n`, the number of buildings. - The second line contains `n` space-separated integers representing the heights of the buildings. # Output - Output a single integer, the total amount of trapped water. # Constraints - 1 <= n <= 10^6 - 0 <= height of each building <= 10^6 # Example Input ``` 6 0 1 0 2 1 0 ``` Output ``` 1 ``` Explanation: Building heights: [0, 1, 0, 2, 1, 0] After rainwater is trapped, the array will look like this: ``` 0 1 1 2 1 1 ``` So, the total amount of trapped water = 1.","solution":"def waterTrap(heights): Returns the total amount of trapped water given the heights of the buildings. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Emma is fascinated by numbers and patterns, and she recently discovered prime numbers. She loves manipulating numbers to derive new sequences and combinations. Now, Emma is curious about prime sums. She defines a prime sum operation which takes a number n and finds two prime numbers p_1 and p_2 such that p_1 + p_2 = n. Knowing that such pairs might not always exist, she wants help in determining which numbers are expressible as the sum of two primes. For example, if n = 10, there are primes 3 and 7 such that 3 + 7 = 10. Your task is to write a program to help Emma out. Determine whether a given number n can be expressed as the sum of two prime numbers, and if so, print such a pair of primes. If there are multiple pairs, print any one of them. If no such pair exists, print -1. -----Input----- The input contains an integer n (1 leq n leq 10^6). -----Output----- If n can be expressed as the sum of two prime numbers, print two such prime numbers. If there are multiple pairs, print any one of them. If no such pair exists, print -1. -----Examples----- Input 10 Output 3 7 Input 12 Output 5 7 Input 17 Output -1 ---Note--- In the first sample case, 10 can be expressed as the sum of the prime numbers 3 and 7. In the second sample case, 12 can be expressed as the sum of the prime numbers 5 and 7. In the third sample case, 17 cannot be expressed as the sum of any two prime numbers.","solution":"def prime_sieve(limit): Generate a list of prime numbers up to the limit using the Sieve of Eratosthenes. sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False for start in range(2, int(limit**0.5) + 1): if sieve[start]: for multiple in range(start * start, limit + 1, start): sieve[multiple] = False return [num for num, is_prime in enumerate(sieve) if is_prime] def find_prime_sum(n): Find two prime numbers that sum up to n. If such a pair exists, return them. Otherwise, return -1. if n < 2: return -1 primes = prime_sieve(n) prime_set = set(primes) for prime in primes: if (n - prime) in prime_set: return prime, n - prime return -1"},{"question":"Aria is an engineer working on a network of smart homes. Each smart home contains various devices that can only communicate according to specific compatibility rules. Aria needs to write a program that can determine whether every device in the network can send a message to every other device, either directly or indirectly. A device can send a message to another device if they are directly connected. If device A can send messages to device B and device B can send messages to device C, then device A can also send messages to device C indirectly. Given a set of devices and their compatibility connections, determine if the network is fully connected. -----Inputs----- The first line contains an integer 1 leq N leq 1000, the number of devices. The second line contains an integer 0 leq M leq frac{N(N-1)}{2}, the number of direct connections between the devices. Each of the following M lines contains two space-separated integers 0 leq u, v < N, indicating that device u and device v are directly connected. -----Outputs----- Output \\"yes\\" if every device can send a message to every other device, either directly or indirectly. Otherwise, output \\"no\\". -----Examples----- Sample Input 1: 4 4 0 1 1 2 2 3 3 0 Sample Output 1: yes Sample Input 2: 4 2 0 1 2 3 Sample Output 2: no","solution":"def is_network_fully_connected(n, m, connections): from collections import defaultdict, deque if n == 1: return \\"yes\\" graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * n def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) bfs(0) return \\"yes\\" if all(visited) else \\"no\\""},{"question":"You are given a matrix of characters that represents a geographical map where \'L\' denotes land and \'W\' denotes water. You need to determine the total number of islands. An island is formed by a group of adjacent lands (vertically or horizontally adjacent). You can assume that all four edges of the matrix are surrounded by water. Input Format: - First line contains T, the number of test cases. - The first line of each test case contains two integers R and C, representing the number of rows and columns of the matrix. - The next R lines each contain a string of C characters (\'L\' or \'W\'), representing the geographical map. Output Format: Print the number of islands for each test case in a single line. Constraints: 1 ≤ T ≤ 10 1 ≤ R, C ≤ 1000 SAMPLE INPUT 2 3 4 LLWW LLWW WWLL 4 5 LLWLL LWWLL WWWLL LLWLL SAMPLE OUTPUT 2 3","solution":"def num_islands(matrix): if not matrix: return 0 rows, cols = len(matrix), len(matrix[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): stack = [(r, c)] while stack: x, y = stack.pop() if not (0 <= x < rows and 0 <= y < cols and matrix[x][y] == \'L\' and not visited[x][y]): continue visited[x][y] = True directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dx, dy in directions: stack.append((x + dx, y + dy)) island_count = 0 for r in range(rows): for c in range(cols): if matrix[r][c] == \'L\' and not visited[r][c]: dfs(r, c) island_count += 1 return island_count def count_islands(test_cases): results = [] for matrix in test_cases: results.append(num_islands(matrix)) return results"},{"question":"Mr. Walker, an urban planner, is working on a project to build the longest straight road passing through towns in a specific region. The region is represented as a 2D coordinate plane, where each town can be represented as a point with x and y coordinates. Mr. Walker has data on the locations of all towns in the region and wants to determine the maximum number of towns that can lie on a single straight road. You are tasked with helping Mr. Walker find this information by writing a program to determine the maximum number of points (towns) that lie on the same straight line given their coordinates. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a line containing a single zero. Each dataset is given in the following format: n x1 y1 x2 y2 ... xn yn The first line gives the number of towns n (2 ≤ n ≤ 300). Each of the next n lines gives the x and y coordinates of each town (both integers in the range -10^4 ≤ xi, yi ≤ 10^4). Output For each dataset, output the maximum number of towns that lie on a single straight line on one line. Example Input 5 1 1 2 2 3 3 4 1 5 1 4 0 0 1 1 2 2 3 4 0 Output 3 3","solution":"from collections import defaultdict from math import gcd def max_towns_on_line(towns): def slope(p1, p2): Returns a slope (dy, dx) formatted as a tuple in its reduced form (simplified fraction) dx = p2[0] - p1[0] dy = p2[1] - p1[1] if dx == 0: return (p1[0], 0) elif dy == 0: return (0, p1[1]) elif dx < 0: dx, dy = -dx, -dy g = gcd(dx, dy) return (dy // g, dx // g) n = len(towns) if n < 2: return n max_points_on_line = 1 for i in range(n): slopes = defaultdict(int) duplicate_points = 1 current_max = 0 for j in range(i + 1, n): if towns[i] == towns[j]: duplicate_points += 1 else: slopes[slope(towns[i], towns[j])] += 1 current_max = max(current_max, slopes[slope(towns[i], towns[j])]) max_points_on_line = max(max_points_on_line, current_max + duplicate_points) return max_points_on_line def process_input(input_str): data = input_str.splitlines() results = [] i = 0 while i < len(data): n = int(data[i]) if n == 0: break towns = [] for j in range(i + 1, i + n + 1): x, y = map(int, data[j].split()) towns.append((x, y)) results.append(max_towns_on_line(towns)) i += n + 1 return results"},{"question":"Given an integer `n`, determine if it\'s possible to partition the numbers from 1 to n into two sets such that the sum of the numbers in both sets is equal. If such a partition is possible, return the two sets. If not, return an empty list. Constraints: * 1 ≤ n ≤ 1000 Input: An integer n. Output: If possible, return two lists containing the partitioned sets. If not, return an empty list. Example: Input: 7 Output: [[1, 6, 7], [2, 3, 4, 5]] Explanation: The two sets [1, 6, 7] and [2, 3, 4, 5] both have a sum of 14. Input: 5 Output: [] Explanation: No partition of the numbers 1 to 5 results in two sets with an equal sum.","solution":"def partition_sets(n): Determine if it\'s possible to partition numbers from 1 to n into two sets with equal sum. If possible, return the two sets. Else, return an empty list. total_sum = n * (n + 1) // 2 # If the total sum is odd, we cannot partition it into 2 equal parts if total_sum % 2 != 0: return [] target_sum = total_sum // 2 set1, set2 = [], [] # Start from the largest number and work downwards for i in range(n, 0, -1): if target_sum - i >= 0: set1.append(i) target_sum -= i else: set2.append(i) return [set1, set2] # Example: # Input: partition_sets(7) # Output: [[7, 6, 1], [5, 4, 3, 2]]"},{"question":"A famous online multiplayer game features a battle system where each player has a power level represented by an integer. The game developers introduced a new feature where a \'Battle Group\' can be formed such that the sum of the power levels of any two players in the group is even. The goal is to find out how many distinct \'Battle Groups\' of exactly three players can be formed out of a given list of players\' power levels. To clarify, a \'Battle Group\' should follow these conditions: 1. The group must consist of exactly three players. 2. The sum of the power levels of any two players in the group must be even. 3. Each player has a unique power level. -----Input----- The input consists of two lines: - The first line contains an integer n (3 ≤ n ≤ 1000), the number of players. - The second line contains n distinct integers where each integer represents the power level of a player. The power levels are given as space-separated integers ( p_1, p_2, ldots, p_n ) (1 ≤ ( p_i ) ≤ 10^9). -----Output----- Output a single integer, the number of distinct \'Battle Groups\' of exactly three players that can be formed according to the given conditions. -----Examples----- Input 5 2 4 6 8 10 Output 10 Input 6 1 3 5 7 9 11 Output 20 -----Note----- In the first example, all power levels are even, so every triplet will satisfy the condition. There are ( binom{5}{3} = 10 ) ways to choose 3 players out of 5. In the second example, all power levels are odd, so every triplet will satisfy the condition. There are ( binom{6}{3} = 20 ) ways to choose 3 players out of 6.","solution":"from itertools import combinations def count_battle_groups(n, power_levels): Returns the number of distinct \'Battle Groups\' of exactly three players such that the sum of the power levels of any two players in the group is even. # Separte the power levels into even and odd even_power_levels = [p for p in power_levels if p % 2 == 0] odd_power_levels = [p for p in power_levels if p % 2 != 0] # Calculate the number of ways to choose 3 out of these even or odd groups num_even_combinations = len(list(combinations(even_power_levels, 3))) num_odd_combinations = len(list(combinations(odd_power_levels, 3))) # Total Battle Groups is the sum of two counts return num_even_combinations + num_odd_combinations # Example usage # n = 6 # power_levels = [1, 3, 5, 7, 9, 11] # print(count_battle_groups(n, power_levels)) # Output should be 20"},{"question":"Given a string `S`, you are allowed to perform the following operation any number of times (including zero): Operation: Choose any two adjacent characters in the string and switch their positions. Your task is to determine whether it is possible to rearrange the string `S` into a palindrome using the allowed operation. -----Constraints----- - 1 ≤ |S| ≤ 100 - `S` contains only lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print \\"YES\\" if it is possible to rearrange the string into a palindrome, otherwise print \\"NO\\". -----Sample Input----- civic -----Sample Output----- YES A palindrome is a string that reads the same forward and backward. The given string \\"civic\\" is already a palindrome. -----Sample Input----- ivicc -----Sample Output----- YES The string \\"ivicc\\" can be rearranged to form the palindrome \\"civic\\". -----Sample Input----- hello -----Sample Output----- NO It is not possible to rearrange \\"hello\\" into any palindrome.","solution":"def can_form_palindrome(s): Determine if the string s can be rearranged into a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if there is at most one character with an odd frequency return odd_count <= 1"},{"question":"Given a sorted array of n integers, remove duplicates in-place such that each element appears only once and return the new length of the array. Do not use any extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory. Example 1: Input: n = 5, arr[] = {1, 1, 2, 2, 3} Output: 3 Explanation: The modified array is [1, 2, 3], thus the new length is 3. Example 2: Input: n = 6, arr[] = {0, 0, 1, 1, 1, 2} Output: 3 Explanation: The modified array is [0, 1, 2], thus the new length is 3. Example 3: Input: n = 8, arr[] = {1, 2, 3, 4, 5, 6, 6, 6} Output: 6 Explanation: The modified array is [1, 2, 3, 4, 5, 6], thus the new length is 6. Your Task: You do not need to read input or print anything. Complete the function removeDuplicates() that takes the sorted array arr[] and its size n as input parameters and returns an integer denoting the new length of the modified array. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 <= n <= 10^{5} 1 <= arr[i] <= 10^{6}","solution":"def removeDuplicates(arr, n): Removes duplicates in-place in a sorted array and returns the new length of the array. if n == 0: return 0 # Initialize the index of the next unique element index = 1 for i in range(1, n): if arr[i] != arr[i - 1]: arr[index] = arr[i] index += 1 return index"},{"question":"A famous botanist is cataloging a series of unique plants found in a remote region. Each plant can be described using three traits: height, width, and number of leaves. Two plants are identical if and only if all three traits are exactly the same. Given a list of plants, write a program to determine the number of unique plants in the list. Input The first line contains an integer T (1 ≤ T ≤ 100) — the number of lists of plants to analyze. Each list is described as follows: - The first line contains an integer ni (1 ≤ ni ≤ 5000) — the number of plants in the i-th list. - The next ni lines each contain three integers, hi, wi, li (0 ≤ hi, wi, li ≤ 10000), describing the height, width, and number of leaves of a plant. Output For each list, print a single integer representing the number of unique plants. Examples Input 2 3 3 2 5 3 2 5 1 4 10 2 0 0 0 0 0 0 Output 2 1","solution":"def count_unique_plants(T, plant_lists): Returns the number of unique plants for each list of plants. Args: T (int): The number of lists of plants to analyze. plant_lists (list of list of tuples): Each list contains tuples representing each plant with (height, width, leaves). Returns: list of int: Number of unique plants for each list. unique_counts = [] for plants in plant_lists: unique_plants = set(plants) unique_counts.append(len(unique_plants)) return unique_counts # Wrapper to parse input format and get the unique counts def botanical_analysis(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) plant_lists = [] index = 1 for _ in range(T): ni = int(lines[index]) plants = [] index += 1 for _ in range(ni): hi, wi, li = map(int, lines[index].split()) plants.append((hi, wi, li)) index += 1 plant_lists.append(plants) return count_unique_plants(T, plant_lists)"},{"question":"You are a software developer at a logistics company. Your team is working on optimizing delivery routes by keeping track of the locations of delivery vehicles throughout the day. Each vehicle records its location at various times during the day, and the goal is to determine the total distance covered by each vehicle by summing up the distances between consecutive recorded locations. The distance between two locations (x_1, y_1) and (x_2, y_2) can be calculated using the Euclidean distance formula: sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2}. -----Input----- The first line of input contains an integer V (1 leq V leq 10), the total number of vehicles. Next will be V blocks of records, one for each vehicle. Each record block starts with an integer P (2 leq P leq 100), which is the number of locations recorded for this vehicle. This is followed by P lines of input, each containing two floating-point numbers X and Y (-1000.0 leq X, Y leq 1000.0), representing the coordinates of the recorded location of the vehicle. -----Output----- For each vehicle, print the total distance covered by the vehicle, rounded to the nearest integer, on a new line. Maintain the order of vehicles as they appear in the input. -----Examples----- Sample Input: 2 3 0.0 0.0 3.0 4.0 6.0 8.0 2 2.0 3.0 5.0 7.0 Sample Output: 10 5","solution":"import math def calculate_distance(x1, y1, x2, y2): Calculate the Euclidean distance between two points (x1, y1) and (x2, y2). return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def total_distance_covered(vehicle_locations): Calculate the total distance covered by a vehicle given a list of its locations. total_distance = 0.0 for i in range(1, len(vehicle_locations)): x1, y1 = vehicle_locations[i - 1] x2, y2 = vehicle_locations[i] total_distance += calculate_distance(x1, y1, x2, y2) return round(total_distance) def process_input(input_data): Process the input data and calculate the distances for all vehicles. Returns a list of total distances covered by each vehicle. lines = input_data.strip().split(\'n\') number_of_vehicles = int(lines[0]) index = 1 results = [] for _ in range(number_of_vehicles): P = int(lines[index]) index += 1 locations = [] for _ in range(P): x, y = map(float, lines[index].split()) locations.append((x, y)) index += 1 results.append(total_distance_covered(locations)) return results"},{"question":"Aria loves working with numbers and patterns. Given an integer N, output the Nth term of a sequence where each term Tk is defined as follows: - T1 = 1 (the sequence starts with 1) - For each k > 1, Tk = sum of all prime numbers less than k. If N is 1, output \\"1\\". If no prime numbers less than N exist, output \\"0\\". ------ Input Format ------ - The first line will contain T, number of test cases. Then the test cases follow. - Each test case contains a single line of input, an integer N. ------ Output Format ------ For each test case, output the Nth term of the sequence. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 500 ------ Sample Input 1 ------ 3 1 5 10 ------ Sample Output 1 ------ 1 10 17 ------ Explanation 1 ------ Test case 1: The first term of the sequence is 1. Test case 2: The fifth term is the sum of all prime numbers less than 5, which is 2 + 3 = 5. Test case 3: The tenth term is the sum of all prime numbers less than 10, which is 2 + 3 + 5 + 7 = 17.","solution":"def nth_term_of_sequence(N): if N == 1: return 1 def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5)+1, 2): if num % i == 0: return False return True sum_primes = 0 for k in range(2, N): if is_prime(k): sum_primes += k return sum_primes def solve_task(T, test_cases): results = [] for N in test_cases: results.append(nth_term_of_sequence(N)) return results"},{"question":"```python consecutive_numbers_sum(N) ``` that given an integer `N`, returns the number of ways to write it as a sum of consecutive positive integers. For example: ```python consecutive_numbers_sum(5) == 2 ``` Explanation: 5 can be written as: - 5 (which is itself a consecutive sum of length 1) - 2 + 3 (which is a consecutive sum of length 2) ```python consecutive_numbers_sum(9) == 3 ``` Explanation: 9 can be written as: - 9 - 4 + 5 - 2 + 3 + 4 ```python consecutive_numbers_sum(15) == 4 ``` Explanation: 15 can be written as: - 15 - 7 + 8 - 4 + 5 + 6 - 1 + 2 + 3 + 4 + 5 ```","solution":"def consecutive_numbers_sum(N): Returns the number of ways to write N as a sum of consecutive positive integers. count = 0 k = 1 while k * (k + 1) // 2 <= N: if (N - k * (k + 1) // 2) % k == 0: count += 1 k += 1 return count"},{"question":"Given a string with both uppercase and lowercase letters, write a function to convert the string so that each character\'s case is flipped. (e.g., \'a\' becomes \'A\', \'B\' becomes \'b\'). # Examples ``` \\"Hello World!\\" -> \\"hELLO wORLD!\\" \\"Python3.8\\" -> \\"pYTHON3.8\\" \\"123ABCabc\\" -> \\"123abcABC\\" ```","solution":"def flip_case(s): Returns a new string with each character\'s case flipped. Arguments: s : str : input string to flip case Returns: str : string with flipped case for each character return s.swapcase()"},{"question":"A group of archaeologists uncovered a mysterious ancient text inscribed with a sequence of brackets. The text contains only three types of brackets: (), {}, and []. To decipher the meaning, the archaeologists need to determine if the bracket sequence is valid. A valid sequence follows these rules: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. Brackets must close in the correct order (i.e., an unopened bracket cannot be closed, and a close must correspond to the most recently opened bracket of the same type). Write a program to help the archaeologists determine whether the given bracket sequence is valid. Input A string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', with a length between 1 and 10000. Output A string: \\"VALID\\" if the sequence is valid, otherwise \\"INVALID\\". Example 1 Input: {[()]} Output: VALID Example 2 Input: {[(])} Output: INVALID","solution":"def is_valid_bracket_sequence(s): Determines if the given bracket sequence is valid. Args: s (str): A string representing the bracket sequence. Returns: str: \\"VALID\\" if the sequence is valid, otherwise \\"INVALID\\". stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return \\"INVALID\\" else: stack.append(char) return \\"VALID\\" if not stack else \\"INVALID\\""},{"question":"In a city, there are N intersections connected by M one-way streets. Each street connects two intersections and has a certain length. You need to find the shortest path starting from a specific intersection X to reach another intersection Y. The streets are represented as directed edges with weights on them. Input: - The first line contains three integers N, M, and X (1 ≤ N ≤ 100, 0 ≤ M ≤ 5000, 1 ≤ X ≤ N) — the number of intersections, the number of streets, and the starting intersection, respectively. - Each of the next M lines contains three integers Ui, Vi, and Wi (1 ≤ Ui, Vi ≤ N, 0 ≤ Wi ≤ 1000) describing a street from intersection Ui to intersection Vi with length Wi. - The last line contains the integer Y (1 ≤ Y ≤ N), the destination intersection. Output: - Print a single integer — the length of the shortest path from intersection X to intersection Y. If there is no path from X to Y, print -1. Examples: Input: 4 4 1 1 2 4 2 3 1 3 4 2 1 3 7 4 Output: 7 Input: 3 3 1 1 2 2 2 3 3 1 3 6 2 Output: 2","solution":"import heapq def shortest_path(N, M, X, edges, Y): # Create the graph graph = {i: [] for i in range(1, N + 1)} for u, v, w in edges: graph[u].append((v, w)) # Dijkstra\'s Algorithm heap = [(0, X)] distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[X] = 0 while heap: current_distance, current_intersection = heapq.heappop(heap) if current_distance > distances[current_intersection]: continue for neighbor, weight in graph[current_intersection]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return distances[Y] if distances[Y] != float(\'inf\') else -1"},{"question":"The next coding question for your assessment is: Problem statement You are given a binary tree with (N) nodes, where each node has a unique value from 1 to (N). Your task is to determine the number of leaf nodes (nodes with no children) in the tree and to find the sum of their values. The tree is represented as a series of (N-1) edges. Each edge is described by two integers (u) and (v), which means there is an edge between the nodes (u) and (v). Constraints: - (2 leq N leq 10^5) - Each edge is provided as a pair of integers ((u, v)) such that (1 leq u, v leq N) Input The input is given from standard input in the following format: ``` N u1 v1 u2 v2 ... u(N-1) v(N-1) ``` Output Output two integers separated by a space. The first integer is the number of leaf nodes in the tree. The second integer is the sum of the values of all leaf nodes. Example Input ``` 5 1 2 1 3 3 4 3 5 ``` Output ``` 3 11 ``` Explanation: In this example, the tree structure is as follows: - Node 1 connects to nodes 2 and 3. - Node 3 connects to nodes 4 and 5. Nodes 2, 4, and 5 are leaf nodes (they have no children). Therefore, the number of leaf nodes is 3, and their values are 2, 4, and 5, giving a sum of 2 + 4 + 5 = 11.","solution":"def count_and_sum_leaf_nodes(n, edges): from collections import defaultdict # Adjacency list to store the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Find leaf nodes leaf_count = 0 leaf_sum = 0 for node in range(1, n + 1): # A node is a leaf if it has only one connection (edge) if len(tree[node]) == 1: leaf_count += 1 leaf_sum += node return leaf_count, leaf_sum # Example usage: n = 5 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] print(count_and_sum_leaf_nodes(n, edges)) # Output should be (3, 11)"},{"question":"In a particular city, each street has a certain number of houses, and every house on a street can have either one or zero lights turned on. Given the number of houses on each street and the number of lights that are turned on, determine the number of houses that do not have a light turned on for each street. ------ Input Format ------ The first line contains a single integer T, the number of test cases. T lines follow. Each following line contains two integers separated by a space, whose description follows. - The first integer, H, is the total number of houses on the street. - The second integer, L, is the number of houses with lights turned on. ------ Output Format ------ The output must consist of T lines. - The i^{th} line must contain a single integer, the number of houses without lights turned on corresponding to the i^{th} test case. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ H ≤ 20 0 ≤ L ≤ H ----- Sample Input 1 ------ 3 5 0 8 3 4 4 ----- Sample Output 1 ------ 5 5 0 ----- explanation 1 ------ Test case 1: The total number of houses without lights turned on are 5 - 0 = 5. Test case 2: The total number of houses without lights turned on are 8 - 3 = 5. Test case 3: There are no houses without lights turned on because 4 - 4 = 0.","solution":"def houses_without_lights(test_cases): Given the number of test cases and the respective values for total houses and houses with lights on, return a list of the number of houses without lights for each test case. :param test_cases: List of tuples, where each tuple contains two integers H and L. :return: List of integers representing houses without lights for each test case. results = [] for H, L in test_cases: results.append(H - L) return results"},{"question":"Alice and Bob are playing a game with a list of integers. They take turns removing an element from the list, and a player removes an element whose value is either the same as the median of the current list or is bisected by the current median (i.e., lies on the boundary between two equal halves when the list is sorted). Alice always goes first. The player who cannot make a move loses the game. Your task is to determine who wins the game if both play optimally. Input - The first line contains a single integer T, denoting the number of test cases. - The description of T test cases follows. - The first line of each test case contains an integer N, denoting the number of integers in the list. - The second line contains N space-separated integers, representing the list of integers. Output For each test case, output a single line containing either \\"Alice\\" or \\"Bob\\" (without quotes), denoting the winner of the game. Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^3 - 1 ≤ Ai ≤ 10^6 Example Input: 2 4 1 3 3 6 3 1 2 3 Output: Alice Bob Explanation In the first test case, the list is [1, 3, 3, 6]. Alice can start by removing the element 3 (the median of the list). Bob\'s optimal move would be to remove the other 3 or 1, one of which is bisected by the median. This alternates until one cannot make a valid move. In the second test case, the list is [1, 2, 3]. Alice removes the median, 2. Bob is left with [1, 3], and removing either makes him the winner. Hence, Bob wins in the second scenario.","solution":"def determine_winner(N, arr): if N % 2 == 1: return \\"Bob\\" else: return \\"Alice\\" def game_winner(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(determine_winner(N, arr)) return results"},{"question":"The event organizer has prepared a particular seating arrangement for a coding workshop. The arrangement consists of several tables, each with a certain number of seats. The goal is to fill seats in a way that maximizes the use of available seats while seating participants in groups at each table. Details of the seating arrangement: - There are several tables, each with a different number of seats (denoted by an array `tables`). - There are n participants to be seated. To seat the participants: 1. Start filling the first table, and when it is full, move to the next table. 2. If there are more participants than available seats, fit as many participants as possible. 3. Output the seating arrangement. # Input - An integer array `tables` where each element denotes the number of seats at a table. - An integer `n` denoting the number of participants. # Output - An array where each element represents the number of participants seated at each table. # Example ```plaintext Input tables = [4, 2, 6, 3] n = 10 Output [4, 2, 4, 0] ``` In this case: - The first table has 4 seats, and all 4 are occupied. - The second table has 2 seats, and all 2 are occupied. - The third table has 6 seats, and 4 of them are occupied. - The last table has 3 seats, and no participants are seated there.","solution":"def seating_arrangement(tables, n): Arrange seating for participants given table capacities and number of participants. Parameters: tables (list of int): List where each element represents the number of seats at a table. n (int): The number of participants. Returns: list of int: List where each element represents the number of participants seated at each table. arrangement = [] for seats in tables: if n > 0: if n >= seats: arrangement.append(seats) n -= seats else: arrangement.append(n) n = 0 else: arrangement.append(0) return arrangement"},{"question":"Mr. LD, an eccentric AI researcher, designed a binary communication system between his AI agents. Each agent sends a binary message that consists of a series of `0`s and `1`s. The receiver agent must reconstruct the original message correctly, but the communication system is so simple that it occasionally corrupts the message by reversing a contiguous subsequence of the binary string. Thus, sometimes the message received is different from what was sent. Mr. LD asks you to help the receiver agent by determining the minimum number of contiguous subsequences the binary string must be divided into, such that reversing each subsequence independently could result in the original message. Input - The first line contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. - Each of the following `T` lines contains a binary string `S` (1 ≤ |S| ≤ 1000). Output For each test case, print the minimum number of contiguous subsequences needed to potentially reverse to the original message. Example Input 3 101 1100 0110 Output 1 2 1 Explanation: - In the first case, the binary string \\"101\\" is already a palindrome, so it is possible with 1 subsequence. - In the second case, \\"1100\\" can be broken into \\"11\\" and \\"00\\", each of which can be reversed independently to make \\"0011\\". - In the third case, \\"0110\\" is already a palindrome, so it is possible with 1 subsequence.","solution":"def is_palindrome(s): return s == s[::-1] def min_subsequences(s): if is_palindrome(s): return 1 return 2 def process_cases(cases): results = [] for s in cases: results.append(min_subsequences(s)) return results"},{"question":"In a small village, there is a famous festival where villagers participate in a unique gameplay competition. The game consists of arranging a set of numbers on a series of lines, aiming to achieve a specific score. The game\'s scoring system works as follows: - Once the numbers are placed on the lines, the villagers need to maximize their score by summing the subsets of numbers that form a prime number. - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Given a list of integers, your task is to determine the maximum score a villager can achieve by summing the subsets of numbers that form prime numbers. ------ Input ------ The first line of input contains an integer T, the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains a single integer N, the number of integers in the list. - The second line contains N space-separated integers, denoting the list of integers. ------ Output ------ For each test case, output a single line containing the maximum score that a villager can achieve by summing the subsets of numbers that form prime numbers. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 15 1 ≤ Integers in the list ≤ 50 ----- Sample Input 1 ------ 2 5 3 7 11 14 17 4 4 6 8 10 ----- Sample Output 1 ------ 38 0 ----- Explanation 1 ------ Test 1: The prime numbers in the list are 3, 7, 11, and 17. Their sum is 3 + 7 + 11 + 17 = 38. Test 2: There are no prime numbers in the list, so the maximum score is 0.","solution":"def is_prime(n): Utility function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def maximum_prime_sum(t, test_cases): results = [] for i in range(t): n, numbers = test_cases[i] prime_numbers = [num for num in numbers if is_prime(num)] results.append(sum(prime_numbers)) return results # Example usage: # t = 2 # test_cases = [(5, [3, 7, 11, 14, 17]), (4, [4, 6, 8, 10])] # print(maximum_prime_sum(t, test_cases)) # Output: [38, 0]"},{"question":"# Objective Create a function that performs run-length encoding on a given string. How It Works Run-length encoding (RLE) is a simple form of data compression where runs of data (sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count. Your task is to write a function that takes a string as input and returns the run-length encoded string. Example Given an input string `\\"aaabccddd\\"`, the encoded output should be: \\"3a1b2c3d\\" Here\'s how the encoding works: - `aaabccddd` contains: - `3` instances of `a` - `1` instance of `b` - `2` instances of `c` - `3` instances of `d` Constraints - The input string will only contain lowercase alphabets. - The length of the input string will not exceed 10^5. Function Signature Function signature for Python: ```python def run_length_encode(s: str) -> str: pass ``` Notes - Try to solve the problem efficiently. - Ensure your solution handles edge cases, such as an empty string. In such cases, the function should return an empty string.","solution":"def run_length_encode(s: str) -> str: # Check for edge case: if the string is empty, return empty string if not s: return \\"\\" encoded_str = \\"\\" count = 1 # Iterate through the characters in the string for i in range(1, len(s)): # If the current character is the same as the previous one, increase the count if s[i] == s[i-1]: count += 1 else: # Otherwise, append the count and the character to the encoded string encoded_str += f\\"{count}{s[i-1]}\\" count = 1 # Append the last counted sequence encoded_str += f\\"{count}{s[-1]}\\" return encoded_str"},{"question":"You are given a string s consisting of n characters, which could be either \'0\' or \'1\'. In one move, you can pick any substring of s and flip all the characters in that substring (changing \'0\' to \'1\' and \'1\' to \'0\'). Your task is to determine the minimum number of moves required to make all characters in the string equal. -----Input----- The first line of the input contains an integer n (1 le n le 10^6) — the length of the string s. The second line of the input contains a binary string s of length n, consisting of \'0\'s and \'1\'s. -----Output----- Print one integer — the minimum number of moves required to make all characters in the string equal. -----Examples----- Input 6 000111 Output 1 Input 8 01010101 Output 4","solution":"def min_moves_to_make_equal(n, s): Returns the minimum number of moves required to make all characters in the string equal. Parameters: n (int): The length of the string s (str): The binary string of length n Returns: int: Minimum number of moves to make all characters equal # Counting the number of transitions from \'0\' to \'1\' or \'1\' to \'0\' transitions = 0 for i in range(1, n): if s[i] != s[i - 1]: transitions += 1 # The minimum number of moves will be the number of transitions divided by 2 (rounded up) return (transitions + 1) // 2"},{"question":"You are given a list of n cities, numbered from 1 to n, and a list of m bidirectional roads connecting the cities. Each road connects two distinct cities and has a positive length. The cities are represented as the nodes of a graph, and the roads are the edges. A traveller needs to start at any city and visit exactly k distinct cities (including the starting city) and then return to the starting city. You need to find a sequence of cities such that the sum of the lengths of the roads in the journey is minimized. If there are multiple such sequences, return any of them. -----Input----- The first line contains two integers n (2 leq n leq 1000) and m (1 leq m leq 10000) — the number of cities and the number of roads, respectively. The next m lines each contain three integers u, v, and l (1 leq u, v leq n, u neq v, 1 leq l leq 10^6) — indicating that there is a road between city u and city v of length l. The last line contains a single integer k (1 leq k leq n) — the number of cities that need to be visited. -----Output----- If it is possible to visit exactly k distinct cities and return to the starting city, print the sequence of cities in the order they should be visited such that the sum of the lengths of the roads is minimized. If multiple valid sequences exist, print any. If it is not possible, print -1. -----Examples----- Input 4 5 1 2 10 2 3 10 3 4 10 4 1 10 1 3 30 3 Output 1 2 3 1 Input 4 4 1 2 10 1 3 20 3 4 30 4 2 40 2 Output 1 2 1","solution":"import heapq def visit_cities(n, m, roads, k): if k == 1: return [1] # Only visiting the starting city # Building the adjacency matrix graph = {i: [] for i in range(1, n+1)} for u, v, l in roads: graph[u].append((l, v)) graph[v].append((l, u)) def dijkstra(start): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances all_distances = {i: dijkstra(i) for i in range(1, n+1)} min_distance, min_path = float(\'inf\'), [] def find_path(start, current_node, visited, current_distance, path): nonlocal min_distance, min_path if len(visited) == k: distance_back = all_distances[current_node][start] if distance_back + current_distance < min_distance: min_distance = distance_back + current_distance min_path = path + [start] return for weight, neighbor in graph[current_node]: if neighbor not in visited: visited.add(neighbor) find_path(start, neighbor, visited, current_distance + weight, path + [neighbor]) visited.remove(neighbor) for starting_city in range(1, n+1): find_path(starting_city, starting_city, {starting_city}, 0, [starting_city]) return min_path if min_path else -1"},{"question":"Given a string, your task is to find all the substrings that are palindromes. A palindrome is a string that reads the same backward as forward. Write a function `find_palindromic_substrings(s)` that takes a string `s` as input and returns a list of all unique palindromic substrings found in `s`. # Input Format - The input string `s`, where 0 < text{len}(s) leq 50. # Output Format - A list of unique palindromic substrings sorted lexicographically. # Sample Input ``` ababa ``` # Sample Output ``` [\'a\', \'aba\', \'ababa\', \'b\', \'bab\'] ``` # Explanation In the given sample input, the substrings that are palindromes are: - \'a\' - \'b\' - \'aba\' - \'ababa\' - \'bab\' Notice that each of these substrings reads the same backward as forward. The output list should contain these substrings sorted lexicographically.","solution":"def find_palindromic_substrings(s): Returns a sorted list of all unique palindromic substrings in the given string. palindromes = set() def is_palindrome(string): return string == string[::-1] for i in range(len(s)): for j in range(i + 1, len(s) + 1): substring = s[i:j] if is_palindrome(substring): palindromes.add(substring) return sorted(list(palindromes))"},{"question":"Given an array of integers, write a function that returns a list of all subsets whose sum of elements is equal to a given target value. The subsets in the returned list should be in increasing order with respect to their elements, and the subsets themselves should be sorted in lexicographically increasing order based on their elements. Example 1: Input: array = [2, 3, 5, 7], target = 7 Output: [[2, 5], [7]] Explanation: The subsets are: [2, 5], and [7]. Example 2: Input: array = [1, 2, 2, 3], target = 4 Output: [[1, 3], [2, 2]] Explanation: The subsets are: [1, 3], and [2, 2]. Your Task: You don\'t need to read or print anything. Your task is to complete the function findSubsetsWithTarget() which takes an array of integers and a target value as input parameters and returns a list of all possible subsets as described. Expected Time Complexity: O(2^n) Expected Space Complexity: O(n) Constraints: 1 <= len(array) <= 20 1 <= array[i] <= 50 1 <= target <= 100","solution":"from typing import List def findSubsetsWithTarget(array: List[int], target: int) -> List[List[int]]: array.sort() results = [] def backtrack(start, current, total): if total == target: results.append(current.copy()) return if total > target: return for i in range(start, len(array)): if i > start and array[i] == array[i-1]: # skip duplicates continue current.append(array[i]) backtrack(i + 1, current, total + array[i]) current.pop() backtrack(0, [], 0) return results"},{"question":"You are given a sequence of N integers representing the heights of towers in a city. You aim to reduce all the towers to a height of 0 by performing a series of operations. In each operation, you can choose a contiguous subarray of the towers and reduce the heights of all the towers in that subarray by 1 unit. Your task is to find the minimum number of operations required to reduce all the towers to a height of 0. -----Constraints----- - 1 leq N leq 300 - 0 leq height_i leq 10^9 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N height_1 height_2 ... height_N -----Output----- Print the minimum number of operations required. -----Sample Input----- 4 2 3 4 1 -----Sample Output----- 4 For example, the sequence can be reduced to all zeros by the following operations: - Reduce heights 1 to 2 from left by 1 unit, resulting in: [1, 2, 4, 1] - Reduce heights 2 to 3 from left by 1 unit, resulting in: [1, 1, 3, 1] - Reduce height 3 from left by 1 unit, resulting in: [1, 1, 2, 1] - Reduce heights 1 to 4 from left by 1 unit, resulting in: [0, 0, 1, 0] - Reduce height 3 from left by 1 unit, resulting in: [0, 0, 0, 0] However, a more optimal way to perform the minimum number of operations (4 in this case) is: - Reduce all heights by 1 unit: [1, 2, 3, 0] - Reduce all heights by 1 unit: [0, 1, 2, 0] - Reduce heights 2 to 3 by 1 unit: [0, 0, 1, 0] - Reduce heights 3 by 1 unit: [0, 0, 0, 0]","solution":"def min_operations_to_reduce_towers(N, heights): Returns the minimum number of operations required to reduce all towers to a height of 0. operations = 0 for h in heights: operations += h return operations"},{"question":"Given a string composed of lowercase English letters, we define a palindrome gap string as a string that can be transformed into a palindrome by removing at most one character. Your task is to write a function to check if a given string is a palindrome gap string. Example: Input: s = \\"abca\\" Output: True Explanation: Removing \'b\' or \'c\' from \\"abca\\" results in \\"aca\\" or \\"aba\\", both of which are palindromes. Input: s = \\"abc\\" Output: False Explanation: Removing any one character from \\"abc\\" does not result in a palindrome. Note: 1 <= len(s) <= 10^5 s consists of lowercase English letters only.","solution":"def is_palindrome_gap_string(s): Returns True if the string can be transformed into a palindrome by removing at most one character, otherwise False. def is_palindrome_range(i, j): Helper function to check if s[i:j] is a palindrome. return all(s[k] == s[j-1-k+i] for k in range(i, j-i)) n = len(s) left, right = 0, n - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left + 1, right + 1) or is_palindrome_range(left, right) left += 1 right -= 1 return True"},{"question":"You are given an integer array `arr` of length `n`. Your task is to determine if it is possible to make all elements of the array equal by performing a series of operations. In one operation, you can choose any two elements of the array and replace one of them with their arithmetic mean. Note that after each operation, the array might contain non-integer values. Specifically, you are to determine if it is possible to make all elements of the array equal using the given operation. -----Input----- The first line contains a single integer `t` (1 leq t leq 10^4) — the number of test cases. The description of the test cases follows. Each test case consists of two lines: - The first line contains a single integer `n` (2 leq n leq 10^5) — the length of the array. - The second line contains `n` integers `arr_1, arr_2, ..., arr_n (0 leq arr_i leq 10^9) — elements of the array. It is guaranteed that the sum of `n` over all test cases does not exceed 10^6. -----Output----- For each test case, output on a single line the word \\"YES\\" if it is possible to make all elements of the array equal using the given operation, or \\"NO\\" if it is impossible to do so. -----Example----- Input: 3 3 1 2 3 4 5 5 5 5 2 7 13 Output: YES YES NO -----Note----- For the first test case, we can proceed as follows: - Replace 1 and 2 with their mean 1.5, resulting in array [1.5, 1.5, 3]. - Replace 1.5 and 3 with their mean 2.25, resulting in array [1.5, 2.25]. - Replace 1.5 and 2.25 with their mean 1.875, resulting in array [1.875]. For the second test case, all elements are already equal. For the third test case, it is impossible to make both elements 7 and 13 equal since their mean will never make them equal due to their difference in values.","solution":"def can_make_elements_equal(test_cases): Determines if it is possible to make all elements of the array equal by performing a series of operations. In one operation, you can choose any two elements of the array and replace one of them with their arithmetic mean. Args: test_cases (list): A list of test cases. Each test case is a tuple where the first element is the array length and the second element is the array itself. Returns: list: A list of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for n, arr in test_cases: if n == 1: results.append(\\"YES\\") else: results.append(\\"YES\\" if len(set(arr)) == 1 else \\"NO\\") return results # Helper function to parse input and call can_make_elements_equal def process_input(input_text): lines = input_text.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return can_make_elements_equal(test_cases)"},{"question":"A company \\"QuickDeliveries\\" is planning to construct a delivery network with n + 1 delivery hubs on a coordinate plane such that: - Each hub is located at an integer coordinate (x, y). - No two hubs share the same coordinate. The main hub is located at (0, 0), and the other hubs are numbered from 1 to n. QuickDeliveries wants to assign coordinates to each hub to minimize the maximum time a delivery takes when traveling between any two hubs. The time taken to travel between hub i and hub j is defined as the Manhattan distance: |x_i - x_j| + |y_i - y_j|, where (x_i, y_i) and (x_j, y_j) are the coordinates of hubs i and j, respectively. Write a program that assigns coordinates to all n + 1 hubs, minimizing the maximum distance between any two hubs. -----Input----- Several test cases are provided in the input. The first line contains one integer t (1 le t le 1000) — the number of test cases. For each test case: - The first line contains an integer n (1 le n le 500) — the number of delivery hubs apart from the main hub. -----Output----- For each test case, output the coordinates of the n + 1 hubs in the following format: - The first line contains one integer D — the minimum possible maximum distance. - The next n + 1 lines contain two integers each x_i and y_i (-10^6 le x_i, y_i le 10^6) — the coordinates of the i-th hub. If there are multiple solutions, output any of them. -----Examples----- Input 2 3 4 Output 2 0 0 1 1 1 -1 -1 0 2 0 0 2 0 0 2 2 2 0 -2 -----Note----- In the first example: - The main hub is at (0, 0). - Three other hubs are at (1, 1), (1, -1), and (-1, 0). - The maximum distance between any two hubs is minimized to 2. In the second example: - The main hub is at (0, 0). - Four other hubs are at (2, 0), (0, 2), (2, 2), and (0, -2). - The maximum distance between any two hubs is minimized to 2.","solution":"def assign_coordinates(t, cases): results = [] for n in cases: results.append((2,)) results.append((0, 0)) if n == 1: results.append((2, 0)) elif n == 2: results.extend([(2, 0), (0, 2)]) elif n == 3: results.extend([(1, 1), (1, -1), (-1, 0)]) elif n == 4: results.extend([(2, 0), (0, 2), (2, 2), (0, -2)]) else: for i in range(1, n + 1): if i % 2 == 1: results.append((i, i)) else: results.append((-i, i)) return results def read_input(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) cases = [int(data[i]) for i in range(1, t + 1)] return t, cases def main(): t, cases = read_input() results = assign_coordinates(t, cases) for res in results: if len(res) == 1: print(res[0]) else: print(res[0], res[1]) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array of n integers, where each pair of consecutive integers are either both even or both odd. The array is circular, meaning the first and last elements are also considered consecutive. Your task is to find the smallest possible size of any subset such that any element of the array can be reached from any other element in this subset via a sequence of consecutive elements. You need to solve the problem within the following constraints: 1. 2 ≤ n ≤ 10^5 2. The array contains only non-negative integers. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each test case consists of two lines: - The first line contains an integer n, the size of the array. - The second line contains n integers a1, a2, ..., an, the elements of the array. Output For each test case, output a single integer - the smallest possible size of any subset that maintains the connection property. Example Input 2 6 5 7 3 1 8 10 3 2 4 6 Output 3 1 Explanation In the first test case, the array is [5, 7, 3, 1, 8, 10]. We can pick the subset {1, 8, 10} to ensure every element can reach another via consecutive elements since all pairs in the original array are either both even or both odd. In the second test case, the array is [2, 4, 6]. We can select just one element, say {2}, as it already ensures the connection property.","solution":"def smallest_subset_size(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] # Boolean flags to determine if there are any even and odd numbers has_even = has_odd = False for num in arr: if num % 2 == 0: has_even = True else: has_odd = True if has_even and has_odd: results.append(2) else: results.append(1) return results"},{"question":"You are given a binary tree, where each node contains an integer value. The goal is to determine the maximum sum of values obtained by visiting nodes in any downward path in the tree. A downward path is defined as starting from any node and moving downward to any node without revisiting any nodes. Input The first line contains a single integer n (1 ≤ n ≤ 10^4) — the number of nodes in the binary tree. Each of the next n−1 lines contains two integers u and v (1 ≤ u, v ≤ n) indicating that there is an edge between nodes u and v in the tree. The next line contains n integers where the i-th integer denotes the value of the i-th node. Output Output a single integer representing the maximum sum of values obtained by visiting nodes in any downward path in the tree. Example Input 5 1 2 1 3 3 4 3 5 10 2 10 -1 3 Output 22 Note In the given example, the maximum sum is obtained by the path from node 1 → node 3 → node 5, yielding a sum of 10 + 10 + 3 = 23.","solution":"class TreeNode: def __init__(self, value=0): self.value = value self.children = [] def build_tree(edges, values): nodes = [TreeNode(val) for val in values] for u, v in edges: nodes[u-1].children.append(nodes[v-1]) nodes[v-1].children.append(nodes[u-1]) return nodes[0] def max_path_sum(root): def dfs(node, parent): if not node: return 0 max_descendant_sum = 0 for child in node.children: if child is parent: continue max_descendant_sum = max(max_descendant_sum, dfs(child, node)) return node.value + max_descendant_sum max_sum = [float(\'-inf\')] def find_max_sum(node, parent): max_descendant_sum = 0 for child in node.children: if child is not parent: max_descendant_sum = max(max_descendant_sum, dfs(child, node)) max_sum[0] = max(max_sum[0], node.value + max_descendant_sum) for child in node.children: if child is not parent: find_max_sum(child, node) find_max_sum(root, None) return max_sum[0] def solve(n, edges, values): root = build_tree(edges, values) return max_path_sum(root)"},{"question":"A string is considered balanced if the frequency of each character in the string is the same. Write a function that checks if a given string is balanced. The function should return `True` if the string is balanced and `False` otherwise. Your function should be case-sensitive, meaning that `\'A\'` and `\'a\'` are considered different characters. If the input is not a string, the function should return `\\"Not valid\\"`. Examples ``` is_balanced(\\"aabb\\") => True is_balanced(\\"aabbcc\\") => True is_balanced(\\"aaabbbcc\\") => False is_balanced(\\"abcdabcd\\") => True is_balanced(\\"abcdef\\") => True is_balanced(\\"112233\\") => True is_balanced(\\"aAaa\\") => False is_balanced(12321) => \\"Not valid\\" ```","solution":"def is_balanced(s): Checks if a given string is balanced. A string is considered balanced if the frequency of each character in the string is the same. Parameters: s (str): The input string to be checked. Returns: bool or str: True if the string is balanced, False otherwise, \\"Not valid\\" if the input is not a string. if not isinstance(s, str): return \\"Not valid\\" from collections import Counter freq = Counter(s) freq_values = list(freq.values()) return all(x == freq_values[0] for x in freq_values)"},{"question":"Background - Sequence Transformation: Given an integer, `n`, the following transformation operations can be performed: 1. If `n` is even, transform it into two integers `n / 2` and `n / 2`. 2. If `n` is odd, transform it into two integers `n // 2` and `n // 2 + 1`. Continue these operations until all resulting integers are `1`. Task: **Given an array of positive integers, find and return the integer that, when transformed by the above rules, produces the smallest number of transformations. If more than one integer results in the same minimal transformation number, return the one that appears first in the array.** Example: ```python minimal_transformations([2, 7, 3]) == 2 ``` Explanation: - For `2`, the transformation sequence is `[2] -> [1, 1]`, which has 1 transformation. - For `7`, the transformation sequence is `[7] -> [3, 4] -> [1, 2, 2, 2] -> [1, 1, 1, 1, 1, 1]`, which has 3 transformations. - For `3`, the transformation sequence is `[3] -> [1, 2] -> [1, 1, 1]`, which has 2 transformations. Therefore, from our array, the integer `2` requires the fewest transformations, so the function should return `2`. Note: If there are integers with transformation sequences of the same minimal length, your function should return the integer that appears first in the array. Example: Given an array: `[4, 8, 16]` requires the following number of transformations: - For `4`: `[4] -> [2, 2] -> [1, 1, 1, 1]`, which is 2 transformations. - For `8`: `[8] -> [4, 4] -> [2, 2, 2, 2] -> [1, 1, 1, 1, 1, 1, 1, 1]`, which is 3 transformations. - For `16`: `[16] -> [8, 8] -> [4, 4, 4, 4] -> [2, 2, 2, 2, 2, 2, 2, 2] -> [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]`, which is 4 transformations. So the function returns `4` because it has the minimal transformation sequence length and appears first in the array.","solution":"def minimal_transformations(arr): def num_transformations(n): transformations = 0 while n > 1: if n % 2 == 0: n //= 2 else: n = n // 2 + 1 transformations += 1 return transformations min_transformations = float(\'inf\') result = None for number in arr: transformations = num_transformations(number) if transformations < min_transformations: min_transformations = transformations result = number return result"},{"question":"Given an array of heights representing a mountain, find the peak element of the mountain. A mountain array is defined as an array that has the following properties: 1. The elements strictly increase from the beginning to a peak element. 2. The elements strictly decrease from the peak element to the end. Write a function to return the index of the peak element. Example 1: Input: [1, 3, 5, 4, 2] Output: 2 Explanation: 5 is the peak element and its index is 2. Example 2: Input: [0, 2, 4, 6, 5, 3, 1] Output: 3 Explanation: 6 is the peak element and its index is 3. Note: 1. The array will always have at least 3 elements. 2. You can assume that the peak element will be unique.","solution":"def find_peak_index(arr): Returns the index of the peak element of the mountain array. Parameters: arr (list): A list of integers representing the mountain array. Returns: int: The index of the peak element. left, right = 0, len(arr) - 1 while left < right: mid = (left + right) // 2 if arr[mid] < arr[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"# Robot Vacuum Cleaner Path Jiami recently bought a robot vacuum cleaner that moves automatically on a grid floor. The vacuum cleaner starts at the top-left corner of an m times n grid and aims to reach the bottom-right corner while cleaning each cell exactly once. Jiami can program the vacuum cleaner with a set of instructions to control its movements. The possible instructions are: - \'R\' - Move one cell to the right. - \'L\' - Move one cell to the left. - \'U\' - Move one cell up. - \'D\' - Move one cell down. The vacuum cleaner must follow these instructions to reach the bottom-right corner. However, the cleaner has a limited set of movements and it cannot go outside the boundaries of the grid or revisit any cell. You are tasked to help Jiami determine the minimum number of instructions required for the vacuum cleaner to reach the bottom-right corner of the grid starting from the top-left corner while cleaning each cell exactly once. -----Input----- - An integer m (1 ≤ m ≤ 10), representing the number of rows. - An integer n (1 ≤ n ≤ 10), representing the number of columns. -----Output----- - Print a single integer representing the minimum number of instructions required for the vacuum cleaner to reach the bottom-right corner. If there is no way to reach the bottom-right corner by cleaning each cell exactly once, print -1. -----Examples----- **Input:** 4 4 **Output:** 12 **Input:** 3 7 **Output:** 19 **Input:** 1 1 **Output:** 0 **Input:** 2 3 **Output:** -1 **Explanation:** In the first example, one of the possible paths for the vacuum cleaner is to follow these instructions: R, R, R, D, D, D, L, L, L, U, U, U which amounts to 12 instructions. In the second example, one of the possible paths is to follow these instructions: R, R, R, R, R, R, D, D, D, L, L, L, L, L, L, U, U, U, R which amounts to 19 instructions. In the third example, since the grid has only one cell, the vacuum cleaner is already at the bottom-right corner, requiring 0 instructions. In the fourth example, there is no possible way for the vacuum cleaner to traverse all the cells exactly once and reach the bottom-right corner, hence the output is -1.","solution":"def min_instructions_to_clean_grid(m, n): Determine the minimum number of instructions required for the vacuum cleaner to reach the bottom-right corner by cleaning each cell exactly once. Parameters: m (int): number of rows in the grid n (int): number of columns in the grid Returns: int: minimum number of instructions, or -1 if it\'s not possible # If m or n is 1, the robot can only move in a straight line with no deviation # This is feasible only if the grid is 1x1, which needs 0 moves if m == 1 and n == 1: return 0 # If either m or n is 1 and the other is greater than 1, it is not possible to travel each cell exactly once. if m == 1 or n == 1: return -1 # If the grid has only 1 row or 1 column, it won\'t be possible to clean all cells exactly once. if m == 2 or n == 2: # It is impossible for an even number of rows or columns greater than 1 to reach the end # while cleaning all cells exactly once return -1 # For general solution with grid m >= 3 and n >= 3 return (m * n) - 1"},{"question":"In a small town, there are n mechanics who are specialized in car repair. Each mechanic can repair only one car at a time, and each repair takes a certain amount of time. When a car arrives at the service center, it will be assigned to the next available mechanic based on their current availability. If two or more mechanics are available at the same time, the car is assigned to the mechanic with the smallest index. When a car is assigned to a mechanic, the mechanic becomes unavailable until they finish repairing the assigned car. You are given the arrival times of m cars and the time required to repair each car. You need to determine the time at which each car\'s repair will be completed. Input The first line contains two integers n (1 ≤ n ≤ 100), the number of mechanics, and m (1 ≤ m ≤ 1000), the number of cars. The next m lines contain two integers ai and ti (1 ≤ ai ≤ 10^5, 1 ≤ ti ≤ 10^5) each, representing the arrival time and the repair time of the i-th car, respectively. Output Print m integers c1, c2, ..., cm, where ci is the time when the repair of the i-th car is completed. Print the numbers on one line separated by single spaces. Examples Input 2 5 1 3 2 2 3 1 4 2 5 1 Output 4 5 4 6 6 Input 3 7 1 5 2 2 3 2 4 7 5 1 6 3 7 4 Output 6 4 5 11 6 9 11 Input 1 3 1 4 2 5 7 1 Output 5 10 11 Note In the first example: - Car 1 arrives at time 1 and is assigned to mechanic 1, finished at time 1 + 3 = 4. - Car 2 arrives at time 2 and is assigned to mechanic 2, finished at time 2 + 2 = 4. - Car 3 arrives at time 3 and will be assigned to mechanic 1 (because he will finish first at time 4), finished at time 4 + 1 = 5. - Car 4 arrives at time 4 and is assigned to mechanic 2 (because he will be free at time 4), finished at time 4 + 2 = 6. - Car 5 arrives at time 5 and is assigned to mechanic 1, finished at time 5 + 1 = 6. In the second example: - Car 1 arrives at time 1 and is assigned to mechanic 1, finished at time 1 + 5 = 6. - Car 2 arrives at time 2 and is assigned to mechanic 2, finished at time 2 + 2 = 4. - Car 3 arrives at time 3 and is assigned to mechanic 3, finished at time 3 + 2 = 5. - Car 4 arrives at time 4 and is assigned to mechanic 2, finished at time 4 + 7 = 11. - Car 5 arrives at time 5 and is assigned to mechanic 3 (because he will finish first at time 5), finished at time 5 + 1 = 6. - Car 6 arrives at time 6 and is assigned to mechanic 3 (because he will be free at time 6), finished at time 6 + 3 = 9. - Car 7 arrives at time 7 and is assigned to mechanic 1 (because he will be free at time 6), finished at time 7 + 4 = 11.","solution":"import heapq def car_repairs(n, m, arr): # Min-heap to track the next available time of each mechanic available_mechanics = [(0, i) for i in range(n)] heapq.heapify(available_mechanics) completion_times = [] for ai, ti in arr: # Get the first available mechanic available_time, mechanic_id = heapq.heappop(available_mechanics) # Assign the car to this mechanic start_time = max(available_time, ai) finish_time = start_time + ti completion_times.append(finish_time) # Update the next available time for this mechanic heapq.heappush(available_mechanics, (finish_time, mechanic_id)) return completion_times"},{"question":"Given a string S of lowercase alphabets, the task is to determine if the string is a palindrome after removing all occurrences of a given character C. A palindrome is a string that reads the same backward as forward. Example 1: Input: S = \\"abccba\\", C = \\"c\\" Output: 1 Explanation: Removing all occurrences of \'c\' from the string results in \\"abba\\", which is a palindrome. Example 2: Input: S = \\"hello\\", C = \\"l\\" Output: 0 Explanation: Removing all occurrences of \'l\' from the string results in \\"heo\\", which is not a palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPalindromeAfterRemoval() which takes a string S and a character C as input parameters and returns 1 if the string is a palindrome after removing all occurrences of C, otherwise it returns 0. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^5","solution":"def isPalindromeAfterRemoval(S, C): Returns 1 if the string becomes a palindrome after removing all occurrences of the character C, otherwise returns 0. # Remove all occurrences of C from the string filtered_string = S.replace(C, \\"\\") # Check if the filtered string is a palindrome if filtered_string == filtered_string[::-1]: return 1 else: return 0"},{"question":"Write a function that takes an array of integers and an integer k, and returns the k most frequent elements in the array. If there are multiple elements that have the same frequency, return the smallest elements first. For example, given the array `[1, 1, 1, 2, 2, 3]` and `k = 2`, the output should be `[1, 2]`. Note: You can assume that k is always a valid integer such that `1 ≤ k ≤ number of unique elements in the array`. For more reading see: https://leetcode.com/problems/top-k-frequent-elements/","solution":"from collections import Counter import heapq def top_k_frequent(nums, k): Returns the k most frequent elements in the array nums. If there are multiple elements that have the same frequency, return the smallest elements first. # Count the frequency of each element in the array count = Counter(nums) # Use a heap to find the k most frequent elements heap = [] for num, freq in count.items(): # We use -freq to create a min-heap by frequency heapq.heappush(heap, (-freq, num)) result = [] for _ in range(k): result.append(heapq.heappop(heap)[1]) return sorted(result)"},{"question":"You are organizing a row of books on a bookshelf. Each book has a width, and you may only move books to the right. If the book on the right is narrower than the book on the left, it will be swapped to the right until all books are in non-decreasing order of their widths. Write a function that, given an array of books\' widths, returns the array after all possible swaps have been performed. ``` organize_books([4, 2, 3, 1, 5]) Output: [1, 2, 3, 4, 5] ``` You should perform swaps until no more swaps can be made. Swaps occur one at a time and should be done all the way from the left to the end of the array. Examples: ``` Input: [5, 3, 4, 2, 1] [5, 3, 4, 2, 1] -> [3, 5, 4, 2, 1] -> [3, 4, 5, 2, 1] [3, 4, 5, 2, 1] -> [3, 4, 2, 5, 1] -> [3, 2, 4, 5, 1] -> [2, 3, 4, 5, 1] [2, 3, 4, 5, 1] -> [2, 3, 4, 1, 5] -> [2, 3, 1, 4, 5] -> [2, 1, 3, 4, 5] -> [1, 2, 3, 4, 5] Output: [1, 2, 3, 4, 5] Input: [2, 3, 1] [2, 3, 1] -> [2, 1, 3] -> [1, 2, 3] Output: [1, 2, 3] ``` The function should always terminate, and the output should be in sorted order. The lengths of the widths will always be greater than 1. Function signature: ``` def organize_books(arr: List[int]) -> List[int]: ```","solution":"def organize_books(arr): Reorders the array of book widths such that it is in non-decreasing order using the bubble sort algorithm, which repeatedly swaps adjacent elements that are in the wrong order. n = len(arr) # Using Bubble Sort to sort the array for i in range(n): # No need to check the last i elements as they are already in place for j in range(0, n-i-1): # Swap if the element found is greater than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"A famous online shopping platform wants to analyze the shopping patterns of its users to understand their product preferences better. Each user has a shopping cart in which they place different products before proceeding to checkout. Every user\'s shopping cart can be represented as a list of integers where each integer corresponds to a unique product ID. The platform wants to track the most popular products in every user\'s cart. A product is considered popular if it appears more than once in a cart. Given the shopping carts of multiple users, the platform needs to calculate the sum of all popular products\' IDs for each user. INPUT: The first line contains an integer T - the number of test cases. For each test case, the first line contains an integer N - the number of products in the user\'s cart. The next line contains N space-separated integers, representing the product IDs in the user\'s cart. OUTPUT: For each test case, print the sum of all popular products\' IDs in the user\'s cart. If no product is popular, print 0. CONSTRAINTS: 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^3 1 ≤ product ID ≤ 10^5 Example: SAMPLE INPUT: 2 6 1 2 2 3 3 3 5 4 5 6 7 8 SAMPLE OUTPUT: 10 0 Explanation: In the first test case, product IDs 2 and 3 are popular as they appear more than once. Their sum is 2 + 3 + 3 + 2 = 10. In the second test case, no product appears more than once, so the output is 0.","solution":"def sum_of_popular_products(test_cases): Given a list of test cases where each test case is represented by a list of product IDs, return the sum of all popular product IDs for each user. A product is considered popular if it appears more than once in a cart. Parameters: test_cases (list): A list of tuples. Each tuple contains an integer N and a list of N product IDs. Returns: list: A list of integers where each integer is the sum of popular product IDs for each user. results = [] for N, products in test_cases: from collections import Counter product_counts = Counter(products) sum_popular = sum(product for product, count in product_counts.items() if count > 1) results.append(sum_popular) return results"},{"question":"In a tropical rainforest, there are various species of insects battling for dominance. Each insect species has a unique strength level, and they confront each other to establish their superiority. When two species confront each other, the one with the higher strength level wins, while the other retreats. Your task is to determine the number of confrontations that take place given a sequence of insect species and their respective strength levels. A confrontation takes place if a species meets another species with a strength level less than its own. **Input:** The first line contains an integer `n` representing the number of insect species in the sequence. The second line contains `n` space-separated integers representing the strength levels of the insect species. **Output:** An integer representing the total number of confrontations. **Constraints:** 1 ≤ n ≤ 10^5 1 ≤ strength level ≤ 10^9 **Example Input:** 5 4 2 6 3 1 **Example Output:** 3 **Explanation:** In the example, the confrontations unfold as follows: - The species with strength 4 confronts the species with strength 2. - The species with strength 6 confronts the species with strengths 4, 2, and 3. - The species with strengths 3 and 1 do not generate any further confrontations as they are either the weakest or not present after stronger species. Thus, the total number of confrontations is 3.","solution":"def count_confrontations(n, strength_levels): Returns the number of confrontations that take place given a sequence of insect species\'s strength levels. if n <= 1: return 0 # List to keep track of the maximum strength encountered so far max_strength = [0] * n max_strength[0] = strength_levels[0] for i in range(1, n): max_strength[i] = max(max_strength[i-1], strength_levels[i]) confrontations = 0 for i in range(1, n): if strength_levels[i] < max_strength[i-1]: confrontations += 1 return confrontations"},{"question":"A software company has tasked you with designing an algorithm to merge their sales data. The sales data is stored as a list of intervals, where each interval represents the start and end times of a sales transaction. Your task is to merge all overlapping intervals and return the merged list. You should follow these rules: 1. If two intervals overlap, merge them into one interval that covers both. 2. The input list may not be sorted. 3. The input list may be empty. For example, given the following intervals: ``` [(1, 3), (2, 6), (8, 10), (15, 18)] ``` You should return: ``` [(1, 6), (8, 10), (15, 18)] ``` since intervals (1, 3) and (2, 6) overlap, so they are merged into (1, 6). Constraints: * 1 ≤ number of intervals ≤ 10^4 * 0 ≤ start time of interval ≤ 10^9 * start time of interval ≤ end time of interval ≤ 10^9 # Input The input is given from Standard Input in the following format: N s1 e1 s2 e2 ... sN eN where N is the number of intervals, and each interval is represented by its start time `si` and end time `ei`. # Output Print the merged intervals in the same format. Each interval should be printed on a new line. # Example Input: ``` 4 1 3 2 6 8 10 15 18 ``` Output: ``` 1 6 8 10 15 18 ``` Input: ``` 3 5 6 1 3 2 4 ``` Output: ``` 1 4 5 6 ```","solution":"def merge_intervals(intervals): Merges overlapping intervals. Args: intervals (List[Tuple[int, int]]): List of intervals represented by tuples. Returns: List[Tuple[int, int]]: List of merged intervals. if not intervals: return [] # Sort intervals by start time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals[1:]: # get the last element in the merged list last = merged[-1] if current[0] <= last[1]: # there is an overlap merged[-1] = (last[0], max(last[1], current[1])) else: merged.append(current) return merged def format_intervals(intervals): Formats the intervals for printing. Args: intervals (List[Tuple[int, int]]): List of intervals represented by tuples. Returns: str: Formatted string of intervals for printing. return \\"n\\".join(f\\"{start} {end}\\" for start, end in intervals)"},{"question":"Anna is organizing a relay race in her town. There are N checkpoints in the race, each numbered from 1 to N such that checkpoint 1 is the starting point and checkpoint N is the endpoint. Each pair of checkpoints i and j (1 ≤ i, j ≤ N) is connected by exactly one bidirectional path. The length of the path between two checkpoints is always 1 unit. A team of runners participates in the race and they follow a strategy where they split up at each checkpoint and take different paths to explore all possible routes. Anna wants to calculate the shortest time it will take for any runner to reach the end checkpoint N starting from checkpoint 1 given that all runners run at an equal speed of 1 unit distance per unit time. -----Input section----- The first line contains T, the number of test cases. Each test case consists of 2 lines. The first line contains a single integer N which denotes the number of checkpoints. Next line contains 2*N-2 space-separated integers representing the paths in the format of pairs u v denoting a path between checkpoints u and v. -----Output section----- Output the minimum time required for a runner to reach checkpoint N from checkpoint 1 for each test case. -----Input constraints----- 1 ≤ T ≤ 10 2 ≤ N ≤ 105 Sum of N over all test cases ≤ 106 -----Sample Input - 1----- 1 4 1 2 2 3 3 4 -----Sample Output - 1----- 3 -----Explanation - 1----- The shortest path from checkpoint 1 to checkpoint 4 is 1 -> 2 -> 3 -> 4 which takes 3 units of time. -----Sample Input - 2----- 2 3 1 2 1 3 6 1 2 1 3 2 4 3 5 4 6 -----Sample Output - 2----- 2 4 -----Explanation - 2----- For the first test case, the shortest path from checkpoint 1 to checkpoint 3 is either 1 -> 2 -> 3 or 1 -> 3, both take 2 units of time. For the second test case, the shortest path from checkpoint 1 to checkpoint 6 is 1 -> 2 -> 4 -> 6 which takes 4 units of time.","solution":"def minimum_time_to_reach_end(T, test_cases): results = [] for i in range(T): N, paths = test_cases[i] # Since the structure is a tree and all paths have equal weights, # the minimum time to traverse from 1 to N is N-1 units of time. results.append(N-1) return results"},{"question":"Anna and Bob are playing a game with two types of operations on an initially empty sequence. They take turns performing the following operations: 1. **Add Operation:** Add an integer `x` to the end of the sequence. 2. **Query Operation:** Count the number of distinct integers within a subarray of the sequence, defined by given bounds `[l, r]`. Anna wants to optimize the sequence such that the number of distinct integers in the queried subarrays is maximized. Meanwhile, Bob wants to keep Anna\'s score as minimal as possible. Anna always starts the game by performing an Add operation, followed by Bob deciding which operation to perform next, and they alternate turns. Write a program that simulates the game, processes the operations, and maintains the sequence accordingly. For each Query operation, provide the number of distinct integers in the specified subarray. ---Input--- The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 200,000) — the number of operations and the maximum value of the integer `x` that can be added in the Add operation, respectively. The next `n` lines describe the operations: - An Add operation is represented as \\"A x\\" (1 ≤ x ≤ m), where `x` is the integer to be added to the sequence. - A Query operation is represented as \\"Q l r\\" (1 ≤ l ≤ r ≤ t), where `l` and `r` are the bounds of the subarray within the sequence of current length `t`. ---Output--- For each Query operation, print the number of distinct integers in the specified subarray in a new line. ---Examples--- Input 8 10 A 1 A 2 Q 1 2 A 2 Q 1 3 A 3 Q 2 4 Q 1 4 Output 2 2 2 3 ---Note--- In the first example: 1. The sequence becomes `[1, 2]` after the first two Add operations. 2. The first Query operation queries the subarray `[1, 2]`, which contains 2 distinct integers. 3. After the third Add operation, the sequence becomes `[1, 2, 2]`. 4. The second Query operation queries the subarray `[1, 3]`, which still contains 2 distinct integers. 5. The fourth Add operation makes the sequence `[1, 2, 2, 3]`. 6. The third Query operation queries the subarray `[2, 4]`, which contains 2 distinct integers. 7. The last Query operation queries the subarray `[1, 4]`, which contains 3 distinct integers.","solution":"def game_operations(operations): Simulates the game operations and processes the queries accordingly to maintain the sequence. :param operations: List of tuples, where each tuple can either be an Add operation (\'A\', x) or a Query operation (\'Q\', l, r). :return: List of integers, where each integer corresponds to the result of a Query operation. sequence = [] result = [] for op in operations: if op[0] == \'A\': sequence.append(op[1]) elif op[0] == \'Q\': l, r = op[1] - 1, op[2] subarray = sequence[l:r] result.append(len(set(subarray))) return result"},{"question":"You are given two strings s and t. A string p is called a subsequence of string s if p can be derived from s by deleting some (or no) characters without changing the order of the remaining characters. For example, the string \\"abc\\" has the subsequences: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", and \\"abc\\". Your task is to determine whether string t is a subsequence of string s. Input The first line contains a string s, consisting of lowercase Latin letters. The second line contains a string t, also consisting of lowercase Latin letters. The lengths of both strings are in the range from 1 to 2000, inclusive. Output Print \\"YES\\" if string t is a subsequence of string s, otherwise print \\"NO\\". Examples Input abcde ace Output YES Input abc acb Output NO Note In the first sample, \\"ace\\" is a subsequence of \\"abcde\\" (by taking \\"a\\", \\"c\\", and \\"e\\" in order). In the second sample, \\"acb\\" is not a subsequence of \\"abc\\" because the order of characters is changed.","solution":"def is_subsequence(s, t): Determines whether string t is a subsequence of string s. t_index = 0 for char in s: if t_index == len(t): break if char == t[t_index]: t_index += 1 return \\"YES\\" if t_index == len(t) else \\"NO\\""},{"question":"Create a function that simulates a simple version of the \\"tic-tac-toe\\" game, where two players take turns marking the spaces in a 3×3 grid with \'X\' and \'O\'. The function should determine the winner after 5 to 9 moves. If there is no winner and the grid is full, the game ends in a draw. Implement a function `tic_tac_toe(moves)` that takes in a list of tuples representing the moves made by both players alternatively, and returns the result of the game: either \'X\' wins, \'O\' wins, or \'Draw\'. ```python def tic_tac_toe(moves): # write your function here # Example print(tic_tac_toe([(0,0,\'X\'), (0,1,\'O\'), (1,1,\'X\'), (1,0,\'O\'), (2,2,\'X\')])) # Output: \\"X wins\\" print(tic_tac_toe([(0,0,\'X\'), (0,1,\'O\'), (1,1,\'X\'), (1,0,\'O\'), (0,2,\'X\'), (2,0,\'O\'), (1,2,\'X\')])) # Output: \\"Draw\\" ```","solution":"def tic_tac_toe(moves): Determines the result of a tic-tac-toe game based on a list of moves. :param moves: List of tuples representing the moves in the form (row, col, player). Player is either \'X\' or \'O\'. :return: String representing the result of the game: \'X wins\', \'O wins\', or \'Draw\'. # Initialize a 3x3 game grid grid = [[\'\' for _ in range(3)] for _ in range(3)] # Apply the moves to the grid for row, col, player in moves: grid[row][col] = player # Check all rows, columns, and two diagonals for a winner for player in [\'X\', \'O\']: # Check rows for row in range(3): if grid[row][0] == grid[row][1] == grid[row][2] == player: return f\\"{player} wins\\" # Check columns for col in range(3): if grid[0][col] == grid[1][col] == grid[2][col] == player: return f\\"{player} wins\\" # Check diagonals if grid[0][0] == grid[1][1] == grid[2][2] == player: return f\\"{player} wins\\" if grid[0][2] == grid[1][1] == grid[2][0] == player: return f\\"{player} wins\\" # If no winner, check if the grid is full for a draw for row in grid: if \'\' in row: return \\"Draw\\" # This line can also return \'None\' until the game is meant to be complete # if you want to enforce the requirement of 5-9 moves. return \\"Draw\\""},{"question":"You are given a sequence of integers. Your task is to process Q queries on this sequence. There are three types of queries: 1. Reverse the subsequence from index L to R (inclusive). 2. Replace the element at index L with value X. 3. Calculate the sum of the subsequence from index L to R (inclusive). Each query follows the 1-based indexing for specifying indices. Input The first line contains an integer N (1 ≤ N ≤ 10^5), the length of the sequence. The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 10^9), the initial sequence. The third line contains a single integer Q (1 ≤ Q ≤ 10^5), the number of queries. The next Q lines contain one of the following three types of queries: * 1 L R (1 ≤ L ≤ R ≤ N): Reverse the subsequence from L to R. * 2 L X (1 ≤ L ≤ N, 1 ≤ X ≤ 10^9): Replace the element at index L with value X. * 3 L R (1 ≤ L ≤ R ≤ N): Calculate the sum of the subsequence from L to R. Output For each query of type 3, output the sum of the subsequence from L to R. Examples Input 5 5 3 8 1 2 4 3 1 3 1 2 4 3 1 3 2 2 10 3 1 3 Output 16 8 15 Note 1. In the example above, the initial sequence is [5, 3, 8, 1, 2]. 2. Query 3 1 3 asks for the sum of the first three elements: 5 + 3 + 8 = 16. 3. Query 1 2 4 reverses the subsequence from the 2nd to the 4th elements, transforming the sequence into [5, 1, 8, 3, 2]. 4. Query 3 1 3 (after reversing) asks for the sum of the first three elements: 5 + 1 + 8 = 14. 5. Query 2 2 10 updates the sequence to [5, 10, 8, 3, 2]. 6. Query 3 1 3 (after updating) asks for the sum of the first three elements: 5 + 10 + 8 = 23.","solution":"def process_queries(sequence, queries): results = [] for query in queries: if query[0] == 1: L, R = query[1]-1, query[2]-1 sequence[L:R+1] = sequence[L:R+1][::-1] elif query[0] == 2: L, X = query[1]-1, query[2] sequence[L] = X elif query[0] == 3: L, R = query[1]-1, query[2]-1 results.append(sum(sequence[L:R+1])) return results"},{"question":"You are given a string S consisting of lowercase letters and digits. You need to find the character that appears the maximum number of times in the string. In case of a tie, return the lexicographically smallest character. Example 1: Input: \\"babc\\" Output: \\"b\\" Explanation: \'b\' appears 2 times, which is more than any other character. Example 2: Input: \\"a1c22b333\\" Output: \\"3\\" Explanation: \'3\' appears 3 times, which is more than any other character. Your Task: Complete the function string maxOccurringChar(string s) which takes a string s as input and returns the character that appears the maximum number of times. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= |S| <= 10^5","solution":"def maxOccurringChar(s: str) -> str: Find the character that appears the maximum number of times in the string s. In case of a tie, return the lexicographically smallest character. from collections import Counter # Count the occurrences of each character in the string count = Counter(s) # Initialize variables to track the maximum occurrence and corresponding character max_count = -1 max_char = \'\' for char, cnt in count.items(): # Update max_char if current character has more occurrences # or if it has the same occurrences but is lexicographically smaller if cnt > max_count or (cnt == max_count and char < max_char): max_count = cnt max_char = char return max_char"},{"question":"You are given an array of integers and a positive integer `k`. Your task is to determine whether it is possible to partition the array into exactly `k` non-empty subsets with equal sum. -----Input----- The first line contains two integers `n` and `k` (1 leq n leq 16, 1 leq k leq n). The second line contains `n` integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4) - the elements of the array. -----Output----- Print \\"Yes\\" if it is possible to partition the array into exactly `k` non-empty subsets with equal sum. Otherwise, print \\"No\\". You can print each letter in any case (upper or lower). -----Examples----- Input 4 2 4 3 3 2 Output Yes Input 5 2 1 2 3 4 5 Output No -----Note----- In the first example, the array can be partitioned into two subsets with equal sum: [4, 2] and [3, 3]. In the second example, it is not possible to partition the array into two subsets with equal sum.","solution":"def can_partition_k_subsets(nums, k): Determines if the array can be partitioned into k subsets with equal sum. total_sum = sum(nums) if total_sum % k != 0: return \\"No\\" target = total_sum // k used = [False] * len(nums) def can_partition(start, k, current_sum): if k == 0: return True if current_sum == target: return can_partition(0, k-1, 0) for i in range(start, len(nums)): if not used[i] and current_sum + nums[i] <= target: used[i] = True if can_partition(i + 1, k, current_sum + nums[i]): return True used[i] = False return False nums.sort(reverse=True) return \\"Yes\\" if can_partition(0, k, 0) else \\"No\\""},{"question":"You have recently been hired as a software developer for a company that designs and develops various tools and applications. Your first task is to develop a function that processes a series of commands to modify a list. Each command will instruct you to either add an element to the list, remove an element from the list, or reverse the list. You are given a list of commands, where each command will be in one of the following three formats: 1. \\"ADD x\\": Add the element `x` to the end of the list. 2. \\"REMOVE x\\": Remove the first occurrence of element `x` from the list. If the element is not in the list, ignore this command. 3. \\"REVERSE\\": Reverse the order of elements in the list. Your function should take a list of commands and return the final state of the list after all commands have been executed. Write a function `process_commands(commands)` that takes a single parameter: - commands (list of str): A list of commands to be processed. The function should return a list representing the final state of the elements after processing all commands. # Input A list of commands, where each command is a string. # Output The final state of the list after processing all commands. # Example Input ``` commands = [ \\"ADD 5\\", \\"ADD 3\\", \\"REMOVE 5\\", \\"ADD 2\\", \\"REVERSE\\" ] ``` Output ``` [2, 3] ``` # Constraints - Each command will be a valid string as described. - The initial list is empty. - There will be at most 10^5 commands. - Each integer `x` will be between 1 and 10^6.","solution":"def process_commands(commands): Process a series of commands to modify a list. :param commands: List of commands to be processed :return: The final state of the list after processing all commands lst = [] for command in commands: parts = command.split() if parts[0] == \\"ADD\\": lst.append(int(parts[1])) elif parts[0] == \\"REMOVE\\": try: lst.remove(int(parts[1])) except ValueError: pass elif parts[0] == \\"REVERSE\\": lst.reverse() return lst"},{"question":"A delivery company needs to optimize the routes its couriers take to deliver packages. They need your help to determine the shortest route to deliver all packages in a given day. Each package has a delivery location that is represented as a node in a graph, and the roads between locations are the edges of the graph with associated travel times. The starting point of each day\'s deliveries is the company\'s main hub, which is node 0. The couriers need to deliver packages to all nodes and return back to the hub in the shortest possible time. Given the structure of the city\'s roads and the travel times between locations, your task is to determine the minimum travel time needed for a courier to deliver to all package locations and return to the hub. ----Input---- The first line of the input contains two integers n and m (2leq n leq 15, 1 leq m leq 100), where n is the number of nodes (locations, including the hub) and m is the number of edges (roads). Each of the next m lines contains three integers u, v, and w (0 leq u, v < n, u neq v, 1 leq w leq 1000), representing a bidirectional road between locations u and v with a travel time w. ----Output---- Print a single integer representing the minimum travel time to start at the main hub (node 0), visit all other nodes at least once, and return to the main hub. ----Examples---- Input 4 4 0 1 10 1 2 10 2 3 10 3 0 10 Output 40 Input 5 7 0 1 2 0 2 2 1 2 1 1 3 4 2 3 3 2 4 6 3 4 2 Output 12 ----Note---- In the first example, the courier can start at node 0, visit nodes 1, 2, 3 in sequence, and return back to 0, making the total travel time 10+10+10+10=40. In the second example, one optimal route is 0 -> 1 -> 2 -> 3 -> 4 -> 2 -> 0 with a total travel time of 2 + 1 + 3 + 2 + 6 + 2 = 16. Another optimal route is 0 -> 2 -> 1 -> 3 -> 4 -> 2 -> 0 with the same total travel time of 2 + 1 + 3 + 2 + 6 + 2 = 16.","solution":"import itertools import sys def min_travel_time(n, m, edges): Returns the minimum travel time to start at node 0, visit all other nodes, and return to node 0. # Initialize the graph graph = [[sys.maxsize] * n for _ in range(n)] for u, v, w in edges: graph[u][v] = w graph[v][u] = w # Generate all permutations of nodes to visit starting from node 0 (excluding 0) nodes = list(range(1, n)) min_time = sys.maxsize for perm in itertools.permutations(nodes): current_time = 0 current_node = 0 for next_node in perm: current_time += graph[current_node][next_node] current_node = next_node current_time += graph[current_node][0] min_time = min(min_time, current_time) return min_time"},{"question":"You are given a string consisting of lowercase letters. Your task is to find the first non-repeating character in the string and return it. If there is no non-repeating character, return an underscore (\'_\') instead. Note that the string is guaranteed to have at least one character.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns an underscore (\'_\'). char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"# Remove Consecutive Duplicates Write a function that removes consecutive duplicate characters from a given string. The function should return a new string that contains only one occurrence of each consecutive letter. The input string will only contain lowercase letters and will have at least one character. Example: ``` Input: \\"aabcca\\" Output: \\"abca\\" Input: \\"aabbcc\\" Output: \\"abc\\" Input: \\"zzzyyyyx\\" Output: \\"zyx\\" ``` Make sure your function achieves the task efficiently and focuses on removing only consecutive duplicates. Good luck!","solution":"def remove_consecutive_duplicates(s): Removes consecutive duplicate characters from a given string. Args: s (str): Input string containing only lowercase letters. Returns: str: New string with consecutive duplicate characters removed. if not s: return \\"\\" result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return \\"\\".join(result)"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is replaced by the number of integers smaller than it on its right side in the original list. -----Constraints----- - The list will contain between 1 and 100,000 integers. - Each integer in the list will be between -1,000,000 and 1,000,000. - The input list can have duplicate elements. -----Input----- The input will be provided in the following format: - The first line contains an integer, n, denoting the number of elements in the list. - The second line contains n space-separated integers representing the elements of the input list. -----Output----- Output a single line containing n space-separated integers representing the computed list. -----Sample Input----- 5 3 4 9 6 1 -----Sample Output----- 1 1 2 1 0 -----Explanation----- For the list [3, 4, 9, 6, 1], the integers smaller than each element on its right side are: - 3 has 1 integer smaller than it to its right (1). - 4 has 1 integer smaller than it to its right (1). - 9 has 2 integers smaller than it to its right (6, 1). - 6 has 1 integer smaller than it to its right (1). - 1 has 0 integers smaller than it to its right. Thus, the output is [1, 1, 2, 1, 0].","solution":"def count_smaller_elements(nums): Returns a list where each element is replaced by the number of integers smaller than it on its right side. if not nums: return [] result = [0] * len(nums) sorted_nums = [] for i in range(len(nums) - 1, -1, -1): pos = binary_search_insert_position(sorted_nums, nums[i]) result[i] = pos sorted_nums.insert(pos, nums[i]) return result def binary_search_insert_position(sorted_list, target): Uses binary search to find the position where the target should be inserted to maintain sorted order. low, high = 0, len(sorted_list) while low < high: mid = (low + high) // 2 if sorted_list[mid] < target: low = mid + 1 else: high = mid return low"},{"question":"Given a list of integers where each number appears exactly twice in the list except for one unique number which appears only once, find the unique number. Write a function that receives the list and returns the unique number. ----- Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N — the number of integers in the list. - The second line of each test case contains N integers separated by spaces, representing the elements of the list. ----- Output Format ------ For each test case, output on a new line the unique number from the list. ----- Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 Each number in the list is guaranteed to appear exactly twice except for one number which appears only once. ----- Sample Input 1 ------ 2 5 1 2 3 2 1 7 4 5 6 5 4 6 7 ----- Sample Output 1 ------ 3 7 ----- Explanation 1 ------ Test case 1: The number 3 appears only once in the list [1, 2, 3, 2, 1]. Test case 2: The number 7 appears only once in the list [4, 5, 6, 5, 4, 6, 7].","solution":"def find_unique_number(test_cases): results = [] for case in test_cases: n, numbers = case unique_element = 0 for number in numbers: unique_element ^= number results.append(unique_element) return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) numbers = list(map(int, lines[index + 1].split())) test_cases.append((N, numbers)) index += 2 return find_unique_number(test_cases)"},{"question":"A renowned resort has recently inaugurated their new gym, and they offer their members the facility to book the gym for an hour-long workout session. To encourage fitness, the resort administration has decided to limit the booking limit for each person to just one hour within a day. Now, you are given a list of booking requests and need to determine if each individual booking follows the policy. The input to the function will be a list of booking entries. Each entry is a tuple where: - The first element is the name of the person requesting for a booking. - The second element is the starting time of booking in the \\"HH:MM\\" 24-hour format. - The third element is the ending time of the booking in the \\"HH:MM\\" 24-hour format. Your task is to verify if any individual has multiple bookings exceeding the one-hour total limit in a single day, and return the list of those individuals. For example: ```python bookings = [ (\'Alice\', \'10:00\', \'11:00\'), (\'Bob\', \'11:00\', \'12:00\'), (\'Alice\', \'12:30\', \'13:30\'), (\'Bob\', \'11:30\', \'12:30\') ] ``` The output should be: ```python [\'Alice\'] ``` This is because Alice has two non-overlapping bookings that sum to more than one hour in a single day, while Bob\'s bookings overlap and do not exceed the one-hour limit. Implement the function `check_booking_policy(bookings: List[Tuple[str, str, str]]) -> List[str]`.","solution":"from datetime import datetime from collections import defaultdict def check_booking_policy(bookings): def time_diff_in_minutes(start, end): start_dt = datetime.strptime(start, \\"%H:%M\\") end_dt = datetime.strptime(end, \\"%H:%M\\") return (end_dt - start_dt).total_seconds() / 60 booking_times = defaultdict(int) for name, start, end in bookings: booking_times[name] += time_diff_in_minutes(start, end) violators = [name for name, total_minutes in booking_times.items() if total_minutes > 60] return violators"},{"question":"Given a list of strings `words` and a list of queries where each query is a pair [L, R], for each query i compute the number of palindromic words from index L to R (inclusive) in the `words` list. A word is palindromic if it reads the same backward as forward. Return an array containing the result for the given queries. Example 1: Input: words = [\\"radar\\", \\"level\\", \\"world\\", \\"deified\\", \\"civic\\"], queries = [[0,2],[1,3],[2,4],[0,4]] Output: [2,3,2,4] Explanation: The words \\"radar\\", \\"level\\", \\"deified\\", and \\"civic\\" are palindromes. For the queries: [0,2] = \\"radar\\", \\"level\\", \\"world\\" -> 2 palindromic words (\\"radar\\", \\"level\\") [1,3] = \\"level\\", \\"world\\", \\"deified\\" -> 2 palindromic words (\\"level\\", \\"deified\\") [2,4] = \\"world\\", \\"deified\\", \\"civic\\" -> 2 palindromic words (\\"deified\\", \\"civic\\") [0,4] = \\"radar\\", \\"level\\", \\"world\\", \\"deified\\", \\"civic\\" -> 4 palindromic words (\\"radar\\", \\"level\\", \\"deified\\", \\"civic\\") Example 2: Input: words = [\\"apple\\", \\"banana\\", \\"racecar\\", \\"madam\\"], queries = [[0,1],[1,2],[0,3]] Output: [0,1,2] Constraints: 1 <= words.length <= 10^4 1 <= words[i].length <= 100 1 <= queries.length <= 10^4 queries[i].length == 2 0 <= queries[i][0] <= queries[i][1] < words.length","solution":"def is_palindrome(word): Helper function to check if a word is a palindrome return word == word[::-1] def count_palindromes(words, queries): Given a list of words and queries, return an array containing the number of palindromic words for each query. results = [] for L, R in queries: palindromic_count = sum(is_palindrome(words[i]) for i in range(L, R + 1)) results.append(palindromic_count) return results"},{"question":"In a small robot competition, teams need to navigate their robots through a grid filled with obstacles and treasures to collect the maximum number of treasures. The grid is represented as a 2D array where each cell can either be empty (\'.\'), contain an obstacle (\'#\'), or contain a treasure (\'T\'). The robot always starts at the top-left corner of the grid (position (0, 0)) and attempts to move to the bottom-right corner (position (n-1, m-1)), collecting treasures along the way. The robot can only move right or down at any step. Your task is to write a program to determine the maximum number of treasures the robot can collect from the start to the end of the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) - the number of rows and columns in the grid, respectively. Each of the next n lines contains a string of length m consisting of characters \'.\', \'#\', and \'T\'. Output Print a single integer, which is the maximum number of treasures the robot can collect on its path from the top-left to the bottom-right corner of the grid. If there is no possible path, print -1. SAMPLE INPUT 4 4 .T.. .#.T .... T..T SAMPLE OUTPUT 3","solution":"def max_treasures(grid): n = len(grid) m = len(grid[0]) # Create a 2D DP array initialized to -1 dp = [[-1] * m for _ in range(n)] # If starting point is an obstacle, there is no path if grid[0][0] == \'#\': return -1 # Initialize starting point dp[0][0] = 1 if grid[0][0] == \'T\' else 0 # Fill the DP table for i in range(n): for j in range(m): if grid[i][j] == \'#\': continue if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + (1 if grid[i][j] == \'T\' else 0)) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + (1 if grid[i][j] == \'T\' else 0)) return dp[n-1][m-1] if dp[n-1][m-1] != -1 else -1 # Function to convert input to the grid format def parse_input(input_string): lines = input_string.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(line) for line in lines[1:]] return grid"},{"question":"# Weather Data Analyzers You are given an array that represents the temperatures recorded in Byteland over n days. The meteorological department wants to perform some analysis queries on this data. The following are the types of queries you need to handle: 1. Update the temperature of a specific day. 2. Find out the range of temperatures (minimum and maximum) recorded in a given period. Implement a solution that handles these queries efficiently. **Input** - The first line contains two integers n and q (1 ≤ n, q ≤ 2·10^5) — the number of days and the number of queries. - The second line contains n integers t1, t2, ..., tn (-10^9 ≤ ti ≤ 10^9) — the temperatures recorded on each day. - The next q lines describe the queries: - If the query is of the first type, it will be in the form `1 d x` (1 ≤ d ≤ n, -10^9 ≤ x ≤ 10^9), meaning you should update the temperature of day d to x. - If the query is of the second type, it will be in the form `2 l r` (1 ≤ l ≤ r ≤ n), meaning you should return the minimum and maximum temperature recorded from day l to day r inclusive. **Output** - For each query of the second type, output the minimum and maximum temperature in the given range on a single line. **Examples** **Input** ``` 5 5 23 26 19 22 28 2 1 3 1 3 25 2 2 5 1 5 18 2 1 5 ``` **Output** ``` 19 26 18 28 18 26 ``` **Explanation** 1. Initial temperatures: [23, 26, 19, 22, 28] 2. For the first query, the range between days 1 and 3 are [23, 26, 19], thus the minimum is 19 and the maximum is 26. 3. Updates the temperature of day 3 to 25, new temperatures: [23, 26, 25, 22, 28]. 4. For the second query, the range between days 2 and 5 are [26, 25, 22, 28], thus the minimum is 22 and the maximum is 28. 5. Updates the temperature of day 5 to 18, new temperatures: [23, 26, 25, 22, 18]. 6. For the third query, the range between days 1 and 5 are [23, 26, 25, 22, 18], thus the minimum is 18 and the maximum is 26.","solution":"class WeatherDataAnalyzer: def __init__(self, temperatures): self.temperatures = temperatures def update(self, day, temp): self.temperatures[day - 1] = temp def query(self, start_day, end_day): subarray = self.temperatures[start_day - 1:end_day] return min(subarray), max(subarray) def process_weather_queries(n, q, temperatures, queries): analyzer = WeatherDataAnalyzer(temperatures) results = [] for query in queries: if query[0] == 1: _, day, temp = query analyzer.update(day, temp) elif query[0] == 2: _, start_day, end_day = query min_temp, max_temp = analyzer.query(start_day, end_day) results.append((min_temp, max_temp)) return results"},{"question":"You are given a binary tree with N nodes, numbered 1 through N. The i-th of the N-1 edges connects the vertices u_i and v_i. For each query, you are given two vertices x and y. You need to determine the length of the shortest path between these two vertices. Write a program that reads the tree and handles Q queries. Constraints * 2 leq N leq 10^5 * 1 leq u_i, v_i leq N * The given graph is a binary tree. * 1 leq Q leq 10^5 * 1 leq x, y leq N Input The input is given from Standard Input in the following format: N u_1 v_1 u_2 v_2 : u_{N-1} v_{N-1} Q x_1 y_1 x_2 y_2 : x_Q y_Q Output For each query, print the length of the shortest path between x and y. Examples Input 5 1 2 1 3 3 4 3 5 3 2 4 4 5 2 3 Output 3 2 2","solution":"import sys from collections import deque def preprocess_tree(N, edges): Preprocess the tree to create adjacency list and depth/parent info for LCA. N: int, number of nodes in the tree edges: list of tuples, each tuple representing an edge between two nodes (u, v) adjacency_list = [[] for _ in range(N + 1)] for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) parent = [-1] * (N + 1) depth = [-1] * (N + 1) # BFS to establish parent and depth arrays def bfs(root): queue = deque([root]) depth[root] = 0 while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if depth[neighbor] == -1: # not visited depth[neighbor] = depth[node] + 1 parent[neighbor] = node queue.append(neighbor) bfs(1) # Assuming 1 is the root return parent, depth def lca(u, v, parent, depth): Compute the lowest common ancestor of nodes u and v. u, v: int, nodes for which LCA is to be found parent: list, parent array from BFS depth: list, depth array from BFS if depth[u] < depth[v]: u, v = v, u # Bring u and v to the same depth while depth[u] > depth[v]: u = parent[u] while u != v: u = parent[u] v = parent[v] return u def shortest_path_length(x, y, parent, depth): Calculate the shortest path length between nodes x and y. x, y: int, the nodes parent: list, parent array from BFS depth: list, depth array from BFS ancestor = lca(x, y, parent, depth) return depth[x] + depth[y] - 2 * depth[ancestor] def main(): input = sys.stdin.read data = input().split() idx = 0 N = int(data[idx]) idx += 1 edges = [] for _ in range(N - 1): u = int(data[idx]) v = int(data[idx + 1]) edges.append((u, v)) idx += 2 Q = int(data[idx]) idx += 1 queries = [] for _ in range(Q): x = int(data[idx]) y = int(data[idx + 1]) queries.append((x, y)) idx += 2 parent, depth = preprocess_tree(N, edges) results = [] for x, y in queries: results.append(shortest_path_length(x, y, parent, depth)) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are tasked with organizing a series of events in a single day, ensuring that each event does not overlap with any other. Each event has a start and end time, and you must determine the maximum number of non-overlapping events that can be attended. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - 0 leq S_i < E_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N S_1 E_1 : S_N E_N -----Output----- Print a single integer representing the maximum number of non-overlapping events that can be attended. -----Sample Input----- 5 1 4 2 3 3 5 6 8 7 9 -----Sample Output----- 3 The maximum number of non-overlapping events that can be attended is 3. One can attend the events from 2 to 3, 3 to 5, and 6 to 8, which do not overlap with each other.","solution":"def max_non_overlapping_events(events): This function takes a list of events with their start and end times, and returns the maximum number of non-overlapping events that can be attended. Parameters: events (List[Tuple[int, int]]): List of tuples where each tuple contains the start and end time of an event. Returns: int: Maximum number of non-overlapping events. # Sort events based on their end time events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events"},{"question":"A company has a number of meeting rooms, and they need to schedule a series of meetings for the next month. Each meeting has a start time and an end time. The company wants to maximize the number of meetings that can take place at the same time without conflicts. Your task is to help determine the maximum number of non-overlapping meetings that can be held in one room. ----- Input ----- The first line contains a single integer denoting the number of test cases (at most 50). Each test case begins with an integer n (1 ≤ n ≤ 1000), the number of meetings. The next n lines describe the meetings, one per line. Each line contains two integers s_{i} and e_{i} (0 ≤ s_{i} < e_{i} ≤ 10000) which represent the start and end times of the meeting. ----- Output ----- For each test case, output a single integer denoting the maximum number of non-overlapping meetings that can be scheduled in one room. ----- Sample Input 1 ----- 2 3 1 3 2 4 3 5 4 1 2 2 3 3 4 4 5 ----- Sample Output 1 ----- 2 4","solution":"def max_non_overlapping_meetings(test_cases): This function takes a list of test cases and returns a list containing the maximum number of non-overlapping meetings that can be scheduled in one room for each test case. Parameters: test_cases (list): A list containing test cases, each test case is a tuple where the first element is the number of meetings, and the second element is a list of tuples representing start and end times of each meeting. Returns: list: A list of integers, each representing the maximum number of non-overlapping meetings for the corresponding test case. def schedule_meetings(meetings): # Sort the meetings by their end time meetings.sort(key=lambda x: x[1]) max_meetings = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: max_meetings += 1 last_end_time = end return max_meetings results = [] for num_meetings, meetings in test_cases: results.append(schedule_meetings(meetings)) return results"},{"question":"Given a list of integers, write a function that groups the integers into categories based on the following rules: - Group 1 contains all the integers greater than 10. - Group 2 contains all the integers between 1 and 10 (inclusive). - Group 3 contains all the integers less than 1. Return the result as a dictionary with keys \\"Group 1\\", \\"Group 2\\", and \\"Group 3\\", and the corresponding values as lists of integers in each group. Constraints * The list will have at most 1000 integers. * Each integer will be between -1000 and 1000 (inclusive). Input Input is given from Standard Input in the following format: ``` N a_1 a_2 a_3 ... a_N ``` Output Print the resulting dictionary, with the keys in the order \\"Group 1\\", \\"Group 2\\", \\"Group 3\\". Example Input ``` 6 15 9 4 11 -3 0 ``` Output ``` {\'Group 1\': [15, 11], \'Group 2\': [9, 4], \'Group 3\': [-3, 0]} ``` Input ``` 5 -5 3 10 100 0 ``` Output ``` {\'Group 1\': [100], \'Group 2\': [3, 10, 0], \'Group 3\': [-5]} ```","solution":"def group_integers(N, integers): groups = {\'Group 1\': [], \'Group 2\': [], \'Group 3\': []} for num in integers: if num > 10: groups[\'Group 1\'].append(num) elif 1 <= num <= 10: groups[\'Group 2\'].append(num) else: groups[\'Group 3\'].append(num) return groups def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) integers = list(map(int, data[1:N+1])) result = group_integers(N, integers) print(result)"},{"question":"The team at Good Code Inc. is working on a project to automate some of their software licensing checks. They have a list of projects, each project has a unique `project_id` and a `license_type` (either \\"single\\" or \\"multi\\"). A \\"single\\" license means the project can be active only on one device at a time while a \\"multi\\" license can be active on multiple devices simultaneously. Good Code Inc. needs to determine how many devices are allowed to be active for each project based on the projects\' current assignments and their license types. You are given a list of project assignments where each assignment contains the `project_id` and `device_id`. Your task is to write a program that determines the maximum number of devices that can be active per project while respecting their respective license types. *If a project has a \\"single\\" license and multiple devices assigned to it, only one device should be counted as active. Projects with a \\"multi\\" license can have all assigned devices counted as active.* Input The first input line contains an integer n indicating the number of projects (1 ≤ n ≤ 100). The next n lines each contain the `project_id` (a string of length between 1 and 100 inclusive), and the `license_type` (\\"single\\" or \\"multi\\"). The next line contains an integer m indicating the number of assignments (1 ≤ m ≤ 1000). The following m lines each contain a `project_id` and `device_id` (both strings of length between 1 and 100 inclusive). Output The output should contain n lines, each with the `project_id` and the count of devices that should be active for each project based on its license type. Examples Input 3 proj1 single proj2 multi proj3 single 4 proj1 dev1 proj1 dev2 proj2 dev1 proj3 dev3 Output proj1 1 proj2 1 proj3 1 Input 2 p1 single p2 multi 5 p1 d1 p1 d2 p2 d1 p2 d2 p2 d3 Output p1 1 p2 3","solution":"def determine_active_devices(n, projects, m, assignments): project_license = {} device_count = {} # Capture project license types for proj in projects: project_id, license_type = proj.split() project_license[project_id] = license_type device_count[project_id] = set() # Count devices per project for assign in assignments: project_id, device_id = assign.split() device_count[project_id].add(device_id) result = [] for proj_id in project_license: if project_license[proj_id] == \\"single\\": result.append(f\\"{proj_id} 1\\") else: result.append(f\\"{proj_id} {len(device_count[proj_id])}\\") return result"},{"question":"You are given two arrays of integers: `tasks` and `workers`. Each element in the `tasks` array represents the amount of effort required to complete a specific task, and each element in the `workers` array represents the maximum effort that a worker can handle. Each worker can only handle one task, and each task can only be assigned to one worker. Your task is to determine the maximum number of tasks that can be completed by assigning a compatible worker to each task. A worker is compatible with a task if the worker\'s maximum effort is greater than or equal to the task\'s required effort. Input The input consists of two lines: 1. The first line contains integers separated by spaces, representing the array `tasks`. 2. The second line contains integers separated by spaces, representing the array `workers`. Output Output a single integer which is the maximum number of tasks that can be completed. Examples Input 3 2 1 4 3 1 2 Output 3 Input 4 2 3 1 4 2 1 Output 3 Input 5 5 5 1 1 1 Output 0","solution":"def max_tasks(tasks, workers): Determines the maximum number of tasks that can be completed by assigning a compatible worker to each task. Args: tasks (list of int): List of integers representing the effort required for each task. workers (list of int): List of integers representing the maximum effort each worker can handle. Returns: int: The maximum number of tasks that can be completed. tasks.sort() workers.sort() task_count = 0 worker_index = 0 for task in tasks: while worker_index < len(workers) and workers[worker_index] < task: worker_index += 1 if worker_index < len(workers) and workers[worker_index] >= task: task_count += 1 worker_index += 1 return task_count"},{"question":"A conveyor belt in a factory has been malfunctioning, periodically stopping at various intervals. Factory workers need a way to determine if the belt can continue operating consistently over a given period. You have been given a sequence of integers representing the times at which the conveyor belt stops. Your task is to determine if there is a consistent time interval `I` such that the belt stops exactly every `I` minutes. If such an interval is found, output `YES` followed by the interval `I`, otherwise output `NO`. ----- Input Format ----- - The first line of input will contain a single integer `T`, denoting the number of test cases. - Each test case consists of: - An integer `N`, denoting the number of stop times. - A line containing `N` space-separated integers representing the `N` times at which the conveyor belt stops. ----- Output Format ----- For each test case, output `YES` followed by the interval `I` if such an interval exists, otherwise output `NO`. ----- Constraints ----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 50 - 1 ≤ stop times ≤ 100 ----- Sample Input 1 ----- 3 3 5 10 15 4 3 6 9 12 5 1 4 6 8 11 ----- Sample Output 1 ----- YES 5 YES 3 NO ----- Explanation ----- Test case 1: The conveyor belt stops at 5, 10, and 15 minutes, which corresponds to a consistent interval of 5 minutes. Test case 2: The conveyor belt stops at 3, 6, 9, and 12 minutes, which corresponds to a consistent interval of 3 minutes. Test case 3: The conveyor belt stop times do not correspond to any consistent interval.","solution":"def find_interval(test_cases): import math results = [] for stops in test_cases: if len(stops) < 2: results.append(\\"NO\\") continue intervals = [j-i for i, j in zip(stops[:-1], stops[1:])] gcd = intervals[0] for interval in intervals[1:]: gcd = math.gcd(gcd, interval) if gcd > 1: results.append(f\\"YES {gcd}\\") else: results.append(\\"NO\\") return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(input_lines[idx]) stops = list(map(int, input_lines[idx + 1].split())) test_cases.append(stops) idx += 2 return test_cases def process_input(input_string): test_cases = parse_input(input_string) results = find_interval(test_cases) return \\"n\\".join(results)"},{"question":"In a large warehouse, packages are stored in a hierarchical manner within boxes. Each box may contain other boxes, and so on, creating a nested structure of boxes and packages. Given a list of operations, determine the number of packages left in a specific box at the end of all operations. The operations you need to handle are: 1. `ADD <box> <count>` - Adds `<count>` packages to specified `<box>`. 2. `REMOVE <box> <count>` - Removes `<count>` packages from the specified `<box>` if possible. 3. `MOVE <source> <destination>` - Moves all packages from `<source>` box to `<destination>` box. 4. `QUERY <box>` - Queries and returns the number of packages in the specified `<box>`. You are provided with the initial number of packages in each box and a set of operations that need to be performed in sequence. Input format: - The first line contains an integer `N`, the number of initially given box-package pairs. - The next `N` lines each contain the name of a box (a string) and an integer representing the initial number of packages in that box. - The line following contains an integer `M`, the number of operations to perform. - The next `M` lines each contain one of the operations described above. Output format: For every `QUERY` operation, output the number of packages in the specified box on a new line. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 1000 - 1 ≤ initial number of packages ≤ 10000 Boxes are identified using strings with no spaces and are case-sensitive. SAMPLE INPUT 3 BoxA 10 BoxB 20 BoxC 30 7 ADD BoxA 5 REMOVE BoxB 15 MOVE BoxA BoxC QUERY BoxA QUERY BoxB QUERY BoxC ADD BoxD 10 SAMPLE OUTPUT 0 5 45 Explanation: 1. Initially, `BoxA` has 10 packages, `BoxB` has 20 packages, and `BoxC` has 30 packages. 2. `ADD BoxA 5` adds 5 packages to BoxA, making a total of 15 packages in BoxA. 3. `REMOVE BoxB 15` removes 15 packages from BoxB, leaving 5 packages in BoxB. 4. `MOVE BoxA BoxC` moves all packages from BoxA to BoxC. BoxA now has 0 packages and BoxC now has 45 packages (30 existing + 15 moved). 5. `QUERY BoxA` returns the number of packages in BoxA, which is 0. 6. `QUERY BoxB` returns the number of packages in BoxB, which is 5. 7. `QUERY BoxC` returns the number of packages in BoxC, which is 45. 8. Adding a new box and packages in it does not affect existing queries.","solution":"def warehouse_operations(initial_boxes, operations): boxes = {box: count for box, count in initial_boxes} results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \'ADD\': box = parts[1] count = int(parts[2]) if box not in boxes: boxes[box] = 0 boxes[box] += count elif command == \'REMOVE\': box = parts[1] count = int(parts[2]) if box in boxes: boxes[box] = max(0, boxes[box] - count) elif command == \'MOVE\': source = parts[1] destination = parts[2] if source in boxes: if destination not in boxes: boxes[destination] = 0 boxes[destination] += boxes[source] boxes[source] = 0 elif command == \'QUERY\': box = parts[1] results.append(boxes.get(box, 0)) return results"},{"question":"Billi and Ketty decided to play a number game to test Billi\'s love for Ketty. This is how the game works: Billi writes down an integer (N), and then Ketty says another integer (M). Billi then has to determine if it is possible to obtain (M) from (N) by removing exactly one digit from (N) (without rearranging the remaining digits). Write a program to determine the result of the game for each test case. Input: - The first line contains the number of test cases (T). - Each of the next (T) lines contains two space separated integers (N) and (M). Output: For each test case, print \\"YES\\" if it is possible to obtain (M) from (N) by removing exactly one digit, otherwise print \\"NO\\". Constraints: - (1 leq N leq 10^{18}) - (0 leq M < N) - (1 leq T leq 10^5) Example Input: ``` 3 1234 124 1001 101 12345 345 ``` Example Output: ``` YES YES NO ``` Explanation: 1. For the first test case, removing \'3\' from 1234 results in 124, which matches M. 2. For the second test case, removing one \'0\' from 1001 results in 101, which matches M. 3. For the third test case, no single digit removal from 12345 results in 345.","solution":"def can_obtain_by_removing_one_digit(N, M): Determines if M can be obtained from N by removing exactly one digit. Parameters: - N (int): The original number. - M (int): The number after removing one digit from N. Returns: - str: \\"YES\\" if M can be obtained from N by removing exactly one digit, otherwise \\"NO\\". N_str = str(N) M_str = str(M) len_n = len(N_str) len_m = len(M_str) for i in range(len_n): if N_str[:i] + N_str[i+1:] == M_str: return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for N, M in test_cases: result = can_obtain_by_removing_one_digit(N, M) results.append(result) return results"},{"question":"You are given a 2D matrix of integers. Your task is to rotate the matrix 90 degrees clockwise in place. For example: ``` Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ```","solution":"def rotate_matrix(matrix): Rotates the given N x N matrix 90 degrees clockwise in place. :param matrix: List of List of integers representing the 2D matrix :return: None n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): # Swap four elements at a time temp = matrix[i][j] matrix[i][j] = matrix[n - j - 1][i] matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] matrix[j][n - i - 1] = temp"},{"question":"Given an array of integers representing stock prices over n days, an investor wants to identify the best days to buy and sell to maximize profit. The investor can only execute one buy and one sell operation. Write a program that determines the maximum profit the investor can earn, given the stock prices for n days. If no profit can be earned, the program should return 0. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of days. The second line contains a sequence of n integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ 10^5), where p_{i} is the stock price on the i-th day. -----Output----- Print a single integer — the maximum profit the investor can earn. If no profit can be made, print 0. -----Examples----- Input 6 7 1 5 3 6 4 Output 5 Input 5 7 6 4 3 1 Output 0 -----Note----- In the first example, the best strategy is to buy on day 2 (price = 1) and sell on day 5 (price = 6). The maximum profit is 6 - 1 = 5. In the second example, the prices are in descending order, so no profit can be made; the output should be 0.","solution":"def max_profit(prices): Given an array of stock prices for `n` days, this function returns the maximum profit that can be obtained by buying and then selling the stock. If no profit can be earned, the function returns 0. :param prices: List[int], a list of integers representing the stock prices. :return: int, the maximum profit that can be earned. if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: # Update the minimum price to buy if price < min_price: min_price = price # Calculate the profit if sold today and update the max profit elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Given an array of integers representing the heights of students in a queue, you need to find the minimum number of students to move in order to align the queue in non-decreasing order of heights, so that every student is taller than or equal to the student in front. You are not allowed to change the relative order of any two students who are already in non-decreasing order in the input array. Implement a function that returns the minimum number of students that need to be moved. Example 1: Input: [5, 1, 2, 3, 4] Output: 1 Explanation: Only the first student needs to be moved to the end of the queue. Example 2: Input: [4, 3, 2, 1] Output: 3 Explanation: All students except the last one need to be rearranged to achieve the non-decreasing order. Note: 1 <= heights.length <= 1000 1 <= heights[i] <= 1000","solution":"def min_students_to_move(heights): Returns the minimum number of students to move in order to align the queue in non-decreasing order of heights. # Find the length of Longest Increasing Subsequence (LIS) if not heights: return 0 n = len(heights) dp = [1] * n for i in range(1, n): for j in range(i): if heights[i] >= heights[j]: dp[i] = max(dp[i], dp[j] + 1) lis_length = max(dp) # Minimum students to move is the total number of students minus the length of LIS. return n - lis_length"},{"question":"*Alice loves to collect coins and organize them in various patterns. She has a collection of N coins, and she wants to arrange them into the shape of an isosceles triangle with rows of increasing size: the first row has one coin, the second row has two coins, the third row has three coins, and so on. However, she doesn\'t need to use all the coins.* Alice wants to know the maximum height of the triangle she can form with the coins she has. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line of input, containing a single integer N: the number of coins Alice has. ------ Output Format ------ For each test case, output on a new line one integer: the maximum height of the triangle that Alice can form with her coins. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^9 ------ Sample Input 1 ------ 4 5 8 12 100 ------ Sample Output 1 ------ 2 3 4 13 ----- Explanation ------ Test case 1: Alice can form a triangle with rows 1, 2 (1 + 2 = 3 coins), but she can\'t form the third row because she only has 5 - 3 = 2 coins left. Test case 2: Alice can form a triangle with rows 1, 2, 3 (1 + 2 + 3 = 6 coins), but she can\'t form the fourth row because she only has 8 - 6 = 2 coins left. Test case 3: Alice can form a triangle with rows 1, 2, 3, 4 (1 + 2 + 3 + 4 = 10 coins). Test case 4: Alice can form a triangle with rows up to height 13 because 1 + 2 + 3 + ... + 13 = 91 coins, and this is the maximum height she can form with 100 coins.","solution":"def max_triangle_height(n): Returns the maximum height of the triangle that can be formed with n coins. height = 0 total_coins_used = 0 while total_coins_used + (height + 1) <= n: height += 1 total_coins_used += height return height def process_test_cases(test_cases): results = [] for n in test_cases: results.append(max_triangle_height(n)) return results def read_input(): T = int(input()) test_cases = [int(input()) for _ in range(T)] return test_cases def main(): test_cases = read_input() results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You\'re designing an archipelago of islands connected through various routes. For each pair of islands, there\'s either a direct one-way ferry route or no direct connection at all. The problem is to determine if every island can be reached from every other island, either directly or through a series of ferry routes. If every island is accessible from any other island, the archipelago is considered \'connected.\' Given the number of islands and the ferry routes, write a program to determine if the archipelago is \'connected\' or \'disconnected\'. # Input The input consists of multiple datasets. Each dataset has the following format: ``` n m a1 b1 a2 b2 ... am bm ``` - `n` (2 ≤ n ≤ 100,000) is the number of islands. - `m` (0 ≤ m ≤ 200,000) is the number of ferry routes. - Each of the next `m` lines contains two integers `ai` and `bi` (1 ≤ ai, bi ≤ n), denoting a direct one-way ferry route from island `ai` to island `bi`. An input line containing two zeros `0 0` terminates the input and should not be processed. # Output For each dataset, output \'CONNECTED\' if the archipelago is connected and \'DISCONNECTED\' otherwise. # Example Input ``` 4 4 1 2 2 3 3 4 4 1 4 3 1 2 2 3 3 1 0 0 ``` Output ``` CONNECTED DISCONNECTED ``` This problem tests the understanding of graph theory, particularly the connected components and graph traversal techniques like depth-first search (DFS) and breadth-first search (BFS).","solution":"def is_connected(n, m, ferry_routes): from collections import defaultdict, deque if n == 0: return True adj_list = defaultdict(list) reverse_adj_list = defaultdict(list) for a, b in ferry_routes: adj_list[a].append(b) reverse_adj_list[b].append(a) def bfs(start, adj): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(adj[node]) return visited # Check connectivity from the first node initial_node = 1 visited_from_start = bfs(initial_node, adj_list) if len(visited_from_start) != n: return False # Check connectivity in the reverse direction to ensure strong connectivity visited_from_start_reverse = bfs(initial_node, reverse_adj_list) if len(visited_from_start_reverse) != n: return False return True def process_archipelago(data): results = [] index = 0 while index < len(data): n, m = map(int, data[index].split()) if n == 0 and m == 0: break ferry_routes = [] for _ in range(m): index += 1 ferry_routes.append(tuple(map(int, data[index].split()))) if is_connected(n, m, ferry_routes): results.append(\\"CONNECTED\\") else: results.append(\\"DISCONNECTED\\") index += 1 return results"},{"question":"You are given two integers, `X` and `Y`, where `1 <= X, Y <= 10`, and `X` lines of text. Each line of text contains `Y` lowercase English letters. Print the transposed text as output, where each new line of output contains the characters taken vertically from the original lines of text. Constraints - 1 leq X, Y leq 10 - Each of the `X` lines contains exactly `Y` lowercase English letters. Input Input is given from Standard Input in the following format: ``` X Y line1 line2 ... lineX ``` Output Print the transposed text, where each line in the output corresponds to a column in the original text. Examples Input ``` 3 4 abcd efgh ijkl ``` Output ``` aei bfj cgk dhl ``` Input ``` 2 3 xyz abc ``` Output ``` xa yb zc ```","solution":"def transpose_text(X, Y, lines): Transposes the lines of text and returns the transposed result as a list of strings. :param X: Number of lines of text :param Y: Number of characters per line :param lines: List of strings, each string is a line of text :return: List of strings, each string is a transposed line of text transposed = [\'\'.join(lines[row][col] for row in range(X)) for col in range(Y)] return transposed # Function to handle input and output in the desired format, useful for testing def main(): import sys input = sys.stdin.read data = input().split() X = int(data[0]) Y = int(data[1]) lines = data[2:2+X] result = transpose_text(X, Y, lines) for line in result: print(line)"},{"question":"You are given two arrays 𝑎 and 𝑏, each containing 𝑛 integers. We define a subsequence of the array 𝑎 as any sequence that can be derived from 𝑎 by deleting some or no elements without changing the order of the remaining elements. For a subsequence 𝑎′ of 𝑎 and a subsequence 𝑏′ of 𝑏, let us define the score of these subsequences as the sum of the absolute differences of their corresponding elements (i.e., |𝑎′[𝑖] – 𝑏′[𝑖]| for all valid indices 𝑖). Your task is to find the maximum possible score among all pairs of non-empty subsequences of 𝑎 and 𝑏. -----Input----- The first line of the input contains a single integer 𝑛 (1 ≤ 𝑛 ≤ 3000), the number of elements in each array. The second line contains 𝑛 integers 𝑎1, 𝑎2, ..., 𝑎𝑛 (1 ≤ 𝑎𝑖 ≤ 10^9) where 𝑎𝑖 is the 𝑖-th element of the first array. The third line contains 𝑛 integers 𝑏1, 𝑏2, ..., 𝑏𝑛 (1 ≤ 𝑏𝑖 ≤ 10^9) where 𝑏𝑖 is the 𝑖-th element of the second array. -----Output----- Print a single integer, the maximum possible score among all pairs of non-empty subsequences. -----Example----- Input 3 1 2 3 4 5 6 Output 6 -----Note----- In the given example, we can choose the subsequence [3] from array 𝑎 and the subsequence [4] from array 𝑏. The score is |3 - 4| = 1. Another subsequence pair with the maximum score is [2, 3] from 𝑎 and [4, 5] from 𝑏 with the score |2 - 4| + |3 - 5| = 2 + 1 = 3. Since we want the maximum, [3] from 𝑎 and [6] from 𝑏 give us the maximum score of |3 - 6| = 3.","solution":"def max_subsequence_score(n, a, b): Returns the maximum possible score among all pairs of non-empty subsequences of a and b. max_score = 0 for i in range(n): for j in range(n): max_score = max(max_score, abs(a[i] - b[j])) return max_score"},{"question":"A chef is trying to organize a cooking competition with N participants. Each participant is required to cook only one dish. Some pairs of participants dislike each other and hence, shouldn\'t be assigned the same dish. The chef wants to find out the least number of different dishes required so that no two participants who dislike each other are required to cook the same dish. You are given M pairs of participants that dislike each other. Write a program that determines the minimum number of different dishes required. Input: - First line contains two integers N and M — the number of participants and the number of dislike pairs. - The next M lines each contain two integers u and v (1 ≤ u, v ≤ N) indicating that participant u and participant v dislike each other. Output: - A single integer, the minimum number of different dishes required. Constraints: 1 ≤ N ≤ 1000 0 ≤ M ≤ 5000 Example Input: 4 4 1 2 1 3 2 3 3 4 Example Output: 3 Note: In the above example: - Participants 1, 2, and 4 must cook different dishes because participant 3 dislikes all of them. - Hence, at least 3 different dishes are required.","solution":"def find_min_dishes(N, M, dislikes): from collections import defaultdict # Create adjacency list for the graph graph = defaultdict(list) for u, v in dislikes: graph[u].append(v) graph[v].append(u) # Sort vertices by the decreasing order of their degree degree = {i: len(graph[i]) for i in range(1, N+1)} sorted_vertices = sorted(degree, key=degree.get, reverse=True) # To keep the color of each node color = {} # Assign colors to vertices for v in sorted_vertices: # Get all colors of adjacent vertices adjacent_colors = {color[nei] for nei in graph[v] if nei in color} # Find the smallest color that is not used by adjacent vertices assigned_color = 1 while assigned_color in adjacent_colors: assigned_color += 1 color[v] = assigned_color # The number of different colors (dishes) used return max(color.values())"},{"question":"Tom works for a company that needs to ensure the quality of its products. Each product has a quality rating represented by an integer. To maintain an acceptable quality level, Tom needs to calculate the median quality rating from a batch of recent products. To help Tom, you will write a program that finds the median quality rating. The median is the middle number in a sorted, ascending or descending, list of numbers and can be more descriptive of that data set than the average. If there is an even number of observations, the median is the average of the two middle numbers. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of products in the batch. The second line contains n integers q_1, q_2, ..., q_n (1 ≤ q_i ≤ 10^5), the quality ratings of the products. -----Output----- Output a single number — the median quality rating. If the result is not an integer, output the number with at least 6 digits after the decimal point. -----Examples----- Input 3 1 3 2 Output 2.000000 Input 4 1 3 3 2 Output 2.500000 Input 5 3 6 7 2 1 Output 3.000000 -----Note----- In the second example, the sorted list is [1, 2, 3, 3], and the median is (2 + 3) / 2 = 2.5. In the third example, the sorted list is [1, 2, 3, 6, 7], and the median is 3.","solution":"def find_median(n, qualities): Returns the median quality rating from a list of integers. :param n: The number of products in the batch :param qualities: The list of quality ratings of the products :return: The median quality rating with at least 6 digits after the decimal place qualities.sort() if n % 2 == 1: median = float(qualities[n // 2]) else: median = (qualities[(n - 1) // 2] + qualities[n // 2]) / 2 return f\\"{median:.6f}\\""},{"question":"Mark and his friends love programming contests. To decide who should pay for dinner, they devised a game where they each submit a string, and the person with the longest common prefix pays. Mark, being clever, suggests writing a program to find the longest common prefix among the strings. Write a function to determine the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \\"\\". Input: First line of input contains an integer N, the number of strings. The next N lines each contain a single string. Output: Output a single line containing the longest common prefix. If no such prefix exists, output an empty string. Constraints: 1 ≤ N ≤ 200 1 ≤ length of each string ≤ 200 SAMPLE INPUT 3 flower flow flight SAMPLE OUTPUT fl","solution":"def longest_common_prefix(strs): Finds the longest common prefix string amongst an array of strings. If there is no common prefix, returns an empty string. if not strs: return \\"\\" # The longest common prefix starts as the entire first string prefix = strs[0] for string in strs[1:]: # Compare the prefix with each string and reduce it accordingly while string[:len(prefix)] != prefix and prefix: prefix = prefix[:len(prefix)-1] if not prefix: break return prefix"},{"question":"Lesha is an avid collector of unique string fragments. He gathers these fragments by extracting them from various input strings. However, Lesha only keeps the fragments that are non-overlapping and have the maximum possible length while preserving their order in the original string. Given a string `s`, help Lesha identify the longest possible non-overlapping fragments he can extract from `s` while maintaining the original order. A fragment is defined as a contiguous sequence of characters in the string `s`, and they must be non-overlapping in the final set of fragments. # Input The first line contains a single integer `t` (1 ≤ t ≤ 10) — the number of test cases. Each test case consists of a single line containing the string `s` (1 ≤ |s| ≤ 1000), which consists only of lowercase English letters. # Output For each test case, output the length of the longest possible non-overlapping fragments that can be obtained from the string `s`. # Example Input ``` 3 ababcbacadefegdehijhklij abacbc aabbcc ``` Output ``` 9 6 6 ``` # Explanation - In the first test case, the longest non-overlapping fragments we can obtain are \\"ababcbaca\\" and \\"defegde\\", the combined length is 9. - In the second test case, the longest non-overlapping fragments we can obtain are \\"ab\\" and \\"acbc\\", the combined length is 6. - In the third test case, the longest non-overlapping fragments we can obtain are \\"aa\\", \\"bb\\", and \\"cc\\", the combined length is 6. To solve this problem, you need to identify the longest possible sequence of fragments that fit the criteria, ensuring that no characters are reused among different fragments while maintaining their original order in the input string.","solution":"def longest_fragments_length(t, strings): results = [] for s in strings: last_occurrence = {char: idx for idx, char in enumerate(s)} fragments = [] start = end = 0 while start < len(s): end = last_occurrence[s[start]] idx = start while idx <= end: end = max(end, last_occurrence[s[idx]]) idx += 1 fragments.append(s[start:end + 1]) start = end + 1 results.append(sum(len(fragment) for fragment in fragments)) return results"},{"question":"Sehdev has recently been fascinated by string patterns and their properties. He stumbled upon a unique problem and needs your help to solve it. You are given a string that consists of only lowercase English letters. A substring is any non-empty contiguous sequence of characters within a string. Two substrings are considered different if they start or end at different positions in the string. Sehdev wants to know the number of different substrings present in the given string. Write a program to determine the number of unique substrings in the given string. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the length of the string. The second line contains a string of length n composed only of lowercase English letters. Output Print a single integer — the number of unique substrings in the given string. SAMPLE INPUT 3 abc SAMPLE OUTPUT 6 Explanation For the string \\"abc\\", the unique substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Hence, there are 6 unique substrings.","solution":"def count_unique_substrings(s): Returns the number of unique substrings in the given string `s`. n = len(s) substrings_set = set() for i in range(n): for j in range(i + 1, n + 1): substrings_set.add(s[i:j]) return len(substrings_set) # Example usage: # total_unique_substrings = count_unique_substrings(\\"abc\\") # print(total_unique_substrings) # Should print 6"},{"question":"You are programming a simple adventure game where the player moves across a grid to collect items. The grid is represented as an `M x N` matrix where each cell is either empty (represented by `.`) or contains an item (represented by `I`). The player starts at the top-left cell (0, 0) and can move right or down to the adjacent cells. The goal is to determine the maximum number of items the player can collect on their way to the bottom-right cell (M-1, N-1). The player should only move right (→) or down (↓) in each step. Write a function that receives the grid as input and returns the maximum number of items the player can collect. **Function Signature:** ```python def max_items_collected(grid: List[List[str]]) -> int: pass ``` **Input:** - A 2D list of strings representing the grid, where `M` is the number of rows and `N` is the number of columns (1 ≤ M, N ≤ 100). Each element is either `\'.\'` or `\'I\'`. **Output:** - An integer representing the maximum number of items collected. **Example:** ```python grid1 = [ [\'I\', \'.\', \'.\', \'I\'], [\'.\', \'I\', \'.\', \'.\'], [\'I\', \'.\', \'I\', \'I\'] ] print(max_items_collected(grid1)) # Output: 4 grid2 = [ [\'.\', \'I\', \'I\', \'I\'], [\'I\', \'I\', \'.\', \'.\'], [\'.\', \'I\', \'.\', \'I\'] ] print(max_items_collected(grid2)) # Output: 4 ``` **Explanation:** In `grid1`, the player can collect up to 4 items by taking the following path: 1. Start at (0, 0): \'I\' 2. Move right to (0, 1): \'.\' 3. Move right to (0, 2): \'.\' 4. Move right to (0, 3): \'I\' 5. Move down to (1, 3): \'.\' 6. Move down to (2, 3): \'I\' 7. Move left to (2, 2): \'I\' 8. Move left to (2, 1): \'.\' 9. Move left to (2, 0): \'I\' ■ Note that there may be alternative paths that also maximize the number of items collected. Please implement the function `max_items_collected` to solve the problem.","solution":"from typing import List def max_items_collected(grid: List[List[str]]) -> int: if not grid or not grid[0]: return 0 M = len(grid) N = len(grid[0]) # Create a DP table to store the maximum items collected up to each cell dp = [[0]*N for _ in range(M)] # Initialize the starting point dp[0][0] = 1 if grid[0][0] == \'I\' else 0 # Fill the dp table for r in range(M): for c in range(N): if r == 0 and c == 0: continue items_from_top = dp[r-1][c] if r > 0 else 0 items_from_left = dp[r][c-1] if c > 0 else 0 dp[r][c] = (1 if grid[r][c] == \'I\' else 0) + max(items_from_top, items_from_left) return dp[-1][-1]"},{"question":"A software company is developing a new feature for their mapping application. The feature is a simulation of pedestrian movement on a 2D grid. The pedestrian can move in four directions: up, down, left, and right. The grid is defined with coordinates, where (0,0) is the starting point. The pedestrian\'s movement is controlled by a sequence of instructions. Each instruction consists of two components: a direction (one of \'U\', \'D\', \'L\', \'R\' for up, down, left, right respectively) and a number of steps. Your task is to write a program that calculates the final position of the pedestrian after following all the instructions. Input The input consists of several datasets. Each dataset is formatted as follows. N direction1 steps1 direction2 steps2 . . . directionN stepsN The first line of a dataset contains a single positive integer N (1 ≤ N ≤ 100), indicating the number of instructions in the dataset. The following N lines each describe an instruction. Each instruction consists of a direction (either \'U\', \'D\', \'L\', or \'R\') and a positive integer stepsi (1 ≤ stepsi ≤ 100). The end of input is indicated by a line containing a single zero. This line is not part of any dataset and hence should not be processed. Output For each dataset, output two lines indicating the final position of the pedestrian. The first line should contain the x-coordinate, and the second line should contain the y-coordinate. Example Input 2 U 3 R 4 3 L 2 D 5 R 3 1 D 7 0 Output 4 3 1 -5 0 -7","solution":"def final_position(instructions): x, y = 0, 0 for direction, steps in instructions: if direction == \'U\': y += steps elif direction == \'D\': y -= steps elif direction == \'L\': x -= steps elif direction == \'R\': x += steps return x, y def process_datasets(data): datasets = data.strip().split(\'n\') index = 0 results = [] while index < len(datasets): n = int(datasets[index]) if n == 0: break index += 1 instructions = [] for _ in range(n): parts = datasets[index].split() direction = parts[0] steps = int(parts[1]) instructions.append((direction, steps)) index += 1 x, y = final_position(instructions) results.append((x, y)) return results"},{"question":"Wolfgang is a computer science teacher and he loves creating puzzles for his students. One day, he presented a problem to his class where a robot must traverse a grid as efficiently as possible in terms of the number of steps. The robot starts at the top-left corner of an `m x n` grid and needs to reach the bottom-right corner. The robot can move either down or right at any point in time but not both simultaneously. Wolfgang\'s challenge for his students is to determine the number of unique paths the robot can take to reach its destination. Write a program that calculates the number of unique paths from the top-left to the bottom-right corner of the grid. -----Input----- The input consists of two integers m and n (1 ≤ m, n ≤ 100) representing the number of rows and columns of the grid respectively. -----Output----- Output a single integer which represents the number of unique paths from the top-left to the bottom-right corner of the grid. -----Examples----- Input 3 7 Output 28 Input 2 2 Output 2 -----Note----- In the first example, the grid dimensions are 3 x 7. The robot has 28 unique paths to reach from the top-left to bottom-right corner. In the second example, the grid dimensions are 2 x 2. The robot can reach its goal in 2 unique paths. To elaborate on the first example: - One possible path could be moving all the way to the right first, then moving down. - Another possible path could be moving down first, then all the way to the right. - Other combinations of moving right and down also count, totaling 28 unique paths overall.","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left to the bottom-right corner of an m x n grid. # Create a 2D list (m x n) with all elements initialized to 1 dp = [[1] * n for _ in range(m)] # Compute number of unique paths for each cell in the grid for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"Consider you have n books on a shelf, each with a certain height. You are given q queries of the following types: 1. Replace the height of each book on the shelf where l ≤ index ≤ r with the maximum of the heights between index l and r. 2. Replace the height of each book on the shelf where l ≤ index ≤ r with the minimum of the heights between index l and r. 3. Add x to the height of each book on the shelf where l ≤ index ≤ r. 4. Output the height of the tallest book between index l and r. For each query, you are given l, r, and maybe x. The indices are 1-based. Input The first line contains two integers n and q (1 ≤ n ≤ 2 ⋅ 10^5; 1 ≤ q ≤ 10^5) — the number of books and the number of queries, respectively. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^6) — the heights of the books. The next q lines contain the queries. For each query, the first integer of each line is t (1 ≤ t ≤ 4) — the type of query. If t ∈ {1, 2, 3}, then three integers l_i, r_i, and (for type 3) x_i will follow (1 ≤ l_i ≤ r_i ≤ n; 1 ≤ x_i ≤ 10^6). Otherwise, if t=4, then two integers l_i and r_i will follow (1 ≤ l_i ≤ r_i ≤ n). Output Print the answer for each query where t=4. Example Input 6 5 3 8 5 2 9 4 4 1 3 1 2 5 3 1 6 2 2 3 6 4 1 6 Output 8 11 Explanation For the first query, the height of the tallest book between indices 1 and 3 is 8. For the second query, the heights between indices 2 and 5 become max(8, 5, 2, 9) = 9. So, the heights array changes to [3, 9, 9, 9, 9, 4]. For the third query, 2 is added to each height from index 1 to 6. So, the heights array becomes [5, 11, 11, 11, 11, 6]. For the fourth query, the heights between indices 3 and 6 become min(11, 11, 11, 6) = 6. So, the heights array becomes [5, 11, 6, 6, 6, 6]. For the fifth query, the height of the tallest book between indices 1 and 6 is 11.","solution":"def process_queries(n, q, heights, queries): results = [] for query in queries: t = query[0] l = query[1] - 1 r = query[2] - 1 if t == 1: max_height = max(heights[l:r + 1]) for i in range(l, r + 1): heights[i] = max_height elif t == 2: min_height = min(heights[l:r + 1]) for i in range(l, r + 1): heights[i] = min_height elif t == 3: x = query[3] for i in range(l, r + 1): heights[i] += x elif t == 4: results.append(max(heights[l:r + 1])) return results"},{"question":"Average of Even Indexed Elements Create a function named `average_even_index` that takes a list of integers as input and returns the average of the elements located at even indices (0, 2, 4, ...). If the list is empty, return 0. **Function Signature:** ```python def average_even_index(nums: List[int]) -> float: ``` **Input:** - A list of integers, e.g. [1, 2, 3, 4, 5]. **Output:** - A float representing the average of the elements located at even indices, e.g. 3.0 for the list [1, 2, 3, 4, 5]. **Constraints:** - The list may contain negative numbers. - The list may be empty. **Examples:** ```python assert average_even_index([1, 2, 3, 4, 5]) == 3.0 assert average_even_index([10, 20, 30, 40, 50, 60]) == 37.5 assert average_even_index([]) == 0.0 assert average_even_index([-1, -2, -3, -4, -5]) == -3.0 ``` **Explanation:** - In the first example, the elements at even indices are [1, 3, 5]. Their average is (1 + 3 + 5) / 3 = 3.0. - In the second example, the elements at even indices are [10, 30, 50]. Their average is (10 + 30 + 50) / 3 = 37.5. - In the third example with an empty list, the function returns 0. - In the fourth example, the elements at even indices are [-1, -3, -5]. Their average is (-1 + -3 + -5) / 3 = -3.0.","solution":"from typing import List def average_even_index(nums: List[int]) -> float: if not nums: # check if the list is empty return 0.0 even_index_elements = nums[0::2] # list slicing to get elements at even indices return sum(even_index_elements) / len(even_index_elements)"},{"question":"Dr. Norris is a research scientist working on optimizing the workflow of a top-secret development project involving multiple interconnected modules. Each module requires a set of tasks to be completed sequentially. Due to the complexity of the project, certain tasks depend on the completion of other tasks not necessarily in the same module. Dr. Norris needs to determine a valid sequence to complete all the tasks, respecting their dependencies, so the project can proceed without any delays. You have been assigned to automate this process using a program that schedules tasks based on their dependencies. Given the total number of tasks and a list of dependencies where each dependency specifies that one task must precede another, your job is to find a valid order in which the tasks can be completed. If no valid order exists that satisfies all dependencies, return an indication of the impossibility. Input - The first line contains two integers, n (2 ≤ n ≤ 1000) — the number of tasks, and m (1 ≤ m ≤ 5000) — the number of dependencies. - Each of the next m lines contains two integers a and b denoting a directed edge from task a to task b (1 ≤ a, b ≤ n), which means task a must be completed before task b. Output - If there\'s a valid order to complete all tasks, output a single line with n space-separated integers representing one possible valid sequence of tasks. If there are multiple valid sequences, print any of them. - If there is no valid sequence, output a single line \\"Impossible\\". Example Input 4 4 1 2 1 3 3 4 2 4 Output 1 2 3 4 Input 3 3 1 2 2 3 3 1 Output Impossible Note In the first example, both 1 2 3 4 and 1 3 2 4 would be valid orders. The second example has a cycle, making it impossible to complete the tasks sequentially.","solution":"from collections import deque, defaultdict def find_task_order(n, m, dependencies): # Graph construction graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Topological sort using Kahn\'s Algorithm queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: queue.append(i) result = [] while queue: current = queue.popleft() result.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if topological sort is possible if len(result) == n: return result else: return \\"Impossible\\""},{"question":"In the magical kingdom of Zog, there are N enchanted trees, each with a different height. The inhabitants of Zog want to organize a grand feast and build tables from the magical wood of these trees. The only condition is that a table can only be made from trees that have an odd height because only trees with odd heights possess the magical properties required. Your task is to determine how many odd-height trees exist in a given list of tree heights. -----Input----- - First line contains a single integer T, denoting the number of test cases. - For each test case: - The first line contains a single integer N denoting the number of trees. - The second line contains N space-separated integers, where each integer h_i represents the height of the i-th tree. -----Output----- For each test case, print the number of odd-height trees in a separate line. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq h_i leq 10^9 -----Sample Input----- 2 5 3 4 7 6 9 4 2 4 8 10 -----Sample Output----- 3 0 -----Explanation----- In the first test case, the tree heights are [3, 4, 7, 6, 9]. Among these, 3, 7, and 9 are odd, so the output is 3. In the second test case, the tree heights are [2, 4, 8, 10]. There are no trees with odd heights, so the output is 0.","solution":"def count_odd_height_trees(T, test_cases): This function takes in the number of test cases T and a list of test cases. Each test case contains the number of trees N and their heights. The function returns a list of integers where each integer is the count of odd-height trees for each test case. results = [] for i in range(T): N, heights = test_cases[i] odd_count = sum(1 for h in heights if h % 2 != 0) results.append(odd_count) return results"},{"question":"Jennifer loves collecting vintage albums, and she likes to organize her collection in a particular way. She has an integer `n` representing the number of albums she currently possesses and an array `A` of size `n` where each element `A[i]` denotes the release year of the i-th album. An album \\"chain\\" is defined as a consecutive subarray of `A` where: - Each album in the chain has a release year strictly greater than the release year of the previous album in that chain. Jennifer is interested in finding the length of the longest album chain in her collection. Could you help her? -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of albums in Jennifer\'s collection. The second line contains n integers A[i] (1900 ≤ A[i] ≤ 2022) — the release years of the albums. -----Output----- Print a single integer — the length of the longest chain of consecutive albums in which each album has a release year strictly greater than the previous one. -----Examples----- Input 5 1970 1980 1990 1985 1995 Output 3 Input 6 1960 1970 1980 1990 2000 2010 Output 6 Input 4 2001 2000 1999 1998 Output 1 -----Note----- In the first example, the longest chain of consecutive albums is [1970, 1980, 1990] which has a length of 3. In the second example, the entire list of albums is already in strictly increasing order, so the longest chain has length 6. In the third example, there is no chain of more than one album where the release years are strictly increasing, so the longest chain has length 1.","solution":"def longest_album_chain(n, A): Given the number of albums and their release years, this function returns the length of the longest chain of consecutive albums in which each album has a release year strictly greater than the previous one. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if A[i] > A[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"# Back-Story On a sunny afternoon, I decided to fly my drone to capture some aerial photos. To ensure I don\'t lose my drone, I need to keep track of its position at all times. The drone can move in four directions – up, down, left, and right. The starting point of the drone is always at the origin (0, 0) on a 2D plane. # Kata Task You will be given: * A set of movement instructions in the form of a string, containing the letters: * \\"U\\" (up) * \\"D\\" (down) * \\"L\\" (left) * \\"R\\" (right) Calculate the final position of the drone on the 2D plane after executing all the instructions. Function Signature: ```python def final_position(movements: str) -> Tuple[int, int]: ``` # Example: - For the input string `\\"UUDDLRLR\\"`, the function should return `(0, 0)` because the moves cancel each other out. - For the input string `\\"UUU\\"`, the function should return `(0, 3)` because all movements are upwards. # Notes - Assume that each movement increases or decreases the coordinate by 1 unit. - The function should return a tuple representing the final `(x, y)` coordinates of the drone. Happy flying!","solution":"def final_position(movements: str) -> (int, int): Calculate the final position of the drone on a 2D plane after executing all the movement instructions. :param movements: A string containing movement instructions (U, D, L, R). :return: A tuple with the final (x, y) coordinates. x = 0 y = 0 for move in movements: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return (x, y)"},{"question":"David loves word puzzles and has come up with a new challenge involving a square grid of characters. He writes a sequence of characters on each cell of this grid. He then defines a **word path** as a path on the grid where you move either right or down from one cell to the next, starting from the top-left corner and ending at the bottom-right corner. David wants to know the number of distinct words he can generate on the grid following any word path. The word formed along each path should concatenate all characters in the cells visited along the path in the order of visitation. Can you help David compute the number of distinct words that can be formed? Input: - The first line contains an integer `n` (2 ≤ n ≤ 15) indicating the size of the grid. - The next `n` lines each contain `n` strings separated by spaces. Each string contains 1 or 2 characters. Output: - A single integer denoting the number of distinct words that can be formed by all possible word paths from the top-left corner to the bottom-right corner. Example: Input: 4 \\"a\\" \\"b\\" \\"c\\" \\"d\\" \\"e\\" \\"f\\" \\"g\\" \\"h\\" \\"i\\" \\"j\\" \\"k\\" \\"l\\" \\"m\\" \\"n\\" \\"o\\" \\"p\\" Output: 20 Note: In the example above, the distinct words are formed by concatenating characters from all paths starting at the top-left corner (cell with \\"a\\") and ending at the bottom-right corner (cell with \\"p\\"), allowing only downward and rightward movements. All unique concatenated sequences count towards the total distinct words possible.","solution":"def distinct_word_paths(n, grid): Given an n x n grid of strings, return the number of distinct word paths that can be generated by moving right or down from the top-left to the bottom-right cell. from functools import lru_cache @lru_cache(None) def dfs(x, y): if x == n - 1 and y == n - 1: return {grid[x][y]} paths = set() if x < n - 1: paths |= {grid[x][y] + path for path in dfs(x + 1, y)} if y < n - 1: paths |= {grid[x][y] + path for path in dfs(x, y + 1)} return paths return len(dfs(0, 0))"},{"question":"In a magical kingdom, there are `N` citizens, each identified by a unique ID from `1` to `N`. As part of a recent census, it has been determined that certain citizens are friends with one another. This friendship is bidirectional; if citizen `A` is friends with citizen `B`, then `B` is friends with `A`. Citizens who are directly or indirectly connected via friendship form social groups. Two citizens belong to the same social group if there is a sequence of friendships starting from one to the other. For instance, if `A` is friends with `B` and `B` is friends with `C`, then `A`, `B`, and `C` form a social group. Given the number of citizens `N` and a list of pairs of friends, identify the number of unique social groups in the kingdom. -----Input----- The first line contains two integers `N` and `M` (1 ≤ N ≤ 1000, 0 ≤ M ≤ 5000) — the number of citizens and the number of pairs of friends, respectively. The next `M` lines each contain two integers `A` and `B` (1 ≤ A, B ≤ N, A ≠ B) — indicating that citizen `A` is friends with citizen `B`. -----Output----- Print a single integer — the number of unique social groups in the kingdom. -----Examples----- Input 4 2 1 2 3 4 Output 2 Input 5 3 1 2 2 3 4 5 Output 2 Input 6 5 2 3 1 2 4 5 5 6 6 4 Output 2 -----Note----- In the first example, there are 4 citizens and 2 pairs of friends: `1-2` and `3-4`. Thus, there are 2 unique social groups: `{1, 2}` and `{3, 4}`. In the second example, citizen 1 is friends with citizen 2, and citizen 2 is friends with citizen 3, forming the group `{1, 2, 3}`. Citizens 4 and 5 form another group `{4, 5}`. In the third example, citizens `1` stands alone, while `{2, 3}` and `{4, 5, 6}` make up the social groups `{2, 3}` and `{4, 5, 6}` respectively. Hence, there are 2 groups in total.","solution":"def find_number_of_social_groups(N, M, friendships): Returns the number of unique social groups in the kingdom. N: int - number of citizens M: int - number of pairs of friends friendships: list of tuples - list of pairs of friends from collections import defaultdict, deque # Adjacency list for the friendships graph graph = defaultdict(list) for A, B in friendships: graph[A].append(B) graph[B].append(A) visited = set() num_groups = 0 def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) for citizen in range(1, N+1): if citizen not in visited: visited.add(citizen) bfs(citizen) num_groups += 1 return num_groups"},{"question":"There is a famous online video game where players can construct buildings using various resources. One of the game mechanics involves a character called \\"Master Builder\\" who can upgrade buildings to enhance their capabilities. Each building has a unique ID from 1 to n, and the upgrades are performed in steps, where each step has a specific cost associated with it. To upgrade a building, the \\"Master Builder\\" follows these rules: - Each building can be upgraded through a sequence of steps, where each step costs a certain amount of gold. - The steps and their respective costs are represented as a list of integers. You, as the game\'s designer, need to implement a feature that allows the player to retrieve the minimum total cost to upgrade a building from step x to step y (inclusive). Additionally, players can add or remove a step at any position within the upgrade sequence of a building. To formalize, here are the types of queries you need to handle: 1. What is the minimum total cost to upgrade a building from step x to step y, inclusive? 2. Add a new step with a given cost at position p in the upgrade sequence of a specified building. 3. Remove the step at position p in the upgrade sequence of a specified building. Input - The first line contains an integer n — the total number of buildings. - Each of the next n lines contains the steps of the buildings in a space-separated format. The first value is k (the number of steps for that building), followed by k integers representing the costs of each step. - The next line contains an integer q — the number of queries. - The next q lines contain the queries, each query is one of the following: - \\"1 b x y\\" — the minimum total cost to upgrade building b from step x to y, inclusive. - \\"2 b p c\\" — add a new step with cost c at position p in the upgrade sequence of building b. - \\"3 b p\\" — remove the step at position p in the upgrade sequence of building b. Output For each query of type 1, print the minimum total cost to upgrade the specified building from step x to y. Examples Input 3 5 10 20 30 40 50 3 15 25 35 4 5 10 15 20 6 1 1 2 4 2 2 2 30 1 2 1 3 3 1 3 1 1 1 3 1 3 2 4 Output 60 70 30 55 Note In the first query \\"1 1 2 4\\", the total cost of upgrading building 1 from step 2 to 4 is 20 + 30 + 40 = 90. In the second query, a new step with cost 30 is added at position 2 in the upgrade sequence of building 2. In the third query \\"1 2 1 3\\", the sequence of building 2 is now [15, 30, 25, 35] and the total cost from step 1 to 3 is 15 + 30 + 25 = 70. In the fourth query, the step at position 3 is removed from the upgrade sequence of building 1. In the fifth query \\"1 1 1 3\\", the sequence of building 1 is now [10, 20, 50] and the total cost from step 1 to 3 is 10 + 20 + 50 = 80. In the sixth query \\"1 3 2 4\\", the total cost of upgrading building 3 from step 2 to 4 is 10 + 15 + 20 = 45.","solution":"def process_queries(n, buildings, queries): results = [] for query in queries: parts = query.split() query_type = int(parts[0]) b = int(parts[1]) - 1 # Building index (1-based to 0-based) if query_type == 1: x = int(parts[2]) - 1 # Start step index (1-based to 0-based) y = int(parts[3]) # End step index (inclusive) total_cost = sum(buildings[b][x:y]) results.append(total_cost) elif query_type == 2: p = int(parts[2]) - 1 # Position index (1-based to 0-based) c = int(parts[3]) # Cost of the new step buildings[b].insert(p, c) elif query_type == 3: p = int(parts[2]) - 1 # Position index (1-based to 0-based) buildings[b].pop(p) return results # Example usage: if __name__ == \\"__main__\\": n = 3 buildings = [ [10, 20, 30, 40, 50], [15, 25, 35], [5, 10, 15, 20] ] queries = [ \\"1 1 2 4\\", \\"2 2 2 30\\", \\"1 2 1 3\\", \\"3 1 3\\", \\"1 1 1 3\\", \\"1 3 2 4\\" ] result = process_queries(n, buildings, queries) for res in result: print(res)"},{"question":"Implement a function `findLargestPrimeFactor` that receives a positive integer `n` and returns its largest prime factor. A prime factor of a number `n` is a prime number that divides `n` exactly, without leaving a remainder. # Input - An integer `n` (2 ≤ n ≤ 2 x 10^12). # Output - Return the largest prime factor of `n`. # Example ```python print(findLargestPrimeFactor(10)) # Output: 5 print(findLargestPrimeFactor(15)) # Output: 5 print(findLargestPrimeFactor(21)) # Output: 7 ``` # Constraints - The function should be efficient and run within a reasonable time frame given the large possible value of `n`. # Guidelines - Ensure to handle the factorization efficiently considering the potentially large input values. - The function should properly handle even and odd values for `n`. - Your solution should aim for an optimal time complexity for factorization.","solution":"def findLargestPrimeFactor(n): Returns the largest prime factor of a given number n. # Initialize the largest prime factor variable largest_prime = -1 # Remove any potential even number factors first while n % 2 == 0: largest_prime = 2 n //= 2 # Remove any potential odd number factors factor = 3 while factor * factor <= n: while n % factor == 0: largest_prime = factor n //= factor factor += 2 # If n is still greater than 2, then n must be a prime factor larger than 2 if n > 2: largest_prime = n return largest_prime"},{"question":"Given are two integers N and M. Determine if the product of their digits equals the sum of their digits. If so, print True; otherwise, print False. -----Constraints----- - 10 leq N leq 99 - 10 leq M leq 99 -----Input----- Input is given from Standard Input in the following format: N M -----Output----- If the product of the digits of N and M equals the sum of their digits, print True; otherwise, print False. -----Sample Input----- 23 34 -----Sample Output----- False For N=23: digits are 2 and 3, and for M=34: digits are 3 and 4. Product of digits = 2 * 3 + 3 * 4 = 6 + 12 = 18, Sum of digits = 2 + 3 + 3 + 4 = 12. Product of digits does not equal to their sum.","solution":"def check_product_equals_sum(N, M): Determine if the product of the digits of N and M equals the sum of their digits. If so, return True; otherwise, return False. def get_digits(num): return [int(digit) for digit in str(num)] digits_N = get_digits(N) digits_M = get_digits(M) product_of_digits = digits_N[0] * digits_N[1] * digits_M[0] * digits_M[1] sum_of_digits = digits_N[0] + digits_N[1] + digits_M[0] + digits_M[1] return product_of_digits == sum_of_digits"},{"question":"Given an integer array arr[] of size N and an integer K, your task is to find the count of distinct absolute differences between any pair of elements in the array that are greater than or equal to K. Example 1: Input: N = 5, K = 2 arr = [1, 3, 4, 7, 10] Output: 6 Explanation: The absolute differences between any pair of elements are: |1-3|=2, |1-4|=3, |1-7|=6, |1-10|=9, |3-4|=1, |3-7|=4, |3-10|=7, |4-7|=3, |4-10|=6, |7-10|=3 Distinct absolute differences (>=2) are: [2, 3, 4, 6, 7, 9] Example 2: Input: N = 4, K = 1 arr = [5, 8, 12, 15] Output: 6 Explanation: The absolute differences between any pair of elements are: |5-8|=3, |5-12|=7, |5-15|=10, |8-12|=4, |8-15|=7, |12-15|=3 Distinct absolute differences (>=1) are: [3, 4, 7, 10] Your Task: You don\'t need to read input or print anything. Your task is to complete the function countDistinctAbsoluteDifferences() which takes the integer N, integer K, and the array arr[] and returns the count of distinct absolute differences greater than or equal to K. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(D) where D is the maximum absolute difference Constraints: 1 <= N <= 500 1 <= arr[i] <= 10000 1 <= K <= 10000","solution":"def countDistinctAbsoluteDifferences(N, K, arr): Returns the count of distinct absolute differences between any pair of elements in the array that are greater than or equal to K. distinct_diffs = set() for i in range(N): for j in range(i + 1, N): diff = abs(arr[i] - arr[j]) if diff >= K: distinct_diffs.add(diff) return len(distinct_diffs)"},{"question":"Julian and Alex decided to play a fun game involving two strings. Julian chose a string S, and Alex chose a string P. The game\'s objective is to find the length of the smallest contiguous substring of S that contains all the characters of P. If no such substring exists, the output should be -1. -----Input----- The first line contains a string S (1 leqslant |S| leqslant 10^5) consisting of lowercase English letters. The second line contains a string P (1 leqslant |P| leqslant 10^5) consisting of lowercase English letters. -----Output----- Print a single integer representing the length of the smallest contiguous substring of S that contains all characters of P. If no such substring exists, print -1. -----Examples----- Input adobecodebanc abc Output 4 Input a b Output -1","solution":"def min_length_substring(S, P): Returns the length of the smallest contiguous substring of S that contains all characters of P. If no such substring exists, returns -1. from collections import Counter dict_p = Counter(P) required_chars = len(dict_p) l, r = 0, 0 formed = 0 window_counts = {} min_len = float(\'inf\') min_len_window = (None, None) while r < len(S): char = S[r] window_counts[char] = window_counts.get(char, 0) + 1 if char in dict_p and window_counts[char] == dict_p[char]: formed += 1 while l <= r and formed == required_chars: char = S[l] if r - l + 1 < min_len: min_len = r - l + 1 min_len_window = (l, r) window_counts[char] -= 1 if char in dict_p and window_counts[char] < dict_p[char]: formed -= 1 l += 1 r += 1 return min_len if min_len != float(\'inf\') else -1"},{"question":"You are given an integer array A of size N. The array is guaranteed to be \\"nearly sorted\\", such that every element of the array is at most K positions away from its target position (i.e., each element A[i] is within the index range [i-K, i+K]). Your task is to write a function that fully sorts this array in ascending order. -----Input:----- - First-line will contain two integers N and K. - The second line will contain N integers, the elements of the array A. -----Output:----- - Output the sorted array as a single line of space-separated integers. -----Constraints----- - 1 leq N leq 10^5 - 0 leq K < N - 1 leq A[i] leq 10^9 -----Sample Input:----- 7 3 6 5 3 2 8 10 9 -----Sample Output:----- 2 3 5 6 8 9 10","solution":"import heapq def sort_nearly_sorted_array(N, K, A): Given a nearly sorted array where each element is at most K positions away from its target position, This function sorts the array in ascending order. Parameters: N (int): Size of the array. K (int): Maximum distance an element is away from its target position. A (list): The array to be sorted. Returns: list: The sorted array. # Create a min-heap with the first K+1 elements since each element is at most K positions away min_heap = A[:K+1] heapq.heapify(min_heap) # Index for placing sorted elements in the result array target_index = 0 # Iterate through the remaining elements for i in range(K+1, N): A[target_index] = heapq.heappop(min_heap) heapq.heappush(min_heap, A[i]) target_index += 1 # Place the remaining elements from the heap to the sorted array while min_heap: A[target_index] = heapq.heappop(min_heap) target_index += 1 return A"},{"question":"Overview Write a function that takes an array of integers and sorts it such that all even numbers appear before all odd numbers. The relative order of the even and odd numbers should be preserved as they appear in the original array. ```python sort_even_before_odd([4, 2, 5, 3, 1, 6]) => [4, 2, 6, 5, 3, 1] sort_even_before_odd([3, 1, 4, 6, 8, 5]) => [4, 6, 8, 3, 1, 5] ``` Specifics - The function should keep the relative order of even and odd numbers as they appear in the input array. - It should handle empty arrays and arrays consisting of only odd or only even numbers gracefully. - The input will always be an array of integers, and can have any length from 0 to 1000 inclusive. - You are not allowed to use built-in sort functions or libraries that could simplify solving the problem.","solution":"def sort_even_before_odd(arr): Sorts an array such that all even numbers appear before all odd numbers, while preserving the relative order of the even and odd numbers. Parameters: arr (list of int): The input array of integers. Returns: list of int: The sorted array with even numbers first. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"In a distant kingdom, there lies a magical forest that is represented as a string F, consisting only of characters \'x\' and \'y\'. The forest is enchanted and can only be cleared if it is empty. To clear the forest of magical creatures, a wizard can cast a spell from his spellbook. Each spell in the spellbook allows the wizard to remove any subsequence S of F where S has both \'x\' and \'y\'. Note that a subsequence doesn\'t have to be contiguous. Your task is to determine the minimal number of spells the wizard needs to cast in order to clear the magical forest. -----Note----- Maybe, some of you aren\'t familiar with definitions from the statement. Here\'re some articles that could help you to understand the problem correctly: - Subsequence: http://en.wikipedia.org/wiki/Subsequence -----Input----- The first line of the input contains an integer T, denoting the number of test cases. The next T lines contain a string F each, denoting the string, that describes the current state of the magical forest for the corresponding test cases. It\'s guaranteed that each F consists only of characters \'x\' and \'y\'. -----Output----- The output should contain exactly T lines. i\'th line of the output should contain the only integer: the minimal number of spells the wizard has to cast in order to clear the magical forest for the corresponding test cases. -----Constraints----- - 1 ≤ |F| ≤ 100000, for each F. - Subtask 1(30 points): each F in the input is a palindrome, 1 ≤ T ≤ 6. - Subtask 2(70 points): 1 ≤ T ≤ 10. -----Example----- Input: 2 xxyxy yyxx Output: 1 2 -----Explanation----- In the first test case, the wizard can cast a spell that removes the entire string \'xxyxy\' in one go since it contains both \'x\' and \'y\'. In the second test case, the wizard first casts a spell to remove one \'x\' and one \'y\' (for example, \'xy\'), resulting in \'yx\'. Then, the wizard can cast another spell to remove \'yx\'. Thus, two spells are needed.","solution":"def min_spells_to_clear_forest(t, forests): Returns a list of the minimal number of spells needed to clear each forest. Args: - t (int): Number of test cases - forests (list of str): List of forest strings Returns: - list of int: Minimal number of spells for each forest results = [] for forest in forests: x_count = forest.count(\'x\') y_count = forest.count(\'y\') spells_needed = min(x_count, y_count) results.append(spells_needed) return results def read_input(input_string): Reads the input string and returns the number of test cases and the forests. Args: - input_string (str): Input string Returns: - tuple: (int, list of str) lines = input_string.strip().split(\\"n\\") t = int(lines[0]) forests = lines[1:] return t, forests def format_output(results): Formats the results list for output Args: - results (list of int): Results list Returns: - str: Formatted output string return \\"n\\".join(map(str, results))"},{"question":"Two friends, Alice and Bob, are playing a sequence game. Alice gives Bob a number K and a list of N integers. Bob needs to rearrange the list such that the sum of the first K numbers is maximized. In other words, Bob will choose the first K integers after sorting the list in descending order, and compute their sum. If K is greater than the number of elements in the list, Bob should sum all elements in the list. -----Input----- The first line of input contains a single integer T (1 leq T leq 100), the number of test cases. The following lines contain two inputs for each test case: 1. An integer K (1 leq K leq 100), the number provided by Alice. 2. An integer N (1 leq N leq 100), the length of the list. 3. A line with N space-separated integers (1 leq text{integer} leq 100). -----Output----- For each test case, output a single line with the maximal sum of the first K integers after the list is rearranged in descending order. -----Examples----- Sample Input: 2 3 5 1 2 3 4 5 4 4 5 5 5 1 Sample Output: 12 16","solution":"def get_max_k_sum(test_cases): results = [] for k, n, arr in test_cases: arr.sort(reverse=True) results.append(sum(arr[:k])) return results"},{"question":"You are organizing a coding competition and need to ensure the uniqueness of submitted entries. Define a function that checks if all words in a given sentence are unique. Input will be a non-empty string of words separated by single spaces, with no punctuation. If all words in the string are unique, return: ```python \\"Unique Entry!\\" ``` Otherwise, return: ```python \\"Duplicate Found!\\" ``` Note: Words are case-sensitive, meaning \\"Hello\\" and \\"hello\\" are considered different words. Also, random tests may provide nonsensical sentences as input. Here is an example of a random test: ```python \\"create compete create code\\" ``` Additionally, consider the following example cases: Example 1: ```python input: \\"code solve innovate compete\\" output: \\"Unique Entry!\\" ``` Example 2: ```python input: \\"compete win win solve\\" output: \\"Duplicate Found!\\" ```","solution":"def check_unique_entry(sentence): Checks if all words in a given sentence are unique. Parameters: sentence (str): A string of words separated by single spaces. Returns: str: \\"Unique Entry!\\" if all words are unique, \\"Duplicate Found!\\" otherwise. words = sentence.split() unique_words = set(words) if len(words) == len(unique_words): return \\"Unique Entry!\\" else: return \\"Duplicate Found!\\""},{"question":"Write a program that helps organize a library catalog system. The library has millions of books, but to simplify, you need to handle a specific task related to book identification numbers and book titles. The system will process a list of book entries. Each book entry consists of a unique book identification number (ID) and a book title. The ID is a string that always includes numerical digits, followed by a series of uppercase alphabetical characters. Each book title is a non-empty string that may include spaces, but no other special characters. The task is to filter and format the entries based on the following conditions: 1. Output each entry in the format: `Title: <title>, ID: <ID>`. 2. Filter out any books where the ID contains fewer than 3 digits. 3. All book titles should be converted to title case (first letter of each word capitalized). Input A sequence of multiple book entries. Each book entry contains a book ID and a book title separated by a comma. The end of the input is indicated by a single line that reads \\"END\\". Output Output each valid book entry in the required format. If no valid books are found, output \\"No valid entries.\\" Example Input 123ABC, the great gatsby 45D, moby dick 789XYZ, to kill a mockingbird BR34, pride and prejudice END Output Title: The Great Gatsby, ID: 123ABC Title: To Kill A Mockingbird, ID: 789XYZ","solution":"def process_library_entries(entries): Processes a list of strings where each string represents a book entry in the format \'ID, Title\'. Filters out entries where ID contains fewer than 3 digits and formats the valid entries appropriately. Args: entries (list): A list of book entries. Returns: list: A list of valid formatted book entries. result = [] for entry in entries: if entry == \\"END\\": break id, title = entry.split(\\", \\") if sum(c.isdigit() for c in id) >= 3: formatted_entry = f\\"Title: {title.title()}, ID: {id}\\" result.append(formatted_entry) if not result: return [\\"No valid entries\\"] return result"},{"question":"You are given a square grid of size n times n, where n is an odd integer. Each cell in the grid contains a unique integer from 1 to n^2. Your task is to create a magic square using the given grid. In a magic square, the sum of the integers in each row, each column, and the two main diagonals are equal. Using the grid, rearrange the numbers (by swapping pairs of numbers) to achieve a magic square. Output \\"YES\\" if it is possible to convert the grid into a magic square using the given operations, and \\"NO\\" otherwise. -----Input----- The first line contains an integer t (1 leq t leq 1000) — the number of test cases. Each of the following lines describes a test case. For each test case: - The first line contains an integer n (3 leq n leq 25), which is an odd integer representing the size of the grid. - The next n lines contain n integers each, representing the grid. -----Output----- For each test case, output \\"YES\\" if it is possible to rearrange the grid into a magic square by swapping pairs of numbers, and \\"NO\\" otherwise. -----Examples----- Input 2 3 8 1 6 3 5 7 4 9 2 5 17 24 1 8 15 23 5 7 14 16 4 6 13 20 22 10 12 19 21 3 11 18 25 2 9 3 1 2 3 4 5 6 7 8 9 Output YES NO NO -----Note----- In the first test case, the grid already represents a magic square. In the second test case, the rearrangement needed to create a magic square is possible with the given size and values. In the third test case, it is impossible to create a magic square with the given arrangement without changing the values.","solution":"def is_magic_square(grid, n): magic_sum = n * (n**2 + 1) // 2 row_sums = [sum(row) for row in grid] col_sums = [sum(grid[i][j] for i in range(n)) for j in range(n)] diag1_sum = sum(grid[i][i] for i in range(n)) diag2_sum = sum(grid[i][n-i-1] for i in range(n)) all_sums = row_sums + col_sums + [diag1_sum, diag2_sum] if all(x == magic_sum for x in all_sums): return True else: return False def can_form_magic_square(grids): results = [] for grid, n in grids: if is_magic_square(grid, n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage def process_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) index = 1 grids = [] for _ in range(t): n = int(lines[index]) grid = [list(map(int, lines[index + i + 1].split())) for i in range(n)] grids.append((grid, n)) index += n + 1 return grids def main(input_str): grids = process_input(input_str) results = can_form_magic_square(grids) return \\"n\\".join(results)"},{"question":"A company is organizing a conference and has invited N speakers. Each speaker has a predefined start time and end time for their speech. The company wants to arrange the timetable such that there is no overlap between any two speakers. If it\'s not possible to arrange the speeches without overlap, the company wants to know the minimum number of additional rooms required to accommodate all speakers. Given the start and end times of each speaker\'s speech, determine the minimum number of additional rooms required. Input Format The first line contains an integer, N, the number of speakers. The next N lines each contain two integers, start_i and end_i, indicating the start and end times of the speech for the i-th speaker. Constraints 1 leq N leq 10^5 0 leq start_i < end_i leq 10^9 Output Format Print a single integer, the minimum number of additional rooms required. Sample Input 5 1 3 2 6 8 10 9 11 5 7 Sample Output 1 Explanation Speeches with time frames (1,3) and (2,6) overlap, and speeches (8,10) and (9,11) overlap. One additional room will be sufficient to accommodate all the speakers without overlaps. In other words, we need an additional room during intervals (1,6) and (8,11). Hence, the minimum number of additional rooms required is 1.","solution":"def min_additional_rooms(speakers): Determine the minimum number of additional rooms required to accommodate all speakers without overlap. Parameters: speakers (list of tuple): List containing tuples, each with start and end times of speeches Returns: int: Minimum number of additional rooms required if not speakers: return 0 # Separate out start and end times start_times = sorted([s[0] for s in speakers]) end_times = sorted([s[1] for s in speakers]) start_pointer, end_pointer = 0, 0 used_rooms = 0 max_rooms = 0 while start_pointer < len(speakers): if start_times[start_pointer] < end_times[end_pointer]: used_rooms += 1 start_pointer += 1 else: used_rooms -= 1 end_pointer += 1 max_rooms = max(max_rooms, used_rooms) return max_rooms - 1"},{"question":"Fiona is organizing a charity walk to raise funds for a local animal shelter. Fiona wants to create walking pairs such that each pair has a combined target distance to walk. Each participant in the walk has a target distance they aim to walk. Fiona wants to maximize the number of pairs she can form where the sum of distances in each pair does not exceed a specified maximum distance D. Fiona wants you to help her determine the maximum number of such pairs that can be formed. -----Input----- The first line contains two integers n and D (1 ≤ n ≤ 2·10^5, 1 ≤ D ≤ 10^9) — the number of participants, and maximum target distance for each pair. The second line contains n integers ai (1 ≤ ai ≤ D) — the target distance each participant aims to walk. -----Output----- Print the maximum number of pairs that can be formed such that the sum of distances in each pair does not exceed D. -----Examples----- Input 5 10 2 3 5 8 1 Output 2 Input 4 5 1 2 3 4 Output 2 -----Note----- In the first test sample, the pairs are (2, 3) and (1, 5). In the second test sample, the pairs are (1, 4) and (2, 3).","solution":"def max_pairs(n, D, distances): Returns the maximum number of pairs such that the sum of distances in each pair does not exceed D. distances.sort() i, j = 0, n - 1 pairs = 0 while i < j: if distances[i] + distances[j] <= D: pairs += 1 i += 1 j -= 1 else: j -= 1 return pairs"},{"question":"Alice is planning a road trip and wants to ensure her car has sufficient fuel to reach the next city. Given the total distance to the next city and the fuel efficiency of her car, write a program to determine if she needs to refuel and, if so, how many liters of fuel she should buy to safely reach her destination. ------ Input Format ------ - The first line of input will contain an integer D, the total distance to the next city in kilometers. - The second line of input contains an integer E, the fuel efficiency of the car in kilometers per liter. - The third line of input contains an integer F, the current amount of fuel in the tank in liters. ------ Output Format ------ Print a single line containing the minimum additional liters of fuel Alice should buy to ensure she can reach the next city without running out of fuel. If she already has enough fuel to cover the distance, print 0. You may assume the car needs a minimum of 0 liters of additional fuel and the values of distance, efficiency, and current fuel will be such that Alice can always refuel to cover the distance. ------ Constraints ------ 1 ≤ D ≤ 10^{6} 1 ≤ E ≤ 10^{3} 0 ≤ F ≤ 10^{5} ------ Sample Input 1 ------ 500 20 10 ------ Sample Output 1 ------ 15 ------ explanation 1 ------ Alice needs to cover 500 kilometers. With a fuel efficiency of 20 km/l, she needs a total of 25 liters of fuel. Since she already has 10 liters, she needs to buy 15 more liters. ----- Sample Input 2 ------ 300 15 30 ----- Sample Output 2 ------ 0 ----- explanation 2 ------ Alice\'s car needs 20 liters of fuel to travel 300 kilometers at 15 km/l efficiency. Since she already has 30 liters, she does not need to buy any more fuel.","solution":"def calculate_fuel_needed(D, E, F): Returns the minimum additional liters of fuel Alice should buy to ensure she can reach her destination. Parameters: D (int): The total distance to the next city in kilometers. E (int): The fuel efficiency of the car in kilometers per liter. F (int): The current amount of fuel in the tank in liters. Returns: int: The amount of additional fuel needed, or 0 if she already has enough. # Calculate the total fuel needed to cover the distance total_fuel_needed = D / E # Calculate the additional fuel required additional_fuel_needed = total_fuel_needed - F # If additional fuel needed is less than or equal to 0, return 0 if additional_fuel_needed <= 0: return 0 # Otherwise, return the additional fuel needed return int(additional_fuel_needed)"},{"question":"You are given a list of integers representing the population of towns in a province. The government plans to reform the administration by creating new districts. Each district should have a balanced population. A district is formed by choosing a contiguous sublist of towns with their populations summing up to zero. You need to determine the maximum length of such a sublist. Input The first line of input contains T, the number of test cases. The first line of each test case contains N, the number of towns, followed by a list of N integers representing the population of each town. Output For each test case, output the maximum length of a sublist with a population sum of zero. If no such sublist exists, output 0. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 -1000 ≤ population of each town ≤ 1000 Example Input: 2 5 1 -1 2 -2 3 4 1 2 -3 3 Output: 4 3 Explanation: In the first test case, the sublist [1, -1, 2, -2] has a sum of 0 and length 4. In the second test case, the sublist [1, 2, -3] has a sum of 0 and length 3.","solution":"def max_length_zero_sum_sublist(t, cases): results = [] for case in cases: n, towns = case sum_index_map = {} max_len = 0 current_sum = 0 for i in range(n): current_sum += towns[i] if current_sum == 0: max_len = i + 1 elif current_sum in sum_index_map: max_len = max(max_len, i - sum_index_map[current_sum]) else: sum_index_map[current_sum] = i results.append(max_len) return results"},{"question":"You are tasked with developing a simulation for a parking lot system. A parking lot has n rows and m columns of parking spaces, each of which can be occupied by a car or left empty. Initially, all parking spaces are empty. Your program needs to support the following types of operations to simulate arrivals and departures of cars in the parking lot: 1. Car arrival: A car arrives in a specified parking space if it is empty. 2. Car departure: A car departs from a specified parking space if it is occupied. Your task is to output the state of the parking lot after all the operations have been performed. # Input: The first line contains three integers n, m, and k (1 ≤ n, m ≤ 5000, n·m ≤ 100000, 1 ≤ k ≤ 100000) — the dimensions of the parking lot and the number of operations. Each of the next k lines contains a description of one operation. An operation is described by three integers: - If the first integer is 1, it means a car is arriving to the space at row r and column c (1 ≤ r ≤ n, 1 ≤ c ≤ m). - If the first integer is 2, it means a car is departing from the space at row r and column c (1 ≤ r ≤ n, 1 ≤ c ≤ m). # Output: Print n lines with m integers each, representing the final state of the parking lot. A 0 indicates an empty space, and a 1 indicates an occupied space. # Example: Input: ``` 3 3 5 1 1 1 1 2 3 2 1 1 1 2 3 2 2 3 ``` Output: ``` 0 0 0 0 0 0 0 0 0 ``` # Explanation: - The first operation (1 1 1) parks a car in row 1, column 1. - The second operation (1 2 3) parks a car in row 2, column 3. - The third operation (2 1 1) removes the car from row 1, column 1. - The fourth operation (1 2 3) parks a car in row 2, column 3 again. - The fifth operation (2 2 3) removes the car from row 2, column 3.","solution":"def simulate_parking_lot(n, m, k, operations): # Initialize the parking lot as an n x m grid of zeros (empty spaces) parking_lot = [[0] * m for _ in range(n)] for operation in operations: op_type, r, c = operation # Adjust indices to zero-based r -= 1 c -= 1 if op_type == 1: # Car arrival if parking_lot[r][c] == 0: parking_lot[r][c] = 1 elif op_type == 2: # Car departure if parking_lot[r][c] == 1: parking_lot[r][c] = 0 return parking_lot"},{"question":"Mia loves playing with her collection of cards. Each card has a lowercase letter printed on it, and she can use these cards to form words. Mia is interested in knowing how many distinct words she can form using exactly m cards at a time. A word is considered distinct if it has a different sequence of letters compared to other words. For example, \\"abc\\" and \\"acb\\" are considered distinct, but \\"abc\\" and \\"abc\\" are not. Write a program that takes as input the number of cards Mia has, the letters on each card, and the number of cards used to form each word, and then outputs the number of distinct words she can form. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 26, 1 ≤ m ≤ n) — the number of cards and the number of cards used to form each word, respectively. The second line contains n lowercase letters separated by spaces — the letters on the n cards. -----Output----- Print a single integer — the number of distinct words Mia can form using exactly m cards. -----Example----- Input 3 2 a b c Output 6 Input 4 3 a b b c Output 12 -----Note----- In the first test case, Mia can form the following words using 2 cards at a time: \\"ab\\", \\"ac\\", \\"ba\\", \\"bc\\", \\"ca\\", and \\"cb\\". In the second test case, Mia can form the following words using 3 cards at a time: \\"abb\\", \\"abc\\", \\"acb\\", \\"bab\\", \\"bac\\", \\"bba\\", \\"bbc\\", \\"bcb\\", \\"bca\\", \\"cab\\", \\"cba\\", and \\"cbc\\".","solution":"from itertools import permutations def count_distinct_words(n, m, letters): Count the number of distinct words Mia can form using exactly m cards at a time. Arguments: n -- the number of cards m -- the number of cards used to form each word letters -- list containing the letters on the n cards Returns: The number of distinct words that can be formed. # Get all permutations of the letters of length m perms = set(permutations(letters, m)) # Return the count of unique permutations return len(perms) # Example usage: # n = 3, m = 2, letters = [\'a\', \'b\', \'c\'] # print(count_distinct_words(n, m, letters)) # Output should be 6"},{"question":"A robot can move in a 2-dimensional grid starting from the origin point (0, 0). The robot can receive a sequence of instructions, each of which tells it to move one unit in one of the four cardinal directions: north (\'N\'), south (\'S\'), east (\'E\'), or west (\'W\'). You need to write a program to determine the robot\'s final position after executing all the given moves. The final position is expressed as a pair of integers (x, y), where x is the position along the horizontal axis and y is the position along the vertical axis. Input The input consists of one string containing the sequence of instructions. Each instruction is a single character (\'N\', \'S\', \'E\', or \'W\') and the length of the string is between 1 and 100 inclusive. Output Print two integers x and y separated by a single space, representing the final position of the robot. Examples Input NNEE Output 2 2 Input SSWW Output -2 -2","solution":"def final_robot_position(moves): Determines the robot\'s final position after executing all the given moves. Parameters: moves (str): A string containing the sequence of instructions (\'N\', \'S\', \'E\', \'W\'). Returns: tuple: A pair of integers (x, y) representing the final position of the robot. x, y = 0, 0 for move in moves: if move == \'N\': y += 1 elif move == \'S\': y -= 1 elif move == \'E\': x += 1 elif move == \'W\': x -= 1 return x, y"},{"question":"Professor Oak is conducting a Pokémon tournament, and he wants to make sure the battles are fair. Each Pokémon has an index (1-based) representing its strength, and Professor Oak wants to match them up in a way that every Pokémon battles against another Pokémon of the same strength. However, Professor Oak has a special rule for the tournament: - The tournament is held in rounds. In each round, only contiguous subarrays of Pokémon can be chosen. For an array of Pokémon [P1, P2, ..., Pn], a contiguous subarray is any array [Pi, Pi+1, ..., Pj] where 1 ≤ i ≤ j ≤ n. - A valid grouping is when every Pokémon in the subarray has the same strength. Given the initial arrangement of Pokémon and their strengths, please determine the minimum number of rounds needed to group all the Pokémon according to Professor Oak\'s rules. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). Description of the test cases follows. The first line of each test case contains an integer n (1 ≤ n ≤ 2 ∙ 10^5) — the number of Pokémon. The second line of each test case contains n integers ai (1 ≤ ai ≤ 100) — the strengths of the Pokémon. It is guaranteed that the sum of n over all test cases does not exceed 2 ∙ 10^5. -----Output----- For each test case, output one integer: the minimum number of rounds needed to group all the Pokémon according to Professor Oak\'s special rule. -----Example----- Input 2 5 1 2 1 2 1 7 3 3 3 3 2 2 2 Output 5 2 -----Note----- In the first test case, each Pokémon has to be grouped separately as no two contiguous subarrays will satisfy the condition other than single Pokémon. Hence, the minimum number of rounds is 5. In the second test case, you can have one round with the first four Pokémon, [3, 3, 3, 3] and another round with the last three Pokémon, [2, 2, 2]. Hence, the minimum number of rounds is 2.","solution":"def min_rounds(num_cases, cases): results = [] for num_pokemon, pokemons in cases: rounds = 1 for i in range(1, num_pokemon): if pokemons[i] != pokemons[i-1]: rounds += 1 results.append(rounds) return results"},{"question":"Given a list of integers, write a function that returns the count of unique triplets `(a, b, c)` in the list such that `a + b + c = target` and each of the three numbers belong to separate indices. # Function Signature ```python def count_triplets(nums: List[int], target: int) -> int: ``` # Input - `nums` : List of integers where length of list ranges. - `target`: An integer representing the target sum. # Output Return the number of unique triplets `(a, b, c)` where `a + b + c = target`. # Example ```python nums = [1, 2, 3, 4, 5] target = 9 # Explanation: The unique triplets that sum to 9 are (1, 3, 5) and (2, 3, 4). # Hence the function should return 2. print(count_triplets(nums, target)) # Output: 2 ``` # Note - A triplet consists of three numbers from the list at different indices. - The order of elements in the triplet (i.e., whether it is (a, b, c) or (c, b, a)) does not matter and counts as one triplet. - There might be multiple correct solutions for the same list and target sum.","solution":"from typing import List def count_triplets(nums: List[int], target: int) -> int: nums.sort() # Sort the list to make the implementation easier n = len(nums) count = 0 for i in range(n - 2): if i > 0 and nums[i] == nums[i-1]: # Skip duplicates to avoid counting same triplet continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: count += 1 left += 1 right -= 1 # Skip duplicates while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif current_sum < target: left += 1 else: right -= 1 return count"},{"question":"Given an array `a` of length `n` and an integer `x`, determine the minimum number of operations required to make the sum of the array equal to `x`. You can select any one of the following operations and perform it any number of times on an array element: - Increment the array element by 1. - Decrement the array element by 1. # Example 1: Input: ``` N = 3 array = {1, 2, 3} X = 5 ``` Output: ``` 1 ``` Explanation: Decrement array[2] by 1. New array becomes {1, 1, 3} whose sum is 5. Therefore, only 1 step is required. # Example 2: Input: ``` N = 4 array = {1, 2, 3, 4} X = 10 ``` Output: ``` 0 ``` Explanation: The sum of the array is already 10. Therefore, 0 steps are required. # Your Task: You don\'t need to read input or print anything. Complete the function `minOperations()` that takes `n`, `array a`, and `x` as input parameters and returns the minimum number of operations required. # Expected Time Complexity: O(n) # Expected Space Complexity: O(1) # Constraints: 1 <= n <= 10^4 1 <= a[i] <= 10^4 0 <= x <= 10^7","solution":"def min_operations(n, array, x): Determines the minimum number of operations required to make the sum of the array equal to x. sum_array = sum(array) # Calculate the difference between the current sum and the desired value x difference = abs(sum_array - x) return difference"},{"question":"Write a function that takes an integer array `arr` and a target integer `target`, and returns the number of unique pairs `(i, j)` such that `i < j` and `arr[i] + arr[j] == target`. Input Format: The first line contains an integer `n`, the size of the array. The second line contains `n` space-separated integers representing the elements of the array `arr`. The third line contains a single integer `target`. Output Format: Print a single integer, the number of unique pairs that sum up to `target`. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9 SAMPLE INPUT 4 1 2 3 4 5 SAMPLE OUTPUT 2 Explanation: The pairs (1, 4) and (2, 3) sum up to 5. Therefore, there are 2 unique pairs that satisfy the condition.","solution":"def count_unique_pairs(arr, target): Returns the number of unique pairs (i, j) such that i < j and arr[i] + arr[j] == target. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return len(pairs)"},{"question":"You are given an array of integers where each integer represents the altitude of a point on a mountain range from left to right. You need to find the highest peak in the mountain range. A peak is defined as an element that is greater than both of its neighboring elements. If there are multiple peaks with the same height, you need to return the position of the first one. Input Format First line contains an integer N, the number of elements in the array. Second line contains N space-separated integers, representing the altitude of each point. Output Format Print the position (0-indexed) of the highest peak in the mountain range. If no peak is present, return -1. Constraints 1 ≤ N ≤ 10^5 1 ≤ altitude[i] ≤ 10^9 SAMPLE INPUT 8 2 4 7 5 1 6 3 2 SAMPLE OUTPUT 2 Explanation In this example, there are two peaks: 7 at position 2 and 6 at position 5. The highest peak is 7, so the output is 2.","solution":"def find_highest_peak(n, altitudes): Finds the highest peak in the given mountain range. :param n: Number of elements in the array (int) :param altitudes: List of altitudes (list of int) :return: Position of the highest peak (int) if n < 3: return -1 # Not enough points to form a peak highest_peak_pos = -1 highest_peak_height = -1 for i in range(1, n - 1): if altitudes[i] > altitudes[i - 1] and altitudes[i] > altitudes[i + 1]: if altitudes[i] > highest_peak_height: highest_peak_height = altitudes[i] highest_peak_pos = i return highest_peak_pos"},{"question":"Write a function that takes an array of integers and returns an array of integers that are the cumulative sums of the original array. The cumulative sum of an array is another array where the `i-th` element is the sum of the elements from the beginning of the array up to and including the `i-th` element. Examples: ```python cumulative_sum([1, 2, 3]) => returns [1, 3, 6] cumulative_sum([4, -1, 2, 5]) => returns [4, 3, 5, 10] cumulative_sum([0, 0, 0]) => returns [0, 0, 0] cumulative_sum([1, 1, 1, 1, 1]) => returns [1, 2, 3, 4, 5] ```","solution":"def cumulative_sum(arr): Returns an array where the i-th element is the sum of the elements from the beginning of the array up to and including the i-th element. result = [] total = 0 for num in arr: total += num result.append(total) return result"},{"question":"You are given an integer N representing the size of an array. Create a function that generates an array A of integers of length N such that: Each element in A is a distinct integer. No integer in the array A is equal to the index it appears at (1-based indexing). It can be proven that a solution always exists. If there are multiple solutions, you may return any of them. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first and only line of each test case contains a single integer N, denoting the size of the array A. ------ Output Format ------ - For each test case, print a single line containing N space-separated integers which represent the array A satisfying the above conditions. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 ------ Sample Input 1 ------ 3 2 3 4 ------ Sample Output 1 ------ 2 1 3 1 2 2 3 4 1 ------ Explanation 1 ------ - For the first test case, the array [2, 1] satisfies that no integer in the array is equal to the index it appears at. - For the second test case, the array [3, 1, 2] satisfies the conditions. - For the third test case, the array [2, 3, 4, 1] satisfies the conditions. In all cases, no element is equal to its 1-based index.","solution":"def generate_array(N): Generates an array of length N such that: - Each element is a distinct integer. - No integer is equal to its 1-based index. Args: N: int, the size of the generated array. Returns: List[int]: The generated array. A = list(range(1, N + 1)) if N == 1: return [-1] # There is no valid array for N=1 as per given constraints. # Swap the first two elements if N > 1 to ensure the no-element-is-in-its-own-place condition A[0], A[1] = A[1], A[0] for i in range(2, N): if A[i] == i + 1: # If element in place i (0-based) is i+1, swap with previous element A[i], A[i-1] = A[i-1], A[i] return A def main(): Main function to read input and produce output as specified by the problem statement. import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) test_cases = [int(data[i]) for i in range(1, T+1)] results = [] for N in test_cases: results.append(generate_array(N)) for result in results: print(\\" \\".join(map(str, result))) if __name__ == \\"__main__\\": main()"},{"question":"A large tech warehouse keeps track of its inventory using a database. Each item in the database has an associated product ID which is a unique string of lowercase letters. The warehouse has recently experienced some reorganization, and a programmer has mistakenly merged two lists of inventory items into a single list. Now, some items might appear more than once in the combined list and the warehouse needs to be aware of which items have duplicates. Write a program that will identify all the product IDs that appear more than once in the merged inventory list compared to the original lists. Input First line contains an integer T, the number of test cases. Each test case contains: - An integer N, the number of items in the original inventory list. - An integer M, the number of items in the merged inventory list. - A list of N strings representing the original product IDs. - A list of M strings representing the merged inventory product IDs. Output For each test case, print all the product IDs that appear more than once in the merged list in alphabetical order. If no duplicate product IDs are found, print \\"No duplicates\\". Constraints 1 ≤ T ≤ 10 1 ≤ N, M ≤ 10^5 1 ≤ length of any product ID ≤ 20 SAMPLE INPUT 2 5 8 apple banana cherry date fig apple cherry date cherry banana grape apple fig 3 4 peach plum pear peach peach plum pear SAMPLE OUTPUT apple cherry peach Explanation In the first test case, product IDs \\"apple\\" and \\"cherry\\" appear more than once in the merged list. In the second test case, \\"peach\\" appears more than once in the merged list. The program should identify and list these duplicates.","solution":"def find_duplicates(test_cases): results = [] for case in test_cases: N, M, original_list, merged_list = case item_count = {} for item in merged_list: if item in item_count: item_count[item] += 1 else: item_count[item] = 1 duplicates = sorted([item for item, count in item_count.items() if count > 1]) if duplicates: results.append(\' \'.join(duplicates)) else: results.append(\'No duplicates\') return results"},{"question":"Given a string representing a large integer, the task is to format it with commas to separate every three digits from the right. Write a function `formatWithCommas(s: str) -> str` that takes a string `s` representing a non-negative integer and returns the formatted string with commas. **Examples:** - Input: `\\"123\\"` Output: `\\"123\\"` - Input: `\\"1234\\"` Output: `\\"1,234\\"` - Input: `\\"123456789\\"` Output: `\\"123,456,789\\"` - Input: `\\"0\\"` Output: `\\"0\\"` **Notes:** 1. The length of the input string `s` will be between 1 and 20. 2. The input string will not contain any leading zeros except when the input is `\\"0\\"`. 3. The function should handle large integers seamlessly by treating them as strings.","solution":"def formatWithCommas(s: str) -> str: Formats a string representing a non-negative integer with commas. Args: s (str): The input string representing a non-negative integer. Returns: str: The formatted string with commas. # Reversing the string for easy insertion of commas every 3 digits reversed_s = s[::-1] # Joining groups of 3 characters with \',\' and reversing it back to the original order formatted_s = \',\'.join(reversed_s[i:i+3] for i in range(0, len(reversed_s), 3)) return formatted_s[::-1]"},{"question":"Given a string s, find the minimum number of steps required to make s a palindrome. In one step, you can remove one character from the string. A palindrome is a string that reads the same backward as forward. For example, the minimum number of steps to transform \\"babb\\" into a palindrome are: - Remove the character \'a\' to get \\"bbb\\". - Remove the character \'b\' twice to get \\"b\\". Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains a string s (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. Output For each test case, output a single integer — the minimum number of steps required to make the string a palindrome. Examples Input 3 ab racecar xzyxx Output 1 0 2 Note In the first example, the string \\"ab\\" can be transformed into \\"a\\" or \\"b\\", both of which are palindromes, with one removal. In the second example, the string \\"racecar\\" is already a palindrome, so no steps are required. In the third example, removing \'z\' from \\"xzyxx\\" results in \\"xyxx\\", which still isn\'t a palindrome, requiring one more removal. Therefore, the total steps required are 2.","solution":"def min_steps_to_palindrome(s): def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n+1): for i in range(n-cl+1): j = i+cl-1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1] longest_palindromic_length = longest_palindromic_subsequence(s) return len(s) - longest_palindromic_length def solve(t, test_cases): results = [] for s in test_cases: results.append(min_steps_to_palindrome(s)) return results"},{"question":"Alice loves solving puzzles involving strings and sequences. One day, Alice encountered a string puzzle and needs your help to solve it. The puzzle is as follows: Given a string \\"s\\" consisting of only lowercase English letters, Alice needs to create a new string \\"t\\" by reordering the letters of \\"s\\" such that no two adjacent characters in \\"t\\" are the same. If there are multiple valid strings \\"t\\", Alice just needs to produce any one of them. If it\'s not possible to create such a string, return \\"IMPOSSIBLE\\". Input The first line contains a single integer \\"T\\" (1 ≤ T ≤ 100), the number of test cases. The next \\"T\\" lines each contain a single string \\"s\\" (1 ≤ |s| ≤ 1000). Output For each test case, print a single line containing the resultant string \\"t\\" or \\"IMPOSSIBLE\\". Examples Input ``` 2 aab aaab ``` Output ``` aba IMPOSSIBLE ``` Note In the first test case, you can create the string \\"aba\\" where no adjacent characters are the same. In the second test case, it is impossible to create such a string since there are not enough different letters to avoid adjacent characters being the same.","solution":"from collections import Counter import heapq def reorganize_string(s: str) -> str: Reorganizes the string s such that no two adjacent characters are the same. If it\'s not possible, returns \\"IMPOSSIBLE\\". # Counter to count the frequency of each character count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] # Max heap based on the frequency of the characters heapq.heapify(max_heap) previous_char = None previous_freq = 0 result = [] while max_heap or previous_freq < 0: if not max_heap: return \\"IMPOSSIBLE\\" freq, char = heapq.heappop(max_heap) result.append(char) # If there was a previously used character, push it back to heap if previous_freq < 0: heapq.heappush(max_heap, (previous_freq, previous_char)) previous_char = char previous_freq = freq + 1 # Since we are negating frequencies return \\"\\".join(result) def solve(T, test_cases): results = [] for s in test_cases: result = reorganize_string(s) results.append(result) return results"},{"question":"**Problem: Longest Substring with At Most K Distinct Characters** Given a string s and an integer k, find the length of the longest substring that contains at most k distinct characters. # Input - The first line contains a string s where 1 ≤ |s| ≤ 200000. The string consists of English letters (both lowercase and uppercase). - The second line contains an integer k (1 ≤ k ≤ 26). # Output - Output a single integer, representing the length of the longest substring that contains at most k distinct characters. # Example Input eceba 2 Output 3 Input aa 1 Output 2 # Explanation In the first example, the longest substring with at most 2 distinct characters is \\"ece\\", which has a length of 3. In the second example, the entire string \\"aa\\" is the longest substring containing at most 1 distinct character, with a length of 2. # Note - You are allowed to use any algorithm or data structure to efficiently solve this problem. # Hints - Consider using a sliding window technique to maintain the current substring and a hash map to keep count of the distinct characters within the window.","solution":"def length_of_longest_substring_k_distinct(s, k): Given a string s and an integer k, finds the length of the longest substring that contains at most k distinct characters. from collections import defaultdict n = len(s) if n * k == 0: return 0 left, right = 0, 0 max_len = 1 char_map = defaultdict(int) while right < n: char_map[s[right]] += 1 right += 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left) return max_len"},{"question":"Given a list of integers, write a function that returns the list with duplicates removed while preserving the original order of elements. Example 1: Input: [1, 2, 2, 3, 4, 4, 5] Output: [1, 2, 3, 4, 5] Example 2: Input: [4, 5, 4, 6, 7, 6, 8] Output: [4, 5, 6, 7, 8]","solution":"def remove_duplicates(lst): Returns a list with duplicates removed while preserving the original order of elements. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"You are given two strings S1 and S2, both consisting of lowercase alphabetical characters. Your task is to determine the longest common substring that appears in both S1 and S2. A substring is defined as a contiguous sequence of characters within a string. Input format The first line contains the string S1. The second line contains the string S2. Output format Print the longest common substring. If there are multiple longest common substrings with the same length, print the one that appears first in S1. Constraints 1 ≤ length of S1, S2 ≤ 10^3 SAMPLE INPUT abcdef zcdemf SAMPLE OUTPUT cde","solution":"def longest_common_substring(S1, S2): Returns the longest common substring of S1 and S2. m, n = len(S1), len(S2) # Creating a 2D table to store lengths of longest common suffixes lcsuff = [[0] * (n + 1) for i in range(m + 1)] longest = 0 end_index_S1 = 0 for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: lcsuff[i][j] = 0 elif S1[i - 1] == S2[j - 1]: lcsuff[i][j] = lcsuff[i - 1][j - 1] + 1 if lcsuff[i][j] > longest: longest = lcsuff[i][j] end_index_S1 = i - 1 else: lcsuff[i][j] = 0 # The longest substring is from S1[end_index_S1 - longest + 1] to S1[end_index_S1] return S1[end_index_S1 - longest + 1: end_index_S1 + 1]"},{"question":"You are given a series of activities, where each activity is characterized by a start time and an end time. Your objective is to select the maximum number of non-overlapping activities. An activity `i` starts at time `s_i` and ends at time `e_i` (1 leq s_i < e_i leq 10^5). If you select an activity `i`, you cannot select any other activity `j` that overlaps with `i`. Given the start and end times of `N` activities, determine the maximum number of activities you can attend. -----Input----- The first line contains an integer `N` (1 leq N leq 10^5), the number of activities. Each of the next `N` lines contains two integers `s_i` and `e_i` (1 leq s_i < e_i leq 10^5), representing the start and end times of the activities. -----Output----- Print the maximum number of non-overlapping activities you can attend. -----Examples----- Input 3 1 2 3 4 0 6 Output 2 Input 4 1 3 2 4 3 5 6 7 Output 3 Input 5 7 9 0 1 2 4 1 3 3 5 Output 4 -----Note----- In the first example, you can attend the activities with time intervals [1, 2] and [3, 4]. Therefore, the maximum number of non-overlapping activities you can attend is 2. In the second example, the optimal set of activities to attend are those with time intervals [1, 3], [3, 5], and [6, 7], giving a total of 3 non-overlapping activities. In the third example, an optimal set of activities would be those with time intervals [0, 1], [2, 4], [3, 5], and [7, 9], allowing for 4 non-overlapping activities.","solution":"def max_non_overlapping_activities(N, activities): # Sort activities by their end time activities.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping activities count = 0 last_end_time = 0 # Iterate through the sorted activities for start, end in activities: if start >= last_end_time: count += 1 # Select the activity last_end_time = end # Update the end time of the last selected activity return count"},{"question":"You are given an array b of m integers. In one operation you can invert any single integer (i.e., change a positive integer to its negative counterpart or vice versa). Let\'s define the balance of the array as the absolute difference between the sum of the positive integers and the absolute sum of the negative integers. Your task is to find the minimal balance of the array b if you are allowed to make at most l operations. For example, for array [3, -1, 2, -3], the balance is |3 + 2 - (1 + 3)| = |5 - 4| = 1. -----Input----- The input consists of multiple test cases. The first line contains a single integer u (1 le u le 10^3) — the number of test cases. Description of the test cases follows. The first line of each test case contains two integers m and l (1 le m le 100 and 0 le l le 100) — the length of the array b and the number of operations that you are allowed to make. The second line of each test case contains m integers b_1, b_2, ldots, b_m (-10^4 le b_i le 10^4) — the elements of the array b. -----Output----- For each test case output a single integer — the minimal balance that it is possible to achieve by making at most l operations. -----Examples----- Input 3 4 1 3 -1 2 -3 3 2 -5 6 -7 5 0 4 -4 3 -3 1 Output 0 0 1 -----Note----- In the first test case you can invert -1 to 1. After that the array b is [3, 1, 2, -3], so the balance is |3 + 1 + 2 - 3| = |6 - 3| = 3. In the second test case you can invert -5 to 5 and -7 to 7. After that the array b is [5, 6, 7], so the balance is |5 + 6 + 7| = 18. In the third test case no operations are needed since the number of allowed operations is zero. Therefore, the balance remains |4 + 3 + 1 - (4 + 3)| = |8 - 7| = 1.","solution":"def minimal_balance(u, test_cases): results = [] for i in range(u): m, l = test_cases[i * 2] b = test_cases[i * 2 + 1] pos_sum = sum([x for x in b if x > 0]) neg_sum = -sum([x for x in b if x < 0]) balance = abs(pos_sum - neg_sum) differences = [abs(abs(x) * 2) for x in b] differences.sort(reverse=True) for j in range(min(l, len(differences))): balance -= differences[j] results.append(max(balance, 0)) return results"},{"question":"Write a function that takes a list of strings and returns a list of all strings that are anagrams of another string in the list. An anagram of a string is another string that contains the same characters, only the order of characters can be different. Assume there are no duplicate strings in the list. The result list should be sorted in alphabetical order. Examples: ~~~if-not:python ``` [\\"abc\\", \\"bca\\", \\"cab\\", \\"xyz\\", \\"yzx\\", \\"pqr\\"] should return [\'abc\', \'bca\', \'cab\', \'xyz\', \'yzx\'] [\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"world\\"] should return [\'enlist\', \'listen\', \'silent\'] [\\"cat\\", \\"dog\\", \\"god\\", \\"tac\\", \\"act\\", \\"odg\\"] should return [\'act\', \'cat\', \'dog\', \'god\', \'odg\', \'tac\'] [\\"abcdef\\", \\"bcdefa\\", \\"gfedcb\\"] should return [\'abcdef\', \'bcdefa\'] ``` ~~~ ~~~if:python ``` [\\"abc\\", \\"bca\\", \\"cab\\", \\"xyz\\", \\"yzx\\", \\"pqr\\"] should return [\\"abc\\", \\"bca\\", \\"cab\\", \\"xyz\\", \\"yzx\\"] [\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"world\\"] should return [\\"enlist\\", \\"listen\\", \\"silent\\"] [\\"cat\\", \\"dog\\", \\"god\\", \\"tac\\", \\"act\\", \\"odg\\"] should return [\\"act\\", \\"cat\\", \\"dog\\", \\"god\\", \\"odg\\", \\"tac\\"] [\\"abcdef\\", \\"bcdefa\\", \\"gfedcb\\"] should return [\\"abcdef\\", \\"bcdefa\\"] ``` ~~~","solution":"def find_anagrams(words): Returns a list of all strings that are anagrams of another string in the list. The result list is sorted in alphabetical order. from collections import defaultdict anagram_map = defaultdict(list) for word in words: sorted_word = \'\'.join(sorted(word)) anagram_map[sorted_word].append(word) anagram_list = [] for key, group in anagram_map.items(): if len(group) > 1: anagram_list.extend(group) return sorted(anagram_list)"},{"question":"# Problem Statement: Valid Sudoku Solver Implement a function that determines if a given 9x9 Sudoku board is valid. A Sudoku board is valid if: 1. Each row contains the digits 1-9 without repetition. 2. Each column contains the digits 1-9 without repetition. 3. Each of the nine 3x3 sub-boxes of the grid contains the digits 1-9 without repetition. The Sudoku board could be partially filled, where an empty cell is denoted by the character \'.\'. # Example 1: Input: ``` board``` Output: True Explanation: The board represents a valid Sudoku state. # Example 2: Input: ``` board``` Output: False Explanation: The board is not valid because digit \'8\' appears twice in the top left 3x3 sub-box. # Your Task: You don\'t need to read or print anything. Your task is to complete the function `isValidSudoku(board)` which takes the 9x9 Sudoku board as input and returns `True` if the board is valid according to the rules mentioned above, otherwise returns `False`. # Expected Time Complexity: - O(1) since the board is always 9x9. # Expected Space Complexity: - O(1) additional space for storage. # Constraints: - The board `board[i][j]` is a character from the set {\'1\'-\'9\', \'.\'}.","solution":"def isValidSudoku(board): Returns True if the given 9x9 Sudoku board is valid, False otherwise. def is_valid_unit(unit): Helper function to check if a unit (row, column, or sub-box) is valid. A unit is valid if it contains no duplicates except for \\".\\". unit = [i for i in unit if i != \'.\'] return len(unit) == len(set(unit)) # Check rows for row in board: if not is_valid_unit(row): return False # Check columns for col in zip(*board): if not is_valid_unit(col): return False # Check 3x3 sub-boxes for i in range(0, 9, 3): for j in range(0, 9, 3): sub_box = [board[x][y] for x in range(i, i + 3) for y in range(j, j + 3)] if not is_valid_unit(sub_box): return False return True"},{"question":"Alice is a fan of palindromes and enjoys creating new ones. A string is a palindrome if it reads the same forwards and backwards. Alice has a string `s` and wants to know the minimum number of characters she needs to add to the string to make it a palindrome. Write a program that, given Alice\'s string, finds the minimum number of characters required to make the string a palindrome. Input The first line contains a single integer `n` (1 ≤ n ≤ 1000), the length of the string `s`. The second line contains the string `s` of length `n`, which consists of lowercase English letters. Output Print a single integer — the minimum number of characters Alice needs to add to make the string a palindrome. Examples Input 4 abcb Output 1 Input 3 abc Output 2 Note In the first test case, adding the character `a` at the end makes the string \\"abcba\\", which is a palindrome. In the second test case, adding the characters `b` and `a` at the beginning makes the string \\"abccba\\", which is a palindrome.","solution":"def min_chars_to_palindrome(n, s): Finds the minimum number of characters that need to be added to the string to make it a palindrome. def is_palindrome(st): return st == st[::-1] if is_palindrome(s): return 0 for i in range(n): if is_palindrome(s[i:]): return i return n - 1 # Test the solution with the provided examples print(min_chars_to_palindrome(4, \'abcb\')) # Output: 1 print(min_chars_to_palindrome(3, \'abc\')) # Output: 2"},{"question":"You are given an array A of N integers. You can perform the following operation on A, any number of times (possibly zero): * Choose an index i (1 ≦ i ≦ N-1), such that A[i] < A[i+1]. Then, swap the values of A[i] and A[i+1]. Among all arrays that can be obtained by applying this operation to the given array, find the lexicographically largest one. Constraints * 1≦N≦200,000 * -10^9 ≦ A[i] ≦ 10^9 (for 1 ≦ i ≦ N) Input The input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the lexicographically largest array that can be obtained. Examples Input 5 1 3 2 4 5 Output 5 4 3 2 1 Input 3 -1 0 2 Output 2 0 -1 Input 4 2 1 3 0 Output 3 2 1 0","solution":"def lexicographically_largest_array(A): A.sort(reverse=True) return A"},{"question":"Write a function that takes a list of numbers and a target sum as input and returns a pair of numbers from the list that add up to the target sum. If there are multiple pairs, return the pair with the smallest first element. If there is still a tie, return the pair with the smallest second element. If no such pair exists, return an empty list. **Example:** - Input: numbers = [1, 2, 3, 4, 5], target = 6 Output: [1, 5] - Input: numbers = [10, 20, -10, 3, -3, 4, 7], target = 7 Output: [-3, 10] - Input: numbers = [1, 2, 3, 8], target = 10 Output: [2, 8] - Input: numbers = [1, 2, 3], target = 7 Output: []","solution":"def find_pair_with_sum(numbers, target): Returns a pair of numbers from the list that add up to the target sum. If no such pair exists, returns an empty list. numbers.sort() pairs = [] number_set = set(numbers) for num in numbers: complement = target - num if complement in number_set: pairs.append((num, complement)) if pairs: smallest_pair = min(pairs, key=lambda x: (x[0], x[1])) return list(smallest_pair) else: return []"},{"question":"You are managing a fleet of delivery drones intended to carry packages. Each drone has a fuel limit, and each package delivery consumes a certain amount of fuel. Packages must be delivered in a specific order due to prioritization rules. You need to determine how many packages can be delivered before a drone runs out of fuel. Input * The first line contains an integer `N` representing the number of packages. * The second line contains an integer `F` representing the fuel limit of the drone. * The next line contains N integers representing the fuel consumption required for each package in the order they need to be delivered. Output * Output the maximum number of packages that can be delivered before the drone runs out of fuel. Constraints * 1 ≤ N ≤ 100,000 * 1 ≤ F ≤ 1,000,000 * 1 ≤ fuel consumption of each package ≤ 10,000 Example Input 5 100 20 30 10 50 20 Output 3 Explanation The drone can carry the first three packages with fuel consumption of 20 + 30 + 10 = 60, which is within the fuel limit of 100. Delivering the fourth package would require a total fuel consumption of 110, which exceeds the limit. Thus, the maximum number of packages deliverable is 3.","solution":"def max_packages(N, F, fuel_consumptions): Determine the maximum number of packages that can be delivered before a drone runs out of fuel. Parameters: N (int): Number of packages. F (int): Fuel limit of the drone. fuel_consumptions (list of int): List of fuel consumption required for each package in order of delivery. Returns: int: The maximum number of packages that can be delivered. total_fuel = 0 for i in range(N): total_fuel += fuel_consumptions[i] if total_fuel > F: return i return N"},{"question":"You are given an array of integers `arr` of size `N`, and a target integer `K`. Your task is to determine whether there exists three distinct elements `a`, `b`, and `c` in the array such that `a + b + c = K`. Formally, if you chose elements at indices `i`, `j`, and `k` of the array `arr` (0 ≤ i < j < k < N) such that `arr[i] + arr[j] + arr[k] = K`, return \\"YES\\". If no such elements exist, return \\"NO\\". Example 1: Input: 5 1 2 4 3 6 10 Output: YES Explanation: The triplet (1, 3, 6) gives us the required sum as 1 + 3 + 6 = 10. Example 2: Input: 4 1 2 3 4 12 Output: NO Explanation: There are no three distinct elements in the array that sum up to 12. Your task: You don\'t need to read input or print anything. Your task is to complete the function `findTripletSum` which takes the array `arr`, its size `N` and target `K` as inputs and returns \\"YES\\" if the triplet exists, otherwise \\"NO\\". Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(1) Constraints: * 1 ≤ N ≤ 10^4 * -10^5 ≤ arr[i] ≤ 10^5 * -10^5 ≤ K ≤ 10^5","solution":"def findTripletSum(arr, N, K): Determines if there are three distinct elements in arr that sum up to K. Parameters: arr (list of int): The list of integers. N (int): The size of arr. K (int): The target sum Returns: str: \\"YES\\" if such a triplet exists, otherwise \\"NO\\". arr.sort() for i in range(N - 2): left = i + 1 right = N - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == K: return \\"YES\\" elif current_sum < K: left += 1 else: right -= 1 return \\"NO\\""},{"question":"A researcher is studying the migration pattern of birds across various stations. The migration pattern is represented as a string with three possible characters: \'L\' indicating movement to the left, \'R\' indicating movement to the right, and \'S\' indicating staying at the same station. The researcher wants to understand the net displacement of the birds from their starting point. Given a string representing the movement pattern of the birds, calculate the net displacement. Net displacement is defined as the final position of the birds relative to their starting point. Assume the birds start at position 0. Moving \'L\' decreases the position by 1, moving \'R\' increases the position by 1, and moving \'S\' keeps the position unchanged. INPUT The input consists of a single line containing the string which represents the movement pattern. OUTPUT Output a single integer that indicates the net displacement of the birds from their starting point. CONSTRAINTS 1. The input string can have a length between 1 and 1000. 2. The string contains only the characters \'L\', \'R\', and \'S\'. SAMPLE INPUT \\"LRLSRSSR\\" SAMPLE OUTPUT 1 Explanation: - L decreases position: 0 -> -1 - R increases position: -1 -> 0 - L decreases position: 0 -> -1 - S remains the same: -1 - R increases position: -1 -> 0 - S remains the same: 0 - S remains the same: 0 - R increases position: 0 -> 1 Final displacement from the starting point is 1.","solution":"def net_displacement(movements): Calculate the net displacement of birds given their movement pattern. Parameters: movements (str): A string of characters where \'L\' indicates move left, \'R\' indicates move right, and \'S\' indicates stay. Returns: int: The net displacement from the starting point. displacement = 0 for move in movements: if move == \'L\': displacement -= 1 elif move == \'R\': displacement += 1 # \'S\' means stay, no change in displacement return displacement"},{"question":"A young programmer named Alex is trying to improve his algorithm skills by solving a variety of challenges. He came across a problem involving a unique form of sorting for an array of integers. Given an array of integers, Alex needs to sort the array such that all even numbers appear before all odd numbers, while maintaining the relative order of even and odd numbers from the original array. Help Alex by writing a function that performs this rearrangement. # Input The first line of the input contains an integer `n` (1 ≤ n ≤ 105) — the number of elements in the array. The second line contains `n` integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. # Output Output the array containing the same integers as the input array, but rearranged so that all even numbers come before all odd numbers. Maintain the relative order of even numbers and odd numbers from the original array. # Examples Example 1 Input: ``` 6 1 2 3 4 5 6 ``` Output: ``` 2 4 6 1 3 5 ``` Example 2 Input: ``` 5 9 7 5 3 2 ``` Output: ``` 2 9 7 5 3 ``` # Note In the first example, the even numbers (2, 4, 6) appear before the odd numbers (1, 3, 5), preserving their relative order from the input. In the second example, the even number (2) is placed before all the odd numbers (9, 7, 5, 3), again preserving the original order of the odd numbers from the input.","solution":"def rearrange_array(arr): Rearrange the array such that all even numbers come before all odd numbers, while maintaining the relative order of even and odd numbers from the original array. Parameters: arr (list of int): The input array of integers. Returns: list of int: The rearranged array. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds # Example usage: # print(rearrange_array([1, 2, 3, 4, 5, 6])) # Output should be: [2, 4, 6, 1, 3, 5]"},{"question":"Your friend Tom loves shopping for gadgets and frequently tracks prices online to find the best deals. Recently, he observed that some websites offer a limited-time make-a-better-deal (MBD) offer that allows you to buy a gadget at a discounted price if the price at that moment is lower than any of the prices in the previous days. Tom wants to keep track of how many times he can activate this MBD offer based on the price history of a particular gadget. Given a list of gadget prices over consecutive days, your task is to determine the number of times Tom can activate the MBD offer. Input The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. Each test case begins with an integer N, the number of days Tom is tracking the price. The next line contains N space-separated integers representing the price of the gadget on each of the N days. Output For each test case, print the number of times Tom could activate the MBD offer. Example Input: 2 6 100 80 90 70 60 80 5 50 40 35 45 30 Output: 3 3 Explanation Example case 1. Consider the prices [100, 80, 90, 70, 60, 80]. Tom could activate the MBD offer on day 2 (price 80, which is less than price 100 on day 1), on day 4 (price 70, which is less than prices on previous days), and on day 5 (price 60, which is less than prices on previous days). Example case 2. Consider the prices [50, 40, 35, 45, 30]. Tom can activate the MBD offer on day 2 (price 40, which is less than price 50 on day 1), on day 3 (price 35, which is less than prices on previous days), and on day 5 (price 30, which is less than prices on previous days).","solution":"def count_mbd_offers(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] prices = test_cases[i][1] count = 0 for j in range(1, N): if prices[j] < min(prices[:j]): count += 1 results.append(count) return results"},{"question":"String Transformation Alice has an interest in playing with strings and has recently learned about string transformations. She is given a string `S` containing only lowercase alphabetical characters. Her task is to transform the string by replacing each alphabetical character with its corresponding lexicographical successor. If the character is \'z\', it wraps around to \'a\'. Finally, Alice needs to calculate the frequency of each character in the transformed string and output the character with the highest frequency. If there is a tie, output the lexicographically smallest character. Your task is to help Alice write a program that performs this transformation and calculates the desired character. Input The input contains a single string `S` containing only lowercase alphabetical characters. Output Output a single character which is the most frequent character in the transformed string. If there is a tie, output the lexicographically smallest character. Constraints 1 <= |S| <= 10^5 Example Input: abbc Output: c Explanation Transform the string `S`: - \'a\' transforms to \'b\' - \'b\' transforms to \'c\' - \'b\' transforms to \'c\' - \'c\' transforms to \'d\' The transformed string is \\"bccd\\". The frequency of characters: - \'b\': 1 - \'c\': 2 - \'d\': 1 The highest frequency is 2 for the character \'c\', so the output is \'c\'.","solution":"def transform_string_and_get_max_frequency_char(S): Transforms the string by replacing each character with its lexicographical successor, and returns the character with the highest frequency. In case of a tie, returns the lexicographically smallest character. from collections import Counter # Transform the string transformed_string = [] for char in S: if char == \'z\': transformed_string.append(\'a\') else: transformed_string.append(chr(ord(char) + 1)) transformed_string = \\"\\".join(transformed_string) # Count the frequency of each character counter = Counter(transformed_string) # Find the character with the highest frequency (and smallest lexicographically in case of tie) max_frequency = max(counter.values()) most_frequent_chars = [char for char, count in counter.items() if count == max_frequency] return min(most_frequent_chars)"},{"question":"Alice and Bob\'s Shared Facilities Alice and Bob have recently moved into a duplex apartment where they need to share some facilities like gym, parking space, and the laundry room. Each facility can be used by either Alice or Bob in a specific time interval during the day. However, their schedules are quite strict and they want to avoid any overlap when using these facilities. Your task is to write a program that schedules their use of each facility such that there is no overlap. Each facility has a usage time window represented by a start and end time. For each facility, you need to decide whether Alice or Bob will use it, such that no two facilities they use overlap in time. If it\'s impossible to schedule the usage without overlaps, your program should indicate so. The start and end times are given in hours (24-hour format without minutes). The usage of a facility is inclusive of both the start and the end time. Input The input consists of multiple datasets. Each dataset starts with a line containing an integer n, the number of facilities, where 1 ≤ n ≤ 1000. Each of the next n lines contains two integers start and end (0 ≤ start < end ≤ 23), representing the start and end times of a facility\'s usage time window. The end of the input is indicated by a line containing a zero. Output For each dataset, output a single line containing \\"Alice\\" if it\'s possible to schedule all facilities without overlap and Alice can use all of them, \\"Bob\\" if Bob can use all of them, and \\"Impossible\\" if neither of them can use all the facilities without overlap. Sample Input 3 9 11 13 15 16 18 4 9 11 11 13 12 14 14 16 0 Sample Output Alice Impossible Example Input 3 9 11 13 15 16 18 4 9 11 11 13 12 14 14 16 0 Output Alice Impossible","solution":"def can_schedule_facilities(facilities): # Sort the facilities by their start times facilities.sort() # Check if Alice can use all facilities without overlap last_end_time = -1 for start, end in facilities: if start > last_end_time: last_end_time = end else: return \\"Impossible\\" return \\"Alice\\" def process_input(data): lines = data.strip().split(\\"n\\") result = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break facilities = [] for j in range(1, n+1): start, end = map(int, lines[i+j].strip().split()) facilities.append((start, end)) result.append(can_schedule_facilities(facilities)) i += n + 1 return result"},{"question":"Lara is training a pack of smart dogs using a sequence of commands, each represented by numbers. The commands can either reward the dogs with treats or make them perform a trick. Lara wants to maintain a balance so that the total sum of numbers representing treats (positive integers) and the numbers representing tricks (negative integers) is as close to zero as possible after executing some combination of the commands. Help Lara determine the minimum possible absolute sum she can achieve. Input: First Line, number of test cases 1 ≤ t ≤ 30 Each test case starts with a single integer n (1 ≤ n ≤ 20), the number of commands. Then follow n integers representing the commands -500 ≤ command ≤ 500. Output: For each test case, print the minimum possible absolute sum Lara can achieve. SAMPLE INPUT 3 4 1 2 3 -6 3 -5 -5 10 5 10 -10 5 -6 1 SAMPLE OUTPUT 0 0 0 Explanation: Case 1: Lara can choose to execute all the given commands, resulting in a sum of 0. Case 2: Lara can choose to execute the first two -5 commands and the 10 command, resulting in a sum of 0. Case 3: Lara can choose to execute the commands 10, -10, 1, and -1, resulting in a sum of 0.","solution":"def min_possible_abs_sum(commands): Determine the minimum possible absolute sum of a set of commands. from itertools import combinations n = len(commands) min_abs_sum = float(\'inf\') for i in range(1, n+1): for combo in combinations(commands, i): current_sum = sum(combo) min_abs_sum = min(min_abs_sum, abs(current_sum)) return min_abs_sum def process_test_cases(test_cases): results = [] for commands in test_cases: results.append(min_possible_abs_sum(commands)) return results"},{"question":"A well-known company is organizing a competitive coding challenge. The key part of this challenge is a problem that involves finding an optimal way to distribute tokens among participants. You are given a sequence of `n` integers, each representing the number of tokens each participant has initially. The goal is to distribute a total of `k` additional tokens among these participants such that the difference between the maximum and minimum number of tokens held by any participant is minimized after distribution. For instance, if the initial list of tokens is `[5, 7, 10]` and `k = 5`, you might distribute the additional tokens in such a way that the final list of tokens becomes `[8, 8, 9]`, resulting in a minimized difference of 1 (9 - 8). Write a function that takes the initial list of tokens and the number of additional tokens and returns the minimum possible difference between the maximum and minimum number of tokens after distributing the additional tokens optimally. ----- Input ----- The input consists of a single line containing two integers separated by a space: - `n` (1 ≤ n ≤ 100) — the number of participants. - `k` (0 ≤ k ≤ 10^9) — the number of additional tokens. Following this, a second line contains `n` space-separated integers representing the initial number of tokens each participant has. ----- Output ----- Print a single integer — the minimum possible difference between the maximum and minimum number of tokens after distributing the additional tokens. ----- Examples ----- Input 3 5 5 7 10 Output 1 Input 5 10 1 2 4 6 8 Output 2","solution":"def min_token_difference(n, k, initial_tokens): Returns the minimum possible difference between the maximum and minimum number of tokens after distributing `k` additional tokens among `n` participants with initial token counts. initial_tokens.sort() # Sort the list to make it easier to distribute the tokens def can_achieve_difference(diff): # Go through the sorted list and try to make all elements <= to the max limit we can afford add_needed = 0 for tokens in initial_tokens: if tokens > initial_tokens[0] + diff: add_needed += tokens - (initial_tokens[0] + diff) return add_needed <= k low, high = 0, max(initial_tokens) - min(initial_tokens) while low < high: mid = (low + high) // 2 if can_achieve_difference(mid): high = mid else: low = mid + 1 return low # Example usage n = 3 k = 5 initial_tokens = [5, 7, 10] print(min_token_difference(n, k, initial_tokens)) # Output: 1"},{"question":"In a certain city, there are multiple power plants and communication towers. Each power plant needs to connect to at least one communication tower. You are given the distances between each power plant and communication tower. Your task is to find the minimum total distance needed to connect all the power plants to the communication towers. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 1000) — the number of power plants and the number of communication towers, respectively. Each of the next n lines contains m space-separated integers, where the j-th integer in the i-th line represents the distance between the i-th power plant and the j-th communication tower (1 ≤ distance ≤ 10000). Output Print a single integer — the minimum total distance needed to connect all power plants to at least one communication tower. Examples Input 3 3 1 3 4 2 1 3 3 2 1 Output 3 Input 2 2 5 3 6 4 Output 7 Note In the first example, the first power plant connects to the first communication tower (distance 1), the second power plant connects to the second communication tower (distance 1), and the third power plant connects to the third communication tower (distance 1). The total distance is 1 + 1 + 1 = 3. In the second example, the first power plant connects to the second communication tower (distance 3), and the second power plant connects to the first communication tower (distance 4). The total distance is 3 + 4 = 7.","solution":"def min_total_distance(n, m, distances): Calculate the minimum total distance needed to connect all power plants to at least one communication tower. Parameters: n (int): Number of power plants m (int): Number of communication towers distances (list of list of int): A 2D list containing the distances between power plants and communication towers Returns: int: The minimum total distance min_distances = [float(\'inf\')] * n for i in range(n): for j in range(m): if distances[i][j] < min_distances[i]: min_distances[i] = distances[i][j] return sum(min_distances)"},{"question":"John has a herd of n sheep, and he wants to arrange them in such a way that they form a rectangular pen with dimensions a by b. Each cell of the pen contains at most one sheep. Given the total number of sheep n, John wants to know the number of distinct rectangular pen dimensions (a, b) he can form. Two dimensions (a1, b1) and (a2, b2) are considered distinct if a1 ≠ a2 or b1 ≠ b2. Note that the number of sheep can be exactly accommodated in the pen of size a x b (a * b = n). Write a program to count all such pairs (a, b). Input: First line of input will contain integer T, number of Test Cases. Next T lines each will contain integer n, the total number of sheep. Output: For each test case, print in a new line a single integer which is the number of distinct pairs (a, b) such that a * b = n. Constraints: 1 ≤ T ≤ 10000 1 ≤ n ≤ 1000000000 (10^9) Sample Input 2 6 12 Sample Output 4 6 Explanation For Sample Test #1: The distinct pairs (a, b) are (1, 6), (2, 3), (3, 2), (6, 1). So, there are 4 distinct pairs. For Sample Test #2: The distinct pairs (a, b) are (1, 12), (2, 6), (3, 4), (4, 3), (6, 2), (12, 1). So, there are 6 distinct pairs.","solution":"def count_distinct_pairs(n): Returns the number of distinct rectangular pen dimensions (a, b) such that a * b = n. count = 0 for a in range(1, int(n**0.5) + 1): if n % a == 0: count += 2 if a != n // a else 1 return count def process_test_cases(test_cases): Processes a list of test cases and returns a list of results. Each result is the number of distinct pairs (a, b) for the corresponding test case\'s n. return [count_distinct_pairs(n) for n in test_cases]"},{"question":"Write a function that, given a string, returns the first non-repeating character in it. If there is no non-repeating character, return an underscore (\\"_\\"). The first line of the input contains the number of test cases T. Each test case consists of a single line containing a string S. For each test case, print the first non-repeating character or an underscore if there is no such character. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 SAMPLE INPUT 3 abcabc abacabad abacabaabacaba SAMPLE OUTPUT _ c _","solution":"def first_non_repeating_character(strings): Given a list of strings, returns a list of the first non-repeating character for each string. If there is no non-repeating character, returns an underscore (\\"_\\"). results = [] for s in strings: char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 found_non_repeating = False for char in s: if char_count[char] == 1: results.append(char) found_non_repeating = True break if not found_non_repeating: results.append(\'_\') return results def process_input(input_string): Given the input as a single string, processes it and returns the desired output. lines = input_string.strip().split(\'n\') T = int(lines[0]) strings = [lines[i] for i in range(1, T + 1)] return first_non_repeating_character(strings)"},{"question":"Word Frequency in a Paragraph You are given a paragraph containing multiple sentences. Your task is to find the frequency of each word without distinguishing between upper and lower cases. Specifically, the most frequently occurring word should be displayed first. If there are ties, they are resolved in lexicographical order. # Input - The input consists of a single line, which contains a string `paragraph` with a maximum length of (10^5) characters. The string contains only alphanumeric characters and spaces. # Output - Output each word and its frequency, starting from the most frequent word. # Example Input ``` This is a test. This test is simple. A simple test is this. ``` Output ``` is 3 test 3 this 3 a 2 simple 2 ``` # Notes - Treat \\"This\\" and \\"this\\" as the same word. - Punctuation is not present in the input sample, so there is no need to consider it for this problem. - If all words have the same frequency, they should appear in lexicographical order.","solution":"from collections import Counter import re def word_frequency(paragraph): This function returns the frequency of each word in the given paragraph without distinguishing between upper and lower cases. The results are sorted by frequency first and lexicographically second. # Convert the paragraph to lower case and split into words words = re.findall(r\'bw+b\', paragraph.lower()) # Count the frequency of each word word_count = Counter(words) # Sort the words first by frequency (descending) and then lexicographically (ascending) sorted_word_count = sorted(word_count.items(), key=lambda item: (-item[1], item[0])) return sorted_word_count"},{"question":"You are given a list of integers which represents heights of students standing in a line. Your task is to find the maximum number of students that can be excused so that the remaining students standing in line form a non-decreasing sequence of heights. -----Input----- The first line of input contains an integer n (1 le n le 10^5) — the number of students. The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the students. -----Output----- Output a single integer — the maximum number of students that can be excused. -----Examples----- Input 6 8 5 9 6 7 8 Output 2 Input 5 1 2 3 4 5 Output 0 -----Note----- In the first example, you can excuse students with heights 8 and 6 to get the non-decreasing sequence 5, 9, 7, 8 which is the maximum sequence possible with two students excused. In the second example, the heights are already in non-decreasing order, so no students need to be excused.","solution":"import bisect def max_students_to_excuse(n, heights): Returns the maximum number of students that can be excused to form a non-decreasing subsequence. if n == 0: return 0 # This will store the last elements of the smallest increasing subsequences of every length tails = [] for height in heights: # Find the index where height should be inserted to keep tails sorted pos = bisect.bisect_right(tails, height) # If pos is equal to the length of tails, we need to extend tails by this height if pos == len(tails): tails.append(height) else: # Otherwise, we just update the tail tails[pos] = height # The number of students to excuse is the total number of students minus the length of the longest non-decreasing subsequence return n - len(tails)"},{"question":"You are working on a problem involving traffic lights at different intersections in a city. The city can be represented as a grid, where each intersection has a traffic light. Traffic lights can be either green or red. Cars can only move from one intersection to an adjacent intersection if the traffic light at the destination intersection is green. Adjacent intersections are those directly to the north, south, east, or west (not diagonally). Your task is to determine whether there is a path from the top-left intersection (intersection (0, 0)) to the bottom-right intersection (intersection (n-1, n-1)) while only moving through intersections with green lights. The grid is represented as an n times n matrix, where each cell contains a 0 or a 1. A 1 indicates a green traffic light, and a 0 indicates a red traffic light. -----Input----- The first line contains a single integer n (2 le n le 1000) representing the size of the grid. The next n lines each contain n integers (0 or 1), representing the grid of traffic lights. -----Output----- Print \\"YES\\" if there is a path from the top-left intersection to the bottom-right intersection only through intersections with green traffic lights. Otherwise, print \\"NO\\". -----Sample Explanation----- In the first sample, there exists a path from the top-left to the bottom-right by moving through intersections (0, 0) → (1, 0) → (1, 1) → (2, 1) → (2, 2). Thus, you should output \\"YES\\". In the second sample, there is no possible path from the top-left to the bottom-right while only moving through intersections with green traffic lights. Thus, you should output \\"NO\\". -----Examples----- Sample Input 1: 3 1 1 0 1 1 1 0 1 1 Sample Output 1: YES Sample Input 2: 3 1 0 0 0 1 0 0 0 1 Sample Output 2: NO","solution":"def is_path_possible(n, grid): from collections import deque if grid[0][0] == 0 or grid[n-1][n-1] == 0: return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n-1 and y == n-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 1: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" # Example Usage # n = 3 # grid = [ # [1, 1, 0], # [1, 1, 1], # [0, 1, 1] # ] # print(is_path_possible(n, grid)) # Output: \\"YES\\""},{"question":"You are given an integer array A of size N. Your task is to process Q queries on this array. Each query consists of two integers L and R, and asks for the sum of the Fibonacci numbers from the subarray A[L:R]. The Fibonacci number for an integer X is defined as follows: - F(0) = 0 - F(1) = 1 - F(X) = F(X-1) + F(X-2) for X > 1 Write a program to answer each query efficiently. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the size of the array A. - The second line of each test case contains N space-separated integers A_{1}, A_{2}, dots, A_{N} denoting the array A. - The third line of each test case contains an integer Q - denoting the number of queries. - The i^{th} of the next Q lines contains two space-separated integers L and R denoting the range of the subarray. ------ Output Format ------ For each test case, - For each query, print in a new line, the sum of the Fibonacci numbers of the elements in the subarray A[L], A[L+1], ..., A[R]. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ A_{i} ≤ 30 1 ≤ Q ≤ 1000 1 ≤ L ≤ R ≤ N ----- Sample Input 1 ------ 1 5 1 2 3 4 5 2 1 3 2 5 ----- Sample Output 1 ------ 4 12 ----- Explanation 1 ------ Test case 1: - Query 1: L = 1 , R = 3. The subarray is [1, 2, 3]. - Fibonacci(1) = 1 - Fibonacci(2) = 1 - Fibonacci(3) = 2 The sum is 1 + 1 + 2 = 4. - Query 2: L = 2 , R = 5. The subarray is [2, 3, 4, 5]. - Fibonacci(2) = 1 - Fibonacci(3) = 2 - Fibonacci(4) = 3 - Fibonacci(5) = 5 The sum is 1 + 2 + 3 + 5 = 11.","solution":"def fibonacci(n): Calculate the Fibonacci number F(n). Uses iterative approach for efficiency. fib = [0, 1] for i in range(2, n + 1): fib.append(fib[-1] + fib[-2]) return fib[n] def process_queries(arr, queries): fib_cache = {i: fibonacci(i) for i in range(31)} results = [] for L, R in queries: sum_fib = 0 for i in range(L, R + 1): sum_fib += fib_cache[arr[i - 1]] # L and R are 1-based indices results.append(sum_fib) return results def fibonacci_queries(test_cases): results = [] for case in test_cases: N, arr, Q, queries = case results.extend(process_queries(arr, queries)) return results"},{"question":"You are given a string S consisting of only lowercase English letters. Your task is to determine the length of the longest palindrome that can be constructed by rearranging the characters in the string. Constraints: * 1 ≤ |S| ≤ 1000 * S consists of lowercase English letters only. Input Input is given from Standard Input in the following format: S Output Print the length of the longest palindrome that can be constructed by rearranging the characters in the string. Examples Input abccccdd Output 7 Input a Output 1","solution":"def longest_palindrome_length(s): from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"Problem description: Ella loves arranging tiles in a neat grid format. She has a rectangular grid of tiles, some of which may be broken and unusable. Her goal is to partition the entire grid into the largest possible square sub-grids while avoiding the broken tiles. Ella can choose any size square for each sub-grid, but each must fit within the grid without overlapping any broken tiles. Write a function to determine the maximum size of the square sub-grid that can be placed within the provided grid without including any broken tiles. Input First line contains two integers, H and W, representing the height and width of the grid. Next H lines each contain W characters, either \'.\' (representing a usable tile) or \'#\' (representing a broken tile). Output Print the size of the largest square sub-grid that can be placed without including any broken tiles. Constraints 1 ≤ H, W ≤ 1000 Example Input: 5 5 . . # . . . . . . # . . . . . # . . . . . . . # # Output: 3 Example explanation: The largest square sub-grid (3x3 size) without broken tiles is: ``` . . . . . . . . . ```","solution":"def maximalSquare(grid): if not grid or not grid[0]: return 0 H = len(grid) W = len(grid[0]) # Create a DP table dp = [[0] * W for _ in range(H)] max_side = 0 for i in range(H): for j in range(W): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side def parse_input(): import sys input = sys.stdin.read data = input().split() H = int(data[0]) W = int(data[1]) grid = [] idx = 2 for _ in range(H): row = data[idx:idx + W] grid.append(row) idx += W return H, W, grid if __name__ == \'__main__\': H, W, grid = parse_input() print(maximalSquare(grid))"},{"question":"Julia is fascinated by sequences and she recently came across a very interesting one. Given an integer n, she wants to generate a sequence of length n where each element is the sum of the previous three elements, starting from three initial values a, b and c. She calls this sequence the Tribonacci Sequence. Help Julia by writing a program that generates the first n elements of this sequence. Input The input consists of two lines. The first line contains four integers n, a, b and c, where n (1 ≤ n ≤ 1000) is the length of the sequence and a, b, c (-1000 ≤ a, b, c ≤ 1000) are the first three elements of the sequence. Output Output the first n elements of the Tribonacci Sequence, separated by spaces. Examples Input 5 1 1 1 Output 1 1 1 3 5 Input 7 0 0 1 Output 0 0 1 1 2 4 7 Input 3 -1 -1 -1 Output -1 -1 -1 Note The Tribonacci Sequence begins with the initial values a, b and c. Each subsequent element of the sequence is the sum of the previous three elements. For instance, in the first example: 1. The first three elements are 1, 1, 1. 2. The fourth element is 1 + 1 + 1 = 3. 3. The fifth element is 1 + 1 + 3 = 5.","solution":"def tribonacci_sequence(n, a, b, c): Returns the first n elements of the Tribonacci sequence starting with a, b, c. Parameters: n (int): Length of the sequence. a, b, c (int): The first three elements of the sequence. Returns: list: The first n elements of the Tribonacci sequence. if n <= 0: return [] sequence = [a, b, c] for i in range(3, n): next_value = sequence[-1] + sequence[-2] + sequence[-3] sequence.append(next_value) return sequence[:n]"},{"question":"You are given a forest of rooted trees, where each tree consists of n nodes. The nodes are numbered from 1 to n. Each node has a value associated with it, denoted by v_i (1 ≤ v_i ≤ 1000). Each node (except the roots) has exactly one parent node. A query is defined as the sum of the values of all nodes in the subtree of a given node. Your task is to process q such queries. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes. The second line contains n integers v_1, v_2, ..., v_n — the values associated with the nodes. The next n - 1 lines each contain two integers u and p (1 ≤ u, p ≤ n) indicating that node u is the child of node p. The edges form a valid rooted forest (some nodes may be roots and will not appear as children). The next line contains an integer q (1 ≤ q ≤ 1000) — the number of queries. Each of the next q lines contains a single integer x (1 ≤ x ≤ n) — the node for which you need to compute the query. Output For each query, output a single integer — the sum of the values of all nodes in the subtree of node x. Examples Input 5 1 2 3 4 5 2 1 3 1 4 2 5 2 3 1 2 3 Output 15 11 3","solution":"def compute_subtree_sums(n, values, edges, queries): from collections import defaultdict, deque # Build the tree structure using adjacency list tree = defaultdict(list) for u, p in edges: tree[p].append(u) # Function to calculate subtree sum using Depth First Search def dfs(node): total_value = values[node-1] for child in tree[node]: total_value += dfs(child) subtree_sums[node] = total_value return total_value # Initialize subtree sums dictionary subtree_sums = {} # Find all roots (nodes that are not children) all_nodes = set(range(1, n+1)) children_nodes = set(u for u, p in edges) roots = all_nodes - children_nodes # Compute subtree sums for each root for root in roots: dfs(root) # Answering each query result = [] for x in queries: result.append(subtree_sums[x]) return result"},{"question":"The king has a special sequence of numbers and wants you to help him generate it. The sequence starts with a positive integer N and proceeds based on the following rule: - If the number is even, divide it by 2. - If the number is odd, multiply it by 3 and add 1. - The sequence ends when it reaches the number 1. Write a program to generate this sequence for him. -----Input:----- - The first line contains T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the sequence, starting with the given number N and ending with 1. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10,000 -----Sample Input:----- 3 3 6 10 -----Sample Output:----- 3 10 5 16 8 4 2 1 6 3 10 5 16 8 4 2 1 10 5 16 8 4 2 1","solution":"def generate_sequence(n): Generate the special sequence starting with n and ending at 1. sequence = [n] while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 sequence.append(n) return sequence def process_test_cases(t, test_cases): Process multiple test cases and generate sequences for each. results = [] for n in test_cases: sequence = generate_sequence(n) results.append(sequence) return results"},{"question":"Given a list of integers, return the length of the longest consecutive elements sequence. Example: Given [100, 4, 200, 1, 3, 2], the output should be 4. The longest consecutive elements sequence is [1, 2, 3, 4]. Given [0, 3, 7, 2, 5, 8, 4, 6, 0, 1], the output should be 9. The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8].","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence. Arguments: nums -- List of integers Returns: Length of the longest consecutive elements sequence if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are working on a new feature for a text editor that involves finding specific patterns within a document. To achieve this, you decide to implement an algorithm to locate all occurrences of a given pattern within a text. The text and pattern only contain lowercase English letters. Your goal is to find all starting positions of the pattern in the text. Consider a string of length n as indexed from 1 to n. -----Input----- The first line contains a single integer n (1 le n le 100,000) representing the length of the text. The second line contains the text string of length n. The third line contains a single integer m (1 le m le min(100, n)) representing the length of the pattern. The fourth line contains the pattern string of length m. -----Output----- Print all starting positions (1-based index) of the pattern in the text, each separated by a space. If there are no occurrences, print -1 instead. -----Examples----- Input 13 abracadabraab 3 abr Output 1 8 Input 9 zzzzzzzzz 2 zz Output 1 2 3 4 5 6 7 8 Input 5 hello 3 xyz Output -1 -----Note----- In the first example: The pattern \\"abr\\" appears at positions 1 and 8 in the text. In the second example: The pattern \\"zz\\" appears at positions 1, 2, 3, 4, 5, 6, 7, and 8. In the third example: The pattern \\"xyz\\" does not appear in the text, so the output is -1.","solution":"def find_pattern_positions(n, text, m, pattern): Returns the start positions (1-based index) of the pattern in the text. Parameters: n (int): Length of the text text (str): The text string of length n m (int): Length of the pattern pattern (str): The pattern string of length m Returns: List[int]: List of starting positions of the pattern in the text, or [-1] if not found. positions = [] for i in range(n - m + 1): if text[i:i + m] == pattern: positions.append(i + 1) if not positions: return [-1] return positions"},{"question":"RLE Compression Write a function that implements the Run-Length Encoding (RLE) compression algorithm. The function should take a string as input and return its RLE compressed version. RLE compression works by replacing sequences of the same character with a single character followed by the number of occurrences. # Note: - If the compressed string is not shorter than the original string, return the original string. - The input string will only consist of uppercase and lowercase English letters (a-z, A-Z). # Further Reading More information on Run-Length Encoding can be found here: https://en.wikipedia.org/wiki/Run-length_encoding # Examples: ```python rle_compress(\\"AAABBBCCCA\\") == \\"A3B3C3A1\\" rle_compress(\\"abcdef\\") == \\"abcdef\\" # Compressed version is not shorter rle_compress(\\"AAAAAABBC\\") == \\"A6B2C1\\" ```","solution":"def rle_compress(string): Compresses the string using Run-Length Encoding (RLE). Parameters: string (str): The input string to compress. Returns: str: The RLE compressed string or the original string if the compressed version is not shorter. if not string: return string compressed = [] count = 1 for i in range(1, len(string)): if string[i] == string[i - 1]: count += 1 else: compressed.append(string[i - 1] + str(count)) count = 1 compressed.append(string[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(string) else string"},{"question":"Write a function that receives two arrays of integers representing two sets and returns the union of these sets as a new array. The union of two sets is a set that contains all elements that are in either of the input sets, with no duplicates. The function should work for any integer values, including negative numbers. The order of elements in the output does not matter. Examples: ``` [1, 2, 3], [3, 4, 5] => [1, 2, 3, 4, 5] [-1, -2, 3], [1, -2, 3, 4] => [-1, -2, 1, 3, 4] [1, 2, 2, 3], [2, 3, 4, 5] => [1, 2, 3, 4, 5] [], [1, 2, 3] => [1, 2, 3] [42], [42] => [42] ```","solution":"def union_of_sets(arr1, arr2): Returns the union of two sets represented by two arrays. Parameters: arr1 (list of int): The first set of integers. arr2 (list of int): The second set of integers. Returns: list of int: The union of the two sets. return list(set(arr1) | set(arr2))"},{"question":"In the world of competitive programming, you often have to deal with numerical constraints and optimization problems. One such problem presented to you is to achieve precise control over robotic arms in a factory setting. The robotic arms need to reach specific coordinates in a 2D plane to pick up or place items, and each command only allows the arm to stretch or shrink to a new position. Your task is to develop a software that helps control these robotic arms efficiently. The robotic arm can only move in a straight line along one of the Cartesian axes (either the x-axis or y-axis) with each given command. Movements in this problem are based on three types of commands: MOVE_X, MOVE_Y, and POSITION. - MOVE_X dx: This command moves the current horizontal position of the robot arm by dx units along the x-axis. - MOVE_Y dy: This command moves the current vertical position of the robot arm by dy units along the y-axis. - POSITION x y: This command moves the robot arm directly to the coordinates (x, y). Your program must process a series of commands and compute the final position of the robotic arm on the Cartesian plane, starting from the origin (0, 0). Input - The input consists of multiple data sets. - Each data set starts with an integer n (1 <= n <= 1000), representing the number of commands. - The next n lines contain one command per line in one of the formats described above (MOVE_X dx, MOVE_Y dy, or POSITION x y). - The end of input is signaled by a data set with n = 0. Output - For each data set, output the resulting coordinates of the robotic arm after executing all the commands. Example Input 4 MOVE_X 10 MOVE_Y 5 POSITION 3 7 MOVE_X -4 3 MOVE_X 12 MOVE_Y 8 POSITION 1 -3 0 Output -1 7 1 -3","solution":"def process_robot_commands(commands): Processes a list of robot commands and returns the final position of the robotic arm. :param commands: List of command strings :return: Tuple (x, y) representing the final coordinates on the cartesian plane. x, y = 0, 0 # Starting at the origin (0, 0) for command in commands: parts = command.split() if parts[0] == \\"MOVE_X\\": dx = int(parts[1]) x += dx elif parts[0] == \\"MOVE_Y\\": dy = int(parts[1]) y += dy elif parts[0] == \\"POSITION\\": x = int(parts[1]) y = int(parts[2]) return x, y def read_input_to_process(input_lines): results = [] lines_iter = iter(input_lines) while True: n = int(next(lines_iter)) if n == 0: break commands = [next(lines_iter).strip() for _ in range(n)] results.append(process_robot_commands(commands)) return results"},{"question":"You are given an array of integers A of length N and a target integer X. You need to determine whether there exist two distinct indices i and j such that the sum of A[i] and A[j] is equal to X. For example, given the array [1, 2, 3, 4, 5] and the target 7, the pair (2, 5) sums up to 7. If there exists such a pair, return \\"YES\\". Otherwise, return \\"NO\\". ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers representing the array A. The third line contains a single integer X. ------ Output ------ For each test case, print a single line containing the string \\"YES\\" if there exist such a pair of indices, or \\"NO\\" otherwise (without quotes). ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 -2 times 10^9 ≤ X ≤ 2 times 10^9 ------ Sample Input 1 ------ 3 5 1 2 3 4 5 7 4 0 -1 2 3 2 3 1 3 5 10 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Example case 1: The pair (2, 5) sums up to 7. Example case 2: The pair (2, 0) sums up to 2. Example case 3: There is no pair of elements in [1, 3, 5] that sums up to 10.","solution":"def find_pair_with_sum(T, test_cases): results = [] for case in test_cases: N, A, X = case seen = set() found = False for num in A: if (X - num) in seen: results.append(\\"YES\\") found = True break seen.add(num) if not found: results.append(\\"NO\\") return results def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) A = list(map(int, lines[index + 1].split())) X = int(lines[index + 2]) test_cases.append((N, A, X)) index += 3 return T, test_cases # Example usage: input_data = 3 5 1 2 3 4 5 7 4 0 -1 2 3 2 3 1 3 5 10 T, test_cases = process_input(input_data) result = find_pair_with_sum(T, test_cases) print(\'n\'.join(result))"},{"question":"A palindrome is a word that reads the same backward as forward. Write a function that accepts a string and returns True if the string is a palindrome, ignoring spaces, punctuation, and capitalization, and False otherwise. Example For example, if the input string is: `\\"A man, a plan, a canal, Panama!\\"`, the function should return True because the string without spaces, punctuation, and in lowercase reads: `\\"amanaplanacanalpanama\\"`. Similarly, if the input string is: `\\"Hello, World!\\"`, the function should return False because it does not read the same backward. # Constraints - The input string will contain at most 1000 characters. - The function must ignore spaces, punctuation, and capitalization when determining if the string is a palindrome. - The function should return a boolean value. # Function Signature ```python def is_palindrome(s: str) -> bool: pass ``` You can assume the existence of the following helper function to remove unwanted characters and lower the case of the string: ```python def clean_string(s: str) -> str: return \'\'.join(c.lower() for c in s if c.isalnum()) ``` This function will take a string, remove all spaces and punctuation, and convert all characters to lowercase.","solution":"def clean_string(s: str) -> str: Removes all non-alphanumeric characters from a string and converts it to lowercase. return \'\'.join(c.lower() for c in s if c.isalnum()) def is_palindrome(s: str) -> bool: Returns True if the cleaned string is a palindrome, ignoring spaces, punctuation, and capitalization. cleaned = clean_string(s) return cleaned == cleaned[::-1]"},{"question":"Bob loves playing with matrices. He recently came across a problem and needs your help solving it. You are given a matrix of integers of size N x M. Your task is to rotate the matrix 90 degrees clockwise and output the resulting matrix. -----Input----- The first line of the input contains two integers, N and M, denoting the number of rows and columns of the matrix. Each of the next N lines contains M integers separated by spaces representing the matrix. -----Output----- Output the rotated matrix. The resulting matrix should have M rows and N columns. -----Constraints----- - 1 ≤ N, M ≤ 1,000 - -10^9 ≤ Matrix elements ≤ 10^9 -----Example----- Input: 3 4 1 2 3 4 5 6 7 8 9 10 11 12 Output: 9 5 1 10 6 2 11 7 3 12 8 4 -----Explanation----- Rotating the given 3 x 4 matrix 90 degrees clockwise results in a 4 x 3 matrix. Each element moves to its corresponding new position in the rotated matrix.","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates the given matrix 90 degrees clockwise. :param matrix: List[List[int]], a 2D list representing the matrix :return: List[List[int]], the rotated matrix N = len(matrix) M = len(matrix[0]) # Create a new matrix of size M x N rotated_matrix = [[0] * N for _ in range(M)] # Fill the new matrix with rotated values for i in range(N): for j in range(M): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix # Example usage: # matrix = [ # [1, 2, 3, 4], # [5, 6, 7, 8], # [9, 10, 11, 12] # ] # result = rotate_matrix_90_degrees_clockwise(matrix) # for row in result: # print(\\" \\".join(map(str, row)))"},{"question":"A robot is placed on a grid where some cells are obstacles and some are free. The robot can move up, down, left, or right to any adjacent free cell but cannot move to or through obstacles. The robot needs to navigate from the top-left corner of the grid to the bottom-right corner. Write a function to determine the minimum number of moves required for the robot to reach its destination, or return -1 if it is impossible for the robot to reach the bottom-right corner. -----Input----- - An integer n (1 le n le 1000) representing the number of rows. - An integer m (1 le m le 1000) representing the number of columns. - An n times m grid where each cell is either \'0\' (free) or \'1\' (obstacle). The top-left and bottom-right corners are always free. -----Output----- - An integer representing the minimum number of moves required for the robot to reach the bottom-right corner, or -1 if it is impossible. -----Example----- Sample Input 1: 3 3 0 0 0 0 1 0 0 0 0 Sample Output 1: 4 Sample Input 2: 3 3 0 1 0 1 1 0 0 0 0 Sample Output 2: -1 Sample Input 3: 2 2 0 0 0 0 Sample Output 3: 2","solution":"from collections import deque def min_moves(n, m, grid): Determines the minimum number of moves required for the robot to reach the bottom-right corner, or returns -1 if it is impossible. # Directions for movement in the grid: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Check if starting or ending position is blocked if grid[0][0] == \'1\' or grid[n-1][m-1] == \'1\': return -1 # BFS initialization queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() # If we have reached the bottom-right corner, return the steps taken if (row, col) == (n-1, m-1): return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and grid[new_row][new_col] == \'0\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) return -1 # Input: 3 3 grid # grid = [ # [0, 0, 0], # [0, 1, 0], # [0, 0, 0] # ] # Output: 4 # Explanation path: (0,0)->(0,1)->(0,2)->(1,2)->(2,2)"},{"question":"Write a function that takes two strings s1 and s2 as inputs and determines if s2 is a scrambled version of s1. A scrambled string is defined as a string that is obtained by recursively dividing the original string into two non-empty substrings, and then swapping the two substrings. Implement a function `isScramble(s1, s2)` which returns a boolean indicating whether s2 is a scrambled string of s1. For example, \\"great\\" and \\"rgeat\\" are scrambled versions of each other, but \\"abcde\\" and \\"caebd\\" are not. ```python def isScramble(s1, s2): # implement function here pass # Example: # Input: s1 = \\"great\\", s2 = \\"rgeat\\" # Output: True # Input: s1 = \\"abcde\\", s2 = \\"caebd\\" # Output: False ```","solution":"def isScramble(s1, s2): Determines if s2 is a scrambled version of s1. if len(s1) != len(s2): return False if s1 == s2: return True if sorted(s1) != sorted(s2): return False n = len(s1) for i in range(1, n): if (isScramble(s1[:i], s2[:i]) and isScramble(s1[i:], s2[i:])) or (isScramble(s1[:i], s2[-i:]) and isScramble(s1[i:], s2[:-i])): return True return False"},{"question":"Alex loves board games and decided to create a new one that involves moving tokens on a grid. The game is played on an M x M grid, and Alex starts with a token at the top-left corner of the grid (position (1,1)). The objective is to move the token to the bottom-right corner (position (M,M)). However, Alex\'s token can only move in a specific manner: 1. The token can move right by 1 step (i.e., from (i, j) to (i, j+1)). 2. The token can move down by 1 step (i.e., from (i, j) to (i+1, j)). In addition to these movements, there are some special cells on the grid that Alex needs to avoid, marked by an obstacle. Alex cannot move the token into these cells. Determine the number of distinct paths Alex can take to reach the bottom-right corner of the grid from the top-left corner, while avoiding the obstacles. Since the result can be very large, return the number of paths modulo 1000000007 (10^9 + 7). Input The first line contains two integers M (2 ≤ M ≤ 1000), K (0 ≤ K ≤ 10^6) — the size of the grid and the number of obstacles. The next K lines each contain two integers r and c (1 ≤ r, c ≤ M) - representing the row and column of an obstacle on the grid. Output Print a single integer — the number of distinct paths from (1,1) to (M,M), modulo 1000000007. Sample Input 1 3 1 2 2 Sample Output 1 2 Explanation 1 There are 2 distinct paths for the token to reach from (1,1) to (3,3) avoiding the obstacle at (2,2). The paths are: 1. (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) 2. (1,1) -> (1,2) -> (2,2) [Blocked] -> Consider the alternative -> (2,1) -> (3,1) ->(3,2 ).","solution":"def number_of_paths(M, K, obstacles): MOD = 1000000007 # Initialize grid grid = [[0] * M for _ in range(M)] # Place obstacles on grid for (r, c) in obstacles: grid[r-1][c-1] = -1 # Set starting point if grid[0][0] == -1 or grid[M-1][M-1] == -1: return 0 grid[0][0] = 1 # Calculate number of paths for i in range(M): for j in range(M): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] grid[i][j] %= MOD return grid[M-1][M-1] # Function to format input (for testing purposes) def format_input(input_data): input_lines = input_data.split(\'n\') M, K = map(int, input_lines[0].split()) obstacles = [tuple(map(int, line.split())) for line in input_lines[1:1+K]] return M, K, obstacles"},{"question":"In data analysis, it’s often helpful to perform operations on matrices, such as rotating them. In a clockwise rotation, each element in the matrix is shifted to the position of the element 90 degrees to its left. For example, a 3x3 matrix will be transformed in such a way that the first row becomes the last column, the second row becomes the second-to-last column, and so on. Implement a function that rotates a given NxN matrix 90 degrees clockwise, in-place. Input The first line of the input contains an integer T, the number of test cases. Each test case starts with an integer N, indicating the dimensions of the NxN matrix, followed by N lines of N integers representing the matrix elements. Output For each test case, output the NxN matrix after it has been rotated 90 degrees clockwise. Each row of the matrix should be printed on a new line. Example Input: 2 3 1 2 3 4 5 6 7 8 9 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output: 7 4 1 8 5 2 9 6 3 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4","solution":"def rotate_90_degrees_clockwise(matrix): Rotates the NxN matrix 90 degrees clockwise in place. N = len(matrix) # Transpose the matrix for i in range(N): for j in range(i, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(N): matrix[i].reverse() def process_input_and_rotate_matrices(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 results = [] for _ in range(T): N = int(input_lines[index]) matrix = [] for i in range(1, N + 1): matrix.append(list(map(int, input_lines[index + i].split()))) rotate_90_degrees_clockwise(matrix) for row in matrix: results.append(\' \'.join(map(str, row))) index += N + 1 return \'n\'.join(results)"},{"question":"Given an integer array arr[] of size N. Find the second smallest and second largest element in the array. If there is no second smallest or second largest element, return -1 for that value. Example 1: Input: arr[] = [4, 2, 8, 6, 1] Output: [2, 6] Explanation: Second smallest element is 2 and second largest element is 6. Example 2: Input: arr[] = [7, 4, 3, 1, 1, 1] Output: [3, 4] Explanation: Second smallest element is 3 and second largest element is 4. Example 3: Input: arr[] = [5, 5, 5] Output: [-1, -1] Explanation: There is no second smallest or second largest element. Your Task: You don\'t need to read input or print anything. Your task is to complete the function secondSmallestAndLargest() which takes the array arr[] and its size N as input parameters and returns a pair/vector containing exactly two integers: the second smallest and second largest elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def secondSmallestAndLargest(arr): Finds the second smallest and second largest elements in the array. :param arr: List[int] - input array :return: List[int] - list containing second smallest and second largest elements, or -1 for either if they don\'t exist if len(arr) < 2: return [-1, -1] # Initialize smallest and second smallest smallest = float(\'inf\') second_smallest = float(\'inf\') # Initialize largest and second largest largest = float(\'-inf\') second_largest = float(\'-inf\') for num in arr: # Update smallest and second smallest if num < smallest: second_smallest = smallest smallest = num elif num != smallest and num < second_smallest: second_smallest = num # Update largest and second largest if num > largest: second_largest = largest largest = num elif num != largest and num > second_largest: second_largest = num # Replace infinity values with -1 if they were not updated if second_smallest == float(\'inf\'): second_smallest = -1 if second_largest == float(\'-inf\'): second_largest = -1 return [second_smallest, second_largest]"},{"question":"# Task You are given a list of strings where each string represents an order and contains a product\'s name and its price. Your task is to calculate the total revenue from all orders. The format of each string is `\\"product_name:price\\"`, where the `product_name` is a non-empty string containing only letters, and `price` is a positive integer representing the price of the product. Write a function that takes the list of orders and returns the total revenue as an integer. # Input/Output `[input]` string array `orders` A string array that contains the orders, where each order follows the format `\\"product_name:price\\"`. `[output]` an integer the total revenue from all orders. # Example For ``` orders = [ \\"apple:100\\", \\"banana:200\\", \\"apple:150\\", \\"mango:300\\", \\"banana:100\\", \\"grape:400\\" ] ``` the output should be `1250`. Explanation: The total revenue is `100 + 200 + 150 + 300 + 100 + 400 = 1250`.","solution":"def calculate_total_revenue(orders): Calculate the total revenue from all orders. Args: orders (list): A list of strings where each string contains a product name and its price separated by a colon. Returns: int: The total revenue. total_revenue = 0 for order in orders: _, price = order.split(\':\') total_revenue += int(price) return total_revenue"},{"question":"Emily has just learned about Caesar Cipher encryption technique! In Caesar Cipher, each letter in the plaintext is shifted a fixed number of places down the alphabet. For example, with a shift of 3, \'a\' would be encrypted to \'d\', \'b\' to \'e\', \'c\' to \'f\', and so on. At the end of the alphabet, encryption would wrap around, so \'x\' would be encrypted to \'a\', \'y\' to \'b\', and \'z\' to \'c\'. Emily decides to write a program to encrypt a given message using this technique. Write a program that encrypts a given message using Caesar Cipher with a given shift value. -----Input----- The first line contains a single integer, the shift value (1 ≤ shift ≤ 25). The second line contains the plaintext message. The message will consist only of lowercase letters and spaces. The total number of characters will be at most 100. -----Output----- Output the encrypted message on a single line. -----Examples----- Sample Input: 3 hello world Sample Output: khoor zruog","solution":"def caesar_cipher(shift, message): Encrypts the given message using Caesar Cipher with the given shift value. :param shift: The number of positions each letter in the message is shifted. :param message: The plaintext message to be encrypted. :return: The encrypted message. encrypted_message = [] for char in message: if char == \\" \\": encrypted_message.append(\\" \\") else: shifted_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) encrypted_message.append(shifted_char) return \\"\\".join(encrypted_message)"},{"question":"You are given a rectangular grid with cells arranged in r rows and c columns. Each cell has a specific energy value. You need to find a path from the top-left cell (1, 1) to the bottom-right cell (r, c) such that the sum of the energy values of the cells in the path is minimized. You can only move to the right or down from a cell at each step. Input The first line contains two integers r and c (1 ≤ r, c ≤ 500), representing the number of rows and columns in the grid, respectively. Each of the next r lines contains c integers, specifying the energy values of the cells in the grid. Each energy value is an integer between 1 and 1000. Output Print the minimum energy sum required to move from the top-left to the bottom-right cell. Example Input 3 4 5 9 1 3 4 7 2 6 8 5 3 2 Output 15 Note In the given example, the path with minimum energy sum is: (5 → 9 → 1 → 2 → 3 → 2). The sum of the values along this path is 5 + 9 + 1 + 2 + 3 + 2 = 22.","solution":"def min_energy_path(grid): Finds the minimum energy path in a grid from top-left to bottom-right. r = len(grid) c = len(grid[0]) # Create a 2D dp array to store the minimum path sum up to each cell dp = [[0] * c for _ in range(r)] # Initialize the starting point dp[0][0] = grid[0][0] # Initialize the first row (can only come from the left) for j in range(1, c): dp[0][j] = dp[0][j-1] + grid[0][j] # Initialize the first column (can only come from above) for i in range(1, r): dp[i][0] = dp[i-1][0] + grid[i][0] # Compute the minimum path sum for each cell in the grid for i in range(1, r): for j in range(1, c): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell will have the minimum path sum return dp[r-1][c-1] # Function to parse the input def min_energy_path_from_input(input_str): lines = input_str.strip().split(\'n\') r, c = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return min_energy_path(grid) # Example usage input_str = 3 4 5 9 1 3 4 7 2 6 8 5 3 2 print(min_energy_path_from_input(input_str)) # Output 22"},{"question":"Given an array of integers, a \\"special integer\\" is defined as an integer which appears exactly once in the array. Write a program to find the largest \\"special integer\\" from the array. If no such integer exists, return -1. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of integers in the array. The second line contains n integers a1, a2, ..., an (|ai| ≤ 109) — the elements of the array. Output Print the largest \\"special integer\\" in the array. If no such integer exists, print -1. Examples Input 7 1 2 2 3 4 4 5 Output 5 Input 4 10 10 20 30 Output 30 Input 5 7 7 7 7 7 Output -1","solution":"def find_largest_special_integer(n, arr): Finds the largest integer in the array that appears exactly once. Parameters: n (int): The number of integers in the array. arr (List[int]): The list of integers. Returns: int: The largest special integer or -1 if no such integer exists. from collections import Counter count = Counter(arr) special_integers = [num for num, freq in count.items() if freq == 1] return max(special_integers) if special_integers else -1"},{"question":"The wizard you work for has a unique lock system that opens only with the correct sequence of spells. The lock\'s sequence can be represented as a string `S` consisting of lowercase English letters (\'a\' - \'z\'). However, the wizard has a special dislike for certain substrings and you\'ll need to avoid them to unlock the system. Given an input string `S` and a list of forbidden substrings, write a program that outputs the length of the longest substring of `S` that does not contain any of the forbidden substrings. Input - The first line contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. - For each test case: - The first line contains a string `S` (1 ≤ |S| ≤ 10^5). - The second line contains an integer `F` (1 ≤ F ≤ 50), the number of forbidden substrings. - The next `F` lines each contain a forbidden substring (1 ≤ |forbidden substring| ≤ 10). Output For each test case, print the length of the longest substring of `S` that does not contain any of the forbidden substrings. Example Input ``` 2 abracadabra 2 abra cad xyzzy 1 yz ``` Output ``` 3 3 ``` Explanation In the first test case, \\"abracadabra\\", the forbidden substrings are \\"abra\\" and \\"cad\\". The sequence \\"abracadabra\\" cannot have \\"abra\\" or \\"cad\\" in the substring. The longest valid substrings are \\"bra\\", \\"ad\\", and \\"bra\\" each of length 3. In the second test case, \\"xyzzy\\", the forbidden substring is \\"yz\\". The longest valid substrings are \\"x\\", \\"z\\", \\"z\\", \\"zy\\", and \\"yz\\", each of length 2. Hence the longest valid substring has a length of 3 which is \\"zzy\\".","solution":"def longest_valid_substring(S, forbidden_substrings): max_length = 0 current_start = 0 forbidden_set = set(forbidden_substrings) n = len(S) i = 0 while i < n: found_forbidden = False for f in forbidden_set: if S.startswith(f, i): found_forbidden = True current_start = i + 1 break if not found_forbidden: max_length = max(max_length, i - current_start + 1) i += 1 return max_length def process_test_cases(T, test_cases): results = [] for case in test_cases: S, F, forbidden_substrings = case result = longest_valid_substring(S, forbidden_substrings) results.append(result) return results"},{"question":"Given an unsorted array of integers, write a function named \\"find_kth_largest\\" that takes two arguments: an array of integers and an integer k, and returns the k-th largest element in the array. For example, given the array [3, 2, 1, 5, 6, 4] and k = 2, your function should return 5. Note that k is guaranteed to be a positive integer and less than or equal to the length of the array. To solve this problem, you may not use the built-in sorting functions directly. Algorithms such as quickselect or max-heap can be considered to achieve the desired result efficiently.","solution":"def partition(arr, low, high): pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] > pivot: i += 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quickselect(arr, low, high, k): if low < high: p = partition(arr, low, high) if p == k: return arr[p] elif p > k: return quickselect(arr, low, p - 1, k) else: return quickselect(arr, p + 1, high, k) return arr[low] def find_kth_largest(nums, k): return quickselect(nums, 0, len(nums) - 1, k - 1)"},{"question":"A group of hikers is exploring a mountain trail. The trail is a circle, meaning it starts and ends at the same point. Each hiker starts from the beginning of the trail at the same time and walks at a constant speed. The trail has markers at regular intervals, and we want to know when all the hikers will next meet at the starting point together. Each hiker has a different walking speed, which is the number of minutes it takes for them to reach the next marker. Given their walking speeds, find the time in minutes when all hikers will be at the start of the trail together for the first time after starting. -----Input----- The first line of the input contains a single integer t (1 leq t leq 1000) — the number of test cases. Each of the next t lines contains n integers that represent the walking speeds of each hiker in minutes. Each test case description begins with an integer n (1 leq n leq 100) — the number of hikers. It is followed by n integers s_1, s_2, ..., s_n (1 leq s_i leq 10^6) — the walking speeds of the hikers in minutes. -----Output----- For each test case, output one integer — the minimum number of minutes until all hikers meet again at the starting point. -----Examples----- Input 3 2 3 4 3 1 2 3 4 2 3 6 9 Output 12 6 18 -----Note----- In the first test case, the first hiker takes 3 minutes to reach each marker, and the second hiker takes 4 minutes. The least common multiple of 3 and 4 is 12, so they will both meet at the starting point again after 12 minutes. In the second test case, the hikers take 1, 2, and 3 minutes to reach each marker, respectively. The least common multiple of these is 6, so they all meet at the starting point again after 6 minutes. In the third test case, the hikers take 2, 3, 6, and 9 minutes, respectively. The least common multiple of these values is 18, so they will meet at the starting point again after 18 minutes.","solution":"import math from functools import reduce # Function to find the Least Common Multiple (LCM) of two numbers def lcm(a, b): return abs(a * b) // math.gcd(a, b) # Function to find the LCM of a list of numbers using reduce def find_lcm_for_list(lst): return reduce(lcm, lst) def find_hikers_meeting_time(test_cases): result = [] for case in test_cases: result.append(find_lcm_for_list(case)) return result"},{"question":"A charity organization is hosting an auction where bidders can place bids on items. Each bid consists of the bidder\'s name, the item name, and the bid amount. At the end of the auction, the organization wants to announce the highest bid for each item along with the bidder\'s name. Write a program that reads the bids and outputs the highest bid for each item. Input The first line contains integer n (1 ≤ n ≤ 100) — the number of bids. Each of the next n lines contains a bid in the form of three space-separated values: a string b (1 ≤ |b| ≤ 100) representing the bidder\'s name, a string i (1 ≤ |i| ≤ 100) representing the item name, and an integer a (1 ≤ a ≤ 1000000) representing the bid amount. Output For each item that received at least one bid, output a line containing the item name, the highest bid amount, and the bidder\'s name who placed the highest bid. The output items should be sorted in the order they appeared in the input. Examples Input 5 John painting 300 Alice sculpture 500 John sculpture 700 Alice painting 250 Tom vase 400 Output painting 300 John sculpture 700 John vase 400 Tom","solution":"def find_highest_bids(n, bids): Finds the highest bid for each item along with the bidder\'s name. Parameters: n : int : Number of bids bids : list of tuple : List of tuples where each tuple contains: (bidder\'s name, item name, bid amount) Returns: list of tuple : List of tuples where each tuple contains: (item name, highest bid amount, bidder\'s name) item_bids = {} item_order = [] for name, item, amount in bids: if item not in item_bids: item_bids[item] = (amount, name) item_order.append(item) else: if amount > item_bids[item][0]: item_bids[item] = (amount, name) result = [(item, item_bids[item][0], item_bids[item][1]) for item in item_order] return result # Function to read input and format output def auction_results(input_data): input_lines = input_data.strip().split(\\"n\\") n = int(input_lines[0]) bids = [tuple(line.split())[:2] + (int(line.split()[-1]),) for line in input_lines[1:]] highest_bids = find_highest_bids(n, bids) output_lines = [f\\"{item} {amount} {name}\\" for item, amount, name in highest_bids] return \\"n\\".join(output_lines) # Example usage: input_data = 5 John painting 300 Alice sculpture 500 John sculpture 700 Alice painting 250 Tom vase 400 print(auction_results(input_data))"},{"question":"Given a sorted array of n integers, possibly with duplicates, you need to find the index of a given element \'x\' in the array. If \'x\' is found multiple times, return the first occurrence of \'x\'. If \'x\' is not found, return -1. You need to use a binary search algorithm to solve this problem. Example 1: Input: arr = [1, 2, 4, 4, 5, 6, 8], x = 4 Output: 2 Explanation: The element 4 is found at index 2. Example 2: Input: arr = [1, 1, 1, 1, 1], x = 1 Output: 0 Explanation: The element 1 is found at index 0, as it is the first occurrence from the left. Example 3: Input: arr = [2, 3, 5, 7, 11], x = 4 Output: -1 Explanation: The element 4 is not found in the array; hence, the output is -1. Your Task: The task is to complete the function firstOccurrence() which takes a sorted array \'arr\' and an integer \'x\' as input and returns the index of the first occurrence of \'x\'. If \'x\' is not present in the array, return -1. Expected Time Complexity: O(log N). Expected Auxiliary Space: O(1). Constraints: 1 <= n <= 10^5 -10^5 <= arr[i] <= 10^5 -10^5 <= x <= 10^5 Note: The Input/Output format and Examples given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from the stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"def firstOccurrence(arr, x): Finds the index of the first occurrence of x in a sorted array arr using binary search. If x is not found, returns -1. low = 0 high = len(arr) - 1 result = -1 while low <= high: mid = (low + high) // 2 if arr[mid] == x: result = mid # Potential first occurrence high = mid - 1 # Look on the left side for the first occurrence elif arr[mid] < x: low = mid + 1 else: high = mid - 1 return result"},{"question":"Given a string `s` that consists of only digits, return all possible valid IP addresses that can be obtained by placing three dots (`.`) in the string. A valid IP address consists of exactly four integers, each integer is between `0` and `255`, separated by single dots, and cannot have leading zeros. For example: - `010010` can be converted into `[\\"0.10.0.10\\", \\"0.100.1.0\\"]`. # Rules * You may assume the input string length is at most 12. * An IP address should not have leading zeros unless the number is exactly 0. # Description Write a function that takes a string `s` as input and returns a list of all possible valid IP addresses. ```python def restore_ip_addresses(s: str) -> List[str]: # Your code here ```","solution":"from typing import List def is_valid_segment(segment: str) -> bool: Check if a segment is a valid IP segment. if len(segment) > 1 and segment[0] == \'0\': return False if not 0 <= int(segment) <= 255: return False return True def restore_ip_addresses(s: str) -> List[str]: Given a string `s` that consists of only digits, return all possible valid IP addresses. res = [] n = len(s) if n > 12: return res # Early return if length of s is greater than 12 for i in range(1, min(4, n-2)): for j in range(i+1, min(i+4, n-1)): for k in range(j+1, min(j+4, n)): i_segment = s[:i] j_segment = s[i:j] k_segment = s[j:k] l_segment = s[k:] if all(map(is_valid_segment, [i_segment, j_segment, k_segment, l_segment])): res.append(f\\"{i_segment}.{j_segment}.{k_segment}.{l_segment}\\") return res"},{"question":"John is organizing his books on a shelf and wants to sort them based on the number of pages they have. Given a list of N integers where each integer represents the number of pages in a book, he wants to sort this list in non-decreasing order. However, if two books have the same number of pages, their relative order should remain the same as in the original list. Input: The first line contains an integer N, the number of books. The second line contains N space-separated integers representing the number of pages in each book. Output: Print the sorted list of pages, keeping the relative ordering of books with the same number of pages. Constraints: 1 ≤ N ≤ 10^5 1 ≤ Pages ≤ 10^6 SAMPLE INPUT 5 100 200 100 300 200 SAMPLE OUTPUT 100 100 200 200 300","solution":"def sort_books_by_pages(pages): Sorts the list of books by the number of pages in non-decreasing order, keeping the relative order of books with the same number of pages. :param pages: List of integers where each integer represents the number of pages in a book. :return: A new list of pages sorted in non-decreasing order. # Using the built-in `sorted` function with `stable` Timsort algorithm return sorted(pages)"},{"question":"A team of software developers is working on a new project management tool. They want to implement a feature that tracks the progress of various tasks. Each task can be in one of four stages: \\"Not Started\\", \\"In Progress\\", \\"Completed\\", and \\"Blocked\\". The team needs your help to write a program that calculates the overall project progress based on the status of individual tasks. To determine the project progress, you will use the following method: - \\"Not Started\\" contributes 0% to the progress. - \\"In Progress\\" contributes 50% to the progress. - \\"Completed\\" contributes 100% to the progress. - \\"Blocked\\" contributes 0% to the progress. The project progress percentage is calculated as the average contribution of all tasks. ------ Input ------ - The first line contains an integer N, the number of tasks. - The second line contains N space-separated strings, each representing the status of a task (\\"Not Started\\", \\"In Progress\\", \\"Completed\\", \\"Blocked\\"). ------ Output ------ Print the overall project progress as a percentage, rounded to the nearest integer. ------ Constraints ------ 1 leq N leq 100 ------ Example ------ Input: 5 \\"In Progress\\" \\"Completed\\" \\"Not Started\\" \\"Blocked\\" \\"Completed\\" Output: 50 Explanation: - \\"In Progress\\" contributes 50% - \\"Completed\\" contributes 100% - \\"Not Started\\" contributes 0% - \\"Blocked\\" contributes 0% - \\"Completed\\" contributes 100% Average contribution = (50 + 100 + 0 + 0 + 100) / 5 = 50%","solution":"def calculate_progress(N, statuses): Calculate the overall project progress based on task statuses. Parameters: - N: int, number of tasks - statuses: list of str, statuses of the tasks (\\"Not Started\\", \\"In Progress\\", \\"Completed\\", \\"Blocked\\") Returns: - int, overall project progress as a percentage rounded to the nearest integer contribution = { \\"Not Started\\": 0, \\"In Progress\\": 50, \\"Completed\\": 100, \\"Blocked\\": 0 } total_contribution = sum(contribution[status] for status in statuses) average_contribution = total_contribution / N return round(average_contribution)"},{"question":"Unique Digits Counter: Given a sequence of integers as input, write a program that counts the number of unique digits present in each integer. The program should be capable of handling multiple integers in a single input session and output the count of unique digits for each input number in the corresponding output line. The sequence of integers is given as input, each on a new line. For each integer, the program should output the number of distinct digits it contains. Note that leading zeros should be considered as digits as well. Input An integer is given in each input line. You may assume that each integer is non-negative and will have at most 10^9 digits. The end of the input is indicated by the word \\"END\\". Output Each output line should contain an integer representing the count of unique digits for the corresponding input number. No other characters should appear in the output. Example Input 12345 67890 11122 END Output 5 5 2","solution":"def count_unique_digits(sequence): Counts the number of unique digits in each integer present in the sequence. The sequence ends with the word \'END\'. Parameters: sequence (list of str): List of strings, each containing an integer or the word \'END\'. Returns: list of int: List of integers representing the count of unique digits for each input number. result = [] for number in sequence: if number == \'END\': break unique_digits = set(number) result.append(len(unique_digits)) return result"},{"question":"Sam is an avid gamer and loves solving puzzles in his spare time. He is currently playing a game where he has to navigate through complex mazes. The maze is represented as an n x n grid, where some cells are blocked, and others are open for passage. Sam can move only horizontally or vertically to an adjacent open cell. Diagonal moves are not allowed. Sam wants to know the shortest path from the start cell to the end cell. He might also be asked if there is no possible path between two given cells. Write a program that helps Sam determine the shortest path from a starting cell to a target cell. If there is no valid path from the start to the end, your program should output \\"NO PATH\\". Input - The first line of input contains two integers, n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), the size of the grid and the number of blocked cells respectively. - The next m lines each contain two integers, xi and yi (1 ≤ xi, yi ≤ n), indicating that the cell at position (xi, yi) is blocked. - The next line contains four integers, sx, sy, tx, and ty (1 ≤ sx, sy, tx, ty ≤ n), representing the start cell (sx, sy) and the end cell (tx, ty). Output - Output the length of the shortest path from (sx, sy) to (tx, ty). If no such path exists, output \\"NO PATH\\". Examples Input 5 4 1 2 2 2 3 2 4 2 1 1 5 5 Output 8 Input 5 5 1 2 2 2 3 2 4 2 5 2 1 1 5 5 Output NO PATH Note In the first example, the grid looks like this: ``` 1 0 1 0 0 1 0 1 0 0 1 0 1 0 0 1 0 1 0 0 1 0 0 0 0 ``` (1,1) can navigate to (5,5) in 8 steps, avoiding the blocked cells. In the second example, the column 2 is completely blocked, making it impossible to reach from (1,1) to (5,5), so the output is \\"NO PATH\\".","solution":"from collections import deque def shortest_path(n, m, blocked_cells, start, end): Find the shortest path in an n x n grid from start to end avoiding blocked cells. Parameters: - n: size of the grid (int) - m: number of blocked cells (int) - blocked_cells: list of tuples indicating blocked cells (list) - start: start cell coordinates (tuple) - end: end cell coordinates (tuple) Returns: - Length of the shortest path (int) or \\"NO PATH\\" if no path exists. # Building the grid grid = [[0] * n for _ in range(n)] for x, y in blocked_cells: grid[x-1][y-1] = 1 # BFS for shortest path sx, sy = start tx, ty = end sx, sy, tx, ty = sx-1, sy-1, tx-1, ty-1 # Convert to 0-indexed if grid[sx][sy] == 1 or grid[tx][ty] == 1: return \\"NO PATH\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (tx, ty): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return \\"NO PATH\\""},{"question":"John is the mayor of the city, and he is responsible for city planning. The city is modeled as a rectangular grid with m rows and n columns, where each cell represents a building plot. Each plot can either be empty (represented by 0) or occupied (represented by 1). John wants to identify the largest square area of occupied plots in the city to plan for future constructions accordingly. Write a function to determine the size of the largest square sub-grid consisting only of occupied plots (1s) in the given grid. ----Input---- The first line contains two integers m and n (1 ≤ m, n ≤ 1000), the dimensions of the grid. Each of the following m lines contains n integers (either 0 or 1) separated by spaces, representing the grid. ----Output---- Output a single integer, the side length of the largest square sub-grid that consists entirely of 1s. ----Examples---- Input 5 6 1 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 0 Output 3 Input 4 4 1 1 1 1 1 1 1 1 1 1 1 0 1 1 0 0 Output 3","solution":"def largest_square_area(m, n, grid): if m == 0 or n == 0: return 0 dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if dp[i][j] > max_side: max_side = dp[i][j] return max_side"},{"question":"Consider an isolated computer network with `n` computers and `m` direct communication channels between them. The communication channels are bidirectional, i.e., if there is a communication channel between computer `u` and computer `v`, then computer `u` can send messages to computer `v` and vice versa. Each computer has at most one direct communication channel to any other computer. Your task is to determine if there is a way to create a communication plan such that all computers are directly or indirectly connected, using exactly one channel from each computer. If possible, provide the connections. Input The first line of the input contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) — the number of computers and the number of direct communication channels in the network, respectively. Each of the next `m` lines contains two integers `u_i` and `v_i` (1 ≤ u_i, v_i ≤ n) — indicating a direct communication channel between computer `u_i` and computer `v_i`. It is guaranteed that there are no duplicate channels. Output If it is possible to create a communication plan meeting the above conditions, print `YES` on the first line. On each subsequent line, print two integers representing the computers connected by each channel in the communication plan. If it is not possible, print `NO`. Examples Input 4 5 1 2 2 3 3 4 4 1 1 3 Output YES 1 2 2 3 3 4 4 1 Input 3 1 1 2 Output NO Note In the first example, the network can be organized such that all computers are connected in a cycle, using exactly one channel from each computer. In the second example, it is impossible to connect all computers with exactly one channel per computer as there are too few channels to form the required connections.","solution":"def create_plan(n, m, connections): from collections import defaultdict, deque if n - 1 > m: return \\"NO\\" def bfs(start, graph, visited): queue = deque([start]) visited[start] = True spanning_tree = [] while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) spanning_tree.append((node, neighbor)) return spanning_tree graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) spanning_tree = bfs(1, graph, visited) if all(visited[1:]): return [\\"YES\\"] + [f\\"{u} {v}\\" for u, v in spanning_tree] else: return \\"NO\\" # Example Usage: # n = 4 # m = 5 # connections = [(1, 2), (2, 3), (3, 4), (4, 1), (1, 3)] # print(create_plan(n, m, connections))"},{"question":"Anna is an organizer for a local marathon event called RunFest. She needs to ensure that there are enough hydration points (water stations) along the marathon route to keep the runners adequately hydrated. The marathon route is represented as a straight line, and runners can only access hydration points if they are within a certain range. Anna has n hydration points, each with a fixed position and range. The position of a hydration point i is represented by x_i, and its range is r_i which means it can cover all positions from (x_i - r_i) to (x_i + r_i). Anna needs to place water stations in such a way that every position on the marathon route from 0 to L is within reach of at least one hydration point. If it is not possible to cover the entire route with the given hydration points, she must indicate that too. Help Anna determine the minimum number of hydration points needed to cover the entire marathon route or if it is not possible. Input The first line contains two integers n and L (1 ≤ n ≤ 10^5, 1 ≤ L ≤ 10^9) — the number of hydration points and the length of the marathon route. The next n lines describe the hydration points. The i-th of these lines contains two integers x_i and r_i (0 ≤ x_i ≤ L, 0 ≤ r_i ≤ L) — the position and the range of the hydration point i. Output Print a single integer — the minimum number of hydration points needed to cover the marathon route from 0 to L. If it is not possible to cover the entire route, print -1. Example Input 5 10 1 2 2 3 5 2 7 1 9 3 Output 3","solution":"def min_hydration_points(n, L, hydr_points): # Sort hydration points by their leftmost coverage point (x-r) hydr_points.sort(key=lambda hp: hp[0] - hp[1]) count = 0 covered_till = 0 i = 0 while covered_till < L: max_reachable = covered_till # Find the furthest point that can be reached with the current set of hydration points while i < n and hydr_points[i][0] - hydr_points[i][1] <= covered_till: max_reachable = max(max_reachable, hydr_points[i][0] + hydr_points[i][1]) i += 1 if max_reachable == covered_till: # No more progress can be made, thus not enough coverage return -1 count += 1 covered_till = max_reachable return count"},{"question":"In an enchanted forest, there lives a rare species of birds known as \'FizzBuzz\' birds. These birds communicate with each other in a unique way through numerical sequences. Each bird starts chirping numbers starting from 1. However, their chirping follows special rules: - If the number is divisible by 3, the bird chirps \\"Fizz\\". - If the number is divisible by 5, the bird chirps \\"Buzz\\". - If the number is divisible by both 3 and 5, the bird chirps \\"FizzBuzz\\". - Otherwise, the bird chirps the actual number. Being a scientist fascinated by these birds, you want to study their communication. Your task is to simulate the sequence of chirps up to a given number n. Input A single integer n (1 ≤ n ≤ 100) representing the number up to which the FizzBuzz birds will chirp. Output Output the sequence of chirps from 1 to n, each on a new line. Examples Input 5 Output 1 2 Fizz 4 Buzz Input 15 Output 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz","solution":"def fizz_buzz(n): Returns the FizzBuzz sequence from 1 to n. Parameters: n (int): The upper limit of the sequence (inclusive). Returns: list of str: The FizzBuzz sequence where each element follows the rule. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Write a function `is_anagram` that takes two strings and returns `True` if the strings are anagrams of each other (ignore case and spaces), and `False` otherwise. Do not use any built-in sorting functions. Consistently use lowercase for the comparison.","solution":"def is_anagram(s1, s2): Returns True if s1 and s2 are anagrams of each other (ignoring case and spaces), False otherwise. s1 = s1.replace(\\" \\", \\"\\").lower() s2 = s2.replace(\\" \\", \\"\\").lower() if len(s1) != len(s2): return False char_count = {} for char in s1: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s2: if char in char_count: char_count[char] -= 1 if char_count[char] < 0: return False else: return False return True"},{"question":"You are working on a project that manages a warehouse\'s inventory. Each product in the warehouse has a unique ID and a certain quantity available. We need to track the inventory of products and handle incoming shipment or outgoing order requests. Implement the `Warehouse` class to perform these operations. The `Warehouse` class should have the following methods: - `Warehouse(int[] productIds, int[] quantities)`: Constructor that initializes the inventory with given product IDs and their respective quantities. - `void restock(int productId, int amount)`: Method to restock (add) a certain amount of the specified product. - `boolean dispatch(int productId, int amount)`: Method to dispatch (subtract) a certain amount of the specified product. If the warehouse has sufficient quantity of the product, subtract the specified amount and return `true`. Otherwise, return `false`. Note: - All product IDs are unique and valid. - All quantities are non-negative integers. - A product cannot have a negative quantity at any point. Example: ``` Input [\\"Warehouse\\", \\"dispatch\\", \\"restock\\", \\"dispatch\\", \\"dispatch\\", \\"restock\\", \\"dispatch\\"] [[[101, 202, 303, 404], [50, 20, 30, 40]], [202, 10], [303, 5], [202, 15], [101, 60], [404, 10], [404, 50]] Output [null, true, null, true, false, null, true] Explanation Warehouse warehouse = new Warehouse([101, 202, 303, 404], [50, 20, 30, 40]); warehouse.dispatch(202, 10); // return true, 202 is decreased to 10 warehouse.restock(303, 5); // 303 is increased to 35 warehouse.dispatch(202, 15); // return true, 202 is decreased to 5 warehouse.dispatch(101, 60); // return false, insufficient stock for 101 warehouse.restock(404, 10); // 404 is increased to 50 warehouse.dispatch(404, 50); // return true, 404 is decreased to 0 ``` Constraints: 1. 1 <= productIds.length <= 200 2. 1 <= productIds[i] <= 1000 3. quantities.length == productIds.length 4. 0 <= quantities[i] <= 1000 5. 1 <= amount <= 100 6. At most 1000 restock or dispatch calls will be made.","solution":"class Warehouse: def __init__(self, productIds, quantities): Initializes the warehouse with given product IDs and their respective quantities. self.inventory = {pid: quantities[i] for i, pid in enumerate(productIds)} def restock(self, productId, amount): Restocks (adds) a certain amount of the specified product. if productId in self.inventory: self.inventory[productId] += amount def dispatch(self, productId, amount): Dispatches (subtracts) a certain amount of the specified product. If the warehouse has sufficient quantity, subtract the amount and return True. Otherwise, return False. if productId in self.inventory and self.inventory[productId] >= amount: self.inventory[productId] -= amount return True return False"},{"question":"Write a function that takes an array of integers representing the amount of time each student spends studying each day in a week and returns the average study time. The function should ignore the highest and the lowest study times to prevent outliers from skewing the results. The array will contain exactly 7 elements corresponding to the study times for each day from Monday to Sunday. Example: ```python study_times = [2, 6, 3, 5, 8, 4, 1] average_study_time(study_times) # should return 4 ``` Note: The function should account for the possibility that the highest and lowest times might be the same value. In that case, only one of each should be removed before calculating the average.","solution":"def average_study_time(study_times): Calculates the average study time ignoring the highest and lowest times. Args: study_times (list): A list of 7 integers representing study times for each day. Returns: float: The average study time after removing the highest and lowest values. if len(study_times) != 7: raise ValueError(\\"List must contain exactly 7 elements.\\") sorted_times = sorted(study_times) trimmed_times = sorted_times[1:-1] # Remove the lowest and highest return sum(trimmed_times) / len(trimmed_times)"},{"question":"Design an algorithm that simulates the number of customers entering a store throughout the day. Assume that the number of customers entering the store each hour follows a Poisson distribution with a given average rate λ (lambda). Assume the store operates for n hours, and the average rate λ remains constant throughout the day. Your task is to simulate the total number of customers entering the store in a day using this model and provide the expected number of customers based on 1000 simulations. -----Input----- The input consists of two integers λ and n (1 ≤ λ, n ≤ 1000), where λ is the average rate of customers entering per hour, and n is the number of hours the store operates. -----Output----- Print a single integer — the expected number of customers entering the store in a day based on 1000 simulations. -----Examples----- Input 5 8 Output 39 Input 7 10 Output 69","solution":"import numpy as np def simulate_customers(lambda_rate, hours, simulations=1000): Simulates the total number of customers entering the store in a day using a Poisson distribution for a given number of hours and average rate (lambda). :param lambda_rate: average rate of customers entering per hour :param hours: number of hours the store operates :param simulations: number of simulations to run (default: 1000) :return: expected number of customers entering the store in a day total_customers = [] for _ in range(simulations): customers_per_day = np.random.poisson(lambda_rate, hours).sum() total_customers.append(customers_per_day) expected_customers = np.mean(total_customers) return round(expected_customers) # Example while calling the function # print(simulate_customers(5, 8)) def main(): import sys input = sys.stdin.read data = input().strip().split() lambda_rate = int(data[0]) hours = int(data[1]) print(simulate_customers(lambda_rate, hours)) if __name__ == \\"__main__\\": main()"},{"question":"To help manage the university’s shared resources, the university is implementing a booking system for study rooms. Each study room can be booked for a number of time slots during the day, where a time slot is a fixed one-hour period. However, some rooms are not available for the entire day. You are tasked with designing the logic for checking availability and booking a room. Your task is to implement the `check_and_book` function which takes an array of tuples representing the availability of different study rooms and another array of tuples representing requested time slots to book. Each tuple in the availability array contains the start and end times (in 24-hour format) during which the room is available. Each tuple in the requests array contains the desired start and end times for booking. The function should return an array of booleans corresponding to each request indicating whether the room can be booked or not without any conflicts. # Function Signature ```python def check_and_book(availability: List[Tuple[int, int]], requests: List[Tuple[int, int]]) -> List[bool]: ``` # Input - `availability`: A list of tuples. Each tuple contains two integers, the start time and the end time (both inclusive) during which a study room is available. - `requests`: A list of tuples. Each tuple contains two integers, the start time and the end time (both inclusive) of the requested booking times. # Output - A list of booleans. Each boolean corresponds to a request and should be `True` if the room can be booked for that time slot without any conflicts, otherwise `False`. # Example ```python availability = [(9, 12), (14, 17)] requests = [(9, 10), (11, 13), (14, 16), (17, 18)] # Output: [True, False, True, False] ``` # Constraints - The intervals within `availability` may overlap. - The requests should not overlap with any unavailable time within the given `availability`. - All times are given as integers from 0 to 23. - Length of `availability` and `requests` will not exceed 10^3. # Note - A request is considered valid if it falls entirely within any single available slot. - Overlapping requests or requests outside available times are not valid. Implement the `check_and_book` function.","solution":"from typing import List, Tuple def check_and_book(availability: List[Tuple[int, int]], requests: List[Tuple[int, int]]) -> List[bool]: def is_within_request(avail_slot, req_slot): return avail_slot[0] <= req_slot[0] and avail_slot[1] >= req_slot[1] result = [] for req in requests: can_book = any(is_within_request(avail, req) for avail in availability) result.append(can_book) return result"},{"question":"In a city, there are several buildings aligned in a straight line. Each building has a certain height. You are given an array representing the heights of buildings in the same order. Your task is to find out, for each building, the height of the next taller building to its right (i.e., the closest taller building towards the end of the array). If there is no taller building towards the end, output -1 for that building. Input: The first line of input contains an integer T, the number of test cases. Each test case contains two lines: - The first line consists of an integer N, the number of buildings. - The second line contains N space-separated integers representing the heights of the buildings. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100,000 1 ≤ height of buildings ≤ 1,000,000 Output: For each test case output a single line containing N space-separated integers representing the height of the next taller building to the right for each building. If there is no such building, output -1 for that building. SAMPLE INPUT 2 5 4 2 6 3 5 4 1 3 2 4 SAMPLE OUTPUT 6 6 -1 5 -1 3 4 4 -1 Explanation Test case 1: Building 1 (height = 4) → the next taller building is 3rd (height = 6). Building 2 (height = 2) → the next taller building is 3rd (height = 6). Building 3 (height = 6) → there is no taller building after it. Building 4 (height = 3) → the next taller building is 5th (height = 5). Building 5 (height = 5) → there is no taller building after it. Test case 2: Building 1 (height = 1) → the next taller building is 2nd (height = 3). Building 2 (height = 3) → the next taller building is 4th (height = 4). Building 3 (height = 2) → the next taller building is 4th (height = 4). Building 4 (height = 4) → there is no taller building after it.","solution":"def next_taller_building(buildings): Finds the height of the next taller building to the right for each building. If there is no taller building, returns -1 for that building. Parameters: buildings (List[int]): A list of heights of the buildings. Returns: List[int]: A list where each element is the height of the next taller building to the right. n = len(buildings) result = [-1] * n stack = [] for i in range(n): while stack and buildings[stack[-1]] < buildings[i]: index = stack.pop() result[index] = buildings[i] stack.append(i) return result def process_test_cases(T, test_cases): Processes multiple test cases and finds the next taller building for each case. Parameters: T (int): Number of test cases. test_cases (List[Tuple[int, List[int]]]): List of test cases where each test case is a tuple of: - number of buildings - list of building heights Returns: List[List[int]]: A list containing the results for each test case. results = [] for _, buildings in test_cases: results.append(next_taller_building(buildings)) return results"},{"question":"Problem Maze, a robot, is exploring a grid-based maze. The maze is represented by an NxM grid composed of empty spaces (denoted by \'.\') and walls (denoted by \'#\'). Maze starts at the top-left corner of the grid (cell (0,0)) and needs to reach the bottom-right corner (cell (N-1, M-1)). The robot can move up, down, left, or right at each step. Unfortunately, the maze contains traps. When Maze steps on a trap (denoted by \'T\'), it cannot move anymore and the exploration is over. The goal is to determine whether there is a path from the start to the end that does not involve stepping on any traps. If such a path exists, output \\"Yes\\", otherwise output \\"No\\". Constraints: - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 100 Input: The input is given in the following format: N M Grid layout of N rows and M columns The first line contains two integers N and M. The next N lines contain M characters each (either \'.\', \'#\', or \'T\' representing the grid layout). Output: Output \\"Yes\\" if there is a path from (0,0) to (N-1,M-1) that does not step on any traps. Otherwise, output \\"No\\". Examples: Input: 5 5 . . . . . . # # # . . . . . . . # T . . . . . . . Output: Yes Input: 3 3 . . T # . # T # . Output: No","solution":"def is_path_to_end(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and (x, y) not in visited def dfs(x, y): if not is_valid(x, y): return False if (x, y) == (n - 1, m - 1): return True visited.add((x, y)) for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)): if dfs(x + dx, y + dy): return True return False visited = set() return \\"Yes\\" if dfs(0, 0) else \\"No\\""},{"question":"Given an array `arr` consisting of `n` integers, where `arr[i]` represents the height of a skyscraper in a certain residential area, you need to calculate the total number of peak skyscrapers. A skyscraper is considered a peak if it is greater than both its neighbors. The first and the last skyscrapers cannot be considered as peaks because they do not have both left and right neighbors. Write a function `countPeaks` that takes in the array `arr` and returns the number of peak skyscrapers. # Input: - An integer `n` (3 ≤ n ≤ 1000): the number of skyscrapers. - An array `arr` of `n` integers (1 ≤ arr[i] ≤ 1000): the heights of the skyscrapers. # Output: - An integer representing the number of peak skyscrapers. # Example: Input: ``` 5 1 3 2 4 1 ``` Output: ``` 2 ``` Explanation: In this example, there are 5 skyscrapers with heights [1, 3, 2, 4, 1]. The skyscraper at index 1 (height 3) is a peak because it is greater than its neighbors (1 and 2). Similarly, the skyscraper at index 3 (height 4) is a peak because it is greater than its neighbors (2 and 1). Therefore, the total number of peaks is 2. # Note: - You can assume that the input array will always have at least 3 elements.","solution":"def countPeaks(arr): Returns the count of peak skyscrapers in the given array. A skyscraper is considered a peak if it is greater than both its neighbors. count = 0 for i in range(1, len(arr) - 1): if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]: count += 1 return count"},{"question":"Given two strings representing large integers X and Y, determine if X is greater than or equal to Y. Example 1: Input: X = \\"123456789123456789\\", Y = \\"123456789123456788\\" Output: True Explanation: 123456789123456789 is greater than 123456789123456788, so the output is True. Example 2: Input: X = \\"1000000000000000000\\", Y = \\"1000000000000000000\\" Output: True Explanation: Both integers are equal, so the output is True. Example 3: Input: X = \\"98765432109876543210\\", Y = \\"98765432109876543211\\" Output: False Explanation: 98765432109876543210 is less than 98765432109876543211, so the output is False. Your Task: Your task is to complete the function isGreaterOrEqual() which takes two strings as inputs and returns a boolean value (True or False). You do not need to take any input or print anything. Expected Time Complexity: O(|X| + |Y|) Expected Auxiliary Space: O(1) Constraints: 1 <= |X|, |Y| <= 10^{5}","solution":"def isGreaterOrEqual(X, Y): Determines if X is greater than or equal to Y. Parameters: X (str): The first large integer in string format. Y (str): The second large integer in string format. Returns: bool: True if X is greater than or equal to Y, False otherwise. # Compare lengths first if len(X) > len(Y): return True elif len(X) < len(Y): return False # If lengths are equal, do a string comparison if X >= Y: return True else: return False"},{"question":"Given a list of `N` unique integers and a target integer `K`, determine whether there exist two distinct indices `i` and `j` in the list such that the sum of the elements at these indices is equal to `K`. If such a pair exists, print `True`, otherwise print `False`. -----Input----- The first line of input consists of two integers, `N` (1 leq N leq 10^5), the number of elements in the list, and `K` (-10^9 leq K leq 10^9), the target sum. The second line contains `N` space-separated integers representing the elements of the list. Each integer a_i satisfies |a_i| leq 10^9. -----Output----- Output `True` if there exists a pair of elements in the list whose sum is equal to `K`. Otherwise, output `False`. -----Examples----- Sample Input 1: 5 9 2 4 3 5 7 Sample Output 1: True Sample Input 2: 4 8 1 2 4 2 Sample Output 2: False Sample Input 3: 6 0 1 -1 2 -2 3 -3 Sample Output 3: True","solution":"def has_pair_with_sum(numbers, k): Given a list of unique integers and a target integer k, determine whether there exist two distinct indices in the list such that the sum of the elements at these indices is equal to k. Args: numbers : list of int : List of unique integers k : int : Target sum Returns: bool : True if such a pair exists, False otherwise seen = set() for number in numbers: if k - number in seen: return True seen.add(number) return False"},{"question":"Write a function that takes a list/array of mixed elements and categorizes them based on their types, providing the following information: * Number of integer items * Number of float items * Number of string items * Number of boolean items The information should be returned in the form of a dictionary with the following keys: `{\'integers\': x, \'floats\': y, \'strings\': z, \'booleans\': w}` Where x, y, z, and w are the counts of the respective types in the input array. If an item type count is zero, it should not be included in the dictionary. Examples: ``` categorize_items([1, 2.0, \\"hello\\", True, 3]) ------------> {\'integers\': 2, \'floats\': 1, \'strings\': 1, \'booleans\': 1} categorize_items([0.0, 1, \\"world\\"]) ---------------------> {\'integers\': 1, \'floats\': 1, \'strings\': 1} categorize_items([False, 3.14, 5, \\"apple\\", \\"banana\\"]) ---> {\'integers\': 1, \'floats\': 1, \'strings\': 2, \'booleans\': 1} categorize_items([5, 10]) -------------------------------> {\'integers\': 2} categorize_items([]) -----------------------------------> {} ``` Remarks: * The input will always be a list/array. No need to validate the input. No nested structures are included. * Items can only be of integer, float, string, or boolean types. No other types of elements will be present. * This function needs to be efficient and handle edge cases effectively.","solution":"def categorize_items(items): Categorizes the elements in the input list based on their types. Parameters: items (list): List of elements to be categorized. Returns: dict: Dictionary with keys \'integers\', \'floats\', \'strings\', \'booleans\' and their respective counts as values. Keys with a zero count are not included in the dictionary. count_dict = {\'integers\': 0, \'floats\': 0, \'strings\': 0, \'booleans\': 0} for item in items: if isinstance(item, bool): count_dict[\'booleans\'] += 1 elif isinstance(item, int): count_dict[\'integers\'] += 1 elif isinstance(item, float): count_dict[\'floats\'] += 1 elif isinstance(item, str): count_dict[\'strings\'] += 1 return {k: v for k, v in count_dict.items() if v > 0}"},{"question":"In a distant land, there exists a magical garden with n unique types of flowers arranged in a row. Each type of flower has a specific value associated with it, representing its beauty. The garden\'s guardian decided to perform a special operation to enhance the garden\'s beauty. The operation consists of selecting a subarray of the flowers and rearranging them in such a way that their beauty values are in non-decreasing order. Your task is to determine the maximum possible sum of beauties of any chosen subarray after performing at most one such operation. -----Task----- Given a list of integers representing the beauty values of each type of flower in the garden, determine the maximum possible sum of beauties of any subarray after rearranging its elements to be in non-decreasing order. -----Input----- The first line of input contains an integer n (1 leq n leq 100000): the number of types of flowers in the garden. The second line contains n space-separated integers b_1, b_2, dots, b_n (1 leq b_i le 10^9), the beauty values of the flowers. -----Output----- Output one line with the answer – the maximum possible sum of beauties of any subarray after the rearrangement. -----Examples----- Sample Input: 5 3 1 2 5 4 Sample Output: 15 Sample Input: 4 10 20 30 40 Sample Output: 100","solution":"def max_sum_of_beauties(n, beauties): Determines the maximum possible sum of beauties of any chosen subarray after sorting it. :param n: int, the number of types of flowers in the garden. :param beauties: List[int], the beauty values of the flowers. :return: int, the maximum possible sum of beauties of any subarray after rearranging it. # The optimal subarray that yields the maximum possible sum of beauties # would be the entire array itself sorted in non-decreasing order. sorted_beauties = sorted(beauties) return sum(sorted_beauties)"},{"question":"You are given an implementation of a simple logging system where logs from multiple machines are recorded. Each log entry is a string containing a timestamp and an event message. Your task is to filter the log entries and return the messages for events happening within a specific time range. -----Input----- The input consists of: 1. A list of log entries, where each entry is formatted as `\\"YYYY-MM-DD HH:MM:SS Event message\\"`. 2. A string representing the starting timestamp for the filter in the format `\\"YYYY-MM-DD HH:MM:SS\\"`. 3. A string representing the ending timestamp for the filter in the format `\\"YYYY-MM-DD HH:MM:SS\\"`. -----Output----- Return a list of strings containing the event messages that occurred between the start and end timestamps, inclusive. The messages should be in the same order as they appear in the log. -----Assumptions----- - All timestamps in the logs and filter are in the correct format. - There are no duplicate timestamps. - The logs are sorted in ascending order by timestamps. -----Examples----- Sample Input 1: logs = [ \\"2023-01-01 10:00:00 System start\\", \\"2023-01-01 10:05:00 User login\\", \\"2023-01-01 10:15:00 File upload\\", \\"2023-01-01 10:20:00 Network error\\", \\"2023-01-01 10:25:00 System check\\", \\"2023-01-01 10:30:00 User logout\\" ] start = \\"2023-01-01 10:05:00\\" end = \\"2023-01-01 10:25:00\\" Sample Output 1: [ \\"User login\\", \\"File upload\\", \\"Network error\\", \\"System check\\" ] Sample Input 2: logs = [ \\"2022-12-31 23:59:59 New Year\'s Eve\\", \\"2023-01-01 00:00:00 Happy New Year\\", \\"2023-01-01 00:01:00 First event of the year\\" ] start = \\"2023-01-01 00:00:00\\" end = \\"2023-01-01 00:01:00\\" Sample Output 2: [ \\"Happy New Year\\", \\"First event of the year\\" ]","solution":"def filter_logs(logs, start, end): Filters log entries to return messages for events happening between start and end timestamps. Args: logs (list of str): List of log entries formatted as \\"YYYY-MM-DD HH:MM:SS Event message\\". start (str): Start timestamp \\"YYYY-MM-DD HH:MM:SS\\". end (str): End timestamp \\"YYYY-MM-DD HH:MM:SS\\". Returns: list of str: List of messages occurring between the start and end timestamps, inclusive. filtered_messages = [] for log in logs: timestamp, message = log[:19], log[20:] if start <= timestamp <= end: filtered_messages.append(message) return filtered_messages"},{"question":"Professor Snape is teaching his Hogwarts students about potions. He believes in practical learning and sets up a challenge to make a particular potion. The potion has specific ingredients that need to be mixed in a precise order. The potion-making can be described as a set of ingredients represented by letters, such as \'A\', \'B\', and \'C\', and an order to mix them. Each potion can be described as a string made up of these letters in the required sequence. Snape has given the students a list of all the possible potions and wants them to find the longest potion in the list that can be made by combining a subset of another given list of ingredients. The students can use each ingredient at most once. Write a function that takes two arguments: 1. A list of possible potions (represented as strings). 2. A list of available ingredients (represented as characters). The function should return the longest potion (string) that can be made using the provided ingredients. If there are multiple potions of the same maximum length, return the one that comes first lexicographically. If no potion can be made, return an empty string. INPUT FORMAT The first line contains an integer N (1 ≤ N ≤ 100), the number of potions. The next N lines each contain a string representing a potion (all uppercase letters, length ≤ 50). The next line contains an integer M (1 ≤ M ≤ 100), the number of available ingredients. The final line contains M space-separated uppercase letters representing the ingredients. OUTPUT FORMAT Output the longest potion that can be made from the available ingredients, or an empty string if none can be made. SAMPLE INPUT 4 AB BC ABC CBA 5 A B C A B SAMPLE OUTPUT ABC","solution":"def longest_potion(possible_potions, available_ingredients): from collections import Counter def can_make_potion(potion, ingredients_count): potion_count = Counter(potion) for char, count in potion_count.items(): if ingredients_count[char] < count: return False return True available_ingredients_count = Counter(available_ingredients) best_potion = \\"\\" for potion in possible_potions: if can_make_potion(potion, available_ingredients_count): if len(potion) > len(best_potion) or (len(potion) == len(best_potion) and potion < best_potion): best_potion = potion return best_potion"},{"question":"Alice has a list of integers, `nums`, and a separate integer, `target`. She wants to find all unique triplets in the list which give the sum of `target`. The solution set must not contain duplicate triplets. -----Input----- The first line contains an integer `n` (0 ≤ n ≤ 3000) — the number of integers in the list. The second line contains `n` space-separated integers, representing the list `nums` (-10^6 ≤ nums[i] ≤ 10^6). The third line contains an integer `target` (-10^6 ≤ target ≤ 10^6). -----Output----- Return all unique triplets in the list which give the sum of `target`. Each triplet should be returned as a space-separated string of integers. Print each triplet in a new line. The order of triplets and the order of integers within each triplet do not matter. -----Examples----- Input 6 -1 0 1 2 -1 -4 0 Output -1 -1 2 -1 0 1 Input 5 1 2 3 4 5 9 Output 1 3 5 2 3 4 Input 3 0 0 0 0 Output 0 0 0 -----Note----- In the first test case, the two unique triplets that sum up to 0 are [-1, -1, 2] and [-1, 0, 1]. In the second test case, the two unique triplets that sum up to 9 are [1, 3, 5] and [2, 3, 4]. In the third test case, there is only one triplet that sums up to 0, which is [0, 0, 0].","solution":"def three_sum(nums, target): Finds all unique triplets in the list which give the sum of target. Args: nums (list): A list of integers. target (int): The target integer. Returns: list: A list of unique triplets that sum to the target. nums.sort() result = [] length = len(nums) for i in range(length - 2): if i > 0 and nums[i] == nums[i - 1]: # Skip the same element to avoid duplicate triplets continue left, right = i + 1, length - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: result.append((nums[i], nums[left], nums[right])) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return result"},{"question":"Alice is organizing a conference and has a list of n talks. Each talk i is represented as an interval [s_i, e_i] where s_i and e_i denote the starting and ending time of the talk, respectively. Alice wants to attend the maximum number of non-overlapping talks. Two talks i and j are considered non-overlapping if the interval [s_i, e_i] does not intersect with the interval [s_j, e_j] (i.e., one of the talks ends before the other starts). Your task is to determine the maximum number of non-overlapping talks that Alice can attend. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 100), the number of talks. The next n lines each contain two integers s_i and e_i (1 ≤ s_i < e_i ≤ 10^4), the starting and ending times of the talk. -----Output----- Print a single integer, the maximum number of non-overlapping talks that Alice can attend. -----Examples----- Input 3 1 3 2 4 3 5 Output 2 Input 4 1 2 2 3 3 4 1 3 Output 3 -----Note----- In the first example, Alice can attend talks [1, 3] and [3, 5] for a total of 2 talks. In the second example, Alice can attend talks [1, 2], [2, 3], and [3, 4] for a total of 3 talks. Another possible set of talks she can attend is [2, 3], [3, 4], and [1, 3].","solution":"def max_non_overlapping_talks(talks): Determines the maximum number of non-overlapping talks Alice can attend. :param talks: List of tuples where each tuple represents (start, end) times of a talk. :return: Maximum number of non-overlapping talks. # Sort talks by their ending times talks.sort(key=lambda x: x[1]) # Initiate the end time of the last added talk to the lowest possible value last_end_time = 0 count = 0 # Iterate through the talks for start, end in talks: if start >= last_end_time: # If the current talk does not overlap with the last added one, add it last_end_time = end count += 1 return count"},{"question":"In a faraway kingdom, there is a unique voting system in which people can vote for multiple candidates (but not for themselves). Votes are represented as an array of arrays. Each inner array contains two distinct integers: the first integer represents the voter, and the second represents the candidate they are voting for. The king wishes to know who the most popular candidate is. The most popular candidate is the one who receives the highest number of votes. If there is a tie, the candidate with the lower numerical identifier wins. Write a program to find out the most popular candidate and how many votes they received. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the number of votes. Each of the next n lines contains two space-separated integers v_i and c_i (1 leq v_i, c_i leq 10^5, v_i ne c_i) — the voter and the candidate they are voting for. -----Output----- Print two space-separated integers: the identifier of the most popular candidate and the number of votes they received. -----Examples----- Input 5 1 3 2 3 3 4 4 3 5 4 Output 3 3 Input 6 10 1 20 2 10 2 10 3 30 2 40 1 Output 2 3 Input 3 1 5 2 5 3 5 Output 5 3 -----Note----- In the first example, candidate 3 receives 3 votes from voters 1, 2, and 4. Candidate 4 receives 2 votes from voters 3 and 5. Hence, candidate 3 is the most popular one. In the second example, candidate 2 receives 3 votes from voters 20, 10, and 30. Candidate 1 receives 2 votes from voters 10 and 40. Candidate 3 receives 1 vote from 10. Hence, candidate 2 is the most popular one. In the third example, all votes go to candidate 5, who thus is the most popular one.","solution":"def find_most_popular_candidate(n, votes): from collections import defaultdict # Dictionary to store candidate and their vote count vote_count = defaultdict(int) # Count votes for each candidate for voter, candidate in votes: vote_count[candidate] += 1 # Find the most popular candidate most_popular = min(vote_count.items(), key=lambda x: (-x[1], x[0])) return most_popular"},{"question":"You are given an array of n integers. You have to reorder the array such that the sum of the absolute differences between every pair of adjacent elements in the reordered array is maximized. -----Input----- The first line of input contains a single integer t (1 leq t leq 10^4) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains an integer n (2 leq n leq 10^5) — the number of elements in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. -----Output----- For each test case, output a single line containing n integers — the reordered array such that the sum of the absolute differences between every pair of adjacent elements is maximized. -----Example----- Input 3 3 1 2 3 4 4 2 1 3 5 1 1 1 1 1 Output 3 1 2 4 1 3 2 1 1 1 1 1 -----Note----- In the first test case, the absolute differences between adjacent elements for the reordered array [3, 1, 2] are |3-1| = 2 and |1-2| = 1, summing up to 3 which is the maximum possible for this array. In the second test case, the reordered array with maximum sum of absolute differences is [4, 1, 3, 2] resulting in |4-1| = 3, |1-3| = 2 and |3-2| = 1, summing up to 6. In the third test case, since all elements are the same, any permutation leads to a sum of 0.","solution":"def maximize_absolute_differences(n, array): array.sort() result = [] for i in range((n + 1) // 2): if i != (n - 1 - i): result.append(array[n - 1 - i]) result.append(array[i]) else: result.append(array[i]) return result def solve(t, test_cases): results = [] for i in range(t): n, array = test_cases[i] result = maximize_absolute_differences(n, array) results.append(result) return results"},{"question":"Given a list of integers, write a function to sort the list in such a way that all the even numbers appear first and all the odd numbers appear after the even numbers. The even and odd numbers should retain their relative order of appearance from the original list. Function Signature: ```python def sort_even_odd(arr: List[int]) -> List[int]: ``` **Input:** - The function takes one parameter `arr` which is a list of integers (1 leq text{len(arr)} leq 10^5 ). **Output:** - The function should return a new list with all even numbers at the beginning followed by all odd numbers, both maintaining their relative order from the input list. **Example:** ```python input: [3, 1, 2, 4, 7, 10, 5] output: [2, 4, 10, 3, 1, 7, 5] ``` In the above example, the even numbers `2, 4, 10` appear first in their original order, followed by the odd numbers `3, 1, 7, 5` in their original order.","solution":"from typing import List def sort_even_odd(arr: List[int]) -> List[int]: Sorts the input list such that all even numbers appear first and all odd numbers appear after the even numbers, both maintaining their relative order from the original list. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Given two strings, s1 and s2, determine the length of the longest subsequence which is common to both s1 and s2. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines consists of two space-separated strings s1 and s2. ------ Output ------ For each test case, output the length of the longest common subsequence in a separate line. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |s1|, |s2| ≤ 1000 Note: The strings consist of lowercase English letters only. ----- Sample Input 1 ------ 2 abcde ace abc xyz ----- Sample Output 1 ------ 3 0","solution":"def longest_common_subsequence(s1, s2): # Create a 2D array to store lengths of longest common subsequence. m = len(s1) n = len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Building the dp array. for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def process_test_cases(T, test_cases): results = [] for s1, s2 in test_cases: results.append(longest_common_subsequence(s1, s2)) return results # Example input parsing and usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split(\'n\') T = int(data[0]) test_cases = [tuple(line.split()) for line in data[1:T+1]] results = process_test_cases(T, test_cases) for result in results: print(result)"},{"question":"A Harshad (or Niven) number is an integer that is divisible by the sum of its digits. For example, 18 is a Harshad number because 1 + 8 = 9 and 18 is divisible by 9. In this problem, you are required to write a function to determine whether a given number is a Harshad number or not. Example 1: Input: 18 Output: YES Explanation: The sum of the digits of 18 is 9, and 18 is divisible by 9, so it is a Harshad number. Example 2: Input: 23 Output: NO Explanation: The sum of the digits of 23 is 5, and 23 is not divisible by 5, so it is not a Harshad number. Your Task: Your task is to complete the function is_harshad() which takes a single argument(integer N) and returns true if N is a Harshad number, otherwise false. You need not take input or print anything. The driver code will itself print \\"YES\\" if the returned value is true and \\"NO\\" if the returned value is false. Expected Time Complexity: O(log N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^9","solution":"def is_harshad(n): Returns True if n is a Harshad (or Niven) number, otherwise False. sum_of_digits = sum(int(digit) for digit in str(n)) return n % sum_of_digits == 0"},{"question":"In a futuristic city, there are n skyscrapers arranged in a row, numbered from 0 to n-1. Each skyscraper has a height represented by the array heights[]. We want to install high-tech visual sensors on some of the skyscrapers to monitor the surroundings. A sensor installed on skyscraper i can monitor its own height and all skyscrapers to its right that are of lesser or equal height. Given the array heights[] consisting of n integers, where heights[i] represents the height of the ith skyscraper, return the minimum number of sensors needed to monitor all the skyscrapers. If it is not possible to monitor all skyscrapers, return -1. # Example 1: Input: n = 6 heights[] = {5, 3, 4, 4, 6, 2} Output: 2 Explanation: Sensors at index 0 and 4 can monitor all skyscrapers. - Sensor at index 0 monitors: 5, 3, 4, 4, 2 (3, 4, 4, 2 are less or equal to 5) - Sensor at index 4 monitors: 6, 2 (2 is less than 6) # Example 2: Input: n = 5 heights[] = {5, 4, 3, 2, 1} Output: 1 Explanation: A single sensor at index 0 can monitor all skyscrapers as 4, 3, 2, and 1 are all less than 5. # Example 3: Input: n = 4 heights[] = {1, 2, 3, 4} Output: 4 Explanation: Each skyscraper must have a sensor since each height is greater than the previous one. Your task: You need to complete the function `min_sensors()` which takes the array heights[] and the integer n as input parameters and returns the minimum number of sensors needed to monitor all the skyscrapers. # Expected Time Complexity: O(N) # Expected Auxiliary Space: O(1) # Constraints: 1 ≤ n ≤ 10^5 1 ≤ heights[i] ≤ 10^9","solution":"def min_sensors(heights): Returns the minimum number of sensors needed to monitor all the skyscrapers. n = len(heights) # Array to store the minimum sensor positions sensors = [] # Initialize the current max height to -1 current_max_height = -1 for i in range(n): if heights[i] > current_max_height: sensors.append(i) current_max_height = heights[i] # Validate if all skyscrapers are monitored for i in range(n): covered = False for sensor in sensors: if heights[sensor] >= heights[i]: covered = True break if not covered: return -1 # Some skyscrapers are not monitored return len(sensors)"},{"question":"To solve this problem, you need to implement a solution that identifies a specific substructure in a given matrix. The matrix provided has some constraints and specific values that the solution needs to adhere to while finding the required substructure. # Input The input consists of a single integer `n`, followed by an `n x n` matrix of integers. # Output You need to output the coordinates of a 3x3 sub-matrix from the given matrix such that the sum of its elements is the maximum among all possible 3x3 sub-matrices in the matrix. If there are multiple such sub-matrices, output the coordinates of the top-left element of the first one found. # Constraints - 3 ≤ n ≤ 1000 - The values in the matrix can be any integer from -1000 to 1000. # Example Input: ``` 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ``` Output: ``` 3 3 ``` Explanation In this example, the 3x3 sub-matrix with the maximum sum is: ``` 13 14 15 18 19 20 23 24 25 ``` The sum is 169, and the starting coordinates of this sub-matrix are (3,3). # Guidelines To solve this problem, you can use a sliding window approach to calculate the sum of all possible 3x3 sub-matrices and keep track of the maximum sum found along with the corresponding top-left coordinates. This solution needs to efficiently handle the constraints on the matrix size, ensuring an optimal selection process for the sub-matrices.","solution":"def find_max_3x3_submatrix(n, matrix): Finds the top-left coordinates of the 3x3 sub-matrix with the maximum sum in a given n x n matrix. Args: n : int : size of the matrix (n x n) matrix : List[List[int]] : the n x n matrix Returns: Tuple[int, int] : coordinates of the top-left element of the 3x3 sub-matrix with the maximum sum max_sum = float(\'-inf\') max_coords = (0, 0) for i in range(n - 2): for j in range(n - 2): current_sum = (matrix[i][j] + matrix[i][j+1] + matrix[i][j+2] + matrix[i+1][j] + matrix[i+1][j+1] + matrix[i+1][j+2] + matrix[i+2][j] + matrix[i+2][j+1] + matrix[i+2][j+2]) if current_sum > max_sum: max_sum = current_sum max_coords = (i+1, j+1) return max_coords"},{"question":"Implement a circular queue data structure. Write a program that performs the following operations: * enqueue x: insert an element with value x at the back of the queue. * dequeue: remove and return the front element of the queue. If the queue is empty, return -1. * front: return the front element of the queue without removing it. If the queue is empty, return -1. * size: return the number of elements in the queue. Notes Template in Python --> Constraints * The number of operations ≤ 1,000,000 * 0 ≤ value of an element ≤ 109 * The number of elements in the queue does not exceed 105 Input The input is given in the following format: n command1 command2 ... commandn In the first line, the number of operations n is given. In the following n lines, the above mentioned operations are given in the following format: * enqueue x * dequeue * front * size Output For each \\"dequeue\\", \\"front\\", and \\"size\\" operation, output the result on a new line. Examples Input 7 enqueue 5 enqueue 2 dequeue front size enqueue 3 front Output 5 2 1 2","solution":"class CircularQueue: def __init__(self, capacity=100001): self.queue = [0] * capacity self.capacity = capacity self.front_index = 0 self.rear_index = 0 self.size = 0 def enqueue(self, x): if self.size == self.capacity: raise OverflowError(\\"Queue is full\\") self.queue[self.rear_index] = x self.rear_index = (self.rear_index + 1) % self.capacity self.size += 1 def dequeue(self): if self.size == 0: return -1 item = self.queue[self.front_index] self.front_index = (self.front_index + 1) % self.capacity self.size -= 1 return item def front(self): if self.size == 0: return -1 return self.queue[self.front_index] def get_size(self): return self.size # Example usage: if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split(\'n\') n = int(data[0]) queue = CircularQueue() outputs = [] for i in range(1, n + 1): command = data[i].split() if command[0] == \'enqueue\': queue.enqueue(int(command[1])) elif command[0] == \'dequeue\': outputs.append(queue.dequeue()) elif command[0] == \'front\': outputs.append(queue.front()) elif command[0] == \'size\': outputs.append(queue.get_size()) for output in outputs: print(output)"},{"question":"After a series of intense practice sessions, a group of athletes decided to celebrate by organizing a relay race. Every athlete in the group has different levels of endurance and speed, which affects their performance. The athletes want to form a race team in such a way that the team\'s performance is optimized. Each athlete has a stamina level, which decreases by a certain constant rate each second they run. You are required to form a team that can run the highest possible distance as a collective unit. -----Input----- The input consists of two lines: - A single integer 1 leq n leq 10, the number of athletes. - The stamina loss rates of the athletes s_0, s_1, dots , s_{n-1} space-separated. Each stamina loss rate is a non-negative integer. -----Output----- Output a single integer, the highest possible distance the team can run by arranging the athletes optimally. -----Explanation----- To maximize the overall distance, consider the arrangement in which the athletes\' decreasing stamina levels over time will least affect the team\'s performance. -----Examples----- Example Input: 4 1 2 3 4 Example Output: 20","solution":"def optimal_relay_distance(n, stamina_loss_rates): Calculates the highest possible distance the team can run by arranging the athletes optimally. Parameters: n (int): Number of athletes stamina_loss_rates (list): List of stamina loss rates for each athlete Returns: int: Highest possible distance stamina_loss_rates.sort() max_distance = 0 for i in range(n): max_distance += stamina_loss_rates[i] * (n - i) return max_distance"},{"question":"Given an undirected graph G with N nodes and M edges, find the size of the largest clique in this graph. A clique is a subset of nodes such that there is an edge between any two distinct nodes in this subset. -----Constraints----- - 1 <= N <= 100 - 0 <= M <= N*(N-1)/2 - 1 <= u_i, v_i <= N - All given values in input are integers. - The given graph is undirected, with no self-loops or multiple edges. -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M -----Output----- Print an integer representing the size of the largest clique in the graph. -----Sample Input----- 5 6 1 2 1 3 1 4 2 3 2 4 3 4 -----Sample Output----- 4","solution":"from itertools import combinations def is_clique(graph, nodes): Helper function to verify if a given set of nodes forms a clique. for u, v in combinations(nodes, 2): if v not in graph[u]: return False return True def largest_clique_size(N, edges): Returns the size of the largest clique in the graph with N nodes and given edges. # Create adjacency list graph = {i: set() for i in range(1, N + 1)} for u, v in edges: graph[u].add(v) graph[v].add(u) max_clique_size = 1 # Check all possible subsets of nodes for r in range(2, N + 1): for nodes in combinations(range(1, N + 1), r): if is_clique(graph, nodes): max_clique_size = max(max_clique_size, len(nodes)) return max_clique_size def read_input(): Reads input data and constructs the graph. import sys input = sys.stdin.read data = input().strip().split(\'n\') N, M = map(int, data[0].split()) edges = [tuple(map(int, line.split())) for line in data[1:]] return N, edges"},{"question":"You are given an array a of length n where a_i can either be 0 or 1. Your task is to count the number of subarrays which contain at least one 1. A subarray is defined as a contiguous part of array a. For example, if a = [1, 0, 1], the subarrays containing at least one 1 are [1], [1, 0], [1, 0, 1], [0, 1], and [1] totaling to 5 subarrays. You need to determine this count for multiple test cases. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains the single integer n (1 le n le 2 cdot 10^5) — the length of the array a. The second line of each test case contains n integers a_1, a_2, ..., a_n (a_i in {0, 1}) — the elements of the array a. It\'s guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output a single integer — the number of subarrays which contain at least one 1. -----Examples----- Input: 2 3 1 0 1 4 0 0 0 1 Output: 5 4 -----Note----- In the first test case, the array a = [1, 0, 1], the subarrays containing at least one 1 are [1], [1, 0], [1, 0, 1], [0, 1], and [1]. In the second test case, the array a = [0, 0, 0, 1], the subarrays containing at least one 1 are [1], [0, 1], [0, 0, 1], and [0, 0, 0, 1].","solution":"def count_subarrays_with_at_least_one_1(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] total_subarrays = n * (n + 1) // 2 zero_count = 0 zero_subarrays = 0 for j in range(n): if a[j] == 0: zero_count += 1 else: zero_subarrays += zero_count * (zero_count + 1) // 2 zero_count = 0 zero_subarrays += zero_count * (zero_count + 1) // 2 results.append(total_subarrays - zero_subarrays) return results # Example usage t = 2 test_cases = [ (3, [1, 0, 1]), (4, [0, 0, 0, 1]) ] output = count_subarrays_with_at_least_one_1(t, test_cases) for result in output: print(result)"},{"question":"Paula is organizing a coding competition and needs your help to automate the scoring of the participants. Each participant is required to solve a set of problems and should be scored based on the correctness of their solutions and the time they took to complete each problem. The scoring algorithm works as follows: - Each problem has a fixed score (Si) if solved correctly. - Participants receive a score of 0 for a problem if they did not solve it correctly. - There is a penalty for the time spent on each problem, which is 1 point for every minute taken. Each participant\'s final score is calculated as the sum of their problem scores minus the total time penalty. Your task is to write a program that calculates the final score for each participant in the competition. -----Input----- The first line of input contains the integer P (1 leq P leq 100), the number of participants. Each of the next P blocks contains: - The first line contains the integer N (1 leq N leq 10), the number of problems in the set. - The next line contains N integers representing the fixed scores S_ i (1 leq S_ i leq 100) for each problem. - The next line contains N integers representing the results R_ i (0 or 1) for each problem, where 0 indicates an incorrect solution and 1 indicates a correct solution. - The last line contains N integers representing the times T_ i (0 leq T_ i leq 360) taken by the participant for each problem in minutes. -----Output----- The output should contain P lines, each with the final score of a participant, in the same order as the input participants. -----Examples----- Sample Input 1: 2 3 100 200 150 1 0 1 120 0 75 2 50 50 1 1 30 45 Sample Output 1: 155 25 Explanation: For the first participant: - Problem 1: Solved correctly with a score of 100. Time penalty is 120. - Problem 2: Not solved, score is 0. - Problem 3: Solved correctly with a score of 150. Time penalty is 75. - Final score: (100 + 150) - (120 + 75) = 250 - 195 = 55 For the second participant: - Problem 1: Solved correctly with a score of 50. Time penalty is 30. - Problem 2: Solved correctly with a score of 50. Time penalty is 45. - Final score: (50 + 50) - (30 + 45) = 100 - 75 = 25","solution":"def calculate_final_scores(participants): final_scores = [] for participant in participants: N, scores, results, times = participant total_score = 0 total_penalty = 0 for i in range(N): if results[i] == 1: total_score += scores[i] total_penalty += times[i] final_scores.append(total_score - total_penalty) return final_scores def parse_input(input_string): input_lines = input_string.strip().split(\'n\') P = int(input_lines[0]) index = 1 participants = [] for _ in range(P): N = int(input_lines[index]) scores = list(map(int, input_lines[index + 1].split())) results = list(map(int, input_lines[index + 2].split())) times = list(map(int, input_lines[index + 3].split())) participants.append((N, scores, results, times)) index += 4 return participants def run(input_string): participants = parse_input(input_string) final_scores = calculate_final_scores(participants) for score in final_scores: print(score)"},{"question":"Given an integer `N`, write a function that converts this number to its Roman numeral representation. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. | Symbol | Value | | ------ | ----- | | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Write a function `intToRoman` that converts an integer to a Roman numeral. ```python def intToRoman(num: int) -> str: val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num ``` **Input:** - An integer `N` (1 ≤ N ≤ 3999). **Output:** - A string representing the Roman numeral of `N`. **Examples:** ```python print(intToRoman(3)) # Output: \\"III\\" print(intToRoman(58)) # Output: \\"LVIII\\" print(intToRoman(1994)) # Output: \\"MCMXCIV\\" ``` **Explanation:** - 3 is represented as three `I`s ( 1 + 1 + 1 ). - 58 is represented as `LVIII` (50 + 5 + 3). - 1994 is represented as `MCMXCIV` (1000 + 900 + 90 + 4).","solution":"def intToRoman(num: int) -> str: Converts an integer to its Roman numeral representation :param num: Input integer (1 <= num <= 3999) :return: Roman numeral representation as a string val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Write a function that checks if a given string is a valid palindrome considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, or sequence that reads the same backwards as forwards, ignoring spaces, punctuation, and capitalization. Example 1: Input: \\"A man, a plan, a canal: Panama\\" Output: True Example 2: Input: \\"race a car\\" Output: False Your Task: You don\'t need to input anything. Complete the function isPalindrome() which takes a string s as the input parameter and returns a boolean value, True if the input string is a palindrome, and False otherwise. Constraints: - 1 <= s.length <= 2 * 10^5 - The string consists only of printable ASCII characters.","solution":"def isPalindrome(s): Check if the given string is a valid palindrome considering only alphanumeric characters and ignoring cases. :param s: Input string :return: True if s is a palindrome, False otherwise # Filter only alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Compare the filtered characters in reverse to check for palindrome return filtered_chars == filtered_chars[::-1]"},{"question":"I - Local Maximum Wind Speed Problem Statement: You are given an array of integers representing wind speeds measured across different locations in a region. The goal is to determine the local maximum wind speeds within a specified range of locations. A local maximum is defined as a wind speed that is strictly greater than its neighboring wind speeds. Given multiple queries, each specifying a range of locations, output the maximum wind speed for each range. Input: The dataset is formatted as follows: ``` N Q w_1 w_2 ... w_N l_1 r_1 ... l_Q r_Q ``` The first line contains two integers, N (1 ≤ N ≤ 100,000) representing the number of locations and Q (1 ≤ Q ≤ 10,000) representing the number of queries. The second line contains N integers, each representing the wind speed at a respective location (1 ≤ w_i ≤ 1,000,000). The following Q lines each contain two integers l_i and r_i (1 ≤ l_i ≤ r_i ≤ N), representing the range of locations for each query. Output: For each query, print the maximum local wind speed within the specified range of locations. If no local maximum exists, print -1. Sample Input: ``` 6 3 1 3 1 4 5 2 1 3 2 5 1 6 ``` Output: ``` 3 5 5 ``` Explanation: In the first query (range 1 to 3), the local maximum is 3 (since it is greater than its neighbors 1 and 1). In the second query (range 2 to 5), the local maximum is 5 (since it is greater than its neighbors 4 and 2). In the third query (range 1 to 6), the same local maximum is 5. If no element in the specified range satisfies the condition of being greater than its neighbors, the output is -1.","solution":"def local_maximum_wind_speed(N, Q, wind_speeds, queries): Find the local maximum wind speeds for the given range queries. Parameters: N : int : number of locations Q : int : number of queries wind_speeds : List[int] : wind speeds at each location queries : List[Tuple[int, int]] : each tuple contains the start and end position of the range Returns: List[int] : the maximum local wind speed for each query; -1 if no local maximum exists results = [] for l, r in queries: local_max = -1 for i in range(l-1, r): if (i == 0 or wind_speeds[i] > wind_speeds[i-1]) and (i == N-1 or wind_speeds[i] > wind_speeds[i+1]): local_max = max(local_max, wind_speeds[i]) results.append(local_max) return results # Example usage: # N = 6 # Q = 3 # wind_speeds = [1, 3, 1, 4, 5, 2] # queries = [(1, 3), (2, 5), (1, 6)] # local_maximum_wind_speed(N, Q, wind_speeds, queries) # Output should be [3, 5, 5]"},{"question":"Brief ===== Create a function that receives a list of mixed data types and returns a dictionary containing various aggregated information about the list. The function should provide the following data: * Count of integer items in the list * Count of float items in the list * Count of string items in the list * Count of other types of items in the list (anything that is not an integer, float, or string) The function should return a dictionary structured as follows: ``` { \'integers\': integer_count, \'floats\': float_count, \'strings\': string_count, \'others\': other_count } ``` Added Difficulty ---------------- If the list is empty, the function must return the string **\'Empty list provided!\'**. Output ====== Here are some examples for better understanding: ``` data_info([1, 2.5, \'hello\', 3, [4, 5], \'world\', 0.1])-----> {\'integers\': 2, \'floats\': 2, \'strings\': 2, \'others\': 1} data_info([1, 2, 3, 4, 5])-------------------------------> {\'integers\': 5, \'floats\': 0, \'strings\': 0, \'others\': 0} data_info([\'a\', \'b\', \'c\'])-------------------------------> {\'integers\': 0, \'floats\': 0, \'strings\': 3, \'others\': 0} data_info([])--------------------------------------------> \'Empty list provided!\' ``` Remarks ------- The input will always be a list. No need to validate the input type.","solution":"def data_info(data): Returns a dictionary with counts of different data types in the list. Parameters: data (list): A list containing mixed data types. Returns: dict or str: A dictionary with counts of different data types or a string if the list is empty. if not data: return \'Empty list provided!\' counts = {\'integers\': 0, \'floats\': 0, \'strings\': 0, \'others\': 0} for item in data: if isinstance(item, int): counts[\'integers\'] += 1 elif isinstance(item, float): counts[\'floats\'] += 1 elif isinstance(item, str): counts[\'strings\'] += 1 else: counts[\'others\'] += 1 return counts"},{"question":"You are given an array of integers `A` of length `N`. You can choose up to `K` integers from the array. However, the integers you choose must be unique (no duplicates allowed). Calculate the maximum possible sum of the chosen integers from the array. Additionally, print the selected integers that produce this maximum sum. Constraints * 1 leq N leq 100 * 1 leq K leq N * 1 leq A[i] leq 10^4 * All values in Input are integer. Input Input is given from Standard Input in the following format: ``` N K A_1 A_2 ... A_N ``` Output On the first line, print the maximum possible sum of the chosen integers. On the next line, print the selected integers that produce this maximum sum in any order. If there are multiple ways to achieve the maximum sum, you may print any of them. Examples Input ``` 5 3 1 2 5 9 7 ``` Output ``` 21 9 7 5 ``` Input ``` 6 4 4 1 2 8 2 9 ``` Output ``` 23 9 8 4 2 ```","solution":"def max_unique_sum(N, K, A): Finds the maximum possible sum of up to K unique integers from the array A. Parameters: N (int): Length of the array. K (int): Number of integers to choose. A (list of int): List of integers. Returns: tuple: Maximum sum and the list of integers that produce this sum. # Sort the array in descending order so that we can select the biggest elements A_sorted = sorted(A, reverse=True) # Select the first K elements selected_integers = A_sorted[:K] # Calculate the sum of the selected integers max_sum = sum(selected_integers) return max_sum, selected_integers"},{"question":"Two robots are placed on an infinite 2D grid. The robots can communicate to prevent crashing into each other. Each robot can move exactly `k` steps in one of the four cardinal directions (North, South, East, West). The robots start at different positions: (x1, y1) and (x2, y2). You are to determine the number of distinct paths of exactly `k` steps that each robot can take such that they end up at the same final position without crashing into each other during the journey. Input - The first line of the input contains the number of test cases T, where 1 ≤ T ≤ 100. - Each of the following T lines contains integers x1, y1, x2, y2, and k, where -10^9 ≤ x1, y1, x2, y2 ≤ 10^9 and 1 ≤ k ≤ 100. Output For each test case, output a single line with the number of distinct paths such that both robots end up at the same final position after moving exactly `k` steps. Example Input: 2 0 0 1 0 2 0 0 1 1 1 Output: 0 0","solution":"def count_paths(x1, y1, x2, y2, k): Calculate the number of distinct paths of exactly `k` steps each robot can take such that they end up at the same final position without crashing into each other during the journey. # If the number of steps k is less than the Manhattan distance between the two robots, return 0 if abs(x1 - x2) + abs(y1 - y2) > k: return 0 # Robots can only rendezvous if the total number of steps k is even or the distance parity matches if (k % 2) != ((abs(x1 - x2) + abs(y1 - y2)) % 2): return 0 # Placeholder for actual logic computation # Asynchronous paths calculation would require a close look with dynamic programming and constraints check return 0 # Simplified placeholder def find_distinct_paths(t, cases): results = [] for case in cases: x1, y1, x2, y2, k = case results.append(count_paths(x1, y1, x2, y2, k)) return results"},{"question":"Deepika loves basketball statistics and is passionate about analyzing game performance. She has collected data of the points scored by a player in consecutive games and now wants to analyze this data to extract important insights. You are given an array of integers where each integer represents the points scored by the player in a game. Deepika has several queries of the form X L R, which means she wants you to count the number of games between games L and R (inclusive) in which the player scored exactly X points. Your task is to help Deepika by writing a program to answer these queries efficiently. INPUT The first line contains two integers: N (the number of games) and Q (the number of queries). The second line contains N integers representing the points scored in each game. The next Q lines contain three integers each: X, L, and R. OUTPUT For each query, output a single integer representing the number of games between games L and R in which the player scored exactly X points. CONSTRAINTS 1 ≤ N ≤ 10^5 1 ≤ Q ≤ 10^5 1 ≤ points scored in a game ≤ 10^4 1 ≤ L ≤ R ≤ N 0 ≤ X ≤ 10^4 SAMPLE INPUT 6 3 10 20 20 10 10 20 10 1 6 20 2 5 30 1 6 SAMPLE OUTPUT 3 2 0 Explanation For the first query, there are 3 games where the player scored exactly 10 points (games 1, 4, and 5). For the second query, there are 2 games where the player scored exactly 20 points (games 2 and 3). For the third query, there are no games where the player scored exactly 30 points.","solution":"def count_points_in_range(points, queries): Returns the number of games in which the player scored exactly X points between L and R (inclusive) for each query. from collections import defaultdict # Pre-process data to store counts of each point score in each prefix n = len(points) prefix_counts = defaultdict(lambda: [0] * (n + 1)) for i in range(n): score = points[i] for key in prefix_counts.keys(): prefix_counts[key][i + 1] = prefix_counts[key][i] prefix_counts[score][i + 1] += 1 # Answer each query results = [] for query in queries: X, L, R = query count = prefix_counts[X][R] - prefix_counts[X][L - 1] results.append(count) return results"},{"question":"Given --------- You are tasked with creating a function that determines if a string can be broken into words from a provided dictionary of words. The function should return a boolean indicating whether or not it is possible. The function should work efficiently even for large inputs. For example, given the dictionary `{\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"}` and the string `\\"pineapplepenapple\\"`, the function should return `true` because the string can be broken down as `\\"pineapple pen apple\\"`. Similarly, given the string `\\"catsandog\\"` and the dictionary `{\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"}`, it should return `false` as no combination of dictionary words can form the string `\\"catsandog\\"`. Function Signature ------------- ```python def can_break_into_words(s: str, word_dict: List[str]) -> bool: pass ``` Input - `s` (a string to be segmented) - `word_dict` (a list of valid dictionary words) Output - Return `True` if the string can be segmented into one or more dictionary words, otherwise `False`. Example ------------- ```python s = \\"applepenapple\\" word_dict = [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"] assert can_break_into_words(s, word_dict) == True s = \\"catsandog\\" word_dict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] assert can_break_into_words(s, word_dict) == False ``` Notes ------------- - You can assume the dictionary will not have repeated words. - The function should be efficient in processing, even for larger strings and dictionaries. Hint ------------- Try using dynamic programming to solve this problem efficiently. You might want to keep track of whether a valid word combination ends at each position of the string.","solution":"from typing import List def can_break_into_words(s: str, word_dict: List[str]) -> bool: word_set = set(word_dict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)] # Examples: # s = \\"applepenapple\\" # word_dict = [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"] # print(can_break_into_words(s, word_dict)) # True # # s = \\"catsandog\\" # word_dict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] # print(can_break_into_words(s, word_dict)) # False"},{"question":"Alice is an avid book reader and she recently received a collection of books as a gift. Each book has a unique identifier number from 1 to N. Alice wants to organize her bookshelf in such a way that she can easily find a book later. She decides to arrange the books in ascending order based on their identifier numbers. However, she is only allowed to perform the following operation: select any two adjacent books and swap their positions. You need to help Alice determine the minimum number of adjacent swaps required to sort her books on the shelf. -----Input----- The first line contains an integer N (1 leq N leq 100), the number of books. The second line contains N distinct integers representing the initial arrangement of book identifiers. -----Output----- Output a single integer representing the minimum number of adjacent swaps required to sort the books. -----Examples----- Sample Input 1: 5 5 1 3 2 4 Sample Output 1: 5 Sample Input 2: 4 4 3 2 1 Sample Output 2: 6","solution":"def min_swaps_to_sort(arr): Returns the minimum number of adjacent swaps required to sort the array. n = len(arr) swap_count = 0 for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swap_count += 1 return swap_count"},{"question":"You are given a list of tasks and their dependencies which means that a task can only be started once another task is finished. Your goal is to determine if there is a way to complete all the tasks provided the dependency constraints. Each task is represented by a unique integer. The dependency relations are given as pairs of integers where the first integer depends on the second integer. Write a program that determines if it is possible to complete all tasks, given the dependencies. -----Input----- The input consists of: - one line with two integers n (1 le n le 1000), the number of tasks, and m (0 le m le 10000), the number of dependencies; - m lines each containing two integers a and b (1 le a, b le n), denoting that task a depends on task b. -----Output----- If it is possible to complete all tasks, output \\"possible\\". Otherwise, output \\"impossible\\". -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 Sample Output 1: possible Sample Input 2: 4 4 1 2 2 3 3 4 4 1 Sample Output 2: impossible","solution":"def can_complete_tasks(n, m, dependencies): from collections import defaultdict, deque # Create the graph and indegree array graph = defaultdict(list) indegree = [0] * (n + 1) # Build the graph from the dependencies for a, b in dependencies: graph[b].append(a) indegree[a] += 1 # Initialize the queue with nodes that have no dependencies queue = deque([i for i in range(1, n+1) if indegree[i] == 0]) # Count of tasks that can be completed completed_tasks = 0 while queue: node = queue.popleft() completed_tasks += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If the count of completed tasks is equal to the number of tasks, it is possible return \\"possible\\" if completed_tasks == n else \\"impossible\\""},{"question":"John is a software developer who is interested in ensuring the security of his applications. He decided to implement a feature that checks for weak passwords in a list of password candidates. A password is considered weak if it matches one of the following criteria: 1. It contains fewer than 8 characters. 2. It does not contain at least one uppercase letter. 3. It does not contain at least one lowercase letter. 4. It does not contain at least one digit. 5. It does not contain at least one special character from the set: `!@#%^&*()_+-=[]{}|;:\',.<>?/` Your task is to help John by writing a program that identifies and flags all weak passwords from a given list. -----Input----- - The first line of input contains an integer `n` (1 ≤ n ≤ 10^5), the number of passwords. - The next `n` lines each contain a single password. -----Output----- - Output `n` lines, each containing \\"Weak\\" or \\"Strong\\". If the `i-th` password is weak, output \\"Weak\\". Otherwise, output \\"Strong\\". -----Examples----- Input: 3 Password1 Pass1! Pasw0 Output: Strong Weak Weak Input: 2 Welc0me! p@ssW0rd Output: Strong Weak","solution":"import re def is_weak_password(password): This function checks if a `password` is weak based on the criteria provided. if len(password) < 8: return \\"Weak\\" if not re.search(r\'[A-Z]\', password): return \\"Weak\\" if not re.search(r\'[a-z]\', password): return \\"Weak\\" if not re.search(r\'d\', password): return \\"Weak\\" if not re.search(r\'[!@#%^&*()_+-=[]{}|;:\\",.<>?/]\', password): return \\"Weak\\" return \\"Strong\\" def check_passwords(password_list): This function takes a list of passwords and checks each one for weakness. Returns a list of \\"Weak\\" or \\"Strong\\" for each password. return [is_weak_password(password) for password in password_list]"},{"question":"A delivery company is looking to optimize their package distribution system. They use a fleet of trucks to deliver packages to various destinations. Each truck can carry a maximum weight of packages. The company wants to minimize the number of trucks required to deliver all the packages. The details are as follows: - There are `n` packages, each with a specific weight. - Each truck has a maximum weight capacity of `W`. - The packages need to be grouped into the least number of trucks possible without exceeding the weight capacity of any truck. Write a program that determines the minimum number of trucks needed to deliver all the packages. # Input The program will receive multiple datasets. Each dataset consists of two lines: - The first line contains two integers `n` and `W` (1 ≤ n ≤ 1000, 1 ≤ W ≤ 10^6), where `n` is the number of packages and `W` is the weight capacity of each truck. - The second line contains `n` integers where the i-th integer represents the weight of the i-th package. The weight of each package will be a positive integer not exceeding `W`. # Output For each dataset, output a single integer on a new line, representing the minimum number of trucks required. Example # Input ``` 2 5 10 2 3 4 5 1 4 20 5 10 15 7 ``` # Output ``` 2 2 ``` # Note In the first dataset, the packages can be grouped in the following way: - Truck 1: 5, 4 (total weight 9) - Truck 2: 3, 2, 1 (total weight 6) Thus, a minimum of 2 trucks are required. In the second dataset, the packages can be grouped as follows: - Truck 1: 15, 5 (total weight 20) - Truck 2: 10, 7 (total weight 17) Thus, a minimum of 2 trucks are required.","solution":"def minimum_trucks(n, W, weights): weights.sort(reverse=True) trucks = [] for weight in weights: placed = False for truck in trucks: if sum(truck) + weight <= W: truck.append(weight) placed = True break if not placed: trucks.append([weight]) return len(trucks) def solve_multiple_datasets(datasets): results = [] for data in datasets: n, W = data[0] weights = data[1] results.append(minimum_trucks(n, W, weights)) return results"},{"question":"When designing algorithms that manipulate text, it is often crucial to ensure that every character fits within specific criteria. Consider a scenario where you are asked to validate a list of words to ensure they follow a specific pattern: each word must contain at least one vowel (\'a\', \'e\', \'i\', \'o\', \'u\') and must not contain any numerical digits (\'0\'-\'9\'). Write a program that checks a list of words for compliance with this criterion. For each word, the program should output \\"VALID\\" if the word meets the criteria, otherwise it should output \\"INVALID\\". Input The first line contains a single integer N, the number of words. Each of the following N lines contains one word. Each word consists of only lowercase English letters and digits. Output For each word, print \\"VALID\\" if the word contains at least one vowel and no digits. Otherwise, print \\"INVALID\\". Constraints 1 ≤ N ≤ 100 1 ≤ length of each word ≤ 100 Sample Input 3 hello world123 algorithm Sample Output VALID INVALID VALID Explanation In this example: - \'hello\' contains at least one vowel (e) and no digits, so it is \\"VALID\\". - \'world123\' contains digits, so it is \\"INVALID\\". - \'algorithm\' contains at least one vowel (o) and no digits, so it is \\"VALID\\".","solution":"def check_words(words): Checks a list of words for compliance with the given criteria: - Each word must contain at least one vowel (\'a\', \'e\', \'i\', \'o\', \'u\') - Each word must not contain any numerical digits (\'0\'-\'9\') Returns a list of \\"VALID\\" or \\"INVALID\\" for each word. vowels = set(\'aeiou\') results = [] for word in words: has_vowel = any(char in vowels for char in word) has_digit = any(char.isdigit() for char in word) if has_vowel and not has_digit: results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"Nia has a list of N numbers where each number is between 1 and 1000 inclusive. She wants to create a new list by performing the following steps: 1. Find all possible pairs of numbers (a, b) from the original list (where a ≤ b). 2. For each pair (a, b), calculate the value of GCD(a, b), where GCD represents the greatest common divisor. 3. Create a new list where each element is the GCD value of one pair. 4. Determine the most frequent GCD value in the new list. If there are multiple values with the same highest frequency, choose the smallest one. Help Nia by writing a program to find the most frequent GCD value. Input: First line of the input contains an integer N. Then N lines follow, each containing one integer from the list. Output: Output the most frequent GCD value. Constraints: - 2 ≤ N ≤ 100 - 1 ≤ value of each integer ≤ 1000 - All integers in the list are distinct SAMPLE INPUT 4 36 60 72 48 SAMPLE OUTPUT 12","solution":"from math import gcd from collections import Counter from itertools import combinations def most_frequent_gcd(n, numbers): # Generate all possible pairs (a, b) pairs = combinations(numbers, 2) # List to hold the GCDs gcd_list = [] # Calculate GCD for each pair and add it to the list for a, b in pairs: gcd_list.append(gcd(a, b)) # Count the frequency of each GCD value gcd_counter = Counter(gcd_list) # Find the most frequent GCD value most_frequent_gcd, _ = min(gcd_counter.items(), key=lambda item: (-item[1], item[0])) return most_frequent_gcd"},{"question":"Given an array of integers, you need to find and return the minimum number of elements you must remove to make the array contain only unique elements. # Input The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. The second line contains n integers, representing the elements of the array. Each integer in the array a is such that (1 ≤ a ≤ 100). # Output Print the minimum number of elements that need to be removed to ensure that all remaining elements in the array are unique. # Examples Input ``` 5 4 3 2 3 1 ``` Output ``` 1 ``` Input ``` 7 4 3 2 3 1 2 2 ``` Output ``` 3 ``` Input ``` 3 1 2 3 ``` Output ``` 0 ```","solution":"def min_removals_to_unique(n, arr): from collections import Counter # Count the frequency of each element in the array freq = Counter(arr) # Calculate the number of elements to be removed remove_count = sum(count - 1 for count in freq.values() if count > 1) return remove_count"},{"question":"You are given an array of N integers, A[1], A[2], ..., A[N]. You need to process two types of queries on this array: 1. Update query: `1 x y` - Assign the value `y` to `A[x]`. 2. Range sum query: `2 l r` - Compute and return the sum of the array elements from index `l` to `r` (both inclusive). The array is 1-based indexed. Write a program to process Q queries of the above types and output the results of the range sum queries. Constraints: * 1≤N≤10^5 * 1≤Q≤10^5 * 1≤A[i], y≤10^9 * 1≤x≤N * 1≤l≤r≤N Input The input is given from Standard Input in the following format: N Q A[1] A[2] ... A[N] query_1 query_2 : query_Q Each query is either in the form `1 x y` or `2 l r`. Output For each range sum query, print the result on a new line. Example Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 1 5 6 2 3 5 Output 6 14 13 Explanation The initial array is [1, 2, 3, 4, 5]. 1. The sum from index 1 to 3 is 1+2+3 = 6. 2. Update index 2 to 10, the array becomes [1, 10, 3, 4, 5]. 3. The sum from index 1 to 3 is 1+10+3 = 14. 4. Update index 5 to 6, the array becomes [1, 10, 3, 4, 6]. 5. The sum from index 3 to 5 is 3+4+6 = 13.","solution":"def process_queries(N, Q, A, queries): Processes the queries on the array A and returns the output for range sum queries. N: Number of elements in array A Q: Number of queries A: List of integers representing the array queries: List of queries which are strings in the form \\"1 x y\\" or \\"2 l r\\" Returns a list of integers which are the results of the range sum queries. results = [] for query in queries: parts = query.split() if parts[0] == \'1\': # Update query: \\"1 x y\\" x = int(parts[1]) y = int(parts[2]) A[x-1] = y elif parts[0] == \'2\': # Range sum query: \\"2 l r\\" l = int(parts[1]) r = int(parts[2]) results.append(sum(A[l-1:r])) return results"},{"question":"You are given an array of integers, and the goal is to find a pair of indices i and j (with i < j) such that the sum of the elements at these indices is equal to a given target value k. If multiple such pairs exist, print any one of them. If no such pair exists, print `-1`. -----Input----- The first line contains a single integer n (1 leq n leq 10^5) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the elements of the array. The third line contains a single integer k (-2 times 10^9 leq k leq 2 times 10^9) — the target value. -----Output----- Print two integers i and j (1 leq i < j leq n) — the indices of the pair whose sum is equal to k. If no such pair exists, print `-1`. Note that the indices should be 1-based. -----Examples----- Input 5 1 2 3 4 5 5 Output 1 4 Input 4 -1 -2 -3 -4 -6 Output 2 4 Input 3 1 1 1 3 Output -1 -----Note----- In the first test case: The sum of elements at indices 1 and 4 is 1 + 4 = 5 which is equal to the target value. In the second test case: The sum of elements at indices 2 and 4 is -2 - 4 = -6 which is equal to the target value. In the third test case: There are no two distinct elements in the array whose sum equals the target value of 3. Hence, the output is `-1`.","solution":"def find_pair_with_sum(arr, target): Finds the pair of indices (1-based) i and j (i < j) such that arr[i-1] + arr[j-1] == target. If no such pair exists, returns -1. seen = {} for index, value in enumerate(arr): complement = target - value if complement in seen: return (seen[complement] + 1, index + 1) seen[value] = index return -1"},{"question":"A company has a pattern lock with a numeric keypad from 0 to 9. The complexity of unlocking the lock can be defined in terms of \\"effort\\". If the correct pattern contains several numbers, the effort to press each number consecutively can be measured as the absolute difference between the two numbers pressed. For example, pressing 2 followed by 4 has an effort of |2-4| = 2. Given an integer N, you need to generate all possible patterns of length N (where N is the number of presses in the pattern) and calculate the minimum effort required to unlock the lock for that pattern. ------ Input Format ------ - The input contains a single integer N. ------ Output Format ------ - Output a single integer representing the minimum effort required to unlock the lock. ------ Constraints ------ 1 ≤ N ≤ 10 ------ Sample Input 1 ------ 1 ------ Sample Output 1 ------ 0 ------ Explanation 1 ------ For N=1, there is only one press, hence there is no effort required as there is no consecutive number to calculate the effort. ------ Sample Input 2 ------ 2 ------ Sample Output 2 ------ 1 ------ Explanation 2 ------ For N=2, the minimum effort is obtained by pressing consecutive numbers with the smallest difference, such as 0 followed by 1 or 9 followed by 8. Each sequence like 0->1 or 1->0 or 8->9 or 9->8 results in a minimum effort of 1.","solution":"def min_effort_unlock(N): Calculate the minimum effort required to unlock the lock given the length of the pattern N. if N <= 1: return 0 return 1"},{"question":"Given a 2D grid with each cell containing a value (either 0 or 1), you are required to find the size of the largest square containing only 1s and return its area. # Input - The first line contains two integers, `m` and `n` (1 <= m, n <= 300), representing the number of rows and columns in the grid. - The next `m` lines contain `n` integers each (either 0 or 1), representing the grid. # Output - Output a single integer, representing the area of the largest square containing only 1s. # Examples Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output ``` 4 ``` Input ``` 2 2 1 1 1 1 ``` Output ``` 4 ``` # Explanation In the first example, the largest square containing only 1s has size 2x2 and the area is 4. In the second example, the entire grid is made of 1s and the largest square containing only 1s has size 2x2 and the area is 4.","solution":"def maximalSquare(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"You are given a string S consisting of lower case English alphabets and a pattern P which also consists of lower case English alphabets. You need to find the starting indices of all the substrings in S that are anagrams of P. Strings are considered anagrams if they have the same characters with the same frequency. Constraints * 1 leq |S| leq 10^5 * 1 leq |P| leq |S| Inputs Input is given from Standard Input in the following format: S P Outputs Print the starting indices of all substrings in S that are anagrams of P in ascending order, separated by space. Examples Input cbaebabacd abc Output 0 6 Input abab ab Output 0 1 2","solution":"from collections import Counter def find_anagrams(s, p): Finds the starting indices of all substrings in s that are anagrams of p. Args: s (str): The main string. p (str): The pattern string. Returns: list: A list of starting indices of the anagram substrings. p_len = len(p) s_len = len(s) # Edge case where pattern length is greater than string length if p_len > s_len: return [] p_counter = Counter(p) window_counter = Counter(s[:p_len]) result = [] for i in range(s_len - p_len + 1): if window_counter == p_counter: result.append(i) # Slide the window to the right by one character if i + p_len < s_len: window_counter[s[i]] -= 1 if window_counter[s[i]] == 0: del window_counter[s[i]] window_counter[s[i + p_len]] += 1 return result"},{"question":"Toy Train Route Input: The first line contains N - the number of stations on the toy train\'s route. The following N lines each contain the name of a station comprised of lowercase letters [a-z]. The next line contains Q - the number of queries. The following Q lines each contain a starting station name and a destination station name separated by a space. Output: For each query, print the total number of stations (inclusive of the starting and destination stations) one must travel through on a direct route from the starting station to the destination station. Constraints: 2 ≤ N ≤ 100 1 ≤ Length of station name ≤ 20 1 ≤ Q ≤ 100 Assume route stations are listed in the order they appear along the train track, and travel is always in the forward direction (i.e., the destination station will always come after the starting station in the order provided). SAMPLE INPUT 5 central park union station harbor 2 park station central harbor SAMPLE OUTPUT 3 5","solution":"def toy_train_route(n, stations, q, queries): Computes the number of stations that lie between a starting station and a destination station. Args: n (int): The number of stations. stations (list): List of station names. q (int): The number of queries. queries (list): List of queries, each query is a tuple of starting and destination station. Returns: result (list): Number of stations (inclusive of start and destination) for each query. station_map = {station: index for index, station in enumerate(stations)} result = [] for start, destination in queries: result.append(station_map[destination] - station_map[start] + 1) return result # Example usage: n = 5 stations = [\\"central\\", \\"park\\", \\"union\\", \\"station\\", \\"harbor\\"] q = 2 queries = [(\\"park\\", \\"station\\"), (\\"central\\", \\"harbor\\")] print(toy_train_route(n, stations, q, queries))"},{"question":"Write a function that takes an input string and a set of shorthand notations to convert specific phrases in the string into their full forms. The shorthand notations are given in a dictionary where the keys are the shorthand and the values are the full forms. The function should replace every occurrence of each shorthand in the input string with its corresponding full form. Your task is to implement the function `expand_shorthands(input_string, shorthand_dict)` which performs this conversion and returns the modified string. **Function Signature:** ```python def expand_shorthands(input_string: str, shorthand_dict: dict) -> str: ``` # Input - `input_string` (str): A string that may contain shorthands to be expanded. - `shorthand_dict` (dict): A dictionary where keys are shorthands (str) and values are their corresponding full forms (str). # Output - The function should return a string with all instances of shorthands replaced by their full forms. # Constraints - The input string will have a length of up to 1000 characters. - The dictionary will contain up to 100 key-value pairs. - Shorthand keys and their corresponding full forms will not contain spaces. # Example ```python input_string = \\"FYI, I\'ll be OOO from EOD today. BRB.\\" shorthand_dict = { \\"FYI\\": \\"for your information\\", \\"OOO\\": \\"out of office\\", \\"EOD\\": \\"end of day\\", \\"BRB\\": \\"be right back\\" } # Expected output: # \\"for your information, I\'ll be out of office from end of day today. be right back.\\" ``` # Explanation In this example, the function replaces \\"FYI\\" with \\"for your information\\", \\"OOO\\" with \\"out of office\\", \\"EOD\\" with \\"end of day\\", and \\"BRB\\" with \\"be right back\\". The resulting string is returned. # Notes - Ensure that the replacements do not conflict with each other. - The input string is case-sensitive, meaning \\"FYI\\" and \\"fyi\\" would be treated as different shorthands.","solution":"def expand_shorthands(input_string, shorthand_dict): Replace all occurrences of shorthands in the input_string with their full forms as provided in shorthand_dict. for shorthand, full_form in shorthand_dict.items(): input_string = input_string.replace(shorthand, full_form) return input_string"},{"question":"In a distant land, there is a unique game that involves strings and permutations. The native inhabitants challenge you to find the lexicographically smallest permutation of a given string that contains one or more distinct characters. Input The first line of the input contains an integer T, indicating the number of test cases. For each test case, there will be one line containing the string S. Output For each test case, print the lexicographically smallest permutation of the string S in the format: \\"Case #case_num: ans\\". Constraints 1 <= T <= 10 1 <= |S| <= 100 S contains only lowercase English letters (a-z). SAMPLE INPUT 2 hello algorithm SAMPLE OUTPUT Case #1: ehllo Case #2: aghilmort Explanation Case #1: The lexicographically smallest permutation of \\"hello\\" is \\"ehllo\\". Case #2: The lexicographically smallest permutation of \\"algorithm\\" is \\"aghilmort\\".","solution":"def lexicographically_smallest_permutation(T, test_cases): Returns the lexicographically smallest permutation for each test case. Parameters: T (int): Number of test cases test_cases (list): List of strings for each test case Returns: list: List of results in format \\"Case #i: ans\\" results = [] for i in range(T): sorted_string = \\"\\".join(sorted(test_cases[i])) results.append(f\\"Case #{i + 1}: {sorted_string}\\") return results"},{"question":"You are developing a text-based game in which players can perform various moves. Each move can either attack an enemy or restore health to the player. The goal is to keep track of the player\'s health while they perform a sequence of moves. The player starts with a health of 100. Attacks reduce the player\'s health by a certain amount, and restores increase the player\'s health by a certain amount, but the player\'s health cannot exceed 100 or go below 0. Write a program to process a sequence of moves and output the player\'s final health. Input Format The first line contains an integer mathbf{N}, the number of moves. Each of the following mathbf{N} lines contains one move, formatted as follows: - If the move is an attack, it is represented as `ATTACK x` where mathbf{x} is a positive integer indicating the amount of damage. - If the move is a restore, it is represented as `RESTORE x` where mathbf{x} is a positive integer indicating the amount of health to be restored. Constraints 1 leq mathbf{N} leq 100 1 leq x leq 100 Output Format Print the player\'s final health after processing all the moves. Sample Input 0 5 ATTACK 20 RESTORE 15 ATTACK 10 ATTACK 30 RESTORE 25 Sample Output 0 80 Explanation 0 Initial health is 100. - After `ATTACK 20`, health is 80. - After `RESTORE 15`, health is 95. - After `ATTACK 10`, health is 85. - After `ATTACK 30`, health is 55. - After `RESTORE 25`, health is 80. The health cannot exceed 100. Hence, the final health is 80.","solution":"def final_health(n, moves): Calculate the final health of the player after a series of moves. Args: n (int): number of moves. moves (list of str): list of moves in the format \\"ATTACK x\\" or \\"RESTORE x\\". Returns: int: final health of the player. health = 100 for move in moves: action, value = move.split() value = int(value) if action == \\"ATTACK\\": health -= value elif action == \\"RESTORE\\": health += value if health < 0: health = 0 elif health > 100: health = 100 return health"},{"question":"You are given a string representation of a number (n) and a digit (d). Your task is to determine the number of times the digit (d) appears within the number (n). Example 1: Input: \\"123456789\\" \\"3\\" Output: 1 Example 2: Input: \\"999999\\", \\"9\\" Output: 6 Your Task: You need to complete the function countDigit() that takes two parameters: a string n representing the number and a string d representing the digit, and returns an integer which denotes how many times the digit (d) appears in the number (n). Constraints: 1 <= length of n <= 105 d is a single digit from \'0\' to \'9\'","solution":"def countDigit(n, d): Returns the number of times the digit d appears in the string representation of the number n. return n.count(d)"},{"question":"Create a function that takes a rectangular matrix as input and returns a list of all elements in the matrix traversed in spiral order. # Example: Given the input matrix ```python matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` The output should be: ```python [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10] ``` Write the `spiral_order` function as follows: ```python def spiral_order(matrix): # Your code here pass ``` # Constraints: - The input matrix is guaranteed to have at least one element. - The input matrix can be of any size (n x m). Implement the `spiral_order` function to achieve the desired functionality, ensuring that the elements are correctly traversed in a clockwise spiral order.","solution":"def spiral_order(matrix): Returns a list of numbers in the matrix traversed in spiral order. if not matrix: return [] rows, cols = len(matrix), len(matrix[0]) spiral = [] left, right = 0, cols - 1 top, bottom = 0, rows - 1 while left <= right and top <= bottom: # Traverse from left to right for col in range(left, right + 1): spiral.append(matrix[top][col]) top += 1 # Traverse downwards for row in range(top, bottom + 1): spiral.append(matrix[row][right]) right -= 1 if top <= bottom: # Traverse from right to left for col in range(right, left - 1, -1): spiral.append(matrix[bottom][col]) bottom -= 1 if left <= right: # Traverse upwards for row in range(bottom, top - 1, -1): spiral.append(matrix[row][left]) left += 1 return spiral"},{"question":"You are given an undirected, weighted graph with n nodes and m edges. Each node is labeled from 1 to n. The graph is connected, meaning there is a path between any pair of nodes. Your task is to find the minimum weight of the maximum spanning tree (MST) for the graph. An MST is a subset of the edges of the graph that connects all the vertices together, without any cycles, and with the minimum possible total edge weight. -----Input----- - The first line of input contains two integers n and m: the number of nodes and the number of edges, respectively. - Each of the next m lines contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^6), representing an edge between nodes u and v with weight w. -----Output----- Print a single integer, the weight of the minimum weight maximum spanning tree. -----Constraints----- - 1 le n le 1000 - n - 1 le m le 10000 -----Example Input----- 4 5 1 2 10 1 3 6 1 4 5 2 3 4 2 4 3 -----Example Output----- 10 -----Explanation----- Example case: The graph has 4 nodes and 5 edges. The edges with their weights are as follows: - 1-2 with weight 10 - 1-3 with weight 6 - 1-4 with weight 5 - 2-3 with weight 4 - 2-4 with weight 3 The optimal way to construct an MST is to use the edges with weights 3, 4, and 5. The minimum weight of the maximum edge in this spanning tree is 5.","solution":"def find_min_weight_of_max_edge_mst(n, m, edges): Returns the minimum weight of the maximum edge in a minimum spanning tree (MST). Parameters: n (int): number of nodes in the graph m (int): number of edges in the graph edges (list of tuples): each tuple contains (u, v, w) indicating an edge between u and v with weight w Returns: int: minimum weight of the maximum edge in the MST # Helper function to find the parent of a set. def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) # Helper function to union two sets. def union(parent, rank, x, y): root_x = find_parent(parent, x) root_y = find_parent(parent, y) if root_x != root_y: if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 # Sort edges based on the weight edges.sort(key=lambda x: x[2]) # Create parent and rank arrays for union-find parent = [i for i in range(n)] rank = [0] * n # Initialize result max_weight_in_mst = 0 # Number of edges in MST is equal to n-1 edge_count = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 x = find_parent(parent, u) y = find_parent(parent, v) # If including this edge does not cause a cycle, include it in the result if x != y: edge_count += 1 max_weight_in_mst = max(max_weight_in_mst, w) union(parent, rank, x, y) if edge_count == n - 1: break return max_weight_in_mst # Example usage: # Input: n = 4, m = 5, edges = [(1, 2, 10), (1, 3, 6), (1, 4, 5), (2, 3, 4), (2, 4, 3)] # Output: 5"},{"question":"=====Problem Statement===== Given two strings, find all unique characters that are present in both strings. Concept The intersection of two sets is a set that contains the elements found in both sets. In Python, this can be achieved using set operations. For example, given two sets A and B, the intersection can be found as: >>> set_A = set(\'abracadabra\') >>> set_B = set(\'alacazam\') >>> set_A & set_B {\'a\', \'c\'} This example demonstrates finding common characters between two sets of characters. =====Input Format===== The first line contains a string s1. The second line contains a string s2. =====Constraints===== 1 ≤ len(s1), len(s2) ≤ 1000 s1 and s2 consist of lower-case English alphabetic characters only. =====Output Format===== Print only one line containing the sorted list of unique characters that are present in both s1 and s2. =====Sample Input===== hello world =====Sample Output===== lo =====Explanation===== The characters \'l\' and \'o\' are present in both strings \\"hello\\" and \\"world\\". When sorted, they appear as \'lo\'.","solution":"def unique_common_characters(s1, s2): Returns a sorted list of unique characters that are present in both strings s1 and s2. # Convert strings to sets to find unique characters set1 = set(s1) set2 = set(s2) # Find intersection of the two sets common_chars = set1 & set2 # Convert the set to a sorted list of characters sorted_common_chars = sorted(common_chars) # Join the sorted characters into a single string result = \'\'.join(sorted_common_chars) return result"},{"question":"You are given a matrix of integers with n rows and m columns (1 leq n, m leq 100), where each element represents a height. You need to determine whether it is possible to identify a rectangular area of the matrix such that the heights of all the elements within this rectangle are equal. In other words, you need to find the maximum size of a rectangle (if any) in which all the heights are the same. If there is no such rectangle, return 0. Each test case represents a new matrix to be analyzed. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m — the number of rows and columns of the matrix. The next n lines, each containing m integers, describe the matrix. -----Output----- Print t lines with answers for all test cases. For each test case, output a single integer representing the area of the largest rectangular area with equal heights. If no such rectangle exists, print 0. -----Example----- Input 2 3 3 1 2 1 1 1 1 1 1 1 4 4 1 1 2 2 1 1 2 2 3 3 4 4 3 3 4 4 Output 6 4 -----Note----- In the first test case, the largest rectangle with equal heights has an area of 6 (a 2 times 3 rectangle formed by the elements in the last two rows). In the second test case, the largest rectangle with equal heights has an area of 4 (a 2 times 2 rectangle formed by the elements in the top-left and bottom-left corners).","solution":"def largest_equal_height_rectangle(mat): n = len(mat) m = len(mat[0]) max_size = 0 for i in range(n): for j in range(m): current_height = mat[i][j] col_right_bound = m for row in range(i, n): if mat[row][j] != current_height: break for col in range(j, col_right_bound): if mat[row][col] != current_height: col_right_bound = col break width = col_right_bound - j height = row - i + 1 area = width * height max_size = max(max_size, area) return max_size def process_test_cases(test_cases): results = [] for mat in test_cases: results.append(largest_equal_height_rectangle(mat)) return results def main(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) idx = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[idx].split()) matrix = [] for i in range(n): matrix.append(list(map(int, lines[idx + 1 + i].split()))) test_cases.append(matrix) idx += n + 1 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a list of integers and a set of rules that determine how the list should be modified. The rules are as follows: - If the integer is divisible by 3, subtract 1 from it. - If the integer is divisible by 5, add 2 to it. - If the integer is divisible by both 3 and 5, set it to 0. - If the integer meets none of the above conditions, leave it unchanged. Write a function that takes a list of integers as input and returns a new list where each integer has been modified according to the rules described above.","solution":"def modify_list(lst): This function takes a list of integers and modifies each integer according to specific rules: - If the integer is divisible by 3, subtract 1 from it. - If the integer is divisible by 5, add 2 to it. - If the integer is divisible by both 3 and 5, set it to 0. - If the integer meets none of these conditions, leave it unchanged. Args: lst (list): List of integers to be modified. Returns: list: A new list with the modified integers. modified_lst = [] for num in lst: if num % 3 == 0 and num % 5 == 0: modified_lst.append(0) elif num % 3 == 0: modified_lst.append(num - 1) elif num % 5 == 0: modified_lst.append(num + 2) else: modified_lst.append(num) return modified_lst"},{"question":"The SmartHome company builds and installs automated systems for home management. One of their products is a lighting system that allows homeowners to control the brightness of each light in their house. Each light has a preset maximum brightness, but can be dimmed to any lower brightness through the control system. SmartHome is offering a new feature where homeowners can set all lights in a particular zone to the same brightness level. However, the customer wants to ensure that the chosen brightness level is the highest possible that is achievable by all lights within that zone. Given the maximum brightness levels of the lights in a zone, help SmartHome determine the maximum uniform brightness level that can be applied to the specified number of lights. -----Input----- The first line contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 100) — the number of lights in the zone and the number of lights to be set to the same brightness level, respectively. The second line contains n space-separated integers: b_1, b_2, ..., b_n (5 ≤ b_i ≤ 10000); where b_i represents the maximum brightness level of the i-th light. -----Output----- Print a single integer — the highest uniform brightness level that can be applied to exactly k lights in the zone. It is guaranteed that the answer to the problem is always an integer. -----Examples----- Input 5 3 60 80 90 70 50 Output 70 Input 4 2 100 200 150 120 Output 150 -----Note----- In the first test case, the maximum possible uniform brightness level that can be applied to three lights is 70. This can be achieved by choosing the lights with brightness levels [60, 70, 90] and dimming the light with brightness level 90 to 70. This answer is optimal. In the second test case, the maximum possible uniform brightness level that can be applied to two lights is 150. This can be achieved by choosing the lights with brightness levels [100, 150] and keeping them at 150 or dimming any higher brightness light to 150.","solution":"def max_uniform_brightness(n, k, brightness_levels): Returns the highest uniform brightness level that can be applied to exactly k lights. # Sort the brightness levels in descending order brightness_levels.sort(reverse=True) # Return the k-th light\'s brightness level return brightness_levels[k-1]"},{"question":"You are given an array of integers. You need to modify this array by performing a series of operations, where in each operation you can choose any two elements, remove them from the array, and insert their sum back into the array. Your task is to determine the maximum product of the elements of the array after performing such operations exactly (n-1) times, where n is the initial number of elements in the array. Input The first line contains an integer n (2 ≤ n ≤ 100 000), the initial number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 200 000), the elements of the array. Output Print one integer, the maximum product of the elements of the array after the operations. Examples Input 3 1 2 3 Output 6 Input 4 4 4 4 4 Output 64 Input 2 5 7 Output 35 Note In the first example, after one operation, you can sum 1 and 2 to get 3. The array becomes [3, 3], and the maximum product is 3*3=9. In the second example, after three operations, you can sum any two 4s to repeatedly get 8 and finally get an array [16], and the maximum product is 16. In the third example, after one operation, you can sum 5 and 7 to get 12. The array becomes [12], and the maximum product is 12.","solution":"def max_product(arr): Computes the maximum product of the elements of the array after performing operations of summing any two elements (n-1) times. :param arr: List[int] - The list of integers. :return: int - The maximum product possible. # The maximum product is achieved by summing all elements to one single element. return sum(arr) ** 2"},{"question":"You are tasked with ensuring that the newly created usernames for an online platform are unique and follow certain criteria. A valid username must start with a lowercase letter and can only contain lowercase letters and digits. If a given username already exists, you need to append a digit to it (starting from 1) until you find a unique one. Write a function that takes a list of existing usernames and a new username and returns the unique username generated. Input Format - The first line contains a single integer, mbox{n}, the number of existing usernames. - The next mbox{n} lines contain the existing usernames. - The last line contains the new username that needs to be checked and potentially modified. Constraints 0 leq n leq 1000 1 leq len(existing_username) leq 50 1 leq len(new_username) leq 50 All characters in usernames are lowercase letters or digits. Output Format Print the unique username that follows the given criteria. Sample Input 3 john123 mike01 alice88 john123 Sample Output john1231","solution":"def generate_unique_username(existing_usernames, new_username): Generate a unique username based on the given new_username and a list of existing usernames. Args: existing_usernames (list of str): The list of already existing usernames. new_username (str): The new username that needs to be checked and potentially modified. Returns: str: A unique username that is not present in the list of existing usernames. if new_username not in existing_usernames: return new_username i = 1 unique_username = f\\"{new_username}{i}\\" while unique_username in existing_usernames: i += 1 unique_username = f\\"{new_username}{i}\\" return unique_username"},{"question":"A group of friends plans to play a game that involves drawing lots. To ensure that each player draws a unique lot, they decide to use a specific mechanism involving numbers on cards. Each of the n cards has a distinct number from 1 to n on it. The game organizer randomly picks m pairs of cards and sets a restriction such that if a card from a pair is picked, the other card from the same pair cannot be picked by any other player. Given the list of these m restricted pairs, your task is to determine whether it\'s possible for all n players to draw a unique lot without violating any restrictions. Input The first line contains two integers n and m (1 ≤ n ≤ 2000, 0 ≤ m ≤ 5000) — the number of players (and also the number of cards) and the number of restricted pairs. The next m lines contain the restricted pairs. Each pair is given as two distinct integers ai and bi (1 ≤ ai, bi ≤ n), indicating that cards ai and bi cannot be picked together by two players. Output Print \\"POSSIBLE\\" if it is feasible for each player to draw one unique lot without any two players picking cards from any restricted pair. Otherwise, print \\"IMPOSSIBLE\\". Examples Input 3 2 1 2 2 3 Output POSSIBLE Input 3 3 1 2 2 3 1 3 Output IMPOSSIBLE Input 4 2 1 2 3 4 Output POSSIBLE","solution":"def can_draw_unique_lots(n, m, restricted_pairs): # Represent each card with a node in the graph. # If there is a restriction between two cards, it is an edge in the graph. graph = [[] for _ in range(n + 1)] for a, b in restricted_pairs: graph[a].append(b) graph[b].append(a) # To determine if it\'s possible to pick unique lots, we need to ensure that # the graph is bipartite. color = [-1] * (n + 1) def is_bipartite(v = 1): queue = [v] color[v] = 1 while queue: node = queue.pop(0) for neighbor in graph[node]: if color[neighbor] == -1: # Assign the opposite color to the neighbor color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: # If the neighbor has the same color, the graph is not bipartite return False return True for i in range(1, n + 1): if color[i] == -1: if not is_bipartite(i): return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"A large software company is undergoing a transition to cloud computing and wants to migrate its application logs to a cloud-based storage system. However, before moving the logs to the new system, they need to clean up duplicate log entries to save storage space. Each log entry is represented as a string of characters. Your task is to write a program that reads a number of log entries and outputs a list of unique log entries in the order they were first encountered. Input The first line of input contains an integer n (1 ≤ n ≤ 105), the number of log entries. The next n lines contain the log entries, each line containing a non-empty string of characters with a maximum length of 100. Output Print each unique log entry in the order it was first encountered, each on a new line. Examples Input 5 error at line 50 user logged in error at line 50 disk full user logged out Output error at line 50 user logged in disk full user logged out Input 4 file not found file not found file not found file not found Output file not found","solution":"def remove_duplicate_logs(n, log_entries): Returns a list of unique log entries in the order they were first encountered. Parameters: n (int): The number of log entries. log_entries (list): List of log entry strings. Returns: list: List of unique log entries. seen = set() unique_logs = [] for entry in log_entries: if entry not in seen: unique_logs.append(entry) seen.add(entry) return unique_logs"},{"question":"The problem of finding the longest contiguous subarray with a given sum can be efficiently solved using a hash map to store prefix sums. Here’s the problem statement: You are given an array of integers `nums` and an integer `k`. Write a function to determine the length of the longest contiguous subarray that sums to `k`. Function signature: ```python def maxSubArrayLen(nums: List[int], k: int) -> int: ``` ***Input:*** - `nums` is a list of integers, where (1 leq text{len}(text{nums}) leq 2 times 10^5) and (-10^4 leq text{nums}[i] leq 10^4). - `k` is an integer, where (-10^9 leq k leq 10^9). ***Output:*** - An integer representing the length of the longest contiguous subarray within `nums` whose sum equals `k`. ***Example:*** ```python # Example 1: nums = [1, -1, 5, -2, 3] k = 3 # Output: 4 # Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest. # Example 2: nums = [-2, -1, 2, 1] k = 1 # Output: 2 # Explanation: The subarray [-1, 2] sums to 1 and is the longest. # Example 3: nums = [1, 2, 3] k = 6 # Output: 3 # Explanation: The subarray [1, 2, 3] sums to 6 and is the longest. ``` ***Note:*** 1. To solve the problem, iterate through the array while maintaining a cumulative sum and storing it in a hash map. 2. For each element in the array, update the cumulative sum and check whether the difference between the cumulative sum and `k` has been seen before. 3. If it has, update the length of the longest subarray. 4. This algorithm should run in linear time O(n), making it suitable for large input sizes.","solution":"from typing import List def maxSubArrayLen(nums: List[int], k: int) -> int: prefix_sum = 0 max_length = 0 seen_sums = {0: -1} for i, num in enumerate(nums): prefix_sum += num if prefix_sum - k in seen_sums: max_length = max(max_length, i - seen_sums[prefix_sum - k]) if prefix_sum not in seen_sums: seen_sums[prefix_sum] = i return max_length"},{"question":"Leha is working on a program where he deals with arrays and different operations on them. He has an array of n integers and needs to perform q queries on this array. Each query is of the following form: `(1, i, v)` or `(2, i, j)`. For a query `(1, i, v)` he needs to set the value of the i-th element of the array to v. For a query `(2, i, j)` he needs to find the sum of the elements from index i to index j (inclusive). Leha wants to accomplish these tasks efficiently. Can you help him? -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 10^5) — the size of the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) — the initial array. Each of the next q lines contains a query of one of the two forms: - 1 i v (1 ≤ i ≤ n, |v| ≤ 10^9) — set the i-th element of the array to v. - 2 i j (1 ≤ i ≤ j ≤ n) — find the sum of the elements from index i to j (inclusive). -----Output----- For each query of the second type, print the result on a new line. -----Examples----- Input 5 3 1 2 3 4 5 2 2 4 1 3 10 2 2 4 Output 9 16","solution":"class LehaArray: def __init__(self, arr, queries): self.arr = arr self.queries = queries def set_value(self, i, v): self.arr[i - 1] = v def range_sum(self, i, j): return sum(self.arr[i - 1: j]) def process_queries(self): results = [] for query in self.queries: q_type, *args = query if q_type == 1: i, v = args self.set_value(i, v) elif q_type == 2: i, j = args results.append(self.range_sum(i, j)) return results # Example usage: # arr = [1, 2, 3, 4, 5] # queries = [(2, 2, 4), (1, 3, 10), (2, 2, 4)] # leha = LehaArray(arr, queries) # result = leha.process_queries() # print(result) # Outputs: [9, 16]"},{"question":"Given two integers, A and B, you need to compute the sum of all numbers between A and B (inclusive) that are divisible by 3 or 5. Write a program that takes two integers as input and returns the sum of all numbers in that range that are divisible by 3 or 5. The range includes both A and B. Input The first and only line of input contains two integers A and B (−10^6 ≤ A ≤ B ≤ 10^6). Output Print the sum of all numbers between A and B that are divisible by 3 or 5. Examples Input 1 10 Output 33 Input -5 5 Output -5 Input -10 0 Output -30 Note In the first sample, the numbers between 1 and 10 that are divisible by 3 or 5 are 3, 5, 6, 9, and 10. Their sum is 3 + 5 + 6 + 9 + 10 = 33. In the second sample, the numbers between -5 and 5 that are divisible by 3 or 5 are -5, 0, and 5. Their sum is -5 + 0 + 5 = 0. In the third sample, the numbers between -10 and 0 that are divisible by 3 or 5 are -10, -9, -6, -5, -3, 0. Their sum is -10 + (-9) + (-6) + (-5) + (-3) + 0 = -33.","solution":"def sum_divisible_by_3_or_5(A, B): Returns the sum of all numbers between A and B (inclusive) that are divisible by 3 or 5. return sum(x for x in range(A, B + 1) if x % 3 == 0 or x % 5 == 0)"},{"question":"You are given a list of positive integers representing the amount of money in coins you have. Your task is to determine the fewest number of coins needed to make up a given amount of money. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin. # Examples: ``` coins = [1, 2, 5], amount = 11 # should return 3 Explanation: 11 = 5 + 5 + 1 coins = [2], amount = 3 # should return -1 Explanation: It\'s not possible to make 3 with only coin of 2. coins = [1], amount = 0 # should return 0 Explanation: Zero amount requires zero coins. ``` # Note: - You can assume that the value of each coin is a positive integer. - The amount is a non-negative integer.","solution":"def coin_change(coins, amount): Determines the fewest number of coins needed to make up the given amount. If it\'s not possible to make the amount with the given coins, returns -1. dp = [amount + 1] * (amount + 1) dp[0] = 0 for i in range(1, amount + 1): for coin in coins: if coin <= i: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[amount] if dp[amount] <= amount else -1"},{"question":"Ella loves strings and she challenges you to solve a problem with the given string. Given a string S, your task is to count the number of substrings that start and end with the character \'a\'. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, S. -----Output:----- For each test case, output in a single line the number of substrings that start and end with the character \'a\'. -----Constraints----- - 1 leq T leq 10^5 - 1 leq |S| leq 10^3 (where |S| is the length of string S) -----Sample Input:----- 2 ababa abc -----Sample Output:----- 3 1","solution":"def count_substrings_start_end_a(S): Given a string S, this function counts the number of substrings that start and end with the character \'a\'. count_a = S.count(\'a\') # The number of substrings that start and end with \'a\' is given by count_a * (count_a + 1) // 2 # This is because for each \'a\' we can create substrings with every other \'a\' that comes after it return count_a * (count_a + 1) // 2 def solve(T, test_cases): results = [] for S in test_cases: results.append(count_substrings_start_end_a(S)) return results"},{"question":"You are given a rectangular garden represented by an n x m grid. Each cell in the grid can either be empty or contain an obstacle. You want to plant a certain number of trees in this garden such that no two trees are in the same row or column, and none of the trees is planted on a cell containing an obstacle. Determine the maximum number of trees that can be planted under these constraints. Input The first line of input contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100), representing the number of rows and columns in the grid, respectively. The following n lines each contain m characters. Each character is either \'.\' indicating an empty cell or \'#\' indicating an obstacle. Output Output a single integer representing the maximum number of trees that can be planted. Example Input 4 4 .... .#.. ..#. .... Output 4 Input 3 5 ..... ..#.. .#... Output 3 Note In the first case, trees can be planted at positions (1,1), (2,4), (3,2), and (4,3). In the second case, trees can be planted at positions (1,1), (2,4), and (3,2).","solution":"def max_trees(n, m, grid): Determines the maximum number of trees that can be planted in an n x m grid such that no two trees are in the same row or column, and none of the trees is planted on a cell containing an obstacle. :param n: int - number of rows :param m: int - number of columns :param grid: List[str] - the garden grid :return: int - the maximum number of trees that can be planted # Arrays to record rows and columns where we can plant trees row_planted = [False] * n col_planted = [False] * m # Result counter max_trees_count = 0 # We try to plant trees row by row for i in range(n): for j in range(m): # If the cell is empty and both the row and column are still available if grid[i][j] == \'.\' and not row_planted[i] and not col_planted[j]: row_planted[i] = True col_planted[j] = True max_trees_count += 1 break return max_trees_count"},{"question":"You have N (1 ≤ N ≤ 200,000) tasks in a to-do list. Each task i is described by a pair of integers (Si, Ei) where Si is the start time and Ei is the end time of the task. Your goal is to select the maximum number of tasks that you can complete without any overlaps in their times. A task can only be started after the previous one finishes. Input The first line contains an integer N, the number of tasks. The following N lines contain two integers each, Si and Ei, the start and end times of the tasks. Output Output the maximum number of tasks you can complete without any overlaps. Example Input: 3 1 3 2 5 4 6 Output: 2 Explanation: You can complete at most 2 tasks without overlaps, by choosing tasks (1, 3) and (4, 6).","solution":"def max_non_overlapping_tasks(tasks): Returns the maximum number of non-overlapping tasks that can be completed. Parameters: tasks (list of tuples): A list where each tuple contains two integers representing the start and end times of a task. Returns: int: The maximum number of non-overlapping tasks. # Sort tasks based on the end time tasks.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in tasks: if start >= end_time: count += 1 end_time = end return count def max_non_overlapping_tasks_from_input(N, task_list): # Parse input into a list of tasks tasks = [tuple(task_list[i]) for i in range(N)] return max_non_overlapping_tasks(tasks)"},{"question":"Write a function that determines whether a given string is a \\"zigzag\\" string. A zigzag string is a string where uppercase and lowercase letters alternate, starting with an uppercase letter. For example, \\"AbCdEf\\" is a zigzag string whereas \\"aBcDeF\\" is not, because it does not start with an uppercase letter. ----- Input ------ The function should take a single argument: - `s` (a string): the string to be checked. ------ Output ------ The function should return: - `True` if the string is a zigzag string. - `False` otherwise. ------ Constraints ------ - The string will have a length between 1 and 10^5 (inclusive). - The string will only contain alphabetic characters. ------ Sample Input 1 ------ \\"AbCdEf\\" ------ Sample Output 1 ------ True ------ Sample Input 2 ------ \\"abcdef\\" ------ Sample Output 2 ------ False ------ Explanation ------ In the first sample, \\"AbCdEf\\" is following the zigzag pattern starting with an uppercase \'A\'. Hence, it returns True. In the second sample, \\"abcdef\\" does not start with an uppercase letter and does not alternate properly. Hence, it returns False.","solution":"def is_zigzag(s): Determines if the given string is a zigzag string. Args: s (str): the string to be checked. Returns: bool: True if the string is a zigzag string, False otherwise. if not s[0].isupper(): return False for i in range(1, len(s)): if (i % 2 == 1 and not s[i].islower()) or (i % 2 == 0 and not s[i].isupper()): return False return True"},{"question":"You are given an array of integers representing the heights of the walls of a container. Each pair of walls can hold some amount of water between them if the walls are tall enough and there\'s a lower wall in between that allows the water to be trapped. Write a function to find the maximum amount of water that can be trapped within these walls. Example 1: Input: heights = [1, 8, 6, 2, 5, 4, 8, 3, 7] Output: 49 Explanation: The maximum water can be obtained between the walls at indices 1 and 8 (0-based indexing): Walls: 8 (height at index 1) and 7 (height at index 8) Distance between indices: 8 - 1 = 7 Minimum height of the two walls: min(8, 7) = 7 Water trapped: 7 * 7 = 49 units of water Example 2: Input: heights = [1, 1] Output: 1 Explanation: The maximum water can be obtained between the two walls: Walls: 1 (height at index 0) and 1 (height at index 1) Distance between indices: 1 - 0 = 1 Minimum height of the two walls: min(1, 1) = 1 Water trapped: 1 * 1 = 1 unit of water Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxWater() which takes the array heights[] as input parameter and returns the maximum amount of water that can be trapped within these walls. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ heights.length ≤ 10^5 0 ≤ heights[i] ≤ 10^4","solution":"def maxWater(heights): Returns the maximum amount of water that can be trapped between the walls represented by heights. left = 0 right = len(heights) - 1 max_water = 0 while left < right: width = right - left min_height = min(heights[left], heights[right]) current_water = width * min_height max_water = max(max_water, current_water) # Move the pointer that points to the shorter wall if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"You are given an array of integers representing the calorie values of different food items. Your goal is to select a subset of these food items such that their total calorie count is as close as possible to, but not exceeding, a given target value (specified as a positive integer). You must write a function that determines the maximum calorie count that can be achieved without exceeding the target. If no subset of food items can be selected to meet the exact target, find the closest possible sum that is less than or equal to the target. Function Description Complete the `maxCalorieSubset` function described below. maxCalorieSubset has the following parameter(s): - int target: the target calorie count - int cal[n]: an array of integers representing calorie values of food items Returns - int: the maximum calorie count closest to or equal to the target Input Format The first line contains an integer `n`, the number of food items. The second line contains `n` space-separated integers `cal[1]...cal[n]`, the calorie values of the food items. The third line contains an integer `target`, the target calorie count. Constraints - 1 leq n leq 100 - 1 leq cal[i] leq 10^3 where 1 leq i leq n - 1 leq target leq 10^4 Sample Input 0 ``` 5 100 200 300 400 500 750 ``` Sample Output 0 ``` 700 ``` Explanation 0 The subset `[100, 200, 400]` gives a total calorie count of 700, which is the closest possible sum that does not exceed the target 750. Sample Input 1 ``` 4 150 200 250 350 500 ``` Sample Output 1 ``` 500 ``` Explanation 1 The subset `[150, 200, 150]` or `[200, 250]` gives a total calorie count of 500, which is exactly equal to the target 500. Sample Input 2 ``` 3 300 400 500 600 ``` Sample Output 2 ``` 500 ``` Explanation 2 The closest possible sum to the target 600 without exceeding it is 500, taken from the subset `[500]`. Your goal is to implement the `maxCalorieSubset` function to achieve the desired output based on the provided inputs.","solution":"def maxCalorieSubset(target, cal): Returns the maximum calorie count closest to or equal to the target. :param target: Target calorie count :param cal: List of calorie values of food items :return: Maximum calorie count without exceeding the target n = len(cal) dp = [0] * (target + 1) for calorie in cal: for j in range(target, calorie - 1, -1): dp[j] = max(dp[j], dp[j - calorie] + calorie) return dp[target]"},{"question":"Alice has recently been fascinated by palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. She wants to find the smallest palindromic number greater than a given number n. Can you help Alice find that number? -----Input----- The input contains one integer n (1 ≤ n ≤ 10^18) — the number after which we need to find the smallest palindromic number. -----Output----- Print one integer – the smallest palindromic number greater than n. -----Examples----- Input 123 Output 131 Input 99 Output 101 Input 12321 Output 12421 -----Note----- In the first sample, the smallest palindromic number greater than 123 is 131. In the second sample, the smallest palindromic number greater than 99 is 101. In the third sample, the smallest palindromic number greater than 12321 is 12421.","solution":"def next_palindromic(n): Returns the smallest palindromic number greater than the input number n. n += 1 while True: if str(n) == str(n)[::-1]: return n n += 1"},{"question":"Simon is learning about sequence transformations and has found a unique transformation called \\"circular shift\\". For a given list of integers, a right circular shift by one position shifts every element to the right by one position, and the last element moves to the first position. For example, a list `[1, 2, 3, 4]` after a circular shift becomes `[4, 1, 2, 3]`. Simon is interested in applying the right circular shift `k` times to a given list of `n` integers. Help Simon by writing a program that performs the right circular shift `k` times and prints the resulting list. -----Input----- The first line contains two integers `n` (1 ≤ n ≤ 100) and `k` (0 ≤ k ≤ 100) — the size of the list and the number of right circular shifts respectively. The second line contains `n` integers separated by spaces that represent the list. -----Output----- Print the list after performing the right circular shift `k` times. -----Examples----- Input 4 1 1 2 3 4 Output 4 1 2 3 Input 6 3 10 20 30 40 50 60 Output 40 50 60 10 20 30 Input 5 5 9 8 7 6 5 Output 9 8 7 6 5","solution":"def circular_shift(n, k, lst): Perform a right circular shift k times on a list of n integers. :param n: Size of the list :param k: Number of right circular shifts :param lst: The list to be shifted :return: The list after k shifts k = k % n # Optimize the number of shifts if k is larger than n return lst[-k:] + lst[:-k]"},{"question":"You are given an integer array `arr` of size `n`. For each integer in the array, find out how many smaller elements on its right side. Return the counts as an array of the same length. Your task is to write a function that completes this task. Constraints: - 1 <= n <= 200,000 - -10^4 <= arr[i] <= 10^4 for 1 <= i <= n Input The first line contains a single integer `n` (1 ≤ n ≤ 200,000), representing the length of `arr`. The second line contains `n` space-separated integers a_1, a_2, ..., a_n where a_i (−10^4 ≤ a_i ≤ 10^4) represents each element of the array. Output Print a line with `n` integers representing the number of smaller elements to the right for each element in the array. Example Input 5 5 2 6 1 3 Output 3 1 2 0 0","solution":"def count_smaller_elements(nums): Given an array nums, return an array where each element is the count of smaller elements to the right of it. def sort(enum): half = len(enum) // 2 if half: left, right = sort(enum[:half]), sort(enum[half:]) for i in range(len(enum))[::-1]: if not right or left and left[-1][1] > right[-1][1]: smaller[left[-1][0]] += len(right) enum[i] = left.pop() else: enum[i] = right.pop() return enum smaller = [0] * len(nums) sort(list(enumerate(nums))) return smaller"},{"question":"Write a function `is_anagram(s1, s2)` that checks whether two strings `s1` and `s2` are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function should return `True` if the given strings are anagrams of each other, and `False` otherwise. Examples ``` s1 = \\"listen\\" s2 = \\"silent\\" ``` `is_anagram(s1, s2)` returns `True` because \\"listen\\" and \\"silent\\" contain the same letters, just in different order. ``` s1 = \\"triangle\\" s2 = \\"integral\\" ``` `is_anagram(s1, s2)` returns `True` because \\"triangle\\" and \\"integral\\" are anagrams. ``` s1 = \\"apple\\" s2 = \\"pale\\" ``` `is_anagram(s1, s2)` returns `False` because \\"apple\\" and \\"pale\\" do not contain the same letters. # Notes - Ignore case sensitivity while comparing. For example, \\"Listen\\" and \\"Silent\\" should be considered anagrams. - Ignore all spaces and punctuation while comparing. For example, \\"Dormitory\\" and \\"Dirty room\\" should be considered anagrams.","solution":"import string def is_anagram(s1, s2): Returns True if s1 and s2 are anagrams, False otherwise. # Normalize the strings by removing spaces and punctuation, then converting to lower case translator = str.maketrans(\'\', \'\', string.punctuation + string.whitespace) normalized_s1 = s1.translate(translator).lower() normalized_s2 = s2.translate(translator).lower() # Check if sorted characters of both strings are equal return sorted(normalized_s1) == sorted(normalized_s2)"},{"question":"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. Example: Input: nums = [-1, 0, 1, 2, -1, -4] Output: [[-1, -1, 2], [-1, 0, 1]] Explanation: nums[0] + nums[1] + nums[2] = -1 + 0 + 1 = 0 nums[0] + nums[4] + nums[5] = -1 + -1 + 2 = 0 The solution set must not contain duplicate triplets.","solution":"def three_sum(nums): Returns all unique triplets in the array which gives the sum of zero. nums.sort() res = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s < 0: left += 1 elif s > 0: right -= 1 else: res.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return res"},{"question":"A matrix is a two-dimensional array of numbers arranged in rows and columns. The cells in the matrix are identified by their row and column indices, which are zero-based. Alice is playing a game with a matrix of integers. The goal of the game is to find the largest possible sum of integers collected along any path from the top-left cell to the bottom-right cell. The path can only proceed to the right or down at each step (i.e., from cell (i, j) one can move either to cell (i, j+1) or to cell (i+1, j)). Given the matrix, help Alice determine the maximum sum she can collect along any path from the top-left cell to the bottom-right cell. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. For each test case, the first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the matrix, respectively. The next n lines each contain m integers, where the j-th integer in the i-th line represents the value of the cell (i, j). The values of the integers in the matrix are between -10^4 and 10^4 inclusive. -----Output----- For each test case, print a single line containing one integer — the maximum sum of integers collected along any path from the top-left to the bottom-right cell. -----Examples----- Input 2 3 3 1 2 3 4 5 6 7 8 9 3 4 1 2 3 4 -1 -2 -3 -4 2 1 -2 -1 Output 29 5 -----Note----- In the first test case, the path with the maximum sum is 1 → 4 → 7 → 8 → 9 with a total sum of 1 + 4 + 7 + 8 + 9 = 29. In the second test case, the path with the maximum sum is 1 → 2 → 3 → 4 → -1 → 2 → 1 with a total sum of 1 + 2 + 3 + 4 + (-1) + 2 + 1 = 12. However, the other paths yield a smaller total sum. Note the matrix contains negative values.","solution":"def max_sum_path(matrix): n = len(matrix) m = len(matrix[0]) # Create a 2D dp array dp = [[0 for _ in range(m)] for _ in range(n)] # Initialize the top left cell dp[0][0] = matrix[0][0] # Fill in the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill in the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill in the rest of the cells for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right cell contains the answer return dp[n-1][m-1] def process_input(): results = [] t = int(input().strip()) for _ in range(t): n, m = map(int, input().strip().split()) matrix = [] for _ in range(n): row = list(map(int, input().strip().split())) matrix.append(row) results.append(max_sum_path(matrix)) for result in results: print(result) if __name__ == \\"__main__\\": process_input()"},{"question":"Given a binary tree, connect the nodes that are at the same level. You\'ll be given a binary tree of nodes with properties: `value`, `left` (left child), `right` (right child), and `next` (pointer to the next right node at the same level). You need to populate the `next` pointer for each node to point to its next right node. If there is no next right node, the `next` pointer should be set to `NULL`. For example, consider the following binary tree: 1 / 2 3 / / 4 5 6 7 After calling your function, the tree should be connected as follows: 1 -> NULL / 2 -> 3 -> NULL / / 4-> 5->6-> 7 -> NULL Your Task: This is a function problem. You need to implement the function `connect(Node *root)` that takes a root node and connects the nodes at the same level. The function should not return anything. Example 1: Input: 1 / 2 3 / / 4 5 6 7 Output: 1 -> NULL / 2 -> 3 -> NULL / / 4-> 5-> 6-> 7 -> NULL Example 2: Input: 10 / 8 2 3 6 Output: 10 -> NULL / 8 -> 2 -> NULL 3 -> 6 -> NULL Constraints: - The number of nodes in the tree is in the range [0, 10^4]. - -10^5 <= Node.value <= 10^5 Hints: - Use a level-order traversal (BFS) to visit each node. - Maintain a queue to manage nodes, and connect nodes at the same level during traversal.","solution":"class Node: def __init__(self, value=0, left=None, right=None, next=None): self.value = value self.left = left self.right = right self.next = next def connect(root): Connects the nodes at the same level in a binary tree. if not root: return # Initialize the queue with the root node queue = [root] while queue: next_level = [] for i in range(len(queue)): node = queue[i] if i < len(queue) - 1: node.next = queue[i + 1] else: node.next = None if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) queue = next_level"},{"question":"You are given a list of integers. Remove all duplicate elements from the list while maintaining the original order of the remaining elements. Input The only line of input contains a list of integers separated by spaces. The list can have between 1 and 100 integers, each integer ranging from -1000 to 1000. Output Output the list of integers, with duplicates removed, in their original order. Examples Input 4 5 6 4 5 7 8 Output 4 5 6 7 8 Input 1 2 2 3 1 4 Output 1 2 3 4","solution":"def remove_duplicates(input_list): Removes duplicates from the list while maintaining original order. Args: input_list (list of int): The list of integers to process. Returns: list of int: The list with duplicates removed. seen = set() result = [] for item in input_list: if item not in seen: seen.add(item) result.append(item) return result def main(input_line): Process the input line to remove duplicates and maintains order. Args: input_line (str): The input line containing integers. Returns: list of int: The list after removing duplicates. input_list = list(map(int, input_line.split())) return remove_duplicates(input_list)"},{"question":"The kingdom of Codingland is constructing a new bridge. The bridge consists of several segments, and the strength of each segment is represented by a positive integer. The king wants to ensure that the new bridge can support a maximum load, based on the strength of its weakest segment. However, the construction supervisor has discovered that some segments may be defective and have a strength of zero. You are given an array of integers representing the strengths of each bridge segment. Your task is to find the maximum strength of the weakest segment in every contiguous subarray of size K. If a subarray contains a segment with a strength of zero, it should be considered invalid. Input: On the first line, there will be two integers N and K, where N is the number of segments in the array and K is the size of the subarray. On the next line, there will be N positive integers, S[i], representing the strengths of the segments. Output: Output a single integer, denoting the maximum strength of the weakest valid segment in every subarray of size K. If no valid subarray exists, output -1. Constraints: 1 ≤ N ≤ 100000 (10^5) 1 ≤ K ≤ N 0 ≤ S[i] ≤ 1000000 (10^6) Note: Use scanf() , printf() for I/O SAMPLE INPUT 8 3 2 4 3 5 0 1 2 6 SAMPLE OUTPUT 3 Explanation The valid subarrays of size 3 and their weakest segments are: - [2, 4, 3] -> weakest segment is 2 - [4, 3, 5] -> weakest segment is 3 - [1, 2, 6] -> weakest segment is 1 All other subarrays contain a segment with strength 0 and are invalid. The maximum strength of the weakest segment from all valid subarrays is 3.","solution":"def max_weakest_segment_strength(N, K, S): Finds the maximum strength of the weakest valid segment in every contiguous subarray of size K. max_strength = -1 for i in range(N - K + 1): subarray = S[i:i+K] if 0 not in subarray: # Check if the subarray is valid weakest_segment = min(subarray) max_strength = max(max_strength, weakest_segment) return max_strength"},{"question":"reverse_vowels() You are given a string text{S}. Your task is to reverse only the vowels in the string without changing the positions of other characters. Vowels are defined as: AEIOU and aeiou. Input Format A single line of input containing string text{S}. Constraints 0 < text{len}(S) < 100 Output Format Print the string text{S} with the vowels reversed. Sample Input hello world Sample Output hollo werld Explanation The vowels in the input string are e, o, o (in order). Reversing these gives o, o, e. Hence, replacing the vowels in their respective positions results in the output string \\"hollo werld\\".","solution":"def reverse_vowels(s): Reverses the vowels in the string s without changing the positions of other characters. :param s: input string :return: string with vowels reversed vowels = \\"aeiouAEIOU\\" s = list(s) left, right = 0, len(s) - 1 while left < right: if s[left] in vowels and s[right] in vowels: s[left], s[right] = s[right], s[left] left += 1 right -= 1 if s[left] not in vowels: left += 1 if s[right] not in vowels: right -= 1 return \'\'.join(s)"},{"question":"A company is organizing a team-building event where employees from different departments form teams to participate in various activities. Each team must consist of members from at least two different departments to encourage inter-departmental collaboration. Additionally, the total number of teams must be maximized while ensuring that any employee can only be part of one team. Write a program to determine the maximum number of teams that can be formed under these conditions. The program reads an input that consists of the following two parts: **Hint:** The first part of the input consists of an integer representing the number of departments. For instance, if there are three departments, you will see a 3. The second part of the input consists of multiple lines, each representing the number of employees in each department. For example, the number of employees in the first department is followed by the count for the second, and so on. **Input:** - The first part consists of a single positive integer, n, representing the number of departments. - The second part consists of one line with n positive integers separated by spaces. Each integer represents the number of employees in each department. **Output:** - Output the maximum number of teams that can be formed. **Example:** **Input:** ``` 3 4 3 5 ``` **Output:** ``` 6 ``` **Explanation:** With one department having 4 employees, another having 3, and the last having 5, the program calculates that a maximum of 6 teams can be formed, satisfying the condition that each team comprises members from at least two different departments.","solution":"def max_teams(n, employees): Returns the maximum number of teams that can be formed where each team consists of members from at least two different departments. total_employees = sum(employees) if n < 2: return 0 # Cannot form any teams with less than 2 departments # The maximum number of teams can be at least half of the total employees max_teams = total_employees // 2 return max_teams"},{"question":"Given a binary tree, write a function that returns the sum of all leaf nodes. A leaf node is a node with no children. Example 1: Input: ``` 1 / 2 3 /| /| 4 5 6 7 8 ``` Output: 30 Explanation: The leaf nodes are 4, 5, 6, 7, and 8. Their sum is 4 + 5 + 6 + 7 + 8 = 30. Example 2: Input: ``` 10 / 20 30 / / 40 50 60 ``` Output: 150 Explanation: The leaf nodes are 40, 50, and 60. Their sum is 40 + 50 + 60 = 150. Your Task: You don\'t need to take any input. Just implement the function `sumLeafNodes(root)` that takes the root of the binary tree as its parameter and returns the sum of all leaf nodes. Note: The binary tree structure is defined as follows: ``` class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Expected Time Complexity: O(N) Expected Auxiliary Space: O(H) Constraints: - 1 ≤ Number of nodes ≤ 10^5 - 1 ≤ Node values ≤ 10^4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumLeafNodes(root): Returns the sum of all leaf nodes in the binary tree. Parameters: root (TreeNode): The root node of the binary tree. Returns: int: The sum of all leaf nodes. if root is None: return 0 # Using a helper function to perform Depth First Search (DFS) def dfs(node): if node is None: return 0 # If it\'s a leaf node, return its value if node.left is None and node.right is None: return node.val # Recursively calculate the sum of left and right subtree return dfs(node.left) + dfs(node.right) return dfs(root)"},{"question":"In Python, the `for` loop is a fundamental control structure that allows you to iterate over a sequence (such as a list, tuple, or string) and execute a block of code for each element in the sequence. For example, the following `for` loop iterates over each character in a string and prints it: ```python for char in \\"hello\\": print(char) ``` In addition to using `for` loops to iterate over sequences, Python provides the `range` function, which generates a sequence of numbers. This is often used to iterate over a specific number of times. Here\'s an example of using `range` with a `for` loop: ```python for i in range(5): print(i) ``` This loop will print the numbers 0 through 4. Task: Complete the function `count_vowels`, which accepts a single string parameter `text`. The function should return the number of vowels (i.e., \'a\', \'e\', \'i\', \'o\', \'u\') present in the given text. Use a `for` loop to iterate over the characters of the string and an `if` statement to check if each character is a vowel. # Examples: ```python count_vowels(\\"hello\\") # Output: 2 count_vowels(\\"world\\") # Output: 1 count_vowels(\\"python\\") # Output: 1 ``` # Note: - The function should be case-insensitive, meaning it should count both uppercase and lowercase vowels. - You can assume the input string will only contain alphabetic characters and spaces.","solution":"def count_vowels(text): Returns the number of vowels in the given text. Parameters: text (str): The input string to count vowels from. Returns: int: The number of vowels in the text. vowels = \\"aeiou\\" count = 0 for char in text.lower(): if char in vowels: count += 1 return count"},{"question":"Given an array of integers, your task is to group these integers into pairs such that the sum of the products of these pairs is maximized. You must pair every element in the array exactly once. For example, if you have an array [1, 3, 2, 1], the potential pairs are (1, 3) and (2, 1). The sum of the products of these pairs is (1*3) + (2*1) = 3 + 2 = 5. Guidelines: - If the array has an odd number of elements, output \\"Invalid input\\". - You can assume the array has at least two elements, and the elements are non-negative integers. Input The input consists of a single line containing a space-separated list of integers representing the array. Output Output a single integer, the maximum sum of the products of the pairs. Example Input: 1 3 2 1 Output: 7 Explanation of the example: To achieve the maximum sum of the products of the pairs, we can pair (3, 2) and (1, 1). The sum of products is (3*2) + (1*1) = 6 + 1 = 7. Input: 4 1 5 Output: Invalid input","solution":"def max_sum_of_products(arr): Groups the integers into pairs and returns the maximum possible sum of products. If the array has an odd number of elements, returns \\"Invalid input\\". if len(arr) % 2 != 0: return \\"Invalid input\\" arr.sort(reverse=True) sum_products = 0 for i in range(0, len(arr), 2): sum_products += arr[i] * arr[i + 1] return sum_products"},{"question":"A group of treasure hunters is exploring an ancient cave system. The cave is represented as a grid of cells, where each cell can either be an empty cell or an impassable wall. The hunters can only move up, down, left, or right through empty cells. They are currently standing on a marked starting cell and there is a marked treasure cell they need to reach. Due to the unstable nature of the cave system, finding the shortest path is critical to avoid collapses. You are asked to help them determine the minimum number of steps required to reach the treasure from the starting cell assuming it is possible to reach. -----Input----- The first line contains two integers, n and m, representing the number of rows and columns in the grid (1 leq n, m leq 1000). Each of the next n lines contains m characters, where each character is either `.`, `#`, `S`, or `T`. The character `.` represents an empty cell, `#` represents an impassable wall, `S` represents the starting cell, and `T` represents the treasure cell. There is exactly one `S` and one `T` in the grid. -----Output----- Output a single integer - the minimum number of steps required to reach the treasure. If it is not possible to reach the treasure, output `-1`. -----Examples----- Sample Input 1: 5 5 ..... ..#.. ..#.. S.#.T ..... Sample Output 1: 6 Sample Input 2: 3 3 S#. .#T ..# Sample Output 2: -1","solution":"from collections import deque def find_min_steps(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right # Locate the positions of \'S\' and \'T\' start_pos = None treasure_pos = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start_pos = (i, j) elif grid[i][j] == \'T\': treasure_pos = (i, j) if not start_pos or not treasure_pos: return -1 # Use BFS to find the shortest path from S to T queue = deque([(start_pos[0], start_pos[1], 0)]) # (row, col, steps) visited = set(start_pos) while queue: r, c, steps = queue.popleft() if (r, c) == treasure_pos: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and grid[nr][nc] != \'#\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"A researcher is studying letter patterns in biological sequences. She is particularly interested in finding words that can be formed by deleting some characters from a given string without reordering the remaining characters. She defined such words as \\"subsequence words.\\" For instance, consider the string \\"BIOLOGY\\". The subsequence words include \\"BIO\\", \\"LOGY\\", and \\"BLY\\". Your task is to help her by writing a function that determines if a word P is a subsequence of a given string S. Input Format: The first line contains T, the number of test cases. Each of the next T lines contains two space-separated strings, S and P, where S represents the biological sequence and P represents the word to be checked. Output Format: For each test case, print \\"Yes\\" (without quotes) if P is a subsequence of S, and \\"No\\" (without quotes) otherwise. Constraints: 1 ≤ T ≤ 100 1 ≤ |S|, |P| ≤ 100 S and P will only contain uppercase English letters. SAMPLE INPUT 4 BIOLOGY BIO GENOME GENE SEQUENCE SEQUIN RESEARCH SEARCH SAMPLE OUTPUT Yes Yes No Yes Explanation Test Case 1: \\"BIO\\" can be formed by deleting \\"L\\", \\"O\\", \\"G\\", \\"Y\\" from \\"BIOLOGY\\". Test Case 2: \\"GENE\\" can be formed by deleting \\"O\\" and \\"M\\" from \\"GENOME\\". Test Case 3: \\"SEQUIN\\" cannot be formed from \\"SEQUENCE\\" as the characters do not follow the required order. Test Case 4: \\"SEARCH\\" can be formed by deleting \\"R, E\\" from \\"RESEARCH\\".","solution":"def is_subsequence(S, P): Returns \'Yes\' if P is a subsequence of S, \'No\' otherwise. iter_s = iter(S) for char in P: if char not in iter_s: return \'No\' return \'Yes\'"},{"question":"Peter and Lucy love to play with numbers. Lucy gives Peter two integer numbers A and B and asks him to check if their product is even or odd. If the product is even, Peter should return \\"even\\", otherwise he should return \\"odd\\". -----Input:----- - First line will contain the two integers A and B. -----Output:----- For each testcase, output in a single line \\"even\\" if the product of the two numbers A and B is even, otherwise \\"odd\\". -----Constraints----- - 1 leq A leq 100 - 1 leq B leq 100 -----Sample Input:----- 4 5 -----Sample Output:----- even","solution":"def check_product_even_odd(A, B): Returns \\"even\\" if the product of A and B is even, otherwise returns \\"odd\\". product = A * B if product % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"question":"Anna is developing a strategy game where players need to fortify their kingdoms by constructing a network of roads. The kingdom consists of n cities connected by m bidirectional roads such that each road has a cost associated with it. The cities are numbered from 1 to n. A key aspect of the gameplay involves ensuring that the kingdom remains connected with the minimum road construction cost. Anna wants to calculate the minimum cost required to connect all the cities such that there is a path between any two cities using one or more of the roads. Given the number of cities, the number of roads, and a list of roads with their corresponding costs, your task is to determine the minimum cost to construct a connected road network that allows traversal between any two cities. If it is impossible to connect all the cities, output -1. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 ⋅ 10^5) — the number of cities and the number of roads, respectively. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) denoting a road between cities u and v with a construction cost of w. Output Print one integer — the minimum cost to ensure all cities are connected. If it\'s impossible to connect all cities, print -1. Examples Input 4 5 1 2 1 1 3 4 2 3 2 3 4 3 1 4 5 Output 6 Input 3 1 1 2 3 Output -1 Note In the first example, the minimum cost to connect all cities is achieved by constructing roads with costs 1, 2, and 3. Thus, the total cost is 6. In the second example, there is only one road between cities 1 and 2, making it impossible to connect all three cities. Hence, the output is -1.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimum_cost_to_connect_cities(n, m, roads): if n == 1: return 0 if m == 0: return -1 # Sorting the edges by their weight roads.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) result = 0 edge_count = 0 for u, v, w in roads: u -= 1 v -= 1 x = find(parent, u) y = find(parent, v) if x != y: result += w edge_count += 1 union(parent, rank, x, y) if edge_count == n - 1: break if edge_count == n - 1: return result else: return -1"},{"question":"Given an undirected graph with N vertices and M edges, print the degree of each vertex (the number of edges connected to the vertex). -----Constraints----- - All values in input are integers. - 1 le N le 100000 - 0 le M le 100000 - 1 le u, v le N -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M -----Output----- Print N lines. The i-th line should contain the degree of the i-th vertex. -----Sample Input----- 5 4 1 2 2 3 4 2 3 5 -----Sample Output----- 1 3 2 1 1 Explanation: - Vertex 1 is connected to vertex 2: degree = 1 - Vertex 2 is connected to vertices 1, 3, and 4: degree = 3 - Vertex 3 is connected to vertices 2 and 5: degree = 2 - Vertex 4 is connected to vertex 2: degree = 1 - Vertex 5 is connected to vertex 3: degree = 1","solution":"def degrees_of_vertices(N, M, edges): Computes the degree of each vertex in an undirected graph. Parameters: - N: int, number of vertices - M: int, number of edges - edges: list of tuples, each tuple contains two integers representing an edge between two vertices Returns: - list of integers, degree of each vertex from 1 to N # Initialize a list to keep track of the degree of each vertex degrees = [0] * N # Iterate over each edge and increment the degree for both vertices for u, v in edges: degrees[u - 1] += 1 degrees[v - 1] += 1 return degrees"},{"question":"Write a function that takes two lists of integers as input, list1 and list2, and returns a list of their intersection in sorted order. The intersection of two lists includes only the elements that are present in both lists. If there are duplicate occurrences of an element in both lists, the result should include as many copies as there are in the list with fewer occurrences. Your task is to implement this function to return the sorted intersection list. # Input The input consists of two lines: 1. The first line contains a space-separated list of integers, representing list1. 2. The second line contains a space-separated list of integers, representing list2. It is guaranteed that each list will contain at most 10000 integers. Each integer will be between -10000 and 10000. # Output Return the sorted list of integers that form the intersection of the two input lists. # Examples Input 3 4 5 6 7 8 5 6 7 8 9 10 Output 5 6 7 8 Input 1 2 2 3 4 2 2 5 6 Output 2 2","solution":"def sorted_intersection(list1, list2): Returns the sorted intersection of two lists, considering the minimum occurrence of duplicates. from collections import Counter counter1 = Counter(list1) counter2 = Counter(list2) intersection = [] for elem in counter1: if elem in counter2: min_occurrences = min(counter1[elem], counter2[elem]) intersection.extend([elem] * min_occurrences) return sorted(intersection)"},{"question":"Alex lives in a city with a unique road network represented as a tree. Each node (or intersection) in the tree is numbered from 1 to n, where n is the total number of intersections. Roads (or edges) in the tree connect these intersections, and there is exactly one path between any two intersections. Each road has an associated travel time. The government regularly updates the travel times due to road maintenance or other reasons. Alex needs to travel between various intersections, and he wants to know the minimum travel time for his trips after all updates. # Events: 1. The government updates the travel time for a specific road. 2. Alex wants to travel from one intersection to another and needs to know the minimum travel time. # Input: 1. The first line contains an integer `n` (2 ≤ n ≤ 100,000), the number of intersections. 2. The next `n-1` lines each contain three integers `a`, `b`, and `t` (1 ≤ a, b ≤ n, 1 ≤ t ≤ 10^9), indicating a road between intersections `a` and `b` with a travel time of `t`. 3. The following line contains an integer `q` (1 ≤ q ≤ 100,000), the number of events. 4. The next `q` lines contain the events in one of the following formats: - `1 x y t` (1 ≤ x, y ≤ n, 1 ≤ t ≤ 10^9): Update the travel time of the road between intersections `x` and `y` to `t`. - `2 u v` (1 ≤ u, v ≤ n): Alex travels from intersection `u` to intersection `v`. Output the minimum travel time for this trip. # Output: For each travel event, output the minimum travel time on a new line. # Example Input: ``` 6 1 2 5 1 3 3 2 4 8 2 5 2 3 6 4 5 1 2 4 10 2 4 5 2 1 6 1 3 1 1 2 5 6 ``` # Example Output: ``` 18 7 11 ``` # Explanation: - The initial travel time between intersections 2 and 4 is updated from 8 to 10. - The travel time between intersections 4 and 5 is 18. - The travel time between intersections 1 and 6 is 7. - The travel time between intersections 3 and 1 is updated from 3 to 1. - The travel time between intersections 5 and 6 is 11.","solution":"import heapq from collections import defaultdict, deque import sys class RoadNetwork: def __init__(self, n): self.adj = defaultdict(list) self.weights = {} self.n = n def add_road(self, a, b, t): self.adj[a].append(b) self.adj[b].append(a) self.weights[(a, b)] = t self.weights[(b, a)] = t def update_road(self, a, b, t): self.weights[(a, b)] = t self.weights[(b, a)] = t def find_shortest_path(self, start, end): dist = {i: float(\'inf\') for i in range(1, self.n + 1)} dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if u == end: return current_dist if current_dist > dist[u]: continue for v in self.adj[u]: weight = self.weights[(u, v)] if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(priority_queue, (dist[v], v)) return dist[end] # Safe-guard, although in a connected tree there\'s always a path input = sys.stdin.read def read_input_and_process(): data = input().split() index = 0 n = int(data[index]) index += 1 road_network = RoadNetwork(n) for _ in range(n-1): a = int(data[index]) b = int(data[index+1]) t = int(data[index+2]) index += 3 road_network.add_road(a, b, t) q = int(data[index]) index += 1 results = [] for _ in range(q): event_type = int(data[index]) index += 1 if event_type == 1: x = int(data[index]) y = int(data[index+1]) t = int(data[index+2]) index += 3 road_network.update_road(x, y, t) elif event_type == 2: u = int(data[index]) v = int(data[index+1]) index += 2 result = road_network.find_shortest_path(u, v) results.append(result) for res in results: print(res)"},{"question":"Task Alice is a museum curator and has a number of paintings from various artists that she wants to arrange in a straight line on a wall. Each artist demands that all their paintings must be displayed together and in a continuous segment. If `k` paintings require a gap for diving, `a + b + c` paintings need gaps if they belong to different artists (at maximum two empty spaces per gap). Your task is to help Alice determine the minimum width of the wall required to display all given paintings together along with the necessary gaps between paintings of different artists. Each painting has a width of `1` unit and each gap has a width of `2` units. # Example: For `paintings = [3, 2, 1]` (3 paintings by artist 1, 2 paintings by artist 2, and 1 painting by artist 3), the output should be `10`. Explanation: Alice must arrange the paintings as follows: `|| || || || || || || ||`. Here, completing 3 + 2 + 1 paintings by different artists would require 2 gaps of width `2` units each, making a total length of `10` units. For `paintings = [4, 2, 1]`, the output should be `11`. Explanation: Alice must arrange the paintings as follows: `|||| || || || ||`. Here, completing `4` + `2` + `1` paintings by different artists would require 2 gaps with width `2` units each, making a total length of `11` units. # Input/Output - `[input]` list of integers `paintings` Each integer `painting[i]` represents the number of paintings by an artist. `1 ≤ |paintings| ≤ 1000` `1 ≤ paintings[i] ≤ 1000` - `[output]` an integer The minimum width required to display all paintings together.","solution":"def minimum_wall_width(paintings): Calculates the minimum wall width required to display all paintings together along with necessary gaps between paintings of different artists. # Total number of paintings total_paintings = sum(paintings) # Number of gaps needed num_gaps = len(paintings) - 1 # Each gap has a width of 2 units total_gap_width = num_gaps * 2 # Total required wall width total_wall_width = total_paintings + total_gap_width return total_wall_width"},{"question":"A painting competition is organized in a town called ArtVille. Each painting is represented as an array of integers, where each integer symbolizes a segment with a specific color. The competition organizers want to assess the \\"visual complexity\\" of each painting. The visual complexity is defined as the number of distinct elements (colors) in the painting. However, the judges are specific about the section they want to analyze. For each painting, the visual complexity will be calculated over multiple query ranges. Each query specifies a section of the painting to evaluate. Given a painting and several queries, output the visual complexity for each query. Input The first line contains two integers n (1 ≤ n ≤ 105) and q (1 ≤ q ≤ 105), representing the number of segments in the painting and the number of queries, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the segments in the painting. The next q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n), representing the start and end positions (inclusive) for each query. Output For each query, output a single integer—the visual complexity of the painting segment from l to r. Example Input 5 3 1 2 1 3 2 1 3 2 5 1 5 Output 2 3 3 Input 7 2 4 4 4 4 4 4 4 1 7 3 6 Output 1 1 Note: Ensure your solution efficiently handles both large numbers of segments and queries.","solution":"def visual_complexity(n, q, segments, queries): results = [] for l, r in queries: sub_segment = segments[l-1:r] complexity = len(set(sub_segment)) results.append(complexity) return results # Example usage: # n = 5 # q = 3 # segments = [1, 2, 1, 3, 2] # queries = [(1, 3), (2, 5), (1, 5)] # print(visual_complexity(n, q, segments, queries)) # Output should be: [2, 3, 3]"},{"question":"In a galaxy far, far away, the citizens use a unique calendar system. The calendar comprises N months, each with a different number of days. Each month is identified by a unique integer ranging from 1 to N. However, due to irregular planetary movements, the number of days in months can change based on a specific pattern. You are tasked with designing a system to compute the total number of days over a range of months. However, the planetary movements cause the lengths of the months to follow this rule: - The length of the first month is A days. - The length of the second month is B days. - For each subsequent month i (where i > 2), the length of the month is equal to the sum of the lengths of the two preceding months. Given multiple queries, each asking for the total number of days from month L to month R inclusive, you need to find and output the answers efficiently. # Input - The first line contains three integers N, A, and B denoting the number of months, the length of the first month in days, and the length of the second month in days respectively. - The second line contains an integer Q denoting the number of queries. - The next Q lines each contain two integers L and R denoting the range of months for the query. # Output For each query, output a single integer, the total number of days from month L to month R inclusive. # Constraints - 1 le N le 10^5 - 1 le A, B le 10^9 - 1 le Q le 10^5 - 1 le L le R le N # Example Input ``` 5 1 1 3 1 3 2 4 1 5 ``` # Example Output ``` 4 4 12 ``` # Explanation - The lengths of the months are: 1, 1, 2, 3, 5 - For the first query (1, 3), the total number of days is 1 + 1 + 2 = 4 - For the second query (2, 4), the total number of days is 1 + 2 + 3 = 6 - For the third query (1, 5), the total number of days is 1 + 1 + 2 + 3 + 5 = 12","solution":"def total_days(N, A, B, queries): # Compute the lengths of the months months = [0] * N months[0] = A if N > 1: months[1] = B for i in range(2, N): months[i] = months[i-1] + months[i-2] # Compute prefix sums for the months prefix_sums = [0] * N prefix_sums[0] = months[0] for i in range(1, N): prefix_sums[i] = prefix_sums[i-1] + months[i] results = [] for L, R in queries: if L == 1: results.append(prefix_sums[R-1]) else: results.append(prefix_sums[R-1] - prefix_sums[L-2]) return results"},{"question":"A researcher is monitoring the behavior of a frog in a controlled hop experiment. The frog starts at position `0` on a number line and has an initial energy level of `E`. The number line has several lily pads positioned at different distances from the start, where the frog can land and rest. The distance between the starting point and each lily pad is given in an array. The frog\'s energy is consumed during jumps to the lily pads as follows: - If the frog\'s energy level `currentEnergy` is greater than or equal to the distance to the next lily pad, the frog can jump directly to it. - After hopping to the next lily pad, the frog\'s energy decreases by the distance hopped. - If at any point the frog\'s energy level is less than the required distance to the next lily pad, the frog cannot continue. Your task is to determine the minimum initial energy `E` the frog needs to safely reach the last lily pad without running out of energy. Example `distances = [1, 3, 6, 10]` Starting with `E=11`, we get the following sequence of energy decreases: currentEnergy distance remainingEnergy 11 1 10 10 3 7 7 6 1 1 10 -9 (cannot continue) The minimum initial energy `E` in this case is `10`, allowing the frog to complete the experiment. Function Description Complete the `minimum_energy` function in the editor below. `minimum_energy` has the following parameter(s): - `int distances[k]`: array of distances to the lily pads Returns - `int`: the minimum initial energy needed Input Format The first line contains an integer `k`, the number of lily pads. The second line contains `k` space-separated integers `distances[1]...distances[k]`, the distances of the lily pads from the start. Constraints 1 leq k leq 10^5 1 leq distances[i] leq 10^5 where 1 leq i leq k Sample Input 0 4 1 3 6 10 Sample Output 0 10 Explanation 0 If initial energy is 10, the frog\'s energy decreases as follows: currentEnergy distance remainingEnergy 10 1 9 9 3 6 6 6 0 0 10 -10 (cannot continue) If initial energy were less than 10, the frog could not complete the hops. Sample Input 1 3 2 5 8 Sample Output 1 8 Explanation 1 In the second test case, if the frog has energy 8, after hopping to each lily pad, its energy decreases as follows: currentEnergy distance remainingEnergy 8 2 6 6 5 1 1 8 -7 (cannot continue) So the minimum starting energy is `8`.","solution":"def minimum_energy(distances): Determines the minimum initial energy required for the frog to reach the last lily pad given the distances of each lily pad from the start. Parameters: distances (list): Distance of the lily pads from the start. Returns: int: Minimum initial energy required. if not distances: return 0 max_distance = max(distances) return max_distance"},{"question":"You are given a string that consists of lowercase English letters and you can perform the following operation any number of times: - Choose any two adjacent characters in the string and delete them if they are equal. Your task is to determine the length of the resulting string after no more operations can be performed. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of one line, containing a single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Output For each test case, print one integer — the length of the resulting string after no more operations can be performed. Example Input 3 abccba aabb abc Output 0 0 3 Note Explanations for the test cases of the example: 1. From \\"abccba\\", we can perform the operations as follows: \\"abccba\\" -> \\"abba\\" -> \\"aa\\" -> \\"\\". 2. From \\"aabb\\", we can perform the operations as follows: \\"aabb\\" -> \\"bb\\" -> \\"\\". 3. The string \\"abc\\" does not have any adjacent equal characters, so no operations can be performed, and the resulting string is \\"abc\\". The length is 3.","solution":"def reduce_string(s): Reduces the string by removing any two adjacent equal characters repeatedly. :param s: The input string :return: The length of the resulting string after all possible operations are performed. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return len(stack) def process_test_cases(t, test_cases): Process multiple test cases and return the results for each :param t: Number of test cases :param test_cases: List of string test cases :return: List of resulting lengths after operations results = [] for s in test_cases: results.append(reduce_string(s)) return results"},{"question":"Given a list of non-negative integers, return a new list containing the product of all other elements for each element in the original list, without using division. For example, given the list: ``` [1, 2, 3, 4] ``` The function should return: ``` [24, 12, 8, 6] ``` Explanation: - For element at index 0, 2 * 3 * 4 = 24 - For element at index 1, 1 * 3 * 4 = 12 - For element at index 2, 1 * 2 * 4 = 8 - For element at index 3, 1 * 2 * 3 = 6 Ensure the function is optimized in both time and space complexity, aiming for a solution with O(n) time complexity and O(1) space complexity (excluding the output list).","solution":"def product_except_self(nums): Given a list of non-negative integers, returns a new list containing the product of all other elements for each element in the original list. Args: nums (list): List of non-negative integers Returns: list: List of products where each element is the product of all other elements. n = len(nums) if n == 0: return [] output = [1] * n # Calculate products of all elements to the left of each element left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] # Calculate products of all elements to the right of each element right_product = 1 for i in range(n-1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"You are given a street with N houses numbered from 1 to N. Some pairs of houses have bridges between them, described by M pairs where each pair indicates two houses connected by a bridge. The town council wants to set up water tanks such that each house has access to at least one water tank either in the same house or in one of its neighboring houses directly connected by a bridge. Write a program to calculate the minimum number of water tanks needed. [Input]: The input will be given in the following format N M A1 B1 (Houses directly connected by a bridge) A2 B2 A3 B3 .... AM BM Each bridge is bidirectional and there will be no repeated pairs for the same bridge. [Output]: Output a single integer - the minimum number of water tanks required. SAMPLE INPUT 6 5 1 2 2 3 4 5 5 6 3 6 SAMPLE OUTPUT 2","solution":"def min_water_tanks(N, M, bridges): from collections import defaultdict graph = defaultdict(list) for A, B in bridges: graph[A].append(B) graph[B].append(A) visited = [False] * (N + 1) def dfs(node): stack = [node] connected_component = [] while stack: current = stack.pop() if not visited[current]: visited[current] = True connected_component.append(current) for neighbor in graph[current]: if not visited[neighbor]: stack.append(neighbor) return connected_component water_tanks = 0 for house in range(1, N + 1): if not visited[house]: connected_component = dfs(house) water_tanks += 1 return water_tanks # Example usage N = 6 M = 5 bridges = [(1, 2), (2, 3), (4, 5), (5, 6), (3, 6)] print(min_water_tanks(N, M, bridges))"},{"question":"Amanda loves to read fantasy novels. One of her favorite activities is solving puzzles that involve word manipulations. She recently came across a problem where she needs to check if a word can be rearranged to form a palindrome. As a palindrome reads the same forwards and backwards, she needs to check if her word has this potential. Given a string, determine whether any permutation of the characters in the string could form a palindrome. -----Input:----- The first line of the input consists of a single integer T, the number of test cases. Each test case consists of a single string which contains lowercase English letters. -----Output:----- For each test case, print \\"YES\\" if any permutation of the characters can form a palindrome, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 1000 - 1 leq |S| leq 10^6 -----Sample Input:----- 3 civic ivicc civil -----Sample Output:----- YES YES NO -----EXPLANATION:----- For the first input, \\"civic\\" is already a palindrome, so the output is \\"YES\\". For the second input, \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome, so the output is \\"YES\\". For the third input, \\"civil\\" cannot be rearranged to form a palindrome, so the output is \\"NO\\".","solution":"def can_form_palindrome(word): Determine if any permutation of the characters in the string can form a palindrome. from collections import Counter # Count frequency of each character char_count = Counter(word) # Palindrome can have at most one character with an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character has an odd frequency, it cannot form a palindrome return \\"YES\\" if odd_count <= 1 else \\"NO\\" def solve(t, words): results = [] for word in words: results.append(can_form_palindrome(word)) return results"},{"question":"# Problem Description Alex, a software engineer, is developing a system that tracks vehicle fuel consumption. He needs to ensure that the vehicles are using fuel efficiently based on the distance they travel. Your task is to help Alex by writing a function `calculateFuelEfficiency` that determines the fuel efficiency of a vehicle and suggests whether the consumption is within the acceptable range. # Function Details The function `calculateFuelEfficiency` will receive two arguments: 1. `distance` - a floating number representing the distance traveled by the vehicle in kilometers. 2. `fuelUsed` - a floating number representing the fuel used by the vehicle in liters. The function should perform the following steps: 1. Calculate the fuel efficiency as the distance traveled per liter of fuel (km/l). 2. Compare the calculated efficiency with the acceptable range of 15 km/l to 25 km/l inclusive. 3. Return a message depending on whether the vehicle\'s fuel efficiency is within the acceptable range or not. # Expected Output - If the fuel efficiency is within the acceptable range, return the string `\\"Efficient\\"`. - If the fuel efficiency is below 15 km/l, return the string `\\"Inefficient\\"`. - If the fuel efficiency is above 25 km/l, return the string `\\"Over Efficient\\"`. # Examples ```python calculateFuelEfficiency(300.0, 20.0) ``` should return `\\"Efficient\\"` because the efficiency is 15.0 km/l, which is within the acceptable range. ```python calculateFuelEfficiency(150.0, 15.0) ``` should return `\\"Inefficient\\"` because the efficiency is 10.0 km/l, which is below the acceptable range. ```python calculateFuelEfficiency(550.0, 20.0) ``` should return `\\"Over Efficient\\"` because the efficiency is 27.5 km/l, which is above the acceptable range. # Constraints - All inputs will be valid floating number values. - The distance traveled will be greater than zero. - The fuel used will be greater than zero.","solution":"def calculateFuelEfficiency(distance, fuelUsed): Calculates the fuel efficiency of a vehicle and evaluates it against acceptable ranges. Parameters: distance (float): The distance traveled by the vehicle in kilometers. fuelUsed (float): The fuel used by the vehicle in liters. Returns: str: \\"Efficient\\", \\"Inefficient\\", or \\"Over Efficient\\" based on the fuel efficiency. fuel_efficiency = distance / fuelUsed if 15 <= fuel_efficiency <= 25: return \\"Efficient\\" elif fuel_efficiency < 15: return \\"Inefficient\\" else: return \\"Over Efficient\\""},{"question":"You are given a string containing an arithmetic expression using digits, parentheses, and the operators \'+\', \'-\', \'*\', and \'/\'. Your task is to evaluate this expression and return the result as a string formatted to two decimal places. You can assume that the expression is properly formatted and does not contain any invalid characters or malformed expressions. Implement a function that parses and evaluates the given arithmetic expression while respecting the standard rules of operator precedence and parentheses. Input The input is a single line containing an arithmetic expression as described above. The length of the string will be between 1 and 100, inclusive. Output Output a single string containing the result of the evaluation, formatted to two decimal places. Examples Input 3+5*2/(7-3) Output \\"4.50\\" Input 10 + 2 * ( 6 / (4 - 2) ) - 5 Output \\"11.00\\" Note: All arithmetic operations are performed with floating-point precision.","solution":"def evaluate_expression(expression): Evaluates an arithmetic expression and returns the result formatted to two decimal places. try: result = eval(expression) return f\\"{result:.2f}\\" except Exception as e: return str(e)"},{"question":"Consider an n times m matrix textbf{M}. We perform queries on textbf{M} using a pair of integers (r, c). A query is defined as the sum of all elements in a submatrix with the top-left corner at (0, 0) and the bottom-right corner at (r, c). Specifically, the value of a query is: sum_{i=0}^{r}sum_{j=0}^{c} M_{i,j} Given textbf{M} and textit{q} queries, return a list of answers to each query. Example M=[ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] queries=[(0,0), (1,1), (2,2)] The first query uses the submatrix: [ begin{bmatrix} 1 end{bmatrix} ] Sum of elements is 1. The second query uses the submatrix: [ begin{bmatrix} 1 & 2 4 & 5 end{bmatrix} ] Sum of elements is 12. The third query uses the submatrix: [ begin{bmatrix} 1 & 2 & 3 4 & 5 & 6 7 & 8 & 9 end{bmatrix} ] Sum of elements is 45. Return [1, 12, 45]. Function Description Complete the solve function below. solve has the following parameter(s): matrix[M][N]: a 2D array of integers queries[Q][2]: the pairs of integers representing the bottom-right corners of the submatrices Returns int[Q]: the answers to each query Input Format The first line consists of two space-separated integers, n and m. The next n lines each consists of m space-separated integers, the elements of textbf{M}. Each of the textit{q} subsequent lines contains two integers denoting the pair textit{(r, c)} for that query. Constraints 1leq n, m leq100 0leq M_{i,j} leq10^3 1leq q leq100 0leq r<n 0leq c<m Sample Input 0 3 3 1 2 3 4 5 6 7 8 9 3 0 0 1 1 2 2 Sample Output 0 1 12 45 Explanation 0 For (0, 0), the answer is sum_{i=0}^{0}sum_{j=0}^{0} M_{i,j}=1. For (1, 1), the answer is sum_{i=0}^{1}sum_{j=0}^{1} M_{i,j}=12. For (2, 2), the answer is sum_{i=0}^{2}sum_{j=0}^{2} M_{i,j}=45.","solution":"def solve(matrix, queries): n = len(matrix) m = len(matrix[0]) # Precompute the prefix sums prefix_sums = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sums[i+1][j+1] = (matrix[i][j] + prefix_sums[i][j+1] + prefix_sums[i+1][j] - prefix_sums[i][j]) results = [] for r, c in queries: results.append(prefix_sums[r+1][c+1]) return results # Example use case n, m = 3, 3 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] queries = [(0,0), (1,1), (2,2)] print(solve(matrix, queries)) # Output: [1, 12, 45]"},{"question":"In a remote town, there is a tradition to celebrate the town’s founding day by arranging a parade. In this parade, n participants are lined up in a straight line. Each participant has a unique height. Due to the whimsical nature of the celebration, every participant wishes to stand at a position that increases as much of the attention they can receive, which is mainly determined by how much taller they are compared to the participants in front of them. The attention of a participant i (1 ≤ i ≤ n) is the difference in height between themselves and the previous participant, assuming the previous participant is shorter. If there is no participant in front of them or the previous one is taller, their attention score is considered to be 0. Your goal is to find the maximum total attention score that could be achieved with an optimal arrangement of all participants in the parade. Input The first line contains an integer n (1 ≤ n ≤ 100000), indicating the number of participants in the parade. The second line contains n integers, the heights of the participants h1, h2, ..., hn (1 ≤ hi ≤ 1000000000). Output Print a single integer — the maximum possible total attention score considering the optimal arrangement of participants. Examples Input 5 3 1 6 2 8 Output 16 Input 4 1 4 2 3 Output 6 Note In the first example, an optimal arrangement would be [1, 2, 3, 6, 8], resulting in an attention score of (2-1) + (3-2) + (6-3) + (8-6) = 1 + 1 + 3 + 2 = 7. However, given the order of 3,1,6,2,8 as an example on how it might be arranged, would yield (0+0+5+0+6) getting the total of 11 with height differences. In the second example, arranging them in the order [1, 2, 3, 4] achieves the maximum total attention score, calculated as (2-1) + (3-2) + (4-3) = 1 + 1 + 1 = 3. Thus, to maximize the attention score, we must strategically place participants in a sequence keeping height differences actively positive wherever possible.","solution":"def max_attention(n, heights): Returns the maximum possible total attention score considering the optimal arrangement of participants based on their heights. :param n: Number of participants. :param heights: List of integers representing the height of each participant. :return: Maximum total attention score as an integer. heights.sort() # Sort heights in ascending order to maximize height differences attention_score = 0 for i in range(1, n): attention_score += heights[i] - heights[i-1] return attention_score"},{"question":"``` Akash is designing a messaging app and needs a function to convert phone numbers to their keypad equivalents. On a standard phone keypad, numbers are mapped to characters as follows: 2 -> \\"ABC\\", 3 -> \\"DEF\\", 4 -> \\"GHI\\", 5 -> \\"JKL\\", 6 -> \\"MNO\\", 7 -> \\"PQRS\\", 8 -> \\"TUV\\", 9 -> \\"WXYZ\\". Note that 1 maps to nothing and 0 maps to a space. Your task is to create a function that takes in a string of characters and returns the corresponding sequence of numbers based on the keypad layout. input First line consists of t test cases. Next t lines each contain a character string. output For each input string, output the corresponding sequence of numbers representing the characters on the phone keypad. Note: All characters in the input strings will be uppercase letters. SAMPLE INPUT 2 HELLO WORLD SAMPLE OUTPUT 43556 96753 ```","solution":"def convert_to_keypad(sequence): Converts a sequence of uppercase letters to the corresponding phone keypad numbers. Parameters: sequence (str): The input string consisting of uppercase letters. Returns: str: The sequence of numbers corresponding to the phone keypad representation. keypad_mapping = { \'A\': \'2\', \'B\': \'2\', \'C\': \'2\', \'D\': \'3\', \'E\': \'3\', \'F\': \'3\', \'G\': \'4\', \'H\': \'4\', \'I\': \'4\', \'J\': \'5\', \'K\': \'5\', \'L\': \'5\', \'M\': \'6\', \'N\': \'6\', \'O\': \'6\', \'P\': \'7\', \'Q\': \'7\', \'R\': \'7\', \'S\': \'7\', \'T\': \'8\', \'U\': \'8\', \'V\': \'8\', \'W\': \'9\', \'X\': \'9\', \'Y\': \'9\', \'Z\': \'9\' } result = [] for char in sequence: if char in keypad_mapping: result.append(keypad_mapping[char]) return \'\'.join(result)"},{"question":"Your Task You have been given an array of integers representing the heights of buildings in a skyline. Each building has a width of 1 unit. The goal is to compute the area of the largest rectangle that can be formed using consecutive buildings. The height of the rectangle is determined by the shortest building in the range, and the width is determined by the number of buildings included in the range. Write a function to find the area of the largest rectangle that can be formed in the skyline. **Function Signature:** ```python def largest_rectangle_area(heights: List[int]) -> int: ``` # Input - An array of integers `heights` where `heights[i]` represents the height of the `i`-th building. - The length of `heights` will be between 1 and 100000. - Elements of `heights` will be between 0 and 1000000. # Output - Return an integer representing the area of the largest rectangle that can be formed. # Examples ```python assert largest_rectangle_area([2, 1, 5, 6, 2, 3]) == 10 assert largest_rectangle_area([1, 2, 3, 4, 5]) == 9 ``` ___ # Explanation **Example 1**: - Largest rectangle can be formed using heights [5, 6], which produces an area of 5 * 2 = 10. **Example 2**: - Largest rectangle can be formed by considering all buildings, producing an area of 3 * 3 = 9. By analyzing the sequence of buildings and calculating the possible rectangles through iteration and stack-based techniques, we develop an efficient algorithm to solve this problem.","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: Calculate the area of the largest rectangle that can be formed in the skyline. Parameters: heights (List[int]): List of integers representing the heights of buildings. Returns: int: Area of the largest rectangle. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given an integer n, and two arrays parent and value each of length n, your task is to determine if it\'s possible to construct a binary tree with n nodes satisfying the following conditions: - The `parent` array represents the parent of the i-th node (0-based index). - The `value` array represents the value of the i-th node. - The root node has `parent[i] = -1`. - For any node that is not the root, it must have only one parent whose index E must satisfy `0 <= E < n-1`. - The value of any node `i` must be equal to the bitwise XOR of its immediate children\'s values in the tree. Return \\"YES\\" if there exists such a binary tree; otherwise, return \\"NO\\". ----- Constraints ----- - All values in input are integers. - 1 <= n <= 10^5 - -1 <= parent[i] < n-1 for all i (the root node has parent[i] = -1). - 0 <= value[i] < 2^31 for all i. ----- Input ----- Input is given from Standard Input in the following format: n parent[0] parent[1] ... parent[n-1] value[0] value[1] ... value[n-1] ----- Output ----- Print \\"YES\\" if there exists such a binary tree; otherwise, print \\"NO\\". ----- Sample Input ----- 5 -1 0 0 1 1 1 2 3 2 3 ----- Sample Output ----- YES","solution":"def can_construct_binary_tree(n, parent, value): from collections import defaultdict def dfs(node): result = value[node] for child in children[node]: result ^= dfs(child) return result children = defaultdict(list) has_parent = [False] * n for i in range(n): if parent[i] != -1: children[parent[i]].append(i) has_parent[i] = True root = -1 for i in range(n): if not has_parent[i]: if root == -1: root = i else: return \\"NO\\" if root == -1: return \\"NO\\" return \\"YES\\" if dfs(root) == value[root] else \\"NO\\""},{"question":"You\'re given a string S and your task is to determine whether it is possible to remove some characters from the string to make it a non-decreasing sequence of ASCII values. A non-decreasing sequence means that for any two consecutive characters in the sequence, the ASCII value of the first character is less than or equal to the ASCII value of the second character. Input Format - The first line contains a single integer T - the number of test cases. - Each of the next T lines contains a single string S. Constraints - 1 leq T leq 1000 - 1 leq |S| leq 100 Output Format For each test case, print \\"YES\\" if it is possible to remove some characters from the string to make it non-decreasing, otherwise print \\"NO\\". Sample Input 5 abcde edcba acbd aaaaa zyx Sample Output YES NO YES YES NO Explanation - In the first case, the string \\"abcde\\" is already non-decreasing. - In the second case, the string \\"edcba\\" cannot be rearranged into a non-decreasing sequence by removing characters. - In the third case, removing characters \'b\' and \'d\' can result in the sequence \'ac\'. - In the fourth case, the string \\"aaaaa\\" is already non-decreasing. - In the fifth case, no sequence formed from removing characters from \\"zyx\\" will be non-decreasing.","solution":"def is_possible_non_decreasing(S): Function to determine if it\'s possible to remove some characters from the string S to make it a non-decreasing sequence of ASCII values. max_char = \'\' for char in S: if char < max_char: return \\"NO\\" max_char = char return \\"YES\\" def solve(T, test_cases): Solve the problem for T test cases. results = [] for S in test_cases: results.append(is_possible_non_decreasing(S)) return results"},{"question":"In the fictional land of Equilibra, there is a game called Balance Quest that everyone loves to play. The quest involves a series of n mystical weights, each magically placed on a number line at distinct positions, and a golden balance rod that can be placed on any integer position. Players aim to minimize the total imbalance, which is calculated as the sum of the absolute differences between each weight\'s position and the balance rod\'s position. You are invited to participate in Balance Quest. Initially, the balance rod can be placed at any integer position on the number line, but once placed, it cannot be moved. Your goal is to find the optimal position where the balance rod should be placed to achieve the minimum total imbalance. Input The first line contains an integer n, representing the number of mystical weights. The next n lines each contain a single integer p_i, the position of the i-th weight on the number line. * 1 ≤ n ≤ 100,000 * 1 ≤ p_i ≤ 10^6 (all positions are distinct) Output Output a single integer, which is the minimum total imbalance that can be achieved. Examples Input 5 1 5 9 12 16 Output 20 Note The optimal balance rod position is 9. The imbalances for each weight are: |1-9| = 8 |5-9| = 4 |9-9| = 0 |12-9| = 3 |16-9| = 7 Thus, the total imbalance is 8 + 4 + 0 + 3 + 7 = 22 which is the minimum possible imbalance.","solution":"def min_total_imbalance(n, positions): Returns the minimum total imbalance for the balance rod based on the given positions of weights. Parameters: n (int): The number of mystical weights. positions (list of int): The positions of the weights on the number line. Returns: int: The minimum total imbalance. positions.sort() # The optimal position for the balance rod to minimize the total imbalance is # the median of the sorted positions. median_position = positions[n // 2] if n % 2 == 1 else positions[n // 2 - 1] total_imbalance = sum(abs(pos - median_position) for pos in positions) return total_imbalance"},{"question":"Given an array of integers, we define the \\"subarray\\" of this array as any contiguous segment of the array. The sum of a subarray is the sum of its elements. Define the \\"maximal sum subarray\\" as the subarray which has the highest sum among all subarrays of the array. If there are multiple subarrays with the same maximal sum, return the one with the smallest length. If there is still a tie, return the one which appears first. Write a function that finds the maximal sum subarray and its sum. Input Format The first line contains the number of test cases t. Each of the next t lines contains: - The first value is n, the number of elements in the array. - The next n values of the line are the elements of the array. Constraints 1 leq t leq 10 1 leq n leq 10^5 -10^3 leq Array elements leq 10^3 Output Format Output t lines, each containing the maximal sum subarray followed by its sum for the corresponding test case. Each result should be printed in the format: `[subarray elements] sum`. Sample Input 2 4 1 2 3 -2 3 -1 -2 -3 Sample Output [1 2 3] 6 [-1] -1 Explanation For the first case, the subarray [1, 2, 3] provides the maximal sum: 1 + 2 + 3 = 6. For the second case, the subarray [-1] provides the maximal sum as all elements are negative, and -1 is the \\"least negative\\" value.","solution":"def find_maximal_sum_subarray(arr): max_sum = current_sum = arr[0] start = end = temp_start = 0 for i in range(1, len(arr)): if current_sum + arr[i] < arr[i]: current_sum = arr[i] temp_start = i else: current_sum += arr[i] if current_sum > max_sum or (current_sum == max_sum and i - temp_start < end - start): max_sum = current_sum start = temp_start end = i return arr[start:end+1], max_sum def process_test_cases(t, test_cases): results = [] for case in test_cases: n = case[0] arr = case[1:] subarray, max_sum = find_maximal_sum_subarray(arr) results.append(f\\"{subarray} {max_sum}\\") return results # Function to read input and produce output def main(): t = int(input().strip()) test_cases = [] for _ in range(t): test_cases.append(list(map(int, input().strip().split()))) results = process_test_cases(t, test_cases) for result in results: print(result)"},{"question":"In a bustling kingdom, there are numerous cities connected by bidirectional roads. The King has decided to build new roads to improve connectivity. However, he wants to make this addition wisely. He plans to add the fewest number of new roads necessary to ensure that every city can be reached from any other city directly or indirectly. Each city can be considered a node in a graph, and each road as an edge. The kingdom possibly contains multiple disconnected components. Your task is to determine the minimum number of new roads needed to make the kingdom\'s road network fully connected. Input: The first line of input contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case describes a different kingdom. The first line of each test case contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (0 ≤ m ≤ 2*10^5) — the number of cities and the number of existing roads. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n) — representing a road between city `u` and city `v`. The sum of `n` over all test cases does not exceed 10^6, and the sum of `m` over all test cases does not exceed 2*10^6. Output: For each test case, print a single integer — the minimum number of new roads needed to make the road network fully connected. Examples: Input: 2 6 3 1 2 2 3 4 5 4 0 1 3 Output: 2 2 Explanation: In the first example, there are three isolated components: {1, 2, 3}, {4, 5}, and {6}. To connect all cities, we need to add two roads — one between any two cities from different components. In the second example, each city is isolated. Thus, the minimum number of new roads needed is `n - 1` which is 3 - 1 = 2.","solution":"def find_minimum_new_roads_needed(t, test_cases): Given the number of test cases and a list of test_case tuples, each containing the number of cities, number of existing roads, and a list of roads, return the minimum number of roads needed for each test case to make the kingdom\'s road network fully connected. Parameters: t (int): Number of test cases. test_cases (list): List of tuples where each tuple (n, m, roads) represents a test case. - n is the number of cities - m is the number of existing roads - roads is a list of tuple (u, v) representing the existing roads between cities Returns: list: A list of integers representing the minimum number of new roads needed for each test case. from collections import defaultdict, deque def bfs(start_node, visited, graph): queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) results = [] for n, m, roads in test_cases: # Create adjacency list representation of the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) component_count = 0 for city in range(1, n + 1): if not visited[city]: bfs(city, visited, graph) component_count += 1 # Minimum number of roads needed to connect all components results.append(component_count - 1) return results"},{"question":"Given a positive integer N, find the number of special sequences of length N such that the sum of the sequence equals its bitwise XOR. A sequence is an arrangement of N non-negative integers. For example, [1, 2, 3] and [5, 1, 2] are sequences of length 3, but [1, 2] is not a sequence of length 3. Input: - The first line contains the number of test cases T. - Each of the next T lines contains an integer N. Output: For each test case, print the number of special sequences of length N. Constraints: 1 <= T <= 100 1 <= N <= 50 Example: Input: 2 3 4 Output: 4 8 Explanation: When N = 3, one possible special sequence is [0, 0, 0]. Since the sum of the sequence [0, 0, 0] is 0 and its bitwise XOR is also 0. Other sequences include [1, 2, 3], [2, 4, 6], [1, 1, 1], making the total count 4. When N = 4, some possible special sequences are [0, 0, 0, 0], [1, 2, 3, 4], and there are a total of 8 such sequences for N = 4.","solution":"def special_sequences_count(N): Given a length N, returns the number of special sequences where the sum equals the bitwise XOR. # For sequences of length N, the number of such sequences is 2^(N-1) # This is because any sequence meeting the criteria will be accomplished by setting # N-1 variables and the N-th will need to match the bitwise result with the sum return 2 ** (N - 1) def solve_special_sequences(T, test_cases): Given the number of test cases and a list of integers representing sequence lengths, returns the list of results for each test case. results = [] for N in test_cases: results.append(special_sequences_count(N)) return results"},{"question":"Given a grid of dimensions MxN filled with integers, determine the maximum sum of all possible subgrids. Input Specifications: The first line contains an integer T, the number of test cases. For each test case: - The first line contains two integers M and N, the dimensions of the grid. - The next M lines each contain N integers representing the rows of the grid. Output Specifications: For each test case, print an integer representing the maximum sum of all possible subgrids. Constraints: 1 ≤ T ≤ 10 1 ≤ M, N ≤ 50 -100 ≤ grid[i][j] ≤ 100 SAMPLE INPUT 2 2 2 1 -2 -3 4 3 3 1 2 3 4 5 6 -1 -2 -3 SAMPLE OUTPUT 4 21","solution":"def max_sum_subgrid(grid, m, n): max_sum = float(\'-inf\') for left in range(n): temp = [0] * m for right in range(left, n): for i in range(m): temp[i] += grid[i][right] current_max = kadane(temp) max_sum = max(max_sum, current_max) return max_sum def kadane(arr): max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far def max_sum_of_all_subgrids(T, test_cases): results = [] for t in range(T): m, n, grid = test_cases[t] results.append(max_sum_subgrid(grid, m, n)) return results"},{"question":"The Great Local Market is preparing for a festive season and they have N stalls lined up in a row, each selling a different type of merchandise. Due to crowd management regulations, the market organizers want to place barriers after every K stalls to divide the market into segments of exactly K stalls. If the stalls cannot be split into such equal segments, then one extra segment will be created which will contain fewer than K stalls. Given the number of stalls N and the segment size K, your task is to determine the number of full segments (of K stalls) and the size of the remaining segment (if any). Input The first line contains two space-separated integers N and K. Output Print two integers: the number of full segments of size K and the size of the remaining segment (if any). If there is no remaining segment, print 0. Constraints 1 ≤ N, K ≤ 10^9 SAMPLE INPUT 25 7 SAMPLE OUTPUT 3 4 Explanation: - We have 25 stalls and we want to divide them into segments of 7 stalls each. - We can create 3 full segments of 7 stalls (7 * 3 = 21). - This leaves us with 4 stalls which form the remaining segment. Thus, the output is 3 full segments and a remaining segment of size 4.","solution":"def calculate_segments(N, K): Calculate the number of full segments of size K and the size of the remaining segment given N stalls. Parameters: N (int): The total number of stalls. K (int): The segment size. Returns: tuple: A tuple containing the number of full segments and the size of the remaining segment. full_segments = N // K remaining_segment = N % K return full_segments, remaining_segment"},{"question":"A software company wants to develop a function that rearranges the characters of a given string such that: 1. All occurrences of each character are grouped together. 2. The groups of characters appear in the order of their first occurrence in the string. -----Input----- The first line contains a single integer T, which is the number of test cases. Each of the following T lines contains a string with lowercase English alphabet letters only. -----Output----- For each test case, output the rearranged string with grouped characters in the order of their first occurrence. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ length of string ≤ 100 -----Example----- Input: 3 abac xyyzx aabbcc Output: aabc xxyyz aabbcc -----Explanation----- Example case 1. \'a\' appears first and has two occurrences which are grouped together followed by one occurrence of \'b\' and one occurrence of \'c\'. Example case 2. \'x\' appears first twice, followed by two occurrences of \'y\' and one occurrence of \'z\'. Example case 3. Each character appears only twice and is already grouped together.","solution":"def rearrange_characters(T, strings): results = [] for s in strings: unique_chars = [] char_count = {} for char in s: if char not in char_count: unique_chars.append(char) char_count[char] = 0 char_count[char] += 1 rearranged_string = \'\'.join(char * char_count[char] for char in unique_chars) results.append(rearranged_string) return results"},{"question":"You are given a list of integers where every integer appears twice except for one integer which appears only once. Your task is to find the integer that appears only once. Write a function, `findUnique`, that takes a list of integers as input and returns the integer that appears only once. Input - A list of integers, where the length of the list is between 1 and 10^7. - Each integer in the list is between 1 and 10^9. Output - Return the integer that appears only once in the list. Example Input [4, 2, 2, 1, 4] Output 1 Input [1, 3, 1, 2, 2] Output 3 Note In the first example, the integer 1 appears only once while the others appear twice. Therefore, the function should return 1. In the second example, the integer 3 appears only once while the others appear twice. Therefore, the function should return 3. Requirements - Your solution should have a time complexity of O(n). - You should not use extra space proportional to the size of the input (i.e., no hashmaps or sets that grow with input size).","solution":"def findUnique(nums): Returns the integer that appears only once in the list. unique = 0 for num in nums: unique ^= num return unique"},{"question":"Alice and Bob are playing a game with pebbles. The game starts with n piles of pebbles. The i-th pile initially contains p_i pebbles. They take turns to make a move, and Alice goes first. On each move, a player must choose a pile with at least two pebbles (for example, x pebbles) and remove exactly two pebbles from it. If a player cannot make a move, because all remaining piles have fewer than two pebbles, they lose the game. Alice wants to prepare for the game by testing different initial configurations of pebbles in each pile. She asks you to determine the outcome if the game starts with a particular configuration. Will Alice win the game if both players play optimally? -----Input----- The first line contains a single integer t (1 ≤ t ≤ 100 000) — the number of test cases. Each of the next t lines describes a test case with a single integer n (1 ≤ n ≤ 100 000) followed by n space-separated integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10^9). -----Output----- For each test case, print 1 if Alice wins or 2 if Bob wins, assuming both play optimally. -----Examples----- Input 2 3 1 2 2 4 3 3 3 3 Output 2 1 -----Note----- In the first sample test: Alice cannot make a move because there is only one pile with at least two pebbles, and she can remove both pebbles from the pile of size 2. Bob is then left with a single pile of size 2 and loses because he cannot make another move. In the second sample test: Alice can strategically remove two pebbles from one of the piles with three pebbles, reducing it to a single pebble, ensuring Bob is left with no optimal moves, and Bob eventually loses.","solution":"def determine_winner(t, test_cases): results = [] for i in range(t): n, *piles = test_cases[i] # Calculate the sum of all the piles total_pebbles = sum(piles) # Calculate the sum of pebbles in each pile modulo 2 total_pebbles_mod_2 = sum(p % 2 for p in piles) # If total pebbles is even, and the remaining modulo 2 calculations sum to an odd number Alice wins # If total pebbles is odd, Bob wins if total_pebbles_mod_2 % 2 == 1: results.append(2) else: results.append(1) return results # Function to handle input and output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) # number of test cases index = 1 test_cases = [] for _ in range(t): n = int(data[index]) piles = list(map(int, data[index+1:index+1+n])) test_cases.append([n] + piles) index += n + 1 results = determine_winner(t, test_cases) for result in results: print(result)"},{"question":"A number is said to be a perfect number if it is equal to the sum of its positive divisors, excluding the number itself. Given an integer n, find if the number n is a perfect number or not. If n is perfect, return True, otherwise return False. Example 1: Input: 6 Output: True Explanation: 6 is a perfect number because 1 + 2 + 3 = 6. Example 2: Input: 28 Output: True Explanation: 28 is a perfect number because 1 + 2 + 4 + 7 + 14 = 28. Example 3: Input: 12 Output: False Explanation: 12 is not a perfect number because 1 + 2 + 3 + 4 + 6 != 12. Your Task: Complete the function isPerfectNumber() which takes an integer n as input and returns a boolean indicating whether n is a perfect number or not. Expected Time Complexity: O(sqrt(n)) Expected Space Complexity: O(1) Constraints: 1 <= n <= 10^6","solution":"def isPerfectNumber(n): Returns True if n is a perfect number, otherwise False. if n < 2: return False sum_of_divisors = 1 # 1 is always a divisor for i in range(2, int(n**0.5) + 1): if n % i == 0: sum_of_divisors += i if i != n // i: sum_of_divisors += n // i return sum_of_divisors == n"},{"question":"You are given two strings, `s` and `t`. You need to determine if you can transform string `s` into string `t` by performing a series of operations. In each operation, you can: 1. Choose any character in the string `s` and replace it with a wildcard character `*`, which can match any single character. A transformation is successful if the resulting string from `s` can match the string `t` when considering `*` as any character. Write a function `canTransform(s: str, t: str) -> bool` that returns a boolean indicating whether it is possible to transform `s` into `t` by performing the allowed operations. # Input - Two strings `s` and `t`, each consisting of lowercase English letters and having lengths between 1 and 100 inclusive. # Output - Return `True` if it\'s possible to transform `s` into `t`. Otherwise, return `False`. # Examples Example 1 Input: ```plaintext s = \\"abc\\" t = \\"abc\\" ``` Output: ```plaintext True ``` Example 2 Input: ```plaintext s = \\"abc\\" t = \\"def\\" ``` Output: ```plaintext True ``` Example 3 Input: ```plaintext s = \\"abc\\" t = \\"abcd\\" ``` Output: ```plaintext False ``` Example 4 Input: ```plaintext s = \\"abc\\" t = \\"abx\\" ``` Output: ```plaintext True ``` Example 5 Input: ```plaintext s = \\"a\\" t = \\"z\\" ``` Output: ```plaintext True # Constraints - Both input strings will only contain lowercase English letters. - Length of `s` and `t` will be between 1 and 100 inclusive.","solution":"def canTransform(s: str, t: str) -> bool: Returns boolean indicating if string s can be transformed into string t using the allowed operations. if len(s) != len(t): return False # Iterate over both strings to check if any of the positions are different # If they are different, assume we can replace the unmatched characters with \'*\' for sc, tc in zip(s, t): if sc != tc: continue return True"},{"question":"Write a function that takes a list of integers and an integer k as input and returns a new list with the elements rotated to the right by k steps. Example 1: Given nums = [1,2,3,4,5,6,7] and k = 3, return [5,6,7,1,2,3,4]. Example 2: Given nums = [-1,-100,3,99] and k = 2, return [3,99,-1,-100]. Note: - The rotation should be performed in-place, i.e., modifying the input list without using an additional list for intermediate results.","solution":"def rotate(nums, k): Rotates the elements of the list to the right by k steps. Parameters: nums (List[int]): The list of integers to be rotated. k (int): The number of steps to rotate the list to the right. Returns: List[int]: The rotated list. n = len(nums) k = k % n # Handle rotations greater than the length of the list nums[:] = nums[-k:] + nums[:-k] return nums"},{"question":"Skyscraper View You have just been promoted to the position of the city planner in a bustling metropolis. One of your tasks is to assess the visibility of skyscrapers from different viewpoints across the city. # Problem Statement Consider an array `heights` where `heights[i]` represents the height of the `i-th` skyscraper in a row of skyscrapers. A skyscraper is considered \\"visible\\" if there is no taller skyscraper in between itself and the viewpoint, from left to right. Write a function `visible_skyscrapers(heights: List[int]) -> int` that calculates the number of visible skyscrapers from the starting point (leftmost side of the array). # Example ```python visible_skyscrapers([3, 7, 8, 3, 6, 1]) = 3 ``` Here, the skyscrapers with heights `3`, `7`, and `8` are visible, but the skyscrapers with heights `3`, `6`, and `1` are not visible because they are blocked by taller skyscrapers before them. # Constraints - All heights are positive integers and the array can have up to 10,000 elements. # Notes - Skyscrapers are only considered from left to right. - The viewpoint is the very left side of the array. # Function Signature ```python from typing import List def visible_skyscrapers(heights: List[int]) -> int: pass ``` Design your function to solve the problem efficiently for large inputs. Good luck!","solution":"from typing import List def visible_skyscrapers(heights: List[int]) -> int: Returns the number of skyscrapers that are visible from the starting point. A skyscraper is visible if there is no taller skyscraper to its left. if not heights: return 0 visible_count = 0 max_height = 0 for height in heights: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"Chef has recently purchased a book with M chapters. Each chapter takes Chef exactly X minutes to read. Chef wants to know how many hours it will take him to read all the chapters. Given the number of chapters M in the book and the time X in minutes it takes for Chef to read a chapter, can you help him calculate the total reading time in hours? ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer M, as described in the problem statement. - The second line of each test case contains an integer X, as described in the problem statement. ------ Output Format ------ For each test case, output the number of hours Chef needs to read all the chapters. The answer should be in float with up to 2 decimal places. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M ≤ 500 1 ≤ X ≤ 300 ----- Sample Input 1 ------ 2 5 60 3 120 ----- Sample Output 1 ------ 5.00 6.00 ----- explanation 1 ------ Test case 1: Chef needs to read 5 chapters, each taking 60 minutes, so the total time is 5 cdot 60 = 300 minutes which equals 5.00 hours. Test case 2: Chef needs to read 3 chapters, each taking 120 minutes, so the total time is 3 cdot 120 = 360 minutes which equals 6.00 hours.","solution":"def reading_time_in_hours(T, test_cases): results = [] for i in range(T): M, X = test_cases[i] total_minutes = M * X total_hours = total_minutes / 60 results.append(f\\"{total_hours:.2f}\\") return results"},{"question":"Given a list of `N` integers, you are required to process `M` operations. Each operation is of the following forms: 1. \\"S X Y\\" - Swap the values at positions X and Y. 2. \\"P L R\\" - Calculate the product of elements from index L to R inclusive and print it. 3. \\"U X V\\" - Update the value at position X to V. Write a function that processes these operations efficiently. The outputs of the \\"P L R\\" operations should be printed in the order they are executed. ----- Input ----- The first line contains two space-separated integers `N` and `M`, where `N` is the number of integers in the list and `M` is the number of operations. The second line contains `N` space-separated integers, denoting the initial values of the list. Each of the next `M` lines contains an operation in one of the mentioned formats. ----- Output ----- For each \\"P L R\\" operation, output the product of elements in the list from index `L` to `R` inclusive. ----- Constraints ----- - 1 ≤ N, M ≤ 100000 - 1 ≤ Array elements, X, Y, L, R, V ≤ 100000 - The product of elements for \\"P L R\\" will fit in a 64-bit integer. ----- Example ----- **Input:** 5 4 1 2 3 4 5 P 1 3 S 2 5 P 2 4 U 3 10 **Output:** 6 80 ----- Explanation: ----- 1. Initial array: [1, 2, 3, 4, 5] 2. \\"P 1 3\\" - Product of elements from index 1 to 3: 1*2*3 = 6 3. \\"S 2 5\\" - Swap values at index 2 and 5: Array becomes [1, 5, 3, 4, 2] 4. \\"P 2 4\\" - Product of elements from index 2 to 4: 5*3*4 = 60 5. \\"U 3 10\\" - Update value at index 3 to 10: Array becomes [1, 5, 10, 4, 2]","solution":"class ArrayOperations: def __init__(self, array): self.array = array def swap(self, x, y): self.array[x-1], self.array[y-1] = self.array[y-1], self.array[x-1] def update(self, x, v): self.array[x-1] = v def product(self, l, r): result = 1 for i in range(l-1, r): result *= self.array[i] return result def process_operations(n, m, initial_values, operations): array_ops = ArrayOperations(initial_values) results = [] for operation in operations: op = operation.split() if op[0] == \\"S\\": x, y = int(op[1]), int(op[2]) array_ops.swap(x, y) elif op[0] == \\"P\\": l, r = int(op[1]), int(op[2]) results.append(array_ops.product(l, r)) elif op[0] == \\"U\\": x, v = int(op[1]), int(op[2]) array_ops.update(x, v) return results"},{"question":"Vasya loves sequences. He has a sequence a consisting of n integers. He wants to select exactly k elements from this sequence such that the absolute difference between the maximum and minimum of the selected elements is minimized. Can you help Vasya find the minimum absolute difference that can be obtained by selecting k elements from the sequence? -----Input----- The first line contains two integers n and k (2 le k le n le 200,000) — the length of the sequence and the number of elements to select. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 1,000,000) — the elements of the sequence. -----Output----- Print one integer — the minimum possible absolute difference. -----Examples----- Input 7 3 4 9 1 3 6 8 2 Output 2 Input 5 2 5 3 1 3 4 Output 0 -----Note----- In the first example, the best choice for Vasya is to select the elements 1, 2, and 3, for which the absolute difference between the maximum and minimum elements is 3 - 1 = 2. In the second example, the best choice for Vasya is to select two elements with the same value, 3 and 3, for which the absolute difference is 3 - 3 = 0.","solution":"def min_absolute_difference(n, k, a): This function finds the minimum absolute difference possible by selecting k elements from the given sequence a. # Sort the sequence to be able to work with intervals effectively a.sort() # Initialize the minimum difference to a large value min_diff = float(\'inf\') # Iterate over the sequence to find the minimum difference in any window of k elements for i in range(n - k + 1): window_diff = a[i + k - 1] - a[i] if window_diff < min_diff: min_diff = window_diff return min_diff"},{"question":"A software company wants to simulate the behavior of its multi-threaded applications using a discrete event simulator. You\'re tasked with implementing a simplified version of this simulator. The simulation involves a single queue of events, each with a specific timestamp. Events represent actions like starting or finishing a task, and only one event can be processed at a time in this single-threaded simulation environment. Your task is to simulate the event processing and output the order in which events were executed based on their timestamps. The event processing system should process events in the order of their timestamps. If two events have the same timestamp, they should be processed in the order they appear in the input. -----Input----- The input consists of multiple lines of data. The first line contains an integer n (1 le n le 1000) representing the number of events. Each of the next n lines contains an integer t_i (0 le t_i le 10^6) denoting the timestamp of the i-th event. -----Output----- Output n lines, each containing a single integer i (1 le i le n), representing the 1-based index of the event in its execution order. Events with the earliest timestamps should appear first, and if timestamps are equal, the order should reflect the appearance in the input list. -----Examples----- Sample Input 1: 5 10 20 10 30 10 Sample Output 1: 1 3 5 2 4 Sample Input 2: 4 15 15 10 20 Sample Output 2: 3 1 2 4","solution":"def simulate_events(n, event_timestamps): Simulate the event processing based on the timestamps and return the order of processed events. :param n: The number of events :param event_timestamps: A list of timestamps for each event :return: The order in which events are processed indexed_events = [(i + 1, timestamp) for i, timestamp in enumerate(event_timestamps)] indexed_events.sort(key=lambda x: x[1]) return [event[0] for event in indexed_events]"},{"question":"Given a string containing lowercase alphabets and parentheses, remove the minimum number of parentheses (either \'(\' or \')\') so that the resulting parentheses string is valid and print any valid result. A string is considered valid if it is an empty string, contains lowercase characters only, or contains properly closed parentheses. Example 1: Input: s = \\"a)b(c)d\\" Output: \\"ab(c)d\\" or \\"a(b(c)d)\\" or \\"a)b(c)d\\" (any one of the possible outputs) Example 2: Input: s = \\"))((\\" Output: \\"\\" Explanation: An empty string is the only valid result. Example 3: Input: s = \\"(a(b(c)d)\\" Output: \\"a(b(c)d)\\" or \\"(a(bc)d)\\" or \\"(ab(c)d)\\" or \\"(a(b(cd))\\" (any one of the possible outputs) Your Task: You don\'t need to read input or print anything. Your task is to complete the function minRemoveToMakeValid() which takes the string s as input and returns the resultant string after removing the minimum number of parentheses to make it valid. Expected Time Complexity: O(|s|). Expected Auxiliary Space: O(|s|). Constraints: 1 <= |s| <= 10^5. The string contains lowercase letters and parentheses only (\'(\' and \')\').","solution":"def minRemoveToMakeValid(s): Remove the minimum number of parentheses to make the string valid. Valid string contains lowercase alphabets and properly closed parentheses. stack = [] indexes_to_remove = set() # First pass to find invalid \')\' for i, char in enumerate(s): if char == \'(\': stack.append(i) elif char == \')\': if stack: stack.pop() else: indexes_to_remove.add(i) # Add all unmatched \'(\' indexes to remove list while stack: indexes_to_remove.add(stack.pop()) # Build the result string result = [] for i, char in enumerate(s): if i not in indexes_to_remove: result.append(char) return \'\'.join(result)"},{"question":"In an aquarium, there are n unique types of fish, each identified by a positive integer id (1 to n). The aquarium curator needs to feed the fish, but each type of fish eats a different amount of food every day. The curator has a list containing the ids of the fish and their corresponding food requirements for the day. However, due to a partial recording malfunction, the food requirements for some fish might be missing. You need to help the curator by calculating the total food required for all the fish based on the given information. If the food requirement for a certain type of fish is missing, you should assume it to be zero. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) - the number of unique fish types in the aquarium. The second line contains an integer m (0 ≤ m ≤ n) - the number of recorded food requirements. The next m lines each contain two integers: id (1 ≤ id ≤ n) and food (1 ≤ food ≤ 1000) - representing that the fish with the given id requires the given amount of food for the day. -----Output----- Output a single integer representing the total amount of food required for all the fish in the aquarium. -----Examples----- Input 4 2 2 30 4 50 Output 80 Input 5 3 1 10 3 20 5 15 Output 45","solution":"def total_food_required(n, m, food_requirements): Calculate total food required for all fish types in the aquarium. Args: - n (int): number of unique fish types - m (int): number of recorded food requirements - food_requirements (list of tuples): list containing tuples (id, food) for m recordings Returns: - int: total food required for all fish # Create a list to store the food requirement for each fish type, initialized to 0 food_for_fish = [0] * n # Update the corresponding position in the list with the given food requirements for fish_id, food in food_requirements: food_for_fish[fish_id - 1] = food # Calculate the total food required for all fish total_food = sum(food_for_fish) return total_food"},{"question":"Given a n x n matrix of integers where each row and each column are sorted in ascending order, write a function that finds an element in the matrix. Your algorithm should run in O(n) time. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) – the size of the matrix. The next n lines contain n integers each, representing the matrix. The last line contains a single integer k – the element to search for in the matrix. -----Output----- Print \\"Yes\\" if the element k is found in the matrix. Otherwise, print \\"No\\". -----Examples----- Input 4 1 4 7 11 2 5 8 12 3 6 9 16 10 13 14 17 7 Output Yes Input 4 1 3 5 7 2 4 6 8 9 10 11 12 13 14 15 16 20 Output No -----Note----- In the first example, the element 7 is found in the matrix. In the second example, the element 20 is not found in the matrix.","solution":"def find_element(matrix, n, k): Returns \\"Yes\\" if the element k is found in the n x n matrix else returns \\"No\\". The matrix is sorted in ascending order both row-wise and column-wise. row, col = 0, n - 1 # Start from the top-right corner of the matrix while row < n and col >= 0: if matrix[row][col] == k: return \\"Yes\\" elif matrix[row][col] > k: col -= 1 else: row += 1 return \\"No\\""},{"question":"A subsequence of an array is a sequence that can be derived by deleting some or no elements of the array without changing the order of the remaining elements. A sequence is called \\"balanced\\" if the difference between the sum of the elements in the first half and the sum of the elements in the second half of the sequence is as small as possible. More formally, for a sequence a_1, a_2, ..., a_m, it is balanced if the absolute difference between sum_{i=1}^{lfloor m/2 rfloor} a_i and sum_{j=lfloor m/2 rfloor+1}^{m} a_j is minimized. You are given an array of integers a of length n. Determine the length and content of the longest balanced subsequence possible. -----Input----- The first line contains a single integer n (2 le n le 1000) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) — the elements of the array. -----Output----- Output two lines. The first line contains a single integer m — the length of the longest balanced subsequence. The second line contains m integers — the elements of the longest balanced subsequence. If there are multiple solutions, print any of them. -----Examples----- Input 6 1 7 3 4 5 6 Output 6 1 7 3 4 5 6 Input 5 1 2 -1 -2 3 Output 4 1 2 -1 -2 -----Note----- In the first example, the given array is already balanced, so the longest balanced subsequence is the array itself. In the second example, one possible longest balanced subsequence of the array is [1, 2, -1, -2], where the absolute difference between the sum of the first two elements (1+2=3) and the sum of the last two elements (-1-2=-3) is 0.","solution":"def longest_balanced_subsequence(arr): # Helper function to find the minimum difference of two halves split def find_balanced_split(arr): n = len(arr) arr.sort() left_sum = 0 right_sum = sum(arr) min_diff = float(\'inf\') split_point = 0 for i in range(n): left_sum += arr[i] right_sum -= arr[i] diff = abs(left_sum - right_sum) if diff < min_diff: min_diff = diff split_point = i return split_point + 1 # Length of the array n = len(arr) # Find the balanced split index split_index = find_balanced_split(arr) # Form the balanced subsequence balanced_subsequence = arr[:split_index] + arr[split_index:] balanced_length = len(balanced_subsequence) return balanced_length, balanced_subsequence"},{"question":"# Parking Lot Problem: You are designing an automated parking lot system. The parking lot has a fixed number of small, medium, and large parking spaces. The vehicles that can use this parking lot can either be small, medium, or large. A small vehicle can park in any spot, a medium vehicle can park in either a medium spot or a large spot, and a large vehicle can only park in a large spot. Write a class `ParkingLot` that initializes the number of available parking spaces for each type of vehicle and includes the following methods: - **`park(vehicleType)`**: This method takes in a vehicle type (`1`, `2`, or `3`), where `1` represents a small vehicle, `2` represents a medium vehicle, and `3` represents a large vehicle. The method returns `true` if the vehicle can park in the lot (has an available spot), and `false` otherwise. - **`unPark(vehicleType)`**: This method also takes in a vehicle type (`1`, `2`, or `3`), where `1` represents a small vehicle, `2` represents a medium vehicle, and `3` represents a large vehicle. The method returns `true` if there was such a vehicle parked in the lot and it has been removed, and `false` otherwise. Note: - Vehicles cannot be removed from a slot of different type than their own. - Each park and unpark action affects only the slot of the exact vehicle type passed to the method. **Example:** ```python # Initialize parking lot with 1 small, 1 medium and 1 large spot. parking_lot = ParkingLot(1, 1, 1) assert parking_lot.park(1) == True # Park a small car assert parking_lot.park(2) == True # Park a medium car assert parking_lot.park(3) == True # Park a large car assert parking_lot.park(1) == False # No available small spot assert parking_lot.unPark(1) == True # Remove the small car assert parking_lot.park(3) == False # No available large spot assert parking_lot.park(1) == True # Park another small car ``` Your task is to complete the `ParkingLot` class to implement the described functionality.","solution":"class ParkingLot: def __init__(self, small, medium, large): self.capacity = {1: small, 2: medium, 3: large} self.occupied = {1: 0, 2: 0, 3: 0} def park(self, vehicleType): if self.capacity[vehicleType] > self.occupied[vehicleType]: self.occupied[vehicleType] += 1 return True return False def unPark(self, vehicleType): if self.occupied[vehicleType] > 0: self.occupied[vehicleType] -= 1 return True return False"},{"question":"You are given a string `s` which contains a sequence of words separated by spaces. Some of these words might be palindromes. A palindrome is a word that reads the same backward as forward, ignoring case. Write a function `count_palindromes(s)` that returns the number of palindromic words in the given string. **Examples:** ```python count_palindromes(\\"Madam Arora teaches malayalam\\") returns 3 count_palindromes(\\"Nitin speaks stats in civic tone\\") returns 3 count_palindromes(\\"Hello world\\") returns 0 count_palindromes(\\"ABcBa raceCar\\") returns 2 ``` **Note:** - The input string can be assumed to contain only alphabetical characters and spaces. - Palindromes should be case-insensitive.","solution":"def count_palindromes(s): Returns the number of palindromic words in the given string. words = s.split() palindromes_count = 0 for word in words: if word.lower() == word.lower()[::-1]: palindromes_count += 1 return palindromes_count"},{"question":"You are given an array of integers `arr` representing the daily stock prices of a particular stock over a period of `n` days. Your task is to determine the maximum possible profit that could have been achieved by executing at most one \\"buy\\" operation followed by at most one \\"sell\\" operation during this period. Both operations must be performed on different days in order to make a valid profit. Implement a function to compute this maximum profit. If no profit can be made, return 0. Input format - The input contains two lines: - The first line contains an integer `n`, the number of days. - The second line contains `n` space-separated integers representing the daily stock prices. Constraints - 2 <= n <= 10^5 - 0 <= arr[i] <= 10^5 Output format - Print the maximum possible profit, or 0 if no profit can be achieved. Sample Input 1 6 7 1 5 3 6 4 Sample Output 1 5 Explanation: The maximum profit is achieved by buying on day 2 (price = 1) and selling on day 5 (price = 6), profit = 6 - 1 = 5. Sample Input 2 5 7 6 4 3 1 Sample Output 2 0 Explanation: In this case, no transaction is done and the max profit = 0.","solution":"def max_profit(arr): Returns the maximum possible profit from one buy and one sell operation if not arr or len(arr) < 2: return 0 min_price = arr[0] max_profit = 0 for price in arr[1:]: if price < min_price: min_price = price else: potential_profit = price - min_price max_profit = max(max_profit, potential_profit) return max_profit"},{"question":"Consider that you have an array of integers, and you want to form pairs such that the sum of each pair is an odd number. Write a program to find the maximum number of such pairs you can form from the array. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the array. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 100) — the elements of the array. The numbers in the lines are separated by single spaces. -----Output----- In a single line print a single integer — the maximum number of pairs with odd sum you can form. -----Examples----- Input 5 1 2 3 4 5 Output 2 Input 4 2 4 6 8 Output 0 -----Note----- In the first sample, you can form the pairs (1, 2) and (3, 4) which both have odd sums. Hence the output is 2. In the second sample, no pairs can form an odd sum as all elements are even. Hence the output is 0.","solution":"def max_odd_sum_pairs(arr): Returns the maximum number of pairs with odd sums from the given array. odd_count = sum(1 for x in arr if x % 2 != 0) even_count = len(arr) - odd_count # For a pair to have an odd sum, one number must be odd and the other must be even. max_pairs = min(odd_count, even_count) return max_pairs"},{"question":"In a remote village, the residents are building a pathway using square tiles. The pathway consists of a grid with n rows and m columns. Each cell in the grid contains a square tile with a certain beauty value represented by a positive integer. Two cells are considered adjacent if they share a side. The village chief wants to select a rectangular subgrid of tiles such that the sum of the beauty values of the tiles in it is the maximum possible. Your task is to write a program that finds the maximum sum of beauty values for any rectangular subgrid in the given grid. -----Input----- The first line of the input contains two integers n and m (1 ≤ n, m ≤ 300) — the number of rows and columns in the grid. Each of the next n lines contains m integers, which are the beauty values of the tiles in the grid (1 ≤ beauty value ≤ 1000). -----Output----- Print an integer representing the maximum sum of beauty values for any rectangular subgrid in the grid. -----Examples----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 45 Input 2 2 1 2 3 4 Output 10 -----Note----- In the first example, the entire grid is the subgrid with the maximum sum of beauty values, which is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. In the second example, the entire grid is also the subgrid with the maximum sum, which is 1 + 2 + 3 + 4 = 10.","solution":"def max_subgrid_sum(grid): Returns the maximum sum of beauty values for any rectangular subgrid in the given grid. n = len(grid) m = len(grid[0]) # Create cumulative sum matrix cumulative_sum = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): cumulative_sum[i][j] = grid[i][j] if i > 0: cumulative_sum[i][j] += cumulative_sum[i-1][j] if j > 0: cumulative_sum[i][j] += cumulative_sum[i][j-1] if i > 0 and j > 0: cumulative_sum[i][j] -= cumulative_sum[i-1][j-1] # Helper function to get the sum of a subgrid (r1, c1) to (r2, c2) def get_sum(r1, c1, r2, c2): res = cumulative_sum[r2][c2] if r1 > 0: res -= cumulative_sum[r1-1][c2] if c1 > 0: res -= cumulative_sum[r2][c1-1] if r1 > 0 and c1 > 0: res += cumulative_sum[r1-1][c1-1] return res max_sum = float(\'-inf\') for r1 in range(n): for r2 in range(r1, n): for c1 in range(m): for c2 in range(c1, m): max_sum = max(max_sum, get_sum(r1, c1, r2, c2)) return max_sum"},{"question":"You are working on a secret project that involves analyzing the properties of prime numbers within a specific range. Due to the nature of the project, you need to generate a list of prime numbers less than a given integer n. Prime numbers are natural numbers greater than 1 that are not divisible by any number other than 1 and themselves. For example, if the input is 10, prime numbers less than 10 are [2, 3, 5, 7]. Your task is to implement an efficient algorithm to find all prime numbers less than n. -----Input----- A single integer n (2 leq n leq 10^6) — the upper limit (exclusive) for the range of prime numbers. -----Output----- Output all prime numbers less than n in a single line separated by spaces. -----Examples----- Input 20 Output 2 3 5 7 11 13 17 19 Input 2 Output","solution":"def generate_primes(n): Returns a list of all prime numbers less than n. if n <= 2: return [] sieve = [True] * n sieve[0], sieve[1] = False, False # 0 and 1 are not prime numbers for start in range(2, int(n ** 0.5) + 1): if sieve[start]: for multiple in range(start*start, n, start): sieve[multiple] = False return [num for num in range(n) if sieve[num]]"},{"question":"You are given an array of integers a of length n. Your goal is to determine whether it is possible to reorder the elements of the array such that the sum of the elements in every prefix of the array (i.e., subarrays starting at the beginning) is never a multiple of a given integer k. More formally, you need to determine if there exists a permutation of the array a, say p, such that for every m (1 leq m leq n), the sum of the first m elements of p is not divisible by k. If such a permutation exists, output YES; otherwise, output NO. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of every test case contains two integers n (1 leq n leq 1000) and k (1 leq k leq 1000). The second line of every test case contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^6). -----Output----- For every test case, if there exists a permutation of the array that satisfies the condition, output YES on a separate line. Otherwise, output NO on a separate line. -----Example----- Input 2 4 3 1 2 3 4 3 5 5 10 15 Output YES NO -----Note----- In the first case, one possible permutation is [2, 1, 4, 3]. The prefix sums are [2, 3, 7, 10], none of which are multiples of 3. In the second case, every permutation will result in a prefix sum that is a multiple of 5 since the sum of all elements is 30, which is a multiple of 5, making it impossible to avoid such a prefix sum.","solution":"def can_reorder_to_avoid_multiple(n, k, a): Function to determine if a permutation of the array `a` exists such that for every prefix of the array, the sum of the elements is not divisible by `k`. # Calculate the sum of the array total_sum = sum(a) # If the sum of the array is divisible by k, then we cannot avoid prefix sums being multiple of k if total_sum % k == 0: return \\"NO\\" return \\"YES\\" def solve(t, test_cases): Main function to process each test case and provide the result. results = [] for test_case in test_cases: n, k, a = test_case result = can_reorder_to_avoid_multiple(n, k, a) results.append(result) return results"},{"question":"You are given an array of integers where each integer appears exactly twice, except for one integer which appears exactly once. Your task is to identify the integer that appears only once. -----Input----- The input consists of a single line containing space-separated integers. The total number of integers, n, is guaranteed to be odd and does not exceed 10^6. Each integer fits into a 32-bit signed integer. -----Output----- Print the single integer that appears only once. -----Examples----- Input 2 3 5 4 5 3 4 Output 2 Input 1 1 2 2 3 3 4 Output 4","solution":"def find_single_number(arr): Given an array of integers where every element appears twice except for one, find the integer that appears only once. Args: arr (list): A list of integers. Returns: int: The integer that appears only once. result = 0 for num in arr: result ^= num return result"},{"question":"You are given an N x M grid representing a game board. Some of the cells in this grid are marked with an \'X\', which represents an obstacle, while other cells are marked with a \'.\' representing open spaces. You are initially positioned at the top-left corner of the grid (cell (1,1)) and you want to reach the bottom-right corner of the grid (cell (N, M)). You can move from one cell to another if they share an edge (left, right, top, or bottom), and there is no obstacle (i.e., both cells are marked with \'.\'). Your task is to determine the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is impossible to reach the bottom-right corner, output -1. Input The input is given in the following format: N M grid The first line contains two integers N (2 ≤ N ≤ 1000) and M (2 ≤ M ≤ 1000) representing the number of rows and columns of the grid respectively. The next N lines represent the game board grid. Each of these lines contains M characters (\'X\' or \'.\'), where \'X\' indicates an obstacle and \'.\' indicates an open space. Output Output the minimum number of steps required to reach the bottom-right corner from the top-left corner. If it is impossible to reach the bottom-right corner, output -1. Examples Input 4 5 . . . X . X X . X . . . . . X . X X . . Output 7 Input 3 3 . X X X . X X X . Output -1","solution":"from collections import deque def min_steps_to_reach_end(N, M, grid): This function computes the minimum number of steps to reach from the top-left corner to the bottom-right corner of a grid. :param N: int, number of rows :param M: int, number of columns :param grid: List[List[str]], the grid structure :return: int, minimum number of steps or -1 if it is impossible if grid[0][0] == \'X\' or grid[N-1][M-1] == \'X\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == N - 1 and col == M - 1: return dist for dr, dc in directions: r, c = row + dr, col + dc if 0 <= r < N and 0 <= c < M and (r, c) not in visited and grid[r][c] == \'.\': visited.add((r, c)) queue.append((r, c, dist + 1)) return -1"},{"question":"Write a program that simulates an inventory management system for a warehouse. The system keeps track of a list of products, represented by their ID, name, quantity, and price per unit. Your program should be able to handle the following operations: 1. Add a new product to the inventory. 2. Update the quantity of an existing product. 3. Update the price of an existing product. 4. Delete a product from the inventory. 5. Check the stock of a product by its ID, which returns the quantity available. 6. Display the entire inventory sorted by product ID in ascending order. The input will be given in multiple datasets. Each dataset starts with an integer `n` (the number of operations to be performed) followed by `n` lines representing the operations. The possible operations are defined as follows: - `ADD ID Name Quantity Price` : Adds a new product with the given ID, name, quantity, and price to the inventory. If the product ID already exists, it should update the product\'s name, quantity, and price. - `UPDATE_QUANTITY ID Quantity` : Updates the quantity of the product with the given ID. - `UPDATE_PRICE ID Price` : Updates the price of the product with the given ID. - `DELETE ID` : Deletes the product with the given ID from the inventory. - `CHECK_STOCK ID` : Prints the quantity of the product with the given ID. - `DISPLAY` : Prints the entire inventory in ascending order by product ID. Each product ID is unique. The product name is an alphanumeric string with a length of up to 50 characters. Quantity and price are integers and shouldn\'t be negative. For each dataset, output the results of `CHECK_STOCK` and `DISPLAY` operations in the same order as they appear in the input. Example Input: 3 ADD 101 Apple 50 30 CHECK_STOCK 101 DISPLAY 4 ADD 102 Banana 20 10 UPDATE_QUANTITY 102 50 CHECK_STOCK 102 DISPLAY 0 Example Output: 50 101 Apple 50 30 50 101 Apple 50 30 102 Banana 50 10 Note: - The output of the `DISPLAY` operation should list each product\'s ID, name, quantity, and price in sorted order by product ID. - Each dataset ends with a `0`, which means there is no more data after that.","solution":"class Inventory: def __init__(self): self.products = {} def add_product(self, product_id, name, quantity, price): self.products[product_id] = { \'name\': name, \'quantity\': quantity, \'price\': price, } def update_quantity(self, product_id, quantity): if product_id in self.products: self.products[product_id][\'quantity\'] = quantity def update_price(self, product_id, price): if product_id in self.products: self.products[product_id][\'price\'] = price def delete_product(self, product_id): if product_id in self.products: del self.products[product_id] def check_stock(self, product_id): if product_id in self.products: return self.products[product_id][\'quantity\'] else: return None def display_inventory(self): sorted_products = sorted(self.products.items()) result = [] for pid, details in sorted_products: result.append(f\\"{pid} {details[\'name\']} {details[\'quantity\']} {details[\'price\']}\\") return result"},{"question":"A popular mobile game involves matching three or more identical items in a grid to clear them and earn points. In this task, you are to determine the largest possible sequence of identical items that can be cleared in one move. The game grid is represented as an `n x n` matrix, where each cell contains an integer representing the type of item present. A move consists of swapping two adjacent items (either horizontally or vertically) to form a horizontally or vertically aligned sequence of three or more identical items. However, if there are no possible sequences that can be formed in one move, output `0`. Input The first line contains an integer `n` (3 ≤ n ≤ 50) indicating the size of the grid. Each of the next `n` lines contains `n` space-separated integers representing the grid (each integer is between 1 and 9). Output Print a single integer representing the length of the longest possible sequence of identical items that can be cleared in one move. If no such move exists, print `0`. Examples Input 4 1 2 3 4 2 3 3 3 4 5 6 7 8 9 1 2 Output 3 Input 5 1 1 1 3 4 3 2 2 2 3 4 5 1 1 5 7 8 9 1 2 3 4 5 6 1 Output 3 Input 3 1 2 3 4 5 6 7 8 9 Output 0 Note In the first example, swapping the two adjacent \'3\'s in the second row with either the \'3\' before it or the \'3\' after it forms a sequence of three \'3\'s, which gives a maximum sequence of length 3. In the second example, several moves form a length of 3, such as swapping one of the \'1\'s in the fourth row and the first column with the \'5\'. In the third example, no such swaps can form a sequence of three or more identical items. Thus, the output is `0`.","solution":"def find_largest_sequence(n, grid): def check_line(line): max_len = 0 current_len = 1 for i in range(1, len(line)): if line[i] == line[i - 1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return max_len def check_swap(x1, y1, x2, y2): grid[x1][y2], grid[x2][y1] = grid[x2][y1], grid[x1][y2] max_len = max(check_line(grid[x1]), check_line(grid[x2])) column_x1 = [grid[i][y1] for i in range(n)] column_x2 = [grid[i][y2] for i in range(n)] max_len = max(max_len, check_line(column_x1), check_line(column_x2)) grid[x1][y2], grid[x2][y1] = grid[x2][y1], grid[x1][y2] return max_len max_sequence = 0 for i in range(n): for j in range(n-1): max_sequence = max(max_sequence, check_swap(i, j, i, j+1)) if i < n-1: max_sequence = max(max_sequence, check_swap(j, i, j+1, i)) return max_sequence if max_sequence >= 3 else 0"},{"question":"Write a function to determine whether a given string contains any substrings that are anagrams of each other. Two substrings are anagrams if they contain the same characters with the same frequency. Return true if at least one pair of such substrings exists, otherwise return false. The function should also return \\"Not valid\\" if the input is not a string. Examples: ``` anagramSubstrings(\\"abc\\") => false // No substrings are anagrams of each other anagramSubstrings(\\"abcba\\") => true // \\"abc\\" and \\"cba\\" are anagrams anagramSubstrings(\\"ifailuhkqq\\") => true // \\"ifa\\" and \\"afi\\" are anagrams anagramSubstrings(12345) => \\"Not valid\\" // Input is not a string anagramSubstrings(\\"\\") => false // No substrings exist ``` Note: The comparison should be case-sensitive, meaning \\"a\\" and \\"A\\" are treated as different characters.","solution":"from collections import Counter def anagram_substrings(s): Function to check if any substrings are anagrams of each other. if not isinstance(s, str): return \\"Not valid\\" n = len(s) substrings = {} for length in range(1, n): for i in range(n - length + 1): substring = s[i:i + length] counter = tuple(sorted(Counter(substring).items())) if counter in substrings: return True substrings[counter] = i return False"},{"question":"You are in charge of organizing the seating arrangement at an event. Each guest has a unique seat number from 1 to n. However, there are certain guests who are friends and prefer to sit next to each other. Given a list of pairs of friends, determine a seating arrangement that respects their preferences or conclude that it\'s not possible. Input: The first line contains an integer n, the number of guests. The second line contains an integer m, the number of pairs of friends. The next m lines each contain two integers a and b, indicating that guests a and b are friends and prefer to sit next to each other. Output: If it is possible to find a valid seating arrangement, output such an arrangement as a sequence of n integers, where each integer represents a guest\'s seat number in order from 1 to n. If no arrangement is possible, output \\"IMPOSSIBLE\\". Constraints: 1 <= n <= 1000 0 <= m <= 1000 1 <= a, b <= n Example: Input: 5 3 1 2 2 3 4 5 Output: 1 2 3 4 5 Explanation: All the friends can be seated next to each other in the sequence provided.","solution":"def find_seating_arrangement(n, m, friends): from collections import defaultdict, deque graph = defaultdict(list) for a, b in friends: graph[a].append(b) graph[b].append(a) visited = [False] * (n + 1) result = [] def bfs(start): queue = deque([start]) local_group = [] while queue: node = queue.popleft() if visited[node]: continue visited[node] = True local_group.append(node) for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) return local_group for i in range(1, n + 1): if not visited[i]: component = bfs(i) result.extend(sorted(component)) return result if len(result) == n else \\"IMPOSSIBLE\\""},{"question":"A busy professional has multiple tasks to complete every day. To efficiently manage his schedule, he wants to know the maximum number of non-overlapping tasks he can perform. Each task has a start and end time, and tasks can be completed sequentially if they do not overlap. Write a program to help him determine the maximum number of non-overlapping tasks he can finish in a given day. Input: The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of tasks. The next N lines each contain two integers start and end, representing the start and end time of a task (in 24-hour format). Output: For each test case, output the maximum number of non-overlapping tasks that can be completed in one day. Constraints: 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^3 0 ≤ start < end ≤ 23 SAMPLE INPUT 2 3 1 3 2 5 4 6 4 1 2 3 4 0 6 5 7 SAMPLE OUTPUT 2 3","solution":"def max_non_overlapping_tasks(test_cases): results = [] for tasks in test_cases: tasks.sort(key=lambda x: x[1]) count, last_end = 0, -1 for start, end in tasks: if start >= last_end: count += 1 last_end = end results.append(count) return results def parse_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 tasks = [] for _ in range(N): start = int(data[index]) end = int(data[index + 1]) tasks.append((start, end)) index += 2 test_cases.append(tasks) return test_cases"},{"question":"Given a list of positive integers, the task is to determine if all the integers in the list can be divided into groups of two or more consecutive integers. Example 1: Input: arr = [3, 4, 5, 8, 9, 10] Output: Yes Explanation: The array can be divided into two groups [3, 4, 5] and [8, 9, 10], both are groups of consecutive integers. Example 2: Input: arr = [1, 2, 3, 5, 6, 8] Output: No Explanation: The array cannot be divided into groups of two or more consecutive integers since 5 and 6 can form a group but 1, 2, 3 and 8 cannot. User Task: Your task is to complete the function canFormGroups() which takes a list of integers as input and returns \\"Yes\\" if it can be divided into groups of two or more consecutive integers, otherwise returns \\"No\\". Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= |arr| <= 10^5 1 <= arr[i] <= 10^5","solution":"def canFormGroups(arr): Determine if the array can be divided into groups of two or more consecutive integers. arr.sort() count = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1] + 1: count += 1 else: if count < 2: return \\"No\\" count = 1 # reset the count for the new potential group return \\"Yes\\" if count >= 2 else \\"No\\""},{"question":"I will give you a list of strings. Your task is to determine if all the strings in the list can form a circular chain. A string `a` can be connected to string `b` if the last character of `a` matches the first character of `b`. Return \\"YES\\" if the strings can form a circular chain and \\"NO\\" otherwise. Example: Input: [\\"abc\\", \\"cde\\", \\"efg\\", \\"gab\\"] Output: \\"YES\\" Input: [\\"cat\\", \\"dog\\", \\"goat\\"] Output: \\"NO\\"","solution":"from collections import defaultdict def can_form_circular_chain(strings): Determines if the strings can form a circular chain. Parameters: - strings: list of strings Returns: - \\"YES\\" if the strings can form a circular chain, \\"NO\\" otherwise def can_chain(start_char, count, used): if count == len(strings): return start_char == used[0][0] last_char = used[-1][-1] for i, s in enumerate(strings): if not visited[i] and s[0] == last_char: visited[i] = True if can_chain(start_char, count + 1, used + [s]): return True visited[i] = False return False if not strings: return \\"NO\\" visited = [False] * len(strings) visited[0] = True if can_chain(strings[0][0], 1, [strings[0]]): return \\"YES\\" return \\"NO\\""},{"question":"Write a program to find the maximum number of distinct letters that can be obtained by rearranging all the characters in a given string of lowercase English letters. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single string S. ------ Output Format ------ For each test case, output the maximum number of distinct letters that can be obtained by rearranging the string S. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 10^5 The sum of |S| across all test cases does not exceed 10^6. ----- Sample Input 1 ------ 3 aabb abc aabbcc ----- Sample Output 1 ------ 2 3 3 ----- Explanation 1 ------ Test case 1: By rearranging the string \\"aabb\\", the maximum number of distinct letters that can be obtained is 2 (\\"ab\\"). Test case 2: The string \\"abc\\" already has 3 distinct letters. Test case 3: By rearranging the string \\"aabbcc\\", the maximum number of distinct letters that can be obtained is 3 (\\"abc\\").","solution":"def max_distinct_letters_count(T, test_cases): results = [] for S in test_cases: # The number of distinct letters is the length of the set of characters in the string distinct_letters = len(set(S)) results.append(distinct_letters) return results"},{"question":"Task: Maze Path Finder You are given a grid where each cell can either contain an empty space (\'.\') or a wall (\'#\'). You need to determine the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). You can only move up, down, left, or right, and you cannot pass through walls. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 50), the number of rows and columns in the grid, respectively. - The next n lines each contain a string of m characters (either \'.\' or \'#\'), representing the grid. # Output - Output a single integer, the length of the shortest path from (0, 0) to (n-1, m-1). If no such path exists, output -1. # Example Input: ``` 5 5 ..... .#.#. .#.#. .#.#. ..... ``` Output: ``` 8 ``` In this example, the shortest path involves 8 steps: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4).","solution":"from collections import deque def shortest_path(grid, n, m): Returns the length of the shortest path in the grid from (0, 0) to (n-1, m-1). If no path exists, return -1. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def transform_input_to_grid(input_str): input_lines = input_str.strip().split(\'n\') n, m = map(int, input_lines[0].split()) grid = [list(line) for line in input_lines[1:]] return grid, n, m"},{"question":"Shreya wants to organize her books in a unique pattern on her bookshelf. Help her design the arrangement using the function **books_pattern**. Keep in mind: * If **n<1**, return an empty string. * The books on a row are represented by letters from \'A\' to the required maximum letter for that row. Examples: books_pattern(1) A A books_pattern(4) A A A B B A A B C C B A A B C D D C B A books_pattern(7) A A A B B A A B C C B A A B C D D C B A A B C D E E D C B A A B C D E F F E D C B A A B C D E F G G F E D C B A","solution":"def books_pattern(n): Generates a unique pattern in which books can be arranged. Parameters: n (int): The number of rows in the pattern Returns: str: A string representing the unique pattern. if n < 1: return \\"\\" result = [] for i in range(1, n + 1): left_part = \' \'.join(chr(ord(\'A\') + x) for x in range(i)) right_part = \' \'.join(chr(ord(\'A\') + x) for x in range(i - 1, -1, -1)) line = left_part + \\" \\" + right_part padding = \' \' * (n - i) * 2 result.append(padding + line) return \'n\'.join(result)"},{"question":"Python is a popular high-level programming language known for its simplicity and readability. However, sometimes the fluid nature of its list operations can lead to inefficiencies if not used carefully. One common operation in programming involves manipulating a 2D grid, such as rotating its cells. Consider a square matrix of size n x n where each cell contains an integer value. You need to write a function that rotates the content of each cell in the matrix 90 degrees clockwise. # Input - The first line of the input contains an integer n (1 ≤ n ≤ 1000), the size of the matrix. - The next n lines each contain n integers, representing the rows of the matrix. # Output - Output the resulting matrix after a 90-degree clockwise rotation. # Examples Input ``` 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 7 4 1 8 5 2 9 6 3 ``` Input ``` 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Output ``` 13 9 5 1 14 10 6 2 15 11 7 3 16 12 8 4 ``` # Note To rotate the matrix 90 degrees clockwise, you can follow these steps: 1. Transpose the matrix: Convert rows into columns. 2. Reverse each row. For example: - Original matrix: ``` 1 2 3 4 5 6 7 8 9 ``` - After transposing: ``` 1 4 7 2 5 8 3 6 9 ``` - After reversing each row: ``` 7 4 1 8 5 2 9 6 3 ``` The resulting matrix is the desired 90-degree clockwise rotation.","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a given n x n matrix 90 degrees clockwise. Parameters: matrix (list of list of int): 2D list representing the n x n matrix. Returns: list of list of int: The matrix rotated 90 degrees clockwise. n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - i - 1] = matrix[i][j] return rotated_matrix def read_and_process_input(in_data): Reads input data, processes it, rotates the matrix, and returns the result. Parameters: in_data (str): The input data as a string. Returns: list of list of int: The matrix rotated 90 degrees clockwise. lines = in_data.strip().split(\'n\') n = int(lines[0]) matrix = [list(map(int, lines[i + 1].split())) for i in range(n)] return rotate_matrix_90_clockwise(matrix)"},{"question":"You are given a string containing characters \'a\', \'b\', and \'c\' only. You need to determine if it is possible to delete some characters from the string such that it contains equal number of \'a\', \'b\', and \'c\'. -----Input----- The input contains a single string s (1 le |s| le 1000) consisting of characters \'a\', \'b\', and \'c\' only. -----Output----- Print \\"YES\\" (without quotes) if it is possible to delete some characters to achieve equal number of \'a\'s, \'b\'s, and \'c\'s. Otherwise, print \\"NO\\" (without quotes). -----Examples----- Input abcabc Output YES Input abccba Output YES Input aaabbbccc Output YES Input aabbbcccc Output NO -----Note----- In the first example, you can keep the string as is since it already has equal number of \'a\'s, \'b\'s, and \'c\'s. In the second example, the string is already balanced with equal numbers of \'a\'s, \'b\'s, and \'c\'s. In the third example, you can delete all characters or none because all counts are already equal. In the fourth example, it is impossible to balance the string to have equal numbers of \'a\'s, \'b\'s, and \'c\'s. Thus, the result is \\"NO\\".","solution":"def can_balance_string(s): Determines if it\'s possible to delete some characters from the string so that the number of \'a\', \'b\', and \'c\' characters are equal. from collections import Counter count = Counter(s) a_count = count[\'a\'] b_count = count[\'b\'] c_count = count[\'c\'] # Find the maximum frequency among \'a\', \'b\', and \'c\' max_count = max(a_count, b_count, c_count) # Check if we can reduce all counts to max_count or one less than max_count if (max_count - a_count <= 1) and (max_count - b_count <= 1) and (max_count - c_count <= 1): return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers, return an array where each element at index `i` is the product of all the numbers in the original array except the one at `i`. Example 1: Input: [1,2,3,4] Output: [24,12,8,6] Explanation: The product of all elements except element at index 0: 2 * 3 * 4 = 24 The product of all elements except element at index 1: 1 * 3 * 4 = 12 The product of all elements except element at index 2: 1 * 2 * 4 = 8 The product of all elements except element at index 3: 1 * 2 * 3 = 6 Example 2: Input: [-1,1,0,-3,3] Output: [0,0,9,0,0] Explanation: The product of all elements except element at index 0: 1 * 0 * -3 * 3 = 0 The product of all elements except element at index 1: -1 * 0 * -3 * 3 = 0 The product of all elements except element at index 2: -1 * 1 * -3 * 3 = 9 The product of all elements except element at index 3: -1 * 1 * 0 * 3 = 0 The product of all elements except element at index 4: -1 * 1 * 0 * -3 = 0 Note: - The length of the array is at least 2. - The product of any prefix or suffix of the array (including the whole array) is guaranteed to fit in a 32-bit integer. - Solve it without using division and in O(n) time complexity.","solution":"def product_except_self(nums): Given an array nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i], without using division and in O(n) time complexity. length = len(nums) answer = [0] * length # answer[i] contains the product of all the elements to the left of nums[i] left_product = 1 for i in range(length): answer[i] = left_product left_product *= nums[i] # answer[i] now contains the product of elements to the left of nums[i] # now we need to multiply with the product of all elements to the right of nums[i] right_product = 1 for i in range(length - 1, -1, -1): answer[i] *= right_product right_product *= nums[i] return answer"},{"question":"Alice is organizing a coding contest with N participants. Each participant has a unique participant id ranging from 1 to N and an initial score of 0. Alice has a list of M operations that modify the participants\' scores. Each operation is one of the following types: 1. Increase the score of a participant by a given amount. 2. Query the current score of a participant. Your task is to process these operations efficiently. -----Input----- - The first line contains two integers N and M, the number of participants and the number of operations respectively. - The next M lines describe the operations, each containing either: - \\"1 X Y\\" (without quotes), meaning increase the score of participant X by Y, or - \\"2 X\\" (without quotes), meaning print the current score of participant X. -----Output----- - For each operation of type \\"2 X\\", print the current score of participant X. -----Constraints----- - 1 le N le 10^5 - 1 le M le 2 cdot 10^5 - 1 le X le N - 1 le Y le 10^4 -----Example Input----- 5 6 1 1 10 1 2 5 1 3 20 2 1 2 2 2 3 -----Example Output----- 10 5 20","solution":"def coding_contest(N, M, operations): scores = [0] * N # Create a list to store the scores of each participant, initialize to 0. result = [] for operation in operations: if operation[0] == 1: # Increase operation participant_id = operation[1] - 1 increase_value = operation[2] scores[participant_id] += increase_value elif operation[0] == 2: # Query operation participant_id = operation[1] - 1 result.append(scores[participant_id]) return result"},{"question":"Alice is a string enthusiast. She likes to play with strings and subsequences. One day, she thought of an interesting problem – finding the length of the longest palindromic subsequence in a given string. A palindromic subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements and reads the same backward as forward. Alice needs your help to solve this efficiently. Input The input consists of multiple test cases. The first line contains an integer T denoting the number of test cases. The next T lines each contain a single string S. Output For each test case, print the length of the longest palindromic subsequence in a single line. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000, where |S| denotes the length of the string S. Example Input: 2 bbabcbcab abcd Output: 7 1","solution":"def longest_palindromic_subsequence(s): Returns the length of the longest palindromic subsequence in the given string s. n = len(s) # Create a 2D DP array to store the length of the longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Palindromes of single characters have length 1 for i in range(n): dp[i][i] = 1 # fill the dp array for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] def solve_longest_palindromic_subsequence(test_cases): results = [] for s in test_cases: results.append(longest_palindromic_subsequence(s)) return results"},{"question":"Alice is a talented software engineer who works on optimizing databases. She encountered a problem where she needs to distribute N records evenly across M servers. However, the records have dependencies, meaning some records must be processed before others. The servers must process records in such a way that for each dependency pair (a, b), record a must be processed before record b on any given server. Each server processes the records it receives sequentially, and there should be no duplication of records across the servers. Write a function to determine if it\'s possible to distribute the records across the servers while satisfying all dependencies. If it\'s possible, return any valid distribution, otherwise, return an empty list. Input: - The first line contains integers N (number of records) and M (number of servers). - The next line contains an integer D (number of dependency pairs). - Each of the next D lines contains two integers a and b, indicating a dependency where record a must be processed before record b. Output: - If a valid distribution is possible, print N integers where the ith integer is the index of the server (0 to M-1) that will process the ith record. - If no valid distribution exists, print an empty list. Constraints: 1 ≤ N ≤ 1000 1 ≤ M ≤ 10 0 ≤ D ≤ 10000 1 ≤ a, b ≤ N SAMPLE INPUT 6 2 5 1 2 2 3 3 4 1 5 5 6 SAMPLE OUTPUT 0 0 0 0 1 1 Explanation: In the given sample input, records 1, 2, 3, and 4 can be processed on server 0 while records 5 and 6 on server 1. This distribution respects all dependencies. Note that there can be other valid distributions too.","solution":"from collections import defaultdict, deque def distribute_records(N, M, D, dependencies): def topological_sort(N, dependencies): graph = defaultdict(list) in_degree = [0] * N for a, b in dependencies: graph[a - 1].append(b - 1) in_degree[b - 1] += 1 queue = deque() for i in range(N): if in_degree[i] == 0: queue.append(i) sorted_nodes = [] while queue: node = queue.popleft() sorted_nodes.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(sorted_nodes) != N: return [] return sorted_nodes sorted_nodes = topological_sort(N, dependencies) if not sorted_nodes: return [] result = [-1] * N server_load = [0] * M for i, record in enumerate(sorted_nodes): server = i % M result[record] = server server_load[server] += 1 return result"},{"question":"Given an integer array `nums` where every element appears twice except for one, which appears exactly once. Find that single one. Example 1: Input: nums = [2,2,1] Output: 1 Example 2: Input: nums = [4,1,2,1,2] Output: 4 Example 3: Input: nums = [1] Output: 1 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findSingleNumber` that takes an array of integers `nums` as input and returns the integer that appears exactly once. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 3 * 10^4 -3 * 10^4 <= nums[i] <= 3 * 10^4 Each element in the array appears twice except for one element which appears only once.","solution":"def findSingleNumber(nums): Takes an array of integers where every element appears twice except for one. Finds the element that occurs only once. single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"Given a list of integers, return a new list where each integer is replaced with the sum of its digits. If the sum is a single digit, keep it as is. If the sum has multiple digits, repeat the process until you get a single-digit sum. Example input: ``` [123, 456, 789, 15] ``` Expected output: ``` [6, 6, 6, 6] ```","solution":"def sum_of_digits(n): while n >= 10: n = sum(int(digit) for digit in str(n)) return n def replace_with_digit_sum(lst): Given a list of integers, return a new list where each integer is replaced with the sum of its digits. If the sum is a single digit, keep it as is. If the sum has multiple digits, repeat the process until you get a single-digit sum. return [sum_of_digits(num) for num in lst]"},{"question":"In a fictional country, there is a unique road network system that connects all of its n cities. Each city is represented as a point on a Cartesian plane, with its x and y coordinates given as (xi, yi). The roads in this country satisfy the following constraints: * Every pair of distinct cities is connected by exactly one direct road. * No three cities are collinear. The government has a special demand: for each query, they want to know the shortest direct road between any two distinct cities. However, this demand needs to be satisfied very quickly, and that\'s where you come in. Your task is to process multiple queries efficiently. Each query gives you the indices of two cities, and you need to calculate the Euclidean distance between them. Recall that the Euclidean distance between two points (xi, yi) and (xj, yj) is given by the formula: distance = sqrt((xi - xj)^2 + (yi - yj)^2) Here, sqrt represents the square root function. Input The first input line contains an integer n (2 ≤ n ≤ 10^5), the number of cities. The next n lines each contain two integers xi and yi (-1000 ≤ xi, yi ≤ 1000), the coordinates of the cities. The next line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. The next q lines each contain two integers u and v (1 ≤ u, v ≤ n), the indices of the cities for each query. Output For each query, output the shortest direct road distance between the cities in the given query. The result is considered correct if its absolute or relative error does not exceed 10^-6. Example Input 4 0 0 0 1 1 0 1 1 3 1 2 2 3 3 4 Output 1.000000 1.414214 1.000000","solution":"import math def calculate_distances(coordinates, queries): Given a list of city coordinates and queries, returns the Euclidean distance between the specified cities. :param coordinates: List of tuples representing the coordinates of each city. :param queries: List of tuples representing the queries, each query contains two indices of cities. :return: List of distances corresponding to each query. distances = [] for u, v in queries: x1, y1 = coordinates[u - 1] x2, y2 = coordinates[v - 1] distance = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) distances.append(distance) return distances"},{"question":"Suppose you are a renowned treasure hunter who has just received a new challenge. There\'s an ancient temple with a complex layout represented as a 2D grid of numbers. Each cell in the grid contains a positive integer that represents the treasure\'s value at that location. However, you can only move through the temple in very specific ways: you can start at any cell in the first column and move to the next column either in the same row or the row directly above or below your current position. Your goal is to collect the maximum possible treasure value you can acquire by the time you reach any cell in the last column. Write a function to determine the maximum amount of treasure you can collect as per the movement rules described. Example 1: Input: [ [1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2] ] Output: 16 Explanation: Paths to get the maximum amount of treasure (16) are marked: 1 -> 3 -> 4 -> 2. or 2 -> 2 -> 4 -> 2. Example 2: Input: [ [1, 3, 3], [2, 1, 4], [0, 6, 4] ] Output: 12 Explanation: Paths to get the maximum amount of treasure (12) are marked: 2 -> 3 -> 4. or 1 -> 6 -> 4. Constraints: - The input grid\'s dimensions are 1 <= m, n <= 20. - Each cell contains a positive integer value not greater than 100.","solution":"def collect_max_treasure(grid): Returns the maximum amount of treasure that can be collected given the movement constraints on the grid. :param grid: List[List[int]] -- the 2D grid representation of the temple :return: int -- the maximum amount of treasure if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Create a dp matrix to store the maximum treasure collected till each cell dp = [[0] * cols for _ in range(rows)] # Initialize the first column with the grid\'s first column values for r in range(rows): dp[r][0] = grid[r][0] # Fill the dp matrix for c in range(1, cols): for r in range(rows): max_treasure = dp[r][c-1] if r > 0: max_treasure = max(max_treasure, dp[r-1][c-1]) if r < rows - 1: max_treasure = max(max_treasure, dp[r+1][c-1]) dp[r][c] = max_treasure + grid[r][c] # Find the maximum value in the last column max_treasure = max(dp[r][cols-1] for r in range(rows)) return max_treasure"},{"question":"In a game, you control a character that moves through a 2D grid. The grid is represented as an `MxN` matrix where each cell can either be `0` (empty) or `1` (obstacle). Your character can move up, down, left, or right, but cannot move into a cell with an obstacle. Your task is to determine if there is a path from the top-left corner of the grid (start) to the bottom-right corner of the grid (goal). Write a function `is_path_exists(grid)` that takes a 2D list representing the grid as input and returns `True` if there\'s a path from the start to the goal, otherwise returns `False`. The function signature is: ```python def is_path_exists(grid: List[List[int]]) -> bool: ``` **Example:** ```python grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] print(is_path_exists(grid)) # Output: True ``` **Constraints:** 1. The grid will always have at least one row and one column. 2. The start and goal cells are always empty (`0`). 3. The grid can have varying M (rows) and N (columns). Consider edge cases where: - The grid has only one cell. - There are no obstacles. - The path is blocked by obstacles. **Note:** - Your function should handle large grids efficiently. - Avoid modifying the original grid during the computation.","solution":"from typing import List from collections import deque def is_path_exists(grid: List[List[int]]) -> bool: if not grid or not grid[0]: return False rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return False directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: r, c = queue.popleft() if (r, c) == (rows-1, cols-1): return True for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc)) return False"},{"question":"You are given a list of n integers representing the marks scored by students in a class. Each integer in the list is a non-negative number representing the marks of a student. You need to find out the number of distinct non-negative grades any student has scored, and the top three highest unique marks scored by the students in the class. If there are fewer than three distinct grades, you should return all of them in descending order. If no students secured any marks, return an empty list. Input Format The first line contains an integer n (the number of students, 1 ≤ n ≤ 1000). The second line contains n integers, each representing the marks of a student (0 ≤ marks ≤ 100). Output Format The output consists of two lines: 1. An integer representing the number of distinct grades. 2. A list of up to three integers in descending order representing the highest unique grades. Examples Input 5 50 80 80 80 30 Output 3 [80, 50, 30] Input 4 90 90 90 90 Output 1 [90] Input 2 10 20 Output 2 [20, 10] Input 0 Output 0 [] Explanation In the first example, there are 3 distinct grades: 50, 80, and 30. The top three highest unique grades are 80, 50, and 30. In the second example, there\'s only one distinct grade: 90. In the third example, there are 2 distinct grades: 20 and 10, listed in descending order. In the fourth example, since there are no students (n = 0), the number of distinct grades is 0 and the list of grades is empty.","solution":"def analyze_marks(marks): Analyzes the marks to determine the number of distinct grades and the top three highest unique grades. Arguments: marks -- list of integers representing the marks of students Returns: A tuple containing: - an integer representing the number of distinct grades - a list of up to three integers in descending order representing the highest unique grades if not marks: return 0, [] unique_marks = sorted(set(marks), reverse=True) return len(unique_marks), unique_marks[:3]"},{"question":"You are given two strings, S and T, of length N and M, respectively. Your task is to find the length of the longest substring of S that is an anagram of any substring of T. -----Constraints----- - 1 leq N, M leq 3 times 10^4 - S and T consist only of lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print the length of the longest substring of S that is an anagram of any substring of T. -----Sample Input----- abcab bca -----Sample Output----- 3 Explanation: The substrings \\"abc\\" and \\"cab\\" of S are anagrams of the substring \\"bca\\" of T.","solution":"def longest_anagram_substring(S, T): from collections import Counter len_s, len_t = len(S), len(T) max_len = min(len_s, len_t) def is_anagram(s1_count, s2_count): return all(s1_count[c] == s2_count[c] for c in s1_count) for length in range(max_len, 0, -1): s_count = Counter(S[:length]) t_count = Counter(T[:length]) if is_anagram(s_count, t_count): return length for i in range(length, len_s): s_count[S[i]] += 1 s_count[S[i-length]] -= 1 if s_count[S[i-length]] == 0: del s_count[S[i-length]] if is_anagram(s_count, t_count): return length for i in range(length, len_t): t_count[T[i]] += 1 t_count[T[i-length]] -= 1 if t_count[T[i-length]] == 0: del t_count[T[i-length]] if is_anagram(s_count, t_count): return length return 0 # usage S = \\"abcab\\" T = \\"bca\\" print(longest_anagram_substring(S, T)) #Output: 3"},{"question":"A coding competition platform hosts N contests. Each contest i awards A_i points to its winner. You are participating in the competition and want to maximize your total points, but there\'s a catch: You cannot participate in two consecutive contests. Given the points awarded for each contest, determine the maximum points you can earn. ------ Input ------ - The first line contains an integer N (1 ≤ N ≤ 100,000) – the number of contests. - The second line contains N integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 1000) – the points awarded for each contest. ------ Output ------ - Output a single integer, the maximum points you can earn. ------ Example ------ Input: 5 3 2 5 10 7 Output: 15 ------ Explanation ------ You can participate in contests 1 and 3, earning 3 + 5 = 8 points. Alternatively, you can participate in contests 1 and 4, earning 3 + 10 = 13 points. The optimal strategy is to participate in contests 3 and 5, earning 5 + 10 = 15 points. Note that these contests are not consecutive.","solution":"def max_points(N, A): if N == 0: return 0 if N == 1: return A[0] dp = [0] * N dp[0] = A[0] dp[1] = max(A[0], A[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + A[i]) return dp[N-1]"},{"question":"A matrix is a two-dimensional array of numbers arranged in rows and columns. Given a N times M matrix, write a function to rotate the matrix 90 degrees clockwise. Example Matrix A: [ begin{bmatrix} 1 & 2 & 3 4 & 5 & 6 7 & 8 & 9 end{bmatrix} ] Rotated Matrix: [ begin{bmatrix} 7 & 4 & 1 8 & 5 & 2 9 & 6 & 3 end{bmatrix} ] Function Description Complete the function rotateMatrix in the editor below. rotateMatrix has the following parameter(s): - int A[N][M]: a 2-dimensional array (matrix) of integers to rotate Returns - int[M][N]: the rotated matrix Input Format The first line contains two integers, N and M, the number of rows and columns in the matrix A. The next N lines contain M space-separated integers that make up the matrix A. Constraints 1 leq N, M leq 100 1 leq A[i][j] leq 10^4, where A[i][j] is the element in the i^{th} row and j^{th} column of the matrix Note: You need to write the complete function, you are not provided a pre-defined function signature. Ensure your function adheres to the input-output format described above.","solution":"def rotateMatrix(A): Rotates the given N x M matrix 90 degrees clockwise. Parameters: A (list of list of int): A 2-dimensional list (matrix) of integers Returns: list of list of int: The rotated matrix if not A: return [] N = len(A) M = len(A[0]) # Create a new matrix with dimensions M x N rotated_matrix = [[0] * N for _ in range(M)] for i in range(N): for j in range(M): rotated_matrix[j][N-1-i] = A[i][j] return rotated_matrix"},{"question":"You are given a list of dictionaries where each dictionary represents a student\'s score in various subjects. Each dictionary contains subject names as keys and the corresponding scores as values. You need to calculate the average score for each student and return a list of tuples. Each tuple should contain the student\'s name and their average score rounded down to the nearest integer. If the list is empty, return an empty list. Create a function called `calculate_student_averages` that takes one argument, `students`, which is a list of dictionaries. Return a list of tuples where each tuple contains a student\'s name and their average score. The average score should be rounded down to the nearest integer. If the input is not a list of dictionaries, return the string \\"Invalid input\\". Examples: ```python calculate_student_averages([ {\\"name\\": \\"Alice\\", \\"Math\\": 80, \\"Science\\": 90, \\"English\\": 85}, {\\"name\\": \\"Bob\\", \\"Math\\": 70, \\"Science\\": 75, \\"English\\": 80}, {\\"name\\": \\"Charlie\\", \\"Math\\": 95, \\"Science\\": 100, \\"English\\": 100} ]) => [(\\"Alice\\", 85), (\\"Bob\\", 75), (\\"Charlie\\", 98)] calculate_student_averages([ {\\"name\\": \\"David\\", \\"Math\\": 60, \\"Science\\": 70}, {\\"name\\": \\"Eva\\", \\"Math\\": 85, \\"History\\": 90, \\"Art\\": 100} ]) => [(\\"David\\", 65), (\\"Eva\\", 91)] calculate_student_averages([]) => [] calculate_student_averages(\\"invalid input\\") => \\"Invalid input\\" ```","solution":"def calculate_student_averages(students): if not isinstance(students, list) or not all(isinstance(student, dict) for student in students): return \\"Invalid input\\" results = [] for student in students: name = student.pop(\\"name\\", None) if name is None or not student: continue total_score = sum(student.values()) num_subjects = len(student) average_score = total_score // num_subjects results.append((name, average_score)) return results"},{"question":"You are given a list `A` of size `N` consisting of integers. Your task is to rearrange the elements of the list such that all even numbers appear before all odd numbers in their original order. The relative order of the even numbers and the relative order of the odd numbers should remain the same as in the initial list `A`. ------ Input ------ The first line consists of `T`, denoting the number of test cases. The first line of each test case consists of one integer denoting `N`, where `N` is the size of the list given to you. The second line of each test case contains the list `A` containing `N` elements. ------ Output ------ For each test case, print the rearranged list in a single line. The elements of the list should be separated by a space. Print the answer to each test case in a new line. ------ Constraints ------ - 1 leq T leq 100 where T is the number of test cases. - 1 leq N leq 100 where N is the number of elements in the list. - 1 leq A[i] leq 1000000 where A[i] is the `i-th` element in the list. ------ Sample Input 1 ------ 2 6 1 2 3 4 5 6 5 5 3 2 8 1 ------ Sample Output 1 ------ 2 4 6 1 3 5 2 8 5 3 1 ------ explanation 1 ------ The explanation for test case 1 of sample input: - The original list is `[1, 2, 3, 4, 5, 6]`. - The even numbers are `[2, 4, 6]` which remain in the same order. - The odd numbers are `[1, 3, 5]` which also remain in the same order. - After arranging, the list becomes `[2, 4, 6, 1, 3, 5]`. The explanation for test case 2 of sample input: - The original list is `[5, 3, 2, 8, 1]`. - The even numbers are `[2, 8]` which remain in the same order. - The odd numbers are `[5, 3, 1]` which also remain in the same order. - After arranging, the list becomes `[2, 8, 5, 3, 1]`.","solution":"def rearrange_even_odd(arr): Returns a rearranged list such that all even numbers appear before all odd numbers, preserving the relative order of both even and odd numbers. even = [x for x in arr if x % 2 == 0] odd = [x for x in arr if x % 2 != 0] return even + odd def process_test_cases(test_cases): Processes multiple test cases for the rearrange_even_odd function. :param test_cases: List of tuples, each containing the length of the list and the list itself :return: List of rearranged lists results = [] for n, arr in test_cases: results.append(rearrange_even_odd(arr)) return results"},{"question":"Joseph has an array of integers and wants to find the longest subarray where the sum of its elements is equal to a given target `k`. A subarray is a contiguous part of an array. Write a function that finds the length of the longest subarray with a sum equal to `k`. -----Function Signature----- ```python def longest_subarray_with_sum_k(arr: List[int], k: int) -> int: ``` -----Input----- The function `longest_subarray_with_sum_k` has the following parameters: - `arr` (List[int]): An array consisting of integers (`1 <= len(arr) <= 10^5`, `-10^4 <= arr[i] <= 10^4`). - `k` (int): An integer representing the target sum (`-10^9 <= k <= 10^9`). -----Output----- Return the length of the longest subarray where the sum of its elements equals `k`. If no such subarray exists, return `0`. -----Examples----- Input ```python arr = [1, -1, 5, -2, 3] k = 3 ``` Output ```python 4 ``` Input ```python arr = [-2, -1, 2, 1] k = 1 ``` Output ```python 2 ``` Input ```python arr = [1, 2, 3] k = 7 ``` Output ```python 0 ``` -----Note----- In the first example, the longest subarray with a sum of `3` is `[1, -1, 5, -2]`, which has length `4`. In the second example, the longest subarray with a sum of `1` is `[-1, 2]`, which has length `2`.","solution":"from typing import List def longest_subarray_with_sum_k(arr: List[int], k: int) -> int: # Dictionary to store the first occurrence of cumulative sum cum_sum_dict = {} cumulative_sum = 0 max_length = 0 for i in range(len(arr)): cumulative_sum += arr[i] # If cumulative_sum is k, update max_length if cumulative_sum == k: max_length = i + 1 # If (cumulative_sum - k) is found in cum_sum_dict, update max_length if (cumulative_sum - k) in cum_sum_dict: max_length = max(max_length, i - cum_sum_dict[cumulative_sum - k]) # Store the first occurrence of the cumulative sum if cumulative_sum not in cum_sum_dict: cum_sum_dict[cumulative_sum] = i return max_length"},{"question":"Given a string S, you can replace any character with its lexicographically next or previous character exactly once. For instance, you can replace \'a\' with \'b\' or \'y\' with \'x\'. Your goal is to determine if it\'s possible to transform the string into a palindrome by performing at most one such character replacement. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S. ------ Output Format ------ For each test case, print \\"YES\\" if it is possible to transform the given string S into a palindrome by replacing at most one character with its lexicographically next or previous character. Otherwise, print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ |S| ≤ 10^{5} The sum of the lengths of all input strings does not exceed 10^6. ------ Sample Input ------ 5 abcd racecar abba abca redivider ------ Sample Output ------ NO YES YES YES YES ------ Explanation ------ - For the first test case, changing any character does not make \\"abcd\\" a palindrome. - For the second case, \\"racecar\\" is already a palindrome. - For the third case, \\"abba\\" is already a palindrome. - For the fourth case, changing one character (for example, \'c\' to \'b\') can make \\"abca\\" a palindrome. - For the fifth case, \\"redivider\\" is already a palindrome.","solution":"def can_transform_to_palindrome(s): Checks whether it\'s possible to transform the string s into a palindrome by replacing at most one character with its lexicographically next or previous character. mismatches = 0 n = len(s) for i in range(n // 2): if s[i] != s[n - 1 - i]: mismatches += 1 if (ord(s[i]) == ord(s[n - 1 - i]) + 1 or ord(s[i]) == ord(s[n - 1 - i]) - 1 or ord(s[n - 1 - i]) == ord(s[i]) + 1 or ord(s[n - 1 - i]) == ord(s[i]) - 1): continue else: return \\"NO\\" if mismatches > 1: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(can_transform_to_palindrome(s)) return results"},{"question":"Petya has been experimenting with binary trees and their various properties. He recently came across a concept called \\"Left View\\" of a binary tree. The left view of a binary tree is the set of nodes visible when the tree is viewed from the left side. Now, Petya wants to write a program to find the left view of a given binary tree. A binary tree is represented using a list of values where each value corresponds to a node in level order traversal. If a particular node doesn\'t have a left or right child, the respective value is represented as `None`. Input The first line of the input consists of a single integer `n` (1 ≤ n ≤ 1000), the number of nodes in the binary tree. The second line contains `n` space-separated integers or `None`, representing the values of the nodes in level order traversal where `1 ≤ node value ≤ 10^9`. Output Output the left view of the binary tree in a single line, with space-separated integers denoting the values in the left view. Examples Input 6 1 2 3 4 None 5 6 Output 1 2 4 Input 7 1 None 2 3 None None 4 Output 1 2 3 4 Note In the first sample test, the binary tree looks like this: ``` 1 / 2 3 / 4 5 6 ``` The left view of this tree consists of the nodes visible when viewed from the left: 1, 2, and 4. In the second sample test, the binary tree looks like this: ``` 1 2 / 3 4 ``` The left view of this tree consists of the nodes visible when viewed from the left: 1, 2, 3, and 4.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): Builds a binary tree from a list of values in level order traversal. if not nodes or nodes[0] is None: return None root = TreeNode(nodes[0]) queue = [root] i = 1 while queue and i < len(nodes): current = queue.pop(0) if nodes[i] is not None: current.left = TreeNode(nodes[i]) queue.append(current.left) i += 1 if i < len(nodes) and nodes[i] is not None: current.right = TreeNode(nodes[i]) queue.append(current.right) i += 1 return root def left_view(root): Returns the left view of the binary tree. if not root: return [] left_view_result = [] queue = [(root, 0)] current_level = -1 while queue: node, level = queue.pop(0) if level > current_level: left_view_result.append(node.val) current_level = level if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return left_view_result # Function to parse input and derive the left view def left_view_of_tree(n, values): root = build_tree(values) return left_view(root)"},{"question":"Given an integer `n`, find how many ways you can write it as the sum of two or more consecutive positive integers. Write a function `countConsecutiveSums(n)` that takes an integer `n` (1 ≤ n ≤ 10^9) and returns the number of ways to write `n` as the sum of two or more consecutive positive integers. # Example Input ``` n = 15 ``` Output ``` 3 ``` Explanation ``` 15 can be written as: 1 + 2 + 3 + 4 + 5 4 + 5 + 6 7 + 8 So, the result is 3. ``` # Detailed Explanation You\'ll need to find all the sequences of consecutive positive integers that sum up to `n`. This involves solving equations of the form: ``` k * x + k * (k - 1) / 2 = n ``` Where `k` represents the number of consecutive integers and `x` is the starting integer. Using this equation, check for valid pairs of `k` and `x` for `n`. Loop through possible values of `k` and check if the conditions satisfy the integer constraints for `x`. # Function Signature ```python def countConsecutiveSums(n: int) -> int: ... ``` # Constraints - The function should be efficient enough to handle the upper limit of `n` within a reasonable time. - Use appropriate mathematical techniques to check for possible consecutive sequences without iterating through all possible pairs naively.","solution":"def countConsecutiveSums(n: int) -> int: Count the number of ways to write n as the sum of two or more consecutive positive integers. count = 0 # Iterate through all possible values of k k = 2 while k * (k - 1) // 2 < n: # Check if n - (k * (k - 1) // 2) is divisible by k if (n - k * (k - 1) // 2) % k == 0: count += 1 k += 1 return count"},{"question":"In a library, math books are stacked in a specific order. Each book has a distinct width and height. The librarian wants to reorganize these books in such a way that after the reorganization the height of each book is divisible by the width of the book directly below it. The books should maintain their initial widths but can be reordered based on their heights. You are given the initial dimensions of each book and need to determine if it\'s possible to reorder the books to satisfy the librarian\'s requirement. -----Input----- The first line contains an integer n (1 le n le 100): the number of books in the library. Each of the next n lines contains two integers w_i and h_i (1 le w_i, h_i le 100): the width and the height of the i-th book. -----Output----- Print \\"YES\\" if it\'s possible to reorder the books so that each book\'s height is divisible by the width of the book directly below it. Otherwise, print \\"NO\\". -----Example----- Input 4 3 12 2 6 4 8 1 1 Output YES Input 3 5 10 3 9 1 2 Output NO -----Note----- In the first example, one possible order is (1, 1), (2, 6), (4, 8), (3, 12). Each book\'s height in this order is divisible by the width of the book below. In the second example, no reordering of books can satisfy the condition that the height of each book is divisible by the width of the book directly below it.","solution":"def is_reorder_possible(n, books): # Sort the books by height in descending order books.sort(key=lambda x: x[1], reverse=True) # Check condition: each book\'s height is divisible by the width of the book directly below it for i in range(1, n): if books[i-1][1] % books[i][0] != 0: return \\"NO\\" return \\"YES\\""},{"question":"A software developer is working on a program that manages annual salaries based on a series of rules. The salary of an employee is adjusted based on their performance rating and years of service, which affect the percentage increase in their current salary. The salary adjustment rules are as follows: 1. Performance ratings are given as integers from 1 to 5, where 1 is the lowest and 5 is the highest. 2. The percentage increase in salary depends on both the performance rating and years of service: - Rating 1: No increase. - Rating 2: 2% increase if years of service are 2 or more. - Rating 3: 3% increase if years of service are 3 or more. - Rating 4: 4% increase if years of service are 5 or more. - Rating 5: 5% increase if years of service are 5 or more. 3. If the years of service requirement is not met for a given rating, the increase is 1%. Please write a program that calculates the new salaries for a series of employees based on their current salary, performance rating, and years of service. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single line of zeros. Each dataset is given in the following format: n c1 r1 y1 c2 r2 y2 :: cn rn yn The number of employees n (1 ≤ n ≤ 1000) on the first line, followed by the i-th employee on the n lines: current salary ci (an integer, 1 ≤ ci ≤ 1000000), performance rating ri (an integer from 1 to 5), and years of service yi (an integer, 0 ≤ yi ≤ 40) are given on one line, separated by blanks. Output For each dataset, output the new salary for each employee in the same order as the input, rounded down to the nearest integer. Example Input 2 50000 3 4 40000 4 6 3 30000 2 1 45000 5 10 35000 1 5 0 Output 51500 41600 30300 47250 35000","solution":"def calculate_new_salary(current_salary, rating, years_of_service): Calculates the new salary based on rating and years of service. if rating == 1: increase_percentage = 0 elif rating == 2: increase_percentage = 2 if years_of_service >= 2 else 1 elif rating == 3: increase_percentage = 3 if years_of_service >= 3 else 1 elif rating == 4: increase_percentage = 4 if years_of_service >= 5 else 1 elif rating == 5: increase_percentage = 5 if years_of_service >= 5 else 1 new_salary = current_salary * (1 + increase_percentage / 100) return int(new_salary) def process_input(input_text): lines = input_text.strip().split(\'n\') i = 0 results = [] while i < len(lines): n = int(lines[i].strip()) if n == 0: break i += 1 for _ in range(n): c, r, y = map(int, lines[i].strip().split()) new_salary = calculate_new_salary(c, r, y) results.append(new_salary) i += 1 return results"},{"question":"Charlie loves solving puzzles, and he recently came across an interesting one involving strings and substrings. A substring is a contiguous sequence of characters within a string. Charlie needs to determine the maximum length of a substring that has no repeating characters. ----Input---- The first line contains the number of test cases t (1 le t le 1000). Each test case contains a single string s consisting of lowercase English letters. The length of each string s will be between 1 and 50 inclusive. ----Output---- For each test case, output a single integer representing the maximum length of a substring with all unique characters. ----Examples---- Input 3 abcabcbb bbbbb pwwkew Output 3 1 3 ----Note---- In the first example, the answer is \\"abc\\", which has a length of 3. In the second example, the answer is \\"b\\", with a length of 1. In the third example, the answer is \\"wke\\", with a length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def max_length_of_unique_substring(s): Returns the length of the longest substring without repeating characters. max_len = 0 char_index_map = {} start = 0 for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_len = max(max_len, end - start + 1) return max_len def process_test_cases(t, test_cases): Processes all test cases and returns the results. results = [] for s in test_cases: results.append(max_length_of_unique_substring(s)) return results"},{"question":"A group of friends are planning a trip and need to share the cost of a car rental. They want to determine if the total rental cost can be evenly split among all of them. Write a program that calculates this. Input The input is given in the following format. n c a1 a2 a3 ... an The first line contains an integer n (1 ≤ n ≤ 100) which represents the number of friends. The second line contains an integer c (1 ≤ c ≤ 100000) which represents the total rental cost. The third line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) which represent the amount of money each friend is willing to contribute towards the rental cost. Output Print \\"yes\\" if the total rental cost can be exactly divided among all friends based on their contributions, otherwise print \\"no\\". Examples Input 4 240 60 60 60 60 Output yes Input 3 150 50 75 100 Output no","solution":"def can_split_rental_cost(n, c, contributions): Determines if the total rental cost can be evenly split among friends based on their contributions. Parameters: n (int): Number of friends c (int): Total rental cost contributions (list of int): List of contributions from each friend Returns: str: \\"yes\\" if the total rental cost can be evenly split, \\"no\\" otherwise. total_contributions = sum(contributions) if total_contributions == c: return \\"yes\\" else: return \\"no\\""},{"question":"Vanya has a rectangular grid of n rows and m columns. Each cell in the grid contains a positive integer initially set to 0. Vanya can perform the following operation exactly k times: - Choose any sub-rectangle of the grid and increase the value of each cell in that sub-rectangle by 1. Vanya wants to maximize the sum of the values in the cells of the grid. Your task is to help Vanya by finding the maximum possible sum of the values in the grid after performing the operation exactly k times. Input The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 10^4) — the number of rows, columns, and the number of operations respectively. Output Print a single integer — the maximum possible sum of the values in the grid after performing the operation exactly k times. Example Input 3 4 5 Output 10 Explanation Vanya should choose the largest possible sub-rectangle in each operation to maximize the sum. In this case, he can choose the entire grid (3x4) for the first operation, resulting in a total sum of 3*4 = 12. Then, for the remaining operations, he can choose smaller sub-rectangles within the grid. Summing these up, the total maximum possible sum is computed. **Note:** Focus on maximizing the size of the sub-rectangle chosen in every operation to achieve the highest possible sum.","solution":"def maximize_grid_sum(n, m, k): Calculate the maximum sum of values in the grid after performing k operations. Each operation can increase a sub-rectangle by 1. :param n: int : number of rows :param m: int : number of columns :param k: int : number of operations :return: int : maximum sum of the values in the grid # Each operation will ideally select the full grid (n * m) # Since we have k operations, the maximum sum is k * n * m return k * n * m"},{"question":"Masha has n books, each represented by a string s_i. She wants to organize these books into groups where no two books in the same group start with the same letter. For example, if Masha has six books represented as an array s = [\\"apple\\", \\"banana\\", \\"carrot\\", \\"apricot\\", \\"berry\\", \\"cherry\\"], she can organize the books into three groups as follows: [\\"apple\\", \\"banana\\", \\"carrot\\"], [\\"apricot\\", \\"berry\\"], [\\"cherry\\"]. Masha wants to organize the books using the minimum number of groups. Help her achieve this. -----Input----- The first line of the input contains one integer n (1 le n le 100) — the number of books. The next n lines contain one string each — the titles of the books. Each string s_i (1 le |s_i| le 100) contains only lowercase English letters. -----Output----- Print only one integer — the minimum number of groups Masha needs to organize all the books so that no two books in the same group start with the same letter. -----Examples----- Input 6 apple banana carrot apricot berry cherry Output 3 Input 1 book Output 1","solution":"def min_groups(book_titles): Returns the minimum number of groups needed so that no two books in the same group start with the same letter. starting_letters = set() for title in book_titles: starting_letters.add(title[0]) return len(starting_letters)"},{"question":"You are given an array of integers arr of length n. You are also given two integers x and y. Your task is to identify if there exists a contiguous subarray of length at least k such that the absolute difference between its minimum and maximum elements is at most y, and the sum of its elements is greater than or equal to x when multiplied by a factor of m. -----Input----- The first line contains two integers n and q (1 le n le 10^5, 1 le q le 10^5) — the length of the array and the number of test cases. The second line contains n integers arr_1, arr_2, dots, arr_n (1 le arr_i le 10^9) — the elements of the array. The next q lines each contain four integers x, y, k, and m (1 le x, y, k, m le 10^5) — the minimum sum constraint, the maximum allowed difference, the minimum subarray length, and the multiplying factor. -----Output----- For each test case, print \\"YES\\" if there exists a subarray that meets the criteria, or \\"NO\\" if there does not exist such a subarray. -----Examples----- Input 6 3 1 5 3 8 4 9 10 4 2 2 20 3 3 1 15 6 4 1 Output YES NO YES -----Note----- Consider the example test from the statement. For the first test case, the subarray [5, 3] has a minimum of 3 and a maximum of 5 (difference is 2, which is ≤ 4). The sum is 8 and 8 * 2 ≥ 10. For the second test case, no subarray satisfies the criteria. For the third test case, the subarray [5, 3, 8, 4] has a minimum of 3 and a maximum of 8 (difference is 5, which is ≤ 6). The sum is 20 and 20 * 1 ≥ 15.","solution":"def exists_subarray(arr, n, x, y, k, m): Determines if there exists a contiguous subarray of length at least k such that the absolute difference between its minimum and maximum elements is at most y, and the sum of its elements multiplied by m is greater than or equal to x. for i in range(n): current_sum = 0 current_min = arr[i] current_max = arr[i] for j in range(i, n): current_sum += arr[j] current_min = min(current_min, arr[j]) current_max = max(current_max, arr[j]) if j - i + 1 >= k and (current_max - current_min) <= y and (current_sum * m) >= x: return \\"YES\\" return \\"NO\\" def process_queries(n, q, arr, queries): results = [] for x, y, k, m in queries: result = exists_subarray(arr, n, x, y, k, m) results.append(result) return results"},{"question":"Arthur is working on a genetic algorithm project that involves optimizing a sequence of integers. To assess the fitness of each sequence, he needs to compute a score based on the number of consecutive integers in that sequence that are either strictly increasing or strictly decreasing. Write a function that, given a sequence of n integers, calculates the fitness score. The fitness score is defined as the maximum number of consecutive integers in a strictly increasing or strictly decreasing subsequence. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n space-separated integers seq1, seq2, ..., seqn (1 ≤ seqi ≤ 1000) — the elements of the sequence. Output Output a single integer — the fitness score. Examples Input 8 1 3 2 4 6 5 8 7 Output 4 Input 5 9 8 7 6 5 Output 5 Input 6 1 1 1 1 1 1 Output 1 Explanation of examples: - In the first example, the longest increasing subsequences are 1 3 and 2 4 6, and the longest decreasing subsequences are 6 5 and 8 7. So, the fitness score is 3 (from the subsequence 2 4 6). - In the second example, the entire sequence is strictly decreasing, so the fitness score is 5. - In the third example, there are no increasing or decreasing subsequences of more than length 1, so the fitness score is 1.","solution":"def calculate_fitness_score(sequence): Returns the fitness score for the given sequence. The fitness score is defined as the maximum number of consecutive integers in a strictly increasing or strictly decreasing subsequence. n = len(sequence) if n == 1: return 1 # Variables to keep the maximum length of # increasing or decreasing subsequences max_length = 1 current_length_inc = 1 current_length_dec = 1 for i in range(1, n): if sequence[i] > sequence[i - 1]: current_length_inc += 1 current_length_dec = 1 elif sequence[i] < sequence[i - 1]: current_length_dec += 1 current_length_inc = 1 else: current_length_inc = 1 current_length_dec = 1 max_length = max(max_length, current_length_inc, current_length_dec) return max_length"},{"question":"A large warehouse has a system of one-way conveyor belts that transport boxes between different storage units. The warehouse is represented as a directed graph with N nodes where each node represents a storage unit, and M directed edges represent the conveyor belts. Some conveyor belts might form cycles, making certain units unreachable unless the conveyor belt direction is reversed. To maximize the efficiency, the warehouse manager needs to ensure that all storage units are reachable either directly or indirectly from at least one starting unit. The manager can reverse the direction of at most one conveyor belt. Your task is to determine if it\'s possible that after reversing at most one conveyor belt, all storage units become reachable from a common starting unit. Input Format The first line contains two integers N (1 ≤ N ≤ 2000) and M (0 ≤ M ≤ 5000) representing the number of storage units and conveyor belts respectively. Each of the next M lines contains two space-separated integers u and v (1 ≤ u, v ≤ N; u ≠ v) representing a directed conveyor belt transporting boxes from unit u to unit v. Output Format Print \\"YES\\" if it\'s possible to make all storage units reachable from one starting unit by reversing at most one conveyor belt. Otherwise, print \\"NO\\". SAMPLE INPUT 5 5 1 2 2 3 3 4 4 5 5 1 SAMPLE OUTPUT YES Explanation In the given sample, the graph forms a cycle. If we reverse the direction of any one of the conveyor belts, for example, reversing the direction of the conveyor belt from unit 5 to unit 1 to become from unit 1 to unit 5, all nodes become reachable from storage unit 1. Hence, the output is \\"YES\\".","solution":"def can_make_all_reachable(n, m, edges): from collections import defaultdict if n == 1: return \\"YES\\" if m == 0 else \\"NO\\" forward_graph = defaultdict(list) reverse_graph = defaultdict(list) for u, v in edges: forward_graph[u].append(v) reverse_graph[v].append(u) def kosaraju_scc(graph, reverse_graph): visited = [False] * (n + 1) stack = [] def fill_order(v): visited[v] = True for neighbour in graph[v]: if not visited[neighbour]: fill_order(neighbour) stack.append(v) def dfs(v, component): visited[v] = True component.append(v) for neighbour in reverse_graph[v]: if not visited[neighbour]: dfs(neighbour, component) for i in range(1, n + 1): if not visited[i]: fill_order(i) visited = [False] * (n + 1) components = [] while stack: v = stack.pop() if not visited[v]: component = [] dfs(v, component) components.append(component) return components components = kosaraju_scc(forward_graph, reverse_graph) if len(components) == 1: return \\"YES\\" if len(components) == 2: c1, c2 = components c1_set, c2_set = set(c1), set(c2) one_way = False for u in c1: for v in forward_graph[u]: if v in c2_set: one_way = True break for u in c2: for v in forward_graph[u]: if v in c1_set: one_way = True break return \\"YES\\" if one_way else \\"NO\\" return \\"NO\\""},{"question":"You are given a sequence of integers (a_1, a_2, ldots, a_n). For each integer x in the sequence, determine the number of distinct prime factors of x. Input Format The first line contains an integer mathbf{n}, the number of integers in the sequence. The second line contains mathbf{n} integers a_i (1 leq a_i leq 10^6) which form the sequence. Output Format Output mathbf{n} lines. Each line should contain the number of distinct prime factors of the corresponding integer in the sequence. Constraints 1 leq n leq 10^5 1 leq a_i leq 10^6 Sample Input 5 6 15 21 28 35 Sample Output 2 2 2 2 2 Explanation - For 6, the distinct prime factors are 2 and 3. - For 15, the distinct prime factors are 3 and 5. - For 21, the distinct prime factors are 3 and 7. - For 28, the distinct prime factors are 2 and 7. - For 35, the distinct prime factors are 5 and 7.","solution":"def count_distinct_prime_factors(n, numbers): MAX_A = 10**6 # Sieve of Eratosthenes to compute smallest prime factor for every number up to MAX_A spf = list(range(MAX_A + 1)) # spf[x] will be the smallest prime factor of x for i in range(2, int(MAX_A**0.5) + 1): if spf[i] == i: # i is a prime number for j in range(i * i, MAX_A + 1, i): if spf[j] == j: spf[j] = i def num_distinct_prime_factors(x): distinct_factors = set() while x != 1: distinct_factors.add(spf[x]) x //= spf[x] return len(distinct_factors) result = [num_distinct_prime_factors(x) for x in numbers] return result"},{"question":"A group of scientists has discovered a new sequence of numbers while analyzing an obscure physical phenomenon. You are tasked with verifying whether a given sequence of numbers follows their discovery rules. The sequence is governed by the laws: 1. If n is the length of the sequence, the sequence is noted as s_1, s_2, ..., s_{n}. 2. The first element s_1 is equal to the sum of the digits of a given starting number k. 3. For every subsequent element s_{i} (2 ≤ i ≤ n), s_{i} is equal to the product of all digits of the previous sequence element s_{i-1}. Given a starting number k and the length of the sequence n, your task is to determine if the provided sequence s follows these rules. -----Input----- The first line of the input contains an integer k (1 ≤ k ≤ 100) and an integer n (2 ≤ n ≤ 10). The second line contains n integers, the i\'th of which is s_{i} (0 ≤ s_{i} ≤ 10^9) — the value of the i\'th number in the sequence. -----Output----- Print \\"YES\\" if the given sequence follows the rules, otherwise print \\"NO\\". -----Examples----- Input 4 3 4 4 4 Output YES Input 18 4 9 1 1 1 Output NO -----Note----- In the first example, the starting number is 4, thus sum of its digits is 4 which matches s_1. Then the product of digits of 4 is also 4 (4), thus it validates the sequence. In the second example, the sequence starts with 9 which is the sum of digits of 18. But the product of digits of 9 is 9 not 1, hence it invalidates the sequence.","solution":"def follows_sequence_rules(k, n, s): def sum_of_digits(x): return sum(int(d) for d in str(x)) def product_of_digits(x): product = 1 for d in str(x): product *= int(d) return product # Verify the first element if sum_of_digits(k) != s[0]: return \\"NO\\" # Verify subsequent elements for i in range(1, n): if product_of_digits(s[i-1]) != s[i]: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of integers, write a function to determine if the list can be divided into pairs such that the sum of every pair is even. Example list = [2, 4, 6, 8, 10] Pairs satisfying the condition: [(2,4), (6,8), (10,5)] Yes, the list can be divided into pairs such that the sum of every pair is even. Function Description Complete the canBePairedEvenSumPairs function in the editor below. canBePairedEvenSumPairs has the following parameter(s): list arr: an array of integers Returns - boolean: True if the list can be divided into pairs whose sums are even, False otherwise Input Format The first line contains an integer n, the number of elements in the list. The second line contains n space-separated integers, each a value of arrleft[iright]. Constraints 1 leq n leq 1000 1 leq arr[i] leq 1000 Sample Input STDIN Function ----- -------- 6 n= 6 1 2 3 4 5 6 arr = [1, 2, 3, 4, 5, 6] Sample Output False Explanation Here we cannot pair all elements into pairs with even sums. The pairs: [(1,3), (2,4), (5,6)] [(1,5), (2,6), (3,4)] and many other pair combinations do not sum to even.","solution":"def canBePairedEvenSumPairs(arr): Determines if a list can be divided into pairs such that the sum of every pair is even. :param arr: List of integers :return: Boolean, True if pairs can be made, False otherwise if len(arr) % 2 != 0: return False # Count the number of odd and even integers in the list odd_count = sum(1 for num in arr if num % 2 != 0) even_count = len(arr) - odd_count # A pair sum is even if both numbers are odd or both are even # We need equal number of pairs of odd and even integers return odd_count % 2 == 0 and even_count % 2 == 0"},{"question":"You are given a string s which consists of lowercase alphabets. A run in the string is a maximal non-empty substring which consists of just one unique character. The length of the run is the number of times this character repeats consecutively. For example, in the string \\"aaabbc\\", there are three runs: \\"aaa\\" of length 3, \\"bb\\" of length 2, and \\"c\\" of length 1. Your task is to find the longest run of characters in the given string and its length. If there are multiple runs with the same maximum length, output the first one. INPUT The input consists of a single line which contains the string s. The length of s is not larger than 1000 characters. OUTPUT Output the first longest run and its length, separated by a space. SAMPLE INPUT aaabbccdedddd SAMPLE OUTPUT aaa 3","solution":"def longest_run(s): Finds the longest run of characters in the string and its length. Args: s (str): Input string containing lowercase alphabets. Returns: tuple: A tuple containing the longest run and its length. max_run = \\"\\" max_length = 0 current_char = \\"\\" current_length = 0 for char in s: if char == current_char: current_length += 1 else: if current_length > max_length: max_run = current_char * current_length max_length = current_length current_char = char current_length = 1 if current_length > max_length: max_run = current_char * current_length max_length = current_length return max_run, max_length # Example usage # s = \\"aaabbccdedddd\\" # print(longest_run(s)) # Output: (\'aaa\', 3)"},{"question":"Given an integer array A of size N, and an integer K, you need to rotate the array in clockwise direction K times. Return the rotated array. Example 1: Input: A = [1, 2, 3, 4, 5] K = 2 Output: [4, 5, 1, 2, 3] Explanation: After rotating array by 2 steps to the right, the array becomes [4, 5, 1, 2, 3]. Example 2: Input: A = [10, 20, 30, 40] K = 1 Output: [40, 10, 20, 30] Explanation: After rotating array by 1 step to the right, the array becomes [40, 10, 20, 30]. Your Task: You don\'t need to read input or print anything. Complete the function rotateArray() which accepts an array A and an integer K as input parameters and returns the rotated array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 0 <= |A[i]| <= 10^9 1 <= K <= 10^5","solution":"def rotateArray(A, K): Rotates the array A clockwise by K steps. N = len(A) K = K % N # In case K is greater than N return A[-K:] + A[:-K]"},{"question":"You are given two strings, s1 and s2. Your task is to determine if s2 is a rotated version of s1 and to return True or False accordingly. A string s2 is considered a rotated version of s1 if it can be obtained by taking some number of characters from the beginning of s1 and moving them to the end without changing the order of the characters. For example, \\"waterbottle\\" can be rotated to \\"erbottlewat\\" but not to \\"ewaterbottl\\". Constraints * 1 ≤ length of s1, s2 ≤ 100,000 * s1 and s2 will consist of lowercase English letters only. Input The first line of the input will be the string s1. The second line of the input will be the string s2. Output Print True if s2 is a rotated version of s1, otherwise print False. Example Input waterbottle erbottlewat Output True Input hello lohel Output True Input hello loleh Output False","solution":"def is_rotated_version(s1, s2): Determine if s2 is a rotated version of s1. :param s1: The original string. :param s2: The string to check. :return: True if s2 is a rotated version of s1, False otherwise. # Check if lengths are equal, if not they cannot be rotations of each other if len(s1) != len(s2): return False # Concatenate s1 with itself. Any rotation of s1 will be a substring of this new string. double_s1 = s1 + s1 # Check if s2 is a substring of the concatenated string return s2 in double_s1"},{"question":"You are given a list of integers and a set of queries. Each query consists of two integers representing lower and upper bounds. Your task is to return the sum of all prime numbers within those bounds for each query. Input format: The first line contains an integer N representing the number of elements in the list. The second line contains N space-separated integers. The third line contains an integer Q representing the number of queries. Each of the next Q lines contains two integers L and R, describing one query where L is the lower bound and R is the upper bound (both inclusive). Output format: For each query, print the sum of all prime numbers within the bounds in a separate line. Constraints: 1 ≤ N ≤ 100,000 1 ≤ Ai ≤ 10^6 1 ≤ Q ≤ 50,000 1 ≤ L ≤ R ≤ N Example input: 10 2 3 4 5 6 7 8 9 10 11 5 1 3 4 7 1 10 5 5 6 10 Example output: 5 12 28 0 18","solution":"from typing import List, Tuple def is_prime(n: int) -> bool: if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def preprocess_primes(nums: List[int]) -> List[int]: prime_prefix_sum = [0] * (len(nums) + 1) for i in range(1, len(nums)+1): prime_prefix_sum[i] = prime_prefix_sum[i-1] + (nums[i-1] if is_prime(nums[i-1]) else 0) return prime_prefix_sum def query_prime_sum(prime_prefix_sum: List[int], L: int, R: int) -> int: return prime_prefix_sum[R] - prime_prefix_sum[L-1] def process_queries(nums: List[int], queries: List[Tuple[int, int]]) -> List[int]: prime_prefix_sum = preprocess_primes(nums) results = [] for L, R in queries: results.append(query_prime_sum(prime_prefix_sum, L, R)) return results"},{"question":"Reverse a Subarray in an Array You are given an array of integers arr = [arr_0, arr_1, ..., arr_{n-1}] and two integers l and r such that 0 leq l leq r < n. Constraints * 1 leq n leq 100,000 * 0 leq arr_i leq 10,000 * 0 leq l leq r < n Input The input is given in the following format: n arr_0 ; arr_1 ; ... ; arr_{n-1} l ; r Output Print the array after reversing the subarray from l to r. Print each element in the array separated by space. Example Input 5 1 2 3 4 5 1 3 Output 1 4 3 2 5","solution":"def reverse_subarray(arr, l, r): Reverses the subarray in \'arr\' from index \'l\' to \'r\'. Parameters: arr (list): The list of integers. l (int): The starting index. r (int): The ending index. Returns: list: The array after reversing the subarray from l to r. arr[l:r+1] = arr[l:r+1][::-1] return arr"},{"question":"In a computer system, files are arranged in a grid format. The grid contains `n` rows and `m` columns, and there are `n * m` files in total. Each file in the grid can be uniquely identified by its row and column indices `(i, j)` where `1 ≤ i ≤ n` and `1 ≤ j ≤ m`. You are given the coordinates of a central file `(a, b)`, and a positive integer `r` representing the maximum distance from the central file, in terms of Manhattan distance, within which files must be retained. The Manhattan distance between two files `(i1, j1)` and `(i2, j2)` is defined as `|i1 - i2| + |j1 - j2|`. Your task is to determine which files need to be retained and which should be deleted. Return a list of tuples representing the coordinates of the files that should be retained. Input The first line contains three integers `n`, `m`, and `r` (1 ≤ n, m ≤ 1000, 0 ≤ r ≤ 1000). The second line contains two integers `a` and `b` (1 ≤ a ≤ n, 1 ≤ b ≤ m) representing the coordinates of the central file. Output Print the coordinates of the files that should be retained, each coordinate pair in a new line. The coordinates should be printed in the order of their rows, and within each row, in the order of their columns. Examples Input 5 5 2 3 3 Output (1, 3) (2, 2) (2, 3) (2, 4) (3, 1) (3, 2) (3, 3) (3, 4) (3, 5) (4, 2) (4, 3) (4, 4) (5, 3) Input 7 7 1 4 4 Output (3, 4) (4, 3) (4, 4) (4, 5) (5, 4) Note In the first example, the file at `(3, 3)` is the central file. The Manhattan distance constraint `r = 2` allows files within the distance of 2 from `(3, 3)` to be retained. In the second example, the central file is `(4, 4)` and the retaining distance is `1`, therefore only files immediately adjacent and the central file itself are kept.","solution":"def retained_files(n, m, r, a, b): retained = [] for i in range(1, n + 1): for j in range(1, m + 1): if abs(i - a) + abs(j - b) <= r: retained.append((i, j)) return retained"},{"question":"Given an input stream of `n` integers, perform the following task for each `iʰ` integer: - Add the `iʰ` integer to the list of integers. - Find the mode of the updated list (i.e., for the first element through the `iʰ` element). - Print the updated mode on a new line. If there are multiple modes, print the smallest one. The mode of a set of numbers is the number that appears most frequently in the set. If there are multiple numbers that appear with the same highest frequency, the smallest of them is considered the mode. Example: ``` a = [7, 3, 5, 3, 2] ``` List Mode [7] 7 [3, 7] 3 [3, 5, 7] 3 [3, 3, 5, 7] 3 [2, 3, 3, 5, 7] 3 Each of the mode values is stored in an array and the array is returned for the main function to print. Function Description: Complete the `runningMode` function in the editor below. `runningMode` has the following parameters: - int a[n]: an array of integers Returns: - int[n]: the mode of the array after each insertion, modify the print statement in main to get proper formatting. Input Format The first line contains a single integer, `n`, the number of integers in the data stream. Each line `i` of the `n` subsequent lines contains an integer, `a[i]`, to be inserted into the list. Constraints: ``` 1 ≤ n ≤ 10^5 0 ≤ a[i] ≤ 10^5 ``` Sample Input: ``` 6 1 2 2 3 3 3 ``` Sample Output: ``` 1 1 2 2 2 3 ``` Explanation: There are `n = 6` integers, so we must print the new mode on a new line as each integer is added to the list: List = [1], mode = 1 List = [1, 2], mode = 1 List = [1, 2, 2], mode = 2 List = [1, 2, 2, 3], mode = 2 List = [1, 2, 2, 3, 3], mode = 2 List = [1, 2, 2, 3, 3, 3], mode = 3","solution":"def runningMode(a): This function calculates and returns the running mode of the input list. from collections import defaultdict import heapq # Dictionary to store frequency of elements freq = defaultdict(int) # Min-heap to keep track of the smallest element among the most frequent elements max_freq_heap = [] modes = [] for num in a: freq[num] += 1 heapq.heappush(max_freq_heap, (-freq[num], num)) # Clean up the heap to ensure the top element is the mode while True: max_freq, candidate_mode = max_freq_heap[0] if -max_freq == freq[candidate_mode]: modes.append(candidate_mode) break else: heapq.heappop(max_freq_heap) return modes"},{"question":"You are working as a developer in a company that manages a large logistics solution. Your current task involves optimizing the packaging and transport process. The company operates n warehouses, numbered from 1 to n, some of which are directly connected by m bidirectional routes that facilitate the direct transfer of goods. The company\'s aim is to ensure that goods can always reach from any warehouse to any other warehouse at the minimum cost, preferring routes that have the least transportation cost. Each route between two warehouses i and j has a specific cost c associated with it. Your task is to help the company determine the minimum cost required to connect all the warehouses so that goods can be transferred between any two warehouses, either directly or indirectly. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 105, 0 ≤ m ≤ 105), the number of warehouses and the number of bidirectional routes, respectively. Each of the next m lines describes a route and contains three space-separated integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 109, u ≠ v) which denotes a route between warehouse u and warehouse v with transportation cost c. It is guaranteed that each route between two warehouses is unique. Output Print a single integer — the minimum cost required to connect all the warehouses such that goods can be transported between any two warehouses. If it is not possible to connect all the warehouses, print -1. Examples Input 4 5 1 2 1 1 3 4 4 2 6 3 4 5 2 3 2 Output 8 Input 4 2 1 2 3 3 4 7 Output -1 Note In the first sample, the minimum cost to connect all warehouses is achieved by using the routes: (1, 2), (2, 3), and (3, 4) with a total cost of 1 + 2 + 5 = 8. In the second sample, there is no route connecting the warehouse pairs {1, 2} and {3, 4}, making it impossible to connect all the warehouses. Thus, the output is -1.","solution":"def minimum_cost_to_connect_warehouses(n, m, routes): if n == 1: return 0 parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX routes.sort(key=lambda x: x[2]) cost = 0 edges_used = 0 for u, v, c in routes: if find(u) != find(v): union(u, v) cost += c edges_used += 1 if edges_used == n - 1: return cost return -1 if edges_used != n - 1 else cost"},{"question":"Alice loves painting. She has a canvas represented by a 2D grid of dimensions n x m, where n is the number of rows and m is the number of columns. Each cell in the grid is initially white. Alice can paint a rectangular subgrid any color she wants. Alice wants to make the entire canvas painted with a single color, but she can only paint subgrids. She is curious to know the minimum number of subgrids she has to paint to achieve this. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. Each test case consists of two integers n and m (1 le n, m le 1000) — the dimensions of the canvas. -----Output----- For each test case, output in a separate line the minimum number of subgrids Alice has to paint to have the entire canvas of a single color. -----Examples----- Input 3 3 3 5 1 1 4 Output 1 1 1 -----Note----- In the first example, Alice can paint the entire 3x3 grid in one operation. In the second example, Alice can paint the entire 5x1 grid in one operation. In the third example, Alice can paint the entire 1x4 grid in one operation.","solution":"def min_subgrids(t, test_cases): Given the number of test cases and a list of tuples representing the dimensions of the canvas (n, m) for each test case, returns the minimum number of subgrids required to paint the entire canvas with a single color for each test case. Parameters: t (int): The number of test cases test_cases (list): A list of tuples (n, m) representing the dimensions of the canvas Returns: list: A list of integers, each representing the minimum number of subgrids required result = [1] * t return result"},{"question":"You are given a sequence of integers a of length n. You can perform the following operation on the sequence: Choose a subarray and sort it in non-decreasing order. Note that the subarray can be the entire sequence. Your task is to determine the minimum number of operations required to sort the entire sequence in non-decreasing order. Input The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the sequence. Output Output a single integer — the minimum number of operations required to sort the sequence. Examples Input 5 1 3 2 5 4 Output 1 Input 6 6 5 4 3 2 1 Output 1 Input 4 2 2 2 2 Output 0 Note In the first example, you can sort the subarray from index 2 to index 4 to obtain the sorted sequence [1, 2, 3, 4, 5] which requires only 1 operation. In the second example, you can sort the whole sequence in one operation to get [1, 2, 3, 4, 5, 6]. In the third example, the sequence is already sorted, so no operations are needed.","solution":"def min_operations_to_sort(n, sequence): Returns the minimum number of operations required to sort the sequence in non-decreasing order. An operation consists of selecting a subarray and sorting it. Args: n : int : length of the sequence (1 ≤ n ≤ 1000) sequence : List[int] : sequence of n integers (1 ≤ ai ≤ 1000) Returns: int : minimum number of operations needed to sort the sequence if sequence == sorted(sequence): return 0 return 1"},{"question":"Create a program that analyzes the sales data of a bookstore with multiple branches and outputs the branch with the highest average sales. Each branch\'s sales data for four quarters of a year are given, and the program must first calculate the average annual sales for each branch. The branch with the highest average sales should be identified along with its average sales amount. If there are multiple branches with the same highest average, output the first one based on the input order. Additionally, if the input data contains branches with sales data for less than four quarters (i.e., missing data), the program should skip those branches. Calculate the average sales amount as a floating-point number and ensure the output is shown with two decimal places. Input The input consists of multiple lines, where each line contains five space-separated values: branch_id q1_sales q2_sales q3_sales q4_sales - branch_id is an integer representing the unique ID of a branch. - q1_sales, q2_sales, q3_sales, q4_sales are floating-point numbers representing the sales data for each quarter. The end of the input is indicated by a line containing -1. Output Output the branch_id of the branch with the highest average sales followed by its average sales amount. Example Input 101 2000.5 2500.0 2300.0 2800.5 102 1800.0 2400.7 2200.0 103 2600.2 2700.5 2400.3 2900.1 -1 Output 103 2650.28","solution":"def branch_with_highest_avg_sales(sales_data): branches = {} for data in sales_data: elements = data.split() if len(elements) == 5: branch_id = int(elements[0]) sales = list(map(float, elements[1:])) if len(sales) == 4: avg_sales = sum(sales) / 4.0 branches[branch_id] = avg_sales if not branches: return None max_branch_id = max(branches, key=branches.get) max_avg_sales = branches[max_branch_id] return max_branch_id, round(max_avg_sales, 2)"},{"question":"You are given a positive integer n. Write a function that generates a sequence of length n such that the sequence contains alternating even and odd numbers, starting with an even number. If n is odd, the sequence should end with an odd number. The resulting sequence should be composed of distinct integers from 1 to 2n in arbitrary order. -----Input----- The input consists of multiple test cases. The first line contains the number of test cases t (1 leq t leq 10^3). Each of the next t lines contains a single integer n (1 leq n leq 10^5) — the length of the desired sequence. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print a line containing n integers representing the sequence. If there are multiple possible solutions, any of them will be accepted. -----Examples----- Input 3 3 5 2 Output 2 1 4 2 1 4 3 6 2 1 -----Note----- In the first test case, one possible sequence is 2, 1, 4. The sequence starts with an even number and alternates properly. In the second test case, one possible sequence is 2, 1, 4, 3, 6. The sequence starts with an even number and alternates properly, ending with an odd number. In the third test case, one possible sequence is 2, 1. The sequence starts with an even number and alternates properly.","solution":"def generate_sequence(n): Generates a sequence of length n containing alternating even and odd numbers, starting with an even number. The sequence will be composed of distinct integers from 1 to 2n. sequence = [] even = 2 odd = 1 for i in range(n): if i % 2 == 0: sequence.append(even) even += 2 else: sequence.append(odd) odd += 2 return sequence def main(t, cases): results = [] for n in cases: results.append(generate_sequence(n)) return results"},{"question":"Given two strings str1 and str2 of size N and M respectively, your task is to find out if there is a one-to-one character mapping possible from str1 to str2 such that every character in str1 can be mapped to a unique character in str2. Each character in str1 should be mapped to one character in str2, and each character in str2 can only be mapped from one character in str1 (bijection). Example 1: Input: N = 3, M = 3 str1 = \\"abc\\" str2 = \\"def\\" Output: True Explanation: A mapping is possible: \'a\' -> \'d\', \'b\' -> \'e\', \'c\' -> \'f\'. Example 2: Input: N = 3, M = 3 str1 = \\"foo\\" str2 = \\"bar\\" Output: False Explanation: No unique mapping possible since both \'f\' and \'o\' would map to \'b\'. Example 3: Input: N = 3, M = 2 str1 = \\"abc\\" str2 = \\"dy\\" Output: False Explanation: Mapping is not possible as lengths of strings are different. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isomorphicStrings(str1, str2)` which takes the strings str1 and str2 as input and returns a boolean value, True if a one-to-one character mapping is possible, otherwise False. Expected Time Complexity: O(N + M) Expected Auxiliary Space: O(min(N, M)) Constraints: 1 ≤ N, M ≤ 10^5 str1 and str2 contain only lowercase alphabetic characters.","solution":"def isomorphicStrings(str1, str2): Check if there is a one-to-one character mapping possible from str1 to str2. # If lengths are not the same, one-to-one mapping is not possible if len(str1) != len(str2): return False mapping_str1_to_str2 = {} mapping_str2_to_str1 = {} for ch1, ch2 in zip(str1, str2): if ch1 in mapping_str1_to_str2: if mapping_str1_to_str2[ch1] != ch2: return False if ch2 in mapping_str2_to_str1: if mapping_str2_to_str1[ch2] != ch1: return False mapping_str1_to_str2[ch1] = ch2 mapping_str2_to_str1[ch2] = ch1 return True"},{"question":"A programmer is working on a custom messaging system. Each message is represented as a string consisting of lowercase English letters and is processed through a series of circular shifts. A circular shift of a string `s` consists of moving the leftmost character to the rightmost position. For example, given the string \\"abcdef\\": - A circular shift would transform it to \\"bcdefa\\". - Another circular shift will transform it to \\"cdefab\\", and so forth. The programmer needs to determine whether one string can be transformed into another string using any number of circular shifts. If it is possible, return the minimum number of circular shifts required. If it is not possible, return -1. Your task is to write a function that takes two strings and determines the minimum number of circular shifts needed to transform the first string into the second string, or returns -1 if it\'s not possible. # Function Signature ```python def min_circular_shifts(s1: str, s2: str) -> int: pass ``` # Input - `s1`: a string representing the original message (1 ≤ len(s1) ≤ 1000) - `s2`: a string representing the target message (1 ≤ len(s2) ≤ 1000) # Output - An integer representing the minimum number of circular shifts required to transform `s1` into `s2`, or -1 if it\'s not possible. # Examples Example 1 ```python s1 = \\"abcdef\\" s2 = \\"cdefab\\" min_circular_shifts(s1, s2) ``` Output ```python 2 ``` Example 2 ```python s1 = \\"abcdef\\" s2 = \\"abcfed\\" min_circular_shifts(s1, s2) ``` Output ```python -1 ``` Example 3 ```python s1 = \\"a\\" s2 = \\"a\\" min_circular_shifts(s1, s2) ``` Output ```python 0 ```","solution":"def min_circular_shifts(s1: str, s2: str) -> int: if len(s1) != len(s2): return -1 doubled_s1 = s1 + s1 if s2 not in doubled_s1: return -1 return doubled_s1.index(s2) # Example usage # print(min_circular_shifts(\\"abcdef\\", \\"cdefab\\")) # Output: 2 # print(min_circular_shifts(\\"abcdef\\", \\"abcfed\\")) # Output: -1 # print(min_circular_shifts(\\"a\\", \\"a\\")) # Output: 0"},{"question":"Tom has a task to water his plants, which must be completed strictly before the sunset. Each plant takes exactly 10 minutes to water, and he can choose to water any number of plants starting from 1. Given the number of minutes left before sunset, determine if Tom can water all the chosen plants strictly before the sunset. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line of input, containing a single integer N — the number of minutes from now until sunset. ------ Output Format ------ For each test case, output on a new line the answer — YES if Tom can water a positive number of plants strictly before sunset, and NO otherwise. Each character of the output may be printed in either lowercase or uppercase, i.e., the strings Yes, YES, yes, and YeS will all be treated as equivalent. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 ------ Sample Input 1 ------ 3 15 30 25 ------ Sample Output 1 ------ Yes Yes No ------ Explanation 1 ------ Test case 1: Tom has 15 minutes of free time, which is enough to water one plant (10 minutes). Hence, the answer is Yes. Test case 2: Tom has 30 minutes of free time, which is enough to water three plants (30 minutes), but he must stop strictly before 30. Hence, watering two plants (20 minutes) is possible, and the answer is Yes. Test case 3: Tom has 25 minutes of free time. He can water two plants (20 minutes), but this leaves insufficient time to water a third plant (30 minutes). Hence, the answer is No.","solution":"def can_water_plants(minutes): Determines if Tom can water at least one plant before sunset given the number of minutes left. Args: minutes (int): Number of minutes left before sunset. Returns: str: \\"YES\\" if Tom can water at least one plant, \\"NO\\" otherwise. # Each plant takes exactly 10 minutes to water # Tom needs at least 10 minutes to water one plant if minutes > 10: return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): Processes multiple test cases for determining if Tom can water his plants before sunset. Args: T (int): Number of test cases. test_cases (list): List containing the number of minutes for each test case. Returns: list: List of results for each test case. results = [] for minutes in test_cases: results.append(can_water_plants(minutes)) return results"},{"question":"You are given a row of n houses, numbered from 1 to n, positioned in random order. Each house has a unique integer label between 1 and n. We want to move each house to its correct labeled position in the row. In one move you can pick any house and swap its position with another house. Write a program to determine the minimum number of swaps required to sort the houses in ascending order by their labels. -----Input----- The first line of the input contains integer n (1 ≤ n ≤ 100,000) — the number of houses. The second line contains n integers a_{i} (1 ≤ a_{i} ≤ n, a_{i} ≠ a_{j} if i ≠ j) — the labels of the houses in the initial order. -----Output----- Print a single integer — the minimum number of swaps needed to sort the houses. -----Examples----- Input 5 4 3 1 2 5 Output 3 Input 4 4 3 2 1 Output 2 -----Note----- In the first sample, the house with label 4 should swap with the house labeled 1, then the house with label 3 should swap with the house labeled 2, and finally, the house labeled 1 should swap with the house labeled 2. In the second sample, the house with label 4 should swap with the house labeled 1, then the house with label 3 should swap with the house labeled 2.","solution":"def min_swaps_to_sort_houses(houses): Returns the minimum number of swaps required to sort the houses in ascending order by their labels. n = len(houses) houses_with_index = list(enumerate(houses)) houses_with_index.sort(key=lambda x: x[1]) visited = [False] * n swap_count = 0 for i in range(n): if visited[i] or houses_with_index[i][0] == i: continue cycle_length = 0 j = i while not visited[j]: visited[j] = True j = houses_with_index[j][0] cycle_length += 1 if cycle_length > 1: swap_count += (cycle_length - 1) return swap_count"},{"question":"An e-commerce platform needs a system to manage active user sessions efficiently. You are required to create a user session manager that tracks user activity and removes inactive sessions after a certain period of inactivity. You are provided with three types of operations: 1. **Login (userId)**: Marks the start of a user\'s session. If the user is already logged in, this operation should refresh the session. 2. **Logout (userId)**: Ends the user\'s session. 3. **Tick (time)**: Advances the system time by a specified number of time units. Any session that has been inactive for a period longer than or equal to a specified timeout should be ended when time advances. The system must support the following functions: - **login(userId, time)**: Where `userId` is a unique identifier for the user, and `time` is the current time unit. - **logout(userId)**: Ends the session for the specified `userId`. - **tick(time)**: Advances the current time by `time` units and checks for any sessions that need to be logged out due to inactivity. - **getActiveSessions()**: Returns a list of currently active user IDs, sorted in ascending order. Assume the timeout period is 5 time units. Implement the `SessionManager` class with these methods. -----Input----- - Sequential operations with their details. -----Output----- - A list of active user sessions when `getActiveSessions` is called. -----Examples----- Input: [ (\\"login\\", \\"user1\\", 1), (\\"login\\", \\"user2\\", 2), (\\"tick\\", 5), (\\"getActiveSessions\\"), (\\"login\\", \\"user3\\", 10), (\\"tick\\", 5), (\\"getActiveSessions\\"), (\\"logout\\", \\"user2\\"), (\\"getActiveSessions\\") ] Output: [ [\\"user1\\", \\"user2\\"], [\\"user3\\"], [\\"user3\\"] ] -----Explanation----- 1. At time 1, \\"user1\\" logs in. (active sessions: [\\"user1\\"]) 2. At time 2, \\"user2\\" logs in. (active sessions: [\\"user1\\", \\"user2\\"]) 3. At time 7 (after a tick of 5 units), the active sessions are [\\"user1\\", \\"user2\\"] as they haven\'t been inactive for 5 units. 4. At time 10, \\"user3\\" logs in. 5. At time 15 (after another tick of 5 units), \\"user1\\" and \\"user2\\" sessions have expired due to inactivity. The only active session is \\"user3\\". 6. \\"user2\\" logs out, but it doesn\'t affect the active sessions as \\"user2\\" was already inactive. 7. The final active session is still [\\"user3\\"].","solution":"class SessionManager: def __init__(self, timeout=5): self.timeout = timeout self.current_time = 0 self.sessions = {} def login(self, userId, time): self._cleanup(time) self.sessions[userId] = time def logout(self, userId): if userId in self.sessions: del self.sessions[userId] def tick(self, time): self.current_time += time self._cleanup(self.current_time) def getActiveSessions(self): return sorted(self.sessions.keys()) def _cleanup(self, current_time): inactive_users = [user for user, last_active in self.sessions.items() if current_time - last_active >= self.timeout] for user in inactive_users: del self.sessions[user]"},{"question":"You are given `n` switches and `m` lamps. Each lamp can be toggled on or off by flipping specific switches associated with that lamp. Each switch may be connected to multiple lamps, and each lamp may be controlled by multiple switches. The goal is to determine if it is possible to turn on all the lamps by flipping some or all of the switches any number of times. Input The input is given in the following format: n m s1 l1_1 l1_2 ... l1_k1 s2 l2_1 l2_2 ... l2_k2 : sn ln_1 ln_2 ... ln_kn The first line provides the number of switches `n` (1 ≤ n ≤ 1000) and the number of lamps `m` (1 ≤ m ≤ 1000). Each of the subsequent `n` lines describes a switch and the lamps it toggles. The first integer on each line indicates the number of lamps `k` that switch toggles, followed by `k` integers, each representing a lamp ID (ranging from 1 to m) that the switch affects. Output Output \\"yes\\" if it is possible to turn on all the lamps by flipping some or all of the switches any number of times, and \\"no\\" otherwise. Examples Input 3 2 1 1 1 2 2 1 2 Output yes Input 2 3 2 1 3 1 2 Output no","solution":"def can_turn_on_all_lamps(n, m, switches): Determines if it is possible to turn on all the lamps by flipping some or all of the switches any number of times. :param n: Number of switches :param m: Number of lamps :param switches: List of lists where each sublist represents the lamps a switch toggles :return: \\"yes\\" if it is possible to turn on all lamps, \\"no\\" otherwise from collections import defaultdict, deque # Create a graph representation of the switches and lamps connections graph = defaultdict(list) all_lamps = set(range(1, m + 1)) for sw in switches: for lamp in sw: graph[lamp].append(sw) # Perform a BFS to check if all nodes are connected visited_lamps = set() # Start BFS from the first lamp present in the list of connections start = next(iter(all_lamps)) queue = deque([start]) while queue: current = queue.popleft() if current not in visited_lamps: visited_lamps.add(current) for sw in graph[current]: for lamp in sw: if lamp not in visited_lamps: queue.append(lamp) # Check if we have visited all lamps return \\"yes\\" if visited_lamps == all_lamps else \\"no\\""},{"question":"You are given a string S of length N consisting of lowercase Latin letters. Your task is to determine the length of the longest substring of S in which all the characters are distinct. ------ Input Format ------ - The first line contains T - the number of test cases. - The first line of each test case contains N - the length of the string S. - The second line of each test case contains a string S of length N. ------ Output Format ------ For each test case, output the length of the longest substring of S in which all the characters are distinct. ------ Constraints ------ 1 ≤T ≤10^{5} 1 ≤N ≤10^{5} sum N over all test cases is at most 10^{6} ----- Sample Input 1 ------ 3 7 abcabcbb 5 bbbbb 8 pwwkew ----- Sample Output 1 ------ 3 1 3 ----- Explanation 1 ------ - Test case 1: The longest substring with all distinct characters is \\"abc\\" with length 3. - Test case 2: The longest substring with all distinct characters is \\"b\\" with length 1. - Test case 3: The longest substring with all distinct characters is \\"wke\\" with length 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_unique_substring_length(s): Returns the length of the longest substring with all distinct characters. n = len(s) longest = 0 start = 0 char_index = {} for end in range(n): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end longest = max(longest, end - start + 1) return longest def process_test_cases(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] results.append(longest_unique_substring_length(s)) return results"},{"question":"You are given a list of integers representing the size of packets of candies. Your objective is to distribute these packets into K children such that each child gets at least one packet and the maximum difference between the total number of candies received by any two children is minimized. -----Constraints----- - All values in the input are integers. - 1 ≤ N ≤ 10^5 (N is the number of packets) - 1 ≤ K ≤ N (K is the number of children) - 1 ≤ candies_i ≤ 10^9 (candies_i is the number of candies in the i-th packet) -----Input----- Input is given from Standard Input in the following format: N K candies_1 candies_2 ... candies_N -----Output----- Print the minimized maximum difference in the number of candies received by any two children after distribution. -----Sample Input----- 7 3 8 1 7 4 9 2 3 -----Sample Output----- 2 Explanation: One way to distribute the packets is as follows: - Child 1 gets packets with 8 and 3 candies. - Child 2 gets packets with 7 and 4 candies. - Child 3 gets packets with 9, 2, and 1 candies. The number of candies each child receives are 11, 11, and 12. The maximum difference between any two children is 12 - 11 = 1. However, the minimum possible maximum difference in this case is 2.","solution":"def distribute_candies(N, K, candies): Distributes packets of candies into K children such that the maximum difference between the total number of candies received by any two children is minimized. :param N: int - The number of packets. :param K: int - The number of children. :param candies: List[int] - List of integers representing the number of candies in each packet. :return: int - The minimized maximum difference in the number of candies received. candies.sort() # Function to check if a given max_diff is feasible def feasible(max_diff): count = 1 # Start with first child min_candy = candies[0] # Minimum candy a child can get for i in range(1, N): if (candies[i] - min_candy) > max_diff: count += 1 min_candy = candies[i] if count > K: return False return True left, right = 0, candies[-1] - candies[0] result = right while left <= right: mid = (left + right) // 2 if feasible(mid): result = mid right = mid - 1 else: left = mid + 1 return result # Example usage: # N = 7 # K = 3 # candies = [8, 1, 7, 4, 9, 2, 3] # print(distribute_candies(N, K, candies))"},{"question":"Two software engineers, Alice and Bob, are working on a collaboration platform that involves scheduling multiple events across different time zones. To make the process easier, they need a function that can take a list of start and end times for events, and merge any overlapping events. Each event is represented by an interval of integers, where the first integer is the start time, and the second integer is the end time. You are given a list of such intervals where each element is a tuple [start, end]. Write a function that takes this list of intervals and merges all overlapping intervals. The output should be a list of the merged intervals sorted by their start time. -----Input:------ - The first line contains a single integer T denoting the number of test cases. - Each test case starts with an integer N, the number of intervals. - The next N lines contain two space-separated integers representing the start and end of each interval. -----Output:------ For each test case, output the merged intervals in a single line, each interval represented as (start, end) and intervals separated by spaces. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^4 - 0 leq start, end leq 10^7 -----Sample input:----- 1 4 1 3 2 4 5 7 6 8 -----Sample output:----- (1 4) (5 8) -----Explanation:------ In the given test case, the intervals [1, 3] and [2, 4] overlap, so they are merged into [1, 4]. Similarly, the intervals [5, 7] and [6, 8] overlap, so they are merged into [5, 8].","solution":"def merge_intervals(intervals): Merges overlapping intervals. Args: intervals (list of tuple): List of tuples where each tuple contains two integers representing the start and end of an interval. Returns: list of tuple: List of merged intervals. if not intervals: return [] # Sort intervals by start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1] = (merged[-1][0], max(merged[-1][1], interval[1])) return merged def process_test_cases(test_cases): results = [] for intervals in test_cases: merged_intervals = merge_intervals(intervals) formatted_intervals = \\" \\".join(f\\"({start} {end})\\" for start, end in merged_intervals) results.append(formatted_intervals) return results"},{"question":"Alice and Bob are playing a game with an array of n integers. They take turns to play with Alice always going first. In each turn, the player must choose a non-empty subarray of the integers and delete it. The player who cannot make a move (because there are no integers left in the array to choose a subarray from) loses the game. Alice and Bob play optimally to win. Your task is to determine the winner given the initial configuration of the array. Input: The first line contains an integer n (1 ≤ n ≤ 2 · 10^5) — the number of elements in the array. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the array. Output: Print \\"Alice\\" if Alice will win the game, otherwise, print \\"Bob\\". Example: Input: 4 1 2 2 1 Output: Alice Input: 3 1 1 1 Output: Bob","solution":"def determine_winner(n, array): if n % 2 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"A famous company has a building with \'n\' floors numbered from 1 to n. Each floor has a certain number of rooms. The rooms on a floor are connected by a straight corridor such that one can move from any room to the next room or previous room on the same floor. Additionally, there are elevators connecting some specific rooms of adjacent floors, allowing movement between these rooms. You need to find the shortest path to move from room \'s\' on floor 1 to room \'t\' on floor \'n\'. Input The first line contains two integers \'n\' (1 ≤ n ≤ 1000) and \'m\' (1 ≤ m ≤ 10000) — the number of floors and the number of elevators, respectively. The next line contains \'n\' integers, where the i-th integer \'ri\' (1 ≤ ri ≤ 1000) represents the number of rooms on the i-th floor. Then \'m\' lines follow, each containing four integers \'f1\', \'r1\', \'f2\', and \'r2\' (1 ≤ f1, f2 ≤ n, 1 ≤ r1 ≤ rf1, 1 ≤ r2 ≤ rf2) indicating that there is an elevator connecting room \'r1\' on floor \'f1\' to room \'r2\' on floor \'f2\'. The last line contains two integers \'s\' (1 ≤ s ≤ r1) and \'t\' (1 ≤ t ≤ rn) — the room on floor 1 you start from and the room on the floor \'n\' you need to reach. Output Print the minimum number of moves needed to get from room \'s\' on floor 1 to room \'t\' on floor \'n\'. If it is impossible, print -1. Example Input 4 5 4 3 2 5 1 1 2 2 2 2 3 1 3 1 4 3 4 3 1 4 2 1 3 2 1 2 Output 4","solution":"from collections import deque, defaultdict def find_shortest_path(n, m, floors, elevators, start_room, end_room): def get_room_id(floor, room): return sum(floors[:floor - 1]) + room - 1 total_rooms = sum(floors) graph = defaultdict(list) for f1, r1, f2, r2 in elevators: room1 = get_room_id(f1, r1) room2 = get_room_id(f2, r2) graph[room1].append(room2) graph[room2].append(room1) start = get_room_id(1, start_room) end = get_room_id(n, end_room) queue = deque([(start, 0)]) visited = [False] * total_rooms visited[start] = True while queue: current_room, moves = queue.popleft() if current_room == end: return moves floor = next(i for i, r in enumerate(floors) if sum(floors[:i]) <= current_room < sum(floors[:i + 1])) room_on_floor = current_room - sum(floors[:floor]) if room_on_floor > 0 and not visited[current_room - 1]: visited[current_room - 1] = True queue.append((current_room - 1, moves + 1)) if room_on_floor < floors[floor] - 1 and not visited[current_room + 1]: visited[current_room + 1] = True queue.append((current_room + 1, moves + 1)) for connected_room in graph[current_room]: if not visited[connected_room]: visited[connected_room] = True queue.append((connected_room, moves + 1)) return -1"},{"question":"You are given an array of N integers, and two more integers K and S. You need to find the minimum possible sum of the array after performing at most K operations. In each operation, you can select any element and reduce it by any integer amount (the reduced amount can be zero or more but not more than the selected element itself) such that the sum of elements in the array changes minimally. However, the constraint is that after all operations, the sum should be less than or equal to S. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers N, K, and S. - The second line contains N space-separated integers representing the array. -----Output----- For each test case, print a single line containing one integer — the minimum possible sum of the array after performing at most K operations such that the sum is less than or equal to S. If it\'s not possible, print -1. -----Constraints----- - 1 le T le 1000 - 1 le N le 1000 - 1 le text{elements of the array} le 1000 - 0 le S le text{sum of elements in the array} -----Example Input----- 2 5 2 10 3 1 4 1 5 3 1 4 10 10 10 -----Example Output----- 10 -1","solution":"def minimum_possible_sum(test_cases): results = [] for case in test_cases: N, K, S = case[\'N\'], case[\'K\'], case[\'S\'] array = case[\'array\'] current_sum = sum(array) if current_sum <= S: results.append(current_sum) continue array.sort(reverse=True) # Sort array in descending order to maximize value reduction for i in range(min(K, N)): current_sum -= array[i] if current_sum <= S: results.append(S) break else: if current_sum <= S: results.append(current_sum) else: results.append(-1) return results # Function to format the input for the test cases def process_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, K, S = map(int, lines[index].split()) array = list(map(int, lines[index + 1].split())) test_cases.append({\'N\': N, \'K\': K, \'S\': S, \'array\': array}) index += 2 return test_cases # Function to format the output def format_output(results): return \'n\'.join(map(str, results))"},{"question":"A young software engineer, Sam, is working on a game engine and she needs to implement a dynamic game leaderboard that can efficiently handle multiple operations. The leaderboard supports two types of operations: 1. **Add**: Add a new player with a specific score to the leaderboard. If the player already exists, their score is updated. 2. **Top**: Retrieve the sum of the scores of the top `K` players on the leaderboard. Your task is to write a program to perform these operations efficiently. ------ Input Format ------ - First line will contain an integer `Q`, the number of operations. - The next `Q` lines each contain an operation either of the form `Add P S` where `P` is the player ID and `S` is the player\'s score, or of the form `Top K` where `K` is the number of top players to sum the scores of. ------ Output Format ------ - For each `Top K` operation, output the sum of the scores of the top `K` players. ------ Constraints ------ - `1 ≤ Q ≤ 100000` - In an `Add` operation: `1 ≤ P ≤ 10^9` and `1 ≤ S ≤ 10^9` - In a `Top` operation: `1 ≤ K ≤ 10^5` ----- Sample Input 1 ------ 7 Add 1 20 Add 2 30 Top 1 Add 1 50 Top 2 Add 3 60 Top 2 ----- Sample Output 1 ------ 30 80 110 ----- Explanation 1 ------ 1. Adding player `1` with a score of `20`. 2. Adding player `2` with a score of `30`. 3. `Top 1` operation: the top player is `2` with a score of `30`. 4. Updating player `1`\'s score to `50`. 5. `Top 2` operation: the top two players are `1` with `50` and `2` with `30`, so the sum is `80`. 6. Adding player `3` with a score of `60`. 7. `Top 2` operation: the top two players are `3` with `60` and `1` with `50`, so the sum is `110`.","solution":"import heapq class Leaderboard: def __init__(self): self.scores = {} self.top_heap = [] self.dirty = False def add(self, player_id, score): # Update the score for the given player if player_id in self.scores: self.scores[player_id] = score self.dirty = True else: self.scores[player_id] = score heapq.heappush(self.top_heap, (score, player_id)) def top(self, K): if self.dirty: # Rebuild the heap with updated scores self.top_heap = [(score, player_id) for player_id, score in self.scores.items()] heapq.heapify(self.top_heap) self.dirty = False # Get the top K elements top_scores = heapq.nlargest(K, self.top_heap) return sum(score for score, player_id in top_scores) def dynamic_leaderboard(operations): leaderboard = Leaderboard() results = [] for operation in operations: command = operation.split() if command[0] == \\"Add\\": player_id = int(command[1]) score = int(command[2]) leaderboard.add(player_id, score) elif command[0] == \\"Top\\": K = int(command[1]) results.append(leaderboard.top(K)) return results"},{"question":"You are given a matrix with `N` rows and `M` columns. Each element of the matrix is an integer. Your task is to find a submatrix of smallest possible size that contains all the unique integers present in the matrix. Report the size of this submatrix, i.e., its number of rows and columns, as a pair of integers. For instance, if the matrix has 5 rows and 5 columns, the submatrix could be any contiguous subset of rows and columns from the original matrix. Constraints * 1 ≤ N, M ≤ 100 * Matrix elements are integers within the range 1 to 100. Input The input is given from Standard Input in the following format: N M a_{1,1} a_{1,2} ... a_{1,M} a_{2,1} a_{2,2} ... a_{2,M} : a_{N,1} a_{N,2} ... a_{N,M} Output Print two integers representing the number of rows and columns of the smallest submatrix containing all unique integers. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 3 3 Input 4 5 1 2 3 4 5 1 2 2 2 6 1 8 9 9 9 7 7 7 7 7 Output 4 5","solution":"def smallest_submatrix_size(matrix): Returns the size of the smallest submatrix that contains all unique integers present in the matrix. from collections import defaultdict N, M = len(matrix), len(matrix[0]) unique_elements = set() for i in range(N): for j in range(M): unique_elements.add(matrix[i][j]) unique_count = len(unique_elements) def contains_all_elements(submatrix): submatrix_elements = set() for row in submatrix: submatrix_elements.update(row) return len(submatrix_elements) == unique_count for r_sz in range(1, N+1): for c_sz in range(1, M+1): for i in range(N - r_sz + 1): for j in range(M - c_sz + 1): submatrix = [matrix[x][j:j+c_sz] for x in range(i, i+r_sz)] if contains_all_elements(submatrix): return r_sz, c_sz return N, M # Fallback (although we expect the function to return before this point) # Example usage: N, M = 3, 3 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9], ] print(smallest_submatrix_size(matrix)) # Output should be (3, 3)"},{"question":"Peter is a competitive programmer who participates in many programming contests. After solving several problems, he realized that he often made mistakes with bracket sequences. He decided to write a program that helps him to check if a sequence of brackets is valid. A sequence of brackets is considered valid if: 1. It is an empty sequence. 2. It can be written as AB (A concatenated with B), where A and B are valid sequences. 3. It can be written as (A), [A], or {A}, where A is a valid sequence. Your task is to write a program that checks if a given sequence of brackets is valid. Input The input consists of a single line containing a sequence of brackets. The sequence length does not exceed 100 characters. Output Print \\"Valid\\" if the sequence of brackets is valid, otherwise print \\"Invalid\\". Examples Input ([]) Output Valid Input {[()()]} Output Valid Input {[(])} Output Invalid Input ((()} Output Invalid","solution":"def is_valid_bracket_sequence(sequence): Check if a given sequence of brackets is valid. :param sequence: str :return: bool stack = [] bracket_map = {\\")\\": \\"(\\", \\"]\\": \\"[\\", \\"}\\": \\"{\\"} for char in sequence: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack def check_bracket_sequence(sequence): Checks if the given bracket sequence is valid and prints the result. :param sequence: str if is_valid_bracket_sequence(sequence): print(\\"Valid\\") else: print(\\"Invalid\\")"},{"question":"Description: Given an array of integers, return an array where each element at index `i` is the product of all the integers in the original array except the one at `i`. # Examples ``` productArray([1, 2, 3, 4]) === [24, 12, 8, 6] productArray([1, 2, 0, 4]) === [0, 0, 8, 0] productArray([0, 0, 0, 2]) === [0, 0, 0, 0] productArray([-1, 1, 0, -3, 3]) === [0, 0, 9, 0, 0] ``` # Constraints - The input array will always have at least two integers. - You may not use the division operator. - Optimize your solution to run in O(n) time where possible.","solution":"def productArray(nums): Returns an array where each element at index `i` is the product of all the elements in the input array except the one at `i`. length = len(nums) if length < 2: # Edge case: if the array has less than 2 elements, return an empty array return [] # Initialize arrays to hold products left_products = [1] * length right_products = [1] * length result = [1] * length # Fill left_products array for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products array for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Fill result array by multiplying left_products and right_products for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Jason is a budding data scientist who is fascinated with binary trees. He wants to create a binary tree structure where each node contains a unique integer. Inspired by in-order tree traversal, Jason came up with a custom method to populate the tree and wants your help in implementing this. He has the following rules for his custom binary tree: 1. The root of the tree should contain the smallest integer. 2. For each node, its left child should contain the smallest available integer greater than the node\'s value. 3. The right child of a node should contain the smallest available integer greater than both the node\'s value and the value of the left child. Given an integer `n`, write a function that constructs the binary tree with `n` unique integers [1,2,...,n] based on Jason\'s rules. You need to perform an in-order traversal of the resulting tree and return the values encountered as a list. -----Input----- The first and only line contains an integer `n` (1 le n le 10^5). -----Output----- Output a list of integers which represents the in-order traversal of the binary tree constructed following Jason\'s rules. -----Examples----- Input 3 Output [1, 2, 3] Input 5 Output [1, 2, 3, 4, 5] ---Function Signature--- def custom_binary_tree_inorder(n: int) -> List[int]:","solution":"from typing import List def custom_binary_tree_inorder(n: int) -> List[int]: Constructs a binary tree according to the specific rules and returns the in-order traversal of the tree. # Nodes values from 1 to n will just be ordered in in-order traversal # due to the specific rules of tree construction return list(range(1, n + 1))"},{"question":"You are given an integer `n`. You need to find the smallest integer `m` such that the sum of digits of `m` is equal to `n` and `m` is greater than or equal to `n`. If such a number does not exist, return -1. Write a function `findSmallestNumber()` that takes the integer `n` as input and returns the smallest integer `m` that satisfies the conditions. Example 1: Input: n = 10 Output: 19 Explanation: The sum of digits of 19 is 1 + 9 = 10, and 19 is greater than 10. Example 2: Input: n = 5 Output: 5 Explanation: The number 5 itself satisfies the condition since the sum of digits of 5 is 5 and 5 is equal to 5. Example 3: Input: n = 27 Output: 999 Explanation: The sum of digits of 999 is 9 + 9 + 9 = 27, and 999 is greater than 27. Your Task: You do not need to read input or print anything. Your task is to complete the function `findSmallestNumber()` which takes an integer `n` as an input parameter and returns the smallest integer `m` that satisfies the given conditions. Expected Time Complexity: O(1) for each number tested Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 10^6","solution":"def sum_of_digits(x): Calculate the sum of digits of the integer x. return sum(int(digit) for digit in str(x)) def findSmallestNumber(n): Find the smallest integer m such that the sum of the digits of m is equal to n and m is greater than or equal to n. If no such number exists, return -1. m = n while sum_of_digits(m) != n: m += 1 if m > 10**6: # To handle the constraint efficiently and ensure there is no infinite loop return -1 return m"},{"question":"You are given an array of integers `heights` representing the heights of buildings, where the `i`-th building is located at position `i`. Each building is `1` unit wide. Find two buildings such that together with the x-axis they form a container, which can hold the most water. Return the amount of water it can hold. The container cannot be slanted; it must be flat in relation to the x-axis. Example 1: Input: heights = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The maximum amount of water the container can hold is between the buildings at position 1 and position 8 (height = 7), which forms a container of width 7 - 1 = 6 and height min(8, 7) = 7. So, the maximum water the container can hold is 7 * 7 = 49 units of water. Example 2: Input: heights = [1,1] Output: 1 Explanation: The only container possible is formed between the two buildings with height 1, so the water it can hold is 1 unit. Example 3: Input: heights = [4,3,2,1,4] Output: 16 Explanation: The container can be formed between the buildings at position 0 and position 4 with height 4, holding 4 units of water. Constraints: 2 <= heights.length <= 10^5 0 <= heights[i] <= 10^4","solution":"def max_area(heights): Returns the maximum amount of water that can be contained. n = len(heights) left = 0 right = n - 1 max_water = 0 while left < right: # Calculate the current area width = right - left height = min(heights[left], heights[right]) current_area = width * height max_water = max(max_water, current_area) # Move the pointers if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"The Green Frog is exploring the field of data structures and recently stumbled upon a fascinating concept called \\"priority queues\\". A priority queue is a special type of queue in which elements are removed based on priority rather than the order in which they arrive. The frog learned that priority queues can be efficiently implemented using heaps. However, to master priority queues, the frog needs to practice a basic yet powerful operation: the merging of two heaps. Given two binary heaps (both max-heaps), implement a program that merges them into a single max-heap. A max-heap is a binary tree where each parent node is greater than or equal to its children. The merging process should maintain the properties of the max-heap. The frog is provided with two heaps represented as arrays. Your task is to merge these heaps and output the resultant max-heap as an array. Implement the `merge_heaps` function to achieve this. Input The first line of input contains an integer t (1 ≤ t ≤ 100) representing the number of test cases. Each test case is described as follows: * The first line contains an integer n1 (1 ≤ n1 ≤ 10^5), the size of the first heap. * The second line contains n1 integers representing the elements of the first heap. * The third line contains an integer n2 (1 ≤ n2 ≤ 10^5), the size of the second heap. * The fourth line contains n2 integers representing the elements of the second heap. It is guaranteed that all elements of the input arrays respect the max-heap property. Output For each test case, output a single line containing the elements of the resultant merged max-heap in array form. The resultant array should also respect the max-heap property. Example Input 2 3 10 5 3 2 9 2 4 20 15 12 10 3 16 8 5 Output 10 9 3 5 2 20 16 12 10 15 8 5 Note In the first test case, merging the heaps [10, 5, 3] and [9, 2] results in [10, 9, 3, 5, 2]. In the second test case, merging [20, 15, 12, 10] and [16, 8, 5] results in [20, 16, 12, 10, 15, 8, 5]. The merged heaps should maintain the max-heap property.","solution":"import heapq def merge_heaps(heap1, heap2): Merges two max-heaps into a single max-heap. combined = heap1 + heap2 heapq._heapify_max(combined) return combined def merge_all_heaps(test_cases): results = [] for heap1, heap2 in test_cases: result = merge_heaps(heap1, heap2) results.append(result) return results"},{"question":"A company is running a promotional campaign to distribute free goodies to its employees. Each employee can choose from a variety of goodies available. However, the company wants to ensure that all employees receive unique sets of goodies, and each set must be of exactly `n` items. The company has a large assortment of goodies, represented as an array of strings. Write a function to find all possible unique sets of `n` items from the available assortment of goodies. Input: - An integer `n` (1 ≤ n ≤ 10) representing the number of items each set should contain. - An array of strings representing the assortment of goodies (1 ≤ assortment length ≤ 20). Output: - A list of sets, where each set is a list of `n` unique strings from the assortment. Example Input: ``` n = 2 assortment = [\\"pen\\", \\"notebook\\", \\"mug\\", \\"sticker\\"] Output: [ [\\"pen\\", \\"notebook\\"], [\\"pen\\", \\"mug\\"], [\\"pen\\", \\"sticker\\"], [\\"notebook\\", \\"mug\\"], [\\"notebook\\", \\"sticker\\"], [\\"mug\\", \\"sticker\\"] ] ``` Note: The order of sets in the output list does not matter, but the internal order of items in each set should be in lexicographical order.","solution":"from itertools import combinations def find_unique_sets(n, assortment): Returns all possible unique sets of `n` items from the assortment. Parameters: n (int): Number of items each set should contain. assortment (list): List of goodies available for selection. Returns: list: A list of lists where each sublist contains `n` unique strings from the assortment. # Sort the assortment list to ensure that internal order of items in each set is lexicographical sorted_assortment = sorted(assortment) # Generate all combinations of the items in the sorted list of the given length result = [list(comb) for comb in combinations(sorted_assortment, n)] return result"},{"question":"You are given a list of integers representing the ages of family members. The list contains positive integers only. Your task is to determine if the family has more minors (i.e., individuals under the age of 18) than adults (i.e., individuals aged 18 and above). Design a function that accepts this list and returns: ~~~if-not:nasm,racket - `True` if there are more minors than adults. - `False` otherwise. ~~~ ~~~if:racket - `#t` if there are more minors than adults. - `#f` otherwise. ~~~ ~~~if:nasm - `1` if there are more minors than adults. - `0` otherwise. ~~~ # Note: You can assume that the list will always have at least one member.","solution":"def more_minors_than_adults(ages): Determine if there are more minors (under 18) than adults (18 and above). Params: ages (list of int): List of ages of family members. Returns: bool: True if there are more minors than adults, False otherwise. minors = sum(1 for age in ages if age < 18) adults = sum(1 for age in ages if age >= 18) return minors > adults"},{"question":"Given an integer array, return an array that contains the squares of each number, sorted in non-decreasing order. For example: * `sortedSquares([-4, -1, 0, 3, 10]) = [0, 1, 9, 16, 100]` * `sortedSquares([-7, -3, 2, 3, 11]) = [4, 9, 9, 49, 121]` The input will be a non-empty array of integers.","solution":"def sorted_squares(arr): Given an integer array, return an array that contains the squares of each number, sorted in non-decreasing order. :param arr: List[int] - Input list of integers. :return: List[int] - Sorted list of squared integers. return sorted(x * x for x in arr)"},{"question":"You are given a list of integers representing the heights of students in a line. The heights are represented by an array. A photograph is to be taken such that each student must appear taller than the one immediately in front of them. Your task is to determine the minimum number of students who need to be removed to achieve this condition. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of students. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000) representing the heights of the students in the line. Output Output a single integer — the minimum number of students who need to be removed. Examples Input 5 1 2 3 4 5 Output 0 Input 6 4 3 2 6 5 7 Output 3 Note In the first sample, all students are already in increasing height order, so no students need to be removed. In the second sample, by removing students with heights 4, 3 and 2, we get the list [6, 5, 7], which can further be reduced to [5, 7] to satisfy the condition. The minimum number of removals required to make the remaining heights strictly increasing is 3.","solution":"def min_students_to_remove(n, heights): Determines the minimum number of students who need to be removed to make the list of student heights strictly increasing. Args: n (int): The number of students. heights (list of int): The heights of the students. Returns: int: The minimum number of students to remove. if n == 0: return 0 from bisect import bisect_left # LIS array lis = [] for height in heights: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return n - len(lis)"},{"question":"Write a function that determines whether a given set of 3 sides can form a valid triangle. The function should take three integers as input and return a boolean value. A triangle is valid if the sum of any two sides is greater than the third side. For example, `is_valid_triangle(3, 4, 5)` should return `True`, while `is_valid_triangle(1, 1, 2)` should return `False`. ~~~if:python ```python def is_valid_triangle(a, b, c): # Your code here pass # Example Usage: print(is_valid_triangle(3, 4, 5)) # Output: True print(is_valid_triangle(1, 1, 2)) # Output: False ``` ~~~","solution":"def is_valid_triangle(a, b, c): Determines if the given sides can form a valid triangle. A triangle is valid if the sum of any two sides is greater than the third side. Args: a (int): the length of the first side b (int): the length of the second side c (int): the length of the third side Returns: bool: True if the sides form a valid triangle, False otherwise return a + b > c and a + c > b and b + c > a"},{"question":"A group of archaeologists is studying an ancient artifact with a complex, encrypted message. The message is represented as a string consisting of lowercase alphabetical characters. The archaeologists have discovered that the message can be deciphered by applying a series of transformations to the string. Each transformation involves reversing a substring of the string. The challenge is to determine whether it is possible to transform the given string into a lexicographically smallest string by applying a finite number of substring reverse operations. # Input The input consists of a single string s (1 ≤ |s| ≤ 10^5) containing lowercase English letters. # Output Print \\"YES\\" if it is possible to transform the string into its lexicographically smallest permutation by applying a sequence of substring reverse operations. Otherwise, print \\"NO\\". # Examples Input ``` ba ``` Output ``` YES ``` Input ``` cba ``` Output ``` YES ``` Input ``` dcba ``` Output ``` YES ``` Input ``` algorithm ``` Output ``` NO ``` # Note In the first sample, you can reverse the entire string \\"ba\\" -> \\"ab\\" which is lexicographically smallest. In the second sample, one way is to reverse the substring \\"ba\\" to get \\"cab\\", and then reverse the entire string \\"cab\\" -> \\"abc\\". In the third sample, you can reverse the entire string \\"dcba\\" -> \\"abcd\\". In the fourth sample, it is not possible to apply a series of substring reverse operations to transform \\"algorithm\\" into its lexicographically smallest string \\"aghilmoqrt\\".","solution":"def can_transform_to_smallest(s): Determine if it is possible to transform the given string into its lexicographically smallest permutation by applying a sequence of substring reverse operations. return s == \'\'.join(sorted(s)) def main(): import sys input = sys.stdin.read().strip() print(\\"YES\\" if can_transform_to_smallest(input) else \\"NO\\") if __name__ == \\"__main__\\": main()"},{"question":"# Instructions Implement a function that takes in a list of integers representing the dimensions of rectangular plots of land and returns the maximum area of any rectangle that can be formed with the given dimensions. Each dimension in the list specifies either the width or height of a rectangle. You must pair these dimensions to form rectangles. The dimensions will be given in pairs as a 2D array, where each element is a pair of integers representing the width and height of a rectangle. For example, given the following list of dimensions: ``` [[3, 5], [2, 3], [5, 6], [3, 4], [4, 5]] ``` Your task is to determine the maximum rectangular area that can be formed using these dimensions. Example Input and Output: ``` Input: [[3, 5], [2, 3], [5, 6], [3, 4], [4, 5]] Output: 30 ``` Explanation: The rectangle with width 5 and height 6 has the maximum area of 30. Take note of the following: - Your function should handle edge cases, such as when the input list is empty or contains only one pair of dimensions. You may assume that each element in the list of dimensions contains two positive integers.","solution":"def max_rectangle_area(dimensions): Returns the maximum area of any rectangle that can be formed with the given dimensions. Each dimension in the list specifies the width and height of a rectangle. :param dimensions: List of pairs of integers representing the width and height of a rectangle. :return: Maximum rectangular area. if not dimensions: return 0 max_area = 0 for width, height in dimensions: area = width * height if area > max_area: max_area = area return max_area"},{"question":"During a series of attempts to crack a mysterious code, you discovered an interesting pattern on an ancient encrypted tablet. The pattern is described as follows: There is a sequence of numbers, and for each number, you are to determine if it is possible to rearrange its digits such that the resulting number is divisible by 3. A number is divisible by 3 if the sum of its digits is divisible by 3. You need to write a program that helps decipher the messages by checking whether each number in a given list can be rearranged to form a number divisible by 3. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of numbers to analyze. Each of the next n lines contains a single number s (a string of digits with a length between 1 and 1000 inclusive). Output Output n lines. For each number in the input, print YES if its digits can be rearranged to form a number that is divisible by 3, or NO otherwise. Examples Input 3 102 123 111 Output YES YES YES Input 2 456 789 Output YES YES Explanation For the first example: - For the number \\"102\\", the sum of its digits is 1 + 0 + 2 = 3, which is divisible by 3. - For the number \\"123\\", the sum of its digits is 1 + 2 + 3 = 6, which is divisible by 3. - For the number \\"111\\", the sum of its digits is 1 + 1 + 1 = 3, which is divisible by 3. For the second example: - For the number \\"456\\", the sum of its digits is 4 + 5 + 6 = 15, which is divisible by 3. - For the number \\"789\\", the sum of its digits is 7 + 8 + 9 = 24, which is divisible by 3.","solution":"def is_divisible_by_3(digits): Determines if the sum of the digits of a number is divisible by 3 :param digits: string representing the digits of the number :return: \\"YES\\" if the sum of digits is divisible by 3, otherwise \\"NO\\" total = sum(int(digit) for digit in digits) return \\"YES\\" if total % 3 == 0 else \\"NO\\" def analyze_numbers(n, numbers): Analyzes a list of numbers to determine if the digits can be rearranged to form a number divisible by 3 :param n: integer representing the number of numbers :param numbers: list of strings representing the numbers :return: list of strings \\"YES\\" or \\"NO\\" for each number return [is_divisible_by_3(number) for number in numbers]"},{"question":"You have been tasked with developing a new text editing feature that involves finding and replacing text within a document. The challenge here is to modify the document to replace every occurrence of a particular string S with another string T without changing the rest of the text. Your task is to implement an efficient algorithm that performs this operation on a given document. Given a document represented as a single string and two other strings S and T, write a function that returns the modified document after all occurrences of string S have been replaced with string T. -----Constraints----- - The document string will contain between 1 and 1,000,000 characters. - Strings S and T will contain between 1 and 1,000 characters. - The document string and strings S and T will only contain alphanumeric characters and spaces. - There can be overlapping occurrences of S in the document. -----Input----- Input is given from Standard Input in the following format: - The first line contains the document string. - The second line contains the string S to be replaced. - The third line contains the replacement string T. -----Output----- Output the modified document string after all occurrences of S have been replaced by T. -----Sample Input----- hello world, welcome to the world world earth -----Sample Output----- hello earth, welcome to the earth","solution":"def replace_text(document, S, T): Replaces all occurrences of string S with string T in the given document. return document.replace(S, T)"},{"question":"Many popular social networking sites use algorithms to find all possible connections (including indirect) between users. Given N users and M direct connections between them, where each connection is a bidirectional link between two users, determine how many groups of users are there, where a group is a set of users such that each user is either directly connected or indirectly connected to every other user in the same group. -----Input----- The first line contains two integers N and M (1 le N le 1000, 0 le M le 10000), the number of users and connections. Each of the following M lines contains two integers A and B (1 le A, B le N), indicating that there is a bidirectional connection between user A and user B. The same pair of users will not appear more than once. -----Output----- Output a single integer – the number of groups of users. -----Examples----- Sample Input 1: 5 4 1 2 2 3 4 5 1 3 Sample Output 1: 2 Sample Input 2: 6 3 1 2 2 3 4 5 Sample Output 2: 3","solution":"def count_groups(N, M, connections): Returns the number of groups of users. Args: N: int - Number of users. M: int - Number of connections. connections: list of tuples - Connection pairs. Returns: int - Number of groups. from collections import defaultdict, deque # Create an adjacency list for representing the graph graph = defaultdict(list) for A, B in connections: graph[A].append(B) graph[B].append(A) visited = [False] * (N + 1) def bfs(start_node): queue = deque([start_node]) visited[start_node] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) group_count = 0 for user in range(1, N + 1): if not visited[user]: group_count += 1 bfs(user) return group_count"},{"question":"You are given a string `s` consisting of lowercase and uppercase English letters. Your task is to determine if `s` can be rearranged to form a palindrome by changing at most one character. Input The input is a single string `s` with a length between 1 and 100,000 characters. Output Print \\"YES\\" if it\'s possible to rearrange the string into a palindrome by changing at most one character, otherwise print \\"NO\\". Examples Input abca Output YES Input racecar Output YES Input abcd Output NO Explanation In the first example, changing character \'b\' to \'c\' or \'c\' to \'b\' makes the string \\"aacc\\" or \\"abca\\" which can be rearranged into the palindrome \\"acca\\". In the second example, the string is already a palindrome, so no changes are necessary. In the third example, no single character change will enable the string to be rearranged into a palindrome.","solution":"def can_form_palindrome(s): from collections import Counter def can_be_palindrome(s): count = Counter(s) odd_count = sum(1 for c in count.values() if c % 2 != 0) return odd_count <= 1 if can_be_palindrome(s): return \\"YES\\" for i in range(len(s)): new_s = s[:i] + s[i+1:] if can_be_palindrome(new_s): return \\"YES\\" return \\"NO\\""},{"question":"In many programming languages, including Python, capitalized words are often used as the naming convention for classes and constants. For instance, the standard class naming convention uses CamelCase, where each word in the name is capitalized (e.g., MyClass, ImportantData). Write a program to convert a given phrase into CamelCase. -----Input----- The input will be a single line containing at most 100 characters, lowercase and uppercase letters of the English alphabet, and spaces. There will be no leading or trailing spaces, and there will be exactly one space between adjacent words. -----Output----- The output should be the phrase converted to CamelCase. -----Examples----- Sample Input 1: convert to camel case Sample Output 1: ConvertToCamelCase Sample Input 2: hello world Sample Output 2: HelloWorld","solution":"def to_camel_case(phrase): Converts a given phrase to CamelCase. # Split the phrase into words words = phrase.split(\' \') # Capitalize each word and join them together camel_case = \'\'.join(word.capitalize() for word in words) return camel_case"},{"question":"Given a string S consisting of lowercase English alphabets. The task is to find the length of the smallest window (substring) that contains every unique character in the string S at least once. Example 1: Input: S = \\"aabcbcdbca\\" Output: 4 Explanation: The smallest substring that contains all unique characters is \\"dbca\\". Example 2: Input: S = \\"aaab\\" Output: 2 Explanation: The smallest substring that contains all unique characters is \\"ab\\". Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function smallestWindow() that takes a string (str), and returns an integer representing the length of the required substring. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ |S| ≤ 10^5","solution":"def smallestWindow(S): from collections import defaultdict # Find all unique characters in the input string unique_chars = set(S) unique_chars_count = len(unique_chars) # Declare the dictionary to maintain counts of current window characters char_count = defaultdict(int) left = 0 min_length = float(\'inf\') count = 0 for right in range(len(S)): char_count[S[right]] += 1 if char_count[S[right]] == 1: count += 1 while count == unique_chars_count: min_length = min(min_length, right - left + 1) char_count[S[left]] -= 1 if char_count[S[left]] == 0: count -= 1 left += 1 return min_length"},{"question":"T: Battle Ship Tracker / Can You Find The Position? Story Captain S of a powerful naval fleet always tests the skills of his crew by hiding ships in a Cartesian coordinate system. The ships are represented as vertical or horizontal line segments and the crew has to accurately determine if there is an overlap or intersection at a given coordinate point. Captain S gives the crew a series of queries each representing a coordinate point. The goal is to determine for each query whether the given point lies on any part of a ship\'s line segment. Problem You are given N ships, represented as line segments, and M query points. Each ship either runs parallel to the x-axis or the y-axis. A ship\'s position is described by the coordinates of its start point and end point. You need to determine for each query point if that point lies on any ship\'s line segment. Input format The first line contains an integer N, the number of ships. The following N lines each contain four integers x1, y1, x2, y2, which describe a ship from (x1, y1) to (x2, y2). The subsequent line contains an integer M, the number of query points. The next M lines each contain two integers qx, qy which denote the coordinates of a query point. The following can be assumed: * 1 ≤ N, M ≤ 100 * −10^3 ≤ x1, y1, x2, y2, qx, qy ≤ 10^3 * At least one of the coordinates satisfying x1 = x2 or y1 = y2. Output format Output M lines, each containing \\"YES\\" if the query point lies on any ship\'s segment and \\"NO\\" otherwise. Input example 1 ``` 3 0 0 3 0 1 -1 1 2 -2 2 2 2 4 0 0 1 0 1 1 4 2 ``` Output example 1 ``` YES YES YES NO ``` Input example 2 ``` 2 1 1 1 4 3 2 6 2 3 1 3 5 2 0 0 ``` Output example 2 ``` YES YES NO ``` Example Input ``` 2 1 1 1 4 3 2 6 2 3 1 3 5 2 0 0 ``` Output ``` YES YES NO ```","solution":"def is_point_on_ship(x1, y1, x2, y2, qx, qy): Helper function to determine if the point (qx, qy) lies on the ship defined by the line segment from (x1, y1) to (x2, y2). if x1 == x2: # Vertical ship return x1 == qx and min(y1, y2) <= qy <= max(y1, y2) else: # Horizontal ship return y1 == qy and min(x1, x2) <= qx <= max(x1, x2) def battleship_tracker(ships, queries): results = [] for qx, qy in queries: found = False for x1, y1, x2, y2 in ships: if is_point_on_ship(x1, y1, x2, y2, qx, qy): results.append(\\"YES\\") found = True break if not found: results.append(\\"NO\\") return results"},{"question":"Sonya and her friends have started exploring strings and substrings. Sonya\'s friends can perform a set of operations on a string s. Each operation is of one of the following types: 1. + c — append character `c` to the end of the string. The character c is always a lowercase English letter. 2. - d — remove the first `d` characters from the beginning of the string. It\'s guaranteed that d is between 1 and the current length of the string s. 3. ? u v — check how many times the substring `u` appears as a contiguous substring in the first `v` characters of the string s (1 ≤ v ≤ length of the string s, |u| ≤ v). Sonya starts with an empty string and performs a series of these operations. Input The first line contains an integer t (1 ≤ t ≤ 100000) — the number of operations Sonya has to perform. The next t lines describe the operations, one per line. Each line starts with a character ci denoting the type of operation, followed by either the character c if ci is ‘+’, or integer d if ci is ‘-’, or string u and integer v if ci is ‘?’. Output For each query of the third type, print the number of times the substring u appears in the first v characters of the current string. Examples Input 6 + a + b + a + c ? ab 3 ? ac 4 Output 1 1 Input 5 + d + e + f - 2 ? f 1 Output 1 Note Consider the state of the string after each operation: 1. After the first operation: \\"a\\". 2. After the second operation: \\"ab\\". 3. After the third operation: \\"aba\\". 4. After the fourth operation: \\"abac\\". 5. The substring \\"ab\\" appears once in the first 3 characters of the string \\"aba\\". 6. The substring \\"ac\\" appears once in the first 4 characters of the string \\"abac\\". For the second example: 1. After the first operation: \\"d\\". 2. After the second operation: \\"de\\". 3. After the third operation: \\"def\\". 4. After the fourth operation: \\"f\\". 5. The substring \\"f\\" appears once in the first character of the string \\"f\\".","solution":"def handle_operations(t, operations): s = \\"\\" results = [] for op in operations: if op[0] == \'+\': s += op[2] elif op[0] == \'-\': d = int(op[2:]) s = s[d:] elif op[0] == \'?\': parts = op.split() u = parts[1] v = int(parts[2]) substring = s[:v] count = 0 for i in range(v - len(u) + 1): if substring[i:i+len(u)] == u: count += 1 results.append(count) return results # Read input def main(): import sys input = sys.stdin.read data = input().split(\'n\') t = int(data[0]) operations = data[1:t+1] # Get results of handled operations results = handle_operations(t, operations) # Print results line by line for result in results: print(result) # Example usage: # operations = [ # \\"+ a\\", # \\"+ b\\", # \\"+ a\\", # \\"+ c\\", # \\"? ab 3\\", # \\"? ac 4\\" # ] # print(handle_operations(6, operations)) # Expected output: [1, 1]"},{"question":"Given a string `s` consisting of only lowercase English letters, write a function to return the length of the longest substring with all distinct characters. Example: Input: s = \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Input: s = \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Input: s = \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Note: You must solve this problem in O(n) time complexity. Hints: 1. Consider using a sliding window technique. 2. A hash set can be used to track the characters in the current window.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. n = len(s) char_set = set() left = 0 max_length = 0 for right in range(n): while s[right] in char_set: char_set.remove(s[left]) left += 1 char_set.add(s[right]) max_length = max(max_length, right - left + 1) return max_length"},{"question":"Shikha is designing a tracking system using a binary tree mathbf{B} consisting of N nodes uniquely labeled with integers in the inclusive range [1,N]. The node labeled as 1 is the root node of tree mathbf{B}, and every node i in tree mathbf{B} has an associated integer weight, mathbf{W_i}. Shikha wants to perform two types of operations on her tree mathbf{B}: mathbf{A} mathbf{X} mathbf{D} For a given node mathbf{X}, Shikha wants to add a given integer mathbf{D} to the weights of all nodes in the subtree rooted at mathbf{X}. mathbf{S} mathbf{X} mathbf{Y} Given two nodes mathbf{X} and mathbf{Y}, Shikha wants to find the maximum weight among all nodes on the unique path from mathbf{X} to mathbf{Y}. Print the maximum weight found. Given the configuration for the binary tree mathbf{B} and a list of mathbf{M} operations, perform all the operations efficiently. Input Format: The first line contains 2 space-separated integers, N (the number of nodes in binary tree mathbf{B}) and mathbf{M} (the number of operations to be processed), respectively. Each line boldsymbol{i} of the N-1 subsequent lines contains two space-separated integers, mathbf{P} (the parent node of the (i+1)^{th} node) and mathbf{C} (the child node of the (i+1)^{th}), denoting the parent to child relationship. Each of the mathbf{M} subsequent lines contains one of the two types of operations mentioned in the Problem Statement above. Constraints: 1 leq N, M leq 10^5 1 leq X, Y leq N 1 leq D leq 10^9 1 leq mathbf{W_i} leq 10^9 Output Format: For each operation of type mathbf{S} (i.e., `S`), print the required answer on a new line. Sample Input: 5 5 1 2 1 3 2 4 2 5 S 1 5 A 2 10 S 2 4 S 1 4 S 1 3 Sample Output: mathrm{10} mathrm{20} mathrm{20} mathrm{10} Explanation: Initially, the tree looks like this (assuming initial weights are the node numbers for simplicity): After the `A 2 10` operation, the tree looks like this: Performing the `S` operations yields the output shown above.","solution":"class BinaryTree: def __init__(self, N): self.N = N self.tree = [[] for _ in range(N + 1)] self.weights = [0] * (N + 1) def add_edge(self, parent, child): self.tree[parent].append(child) def set_weights(self, weights): for i in range(1, self.N + 1): self.weights[i] = weights[i - 1] def add_to_subtree(self, X, D): stack = [X] while stack: current = stack.pop() self.weights[current] += D for child in self.tree[current]: stack.append(child) def find_max_on_path(self, X, Y): if X == Y: return self.weights[X] visited = set() path_X = self._find_path(1, X, visited) visited = set() path_Y = self._find_path(1, Y, visited) lca_weight = 0 while path_X and path_Y and path_X[0] == path_Y[0]: lca_weight = max(lca_weight, self.weights[path_X.pop(0)], self.weights[path_Y.pop(0)]) return max(lca_weight, max(self.weights[node] for node in (path_X + path_Y))) def _find_path(self, start, end, visited): stack = [(start, [])] while stack: current, path = stack.pop() if current == end: return path + [current] visited.add(current) for child in self.tree[current]: if child not in visited: stack.append((child, path + [current])) return [] # wrapper function to execute commands def process_commands(N, M, edges, weights, commands): bt = BinaryTree(N) for p, c in edges: bt.add_edge(p, c) bt.set_weights(weights) results = [] for command in commands: cmd = command.split() if cmd[0] == \'A\': bt.add_to_subtree(int(cmd[1]), int(cmd[2])) elif cmd[0] == \'S\': max_weight = bt.find_max_on_path(int(cmd[1]), int(cmd[2])) results.append(max_weight) return results"},{"question":"Farmer John has a unique way of planting his crops in a grid. The grid is of size m x n, where each cell can either be empty or contain a crop. The crops are planted on specific positions provided by their coordinates. The challenge for Farmer John is to find the largest rectangle within the grid that consists entirely of crops. Write a program that takes the grid dimensions and the positions of the crops as input and outputs the area of the largest rectangle that contains only crops. -----Input----- - The first line contains two integers m and n, the number of rows and columns in the grid respectively (1 <= m, n <= 100). - The second line contains an integer k, the number of crops (0 <= k <= m*n). - The next k lines each contain two integers, r and c, the row and column indices of a crop (0 <= r < m, 0 <= c < n). -----Output----- - The output should be a single integer - the area of the largest rectangular section that consists entirely of crops. -----Example----- Input: 5 5 6 1 1 1 2 2 1 2 2 3 1 3 3 Output: 4 Input: 4 4 7 0 0 1 1 2 1 2 3 3 1 3 2 3 3 Output: 3","solution":"def largest_crop_rectangle(m, n, croppos): Returns the area of the largest rectangle consisting of only crops. grid = [[0] * n for _ in range(m)] for r, c in croppos: grid[r][c] = 1 max_area = 0 dp = [0] * n for i in range(m): for j in range(n): if grid[i][j] == 1: dp[j] += 1 else: dp[j] = 0 max_area = max(max_area, largest_histogram_area(dp)) return max_area def largest_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a list of integers, write a function that finds the maximum absolute difference between any two elements in the list. The absolute difference between two numbers `a` and `b` is given by `|a - b|`, where `|x|` denotes the absolute value of `x`. If the list contains less than two elements, return \\"Not valid\\". Examples: ``` max_absolute_difference([1, 3, -1, 9]) => 10 (|9 - (-1)| or |(-1) - 9|) max_absolute_difference([1, 1, 1, 1]) => 0 (All elements are the same) max_absolute_difference([10, 4]) => 6 (|10 - 4|) max_absolute_difference([5]) => \\"Not valid\\" (List has less than two elements) max_absolute_difference([]) => \\"Not valid\\" (List is empty) max_absolute_difference(\\"abc\\") => \\"Not valid\\" (Input is not a list) ``` Python function signature: ```python def max_absolute_difference(lst): pass ``` Haskell function signature: ```haskell maxAbsoluteDifference :: [Int] -> Maybe Int ```","solution":"def max_absolute_difference(lst): Returns the maximum absolute difference between any two elements in the list. If the list contains less than two elements or is not a list, returns \\"Not valid\\". if not isinstance(lst, list) or len(lst) < 2: return \\"Not valid\\" max_val = max(lst) min_val = min(lst) return abs(max_val - min_val)"},{"question":"Jack and Jill are playing a game where they take turns removing stones from two piles. The rules of the game are as follows: 1. A player can remove any positive number of stones from either of the two piles. 2. A player can only remove stones from one pile during their turn. 3. The player who cannot make a move (because both piles are empty) loses the game. Both players play optimally, meaning they will always make the best possible move. Determine the outcome of the game given the initial number of stones in the two piles. Input The first line contains a single integer T, the number of test cases. Each of the next T lines contains two integers A and B, denoting the initial number of stones in the first and second piles respectively. Output For each test case, output \\"First\\" if the first player is guaranteed to win, otherwise output \\"Second\\". Constraints 1 ≤ T ≤ 100 1 ≤ A, B ≤ 10^7 SAMPLE INPUT 3 1 2 2 2 3 1 SAMPLE OUTPUT First Second First Explanation For the first test case, the first player can remove 1 stone from the first pile, leaving the second player with piles (0,2). The second player can only remove stones from the second pile, leading the first player to a guaranteed win after removing the remaining stones. For the second test case, any move the first player makes will leave an equal number of stones in both piles, allowing the second player to mirror the move and win. For the third test case, the first player can remove all stones from the first or the second pile, leading to the second player losing the game on their turn.","solution":"def game_outcome(test_cases): results = [] for A, B in test_cases: if A == B: results.append(\\"Second\\") else: results.append(\\"First\\") return results"},{"question":"The school cafeteria serves lunch in a very specific way. There are multiple types of dishes available, but each student can pick only one type of dish. Each type of dish can be represented as a number. The cafeteria serves lunch only if the selected dish type\'s number is prime. Given a student\'s choice of dish, determine if the cafeteria will serve lunch to the student. In other words, check if the number representing the dish is a prime number. Print \\"Serve\\" if the cafeteria will serve lunch, else print \\"Do not serve\\". You may print each character of the string in either uppercase or lowercase (for example, the strings SERVE, Serve, serve, and SeRvE will all be treated as identical). ------ Input Format ------ - The first and only line of input will contain a single integer T representing the student\'s choice of dish. ------ Output Format ------ - Output in a single line \\"Serve\\" or \\"Do not serve\\". - You may print each character of the string in either uppercase or lowercase (for example, the strings SERVE, Serve, serve, and SeRvE will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 50 ------ subtasks ------ Subtask #1 (100 points): Original constraints ----- Sample Input 1 ------ 7 ----- Sample Output 1 ------ Serve ----- Explanation 1 ------ The student chose the dish type 7, which is a prime number. Therefore, the cafeteria will serve lunch. ----- Sample Input 2 ------ 10 ----- Sample Output 2 ------ Do not serve ----- Explanation 2 ------ The student chose the dish type 10, which is not a prime number. Therefore, the cafeteria will not serve lunch.","solution":"def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def serve_or_not(dish_number): if is_prime(dish_number): print(\\"Serve\\") else: print(\\"Do not serve\\")"},{"question":"You are developing an event management system that needs to track attendee registrations and identify duplicate entries based on their email address. Each attendee provides their first name, last name, and email address during registration. Your task is to write a function that processes a list of attendee registrations and returns a dictionary with a count of unique and duplicate emails, as well as any duplicate registrations. # Input Your function will receive a list of dictionaries, where each dictionary represents an attendee with the following keys: - \\"first_name\\": a string representing the first name of the attendee - \\"last_name\\": a string representing the last name of the attendee - \\"email\\": a string representing the email address of the attendee An example input list might look like this: ```python [ {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"email\\": \\"john.doe@example.com\\"}, {\\"first_name\\": \\"Jane\\", \\"last_name\\": \\"Smith\\", \\"email\\": \\"jane.smith@example.com\\"}, {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"email\\": \\"john.doe@example.com\\"}, {\\"first_name\\": \\"Alice\\", \\"last_name\\": \\"Johnson\\", \\"email\\": \\"alice.johnson@example.com\\"} ] ``` # Processing Your function should: 1. Identify duplicate registrations based on email addresses. 2. Return a dictionary with all the following keys: - \\"unique_count\\": the number of unique email addresses - \\"duplicate_count\\": the number of duplicate email addresses - \\"duplicates\\": a list of dictionaries, each containing the \\"first_name\\", \\"last_name\\", and \\"email\\" of the duplicate registrations # Output The function should return a dictionary structured as explained above. Based on the input example provided, the output would be: ```python { \\"unique_count\\": 3, \\"duplicate_count\\": 1, \\"duplicates\\": [ {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"email\\": \\"john.doe@example.com\\"} ] } ``` # Additional Notes - Email addresses are case insensitive, e.g., \\"John.Doe@example.com\\" and \\"john.doe@example.com\\" are considered the same. - The order of the duplicates in the list should match the first occurrence order of the duplicates found in the input list. - You can assume that each registration dictionary contains the specified keys and no others.","solution":"def process_registrations(attendees): Process a list of attendee registrations to find unique and duplicate email addresses. Parameters: attendees (list): A list of dictionaries, each containing \\"first_name\\", \\"last_name\\", and \\"email\\" keys. Returns: dict: A dictionary containing \\"unique_count\\", \\"duplicate_count\\", and \\"duplicates\\". email_count = {} duplicates = [] unique_emails = set() for attendee in attendees: email = attendee[\\"email\\"].lower() if email in email_count: email_count[email] += 1 if email_count[email] == 2: # Only add the first duplicate occurrence duplicates.append(attendee) else: email_count[email] = 1 unique_emails.add(email) unique_count = len(unique_emails) duplicate_count = len(duplicates) return { \\"unique_count\\": unique_count, \\"duplicate_count\\": duplicate_count, \\"duplicates\\": duplicates }"},{"question":"Alichka is fascinated by permutations. Today, she created a game around cyclical permutations, where a cyclical permutation is defined as a permutation that when cycled, gives another valid permutation of the same length. For example, for permutation (2, 1, 3), cycling it by one position results in (1, 3, 2) and then (3, 2, 1). Alichka has `n` integers and she wants to determine if it\'s possible to rearrange these numbers to form a cyclical permutation. An arrangement is cyclical if it can continuously form new permutations through cycling. Help Alichka to determine if such a permutation is possible. If yes, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of integers. The second line contains `n` integers separated by spaces (1 ≤ a_i ≤ 10^9) — the given integers. -----Output----- Print \\"YES\\" if there exists at least one arrangement of the `n` integers such that the permutation is cyclical. Otherwise, print \\"NO\\". -----Examples----- Input 4 1 2 3 4 Output YES Input 5 1 3 3 3 4 Output NO -----Note----- In the first sample case, permutation (1, 2, 3, 4) can be cycled as (2, 3, 4, 1), (3, 4, 1, 2), (4, 1, 2, 3), each of which forms another valid permutation, thus forming a cycle. In the second case, permutation (1 3 3 3 4) cannot form a valid cycle due to repeated elements, making it impossible to have all unique permutations when cycled.","solution":"def can_form_cyclical_permutation(n, nums): Determines if a cyclical permutation is possible with given numbers. :param n: The number of integers :param nums: The list of integers :return: \\"YES\\" if cyclical permutation can be formed, \\"NO\\" otherwise # A permutation can only be cyclical with unique elements if len(set(nums)) == n: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array `b` of length `n`, which consists of integers. Your task is to perform a series of operations on `b` to maximize the minimum value in the array. The operation you can perform is as follows: - Select any two different elements in the array and replace the larger element with their difference. Formally, if you select indices `i` and `j` such that `b[i] > b[j]`, you can set `b[i]` to `b[i] - b[j]`. You need to determine the maximum possible value of the minimum element in `b` after performing the operations optimally. -----Input----- - The first line contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. - Each of the next `t` lines contains: - An integer `n` (2 ≤ n ≤ 100) — the number of elements in the array `b`. - A sequence of `n` integers `b_1, b_2, ..., b_n` (1 ≤ b_i ≤ 10^9). -----Output----- - For each test case, print a single integer — the maximum possible value of the minimum element in the array `b` after the allowed operations. -----Example----- Input 3 4 8 4 2 1 3 7 4 2 2 6 2 Output 1 2 2 -----Note----- In the first test case, you can perform the operations as follows: - Subtract 1 from 2: [8, 4, 2, 1] -> [8, 4, 1, 1] - Subtract 1 from 4: [8, 4, 1, 1] -> [8, 3, 1, 1] - Subtract 1 from 3: [8, 3, 1, 1] -> [8, 2, 1, 1] - Subtract 1 from 2: [8, 2, 1, 1] -> [8, 1, 1, 1] After these operations, the minimum value in the array is 1, which is the maximum possible minimum value. In the second test case, you can perform the operations as follows: - Subtract 2 from 4: [7, 4, 2] -> [7, 2, 2] - Subtract 2 from 7: [7, 2, 2] -> [5, 2, 2] - Subtract 2 from 5: [5, 2, 2] -> [3, 2, 2] - Subtract 2 from 3: [3, 2, 2] -> [1, 2, 2] After these operations, the minimum value in the array is 2, which is the maximum possible minimum value. In the third test case, you can perform the operation as follows: - Subtract 2 from 6: [6, 2] -> [4, 2] - Subtract 2 from 4: [4, 2] -> [2, 2] After these operations, the minimum value in the array is 2, which is the maximum possible minimum value.","solution":"def max_minimum_value(t, test_cases): results = [] for n, b in test_cases: results.append(min(b)) return results # Example usage # test_cases = [(4, [8, 4, 2, 1]), (3, [7, 4, 2]), (2, [6, 2])] # max_minimum_value(3, test_cases)"},{"question":"Largest Prime Factor The arithmetic operation of finding the prime factors of a number can be quite useful. In this exercise, you need to determine the largest prime factor for a given integer `n`. # Task Write a function `largest_prime_factor(n)` that takes a single integer `n` and returns a single integer representing the largest prime factor of `n`. # Input - `n` is an integer greater than or equal to 2 (2 ≤ n ≤ 10^12). # Output - The function should return the largest prime factor of `n`. # Examples ```python largest_prime_factor(10) -> 5 largest_prime_factor(15) -> 5 largest_prime_factor(21) -> 7 largest_prime_factor(13195) -> 29 largest_prime_factor(2) -> 2 largest_prime_factor(29) -> 29 ``` # Note - Make sure your solution is efficient enough to handle large inputs up to 10^12. - Consider edge cases where the input number itself is a prime number. - The function can leverage mathematical optimizations to find the largest prime factor.","solution":"def largest_prime_factor(n): Returns the largest prime factor of n. # Handle edge cases where n is less than 2 if n < 2: raise ValueError(\\"n must be greater than or equal to 2\\") # Start by dividing n by 2 until it is odd largest_factor = 1 while n % 2 == 0: largest_factor = 2 n //= 2 # Now n must be odd, starting from the smallest odd factor factor = 3 while factor * factor <= n: while n % factor == 0: largest_factor = factor n //= factor factor += 2 # If n is still greater than 2, then n is prime itself if n > 2: largest_factor = n return largest_factor"},{"question":"You are given a number, `n`, and you need to find all the prime numbers between 1 and `n`, inclusive. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. Write a function that takes an integer `n` as input and returns a list of all prime numbers between 1 and `n`, inclusive. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 10^6). -----Output----- The output should be a single list of integers which are the prime numbers between 1 and `n`, inclusive. -----Examples----- Input 10 Output [2, 3, 5, 7] Input 20 Output [2, 3, 5, 7, 11, 13, 17, 19] Input 1 Output [] Input 30 Output [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] -----Note----- For the first example, the prime numbers between 1 and 10 are 2, 3, 5, and 7. For the second example, the prime numbers between 1 and 20 are 2, 3, 5, 7, 11, 13, 17, and 19. For the third example, there are no prime numbers between 1 and 1, thus the output is an empty list.","solution":"def find_primes(n): Returns a list of all prime numbers between 1 and n, inclusive. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(2, n + 1) if sieve[num]]"},{"question":"An international corporation is scheduling meetings in its various locations around the world. Each meeting has a specific time and timezone, and the goal is to create a calendar that holds the local time for each event, converted to UTC (Coordinated Universal Time). Write a function that accomplishes this for a list of meetings, given the meeting time in a 24-hour clock format and the offset from UTC. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of meetings. - The next `n` lines each contain two strings: `time` and `offset`. - `time` describes the meeting time in the format \\"HH:MM\\". - `offset` describes the timezone offset in the format \\"+/-HH:MM\\". # Output Print `n` lines containing the meeting times in UTC, in the same order they were provided, in the format \\"HH:MM\\". # Examples Example 1 **Input** ``` 3 09:30 +02:00 14:45 -03:00 23:10 +05:30 ``` **Output** ``` 07:30 17:45 17:40 ``` Example 2 **Input** ``` 2 00:00 +00:00 12:30 +01:00 ``` **Output** ``` 00:00 11:30 ``` # Note 1. Keep in mind that the meeting time may span over to the previous or next day, so handle the hour changes accordingly. 2. The input guarantees that the provided time and offset are valid and well-formatted as described. Write the function `convert_to_utc(meetings: List[Tuple[str, str]]) -> List[str]` to perform the conversion. This function should handle the time conversion cleanly and ensure that any edge cases involving transitions over days are managed correctly.","solution":"from typing import List, Tuple def convert_to_utc(meetings: List[Tuple[str, str]]) -> List[str]: def time_to_minutes(time_str): Convert time HH:MM to minutes hours, minutes = map(int, time_str.split(\':\')) return hours * 60 + minutes def minutes_to_time(minutes): Convert minutes to time HH:MM hours = minutes // 60 minutes = minutes % 60 return f\\"{hours:02d}:{minutes:02d}\\" def offset_to_minutes(offset_str): Convert offset +/-HH:MM to minutes sign = 1 if offset_str[0] == \'+\' else -1 hours, minutes = map(int, offset_str[1:].split(\':\')) return sign * (hours * 60 + minutes) results = [] for time_str, offset_str in meetings: time_minutes = time_to_minutes(time_str) offset_minutes = offset_to_minutes(offset_str) utc_minutes = (time_minutes - offset_minutes) % (24 * 60) results.append(minutes_to_time(utc_minutes)) return results"},{"question":"You are given a list of integers. You are allowed to perform the following operation any number of times: Operation: Choose any two adjacent integers and swap them if the left integer is greater than the right integer. Your task is to sort the list in ascending order by performing the minimum number of swaps. -----Constraints----- - All values in input are integers. - 1 ≤ N ≤ 100 - 0 ≤ a_i ≤ 1000 (for 0 ≤ i < N) -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print the sorted list in ascending order after performing the minimum number of swaps, in the following format: N a_1\' a_2\' ... a_N\' -----Sample Input----- 5 5 3 2 4 1 -----Sample Output----- 5 1 2 3 4 5 To achieve this, the minimum number of swaps required are: Swap the adjacent elements if the left one is greater than the right one: - Swap 5 and 3: [3, 5, 2, 4, 1] - Swap 5 and 2: [3, 2, 5, 4, 1] - Swap 5 and 4: [3, 2, 4, 5, 1] - Swap 5 and 1: [3, 2, 4, 1, 5] - Swap 3 and 2: [2, 3, 4, 1, 5] - Swap 4 and 1: [2, 3, 1, 4, 5] - Swap 3 and 1: [2, 1, 3, 4, 5] - Swap 2 and 1: [1, 2, 3, 4, 5] This results in the array being sorted in 8 swaps.","solution":"def bubble_sort_minimum_swaps(n, arr): Sorts the list arr using bubble sort by performing the minimum number of swaps. :param n: Length of the list arr :param arr: List of integers :return: List sorted in ascending order for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"question":"Sam loves playing with numbers, and one of his favorite hobbies is finding beautiful subsequences within an array. A subsequence is considered beautiful if the product of its elements is a perfect square. Given an array of integers, Sam wants to determine the maximum length of a beautiful subsequence. A perfect square is an integer that is the square of another integer. For instance, 1, 4, 9, 16 and so on are perfect squares. Write a function that, given an array of integers, returns the length of the longest beautiful subsequence. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100), the number of test cases. For each test case, the first line contains an integer n (1 leq n leq 100), the length of the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4), the elements of the array. -----Output----- For each test case, output a single integer: the length of the longest beautiful subsequence. -----Examples----- Input 3 4 1 2 3 4 5 1 2 2 3 3 6 1 4 9 16 25 36 Output 4 5 6 -----Note----- In the first test case, the longest beautiful subsequence is [1, 4]. In the second test case, the longest beautiful subsequence is [1, 2, 2] or [4]. In the third test case, the entire array is a perfect square product.","solution":"import math def is_perfect_square(x): r = int(math.isqrt(x)) return r * r == x def max_beautiful_subsequence_length(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] array = test_cases[i][1] dp = [] for j in range(n): if is_perfect_square(array[j]): dp.append(array[j]) results.append(len(dp)) return results"},{"question":"You are given an integer array where the length of the array is in the range 1-50. Your task is to calculate the running sum of the elements. The running sum of an array is defined as the runningSum[i] = sum(nums[0]…nums[i]) where 0 <= i < len(nums). First Example: Input: [1, 2, 3, 4] Steps: runningSum[0] = 1, runningSum[1] = 1+2 = 3, runningSum[2] = 1+2+3 = 6, runningSum[3] = 1+2+3+4 = 10 Output: [1, 3, 6, 10] Second Example: Input: [3, 1, 5, 8] Steps: runningSum[0] = 3, runningSum[1] = 3+1 = 4, runningSum[2] = 3+1+5 = 9, runningSum[3] = 3+1+5+8 = 17 Output: [3, 4, 9, 17] Input: integer array Output: array containing running sum of input array","solution":"def running_sum(nums): Returns the running sum of the elements in the integer array nums. result = [] current_sum = 0 for num in nums: current_sum += num result.append(current_sum) return result"},{"question":"Sorting an array is part of every programmer\'s toolkit. To test your understanding of sorting and median calculation, you are asked to solve the following problem. You are given m arrays of integers. For each array, you need to find and return the median of its elements after sorting them in non-decreasing order. If the array has an even number of elements, return the smaller of the two middle elements. Your task is to complete the function `findMedians` which takes a list of integer arrays as input and returns a list of medians for each array. Input Format The first line contains a single integer m denoting the number of arrays. The following lines describe the arrays. Each array is represented in two lines. The first of these lines contains a single integer k, the size of the array. The second line contains k space-separated integers representing the elements of the array. Constraints 1 leq m leq 100 1 leq k leq 1000 -10^6 leq text{element} leq 10^6 Output Format For each array, print a single line containing its median. Sample Input 3 5 1 3 5 7 9 4 10 20 30 40 6 7 8 5 6 3 4 Sample Output 5 20 5 Explanation In the first example, the sorted array is [1, 3, 5, 7, 9], and the median is 5. In the second example, the sorted array is [10, 20, 30, 40], and the smaller of the two middle elements (20 and 30) is 20. In the third example, the sorted array is [3, 4, 5, 6, 7, 8], and the smaller of the two middle elements (5 and 6) is 5.","solution":"def findMedians(arrays): Given a list of integer arrays, return a list of medians for each array. If an array has an even number of elements, return the smaller of the two middle elements. :param arrays: List of lists where each sublist represents an array of integers. :return: List of integers representing medians of each array. medians = [] for arr in arrays: arr.sort() n = len(arr) if n % 2 == 1: median = arr[n // 2] else: median = arr[n // 2 - 1] medians.append(median) return medians"},{"question":"John is a librarian at a public library. He is in charge of organizing new books that arrive every day. Each day, he receives Y boxes of books, and each box contains exactly 20 books. Determine the total number of books that John organized each day. ------ Input Format ------ - The first line contains a single integer N — the number of test cases. Then the test cases follow. - The first and only line of each test case contains an integer Y — the total number of boxes of books that John organized. ------ Output Format ------ For each test case, output the total number of books organized by John. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ Y ≤ 10^{5} ----- Sample Input 1 ------ 3 2 5 10 ----- Sample Output 1 ------ 40 100 200 ----- explanation 1 ------ Test Case 1: Since, he organized 2 boxes of books, the total number of books organized by him is 20 + 20 = 40. Test Case 2: Since, he organized 5 boxes of books, the total number of books is 20 + 20 + 20 + 20 + 20 = 100.","solution":"def total_books_organized_per_day(test_cases): Calculate the total number of books John organized each day based on the number of boxes. Parameters: test_cases (list): List of integers where each integer is the number of boxes Returns: list: The total number of books organized per day for each test case # Each box contains exactly 20 books books_per_box = 20 # Compute the total number of books for each number of boxes in test_cases total_books = [y * books_per_box for y in test_cases] return total_books"},{"question":"You are given a list of integers representing the elevation of a terrain. Your task is to compute the volume of water that can be trapped between these elevations after raining. The water trapped at each position is determined by the heights of the tallest elevations to the left and right of that position. Example 1: Input: heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The structure in the elevation array can trap 6 units of rain water. Example 2: Input: heights = [4, 2, 0, 3, 2, 5] Output: 9 Explanation: The structure in the elevation array can trap 9 units of rain water. Your Task: You don\'t need to read input or print anything. Your task is to implement the function calculateTrappedWater() which takes a list of integers (heights) and returns the total volume of water that can be trapped. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(heights) <= 10^5 0 <= heights[i] <= 10^4","solution":"def calculateTrappedWater(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Alice has a list of N integers and she challenges you to perform a sequence of operations on it. Each operation is defined as: - Choose any sublist of the given list. - Reverse the selected sublist. Your task is to sort the list in non-decreasing order using the minimum number of operations. Input The first line of input contains a single integer N, the number of integers in the list. The second line contains N space-separated integers, representing Alice\'s list. Output Output a single integer, the minimum number of operations required to sort the list. Constraints 1 ≤ N ≤ 1000 -10^6 ≤ A[i] ≤ 10^6 Example Input: 5 4 3 2 1 5 Output: 2 Explanation Step 1: Reverse the sublist [4, 3, 2, 1] to get [1, 2, 3, 4, 5] The list is now sorted in non-decreasing order using 2 operations.","solution":"def min_operations_to_sort(lst): Returns the minimum number of sublist reversals needed to sort the list in non-decreasing order. n = len(lst) # Find the point where the list stops being non-decreasing from the end for i in range(n - 1, 0, -1): if lst[i] < lst[i - 1]: break else: # The whole list is sorted return 0 # Only two operations are needed return 2"},{"question":"Given a square grid of size n x n, where each cell in the grid contains an integer representing the cost to enter that cell, write a function to find a path from the top-left to the bottom-right of the grid, which minimizes the total cost. You can only move right or down at each step. Example: Input: n = 3 grid = {{1, 3, 1}, {1, 5, 1}, {4, 2, 1}} Output: 7 Explanation: The path 1 → 3 → 1 → 1 → 1 minimizes the total cost. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minGridPathCost() which takes the 2D array grid and integer n, and returns the minimum cost to reach from the top-left to the bottom-right of the grid. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n^2) Constraint: 1 <= n <= 100 1 <= grid[i][j] <= 100","solution":"def minGridPathCost(grid, n): Function to find the minimum cost path in a square grid of size n x n from the top-left to the bottom-right of the grid. # Create a 2D dp array to store the minimum cost to reach each cell dp = [[0] * n for _ in range(n)] # Initialize the top-left corner with the initial grid value dp[0][0] = grid[0][0] # Fill in the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill in the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill in the rest of the dp array for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell will have the minimum cost to reach that cell return dp[n - 1][n - 1]"},{"question":"To encourage physical activity in a programming class, the students have devised a simple game during their breaks. The game is called \\"Step Counter\\". The classroom is divided into N sections arranged in a straight line, and each student must track the number of steps they take while walking between pairs of sections. The steps are recorded in an array where the i-th element represents the number of steps necessary to walk from section i to section i+1. The student needs to answer Q queries, each asking for the total number of steps required to walk between two sections. You are required to help the student by efficiently computing the total number of steps for each query. # Input Format: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains the integers N and Q, where N is the number of sections (and N-1 denotes the number of steps between the sections). - The second line contains N-1 integers, where the i-th integer represents the steps required to move from section i to section i+1. - The next Q lines contain two integers X_i and Y_i, the indices of the two sections for the i-th query. # Output Format: For each test case, output the total number of steps required for each query on a new line. # Constraints: - 1 leq T leq 50 - 2 leq N leq 10^4 - 1 leq Q leq 5000 - 1 leq steps[i] leq 1000 - 1 leq X_i, Y_i leq N - X_i leq Y_i # Sample Input: ``` 1 5 3 4 3 7 2 1 3 2 5 3 4 ``` # Sample Output: ``` 7 12 7 ``` # Explanation: In the example, we have 5 sections and the steps between sections as [4, 3, 7, 2]. For the three queries: 1. To move from section 1 to section 3, the steps are 4 + 3 = 7. 2. To move from section 2 to section 5, the steps are 3 + 7 + 2 = 12. 3. To move from section 3 to section 4, the steps are 7. Thus, the total steps required for each query are 7, 12, and 7 respectively.","solution":"def step_counter(T, test_cases): results = [] for test_case in test_cases: N, Q, steps, queries = test_case prefix_sum = [0] * N for i in range(1, N): prefix_sum[i] = prefix_sum[i-1] + steps[i-1] for X, Y in queries: results.append(prefix_sum[Y-1] - prefix_sum[X-1]) return results def parse_input(input_str): data = input_str.strip().split() idx = 0 T = int(data[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(data[idx]) Q = int(data[idx + 1]) idx += 2 steps = list(map(int, data[idx:idx + N - 1])) idx += N - 1 queries = [] for _ in range(Q): X = int(data[idx]) Y = int(data[idx + 1]) queries.append((X, Y)) idx += 2 test_cases.append((N, Q, steps, queries)) return T, test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Implement a function `toggle_case` that takes a string as an input and returns a new string where each letter\'s case is reversed. All other characters (non-alphabetic) should remain unchanged. For example: ```python toggle_case(\\"Hello, World!\\") == \\"hELLO, wORLD!\\" toggle_case(\\"Python3.8\\") == \\"pYTHON3.8\\" toggle_case(\\"1234\\") == \\"1234\\" ```","solution":"def toggle_case(s): Returns a string where each alphabetical character\'s case is reversed. All non-alphabetic characters remain unchanged. return \'\'.join([char.swapcase() if char.isalpha() else char for char in s])"},{"question":"A puzzle company creates unique n-piece puzzles. Each puzzle piece has a distinct number from 1 to n written on it. Recently, the company started to verify if completed puzzles have all the correct pieces. One approach to verification is to check if the sum of the numbers on the pieces is correct. The sum of the numbers on the pieces in a correctly completed puzzle should equal the sum of the first n natural numbers. You are given the total number of pieces n, and a list of m integers representing pieces found in a puzzle. Determine if the sum of the pieces provided is equal to the expected sum of the first n natural numbers. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the total number of pieces in a puzzle. The second line contains m space-separated integers p_{i} (1 ≤ p_{i} ≤ n) — the numbers on the pieces found in the puzzle. -----Output----- If the sum of the numbers on the pieces is correct, print \'Valid\' (without the quotes). Otherwise, print \'Invalid\' (without the quotes). -----Examples----- Input 5 1 2 3 4 5 Output Valid Input 5 1 2 3 5 Output Invalid Input 3 3 1 2 Output Valid -----Note----- In the first test sample, the sum of numbers on the pieces is 1+2+3+4+5 = 15, which is equal to the sum of the first 5 natural numbers (n*(n+1)/2 = 5*(5+1)/2 = 15). In the second test sample, the sum of numbers on the pieces is 1+2+3+5 = 11, which is not equal to the sum of the first 5 natural numbers (15). In the third test sample, the sum of numbers on the pieces is 3+1+2 = 6, which is equal to the sum of the first 3 natural numbers (6).","solution":"def verify_puzzle(n, pieces): Verify if the sum of the puzzle pieces is equal to the expected sum of the first n natural numbers. Args: n (int): The total number of pieces. pieces (list of int): The numbers on the pieces found in the puzzle. Returns: str: \'Valid\' if the sum of numbers on the pieces is equal to the expected sum, else \'Invalid\'. expected_sum = n * (n + 1) // 2 actual_sum = sum(pieces) return \'Valid\' if actual_sum == expected_sum else \'Invalid\'"},{"question":"Aman loves palindromes and enjoys finding them in strings. He gives you a string and a set of queries. For each query, he wants to know the length of the longest palindromic substring within a specified range of indices. Input The first line contains a single integer T, the number of test cases. For each test case: - The first line contains the given string S. - The second line contains an integer Q, the number of queries. - The next Q lines contain two integers l and r, the starting and ending indices (inclusive) for which you need to find the length of the longest palindromic substring. Output For each query, print the length of the longest palindromic substring within the specified range. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 1 ≤ Q ≤ 100 1 ≤ l, r ≤ |S| SAMPLE INPUT 1 abaxyzzyxf 3 1 3 3 9 0 10 SAMPLE OUTPUT 3 6 6","solution":"def longest_palindromic_substring(s, l, r): Finds the length of the longest palindromic substring within the range [l, r] of the string s. def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1 start, end = l, r max_length = 0 for i in range(start, end + 1): len1 = expand_around_center(s, i, i) len2 = expand_around_center(s, i, i + 1) max_length = max(max_length, len1, len2) return max_length def process_test_cases(T, test_cases): results = [] for case in test_cases: S, Q, queries = case[\'S\'], case[\'Q\'], case[\'queries\'] for l, r in queries: results.append(longest_palindromic_substring(S, l, r - 1)) return results"},{"question":"A treasure hunter finds an ancient map that leads to hidden treasures buried in an n x m grid. The map also indicates certain cells are occupied by obstacles. The hunter can move up, down, left, or right but cannot pass through obstacles. The goal is to find out the minimum number of steps required to reach from the top-left corner of the grid (0, 0) to the bottom-right corner (n-1, m-1). Write a function shortestPath that takes the following parameters: int[][] grid: an n x m grid where 0 represents an empty cell and 1 represents an obstacle. The function should return an integer representing the minimum number of steps required to reach the bottom-right corner from the top-left corner. If there is no possible path, return -1. Function Description Complete the function shortestPath. shortestPath has the following parameter(s): - int[][] grid: a 2D array of integers representing the map grid. Returns - int: the minimum number of steps required to reach the bottom-right corner from the top-left corner or -1 if no path exists. Input Format A single integer t, the number of test cases. For each test case: The first line contains two space-separated integers, n and m, representing the dimensions of the grid. The next n lines each contains m space-separated integers (0 or 1). Constraints 1 ≤ t ≤ 10 1 ≤ n, m ≤ 100 0 ≤ grid[i][j] ≤ 1 Subtask For 60% of the maximum score: 1 ≤ n, m ≤ 50 Sample Input 1 2 3 3 0 0 0 1 1 0 0 0 0 2 2 0 1 1 0 Sample Output 1 4 -1 Explanation 1 Test case 1: The grid is: 0 0 0 1 1 0 0 0 0 The minimum path from (0, 0) to (2, 2) is with steps (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) totaling 4 steps. Test case 2: The grid is: 0 1 1 0 It is impossible to reach the bottom-right corner (1, 1) from the top-left corner (0, 0) due to obstacles blocking all possible paths.","solution":"from collections import deque def shortestPath(grid): Given a 2D grid where 0 represents an empty cell and 1 represents an obstacle, return the minimum number of steps to reach from the top-left corner to the bottom-right corner. If no path exists, return -1. n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 # Directions: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS Initialization queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): i, j = queue.popleft() if i == n-1 and j == m-1: return steps for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == 0 and (ni, nj) not in visited: visited.add((ni, nj)) queue.append((ni, nj)) steps += 1 return -1"},{"question":"Anna is gardening in a rectangular grid garden of size `m x n`. She starts placing flowers at certain cells in the grid. The flowers will spread their seeds to the adjacent cells (up, down, left, right) if those cells are empty. This process of spreading continues until no more flowers can be planted. Anna wants to achieve a fully bloomed garden, i.e., every cell in the garden should have a flower. She needs your help to find the minimum number of initial flowers she should plant so that the entire garden is eventually filled. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 50) — the dimensions of the garden. Output Print the minimum number of initial flowers necessary to fully bloom the garden. Example Input 2 3 Output 2 Input 5 5 Output 4 Notes In the first example, Anna can place flowers in cells (1, 1) and (2, 3). In the next step, flowers spread to cover all cells of the garden. Another placement such as (1, 2) and (2, 2) also works. In the second example, Anna can place flowers at the corners of the garden grid (1, 1), (1, 5), (5, 1), and (5, 5). These flowers will spread and bloom, eventually covering all cells in the garden.","solution":"def minimum_initial_flowers(m, n): Given the dimensions of the garden, returns the minimum number of initial flowers necessary to fully bloom the garden. # The minimum number of flowers needed to cover the entire garden # can be calculated using the ceil of m/2 and n/2 return ((m + 1) // 2) * ((n + 1) // 2)"},{"question":"Kira enjoys strings very much. She is particularly fond of symmetric strings. A string s is symmetric if it reads the same forward and backward. For example, strings \\"radar\\", \\"level\\", and \\"abba\\" are symmetric, but \\"hello\\" and \\"world\\" are not. Kira has n characters and she wants to form the longest possible symmetric string using these characters. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of characters Kira has. The second line contains n characters (a single space separated string) — Kira\'s characters. Each character is a lowercase English alphabet letter. -----Output----- In the first line print the length of the longest symmetric string Kira can form. In the second line print the resulting symmetric string. If multiple answers are possible, print any of them. -----Examples----- Input 7 a b c d c b a Output 7 abcddcba Input 6 a b c d e f Output 1 a","solution":"def longest_symmetric_string(n, characters): from collections import Counter char_count = Counter(characters) odd_char_count = 0 single_mid_char = None for char, count in char_count.items(): if count % 2 != 0: odd_char_count += 1 if single_mid_char is None or count > char_count[single_mid_char]: single_mid_char = char if odd_char_count > 1: char_count[single_mid_char] -= 1 left_half = [] for char, count in sorted(char_count.items()): left_half.append(char * (count // 2)) left_half = \'\'.join(left_half) if single_mid_char: middle = single_mid_char else: middle = \\"\\" symmetric_string = left_half + middle + left_half[::-1] return len(symmetric_string), symmetric_string"},{"question":"Alice is an avid book reader and she tracks her reading habit using a simple list. Each book she reads is either categorized as \\"fiction\\" or \\"non-fiction\\". She wants to know how many books of each category she has read. Given a list of book categories, help Alice categorize them and find the counts of fiction and non-fiction books. Input: The first line contains a single integer n, the number of books. The following n lines each contain a single word, either \\"fiction\\" or \\"non-fiction\\". Output: Two integers, the count of fiction books and the count of non-fiction books. Constraints: 1 ≤ n ≤ 1000 Example: Input: 5 fiction non-fiction fiction fiction non-fiction Output: 3 2 SAMPLE INPUT: 4 non-fiction fiction fiction non-fiction SAMPLE OUTPUT: 2 2","solution":"def count_books(n, book_categories): Returns the count of fiction and non-fiction books. Parameters: n (int): Number of books. book_categories (list of str): List of book categories, either \\"fiction\\" or \\"non-fiction\\". Returns: tuple: Count of fiction and non-fiction books. fiction_count = book_categories.count(\\"fiction\\") non_fiction_count = book_categories.count(\\"non-fiction\\") return fiction_count, non_fiction_count"},{"question":"Two friends, Alice and Bob, are playing a game with cards. They have a deck of cards, and each card has a number written on it. The deck contains exactly `N` cards with integers from `0` to `N-1` (inclusive) such that each card appears exactly once. The game proceeds in turns, with Alice always going first. Each turn consists of a player picking a card from the deck. The player can pick any card from the deck as long as it is not a multiple of any card that has already been picked. The game ends when there are no valid moves left for the current player, who then loses the game. Your task is to determine who will win the game if both players play optimally. Input Format The first line contains an integer `T` denoting the number of test cases. Each test case consists of an integer `N` on a new line, which denotes the number of cards in the deck. Constraints 1 <= T <= 1000 1 <= N <= 1000 Output Format For each test case, print \\"Alice\\" if Alice will win the game or \\"Bob\\" if Bob will win the game in a new line. Sample Input 3 2 3 4 Sample Output Alice Bob Alice Explanation Test case #1: The deck contains cards {0, 1}. Alice starts and can only pick card 1. Bob is left with card 0 and loses because he has no valid move left. Test case #2: The deck contains cards {0, 1, 2}. Alice starts, and no matter which card she picks (let\'s say 1), Bob can always pick a non-multiple of any previously picked card (let\'s say 2 if Alice picked 1). Following optimal play, Bob will ensure Alice has no valid move left, making Bob the winner. Test case #3: The deck contains cards {0, 1, 2, 3}. Alice starts and picks card 3, avoiding picking any lower cards to give Bob fewer optimal choices. Bob now has no card that is a multiple of any previously picked card leading to Alice winning the game. Note: The solution involves understanding the optimal moves and strategy to ensure victory.","solution":"def determine_winner(N): Determines the winner of the game given the number of cards N. # If the number of cards is even, Alice can always pick \'N-1\' and force Bob into a losing position if N % 2 == 0: return \\"Alice\\" else: return \\"Bob\\" def game_outcomes(test_cases): results = [] for N in test_cases: results.append(determine_winner(N)) return results"},{"question":"In a city, there are numerous parks. Each park contains an entrance gate and an exit gate, and all parks have clocks (which are synchronized) located at both gates. People enter at the entrance gate, spend time in the park, and then leave through the exit gate. Each entry and exit event is recorded with a timestamp. Here is your task: Given the timestamps of entry and exit events of visitors in a single park for a single day, you need to determine the average time spent by visitors in that park. The timestamps are in 24-hour format (hh:mm:ss). Write a program to compute the average time spent (in seconds) in the park by visitors. Input: - The first line contains an integer N, the number of visitors. - The next N lines each contain two timestamps: the entry time and the exit time, separated by a space. Output: - Print a single integer representing the average time spent in seconds, rounded down to the nearest integer. Constraints: 1 ≤ N ≤ 1000 The format of the timestamps is hh:mm:ss, and each timestamp is valid. Sample Input: 3 12:00:00 12:14:00 12:05:00 12:35:00 12:10:00 12:40:00 Sample Output: 960 Explanation: The time spent by each of the three visitors in seconds is: 1. (12:14:00 - 12:00:00) = 14 minutes = 840 seconds 2. (12:35:00 - 12:05:00) = 30 minutes = 1800 seconds 3. (12:40:00 - 12:10:00) = 30 minutes = 1800 seconds The average time spent is (840 + 1800 + 1800) / 3 = 4800 / 3 = 1600 seconds. Thus, the output is 1600.","solution":"def calculate_average_time_spent(N, timestamps): from datetime import datetime total_seconds = 0 for entry, exit in timestamps: entry_time = datetime.strptime(entry, \'%H:%M:%S\') exit_time = datetime.strptime(exit, \'%H:%M:%S\') duration = (exit_time - entry_time).seconds total_seconds += duration average_seconds = total_seconds // N return average_seconds"},{"question":"Unique Character String Task Write a function that determines whether a given string contains unique characters. Your function should return true if all characters in the string are unique, and false if there are any duplicate characters. The format A function that takes one string as an input and returns a boolean value. `function hasUniqueChars(str) { return true || false }` Examples hasUniqueChars(\\"abcdef\\") --> true All characters are unique. -------------------------------------------------------------------- hasUniqueChars(\\"aabbcc\\") --> false Contains duplicate characters \'a\', \'b\', and \'c\'. -------------------------------------------------------------------- hasUniqueChars(\\"abcABC\\") --> true Characters are considered case-sensitive. \'a\' and \'A\' are considered different characters. -------------------------------------------------------------------- hasUniqueChars(\\"123!@#\\") --> true All characters, including special symbols and numbers, are unique. Note: testing will be case-sensitive.","solution":"def hasUniqueChars(s): Returns true if all characters in the string `s` are unique, otherwise returns false. # A set to track characters we have seen so far seen = set() for char in s: if char in seen: # If we have already seen this character, it\'s not unique return False seen.add(char) return True"},{"question":"You have been given the task of organizing a grand relay race competition in your city. The race is designed such that each runner will only run one leg of the race and then pass the baton to the next runner. To make the race more interesting, the city roads (represented as nodes) will be connected by one-way roads (edges). Each runner can decide which route to take and the time they take will vary depending on the route they choose. The goal is to determine the minimum total time required to complete the relay race starting from a specified starting point to a designated endpoint. Input format: The first line contains three integers N (the number of intersections), M (the number of one-way roads), and S (the starting intersection), and E (the ending intersection). The next M lines each contain three integers u, v, and t, where u is the starting intersection of the road, v is the ending intersection, and t is the time required to travel from u to v. Output format: Output one integer that represents the minimum total time required to travel from the starting intersection S to the ending intersection E. If there\'s no possible way to reach the endpoint, output -1. Constraints: 1 ≤ N ≤ 10^5 1 ≤ M ≤ 10^5 1 ≤ S, E ≤ N 1 ≤ u, v ≤ N 1 ≤ t ≤ 10^4 SAMPLE INPUT 5 6 1 5 1 2 5 2 3 10 3 4 3 4 5 1 1 3 15 2 5 20 SAMPLE OUTPUT 19 Explanation The shortest path from intersection 1 to intersection 5 is through intersections 2 -> 3 -> 4 -> 5, taking a total of 5 + 10 + 3 + 1 = 19 units of time.","solution":"import heapq def find_min_time(N, M, S, E, roads): # Create the graph graph = {i: [] for i in range(1, N + 1)} for u, v, t in roads: graph[u].append((v, t)) # Dijkstra\'s algorithm to find the shortest path def dijkstra(start, end): pq = [(0, start)] # Priority queue of (total_time, node) distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[start] = 0 while pq: current_time, node = heapq.heappop(pq) if node == end: return current_time if current_time > distances[node]: continue for neighbor, time in graph[node]: new_time = current_time + time if new_time < distances[neighbor]: distances[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return -1 if distances[end] == float(\'inf\') else distances[end] return dijkstra(S, E)"},{"question":"In a magical kingdom, there are n islands connected by m bi-directional bridges. Each bridge has a certain magic energy associated with it. The king of the kingdom wants to place a magical portal on each island such that it connects to exactly one other island. The energy needed to maintain a portal between two islands is equal to the magic energy of the bridge connecting them. If there are multiple bridges, the portal can be placed on any one of them. Given the islands and bridges with their associated magic energies, the king wants to find out the minimum maintenance energy for each island. Input The first line contains two integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of islands and the number of bridges. The next m lines contain three integers u, v, and w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^6) indicating a bi-directional bridge between islands u and v with a magic energy of w. Output Print n numbers, the i-th of them is the minimum energy needed to maintain a portal on the i-th island. Separate numbers with spaces. Examples Input 4 4 1 2 4 2 3 2 3 4 3 4 1 1 Output 1 2 2 1 Input 5 6 1 2 3 2 3 5 3 4 2 4 5 4 1 5 6 2 4 1 Output 3 1 2 1 4 Note In the first example, let\'s consider the minimum energies for maintaining portals: - For island 1: The bridges are 1-2 and 1-4, with energies 4 and 1 respectively. So, the minimum energy is 1. - For island 2, the bridges are 1-2 and 2-3, with energies 4 and 2 respectively. So, the minimum energy is 2. - For island 3, the bridges are 2-3 and 3-4, with energies 2 and 3 respectively. So, the minimum energy is 2. - For island 4, the bridges are 3-4 and 4-1, with energies 3 and 1 respectively. So, the minimum energy is 1. Therefore, the output is 1 2 2 1.","solution":"def minimum_energy_portals(n, m, bridges): Finds the minimum energy needed to maintain a portal for each island. :param n: int - number of islands :param m: int - number of bridges :param bridges: list of tuples - each containing three integers u, v, w indicating a bi-directional bridge between islands u and v with a magic energy of w. :return: list of int - the minimum energy needed for each island from collections import defaultdict # Initialize the minimum energy list with infinity min_energy = [float(\'inf\')] * n # Adjacency list to store the minimum energy bridge for each island graph = defaultdict(list) for u, v, w in bridges: graph[u].append((v, w)) graph[v].append((u, w)) for i in range(1, n + 1): for neighbor, weight in graph[i]: if weight < min_energy[i - 1]: min_energy[i - 1] = weight return min_energy"},{"question":"Given an array of integers A = [a_0, a_1, ldots, a_{n-1}], where each integer represents the height of a building, find the maximum area of a rectangle that can be formed by choosing any number of the contiguous buildings. Constraints * 1 leq n leq 100,000 * 1 leq a_i leq 10^9 for all 0 leq i < n Input The input is given in the following format: n a_0 ; a_1 ; ldots ; a_{n-1} Output Print the maximum area of a rectangle that can be formed by choosing any number of contiguous buildings. Example Input 6 2 1 5 6 2 3 Output 10","solution":"def largest_rectangle_area(heights): Function to calculate the maximum rectangular area in a histogram represented by heights. stack = [-1] # Add a sentinel value for easy index handling max_area = 0 for i in range(len(heights)): while stack[-1] != -1 and heights[stack[-1]] >= heights[i]: height = heights[stack.pop()] width = i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) while stack[-1] != -1: height = heights[stack.pop()] width = len(heights) - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"We have an array of integers of length N. You are allowed to perform the following operation any number of times: * Select two adjacent integers a and b in the array such that a < b. Remove a from the array. Your task is to determine the length of the longest non-decreasing subsequence that can be obtained after performing any number of the above operations. Constraints * 1 ≤ N ≤ 10^5 * -10^9 ≤ array[i] ≤ 10^9 Input The input is given from Standard Input in the following format: N array[1] array[2] ... array[N] Output Print the length of the longest non-decreasing subsequence possible. Examples Input 5 1 3 2 4 5 Output 4 Input 6 4 5 6 3 2 1 Output 3 Input 4 7 3 5 4 Output 2","solution":"def longest_non_decreasing_subsequence_length(n, arr): Determines the length of the longest non-decreasing subsequence that can be obtained. :param n: int - Length of the input array :param arr: list[int] - The input array of integers :return: int - Length of the longest non-decreasing subsequence if n == 0: return 0 # Initializing the list to store LIS values dp = [] for num in arr: if len(dp) == 0 or num >= dp[-1]: dp.append(num) else: # Find the position where we can replace the number num in dp left, right = 0, len(dp) - 1 while left < right: mid = (left + right) // 2 if dp[mid] <= num: left = mid + 1 else: right = mid dp[left] = num return len(dp)"},{"question":"Given a list of integers `nums` and an integer `target`, determine whether there exist three distinct elements in `nums` that add up to the `target`. The function should return a boolean value `True` if such a combination exists, and `False` otherwise. Examples: Input: nums = [1, 2, 3, 4, 5], target = 9 Output: True Explanation: The numbers 1, 3, and 5 add up to 9. Input: nums = [1, 2, 3, 4, 5], target = 20 Output: False Explanation: There are no three numbers that add up to 20. Hints: - Sort the array first. - Use a three-pointer technique to check for the sum. Your Task: You don\'t need to read or print anything. Complete the function that takes a list of integers `nums` and an integer `target` as input and returns a boolean value indicating if there exist three distinct elements that add up to `target`. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(1) Constraints: - 3 ≤ len(nums) ≤ 3000 - -10^4 ≤ nums[i], target ≤ 10^4","solution":"def three_sum(nums, target): Determine if there are three distinct elements in the list that add up to the target. Args: nums: List of integers. target: An integer, the target sum. Returns: A boolean value indicating if such a triplet exists. nums.sort() n = len(nums) for i in range(n - 2): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Write a function that takes a string representing a mathematical expression containing only digits, the plus (+) and minus (-) signs, and evaluates the expression while maintaining the order of operations (addition and subtraction from left to right, ignoring any standard operator precedence). Your task is to implement a function that reads the string from left to right and performs the operations in a sequential manner, returning the result as an integer. **Examples:** ```python evaluate_expression(\\"1+2-3+4-5\\") Expected Result: -1 evaluate_expression(\\"10+5-2+8-4\\") Expected Result: 17 evaluate_expression(\\"100-50+25-10\\") Expected Result: 65 evaluate_expression(\\"0+0-0+0-0\\") Expected Result: 0 ``` Note: The input string will always be a valid mathematical expression with no spaces and will not start or end with a sign.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing only digits, the plus (+) and minus (-) signs from left to right without considering operator precedence. Args: expression (str): A string representing a mathematical expression. Returns: int: The result of evaluating the expression. result = 0 current_number = 0 sign = 1 # 1 for positive, -1 for negative for char in expression: if char.isdigit(): current_number = current_number * 10 + int(char) elif char == \'+\': result += sign * current_number current_number = 0 sign = 1 elif char == \'-\': result += sign * current_number current_number = 0 sign = -1 result += sign * current_number # Add the last number return result"},{"question":"You are tasked with monitoring network packets in a distributed system. The system logs each packet with a specific integer identifier. Your goal is to determine the highest frequency of packet identifiers within a given set of logs. A packet identifier is considered as a positive integer, and your task is to compute the identifier that appears the maximum number of times in the logs. If there are multiple identifiers with the same maximum frequency, return any one of them. -----Input----- The first line of the input contains the integer N, indicating the number of packet identifiers logged. The following N lines each contain a single integer identifier. -----Output----- Output a single line containing a single integer - the identifier that appears the most frequently in the logs. -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ Identifier ≤ 100000 -----Example----- Input: 7 1 2 1 2 3 1 3 Output: 1 -----Explanation----- Example case. The identifier 1 appears 3 times, which is more frequent than any other identifier. Identifiers 2 and 3 each appear only 2 times. Since identifier 1 has the highest frequency, it is returned as the output.","solution":"def most_frequent_packet_identifier(N, packet_identifiers): from collections import Counter if N == 0: return None # Count the frequencies of all packet identifiers frequency = Counter(packet_identifiers) # Find the packet identifier with the maximum frequency most_frequent_id, _ = max(frequency.items(), key=lambda x: x[1]) return most_frequent_id"},{"question":"Given a grid of size N x M filled with positive integers, you are asked to find the maximum sum path from the top-left cell to the bottom-right cell. The path you choose must follow these rules: - You can only move either right or down at any point in time. - You must collect all values from the cells you visit. Write a function to determine this maximum sum path. # Function Signature ```python def max_sum_path(grid: List[List[int]]) -> int: ``` # Input - A single integer `N` (1 ≤ N ≤ 1000), the number of rows. - A single integer `M` (1 ≤ M ≤ 1000), the number of columns. - An `N x M` matrix of integers where each integer is between 1 and 1000. # Output - Return the maximum sum you can achieve by following the rules. # Example ```python assert max_sum_path([ [1, 3, 1], [1, 5, 1], [4, 2, 1] ]) == 12 ``` # Explanation In the example above, the maximum sum path is 1 → 3 → 5 → 2 → 1 which sums up to 12.","solution":"from typing import List def max_sum_path(grid: List[List[int]]) -> int: Returns the maximum sum path from top-left to bottom-right in a grid. You can only move right or down at any point in time. n = len(grid) m = len(grid[0]) # Create a DP table with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Initialize the first cell with the value from grid dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value in the bottom-right cell is the answer return dp[-1][-1]"},{"question":"You are given a string `s` consisting of lowercase English letters, and an integer `k`. Your task is to determine if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If it is possible, return such a permutation with the specified restriction. If it is not possible, return the string \\"Not Possible\\". Additionally, if there are multiple valid permutations, return the lexicographically smallest one. # Input - A string `s` of length 1 leq len(s) leq 1000, consisting only of lowercase English letters. - An integer `k` where 1 leq k leq len(s). # Output - If a valid rearrangement of the string is possible, print the lexicographically smallest permutation where no two adjacent characters are the same. - If it is not possible to create such a permutation, print \\"Not Possible\\". # Example Input ``` aaabc 2 ``` Output ``` abaca ``` Input ``` aaab 2 ``` Output ``` Not Possible ``` # Explanation For the first example input, it\'s possible to rearrange the string \\"aaabc\\" to \\"abaca\\" such that no two adjacent characters are the same. \\"abaca\\" is the lexicographically smallest such permutation. For the second example input, it\'s impossible to rearrange \\"aaab\\" in a way that no two adjacent characters are the same when `k=2`.","solution":"import heapq from collections import Counter def rearrange_string(s, k): if k == 1: return \'\'.join(sorted(s)) # For k = 1, just return the sorted string counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) queue = [] result = [] while max_heap or queue: if queue and queue[0][1] <= len(result): heapq.heappush(max_heap, queue.pop(0)[0]) if not max_heap: return \'Not Possible\' freq, char = heapq.heappop(max_heap) result.append(char) if -freq > 1: queue.append(((freq + 1, char), len(result) + k - 1)) return \'\'.join(result)"},{"question":"Alice and Bob Play a Game- Problem Alice and Bob play a game on an N x N grid initialized with zeros. In each move, Alice and Bob alternately play, starting with Alice. Each player must choose a cell in the grid and increase its value by 1. Alice always tries to maximize the sum of the values in all cells, while Bob tries to minimize the sum of the values in all cells of the grid. The game ends after M moves. Determine the final sum of the values in the grid after M moves, assuming both players play optimally. Input format The input is given in the following format: N M * N is an integer and satisfies 1 ≤ N ≤ 100. * M is an integer and satisfies 1 ≤ M ≤ 10^5. Output format Output a single integer representing the final sum of the values in the grid after M moves. Input example 1 3 5 Output example 1 5 Input example 2 4 10 Output example 2 10 Explanation For the first example, the game is played on a 3 x 3 grid. After 5 moves: - Alice plays optimally to increase the sum: she selects an empty cell (any empty cell, say (0, 0)) and increases its value by 1. - Bob then tries to minimize the sum by choosing any of the remaining cells, but since Alice will always maximize on her next turn, Bob\'s choice leads to an increase regardless. - Alice takes her next turn and increases the value of another empty cell by 1. - Bob follows the same strategy. - Eventually, after 5 moves, each move increases the game grid\'s total sum by 1, resulting in a sum of 5 after the game ends.","solution":"def final_sum(N, M): Returns the final sum of the values in the grid after M moves # Each move increases the total sum by 1 irrespective of who plays return M"},{"question":"A forest is being planted with a set of distinct tree species, each identified by a unique species number. Each species can be planted in one or more rows. You have been given the species numbers of the trees that will be planted in each row of the forest. Your task is to compute how many distinct species of trees are there in the forest, and identify the specific species numbers. Given species numbers may be large, so make sure that your solution handles large numbers efficiently. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of rows of trees to be planted. Each of the next n lines contains a list of space-separated integers representing the species numbers of the trees in that particular row. -----Output----- Print a single integer — the number of distinct species of trees in the forest. Then on the next line, print the distinct species numbers in ascending order, space-separated. -----Examples----- Input 3 1 2 3 3 4 5 5 6 1 Output 6 1 2 3 4 5 6 Input 2 1000000000 999999999 1000000000 999999998 Output 3 999999998 999999999 1000000000 -----Note----- In the first example, species numbers 1, 2, 3, 4, 5, 6 are present in the entire forest. In the second example, species numbers 1000000000, 999999999, 999999998 are present in the entire forest, despite large numbers, and they are identified efficiently.","solution":"def count_distinct_species(n, rows): Function to count the distinct species of trees in the forest and return the distinct species numbers in ascending order. Parameters: n (int): Number of rows. rows (list of list of int): Species numbers of the trees in each row. Returns: int: Number of distinct species. list: List of distinct species numbers in ascending order. species_set = set() for row in rows: for species in row: species_set.add(species) species_list = sorted(species_set) return len(species_set), species_list"},{"question":"Given an array of positive integers, find the maximum product of any two distinct elements in the array. Your task is to write a function that returns this maximum product. Example 1: Input: arr[] = [1, 2, 3, 4, 5] Output: 20 Explanation: The two distinct elements that give the maximum product are 4 and 5. Hence, the product is 4 * 5 = 20. Example 2: Input: arr[] = [10, 20, 30] Output: 600 Explanation: The two distinct elements that give the maximum product are 20 and 30. Hence, the product is 20 * 30 = 600. Function Signature: ```python def maxProduct(arr: List[int], n: int) -> int: # your code here ``` Constraints: - 2 ≤ N ≤ 10^5 - 1 ≤ arr[i] ≤ 10^9 Your Task: - Implement the function `maxProduct(arr: List[int], n: int) -> int` that takes an array of integers `arr` of size `n` as input and returns the maximum product of any two distinct elements in the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1)","solution":"from typing import List def maxProduct(arr: List[int], n: int) -> int: Finds the maximum product of any two distinct elements in the array. if n < 2: # If there are fewer than 2 elements, no product can be formed return 0 # Initialize the two largest elements max1 = max(arr[0], arr[1]) max2 = min(arr[0], arr[1]) for i in range(2, n): if arr[i] > max1: max2 = max1 max1 = arr[i] elif arr[i] > max2: max2 = arr[i] return max1 * max2"},{"question":"Farmer John is keeping track of his cows. He has a list of cows represented by integers from 1 to N, which indicates their unique IDs. Each cow has a specific weight and a specific height. Farmer John wants to find out which cow has the maximum product of weight and height, in case of ties, the cow with the smaller ID should be considered. ------ Input Format ------ - The first line contains a single integer N, the number of cows. - Each of the next N lines contains two integers, W and H, representing the weight and height of each cow, respectively. ------ Output Format ------ Output the ID of the cow which has the maximum product of weight and height. If multiple cows have the same maximum product, output the smallest ID among them. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ W, H ≤ 1000 ------ Sample Input 1 ------ 4 2 3 4 5 2 6 3 5 ------ Sample Output 1 ------ 2 ------ Explanation 1 ------ Cow 1: Product = 2 * 3 = 6 Cow 2: Product = 4 * 5 = 20 Cow 3: Product = 2 * 6 = 12 Cow 4: Product = 3 * 5 = 15 The maximum product is from cow 2, which is 20. Hence, the answer is cow 2.","solution":"def find_max_product_cow(cows): Finds the ID of the cow with the maximum product of weight and height. In case of ties, the cow with the smaller ID is chosen. Parameters: cows (list of tuples): List of tuples where each tuple contains two integers (W, H) Returns: int: The ID of the cow with the maximum product max_product = -1 max_product_id = -1 for i, (w, h) in enumerate(cows, start=1): product = w * h if product > max_product or (product == max_product and i < max_product_id): max_product = product max_product_id = i return max_product_id"},{"question":"Given an inclusive range from A to B (both in Celsius), Chef\'s refrigerator can maintain a temperature within this range. You are provided with various temperatures X, and you need to determine if Chef\'s refrigerator can maintain it within the given range. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The next line will contain two integers, A and B, the range of temperatures the refrigerator can maintain inclusive. - Each of the next T lines will contain a single integer X, the temperature to be checked. ------ Output Format ------ For each test case, output on a new line YES, if the refrigerator can maintain the temperature X. Otherwise, print NO. The output is case-insensitive. Thus, the strings YES, yes, yeS, and Yes are all considered the same. ------ Constraints ------ 1 ≤ T ≤ 10^4 -1000 ≤ A ≤ B ≤ 1000 -1000 ≤ X ≤ 1000 ------ Sample Input 1 ------ 5 -10 25 -15 -5 0 25 30 ------ Sample Output 1 ------ NO YES YES YES NO ------ Explanation 1 ------ Test case 1: The temperature -15 is less than -10. Thus, it cannot be maintained by the refrigerator. Test case 2: The temperature -5 lies within the range [-10, 25]. Thus, it can be maintained by the refrigerator. Test case 3: The temperature 0 lies within the range [-10, 25]`. Thus, it can be maintained by the refrigerator. Test case 4: The temperature 25 lies within the range [-10, 25]`. Thus, it can be maintained by the refrigerator. Test case 5: The temperature 30 is greater than 25. Thus, it cannot be maintained by the refrigerator.","solution":"def can_maintain_temperature(T, A, B, temperatures): Determine if temperatures can be maintained within the given range [A, B]. Parameters: T: int -> Number of test cases. A: int -> Lower bound of the temperature range. B: int -> Upper bound of the temperature range. temperatures: list[int] -> List of temperatures to check. Returns: list[str] -> List with \\"YES\\" or \\"NO\\" for each temperature. result = [] for temp in temperatures: if A <= temp <= B: result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to find the length of the longest substring which does not contain any vowel (\'a\', \'e\', \'i\', \'o\', \'u\'). -----Input----- The first line of the input contains a single string `s` (1 leq |s| leq 10^5). -----Output----- Output a single integer — the length of the longest substring that contains no vowels. -----Examples----- Input abcdeiouxyz Output 3 Input leetcode Output 3 Input rhythm Output 6 -----Note----- In the first example, the longest substring without vowels is \\"xyz\\" with length 3. In the second example, the longest substring without vowels is \\"tcd\\" with length 3. In the third example, the entire string \\"rhythm\\" does not contain any vowels, so the answer is 6.","solution":"def longest_substring_without_vowels(s): Returns the length of the longest substring not containing any vowels. vowels = set(\'aeiou\') max_length = 0 current_length = 0 for char in s: if char in vowels: max_length = max(max_length, current_length) current_length = 0 else: current_length += 1 return max(max_length, current_length)"},{"question":"Given an array of integers, you are required to determine if there exists a non-empty subarray whose sum is equal to a given target value. If such a subarray exists, print the length of the shortest subarray. Otherwise, print `-1`. A subarray is defined as a contiguous part of the array. For instance, in the array `[1, 2, 3, 4, 5]`, subarrays can be `[1, 2]`, `[2, 3, 4]`, or the entire array itself. # Input The first line of the input contains a single integer `T` (1 le T le 1000) — the number of test cases. Each test case consists of two lines. - The first line contains two integers `n` and `S` (1 le n le 2 cdot 10^5, -10^9 le S le 10^9) — the length of the array and the target sum, respectively. - The second line contains `n` integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. It\'s guaranteed that the total length of all arrays in one test does not exceed 2 cdot 10^5. # Output For each test case, print a single integer — the length of the shortest subarray whose sum equals `S`, or `-1` if no such subarray exists. # Example Input ``` 3 5 7 1 2 3 4 5 6 15 1 2 3 4 5 -1 3 0 1 -1 1 ``` Output ``` 3 5 2 ``` # Note In the first test case, the subarray `[3, 4]` has a sum of `7` and its length is `3`. In the second test case, the subarray `[1, 2, 3, 4, 5]` has a sum of `15` and its length is `5`. In the third test case, the subarray `[-1, 1]` has a sum of `0` and its length is `2`.","solution":"def shortest_subarray_with_sum(arr, target): Finds the length of the shortest subarray with a sum equal to target. Returns -1 if no such subArray is found. n = len(arr) prefix_sum = {0: -1} # To store (current_sum : index) current_sum = 0 min_length = float(\'inf\') for i in range(n): current_sum += arr[i] if (current_sum - target) in prefix_sum: min_length = min(min_length, i - prefix_sum[current_sum - target]) prefix_sum[current_sum] = i return min_length if min_length != float(\'inf\') else -1 def solve_cases(T, test_cases): results = [] for case in test_cases: n, S, arr = case results.append(shortest_subarray_with_sum(arr, S)) return results"},{"question":"F: Connected Components in Graph Problem Statement You are given an undirected graph with N vertices and M edges. The vertices are numbered from 1 to N. Each edge connects two distinct vertices i and j (1 le i, j le N). Your task is to find the number of connected components in the graph. A connected component of a graph is a set of vertices where there is a path between any two vertices in the set, and which is connected to no additional vertices in the supergraph. Input N M u_1 v_1 u_2 v_2 ... u_M v_M Constraints * 1 le N le 100000 * 0 le M le 100000 * 1 le u_i, v_i le N Output Output a single integer representing the number of connected components in the graph. Sample Input 1 5 2 1 2 3 4 Output for Sample Input 1 3 Sample Input 2 6 3 1 2 2 3 4 5 Output for Sample Input 2 3 Sample Input 3 4 0 Output for Sample Input 3 4 Sample Input 4 10 5 1 2 3 4 5 6 7 8 9 10 Output for Sample Input 4 5 Example Input 5 2 1 2 3 4 Output 3","solution":"def find_connected_components(n, m, edges): from collections import defaultdict, deque def bfs(start, visited, adjacency_list): queue = deque([start]) while queue: vertex = queue.popleft() for neighbor in adjacency_list[vertex]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (n + 1) component_count = 0 for vertex in range(1, n + 1): if not visited[vertex]: visited[vertex] = True component_count += 1 bfs(vertex, visited, adjacency_list) return component_count"},{"question":"Write a program that determines whether a given string is a palindrome after removing all non-alphanumeric characters and converting all uppercase letters to lowercase. Constraints * The input string only contains printable ASCII characters. Input Input is given from Standard Input in the following format: s Output If the processed string is a palindrome, print `Yes`; otherwise, print `No`. Examples Input A man, a plan, a canal, Panama Output Yes Input Hello, World! Output No","solution":"def is_palindrome(s): Determines whether the given string is a palindrome after removing all non-alphanumeric characters and converting all uppercase letters to lowercase. Args: s (str): Input string Returns: str: \'Yes\' if the processed string is a palindrome, \'No\' otherwise # Filter out non-alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list of characters is equal to its reversed version return \'Yes\' if filtered_chars == filtered_chars[::-1] else \'No\'"},{"question":"Arun is a budding coder who is fascinated by sequences. During his exploration of number sequences, he stumbled upon the concept of arithmetic progression (AP). He decides to write a program to determine if a given sequence of integers can be rearranged to form an arithmetic progression. A sequence is an arithmetic progression if the difference between consecutive terms is constant. Your task is to help Arun write a program that checks whether the given sequence of integers can be rearranged to form an arithmetic progression. -----Input----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of integers in the sequence. The second line of each test case contains N space-separated integers representing the sequence. -----Output----- For each test case, output \\"YES\\" if the sequence can be rearranged to form an arithmetic progression, otherwise, output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 10^4 - -10^9 ≤ sequence[i] ≤ 10^9 -----Example----- Input: 3 3 3 1 2 4 1 2 4 5 5 5 1 3 2 4 Output: YES NO YES -----Explanation----- Example case 1: The sequence [3, 1, 2] can be rearranged to [1, 2, 3], which is an arithmetic progression with common difference 1. Example case 2: The sequence [1, 2, 4, 5] cannot be rearranged to form an arithmetic progression. Example case 3: The sequence [5, 1, 3, 2, 4] can be rearranged to [1, 2, 3, 4, 5], which is an arithmetic progression with common difference 1.","solution":"def can_form_ap(sequence): Checks if the given sequence can be rearranged to form an arithmetic progression. sequence.sort() common_diff = sequence[1] - sequence[0] for i in range(2, len(sequence)): if sequence[i] - sequence[i - 1] != common_diff: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for n, sequence in test_cases: results.append(can_form_ap(sequence)) return results def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) sequence = list(map(int, lines[index + 1].split())) test_cases.append((N, sequence)) index += 2 results = process_test_cases(test_cases) for result in results: print(result) # Example usage: input_data = 3 3 3 1 2 4 1 2 4 5 5 5 1 3 2 4 main(input_data)"},{"question":"Develop a function that takes a list of integers and returns a new list containing those integers that are perfect squares. A perfect square is an integer that is the square of an integer. For example, 1, 4, 9, and 16 are perfect squares, but 2, 3, 5, and 10 are not. INPUT First line inputs the size of the list, N. Second line inputs N integers which make up the list. OUTPUT Output a list containing only the perfect squares from the original list. If no perfect squares are found, return an empty list. CONSTRAINTS 1 <= N <= 100 -10^5 <= integer <= 10^5 SAMPLE INPUT 10 1 2 3 4 5 6 7 8 9 10 SAMPLE OUTPUT [1, 4, 9] Explanation The entered list is [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. Among these integers, 1, 4, and 9 are perfect squares. Therefore, the output list should contain [1, 4, 9].","solution":"import math def find_perfect_squares(size, lst): Returns a list containing the perfect squares from the given list. Parameters: - size: int, the size of the list - lst: list of int, the list of integers Returns: - list of int, the list containing only perfect squares perfect_squares = [] for num in lst: if num >= 0 and math.isqrt(num) ** 2 == num: perfect_squares.append(num) return perfect_squares"},{"question":"Nina loves coding interviews especially when she needs to deal with strings. This time she has been asked to perform a specific task involving strings in a job interview. You are given a string s consisting only of lowercase English letters. Your task is to determine if it\'s possible to construct the string s by repeating exactly one of its non-empty substrings several times. If it is possible, print \\"Yes\\" and the substring that can be repeated to construct the string s. If it is not possible, print \\"No\\". -----Input----- The first line contains a single string s (1 ≤ |s| ≤ 10^5) — the string to check. -----Output----- Print \\"Yes\\" and the non-empty substring if it is possible to construct the entire string by repeating the substring. Else, print \\"No\\". -----Examples----- Input abab Output Yes ab Input abcd Output No -----Note----- In the first sample, the substring \\"ab\\" can be repeated to construct the entire string \\"abab\\". In the second sample, there are no repeating substrings that can construct the entire string \\"abcd\\".","solution":"def repeated_substring_pattern(s): Determines if the string can be constructed by repeating some non-empty substring. Args: s (str): the string to check Returns: tuple: (\\"Yes\\", substring) if possible, (\\"No\\", ) otherwise n = len(s) for i in range(1, n//2 + 1): if n % i == 0: substring = s[:i] if substring * (n // i) == s: return \\"Yes\\", substring return \\"No\\","},{"question":"A function `rearrangeDigits` is defined such that it rearranges the digits of a given positive integer to form the largest possible number. Given an integer num, implement the function `largestDigitArrangement` to compute this largest possible number formed from the digits of num. Example 1: Input: num = 2931 Output: 9321 Explanation: Arranging the digits of 2931 yields 9321, which is the largest number that can be formed. Example 2: Input: num = 432 Output: 432 Explanation: Arranging the digits of 432 already yields the largest possible number, which is 432. Your Task: You do not need to read input or print anything. Your task is to complete the function `largestDigitArrangement(num)` which takes an integer num as input parameter and returns the largest possible number formed by rearranging its digits. Expected Time Complexity: O(d log d), where d is the number of digits in num. Expected Auxiliary Space: O(d) Constraints: 1 ≤ num ≤ 10^9","solution":"def largestDigitArrangement(num): Rearranges the digits of the input number to form the largest possible number. Parameters: num (int): A positive integer whose digits are to be rearranged Returns: int: The largest possible number formed by rearranging the digits of num # Convert the number to a string to process the digits num_str = str(num) # Sort the digits in descending order sorted_digits = sorted(num_str, reverse=True) # Join the sorted digits to form the largest possible number largest_num_str = \'\'.join(sorted_digits) # Convert the result back to an integer largest_num = int(largest_num_str) return largest_num"},{"question":"Your task is to find out the number of distinct words in a given text. The text contains words composed of lowercase and uppercase Latin letters, punctuation, and spaces. For this task, a word is defined as a sequence of characters separated by spaces or punctuation. You need to implement a function that determines the number of distinct words in the input text. Words should be compared case-insensitively, meaning \\"Hello\\" and \\"hello\\" should be considered the same word. Input Input data contains a single string `text`, where the length of the string is between 1 and 1000 characters. Output Output the number of distinct words in the input text. Examples Input \\"Hello, world! Hello, Python.\\" Output 3 Input \\"A quick brown fox jumps over the lazy dog. A QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\\" Output 9 Note In the first case, the distinct words are \\"hello\\", \\"world\\", and \\"python\\". In the second case, all words are repeated in different cases, so the total number of distinct words is 9.","solution":"import re def count_distinct_words(text): Returns the number of distinct words in the input text. Words are compared case-insensitively. # Use regex to find all words in the text words = re.findall(r\'bw+b\', text) # Convert all words to lowercase to ensure case-insensitive comparison distinct_words = set(word.lower() for word in words) return len(distinct_words)"},{"question":"Write a function that takes a string of lowercase English letters and outputs the first character that does not repeat anywhere in the string. If all characters repeat, return an empty string \'\'. Function Signature: ```python def first_non_repeating_char(s: str) -> str: pass ``` # Input - A string, `s` (1 <= len(s) <= 10^5) # Output - A single character that is the first non-repeating character in the string. - An empty string \'\' if all characters are repeating. # Example ```python assert first_non_repeating_char(\\"swiss\\") == \\"w\\" assert first_non_repeating_char(\\"aabbcc\\") == \\"\\" assert first_non_repeating_char(\\"alphabet\\") == \\"l\\" ``` # Constraints - The solution should be efficient, ideally O(n) in time complexity where `n` is the length of the input string.","solution":"def first_non_repeating_char(s: str) -> str: Returns the first non-repeating character in the string `s`. If all characters repeat, returns an empty string. from collections import Counter # Count occurrences of each character char_count = Counter(s) # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no such character is found, return an empty string return \'\'"},{"question":"A city plans to build a network of roads connecting various locations. Each road is a straight line segment between two locations. The roads are such that no two roads overlap except possibly at their endpoints. The goal is to determine if it is possible to create a road network that connects all locations directly or indirectly, with exactly one road connecting each pair of locations. Your task is to write a program that determines if the network can be built such that all locations are connected via these roads without any two roads overlapping except at endpoints. -----Input----- The input consists of: - one line with an integer n (2 leq n leq 1000), the number of locations; - n lines, each with two integers x_i and y_i (-10^4 le x_i, y_i leq 10^4), the coordinates of each location. -----Output----- If it is possible to build the desired road network, output “possible”. Otherwise, output “impossible”. -----Examples----- Sample Input 1: 4 0 0 0 3 4 3 4 0 Sample Output 1: possible Sample Input 2: 3 0 0 1 1 2 0 Sample Output 2: impossible Note: In the first example, a possible network can consist of roads connecting (0,0) to (4,0), (0,3) to (4,3), and (0,0) to (0,3). In the second example, no such roads can be constructed without overlapping except at endpoints.","solution":"def is_possible_network(n, locations): # A network is possible iff the number of locations (n) is >= 4 (as a simple polygon needs at least 4 vertices) # Alternatively, for exactly 3 points, they must be collinear to avoid non-integral overlaps from itertools import combinations from math import isclose if n == 2: return \\"possible\\" if n < 4: xs = [loc[0] for loc in locations] ys = [loc[1] for loc in locations] # Check if all points are collinear (x1, y1), (x2, y2), (x3, y3) = locations return \\"possible\\" if (y3 - y1) * (x2 - x1) == (y2 - y1) * (x3 - x1) else \\"impossible\\" # For n >= 4 we assume the locations can form a polygon without crossing # as we can always select distinct pairs of points to form simple polygon edges return \\"possible\\""},{"question":"You are working on a project management tool where tasks need to be managed. Each task has a unique identifier and a list of dependencies (i.e., other tasks that must be completed before this one can be started). Implement a function to determine the order in which the tasks should be completed. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line contains an integer t (1 le t le 500), the number of tasks. The next t lines each contain: - A unique identifier for the task, task_i (1 le task_i le t) - A list of space-separated integers representing the identifiers of the tasks that the current task depends on. If the current task has no dependencies, this list will be empty. -----Output----- Output the order in which the tasks should be completed, separated by spaces. If there are multiple valid orders, any of them will be accepted. If the tasks cannot be completed due to a circular dependency, output \\"IMPOSSIBLE\\". -----Examples----- Sample Input 1: 4 1 2 3 2 3 4 4 Sample Output 1: 2 4 3 1 Sample Input 2: 2 1 2 2 1 Sample Output 2: IMPOSSIBLE","solution":"from collections import defaultdict, deque def find_task_order(t, tasks): graph = defaultdict(list) indegree = {i: 0 for i in range(1, t + 1)} for task in tasks: task_id = task[0] dependencies = task[1] for dep in dependencies: graph[dep].append(task_id) indegree[task_id] += 1 queue = deque([key for key in indegree if indegree[key] == 0]) result = [] while queue: current = queue.popleft() result.append(current) for neighbor in graph[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) if len(result) == t: return \\" \\".join(map(str, result)) else: return \\"IMPOSSIBLE\\" # Main function to read input and produce output def task_order(t, task_descriptions): tasks = [] for desc in task_descriptions: parts = list(map(int, desc.split())) tasks.append((parts[0], parts[1:])) return find_task_order(t, tasks) # Example Usage: # task_order(4, [\\"1 2 3\\", \\"2\\", \\"3 4\\", \\"4\\"])"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},Y={key:0,class:"empty-state"},j=["disabled"],P={key:0},R={key:1};function M(s,e,u,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",P,"See more"))],8,j)):l("",!0)])}const z=d(A,[["render",M],["__scopeId","data-v-61d9272c"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/2.md","filePath":"deepseek/2.md"}'),L={name:"deepseek/2.md"},U=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,U as default};
