import{_ as d,o as n,c as r,a as t,m as c,t as h,C as g,M as b,U as _,f as l,F as y,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function A(i,e,u,p,s,a){return n(),r("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",A],["__scopeId","data-v-8d69c90b"]]),O=JSON.parse('[{"question":"In a distant world, there exist mystical trees known as Leafaltrons. Each Leafaltron has a certain number of leaves, and their health is determined by the energy level of these leaves, which is some positive integer. When a Leafaltron loses a leaf, its overall health decreases proportionally to the energy of that leaf. During the annual celebration, Leafaltrons from different regions gather to exchange leaves. The exchange of leaves between two Leafaltrons of the same region follows certain rules: - A Leafaltron with more leaf energy will lose a leaf to a Leafaltron with less or equal leaf energy from the same region. - The process continues until no more leaves can be exchanged between two Leafaltrons from the same region. Each Leafaltron can be represented by a tuple (R, E), where R signifies the region and E represents the total energy of its leaves. For example, a Leafaltron with 50 units of energy in region 1 can be represented as (1, 50). The celebration aims for a perfect exchange cycle, meaning after the exchanges, every Leafaltron within a region should ideally acquire leaves such that their energy levels are as equal as possible. Your task is to determine the final health status of each Leafaltron after the exchanges. ----Input---- The first line of the input contains an integer T, the number of test cases. T test cases follow. Each test case starts with an integer N, the number of Leafaltrons participating in the celebration. Each of the next N lines contains two space-separated integers Ri and Ei, denoting the region and the initial leaf energy of the ith Leafaltron. ----Output---- For each test case, output the final energy levels of Leafaltrons after the leaf exchanges in each region, sorted by the initial order of input. ----Constraints---- - Each integer in the input file is positive and does not exceed 100. - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ Ri, Ei ≤ 100 ----Example---- Input: 2 3 1 30 1 50 1 10 4 2 25 2 75 3 20 3 30 Output: 30 30 30 25 75 25 25 Explanation: Case 1: - Initial Leafaltrons: (1, 30), (1, 50), (1, 10) - After exchanges within region 1: - (30, 50) exchange leaves once since 50 > 30, resulting in (40, 40) - (10, 40) exchange leaves once since 40 > 10, resulting in (20, 30) - Continue the process to achieve as equal energy levels as possible, resulting in (30, 30, 30) Case 2: - Initial Leafaltrons: (2, 25), (2, 75) - After exchanges within region 2: - Since 75 > 25, exchange results in (50, 50) - Initial Leafaltrons: (3, 20), (3, 30) - After exchanges within region 3: - Since 30 > 20, exchange results in (25, 25) Thus the final energies are outputted in the initial input sequence order.","solution":"def leafaltron_exchanges(T, test_cases): This function takes in the number of test cases T and the test cases as input, and returns the final energy levels of Leafaltrons after the leaf exchanges in each region. result = [] for i in range(T): N = test_cases[i][0] leafaltrons = test_cases[i][1] regions = {} for region, energy in leafaltrons: if region not in regions: regions[region] = [] regions[region].append(energy) final_energies = [] for region, energies in regions.items(): total_energy = sum(energies) num_leafaltrons = len(energies) average_energy = total_energy // num_leafaltrons remainder = total_energy % num_leafaltrons balanced_energies = [average_energy] * num_leafaltrons for j in range(remainder): balanced_energies[j] += 1 regions[region] = sorted(balanced_energies) for region, energy in leafaltrons: final_energies.append(regions[region].pop(0)) result.append(final_energies) return result"},{"question":"Two friends, Alice and Bob, like to play a game involving sequences of numbers. They take turns in picking a number from the sequence such that Alice always picks the largest remaining even number, and Bob always picks the largest remaining odd number. If the required type of number is not available (i.e., Alice needs to pick an even number but none are left, or Bob needs to pick an odd number but none are left), then the game stops. The player who cannot make a move loses the game. Given a sequence of integers, determine the winner assuming Alice always goes first. -----Input----- The first line contains an integer N, the length of the sequence (1 ≤ N ≤ 500). The second line contains N integers separated by space - the elements of the sequence. Each integer in the sequence is in the range -10^7 to 10^7. -----Output----- Output \\"ALICE\\" if Alice wins the game, \\"BOB\\" if Bob wins the game, and \\"TIE\\" if neither can make a move from the start. -----Example----- Input: 6 1 2 3 5 7 8 Output: BOB Explanation: Initially, the sequence is [1, 2, 3, 5, 7, 8]. Alice starts and picks the largest even number: 8. Sequence now: [1, 2, 3, 5, 7]. Bob picks the largest odd number: 7. Sequence now: [1, 2, 3, 5]. Alice picks the largest even number: 2. Sequence now: [1, 3, 5]. Bob picks the largest odd number: 5. Sequence now: [1, 3]. Alice can no longer pick an even number since none are left. Bob wins. Note that if no even numbers were in the sequence from the beginning, Alice could never make a move and \\"BOB\\" would be the output since Alice would lose immediately. Similarly, if no odd numbers were present, \\"ALICE\\" would be the output since Bob could not move. If the sequence started as empty (N = 0), output \\"TIE\\".","solution":"def determine_winner(sequence): Determines the winner of the game where Alice picks the largest remaining even number and Bob picks the largest remaining odd number. Parameters: sequence (list): List of integers representing the sequence. Returns: str: \\"ALICE\\" if Alice wins, \\"BOB\\" if Bob wins, \\"TIE\\" if neither can make a move from the start. evens = sorted([num for num in sequence if num % 2 == 0], reverse=True) odds = sorted([num for num in sequence if num % 2 != 0], reverse=True) turn = \'ALICE\' while True: if turn == \'ALICE\': if evens: evens.pop(0) else: return \'BOB\' turn = \'BOB\' else: if odds: odds.pop(0) else: return \'ALICE\' turn = \'ALICE\' # Examples for verification print(determine_winner([1, 2, 3, 5, 7, 8])) # Output: \\"BOB\\" print(determine_winner([2, 4, 6])) # Output: \\"ALICE\\" print(determine_winner([1, 3, 5])) # Output: \\"BOB\\" print(determine_winner([1, 2, 3, 4, 5, 6])) # Output: \\"BOB\\" print(determine_winner([1])) # Output: \\"BOB\\""},{"question":"In this task, you need to write a function that takes a list of integers and returns the maximum sum of any non-empty contiguous subarray within the list. This is a common problem in computer science, known as the Maximum Subarray Problem or Kandane’s Algorithm. You are given an integer array `nums`. Find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. # Example ```python # Example 1: # Input: nums = [-2,1,-3,4,-1,2,1,-5,4] # Output: 6 # Explanation: [4,-1,2,1] has the largest sum = 6. # Example 2: # Input: nums = [1] # Output: 1 # Explanation: [1] has the largest sum = 1. # Example 3: # Input: nums = [5,4,-1,7,8] # Output: 23 # Explanation: [5,4,-1,7,8] has the largest sum = 23. ``` # Constraints - 1 <= nums.length <= 10^4 - -10^5 <= nums[i] <= 10^5 # Instructions 1. Define a function `max_subarray_sum(nums: List[int]) -> int`. 2. The function should take a list of integers as input. 3. It should return an integer, which is the maximum sum of any contiguous subarray within the input list. 4. Ensure that your solution is optimized to handle the upper limit of the input constraints efficiently.","solution":"from typing import List def max_subarray_sum(nums: List[int]) -> int: Returns the maximum sum of any non-empty contiguous subarray within the list nums. This is solved using Kadane\'s Algorithm. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Chef has been working hard calculating various operations manually. To take a break, he decided to create a simpler, yet interesting task for fellow coders. Chef wants to find out the sum of all even digits present in a given natural number. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, a natural number N. -----Output:----- For each test case, output a single line with the sum of all even digits in N. If there are no even digits, output 0. -----Constraints----- - 1 leq T leq 10^6 - 1 leq N leq 10^{18} -----Sample Input:----- 3 123456 24680 13579 -----Sample Output:----- 12 20 0 -----EXPLANATION:----- For 1) The even digits in 123456 are 2, 4, and 6, and their sum is 12. For 2) All digits in 24680 are even, and their sum is 2 + 4 + 6 + 8 + 0 = 20. For 3) There are no even digits in 13579, so the output is 0.","solution":"def sum_of_even_digits(N): Returns the sum of all even digits in the given natural number N. even_digits_sum = 0 for digit in str(N): if int(digit) % 2 == 0: even_digits_sum += int(digit) return even_digits_sum def process_test_cases(T, test_cases): For each test case, return the sum of all even digits of the given natural number. results = [] for i in range(T): N = test_cases[i] results.append(sum_of_even_digits(N)) return results"},{"question":"Given a string of characters, write a program to find out the first non-repeating character in it. If there is no non-repeating character, return an underscore (\'_\'). -----Input----- The input will be a single line containing a string s (1 ≤ |s| ≤ 10^6) where each character could be a lowercase English letter. -----Output----- Output the first non-repeating character in the given string. If all characters repeat, output an underscore (\'_\') instead. -----Examples----- Input abracadabra Output c Input aabbcc Output _ Input swiss Output w -----Note----- In the first example, \'a\', \'b\', and \'r\' all repeat but \'c\' does not, hence the output. In the second example, all characters repeat, so the output is an underscore. In the third example, \'s\' repeats but \'w\' does not, hence \'w\' is the output.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the given string. If all characters repeat, returns an underscore (\'_\'). from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # Iterate through the string and return the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no non-repeating character is found, return \'_\' return \'_\'"},{"question":"You are given an array of integers. Write a function to find a pair of integers in the array whose product is larger than any other pair of integers in the array. Return the pair as a tuple. Constraints: 1. The array will contain at least two integers. 2. The integers can be both positive and negative. 3. If there are multiple pairs with the same maximum product, return any one of the pairs. Example: ```python array = [-10, -3, 5, 6, -2] max_product_pair(array) # Should return (5, 6) or any other correct pair array = [1, 4, 3, 6, 7, 0] max_product_pair(array) # Should return (6, 7) or any other correct pair ```","solution":"def max_product_pair(arr): Returns a pair of integers in the array whose product is larger than any other pair of integers in the array. if len(arr) < 2: raise ValueError(\\"The array must contain at least two integers.\\") max_product = float(\'-inf\') pair = (arr[0], arr[1]) for i in range(len(arr)): for j in range(i + 1, len(arr)): product = arr[i] * arr[j] if product > max_product: max_product = product pair = (arr[i], arr[j]) return pair"},{"question":"In a city, there are various parks connected by roads. Each park is numbered from 1 to N and each road connects two distinct parks. Every day, Joy likes to visit parks starting from a specific park. He can visit the next park only if there is a direct road connecting the current park to the next park he wants to visit. Joy wants to maximize the number of parks he can visit starting from a given park, following the roads, without revisiting any park. -----Input format----- • Line 1: Two space-separated integers, N (number of parks) and M (number of roads). • Line 2: One integer P (starting park number). • The next M lines contain two space-separated integers U and V, indicating a road between park U and park V. -----Output format----- A single line with a single integer, the maximum number of parks Joy can visit starting from park P, including P. -----Test Data----- The test data is grouped into two subtasks with the following constraints on the inputs. • Subtask 1 [30 points]: 1 ≤ N, M ≤ 1000. • Subtask 2 [70 points]: 1 ≤ N, M ≤ 100000. In all subtasks, it is guaranteed that there is at least one road, and there are no duplicate roads. -----Example----- Here is the sample input and output corresponding to the example above. -----Sample input----- 5 6 1 1 2 1 3 2 4 3 4 4 5 2 5 -----Sample output----- 5 Note: Joy can start at park 1 and visit parks in the order 1->2->4->5 or 1->3->4->5 covering all 5 parks, which is the maximum possible. Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"from collections import deque, defaultdict def max_parks_visited(N, M, P, roads): Returns the maximum number of parks that can be visited starting from park P. graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start): visited = set() queue = deque([start]) visited.add(start) while queue: park = queue.popleft() for neighbor in graph[park]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited) return bfs(P) # Example usage N = 5 M = 6 P = 1 roads = [(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (2, 5)] print(max_parks_visited(N, M, P, roads))"},{"question":"You are given a string s consisting of lowercase English letters. You need to insert the minimum number of characters into the string so that it becomes a palindrome. A palindrome is a string that reads the same backward as forward. -----Input----- The input contains a single string s (1 leq |s| leq 10^4) consisting of lowercase English letters. -----Output----- Output the minimum number of characters needed to be inserted to make the string a palindrome. -----Examples----- Input abca Output 1 Input race Output 3 -----Note----- In the first example, we can insert one \'a\' at the end, making the string \\"abcaa\\" which is a palindrome. Therefore, the output is 1. In the second example, one of the optimal solutions is to insert three characters \'e\', \'c\', \'a\' at the start, making the string \\"ecarace\\" which is a palindrome. Therefore, the output is 3.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of characters needed to be inserted to make the string a palindrome. n = len(s) # Reverse the string rev_s = s[::-1] # Initialize DP array dp = [[0] * (n + 1) for _ in range(n + 1)] # Fill the DP array for i in range(n): for j in range(n): if s[i] == rev_s[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # The result is the length of the string minus the length of the longest palindromic subsequence return n - dp[n][n]"},{"question":"A band is performing live for a concert, and they want to arrange their setlist to create maximum excitement for the audience. Each song in their list has an excitement value associated with it. However, the band follows a specific rule: they will only play songs in a way that no song from the setlist appears more than once. The band realizes that creating any setlist arrangement will incur a certain level of inconvenience to move equipment, set up new instruments, etc. Given a setlist of songs, determine the maximum total excitement value that the band can achieve by choosing songs following the rules and minimizing inconvenience. The inconvenience is calculated based on the number of unique songs in the final setlist arrangement. -----Input----- The input consists of two lines: - The first line contains an integer N, the total number of songs. - The second line contains N space-separated integers representing the excitement value of each song. -----Output----- Output a single integer, the maximum excitement value the band can achieve by choosing songs and minimizing inconvenience. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ excitement value of each song ≤ 1000 -----Example----- Input: 5 10 20 30 40 10 Output: 90 -----Explanation----- Example case. - The band can choose songs with the excitement values 10, 20, 30, and 40. They avoid choosing the repetitive 10 to minimize inconvenience. - The total excitement value is 10 + 20 + 30 + 40 = 100. - Thus, the maximum excitement value is 90.","solution":"def max_excitement(N, excitements): Determine the maximum total excitement value by choosing songs following the rules. Parameters: N : int : number of songs excitements : list of int : excitement values of the songs Returns: int : maximum excitement value # Use a set to keep track of unique excitement values unique_excitements = set(excitements) # Sum up the unique excitement values max_excitement_value = sum(unique_excitements) return max_excitement_value"},{"question":"You are given a list of integers. Your task is to find the maximum subsequence sum of the given list. A subsequence is defined as a sequence that can be derived from the list by zero or more elements, without changing the order of the remaining elements. Note that the subsequence has to be non-empty. Implement a function that takes a list of integers and returns the maximum sum of its subsequence. For example: ```python def max_subsequence_sum(nums: List[int]) -> int: pass # Examples: # Input: [1, -2, 3, 4, -1, 2] # Output: 8 # Explanation: The subsequence [1, 3, 4] has the maximum sum of 8. # Input: [-2, -3, -1, -4] # Output: -1 # Explanation: The subsequence [-1] has the maximum sum of -1. ``` # Constraints: - The list will contain at least one integer. - The integers in the list can range from `-10^4` to `10^4`. - The length of the list will not exceed 1000 elements. Your goal is to implement the `max_subsequence_sum` function to determine the maximum sum of any subsequence in the given list.","solution":"from typing import List def max_subsequence_sum(nums: List[int]) -> int: Returns the maximum subsequence sum. If the list contains only negative numbers, return the maximum single element. # If all numbers are non-positive, return the least negative number (which is the highest among them) if all(num <= 0 for num in nums): return max(nums) # Initialize sum max_sum = 0 # Sum all positive numbers for num in nums: if num > 0: max_sum += num return max_sum"},{"question":"Given an array of integers, your task is to determine the sum of all elements in the array that are prime numbers. If there are no prime numbers in the array, return 0. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The first few prime numbers are: 2, 3, 5, 7, 11, ... # Examples: * array = [2, 3, 4, 5, 6] should return 10 (because 2, 3, and 5 are prime numbers). * array = [4, 6, 8, 10, 12] should return 0 (because there are no prime numbers in the array). * array = [1, 1, 2, 2, 2] should return 6 (because 2 is prime and appears three times).","solution":"def is_prime(num): Helper function to determine if a number is prime. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def sum_of_primes(array): Function to calculate the sum of all prime numbers in an array. return sum(num if is_prime(num) else 0 for num in array)"},{"question":"Write a function that takes a string describing the position of an item in a list and returns the corresponding index as an integer. The input string will have the format \\"Item N in the list\\", where N is a positive integer (1-based index). For example, if the input is \\"Item 3 in the list\\", the function should return 2 (0-based index). Example: ```python def get_index(position: str) -> int: # Your code here # Test cases print(get_index(\\"Item 1 in the list\\")) # should return 0 print(get_index(\\"Item 4 in the list\\")) # should return 3 print(get_index(\\"Item 10 in the list\\")) # should return 9 ```","solution":"def get_index(position: str) -> int: This function takes a string with the format \'Item N in the list\' and returns the corresponding 0-based index. Args: position (str): The string describing the item position. Returns: int: The 0-based index of the item. # Extracting the number N from the string start = position.find(\' \') + 1 end = position.find(\' in the list\') # Convert the extracted part to an integer and subtract 1 to get 0-based index index = int(position[start:end]) - 1 return index"},{"question":"You are given an array of n integers. Your task is to find the length of the longest contiguous subarray whose sum is equal to a given integer k. -----Input----- The first line of the input contains two integers n and k. The second line contains n space-separated integers representing the array. -----Output----- Output a single integer representing the length of the longest contiguous subarray with sum equal to k. -----Constraints----- - 1 ≤ n ≤ 100000 - -10^9 ≤ k ≤ 10^9 - -10^5 ≤ Ai ≤ 10^5 -----Example----- Input: 5 5 1 2 3 4 5 Output: 2 -----Explanation----- Example case 1: The longest subarray with sum 5 is [2, 3], which has length 2.","solution":"def longest_subarray_with_sum_k(arr, k): Finds the length of the longest contiguous subarray with sum equal to k. Parameters: arr (list of int): List of integers representing the array. k (int): The target sum. Returns: int: The length of the longest contiguous subarray with sum equal to k. prefix_sum = 0 sum_map = {0: -1} max_length = 0 for i, num in enumerate(arr): prefix_sum += num if prefix_sum - k in sum_map: max_length = max(max_length, i - sum_map[prefix_sum - k]) if prefix_sum not in sum_map: sum_map[prefix_sum] = i return max_length"},{"question":"Given an array of integers, you need to find the maximum sum you can achieve by selecting elements such that no two selected elements are adjacent in the original array. You should implement the function `max_non_adjacent_sum(arr)` which takes an array `arr` of integers as input and returns the maximum sum of non-adjacent elements. # Example - Input: `[3, 2, 5, 10, 7]` - Output: `15` - Explanation: The maximum sum is obtained by selecting elements `3`, `10`, and `2`. - Input: `[3, 2, 7, 10]` - Output: `13` - Explanation: The maximum sum is obtained by selecting elements `3` and `10`. # Constraints 1. The length of the array is at least 1 and at most 10^5. 2. The elements of the array are integers and can be negative. # Performance Note Make sure your function performs well even for large arrays. # Function Signature ```python def max_non_adjacent_sum(arr: list[int]) -> int: # Your code here ``` # Sample Test Cases ```python assert max_non_adjacent_sum([3, 2, 5, 10, 7]) == 15 assert max_non_adjacent_sum([3, 2, 7, 10]) == 13 assert max_non_adjacent_sum([5, 5, 10, 100, 10, 5]) == 110 assert max_non_adjacent_sum([-2, -3, -4, -5]) == 0 ```","solution":"def max_non_adjacent_sum(arr: list[int]) -> int: Returns the maximum sum of non-adjacent elements in the given array. if not arr: return 0 # Initialize variables to store the maximum sum excluding and including the current element exclude = 0 include = 0 for num in arr: # Current max excluding num can be the greater of the previous include or exclude new_exclude = max(exclude, include) # Current max including num is the previous exclude plus current num include = exclude + num exclude = new_exclude # Return the maximum of include and exclude return max(include, exclude)"},{"question":"Write a function that accepts an array of strings and returns a new array containing only the strings that start with a vowel (A, E, I, O, U - both uppercase and lowercase). Ensure the function does not use any loops (including for, for/in, while, and do/while loops).","solution":"def filter_strings_starting_with_vowel(strings): Returns a new array containing only the strings that start with a vowel. return list(filter(lambda s: s[0].lower() in \'aeiou\', strings))"},{"question":"# Backyard BBQ A family is planning a backyard BBQ and needs to calculate how much food to prepare based on the number of guests. They have decided on the following serving sizes: - Each guest eats 3 sausages. - Each guest drinks 2 cans of soda. - Each guest eats 200 grams of salad. Given the number of guests, calculate the total number of sausages, cans of soda, and grams of salad required. # Function Signature The function should have the following signature: ```python def bbq_planner(guests: int) -> dict: pass ``` # Input * `guests`: A positive integer representing the number of guests expected at the BBQ. # Output * A dictionary with the following keys and their corresponding values: * `\'sausages\'`: Total number of sausages. * `\'soda\'`: Total number of cans of soda. * `\'salad\'`: Total number of grams of salad. # Example The function should return a dictionary containing the calculated amounts for each of the three items: * ex1. `bbq_planner(4)` -> `{\'sausages\': 12, \'soda\': 8, \'salad\': 800}` * ex2. `bbq_planner(10)` -> `{\'sausages\': 30, \'soda\': 20, \'salad\': 2000}` # Notes - The function should consider valid input scenarios where `guests` is a positive integer. - You can assume that the number of guests will be a whole number.","solution":"def bbq_planner(guests: int) -> dict: Calculates the amount of food and drinks needed for a BBQ based on the number of guests. Args: guests (int): The number of guests expected. Returns: dict: A dictionary containing the total number of sausages, cans of soda, and grams of salad. sausages_per_guest = 3 soda_per_guest = 2 salad_per_guest = 200 total_sausages = guests * sausages_per_guest total_soda = guests * soda_per_guest total_salad = guests * salad_per_guest return { \'sausages\': total_sausages, \'soda\': total_soda, \'salad\': total_salad }"},{"question":"You are developing a software that processes book information for an online library. One of the features you need to implement is an automatic tagging system that generates tags based on the book title. The tags should be meaningful and help users find the book easily. Your task is to write a function `generateTags` that takes a book title as input and generates tags by extracting relevant words from the title. The tags should be lowercase and should exclude common stop words such as \\"and\\", \\"the\\", \\"of\\", etc. Here is the list of stop words to exclude: [\\"and\\", \\"the\\", \\"of\\", \\"to\\", \\"a\\", \\"in\\", \\"for\\", \\"on\\", \\"with\\", \\"as\\", \\"by\\", \\"at\\", \\"an\\"] Implement the `generateTags` function. # Input - A string `title` representing the book title. # Output - A list of strings representing the generated tags. # Example 1. `generateTags(\\"The Chronicles of Narnia\\")` should return `[\\"chronicles\\", \\"narnia\\"]` 2. `generateTags(\\"Harry Potter and the Chamber of Secrets\\")` should return `[\\"harry\\", \\"potter\\", \\"chamber\\", \\"secrets\\"]` 3. `generateTags(\\"A Brief History of Time\\")` should return `[\\"brief\\", \\"history\\", \\"time\\"]` # Note - The order of tags in the output list should be the same as the order in the title. - Your function should handle empty string input by returning an empty list.","solution":"def generateTags(title): Returns a list of tags generated from the book title. Tags are in lowercase and exclude common stop words. stop_words = {\\"and\\", \\"the\\", \\"of\\", \\"to\\", \\"a\\", \\"in\\", \\"for\\", \\"on\\", \\"with\\", \\"as\\", \\"by\\", \\"at\\", \\"an\\"} words = title.lower().split() tags = [word for word in words if word not in stop_words] return tags"},{"question":"A large company wants to streamline their internal employee notifications by aggregating messages according to their department. Each employee has a unique employee ID and belongs to one department. Your task is to design a system that receives notifications and efficiently aggregates them into departments, allowing the company to review messages by department. Each notification includes the employee ID and message content. The messages are received one by one. The list of employees and their respective departments will be provided initially. Write a program that: 1. Accepts the list of employees with their departments. 2. Receives a stream of notifications and assigns each message to the corresponding department based on the employee ID. 3. Outputs all aggregated messages for each department. ----- Input ----- The first line contains an integer N (1 le N le 1000) — the number of employees. The next N lines each contain a string emp_id (unique identifier for employee) and a string department separated by a space. Employee ID and department both consist of alphanumeric characters and have no spaces within them. The following line contains an integer M (1 le M le 10,000) — the number of notifications. The next M lines each contain a string emp_id and a string message, separated by a space. Message content will not have spaces. ----- Output ----- For each department that received at least one notification, output the name of the department followed by all messages aggregated in the order they were received. The output should be formatted with the department name on one line, followed by the total number of messages on the next line, and each message on a new line after that. ----- Example ----- Input 3 E101 Sales E102 HR E103 Sales 5 E101 Meeting at 3 PM E103 Report deadline E102 New HR policy E101 Lunch at 12 PM E103 Quarterly results Output Sales 4 Meeting at 3 PM Report deadline Lunch at 12 PM Quarterly results HR 1 New HR policy ----- Note ----- In the example, the first input line indicates there are three employees. The next three lines map each employee (E101, E102, E103) to their departments (Sales, HR, Sales). The next line indicates there are five notifications being received. The notifications are then matched to their respective departments based on the employee ID and aggregated accordingly.","solution":"def aggregate_notifications(N, employees, M, notifications): Aggregates notifications into departments based on employee IDs. Parameters: N (int): Number of employees. employees (list): List of tuples where each tuple contains employee ID and department. M (int): Number of notifications. notifications (list): List of tuples where each tuple contains employee ID and message. Returns: dict: Dictionary where key is the department name and value is a list of messages. from collections import defaultdict emp_to_dept = {} dept_messages = defaultdict(list) # Map employee IDs to departments for emp_id, dept in employees: emp_to_dept[emp_id] = dept # Aggregate messages to respective departments for emp_id, message in notifications: department = emp_to_dept[emp_id] dept_messages[department].append(message) return dept_messages def format_output(dept_messages): result = [] for dept, messages in dept_messages.items(): result.append(dept) result.append(str(len(messages))) result.extend(messages) return \\"n\\".join(result)"},{"question":"Simona, the archaeologist, has discovered an ancient tablet with various inscriptions, one of which describes a puzzle that she needs to solve to unlock the secrets of the tablet. The puzzle is as follows: Simona is given an integer n and a sequence A of n integers. She needs to create a new sequence B derived from sequence A that satisfies the following condition: For each element B_i in sequence B, B_i should be the product of all elements in A except for A_i. However, since directly calculating such products might result in values too large to handle, Simona should compute the results using a modulo 10^9 + 7. Help Simona by writing a function that takes in integer n and sequence A, and outputs sequence B. -----Function Signature----- def solve_puzzle(n: int, A: List[int]) -> List[int]: -----Input----- - (1 ≤ n ≤ 10^5) - (1 ≤ A[i] ≤ 10^6 for all elements in A) -----Output----- Return a list of n integers representing sequence B. -----Example----- Input 4 [1, 2, 3, 4] Output [24, 12, 8, 6] Note: In the given example, the original list A is [1, 2, 3, 4]. - B_1 = 2 * 3 * 4 = 24 - B_2 = 1 * 3 * 4 = 12 - B_3 = 1 * 2 * 4 = 8 - B_4 = 1 * 2 * 3 = 6 Thus, the output is [24, 12, 8, 6].","solution":"from typing import List MOD = 10**9 + 7 def solve_puzzle(n: int, A: List[int]) -> List[int]: if n == 1: return [0] # If there is only one element, the product of all except that element is 0 # Step 1: Compute prefix products prefix_products = [1] * n for i in range(1, n): prefix_products[i] = (prefix_products[i-1] * A[i-1]) % MOD # Step 2: Compute suffix products suffix_products = [1] * n for i in range(n-2, -1, -1): suffix_products[i] = (suffix_products[i+1] * A[i+1]) % MOD # Step 3: Compute the result B using prefix and suffix B = [1] * n for i in range(n): B[i] = (prefix_products[i] * suffix_products[i]) % MOD return B"},{"question":"You are building a large-scale software system and need to implement a feature that frequently requires merging two sorted lists. To ensure optimal performance and correctness, you want to write a function that performs this task efficiently. Your task is to merge two given sorted lists into a single sorted list. -----Input:----- - First line will contain T, the number of test cases. - For each test case, there are three lines of input: - The first line contains two integers N and M, the sizes of the two lists respectively. - The second line contains N integers representing the first sorted list. - The third line contains M integers representing the second sorted list. -----Output:----- For each test case, output a single line containing the merged sorted list. -----Constraints----- - 1 leq T leq 100 - 1 leq N, M leq 1000 - 1 leq A[i], B[i] leq 1e6 -----Sample Input:----- 2 3 4 1 3 5 2 4 6 8 5 3 1 2 3 4 5 6 7 8 -----Sample Output:----- 1 2 3 4 5 6 8 1 2 3 4 5 6 7 8 -----EXPLANATION:----- For the first test case: The two lists [1, 3, 5] and [2, 4, 6, 8] are merged to form [1, 2, 3, 4, 5, 6, 8]. For the second test case: The two lists [1, 2, 3, 4, 5] and [6, 7, 8] are merged to form [1, 2, 3, 4, 5, 6, 7, 8].","solution":"def merge_sorted_lists(T, test_cases): Merges two sorted lists for each test case and returns the result as a list of lists. results = [] for case in test_cases: N, M = case[0] list1 = case[1] list2 = case[2] merged_list = [] i = j = 0 while i < N and j < M: if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 while i < N: merged_list.append(list1[i]) i += 1 while j < M: merged_list.append(list2[j]) j += 1 results.append(merged_list) return results"},{"question":"Given a list of integers, determine if there exists a triplet (a, b, c) in the list such that a^2 + b^2 = c^2. ``` find_triplet([3, 1, 4, 6, 5]) => True ``` ``` find_triplet([10, 4, 6, 12, 5]) => False ``` The list can have positive and negative integers, and the lengths of the given lists vary.","solution":"def find_triplet(lst): Determines if there exists a triplet (a, b, c) in the list such that a^2 + b^2 = c^2. Parameters: lst (list): A list of integers Returns: bool: True if such a triplet exists, False otherwise. lst = [x ** 2 for x in lst] # Square all elements lst.sort() # Sort the squared elements n = len(lst) for c in range(n - 1, 1, -1): # Let lst[c] be the largest number a = 0 b = c - 1 while a < b: if lst[a] + lst[b] == lst[c]: return True elif lst[a] + lst[b] < lst[c]: a += 1 else: b -= 1 return False"},{"question":"Given an array of non-negative integers `arr`, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. Write a function `minJumps(arr)` that returns the minimum number of jumps required to reach the last index of the array. If it is not possible to reach the last index, return -1. # Examples: Example 1: ``` Input: arr = [2, 3, 1, 1, 4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. ``` Example 2: ``` Input: arr = [2, 3, 0, 1, 4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. ``` Example 3: ``` Input: arr = [1, 1, 1, 1, 1] Output: 4 Explanation: The minimum number of jumps to reach the last index is 4. Jump 1 step at each index until the end. ``` Example 4: ``` Input: arr = [0, 2, 3] Output: -1 Explanation: It is not possible to reach the last index because you are stuck at the first index with no jump length. ``` # Constraints: - `1 <= arr.length <= 10^4` - `0 <= arr[i] <= 10^5`","solution":"def minJumps(arr): Returns the minimum number of jumps required to reach the last index. If not possible to reach the last index, returns -1. n = len(arr) if n == 1: return 0 # Initialize variables jumps = 0 max_reach = 0 edge = 0 for i in range(n): # Update the furthest point that can be reached max_reach = max(max_reach, i + arr[i]) if i == edge: # We must make a jump edge = max_reach jumps += 1 # If we have reached the last index if edge >= n - 1: return jumps # If we exit the loop without having reached the last index return -1"},{"question":"You are part of a team developing an online music-streaming application. The application maintains a history of songs played by each user. You need to implement a feature to analyze user listening patterns by identifying the longest contiguous sequence of songs (playlist) that are sequentially increasing in their unique IDs. Each song has a unique integer ID, and the history is stored as a list in the order the songs were played. Write a function that takes the list of song IDs as its input and returns the length of the longest contiguous playlist with sequentially increasing song IDs. -----Constraints----- - The length of the song history list does not exceed 10^5. - Each song ID is a positive integer and does not exceed 10^9. -----Input----- A single line containing a list of integers denoting the song history. -----Output----- Print a single integer, the length of the longest contiguous playlist of sequentially increasing song IDs. -----Sample Input----- 3 4 5 1 2 3 7 8 9 10 -----Sample Output----- 4 - The longest contiguous playlist of sequentially increasing song IDs is 7, 8, 9, 10 with a length of 4.","solution":"def longest_increasing_playlist(history): Returns the length of the longest contiguous playlist of sequentially increasing song IDs. if not history: return 0 max_length = 1 current_length = 1 for i in range(1, len(history)): if history[i] == history[i - 1] + 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In the bustling city of Matrixville, the local authorities are trying to optimize the city\'s grid of street lamps to save energy. Each street lamp can be either on or off. The grid is a square matrix of n x n street lamps. The objective is to determine the minimum number of street lamps that need to be turned on such that each row and each column has at least one street lamp that is on. -----Input:----- - The first line contains an integer T, the number of test cases. - The next T lines each contain a single integer n, the size of the street lamp grid. -----Output:----- For each test case, output a single integer, the minimum number of street lamps that need to be turned on. -----Constraints:----- - 1 leq T leq 1000 - 1 leq n leq 1000 -----Sample Input:----- 2 3 4 -----Sample Output:----- 3 4 -----EXPLANATION:----- For the first test case with n = 3, the minimum number of lamps that need to be turned on is 3, one in each row and each in a different column. For the second test case with n = 4, the minimum number of lamps that need to be turned on is 4, one in each row and each in a different column.","solution":"def min_street_lamps(T, test_cases): Given the number of test cases and a list of grid sizes, returns a list of the minimum number of street lamps that need to be turned on for each grid. Args: - T: int, the number of test cases. - test_cases: list of int, the sizes of the grids (n x n). Returns: - min_lamps: list of int, the minimum number of street lamps for each grid size. return test_cases # Example usage: # T = 2 # test_cases = [3, 4] # Output should be [3, 4]"},{"question":"You are given an array of n integers and an integer k. Your task is to find the maximum number of distinct integers in any subsequence of length k of the given array. A subsequence of length k of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. The number of distinct integers in a subsequence is the number of different integers that appear in the subsequence. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of each test case contains two integers n and k (1 le k le n le 10^5) — the length of the array and the length of the subsequence. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 le a_i le 200) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5 (sum n le 2 cdot 10^5). -----Output----- For each test case, print the answer — the maximum number of distinct integers in any subsequence of length k. -----Example----- Input 3 6 3 1 2 2 3 3 4 5 4 5 5 5 5 5 7 5 1 2 3 4 2 3 4 Output 3 1 4","solution":"def max_distinct_in_subsequence(n, k, array): This function returns the maximum number of distinct integers in any subsequence of length k of the given array. n : int : length of the array k : int : length of the subsequence array : list[int] : list of integers representing the array from collections import Counter # Count the frequency of each element in the array freq = Counter(array) # Number of distinct elements in original array distinct_count = len(freq) # The result cannot be more than the number of distinct elements return min(distinct_count, k) def process_test_cases(t, test_cases): results = [] for case in test_cases: n, k, array = case results.append(max_distinct_in_subsequence(n, k, array)) return results"},{"question":"Write a program that calculates the number of unique paths one can take to travel from the top-left corner to the bottom-right corner of a grid. Given the dimensions of the grid as M (rows) and N (columns), you can only move either down or right at any point in time. -----Input----- Input consists of multiple test cases. The first line contains an integer T, the number of test cases. Each test case consists of two natural numbers M and N, the number of rows and columns of the grid, respectively. -----Output----- For each test case, output the number of unique paths from the top-left corner to the bottom-right corner of the grid. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ M ≤ 100 - 1 ≤ N ≤ 100 -----Example----- Input: 2 3 7 3 2 Output: 28 3","solution":"def unique_paths(M, N): Calculate the number of unique paths in an MxN grid. :param M: int, number of rows :param N: int, number of columns :return: int, number of unique paths # Create a 2D list to store the number of ways to reach each cell dp = [[1]*N for _ in range(M)] # Fill the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = dp[i-1][j] + dp[i][j-1] # Return the number of ways to reach the bottom-right corner return dp[-1][-1] def solve(test_cases): results = [] for M, N in test_cases: results.append(unique_paths(M, N)) return results"},{"question":"Implement the function `pairwise_sum` which takes a list of numbers as argument and returns a new list where each element is the sum of its adjacent elements from the original list. The first and last elements of the new list should be equal to the first and last elements of the original list, respectively. For example: ```python pairwise_sum([1,2,3,4]) == [1, 3, 5, 4] pairwise_sum([10, -2, 5]) == [10, 8, 5] pairwise_sum([7]) == [7] pairwise_sum([]) == [] ```","solution":"def pairwise_sum(nums): Returns a list where each element is the sum of its adjacent elements from the original list. The first and last elements of the new list are the same as the original list. if len(nums) < 2: return nums result = [nums[0]] for i in range(1, len(nums)-1): result.append(nums[i-1] + nums[i]) result.append(nums[-1]) return result"},{"question":"Write a function that counts the frequency of characters in a given string and returns a dictionary where the keys are the characters, and the values are their respective counts. Characters should be treated case-insensitively (i.e., \'A\' and \'a\' are considered the same character). For example: ```python count_characters(\\"Hello World\\") ``` should return: ```python { \'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \' \': 1, \'w\': 1, \'r\': 1, \'d\': 1 } ``` The function should also handle an empty string input by returning an empty dictionary.","solution":"def count_characters(s): Count the frequency of characters in a given string, case insensitively. Parameters: s (str): The input string. Returns: dict: A dictionary with characters as keys and their frequencies as values. s = s.lower() frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"======Problem Statement====== You are given a string S representing an arithmetic expression. Your task is to verify if the given string S is a valid arithmetic expression consisting of non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. To be a valid expression: > Each number must be a non-negative integer (including zero). For example: ✔ 4 + 5 ✔ 10 - 0 ✔ 123 * 456 ✔ 789 / 3 ✖ 5.5 + 6 ✖ -4 + 6 > The operators should be properly placed between numbers with no consecutive operators. For example: ✔ 5 + 6 * 3 ✔ 10 - 0 / 5 ✖ 4 * / 2 ✖ 3 ++ 4 > The expression should not start or end with an operator. For example: ✔ 3 + 2 ✖ + 3 - 2 ✖ 4 / 2 * =====Input Format===== The first line contains an integer T, the number of test cases. The next T lines each contain a string S. =====Constraints===== 0 < T < 10 =====Output Format===== Output True or False for each test case.","solution":"import re def is_valid_expression(expression): Verifies if the given string is a valid arithmetic expression consisting of non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. pattern = re.compile(r\'^d+(s*[+-*/]s*d+)*\') return bool(pattern.match(expression)) def validate_expressions(test_cases): Takes a list of test case expressions and returns a list of booleans indicating if each expression is valid or not. return [is_valid_expression(expression) for expression in test_cases]"},{"question":"# Definition A **_Harshad number_** is a number that is divisible by the sum of its digits. **_For example_**: **_18_**, since ``` 1 + 8 = 9 ``` and ``` 18 % 9 == 0 ``` So, **_18_** is a **_Harshad number_**. ____ # Task **_Given_** a number, **_check if it is Harshad or not_**. ____ # Notes * **_Number_** *passed is always* **_Positive_**. * **_Return_** *the result as* **_String_** ___ # Input >> Output Examples ``` is_harshad(18) ==> return \\"Harshad number\\" ``` **_Explanation_**: Since **_the sum of its digits (1 + 8 = 9) is a divisor of the number itself (18)_**, **_Then_** it is a **_Harshad number_**. ____ ``` is_harshad(19) ==> return \\"Not Harshad number\\" ``` **_Explanation_**: Since **_the sum of its digits (1 + 9 = 10) is not a divisor of the number itself (19)_**, **_Then_** it is **_Not a Harshad number_**. ___ ``` is_harshad(21) ==> return \\"Harshad number\\" ``` **_Explanation_**: Since **_the sum of its digits (2 + 1 = 3) is a divisor of the number itself (21)_**, **_Then_** it is a **_Harshad number_**. ___ ``` is_harshad(25) ==> return \\"Not Harshad number\\" ``` **_Explanation_**: Since **_the sum of its digits (2 + 5 = 7) is not a divisor of the number itself (25)_**, **_Then_** it is **_Not a Harshad number_**.","solution":"def is_harshad(number): Checks if a number is a Harshad number. Args: - number (int): positive integer to check Returns: - str: \\"Harshad number\\" if the number is a Harshad number, \\"Not Harshad number\\" otherwise digit_sum = sum(int(digit) for digit in str(number)) if number % digit_sum == 0: return \\"Harshad number\\" else: return \\"Not Harshad number\\""},{"question":"You are tasked with writing a function that determines the longest substring of two given strings, str1 and str2, that consists only of vowels (a, e, i, o, u). # Input Two strings, `str1` and `str2`. # Output Return the length of the longest common substring consisting only of vowels that appears in both `str1` and `str2`. # Example If the input strings are `\\"aeiouxxaeiou\\"` and `\\"xxaeiouxx\\"`, the function should return `5` since the longest common vowel substring is `\\"aeiou\\"`. # Constraints - The input strings will contain only lowercase alphabets. - The length of the input strings will be between 1 and 1000. # Hint To solve this problem, you may consider using dynamic programming to keep track of the lengths of common substrings and specifically check for vowels.","solution":"def is_vowel(char): Check if a character is a vowel. return char in \'aeiou\' def longest_vowel_substring(str1, str2): Determines the longest substring made up of only vowels common in both input strings. Params: str1 (str): First input string. str2 (str): Second input string. Returns: int: Length of the longest common vowel substring. len1, len2 = len(str1), len(str2) # Initialize a 2D list to store lengths of longest common suffixes of substrings dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] max_length = 0 for i in range(1, len1 + 1): for j in range(1, len2 + 1): if str1[i - 1] == str2[j - 1] and is_vowel(str1[i - 1]): dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > max_length: max_length = dp[i][j] else: dp[i][j] = 0 return max_length"},{"question":"Given a list of words, group the words that are anagrams of each other. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Return the list of groups of anagrams in any order. Example: Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] Note: - All inputs will be in lowercase. - The order of output does not matter.","solution":"from collections import defaultdict def group_anagrams(words): Groups words that are anagrams of each other. :param words: List of words :return: List of groups of anagrams anagrams = defaultdict(list) for word in words: # Use sorted tuple of the word as the key key = tuple(sorted(word)) anagrams[key].append(word) # Return the values of the dictionary as a list return list(anagrams.values())"},{"question":"Adventurer Elina is embarking on a journey across the mystical land of Aylonia. The land is comprised of various towns connected by one-way roads. Each road has a certain travel time associated with it. Elina plans to start her journey from a specific town and needs to know the shortest time it will take her to reach every other town. Your task is to help Elina by determining the shortest travel time from the starting town to every other town. If it is impossible to reach a certain town, indicate this appropriately. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains two integers, N and M, where N is the number of towns and M is the number of roads. - The next M lines each contain three integers, U, V, and W, representing a one-way road from town U to town V with a travel time of W. - The last line of each test case contains one integer, S, the starting town. -----Output:----- For each test case, output N space-separated integers on a new line: the shortest travel time from the starting town S to each of the N towns (including itself). If a town is unreachable, output \\"-1\\" in its place. -----Constraints:----- - 1 leq T leq 5 - 2 leq N leq 1000 - 1 leq M leq 10000 - 1 leq U, V, S leq N - 1 leq W leq 1000 -----Sample Input:----- 1 4 4 1 2 4 1 3 2 2 4 1 3 4 5 1 -----Sample Output:----- 0 4 2 5","solution":"import heapq def dijkstra(n, graph, start): # Initialize distances with infinity distances = [float(\'inf\')] * (n + 1) distances[start] = 0 # Priority queue, storing (distance, node) pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) # If the distance is not optimal, skip it if current_distance > distances[current_node]: continue # Explore neighbours and update distances for neighbor, weight in graph[current_node]: distance = current_distance + weight # Only consider this new path if it\'s better if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return [-1 if distances[i] == float(\'inf\') else distances[i] for i in range(1, n + 1)] def shortest_travel_times(test_cases): results = [] for num_towns, roads, edges, start in test_cases: graph = [[] for _ in range(num_towns + 1)] for u, v, w in edges: graph[u].append((v, w)) results.append(dijkstra(num_towns, graph, start)) return results"},{"question":"A bakery has created a unique numbering system for their special bread packaging. They want to use a pattern based on the number of sections in the packaging. Your task is to generate the desired pattern. -----Input:----- - The first line will contain N, the number of sections. - The second line contains one string S of length N. -----Output:----- For each section in the packaging, output a line containing that section of the pattern. -----Constraints----- - 1 leq N leq 50 - String S consists only of the characters `a` and `b`. -----Sample Input:----- 3 aba -----Sample Output:----- a ab aba -----EXPLANATION:----- For each character in the string, the pattern builds by adding one character sequentially.","solution":"def generate_pattern(N, S): Generates a pattern based on the number of sections in the packaging and the string given. Parameters: - N (int): Number of sections - S (str): String of length N Returns: - List of strings representing the pattern. pattern = [] for i in range(1, N + 1): pattern.append(S[:i]) return pattern"},{"question":"A palindrome is a word that reads the same forward and backward. However, sometimes it\'s possible to make a non-palindromic word into a palindrome by adding just one character at the right position. Your task is to determine if it\'s possible to make a given string into a palindrome by adding exactly one character. If the input string can be transformed into a palindrome by adding one character, return the position at which you would add the character (0-indexed). If there is more than one possible position, return the smallest one. If it\'s not possible to transform the string into a palindrome by adding one character, return -1. Note that the added character can be any character, not necessarily one from the original string. # Function Signature ```python def transform_to_palindrome(s: str) -> int: pass ``` # Input - `s` (1 ≤ len(s) ≤ 10^5): a string consisting of uppercase and lowercase letters. # Output - An integer representing the position to add one character to make the string a palindrome. If it’s not possible, return -1. # Examples 1. Input: `\\"abca\\"` Output: `1` Explanation: Inserting an `a` at position 1 results in `\\"aabca\\"`, which is a palindrome. 2. Input: `\\"racecar\\"` Output: `0` Explanation: Inserting any character at position 0 (or identical character at any other position) results in a palindrome. 3. Input: `\\"abcdef\\"` Output: `-1` Explanation: It isn\'t possible to make the string a palindrome by adding just one character.","solution":"def transform_to_palindrome(s: str) -> int: Determine the position to insert a character to make `s` a palindrome by adding exactly one character. :param s: The input string :return: The position to insert the character, or -1 if not possible def is_palindrome_range(s, left, right): while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True n = len(s) for i in range(n // 2): if s[i] != s[n - i - 1]: if is_palindrome_range(s, i + 1, n - i - 1): return i if is_palindrome_range(s, i, n - i - 2): return n - i - 1 return -1 return 0 if n % 2 == 1 else -1"},{"question":"Given a 2D grid of size m x n and a list of integers representing the number of full rows (m_full) and columns (n_full) that should be present after a series of operations, fill the grid such that any 1 in the grid represents that the respective row or column is full and calculate the minimum number of 1\'s (operations) needed to achieve the required number of full rows and columns. A row or column is considered full if it contains only 1\'s. Example 1: Input: grid_size = [3, 3], m_full = 1, n_full = 1 Output: 2 Explanation: Fill the grid to look like this: [ [1, 1, 1], [0, 0, 0], [0, 0, 0] ] or, [ [0, 0, 0], [1, 1, 1], [0, 0, 0] ] or one of the columns could be entirely filled, needing a minimum of 2 ones overall. Example 2: Input: grid_size = [3, 5], m_full = 2, n_full = 2 Output: 4 Explanation: Fill the grid to look like this: [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0] ] or, [ [0, 0, 1, 1, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0] ] any other combinations would still require at least 4 ones. Example 3: Input: grid_size = [4, 4], m_full = 3, n_full = 2 Output: 6 Explanation: Fill the grid to look like this: [ [1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0] ] or one of the other valid combinations that still require 6 ones. Note: - The grid size is represented by two integers m (number of rows) and n (number of columns). - The number of full rows and columns is given by m_full and n_full respectively.","solution":"def min_operations(grid_size, m_full, n_full): Returns the minimum number of 1\'s needed to fill m_full rows and n_full columns. Args: grid_size (list): Size of the grid as [m, n]. m_full (int): Number of fully filled rows. n_full (int): Number of fully filled columns. Returns: int: Minimum number of 1\'s needed. m, n = grid_size return m_full * n_full"},{"question":"You are enlisted to help design a new chessboard for a custom tournament. The board is not a standard 8x8 but can be of any size, and it alternates between two characters. Instructions * Write a function that takes three parameters: two characters and a number representing the dimensions of the board. For example, given \'O\', \'X\', and 5, it should create a 5x5 chessboard where \'O\' and \'X\' alternate, starting with \'O\' at the top-left corner. * It should return a *string* of the board, with newline characters to separate the rows, so it\'s not all on one line. * If the provided dimension is less than 1, the function should make a 1x1 board. * If either character is not a single character string, or if the dimension is not a number or is negative, return false. Examples: ```python custom_chessboard(\'O\', \'X\', 5) \\"O-XOX XOXOX OXOXO XOXOX OXOXO\\" custom_chessboard(\'A\', \'B\', 3) \\"A-B BAB ABA\\" custom_chessboard(\'1\', \'0\', 4) \\"1-00 0101 0010 1111\\" custom_chessboard(\'*\', \'-\', 6) \\"*-*-*-* -*-*-*- *-*-*-* -*-*-*- *-*-*-*- -*-*-*-\\" custom_chessboard(\'@\', \'#\', -3) # invalid dimension False custom_chessboard(\'A\', \'ZZ\', 4) # invalid second character False ```","solution":"def custom_chessboard(char1, char2, dimension): if not isinstance(dimension, int) or dimension < 1: return False if not (isinstance(char1, str) and isinstance(char2, str) and len(char1) == 1 and len(char2) == 1): return False dimension = max(1, dimension) # Ensure minimum dimension is 1 board = [] for i in range(dimension): row = [] for j in range(dimension): if (i + j) % 2 == 0: row.append(char1) else: row.append(char2) board.append(\'\'.join(row)) return \'n\'.join(board)"},{"question":"Background ----------- Dr. Lorendale is an eccentric scientist who has developed a quantum maze for testing the intelligence of robots. The maze is represented as an `N x N` grid, where walls and open paths are denoted by `1`s and `0`s, respectively. The robots start from the top-left corner `(0, 0)` and need to reach the bottom-right corner `(N-1, N-1)`. To make the test more challenging, certain cells in the maze contain quantum teleporters. When a robot steps on a quantum teleporter, it transports the robot to another specific cell in the maze instantly. Mission Details --------------- Given a maze represented as a 2D array `maze`, and a dictionary `teleporters` mapping teleportation entry points to their corresponding exits, determine the shortest path for the robot to take from the start to the finish. Example: ```python maze_example = [ [0, 1, 1, 1], [0, 0, 1, 0], [1, 0, 0, 1], [1, 1, 0, 0] ] teleporters_example = { (0, 0): (2, 1), (1, 3): (3, 3) } ``` In this example: - Starting at `(0, 0)`, the robot gets teleported instantly to `(2, 1)`. - From `(2, 1)`, the robot moves down to `(3, 1)`, and then right to `(3, 2)`, and finally to its destination `(3, 3)`. Therefore, the shortest path length in this example is `4`. Function Signature: ```python def shortest_path(maze: List[List[int]], teleporters: Dict[Tuple[int, int], Tuple[int, int]]) -> int: pass ``` Additional Technical Details ---------------------------- - The input maze will always be a square grid with size `N x N` (where `1 <= N <= 100`). - There will be no walls (`1`) in the starting or ending positions. - There might be multiple teleporters, but no looping teleporters (you will not get stuck indefinitely). - Teleporters are optional; if no teleporters are present, the dictionary will be empty. - You may assume that there is always a path from the start to the finish. - The robot can move to an adjacent cell in one of the four cardinal directions (North, East, South, West), only if the cell is an open path `(0)`. Your task is to implement the `shortest_path` function to return the length of the shortest path from the start to the finish, considering all the walls and teleporters in the maze.","solution":"from typing import List, Dict, Tuple from collections import deque def shortest_path(maze: List[List[int]], teleporters: Dict[Tuple[int, int], Tuple[int, int]]) -> int: Finds the shortest path in a maze from the top-left corner (0, 0) to the bottom-right corner (N-1, N-1) considering teleporters. N = len(maze) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Right, Down, Left, Up queue = deque([(0, 0, 0)]) # (Row, Column, Distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if (r, c) == (N-1, N-1): return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < N and maze[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) if (r, c) in teleporters and teleporters[(r, c)] not in visited: tr, tc = teleporters[(r, c)] visited.add((tr, tc)) queue.append((tr, tc, dist + 1)) return -1 # If no path is found (which shouldn\'t happen per problem statement)"},{"question":"You need to write a function **balancedBrackets** that checks whether the given string containing various types of brackets is valid. A string is considered valid if: - Opening brackets (`(`, `{`, `[`) are closed by the same type of closing brackets (`)`, `}`, `]`) in the correct order. - Brackets close in the correct layered order. For example, \\"([])\\" is valid but \\"([)]\\" is not. The function should return `True` if the string is valid, and `False` otherwise. You may consider that the string contains only these characters: `()[]{}`.","solution":"def balancedBrackets(s): Returns True if the string containing brackets is valid, otherwise returns False. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid is either empty or blocked. You can start at any empty cell and you want to find the size of the largest empty connected component in the grid. An empty cell is considered connected if it shares a side with another empty cell. -----Input:----- - The first line contains two integers N and M denoting the number of rows and columns of the grid, respectively. - The next N lines each contain M characters, where each character is either `.` for an empty cell or `#` for a blocked cell. -----Output:----- Print a single integer ― the size of the largest empty connected component in the grid. -----Constraints----- - 1 le N, M le 1000 - Each character in the grid is either `.` or `#`. -----Sample Input:----- 3 4 .#.. ..#. #. -----Sample Output:----- 4","solution":"def largest_empty_component_size(N, M, grid): from collections import deque def bfs(start_i, start_j): queue = deque([(start_i, start_j)]) visited.add((start_i, start_j)) component_size = 0 while queue: i, j = queue.popleft() component_size += 1 for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]: if 0 <= x < N and 0 <= y < M and (x, y) not in visited and grid[x][y] == \'.\': visited.add((x, y)) queue.append((x, y)) return component_size visited = set() max_component_size = 0 for i in range(N): for j in range(M): if grid[i][j] == \'.\' and (i, j) not in visited: max_component_size = max(max_component_size, bfs(i, j)) return max_component_size"},{"question":"You are tasked with implementing a `TimeMap` class that supports two operations: storing a key-value pair with a timestamp, and retrieving the value associated with a key for a given timestamp. The value retrieved from a TimeMap may not be unique, so the correct value for a queried timestamp should be the one stored at the closest earlier or same timestamp. Implement the `TimeMap` class: ```python class TimeMap: def __init__(self): Initialize the data structure here. def set(self, key: str, value: str, timestamp: int) -> None: Stores the key with the value and timestamp. def get(self, key: str, timestamp: int) -> str: Retrieves the value associated with the key at the largest timestamp less than or equal to the given timestamp. ``` Example: ```python Input: [\\"TimeMap\\",\\"set\\",\\"set\\",\\"get\\",\\"get\\",\\"set\\",\\"get\\",\\"get\\"] [[],[\\"foo\\",\\"bar\\",1],[\\"foo\\",\\"bar2\\",4],[\\"foo\\",1],[\\"foo\\",3],[\\"foo\\",\\"bar3\\",7],[\\"foo\\",5],[\\"foo\\",10]] Output: [null,null,null,\\"bar\\",\\"bar\\",null,\\"bar2\\",\\"bar3\\"] Explanation: TimeMap kv = new TimeMap(); kv.set(\\"foo\\", \\"bar\\", 1); // store the key \\"foo\\" and value \\"bar\\" along with timestamp = 1 kv.set(\\"foo\\", \\"bar2\\", 4); // store the key \\"foo\\" and value \\"bar2\\" along with timestamp = 4 kv.get(\\"foo\\", 1); // output \\"bar\\", since the earliest value for key \\"foo\\" at or before timestamp 1 is \\"bar\\" kv.get(\\"foo\\", 3); // output \\"bar\\", since the earliest value for key \\"foo\\" at or before timestamp 3 is \\"bar\\" kv.set(\\"foo\\", \\"bar3\\", 7); // store the key \\"foo\\" and value \\"bar3\\" along with timestamp = 7 kv.get(\\"foo\\", 5); // output \\"bar2\\", since the earliest value for key \\"foo\\" at or before timestamp 5 is \\"bar2\\" kv.get(\\"foo\\", 10); // output \\"bar3\\", since the earliest value for key \\"foo\\" at or before timestamp 10 is \\"bar3\\" ``` Constraints: - All the key-value strings are non-empty and consist only of lowercase English letters. - `1 <= key.length, value.length <= 100` - `1 <= timestamp <= 10^7` - All `set` and `get` operations are valid, that is they occur in non-decreasing order of timestamp. - At most `2 * 10^5` calls will be made to `set` and `get`.","solution":"class TimeMap: def __init__(self): Initialize the data structure here. self.store = {} def set(self, key: str, value: str, timestamp: int) -> None: Stores the key with the value and timestamp. if key not in self.store: self.store[key] = [] self.store[key].append((timestamp, value)) def get(self, key: str, timestamp: int) -> str: Retrieves the value associated with the key at the largest timestamp less than or equal to the given timestamp. if key not in self.store: return \\"\\" values = self.store[key] # Binary search to find the right timestamp left, right = 0, len(values) - 1 while left <= right: mid = (left + right) // 2 if values[mid][0] <= timestamp: left = mid + 1 else: right = mid - 1 return values[right][1] if right >= 0 else \\"\\""},{"question":"A video streaming service uses a recommendation algorithm to suggest content to its users. Each user has a watch history of movies, where each movie is represented by a unique positive integer. The recommendation algorithm suggests movies based on the similarity of watch histories between users. Two users are said to have similar tastes if they have watched exactly the same set of movies. You are given the watch histories of n users. Your task is to write a program that identifies all pairs of users with similar tastes. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the number of users. Each of the next n lines represents the watch history of a user and is formatted as follows: - The first integer m_i (1 leq m_i leq 1000) indicates the number of movies watched by the i-th user. - The next m_i integers are unique and represent the movies watched by the i-th user. -----Output----- Print the list of pairs of users that have similar tastes. Each pair should be represented as (i, j) where 1 leq i < j leq n and users i and j have the same watch history. Print each pair on a new line. If there are no such pairs, print \\"No similar users\\" (without quotes). -----Examples----- Input 4 3 1 2 3 3 2 1 3 2 4 5 3 6 7 8 Output (1, 2) Input 3 2 10 20 2 30 40 2 50 60 Output No similar users Input 5 1 1 1 2 1 1 2 1 2 2 2 1 Output (1, 3) (4, 5) -----Note----- In the first example, users 1 and 2 have watched the same set of movies {1, 2, 3}. In the second example, no two users have the same watch history. In the third example, users 1 and 3 have both watched the movie {1}. Users 4 and 5 have watched the same set of movies {1, 2}.","solution":"def find_similar_users(n, watch_histories): This function identifies all pairs of users with similar tastes in movies based on their watch histories. Parameters: n (int): Number of users watch_histories (list of list of int): A list where each element is a user\'s watch history Returns: list of tuple: A list of tuples where each tuple represents a pair of users with similar tastes from collections import defaultdict history_map = defaultdict(list) # Store users by their sorted watch history for i, history in enumerate(watch_histories): sorted_history = tuple(sorted(history)) history_map[sorted_history].append(i + 1) # Find all pairs of users with similar tastes result_pairs = [] for users in history_map.values(): if len(users) > 1: for i in range(len(users)): for j in range(i + 1, len(users)): result_pairs.append((users[i], users[j])) return result_pairs # Helper function to get input and call main logic def process_input_and_find_similar_users(input_lines): Process the input lines and find similar users based on their watch histories. Parameters: input_lines (list of str): The input lines containing the number of users and their respective watch histories Returns: str: The output result as a string # Parse inputs n = int(input_lines[0]) watch_histories = [] for i in range(1, n + 1): watch_history = list(map(int, input_lines[i].split()))[1:] watch_histories.append(watch_history) # Get similar users similar_users = find_similar_users(n, watch_histories) # Format the output if not similar_users: return \\"No similar users\\" else: return \\"n\\".join(map(str, similar_users))"},{"question":"Write a function `mostFrequentCharacter` that takes a string `s` as input and returns the character that appears most frequently in the string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. Ignore spaces, and assume that the string will contain at least one non-space character.","solution":"def mostFrequentCharacter(s): Returns the character that appears most frequently in the string `s`. If there are multiple characters with the same highest frequency, returns the one that appears first in the string. Spaces are ignored. :param s: input string :return: character that appears most frequently frequency = {} max_count = 0 most_frequent_char = None for char in s: if char == \' \': continue if char in frequency: frequency[char] += 1 else: frequency[char] = 1 if frequency[char] > max_count or (frequency[char] == max_count and most_frequent_char is None): max_count = frequency[char] most_frequent_char = char return most_frequent_char"},{"question":"# Task You are given an array of non-negative integers `nums` and an integer `target`. Your task is to find the minimum length of a contiguous subarray of which the sum is greater than or equal to `target`. If there is no such subarray, return `0` instead. # Input/Output - `[input]` array `nums` A list of non-negative integers. - `[input]` integer `target` A non-negative integer. - `[output]` an integer Representing the minimum length of the contiguous subarray with a sum greater than or equal to `target`. # Example For `nums = [2, 3, 1, 2, 4, 3]` and `target = 7`, the output should be `2`. The sum of the subarray `[4, 3]` is `7`, which is greater than or equal to `target`, and its length is `2`. For `nums = [1, 4, 4]` and `target = 8`, the output should be `2`. The sum of the subarray `[4, 4]` is `8`, which is greater than or equal to `target`, and its length is `2`. For `nums = [1, 1, 1, 1, 1, 1, 1, 1]` and `target = 11`, the output should be `0`. There is no such subarray with sum greater than or equal to `11`. # Constraints - `1 <= nums.length <= 10^5` - `0 <= nums[i] <= 10^4` - `0 <= target <= 10^9`","solution":"def min_subarray_len(nums, target): Finds the minimum length of a contiguous subarray of which the sum is greater than or equal to target. If there\'s no such subarray, returns 0. n = len(nums) left = 0 current_sum = 0 min_length = float(\'inf\') for right in range(n): current_sum += nums[right] while current_sum >= target: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"You are given an array logs, where each element represents a log entry in format [userId, timestamp, activity]. The logs are not necessarily in any order. The activity could be either \\"enter\\" or \\"exit\\" which indicates that the user has entered or exited a room respectively. Return a list of lists where each inner list represents the time intervals during which each user was in the room. Each interval should be represented as [start_time, end_time]. The intervals should be sorted by start_time. If a user does not have a matching \\"exit\\" or \\"enter\\" activity, ignore it. Example 1: Input: logs = [[\\"user1\\",\\"10:00\\",\\"enter\\"],[\\"user2\\",\\"10:30\\",\\"enter\\"],[\\"user1\\",\\"10:40\\",\\"exit\\"],[\\"user2\\",\\"11:00\\",\\"exit\\"],[\\"user1\\",\\"11:20\\",\\"enter\\"],[\\"user1\\",\\"12:00\\",\\"exit\\"]] Output: [[\\"user1\\",[\\"10:00\\", \\"10:40\\"],[\\"11:20\\", \\"12:00\\"]],[\\"user2\\",[\\"10:30\\", \\"11:00\\"]]] Explanation: - user1 enters at 10:00 and exits at 10:40; then enters again at 11:20 and exits at 12:00 - user2 enters at 10:30 and exits at 11:00 Example 2: Input: logs = [[\\"user1\\",\\"09:00\\",\\"enter\\"],[\\"user1\\",\\"09:05\\",\\"exit\\"],[\\"user2\\",\\"09:10\\",\\"enter\\"],[\\"user2\\",\\"09:15\\",\\"exit\\"],[\\"user1\\",\\"09:20\\",\\"enter\\"],[\\"user1\\",\\"09:25\\",\\"exit\\"],[\\"user2\\",\\"09:30\\",\\"enter\\"],[\\"user2\\",\\"10:00\\",\\"exit\\"]] Output: [[\\"user1\\",[\\"09:00\\", \\"09:05\\"],[\\"09:20\\", \\"09:25\\"]],[\\"user2\\",[\\"09:10\\", \\"09:15\\"],[\\"09:30\\", \\"10:00\\"]]] Explanation: - user1 enters at 09:00 and exits at 09:05; then enters again at 09:20 and exits at 09:25 - user2 enters at 09:10 and exits at 09:15; then enters again at 09:30 and exits at 10:00 Example 3: Input: logs = [[\\"user1\\",\\"08:00\\",\\"enter\\"],[\\"user1\\",\\"08:35\\",\\"exit\\"],[\\"user1\\",\\"09:00\\",\\"enter\\"],[\\"user1\\",\\"09:05\\",\\"enter\\"],[\\"user1\\",\\"09:10\\",\\"exit\\"],[\\"user1\\",\\"10:00\\",\\"exit\\"]] Output: [[\\"user1\\",[\\"08:00\\", \\"08:35\\"],[\\"09:00\\", \\"09:10\\"]]] Explanation: - user1 enters at 08:00 and exits at 08:35; - the \\"enter\\" at 09:05 is invalid because user1 is already in the room by the \\"enter\\" at 09:00; so, ignore it. - user1 exits at 10:00, but the corresponding \\"enter\\" cannot be matched with the previous \\"enter\\". Constraints: 1 <= logs.length <= 10^4 logs[i].length == 3 logs[i][0] is a unique identifier for the user. logs[i][1] is a timestamp in \\"HH:MM\\" format. logs[i][2] is either \\"enter\\" or \\"exit\\". Time intervals are within the range [00:00, 23:59].","solution":"def find_user_intervals(logs): from collections import defaultdict # Dictionary to hold the result result = defaultdict(list) # Dictionary to hold the last enter time for each user enter_times = {} # Iterate through logs for log in logs: user_id, timestamp, activity = log if activity == \\"enter\\": if user_id in enter_times: # If there\'s already an active entry, skip this \\"enter\\" continue else: enter_times[user_id] = timestamp elif activity == \\"exit\\": if user_id in enter_times: # If there\'s no corresponding \\"enter\\", skip this \\"exit\\" result[user_id].append([enter_times[user_id], timestamp]) del enter_times[user_id] # Convert the dictionary to the required list format return [[user] + intervals for user, intervals in sorted(result.items(), key=lambda x: x[0])]"},{"question":"A palindrome is a number that reads the same backward as forward. Given a number n, find the smallest palindrome greater than n. Write a function `next_palindrome` that takes an integer n and returns the smallest palindrome greater than n. n will never be negative and will always be less than 10^6. Examples: ```python next_palindrome(123) # Explanation: The smallest palindrome greater than 123 is 131. # return 131 next_palindrome(808) # Explanation: The smallest palindrome greater than 808 is 818. # return 818 next_palindrome(999) # Explanation: The smallest palindrome greater than 999 is 1001. # return 1001 next_palindrome(132) # Explanation: The smallest palindrome greater than 132 is 141. # return 141 ```","solution":"def next_palindrome(n): Returns the smallest palindrome greater than n. # Helper function to check if a number is a palindrome def is_palindrome(num): return str(num) == str(num)[::-1] n += 1 # Start checking from the next number while not is_palindrome(n): n += 1 return n"},{"question":"You are working on a new software platform for storing and querying company employee information. Each employee record contains the following fields: `id`, `name`, `age`, and `salary`. One of the functionalities required is to filter employees based on a range of ages and return their average salary, but only for those who have a salary within a specified range. Write a function `filter_and_average_salary` that takes a list of dictionaries representing employee records, two integers representing the minimum and maximum ages, and two integers representing the minimum and maximum salaries. The function should return the average salary of employees whose age is within the given age range and whose salary is also within the given salary range. If no employees meet the criteria, return `0`. # Input - A list of dictionaries, `employees`, where each dictionary has the keys: - `id`: an integer representing the employee\'s unique identifier - `name`: a string representing the employee\'s name - `age`: an integer representing the employee\'s age - `salary`: an integer representing the employee\'s salary - Two integers, `min_age`, and `max_age` for the age range (inclusive). - Two integers, `min_salary`, and `max_salary` for the salary range (inclusive). # Output - A float representing the average salary of employees who fall within the specified age and salary ranges. Return 0 if no employees meet the criteria. # Example ```python employees = [ {\'id\': 1, \'name\': \'Alice\', \'age\': 30, \'salary\': 5000}, {\'id\': 2, \'name\': \'Bob\', \'age\': 45, \'salary\': 7000}, {\'id\': 3, \'name\': \'Charlie\', \'age\': 35, \'salary\': 6000}, {\'id\': 4, \'name\': \'David\', \'age\': 32, \'salary\': 4000}, {\'id\': 5, \'name\': \'Eve\', \'age\': 28, \'salary\': 8000} ] min_age = 30 max_age = 40 min_salary = 4000 max_salary = 6000 print(filter_and_average_salary(employees, min_age, max_age, min_salary, max_salary)) ``` Expected Output: ``` 5000.0 ``` Note: use appropriate input handling and edge cases management such as when no employees meet the criteria or when employee records are empty.","solution":"def filter_and_average_salary(employees, min_age, max_age, min_salary, max_salary): Filters employees based on the given age and salary ranges and returns the average salary of employees who meet the criteria. If no employee meets the criteria, returns 0. Parameters: - employees (list of dict): List of employee records. - min_age (int): Minimum age (inclusive). - max_age (int): Maximum age (inclusive). - min_salary (int): Minimum salary (inclusive). - max_salary (int): Maximum salary (inclusive). Returns: - float: Average salary of employees who meet the criteria or 0 if none do. filtered_salaries = [ emp[\'salary\'] for emp in employees if min_age <= emp[\'age\'] <= max_age and min_salary <= emp[\'salary\'] <= max_salary ] if not filtered_salaries: return 0 return sum(filtered_salaries) / len(filtered_salaries)"},{"question":"In this task, you are given a **string s** that consists of only uppercase and lowercase letters. Your goal is to determine how many times each character appears in the string and return a dictionary with the results. The keys of the dictionary should be the characters from the string, and the values should be the corresponding counts. All characters must appear in their original case (i.e., \'A\' and \'a\' should be counted separately). Examples: ```count_characters(\\"aAbBcC\\") should return {\'a\': 1, \'A\': 1, \'b\': 1, \'B\': 1, \'c\': 1, \'C\': 1}``` ```count_characters(\\"zzzZZZ\\") should return {\'z\': 3, \'Z\': 3}``` ```count_characters(\\"HelloWorld\\") should return {\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'W\': 1, \'r\': 1, \'d\': 1}``` INPUT: The string will have a length between 1 and 10^6 characters. OUTPUT: A dictionary with the counts of each character in the original case. Ensure the function performs efficiently for large input sizes.","solution":"def count_characters(s): Returns a dictionary with the counts of each character in the string s. The characters are case-sensitive, i.e., \'A\' and \'a\' are counted separately. Parameters: s (str): The input string. Returns: dict: A dictionary with characters as keys and their counts as values. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count"},{"question":"# Objective: Write a function `sum_factors` that takes an integer `n` and returns the sum of all unique factors of `n` (excluding `n`). # Description: A factor of an integer `n` is an integer `d` that divides `n` without leaving a remainder. For example, 1, 2, 4, and 8 are factors of 8. However, the function should exclude `n` itself from the sum of factors. # Example: ```python def sum_factors(n: int) -> int: # Your code here # Example 1: # The factors of 12 (excluding 12) are: 1, 2, 3, 4, 6 # sum_factors(12) should return 16 print(sum_factors(12)) # Output: 16 # Example 2: # The factors of 28 (excluding 28) are: 1, 2, 4, 7, 14 # sum_factors(28) should return 28 print(sum_factors(28)) # Output: 28 # Example 3: # The factors of 7 (excluding 7) are: 1 # sum_factors(7) should return 1 print(sum_factors(7)) # Output: 1 ``` # Constraints: - The input integer `n` will always be positive and greater than 1. - The result should be an integer. - Consider efficiency for larger values of `n`.","solution":"def sum_factors(n: int) -> int: Returns the sum of all unique factors of n, excluding n itself. factors_sum = 0 for i in range(1, n): if n % i == 0: factors_sum += i return factors_sum"},{"question":"In a remote village, people celebrate a festival where they create chains of colored beads. Each chain has a certain sequence of colors, and they follow a specific rule: no two adjacent beads in a chain are of the same color. Villagers are very particular about their chains, and they want to know how many valid chains can be made given a set of colors and a length for the chain. You are given multiple test cases, each described by two integers, C and L. C is the number of available colors, and L is the length of the chain they want to make. Your task is to find out how many different valid chains of length L can be made using C different colors, where no two adjacent beads have the same color. -----Input----- The first line contains a single integer T denoting the number of test cases. Each test case is described by one line containing two space-separated integers, C and L, where C is the number of available colors, and L is the length of the chain. -----Output----- For each test case, output a single integer in a new line, the number of different valid chains of length L that can be made using C different colors. -----Example----- Input: 2 3 3 2 4 Output: 12 2 -----Constraints----- 1 ≤ T ≤ 100 1 ≤ C ≤ 100 1 ≤ L ≤ 100 -----Explanation----- In the first test case, there are 3 colors and the chain length is 3. There are 12 possible valid chains of length 3 using 3 colors where no two adjacent beads are the same. In the second test case, there are 2 colors and the chain length is 4. There are 2 possible valid chains of length 4 using 2 colors where no two adjacent beads are the same.","solution":"def valid_chains(C, L): Returns the number of valid chains of length L using C different colors. if L == 1: return C if C == 1: return 0 return C * (C - 1)**(L - 1) def solve(test_cases): results = [] for C, L in test_cases: results.append(valid_chains(C, L)) return results"},{"question":"Task Design a function that determines if a given string is a valid representation of an arithmetic expression. The string can contain positive integers, parentheses, and the operators `+`, `-`, `*`, and `/`. # Requirements - The expression can have any combination of integers, operators, and parentheses. - Operators `+`, `-`, `*`, and `/` must always be between two valid operands. - Parentheses must be properly nested and matched. - The expression should not have any invalid characters. # Examples # Valid Expressions 1. `\\"3+(4*5)-7\\"` 2. `\\"10/2+(3*2)\\"` 3. `\\"(1+(2*3)-4)/5\\"` # Invalid Expressions 1. `\\"3+(4*5))-7\\"` (Mismatched parentheses) 2. `\\"10//2+(3*2)\\"` (Invalid usage of operator `/`) 3. `\\"(1+(2*3)-)/5\\"` (Operator at the end) # Function Signature ```python def is_valid_expression(expr: str) -> bool: pass ``` # Notes - Consider corner cases such as empty strings, strings with only operators, or strings with improperly placed parentheses. - Do not evaluate the expression, only check its syntactical validity.","solution":"def is_valid_expression(expr: str) -> bool: Determines if a given string is a valid representation of an arithmetic expression. if not expr: return False valid_chars = set(\\"0123456789+-*/() \\") for char in expr: if char not in valid_chars: return False def is_operator(c): return c in \'+-*/\' def is_operand(c): return c.isdigit() balance = 0 prev_char = \'\' for i, char in enumerate(expr): if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return False if i > 0 and is_operator(prev_char): return False elif is_operator(char): if prev_char == \'\' or is_operator(prev_char) or prev_char == \'(\' or i == len(expr) - 1: return False elif char.isdigit(): if prev_char == \')\': return False prev_char = char if balance != 0: return False return not (is_operator(expr[0]) or is_operator(expr[-1]))"},{"question":"You are hired to develop a new scheduling feature for a smart home application. The application should allow users to schedule their smart devices to turn on or off at specific times throughout the day. However, due to hardware limitations, each device can only have up to 10 scheduled events in a day. Your task is to write a function `schedule_event` that takes in three parameters: `device_schedule` (a dictionary where keys are device names and values are lists of scheduled times in \\"HH:MM\\" 24-hour format), `device` (a string representing the device name), and `event_time` (a string representing the time in \\"HH:MM\\" 24-hour format). The function should return the updated `device_schedule` after attempting to add the new event time for the specified device. If the device already has 10 events scheduled, or if the `event_time` is invalid (not in \\"HH:MM\\" format or not within the valid time range of 00:00 to 23:59), the function should return the string \\"Unable to schedule event\\". If the event time is already scheduled for the device, the function should return the string \\"Event already scheduled\\". Examples: ``` schedule_event({\\"light\\": [\\"08:30\\", \\"12:00\\"]}, \\"light\\", \\"18:00\\") => {\\"light\\": [\\"08:30\\", \\"12:00\\", \\"18:00\\"]} schedule_event({\\"heater\\": [\\"06:30\\", \\"07:30\\", \\"08:30\\", \\"09:30\\", \\"10:30\\", \\"11:30\\", \\"12:30\\", \\"13:30\\", \\"14:30\\", \\"15:30\\"]}, \\"heater\\", \\"16:30\\") => \\"Unable to schedule event\\" schedule_event({\\"fan\\": [\\"08:30\\", \\"12:00\\"]}, \\"fan\\", \\"08:30\\") => \\"Event already scheduled\\" schedule_event({\\"fan\\": [\\"08:30\\", \\"12:00\\"]}, \\"fan\\", \\"25:30\\") => \\"Unable to schedule event\\" ``` Notes: - The function should maintain the order of the events for each device as they are added. - If the device is not in the `device_schedule`, it should be added with the `event_time` as its first scheduled event.","solution":"def schedule_event(device_schedule, device, event_time): Schedules a new event time for the specified device if possible. Parameters: - device_schedule (dict): A dictionary where keys are device names and values are lists of scheduled times in \\"HH:MM\\" 24-hour format. - device (str): The name of the device to schedule the event for. - event_time (str): The event time in \\"HH:MM\\" 24-hour format. Returns: - dict/str: The updated device schedule if the event is successfully added. Returns \\"Unable to schedule event\\" if the device already has 10 events, or if the time is invalid. Returns \\"Event already scheduled\\" if the event time is already scheduled. # Validate event_time try: hour, minute = event_time.split(\\":\\") hour = int(hour) minute = int(minute) if hour < 0 or hour > 23 or minute < 0 or minute > 59: return \\"Unable to schedule event\\" except ValueError: return \\"Unable to schedule event\\" # Check if device already has 10 events scheduled if device in device_schedule: if len(device_schedule[device]) >= 10: return \\"Unable to schedule event\\" # Check if event_time is already scheduled if event_time in device_schedule[device]: return \\"Event already scheduled\\" # Add event_time to the device\'s schedule device_schedule[device].append(event_time) else: # Add new device with event_time device_schedule[device] = [event_time] return device_schedule"},{"question":"You are given a string `s` consisting of lowercase latin letters and an integer `n`. Your task is to duplicate each character in the string exactly `n` times and return the result. Example ------- Given the string \\"abc\\" and `n` = 3, you should return: ``` duplicate(\\"abc\\", 3) # => \\"aaabbbccc\\" ``` With the string \\"xyz\\" and `n` = 2, you should return: ``` duplicate(\\"xyz\\", 2) # => \\"xxyyzz\\" ``` For the string \\"hello\\" and `n` = 1, the result should be the same as the input string: ``` duplicate(\\"hello\\", 1) # => \\"hello\\" ``` Input ----- You can assume that the input string `s` will have a length between 1 and 100 (inclusive) and the integer `n` will be between 1 and 10 (inclusive).","solution":"def duplicate(s, n): Returns a string where each character in s is duplicated exactly n times. return \'\'.join(char * n for char in s)"},{"question":"A software company plans to distribute salary bonuses to its employees based on their seniority and performance ratings. Considering the budget constraints, they want to distribute the bonuses as evenly as possible across all employees. Given the number of employees, their seniority, and performance ratings, help the company decide if it\'s possible to assign bonus amounts such that no two employees receive the same bonus. The bonus amounts need to be non-zero and integers, and each unique bonus should be used once and only once. -----Input----- - The first line contains T, the number of test cases. Each test case consists of 2 lines. - The first line of each test case contains an integer N, the number of employees. - The second line contains N space-separated integers representing the performance ratings of each employee. -----Output----- For every test case, if it is possible to assign bonuses as per the conditions, print \\"POSSIBLE\\" on a separate line. Otherwise, print \\"IMPOSSIBLE\\". The answers are case insensitive. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq performance rating of each employee leq 100 -----Sample Input----- 3 4 1 2 3 4 3 10 10 10 2 5 1 -----Sample Output----- POSSIBLE IMPOSSIBLE POSSIBLE -----Explanation----- For test 1: Bonuses can be assigned as 1, 2, 3, and 4 for performance ratings. For test 2: All employees have the same performance rating, making it impossible to assign different bonuses. For test 3: Bonuses can be assigned as 1 and 2 for performance ratings.","solution":"def is_bonus_assignment_possible(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] performance_ratings = test_cases[i][1] # Check for unique performance ratings if len(set(performance_ratings)) == N: results.append(\\"POSSIBLE\\") else: results.append(\\"IMPOSSIBLE\\") return results # Example usage # T = 3 # test_cases = [ # (4, [1, 2, 3, 4]), # (3, [10, 10, 10]), # (2, [5, 1]) # ] # print(is_bonus_assignment_possible(T, test_cases)) # Output: [\'POSSIBLE\', \'IMPOSSIBLE\', \'POSSIBLE\']"},{"question":"Write a function `closest_sum` that takes in an array of integers `nums` and a target integer `target`. The function should return a pair of integers from the array whose sum is closest to the target. If there are multiple pairs with the same closest sum, return the pair with the smallest sum. If no valid pair can be found, return an empty array. For example: ``` nums: [10, 22, 28, 29, 30, 40] target: 54 ``` In this example, the pair `[22, 30]` has the sum closest to 54. **Notes:** - The input array will contain at least two integers. - The order of the output pair does not matter. - There will be at least one unique pair with a sum closest to the target in the array.","solution":"def closest_sum(nums, target): Finds a pair of integers in the array nums whose sum is closest to the target. Args: nums (list of int): The list of integers. target (int): The target sum. Returns: list of int: The pair of integers whose sum is closest to the target. nums.sort() closest_pair = [] closest_diff = float(\'inf\') left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] current_diff = abs(current_sum - target) if current_diff < closest_diff: closest_diff = current_diff closest_pair = [nums[left], nums[right]] if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: return [nums[left], nums[right]] return closest_pair"},{"question":"Your company is developing a new calendar application, and you are tasked with implementing a feature that helps users find the shortest gap between two events on their schedule. Each event is represented by a pair of integers `(start_time, end_time)` where `start_time` and `end_time` are given in minutes past midnight. For example, an event that starts at 9:00 AM and ends at 10:00 AM would be represented as `(540, 600)`. Write a function to find and return the shortest gap between two consecutive events in a list of events. If there are no gaps, return `0`. Your function should take a list of tuples `events`, where each tuple represents an event `(start_time, end_time)`. -----Input----- - A list of tuples `events` where each tuple contains two integers `start_time` and `end_time`. - It can be assumed that the events are non-overlapping and sorted by `start_time`. -----Output----- - An integer representing the shortest gap between two consecutive events. If there are no gaps, return `0`. -----Constraints----- - The list `events` will contain at least two events and at most `10^5` events. - `0 <= start_time < end_time <= 1440` for all events. -----Example Input----- events = [(540, 600), (630, 700), (720, 780)] -----Example Output----- 30 Explanation: - The gap between the first event `(540, 600)` and the second event `(630, 700)` is `30` minutes. - The gap between the second event `(630, 700)` and the third event `(720, 780)` is `20` minutes. - The shortest gap is `20` minutes, so the function should return `20`. -----Example Input----- events = [(540, 600), (600, 660), (660, 720)] -----Example Output----- 0 Explanation: - There are no gaps between the events. - The function should return `0`.","solution":"def find_shortest_gap(events): Returns the shortest gap between two consecutive events. If there are no gaps, return 0. shortest_gap = float(\'inf\') for i in range(1, len(events)): gap = events[i][0] - events[i - 1][1] if gap < shortest_gap: shortest_gap = gap return shortest_gap if shortest_gap != float(\'inf\') else 0"},{"question":"You are given an m x n 2D grid initialized with these three possible values: - `-1` representing a wall or an obstacle. - `0` representing a gate. - `INF` representing an empty room. We use the value `2^31 - 1` to represent INF as you may assume that the distance to a gate is less than `2^31 - 1`. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, leave the room as INF. Note that you can only move up, down, left, or right, not diagonally. # Function Signature ```python def wallsAndGates(rooms: List[List[int]]) -> None: pass ``` # Input - `rooms`: A 2D list of integers representing the grid. # Output - The function should modify the `rooms` grid in-place with the required distances. It does not need to return anything. # Example 1 Input ``` [ [INF, -1, 0, INF], [INF, INF, INF, -1], [INF, -1, INF, -1], [0, -1, INF, INF] ] ``` Output ``` [ [3, -1, 0, 1], [2, 2, 1, -1], [1, -1, 2, -1], [0, -1, 3, 4] ] ``` # Constraints - All the values in the grid are either `-1`, `0`, or `INF`. - m == grid.length - n == grid[i].length - 1 <= m, n <= 100 # Notes - Since this problem asks for shortest paths to gates for all cells, a BFS (Breadth-First Search) starting from all gates simultaneously is an effective approach. - You need to handle multiple start points (gates) which is feasible with BFS by initializing the queue with all gate cells and exploring their neighbors simultaneously.","solution":"from collections import deque from typing import List def wallsAndGates(rooms: List[List[int]]) -> None: INF = 2**31 - 1 if not rooms or not rooms[0]: return m, n = len(rooms), len(rooms[0]) queue = deque() # Initialize the queue with all gates\' positions for i in range(m): for j in range(n): if rooms[i][j] == 0: queue.append((i, j)) # Directions for the neighbors: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy # If the new position is within bounds and is an empty room if 0 <= nx < m and 0 <= ny < n and rooms[nx][ny] == INF: rooms[nx][ny] = rooms[x][y] + 1 queue.append((nx, ny))"},{"question":"You are given a string containing only lowercase letters and the character \\"*\\", which acts as a wildcard that can replace any letter. Determine whether the string can be rearranged to form a palindrome. Output \\"YES\\" if it is possible to form a palindrome, otherwise output \\"NO\\". For example: ``` Input: \\"aab*\\" Output: \\"YES\\" // Explanation: The wildcard \\"*\\" can be replaced with \'a\' to form the palindrome \\"aaba\\" or with \'b\' to form \\"abaa\\". Input: \\"abc*\\" Output: \\"NO\\" // Explanation: There is no valid way to replace \\"*\\" such that a palindrome can be formed. ``` Constraints: - The input string length will be between 1 and 1000 characters. - The string will contain only lowercase letters and the character \\"*\\".","solution":"def can_form_palindrome(string): Determines if the given string can be rearranged to form a palindrome by replacing wildcards. from collections import Counter # Count frequency of each character freq = Counter(char for char in string if char != \'*\') # Count the number of odd frequency characters odd_count = sum(1 for count in freq.values() if count % 2 != 0) # In a palindrome, we can have at most one odd frequency character # The wildcard \'*\' can be used to balance the odd frequency characters wildcards = string.count(\'*\') # Check if the number of odd frequency characters can be balanced with wildcards if odd_count <= wildcards + 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function named `reverseWords(sentence)` that takes a string `sentence` and returns a new string with the words in reverse order. Words are defined as sequences of non-space characters. Multiple spaces between words should be reduced to a single space in the output. If the input is an empty string, the function should return an empty string.","solution":"def reverseWords(sentence): Reverses the words in the input sentence. Parameters: sentence (str): A string of words separated by spaces. Returns: str: A new string with the words in reverse order and multiple spaces reduced to a single space. # Splitting the sentence into words and filtering out any empty words from multiple spaces words = list(filter(None, sentence.split(\' \'))) # Reversing the list of words words.reverse() # Joining the reversed list of words with a single space and returning return \' \'.join(words)"},{"question":"A common prefix of two strings a and b is the greatest string c which is a prefix of both a and b. For example, the common prefix of \\"algorithm\\" and \\"algebra\\" is \\"alg\\". You are given two strings s and t of lengths n and m, respectively. Your task is to find the longest common prefix of s and t. If the common prefix does not exist, output an empty string. Implement a function `longest_common_prefix(s: str, t: str) -> str` that takes in two strings s and t, then returns the longest common prefix of s and t. # Input - Two strings s and t, each consisting of lowercase Latin letters. - The length of each string will not exceed 10^5. # Output - A single string, which is the longest common prefix of both s and t. If no common prefix exists, return an empty string. # Example ```python def longest_common_prefix(s: str, t: str) -> str: min_length = min(len(s), len(t)) for i in range(min_length): if s[i] != t[i]: return s[:i] return s[:min_length] # Example 1 s = \\"algorithm\\" t = \\"algebra\\" print(longest_common_prefix(s, t)) # Output: \\"alg\\" # Example 2 s = \\"abc\\" t = \\"xyz\\" print(longest_common_prefix(s, t)) # Output: \\"\\" # Example 3 s = \\"apple\\" t = \\"application\\" print(longest_common_prefix(s, t)) # Output: \\"appl\\" ```","solution":"def longest_common_prefix(s: str, t: str) -> str: min_length = min(len(s), len(t)) for i in range(min_length): if s[i] != t[i]: return s[:i] return s[:min_length]"},{"question":"You are tasked with reversing the vowels in a given string. Vowels are defined as `a, e, i, o, u` and their uppercase counterparts. Your function should return the string with the vowels\' order reversed, while keeping all other characters in their original positions. -----Input:----- - The input contains a single string S. -----Output:----- - Return the modified string with the vowels reversed. -----Constraints----- - 1 le |S| le 10^5 - S will consist of only printable ASCII characters. -----Sample Input:----- hello world -----Sample Output:----- hollo werld","solution":"def reverse_vowels(s): Reverses the vowels in the input string s. vowels = \\"aeiouAEIOU\\" s_list = list(s) left, right = 0, len(s) - 1 while left < right: if s_list[left] not in vowels: left += 1 continue if s_list[right] not in vowels: right -= 1 continue # Swap vowels s_list[left], s_list[right] = s_list[right], s_list[left] left += 1 right -= 1 return \'\'.join(s_list)"},{"question":"-----Problem----- Emily is a secret agent who communicates using numeric sequences. These sequences form codes that must follow a defined set of rules. A sequence is valid if it can be formed by concatenating one or more instances of a specific \\"building block\\" sequence. Each building block is a numeric string with a length between 1 and 10. Given a numeric sequence and a list of valid building blocks, determine if the sequence can be fully constructed from the building blocks. -----Input----- The input begins with an integer N, the number of building block sequences (1 ≤ N ≤ 1000). The next N lines each contain one valid building block sequence. Each building block sequence is a string of digits (0-9), and has length between 1 and 10. The next line contains an integer T. T is the number of queries (1 ≤ T ≤ 100). Each of the next T lines contains a numeric sequence which you need to check for validity. Each sequence is a string of digits (0-9), and has a length between 1 and 1000. -----Output----- For each query, output \\"YES\\" if the numeric sequence can be fully constructed using the building block sequences. Otherwise, output \\"NO\\". Each result should be followed by a newline character. -----Sample Input----- 3 1 101 11 2 11011 10101 -----Sample Output----- YES NO -----Explanation----- For query 1, \\"11011\\" can be formed by concatenating \\"11\\" and \\"011\\" (where \\"011\\" is equivalent to \\"101\\" with leading zero). For query 2, \\"10101\\" cannot be formed by concatenating the building blocks \\"1\\", \\"101\\", and \\"11\\".","solution":"def can_form_sequence(blocks, sequence): Determines if the sequence can be formed using the given blocks. n = len(sequence) dp = [False] * (n + 1) dp[0] = True for i in range(1, n + 1): for block in blocks: if i >= len(block) and sequence[i-len(block):i] == block: dp[i] = dp[i] or dp[i-len(block)] return dp[-1] def check_sequences(n, blocks, t, sequences): results = [] for seq in sequences: if can_form_sequence(blocks, seq): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Ali has a habit of noting down all his expenses in a notebook. Each page in his notebook records the expenses for a given day, represented as a list of positive integers (each integer stands for an expense). Unfortunately, some of the pages got torn and now he can only see scattered portions of the pages. Your task is to identify which day had the highest total expense from the given records. -----Input----- Each entry in the input is a list of integers where each integer is a positive number representing the amount spent. -----Output----- Print the maximum total expense across all given days. -----Constraints----- 1<= number of days <=100 1<=number of expenses in a day <=50 1<=amount of each expense <=1000 -----Example----- Input: [120, 450, 230, 40] [500, 700] [300, 200, 100, 400] Output: 1200","solution":"def highest_total_expense(expenses_for_each_day): This function takes a list where each element is a list of positive integers representing the expenses of a particular day and returns the highest total expense across all given days. Parameters: expenses_for_each_day (list of list of int): A list containing n lists of expenses. Returns: int: The highest total expense among all given days. return max(sum(day) for day in expenses_for_each_day)"},{"question":"# Task Palette wants to help her customers choose the right shades of colors for their paintings. She has a palette of `n` different colors, each representing a unique shade. To give her customers the best choices, she wants to generate all possible unique combinations of colors using exactly `k` colors from her palette. Your task is to implement a function that generates all possible combinations of `k` colors from the palette of `n` colors. The colors can be represented as integers from `1` to `n`. # Example: For `n = 4` and `k = 2`, the output should be: ``` [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]] ``` For `n = 5` and `k = 3`, the output should be: ``` [[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]] ``` # Input/Output: - `[input]` integer `n` `2 ≤ n ≤ 15` - `[input]` integer `k` `1 ≤ k ≤ n` - `[output]` 2D integer array An array of arrays, where each array contains a combination of `k` integers out of `1` to `n`. # Note: - The combinations within the output arrays should be in ascending order. - The order of the combinations in the output list does not matter.","solution":"from itertools import combinations def generate_combinations(n, k): Generate all possible combinations of k colors from a palette of n colors. Args: n (int): The number of colors in the palette. k (int): The number of colors in each combination. Returns: list of list of int: A list of all possible k-color combinations from the n-color palette. return [list(c) for c in combinations(range(1, n + 1), k)]"},{"question":"Given an integer array, determine if it contains all unique values. Develop a function that accepts an array of integers and returns a boolean value indicating whether all the integers in the array are distinct. # Function Signature ```python def all_unique(arr: List[int]) -> bool: pass ``` # Input * An array of integers `arr`, where 1 <= len(arr) <= 10^5 and -10^9 <= arr[i] <= 10^9. # Output * Return `True` if all elements in the array are unique, otherwise return `False`. # Examples ```python print(all_unique([1, 2, 3, 4, 5])) # True print(all_unique([1, 2, 2, 4, 5])) # False print(all_unique([0])) # True print(all_unique([])) # Exception or Error ```","solution":"from typing import List def all_unique(arr: List[int]) -> bool: Determines if all elements in the array are unique. Args: arr (List[int]): A list of integers. Returns: bool: True if all elements are unique, False otherwise. return len(arr) == len(set(arr))"},{"question":"Write a function \'is_prime\' that takes a single integer as input and returns a boolean value. The function should return True if the input integer is a prime number and False otherwise. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. For example, 2, 3, 5, 7, and 11 are prime numbers, while 4, 6, 8, 9, and 10 are not.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"# Background The Fibonacci sequence is a classic sequence in mathematics where each number in the sequence is the sum of the two preceding ones, typically starting with 0 and 1. The sequence begins: 0, 1, 1, 2, 3, 5, 8, 13, and so on. # Problem Creating Fibonacci numbers is fairly straightforward, but what if you wanted to create a modified Fibonacci sequence? In this modified sequence, instead of starting from 0 and 1, you start from any two arbitrary integers that can be input. Additionally, instead of defining the next number as the sum of the previous two, you define it using a more complex operation: - The next number is calculated by summing the previous two numbers and then taking the modulo of the result by a given positive integer `m`. For example, given the two initial numbers as 5 and 7, and a modulo `m` of 10, the sequence would proceed as follows: - Start with 5, 7 - Next number: (5+7) % 10 = 2 - Next number: (7+2) % 10 = 9 - Next number: (2+9) % 10 = 1 - and so on... # Function Signature You need to implement the following functions: 1. `generate_sequence(a, b, m, n)`: Generates the first `n` numbers of the modified Fibonacci sequence, starting with `a` and `b`, and using modulo `m` for computing each subsequent number. # Input Format - `a` and `b`: Integers, the first two numbers in the sequence. - `m`: An integer, the modulo to be applied. - `n`: An integer, the number of elements to generate in the sequence. # Output Format - A list of the first `n` elements of the modified Fibonacci sequence. # Examples ```python generate_sequence(5, 7, 10, 5) ``` Output: ```python [5, 7, 2, 9, 1] ``` ```python generate_sequence(0, 1, 100, 10) ``` Output: ```python [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ``` ```python generate_sequence(4, 9, 3, 7) ``` Output: ```python [4, 9, 1, 1, 2, 0, 2] ``` # Note You can assume that all inputs are valid and that `m` is always a positive integer.","solution":"def generate_sequence(a, b, m, n): Generates the first `n` numbers of a modified Fibonacci sequence. Parameters: a (int): The first number of the sequence. b (int): The second number of the sequence. m (int): The modulo to be applied for computing each subsequent number. n (int): The number of elements to generate. Returns: List[int]: The list containing the first `n` elements of the modified Fibonacci sequence. if n == 0: return [] elif n == 1: return [a] sequence = [a, b] for _ in range(2, n): next_num = (sequence[-1] + sequence[-2]) % m sequence.append(next_num) return sequence"},{"question":"In the kingdom of XYZ, the royal court heavily relies on coded communications for passing important messages. Each letter in a message is represented by its corresponding position in the alphabet (A=1, B=2, ..., Z=26). In an effort to further secure these messages, the court decides to add a unique transformation. The transformation involves adding a numeric key to each letter\'s position value, wrapping around if necessary. Given an original message and a numeric key, help the court transform the message using the described method. Here\'s the exact process: 1. Convert each letter of the message to its position number (1 for A, 2 for B, ..., 26 for Z). 2. Add the numeric key to each number. 3. Apply modulo 26 to keep the values within the range [1,26]. 4. Convert the resulting numbers back to their corresponding letters. Implement this transformation in a function `secure_transform`. -----Input Format----- - The first line contains the original message, a string consisting of uppercase English letters. - The second line contains the numeric key, a positive integer. -----Output Format----- - Output the transformed message as a string of uppercase English letters. -----Constraints----- - 1 <= length of the message <= 1000 - 1 <= numeric key <= 1000 Sample Input HELLO 3 Sample Output KHOOR","solution":"def secure_transform(message, key): def char_to_number(char): return ord(char) - ord(\'A\') + 1 def number_to_char(num): return chr(((num - 1) % 26) + ord(\'A\')) transformed_message = \\"\\" for char in message: original_number = char_to_number(char) transformed_number = (original_number + key - 1) % 26 + 1 transformed_message += number_to_char(transformed_number) return transformed_message"},{"question":"You are given a list of integers `arr` and an integer `k`. Your task is to implement a function that finds the `k`th largest element in the list. Note that it is the kth largest element in the sorted order, not the kth distinct element. Constraints: - You must make sure your code runs efficiently. - You cannot use built-in sorting functions or any library that provides a ready-made solution for this problem. Function Signature: ```python def find_kth_largest(arr: List[int], k: int) -> int: pass # Example: # arr = [3, 2, 1, 5, 6, 4] # k = 2 # find_kth_largest(arr, k) -> 5 # arr = [3, 2, 3, 1, 2, 4, 5, 5, 6] # k = 4 # find_kth_largest(arr, k) -> 4 ```","solution":"import heapq from typing import List def find_kth_largest(arr: List[int], k: int) -> int: Returns the kth largest element in the list arr. # Create a min-heap with the first k elements of the array heap = arr[:k] heapq.heapify(heap) # Iterate over the remaining elements in the array for num in arr[k:]: # If the current number is larger than the smallest number in the heap if num > heap[0]: heapq.heappop(heap) heapq.heappush(heap, num) # The root of the heap is the kth largest element return heap[0]"},{"question":"# Task Determine the most frequent word in a given text and return it along with its frequency. If there are multiple words with the same highest frequency, return the word that appears first when sorted alphabetically. # Input/Output `[input]` string `text` A string of words separated by spaces, containing only lowercase letters. The length of `text` should be in the range `1 <= text.length <= 1000`. [output] a tuple of string and integer A tuple where the first element is the word with the highest frequency and the second element is its frequency count. # Example For `text = \\"hello world hello\\"`, the output should be `(\\"hello\\", 2)`. For `text = \\"test test test go go\\"`, the output should be `(\\"test\\", 3)`. For `text = \\"a bb bb a cc cc cc\\"`, the output should be `(\\"cc\\", 3)`.","solution":"def most_frequent_word(text): Returns the most frequent word in the given text along with its frequency. If multiple words have the same highest frequency, the word that appears first alphabetically is returned. words = text.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 max_frequency = max(word_count.values()) most_frequent_words = [word for word, count in word_count.items() if count == max_frequency] most_frequent_words.sort() return most_frequent_words[0], max_frequency"},{"question":"# Task You are given a list of integers representing flower heights in a garden. Your task is to determine if it\'s possible to create a flower arrangement such that the difference in height between any two adjacent flowers is at most a given integer `D`. # Example For: ``` heights = [5, 1, 7, 3, 9] D = 4 ``` the output should be `true` because the difference between each adjacent flower\'s height can be arranged to be at most 4 (e.g., [5, 7, 9, 3, 1]). For: ``` heights = [5, 1, 7, 3, 9] D = 1 ``` the output should be `false` since it\'s impossible to arrange the flowers such that the difference between the heights of adjacent flowers is at most 1. # Input/Output - `[input]` a list of integers `heights` Array of flower heights where each integer represents the height of a flower. - `[input]` an integer `D` The maximum allowed difference in height between two adjacent flowers. Constraints: `1 ≤ heights.length ≤ 100` `1 ≤ heights[i] ≤ 1000` `1 ≤ D ≤ 1000` - `[output]` a boolean value `true` if it is possible to create such an arrangement, `false` otherwise.","solution":"def can_arrange(heights, D): Determines if it\'s possible to arrange flowers such that the height difference between any two adjacent flowers is at most D. Parameters: heights (list): List of flower heights. D (int): Maximum allowed difference in height between two adjacent flowers. Returns: bool: True if such arrangement is possible, False otherwise. # Sort the heights in ascending order heights.sort() # Check the difference of all adjacent elements in the sorted list for i in range(1, len(heights)): if heights[i] - heights[i-1] > D: return False return True"},{"question":"# Word Ladder Path Finder Given two words (beginWord and endWord), and a dictionary\'s word list, find the length of the shortest transformation sequence from beginWord to endWord, such that: 1. Only one letter can be changed at a time. 2. Each transformed word must exist in the word list. Note: - Return 0 if there is no such transformation sequence. - All words have the same length. - All words contain only lowercase alphabetic characters. - You may assume no duplicates in the word list. - You may assume beginWord and endWord are non-empty and are not the same. Write a function `ladderLength`/`ladder_length()` that accepts `beginWord`, `endWord`, and `wordList` and returns the length of the shortest transformation sequence or 0 if no such sequence exists. # Examples ``` ladderLength(\\"hit\\", \\"cog\\", [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"]); // => 5 ``` ``` ladderLength(\\"hit\\", \\"cog\\", [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"]); // => 0 ``` # Function Signature - `def ladder_length(beginWord: str, endWord: str, wordList: List[str]) -> int:`","solution":"from collections import deque from typing import List def ladder_length(beginWord: str, endWord: str, wordList: List[str]) -> int: word_set = set(wordList) if endWord not in word_set: return 0 queue = deque([(beginWord, 1)]) while queue: current_word, steps = queue.popleft() if current_word == endWord: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_set: word_set.remove(next_word) queue.append((next_word, steps + 1)) return 0"},{"question":"You are given two strings: a source string and a target string. Your task is to determine whether it is possible to obtain the target string by deleting some characters (possibly zero) from the source string without changing the order of the remaining characters. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. The next t lines contain two strings each. The first line contains the source string s (1 le text{len}(s) le 10^3) and the second line contains the target string t (1 le text{len}(t) le 10^3). -----Output----- For each test case, print \\"YES\\" (without quotes) if the target string can be obtained by deleting some characters from the source string, while preserving the order of the remaining characters. Otherwise, print \\"NO\\" (without quotes). -----Example----- Input 3 abcdef abc coding loop hello hello Output YES NO YES -----Note----- In the first test case, \\"abc\\" can be obtained by deleting \\"d\\", \\"e\\", and \\"f\\" from \\"abcdef\\". In the second test case, \\"oop\\" cannot be obtained from \\"coding\\" otherwise than by deleting \\"d\\", \\"i\\", \\"n\\" and then \\"g\\", which would leave \\"codin\\". Hence, the target string \\"oop\\" can\'t be derived. In the third test case, the target string \\"hello\\" is already the same as the source string, so it is possible to obtain it without any deletion.","solution":"def can_form_target(source, target): Determines if `target` can be formed from `source` by deleting characters. target_index = 0 for char in source: if target_index < len(target) and char == target[target_index]: target_index += 1 return target_index == len(target) def process_test_cases(test_cases): results = [] for source, target in test_cases: if can_form_target(source, target): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Two strings, `s1` and `s2`, are called \\"anagram substrings\\" if `s2` is a substring of any permutation of `s1`. For example, if `s1 = \\"aabb\\"` and `s2 = \\"ab\\"`, then `s2` is an anagram substring of `s1` because \\"ab\\" is a substring of the permutation \\"abba\\" of `s1`. However, if `s1 = \\"abc\\"` and `s2 = \\"d\\"`, then `s2` is not an anagram substring of `s1`. Given two strings `s1` and `s2`, determine if `s2` is an anagram substring of `s1`. If it is, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The first line contains an integer `T`, the number of test cases. Then `T` pairs of lines follow: - The first line of each pair contains the string `s1`. - The second line of each pair contains the string `s2`. -----Output----- For each test case, print \\"YES\\" if `s2` is an anagram substring of `s1`, otherwise print \\"NO\\". -----Constraints----- 1 ≤ T ≤ 10 1 ≤ |s1|, |s2| ≤ 1000 s1 and s2 consist only of lowercase English letters. -----Example----- Input: 3 aabb ab abc d abcdef fed Output: YES NO YES","solution":"from collections import Counter def is_anagram_substring(s1, s2): Determine if s2 is an anagram substring of s1. :param s1: First string. :param s2: Second string. :return: \\"YES\\" if s2 is an anagram substring of s1, otherwise \\"NO\\". len_s1 = len(s1) len_s2 = len(s2) if len_s2 > len_s1: return \\"NO\\" s2_counter = Counter(s2) window_counter = Counter(s1[:len_s2]) if window_counter == s2_counter: return \\"YES\\" for i in range(1, len_s1 - len_s2 + 1): window_counter[s1[i + len_s2 - 1]] += 1 window_counter[s1[i - 1]] -= 1 if window_counter[s1[i - 1]] == 0: del window_counter[s1[i - 1]] if window_counter == s2_counter: return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for i in range(T): s1 = test_cases[i*2] s2 = test_cases[i*2 + 1] results.append(is_anagram_substring(s1, s2)) return results"},{"question":"# Task Given two integers `n` and `k`, return all possible combinations of `k` numbers out of the range `1` to `n` inclusive. Each combination should be displayed as a list of integers. The results should be returned as a list of lists, with each inner list representing a combination. The combinations should be listed in lexicographic (dictionary) order. # Example For `n = 4` and `k = 2`, the output should be: ``` [ [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4] ] ``` For `n = 3` and `k = 1`, the output should be: ``` [ [1], [2], [3] ] ``` # Input/Output - `[input]` integer `n` The upper limit of the range. Constraints: 1 ≤ n ≤ 10. - `[input]` integer `k` The number of elements in each combination. Constraints: 1 ≤ k ≤ n. - `[output]` a list of lists A list of all possible combinations, with each combination represented as a list of integers.","solution":"from itertools import combinations def combine(n, k): Returns all possible combinations of k numbers out of the range 1 to n inclusive. return [list(c) for c in combinations(range(1, n + 1), k)]"},{"question":"A company has several departments, and each department has a list of employees working in it. The Human Resources (HR) department wants to send a notification to all departments that have more than `K` employees. Your task is to determine which departments should receive the notification. -----Input:----- - The first line will contain T, the number of testcases. Then the testcases follow. - The first line of each testcase contains an integer D (the number of departments) and an integer K (the threshold number of employees). - The next D lines each contains two values: a string dept_name (the name of the department) and an integer num_employees (the number of employees in that department). -----Output:----- For each testcase, print the names of the departments that have more than K employees. Each department name should be printed on a new line in the order they appeared in the input. If no department meets the criteria, print \\"NO DEPARTMENTS\\" (without quotes). -----Constraints:----- - 1 leq T leq 50 - 1 leq D leq 1000 - 1 leq K leq 1000000 - 1 leq num_employees leq 1000000 - 1 leq |dept_name| leq 100 -----Sample Input:----- 2 3 10 Sales 5 Engineering 15 HR 8 2 20 Marketing 22 Support 18 -----Sample Output:----- Engineering NO DEPARTMENTS","solution":"def departments_to_notify(test_cases): results = [] for test in test_cases: D, K = test[\\"limits\\"] departments = test[\\"departments\\"] eligible_departments = [name for name, num in departments if num > K] if eligible_departments: results.append(eligible_departments) else: results.append([\\"NO DEPARTMENTS\\"]) return results"},{"question":"You are given an integer array nums. You can perform the following operation on the array any number of times: Choose any two elements nums[i] and nums[j] (0 <= i, j < nums.length) and replace nums[i] with nums[i] + nums[j], and replace nums[j] with nums[i] + nums[j]. The goal is to make all elements of the array the same using the minimum number of operations. Return the minimum number of operations needed to make all elements in the array equal. Example 1: Input: nums = [1, 2, 3] Output: 4 Explanation: 1. Choose i = 0 and j = 1: nums = [3, 3, 3] (nums[0] = 1 + 2, nums[1] = 1 + 2) 2. Choose i = 0 and j = 2: nums still remains [3, 3, 3] (nums[2] is already equal to nums[i]) Thus, the minimum number of operations is 4. Example 2: Input: nums = [5, 7, 9] Output: 8 Constraints: 1 <= nums.length <= 10^4 1 <= nums[i] <= 10^4","solution":"def min_operations_to_make_equal(nums): This function takes a list of integers and returns the minimum number of operations needed to make all elements in the list the same. # To make all elements equal, first, we need to find the GCD of all numbers. from math import gcd from functools import reduce # Find GCD of the entire array array_gcd = reduce(gcd, nums) # Count how many elements are in the array n = len(nums) # The formula for the number of operations is derived from the problem constraint. # each replace operation essentially doubles the sum of two elements, # so to bring down all elements to the gcd point we can directly # multiply length of array(n) by 2 return n * 2"},{"question":"You are given a two-dimensional grid of size N times N representing a maze. Each cell in the maze can either be an open space (marked by \'.\') or a wall (marked by \'#\'). Your task is to determine whether it is possible to start from the top-left corner of the maze ((1, 1) in 1-based indexing) and reach the bottom-right corner ((N, N)) by moving only through open spaces. Valid moves are: - Moving right from (i, j) to (i, j+1) - Moving left from (i, j) to (i, j-1) - Moving down from (i, j) to (i+1, j) - Moving up from (i, j) to (i-1, j) You cannot move out of the maze boundaries or through walls. Determine if there is a path from the top-left to the bottom-right corner. -----Input :----- - The first line of input contains a single integer T (number of test cases). - Each of the next 2 times T lines consists of: - The first line of each test case contains a single integer N (size of the maze). - The following N lines each contain an N-length string depicting a row in the maze. -----Output :----- For each test case, print \\"YES\\" if there is a path from the top-left to the bottom-right corner, otherwise print \\"NO\\". -----Constraints :----- - 1 leq T leq 50 - 2 leq N leq 100 -----Sample Input :----- 2 4 ..#. .#.. ..#. #. 3 ... #.# ... -----Sample Output :----- NO YES -----Explanation:----- For the first test case, it\'s impossible to reach the bottom-right corner because the path is blocked. For the second test case, you can reach the bottom-right corner by moving along the open cells.","solution":"def is_path_possible(maze): N = len(maze) visited = [[False]*N for _ in range(N)] def dfs(x, y): if x == N-1 and y == N-1: return True visited[x][y] = True directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny] and maze[nx][ny] == \'.\': if dfs(nx, ny): return True return False if maze[0][0] == \'#\' or maze[N-1][N-1] == \'#\': return \\"NO\\" return \\"YES\\" if dfs(0, 0) else \\"NO\\" def solve_mazes(test_cases): results = [] for maze in test_cases: results.append(is_path_possible(maze)) return results"},{"question":"You are given an integer array nums consisting of positive integers. You need to reorder the array in a way such that the sum of every pair of adjacent elements is a perfect square. If there are multiple ways to reorder the array, return any of them, otherwise, return an empty array if no such reordering is possible. A perfect square is an integer that is the square of an integer. For example, 1, 4, 9, and 16 are perfect squares while 2, 3, 5, and 10 are not. -----Input----- A single line consists of an integer n (1 ≤ n ≤ 16) — the number of elements in the array, followed by n integers a_{i} (1 ≤ a_{i} ≤ 2000000) — the elements of the array. -----Output----- Print the reordered array as a space-separated list of integers if a reordering is possible. If no such reordering is possible, print an empty array. -----Examples----- Input 3 1 17 8 Output 17 8 1 Input 4 2 2 2 2 Output 2 2 2 2 -----Note----- In the first case, (17 + 8) = 25 which is a perfect square, and (8 + 1) = 9 which is also a perfect square. In the second case, the array contains repeated elements (2), and (2 + 2) = 4 which is a perfect square. Any permutation is valid as all the adjacent pairs will be perfect squares.","solution":"import itertools import math def is_perfect_square(x): Checks if a number x is a perfect square. s = int(math.sqrt(x)) return s * s == x def reorder_to_perfect_squares(n, nums): Reorders the array so that the sum of every pair of adjacent elements is a perfect square. If there are multiple ways to reorder the array, return any of them, otherwise, return an empty array if no such reordering is possible. # Generate all permutations of nums for permutation in itertools.permutations(nums): if all(is_perfect_square(permutation[i] + permutation[i + 1]) for i in range(n - 1)): return list(permutation) return [] # Function to ingest the input def reorder_to_perfect_squares_from_input(input_string): input_data = list(map(int, input_string.split())) n = input_data[0] nums = input_data[1:] return reorder_to_perfect_squares(n, nums)"},{"question":"You are organizing a marathon and need to establish the overall standings once the race is completed. Each participant\'s time to finish the race is given in minutes. Your task is to determine the fastest time, the slowest time, and calculate the average time for all participants. You will be provided an array of integers representing the times taken by different participants. Your goal is to return a tuple (in Python) or an array (in other languages) with the following three elements: [fastest time, slowest time, average time (rounded to the nearest whole number)].","solution":"def marathon_standings(times): Returns a tuple with the fastest time, the slowest time, and the average time. Parameters: times (list of int): List of times taken by participants. Returns: tuple: (fastest time, slowest time, average time (rounded to the nearest whole number)) if not times: return (0, 0, 0) # Handle the case when the list is empty fastest_time = min(times) slowest_time = max(times) average_time = round(sum(times) / len(times)) return (fastest_time, slowest_time, average_time)"},{"question":"You are given an array of N integers, and you need to find the maximum possible sum of a contiguous subarray (i.e., a subarray with the largest sum). Write a program to solve this problem. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. -----Output:----- For each test case, output a single line containing the maximum sum of a contiguous subarray. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - -10^4 leq text{array elements} leq 10^4 -----Sample Input:----- 2 5 -2 1 -3 4 -1 6 1 2 3 4 5 -10 -----Sample Output:----- 4 15 -----EXPLANATION:----- In the first test case, the maximum sum can be obtained from the subarray [4]. In the second test case, the maximum sum is obtained from the subarray [1, 2, 3, 4, 5]. -----Note:----- The optimal approach to solve this problem is using Kadane\'s Algorithm, which allows us to find the maximum sum of a contiguous subarray in linear time.","solution":"def max_subarray_sum(arr): Implementing Kadane\'s Algorithm to find the maximum sum of a contiguous subarray. if not arr: return 0 max_current = max_global = arr[0] for number in arr[1:]: max_current = max(number, max_current + number) if max_current > max_global: max_global = max_current return max_global def solve(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 results = [] for _ in range(T): N = int(data[index]) index += 1 array = list(map(int, data[index:index + N])) index += N results.append(max_subarray_sum(array)) for result in results: print(result)"},{"question":"You are organizing a toy exchange event for children in your neighborhood. Each child brings one toy and they would like to swap it for another toy. To make it fair and fun, you decide to ensure that no child ends up with their own toy again after the swap. ___ You will be given a list of strings representing the toys brought by children, where each string is the name of a toy, and each index in the list corresponds to a child. Your task is to design a function that redistributes the toys so that no child ends up with the toy they brought. If it\'s impossible to perform the swap under these conditions, the function should return the original list. **Function Signature:** ```python def swap_toys(toys: List[str]) -> List[str]: ``` **Input:** - `toys`: a list of strings `n (1 <= n <= 1000)`, where each string is the name of a toy brought by a child. **Output:** - a list of strings where the toys have been swapped according to the given rules. **Example:** ```python toys = [\\"doll\\", \\"car\\", \\"blocks\\", \\"ball\\"] swap_toys(toys) # Output: [\\"car\\", \\"ball\\", \\"doll\\", \\"blocks\\"] ``` **Notes:** - If there are only two toys, swapping should simply exchange the two. - The returned list should be a permutation of the original list. - The function should return the original list if it\'s not possible to achieve the desired condition.","solution":"from typing import List def swap_toys(toys: List[str]) -> List[str]: n = len(toys) # If there\'s only one toy, its impossible to swap if n == 1: return toys # Create a new array for holding the result swapped_toys = toys[:] # Simple rotating shift for i in range(n): # Move each toy to the next position, wrapping around at the end swapped_toys[i] = toys[(i + 1) % n] return swapped_toys"},{"question":"Task Given an array of integers and a number `k`, write a function that returns all unique pairs of integers in the array whose sum is equal to `k`. Each pair should be returned as a tuple `(a, b)`, where `a <= b`, and the list of pairs should be sorted in ascending order by the first element of the tuple and then by the second element. Example ```python find_pairs([1, 5, 7, -1, 5], 6) === [(1, 5), (-1, 7)]; find_pairs([1, 5, 7, -1, 5], 10) === [(5, 5), (3, 7)]; find_pairs([1, 1, 1, 1], 2) === [(1, 1)]; find_pairs([1, 3, 2, 2], 4) === [(1, 3), (2, 2)]; ``` Note * The input array can contain both positive and negative integers. * Each pair of numbers should be unique. * If no valid pairs are found, return an empty list. * The order of the pairs in the result list should be ascending lexicographically based on the tuple elements.","solution":"def find_pairs(arr, k): Returns all unique pairs of integers in the array whose sum is equal to k, sorted in ascending order by the first element of the tuple and then by the second element. seen = set() pairs = set() for num in arr: target = k - num if target in seen: pairs.add((min(num, target), max(num, target))) seen.add(num) return sorted(pairs)"},{"question":"Mike has a list of unique integers and wants to create a new list by reversing the digits of each integer. If reversing an integer results in leading zeros, they should be omitted. Your task is to implement a function that takes a list of integers and returns a new list with the digits of each integer reversed. For example: ```python reverse_digits([123, 456, 789]) => [321, 654, 987] reverse_digits([103, 200, 305]) => [301, 2, 503] reverse_digits([500, 70, 80, 9]) => [5, 7, 8, 9] ``` **Note:** - The input will always be a list of unique, non-negative integers. - The function should handle empty lists by returning an empty list. - You should handle cases where reversing might result in removing leading zeros. If the integer is zero, it should remain as zero in the returned list.","solution":"def reverse_digits(nums): Takes a list of unique, non-negative integers and returns a new list with the digits of each integer reversed. Args: nums: list of int - a list of unique, non-negative integers. Returns: list of int - a new list with the digits of each integer reversed. def reverse_number(n): return int(str(n)[::-1]) return [reverse_number(num) for num in nums]"},{"question":"You are given a string array `words` and a target string `target`. Return the minimum number of adjacent swaps required to bring the target string to the front of the array. If the target is not present in the array, return -1. Example 1: Input: words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"], target = \\"cherry\\" Output: 1 Explanation: Swap \\"banana\\" with \\"cherry\\" to bring \\"cherry\\" to the front. Example 2: Input: words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"], target = \\"banana\\" Output: 0 Explanation: \\"banana\\" is already adjacent to the front. Example 3: Input: words = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"], target = \\"fig\\" Output: -1 Explanation: \\"fig\\" is not in the array. Constraints: 1. 1 <= words.length <= 10^4 2. 1 <= words[i].length, target.length <= 100 3. words[i] and target consist of lowercase English letters","solution":"def min_adjacent_swaps(words, target): Returns the minimum number of adjacent swaps required to bring the target string to the front of the array. If the target is not present in the array, return -1. if target not in words: return -1 target_index = words.index(target) return target_index"},{"question":"Write a function `spiral_traverse(matrix)` that takes in a 2-dimensional list (a matrix) of arbitrary size and returns a list of its elements in spiral order. Spiral order starts at the top-left corner and traverses the matrix in a clockwise direction, progressively working its way inward. For example, given the following matrix: ``` matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` The function should return: ``` [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10] ``` The function should handle matrices of arbitrary size, including non-square matrices and matrices with only one row or one column. If the matrix is empty, the function should return an empty list. ```python def spiral_traverse(matrix): if not matrix or not matrix[0]: return [] result = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result ``` Note: The solution should be efficient in terms of time complexity, and should not use extra space proportional to the number of elements in the matrix beyond the space needed for the output array.","solution":"def spiral_traverse(matrix): if not matrix or not matrix[0]: return [] result = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"# Task You need to write a function that identifies and returns the first non-repeating character in a given string. If all characters are repeating, the function should return an empty string. # Input - A single string consisting of lowercase English letters. # Output - The first non-repeating character in the given string or an empty string if all characters are repeating. # Example ``` firstNonRepeatingChar(\\"abcab\\") Output: \\"c\\" firstNonRepeatingChar(\\"abab\\") Output: \\"\\" ``` # Note Consider the efficiency of your solution, both in time and space complexities.","solution":"def firstNonRepeatingChar(s: str) -> str: Returns the first non-repeating character in the given string. If all characters are repeating, returns an empty string. char_count = {} # Count occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"Write a function `check_parentheses` that takes a single string input and checks if the parentheses in the string are balanced. Your function should return `True` if the parentheses are balanced and `False` otherwise. Balanced parentheses mean that each opening parenthesis has a corresponding closing parenthesis and they are correctly nested. For example: - `check_parentheses(\\"(())\\")` should return `True` - `check_parentheses(\\"(()\\")` should return `False` - `check_parentheses(\\")(\\")` should return `False` The input string will contain only parentheses characters `\'(\'` and `\')\'`, and you should assume that the input string is non-empty.","solution":"def check_parentheses(s): Checks if the parentheses in the input string are balanced. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Write a function that takes a list of integers and returns the product of all the positive integers in the list. If the list has no positive integers, the function should return 1. Your function should be named `positive_product`, and it should take one parameter: - A list of integers. For example: - `positive_product([1, -2, 3, -4, 5])` should return `15` because 1 * 3 * 5 = 15. - `positive_product([-1, -2, -3, -4])` should return `1` because there are no positive integers in the list. Ensure your function handles empty lists and lists with all negative or zero values appropriately.","solution":"from functools import reduce def positive_product(lst): Returns the product of all positive integers in the list. If there are no positive integers, returns 1. positive_integers = [x for x in lst if x > 0] if not positive_integers: return 1 return reduce(lambda x, y: x * y, positive_integers)"},{"question":"Given an array of integers and a target sum, find all unique quadruplets in the array which gives the sum of the target. A quadruplet is defined as a set of four numbers (a, b, c, d) such that they satisfy the given condition a + b + c + d = target. Each quadruplet should be listed only once, and all quadruplets should be presented in ascending order. Example 1: Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: [ [-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1] ] Explanation: The ordered quadruplets that sum up to 0 are: -2 + -1 + 1 + 2 = 0 -2 + 0 + 0 + 2 = 0 -1 + 0 + 0 + 1 = 0 Example 2: Input: nums = [2, 2, 2, 2, 2], target = 8 Output: [ [2, 2, 2, 2] ] Explanation: The only ordered quadruplet that sums up to 8 is 2 + 2 + 2 + 2 = 8","solution":"def four_sum(nums, target): nums.sort() result = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: sum_ = nums[i] + nums[j] + nums[left] + nums[right] if sum_ == target: result.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_ < target: left += 1 else: right -= 1 return result"},{"question":"Palindromic Substrings Count Input A non-empty string `s` of length `n` where: ``` 1 <= n <= 1000 ``` Output The total number of substrings of `s` that are palindromes. Description A palindrome is a string that reads the same forward and backward. Your task is to count all palindromic substrings of the given string `s`. A substring is a contiguous sequence of characters within a string. Example Given the string `s = \\"abba\\"`, the possible palindromic substrings are: ``` \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", \\"abba\\" ``` The output should be `6` as there are 6 palindromic substrings in total. Given the string `s = \\"racecar\\"`, the possible palindromic substrings are: ``` \\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"cec\\", \\"aceca\\", \\"racecar\\" ``` The output should be `10` as there are 10 palindromic substrings in total. Note that single-character substrings are considered palindromes. Constraints - The length of the string `s` is between `1` and `1000`, inclusive. - The input string `s` contains only lowercase English letters (\'a\' to \'z\').","solution":"def count_palindromic_substrings(s): Returns the total number of substrings of s that are palindromes. n = len(s) count = 0 for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 return count"},{"question":"Design a function that takes in a non-empty list of positive integers representing potion amounts. Your task is to determine if you can evenly distribute these potions among exactly `k` wizards. Each wizard can receive different amounts, but the total number of potions each receives must be the same. Write a function `can_distribute_evenly(potions, k)` that returns `True` if the potions can be evenly distributed among exactly `k` wizards, and `False` otherwise. # Function Signature ```python def can_distribute_evenly(potions: List[int], k: int) -> bool: pass ``` # Input - `potions`: a list of positive integers representing the amounts of each potion. - `k`: an integer representing the number of wizards. # Output - A boolean value indicating if it is possible to evenly distribute the potions among exactly `k` wizards. # Example ```python can_distribute_evenly([1,2,3,4,5,6], 3) # returns True, wizards receive [1, 2, 3] and [4, 5, 6] can_distribute_evenly([1,2,3,4,5], 2) # returns False ``` **Constraints:** 1. `1 <= len(potions) <= 1000` 2. `1 <= potions[i] <= 1000` 3. `1 <= k <= len(potions)` **Example Explanation:** - In the first example, the total sum of potions is `21`, which can be divided among `3` wizards as `[6, 6, 6]`. - In the second example, the total sum of `15` cannot be evenly divided among `2` wizards, making the distribution impossible.","solution":"from typing import List def can_distribute_evenly(potions: List[int], k: int) -> bool: Determines if the potions can be evenly distributed among exactly `k` wizards. total_sum = sum(potions) if total_sum % k != 0: return False target = total_sum // k if max(potions) > target: return False def can_partition(start, count, current_sum): if count == 0: return True if current_sum == target: return can_partition(0, count-1, 0) if current_sum > target: return False for i in range(start, len(potions)): if not taken[i]: taken[i] = True if can_partition(i + 1, count, current_sum + potions[i]): return True taken[i] = False return False taken = [False] * len(potions) return can_partition(0, k, 0)"},{"question":"Given a rectangular grid where each cell is either empty or blocked, a robot needs to find its way from the top-left corner (0, 0) of the grid to the bottom-right corner (m-1, n-1). The robot can move up, down, left, or right, but cannot move into a blocked cell or outside the grid. Write a function that determines if there is a path from the top-left corner to the bottom-right corner. The grid is represented by a 2D array where 0 represents an empty cell and 1 represents a blocked cell. # Input - A 2D list `grid` where `grid[i][j]` is either 0 (empty) or 1 (blocked). # Output - Return `True` if there exists a path from the top-left corner to the bottom-right corner, otherwise return `False`. # Example 1: Input: ``` grid = [ [0, 0, 1], [1, 0, 0], [0, 0, 0] ] ``` Output: ``` True ``` Explanation: ``` One possible path is: (0, 0) -> (1, 1) -> (2, 2) ``` # Example 2: Input: ``` grid = [ [0, 1], [1, 0] ] ``` Output: ``` False ``` Explanation: ``` There is no possible path from (0, 0) to (1, 1). ``` # Constraints: - 1 <= m, n <= 100 - grid[i][j] is 0 or 1","solution":"def is_path(grid): Determines if there is a path from the top-left corner to the bottom-right corner of the grid. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return False rows, cols = len(grid), len(grid[0]) from collections import deque queue = deque([(0, 0)]) visited = set((0, 0)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y = queue.popleft() if (x, y) == (rows-1, cols-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"=====Problem Statement===== You are tasked with implementing a function that computes the longest prefix which is also a suffix in a given string. The prefix and suffix should not overlap. For example, the longest prefix which is also a suffix of \\"ababcab\\" is \\"ab\\". =====Input Format===== A single line of input containing the string, S. =====Constraints===== 1 ≤ len(S) ≤ 1000 The string consists of lowercase English letters. =====Output Format===== Print the longest prefix of the string which is also a suffix. If no such prefix exists, print an empty string.","solution":"def longest_prefix_suffix(S): Returns the longest prefix of the string which is also a suffix. n = len(S) lps = [0] * n # lps array to hold the longest prefix suffix values # Preprocess the pattern (calculate lps array) length = 0 # length of the previous longest prefix suffix i = 1 while i < n: if S[i] == S[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 # The lps[n-1] will contain the length of the longest prefix which is also suffix longest = lps[n-1] # Checking if the length is not equal to n, since prefix and suffix should not overlap if longest > 0 and longest < n: return S[:longest] else: return \\"\\""},{"question":"Create a function called `letterFrequency` that accepts a single string as its argument and returns a dictionary where the keys are the letters from the string and the values are the number of times each letter appears in the string. The function should be case-insensitive, meaning \'A\' and \'a\' should be considered the same letter. Ignore all non-alphabetical characters. For example: ```python letterFrequency(\\"Hello, World!\\") => {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'w\': 1, \'r\': 1, \'d\': 1} letterFrequency(\\"Python Programming!\\") => {\'p\': 2, \'y\': 1, \'t\': 1, \'h\': 1, \'o\': 2, \'n\': 2, \'r\': 2, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 1} ``` # Constraints: - The input string will only contain printable ASCII characters. - The input string can be of arbitrary length. # Requirements: - Include handling for case sensitivity. - Ignore all non-alphabetical characters.","solution":"def letterFrequency(s): Returns a dictionary with the frequency of each letter in the string. The function is case-insensitive and ignores non-alphabetical characters. frequency = {} s = s.lower() for char in s: if char.isalpha(): if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"Write a function to determine the winner of a two-player dice game. The function will take two arrays as input, each representing the results of multiple dice throws for each player. The player with the highest average score wins the game. If the average scores are equal, return \\"It\'s a draw!\\". Inputs: - Two arrays of integers, where each integer represents the result of a dice throw for that player. Each array will have at least one element but no more than ten elements. Dice throws will be between 1 and 6, inclusive. Output: - A string indicating which player won, either \\"Player 1 wins!\\", \\"Player 2 wins!\\", or \\"It\'s a draw!\\".","solution":"def determine_winner(player1_scores, player2_scores): Determines the winner of a two-player dice game based on the average score. Parameters: player1_scores (list of int): List of dice throws for player 1. player2_scores (list of int): List of dice throws for player 2. Returns: str: A string indicating the winner (\\"Player 1 wins!\\", \\"Player 2 wins!\\" or \\"It\'s a draw!\\"). player1_avg = sum(player1_scores) / len(player1_scores) player2_avg = sum(player2_scores) / len(player2_scores) if player1_avg > player2_avg: return \\"Player 1 wins!\\" elif player2_avg > player1_avg: return \\"Player 2 wins!\\" else: return \\"It\'s a draw!\\""},{"question":"# Task Write a function that takes a list of distinct integers and checks if the list is already sorted in non-decreasing order. If the array is not sorted, find and return the minimum number of adjacent swaps required to sort the array in non-decreasing order. # Input/Output - `[input]` integer array `arr` An array of distinct integers. - `[output]` an integer The minimum number of adjacent swaps required to sort the array in non-decreasing order. # Example For `arr = [3, 1, 2]`, the output should be `3`. For `arr = [1, 2, 3, 4, 5]`, the output should be `0`. For `arr = [5, 4, 3, 2, 1]`, the output should be `10`. # Constraints - `0 ≤ arr.length ≤ 1000` - `-10^9 ≤ arr[i] ≤ 10^9`","solution":"def count_adjacent_swaps_to_sort(arr): Counts the minimum number of adjacent swaps required to sort the array in non-decreasing order. :param arr: A list of distinct integers. :return: The minimum number of adjacent swaps required to sort the array. if not arr or len(arr) <= 1: return 0 # Implementing using the count of inversions logic def count_inversions(arr): # Helper function to use merge sort to count inversions def merge_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0] * len(arr) return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1) return count_inversions(arr)"},{"question":"Summary Your challenge is to determine if the provided string (representing a sequence of parentheses) is well-formed, such that every opening parenthesis has a corresponding closing parenthesis. Details A well-formed sequence of parentheses follows these rules: 1. An empty string is well-formed. 2. A string containing one or more valid pairs of parentheses (i.e., \'()\') concatenated together is well-formed. 3. A string where a well-formed sequence is enclosed within another pair of parentheses is also well-formed. You will be given a string containing only the characters \'(\' and \')\'. Your task is to write a function that returns `True` if the sequence is well-formed, and `False` otherwise. **Example:** For the input string `\\"((()))\\"`, your function should return `True`. For the input string `\\")(\\"`, your function should return `False`. Constraints: - The length of the input string will be between 0 and 1000. Function Signature: The function signature is `def is_well_formed(parentheses: str) -> bool`. Test Cases: ```python print(is_well_formed(\\"((()))\\")) # should return True print(is_well_formed(\\")()(\\")) # should return False print(is_well_formed(\\"()()\\")) # should return True print(is_well_formed(\\"((())\\")) # should return False print(is_well_formed(\\"\\")) # should return True ```","solution":"def is_well_formed(parentheses: str) -> bool: Determines if the input string of parentheses is well-formed. Args: parentheses (str): The input string containing only \'(\' and \')\'. Returns: bool: True if the string is well-formed, False otherwise. balance = 0 for char in parentheses: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 # If balance is negative, parentheses are not well-formed if balance < 0: return False # A well-formed string will end with balance = 0 return balance == 0"},{"question":"Unique String Permutations Input A single string: ``` 1 <= len(s) <= 10 ``` The string will only contain lowercase English letters. Output All unique permutations of the given string, sorted in lexicographic order. Each permutation should appear exactly once in the output. Description Given a string, generate all its unique permutations and output them in sorted (lexicographic) order. The function should not output duplicate permutations. For instance, if the input string contains repeated characters, permutations that are identical should be counted only once. Example # Example 1 Input ``` s = \\"aabc\\" ``` Output ``` [\\"aabc\\", \\"aacb\\", \\"abac\\", \\"abca\\", \\"acab\\", \\"acba\\", \\"baac\\", \\"baca\\", \\"bcaa\\", \\"caab\\", \\"caba\\", \\"cbaa\\"] ``` # Example 2 Input ``` s = \\"abc\\" ``` Output ``` [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] ``` # Example 3 Input ``` s = \\"aaa\\" ``` Output ``` [\\"aaa\\"] ```","solution":"from itertools import permutations def unique_permutations(s): Returns all unique permutations of the input string, sorted in lexicographic order. # Generate all permutations all_perms = set(permutations(s)) # Convert tuples to strings and sort the result unique_perms = sorted([\'\'.join(p) for p in all_perms]) return unique_perms"},{"question":"=====Problem Statement===== You are given a list of integers representing daily temperatures. Your task is to calculate the number of days until a warmer temperature for each day. Formally, given a list of integers `T`, return a list `answer` such that `answer[i]` is the number of days you have to wait after the i-th day to get a warmer temperature. If there is no future day for which this is possible, put 0 instead. Examples: Example 1: Input: T = [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Example 2: Input: T = [30, 40, 50, 60] Output: [1, 1, 1, 0] Example 3: Input: T = [30, 60, 90] Output: [1, 1, 0] =====Input Format===== - A list of integers T separated by commas. =====Constraints===== - Each temperature within the list `T` is an integer between 30 and 100. - 1 <= len(T) <= 30000 =====Output Format===== - A list of single-space-separated integers representing the number of days until a warmer temperature for each day.","solution":"def daily_temperatures(T): Calculate the number of days until a warmer temperature for each day. n = len(T) answer = [0] * n stack = [] for i in range(n): while stack and T[i] > T[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"Given an array of length N, and an integer M, find a consecutive subarray such that the sum of its elements is as large as possible but does not exceed M. -----Constraints----- - All values in the input are integers. - 1 le N le 10^5 - 1 le M le 10^9 - -10^9 le A_i le 10^9 -----Input----- Input is given from Standard Input in the following format: N M A_1 A_2 cdots A_N -----Output----- Print a single integer representing the maximum sum of a consecutive subarray whose sum does not exceed M. -----Sample Input----- 5 10 1 2 3 4 5 -----Sample Output----- 10 In this case, the subarray (1, 2, 3, 4) yields the largest sum (1+2+3+4 = 10) that does not exceed M = 10.","solution":"def max_subarray_sum_not_exceeding_m(N, M, A): Finds the maximum possible sum of a consecutive subarray such that the sum does not exceed M. Parameters: - N: length of the array A - M: maximum allowed sum for a subarray - A: list of integers representing the array Returns: - A single integer which is the maximum sum not exceeding M. max_sum = 0 current_sum = 0 start = 0 for end in range(N): current_sum += A[end] while current_sum > M and start <= end: current_sum -= A[start] start += 1 max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given an integer array `nums` which represents the positions of houses along a street. The length of the array is always even, representing the positions of `n` pairs of houses. Your task is to partition this array into `n` pairs such that the maximum distance between the two houses within each pair is minimized. Output the minimized maximum distance. Example 1: Input: nums = [1, 3, 6, 9, 2, 7] Output: 3 Explanation: The array can be partitioned into pairs [(1, 2), (3, 6), (7, 9)] where the maximum distance between houses in each pair is minimized (2-1 = 1, 6-3 = 3, 9-7 = 2), so the minimized maximum distance is 3. Example 2: Input: nums = [1, 2, 5, 7, 10, 14] Output: 4 Explanation: The array can be partitioned into pairs [(1, 2), (5, 7), (10, 14)] where the maximum distance between houses in each pair is minimized (2-1 = 1, 7-5 = 2, 14-10 = 4), so the minimized maximum distance is 4. Example 3: Input: nums = [3, 5, 8, 12, 17, 19] Output: 4 Constraints: 2 <= nums.length <= 1000 0 <= nums[i] <= 10^6 nums.length is even and represents positions of n pairs of houses.","solution":"def minimized_max_distance(nums): Returns the minimized maximum distance between the pairs of houses. nums.sort() max_distance = 0 for i in range(0, len(nums), 2): max_distance = max(max_distance, nums[i+1] - nums[i]) return max_distance"},{"question":"Write a function that takes in a list of strings, each representing a mathematical expression. The function should return a list of the expressions sorted by their numerical value in non-decreasing order. If two expressions evaluate to the same value, maintain their original relative order from the input list. The mathematical expressions will only contain positive integers and the operators `+`, `-`, `*`, and `/`. Divisions should be treated as floating-point divisions. For example: ```python expressions = [\\"3+2*2\\", \\" 3/2 \\", \\" 3+5 / 2 \\"] # After evaluating: # \\"3+2*2\\" -> 7 # \\" 3/2 \\" -> 1.5 # \\" 3+5 / 2 \\" -> 5.5 # Hence, the sorted order is: # [\\" 3/2 \\", \\" 3+5 / 2 \\", \\"3+2*2\\"] ``` Another example: ```python expressions = [\\"6/3*2\\", \\" 1+2*3 / 2 \\", \\" 4-2*2 \\"] # After evaluating: # \\"6/3*2\\" -> 4.0 # \\" 1+2*3 / 2 \\" -> 4.0 # \\" 4-2*2 \\" -> 0.0 # Hence, the sorted order is: # [\\" 4-2*2 \\", \\"6/3*2\\", \\" 1+2*3 / 2 \\"] ``` Function signature: ```python def sort_expressions(expressions: List[str]) -> List[str]: # your code here ``` Constraints: - Expressions length: 1 to 100 characters. - Number of expressions: 1 to 50. You need to follow significant digit precision for floating-point operations as per the default Python floating-point arithmetic.","solution":"from typing import List import re def sort_expressions(expressions: List[str]) -> List[str]: def evaluate(expr: str) -> float: Evaluates the mathematical expression to a float value try: return eval(expr) except: raise ValueError(f\\"Invalid expression: {expr}\\") # Evaluate each expression and pair it with its evaluated value evaluated_expressions = [(expr, evaluate(expr)) for expr in expressions] # Sort based on the numerical evaluated value sorted_expressions = sorted(evaluated_expressions, key=lambda x: x[1]) # Extract sorted original expressions return [expr for expr, value in sorted_expressions]"},{"question":"Write a function that takes a list of integers and returns a dictionary of the integers as keys and their corresponding list of prime factors (excluding 1) as values. Prime factors of a number are prime numbers that divide the number exactly, without leaving a remainder. For instance, the prime factors of 12 are 2 and 3 because 12 = 2^2 * 3. Example: ```python solution([10, 15, 21]) # should return {10: [2, 5], 15: [3, 5], 21: [3, 7] } ``` ```Elixir Solution.prime_factors([10, 15, 21]) # should return %{10 => [2, 5], 15 => [3, 5], 21 => [3, 7]} ```","solution":"def prime_factors(n): Returns a list of prime factors of the given integer n. i = 2 factors = [] while i * i <= n: if n % i: i += 1 else: n //= i if i not in factors: factors.append(i) if n > 1 and n not in factors: factors.append(n) return factors def solution(lst): Returns a dictionary with integers as keys and their prime factors as values. return {num: prime_factors(num) for num in lst}"},{"question":"You are organizing a game tournament in your school, and you need to form teams with students in a fair and balanced manner. Each team must have an equal number of participants, and every student should be in exactly one team. Given the total number of students and the number of desired teams, determine if it is possible to evenly distribute students among the teams. Additionally, if it is possible, calculate how many students will be in each team. -----Input:----- - The first line will contain N, the number of students. - The second line will contain K, the number of teams. -----Output:----- - If it is possible to evenly distribute the students into teams, output \\"Yes\\" followed by the number of students in each team. - If it is not possible to evenly distribute the students into teams, output \\"No\\". -----Constraints----- - 1 leq N leq 10^9 - 1 leq K leq 10^5 -----Sample Input:----- 20 4 -----Sample Output:----- Yes 5","solution":"def can_form_teams(n, k): Determines if it is possible to evenly distribute n students into k teams. If possible, returns \\"Yes\\" followed by the number of students in each team. If not possible, returns \\"No\\". Parameters: n (int): Number of students. k (int): Number of teams. Returns: str: \\"Yes\\" followed by number of students in each team, or \\"No\\". if n % k == 0: students_per_team = n // k return f\\"Yes {students_per_team}\\" else: return \\"No\\""},{"question":"Consider an undirected and unweighted graph with `n` nodes and `m` edges. We want to find the length of the shortest cycle (if any) present in the graph. A cycle is a path of edges and vertices wherein a vertex is reachable from itself. The length of a cycle is the number of edges it contains. If no cycle exists, the length should be considered infinite. -----Input----- The first line contains two integers `n` and `m` (2 leq n leq 100, 1 leq m leq 500) — the number of nodes and edges, respectively. The following `m` lines describe the edges. Each of these lines contains two integers `u` and `v` (1 leq u, v leq n, u neq v) indicating that nodes `u` and `v` are connected by an edge. -----Output----- Print a single integer representing the length of the shortest cycle in the graph. If there is no cycle, print `-1`. -----Examples----- Input 5 5 1 2 2 3 3 4 4 5 2 4 Output 3 Input 4 2 1 2 3 4 Output -1 Input 6 7 1 2 1 3 2 3 2 4 3 4 4 5 5 6 Output 3 -----Note----- In the first example, the cycle (2-3-4) is the shortest cycle with length 3. In the second example, there is no cycle, so the output is `-1`. In the third example, there are several cycles, but the shortest cycle (1-2-3) has length 3.","solution":"from collections import deque, defaultdict def shortest_cycle_length(n, m, edges): def bfs(start): distance = [-1] * (n + 1) queue = deque([(start, -1)]) distance[start] = 0 min_cycle_length = float(\'inf\') while queue: node, parent = queue.popleft() for neighbor in graph[node]: if distance[neighbor] == -1: distance[neighbor] = distance[node] + 1 queue.append((neighbor, node)) elif neighbor != parent: min_cycle_length = min(min_cycle_length, distance[node] + distance[neighbor] + 1) return min_cycle_length graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) shortest_cycle = float(\'inf\') for i in range(1, n + 1): shortest_cycle = min(shortest_cycle, bfs(i)) if shortest_cycle == float(\'inf\'): return -1 else: return shortest_cycle"},{"question":"Create a function `merge_integers` that will merge two sorted generators of integers into a single generator that produces a sorted sequence of these integers. Example Input: `gen1` producing: 1, 3, 5 `gen2` producing: 2, 4, 6 Expected Output: 1, 2, 3, 4, 5, 6 * The arguments for your function will be two generators that will each return a new integer for each call of next() * Your function will return its own generator that produces the merged, sorted integers * Both input generators are guaranteed to be sorted in ascending order * An empty generator should be handled correctly and should not disrupt the merging process * Duplicates should be retained in the output * The values produced by the generators are assumed to be non-negative integers","solution":"def merge_integers(gen1, gen2): Merges two sorted generators of integers into a single sorted generator. v1 = next(gen1, None) v2 = next(gen2, None) while v1 is not None or v2 is not None: if v1 is None: yield v2 v2 = next(gen2, None) elif v2 is None: yield v1 v1 = next(gen1, None) elif v1 <= v2: yield v1 v1 = next(gen1, None) else: yield v2 v2 = next(gen2, None)"},{"question":"Given a list of integers, return the cumulative sum of the elements at each index. Example: ```python cumulative_sum([1, 2, 3, 4]) # => [1, 3, 6, 10] cumulative_sum([4, 3, 2, 1]) # => [4, 7, 9, 10] ``` Note: The cumulative sum at index `i` is the sum of all elements from index `0` to `i` inclusive.","solution":"def cumulative_sum(numbers): Given a list of integers, return the cumulative sum of the elements at each index. Parameters: numbers (list): A list of integers. Returns: list: A list containing the cumulative sum at each index. result = [] total = 0 for number in numbers: total += number result.append(total) return result"},{"question":"Write a program that reads multiple lines of input, each containing a list of integers separated by spaces, until an empty line is encountered. For each line of input, compute two values: - The sum of all the negative numbers, S. - The maximum difference between any two numbers in the list, D. -----Input:----- - Multiple lines of integers separated by spaces, terminated by an empty line. -----Output:----- For each line, output two values S and D separated by a space. If there are no negative numbers in the line, S should be 0. If the line contains fewer than two numbers, D should be 0. -----Constraints----- - Each line will contain at most 1000 integers. - Each integer will be between -1000 and 1000, inclusive. -----Sample Input:----- 3 4 -1 -5 12 7 -3 -4 5 8 -----Sample Output:----- -6 17 -7 12 -----EXPLANATION:----- For the first line \\"3 4 -1 -5 12\\": - The sum of negative numbers S is -1 + (-5) = -6. - The maximum difference D is between -5 and 12 which is 12 - (-5) = 17. For the second line \\"7 -3 -4 5 8\\": - The sum of negative numbers S is -3 + (-4) = -7. - The maximum difference D is between -4 and 8 which is 8 - (-4) = 12.","solution":"def compute_values(lines): results = [] for line in lines: if line.strip() == \\"\\": break numbers = list(map(int, line.split())) S = sum(n for n in numbers if n < 0) D = max(numbers) - min(numbers) if len(numbers) > 1 else 0 results.append(f\\"{S} {D}\\") return results"},{"question":"Given a list of integers representing heights of students standing in a line, you are asked to determine if you can rearrange them in a strictly increasing order by only swapping two adjacent students at a time according to the following rule: - You can swap students at positions i and i+1 if the student at position i is taller than the student at position i+1. If it is possible to rearrange them in strictly increasing order using this operation any number of times, print \\"Yes\\". Otherwise, print \\"No\\". -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ height_i ≤ 10^9 for all i (1 ≤ i ≤ N) -----Input----- Input is given from Standard Input in the following format: N height_1 height_2 ... height_N -----Output----- Print \\"Yes\\" if it is possible to rearrange the heights in strictly increasing order using the allowed operations, otherwise print \\"No\\". -----Sample Input----- 5 4 3 1 2 5 -----Sample Output----- Yes Explanation: We can rearrange the heights as follows: - Swap heights at positions 3 and 4: [4, 3, 2, 1, 5] - Swap heights at positions 2 and 3: [4, 2, 3, 1, 5] - Swap heights at positions 1 and 2: [2, 4, 3, 1, 5] - Swap heights at positions 2 and 3: [2, 3, 4, 1, 5] - Swap heights at positions 3 and 4: [2, 3, 1, 4, 5] - Swap heights at positions 2 and 3: [2, 1, 3, 4, 5] - Swap heights at positions 1 and 2: [1, 2, 3, 4, 5]","solution":"def can_rearrange_increasingly(heights): This function determines if it\'s possible to rearrange the heights in strictly increasing order using the allowed operation. :param heights: List of integers representing heights :return: \\"Yes\\" if it is possible, otherwise \\"No\\" n = len(heights) # Perform bubble sort with adjacent swaps allowed for i in range(n): swapped = False for j in range(n - 1): if heights[j] > heights[j + 1]: # Swap adjacent elements to sort heights[j], heights[j + 1] = heights[j + 1], heights[j] swapped = True # If no elements were swapped, the list is already sorted if not swapped: break # Check if the list is sorted in strictly increasing order for i in range(n - 1): if heights[i] >= heights[i + 1]: return \\"No\\" return \\"Yes\\""},{"question":"Maria recently started a new hobby of planting flowers in her garden. She has a rectangular plot which is divided into a grid, with each cell in the grid either having a plant (\\"P\\") or being empty (\\".\\"). Maria wants to check if there are any adjacent plants in the garden. Two plants are considered adjacent if they are next to each other horizontally or vertically (not diagonally). Write a program to determine if there are any adjacent plants in the grid. ---- Input ---- - The first line contains two integers m and n which represent the number of rows and columns in the grid respectively. - The next m lines each contain a string of length n consisting of characters \\"P\\" (representing a plant) and \\".\\" (representing an empty cell). ---- Output ---- - Output \\"Yes\\" if there are any adjacent plants in the grid. Otherwise, output \\"No\\". ---- Constraints ---- - 1 leq m, n leq 100 ---- Sample Input ---- 3 4 P..P ..P. P... ---- Sample Output ---- Yes ---- EXPLANATION ---- In the input grid: P..P ..P. P... The plants in cells (1, 4) and (2, 3) are adjacent. Another example: Sample Input 2 2 P. .P Sample Output No","solution":"def has_adjacent_plants(m, n, grid): Return \\"Yes\\" if there are any adjacent plants in the grid, otherwise return \\"No\\". for i in range(m): for j in range(n): if grid[i][j] == \'P\': # Check Right if j + 1 < n and grid[i][j + 1] == \'P\': return \\"Yes\\" # Check Down if i + 1 < m and grid[i + 1][j] == \'P\': return \\"Yes\\" return \\"No\\""},{"question":"Write a function that takes a list of integers and returns a list of lists, where each sublist contains integers that are permutations of each other. For instance, given the list: `[123, 231, 312, 456, 564, 645, 789, 897]`, the output should be `[[123, 231, 312], [456, 564, 645], [789, 897]]`. **Constraints:** - The list can contain numbers with varying digits, but all possible permutations of each number will be of the same length. - Each number in the input list will be a non-negative integer. - The order of the sublists and the order of elements within each sublist does not matter. Your task is to implement the function `group_anagrams(nums: List[int]) -> List[List[int]]` which solves this problem.","solution":"from collections import defaultdict from typing import List def group_anagrams(nums: List[int]) -> List[List[int]]: Groups integers that are permutations of each other. :param nums: List of integers. :return: List of lists, where each sublist contains integers that are permutations of each other. anagram_groups = defaultdict(list) for num in nums: key = tuple(sorted(str(num))) anagram_groups[key].append(num) return list(anagram_groups.values())"},{"question":"Help Captain Marvel by summing her powers in an efficient algorithm. Captain Marvel has a list of powers that she uses while fighting the villains in different battles. She frequently checks the sum of her powers over a given range of indices to strategize her next move. You are to write a function that, given her list of powers and multiple queries, returns the sum of powers for each specified range. Implement the following function: ```python def range_pow_sum(powers: List[int], queries: List[Tuple[int, int]]) -> List[int]: ``` # Input: - `powers` - A list of integers where the i-th element represents Captain Marvel\'s power in the i-th battle (1 ≤ len(powers) ≤ 10^5, 1 ≤ powers[i] ≤ 10^9). - `queries` - A list of tuples where each tuple contains two integers (l, r) representing the start and end battle indices (1 ≤ l ≤ r ≤ len(powers), 1 ≤ len(queries) ≤ 10^5). Indices are 1-based. # Output: - Return a list of integers where the i-th element is the sum of powers from the l-th to r-th battle for the i-th query. # Examples: ```python powers = [3, 2, 5, 10, 7] queries = [(1, 3), (2, 5), (4, 4), (1, 5)] # Result: [10, 24, 10, 27] print(range_pow_sum(powers, queries)) ``` In the first query, the sum of powers from the 1st to 3rd battle is `3 + 2 + 5 = 10`. In the second query, the sum of powers from the 2nd to 5th battle is `2 + 5 + 10 + 7 = 24`. In the third query, the sum of powers at the 4th battle is `10`. In the fourth query, the sum of powers from the 1st to 5th battle is `3 + 2 + 5 + 10 + 7 = 27`. # Note: Your solution should be efficient enough to handle the upper limits of the input constraints.","solution":"from typing import List, Tuple def range_pow_sum(powers: List[int], queries: List[Tuple[int, int]]) -> List[int]: # Compute a prefix sum array n = len(powers) prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + powers[i - 1] result = [] for l, r in queries: # Adjust for 1-based index sum_power = prefix_sums[r] - prefix_sums[l - 1] result.append(sum_power) return result"},{"question":"Maria is an avid reader. She likes keeping track of the books she has read and rating them on a scale from 1 to 5. To better analyze her reading patterns, she wants to find out the average rating for each genre in her list of books. Your challenge: Write a function `averageRatingByGenre()` with the arguments: - `books`: a list of dictionaries, where each dictionary represents a book. Each dictionary contains the keys: - `\\"title\\"`: a string representing the title of the book - `\\"genre\\"`: a string representing the genre of the book - `\\"rating\\"`: an integer from 1 to 5 representing Maria\'s rating of the book The function `averageRatingByGenre()` should return a dictionary where the keys are genres and the values are the average ratings of books in that genre. If there are no books of a particular genre, that genre should not be included in the output dictionary. For example: ```python books = [ {\\"title\\": \\"Book A\\", \\"genre\\": \\"Fantasy\\", \\"rating\\": 4}, {\\"title\\": \\"Book B\\", \\"genre\\": \\"Science Fiction\\", \\"rating\\": 5}, {\\"title\\": \\"Book C\\", \\"genre\\": \\"Fantasy\\", \\"rating\\": 3}, {\\"title\\": \\"Book D\\", \\"genre\\": \\"Science Fiction\\", \\"rating\\": 2}, {\\"title\\": \\"Book E\\", \\"genre\\": \\"Mystery\\", \\"rating\\": 4} ] averageRatingByGenre(books) # should return: # { # \\"Fantasy\\": 3.5, # \\"Science Fiction\\": 3.5, # \\"Mystery\\": 4.0 # } books = [] averageRatingByGenre(books) # should return: # {} ```","solution":"def averageRatingByGenre(books): Computes the average rating for each genre in the list of books. :param books: List of dictionaries, each representing a book with keys \\"title\\", \\"genre\\", and \\"rating\\". :return: Dictionary where keys are genres and values are average ratings. genre_totals = {} genre_counts = {} for book in books: genre = book[\\"genre\\"] rating = book[\\"rating\\"] if genre not in genre_totals: genre_totals[genre] = 0 genre_counts[genre] = 0 genre_totals[genre] += rating genre_counts[genre] += 1 average_ratings = {genre: genre_totals[genre] / genre_counts[genre] for genre in genre_totals} return average_ratings"},{"question":"In a city known for its intricate network of roads, you are given a list of roads that connect various intersections. Each road has a travel time associated with it. The city authorities are planning to install a security camera on each road. Installing and maintaining security cameras costs money. Given an integer `n` representing the number of intersections (numbered from 1 to `n`) and an array `roads` where each element is a tuple representing `(intersection1, intersection2, travel_time)`, return the minimum cost required to monitor all the roads in the city. The installation cost of a security camera on each road is equal to the travel time of that road. Example 1: Input: n = 4, roads = [(1, 2, 5), (1, 3, 10), (2, 3, 2), (2, 4, 7), (3, 4, 1)] Output: 13 Explanation: We can select the roads with the following travel times: (1, 2, 5), (2, 3, 2), and (3, 4, 1). The total cost is 5 + 2 + 1 = 8. However, to cover all intersections with minimum cost, we include the road with travel time 7, making the total cost 5 + 2 + 1 + 7 = 13. Example 2: Input: n = 3, roads = [(1, 2, 4), (1, 3, 6), (2, 3, 1)] Output: 5 Explanation: The selected roads are (1, 2, 4) and (2, 3, 1). The total cost is 4 + 1 = 5. Note: - 2 <= n <= 1000 - 1 <= len(roads) <= 2000 - 1 <= travel_time <= 100 - Every pair of intersections are connected by at most one road. Hints: - Think about graph algorithms that allow you to find a minimum spanning tree (MST). - Consider using Kruskal\'s or Prim\'s algorithm to solve for MST and derive the minimum cost.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_cost_to_install_cameras(n, roads): Function to return the minimum cost required to monitor all the roads in the city. The cost is based on the travel time of each road. # Sort roads based on the travel_time roads.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n + 1): parent.append(node) rank.append(0) result = 0 # Store the total minimum cost e = 0 # Count number of edges in MST i = 0 # Initial index of sorted edges # Number of edges in MST will be equal to n-1 while e < n - 1: if i >= len(roads): break (u, v, w) = roads[i] i = i + 1 x = find(parent, u) y = find(parent, v) # If they are in different sets, include this edge in the result if x != y: e = e + 1 result = result + w union(parent, rank, x, y) return result"},{"question":"Given a list of integers, your task is to implement a function that partitions the list into two subsets such that the difference between the sums of the subsets is minimized. Your function should return a list of two integers representing the sums of the two subsets. For example, consider the list `[1, 6, 11, 5]`. The subsets `[6, 5]` and `[1, 11]` have sums `11` and `12`, respectively. The difference between these sums is `1`, which is the minimum difference possible for this list. Implement the function with the following signature: ```python def min_partition_difference(nums: List[int]) -> List[int]: # Your code here ``` You may assume that the input list contains a maximum of 100 integers, each in the range `[1, 1000]`.","solution":"from typing import List def min_partition_difference(nums: List[int]) -> List[int]: total_sum = sum(nums) n = len(nums) # DP Table to store boolean values dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] # Initialization of DP table for i in range(n + 1): dp[i][0] = True # Fill the DP table for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if nums[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]] else: dp[i][j] = dp[i - 1][j] # Finding the maximum value that can be achieved close to total_sum / 2 for j in range(total_sum // 2, -1, -1): if dp[n][j] == True: sum1 = j break sum2 = total_sum - sum1 return [sum1, sum2]"},{"question":"Implement a function that takes a list of **unique integers** and returns all possible subsets (the power set). The solution must not include duplicate subsets and should be sorted in non-descending order. # Function Signature ```python def find_subsets(nums: List[int]) -> List[List[int]]: pass ``` # Constraints: 1. All integers in the input list are unique. 2. All subsets within the power set must be sorted in non-descending order. 3. The solution should handle an empty input list. # Examples: ```python >>> find_subsets([1, 2, 3]) [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]] >>> find_subsets([4, 1]) [[], [1], [1, 4], [4]] >>> find_subsets([]) [[]] >>> find_subsets([1]) [[], [1]] >>> find_subsets([5, 3, 9]) [[], [3], [3, 5], [3, 5, 9], [3, 9], [5], [5, 9], [9]] ```","solution":"from typing import List def find_subsets(nums: List[int]) -> List[List[int]]: nums.sort() result = [] def backtrack(start=0, current=[]): result.append(current[:]) for i in range(start, len(nums)): current.append(nums[i]) backtrack(i + 1, current) current.pop() backtrack() return result"},{"question":"Given an array of integers, determine if there is a subset of these integers that sums to zero. *Parameters*: `arr` array of integers. *Example input*: ``` arr = [3, -1, -7, 2, 8] ``` *Output*: ```true``` if a subset that sums to zero exists, ```false``` if no such subset is found. # Constraints: * The array can have up to `10^4` integers. * Each integer in the array is between `-10^3` and `10^3`. # Notes: * A subset can be any number of elements from `arr`, including just one or two elements. * Return `false` if the array is empty. ___ Examples: ``` arr = [4, 3, -3, 1, 8] // return true - subset [3, -3] sums to zero ``` ``` arr = [1, 2, 3] // return false - no subset sums to zero ```","solution":"def has_subset_sum_zero(arr): Determines if there is a subset of integers in arr that sums to zero. Parameters: arr (list of int): The array of integers. Returns: bool: True if there is a subset that sums to zero, False otherwise. if not arr: return False # Use a set to store the sum of subsets sum_set = set() sum_set.add(0) for num in arr: current_sums = list(sum_set) for s in current_sums: if s + num == 0: return True sum_set.add(s + num) return False"},{"question":"-----Description----- Alice and Bob are playing a game where they take turns to pick numbers from a list and add them to their scores. Alice always starts first. Each player can pick a number only from the end of the list (either the leftmost or the rightmost number). The game ends when there are no more numbers left to pick, at which point the player with the higher score wins. Both Alice and Bob follow an optimal strategy to maximize their score. Your task is to determine the final scores of both players and declare the winner. -----Input----- The input consists of multiple test cases. Each test case starts with an integer N, the number of elements in the list. The next line contains N integers separated by spaces, representing the list of numbers. The list will have at most 100 elements, and each element will be a positive integer not exceeding 1000. The input ends with a test case where N is 0. -----Output----- For each test case, print exactly one line containing three integers separated by spaces: the final score of Alice, the final score of Bob, and the winner (\\"Alice\\" or \\"Bob\\"). -----Sample Input----- 2 4 5 4 1 2 3 4 0 -----Sample Output----- 5 4 Alice 6 4 Alice","solution":"def alice_bob_game(arr): alice_score, bob_score = 0, 0 turn = True left = 0 right = len(arr) - 1 while left <= right: if arr[left] > arr[right]: chosen = arr[left] left += 1 else: chosen = arr[right] right -= 1 if turn: # Alice\'s turn alice_score += chosen else: # Bob\'s turn bob_score += chosen turn = not turn winner = \\"Alice\\" if alice_score > bob_score else \\"Bob\\" return alice_score, bob_score, winner def process_input(input_str): input_lines = input_str.strip().split(\\"n\\") test_cases = [] i = 0 while i < len(input_lines): N = int(input_lines[i]) if N == 0: break array = list(map(int, input_lines[i + 1].strip().split())) test_cases.append(array) i += 2 return test_cases def main(input_str): test_cases = process_input(input_str) results = [] for arr in test_cases: alice_score, bob_score, winner = alice_bob_game(arr) results.append(f\\"{alice_score} {bob_score} {winner}\\") return \\"n\\".join(results) # Example usage: input_str = \\"2n4 5n4n1 2 3 4n0\\" output_str = main(input_str) print(output_str)"},{"question":"You have been tasked with writing a function to ensure that a text input is a valid email address. The function will take a string and return a boolean indicating whether the string conforms to the following rules: 1. It must contain exactly one \\"@\\"; 2. It must contain at least one \\".\\" 3. The \\".\\" must be after the \\"@\\" and not immediately adjacent to it; 4. Neither the local part (the part before the \\"@\\") nor the domain part (the part after the \\"@\\") can be empty. Your task is to implement the function `is_valid_email` that performs the above validation. Notes: * Do not use any external libraries for the email validation. * Assume the input will always be a string, and you do not need to handle other data types. Examples ``` is_valid_email(\\"example@example.com\\") ==> True is_valid_email(\\"invalid-email.com\\") ==> False is_valid_email(\\"invalid-email@com@\\") ==> False is_valid_email(\\"@example.com\\") ==> False is_valid_email(\\"example@com.\\") ==> False is_valid_email(\\"example@.com\\") ==> False is_valid_email(\\"example@sub.example.com\\") ==> True ```","solution":"def is_valid_email(email): Returns True if the input string is a valid email address according to the specified rules, otherwise False. if \\"@\\" not in email or email.count(\\"@\\") != 1: return False local_part, domain_part = email.split(\\"@\\") if not local_part or not domain_part: return False if \\".\\" not in domain_part or \\"..\\" in email or domain_part.startswith(\\".\\"): return False if domain_part.find(\'.\') == len(domain_part) - 1: return False return True"},{"question":"# Introduction In software development, string manipulation is a frequent task, and efficiency in handling such operations is crucial. This question explores one of the fundamental string operations: finding the longest substring without repeating characters. # Task Write a function `length_of_longest_substring` that receives a string `s` and returns an integer representing the length of the longest substring without repeating characters. Input - A single string `s`, where 0 ≤ length of `s` ≤ 10^6, and `s` consists of English letters, digits, symbols, and spaces. Output - An integer representing the length of the longest substring of `s` that does not contain any repeating characters. Example ```python assert length_of_longest_substring(\\"abcabcbb\\") == 3 assert length_of_longest_substring(\\"bbbbb\\") == 1 assert length_of_longest_substring(\\"pwwkew\\") == 3 assert length_of_longest_substring(\\"\\") == 0 ``` Constraints - You are required to implement this function in O(n) time complexity, where n is the length of the input string.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index = {} max_length = 0 start = 0 # Start index of current window for end in range(n): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Ailyn is an avid reader who loves borrowing books from her city\'s library. The library allows borrowing multiple books at the same time, but there is a catch. Each book has a specific day on which it must be returned. Ailyn, being very organized, always returns her books on the assigned return day. Whenever she borrows books, she wants to read them in such an order that she completes every book just before the day it is due to be returned. Given that Ailyn reads exactly one book per day, can you help her determine the order in which she should read the books? -----Input:----- - The first line contains a single integer T, the number of test cases. - The first line of each test case contains an integer N, the number of books. - The next line contains N integers, where the ith integer represents the return day for the ith book. -----Output:----- - For each test case, output a single line containing N integers, representing the order in which Ailyn should read the books. The order is defined by the indices of the books (1-based). -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 105 - 1 leq I_i leq 365 -----Sample Input:----- 1 5 10 3 7 5 15 -----Sample Output:----- 2 4 3 1 5 -----EXPLANATION:----- In the example, there are 5 books with return days 10, 3, 7, 5, and 15. To ensure Ailyn completes each book just before its return day, we sort the books by their return days and output their original indices: - Book 2: Return day 3 - Book 4: Return day 5 - Book 3: Return day 7 - Book 1: Return day 10 - Book 5: Return day 15 The reading order should be: 2, 4, 3, 1, 5.","solution":"def reading_order(test_cases): result = [] for case in test_cases: N, return_days = case indexed_books = list(enumerate(return_days, start=1)) indexed_books.sort(key=lambda x: x[1]) result.append([idx for idx, _ in indexed_books]) return result def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) return_days = list(map(int, input_lines[index + 1].split())) test_cases.append((N, return_days)) index += 2 return test_cases def format_output(result): return \'n\'.join(\' \'.join(map(str, order)) for order in result)"},{"question":"Given a positive integer n, return the minimum number of distinct powers of 2 whose sum is equal to n. The powers of 2 are defined as: 2^0 = 1 2^1 = 2 2^2 = 4 2^3 = 8 ... It is guaranteed that for the given constraints we can always find such powers of 2 that sum up to n. Example 1: Input: n = 7 Output: 3 Explanation: The powers of 2 are: 1, 2, 4, 8, 16, ... For n = 7 we can use 1 + 2 + 4 = 7. Example 2: Input: n = 10 Output: 2 Explanation: For n = 10 we can use 2 + 8 = 10. Example 3: Input: n = 22 Output: 3 Explanation: For n = 22 we can use 2 + 4 + 16 = 22. Constraints: 1 <= n <= 10^9","solution":"def min_powers_of_2(n): Returns the minimum number of distinct powers of 2 whose sum is equal to n. count = 0 while n > 0: highest_power_of_2 = 1 << (n.bit_length() - 1) n -= highest_power_of_2 count += 1 return count"},{"question":"You are organizing a basketball tournament and need to keep track of the total points scored by each team in a game. You will be given two arrays representing the points scored by each team in different quarters. Each array contains four positive integers, and the sum of these integers represents the total points scored by that team. Write a function to determine which team won the game. The function should take two arrays as input and return: - 1 if the first team won, - 2 if the second team won, or - 0 if the game ended in a draw. Example 1: Input: {25, 18, 20, 22}, {20, 22, 21, 21} Output: 1 Example 2: Input: {15, 16, 18, 20}, {21, 19, 22, 17} Output: 2 Example 3: Input: {23, 19, 22, 21}, {21, 22, 23, 19} Output: 0 Note: - You can expect the input arrays to always contain four positive integers. - The function should handle cases where the total points are equal correctly and return 0 for a draw.","solution":"def determine_winner(team1_points, team2_points): Given two arrays representing the points scored by each team in different quarters, determine which team won the game. Args: team1_points (list): A list of four positive integers representing points scored by the first team. team2_points (list): A list of four positive integers representing points scored by the second team. Returns: int: 1 if the first team won, 2 if the second team won, or 0 if the game ended in a draw. total_team1 = sum(team1_points) total_team2 = sum(team2_points) if total_team1 > total_team2: return 1 elif total_team2 > total_team1: return 2 else: return 0"},{"question":"You are given an array of integers `arr`, and an integer `num`. You need to find all the unique quadruplets (four elements) in `arr` whose sum equals to `num`. Return the list of all such unique quadruplets. The quadruplets themselves should be sorted in ascending order, and the list of quadruplets should not contain any duplicates. Example 1: Input: arr = [1, 0, -1, 0, -2, 2], num = 0 Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] Example 2: Input: arr = [2, 2, 2, 2, 2], num = 8 Output: [[2, 2, 2, 2]] Note: - The array of integers `arr` will have at least four elements and at most 200 elements. - The value of each element in `arr` will be between -10^9 and 10^9 inclusive.","solution":"def four_sum(arr, num): Finds all unique quadruplets in the list `arr` that sum up to `num`. arr.sort() quadruplets = set() for i in range(len(arr) - 3): for j in range(i + 1, len(arr) - 2): left, right = j + 1, len(arr) - 1 while left < right: total = arr[i] + arr[j] + arr[left] + arr[right] if total == num: quadruplets.add((arr[i], arr[j], arr[left], arr[right])) left += 1 right -= 1 elif total < num: left += 1 else: right -= 1 return [list(quad) for quad in sorted(quadruplets)]"},{"question":"In this problem, you are given a string consisting of lowercase letters and spaces. Your task is to find all the words that end with the letter \'e\'. The words in the resulting list should be unique and sorted in alphabetical order. -----Input:----- A single line containing a string S of length 1 leq |S| leq 1000, which consists of lowercase letters and spaces. -----Output:----- A single line containing the unique words that end with \'e\', separated by a single space, in alphabetical order. -----Constraints:----- - The input string will not have leading or trailing spaces. - The words in the string are separated by a single space. -----Sample input----- the quick brown fox jumps over the lazy dog before time -----Sample output----- before time","solution":"def find_words_ending_with_e(s): Finds all unique words ending with \'e\' and returns them sorted in alphabetical order. :param s: A string consisting of lowercase letters and spaces. :return: A string with unique words ending with \'e\', sorted alphabetically. words = s.split() e_words = {word for word in words if word.endswith(\'e\')} sorted_e_words = sorted(e_words) return \' \'.join(sorted_e_words)"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is replaced by the product of all the integers in the original list except the integer at that position. For example, given the list `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]`. Your function should handle edge cases such as lists containing zeros and lists of different lengths. Examples ``` Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [0, 1, 2, 3] Output: [6, 0, 0, 0] Input: [7, 3, 5] Output: [15, 35, 21] Input: [2, 2, 2] Output: [4, 4, 4] ``` Constraints - You must solve the problem without using division. - Try to solve it using O(n) time complexity.","solution":"def product_except_self(nums): Given a list of integers `nums`, return a list such that each element at index `i` is the product of all the numbers in the original array except `nums[i]`. Args: nums: List of integers Returns: List of integers if not nums: return [] n = len(nums) output = [1] * n # Calculate left product for each element left_product = 1 for i in range(n): output[i] = left_product left_product *= nums[i] # Calculate right product for each element and multiply with left product right_product = 1 for i in range(n - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"Given a string `s`, write a function to check if it can be rearranged into a palindrome. If it can, return `True`, otherwise return `False`. A string is considered a palindrome if it reads the same backward as forward. # Examples: ``` canBePalindrome(\\"carrace\\") -> True canBePalindrome(\\"hello\\") -> False canBePalindrome(\\"aabbcc\\") -> True canBePalindrome(\\"abcde\\") -> False ```","solution":"def canBePalindrome(s): Checks if the given string can be rearranged into a palindrome. from collections import Counter count = Counter(s) # We can have at most one odd character for the string to be a palindrome odd_count = sum(1 for char, freq in count.items() if freq % 2 != 0) return odd_count <= 1"},{"question":"Write a function that rotates a square matrix 90 degrees clockwise. The matrix will be represented by a two-dimensional array where the input will be an array of rows, and each row is an array of numbers. You can assume the input matrix will always be square (i.e., the number of rows is equal to the number of columns). For example, rotating the matrix: | 1 2 3 | | 4 5 6 | | 7 8 9 | 90 degrees clockwise results in: | 7 4 1 | | 8 5 2 | | 9 6 3 |","solution":"def rotate_matrix_90_clockwise(matrix): Rotates a square matrix 90 degrees clockwise. n = len(matrix) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): result[j][n - 1 - i] = matrix[i][j] return result"},{"question":"# Zero Sum Subarray A zero sum subarray is a subarray whose elements sum to zero. Given an array of integers, your task is to write a function that finds a zero sum subarray if it exists, and returns the indices of the first and the last element of this subarray. If no such subarray is found, return `None`. Your Function Implement a function `find_zero_sum_subarray` that takes a list of integers `arr` and returns a tuple `(start_index, end_index)` representing the indices of the zero sum subarray, or `None` if no such subarray exists. Input - `arr` (list): List of integers, where 1 <= len(arr) <= 10^5 and -10^9 <= arr[i] <= 10^9. Output - If a zero sum subarray is found, return a tuple `(start_index, end_index)`. - If no such subarray is found, return `None`. Examples ```python find_zero_sum_subarray([1, 2, -3, 4, 5]) # -> (0, 2) find_zero_sum_subarray([1, 2, 3, 4, 5]) # -> None find_zero_sum_subarray([1, -1, 3, -3, 4, -4]) # -> (0, 1) find_zero_sum_subarray([0, 1, 2, -2, -1]) # -> (3, 4) ``` Note For the first example, the sum of the elements from index 0 to 2 is `(1 + 2 + (-3))`, which equals zero. In the second example, there is no subarray that sums to zero, hence the result is `None`. In the third example, subarray from index 0 to 1 `(1 + (-1))` equals zero. For the fourth example, subarray from index 3 to 4 `(-2 + (-1))` equals zero.","solution":"def find_zero_sum_subarray(arr): Finds a zero sum subarray and returns the indices of the first and last elements. If no such subarray is found, returns None. prefix_sum = 0 sum_indices = {} for i in range(len(arr)): prefix_sum += arr[i] if prefix_sum == 0: return (0, i) if prefix_sum in sum_indices: return (sum_indices[prefix_sum] + 1, i) sum_indices[prefix_sum] = i return None"},{"question":"Write a function that takes an integer `n` as input and returns a list of the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: - The first two numbers are 0 and 1. - Each subsequent number is the sum of the previous two numbers. For example, if `n` is 5, the function should return `[0, 1, 1, 2, 3]`. If `n` is 10, the function should return `[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]`. Your function should handle cases where `n` is 0 (return an empty list) or 1 (return a list with only the first Fibonacci number).","solution":"def fibonacci_sequence(n): Returns a list of the first n numbers in the Fibonacci sequence. if n == 0: return [] elif n == 1: return [0] fib_sequence = [0, 1] while len(fib_sequence) < n: next_fib = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_fib) return fib_sequence"},{"question":"# Task Consider an array of integers where every element appears twice except for one. Find the element that appears only once. Your algorithm should have a linear runtime complexity. You must implement a function that solves the following problem: **Function Signature:** ```python def find_unique_element(arr: list) -> int: ``` **Input:** - `arr` (list of integers): An array of integers where each integer appears exactly twice, except for one integer which appears only once. The length of the array is always an odd number. **Output:** - Return the integer that appears only once. **Example:** For `arr = [2, 3, 2, 4, 4]`, the output should be `3`. For `arr = [1, 1, 2, 3, 2, 5, 5]`, the output should be `3`. **Constraints:** - The length of the array will be in the range [1, 10^5]. - The array will have exactly one integer that appears only once. - The elements are not sorted. Implement the function and ensure it has O(n) time complexity.","solution":"def find_unique_element(arr): Finds the unique element in the array where every other element appears twice. Args: arr (list): A list of integers where exactly one element appears once and all others appear twice. Returns: int: The element that appears only once. unique = 0 for num in arr: unique ^= num return unique"},{"question":"Given a list of n non-negative integers representing the amount of water trapped in each unit-width block after a rainfall, compute how much water it could trap after raining. Example 1: Input: heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The units are as follows: # # # # # # # # # # # # # # # The top and bottom surfaces are level, with no water trapped in the lowest point of heights[2]. The remaining heights trap the following amounts of water: heights[1] - 0 heights[5] - 3 heights[6] - 1 heights[10] - 2 Example 2: Input: heights = [4, 2, 0, 3, 2, 5] Output: 9 Constraints: 1 <= n <= 2 * 104 0 <= heights[i] <= 105","solution":"def trap(height): if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Write a function that receives a list of integers and returns a dictionary where the keys are the even numbers from the list and the values are the squares of these even numbers. Examples: ```python input: [1, 2, 3, 4, 5] output: {2: 4, 4: 16} input: [10, 22, 35, 47, 50] output: {10: 100, 22: 484, 50: 2500} input: [7, 11, 13, 19] output: {} ```","solution":"def even_squares(lst): Returns a dictionary where the keys are the even numbers from the list and the values are the squares of these even numbers. Parameters: lst (list): A list of integers. Returns: dict: A dictionary with even numbers and their squares. return {num: num**2 for num in lst if num % 2 == 0}"},{"question":"Given an array of integers nums and an integer k, return the kth largest element in the array. Example 1: Input: nums = [3,2,1,5,6,4], k = 2 Output: 5 Example 2: Input: nums = [3,2,3,1,2,4,5,5,6], k = 4 Output: 4 Note: - You may assume k is always valid, 1 ≤ k ≤ length of the array. - The elements in the array are not necessarily unique. Follow up: Try to solve it in O(n log k) time and O(n) extra space.","solution":"import heapq def find_kth_largest(nums, k): Returns the kth largest element in the array nums. # Use a min heap to find the kth largest element return heapq.nlargest(k, nums)[-1]"},{"question":"Write a function that receives an array of integers and the required sum, and determines if there are two distinct elements in the array such that their sum is equal to the required sum. Your function should return `True` if such a pair exists, otherwise return `False`. You are not allowed to use the same element twice in a pair. Example 1: Input: nums = [10, 15, 3, 7], target_sum = 17 Output: True Explanation: Because 10 + 7 equals to 17. Example 2: Input: nums = [1, 2, 3, 4], target_sum = 8 Output: False Explanation: There are no two different numbers summing up to 8. Note: All numbers in the array are distinct. There could be negative numbers in the array. The array length will not exceed 10^5 and each value in the array will be in the range of -10^5 to 10^5.","solution":"def has_pair_with_sum(nums, target_sum): Determines if there are two distinct elements in nums such that their sum is equal to target_sum. :param nums: List of integers. :param target_sum: The required sum. :return: True if such a pair exists, otherwise False. seen = set() for num in nums: if target_sum - num in seen: return True seen.add(num) return False"},{"question":"Write a function that takes a string containing a sequence of space-separated integers and returns the highest product of any three distinct integers from the sequence. An example: ``` Input string: \\"1 10 2 6 5 3\\" The highest product is calculated from the sequence 10, 6, and 5: 10 * 6 * 5 = 300 Expected output: 300 ``` Additional examples: ``` Input string: \\"4 5 -1 8 -6 10\\" The highest product is calculated from the sequence 10, 8, and 5: 10 * 8 * 5 = 400 Note: The function should consider both positive and negative integers for calculating the maximum product. Input string: \\"-10 -10 5 2\\" The highest product is calculated from the sequence -10, -10, and 5: -10 * -10 * 5 = 500 Expected output: 500 ``` Constraints: - The input string will always contain at least three integers. - The input numbers will be within the range of -1,000 to 1,000.","solution":"def highest_product_of_three(nums_str): Returns the highest product of any three distinct integers from the sequence of space-separated integers. nums = list(map(int, nums_str.split())) nums.sort() # Consider the largest three numbers and the two smallest numbers with the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"You\'re tasked with developing a financial application that tracks users\' expenses over different categories. For a given month, you\'ve collected a series of expense records, each identified by an amount and a category. Your goal is to help users understand their spending habits by computing the percentage of total expenses that each category represents. Write a function to calculate the percentage of total expenses in each category rounded to 2 decimal places. -----Input----- The input consists of multiple test cases. Each test case is defined as follows: - The first line contains an integer n (1 ≤ n ≤ 10^5) representing the number of expense records. - The next n lines each contain an integer amount (1 ≤ amount ≤ 10^6) and a string category (1 ≤ |category| ≤ 30). The sum of n over all test cases doesn\'t exceed 10^6. -----Output----- For each test case, output each category and the percentage of total expenses it represents, rounded to 2 decimal places. Categories should be listed in order of their input appearance. -----Example----- Input 1 5 200 Food 100 Transport 300 Food 400 Entertainment 100 Transport 2 3 150 Groceries 200 Rent 150 Groceries 3 2 500 Utilities 500 Utilities Output Food 50.00 Transport 20.00 Entertainment 30.00 Groceries 42.86 Rent 28.57 Utilities 100.00 -----Note----- In the first test case, the total expense is 1100. Food contributes 500 out of 1100, so its percentage is (500/1100)*100 = 45.45%. Transport contributes 200 out of 1100, so its percentage is (200/1100)*100 = 18.18%. Entertainment contributes 400 out of 1100, so its percentage is (400/1100)*100= 36.36%. These are rounded to two decimal places. In the second test case, the total expense is 500. Groceries contributes 300 out of 500, so its percentage is (300/500)*100 = 60.00%. Rent contributes 200 out of 500, so its percentage is (200/500)*100 = 40.00%. In the third test case, the total expense is 1000. Utilities contribute 1000 out of 1000, so its percentage is (1000/1000)*100 = 100.00%.","solution":"def calculate_expense_percentages(test_cases): results = [] for case in test_cases: n = case[\'n\'] expenses = case[\'expenses\'] category_totals = {} total_expense = 0 for amount, category in expenses: if category not in category_totals: category_totals[category] = 0 category_totals[category] += amount total_expense += amount for category in category_totals: percentage = (category_totals[category] / total_expense) * 100 results.append((category, round(percentage, 2))) return results"},{"question":"Remove Duplicate Characters Overview Given a string, write a function to remove all the duplicate characters while maintaining the order of their first occurrence. Task Define a function `removeDuplicates` that takes a string and returns another string without any duplicate characters. Your function should maintain the order of the original characters, but any subsequent duplicate characters should be removed. # Example ```python Input: \\"programming\\" Output: \\"progamin\\" Input: \\"abacabad\\" Output: \\"abcdn\\" Input: \\"python\\" Output: \\"python\\" ``` # Constraints - The input string is non-empty. - The input string consists of lower case English letters only.","solution":"def removeDuplicates(s): Given a string, return another string without any duplicate characters while maintaining the order of their first occurrence. Parameters: s (str): input string Returns: str: string without duplicate characters seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Task: You need to write a function **prime_triangle** that generates a pattern of prime numbers up to `n` rows. * If the argument is 0 or a negative integer then it should return \\"\\" i.e. an empty string. * The function should print prime numbers row-wise, one per row, for the first `n` rows where `n` is the input. Examples: prime_triangle(6): 2 3 5 7 11 13 prime_triangle(3): 2 3 5 ```Note: There are no spaces in the pattern.``` ```Hint: Implement a helper function to check for prime numbers.```","solution":"def is_prime(num): Returns True if num is a prime number, else False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def prime_triangle(n): Returns a pattern of prime numbers up to `n` rows. if n <= 0: return \\"\\" prime_numbers = [] num = 2 while len(prime_numbers) < n: if is_prime(num): prime_numbers.append(str(num)) num += 1 return \\"n\\".join(prime_numbers)"},{"question":"# Task Given a list of integers, return a new list which contains the original integers that appear at least twice in the input list but each integer should appear only once in the result. The order of integers in the returned list should be the same as their first occurrence in the input list. # Example For `list = [1, 3, 2, 1, 4, 3, 5, 3]`, the result should be `[1, 3]`. For `list = [1, 2, 3, 4, 5]`, the result should be `[]` since there are no integers that appear at least twice. # Input/Output - `[input]` list of integers `data_list` The list of integers, `1 ≤ len(data_list) ≤ 10^5`, `-10^9 ≤ data_list[i] ≤ 10^9` - `[output]` a list of integers","solution":"def find_duplicates(data_list): This function takes a list of integers and returns a new list containing the integers that appear at least twice in the input list, with each integer appearing only once in the result. The order of integers in the returned list is the same as their first occurrence in the input list. seen = set() duplicates = set() result = [] for num in data_list: if num in seen: duplicates.add(num) else: seen.add(num) for num in data_list: if num in duplicates: if num not in result: result.append(num) return result"},{"question":"Write a function `find_route(map, start, end)` that finds the shortest path between two nodes in a given map. The map is represented as an adjacency list, and the nodes will be represented as strings. The path should be returned as a list of nodes showing the path from start to end. If no path exists, the function should return an empty list. Input: - `map` is a dictionary where keys are node names (strings) and values are lists of neighboring node names (strings). - `start` is the starting node name (string). - `end` is the ending node name (string). Output: - A list of nodes (strings) representing the shortest path from start to end. If no path exists, return an empty list. Your task is to implement the function `find_route`. Example: ```python map = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } print(find_route(map, \'A\', \'F\')) # Expected output: # [\'A\', \'C\', \'F\'] ```","solution":"from collections import deque def find_route(map, start, end): Finds the shortest path between two nodes in a given map. if start == end: return [start] queue = deque([(start, [start])]) visited = set() visited.add(start) while queue: current_node, path = queue.popleft() for neighbor in map.get(current_node, []): if neighbor in visited: continue if neighbor == end: return path + [neighbor] visited.add(neighbor) queue.append((neighbor, path + [neighbor])) return []"},{"question":"Dr. Codewell is designing a new video game in which players navigate a 2D grid. Each cell in the grid either contains an obstacle or is passable. The player must start at the top-left cell of the grid and reach the bottom-right cell. Moving only one step right or down is allowed and the player cannot move into or through cells that contain obstacles. Your task is to help Dr. Codewell determine if there is a path from the start cell to the end cell. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers R and C, the number of rows and columns in the grid. - The next R lines each contain C characters, either \'.\' (representing a passable cell) or \'#\' (representing an obstacle). -----Output:----- For each test case, output in a single line \\"YES\\" if there is a path from the top-left cell to the bottom-right cell, or \\"NO\\" if there is no such path. -----Constraints----- - 1 leq T leq 100 - 1 leq R, C leq 100 -----Sample Input:----- 2 3 3 ... .#. ... 3 3 ..# .#. .#. -----Sample Output:----- YES NO","solution":"def is_path_possible(grid, R, C): def dfs(row, col, visited): if row == R - 1 and col == C - 1: return True if row < 0 or row >= R or col < 0 or col >= C or grid[row][col] == \'#\' or visited[row][col]: return False visited[row][col] = True if dfs(row + 1, col, visited) or dfs(row, col + 1, visited): return True visited[row][col] = False return False visited = [[False for _ in range(C)] for _ in range(R)] return \\"YES\\" if dfs(0, 0, visited) else \\"NO\\" def solve_all_test_cases(test_cases): results = [] for grid, R, C in test_cases: results.append(is_path_possible(grid, R, C)) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(T): R, C = map(int, lines[index].strip().split()) grid = [lines[index + 1 + i].strip() for i in range(R)] test_cases.append((grid, R, C)) index += R + 1 return test_cases def main(input_data): test_cases = parse_input(input_data) results = solve_all_test_cases(test_cases) for result in results: print(result)"},{"question":"Task: Given a list of integers, return a new list containing only the numbers that are prime. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Example: ```python filter_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) ``` should return ```python [2, 3, 5, 7] ``` ```python filter_primes([15, 23, 31, 44, 55]) ``` should return ```python [23, 31] ```","solution":"def is_prime(n): Determine if the input number is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(numbers): Returns a list of prime numbers from the given list. return [n for n in numbers if is_prime(n)]"},{"question":"Given a matrix of size m x n, where each cell is either \'0\' (empty) or \'1\' (occupied), your task is to find the largest square containing only \'1\'s and return its area. Example 1: Input: [ [\'1\', \'0\', \'1\', \'0\', \'0\'], [\'1\', \'0\', \'1\', \'1\', \'1\'], [\'1\', \'1\', \'1\', \'1\', \'1\'], [\'1\', \'0\', \'0\', \'1\', \'0\'] ] Output: 4 Explanation: The largest square containing only 1\'s has an area of 4. Note: - m and n are positive integers, and the dimensions of the matrix do not exceed 300. - The matrix contains only characters \'0\' and \'1\'.","solution":"def maximalSquare(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * (n + 1) for _ in range(m + 1)] max_side = 0 for i in range(1, m + 1): for j in range(1, n + 1): if matrix[i-1][j-1] == \'1\': dp[i][j] = min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side ** 2"},{"question":"Jiya is writing a function that receives a string `s` formed of letters from \'a\' to \'z\' and returns a string where each letter in `s` is replaced by the next letter in the alphabet. If the letter is \'z\', it should wrap around to \'a\'. Help her by writing a function that accomplishes this. -----Input----- A single string `s` (1 ≤ |s| ≤ 10^5) containing only lowercase English letters. -----Output----- A single string where each character in the input string is replaced by the next character in the alphabet. If a character is \'z\', replace it with \'a\'. -----Example----- Input abcdz Output bcdea Input xyz Output yza Input zaza Output abzb -----Note----- In the first sample, each character is replaced by the next in the alphabet: \'a\' becomes \'b\', \'b\' becomes \'c\', \'c\' becomes \'d\', \'d\' becomes \'e\', \'z\' wraps around to \'a\'. The result is \\"bcdea\\". In the second sample, \'x\' becomes \'y\', \'y\' becomes \'z\', and \'z\' wraps around to \'a\'. The resulting string is \\"yza\\". In the third sample, \'z\' wraps around to \'a\', \'a\' becomes \'b\', \'z\' wraps around to \'a\', and \'a\' becomes \'b\'. The resulting string is \\"abzb\\".","solution":"def shift_alphabet(s): Returns a string where each letter in the input string s is replaced by the next letter in the alphabet. If the letter is \'z\', it wraps around to \'a\'. result = [] for char in s: if char == \'z\': result.append(\'a\') else: result.append(chr(ord(char) + 1)) return \'\'.join(result)"},{"question":"# Introduction In computer science, the real-world application often requires finding the shortest route or path between two points in a graph. A particularly common scenario is using Dijkstra\'s algorithm to find the shortest path in a weighted graph. # Instructions You are given a graph represented as an adjacency list and two nodes, a start and an end node. Your task is to write a function that uses Dijkstra\'s algorithm to find and return the shortest path from the start node to the end node. The graph is represented as a dictionary where keys are nodes and values are lists of tuples representing edges and weights. The function should return the shortest distance and the path taken as a tuple. The function should have the following signature: ```python def dijkstra(graph: dict, start: any, end: any) -> tuple: ``` # Example Given the following graph: ```python graph = { \'A\': [(\'B\', 1), (\'C\', 4)], \'B\': [(\'A\', 1), (\'C\', 2), (\'D\', 5)], \'C\': [(\'A\', 4), (\'B\', 2), (\'D\', 1)], \'D\': [(\'B\', 5), (\'C\', 1)] } ``` Calling `dijkstra(graph, \'A\', \'D\')` should return: ```python (4, [\'A\', \'B\', \'C\', \'D\']) ``` # Constraints - The graph will not contain negative weight edges. - There will be at least one path between the start and end nodes. - The nodes can be represented as any hashable type (strings, integers, etc.).","solution":"import heapq def dijkstra(graph: dict, start: any, end: any) -> tuple: Function to find the shortest path using Dijkstra\'s algorithm. Parameters: graph (dict): A dictionary representing the graph where keys are nodes and values are lists of tuples (neighbor, weight). start (any): The starting node. end (any): The destination node. Returns: tuple: A tuple containing the shortest distance and the path taken as a list. # Priority queue to hold nodes to be explored priority_queue = [(0, start, [])] # Dictionary to store the shortest known distance to each node distances = {start: 0} # Set of visited nodes to avoid cycles visited = set() while priority_queue: current_distance, current_node, path = heapq.heappop(priority_queue) # If we visit the end node, return the result if current_node == end: return current_distance, path + [current_node] # Skip visited nodes if current_node in visited: continue # Mark the current node as visited visited.add(current_node) path = path + [current_node] # Explore neighbors for neighbor, weight in graph[current_node]: distance = current_distance + weight if neighbor not in distances or distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor, path)) return float(\'inf\'), []"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there are any two distinct integers in the array that add up to the target integer, and if so, return the indices of those two integers. Function Signature: `def find_two_sum(nums: List[int], target: int) -> List[int]:` Write a function that satisfies the following criteria: 1. The function takes a list of integers `nums` and an integer `target` as input. 2. The function should return a list containing exactly two integers, representing the indices of the two numbers in `nums` that add up to the `target`. The list should have the smaller index first. 3. If no such pair exists, return an empty list. 4. Assume that there is exactly one solution, and each input will have exactly one solution. Examples: - `find_two_sum([2, 7, 11, 15], 9)` should return `[0, 1]`. - `find_two_sum([3, 2, 4], 6)` should return `[1, 2]`. - `find_two_sum([3, 3], 6)` should return `[0, 1]`. **Note:** - You may not use the same element twice. - Indices can be returned in any order, but the smaller index should come first.","solution":"from typing import List def find_two_sum(nums: List[int], target: int) -> List[int]: Given a list of integers \'nums\' and an integer \'target\', return indices of the two numbers such that they add up to \'target\'. Each input will have exactly one solution, and you may not use the same element twice. :param nums: List[int] - List of integers :param target: int - Target sum :return: List[int] - Indices of the two numbers that add up to target num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"You have been given the task of developing an algorithm to manage a company\'s schedule for meetings. Each meeting has a start time and an end time, and the goal is to schedule the maximum number of non-overlapping meetings. The challenge is to compute the maximum number of meetings that can be scheduled without overlap, so no two meetings occur at the same time. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each test case starts with an integer N, the number of meetings. The following N lines each contain two space-separated integers S and E, where S is the start time and E is the end time of the meeting. -----Output----- For each test case, output a single line containing the maximum number of non-overlapping meetings that can be scheduled. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ S < E ≤ 10^9 -----Example----- Input: 2 3 1 2 3 4 0 6 4 1 3 2 4 3 5 4 6 Output: 2 2 -----Explanation----- Example case 1. The meetings [1, 2] and [3, 4] can be scheduled without overlap. Example case 2. The meeting combinations [1, 3] and [3, 5] or [2, 4] and [4, 6] can be scheduled without overlap.","solution":"def max_non_overlapping_meetings(T, test_cases): Computes the maximum number of non-overlapping meetings for each test case. Args: T: Number of test cases. test_cases: A list containing test cases, each of which is a list of (start, end) tuples of meetings. Returns: A list containing the maximum number of non-overlapping meetings for each test case. results = [] for case in test_cases: # Sort meetings by their end times (primary) and start times (secondary) meetings = sorted(case, key=lambda x: (x[1], x[0])) count = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results def parse_input(input_string): Parses the input string into the format required by the solution function. Args: input_string: Input string containing number of test cases and meeting times. Returns: T: Number of test cases. test_cases: A list containing test cases, each of which is a list of (start, end) tuples of meetings. lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) meetings = [] for i in range(index + 1, index + 1 + N): S, E = map(int, lines[i].split()) meetings.append((S, E)) test_cases.append(meetings) index += N + 1 return T, test_cases def format_output(results): Formats the output for display. Args: results: A list containing results for each test case. Returns: A formatted string to be printed as output. return \'n\'.join(map(str, results))"},{"question":"You are given two arrays `A` and `B` of the same length consisting of integer elements. Your task is to compute a non-negative array `C` such that each element `C[i]` is the sum of `A[i]` and `B[i]`. After constructing `C`, you should sort `C` in non-descending order and return it. Implement the function `arraySumAndSort(A, B)` that performs this task. # Example ```python A = [3, 1, 4] B = [1, 5, 9] # Explanation: # Step 1: Compute C # C[0] = A[0] + B[0] = 3 + 1 = 4 # C[1] = A[1] + B[1] = 1 + 5 = 6 # C[2] = A[2] + B[2] = 4 + 9 = 13 # Step 2: Sort C # C = [4, 6, 13] # The returned array: # [4, 6, 13] arraySumAndSort(A, B) => [4, 6, 13] ``` # Constraints * The length of the arrays A and B will be between 1 to 10^5. * Each element in A and B will be between -10^4 to 10^4. * The output should be a list of integers sorted in non-descending order. # Additional Notes - Ensure that the function handles edge cases, such as arrays of minimum and maximum lengths. - Consider the efficiency of your approach, especially regarding the time complexity of the array operations.","solution":"def arraySumAndSort(A, B): Computes a new array C where each element C[i] is the sum of A[i] and B[i], then sorts C in non-descending order and returns it. :param A: List[int], first input array :param B: List[int], second input array :return: List[int], sorted array C C = [A[i] + B[i] for i in range(len(A))] C.sort() return C"},{"question":"A city has a series of parks that are arranged in a circular path. Each park has a unique integer assigned to it, starting from 0 up to N-1. A visitor at park 0 wants to visit every other park in a sequence. In each step, the visitor moves to the park that is two positions ahead in the circular path. Given an integer N representing the total number of parks, find the sequence of parks visited by the visitor until they return to park 0. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the sequence of parks visited, ending with 0. -----Constraints----- - 1 leq T leq 100 - 3 leq N leq 100 -----Sample Input:----- 3 3 5 7 -----Sample Output:----- 0 2 1 0 0 2 4 1 3 0 0 2 4 6 1 3 5 0","solution":"def find_park_sequence(T, test_cases): results = [] for N in test_cases: sequence = [] current_park = 0 visited = set() while current_park not in visited: sequence.append(current_park) visited.add(current_park) current_park = (current_park + 2) % N sequence.append(0) # End with park 0 results.append(sequence) return results"},{"question":"``` You are given a list of prices for a stock on different days. Find the maximum profit you can achieve by buying on one day and selling on a later day. If there\'s no profit to be made, return 0. Write a function `maxProfit(prices)` to solve the problem. **Examples:** ```python maxProfit([7, 1, 5, 3, 6, 4]) # returns 5, since you can buy at 1 and sell at 6 maxProfit([7, 6, 4, 3, 1]) # returns 0, since the prices keep decreasing ``` **Function signature:** ```python def maxProfit(prices: List[int]) -> int: pass ``` **Constraints:** - The length of the given list will be in the range [0, 10^4]. - All elements of the list are integers within the range [0, 10^4]. ```","solution":"def maxProfit(prices): Returns the maximum profit that can be achieved by buying on one day and selling on a later day. If no profit can be achieved, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Fiona is learning about different number sequences in her math class. She is particularly fascinated by the Fibonacci sequence, where each number is the sum of the two preceding ones, starting from 0 and 1. She wants to try a new variant of the Fibonacci sequence: instead of adding the two preceding numbers, she wants to add them and then take the remainder when divided by a number M. Help Fiona by writing a program that calculates the first N numbers of this modified Fibonacci sequence for her. -----INPUT----- The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test contains two integers N and M, as per the above given problem specification. -----OUTPUT----- For each test case, output a single line in format Case #T: followed by the first N numbers of the modified Fibonacci sequence, separated by spaces, for the Tth test case. -----CONSTRAINTS----- 1 < T < 50 1 < N < 1000 1 < M < 100 -----EXAMPLE----- Input: 2 5 3 6 4 Output: Case #1: 0 1 1 2 0 Case #2: 0 1 1 2 3 1","solution":"def modified_fibonacci(N, M): Generate the first N numbers of the modified Fibonacci sequence where each number is the sum of the two preceding ones, followed by taking the remainder when divided by M. fibonacci_list = [0, 1] for i in range(2, N): new_value = (fibonacci_list[-1] + fibonacci_list[-2]) % M fibonacci_list.append(new_value) return fibonacci_list[:N] def process_cases(cases): Given multiple test cases, process each case and return results in the specified format. results = [] for i, (N, M) in enumerate(cases): result = modified_fibonacci(N, M) results.append(f\\"Case #{i + 1}: {\' \'.join(map(str, result))}\\") return results"},{"question":"You have been offered a new job, congratulations! As part of the onboarding process, you need to fill out a form with your available schedule over the course of the upcoming week. The form asks for a list of time slots, split by day. Implement a function `employeeAvailability` that takes in an array of strings representing your availability times for a week. Each string in the array is formatted as follows: \\"DayOfWeek HH:MM_AM/PM - HH:MM_AM/PM\\" For example, \\"Monday 09:00_AM - 05:00_PM\\" indicates that you are available on Monday from 9 AM to 5 PM. The function should return an object with the days of the week as keys, and an array of available time slots as values for each corresponding day. If there are no availability slots for a particular day, the value should be an empty array. # Constraints: - The input array will at most contain a single time slot for each day of the week. The days of the week are in standard order: \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", and \\"Sunday\\". - Time is always represented using 12-hour AM/PM format. # Examples: ```python def employeeAvailability(slots): pass # Your code here # Example 1: input = [\\"Monday 09:00_AM - 05:00_PM\\", \\"Wednesday 01:00_PM - 06:00_PM\\", \\"Friday 09:00_AM - 12:00_PM\\"] output = { \\"Monday\\": [\\"09:00_AM - 05:00_PM\\"], \\"Tuesday\\": [], \\"Wednesday\\": [\\"01:00_PM - 06:00_PM\\"], \\"Thursday\\": [], \\"Friday\\": [\\"09:00_AM - 12:00_PM\\"], \\"Saturday\\": [], \\"Sunday\\": [] } # Example 2: input = [\\"Saturday 02:00_PM - 04:00_PM\\", \\"Sunday 10:00_AM - 01:00_PM\\"] output = { \\"Monday\\": [], \\"Tuesday\\": [], \\"Wednesday\\": [], \\"Thursday\\": [], \\"Friday\\": [], \\"Saturday\\": [\\"02:00_PM - 04:00_PM\\"], \\"Sunday\\": [\\"10:00_AM - 01:00_PM\\"] } # Example 3: input = [] output = { \\"Monday\\": [], \\"Tuesday\\": [], \\"Wednesday\\": [], \\"Thursday\\": [], \\"Friday\\": [], \\"Saturday\\": [], \\"Sunday\\": [] } ``` The function should correctly parse the input array and return the availability in the desired format.","solution":"def employeeAvailability(slots): days_of_week = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] availability = {day: [] for day in days_of_week} for slot in slots: day, time = slot.split(\' \', 1) if day in availability: availability[day].append(time) return availability"},{"question":"John works as a delivery manager at a small logistics company. He is tasked with managing packages that need to be delivered to different locations. Each location has a specific number of packages that must be delivered, and John has a limited number of hours in his day. Additionally, John has a rule that he can only deliver to one location per hour. He wants to figure out the maximum number of packages he can deliver in a given number of hours. -----Input----- The first line of input consists of two integers n (1 ≤ n ≤ 10^5) and h (1 ≤ h ≤ 10^5), where n is the number of locations and h is the number of hours John can work in a day. The second line contains n integers p_{i} (1 ≤ p_{i} ≤ 1000) representing the number of packages at each location. -----Output----- Print a single integer — the maximum number of packages John can deliver in h hours. -----Examples----- Input 5 3 2 3 1 4 6 Output 13 Input 4 4 5 2 3 1 Output 11 Input 6 2 7 1 5 3 2 4 Output 12 -----Note----- In the first sample, John can deliver the packages from the locations with the highest number of packages. He chooses locations with 6, 4, and 3 packages, delivering a total of 13 packages in 3 hours. In the second sample, John chooses all four locations and delivers a total of 11 packages within 4 hours. In the third sample, John chooses locations with 7 and 5 packages, delivering a total of 12 packages in 2 hours.","solution":"def max_packages(n, h, packages): Calculate the maximum number of packages John can deliver in h hours. Parameters: n (int): Number of locations. h (int): Number of hours John can work in a day. packages (list of int): List of integers representing the number of packages at each location. Returns: int: Maximum number of packages John can deliver in h hours. # Sort the list of packages in descending order packages.sort(reverse=True) # Calculate the sum of the largest \'h\' values in the sorted list return sum(packages[:h])"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string `s`, you need to count the number of non-empty substrings of `s` that are palindromes. A substring is any sequence of characters contiguous within the original string. It may or may not be empty, but for this problem, we consider only non-empty substrings. Write a function that takes a string `s` and returns the number of palindromic substrings in the string. -----Input----- - A single string `s` containing only lowercase English letters. The length of `s` will be in the range [1, 1000]. -----Output----- - A single integer, the number of palindromic substrings in the input string. -----Example----- Input: \\"abc\\" Output: 3 Input: \\"aaa\\" Output: 6 -----Explanation----- For the first example, the palindromic substrings are \\"a\\", \\"b\\", \\"c\\". Thus the output is 3. For the second example, the palindromic substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\". Thus the output is 6. Note that each individual character is considered a palindrome, and substrings consisting of more than one character are palindromes only if they read the same forward and backward.","solution":"def count_palindromic_substrings(s): n = len(s) count = 0 # Function to expand around the center def expand_around_center(left, right): nonlocal count while left >= 0 and right < n and s[left] == s[right]: count += 1 left -= 1 right += 1 # Consider each character and each pair of consecutive characters as centers for i in range(n): expand_around_center(i, i) # odd length palindromes expand_around_center(i, i + 1) # even length palindromes return count"},{"question":"Write a function that takes a list of integers and returns a new list where each integer is the sum of its adjacent elements in the original list. If an integer has fewer than two neighbors (for the first and last elements), consider the missing neighbor as 0. For example: `adjacent_sum([1, 2, 3, 4, 5])` should return `[2, 4, 6, 8, 4]`. Explanation: - The first element: 0 (no left neighbor) + 1 + 2 = 3 - The second element: 1 + 2 + 3 = 6 - The third element: 2 + 3 + 4 = 9 - The fourth element: 3 + 4 + 5 = 12 - The fifth element: 4 + 5 + 0 (no right neighbor) = 9 `adjacent_sum([7, -2, 5, 10, -3])` should return `[7, 10, 13, 12, -13]`. Explanation: - The first element: 0 (no left neighbor) + 7 - 2 = 5 - The second element: 7 - 2 + 5 = 10 - The third element: -2 + 5 + 10 = 13 - The fourth element: 5 + 10 - 3 = 12 - The fifth element: 10 - 3 + 0 (no right neighbor) = 7","solution":"def adjacent_sum(lst): Takes a list of integers and returns a new list where each integer is the sum of its adjacent elements in the original list. For the first and last elements, consider the missing neighbor as 0. if not lst: return [] n = len(lst) if n == 1: return [2 * lst[0]] result = [] for i in range(n): if i == 0: result.append(lst[i] + lst[i+1]) elif i == n-1: result.append(lst[i] + lst[i-1]) else: result.append(lst[i-1] + lst[i] + lst[i+1]) return result"},{"question":"In graph theory, a **path** in a graph is a sequence of vertices such that there is an edge between any two consecutive vertices. This path is called a **simple path** if all vertices in the path are distinct. Given a graph represented as an adjacency list and two nodes, your task is to find the length of the shortest simple path between these two nodes. Your function will take a graph as a dictionary where keys are node labels, and values are lists of labels of adjacent nodes. Additionally, the function will take two nodes representing the start and the end nodes. The function should return the length of the shortest simple path between the start and end nodes. If no path exists, return -1. Examples -------- A few examples to make it clear: ```python graph = { \'A\': [\'B\', \'C\'], \'B\': [\'A\', \'D\', \'E\'], \'C\': [\'A\', \'F\'], \'D\': [\'B\'], \'E\': [\'B\', \'F\'], \'F\': [\'C\', \'E\'] } shortest_path(graph, \'A\', \'F\') # Output: 2 graph = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [\'A\'] } shortest_path(graph, \'A\', \'C\') # Output: 2 graph = { \'A\': [\'B\'], \'B\': [\'C\'], \'C\': [] } shortest_path(graph, \'C\', \'A\') # Output: -1 ``` Notes ----- - You can assume all labels are unique and the graph is undirected. - The shortest path is defined as the path with the fewest edges.","solution":"from collections import deque def shortest_path(graph, start, end): Returns the length of the shortest simple path between start and end nodes. If no path exists, returns -1. if start == end: return 0 visited = set() queue = deque([(start, 0)]) while queue: current_node, current_distance = queue.popleft() if current_node not in visited: visited.add(current_node) for neighbor in graph.get(current_node, []): if neighbor == end: return current_distance + 1 if neighbor not in visited: queue.append((neighbor, current_distance + 1)) return -1"},{"question":"You are given a rectangle of dimensions M*N represented on a 2-D grid. Each cell in the grid is either clean or dirty. You need to clean the grid using a vacuum cleaner that works as follows: it moves in a straight line in either horizontal or vertical direction, and it can toggle the state (clean to dirty or dirty to clean) of all cells along the path it moves. Your task is to determine the minimum number of moves required to clean the entire grid, starting from all cells being dirty. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers M and N denoting the number of rows and columns of the grid, respectively. - Each of the next M lines contains N space-separated integers, where each integer is either 0 (representing a clean cell) or 1 (representing a dirty cell). -----Output----- - For each test case, print a single line containing a single integer, the minimum number of moves required to clean the entire grid. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ M, N ≤ 50 - Each cell is initially either 0 or 1. -----Example----- Input 2 3 4 1 1 1 1 1 1 1 1 1 1 1 1 2 3 1 1 1 1 1 1 Output 2 2 -----Explanation----- Example 1. You can clean the entire grid with two moves: 1. Move along the first row (toggle all cells in row 1). 2. Move along the first column (toggle all cells in column 1). Example 2. You can clean the entire grid with two moves: 1. Move along the first row (toggle all cells in row 1). 2. Move along the first column (toggle all cells in column 1). By following the optimal moves, you can clean the entire grid efficiently.","solution":"def min_moves_to_clean_grid(m, n, grid): This function calculates the minimum number of moves required to clean the entire grid. The moves are horizontal or vertical passes that toggle the state of the cells in that row or column. # To clean the entire grid, you can always clean the first row and the first column for a general MxN matrix. return 2 def process_input_and_solve(input_data): This function processes the input data and returns the results for all test cases. results = [] lines = input_data.strip().split(\'n\') T = int(lines[0]) idx = 1 for _ in range(T): m, n = map(int, lines[idx].split()) grid = [list(map(int, lines[idx + i + 1].split())) for i in range(m)] result = min_moves_to_clean_grid(m, n, grid) results.append(result) idx += m + 1 return results"},{"question":"Write a function `compress_string` that takes a string `s` consisting of uppercase/lowercase alphabets and returns the compressed version of the string. The compression is done such that the consecutive duplicate characters are replaced with the character followed by the number of occurrences. If the compressed string is not smaller than the original string, return the original string. For example: ```python compress_string(\'aabcccccaaa\') == \'a2b1c5a3\' compress_string(\'abcd\') == \'abcd\' compress_string(\'aabbccdd\') == \'aabbccdd\' ``` Note: - You may assume the string has only alphanumeric characters (a-z, A-Z, 0-9). - The function should be case-sensitive. For example, \'AA\' should remain \'AA\' and not be compressed to \'A2\'.","solution":"def compress_string(s): Compresses the string by replacing consecutive duplicate characters with the character followed by the number of occurrences. Parameters: s (str): The input string. Returns: str: The compressed string or the original string if the compressed version is not smaller. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Write a function that takes in a string containing a sequence of words and returns the word that appears the maximum number of times. If there is a tie for the maximum number of occurrences, return the word that appears first in the sequence. Example: Input: \'cat dog dog bird cat dog cat\' Output: \'cat\' Input: \'alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta\' Output: \'gamma\'","solution":"def most_frequent_word(s): Returns the word that appears the maximum number of times in the string. If there is a tie, it returns the word that appears first in the sequence. words = s.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 max_count = 0 max_word = None for word in words: if word_count[word] > max_count: max_count = word_count[word] max_word = word return max_word"},{"question":"A company requires a function to generate invoice numbers for its customers. The invoice number should be generated by taking customer’s name, the current date in \\"YYYYMMDD\\" format, and a unique identifier separating them with hyphens. Write a function `generate_invoice` that takes in three arguments: `customer_name` (a string), `year` (a 4-digit integer), and `serial_number` (a unique integer). The function should return the invoice number as a string. For example, if the customer name is \\"JohnDoe\\", the year is 2023, the date is 01 January, and the unique identifier is 12345, the invoice number should be generated as \\"JohnDoe-20230101-12345\\". Example usages of the function are shown below: ```python generate_invoice(\\"JohnDoe\\", 2023, \\"0101\\", 12345) # returns \\"JohnDoe-20230101-12345\\" generate_invoice(\\"AliceSmith\\", 2021, \\"1220\\", 6789) # returns \\"AliceSmith-20211220-6789\\" ``` The `generate_invoice` function should concatenate customer_name, year, date in \\"MMDD\\" format, and serial_number to form the final invoice number according to specification.","solution":"def generate_invoice(customer_name, year, date, serial_number): Generates an invoice number based on customer name, year, date (MMDD format), and serial number. Args: customer_name (str): The name of the customer. year (int): The year in YYYY format. date (str): The date in MMDD format. serial_number (int): The unique serial number. Returns: str: The generated invoice number. return f\\"{customer_name}-{year}{date}-{serial_number}\\""},{"question":"Task A school cafeteria wants to efficiently manage their menu options based on student preferences. Each student can vote for multiple menu items they like, and the cafeteria manager wants to identify the most popular items for the upcoming lunch. Given a list of student votes where each student vote is a list of menu items they like, determine the most frequently voted for item. If there is a tie, return the item that appears first alphabetically. # Example For `votes = [[\\"pizza\\", \\"burger\\"], [\\"burger\\", \\"taco\\"], [\\"pizza\\"]]`, the output should be `\\"burger\\"`. Both \\"pizza\\" and \\"burger\\" have 2 votes each, but \\"burger\\" comes first alphabetically. # Input/Output - `[input]` list of lists of `strings` `votes` A list where each element is a list representing a student\'s preferred menu items. Constraints: `1 ≤ len(votes) ≤ 50` and `1 ≤ len(votes[i]) ≤ 10`. Each menu item is a string containing only alphabetical characters (both uppercase and lowercase). - `[output]` string The most voted for menu item.","solution":"def most_popular_menu(votes): from collections import Counter # Create a flat list of all votes all_votes = [item for sublist in votes for item in sublist] # Count the frequency of each menu item vote_count = Counter(all_votes) # Find the most common vote count max_count = max(vote_count.values()) # Filter items that have the max count and return the alphabetically first one most_popular_items = [item for item, count in vote_count.items() if count == max_count] return min(most_popular_items)"},{"question":"Given an array of integers, find the length of the longest subarray that has the sum of its elements equal to zero. Input ==== An integer array __arr__ of size __n__. Output ==== The length of the longest subarray with a sum of zero. Notes ==== - If there are no subarrays with sum zero, return 0. - The array can contain both positive and negative integers. - The expected time complexity is O(n). Example == __arr__ = [15, -2, 2, -8, 1, 7, 10, 23] Output: 5 Explanation: The longest subarray with zero sum is [-2, 2, -8, 1, 7] with length 5.","solution":"def longest_zero_sum_subarray(arr): Returns the length of the longest subarray with a sum of zero. sum_index_map = {} max_len = 0 curr_sum = 0 for i in range(len(arr)): curr_sum += arr[i] if curr_sum == 0: max_len = i + 1 if curr_sum in sum_index_map: subarray_len = i - sum_index_map[curr_sum] max_len = max(max_len, subarray_len) else: sum_index_map[curr_sum] = i return max_len"},{"question":"Given a string that represents a column title as it appears in an Excel sheet, return its corresponding column number. For example: A -> 1 B -> 2 C -> 3 ... Z -> 26 AA -> 27 AB -> 28 ... Example 1: Input: \\"A\\" Output: 1 Example 2: Input: \\"AB\\" Output: 28 Example 3: Input: \\"ZY\\" Output: 701","solution":"def title_to_number(column_title): Given a string that represents a column title as it appears in an Excel sheet, return its corresponding column number. result = 0 for char in column_title: result = result * 26 + (ord(char) - ord(\'A\') + 1) return result"},{"question":"There\'s a traditional game called \\"Box Run\\", where N players stand in a circle and pass a box to each other in a synchronized manner. They pass the box one position to the right after every P seconds. The game ends whenever a player receives the box for the K-th time. Given the number of players N, the time interval P in seconds, and the target number of passes K for the game to end, determine the total time (in seconds) it will take to finish the game. -----Input:----- - First line will contain a single integer T, the number of test cases. - For each test case, a single line containing three space-separated integers N (number of players), P (time interval in seconds), and K (target number of passes). -----Output:----- - For each test case, print a single line containing the total time (in seconds) required for the game to finish. -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 10^6 - 1 leq P leq 10^3 - 1 leq K leq 10^9 -----Sample Input:----- 2 5 2 10 3 1 5 -----Sample Output:----- 20 5 -----EXPLANATION:----- For the first test case: 1. The box is passed every 2 seconds. 2. The game ends when a player receives the box for the 10th time. 3. Thus, it will take 10 times 2 = 20 seconds for the game to finish. For the second test case: 1. The box is passed every 1 second. 2. The game ends when a player receives the box for the 5th time. 3. Thus, it will take 5 times 1 = 5 seconds for the game to finish.","solution":"def box_run(T, test_cases): This function calculates the time required for each test case in the Box Run game. Parameters: T (int): number of test cases test_cases (list of tuple): each tuple contains three integers - N (number of players), P (time interval in seconds), and K (target number of passes). Returns: list: list of total times (in seconds) required for each test case to finish the game results = [] for case in test_cases: N, P, K = case total_time = K * P results.append(total_time) return results"},{"question":"You are working as a botanist and have been tasked to help identify various plant species based on their observable attributes. # Story In the plant database, each plant species can be identified by three key attributes: - Leaf shape - Flower color - Height (in cm) Each species is uniquely identifiable by the combination of these attributes. The attributes are provided in a prescribed order: \'leaf shape\', \'flower color\', \'height\', separated by a comma. You need to write a function to find the species given a set of plant attributes. # Task Write a function called `identify_plant` that checks if given specific attributes, determines the species name of the plant. You will be provided with two inputs: - A dictionary where keys are the species names and values are a dictionary of attributes. - A string containing the attributes of an unidentified plant in the order of \'leaf shape\', \'flower color\', and \'height\' separated by a comma. You need to return the name of the species if an exact match is found, else return \\"Unknown\\". # Examples ```python attributes_dict = { \\"Rose\\": {\\"leaf shape\\": \\"oval\\", \\"flower color\\": \\"red\\", \\"height\\": 50}, \\"Tulip\\": {\\"leaf shape\\": \\"lance\\", \\"flower color\\": \\"yellow\\", \\"height\\": 30}, \\"Sunflower\\": {\\"leaf shape\\": \\"heart\\", \\"flower color\\": \\"yellow\\", \\"height\\": 150} } print(identify_plant(attributes_dict, \\"oval,red,50\\")) # Expected output: Rose print(identify_plant(attributes_dict, \\"lance,yellow,30\\")) # Expected output: Tulip print(identify_plant(attributes_dict, \\"heart,yellow,200\\")) # Expected output: Unknown ``` Do not assume any prior knowledge about the plant species, focus only on matching the given attributes accurately. Good luck!","solution":"def identify_plant(attributes_dict, attributes_str): attributes_list = attributes_str.split(\',\') given_attributes = { \'leaf shape\': attributes_list[0], \'flower color\': attributes_list[1], \'height\': int(attributes_list[2]) } for species, attrs in attributes_dict.items(): if attrs == given_attributes: return species return \\"Unknown\\""},{"question":"# Rearrange to Palindrome Given a string `s` consisting of lowercase English letters, determine if you can rearrange the characters of the string to form a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward. # Example Example 1 - Input: `s = \\"civic\\"` - Output: `True` - Explanation: \\"civic\\" is already a palindrome. Example 2 - Input: `s = \\"ivicc\\"` - Output: `True` - Explanation: \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. Example 3 - Input: `s = \\"hello\\"` - Output: `False` - Explanation: \\"hello\\" cannot be rearranged to a palindrome. # Constraints - The string `s` will contain characters only from \'a\' to \'z\'. - The length of `s` will be in the range [1, 10^5]. # Task Implement a function `canRearrangeToPalindrome(s: str) -> bool` that takes a string `s` as input and returns `True` if the string can be rearranged to form a palindrome, and `False` otherwise. # Tips * A string can be rearranged into a palindrome if at most one character has an odd frequency. * Use efficient algorithms to determine the frequency of characters and evaluate the rearrangement possibility within the constraint limits.","solution":"from collections import Counter def canRearrangeToPalindrome(s: str) -> bool: Determine if the characters of string `s` can be rearranged to form a palindrome. Parameters: - s (str): Input string consisting of lowercase English letters. Returns: - bool: True if the string can be rearranged to form a palindrome, False otherwise. char_counts = Counter(s) odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given a string composed of lowercase English letters. Write a function that finds the longest substring without repeating characters. Example: For the string `abcabcbb`, the longest substring without repeating characters is `abc`, so the answer should be `3`. `1 <= length of string <= 1000`","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: Input string composed of lowercase English letters. :return: Length of the longest substring without repeating characters. char_index = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"You are given an array of integers. Your task is to find the highest product of any triplet (three numbers) in the array and return that product. For example, consider the array `[-10, -10, 5, 2, 3]`. The highest product of any triplet in this array is `-10 * -10 * 5 = 500`. **Constraints:** - The array will have at least three integers. - The array length will not exceed `10^5`. - Each integer in the array can be in the range `[-10^3, 10^3]`. Write a function `highestTripletProduct` that takes in an array of integers and returns the highest product of any triplet. ```python def highestTripletProduct(arr): # Your code here ```","solution":"def highestTripletProduct(arr): Returns the highest product of any triplet in the array. arr.sort() n = len(arr) return max(arr[0] * arr[1] * arr[n-1], arr[n-3] * arr[n-2] * arr[n-1])"},{"question":"A warehouse stores items which are tracked with a unique ID and a quantity count. Periodically, stock audits are conducted to verify the quantities of the items. Write a function that receives a list of tuples. Each tuple contains a unique item ID (a string), a quantity (an integer), and a string indicating the action to be performed: either \\"add\\" or \\"remove\\". The function should return a dictionary where the keys are the unique item IDs and the values are the final quantities of the items after all actions have been performed. If at any point a removal results in a negative quantity, the quantity of the item should be set to zero instead of going negative. **Input Structure:** - A list of tuples where each tuple contains: - A unique item ID (string) - A quantity (integer) - An action (string): either \\"add\\" or \\"remove\\" **Output Structure:** - A dictionary with item IDs as keys and their final quantities as values. **Note:** - The list of tuples will always contain valid actions (\\"add\\" or \\"remove\\"). - The function should handle cases where quantities might need to be adjusted to prevent negative values. **Examples:** Example 1: ``` [(\'item1\', 10, \'add\'), (\'item2\', 5, \'add\'), (\'item1\', 3, \'remove\'), (\'item2\', 2, \'remove\')] --> {\'item1\': 7, \'item2\': 3} ``` because: - item1: 10 added, 3 removed -> 7 remaining - item2: 5 added, 2 removed -> 3 remaining Example 2: ``` [(\'item3\', 20, \'add\'), (\'item3\', 30, \'remove\'), (\'item4\', 15, \'add\')] --> {\'item3\': 0, \'item4\': 15} ``` because: - item3: 20 added, 30 removed -> 0 remaining (instead of going negative) - item4: 15 added -> 15 remaining","solution":"def audit_inventory(actions): Updates inventory quantities based on a list of actions. Parameters: actions (list of tuple): A list where each tuple contains: - A unique item ID (string) - A quantity (integer) - An action (string): either \\"add\\" or \\"remove\\" Returns: dict: A dictionary with item IDs as keys and their final quantities as values. inventory = {} for item_id, quantity, action in actions: if item_id not in inventory: inventory[item_id] = 0 if action == \\"add\\": inventory[item_id] += quantity elif action == \\"remove\\": inventory[item_id] -= quantity if inventory[item_id] < 0: inventory[item_id] = 0 return inventory"},{"question":"Write a function that takes a sequence of integers and a target sum, and returns a pair of numbers from the sequence that add up to the target sum. If no such pair exists, return `null`. Example: ``` findPair([2, 7, 11, 15], 9); // should return [2, 7] findPair([1, 2, 3, 4, 5], 10); // should return null findPair([3, 8, 12, 5, 1, 6], 14); // should return [8, 6] ```","solution":"def find_pair(sequence, target_sum): Returns a pair of numbers from the sequence that add up to the target sum. If no such pair exists, returns None. num_set = set() for num in sequence: complement = target_sum - num if complement in num_set: return [complement, num] num_set.add(num) return None"},{"question":"# Task You are given a string consisting of lowercase letters of the English alphabet. You need to check whether the string is a palindrome. Optimization is crucial as the given string could be very long. A palindrome is a string that reads the same forward and backward. # Example For `input = \\"racecar\\"`, the output should be `true`. For `input = \\"hello\\"`, the output should be `false`. # Input/Output - `[input]` string `input` A string containing only lowercase English letters. - `[output]` boolean Return `true` if the input string is a palindrome, and `false` otherwise.","solution":"def is_palindrome(input_str): Returns true if the input string is a palindrome, and false otherwise. return input_str == input_str[::-1]"},{"question":"Given a list of integers `lst`, write a function that returns a new list containing all the elements of the original list, but with all duplicate elements removed and the order of the remaining elements preserved. For example: ```python remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5] remove_duplicates([4, 4, 4, 3, 2, 1]) == [4, 3, 2, 1] remove_duplicates([5, 1, 5, 3, 7, 3, 1]) == [5, 1, 3, 7] ``` The function should maintain the order of the first occurrence of each element and ignore any later duplicates. Duplicate elements beyond the first occurrence should not appear in the output list. For example: ```python remove_duplicates([10, 20, 10, 30, 20]) == [10, 20, 30] ```","solution":"def remove_duplicates(lst): Returns a new list with duplicates removed and order preserved. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"Chef Bob is in charge of arranging a line of soldiers for an upcoming parade at the Institute of Soldiers Technology. He has N soldiers, each with a given rank represented by a unique integer from 1 to N. Chef Bob wants to arrange them in such a way that each soldier is followed by either a soldier with a higher rank or by no soldier at all, and this pattern should repeat M times. For instance, if there are 6 soldiers with ranks [1, 2, 3, 4, 5, 6] and assuming M = 2, one possible arrangement could be [1, 3, 2, 4, 5, 6]. Here, soldier 1 is followed by soldier 3 (higher rank) and soldier 2 is followed by soldier 4 (higher rank), resulting in two instances of the pattern. -----Input:----- - The first line contains T, the number of test cases. - Each test case consists of a line with two space-separated integers N and M. -----Output:----- For each test case, output in a single line containing N integers representing the ranks of soldiers in one possible order that satisfies the condition. -----Constraints----- - 1 leq T leq 100 - 2 leq N leq 20 - 0 leq M leq N-1 -----Sample Input:----- 1 6 2 -----Sample Output:----- 1 3 2 4 5 6","solution":"def arrange_soldiers(T, test_cases): results = [] for N, M in test_cases: soldiers = list(range(1, N + 1)) for i in range(0, 2 * M, 2): if i + 1 < N: soldiers[i], soldiers[i + 1] = soldiers[i + 1], soldiers[i] results.append(soldiers) return results"},{"question":"Write a function that takes a list of integers and an integer `k`, and returns the maximum sum of `k` consecutive elements in the list. If the list length is less than `k`, return `None`. Explanation Given a list of integers and a value `k`, you need to find the subarray (or contiguous part) of length `k` which has the maximum sum among all possible consecutive subarrays of that length. To implement this, you can use a sliding window approach. Start by computing the sum of the first `k` elements. Then slide the window one element at a time, adjusting the sum by subtracting the element that is left behind and adding the new element that enters the window. Example ``` list = [1, 4, 2, 10, 23, 3, 1, 0, 20] k = 4 Output: 39 Explanation: The maximum sum of 4 consecutive elements in the list is obtained by summing the subarray [4, 2, 10, 23], which equals 39. ``` ``` list = [5, 2, -1, 0, 3] k = 3 Output: 6 Explanation: The maximum sum of 3 consecutive elements in the list is obtained by summing the subarray [5, 2, -1], which equals 6. ``` ``` list = [2, 3] k = 3 Output: None Explanation: Since the length of the list is less than `k`, the function should return None. ``` Constraints - The list will contain at least one element. - The list may contain negative numbers. - `1 <= k <= len(list)`","solution":"def max_sum_consecutive_elements(arr, k): Returns the maximum sum of `k` consecutive elements in the list `arr`. If the length of the list is less than `k`, returns None. n = len(arr) if n < k: return None # Calculate the sum of the first \'k\' elements max_sum = current_sum = sum(arr[:k]) # Use the sliding window technique to find the maximum sum for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Write a function that takes a string representing a sequence of parentheses and brackets and determines whether it is balanced. A sequence is considered balanced if for every opening parenthesis or bracket, there is a corresponding closing one in the correct order. The function should return true if the sequence is balanced and false otherwise. For example, \\"([])\\" is balanced, but \\"([)]\\" is not.","solution":"def is_balanced(sequence): Determines if the input string consisting of parentheses and brackets is balanced. Args: sequence (str): The string containing the sequence of parentheses and brackets. Returns: bool: Returns True if the string is balanced, False otherwise. stack = [] matching_bracket = {\')\':\'(\', \']\':\'[\'} for char in sequence: if char in \'([\': stack.append(char) elif char in \')]\': if not stack or stack[-1] != matching_bracket[char]: return False stack.pop() return len(stack) == 0"},{"question":"Write a function `parse_expression` that takes a string containing a mathematical expression in Reverse Polish Notation (RPN) and returns the calculated result. The expression will consist of integers and the operators `+`, `-`, `*`, and `/`. It may contain multiple operations and should handle division that results in floating-point numbers correctly. # Example ```python print(parse_expression(\\"3 4 +\\")) # Output: 7 print(parse_expression(\\"3 4 2 * +\\")) # Output: 11 print(parse_expression(\\"10 5 /\\")) # Output: 2.0 ``` Constraints: - Inputs will always be a valid RPN expression. - Division should handle floating-point results.","solution":"def parse_expression(expression): Evaluates a mathematical expression in Reverse Polish Notation (RPN). Parameters: expression (str): A string containing a RPN expression. Returns: float or int: The evaluated result of the expression. stack = [] tokens = expression.split() for token in tokens: if token in [\'+\', \'-\', \'*\', \'/\']: b = stack.pop() a = stack.pop() if token == \'+\': result = a + b elif token == \'-\': result = a - b elif token == \'*\': result = a * b elif token == \'/\': result = a / b stack.append(result) else: stack.append(float(token) if \'.\' in token else int(token)) return stack[0]"},{"question":"Create a function that accepts a list of integers and returns a new list with two elements: the first element is a sublist of all the even numbers in the original list, and the second element is a sublist of all the odd numbers in the original list. Both sublists should be ordered in the same sequence as they appeared in the input list. EXAMPLES `split_even_odd([1, 2, 3, 4, 5])` becomes `[[2, 4], [1, 3, 5]]` `split_even_odd([10, 15, 20, 25, 30])` becomes `[[10, 20, 30], [15, 25]]` `split_even_odd([7, 8, 9, 10, 11])` becomes `[[8, 10], [7, 9, 11]]`","solution":"def split_even_odd(lst): Splits a list of integers into two sublists: even numbers and odd numbers. Arguments: lst : list of int The list of integers to split. Returns: list of lists A list containing two sublists: the first sublist contains all even numbers, and the second sublist contains all odd numbers. even_numbers = [num for num in lst if num % 2 == 0] odd_numbers = [num for num in lst if num % 2 != 0] return [even_numbers, odd_numbers]"},{"question":"Lina is an enthusiastic programmer who loves working with numbers. Recently, she has encountered a fascinating sequence called the Catalan sequence, where each Catalan number can be calculated using the formula: C(n) = (2n)! / ((n + 1)! * n!) The first few Catalan numbers are: C(0)=1, C(1)=1, C(2)=2, C(3)=5, C(4)=14, ... Lina is curious to find out the sum of the first N Catalan numbers for a given integer N. Help Lina by writing a program to calculate this sum. -----Input----- The first line contains a single integer T - the number of test cases. Each of the next T lines contains a single integer N. -----Output----- For every test case, output the sum of the first N Catalan numbers in a separate line. -----Constraints----- T (1 ≤ T ≤ 100) N (1 ≤ N ≤ 1000) -----Example----- Input: 2 3 4 Output: 8 22 Explanation: For N = 3, the sum of the first 3 Catalan numbers is 1 + 1 + 2 + 5 = 8 For N = 4, the sum of the first 4 Catalan numbers is 1 + 1 + 2 + 5 + 14 = 22","solution":"import math def catalan_number(n): Returns the nth Catalan number. return math.comb(2*n, n) // (n + 1) def sum_of_catalan_numbers(n): Returns the sum of the first n Catalan numbers. return sum(catalan_number(i) for i in range(n + 1)) def sum_of_catalan_numbers_for_multiple_cases(cases): For a list of cases, returns a list of sums of the first N Catalan numbers for each case. cases: List of integers return [sum_of_catalan_numbers(n) for n in cases]"},{"question":"Given an integer array `nums`, you need to return an array of the same length where each element at index `i` is the product of all the numbers in the original array except `nums[i]`. Write a function `product_except_self(nums)` which takes a list of integers and returns a list where each element is the product of all other elements in the original list. Note: - The output array should have the same size as the input array. - You should solve it *without division* and in O(n) time complexity. Try to implement the solution using constant extra space (excluding the output array). # Example ```python product_except_self([1, 2, 3, 4]) -> [24, 12, 8, 6] product_except_self([2, 3, 4, 5]) -> [60, 40, 30, 24] product_except_self([1, 0, 3, 4]) -> [0, 12, 0, 0] ``` # Explanation In the first example: - The product of all elements except the one at index 0: `2 * 3 * 4 = 24` - The product of all elements except the one at index 1: `1 * 3 * 4 = 12` - The product of all elements except the one at index 2: `1 * 2 * 4 = 8` - The product of all elements except the one at index 3: `1 * 2 * 3 = 6` # Constraints The length of the input array can be up to 10^5 elements.","solution":"def product_except_self(nums): Given an integer array nums, return an array where each element at index i is the product of all the numbers in the array except nums[i]. This function solves the problem without using division and in O(n) time complexity, using constant extra space (excluding the output array). n = len(nums) result = [1] * n # Calculate prefix products prefix_product = 1 for i in range(n): result[i] = prefix_product prefix_product *= nums[i] # Calculate suffix products and multiply with prefix products suffix_product = 1 for i in range(n-1, -1, -1): result[i] *= suffix_product suffix_product *= nums[i] return result"},{"question":"Implement a function called `rotate_string` that rotates the characters of a given string `s` by a specified integer `k`. The rotation should be to the right, meaning that each character is shifted to the position with the index `k` positions higher than its current index. The rotation should wrap around so that characters shifted from the end of the string appear at the beginning. **Function Signature:** ```python def rotate_string(s: str, k: int) -> str: ``` # Input: - `s`: A string of lowercase English letters (1 ≤ len(s) ≤ 100). - `k`: A non-negative integer (0 ≤ k ≤ 1000). # Output: - A string which is the given string `s` rotated to the right by `k` positions. # Example: ```python assert rotate_string(\\"abcdef\\", 2) == \\"efabcd\\" assert rotate_string(\\"abcdef\\", 4) == \\"cdefab\\" assert rotate_string(\\"abcdef\\", 6) == \\"abcdef\\" # Rotating by the length of the string results in the same string assert rotate_string(\\"abcdef\\", 8) == \\"efabcd\\" # Equivalent to rotating by 2 positions (8 % 6) ``` # Notes: - If `k` is greater than the length of the string, rotate it by `k % len(s)`. - The function should be efficient enough to handle the upper limits of the input constraints.","solution":"def rotate_string(s: str, k: int) -> str: Rotate the characters of a given string `s` by `k` positions to the right. n = len(s) k = k % n # Handle cases where k is greater than length of string return s[-k:] + s[:-k]"},{"question":"In this Kata, you will be given a sorted list of unique integers. Your task is to find the smallest integer that is not present in the list and is larger than all the integers in the list. For example, `solve([1, 2, 3, 6, 7, 9]) = 4`, because 4 is the smallest integer greater than all elements in the list and not present in the list. Good luck! Please also try [Sorted? yes? no? how?](https://www.codewars.com/kata/580a4734d6df748060000045)","solution":"def solve(arr): Returns the smallest integer that is not present in the list and is larger than all the integers in the list. :param arr: List of sorted, unique integers :return: Smallest integer not present and larger than the largest integer in arr if not arr: return 1 return max(arr) + 1"},{"question":"Task The function `is_valid_snake_pattern(pattern)` should return a boolean indicating whether the given list of integers follows a valid snake pattern. A \\"snake pattern\\" in this context is defined as a sequence of integers that alternately increases and decreases in value by exactly 1. Input An integer list `pattern` is provided as input, representing a sequence of numbers. Output The function should return `True` if the input list satisfies the snake pattern conditions, and `False` otherwise. Examples # Example 1: `pattern` = `[1, 2, 1, 2, 1]` The alternating sequence goes: - 1 to 2 (increases by 1) - 2 to 1 (decreases by 1) - 1 to 2 (increases by 1) - 2 to 1 (decreases by 1) So, `is_valid_snake_pattern([1, 2, 1, 2, 1])` should return `True`. # Example 2: `pattern` = `[3, 4, 5, 4, 3]` The sequence follows: - 3 to 4 (increases by 1) - 4 to 5 (increases by 1), which breaks the snake pattern. So, `is_valid_snake_pattern([3, 4, 5, 4, 3])` should return `False`. # Example 3: `pattern` = `[10, 11, 10, 9, 10]` The alternating sequence goes: - 10 to 11 (increases by 1) - 11 to 10 (decreases by 1) - 10 to 9 (decreases by 1), which breaks the snake pattern. So, `is_valid_snake_pattern([10, 11, 10, 9, 10])` should return `False`. # Example 4: `pattern` = `[5]` A single element automatically satisfies the pattern conditions, as there are no transitions to compare. So, `is_valid_snake_pattern([5])` should return `True`. Constraints - The input list `pattern` will contain between 1 and 10^5 integers. - Each integer in the list will be between 1 and 10^9, inclusive.","solution":"def is_valid_snake_pattern(pattern): Return True if the list of integers follows a snake pattern, False otherwise. A \\"snake pattern\\" is defined as a sequence of integers that alternately increases and decreases in value by exactly 1. Args: pattern (list): List of integers representing the sequence. Returns: bool: True if the sequence follows the snake pattern, False otherwise. if len(pattern) <= 1: return True for i in range(1, len(pattern)): diff = pattern[i] - pattern[i-1] if i % 2 == 1: # Odd index: number should increase by 1 if diff != 1: return False else: # Even index: number should decrease by 1 if diff != -1: return False return True"},{"question":"Given a list of non-negative integers where each integer represents the height of a vertical line drawn on a coordinate plane. These lines are arranged such that they form pairs of containers. Your task is to find the pair of lines that can trap the most water between them, such that the width of the container is the horizontal distance between the two lines and the height is the smaller of the two lines\' heights. Write a function `max_water_trapped` that takes a list of integers representing the heights, and returns the maximum amount of water that can be trapped between any two lines. Example: Input: [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The pair of lines at index 1 and 8 trap the most water, with a width of 7 and height of 7 (since min(8,7)=7), resulting in an area of 49.","solution":"def max_water_trapped(height): Returns the maximum amount of water that can be trapped between any two lines left, right = 0, len(height) - 1 max_area = 0 while left < right: width = right - left h = min(height[left], height[right]) max_area = max(max_area, width * h) if height[left] < height[right]: left += 1 else: right -= 1 return max_area"},{"question":"Streets are magically coming to life in your city, but there\'s a catch—each street can only have a name that\'s a palindrome (a word that reads the same backward as forward). The city council needs your help to ensure that all newly proposed street names meet this criterion. Write a function `is_palindromic_street_name` that takes a single argument, `street_name`, which is a string, and returns `True` if the street name is a palindrome and `False` otherwise. The street names will always be lowercase strings and will not contain any spaces, hyphens, or numerals. For example: - `is_palindromic_street_name(\'level\')` should return `True` - `is_palindromic_street_name(\'madam\')` should return `True` - `is_palindromic_street_name(\'street\')` should return `False`","solution":"def is_palindromic_street_name(street_name): Returns True if the street name is a palindrome, False otherwise. return street_name == street_name[::-1]"},{"question":"You are given a list of integers. Your task is to return the largest sum that can be obtained by summing up exactly three of the integers in the list. If the list has fewer than three integers, return \\"Not enough elements\\". For example: `max_triplet_sum([2, 1, 3, 4])` should return `9`, because the maximum sum of any three integers is `2 + 3 + 4 = 9`. `max_triplet_sum([3, 8, 1, -5, 6])` should return `17`, because the maximum sum of any three integers is `3 + 8 + 6 = 17`. `max_triplet_sum([1, 2])` should return `\\"Not enough elements\\"`. ```python def max_triplet_sum(lst): if len(lst) < 3: return \\"Not enough elements\\" lst.sort(reverse=True) return sum(lst[:3]) # Testing the function print(max_triplet_sum([2, 1, 3, 4])) # Output: 9 print(max_triplet_sum([3, 8, 1, -5, 6])) # Output: 17 print(max_triplet_sum([1, 2])) # Output: Not enough elements ``` Write the function `max_triplet_sum(lst)` which takes an integer list and returns the largest sum of any three integers. If there are fewer than three integers, it should return \\"Not enough elements\\".","solution":"def max_triplet_sum(lst): Returns the largest sum that can be obtained by summing up exactly three of the integers in the list. If the list has fewer than three integers, returns \\"Not enough elements\\". if len(lst) < 3: return \\"Not enough elements\\" lst.sort(reverse=True) return sum(lst[:3])"},{"question":"Write a function `complex_add_subtract(c1, c2, operation)` that performs addition or subtraction on two complex numbers based on the specified operation. The complex numbers are given as tuples `(real, imaginary)`, where `real` and `imaginary` are integers. The `operation` is a string that can be either `\\"add\\"` or `\\"subtract\\"`. The function should return the result as a tuple `(result_real, result_imaginary)`. Examples: ```python complex_add_subtract((3, 4), (1, 2), \\"add\\") # => (4, 6) complex_add_subtract((3, 4), (1, 2), \\"subtract\\") # => (2, 2) complex_add_subtract((-1, -1), (1, 1), \\"add\\") # => (0, 0) complex_add_subtract((5, -3), (2, 4), \\"subtract\\")# => (3, -7) ```","solution":"def complex_add_subtract(c1, c2, operation): Performs addition or subtraction on two complex numbers based on the specified operation. The complex numbers are given as tuples (real, imaginary). Args: c1 (tuple): A tuple (real, imaginary) representing the first complex number. c2 (tuple): A tuple (real, imaginary) representing the second complex number. operation (str): A string that can be either \\"add\\" or \\"subtract\\". Returns: tuple: A tuple (result_real, result_imaginary) representing the result complex number. if operation == \\"add\\": result_real = c1[0] + c2[0] result_imaginary = c1[1] + c2[1] elif operation == \\"subtract\\": result_real = c1[0] - c2[0] result_imaginary = c1[1] - c2[1] else: raise ValueError(\\"The operation must be \'add\' or \'subtract\'\\") return (result_real, result_imaginary)"},{"question":"=====Function Descriptions===== itertools.permutations The permutations() function in the itertools module returns all possible orderings of an input iterable. Each ordering is a tuple. Example Code >>> from itertools import permutations >>> >>> a = \'abc\' >>> >>> perm = permutations(a) >>> >>> for i in list(perm): >>> print(i) (\'a\', \'b\', \'c\') (\'a\', \'c\', \'b\') (\'b\', \'a\', \'c\') (\'b\', \'c\', \'a\') (\'c\', \'a\', \'b\') (\'c\', \'b\', \'a\') =====Problem Statement===== You are given a list of distinct characters along with an integer k representing the length of each permutation. Your task is to print all k-length permutations of the characters in lexicographic (sorted) order. ====Input Format===== The first line contains a string of distinct characters. The second line contains an integer k. =====Constraints===== 0 < len(s) ≤ 10 1 ≤ k ≤ len(s) =====Output Format===== Print each permutation as a tuple in lexicographical order. #Sample Input# abc 2 #Sample Output# (\'a\', \'b\') (\'a\', \'c\') (\'b\', \'a\') (\'b\', \'c\') (\'c\', \'a\') (\'c\', \'b\')","solution":"import itertools def print_permutations(s, k): Prints all k-length permutations of the characters in the string s in lexicographic order. permutations_list = sorted(itertools.permutations(s, k)) for perm in permutations_list: print(perm)"},{"question":"Lambda Inc. has hired you to track the rainfall in their experimental fields. They have provided you with a matrix `R` of dimensions `nxm`, where `Ri, j` represents the amount of rainfall in the ith row and the jth column. Lambda Inc. wants to investigate the rainfall data efficiently. To do this, they allow you to perform the following queries: 1. \\"Calculate the sum of rainfall in the submatrix from (iL, jL) to (iR, jR)\\" Additionally, you can ask not more than `Q` queries. The goal is to determine specific statistics about the rainfall distribution as accurately as possible using these queries. Your task is to answer each of Lambda Inc.\'s questions after the queries have been performed. The questions are about the sum of rainfall in specific submatrices. **Input** 1. The first line contains three space-separated integers `n`, `m` and `Q`, denoting the size of the matrix and the maximum number of queries. 2. The next `Q` lines describe the queries, each containing four space-separated integers `iL`, `iR`, `jL`, and `jR`. 3. The last line contains an integer `k` indicating the number of questions from Lambda Inc. 4. The next `k` lines each contain four space-separated integers, representing the submatrix (iL, iR, jL, jR) for which the rainfall sum is to be computed. **Output** - For each question, output one line containing the sum of rainfall in the given submatrix. **Constraints** - 1 ≤ n, m ≤ 500 - 1 ≤ Q ≤ 10^4 - 1 ≤ iL ≤ iR ≤ n - 1 ≤ jL ≤ jR ≤ m - 0 ≤ Ri, j ≤ 250 - 1 ≤ k ≤ 100 **Example** **Input:** ``` 3 3 5 1 2 1 3 1 3 1 1 2 3 1 2 1 1 2 2 2 3 3 3 2 1 2 1 3 1 3 1 1 ``` **Output:** ``` 18 12 ``` **Explanation:** * Given matrix R: ``` R = [ [ 9, 5, 4 ], [ 2, 6, 7 ], [ 1, 9, 3 ] ] ``` * Queries: 1. Sum from (1, 1) to (2, 3) = 9 + 5 + 4 + 2 + 6 + 7 = 33 2. Sum from (1, 1) to (3, 1) = 9 + 2 + 1 = 12 3. Sum from (2, 1) to (3, 2) = 2 + 6 + 1 + 9 = 18 4. Sum from (1, 2) to (1, 2) = 6 5. Sum from (2, 3) to (3, 3) = 3 + 7 = 10 * Questions: 1. Sum from (1, 2) to (1, 3) = 5 + 4 + 6 = 18 2. Sum from (1, 3) to (1, 1) = 9 + 5 + 4 - 5 - 4 = 12","solution":"def preprocess_sum_matrix(n, m, R): # Create prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n+1): for j in range(1, m+1): prefix_sum[i][j] = R[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] return prefix_sum def compute_submatrix_sum(prefix_sum, iL, iR, jL, jR): # Calculate sum for the submatrix using the prefix sum matrix return ( prefix_sum[iR][jR] - prefix_sum[iL-1][jR] - prefix_sum[iR][jL-1] + prefix_sum[iL-1][jL-1] ) def solve_rainfall_queries(n, m, R, queries, questions): results = [] # Preprocess the matrix to get the prefix sum matrix prefix_sum = preprocess_sum_matrix(n, m, R) # Process each question for question in questions: iL, iR, jL, jR = question result = compute_submatrix_sum(prefix_sum, iL, iR, jL, jR) results.append(result) return results # Given input data n, m, q = 3, 3, 5 rainfall_matrix = [ [9, 5, 4], [2, 6, 7], [1, 9, 3] ] queries = [ (1, 2, 1, 3), (1, 3, 1, 1), (2, 3, 1, 2), (1, 1, 2, 2), (2, 3, 3, 3) ] questions = [ (1, 2, 1, 3), (1, 3, 1, 1) ] # Execute the function output = solve_rainfall_queries(n, m, rainfall_matrix, queries, questions) print(output)"},{"question":"A company is organizing a coding competition and they have N participants, each with a unique ID ranging from 1 to N. The competition consists of several rounds and in each round, every participant will receive a certain number of points. At the end of the competition, the participant with the highest total score will be declared the winner. There is a possibility that there could be ties in the total scores. Write a function to determine the ID(s) of the participant(s) with the highest score. Input: - First line contains the value of N (1 ≤ N ≤ 1000) and M (1 ≤ M ≤ 10,000), the number of participants and the number of rounds, respectively. - The next M lines contain N integers. The i-th line denotes the points received by each participant in the i-th round. Output: Print the ID(s) of the participant(s) with the highest total score in ascending order, each on a new line. Sample Input: 3 4 10 15 20 5 10 15 20 10 10 5 15 25 Sample Output: 3 Explanation: - Participant 1: 10 + 5 + 20 + 5 = 40 - Participant 2: 15 + 10 + 10 + 15 = 50 - Participant 3: 20 + 15 + 10 + 25 = 70 Participant 3 has the highest total score of 70.","solution":"def find_winners(N, M, scores): Determine the participant(s) with the highest total score. Args: N (int): The number of participants. M (int): The number of rounds. scores (list of list of int): The scores of participants for each round. Returns: list of int: The ID(s) of the participant(s) with the highest total score. total_scores = [0] * N # Calculate total scores for each participant for round_scores in scores: for i in range(N): total_scores[i] += round_scores[i] # Find the highest score max_score = max(total_scores) # Find all participants with the max score winners = [i + 1 for i in range(N) if total_scores[i] == max_score] return winners # Example usage if __name__ == \\"__main__\\": N = 3 M = 4 scores = [ [10, 15, 20], [5, 10, 15], [20, 10, 10], [5, 15, 25] ] print(find_winners(N, M, scores)) # Output: [3]"},{"question":"**Problem: Warehouse Inventory Management** A warehouse needs an optimized system to keep track of its inventory. The warehouse is represented as a grid of cells, where each cell can store a certain number of goods. The warehouse manager needs help in finding the most efficient way to move a specific number of goods from one cell to another. You are given a grid with dimensions `m` x `m`. Each cell in the grid contains some number of goods, represented by a non-negative integer. You are also given a list of `q` queries. Each query specifies two cells in the grid, (r1, c1) and (r2, c2), and the number of goods to be moved from (r1, c1) to (r2, c2). The task is to provide a mechanism that efficiently updates the grid after each query. For each query, if the number of goods to be moved is greater than the number of goods available in the starting cell, no movement should occur, and an \\"Insufficient goods\\" message should be returned. Also, after processing each query, the system should maintain and be able to return the total number of goods in the warehouse. # Input - The first line contains two integers `m` (1 ≤ m ≤ 100) and `q` (1 ≤ q ≤ 100), representing the dimensions of the grid and the number of queries, respectively. - The next `m` lines each contain `m` integers, representing the initial number of goods in each cell of the grid. - The following `q` lines each contain four integers `r1`, `c1`, `r2`, `c2`, and an integer `x`, representing a query where `x` goods are moved from cell (r1, c1) to cell (r2, c2). Note that `1 ≤ r1, r2 ≤ m`, `1 ≤ c1, c2 ≤ m`, and `0 ≤ x ≤ 1000`. # Output For each query, output either: - \\"Goods moved\\" (if the goods are successfully moved) - \\"Insufficient goods\\" (if there are not enough goods to move) After processing all queries, output the total number of goods in the warehouse. # Example Input ``` 3 2 10 15 5 7 6 8 9 4 2 1 1 2 3 10 3 3 2 2 3 ``` Output ``` Goods moved Goods moved 66 ``` # Explanation Initially, the warehouse grid is: ``` 10 15 5 7 6 8 9 4 2 ``` - For the first query, moving 10 goods from (1,1) to (2,3): - Cell (1,1) had 10 goods, so the movement is possible. - The new grid will be: ``` 0 15 5 7 6 18 9 4 2 ``` - Output: \\"Goods moved\\" - For the second query, moving 3 goods from (3,3) to (2,2): - Cell (3,3) had 2 goods. This is insufficient for the move. - Output: \\"Insufficient goods\\" Finally, the total number of goods in the warehouse is 66. You need to implement the process of reading input, handling queries, and ensuring that the total goods count is updated accurately.","solution":"def process_warehouse(m, q, grid, queries): results = [] for query in queries: r1, c1, r2, c2, x = query if grid[r1-1][c1-1] >= x: grid[r1-1][c1-1] -= x grid[r2-1][c2-1] += x results.append(\\"Goods moved\\") else: results.append(\\"Insufficient goods\\") total_goods = sum(sum(row) for row in grid) results.append(total_goods) return results"},{"question":"You are given an array of integers `nums` which is sorted in non-decreasing order, and an integer `target`. Determine the starting and ending position of a given `target` value. If `target` is not found in the array, return `[-1, -1]`. Example 1: Input: nums = [5,7,7,8,8,10], target = 8 Output: [3,4] Example 2: Input: nums = [5,7,7,8,8,10], target = 6 Output: [-1, -1] Example 3: Input: nums = [], target = 0 Output: [-1, -1] Constraints: - 0 <= nums.length <= 10^5 - -10^9 <= nums[i] <= 10^9 - nums is sorted in non-decreasing order. - -10^9 <= target <= 10^9","solution":"def search_range(nums, target): Returns the starting and ending position of a given target value in a sorted array of integers nums. If target is not found, returns [-1, -1]. def binary_search_left(nums, target): left, right = 0, len(nums) while left < right: mid = (left + right) // 2 if nums[mid] < target: left = mid + 1 else: right = mid return left def binary_search_right(nums, target): left, right = 0, len(nums) while left < right: mid = (left + right) // 2 if nums[mid] <= target: left = mid + 1 else: right = mid return left start = binary_search_left(nums, target) end = binary_search_right(nums, target) - 1 if start <= end < len(nums) and nums[start] == target and nums[end] == target: return [start, end] else: return [-1, -1]"},{"question":"A bookseller wants to manage his collection of books more efficiently. Each book is categorized by its genre, and some genres have more books than others. The bookseller needs to organize the genres and ensure that there are no more than a certain number of books in each genre. If a genre exceeds this limit, the excess books should be discarded. # Genres and Book Limit Genres are represented by numbers, `1 to 10`. The maximum allowable number of books per genre is given as an input. # Book Collection The book collection is represented as a 1D array where each element is a genre number. For example, `[1, 3, 3, 2, 1, 5, 6, 1, 3, 2]`. # Task Write a function that organizes the book collection based on the given limit and returns the organized collection. The INPUT will be: 1. A list of integers representing the books: `[1, 3, 3, 2, 1, 5, 6, 1, 3, 2]`. 2. An integer representing the maximum number of books per genre: `2`. The OUTPUT should be a list representing the organized collection with no genre exceeding the given limit: `[1, 3, 3, 2, 1, 5, 6, 3, 2]`. # Conditions to Consider: 1. Books that exceed the limit for their genre should be discarded. 2. The order of books in the organized collection should be the same as in the input list. 3. If a genre has been exceeded, any additional books of that genre in the input should not be included in the output. # Example Given the following input: - Books: `[1, 3, 3, 2, 1, 5, 6, 1, 3, 2, 3, 6, 1]` - Limit: `2` The function should return: - Organized Collection: `[1, 3, 3, 2, 1, 5, 6, 2]` The books `3` after the 6th index and the last 1 are discarded as they exceed the limit of 2.","solution":"def organize_books(books, limit): Organizes the book collection based on the given limit per genre. Parameters: books (list): A list of integers representing the books. limit (int): An integer representing the maximum number of books per genre. Returns: list: A list representing the organized collection with no genre exceeding the given limit. genre_count = {i: 0 for i in range(1, 11)} organized_books = [] for book in books: if genre_count[book] < limit: organized_books.append(book) genre_count[book] += 1 return organized_books"},{"question":"Alice likes exploring new places and has recently discovered a grid-based dungeon game. The dungeon is represented by a grid of size NxN where each cell can either be free (denoted by \'.\') or have an obstacle (denoted by \'#\'). Alice starts at the top-left corner (0,0) and aims to reach the bottom-right corner (N-1,N-1). Alice can move one step at a time in either of the four directions: up, down, left, or right, but cannot move through obstacles. Alice wants to know the minimum number of steps required to reach the bottom-right corner, but if it is impossible to do so, she should output -1. Help Alice by writing a program to find the minimum number of steps. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - For each test case: - The first line contains an integer N denoting the size of the grid. - Each of the next N lines contains a string of length N representing the dungeon grid. -----Output----- - For each test case, output a single line containing the minimum number of steps required to reach the bottom-right corner, or -1 if it is impossible. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 -----Example----- Input: 2 3 ... .#. ... 4 .... .. .#.. .... Output: 4 6 -----Explanation----- Example case 1: Alice can move along the path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) with a total of 4 steps. Example case 2: Alice can move along the path (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) with a total of 6 steps.","solution":"from collections import deque def min_steps_to_reach_end(N, grid): if grid[0][0] == \'#\' or grid[N-1][N-1] == \'#\': return -1 # If start or end is an obstacle, return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (x, y, step_count) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() if x == N-1 and y == N-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) visited.add((nx, ny)) return -1 # If no path is found def solve_dungeon_problem(T, cases): results = [] for case in cases: N = case[0] grid = case[1] result = min_steps_to_reach_end(N, grid) results.append(result) return results"},{"question":"Create a program that will schedule and manage events. You have to implement the `EventScheduler` class, which allows the following operations: - `schedule_event(date, description)`: Schedules a new event on the specified date with the given description. If there is already an event on that date, append the description to the existing event separated by a semicolon. - `cancel_event(date)`: Cancels the event on the specified date. If there is no event on that date, raise a `ValueError` with the message \\"No event to cancel\\". - `view_event(date)`: Returns the event description on the specified date. If there is no event on that date, return \\"No event scheduled\\". - `list_events()`: Returns a list of all scheduled events in the format `[(date1, description1), (date2, description2), ... ]`, ordered by date in ascending order. Specifications * The date is represented as a string in the format `YYYY-MM-DD`. * The description is a string that can contain alphanumeric characters and spaces. * The scheduler should handle multiple events on different dates. Example ```python scheduler = EventScheduler() scheduler.schedule_event(\'2024-12-25\', \'Christmas Party\') scheduler.schedule_event(\'2025-01-01\', \'New Year Celebration\') scheduler.schedule_event(\'2024-12-25\', \'Gift Exchange\') print(scheduler.view_event(\'2024-12-25\')) # \\"Christmas Party; Gift Exchange\\" print(scheduler.view_event(\'2025-01-01\')) # \\"New Year Celebration\\" print(scheduler.view_event(\'2024-11-22\')) # \\"No event scheduled\\" scheduler.cancel_event(\'2024-12-25\') print(scheduler.view_event(\'2024-12-25\')) # \\"No event scheduled\\" print(scheduler.list_events()) # [(\'2025-01-01\', \'New Year Celebration\')] ```","solution":"class EventScheduler: def __init__(self): # Initialize an empty dictionary to store events self.events = {} def schedule_event(self, date, description): Schedules a new event on the specified date with the given description. If there is already an event on that date, append the description to the existing event. if date in self.events: self.events[date] += f\\"; {description}\\" else: self.events[date] = description def cancel_event(self, date): Cancels the event on the specified date. If there is no event on that date, raise a `ValueError`. if date in self.events: del self.events[date] else: raise ValueError(\\"No event to cancel\\") def view_event(self, date): Returns the event description on the specified date. If there is no event on that date, return \\"No event scheduled\\". return self.events.get(date, \\"No event scheduled\\") def list_events(self): Returns a list of all scheduled events ordered by date in ascending order. return sorted(self.events.items())"},{"question":"You are given a grid of NxM cells where some cells are blocked and others are open. The grid represents a field with blocked cells that cannot be passed through and open cells that can be traveled on. You are required to find the shortest path from the top-left corner of the grid (0,0) to the bottom-right corner (N-1,M-1). Movement is allowed only in four directions: up, down, left, and right. If there is no possible path from (0,0) to (N-1,M-1), output -1. -----Input----- The first line of the input contains two integers, N and M, the number of rows and columns in the grid, respectively. The next N lines contain M space-separated integers each, representing the grid where 0 indicates an open cell and 1 indicates a blocked cell. -----Output----- Output a single integer: the length of the shortest path from (0,0) to (N-1,M-1) if such a path exists, otherwise output -1. -----Constraints----- 1 ≤ N, M ≤ 1000 The grid will always have at least one open cell at (0,0) and (N-1,M-1). -----Example----- Input: 5 5 0 0 0 0 1 1 1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 Output: 9 Explanation: The shortest path from the top-left corner to the bottom-right corner in the given grid is of length 9. Here\'s one of the paths: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 3) -> (2, 4) -> (3, 4) -> (4, 4)","solution":"from collections import deque def shortest_path(grid): if grid[0][0] == 1 or grid[-1][-1] == 1: return -1 N = len(grid) M = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(0, 0, 1)]) # (row, col, current_length) visited = set((0, 0)) while queue: row, col, length = queue.popleft() if row == N-1 and col == M-1: return length for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < M and (new_row, new_col) not in visited and grid[new_row][new_col] == 0: queue.append((new_row, new_col, length + 1)) visited.add((new_row, new_col)) return -1"},{"question":"You are given a list of integers, and you need to divide this list into two non-empty subsets such that the absolute difference between the sums of the elements in those subsets is minimized. Write a function that returns the minimum possible absolute difference. # Input: - The first line contains an integer T, denoting the number of test cases. - The first line of each test case contains an integer n, the size of the list. - The second line contains n integers, the elements of the list. # Output: For each test case, output a single integer representing the minimum possible absolute difference. # Constraints: - 1 ≤ T ≤ 10 - 2 ≤ n ≤ 20 - 1 ≤ elements of the list ≤ 1000 # Examples: Example 1: Input: ``` 2 3 1 6 11 4 1 2 3 9 ``` Output: ``` 4 3 ``` Example 2: Input: ``` 1 5 3 1 4 2 2 ``` Output: ``` 0 ``` # Notes: - In the first example, the list `[1, 6, 11]` can be divided into `[1,11]` and `[6]` with sums 12 and 6 respectively, giving an absolute difference of 6. Another possible division is `[1, 6]` and `[11]` with sums 7 and 11, giving an absolute difference of 4 which is the minimum. - In the second example, the list `[1, 2, 3, 9]` can be divided into `[1, 2, 3]` and `[9]` with sums 6 and 9 respectively, giving an absolute difference of 3. - In the third example, the list `[3, 1, 4, 2, 2]` can be divided into `[3, 1, 2]` and `[4, 2]` with sums 6 and 6 respectively, giving an absolute difference of 0 which is the minimum possible difference.","solution":"from itertools import combinations def minimum_difference_partition(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] elements = test_cases[i][1] total_sum = sum(elements) min_diff = float(\'inf\') # Generate all possible subsets for r in range(1, n): for subset in combinations(elements, r): subset_sum = sum(subset) diff = abs(total_sum - 2 * subset_sum) min_diff = min(min_diff, diff) results.append(min_diff) return results"},{"question":"Complete the function that counts the number of consonants in the given string and returns the count. Note - Consider consonants to be all alphabetic characters except `a`, `e`, `i`, `o`, `u`, both uppercase and lowercase. - Ignore any non-alphabetic characters present in the string. Examples ``` countConsonants(\\"Hello World!\\") returns 7 countConsonants(\\"This is a test.\\") returns 6 countConsonants(\\"AEIOU aeioU\\") returns 0 countConsonants(\\"12345!\\") returns 0 countConsonants(\\"Coding is fun!\\") returns 7 ```","solution":"def countConsonants(s): Returns the number of consonants in the given string. consonants = \\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\\" return sum(1 for char in s if char in consonants)"},{"question":"# Fibonacci Sequence Write a program that calculates the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0 F(1) = 1 F(n) = F(n-1) + F(n-2) for n > 1 Make sure your program can efficiently handle large values of n. # Example: fibonacci(0) = 0 fibonacci(1) = 1 fibonacci(7) = 13 fibonacci(10) = 55 Write a program that returns the nth Fibonacci number.","solution":"def fibonacci(n): Calculates the nth Fibonacci number using an iterative approach. This method is efficient and can handle large values of n. :param n: Index in the Fibonacci sequence. :return: The nth Fibonacci number. if n < 0: raise ValueError(\\"Index cannot be negative\\") elif n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Write a function that takes an array of integers and a target integer as inputs and returns the indices of the two numbers that add up to the target. Assume that each input would have exactly one solution, and you may not use the same element twice. Example: ``` Input: [2, 7, 11, 15], 9 Output: [0, 1] Input: [3, 2, 4], 6 Output: [1, 2] Input: [3, 3], 6 Output: [0, 1] ```","solution":"def two_sum(nums, target): Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to target. num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i"},{"question":"On a rectangular grid, you are given a starting point (start_x, start_y) and a list of instructions. Each instruction is a character that signifies a direction to move from the current point: \'U\' (up), \'D\' (down), \'L\' (left), \'R\' (right). Calculate the final coordinates of the point after executing all instructions. Please note that the grid is infinite, meaning it extends indefinitely in all four directions, and the origin point (0, 0) can move negative. Return a tuple representing the final coordinates (end_x, end_y) after performing all the movements. # Example 1: Input: start_x = 0, start_y = 0, instructions = \\"UURLD\\" Output: (1, 2) Explanation: - Starting from (0, 0). - \'U\' moves to (0, 1). - Another \'U\' moves to (0, 2). - \'R\' moves to (1, 2). - \'L\' moves back to (0, 2). - \'D\' moves to (0, 1). - Hence, final position is (0, 1). # Example 2: Input: start_x = -2, start_y = 3, instructions = \\"RRDDLU\\" Output: (0, 3) Explanation: - Starting from (-2, 3). - \'R\' moves to (-1, 3). - Another \'R\' moves to (0, 3). - \'D\' moves to (0, 2). - Another \'D\' moves to (0, 1). - \'L\' moves to (-1, 1). - \'U\' moves to (-1, 2). - Hence, final position is (-1, 2). # Note: 1. The start_x and start_y will always be integer values. 2. The string instructions will only contain \'U\', \'D\', \'L\', \'R\' characters.","solution":"def final_position(start_x, start_y, instructions): Calculate the final coordinates after executing a series of movement instructions. Args: start_x (int): Starting x-coordinate start_y (int): Starting y-coordinate instructions (str): A string of movement instructions which can be \'U\', \'D\', \'L\', \'R\' Returns: tuple: Final coordinates (end_x, end_y) after performing all the movements x, y = start_x, start_y for instruction in instructions: if instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 elif instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 return (x, y)"},{"question":"A gardener wants to decorate his garden with a specific pattern of plants. He will plant flowers in a grid where the number of columns equals the row number for that row. Help the gardener by writing a program that generates and prints the pattern for him. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N, representing the number of rows in the garden grid. -----Output:----- For each test case, output the pattern for the garden grid. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 50 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- 1 22 1 22 333 1 22 333 4444 -----EXPLANATION:----- The output pattern is constructed from the numbers starting from 1, where each row consists of the row number repeated as many times as the row number.","solution":"def generate_garden_pattern(T, test_cases): Generates the garden pattern for T test cases. Parameters: T (int): Number of test cases. test_cases (list of int): List of integers representing the number of rows for each test case. Returns: list: A list of strings, each representing the garden pattern for a test case. result = [] for N in test_cases: pattern = [] for i in range(1, N + 1): pattern.append(str(i) * i) result.append(\'n\'.join(pattern)) return result"},{"question":"Consider a 2D grid of size n x n, initialized with zeros. You need to perform a series of operations where each operation increments the values of all cells in a given rectangle by 1. The rectangle is defined by its top-left and bottom-right corners. Write a function that takes the grid size n and a list of operations, and returns the grid after all operations have been performed. # Input - An integer n representing the size of the grid. - A list of operations. Each operation is represented as a list of four integers [x1, y1, x2, y2], where (x1, y1) is the top-left corner and (x2, y2) is the bottom-right corner of the rectangle. # Output - A 2D list representing the grid after performing all operations. # Example ```python def perform_operations(n, operations): # Your code here # Example 1: n = 3 operations = [[0, 0, 1, 1], [1, 1, 2, 2]] print(perform_operations(n, operations)) # Output: [[1, 1, 0], [1, 2, 1], [0, 1, 1]] # Example 2: n = 4 operations = [[1, 1, 3, 3], [0, 0, 2, 2], [2, 2, 3, 3]] print(perform_operations(n, operations)) # Output: [[1, 1, 1, 0], [1, 2, 2, 1], [1, 2, 3, 2], [0, 1, 2, 1]] ``` # Constraints - 1 <= n <= 100 - 1 <= len(operations) <= 1000 - 0 <= x1, y1, x2, y2 < n","solution":"def perform_operations(n, operations): # Initialize the grid with zeros grid = [[0] * n for _ in range(n)] # Perform each operation for x1, y1, x2, y2 in operations: for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): grid[i][j] += 1 return grid"},{"question":"You are given two arrays, `nums1` and `nums2`, of potentially different lengths. You need to merge these two arrays into a single array sorted in non-decreasing order and return the merged result. nums1 and nums2 contain only integers and fit within the range of a 32-bit signed integer. Examples: Example 1: Input: nums1 = [1, 3, 5] nums2 = [2, 4, 6] Output: [1, 2, 3, 4, 5, 6] Example 2: Input: nums1 = [5, 8] nums2 = [1, 2, 3, 7, 9] Output: [1, 2, 3, 5, 7, 8, 9] Note: 1. Do not use the built-in sort function. 2. The solution should have a time complexity of O(m + n), where m and n are the lengths of nums1 and nums2, respectively.","solution":"def merge_sorted_arrays(nums1, nums2): Merges two sorted arrays into one sorted array in non-decreasing order without using built-in sort functions. Parameters: nums1 (list): First sorted array. nums2 (list): Second sorted array. Returns: list: Merged sorted array. merged_array = [] i = 0 j = 0 # Merge the arrays until one of them is exhausted while i < len(nums1) and j < len(nums2): if nums1[i] < nums2[j]: merged_array.append(nums1[i]) i += 1 else: merged_array.append(nums2[j]) j += 1 # Add remaining elements of nums1, if any while i < len(nums1): merged_array.append(nums1[i]) i += 1 # Add remaining elements of nums2, if any while j < len(nums2): merged_array.append(nums2[j]) j += 1 return merged_array"},{"question":"You are given an N x N grid, where each cell contains a non-negative integer. Your task is to move from the top-left corner of the grid to the bottom-right corner, collecting numbers from the cells along the way to maximize the total sum. You are only allowed to move right or down at each step. Implement a function that will return the maximum sum you can collect following these rules. -----Constraints----- - 1 leq N leq 1000 - 0 leq grid[i][j] leq 10^5 -----Input----- Input is given from Standard Input in the following format: N grid_1_1 grid_1_2 ... grid_1_N grid_2_1 grid_2_2 ... grid_2_N ... grid_N_1 grid_N_2 ... grid_N_N -----Output----- Print the maximum sum you can collect. -----Sample Input----- 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 29 In this sample, the path that gives the maximum sum is: 1 -> 4 -> 7 -> 8 -> 9.","solution":"def max_path_sum(grid): n = len(grid) dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][n-1] # Reading input from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) grid = [] index = 1 for i in range(N): row = list(map(int, data[index:index + N])) grid.append(row) index += N print(max_path_sum(grid))"},{"question":"Given a square matrix and a target number, write a function to determine if the matrix contains the target number. If found, return its position as a tuple `(row, col)`. Otherwise, return `-1`. *Parameters*: `matrix` and `target` *Example input*: ``` matrix = [ [5, 12, 17, 21, 23], [15, 19, 22, 24, 27], [32, 36, 39, 40, 42], [45, 48, 50, 53, 55], [56, 60, 63, 65, 68] ] target = 39 ``` *Output*: `(2, 2)` # Constraints: - The matrix is sorted such that each row and column are in ascending order. - The matrix will have dimensions `n x n` where `1 <= n <= 100`. - The elements of the matrix will be distinct integers. # Notes: * If the target number exists in the matrix, return the position as tuple `(row, col)`. * If the target number does not exist in the matrix, return `-1`. ___ Examples: ``` matrix: --------------------------- | 1 | 4 | 7 | 11 | 15 | ============================= | 2 | 5 | 8 | 12 | 19 | ----------------------------- | 3 | 6 | 9 | 16 | 22 | ----------------------------- | 10 | 13 | 14 | 17 | 24 | ----------------------------- | 18 | 21 | 23 | 26 | 30 | ----------------------------- target: 16 // return (2, 3) - the position of 16 in the matrix. target: 20 // return -1 - 20 is not in the matrix. ```","solution":"def find_in_matrix(matrix, target): Finds the target number in the matrix and returns its position as a tuple (row, col). If not found, returns -1. n = len(matrix) if n == 0: return -1 for row in range(n): for col in range(n): if matrix[row][col] == target: return (row, col) return -1"},{"question":"You are given an array of integers representing the heights of buildings standing in a row. A building with a certain height provides a view of the horizon if there are no taller buildings to its right. Write a function `buildings_with_view` that takes a list of integers `heights` and returns the number of buildings that have a view of the horizon. Your function should have the following signature: `def buildings_with_view(heights: List[int]) -> int:` For example: - If the input heights are `[4, 3, 2, 1]`, all buildings have a view, so the output should be `4`. - If the input heights are `[1, 2, 3, 4]`, only the building with height `4` has a view, so the output should be `1`. - If the input heights are `[4, 3, 2, 3]`, the buildings with heights `4` and `3` (last one) have a view, so the output should be `2`.","solution":"def buildings_with_view(heights): Returns the number of buildings that have a view of the horizon. n = len(heights) if n == 0: return 0 max_height = heights[-1] view_count = 1 for i in range(n-2, -1, -1): if heights[i] > max_height: view_count += 1 max_height = heights[i] return view_count"},{"question":"Write a function `word_transformer(string, transformations)` that takes a string and a list of transformations, then applies each transformation to the string in order. Each transformation is represented as a tuple of the form (`old`, `new`), where the substring `old` in the string should be replaced with the substring `new`. For example, given the string `\\"hello world\\"` and the transformations `[(\'e\', \'3\'), (\'o\', \'0\'), (\'l\', \'1\')]`, the function should return `\\"h3110 w0r1d\\"` since: - `\'e\'` is replaced with `\'3\'` resulting in `\\"h3llo world\\"` - `\'o\'` is replaced with `\'0\'` resulting in `\\"h3ll0 w0rld\\"` - `\'l\'` is replaced with `\'1\'` resulting in `\\"h3110 w0r1d\\"` If there are no transformations to apply, the string should be returned unchanged. Constraints: - Each transformation is guaranteed to have non-empty strings for `old` and `new`. - The string input and the substrings for transformations may contain any characters, including spaces and punctuation. - Transformations are case-sensitive. - Do not use regular expressions for this task.","solution":"def word_transformer(string, transformations): Transforms the given string by applying a series of transformations. Each transformation is represented as a tuple (old, new), where the substring \'old\' in the string should be replaced with the substring \'new\'. :param string: The input string to be transformed. :param transformations: A list of tuples (old, new) representing transformations. :return: The transformed string. for old, new in transformations: string = string.replace(old, new) return string"},{"question":"Given an unsorted list of integers, implement the insertion sort algorithm to sort the list in ascending order. Your task is to return a list of snapshots after **each insertion** that results in a change of the initial list. You can read more about insertion sort here: https://en.wikipedia.org/wiki/Insertion_sort For example: ```python insertion_sort([4, 2, 8, 3]) ``` The algorithm works by iterating through the list, and for each element, it places it in its correct position within the part of the list that has already been sorted. Below are the snapshots for the provided example: - Initial list: [4, 2, 8, 3] - After the first change: [2, 4, 8, 3] (2 is inserted into its correct position) - After the second change: [2, 4, 8, 3] (no change as 8 is already in the correct position) - After the third change: [2, 3, 4, 8] (3 is inserted into its correct position) Thus, the return value should be: ```python [[2, 4, 8, 3], [2, 3, 4, 8]] ``` If the input list is already sorted, return an empty list as there would be no changes. Examples: ```python insertion_sort([1, 3, 2, 4]) # Should return [[1, 2, 3, 4]] insertion_sort([4, 3, 2, 1]) # Should return [[3, 4, 2, 1], [2, 3, 4, 1], [1, 2, 3, 4]] insertion_sort([1, 2, 3, 4]) # Should return [] ```","solution":"def insertion_sort(arr): Perform insertion sort on the input list and return a list of snapshots after each change. snapshots = [] for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key if j + 1 != i: # Only record a snapshot if there was a change snapshots.append(arr.copy()) return snapshots"},{"question":"# Task Given a sequence of integers, represent it as a single string that tells how many times each digit appears consecutively. For instance, the sequence `1122231` can be represented as \\"21321311\\", which means that digit `1` appears 2 times, digit `2` appears 3 times, and digit `3` appears 1 time. Implement a function that receives a list of integers as input and returns the corresponding string representation of the count of consecutive digits. # Example For `sequence = [1, 1, 2, 2, 2, 3, 1]`, the output should be `\\"21321311\\"`. # Input/Output - `[input]` integer list `sequence` A list of integers representing the sequence of digits. Each digit will be a positive integer between 1 and 9. Constraints: `1 ≤ sequence.length ≤ 1000` `1 ≤ sequence[i] ≤ 9` - `[output]` a string A string representing the count of consecutive digits in the input sequence.","solution":"def count_consecutive_digits(sequence): Return a string that represents the count of consecutive digits in the input sequence. if not sequence: return \'\' result = \'\' current_digit = sequence[0] current_count = 1 for digit in sequence[1:]: if digit == current_digit: current_count += 1 else: result += str(current_count) + str(current_digit) current_digit = digit current_count = 1 result += str(current_count) + str(current_digit) return result"},{"question":"A software development team is working on a new application which should support user authentication. As part of their implementation, they have chosen to use JSON Web Tokens (JWT) for this purpose. Each user, upon successful login, will receive a JWT token which includes their user ID, roles, and an expiration time. The structure of the token\'s payload is in JSON format: ```json { \\"user_id\\": \\"user123\\", \\"roles\\": [\\"admin\\", \\"editor\\"], \\"exp\\": 1672531199 } ``` The team needs a function that performs two tasks: 1. Validates whether a given JWT is expired. The expiration time, `exp`, is given as a Unix timestamp. 2. Checks if a user has a specific role and returns a message based on the result. Your task is to write a function `validate_jwt` that takes the following three arguments: 1. `token` - A dictionary representing the JWT payload. 2. `current_time` - An integer representing the current Unix timestamp at the time of function call. 3. `role` - A string representing the role to validate against the `roles` in the token. The function should return: - `\\"Token expired\\"` if the `current_time` is greater than or equal to the `exp` time in the token. - `\\"Role <role> is present\\"` if the role is present in the `roles` array within the token (replace `<role>` with the actual role being queried). - `\\"Role <role> is not present\\"` if the role is not in the `roles` array within the token (replace `<role>` with the actual role being queried). **Example:** ```python # Example 1 token = { \\"user_id\\": \\"user123\\", \\"roles\\": [\\"admin\\", \\"editor\\"], \\"exp\\": 1672531199 } current_time = 1672531200 role = \\"admin\\" validate_jwt(token, current_time, role) # Output: \\"Token expired\\" # Example 2 token = { \\"user_id\\": \\"user123\\", \\"roles\\": [\\"admin\\", \\"editor\\"], \\"exp\\": 1672531199 } current_time = 1672531100 role = \\"admin\\" validate_jwt(token, current_time, role) # Output: \\"Role admin is present\\" # Example 3 token = { \\"user_id\\": \\"user123\\", \\"roles\\": [\\"admin\\", \\"editor\\"], \\"exp\\": 1672531199 } current_time = 1672531100 role = \\"viewer\\" validate_jwt(token, current_time, role) # Output: \\"Role viewer is not present\\" ``` Implement the `validate_jwt` function as described.","solution":"def validate_jwt(token, current_time, role): Validates JWT for expiration and role presence. Args: token (dict): The JWT payload. current_time (int): The current Unix timestamp. role (str): The role to validate against the token\'s roles. Returns: str: The validation result as a message. if current_time >= token[\\"exp\\"]: return \\"Token expired\\" if role in token[\\"roles\\"]: return f\\"Role {role} is present\\" else: return f\\"Role {role} is not present\\""},{"question":"# Task Alex wants to create a path in a grid form to navigate from the top left corner to the bottom right corner. The grid is represented by a 2D list `grid` of size `m x n`, where each cell contains an integer representing the cost of stepping onto that cell. Alex can only move right or down at each step. Define a function `min_cost_path(m, n, grid)` that calculates the minimum cost required to reach the bottom right corner from the top left corner of the grid. Function signature ```python def min_cost_path(m: int, n: int, grid: List[List[int]]) -> int: ``` Input - `m`: an integer representing the number of rows in the grid (1 ≤ m ≤ 100) - `n`: an integer representing the number of columns in the grid (1 ≤ n ≤ 100) - `grid`: a list of lists representing the grid where each element is an integer (0 ≤ grid[i][j] ≤ 1000) Output - Return an integer representing the minimum cost to reach the bottom right corner from the top left corner of the grid. Example ```python m = 3 n = 3 grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The output should be `7`. The minimum cost path is `1 → 3 → 1 → 1 → 1` with a total cost of `7`. ```python m = 2 n = 2 grid = [ [1, 2], [1, 1] ] ``` The output should be `3`. The minimum cost path is `1 → 1 → 1` with a total cost of `3`.","solution":"def min_cost_path(m, n, grid): Calculates the minimum cost path from the top-left to the bottom-right corner of the grid. # Create a 2D list to keep track of the minimum cost to reach each cell dp = [[0] * n for _ in range(m)] # Initialize the cost for the top-left cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]"},{"question":"You have a collection of N books. Each book has a thickness represented by an integer. You need to place these books on a shelf in such a way that you maximize the height of the stack of books while adhering to a constraint on the total allowed thickness for any subset of books on the shelf. Given the total number of books N and an integer W representing the maximum total thickness allowed for any subset of books on the shelf, determine the maximum number of books that can be placed on the shelf without their total thickness exceeding W. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - The first line of each test case contains two space-separated integers N and W. - The next line contains N space-separated integers representing the thicknesses of the books. -----Output----- - For each test case, output a single line containing the answer for that test case, which is the maximum number of books that can be placed on the shelf without exceeding the total thickness W. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ W ≤ 106 - 1 ≤ thickness of each book ≤ 100 -----Subtasks----- -----Subtask #1 (20 points)----- - 1 ≤ N ≤ 100 -----Subtask #2 (80 points)----- - Original constraints -----Example----- Input: 3 5 10 1 2 3 4 5 4 7 3 1 6 1 6 15 5 3 8 2 7 4 Output: 4 3 4 -----Explanation----- Example case 1. The books can be selected as [1, 2, 3, 4] which sums to 10, or [1, 2, 3, 5], [1, 3, 4, 5], etc., but the maximum number of books picked is 4 which do not exceed the thickness W. Example case 2. The books can be selected as [3, 1, 1] which sums to 5 (≤ 7) resulting in maximum 3 books. Example case 3. The books can be selected as [3, 2, 4, 5, 1] which sums to 15. So, the maximum number of books is 4.","solution":"def max_books(N, W, thicknesses): Finds the maximum number of books that can be placed on the shelf such that their total thickness does not exceed W. Args: N (int): Total number of books. W (int): Maximum allowed total thickness. thicknesses (list): List of integers representing the thicknesses of the books. Returns: int: The maximum number of books that can be placed on the shelf. thicknesses.sort() # Sort books by their thicknesses total_thickness = 0 # Initialize total thickness book_count = 0 # Initialize book count for thickness in thicknesses: if total_thickness + thickness <= W: total_thickness += thickness # Add book to the shelf book_count += 1 # Increment book count else: break # Stop if the total thickness exceeds W return book_count def process_input(input_str): Processes the input string to extract test cases. Args: input_str (str): Multi-line input string. Returns: list of tuples: Each tuple contains (N, W, thicknesses). lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, W = map(int, lines[index].split()) index += 1 thicknesses = list(map(int, lines[index].split())) index += 1 test_cases.append((N, W, thicknesses)) return test_cases def main(input_str): Main function to process input and produce output for all test cases. Args: input_str (str): Multi-line input string. Returns: list of int: List of results for each test case. test_cases = process_input(input_str) results = [max_books(N, W, thicknesses) for N, W, thicknesses in test_cases] return results"},{"question":"Given a string that represents a scrambled sentence - where the order of characters in each word is jumbled, but words are separated by spaces - write a function `unscramble` that returns the sentence with the characters in each word sorted in alphabetical order while maintaining the word order. Function Signature ```python def unscramble(sentence: str) -> str: # Your code here ``` Input - A string `sentence` (1 <= len(sentence) <= 100) consisting of one or more words. - Words contain only lowercase English letters and are separated by single spaces. Output - Returns a string with each word\'s characters sorted in alphabetical order. Examples ```python assert unscramble(\\"hlleo wlrdo\\") == \\"ehllo dlorw\\" assert unscramble(\\"pytnohn is luaov\\") == \\"hnnopty is alouv\\" assert unscramble(\\"abc cba\\") == \\"abc abc\\" assert unscramble(\\"abcd dcba\\") == \\"abcd abcd\\" ``` Explanation For each word in the sentence: - Sort the characters in that word alphabetically. - Maintain the original position of each word in the sentence. - Return the newly formed sentence.","solution":"def unscramble(sentence: str) -> str: Returns the sentence with the characters in each word sorted in alphabetical order while maintaining the word order. words = sentence.split() sorted_words = [\'\'.join(sorted(word)) for word in words] return \' \'.join(sorted_words)"},{"question":"Given an array of target heights, find the minimum number of operations required to make all the heights equal. In one operation, you can choose to either increase or decrease the height of any element by 1. Note: Your task is to determine the minimum operations needed to equalize the heights. Example 1: Input: heights = [1, 5, 9] Output: 8 Explanation: One possible way to equalize is to make all heights equal to 5. Changing heights[0] from 1 to 5 requires 4 operations. Changing heights[1] from 9 to 5 requires 4 operations. Total operations: 4 + 4 = 8 Example 2: Input: heights = [4, 7, 4, 3] Output: 4 Explanation: One possible way to equalize is to make all heights equal to 4. Changing heights[1] from 7 to 4 requires 3 operations. Changing heights[3] from 3 to 4 requires 1 operation. Total operations: 3 + 1 = 4 Example 3: Input: heights = [10, 10, 10] Output: 0 Explanation: All elements are already equal, so no operations are required. Note: - 1 <= heights.length <= 30 - 1 <= heights[i] <= 100","solution":"def min_operations_to_equalize(heights): Returns the minimum number of operations required to make all the heights equal. median = sorted(heights)[len(heights) // 2] return sum(abs(h - median) for h in heights)"},{"question":"Write a function that takes a list of integers and returns a list consisting of only the distinct integers, while maintaining their original order of appearance. ```python unique_in_order([1, 2, 2, 3, 2, 1]) => [1, 2, 3] unique_in_order([5, 5, 4, 4, 4, 5]) => [5, 4] ```","solution":"def unique_in_order(lst): Returns a list of distinct integers while maintaining their original order of appearance. Args: lst (list): List of integers. Returns: list: List of distinct integers in their original order. seen = set() unique_list = [] for item in lst: if item not in seen: seen.add(item) unique_list.append(item) return unique_list"},{"question":"Write a function that takes a positive integer `n` and returns all prime numbers between 1 and `n` (inclusive) as a list. For example, if `n == 11`, the output should be: ``` [2, 3, 5, 7, 11] ``` P. S. Prime numbers are numbers greater than 1 that have no divisors other than 1 and themselves.","solution":"def primes_up_to(n): Returns all prime numbers between 1 and n (inclusive). if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num**0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"A binary tree is a hierarchical data structure in which each node has at most two children, referred to as the left child and the right child. A common problem involving binary trees is to determine the sum of the values of nodes at the deepest level in the tree. Write a function `deepestLevelSum` that, given the root node of a binary tree, returns the sum of the values of all nodes located at the deepest level. The tree nodes contain integer values. Here are the steps and constraints: 1. The function should return 0 if the tree is empty. 2. The function should traverse the tree using breadth-first search (BFS) to find the deepest level. 3. Then, calculate the sum of the node values at that level. Assume that: - You have a TreeNode class defined as follows: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` - You are also guaranteed that the tree contains only non-negative values. For example: ```python # Example 1: # Input: root = [1,2,3,4,5] # 1 # / # 2 3 # / # 4 5 # Output: 9 (The deepest level nodes are 4 and 5, and their sum is 9) # Example 2: # Input: root = [1,2,3,4,null,null,5,null,null,null,6] # 1 # / # 2 3 # / # 4 5 # # 6 # Output: 6 (The deepest level node is 6, and its sum is 6) ``` Implement the function: ```python def deepestLevelSum(root): # Your code here ```","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def deepestLevelSum(root): if not root: return 0 queue = deque([root]) while queue: level_sum = 0 level_size = len(queue) for _ in range(level_size): node = queue.popleft() level_sum += node.value if node.left: queue.append(node.left) if node.right: queue.append(node.right) return level_sum"},{"question":"During a major event at Coders\' Village, participants are required to perform a series of tasks, organized into levels. Each level must be completed before moving on to the next. Levels are delayed due to dependency rules that dictate which levels must precede others. Given the number of levels and their dependencies, determine the order in which the levels must be completed. If there are multiple valid orders, any will suffice. If it is not possible to complete all levels due to circular dependencies, return \\"impossible.\\" -----Input----- The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of levels, and M, the number of dependencies. Each of the next M lines contains two integers, U and V, meaning that level U must be completed before level V. -----Output----- For each test case, output a single line containing the levels in the order they should be completed, separated by spaces. If it is not possible to complete all levels, output \\"impossible.\\" -----Constraints---- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 2000 - 1 ≤ U, V ≤ 1000 -----Example----- Input: 2 4 4 1 2 2 3 3 4 4 2 3 2 1 3 3 2 Output: impossible 1 3 2 -----Explanation----- Example case 1. Levels 1, 2, 3, and 4 are given with dependencies forming a cycle, making it impossible to finish all levels. Example case 2. Levels 3 depend on 2, which depends on 1. An order like 1 3 2 satisfies the dependency rules.","solution":"from collections import deque, defaultdict def find_order(num_levels, dependencies): in_degree = {i: 0 for i in range(1, num_levels + 1)} graph = defaultdict(list) for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 queue = deque([node for node in in_degree if in_degree[node] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) if len(order) == num_levels: return \\" \\".join(map(str, order)) else: return \\"impossible\\" def order_levels(test_cases): results = [] for num_levels, num_dependencies, dependencies in test_cases: result = find_order(num_levels, dependencies) results.append(result) return results"},{"question":"Write a function that takes a string and an integer `k` as input, and returns the length of the longest substring that contains at most `k` distinct characters. **Example:** Given the string: ```plaintext \\"eceba\\" ``` and `k = 2`, the function should return `3`. The longest substring with at most 2 distinct characters is `\\"ece\\"`. The code would be called like so: ```python result = length_of_longest_substring_k_distinct(\\"eceba\\", 2) # result should == 3 ``` **Note:** You may assume that `k` is always at least 1 and the input string contains only lowercase English letters.","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring that contains at most k distinct characters. :param s: input string :param k: number of distinct characters allowed in the substring :return: length of the longest such substring if k == 0 or not s: return 0 n = len(s) left = 0 right = 0 char_count = {} max_len = 0 while right < n: char_count[s[right]] = char_count.get(s[right], 0) + 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"You are given a string consisting of uppercase English letters and an integer K. You need to determine if the string can be rearranged such that no two adjacent characters are the same, and if possible, find one such rearrangement. If it is not possible, return an empty string. Let\'s look at a few examples: * For the string \\"AABB\\" and K = 2, the possible rearrangement could be \\"ABAB\\". * For the string \\"AAAB\\" and K = 2, it is not possible to rearrange the letters to satisfy the condition, so return an empty string. Note: - The length of the string will be between 1 and 100. - K is guaranteed to be between 1 and the length of the string.","solution":"import heapq from collections import Counter def rearrange_string(s, k): Rearrange the characters of the string s such that the same characters are at least k distance apart. :param s: string consisting of uppercase English letters :param k: integer that indicates the minimum distance apart for the same chars :return: rearranged string or empty string if not possible if k == 1: return s # If k is 1, no rearrangement needed. counter = Counter(s) max_heap = [(-value, key) for key, value in counter.items()] heapq.heapify(max_heap) result = [] wait_queue = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) wait_queue.append((freq + 1, char)) if len(wait_queue) >= k: front = wait_queue.pop(0) if front[0] < 0: heapq.heappush(max_heap, front) return \'\'.join(result) if len(result) == len(s) else \'\'"},{"question":"Create a function that takes a list of strings and returns a dictionary where the keys are the strings and the values are the lengths of those strings. Example ```python [\\"apple\\", \\"banana\\", \\"cherry\\"] # should return {\\"apple\\": 5, \\"banana\\": 6, \\"cherry\\": 6} ```","solution":"def strings_to_length_dict(strings): Returns a dictionary where the keys are the strings from the input list and the values are the lengths of those strings. :param strings: List of strings :return: Dictionary with strings as keys and their lengths as values return {string: len(string) for string in strings}"},{"question":"A laptop store offers a variety of laptop models, each distinguished by its unique hardware specifications. You are given information about multiple laptop models and need to identify whether each model satisfies specific customer requirements. A laptop model is represented by a dictionary with key-value pairs of hardware components and their respective capabilities. A customer requirement is a dictionary specifying the minimum required capability of each hardware component. You need to evaluate whether each laptop model meets the customer requirements. -----Input----- The first line contains a single integer m (1 leq m leq 100) — the number of laptop models. Each of the next m lines contains a JSON object representing a laptop model, where the keys are hardware components (strings), and the values are their respective capabilities (positive integers). The next line contains a single JSON object representing the customer requirement, in the same format as the laptop models. -----Output----- Output m lines. In the i-th of them print \\"Eligible\\" if the i-th laptop model satisfies the customer requirement, otherwise, print \\"Ineligible\\". -----Example----- Input 3 {\\"CPU\\": 4, \\"RAM\\": 16, \\"Storage\\": 512, \\"GPU\\": 8} {\\"CPU\\": 6, \\"RAM\\": 8, \\"Storage\\": 256, \\"GPU\\": 4} {\\"CPU\\": 2, \\"RAM\\": 32, \\"Storage\\": 1024, \\"GPU\\": 2} {\\"CPU\\": 4, \\"RAM\\": 8, \\"Storage\\": 256} Output Eligible Eligible Ineligible -----Note----- In the first example, the customer requirement is that the CPU should be at least 4, the RAM should be at least 8, and the Storage should be at least 256. - The first laptop model meets all these criteria since its CPU is 4, RAM is 16, and Storage is 512. - The second laptop model also satisfies the criteria with its CPU 6, RAM 8, and Storage 256. - The third laptop model fails to meet the requirement since its CPU is 2, which is less than the required 4 CPU.","solution":"def check_laptops_eligibility(laptops, requirement): Checks whether each laptop model satisfies the customer requirement. Args: laptops (list of dict): A list of dictionaries where each dictionary represents a laptop model. requirement (dict): A dictionary representing the customer requirements. Returns: list of str: A list containing \\"Eligible\\" or \\"Ineligible\\" for each laptop model. results = [] for laptop in laptops: eligible = True for key, value in requirement.items(): if key in laptop: if laptop[key] < value: eligible = False break else: eligible = False break if eligible: results.append(\\"Eligible\\") else: results.append(\\"Ineligible\\") return results"},{"question":"Write a function that finds the median of a list of integers. The list will always contain an odd number of elements. The median is the middle value when the numbers are arranged in sorted order. Examples: ```code [1, 3, 4, 2, 5] => 3 [7, 1, 5, 3, 9] => 5 [99, -2, 56, 100, 4] => 56 ```","solution":"def find_median(numbers): Returns the median of a list of integers. The list will always contain an odd number of elements. sorted_numbers = sorted(numbers) middle_index = len(sorted_numbers) // 2 return sorted_numbers[middle_index]"},{"question":"A courier company handles sorting packages into three different categories based on their weight: `light`, `medium`, and `heavy`. Each package has a weight that falls into one of these three categories. You are given a list of package weights and your task is to write a function that determines the number of packages in each category. - `light`: Less than 5kg - `medium`: Between 5kg and 10kg (inclusive) - `heavy`: Greater than 10kg Implement a function that takes a list of package weights and returns a list of three integers representing the count of packages in each category, in the order of `light`, `medium`, and `heavy`. # Examples Python ```python >>> count_packages([3, 7, 12, 1, 5, 9, 11]) [2, 4, 1] ``` Elixir *Note: Ensure that the elements in the returned list follow the order [light, medium, heavy].* # Assumptions 1. You can assume that all input weights are positive integers. 2. The function should handle lists of weights with up to `100` elements. Python ```python # Function signature: def count_packages(weights: List[int]) -> List[int] ```","solution":"from typing import List def count_packages(weights: List[int]) -> List[int]: light, medium, heavy = 0, 0, 0 for weight in weights: if weight < 5: light += 1 elif 5 <= weight <= 10: medium += 1 else: heavy += 1 return [light, medium, heavy]"},{"question":"Write a function `intToRoman(num: int) -> str` that converts an integer to a Roman numeral. Your function should consider numbers between 1 and 3999 inclusive. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. Here are the rules for each numeral: ``` Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`; instead, the number four is written as `IV`. There are six instances where subtraction is used: - `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. - `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. - `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900. Examples: - `intToRoman(3)` should return \\"III\\" - `intToRoman(58)` should return \\"LVIII\\" - `intToRoman(1994)` should return \\"MCMXCIV\\" You can safely assume that the input will always be a valid number in the range from 1 to 3999.","solution":"def intToRoman(num: int) -> str: Convert an integer to a Roman numeral. Parameters: num (int): The integer to convert (1 <= num <= 3999). Returns: str: The Roman numeral representation of the integer. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \\"\\" i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"You are tasked with writing a function that takes an integer array (arr) and an integer target as inputs and returns the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Here is an example to demonstrate the problem: Input: arr = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because arr[0] + arr[1] == 9, the function should return [0, 1].","solution":"def two_sum(arr, target): Returns the indices of the two numbers such that they add up to target. Parameters: arr (list): The list of integers. target (int): The target sum. Returns: list: List containing the indices of the two numbers adding up to the target. num_to_index = {} for index, num in enumerate(arr): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"A company has a factory that produces widgets. Each widget passes through a series of machines before it is completed. However, not all widgets require the same sequence of machines. Each machine can carry out its task in a certain amount of time. Management wants to figure out the minimum total time required for different widgets to complete their respective sequences of machines. Each widget has a specific order of machines it needs to pass through, and each machine takes a unique amount of time to complete its task. Write a program to determine the minimum total time required for each widget to be fully processed through their sequences of machines. -----Input----- The first line contains w, the number of widgets (1 <= w <= 500). Then w lines follow, each line describing a widget. Each widget is described as follows: First, an integer m (1 <= m <= 100) indicating the number of machines that the widget must pass through. Then m pairs of integers follow, where each pair consists of a machine id (1 <= machine id <= 1000) and the corresponding time in milliseconds (1 <= time <= 10000) that the machine takes to process the widget. -----Output----- For each widget, print a single line containing the minimum total time required for that widget to be fully processed. -----Example----- Input: 2 3 1 500 2 1000 3 1500 2 4 2000 5 3000 Output: 3000 5000 -----Output details----- In the first test case, the widget needs to pass through machines 1, 2, and 3, taking 500, 1000, and 1500 milliseconds respectively, for a total of 3000 milliseconds. In the second test case, the widget needs to pass through machines 4 and 5, taking 2000 and 3000 milliseconds respectively, for a total of 5000 milliseconds.","solution":"def min_total_time(widgets): Determines the minimum total time required for each widget to be fully processed through their sequences of machines. Parameters: widgets (list): A list where each element is a list containing the sequence of (machine_id, time) pairs for a widget. Returns: list: A list containing the minimum total time for each widget. result = [] for widget in widgets: total_time = sum(time for machine_id, time in widget) result.append(total_time) return result"},{"question":"Write a function that takes a list of integers, filters out the odd numbers, and returns a new list with the squares of the remaining even numbers. ``` Input: [1, 2, 3, 4, 5, 6] Output: [4, 16, 36] ```","solution":"def square_even_numbers(nums): Takes a list of integers, filters out the odd numbers, and returns a new list with the squares of the remaining even numbers. Args: nums (list): List of integers Returns: list: List of squares of even numbers return [num ** 2 for num in nums if num % 2 == 0]"},{"question":"**Write a function named `wordFrequency` that takes a string sentence as input and returns a dictionary with each unique word as keys and their frequency of occurrence as values. Words are defined as sequences of alphanumeric characters, and the function should be case insensitive, treating \\"The\\" and \\"the\\" as the same word.** Example: ```python wordFrequency(\\"The quick brown fox jumps over the lazy dog. The fox was quick.\\") ``` Output: ```python { \'the\': 3, \'quick\': 2, \'brown\': 1, \'fox\': 2, \'jumps\': 1, \'over\': 1, \'lazy\': 1, \'dog\': 1, \'was\': 1 } ```","solution":"import re from collections import defaultdict def wordFrequency(sentence): Returns a dictionary with each word as keys and their frequency of occurrence as values. The function is case insensitive. # Convert to lowercase sentence = sentence.lower() # Find all words using regex words = re.findall(r\'bw+b\', sentence) # Create a default dictionary to store word frequencies frequency_dict = defaultdict(int) # Count frequencies for word in words: frequency_dict[word] += 1 return dict(frequency_dict)"},{"question":"The gym trainer has come up with a new exercise pattern and he needs your help to synchronize it with a timer. The pattern involves a sequence of steps that are repeated in a particular fashion. Given a number N, the goal is to generate the exercise pattern. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the pattern as specified. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 -----Sample Input:----- 2 2 3 -----Sample Output:----- AB ABBA AB CBBA CAD -----EXPLANATION:----- No need, else the pattern can be decoded easily.","solution":"def generate_pattern(N): Generates the exercise pattern based on input number N start_char = \'A\' end_char = chr(ord(start_char) + N - 1) pattern = [] for i in range(N): part = [] # Add the initial increasing part part.extend([chr(ord(start_char) + j) for j in range(i + 1)]) # Add the decreasing part part.extend([chr(ord(start_char) + j) for j in range(i + 1)][::-1][1:]) pattern.append(\'\'.join(part)) return pattern def solve_exercise_patterns(test_cases): results = [] for N in test_cases: results.extend(generate_pattern(N)) return results"},{"question":"You are given an array of integers nums, where each element represents a stone\'s weight. You want to split the stones into two groups such that the absolute difference between the sum of weights in the two groups is minimized. Return the minimum possible difference between the sum of the weights of the two groups. Example 1: Input: nums = [2,7,4,1,8,1] Output: 1 Explanation: The stones can be split into two groups: [2,4,1,1] and [7,8]. The sum of weights in the first group is 8, and the sum of weights in the second group is 15. The difference is |8 - 15| = 7. By re-arranging the stones into groups [2,1,8] and [7,4,1], the sums are 11 and 12 respectively, with a difference of |11 - 12| = 1. Example 2: Input: nums = [31,26,33,21,40] Output: 5 Explanation: The stones can be split into two groups: [31,40] and [26,33,21]. The sum of weights in the first group is 71, and the sum of weights in the second group is 80. The difference is |71 - 80| = 9. By re-arranging the stones into groups [26,31,21] and [40,33], the sums are 78 and 73 respectively, with a difference of |78 - 73| = 5. Note: 1 <= nums.length <= 30 1 <= nums[i] <= 100","solution":"def minimumDifference(nums): total_sum = sum(nums) n = len(nums) dp = [0] * (total_sum // 2 + 1) for num in nums: for i in range(total_sum // 2, num - 1, -1): dp[i] = max(dp[i], dp[i - num] + num) sum1 = dp[total_sum // 2] sum2 = total_sum - sum1 return abs(sum1 - sum2)"},{"question":"You are given an unsorted array of integers. Write a function `find_k_closest_numbers(arr, k, x)` that returns the `k` closest numbers to the integer `x` from the array. If there are multiple numbers with the same difference to `x`, prefer the smaller numbers. The result should be sorted in ascending order. Example: ```python find_k_closest_numbers([10, 15, 7, 3, 4], 3, 8) # Output: [7, 10, 4] find_k_closest_numbers([1, 2, 3, 4, 5], 4, 3) # Output: [1, 2, 3, 4] find_k_closest_numbers([10, 10, 10, 10, 10], 1, 5) # Output: [10] find_k_closest_numbers([1, 2, 3, 4, 5], 4, 6) # Output: [2, 3, 4, 5] ``` Function Signature: ```python def find_k_closest_numbers(arr: List[int], k: int, x: int) -> List[int]: pass ``` # Constraints: - `1 <= len(arr) <= 10^4` - `1 <= k <= len(arr)` - `-10^4 <= arr[i] <= 10^4` - `-10^4 <= x <= 10^4`","solution":"from typing import List def find_k_closest_numbers(arr: List[int], k: int, x: int) -> List[int]: # Sort the array based on the difference from x. If differences are equal, then sort by values sorted_arr = sorted(arr, key=lambda num: (abs(num - x), num)) # Take the first k elements from the sorted array return sorted(sorted_arr[:k])"},{"question":"In a computer network, nodes are connected by bidirectional edges. Each node has a unique identifier. A packet needs to be transmitted from one node to another, and it will pass through a series of intermediate nodes before reaching its destination. The nodes follow a specific routing protocol to ensure packets take the shortest path. Consider a graph with n nodes and m edges. Each edge has an associated non-negative weight indicating the time required to transmit a packet between the two connected nodes. Packets are to be transmitted from node s to node d. Write a program to determine the shortest transmission time from node s to node d. -----Input----- The first line of the input contains two integers n (2 le n le 100) and m (1 le m le 1000) — the number of nodes and edges in the network, respectively. Each of the next m lines contains three integers u, v, and w (1 le u, v le n, 0 le w le 1000) — indicating that there\'s a bidirectional edge between nodes u and v with transmission time w. The following line contains two integers s and d (1 le s, d le n) — the identifiers of the source and destination nodes. -----Output----- Print a single integer representing the shortest transmission time from s to d. If there is no path from s to d, print -1. -----Example----- Input 5 6 1 2 1 1 3 4 2 3 2 2 4 7 3 5 3 4 5 1 1 5 Output 6","solution":"import heapq def shortest_transmission_time(n, m, edges, s, d): Finds the shortest transmission time from node `s` to node `d` using Dijkstra\'s algorithm. # Create a graph representation graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Priority queue for Dijkstra\'s algorithm pq = [(0, s)] # Distance table, initialized to infinity distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 while pq: current_dist, current_node = heapq.heappop(pq) if current_node == d: return current_dist for neighbor, weight in graph[current_node]: distance = current_dist + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[d] == float(\'inf\') else distances[d]"},{"question":"Write a function that takes a string of alphabets (both uppercase and lowercase) and returns a new string where consecutive duplicate characters are removed and only the first occurrence is kept. The function should be case-sensitive. ```python remove_consecutive_duplicates(\\"aabbccdd\\") >>> \\"abcd\\" remove_consecutive_duplicates(\\"abABabAB\\") >>> \\"abABabAB\\" remove_consecutive_duplicates(\\"AAAaaaBBBccc\\") >>> \\"AaBc\\" ```","solution":"def remove_consecutive_duplicates(s): Removes consecutive duplicate characters from the given string `s`. It is case-sensitive. Parameters: s (str): Input string of alphabets. Returns: str: String with consecutive duplicates removed. if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return \'\'.join(result)"},{"question":"Write a function that accepts a string as an input and calculates a score based on the following criteria: - Vowels (\'a\', \'e\', \'i\', \'o\', \'u\') are worth 5 points each. - Consonants are worth 2 points each. - Digits (\'0\' to \'9\') are worth 3 points each. - Any other characters (including spaces and punctuation) are worth 0 points. The function should return the total score of the string. For example, the string \\"Hello, World! 123\\" would have a score of 32, calculated as follows: - \'H\', \'l\', \'l\', \'W\', \'r\', \'l\', \'d\' are consonants, and so contribute ( 2 times 7 = 14 ) points. - \'e\' and \'o\' (appearing twice) are vowels, and so contribute ( 5 times 3 = 15 ) points. - \'1\', \'2\', \'3\' are digits, and so contribute ( 3 times 3 = 9 ) points. - \',\', \' \', \'!\', all other characters contribute 0 points. Adding these up: 14 (consonants) + 15 (vowels) + 9 (digits) = 38 points total.","solution":"def calculate_score(input_string): Calculate the score of the input_string based on the criteria: - Vowels (\'a\', \'e\', \'i\', \'o\', \'u\') are worth 5 points each. - Consonants are worth 2 points each. - Digits (\'0\' to \'9\') are worth 3 points each. - Any other characters (including spaces and punctuation) are worth 0 points. vowels = set(\'aeiouAEIOU\') consonants = set(\'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\') digits = set(\'0123456789\') score = 0 for char in input_string: if char in vowels: score += 5 elif char in consonants: score += 2 elif char in digits: score += 3 return score"},{"question":"Run-length Encoding Run-length encoding is a simple form of data compression where consecutive elements with the same value are replaced with a single instance of that value followed by a count of how many times it appears consecutively. Your task is to create a function that takes a string of characters and returns its run-length encoded version. # Function Signature ```python def run_length_encoding(s: str) -> str: pass ``` # Input - `s` (str): A string consisting of upper and lower case alphabets. (1 ≤ |s| ≤ 1000) # Output - A string representing the run-length encoded version of the input string. # Example ```python assert run_length_encoding(\\"aabbbccccddd\\") == \\"a2b3c4d3\\" assert run_length_encoding(\\"abc\\") == \\"a1b1c1\\" assert run_length_encoding(\\"aaAAaA\\") == \\"a2A2a1A1\\" ``` # Note - In the run-length encoded version, each sequence of characters is represented by a character followed by the number of times it appears consecutively. - Consecutive means characters must be immediately next to each other to be counted together, with no other different characters in between.","solution":"def run_length_encoding(s: str) -> str: Returns the run-length encoded version of the input string s. if not s: return \\"\\" encoded_str = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: encoded_str.append(f\\"{s[i-1]}{count}\\") count = 1 # Append the last run encoded_str.append(f\\"{s[-1]}{count}\\") return \'\'.join(encoded_str)"},{"question":"# Idea Imagine you live in a city with a grid of streets forming blocks, and each street can be represented as an edge between two intersections (vertices). Your task is to represent the shortest path from one intersection to another based on edge weights that correspond to the distance of each street. Consider the edges and distances represented as a dictionary of tuples and integers. Implement Dijkstra\'s algorithm to find the shortest path in such a city block grid structure. # Task You will be provided a dictionary which represents the weighted graph of the city streets and intersections, where keys represent intersections and values are lists of tuples representing the connected intersections and the distance between them. Also, you will receive two strings, the starting intersection and the destination intersection. It is your task to implement Dijkstra\'s Algorithm to find the shortest path from the starting intersection to the destination intersection. ```python city_grid = { \'A\': [(\'B\', 2), (\'D\', 1)], \'B\': [(\'A\', 2), (\'C\', 4)], \'C\': [(\'B\', 4), (\'D\', 5)], \'D\': [(\'A\', 1), (\'C\', 5)], } shortest_path(city_grid, \'A\', \'C\') ==> [\'A\', \'B\', \'C\'] shortest_path(city_grid, \'D\', \'B\') ==> [\'D\', \'A\', \'B\'] ``` # Notes * All intersections are reachable from one another. * The dictionary/graph can be assumed to be undirected, i.e., if there is an edge between intersection A and B, there is also an equivalent edge between B and A.","solution":"import heapq def shortest_path(city_grid, start, end): Returns the shortest path from start to end using Dijkstra\'s algorithm. :param city_grid: dict, A dictionary representing the city grid with edges and distances. :param start: str, The starting intersection. :param end: str, The destination intersection. :return: list, The shortest path from start to end. # Priority queue to store the vertices to be checked pq = [(0, start, [])] visited = set() while pq: (cost, current_node, path) = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) path = path + [current_node] if current_node == end: return path for neighbor, weight in city_grid.get(current_node, []): if neighbor not in visited: heapq.heappush(pq, (cost + weight, neighbor, path)) return [] # Example usage: # city_grid = { # \'A\': [(\'B\', 2), (\'D\', 1)], # \'B\': [(\'A\', 2), (\'C\', 4)], # \'C\': [(\'B\', 4), (\'D\', 5)], # \'D\': [(\'A\', 1), (\'C\', 5)], # } # print(shortest_path(city_grid, \'A\', \'C\')) # ==> [\'A\', \'B\', \'C\'] # print(shortest_path(city_grid, \'D\', \'B\')) # ==> [\'D\', \'A\', \'B\']"},{"question":"A company wants to develop a new feature that allows users to choose a rectangular sub-grid from a larger rectangular grid of characters. The task is to write a function that returns the number of distinct sub-grids of a given size from the larger grid. Two sub-grids are considered distinct if they contain different sequences of characters. Input The input consists of: - The first line contains three integers n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ min(n, m)), where n and m are the dimensions of the larger grid and k is the side length of the sub-grids (all sub-grids are k x k in size). - The next n lines contain m characters each (a to z), representing the larger grid of characters. Output Print a single integer denoting the number of distinct k x k sub-grids. Example input 3 3 2 abc def ghi output 4 Explanation The 2x2 sub-grids from the given example are: - \\"ab de\\", \\"bc ef\\", \\"de hi\\", \\"ef gh\\". Thus, there are 4 distinct 2x2 sub-grids.","solution":"def count_distinct_subgrids(n, m, k, grid): Returns the number of distinct k x k sub-grids from the given n x m grid. Parameters: n (int): Number of rows in the grid m (int): Number of columns in the grid k (int): Dimension of the sub-grid (k x k) grid (list): List of strings where each string represents a row of the larger grid Returns: int: Number of distinct k x k sub-grids subgrids = set() for i in range(n - k + 1): for j in range(m - k + 1): subgrid = tuple(grid[i + x][j:j + k] for x in range(k)) subgrids.add(subgrid) return len(subgrids)"},{"question":"You will be given a list of integers which may contain duplicates. Your task is to return a new list that contains only the unique integers from the original list, in the order they first appeared. You should preserve the original order of the integers. For example: ```python unique_in_order([1, 2, 2, 3, 4, 4, 5]) = [1, 2, 3, 4, 5] # removing duplicates, preserving order unique_in_order([1, 1, 1, 1]) = [1] # all elements are the same, return one unique_in_order([4, 3, 2, 1]) = [4, 3, 2, 1] # no duplicates, keep original list ``` More examples in the test cases. Good luck!","solution":"def unique_in_order(lst): Returns a new list with only the unique integers from the original list, preserving their order. seen = set() unique_list = [] for item in lst: if item not in seen: unique_list.append(item) seen.add(item) return unique_list"},{"question":"A drone delivery service needs to optimize its battery usage for delivering parcels. You have a grid representing the delivery area, where each cell is either empty (denoted by \'.\') or an obstacle (denoted by \'#\'). The drone can move up, down, left, or right to adjacent empty cells but cannot fly over obstacles. Starting from a given cell, the drone must reach the target cell. The drone\'s battery has a limited number of moves it can make before needing a recharge. Your task is to determine whether the drone can reach the target cell within the given number of moves without recharging. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. The next n lines contain m characters each — the grid, where \'.\' denotes an empty cell and \'#\' denotes an obstacle. The following line contains four integers sx, sy, tx, ty (1 ≤ sx, sy, tx, ty ≤ 50) — the starting cell (sx, sy) and the target cell (tx, ty). The last line contains a single integer k (1 ≤ k ≤ 2500) — the maximum number of moves the drone can make. -----Output----- Print \\"YES\\" if the drone can reach the target cell within k moves, and \\"NO\\" otherwise. You can print each letter in arbitrary case (upper or lower). -----Example----- Input 5 5 .#... ...#. .#.#. ...#. ..... 1 1 5 5 10 Output YES Input 5 5 ..... ..... .#. ..... ..... 1 1 5 5 6 Output NO -----Note----- In the first example, the drone can move from (1, 1) to (5, 5) within the given number of moves. A possible path is (1,1) -> (1,2) -> (2,2) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (5,4) -> (5,5). Hence, the answer is \\"YES\\". In the second example, the drone needs to pass through obstacles with the given minimum number of moves, which is impossible. Hence, the answer is \\"NO\\".","solution":"from collections import deque def can_reach_target(n, m, grid, sx, sy, tx, ty, k): # Converting to 0-index sx -= 1 sy -= 1 tx -= 1 ty -= 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for __ in range(n)] queue = deque([(sx, sy, 0)]) while queue: x, y, moves = queue.popleft() if moves > k: break # No point in continuing if we exceed k moves if x == tx and y == ty: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, moves + 1)) return \\"NO\\""},{"question":"Create a function `wave_generator(text)` that takes a string as input and generates a list of strings, each representing a \\"wave\\". In each string, exactly one character from the original string is capitalized, and all other characters remain in their original case. The position of the capitalized character moves from left to right by one position with each new string in the list. Exclude any spaces present in the input from being capitalized or contributing to new wave strings. For example: ``` wave_generator(\\"hello\\") should return [\'Hello\', \'hEllo\', \'heLlo\', \'helLo\', \'hellO\'] wave_generator(\\"wave here\\") should return [\'Wave here\', \'wAve here\', \'waVe here\', \'wavE here\', \'wave Here\', \'wave hEre\', \'wave heRe\', \'wave herE\'] ``` **Constraints:** - The input string may contain letters, spaces, and punctuation. - The wave should skip capitalization in spaces and punctuation but maintain their position. - Maintain the original string length in each wave.","solution":"def wave_generator(text): Creates a wave from the input text where each element in the list has one letter capitalized, moving from left to right, excluding spaces. Parameters: text (str): The input string to generate the wave from. Returns: list: A list of strings representing the wave. wave = [] for i in range(len(text)): if text[i].isalpha(): # Ensure we only capitalize alphabet characters wave.append(text[:i] + text[i].upper() + text[i + 1:]) return wave"},{"question":"# Task You are given a string `s`. Your task is to determine if `s` can be rearranged to form a palindrome. A palindrome is a word that reads the same backward as forward. # Example For `s = \\"code\\"`, the output should be `false`. For `s = \\"aab\\"`, the output should be `true`. For `s = \\"carerac\\"`, the output should be `true`. # Note - `1 <= s.length <= 1000` - The input string `s` contains only lowercase English letters. # Requirements - Your solution should have a time complexity of `O(n)` where `n` is the length of the string. - Consider the edge cases and handle them appropriately. For example, strings with one character are always palindromes, and strings with all identical characters are also palindromes.","solution":"from collections import Counter def can_form_palindrome(s): Determines if the string s can be rearranged to form a palindrome. # Count the frequency of each character in the string char_count = Counter(s) # Count characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"Write a function `from_decimal_to_base` that converts a given decimal (base 10) number to its representation in a specified base (between 2 and 36). The function should take two arguments: 1. `number`: an integer in decimal form. 2. `base`: an integer representing the base to which you need to convert the decimal number. The return value should be a string that represents the number in the specified base. **Rules:** - The base will always be an integer between 2 and 36 inclusive. - Valid characters for bases greater than 10 include: `A` for 10, `B` for 11, ..., `Z` for 35. - You are not allowed to use any built-in functions for base conversion. **Examples:** ``` from_decimal_to_base(10, 2) # returns \\"1010\\" from_decimal_to_base(255, 16) # returns \\"FF\\" from_decimal_to_base(1234, 36) # returns \\"YA\\" ``` **Hints:** - You may want to use a loop to iterate through the number and construct the result. - Consider using a list of characters to represent digits for bases greater than 10.","solution":"def from_decimal_to_base(number, base): Converts a decimal number to its representation in a specified base (between 2 and 36). :param number: The decimal number to convert. :param base: The base to convert the number to. :return: The number represented in the specified base as a string. if base < 2 or base > 36: raise ValueError(\\"Base must be between 2 and 36\\") if number == 0: return \\"0\\" digits = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" result = \\"\\" is_negative = number < 0 number = abs(number) while number > 0: result = digits[number % base] + result number //= base if is_negative: result = \\"-\\" + result return result"},{"question":"You are assigned to track the names of students in a classroom using a software application. To manage this, you decide to implement a function that can take a list of student names and return a string containing the names in sorted order, separated by a comma and space. If the list of student names is empty, the function should return an empty string. Example ```python # list of names: [\\"John\\", \\"Alice\\", \\"Bob\\"] sort_student_names([\\"John\\", \\"Alice\\", \\"Bob\\"]) == \\"Alice, Bob, John\\" ```","solution":"def sort_student_names(names): Takes a list of student names and returns a string containing the names in sorted order, separated by a comma and space. :param names: List of student names :type names: list[str] :return: Sorted names as a string :rtype: str if not names: return \\"\\" sorted_names = sorted(names) return \\", \\".join(sorted_names)"},{"question":"Define a method that accepts a list of integers and a target integer. The method returns the indices of two numbers in the list that add up to the target integer. ```python find_indices([2, 7, 11, 15], 9) == (0, 1) find_indices([3, 2, 4], 6) == (1, 2) find_indices([3, 3], 6) == (0, 1) ``` To elaborate, the method should identify a pair of numbers in the list which sum to the target integer and return their indices. If no such pair exists, the method should return `None`. Assume that there is exactly one solution, and you may not use the same element twice.","solution":"def find_indices(nums, target): Given a list of integers and a target integer, returns the indices of the two numbers that add up to the target integer. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return (num_dict[complement], i) num_dict[num] = i return None"},{"question":"You are given an array of integers where each element represents a day and the value of the element is the stock price of a company on that day. Determine the maximum profit you can achieve by buying one share of the stock and then selling it at a later date. If no profit can be made, return 0. For example, if the array is [7, 1, 5, 3, 6, 4], then you should buy the stock on day 2 (price = 1) and sell it on day 5 (price = 6) for a maximum profit of 5. Write a function maxProfit(prices) that takes an array of integers prices as input and returns an integer representing the maximum profit. If no profit is possible, return 0. Example 1: Input: prices = [7, 1, 5, 3, 6, 4] Output: 5 Example 2: Input: prices = [7, 6, 4, 3, 1] Output: 0 Example 3: Input: prices = [1, 2, 3, 4, 5] Output: 4 Constraints: - 1 <= prices.length <= 10^5 - 0 <= prices[i] <= 10^4","solution":"def maxProfit(prices): Returns the maximum profit that can be made by buying and then selling one share of the stock. If no profit is possible, returns 0. if not prices: # If the list is empty return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: # Update the minimum price if the current price is lower if price < min_price: min_price = price # Calculate the current profit if we sell at the current price current_profit = price - min_price # Update the maximum profit if the current profit is higher if current_profit > max_profit: max_profit = current_profit return max_profit"},{"question":"# String Compression - Coding Challenge Background Data compression is a useful technique in computer science used to reduce the size of data. One common method of compression is run-length encoding (RLE), where sequences of the same data value are stored as a single data value and count. Task You\'re tasked to create a function that performs basic string compression using the counts of repeated characters. For instance, the string `\'aabcccccaaa\'` would compress to `\'a2b1c5a3\'`. If the \\"compressed\\" string would not become smaller than the original string, the function should return the original string. You can assume the string has only uppercase and lowercase letters (a-z). Input - A single string `s` which may contain both uppercase and lowercase letters. - The length of the string is between 1 and 1000 inclusive. Output - Return the compressed string if compression yields a shorter string. - Otherwise, return the original string. Example | Input | Output | |------------------|------------| | \'aabcccccaaa\' | \'a2b1c5a3\' | | \'abcdef\' | \'abcdef\' | | \'aabbcc\' | \'aabbcc\' | | \'aaAAaa\' | \'aaAAaa\' | | \'aaabbbccc\' | \'a3b3c3\' | Function Signature ```python def compress_string(s: str) -> str: pass ``` # Notes - Think about edge cases like an empty string or a string without any repeated characters. - Ensure you check if the \\"compressed\\" version actually reduces the size before returning it.","solution":"def compress_string(s: str) -> str: if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) # append the last character and its count compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Given an array of integers and an integer k, find the maximum sum of a subarray of size k. A subarray is defined as a contiguous part of the array. Example 1: Input: arr = [1, 4, 2, 10, 23, 3, 1, 0, 20], k = 4 Output: 39 Explanation: Subarray with maximum sum is [10, 23, 3, 1] which equals 39. Example 2: Input: arr = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: Subarray with maximum sum is [5, 1, 3] which equals 9. Note: 1. 1 <= k <= length of the array. 2. The array length will not exceed 100,000. 3. The array may contain both positive and negative integers, and the elements can be zero as well. 4. Aim for a solution with O(n) complexity for efficient processing.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of a subarray of size k. # Edge case: if array is empty or k is greater than array length if not arr or k > len(arr): return None # Initialize the maximum sum with the sum of the first subarray of size k max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window from left to right over the array for i in range(k, len(arr)): current_sum = current_sum - arr[i - k] + arr[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Lola is learning to write a word in uppercase and lowercase letters alternatively. She has written a word but is unsure if it meets the alternating uppercase and lowercase criteria. The word should start with a lowercase letter. Help Lola determine if her word alternates between uppercase and lowercase letters starting with a lowercase letter. If the word meets the criteria, print \\"YES\\", otherwise print \\"NO\\". -----Input----- The single line contains a word s, which consists of only alphabetical characters and has a length between 1 and 10^5. -----Output----- Print \\"YES\\" if the word alternates between uppercase and lowercase letters starting with a lowercase letter. Otherwise, print \\"NO\\". -----Examples----- Input aBcDeF Output YES Input AbCdEf Output NO Input aBcDe Output YES Input aBCdEf Output NO -----Note----- In the first sample, the word \\"aBcDeF\\" alternates correctly starting with a lowercase letter, so the output is \\"YES\\". In the second sample, the word \\"AbCdEf\\" starts with an uppercase letter, so the output is \\"NO\\". In the third sample, the word \\"aBcDe\\" alternates correctly starting with a lowercase letter, so the output is \\"YES\\". In the fourth sample, the word \\"aBCdEf\\" does not alternate correctly, so the output is \\"NO\\".","solution":"def is_alternating_case(word): Returns \\"YES\\" if the word alternates between uppercase and lowercase letters starting with a lowercase letter. Otherwise, returns \\"NO\\". # Check if the string is empty if not word: return \\"NO\\" # Check if the string starts with lowercase if not word[0].islower(): return \\"NO\\" # Check alternating pattern for i in range(1, len(word)): if word[i].islower() == word[i-1].islower(): return \\"NO\\" return \\"YES\\""},{"question":"Given two strings `s` and `t`, determine if they are isomorphic. Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself. Example 1: Input: s = \\"egg\\" t = \\"add\\" Output: true Explanation: \'e\' and \'a\' can be mapped and \'g\' and \'d\' can be mapped. Hence, \\"egg\\" can be transformed to \\"add\\". Example 2: Input: s = \\"foo\\" t = \\"bar\\" Output: false Explanation: \'f\' can be mapped to \'b\' but \'o\' cannot be mapped to both \'a\' and \'r\'. Hence, the strings are not isomorphic. Example 3: Input: s = \\"paper\\" t = \\"title\\" Output: true Explanation: \'p\' can be mapped to \'t\', \'a\' can be mapped to \'i\', \'p\' can be mapped to \'t\', \'e\' can be mapped to \'l\', \'r\' can be mapped to \'e\'. Hence, \\"paper\\" can be transformed to \\"title\\". Your task is to write a function `isIsomorphic(s: str, t: str) -> bool` to determine if the two strings are isomorphic.","solution":"def isIsomorphic(s: str, t: str) -> bool: Determine if two strings s and t are isomorphic. if len(s) != len(t): return False mapping_s_to_t = {} mapping_t_to_s = {} for char_s, char_t in zip(s, t): if char_s in mapping_s_to_t: if mapping_s_to_t[char_s] != char_t: return False else: mapping_s_to_t[char_s] = char_t if char_t in mapping_t_to_s: if mapping_t_to_s[char_t] != char_s: return False else: mapping_t_to_s[char_t] = char_s return True"},{"question":"A software company is running an incentive program for its sales team. Each salesperson is given a target number of sales per month. At the end of each month, every salesperson\'s performance is evaluated based on their monthly sales figure. The company wants to automate the process of evaluating the sales team\'s performance. For this purpose, they have hired you as a programmer. Your job is to write a program that will determine each salesperson\'s status at the end of the month. The statuses are defined as follows: - If the salesperson meets or exceeds the target, they are considered \'Successful\'. - If the salesperson does not meet the target, they are considered \'Unsuccessful\'. Write a function that takes two lists as inputs: `sales` and `targets`. The list `sales` contains the number of sales made by each salesperson, and the list `targets` contains the sales targets for each respective salesperson. Both lists are of the same length. Your task is to return a list of statuses indicating whether each salesperson is \'Successful\' or \'Unsuccessful\'. -----Input----- The function will receive the following input: - An integer `n` (1 ≤ n ≤ 10^5) — the number of salespeople. - Two lists of integers each of length `n`: `sales` and `targets` (0 ≤ sales[i], targets[i] ≤ 10^5). -----Output----- Return a list of strings of length `n` where each string is either \'Successful\' or \'Unsuccessful\' based on the evaluation of the salesperson\'s performance against their respective target. -----Example----- Input n = 4 sales = [120, 80, 100, 150] targets = [100, 90, 100, 140] Output [\'Successful\', \'Unsuccessful\', \'Successful\', \'Successful\'] -----Note----- In the given example: - The first salesperson made 120 sales against a target of 100, hence \'Successful\'. - The second salesperson made 80 sales against a target of 90, hence \'Unsuccessful\'. - The third salesperson made 100 sales, exactly meeting the target of 100, hence \'Successful\'. - The fourth salesperson made 150 sales against a target of 140, hence \'Successful\'.","solution":"def evaluate_sales_team(sales, targets): This function determines the status of each salesperson. Returns \'Successful\' if the salesperson meets or exceeds the target, otherwise returns \'Unsuccessful\'. :param sales: List of integers representing sales made by each salesperson. :param targets: List of integers representing sales targets for each salesperson. :return: List of strings indicating \'Successful\' or \'Unsuccessful\'. return [\'Successful\' if sales[i] >= targets[i] else \'Unsuccessful\' for i in range(len(sales))]"},{"question":"Consider an array of integers and a set of queries. For each query, you need to find the sum of a subarray given by the range in the query. If the sum is odd, increment it by 1; if it is even, decrement it by 1. Your task is to return the set of results for all the queries. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the number of elements in the array. The second line contains n integers a_i (1 leq a_i leq 10^4) — the elements of the array. The third line contains an integer q (1 leq q leq 10^5), the number of queries. The following q lines contain two integers l and r (1 leq l leq r leq n), which represents the range for each query. -----Output----- Print q integers, each on a new line — the results of the queries as described above. -----Examples----- Input 5 1 2 3 4 5 3 1 3 2 5 1 5 Output 5 10 13 Note: For the first query (1, 3): - The subarray is [1, 2, 3], the sum is 6 - Since 6 is even, decrement by 1 results in 5 For the second query (2, 5): - The subarray is [2, 3, 4, 5], the sum is 14 - Since 14 is even, decrement by 1 results in 13 For the third query (1, 5): - The subarray is [1, 2, 3, 4, 5], the sum is 15 - Since 15 is odd, increment by 1 results in 16","solution":"def process_subarray_sums(n, array, q, queries): # Calculate prefix sums prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] results = [] for l, r in queries: subarray_sum = prefix_sums[r] - prefix_sums[l - 1] if subarray_sum % 2 == 0: results.append(subarray_sum - 1) else: results.append(subarray_sum + 1) return results"},{"question":"In this coding challenge, you will implement three functions and write appropriate unit tests for them using the `unittest` module in Python. First, let\'s describe the three functions you need to implement: 1. The `filter_even` function: - It takes a list of integers as input and returns a new list containing only the even integers. - If the input list is empty, return an empty list. 2. The `string_lengths` function: - It takes a list of strings as input and returns a new list containing the lengths of those strings. - If the input list is empty, return an empty list. 3. The `concat_strings` function: - It takes a list of strings as input and returns a concatenated string with all the elements joined together with a single space in between. - If the input list is empty, return an empty string. Example implementations for the functions are as follows: ```python def filter_even(lst): Returns a list of even numbers >>> filter_even([1, 2, 3, 4, 5, 6]) [2, 4, 6] >>> filter_even([]) [] return [num for num in lst if num % 2 == 0] def string_lengths(lst): Returns lengths of each string in the list >>> string_lengths([\'hello\', \'world\']) [5, 5] >>> string_lengths([]) [] return [len(s) for s in lst] def concat_strings(lst): Concatenates a list of strings with a space >>> concat_strings([\'hello\', \'world\']) \'hello world\' >>> concat_strings([]) \'\' return \\" \\".join(lst) ``` Once you have implemented all three functions, proceed to write unit tests using the `unittest` module. Each function should have at least two test cases to confirm its correctness. Here is an example of how the unit tests might look: ```python import unittest class TestFunctions(unittest.TestCase): def test_filter_even(self): self.assertEqual(filter_even([1, 2, 3, 4, 5, 6]), [2, 4, 6]) self.assertEqual(filter_even([]), []) def test_string_lengths(self): self.assertEqual(string_lengths([\'hello\', \'world\']), [5, 5]) self.assertEqual(string_lengths([]), []) def test_concat_strings(self): self.assertEqual(concat_strings([\'hello\', \'world\']), \'hello world\') self.assertEqual(concat_strings([]), \'\') if __name__ == \'__main__\': unittest.main() ``` To complete this task successfully: - Make sure your functions adhere to the given specifications. - Write at least two unit tests for each function. - Run the `unittest` module to confirm that your tests pass successfully. Good luck!","solution":"def filter_even(lst): Returns a list of even numbers :param lst: List of integers :return: List of even integers return [num for num in lst if num % 2 == 0] def string_lengths(lst): Returns lengths of each string in the list :param lst: List of strings :return: List of lengths of the strings return [len(s) for s in lst] def concat_strings(lst): Concatenates a list of strings with a space :param lst: List of strings :return: A single concatenated string return \\" \\".join(lst)"},{"question":"Rayne is a collector of unique football kits from various teams. He has N football kits, each with a specific unique identifier (a positive integer) embroidered on it. Due to certain circumstances, some kits might be duplicated. Rayne wants to sort his collection in increasing order of the unique identifiers and eliminate any duplicates to have a refined collection. Write a program that takes T test cases. For each test case, your program should output the sorted list of unique football kit identifiers, preserving only one instance of each identifier. -----Input:----- The first line of the input contains a single integer T, the number of test cases. Each test case begins with a single integer N, the number of football kits. The next line contains N integers, each representing the unique identifier of a football kit. -----Output:----- For each test case, print a single line containing the sorted list of unique football kit identifiers. -----Constraints:----- 1 <= T <= 10 1 <= N <= 100000 1 <= identifier <= 1000000 -----Example:----- Input: 3 5 2 1 2 4 3 4 5 5 5 5 7 7 3 5 2 4 3 4 Output: 1 2 3 4 5 2 3 4 5 7 Explanation: In the first test case, after sorting and removing duplicates, the identifiers are 1, 2, 3, 4. In the second test case, all identifiers are the same, hence the output is just 5. In the third test case, after sorting and removing duplicates, the identifiers are 2, 3, 4, 5, 7.","solution":"def sort_and_unique_kits(test_cases): results = [] for case in test_cases: n, identifiers = case unique_identifiers = sorted(set(identifiers)) results.append(unique_identifiers) return results # Example usage: test_cases = [ (5, [2, 1, 2, 4, 3]), (4, [5, 5, 5, 5]), (7, [7, 3, 5, 2, 4, 3, 4]) ] # Expected output: # [ # [1, 2, 3, 4], # [5], # [2, 3, 4, 5, 7] # ] print(sort_and_unique_kits(test_cases))"},{"question":"Given a string `s` that represents a sentence, your task is to reverse the words in the sentence while preserving whitespace and initial word order. For example, given: ```python \\"I love programming\\" ``` Your function should return: ```python \\"I evol gnimmargorp\\" ``` The sentence will only contain letters and spaces, and there will be no leading or trailing whitespace. The words will be separated by a single space.","solution":"def reverse_words_in_sentence(s): Reverses the words in the sentence while preserving whitespace and initial word order. Parameters: s (str): A sentence consisting of words separated by single spaces. Returns: str: A sentence where each word has been reversed but the order of words is preserved. return \' \'.join(word[::-1] for word in s.split())"},{"question":"You are given a list of integers nums and an integer k. Your task is to determine if there are three integers in the list whose sum is equal to k. If such three integers exist, return true. Otherwise, return false. You may assume that each input would have at most one solution. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 9 Output: true Explanation: The three integers 1, 3, and 5 sum up to 9. Example 2: Input: nums = [1, 2, 4, 5, 6], k = 10 Output: true Explanation: The three integers 1, 4, and 5 sum up to 10. Example 3: Input: nums = [1, 2, 4, 5, 6], k = 20 Output: false Explanation: There are no three integers that sum up to 20. Constraints: 3 <= nums.length <= 1000 -10^5 <= nums[i] <= 10^5 -10^5 <= k <= 10^5","solution":"def three_sum(nums, k): Determine if there are three integers in the list whose sum is equal to k. :param nums: List[int] - A list of integers :param k: int - The target sum :return: bool - True if there are three integers that sum up to k, otherwise False nums.sort() for i in range(len(nums) - 2): left, right = i + 1, len(nums) - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == k: return True elif total < k: left += 1 else: right -= 1 return False"},{"question":"# Description Write a function that accepts a string representing a mathematical expression consisting of positive integers, \'+\', \'*\', and parentheses. Your task is to evaluate the expression and return the result as an integer. The expression is guaranteed to be valid. Example Input: \\"2*(3+4)\\" Output: 14 Input: \\"1+2*3\\" Output: 7","solution":"def evaluate_expression(expression): Evaluates a mathematical expression consisting of positive integers, \'+\', \'*\', and parentheses. :param expression: str, a string representing the mathematical expression :return: int, the result of the evaluated expression def helper(s, index): stack = [] num = 0 sign = \\"+\\" while index < len(s): ch = s[index] if ch.isdigit(): num = num * 10 + int(ch) if ch == \'(\': num, index = helper(s, index + 1) if ch in \\"+*)\\" or index == len(s) - 1: if sign == \'+\': stack.append(num) elif sign == \'*\': stack[-1] = stack[-1] * num if ch == \')\': return sum(stack), index sign = ch num = 0 index += 1 return sum(stack), index return helper(expression, 0)[0]"},{"question":"Julia has a large collection of books, each with a certain thickness. She plans to organize her books on a shelf, which starts out empty and has a maximum load capacity of W units. Julia wants to place as many books as possible on the shelf without exceeding the weight limit W. Given the list of book thicknesses and the weight capacity of the shelf, can you help Julia determine the maximum number of books she can place on the shelf? -----Input:----- - First line contains an integer T, the number of test cases. - For each test case: - First line contains two integers N and W, where N is the number of books and W is the maximum load capacity of the shelf. - Second line contains N integers representing the thickness of each book. -----Output:----- For each test case, output in a single line the maximum number of books Julia can place on the shelf. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ W ≤ 10^6 - 1 ≤ thickness of each book ≤ 10^4 -----Sample Input:----- 2 5 50 10 20 30 40 15 4 100 40 50 75 20 -----Sample Output:----- 3 2 -----EXPLANATION:----- Testcase 1: N = 5, W = 50 Book thicknesses: 10, 20, 30, 40, 15 Julia can place books with thicknesses 10, 20, and 15 on the shelf (total thickness = 45). Testcase 2: N = 4, W = 100 Book thicknesses: 40, 50, 75, 20 Julia can place books with thicknesses 40 and 50 on the shelf (total thickness = 90).","solution":"def max_books_on_shelf(num_cases, cases): results = [] for case in cases: N, W = case[0] thicknesses = case[1] thicknesses.sort() # Sort the books by thickness to optimize the number of books total_thickness = 0 count = 0 for thickness in thicknesses: if total_thickness + thickness <= W: total_thickness += thickness count += 1 else: break results.append(count) return results # Example usage: # num_cases = 2 # cases = [ # [(5, 50), [10, 20, 30, 40, 15]], # [(4, 100), [40, 50, 75, 20]] # ] # print(max_books_on_shelf(num_cases, cases)) # Output: [3, 2]"},{"question":"You are given an array of integers which represents a sequence of stepping stones to cross a river. Each stepping stone has a value that allows skipping a certain number of stones forward. The objective is to determine the minimum number of jumps needed to reach the other end of the river, or determine if it is impossible to do so. -----Input----- The input consists of a single test case. The first line contains an integer n (1 le n le 1000) — the number of stepping stones. The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 1000) — the values of the stepping stones. -----Output----- Output a single integer, the minimum number of jumps required to reach the last stone. If it is impossible to reach the last stone, output -1. -----Example----- Input 6 2 3 1 1 4 0 Output 3 Input 5 3 2 1 0 4 Output -1 -----Explanation----- In the first example, the sequence of jumps needed to reach the end is as follows: jump from the first stone to the second stone, from the second stone to the fourth stone, and then from the fourth stone to the last stone. This results in a minimum of three jumps. In the second example, no matter how you jump, you will end up at a position (like the fourth stone) where the value is 0, making it impossible to proceed to the next stone. Thus, it is impossible to reach the last stone.","solution":"def min_jumps_to_cross_river(stones): Given an array of integers representing the stepping stones, returns the minimum number of jumps needed to reach the last stone, or -1 if it is impossible. n = len(stones) if n == 1: return 0 max_reach = 0 # The farthest point that can be reached jump_count = 0 # Count of jumps needed to reach the farthest point current_end = 0 # End of the range that can currently be reached with the current jump count for i in range(n): if i > max_reach: return -1 # If the current position is beyond the farthest reachable point, it\'s impossible # Update the farthest point that can be reached max_reach = max(max_reach, i + stones[i]) if i == current_end: # When reaching the end of the current reachable range if current_end != n-1: # If not yet at the last stone jump_count += 1 current_end = max_reach if current_end >= n-1: # If the farthest reach exceeds or meets the last stone break return jump_count if current_end >= n-1 else -1"},{"question":"=====Problem Statement===== The provided code stub reads three integers, x, y, and n, from STDIN. Add logic to create a list of n integers where each integer is equal to the product of x and y. =====Example===== x = 4 y = 2 n = 5 The product of x and y is 4*2 = 8. Print: [8, 8, 8, 8, 8] =====Input Format===== The first line contains the first integer, x. The second line contains the second integer, y. The third line contains the integer, n. =====Output Format===== Print a list of n integers where each integer is the product of x and y.","solution":"def generate_product_list(x, y, n): Generates a list of n integers where each integer is equal to the product of x and y. :param x: First integer. :param y: Second integer. :param n: Number of times to repeat the product of x and y in a list. :return: A list of n integers, each being the product of x and y. product = x * y return [product] * n"},{"question":"Given two strings s and t, write a function that counts the number of distinct subsequences of s which equals t. A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. For example, \\"ace\\" is a subsequence of \\"abcde\\" while \\"aec\\" is not. Example 1: Input: s = \\"rabbbit\\", t = \\"rabbit\\" Output: 3 Explanation: As shown below, there are 3 ways you can generate \\"rabbit\\" from s. ``` rabbbit rabbbit rabbbit ``` Example 2: Input: s = \\"babgbag\\", t = \\"bag\\" Output: 5 Explanation: As shown below, there are 5 ways you can generate \\"bag\\" from s. ``` babgbag babgbag babgbag babgbag babgbag ``` Note: 1. Both strings s and t consist of only lowercase characters.","solution":"def numDistinct(s, t): Returns the number of distinct subsequences of s which equals t. # Initializing a 2D dp array where dp[i][j] represents the number of ways to form the substring t[:j] using the substring s[:i]. dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)] # Any string has exactly one way to create an empty subsequence. for i in range(len(s) + 1): dp[i][0] = 1 # Filling the dp table for i in range(1, len(s) + 1): for j in range(1, len(t) + 1): if s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] return dp[-1][-1]"},{"question":"Given a string of lowercase English letters, find the length of the longest substring without repeating characters. This problem requires you to identify the longest contiguous sequence of unique characters within a given string. Implement a function `longestUniqueSubstring` that takes a single argument `s` (the input string) and returns an integer representing the length of the longest substring without repeating characters. If the string is empty, the function should return 0. For example: ```python longestUniqueSubstring(\\"abcabcbb\\") # should return 3, because \\"abc\\" is the longest substring without repeating characters. longestUniqueSubstring(\\"bbbbb\\") # should return 1, because \\"b\\" is the longest substring without repeating characters. longestUniqueSubstring(\\"pwwkew\\") # should return 3, because \\"wke\\" is the longest substring without repeating characters. longestUniqueSubstring(\\"\\") # should return 0, because the input string is empty. ``` To solve this problem, use a sliding window approach to keep track of the current substring without repeating characters and update the maximum length found. **Function Signature** ```python def longestUniqueSubstring(s: str) -> int: # your code here ```","solution":"def longestUniqueSubstring(s: str) -> int: Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} max_length = 0 start = 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an array of integers `nums` and an integer `target`. Your task is to return indices of any two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. The order of the indices does not matter for the output. For example, given `nums = [2, 7, 11, 15]` and `target = 9`, the function should return `[0, 1]` because `nums[0] + nums[1]` equals `9`. To implement this, write a function `findTwoSum(nums, target)` that returns a tuple of two indices.","solution":"def findTwoSum(nums, target): Returns indices of the two numbers in `nums` that add up to the `target`. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return None # In case no solution is found, though the problem guarantees one solution."},{"question":"Write a function that calculates the intersection of two given sets of coordinates represented by two lists of tuples. Each tuple contains two elements representing the x and y coordinates. The result should be a list of tuples with coordinates that appear in both sets. ```python find_intersection([(1, 2), (3, 4), (5, 6)], [(3, 4), (5, 6), (7, 8)]) # Output: [(3, 4), (5, 6)] ``` More examples in test cases. Good luck!","solution":"def find_intersection(set1, set2): Returns the intersection of two sets of coordinates. Each input is a list of tuples (x, y). Parameters: set1 (list of tuples): First set of coordinates. set2 (list of tuples): Second set of coordinates. Returns: list of tuples: Coordinates that appear in both sets. # Convert lists to sets to leverage set intersection set1 = set(set1) set2 = set(set2) # Find intersection intersection = set1.intersection(set2) # Convert the result back to a list return list(intersection)"},{"question":"Introduction Sudoku is a popular logic-based number puzzle. The objective is to fill a 9×9 grid with digits so that each column, each row, and each of the nine 3×3 subgrids that compose the grid contains all of the digits from 1 to 9. # Rules 1. The puzzle setter provides a partially completed grid, which typically has a unique solution. 2. Each row, column, and 3×3 subgrid must contain all of the numbers from 1 to 9 once. 3. Unfilled positions are represented by 0 in the given input grid. # Task Your task is to create a method called `solve_sudoku()` that takes a 9x9 nested list (2D array) called `board` as an input and returns a solved grid that adheres to the Sudoku rules. The `solve_sudoku()` method must fill out the `board` array in place and return `True` if the Sudoku puzzle is solved successfully. If no solution exists, the method should return `False`. # Input - A 9x9 nested list called `board` representing the Sudoku grid with integers ranging from 0 to 9. # Output - The method should modify the input `board` in place to reflect the solved Sudoku puzzle. - Return `True` if the puzzle is solved successfully. - Return `False` if the puzzle has no valid solution. # Example ```python board = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] def solve_sudoku(board): # Your implementation here solve_sudoku(board) print(board) ``` Given the above input, the `solve_sudoku()` function should update the `board` in-place to the solved Sudoku grid. # Notes - To solve the puzzle, you may use backtracking which is a standard method for solving constraint satisfaction problems. - Ensure your function is efficient as possible, given the constraints of a 9×9 grid. Good luck and enjoy the challenge!","solution":"def solve_sudoku(board): Solves the Sudoku puzzle using backtracking. Args: board (list of list of int): 9x9 nested list representing the Sudoku grid with integers ranging from 0 to 9. Returns: bool: True if the puzzle is solved successfully, False if no valid solution exists. def is_valid(board, row, col, num): # Check validity in the row for c in range(9): if board[row][c] == num: return False # Check validity in the column for r in range(9): if board[r][col] == num: return False # Check validity in the 3x3 subgrid start_row = (row // 3) * 3 start_col = (col // 3) * 3 for r in range(3): for c in range(3): if board[start_row + r][start_col + c] == num: return False return True def solve(board): for row in range(9): for col in range(9): if board[row][col] == 0: for num in range(1, 10): if is_valid(board, row, col, num): board[row][col] = num if solve(board): return True board[row][col] = 0 return False return True return solve(board)"},{"question":"Larry and Sergei are playing a game on a binary tree. A binary tree is a tree data structure where each node has at most two children. The game is played with one special node called the \\"queries node\\" and in each query, one can swap all the left and right children of any node in the tree. The goal of the game is to determine whether the tree will be the same as the original after performing a given sequence of swaps. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of nodes in the binary tree. Each of the next n lines contains three integers, representing a node and its left and right children respectively. The i-th line consists of three integers u, v, w where u is the parent\'s index, v is the left child\'s index and w is the right child\'s index. If a node does not have a left or right child, that value will be -1. The next line contains a single integer q (1 ≤ q ≤ 10^5), the number of queries. Each of the next q lines contains a single integer, the index of the node for which we need to swap its left and right children. -----Output----- For each query, print \\"YES\\" if the tree is still the same as the original after carrying out all swaps up to and including that query, and print \\"NO\\" otherwise. -----Example----- Input 5 1 2 3 2 4 5 3 -1 -1 4 -1 -1 5 -1 -1 3 2 3 2 Output NO NO YES","solution":"class TreeNode: def __init__(self, index): self.index = index self.left = None self.right = None def build_tree(n, nodes_info): tree = {} for i in range(n): u, v, w = nodes_info[i] if u not in tree: tree[u] = TreeNode(u) if v != -1: tree[v] = TreeNode(v) tree[u].left = tree[v] if w != -1: tree[w] = TreeNode(w) tree[u].right = tree[w] return tree[1] # return the root node def compare_trees(t1, t2): if t1 is None and t2 is None: return True if t1 is None or t2 is None: return False if t1.index != t2.index: return False return compare_trees(t1.left, t2.left) and compare_trees(t1.right, t2.right) def swap_children(tree, node_index): node = find_node(tree, node_index) if node: node.left, node.right = node.right, node.left def find_node(tree, node_index): if tree is None: return None if tree.index == node_index: return tree left_result = find_node(tree.left, node_index) if left_result: return left_result return find_node(tree.right, node_index) def play_game(n, nodes_info, q, queries): original_tree = build_tree(n, nodes_info) current_tree = build_tree(n, nodes_info) results = [] for query in queries: swap_children(current_tree, query) if compare_trees(original_tree, current_tree): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Sudoku Validator A Sudoku puzzle consists of a 9x9 grid, where each sub-grid (3x3) must contain numbers from 1 to 9 without repetition. Also, each row and column in the grid must contain numbers from 1 to 9 without repetition. Create a function `is_valid_sudoku(grid)` that takes in a 9x9 2D list (a list of lists) of integers and returns `True` if the grid represents a valid Sudoku puzzle according to the rules, or `False` otherwise. An input grid will only contain integers from 0 to 9, where 0 represents an empty cell that can be filled with any number from 1 to 9. Example: ```python grid = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] print(is_valid_sudoku(grid)) # Output: True ``` Ensure your solution is efficient and follows good coding practices.","solution":"def is_valid_sudoku(grid): def is_valid_block(block): nums = [num for num in block if num != 0] return len(nums) == len(set(nums)) def get_subgrid(grid, row, col): return [grid[r][c] for r in range(row, row + 3) for c in range(col, col + 3)] # Check rows and columns for i in range(9): if not is_valid_block(grid[i]): # Check row return False if not is_valid_block([grid[r][i] for r in range(9)]): # Check column return False # Check 3x3 sub-grids for row in range(0, 9, 3): for col in range(0, 9, 3): if not is_valid_block(get_subgrid(grid, row, col)): return False return True"},{"question":"Alice and Bob are playing a game with integers. They start with an integer x. On each player\'s turn, they must subtract a number n from x, where n is a divisor of x and n is a positive integer less than x. The player who cannot make a move loses the game. Alice always goes first. They will play optimally. Given the initial integer x, determine the winner of the game if both play optimally. -----Input----- The input consists of a single integer x (2 ≤ x ≤ 10^9). -----Output----- Print \\"Alice\\" if Alice wins the game, otherwise print \\"Bob\\" (without the quotes). -----Examples----- Input 2 Output Alice Input 3 Output Bob Input 10 Output Alice","solution":"def determine_winner(x): Determines the winner of the game given the initial integer x (2 ≤ x ≤ 10^9). Alice always goes first. They play optimally. :param x: Initial integer x :return: \\"Alice\\" if Alice wins, otherwise \\"Bob\\" # If x is even, Alice can always subtract an odd divisor to eventually leave an odd number for Bob who will lose # If x is odd, Bob will win because Alice will have to subtract an odd number and leave an even one for Bob who can follow the same strategy if x % 2 == 1: return \\"Bob\\" else: return \\"Alice\\""},{"question":"Write a function that takes a list of integers and an integer `k`, and returns the smallest number of distinct integers such that their sum is greater than or equal to `k`. # Example ```python arr = [3, 7, 2, 5, 8, -1] k = 10 ``` To get a sum of at least `10`, the smallest number of distinct integers you can pick is `2`. For instance, picking `7` and `3` gives you `10` and they are distinct integers. Function signature: `def min_distinct_sum(arr: List[int], k: int) -> int:` Good luck! If you like this problem, you might also want to try: [Sum of minimums](https://www.codewars.com/kata/5d5ee4c35162d9001af7d699) [Find array](https://www.codewars.com/kata/59f11118a5e129e591000134)","solution":"from typing import List def min_distinct_sum(arr: List[int], k: int) -> int: Returns the smallest number of distinct integers from the list such that their sum is greater than or equal to k. if not arr: return -1 # Removing duplicates and sort the list in descending order distinct_numbers = sorted(set(arr), reverse=True) current_sum = 0 count = 0 for num in distinct_numbers: current_sum += num count += 1 if current_sum >= k: return count # If the sum of all distinct numbers is still less than k return -1"},{"question":"Write a function that takes two arrays of strings as arguments and returns a new array containing only the strings that are anagrams of each other from the two input arrays. Ensure that the output array has no duplicate strings and is sorted in alphabetical order. For example, given the input arrays: ``` [\\"listen\\", \\"triangle\\", \\"apple\\", \\"silent\\"] [\\"enlist\\", \\"integral\\", \\"banana\\", \\"paw\\"] ``` The function should return: ``` [\\"enlist\\", \\"integral\\", \\"listen\\", \\"silent\\", \\"triangle\\"] ``` Note: - The order of strings in the input arrays can vary. - The output should be a sorted list of unique strings that are anagrams of each other. Happy coding! :)","solution":"def find_anagrams(array1, array2): Returns a sorted array of unique strings that are anagrams of each other from the two input arrays. def is_anagram(str1, str2): return sorted(str1) == sorted(str2) result = set() for word1 in array1: for word2 in array2: if is_anagram(word1, word2): result.add(word1) result.add(word2) return sorted(result)"},{"question":"**Problem Statement:** Given a list of subway routes represented by a list of lists lines where lines[i] is a list of stations that the i-th subway line passes through. The stations list is circular, meaning after reaching the end of the list, the subway returns to the starting station and continues again. We start at a station S and want to reach station D using the minimum number of subway lines (the outlets). Travelling between the stations is only possible through these subway lines. Write a program to determine the least number of subway lines needed to travel from station S to station D. If it is not possible to reach station D from station S using the subway lines, return -1. **Example:** ``` Input: lines = [[1, 3, 5, 7], [2, 3, 6, 8], [1, 5, 9]] S = 1 D = 8 Output: 2 Explanation: The best route is: - Take the first subway line from station 1 to station 3. - Transfer to the second subway line at station 3 and continue to station 8. ``` **Constraints:** - 1 <= lines.length <= 1000 - 1 <= lines[i].length <= 10000 - 0 <= lines[i][j] < 10^6","solution":"from collections import deque, defaultdict def min_subway_lines(lines, S, D): if S == D: return 0 station_to_lines = defaultdict(set) for idx, line in enumerate(lines): for station in line: station_to_lines[station].add(idx) queue = deque([(S, 0)]) visited_stations = set([S]) visited_lines = set() while queue: station, transfers = queue.popleft() for line in station_to_lines[station]: if line in visited_lines: continue visited_lines.add(line) for next_station in lines[line]: if next_station == D: return transfers + 1 if next_station not in visited_stations: visited_stations.add(next_station) queue.append((next_station, transfers + 1)) return -1"},{"question":"You have a list of tasks you need to accomplish, each with a specific duration. You\'ve decided to divide these tasks into two groups to be completed by two coworkers such that the difference in the total duration between the two groups is minimized. Write a function that takes a list of task durations as input and return the minimum possible difference between the two groups\' total duration times. Example: Input: [5, 3, 8, 1, 4, 2] Output: 1 In this case, one optimal division could be: Group A: [8, 2], total = 10 Group B: [5, 3, 4, 1], total = 13 Another optimal division could be: Group A: [5, 4, 3], total = 12 Group B: [8, 2, 1], total = 11 Both divisions result in a minimal difference of 1.","solution":"def min_difference_partition(tasks): S = sum(tasks) n = len(tasks) dp = [False] * (S//2 + 1) dp[0] = True for task in tasks: for j in range(S//2, task - 1, -1): dp[j] = dp[j] or dp[j - task] for j in range(S//2, -1, -1): if dp[j]: return S - 2 * j"},{"question":"Create a program that converts integers to their corresponding Roman numeral representations. Your task is to develop a function and write unit tests for this conversion. The `int_to_roman` function should accept an integer and return a string that represents the equivalent Roman numeral. The input integer will be in the range from 1 to 3999. The Roman numerals are typically written as combinations of the following seven symbols: - I = 1 - V = 5 - X = 10 - L = 50 - C = 100 - D = 500 - M = 1000 # Examples: - 3 is represented as \\"III\\" - 4 is represented as \\"IV\\" - 9 is represented as \\"IX\\" - 58 is represented as \\"LVIII\\" - 1994 is represented as \\"MCMXCIV\\" Your function should also handle special cases: - Numbers like 4 and 9 are written using subtraction, e.g. \\"IV\\" (4) and \\"IX\\" (9). - Numbers like 40 (XL), 90 (XC), 400 (CD), and 900 (CM) also use subtraction. # Function Definition: ```python def int_to_roman(num): Convert an integer to a Roman numeral. :param num: Integer value to convert to Roman numeral (1 <= num <= 3999) :type num: int :return: Roman numeral as a string representation of the integer :rtype: str >>> int_to_roman(3) \'III\' >>> int_to_roman(1994) \'MCMXCIV\' # Your code goes here pass ``` # Additional Details: 1. Implement the function `int_to_roman` depicted above. 2. Complete the above docstring, ensuring you provide at least two doctests for the function. 3. The function should be concise and efficient, taking into account the constraints given. 4. Avoid unnecessary complexity in your implementation. 5. Strengthen your solution with clear, understandable, and accurate comments where necessary. Good luck!","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. :param num: Integer value to convert to Roman numeral (1 <= num <= 3999) :type num: int :return: Roman numeral as a string representation of the integer :rtype: str >>> int_to_roman(3) \'III\' >>> int_to_roman(1994) \'MCMXCIV\' val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Our fisherman has been asked to collect a specific number of fish from a large river. The fish can either be of type \\"A\\" or type \\"B\\". For each collection, the fisherman has decided to form a string of length N where each character represents a fish of either type \\"A\\" or type \\"B\\". However, there is a twist: the fisherman believes that a collection should start and end with different fish types for good luck. A collection can thus be represented as strings of the form (AB|BA). The fisherman\'s task is to count how many such distinct collections (strings) of length N adhere to this lucky rule. -----Input:----- - The first line of input contains an integer T denoting the number of test cases. - Each of the following T lines contains a single integer N representing the length of the fish collection. -----Output:----- For each test case, print the number of such lucky collections of length N. Because the number can be very large, output it modulo 1000000007. -----Constraints----- - 1≤T≤10000 - 1≤N≤100000 -----Sample Input:----- 2 1 2 -----Sample Output:----- 0 2","solution":"MOD = 1000000007 def count_lucky_collections(N): Returns the count of valid lucky collections of length N where the first and last characters are different. if N == 1: return 0 if N == 2: return 2 # Start and end different case can be filled in 2 ways (AB or BA) # Each remaining N-2 spots can be either A or B, hence 2^(N-2) combinations return pow(2, N-2, MOD) * 2 % MOD def process_test_cases(T, test_cases): results = [] for N in test_cases: result = count_lucky_collections(N) results.append(result) return results"},{"question":"A city has introduced a new numbering system for its buildings. The system works by labeling each building with a unique ID from 1 to N, but not in a sequential manner. The ID assignment follows a known but complex permutation pattern. The city\'s council has decided to organize an event inviting residents of every Kth building, starting from building with ID 1, and continuing in the order of ID assignment. Given the IDs of the buildings in the order they are numbered and the value of K, your task is to determine which buildings will have their residents invited to the event. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. - The first line of each test case contains two space-separated integers N and K where N is the total number of buildings, and K is the step value. - The second line of each test case contains N space-separated integers representing the IDs assigned to the buildings in the order they are numbered. -----Output----- For each test case, output a single line containing the IDs of the buildings whose residents will be invited, in the order they are processed. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 10^5 - 1 ≤ K ≤ N -----Example----- Input: 2 5 2 3 1 4 5 2 6 3 6 3 2 1 4 5 Output: 1 5 6 4 -----Explanation----- In the first test case, the building IDs are [3, 1, 4, 5, 2]. Starting from the first building and taking every 2nd building in the list, the invited buildings will be those with IDs [1, 5]. In the second test case, the building IDs are [6, 3, 2, 1, 4, 5]. Starting from the first building and taking every 3rd building, the invited buildings will be those with IDs [6, 4].","solution":"def invite_buildings(t, test_cases): Determines invited buildings based on the IDs and step value K for each test case. Args: t : int : number of test cases test_cases : list : list of tuples, each containing: - N : int : total number of buildings - K : int : step value - ids : list : list of building IDs in the order they are numbered Returns: list : list of strings : each string contains invited building IDs for the corresponding test case result = [] for case in test_cases: N, K, ids = case invited = [ids[i] for i in range(0, N, K)] result.append(\\" \\".join(map(str, invited))) return result # Example usage: t = 2 test_cases = [ (5, 2, [3, 1, 4, 5, 2]), (6, 3, [6, 3, 2, 1, 4, 5]) ] print(invite_buildings(t, test_cases)) # Output: [\\"3 4 2\\", \\"6 1\\"]"},{"question":"Jay is a software engineer working at a logistics company. He is tasked with optimizing the delivery routes for the company’s fleet of delivery vehicles. Each delivery vehicle has a maximum capacity in terms of the number of packages it can carry, and there are k different packages to be delivered, each with a specific weight. The total weight of the packages assigned to any vehicle must not exceed its maximum capacity. However, Jay also wants to minimize the number of vehicles used for delivery. Each vehicle can only make one trip to deliver its assigned packages. Can you help Jay determine the minimum number of delivery vehicles needed to deliver all packages? If it is not possible to deliver all packages within the constraints, return -1. -----Input----- The first line contains two integers n and k (1 ≤ n, k ≤ 300,000), where n is the number of vehicles, and k is the number of packages. The second line contains n integers capacity_1, capacity_2, ..., capacity_{n} (1 ≤ capacity_{i} ≤ 10^7), representing the maximum capacity of each vehicle. The third line contains k integers weight_1, weight_2, ..., weight_{k} (1 ≤ weight_{i} ≤ 10^7), representing the weights of the packages. -----Output----- Output a single integer: the minimum number of delivery vehicles needed to deliver all packages. If it is not possible to deliver all packages, output -1. -----Example----- Input 3 4 10 15 20 5 12 8 6 Output 2 -----Explanation----- In the sample test case, the optimal assignment of packages to vehicles is: 1. First vehicle carries packages with weights [5, 8] (total weight = 13, within capacity 15). 2. Second vehicle carries packages with weights [12, 6] (total weight = 18, within capacity 20). So the minimum number of vehicles required is 2.","solution":"def min_delivery_vehicles(n, k, capacities, weights): weights.sort(reverse=True) # Sort weights in descending order capacities.sort(reverse=True) # Sort capacities in descending order if weights[0] > capacities[0]: return -1 vehicles_used = 0 while weights: vehicles_used += 1 current_capacity = capacities.pop(0) # Take the largest available vehicle capacity new_weights = [] for weight in weights: if weight <= current_capacity: current_capacity -= weight else: new_weights.append(weight) weights = new_weights return vehicles_used"},{"question":"Given an array of integers, your task is to find the length of the smallest contiguous subarray, the sum of whose elements is greater than or equal to a given integer `S`. # Function Signature ```python def min_subarray_length(arr: List[int], S: int) -> int: ``` # Example: ``` min_subarray_length([2, 3, 1, 2, 4, 3], 7) => 2 # The subarray [4, 3] has the minimal length under the problem constraint. min_subarray_length([1, 4, 4], 4) => 1 # The subarray [4] has the minimal length under the problem constraint. ``` # Note: - The given array will always have at least one positive integer. - If no such subarray exists, return 0.","solution":"from typing import List def min_subarray_length(arr: List[int], S: int) -> int: Returns the length of the smallest contiguous subarray, the sum of whose elements is greater than or equal to S. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else 0"},{"question":"Omy and Ish were practicing with sequences of numbers. They challenged each other with a task where they had to manage a dynamic number sequence based on a series of operations. Given an initial sequence of integers, they need to perform a set of operations and report the results as specified. The operations are as follows: - **\\"add x\\"**: Add integer `x` at the end of the sequence. - **\\"remove\\"**: Remove the last element from the sequence. If the sequence is empty, do nothing. - **\\"sum\\"**: Compute the sum of all elements in the sequence and print the result. - **\\"max\\"**: Find the maximum element in the sequence and print the result. If the sequence is empty, print \\"EMPTY\\". -----Input:----- - The first line contains an integer `M`, the number of operations. - The next `M` lines each contain a single operation. -----Output:----- - For each \\"sum\\" and \\"max\\" operation, print the result on a new line. -----Constraints:----- - 1 leq M leq 10^6 - The sequence of integers will not exceed 10^7 elements. - The integers added to the sequence will be between -10^9 and 10^9. -----Sample Input:----- 6 add 3 add 7 sum add -2 max remove -----Sample Output:----- 10 7","solution":"def dynamic_sequence(m, operations): sequence = [] results = [] for operation in operations: op = operation.split() if op[0] == \\"add\\": sequence.append(int(op[1])) elif op[0] == \\"remove\\": if sequence: sequence.pop() elif op[0] == \\"sum\\": results.append(sum(sequence)) elif op[0] == \\"max\\": results.append(max(sequence) if sequence else \\"EMPTY\\") return results"},{"question":"Write a function that takes a list of integers as input and returns a list where each element is the product of all numbers in the input list except the one at that position. You are not allowed to use division in your solution. Examples ``` input: [1, 2, 3, 4] output: [24, 12, 8, 6] input: [4, 5, 1, 8, 2] output: [80, 64, 320, 40, 160] input: [3, 6, 9] output: [54, 27, 18] ```","solution":"def product_except_self(nums): Returns a list where each element is the product of all numbers in the input list except the one at that position. n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n # Calculate left products for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right products for j in range(n - 2, -1, -1): right_products[j] = right_products[j + 1] * nums[j + 1] # Calculate the result by multiplying left and right products for k in range(n): result[k] = left_products[k] * right_products[k] return result"},{"question":"Write a function that takes a list of integers and returns a new list with the elements in reverse order. Some examples: ``` Input: [1, 2, 3] Output: [3, 2, 1] Input: [7, 8, 9, 10] Output: [10, 9, 8, 7] Input: [] Output: [] ```","solution":"def reverse_list(lst): Returns a new list with the elements of the original list in reverse order. Parameters: lst (list): A list of integers. Returns: list: A new list with elements in reverse order. return lst[::-1]"},{"question":"You are organizing a concert and need to manage ticket sales effectively. Tickets can either be booked individually or as group purchases and you want to ensure that no tickets are sold more than once. You need to implement a function that processes a series of ticket bookings and determines whether all bookings can be honored without any overlap. # Function Signature ```python def can_book_all_tickets(num_of_tickets: int, bookings: List[Tuple[int, int]]) -> bool: pass ``` # Parameters - `num_of_tickets` (int): the total number of tickets available for the concert, numbered from 1 to `num_of_tickets`. - `bookings` (List[Tuple[int, int]]): a list of tuples representing requested bookings. Each tuple consists of two integers `start` and `end`, inclusive, denoting the consecutive ticket numbers (from `start` to `end`) the person wants to book. # Returns - `bool`: return `True` if all bookings can be honored without overlap, otherwise return `False`. # Examples ```python can_book_all_tickets(10, [(1, 3), (5, 7), (8, 10)]) # Output: True can_book_all_tickets(10, [(1, 5), (4, 6), (7, 9)]) # Output: False can_book_all_tickets(5, [(1, 2), (2, 3), (4, 5)]) # Output: False can_book_all_tickets(5, [(1, 1), (2, 2), (3, 3)]) # Output: True ``` # Notes 1. The function should check for any overlaps between bookings. 2. If a booking requests any ticket number that is already booked by a previous booking, or if a booking is out of the total number of tickets range, it should be considered as overlapping. 3. Ensure to handle edge cases where no bookings are inputted, or all bookings are within the available ticket range without any overlap.","solution":"from typing import List, Tuple def can_book_all_tickets(num_of_tickets: int, bookings: List[Tuple[int, int]]) -> bool: if not bookings: return True # Create a list to keep track of booked tickets booked = [0] * (num_of_tickets + 1) for start, end in bookings: if start < 1 or end > num_of_tickets or start > end: return False for i in range(start, end + 1): if booked[i] == 1: return False booked[i] = 1 return True"},{"question":"Task: Write a function **triangle_pattern** that generates a pattern based on a given integer `n` such that: * If `n` is 3 or less, the function should return an empty string. * The pattern consists of lines. Each line `i` (starting from 1) contains a sequence of numbers from 1 to `i`. * The total number of lines in the pattern is `n-1`. # Examples: triangle_pattern(4): 1 12 123 triangle_pattern(6): 1 12 123 1234 12345 ```Note:``` * Use n to jump to the next line. * There are no additional spaces between the numbers within the lines.","solution":"def triangle_pattern(n): Generates a triangle pattern based on the given integer n. Args: n: An integer Returns: A string representing the triangle pattern. Returns an empty string if n <= 3. if n <= 3: return \\"\\" lines = [] for i in range(1, n): lines.append(\\"\\".join(str(x) for x in range(1, i+1))) return \\"n\\".join(lines)"},{"question":"A company wants to optimize the allocation of its servers to handle customer requests efficiently. The company has m servers and receives n customer requests every second. Each server can handle at most one request per second. If a server is currently handling a request, it cannot take on another request until it finishes. To distribute the load effectively, the company follows a round-robin scheduling approach where each new request is assigned to the next available server in circular order. If all servers are occupied, the new request is dropped. Given the number of servers m and the number of requests n arriving each second, determine the number of requests that will be dropped every second. -----Input----- The input consists of two integers m and n (1 ≤ m, n ≤ 10^6) — the number of servers and the number of requests received every second. -----Output----- Print a single integer — the number of requests that will be dropped every second. -----Examples----- Input 3 5 Output 2 Input 4 4 Output 0 -----Note----- In the first sample, there are 3 servers and 5 requests per second. Using round-robin scheduling, the first 3 requests will be handled by the available servers, but the remaining 2 requests will be dropped since all servers are occupied. In the second sample, there are 4 servers and 4 requests per second. Each server will handle one request, leaving no requests to be dropped.","solution":"def dropped_requests(m, n): Returns the number of requests that will be dropped every second. Parameters: m (int): Number of servers. n (int): Number of requests per second. Returns: int: Number of requests dropped per second. if n <= m: return 0 else: return n - m"},{"question":"A company wants to figure out the minimum number of security cameras needed to monitor all of its buildings. Each building occupies a range of land on a 1-dimensional map. Given an array where each element is a tuple (start, end) representing the range of one building, determine the minimum number of cameras required such that every building is monitored by at least one camera. A camera can monitor any point from its position to an infinitely far position in both directions. Example 1: Input: buildings = [(1, 3), (2, 5), (8, 10)] Output: 2 Explanation: We can place cameras at positions 2 and 8. The first camera covers buildings (1, 3) and (2, 5). The second camera covers building (8, 10). Example 2: Input: buildings = [(1, 4), (2, 3), (10, 12), (6, 9)] Output: 3 Explanation: We can place cameras at positions 2, 8, and 10. The first camera covers buildings (1, 4) and (2, 3). The second camera covers building (6, 9). The third camera covers building (10, 12). Example 3: Input: buildings = [(0, 2), (1, 3), (4, 6), (5, 7), (8, 10)] Output: 3 Explanation: We can place cameras at positions 2, 6, and 9. The first camera covers buildings (0, 2) and (1, 3). The second camera covers buildings (4, 6) and (5, 7). The third camera covers building (8, 10). Note: The number of buildings will be in the range [1, 1000]. Each building’s start and end range will be in the range [0, 10000].","solution":"def min_cameras(buildings): # Sort buildings by their end points buildings.sort(key=lambda x: x[1]) cameras = 0 last_camera_position = -1 for start, end in buildings: if start > last_camera_position: # Place a new camera at the end of the current building last_camera_position = end cameras += 1 return cameras"},{"question":"Given an array of integers, you need to process multiple queries on this array to find the k-th smallest number in subarrays of different lengths. -----Input:----- - First line contains two integers N and Q, where N is the number of elements in the array and Q is the number of queries. - Second line contains N integers A_1, A_2, ..., A_N (elements of the array). - Each of the next Q lines contains three integers L, R, and K representing a query, where L and R define the subarray A_L, A_{L+1}, ..., A_R and K is the position (1-based) of the k-th smallest element to find in the subarray. -----Output:----- For each query, print the k-th smallest element in the corresponding subarray. If K is greater than the number of elements in the subarray, print -1. -----Constraints----- - 1 leq N, Q leq 10^5 - 1 leq A_i leq 10^9 - 1 leq L leq R leq N - 1 leq K leq N -----Sample Input:----- 6 3 5 3 8 6 2 7 1 4 3 2 5 2 1 6 5 -----Sample Output:----- 6 5 7 -----Explanation:----- Query 1: The subarray from index 1 to 4 is [5, 3, 8, 6]. The sorted subarray is [3, 5, 6, 8]. The 3rd smallest element is 6. Query 2: The subarray from index 2 to 5 is [3, 8, 6, 2]. The sorted subarray is [2, 3, 6, 8]. The 2nd smallest element is 3. Query 3: The subarray from index 1 to 6 is [5, 3, 8, 6, 2, 7]. The sorted subarray is [2, 3, 5, 6, 7, 8]. The 5th smallest element is 7.","solution":"def kthSmallestInSubarray(N, Q, array, queries): Returns the k-th smallest numbers for given subarrays based on the provided queries. Parameters: - N (int): Number of elements in the array - Q (int): Number of queries - array (list of int): The array of integers - queries (list of tuple): Each tuple contains three integers (L, R, K) Returns: - list of int: The k-th smallest elements for each query, or -1 if K is larger than subarray length. results = [] for L, R, K in queries: subarray = array[L-1:R] subarray.sort() if K > len(subarray): results.append(-1) else: results.append(subarray[K-1]) return results"},{"question":"=====Problem Statement===== Write a function that calculates the factorial of a given integer `n`. A factorial is defined as the product of an integer and all the integers below it. For instance, the factorial of 5 (denoted as 5!) is `5 * 4 * 3 * 2 * 1 = 120`. =====Example===== Given n = 4, your function should return 24 because `4! = 4 * 3 * 2 * 1 = 24`. =====Input Format===== A single integer, n. =====Constraints===== 0≤n≤12 =====Output Format===== Output a single integer which is the factorial of the input number.","solution":"def factorial(n): Returns the factorial of the given integer n. Factorial of n (n!) is defined as the product of all positive integers up to n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Write a function that takes a list of integers and an integer target value. The function should return the indices of the two numbers in the list that add up to the target value. Assume each input would have exactly one solution, and you may not use the same element twice. If no such indices exist in the list, return an empty list. For example: ```python find_indices([2, 7, 11, 15], 9) == [0, 1] find_indices([3, 2, 4], 6) == [1, 2] find_indices([3, 3], 6) == [0, 1] find_indices([2, 5, 5, 11], 10) == [1, 2] ```","solution":"def find_indices(nums, target): Returns indices of the two numbers in the list that add up to the target. Args: nums: List of integers. target: Integer target value. Returns: List of two indices. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"A farmer has a plot of land represented as a grid with ( m ) rows and ( n ) columns. Each cell in the grid can either be a fertile cell (denoted by 1) or a barren cell (denoted by 0). The farmer wants to create a rectangular farm of fertile land with the largest possible area. Your task is to help the farmer determine the maximum area of a rectangle containing only fertile cells in the grid. Note that a rectangle of cells is defined by its top-left and bottom-right corners, and all cells within those corners must be 1s for the rectangle to be valid. -----Input----- The first line of input contains two integers ( m ) and ( n ) (( 1 leq m, n leq 200 )), representing the number of rows and columns in the grid, respectively. The next ( m ) lines each contain ( n ) integers (either 0 or 1), representing the grid cells. -----Output----- Print a single integer denoting the area of the largest rectangular sub-grid of fertile land. -----Example----- Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 6 -----Note----- In the given example, the largest rectangle of cells containing only 1s has an area of 6. It can be found between rows 2 and 3, and columns 3 and 5 in the grid.","solution":"def maximalRectangle(matrix): Returns the area of the largest rectangle containing only 1s in a 2D binary matrix. if not matrix: return 0 max_area = 0 row_len = len(matrix[0]) height = [0] * (row_len + 1) # Include an extra element to handle the last histogram bar for row in matrix: for i in range(row_len): if row[i] == 0: height[i] = 0 else: height[i] += 1 stack = [-1] for i in range(row_len + 1): while height[i] < height[stack[-1]]: h = height[stack.pop()] w = i - 1 - stack[-1] max_area = max(max_area, h * w) stack.append(i) return max_area # Example usage: # m, n = 4, 5 # grid = [ # [1, 0, 1, 0, 0], # [1, 0, 1, 1, 1], # [1, 1, 1, 1, 1], # [1, 0, 0, 1, 0] # ] # print(maximalRectangle(grid)) # Output: 6"},{"question":"----- Given a 2D grid of characters and a word, determine if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. -----Input----- The first line of the input contains two integers T indicating the number of test cases. Each test case starts with two integers, R and C (row number and column number of the grid). The next R lines represent the grid, each containing C characters. The final line of the test case will be the word to be searched in the grid. -----Output----- For each test case, output \\"YES\\" if the word exists in the grid, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ R, C ≤ 100 - 1 ≤ length of word ≤ 100 -----Example----- Input: 2 3 4 A B C E S F C S A D E E ABCCED 3 4 A B C E S F C S A D E E ABCB Output: YES NO -----Explanation----- In the first test case, the word \\"ABCCED\\" can be found following the path \\"A->B->C->C->E->D\\". In the second test case, the word \\"ABCB\\" cannot be formed as the last \'B\' would need to use the same cell twice.","solution":"def exist(grid, word): rows, cols = len(grid), len(grid[0]) def dfs(r, c, idx): if idx == len(word): return True if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] != word[idx]: return False temp = grid[r][c] grid[r][c] = \'#\' # mark visited found = (dfs(r + 1, c, idx + 1) or dfs(r - 1, c, idx + 1) or dfs(r, c + 1, idx + 1) or dfs(r, c - 1, idx + 1)) grid[r][c] = temp # unmark visited return found for i in range(rows): for j in range(cols): if grid[i][j] == word[0] and dfs(i, j, 0): return \\"YES\\" return \\"NO\\" def word_search(T, cases): results = [] for grid, word in cases: results.append(exist(grid, word)) return results"},{"question":"Task In this challenge, you need to simulate the growth pattern of a Sierpinski Triangle, a fractal named after the Polish mathematician Wacław Sierpiński. ![Sierpinski Triangle](http://mathworld.wolfram.com/images/eps-gif/SierpinskiTriangle_700.gif) _An illustration of the iterative construction of a Sierpinski triangle_ The construction process is as follows: 1. Start with an equilateral triangle. 2. Subdivide this triangle into four smaller congruent equilateral triangles and remove the central triangle. 3. Repeat the process recursively for each of the remaining smaller triangles. Each iteration essentially creates more \\"holes\\" within the structure, leading to a characteristic fractal appearance. Task Create a function that takes a non-negative integer `n` as an input and returns the number of remaining smaller triangles in a Sierpinski Triangle after `n` iterations. Example ``` calc_st(0) == 1 calc_st(1) == 3 calc_st(2) == 9 calc_st(3) == 27 calc_st(4) == 81 calc_st(5) == 243 calc_st(6) == 729 ``` Happy coding!","solution":"def calc_st(n): Returns the number of remaining smaller triangles in a Sierpinski Triangle after n iterations. return 3**n"},{"question":"A factory produces a variety of products, each of which consists of a list of components. Each component can further be broken down into sub-components, which can also be broken down further, and so on. The factory keeps track of components using a mapping `Dict[str, List[str]]`, where the key is a component name and the value is the list of its direct sub-components. Write a function that, given this mapping and a product name, returns a list of all the unique sub-components required to build the product, sorted in lexicographical order. Example 1: Input: components = { \\"ProductA\\": [\\"Component1\\", \\"Component2\\"], \\"Component1\\": [\\"Component3\\", \\"Component4\\"], \\"Component2\\": [\\"Component3\\", \\"Component5\\"], \\"Component3\\": [], \\"Component4\\": [], \\"Component5\\": [] } product = \\"ProductA\\" Output: [\\"Component1\\", \\"Component2\\", \\"Component3\\", \\"Component4\\", \\"Component5\\"] Example 2: Input: components = { \\"Widget\\": [\\"Panel\\", \\"Battery\\"], \\"Panel\\": [\\"Button\\", \\"Display\\"], \\"Battery\\": [], \\"Button\\": [], \\"Display\\": [] } product = \\"Widget\\" Output: [\\"Battery\\", \\"Button\\", \\"Display\\", \\"Panel\\"] Note: 1. The product itself should not be included in the returned list. 2. The input dictionary is guaranteed to represent a valid hierarchical structure with no cycles.","solution":"def get_all_subcomponents(components, product): Given a dictionary mapping components to their sub-components, and a product, this function returns a sorted list of all unique sub-components required to build the product. def collect_subcomponents(component, subcomponents): for sub in components.get(component, []): if sub not in subcomponents: subcomponents.add(sub) collect_subcomponents(sub, subcomponents) subcomponents = set() collect_subcomponents(product, subcomponents) return sorted(subcomponents)"},{"question":"A programming competition is around the corner and Sarah wants to prepare for it. She is practicing with different problems and came across an interesting one involving DNA strands. A common task in DNA analysis involves computing the number of times a particular pattern (also known as a \\"motif\\") appears in a given DNA sequence. Can you help Sarah write a program that counts the number of occurrences of a motif within a DNA sequence? -----Input----- The first line will contain a single integer T, representing the number of test cases. For each test case, there will be two lines: - The first line contains a string representing the DNA sequence. - The second line contains a string representing the motif. -----Output----- For each test case, output a single integer representing the number of times the motif appears in the DNA sequence. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ length of DNA sequence ≤ 10,000 - 1 ≤ length of motif ≤ 100 - The DNA sequence and motif will only contain the characters \'A\', \'C\', \'G\', and \'T\'. -----Example----- Input: 3 ACGTACGTACGT CGT AAGTCGAAGTCA AAG TTTTT TT Output: 3 2 4 -----Explanation----- First test case: The motif \\"CGT\\" appears three times in \\"ACGTACGTACGT\\". Second test case: The motif \\"AAG\\" appears two times in \\"AAGTCGAAGTCA\\". Third test case: The motif \\"TT\\" appears four times in \\"TTTTT\\".","solution":"def count_motif_occurrences(dna_sequence, motif): Returns the number of times the motif appears in the DNA sequence. count = 0 motif_length = len(motif) for i in range(len(dna_sequence) - motif_length + 1): if dna_sequence[i:i+motif_length] == motif: count += 1 return count def process_test_cases(test_cases): results = [] for dna_sequence, motif in test_cases: results.append(count_motif_occurrences(dna_sequence, motif)) return results"},{"question":"Write a function `max_rectangle_area(matrix)` that takes a 2D binary matrix filled with 0\'s and 1\'s and returns the area of the largest rectangle containing only 1\'s. For example: ```python matrix = [ [1, 1, 0, 1], [1, 1, 1, 1], [0, 1, 1, 0], [0, 1, 1, 1] ] max_rectangle_area(matrix) # returns 6 matrix = [ [0, 1, 0, 0, 1], [1, 1, 1, 1, 0], [1, 1, 1, 1, 0], [0, 0, 1, 0, 0], [0, 1, 1, 1, 1] ] max_rectangle_area(matrix) # returns 8 ``` Constraints: - Rows of the matrix: 1 ≤ len(matrix) ≤ 200 - Columns of the matrix: 1 ≤ len(matrix[0]) ≤ 200 - Each element in the matrix is either 0 or 1","solution":"def max_histogram_area(heights): Helper function to find the maximum rectangular area under a histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle_area(matrix): if not matrix or not matrix[0]: return 0 rows = len(matrix) cols = len(matrix[0]) heights = [0] * cols max_area = 0 for i in range(rows): for j in range(cols): heights[j] = heights[j] + 1 if matrix[i][j] == 1 else 0 max_area = max(max_area, max_histogram_area(heights)) return max_area"},{"question":"Travel Distance for Multiple Cities You are given a task to compute the total travel distance for a salesman who needs to visit a set of cities exactly once and return to the starting point, following the shortest possible route. This is known as the Traveling Salesman Problem (TSP). However, to simplify the problem, you are provided with direct distances between each pair of cities and have to calculate the direct travel distances only. Input: - ```distances``` – a list of tuples containing direct distances between pairs of cities. Each tuple is in the format ```(city1, city2, distance)```. - ```cities``` – a list of the cities that need to be visited. Output: - float representing the total travel distance covering all the cities exactly once and returning to the starting city. Example: - ```travel_distance([(\'A\', \'B\', 10), (\'A\', \'C\', 15), (\'B\', \'C\', 20), (\'B\', \'A\', 10), (\'C\', \'A\', 15), (\'C\', \'B\', 20)], [\'A\', \'B\', \'C\'])``` - should return ```45.0``` representing the shortest path ```A -> B -> C -> A```. Notes: - The number of cities will not exceed 20. - The distance between any pair of cities is positive and can be as large as 1000. - Each city pair with distance is bidirectional unless otherwise stated (e.g., distance from A to B is same as from B to A if mentioned only once). - There are no duplicate entries and no distance from a city to itself. - The cities are represented by unique strings (not limited to single characters). You can assume that the input will always be valid and will always contain sufficient distances specifications to solve the problem.","solution":"import itertools def travel_distance(distances, cities): Calculate the shortest travel distance to cover all cities exactly once and return to the start. Arguments: distances -- list of tuples each containing (city1, city2, distance) cities -- list of cities to be visited Returns: float -- total minimum travel distance # Create a dictionary for distances for quick lookup distance_dict = {} for city1, city2, dist in distances: distance_dict[(city1, city2)] = dist distance_dict[(city2, city1)] = dist def total_distance(route): return sum(distance_dict[(route[i], route[i + 1])] for i in range(len(route) - 1)) all_city_orders = itertools.permutations(cities) min_distance = float(\'inf\') for order in all_city_orders: route = list(order) + [order[0]] dist = total_distance(route) if dist < min_distance: min_distance = dist return min_distance"},{"question":"You are given an array of integers nums representing n houses, each house being in a circle. Each house has a certain amount of money stashed. It will take some time to rob a house, so you cannot rob two adjacent houses, and since the houses are arranged in a circle, the first and the last houses are also adjacent. Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. Example 1: Input: nums = [2,3,2] Output: 3 Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. Example 2: Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Example 3: Input: nums = [0] Output: 0","solution":"def rob(nums): Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. The houses are arranged in a circle, so the first and last houses are also adjacent. if not nums: return 0 if len(nums) == 1: return nums[0] def rob_linear(nums): prev, curr = 0, 0 for num in nums: prev, curr = curr, max(curr, prev + num) return curr # Compare the results of two scenarios: # 1. Rob houses from the first to the second-last # 2. Rob houses from the second to the last return max(rob_linear(nums[:-1]), rob_linear(nums[1:]))"},{"question":"In this problem, you need to write a function that processes a sequence of integer numbers and performs a specified number of rotations. A rotation operation moves the last element of the sequence to the front. For instance, given the sequence `1, 2, 3, 4, 5` and one rotation, the sequence becomes `5, 1, 2, 3, 4`. Your task is to read the provided sequence and the number of rotations, perform the rotations on the sequence, and then print the resulting sequence. -----Input:----- The first line of input contains a single integer N, indicating the number of integers in the sequence. The second line contains N space-separated integers, representing the sequence of numbers. The third line contains a single integer R, indicating the number of rotations to be performed. -----Output:----- A single line containing N space-separated integers which represent the sequence after performing R rotations. -----Constraints:----- - 1 leq N leq 10000. - -1000 leq each integer in the sequence leq 1000. - 0 leq R leq 10000 -----Sample input----- 5 1 2 3 4 5 1 -----Sample output----- 5 1 2 3 4 **Explanation:** Initially, the sequence is `1, 2, 3, 4, 5`. After one rotation, the sequence becomes `5, 1, 2, 3, 4`. Another example: -----Sample input----- 6 7 8 9 10 11 12 3 -----Sample output----- 10 11 12 7 8 9 **Explanation:** Initially, the sequence is `7, 8, 9, 10, 11, 12`. After three rotations, the sequence becomes `10, 11, 12, 7, 8, 9`.","solution":"def rotate_sequence(N, sequence, R): Rotates the given sequence R times where each rotation moves the last element to the front. Parameters: N (int): The number of integers in the sequence. sequence (list of int): The sequence of integers. R (int): The number of rotations to be performed. Returns: list of int: The sequence after performing R rotations. if N == 0: return [] R = R % N # Effective rotations needed when R >= N return sequence[-R:] + sequence[:-R]"},{"question":"Create a function that takes a string and returns the first non-repeated character. If there is no such character, return an empty string. # Input Specifications - The input is a single string `s` (with 1 <= s.length <= 1000), consisting of only lowercase alphabetic characters. # Output Specifications - The function should return a single character string representing the first non-repeated character. - If all characters are repeated, return an empty string. # Example ``` \\"swiss\\" --> \\"w\\" \\"aabbcc\\" --> \\"\\" \\"alphabet\\" --> \\"l\\" ``` # Notes - Consider using a map or dictionary to count occurrences of each character. - Iterate through the string to find the first character with a count of 1.","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the string s. If there is no such character, returns an empty string. # Dictionary to store count of each character char_count = {} # Iterate through the string and count characters for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Iterate through the string again to find the first non-repeated character for char in s: if char_count[char] == 1: return char # If no non-repeated character is found, return an empty string return \\"\\""},{"question":"You are given an array of N positive integers and a positive integer K. You need to find the K^{th} smallest element after sorting the array in non-decreasing order. The array may be very large, so an efficient algorithm is required to solve the problem within reasonable time limits. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains two integers N and K. - The second line contains N positive integers, the elements of the array. -----Output:----- For each test case, print a single line containing one integer -- the K^{th} smallest element in the sorted array. -----Constraints:----- - 1 leq T leq 10^5 - 1 leq N leq 10^5 - 1 leq K leq N - 1 leq array element leq 10^9 -----Sample Input:----- 3 5 3 7 10 4 3 20 6 2 1 2 3 4 5 6 4 1 10 2 8 6 -----Sample Output:----- 7 2 2 -----Explanation:----- Test Case 1: The array is [7, 10, 4, 3, 20]. After sorting, it becomes [3, 4, 7, 10, 20]. The 3^{rd} smallest element is 7. Test Case 2: The array is [1, 2, 3, 4, 5, 6]. It is already sorted. The 2^{nd} smallest element is 2. Test Case 3: The array is [10, 2, 8, 6]. After sorting, it becomes [2, 6, 8, 10]. The 1^{st} smallest element is 2.","solution":"def kth_smallest_element(T, test_cases): results = [] for i in range(T): N, K, array = test_cases[i] sorted_array = sorted(array) results.append(sorted_array[K-1]) return results # Example usage: kth_smallest_element(3, [(5, 3, [7, 10, 4, 3, 20]), (6, 2, [1, 2, 3, 4, 5, 6]), (4, 1, [10, 2, 8, 6])])"},{"question":"Calculate Median of Merged Arrays Complete the function to find the median of two sorted arrays of integers. # Input: - Two sorted arrays of integers `arr1` and `arr2`. # Output: - One integer representing the median of the merged array formed by merging `arr1` and `arr2`. # Example: Given two sorted arrays: ``` arr1 = [1, 3, 8] arr2 = [7, 9, 10, 12] ``` Merging these arrays: ``` merged = [1, 3, 7, 8, 9, 10, 12] ``` The median value is 8. # Note: - You can assume that `arr1` and `arr2` will not be empty. - An efficient solution aiming for O(log(min(n, m))) complexity is preferred but not necessary. # Function Signature ```python def findMedianSortedArrays(arr1, arr2): # Your code here ```","solution":"def findMedianSortedArrays(arr1, arr2): Finds the median of two sorted arrays by merging them and then calculating the median. Parameters: arr1 (list): First sorted list of integers arr2 (list): Second sorted list of integers Returns: float: The median of the merged arrays # Merging the two sorted arrays merged = arr1 + arr2 merged.sort() # Calculating the median n = len(merged) if n % 2 == 1: # Odd number of elements median = merged[n // 2] else: # Even number of elements median = (merged[n // 2 - 1] + merged[n // 2]) / 2.0 return median"},{"question":"# Task Description: Write a function `extract_subsequence` that evaluates whether a given subsequence exists in a given sequence, and if it does, returns the starting and ending indices of the first occurrence of the subsequence. If the subsequence does not exist, the function should return `[-1, -1]`. # Function Signature: ```python def extract_subsequence(sequence: str, subsequence: str) -> list: pass ``` # Parameters: 1. `sequence` (a string): The main sequence in which you need to find the subsequence. 2. `subsequence` (a string): The subsequence you need to search for within the main sequence. # Return Value: - A list containing two integers: 1. The starting index of the first occurrence of the subsequence. 2. The ending index of the first occurrence of the subsequence. - If the subsequence is not found within the sequence, return `[-1, -1]`. # Examples: ```python extract_subsequence(\\"abracadabra\\", \\"cada\\") -> [4, 7] extract_subsequence(\\"hello world\\", \\"world\\") -> [6, 10] extract_subsequence(\\"coding is fun\\", \\"is\\") -> [7, 8] extract_subsequence(\\"coding is fun\\", \\"xyz\\") -> [-1, -1] ``` # Implementation Notes: - Assume the indices are zero-based. - The function must handle edge cases where the subsequence is longer than the sequence or where either string is empty. - Optimize the function to handle inputs efficiently even for relatively long sequences.","solution":"def extract_subsequence(sequence: str, subsequence: str) -> list: Finds the starting and ending indices of the first occurrence of subsequence in sequence. If the subsequence is not found, returns [-1, -1]. # Find the starting index of the subsequence start_index = sequence.find(subsequence) # If the subsequence is not found, return [-1, -1] if start_index == -1: return [-1, -1] # Calculate the ending index end_index = start_index + len(subsequence) - 1 return [start_index, end_index]"},{"question":"A valid Sudoku board (partially filled) is a 9x9 grid where each cell can contain digits from 1 to 9 or be empty. A Sudoku board must satisfy the following three rules: - Each row must contain the digits 1-9 without repetition. - Each column must contain the digits 1-9 without repetition. - Each of the nine 3x3 sub-boxes must contain the digits 1-9 without repetition. You are given a partially filled Sudoku board represented as a 9x9 2D array. Write a function `isValidSudoku(board)` that returns a boolean indicating whether the given board is a valid Sudoku configuration according to the rules mentioned above. The board may contain empty cells represented by the character \'.\'. # Example ```python boardisValidSudoku(board) # Output: True ``` # Constraints - The board is a 9x9 2D array without any other cells beyond this size. - The board cells contain only digits \'1\'-\'9\' or the character \'.\'.","solution":"def isValidSudoku(board): Checks if the given 9x9 Sudoku board is valid according to the rules mentioned in the prompt. def isValidBlock(block): Helper function to check if a block (row, column, or 3x3 sub-box) is valid. seen = [x for x in block if x != \'.\'] return len(seen) == len(set(seen)) # Check rows for row in board: if not isValidBlock(row): return False # Check columns for col in range(9): if not isValidBlock([board[row][col] for row in range(9)]): return False # Check 3x3 sub-boxes for box_row in range(3): for box_col in range(3): if not isValidBlock([board[row][col] for row in range(box_row*3, (box_row+1)*3) for col in range(box_col*3, (box_col+1)*3)]): return False return True"},{"question":"You are working with a smart home automation system where devices can be programmed to turn on and off at specific times. One of the features of the system is to adjust the time settings according to daylight savings. Given a list of device schedules and a boolean indicating the activation of daylight savings (DST), write a function that adjusts the schedules accordingly. The schedules are represented as a list of tuples where each tuple contains a device identifier (string) and its activation time (string in \\"HH:MM\\" 24-hour format). If DST is true, all times should be moved forward by one hour. If DST is false, the times remain unchanged. Examples: ```python adjust_schedule([(\\"Heater\\", \\"13:45\\"), (\\"Lights\\", \\"06:30\\"), (\\"Sprinkler\\", \\"05:00\\")], True) # Output: [(\\"Heater\\", \\"14:45\\"), (\\"Lights\\", \\"07:30\\"), (\\"Sprinkler\\", \\"06:00\\")] adjust_schedule([(\\"Heater\\", \\"23:30\\"), (\\"Lights\\", \\"22:15\\")], True) # Output: [(\\"Heater\\", \\"00:30\\"), (\\"Lights\\", \\"23:15\\")] adjust_schedule([(\\"Heater\\", \\"23:30\\"), (\\"Lights\\", \\"22:15\\")], False) # Output: [(\\"Heater\\", \\"23:30\\"), (\\"Lights\\", \\"22:15\\")] ```","solution":"def adjust_schedule(schedules, dst): Adjusts the device schedules according to daylight savings. Parameters: schedules (list of tuples): list of device schedules (device_id, \\"HH:MM\\") dst (bool): True if daylight savings is active, otherwise False Returns: list of tuples: Adjusted schedules if not dst: return schedules adjusted_schedules = [] for device, time in schedules: hours, minutes = map(int, time.split(\':\')) new_hours = (hours + 1) % 24 adjusted_schedules.append((device, f\\"{new_hours:02}:{minutes:02}\\")) return adjusted_schedules"},{"question":"Create a function that takes a string containing only lowercase English letters and returns the first non-repeating character. If there is no non-repeating character, return an underscore `_`. Example ```python input = \\"abacabad\\" # The first non-repeating character is \'c\' because it appears once and does not repeat input = \\"abacabaabacaba\\" # There are no non-repeating characters, so the function should return \'_\' ``` Develop your solution considering the optimal performance for larger input strings.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns \'_\'. char_count = {} # Count the occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that has a count of 1 for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"The task requires you to implement a simple text editor with undo/redo functionality. The editor should support the following operations: 1. **Append(str)**: Appends the string `str` to the end of the current text. 2. **Delete(n)**: Deletes the last `n` characters from the current text. 3. **Undo()**: Undoes the last operation (either append or delete). If no operations are left to undo, the text remains unchanged. 4. **Redo()**: Redoes the last undone operation. If no operations are left to redo, the text remains unchanged. Your task is to implement the `TextEditor` class with methods for each of the above operations. You must also handle an initial empty string. Here is the skeleton of the `TextEditor` class for you to complete: ```python class TextEditor: def __init__(self): # Initialize the state pass def append(self, str): # Implement append functionality pass def delete(self, n): # Implement delete functionality pass def undo(self): # Implement undo functionality pass def redo(self): # Implement redo functionality pass # Example Usage editor = TextEditor() editor.append(\\"Hello\\") editor.append(\\" World\\") editor.delete(6) editor.undo() editor.redo() ``` Ensure that: - The `append` method correctly appends the given string. - The `delete` method removes the last `n` characters from the current text. - The `undo` method reverts the last append or delete operation. - The `redo` method re-performs the last undone operation.","solution":"class TextEditor: def __init__(self): self.text = \\"\\" self.history = [] self.redo_stack = [] def append(self, string): self.history.append(self.text) self.text += string self.redo_stack = [] # clear redo stack when new changes are made def delete(self, n): self.history.append(self.text) self.text = self.text[:-n] self.redo_stack = [] # clear redo stack when new changes are made def undo(self): if self.history: self.redo_stack.append(self.text) self.text = self.history.pop() def redo(self): if self.redo_stack: self.history.append(self.text) self.text = self.redo_stack.pop() def get_text(self): return self.text"},{"question":"-----Question:----- In a faraway land, there lives a king who has a unique way of rewarding his people. The king loves even numbers and hates odd numbers. As a reward, the king wants to give gold coins to his citizens based on the numbers provided by his advisors. For each number in the list given by the advisors: - If the number is even, add it to a sum of even numbers. - If the number is odd, multiply it to a product of odd numbers. The task at hand is to calculate the sum of all even numbers and the product of all odd numbers from the given list of numbers. -----Input:----- - The first line of input contains an integer N, the number of elements in the given list. - The next line contains N space-separated integers which represent the list of numbers provided by the advisors. -----Output:----- - Output the sum of all even numbers and the product of all odd numbers in a single line separated by a space. -----Constraints:----- - 1 leq N leq 10^6 - 1 leq Each number in the list leq 10^9 - There will be at least one even number and one odd number in the list. -----Sample Input:----- 5 2 3 4 5 6 -----Sample Output:----- 12 15","solution":"def calculate_even_sum_and_odd_product(numbers): Calculates the sum of all even numbers and the product of all odd numbers in the given list. Parameters: numbers (list): List of integers. Returns: tuple: A tuple containing the sum of all even numbers and the product of all odd numbers. even_sum = 0 odd_product = 1 for num in numbers: if num % 2 == 0: even_sum += num else: odd_product *= num return even_sum, odd_product"},{"question":"Create a function `reverse_words` that takes a string as input, and returns a new string with the words in reverse order. The function should handle multiple spaces between words and leading or trailing spaces gracefully. # Function Signature ```python def reverse_words(s: str) -> str: pass ``` # Input - A single string `s` containing words separated by spaces. # Output - A string with the words in reverse order and any multiple spaces reduced to a single space. # Examples ```python reverse_words(\\" hello world \\") # returns \\"world hello\\" reverse_words(\\"a good example\\") # returns \\"example good a\\" reverse_words(\\" Bob Loves Alice \\") # returns \\"Alice Loves Bob\\" reverse_words(\\"Alice does not even like bob\\") # returns \\"bob like even not does Alice\\" ```","solution":"def reverse_words(s: str) -> str: Returns a new string with the words in reverse order. Handles leading or trailing spaces and multiple spaces between words. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"In this coding challenge, you will be tasked with evaluating a string representing a mathematical expression composed of only integers and the basic operators `+, -, *, /`. Your goal is to compute the result while respecting operator precedence. ```Haskell evaluate(\\"3+5*2\\") = 13 evaluate(\\"10+2*6\\") = 22 evaluate(\\"100*2+12\\") = 212 evaluate(\\"100*(2+12)\\") = 1400 evaluate(\\"100*(2+12)/14\\") = 100 ``` The expression will always be valid and will not contain any spaces. Implement an expression evaluator that correctly calculates the result. Follow standard mathematical rules for operator precedence: multiplication and division have higher precedence over addition and subtraction, and expressions within parentheses must be evaluated first. Good luck!","solution":"def evaluate(expression): Evaluates a string mathematical expression and returns the computed result. import re import operator def parse_expression(expression): return re.findall(r\'d+|+|-|*|/|(|)\', expression) def apply_op(operators, values): right = values.pop() left = values.pop() op = operators.pop() operators_func = { \'+\': operator.add, \'-\': operator.sub, \'*\': operator.mul, \'/\': operator.floordiv } values.append(operators_func[op](left, right)) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def evaluate_tokens(tokens): values = [] operators = [] i = 0 while i < len(tokens): token = tokens[i] if token.isdigit(): values.append(int(token)) elif token == \'(\': operators.append(token) elif token == \')\': while operators and operators[-1] != \'(\': apply_op(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(token)): apply_op(operators, values) operators.append(token) i += 1 while operators: apply_op(operators, values) return values[-1] tokens = parse_expression(expression) return evaluate_tokens(tokens)"},{"question":"# Task You\'re given a string `str`. Your task is to determine the length of the longest substring without repeating characters. # Input/Output - `[input]` string `str` A non-empty string of lower and/or upper case English letters. `1 ≤ str.length ≤ 100` - `[output]` an integer The length of the longest substring without repeating characters. # Example For ``` str = \\"abcabcbb\\" ``` the result should be `3` since the substring \\"abc\\" is the longest substring without repeating characters. For ``` str = \\"bbbbb\\" ``` the result should be `1` since the substring \\"b\\" is the longest substring without repeating characters. For ``` str = \\"pwwkew\\" ``` the result should be `3` since the substring \\"wke\\" is the longest substring without repeating characters.","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. :param s: Input string :return: The length of the longest substring without repeating characters char_index_map = {} start = max_length = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"Write a function called `is_prime` which takes a single integer argument and returns a boolean indicating whether the number is a prime number. A number is considered prime if it is greater than 1 and cannot be exactly divided by any number other than 1 and itself. For example: - `is_prime(2)` should return `True` - `is_prime(4)` should return `False` - `is_prime(17)` should return `True` You can assume that the input will always be a non-negative integer.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False # any other even number is not a prime for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Task You are given a square grid of characters and a word. Your task is to determine if the word can be constructed in the grid by sequentially adjacent characters. \\"Adjacent\\" characters are horizontally, vertically, or diagonally neighboring. The same letter cell may not be used more than once. Write a function `canConstructWord(grid, word)` that returns `True` if the word can be constructed in the grid and `False` otherwise. Input - `grid`: A list of lists of single lowercase letters. - `word`: A string consisting of lowercase letters, with a length greater than 0 and less than or equal to 10. Output - Return `True` if the word can be constructed, else return `False`. Constraints - The dimension of the grid (both rows and columns) will be between 1 and 10. - The characters in `word` are guaranteed to appear in the grid. Example ```python grid = [ [\'a\', \'b\', \'c\', \'e\'], [\'s\', \'f\', \'c\', \'s\'], [\'a\', \'d\', \'e\', \'e\'] ] word = \\"abcced\\" print(canConstructWord(grid, word)) # Output: True word = \\"see\\" print(canConstructWord(grid, word)) # Output: True word = \\"abcb\\" print(canConstructWord(grid, word)) # Output: False ```","solution":"def canConstructWord(grid, word): rows, cols = len(grid), len(grid[0]) word_len = len(word) def is_valid(x, y, index, visited): if index == word_len: return True if x < 0 or y < 0 or x >= rows or y >= cols or (x, y) in visited: return False if grid[x][y] != word[index]: return False visited.add((x, y)) # Check all 8 possible directions (horizontally, vertically, diagonally) directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] for dx, dy in directions: if is_valid(x + dx, y + dy, index + 1, visited): return True visited.remove((x, y)) return False for i in range(rows): for j in range(cols): if grid[i][j] == word[0]: if is_valid(i, j, 0, set()): return True return False"},{"question":"Given an array of integers, return a new array such that each element at index `i` of the new array is the sum of all the numbers in the original array except the one at `i`. For example: ``` Input: [1, 2, 3, 4, 5] Output: [14, 13, 12, 11, 10] Input: [3, 6, 4, 8, 9] Output: [27, 24, 26, 22, 21] ``` You may not use division in your solution. Write a function `sum_except_self(arr)` that takes `arr`, an array of integers, and returns an array where each element is the sum of all other elements except the one at that index.","solution":"def sum_except_self(arr): Given an array of integers, return a new array such that each element at index i of the new array is the sum of all the numbers in the original array except the one at i. # First compute the total sum of the array total_sum = sum(arr) # Then build the result array where each element at index i is total_sum - arr[i] result = [total_sum - num for num in arr] return result"},{"question":"You are given a string s, and you need to perform operations on the string to make it empty. In one operation, you can remove any one of its substrings that is a palindrome. Your task is to determine the minimum number of operations required to make the string empty. A string is called a palindrome if it reads the same backward as forward. Example 1: Input: s = \\"ababa\\" Output: 1 Explanation: The entire string \\"ababa\\" is a palindrome hence can be removed in a single operation. Example 2: Input: s = \\"aabb\\" Output: 2 Explanation: We can remove the palindromic substring \\"aa\\" in the first operation and \\"bb\\" in the second, making the string empty. Example 3: Input: s = \\"abcd\\" Output: 4 Explanation: Since no palindromic substrings longer than 1 character exist, we have to remove each character individually. Note: - s consists only of lowercase English letters. - The length of s is in the range [1, 1000].","solution":"def min_operations_to_empty_string(s): Returns the minimum number of operations required to make the string empty by removing palindromic substrings. if s == s[::-1]: return 1 # If the entire string is a palindrome, remove it in one operation return 2 # If the string is not a palindrome, at most two operations are needed: one for non-palindromic part"},{"question":"Write a function that takes an array of integers and an integer k as arguments. The function should return the k most frequent elements in the array. If there are multiple elements with the same frequency, prioritize the smaller number. Try to find a solution with a time complexity better than O(n log n). __Example:__ __Input:__ arr = [1,1,1,2,2,3] k = 2 __Output:__ [1, 2] __Explanation:__ 1 appears three times, 2 appears twice, and 3 appears once. Since k is 2, the two most frequent elements are 1 and 2. As 1 has a higher frequency than 2, it appears first in the output.","solution":"from collections import Counter import heapq def top_k_frequent(arr, k): Returns the k most frequent elements in the array. If there are multiple elements with the same frequency, prioritize the smaller number. # Count the frequency of each element frequency = Counter(arr) # Create a min-heap based on frequency and if frequencies are equal, prioritize the smaller number heap = [(-freq, num) for num, freq in frequency.items()] heapq.heapify(heap) # Extract k elements from the heap top_k_elements = [heapq.heappop(heap)[1] for _ in range(k)] return sorted(top_k_elements, key=lambda x: (-frequency[x], x))"},{"question":"# Task You are given a binary tree where each node contains an integer value. Your task is to determine whether the binary tree is a **BST (Binary Search Tree)**. A binary tree is a BST if for every node, all the nodes in its left subtree have values smaller than the node’s value, and all the nodes in its right subtree have values larger than the node’s value. Write a function `is_bst(root)` to determine if the given tree is a BST. The function should return `True` if the binary tree is a valid BST, and `False` otherwise. # Example Given the binary tree: ``` 2 / 1 3 ``` `is_bst` should return `True`. Given the binary tree: ``` 5 / 1 4 / 3 6 ``` `is_bst` should return `False` because the node `3` is in the right subtree of `5` and should not be there. # Input/Output - `[input]` TreeNode `root` - A TreeNode representing the root of the binary tree. Each `TreeNode` has the following structure: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` - `[output]` boolean - Returns `True` if the binary tree is a BST, and `False` otherwise.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_bst(root): Determines whether the given binary tree is a binary search tree (BST). def validate(node, low=float(\'-inf\'), high=float(\'inf\')): # An empty tree is a valid BST if node is None: return True # The current node\'s value must be within the given range if node.val <= low or node.val >= high: return False # The left subtree must be valid and its values should be less than the current node\'s value # The right subtree must be valid and its values should be greater than the current node\'s value return (validate(node.left, low, node.val) and validate(node.right, node.val, high)) return validate(root)"},{"question":"Given a string `s`, write a function to determine if it is a valid palindrome, considering only alphanumeric characters and ignoring cases. For this problem, define a palindrome as a string that reads the same backward as forward. Example 1: Input: \\"A man, a plan, a canal: Panama\\" Output: true Explanation: \\"amanaplanacanalpanama\\" is a valid palindrome. Example 2: Input: \\"race a car\\" Output: false Explanation: \\"raceacar\\" is not a valid palindrome. Example 3: Input: \\" \\" Output: true Explanation: An empty string is considered a valid palindrome. Note: - s consists only of printable ASCII characters.","solution":"def is_palindrome(s: str) -> bool: Determines if the given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. # Filter alphanumeric characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"Create a function that accepts a list of integers and returns a string indicating the type of sequence the numbers form. The possible return values should be: - \\"Arithmetic\\": if the numbers form an arithmetic sequence. - \\"Geometric\\": if the numbers form a geometric sequence. - \\"Neither\\": if the numbers do not form either an arithmetic or geometric sequence. An arithmetic sequence is a sequence of numbers such that the difference between subsequent numbers is constant. A geometric sequence is a sequence of numbers such that the ratio between subsequent numbers is constant. You can assume the list will have at least two integers. ```python def sequence_type(nums): pass ``` Examples: ```python sequence_type([2, 4, 6, 8]) -> \\"Arithmetic\\" sequence_type([3, 9, 27]) -> \\"Geometric\\" sequence_type([1, 2, 4, 8]) -> \\"Geometric\\" sequence_type([1, 5, 10, 15]) -> \\"Neither\\" ```","solution":"def sequence_type(nums): if len(nums) < 2: return \\"Neither\\" is_arithmetic = True is_geometric = True # Check for arithmetic sequence common_difference = nums[1] - nums[0] for i in range(1, len(nums)): if nums[i] - nums[i - 1] != common_difference: is_arithmetic = False break # Check for geometric sequence if nums[0] == 0: is_geometric = False else: common_ratio = nums[1] / nums[0] for i in range(1, len(nums)): if nums[i] == 0 or nums[i] / nums[i - 1] != common_ratio: is_geometric = False break if is_arithmetic: return \\"Arithmetic\\" elif is_geometric: return \\"Geometric\\" else: return \\"Neither\\""},{"question":"-----Question:----- You are given an integer array `arr` of size `n` and an integer `k`. Your task is to find the maximum sum of any contiguous subarray of length `k`. For example, consider the following input: ``` arr = [2, 1, 5, 1, 3, 2] k = 3 ``` The contiguous subarrays of length `k=3` are: - `[2, 1, 5]` with sum `8` - `[1, 5, 1]` with sum `7` - `[5, 1, 3]` with sum `9` - `[1, 3, 2]` with sum `6` The maximum sum among these subarrays is `9`, so the output should be `9`. -----Input:----- The first line of input contains two integers `n` and `k`, where `n` is the size of the array and `k` is the length of the subarray. The second line contains `n` space-separated integers representing the elements of the array `arr`. -----Output:----- Output a single integer which is the maximum sum of any contiguous subarray of length `k`. -----Constraints:----- - `1 leq n leq 100000` - `1 leq k leq n` - `-1000 leq arr[i] leq 1000` -----Sample Input----- 6 3 2 1 5 1 3 2 -----Sample Output----- 9","solution":"def max_sum_subarray(arr, n, k): Returns the maximum sum of any contiguous subarray of length k. # Calculate the sum of the first subarray of length k max_sum = current_sum = sum(arr[:k]) # Slide the window across the array for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Design a function `island_count` that counts the number of distinct islands in a given 2D grid. An island is made up of 1s (land) and is surrounded by water represented by 0s. The \\"islands\\" are connected horizontally or vertically, not diagonally. # Input: - A 2D list of integers `grid` where each integer is either 0 (water) or 1 (land). # Output: - An integer representing the number of distinct islands in the grid. # Example: ```python grid = [ [1, 1, 0, 0, 0], [1, 1, 0, 0, 1], [0, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 1] ] island_count(grid) # 4 ``` # Notes: - The dimensions of `grid` are 1 <= m, n <= 50, where `m` is the number of rows and `n` is the number of columns in `grid`. - The function should handle both small and large grids efficiently. # Hints: - Consider using depth-first search (DFS) or breadth-first search (BFS) to explore each island. - Make sure to mark the visited land pieces to avoid counting the same island multiple times.","solution":"def island_count(grid): Count the number of distinct islands in the given 2D grid. Args: - grid: List[List[int]] - A 2D list of integers where 0 represents water and 1 represents land. Returns: - int: The number of distinct islands in the grid. if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0: return grid[r][c] = 0 # Mark the land as visited by sinking it (setting it to 0) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Down, Up, Right, Left for dr, dc in directions: dfs(r + dr, c + dc) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: # Found an unvisited piece of land island_count += 1 dfs(r, c) return island_count"},{"question":"Description: In the context of competitive programming and algorithm challenges, it is often essential to handle large numbers efficiently, especially when dealing with factorials. While calculating the factorial of a number is straightforward, the real challenge arises when the number becomes very large, resulting in integers that are difficult to handle using conventional data types. Your task is to implement a function that computes the factorial of a given non-negative integer `n`, but instead of returning the full factorial, you should return the number of trailing zeroes in its result. Trailing zeroes in a factorial are created by pairs of multiples of 2 and 5. Since there are usually more multiples of 2 than 5, the number of trailing zeroes is determined by the number of times 5 is a factor in the numbers from 1 to `n`. Examples: Input `5` --> Trailing Zeroes `1` (since `5! = 120`) Input `10` --> Trailing Zeroes `2` (since `10! = 3,628,800`) Input `25` --> Trailing Zeroes `6` (since `25! = 15,511,210,043,330,985,984,000,000`)","solution":"def trailing_zeroes(n): Returns the number of trailing zeroes in the factorial of n. count = 0 current_div = 5 while n >= current_div: count += n // current_div current_div *= 5 return count"},{"question":"# Sum of Squares Write a function `sum_of_squares` that takes a list of integers as its input and returns the sum of the squares of the elements in the list. **Function Signature:** ```python def sum_of_squares(numbers: List[int]) -> int: ``` **Input:** - `numbers` (List[int]): A list of integers, where each integer `n` is such that `-10^6 <= n <= 10^6`. **Output:** - Returns the sum of the squares of the elements in the input list. **Examples:** ```python assert sum_of_squares([1, 2, 3]) == 14 # 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 assert sum_of_squares([-1, -2, -3]) == 14 # (-1)^2 + (-2)^2 + (-3)^2 = 1 + 4 + 9 = 14 assert sum_of_squares([0, 0, 0]) == 0 # 0^2 + 0^2 + 0^2 = 0 assert sum_of_squares([1]) == 1 # 1^2 = 1 assert sum_of_squares([]) == 0 # No elements in list, so sum = 0 ``` # Constraints: - Do not use any built-in functions other than `sum` and list comprehensions. - Ensure the function runs in O(n) time complexity, where `n` is the number of elements in the list. - Handle edge cases such as empty lists gracefully.","solution":"from typing import List def sum_of_squares(numbers: List[int]) -> int: Returns the sum of the squares of the elements in the numbers list. return sum(x**2 for x in numbers)"},{"question":"Write a function called `rotate_matrix_90_degrees(matrix)` which takes a 2D list (matrix) of size NxN as input and returns a new matrix which is the original matrix rotated by 90 degrees clockwise. For example: ``` Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` You can assume that the matrix will always be a square (NxN) and N will be at least 1.","solution":"def rotate_matrix_90_degrees(matrix): Rotates a given NxN matrix by 90 degrees clockwise. :param matrix: List[List[int]], 2D list representing a NxN matrix. :return: List[List[int]], 2D list representing the rotated matrix. # Number of rows (or columns) since it\'s an NxN matrix N = len(matrix) # Creating an empty NxN matrix for the result rotated_matrix = [[0] * N for _ in range(N)] # Transposing and then reversing each row for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Implement a function to solve the \\"Toeplitz Matrix\\" problem. A matrix is called Toeplitz if every diagonal from top-left to bottom-right has the same element. More precisely, if a matrix `matrix` is Toeplitz, then `matrix[i][j] == matrix[i+1][j+1]` for all `i` and `j` such that `i + 1 < m` and `j + 1 < n` where `m` is the number of rows and `n` is the number of columns. Given an `m x n` matrix, write a function that returns `True` if the matrix is Toeplitz, and `False` otherwise. # Example: ``` isToeloeplitzMatrix([ [1,2,3,4], [5,1,2,3], [9,5,1,2] ]) -> True isToeloeplitzMatrix([ [1,2], [2,2] ]) -> False ``` # Constraints: - `matrix` is a list of lists containing integers. - `1 <= m, n <= 20` - Each element within `matrix` will be between `-100` to `100`.","solution":"def isToeplitzMatrix(matrix): Returns True if the given matrix is a Toeplitz matrix, else False. m = len(matrix) n = len(matrix[0]) for i in range(m - 1): for j in range(n - 1): if matrix[i][j] != matrix[i + 1][j + 1]: return False return True"},{"question":"Clockwise Spiral Matrix Introduction You are given an `n x n` matrix consisting of positive integers. The matrix needs to be filled in a clockwise spiral, starting from the top-left corner and ending in the center of the matrix. You have to implement the function `generateSpiralMatrix(n)` that generates such a matrix. Task Write a function `generateSpiralMatrix(n)` that generates an `n x n` matrix filled with integers from 1 to `n^2` in a clockwise spiral order. Example For `n = 3`, the function should return: ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` In a clockwise spiral order, the numbers are added as follows: 1 → 2 → 3 → 4 → 5 → 6 → 7 → 8 → 9 For `n = 4`, the function should return: ``` [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ``` In a clockwise spiral order, the numbers are added as follows: 1 → 2 → 3 → 4 → 5 → 6 → 7 → 8 → 9 → 10 → 11 → 12 → 13 → 14 → 15 → 16 Requirements - You may assume that `1 <= n <= 20`. - The function must return a list of lists that represent the `n x n` matrix. Additional Examples For `n = 1`, the function should return: ``` [ [1] ] ``` For `n = 5`, the function should return: ``` [ [1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9] ] ``` In a clockwise spiral order, the numbers are added as follows: 1 → 2 → 3 → 4 → 5 → 6 → 7 → 8 → 9 → 10 → 11 → 12 → 13 → 14 → 15 → 16 → 17 → 18 → 19 → 20 → 21 → 22 → 23 → 24 → 25","solution":"def generateSpiralMatrix(n): Generates an n x n matrix filled with integers from 1 to n^2 in a clockwise spiral order. matrix = [[0] * n for _ in range(n)] num = 1 left, right = 0, n - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: for col in range(left, right + 1): matrix[top][col] = num num += 1 top += 1 for row in range(top, bottom + 1): matrix[row][right] = num num += 1 right -= 1 for col in range(right, left - 1, -1): matrix[bottom][col] = num num += 1 bottom -= 1 for row in range(bottom, top - 1, -1): matrix[row][left] = num num += 1 left += 1 return matrix"},{"question":"Given a grid of dimensions n times m where each cell contains an integer value representing the amount of gold in that cell, find the maximum amount of gold one can collect by starting from any cell in the first column and moving to any cell in the last column. From a given cell, you can only move to the right (→), right-upwards (↗), or right-downwards (↘) to the next column. # Input - The first line contains two integers n and m (1 leq n, m leq 100) - the dimensions of the grid. - The next n lines contain m integers each, representing the grid. # Output - Print an integer representing the maximum amount of gold one can collect when reaching any cell in the last column. # Example **Input:** ``` 4 4 1 3 1 5 2 2 4 1 5 0 2 3 0 6 1 2 ``` **Output:** ``` 16 ``` **Explanation:** The grid is: ``` 1 3 1 5 2 2 4 1 5 0 2 3 0 6 1 2 ``` One of the paths yielding the maximum gold collection is: start from cell (3,0) -> (3,1) -> (2,2) -> (1,3) with a total gold collection = 5 + 0 + 4 + 5 = 14. # Note - Test cases are designed such that the grid dimensions and the value in the grid cells are manageable with basic dynamic programming without hitting performance constraints.","solution":"def max_gold(grid): n = len(grid) m = len(grid[0]) # Initialize a table to store the maximum gold that can be collected up to each cell dp = [[0 for _ in range(m)] for _ in range(n)] for i in range(n): dp[i][0] = grid[i][0] for j in range(1, m): for i in range(n): if i > 0: up_right = dp[i-1][j-1] else: up_right = 0 right = dp[i][j-1] if i < n-1: down_right = dp[i+1][j-1] else: down_right = 0 dp[i][j] = grid[i][j] + max(up_right, right, down_right) # Find the maximum value in the last column max_gold_collected = 0 for i in range(n): max_gold_collected = max(max_gold_collected, dp[i][m-1]) return max_gold_collected # Example input n, m = 4, 4 grid = [ [1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2] ] print(max_gold(grid))"},{"question":"Implement a function to simulate a simple service that processes customer requests in a queue. The service supports two types of operations: 1. **enqueue**: Adds a customer\'s request to the end of the queue. 2. **process**: Processes the next customer\'s request from the front of the queue. The `enqueue` operation takes the customer’s name as an argument, while the `process` operation does not take any arguments and returns the name of the processed customer. If the queue is empty and a `process` operation is called, it should return \\"Queue is empty\\". The service should also support querying the current status of the queue with two additional operations: 1. **size**: Returns the current number of requests in the queue. 2. **peek**: Returns the name of the customer at the front of the queue without removing it, or \\"Queue is empty\\" if the queue is empty. Write a class `ServiceQueue` that implements these operations: - `enqueue(name: str) -> None` - `process() -> str` - `size() -> int` - `peek() -> str` Example Usage: ``` sq = ServiceQueue() sq.enqueue(\\"Alice\\") sq.enqueue(\\"Bob\\") print(sq.size()) # Output: 2 print(sq.peek()) # Output: \\"Alice\\" print(sq.process()) # Output: \\"Alice\\" print(sq.process()) # Output: \\"Bob\\" print(sq.process()) # Output: \\"Queue is empty\\" ```","solution":"class ServiceQueue: def __init__(self): self.queue = [] def enqueue(self, name: str) -> None: self.queue.append(name) def process(self) -> str: if not self.queue: return \\"Queue is empty\\" return self.queue.pop(0) def size(self) -> int: return len(self.queue) def peek(self) -> str: if not self.queue: return \\"Queue is empty\\" return self.queue[0]"},{"question":"_A research team has developed a self-repairing robot that can navigate a direct course through obstacles using a specific set of rules. The robot operates on a grid-like terrain, where it can only move in four primary directions: up, down, left, and right. Your task is to help the robot find the correct sequence of commands to move from a given starting position to a destination position._ **Input** You are given grid size `n` (grid is `n x n`), and two positions: - `start` which is a tuple `(x1, y1)` representing the robot\'s starting coordinates. - `end` which is a tuple `(x2, y2)` representing the destination coordinates. The grid also contains obstacles represented as a list of tuples `obstacles` where each tuple `(x, y)` is the location of an obstacle. The robot can move through the grid by performing the following operations: - `\'U\'` for moving up - `\'D\'` for moving down - `\'L\'` for moving left - `\'R\'` for moving right The robot should avoid obstacles and move within the grid boundaries: `0 <= x < n` and `0 <= y < n`. **Output** Write a function `navigate` that returns the list of step commands as an array of strings to reach the destination from the starting point without hitting any obstacles. If no path exists, return `None`. **Constraints** - The grid size `n` will be between `2` and `100` inclusive. - There will be no obstacles at the starting position, and the destination position will always be within the grid range. **Example** ```python def navigate(start, end, obstacles): # your implementation here # Example Usage: n = 5 start = (0, 0) end = (4, 4) obstacles = [(0, 2), (2, 2), (3, 3)] # Output could be: [\'D\', \'D\', \'L\', \'D\', \'R\', \'R\', \'U\', \'R\', \'D\'] or another valid path print(navigate(start, end, obstacles)) ``` The goal is to determine the correct sequence of moves while avoiding obstacles and staying within the grid boundaries.","solution":"def navigate(n, start, end, obstacles): from collections import deque directions = {\'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1)} def is_valid(x, y): return 0 <= x < n and 0 <= y < n and (x, y) not in obstacle_set start_x, start_y = start end_x, end_y = end obstacle_set = set(obstacles) queue = deque([(start_x, start_y, [])]) visited = set([(start_x, start_y)]) while queue: x, y, path = queue.popleft() if (x, y) == end: return path for direction, (dx, dy) in directions.items(): nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny, path + [direction])) visited.add((nx, ny)) return None"},{"question":"A gardener is tasked with planting trees along the main path of a garden. The path is represented as a straight line starting at point 0 and ending at point L. The gardener has n types of trees, each represented by a positive integer indicating the distance it needs to be planted from the previous tree of the same type. He wants to plant exactly one tree of each type along the path such that the order of the trees is maintained as given in the input. Write a function `plant_trees` that takes in: 1. An integer `L` - the length of the path, 2. A list of n integers `distances` - where the i-th integer represents the minimum distance that the i-th type of tree must be planted from the previous tree of the same type. The function should return a list of tuples representing the positions on the path where each tree is planted in the order of their appearance. For example, given `L = 10` and `distances = [2, 3, 5]`, the function could return [(0, 1), (2, 4), (6, 10)] where the first integer of each tuple represents the starting planting position and the second integer represents the guaranteed position after planting each tree. If it is impossible to plant all trees within the given path satisfying the conditions, the function should return an empty list. Note: - The first tree is planted at position 0. - The gardener must maintain the order of the trees as given in the input list. ```python def plant_trees(L, distances): # Implementation here ```","solution":"def plant_trees(L, distances): Plants trees along a path ensuring the distance from previous trees as given in input. Parameters: L (int): Length of the path. distances (list): List of integers representing the minimum distances between trees. Returns: list: List of tuples, with each tuple indicating the start and end positions of each tree. positions = [] current_position = 0 for distance in distances: if current_position + distance > L or current_position + distance > L: return [] start_position = current_position end_position = current_position + distance positions.append((start_position, end_position)) current_position = end_position return positions"},{"question":"An e-commerce website keeps track of all sales in the form of transactions. Each transaction contains a timestamp and an amount. As the site administrator, you need to process these transactions to find out the total sales amount for a given duration and identify any discrepancies. -----Input----- - The first line contains an integer T, the number of transactions. - The next T lines each contain: - A string representing the timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\". - A space. - An integer representing the transaction amount. - The next line contains an integer Q, the number of queries. - The next Q lines each contain a query in one of the following formats: - \\"SUM start_timestamp end_timestamp\\": Sum up all transaction amounts between the given start and end timestamps (inclusive). - \\"TRANS above_amount\\": List all timestamps of transactions where the amount is greater than the given amount in ascending order, or \\"NONE\\" if no such transactions exist. -----Output----- - For each \\"SUM\\" query, output a single integer representing the sum of transaction amounts for the specified duration. - For each \\"TRANS\\" query, output the list of timestamps (one per line in ascending order), or \\"NONE\\" if no transactions match the criteria. -----Constraints and Subtasks----- - 1 <= T, Q <= 1000 - The timestamps are guaranteed to be unique and are given in chronological order. - The transaction amount is an integer between 1 and 10,000. - For \\"SUM\\" queries, the start and end timestamps will be within the range of the transaction timestamps. -----Example----- Input: 5 2023-01-05 12:30:00 200 2023-01-05 14:45:00 500 2023-01-06 09:00:00 300 2023-01-06 12:15:00 600 2023-01-07 16:00:00 400 4 SUM 2023-01-05 00:00:00 2023-01-06 23:59:59 TRANS 500 SUM 2023-01-06 00:00:00 2023-01-07 12:00:00 TRANS 900 Output: 1600 2023-01-06 12:15:00 900 NONE","solution":"from datetime import datetime def process_transactions(transactions, queries): Processes a list of transactions with given queries and returns the results. Args: transactions (list): A list of tuples where each tuple contains a timestamp (str) and an amount (int). queries (list): A list of query strings in the specified format. Returns: list: A list of results, each corresponding to a query. results = [] for query in queries: parts = query.split() if parts[0] == \\"SUM\\": start_time = datetime.strptime(parts[1] + \\" \\" + parts[2], \\"%Y-%m-%d %H:%M:%S\\") end_time = datetime.strptime(parts[3] + \\" \\" + parts[4], \\"%Y-%m-%d %H:%M:%S\\") total_sum = 0 for t in transactions: transaction_time = datetime.strptime(t[0], \\"%Y-%m-%d %H:%M:%S\\") if start_time <= transaction_time <= end_time: total_sum += t[1] results.append(total_sum) elif parts[0] == \\"TRANS\\": threshold = int(parts[1]) timestamps = [] for t in transactions: if t[1] > threshold: timestamps.append(t[0]) if timestamps: results.append(\\"n\\".join(sorted(timestamps))) else: results.append(\\"NONE\\") return results # Sample input transactions = [ (\\"2023-01-05 12:30:00\\", 200), (\\"2023-01-05 14:45:00\\", 500), (\\"2023-01-06 09:00:00\\", 300), (\\"2023-01-06 12:15:00\\", 600), (\\"2023-01-07 16:00:00\\", 400), ] queries = [ \\"SUM 2023-01-05 00:00:00 2023-01-06 23:59:59\\", \\"TRANS 500\\", \\"SUM 2023-01-06 00:00:00 2023-01-07 12:00:00\\", \\"TRANS 900\\" ] # Processing sample input to demonstrate the solution results = process_transactions(transactions, queries) for result in results: print(result)"},{"question":"# Problem Statement Write a function that takes a string as input and returns `True` if the string can be rearranged to form a palindrome, and `False` otherwise. A palindrome is a word that reads the same backward as forward. Description To determine if a string can be rearranged to form a palindrome, each character must appear an even number of times, with possibly one character allowed to appear an odd number of times (for the center character of an odd-length palindrome). For example, the string `\'civic\'` can be rearranged into the palindrome `\'civic\'` itself, and the string `\'ivicc\'` can be rearranged to form `\'civic\'`. However, the string `\'hello\'` cannot be rearranged to form a palindrome. Function Signature ```python def can_form_palindrome(s: str) -> bool: pass ``` Example ```python print(can_form_palindrome(\\"civic\\")) # Output: True print(can_form_palindrome(\\"ivicc\\")) # Output: True print(can_form_palindrome(\\"hello\\")) # Output: False print(can_form_palindrome(\\"aabb\\")) # Output: True print(can_form_palindrome(\\"abc\\")) # Output: False ``` Constraints - The input string `s` will consist of lowercase English letters. - The length of the input string `1 <= len(s) <= 10^5`. Your task is to write the implementation of the `can_form_palindrome` function.","solution":"def can_form_palindrome(s: str) -> bool: from collections import Counter # Count the frequencies of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearranged into a palindrome # There must be at most one character with an odd frequency return odd_count <= 1"},{"question":"Write a function that takes a string as input and returns a list of all possible substrings that can be formed by removing exactly one character at each step until the string is empty. The substrings should be returned in the order of their removal sequence, and each substring should be unique. Examples ```python For input string \\"abc\\": [\\"abc\\", \\"ab\\", \\"ac\\", \\"bc\\", \\"a\\", \\"b\\", \\"c\\"] For input string \\"aa\\": [\\"aa\\", \\"a\\"] For input string \\"abcd\\": [\\"abcd\\", \\"abc\\", \\"abd\\", \\"acd\\", \\"bcd\\", \\"ab\\", \\"ac\\", \\"ad\\", \\"bc\\", \\"bd\\", \\"cd\\", \\"a\\", \\"b\\", \\"c\\", \\"d\\"] ``` Note: The function should handle larger strings efficiently.","solution":"def unique_substrings(input_str): Returns a list of all possible unique substrings formed by removing exactly one character at each step until the string is empty. if not input_str: return [] def generate_substrings(s): substrings = set() queue = [s] while queue: current = queue.pop(0) substrings.add(current) for i in range(len(current)): new_substring = current[:i] + current[i+1:] if new_substring and new_substring not in substrings: queue.append(new_substring) return sorted(substrings, key=lambda x: (-len(x), x)) return generate_substrings(input_str)"},{"question":"You are given a string representing a list of people\'s names and their ages. Each person is represented as a triplet in the format `\\"Name|Age|Group\\"`, where `Name` is a string of alphabetic characters (with possible spaces), `Age` is an integer representing the person\'s age, and `Group` is a single alphabetic character representing the group the person belongs to. For example: ``` \\"John Doe|45|A, Jane Smith|30|B, Alice Johnson|25|A, Bob Brown|22|B, Charlie Black|28|A\\" ``` Your task is to write a function that returns the oldest person in each group along with the age. The function should return a string in the format: ``` \\"Group A: Name|Age, Group B: Name|Age, ...\\" ``` If a group has more than one person with the highest age, return any one of them. # Requirements 1. The function should be case-insensitive when comparing group characters. 2. If the input string is empty, the function should return an empty string. 3. Maintain the same case (upper/lower) for the names and groups as given in the input. # Example Given the input string: ```\\"John Doe|45|A, Jane Smith|30|B, Alice Johnson|25|A, Bob Brown|22|B, Charlie Black|28|A\\"``` The function should return: ```\\"Group A: John Doe|45, Group B: Jane Smith|30\\"``` # Note You may assume that each triplet in the input string is valid and follows the `\\"Name|Age|Group\\"` format strictly.","solution":"def oldest_in_each_group(people_str): if not people_str: return \\"\\" people = people_str.split(\\", \\") groups = {} for person in people: name, age, group = person.split(\\"|\\") age = int(age) group = group.lower() # Case-insensitive comparison if group not in groups or groups[group][1] < age: groups[group] = (name, age) result = [] for group in sorted(groups): name, age = groups[group] result.append(f\\"Group {group.upper()}: {name}|{age}\\") return \\", \\".join(result)"},{"question":"Banks are often interested in ensuring their vaults and storage facilities are secure. They decide to implement a system to track the pattern of vault entry points. Each vault has an assigned entry code composed of unique digits. This code could be visualized as a permutation of the numbers from 1 to N without any repetition. Given a number N, can you generate the entry code for the vault that is lexicographically the largest valid permutation of numbers from 1 to N? For example, if N = 3, the valid permutations are 123, 132, 213, 231, 312, and 321. The largest permutation among these is 321. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains an integer N. -----Output----- For each test case, output a single line containing the lexicographically largest permutation. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 10^5 -----Example----- Input 3 1 3 5 Output 1 321 54321 -----Explanation----- Example 1: With N = 1, the only permutation possible is 1. Example 2: With N = 3, the permutations are 123, 132, 213, 231, 312, and 321. The largest is 321. Example 3: With N = 5, the permutations are 12345, 12354, ..., 54321. The largest is 54321.","solution":"def largest_permutation(N): Returns the lexicographically largest permutation of numbers from 1 to N. return \'\'.join(map(str, range(N, 0, -1))) def process_test_cases(test_cases): results = [] for N in test_cases: results.append(largest_permutation(N)) return results"},{"question":"You are given a list of logs where each log is a space-separated string of words. The first word in each log is an alphanumeric identifier. Each word after the identifier will consist only of lowercase letters, or will only consist of digits. The logs are of two types: 1. **Letter-logs**: All words (except the identifier) consist of lowercase letters. 2. **Digit-logs**: All words (except the identifier) consist only of digits. Reorder the logs so that: 1. The letter-logs come before all digit-logs. 2. The letter-logs are sorted lexicographically by their content. If their contents are the same, then sort them lexicographically by their identifiers. 3. The digit-logs should be put in their original order. Return the final order of the logs. # Example Input: logs = [\\"a1 9 2 3 1\\", \\"g1 act car\\", \\"zo4 4 7\\", \\"ab1 off key dog\\", \\"a8 act zoo\\"] Output: [\\"g1 act car\\", \\"a8 act zoo\\", \\"ab1 off key dog\\", \\"a1 9 2 3 1\\", \\"zo4 4 7\\"] Explanation - The letter-logs are \\"g1 act car\\", \\"ab1 off key dog\\" and \\"a8 act zoo\\". The logs are already sorted by their contents. - The digit-logs are \\"a1 9 2 3 1\\" and \\"zo4 4 7\\". They remain in their original order. # Constraints * 1 <= logs.length <= 100 * 3 <= logs[i].length <= 100 * logs[i] consists of alphanumeric characters and spaces. * All words after the identifier will consist of lowercase letters or digits. # Note * The identifier is guaranteed to be unique for each log.","solution":"def reorder_log_files(logs): Reorders logs so that letter-logs come before digit-logs, sorted lexicographically. # Separate logs into two categories: letter-logs and digit-logs letter_logs, digit_logs = [], [] # Classify each log as either a letter-log or a digit-log for log in logs: # Split each log by the first space to separate the identifier and the content identifier, rest = log.split(\\" \\", 1) if rest[0].isdigit(): digit_logs.append(log) else: letter_logs.append((identifier, rest)) # Sort the letter-logs by content and then by identifier in case of ties letter_logs.sort(key=lambda log: (log[1], log[0])) # Reconstruct the sorted letter-logs sorted_letter_logs = [\\"{} {}\\".format(identifier, rest) for identifier, rest in letter_logs] # Combine sorted letter-logs with original order digit-logs return sorted_letter_logs + digit_logs"},{"question":"Sudoku is a popular number puzzle game. You are given a partially filled 9x9 grid representing a Sudoku puzzle, and your task is to determine if the given Sudoku puzzle is valid. A sample grid is represented as a list of lists, where each list contains 9 integers. The Sudoku puzzle follows these rules: 1. Each row must contain the digits from 1 to 9 without repetition. 2. Each column must contain the digits from 1 to 9 without repetition. 3. Each of the nine 3x3 sub-grids must contain the digits from 1 to 9 without repetition. An empty cell is represented by the number 0. The given Sudoku puzzle can be partially filled, and it is guaranteed to have at least one solution. Write a function `is_valid_sudoku(grid)` that takes a 9x9 grid as input and returns `True` if it represents a valid Sudoku puzzle according to the rules described above, and `False` otherwise. -----Constraints----- - Each element of the grid is an integer between 0 and 9. - The grid is a list of 9 lists, each containing 9 integers. -----Input----- grid: List of Lists of integers representing a 9x9 Sudoku puzzle. -----Output----- Boolean value `True` if the grid is a valid Sudoku puzzle, and `False` otherwise. -----Sample Input----- [[5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9]] -----Sample Output----- True The provided grid represents a valid Sudoku puzzle.","solution":"def is_valid_sudoku(grid): def is_valid_group(group): elements = [num for num in group if num != 0] return len(elements) == len(set(elements)) for row in grid: if not is_valid_group(row): return False for col in range(9): if not is_valid_group([grid[row][col] for row in range(9)]): return False for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): sub_grid = [grid[r][c] for r in range(box_row, box_row + 3) for c in range(box_col, box_col + 3)] if not is_valid_group(sub_grid): return False return True"},{"question":"Given a binary tree, you need to compute the sum of all left leaves. A leaf is a node with no children. A left leaf is a leaf that is the left child of its parent. Return the sum of all left leaves in the given binary tree. Example: ``` 3 / 9 20 / 15 7 ``` The sum of left leaves is 24 (9 + 15). Note: The number of nodes in the tree is in the range [1, 1000]. Each node\'s value is in the range [-1000, 1000].","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_left_leaves(root): Computes the sum of all left leaves in a binary tree if not root: return 0 sum_left_leaves = 0 if root.left: # Check if the left node is a leaf if not root.left.left and not root.left.right: sum_left_leaves += root.left.val else: sum_left_leaves += sum_of_left_leaves(root.left) if root.right: sum_left_leaves += sum_of_left_leaves(root.right) return sum_left_leaves"},{"question":"You are provided with a list of integers representing the height of hills and valleys in a landscape. Your task is to write a function `calculate_volume` that computes the total volume of water that would be trapped between the hills after it rains. The water trapped between the hills can be visualized as follows: If we have the heights `[2, 0, 2]`, then after raining, the water trapped would be represented by: ``` # # # # # # ``` Here, 2 units of water are trapped. # Function Signature ```python def calculate_volume(heights: List[int]) -> int: pass ``` # Input - `heights`: A list of non-negative integers representing the height of hills and valleys in the landscape. # Output - An integer representing the total volume of water trapped. # Examples ```python assert calculate_volume([0,1,0,2,1,0,1,3,2,1,2,1]) == 6 assert calculate_volume([2,0,2]) == 2 assert calculate_volume([3, 0, 1, 3, 0, 5]) == 8 assert calculate_volume([]) == 0 assert calculate_volume([4,2,0,3,2,5]) == 9 ``` # Constraints - The list `heights` will contain at most `10^5` non-negative integers. - The elements in `heights` are non-negative and will not exceed `10^4`. # Hints - Consider using two pointers to traverse the list from both ends. - Make use of auxiliary arrays to keep track of the maximum heights to the left and right of each position. - Streamline the space complexity by directly updating maximum heights while calculating the trapped water.","solution":"def calculate_volume(heights): Calculate the total volume of water that can be trapped between the hills. :param heights: List of integers representing the height of hills and valleys :return: Integer representing the total volume of water trapped if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = heights[left], heights[right] volume = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) volume += max(0, left_max - heights[left]) else: right -= 1 right_max = max(right_max, heights[right]) volume += max(0, right_max - heights[right]) return volume"},{"question":"Task You have to write a function **find_duplicates** which takes a list of integers and returns another list containing the duplicates from the list, sorted in ascending order. # Rules/Note: * If there are no duplicates, return an empty list. * The input list can contain negative numbers and duplicates should maintain their sign. # Examples: ```python find_duplicates([1, 2, 3, 2, 3, 4, 5]) -> [2, 3] find_duplicates([4, 5, 6, 7, 8, 5, 6, 9]) -> [5, 6] find_duplicates([1, 2, 3, 4, 5]) -> [] find_duplicates([-1, -2, -3, -2, -3, -4, -5]) -> [-3, -2] find_duplicates([10, 20, 20, 30, 10, 30, 40]) -> [10, 20, 30] ```","solution":"def find_duplicates(lst): Returns the duplicates in the list in ascending order. from collections import Counter counts = Counter(lst) duplicates = [item for item, count in counts.items() if count > 1] return sorted(duplicates)"},{"question":"Transform a List of Tuples Given a list of tuples where each tuple contains an integer and a string, return a single string where each string element from the tuples appears the number of times specified by its corresponding integer. Example: ```python transform_list([(2, \'a\'), (3, \'b\'), (1, \'c\')]) # \'aabbbbc\' ``` _Input:_ - A list of tuples, where each tuple consists of an integer (1 <= int <= 5) and a string of a single character (a-z). _Output:_ - A single string with characters repeated according to their corresponding integer value.","solution":"def transform_list(lst): Transforms a list of tuples into a single string, where each string element from the tuples appears the number of times specified by its corresponding integer. :param lst: List[Tuple[int, str]] - A list of tuples, where each tuple consists of an integer (1 <= int <= 5) and a single character string (a-z) :return: str - A single string with characters repeated according to their corresponding integer value. result = \\"\\" for count, char in lst: result += char * count return result"},{"question":"In a faraway kingdom, there are N castles numbered from 1 to N connected by M bidirectional roads. Each road has a guard who requires a specific amount of gold coins to allow passage through that road. The kingdom wishes to find the cheapest way to traverse from the first castle to the last castle. -----Input----- - The first line contains two integers N and M. - Each of the next M lines contains three integers U, V, and G which denote a road between castles U and V with a toll of G gold coins. -----Output----- - Output a single integer representing the minimum cost in gold coins required to travel from castle 1 to castle N. If there is no way to reach the last castle from the first castle, output -1. -----Constraints----- - 2 le N le 1000 - 1 le M le 10000 - 1 le U, V le N - U ne V - 1 le G le 1000 -----Example----- -----Sample Input:----- 4 5 1 2 10 1 3 20 2 3 5 2 4 30 3 4 10 -----Sample Output:----- 30 -----Explanation----- - The minimum cost path from castle 1 to castle 4 is 1 -> 2 -> 3 -> 4 with a total cost of 10 + 5 + 15 = 30. This is cheaper than the direct paths 1 -> 3 -> 4 and 1 -> 2 -> 4.","solution":"import heapq def find_min_cost(N, M, roads): Returns the minimum cost in gold coins required to travel from castle 1 to castle N using Dijkstra\'s algorithm. If there is no way to reach the last castle from the first castle, returns -1. # Create adjacency list graph = [[] for _ in range(N + 1)] for U, V, G in roads: graph[U].append((V, G)) graph[V].append((U, G)) # Dijkstra\'s algorithm min_cost = [float(\'inf\')] * (N + 1) min_cost[1] = 0 pq = [(0, 1)] # (cost, node) while pq: current_cost, node = heapq.heappop(pq) if node == N: return current_cost for neighbor, toll in graph[node]: new_cost = current_cost + toll if new_cost < min_cost[neighbor]: min_cost[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return -1 if min_cost[N] == float(\'inf\') else min_cost[N] # Example usage N = 4 M = 5 roads = [ (1, 2, 10), (1, 3, 20), (2, 3, 5), (2, 4, 30), (3, 4, 10) ] print(find_min_cost(N, M, roads)) # Output: 25"},{"question":"Calculate the number of unique paths in a grid with obstacles. Given a grid represented as a list of lists of integers, where 1 represents an obstacle and 0 represents an empty cell, write a function `uniquePathsWithObstacles(obstacleGrid)` that calculates the number of unique paths from the top-left corner of the grid to the bottom-right corner, while only being able to move either down or right. You can assume the output will be within the range of a 32-bit signed integer. **Examples:** ```python uniquePathsWithObstacles([ [0,0,0], [0,1,0], [0,0,0] ]) # => 2 uniquePathsWithObstacles([ [0,1], [0,0] ]) # => 1 ``` **Explanation:** In the first example, there are two possible paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there is only one possible path: 1. Down -> Right **Constraints:** - The grid dimensions will be at least 1x1 and at most 100x100. - The starting cell (top-left) and the ending cell (bottom-right) will always be empty (0).","solution":"def uniquePathsWithObstacles(obstacleGrid): Returns the number of unique paths from the top-left corner to the bottom-right corner of the grid considering obstacles. :param obstacleGrid: List[List[int]] - 2D list representing the grid :return: int - number of unique paths if not obstacleGrid or obstacleGrid[0][0] == 1: return 0 rows = len(obstacleGrid) cols = len(obstacleGrid[0]) # Initialize the DP array with zeros dp = [[0]*cols for _ in range(rows)] # Initialize the starting point dp[0][0] = 1 # Fill in the dp array for i in range(rows): for j in range(cols): if obstacleGrid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[rows-1][cols-1]"},{"question":"You are given a string consisting of lowercase letters and spaces. Your task is to write a function that rearranges the string so that all words are sorted in ascending order based on their lengths. If two words have the same length, preserve their original order relative to each other. For example: ```python sort_words_by_length(\\"hello world in a frame\\") == \\"a in hello world frame\\" sort_words_by_length(\\"keep calm and code on\\") == \\"on and keep calm code\\" ``` **Note:** - Words are defined as sequences of characters separated by spaces. - The input string will contain at least one word and no leading or trailing spaces. - The order of words with the same length should remain unchanged from their original order. Write a function `sort_words_by_length` to solve this problem.","solution":"def sort_words_by_length(s: str) -> str: Rearranges the given string so that all words are sorted in ascending order based on their lengths. If two words have the same length, their original order is preserved. :param s: Input string consisting of lowercase letters and spaces. :return: Rearranged string with words sorted by length. words = s.split() sorted_words = sorted(words, key=len) return \' \'.join(sorted_words)"},{"question":"Sarah has a unique digital clock that malfunctioned. Instead of displaying the correct time, it shows 4 random non-negative integers. She needs to determine if it\'s possible to rearrange these integers to form a valid 24-hour format time (HH:MM). A valid 24-hour format time ranges from 00:00 to 23:59. For example, 14:32 is valid, but 25:00, 13:60, or 01:80 are invalid. Write a function to help Sarah by checking all possible permutations of the given integers, and find out if any permutation can form a valid time format. Input Format: 1. First row with number of test cases (T). 2. Next T rows with 4 integers each, separated by spaces. Output Format: 1. \\"1\\" if a valid time can be formed (without \\"\\") 2. \\"0\\" if a valid time cannot be formed (without \\"\\") Sample Input: 3 1 8 3 2 9 5 6 0 2 4 6 9 Sample Output: 1 1 0 Explanation: For the first test case, \'18:32\' is a valid time. For the second test case, \'09:50\' or \'05:09\' are valid times. For the third test case, no permutation of the given digits can form a valid time. Consider implementing a brute force approach by checking all 24 permutations of the 4 digits to determine if a valid time can be formed.","solution":"from itertools import permutations def is_valid_time(a, b, c, d): hour = a * 10 + b minute = c * 10 + d return 0 <= hour < 24 and 0 <= minute < 60 def can_form_valid_time(digits): for perm in permutations(digits): if is_valid_time(perm[0], perm[1], perm[2], perm[3]): return \\"1\\" return \\"0\\" def check_times(test_cases): results = [] for digits in test_cases: results.append(can_form_valid_time(digits)) return results"},{"question":"You are working on a text editing software that allows collaborative editing of a document. The document is composed of a single line of text. There are N operations performed on the document. Each operation is either an insertion of a character at a specified position or a deletion of a character from a specified position. Your task is to find the final state of the document after all operations have been performed. -----Input----- The first line of the input contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N, the number of operations. The following N lines describe the operations. Each operation is either: - \\"insert pos char\\": where pos is the zero-based index at which the character char is inserted. - \\"delete pos\\": where pos is the zero-based index of the character to be deleted. The document is initially an empty string. -----Output----- For each test case, output one line containing the final state of the document. -----Constraints----- - 1 ≤ T ≤ 10^3 - 1 ≤ N ≤ 10^3 - 0 ≤ pos ≤ length of the document (after each operation) - char is any printable ASCII character -----Example----- Input 2 3 insert 0 a insert 1 b delete 1 4 insert 0 a insert 1 b insert 1 c delete 0 Output a cb Note: In the second example, after first \'insert\', document becomes \\"a\\". After second \'insert\', it becomes \\"ac\\". Third \'insert\' makes it \\"cab\\". Finally, the \'delete\' operation makes it \\"cb\\".","solution":"def apply_operations(operations): document = [] for op in operations: parts = op.split() if parts[0] == \\"insert\\": pos = int(parts[1]) char = parts[2] document.insert(pos, char) elif parts[0] == \\"delete\\": pos = int(parts[1]) if 0 <= pos < len(document): document.pop(pos) return \'\'.join(document) def final_documents(test_cases): results = [] for case in test_cases: results.append(apply_operations(case)) return results"},{"question":"Given a list of strings, find all the strings that can be formed by concatenating the given strings in the list (including themselves) a certain number of times. Return the list of these concatenated strings in alphabetical order. Example 1: Input: [\\"cat\\", \\"dog\\", \\"catdog\\"] Output: [\\"catdog\\"] Example 2: Input: [\\"ab\\", \\"abc\\", \\"abcd\\", \\"abab\\"] Output: [\\"abab\\"] Example 3: Input: [\\"one\\", \\"two\\", \\"onetwoone\\"] Output: [\\"onetwoone\\"]","solution":"def find_concatenated_strings(words): Given a list of strings, find all the strings that can be formed by concatenating the given strings in the list (including themselves) a certain number of times. Returns the list of these concatenated strings in alphabetical order. word_set = set(words) concatenated_words = [] for word in words: n = len(word) dp = [False] * (n + 1) # dp[i] = True means word[:i] can be formed by concatenating other words dp[0] = True for i in range(1, n + 1): for j in range(i): if dp[j] and word[j:i] in word_set and word[j:i] != word: dp[i] = True break if dp[n]: concatenated_words.append(word) return sorted(concatenated_words)"},{"question":"Sally is attempting to arrange her collection of books on a set of bookshelves. Each bookshelf can hold a maximum weight limit of W. Given the weights of N books, determine the minimum number of bookshelves Sally needs to hold all the books without exceeding the weight limit on any shelf. A shelf can contain any combination of books as long as their total weight does not exceed W. -----Input:----- - The first line contains an integer T, the number of test cases. Each test case follows: - The first line of each test case contains two integers N (the number of books) and W (the weight limit of each bookshelf). - The second line of each test case contains N integers representing the weights of the books. -----Output:----- For each test case, output a single integer representing the minimum number of bookshelves required. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq W leq 10^4 - 1 leq weight of each book leq 10^4 -----Sample Input:----- 2 5 10 2 3 5 4 1 4 8 4 3 4 3 -----Sample Output:----- 2 2 -----EXPLANATION:----- For the first test case: - One possible arrangement is placing books with weights [2, 3, 5] on the first shelf and [4, 1] on the second shelf. - Another arrangement could be [2, 3, 4] and [5, 1], both requiring 2 bookshelves. For the second test case: - One possible arrangement is placing [4, 3] on the first shelf and [4, 3] on the second shelf.","solution":"def min_bookshelves(T, test_cases): results = [] for i in range(T): N, W = test_cases[i][0] books = sorted(test_cases[i][1], reverse=True) shelves = 0 while books: shelves += 1 remaining_capacity = W j = 0 while j < len(books): if books[j] <= remaining_capacity: remaining_capacity -= books[j] books.pop(j) else: j += 1 results.append(shelves) return results"},{"question":"A factory is organizing teams, each containing exactly k workers, to optimize the production of gadgets. Each worker is assigned a productivity score represented as an integer. The objective is to maximize the production output by forming teams based on these productivity scores. Given an array of integers scores where scores[i] represents the productivity score of the ith worker, and an integer k representing the number of workers in each team, return the maximum production output, calculated as the sum of the highest k productivity scores. If the total number of workers is not sufficient to form a complete team, the remaining workers should not be considered. Example 1: Input: scores = [12, 45, 22, 34, 27], k = 3 Output: 122 Explanation: We can form one team with the highest three scores: 45, 34, and 27. The total production output is 45 + 34 + 27 = 122. Example 2: Input: scores = [5, 15, 8, 23, 14, 18, 30, 17], k = 4 Output: 93 Explanation: We can form one team with the highest four scores: 30, 23, 18, and 17. The total production output is 30 + 23 + 18 + 17 = 88. Example 3: Input: scores = [9, 12, 5, 6, 8], k = 2 Output: 21 Explanation: We can form two teams. The first team with the highest two scores: 12 and 9. The second team with the next highest scores: 8 and 6. The total production output is 12 + 9 = 21. Example 4: Input: scores = [7, 4, 10, 1], k = 1 Output: 10 Explanation: We can form four teams each with a single highest productivity score. The highest score is 10. The total production output is 10. Constraints: 1 <= scores.length <= 100 1 <= scores[i] <= 10000 1 <= k <= scores.length","solution":"def max_production_output(scores, k): Returns the maximum production output by summing the highest k productivity scores. If the number of workers is insufficient to form a complete team, ignore the remaining workers. Parameters: scores (List[int]): List of productivity scores of workers. k (int): Number of workers in each team. Returns: int: Maximum production output. if len(scores) < k: return 0 scores.sort(reverse=True) return sum(scores[:k])"},{"question":"You are given a binary tree and a target sum. Your task is to determine if there is a path from the root node to a leaf node such that the sum of the values of the nodes along the path equals the target sum. A leaf node is defined as a node that has no children. Write a function that takes the root of the binary tree and the target sum as inputs and returns a boolean indicating whether such a path exists. -----Input----- The input is a binary tree represented using its node values and a target sum. The structure of the nodes is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` The function signature is: ```python def hasPathSum(root: TreeNode, targetSum: int) -> bool: ``` The root is the root node of the binary tree, and targetSum is an integer representing the target sum. -----Output----- Return `True` if there exists a root-to-leaf path with the sum of node values equal to the target sum, and `False` otherwise. -----Examples----- Input ``` root = [5, 4, 8, 11, None, 13, 4, 7, 2, None, None, None, 1] targetSum = 22 ``` Output ``` True ``` Explanation The binary tree has a path 5 -> 4 -> 11 -> 2 which sum equals 22. Input ``` root = [1, 2, 3] targetSum = 5 ``` Output ``` False ``` Explanation There is no path that sums to 5. The possible paths are 1 -> 2 and 1 -> 3. Input ``` root = [1, 2] targetSum = 1 ``` Output ``` False ``` Explanation The only path is 1 -> 2 which sums to 3, not 1. -----Note----- In the first example, the binary tree can be visualized as: ``` 5 / 4 8 / / 11 13 4 / 7 2 1 ``` The target sum path is 5 -> 4 -> 11 -> 2, which indeed sums up to 22. While in the second example, there is no path that sums up to 5 from root to leaf.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def hasPathSum(root: TreeNode, targetSum: int) -> bool: if not root: return False # if this is a leaf node, check if the path sum equals the targetSum if not root.left and not root.right: return root.val == targetSum # otherwise, subtract the current node\'s value from targetSum and check the remaining sum return (hasPathSum(root.left, targetSum - root.val) or hasPathSum(root.right, targetSum - root.val))"},{"question":"You are given an N x N grid filled with random integers. Write a function `longestIncreasingPath` to find the length of the longest increasing path in the grid. From each cell, you can either move to four directions: left, right, up, or down. You may not move diagonally or move outside the boundary of the grid. For example, given the grid: ``` [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] ``` The longest increasing path is `[1, 2, 6, 9]`. The length of this path is 4. Another example: ``` [ [3, 4, 5], [3, 2, 6], [2, 2, 1] ] ``` In this case, the longest increasing path is `[3, 4, 5, 6]`. The length of this path is also 4. Implement your solution to find the longest increasing path within the grid.","solution":"def longestIncreasingPath(matrix): if not matrix or not matrix[0]: return 0 rows, cols = len(matrix), len(matrix[0]) dp = [[-1 for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if dp[r][c] != -1: return dp[r][c] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] max_length = 1 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and matrix[nr][nc] > matrix[r][c]: current_length = 1 + dfs(nr, nc) max_length = max(max_length, current_length) dp[r][c] = max_length return dp[r][c] max_path = 0 for i in range(rows): for j in range(cols): max_path = max(max_path, dfs(i, j)) return max_path"},{"question":"Chef recently became interested in number theory and is exploring the mathematical beauty behind prime numbers. He has a special interest in prime pairs. Two numbers are considered a prime pair if both numbers are prime and the absolute difference between them is 2 (for example, 3 and 5, or 11 and 13). He has now tasked himself with counting all possible prime pairs up to a given number N. -----Input----- Input begins with a single integer T, denoting the number of test cases. After that T lines follow, each containing a single integer N - the upper limit for finding prime pairs. You can assume that 1 <= T <= 100 and 2 <= N <= 10^6. -----Output----- Output one line per test case - the number of prime pairs up to the number N. -----Example----- Input: 3 10 20 50 Output: 2 4 8 Description: For the first test case, the prime pairs up to 10 are (3, 5) and (5, 7), so the output is 2. For the second test case, prime pairs up to 20 are (3, 5), (5, 7), (11, 13), and (17, 19), so the output is 4. For the third test case, the prime pairs up to 50 are (3, 5), (5, 7), (11, 13), (17, 19), (29, 31), (41, 43), and (47, 49), so the output is 8. Note that (47, 49) is not a valid pair since 49 is not a prime number; the last valid pair is (41, 43).","solution":"def sieve_of_eratosthenes(n): Creates a list of boolean values representing whether numbers are prime up to n. is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False # 0 and 1 are not primes p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return is_prime def count_prime_pairs(limit): primes = sieve_of_eratosthenes(limit) prime_pairs_count = 0 for i in range(2, limit - 1): if primes[i] and primes[i + 2]: prime_pairs_count += 1 return prime_pairs_count def prime_pairs(test_cases): results = [] for n in test_cases: results.append(count_prime_pairs(n)) return results"},{"question":"You are working on a weather prediction application and you need to create a feature that generates temperature trends for a given period. The application takes a list of daily temperature readings and produces a new list indicating the trend for each day. Here are the possible trends: - \\"UP\\" if the temperature is higher than the previous day, - \\"DOWN\\" if the temperature is lower than the previous day, - \\"SAME\\" if the temperature is the same as the previous day, - \\"START\\" for the first day (since there\'s no previous day to compare). Create a function called `temperature_trend` that takes a list of integers representing daily temperatures and returns a list of strings representing the trends. If the input list is empty, the function should return an empty list. Examples: ``` temperature_trend([72, 74, 73, 73, 75, 78]) => [\\"START\\", \\"UP\\", \\"DOWN\\", \\"SAME\\", \\"UP\\", \\"UP\\"] temperature_trend([60]) => [\\"START\\"] temperature_trend([45, 45, 45]) => [\\"START\\", \\"SAME\\", \\"SAME\\"] temperature_trend([]) => [] temperature_trend([32, 31, 30, 33]) => [\\"START\\", \\"DOWN\\", \\"DOWN\\", \\"UP\\"] ``` Notes: - The function should handle a list of any length, including an empty list. - Ensure that the output list is the same length as the input list. - The temperature readings are represented as integer values.","solution":"def temperature_trend(temps): Returns a list of trends representing temperature changes. if not temps: return [] trends = [\\"START\\"] for i in range(1, len(temps)): if temps[i] > temps[i - 1]: trends.append(\\"UP\\") elif temps[i] < temps[i - 1]: trends.append(\\"DOWN\\") else: trends.append(\\"SAME\\") return trends"},{"question":"Given an array of integers, an element is considered a \\"peak\\" if it is greater than both its neighbors. For the elements at the edges of the array, we consider only the one neighbor that exists. Write a function `find_peaks` that accepts an integer array and returns a list of the peak elements. Example: ``` Input: [1, 3, 7, 1, 2, 6, 3, 2, 7, 10] Output: [7, 7, 10] Input: [10, 20, 15, 2, 23, 90, 67] Output: [20, 90] ``` Function signature: `def find_peaks(arr: List[int]) -> List[int]:` Considerations: - Single element arrays should return the element itself as a peak. - Handle edge cases such as empty arrays, where the output should be an empty list.","solution":"from typing import List def find_peaks(arr: List[int]) -> List[int]: Finds all peak elements in the given array of integers. A peak is defined as an element greater than both its neighbors. if not arr: return [] n = len(arr) peaks = [] # Check for leftmost element if n == 1 or arr[0] > arr[1]: peaks.append(arr[0]) # Check for middle elements for i in range(1, n - 1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: peaks.append(arr[i]) # Check for rightmost element if n > 1 and arr[n-1] > arr[n-2]: peaks.append(arr[n-1]) return peaks"},{"question":"Write a function that takes in a string and an integer and returns a new string that is a repeated version of the input string. The integer determines how many times the string should be repeated. The function should handle edge cases where the integer is zero or negative by returning an empty string in such cases. Examples: ```python repeat_string(\'abc\', 3) # returns \'abcabcabc\' repeat_string(\'hello\', 2) # returns \'hellohello\' repeat_string(\'test\', 0) # returns \'\' repeat_string(\'sample\', -1) # returns \'\' ```","solution":"def repeat_string(s, n): Returns a new string that is a repeated version of the input string s. The number n determines how many times the string should be repeated. If n is zero or negative, return an empty string. if n <= 0: return \\"\\" return s * n"},{"question":"Write a function that accepts an integer n and returns the lexicographically smallest string of length n that can be formed using only the characters \'a\', \'b\', and \'c\'. The resulting string should also contain at least one occurrence of all three characters. For example: ```python smallest_string_with_abc(3) # => \\"abc\\" smallest_string_with_abc(5) # => \\"aabbc\\" smallest_string_with_abc(7) # => \\"aaabbbc\\" ``` ```python def smallest_string_with_abc(n: int) -> str: ``` # Constraints - 3 <= n <= 10^6 - The output string must contain at least one \'a\', one \'b\', and one \'c\'. - The output string should be the smallest in dictionary order.","solution":"def smallest_string_with_abc(n: int) -> str: Returns the lexicographically smallest string of length n that contains at least one \'a\', one \'b\', and one \'c\'. It uses only the characters \'a\', \'b\', and \'c\'. # Base length is 3 for the minimum requirement \'a\', \'b\', and \'c\' # For minimal lexicographic order, we begin with repeated \'a\' followed by \'b\' and \'c\' if n == 3: return \\"abc\\" else: return \\"a\\" * (n - 2) + \\"bc\\""},{"question":"You are given a sequence of n integers, and your task is to determine the length of the longest contiguous subsequence which has an absolute difference of at most `k` between any two of its elements. # Input - An integer `n` (1 ≤ n ≤ 10^5), the length of the sequence. - An integer `k` (0 ≤ k ≤ 10^5), the maximum allowed absolute difference between any two elements in the subsequence. - An array of `n` integers `arr` (0 ≤ arr[i] ≤ 10^5) representing the sequence. # Output - An integer representing the length of the longest contiguous subsequence with the mentioned property. # Example ``` Input: n = 5 k = 3 arr = [1, 3, 5, 8, 6] Output: 3 Explanation: The longest contiguous subsequence with |arr[i] - arr[j]| <= 3 is [3, 5, 8] ``` # Note - In the given example, there are other subsequences like [1, 3] or [5, 8] but the longest one is of length 3. - Ensure your solution has an efficient approach to handle the input constraints. Solve the problem by any efficient method you find suitable.","solution":"def longest_contiguous_subsequence(n, k, arr): Returns the length of the longest contiguous subsequence with an absolute difference of at most k between any two of its elements. if n == 0: return 0 max_len = 1 start = 0 for end in range(1, n): if abs(arr[end] - arr[start]) <= k: max_len = max(max_len, end - start + 1) else: start = end return max_len"},{"question":"You are given a list of positive integers where each integer can be either incremented by 7 or divided by 4 (if it is divisible by 4). You are supposed to determine if it is possible to start with a particular integer `y` in this sequence and reach another given integer `z` using any number of these operations. Write a function `canTransform(y, z)` that takes these two integers as input and returns `True` if it is possible to transform `y` to `z` using the given operations, otherwise returns `False`. For example: **Input:** ```python canTransform(14, 7) ``` **Output:** ```python True ``` **Explanation:** 14 can be divided by 4 to get 3.5 (Not an integer), we can\'t perform this operation. When we increment 14 by 7, we get 21. Dividing 21 by 4 is not possible, we increment again by 7 to get 28, and now 28 when divided by 4 will give 7 which matches our target. Another example: **Input:** ```python canTransform(10, 5) ``` **Output:** ```python False ``` **Explanation:** Incrementing or dividing 10 by 7 or 4 respectively will never yield 5, hence the answer is `False`.","solution":"def canTransform(y, z): Determines if it\'s possible to transform integer y to integer z using the operations: increment by 7 or divide by 4 (if divisible by 4). if y < z: return False while y >= z: if y == z: return True if y % 4 == 0 and y > z: y //= 4 else: y -= 7 return False"},{"question":"Task You are organizing a marathon and have a list of participants\' finish times in hours, minutes, and seconds. Your task is to determine the participants who finished the marathon in the median time. Given a list of participants\' finish times in the format `hh:mm:ss`, find the participants whose finish times are in the median of the list when the times are ordered. If the list has an even number of times, return the two middle times. You may assume no two participants have the same finish time. # Examples For `times = [\\"03:15:30\\", \\"02:45:20\\", \\"04:20:50\\", \\"03:10:15\\", \\"01:50:40\\"]`, the result should be `\\"03:10:15\\"`. For `times = [\\"04:05:20\\", \\"03:35:10\\", \\"06:45:30\\", \\"03:25:40\\", \\"02:15:50\\", \\"05:30:25\\"]`, the result should be `[\\"03:35:10\\", \\"04:05:20\\"]`. # Input/Output - `[input]` array of strings `times` Array representing finish times of participants in the format `hh:mm:ss`. - `[output]` string or array of strings Return the median finish time(s) in the same format as the input times.","solution":"def convert_to_seconds(time_str): Converts a time string in the format hh:mm:ss to the total number of seconds. h, m, s = map(int, time_str.split(\':\')) return h * 3600 + m * 60 + s def median_finish_times(times): Given a list of participants\' finish times in the format hh:mm:ss, returns the participants whose finish times are in the median of the list when ordered. # Convert each time string to total seconds times_in_seconds = [(time, convert_to_seconds(time)) for time in times] # Sort the list by the total seconds times_in_seconds.sort(key=lambda x: x[1]) n = len(times_in_seconds) if n % 2 == 1: # If odd, return the middle element return times_in_seconds[n // 2][0] else: # If even, return the two middle elements return [ times_in_seconds[n // 2 - 1][0], times_in_seconds[n // 2][0] ]"},{"question":"=====Function Descriptions===== .symmetric_difference_update() The .symmetric_difference_update() method updates the set it is called on with the symmetric difference of itself and another iterable. The method will remove any items present in both the set and the iterable, and add items that are in the iterable but not in the set. >>> A = {1, 2, 3} >>> B = {3, 4, 5} >>> A.symmetric_difference_update(B) >>> print(A) {1, 2, 4, 5} >>> A = {1, 2, 3} >>> B = [3, 4, 5] >>> A.symmetric_difference_update(B) >>> print(A) {1, 2, 4, 5} =====Problem Statement===== There are two teams in a coding competition: Team A and Team B. Every member of both teams has their unique ID number. Some members are only in Team A, some are only in Team B, and some belong to both teams. You are given two sets of team ID numbers. One set represents the members of Team A and the other set represents the members of Team B. Your task is to find the updated set of Team A\'s members after applying the symmetric difference update operation with Team B. =====Input Format===== The first line contains the number of members in Team A. The second line contains the space separated list of member ID numbers in Team A. The third line contains the number of members in Team B. The fourth line contains the space separated list of member ID numbers in Team B. =====Constraints===== 0 < Total number of team members < 1000 =====Output Format===== Output the updated set of Team A\'s members after applying the symmetric difference update operation with Team B. Print the members as space-separated values on a single line.","solution":"def update_team_a(team_a_ids, team_b_ids): Updates team_a_ids with the symmetric difference of team_a_ids and team_b_ids. Parameters: team_a_ids (set): A set of integers representing team A\'s member IDs team_b_ids (set): A set of integers representing team B\'s member IDs Returns: set: The updated team A member IDs after the symmetric difference update team_a_ids.symmetric_difference_update(team_b_ids) return team_a_ids"},{"question":"Create a function that takes an array of positive integers and returns an array containing only the prime numbers from the input array. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The function should utilize an efficient algorithm to determine the primality of each number in the input array. **Example:** ```python Input: [2, 3, 4, 5, 10, 11, 13, 14, 17] Output: [2, 3, 5, 11, 13, 17] ``` **Constraints:** - The input array can have up to 10^5 elements. - Each element in the input array will be a positive integer less than or equal to 10^6.","solution":"def is_prime(n): Returns True if n is a prime number, otherwise returns False. if n <= 1: return False if n == 2 or n == 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(arr): Returns a list of prime numbers from the given list of positive integers. return [x for x in arr if is_prime(x)]"},{"question":"# Task Given an array of integers, determine the length of the shortest contiguous subarray, that if sorted, would result in the entire array being sorted. # Example For `arr = [2, 6, 4, 8, 10, 9, 15]`, the output should be `5`. The subarray `[6, 4, 8, 10, 9]`, if sorted, results in the entire array being sorted. Thus, the length of this subarray is `5`. # Input/Output - `[input]` array of integers `arr` Constraints: `1 ≤ arr.length ≤ 1000`, `-10^5 ≤ arr[i] ≤ 10^5` - `[output]` an integer","solution":"def find_unsorted_subarray_length(arr): Returns the length of the shortest contiguous subarray which, if sorted, would result in the whole array being sorted. n = len(arr) left, right = 0, n - 1 # Find the first element out of order from the left while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 # If the entire array is sorted if left == n - 1: return 0 # Find the first element out of order from the right while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # Find the minimum and maximum of the subarray arr[left:right+1] subarray_min = min(arr[left:right + 1]) subarray_max = max(arr[left:right + 1]) # Extend the subarray to include any number that is greater than the minimum while left > 0 and arr[left - 1] > subarray_min: left -= 1 # Extend the subarray to include any number that is less than the maximum while right < n - 1 and arr[right + 1] < subarray_max: right += 1 return right - left + 1"},{"question":"Character Frequency Finder Given a string, you need to write a function that returns the most frequently occurring character in the string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. # Example most_frequent_char(\\"character\\") -> \\"c\\" most_frequent_char(\\"excellence\\") -> \\"e\\" # Constraints - The given string will contain only lowercase alphabetic characters (a-z). - The string will have a length of at least 1 and at most 1000 characters. # Function Signature ```python def most_frequent_char(s: str) -> str: ``` # Task Write the function `most_frequent_char` that implements the above logic. # Additional Examples most_frequent_char(\\"aabbccddeeff\\") -> \\"a\\" most_frequent_char(\\"abcabcabc\\") -> \\"a\\"","solution":"def most_frequent_char(s: str) -> str: from collections import Counter # Create a counter to count frequency of each character counter = Counter(s) # Find the character with the highest frequency max_count = max(counter.values()) # Find the first character that has the highest frequency for char in s: if counter[char] == max_count: return char"},{"question":"Given an array of integers sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. Return the new length of the array after the duplicates have been removed. You must do this by modifying the input array in-place with O(1) extra memory. Example 1: ``` Input: nums = [1,1,2] Output: 2, nums = [1,2,_] Explanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn\'t matter what you leave beyond the new length. ``` Example 2: ``` Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0,1,2,3,4,_,_,_,_,_] Explanation: Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively. It doesn\'t matter what values are set beyond the returned length. ``` **Note:** Your solution should modify the input array so that the first \'n\' elements contain only the unique elements, where \'n\' is the length of the new array after removing duplicates.","solution":"def remove_duplicates(nums): Removes duplicates from the sorted list nums in-place and returns the new length of the list with unique elements. Parameters: nums (List[int]): A list of sorted integers. Returns: int: The length of list after duplicates have been removed. if not nums: return 0 # Index to place the next unique element unique_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[unique_index] = nums[i] unique_index += 1 return unique_index"},{"question":"A prime factorization of a number is a representation of the number as a product of its prime factors. For instance, the prime factorization of 18 is 2 * 3^2. Write a function `prime_factorization(n)` that takes a positive integer n and returns its prime factorization as a dictionary, where the keys are the prime factors and the values are their respective exponents in the factorization. The factors should be returned in ascending order. For example: - `prime_factorization(18)` should return `{2: 1, 3: 2}` because 2^1 * 3^2 = 18. - `prime_factorization(60)` should return `{2: 2, 3: 1, 5: 1}` because 2^2 * 3^1 * 5^1 = 60.","solution":"def prime_factorization(n): Returns the prime factorization of a positive integer n as a dictionary where keys are the prime factors and values are their respective exponents. factors = {} # Test for number of 2s count = 0 while n % 2 == 0: count += 1 n //= 2 if count > 0: factors[2] = count # Test for odd factors from 3 onwards factor = 3 while factor * factor <= n: count = 0 while n % factor == 0: count += 1 n //= factor if count > 0: factors[factor] = count factor += 2 # If n is still a prime number greater than 2 if n > 2: factors[n] = 1 return factors"},{"question":"Write a Python function `find_duplicate_numbers(nums)` that takes a list of integers `nums` where each integer is in the range 1 to n (inclusive), where n is the size of the list, and some elements appear twice and others appear once. The function should return a list of all the integers that appear twice in the input list. Implement the function such that it runs in O(n) time and uses only constant extra space. **Example 1:** Input: `[4,3,2,7,8,2,3,1]` Output: `[2, 3]` **Example 2:** Input: `[1,1,2]` Output: `[1]` **Example 3:** Input: `[1]` Output: `[]` **Constraints:** 1. `n == nums.length` 2. `1 <= n <= 10^5` 3. `1 <= nums[i] <= n` 4. Each element in nums appears either once or twice.","solution":"def find_duplicate_numbers(nums): Function to find all numbers that appear twice in the input list. Assumes that the numbers are in the range 1 to n and the list size is n. Args: nums (list[int]): List of integers where each integer is in the range 1 to n. Returns: list[int]: List of duplicated integers. duplicates = [] for num in nums: index = abs(num) - 1 if nums[index] < 0: duplicates.append(abs(num)) nums[index] = -nums[index] return duplicates"},{"question":"Sarah has a sequence of integers that represent the profits and losses she has made in a series of stock market trades. She wants to analyze the performance of a contiguous subarray that represents her investment period. Specifically, she wants to find the maximum sum possible for any continuous subarray (even a single element subarray is considered) and the start and end indices of this maximum subarray. -----Input:----- - The first line will contain T, the number of test cases. - For each test case, the first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers P1, P2, ..., PN representing the profits and losses. -----Output:----- For each test case, print the maximum possible sum of any contiguous subarray, the starting index and the ending index of that subarray (0-based indexing). If there are multiple subarrays with the same maximum sum, return the one with the greater starting index. If there are still ties, return the one with the greater ending index. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - -10^4 leq P[i] leq 10^4 -----Subtasks----- - 30 points: 1 leq N leq 10^3 - 70 points: 1 leq N leq 10^5 -----Sample Input:----- 1 5 -1 2 3 -2 4 -----Sample Output:----- 7 1 4 -----Explanation:----- The maximum sum can be obtained from the subarray [2, 3, -2, 4] which sums to 7. The start index is 1 and the end index is 4.","solution":"def max_subarray_with_indices(arr): max_sum = float(\'-inf\') current_sum = 0 start = end = temp_start = 0 for i in range(len(arr)): if current_sum <= 0: temp_start = i current_sum = arr[i] else: current_sum += arr[i] if current_sum > max_sum or (current_sum == max_sum and (temp_start > start or (temp_start == start and i > end))): max_sum = current_sum start = temp_start end = i return max_sum, start, end def process_test_cases(test_cases): results = [] for case in test_cases: N, array = case results.append(max_subarray_with_indices(array)) return results"},{"question":"Hey CodeWarrior, get ready for another coding challenge! We\'ll be dealing with numerical data and list manipulation this time around. Let\'s dive in... Background You are given an array of integers where each element represents the score a student has achieved in a test. Our target is to perform a few operations on this list of scores to get some useful information out. Task 1. Identify and remove all occurrences of a specific score (e.g., 0) from the list as they represent invalid entries. 2. Calculate the average score from the remaining entries. 3. Find the score that appears most frequently in the list and return it. If there is a tie, return any one of the most frequent scores. 4. Return the list of scores sorted in ascending order. --- Requirement You may use built-in methods or manually code the operations as you prefer. Some references for Python: - [Python: List Comprehensions](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions) - [Python: Statistics](https://docs.python.org/3/library/statistics.html) - [Python: Collections](https://docs.python.org/3/library/collections.html) Good luck, and happy coding!","solution":"from collections import Counter from statistics import mean def process_scores(scores, invalid_score): Process the scores list by removing the invalid_score, calculating average of the remaining scores, finding the most frequent score, and returning the sorted list of remaining scores. :param scores: List[int] - list of scores :param invalid_score: int - score that should be removed from the list :return: Tuple[float, int, List[int]] - average score, most frequent score, sorted remaining scores # Step 1: Remove all occurrences of the invalid_score filtered_scores = [score for score in scores if score != invalid_score] # Step 2: Calculate the average score avg_score = mean(filtered_scores) if filtered_scores else 0 # Step 3: Find the most frequent score if filtered_scores: score_counts = Counter(filtered_scores) most_frequent_score = score_counts.most_common(1)[0][0] else: most_frequent_score = None # Step 4: Return the sorted list of remaining scores sorted_scores = sorted(filtered_scores) return avg_score, most_frequent_score, sorted_scores"},{"question":"In this question, you are required to determine if a given string can be broken down into a given set of words by inserting spaces in appropriate positions. Each word can be used multiple times. Write a function `canBreak(s: str, wordDict: List[str]) -> bool` that returns whether the string `s` can be segmented into a space-separated sequence of one or more dictionary words. -----Input----- The input consists of a string `s` which contains lowercase English letters and a list of strings `wordDict` which contains unique words. -----Output----- Return `True` if `s` can be segmented into one or more dictionary words from `wordDict`, otherwise return `False`. -----Example----- Example 1: Input: s = \\"leetcode\\" wordDict = [\\"leet\\", \\"code\\"] Output: True Explanation: Return `True` because \\"leetcode\\" can be segmented as \\"leet code\\". Example 2: Input: s = \\"applepenapple\\" wordDict = [\\"apple\\", \\"pen\\"] Output: True Explanation: Return `True` because \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Note that you are allowed to reuse dictionary words. Example 3: Input: s = \\"catsandog\\" wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: False Explanation: Return `False` because \\"catsandog\\" cannot be segmented into a space-separated sequence of one or more dictionary words. -----Constraints----- * The `s` length is between 1 and 300. * The wordDict length is between 1 and 10^4. * Each word in wordDict has a length between 1 and 15.","solution":"from typing import List def canBreak(s: str, wordDict: List[str]) -> bool: word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True # Base case: empty string can always be segmented for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"String Reversal and Palindrome Check You are tasked with creating a function to check if a given string is a palindrome. A palindrome is a string that reads the same forwards and backwards, ignoring case, spaces, and punctuation. Write a function `isPalindrome`/`IsPalindrome`/`is_palindrome` that takes one parameter, a string `s`, and returns `true` if the string is a palindrome and `false` otherwise. # Function Signature ```python def is_palindrome(s: str) -> bool: pass ``` # Example 1. `is_palindrome(\\"A man, a plan, a canal, Panama\\")` should return `True` since it reads the same forwards and backwards if you ignore spaces, punctuation, and case. 2. `is_palindrome(\\"race a car\\")` should return `False` because even if you ignore case, spaces, and punctuation, it doesn\'t read the same forwards and backwards. # Restrictions - The input string `s` will consist only of printable ASCII characters. - You should ignore case, spaces, and punctuation while determining if the string is a palindrome.","solution":"import re def is_palindrome(s: str) -> bool: Checks if the provided string is a palindrome, ignoring case, spaces, and punctuation. Args: s (str): The string to check. Returns: bool: True if the string is a palindrome, False otherwise. # Use regex to remove non-alphanumeric characters and convert to lowercase filtered_str = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the filtered string is equal to its reverse return filtered_str == filtered_str[::-1]"},{"question":"You are building an automated ticket distribution system for a music festival. The festival has multiple events, each with a fixed number of tickets. People can request a group of tickets for a particular event. Write a function `allocate_tickets(event_tickets, requests)` that takes a dictionary and a list of tuples as its parameters. The dictionary `event_tickets` contains the event names as keys and the number of available tickets as values. The list `requests` contains tuples, each with an event name and the number of tickets requested. The function should process the list of requests and allocate tickets if enough tickets are available for the requested event. The function should return a new dictionary with the event names as keys and the number of tickets allocated as values. If a request cannot be fulfilled because there are not enough tickets, that request should be ignored. For example: ```python event_tickets = { \\"concert_a\\": 100, \\"concert_b\\": 50, \\"concert_c\\": 10 } requests = [ (\\"concert_a\\", 30), (\\"concert_b\\", 60), (\\"concert_c\\", 5), (\\"concert_a\\", 70) ] allocate_tickets(event_tickets, requests) ``` Output: ```python { \\"concert_a\\": 100, \\"concert_c\\": 5 } ``` In this example, the request for \\"concert_b\\" is ignored because there are only 50 tickets but 60 were requested. The requests for \\"concert_a\\" and \\"concert_c\\" are fully fulfilled. Note that the request for 70 tickets for \\"concert_a\\" is partially fulfilled up to the number of available tickets left after fulfilling the first request.","solution":"def allocate_tickets(event_tickets, requests): Process ticket requests and allocate available tickets. Parameters: event_tickets (dict): Dictionary with event names as keys and available tickets as values. requests (list of tuples): List of tuples, each containing an event name and the number of tickets requested. Returns: dict: Dictionary with event names as keys and the number of tickets allocated as values. allocated_tickets = {event: 0 for event in event_tickets} for event, requested in requests: if event in event_tickets: if event_tickets[event] >= requested: allocated_tickets[event] += requested event_tickets[event] -= requested return {event: tickets for event, tickets in allocated_tickets.items() if tickets > 0}"},{"question":"Binary Search - Find Insert Position Write a `findInsertPosition()` function that determines the index position at which a value should be inserted into a sorted (ascending) array to maintain its sorted order. The function takes a sorted array and a value as arguments and returns the index where the value should be inserted. For example, given the sorted array `[1, 3, 5, 6]` and the target value `5`, the function should return `2` because `5` is already in its correct position. For the target value `2`, the function should return `1` because `2` should be inserted between `1` and `3`. ```python def findInsertPosition(arr, value): left, right = 0, len(arr) while left < right: mid = (left + right) // 2 if arr[mid] < value: left = mid + 1 else: right = mid return left # Example usage: # arr = [1, 3, 5, 6] # value = 5 # Output: 2 # arr = [1, 3, 5, 6] # value = 2 # Output: 1 ``` The goal is to find the appropriate index position efficiently using binary search approach.","solution":"def findInsertPosition(arr, value): Determines the index position at which a value should be inserted into a sorted (ascending) array to maintain its sorted order. Parameters: arr (list of int): A sorted list of integers. value (int): The value to be inserted. Returns: int: The index position where the value should be inserted. left, right = 0, len(arr) while left < right: mid = (left + right) // 2 if arr[mid] < value: left = mid + 1 else: right = mid return left"},{"question":"Story Emma is a gardener and keeps track of the plants she needs to water using a special system. Each entry in her diary records a plant\'s name, how many days ago she last watered it, and the typical watering frequency for that plant in days. Example of such a diary: ``` [ [\\"Rose\\", 3, 2], [\\"Tulip\\", 5, 4], [\\"Orchid\\", 10, 7] ] ``` In the above example, Emma last watered the Rose 3 days ago and typically waters it every 2 days. The Tulip was last watered 5 days ago and needs watering every 4 days. The Orchid needs watering every 7 days, yet she last watered it 10 days ago. Given this information, write a function to determine which plants need to be watered today. A plant needs to be watered if the number of days since it was last watered is greater than or equal to its watering frequency. Rules Write a function `plantsToWater` that takes an argument `diary`, which is the list of watering records. Return a list of plant names that need to be watered today. Examples ```python plantsToWater([ [\\"Rose\\", 3, 2], [\\"Tulip\\", 5, 4], [\\"Orchid\\", 10, 7] ]) # should return [\\"Rose\\", \\"Tulip\\", \\"Orchid\\"] plantsToWater([ [\\"Cactus\\", 10, 30], [\\"Sunflower\\", 3, 3], [\\"Lily\\", 1, 2] ]) # should return [\\"Sunflower\\"] ```","solution":"def plantsToWater(diary): Given a list of lists where each inner list represents a plant, the days since it was last watered and the watering frequency, this function returns a list of plant names that need to be watered today. :param diary: List[List[str, int, int]] :return: List[str] plants_to_water = [] for entry in diary: plant_name, days_since_watered, watering_frequency = entry if days_since_watered >= watering_frequency: plants_to_water.append(plant_name) return plants_to_water"},{"question":"# Objective Given a string `s` comprising only of lowercase English alphabets, define a function `rearrange_string` that rearranges the characters of the string such that no two adjacent characters are the same. If it is not possible to rearrange the string, return an empty string. Examples `rearrange_string(\\"aabbcc\\")` = \\"abcabc\\" `rearrange_string(\\"aaab\\")` = \\"\\" `rearrange_string(\\"aaabbbccc\\")` = \\"abcabcabc\\" `rearrange_string(\\"aaa\\")` = \\"\\" `rearrange_string(\\"aab\\")` = \\"aba\\" **Note:** No error checking is needed. The input string `s` length ranges between 1 and 100000. You can assume there will be at least one valid input that meets the conditions.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the characters of the string such that no two adjacent characters are the same. If it is not possible to rearrange the string, returns an empty string. freq = Counter(s) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) result = [] prev_count, prev_char = 0, \'\' while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char rearranged_str = \'\'.join(result) return rearranged_str if len(rearranged_str) == len(s) else \\"\\" # Test case examples print(rearrange_string(\\"aabbcc\\")) # Example output: \\"abcabc\\" print(rearrange_string(\\"aaab\\")) # Example output: \\"\\" print(rearrange_string(\\"aaabbbccc\\")) # Example output: \\"abcabcabc\\" print(rearrange_string(\\"aaa\\")) # Example output: \\"\\" print(rearrange_string(\\"aab\\")) # Example output: \\"aba\\""},{"question":"Create a function `sort_colors` to sort an array containing only integers 0, 1, and 2. This problem is also known as the Dutch national flag problem. The function should arrange the array elements so that all 0s come before 1s, which come before all 2s. Your solution should have a time complexity of O(n) and use constant space. **Example:** ```python def sort_colors(nums): Args: nums: List[int] --> list of integers that only contains 0, 1, and 2 Returns: None. The list should be sorted in place. # Your code here # Example usage: nums = [2, 0, 2, 1, 1, 0] sort_colors(nums) print(nums) # Output: [0, 0, 1, 1, 2, 2] ``` **Constraints:** - The length of the array is in the range [1, 300] - The array contains only 0, 1, and 2 **Note:** - Do not return anything; modify `nums` in-place instead. - Try to implement the sorting algorithm with a single pass using constant space.","solution":"def sort_colors(nums): Sorts the list containing only integers 0, 1, and 2 in-place. Args: nums: List[int] --> list of integers that only contains 0, 1, and 2 Returns: None. The list should be sorted in place. low, mid, high = 0, 0, len(nums) - 1 while mid <= high: if nums[mid] == 0: nums[low], nums[mid] = nums[mid], nums[low] low += 1 mid += 1 elif nums[mid] == 1: mid += 1 else: nums[mid], nums[high] = nums[high], nums[mid] high -= 1"},{"question":"Given a string s consisting of lowercase letters, and an integer k, write a function that returns the length of the longest substring that can be formed by changing at most k characters. Implement: longest_substring_with_k_replacements(s, k) --returns the length of the longest substring with at most k character replacements Example: longest_substring_with_k_replacements(\\"aabccbb\\", 2) returns 5 longest_substring_with_k_replacements(\\"abbcb\\", 1) returns 4 longest_substring_with_k_replacements(\\"abccde\\", 1) returns 3 Explanation: 1. For \\"aabccbb\\", with k = 2: We can change two \'c\'s to \'b\' to form \\"aabbbbb\\", so the longest substring is 5. 2. For \\"abbcb\\", with k = 1: We can change one \'c\' to \'b\' to form \\"abbbb\\", so the longest substring is 4. 3. For \\"abccde\\", with k = 1: We can change either \'b\' or \'d\' to \'c\', therefore the longest substring is \\"ccc\\" of length 3. Constraints: 1 <= len(s) <= 10^5 1 <= k < len(s)","solution":"def longest_substring_with_k_replacements(s, k): Returns the length of the longest substring with at most k character replacements. max_length = 0 max_char_count = 0 char_frequency = {} left = 0 for right in range(len(s)): char_frequency[s[right]] = char_frequency.get(s[right], 0) + 1 max_char_count = max(max_char_count, char_frequency[s[right]]) # Current window size is (right - left + 1). # If we have more than \'k\' replacement characters, reduce the window size from the left if (right - left + 1) - max_char_count > k: char_frequency[s[left]] -= 1 if char_frequency[s[left]] == 0: del char_frequency[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"A mysterious physician from ancient times has discovered a mystical potion that grants eternal youth. However, the only way to create this potion is by following an ancient recipe which is quite particular about the order in which ingredients must be mixed. You are given n ingredients and a series of dependencies which state that certain ingredients must be mixed before others. Your task is to determine the order in which to mix the ingredients so that all dependencies are satisfied. Furthermore, it might be the case that the dependencies form multiple valid sequences of mixing the ingredients. In that case, any valid sequence is acceptable. -----Input----- The first line contains two integers n (1 le n le 100) and m (0 le m le 4900) — the number of ingredients and the number of dependencies, respectively. The next m lines each contain two integers u_i and v_i (1 le u_i, v_i le n) indicating that ingredient u_i must be mixed before ingredient v_i. -----Output----- Output a single line containing any valid order in which to mix the ingredients such that all given dependencies are satisfied. If it is impossible to mix the ingredients in such an order, output \\"IMPOSSIBLE\\". -----Example----- Input 4 3 1 2 1 3 3 4 Output 1 3 4 2 -----Note----- In the example, since ingredient 1 must be mixed before ingredients 2 and 3, and ingredient 3 must be mixed before ingredient 4, a valid sequence is 1, 3, 4, 2. An alternative valid sequence for the same input could be 1, 2, 3, 4. If no such sequence exists due to circular dependencies or other reasons, the output should be \\"IMPOSSIBLE\\".","solution":"from collections import defaultdict, deque def find_mix_order(n, m, dependencies): Determine a valid order to mix ingredients based on given dependencies. Parameters: - n (int): Number of ingredients. - m (int): Number of dependencies. - dependencies (List[Tuple[int, int]]): List of dependencies (u, v) where u must come before v. Returns: - List[int] or str: A valid mix order of ingredients as a list of integers, or \\"IMPOSSIBLE\\" if no valid order exists. # Initialize the graph graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} # Build the graph for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 # Queue for nodes with no incoming edges queue = deque([node for node in in_degree if in_degree[node] == 0]) mix_order = [] while queue: node = queue.popleft() mix_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If we are able to process all nodes, return the order if len(mix_order) == n: return mix_order else: return \\"IMPOSSIBLE\\""},{"question":"You are working on developing a delivery management system for a logistics company. The company delivers packages along a series of connected cities. The cities are represented as nodes in a graph, and the direct delivery routes between them are the edges. You are given a list of direct delivery routes between cities and their corresponding delivery times. Your task is to determine the shortest delivery time between any two given cities, if a route exists. If there is no way to deliver a package between the two cities, return -1. -----Input----- - The first line of the input contains two integers N and M denoting the number of cities and the number of direct delivery routes, respectively. - The following M lines each contain three space-separated integers u, v, and t, indicating that there is a direct delivery route from city u to city v with a delivery time of t minutes. - The next line contains a single integer Q denoting the number of queries. - The following Q lines each contain two space-separated integers a and b representing a query where you need to find the shortest delivery time between city a and city b. -----Output----- For each query, print a single integer: the shortest delivery time between city a and city b, or -1 if there is no path between the two cities. -----Constraints----- - 1 le N le 1000 - 0 le M le 5000 - 1 le u, v, a, b le N - 0 le t le 10^6 - 1 le Q le 1000 -----Example Input----- 5 6 1 2 4 1 3 2 2 3 5 2 4 10 3 4 3 4 5 1 3 1 5 1 4 3 2 -----Example Output----- 6 5 -1 -----Explanation----- Example case 1: - The shortest path from city 1 to city 5 goes through cities 3 and 4, with a total delivery time of 6 minutes. - The shortest path from city 1 to city 4 goes directly through city 3, with a delivery time of 5 minutes. - There is no path from city 3 to city 2 via direct routes as given.","solution":"import heapq import sys def dijkstra(graph, start): distances = {node: float(\'inf\') for node in graph} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node].items(): distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_delivery_time(N, M, routes, Q, queries): graph = {i: {} for i in range(1, N + 1)} for u, v, t in routes: if v in graph[u]: graph[u][v] = min(graph[u][v], t) else: graph[u][v] = t results = [] for a, b in queries: distances = dijkstra(graph, a) results.append(distances[b] if distances[b] != float(\'inf\') else -1) return results"},{"question":"# Unique Element Finder in a Matrix ___ # Task **_Given_** a two-dimensional array (matrix) of integers, **_determine_** the *number of unique elements* in the matrix. ___ # Notes - The matrix can be of any size, but will have at least one element. - Elements can be negative, zero, or positive integers. - A number is considered unique in the matrix if it appears exactly once. ___ # Input >> Output Examples ``` uniqueElementCount([[1,2,2], [3,1,4]]) ==> return 2 ``` **_Explanation_**: - The unique elements in the matrix are `1`, `3`, and `4`. - The element `2` is not unique because it appears twice. - Therefore, the number of unique elements is `2`. ___ ``` uniqueElementCount([[5,5,5], [5,5,5]]) ==> return 0 ``` **_Explanation_**: - All elements in the matrix are `5` and they are repeated multiple times. - Therefore, the number of unique elements is `0`. ___ ``` uniqueElementCount([[0], [1, -1], [2, 2, -1]]) ==> return 2 ``` **_Explanation_**: - The unique elements in the matrix are `0` and `1`. - The elements `-1` and `2` are not unique because they appear more than once. - Therefore, the number of unique elements is `2`. ___ # Additional Testing ___ ``` uniqueElementCount([[10, 15], [15, -20], [-20, 10, 30]]) ==> return 1 ``` **_Explanation_**: - The unique element in the matrix is `30`. - The elements `10`, `15`, and `-20` each appear more than once. - Therefore, the number of unique elements is `1`.","solution":"def uniqueElementCount(matrix): Returns the number of unique elements in the given matrix. from collections import Counter # Flatten the matrix into a single list flattened_matrix = [item for sublist in matrix for item in sublist] # Count the occurrences of each element element_count = Counter(flattened_matrix) # Count the number of elements that appear exactly once unique_elements = [elem for elem, count in element_count.items() if count == 1] return len(unique_elements)"},{"question":"Write a function `find_anagram_indices` that takes two parameters: a string `s` and a string `p`. The function should return a list of starting indices of the anagrams of `p` present in `s`. An anagram is a permutation of a string. The order of output does not matter. Constraints: - Length of both strings will be at most 10000. - The strings will consist of lowercase English letters only. Examples: ```python find_anagram_indices(\\"cbaebabacd\\", \\"abc\\") # Output: [0, 6] # Explanation: The substring \\"cba\\" from index 0 to 2 is an anagram of \\"abc\\". # The substring \\"bac\\" from index 6 to 8 is an anagram of \\"abc\\". find_anagram_indices(\\"abab\\", \\"ab\\") # Output: [0, 1, 2] # Explanation: The substrings \\"ab\\" (starting at index 0, 1, and 2) are anagrams of \\"ab\\". ``` Additional Notes: - The length of the answer list should match the number of starting anagram indices found. - Use efficient algorithms to handle large strings, as brute-force solutions may not run within the time limit.","solution":"def find_anagram_indices(s, p): from collections import Counter p_len = len(p) s_len = len(s) result = [] if p_len > s_len: return result p_count = Counter(p) s_count = Counter(s[:p_len-1]) for i in range(p_len - 1, s_len): s_count[s[i]] += 1 if s_count == p_count: result.append(i - p_len + 1) s_count[s[i - p_len + 1]] -= 1 if s_count[s[i - p_len + 1]] == 0: del s_count[s[i - p_len + 1]] return result"},{"question":"Write a function to transform the input string from PascalCase to snake_case. The function should take a single string as input and return a string. The function should be named `to_snake_case`, and it should convert all of the upper-case letters to lower-case letters and insert underscores before each of the upper-case letters (except the first letter if it is the first character of the string). Example input and output: ```python to_snake_case(\\"ThisIsAnExample\\") # returns \\"this_is_an_example\\" to_snake_case(\\"WhereIsMyCamel\\") # returns \\"where_is_my_camel\\" to_snake_case(\\"AnotherExample\\") # returns \\"another_example\\" ```","solution":"def to_snake_case(s): Convert a given PascalCase string to snake_case. :param s: The PascalCase string :return: The snake_case string result = [] for char in s: if char.isupper(): if result: # Add underscore if result is not empty result.append(\'_\') result.append(char.lower()) else: result.append(char) return \'\'.join(result)"},{"question":"# Problem: Sorted Array Insertion Write a Python function that takes two arguments: a list of integers that is already sorted in ascending order, and an integer value to insert. The function should insert the value into the list in appropriate position to maintain the sorted order without using any sorting functions. The function should return the updated list. Constraints: 1. Do not use any built-in sort functions or the \'sorted\' method. 2. Minimize the number of comparisons to achieve optimal performance. 3. You may use other built-in list methods like `append()` or `insert()`. # Example ```python def insert_into_sorted_list(sorted_list, value): # Your code here # Example 1 sorted_list = [1, 3, 5, 7] value = 4 print(insert_into_sorted_list(sorted_list, value)) # Output: [1, 3, 4, 5, 7] # Example 2 sorted_list = [10, 20, 30, 40] value = 25 print(insert_into_sorted_list(sorted_list, value)) # Output: [10, 20, 25, 30, 40] # Example 3 sorted_list = [-5, -3, -1, 0, 2] value = -2 print(insert_into_sorted_list(sorted_list, value)) # Output: [-5, -3, -2, -1, 0, 2] ``` # Additional Notes - Ensure that your solution handles edge cases such as inserting into an empty list. - Test your function with various inputs to ensure it correctly maintains the sorted order.","solution":"def insert_into_sorted_list(sorted_list, value): Inserts a value into a sorted list while maintaining the sorted order. Parameters: sorted_list (list): A list of integers sorted in ascending order. value (int): An integer value to insert into the list. Returns: list: The updated list with the value inserted. if not sorted_list: return [value] for i in range(len(sorted_list)): if value <= sorted_list[i]: sorted_list.insert(i, value) break else: sorted_list.append(value) return sorted_list"},{"question":"Create a function `count_attendees(n)` that takes an integer `n`, representing the number of weeks from now, and calculates the total number of attendees at the event. The event has a specific pattern: - In week 1, there are 10 attendees. - In week 2, the number of attendees increases by 50%. - In week 3, the number of attendees doubles the number from the previous week. - In week 4, the number of attendees again doubles from the previous week. - From week 5 onwards, the increase in the number of attendees each week is 30% more than the previous week. Return null if n is not an integer greater than 0. Example: ```python count_attendees(1) -> 10 count_attendees(2) -> 15 count_attendees(3) -> 30 count_attendees(4) -> 60 count_attendees(5) -> 78 ```","solution":"def count_attendees(n): Returns the number of attendees at the event in the nth week. if not isinstance(n, int) or n <= 0: return None attendees = 10 for week in range(1, n): if week == 1: attendees *= 1.5 elif week == 2 or week == 3: attendees *= 2 else: attendees *= 1.3 return int(attendees)"},{"question":"Given an array of integers, write a function `duplicateExists(arr)` that checks if any value appears at least twice in the array. A few cases: ``` { duplicateExists([1, 2, 3, 4, 5]) -> false // No duplicates duplicateExists([1, 2, 3, 4, 4]) -> true // \'4\' appears twice duplicateExists([]) -> false // Empty array has no duplicates duplicateExists([0, -1, -1, 2]) -> true // \'-1\' appears twice } ``` P.S. Consider edge cases like empty array or arrays with only one element. In those cases, return false.","solution":"def duplicateExists(arr): Checks if any value appears at least twice in the array. seen = set() for number in arr: if number in seen: return True seen.add(number) return False"},{"question":"Task You are given a rectangular grid (matrix) where each cell contains an integer. Your task is to find the maximum sum of integers that can be obtained from any subrectangle within the grid. A subrectangle is defined by any four indices (i1, j1), (i2, j2) such that 0 ≤ i1 ≤ i2 < n and 0 ≤ j1 ≤ j2 < m, where n is the number of rows and m is the number of columns in the matrix. # Example For `matrix = [ [1, 2, -1, 4], [-8, 5, 3, -2], [3, 7, -8, -6], [-3, 4, 2, 6] ]`, the output should be `18`. Explanation: The subrectangle with maximum sum is: ``` 5, 3 7, -8 4, 2 ``` The sum of these elements is 5 + 3 + 7 - 8 + 4 + 2 = 13. For `matrix = [ [-1, -1, -1], [-1, -1, -1], [-1, -1, -1] ]`, the output should be `-1`. Explanation: The largest possible subrectangle sum is just one cell, -1. # Input/Output - `[input]` 2D array `matrix` `1 ≤ matrix.length, matrix[i].length ≤ 100` - `[output]` An integer The maximum sum of a subrectangle.","solution":"def max_subrectangle_sum(matrix): Calculate the maximum sum of any subrectangle within a given matrix. if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) max_sum = float(\\"-inf\\") for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] current_max = kadane(temp) max_sum = max(max_sum, current_max) return max_sum def kadane(arr): Helper function to find the maximum sum subarray using Kadane\'s algorithm. max_ending_here = max_so_far = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"John has a rectangular field with dimensions M x N. He wants to place some trees in the field such that no two trees are directly adjacent (vertically, horizontally, or diagonally). John wants to know the maximum number of trees he can place in this field following the above condition. -----INPUT FORMAT----- - The first line of each test case contains T, the number of test cases. - Each of the following T lines contains two integers M and N, denoting the dimensions of the field. -----OUTPUT FORMAT----- - For each test case, print a single integer, the maximum number of trees that can be placed in the M x N field. -----Constraints----- - 1 leq T leq 100 - 1 leq M, N leq 100 -----Sub-Tasks----- - 20 Points - 1 leq M, N leq 50 -----Sample Input----- 2 3 3 2 2 -----Sample Output----- 5 2 -----Explanation----- For the first test case: The 3x3 grid can be filled as follows (T denotes a tree, . denotes an empty cell): T . T . T . T . T For the second test case: The 2x2 grid can be filled as follows: T . . T","solution":"def max_trees(m, n): Returns the maximum number of trees that can be placed in an MxN field such that no two trees are directly adjacent (vertically, horizontally, or diagonally). if m == 1 or n == 1: return m * n total_slots = m * n alternating_slots = (total_slots + 1) // 2 return alternating_slots def solve(test_cases): results = [] for (m, n) in test_cases: results.append(max_trees(m, n)) return results"},{"question":"Write a function `flattenNestedList`/`flatten_nested_list` that takes a nested list and returns a flat list while preserving the order of elements. A nested list is a list where each element can be an integer or another nested list. For example, `flattenNestedList([1, [2, [3, 4], 5], 6])` should return `[1, 2, 3, 4, 5, 6]` `flattenNestedList([[1, 2, [3]], 4, [5, 6]])` should return `[1, 2, 3, 4, 5, 6]`","solution":"def flatten_nested_list(nested_list): Flattens a nested list into a single list of integers, preserving order. :param nested_list: List containing integers or nested lists :return: Flattened list of integers flat_list = [] def flatten(sublist): for item in sublist: if isinstance(item, list): flatten(item) else: flat_list.append(item) flatten(nested_list) return flat_list"},{"question":"Given a list of integers, you are to find the greatest contiguous subarray sum. A contiguous subarray is a subarray made up of consecutive elements within the array. For example, if the input list is `[1, -2, 3, 4, -5, 8]`, the contiguous subarrays include `[1]`, `[-2]`, `[1, -2]`, `[3, 4]`, and so on. Your task is to write a function that, given an array of integers, returns the sum of the contiguous subarray with the greatest sum. For example: ``` greatest_contiguous_sum([1, -2, 3, 4, -5, 8]) should return 10 because the subarray [3, 4, -5, 8] has the greatest sum. ``` Your function should have the following signature: ```python def greatest_contiguous_sum(arr: List[int]) -> int: pass ``` **Constraints:** 1. The length of the input list `n` will be in the range `[1, 10^5]`. 2. Each element in the list will be an integer in the range `[-10^4, 10^4]`. **Example:** ```python assert greatest_contiguous_sum([1, -2, 3, 4, -5, 8]) == 10 assert greatest_contiguous_sum([-2, -3, 4, -1, -2, 1, 5, -3]) == 7 assert greatest_contiguous_sum([1]) == 1 assert greatest_contiguous_sum([5, 4, -1, 7, 8]) == 23 ```","solution":"from typing import List def greatest_contiguous_sum(arr: List[int]) -> int: # Initialize variables to store the maximum sum and current sum max_sum = current_sum = arr[0] for num in arr[1:]: # Update current_sum to be the maximum of the current number itself or the current sum plus the current number current_sum = max(num, current_sum + num) # Update max_sum to be the maximum of max_sum and current_sum max_sum = max(max_sum, current_sum) return max_sum"},{"question":"# Task A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward (ignoring spaces, punctuation, and capitalization). Write a function that determines if the digits of a given integer form a palindrome when read in reverse order. # Example For `num = 12321`, the result should be `true` For `num = 12345`, the result should be `false` # Input/Output - `[input]` integer `num` A non-negative integer. `0 <= num <= 10^7` - `[output]` a boolean Return `true` if the digits of num form a palindrome, otherwise return `false`. # Example Usage ```python is_palindrome(12321) # should return True is_palindrome(123456) # should return False ```","solution":"def is_palindrome(num): Determines if the digits of a given integer form a palindrome when read in reverse order. Args: num (int): A non-negative integer. 0 <= num <= 10^7 Returns: bool: True if the digits of num form a palindrome, otherwise False. str_num = str(num) return str_num == str_num[::-1]"},{"question":"Task You are given an input string that represents a mathematical expression involving only positive integers and the operators `+`, `-`, and `*`. Your task is to evaluate this expression and return its result. However, the input may also contain whitespace, which should be ignored in the evaluation. You cannot use the built-in `eval` function or similar feature in your programming language. Instead, you should implement a function that processes the expression correctly respecting the usual operator precedence (`*` has higher precedence than `+` or `-`). # Examples - For `expression = \\"3 + 5 * 2 - 4\\"`, the output should be `9`. - Following the correct operator precedence: `3 + (5 * 2) - 4 = 3 + 10 - 4 = 9` - For `expression = \\"10 + 2 * 6\\"`, the output should be `22`. - Following the correct operator precedence: `10 + (2 * 6) = 10 + 12 = 22` - For `expression = \\"100 * 2 + 12\\"`, the output should be `212`. - Following the correct operator precedence: `(100 * 2) + 12 = 200 + 12 = 212` - For `expression = \\"100 * ( 2 + 12 )\\"`, the output should be `1400`. - Following the correct operator precedence: `100 * (2 + 12) = 100 * 14 = 1400` # Input/Output - `[input]` string `expression` - A string representing the mathematical expression. The string can include positive integers, operators (`+`, `-`, `*`), and whitespace. - (0 < |expression| < 1000) - `[output]` integer - The result of evaluating the mathematical expression.","solution":"def evaluate_expression(expression): Evaluate a mathematical expression containing only positive integers and +, -, *, considering operator precedence and ignoring whitespace. def calculate(ops, values): rhs = values.pop() lhs = values.pop() op = ops.pop() if op == \'+\': values.append(lhs + rhs) elif op == \'-\': values.append(lhs - rhs) elif op == \'*\': values.append(lhs * rhs) def precedence(op): if op in (\'+\', \'-\'): return 1 if op == \'*\': return 2 return 0 ops = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue elif expression[i] == \'(\': ops.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': calculate(ops, values) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(expression[i])): calculate(ops, values) ops.append(expression[i]) i += 1 while len(ops) != 0: calculate(ops, values) return values[-1]"},{"question":"Given a string S of length N containing lowercase English letters. You have to handle Q queries on this string. Each query is of one of the following two types: Type 1:- \\"1 l r\\" - Count the number of distinct characters in the substring from index `l` to `r` (inclusive). Type 2:- \\"2 i c\\" - Change the character at index `i` to character `c`. Note: 1-based indexing for queries -----Input:----- - First line will contain N, the length of the string S. - Second line contains the string S of length N. - Third line will contain Q, the number of queries. - Each of the next Q lines will contain one query, which is either of type 1 or type 2 in the format described above. -----Output:----- For each query of Type 1, output the number of distinct characters in the specified substring. -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ l ≤ r ≤ N - 1 ≤ i ≤ N - \'a\' ≤ c ≤ \'z\' -----Sample Input:----- 5 ababc 4 1 1 3 2 2 d 1 1 3 1 2 5 -----Sample Output:----- 2 2 4 -----EXPLANATION:----- - Query 1: The substring from index 1 to 3 is \\"aba\\". There are 2 distinct characters (\'a\' and \'b\'), so the answer is 2. - Query 2: Change the character at index 2 to \'d\'. The string becomes \\"adbabc\\". - Query 3: The substring from index 1 to 3 is now \\"adb\\". There are still 2 distinct characters (\'a\' and \'d\'), so the answer is 2. - Query 4: The substring from index 2 to 5 is \\"dab\\". There are 4 distinct characters (\'a\', \'b\', \'c\', \'d\'), so the answer is 4.","solution":"def handle_queries(N, S, Q, queries): Handle the given queries on the string S. Parameters: - N: Length of the string S - S: The initial string - Q: Number of queries - queries: List of queries Returns: - List of results for type 1 queries results = [] s_list = list(S) # Convert string to list for mutability for query in queries: parts = query.split() if parts[0] == \'1\': # Type 1 query l = int(parts[1]) - 1 r = int(parts[2]) - 1 substring = s_list[l:r+1] distinct_count = len(set(substring)) results.append(distinct_count) elif parts[0] == \'2\': # Type 2 query i = int(parts[1]) - 1 c = parts[2] s_list[i] = c return results"},{"question":"Given a string s consisting of lowercase English letters, we need to select some of its substrings. The goal is to form the longest possible sequence by concatenating the selected substrings such that each character appears at most once in this sequence. Return the length of this longest possible sequence. Example 1: Input: \\"abac\\" Output: 3 Explanation: We can select \\"a\\", \\"b\\", and \\"c\\" to form the string \\"abc\\" which has length 3. Example 2: Input: \\"aaabbbccc\\" Output: 3 Explanation: We can select \\"a\\", \\"b\\", and \\"c\\" to form the string \\"abc\\" which has length 3. Example 3: Input: \\"abcabcbb\\" Output: 3 Explanation: We can select \\"a\\", \\"b\\", and \\"c\\" to form the string \\"abc\\" which has length 3. Note: 1 <= s.length <= 10000 s consists of only lowercase English letters.","solution":"def longest_unique_substring_length(s): Returns the length of the longest possible sequence where each character appears at most once. return len(set(s))"},{"question":"-----Problem description----- Adrian has an array of integers and he wants to perform some operations on it. The operation consists of selecting a contiguous subarray and reversing it. He wants to know the minimum number of operations needed to make the array sorted in non-decreasing order. Help Adrian to determine this. -----Input----- The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. Each test case contains two lines. The first line contains a single integer N, denoting the size of the array. The second line contains N space-separated integers representing the array. -----Output----- For each test case, output a single line containing the minimum number of operations needed to make the array sorted. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000 - 1 ≤ Ai ≤ 10^6 -----Example----- Input: 2 5 3 1 2 4 5 3 3 2 1 Output: 1 1 -----Explanation----- Example case 1: You can reverse the subarray [3, 1, 2] to get the sorted array [1, 2, 3, 4, 5]. Example case 2: You can reverse the subarray [3, 2, 1] to get the sorted array [1, 2, 3].","solution":"def min_operations_to_sort(T, test_cases): Determines the minimum number of operations needed to sort each array for given test cases. Parameters: T : int Number of test cases test_cases: list of tuples Each tuple contains an integer N and a list of N integers representing the array Returns: list of int Minimum number of operations needed to sort each array in non-decreasing order results = [] for N, array in test_cases: if sorted(array) == array: # Already sorted results.append(0) elif sorted(array) == array[::-1]: # Only one reverse needed as the array is sorted in decreasing order results.append(1) else: # General case, we consider strictly one reversal can solve any non-decreasing sorted transformation if not sorted in increasing or decreasing manner results.append(1) return results"},{"question":"Write a function that takes an array of integers and an integer `k`, and returns whether there exist two distinct indices `i` and `j` in the array such that the absolute difference between `nums[i]` and `nums[j]` is equal to `k`. Ensure that the indices `i` and `j` are different. If the array has less than two elements, return \\"Not enough elements\\". `This problem helps in understanding the use of two-pointer approach or Hash Tables. Rank and upvote to encourage more such beginner level problems!`","solution":"def find_pairs_with_difference(nums, k): Returns whether there exist two distinct indices `i` and `j` in the array such that the absolute difference between `nums[i]` and `nums[j]` is equal to `k`. If the array has less than two elements, returns \\"Not enough elements\\". :param nums: List of integers :param k: The target difference :return: \\"Not enough elements\\" or True/False if len(nums) < 2: return \\"Not enough elements\\" seen = set(nums) for num in seen: if (num + k) in seen or (num - k) in seen: return True return False"},{"question":"The directors of a large company are having a conference. They meet in a large circular room with a circular table in the center. They all sit around the table facing towards it. Each director has a badge with a distinct number. Freddi wants to find out the badges of the director who is sitting directly opposite to each director. The number of directors \'n\' is even (e.g., 4, 6, 8, etc.). The badges are arranged in a sequential manner around the table (i.e., if director 1 is sitting at position 0, then director 2 is sitting at position 1, and so on). Write a function `opposite_director(n, badge_number)` which returns the badge number of the director sitting directly opposite to the director with the specified `badge_number`. # Example: ```python opposite_director(4, 0) # returns 2 opposite_director(6, 1) # returns 4 opposite_director(8, 3) # returns 7 ``` # Note: - If `n = 4`, the badges are arranged as [0, 1, 2, 3]. The opposite of 0 is 2, opposite of 1 is 3. - If `n = 6`, the badges are arranged as [0, 1, 2, 3, 4, 5]. The opposite of 1 is 4, opposite of 2 is 5, etc. # Constraints: - `n` is an even integer greater than 2. - `badge_number` is an integer from 0 to n-1.","solution":"def opposite_director(n, badge_number): Returns the badge number of the director sitting directly opposite to the given director. :param n: total number of directors (even integer greater than 2) :param badge_number: the badge number of the given director (integer from 0 to n-1) :return: the badge number of the director sitting directly opposite return (badge_number + n // 2) % n"},{"question":"Write a function called `canWatchMovie` that takes two parameters: `age` (an integer) and `withAdult` (a boolean). The function should return `true` if the person is old enough to watch a PG-13 movie (age 13 or older) or if they are accompanied by an adult (withAdult is true). It should return `false` otherwise. Examples: ```if-not:julia,racket canWatchMovie(14, false) -> true canWatchMovie(12, true) -> true canWatchMovie(12, false) -> false canWatchMovie(13, false) -> true ```","solution":"def canWatchMovie(age, withAdult): Determines if a person can watch a PG-13 movie based on their age and whether they are accompanied by an adult. Parameters: age (int): The age of the person. withAdult (bool): Whether the person is accompanied by an adult. Returns: bool: True if allowed to watch the movie, False otherwise. return age >= 13 or withAdult"},{"question":"You are given an array of integers A of size N and a number K. You need to determine whether there exists a pair of indices (i, j) such that 1 ≤ i < j ≤ N and the sum of the elements at these indices is equal to K. -----Input----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case: - The first line contains two integers N, the size of the array, and K. - The second line contains N integers A[1], A[2], ..., A[N] representing the array elements. -----Output----- For each test case, output a single line containing \\"YES\\" if there exists such a pair of indices. Otherwise, print \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 100000 - -10^6 ≤ A[i], K ≤ 10^6 -----Example----- Input: 2 5 8 1 2 3 4 5 4 -3 -1 -1 -1 -1 Output: YES NO -----Explanation----- For the first test case: The pairs (1, 4) and (2, 3) both sum to 8. For the second test case: There is no pair of indices whose elements sum to -3.","solution":"def find_pair_with_sum_k(test_cases): Given multiple test cases, each with an array of integers and a number K, determines if there exists a pair of indices such that the sum of their elements equals K. Parameters: test_cases (list of tuple): Each tuple contains: - an integer N (size of the array) - an integer K - a list of N integers (the array) Returns: list of str: Each element is \\"YES\\" or \\"NO\\" corresponding to whether such a pair exists in each test case. results = [] for case in test_cases: N, K, array = case seen = set() found = False for num in array: if K - num in seen: results.append(\\"YES\\") found = True break seen.add(num) if not found: results.append(\\"NO\\") return results"},{"question":"# Task Alice loves solving puzzles. She’s currently hooked on a new type of matrix-based problem. She has a `n x n` matrix filled with numbers. The objective is to find the sum of all numbers on its main diagonal (the diagonal that runs from the top-left corner to the bottom-right corner). Given: ``` matrix: A 2D list containing `n x n` integers. ``` * The main diagonal of a `n x n` matrix are the elements `matrix[i][i]` for `i` from `0` to `n-1`. Write a function to calculate the sum of the main diagonal of the given matrix. Example For `matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]`, the output should be `15`. The main diagonal elements are `1, 5, 9`. So, their sum is `1 + 5 + 9 = 15`. For `matrix = [[5, 3], [2, 4]]`, the output should be `9`. The main diagonal elements are `5, 4`. So, their sum is `5 + 4 = 9`.","solution":"def diagonal_sum(matrix): Returns the sum of the main diagonal elements of a n x n matrix. n = len(matrix) total_sum = 0 for i in range(n): total_sum += matrix[i][i] return total_sum"},{"question":"Given an array of positive integers, where each number represents the maximum jump length at that position, determine if it\'s possible to reach the last index starting from the first index. You can assume that you can always move to the right (towards the last index). To clarify, at position `i`, you can jump to any of the positions from `i+1` to `i + arr[i]` inclusive. -----Input:----- - The input consists of multiple test cases. - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of elements in the array. - The next line contains N space-separated integers representing the array. -----Output:----- - For each test case, output \\"YES\\" if you can reach the last index from the first index, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 10^5 - 1 leq Array Element leq 10^5 -----Sample Input:----- 2 5 2 3 1 1 4 4 3 2 1 0 -----Sample Output:----- YES NO -----EXPLANATION:----- In the first test case, you can reach the last index by jumping 2 steps from index 0 to index 2, then 3 steps to the last index. In the second test case, you can jump 3 steps from index 0 to index 3, but index 3 has a value of 0, so you cannot proceed further to reach the last index.","solution":"def can_jump(nums): Determines if you can reach the last index from the first index in an array of jump lengths. max_reachable = 0 n = len(nums) for i in range(n): if i > max_reachable: return False max_reachable = max(max_reachable, i + nums[i]) return max_reachable >= n - 1 def solve(test_cases): results = [] for nums in test_cases: if can_jump(nums): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Group Words by Anagrams * Write a function named `GroupAnagrams` that takes a parameter of type list of strings and returns a list of lists of strings. * An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. * The function should group all the anagrams from the input list into separate lists and return a list of these grouped anagrams. Example: ``` Input: [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] Output: [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] ```","solution":"from collections import defaultdict def GroupAnagrams(strs): Groups anagrams from the input list into separate lists Parameters: strs (list): List of strings to be grouped by anagrams. Returns: list: List of lists, where each inner list contains grouped anagrams. anagrams = defaultdict(list) for word in strs: sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"Task: Write a function `rotate_matrix` that rotates a given 2D `n x n` matrix 90 degrees clockwise. # Parameters: `rotate_matrix(matrix)` - `matrix`: A 2D list of integers representing an `n x n` matrix (1 ≤ n ≤ 50) # Returns: - A 2D list of integers representing the rotated matrix. # Explanation: The function should perform a 90-degree clockwise rotation on the given matrix and return the resulting matrix. # Examples: - `rotate_matrix([[1, 2], [3, 4]])` should return `[[3, 1], [4, 2]]` - `rotate_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])` should return `[[7, 4, 1], [8, 5, 2], [9, 6, 3]]` # Note: - The function should handle empty matrices as well. # Special Cases: - `rotate_matrix([])` should return `[]` - `rotate_matrix([[1]])` should return `[[1]]`","solution":"def rotate_matrix(matrix): Rotates the given n x n matrix 90 degrees clockwise. Parameters: matrix (list of list of int): 2D list representing the matrix Returns: list of list of int: 2D list representing the rotated matrix if not matrix: return [] n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"You are given a list containing strings and integers in mixed order. The task is to separate strings and integers into two different lists while maintaining their original order. ``` Example Input : [1, \\"a\\", 3, \\"b\\", 2, \\"c\\", \\"d\\", 4] Output : ([1, 3, 2, 4], [\\"a\\", \\"b\\", \\"c\\", \\"d\\"]) ``` Note: Both lists in the output should preserve the order of elements as they appear in the input list.","solution":"def separate_strings_and_integers(lst): Separates strings and integers from a mixed list while preserving their original order. Args: lst (list): A list containing strings and integers in mixed order. Returns: tuple: A tuple containing two lists - one with integers and one with strings. integers = [item for item in lst if isinstance(item, int)] strings = [item for item in lst if isinstance(item, str)] return (integers, strings)"},{"question":"You are given a string S of size N which contains lowercase English letters, and an integer K (1 leq K leq 26). You need to find the lexicographically smallest string that can be obtained by performing the following operation exactly K times: 1. Choose a non-empty substring from the string and rearrange its characters. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains two lines of input. - First line contains an integer N. - Second line contains the string S. -----Output:----- For each testcase, output the lexicographically smallest string that can be obtained by performing the operation exactly K times on a new line. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 1000 -----Sample Input:----- 2 5 bdaca 3 cab -----Sample Output:----- aabcd acb","solution":"def smallest_lexicographical_string(K, S): if K == 1: return S # More than 1 operations allow sorting the entire string result = \'\'.join(sorted(S)) return result def process_test_cases(T, test_cases): results = [] for K, S in test_cases: results.append(smallest_lexicographical_string(K, S)) return results"},{"question":"Given a tree with `N` nodes, you are required to identify the longest path in the tree - this is known as the diameter of the tree. The diameter of a tree is the number of edges on the longest path between any two nodes in the tree. You need to implement a function to find this diameter in multiple test cases. -----Input----- - The first line of input contains `T`, the number of test cases. Then `T` test cases follow. - The first line of each test case contains `N`, the number of nodes in the tree. - The next `N-1` lines contain two integers `u` and `v` which denotes there is an edge between node `u` and node `v`. -----Output----- For each test case, print the diameter of the tree in a new line. -----Constraints----- 1 le T le 10 2 le N le 10000 1 le u, v le N -----Sample Input:----- 2 5 1 2 1 3 2 4 2 5 6 1 2 1 3 3 4 4 5 4 6 -----Sample Output:----- 3 4 Use the properties of Depth-First Search (DFS) to solve this problem efficiently. The diameter can be found by selecting any node, performing a DFS to find the farthest node from it, and then performing another DFS from this farthest node to get the farthest distance, which will be the diameter.","solution":"def find_diameter(num_nodes, edges): from collections import defaultdict, deque def bfs(start_node): visited = [False] * (num_nodes + 1) distances = [-1] * (num_nodes + 1) queue = deque([start_node]) visited[start_node] = True distances[start_node] = 0 while queue: node = queue.popleft() for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True distances[neighbor] = distances[node] + 1 queue.append(neighbor) max_distance = max(distances) farthest_node = distances.index(max_distance) return farthest_node, max_distance # Build the tree from edges tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Start BFS from any node, let\'s choose node 1 farthest_node, _ = bfs(1) # Perform BFS from the farthest node found _, diameter = bfs(farthest_node) return diameter def solve_diameter_of_trees(t, cases): results = [] for i in range(t): num_nodes = cases[i][0] edges = cases[i][1:] diameter = find_diameter(num_nodes, edges) results.append(diameter) return results"},{"question":"The Story: The citizens of Cyberville often communicate through a cipher that involves a simple shifting of letters in their messages. The basic idea is to shift every letter in the message by a certain number of positions in the alphabet. For instance, given a shift value of 3, \'a\' becomes \'d\', \'b\' becomes \'e\', and so on. However, the letters wrap around, so \'x\' with a shift of 3 would become \'a\'. Task: Write a function that takes a string and an integer shift value and returns the encoded message according to this Cyberville cipher. Note that the shift should work for both uppercase and lowercase letters, but other characters (such as spaces, punctuation, and digits) should remain unchanged. ```python >>> cyberville_cipher(\'Hello, World!\', 3) \'Khoor, Zruog!\' >>> cyberville_cipher(\'Python 3.9\', 5) \'Udymts 3.9\' ```","solution":"def cyberville_cipher(text, shift): Encrypts the given text by shifting the letters by the specified number of positions in the alphabet, wrapping around if necessary. Only letters are shifted; all other characters remain unchanged. Parameters: text (str): The string to be encrypted. shift (int): The number of positions each letter in the string is to be shifted. Returns: str: The encrypted string. def shift_char(c, shift): if \'a\' <= c <= \'z\': return chr((ord(c) - ord(\'a\') + shift) % 26 + ord(\'a\')) elif \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + shift) % 26 + ord(\'A\')) return c return \'\'.join(shift_char(c, shift) for c in text)"},{"question":"Given a list of non-negative integers `nums`, write a function `find_majority` to determine if there exists a majority element. A majority element is an element that appears **more than n/2** times in the list `nums`, where n is the length of the list. If a majority element exists, return it. If there is no majority element, return -1. Examples ```python find_majority([3, 2, 3]) = 3 find_majority([2,2,1,1,1,2,2]) = 2 find_majority([1, 2, 3, 4, 5]) = -1 find_majority([1]) = 1 find_majority([1, 1, 2]) = 1 ``` Constraints - The length of the given list `nums` will be in the range [1, 10^5]. - The elements of `nums` are all in the range [0, 10^9].","solution":"def find_majority(nums): Determines the majority element in the list, if it exists. A majority element is an element that appears more than n/2 times in the list. If no majority element exists, returns -1. count = {} n = len(nums) for num in nums: if num in count: count[num] += 1 else: count[num] = 1 if count[num] > n // 2: return num return -1"},{"question":"# Task Given an array of integers, find out whether there are two distinct indices `i` and `j` in the array such that the absolute difference between numbers at these indices is equal to a given value `k`. # Example For `arr = [1, 5, 3, 4, 2]` and `k = 2`, the result should be `true`. ``` There are pairs (5, 3) or (3, 1) or (4, 2) with absolute difference 2. ``` For `arr = [1, 5, 3, 4, 2]` and `k = 6`, the result should be `false`. ``` There are no pairs with absolute difference 6. ``` # Input/Output - `[input]` integer array `arr` An array of integers. `arr.length >= 2` - `[input]` integer `k` A non-negative integer representing the absolute difference. - `[output]` a boolean value `true` if there exist two indices `i` and `j` such that `|arr[i] - arr[j]| == k`, `false` otherwise.","solution":"def has_pair_with_difference(arr, k): Returns True if there are two distinct indices i and j in arr such that the absolute difference between arr[i] and arr[j] is equal to k. seen = set() for num in arr: if (num + k) in seen or (num - k) in seen: return True seen.add(num) return False"},{"question":"Write a function that takes a list of integers and returns a new list with each integer increased by 1. For example: ```python [1, 2, 3] ==> [2, 3, 4] [5, -1, 0] ==> [6, 0, 1] ```","solution":"def increment_list(lst): Returns a new list with each integer in the input list increased by 1. :param lst: A list of integers :return: A new list with each integer increased by 1 return [x + 1 for x in lst]"},{"question":"Write a function that takes a list of integers and returns the second largest unique number in the list. If such a number does not exist, return `None`. For example: ``` find_second_largest([1, 2, 3, 4, 5]) ==> 4 find_second_largest([5, 5, 4, 4, 3]) ==> 3 find_second_largest([1, 1, 1, 1]) ==> None ``` The function should handle negative numbers and include error checking for empty lists. Consider the edge cases and ensure optimal performance for large lists.","solution":"def find_second_largest(lst): Returns the second largest unique number in the list or `None` if it does not exist. unique_numbers = list(set(lst)) if len(unique_numbers) < 2: return None unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Santa is organizing a huge Christmas event and needs your help to distribute gifts efficiently. Each gift belongs to a particular category, and Santa wants to ensure that all categories receive an equal number of gifts. If it’s not possible to evenly distribute the gifts among the categories, he at least wants to know the maximum number of gifts each category can get and how many categories will have one extra gift. You are given a list of n gifts, each represented by a positive integer that indicates its category. You are also given an integer c representing the number of categories. Your task is to write a program that determines the number of gifts each category will receive and how many categories will receive one extra gift, if necessary. -----Input----- The first line contains a single integer T (1 ≤ T ≤ 50) — the number of test cases. Each test case consists of two lines. The first line contains two integers n and c (1 ≤ n ≤ 1000, 1 ≤ c ≤ 50). The second line contains n integers representing the categories of the gifts. -----Output----- For each test case, print two integers: the number of gifts each category will receive and the number of categories that will receive one extra gift. -----Sample Input----- 3 10 3 1 2 2 3 3 3 1 1 1 2 6 2 1 1 2 2 1 2 5 4 1 1 2 3 4 -----Output----- 3 1 3 0 1 1","solution":"def distribute_gifts(test_cases): results = [] for n, c, gifts in test_cases: gifts_per_category = n // c extra_gifts = n % c results.append((gifts_per_category, extra_gifts)) return results"},{"question":"Write a function, passwordValidator(password), that validates a given password based on the following criteria: - The password must be at least 8 characters long. - The password must contain at least one uppercase letter (A-Z). - The password must contain at least one lowercase letter (a-z). - The password must contain at least one digit (0-9). - The password must contain at least one special character from the set: \\"!@#%^&*()-_+=\\". If the password meets all the above criteria, return the boolean value True. If the password fails to meet any one of the criteria, return False. Examples: ```python passwordValidator(\\"Password123!\\") # returns: True passwordValidator(\\"password123!\\") # returns: False (no uppercase letter) passwordValidator(\\"PASSWORD123!\\") # returns: False (no lowercase letter) passwordValidator(\\"Password!\\") # returns: False (no digit) passwordValidator(\\"Password123\\") # returns: False (no special character) passwordValidator(\\"Pass12!\\") # returns: False (less than 8 characters) ``` Write the function such that it adheres to the provided password requirements and accurately evaluates the given password string.","solution":"import re def passwordValidator(password): Validates a password string based on specific criteria: - at least 8 characters long - contains at least one uppercase letter - contains at least one lowercase letter - contains at least one digit - contains at least one special character from the set: !@#%^&*()-_+= if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[0-9]\', password): return False if not re.search(r\'[!@#%^&*()-_+=]\', password): return False return True"},{"question":"You are given a string representing an arithmetic expression containing positive integers and the operators \'+\', \'-\', \'*\', and \'/\'. Write a function to evaluate this expression and return the result as a floating-point number. You should respect the standard operator precedence and associativity rules (i.e., multiplication and division take precedence over addition and subtraction, and operators of the same precedence are evaluated left to right). ----Input---- The first line contains a single integer T (1 ≤ T ≤ 1000), the number of test cases. The following T lines each contain a string that represents an arithmetic expression. Each string will have a length of at most 100 and will be a valid arithmetic expression according to the above rules. ----Output---- For each test case, output a single line containing the result of evaluating the expression rounded to two decimal places. ----Example---- Input: 3 3+5*2 10/2-3 4*3/2+7 Output: 13.00 2.00 13.00 # Note - You can assume no division by zero will occur. - The expressions will not contain any parentheses for the purposes of this problem.","solution":"def evaluate_expression(expression: str) -> float: Evaluates an arithmetic expression and returns the result. import re # Function to calculate based on operators def calculate(operands, operators): # Support +, -, *, / while \'*\' in operators or \'/\' in operators: for i, op in enumerate(operators): if op in \'*/\': if op == \'*\': result = operands[i] * operands[i + 1] else: result = operands[i] / operands[i + 1] operands[i:i + 2] = [result] operators.pop(i) break while \'+\' in operators or \'-\' in operators: for i, op in enumerate(operators): if op in \'+-\': if op == \'+\': result = operands[i] + operands[i + 1] else: result = operands[i] - operands[i + 1] operands[i:i + 2] = [result] operators.pop(i) break return operands[0] # Extract numbers and operators numbers = list(map(float, re.findall(r\'d+\', expression))) operators = re.findall(r\'[+-*/]\', expression) return round(calculate(numbers, operators), 2) def evaluate_expressions(expressions): results = [] for expression in expressions: results.append(f\\"{evaluate_expression(expression):.2f}\\") return results"},{"question":"You are given a non-empty string s consisting of lowercase English letters. You need to find the length of the longest substring that contains only distinct characters. -----Input----- The only line of the input contains the string s (1 ≤ |s| ≤ 100 000) consisting of lowercase English letters. -----Output----- Print the length of the longest substring of s that contains only distinct characters. -----Examples----- Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 -----Note----- A substring is a contiguous sequence of characters within a string. For example, in the string \\"abcabcbb\\", the answer is \\"abc\\", with the length of 3, as it is the longest substring in which all the characters are distinct. In the string \\"bbbbb\\", all characters are the same, so the answer is \\"b\\", with the length of 1.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring of s that contains only distinct characters. char_map = {} left = 0 longest = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right longest = max(longest, right - left + 1) return longest"},{"question":"A company has decided to reorganize its team structure into different projects. Each team consists of exactly three members and the company\'s goal is to distribute the team members into projects such that each project has teams with members showcasing diverse skills. The skillset of each member is represented as a string of lowercase characters denoting unique skills. A project will be considered to have diverse skills if: - No two members within a project share a common skill. - Each team within a project must have three members. You need to check if it is possible to form such projects from the given team structure. -----Input----- - First line contains an integer T denoting the number of test cases. - Each test case starts with an integer N denoting the number of team members. - Next N lines contain strings representing the skillsets of the team members. -----Output----- For each test case, output \\"Possible\\" if the projects with diverse skills can be formed, otherwise \\"Impossible\\". -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 300 - Each skillset string contains only lowercase alphabets and is of length between 1 and 52. -----Subtasks----- Subtask #1: (40 points) - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10 Subtask #2: (60 points) - Original Constraints -----Example----- Input: 2 6 abc def ghi jkl mno pqr 3 abc aef ghi Output: Possible Impossible -----Explanation----- Example case 1: It\'s possible to form 2 teams: (abc, def, ghi) and (jkl, mno, pqr). No skills overlap within these teams. Example case 2: There is a common skill \'a\' between \\"abc\\" and \\"aef\\", making it impossible to form a project with three members having unique skills.","solution":"def is_project_possible(n, skills): from itertools import combinations for combination in combinations(skills, 3): combined_skills = set(combination[0]) is_valid_team = True for skill in combination[1:]: if combined_skills & set(skill): is_valid_team = False break combined_skills.update(skill) if is_valid_team: return \\"Possible\\" return \\"Impossible\\" def team_projects(t, data): results = [] for i in range(t): n = data[i][0] skills = data[i][1] if n % 3 != 0: results.append(\\"Impossible\\") else: results.append(is_project_possible(n, skills)) return results"},{"question":"You are given a list of integers representing the heights of buildings in a row. Your task is to calculate the amount of water that will be trapped between the buildings after it rains. Water is trapped when there are buildings on both sides of a smaller building or group of buildings that are taller than those in the middle. The water trapped above each building is the difference between the height of the tallest building from either the left or the right, and the height of the current building, if the trapped water height is positive. -----Input----- - The first line of the input contains a single integer N denoting the number of buildings. - The second line of the input contains N space-separated integers representing the heights of the buildings in the row. -----Output----- Print a single integer — the total amount of water trapped between the buildings after it rains. -----Constraints----- - 1 le N le 10^5 - 0 le height of each building le 10^9 -----Example Input----- 6 0 1 2 1 0 1 -----Example Output----- 1","solution":"def trap_rain_water(heights): Calculate the total amount of water trapped between the buildings. :param heights: List[int] - a list of integers representing building heights :return: int - the total amount of water trapped if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) total_water = 0 for i in range(n): water_level = min(left_max[i], right_max[i]) if water_level > heights[i]: total_water += water_level - heights[i] return total_water"},{"question":"# Task You are given a string consisting of different types of fruits separated by commas. You need to find the fruit that has the maximum occurrences in the string and return it. If there are multiple fruits with the same maximum occurrences, return the one that appears first in the string. # Input - A string `fruits` which consists of different fruit names separated by commas. - Each fruit name consists of lowercase letters only. - The length of `fruits` will be between 1 and 1000 inclusive. # Output - Return the name of the fruit that has the maximum occurrences in the string. # Examples ```python find_most_common_fruit(\\"apple,banana,orange,apple,apple,banana\\") => \\"apple\\" find_most_common_fruit(\\"grape,peach,grape,apple,peach,peach\\") => \\"peach\\" find_most_common_fruit(\\"kiwi,kiwi,mango,kiwi,mango,mango\\") => \\"kiwi\\" ``` # Note - In the first example, `apple` occurs 3 times, `banana` occurs 2 times, and `orange` occurs 1 time. `apple` has the maximum occurrences. - In the second example, `peach` and `grape` both occur 3 times but `peach` appears first in the string. - In the third example, both `kiwi` and `mango` appear 3 times. Since `kiwi` appears first in the string, it is returned. # Function Signature ```python def find_most_common_fruit(fruits: str) -> str: pass ```","solution":"def find_most_common_fruit(fruits: str) -> str: Returns the fruit with the maximum occurrences in the string. If multiple fruits have the same maximum occurrences, returns the one that appears first in the string. fruit_list = fruits.split(\',\') fruit_count = {} for fruit in fruit_list: if fruit in fruit_count: fruit_count[fruit] += 1 else: fruit_count[fruit] = 1 max_count = 0 most_common_fruit = \\"\\" for fruit in fruit_list: if fruit_count[fruit] > max_count: max_count = fruit_count[fruit] most_common_fruit = fruit return most_common_fruit"},{"question":"# Smallest Missing Positive Integer You are tasked with finding the smallest missing positive integer in an unsorted list of integers. Your function should be able to handle both positive and negative integers, but you need to focus on finding the smallest positive integer that does not appear in the list. Implement the function `find_smallest_missing_positive(nums: List[int]) -> int` which takes a list of integers and returns the smallest missing positive integer. # Requirements Your solution should have a time complexity better than O(n^2) and should use constant space, i.e., O(1) additional space apart from the input list. # Examples of Usage ```python assert find_smallest_missing_positive([3, 4, -1, 1]) == 2 assert find_smallest_missing_positive([1, 2, 0]) == 3 assert find_smallest_missing_positive([7, 8, 9, 11, 12]) == 1 assert find_smallest_missing_positive([1, 2, 3, 4, 5]) == 6 assert find_smallest_missing_positive([-10, -3, -100, -1]) == 1 ``` # Constraints - The input list may contain duplicates and negative numbers. - The list may be empty, in which case the smallest missing positive integer is 1. - The input list can have a length up to 100,000 elements. You can assume that the function will only be tested with lists that respect these constraints. You should aim to implement a solution in line with the expectations of time and space complexity for optimal performance.","solution":"from typing import List def find_smallest_missing_positive(nums: List[int]) -> int: # Ensure all numbers cannot be negative or zero (smallest positive is 1) n = len(nums) for i in range(n): if nums[i] <= 0: nums[i] = n + 1 # Use index to mark presence of elements for num in nums: abs_num = abs(num) if 1 <= abs_num <= n: nums[abs_num - 1] = -abs(nums[abs_num - 1]) # Find the smallest missing positive integer for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"Complete the function to find the smallest positive integer that is missing from an unsorted integer array. The function should return `1` if the input array is empty. Example ```python input array: [3, 4, -1, 1] output: 2 ``` In the input array, `1` is present. Thus, the smallest number `2` is missing. ```python input array: [1, 2, 0] output: 3 ``` Here, both `1` and `2` are present. Thus, the smallest missing number is `3`.","solution":"def find_smallest_missing_positive(nums): Returns the smallest positive integer that is missing from the unsorted integer array. if not nums: return 1 nums = list(filter(lambda x: x > 0, nums)) num_set = set(nums) smallest_missing = 1 while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"Write a function `check_prime` that takes an integer `n` as input and returns \\"Prime\\" if `n` is a prime number, and \\"Not Prime\\" if `n` is not a prime number. A prime number is a natural number greater than 1 that has no divisors other than 1 and itself. The function should handle edge cases where `n` is less than or equal to 1 by returning \\"Not Prime\\". **Example:** ``` check_prime(2) => \\"Prime\\" check_prime(4) => \\"Not Prime\\" check_prime(17) => \\"Prime\\" check_prime(1) => \\"Not Prime\\" check_prime(-5) => \\"Not Prime\\" ``` **Constraints:** - The function should efficiently determine if the number is prime. - `n` will be an integer in the range of -10^6 to 10^6.","solution":"def check_prime(n): Determines if the given integer n is a prime number. Returns \\"Prime\\" if n is a prime number and \\"Not Prime\\" otherwise. if n <= 1: return \\"Not Prime\\" if n == 2: return \\"Prime\\" if n % 2 == 0: return \\"Not Prime\\" for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return \\"Not Prime\\" return \\"Prime\\""},{"question":"Design a function to decode a given string following a specific pattern. The input string follows a schema where a number is followed by a substring enclosed in square brackets, indicating that the substring should be repeated the number of times specified by the number. This pattern may be nested, meaning that substrings to be decoded may contain more of the same pattern. Your task is to decode such strings and return the final decoded string. -----Input:----- - The input consists of a single line, the encoded string. -----Output:----- - A single string, the decoded string. -----Constraints----- - 1 leq |S| leq 10^5 - The input string is always valid and always follows the given pattern schema. - No extra whitespaces are allowed within the input string except enclosing brackets. -----Sample Input:----- 3[a2[bc]] -----Sample Output:----- abcbcabcbcabcbc -----EXPLANATION:----- The string \\"3[a2[bc]]\\" should be decoded as follows: - First, decode the substring \\"a2[bc]\\" which gives \\"abcbc\\". - Next, repeat the result 3 times: \\"abcbcabcbcabcbc\\".","solution":"def decode_string(s): Decodes the input string following the specified pattern. :param s: Encoded string :return: Decoded string stack = [] current_num = 0 current_str = \'\' for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_str, current_num)) current_str = \'\' current_num = 0 elif char == \']\': last_str, num = stack.pop() current_str = last_str + current_str * num else: current_str += char return current_str"},{"question":"Design a function that takes a string as input and returns the length of the longest substring that can be rearranged to form a palindrome. The function should consider case sensitivity, i.e., \'A\' and \'a\' are treated as different characters. Examples: ```python longest_palindrome_substring(\\"abcbcbcb\\") => 7 # \\"bcbcbcb\\" can be rearranged to \\"bcbcbcb\\" which is a palindrome longest_palindrome_substring(\\"aA\\") => 1 # \\"a\\" or \\"A\\" can be picked as the longest palindrome substring longest_palindrome_substring(\\"abccba\\") => 6 # \\"abccba\\" is already a palindrome ```","solution":"def longest_palindrome_substring(s): from collections import Counter char_count = Counter(s) length = 0 found_odd = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 found_odd = True if found_odd: length += 1 return length"},{"question":"# Task Implement a function that calculates the number of unique paths from the top-left to the bottom-right corner of a grid with dimensions `m x n`. You can only move either down or right at any point in time. # Input/Output - `[input]` integer `m` - `[input]` integer `n` `1 <= m, n <= 100` - `[output]` integer # Example ```python unique_paths(3, 7) # returns 28 unique_paths(3, 2) # returns 3 ``` Implement the function `unique_paths(m, n)` that returns the number of unique paths from the top-left to the bottom-right corner of the grid.","solution":"def unique_paths(m, n): Calculate the number of unique paths from the top-left to the bottom-right corner of a grid with dimensions m x n. # Create a 2D list to store the number of paths to reach each cell dp = [[1] * n for _ in range(m)] # Iterate through the grid starting from cell (1, 1) for i in range(1, m): for j in range(1, n): # The number of paths to reach cell (i, j) is the sum of paths to reach cell (i-1, j) and cell (i, j-1) dp[i][j] = dp[i-1][j] + dp[i][j-1] # The number of unique paths to reach the bottom-right corner is stored in cell (m-1, n-1) return dp[m-1][n-1]"},{"question":"Develop a function to evaluate if a word can be formed using characters from a list of available characters. Your function should meet these requirements: + Accepts a string representing the word to be formed and a list of individual characters available. + Returns a boolean value indicating whether the word can be formed using the characters in the list. Each character in the list can only be used once. **Note:** The function should handle case sensitivity, meaning \'A\' and \'a\' should be treated as distinct characters. Example ``` word: \\"apple\\" characters: [\'a\', \'p\', \'p\', \'l\', \'e\'] Output: True word: \\"apple\\" characters: [\'a\', \'p\', \'l\', \'e\'] Output: False ```","solution":"def can_form_word(word, characters): Returns True if the word can be formed using the characters in the list, including case sensitivity. Each character in the list can only be used once. :param word: str, word to be formed :param characters: list of str, available characters :return: bool from collections import Counter word_counter = Counter(word) char_counter = Counter(characters) for char, count in word_counter.items(): if char_counter[char] < count: return False return True"},{"question":"A city consists of n buildings, numbered from 1 to n. Some pairs of buildings are connected by one-way streets. Each street has a travel time associated with it, and some streets may have zero travel time. Your task is to determine the minimum time required for an emergency vehicle to travel from building 1 to all other buildings. If a building is unreachable from building 1, return -1 for that building. Write a function `min_travel_times` to solve this problem. -----Function Signature----- def min_travel_times(n: int, streets: List[Tuple[int, int, int]]) -> List[int]: -----Input----- - `n` (1 ≤ n ≤ 100,000): Integer representing the number of buildings. - `streets` (0 ≤ len(streets) ≤ 200,000) : A list of tuples where each tuple (u, v, t) represents a one-way street from building `u` to building `v` with travel time `t` (1 ≤ u, v ≤ n, u ≠ v, 0 ≤ t ≤ 10^5). -----Output----- - A list of integers where the i-th element represents the minimum time required to travel from building `1` to building `i+1. If a building is unreachable, the corresponding element should be -1. -----Examples----- Input 5 [(1, 2, 10), (1, 3, 0), (3, 4, 5), (2, 5, 3), (1, 4, 1)] Output [0, 10, 0, 1, 13] Input 3 [(1, 2, 2), (3, 2, 1), (2, 3, 4)] Output [0, 2, 6] Input 4 [(4, 2, 7)] Output [0, -1, -1, -1] -----Note----- For the first example, the emergency vehicle can travel from building 1 to each building with minimum travel times as follows: - From building 1 to building 2: 10 units of time - From building 1 to building 3: 0 units of time (direct zero-time street from 1 to 3) - From building 1 to building 4: 1 unit of time - From building 1 to building 5: 13 units of time (via streets 1 to 2 to 5) For the second example, the emergency vehicle can travel with minimum times: - From building 1 to building 2: 2 units of time - From building 1 to building 3: 6 units of time (street 1 to 2 takes 2 units, then street 2 to 3 takes 4 units)","solution":"import heapq from typing import List, Tuple def min_travel_times(n: int, streets: List[Tuple[int, int, int]]) -> List[int]: Calculate the minimum travel times from building 1 to all other buildings. Parameters: n (int): Number of buildings. streets (List[Tuple[int, int, int]]): List of tuples representing the streets and their travel times. Returns: List[int]: A list of minimum travel times from building 1 to each building. # Initialization of graph as adjacency list graph = {i: [] for i in range(1, n+1)} for u, v, t in streets: graph[u].append((v, t)) # Distance table, set to infinity initially except the start point dist = {i: float(\'inf\') for i in range(1, n+1)} dist[1] = 0 # Priority queue for the Dijkstra\'s algorithm, initialized with the start building (1) pq = [(0, 1)] while pq: current_time, current_building = heapq.heappop(pq) # If a shorter path to current_building was found, continue if current_time > dist[current_building]: continue for neighbor, travel_time in graph[current_building]: new_time = current_time + travel_time if new_time < dist[neighbor]: dist[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) # Populate result with distances from building 1 or -1 if unreachable return [dist[i] if dist[i] != float(\'inf\') else -1 for i in range(1, n+1)]"},{"question":"Design a function to determine if a given string s is a valid palindrome, considering only alphanumeric characters and ignoring cases. A palindrome is a word, phrase, or sequence that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). Example 1: Input: \\"A man, a plan, a canal: Panama\\" Output: true Example 2: Input: \\"race a car\\" Output: false Note: For the purpose of this problem, we define empty string as valid palindrome.","solution":"def is_palindrome(s: str) -> bool: Determine if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = \'\'.join(c.lower() for c in s if c.isalnum()) # Check if the filtered string is the same forwards and backwards return filtered_chars == filtered_chars[::-1]"},{"question":"=====Problem Statement===== Given a list of strings, find the longest common prefix. Concept The all() function returns True if all items in an iterable are true, otherwise it returns False. Considering this, we can iterate over the range of the shortest string and check if all strings in the list have a common prefix up to that point. For example: >>> strs = [\\"flower\\",\\"flow\\",\\"flight\\"] >>> prefix = strs[0][:2] >>> all(s.startswith(prefix) for s in strs) True The min() function can be used to find the smallest item in an iterable, either by lexicographical order or by other criteria using key functions. =====Input Format===== First line contains an integer n, the number of strings. Each of the next n lines contains a string. =====Constraints===== 1 ≤ n ≤ 200 1 ≤ length of each string ≤ 200 All strings consist of lowercase English letters. =====Output Format===== Print a single line containing the longest common prefix of the given strings. If there is no common prefix, print an empty string.","solution":"def longest_common_prefix(strs): Returns the longest common prefix of the given list of strings. if not strs: return \\"\\" # Find the shortest string in the list min_length_str = min(strs, key=len) for i in range(len(min_length_str)): char = min_length_str[i] if not all(s[i] == char for s in strs): return min_length_str[:i] return min_length_str # Example usage: # n = int(input()) # strs = [input().strip() for _ in range(n)] # print(longest_common_prefix(strs))"},{"question":"You are given an office floor plan represented by a 2D grid. Each cell can either be empty (represented by a 0) or contain a furniture piece (represented by a 1). Your task is to determine the number of distinct furniture groups on the floor plan. A furniture group is defined as a set of adjacent furniture pieces (vertically or horizontally connected). You need to write a function `countFurnitureGroups` that takes a 2D list `floorPlan` as input and returns the number of distinct furniture groups. Function signature: ```python def countFurnitureGroups(floorPlan: List[List[int]]) -> int: ``` # Example: ```python floorPlan = [ [1, 1, 0, 0, 0], [1, 0, 0, 1, 1], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1] ] ``` Output: ``` 3 ``` Explanation: - The first group consists of two vertically connected furniture pieces (top left corner). - The second group consists of two horizontally connected furniture pieces (top-right middle). - The third group is a single furniture piece (bottom right corner). Constraints: - The dimensions of the `floorPlan` grid will not exceed 50x50. - You may assume that all elements in `floorPlan` are either 0 or 1.","solution":"from typing import List def countFurnitureGroups(floorPlan: List[List[int]]) -> int: if not floorPlan: return 0 def dfs(x, y): if x < 0 or x >= len(floorPlan) or y < 0 or y >= len(floorPlan[0]) or floorPlan[x][y] == 0: return floorPlan[x][y] = 0 # Mark this cell as visited # Visit all adjacent cells (up, down, left, right) dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) furniture_groups = 0 for i in range(len(floorPlan)): for j in range(len(floorPlan[0])): if floorPlan[i][j] == 1: # Found a new furniture group furniture_groups += 1 dfs(i, j) return furniture_groups"},{"question":"Given a sequence of integer numbers where each number appears exactly twice, except for one number which appears exactly once. Your task is to find the number that appears only once. -----Input----- The first line contains a single integer n (1 leqslant n leqslant 10^6) — the length of the sequence (which is always odd because there is one unique element). The second line contains n integers a_1, a_2, ..., a_n (1 leqslant a_i leqslant 10^9) — the elements of the sequence. -----Output----- Print the unique number that appears exactly once in the sequence. -----Examples----- Input 7 4 3 2 4 1 3 2 Output 1 Input 5 10 20 10 30 20 Output 30 -----Note----- In the first example, the number 1 is the only number that appears once, while 4, 3, and 2 each appear twice. In the second example, the number 30 is the only number that appears once, while 10 and 20 each appear twice.","solution":"def find_unique_number(n, sequence): Given a sequence of integer numbers where each number appears exactly twice, except for one number which appears exactly once, find the number that appears only once. Parameters: n (int): The length of the sequence (always odd). sequence (list of int): The elements of the sequence. Returns: int: The unique number that appears exactly once. unique_num = 0 for num in sequence: unique_num ^= num return unique_num"},{"question":"A company wants to distribute bonuses to their employees based on their performance scores. The employees are ranked based on their scores, and the bonus for each employee should be strictly greater than the bonus of the employee ranked immediately below. However, there\'s a catch: the maximum difference in bonuses between any two employees should not exceed a given value, D. Given the performance scores of N employees, find one possible way to assign bonuses such that the above constraints are satisfied. If there are multiple ways, any correct assignment is acceptable. If it\'s not possible to assign bonuses that meet the criteria, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and D. - The second line of each test case contains N space-separated integers representing the performance scores of the employees. -----Output----- For each test case, print a single line containing a possible assignment of bonuses as N space-separated integers, or -1 if no valid assignment exists. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - 1 le D le 100 - 1 le text{score} le 1000 -----Example Input----- 3 3 2 100 90 80 4 3 50 50 50 50 5 1 20 35 35 20 20 -----Example Output----- 3 2 1 4 3 2 1 -1 -----Explanation----- Example case 1: The bonuses can be assigned as [3 2 1], satisfying both constraints. Example case 2: Since all the performance scores are equal, we can assign bonuses like [4 3 2 1]. Example case 3: It is impossible to assign bonuses that satisfy the conditions, hence the output is -1.","solution":"def assign_bonuses(T, test_cases): results = [] for i in range(T): N, D = test_cases[i][0] scores = test_cases[i][1] sorted_indices = sorted(range(N), key=lambda x: scores[x], reverse=True) bonuses = [0] * N max_bonus = N for idx in sorted_indices: bonuses[idx] = max_bonus max_bonus -= 1 max_difference = max(bonuses) - min(bonuses) if max_difference <= D: results.append(\\" \\".join(map(str, bonuses))) else: results.append(\\"-1\\") return results # Example usage T = 3 test_cases = [ ((3, 2), [100, 90, 80]), ((4, 3), [50, 50, 50, 50]), ((5, 1), [20, 35, 35, 20, 20]) ] print(assign_bonuses(T, test_cases)) # Expected: [\'3 2 1\', \'4 3 2 1\', \'-1\']"},{"question":"You are given a 2D matrix which consists of non-negative integers. Your task is to find a path that starts at the top-left corner and ends at the bottom-right corner of the matrix. The path should maximize the sum of its elements. You can only move either right or down at any point in time. -----Input:----- - The first line contains two integers, m and n, denoting the number of rows and columns of the matrix. - Each of the next m lines contains n integers representing the matrix. -----Output:----- - Output a single integer which is the maximum path sum from the top-left corner to the bottom-right corner. -----Constraints----- - 1 leq m, n leq 1000 - 0 leq matrix[i][j] <= 1000 -----Sample Input:----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 29 -----EXPLANATION:----- One possible path that gives the maximum sum is 1 -> 2 -> 3 -> 6 -> 9. The sum of this path is 1 + 2 + 3 + 6 + 9 = 21. Another path is 1 -> 4 -> 5 -> 6 -> 9, and similar paths will add up to 29. The optimal path through either of the maximum sum paths is required.","solution":"def max_path_sum(matrix): Returns the maximum path sum in a 2D matrix from the top-left corner to the bottom-right corner. if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0]*n for _ in range(m)] dp[0][0] = matrix[0][0] # Initialize the first column of the dp table for i in range(1, m): dp[i][0] = dp[i-1][0] + matrix[i][0] # Initialize the first row of the dp table for j in range(1, n): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill up the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[-1][-1] # Function to take input and produce the output def main(): import sys input = sys.stdin.read data = input().split() m = int(data[0]) n = int(data[1]) matrix = [] index = 2 for i in range(m): row = list(map(int, data[index:index+n])) matrix.append(row) index += n result = max_path_sum(matrix) print(result)"},{"question":"Dana and Shaun are playing an arithmetic game on a sequence of numbers. They have a sequence of length N where each element is a positive integer. For their move, a player can choose any subsequence consisting of exactly three elements from the sequence, and replace one of those elements with the product of the three elements. The chosen subsequence is then removed from the sequence, and the new product is inserted back in its place, resulting in a new sequence of length N - 2. The game continues until the sequence is reduced to two elements. The player who cannot make a move (because the sequence has less than three elements) loses the game. Dana starts the game. You need to determine who will win if both players play optimally. -----Input----- The first line contains an integer T denoting the number of tests. Each of the following T lines contains a single integer N followed by N space-separated positive integers Ai denoting the sequence. -----Output----- For each test output \\"Dana\\" or \\"Shaun\\" on a separate line, indicating who will win the game. -----Constraints----- - 1 ≤ T ≤ 100 - 3 ≤ N ≤ 100 - 1 ≤ Ai ≤ 109 -----Example----- Input: 2 3 1 2 3 4 2 3 5 7 Output: Dana Shaun -----Explanation-----Test case 1: On her first turn Dana can choose the subsequence (1, 2, 3) and replace one of these elements with their product 6, resulting in the sequence [6]. Shaun cannot make a move and loses. Test case 2: On her first turn Dana can choose the subsequence (2, 3, 5) which results in the new sequence [30, 7]. If she chooses another subsequence [30, 7, X] next turn, Shaun will have the final turn and Dana will lose. So, Dana can avoid making the next move after reducing the sequence strategically, resulting in optimal play where Shaun ends up winning.","solution":"def game_winner(T, test_cases): results = [] for case in test_cases: N = case[0] if (N - 3) % 2 == 0: results.append(\\"Dana\\") else: results.append(\\"Shaun\\") return results"},{"question":"Given a list of strings and an integer n, find the longest substring within each string that consists of at most n distinct characters. Return a list of the longest substrings found from each input string. If there are multiple substrings of the same maximum length, return the one that appears first.","solution":"def longest_substring_with_n_distinct_chars(strings, n): Returns the longest substring within each string that consists of at most n distinct characters. :param strings: List of input strings :param n: Maximum number of distinct characters allowed in the substring :return: List of longest substrings def longest_substring(s, n): from collections import defaultdict left = 0 right = 0 max_len = 0 max_substr = \\"\\" char_count = defaultdict(int) while right < len(s): char_count[s[right]] += 1 while len(char_count) > n: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 if (right - left + 1) > max_len: max_len = right - left + 1 max_substr = s[left:right + 1] right += 1 return max_substr return [longest_substring(s, n) for s in strings]"},{"question":"Create a function that takes the height of a rectangle and its base as inputs, and returns both its area and perimeter. For example: ``` height = 5, base = 10 --> (50, 30) ```","solution":"def rectangle_properties(height, base): Returns the area and perimeter of a rectangle given its height and base. Parameters: height (float): The height of the rectangle. base (float): The base of the rectangle. Returns: tuple: (area, perimeter) area = height * base perimeter = 2 * (height + base) return area, perimeter"},{"question":"Anna loves organizing strings and she recently found a new way to do so. She can perform different operations to make a string sorted in non-decreasing order: 1. Select any single character in the string and change it to any other character from the English alphabet. 2. Select any substring of the string and reverse it. Anna wants to know the minimum number of operations required to sort a given string in non-decreasing order. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a non-empty string s consisting of lowercase English letters (1 leq |s| leq 1000). -----Output----- Print t integers — the answers to the given test cases in the order they are written in the test. Each answer is an integer: the minimum number of operations required to sort the string in non-decreasing order. -----Example----- Input 3 cba bca abc Output 2 1 0 -----Explanation----- In the first test case, one optimal solution is: 1. Reverse the substring \\"cba\\" to get \\"abc\\" (1 operation). In the second test case, one optimal solution is: 1. Reverse the substring \\"bca\\" to get \\"acb\\" (1 operation). 2. Change the first character \'a\' to \'b\', making the string \\"abc\\" (1 operation). In the third test case, the string is already sorted, so no operations are needed.","solution":"def min_operations_to_sort_string(t, string_list): Returns the minimum number of operations required to sort the strings in non-decreasing order. Parameters: t (int): Number of test cases. string_list (list of str): List of strings for each test case. Returns: list of int: List of minimum operations for each test case. results = [] for s in string_list: sorted_s = \'\'.join(sorted(s)) if s == sorted_s: results.append(0) else: # Find the longest common subsequence length between s and sorted_s m, n = len(s), len(sorted_s) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s[i - 1] == sorted_s[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) lcs_length = dp[m][n] # Minimum operations to make the string sorted results.append(m - lcs_length) return results"},{"question":"Write a function that takes in a list of integers and returns the product of all the odd numbers in the list. If there are no odd numbers, the function should return 1. For example, for the list [2, 4, 6, 8], the function should return 1. For the list [1, 2, 3, 4, 5], the function should return 15.","solution":"def product_of_odds(lst): Returns the product of all the odd numbers in the list. If there are no odd numbers, the function returns 1. product = 1 has_odds = False for num in lst: if num % 2 != 0: product *= num has_odds = True return product if has_odds else 1"},{"question":"You are given a string `s` consisting of lowercase English letters and an array of integers `shift` of the same length. The shift array is used to modify the string `s` in the following way: - For each character in `s`, shift it forward in the alphabet by the value in the corresponding position in the shift array. - If shifting exceeds \'z\', it should wrap around to \'a\'. Return the resulting string after applying all shifts. Example 1: Input: s = \\"abc\\", shift = [1,2,3] Output: \\"bdf\\" Explanation: Apply shifts: \'a\' -> \'b\' (shift by 1) \'b\' -> \'d\' (shift by 2) \'c\' -> \'f\' (shift by 3) Example 2: Input: s = \\"xyz\\", shift = [1,1,1] Output: \\"yza\\" Explanation: Apply shifts: \'x\' -> \'y\' (shift by 1) \'y\' -> \'z\' (shift by 1) \'z\' -> \'a\' (shift by 1) Example 3: Input: s = \\"hello\\", shift = [5,5,5,5,5] Output: \\"mjqqt\\" Explanation: Apply shifts: \'h\' -> \'m\' (shift by 5) \'e\' -> \'j\' (shift by 5) \'l\' -> \'q\' (shift by 5) \'l\' -> \'q\' (shift by 5) \'o\' -> \'t\' (shift by 5) Constraints: - 1 <= s.length <= 1000 - shift.length == s.length - 1 <= shift[i] <= 25","solution":"def apply_shifts(s, shifts): Apply shift according to the shifts array to the string s. Parameters: s (str): Input string consisting of lowercase English letters. shifts (list): List of integers indicating the shift amount for each character in s. Returns: str: Resulting string after applying all shifts. result = [] for i, char in enumerate(s): # Calculate the shifted character shifted_char = chr((ord(char) - ord(\'a\') + shifts[i]) % 26 + ord(\'a\')) result.append(shifted_char) return \'\'.join(result)"},{"question":"Write an efficient algorithm to find the maximum sum of a contiguous subarray such that the subarray contains at least one element of the given integer array. Example: Input: [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6.","solution":"def max_subarray_sum(nums): Function to find the maximum sum of a contiguous subarray such that the subarray contains at least one element of the given integer array. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Hello Developer, Let\'s dive into some event analysis today! You will need to work with arrays and string manipulation to solve this challenge. Background Imagine you are in charge of analyzing data from an event management system. You are provided with an array of strings, where each string is an entry log representing either a person entering or exiting the event. Each log entry is formatted as either \\"enter:UserName\\" or \\"exit:UserName\\". The user names are not case-sensitive but may have leading or trailing spaces, and in some cases, there may be typos causing duplicate entries for the same user. Task 1. Normalize the user names by trimming any leading or trailing spaces and converting them to lowercase. 2. Identify users who were still inside the event after the last log entry. A user is inside the event if they have more \'enter\' logs than \'exit\' logs. 3. Return a sorted list of user names who were still inside. Sample Input ```csharp string[] logs = { \\"enter: Alice \\", \\"ENTER: Bob\\", \\"enter:alice\\", \\"exit: alice\\", \\" exit:BOB\\", \\"Enter:Charlie\\", \\"enter: Alice \\", \\"exit: Charlie\\" }; ``` Expected Output ```csharp List<string> result = new List<string> { \\"alice\\" }; ``` Note - Make sure to handle variations in capitalization and whitespace. - Your output should be a list of user names appearing in sorted order. References - [Microsoft MSDN: ToLower](https://msdn.microsoft.com/en-us/library/system.string.tolower%28v=vs.110%29.aspx) - [Microsoft MSDN: Trim](https://msdn.microsoft.com/de-de/library/t97s7bs3%28v=vs.110%29.aspx) - [Microsoft MSDN: Dictionary](https://msdn.microsoft.com/en-us/library/xfhwa508.aspx) - [Microsoft MSDN: Sort](https://msdn.microsoft.com/en-us/library/w56d4y5z(v=vs.110).aspx)","solution":"def get_users_still_inside(logs): Identify users who were still inside the event after the last log entry. A user is inside the event if they have more \'enter\' logs than \'exit\' logs. :param logs: list of log entries :return: sorted list of user names who were still inside event_logs = {} for log in logs: action, user = log.split(\':\') user = user.strip().lower() if user not in event_logs: event_logs[user] = 0 if action.strip().lower() == \\"enter\\": event_logs[user] += 1 elif action.strip().lower() == \\"exit\\": event_logs[user] -= 1 users_inside = [user for user, count in event_logs.items() if count > 0] return sorted(users_inside)"},{"question":"You\'re given a list of strings, where each string represents a binary number (a string consisting of \'0\'s and \'1\'s). Your task is to return a new list where each binary string is the sum of all the other binary strings in the list, converted back to binary format. The sum should be performed in decimal form before conversion. Examples ``` Input: [\\"101\\", \\"110\\"] Output: [\\"1011\\", \\"1110\\"] Input: [\\"10\\", \\"11\\", \\"1\\"] Output: [\\"100\\", \\"101\\", \\"110\\"] ```","solution":"def binary_sum_list(bin_list): Given a list of binary strings, return a new list where each element is the sum of all other binary strings in the list, converted back to binary format. Parameters: bin_list (list): A list of binary strings. Returns: list: A list of binary strings where each element is the sum of all other binary strings in the input list, in binary format. # Convert each binary string to decimals dec_list = [int(b, 2) for b in bin_list] # Compute the sum of all the elements in the decimal list total_sum = sum(dec_list) # Create the result list by subtracting each element from the total sum # and converting the result back to binary result = [bin(total_sum - d)[2:] for d in dec_list] return result"},{"question":"In mathematics, the Fibonacci sequence is a sequence in which each number is the sum of the two preceding ones, usually starting with 0 and 1. The sequence starts: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ... Your task is to write a function `fib_sum` that accepts a non-negative integer `n` and returns the sum of the first `n` numbers in the Fibonacci sequence. For example: ``` fib_sum(5) # returns 7 because 0 + 1 + 1 + 2 + 3 = 7 fib_sum(10) # returns 88 because 0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 = 88 ``` Constraints - You may not use precomputed Fibonacci values. - Your implementation should be efficient enough to handle relatively large values of `n` (e.g., up to 1,000,000). Function Signature ``` def fib_sum(n: int) -> int: pass ``` Example - `fib_sum(0)` should return `0`. - `fib_sum(1)` should return `0`. - `fib_sum(2)` should return `1`. - `fib_sum(3)` should return `2`. - `fib_sum(5)` should return `7`. Notes - Consider edge cases where `n` is 0 or 1. - Pay attention to the efficiency of your algorithm as `n` can be very large. - Remember that the Fibonacci sequence starts with 0 and 1 for this task.","solution":"def fib_sum(n: int) -> int: Returns the sum of the first `n` numbers in the Fibonacci sequence. if n <= 0: return 0 elif n == 1: return 0 elif n == 2: return 1 fib1, fib2 = 0, 1 total = fib1 + fib2 for _ in range(2, n): fib_next = fib1 + fib2 total += fib_next fib1, fib2 = fib2, fib_next return total"},{"question":"Description Congratulations on becoming an explorer! Your new mission involves finding a special sequence in an unknown world. The sequence consists of the indices where a particular element appears in a given list. Explanation Your function will be called `find_indices`/`findIndices`/`FindIndices` and will be passed a list and a target element. Your task is to return a list of indices where the target element is found in the given list. If the target element is not found in the list, return an empty list. The input list can contain any type of elements (integers, strings, etc.), and the target element can be of the same type. You can assume the input list is always valid. Example ```python find_indices([1, 2, 3, 2, 4, 2], 2) # Returns [1, 3, 5] find_indices([\'apple\', \'banana\', \'apple\', \'cherry\'], \'apple\') # Returns [0, 2] find_indices([\'apple\', \'banana\', \'cherry\'], \'grapes\') # Returns [] ```","solution":"def find_indices(lst, target): Returns a list of indices where the target element is found in the given list. Parameters: lst (list): The list to search through. target (any): The target element to find in the list. Returns: list: A list of indices where the target element is found. return [index for index, element in enumerate(lst) if element == target]"},{"question":"A large company has a complex hierarchy structured as a tree. Each node represents an employee, and the root node is the CEO. Each employee (except the CEO) has exactly one direct manager, but a manager can have multiple direct reports. Employees are represented by unique integers from 0 to n-1, where 0 is always the CEO. Given two employees `a` and `b`, the function must determine if `a` is a direct or indirect manager of `b` (i.e., `b` reports directly or indirectly to `a`). You are given: - An integer `n` representing the number of employees. - A 2D list `reports` where `reports[i] = [manager, direct_report]` denotes that `manager` is the direct manager of `direct_report`. - Two integers `a` and `b` representing the employees in question. Return `True` if `a` is an ancestor (direct or indirect manager) of `b`, otherwise return `False`. Example 1: Input: n = 6, reports = [[0,1],[0,2],[1,3],[1,4],[2,5]], a = 0, b = 4 Output: True Explanation: Employee 0 is the CEO and manages 1 and 2 directly. Employee 1 manages 3 and 4, so 4 is indirectly managed by 0. Example 2: Input: n = 6, reports = [[0,1],[0,2],[1,3],[1,4],[2,5]], a = 1, b = 5 Output: False Explanation: Employee 1 does not manage employee 5 directly or indirectly. Example 3: Input: n = 4, reports = [[0,1],[1,2],[2,3]], a = 1, b = 3 Output: True Explanation: Employee 1 manages employee 2 directly, who in turn manages employee 3, making 1 an indirect manager of 3. Constraints: - 2 <= n <= 10000 - 1 <= reports.length < n - 0 <= a, b < n - reports[i].length == 2 - All managers and direct reports are distinct and valid employees in the range [0, n-1]. - Employee `a` and `b` are different and valid.","solution":"def is_manager(n, reports, a, b): Determine if employee `a` is a direct or indirect manager of employee `b`. from collections import defaultdict, deque management_tree = defaultdict(list) for manager, direct_report in reports: management_tree[manager].append(direct_report) queue = deque([a]) while queue: current = queue.popleft() if current == b: return True for direct_report in management_tree[current]: queue.append(direct_report) return False"},{"question":"Given a list of integers, return all unique subsets of the list. Each subset should be sorted in ascending order, and the list of subsets should be sorted in lexicographic order based on their string representations. For example, for the input list [1, 2, 3], the unique subsets are: [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]] Note: The input list may contain duplicate elements, but each subset must be unique. Example: Input: [1, 2, 2] Output: [[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]","solution":"from itertools import combinations def unique_subsets(nums): Generate all unique subsets of a list of integers. Each subset is sorted in ascending order, and the list of subsets is sorted lexicographically. # Sort the input to handle duplicates and to ensure ascending order in subsets nums.sort() # Using a set to avoid duplicates result_set = set() # Generate all subsets of all lengths for r in range(len(nums) + 1): for combination in combinations(nums, r): result_set.add(combination) # Convert each tuple to a list and sort lexicographically (natural sorting of tuples) result = [list(x) for x in sorted(result_set)] return result"},{"question":"Implement a function that takes a string as input and returns the length of the longest substring with all unique characters. The input string will only contain lowercase letters. Example: ``` Input: \\"abcabcbb\\" Output: 3 // \\"abc\\" is the longest substring with all unique characters. ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all unique characters. char_index_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_index_map: left = max(left, char_index_map[s[right]] + 1) char_index_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a company, employees record their work hours every week. The HR department needs to find the maximum number of consecutive weeks where an employee\'s total hours worked per week exceed a specified threshold. This will help in identifying the longest period during which the employee has been consistently productive. -----Input:----- - The first line contains T, the number of test cases. Then the test cases follow. - The first line of each test case contains two integers W (number of weeks) and H (threshold hours). - The second line contains W space-separated integers, where each integer represents the total hours worked in a corresponding week. -----Output:----- For each test case, output a single integer which is the maximum number of consecutive weeks where the total work hours exceed the threshold H. -----Constraints----- - 1 leq T leq 10 - 1 leq W leq 10^5 - 1 leq H leq 100 - 1 leq text{Hours worked per week} leq 100 -----Sample Input:----- 2 6 40 45 50 38 42 43 39 3 35 36 44 32 -----Sample Output:----- 2 2 -----EXPLANATION:----- In the first test case, the highest number of consecutive weeks where hours worked exceed 40 are weeks 1 and 2, and weeks 4 and 5, both of which count as 2 consecutive weeks. In the second test case, the highest number of consecutive weeks where hours worked exceed 35 are weeks 1 and 2, which count as 2 consecutive weeks.","solution":"def max_consecutive_weeks_above_threshold(T, test_cases): results = [] for i in range(T): W, H = test_cases[i][:2] hours = test_cases[i][2] max_consec = 0 current_consec = 0 for hour in hours: if hour > H: current_consec += 1 if current_consec > max_consec: max_consec = current_consec else: current_consec = 0 results.append(max_consec) return results"},{"question":"You are given two strings s and t both of length n and both consisting of lowercase Latin letters. In one move, you can choose any contiguous substring of s and move it to the end of the string t. The length of the substring can be of any length between 1 to n. Your task is to determine if it is possible to rearrange the letters of s to form t by performing the described operation any number of times (possibly zero times). You have to answer q independent test cases. -----Input----- The first line of the input contains one integer q (1 le q le 10^4) — the number of test cases. Then, q test cases follow. The first line of the test case contains one integer n (1 le n le 2 cdot 10^5) — the length of s and t. The second line of the test case contains one string s consisting of n lowercase Latin letters. The third line of the test case contains one string t consisting of n lowercase Latin letters. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5 (sum n le 2 cdot 10^5). -----Output----- For each test case, print \\"YES\\" (without quotes) if it is possible to rearrange the letters of s to form t by performing the described operation any number of times, and \\"NO\\" otherwise. -----Example----- Input 3 4 abcd dcba 5 abcde edcba 6 aabbcc ccbbaa Output YES YES YES","solution":"def can_rearrange_to_form_t(q, test_cases): results = [] for i in range(q): n, s, t = test_cases[i] if sorted(s) == sorted(t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"```markdown Alex is organizing a project review session for his team. He wants to analyze the feedback comments submitted by reviewers and summarize the common themes. A theme is defined by a keyword. Alex wants to count the occurrence of each keyword in the feedback comments. Keywords are case-insensitive, meaning \\"Performance\\" and \\"performance\\" are considered the same. Two identical keywords should be treated as the same regardless of their case or punctuation marks. Write a program that reads a list of keywords and a list of feedback comments, counts the number of times each keyword appears in the comments, and outputs the keywords in descending order of their counts. If two keywords have the same count, order them lexicographically (case-insensitively). -----Input:----- - The first line contains an integer K, the number of keywords. - The next K lines contain one keyword each. - The next line contains an integer C, the number of feedback comments. - The following C lines contain one feedback comment each. -----Output:----- - Print the keywords and their counts, each in a new line, in descending order of count. - If two keywords have the same count, print them in lexicographical order. -----Constraints:----- - 1 ≤ K ≤ 100 - Each keyword will be a non-empty string of at most 20 characters. - 1 ≤ C ≤ 1000 - Each comment will be a non-empty string of at most 1000 characters. -----Sample Input:----- 3 performance functionality usability 5 The PERFORMANCE of the app is great! I love the usability and functionality of this tool. Performance-wise, it is outstanding. However, the Usability aspect can be improved. Overall, the functionality is top-notch. -----Sample Output:----- performance 2 functionality 2 usability 2 -----Explanation:----- - \\"performance\\" appears 2 times (\\"PERFORMANCE\\" and \\"Performance-wise\\"). - \\"functionality\\" appears 2 times. - \\"usability\\" appears 2 times (\\"usability\\" and \\"Usability\\"). - Keywords are printed in lexicographical order because they all have the same count. ```","solution":"import re from collections import Counter, defaultdict def count_keywords(K, keywords, C, comments): keyword_counts = Counter() keyword_set = set(key.lower() for key in keywords) for comment in comments: words = re.findall(r\'bw+b\', comment.lower()) for word in words: if word in keyword_set: keyword_counts[word] += 1 sorted_keywords = sorted(keyword_counts.items(), key=lambda x: (-x[1], x[0])) result = [] for keyword, count in sorted_keywords: result.append(f\\"{keyword} {count}\\") return result"},{"question":"Victor has recently moved into a new city and wants to explore its parks. The city is represented as an undirected graph where intersections are nodes, and roads are edges. Parks in the city are special nodes in the graph. Victor wants to know the minimum time required to visit all the parks starting from any park. In the graph: - Each edge has a weight representing the time to travel between two intersections. - You are provided with a list of intersections that contain parks. Given the number of intersections, roads, list of roads with travel time, and list of parks, find the minimum time required for Victor to visit all the parks starting from any one park. -----Input format----- - An integer `N` representing the number of intersections (nodes) in the city. - An integer `E` representing the number of roads (edges) in the city. - The next `E` lines each consist of three space-separated integers `u`, `v`, and `w`, representing a road between intersections `u` and `v` with travel time `w`. - An integer `P` representing the number of parks. - A list of `P` integers representing the intersections that have parks. -----Output format----- - An integer representing the minimum time required to visit all the parks. -----Constraints----- 1 ≤ N ≤ 1000 0 ≤ E ≤ 5000 1 ≤ P ≤ N 1 ≤ u, v ≤ N 1 ≤ w ≤ 1000 -----Sample Input----- 6 7 1 2 4 1 3 3 2 3 2 2 4 6 3 4 5 3 5 1 4 6 2 3 1 4 6 -----Sample Output----- 10 In this city: - There are 6 intersections and 7 roads. - Parks are located at intersections 1, 4, and 6. - The minimum time to visit all parks starting at the optimal park is 10.","solution":"def find_min_time_to_visit_all_parks(N, E, roads, P, parks): # Step 1: Initialize the graph with infinite distances INF = float(\'inf\') dist = [[INF] * (N + 1) for _ in range(N + 1)] for i in range(1, N + 1): dist[i][i] = 0 # Step 2: Fill distances with given roads information for u, v, w in roads: dist[u][v] = w dist[v][u] = w # Step 3: Apply Floyd-Warshall algorithm to find all-pairs shortest paths for k in range(1, N + 1): for i in range(1, N + 1): for j in range(1, N + 1): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Step 4: Calculate minimum time to visit all parks min_time = INF for start_park in parks: time = 0 for end_park in parks: if start_park != end_park: time += dist[start_park][end_park] min_time = min(min_time, time) return min_time"},{"question":"Given a string s, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order. Example 1: Input: \\"The sky is blue\\" Output: \\"ehT yks si eulb\\" Example 2: Input: \\" Hello World \\" Output: \\" olleH dlroW \\" Explanation: Your reversed string should not contain leading or trailing spaces. Example 3: Input: \\"a good example\\" Output: \\"a doog elpmaxe\\" Note: A word is defined as a sequence of non-space characters. The input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces. You need to keep multiple spaces between words as is.","solution":"def reverse_words(s): Reverses the characters in each word within a sentence while preserving whitespace and initial word order. return \' \'.join(word[::-1] for word in s.split(\' \'))"},{"question":"A company is organizing a grand sale event and there are various discount offers available for customers. Customers are allowed to use at most K discount offers in a single purchase. Each discount offer is characterized by its value. You are tasked to help the organizers maximize the total value a customer can get for a given number of discount offers used out of the available offers. -----Input----- The first line contains an integer T, the number of test cases. Each test case starts with two integers N and K. The next line contains N integers, where the ith integer represents the value of the ith discount offer. -----Output----- For each test case, output a single integer - the maximum total value of the discount offers a customer can get using at most K discount offers. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 2*105 - 1 ≤ K ≤ N - 1 ≤ discount offer values ≤ 10^4 -----Example----- Input: 2 5 3 1 2 3 4 5 4 2 10 8 5 3 Output: 12 18 -----Explanation----- Example case 1. The customer can use the top 3 discounts which are 3, 4, and 5, resulting in a total value of 12. Example case 2. The customer can use the top 2 discounts which are 10 and 8, resulting in a total value of 18.","solution":"def max_discount_value(T, test_cases): results = [] for t in range(T): N, K, offers = test_cases[t] offers.sort(reverse=True) results.append(sum(offers[:K])) return results"},{"question":"# Description: Consider a game where you have \'n\' number of ships each represented by a positive integer where the number represents the weight of the ship. You need to create a balanced fleet by arranging the ships into two groups such that the absolute difference between the total weight in each group is minimized. Write a function `balance_fleet(weights)` to calculate the minimum possible difference between the two groups\' weights. # Input: - weights: A list of integers representing the weights of the ships. Length of this list will not exceed 20. # Output: - An integer representing the minimum possible difference between the sums of weights of two groups. # Examples: ``` For Python: balance_fleet([1, 6, 11, 5]) should return 1 balance_fleet([10, 20, 15, 5, 25]) should return 5 balance_fleet([1, 2, 3, 4, 5]) should return 1 ```","solution":"def balance_fleet(weights): Calculate the minimum possible difference between the sums of weights of two groups. total_weight = sum(weights) n = len(weights) dp = [[False] * (total_weight // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for w in range(total_weight // 2 + 1): if dp[i - 1][w]: dp[i][w] = True elif w >= weights[i - 1]: dp[i][w] = dp[i - 1][w] or dp[i - 1][w - weights[i - 1]] for w in range(total_weight // 2, -1, -1): if dp[n][w]: return total_weight - 2 * w"},{"question":"Let\'s play the Alphabet You are given a string that contains only lowercase alphabets. The task is to determine the number of unique substrings of length `k` where `1 <= k <= len(string)` and return those substrings. Given the length of the substring `k` and the string `s`, your task is to write a function that returns all unique substrings of length `k` in lexicographical order. # Examples Python ```python >>> find_substrings(\\"abcabc\\", 3) [\'abc\', \'bca\', \'cab\'] ``` # Assumptions 1. The inputs `k` and `s` will always be integers and strings, respectively. 2. The length of the string `s` will be between `1` to `100`. 3. The value of `k` will be between `1` to the length of the string `s`. 4. The output list should contain substrings in lexicographical order. Python ```python def find_substrings(s: str, k: int) -> list[str]: # your code here ```","solution":"def find_substrings(s: str, k: int) -> list[str]: Returns all unique substrings of length `k` in lexicographical order. substrings = set() # Generate all substrings of length k for i in range(len(s) - k + 1): substring = s[i:i + k] substrings.add(substring) # Return the substrings as a sorted list in lexicographical order return sorted(substrings)"},{"question":"You are given a rectangular matrix filled with non-negative integers. Given two specific coordinates in the matrix, your task is to rotate all elements of the rectangle defined by these coordinates in clockwise direction by one step. -----Input:----- The first line consists of three integers m and n. Next line consists of four space-separated integers x1, y1, x2, y2 which denotes the top-left (x1, y1) and bottom-right (x2, y2) coordinates of the rectangle. Next m lines contain n space-separated integers each representing the matrix elements. -----Output:----- Return the matrix after rotating the elements of the specified sub-rectangle in clockwise direction by one step. -----Constraints----- - 1 leq m, n leq 100 - 0 leq a_{ij} leq 10000 - 0 leq x1 leq x2 < m - 0 leq y1 leq y2 < n -----Sample Input:----- 4 4 1 1 2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -----Sample Output:----- 1 2 3 4 5 10 6 8 9 11 7 12 13 14 15 16 -----EXPLANATION:----- The top-left coordinate of the specified sub-rectangle is (1, 1) and the bottom-right is (2, 2). Elements of the sub-rectangle are: 6 7 10 11 After rotating clockwise by one step, the sub-rectangle becomes: 10 6 11 7","solution":"def rotate_subrectangle(matrix, x1, y1, x2, y2): Rotate the subrectangle defined by the coordinates (x1, y1) and (x2, y2) of the given matrix in clockwise direction by one step. matrix: List[List[int]] - the original matrix x1: int - top-left x-coordinate of the subrectangle y1: int - top-left y-coordinate of the subrectangle x2: int - bottom-right x-coordinate of the subrectangle y2: int - bottom-right y-coordinate of the subrectangle Returns: List[List[int]] - the matrix after rotating the subrectangle if x1 == x2 and y1 == y2: return matrix # Extract the subrectangle elements into a list elements = [] for j in range(y1, y2 + 1): elements.append(matrix[x1][j]) for i in range(x1 + 1, x2 + 1): elements.append(matrix[i][y2]) for j in range(y2 - 1, y1 - 1, -1): elements.append(matrix[x2][j]) for i in range(x2 - 1, x1, -1): elements.append(matrix[i][y1]) # Rotate the elements by one step clockwise elements = [elements[-1]] + elements[:-1] # Place the elements back into the subrectangle idx = 0 for j in range(y1, y2 + 1): matrix[x1][j] = elements[idx] idx += 1 for i in range(x1 + 1, x2 + 1): matrix[i][y2] = elements[idx] idx += 1 for j in range(y2 - 1, y1 - 1, -1): matrix[x2][j] = elements[idx] idx += 1 for i in range(x2 - 1, x1, -1): matrix[i][y1] = elements[idx] idx += 1 return matrix"},{"question":"Implement a function string_transform that takes in a string s consisting of alphabets and spaces. For each word in the string: - Reverse the order of the letters. - Capitalize the first letter of each word. - Make all other letters lowercase. The function should then return the transformed string. For example: ``` string_transform(\\"hello WORLD\\") ``` should return: ``` \\"Olleh Dlrow\\" ```","solution":"def string_transform(s): Transforms the given string according to the specified rules: - Reverses the order of the letters in each word. - Capitalizes the first letter of each word. - Makes all other letters lowercase. Args: s (str): The input string consisting of alphabets and spaces. Returns: str: The transformed string. words = s.split() transformed_words = [ word[::-1].capitalize() for word in words ] return \' \'.join(transformed_words)"},{"question":"Maya is designing a new encryption algorithm that involves rotating strings of lowercase English letters. She defines a rotation as follows: for each letter in the string, replace it with the letter that is a fixed number of positions down the alphabet. She handles wrap-around by starting again from \'a\' after \'z\'. Given the rotated string and rotation integer, your task is to help Maya by constructing the original string. -----Input:----- - The first line contains a single integer T, the number of test cases. - The following T lines each contain an integer K (the rotation factor) and a rotated string S. -----Output:----- For each test case, output the original (unrotated) string. -----Constraints----- - 1 <= T <= 1000 - 0 <= K <= 25 - 1 <= |S| <= 1000 -----Sample Input:----- 3 3 def 4 aaaa 1 zzz -----Sample Output:----- abc wwww yyy","solution":"def decode_rotated_string(T, test_cases): def decode(K, S): original = [] for char in S: original_char = chr(((ord(char) - ord(\'a\') - K) % 26) + ord(\'a\')) original.append(original_char) return \'\'.join(original) results = [decode(K, S) for K, S in test_cases] return results"},{"question":"You are given a binary tree with N nodes. Each node of the tree contains some value. Your task is to determine the maximum sum of values that can be obtained from any path in the tree. A path is defined as any sequence of nodes from any starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to include the root. -----Constraints----- - 1 ≤ N ≤ 10^5 - The value of each node is an integer which can be positive, negative, or zero. - Node values are in the range of [-10^4, 10^4]. -----Input----- The input is given from Standard Input in the following format: N v_1 v_2 ... v_{N} p_2 p_3 ... p_{N} List of values for each node v_i and list of parent references p_i for node i, where p_i indicates the parent of node i (1-based index). -----Output----- Print a single integer representing the maximum sum of values that can be obtained from any path in the tree. -----Sample Input----- 5 10 -2 7 8 -6 1 1 2 2 -----Sample Output----- 23 In the above input, node 2 and node 3 are children of node 1, and nodes 4 and 5 are children of node 2. The path with the maximum sum is obtained by starting from node 4 and going through nodes 2 and 1 to node 3: - Node 4 value: 8 - Parent node 2 value: -2 - Parent node 1 value: 10 - Node 3 value: 7 Total path sum = 8 + (-2) + 10 + 7 = 23","solution":"class TreeNode: def __init__(self, value=0): self.value = value self.left = None self.right = None def build_tree(values, parents): nodes = [TreeNode(value) for value in values] if not nodes: return None for i, parent in enumerate(parents, start=1): if not nodes[parent-1].left: nodes[parent-1].left = nodes[i] else: nodes[parent-1].right = nodes[i] return nodes[0] # Root node def max_path_sum(root): global_max = float(\'-inf\') def find_max(node): nonlocal global_max if not node: return 0 left_max = max(find_max(node.left), 0) right_max = max(find_max(node.right), 0) local_max = node.value + left_max + right_max global_max = max(global_max, local_max) return node.value + max(left_max, right_max) find_max(root) return global_max def find_max_sum_in_tree(N, values, parents): root = build_tree(values, parents) return max_path_sum(root)"},{"question":"Given a string s, your task is to find the minimum number of characters to insert into the string to make it a palindrome. A palindrome is a string that reads the same forwards and backwards. Example 1: Input: \\"abca\\" Output: 1 Explanation: Insert \'b\' at the end of the string to form \\"abcba\\". Example 2: Input: \\"race\\" Output: 3 Explanation: Insert \'e\', \'c\', and \'a\' at the beginning to form \\"ecarace\\". Note: 1. The length of the string s will not exceed 1000 characters. 2. The string s will contain only lowercase letters a-z.","solution":"def min_insertions_to_make_palindrome(s): Returns the minimum number of characters to insert into the string `s` to make it a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1]"},{"question":"Task: ======= You are given an integer array `numbers` and a target integer `target`. Your task is to implement a function `combinationSum` that finds all unique combinations in `numbers` where the candidate numbers sum to `target`. The same repeated number may be chosen from `numbers` an unlimited number of times. The solution set must not contain duplicate combinations. # Function Signature ```python def combinationSum(numbers: List[int], target: int) -> List[List[int]]: ``` # Input - `numbers`: An array of distinct integers (1 <= len(numbers) <= 20, 1 <= numbers[i] <= 50) - `target`: An integer (1 <= target <= 500) # Output - Return a list of all unique combinations of `numbers` where the chosen numbers sum to `target`. You may return the combinations in any order. # Example ```python combinationSum([2,3,6,7], 7) # Output: [[7], [2,2,3]] combinationSum([2,3,5], 8) # Output: [[2,2,2,2], [2,3,3], [3,5]] ``` # Constraints - All numbers (including `target`) will be positive integers. - The solution set must not contain duplicate combinations. - The same number can be chosen from `numbers` an unlimited number of times.","solution":"from typing import List def combinationSum(numbers: List[int], target: int) -> List[List[int]]: def backtrack(remain, combo, start): if remain == 0: results.append(list(combo)) return elif remain < 0: return for i in range(start, len(numbers)): combo.append(numbers[i]) backtrack(remain - numbers[i], combo, i) combo.pop() results = [] backtrack(target, [], 0) return results"},{"question":"You are tasked with creating a function to validate usernames based on the following rules: - The username must be between 6 and 20 characters long. - It can only contain alphanumeric characters and underscores (\'_\'). - It must start with a letter. The function should take a single argument (the username as a string) and return `true` if the username is valid according to the rules, or `false` otherwise. Examples ``` \\"valid_User1\\" => true \\"user123\\" => true \\"123username\\" => false \\"no_way_1234567_no_way_1234567\\" => false \\"user@name\\" => false \\"short\\" => false ```","solution":"import re def validate_username(username): Validates the username based on the given rules: - The username must be between 6 and 20 characters long. - It can only contain alphanumeric characters and underscores (\'_\'). - It must start with a letter. Args: username (str): the username to be validated Returns: bool: True if the username is valid, False otherwise if 6 <= len(username) <= 20 and re.match(r\'^[A-Za-z][A-Za-z0-9_]*\', username): return True return False"},{"question":"Write a function that takes an array of integers and returns a new array where each element is the first multiple of 3 that is greater than or equal to the original element. For example, given the array `[2, 7, 13, 21]`, the function should return `[3, 9, 15, 21]`. ```python next_multiple_of_three([2, 7, 13, 21]) => [3, 9, 15, 21] ``` If the input array is empty, the function should return an empty array. ```python next_multiple_of_three([]) => [] ```","solution":"def next_multiple_of_three(arr): Given an array of integers, this function returns a new array where each element is the first multiple of 3 that is greater than or equal to the original element. result = [] for num in arr: if num % 3 == 0: result.append(num) else: result.append((num // 3 + 1) * 3) return result"},{"question":"Write a function called filter_strings that takes a list of strings and a single character as input. The function should return a new list containing only the strings from the original list that start with the given character. The comparison should be case-insensitive, meaning \'a\' and \'A\' are considered the same. If the input list is empty or if no strings match, return an empty list.","solution":"def filter_strings(strings, character): Filters a list of strings, returning only the strings that start with the given character. This comparison is case-insensitive. Parameters: - strings: list of str - character: str (single character) Returns: - list of str if not strings or not character or len(character) != 1: return [] character = character.lower() return [s for s in strings if s.lower().startswith(character)]"},{"question":"You are planning a surprise party and you want to distribute candies among the children attending. Each child should get the same amount of candies, and each of the bags used for distribution should contain the same number of candies. You are provided with the total number of candies `t` and the number of children `k`. Your task is to: 1. Determine the maximum number of candies each child can receive. 2. Calculate the number of full bags needed given that each bag can hold at most `100` candies. The function `party_distribution(int t, int k)` should return a dictionary with keys `\\"Candies_per_child\\"` and `\\"Bags_needed\\"`, indicating the maximum number of candies each child can get and the number of full bags needed, respectively. If it\'s not possible to distribute the candies evenly, the value for `\\"Candies_per_child\\"` should be `0` and `\\"Bags_needed\\"` should be `0`. **Parameters:** - `t` (1 ≤ t ≤ 10^6): The total number of candies. - `k` (1 ≤ k ≤ 10^3): The total number of children. **Example:** ``` party_distribution(2050, 10) => {\\"Candies_per_child\\": 200, \\"Bags_needed\\": 20} party_distribution(3050, 15) => {\\"Candies_per_child\\": 200, \\"Bags_needed\\": 30} party_distribution(100, 3) => {\\"Candies_per_child\\": 0, \\"Bags_needed\\": 0} ``` Explanation of the results for `party_distribution(2050, 10)`: - Each child gets `200` candies (since 2050 // 10 = 205, we will take the largest possible number which is within 200). - To distribute these `2000` candies (10 children * 200 candies each), we need `20` bags, as each can hold at most `100` candies (`2000 / 100` = 20). The remaining 50 candies cannot be evenly distributed so they are not considered.","solution":"def party_distribution(t, k): Returns the amount of candies each child can get and the number of bags needed. If the candies cannot be distributed evenly, returns 0 for both values. if t < k: return {\\"Candies_per_child\\": 0, \\"Bags_needed\\": 0} max_candies_per_child = t // k max_candies_per_child -= max_candies_per_child % 100 if max_candies_per_child == 0: return {\\"Candies_per_child\\": 0, \\"Bags_needed\\": 0} total_candies_distributed = max_candies_per_child * k bags_needed = (total_candies_distributed + 99) // 100 # ceiling division return {\\"Candies_per_child\\": max_candies_per_child, \\"Bags_needed\\": bags_needed}"},{"question":"In a given 2D grid of size m x n, each cell represents a possible step in a maze. The maze includes obstacles marked as \'1\' while open paths are marked as \'0\'. The robot starts at the top-left corner of the grid (0, 0) and aims to reach the bottom-right corner of the grid (m-1, n-1). The robot can only move either down or right at any point in time. Write a function to find the number of unique paths the robot can take to reach the destination. If the start or finish cell is an obstacle, then there is no valid path. Example 1: Input: [ [0,0,0], [0,1,0], [0,0,0] ] Output: 2 Explanation: From the top-left corner, there are 2 ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: [ [0,1], [0,0] ] Output: 1 Explanation: From the top-left corner, there is only 1 way to reach the bottom-right corner: 1. Down -> Right Note: m and n will be at most 100","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths in a grid with obstacles. if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0]*n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are playing a game that involves moving on a 2D grid. You start at position (0,0) and aim to reach the position (x,y). You can only move right or up at each step. At each step, you can either: - Move right by 1 unit, costing `costRight` points. - Move up by 1 unit, costing `costUp` points. Find the minimum cost required to reach position (x,y). Example 1: Input: x = 2, y = 3, costRight = 1, costUp = 2 Output: 7 Explanation: The optimal path is right, right, up, up, up. Total cost is 2*1 + 3*2 = 2 + 6 = 7. Example 2: Input: x = 3, y = 3, costRight = 4, costUp = 1 Output: 12 Explanation: The optimal path is up, up, up, right, right, right. Total cost is 3*1 + 3*4 = 3 + 12 = 15. Constraints: 1 <= x, y <= 10^5 1 <= costRight, costUp <= 10^9","solution":"def min_cost_to_reach(x, y, costRight, costUp): Calculate the minimum cost to reach position (x, y) from (0,0) on a 2D grid given the cost of moving right and up. Args: x (int): target x-coordinate y (int): target y-coordinate costRight (int): cost of moving right costUp (int): cost of moving up Returns: int: minimum cost to reach (x, y) return x * costRight + y * costUp"},{"question":"Given a list of integers representing temperature recordings each hour for a day, you are required to calculate the smallest range of temperatures for any contiguous subsequence of hours. The range of temperatures for a subsequence is defined as the difference between the maximum and minimum temperatures in that subsequence. Write a function `smallest_temperature_range(temperatures, k)` that takes in a list of integers `temperatures` (length n) and an integer `k`, which represents the number of contiguous hours to consider. The function must return the smallest range of temperatures for any contiguous subsequence of exactly `k` hours. If `n < k`, the function should raise a `ValueError`. # Examples 1. `smallest_temperature_range([3, 1, 6, 4, 9, 2, 8], 3)` - The contiguous subsequences of 3 hours are: `[3, 1, 6]`, `[1, 6, 4]`, `[6, 4, 9]`, `[4, 9, 2]`, `[9, 2, 8]` - Their temperature ranges are: `5`, `5`, `5`, `7`, `7` - The smallest range is `5` - So, `smallest_temperature_range([3, 1, 6, 4, 9, 2, 8], 3) --> 5` 2. `smallest_temperature_range([10, 20, 30, 40, 50], 2)` - The contiguous subsequences of 2 hours are: `[10, 20]`, `[20, 30]`, `[30, 40]`, `[40, 50]` - Their temperature ranges are: `10`, `10`, `10`, `10` - The smallest range is `10` - So, `smallest_temperature_range([10, 20, 30, 40, 50], 2) --> 10` 3. `smallest_temperature_range([5, 2, 1, 3, 9, 7], 4)` - The contiguous subsequences of 4 hours are: `[5, 2, 1, 3]`, `[2, 1, 3, 9]`, `[1, 3, 9, 7]` - Their temperature ranges are: `4`, `8`, `8` - The smallest range is `4` - So, `smallest_temperature_range([5, 2, 1, 3, 9, 7], 4) --> 4` # Constraints - The list of temperatures will have at least one element and at most 100,000 elements. - The integer `k` will be a positive integer less than or equal to the length of the list. - The temperature values will be integers from `-10^6` to `10^6`. Note: If `n < k`, raise a `ValueError`.","solution":"def smallest_temperature_range(temperatures, k): Returns the smallest range of temperatures for any contiguous subsequence of k hours. If the length of temperatures is less than k, raises a ValueError. :param temperatures: List of integers representing temperature recordings. :param k: Integer representing number of contiguous hours to consider. :return: Integer representing the smallest range of temperatures for any k-hour subsequence. n = len(temperatures) if n < k: raise ValueError(\\"Length of temperatures must be greater than or equal to k.\\") min_range = float(\'inf\') for i in range(n - k + 1): subsequence = temperatures[i:i+k] subsequence_range = max(subsequence) - min(subsequence) if subsequence_range < min_range: min_range = subsequence_range return min_range"},{"question":"Given an array of integers `heights` representing the heights of a set of buildings, you are tasked with finding the maximum area of water that can be trapped between the buildings. The water trapped between the buildings is bounded by the shorter of the two buildings\' heights and the horizontal distance between them. Example: ``` Input: [1, 8, 6, 2, 5, 4, 8, 3, 7] Output: 49 Explanation: The maximum amount of water can be trapped between buildings at indices 1 and 8 (heights 8 and 7) with a distance of 7. The area is therefore 7 * 7 = 49. ``` Notes: 1. 2 <= `heights.length` <= 10^5 2. 0 <= `heights[i]` <= 10^4","solution":"def max_area(heights): Given an array of integers heights representing the heights of a set of buildings, finds the maximum area of water that can be trapped between the buildings. left, right = 0, len(heights) - 1 max_area = 0 while left < right: # Calculate the current area width = right - left height = min(heights[left], heights[right]) current_area = width * height # Update the maximum area if the current area is greater max_area = max(max_area, current_area) # Move the left or right index inward to attempt to find a larger area if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area"},{"question":"Sam is a librarian and needs to create a catalogue of books in a new format. He wants to list the books with their serial numbers in a spiral order of a 2D matrix. Write a program to help Sam generate the catalogue in spiral order. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case will contain two integers M and N, representing the dimensions of the matrix (rows and columns). - The next M lines will each contain N integers representing the serial numbers of the books in the rows of the matrix. -----Output:----- For each test case, output the serial numbers of books in spiral order on a single line. -----Constraints----- - 1 leq T leq 10 - 1 leq M, N leq 10 -----Sample Input:----- 2 3 3 1 2 3 4 5 6 7 8 9 2 4 1 2 3 4 5 6 7 8 -----Sample Output:----- 1 2 3 6 9 8 7 4 5 1 2 3 4 8 7 6 5 -----EXPLANATION:----- The first test case is a 3x3 matrix and its spiral order is 1, 2, 3, 6, 9, 8, 7, 4, 5. The second test case is a 2x4 matrix and its spiral order is 1, 2, 3, 4, 8, 7, 6, 5.","solution":"def spiral_order(matrix): result = [] while matrix: # Top row result += matrix.pop(0) if matrix and matrix[0]: # Right column for row in matrix: result.append(row.pop()) if matrix: # Bottom row result += matrix.pop()[::-1] if matrix and matrix[0]: # Left column for row in matrix[::-1]: result.append(row.pop(0)) return result def process_input(T, test_cases): results = [] for i in range(T): M, N = test_cases[i][0] matrix = test_cases[i][1] results.append(\' \'.join(map(str, spiral_order(matrix)))) return results"},{"question":"You are given a string containing alphabetical characters only. Your task is to check if the string can be rearranged such that no two adjacent characters are the same. If such a rearrangement is possible, return any valid rearranged string. If not, return an empty string. --------------------------------- # Input A single string `s` containing only lowercase alphabetical characters. (1 ≤ |s| ≤ 10^5) # Output Return a valid rearranged string with no two adjacent characters being the same if such a rearrangement is possible. Otherwise, return an empty string. --------------------------------- # Examples ``` Input: \\"aab\\" Output: \\"aba\\" Input: \\"aaab\\" Output: \\"\\" ``` # Explanation In the first example, the string \\"aba\\" is a possible rearrangement where no two adjacent characters are the same. In the second example, it is not possible to rearrange \\"aaab\\" in such a way that no two adjacent characters are the same. Thus, the output is an empty string. **Hint**: You can achieve this using a priority queue (max heap) to arrange the characters with the highest frequency first, and then reorganize them ensuring that no two adjacent characters are the same.","solution":"from heapq import heappush, heappop from collections import Counter def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If not possible, returns an empty string. :param s: Input string containing only lowercase alphabetical characters. :return: A rearranged string or an empty string if rearrangement is not possible. # Count the frequency of each character freq = Counter(s) # Use a max heap (by storing negative frequencies) to store characters by their frequencies max_heap = [] for char, count in freq.items(): heappush(max_heap, (-count, char)) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heappop(max_heap) if prev_count < 0: heappush(max_heap, (prev_count, prev_char)) result.append(char) prev_count, prev_char = count + 1, char rearranged_str = \'\'.join(result) return rearranged_str if len(rearranged_str) == len(s) else \\"\\""},{"question":"You are given an array of N integers. Your task is to determine the maximum sum of any subarray that can be obtained by removing at most one element from the array. A subarray is defined as a contiguous block of elements in the array. You need to find the maximum possible sum among all subarrays for which you are allowed to remove zero or one element. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N. - The second line contains N space-separated integers A_1, A_2, ldots, A_N representing the elements of the array. -----Output----- For each test case, print a single line containing one integer — the maximum possible sum of any subarray after removing at most one element. -----Constraints----- - 1 le T le 10 - 2 le N le 10^5 - -10^4 le A_i le 10^4 for each valid i -----Subtasks----- Subtask #1 (30 points): 2 le N le 100 Subtask #2 (70 points): original constraints -----Example Input----- 1 5 1 -2 0 3 4 -----Example Output----- 8 -----Explanation----- For example, one possible subarray is [1, -2, 0, 3, 4] which gives a sum of 6. By removing -2, the subarray becomes [1, 0, 3, 4] which gives a sum of 8, the maximum possible.","solution":"def max_sum_with_one_removal(arr): n = len(arr) if n == 1: return arr[0] # Initialize arrays left = [0]*n right = [0]*n # Populate the left array left[0] = arr[0] max_current = arr[0] for i in range(1, n): max_current = max(arr[i], max_current + arr[i]) left[i] = max_current # Populate the right array right[n-1] = arr[n-1] max_current = arr[n-1] for i in range(n-2, -1, -1): max_current = max(arr[i], max_current + arr[i]) right[i] = max_current # Calculate the maximum sum with one removal max_sum = max(left) for i in range(1, n-1): max_sum = max(max_sum, left[i-1] + right[i+1]) return max_sum def max_sum_subarray_with_one_removal(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] results.append(max_sum_with_one_removal(A)) return results"},{"question":"Given a list of integers, write a function `max_subarray_sum(arr)` that finds the maximum sum of a contiguous subarray within the given array. For example, the input [34, -50, 42, 14, -5, 86] has a maximum sum subarray [42, 14, -5, 86], with a maximum sum of 137. However, if the array consists solely of negative numbers like `[-3, -7, -10, -20]`, the function should return 0, as the sum of an empty subarray is considered the maximum possible sum in such cases. Use the following function signature to implement your solution: ```python def max_subarray_sum(arr: List[int]) -> int: # Your code here ``` Example test cases: ```python assert max_subarray_sum([34, -50, 42, 14, -5, 86]) == 137 assert max_subarray_sum([100, -100, 50, -50, 50, -50, 200]) == 200 assert max_subarray_sum([-10, -5, -2]) == 0 assert max_subarray_sum([8, -19, 5, -4, 20]) == 21 ```","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: Finds the maximum sum of a contiguous subarray. If all elements are negative, returns 0. max_sum = 0 current_sum = 0 for num in arr: current_sum = max(0, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Consider a university with N students and M two-way friendship connections among them. Each pair of students is either friends directly or can potentially be friends indirectly through a chain of friendships. The university administration wants to ensure that the campus has a strong social bonding, which means every student should be able to reach every other student through these friendships, directly or indirectly. You are tasked with writing a program that determines if the university already has strong social bonding or not. In other words, you need to determine if the graph of students and friendships is a single connected component. -----Input----- - The first line of the input contains two integers, N and M, the number of students and the number of friendship connections, respectively. - The next M lines each contain two integers u and v, indicating that there is a friendship connection between students u and v. -----Output----- - Output \\"YES\\" if every student is reachable from every other student, and \\"NO\\" otherwise. -----Constraints----- - 1 le N le 10^5 - 0 le M le 10^5 -----Example Input----- 5 4 1 2 2 3 3 4 4 5 -----Example Output----- YES -----Example Input----- 4 2 1 2 3 4 -----Example Output----- NO -----Explanation----- In the first example, every student can reach every other student directly or indirectly through the connections: - 1 -> 2 -> 3 -> 4 -> 5 In the second example, students 1 and 2 are connected, and students 3 and 4 are connected, but there\'s no connection between these two groups. Therefore, not every student can reach every other student.","solution":"def is_connected(N, M, connections): from collections import defaultdict, deque if N == 1: return \\"YES\\" graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) def bfs(start): queue = deque([start]) visited[start] = True count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count connected_component_size = bfs(1) if connected_component_size == N: return \\"YES\\" else: return \\"NO\\""},{"question":"**Problem Statement:** Write a function `is_prime(n)` that takes in an integer `n` and returns `true` if the number is a prime number, and `false` otherwise. A prime number is only divisible by 1 and itself, and must be greater than 1. Your solution should handle edge cases such as negative numbers and zero. **Constraint:** - You may assume that the input will be an integer between -1000 and 1000. **Examples:** ```python is_prime(11) # returns: True is_prime(4) # returns: False is_prime(-3) # returns: False is_prime(1) # returns: False is_prime(0) # returns: False is_prime(17) # returns: True ``` **Note:** - You should aim for an efficient algorithm that tests for primeness.","solution":"def is_prime(n): Determines if the given number n is a prime number. Args: n (int): The number to check for primality. Returns: bool: True if n is a prime number, False otherwise. if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"question":"# Task Given a grid representing a map of \'0\'s and \'1\'s, where \'0\' represents water and \'1\' represents land, the goal is to find the size of the largest connected piece of land in the grid. Two pieces of land are considered connected if they are adjacent horizontally or vertically. # Input/Output `[input]` 2D list of integers `grid` The grid representing the map. `[output]` an integer The size of the largest connected piece of land. *Note*: The grid will have at most 100 rows and 100 columns. # Example For the input: ``` grid = [ [1, 1, 0, 0, 0], [1, 0, 1, 0, 0], [0, 0, 1, 1, 1], [0, 1, 0, 0, 1] ] ``` The output should be `5`. Explanation: The largest connected piece of land is formed by the grid elements at the following positions: - (0, 0) - (0, 1) - (1, 0) - (2, 2) - (2, 3) - (2, 4) - (3, 4) Hence, the size of the largest connected piece of land is 5.","solution":"def largest_connected_land(grid): rows = len(grid) cols = len(grid[0]) if rows > 0 else 0 def dfs(r, c): if r < 0 or c < 0 or r >= rows or c >= cols or grid[r][c] == 0: return 0 grid[r][c] = 0 # Mark as visited size = 1 size += dfs(r - 1, c) size += dfs(r + 1, c) size += dfs(r, c - 1) size += dfs(r, c + 1) return size max_size = 0 for r in range(rows): for c in range(cols): if grid[r][c] == 1: max_size = max(max_size, dfs(r, c)) return max_size"},{"question":"Mountain Array Peak: A mountain array is defined as an array with the following properties: 1. `nums.length >= 3` 2. There exists some `i` with `0 < i < nums.length - 1` such that: - `nums[0] < nums[1] < ... < nums[i-1] < nums[i]` - `nums[i] > nums[i+1] > ... > nums[nums.length - 1]` Write a function `mountainPeak(nums: List[int]) -> int` that accepts an integer array `nums` representing a mountain array and returns the index `i` which is the peak index. # Example: ```python print(mountainPeak([2, 4, 6, 8, 5, 3, 1])) # Output: 3 print(mountainPeak([0, 2, 3, 4, 6, 9, 7, 2])) # Output: 5 print(mountainPeak([1, 2, 3, 2, 1])) # Output: 2 ``` # Constraints: - `3 <= nums.length <= 10^5` - `0 <= nums[i] <= 10^6` - Ensure the function runs in O(log n) time complexity. # Notes: - Use a binary search algorithm for finding the peak index to attain the required time complexity.","solution":"from typing import List def mountainPeak(nums: List[int]) -> int: This function finds the peak index in a mountain array using binary search. :param nums: List[int] - The mountain array :return: int - The peak index left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] < nums[mid + 1]: # If the middle element is less than its right neighbor, # the peak must be to the right of mid. left = mid + 1 else: # If the middle element is greater than its right neighbor, # the peak is either this element or to the left of it. right = mid return left"},{"question":"Write a function word_frequency(sentence) that takes a string as input and returns a dictionary where each key is a unique word in the input string, and the corresponding value is the count of occurrences of that word. - You may assume that the input string contains only words and spaces, and all words are separated by a single space without leading or trailing spaces. - The function should be case-insensitive, i.e., it should treat \\"word\\" and \\"Word\\" as the same word. For example: ```python word_frequency(\\"Hello hello world\\") => {\'hello\': 2, \'world\': 1} word_frequency(\\"Test the function test the Case\\") => {\'test\': 2, \'the\': 2, \'function\': 1, \'case\': 1} ``` **Function Signature:** ```python def word_frequency(sentence: str) -> dict: pass ```","solution":"def word_frequency(sentence: str) -> dict: Returns a dictionary where each key is a unique word (case-insensitive) in the input string, and the corresponding value is the count of occurrences of that word. words = sentence.lower().split() freq_dict = {} for word in words: if word in freq_dict: freq_dict[word] += 1 else: freq_dict[word] = 1 return freq_dict"},{"question":"You are organizing a charity run event, and you need to assign bib numbers to the participants. Each participant\'s bib number must be unique and should be assigned based on the time they registered for the event (first come, first serve), starting from 1 upwards. Write a function that, given a list of registration timestamps and the current bib number, returns a list of assigned bib numbers in the order of their registration timestamps. - `timestamps` is a list of strings, where each string is a timestamp in \'YYYY-MM-DD HH:MM:SS\' format. - `current_bib_number` is an integer representing the starting bib number for this batch of assignments. The function should return a list of assigned bib numbers, sorted by their registration timestamps. Example: ```python timestamps = [\'2023-05-15 09:15:00\', \'2023-05-15 09:00:00\', \'2023-05-15 09:05:00\'] current_bib_number = 10 assign_bibs(timestamps, current_bib_number) ``` Output: ```python [11, 10, 12] ``` Explanation: - The registration at \'2023-05-15 09:00:00\' gets bib number 10. - The registration at \'2023-05-15 09:05:00\' gets bib number 11. - The registration at \'2023-05-15 09:15:00\' gets bib number 12. Assume: - The list of timestamps is always sorted in ascending order. - The list of timestamps will not be empty.","solution":"def assign_bibs(timestamps, current_bib_number): Assign bib numbers to participants based on their registration timestamps. Parameters: timestamps (list of str): List of registration timestamps in \'YYYY-MM-DD HH:MM:SS\' format. current_bib_number (int): The starting bib number for this batch of assignments. Returns: list of int: List of assigned bib numbers sorted by registration timestamps. assigned_bibs = [] for i in range(len(timestamps)): assigned_bibs.append(current_bib_number + i) return assigned_bibs"},{"question":"You are given an array of integers `nums` and an integer `k`. In one operation, you can pick any integer from `nums` and increment or decrement it by 1. Return the minimum number of operations required to make all the elements of `nums` equal after performing the operations at most `k` times. Example 1: Input: nums = [1, 2, 3], k = 3 Output: 2 Explanation: Increment 1 by 1 twice to become 3. Decrement 3 by 1 once to become 2. Now, all elements are equal to 2, using exactly 3 operations. Example 2: Input: nums = [1, 10, 2, 9], k = 5 Output: 14 Explanation: Increment 1 to 8 using 7 operations. Decrement 10 to 5 using 5 operations. Increment 2 to 7 using 5 operations. Decrement 9 to 6 using 3 operations. We can achieve 6 effective operations at minimum by optimally balancing increments and decrements. Example 3: Input: nums = [3, 3, 3], k = 1 Output: 0 Explanation: No operation is needed as all elements are already equal. Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 10^5 1 <= k <= 10^5","solution":"def min_operations(nums, k): Returns the minimum number of operations required to make all elements of \'nums\' equal with at most \'k\' operations. # If k = 0, we can\'t do any operations, so if elements are not equal, return inf (impossible case) if k == 0: return float(\'inf\') # Sort the nums array nums.sort() # Initialize variables n = len(nums) median = nums[n // 2] # Median element in the sorted array # Calculate the total increments and decrements to make all elements equal to the median total_operations = sum(abs(median - num) for num in nums) # If we have fewer operations than or equal the allowed k, it\'s our answer. if total_operations <= k: return total_operations # Otherwise, it\'s not possible within \'k\' operations return -1"},{"question":"An array of integers is given as input. Write a program to find the maximum difference between any two elements in the array such that the larger element appears after the smaller element. -----Input----- The first line contains an integer T, the total number of test cases. Each test case consists of two lines. The first line contains an integer N, the number of elements in the array. The second line contains N integers separated by spaces. -----Output----- For each test case, display the maximum difference for the particular array in a new line. If no such pair exists, return -1. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ Array elements ≤ 100000 -----Example----- Input 2 6 7 1 5 3 6 4 5 8 9 5 6 3 Output 5 1","solution":"def max_difference(arr): Finds the maximum difference between two elements such that the larger element appears after the smaller element. Parameters: arr (list of int): The input array of integers. Returns: int: The maximum difference, or -1 if no such pair exists. if not arr or len(arr) < 2: return -1 min_element = arr[0] max_diff = -1 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) else: min_element = arr[i] return max_diff def solve(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(max_difference(arr)) return results"},{"question":"Given an array of integers, write a function `maxProductSubarray(nums) or max_product_subarray(nums) or maxProductSubarr(nums) ...` (depending on the language) that finds the contiguous subarray (containing at least one number) which has the largest product and returns that product. Examples: ``` maxProductSubarray([2, 3, -2, 4]) === 6 maxProductSubarray([-2, 0, -1]) === 0 maxProductSubarray([-2, 3, -4]) === 24 ```","solution":"def max_product_subarray(nums): Returns the maximum product of a contiguous subarray. if not nums: return 0 max_product = current_max = current_min = nums[0] for num in nums[1:]: # If current number is negative, swap max and min if num < 0: current_max, current_min = current_min, current_max current_max = max(num, current_max * num) current_min = min(num, current_min * num) max_product = max(max_product, current_max) return max_product"},{"question":"You have a collection of books, and each book has a title (string), author (string), and number of pages (integer). You need to create a program that manages this collection of books, allowing you to perform various operations such as adding a book, removing a book, searching for books by author, and sorting books by the number of pages. Here is the blueprint of the `Book` class you should implement: ```Python class Book: def __init__(self, title, author, pages): self.title = title self.author = author self.pages = pages def __str__(self): return f\\"{self.title} by {self.author}, {self.pages} pages\\" ``` You also need to implement the `BookCollection` class that manages a collection of books. The `BookCollection` class should have the following methods: 1. `add_book(self, book)`: Adds a new book to the collection. 2. `remove_book(self, title)`: Removes a book from the collection by its title. Returns `True` if the book was found and removed, `False` otherwise. 3. `search_by_author(self, author)`: Returns a list of books by the specified author. 4. `sort_by_pages(self)`: Returns a list of books sorted by the number of pages in ascending order. Here is the skeleton code of the `BookCollection` class: ```Python class BookCollection: def __init__(self): self.books = [] def add_book(self, book): pass def remove_book(self, title): pass def search_by_author(self, author): pass def sort_by_pages(self): pass ``` Your task is to implement the `add_book`, `remove_book`, `search_by_author`, and `sort_by_pages` methods in the `BookCollection` class. **Example Usage:** ```Python # Create some books book1 = Book(\\"The Catcher in the Rye\\", \\"J.D. Salinger\\", 214) book2 = Book(\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 281) book3 = Book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 180) book4 = Book(\\"1984\\", \\"George Orwell\\", 328) # Create a book collection and add the books to it collection = BookCollection() collection.add_book(book1) collection.add_book(book2) collection.add_book(book3) collection.add_book(book4) # Search for books by author print(\\"Books by George Orwell:\\", collection.search_by_author(\\"George Orwell\\")) # Remove a book by title removed = collection.remove_book(\\"The Great Gatsby\\") print(\\"The Great Gatsby removed:\\", removed) # Sort books by the number of pages sorted_books = collection.sort_by_pages() print(\\"Books sorted by page numbers:\\") for book in sorted_books: print(book) ``` The output should be similar to: ``` Books by George Orwell: [\'1984 by George Orwell, 328 pages\'] The Great Gatsby removed: True Books sorted by page numbers: The Great Gatsby by F. Scott Fitzgerald, 180 pages The Catcher in the Rye by J.D. Salinger, 214 pages To Kill a Mockingbird by Harper Lee, 281 pages 1984 by George Orwell, 328 pages ``` Ensure your implementation adheres to this format and provides the correct results for the example usage.","solution":"# Define the Book class class Book: def __init__(self, title, author, pages): self.title = title self.author = author self.pages = pages def __str__(self): return f\\"{self.title} by {self.author}, {self.pages} pages\\" # Define the BookCollection class class BookCollection: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def remove_book(self, title): for book in self.books: if book.title == title: self.books.remove(book) return True return False def search_by_author(self, author): return [str(book) for book in self.books if book.author == author] def sort_by_pages(self): return sorted(self.books, key=lambda book: book.pages)"},{"question":"A teacher wants to create a study schedule for students preparing for their exams. Each student has a different number of subjects, and the teacher wants you to help generate their study schedules. For each student, the schedule should follow a pattern based on the number of subjects. -----Input:----- - First-line will contain N, the number of students. Then the input follows. - Each student input is provided in a single line containing one integer S, representing the number of subjects the student is preparing for. -----Output:----- For each student, generate and output the study schedule. Each line in the schedule represents a study day, and subjects should be numbered from 1 to S. The pattern for day i is that the i^{th} subject is always studied first, followed by the rest of the subjects in increasing order. -----Constraints----- - 1 leq N leq 100 - 1 leq S leq 50 -----Sample Input:----- 3 2 3 4 -----Sample Output:----- 1 2 2 1 1 2 3 2 3 1 3 1 2 1 2 3 4 2 3 4 1 3 4 1 2 4 1 2 3 -----EXPLANATION:----- For each student, the subjects are listed on different days in a shifted order where the subject corresponding to the day number is listed first. This helps in ensuring that every subject is prioritized on at least one day.","solution":"def generate_study_schedule(N, subjects): Generate study schedules for N students based on the number of subjects provided for each student. N : int : number of students subjects : List[int] : list of \'S\' values representing the number of subjects for each student Returns a list of strings where each string represents the study schedule of a student. schedules = [] for S in subjects: schedule = [] for i in range(1, S + 1): day_schedule = list(range(i, S + 1)) + list(range(1, i)) schedule.append(\\" \\".join(map(str, day_schedule))) schedules.extend(schedule) return schedules"},{"question":"Lauren loves playing with sequences of numbers. She has a sequence of integers and wants to perform a special operation called \\"dominance swapping\\" to maximize the sum of the sequence. A dominance swap allows Lauren to pick any two elements in the sequence and swap them only if the element picked from the left side is greater than or equal to the element picked from the right side. She can perform as many dominance swaps as she wants. Given a sequence of integers, help Lauren find the maximum possible sum of the sequence after performing any number of dominance swaps. Lauren\'s sequence may contain negative numbers, and swapping should be optimized to increase the sum as much as possible. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of the sequence. -----Output----- Output the only integer, the maximum possible sum of the sequence after performing any number of dominance swaps. -----Examples----- Input 5 -1 -2 3 4 5 Output 9 Input 6 -10 -10 -10 5 5 5 Output 5 Input 4 1 2 3 4 Output 10 Note: In the first sample test, you can swap -1 with 5 and -2 with 4 to get the sequence [5, 4, 3, -2, -1]. The sum is 9. In the second sample test, you can swap all negative values with positive ones to get [5, 5, 5, -10, -10, -10]. The highest sum is achieved with the first three positive values. In the third sample test, the sequence [1, 2, 3, 4] already has the maximum sum possible without swaps.","solution":"def max_sum_after_dominance_swaps(n, sequence): Returns the maximum possible sum after performing any number of dominance swaps. # Sort the sequence in descending order sorted_sequence = sorted(sequence, reverse=True) # The maximum sum will be the sum of the positive values (or all values if all are negative). maximum_sum = sum(x for x in sorted_sequence if x > 0) # If the array has no positive numbers, we sum the least negative ones (equivalent of highest in a sorted list) if maximum_sum == 0: maximum_sum = sorted_sequence[0] return maximum_sum"},{"question":"You are given a matrix with n rows and m columns, where each cell contains a non-negative integer indicating the height at that point. You can move left, right, up, or down from any cell. Your goal is to find the length of the longest path such that each move is to a cell with a strictly higher height than the current cell. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the matrix. Each of the next n lines contains m integers. Each integer is the height at that cell (0 le height le 10^4). -----Output----- Print the length of the longest path. -----Example----- Input 4 4 9 9 4 9 6 6 8 6 2 1 1 7 7 6 9 7 Output 4 -----Note----- The longest path starts at elevation 2, moves to 6, then 7, then 9.","solution":"def longest_increasing_path(matrix): if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) dp = [[-1] * m for _ in range(n)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] length = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and matrix[nx][ny] > matrix[x][y]: length = max(length, 1 + dfs(nx, ny)) dp[x][y] = length return length result = 0 for i in range(n): for j in range(m): result = max(result, dfs(i, j)) return result"},{"question":"Write a function that takes an integer n and returns a string representing the number in \\"FizzBuzz\\" format. Rules: The function should accept an integer n as its input. For multiples of three, the string should contain \\"Fizz\\" instead of the number. For multiples of five, the string should contain \\"Buzz\\" instead of the number. For multiples of both three and five, the string should contain \\"FizzBuzz\\" instead of the number. If the number is not a multiple of three or five, the function should return the number as a string. Examples: input: 3 output: \\"Fizz\\" input: 5 output: \\"Buzz\\" input: 15 output: \\"FizzBuzz\\" input: 7 output: \\"7\\" Note: The function should return the output for only the single input number n, not for a range of numbers.","solution":"def fizz_buzz(n): Returns a string representing the number in \\"FizzBuzz\\" format. if n % 3 == 0 and n % 5 == 0: return \\"FizzBuzz\\" elif n % 3 == 0: return \\"Fizz\\" elif n % 5 == 0: return \\"Buzz\\" else: return str(n)"},{"question":"A delivery company wants to optimize its parcel sorting process. The company operates a series of sorting hubs, each handling a specific number of parcels per day. Each hub works independently and can process a fixed number of parcels per day, regardless of the backlog or availability of parcels. The company aims to route a certain number of parcels, P, through the hubs in exactly D days. The hubs operate optimally if each hub handles an equal number of parcels per day. To minimize costs and complexity, the company wishes to utilize the smallest number of hubs. Given the number of parcels, P, and the number of days, D, compute the smallest number of hubs required such that all the parcels are routed within D days, ensuring each hub handles an equal number of parcels per day. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains two space-separated integers P (number of parcels) and D (number of days). -----Output----- For each test case, print a single line containing one integer — the smallest required number of hubs. -----Constraints----- - 1 le T le 50 - 1 le P, D le 10^9 -----Example Input----- 3 10 5 1000 10 15 2 -----Example Output----- 2 100 8 -----Explanation----- Example case 1: To route 10 parcels in 5 days, the company can use 2 hubs, each handling 2 parcels per day. Example case 2: To route 1000 parcels in 10 days, the company needs 100 hubs, each handling 1 parcel per day. Example case 3: To route 15 parcels in 2 days, the company needs at least 8 hubs. In this setup, 7 hubs handle 2 parcels per day, and the remaining hub handles 1 parcel per day, ensuring an equal distribution of parcels processed over the given days.","solution":"def smallest_number_of_hubs(T, test_cases): results = [] for P, D in test_cases: hubs = (P + D - 1) // D # Ceiling division results.append(hubs) return results # Example usage: # T = 3 # test_cases = [(10, 5), (1000, 10), (15, 2)] # print(smallest_number_of_hubs(T, test_cases)) # Output: [2, 100, 8]"},{"question":"You are given a grid of size m x n representing a map where: - \'1\' represents land - \'0\' represents water An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You can assume all four edges of the grid are all surrounded by water. Write a function to find the shortest bridge between any two islands. A bridge can only be built by flipping \'0\'s to \'1\'s and must be built between two different islands. The function should return the minimum number of 0\'s that need to be flipped to connect the two islands. Example 1: Input: grid = [ [0,1], [1,0] ] Output: 1 Explanation: We flip the 0 at (0,0) to 1 to connect the two islands. Example 2: Input: grid = [ [0,1,0], [0,0,0], [0,0,1] ] Output: 2 Explanation: We flip the 0 at (1,1) and (1,2) to connect the two islands. Example 3: Input: grid = [ [1,1,1,1,1], [1,0,0,0,1], [1,0,1,0,1], [1,0,0,0,1], [1,1,1,1,1] ] Output: 1 Constraints: 1. m == grid.length 2. n == grid[0].length 3. 2 <= m, n <= 100 4. grid[i][j] is either 0 or 1 5. There are at least two islands in the grid","solution":"from collections import deque def shortestBridge(grid): def dfs(x, y): island.append((x, y)) grid[x][y] = -1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1: dfs(nx, ny) def bfs(): q = deque(island) distance = 0 while q: for _ in range(len(q)): x, y = q.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n: if grid[nx][ny] == 1: return distance if grid[nx][ny] == 0: grid[nx][ny] = -1 q.append((nx, ny)) distance += 1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] island = [] m, n = len(grid), len(grid[0]) # Find and mark the first island for i in range(m): for j in range(n): if grid[i][j] == 1: dfs(i, j) break if island: break return bfs()"},{"question":"# Task Tara is setting up a new challenge in her multiplayer game. At the end of each level, the player is given a certain number of coins as a reward. In each level, the number of coins a player receives follows a specific pattern. Tara wants you to help her figure out the total number of coins a player will have after `n` levels. The pattern of the number of coins received per level is as follows: - At level `1`, the player receives `1` coin. - At level `2`, the player receives `2` coins. - At level `3`, the player receives `4` coins. - At level `4`, the player receives `8` coins. - For every subsequent level, the number of coins received doubles compared to the previous level. Your task is to calculate the total number of coins a player will have after completing `n` levels. # Example For `n = 3`, the output should be `7`. At level 1, the player receives 1 coin. At level 2, the player receives 2 coins. At level 3, the player receives 4 coins. So, the total number of coins after 3 levels is `1 + 2 + 4 = 7`. For `n = 5`, the output should be `31`. At level 1, the player receives 1 coin. At level 2, the player receives 2 coins. At level 3, the player receives 4 coins. At level 4, the player receives 8 coins. At level 5, the player receives 16 coins. So, the total number of coins after 5 levels is `1 + 2 + 4 + 8 + 16 = 31`. # Input/Output The number of levels `n` completed by the player. - `[input]` integer `n` `1 <= n <= 30` - `[output]` an integer The total number of coins the player has after `n` levels.","solution":"def total_coins(n): Calculate the total number of coins a player will have after completing `n` levels. The number of coins at each level follows the pattern where it doubles each level. Level 1 has 1 coin, level 2 has 2 coins, level 3 has 4 coins, and so on. Args: n (int): The number of levels completed by the player. Returns: int: The total number of coins after `n` levels. total = 0 coins = 1 for level in range(1, n + 1): total += coins coins *= 2 return total"},{"question":"You\'ve been hired by a toy company to design a pathfinding algorithm for a robot toy. The robot toy will navigate through a grid where some cells are obstacles and others are open spaces. The robot can only move up, down, left, or right and cannot move diagonally. Your task is to determine the minimum number of moves required for the robot to get from its starting position to the target position. If it is not possible to reach the target position, return -1. # Input You are given a 2D grid `board` representing the grid where the robot will move. It is provided as an array of strings in the following format: - `\'.\'` represents an open cell where the robot can move. - `\'#\'` represents an obstacle cell where the robot cannot move. - `\'S\'` represents the starting position of the robot. - `\'T\'` represents the target position the robot needs to reach. # Output Write a function `min_moves` that returns the minimum number of moves required for the robot to reach the target position. If it is not possible to reach the target position, return -1. # Example ```python def min_moves(board): pass # Example input board = [ \\"S..#\\", \\".#..\\", \\"...T\\", \\"..\\" ] # Example output print(min_moves(board)) # Output: 5 ``` # Constraints - The grid will always contain exactly one `\'S\'` and exactly one `\'T\'`. - The grid will be rectangular with dimensions up to 100x100. - The robot can only move up, down, left, or right and cannot pass through obstacles (`\'#\'`). # Note Develop an algorithm that efficiently finds the shortest path from the starting position to the target position using a suitable pathfinding technique, such as Breadth-First Search (BFS).","solution":"from collections import deque def min_moves(board): rows = len(board) cols = len(board[0]) # Find the start and target positions start = None target = None for r in range(rows): for c in range(cols): if board[r][c] == \'S\': start = (r, c) elif board[r][c] == \'T\': target = (r, c) # Using BFS to find the shortest path def bfs(start, target): queue = deque([(start, 0)]) # ((row, col), distance) visited = set([start]) while queue: (r, c), dist = queue.popleft() if (r, c) == target: return dist # Explore the four possible directions for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and board[nr][nc] != \'#\' and (nr, nc) not in visited: visited.add((nr, nc)) queue.append(((nr, nc), dist + 1)) return -1 return bfs(start, target)"},{"question":"Checkerboard Pattern You will receive an even integer n (>= 4) and your task is to draw a checkerboard pattern using the characters: \'#\' and \' \' (space). The pattern should alternate between the characters, starting with \'#\' in the top-left corner. Each row should be separated with \'n\'. For example: x(4) => # # # # # # # # x(6) => # # # # # # # # # # # # # # # # # # Series: ASCII Fun ASCII Fun #5: Checkerboard Pattern ASCII Fun #6: Zigzag Display ASCII Fun #7: Spiral Oddities ASCII Fun #8: Border Frame","solution":"def checkerboard_pattern(n): Generates a checkerboard pattern of size n x n using \'#\' and \' \' starting with \'#\'. Parameters: n : int : the size of the checkerboard (should be even and >= 4) Returns: str : a string representing the checkerboard pattern with rows separated by \'n\' pattern = \\"\\" for i in range(n): row = \\"\\" for j in range(n): if (i + j) % 2 == 0: row += \\"#\\" else: row += \\" \\" pattern += row + \\"n\\" return pattern.strip()"},{"question":"You are given a grid of size (N times M) with non-negative integers in each cell. You can move from any cell to any of its 4 direct neighbors (up, down, left, right). You need to find a path from the top-left corner of the grid to the bottom-right corner such that the sum of integers along the path is minimized. You are required to output the minimum sum of such a path. -----Input:----- - The first line of input contains a single integer (T) denoting the number of test cases. The description of (T) test cases follows. - The first line of each test case contains two space-separated integers (N) and (M), the number of rows and columns in the grid. - The next (N) lines each contain (M) space-separated integers representing the grid. -----Output:----- For each test case, print a single integer that is the minimum sum of integers along the path from the top-left corner to the bottom-right corner of the grid. -----Constraints----- - (1 le T le 1000) - (1 le N, M le 100) - (0 le text{{Grid value}} le 10^3) -----Sample Input:----- 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 -----Sample Output:----- 7 3 -----Explanation:----- In the first test case, the path is 1 → 3 → 1 → 1 → 1 → 1 with sum = 7. In the second test case, the path is 1 → 1 → 1 with sum = 3.","solution":"import heapq def min_path_sum(grid): N, M = len(grid), len(grid[0]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] min_heap = [(grid[0][0], 0, 0)] visited = set() while min_heap: current_sum, x, y = heapq.heappop(min_heap) if (x, y) == (N-1, M-1): return current_sum if (x, y) in visited: continue visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited: heapq.heappush(min_heap, (current_sum + grid[nx][ny], nx, ny)) def solve_min_path_sum(test_cases): results = [] for grid in test_cases: results.append(min_path_sum(grid)) return results # Example usage: def process_input(input_string): input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, input_lines[index].split()) grid = [] for i in range(N): grid.append(list(map(int, input_lines[index + 1 + i].split()))) test_cases.append(grid) index += N + 1 return test_cases input_string = 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 1 1 test_cases = process_input(input_string) print(solve_min_path_sum(test_cases))"},{"question":"Write a function that takes a list of integers as input, where some of the elements might be negative, and returns a list of their absolute values sorted in ascending order. # Example ```python absolute_sorted([-3, -1, -4, 2, 0, 1]) ==> [0, 1, 1, 2, 3, 4] ```","solution":"def absolute_sorted(lst): Takes a list of integers, returns a list of their absolute values sorted in ascending order. Parameters: lst (list): List of integers which might contain negative numbers. Returns: List of integers with absolute values sorted in ascending order. return sorted([abs(x) for x in lst])"},{"question":"Given an array of integers, your task is to determine the length of the longest arithmetic subsequence. An arithmetic subsequence of an array is a subsequence of array elements in which the difference between any two consecutive elements is the same. -----Input----- - The first line contains an integer N (1 ≤ N ≤ 2,000) indicating the number of elements in the array. - The second line contains N space-separated integers A_1, A_2, ..., A_N (1 ≤ A_i ≤ 10^4). -----Output----- Print a single integer representing the length of the longest arithmetic subsequence in the given array. -----Example Input----- 6 3 6 9 12 15 18 -----Example Output----- 6 -----Explanation----- Example case: The entire array forms an arithmetic subsequence where every consecutive element differs by 3.","solution":"def longest_arith_seq_length(A): if not A: return 0 n = len(A) dp = [{} for _ in range(n)] max_length = 1 for i in range(1, n): for j in range(i): diff = A[i] - A[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 # Start a new sequence with at least two elements (A[j], A[i]) max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"Create a function that takes an integer representing the amount of seconds and converts it into a string that states how many hours, minutes, and seconds comprise that amount of time. For example, if the input is 3665 seconds, the function should return \\"1 hour, 1 minute and 5 seconds\\". **Rules:** - The function should correctly handle singular and plural forms (i.e., \\"1 hour\\" vs. \\"2 hours\\"). - If the number of hours, minutes, or seconds is zero, it should not include that element in the output. - The final conjunction should be \\"and\\" unless there are no hours, in which case it should just be separated by commas. **Examples:** ```python format_duration(3665) -> \\"1 hour, 1 minute and 5 seconds\\" format_duration(7325) -> \\"2 hours, 2 minutes and 5 seconds\\" format_duration(59) -> \\"59 seconds\\" format_duration(3600) -> \\"1 hour\\" ``` **Hints:** - You may find the modulo operator (%) and integer division (//) useful in breaking down the total seconds into hours, minutes, and seconds.","solution":"def format_duration(seconds): Convert a given amount of seconds to a string representing hours, minutes, and seconds. hours = seconds // 3600 minutes = (seconds % 3600) // 60 seconds = seconds % 60 parts = [] if hours > 0: parts.append(f\\"{hours} hour\\" + (\\"s\\" if hours > 1 else \\"\\")) if minutes > 0: parts.append(f\\"{minutes} minute\\" + (\\"s\\" if minutes > 1 else \\"\\")) if seconds > 0 or not parts: parts.append(f\\"{seconds} second\\" + (\\"s\\" if seconds != 1 else \\"\\")) if len(parts) > 1: return f\\"{\', \'.join(parts[:-1])} and {parts[-1]}\\" return parts[0]"},{"question":"Lilly is a software engineer working on a new string manipulation library. One of the functionalities she needs to implement is a function that checks the balance and proper nesting of a specific type of brackets used in a particular scientific notation. The notation uses three types of brackets: round brackets \'()\', square brackets \'[]\', and curly brackets \'{}\'. The rules for proper nesting and balance are as follows: 1. Every opening bracket must have a corresponding closing bracket of the same type. 2. Brackets must be properly nested, meaning that an opening bracket must be closed by its corresponding closing bracket in the correct order. For example, the strings \\"([]{})\\" and \\"[{()}]\\" are considered properly nested and balanced, while the strings \\"({[)]})\\", \\"[(])\\", and \\"{[}\\" are not. Given a list of strings, Lilly needs to determine whether each string is properly nested and balanced according to these rules. If a string is properly nested and balanced, she should return \\"YES\\"; otherwise, \\"NO\\". Implement a function to help Lilly with this task. -----Input----- The input will consist of an integer N, representing the number of strings to evaluate. Then, N strings follow, each on a single line, representing the strings to be checked for proper nesting and balance. -----Output----- For each string, output \\"YES\\" if the string is properly nested and balanced, otherwise \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ The length of any string ≤ 1000 -----Example----- Input: 3 ([]{}) [(]) [{}] Output: YES NO YES","solution":"def is_balanced(s): Check if the input string s is properly nested and balanced. stack = [] opening = \'([{\' closing = \')]}\' matching = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in opening: stack.append(char) elif char in closing: if not stack or stack.pop() != matching[char]: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\" def check_balanced_brackets(n, strings): Given a number of strings, determine for each string if it is balanced and properly nested. results = [] for s in strings: results.append(is_balanced(s)) return results"},{"question":"Write a function that takes a string and counts the number of alphanumeric characters and returns the count as a dictionary with keys \\"letters\\" and \\"digits\\". ```python count_alpha_numeric(\\"Hello World 123!\\") # {\'letters\': 10, \'digits\': 3} count_alpha_numeric(\\"A1b2 C3!\\") # {\'letters\': 3, \'digits\': 3} count_alpha_numeric(\\"!@#%^&*()\\") # {\'letters\': 0, \'digits\': 0} ``` ``` haskell countAlphaNumeric \\"Hello World 123!\\" `shouldBe` fromList [(\\"letters\\", 10), (\\"digits\\", 3)] countAlphaNumeric \\"A1b2 C3!\\" `shouldBe` fromList [(\\"letters\\", 3), (\\"digits\\", 3)] countAlphaNumeric \\"!@#%^&*()\\" `shouldBe` fromList [(\\"letters\\", 0), (\\"digits\\", 0)] ``` If the input string contains no alphanumeric characters, the function should return a dictionary with zero counts for both letters and digits.","solution":"def count_alpha_numeric(s): Counts the number of alphanumeric characters in the string. Returns a dictionary with counts of letters and digits. Parameters: s (str): Input string Returns: dict: Dictionary with keys \'letters\' and \'digits\' counts = {\\"letters\\": 0, \\"digits\\": 0} for char in s: if char.isalpha(): counts[\\"letters\\"] += 1 elif char.isdigit(): counts[\\"digits\\"] += 1 return counts"},{"question":"Your task is to develop a custom sorting algorithm that can sort an array of integers in a specific manner. The custom sorting criterion is as follows: - Numbers divisible by 3 should come first (sorted in ascending order). - Numbers divisible by 5 but not by 3 should come next (sorted in descending order). - Numbers neither divisible by 3 nor by 5 should come last (sorted in ascending order). You will receive an unsorted array of integers as input, and you need to implement the function `custom_sort(arr)` which returns a new list with the elements sorted according to the aforementioned rules. Constraints: - The input array will have at least one element and at most 1000 elements. - Each element in the input array will be an integer in the range of -10^6 to 10^6. Function Signature: ```python def custom_sort(arr: List[int]) -> List[int]: pass ``` Examples: ```python # Example 1 input_arr = [3, 1, 2, 5, 6, 10, 15, 7] output_arr = custom_sort(input_arr) # The expected output will be [3, 6, 15, 10, 5, 1, 2, 7] # Example 2 input_arr = [30, 20, 18, 14, 9, 5, 2] output_arr = custom_sort(input_arr) # The expected output will be [9, 18, 30, 20, 5, 2, 14] ``` Explanation: 1. Numbers divisible by 3: 3, 6, and 15 (sorted in ascending order: 3, 6, 15). 2. Numbers divisible by 5 but not by 3: 5 and 10 (sorted in descending order: 10, 5). 3. Numbers neither divisible by 3 nor by 5: 1, 2, and 7 (sorted in ascending order: 1, 2, 7).","solution":"from typing import List def custom_sort(arr: List[int]) -> List[int]: divisible_3 = sorted([x for x in arr if x % 3 == 0]) divisible_5_not_3 = sorted([x for x in arr if x % 5 == 0 and x % 3 != 0], reverse=True) neither = sorted([x for x in arr if x % 3 != 0 and x % 5 != 0]) return divisible_3 + divisible_5_not_3 + neither"},{"question":"Design and implement a class `PriorityQueueWithLimitedRepeats` that mimics the behavior of a priority queue but limits the number of times a particular element can be present in the queue. Each element can only appear a specified number of times. The methods you need to implement are: - `PriorityQueueWithLimitedRepeats(int k)`: Initializes the object with the maximum number `k` of times any element can be present in the queue. - `void insert(int val)`: Inserts the given positive integer `val` into the queue, only if the number of occurrences of `val` in the queue is less than `k`. - `int pop()`: Removes and returns the highest-priority element from the queue. If the queue is empty, return `-1`. A higher value signifies a higher priority in this queue. Consider the values as unique identifiers, and there are no secondary criteria for prioritization beyond the value itself. Example: Input: [\\"PriorityQueueWithLimitedRepeats\\",\\"insert\\",\\"insert\\",\\"insert\\",\\"insert\\",\\"insert\\",\\"pop\\",\\"insert\\",\\"pop\\",\\"pop\\",\\"pop\\",\\"pop\\",\\"pop\\",\\"insert\\"] [[2],[4],[3],[5],[5],[6],[],[6],[],[],[],[],[],[2]] Output: [null,null,null,null,null,null,6,null,5,5,4,3,-1,null] Explanation: PriorityQueueWithLimitedRepeats pq = PriorityQueueWithLimitedRepeats(2); // Initialize with max 2 occurrences pq.insert(4); // Queue is now: [4] pq.insert(3); // Queue is now: [3, 4] pq.insert(5); // Queue is now: [3, 4, 5] pq.insert(5); // Queue is now: [3, 4, 5, 5] pq.insert(6); // Queue is now: [3, 4, 5, 5, 6] pq.pop(); // Returns 6. Queue is now: [3, 4, 5, 5] pq.insert(6); // Queue is now: [3, 4, 5, 5, 6] pq.pop(); // Returns 6. Queue is now: [3, 4, 5, 5] pq.pop(); // Returns 5. Queue is now: [3, 4, 5] pq.pop(); // Returns 5. Queue is now: [3, 4] pq.pop(); // Returns 4. Queue is now: [3] pq.pop(); // Returns 3. Queue is now: [] pq.pop(); // Returns -1. Queue is empty pq.insert(2); // Queue is now: [2] Constraints: 1 <= k <= 1000 1 <= val <= 10000 At most 100000 calls will be made to the insert and pop methods.","solution":"import heapq from collections import defaultdict class PriorityQueueWithLimitedRepeats: def __init__(self, k): Initializes the object with the maximum number `k` of times any element can be present in the queue. self.k = k self.max_heap = [] self.val_count = defaultdict(int) def insert(self, val): Inserts the given positive integer `val` into the queue, only if the number of occurrences of `val` in the queue is less than `k`. if self.val_count[val] < self.k: heapq.heappush(self.max_heap, -val) self.val_count[val] += 1 def pop(self): Removes and returns the highest-priority element from the queue. If the queue is empty, return `-1`. while self.max_heap: val = -heapq.heappop(self.max_heap) if self.val_count[val] > 0: self.val_count[val] -= 1 return val return -1"},{"question":"Write a function that determines if a given string is a valid abbreviation of another string. A string s is an abbreviation of t if it can be formed by deleting some characters (possibly zero) from t without rearranging the remaining characters. The function should take two strings s and t and return a boolean indicating whether s is a valid abbreviation of t. Constraints: - The lengths of s and t will not exceed 1000 characters. - The strings contain only lowercase English letters. Example: ```python def valid_abbreviation(s, t): # Your code here # Examples: print(valid_abbreviation(\\"abc\\", \\"aabbcc\\")) # True print(valid_abbreviation(\\"abc\\", \\"acb\\")) # False print(valid_abbreviation(\\"\\", \\"abc\\")) # True print(valid_abbreviation(\\"abc\\", \\"abc\\")) # True print(valid_abbreviation(\\"a\\", \\"b\\")) # False ``` This function should return `True` if s can be formed by deleting some characters from t, and `False` otherwise.","solution":"def valid_abbreviation(s, t): Determines if s is a valid abbreviation of t. Parameters: s (str): The potential abbreviation string. t (str): The original string. Returns: bool: True if s is a valid abbreviation of t, False otherwise. i, j = 0, 0 while i < len(s) and j < len(t): if s[i] == t[j]: i += 1 j += 1 return i == len(s)"},{"question":"Write a function to convert a string into \\"Pig Latin\\". The Pig Latin string is generated by transforming each word of the English language to its corresponding Pig Latin form. The transformation rules are as follows: 1. If the word starts with a vowel (a, e, i, o, u), \\"way\\" is appended to the end of the word. For example, the word \\"apple\\" becomes \\"appleway\\". 2. If the word starts with a consonant, the consonant cluster (consonants before the first vowel) is moved to the end of the word, followed by \\"ay\\". For example, the word \\"banana\\" becomes \\"ananabay\\". Special rules: - If the word is capitalized, the capitalization should be retained in the Pig Latin form. - If there is punctuation at the end of the word, it should be retained in the Pig Latin form. You need to implement a function `convert_to_pig_latin(sentence)` which takes a sentence and converts each word to its Pig Latin form. **Function Signature:** ```python def convert_to_pig_latin(sentence: str) -> str: ``` **Input:** - sentence (str): A sentence consisting of words separated by spaces. The sentence will consist of alphabetic characters and punctuation only. **Output:** - (str): A string where each word from the input sentence is converted to its Pig Latin form. **Example:** ```python # Example sentence = \\"Hello world!\\" # Output: \\"Ellohay orldway!\\" sentence = \\"I am learning Pig Latin.\\" # Output: \\"Iway amway earninglay Igpay Atinlay.\\" ``` **Note:** - You should preserve the spaces between words. - The punctuation remains attached to the corresponding word after transformation. Implement the `convert_to_pig_latin` function to fulfill the above requirements.","solution":"def convert_to_pig_latin(sentence: str) -> str: def word_to_pig_latin(word): vowels = \'aeiouAEIOU\' punctuation = \\"\\" # Check if there\'s punctuation at the end if word[-1].isalpha() is False: punctuation = word[-1] word = word[:-1] # Rule for words starting with a vowel if word[0] in vowels: pig_word = word + \\"way\\" else: # Find the first vowel for i, char in enumerate(word): if char in vowels: pig_word = word[i:] + word[:i] + \\"ay\\" break else: pig_word = word + \\"ay\\" # Preserve capitalization if word[0].isupper(): pig_word = pig_word.capitalize() # Adding punctuation back pig_word += punctuation return pig_word words = sentence.split() pig_latin_words = [word_to_pig_latin(word) for word in words] return \' \'.join(pig_latin_words)"},{"question":"You are given a string S of length N consisting of lowercase English letters. You have to perform two types of queries on this string: 1. Update Query: Change the character at a specific position to a given character. 2. Range Query: Determine the number of distinct characters in a substring of the string. Write a program to process these queries efficiently. -----Input----- - The first line contains two integers N and Q (1 ≤ N ≤ 10^5, 1 ≤ Q ≤ 10^5), denoting the length of the string and the number of queries respectively. - The second line contains the string S. - The next Q lines contain the following types of queries: - `1 i c`: An update query, which means change the character at the i-th position (1-based index) to c. - `2 l r`: A range query, which means determine the number of distinct characters in the substring S[l...r] (1-based inclusive). -----Output----- For each range query, output a single integer ― the number of distinct characters in the specified substring. -----Constraints----- - The string S consists of lowercase English letters (\'a\' to \'z\'). -----Example Input----- 8 5 abacabad 2 1 4 2 1 8 1 3 e 2 1 4 2 1 8 -----Example Output----- 3 4 4 5 -----Explanation----- Example case 1: - The substring S[1...4] is \\"abac\\", which has 3 distinct characters: \'a\', \'b\', and \'c\'. - The whole string \\"abacabad\\" has 4 distinct characters: \'a\', \'b\', \'c\', and \'d\'. - After updating the 3rd character to \'e\', the string becomes \\"abeacabad\\". - Now, S[1...4] is \\"abea\\", which has 4 distinct characters: \'a\', \'b\', \'e\', and \'c\'. - The updated whole string \\"abeacabad\\" has 5 distinct characters: \'a\', \'b\', \'e\', \'c\', and \'d\'.","solution":"class DistinctCharacterCounter: def __init__(self, S): self.S = list(S) self.size = len(S) def update(self, i, c): self.S[i-1] = c def range_query(self, l, r): return len(set(self.S[l-1:r])) def process_queries(N, Q, S, queries): dcc = DistinctCharacterCounter(S) results = [] for query in queries: if query[0] == 1: _, i, c = query dcc.update(i, c) elif query[0] == 2: _, l, r = query results.append(dcc.range_query(l, r)) return results"},{"question":"# Maze Solver You are given a maze represented by a two-dimensional grid of characters. Each character can be one of the following: - `\'S\'`: Starting point - `\'E\'`: Ending point - `\'1\'`: A wall or an obstacle - `\'0\'`: A walkable path You need to determine whether there is a path from the starting point to the ending point only moving up, down, left, or right. **Input:** - A two-dimensional list of characters representing the maze. **Output:** - Return `True` if there is a path from `\'S\'` to `\'E\'`, otherwise return `False`. **Example:** ```python maze = [[\'S\', \'0\', \'1\', \'1\', \'0\'], [\'0\', \'0\', \'1\', \'0\', \'0\'], [\'1\', \'0\', \'1\', \'0\', \'1\'], [\'1\', \'0\', \'0\', \'0\', \'E\'], [\'1\', \'1\', \'1\', \'1\', \'1\']] assert maze_solver(maze) == True ``` **Example 2:** ```python maze = [[\'S\', \'1\', \'1\', \'1\', \'1\'], [\'1\', \'1\', \'1\', \'0\', \'1\'], [\'1\', \'1\', \'1\', \'0\', \'1\'], [\'1\', \'0\', \'0\', \'0\', \'1\'], [\'1\', \'E\', \'1\', \'1\', \'1\']] assert maze_solver(maze) == False ``` **Note:** - Feel free to implement a depth-first search or breadth-first search to solve the problem. - Assume that there is always exactly one \'S\' and one \'E\' in the maze.","solution":"from collections import deque def maze_solver(maze): Determines if there is a path from \'S\' to \'E\' in the given maze. :param maze: List[List[str]], the maze represented as a 2D grid :return: bool, True if there is a path from \'S\' to \'E\', False otherwise rows, cols = len(maze), len(maze[0]) start = None end = None # Find the start and end points for r in range(rows): for c in range(cols): if maze[r][c] == \'S\': start = (r, c) elif maze[r][c] == \'E\': end = (r, c) if not start or not end: return False # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([start]) visited = set(start) while queue: current = queue.popleft() if current == end: return True for direction in directions: next_row = current[0] + direction[0] next_col = current[1] + direction[1] if 0 <= next_row < rows and 0 <= next_col < cols and maze[next_row][next_col] in {\'0\', \'E\'}: next_position = (next_row, next_col) if next_position not in visited: visited.add(next_position) queue.append(next_position) return False"},{"question":"Maze Runner You are tasked with creating a function that helps a mouse navigate through a maze. The maze is represented as a grid of strings, where each string consists of either a space (\' \'), a wall (\'W\'), the mouse\'s location (\'M\'), or the location of cheese (\'C\'). The mouse can move up, down, left, or right, but cannot move through walls. The objective is to determine if there is a path from the mouse\'s starting position to the cheese. Your function should take a single argument, which is a list of strings representing the maze grid, and return True if a path exists from the mouse to the cheese, and False otherwise. # Constraints - The dimensions of the grid will be at least 3x3 and at most 100x100. - There will be exactly one \'M\' and one \'C\' in the grid. - There are no diagonal walls (there is no situation where the mouse can move diagonally between two walls). # Examples In this first example, there is a clear path from the mouse to the cheese, so your function should return True. ``` [ \\"M W \\", \\"W W WWWW \\", \\"W C \\", \\"WWWWWWWWW\\" ] ``` In this second example, there is no path from the mouse to the cheese, so your function should return False. ``` [ \\"M W \\", \\"WWWWWWWW \\", \\"W C \\", \\"WWWWWWWWW\\" ] ``` In this third example, there is a path that goes around the obstacle, so your function should return True. ``` [ \\"M W\\", \\"WW W\\", \\"W W\\", \\"WWWW W\\", \\" CW\\" ] ``` Note: For determining a path, you can use Breadth-First Search (BFS) or Depth-First Search (DFS) algorithms.","solution":"def is_path_to_cheese(maze): def bfs(start, end): queue = [start] visited = set() visited.add(start) while queue: x, y = queue.pop(0) if (x, y) == end: return True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # up, down, left, right nx, ny = x + dx, y + dy if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] != \'W\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False start = None end = None for i in range(len(maze)): for j in range(len(maze[0])): if maze[i][j] == \'M\': start = (i, j) elif maze[i][j] == \'C\': end = (i, j) if not start or not end: return False return bfs(start, end)"},{"question":"Given a string `s` consisting of lowercase letters and digits, return the string with all the letters in ascending order followed by all the digits in ascending order. Example 1: Input: s = \\"d4c3b2a1\\" Output: \\"abcd1234\\" Explanation: Letters are arranged in ascending alphabetical order, and digits are arranged in ascending numerical order. Example 2: Input: s = \\"z2y9x3w1\\" Output: \\"wxyz1239\\" Explanation: Letters are arranged in ascending alphabetical order, and digits are arranged in ascending numerical order. Example 3: Input: s = \\"a1b2c3d4e5\\" Output: \\"abcde12345\\" Explanation: Letters are arranged in ascending alphabetical order, and digits are arranged in ascending numerical order. Constraints: - 1 <= s.length <= 1000 - s contains only lowercase letters and digits.","solution":"def sort_letters_and_digits(s): Given a string s consisting of lowercase letters and digits, return the string with all the letters in ascending order followed by all the digits in ascending order. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) elif char.isalpha(): letters.append(char) sorted_letters = \'\'.join(sorted(letters)) sorted_digits = \'\'.join(sorted(digits)) return sorted_letters + sorted_digits"},{"question":"You are given a grid with `m` rows and `n` columns, where each cell in the grid can either be empty (0) or blocked (1). You want to find the length of the shortest path from the top-left cell (0, 0) to the bottom-right cell (m-1, n-1) while avoiding the blocked cells. You can move up, down, left, or right from a cell at any step. If there is no valid path, return -1. Example 1: Input: grid = [ [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0] ] Output: 9 Explanation: The shortest path is 9 steps long: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4). Example 2: Input: grid = [ [0, 1], [1, 0] ] Output: -1 Explanation: There is no valid path from (0, 0) to (1, 1). Constraints: - grid[i][j] is either 0 or 1. - 1 <= m, n <= 100","solution":"from collections import deque def shortest_path(grid): if grid[0][0] == 1 or grid[-1][-1] == 1: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Write a function that receives a list of integers and a target number. The function should find all unique pairs of integers in the list that add up to the target number. Return the pairs as a list of tuples. Example: ``` find_pairs([1, 3, 2, 2, -1, 0, 5], 4); // should return [(1, 3), (2, 2), (-1, 5)] find_pairs([2, 4, 3, 3, 6], 6); // should return [(2, 4), (3, 3)] find_pairs([1, 5, 7, -1, 5], 6); // should return [(1, 5), (-1, 7)] ```","solution":"def find_pairs(nums, target): Finds all unique pairs of integers in the list that add up to the target number. Parameters: nums (List[int]): List of integers. target (int): Target number. Returns: List[Tuple[int, int]]: List of unique pairs that sum to the target. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) # Ensuring each pair is ordered seen.add(num) return list(pairs)"},{"question":"You have a list of positive integers. Your task is to find two elements in the list whose sum is closest to a given target value. If there are multiple pairs with the same closest sum, return the pair with the smallest first element. If still tied, return the pair with the smallest second element. Return the result as a tuple of two integers. # Input - A list of positive integers `arr` (2 ≤ length of `arr` ≤ 10^5, 1 ≤ arr[i] ≤ 10^9) - A positive integer `target` (1 ≤ target ≤ 2*10^9) # Output - A tuple of two integers which denote the pair whose sum is closest to the target. # Sample Cases Case 1 __Input:__ ```python arr = [10, 22, 28, 29, 30, 40] target = 54 ``` __Output:__ ```python (22, 30) ``` __Explanation:__ The pairs of numbers and their sums are: - (10, 22) -> 32 - (10, 28) -> 38 - (10, 29) -> 39 - (10, 30) -> 40 - (10, 40) -> 50 - (22, 28) -> 50 - (22, 29) -> 51 - (22, 30) -> 52 - (22, 40) -> 62 - (28, 29) -> 57 - (28, 30) -> 58 - (28, 40) -> 68 - (29, 30) -> 59 - (29, 40) -> 69 - (30, 40) -> 70 The pair (22, 30) has the closest sum to 54, so the output is (22, 30). Case 2 __Input:__ ```python arr = [1, 3, 4, 7, 10] target = 15 ``` __Output:__ ```python (4, 10) ``` __Explanation:__ Among all pairs, the pair (4, 10) has the closest sum to 15.","solution":"def closest_pair_to_target(arr, target): Finds two elements in the list \'arr\' whose sum is closest to \'target\'. If multiple pairs have the same closest sum, return the pair with the smallest first element. If still tied, return the pair with the smallest second element. :param arr: List of positive integers :param target: Target sum :return: Tuple of two integers arr.sort() # Sort the array to use two-pointer technique left, right = 0, len(arr) - 1 closest_sum = float(\'inf\') result = (0, 0) while left < right: current_sum = arr[left] + arr[right] if abs(target - current_sum) < abs(target - closest_sum): closest_sum = current_sum result = (arr[left], arr[right]) elif abs(target - current_sum) == abs(target - closest_sum): if arr[left] < result[0] or (arr[left] == result[0] and arr[right] < result[1]): result = (arr[left], arr[right]) if current_sum < target: left += 1 else: right -= 1 return result"},{"question":"Implement a class `StockPriceTracker` that manages the price of a single stock, with the following API: 1. `void update(int timestamp, int price)` – Updates the price of the stock at the given timestamp. 2. `int getCurrentPrice()` – Returns the latest price of the stock. 3. `int getMaxPrice()` – Returns the highest price ever recorded. 4. `int getMinPrice()` – Returns the lowest price ever recorded. 5. `double getAveragePrice()` – Returns the average of all recorded prices. You can assume: - All timestamps are unique and occur in increasing order. - The input will always contain at least one update before any get operations. - Timestamps and prices are positive integers. Example: ```python tracker = StockPriceTracker() tracker.update(1, 100) tracker.update(2, 200) tracker.update(3, 150) assert tracker.getCurrentPrice() == 150 assert tracker.getMaxPrice() == 200 assert tracker.getMinPrice() == 100 assert tracker.getAveragePrice() == 150.0 tracker.update(4, 250) assert tracker.getCurrentPrice() == 250 assert tracker.getMaxPrice() == 250 assert tracker.getMinPrice() == 100 assert tracker.getAveragePrice() == 175.0 ``` Constraints: - The number of `update` operations will be at most 10^6. - The number of `get` operations will be at most 10^6.","solution":"class StockPriceTracker: def __init__(self): self.prices = [] self.timestamps = [] self.current_price = None self.max_price = None self.min_price = None self.total_sum = 0 def update(self, timestamp, price): self.prices.append(price) self.timestamps.append(timestamp) self.current_price = price if self.max_price is None or price > self.max_price: self.max_price = price if self.min_price is None or price < self.min_price: self.min_price = price self.total_sum += price def getCurrentPrice(self): return self.current_price def getMaxPrice(self): return self.max_price def getMinPrice(self): return self.min_price def getAveragePrice(self): return self.total_sum / len(self.prices)"},{"question":"Write a function `transcribe_dna_to_rna()` that takes a string `dna` as input, representing a DNA sequence, and returns its corresponding RNA sequence. In the RNA sequence, replace all occurrences of the nucleotide \'T\' with \'U\'. The function should handle both upper and lower case inputs, maintaining the original case in the output. If the input string is empty, return an empty string. # Example ```python transcribe_dna_to_rna(\\"GATTACA\\") => \\"GAUUACA\\" transcribe_dna_to_rna(\\"gattaca\\") => \\"gauuaca\\" transcribe_dna_to_rna(\\"\\") => \\"\\" transcribe_dna_to_rna(\\"ACGT\\") => \\"ACGU\\" ```","solution":"def transcribe_dna_to_rna(dna): Transcribes a DNA sequence to its corresponding RNA sequence. Parameters: dna (str): A string representation of the DNA sequence. Returns: str: The RNA sequence with \'T\' replaced by \'U\'. return dna.replace(\'T\', \'U\').replace(\'t\', \'u\')"},{"question":"You are given an array of integers and a target value. Determine if any two numbers in the array add up to the target value. Example 1: Input: [2, 7, 11, 15], target = 9 Output: true Explanation: 2 and 7 add up to 9. Example 2: Input: [3, 2, 4], target = 6 Output: true Explanation: 2 and 4 add up to 6. Example 3: Input: [3, 3], target = 6 Output: true Explanation: Both 3 and 3 add up to 6. Note: You may not use the same element twice.","solution":"def two_sum(nums, target): Returns True if any two numbers in the array add up to the target value, otherwise False. seen = {} for num in nums: complement = target - num if complement in seen: return True seen[num] = True return False"},{"question":"Your Task Write a function that takes a positive integer `n` and returns the list of all prime numbers up to `n` (inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Input - An integer `n` (1 ≤ n ≤ 10^6) # Output - A list containing all prime numbers up to `n`, in ascending order. # Examples ``` n = 10 Output: [2, 3, 5, 7] n = 20 Output: [2, 3, 5, 7, 11, 13, 17, 19] n = 1 Output: [] n = 50 Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47] ``` # Constraints - Your function should be optimized to handle large values of `n` efficiently.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n (inclusive). Args: n (int): The upper limit (inclusive) to look for prime numbers. Returns: List[int]: A list of prime numbers up to n. if n < 2: return [] # Create a boolean array \\"prime[0..n]\\" and initialize all entries as true. prime = [True] * (n + 1) p = 2 while (p * p <= n): # If prime[p] is not changed, then it is a prime if prime[p]: # Updating all multiples of p to not be primes for i in range(p * p, n + 1, p): prime[i] = False p += 1 # Collecting all prime numbers prime_numbers = [p for p in range(2, n + 1) if prime[p]] return prime_numbers"},{"question":"Sum of Digits Create a function named `sumOfDigits`/`SumOfDigits`/`sum_of_digits` that takes an integer as an input and returns the sum of its digits. The input will always be a non-negative integer. For example: - `sumOfDigits(123)` should return `6` - `sumOfDigits(0)` should return `0` - `sumOfDigits(4567)` should return `22` # Constraints: - The function should be able to handle very large integers.","solution":"def sum_of_digits(n): Returns the sum of the digits of the integer n. return sum(int(digit) for digit in str(n))"},{"question":"Implement a function that receives an integer array and returns the most frequent integer in the array. If there are multiple integers with the same highest frequency, return the very first one that reaches that frequency. Example: ```python most_frequent([1, 3, 2, 3, 2, 3]) --> 3 most_frequent([4, 5, 4, 6, 4, 6, 6]) --> 4 ``` ```if:csharp Documentation: ArrayUtils.MostFrequent Method (Int[]) Finds the most frequent integer in an array. If multiple integers have the same highest frequency, the first integer to reach that frequency is returned. Syntax public static int MostFrequent( int[] arr ) Parameters arr Type: System.Int32[] The array of integers to analyze. Return Value Type: System.Int32 The most frequent integer in the array. Exceptions Exception Condition ArgumentNullException arr is null. ArgumentException arr is empty or contains no valid integers. ```","solution":"def most_frequent(arr): Returns the most frequent integer in the array. If there are multiple integers with the same highest frequency, return the first one to reach that frequency. if not arr: raise ValueError(\\"Array is empty\\") frequency = {} max_freq = 0 most_freq_num = arr[0] for num in arr: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 if frequency[num] > max_freq: max_freq = frequency[num] most_freq_num = num return most_freq_num"},{"question":"Description Palindromes are words or phrases that read the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Emily loves palindromes and she wants to identify them within sentences. Write a function that, given a string, returns a list of words from the string that are palindromes. The input string can contain uppercase and lowercase characters, spaces, punctuation, but no numbers. The output list should contain unique palindromes, all presented in lowercase. NOTE: A word is defined as a sequence of consecutive letters. Ignore punctuation and spaces when checking for palindromes. eg: ``` \\"Madam Arora teaches malayalam!\\" --> [\\"madam\\", \\"arora\\", \\"malayalam\\"] \\"Hello, level civic madam\\" --> [\\"level\\", \\"civic\\", \\"madam\\"] \\"Python is fun\\" --> [] ``` Good luck!","solution":"import re def find_palindromes(sentence): Returns a list of unique palindromes from the given sentence. # Remove punctuation and make lowercase cleaned_sentence = re.sub(r\'[^a-zA-Zs]\', \'\', sentence).lower() # Split into words words = cleaned_sentence.split() # Identify palindromes palindromes = {word for word in words if word == word[::-1]} return list(palindromes)"},{"question":"Help Emma organize her bookshelf! Emma loves to read and has accumulated a vast collection of books which she keeps on her bookshelf. However, her bookshelf is a bit disorganized, and she wants to organize it by genres. Emma categorizes her books into \\"fiction\\", \\"non-fiction\\", \\"comics\\", and \\"magazines\\". She wants to arrange the books such that each genre\'s books are grouped together in order. You will be given a string representing the bookshelf. Each book is represented by its genre and is separated by a space. For example: ``` bookshelf = \\"fiction non-fiction fiction comics magazines comics fiction non-fiction magazines\\" ``` Your task is to write a function that organizes the bookshelf by genre in the following order: \\"fiction\\", \\"non-fiction\\", \\"comics\\", and \\"magazines\\". Return a string with the books arranged in the specified order, keeping the books within each genre grouped together: ``` organized_bookshelf = \\"fiction fiction fiction non-fiction non-fiction comics comics magazines magazines\\" ``` Write a function `organize_bookshelf(bookshelf: str) -> str` that returns the organized bookshelf as described. Function Signature: ``` def organize_bookshelf(bookshelf: str) -> str: pass ``` Example Usage: ``` bookshelf = \\"fiction non-fiction fiction comics magazines comics fiction non-fiction magazines\\" print(organize_bookshelf(bookshelf)) # Output: \\"fiction fiction fiction non-fiction non-fiction comics comics magazines magazines\\" ```","solution":"def organize_bookshelf(bookshelf: str) -> str: Organizes books on the bookshelf by genres in the following order: \\"fiction\\", \\"non-fiction\\", \\"comics\\", and \\"magazines\\". Args: bookshelf (str): A string representing the bookshelf with books separated by a space. Returns: str: A string with the books organized by genre. genres = [\\"fiction\\", \\"non-fiction\\", \\"comics\\", \\"magazines\\"] books = bookshelf.split() organized_books = [] for genre in genres: organized_books.extend([book for book in books if book == genre]) return \' \'.join(organized_books)"},{"question":"Given a list of integers and a target integer, write a function that determines the smallest continuous subarray whose sum is greater than or equal to the target integer. If no such subarray exists, return 0 instead. The function should have the following signature: ```python def smallest_subarray_with_sum(nums: List[int], target: int) -> int: ``` # Input - The function receives a list of integers `nums` where 1 ≤ len(nums) ≤ 100,000 and each integer in the list is between 1 and 10,000 inclusive. - An integer `target` where 1 ≤ target ≤ 10^9. # Output - The function should return an integer representing the length of the smallest continuous subarray whose sum is greater than or equal to `target`. If such a subarray does not exist, return 0. # Examples Example 1: ```python nums = [2, 1, 3, 4, 1, 1, 2] target = 5 result = smallest_subarray_with_sum(nums, target) print(result) # Output: 2 ``` Example 2: ```python nums = [1, 1, 1, 1, 1] target = 10 result = smallest_subarray_with_sum(nums, target) print(result) # Output: 0 ``` Example 3: ```python nums = [4, 2, 1, 6, 5, 3] target = 8 result = smallest_subarray_with_sum(nums, target) print(result) # Output: 2 ``` # Constraints - The function should be efficient with a linear time complexity, ideally O(n). # Notes Consider using a sliding window approach for an optimal solution.","solution":"from typing import List def smallest_subarray_with_sum(nums: List[int], target: int) -> int: n = len(nums) min_len = float(\'inf\') # Initialize minimum length to infinity current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum >= target: min_len = min(min_len, end - start + 1) current_sum -= nums[start] start += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"In a computer science class, the professor decided to test the students\' knowledge of sorting algorithms. The professor gave each student a list of integers and instructed them to sort the list in non-decreasing order. However, since the professor is known for being quirky, they added a twist to the sorting task. Each student is allowed to swap only adjacent elements, and the total number of swaps they can make is constrained. The students need to determine if they can sort the list within the allowed number of swaps. Given an integer array A of length N and an integer K representing the maximum number of adjacent swaps allowed, determine if it is possible to sort the array within the given number of swaps. Write a function `isSortableWithinSwaps(N, K, A)` that returns `True` if the array can be sorted within K adjacent swaps, and `False` otherwise. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and K. - The second line contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, return either `True` or `False`. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - 0 le K le 10,000 - 0 le A_i le 10^4 -----Example Input----- 3 5 4 3 1 2 4 5 4 2 4 3 2 1 3 0 1 3 2 -----Example Output----- True False False -----Explanation----- Example case 1: The array can be sorted with the following swaps: - Swap A[0] and A[1]: [1, 3, 2, 4, 5] - Swap A[1] and A[2]: [1, 2, 3, 4, 5] - The total swaps needed are 2 which is ≤ K (4), so the output is `True`. Example case 2: The array cannot be sorted within 2 swaps, so the output is `False`. Example case 3: No swaps are allowed and the array is not sorted, so the output is `False`. Implement the function based on the above specifications.","solution":"def isSortableWithinSwaps(N, K, A): # Count the number of inversions in the array def count_inversions(arr): inv_count = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: inv_count += 1 return inv_count # Calculate the number of inversions in the array inversions = count_inversions(A) # Since each swap can reduce inversions by at most 1, # the array can only be sorted if inversions <= K return inversions <= K def solve_test_cases(test_cases): results = [] for N, K, A in test_cases: results.append(isSortableWithinSwaps(N, K, A)) return results"},{"question":"You are given a list of integers that may contain duplicates. Your task is to write a function that returns a list of unique combinations (subsets) of these integers. The combinations should be sorted in ascending order, and each subset should also be sorted. The solution set must not contain duplicate combinations. Your function will receive one argument - an array of integers `nums`, where the integers can be both positive and negative, and the array can be empty as well. **Example:** ```python unique_combinations([-1,2,2]) ``` Expected output (order of subsets and elements within subsets should be sorted): ```python [ [], [-1], [-1, 2], [-1, 2, 2], [2], [2, 2] ] ``` **Function Signature:** ```python def unique_combinations(nums: List[int]) -> List[List[int]]: pass ``` **Hints:** 1. Consider using a backtracking approach to generate all possible subsets. 2. You may find it helpful to sort the array at the beginning to handle duplicates effectively. 3. Use a set to avoid adding duplicate combinations.","solution":"from typing import List def unique_combinations(nums: List[int]) -> List[List[int]]: def backtrack(start, path): result.append(path) for i in range(start, len(nums)): if i > start and nums[i] == nums[i - 1]: continue backtrack(i + 1, path + [nums[i]]) nums.sort() result = [] backtrack(0, []) return result"},{"question":"Alice and Bob are playing a game on a large, two-dimensional grid. Initially, Alice is located at position (0, 0) and Bob is located at position (x, y). The objective of the game for Alice is to capture Bob. To achieve this, Alice can perform a series of moves to get closer to Bob. Each move can be of the following types: 1. Move up by 1 unit. 2. Move down by 1 unit. 3. Move left by 1 unit. 4. Move right by 1 unit. Bob will stand still at his position during the entire game. Alice wants to reach Bob in the minimum number of moves. Write a program to determine the minimum number of moves Alice needs to reach Bob and then print out the sequence of moves Alice should use to reach Bob. ----Input----- The first line of the input contains two integers x and y (-10^9 ≤ x, y ≤ 10^9), the initial coordinates of Bob. ----Output----- Print a single integer, the minimum number of moves Alice needs to reach Bob. Then, on the next line, print a string of characters representing the sequence of moves (\'U\' for up, \'D\' for down, \'L\' for left, \'R\' for right). You can print any valid sequence that results in the minimum number of moves. ----Example----- Input 3 4 Output 7 RRRUUUU ----Note----- Alice needs to move right (R) three times and up (U) four times to reach Bob at position (3, 4).","solution":"def min_moves_to_reach(x, y): Returns the minimum number of moves Alice needs to reach Bob and the sequence of moves. Parameters: x (int): The x-coordinate of Bob y (int): The y-coordinate of Bob Returns: tuple: A tuple containing the minimum number of moves (int) and the sequence of moves (str) # Number of moves is the sum of x and y absolute values num_moves = abs(x) + abs(y) # Create the sequence of moves move_sequence = \\"\\" if x > 0: move_sequence += \\"R\\" * x elif x < 0: move_sequence += \\"L\\" * abs(x) if y > 0: move_sequence += \\"U\\" * y elif y < 0: move_sequence += \\"D\\" * abs(y) return num_moves, move_sequence"},{"question":"Challenge: You are given two null-terminated strings: \\"str\\" and \\"sub\\". Determine if \\"sub\\" is a substring of \\"str\\". Return the starting index (0-based) of \\"sub\\" within \\"str\\" if it exists, or return -1 if it does not. Example: ``` findSubstring(\\"hello world\\", \\"world\\"); // should return 6 findSubstring(\\"hello world\\", \\"plan\\"); // should return -1 findSubstring(\\"abcdabc\\", \\"abc\\"); // should return 0 ``` Addendum: For this problem, if \\"sub\\" is an empty string, it should be considered a substring of \\"str\\" starting at index 0. If the length of \\"sub\\" is greater than the length of \\"str\\", return -1. The check should be case-sensitive, i.e., findSubstring(\\"hello\\", \\"HE\\") should return -1, whereas findSubstring(\\"hello\\", \\"he\\") should return -1. No characters should be ignored and/or omitted during the test, e.g., whitespace characters should not be ignored.","solution":"def findSubstring(str, sub): Determine if \'sub\' is a substring of \'str\'. Return the starting index (0-based) of \'sub\' within \'str\' if it exists, or return -1 if it does not. # If sub is empty, it is considered a substring starting at index 0 if sub == \\"\\": return 0 # If sub is longer than str, sub cannot be a substring if len(sub) > len(str): return -1 # Iterate through str to find the starting index of sub for i in range(len(str) - len(sub) + 1): if str[i:i+len(sub)] == sub: return i # If sub is not found, return -1 return -1"},{"question":"Implement the class RecentCounter that supports two methods: 1. ping(int t) Adds a new request at time t. 2. count() Returns the number of requests that occurred in the last 3000 milliseconds (including the new request). Specifically, it returns the number of requests that occurred in the inclusive range [t - 3000, t]. It is guaranteed that every call to ping is with a strictly larger value of t than before. Example: Input [\\"RecentCounter\\", \\"ping\\", \\"ping\\", \\"ping\\", \\"ping\\", \\"count\\"] [[], [1], [100], [3001], [3002], []] Output [null, null, null, null, null, 3] Explanation RecentCounter recentCounter = new RecentCounter(); recentCounter.ping(1); // requests = [1] recentCounter.ping(100); // requests = [1, 100] recentCounter.ping(3001); // requests = [1, 100, 3001] recentCounter.ping(3002); // requests = [1, 100, 3001, 3002] recentCounter.count(); // returns 3, as the requests in the last 3000 ms are [100, 3001, 3002] Constraints: The number of calls to ping and count combined will not exceed 10000. 1 <= t <= 10^9","solution":"from collections import deque class RecentCounter: def __init__(self): self.requests = deque() def ping(self, t: int) -> None: self.requests.append(t) while self.requests and self.requests[0] < t - 3000: self.requests.popleft() def count(self) -> int: return len(self.requests)"},{"question":"Design a function that simulates a toll booth at a highway exit. The function takes two arguments, `toll_amount` and `coin_values`, where `toll_amount` is the total amount to be paid at the toll, and `coin_values` is a list of integers representing the values of different coins available. The function should return the minimum number of coins needed to make the exact `toll_amount`. If it is not possible to make the exact toll amount with the given coins, the function should return -1.","solution":"def min_coins(toll_amount, coin_values): Returns the minimum number of coins needed to make the exact toll_amount. If not possible, return -1. # Initialize dp array to store minimum coins needed for each amount up to toll_amount dp = [float(\'inf\')] * (toll_amount + 1) dp[0] = 0 # Base case: 0 coins needed to make amount 0 # Loop through each coin value and update the dp array for coin in coin_values: for x in range(coin, toll_amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # Return the result for toll_amount, or -1 if it\'s not possible return dp[toll_amount] if dp[toll_amount] != float(\'inf\') else -1"},{"question":"You are given a weighted, undirected graph with N vertices (numbered 1 through N) and M edges. Each edge has an associated integer weight. You need to find the shortest path from vertex 1 to vertex N. If there is no path from vertex 1 to vertex N, return `-1`. -----Input----- - The first line of the input contains two integers N and M — the number of vertices and edges, respectively. - The next M lines contain three integers u, v, and w each — denoting an edge between vertices u and v with weight w. -----Output----- Print a single line containing one integer — the length of the shortest path from vertex 1 to vertex N. If there is no such path, print `-1`. -----Constraints----- - 1 le N le 100,000 - 1 le M le 200,000 - 1 le u, v le N - 1 le w le 1,000,000 - No multiple edges between the same pair of vertices and no loops. -----Example Input----- 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 -----Example Output----- 8 -----Explanation----- Example case: The shortest path from vertex 1 to vertex N=5 is through the vertices 1 rightarrow 2 rightarrow 3 rightarrow 5 with the total weight being 2 + 1 + 3 = 6. Another valid path is 1 rightarrow 3 rightarrow 2 rightarrow 4 rightarrow 5 with total weight being 4 + 1 + 7 + 1 = 13. The minimum weight among these is 6.","solution":"import heapq def shortest_path(N, M, edges): Finds the shortest path from vertex 1 to vertex N in a weighted, undirected graph. If there is no path from vertex 1 to vertex N, returns -1. Parameters: N (int): number of vertices M (int): number of edges edges (list of tuples): each tuple contains three integers (u, v, w) where u and v are vertices and w is the weight of the edge Returns: int: the length of the shortest path from vertex 1 to vertex N, or -1 if no path exists from collections import defaultdict, deque import heapq # Create adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm using a priority queue dist = {i: float(\'inf\') for i in range(1, N+1)} dist[1] = 0 priority_queue = [(0, 1)] # (distance, node) while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(priority_queue, (distance, v)) return dist[N] if dist[N] != float(\'inf\') else -1"},{"question":"Write a function that receives a string as a parameter. This string will contain integers separated by a comma. Your task is to return a new string containing the integers in descending order, still separated by a comma. Examples: ``` \'1,3,5,7,9\' -> \'9,7,5,3,1\' \'10,1,22,15\' -> \'22,15,10,1\' ```","solution":"def sort_integers_descending(s): Receives a string of integers separated by commas and returns the integers in descending order. # Split the string into a list of integers integers = list(map(int, s.split(\',\'))) # Sort the list in descending order integers.sort(reverse=True) # Join the integers back into a string separated by commas return \',\'.join(map(str, integers))"},{"question":"# Instruction: Design and implement a class that simulates a basic file system supporting the following operations: 1. `mkdir(path: str)`: Creates a directory at the given path. If the path already exists, it does nothing. 2. `addContentToFile(filePath: str, content: str)`: Appends content to a file at the given path. If the file does not exist, it creates a new file at the specified path. 3. `ls(path: str) -> List[str]`: Returns the list of files and directories in the given path, sorted in lexicographical order. If the path is a file, only returns the file\'s name. Assume: - The root directory is represented as \\"/\\". - All paths are absolute. - Any paths provided are valid and properly formatted. # Example: ```python fs = FileSystem() fs.mkdir(\\"/a/b/c\\") fs.addContentToFile(\\"/a/b/c/d\\", \\"hello\\") print(fs.ls(\\"/\\")) # Output: [\\"a\\"] print(fs.ls(\\"/a/b/c/d\\")) # Output: [\\"d\\"] print(fs.ls(\\"/a/b/c\\")) # Output: [\\"d\\"] fs.addContentToFile(\\"/a/b/c/d\\", \\" world\\") print(fs.ls(\\"/a/b/c/d\\")) # Output: [\\"d\\"] ``` # Constraints: - All operations should be performed in O(1) time for each function, except for `ls` which should perform in O(NlogN) time where N is the number of files and directories in the given path.","solution":"class FileSystem: def __init__(self): self.fs = {\'/\': {}} def mkdir(self, path: str): node = self.fs[\'/\'] subdirs = filter(bool, path.split(\'/\')) for dir in subdirs: if dir not in node: node[dir] = {} node = node[dir] def addContentToFile(self, filePath: str, content: str): dirs = filePath.split(\'/\') node = self.fs[\'/\'] file = dirs.pop() for dir in filter(bool, dirs): if dir not in node: node[dir] = {} node = node[dir] if file not in node: node[file] = \\"\\" node[file] += content def ls(self, path: str): node = self.fs[\'/\'] if path != \'/\': dirs = filter(bool, path.split(\'/\')) for dir in dirs: node = node[dir] if isinstance(node, dict): return sorted(node.keys()) return [path.split(\'/\')[-1]]"},{"question":"Given an array of n integers, find if there are any duplicate integers present in the array, such that the difference between the indices of the duplicate integers is at most k. Return true if such duplicates exist, otherwise return false. Example 1: Input: nums = [1,2,3,1], k = 3 Output: true Explanation: There is a duplicate \'1\' at indices 0 and 3, and the difference between these indices is 3 which is less than or equal to k. Example 2: Input: nums = [1,0,1,1], k = 1 Output: true Explanation: There is a duplicate \'1\' at indices 2 and 3, and the difference between these indices is 1 which is less than or equal to k. Example 3: Input: nums = [1,2,3,1,2,3], k = 2 Output: false Explanation: Although there are duplicates, the closest duplicates are \'1\' at indices 0 and 3 with a difference of 3, which is greater than k. Constraints: 1 <= nums.length <= 105 -109 <= nums[i] <= 109 0 <= k <= nums.length","solution":"def contains_nearby_duplicate(nums, k): Returns true if there are duplicate integers in the array such that the difference between the indices of the duplicate integers is at most k. num_indices = {} for i, num in enumerate(nums): if num in num_indices and i - num_indices[num] <= k: return True num_indices[num] = i return False"},{"question":"-----Binary Tree Labelling----- Given a binary tree, we want to label each node of the tree with a unique integer in such a way that the sum of all labels on the nodes in the left subtree of any given node is less than the sum of all labels on the nodes in the right subtree of that node. Write a function that takes the root of a binary tree and returns a labelling that satisfies the above condition. Note: - You don\'t necessarily need to output the labels in any specific order, but the labels should maintain the property that the sum of values in the left subtree is less than the sum of values in the right subtree for all nodes in the tree. -----Input Format:----- - You will be given a binary tree as input in level order (breadth-first order). The input consists of several lines: - First line will be an integer N, which is the number of nodes in the tree. - Next N lines each contain an integer which specifies the node value. -----Output Format----- - Print N integers which represent the labels assigned to each node in the input. Print them in level order as given in the input. -----Constraints----- - The number of nodes in the tree is between 1 and 1000. - Each node value is a unique integer from 1 to 1000. -----Example----- Input: 7 1 2 3 4 5 6 7 Output: 8 4 12 2 6 10 14 Explanation: The example input represents the following tree: 1 / 2 3 / / 4 5 6 7 With the output labels, we can see: 8 / 4 12 / / 2 6 10 14 For every node, the sum of the values in its left subtree is less than the sum of the values in its right subtree. Note: The given output is only one possible correct solution. Multiple valid solutions are possible as long as they satisfy the mentioned condition.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def label_tree(root): # Helper function to perform in-order traversal and label the nodes def in_order_traversal(node, current_label): if node is not None: current_label = in_order_traversal(node.left, current_label) node.val = current_label current_label += 1 current_label = in_order_traversal(node.right, current_label) return current_label # List of tree nodes to enable level-order reconstruction after labeling if root is None: return [] nodes = [] queue = [root] while queue: node = queue.pop(0) nodes.append(node) if node.left: queue.append(node.left) if node.right: queue.append(node.right) # Label the tree nodes using in-order traversal starting from label 1 in_order_traversal(root, 1) # Output the labels in level order return [node.val for node in nodes] def construct_tree_from_level_order(level_order): if not level_order: return None root = TreeNode(level_order[0]) queue = [root] i = 1 while queue and i < len(level_order): node = queue.pop(0) if i < len(level_order): node.left = TreeNode(level_order[i]) queue.append(node.left) i += 1 if i < len(level_order): node.right = TreeNode(level_order[i]) queue.append(node.right) i += 1 return root def label_binary_tree(n, level_order): if n == 0: return [] root = construct_tree_from_level_order(level_order) return label_tree(root)"},{"question":"Write a function that takes a list of integers and returns the second smallest number in the list. You can assume that the list will have at least two elements. For example: ``` [3, 1, 4, 1, 5, 9] ==> 1 [10, 22, 5, 14, 9] ==> 9 ```","solution":"def second_smallest(numbers): Returns the second smallest number in the list. Assumes that the list has at least two elements. if len(numbers) < 2: raise ValueError(\\"List must contain at least two elements.\\") # Create a unique set of numbers to handle duplicates unique_numbers = list(set(numbers)) if len(unique_numbers) < 2: raise ValueError(\\"List must contain at least two unique elements.\\") unique_numbers.sort() return unique_numbers[1]"},{"question":"You are given a series of tasks to manage a parking lot. The parking lot has parking spaces arranged in increasing numerical order from 1 to `n`. Implement the `ParkingLot` class: ParkingLot(int capacity) Initializes the object with a maximum capacity of the parking lot. bool park(int carId) Parks the car with the given positive integer carId in the nearest available parking space, starting from 1. Returns `true` if the car is successfully parked, and `false` if the parking lot is full or the car is already parked. bool leave(int carId) Removes the car with the given carId from the parking lot. Returns `true` if the car leaves the parking lot successfully, and `false` if the car is not in the parking lot. int findCar(int carId) Returns the parking space number for the car with the given carId. Returns -1 if the car is not found in the parking lot. Example: Input: [\\"ParkingLot\\",\\"park\\",\\"park\\",\\"park\\",\\"leave\\",\\"park\\",\\"findCar\\",\\"park\\",\\"park\\",\\"leave\\",\\"findCar\\",\\"findCar\\"] [[5],[1],[2],[3],[2],[4],[4],[5],[6],[1],[1],[6]] Output: [null,true,true,true,true,true,4,true,true,false,-1,1] Explanation: ParkingLot P = ParkingLot(5); // Initialize a parking lot with 5 spaces. P.park(1); // Returns true. Car 1 is parked in space 1. P.park(2); // Returns true. Car 2 is parked in space 2. P.park(3); // Returns true. Car 3 is parked in space 3. P.leave(2); // Returns true. Car 2 leaves space 2. P.park(4); // Returns true. Car 4 is parked in the nearest available space, space 2. P.findCar(4); // Returns 2. Car 4 is found in space 2. P.park(5); // Returns true. Car 5 is parked in space 4. P.park(6); // Returns true. Car 6 is parked in space 5. P.leave(1); // Returns true. Car 1 leaves space 1. P.findCar(1); // Returns -1. Car 1 is not found in the parking lot. P.findCar(6); // Returns 5. Car 6 is found in space 5. Constraints: 1 <= capacity <= 10000 1 <= carId <= 100000 At most 50000 calls will be made to park, leave, and findCar.","solution":"class ParkingLot: def __init__(self, capacity): self.capacity = capacity self.parking_spaces = [None] * capacity self.car_to_space = {} def park(self, carId): if carId in self.car_to_space: return False for i in range(self.capacity): if self.parking_spaces[i] is None: self.parking_spaces[i] = carId self.car_to_space[carId] = i + 1 return True return False def leave(self, carId): if carId not in self.car_to_space: return False space = self.car_to_space[carId] - 1 self.parking_spaces[space] = None del self.car_to_space[carId] return True def findCar(self, carId): return self.car_to_space.get(carId, -1)"},{"question":"You are given a matrix consisting of two types of characters - \'X\' and \'O\'. Your task is to convert all \'O\' which are not on the border and not connected to an \'O\' on the border to \'X\'. An \'O\' is considered to be connected to an \'O\' on the border if there exists a chain of contiguous \'O\'s (horizontal or vertical) starting from an \'O\' on the border and ending at the given \'O\'. -----Input----- - The first line contains two integers N and M, the dimensions of the matrix. - The next N lines contain M characters (\'X\' or \'O\') each. -----Output----- - Output the modified matrix. -----Constraints----- - 1 leq N, M leq 200 -----Sample Input----- 4 4 X X X X X O O X X X O X X O X X -----Sample Output----- X X X X X X X X X X X X X O X X -----Explanation----- In the given example, the \'O\'s in the second row and the third row are not connected to the border and therefore they are changed to \'X\'. The \'O\' in the last row remains the same because it is on the border.","solution":"def capture_regions(matrix): if not matrix: return matrix n, m = len(matrix), len(matrix[0]) borders = [] # Collect all border \'O\'s for i in range(n): if matrix[i][0] == \'O\': borders.append((i, 0)) if matrix[i][m - 1] == \'O\': borders.append((i, m - 1)) for j in range(m): if matrix[0][j] == \'O\': borders.append((0, j)) if matrix[n - 1][j] == \'O\': borders.append((n - 1, j)) # BFS to mark all \'O\'s connected to border \'O\'s while borders: x, y = borders.pop(0) if 0 <= x < n and 0 <= y < m and matrix[x][y] == \'O\': matrix[x][y] = \'B\' borders.append((x + 1, y)) borders.append((x - 1, y)) borders.append((x, y + 1)) borders.append((x, y - 1)) # Convert all \'O\' to \'X\' and \'B\' back to \'O\' for i in range(n): for j in range(m): if matrix[i][j] == \'O\': matrix[i][j] = \'X\' elif matrix[i][j] == \'B\': matrix[i][j] = \'O\' return matrix"},{"question":"You are given two strings, s1 and s2. Your task is to determine if s2 can be obtained by performing a right circular rotation on s1. A right circular rotation means shifting each character of s1 to the right by one position, with the last character wrapping around to the first position. Return `true` if s2 can be obtained by a series of right circular rotations on s1, otherwise return `false`. Examples: Input: s1 = \\"abcde\\", s2 = \\"cdeab\\" Output: true Explanation: \\"abcde\\" can be rotated right twice to become \\"cdeab\\". Input: s1 = \\"abcde\\", s2 = \\"abced\\" Output: false Explanation: \\"abced\\" cannot be obtained by any right circular rotations of \\"abcde\\". Input: s1 = \\"aaa\\", s2 = \\"aaa\\" Output: true Explanation: \\"aaa\\" remains the same after any number of right circular rotations. Input: s1 = \\"abc\\", s2 = \\"cab\\" Output: true Explanation: \\"abc\\" can be rotated right twice to become \\"cab\\". Constraints: - 1 <= s1.length, s2.length <= 100 - s1 and s2 consist of lowercase English letters.","solution":"def is_right_circular_rotation(s1, s2): Determines if s2 can be obtained by performing right circular rotations on s1. Parameters: s1 (str): the original string s2 (str): the string to compare against s1\'s rotations Returns: bool: True if s2 can be obtained by right circular rotations of s1, False otherwise. if len(s1) != len(s2): return False # Concatenate s1 with itself doubled_s1 = s1 + s1 # Check if s2 is a substring of the concatenated string return s2 in doubled_s1"},{"question":"# Task You are given a string representing a potential IPv4 address. An IPv4 address is represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots (e.g., 192.168.0.1). Leading zeros are not allowed (e.g., 192.168.01.1 is not a valid IPv4 address). Write a function that checks whether a given input string is a valid IPv4 address. # Example For `inputString = \\"192.168.0.1\\"`, the output should be `true`; For `inputString = \\"255.255.255.255\\"`, the output should be `true`; For `inputString = \\"256.100.50.0\\"`, the output should be `false`; For `inputString = \\"172.16.254.01\\"`, the output should be `false`; For `inputString = \\"random text\\"`, the output should be `false`. # Input/Output - `[input]` string `inputString` - `[output]` a boolean value `true` if `inputString` represents a valid IPv4 address, `false` otherwise.","solution":"def is_valid_ipv4_address(inputString): def is_valid_part(part): if len(part) == 0 or (len(part) > 1 and part[0] == \'0\'): return False if not part.isdigit(): return False num = int(part) return 0 <= num <= 255 parts = inputString.split(\'.\') if len(parts) != 4: return False return all(is_valid_part(part) for part in parts)"},{"question":"You are given an array of integers representing the stock prices of a certain company on consecutive days. You can perform a maximum of \\"k\\" transactions where each transaction consists of buying one stock and selling it on a future date. Write a function to determine the maximum profit you can achieve under the given constraints. Each transaction must consist of buying and then selling one share of the stock in a specific order, meaning you must buy before you sell. -----Input:----- - First line contains an integer n, the number of days. - Second line contains n space-separated integers representing the stock prices on each day. - Third line contains an integer k, the maximum number of transactions. -----Output:----- Print the maximum profit achievable given the stock prices and the allowed transactions. -----Constraints----- - 1 <= n <= 1000 - 0 <= stock prices[i] <= 10000 - 0 <= k <= 100 -----Subtasks----- - 40 points: 1 <= n <= 100, 0 <= k <= 10 - 60 points: n > 100, 10 < k <= 100 -----Sample Input 1:----- 6 3 2 6 5 0 3 2 -----Sample Output 1:----- 5 -----Explanation:----- Buy on day 2 (price = 2) and sell on day 3 (price = 6) for a profit of 4. Then, buy on day 5 (price = 0) and sell on day 6 (price = 3) for a profit of 3. Total profit = 4 + 3 = 7. However, we are only allowed 2 transactions, so the maximum profit in this case is 5. -----Sample Input 2:----- 5 1 2 3 4 5 2 -----Sample Output 2:----- 4 -----Explanation:----- Buy on day 1 (price = 1) and sell on day 5 (price = 5) for a profit of 4. Since only one transaction is actually needed to achieve the maximum profit, no need for a second transaction.","solution":"def maxProfit(k, prices): Returns the maximum profit achievable with at most k transactions. :param k: int - maximum number of transactions allowed :param prices: List[int] - list of stock prices on consecutive days :return: int - maximum profit achievable if not prices or k == 0: return 0 n = len(prices) if k >= n // 2: return sum( max(prices[i + 1] - prices[i], 0) for i in range(n - 1) ) profits = [[0] * (n) for _ in range(k + 1)] for t in range(1, k + 1): max_to_buy = -prices[0] for d in range(1, n): profits[t][d] = max(profits[t][d - 1], prices[d] + max_to_buy) max_to_buy = max(max_to_buy, profits[t - 1][d] - prices[d]) return profits[k][n - 1]"},{"question":"Write a function that takes a list of integers and returns the product of every integer except the integer at that index. Example: `product_except_self([1, 2, 3, 4])` - For index 0, the product of all other elements is `2 * 3 * 4 = 24` - For index 1, the product of all other elements is `1 * 3 * 4 = 12` - For index 2, the product of all other elements is `1 * 2 * 4 = 8` - For index 3, the product of all other elements is `1 * 2 * 3 = 6` So the function should return `[24, 12, 8, 6]` Constraints: - The length of the list will be at least 1 and at most 1000. - Each integer in the list will be between `-1000` and `1000`. You are not allowed to use the division operation.","solution":"def product_except_self(nums): n = len(nums) if n == 0: return [] left_products = [1] * n right_products = [1] * n result = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"# Task Given a binary tree where each node contains a positive integer, design an algorithm to find the most frequent subtree sum. A subtree sum is the sum of all the node values in a subtree (a subtree includes the node itself and all of its descendants). If there is a tie in frequency, return all the subtree sums with the highest frequency in any order. # Input/Output * `[input]` TreeNode root - The root of the binary tree, where TreeNode is a structure representing a node in the tree: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` * `[output]` List of integers - A list containing the most frequent subtree sum(s). # Example ```python # Example 1: # Input: # 5 # / # 2 -3 # Output: [2, 4, -3] -> subtree sums are [5, 2, -3, 4] # Example 2: # Input: # 5 # / # 2 -5 # Output: [2, -5, 2] -> subtree sums are [5, 2, -5, 2], notice that subtree sum 2 occurs twice which is the highest frequency. ```","solution":"from collections import defaultdict from typing import List class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def find_frequent_tree_sum(root: TreeNode) -> List[int]: if not root: return [] sum_count = defaultdict(int) def dfs(node): if not node: return 0 left_sum = dfs(node.left) right_sum = dfs(node.right) subtree_sum = node.val + left_sum + right_sum sum_count[subtree_sum] += 1 return subtree_sum dfs(root) max_frequency = max(sum_count.values()) return [s for s in sum_count if sum_count[s] == max_frequency]"},{"question":"Implement a function that takes a string of Roman numerals and converts it to an integer. The function should process the Roman numerals according to their traditional values. The Roman numeral system uses seven symbols: I, V, X, L, C, D, and M. Specific pairs of these symbols represent subtraction, such as IV for 4 and IX for 9. # Roman Numeral Values: ``` Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` # Process: - If a smaller numeral appears before a larger numeral, subtract the smaller numeral. - Otherwise, add the numeral\'s value. # Example Conversions: ``` \\"III\\" ==> 3 \\"IV\\" ==> 4 \\"IX\\" ==> 9 \\"LVIII\\" ==> 58 \\"MCMXCIV\\" ==> 1994 ``` # Constraints: - Input is a valid Roman numeral string conforming to the rules of the Roman numeral system. - Output should be the integer representation of the given Roman numeral.","solution":"def roman_to_int(s): Converts a string of Roman numerals to an integer. Parameters: s (str): The Roman numeral string. Returns: int: The integer representation of the given Roman numeral. roman_to_int_map = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in s[::-1]: value = roman_to_int_map[char] if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"Given an integer array `nums`, find the smallest missing positive integer. You must write an algorithm that runs in O(n) time and uses constant extra space. Example 1: Input: nums = [1, 2, 0] Output: 3 Explanation: The smallest missing positive integer is 3. Example 2: Input: nums = [3, 4, -1, 1] Output: 2 Explanation: The smallest missing positive integer is 2. Example 3: Input: nums = [7, 8, 9, 11, 12] Output: 1 Explanation: The smallest missing positive integer is 1. Note: Your algorithm should run in O(n) time and use constant extra space.","solution":"def first_missing_positive(nums): Given an integer array nums, find the smallest missing positive integer. This algorithm runs in O(n) time and uses constant extra space. n = len(nums) # Step 1: Move every positive integer (1, 2, ..., n) to its correct position (i.e., nums[i] = i + 1) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Step 2: Identify the first index i where nums[i] != i + 1 for i in range(n): if nums[i] != i + 1: return i + 1 # If all the positions are correct, then the missing number is n + 1 return n + 1"},{"question":"Write a function that takes a list of numbers and returns a new list where each number is replaced by its rank in the original list. The rank of a number is its index in the sorted list of unique numbers, starting from 1. Example: ``` Input: [40, 10, 20, 30, 20] Output: [4, 1, 2, 3, 2] ``` Explanation: - The unique sorted list is [10, 20, 30, 40] - 40 is the 4th number, 10 is the 1st, 20 is the 2nd, and 30 is the 3rd in the sorted list. 20 appears twice, so it is ranked the same in both positions.","solution":"def rank_elements(lst): This function takes a list of numbers and returns a new list where each number is replaced by its rank in the original list. The rank of a number is its index in the sorted list of unique numbers, starting from 1. :param lst: List of numbers :return: List with ranks of the elements # Create a sorted list of unique elements unique_sorted_lst = sorted(set(lst)) # Create a dictionary to map each number to its rank rank_dict = {num: rank for rank, num in enumerate(unique_sorted_lst, start=1)} # Replace each element in original list with its rank return [rank_dict[num] for num in lst]"},{"question":"Given an array of integers `arr`, you need to design a class `SumRange` to perform the following operations efficiently: 1. A constructor that takes the array `arr` and initializes the object. 2. A function `sumRange(start, end)` that returns the sum of the elements of `arr` between the indices `start` and `end` inclusive. Example: ``` SumRange sumRange = new SumRange([1, 2, 3, 4, 5]); // creates the object. sumRange.sumRange(0, 2); // returns 6 (1 + 2 + 3) sumRange.sumRange(2, 4); // returns 12 (3 + 4 + 5) ``` Constraints: 1. The array `arr` will have at most 10^5 elements. 2. The number of calls to `sumRange` will be at most 10^4. 3. 0 <= start <= end < arr.length.","solution":"class SumRange: def __init__(self, arr): Initializes the SumRange object with the given array. Precomputes the prefix sums to allow efficient range sum calculations. :param arr: List[int] self.prefix_sums = [0] * (len(arr) + 1) for i in range(len(arr)): self.prefix_sums[i + 1] = self.prefix_sums[i] + arr[i] def sumRange(self, start, end): Returns the sum of elements between indices start and end inclusive. Utilizes prefix sums for efficient calculation. :param start: int :param end: int :return: int return self.prefix_sums[end + 1] - self.prefix_sums[start]"},{"question":"Given an array of integers, find and return an array containing the next greater element for each element in the original array. The next greater element for an element `x` in the array is the first element to the right of `x` that is greater than `x`. If there is no such element, the output should be `-1`. Example: `nextGreaterElement([4, 5, 2, 10, 8])` - For the first element 4, the next greater element is 5. - For the second element 5, the next greater element is 10. - For the third element 2, the next greater element is 10. - For the fourth element 10, there is no next greater element, hence -1. - For the fifth element 8, there is no next greater element, hence -1. Thus, the output array will be `[5, 10, 10, -1, -1]`. If the input array is empty, return `[]`. ```python def nextGreaterElement(arr): # Your code here pass # Example usage: # print(nextGreaterElement([4, 5, 2, 10, 8])) # Output: [5, 10, 10, -1, -1] ```","solution":"def nextGreaterElement(arr): Finds the next greater element for each element in the array. Parameters: arr (list of int): A list of integers. Returns: list of int: A list containing the next greater element for each element in the input array. n = len(arr) if n == 0: return [] result = [-1] * n stack = [] for i in range(n): while stack and arr[stack[-1]] < arr[i]: idx = stack.pop() result[idx] = arr[i] stack.append(i) return result"},{"question":"Task: Your task is to implement a function `letter_combinations` that takes a string of digits and returns all possible letter combinations that the digits could represent. The function should return the results in lexicographic order. The mapping of digits to letters is as follows (same as on a standard telephone keypads): - 2: \\"abc\\" - 3: \\"def\\" - 4: \\"ghi\\" - 5: \\"jkl\\" - 6: \\"mno\\" - 7: \\"pqrs\\" - 8: \\"tuv\\" - 9: \\"wxyz\\" Note that 1 does not map to any letters. Function Signature ```python def letter_combinations(digits: str) -> list[str]: ``` Example ```python letter_combinations(\\"23\\") #=> [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] letter_combinations(\\"9\\") #=> [\\"w\\", \\"x\\", \\"y\\", \\"z\\"] letter_combinations(\\"\\") #=> [] ``` In this example: - The digit \\"2\\" maps to the letters \'a\', \'b\', and \'c\'. - The digit \\"3\\" maps to the letters \'d\', \'e\', and \'f\'. Therefore, the possible letter combinations from \\"23\\" are: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"].","solution":"def letter_combinations(digits: str) -> list[str]: if not digits: return [] # Mapping from digit to letters phone_map = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = phone_map[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return sorted(combinations)"},{"question":"Write a function that receives an integer and returns the same integer with its digits reversed. However, any leading zeros in the reversed integer should be removed. Example: reverseInteger(12345) should return 54321 reverseInteger(1002) should return 2001 reverseInteger(1200) should return 21 Assumptions: The input integer is always non-negative. The input integer is guaranteed to not lead to integer overflow when reversed.","solution":"def reverseInteger(n): Returns the reverse of the given integer with leading zeros removed. reversed_number = int(str(n)[::-1]) return reversed_number"},{"question":"Given a non-negative integer array nums, return a new array where each element at index i of the new array is the product of all the numbers in the original array except the one at i. For example: productExceptSelf([1, 2, 3, 4]) => [24, 12, 8, 6] productExceptSelf([2, 3, 4, 5]) => [60, 40, 30, 24] productExceptSelf([1, 2]) => [2, 1] The algorithm should run in O(n) time and do not use division operation. Note: nums.length <= 1000.","solution":"def productExceptSelf(nums): Given a non-negative integer array nums, return a new array where each element at index i of the new array is the product of all the numbers in the original array except the one at i. length = len(nums) # Initialize the result array with 1s result = [1] * length # Create prefix products prefix = 1 for i in range(length): result[i] = prefix prefix *= nums[i] # Create suffix products and multiply with corresponding prefix products suffix = 1 for i in range(length-1, -1, -1): result[i] *= suffix suffix *= nums[i] return result"},{"question":"# Deque Operations You are given a list of operations to perform on a deque (double-ended queue). The operations can be either adding an element to the front, adding an element to the back, removing an element from the front, or removing an element from the back of the deque. Write a function that takes a list of operations and performs them on a deque, starting from an empty deque. Return the state of the deque after all operations have been performed. Each operation is represented as a string. Possible operations are: - `\\"push_front X\\"`: Add the integer X to the front of the deque. - `\\"push_back X\\"`: Add the integer X to the back of the deque. - `\\"pop_front\\"`: Remove the element at the front of the deque (if deque is not empty). - `\\"pop_back\\"`: Remove the element at the back of the deque (if deque is not empty). The function should handle the operations in the given order. # Examples ```python deque_operations([\\"push_back 1\\", \\"push_back 2\\", \\"push_front 3\\", \\"pop_back\\"]) = [3, 1] deque_operations([\\"push_front 10\\", \\"push_back 20\\", \\"pop_front\\", \\"push_front 30\\"]) = [30, 20] deque_operations([\\"pop_front\\", \\"push_back 5\\", \\"push_front 10\\", \\"pop_back\\", \\"pop_front\\"]) = [] ``` # Constraints - The operations list will contain between 0 and 1000 operations. - The integer values will be between -1000 and 1000.","solution":"from collections import deque def deque_operations(operations): Performs operations on a deque and returns the final state of the deque. :param operations: List of strings, each representing an operation :return: Final state of the deque as a list d = deque() for operation in operations: if operation.startswith(\\"push_front\\"): _, x = operation.split() d.appendleft(int(x)) elif operation.startswith(\\"push_back\\"): _, x = operation.split() d.append(int(x)) elif operation == \\"pop_front\\": if d: d.popleft() elif operation == \\"pop_back\\": if d: d.pop() return list(d)"},{"question":"Write a function `largestUniqueSubstring` that, given a string, returns the longest substring that contains only unique characters. If there is a tie (multiple substrings of the same maximum length), return the substring that appears first. If the input is not a string or is empty, return `null/None`. Here are some examples: ```python largest_unique_substring(\\"abcabcbb\\") # returns \\"abc\\" largest_unique_substring(\\"bbbbb\\") # returns \\"b\\" largest_unique_substring(\\"pwwkew\\") # returns \\"wke\\" largest_unique_substring(\\"\\") # returns None largest_unique_substring(12345) # returns None largest_unique_substring(\\"aab\\") # returns \\"ab\\" ``` Ensure your solution handles edge cases efficiently and works for any reasonable input size. Good luck!","solution":"def largest_unique_substring(s): Returns the longest substring with all unique characters. If there is a tie, return the first appearing substring. If the input is not a string or is empty, return None. if not isinstance(s, str) or not s: return None start = 0 max_len = 0 max_substring = \\"\\" char_index_map = {} for end, char in enumerate(s): if char in char_index_map: start = max(start, char_index_map[char] + 1) char_index_map[char] = end current_len = end - start + 1 if current_len > max_len: max_len = current_len max_substring = s[start:end+1] return max_substring"},{"question":"Given an array of non-negative integers, determine the smallest positive integer that cannot be represented as the sum of any subset of the array. Example: Input: [1, 3, 6, 10, 11, 15] Output: 2 Explanation: You can create sums from the subsets like this: 1 -> {1} 2 -> Not possible to form 3 -> {3} ... Since 2 is the smallest positive integer that cannot be represented as the sum of any subset of the array, the output is 2. Another Example: Input: [1, 1, 1, 1] Output: 5 Explanation: You can create sums from the subsets like this: 1 -> {1} 2 -> {1, 1} ... Since 5 is the smallest positive integer that cannot be represented as the sum of any subset of the array, the output is 5.","solution":"def smallest_unrepresentable_sum(arr): arr.sort() res = 1 for num in arr: if num > res: break res += num return res"},{"question":"Dr. Smith is managing the inventory for a local hospital. He wants to ensure that essential medicines are restocked before they run out. You have been asked to help by writing a program that will list the medicines which need restocking based on their current stock. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of different medicines. - The next N lines each contain a string M, the name of the medicine, and an integer Q, the quantity of that medicine in stock separated by a space. -----Output:----- For each test case, print the names of the medicines that need restocking (i.e., with a quantity less than or equal to 10) in alphabetical order. If there are no medicines that need restocking, print \\"All medicines are sufficiently stocked\\". -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 50 - 1 leq text{length of } M leq 20 - 0 leq Q leq 100 -----Sample Input:----- 2 4 Paracetamol 15 Ibuprofen 8 Aspirin 5 Amoxicillin 22 3 Cetirizine 5 Atorvastatin 30 Metformin 0 -----Sample Output:----- Aspirin Ibuprofen Cetirizine Metformin -----EXPLANATION:----- In test case 1, \\"Aspirin\\" and \\"Ibuprofen\\" have quantities of 5 and 8 respectively, which are less than or equal to 10. These are printed in alphabetical order. In test case 2, \\"Cetirizine\\" and \\"Metformin\\" have quantities of 5 and 0 respectively, which are less than or equal to 10. These are printed in alphabetical order.","solution":"def medicines_to_restock(test_cases): Returns the list of medicines that need restocking, sorted alphabetically. If all medicines are sufficiently stocked, returns \\"All medicines are sufficiently stocked\\". result = [] for case in test_cases: N, medicines = case restock_list = [name for (name, qty) in medicines if qty <= 10] if restock_list: restock_list.sort() result.extend(restock_list) else: result.append(\\"All medicines are sufficiently stocked\\") return result"},{"question":"=====Problem Statement===== Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. You are given a binary tree and your task is to serialize the tree into a string and then deserialize the string back to a binary tree. The tree is defined with the following structure: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` The serialization format should be such that the string can be easily reconstructed back to the original tree structure. Examples Given binary tree: ``` 1 / 2 3 / 4 5 ``` Serialized string: ``` \\"1,2,N,N,3,4,N,N,5,N,N\\" ``` Notice that \'N\' denotes a null node. The deserialized binary tree should then be: ``` 1 / 2 3 / 4 5 ``` =====Input Format===== - A pre-order traversal representation of the tree as a string, where each node is separated by commas, and \'N\' represents a null node. =====Output Format===== - The output should be a tree structure root node. =====Function Signature===== ```python def serialize(root: TreeNode) -> str: pass def deserialize(data: str) -> TreeNode: pass ``` =====Constraints===== - The number of nodes in the tree is in the range [0, 1000]. - The value of each node is in the range [-1000, 1000].","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def serialize(root: TreeNode) -> str: def serialize_helper(node): if not node: result.append(\'N\') else: result.append(str(node.val)) serialize_helper(node.left) serialize_helper(node.right) result = [] serialize_helper(root) return \',\'.join(result) def deserialize(data: str) -> TreeNode: def deserialize_helper(): val = next(values) if val == \'N\': return None node = TreeNode(int(val)) node.left = deserialize_helper() node.right = deserialize_helper() return node values = iter(data.split(\',\')) return deserialize_helper()"},{"question":"In a cellular automaton, a grid of cells evolves through a series of time steps according to a set of rules based on the states of neighboring cells. One popular example is Conway\'s Game of Life where each cell in a 2D grid can be either \'alive\' or \'dead\' and evolves according to these rules: 1. Any live cell with fewer than two live neighbors dies (underpopulation). 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies (overpopulation). 4. Any dead cell with exactly three live neighbors becomes a live cell (reproduction). Write a function `next_generation(grid)` that takes an initial grid configuration as input and returns the grid configuration after one time step. Each cell in the grid will be represented by a boolean value, `True` for alive and `False` for dead. # Example ```python # Initial grid configuration grid = [ [False, True, False], [False, True, False], [False, True, False] ] next_gen = next_generation(grid) # After one time step print(next_gen) # Output should be: # [ # [False, False, False], # [True, True, True], # [False, False, False] # ] ``` # Constraints - The grid will be non-empty and rectangular. - Assume the grid boundaries are surrounded by dead cells (imagine an infinite grid that is all dead cells except for our finite grid). Implement the function with the following signature: ```python def next_generation(grid: List[List[bool]]) -> List[List[bool]]: pass ``` # Notes - You may assume that the input grid is valid and contains at least one cell. - The function should maintain the integrity of the input list and return a new list for the next generation.","solution":"from typing import List def next_generation(grid: List[List[bool]]) -> List[List[bool]]: rows, cols = len(grid), len(grid[0]) def count_live_neighbors(r, c): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] count = 0 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc]: count += 1 return count next_grid = [[False]*cols for _ in range(rows)] for r in range(rows): for c in range(cols): live_neighbors = count_live_neighbors(r, c) if grid[r][c]: if live_neighbors == 2 or live_neighbors == 3: next_grid[r][c] = True else: next_grid[r][c] = False else: if live_neighbors == 3: next_grid[r][c] = True return next_grid"},{"question":"You are given an array arr of n integers where each element arr[i] is initialized to i (i.e., arr[i] = i for all 0 <= i < n). You are allowed to perform the following operation any number of times: - Select two indices x and y such that 0 <= x, y < n and x != y, then swap the elements at these indices (i.e., perform a swap operation arr[x] ↔ arr[y]). The goal is to reverse the array (i.e., the final array should be [n-1, n-2, ..., 1, 0]). Given an integer n, the length of the array, return the minimum number of swap operations needed to reverse the array. Example 1: Input: n = 4 Output: 2 Explanation: arr = [0, 1, 2, 3] First swap arr[0] and arr[3], resulting in arr = [3, 1, 2, 0] Second swap arr[1] and arr[2], resulting in arr = [3, 2, 1, 0] Example 2: Input: n = 5 Output: 2 Explanation: arr = [0, 1, 2, 3, 4] First swap arr[0] and arr[4], resulting in arr = [4, 1, 2, 3, 0] Second swap arr[1] and arr[3], resulting in arr = [4, 3, 2, 1, 0] Constraints: 1 <= n <= 10^4","solution":"def minimum_swaps_to_reverse(n): Returns the minimum number of swap operations needed to reverse the array of length n. return n // 2"},{"question":"You are given an integer array A of length N. Your task is to perform Q queries on this array. Each query can be one of the following types: 1. Update the value at index X to Y. 2. Find the sum of the subarray from index L to index R (inclusive). Write a program that processes all the queries and gives the results for the sum queries. -----Input----- The first line of the input contains two integers N and Q, denoting the length of the array and the number of queries respectively. The second line contains N integers representing the array A. Each of the next Q lines contains one query. A query can be one of the following: - \\"1 X Y\\": This means update the value at index X to Y. (1 ≤ X ≤ N) - \\"2 L R\\": This means find the sum of the subarray from index L to index R (inclusive). (1 ≤ L ≤ R ≤ N) -----Output----- For each query of type \\"2 L R\\", output a single line containing one integer — the sum of the subarray from index L to index R. -----Constraints----- - 1 ≤ N ≤ 100,000 - 1 ≤ Q ≤ 100,000 - 1 ≤ A[i] ≤ 109 - 1 ≤ Y ≤ 109 -----Example----- Input: 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 3 5 1 5 2 Output: 6 13 19 -----Explanation----- The initial array is [1, 2, 3, 4, 5]. Query 1 asks for the sum from index 1 to 3, which is 1 + 2 + 3 = 6. Query 2 updates the value at index 3 to 10, making the array [1, 2, 10, 4, 5]. Query 3 asks for the sum from index 1 to 3, which is 1 + 2 + 10 = 13. Query 4 asks for the sum from index 3 to 5, which is 10 + 4 + 5 = 19. Query 5 updates the value at index 5 to 2, making the array [1, 2, 10, 4, 2]. However, there are no more sum queries to process.","solution":"class ArrayManager: def __init__(self, array): self.array = array def update(self, x, y): self.array[x - 1] = y def sum_subarray(self, l, r): return sum(self.array[l - 1:r]) def process_queries(N, Q, array, queries): manager = ArrayManager(array) results = [] for query in queries: parts = query.split() query_type = int(parts[0]) if query_type == 1: x = int(parts[1]) y = int(parts[2]) manager.update(x, y) elif query_type == 2: l = int(parts[1]) r = int(parts[2]) results.append(manager.sum_subarray(l, r)) return results"},{"question":"Alicia wants to organize a small fun game during her friend\'s birthday party. She came up with an idea of a shooting range game using toy guns and targets represented as integers. Each target has a particular strength, and each toy gun can shoot a bullet with a specific power. A target is destroyed if the bullet power is greater than or equal to the target strength. Now, Alicia has multiple toy guns, each having different bullet power. She wants to know the maximum number of targets that can be destroyed using the toy guns she has. For each test case, you are given the strength of targets and the power of bullets for the guns. Help Alicia determine the maximum number of targets she can destroy using the available toy guns and bullets. You are given: - The number of test cases T - For each test case: - An integer N representing the number of targets - A sequence of integers representing the strength of each target - An integer M representing the number of toy guns - A sequence of integers representing the power of the bullets for each toy gun You need to output the maximum number of targets that can be destroyed for each test case. **Input:** - The first line contains an integer T, the number of test cases - For each test case: - The first line contains an integer N - The second line contains N space-separated integers representing the strength of the targets - The third line contains an integer M - The fourth line contains M space-separated integers representing the power of the bullets for the toy guns **Output:** - For each test case, print a single integer, the maximum number of targets that can be destroyed **Constraints:** - 1 <= T <= 10 - 1 <= N, M <= 10^5 - 1 <= Target strength, Bullet power <= 10^5 **Sample Input:** 1 5 1 2 3 4 5 3 3 1 2 **Sample Output:** 4 **Explanation:** In the sample case: - Targets have strengths [1, 2, 3, 4, 5] - Guns have bullet powers [3, 1, 2] We can destroy: - Target strength 1 with bullet power 1 - Target strength 2 with bullet power 2 - Target strength 3 with bullet power 3 - No bullets left to destroy targets with strength 4 and 5 Thus, the maximum number of targets destroyed is 4.","solution":"def max_targets_destroyed(T, test_cases): results = [] for case in test_cases: N, target_strengths, M, bullet_powers = case target_strengths.sort() bullet_powers.sort() destroyed_count = 0 i = 0 j = 0 while i < N and j < M: if bullet_powers[j] >= target_strengths[i]: destroyed_count += 1 i += 1 j += 1 results.append(destroyed_count) return results"},{"question":"A city planner is developing a new transportation system for a city laid out in a rectangular grid. Each cell in the grid represents a distinct intersection in the city. Some intersections have traffic lights, while others do not. Intersections with traffic lights can connect horizontally and vertically to adjacent intersections, forming different regions of connected intersections with traffic lights. Given the description of the city\'s grid, determine the number of distinct regions of connected intersections with traffic lights. A region is defined as a group of adjacent intersections (connected horizontally or vertically) that all have traffic lights. Input format: The first line contains an integer T, the number of test cases. The following lines contain T test cases (without any newlines between them). The first line of each test case contains two integers N and M, separated by a single space. Each of the next N lines contains M characters without any spaces between them, and without any leading or trailing spaces. Each character is either \'Y\' (indicating an intersection with a traffic light) or \'N\' (indicating an intersection without a traffic light). Output format: For each test case, print the number of distinct regions of connected intersections with traffic lights. Constraints: 1 ≤ T ≤ 50 1 ≤ N, M ≤ 50 Sample input: 3 2 2 YY NY 3 3 YNY NYN YNY 4 4 YYY YNY NYN YYY Sample output: 1 5 2 Explanation: In the first case, there is only one region of connected intersections with traffic lights, including all three \'Y\'s. In the second case, there are five individual intersections with traffic lights that are not connected to each other. In the third case, there are two distinct regions of connected intersections with traffic lights. The first region includes (0,0), (0,1), (1,0), and the second region includes the rest of the \'Y\'s.","solution":"def num_regions_of_lights(test_cases): def dfs(grid, visited, i, j, N, M): if i < 0 or i >= N or j < 0 or j >= M or visited[i][j] or grid[i][j] == \'N\': return visited[i][j] = True dfs(grid, visited, i+1, j, N, M) dfs(grid, visited, i-1, j, N, M) dfs(grid, visited, i, j+1, N, M) dfs(grid, visited, i, j-1, N, M) results = [] for case in test_cases: N, M = case[0] grid = case[1] visited = [[False for _ in range(M)] for _ in range(N)] count = 0 for i in range(N): for j in range(M): if grid[i][j] == \'Y\' and not visited[i][j]: dfs(grid, visited, i, j, N, M) count += 1 results.append(count) return results"},{"question":"Anna is the manager of a local bookstore. She is setting up a promotional sale where if customers buy a certain number of books, they receive a discount on the total purchase. She wants to calculate the total cost efficiently during the promotional period. The discount is applied only if the number of books purchased meets or exceeds a specified threshold. The discount is a fixed percentage off the total cost. Write a function `calculate_total_cost(prices, discount_threshold, discount_percentage)` that takes the following parameters: - `prices`: A list of integers where each integer represents the price of a single book. - `discount_threshold`: An integer representing the number of books that need to be purchased to qualify for the discount. - `discount_percentage`: A float representing the discount percentage to be applied if the threshold is met. The function should return a float representing the total cost after the discount is applied, rounded to 2 decimal places. If the number of books does not meet the discount threshold, the total cost should be the sum of the individual book prices without any discount. **Examples**: ``` calculate_total_cost([20, 15, 30, 10], 3, 10) should return 67.50 calculate_total_cost([20, 15], 3, 10) should return 35.00 calculate_total_cost([20, 15, 30, 10, 25], 5, 20) should return 80.00 calculate_total_cost([], 3, 10) should return 0.00 ``` **Notes**: - The discount percentage is given as a float where `0.10` represents `10%`. - Ensure the function handles edge cases such as an empty list of prices. - The function should properly round the result to 2 decimal places. - No constraints are given on the maximum number of books or the maximum price of a book.","solution":"def calculate_total_cost(prices, discount_threshold, discount_percentage): Calculates the total cost after applying a promotional discount. :param prices: List of integers representing book prices. :param discount_threshold: Integer threshold for the number of books to get the discount. :param discount_percentage: Float representing the discount percentage (e.g., 0.10 for 10%). :return: Float representing the total cost after discount, rounded to 2 decimal places. total_cost = sum(prices) num_books = len(prices) if num_books >= discount_threshold: discount = total_cost * discount_percentage total_cost -= discount return round(total_cost, 2)"},{"question":"You are given the heads of two singly linked lists, `headA` and `headB`. These two linked lists are potentially intersecting at some point. Write a function to find the node at which the intersection of two singly linked lists begins or return null if there is no intersection. Example 1: Input: headA = [4,1,8,4,5], headB = [5,6,1,8,4,5] Output: Reference of the node with value 8 Explanation: The two linked lists intersect at the node with value 8. Example 2: Input: headA = [1,9,1,2,4], headB = [3,2,4] Output: Reference of the node with value 2 Explanation: The two linked lists intersect at the node with value 2. Example 3: Input: headA = [2,6,4], headB = [1,5] Output: null Explanation: The two linked lists do not intersect. Constraints: * The number of nodes in `headA` and `headB` are in the range [0, 10^4]. * The number of nodes in total is in the range [0, 10^4]. * The values of the nodes are in the range [1, 10^5]. * Your code should preferably run in O(n) time and use only O(1) memory.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def getIntersectionNode(headA, headB): :type headA, headB: ListNode :rtype: ListNode if not headA or not headB: return None pointerA, pointerB = headA, headB while pointerA != pointerB: pointerA = pointerA.next if pointerA else headB pointerB = pointerB.next if pointerB else headA return pointerA"},{"question":"Design a function `flatten_dictionary` that takes a dictionary with nested dictionaries as input and returns a new dictionary with only one level of nesting, using dot-separated keys to indicate the nesting. If a value is not a dictionary, it should appear as-is in the output dictionary. The input dictionary can have any level of nested dictionaries. # Constraints - The keys in the nested dictionary are strings. - The values in the dictionary can be either another dictionary or any other data type. # Example ```python input_dict = { \\"key1\\": 1, \\"key2\\": { \\"a\\": 2, \\"b\\": 3, \\"c\\": { \\"d\\": 4, \\"e\\": 5 } } } flatten_dictionary(input_dict) # should return {\'key1\': 1, \'key2.a\': 2, \'key2.b\': 3, \'key2.c.d\': 4, \'key2.c.e\': 5} input_dict2 = { \\"a\\": { \\"b\\": { \\"c\\": { \\"d\\": 1 } } } } flatten_dictionary(input_dict2) # should return {\'a.b.c.d\': 1} ```","solution":"def flatten_dictionary(d, parent_key=\'\', sep=\'.\'): Flatten a nested dictionary using dot notation for the keys. Args: d (dict): The dictionary to flatten. parent_key (str): The base key string. sep (str): The separator to use for concatenating keys. Returns: dict: The flattened dictionary. items = [] for k, v in d.items(): new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You are given an array of integers and a list of queries. Each query consists of two integers L and R (1-based index), and the task is to find the sum of all unique elements in the subarray defined by the indices L to R inclusive. Write a function to process the array and answer each query. -----Input----- The first line of input contains two integers n and q (1 leq n, q leq 10^5), the size of the array and the number of queries respectively. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), the elements of the array. Each of the next q lines contains two integers L and R (1 leq L leq R leq n), the query range. -----Output----- For each query, output a single integer: the sum of the unique elements within the subarray from L to R inclusive. -----Example----- Input 6 3 1 2 2 1 3 4 1 3 2 5 1 6 Output 3 6 10 -----Explanation----- For the first query, the subarray is [1, 2, 2]. The sum of the unique elements is 1 + 2 = 3. For the second query, the subarray is [2, 2, 1, 3]. The sum of the unique elements is 2 + 1 + 3 = 6. For the third query, the subarray is [1, 2, 2, 1, 3, 4]. The sum of the unique elements is 1 + 2 + 3 + 4 = 10.","solution":"def sum_unique_elements(arr, queries): Given an array and a list of queries, return the sum of unique elements in subarray defined by each query (1-based indices L to R inclusive). results = [] for L, R in queries: subarray = arr[L-1:R] unique_elements_sum = sum(set(subarray)) results.append(unique_elements_sum) return results"},{"question":"Given an array of integers and an integer K, find the number of subarrays whose product of all elements is less than K. Subarray is defined as a contiguous subset of an array. Return the total number of subarrays whose elements\' product is less than K. The results may be large, so return the final result modulo 10^9 + 7. Example 1: Input: arr = [10, 5, 2, 6], K = 100 Output: 8 Explanation: The 8 subarrays are [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6] Example 2: Input: arr = [1, 2, 3], K = 0 Output: 0 Explanation: There are no subarrays whose product is less than 0. Note: 1. 1 <= arr.length <= 10^6 2. 1 <= arr[i] <= 1000 3. 0 <= K <= 10^9","solution":"def num_subarray_product_less_than_k(arr, k): if k <= 1: return 0 MOD = 10**9 + 7 prod = 1 left = 0 result = 0 for right in range(len(arr)): prod *= arr[right] while prod >= k and left <= right: prod //= arr[left] left += 1 result += right - left + 1 return result % MOD"},{"question":"Given an undirected graph represented as an adjacency list, write a function to find the shortest path in terms of number of edges between two given nodes A and B. Example: Input: graph = {0: [1, 2], 1: [0, 2, 3], 2: [0, 1, 3], 3: [1, 2]} start = 0 end = 3 Output: 2 Explanation: The graph can be visualized as follows: 0--1--3 | | 2 The shortest path from node 0 to node 3 is 0 -> 1 -> 3 or 0 -> 2 -> 3, both of which contain 2 edges. Note: - The number of nodes in the graph is between 2 and 1000. - The graph is connected, i.e., there is always a path between any pair of nodes. - The length of the adjacency list for each node will not exceed 100.","solution":"from collections import deque def shortest_path(graph, start, end): Finds the shortest path in terms of number of edges between two nodes in an undirected graph. Parameters: graph (dict): Adjacency list representation of the graph. start (int): Starting node. end (int): Ending node. Returns: int: The number of edges in the shortest path from start to end. queue = deque([(start, 0)]) visited = set() while queue: node, distance = queue.popleft() if node == end: return distance if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append((neighbor, distance + 1)) return -1 # Example usage: # graph = {0: [1, 2], 1: [0, 2, 3], 2: [0, 1, 3], 3: [1, 2]} # start = 0 # end = 3 # print(shortest_path(graph, start, end)) # Output: 2"},{"question":"Create a function that takes a single integer `n` as input and returns the number of valid parenthesis strings of length `2n`. A valid parenthesis string is one that can be considered as properly matched when opening and closing brackets are properly nested. For example, ```python valid_parentheses(1) => returns 1 valid_parentheses(2) => returns 2 valid_parentheses(3) => returns 5 ``` Explanation: For `n = 1`, the only valid parenthesis string is `()`. For `n = 2`, the valid parenthesis strings are `()()` and `(())` For `n = 3`, the valid parenthesis strings are `()()()`, `(()())`, `(())()`, `()(())`, and `((()))`. To solve this problem, consider using the concept of Catalan numbers which can be computed using dynamic programming or recursion with memoization.","solution":"def valid_parentheses(n): Returns the number of valid parenthesis strings of length 2n. This is equivalent to the nth Catalan number. if n == 0: return 1 # Initialize a list to store computed Catalan numbers catalan = [0] * (n + 1) catalan[0] = 1 # Compute the nth Catalan number using the recursive formula: # C(n) = Sum(C(i) * C(n-i-1)) for i from 0 to n-1 for i in range(1, n + 1): for j in range(i): catalan[i] += catalan[j] * catalan[i - 1 - j] return catalan[n]"},{"question":"-----Problem Statement----- You are given a list of N integers, A. Your task is to find the length of the longest subsequence of A such that the difference between any two consecutive elements in this subsequence is exactly K. -----Input----- Input is given in the following format: N K A_1 A_2 . . . A_N -----Output----- Output the length of the longest subsequence of A such that the difference between any two consecutive elements in this subsequence is exactly K. -----Constraints----- - 1 leq N leq 2times10^5 - -10^9 leq K leq 10^9 - -10^9 leq A_i leq 10^9 - All values in input are integers. -----Sample Input----- 7 2 4 6 8 3 5 7 9 -----Sample Output----- 4 -----EXPLANATION----- The longest subsequence with a difference of exactly 2 between consecutive elements is (4, 6, 8, 10). Thus, the length of this subsequence is 4.","solution":"def longest_subsequence(N, K, A): Returns the length of the longest subsequence such that the difference between any two consecutive elements is exactly K. from collections import defaultdict # Dict to store the length of subsequence ending at value dp = defaultdict(int) for value in A: dp[value] = dp[value - K] + 1 return max(dp.values())"},{"question":"Given a string s containing lowercase English letters, return the minimum number of characters you need to delete to make the string a palindrome. Here, a palindrome is a string that reads the same backward as forward. Example 1: Input: s = \\"abca\\" Output: 1 Explanation: You can delete the character \'c\' to make the string \\"aba\\", which is a palindrome. Example 2: Input: s = \\"racecar\\" Output: 0 Explanation: The string \\"racecar\\" is already a palindrome. Example 3: Input: s = \\"google\\" Output: 2 Explanation: You can delete the characters \'g\' and \'e\' to make the string \\"goog\\", which is a palindrome. Constraints: 1 <= s.length <= 1000 s consists of lowercase English letters only. Note: The solution should aim to achieve this with a time complexity that is efficient for the given constraints.","solution":"def min_deletions_to_make_palindrome(s): Returns the minimum number of characters you need to delete to make the string a palindrome. def longest_palindromic_subsequence(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) return dp[0][n - 1] n = len(s) lps_length = longest_palindromic_subsequence(s) return n - lps_length"},{"question":"You are given an array of integers A of size N. Your task is to find the maximum length of a subarray with an equal number of even and odd numbers. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains one integer N denoting the size of the array. - The second line of each test case contains N space-separated integers A_1, A_2, ldots, A_N. -----Output----- For each test case, print a single line containing one integer ― the maximum length of a subarray with an equal number of even and odd numbers. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 1 le A_i le 10^9 -----Example Input----- 2 5 1 2 3 4 5 4 2 4 6 8 -----Example Output----- 4 0","solution":"def max_length_equal_even_odd_subarray(N, A): count_even_odd_diff = {} count_even_odd_diff[0] = -1 max_len = 0 diff = 0 for i in range(N): if A[i] % 2 == 0: diff += 1 else: diff -= 1 if diff in count_even_odd_diff: max_len = max(max_len, i - count_even_odd_diff[diff]) else: count_even_odd_diff[diff] = i return max_len def process_test_cases(T, test_cases): results = [] for i in range(T): N, A = test_cases[i] results.append(max_length_equal_even_odd_subarray(N, A)) return results"},{"question":"# Task Luna is running a marathon and encounters an obstacle course that includes `n` steps. At each step, she has the option to take either a single step or a double step. She wonders in how many distinct ways she can reach the top of the obstacle course. Help Luna determine the number of distinct ways to reach the `n`th step. # Input/Output - `[input]` integer `n` The number of steps in the obstacle course. `1 ≤ n ≤ 45` - `[output]` an integer The number of distinct ways to reach the `n`th step. # Example For `n = 4`, the result should be `5`. ``` There are 5 ways to reach the 4th step: 1 + 1 + 1 + 1 1 + 1 + 2 1 + 2 + 1 2 + 1 + 1 2 + 2 ```","solution":"def num_ways(n): Returns the number of distinct ways to reach the nth step. if n == 1: return 1 if n == 2: return 2 # Initialization of base cases first, second = 1, 2 # Calculating the number of ways for each step up to n for i in range(3, n + 1): first, second = second, first + second return second"},{"question":"***Fibonacci Sequence using Memoization*** Write a function `fibonacci(n)` that returns the n-th Fibonacci number. The Fibonacci sequence is defined as follows: - `fibonacci(0) = 0` - `fibonacci(1) = 1` - `fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2)` for n > 1 However, your function must implement memoization to store intermediate results and optimize performance, avoiding redundant calculations. You are not allowed to use loops in this implementation. Use recursion and memoization techniques to achieve the result efficiently. Example: ```python fibonacci(0) # Should return 0 fibonacci(1) # Should return 1 fibonacci(10) # Should return 55 fibonacci(20) # Should return 6765 ```","solution":"def fibonacci(n, memo={}): Return the n-th Fibonacci number using memoization. Parameters: n (int): The position of the Fibonacci number to be computed. Must be a non-negative integer. Returns: int: The n-th Fibonacci number. if n in memo: return memo[n] if n == 0: return 0 if n == 1: return 1 memo[n] = fibonacci(n - 1, memo) + fibonacci(n - 2, memo) return memo[n]"},{"question":"Given an array of integers `nums` and an integer `target`. Find the number of pairs of integers in the array whose difference is equal to `target`. Example 1: Input: `nums = [1, 7, 5, 9, 2, 12, 3]`, `target = 2` Output: `4` Explanation: The pairs with a difference of 2 are: (1, 3), (3, 5), (5, 7), (7, 9). Example 2: Input: `nums = [1, 1, 1, 1]`, `target = 0` Output: `6` Explanation: The pairs with a difference of 0 are: (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1). Example 3: Input: `nums = [4, 4, 4, 4]`, `target = 3` Output: `0` Explanation: There are no pairs with a difference of 3. Constraints: - `1 <= nums.length <= 10^5` - `-10^9 <= nums[i] <= 10^9` - `0 <= target <= 10^9`","solution":"def count_pairs_with_difference(nums, target): Returns the number of pairs of integers in the array whose difference is equal to target. if target == 0: counts = {} for num in nums: if num in counts: counts[num] += 1 else: counts[num] = 1 return sum(c * (c - 1) // 2 for c in counts.values()) num_set = set(nums) count = 0 for num in nums: if num + target in num_set: count += 1 if num - target in num_set: count += 1 num_set.discard(num) return count"},{"question":"Hexadecimal Strings to Binary Count Chris is preparing for a coding competition, and one of the tasks is to convert hexadecimal strings to their binary equivalents and count the number of \'1\' bits. He needs your help to write a program that can handle multiple test cases efficiently. Each test case consists of a single hexadecimal string, and your task is to convert it to binary form and count the number of \'1\' bits in the binary representation. -----Input----- - The first line of input contains a single integer T — the number of test cases. (1 ≤ T ≤ 1000) - Each of the next T lines contains a single hexadecimal string S. The string consists of characters \'0\'-\'9\' and \'a\'-\'f\' and is of length between 1 and 50 inclusive. -----Output----- - For each test case, output a single line containing a single integer — the number of \'1\' bits in the binary representation of the hexadecimal string. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 50 -----Example----- Input: 3 1a 2f 3b Output: 3 5 5 -----Explanation----- Example case 1. The hexadecimal string \\"1a\\" converts to binary \\"11010\\". There are 3 \'1\' bits in \\"11010\\". Example case 2. The hexadecimal string \\"2f\\" converts to binary \\"101111\\". There are 5 \'1\' bits in \\"101111\\". Example case 3. The hexadecimal string \\"3b\\" converts to binary \\"111011\\". There are 5 \'1\' bits in \\"111011\\".","solution":"def count_ones_in_hex_to_binary(hex_strings): def hex_to_bin(hex_str): bin_str = bin(int(hex_str, 16))[2:] return bin_str.count(\'1\') results = [hex_to_bin(hex_str) for hex_str in hex_strings] return results"},{"question":"Implement a function `count_paths` to determine the number of unique paths from the top-left corner to the bottom-right corner of an `m x n` grid. You can only move either down or right at any point in time. Write a function `count_paths(m, n)` where `m` is the number of rows and `n` is the number of columns in the grid. # Examples ```python count_paths(2, 2) # Should return 2, as there are two paths: Right -> Down, Down -> Right. count_paths(3, 7) # Should return 28, as there are 28 unique paths. ``` # Constraints - The dimensions of the grid are at most 100 x 100. - Use dynamic programming for an efficient solution. # Hint You can use a 2D table `dp` where `dp[i][j]` represents the number of ways to reach cell `(i, j)` in the grid. The state transition can be derived from the fact that you can either come from the cell above `(i-1, j)` or from the cell to the left `(i, j-1)`.","solution":"def count_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. # Create a 2D DP array and initialize with 0s dp = [[0] * n for _ in range(m)] # There is exactly one way to reach any cell in the first row and first column for i in range(m): dp[i][0] = 1 for j in range(n): dp[0][j] = 1 # Compute the number of ways for the rest of the cells for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function `flatten_dict` that takes a nested dictionary and returns a new dictionary with only one level. The keys of the new dictionary should be formed by concatenating the keys from each level of the original dictionary, separated by a dot (\'.\'). For example, given this nested dictionary: ```python { \'a\': { \'b\': 1, \'c\': { \'d\': 2, \'e\': 3 } }, \'f\': { \'g\': 4 } } ``` Your function should return the following dictionary: ```python { \'a.b\': 1, \'a.c.d\': 2, \'a.c.e\': 3, \'f.g\': 4 } ``` Write the function `flatten_dict(nested_dict)` such that it achieves the desired transformation.","solution":"def flatten_dict(nested_dict, parent_key=\'\', sep=\'.\'): Flatten a nested dictionary. :param nested_dict: The dictionary to flatten. :param parent_key: The base key string for nested keys (used in recursion). :param sep: Separator between keys. :return: A flattened dictionary. items = [] for k, v in nested_dict.items(): new_key = parent_key + sep + k if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Luna is a talented artist preparing for her next big gallery exhibition. She has created a series of n paintings, each with a distinct beauty score. Luna wants to arrange the paintings in a specific order to maximize the visual appeal of her exhibition. To do this, she needs to ensure that for any three consecutive paintings in the arrangement, the sum of their beauty scores is not divisible by k. Can you help Luna find an arrangement of her paintings that meets this requirement? -----Input----- The first line contains two integers n and k (3 le n le 3000, 2 le k le 1000) - the number of paintings and the divisor. The second line contains n integers b_1, b_2, ldots, b_n (1 le b_i le 10^9) - the beauty scores of the paintings. -----Output----- If it is possible to arrange the paintings to meet the requirement, print \\"Yes\\" followed by a permutation of n integers representing the indices of the paintings in the desired order. If it is not possible, print \\"No\\". -----Examples----- Input 4 3 1 2 3 4 Output Yes 1 3 2 4 Input 3 2 1 3 5 Output Yes 1 2 3 Input 5 4 2 4 6 8 10 Output No -----Note----- In the first example, arranging the paintings in the order 1, 3, 2, 4 ensures that no three consecutive paintings have a sum of beauty scores divisible by 3. In the second example, any permutation of the paintings satisfies the conditions since none of their beauty scores sum up to a value divisible by 2. In the third example, it is impossible to arrange the paintings such that the sum of beauty scores of any three consecutive paintings is not divisible by 4.","solution":"from itertools import permutations def can_arrange_paintings(n, k, beauty_scores): # Generate all the permutations of indices for perm in permutations(range(1, n+1)): valid = True # Check every group of three consecutive paintings for i in range(n-2): total_beauty = beauty_scores[perm[i]-1] + beauty_scores[perm[i+1]-1] + beauty_scores[perm[i+2]-1] if total_beauty % k == 0: valid = False break if valid: return (\\"Yes\\", list(perm)) return (\\"No\\",) # Example Usage # n, k = 4, 3 # beauty_scores = [1, 2, 3, 4] # print(can_arrange_paintings(n, k, beauty_scores))"},{"question":"Given a list of integers, write a function that groups the integers by their frequency and prints them in ascending order based on frequency. The function should return a dictionary where the keys represent the frequency of the numbers and the values are lists of numbers with that frequency, sorted in ascending order. Ensure the dictionary is sorted in ascending order when converting it to a string for the final output format. Example: ```python group_by_frequency([4, 5, 6, 5, 4, 3, 2, 1]) # Output: {1: [1, 2, 3, 6], 2: [4, 5]} group_by_frequency([9, 9, 8, 7, 8, 7, 8]) # Output: {1: [], 2: [7, 9], 3: [8]} ``` Notes: - The output dictionary should have all frequencies starting from 1 to the maximum frequency found in the input list. - The values of keys where no elements are found should be included in the dictionary with an empty list as the value. - Your function should handle any list of integers and operate efficiently.","solution":"from collections import defaultdict def group_by_frequency(lst): Groups the integers by their frequency and prints them in ascending order based on frequency. Parameters: - lst: List of integers. Returns: - A dictionary where the keys represent the frequency of the numbers and the values are lists of numbers with that frequency, sorted in ascending order. # Count frequencies of each element freq_count = defaultdict(int) for num in lst: freq_count[num] += 1 # Create a dictionary to group numbers by their frequency grouped_freq = defaultdict(list) for num, freq in freq_count.items(): grouped_freq[freq].append(num) # Sort the lists of numbers in ascending order within each frequency for freq in grouped_freq: grouped_freq[freq].sort() # Determine the maximum frequency max_frequency = max(grouped_freq, default=0) # Ensure dictionary contains all frequencies from 1 to max_frequency result = {} for i in range(1, max_frequency + 1): result[i] = grouped_freq.get(i, []) return result"},{"question":"Write a function that takes two strings as input, representing two integers in Roman numeral format, and returns their sum as a Roman numeral. The input strings will not necessarily be in their simplest form, but the output must be. Roman numeral symbols: * `I = 1` * `V = 5` * `X = 10` * `L = 50` * `C = 100` * `D = 500` * `M = 1,000` You can assume that both input strings are valid Roman numerals. Examples: ```python print(roman_sum(\\"XIII\\", \\"IV\\")) # output: \\"XVII\\" print(roman_sum(\\"X\\",\\"X\\")) # output: \\"XX\\" print(roman_sum(\\"IX\\",\\"I\\")) # output: \\"X\\" ```","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. roman_dict = {\'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000} total = 0 prev_value = 0 for char in reversed(s): value = roman_dict[char] if value < prev_value: total -= value else: total += value prev_value = value return total def int_to_roman(num): Convert an integer to a Roman numeral. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num def roman_sum(s1, s2): Compute the sum of two Roman numerals given as strings and return the result as a Roman numeral. num1 = roman_to_int(s1) num2 = roman_to_int(s2) total = num1 + num2 return int_to_roman(total)"},{"question":"Given a list of n integers, determine the longest contiguous subarray that has an equal number of even and odd integers. If there are multiple subarrays of the same length, return the one that starts at the smallest index. -----Input----- The first line contains an integer T denoting the total number of test cases. For each test case, the first line contains an integer n denoting the number of elements in the list. The second line contains n space-separated integers. -----Output----- For each test case, output the longest contiguous subarray with an equal number of even and odd integers. If there are multiple such subarrays, output the one that starts at the smallest index. -----Constraints----- - 1 <= T <= 10 - 2 <= n <= 1000 - -10^5 <= a[i] <= 10^5 -----Example----- Input: 2 5 1 2 3 4 5 4 1 2 3 4 Output: 1 2 3 4 1 2 3 4 -----Explanation----- For the first test case, the longest subarray with equal even and odd numbers is [1, 2, 3, 4]. For the second test case, there are two subarrays with equal even and odd numbers: [1, 2] and [1, 2, 3, 4]. The longer one is [1, 2, 3, 4].","solution":"def find_longest_even_odd_subarray(arr): Returns the longest contiguous subarray with equal number of even and odd integers. n = len(arr) max_len = 0 start = 0 # Create a map to store the first occurrence of sums. prefix_sum = {0: -1} sum_ = 0 for i in range(n): # Check if the current element is even or odd if arr[i] % 2 == 0: sum_ += 1 else: sum_ -= 1 if sum_ in prefix_sum: if max_len < i - prefix_sum[sum_]: max_len = i - prefix_sum[sum_] start = prefix_sum[sum_] + 1 else: prefix_sum[sum_] = i return arr[start:start+max_len] def process_test_cases(test_cases): results = [] for n, arr in test_cases: result = find_longest_even_odd_subarray(arr) results.append(result) return results"},{"question":"# Task Write a function to find the sum of all prime factors of a given number `n`. A prime factor is a factor that is a prime number. Your task is to implement the `sum_of_prime_factors(n)` function which will return the sum of all prime factors of `n`. # Example For `n = 18`, the output should be `5`. Explanation: ``` Prime factors of 18 are 2 and 3. 2 + 3 = 5 ``` For `n = 28`, the output should be `10`. Explanation: ``` Prime factors of 28 are 2 and 7. 2 + 7 = 9 ``` # Input/Output - `[input]` integer `n` Constraints: `2 ≤ n ≤ 10^6` - `[output]` an integer The sum of all prime factors of `n`.","solution":"def sum_of_prime_factors(n): Returns the sum of all prime factors of n. def is_prime(num): if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True if n <= 1: return 0 prime_factors_sum = 0 factor = 2 # Check for each factor from 2 to sqrt(n) while factor * factor <= n: if n % factor == 0: if is_prime(factor): prime_factors_sum += factor while n % factor == 0: n //= factor factor += 1 # If n is still greater than 1, it must be a prime number if n > 1 and is_prime(n): prime_factors_sum += n return prime_factors_sum"},{"question":"Rotate Matrix Write a function that takes a square matrix (a list of lists) as input and rotates it 90 degrees clockwise. The function should modify the matrix in place (i.e., it should directly mutate the input matrix) and return nothing. # Constraint: - The input matrix will always be a square matrix (n x n). # Hint: To rotate the matrix 90 degrees clockwise, you can transpose the matrix and then reverse each row. # Further help: More information on matrix rotation can be found [here](https://en.wikipedia.org/wiki/Rotation_matrix). Examples: ```python rotate_matrix([[1,2,3], [4,5,6], [7,8,9]]) # The modified matrix should be: # [ # [7,4,1], # [8,5,2], # [9,6,3] # ] rotate_matrix([[1,2], [3,4]]) # The modified matrix should be: # [ # [3,1], # [4,2] # ] ```","solution":"def rotate_matrix(matrix): Rotates the input n x n matrix 90 degrees clockwise. Modifies the matrix in place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"Given an array of integers, write a function that checks if there are three consecutive even numbers in the array. The function should return `true` if such a sequence exists, and `false` otherwise. # Input * An array of integers, where the length of the array is between 1 and 10^5. * Each integer is between -10^9 and 10^9. # Output * A boolean value indicating whether three consecutive even numbers exist in the array. # Examples Example 1: Input: `[1, 2, 4, 6, 7, 8]` Output: `true` Explanation: The array contains the sequence [4, 6, 8] which are three consecutive even numbers. Example 2: Input: `[1, 3, 5, 7, 9]` Output: `false` Explanation: The array does not contain any set of three consecutive even numbers. # Constraints * The algorithm should run in linear time, O(n), where n is the length of the array. * The function should minimize the use of additional space and should be optimized for performance.","solution":"def has_three_consecutive_evens(arr): Checks if there are three consecutive even numbers in the array. Parameters: arr (list of int): List of integers Returns: bool: True if three consecutive even numbers exist, otherwise False. consecutive_count = 0 for num in arr: if num % 2 == 0: consecutive_count += 1 if consecutive_count == 3: return True else: consecutive_count = 0 return False"},{"question":"You are given an array of integers where each integer represents a unique id of a book. Your task is to find the longest subsequence of consecutive books in the array and return its length. If there are no consecutive books, return 0. Input: The first line contains a single integer T, denoting the number of test cases. Each test case consists of two lines: the first line contains a single integer `n` (1 ≤ n ≤ 10000), the size of the array. The second line contains `n` space-separated integers representing the unique ids of the books. Output: For each test case, in a new line, print the length of the longest subsequence of consecutive books. Example Input: 2 6 100 4 200 1 3 2 5 1 2 3 10 11 Example Output: 4 3 Explanation: For the first test case: The longest consecutive subsequence is [1, 2, 3, 4], which has length 4. For the second test case: The longest consecutive subsequence is [1, 2, 3], which has length 3.","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest consecutive subsequence of integers in arr. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in arr: if num - 1 not in num_set: # Check if it\'s the start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak def process_test_cases(T, test_cases): results = [] for i in range(T): arr = test_cases[i] results.append(longest_consecutive_subsequence(arr)) return results"},{"question":"You are given an array of integers. Your task is to find the minimum number of operations required to make all the elements of the array equal. In one operation, you can select a single element of the array and either increment it or decrement it by 1. -----Input----- The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of elements in the array. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the array. -----Output----- Print a single integer — the minimum number of operations required to make all the elements of the array equal. -----Examples----- Input 4 1 2 3 4 Output 4 Input 3 7 7 7 Output 0 Input 5 1 10 2 9 3 Output 16","solution":"def min_operations_to_equal_elements(n, arr): Returns the minimum number of operations required to make all elements of the array equal. In one operation, you can select a single element of the array and either increment it or decrement it by 1. # Find the median of the array arr.sort() median = arr[n // 2] # Compute the total number of operations required to set all elements to the median operations = sum(abs(x - median) for x in arr) return operations"},{"question":"Write a function `find_most_frequent` that takes a list of integers and returns the integer that appears most frequently in the list. If there are multiple numbers with the same highest frequency, return the smallest number among them. Assume that the input list is non-empty and contains only positive integers. **Example:** Input: ``` [1, 3, 2, 2, 4, 3, 5] ``` Output: ``` 2 ``` Explanation: Both 2 and 3 appear twice, but 2 is smaller. Input: ``` [5, 5, 4, 6, 1, 1] ``` Output: ``` 1 ``` Explanation: Both 5 and 1 appear twice, but 1 is smaller. Input: ``` [7, 8, 8, 9, 7, 7] ``` Output: ``` 7 ``` Explanation: 7 appears more frequently than any other number.","solution":"def find_most_frequent(lst): Returns the integer that appears most frequently in the list. If there are multiple numbers with the same highest frequency, returns the smallest number among them. from collections import Counter # Count the frequency of each number count = Counter(lst) # Find the maximum frequency max_freq = max(count.values()) # Filter numbers that have the maximum frequency most_frequent_nums = [num for num, freq in count.items() if freq == max_freq] # Return the smallest number among them return min(most_frequent_nums)"},{"question":"A famous sculptor, Emma, works on intricate sculptures made of tiny interconnected cubes. She has to carve a sculpture by removing a specific number of cubes from a large solid cuboid made of smaller unit cubes. The cuboid has dimensions L × W × H and is initially solid. Emma needs to remove exactly R cubes to create air gaps within the cuboid. Your task is to determine if it’s possible to remove exactly R unit cubes without disconnecting any remaining cubes from the rest of the sculpture. In other words, the remaining cubes must form a single connected solid. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. For each test case, there is one line containing four integers L, W, H, and R – the dimensions of the cuboid and the number of cubes to be removed respectively. -----Output----- For each test case, output a single line containing \\"YES\\" if it is possible to remove exactly R cubes without disconnecting any remaining cubes from the main structure, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ L, W, H ≤ 105 - 0 ≤ R ≤ L * W * H (the total number of cubes in the cuboid) -----Example----- Input: 3 3 3 3 1 2 2 2 8 4 4 4 5 Output: YES NO YES -----Explanation----- Test case 1. Emma can remove 1 cube from any corner or edge, the remaining part of the sculpture will remain connected. Test case 2. If Emma removes all 8 cubes from a 2x2x2 cuboid, no cubes will be left connected. Test case 3. Emma can remove 5 cubes in a way that the remaining 59 cubes stay connected.","solution":"def can_remove_cubes(L, W, H, R): Determines if it is possible to remove exactly R cubes from a cuboid of dimensions L x W x H without disconnecting the remaining cubes. total_cubes = L * W * H remaining_cubes = total_cubes - R # To keep the structure connected, at least one cube must remain. # For the structure to be single connected, remaining cubes must be at least 1. if remaining_cubes >= 1: return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): results = [] for L, W, H, R in test_cases: results.append(can_remove_cubes(L, W, H, R)) return results"},{"question":"Write a function that takes a string representing a list of student names and grades in the format `\\"name1:grade1,name2:grade2,...,nameN:gradeN\\"`, where `grade` is an integer between 0 and 100. The function should return the name of the student with the highest grade. If there are multiple students with the highest grade, return their names as a comma-separated string, ordered as they appear in the input. For example: ``` \\"John:88,Susan:92,Alex:90\\" --> \\"Susan\\" \\"Ron:85,Hermione:100,Harry:100\\" --> \\"Hermione,Harry\\" \\"Dan:75,Amy:90,Leo:90,Mike:85\\" --> \\"Amy,Leo\\" ``` The input string will always contain at least one student with a valid grade.","solution":"def highest_grade_students(s): Takes a string representing a list of student names and grades in the format \\"name1:grade1,name2:grade2,...,nameN:gradeN\\", and returns the name(s) of the student(s) with the highest grade. If multiple students have the highest grade, their names are returned as a comma-separated string, in the order they appear in the input. students = s.split(\',\') highest_grade = -1 highest_grade_students = [] for student in students: name, grade = student.split(\':\') grade = int(grade) if grade > highest_grade: highest_grade = grade highest_grade_students = [name] elif grade == highest_grade: highest_grade_students.append(name) return \',\'.join(highest_grade_students)"},{"question":"=====Problem Statement===== A queue is a data structure that follows the First In, First Out (FIFO) principle. You need to implement a queue using two stacks. You are required to perform the following operations: 1. enqueue e: Add integer e to the end of the queue. 2. dequeue: Remove the integer from the front of the queue and return it. 3. front: Return the value of the front element without dequeuing it. 4. empty: Return whether the queue is empty or not. Write a program to initialize the queue and read a sequence of commands to perform the corresponding operations on the implemented queue. =====Example===== N = 4 enqueue 1 enqueue 2 dequeue front enqueue 1: Add 1 to the queue, queue = [1]. enqueue 2: Add 2 to the queue, queue = [1, 2]. dequeue: Remove the front element, 1, queue = [2]. front: Return the front element, which is 2. Output: 1 2 =====Input Format===== The first line contains an integer, n, denoting the number of commands. Each line i of the subsequent n lines contains one of the commands described above. =====Constraints===== The elements added to the queue must be integers. =====Output Format===== For each command of type dequeue, print the dequeued element. For each command of type front, print the front element. For the command empty, print \\"True\\" if the queue is empty, and \\"False\\" otherwise.","solution":"class QueueUsingStacks: def __init__(self): self.in_stack = [] self.out_stack = [] def enqueue(self, e): self.in_stack.append(e) def dequeue(self): if not self.out_stack: while self.in_stack: self.out_stack.append(self.in_stack.pop()) if self.out_stack: return self.out_stack.pop() def front(self): if not self.out_stack: while self.in_stack: self.out_stack.append(self.in_stack.pop()) if self.out_stack: return self.out_stack[-1] def empty(self): return not (self.in_stack or self.out_stack)"},{"question":"You are given a list of numbers where each number appears exactly twice except for one number which appears exactly once. Your task is to find the number that appears exactly once. -----Input:----- The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 1000) — the size of the list. The second line of each test case contains n integers separated by space — the elements of the list. Each element x (1 ≤ x ≤ 1000). -----Output:----- For each test case, print the number that appears exactly once. -----Sample Input:----- 2 5 1 2 3 2 1 7 4 5 6 5 4 6 7 -----Sample Output:----- 3 7","solution":"from collections import Counter def find_unique_number(t, test_cases): Given the number of test cases and a list of tuples where each tuple contains: - n: the size of the list - elements: the list of elements This function returns the unique number for each test case. result = [] for i in range(t): n, elements = test_cases[i] count = Counter(elements) for num, freq in count.items(): if freq == 1: result.append(num) break return result"},{"question":"Alex loves puzzles, and he recently encountered a sequence of numbers puzzle. The sequence starts with the integer 1, and each subsequent number is either an increment by 1 or a decrement by 1 of the previous number. However, due to a certain rule Alex establishes, some numbers in the sequence are \\"locked,\\" meaning they cannot change from their initial value. Your task is to help Alex determine the unlocked state of a sequence after a series of operations. Each operation can be one of the following: 1. Lock the number at position p. 2. Unlock the number at position p. 3. Query the value of the number at position p. When a number is locked, it remains unchanged regardless of any subsequent increments or decrements, until it is explicitly unlocked. -----Input----- The first line contains two integers, n and q (1 ≤ n, q ≤ 10^5) — the length of the sequence and the number of operations. Each of the following q lines contains one of the described operations in the following format: - \\"lock p\\" (1 ≤ p ≤ n) — the number at position p becomes locked. - \\"unlock p\\" (1 ≤ p ≤ n) — the number at position p becomes unlocked. - \\"query p\\" (1 ≤ p ≤ n) — retrieve the current value of the number at position p. -----Output----- For each query operation, output the current value of the number at the given position. -----Examples----- Input 5 6 query 1 lock 2 lock 3 query 3 unlock 2 query 2 Output 1 2 2 Input 3 5 lock 1 lock 2 query 1 unlock 1 query 1 Output 1 1","solution":"def sequence_operations(n, q, operations): sequence = [i + 1 for i in range(n)] locked = [False] * n result = [] for operation in operations: op = operation.split() action, p = op[0], int(op[1]) - 1 if action == \\"lock\\": locked[p] = True elif action == \\"unlock\\": locked[p] = False elif action == \\"query\\": result.append(sequence[p]) return result"},{"question":"# Introduction In this task, you will create a function to generate a visual representation of a staircase pattern using asterisks (\'*\'). The staircase should be right-aligned and extend from the bottom to the top of a given height. # Task Your function will take in an integer representing the height of the staircase. The function will return a string representing the staircase pattern. Each line of the staircase shall contain spaces followed by asterisks, with the last line containing only asterisks. # Input: - An integer `n` representing the height of the staircase, where 1 ≤ n ≤ 100. # Output: - A string representing the staircase pattern, with each step separated by a newline character (\'n\'). # Example: ```python Input: n = 4 Output: \\" *n **n ***n****\\" Input: n = 1 Output: \\"*\\" Input: n = 3 Output: \\" *n **n***\\" ``` Remember to ensure each line is right-aligned to create the proper staircase shape.","solution":"def staircase(n): Generates a visual representation of a staircase pattern of height \'n\' using asterisks. Parameters: n (int): The height of the staircase (1 ≤ n ≤ 100) Returns: str: A string representing the staircase pattern with each step separated by a newline character. return \'n\'.join(\' \' * (n - i - 1) + \'*\' * (i + 1) for i in range(n))"},{"question":"A circus performer is training to perfect their juggling routine. They have a set of juggling balls that need to be tossed back and forth between two hands. Each ball has a unique color and weight. The performer wants to know the minimum number of swaps required to arrange the balls into two groups: one hand holding all the lighter balls and the other hand holding all the heavier balls. For simplicity, we will assume the performer uses the left hand for lighter balls and the right hand for heavier balls. Write a function `min_swaps` that takes in two arguments: - `balls`: a list of tuples where each tuple contains a string (the color of the ball) and an integer (the weight of the ball) - `pivot`: an integer representing the weight threshold. All balls with weight less than the pivot should go to the left hand, and all balls with weight equal to or greater than the pivot should go to the right hand. The function should return an integer, which represents the minimum number of swaps required to sort the balls according to the pivot weight. For example: ```python def min_swaps(balls, pivot): # Your code here # Test cases balls = [(\\"red\\", 1), (\\"blue\\", 3), (\\"green\\", 2), (\\"yellow\\", 4)] pivot = 3 print(min_swaps(balls, pivot)) # Output: 1 balls = [(\\"red\\", 5), (\\"blue\\", 1), (\\"green\\", 8), (\\"yellow\\", 7), (\\"pink\\", 2), (\\"black\\", 3)] pivot = 4 print(min_swaps(balls, pivot)) # Output: 2 ``` In the first test case, one swap is needed between the ball with weight 3 (\\"blue\\") and the ball with weight 2 (\\"green\\") to meet the required arrangement. In the second case, two swaps are needed to ensure all balls less than the pivot weight are on the left and the rest on the right.","solution":"def min_swaps(balls, pivot): Returns the minimum number of swaps required to arrange the balls so that all balls with weight less than the pivot are on the left hand and all balls with weight equal to or greater than the pivot are on the right hand. left = 0 right = len(balls) - 1 swaps = 0 while left < right: # Find the first ball that is on the wrong side while left < len(balls) and balls[left][1] < pivot: left += 1 while right >= 0 and balls[right][1] >= pivot: right -= 1 if left < right: # Swap the balls balls[left], balls[right] = balls[right], balls[left] swaps += 1 left += 1 right -= 1 return swaps"},{"question":"A string S is the input. Write a program to find the count of vowels (a, e, i, o, u) in the string. -----Input----- The first line contains an integer T, the total number of test cases. Then T lines follow, each line contains a string S. -----Output----- For each test case, display the count of vowels in the string S, in a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ length of S ≤ 100 -----Example----- Input 3 hello world programming Output 2 1 3","solution":"def count_vowels(test_cases): For each string in test_cases, count the number of vowels (a, e, i, o, u) and return the counts as a list. Args: test_cases (list of str): List of strings for which the vowels count has to be determined. Returns: list of int: List of vowel counts corresponding to each string. vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} results = [] for s in test_cases: count = sum(1 for char in s if char.lower() in vowels) results.append(count) return results"},{"question":"You are given an array of integers nums where nums[i] represents the number of people in the ith group. We want to form new groups such that each new group has exactly 3 people. Define a function `minNewGroups(nums)` that returns the minimum number of new groups needed to include all people. If some people are left without forming a group of exactly 3, return -1. Example 1: Input: nums = [3, 3, 3] Output: 3 Explanation: Each group can be already considered as one new group of exactly 3 people. Example 2: Input: nums = [3, 3, 2, 2, 1, 1] Output: 4 Explanation: We can combine two people from the 3rd and one person from the 4th group to form a new group (first new group), then combine the remaining one person from the 3rd and two people from the 5th group (second new group), combine remaining one person from the 4th and two people from the 6th group (third new group), and the 1st and 2nd groups are already groups of 3 (fourth group). Example 3: Input: nums = [3, 4, 4, 1] Output: -1 Explanation: The 2nd and 3rd groups have an excess of people that can\'t be combined to form groups of 3, and the remaining single person has no group. Constraints: - 1 <= nums.length <= 100 - 1 <= nums[i] <= 10","solution":"def minNewGroups(nums): Returns the minimum number of new groups needed to include all people. If some people are left without forming a group of exactly 3, returns -1. # To store the total number of people initially total_people = sum(nums) # If the total number of people is not a multiple of 3, it is impossible to form fully filled groups if total_people % 3 != 0: return -1 # The number of fully filled groups of size 3 we can form min_groups = 0 # First, account for all complete groups of 3 min_groups += sum(x // 3 for x in nums) # Calculate remaining people after forming complete groups of 3 remainders = [x % 3 for x in nums] # Counts of how many groups have 1 or 2 remainders count1 = remainders.count(1) count2 = remainders.count(2) # We pair a 1-remainder with a 2-remainder, and each such pair forms an additional group pairs = min(count1, count2) min_groups += pairs count1 -= pairs count2 -= pairs # For any remaining 1-remainders or 2-remainders if count1 > 0 or count2 > 0: return -1 return min_groups"},{"question":"In this task, you need to implement a simple version of a maze-solving algorithm. You are provided with two inputs: a 2D array representing the maze and a starting point in the maze. The goal is to determine if you can reach a specific cell in the maze using Depth-First Search (DFS). The 2D array (maze) only contains zeros and ones: - 0 represents an open path you can walk on. - 1 represents a wall you cannot walk through. You need to write a function `canReachEnd(maze, start)` to determine if there is a path from the starting point to the bottom-right corner of the maze. The starting point is a tuple `(x, y)` representing the starting cell\'s coordinates. Function signature: ```python def canReachEnd(maze: List[List[int]], start: Tuple[int, int]) -> bool: ``` # Parameters: - `maze` (List[List[int]]): A 2D array of integers (0s and 1s) representing the maze. - `start` (Tuple[int,int]): A tuple representing the starting cell\'s coordinates `(x, y)`. # Returns: - `bool`: `True` if there is a path from the starting cell to the bottom right cell, otherwise `False`. # Constraints: - The maze will always have at least 2 rows and 2 columns. - The starting point will always be an open path. - You can move horizontally or vertically to an adjacent cell. # Example: ```python maze = [ [0, 1, 0, 0], [0, 1, 1, 0], [0, 0, 0, 1], [1, 1, 0, 0] ] start = (0, 0) canReachEnd(maze, start) # should return True ``` # Note: In this example, starting from `(0, 0)`, you can find a path to the bottom-right corner. The path could be: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) -> (3,3). Your function should efficiently determine if there is a valid path.","solution":"from typing import List, Tuple def canReachEnd(maze: List[List[int]], start: Tuple[int, int]) -> bool: rows = len(maze) cols = len(maze[0]) target = (rows - 1, cols - 1) def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and maze[x][y] == 0 def dfs(x, y): if (x, y) == target: return True maze[x][y] = 1 # mark as visited to prevent cycles directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if dfs(nx, ny): return True return False return dfs(*start)"},{"question":"You are given a list of integers representing the sales over a number of days in a bookstore. From this list, we want to generate a report that helps analyze sales performance over a period of time. # Task: Write functions: ``` 1. best_day(sales_list) - Returns the day (0-based index) with the highest sales. 2. worst_day(sales_list) - Returns the day (0-based index) with the lowest sales. 3. average_sales(sales_list) - Returns the average daily sales rounded down to an integer. 4. above_average_days(sales_list) - Returns an array containing 0-based indices of the days where sales were above average. ``` # Example: ``` sales_list = [200, 180, 220, 210, 150, 300, 170] best_day(sales_list) -> 5 worst_day(sales_list) -> 4 average_sales(sales_list) -> 204 above_average_days(sales_list) -> [2, 3, 5] ``` # Constraints: - The length of `sales_list` will be between 1 and 1000 (inclusive). - Each element in `sales_list` will be a non-negative integer not exceeding 10,000.","solution":"def best_day(sales_list): Returns the day (0-based index) with the highest sales. return sales_list.index(max(sales_list)) def worst_day(sales_list): Returns the day (0-based index) with the lowest sales. return sales_list.index(min(sales_list)) def average_sales(sales_list): Returns the average daily sales rounded down to an integer. return sum(sales_list) // len(sales_list) def above_average_days(sales_list): Returns an array containing 0-based indices of the days where sales were above average. avg = average_sales(sales_list) return [index for index, sales in enumerate(sales_list) if sales > avg]"},{"question":"=====Function Descriptions===== sorted(iterable, cmp=None, key=None, reverse=False) Return a new sorted list from the items in iterable. The optional arguments cmp, key, and reverse define a custom comparison function, a function from which to extract the key, and a flag indicating whether to reverse the sort order, respectively. Sample Code >>> sorted([5, 2, 3, 1, 4]) [1, 2, 3, 4, 5] >>> sorted(\\"Hello World\\") [\' \', \'H\', \'W\', \'d\', \'e\', \'l\', \'l\', \'l\', \'o\', \'o\', \'r\'] =====Problem Statement===== You are given a string S. Your task is to print the string in ascending order after removing all duplicate characters. =====Input Format===== A single line containing the string S. =====Constraints===== 0 < len(S) ≤ 1000 The string contains only lowercase and/or uppercase characters. =====Output Format===== Print the sorted string without any duplicate characters.","solution":"def sort_and_remove_duplicates(s): Removes duplicate characters from the input string and returns a sorted string with unique characters. return \'\'.join(sorted(set(s)))"},{"question":"You are organizing a race for programming enthusiasts. Each participant runs at a different speed and the track has some obstacles that they need to avoid. A participant avoids an obstacle if its position is a multiple of their speed. For example, a participant with a speed of 3 avoids obstacles at positions 3, 6, 9, etc. Write a function `can_finish_race` that takes the participant\'s speed (`speed`) and a list of `obstacle_positions` as arguments. The function should return `True` if the participant can avoid all obstacles on the track and `False` otherwise. Assume that `speed` is an integer greater than 0, `obstacle_positions` is a list of integers representing the positions of obstacles on the track, and all integers are positive. ```python def can_finish_race(speed, obstacle_positions): pass ``` Examples: ```python can_finish_race(3, [5, 11, 20]) # returns True can_finish_race(4, [8, 16, 24]) # returns False, as the obstacle at position 8 is a multiple of 4 ```","solution":"def can_finish_race(speed, obstacle_positions): Returns True if the participant can avoid all obstacles on the track, otherwise returns False. for position in obstacle_positions: if position % speed == 0: return False return True"},{"question":"Given a non-empty string s consisting of only lowercase letters, write a method to find and return the first non-repeating character in it. If it does not exist, return an underscore (\'_\'). # Examples: ``` s = \\"leetcode\\" first_non_repeating(s) -> \'l\' s = \\"loveleetcode\\" first_non_repeating(s) -> \'v\' s = \\"aabbcc\\" first_non_repeating(s) -> \'_\' ```","solution":"def first_non_repeating(s): Returns the first non-repeating character in the string s. If no such character exists, returns \'_\'. count = {} for char in s: count[char] = count.get(char, 0) + 1 for char in s: if count[char] == 1: return char return \'_\'"},{"question":"You are given an integer array `nums` and an integer `target`. Your task is to find the total number of subsets of the array `nums` that sum up to `target`. Each element in `nums` can only be used once. Note: - The array `nums` will not exceed 200 elements. - Each element in the array `nums` is a positive integer and will not exceed 1000. - The integer `target` will not exceed 10000. Example 1: Input: nums = [1, 2, 3, 4, 5], target = 5 Output: 3 Explanation: The subsets that sum up to 5 are [1, 4], [2, 3], and [5]. Example 2: Input: nums = [2, 3, 5, 6, 8, 10], target = 10 Output: 3 Explanation: The subsets that sum up to 10 are [2, 8], [10], and [3, 5, 2]. Example 3: Input: nums = [1, 1, 1, 1], target = 1 Output: 4 Explanation: The subsets that sum up to 1 are [1], [1], [1], and [1].","solution":"from functools import lru_cache def count_subsets(nums, target): Returns the number of subsets of nums that sum up to target. n = len(nums) # Use lru_cache to cache results for optimization @lru_cache(None) def count(i, remaining): if remaining == 0: return 1 if i == n or remaining < 0: return 0 # Include the current number in the subset or don\'t include it return count(i + 1, remaining - nums[i]) + count(i + 1, remaining) return count(0, target)"},{"question":"Develop a function that takes an array of numbers and returns an array where each number is replaced by the nearest prime number. If a number is equidistant to two primes, the smaller prime should be selected. To determine the nearest prime, you may use a helper function that checks if a number is prime. Examples ``` nearestPrimes([10, 15, 20, 23]) ==> [11, 13, 19, 23] nearestPrimes([3, 4, 8, 32]) ==> [3, 3, 7, 31] nearestPrimes([2, 5, 18, 19]) ==> [2, 5, 17, 19] ```","solution":"def is_prime(num): Check if a given number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def nearest_prime(n): Finds the nearest prime number to the given number n. if is_prime(n): return n offset = 0 while True: offset += 1 if is_prime(n - offset): return n - offset if is_prime(n + offset): return n + offset def nearestPrimes(arr): Given an array of numbers, replaces each number with the nearest prime number. If a number is equidistant to two prime numbers, the smaller prime is chosen. return [nearest_prime(x) for x in arr]"},{"question":"Math Evaluator Story You\'re hired by a company that specializes in providing tools for educational purposes. You have been tasked with developing a simple math expression evaluator which can take a string input representing some basic math operations and evaluates it to an integer result. Task You are required to implement a function that evaluates simple mathematical expressions containing non-negative integers and the operators `+` (addition) and `*` (multiplication). The given expression will not contain parentheses and will always be a valid sequence of non-negative integers and the mentioned operators. For example: ``` Input: \\"3+2\\" Output: 5 Input: \\"4*1+2\\" Output: 6 ``` Requirements 1. Your solution should handle expressions containing only non-negative integers and the operators `+` and `*`. 2. The expression will be a non-empty string, consisting of digits (0-9) and the symbols `+` and `*`. 3. No other operators or characters will be present in the string. Examples ```python assert evaluate_math_expression(\\"3+5*2\\") == 13 assert evaluate_math_expression(\\"10+20+15\\") == 45 assert evaluate_math_expression(\\"7*6+1\\") == 43 assert evaluate_math_expression(\\"2*3*4\\") == 24 assert evaluate_math_expression(\\"100\\") == 100 ``` Hints 1. The order of operations must be handled properly: multiplication has higher precedence over addition. 2. Consider using the `re` module for parsing the input expression. 3. You might find it useful to split the expression and process the multiplication first before adding the results. Function Signature ```python def evaluate_math_expression(expression: str) -> int: pass ``` Implement the function `evaluate_math_expression` so that it correctly evaluates the given mathematical expressions as specified.","solution":"def evaluate_math_expression(expression: str) -> int: Evaluates a given mathematical expression containing non-negative integers and the operators + and *. The expression obeys the BODMAS rule and does not contain any parentheses. # Split the expression first by \'+\' to handle addition separately terms = expression.split(\'+\') # Evaluate each term that might contain multiplication evaluated_terms = [eval_multiplication(term) for term in terms] # Sum up all the evaluated multiplication results return sum(evaluated_terms) def eval_multiplication(term: str) -> int: Evaluate a term containing multiplication only. factors = term.split(\'*\') result = 1 for factor in factors: result *= int(factor) return result"},{"question":"In a list of integers, a peak element is an element that is greater than its neighbors. Given an input list of integers, return the index of any one of its peak elements. The list may contain multiple peaks, in which case you can return any peak\'s index. You may assume that the list is non-empty and has at least one peak element. Examples: ```python find_peak([1, 2, 3, 1]) == 2 # index 2 with value 3 is a peak find_peak([1, 2, 1, 3, 5, 6, 4]) == 1 or 5 # index 1 with value 2 or index 5 with value 6 is a peak find_peak([1]) == 0 # the only element is a peak find_peak([3, 4, 3, 2, 1]) == 1 # index 1 with value 4 is a peak ``` Constraints: - You may assume the list length is at most 1,000,000 elements. - You may assume all elements are distinct. - Your solution should have logarithmic complexity, i.e., O(log n), to pass all test cases. Function Signature: ```python def find_peak(nums: List[int]) -> int: # Your code here ``` The function should work in Python 2 and Python 3.","solution":"def find_peak(nums): Finds the index of any peak element in the list of integers. A peak element is an element that is greater than its neighbors. Args: nums (List[int]): A list of integers Returns: int: The index of a peak element def binary_search(low, high): if low == high: return low mid = (low + high) // 2 if nums[mid] > nums[mid + 1]: return binary_search(low, mid) return binary_search(mid + 1, high) return binary_search(0, len(nums) - 1)"},{"question":"Chef loves symmetry. He often plays with numbers and tries to find patterns among them. Today, he has come across an interesting problem and would love your help to solve it. The problem goes like this: Given two numbers A and B, find the greatest common divisor (GCD) of all the integers between A and B inclusive that are palindromes. A number is called a palindrome if it reads the same backward as forward. -----INPUT----- The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers A and B, as per the above given problem specification. -----OUTPUT----- For each test case, output a single line printing the GCD of all the palindrome numbers between A and B inclusive, in format Case #T: G, where T is the Tth test case running and G is the GCD of the corresponding test case palindromes. -----CONSTRAINTS----- 1 < T < 50 1 <= A <= B <= 104 -----EXAMPLE----- Input: 2 10 20 5 30 Output: Case #1: 11 Case #2: 1","solution":"import math def is_palindrome(n): Check if a given number n is a palindrome. return str(n) == str(n)[0:][::-1] def find_palindromes(a, b): Find all palindromes in the range [a, b] inclusive. palindromes = [i for i in range(a, b + 1) if is_palindrome(i)] return palindromes def gcd_of_list(numbers): Return the GCD of a list of numbers. return math.gcd(*numbers) def gcd_of_palindromes_in_range(a, b): Calculate the GCD of all palindromes in the range [a, b]. palindromes = find_palindromes(a, b) if not palindromes: return 0 return gcd_of_list(palindromes) def chef_loves_symmetry(T, test_cases): Solve the problem for T test cases. results = [] for i in range(T): a, b = test_cases[i] gcd_result = gcd_of_palindromes_in_range(a, b) results.append(f\\"Case #{i + 1}: {gcd_result}\\") return results"},{"question":"You are given a list of integers and a target integer, identify whether there are two distinct numbers in the list that add up to the target. If such a pair exists, return one such pair as a tuple (in any order). If no such pair exists, return an empty tuple. Eg: [2, 7, 11, 15], target: 9 -> (2, 7) [3, 2, 4], target: 6 -> (2, 4) [3, 3], target: 6 -> (3, 3) [1, 2, 3], target: 7 -> ()","solution":"def find_pair_with_sum(nums, target): Given a list of integers `nums` and a target integer `target`, return a tuple with two distinct numbers (in any order) from the list that add up to the target. If no such pair exists, return an empty tuple. seen = {} for num in nums: complement = target - num if complement in seen: return (complement, num) seen[num] = True return ()"},{"question":"Write a function that takes a string containing an arithmetic expression involving addition, subtraction, multiplication, and division, and returns the result of the expression. The input string might include spaces, and the division should return a floating-point result. Ensure that the function handles operator precedence correctly. Do not use built-in functions like `eval`.","solution":"def evaluate_expression(expression): Evaluates a given arithmetic expression that includes addition, subtraction, multiplication, and division, respecting operator precedence and handling spaces. :param expression: A string containing the arithmetic expression :return: A float or int, the result of the arithmetic expression import re tokens = re.findall(r\'d+.?d*|+|-|*|/|(|)\', expression.replace(\' \', \'\')) def parse_expression(tokens): def get_term(): term = get_factor() while tokens and tokens[0] in (\'*\', \'/\'): op = tokens.pop(0) if op == \'*\': term *= get_factor() elif op == \'/\': term /= get_factor() return term def get_factor(): factor = None if tokens: if tokens[0] == \'(\': tokens.pop(0) factor = parse_expression(tokens) tokens.pop(0) # removing closing parenthesis else: factor = float(tokens.pop(0)) return factor result = get_term() while tokens and tokens[0] in (\'+\', \'-\'): op = tokens.pop(0) if op == \'+\': result += get_term() elif op == \'-\': result -= get_term() return result return parse_expression(tokens)"},{"question":"You are organizing a series of sessions for a coding bootcamp. Each session can host a limited number of students. However, students have different preferences and availabilities, which can be represented as a list of preferred session IDs for each student. You need to implement a class `SessionAllocator` that will allocate students to their preferred sessions, if possible, without exceeding the session capacities. If a student cannot be placed in any of their preferred sessions, they should not be placed in any session at all. Your task is to implement the following methods: - `SessionAllocator(int[] session_capacities)` Initializes the object with the capacities of the sessions. - `bool allocateStudent(int student_id, int[] preferences)` Allocates the student with `student_id` to one of their preferred sessions, if possible. Returns `true` if the student was allocated to a session; otherwise, returns `false`. - `int[] getSessionStudents(int session_id)` Returns the list of student IDs allocated to the specified session. Example 1: Input [\\"SessionAllocator\\", \\"allocateStudent\\", \\"allocateStudent\\", \\"allocateStudent\\", \\"getSessionStudents\\", \\"getSessionStudents\\"] [[[2, 1, 3]], [1, [1, 2]], [2, [0, 1]], [3, [0]], [1], [0]] Output [null, true, true, true, [1, 2], [3]] Explanation: SessionAllocator sa = new SessionAllocator([2, 1, 3]); sa.allocateStudent(1, [1, 2]); // returns true, student 1 is allocated to session 1. sa.allocateStudent(2, [0, 1]); // returns true, student 2 is allocated to session 0. sa.allocateStudent(3, [0]); // returns true, student 3 is allocated to session 0 as session 0 has not exceeded its capacity. sa.getSessionStudents(1); // returns [1], session 1 has only student 1. sa.getSessionStudents(0); // returns [2, 3], session 0 has students 2 and 3. Constraints: 1 <= session_capacities.length <= 100 1 <= session_capacities[i] <= 100 1 <= student_id <= 1000 1 <= preferences.length <= session_capacities.length 0 <= preferences[i] < session_capacities.length At most 1000 calls will be made to `allocateStudent` and `getSessionStudents`.","solution":"class SessionAllocator: def __init__(self, session_capacities): self.session_capacities = session_capacities self.sessions = {i: [] for i in range(len(session_capacities))} self.allocated_students = set() def allocateStudent(self, student_id, preferences): if student_id in self.allocated_students: return False for session_id in preferences: if len(self.sessions[session_id]) < self.session_capacities[session_id]: self.sessions[session_id].append(student_id) self.allocated_students.add(student_id) return True return False def getSessionStudents(self, session_id): return self.sessions[session_id]"},{"question":"Write a function that takes a positive integer, `n`, and returns a list of the first `n` prime numbers. **Function signature:** ```python def generate_primes(n: int) -> list[int]: ``` **Input:** - A single positive integer, `n`, greater than or equal to 1. **Output:** - A list of the first `n` prime numbers. **Example:** ```python generate_primes(5) # Output: [2, 3, 5, 7, 11] ``` **Notes:** - You are allowed to write helper functions if needed. - The prime numbers should be ordered in ascending order in the resultant list.","solution":"def generate_primes(n: int) -> list[int]: Generates the first n prime numbers. :param n: A positive integer representing the number of primes to generate. :return: A list containing the first n prime numbers. if n < 1: return [] primes = [] num = 2 while len(primes) < n: for i in range(2, int(num**0.5) + 1): if num % i == 0: break else: primes.append(num) num += 1 return primes"},{"question":"Dev is a graphic designer working with RGB color values. The software he uses requires colors to be in the format of a string `\\"#RRGGBB\\"`, where `RR`, `GG`, and `BB` are two-digit hexadecimal numbers corresponding to the red, green, and blue components of the color. Dev wants to be able to easily convert RGB values from their decimal form to this hexadecimal string format. Your task: Write a function `rgbToHex()` that takes three arguments: - `r` (an integer from 0 to 255) representing the red component, - `g` (an integer from 0 to 255) representing the green component, and - `b` (an integer from 0 to 255) representing the blue component. The function should return a string `\\"#RRGGBB\\"` where `RR`, `GG`, and `BB` are two-digit hexadecimal numbers. For example: - `rgbToHex(255, 99, 71)` should return `\\"#FF6347\\"` - `rgbToHex(0, 255, 0)` should return `\\"#00FF00\\"` - `rgbToHex(75, 0, 130)` should return `\\"#4B0082\\"` Make sure the output always has six characters (including leading zeros where necessary).","solution":"def rgbToHex(r, g, b): Converts RGB values to a hexadecimal string. Args: r (int): Red component (0-255) g (int): Green component (0-255) b (int): Blue component (0-255) Returns: str: Hexadecimal string in the format \\"#RRGGBB\\" return f\\"#{r:02X}{g:02X}{b:02X}\\""},{"question":"A **harmonic divisor number** is a positive integer whose divisors have a harmonic mean that is an integer. The **harmonic mean** of a set of numbers is the reciprocal of the arithmetic mean of the reciprocals of the numbers. For example, the harmonic mean of 1, 2, and 4 is obtained by: 1. Finding the reciprocals: 1, 0.5, 0.25 2. Calculating their sum: 1 + 0.5 + 0.25 = 1.75 3. Taking the reciprocal of the average of these sums: 3 / 1.75 ≈ 1.714 However, the harmonic mean of the divisors of 6 (which are 1, 2, 3, 6) is 2, which is an integer, making 6 a harmonic divisor number. Write a function **harmonic_divisors** that takes an integer `x` as input and returns the first `x` harmonic divisor numbers in ascending order. The function definition should look like: ```python def harmonic_divisors(x): # Your code here ``` # Examples ```python harmonic_divisors(5) == [1, 6, 28, 140, 270] harmonic_divisors(10) == [1, 6, 28, 140, 270, 496, 672, 1638, 2970, 6200] ``` # Notes - You may assume `x` is a positive integer. - The output list should contain exactly `x` harmonic divisor numbers ordered from smallest to largest.","solution":"def harmonic_mean(lst): Compute the harmonic mean of a list of divisors. from fractions import Fraction if not lst: return 0 n = len(lst) sum_reciprocal = sum(Fraction(1, d) for d in lst) harmonic_mean_value = Fraction(n, sum_reciprocal) return harmonic_mean_value def divisors(n): Compute the divisors of a number n. divs = [] for i in range(1, n + 1): if n % i == 0: divs.append(i) return divs def is_harmonic_divisor_number(n): Check if a number n is a harmonic divisor number. divs = divisors(n) h_mean = harmonic_mean(divs) return h_mean.denominator == 1 def harmonic_divisors(x): Return the first x harmonic divisor numbers in ascending order. result = [] num = 1 while len(result) < x: if is_harmonic_divisor_number(num): result.append(num) num += 1 return result"},{"question":"Write a function that takes a list of integers and returns a list of tuples, where each tuple contains two integers from the input list whose sum is zero. Each pair `(a, b)` must be unique in the sense that you cannot reuse the same elements from the input list for different pairs, and the order of pairs in the resulting list does not matter. # Example find_pairs([2, -2, 3, -3, -2, 2]) = [(2, -2), (3, -3)] find_pairs([1, -1, 2, 3, -2, -3]) = [(1, -1), (2, -2), (3, -3)] # Notes * If there are multiple pairs with the same values but different orders (e.g., `(a, b)` and `(b, a)`), include only one of them. * If no pairs are found, return an empty list. * The input list can contain both positive and negative integers. * For each pair `(a, b)`, the function should satisfy the condition `a + b = 0`.","solution":"def find_pairs(nums): Returns a list of tuples (a, b) from the input list where a + b = 0. Each element in nums is used at most once. seen = set() pairs = [] nums_set = set(nums) for num in nums: if -num in nums_set and -num not in seen: pairs.append((num, -num)) seen.add(num) seen.add(-num) return pairs"},{"question":"A transportation company has a fleet of vans and they need to schedule the deliveries for the day. Each van can carry a maximum weight, and there is a list of packages, each with a specific weight. The goal is to determine the minimum number of vans required to deliver all packages if a van can carry packages up to its maximum weight limit. This is a simplified version of the bin packing problem. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T cases contains: - An integer M representing the maximum weight capacity of each van. - An integer P representing the number of packages. - A line containing P space-separated integers, representing the weights of the packages. -----Output:----- For each test case, output the minimum number of vans required to deliver all the packages. -----Constraints----- - 1 leq T leq 100 - 1 leq M leq 10^4 - 1 leq P leq 50 - 1 leq text{weight of each package} leq M -----Sample Input:----- 2 10 4 2 3 8 2 15 5 4 8 5 7 3 -----Sample Output:----- 2 2 -----EXPLANATION:----- In the first test case, the packages can be grouped as follows: - Van 1: 8 - Van 2: 2, 3, 2 Thus, the minimum number of vans required is 2. In the second test case, the packages can be grouped as follows: - Van 1: 8, 7 - Van 2: 4, 5, 3 Thus, the minimum number of vans required is 2.","solution":"def min_vans_required(num_cases, cases): results = [] for case in cases: max_capacity, num_packages, package_weights = case package_weights.sort(reverse=True) vans = 0 used = [False] * num_packages for i in range(num_packages): if not used[i]: current_capacity = max_capacity - package_weights[i] used[i] = True for j in range(i + 1, num_packages): if not used[j] and package_weights[j] <= current_capacity: current_capacity -= package_weights[j] used[j] = True vans += 1 results.append(vans) return results # Parse input function def parse_input(input_str): lines = input_str.strip().split(\'n\') num_cases = int(lines[0]) cases = [] current_line = 1 for _ in range(num_cases): max_capacity = int(lines[current_line]) num_packages = int(lines[current_line + 1]) package_weights = list(map(int, lines[current_line + 2].split())) cases.append((max_capacity, num_packages, package_weights)) current_line += 3 return num_cases, cases"},{"question":"Write a function that takes a string as input and returns a new string where each character in the original string is replaced by a pair of its hexadecimal ASCII code and the character itself, separated by a hyphen. For example, the ASCII code for \'A\' (uppercase \'A\') is 65, which is 41 in hexadecimal. So, \'A\' should be converted to \\"41-A\\". The function should ignore spaces and non-printable characters (ASCII codes less than 32). Examples: ```python ascii_hex(\\"Hello\\") ``` should return the string ``` \\"48-H65-e6C-l6C-l6F-o\\" ``` ```python ascii_hex(\\"CodeWars\\") ``` should return the string ``` \\"43-C6F-o64-d65-e57-W61-a72-r73-s\\" ``` **Notes** - Only printable ASCII characters (32-126 decimal) should be considered for conversion. - Preserve the case of each character. - Do not modify the order of characters other than the specified transformation. - Ignore input characters outside the specified range, including spaces.","solution":"def ascii_hex(s): Returns a new string where each character in the original string is replaced by a pair of its hexadecimal ASCII code and the character itself, separated by a hyphen. result = [] for char in s: ascii_code = ord(char) # Confirming if the character is printable and not a space if 32 <= ascii_code <= 126 and char != \' \': hex_code = format(ascii_code, \'x\').upper() result.append(f\\"{hex_code}-{char}\\") return \\"\\".join(result)"},{"question":"Consider a 2D grid with dimensions m x n, where each cell in the grid represents a plot of land. Each cell can be either empty (represented by 0) or have a tree (represented by 1). A forest is a group of one or more adjacent trees, where adjacent means that a tree is directly connected to another tree either horizontally or vertically (not diagonally). Your task is to determine the number of distinct forests present in the grid. # Input - The first line of input contains two integers, m and n (1 ≤ m, n ≤ 1000), the dimensions of the grid. - Each of the next m lines contains n integers separated by spaces, representing the grid. # Output - Output a single integer, the number of distinct forests in the grid. # Examples Input 4 5 1 1 0 0 0 0 1 0 1 1 1 0 0 1 0 0 0 0 0 1 Output 4 Input 3 3 0 0 0 0 1 1 1 1 0 Output 1","solution":"def count_forests(m, n, grid): Returns the number of distinct forests in the grid. def dfs(i, j): if 0 <= i < m and 0 <= j < n and grid[i][j] == 1: grid[i][j] = 0 dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) forests = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: dfs(i, j) forests += 1 return forests"},{"question":"\\"Sorting the Mess!!\\" Jack is a warehouse manager and today he found out that a shipment of boxes arrived in a completely messed-up order. Each box has a label indicating its weight. Jack wants to find out the sorted order of weights quickly. Given an array of weights of N boxes, write a program to sort the weights in ascending order and print the sorted list. -----Input----- The first line contains an integer, T, the number of test cases. Each test case consists of two lines: The first line contains an integer N, the number of boxes. The second line contains N space-separated integers representing the weights of the boxes. -----Output----- For each test case, print the sorted list of box weights in a single line. -----Constraints----- 1 <= T <= 100 1 <= N <= 10^5 1 <= weight <= 10^9 -----Example----- Input: 2 5 4 2 9 1 3 4 10 20 5 15 Output: 1 2 3 4 9 5 10 15 20","solution":"def sort_boxes(test_cases): results = [] for N, weights in test_cases: sorted_weights = sorted(weights) results.append(\\" \\".join(map(str, sorted_weights))) return results def main(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) weights = list(map(int, lines[index + 1].split())) test_cases.append((N, weights)) index += 2 return sort_boxes(test_cases)"},{"question":"An event organizer is planning a series of social gatherings. At each gathering, attendees participate in lively discussions. Given the diverse nature of attendees, each individual has a social energy level s_i representing their capacity for interaction. To ensure engaging discussions, each gathering must include at least one individual with a specific minimum energy level set as the threshold. The organizer has a list of social energy levels of all potential attendees and needs to determine the maximum number of unique gatherings that can be formed given the constraints. -----Input----- The first line contains the number of test cases T (1 leq T leq 2 cdot 10^5). The following T lines contain descriptions of the test cases. The first line of each test case contains an integer N (1 leq N leq 2 cdot 10^5), which is the number of attendees. The second line contains N integers s_1, s_2, ldots, s_N (1 leq s_i leq N), representing the social energy levels of attendees. The third line contains an integer E (1 leq E leq N), representing the minimum social energy level required for a gathering. It\'s guaranteed that the sum of all N in the input is at most 3 cdot 10^5. -----Output----- For each test case, print one integer on a new line indicating the maximum number of unique gatherings that can be formed. -----Example----- Input 2 3 3 2 1 2 5 1 4 5 2 3 3 Output 2 2 -----Note----- In the first example, we can form two gatherings. One gathering with attendees having energies `3, 2`, as 2 is the minimum threshold and a third individual with energy `1` can\'t be in any group. Another valid grouping is `3, 1` but `2` left out or `2, 1` but `3` left due to equal split preference. In the second example, attendees with energies `4`, `5`, and `3` can form the first group, and the remaining attendees with energies `1` and `2` form another group which does not meet the minimum energy threshold thus forcing a different arrangement meeting threshold condition set to 3 for two equally split groups like `4, 3` and `5, 2, 1`.","solution":"def max_gatherings(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] s = test_cases[i][1] E = test_cases[i][2] s.sort(reverse=True) count = 0 for j in range(N): if s[j] >= E: count += 1 results.append(count) return results"},{"question":"A rectangular grid of cells with a given number rows and columns is provided. Each cell contains an integer value. Write a program that finds the maximum sum of any subgrid within the grid. A subgrid is defined as any rectangular section of the grid including at least one cell. **Input:** - An integer `n` representing the number of rows. - An integer `m` representing the number of columns. - A 2D array of integers `grid` where `grid[i][j]` represents the value in the cell at row `i` and column `j`. **Output:** - An integer representing the maximum sum of any subgrid within the provided grid. **Example:** ``` Input: 3 3 1 2 -1 -3 4 2 1 5 -3 Output: 11 Explanation: The subgrid with the maximum sum is: 4 2 5 which sums to 11. ```","solution":"def max_sum_subgrid(n, m, grid): Finds the maximum sum of any subgrid within the provided grid. Parameters: n (int): Number of rows m (int): Number of columns grid (list of list of ints): 2D array of integers representing the grid Returns: int: Maximum sum of any subgrid max_sum = float(\'-inf\') # Create the prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Explore all possible subgrids for r1 in range(1, n + 1): for r2 in range(r1, n + 1): for c1 in range(1, m + 1): for c2 in range(c1, m + 1): subgrid_sum = ( prefix_sum[r2][c2] - prefix_sum[r1-1][c2] - prefix_sum[r2][c1-1] + prefix_sum[r1-1][c1-1] ) max_sum = max(max_sum, subgrid_sum) return max_sum"},{"question":"Write a function named \\"roman_to_integer\\" that converts a Roman numeral string into its integer equivalent. The input string is guaranteed to be a valid Roman numeral. The symbols in Roman numerals include \'I\', \'V\', \'X\', \'L\', \'C\', \'D\', and \'M\', with their respective values as follows: - \'I\' -> 1 - \'V\' -> 5 - \'X\' -> 10 - \'L\' -> 50 - \'C\' -> 100 - \'D\' -> 500 - \'M\' -> 1000 The function should correctly handle the combination rules where: - \'I\' can be placed before \'V\' (5) and \'X\' (10) to make 4 and 9 respectively. - \'X\' can be placed before \'L\' (50) and \'C\' (100) to make 40 and 90 respectively. - \'C\' can be placed before \'D\' (500) and \'M\' (1000) to make 400 and 900 respectively. Return the integer value of the given Roman numeral. For example, if the input is \\"IX\\", the output should be 9, and if the input is \\"MCMXCIV\\", the output should be 1994.","solution":"def roman_to_integer(s): Converts a Roman numeral string into its integer equivalent. roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } integer_value = 0 previous_value = 0 for char in reversed(s): current_value = roman_to_int[char] if current_value < previous_value: integer_value -= current_value else: integer_value += current_value previous_value = current_value return integer_value"},{"question":"Given a string, return the character that appears the most frequently. If there are multiple characters with the same highest frequency, return the character that appears first in the string. For example: `\\"aabbbcc\\"` should return `\\"b\\"`. `\\"hello\\"` should return `\\"l\\"`. `\\"abcccab\\"` should return `\\"c\\"`. The input string will contain at least one character and consist of only lowercase English letters.","solution":"def most_frequent_character(s): Returns the character that appears the most frequently in the string `s`. If there are multiple characters with the same highest frequency, return the one that appears first in the string. from collections import Counter frequency = Counter(s) max_count = max(frequency.values()) for char in s: if frequency[char] == max_count: return char"},{"question":"___ # Task **_Given_** an **_array of integers_**, **_find the product of the maximum pair_** (i.e., two different elements) in the array. ___ # Notes * The **_array/list_** will contain **at least two integers**. * Each **_integer_** is **_greater than or equal to 1_**. ___ # Input >> Output Examples ``` maxPairProduct({3, 5, 2, 6}) ==> return (30) ``` **_Explanation_**: * The maximum pair product is obtained from the two largest integers in the array: `5 * 6 = 30`. ___ ``` maxPairProduct({10, 2, 3}) ==> return (30) ``` **_Explanation_**: * The maximum pair product is obtained from the two largest integers in the array: `10 * 3 = 30`. ___ ``` maxPairProduct({1, 1, 1, 10, 10}) ==> return (100) ``` **_Explanation_**: * The maximum pair product is obtained from the two largest integers in the array: `10 * 10 = 100`. ___ ___ ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def maxPairProduct(arr): Returns the product of the maximum pair in the array. The array will contain at least two integers, and each integer is greater than or equal to 1. :param arr: List of integers :return: Product of the two largest integers in the array # Sort the array in descending order arr.sort(reverse=True) # The maximum pair will be the first two elements in the sorted array return arr[0] * arr[1]"},{"question":"Complete the function that takes two lists of integers `list1` and `list2`, and returns a new list containing the elements that appear in both `list1` and `list2` (i.e., the intersection of the two lists). Each element in the result should appear as many times as it does in both input lists. Example Given `list1 = [1, 2, 2, 3]` and `list2 = [2, 2, 3, 4]`, the function should return `[2, 2, 3]`. - **Note**: Avoid using built-in functions that directly perform this operation. Your solution should work efficiently with large lists.","solution":"def intersect(list1, list2): Returns a new list containing the elements that appear in both list1 and list2. Each element in the result appears as many times as it does in both input lists. from collections import Counter counter1 = Counter(list1) counter2 = Counter(list2) intersection = [] for element in counter1: if element in counter2: intersection.extend([element] * min(counter1[element], counter2[element])) return intersection"},{"question":"# Task Write a function that takes a string as input and returns the length of the longest substring with non-repeating characters. # Example For the input string `s = \\"abcabcbb\\"`, the result should be `3`. Explanation: The answer is `abc`, with the length of `3`. For the input string `s = \\"bbbb\\"`, the result should be `1`. Explanation: The answer is `b`, with the length of `1`. For the input string `s = \\"pwwkew\\"`, the result should be `3`. Explanation: The answer is `wke`, with the length of `3`. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. # Input/Output - `[input]` string `s` An input string. `0 ≤ s.length ≤ 50000` - `[output]` integer The length of the longest substring with non-repeating characters.","solution":"def length_of_longest_substring(s: str) -> int: Given a string s, finds the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index longest = max(longest, index - start + 1) return longest"},{"question":"# Task A sorting company wants to optimize the arrangement of items in a storage area. The storage area is represented by a list of integers, where each integer represents the size of an item. The company needs to sort the items in such a way that the smallest item is placed first, followed by the largest remaining item, then the second-smallest item, then the second-largest remaining item, and so on. Given a list of integers representing the sizes of the items, your task is to return the list of items sorted according to the company\'s requirement. # Example For `items = [1, 3, 2, 4, 5]`, the result should be `[1, 5, 2, 4, 3]`. For `items = [10, 20, 30, 40, 50, 60]`, the result should be `[10, 60, 20, 50, 30, 40]`. # Input/Output - `[input]` array.integer `items` A list containing the sizes of the items. (1 ≤ items.length ≤ 1000, 1 ≤ items[i] ≤ 10^6) - `[output]` array.integer The list of items sorted according to the company\'s requirement. # Example Cases Input/Output Example 1 ```python items = [1, 3, 2, 4, 5] # Expected Output: [1, 5, 2, 4, 3] ``` Input/Output Example 2 ```python items = [10, 20, 30, 40, 50, 60] # Expected Output: [10, 60, 20, 50, 30, 40] ``` Input/Output Example 3 ```python items = [3, 1, 4, 2] # Expected Output: [1, 4, 2, 3] ```","solution":"def optimized_sort(items): Returns the list of items sorted such that the smallest is first, followed by the largest remaining, then the second-smallest, then the second-largest, and so on. items.sort() result = [] start, end = 0, len(items) - 1 while start <= end: if start == end: result.append(items[start]) else: result.append(items[start]) result.append(items[end]) start += 1 end -= 1 return result"},{"question":"Given an array of integers, identify the number of subarrays (contiguous elements) that have a sum equal to a given target value. Write a function that receives an array of integers and an integer target value, and returns the number of subarrays that sum up to the target value. **Example 1:** ``` Input: nums = [1, 1, 1], k = 2 Output: 2 Explanation: There are two subarrays that sum up to 2: [1, 1] and [1, 1] ``` **Example 2:** ``` Input: nums = [1, 2, 3], k = 3 Output: 2 Explanation: There are two subarrays that sum up to 3: [1, 2] and [3] ``` **Note:** - The length of the array will not exceed 10,000. - The range of numbers in the array will be between -1,000 and 1,000. - The final output should be an integer representing the count of subarrays meeting the criteria. **Follow up:** - Can you solve it using less than O(n^2) time complexity? - Can you solve it using O(n) space complexity?","solution":"def subarray_sum(nums, k): This function returns the number of subarrays having a sum equal to k. count = 0 curr_sum = 0 sum_map = {0: 1} # To handle the case when subarray starts from index 0 for num in nums: curr_sum += num if (curr_sum - k) in sum_map: count += sum_map[curr_sum - k] if curr_sum in sum_map: sum_map[curr_sum] += 1 else: sum_map[curr_sum] = 1 return count"},{"question":"Trees - Find the Lowest Common Ancestor Write a function lowestCommonAncestor() that returns the lowest common ancestor (LCA) of two given nodes in a binary tree. The function should take the root of the binary tree and the values of two nodes as arguments. The LCA of two nodes v and w in a tree is defined as the lowest node in T that has both v and w as descendants (where we define every node to be a descendant of itself). The function should return the value of the LCA node. You may assume that the tree contains distinct values and that both nodes exist in the tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def lowestCommonAncestor(root, v, w): Returns the lowest common ancestor (LCA) of two given nodes in a binary tree. :param root: TreeNode, root of the binary tree. :param v: int, value of the first node. :param w: int, value of the second node. :return: int, value of the LCA node. # Helper function to find the LCA def find_LCA(node, v, w): if node is None: return None if node.value == v or node.value == w: return node left_lca = find_LCA(node.left, v, w) right_lca = find_LCA(node.right, v, w) if left_lca and right_lca: return node return left_lca if left_lca else right_lca lca_node = find_LCA(root, v, w) return lca_node.value if lca_node else None"},{"question":"Write a function ```python reorder_list(initial_list, order_by) ``` that takes in a list of integers `initial_list` and a list of integers `order_by`, and returns a new list that reorders the elements in `initial_list` based on the order defined in `order_by`. If `order_by` contains elements not in `initial_list`, they are ignored. If `initial_list` contains elements not in `order_by`, they should be added at the end of the new list in their original order. For example: ```python reorder_list([4, 5, 6, 7], [6, 7, 4]) == [6, 7, 4, 5] # The list is reordered based on [6, 7, 4], with 5 left at the end in original order. reorder_list([1, 2, 3], [3, 1, 4, 2]) == [3, 1, 2] # The list is reordered based on [3, 1, 4, 2], with 4 ignored and 2 placed last. reorder_list([7, 8, 9], [9, 7, 8]) == [9, 7, 8] # The list is reordered to match the entire order_by list exactly. reorder_list([10, 20, 30, 40], [50, 20, 30]) == [20, 30, 10, 40] # The list is reordered based on [20, 30], with 10 and 40 added at end in original order. ```","solution":"def reorder_list(initial_list, order_by): Reorders the elements in initial_list based on the order defined in order_by. Elements in initial_list that are not in order_by are added at the end in their original order. :param initial_list: List of integers to be reordered :param order_by: List of integers defining the order :return: Reordered list result = [] initial_set = set(initial_list) for element in order_by: if element in initial_set: result.append(element) for element in initial_list: if element not in result: result.append(element) return result"},{"question":"Fat Chef loves pizza more than anything in the world. In fact, he loves it so much that he\'s spent the better part of his life creating models and algorithms to fulfill his pizza cravings in the most optimal way possible. He\'s currently working on an algorithm to distribute pizza slices among his friends in such a way that everyone gets the maximum possible number of slices. Fat Chef has N slices of pizza and K friends. He wants to distribute these slices such that each friend gets at least one slice, and the difference between the maximum number of slices a friend gets and the minimum number of slices a friend gets is minimized. Write a function `distributeSlices(N, K)` that takes in the total number of slices N and the number of friends K and returns a list of length K representing the optimal distribution of slices that minimizes the aforementioned difference. Your function should use the following signature: ```python def distributeSlices(N: int, K: int) -> List[int]: ``` # Input - An integer N representing the total number of pizza slices (1 leq N leq 10^9). - An integer K representing the number of friends (1 leq K leq 10^5). # Output - A list of integers of length K representing the optimal distribution of slices. # Example ```python distributeSlices(10, 3) -> [3, 3, 4] distributeSlices(7, 4) -> [1, 2, 2, 2] distributeSlices(25, 7) -> [3, 3, 4, 4, 4, 4, 3] ``` # Explanation - In the first example, 10 slices are distributed among 3 friends such that two friends get 3 slices each and one friend gets 4 slices, making the difference between the maximum and minimum number of slices equal to 1. - In the second example, 7 slices are distributed among 4 friends such that one friend gets 1 slice and three others get 2 slices each, making the difference between the maximum and minimum number of slices equal to 1. - In the third example, 25 slices are distributed among 7 friends such that five friends get 4 slices each and two others get 3 slices each, making the difference between the maximum and minimum number of slices equal to 1.","solution":"from typing import List def distributeSlices(N: int, K: int) -> List[int]: # Calculate the base number of slices each friend will get base_slices = N // K # Calculate the remaining slices to be distributed extra_slices = N % K # Create the distribution list distribution = [base_slices] * K # Distribute the remaining slices for i in range(extra_slices): distribution[i] += 1 return distribution"},{"question":"Your task is to implement a **File System Simulation**. The simulation should handle directories and files within a file system, allowing creation, deletion, and navigation. # Task: 1. Implement the **FileSystem** class with the following methods: - `mkdir(path: str)`: Creates a directory at the given path. If some directories in the path do not exist, they should be created automatically. - `addFile(path: str, contents: str)`: Creates a file at the given path with the given contents. The file should be created inside an existing directory or, if necessary, missing directories along the path should be created. - `cd(path: str)`: Change the current directory to the specified path. - `ls(path: str) -> List[str]`: List the contents (both files and directories) of the directory at the specified path in lexicographical order. - `readFile(path: str) -> str`: Returns the contents of the file at the given path. # Example: ```python fs = FileSystem() fs.mkdir(\\"/a/b/c\\") fs.addFile(\\"/a/b/c/d.txt\\", \\"Hello World\\") fs.cd(\\"/a/b/c\\") print(fs.ls(\\"/a/b/c\\")) # Output: [\'d.txt\'] print(fs.readFile(\\"/a/b/c/d.txt\\")) # Output: \\"Hello World\\" fs.addFile(\\"/a/e/f/g.txt\\", \\"Data Science\\") print(fs.ls(\\"/a/e/f\\")) # Output: [\'g.txt\'] print(fs.ls(\\"/a/b\\")) # Output: [\'c\'] ``` # Notes: - The root directory will always be \\"/\\". - Do not worry about file and directory size limits. - The `path` will always be a valid string, and methods will be called with valid parameters. Implement the `FileSystem` class carefully to handle all edge cases and ensure it adheres to the expected behaviors described.","solution":"class FileSystem: def __init__(self): self.fs = {\'\': {}} self.current_dir = \'\' def _get_dir(self, path: str): parts = path.split(\'/\') cur = self.fs[\'\'] for part in parts: if part: if part not in cur: cur[part] = {} cur = cur[part] return cur def mkdir(self, path: str): self._get_dir(path) def addFile(self, path: str, contents: str): parts = path.split(\'/\') file_name = parts.pop() directory = \'/\'.join(parts) dir_dict = self._get_dir(directory) dir_dict[file_name] = contents def cd(self, path: str): self.current_dir = path def ls(self, path: str = None): if path is None: path = self.current_dir dir_dict = self._get_dir(path) return sorted([key for key in dir_dict]) def readFile(self, path: str): parts = path.split(\'/\') file_name = parts.pop() directory = \'/\'.join(parts) dir_dict = self._get_dir(directory) return dir_dict[file_name]"},{"question":"You are given an array of integers where every element appears an even number of times, except for one element which appears an odd number of times. Your task is to find the element that appears an odd number of times. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains two lines of input. - The first line contains an integer n, the number of elements in the array. - The second line contains n space-separated integers representing the elements of the array. -----Output:----- For each testcase, output in a single line the integer that appears an odd number of times. -----Constraints----- - 1 leq T leq 100 - 1 leq n leq 1000 - It is guaranteed that exactly one element in the array appears an odd number of times. -----Sample Input:----- 2 5 1 2 3 2 3 7 4 4 4 4 5 5 6 -----Sample Output:----- 1 6","solution":"def find_odd_occurrence(arr): Find the element in the array that appears an odd number of times. result = 0 for num in arr: result ^= num return result def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(find_odd_occurrence(arr)) return results"},{"question":"You have been appointed as a software engineer for a popular food delivery application. The application allows customers to rate restaurants they order from. Each restaurant can receive multiple reviews from different customers. The application developers want to introduce a new feature to display the top three highest-rated restaurants based on customer reviews. Write a function `topThreeRatedRestaurants` that takes in an array of dictionaries where each dictionary represents a review. Each review dictionary contains: - `restaurant` (string) - the name of the restaurant - `rating` (float) - the rating given by the customer (ranging from 1.0 to 5.0) The function should return a list of the top three unique restaurant names with the highest average ratings. In case of a tie in average ratings, the restaurants should be ordered alphabetically by name. If there are fewer than three restaurants, return the names of all restaurants in the order as specified. If no ratings are provided, return an empty list. Example: ```python reviews = [ {\\"restaurant\\": \\"Burger King\\", \\"rating\\": 4.2}, {\\"restaurant\\": \\"McDonald\'s\\", \\"rating\\": 3.8}, {\\"restaurant\\": \\"Burger King\\", \\"rating\\": 4.8}, {\\"restaurant\\": \\"Wendy\'s\\", \\"rating\\": 4.0}, {\\"restaurant\\": \\"McDonald\'s\\", \\"rating\\": 4.1}, {\\"restaurant\\": \\"Wendy\'s\\", \\"rating\\": 4.5}, ] ``` Calling `topThreeRatedRestaurants(reviews)` should return `[\'Burger King\', \'Wendy\'s\', \'McDonald\'s\']`. Clarifications: 1. Each restaurant name is unique. 2. The rating is always a float ranging between 1.0 and 5.0, inclusive. 3. The input list of reviews may be empty.","solution":"def topThreeRatedRestaurants(reviews): Returns the names of the top three highest-rated restaurants based on the average rating. In case of a tie, the restaurants are ordered alphabetically by name. :param reviews: List[Dict[str, Union[str, float]]] - a list of dictionaries, each containing the \'restaurant\' name and its \'rating\' :return: List[str] - a list of top three unique restaurant names from collections import defaultdict import heapq # Dictionary to hold the total ratings and count of reviews for each restaurant ratings = defaultdict(lambda: [0, 0]) # [sum of ratings, count of reviews] for review in reviews: restaurant = review[\'restaurant\'] rating = review[\'rating\'] ratings[restaurant][0] += rating ratings[restaurant][1] += 1 # Calculate the average ratings and create a list of (average_rating, restaurant_name) avg_ratings = [] for restaurant, (total, count) in ratings.items(): avg_rating = total / count avg_ratings.append((avg_rating, restaurant)) # Sort primarily by descending average rating and tie break alphabetically avg_ratings.sort(key=lambda x: (-x[0], x[1])) # Return the top 3 or fewer restaurant names return [restaurant for _, restaurant in avg_ratings[:3]]"},{"question":"Chef is developing a new feature for his contest platform. He wants to classify each contestant based on their performance. For each contest, a contestant receives a score based on the number of problems they solved. If a contestant solves more problems than another, they get a higher score. If two contestants solve the same number of problems, the one who solved them quicker gets a higher score. To achieve this, you need to process the results of several contests and determine a rank list for each contest. -----Input----- - The first line of the input contains an integer T denoting the number of contests. - For each contest, the first line contains an integer C denoting the number of contestants. - C lines follow, each containing three space-separated integers ID, P, and T for each contestant, where: - ID is the unique identifier of the contestant. - P is the number of problems solved by the contestant. - T is the total time (in minutes) the contestant took to solve the problems. -----Output----- For each contest, print C lines. Each line should contain the ID of the contestants in the decreasing order of their ranks. A contestant with more problems solved should rank higher. If two contestants solved the same number of problems, the one with the lesser total time should rank higher. -----Constraints----- - 1 le T le 1,000 - 1 le C le 1,000 - 1 le ID le 1,000,000 - 0 le P le 100 - 1 le T le 1,000 -----Example Input----- 2 3 101 5 300 102 5 270 103 4 260 3 201 3 200 202 3 220 203 3 210 -----Example Output----- 102 101 103 201 203 202","solution":"def rank_contests(T, contests): result = [] for contest in contests: C = len(contest) sorted_contestants = sorted(contest, key=lambda x: (-x[1], x[2])) ranked_ids = [contestant[0] for contestant in sorted_contestants] result.append(ranked_ids) return result"},{"question":"Implement a function which evaluates an arithmetic expression given in the form of a string and returns the result as an integer. The expression can contain the following: - Non-negative integers. - The operators: `+` (addition), `-` (subtraction), `*` (multiplication), `/` (integer division). - The expression will follow correct arithmetic syntax. - The expression may include spaces which should be ignored. - Assume the input is a valid expression. Your function should handle operator precedence correctly according to standard arithmetic rules (multiplication and division before addition and subtraction). # Examples: ```python >>> evaluate(\\"3 + 2\\") 5 >>> evaluate(\\" 4 - 5 + 2\\") 1 >>> evaluate(\\" 10 + 2 * 6\\") 22 >>> evaluate(\\" 100 * 2 + 12\\") 212 >>> evaluate(\\" 100 * ( 2 + 12 )\\") 1400 >>> evaluate(\\"100 * ( 2 + 12 ) / 14\\") 100 ```","solution":"def evaluate(expression): Evaluates an arithmetic expression given as a string and returns the result as an integer. The expression may contain non-negative integers, and the operators +, -, *, /. def apply_operator(operands, operators): right = operands.pop() left = operands.pop() operator = operators.pop() if operator == \'+\': operands.append(left + right) elif operator == \'-\': operands.append(left - right) elif operator == \'*\': operands.append(left * right) elif operator == \'/\': operands.append(left // right) def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 def calculate(expression): i = 0 n = len(expression) operands = [] operators = [] while i < n: if expression[i] == \' \': i += 1 continue if expression[i] >= \'0\' and expression[i] <= \'9\': val = 0 while (i < n and expression[i] >= \'0\' and expression[i] <= \'9\'): val = (val * 10) + int(expression[i]) i += 1 operands.append(val) i -= 1 elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_operator(operands, operators) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operands, operators) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_operator(operands, operators) return operands[-1] return calculate(expression)"},{"question":"# Task Given a string `s`, determine if it can be rearranged such that there are no consecutive identical characters. If it is possible, return one possible permutation of the string. If it is not possible, return an empty string. # Input/Output `[input]` string `s` A non-empty string consisting only of lowercase English letters. `1 <= s.length <= 1000` `[output]` a string The rearranged string without consecutive identical characters, or an empty string if such rearrangement is not possible. # Example For `s = \\"aabb\\"`, the output could be `\\"abab\\"`. The characters can be rearranged to avoid consecutive identical characters. For `s = \\"aaab\\"`, the output should be `\\"\\"`. There is no way to rearrange the characters to avoid consecutive identical ones. For `s = \\"a\\"`, the output should be `\\"a\\"`. A single character string trivially satisfies the condition.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two consecutive characters are the same. If it\'s not possible, returns an empty string. :param s: The input string consisting of lowercase English letters. :return: Rearranged string or an empty string if not possible. # Count the frequency of each character counter = Counter(s) max_heap = [] # Create a max heap based on the frequency for char, freq in counter.items(): heapq.heappush(max_heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged_s = \'\'.join(result) # If the rearranged string length isn\'t same as the input length, return empty string if len(rearranged_s) != len(s): return \\"\\" return rearranged_s"},{"question":"Write a function that finds the maximum product of two integers in a given list of integers. The code provided below is intended to accomplish this, but it contains logical errors that prevent it from working correctly. # Task Fix the logic in the provided code to ensure it correctly returns the maximum product of any two integers in the list. # Notes You can assume the list contains at least two integers. ```python def max_product(lst): max_prod = float(\'-inf\') n = len(lst) for i in range(n): for j in range(n): if i != j: max_prod = max(max_prod, lst[i]*lst[j]) return max_prod # Sample Inputs # [10, 3, 5, 6, 2] -> 60 (10*6) # [1, -4, 3, -6, 7, 0] -> 24 (-4*-6) ```","solution":"def max_product(lst): max_prod = float(\'-inf\') n = len(lst) for i in range(n): for j in range(i + 1, n): # Start j from i+1 to avoid using the same index twice max_prod = max(max_prod, lst[i] * lst[j]) return max_prod"},{"question":"A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Given a number, determine whether it is prime and provide a justification for the output. But instead of just saying \\"Prime\\" or \\"Not Prime\\", you need to explain the conclusion using factors or lack thereof. -----Input----- First line contains an integer T, the number of test cases to follow. Each of the next T lines contains an integer N. -----Output----- For each test case, output either \\"Prime\\" or \\"Not Prime: x, y, z\\" where x, y, z are factors of the number N (that are not 1 or N), separated by commas in ascending order. Make sure to include all such factors. If N is a prime, output \\"Prime\\" without any factors. -----Constraints----- 1 ≤ T ≤ 10 2 ≤ N ≤ 10^6 -----Example----- Input: 4 7 18 29 30 Output: Prime Not Prime: 2, 3, 6, 9 Prime Not Prime: 2, 3, 5, 6, 10, 15","solution":"import math def is_prime_or_not(N): Determines whether a number N is a prime number or not. If not, returns the factors of N that are not 1 or N. if N <= 1: return \\"Not Prime\\" factors = [] for i in range(2, int(math.sqrt(N)) + 1): if N % i == 0: factors.append(i) if i != N // i: factors.append(N // i) if not factors: return \\"Prime\\" else: factors.sort() return \\"Not Prime: \\" + \\", \\".join(map(str, factors)) def check_prime_factors(T, numbers): Checks multiple numbers to determine if they are prime or not. results = [] for N in numbers: results.append(is_prime_or_not(N)) return results"},{"question":"Create a function zigzag_string(s) that takes a string s and returns a new string that represents a \\"zigzag\\" pattern when written out. A zigzag pattern is one where the characters are rearranged in a zigzag fashion along a given number of levels. Here\'s the function signature: ```python def zigzag_string(s: str, num_levels: int) -> str: pass ``` # Example ```python zigzag_string(\\"PAYPALISHIRING\\", 3) should return \\"PAHNAPLSIIGYIR\\" zigzag_string(\\"ABCDEFG\\", 4) should return \\"AGBFCED\\" ``` # Explanation - For the input \\"PAYPALISHIRING\\" with 3 levels: ``` P A H N A P L S I I G Y I R ``` - For the input \\"ABCDEFG\\" with 4 levels: ``` A G B F C E D ``` The function reads the characters row by row to produce the output string. Note that the number of levels dictates how far down and back up the characters go before repeating. If num_levels is greater than the length of the string, simply return the string itself.","solution":"def zigzag_string(s: str, num_levels: int) -> str: if num_levels == 1 or num_levels >= len(s): return s # Create an array of strings for all levels rows = [\'\'] * num_levels current_row = 0 going_down = False for char in s: # Append the current character to the respective row rows[current_row] += char # If we are at the top or bottom, we reverse the direction if current_row == 0 or current_row == num_levels - 1: going_down = not going_down # Move up or down current_row += 1 if going_down else -1 # Concatenate all rows\' strings to get the final zigzag string return \'\'.join(rows)"},{"question":"You have been hired to implement a system that records and tracks transactions for a small business. The system will be fed with a sequence of commands, each command being either a transaction or an instruction to generate a report. Implement a function `process_commands(commands)` that processes a given list of commands and returns the total income and expenses as a tuple. **Commands:** 1. `\\"income amount\\"`: Record an income transaction with the specified amount. 2. `\\"expense amount\\"`: Record an expense transaction with the specified amount. 3. `\\"report\\"`: Generate a report of the total income and expenses up to this point. **Input:** - `commands`: A list of strings, each representing a command. **Output:** - A tuple of two lists: `([total_income], [total_expenses])` Where each list corresponds to the income and expenses recorded at each `\\"report\\"` command. **Example:** ```python commands = [ \\"income 200\\", \\"expense 50\\", \\"income 300\\", \\"report\\", \\"expense 20\\", \\"report\\", \\"expense 30\\" ] print(process_commands(commands)) # Output: ([500, 500], [50, 70]) ``` **Explanation:** 1. The first report generates totals of 500 income and 50 expenses. 2. After more commands, the second report generates totals of 500 income and 70 expenses (500 - 70 = 430). Note that subsequent reports build on previous ones. **Notes:** - You can assume that the list of commands will always contain at least one `\\"report\\"` command. - Amounts are guaranteed to be non-negative integers. - Maintain the order of reports in the result as they appear in the input. ```python def process_commands(commands): total_income = 0 total_expenses = 0 income_report = [] expenses_report = [] for command in commands: parts = command.split() action = parts[0] if action == \\"income\\": amount = int(parts[1]) total_income += amount elif action == \\"expense\\": amount = int(parts[1]) total_expenses += amount elif action == \\"report\\": income_report.append(total_income) expenses_report.append(total_expenses) return (income_report, expenses_report) ```","solution":"def process_commands(commands): total_income = 0 total_expenses = 0 income_report = [] expenses_report = [] for command in commands: parts = command.split() action = parts[0] if action == \\"income\\": amount = int(parts[1]) total_income += amount elif action == \\"expense\\": amount = int(parts[1]) total_expenses += amount elif action == \\"report\\": income_report.append(total_income) expenses_report.append(total_expenses) return (income_report, expenses_report)"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine if you can remove exactly one character from the string to make it a palindrome. A palindrome is a string that reads the same backward as forward. Write a function to check if it is possible to convert the given string to a palindrome by removing exactly one character. -----Input----- The input consists of a single line containing the string s (1 ≤ |s| ≤ 10^5). -----Output----- Output \\"YES\\" if it is possible to make the string a palindrome by removing exactly one character. Otherwise, output \\"NO\\". -----Example----- Input abca Output YES Input abc Output NO","solution":"def can_be_palindrome_by_removing_one_char(s): Determines if a string can be converted to a palindrome by removing exactly one character. def is_palindrome(x): return x == x[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try removing one character either from the start or end removed_left = s[left+1:right+1] removed_right = s[left:right] return is_palindrome(removed_left) or is_palindrome(removed_right) left += 1 right -= 1 return False # The string is already a palindrome # Function to get the YES/NO response def check_remove_one_char_palindrome(s): return \\"YES\\" if can_be_palindrome_by_removing_one_char(s) else \\"NO\\""},{"question":"In a city called Arrayville, developers are busy working with arrays. One day, they encounter a challenge where they need to find the smallest subarray within a given array that, when sorted, would result in the entire array being sorted in non-decreasing order. Formally, you are given an array of integers. You need to find the shortest subarray which, when sorted, would make the whole array sorted in non-decreasing order. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains one integer n, the size of the array. - The second line of each test case contains n space-separated integers representing the elements of the array. -----Output----- For each test case, print a single line containing two integers denoting the starting and ending indices (1-based) of the smallest subarray that needs to be sorted. If the array is already sorted, output 0. -----Constraints----- - 1 le T le 100 - 1 le n le 100,000 - -10^9 le array elements le 10^9 -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 3 9 1 2 6 5 4 7 8 9 10 4 1 3 2 4 5 1 2 3 4 5 -----Example Output----- 3 5 2 3 0 -----Explanation----- Example case 1: The subarray from index 3 to 5 ([6, 5, 4]) needs to be sorted to make the whole array sorted. Example case 2: The subarray from index 2 to 3 ([3, 2]) needs to be sorted. Example case 3: The array is already sorted, so the output is 0.","solution":"def find_smallest_subarray_to_sort(arr): This function will find the smallest subarray which, when sorted, would make the whole array sorted in non-decreasing order. n = len(arr) left, right = 0, n - 1 # Find the first element which is out of order from the left while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 # If the entire array is already sorted if left == n - 1: return 0 # Find the first element which is out of order from the right while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # Find the minimum and maximum in the subarray arr[left:right+1] min_val = min(arr[left:right+1]) max_val = max(arr[left:right+1]) # Extend the left boundary to include any number greater than min_val while left > 0 and arr[left - 1] > min_val: left -= 1 # Extend the right boundary to include any number less than max_val while right < n - 1 and arr[right + 1] < max_val: right += 1 return left + 1, right + 1 def process_test_cases(test_cases): Process multiple test cases and return the results for each test case in the specified format. results = [] for case in test_cases: n, array = case result = find_smallest_subarray_to_sort(array) results.append(result) return results"},{"question":"# Introduction You have been hired by a taxi company to help them optimize their route assignment system. The company has a fleet of taxis represented by certain ID numbers, and a list of requests for trips. Each request contains a starting point and a destination, both represented as integer positions along a straight line. Each taxi also has a current position on that same line. Write a function that assigns each trip request to a taxi such that the total moving distance of all the taxis is minimized. A taxi can only be assigned one trip request. If there are more trips than taxis, some trips will remain unassigned. Input - `taxis`: A list of integers representing the current positions of the available taxis. - `requests`: A list of tuples where each tuple contains two integers - the starting point and the destination of a trip request. Output - The function should return a list of tuples, where each tuple contains the assigned taxi\'s ID (its index in the input `taxis` list) and the trip request tuple. The list should be ordered such that the first element corresponds to the best-matched taxi for the first request, the second element to the second request, and so on. Note - If there are more requests than available taxis, only include as many assignments as there are taxis in the output. - If two taxis have the same distance to a request, the taxi with the lower index should be prioritized. Function Signature ```python def assign_taxis(taxis: List[int], requests: List[Tuple[int, int]]) -> List[Tuple[int, Tuple[int, int]]]: pass ``` Example ```python taxis = [1, 5, 9] requests = [(3, 10), (8, 2), (4, 6), (7, 9)] assign_taxis(taxis, requests) ``` Expected Output ```python [(0, (3, 10)), (2, (8, 2)), (1, (4, 6))] ``` Explanation: 1. Taxi at index 0 (position 1) is closest to starting position 3, so it is assigned the request (3, 10). 2. Taxi at index 2 (position 9) is closest to starting position 8, so it is assigned the request (8, 2). 3. Taxi at index 1 (position 5) is closest to starting position 4, so it is assigned the request (4, 6). 4. The request (7, 9) is not assigned because there are no more available taxis.","solution":"from typing import List, Tuple def assign_taxis(taxis: List[int], requests: List[Tuple[int, int]]) -> List[Tuple[int, Tuple[int, int]]]: assignments = [] available_taxis = list(enumerate(taxis)) for request in requests: if not available_taxis: break start_point, _ = request best_taxi_index = min(available_taxis, key=lambda x: abs(x[1] - start_point)) assignments.append((best_taxi_index[0], request)) available_taxis.remove(best_taxi_index) return assignments"},{"question":"You are given a string consisting of lowercase letters and spaces. Your task is to write a function that will modify this string in such a way that each word in the string is replaced by a unique identifier based on its first occurrence and its order in the list of unique words. The unique identifier for each word should be the smallest number that has not been used previously, starting with 1. The function should return the modified string with the unique identifiers in place of the original words. For example: ``` \\"For example example this is a test example for test coverage\\" \\"1 2 2 3 4 5 6 2 7 5 8\\" ``` The input string will always be non-empty and contain only lowercase letters and spaces, with at least one word present. Each word will be separated by exactly one space. Function signature: `def replace_with_identifiers(s: str) -> str:` Here are some additional examples: 1. Input: \\"hello world hello everyone\\" Output: \\"1 2 1 3\\" 2. Input: \\"the quick brown fox jumps over the lazy dog\\" Output: \\"1 2 3 4 5 6 7 8 9\\" 3. Input: \\"repeat repeat repeat\\" Output: \\"1 1 1\\" Ensure your solution handles varying lengths and word counts efficiently.","solution":"def replace_with_identifiers(s: str) -> str: This function takes a string consisting of lowercase letters and spaces, and replaces each word with a unique identifier based on its first occurrence and order in the list of unique words. Args: s (str): Input string containing words separated by spaces. Returns: str: Modified string with unique identifiers in place of the original words. words = s.split() word_to_id = {} next_id = 1 result = [] for word in words: if word not in word_to_id: word_to_id[word] = next_id next_id += 1 result.append(str(word_to_id[word])) return \' \'.join(result)"},{"question":"=====Function Descriptions===== itertools.combinations() This tool returns r length subsequences of elements from the input iterable. Combinations are emitted in lexicographic sorted order. So, if the input iterable is sorted, the combination tuples will be produced in sorted order. Sample Code >>> from itertools import combinations >>> >>> print list(combinations(\'12345\', 2)) [(\'1\', \'2\'), (\'1\', \'3\'), (\'1\', \'4\'), (\'1\', \'5\'), (\'2\', \'3\'), (\'2\', \'4\'), (\'2\', \'5\'), (\'3\', \'4\'), (\'3\', \'5\'), (\'4\', \'5\')] >>> >>> print list(combinations([1,2,3,4], 3)) [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)] >>> =====Problem Statement===== You are given a list of N integers, and a positive integer K. Your task is to print all possible combinations of size K of the elements in the list. Example List: [2, 4, 6] K: 2 Combinations: [(2, 4), (2, 6), (4, 6)] =====Input Format===== The first line contains the space separated elements of the list. The second line contains the integer K. =====Constraints===== 1 <= N <= 20 1 <= K <= N =====Output Format===== Output the space separated tuples of the combinations, where each tuple is output in a new line.","solution":"from itertools import combinations def print_combinations(elements, k): Given a list of integers \'elements\' and an integer \'k\', prints all combinations of size \'k\' from the list in lexicographic order. comb = combinations(elements, k) for c in comb: print(c)"},{"question":"Write a function that simulates the behavior of the built-in `map` function without using `map` itself or any other high-level function like `filter` or `reduce`. The purpose is to apply a given function to each item of an iterable (list, tuple, etc.) and yield the results one by one using a generator. Conditions: - The function must be implemented as a generator. - The function should accept two arguments: a function to apply and an iterable. - The function should be able to handle any kind of iterable and apply any kind of function that normally works with `map`. Example usage: ```python def square(x): return x * x # Create a generator that applies \'square\' to each element of the list result = custom_map(square, [1, 2, 3, 4, 5]) # Convert the generator to a list to see the results print(list(result)) # Output should be [1, 4, 9, 16, 25] ``` Remember that the function should be robust and handle edge cases appropriately, such as an empty iterable.","solution":"def custom_map(func, iterable): Applies the function \'func\' to each item of \'iterable\' and yields the results one by one. for item in iterable: yield func(item)"},{"question":"Given a list/array of words, create a program to group the anagrams together. The result should be a list of lists, where each sublist contains words that are anagrams of each other. The order of the output sublists and the order of words within each sublist does not matter. # Examples: ``` [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] # should return [[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]] [\\"\\"] # should return [[\\"\\"]] [\\"a\\"] # should return [[\\"a\\"]] ``` ```python # Input: list of words words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] # Output: list of lists of anagrams result = [[\\"ate\\", \\"eat\\", \\"tea\\"], [\\"nat\\", \\"tan\\"], [\\"bat\\"]] ``` **Constraint:** * The words are made up of lowercase letters. * It is guaranteed that there will always be at least one word provided.","solution":"from collections import defaultdict def group_anagrams(words): Groups words that are anagrams of each other. :param words: List of words :return: List of lists of anagrams anagrams = defaultdict(list) for word in words: # Sort the word to use as a key sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"# Task Dr. Smith, an enthusiast mathematician, deals with grid-like puzzles. Today, she wants to check the validity of paths in a grid filled with integers. Starting from the top-left corner `(1, 1)`, she can only move right or down to reach the bottom-right corner `(n, n)`. Each step she makes should follow a specific pattern: if she moves from cell `(i, j)` to `(i, j+1)` or `(i+1, j)`, the value in the new cell must be exactly one more than the value in the current cell. Given the dimensions of the grid and the grid itself, determine whether there exists at least one valid path from `(1, 1)` to `(n, n)`. # Example For the grid ``` n = 3 1 2 3 2 3 4 3 4 5 ``` The result should be `True`, as there exists a path: `(1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3)`. For the grid ``` n = 3 1 2 3 3 4 5 6 7 8 ``` The result should be `False`, as no valid path exists that follows the increment rule from `(1, 1)` to `(3, 3)`. # Input/Output - `[input]` integer `n` `2 ≤ n ≤ 1000` - `[input]` 2D list of integers `grid` `grid` is an `n x n` matrix, where each value is a positive integer within the range `[1, 10^6]`. - `[output]` boolean `True` if there is at least one valid path, `False` otherwise.","solution":"def is_valid_path(n, grid): Determines if there exists a valid path from (1,1) to (n,n) in the given grid. :param n: Dimensions of the grid (n x n) :param grid: 2D list representing the grid :return: True if at least one valid path exists, False otherwise # A helper function to check valid movement def is_valid_move(x, y, new_x, new_y): return 0 <= new_x < n and 0 <= new_y < n and grid[new_x][new_y] == grid[x][y] + 1 # Use BFS to traverse the grid from collections import deque # Starting point queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # Check if we\'ve reached the bottom-right corner if x == n - 1 and y == n - 1: return True # Move right if is_valid_move(x, y, x, y + 1) and (x, y + 1) not in visited: queue.append((x, y + 1)) visited.add((x, y + 1)) # Move down if is_valid_move(x, y, x + 1, y) and (x + 1, y) not in visited: queue.append((x + 1, y)) visited.add((x + 1, y)) return False"},{"question":"Write a program that determines if a given positive integer is a perfect number. A perfect number is a number that is equal to the sum of its proper divisors, excluding itself. For example: ``` 28 Proper divisors of 28: 1, 2, 4, 7, 14 Sum of proper divisors: 1 + 2 + 4 + 7 + 14 = 28 28 is a perfect number ``` An example of a number that is not perfect: ``` 12 Proper divisors of 12: 1, 2, 3, 4, 6 Sum of proper divisors: 1 + 2 + 3 + 4 + 6 = 16 12 is not a perfect number ``` The input will always be a single positive integer between 2 and 99. The program should return true if the number is perfect, and false if it is not.","solution":"def is_perfect_number(num): Determines if a given positive integer is a perfect number. :param num: Positive integer to check :return: True if the number is perfect, False otherwise if num <= 1: return False sum_of_divisors = 0 for i in range(1, num): if num % i == 0: sum_of_divisors += i return sum_of_divisors == num"},{"question":"Write a function that simulates a basic ticket purchasing system for an event. The system should have a fixed number of tickets available, and allow users to purchase up to a maximum number of tickets in one transaction. The function should return a message indicating the success or failure of the purchase. The function should take three parameters: 1. `total_tickets` (int): The total number of tickets available. 2. `max_tickets_per_purchase` (int): The maximum number of tickets a user can purchase in one transaction. 3. `requested_tickets` (int): The number of tickets the user wants to purchase. The function should return: - \\"Purchase successful\\" if the requested number of tickets is available and does not exceed `max_tickets_per_purchase`. - \\"Not enough tickets available\\" if the requested number of tickets exceeds the available tickets. - \\"Cannot purchase more than `max_tickets_per_purchase` tickets\\" if the requested number of tickets exceeds the maximum allowed per purchase. **Example**: ```python def purchase_tickets(total_tickets, max_tickets_per_purchase, requested_tickets): # Your code here # Example 1: # total_tickets = 50, max_tickets_per_purchase = 5, requested_tickets = 3 # Output: \\"Purchase successful\\" # Example 2: # total_tickets = 2, max_tickets_per_purchase = 5, requested_tickets = 3 # Output: \\"Not enough tickets available\\" # Example 3: # total_tickets = 50, max_tickets_per_purchase = 5, requested_tickets = 7 # Output: \\"Cannot purchase more than 5 tickets\\" ```","solution":"def purchase_tickets(total_tickets, max_tickets_per_purchase, requested_tickets): Simulates a basic ticket purchasing system for an event. Parameters: - total_tickets (int): The total number of tickets available. - max_tickets_per_purchase (int): The maximum number of tickets a user can purchase in one transaction. - requested_tickets (int): The number of tickets the user wants to purchase. Returns: - str: Message indicating the success or failure of the purchase. if requested_tickets > max_tickets_per_purchase: return f\\"Cannot purchase more than {max_tickets_per_purchase} tickets\\" if requested_tickets > total_tickets: return \\"Not enough tickets available\\" return \\"Purchase successful\\""},{"question":"Given a string s and an integer k, you are allowed to choose one character of s and change it to any character in the alphabet. Return the length of the longest substring containing the same letter you can get after performing at most k changes. Example 1: Input: s = \\"ABAB\\", k = 2 Output: 4 Explanation: Change the two \'A\'s to \'B\'s or the two \'B\'s to \'A\'s to make the string \\"BBBB\\" or \\"AAAA\\". Example 2: Input: s = \\"AABABBA\\", k = 1 Output: 4 Explanation: Change the one \'A\' to \'B\' to make the string \\"AABBBBA\\". The longest substring is \\"BBBB\\". Constraints: 1 <= s.length <= 10^5 s consists of only uppercase English letters. 0 <= k <= s.length","solution":"def characterReplacement(s, k): Returns the length of the longest substring containing the same letter after performing at most k changes. left = 0 counts = {} max_count = 0 result = 0 for right in range(len(s)): counts[s[right]] = counts.get(s[right], 0) + 1 max_count = max(max_count, counts[s[right]]) while (right - left + 1) - max_count > k: counts[s[left]] -= 1 left += 1 result = max(result, right - left + 1) return result"},{"question":"Write a function named `inventory_management` that helps manage the stock of items in a warehouse. The function takes a string command and processes it to manipulate the inventory. Each command can be one of the following: - \\"restock item_name quantity\\": Adds the given quantity to the stock of the item. If the item does not exist in the inventory, it is added with the given quantity. - \\"sell item_name quantity\\": Removes the given quantity from the item\'s stock. If the stock is insufficient, set the quantity of the item to 0. - \\"remove item_name\\": Removes the item from the inventory entirely. - \\"check_stock item_name\\": Returns the current quantity of the item in the inventory. If the item does not exist, return \\"Item not found\\". The function should maintain an internal dictionary to keep track of the stock. If the command is invalid or not recognized, return \\"Invalid command\\". Example usage: ```python inventory_management(\\"restock apples 10\\") # Adds 10 apples to the inventory inventory_management(\\"sell apples 4\\") # Removes 4 apples from the inventory inventory_management(\\"remove apples\\") # Completely removes apples from the inventory inventory_management(\\"check_stock apples\\")# Returns the current stock of apples (or \\"Item not found\\" if apples don\'t exist) ```","solution":"inventory = {} def inventory_management(command): global inventory parts = command.split() if parts[0] == \\"restock\\": item = parts[1] quantity = int(parts[2]) if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif parts[0] == \\"sell\\": item = parts[1] quantity = int(parts[2]) if item in inventory: inventory[item] = max(0, inventory[item] - quantity) elif parts[0] == \\"remove\\": item = parts[1] if item in inventory: del inventory[item] elif parts[0] == \\"check_stock\\": item = parts[1] return inventory.get(item, \\"Item not found\\") else: return \\"Invalid command\\""},{"question":"=====Problem Statement===== The included code stub will read an integer, n, from STDIN. You need to generate a list of numbers starting from 1 to n such that: - If the number is divisible by 3, it should be replaced by \\"Fizz\\". - If the number is divisible by 5, it should be replaced by \\"Buzz\\". - If the number is divisible by both 3 and 5, it should be replaced by \\"FizzBuzz\\". The output should be printed as a single string, with each element separated by a space. =====Example===== n = 15 Print the string \\"1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz\\". =====Input Format===== The first line contains an integer n. =====Constraints===== 1≤n≤100 =====Output Format===== Print the modified list of integers from 1 through n as a single string separated by spaces.","solution":"def fizz_buzz(n): Generates a list of numbers from 1 to n, where: - Numbers divisible by 3 are replaced by \\"Fizz\\" - Numbers divisible by 5 are replaced by \\"Buzz\\" - Numbers divisible by 3 and 5 are replaced by \\"FizzBuzz\\" Args: n (int): The upper limit of the list Returns: str: The modified list as a string with elements separated by spaces result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return \\" \\".join(result)"},{"question":"You are given an array of N integers. You have to determine if there exists a triplet (i, j, k) such that 1 ≤ i < j < k ≤ N and ai < aj < ak. If there is such a triplet, print \\"yes\\". If there is no such triplet, print \\"no\\". -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line of each test case contains N space-separated integers representing the array. -----Output----- For each test case, output a single line containing \\"yes\\" or \\"no\\" (without quotes) accordingly. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 105 - -109 ≤ ai ≤ 109 -----Subtasks----- - Subtask #1 (40 points) : 1 ≤ N ≤ 100 - Subtask #2 (60 points) : original constraints -----Example----- Input: 3 6 1 2 3 4 5 6 6 6 5 4 3 2 1 6 1 3 2 4 6 5 Output: yes no yes -----Explanation----- Example case 1. Triplet (1, 2, 3) forms 1 < 2 < 3, which is in increasing order. Example case 2. There is no triplet in the form of i < j < k where ai < aj < ak. Example case 3. Triplet (1, 3, 4) forms 1 < 3 < 4.","solution":"def has_increasing_triplet(arr): Function to determine if there exists a triplet (i, j, k) such that 1 ≤ i < j < k ≤ N and ai < aj < ak. first = second = float(\'inf\') for num in arr: if num <= first: first = num elif num <= second: second = num else: return \\"yes\\" return \\"no\\" def process_test_cases(test_cases): results = [] for case in test_cases: N, arr = case result = has_increasing_triplet(arr) results.append(result) return results"},{"question":"*** Arithmetic Series Calculation *** In this task, you are required to calculate the sum of an arithmetic series. An arithmetic series is a sequence of numbers with a constant difference between consecutive terms. The series can be defined as: `a, a + d, a + 2d, a + 3d, ... , a + (n-1)d` where `a` is the first term, `d` is the common difference, and `n` is the number of terms. # Function Signature You need to implement a function with the following signature: ```python def arithmetic_series_sum(a: int, d: int, n: int) -> int: ``` # Arguments: - `a` (int): The first term of the series. - `d` (int): The common difference between consecutive terms. - `n` (int): The number of terms in the series. # Returns: - The function should return the sum of the first `n` terms of the arithmetic series. # Examples: ```python arithmetic_series_sum(1, 1, 5) == 15 # Explanation: The series is 1, 2, 3, 4, 5. Sum = 1+2+3+4+5 = 15 arithmetic_series_sum(2, 3, 4) == 26 # Explanation: The series is 2, 5, 8, 11. Sum = 2+5+8+11 = 26 arithmetic_series_sum(10, 0, 3) == 30 # Explanation: The series is 10, 10, 10. Sum = 10+10+10 = 30 ``` # Note: - You may assume that `n` will always be a non-negative integer. - If `n` is 0, the sum should be 0 as there are no terms in the series.","solution":"def arithmetic_series_sum(a: int, d: int, n: int) -> int: Calculates the sum of the first `n` terms of an arithmetic series. :param a: The first term of the series :param d: The common difference between consecutive terms :param n: The number of terms in the series :return: The sum of the first `n` terms if n <= 0: return 0 return n * (2 * a + (n - 1) * d) // 2"},{"question":"Your task is to write a function that initializes a matrix and performs a series of operations on it. The function should take the following parameters: - `n`: An integer that specifies the size of the n x n matrix. - `operations`: A list of strings where each string represents a specific operation to be performed on the matrix. The matrix should be initialized with zeros. Each operation in the `operations` list is a string that will be of the format \\"**operation x y z**\\" where: - `operation`: can be either \\"add\\" or \\"multiply\\". - `x`, `y`: are the indices of the element in the matrix to be manipulated. - `z`: is the integer value to be added or the factor to multiply the element with. The operations should be performed in the sequence they are given. For example, if `operation` is \\"add\\": - The value at the position (x, y) in the matrix should be incremented by z. If `operation` is \\"multiply\\": - The value at the position (x, y) in the matrix should be multiplied by z. After performing all operations, return the final state of the matrix. # Function Signature ```python def manipulate_matrix(n: int, operations: list) -> list: ``` # Input - `n` (1 ≤ n ≤ 1000): An integer representing the size of the matrix. - `operations` (1 ≤ len(operations) ≤ 100000): A list of strings representing operations to be performed on the matrix. # Output - Return a list of lists representing the final state of the matrix. # Example ```python manipulate_matrix(3, [\\"add 0 0 5\\", \\"add 1 1 3\\", \\"multiply 0 0 2\\", \\"add 2 2 4\\"]) -> [[10, 0, 0], [0, 3, 0], [0, 0, 4]] ``` # Constraints - Each `x`, `y` will be valid indices within the matrix. - `z` represents an integer and can be any value in the range -1000 to 1000.","solution":"def manipulate_matrix(n: int, operations: list) -> list: This function initializes an n x n matrix with zeros and performs a series of operations on it. The operations are specified in the form of strings and can either be \\"add\\" or \\"multiply\\". Parameters: - n: An integer representing the size of the n x n matrix. - operations: A list of strings representing the operations to be performed on the matrix. Returns: - A list of lists representing the final state of the matrix. # Initialize the matrix with zeros matrix = [[0 for _ in range(n)] for _ in range(n)] # Perform each operation on the matrix for operation in operations: op_parts = operation.split() op_type = op_parts[0] x = int(op_parts[1]) y = int(op_parts[2]) z = int(op_parts[3]) if op_type == \\"add\\": matrix[x][y] += z elif op_type == \\"multiply\\": matrix[x][y] *= z return matrix"},{"question":"Write a function `second_highest` that returns the second highest number from a list of integers. # Notes: - Return `None` if the list is empty or contains only one unique element. - The result should be unique; that is, any repeated highest value should not be considered for the second highest. # Examples: ```python second_highest([1, 2, 3, 4, 5]) => 4 second_highest([5, 5, 4, 4, 3]) => 4 second_highest([1]) => None second_highest([]) => None ```","solution":"def second_highest(numbers): Returns the second highest number from a list of integers. Returns None if the list is empty or contains one unique element. if len(numbers) < 2: return None unique_numbers = set(numbers) if len(unique_numbers) < 2: return None unique_numbers.remove(max(unique_numbers)) return max(unique_numbers)"},{"question":"Task In the world of simplified gardening, you are given a rectangular garden grid represented by a list of lists of integers. Each integer represents the height of the plant at that position. Your task is to find the tallest plant in the garden. Write a function to determine the tallest plant and return its height. Additionally, identify and list all the positions (i.e., row and column indices) where the tallest plant is located. # Example For `garden = [[2, 3, 4], [4, 6, 1], [5, 6, 2]]`, the result should be `6, [(1, 1), (2, 1)]`. ``` 2 3 4 4 6 1 5 6 2 ``` The tallest plant has a height of `6` and it is located at positions `(1, 1)` and `(2, 1)` in the grid. # Input/Output - `[input]` 2D integer array `garden` The garden grid (list of lists of integers). - `[output]` tuple An integer representing the height of the tallest plant, and a list of tuples representing the positions of the tallest plant in the format `(row_index, column_index)`.","solution":"def find_tallest_plant(garden): Finds the tallest plant in the garden and its positions. Parameters: garden (list of lists of int): The garden grid. Returns: tuple: The height of the tallest plant and a list of positions as tuples. if not garden or not garden[0]: return 0, [] max_height = float(\'-inf\') positions = [] for i, row in enumerate(garden): for j, height in enumerate(row): if height > max_height: max_height = height positions = [(i, j)] elif height == max_height: positions.append((i, j)) return max_height, positions"},{"question":"# Kata Task You are given an array of integers. Your task is to rearrange the array so that all the even elements appear before all the odd elements. Write a function that takes in an array of integers and returns the reordered array with even numbers first, followed by odd numbers. The relative order of odd and even numbers should be preserved as they appear in the original array. Function Signature `def reorder_array(arr: List[int]) -> List[int]:` Input - A list of integers `arr`, where each element is an integer. Output - A list of integers with all the even elements appearing before all the odd elements, with relative order preserved. Example ```python reorder_array([1, 2, 3, 4, 5, 6]) # Output: [2, 4, 6, 1, 3, 5] reorder_array([3, 1, 2, 4]) # Output: [2, 4, 3, 1] ``` Notes - An integer is even if it is divisible by 2, and odd otherwise. - An empty list should return an empty list.","solution":"from typing import List def reorder_array(arr: List[int]) -> List[int]: Reorders an array so that all the even elements appear before all the odd elements. The relative order of the even and odd elements is preserved from the original array. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"Lila is preparing for a programming marathon and she needs to practice solving large array manipulation problems. She has a special program that can perform a series of operations on an array. The operations are defined as follows: 1. Increment: Increment all elements in a specified sub-array by a given value. 2. Reverse: Reverse all elements in a specified sub-array. Lila wants a program that performs a series of operations on the array and then returns the modified array after all operations are applied. ----Input---- The first line contains two integers, N and Q, denoting the length of the array and the number of operations, respectively. The second line contains N space-separated integers, denoting the elements of the array. Each of the next Q lines contains an operation in the format: - \\"1 L R X\\" denotes an increment operation where all elements from index L to R (inclusive, 0-based index) are incremented by X. - \\"2 L R\\" denotes a reverse operation where all elements from index L to R (inclusive, 0-based index) are reversed. ----Output---- Output the modified array after all operations are applied. ----Constraints---- - 1 ≤ N ≤ 1000 - 1 ≤ Q ≤ 1000 - -10^9 ≤ Element of array ≤ 10^9 - 1 ≤ X ≤ 10^9 - 0 ≤ L ≤ R < N ----Example---- Input: 5 3 1 2 3 4 5 1 0 4 2 2 1 3 1 0 2 1 Output: 4 6 5 2 7 Explanation: 1. Increment all elements from index 0 to 4 by 2: [3, 4, 5, 6, 7] 2. Reverse elements from index 1 to 3: [3, 6, 5, 4, 7] 3. Increment all elements from index 0 to 2 by 1: [4, 7, 6, 4, 7]","solution":"def manipulate_array(N, Q, array, operations): Perform a series of operations on the array and returns the modified array. Args: N: Integer, the length of the array. Q: Integer, the number of operations. array: List of integers, the initial array. operations: List of operations. Each operation is either: - \\"1 L R X\\" -> Increment all elements from index L to R by X. - \\"2 L R\\" -> Reverse all elements from index L to R. Returns: List of integers: The modified array after all operations. for op in operations: if op[0] == 1: L, R, X = op[1], op[2], op[3] for idx in range(L, R + 1): array[idx] += X elif op[0] == 2: L, R = op[1], op[2] array[L:R + 1] = array[L:R + 1][::-1] return array"},{"question":"Given a list of integers, write a function to move all the zeros to the end while maintaining the relative order of the non-zero elements. ```python move_zeros([0, 1, 0, 3, 12]) ==> [1, 3, 12, 0, 0] move_zeros([1, 0, 0, 2, 3, 0, 4, 0]) ==> [1, 2, 3, 4, 0, 0, 0, 0] move_zeros([0, 0, 0, 0, 0]) ==> [0, 0, 0, 0, 0] move_zeros([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5] ```","solution":"def move_zeros(nums): Moves all zeros in the list to the end while maintaining the relative order of the non-zero elements. Parameters: nums (List[int]): The list of integers. Returns: List[int]: The list with zeros moved to the end. zero_count = nums.count(0) non_zero_nums = [num for num in nums if num != 0] non_zero_nums.extend([0] * zero_count) return non_zero_nums"},{"question":"Description Given a list of integers, return the maximum product of three numbers in the list. # Notes: * The list will contain at least three integers. * The integers can be positive, negative, or zero. ___ Examples ``` max_product([1, 2, 3]) === 6 max_product([1, 2, 3, 4]) === 24 max_product([-10, -10, 5, 2]) === 500 max_product([-1, -2, -3, -4]) === -6 ```","solution":"def max_product(nums): Return the maximum product of three numbers in the list. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"A company is testing a new water distribution system in their research facility, which consists of N chambers connected by pipes. The company\'s engineers have built a flow mechanism to calculate how much water flows through these pipes. Each chamber is connected directly to two other chambers except the first and the last chambers which are connected only to their immediate next or previous chamber, respectively. The engineers want to simulate the water distribution through these chambers starting from the first chamber and flowing to the last one. The initial amount of water in the first chamber is provided as `W` liters. Each chamber has a flow rate factor `F` which determines how much water it retains and passes to the next chamber. Specifically, each chamber will retain F% of the water it receives and pass on the remaining (100-F)% to the next chamber. Write a program that simulates this process and calculates the final amount of water in each chamber after the water has been processed from the first chamber to the last one. -----Input----- The first line contains a single integer T, the number of test cases. Each test case is described by two integers N and W on the first line, and a single integer F on the second line. -----Output----- For each test case, output N space-separated integers representing the amount of water in each chamber from the first to the last after processing. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ W ≤ 1,000 - 0 ≤ F ≤ 100 -----Example----- Input: 2 5 100 50 3 300 25 Output: 100 50 25 12 6 300 225 168 126","solution":"def water_distribution(T, scenarios): results = [] for scenario in scenarios: N, W, F = scenario chambers = [0] * N chambers[0] = W for i in range(1, N): chambers[i] = chambers[i-1] * (100 - F) / 100 results.append(\\" \\".join(map(lambda x: str(int(x)), chambers))) return results"},{"question":"Write a function that takes an array of integers and returns the most frequent integer. If there are multiple integers with the same highest frequency, return the one that appears first in the array. ``` most_frequent([1, 3, 1, 3, 2, 1]) => 1 most_frequent([3, 3, 1, 3, 2, 1]) => 3 most_frequent([1, 3, 2, 3, 2, 1]) => 1 most_frequent([1, 1, 2, 2, 3, 3, 3]) => 3 ``` **Note:** The input array is non-empty, and you can assume that integers will only appear once or more.","solution":"def most_frequent(arr): Returns the most frequent integer in the array. If there are multiple integers with the same highest frequency, returns the one that appears first in the array. frequency = {} highest_freq = 0 most_frequent_element = arr[0] for num in arr: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Check if this is the new highest frequency or comes first in case of tie if frequency[num] > highest_freq or (frequency[num] == highest_freq and arr.index(num) < arr.index(most_frequent_element)): highest_freq = frequency[num] most_frequent_element = num return most_frequent_element"},{"question":"Create a function `find_max_occurred_char` that takes a string as input and returns the character that appears the most frequently in the string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. For example: ```python find_max_occurred_char(\\"character\\") == \'c\' # \'c\' appears 3 times, the most frequently find_max_occurred_char(\\"abbccc\\") == \'c\' # \'c\' appears in the last of equal frequency characters find_max_occurred_char(\\"abc\\") == \'a\' # \'a\' appears first among characters with the same frequency find_max_occurred_char(\\"xyz\\") == \'x\' # all characters appear once, return the first character find_max_occurred_char(\\"aabbccaa\\") == \'a\' # \'a\' appears 4 times, the most frequently ``` Assume that the string will contain only lowercase alphabetic characters, and will never be empty.","solution":"def find_max_occurred_char(s): Returns the character that appears the most frequently in the string. If multiple characters have the same highest frequency, the one that appears first in the string is returned. from collections import defaultdict char_count = defaultdict(int) for char in s: char_count[char] += 1 max_count = 0 max_char = \'\' for char in s: if char_count[char] > max_count: max_count = char_count[char] max_char = char return max_char"},{"question":"You are given a list of N integers representing elevations of a landscape, where each integer corresponds to the elevation of a point in the landscape. Your aim is to find out the largest container that can be formed by using any two elevations as the boundaries of the container. The container\'s width would be the distance between the two selected points, and its height would be the minimum elevation of the two points forming the container. -----Input format----- - The first line contains a single positive integer N, representing the number of points in the landscape. - The second line contains N integers, each representing the elevation of the corresponding point. -----Output format----- A single integer in a single line giving the area of the largest possible container. -----Constraints----- You may assume that 2 ≤ N ≤ 100,000, and 1 ≤ elevation ≤ 10,000. -----Example----- Here is a sample input and output corresponding to the example above: -----Sample input----- 6 1 8 6 2 5 4 -----Sample output----- 24 Explanation: The optimal container can be formed using the elevations at index 1 and index 5 (1-based indices), having an elevation height of 6 (minimum of 8 and 6) and a width of 4 (distance between positions 1 and 5). Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def max_container_area(elevations): Returns the area of the largest container that can be formed using any two elevations as the boundaries. Parameters: elevations (list of int): List of integers representing the elevations of the landscape points. Returns: int: The area of the largest container. left, right = 0, len(elevations) - 1 max_area = 0 while left < right: height = min(elevations[left], elevations[right]) width = right - left current_area = height * width max_area = max(max_area, current_area) # Move the pointer pointing to the shorter line to try and find a taller boundary if elevations[left] < elevations[right]: left += 1 else: right -= 1 return max_area"},{"question":"You are given a string comprising a mix of alphanumeric characters and punctuation marks. Your task is to write a function that sorts the characters in the string such that all alphabetical characters (both uppercase and lowercase) come first, followed by numeric characters, and only then any punctuation marks. Within each category, characters should appear in the order they first appear in the input string. Write a function `customSortString(s: str) -> str` that takes a string `s` as input and returns a new string sorted according to the rules described above. Example: ``` Input: \\"a1!B2@\\" Output: \\"aB12!@\\" ```","solution":"def customSortString(s: str) -> str: Sorts the characters in the string as follows: - All alphabetical characters (both uppercase and lowercase) come first, - Followed by numeric characters, - Followed by punctuation marks. Within each category, characters appear in the order they first appear in the input string. alphabetic_characters = [] numeric_characters = [] punctuation_characters = [] for char in s: if char.isalpha(): alphabetic_characters.append(char) elif char.isdigit(): numeric_characters.append(char) else: punctuation_characters.append(char) return \'\'.join(alphabetic_characters + numeric_characters + punctuation_characters)"},{"question":"Create a function `poker_hand_rank` that takes a list of 5 cards represented as strings and returns a string indicating the rank of the poker hand. Each card string will be in the format \\"RS\\", where: - R is the rank of the card, from \\"2\\" to \\"9\\" for numbered cards, and \\"T\\", \\"J\\", \\"Q\\", \\"K\\", \\"A\\" for ten, jack, queen, king, and ace respectively. - S is the suit of the card, which can be \\"H\\" (hearts), \\"D\\" (diamonds), \\"C\\" (clubs), or \\"S\\" (spades). The function should return one of the following strings: - \\"Royal Flush\\" - \\"Straight Flush\\" - \\"Four of a Kind\\" - \\"Full House\\" - \\"Flush\\" - \\"Straight\\" - \\"Three of a Kind\\" - \\"Two Pair\\" - \\"One Pair\\" - \\"High Card\\" **Examples:** ```python poker_hand_rank([\\"TH\\", \\"JH\\", \\"QH\\", \\"KH\\", \\"AH\\"]) -> \\"Royal Flush\\" poker_hand_rank([\\"4H\\", \\"4C\\", \\"4S\\", \\"4D\\", \\"9H\\"]) -> \\"Four of a Kind\\" poker_hand_rank([\\"2H\\", \\"3D\\", \\"5S\\", \\"9C\\", \\"KD\\"]) -> \\"High Card\\" ``` **Notes:** - \\"Royal Flush\\" is a hand that contains an Ace, King, Queen, Jack and Ten, all in the same suit. - \\"Straight Flush\\" is a hand that contains five cards in sequence, all of the same suit. - \\"Four of a Kind\\" is a hand that contains four cards of the same rank. - \\"Full House\\" is a hand that contains three cards of one rank and two cards of another rank. - \\"Flush\\" is a hand that contains five cards all of the same suit, but not in sequence. - \\"Straight\\" is a hand that contains five cards in sequence, but not all of the same suit. - \\"Three of a Kind\\" is a hand that contains three cards of the same rank. - \\"Two Pair\\" is a hand that contains two cards of one rank and two cards of another rank. - \\"One Pair\\" is a hand that contains two cards of the same rank. - \\"High Card\\" is a hand that does not fall into any of the above categories. The highest rank in the hand is taken as the value.","solution":"from collections import Counter def poker_hand_rank(cards): Returns the rank of the poker hand. value_map = {\'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'T\': 10, \'J\': 11, \'Q\': 12, \'K\': 13, \'A\': 14} values = sorted([value_map[card[0]] for card in cards]) suits = [card[1] for card in cards] value_counts = Counter(values).values() is_flush = len(set(suits)) == 1 is_straight = len(set(values)) == 5 and (max(values) - min(values) == 4) if is_straight and is_flush: if len(set(values)) == 5 and max(values) == 14: # Check for Royal Flush return \\"Royal Flush\\" return \\"Straight Flush\\" if 4 in value_counts: return \\"Four of a Kind\\" if 3 in value_counts and 2 in value_counts: return \\"Full House\\" if is_flush: return \\"Flush\\" if is_straight: return \\"Straight\\" if 3 in value_counts: return \\"Three of a Kind\\" if list(value_counts).count(2) == 2: return \\"Two Pair\\" if 2 in value_counts: return \\"One Pair\\" return \\"High Card\\""},{"question":"Your task is to write a function that takes an array of integers and returns an array of integers where each element is replaced by the product of all other elements in the array except the element itself. Do not use the division operation to solve this problem. # Input The input will be a non-empty list of integers. # Output The output should be a list of integers, where each element is the product of all elements in the input list except the one at the same index. # Examples 1. [1, 2, 3, 4] -> [24, 12, 8, 6] 2. [2, 3, 4, 5] -> [60, 40, 30, 24] 3. [1, 2, 3] -> [6, 3, 2] 4. [5, 6, 7] -> [42, 35, 30] 5. [3, 3, 3, 3] -> [27, 27, 27, 27] Note: The input list has at least one integer and contains up to 1000 integers.","solution":"def product_except_self(nums): Returns a list where each element is the product of all other elements in the list except itself. n = len(nums) left_products = [1] * n right_products = [1] * n result = [1] * n left_running_product = 1 for i in range(n): left_products[i] = left_running_product left_running_product *= nums[i] right_running_product = 1 for i in range(n - 1, -1, -1): right_products[i] = right_running_product right_running_product *= nums[i] for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"A string S is said to be well-formed if it contains equal numbers of the characters \'A\' and \'B\'. For example, the strings \\"AB\\", \\"AABB\\", and \\"BBAA\\" are well-formed, while \\"AA\\", \\"B\\", and \\"AAB\\" are not. Given a string S containing only the characters \'A\' and \'B\', determine whether it is possible to rearrange the characters of S to form a well-formed string. If it is possible, return any such well-formed string; otherwise, return \\"-1\\". -----Input----- The first line of input contains a single integer T, the number of test cases. Each of the next T lines contains a string S. -----Output----- For each test case, output any well-formed string that can be formed by rearranging the characters of S, or \\"-1\\" if it is not possible. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 105 - S contains only \'A\' and \'B\' -----Example----- Input: 3 AAABB AABB ABAB Output: -1 AABB ABAB -----Explanation----- Example case 1. There are 3 \'A\'s and 2 \'B\'s in the string \\"AAABB\\". It\'s impossible to rearrange it to have equal numbers, hence the output is \\"-1\\". Example case 2. The string \\"AABB\\" already has an equal number of \'A\'s and \'B\'s, so it is well-formed. Another possible rearrangement would be \\"BBAA\\". Example case 3. The string \\"ABAB\\" is already well-formed. Another possible rearrangement would be \\"BABA\\".","solution":"def make_well_formed_string(S): Determines if a given string S containing only characters \'A\' and \'B\'. Can be rearranged into a well-formed string. If possible, returns such a well-formed string; otherwise, returns \\"-1\\". countA = S.count(\'A\') countB = S.count(\'B\') if countA == countB: return S # S already well-formed or directly rearrangeable to any other valid permutation else: return \\"-1\\" def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(make_well_formed_string(S)) return results # Example Usage (not part of the solution functionally): # T = 3 # test_cases = [\\"AAABB\\", \\"AABB\\", \\"ABAB\\"] # print(process_test_cases(T, test_cases))"},{"question":"You are given a list of daily temperatures recorded for a certain period. Write a function that, given this list, returns a list such that, for each day in the input, it tells how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. For example, given the list `temperatures = [73, 74, 75, 71, 69, 72, 76, 73]`, your function should return `[1, 1, 4, 2, 1, 1, 0, 0]`. Explanation: - On day 0, the temperature is 73. The next day has temperature 74, which is warmer. So, the answer for day 0 is 1. - On day 1, the temperature is 74. The next day has temperature 75, so the answer for day 1 is also 1. - On day 2, the temperature is 75. Four days later, on day 6, the temperature is 76. So, the answer for day 2 is 4. - On day 3, the temperature is 71. Two days later, on day 5, the temperature is 72. So, the answer for day 3 is 2. - On day 4, the temperature is 69. One day later, the temperature becomes 72. So, the answer for day 4 is 1. - On day 5, the temperature is 72. The following day, the temperature becomes 76. So, the answer for day 5 is 1. - On day 6, the temperature is 76. There are no future days with a warmer temperature, so the answer for day 6 is 0. - On day 7, there are no future days, so the answer for day 7 is 0. Your function should run in O(n) time.","solution":"def daily_temperatures(temperatures): Returns a list such that, for each day in the input, it tells how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. n = len(temperatures) answer = [0] * n stack = [] # This will store pairs of (temperature, index) for i in range(n): while stack and temperatures[i] > stack[-1][0]: temp, index = stack.pop() answer[index] = i - index stack.append((temperatures[i], i)) return answer"},{"question":"A \\"happy number\\" is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. Write a program to determine if a given number is a happy number. -----Input----- - The input consists of a single integer x (1 ≤ x ≤ 10^9). -----Output----- - Output \\"1\\" if the number is a happy number. - Output \\"0\\" otherwise. -----Example Input----- 19 -----Example Output----- 1 -----Example Explanation----- 19 is a happy number: 1^2 + 9^2 = 82 8^2 + 2^2 = 68 6^2 + 8^2 = 100 1^2 + 0^2 + 0^2 = 1 19 ends in 1, thus it is a happy number.","solution":"def is_happy_number(x): def get_next(n): return sum(int(char) ** 2 for char in str(n)) seen = set() while x != 1 and x not in seen: seen.add(x) x = get_next(x) return 1 if x == 1 else 0"},{"question":"# Task You\'re given a string `s` and an integer `k`. Convert the string `s` such that each character in the string is shifted `k` positions forward in the alphabet. If shifting `k` positions forward goes past \'z\', it wraps around starting back at \'a\'. For example, `k=3` would shift \'a\' to \'d\', \'z\' to \'c\', etc. Each character in the string should be treated independently according to this rule. The string contains only lowercase letters and no whitespaces. # Example: For `s = \\"xyz\\"` and `k = 3`, the result should be `\\"abc\\"`. # Input/Output - `[input]` string `s` A string of lowercase English letters. `1 <= |s| <= 1000` - `[input]` integer `k` An integer denoting the shift value. `1 <= k <= 1000` - `[output]` a string The modified string after shifting each character by `k` positions in the alphabet.","solution":"def shift_string(s, k): Shifts each character in the string \'s\' k positions forward in the alphabet. Wraps around if it goes past \'z\'. shifted_chars = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) shifted_chars.append(new_char) return \'\'.join(shifted_chars)"},{"question":"Mohit is the lead developer at AstroTech, a company that develops astronomy software. He is currently working on optimizing the observation scheduling for the company\'s telescope array. The telescopes need to be scheduled such that they can observe a set of celestial events without any timing conflicts. Mohit is given a list of n observation periods, each defined by a start time and an end time. An observation period can start at the same time another ends but cannot overlap any other observation. Mohit needs to determine the maximum number of non-overlapping observations that can be scheduled. -----Input----- The first line contains an integer n (1 le n le 100,000) — the number of observation periods. Each of the following n lines contains two integers s_i and e_i (0 le s_i < e_i le 1,000,000), the start and end times of the i^{th} observation period. -----Output----- Output a single integer, the maximum number of non-overlapping observations that can be scheduled. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 3 4 0 1 2 3 Output 4 -----Note----- Consider the first sample input: - Observation period (1, 3) can be scheduled. - Observation period (4, 6) can also be scheduled as there is no overlap with the first period. - Observation period (2, 5) overlaps with both the other periods and cannot be scheduled. Thus, the maximum number of non-overlapping observations is 2.","solution":"def max_non_overlapping_observations(n, periods): Returns the maximum number of non-overlapping observations. Parameters: n (int): The number of observation periods. periods (List[Tuple[int, int]]): List of observation periods, each defined by a start and end time. Returns: int: The maximum number of non-overlapping observations. # Sort the periods by their end times periods.sort(key=lambda x: x[1]) # Initialize variables max_observations = 0 last_end_time = -1 # We use -1 to ensure the first period is considered # Iterate through each period for start, end in periods: # If the start time of the current period is after or at the end time of the last observed period if start >= last_end_time: # We can schedule this observation max_observations += 1 # Update the end time of the last scheduled period last_end_time = end return max_observations # Example call print(max_non_overlapping_observations(3, [(1,3), (2,5), (4,6)])) # Output: 2 print(max_non_overlapping_observations(4, [(1,2), (3,4), (0,1), (2,3)])) # Output: 4"},{"question":"# Task You are given an array of integers and an integer number \'n\'. Your task is to find all pairs of elements in the array whose sum is equal to \'n\'. Return a list of lists, where each list contains exactly two elements that add up to \'n\'. Each pair should be sorted in ascending order, and the list of pairs should also be sorted in ascending order based on the first element of each pair. # Example For `arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]` and `n = 10`, the output should be `[[1, 9], [2, 8], [3, 7], [4, 6]]`. For `arr = [5, 5, 3, 9]` and `n = 10`, the output should be `[[1, 9], [2, 8], [3, 7], [4, 6]]`. For `arr = []` and `n = 5`, the output should be `[]`. # Input/Output - `[input]` list of integers `arr` - `[input]` integer `n` - `[output]` a list of lists of integers List of pairs whose sum is equal to `n`.","solution":"def find_pairs_with_sum(arr, n): Finds all pairs in the array whose sum is equal to \'n\'. Args: arr: List of integers. n: Integer sum to find pairs for. Returns: List of lists, where each list contains two integers that add up to \'n\'. pairs = [] seen = set() for num in arr: complement = n - num if complement in seen: pairs.append(sorted([num, complement])) seen.add(num) pairs.sort() return pairs"},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. You can choose any character in the string and replace it with any other lowercase English letter. This operation can be performed at most `k` times. Write a function `largestSubstring(s, k)` that finds the length of the longest substring containing the same repeated character after performing at most `k` replacements. For example: ``` largestSubstring(\'ABAB\', 2) -> 4 Explanation: Replace both \'A\'s with \'B\'s to get \'BBBB\'. largestSubstring(\'AABABBA\', 1) -> 4 Explanation: Replace one \'A\' with \'B\' to get \'AABBBBA\'. ```","solution":"def largestSubstring(s, k): from collections import defaultdict max_length = 0 left = 0 max_count = 0 count = defaultdict(int) for right in range(len(s)): count[s[right]] += 1 max_count = max(max_count, count[s[right]]) while (right - left + 1) - max_count > k: count[s[left]] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a row of blocks, where each block can either be empty or filled with an object. Each object has a specific height. Adjacent blocks can be grouped into sets, and a set is defined as a contiguous sequence of blocks. The objects in a set can be rearranged in height as needed. Your task is to determine the maximum possible height of an object in each set after rearrangement. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of blocks. The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^6 or h_i = 0) representing the heights of objects in the blocks. A height of 0 indicates that the block is empty. -----Output----- Output a single line containing n integers. For each block, output the maximum possible height of the tallest object in its set after rearrangement. -----Examples----- Input 5 0 2 3 0 1 Output 0 3 3 0 1 Input 6 4 0 0 5 0 7 Output 4 0 0 5 0 7 Input 4 1 4 2 3 Output 4 4 4 4 -----Note----- In the first example, we have objects with heights 2 and 3 in the second and third blocks, respectively. These form a contiguous set which can be rearranged to maximize the height of objects in these blocks. The maximum height of any object in this set is 3. In the second example, each block with a non-zero height forms its own set. In the third example, all the blocks are non-empty and form a single set. The maximum height in the set is 4.","solution":"def max_height_in_sets(n, heights): if n == 1: return heights # For a single block, the height doesn\'t change. result = [] i = 0 while i < n: if heights[i] == 0: result.append(0) i += 1 else: j = i while j < n and heights[j] != 0: j += 1 max_height = max(heights[i:j]) result.extend([max_height] * (j - i)) i = j return result"},{"question":"You are given a list of integers and you need to find a special integer in the list. An integer is special if it is the only number that appears an odd number of times in the list. All other numbers in the list appear an even number of times. Write a function `find_special_integer(lst)` that takes a list of integers as input and returns the special integer. You can assume that the list will always contain exactly one special integer. For example: - `find_special_integer([1, 2, 3, 2, 3, 1, 1])` should return `1`, because `1` is the only integer that appears an odd number of times. - `find_special_integer([4, 4, 7, 7, 6, 6, 8])` should return `8`, because `8` is the only integer that appears an odd number of times. Use an efficient approach to solve the problem, as a brute force solution might not handle large inputs well.","solution":"def find_special_integer(lst): Returns the special integer that appears an odd number of times in the list. special_integer = 0 for number in lst: special_integer ^= number return special_integer"},{"question":"You\'ve just been hired to design a grading system for a new online course platform! Here\'s how the grading works: * Any score below 50 is a \'Fail\' * A score between 50 and 59 inclusive is a \'Pass\' * A score between 60 and 69 inclusive is a \'Good\' * A score between 70 and 79 inclusive is a \'Very Good\' * A score of 80 or above is an \'Excellent\' **If all scores in the list are \'Excellent\', the final result should be \'Outstanding!\'.** Write a function that accepts an array of numeric scores (integers ranging from 0 to 100) and returns an array of corresponding grades based on the above criteria. An empty array should return an empty array. Examples: ```python grades([45, 55, 65, 75, 85]) # returns [\'Fail\', \'Pass\', \'Good\', \'Very Good\', \'Excellent\'] grades([50, 50, 50]) # returns [\'Pass\', \'Pass\', \'Pass\'] grades([85, 90, 95, 100]) # returns \'Outstanding!\' ``` Write your code in Python below.","solution":"def grades(scores): Returns the corresponding grades for a list of scores. Parameters: scores (list): List of integer scores ranging from 0 to 100. Returns: list or str: List of corresponding grades or \'Outstanding!\' if all grades are \'Excellent\'. if not scores: return [] grade_list = [] for score in scores: if score < 50: grade_list.append(\'Fail\') elif 50 <= score <= 59: grade_list.append(\'Pass\') elif 60 <= score <= 69: grade_list.append(\'Good\') elif 70 <= score <= 79: grade_list.append(\'Very Good\') else: grade_list.append(\'Excellent\') if all(grade == \'Excellent\' for grade in grade_list): return \'Outstanding!\' return grade_list"},{"question":"A pharmaceutical company is testing new pills with unique formulations. Each pill consists of a certain number of ingredients, and each ingredient has a unique effectiveness score assigned to it. The effectiveness of each pill is determined by summing the effectiveness scores of all its ingredients. The company wants to find out the K most effective pills from their batch. If multiple pills have the same effectiveness, they should be sorted lexicographically by their ingredient lists. You need to write a program that takes the list of pills, their ingredients, and their respective effectiveness scores, and returns the K most effective pills sorted by their effectiveness, and in case of a tie, sorted lexicographically by their ingredient lists. -----Input----- The input contains several test cases. The first line of the input contains an integer T denoting the number of test cases. Each test case starts with a line containing two integers P and K. - P is the number of pills. - K is the number of top pills to return. The next P lines contain the description of each pill. Each pill description consists of an integer N and a space-separated list of N integers. The first integer, N, is the number of ingredients in the pill, followed by N integers representing the effectiveness scores of the ingredients. -----Output----- For each test case, output the K most effective pills, each on a new line. Each pill\'s ingredients should be printed in the same order as they appear in the input. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ P ≤ 1000 - 1 ≤ K ≤ P - 1 ≤ N ≤ 100 - -1000 ≤ effectiveness score of each ingredient ≤ 1000 -----Example----- Input: 1 5 2 3 10 20 30 2 100 200 4 1 2 3 4 3 5 5 5 2 50 50 Output: 2 100 200 3 10 20 30 Explanation: In the example, the first test case has 5 pills, and we need to find the top 2 most effective pills. The pills and their total effectiveness scores are: - (3 10 20 30) => 60 - (2 100 200) => 300 - (4 1 2 3 4) => 10 - (3 5 5 5) => 15 - (2 50 50) => 100 The highest effectiveness is 300 from the pill (2 100 200), and the second highest is 100 from the pill (2 50 50). Hence, the result is: 2 100 200 3 10 20 30 Note the pills with a sum of 60 and 100 were considered in lexicographical order since they could be potentially tied with another pill with the same effectiveness score.","solution":"def get_top_k_effective_pills(test_cases): results = [] for test_case in test_cases: P, K, pills = test_case pill_effectiveness = [] for pill in pills: effectiveness_score = sum(pill) pill_effectiveness.append((effectiveness_score, pill)) # Sort by effectiveness_score (descending) and by pill list (lexicographical) pill_effectiveness.sort(key=lambda x: (-x[0], x[1])) # Append the K most effective pills to the results top_k_pills = [pill for _, pill in pill_effectiveness[:K]] results.append(top_k_pills) return results"},{"question":"Create a function that accepts a list of integers and an integer target sum. The function should return a tuple of two numbers from the list that add up to the target sum. If no such pair exists, return an empty tuple. Ensure the function handles cases where there are multiple pairs by returning the first valid pair encountered. The input list may contain both positive and negative integers. **Example:** ```python # Given the list and target nums = [3, 5, -4, 8, 11, 1, -1, 6] target = 10 # The function should return: result = (11, -1) ```","solution":"def find_pair_with_sum(nums, target): Given a list of integers and a target sum, returns a tuple of the first two numbers from the list that add up to the target sum. If no such pair exists, returns an empty tuple. :param nums: List of integers :param target: Integer target sum :return: Tuple of two integers or empty tuple seen = {} for num in nums: complement = target - num if complement in seen: return (complement, num) seen[num] = True return ()"},{"question":"Implement a function that reverses the order of words in a given string. The input string consists of words separated by spaces. You need to return a string in which the words appear in reverse order compared to the input. The function should handle multiple spaces between words properly and should not include leading or trailing spaces in the output. The words should be separated by a single space in the reversed string. Examples: Example 1: Input: \\"the sky is blue\\" Output: \\"blue is sky the\\" Example 2: Input: \\" hello world \\" Output: \\"world hello\\" Explanation: Your reversed string should not contain leading or trailing spaces. Example 3: Input: \\"a good example\\" Output: \\"example good a\\" Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string. Example 4: Input: \\"Alice does not even like Bob\\" Output: \\"Bob like even not does Alice\\" Example 5: Input: \\" \\" Output: \\"\\" Explanation: The input consists of only spaces, thus the output is an empty string.","solution":"def reverse_words(s): Reverses the order of words in the input string. Parameters: s (str): The input string. Returns: str: A string where the words are in reverse order compared to the input. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"You have been given an array of non-negative integers representing the heights of buildings in a city skyline. The width of each building is 1 unit. The goal is to compute how much rainwater would be trapped between these buildings after a heavy rain. Consider each position in the array as an index in a coordinate system where the height of the buildings is represented by vertical bars. Rainwater will be trapped in the valleys between these bars. Write a function that computes the amount of rainwater trapped. # Function Signature ```python def trap_rainwater(heights: List[int]) -> int: ``` # Input - `heights` (List[int]): A list of non-negative integers representing the heights of the buildings. # Output - Returns an integer representing the total amount of rainwater trapped. # Example ```python heights1 = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] print(trap_rainwater(heights1)) # Output: 6 heights2 = [4, 2, 0, 3, 2, 5] print(trap_rainwater(heights2)) # Output: 9 ``` # Notes - Consider the following example for visualization: - Given the heights `[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]`, the total trapped rainwater would be `6`. - Given the heights `[4, 2, 0, 3, 2, 5]`, the total trapped rainwater would be `9`. - It\'s recommended to use an approach with O(n) time complexity and O(n) space complexity.","solution":"from typing import List def trap_rainwater(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0]*n right_max = [0]*n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Given a list of numbers, create a function to return a new list where each element is the product of all the other elements in the original list except the current element. For example, `product_except_self([2, 3, 4, 5]) = [60, 40, 30, 24]` because: ``` 60 = 3 * 4 * 5 40 = 2 * 4 * 5 30 = 2 * 3 * 5 24 = 2 * 3 * 4 ``` The input will be a list of integers. You can assume that the list has at least two elements, and all elements will be non-zero. Good luck! If you like this problem, consider trying: [Array Product](https://www.codewars.com/kata/5a905c2157c562994900009d) [Product of All Others](https://www.codewars.com/kata/550498447451fbbd7600041c)","solution":"def product_except_self(nums): Returns a new list where each element is the product of all other elements in the original list except the current element. length = len(nums) # Initialize the result array with 1s result = [1] * length # Calculate products of all elements to the left of each index left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate products of all elements to the right of each index right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Given an integer array, return the index of the first occurrence of the smallest unique number. If there are no unique numbers, return -1. ```python find_smallest_unique_index([4, 5, 1, 2, 2, 4, 5]) == 2 # 1 is the smallest unique number at index 2 find_smallest_unique_index([6, 7, 3, 6, 8, 3, 9]) == 4 # 7 is the smallest unique number at index 1 find_smallest_unique_index([1, 1, 1, 1, 1]) == -1 # no unique numbers ``` Assume the given arrays always have at least one element. The function should be optimized to handle large arrays efficiently.","solution":"def find_smallest_unique_index(arr): Returns the index of the first occurrence of the smallest unique number in the array. If there are no unique numbers, returns -1. from collections import Counter # Count the frequency of each element in the array frequency = Counter(arr) # Filter elements to get only unique ones (frequency == 1) unique_elements = {key for key, count in frequency.items() if count == 1} if not unique_elements: return -1 # Find the smallest unique element smallest_unique = min(unique_elements) # Return the index of the first occurrence of the smallest unique element return arr.index(smallest_unique)"},{"question":"___ String Segment Frequency is the process of determining how many times a specified segment (sub-string) occurs within a larger text string. When given the string `hellohellohello` and the segment `hello`, the following process occurs: ``` The segment \'hello\' appears three times: [hello][hello][hello] ``` This results in the count `3`. ___ # YOUR TASK Write a function that will take in a string and a segment (sub-string) and return the number of times the segment occurs within the string. # EXAMPLE ```python segment_count(\\"hellohellohello\\", \\"hello\\") == 3 ``` NOTE: The input string and segment will never be empty, and both will always consist of lower-case letters ONLY. ___","solution":"def segment_count(string, segment): Returns the number of times the segment occurs within the string. :param string: The main string in which to search for the segment :param segment: The segment (sub-string) to count within the main string :return: The count of occurrences of the segment in the string count = 0 start = 0 while start <= len(string) - len(segment): start = string.find(segment, start) if start == -1: break count += 1 start += len(segment) return count"},{"question":"You are given a tree structure with `n` nodes, each node containing a single integer value. The tree is rooted at node `1`. Your task is to implement a function that calculates the maximum path sum for any path in the tree. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections (i.e., a path can involve just one node, or multiple nodes in any direction in the parent-child hierarchy). For example, consider the following tree with node values in parentheses: ``` 1 (1) / / 2 (2) 3 (-3) / / / / 4 (4) 5 (-2) 6 (6) ``` Possible paths in this tree include: - `1` (sum = 1) - `1 -> 2` (sum = 3) - `2 -> 4` (sum = 6) - `3 -> 6` (sum = 3) - `1 -> 2 -> 4` (sum = 7) - and so on. In the above example, the maximum path sum is `1 -> 2 -> 4` with a sum of `7`. ----Input Format:---- The first line contains an integer, `T`, which indicates the number of test cases. Each test case consists of the following: - The first line contains an integer, `n`, the number of nodes in the tree. - The second line contains `n` integers describing the values of the nodes from `1` to `n`. - The next `n-1` lines each contain two integers `u` and `v` denoting that there is an edge between node `u` and node `v`. ----Output Format:---- For each test case, output a single integer: the maximum path sum in the tree. ----Constraints:---- - `1 ≤ T ≤ 10` - `2 ≤ n ≤ 10^5` - `-10^4 ≤ node value ≤ 10^4` ----Sample Input---- 1 6 1 2 -3 4 -2 6 1 2 1 3 2 4 2 5 3 6 ----Sample Output---- 7 ----Explanation:---- In the provided example, one optimal path with the maximum sum is `1 -> 2 -> 4`, giving a sum of `7`. ----Notes:---- Consider edge cases such as: - Trees with all negative values. - Trees with mixed positive and negative values. - Trees with only two nodes.","solution":"class TreeNode: def __init__(self, value): self.value = value self.children = [] def build_tree(n, values, edges): nodes = [TreeNode(values[i]) for i in range(n)] for u, v in edges: nodes[u - 1].children.append(nodes[v - 1]) nodes[v - 1].children.append(nodes[u - 1]) return nodes[0] def max_path_sum(tree): def dfs(node): if not node: return 0, float(\'-inf\') max_root_to_node = node.value max_path = node.value for child in node.children: child.children.remove(node) # To ensure we do not revisit the parent child_max_root_to_node, child_max_path = dfs(child) max_root_to_node = max(max_root_to_node, node.value + child_max_root_to_node) max_path = max(max_path, max_root_to_node, child_max_path, node.value + child_max_root_to_node) return max_root_to_node, max_path _, max_path = dfs(tree) return max_path def find_max_path_sum_in_trees(T, test_cases): results = [] for case in test_cases: n, values, edges = case tree = build_tree(n, values, edges) max_sum = max_path_sum(tree) results.append(max_sum) return results # Example Usage T = 1 test_cases = [(6, [1, 2, -3, 4, -2, 6], [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6)])] print(find_max_path_sum_in_trees(T, test_cases)) # Output should be [7]"},{"question":"You are given a string containing lowercase letters and you need to determine the character that appears most frequently in the string. If there are ties, return the character that appears first in the string. Your task is to return a single character which is the most frequently occurring one. input // \\"aabbbcc\\" output // \'b\' ```most_frequent_character(\\"hello\\") // \'l\'``` ```most_frequent_character(\\"abzzzz\\") // \'z\'``` ```most_frequent_character(\\"mississippi\\") // \'i\'``` ```most_frequent_character(\\"abcabcabc\\") // \'a\'``` ```most_frequent_character(\\"aabbccddeeffgg\\") // \'a\'```","solution":"def most_frequent_character(s): Returns the character that appears most frequently in the string. If there are ties, returns the character that appears first in the string. if not s: return \'\' frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 max_count = 0 most_frequent_char = s[0] for char in s: if frequency[char] > max_count: max_count = frequency[char] most_frequent_char = char elif frequency[char] == max_count: # Since we are iterating through the string in order # the first character with max frequency encountered will be taken. most_frequent_char = most_frequent_char or char return most_frequent_char"},{"question":"Write a function called `common_elements` that takes in two lists of integers as inputs and returns a new list containing the common elements between the two input lists, without any duplicates. The elements in the resultant list should be in the order they appeared in the first input list. Examples: `common_elements([1, 2, 3, 4], [3, 4, 5, 6]) => [3, 4]` `common_elements([10, 20, 20, 30, 40], [20, 40]) => [20, 40]` `common_elements([7, 8, 9], [10, 11, 12]) => []` Good luck!","solution":"def common_elements(list1, list2): Returns a new list containing the common elements between list1 and list2, without duplicates. The elements in the result list are in the order they appeared in list1. set2 = set(list2) # Convert list2 to set for O(1) average time complexity lookups result = [] seen = set() # To track added elements to avoid duplicates for element in list1: if element in set2 and element not in seen: result.append(element) seen.add(element) return result"},{"question":"Kara is working on a unique encryption algorithm. She is given a string `S` consisting of lowercase English letters and an integer `D`. Her task is to create a new encrypted string `E` such that: - Each character in `S` is replaced based on the distinct characters found within `S`. - Each distinct character in `S` is assigned a unique integer in the range `[0, D-1]`. - The new encrypted string `E` consists of these assigned integer values represented as a string. Unfortunately, Kara is stuck and needs your help to solve this problem! Your task is to create a function that generates the encrypted string `E` based on the given input. -----Input----- - The first line of input contains a single integer `T` denoting the number of test cases. - Each of the next `T` lines contains a string `S` and an integer `D`, separated by a space. -----Output----- - Output a single encrypted string `E` for each test case on a new line. -----Constraints----- - `1 <= T <= 1000` - `1 <= len(S) <= 100` (length of string `S`) - `1 <= D <= 26` - All characters in `S` are lowercase English letters. -----Subtasks----- - Subtask 1 [30 points]: `D = 26` - Subtask 2 [70 points]: No additional constraints -----Sample Input----- 2 abc 3 hello 5 -----Sample Output----- 012 0123234 -----Explanation----- In the first test case, the string \\"abc\\" has distinct characters \'a\', \'b\', \'c\'. These characters are assigned the integers 0, 1, and 2 respectively. Therefore, the encrypted string \\"012\\" is derived from \\"abc\\". In the second test case, the string \\"hello\\" has distinct characters \'h\', \'e\', \'l\', \'o\'. These characters are assigned the integers 0, 1, 2, and 3 respectively. The character \'l\' appears twice and is replaced by \'2\' both times, resulting in the encrypted string \\"0123234\\".","solution":"def encrypt_string(S, D): distinct_characters = {} counter = 0 encrypted_string = \\"\\" for char in S: if char not in distinct_characters: if counter < D: distinct_characters[char] = str(counter) counter += 1 else: return \\"Error: More distinct characters than D\\" encrypted_string += distinct_characters[char] return encrypted_string def process_test_cases(test_cases): results = [] for S, D in test_cases: results.append(encrypt_string(S, int(D))) return results"},{"question":"You are given an array of integers and a target integer. Your task is to find if there are two distinct elements in the array whose sum equals the target integer. -----Input----- - The first line of the input contains two space-separated integers, N and T, denoting the number of elements in the array and the target integer, respectively. - The next line contains N space-separated integers, A_{1}, A_{2}, ldots, A_{N}, denoting the elements of the array. -----Output----- Output a single line containing \\"YES\\" if there exist two distinct elements in the array whose sum equals the target integer. Otherwise, output \\"NO\\". -----Constraints----- - 2 leq N leq 10^5 - -10^{9} leq A_{i} leq 10^{9} - -10^{9} leq T leq 10^{9} -----Example Input----- 5 9 2 7 11 15 1 -----Example Output----- YES -----Explanation----- In the given array, 2 + 7 = 9, so the answer is YES.","solution":"def two_sum_exists(arr, target): Determines if there are two distinct elements in the array whose sum equals the target integer. :param arr: List of integers :param target: Target integer to find the sum :return: \\"YES\\" if the sum exists, otherwise \\"NO\\" seen = set() for num in arr: if target - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Many companies use unique login IDs for their employees, beginning with their initials followed by some digits. In order to prevent unauthorized access, each login ID must adhere to certain predefined rules. You need to write a program to validate given login IDs based on the following criteria: - The ID must start with exactly two uppercase alphabetic characters. - Following the two letters, there must be precisely four digits. - The login ID should be of exactly 6 characters long. The program should determine if each provided ID is valid or invalid based on these rules. -----Input Format----- - The first line of the input contains an integer T, the number of test cases. - Each of the next T lines contains one login ID to be validated. -----Output Format----- - For each test case, print \\"VALID\\" if the login ID meets the criteria, otherwise print \\"INVALID.\\" -----Constraints----- - 1 <= T <= 1000 - Length of each login ID is 6 characters -----Sample Input----- 4 AB1234 XY0987 A12345 ABCD56 -----Sample Output----- VALID VALID INVALID INVALID Write a function that performs the validation for these IDs.","solution":"def validate_login_ids(test_cases): Given a list of login IDs, validate each one according to specified rules. Parameters: test_cases (list of str): List of login IDs to be validated. Returns: list of str: List of results (\\"VALID\\" or \\"INVALID\\") for each login ID. results = [] for login_id in test_cases: if len(login_id) == 6 and login_id[:2].isupper() and login_id[:2].isalpha() and login_id[2:].isdigit(): results.append(\\"VALID\\") else: results.append(\\"INVALID\\") return results"},{"question":"Lara loves puzzles that involve arrays. She recently came across a unique one involving a sequence of steps and conditional operations on an array of integers, and she needs your help to solve it. Your task is to simulate the operations on the array and compute the result for given queries. You are given an array `arr` consisting of `n` integers. Initially, all elements in the array are set to `0`. You need to process `q` operations on this array. Each operation can be one of the following types: 1. Add to a range: Given three integers `l`, `r`, and `x`, add the value `x` to every element in the subarray from index `l` to index `r` (inclusive). 2. Compute maximum: Given two integers `l` and `r`, find the maximum value in the subarray from index `l` to index `r` (inclusive). -----Input----- The first line contains integers `n` and `q` (`1 leq n, q leq 100000`) — the length of the array and the number of operations, respectively. Each of the next `q` lines describes an operation: - If the operation is of type \\"Add to a range\\", it contains `1`, followed by three integers `l`, `r`, and `x` (`1 leq l leq r leq n`, `-1000 leq x leq 1000`). - If the operation is of type \\"Compute maximum\\", it contains `2`, followed by two integers `l` and `r` (`1 leq l leq r leq n`). -----Output----- For each \\"Compute maximum\\" operation, output the maximum value found in the specified subarray. -----Examples----- Input 5 5 1 1 3 5 2 1 3 1 2 5 -2 2 1 5 1 3 3 4 Output 5 3 -----Explanation----- Initially, the array is `[0, 0, 0, 0, 0]`. - After `1 1 3 5`, the array becomes `[5, 5, 5, 0, 0]`. - The first query `2 1 3` asks for the maximum value in the subarray `[5, 5, 5]`, which is `5`. - After `1 2 5 -2`, the array becomes `[5, 3, 3, -2, -2]`. - The second query `2 1 5` asks for the maximum value in the subarray `[5, 3, 3, -2, -2]`, which is `5`. - Finally, after `1 3 3 4`, the array becomes `[5, 3, 7, -2, -2]`. The array operations are straightforward, provided you maintain subarray boundaries and additions correctly.","solution":"def puzzle_operations(n, operations): arr = [0] * n results = [] for operation in operations: if operation[0] == 1: l, r, x = operation[1] - 1, operation[2] - 1, operation[3] for i in range(l, r + 1): arr[i] += x elif operation[0] == 2: l, r = operation[1] - 1, operation[2] - 1 results.append(max(arr[l:r + 1])) return results"},{"question":"Write a function `find_missing_number` that takes a list of distinct integers from 1 to n with one number missing, and returns the missing number. The list will contain at least 2 numbers and the numbers will always be in the range [1, n] with exactly one number missing. Example: Given the list [3, 7, 1, 2, 8, 4, 5], the missing number is 6, so find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. Here\'s how the example would look in test form: ```python test.assert_equals(find_missing_number([3, 7, 1, 2, 8, 4, 5]), 6) test.assert_equals(find_missing_number([1, 2, 3, 5, 6]), 4) ```","solution":"def find_missing_number(numbers): Given a list of distinct integers from 1 to n with one number missing, returns the missing number. n = len(numbers) + 1 # since one number is missing, the actual length should be n total_sum = n * (n + 1) // 2 # sum of first n natural numbers actual_sum = sum(numbers) # sum of given list return total_sum - actual_sum"},{"question":"Write a function that takes a string of lowercase alphabets as input and returns a dictionary where each key is a character from the string, and each value is the number of times that character appears in the string. The dictionary should be sorted in decreasing order of frequency of characters.","solution":"from collections import Counter def char_frequency(string): Takes a string of lowercase alphabets and returns a dictionary where each key is a character from the string and each value is the number of times that character appears, sorted in decreasing order of frequency. frequency = Counter(string) sorted_frequency = dict(sorted(frequency.items(), key=lambda item: item[1], reverse=True)) return sorted_frequency"},{"question":"Fibonacci Code Challenge Objective Create a function that takes a **non-negative integer** `n` as input and returns the **n-th element** of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n >= 2 E.g. ```python fibonacci(7) => 13 # because the sequence is 0, 1, 1, 2, 3, 5, 8, 13 ``` Note: - If `n` is 0, the function should return 0. - You can assume the input is always a non-negative integer.","solution":"def fibonacci(n): Returns the n-th element of the Fibonacci sequence. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Given a list of strings, each string representing an alphanumeric sequence, determine if the sequence has at least one uppercase letter, one lowercase letter, and one digit. Print \\"Strong\\" if it meets the criteria, and \\"Weak\\" otherwise. Stop processing input after finding one \\"Strong\\" string. -----Input----- Each string contains lower case alphabets, upper case alphabets, and digits 0-9. -----Output----- Print \\"Weak\\" (without quotes) if the sequence does not meet the criteria, else print \\"Strong\\" (without quotes) and stop processing input after it. -----Constraints----- 1 <= length of string <= 100 -----Example----- Input: abcD123 xyz4321 pqRstUv 123abc Output: Strong","solution":"def check_strength(sequences): for sequence in sequences: has_upper = any(char.isupper() for char in sequence) has_lower = any(char.islower() for char in sequence) has_digit = any(char.isdigit() for char in sequence) if has_upper and has_lower and has_digit: return \\"Strong\\" return \\"Weak\\""},{"question":"Given a string containing only letters, count the number of consonants and vowels in the string. Return an array where the first element is the number of consonants and the second element is the number of vowels. ``` EXAMPLES: countConsonantsAndVowels(\\"hello\\") = [3, 2] countConsonantsAndVowels(\\"world\\") = [4, 1] countConsonantsAndVowels(\\"aeiou\\") = [0, 5] countConsonantsAndVowels(\\"bcdfg\\") = [5, 0] ``` Assume all letters are lower-case. Consonants are all letters that are not vowels. The vowels are \'a\', \'e\', \'i\', \'o\', and \'u\'.","solution":"def countConsonantsAndVowels(s): Counts the number of consonants and vowels in a given string s. Parameters: s (str): A string containing only letters. Returns: list: A list where the first element is the number of consonants and the second element is the number of vowels. vowels = \'aeiou\' vowel_count = 0 consonant_count = 0 for char in s: if char in vowels: vowel_count += 1 else: consonant_count += 1 return [consonant_count, vowel_count]"},{"question":"You are given a list of strings and a prefix string. Your task is to write a function that returns all strings in the list that start with the given prefix. If there are multiple matches, the function returns the strings in lexicographical order. If no strings in the list match the prefix, the function should return an alerting message \\"No matches found\\". If the given list is empty, the function should return an alerting message \\"Empty list provided\\". # Example: ```python words = [\\"apple\\", \\"application\\", \\"apricot\\", \\"banana\\", \\"apply\\"] prefix = \\"app\\" find_words_with_prefix(words, prefix) == [\\"apple\\", \\"application\\", \\"apply\\"] ``` ```python words = [\\"car\\", \\"card\\", \\"cart\\", \\"cat\\", \\"dog\\"] prefix = \\"ca\\" find_words_with_prefix(words, prefix) == [\\"car\\", \\"card\\", \\"cart\\", \\"cat\\"] ``` If no strings match the prefix, the function will output an alerting message. ```python words = [\\"car\\", \\"bike\\", \\"train\\"] prefix = \\"bo\\" find_words_with_prefix(words, prefix) == \\"No matches found\\" ``` If an empty list is provided, the function will output an alerting message. ```python words = [] prefix = \\"pre\\" find_words_with_prefix(words, prefix) == \\"Empty list provided\\" ``` Constraints: - The function should handle lists of various sizes efficiently. - The prefix will be a non-empty string containing only lower-case alphabets. - Each string in the list will also be a non-empty string containing only lower-case alphabets. - The function should handle edge cases such as no matches and empty input list gracefully.","solution":"def find_words_with_prefix(words, prefix): Returns all strings in the list `words` that start with the given `prefix`. The result is sorted in lexicographical order. If no strings match the prefix, returns \\"No matches found\\". If the provided list is empty, returns \\"Empty list provided\\". if not words: return \\"Empty list provided\\" matching_words = [word for word in words if word.startswith(prefix)] if not matching_words: return \\"No matches found\\" return sorted(matching_words)"},{"question":"Mike is passionate about securing his online communications, so he implemented a simple encryption technique known as the \\"shift cipher\\" or \\"Caesar cipher\\". In this cipher, each letter in the plaintext is shifted a certain number of places down the alphabet. For example, with a shift of 1, \'A\' would be replaced by \'B\', \'B\' would become \'C\', and so on. The alphabet wraps around, so with a shift of 1, \'Z\' would be replaced by \'A\'. Mike needs your help to automate this encryption process. -----Input:----- - Two lines of input: 1. An integer k (0 leq k leq 25) representing the shift value. 2. A string S representing the plaintext message. The string consists of uppercase English letters only, and its length will not exceed 10^5 characters. -----Output:----- - Print the encrypted message using the Caesar cipher with a shift of k. -----Constraints:----- - 0 leq k leq 25 - 1 leq Length of string S leq 10^5 - The string contains only uppercase English letters. -----Sample Input 1:----- 3 HELLO -----Sample Output 1:----- KHOOR -----Sample Input 2:----- 1 ZEBRA -----Sample Output 2:----- AFCSB","solution":"def caesar_cipher(k, s): Encrypts the given string using the Caesar cipher with a shift of k. Parameters: k (int): The shift value (0 <= k <= 25). s (str): The plaintext message consisting of uppercase English letters only. Returns: str: The encrypted message. encrypted_message = [] for char in s: # Calculate the new position for the character new_pos = (ord(char) - ord(\'A\') + k) % 26 + ord(\'A\') encrypted_message.append(chr(new_pos)) return \'\'.join(encrypted_message)"},{"question":"Given an array of integers arr, and a target integer T, return the length of the longest subarray where the absolute difference between any two elements in the subarray is less than or equal to T. If there is no such subarray, return 0. A subarray is defined as a contiguous segment of the array. Example 1: Input: arr = [1, 3, 6, 9, 12], T = 3 Output: 2 Explanation: The longest subarray is [1, 3] or [9, 12] with length 2 where the absolute difference between any two elements is ≤ 3. Example 2: Input: arr = [4, 8, 5, 1, 7], T = 4 Output: 3 Explanation: The longest subarray is [4, 8, 5] with length 3 as each pair of elements satisfies the condition |4-8| ≤ 4, |8-5| ≤ 4, and |4-5| ≤ 4. Example 3: Input: arr = [10, 100, 200, 300], T = 50 Output: 1 Explanation: No subarray longer than one element has an absolute difference ≤ 50. Constraints: - 1 <= arr.length <= 10^5 - 1 <= arr[i] <= 10^9 - 1 <= T <= 10^9","solution":"def longest_subarray_with_difference(arr, T): Returns the length of the longest subarray where the absolute difference between any two elements in the subarray is less than or equal to T. from collections import deque if not arr: return 0 left = 0 max_length = 0 min_deque = deque() max_deque = deque() for right in range(len(arr)): while min_deque and arr[min_deque[-1]] > arr[right]: min_deque.pop() while max_deque and arr[max_deque[-1]] < arr[right]: max_deque.pop() min_deque.append(right) max_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > T: left += 1 if min_deque[0] < left: min_deque.popleft() if max_deque[0] < left: max_deque.popleft() max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a remote village, there is a unique tradition of creating special necklaces to celebrate important festivals. Each necklace is made from beads of different colors represented by uppercase letters (\'A\'-\'Z\'). The villagers have a custom of ensuring that a necklace looks beautiful if it contains at least one recurring color bead, although it\'s not mandatory that the recurring beads must be consecutive. To determine the beauty of a necklace, they follow a simple rule: the necklace is considered beautiful if there is at least one bead color that appears more than once. Given a string representing the necklace where each character is a bead color, write a function to determine if the necklace is beautiful or not. You need to return \\"YES\\" if the necklace is beautiful and \\"NO\\" otherwise. ----Input---- Each input consists of a single string N representing the beads in the necklace. ----Output---- Output \\"YES\\" if the necklace is beautiful, otherwise output \\"NO\\". ----Constraints---- - 1 ≤ |N| ≤ 1,000 - N will only contain uppercase Latin letters (\'A\'-\'Z\'). ----Example---- Input1: ABCA Input2: XYZ Output1: YES Output2: NO ----Explanation---- In the first example, since the bead \'A\' appears more than once, the output is \\"YES\\". In the second example, no bead color is repeated, so the output is \\"NO\\".","solution":"def is_beautiful_necklace(N): Determines if the necklace is beautiful based on the criteria that there must be at least one bead color that appears more than once. Parameters: N (str): A string representing the beads in the necklace. Returns: str: \\"YES\\" if the necklace is beautiful, otherwise \\"NO\\". bead_count = {} for bead in N: if bead in bead_count: return \\"YES\\" bead_count[bead] = 1 return \\"NO\\""},{"question":"# Description: Given a positive integer `n`, write a function to determine the number of distinct prime factors in `n!` (n factorial). The result should be an integer representing the count of unique prime numbers that are factors of the factorial of `n`. For example: ``` n = 5 distinctPrimeFactors(5) === 3 // 5! = 120, which has prime factors 2, 3, and 5 ``` # Constraints: - `1 <= n <= 10^6` # Note: - You can assume the input is always a valid positive integer. - The function should be optimized for large values of `n` to handle performance constraints. - In the performance test (with a range of `n` up to `10^6` and multiple test cases), the time complexity should be efficient enough to process each test case within reasonable time limits. # Some Examples: ``` distinctPrimeFactors(1) === 0 // 1! = 1, which has no prime factors distinctPrimeFactors(2) === 1 // 2! = 2, which has prime factor 2 distinctPrimeFactors(3) === 2 // 3! = 6, which has prime factors 2, 3 distinctPrimeFactors(10) === 4 // 10! = 3628800, which has prime factors 2, 3, 5, 7 distinctPrimeFactors(20) === 8 // 20! includes the prime factors 2, 3, 5, 7, 11, 13, 17, 19 distinctPrimeFactors(100) === 25 // 100! has 25 prime factors ```","solution":"def distinctPrimeFactors(n): Returns the number of distinct prime factors in n! def sieve(n): is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] if n < 2: return 0 primes = sieve(n) return len(primes)"},{"question":"John loves to collect coins, and he wants to organize his collection by grouping coins with the same value. Given an array of integers where each integer represents the value of a coin, help John determine the number of groups and the size of each group in his collection. -----Input:----- - The first line contains an integer N, the number of coins. - The second line contains N space-separated integers representing the coin values. -----Output:----- For each coin value present in the collection, output the value of the coin followed by the size of the group of that coin value, sorted by the coin value in ascending order. -----Constraints----- - 1 leq N leq 100 - 1 leq text{Value of coin} leq 100 -----Sample Input:----- 8 5 3 4 5 3 5 3 4 -----Sample Output:----- 3 3 4 2 5 3","solution":"def group_coins_by_value(N, coin_values): Determines the number of groups and the size of each group in a coin collection. Parameters: N (int): The number of coins. coin_values (list): A list of integers representing the coin values. Returns: list of tuples: A list of tuples where each tuple contains a coin value and the size of the group of that coin value. from collections import Counter value_counts = Counter(coin_values) sorted_values = sorted(value_counts.items()) return sorted_values"},{"question":"Write a program to help a gardener manage his apple orchard. The orchard is represented as a 2D grid of size n times m. Each cell in the grid either contains an apple tree (represented by the number 1) or is empty (represented by the number 0). The gardener wants to know the size of the largest contiguous region of apple trees in his orchard. A contiguous region of apple trees is defined as a group of apple tree cells that are connected horizontally or vertically (not diagonally). ----- Input: ----- - The first line contains two integers n and m, the dimensions of the orchard grid. - The following n lines each contain m integers (either 0 or 1), representing the orchard grid. ----- Output: ----- Print the size of the largest contiguous region of apple trees. ----- Constraints: ----- - 1 leq n, m leq 100 - The orchard grid contains only 0s and 1s. ----- Sample Input: ----- 4 5 1 0 1 1 0 0 1 1 0 0 0 0 1 0 1 1 1 0 0 1 ----- Sample Output: ----- 5 ----- Explanation: ----- The largest contiguous region of apple trees has a size of 5 (connected cells marked with 1).","solution":"def largest_contiguous_region(n, m, orchard): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or orchard[x][y] == 0: return 0 orchard[x][y] = 0 # Mark the cell as visited size = 1 for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]: size += dfs(x + dx, y + dy) return size max_size = 0 for i in range(n): for j in range(m): if orchard[i][j] == 1: max_size = max(max_size, dfs(i, j)) return max_size # Example usage: orchard = [ [1, 0, 1, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 0, 1], [1, 1, 0, 0, 1] ] print(largest_contiguous_region(4, 5, orchard)) # Output: 5"},{"question":"Implement a data structure called `MovingAverage` that calculates the moving average of the last `n` values added to the data structure. The class should provide the following methods: 1. `__init__(self, n: int)`: Initializes the data structure with the size `n`. 2. `add_value(self, value: float) -> None`: Adds a new value to the data structure. 3. `get_average(self) -> float`: Returns the moving average of the last `n` values. If fewer than `n` values have been added, the moving average should be calculated using the values available. **Example:** ```python ma = MovingAverage(3) ma.add_value(1) ma.add_value(10) print(ma.get_average()) # Output: 5.5 (average of [1, 10]) ma.add_value(3) print(ma.get_average()) # Output: 4.666... (average of [1, 10, 3]) ma.add_value(5) print(ma.get_average()) # Output: 6.0 (average of [10, 3, 5]) ``` Write the `MovingAverage` class that implements the above functionality.","solution":"from collections import deque class MovingAverage: def __init__(self, n: int): self.n = n self.values = deque() self.sum = 0 def add_value(self, value: float) -> None: if len(self.values) == self.n: self.sum -= self.values.popleft() self.values.append(value) self.sum += value def get_average(self) -> float: if not self.values: return 0 return self.sum / len(self.values)"},{"question":"Your task is to implement an algorithm that finds the \\"peak element\\" in an array of integers. A peak element is an element that is greater than its neighbors. Given an array of integers, return the index of any one of its peak elements. You can assume that the array: 1. Contains at least one element. 2. Has elements that are all distinct. 3. Treats the array boundaries as special cases where beyond the first element (-∞) or last element (-∞), there are no elements. Your solution should aim to be better than O(n) runtime complexity. Examples: 1. Input: `[1, 2, 3, 1]` -> Output: `2` (Explanation: 3 is a peak element and its index is 2). 2. Input: `[1, 2, 1, 3, 5, 6, 4]` -> Output: `1` or `5` (Explanation: 2 and 6 are peak elements, and their indices are 1 and 5 respectively).","solution":"def find_peak_element(nums): Finds the index of a peak element in the array. A peak element is an element that is greater than its neighbors. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left"},{"question":"You are given a string s containing only lowercase English letters. Your task is to count the number of unique characters in the string such that each character appears at least k times in s. Return an **integer** representing the number of such unique characters. **Example 1:** ``` Input: s = \\"aabbcc\\", k = 2 Output: 3 Explanation: There are 3 characters (\'a\', \'b\', \'c\') in the string that appear at least 2 times. ``` **Example 2:** ``` Input: s = \\"aaaaabbbbccccd\\", k = 3 Output: 3 Explanation: There are 3 characters (\'a\', \'b\', \'c\') in the string that appear at least 3 times. ``` **Example 3:** ``` Input: s = \\"aaabbcc\\", k = 4 Output: 0 Explanation: There are no characters in the string that appear at least 4 times. ``` **Constraints:** - 1 <= s.length <= 10^5 - 1 <= k <= 10^5","solution":"def count_unique_chars(s, k): Returns the number of unique characters in the string s such that each character appears at least k times in s. :param s: A string containing only lowercase English letters :param k: An integer representing the minimum number of occurrences :return: An integer representing the number of unique characters meeting the criterion from collections import Counter # Count the frequency of each character in the string counter = Counter(s) # Count the number of characters that appear at least k times count = sum(1 for char in counter if counter[char] >= k) return count"},{"question":"Write a function that accepts a string as input and returns a dictionary where the keys are the characters in the string and the values are the number of times each character appears. Each key in the output dictionary should be a unique character from the input string, and its corresponding value should represent the number of occurrences of that character in the string. # Example Input: \\"abracadabra\\" Output: {\'a\': 5, \'b\': 2, \'r\': 2, \'c\': 1, \'d\': 1} Input: \\"hello\\" Output: {\'h\': 1, \'e\': 1, \'l\': 2, \'o\': 1} **Note:** 1. The input string is case-sensitive, meaning \'A\' and \'a\' would be considered different characters. 2. Ensure that the function handles an empty string as input and returns an empty dictionary in that case. 3. Make sure to optimize your solution for efficiency, especially for longer strings.","solution":"def character_count(s): Returns a dictionary where the keys are characters in the string \'s\' and the values are the count of each character. count_dict = {} for char in s: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict"},{"question":"Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \\"\\". The window must contain all the characters of t even if the count in s is greater. Example 1: Input: s = \\"ADOBECODEBANC\\", t = \\"ABC\\" Output: \\"BANC\\" Explanation: The minimum window substring containing all characters of \\"ABC\\" is \\"BANC\\". Example 2: Input: s = \\"a\\", t = \\"a\\" Output: \\"a\\" Explanation: The entire string s is the minimum window. Example 3: Input: s = \\"a\\", t = \\"aa\\" Output: \\"\\" Explanation: Both \'a\'s from t must be included in the window. Since there is only one \'a\' in s, return an empty string. Example 4: Input: s = \\"abc\\", t = \\"b\\" Output: \\"b\\" Explanation: The minimum window substring containing all characters of \\"b\\" is \\"b\\". Constraints: - m and n will be at most 10^5. - s and t consist of English letters.","solution":"from collections import Counter, defaultdict def min_window(s, t): Returns the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \\"\\". if not s or not t: return \\"\\" t_freq = Counter(t) required = len(t_freq) left = right = 0 formed = 0 window_counts = defaultdict(int) min_len = float(\\"inf\\") min_window_start = 0 while right < len(s): window_counts[s[right]] += 1 if s[right] in t_freq and window_counts[s[right]] == t_freq[s[right]]: formed += 1 while left <= right and formed == required: if right - left + 1 < min_len: min_len = right - left + 1 min_window_start = left window_counts[s[left]] -= 1 if s[left] in t_freq and window_counts[s[left]] < t_freq[s[left]]: formed -= 1 left += 1 right += 1 if min_len == float(\\"inf\\"): return \\"\\" else: return s[min_window_start:min_window_start + min_len]"},{"question":"You have a large dataset containing information about different products. Each product record is represented as a string in the following format: \\"ProductID:Category:Price:Stock:Rating\\", where: - ProductID is an alpha-numeric identifier (e.g., \\"A123\\"). - Category is a string representing the product category (e.g., \\"Electronics\\"). - Price is a float number representing the price of the product. - Stock is an integer representing the stock quantity available. - Rating is a float number indicating the customer rating (on a scale of 1 to 5). Your task is to write a program that filters the products based on a given category and returns the ProductID of the product with the highest rating within that category. If no products are available in the given category, return \\"No products found\\". -----Input----- The first line of the input contains a string representing the desired category. The second and the remaining lines of the input represent the product records in the described format. Each product record is given on a new line. It is guaranteed that the dataset contains at least one product record. It is guaranteed that the length of each product record does not exceed 256 characters. -----Output----- Print the ProductID of the product with the highest rating within the given category. If there are multiple products with the same highest rating, print the ProductID that appears first in the input. If no products are available in the given category, print \\"No products found\\". -----Examples----- Input Electronics A123:Electronics:499.99:10:4.5 B456:Home:79.99:5:4.0 C789:Electronics:299.99:20:4.7 D012:Electronics:199.99:30:4.7 E345:Furniture:249.99:15:3.8 Output C789 Input Furniture A123:Electronics:499.99:10:4.5 B456:Home:79.99:5:4.0 C789:Electronics:299.99:20:4.7 D012:Electronics:199.99:30:4.7 E345:Furniture:249.99:15:3.8 Output E345 Input Toys A123:Electronics:499.99:10:4.5 B456:Home:79.99:5:4.0 C789:Electronics:299.99:20:4.7 D012:Electronics:199.99:30:4.7 E345:Furniture:249.99:15:3.8 Output No products found","solution":"def find_best_rated_product_in_category(category, product_records): Returns the ProductID of the product with the highest rating within the specified category. If no products are available in the given category, return \'No products found\'. :param category: str :param product_records: List[str] :return: str best_product_id = \\"No products found\\" highest_rating = -1 for record in product_records: product_id, record_category, price, stock, rating = record.split(\':\') # Convert price, stock, and rating to their respective data types price = float(price) stock = int(stock) rating = float(rating) if record_category == category: if rating > highest_rating: highest_rating = rating best_product_id = product_id return best_product_id"},{"question":"Implement a function that takes a list of integer pairs as input, where each pair represents the number of passengers boarding and alighting at each bus stop in sequence. Your task is to calculate the total number of passengers remaining on the bus after the last stop. Assume the bus is initially empty and that the number of passengers at any stop is valid. # Function Signature ```python def remaining_passengers(bus_stops: List[Tuple[int, int]]) -> int: pass ``` # Input - A list of tuples, where each tuple contains two integers. The first integer is the number of passengers boarding the bus, and the second integer is the number of passengers alighting. # Output - An integer representing the number of passengers remaining on the bus after the last stop. # Example ```python bus_stops = [(10, 0), (3, 5), (5, 8)] remaining_passengers(bus_stops) # Output: 5 bus_stops = [(3, 0), (9, 1), (4, 10), (12, 2), (6, 1), (7, 10)] remaining_passengers(bus_stops) # Output: 17 bus_stops = [(3, 5), (9, 4), (4, 6)] remaining_passengers(bus_stops) # Output: 1 ``` # Constraints - The list represents stops in sequential order. - The input list will have at least one stop. - The net number of passengers on the bus will always be non-negative. - Each pair of integers will be non-negative, representing a realistic scenario.","solution":"def remaining_passengers(bus_stops): total_passengers = 0 for onboard, alight in bus_stops: total_passengers += onboard total_passengers -= alight return total_passengers"},{"question":"Task: Write a function to determine if a given string is an isogram. An isogram (also known as a \\"nonpattern word\\") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. Examples: - `isogram` → true - `hello` → false - `isograms are fun!` → false","solution":"def is_isogram(string): Determines if the given string is an isogram. An isogram is a word or phrase without a repeating letter, though spaces and hyphens are allowed to appear multiple times. Parameters: string (str): The string to check. Returns: bool: True if the string is an isogram, False otherwise. cleaned_string = string.replace(\\" \\", \\"\\").replace(\\"-\\", \\"\\").lower() return len(cleaned_string) == len(set(cleaned_string))"},{"question":"A futuristic city has a network of teleporter stations connected by one-way teleportation links. Each station can teleport to exactly one other station. Your task is to write a program that determines the teleportation cycle a given station belongs to. A teleportation cycle is defined as a sequence of teleporter stations such that starting from any station in the cycle, you return to the same station after following the teleportation links a certain number of times. Each station is guaranteed to be part of exactly one cycle. -----Input----- - The first line of the input contains a single integer T, the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the number of teleporter stations. - The second line contains N space-separated integers, where the i-th integer is the index (1-based) of the station to which the i-th station teleports. -----Output----- For each test case, print a single line containing N space-separated integers. The i-th integer should be the length of the teleportation cycle that the i-th station belongs to. -----Constraints----- - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 100,000 - The teleportation links form one or more independent cycles covering all stations -----Example Input----- 2 5 2 3 1 5 4 6 2 3 4 5 6 1 -----Example Output----- 3 3 3 2 2 6 6 6 6 6 6","solution":"def find_cycle_lengths(n, teleports): visited = [False] * n cycle_lengths = [0] * n for i in range(n): if visited[i]: continue # Find the cycle starting from station i slow = i fast = i while True: slow = teleports[slow] - 1 fast = teleports[teleports[fast] - 1] - 1 if slow == fast: break # Determine the length of the cycle cycle_length = 1 start = slow position = teleports[start] - 1 while position != start: cycle_length += 1 position = teleports[position] - 1 # Assign cycle length to all stations in the cycle position = slow while not visited[position]: visited[position] = True cycle_lengths[position] = cycle_length position = teleports[position] - 1 return cycle_lengths def solve_teleporter_cycles(T, test_cases): results = [] for n, teleports in test_cases: results.append(find_cycle_lengths(n, teleports)) return results"},{"question":"# History Adventurer Zoey has discovered a secret alphanumeric sequence in an ancient tomb. This sequence seems to generate characters based on some kind of encoding rules. She needs to decode it to unlock the tomb door. # Task Decode a given input string `s` which is encoded using the following rules: Rules 1. `s` is a non-empty string consisting of uppercase English letters and numbers. 2. Each letter in the string can be followed by a number which indicates how many times the letter should be repeated. 3. If a letter is not followed by a number, it should appear exactly once. 4. Decoding should be case-insensitive but the resulting decoded string should maintain the original case of each letter in the input. Example Decode the following encoded string: ``` decode_string(\\"A2b3C\\") -> \\"AAbbbC\\" decode_string(\\"X3y2Z\\") -> \\"XXXyyZ\\" ``` Explanation 1. For \\"A2b3C\\": - \'A\' is followed by \'2\', so \'A\' appears twice: \\"AA\\" - \'b\' is followed by \'3\', so \'b\' appears three times: \\"bbb\\" - \'C\' is not followed by a number, so \'C\' appears once: \\"C\\" - Combine all parts: \\"AAbbbC\\" 2. For \\"X3y2Z\\": - \'X\' is followed by \'3\', so \'X\' appears three times: \\"XXX\\" - \'y\' is followed by \'2\', so \'y\' appears twice: \\"yy\\" - \'Z\' is not followed by a number, so \'Z\' appears once: \\"Z\\" - Combine all parts: \\"XXXyyZ\\" Note - You may assume that the input string `s` is always valid according to the above rules. - You can use built-in string manipulation functions for your solution. Implementation ```python def decode_string(s): decoded_string = \\"\\" i = 0 while i < len(s): if s[i].isalpha(): if i + 1 < len(s) and s[i + 1].isdigit(): repeat_count = int(s[i + 1]) decoded_string += s[i] * repeat_count i += 2 else: decoded_string += s[i] i += 1 return decoded_string # Examples # print(decode_string(\\"A2b3C\\")) # Output: \\"AAbbbC\\" # print(decode_string(\\"X3y2Z\\")) # Output: \\"XXXyyZ\\" ```","solution":"def decode_string(s): Decodes the string based on the given rules. decoded_string = \\"\\" i = 0 while i < len(s): if s[i].isalpha(): if i + 1 < len(s) and s[i + 1].isdigit(): repeat_count = int(s[i + 1]) decoded_string += s[i] * repeat_count i += 2 else: decoded_string += s[i] i += 1 return decoded_string"},{"question":"You are given an array of integers where every element appears twice except for one. Find that single one. You must implement a function that takes in such an array and returns the non-duplicated element. For example: single_number([2, 2, 1]) => 1 *1* is the number that appears only once in the array. Another example: single_number([4, 1, 2, 1, 2]) => 4 *4* is the number that appears only once in the array.","solution":"def single_number(nums): Finds the single number in the array where every other element appears twice. Args: nums (list): A list of integers Returns: int: The single number result = 0 for num in nums: result ^= num return result"},{"question":"#Description You are tasked with creating a phone number generator. The requirements are as follows: ```“Generate all possible phone numbers that can be formed using the digits from a given integer. Phone numbers consist of 7 digits, and each digit in the phone number must come from the digits in the given integer.”``` Where the integer is greater than 0 and has at least 7 digits. The digits in the phone number may be repeated if they appear multiple times in the input integer. #Task Assuming the given integer is always valid (contains at least 7 digits), create a function that generates all 7-digit phone numbers possible from the digits of the given integer. ```Return a list of strings in the format \'XXX-XXXX\' representing each possible phone number.``` If the integer has less than 7 digits, return an empty list. For example: ```python Input: 1234567890 Output: [\'123-4567\', \'123-4568\', \'123-4569\', ..., \'890-1234\', \'890-1235\'] ``` Each phone number in the output list should be a unique combination of the digits from the input integer. Digits should be reused the number of times they appear in the input. Here are some different cases to consider: - If the input integer is `1234567`, the output should list all permutations of \'123-4567\' that can be formed. - If the input integer has more than 7 digits, all possible 7-digit combinations should be listed. - If the input integer has fewer than 7 unique digits but repeats some digits to make up 7, the combinations can use the repeated digits. Happy coding!","solution":"from itertools import permutations def generate_phone_numbers(number): Generate all possible phone numbers using the digits from the given integer. Phone numbers consist of 7 digits in the format \'XXX-XXXX\'. digits = str(number) if len(digits) < 7: return [] result = set() for perm in permutations(digits, 7): phone_number = \'\'.join(perm[:3]) + \'-\' + \'\'.join(perm[3:]) result.add(phone_number) return sorted(list(result))"},{"question":"Design a data structure that supports the following operations: 1. `void addWord(String word)`: Adds a word to the data structure. 2. `boolean searchWord(String word)`: Returns true if the word is in the data structure. A word could contain the dot character `\'.\'` to represent any one letter. Examples: Input: WordDictionary dict = new WordDictionary(); dict.addWord(\\"bad\\"); dict.addWord(\\"dad\\"); dict.addWord(\\"mad\\"); dict.searchWord(\\"pad\\"); // returns false dict.searchWord(\\"bad\\"); // returns true dict.searchWord(\\".ad\\"); // returns true dict.searchWord(\\"b..\\"); // returns true Note: - The number of calls to `addWord` and `searchWord` is in the range [1, 10000]. - Each word is composed only of lowercase English letters. - The length of each word is in the range [1, 500].","solution":"class WordDictionary: def __init__(self): self.words = [] def addWord(self, word): self.words.append(word) def searchWord(self, word): from re import fullmatch for w in self.words: if fullmatch(word, w): return True return False"},{"question":"There is an airline company called \\"SkyHigh Airways\\" that manages ticket bookings for a variety of flights. Each flight has a specific seating capacity, and the airline wants to ensure that no seat is overbooked. The company has a system where each booking is recorded with a unique ticket number and the flight number. The system should handle two types of operations: 1. Book a seat on a flight. 2. Cancel a booking given the ticket number. -----Input format:----- The first line contains an integer `T` denoting the number of test cases. For each test case, the first line contains an integer `F` representing the number of flights and `N` representing the number of operations. The next line contains `F` integers, where the ith integer represents the seating capacity of the ith flight. The next `N` lines contain either of the two types of operations: - Type 1: `1` `flightNumber` `ticketNumber` (Book a seat on the given flight) - Type 2: `2` `ticketNumber` (Cancel the booking with the given ticket number) -----Output format:----- For each test case, for each Type 1 operation, output `Booking Confirmed` or `Booking Failed` if the flight is fully booked. Type 2 operations should yield no output. -----Constraints:----- - `1 ≤ T ≤ 100` - `1 ≤ F, N ≤ 10000` - `1 ≤ seating capacity ≤ 300` - `1 ≤ flightNumber ≤ F` - `1 ≤ ticketNumber ≤ 10^6` -----Example:----- -----Input:----- 2 3 6 100 200 150 1 1 101 1 2 102 1 2 103 2 102 1 2 104 1 3 105 2 3 2 4 200 300 1 1 202 1 1 203 2 202 1 1 204 -----Output:----- Booking Confirmed Booking Confirmed Booking Confirmed Booking Confirmed Booking Confirmed Booking Confirmed Booking Confirmed Note: Each test case should handle bookings and cancellations independently. After each Type 1 operation, print `Booking Confirmed` or `Booking Failed`. Ignore any Type 2 operations in the output.","solution":"def manage_bookings(test_cases): results = [] for test in test_cases: F, N, capacities, operations = test # Initialize the flight bookings and a ticket to flight map bookings = {i: [] for i in range(1, F+1)} ticket_flight_map = {} for operation in operations: if operation[0] == 1: # Book a seat flightNumber, ticketNumber = operation[1], operation[2] if len(bookings[flightNumber]) < capacities[flightNumber - 1]: bookings[flightNumber].append(ticketNumber) ticket_flight_map[ticketNumber] = flightNumber results.append(\\"Booking Confirmed\\") else: results.append(\\"Booking Failed\\") elif operation[0] == 2: # Cancel a booking ticketNumber = operation[1] if ticketNumber in ticket_flight_map: flightNumber = ticket_flight_map[ticketNumber] bookings[flightNumber].remove(ticketNumber) del ticket_flight_map[ticketNumber] return results def process_input(input_data): lines = input_data.splitlines() T = int(lines[0].strip()) index = 1 test_cases = [] for _ in range(T): F, N = map(int, lines[index].strip().split()) index += 1 capacities = list(map(int, lines[index].strip().split())) index += 1 operations = [] for _ in range(N): operation = list(map(int, lines[index].strip().split())) operations.append(operation) index += 1 test_cases.append((F, N, capacities, operations)) return test_cases def main(input_data): test_cases = process_input(input_data) results = manage_bookings(test_cases) return \'n\'.join(results)"},{"question":"Given an array of unique integers, return all possible subsets (the power set) of the array. The solution should not include duplicate subsets. You can return the subsets in any order. Example 1: Input: nums = [1,2,3] Output: [[], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]] Example 2: Input: nums = [0] Output: [[], [0]] Example 3: Input: nums = [1,2] Output: [[], [1], [2], [1,2]] Constraints: 1 <= nums.length <= 20 -10 <= nums[i] <= 10 All the numbers of nums are unique.","solution":"from typing import List def subsets(nums: List[int]) -> List[List[int]]: Returns all possible subsets of the input list `nums`. result = [[]] for num in nums: result += [curr + [num] for curr in result] return result"},{"question":"You are given an undirected graph with N nodes and M edges. The goal is to determine if the graph contains a cycle, and if so, find the length of the shortest cycle in the graph. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M. - M lines follow, each containing two space-separated integers u and v (1 le u, v le N) denoting an edge between nodes u and v. -----Output----- For each test case, output a single integer which is the length of the shortest cycle in the graph if it exists, or -1 if the graph does not contain any cycles. -----Constraints----- - 1 le T le 100 - 1 le N le 1,000 - 0 le M le 5,000 - No multiple edges or self-loops in the input. -----Example Input----- 2 4 4 1 2 2 3 3 4 4 1 3 2 1 2 2 3 -----Example Output----- 4 -1","solution":"from collections import deque, defaultdict def find_shortest_cycle(N, M, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): dist = [-1] * (N + 1) queue = deque([(start, -1)]) dist[start] = 0 while queue: current, parent = queue.popleft() for neighbor in graph[current]: if dist[neighbor] == -1: dist[neighbor] = dist[current] + 1 queue.append((neighbor, current)) elif neighbor != parent: # Cycle found return dist[current] + dist[neighbor] + 1 return float(\'inf\') shortest_cycle = float(\'inf\') for node in range(1, N + 1): shortest_cycle = min(shortest_cycle, bfs(node)) return shortest_cycle if shortest_cycle != float(\'inf\') else -1 def process_test_cases(test_cases): results = [] for N, M, edges in test_cases: result = find_shortest_cycle(N, M, edges) results.append(result) return results"},{"question":"# Task You have two strings, `s1` and `s2`, both of the same length containing only lowercase alphabetic characters. You need to find out the minimum number of positions at which you need to change the characters in `s1` such that it becomes a subsequence of `s2`. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. # Example For `s1 = \\"abc\\"` and `s2 = \\"abgfc\\"`, the result should be `0`. Explanation: \\"abc\\" is already a subsequence of \\"abgfc\\", so no changes are needed. For `s1 = \\"axc\\"` and `s2 = \\"abgfc\\"`, the result should be `1`. Explanation: Change character \'x\' in `s1` to \'b\' to make \\"abc\\", which is a subsequence of \\"abgfc\\". # Input/Output - `[input]` string `s1` a string of lowercase alphabetic characters. - `[input]` string `s2` a string of lowercase alphabetic characters of the same length as `s1`. - `[output]` an integer minimum number of characters that need to be changed in `s1` to become a subsequence of `s2`.","solution":"def min_changes_subsequence(s1, s2): Returns the minimum number of positions at which characters in s1 need to be changed to make it a subsequence of s2. m, n = len(s1), len(s2) # Early exit if s1 is already a subsequence of s2 def is_subsequence(x, y): it = iter(y) return all(c in it for c in x) if is_subsequence(s1, s2): return 0 # Prepare a matrix for dp where dp[i][j] means minimum changes to make s1[:i] a subsequence of s2[:j] dp = [[float(\'inf\')] * (n + 1) for _ in range(m + 1)] dp[0][0] = 0 # Empty string is always subsequence with 0 changes for i in range(m + 1): for j in range(n + 1): if i > 0: dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1) if i > 0 and j > 0: if s1[i - 1] == s2[j - 1]: dp[i][j] = min(dp[i][j], dp[i - 1][j - 1]) else: dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + 1) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j - 1]) return dp[m][n]"},{"question":"You have been assigned a task to manage a digital library and need to develop a system that organizes books by their genre and keeps track of each book\'s borrowing status. System Requirements 1. Each book has a title, author, genre, and a status indicating whether it is borrowed. 2. The library should be able to add new books, remove books, and list all books. 3. Users should be able to borrow and return books. 4. When listing books, they should be grouped by genre. 5. The system should provide a summary of the total number of books and how many are currently borrowed. Functional Requirements Write a class `Library` that includes methods to: - `add_book(title, author, genre)`: Adds a new book to the library. - `remove_book(title)`: Removes a book by title. - `borrow_book(title)`: Sets the book\'s status to borrowed. - `return_book(title)`: Sets the book\'s status to available. - `list_books()`: Returns a dictionary where each key is a genre and the value is a list of books (titles) in that genre. - `summary()`: Returns a tuple with the total number of books and the total number of borrowed books. Example ```python library = Library() library.add_book(\\"The Hobbit\\", \\"J.R.R. Tolkien\\", \\"Fantasy\\") library.add_book(\\"1984\\", \\"George Orwell\\", \\"Dystopian\\") library.add_book(\\"Harry Potter\\", \\"J.K. Rowling\\", \\"Fantasy\\") library.borrow_book(\\"The Hobbit\\") print(library.list_books()) # Output: { # \'Fantasy\': [\'The Hobbit\', \'Harry Potter\'], # \'Dystopian\': [\'1984\'] # } print(library.summary()) # Output: (3, 1) library.return_book(\\"The Hobbit\\") print(library.summary()) # Output: (3, 0) ``` Constraints - Assume that book titles are unique. - Only valid titles will be used when borrowing or returning books.","solution":"class Library: def __init__(self): self.books = {} def add_book(self, title, author, genre): if title not in self.books: self.books[title] = { \\"author\\": author, \\"genre\\": genre, \\"borrowed\\": False } def remove_book(self, title): if title in self.books: del self.books[title] def borrow_book(self, title): if title in self.books and not self.books[title][\\"borrowed\\"]: self.books[title][\\"borrowed\\"] = True def return_book(self, title): if title in self.books and self.books[title][\\"borrowed\\"]: self.books[title][\\"borrowed\\"] = False def list_books(self): genres = {} for title, details in self.books.items(): genre = details[\\"genre\\"] if genre not in genres: genres[genre] = [] genres[genre].append(title) return genres def summary(self): total_books = len(self.books) borrowed_books = sum(1 for book in self.books.values() if book[\\"borrowed\\"]) return total_books, borrowed_books"},{"question":"You are given a list of strings representing network packets received by a server in the order they were received. Each packet has a unique identifier and a timestamp. Your task is to determine if there are any duplicate packets based on the identifiers and if there are, output the earliest timestamp of a duplicate packet. -----Input:----- - First line contains the number of strings, N. - Each of the next N lines contains two space-separated values: - A unique identifier (string), and - A timestamp (integer), which represents the time the packet was received. -----Output:----- Print the earliest timestamp of a duplicate packet. If no duplicates are found, print -1. -----Sample Input:----- 5 abc 3 def 5 ghi 7 abc 4 xyz 9 -----Sample Output:----- 3 -----Constraints----- - 1 leq N leq 100000 - The unique identifier will be a string of alphanumeric characters without spaces. - The timestamp will be an integer between 1 and 10^9.","solution":"def find_earliest_duplicate_packet_timestamp(n, packets): Finds the earliest timestamp of a duplicate packet based on identifiers. Parameters: n (int): Number of packets packets (list of tuples): Each tuple contains (identifier (str), timestamp (int)) Returns: int: The earliest timestamp of a duplicate packet, or -1 if no duplicates are found. seen_packets = {} earliest_timestamp = -1 for identifier, timestamp in packets: if identifier in seen_packets: if earliest_timestamp == -1 or seen_packets[identifier] < earliest_timestamp: earliest_timestamp = seen_packets[identifier] else: seen_packets[identifier] = timestamp return earliest_timestamp # Example usage: # packets = [(\\"abc\\", 3), (\\"def\\", 5), (\\"ghi\\", 7), (\\"abc\\", 4), (\\"xyz\\", 9)] # print(find_earliest_duplicate_packet_timestamp(5, packets)) # Output: 3"},{"question":"In a grid-based city, there is a park represented as a 2D matrix of size N times M. Each cell in the matrix either contains a tree (denoted by 1) or is empty (denoted by 0). The city council has decided to build a new playground in the park. The requirements for building the playground are as follows: - The playground must be a square sub-matrix of size K times K. - The playground area must not contain any tree. Given the matrix representation of the park, write a program to find the maximum possible size of the playground (value of K). If there is no such square sub-matrix, return 0. -----Input----- - The first line contains two space-separated integers N (number of rows) and M (number of columns). - Each of the next N lines contains M space-separated integers representing the park matrix. -----Output----- Print a single integer, the maximum size K of the playground. -----Constraints----- - 1 le N, M le 200 - Each matrix element is either 0 or 1. -----Example Input----- 5 5 1 0 1 0 0 1 0 0 0 0 1 1 0 1 0 0 1 0 0 0 1 0 0 1 1 -----Example Output----- 2","solution":"def max_playground_size(matrix, N, M): Returns the maximum size K of the playground that can be built in the given park matrix of size N x M. # Create a DP table to store the size of the largest square sub-matrix # ending at each cell. dp = [[0] * M for _ in range(N)] max_size = 0 for i in range(N): for j in range(M): if i == 0 or j == 0: dp[i][j] = 1 - matrix[i][j] elif matrix[i][j] == 0: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"Task: Design a function `zigzag_array(arr, k)` that reorganizes an array of integers in a zigzag fashion. In a zigzag pattern, the elements should be in a sequence where the first element is less than the second, the second is greater than the third, and so on, alternating between less than and greater than relations. Additionally, if the array length (`n`) is at least `k`, only the first `k` elements should be considered, otherwise, the function should organize all elements. # Parameters: - arr (List[int]): The input array of integers. - k (int): The number of elements from the beginning to be considered for zigzagging. If `k` is greater than the length of the array, zigzag the entire array. # Returns: - List[int]: The zigzag arranged array. # Constraints: - If `k <= 1` or `arr` is empty, return `arr` as is. - Zigzagging should consider standard less than and greater than relations. - The length of the array will be in the range [0, 1000]. - Each element in the array will be in the range [-10000, 10000]. # Examples: - zigzag_array([1, 4, 3, 2, 5], 5) should return `[1, 4, 2, 5, 3]` - zigzag_array([7, 1, 5, 4], 3) should return `[1, 7, 4]` - zigzag_array([9, 8, 7, 6, 5], 4) should return `[8, 9, 6, 7]` - zigzag_array([1, 2, 3], 5) should return `[1, 3, 2]` - zigzag_array([3, 1], 1) should return `[3, 1]` In the zigzagged array, starting from the first element, each subsequent pair of elements should alternate between being increasing and decreasing.","solution":"def zigzag_array(arr, k): Reorganizes an array of integers in a zigzag fashion. Parameters: arr (List[int]): Input array of integers k (int): Number of elements from the beginning to consider for zigzagging Returns: List[int]: Zigzag arranged array if len(arr) <= 1 or k <= 1: return arr n = min(len(arr), k) result = arr[:n] for i in range(n-1): if (i % 2 == 0 and result[i] > result[i+1]) or (i % 2 == 1 and result[i] < result[i+1]): result[i], result[i+1] = result[i+1], result[i] return result + arr[n:]"},{"question":"You need to write a function `findMissingRanges` that takes two parameters: a list of integers `nums` and an integer `upper`. The function should identify missing ranges in the list from `0` to `upper` inclusive and return them in a specific format. A missing range is a span of consecutive numbers that do not exist in the list but fall within the given bounds. **Rules:** - If a single number is missing, represent it as `\\"a\\"`. - If a range of numbers is missing, represent it as `\\"a->b\\"` where `a` and `b` are the starting and ending numbers of the range. For example: ```python findMissingRanges([0, 1, 3, 50, 75], 99) ``` The above function call should return: ```python [\\"2\\", \\"4->49\\", \\"51->74\\", \\"76->99\\"] ``` Another example: ```python findMissingRanges([], 5) ``` The above function call should return: ```python [\\"0->5\\"] ``` **Notes:** - `nums` will contain distinct, sorted, non-negative integers. - `upper` will be a non-negative integer.","solution":"def findMissingRanges(nums, upper): Returns the list of missing ranges in the list `nums` from 0 to `upper`. def formatRange(low, high): if low == high: return str(low) else: return f\\"{low}->{high}\\" result = [] prev = -1 nums.append(upper + 1) # Add an artificial boundary to handle upper range for num in nums: if num == prev + 2: result.append(formatRange(prev + 1, prev + 1)) elif num > prev + 2: result.append(formatRange(prev + 1, num - 1)) prev = num return result"},{"question":"A company is organizing a virtual hackathon with N participants. Each participant can form a team with any other participant to work on a project together. The company has also provided a list of constraints indicating which pairs of participants cannot work together due to conflicts. Given the number of participants and the conflict pairs, determine the maximum number of teams that can be formed such that no two team members are in the conflict list. -----Constraints----- - 1 leq N leq 1000 - 0 leq C leq 10,000 - 1 leq A_i, B_i leq N (1 leq i leq C) - The pairs (A_i, B_i) are unique and undirected, meaning if (A, B) is in the list, then (B, A) is also in the list. -----Input----- Input is given from Standard Input in the following format: N C A_1 B_1 A_2 B_2 : A_C B_C -----Output----- Print the maximum number of teams that can be formed. -----Sample Input----- 4 2 1 2 3 4 -----Sample Output----- 2 In this example, there are two conflict pairs: (1, 2) and (3, 4). Therefore, the pairs that can be formed are (1, 3), (1, 4), (2, 3), and (2, 4). The maximum number of non-conflicting teams that can be formed is 2: - Pair (1, 3) - Pair (2, 4) or - Pair (1, 4) - Pair (2, 3)","solution":"def max_teams(N, conflicts): from itertools import combinations # Initialize conflict set for quick lookup conflict_set = set(conflicts) # Generate all possible teams possible_teams = list(combinations(range(1, N+1), 2)) # Filter out conflicting teams non_conflicting_teams = [team for team in possible_teams if (team[0], team[1]) not in conflict_set and (team[1], team[0]) not in conflict_set] return len(non_conflicting_teams)"},{"question":"# Instructions Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent using the mapping on a traditional phone keypad. Return the combinations as an array of strings. The mapping is as follows: 2 -> \\"abc\\", 3 -> \\"def\\", 4 -> \\"ghi\\", 5 -> \\"jkl\\", 6 -> \\"mno\\", 7 -> \\"pqrs\\", 8 -> \\"tuv\\", 9 -> \\"wxyz\\" ```python letter_combinations(\\"23\\") should return [\'ad\', \'ae\', \'af\', \'bd\', \'be\', \'bf\', \'cd\', \'ce\', \'cf\'] letter_combinations(\\"2\\") should return [\'a\', \'b\', \'c\'] letter_combinations(\\"\\") should return [] letter_combinations(\\"79\\") should return [\'pw\', \'px\', \'py\', \'pz\', \'qw\', \'qx\', \'qy\', \'qz\', \'rw\', \'rx\', \'ry\', \'rz\', \'sw\', \'sx\', \'sy\', \'sz\'] ``` # Constraints: - The input string will only contain digits from 2 to 9. - The length of the input string will be in the range [0, 4].","solution":"def letter_combinations(digits): Returns all possible letter combinations that the number could represent. if not digits: return [] phone = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = phone[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"Write a function that takes a string as input and returns a dictionary. The keys of the dictionary should be all distinct words present in the string, and the values should be the count of occurrences of each word. Treat words as sequences of alphanumeric characters separated by non-alphanumeric characters. Ignore the case when counting occurrences (e.g., \\"Hello\\" and \\"hello\\" are the same word). If the input is not a string, return an empty dictionary.","solution":"import re from collections import defaultdict def word_count(s): Returns a dictionary with words as keys and their counts as values. Words are sequences of alphanumeric characters separated by non-alphanumeric characters. Case is ignored when counting occurrences. :param s: input string :return: dictionary of word counts # Check if the input is a string if not isinstance(s, str): return {} # Convert the string to lowercase s = s.lower() # Use regular expression to find all words words = re.findall(r\'bw+b\', s) # Use defaultdict to count occurrences of each word count_dict = defaultdict(int) for word in words: count_dict[word] += 1 return dict(count_dict)"},{"question":"You are to write a function that takes in a string and returns a new string where each character is repeated twice in a row. Additionally, the function should be able to handle whitespace and special characters. Examples: ```python double_characters(\\"abc\\") # returns \\"aabbcc\\" double_characters(\\"123!\\") # returns \\"112233!!\\" double_characters(\\"hello world!\\") # returns \\"hheelllloo wwoorrlldd!!\\" double_characters(\\"A B C\\") # returns \\"AA BB CC\\" double_characters(\\"\\") # returns \\"\\" double_characters(\\"#\\") # returns \\"\\" ```","solution":"def double_characters(s): Returns a new string where each character in the input string \'s\' is repeated twice. return \'\'.join([char * 2 for char in s])"},{"question":"Write a function named `merge_sorted_arrays` that takes two sorted lists of integers `list1` and `list2` as input and returns a new list that contains all the integers from both lists in a sorted order. **Input:** - `list1`: List of integers, sorted in non-decreasing order. - `list2`: List of integers, sorted in non-decreasing order. **Output:** - A new list containing all integers from `list1` and `list2`, sorted in non-decreasing order. **Example:** ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) ``` Output: ```python [1, 2, 3, 4, 5, 6] ```","solution":"def merge_sorted_arrays(list1, list2): Merges two sorted lists into a single sorted list. Arguments: list1 -- a list of integers sorted in non-decreasing order list2 -- a list of integers sorted in non-decreasing order Returns: A new list containing all integers from list1 and list2, sorted in non-decreasing order. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # append remaining elements while i < len(list1): merged_list.append(list1[i]) i += 1 while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"Task Write a function that accepts an integer argument and returns a boolean value indicating whether or not the integer is a prime number. Input A single integer greater than or equal to `2`. Example ```python is_prime(11) # --> True is_prime(4) # --> False ```","solution":"def is_prime(n): Checks whether the given integer n is a prime number. Parameters: n (int): the integer to check, should be >= 2 Returns: bool: True if n is a prime number, False otherwise if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True"},{"question":"Chef is going to participate in a programming contest with N problems. Each problem requires a specific skill to solve it, which is represented by an integer. Chef has a skill level denoted by an integer X. Chef can solve a problem if his skill level is greater than or equal to the skill level required for that problem. Chef can practice before the contest to increase his skill level. Each practice session increases his skill level by 1. You are given an array A where A[i] represents the skill level required to solve the i-th problem. Your task is to find the minimum number of practice sessions Chef needs to make sure he can solve all the problems in the contest. -----Input----- - The first line of the input contains an integer N denoting the number of problems. - The second line contains N space-separated integers A_1, A_2, dots, A_N denoting the skill levels required to solve each problem. - The third line contains an integer X denoting Chef\'s initial skill level. -----Output----- Print a single integer — the minimum number of practice sessions Chef needs to make sure he can solve all the problems. -----Constraints----- - 1 le N le 10^5 - 1 le A_i le 10^6 for each valid i - 1 le X le 10^6 -----Example Input----- 5 3 5 7 6 2 4 -----Example Output----- 3","solution":"def min_practice_sessions(N, A, X): Returns the minimum number of practice sessions Chef needs to make sure he can solve all the problems. Parameters: N (int): The number of problems. A (list of int): The skill levels required to solve each problem. X (int): Chef\'s initial skill level. Returns: int: The minimum number of practice sessions required. # Find the maximum skill level required among all problems max_skill = max(A) # Calculate the number of practice sessions needed if X >= max_skill: return 0 else: return max_skill - X"},{"question":"Given a list of dictionaries where each dictionary contains two keys: \'name\' (string) and \'age\' (integer), return a new list with the names of the individuals sorted by their age in ascending order. If two individuals have the same age, they should be sorted alphabetically by their name. For example: Input: [ {\'name\': \'Alice\', \'age\': 30}, {\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Charlie\', \'age\': 25} ] Output: [\'Bob\', \'Charlie\', \'Alice\']","solution":"def sort_names_by_age(people): Sorts and returns a list of names from the input list of dictionaries containing \'name\' and \'age\' keys, sorted by age in ascending order. If two individuals have the same age, their names should be sorted alphabetically. Args: people (list): List of dictionaries with \'name\' (str) and \'age\' (int) keys. Returns: list: List of names sorted by age and name. sorted_people = sorted(people, key=lambda x: (x[\'age\'], x[\'name\'])) return [person[\'name\'] for person in sorted_people] # Example usage: # people = [{\'name\': \'Alice\', \'age\': 30}, {\'name\': \'Bob\', \'age\': 25}, {\'name\': \'Charlie\', \'age\': 25}] # result = sort_names_by_age(people) # [\'Bob\', \'Charlie\', \'Alice\']"},{"question":"Binary Search Tree - Search and Insert Implement a function `search(root, value)` that searches for a given value in a binary search tree (BST) and returns `True` if the value exists or `False` otherwise. Additionally, implement a function `insert(root, value)` that inserts a new value into the BST while maintaining the properties of a BST. The `Node` class defining the structure of a node for the BST is already provided, and it has the following attributes: - `value`: The data value stored in the node. - `left`: Reference to the left child node. - `right`: Reference to the right child node. Note: - The `insert` function should return the root of the modified BST after insertion. - The `search` function should return a boolean indicating the presence of the value in the BST. Example: ```python # Define the structure of a node class Node: def __init__(self, value): self.value = value self.left = None self.right = None def search(root, value): # Your code here def insert(root, value): # Your code here # Example Usage: # Creating a tree: # 10 # / # 5 15 # / # 2 7 root = Node(10) root = insert(root, 5) root = insert(root, 15) root = insert(root, 2) root = insert(root, 7) print(search(root, 15)) # Output: True print(search(root, 8)) # Output: False ```","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def search(root, value): Searches for a value in the BST. if root is None: return False if root.value == value: return True elif value < root.value: return search(root.left, value) else: return search(root.right, value) def insert(root, value): Inserts a value into the BST. if root is None: return Node(value) if value < root.value: root.left = insert(root.left, value) else: root.right = insert(root.right, value) return root"},{"question":"Sarah is trying to organize her bookshelf. She has a shelf with N slots, but she only has M books to fill into those slots (1 book per slot). To make her shelf look more aesthetically pleasing, she wishes to fill the books in such a way that the number of continuous empty slots between any two books (including before the first book and after the last book) is exactly K. If it is not possible to achieve this layout, return -1. Otherwise, return the positions in which Sarah should place the books (1-based index). -----Input----- The first line of input contains a single integer T denoting the number of test cases. The first and only line of each test case contains three space-separated integers — N, M, and K — where N is the number of slots in the shelf, M is the number of books, and K is the required number of continuous empty slots between any two books. -----Output----- For each test case, output the 1-based positions where Sarah should place the books in a single line separated by spaces, or -1 if it\'s not possible. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ N - 0 ≤ K ≤ N-1 -----Example-----Input 3 10 3 2 7 5 0 8 4 1 Output 1 4 7 1 2 3 4 5 1 3 5 7 -----Explanation----- - Test 1: Sarah can place the books in positions 1, 4, and 7. There are exactly 2 empty slots between any two books. - Test 2: Sarah places all 5 books consecutively starting from position 1 and leaving no empty slots between any two books. - Test 3: Sarah places the books in positions 1, 3, 5, and 7 with exactly 1 empty slot between any two books.","solution":"def organize_books(T, test_cases): results = [] for i in range(T): N, M, K = test_cases[i] max_slots_needed = (M - 1) * K + M if max_slots_needed > N: results.append(\\"-1\\") else: positions = [] current_position = 1 for j in range(M): positions.append(current_position) current_position += K + 1 results.append(\\" \\".join(map(str, positions))) return results"},{"question":"A farmer has a rectangular field with dimensions `length` and `width` in meters. He wants to create square plots from this field, such that each plot has equal sides and occupies as much of the field as possible without any land remaining. Write a function `max_square_plots(length, width)` that returns the maximum side length of each square plot. For example: ``` max_square_plots(6, 9) -> 3 Explanation: The maximum side length of a square that can fit into a 6x9 field without any remaining land is 3 meters. Plots of side 3 meters will tile the entire field with no land left: 3x3, 3x3, 3x3. ``` ``` max_square_plots(8, 12) -> 4 Explanation: The maximum side length of a square that can fit into an 8x12 field without any remaining land is 4 meters. Plots of side 4 meters will tile the entire field with no land left: 4x4, 4x4. ``` Note that the function should efficiently handle large values for `length` and `width`.","solution":"def max_square_plots(length, width): Returns the maximum side length of each square plot that can fit into the rectangular field of given length and width without any land remaining. def gcd(a, b): while b: a, b = b, a % b return a return gcd(length, width)"},{"question":"You are given an array of k linked lists, each linked-list is sorted in ascending order. Merge all the linked lists into one sorted linked list and return it. Example: Input: [ 1->4->5, 1->3->4, 2->6 ] Output: 1->1->2->3->4->4->5->6 Constraints: 1. The number of linked lists k is in the range [0, 10^4]. 2. Each linked list has at most 5000 nodes. 3. All the linked lists combined have at most 10^5 nodes.","solution":"from heapq import heappush, heappop class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeKLists(lists): Merge k sorted linked lists and return it as one sorted linked list. min_heap = [] # Add the first node of each list to the heap for i in range(len(lists)): if lists[i]: heappush(min_heap, (lists[i].val, i, lists[i])) dummy = ListNode() current = dummy while min_heap: val, i, node = heappop(min_heap) current.next = ListNode(val) current = current.next if node.next: heappush(min_heap, (node.next.val, i, node.next)) return dummy.next"},{"question":"Create a function that takes a string representing a mathematical expression and returns the result as a floating-point number. The expression can include addition, subtraction, multiplication, and division, and follows the standard order of operations. Examples: `evaluateExpression(\\"3+5*2\\")` returns 13.0 `evaluateExpression(\\"10+2*6\\")` returns 22.0 `evaluateExpression(\\"100*2+12\\")` returns 212.0 `evaluateExpression(\\"100*(2+12)\\")` returns 1400.0 `evaluateExpression(\\"100*(2+12)/14\\")` returns 100.0","solution":"def evaluateExpression(expression): Evaluates a mathematical expression and returns the result as a floating-point number. Parameters: expression (str): A string representing a mathematical expression. Returns: float: The result of the evaluated expression. try: result = eval(expression) return float(result) except Exception as e: raise ValueError(\\"Invalid expression\\") from e"},{"question":"Task You are given a rectangular grid where each cell can either contain a positive integer representing the amount of gold or zero representing an empty cell. You need to find the maximum amount of gold you can collect starting from any cell and moving only in four possible directions - up, down, left, or right. You cannot visit the same cell more than once in any path. Write a function that takes the grid as input and returns the maximum amount of gold you can collect. Example For `grid = [[0, 6, 0], [5, 8, 7], [0, 9, 0]]`, the result should be `24`. Here are a few paths you can take to collect the maximum gold: - Start at cell (1, 1) and then move to (1, 2): `8 + 7 = 15` - Start at cell (1, 1) and then move to (2, 1): `8 + 9 = 17` - Start at cell (1, 1), move to (0, 1) then back to (1, 1): `8 + 6 + 8 = 22` - Start at cell (1, 2), move to (1, 1) then to (2, 1): `7 + 8 + 9 = 24` For `grid = [[1, 0, 7], [2, 0, 6], [3, 4, 5]]`, the result should be `28`. Input/Output - `[input]` 2D integer array `grid` The grid containing positive integers representing gold in each cell and zeros representing empty cells. - `[output]` an integer The maximum amount of gold that can be collected.","solution":"def getMaximumGold(grid): def dfs(x, y): if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == 0: return 0 gold = grid[x][y] grid[x][y] = 0 # Mark the cell as visited by setting it to 0 maxGold = 0 # Explore all four directions for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)): maxGold = max(maxGold, dfs(x + dx, y + dy)) grid[x][y] = gold # Reset the cell to its original value return gold + maxGold maxGoldCollected = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] != 0: maxGoldCollected = max(maxGoldCollected, dfs(i, j)) return maxGoldCollected"},{"question":"You are given a list of integers, where each integer appears exactly twice, except for one integer which appears only once. Write a function to find the integer that appears only once. Example 1: ``` Input: [2, 2, 1] Output: 1 ``` Example 2: ``` Input: [4, 1, 2, 1, 2] Output: 4 ``` Example 3: ``` Input: [1, 1, 2, 2, 3, 3, 4] Output: 4 ``` Your function should have a linear runtime complexity. Could you implement it without using extra memory? > Notes >* You can assume that your input list is non-empty and contains numbers only. >* Your function should return the single integer that does not have a duplicate in the list.","solution":"def single_number(nums): Returns the integer that appears only once in the list, where each integer appears exactly twice except for one. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"You are given a sequence of n elements. The task is to create a new sequence where each element at index i (1-based) is the product of all the elements in the original sequence except the element at index i. For example, if the original sequence is [1, 2, 3, 4], the new sequence should be [24, 12, 8, 6] because: - The first element is 2 * 3 * 4 = 24 - The second element is 1 * 3 * 4 = 12 - The third element is 1 * 2 * 4 = 8 - The fourth element is 1 * 2 * 3 = 6 Your task is to read the sequence and output the new sequence. -----Input----- The input begins with a single positive integer indicating the number of test cases. Each test case starts with a single integer n, followed by n integers representing the sequence. 1 ≤ n ≤ 10^5 The sequence elements are integers between 1 and 100. -----Output----- For each test case, print the new sequence on a single line. Sample Input 2 4 1 2 3 4 3 1 2 3 Sample Output 24 12 8 6 6 3 2","solution":"def product_excluding_self(seq): Create a new sequence where each element at index i is the product of all elements in the original sequence except the element at index i. n = len(seq) if n == 0: return [] left_products = [1] * n right_products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * seq[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * seq[i + 1] result = [left_products[i] * right_products[i] for i in range(n)] return result def solve(test_cases): results = [] for seq in test_cases: results.append(product_excluding_self(seq)) return results"},{"question":"Write a program that reads strings until an empty string is given. The program needs to determine if each string is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward, ignoring spaces, punctuation, and capitalization. -----Input:----- - The input consists of multiple lines of text. The first line contains T, the number of test cases. - Each of the next T lines contains a single string to be checked for being a palindrome. -----Output:----- For each string, output \\"YES\\" if the string is a palindrome and \\"NO\\" if it is not. -----Constraints----- - 1 leq T leq 1000 - Each string will have at most 1000 characters. -----Sample Input:----- 3 A man a plan a canal Panama No lemon, no melon Hello, World! -----Sample Output:----- YES YES NO -----EXPLANATION:----- In the series of strings: 1. \\"A man a plan a canal Panama\\", after removing spaces, punctuation, and converting to lower case becomes \\"amanaplanacanalpanama\\", which is a palindrome. 2. \\"No lemon, no melon\\", after removing spaces, punctuation, and converting to lower case becomes \\"nolemonnomelon\\", which is a palindrome. 3. \\"Hello, World!\\", after removing spaces, punctuation, and converting to lower case becomes \\"helloworld\\", which is not a palindrome.","solution":"import re def is_palindrome(s): Checks if the given string is a palindrome considering only alphanumeric characters and ignoring case. cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() return cleaned == cleaned[::-1] def check_palindromes(strings): Takes a list of strings and returns a list of \'YES\' or \'NO\' indicating if each string is a palindrome. results = [] for s in strings: if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"\'**Puzzle Store Arrangement**\' You are managing a store that exclusively sells jigsaw puzzles. Each puzzle has a unique identifier and can be represented as a rectangle of pieces (rows x columns). Your task is to organize the store layout such that the puzzles are arranged in a grid. However, the store owner has a peculiar requirement: puzzles of the same number of rows should be placed in the same row of grids, and puzzles with the same number of columns should be placed in the same column of grids. Given this requirement, determine if it\'s possible to arrange the puzzles in a way that satisfies the owner\'s conditions. **Input:** The input begins with an integer T, the number of test cases. Each test case starts with an integer P, the number of puzzles in the store. Following this are P lines, each containing two integers r and c, denoting the number of rows and columns of the puzzle respectively. **Output:** For each test case, if it\'s possible to arrange the puzzles as per the owner\'s requirements, print \\"YES\\". Otherwise, print \\"NO\\". **Constraints:** - 1 ≤ T ≤ 100 - 1 ≤ P ≤ 100 - 1 ≤ r, c ≤ 1000 **Example Input:** 3 3 2 3 2 4 2 5 3 3 2 4 2 5 2 3 2 3 4 5 3 3 **Example Output:** YES YES NO **Explanation:** In the first test case, all puzzles have 2 rows, so you can place them all in a single row of grids. In the second test case, all puzzles have 2 columns, so you can place them in a single column of grids. In the third test case, puzzles have different numbers of rows and columns, so it is not possible to arrange them as per the owner\'s requirements.","solution":"def can_arrange_puzzles(T, test_cases): Determine if puzzles can be arranged according to the owner\'s peculiar conditions. Parameters: T : int The number of test cases. test_cases : list of lists Each list represents a test case where the first element is the number of puzzles, and subsequent elements are tuples representing the rows and columns of the puzzles. Returns: list of str : For each test case, returns \\"YES\\" if the puzzles can be arranged as required, otherwise \\"NO\\". results = [] for case in test_cases: P = case[0] puzzles = case[1:] row_set = set() col_set = set() for r, c in puzzles: row_set.add(r) col_set.add(c) if len(row_set) == 1 or len(col_set) == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Chef loves playing with numbers and he recently discovered the concept of \\"lucky numbers\\". A lucky number is defined as a number that contains only the digits 4 and 7. Chef is curious to know how many lucky numbers exist within a given range ([A, B]) inclusive. Can you help him? -----Input----- - The first line of the input contains a single integer ( T ) denoting the number of test cases. The description of ( T ) test cases follows. - The first and only line of each test case contains two space-separated integers ( A ) and ( B ) representing the range. -----Output----- For each test case, print a single line containing the count of lucky numbers within the range ([A, B]). -----Constraints----- - (1 leq T leq 100) - (1 leq A leq B leq 10^9) -----Example Input----- 3 1 10 4 7 40 47 -----Example Output----- 2 2 2 -----Explanation----- Example case 1: The lucky numbers between 1 and 10 are 4 and 7. Example case 2: All numbers between 4 and 7 are lucky numbers. Example case 3: The lucky numbers between 40 and 47 are 44 and 47.","solution":"def is_lucky_number(n): Checks if a number is a lucky number i.e., it contains only the digits 4 and 7. while n > 0: digit = n % 10 if digit != 4 and digit != 7: return False n = n // 10 return True def count_lucky_numbers(A, B): Returns the count of lucky numbers within the range [A, B] inclusive. count = 0 for num in range(A, B + 1): if is_lucky_number(num): count += 1 return count def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] index = 1 for _ in range(T): A = int(data[index]) B = int(data[index + 1]) results.append(count_lucky_numbers(A, B)) index += 2 for result in results: print(result)"},{"question":"Given a string, return a new string where every character removed from the string appears only once, preserving the input order of first occurrences of the characters. For example: ``` \\"apple\\" => \\"aple\\" \\"banana\\" => \\"ban\\" \\"programming\\" => \\"progamin\\" \\"hello\\" => \\"helo\\" ```","solution":"def remove_duplicates(s): Return a new string where every character removed from the string appears only once, preserving the input order of the first occurrences of the characters. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Write a function called `is_anagram` that takes two strings `str1` and `str2` and returns `True` if the strings are anagrams of each other, and `False` otherwise. An anagram is a word or phrase formed by rearranging the letters of another, typically using all the original letters exactly once. The function should ignore case and any non-letter characters.","solution":"def is_anagram(str1, str2): Returns True if str1 and str2 are anagrams of each other, ignoring case and non-letter characters. Returns False otherwise. import re # Clean the input strings: remove non-letter characters and convert to lower case clean_str1 = re.sub(r\'[^a-zA-Z]\', \'\', str1).lower() clean_str2 = re.sub(r\'[^a-zA-Z]\', \'\', str2).lower() # Sort the cleaned strings sorted_str1 = \'\'.join(sorted(clean_str1)) sorted_str2 = \'\'.join(sorted(clean_str2)) # Check if sorted strings are equal return sorted_str1 == sorted_str2"},{"question":"Write a function that converts a given string to its \\"mirror image\\" by reversing the order of characters. For example, the string \\"hello\\" should be transformed into \\"olleh\\". The function should preserve the case sensitivity of the original string and handle special characters without converting them. Additionally, ensure that leading and trailing whitespace is trimmed before processing the string. Examples: 1. Input: \\"hello world! \\" Output: \\"!dlrow olleh\\" 2. Input: \\" Python Programming\\" Output: \\"gnimmargorP nohtyP\\" 3. Input: \\"12345!@#\\" Output: \\"#@!54321\\"","solution":"def mirror_image(s): Converts a given string to its \\"mirror image\\" by reversing the order of characters. Trims any leading and trailing whitespace before reversing the string. Parameters: s (str): The input string. Returns: str: The reversed string with trimmed whitespace. return s.strip()[::-1]"},{"question":"Given a binary tree, determine if it is a valid binary search tree (BST). A binary search tree (BST) is defined as follows: - The left subtree of a node contains only nodes with keys less than the node\'s key. - The right subtree of a node contains only nodes with keys greater than the node\'s key. - Both the left and right subtrees must also be binary search trees. -----Input:----- - The input will be given as an adjacency list representation of the binary tree. - The first line contains a single integer, N, the number of nodes in the tree. - The next N lines contain three integers where: - The first integer is the node value. - The second integer is the value of the left child, or -1 if there is no left child. - The third integer is the value of the right child, or -1 if there is no right child. -----Output:----- - Output \\"True\\" if the given binary tree is a valid BST, otherwise output \\"False\\". -----Constraints----- - 1 leq N leq 10^4 - -10^9 leq node value leq 10^9 - Each integer will represent a unique node value in the tree. -----Sample Input:----- 5 2 1 3 1 -1 -1 3 -1 -1 5 2 6 6 -1 -1 -----Sample Output:----- True -----EXPLANATION:----- The binary tree has the following structure: ``` 5 / 2 6 / 1 3 ``` - 1 < 2 < 5, and 3 > 2 < 5, and 6 > 5 - All nodes satisfy the BST property. Thus, the answer is True.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): tree_nodes = {} for val, left, right in nodes: if val not in tree_nodes: tree_nodes[val] = TreeNode(val) if left != -1: if left not in tree_nodes: tree_nodes[left] = TreeNode(left) tree_nodes[val].left = tree_nodes[left] if right != -1: if right not in tree_nodes: tree_nodes[right] = TreeNode(right) tree_nodes[val].right = tree_nodes[right] return tree_nodes[nodes[0][0]] def is_valid_BST(root, low=float(\'-inf\'), high=float(\'inf\')): if not root: return True if not (low < root.val < high): return False return (is_valid_BST(root.left, low, root.val) and is_valid_BST(root.right, root.val, high)) def check_bst(adj_list): tree = build_tree(adj_list) return is_valid_BST(tree)"},{"question":"Task You are given a list of non-negative integers representing heights of adjacent buildings. The amount of water that can be trapped between buildings after a rain is calculated as follows: for each building, compute the water that can be trapped above it, which is determined by the minimum of the maximum heights to its left and right minus its height (if this value is positive). Write a function that calculates the total amount of water that can be trapped between the buildings. # Example For `heights = [3, 0, 2, 0, 4]`, the output should be `7`. Here is how it is calculated: ``` _ _ _ | _ _ _ | | _ _|||_||_| | ``` Trapped water above building index 1: min(3, 4) - 0 = 3 Trapped water above building index 2: min(3, 4) - 2 = 1 Trapped water above building index 3: min(3, 4) - 0 = 3 Total trapped water = 3 + 1 + 3 = 7 # Input/Output - `[input]` array of integers `heights` Array consisting of non-negative integers representing the heights of adjacent buildings. The length of the array is guaranteed to be between 1 and 1000. - `[output]` an integer Total amount of water that can be trapped (in integer units).","solution":"def trap(height): Calculate the total amount of water that can be trapped. :param height: List of non-negative integers representing the heights of adjacent buildings. :return: Total amount of water that can be trapped. if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i-1], height[i]) # Fill right_max array right_max[n-1] = height[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], height[i]) # Calculate water trapped for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"A company has a team-building day and they want to organize a series of games. Each game needs a specific number of participants, and employees can choose to join any game they want. However, each employee can only participate in one game, and the goal is to maximize the number of games that can be fully staffed with the available employees. You are given an array representing the number of participants required for each game and an integer representing the total number of employees available. Your task is to determine the maximum number of games that can be fully staffed. -----Input:----- - First line contains T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains two integers N (the number of games) and M (the number of employees). - The second line contains N integers where the i-th integer represents the number of participants required for the i-th game. -----Output:----- For each test case, output the maximum number of games that can be fully staffed. -----Constraints----- - 1 leq T leq 50 - 1 leq N leq 100 - 1 leq M leq 100 - 1 leq number of participants required for each game leq 20 -----Sample Input:----- 2 5 15 3 8 5 2 4 4 10 1 2 3 4 -----Sample Output:----- 4 4 -----EXPLANATION:----- In the first test case, the company can fully staff the games needing 2, 3, 4, and 5 participants. In the second test case, the company can fully staff all four games.","solution":"def max_full_games(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] participants_required = test_cases[i][1] participants_required.sort() game_count = 0 for participants in participants_required: if M >= participants: M -= participants game_count += 1 else: break results.append(game_count) return results"},{"question":"Write a function that takes a list of integers as input and moves all the zeroes to the end of it while maintaining the relative order of the non-zero elements. Example 1: Given nums = [0, 1, 0, 3, 12], return [1, 3, 12, 0, 0]. Example 2: Given nums = [0, 0, 1], return [1, 0, 0]. Note: You must do this in-place without making a copy of the array. Minimize the total number of operations.","solution":"def move_zeroes(nums): Moves all zeroes in the list to the end while maintaining the order of non-zero elements. :param nums: List of integers :return: None (modifies the list in-place) last_non_zero_found_at = 0 # Move all non-zero numbers to the front for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at] = nums[i] last_non_zero_found_at += 1 # Fill the remaining positions with zeroes for i in range(last_non_zero_found_at, len(nums)): nums[i] = 0"},{"question":"Complete the function to generate all possible valid parentheses combinations for a given number `n`. Valid parentheses are sequences of `n` pairs of correctly matched `()`. For example, for `n = 3`, the valid combinations would be: ``` [ \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\" ] ``` The function should return a list containing all such combinations in any order. **Constraints:** - 1 <= n <= 8","solution":"def generate_parentheses(n): Generates all combinations of n pairs of valid parentheses. def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) result = [] backtrack() return result"},{"question":"# Task You\'re given a list of integers `arr`, each element representing the height of a building in a skyline. The buildings are all of equal width and are aligned at their bases. Your task is to determine the volume of water that would be trapped after a rain, given that the water cannot escape through the gaps between buildings. # Input/Output - `[input]` list of integers `arr` A non-empty list of non-negative integers representing the heights of buildings. `1 ≤ arr.length ≤ 20` `0 ≤ arr[i] ≤ 100` - `[output]` an integer The total volume of water trapped after a rain. # Example For ``` arr = [0,1,0,2,1,0,1,3,2,1,2,1] ``` the result should be `6`. Explanation: ![trap_rain_water](https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png) The area of water trapped is represented by the blue sections in the diagram above, which sums up to 6 units.","solution":"def trap_rain_water(arr): Calculate the total volume of water trapped after a rain. Params: arr - list of integers representing the heights of buildings. Returns: int - total volume of water trapped. if not arr or len(arr) < 3: return 0 n = len(arr) left_max = [0] * n right_max = [0] * n left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i-1], arr[i]) right_max[n-1] = arr[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], arr[i]) total_water = 0 for i in range(n): total_water += min(left_max[i], right_max[i]) - arr[i] return total_water"},{"question":"Description Write a function that checks if a given string is a valid shuffle of two other strings. A string is considered a valid shuffle if it can be formed by interleaving the characters of the two input strings without reordering them. In other words, all characters of the two strings should appear in the shuffled string in their original order. **Function Signature** ```python def is_valid_shuffle(str1: str, str2: str, shuff_str: str) -> bool: pass ``` # Input - Three strings `str1`, `str2`, and `shuff_str`, where all strings consist of only lowercase letters. - `str1` and `str2` have lengths between 1 and 100. - `shuff_str` has length between 1 and 200. # Output - Return `True` if `shuff_str` is a valid shuffle of `str1` and `str2`, otherwise return `False`. # Example ```python print(is_valid_shuffle(\\"abc\\", \\"def\\", \\"adbcef\\")) # True print(is_valid_shuffle(\\"abc\\", \\"def\\", \\"abdecf\\")) # True print(is_valid_shuffle(\\"abc\\", \\"def\\", \\"abcfed\\")) # False print(is_valid_shuffle(\\"123\\", \\"456\\", \\"142536\\")) # True print(is_valid_shuffle(\\"123\\", \\"456\\", \\"123465\\")) # False ``` # Explanation - In the first example, \\"adbcef\\" is a valid shuffle of \\"abc\\" and \\"def\\" since the characters of both strings appear in the shuffled string in their original order. - In the second example, \\"abdecf\\" is a valid shuffle of \\"abc\\" and \\"def\\" by the same logic. - In the third example, \\"abcfed\\" is not a valid shuffle because \\"d\\" and \\"e\\" do not preserve the order from \\"def\\". - In the fourth example, \\"142536\\" is a valid shuffle of \\"123\\" and \\"456\\". - In the fifth example, \\"123465\\" is not a valid shuffle because \\"4\\" and \\"5\\" do not preserve the order from \\"456\\".","solution":"def is_valid_shuffle(str1: str, str2: str, shuff_str: str) -> bool: Check if shuff_str is a valid shuffle of str1 and str2. # Base case checks if len(str1) + len(str2) != len(shuff_str): return False i = j = k = 0 while k < len(shuff_str): if i < len(str1) and str1[i] == shuff_str[k]: i += 1 elif j < len(str2) and str2[j] == shuff_str[k]: j += 1 else: return False k += 1 return i == len(str1) and j == len(str2)"},{"question":"Task You have been hired by a university to develop a simple grade book application. This application should allow a professor to input students\' names and their associated grades, and then calculate the average grade for the class. Your task Write a class `GradeBook` that allows the professor to: - Add a student and their grade. - Calculate the average grade of the class. The class should have the following methods: # Methods - `add_student(name: str, grade: float) -> None` - This method should take the student\'s name and grade as input and store them. - If a student with the same name is added again, their grade should be updated. - `calculate_average() -> float` - This method should return the average grade of all students in the grade book, rounded to 2 decimal places. # Example ```python gradebook = GradeBook() gradebook.add_student(\\"John Doe\\", 85.5) gradebook.add_student(\\"Jane Smith\\", 92.0) gradebook.add_student(\\"John Doe\\", 89.0) # Updating John Doe\'s grade average = gradebook.calculate_average() print(average) # Output: 90.50 ``` # Note - You can assume all grades are non-negative numbers. - If no students are added, `calculate_average()` should return `0.0`. Implement the `GradeBook` class and its methods such that it fulfills the above requirements.","solution":"class GradeBook: def __init__(self): # Initialize an empty dictionary to store student names and their respective grades self.students = {} def add_student(self, name: str, grade: float) -> None: Adds a student and their grade to the gradebook. If the student already exists, their grade is updated. self.students[name] = grade def calculate_average(self) -> float: Calculates and returns the average grade of the class, rounded to 2 decimal places. Returns 0.0 if no students are present. if not self.students: return 0.0 total = sum(self.students.values()) average = total / len(self.students) return round(average, 2)"},{"question":"# Task: Write a function `longest_substring_without_repeating_characters` that receives a string `s` and returns the length of the longest substring without repeating characters in `s`. A substring is a contiguous sequence of characters within a string. Different approaches can solve this problem, but we\'ll aim for an efficient one with a linear time complexity. # Example: ```python longest_substring_without_repeating_characters(\\"abcabcbb\\") #=> 3 (\\"abc\\") longest_substring_without_repeating_characters(\\"bbbbb\\") #=> 1 (\\"b\\") longest_substring_without_repeating_characters(\\"pwwkew\\") #=> 3 (\\"wke\\") longest_substring_without_repeating_characters(\\"\\") #=> 0 ``` # Constraints: - The input string `s` will have a length `l` such that 0 <= `l` <= 10^5. - The string `s` will consist of English letters, digits, and symbols. # Solution Approach: Here is one possible solution approach to consider: - Use the sliding window technique to maintain a window of characters without repetition. - Utilize a dictionary to keep track of the last index of each character within the window. - As you iterate through the string, adjust the window to ensure no characters are repeating, and keep track of the maximum length encountered. ```python def longest_substring_without_repeating_characters(s: str) -> int: n = len(s) if n == 0: return 0 char_index = {} max_len = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_len = max(max_len, end - start + 1) return max_len ```","solution":"def longest_substring_without_repeating_characters(s: str) -> int: n = len(s) if n == 0: return 0 char_index = {} max_len = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"You are given a positive integer `N` (1 ≤ N ≤ 10000) and an array of integers `A` of length `N`. Your task is to find the smallest positive integer that is missing from the array `A`. The array `A` may contain both positive and negative integers, and your algorithm should be efficient in both time and space. # Example: **Input:** ``` N = 5 A = [3, 4, -1, 1, 2] ``` **Output:** ``` 5 ``` **Input:** ``` N = 3 A = [-2, -5, -7] ``` **Output:** ``` 1 ``` **Explanation:** In the first example, the array contains integers from 1 to 4, so the smallest missing positive integer is 5. In the second example, there are no positive integers in the array, so the smallest missing positive integer is 1. # Constraints: - The algorithm should not use extra space proportional to `N`. It should have a space complexity of O(1) beyond the input array. - The time complexity of your solution should ideally be O(N).","solution":"def smallest_missing_positive_integer(N, A): Finds the smallest missing positive integer in the array A of length N. # First, we will mark elements that are out of our target range [1, N]. for i in range(N): if A[i] <= 0 or A[i] > N: A[i] = N + 1 # Use index as a hash key, place negative mark on numbers found in the array for i in range(N): val = abs(A[i]) if 1 <= val <= N: A[val-1] = -abs(A[val-1]) # The first index which is positive indicates the missing number for i in range(N): if A[i] > 0: return i + 1 # If no missing number is found in the range [1, N] return N + 1"},{"question":"Create a function that takes an array of integers and returns the length of the longest increasing subsequence. # Longest Increasing Subsequence (LIS) A subsequence is derived by deleting some or no elements of the array without changing the order of the remaining elements. An increasing subsequence is where each element is greater than the preceding one. # Input * An array of integers, `arr`. # Output * An integer representing the length of the longest increasing subsequence in the array. # Example ```python # Example 1 arr = [10, 9, 2, 5, 3, 7, 101, 18] # returns 4 # Explanation: The LIS is [2, 3, 7, 101] # Example 2 arr = [0, 1, 0, 3, 2, 3] # returns 4 # Explanation: The LIS is [0, 1, 2, 3] # Example 3 arr = [7, 7, 7, 7, 7, 7, 7] # returns 1 # Explanation: The LIS is [7] ``` Write a function `longest_increasing_subsequence(arr: List[int]) -> int` to compute the length of the longest increasing subsequence.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a list of product items represented as strings. Each product string contains multiple words and the order of the words matters for matching. Your task is to implement a search function that takes a list of product items and a search query, and returns the list of all products that match the search query. The search query may contain multiple words, and you should return products that contain all the words in the same order as they appeared in the search query. Case sensitivity is not considered, i.e., the search should be case-insensitive. Write a function `search_products(products: List[str], query: str) -> List[str]` that takes the following parameters: - `products` (List[str]): A list of strings representing the product items. - `query` (str): A string representing the search query. The function should return a list of strings representing the product items that match the search query. The order of the product items in the returned list should be the same as their order in the input list. Example 1: Input: products = [\\"Apple iPhone 12\\", \\"Samsung Galaxy S21\\", \\"Apple iPhone 12 Pro\\", \\"Xiaomi Mi 11\\"] query = \\"Apple iPhone\\" Output: [\\"Apple iPhone 12\\", \\"Apple iPhone 12 Pro\\"] Example 2: Input: products = [\\"Apple iPhone 12\\", \\"Samsung Galaxy S21\\", \\"Apple iPhone 12 Pro\\", \\"Xiaomi Mi 11\\"] query = \\"Galaxy\\" Output: [\\"Samsung Galaxy S21\\"] Example 3: Input: products = [\\"Apple iPhone 12\\", \\"Samsung Galaxy S21\\", \\"Apple iPhone 12 Pro\\", \\"Xiaomi Mi 11\\"] query = \\"Pixel\\" Output: [] Note: - The length of `products` will be in the range [1, 100]. - The length of each product string and the search query will be in the range [1, 100]. - The words in the product strings and search query will consist of alphanumeric characters and spaces.","solution":"from typing import List def search_products(products: List[str], query: str) -> List[str]: Returns a list of products that match the search query. The query must appear in the product string in the same order as specified. The search is case-insensitive. query_lower = query.lower() matching_products = [] for product in products: if query_lower in product.lower(): matching_products.append(product) return matching_products"},{"question":"Create a function that takes a list of numbers and a target number as arguments. The function should return a pair of indices of the numbers in the list that add up to the target number. Assume that each input would have exactly one solution, and you cannot use the same element twice. Example: ``` find_indices([2, 7, 11, 15], 9) should return [0, 1] find_indices([3, 2, 4], 6) should return [1, 2] find_indices([3, 3], 6) should return [0, 1] ```","solution":"def find_indices(nums, target): Returns the indices of the two numbers that add up to the target. Args: nums (list of int): The list of numbers. target (int): The target sum. Returns: list of int: The indices of the two numbers. num_dict = {} for i, num in enumerate(nums): complement = target - num if complement in num_dict: return [num_dict[complement], i] num_dict[num] = i"},{"question":"Write a function that takes an integer n (1 <= n <= 100) and returns the sum of the squares of all the numbers from 1 to n. Example: ```python sum_of_squares(3) # => returns 14 because 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 ``` ```f# sumOfSquares 3 // => returns 14 because 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 ``` You need to ensure that your function handles values at both ends of the range effectively.","solution":"def sum_of_squares(n): Returns the sum of the squares of all the numbers from 1 to n. return sum(i ** 2 for i in range(1, n + 1))"},{"question":"Write a function that receives a starting point `x` and an ending point `y`, both integers, and returns the list of all prime numbers between `x` and `y` (inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, if `x` is 10 and `y` is 20, the prime numbers between them are 11, 13, 17, and 19. Write a function: ```python get_primes(x: int, y: int) -> List[int]: ... ``` The function should return a list of prime numbers within the range `[x, y]`. Test the function with the following scenarios: ```python get_primes(1, 5) == [2, 3, 5] get_primes(10, 20) == [11, 13, 17, 19] get_primes(22, 29) == [23, 29] get_primes(0, 1) == [] get_primes(-10, 2) == [2] ```","solution":"def get_primes(x, y): Returns a list of all prime numbers between x and y (inclusive). def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True primes = [] for num in range(x, y + 1): if is_prime(num): primes.append(num) return primes"},{"question":"=====Problem Statement===== You are given a list of n integers. Your task is to find the smallest positive integer that is not present in the list. If the list contains all positive integers up to its length, the smallest positive integer not in the list would be n+1. =====Input Format===== - The first line contains an integer n, the number of integers in the list. - The second line contains n space-separated integers a1, a2, a3, ..., an. =====Constraints===== 1 ≤ n ≤ 10^5 -10^6 ≤ ai ≤ 10^6 =====Output Format===== Print the smallest positive integer that is not present in the list.","solution":"def smallest_missing_positive_integer(arr): Given a list of integers, this function finds and returns the smallest positive integer that is not present in the list. # Create a set for quicker lookups num_set = set(arr) smallest_missing = 1 # Check each integer starting from 1 upwards to find the smallest missing one while smallest_missing in num_set: smallest_missing += 1 return smallest_missing"},{"question":"Alice and Bob are playing a game with an array of integers. They alternately take turns picking any one of the remaining integers until no integers are left. The player who picks the last integer wins the game. Each player always plays optimally, meaning they always make the move that maximizes their chances of winning. Given the initial array, determine whether Alice, who always takes the first turn, has a winning strategy if both play optimally. Each player can only pick an integer x if all integers greater than x have already been picked. If Alice can ensure a win, output \\"Alice\\", else output \\"Bob\\". -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of integers in the array. The second line contains n distinct integers a_{i} (1 ≤ a_{i} ≤ 1000), the elements of the array. -----Output----- Print \\"Alice\\" if she has a winning strategy, otherwise print \\"Bob\\". -----Examples----- Input 4 4 3 2 1 Output Alice Input 5 3 5 1 7 6 Output Bob Input 3 10 8 6 Output Bob -----Note----- In the first sample, since the array is in descending order and Alice starts first, she can pick the integers in the reverse order and always leave Bob with no better move, ensuring her win. In the second sample, Bob can always pick integers such that Alice eventually is forced to pick the last integer, giving Bob the win. In the third sample, Bob can again strategize optimally to force Alice to pick the last integer.","solution":"def determine_winner(n, arr): Returns \\"Alice\\" if Alice has a winning strategy, otherwise returns \\"Bob\\". Parameters: - n (int): The number of integers in the array. - arr (list of int): The array of integers. Returns: - str: \\"Alice\\" or \\"Bob\\" depending on who has the winning strategy. arr.sort() # Sorting the array in ascending order if n % 2 == 1: return \\"Bob\\" # If the number of integers is odd, Bob wins return \\"Alice\\" # If the number of integers is even, Alice wins"},{"question":"You are given a list of N integers. An element of the list is called a \\"peak\\" if it is greater than its immediate neighbors (only the left neighbor if it\'s the first element, only the right neighbor if it\'s the last element, or both neighbors otherwise). Write a function to find the number of peaks in the list. If there are no peaks, return \\"No peaks found\\". -----Input----- - The first line of the input contains an integer N denoting the number of integers in the list. - The second line contains N space-separated integers representing the elements of the list. -----Output----- Print a single integer representing the number of peaks in the list, or print \\"No peaks found\\" if there are no peaks. -----Constraints----- - 1 le N le 10^5 - 1 le text{elements of list} le 10^9 -----Example Input----- 5 1 3 2 5 4 -----Example Output----- 2","solution":"def count_peaks(arr): Returns the number of peaks in the list. If no peaks are found, returns \\"No peaks found\\". n = len(arr) if n == 0: return \\"No peaks found\\" if n == 1: return \\"No peaks found\\" peak_count = 0 for i in range(n): if (i == 0 and arr[i] > arr[i+1]) or (i == n-1 and arr[i] > arr[i-1]) or (0 < i < n-1 and arr[i] > arr[i-1] and arr[i] > arr[i+1]): peak_count += 1 if peak_count == 0: return \\"No peaks found\\" return peak_count"},{"question":"You are given an array of N positive integers where each integer represents the height of a bar in a histogram. Your task is to calculate the area of the largest rectangle in the histogram. # Input format - The first line contains a single integer N, the number of bars in the histogram. - The second line contains N integers representing the heights of the bars in the histogram. # Output format - A single integer representing the area of the largest rectangle in the histogram. # Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ height of each bar ≤ 10^9 # Example Sample Input 1 ``` 7 2 1 5 6 2 3 1 ``` Sample Output 1 ``` 10 ``` Sample Input 2 ``` 4 1 2 3 4 ``` Sample Output 2 ``` 6 ``` # Explanation In the first example, the largest rectangle with area 10 is formed by including the heights 5 and 6 with width 2. In the second example, the largest rectangle with area 6 is formed by including the heights 2, 3, and 4 with width 3.","solution":"def largest_rectangle_area(histogram): Calculate the area of the largest rectangle in the histogram. :param histogram: List of positive integers representing the heights of the histogram bars :return: The area of the largest rectangle in the histogram stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a list of integers, group all the identical elements together and return the sorted list based on the first occurrence of each number. Example 1: Input: [4, 5, 6, 4, 6, 6, 7, 4, 7, 4] Output: [4, 4, 4, 4, 5, 6, 6, 6, 7, 7] Explanation: - The number 4 appears first and should be grouped together in the order of appearance. - The number 5 appears next and appears only once. - The number 6 appears after 5 and should be grouped together. - The number 7 appears last and should be grouped together. Example 2: Input: [1, 2, 3, 1, 2, 1, 2, 3, 4, 3, 4] Output: [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4] Explanation: - The number 1 appears first and should be grouped together in the order of appearance. - The number 2 appears next and should be grouped together. - The number 3 appears after 2 and should be grouped together. - The number 4 appears last and should be grouped together. Example 3: Input: [9, 9, 8, 8, 7, 8, 9, 7] Output: [9, 9, 9, 8, 8, 8, 7, 7] Explanation: - The number 9 appears first and should be grouped together in the order of appearance. - The number 8 appears next and should be grouped together. - The number 7 appears last and should be grouped together.","solution":"def group_and_sort_by_first_occurrence(lst): Groups all identical elements together and returns the list sorted based on the first occurrence of each number. from collections import defaultdict groups = defaultdict(list) for number in lst: groups[number].append(number) result = [] seen = set() for number in lst: if number not in seen: result.extend(groups[number]) seen.add(number) return result"},{"question":"Given a set of instructions of how different spices are to be measured for a recipe, create a function that processes these instructions and returns a list of combined ingredients in a standardized format. Each instruction includes the name of the ingredient, an optional unit of measure, and a quantity. The quantity is always at least one. Units of measure used can include grams (g), milligrams (mg), kilograms (kg), teaspoons (tsp), tablespoons (tbsp), and cups (cups). The name and quantity may be separated by multiple spaces or tabs. Input An array of ingredient instructions, where each element is a string in one of the following formats: ``` [\\"nutmeg 3g\\", \\"cinnamon 2 tsp\\", \\"sugar 5grams\\", \\"nutmeg 2g\\", \\"cinnamon 1tsp\\", \\"oats 0.5cups\\"] ``` Processing You need to standardize the units of measure for comparison and summation purposes as follows: - 1 cup = 48 tsp - 1 tablespoon = 3 tsp - 1 gram = 1000 mg - 1 kilogram = 1000 g (or 1,000,000 mg) Combine the quantities of the same ingredient, if they have the same unit; otherwise, convert them to the same unit first before summing. For instance, treat metrics in lower units during addition for simplicity (grams instead of kilograms; milligrams instead of grams). Output Return an array where the ingredients are listed in alphabetical order regardless of the unit. Each ingredient should appear once in its final standardized quantity, followed by a space, the standardized integer quantity, and again by a space and the unit of measure. A sample output would look like: ``` [\\"cinnamon 3 tsp\\", \\"nutmeg 5 g\\", \\"oats 24 tsp\\", \\"sugar 5 g\\"] ``` # Special Note If the input array contains elements with unrecognized units or misspellings in the units, the function should return an array with the single string: `\\"Invalid data\\"`","solution":"def standardize_units(instructions): def to_standard_unit(quantity, unit): if unit in [\'g\', \'grams\', \'gram\']: return quantity, \'g\' elif unit in [\'mg\', \'milligrams\', \'milligram\']: return quantity / 1000, \'g\' elif unit in [\'kg\', \'kilograms\', \'kilogram\']: return quantity * 1000, \'g\' elif unit in [\'tsp\', \'teaspoons\', \'teaspoon\']: return quantity, \'tsp\' elif unit in [\'tbsp\', \'tablespoons\', \'tablespoon\']: return quantity * 3, \'tsp\' elif unit in [\'cups\', \'cup\']: return quantity * 48, \'tsp\' else: raise ValueError(\\"Invalid unit\\") import re ingredient_dict = {} for instruction in instructions: parts = re.split(r\'s+\', instruction) ingredient = parts[0] qty_unit = parts[1] match = re.match(r\\"(d*.?d+)([a-zA-Z]+)\\", qty_unit) if not match: return [\\"Invalid data\\"] try: quantity = float(match.group(1)) unit = match.group(2) except ValueError: return [\\"Invalid data\\"] try: std_qty, std_unit = to_standard_unit(quantity, unit) except ValueError: return [\\"Invalid data\\"] if ingredient not in ingredient_dict: ingredient_dict[ingredient] = {\'qty\': 0, \'unit\': std_unit} if ingredient_dict[ingredient][\'unit\'] == std_unit: ingredient_dict[ingredient][\'qty\'] += std_qty else: return [\\"Invalid data\\"] result = [] for ingredient in sorted(ingredient_dict): qty = round(ingredient_dict[ingredient][\'qty\'], 2) unit = ingredient_dict[ingredient][\'unit\'] result.append(f\\"{ingredient} {qty} {unit}\\") return result"},{"question":"You are given a binary tree represented as a list of values in level-order traversal, where `null` represents a missing node. Write a function to calculate the sum of values of all nodes at the deepest level of the binary tree. For example, given the following binary tree represented as a list: ``` [1, 2, 3, null, null, 4, 5] ``` The tree looks like this: ``` 1 / 2 3 / 4 5 ``` The deepest level is level 3 with values [4, 5]. Therefore, the sum of values at the deepest level is 9. Your task: Write a function that takes a list of values representing a binary tree in level-order traversal and returns the sum of values of all nodes at the deepest level. Function signature: ```python def deepest_level_sum(tree: List[Optional[int]]) -> int: ``` # Constraints: - The input list will have at most 10,000 elements. - The values in the list are either integers or `null`. - The sum of values in the deepest level will fit into a 32-bit integer. # Examples: Input: `[1, 2, 3, null, null, 4, 5]` Output: `9` Input: `[1, 2, 3, 4, 5, null, null, 6, 7, null, null, null, null, 8, 9]` Output: `17` Input: `[1, null, 2, null, 3, null, 4, null, 5]` Output: `5` Input: `[3, 9, 20, null, null, 15, 7]` Output: `22` # Note: - The input list may have `null` values indicating missing nodes in the binary tree. - The function should handle cases with multiple missing nodes properly and correctly identify the deepest level.","solution":"from typing import List, Optional from collections import deque def deepest_level_sum(tree: List[Optional[int]]) -> int: if not tree: return 0 # To perform level-order traversal, use a deque (double-ended queue) q = deque([tree[0]]) # Initialize with the root value if it is not null index = 1 while q: level_sum = 0 level_size = len(q) # Number of elements at the current level for _ in range(level_size): node = q.popleft() if node is not None: level_sum += node if index < len(tree): left_child = tree[index] q.append(left_child) index += 1 if index < len(tree): right_child = tree[index] q.append(right_child) index += 1 return level_sum"},{"question":"Polycarp is a librarian who needs to organize n books on k (1 le k le n) shelves. The width of the i-th book is a_i centimeters. The books are currently in a random order. Polycarp wants to arrange the books on the shelves such that the number of books on each shelf is as balanced as possible. Specifically, he wants the number of books on any two shelves to differ by at most one. Additionally, each shelf should contain at least one book. Help Polycarp to determine if it is possible to organize the books in this balanced way, and if so, provide the number of books on each shelf. -----Input----- The first line contains two integers n and k (1 le k le n le 10^5). The second line contains n positive integer numbers a_1, a_2, dots, a_n (1 le a_i le 10^4), where a_i is the width of the i-th book. -----Output----- If the arrangement is possible, print \\"Yes\\" in the first line. In the second line, print k positive integers representing the number of books on each shelf such that the difference in the number of books between any two shelves is at most one. If the arrangement is not possible, print a single line \\"No\\". -----Examples----- Input 6 3 2 3 1 4 1 2 Output Yes 2 2 2 Input 7 3 1 1 1 1 1 1 1 Output Yes 3 2 2 Input 5 4 5 4 3 2 1 Output Yes 2 1 1 1 Input 4 5 1 2 3 4 Output No","solution":"def arrange_books(n, k, a): Returns whether it\'s possible to organize the books on shelves such that each shelf has at most one more book than any other shelf, and each shelf has at least one book, along with the distribution of books if possible. if k > n: return \\"No\\" min_books_per_shelf = n // k extra_books = n % k result = [min_books_per_shelf] * k for i in range(extra_books): result[i] += 1 return \\"Yes\\", result"},{"question":"# Chess Move Validator You\'ve been given a brief overview of the rules of chess and are to simulate a limited subset of these rules. Create a function `is_valid_chess_move(piece, start_position, end_position)` that determines if a move is valid for a given piece. The function should take the following arguments: 1. `piece`: A string, indicating one of the following pieces: \\"king\\", \\"queen\\", \\"rook\\", \\"bishop\\", \\"knight\\", \\"pawn\\". 2. `start_position`: A string, representing the current position on the board (e.g., \'e4\'). 3. `end_position`: A string, representing the new position on the board (e.g., \'e5\'). The chessboard is represented as an 8x8 grid of squares labeled \'a1\' to \'h8\'. The rules for moving pieces are as follows: - **King** can move one square in any direction. - **Queen** can move any number of squares in any direction. - **Rook** can move any number of squares horizontally or vertically. - **Bishop** can move any number of squares diagonally. - **Knight** moves in an L-shape: two squares in one direction and then one square perpendicular, or one square in one direction and then two squares perpendicular. - **Pawn** moves one square forward (towards the 8th rank for white, 1st rank for black). On its first move, a pawn can move two squares forward. Pawns cannot move backward. No need to account for the actual state of the board (like other pieces or checks), just focus on individual piece movement validity. Return `True` if the move is valid, and `False` otherwise. Example usage: ```python print(is_valid_chess_move(\\"king\\", \\"e4\\", \\"e5\\")) # True print(is_valid_chess_move(\\"queen\\", \\"d1\\", \\"h5\\")) # True print(is_valid_chess_move(\\"knight\\", \\"g1\\", \\"f3\\")) # True print(is_valid_chess_move(\\"pawn\\", \\"e2\\", \\"e4\\")) # True print(is_valid_chess_move(\\"bishop\\", \\"c1\\", \\"e3\\")) # False ```","solution":"def is_valid_chess_move(piece, start_position, end_position): Determines if a move is valid for a given chess piece. :param piece: str - The chess piece to move. :param start_position: str - The starting position in algebraic notation. :param end_position: str - The ending position in algebraic notation. :return: bool - True if the move is valid, otherwise False. def position_to_coords(pos): return ord(pos[0]) - ord(\'a\'), int(pos[1]) - 1 start_x, start_y = position_to_coords(start_position) end_x, end_y = position_to_coords(end_position) dx = end_x - start_x dy = end_y - start_y if piece == \'king\': return abs(dx) <= 1 and abs(dy) <= 1 elif piece == \'queen\': return dx == 0 or dy == 0 or abs(dx) == abs(dy) elif piece == \'rook\': return dx == 0 or dy == 0 elif piece == \'bishop\': return abs(dx) == abs(dy) elif piece == \'knight\': return (abs(dx) == 2 and abs(dy) == 1) or (abs(dx) == 1 and abs(dy) == 2) elif piece == \'pawn\': if start_y == 1 and dy == 2 and dx == 0: # initial double move for white return True return dx == 0 and dy == 1 return False"},{"question":"=====Function Descriptions===== array The array tool creates an ndarray from any object exposing the array interface, or from any nested sequence. import numpy a = numpy.array([1, 2, 3, 4, 5]) print a[1] #Output : 2 reshape The reshape tool gives a new shape to an array without changing its data. import numpy a = numpy.array([[1,2,3], [4,5,6]]) print numpy.reshape(a, (3, 2)) #Output : # [[1 2] # [3 4] # [5 6]] =====Problem Statement===== Given an array of shape NxM, your task is to read in an integer K and reshape the array into dimensions Kx(N*M//K). =====Input Format===== The first line contains the integer N, the number of rows in the array. The second line contains the integer M, the number of columns in the array. The next N lines contain M space-separated integers each, representing the elements of the array. The final line contains the integer K. =====Output Format===== Print the reshaped array such that it has dimensions Kx(N*M//K). If it is not possible to reshape the array to the specified dimensions, print \\"Cannot reshape\\".","solution":"import numpy as np def reshape_array(n, m, elements, k): if n * m % k != 0: return \\"Cannot reshape\\" else: flat_array = np.array(elements).flatten() reshaped_array = flat_array.reshape(k, n * m // k) return reshaped_array"},{"question":"Given a string s consisting of lowercase letters, return the first non-repeating character in it. If there is no such character, return an underscore (\'_\'). Example 1: Input: s = \\"abacabad\\" Output: \'c\' Explanation: The first non-repeating character is \'c\'. Example 2: Input: s = \\"abacabaabacaba\\" Output: \'_\' Explanation: Every character repeats more than once. Example 3: Input: s = \\"abcdefghijklmnopqrstuvwxyz\\" Output: \'a\' Explanation: The first non-repeating character is \'a\'. Constraints: 1 <= s.length <= 1000","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there is no such character, returns \'_\'. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"# Tree Traversal Binary trees are central to many algorithms and data structures. To test your understanding of tree traversals, consider the following task: Given a binary tree, return a list of values according to the **in-order traversal** of the tree. # Description - An in-order traversal visits the nodes of a binary tree in the following sequence: 1. Visit the left subtree 2. Visit the root node 3. Visit the right subtree # Input - A binary tree with `n` nodes where `1 <= n <= 1000`. # Output - An array of values derived from the in-order traversal of the binary tree. # Node Definition ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` # Example Given the following binary tree: ``` 1 2 / 3 ``` The in-order traversal of the above tree should return: `[1, 3, 2]` # Your Task Write a function, `inorderTraversal` that receives the root node of a binary tree and returns an array of values according to its in-order traversal. ```python def inorderTraversal(root: TreeNode) -> List[int]: # Your code goes here ```","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def inorderTraversal(root): Perform an in-order traversal of the binary tree. def traverse(node, result): if not node: return traverse(node.left, result) result.append(node.value) traverse(node.right, result) result = [] traverse(root, result) return result"},{"question":"You are given a binary tree in which each node contains a value. Design an algorithm to find all paths that sum to a given value. The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes). Example: Given the below binary tree and `sum = 22`, 5 / 4 8 / / 11 13 4 / / 7 2 5 1 Return: [ [5, 4, 11, 2], [5, 8, 4, 5] ] Explanation: There are two paths in the tree that sum to 22.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pathSum(root, sum): def dfs(node, current_path, current_sum): if not node: return # include the current node to the path current_path.append(node.val) current_sum += node.val # check if current_sum equals the desired sum and we\'re at the leaf node if current_sum == sum: paths.append(list(current_path)) # recursively call dfs on the left and right child dfs(node.left, current_path, current_sum) dfs(node.right, current_path, current_sum) # backtrack - remove the current node from the path current_path.pop() paths = [] dfs(root, [], 0) return paths"},{"question":"Write a function findNthPrime which takes an integer n as input and returns the nth prime number. For example, if n = 6, the function should return 13, since 13 is the 6th prime number. You should aim to create an efficient solution as n can be as large as 10,000. Remember that the first prime number (n = 1) is 2. Efficiency tip: The function should not check every number for primality. Instead, utilize the Sieve of Eratosthenes or another efficient algorithm to generate prime numbers up to a certain limit.","solution":"def findNthPrime(n): Returns the nth prime number. if n == 1: return 2 limit = 104729 # Arbitrarily large limit to ensure we generate enough primes for n <= 10000 sieve = [True] * (limit + 1) sieve[0] = sieve[1] = False primes = [] for num in range(2, limit + 1): if sieve[num]: primes.append(num) for multiple in range(num * num, limit + 1, num): sieve[multiple] = False if len(primes) >= n: break return primes[n - 1]"},{"question":"A bakery is keeping track of their daily sales which are stored in a list where each element represents the number of pastries sold for each type of pastry. They want to know how many types of pastries reached or exceeded a sales target `T` for the day. Write a function `count_successful_pastries(sales, T)` that takes a list `sales` of integers and an integer target `T`. The function should return the count of pastry types that sold at least `T` pastries. # Function Signature ```python def count_successful_pastries(sales: List[int], T: int) -> int: # Your code here ``` # Input - `sales` (List[int]): A list of integers representing the number of pastries sold for each type of pastry (1 <= len(sales) <= 10^5, 0 <= sales[i] <= 10^4). - `T` (int): An integer representing the sales target (0 <= T <= 10^4). # Output - (int): The count of pastry types that sold at least `T` pastries. # Example ```python sales = [50, 60, 70, 65, 30] T = 50 count_successful_pastries(sales, T) # Output: 4 ```","solution":"from typing import List def count_successful_pastries(sales: List[int], T: int) -> int: Returns the count of pastry types that sold at least T pastries. return sum(1 for sale in sales if sale >= T)"},{"question":"# Task Given an array of distinct integers, you are tasked with finding all unique triplets in the array which sum up to zero. # Example For `array = [-1, 0, 1, 2, -1, -4]`, the output should be `[[-1, 0, 1], [-1, -1, 2]]`. For `array = [0, 1, 1]`, the output should be `[]` (no three numbers sum to zero). For `array = [0, 0, 0]`, the output should be `[[0, 0, 0]]` (only one unique triplet which sums to zero). # Input/Output - `[input]` array of integers `arr` An array of `n` integers where `1 ≤ n ≤ 10^3` and all elements are distinct. - `[output]` an array of arrays An array containing all unique triplets that sum up to zero. Each triplet should be represented as an array of three integers. The order of the triplets does not matter, but the elements within each triplet should be in non-decreasing order.","solution":"def three_sum(arr): Given an array of distinct integers, finds all unique triplets in the array which sum up to zero. arr.sort() triplets = [] for i in range(len(arr) - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, len(arr) - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == 0: triplets.append([arr[i], arr[left], arr[right]]) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return triplets"},{"question":"You are given an array of integers. Your task is to return the sum of all the positive numbers in the array. If the array does not contain any positive numbers, return 0. ``` sum_positive_numbers([1, -4, 7, 12]) --> 20 sum_positive_numbers([-1, -4, -7, -12]) --> 0 ``` > Note: For this kata, assume if the input list is empty, return 0.","solution":"def sum_positive_numbers(arr): Returns the sum of all positive numbers in the array. If the array does not contain any positive numbers, returns 0. return sum(x for x in arr if x > 0)"},{"question":"You are given a list of integers. Write a function that returns a new list containing only the elements that appear more than once in the original list. The returned list should be sorted in ascending order and not contain any duplicates. Function Signature: ```python def find_duplicates(arr: List[int]) -> List[int]: pass ``` # Input - A list of integers, `arr`. Length of `arr` is between `1` and `10^5`. - Each integer in `arr` is between `-10^9` and `10^9`. # Output - A list of integers sorted in ascending order, containing only the elements that appear more than once in `arr`. # Example ```python find_duplicates([4, 3, 2, 7, 8, 2, 3, 1]) == [2, 3] find_duplicates([1, 2, 3, 4, 5, 6, 7]) == [] find_duplicates([10, 10, 10]) == [10] find_duplicates([-1, -2, -3, -1, -2, 1, 2, 3]) == [-2, -1] ```","solution":"from typing import List def find_duplicates(arr: List[int]) -> List[int]: Returns a list of integers from \'arr\' that appear more than once, sorted in ascending order, and without duplicates. from collections import Counter count = Counter(arr) duplicates = [item for item, freq in count.items() if freq > 1] return sorted(duplicates)"},{"question":"You are given a string s consisting only of lowercase English letters. Your task is to find the length of the smallest substring that contains all the distinct characters of the string s. -----Input----- The first and only line contains the string s (1 le |s| le 100,000). -----Output----- Output one integer, the length of the smallest substring of s that contains all the distinct characters of s. -----Example----- Input aabcbcdbca Output 4 Explanation: The smallest substring that contains all distinct characters is \\"dbca\\".","solution":"def smallest_substring_length(s): Returns the length of the smallest substring that contains all distinct characters of the input string s. if not s: return 0 distinct_characters = set(s) required_count = len(distinct_characters) unique_chars_window = {} left = 0 min_length = len(s) + 1 for right in range(len(s)): current_char = s[right] unique_chars_window[current_char] = unique_chars_window.get(current_char, 0) + 1 while len(unique_chars_window) == required_count: min_length = min(min_length, right - left + 1) left_char = s[left] unique_chars_window[left_char] -= 1 if unique_chars_window[left_char] == 0: del unique_chars_window[left_char] left += 1 return min_length"},{"question":"You have to write a function that takes a list of integers and returns the list of integers with duplicate elements removed. The order of elements in the returned list should be the same as in the input list, ensuring the first occurrence of each element is preserved. For example: - If the input list is `[1, 2, 3, 2, 1, 4, 5]`, the returned list should be `[1, 2, 3, 4, 5]`. - If the input list is `[4, 5, 4, 4, 7, 8, 8, 9]`, the returned list should be `[4, 5, 7, 8, 9]`. You need to create a function with the following signature: ```python def remove_duplicates(lst: list) -> list: # your code here ``` # Constraints - The input list will only contain integers. - The length of the list will be between 0 and 1000 (both inclusive).","solution":"def remove_duplicates(lst: list) -> list: Returns a list with duplicate integers removed while preserving the order of first occurrence. Parameters: lst (list): A list of integers which may contain duplicates. Returns: list: A list with duplicates removed. seen = set() result = [] for item in lst: if item not in seen: seen.add(item) result.append(item) return result"},{"question":"You are given a list of integers representing stock prices on consecutive days. You are allowed to complete at most one transaction (i.e., buy one and sell one share of the stock). Write a program to find the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0. -----Input----- - First Line contains an integer N (1 ≤ N ≤ 10^5), the number of days. - Second Line contains N integers, each representing the stock price on that day (1 ≤ price ≤ 10^4). -----Output----- A single integer representing the maximum profit you can achieve from a single transaction. -----Constraints----- - The function should run in O(N) time complexity. -----Example----- Input: 6 7 1 5 3 6 4 Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from a single buy and sell transaction. :param prices: List of integers representing the prices. :return: Integer representing the maximum profit. if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Given an array of integers, your task is to determine if the array contains an arithmetic progression. An arithmetic progression (AP) is a sequence of numbers such that the difference between any two consecutive elements is the same. If the array contains an arithmetic progression, return the common difference. If the array does not contain an arithmetic progression, return `None`. **Example:** ```python is_arithmetic_progression([1, 3, 5, 7, 9]) # Output: 2 is_arithmetic_progression([2, 4, 7, 10]) # Output: None is_arithmetic_progression([5, 5, 5, 5]) # Output: 0 ``` **Function Signature:** ```python def is_arithmetic_progression(arr: List[int]) -> Optional[int]: ``` **Input:** - `arr`: A list of integers, where `2 <= len(arr) <= 10^5` and `-10^9 <= arr[i] <= 10^9`. **Output:** - Return the common difference of the arithmetic progression if the array forms an AP. Otherwise, return `None`. **Requirements:** - The solution should run in linear time. - Do not modify the original input array.","solution":"from typing import List, Optional def is_arithmetic_progression(arr: List[int]) -> Optional[int]: Determine if the given list of integers is an arithmetic progression. Parameters: arr (List[int]): List of integers. Returns: Optional[int]: The common difference if the array forms an AP, otherwise None. if len(arr) < 2: return None # Check if difference between every consecutive elements is the same common_difference = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != common_difference: return None return common_difference"},{"question":"A number of students are competing in a programming contest. Each student is associated with a name and a unique ID number. After each round of the contest, the students\' scores are recorded. You need to track the students\' ranking based on their scores after each round. If two or more students have the same score, they should retain the relative order they had before the scores were updated. Write a program that does the following: 1. Adds a student with a unique name and ID. 2. Updates the score of a student after a round. 3. Outputs the current ranking of students based on their scores from highest to lowest. If two students have the same score, their relative order is preserved. ----- Input ----- The first line of the input contains an integer Q, denoting the number of queries. Each of the following Q lines represents a query. A query can be of the following types: 1. `1 name id` - Add a student with the given name and unique ID. The student starts with a score of 0. 2. `2 id score` - Update the score of the student with the given id by adding the score to their current score. 3. `3` - Output the current ranking of the students in the following format: - If there are N students, output exactly N lines. Each line should contain the name and id of a student at that rank, separated by a space. Students with higher scores are ranked higher. If two students have the same score, they retain their relative order. ----- Output ----- For each query of type 3, output N lines as described above. ----- Constraints ----- - 1 ≤ Q ≤ 100000 - 1 ≤ length of name ≤ 50 - 1 ≤ id ≤ 100000 - -100 ≤ score ≤ 100 ----- Example ----- Input: 7 1 Alice 1 1 Bob 2 2 1 50 2 2 50 3 2 2 -30 3 Output: Alice 1 Bob 2 Alice 1 Bob 2","solution":"class Student: def __init__(self, name, student_id): self.name = name self.id = student_id self.score = 0 class Contest: def __init__(self): self.students = [] self.id_to_student = {} def add_student(self, name, student_id): student = Student(name, student_id) self.students.append(student) self.id_to_student[student_id] = student def update_score(self, student_id, score): if student_id in self.id_to_student: self.id_to_student[student_id].score += score def get_ranking(self): self.students.sort(key=lambda x: (-x.score, x.name)) return [(student.name, student.id) for student in self.students] def process_queries(queries): contest = Contest() results = [] for query in queries: parts = query.split() if parts[0] == \'1\': _, name, student_id = parts contest.add_student(name, int(student_id)) elif parts[0] == \'2\': _, student_id, score = parts contest.update_score(int(student_id), int(score)) elif parts[0] == \'3\': ranking = contest.get_ranking() results.append(ranking) return results"},{"question":"Implement a function `longest_balanced_substring` that takes a string consisting of parentheses \'(\' and \')\' and returns the length of the longest balanced (well-formed) substring. A balanced parenthesis string is a string that can be properly opened and closed without mismatching. Examples: longest_balanced_substring(\\"(()())\\") returns 6 longest_balanced_substring(\\")()())\\") returns 4 longest_balanced_substring(\\"()(()\\") returns 2","solution":"def longest_balanced_substring(s): Returns the length of the longest balanced substring of parentheses. max_length = 0 stack = [-1] # Stack to store indices, initialized with -1 for i, char in enumerate(s): if char == \'(\': stack.append(i) # Push the index onto the stack else: stack.pop() # Pop the top element if stack: max_length = max(max_length, i - stack[-1]) else: stack.append(i) # If stack is empty, push current index return max_length"},{"question":"You\'ve started a garden and planted seeds of various types of fruits and vegetables. Each plant in your garden is represented by a character indicating its type. Your goal is to determine the minimal number of unique plant types that must be present to ensure a balanced diversity in your garden. Given a string S consisting of lowercase alphabet characters, where each character represents a type of plant, you need to find the minimum number of unique plant types required so that every unique character in the string has at least one occurrence. Examples: ```python balance_plants(\\"aabbcc\\") # returns 3 balance_plants(\\"aaaaaabbbcccc\\") # returns 3 balance_plants(\\"zxy\\") # returns 3 balance_plants(\\"zzzzzz\\") # returns 1 ``` Your task is to implement the function `balance_plants(S: str) -> int` where: - `S` (0 ≤ |S| ≤ 10^5): A string representing the garden with different types of plants. **Note**: If the length of the string is 0, return 0, as there are no plants in the garden.","solution":"def balance_plants(S: str) -> int: Returns the minimal number of unique plant types required to ensure every unique character in the string S has at least one occurrence. :param S: A string representing the garden with different types of plants. :return: An integer representing the minimal number of unique plant types required. if not S: return 0 return len(set(S))"},{"question":"In a city, certain areas are prone to frequent traffic jams. You are tasked with developing a system to navigate through the city efficiently. The city can be represented as a 2D grid where each cell contains a non-negative integer representing the time (in minutes) it takes to travel through that area. Your goal is to find the shortest possible time (in minutes) to travel from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the grid. You can only move up, down, left, or right from a given cell. You cannot move diagonally or move off the edges of the grid. Write a function `shortest_travel_time(grid)` that takes a 2D list `grid` where `grid[i][j]` is the time it takes to travel through the cell `(i, j)` and returns an integer representing the minimum time to travel from `(0, 0)` to `(n-1, m-1)`. If the grid is empty or if it is not possible to reach `(n-1, m-1)` from `(0, 0)`, return `-1`. # Examples: ``` shortest_travel_time([ [1, 3, 1], [1, 5, 1], [4, 2, 1] ]) => 7 shortest_travel_time([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) => 21 shortest_travel_time([ [1, 2], [1, 1] ]) => 3 shortest_travel_time([ [4, 9], [4, 8] ]) => 16 shortest_travel_time([]) => -1 ``` # Constraints: * The number of rows and columns in the grid will not exceed 100. * The time value in any cell will not exceed 1000.","solution":"import heapq def shortest_travel_time(grid): Returns the shortest possible time (in minutes) to navigate from the top-left corner (0,0) to the bottom-right corner (n-1, m-1) of the grid. if not grid or not grid[0]: return -1 n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Priority queue for Dijkstra\'s algorithm pq = [(grid[0][0], 0, 0)] # (cost, x, y) visited = [[False] * m for _ in range(n)] while pq: cost, x, y = heapq.heappop(pq) if x == n - 1 and y == m - 1: return cost if visited[x][y]: continue visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: heapq.heappush(pq, (cost + grid[nx][ny], nx, ny)) return -1"},{"question":"Parking Bill Calculator You parked your car in a parking lot and now you need to pay the bill. The parking lot charges based on the duration of the stay, and follows this billing scheme: - The first 30 minutes are free. - Each additional started hour costs `5`. - There is a `max` charge of `20` for a single day. Your task is to write a function that calculates the total bill for the parking duration. # Input - `enter`: a string in `HH:MM` format representing the time when you entered the parking lot. - `leave`: a string in `HH:MM` format representing the time when you left the parking lot. # Output - The total bill as an integer representing the cost in dollars. # Constraints - The input times are within the same day, i.e., `00:00 <= enter <= leave <= 23:59`. - The input times are valid 24-hour clock times. # Example ```python calculate_bill(\\"10:00\\", \\"13:21\\") # Output: 15 calculate_bill(\\"11:30\\", \\"12:40\\") # Output: 5 calculate_bill(\\"09:00\\", \\"18:00\\") # Output: 20 calculate_bill(\\"22:00\\", \\"23:30\\") # Output: 5 ``` # Note - In the first example, you stayed from 10:00 to 13:21, which is 3 hours and 21 minutes (201 minutes). Subtracted the first 30 minutes free, the remaining 171 minutes is counted as 3 started hours, thus the charge is 5 * 3 = 15. - In the second example, you stayed from 11:30 to 12:40, which is a total duration of 70 minutes. After the first 30 minutes, the remaining 40 minutes counts as 1 started hour, costing 5. - In the third example, the total duration exceeds any charges beyond the cap of 20. - In the last example, you stayed from 22:00 to 23:30, which is exactly 1 hour and 30 minutes after the first 30 minutes free, thus costing 5.","solution":"def calculate_bill(enter, leave): def time_to_minutes(time): hours, minutes = map(int, time.split(\':\')) return hours * 60 + minutes enter_minutes = time_to_minutes(enter) leave_minutes = time_to_minutes(leave) # Calculate total parked time in minutes total_time = leave_minutes - enter_minutes # Calculate bill considering the first 30 minutes are free if total_time <= 30: return 0 chargeable_time = total_time - 30 # Calculate started additional hours additional_hours = (chargeable_time + 59) // 60 # Calculate the total cost total_cost = additional_hours * 5 # Apply maximum charge cap of 20 return min(total_cost, 20)"},{"question":"Write a function `longest_arith_seq_length` that receives a list of integers and returns the length of the longest arithmetic subsequence in the list. An arithmetic subsequence is a subsequence that follows the property where the difference between consecutive elements is always the same. For example, in the list `[3, 6, 9, 12, 15]` the longest arithmetic subsequence is `[3, 6, 9, 12, 15]` of length 5 as the difference between successive elements is a constant 3. Consider the following constraints: - The length of the list will be between 1 and 1000. - The list elements are non-negative integers and will be less than or equal to 10^5. Example: Input: `[9, 4, 7, 2, 10]` Output: 3 Explanation: The longest arithmetic subsequence is `[4, 7, 10]` with a common difference of 3.","solution":"def longest_arith_seq_length(nums): if not nums: return 0 n = len(nums) if n == 1: return 1 dp = [{} for _ in range(n)] longest = 2 for i in range(n): for j in range(i): diff = nums[i] - nums[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 longest = max(longest, dp[i][diff]) return longest"},{"question":"Create a function that takes a non-negative integer `n` as input and returns a list of the first `n` Fibonacci numbers. Example: fibonacci_sequence(5) --> [0, 1, 1, 2, 3] The Fibonacci sequence is defined as follows: - The first number is 0. - The second number is 1. - Each subsequent number is the sum of the previous two numbers.","solution":"def fibonacci_sequence(n): Returns a list of the first n Fibonacci numbers. if n <= 0: return [] elif n == 1: return [0] fibs = [0, 1] while len(fibs) < n: fibs.append(fibs[-1] + fibs[-2]) return fibs"},{"question":"Alien Alphabet # Background On a distant planet called Alpharion, the inhabitants use an alien alphabet that is completely different from any Earth language. To facilitate communication with Earth, they have agreed on an intergalactic encoding scheme. This encoding scheme, called Alpharion Encodex, assigns each alien letter a unique integer value. These values range between 1 and 26, similar to the English alphabet where A=1, B=2, etc. # Problem Your task is to write a function that decodes a given string encoded with Alpharion Encodex. Each character in the string is represented by multiple space-separated integers, where the integers represent the position in the Alpharion alphabet. For example, the encoded string `\\"3 1 20\\"` would decode to the string `\\"CAT\\"`. # Input - A string `data` consisting of space-separated integers. Each integer is between 1 and 26 inclusive. # Output - A decoded string formed by converting each integer to its corresponding letter in the Alpharion alphabet. # Examples ``` Input: \\"20 5 1 13\\" Output: \\"TEAM\\" Input: \\"18 5 4\\" Output: \\"RED\\" Input: \\"8 15 16 5\\" Output: \\"HOPE\\" ``` # Note - The input string will always be valid and contain at least one integer. - The mapping of integers to the Alpharion alphabet follows the pattern where 1 = A, 2 = B, 26 = Z, and so on. # Your Mission Write a function `decode_alien_string(data)` that takes a string as described above and returns the decoded string. # Sample Function Signature ```python def decode_alien_string(data: str) -> str: # Your code here ```","solution":"def decode_alien_string(data: str) -> str: Decodes a string of space-separated integers in the range 1 to 26 to the corresponding characters in the Alpharion alphabet. :param data: A string of space-separated integers. :return: Decoded string of alphabets. # Split the input string into a list of integers nums = map(int, data.split()) # Convert each integer to the corresponding alphabet character decoded_chars = [chr(num + 64) for num in nums] # Join the list of characters into a decoded string and return it return \'\'.join(decoded_chars)"},{"question":"Given a list of integers, you are to determine whether the list contains any duplicate elements. Return true if any value appears at least twice in the list, and return false if every element is distinct. Example 1: Input: nums = [1,2,3,1] Output: true Explanation: The number 1 appears twice, so the function returns true. Example 2: Input: nums = [1,2,3,4] Output: false Explanation: The list contains no duplicates, so the function returns false. Example 3: Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true Explanation: The numbers 1, 3, 4, and 2 appear more than once, so the function returns true. Constraints: The number of elements in the list will be in the range [1, 10^5]. Each element in the list will be an integer in the range [-10^9, 10^9].","solution":"def contains_duplicate(nums): Determines whether the list contains any duplicate elements. Parameters: nums (list of int): List of integers to check. Returns: bool: True if any integer appears at least twice in the list, otherwise False. return len(nums) != len(set(nums))"},{"question":"Given an array of integers, return an array of the same length where each element at index i of the output array is the product of all the numbers in the original array except the one at i. You may assume that the input array does not contain any zeroes and has at least two elements. Example: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [5, 6] Output: [6, 5]","solution":"def product_except_self(nums): Given an array of integers, return an array of the same length where each element at index i of the output array is the product of all the numbers in the original array except the one at i. length = len(nums) output = [1] * length left_product = 1 for i in range(length): output[i] = left_product left_product *= nums[i] right_product = 1 for i in range(length - 1, -1, -1): output[i] *= right_product right_product *= nums[i] return output"},{"question":"Create a function that takes an integer array and returns an array containing the product of all elements except the one at each index. For example, given an array [1, 2, 3, 4], the function should return [24, 12, 8, 6]. Ensure that your function handles arrays that contain zeros correctly and efficiently. You are not allowed to use division in your solution. Examples: ```python productExceptSelf([1, 2, 3, 4]) == [24, 12, 8, 6] productExceptSelf([0, 4, 5]) == [20, 0, 0] ``` Happy coding!","solution":"def productExceptSelf(nums): Returns an array where each index contains the product of all elements except the one at the corresponding index in the input array. length = len(nums) answer = [1] * length # Initialize the answer array with ones # Calculate products of all elements to the left of each index left_product = 1 for i in range(length): answer[i] = left_product left_product *= nums[i] # Calculate products of all elements to the right of each index right_product = 1 for i in range(length - 1, -1, -1): answer[i] *= right_product right_product *= nums[i] return answer"},{"question":"Write a function that takes two strings as input and determines if one is a permutation of the other. The function should return `True` if one string is a permutation of the other, and `False` otherwise. For example: ```python is_permutation(\\"listen\\", \\"silent\\") == True is_permutation(\\"triangle\\", \\"integral\\") == True is_permutation(\\"apple\\", \\"pale\\") == False ```","solution":"def is_permutation(str1, str2): Determines if one string is a permutation of the other. Args: str1 (str): First string. str2 (str): Second string. Returns: bool: True if one string is a permutation of the other, False otherwise. # If the lengths are different, they cannot be permutations if len(str1) != len(str2): return False # Sort the strings; if they are permutations, sorted versions will be the same return sorted(str1) == sorted(str2)"},{"question":"In a faraway land, a king has a peculiar liking for palindromic numbers and prime numbers. He decides to invent a new kind of number which is both a palindrome and a prime. He calls these numbers \\"Prime Palindromes.\\" A number is said to be a palindrome if it reads the same forwards and backwards, for example, 121 or 1331. A number is said to be prime if it is greater than 1 and has no divisors other than 1 and itself. The king wants to find the smallest Prime Palindrome greater than or equal to a given number X. Your task is to write a program that helps the king find the smallest Prime Palindrome greater than or equal to X. -----Input----- The input consists of a single integer X (1 ≤ X ≤ 10^7). -----Output----- Print the smallest Prime Palindrome greater than or equal to X. -----Examples----- Input 31 Output 101 Input 100 Output 101 Input 131 Output 131 [Note] In the first sample, the number 101 is the smallest Prime Palindrome greater than or equal to 31. In the second sample, the number 101 is the smallest Prime Palindrome greater than or equal to 100. In the third sample, the number 131 is the smallest Prime Palindrome greater than or equal to 131 since it is both a palindrome and a prime number.","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): return str(n) == str(n)[::-1] def smallest_prime_palindrome(X): while True: if is_palindrome(X) and is_prime(X): return X X += 1"},{"question":"Imagine you are developing a library to aid with basic operations on sparse matrices. A sparse matrix is a matrix in which most of the elements are zero. Rather than storing all elements, it\'s more efficient to store only the non-zero elements along with their coordinates. You are tasked with implementing a function to add two such sparse matrices. The function will take two sparse matrices as inputs and return their sum, also in sparse matrix form. Each sparse matrix is represented as a list of tuples, where each tuple represents a non-zero element in the form `(row_index, column_index, value)`. Function signature: `def add_sparse_matrices(matrix1: List[Tuple[int, int, int]], matrix2: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int]]` # Constraints: - The matrices have the same dimensions. - The indices in the tuples are 0-based. - The input matrices are sorted by row index and then by column index. - If the sum at any position is 0, it should not be included in the result. # Example: ```python matrix1 = [ (0, 1, 3), (1, 0, 5), (2, 2, 7) ] matrix2 = [ (0, 1, 4), (1, 0, -5), (1, 2, 9) ] # Expected output: # [ # (0, 1, 7), # (1, 2, 9), # (2, 2, 7) # ] add_sparse_matrices(matrix1, matrix2) should return [(0, 1, 7), (1, 2, 9), (2, 2, 7)] ``` Write the function to correctly add the sparse matrices and return the result.","solution":"from typing import List, Tuple def add_sparse_matrices(matrix1: List[Tuple[int, int, int]], matrix2: List[Tuple[int, int, int]]) -> List[Tuple[int, int, int]]: Adds two sparse matrices and returns the result in sparse matrix format. dict_result = {} for row, col, value in matrix1: if value != 0: dict_result[(row, col)] = value for row, col, value in matrix2: if (row, col) in dict_result: dict_result[(row, col)] += value else: dict_result[(row, col)] = value result = [(row, col, value) for (row, col), value in dict_result.items() if value != 0] result.sort() return result"},{"question":"In object-oriented programming, classes can contain attributes and methods, and inheritance allows the creation of a new class from an existing class. You are tasked to create a simple class hierarchy depicting animals in a zoo. Each animal type will inherit from the base `Animal` class. The `Animal` class should contain: - An attribute `name` to store the animal\'s name. - An attribute `species` to store the animal\'s species. - A method `speak()` that returns a string indicating the sound the animal makes (based on its species). For example, if the species is \'Lion\', the sound is \'Roar\'. Specific animal classes should inherit from the `Animal` class and initialize the `name` and `species` accordingly: - `Lion` class inherits from `Animal` and has a species of \'Lion\'. The `speak()` method returns \'Roar\'. - `Elephant` class inherits from `Animal` and has a species of \'Elephant\'. The `speak()` method returns \'Trumpet\'. - `Snake` class inherits from `Animal` and has a species of \'Snake\'. The `speak()` method returns \'Hiss\'. Define this class structure in the programming language of your choice. Additionally, write a function `zoo_sounds(animals)` which takes a list of `Animal` objects and returns a list of strings representing the sounds of all animals in the zoo. # Requirements - Define the base class `Animal`. - Define the classes `Lion`, `Elephant`, and `Snake` inheriting from `Animal`. - Implement the `speak()` method for each specific animal. - Implement the function `zoo_sounds(animals)` that takes a list of `Animal` objects and returns a list of the sounds they make. # Examples ```python leo = Lion(name=\\"Leo\\") dumbo = Elephant(name=\\"Dumbo\\") kaa = Snake(name=\\"Kaa\\") animals = [leo, dumbo, kaa] print(zoo_sounds(animals)) # Output: [\'Roar\', \'Trumpet\', \'Hiss\'] ``` In this example: - We create instances of `Lion`, `Elephant`, and `Snake` with names \'Leo\', \'Dumbo\', and \'Kaa\', respectively. - The `zoo_sounds` function returns a list containing the sounds [\'Roar\', \'Trumpet\', \'Hiss\'], corresponding to the animals provided.","solution":"class Animal: def __init__(self, name, species): self.name = name self.species = species def speak(self): raise NotImplementedError(\\"Subclasses must implement this method\\") class Lion(Animal): def __init__(self, name): super().__init__(name, \'Lion\') def speak(self): return \'Roar\' class Elephant(Animal): def __init__(self, name): super().__init__(name, \'Elephant\') def speak(self): return \'Trumpet\' class Snake(Animal): def __init__(self, name): super().__init__(name, \'Snake\') def speak(self): return \'Hiss\' def zoo_sounds(animals): return [animal.speak() for animal in animals]"},{"question":"# Warehouse Robot Path Planning You are designing a path planning system for a warehouse robot. The robot needs to navigate a grid where some cells contain obstacles, and it must find the shortest path from a starting point to a target point. The robot can move up, down, left, or right but cannot move diagonally or through obstacles. Write a function shortest_path(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int that takes a 2D grid, starting coordinates, and target coordinates. The function should return the number of steps in the shortest path from start to target. If there is no valid path, return -1. The grid is represented by a 2D list where 0 represents a free space and 1 represents an obstacle. Assume all inputs are valid and the grid is at least 1x1. The start and target coordinates are within the grid bounds and are not obstacles. Examples: ```python grid1 = [ [0, 0, 0, 0], [1, 1, 0, 1], [0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0], ] start1, target1 = (0, 0), (4, 3) shortest_path(grid1, start1, target1) => 7 (path: (0,0)->(0,1)->(0,2)->(1,2)->(2,2)->(2,3)->(3,3)->(4,3)) grid2 = [ [0, 1, 0], [0, 1, 0], [0, 0, 0] ] start2, target2 = (0, 0), (2, 2) shortest_path(grid2, start2, target2) => 4 (path: (0,0)->(1,0)->(2,0)->(2,1)->(2,2)) grid3 = [ [0, 1], [1, 0] ] start3, target3 = (0, 0), (1, 1) shortest_path(grid3, start3, target3) => -1 (no valid path) ``` Have fun =)","solution":"from typing import List, Tuple from collections import deque def shortest_path(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int: Computes the shortest path in a grid with obstacles from start to target point. :param grid: A 2D list representing the grid, where 0 is a free space and 1 is an obstacle. :param start: A tuple (x, y) representing the starting coordinates. :param target: A tuple (x, y) representing the target coordinates. :return: An integer representing the number of steps in the shortest path or -1 if no valid path exists. rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(start[0], start[1], 0)]) # store x, y, and number of steps visited = set((start[0], start[1])) while queue: x, y, steps = queue.popleft() if (x, y) == target: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # if no path is found"},{"question":"[A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). In a coding context, we are interested in finding the longest palindrome substring within a given string. A substring is a contiguous sequence of characters within a string.] -----Input----- The first line contains a single integer T, the number of test cases. The subsequent T lines each contain a non-empty string S composed of lowercase English letters. -----Output----- For each test case, output the length of the longest palindromic substring for the given string S. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 10,000 -----Example----- Input: 3 babad cbbd a Output: 3 2 1 -----Explanation----- For the first test case, the longest palindromic substring is \\"bab\\" or \\"aba\\" with length 3. For the second test case, the longest palindromic substring is \\"bb\\" with length 2. For the third test case, the longest palindromic substring is \\"a\\" with length 1.","solution":"def longest_palindrome_length(s: str) -> int: Returns the length of the longest palindromic substring in a given string s. n = len(s) if n < 2: return n start, max_length = 0, 1 dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True for end in range(1, n): for start in range(end): if s[start] == s[end]: if end - start == 1 or dp[start + 1][end - 1]: dp[start][end] = True max_length = max(max_length, end - start + 1) return max_length def process_test_cases(input_data): test_cases = input_data.strip().split(\'n\') T = int(test_cases[0]) results = [] for i in range(1, T + 1): s = test_cases[i].strip() results.append(longest_palindrome_length(s)) return results"},{"question":"You are designing a warehouse management system where different robots are responsible for moving boxes to different locations within the warehouse. Each robot can pick up one box at a time and move it to a specified location. Task: You must write a function `moveBoxes` that takes in a list of tuples representing the robots\' instructions. Each tuple contains three elements: the robot\'s current position, the box\'s current position, and the destination position for the box. The robots can only move boxes that are within a specific radius from their current position. The function should return a dictionary that shows the final destination of each box. If a robot cannot move a box because it\'s outside its radius, that box remains in its current position. Here\'s a representation of the robots\' and boxes\' positions: - Each position is represented as a tuple (x, y) - The radius within which a robot can move a box is given as 5 units (euclidean distance) Example instructions list: `instructions = [((0, 0), (1, 1), (5, 5)), ((2, 2), (6, 6), (7, 7)), ((3, 3), (4, 4), (8, 8))]` Function prototype: `moveBoxes(instructions)` Example: 1. `moveBoxes([((0, 0), (1, 1), (5, 5)), ((2, 2), (6, 6), (7, 7)), ((3, 3), (4, 4), (8, 8))])` should output `{(1, 1): (5, 5), (6, 6): (6, 6), (4, 4): (8, 8)}` Explanation: - For the instruction `((0, 0), (1, 1), (5, 5))`, the distance between (0, 0) and (1, 1) is less than 5, so the box at (1, 1) is moved to (5, 5). - For the instruction `((2, 2), (6, 6), (7, 7))`, the distance between (2, 2) and (6, 6) is greater than 5, so the box at (6, 6) remains at its current position. - For the instruction `((3, 3), (4, 4), (8, 8))`, the distance between (3, 3) and (4, 4) is less than 5, so the box at (4, 4) is moved to (8, 8). If there are any duplicate box positions in the instructions list, assume that each instruction is independent of the others and execute them sequentially. Feel free to assume that no invalid coordinates will be given. The distance calculation uses the Euclidean distance formula.","solution":"import math def moveBoxes(instructions): def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) final_positions = {} for robot_pos, box_pos, dest_pos in instructions: if euclidean_distance(robot_pos, box_pos) <= 5: final_positions[box_pos] = dest_pos else: final_positions[box_pos] = box_pos return final_positions"},{"question":"Given a string **s**, return the number of unique characters in **s**. Write a function that takes **s** as input and outputs the count of unique characters. Assume the input string contains only lowercase alphabetical characters and can be very large.","solution":"def count_unique_characters(s): Returns the number of unique characters in the string s. return len(set(s))"},{"question":"You are given an array of non-negative integers where each element represents the amount of water a bucket can hold. The array is fixed in such a way that each bucket is at a certain elevation above the ground. Write a program to calculate the maximum amount of water that can be trapped between the buckets after it rains. Example 1: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The total water trapped is 6 units. Example 2: Input: [4,2,0,3,2,5] Output: 9 Explanation: The total water trapped is 9 units. Note: - The value at each index of the array represents the height of the bucket at that position. - The water trapped cannot exceed the height of the shortest bucket between two buckets.","solution":"def trap(height): Calculate the total amount of water that can be trapped. :param height: List[int] :return: int if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left max for each index left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right max for each index right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate water trapped at each index for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"You have been hired as a software engineer at a theme park to optimize the ride scheduling system. Each ride has a designated start time and end time, and visitors can only take one ride at a time. Given a list of rides with their start and end times, determine the maximum number of rides a visitor can take in a day. Example 1: Input: rides = [[1, 3], [2, 4], [3, 5]] Output: 2 Explanation: The visitor can take the 1st ride (1, 3) and then the 3rd ride (3, 5). Example 2: Input: rides = [[0, 1], [3, 5], [4, 8], [10, 11]] Output: 3 Explanation: The visitor can take the 1st ride (0, 1), the 2nd ride (3, 5) and the 4th ride (10, 11). Constraints: 1 <= rides.length <= 100 0 <= rides[i][0] < rides[i][1] <= 1000","solution":"def max_rides(rides): Determines the maximum number of non-overlapping rides a visitor can take in a day. Args: rides (List[List[int]]): List of rides with their start and end times. Returns: int: Maximum number of rides a visitor can take in a day. # Sort rides based on their end times rides.sort(key=lambda x: x[1]) # Initialize variables count = 0 last_end_time = 0 for start, end in rides: if start >= last_end_time: # Take this ride count += 1 last_end_time = end return count"},{"question":"Bill is a developer who loves crafting interesting patterns with code. One day, he decided to create a zigzag pattern from a given string. The zigzag pattern is created by writing the characters of the string in a zigzag fashion on a given number of rows and reading them row by row. For example, the string \\"PAYPALISHIRING\\" with 3 rows, looks like this in a zigzag pattern: ``` P A H N A P L S I I G Y I R ``` Thus, the zigzag conversion of \\"PAYPALISHIRING\\" is \\"PAHNAPLSIIGYIR\\". -----Input:----- - A single string s which denotes the input string. - An integer numRows which denotes the number of rows. -----Output:----- - Print the resulting zigzag pattern as a single string. -----Constraints:----- - 1 leq Length of string s leq 10^4 - 1 leq numRows leq 1000 -----Sample Input:----- ``` PAYPALISHIRING 3 ``` -----Sample Output:----- ``` PAHNAPLSIIGYIR ```","solution":"def convert(s: str, numRows: int) -> str: Converts a string into a zigzag pattern given a number of rows and reads row by row. :param s: The input string. :param numRows: The number of rows for the zigzag pattern. :return: The resulting string after zigzag conversion. if numRows == 1 or numRows >= len(s): return s rows = [\'\'] * numRows current_row, step = 0, 1 for char in s: rows[current_row] += char if current_row == 0: step = 1 elif current_row == numRows - 1: step = -1 current_row += step return \'\'.join(rows)"},{"question":"You are given a list of integers representing an elevation map where the width of each bar is 1. Write a function to compute how much water it is able to trap after raining. The elevation map is given as a list of non-negative integers. Calculate the maximum amount of water that can be trapped. Example: Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (represented by array [0,1,0,2,1,0,1,3,2,1,2,1]) is illustrated below, where black bars are the elevation and blue sections represent water trapped: ``` # # # # # # # # # ``` The total amount of trapped water in this elevation map is 6 units, divided into the following slots: - 1 unit between elevations 1 and 2. - 1 unit between elevations 2 and 3. - 4 units between elevations 3 and 3. You may assume the list has at least one element and will not exceed 100,000 elements in length. Function Signature: ```python def trap(height: List[int]) -> int: pass ``` Note: - It is essential to approach this problem with an optimized solution to handle the upper constraints efficiently.","solution":"from typing import List def trap(height: List[int]) -> int: Calculate the amount of water that can be trapped after raining. Args: height : List[int] : A list of non-negative integers representing the elevation map. Returns: int: The total amount of water trapped. if not height: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water = 0 while left < right: if left_max < right_max: left += 1 left_max = max(left_max, height[left]) water += left_max - height[left] else: right -= 1 right_max = max(right_max, height[right]) water += right_max - height[right] return water"},{"question":"Write a function that takes in a string of space-separated integers and returns a string where each integer is replaced by its immediate greater neighbor\'s value. If there is no greater neighbor for an integer, it should be replaced by -1. The length of the output string should be the same as the input string. Example ----- `\\"1 3 4 2\\"` becomes `\\"3 4 -1 3\\"` Another example ----- `\\"10 20 5 3 15\\"` becomes `\\"20 -1 15 15 -1\\"` Note --- - Each integer in the input string should be treated individually. - If there are multiple greater neighbors, choose the first one while traversing from left to right. - Maintain the order of replacing the values without changing the structure of the string.","solution":"def replace_with_greater_neighbors(s): Takes in a string of space-separated integers and returns a string where each integer is replaced by its immediate greater neighbor\'s value. If there is no greater neighbor, it should be replaced by -1. nums = list(map(int, s.split())) result = [] for i in range(len(nums)): replaced = False for j in range(i + 1, len(nums)): if nums[j] > nums[i]: result.append(nums[j]) replaced = True break if not replaced: result.append(-1) return \' \'.join(map(str, result))"},{"question":"A river navigational system requires assistance in positioning buoys. Design a program to determine distinct positions based on given guidelines. Your program should help to place buoys by calculating their positions on a grid. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case contains two integers N and M, representing the dimensions of the grid (rows and columns). -----Output:----- For each test case, output the grid with specific buoy positions, each marked by a unique sequential number starting from 1. The buoys must be placed such that: 1. Each row and each column must not contain more than one buoy. 2. Positions of the buoys should be as close to the main diagonal (top-left to bottom-right) of the grid as possible. -----Constraints----- - 1 leq T leq 50 - 1 leq N, M leq 20 -----Sample Input:----- 2 3 3 4 5 -----Sample Output:----- 1 _ _ _ 2 _ _ _ 3 1 _ _ _ _ _ 2 _ _ _ _ _ 3 _ _ _ _ _ 4 _ -----EXPLANATION:----- In the first test case, buoys are placed on the diagonal of a 3x3 grid. In the second test case, buoys are placed as close as possible to the main diagonal of a 4x5 grid, without repeating any row or column.","solution":"def place_buoys(test_cases): results = [] for N, M in test_cases: grid = [[\'_\' for _ in range(M)] for _ in range(N)] for i in range(min(N, M)): grid[i][i] = str(i + 1) # place buoy in diagonal positions as much as N and M allows result = \\"n\\".join(\\" \\".join(row) for row in grid) results.append(result) return results def format_output(results): output = \\"nn\\".join(results) return output def main(T, dimensions): results = place_buoys(dimensions) output = format_output(results) return output"},{"question":"Given an integer `n`, return `True` if `n` can be expressed as the sum of two or more consecutive positive integers; otherwise, return `False`. **Note**: big inputs will be tested. Examples: For `n = 15`, the possible consecutive sums are `[1+2+3+4+5]`, `[4+5+6]`, and `[7+8]`. All of these expressions add up to 15, so return `True`. For `n = 10`, the possible consecutive sum is `[1+2+3+4]`, which adds up to 10, so return `True`. For `n = 8`, there are no consecutive integer sums that equal 8, so return `False`.","solution":"def can_be_expressed_as_sum_of_consecutive_integers(n): Returns True if n can be expressed as the sum of two or more consecutive positive integers. # The idea is to find if there exist k consecutive integers whose sum is n. # The sum of k consecutive integers starting from m is: m + (m+1) + (m+2) + ... + (m+k-1). # This can be simplified to k * m + k * (k-1) / 2 == n # or, k * (2 * m + k - 1) == 2 * n # => 2*n = k*(2*m + k - 1) for k in range(2, int((2*n)**0.5) + 1): if (2 * n) % k == 0: if ((2 * n // k) - k + 1) % 2 == 0: return True return False"},{"question":"You are given an array of integers representing the heights of blocks placed in a histogram. Your task is to find the area of the largest rectangle that can be formed within the bounds of the histogram. The heights of the blocks are stored in an array `heights` where each element represents the height of a block in the histogram. # Example Given the heights array: ``` heights = [2, 1, 5, 6, 2, 3] ``` The largest rectangle that can be formed has an area of `10`. # Constraints - You may assume that the input array `heights` will have at least one element, and it will consist of non-negative integers. Write a function that takes `heights` as an input and returns the area of the largest rectangle that can be formed. # Function Signature ```python def largest_rectangle_area(heights: List[int]) -> int: # Your code here ``` - Input: A list of integers `heights` `[h1, h2, h3, ..., hn]` - Output: An integer representing the area of the largest rectangle. # Notes - Consider edge cases such as: - All heights being the same. - Heights having a single peak or valley. - Very small and very large arrays.","solution":"from typing import List def largest_rectangle_area(heights: List[int]) -> int: Function to find the area of the largest rectangle that can be formed within the bounds of the histogram represented by heights. max_area = 0 stack = [] # stack to keep track of indices for i, h in enumerate(heights): # Process all bars before the current one in stack to process possible rectangles while stack and heights[stack[-1]] >= h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) # Process remaining bars in stack while stack: height = heights[stack.pop()] width = len(heights) if not stack else len(heights) - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"A farmer has a rectangular field and is facing a unique problem. He needs to plant trees along the boundaries of the field. The field has a length of `l` units and a width of `w` units. He needs to plant a total of `n` trees such that the trees are evenly spaced along the perimeter of the field. The trees should be planted starting at the bottom-left corner of the field and proceed clockwise around the perimeter. However, if the number of trees required does not divide the boundary length exactly, the farmer won\'t be able to plant the trees in a perfectly even manner. The farmer wants to know, in such cases, what is the minimum distance between any two consecutive trees if they are to be planted as evenly as possible. Formally, given `l`, `w` (dimensions of the field) and `n` (number of trees), find the minimum distance between two consecutive trees when they are planted evenly along the perimeter. -----Input----- The first line contains a single integer `t`, corresponding to the number of test cases. Each of the next `t` lines contains three space-separated integers `l`, `w`, and `n`. -----Output----- For each test case, output a single number representing the minimum distance between any two consecutive trees, rounded to two decimal places. -----Constraints----- - 1 leq l, w leq 10^4 - 1 leq n leq 10^6 -----Sample Input:----- 2 10 5 30 15 5 12 -----Sample Output:----- 1.00 5.00 -----Explanation:----- For the first test case, the perimeter of the field is 30 units (2*(10+5)). With 30 trees, they will be planted 1 unit apart each. For the second test case, the perimeter is 40 units. With 12 trees, the minimum distance between any two consecutive trees would be around 3.33 units. But since we are to plant the trees as evenly as possible, 5.00 units will be the minimum distance.","solution":"def minimum_distance(l, w, n): perimeter = 2 * (l + w) min_distance = perimeter / n return round(min_distance, 2) def solve(test_cases): results = [] for l, w, n in test_cases: results.append(minimum_distance(l, w, n)) return results"},{"question":"Given a list of integers, write a function that returns all subsets of the list where the sum of the subset equals a given target value. The subsets should be returned as a list of lists, with each subset in increasing order. The list of subsets themselves should also be sorted in increasing lexicographic order. # Function Signature ```python def find_subsets_with_sum(nums: List[int], target: int) -> List[List[int]]: pass ``` # Input - `nums` (List[int]): A list of integers. Each integer is unique. - `target` (int): The target sum for the subsets. # Output - List[List[int]]: A list of all subsets of the input list `nums` where the sum of the subset equals `target`. # Example ```python find_subsets_with_sum([1, 2, 3, 4, 5], 5) # Expected output: # [[1, 4], [2, 3], [5]] find_subsets_with_sum([10, 1, 2, 7, 6, 5], 8) # Expected output: # [[1, 2, 5], [1, 7], [2, 6]] find_subsets_with_sum([3, 34, 4, 12, 5, 2], 9) # Expected output: # [[2, 3, 4], [4, 5]] ``` # Notes - `nums` may contain zero or more integers. - Each integer in `nums` is unique. - The solution should handle lists of varying lengths and integer values efficiently. - Implementations should avoid duplicate subsets in the output and ensure all potential subsets are considered.","solution":"from typing import List def find_subsets_with_sum(nums: List[int], target: int) -> List[List[int]]: def backtrack(start, path, target): if target == 0: res.append(path) return for i in range(start, len(nums)): if nums[i] > target: break backtrack(i + 1, path + [nums[i]], target - nums[i]) nums.sort() res = [] backtrack(0, [], target) return res"},{"question":"A popular social media app, ShareIt, wants to implement a new feature that allows users to search for friends based on a unique username. Each user\'s username is a string consisting of lowercase English letters only. Given a list of usernames and a search query, the app wants to find all usernames that contain the search query as a substring. Write a function `searchUsernames` that takes an array of usernames and a query string, and returns an array of usernames that contain the query string as a substring. The usernames in the result should appear in the same order as they are in the input list. If no usernames match the query, return an empty array. **Function Signature:** ```python def searchUsernames(usernames: List[str], query: str) -> List[str]: pass ``` # Input - `usernames`: A list of strings, where each string is a username (1 <= len(usernames) <= 10^6, 1 <= len(username) <= 100). - `query`: A string, which is the search query (1 <= len(query) <= 100). # Output - A list of strings, where each string is a username containing the query as a substring. # Example ```python usernames = [\\"alice\\", \\"bob\\", \\"charlie\\", \\"david\\", \\"eve\\"] query = \\"a\\" searchUsernames(usernames, query) # Output: [\\"alice\\", \\"charlie\\", \\"david\\"] ``` # Constraints - The input list of usernames may be very large, so consider an efficient approach. - The search should be case-sensitive. - You may use built-in string functions for handling substrings. Implement the `searchUsernames` function to match the described behavior.","solution":"from typing import List def searchUsernames(usernames: List[str], query: str) -> List[str]: Given a list of usernames and a search query, returns a list of usernames that contain the query as a substring. return [username for username in usernames if query in username]"},{"question":"Alice is organizing a coding competition where each participant is required to solve a set of problems. Each problem can be classified into one of three difficulty levels: easy, medium, or hard. To ensure a balanced competition, Alice wants each participant to solve an equal number of problems from each difficulty level. Given the constraints of each competition, determine whether it is possible for Alice to distribute the problems as required. You are given three lists representing the difficulties of the problems available, the problems assigned, and the problems remaining to be assigned. Each problem is represented by an integer: `1` for easy, `2` for medium, and `3` for hard. From the provided lists, determine if Alice can distribute the problems such that each participant receives an equal number of each difficulty level. -----Input----- - The first line of the input contains an integer `N` representing the number of participants. - The second line contains three space-separated integers representing the counts of easy problems available, medium problems available, and hard problems available. - The third line contains one integer `P` representing the total number of problems required to be assigned to each participant. -----Output----- Print \\"yes\\" if it is possible to distribute the problems as required; otherwise, print \\"no\\". -----Constraints----- - `1 <= N <= 100` - `0 <= count of problems of each category <= 100` - `1 <= P <= 300` - Each participant must solve exactly `P` problems. - Each participant must receive an equal number of easy, medium, and hard problems. -----Example Input----- 3 5 10 9 3 -----Example Output----- yes -----Explanation----- Example case: Alice needs to ensure each participant gets 3 problems, with one problem from each difficulty level (1 easy, 1 medium, 1 hard). Given the total number of problems (5 easy, 10 medium, 9 hard), it is possible to assign the problems as follows: - Participant 1: 1 easy, 1 medium, 1 hard - Participant 2: 1 easy, 1 medium, 1 hard - Participant 3: 1 easy, 1 medium, 1 hard Since we have enough problems from each difficulty level to satisfy the requirements of all participants, the answer is \\"yes\\".","solution":"def can_distribute_problems(N, available_problems, P): Determine if problems can be distributed equally among participants. Parameters: N (int): Number of participants available_problems (tuple): Counts of easy, medium, and hard problems P (int): Number of problems per participant Returns: str: \\"yes\\" if it\'s possible to distribute problems equally, otherwise \\"no\\" easy, medium, hard = available_problems # Each participant needs an equal number of easy, medium, and hard problems required_problem_counts = [P // 3] * 3 # Check if P is evenly divisible by 3 for each participant if P % 3 != 0: return \\"no\\" # Check if we have enough problems of each type required_easy = N * required_problem_counts[0] required_medium = N * required_problem_counts[1] required_hard = N * required_problem_counts[2] if easy >= required_easy and medium >= required_medium and hard >= required_hard: return \\"yes\\" else: return \\"no\\""},{"question":"Given a list of integers `arr` and an integer `x`, find if there exists a pair of elements in the list whose difference is exactly `x`. If such a pair exists, return `True`. Otherwise, return `False`. **Example:** ```python pair_difference([5, 10, 15, 20], 5) == True pair_difference([5, 10, 15, 20], 4) == False pair_difference([1, 8, 3, 4], 4) == True pair_difference([1, 5, 9], 3) == False ``` **Function Signature:** ```python def pair_difference(arr: List[int], x: int) -> bool: pass ``` **Note:** - Your solution should have a time complexity better than O(n^2). - You may assume that integers in `arr` are unique and the list is non-empty.","solution":"def pair_difference(arr, x): Returns True if there exists a pair of elements in the list whose difference is exactly x. elements_set = set(arr) for num in arr: if (num + x) in elements_set or (num - x) in elements_set: return True return False"},{"question":"Paths in a Grid Given an MxN grid, where each cell can either be empty (\'.\') or blocked (\'#\'), write a function to calculate the number of unique paths from the top-left corner to the bottom-right corner. You can only move right or down at each step. # Examples **Example 1:** ``` Grid: [ [\'.\', \'.\', \'.\', \'#\'], [\'.\', \'#\', \'.\', \'.\'], [\'#\', \'.\', \'.\', \'.\'], [\'.\', \'.\', \'#\', \'.\'] ] Function signature: def count_paths(grid: List[List[str]]) -> int *Answer: 2* ``` Explanation: 1. Right -> Right -> Down -> Down -> Down -> Right. 2. Down -> Down -> Right -> Right -> Right -> Down. **Example 2:** ``` Grid: [ [\'.\', \'#\'], [\'#\', \'.\'] ] Function signature: def count_paths(grid: List[List[str]]) -> int *Answer: 0* ``` # Notes - Assume M and N can be any integer from 1 to 100. - The grid is represented as a list of lists of characters. - Return 0 if there is no possible path from the top-left to the bottom-right corner. - The starting point (top-left corner) is always empty (\'.\'), as is the ending point (bottom-right corner).","solution":"from typing import List def count_paths(grid: List[List[str]]) -> int: Returns the number of unique paths from the top-left to the bottom-right corner of the grid. if not grid or grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return 0 M, N = len(grid), len(grid[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = 1 # Start at the top-left corner for r in range(M): for c in range(N): if grid[r][c] == \'#\': dp[r][c] = 0 else: if r > 0: dp[r][c] += dp[r-1][c] if c > 0: dp[r][c] += dp[r][c-1] return dp[-1][-1]"},{"question":"You are a programmer on a mission to retrieve ancient data from an abandoned server room. The room contains an n × n grid of lockers, each potentially containing a storage unit. Each locker is identified by its row and column in the grid, both ranging from 1 to n. To retrieve the data, you must unlock exactly k storage units. However, there is a catch: unlocking a storage unit triggers a corrupted security system that spreads to its neighboring lockers (up, down, left, right) if they contain storage units as well. This process continues until there are no more neighboring units to corrupt. Your goal is to determine if it is possible to unlock exactly k storage units in such a way that you can contain the corruption and prevent it from spreading to any additional storage units. The following picture illustrates an initial configuration, where lockers with storage units are marked with \'1\', and empty lockers are marked with \'0\' : [Example Image: Initial Configuration] To achieve your objective, you need to: 1. Place exactly k storage units on the grid. 2. Ensure that after unlocking one storage unit, the corruption does not spread to more than k-1 other units, potentially containing the corruption. # Input The first line consists of two integers n and k, denoting the size of the grid and the exact number of storage units to be unlocked. There will be precisely one test case for this problem: n (1 ≤ n ≤ 50) and k (1 ≤ k ≤ n*n). Example input: 5 5 # Output Output n lines, each containing n characters — the j-th character of the i-th line represents the content of the locker at the i-th row and the j-th column, and should be either: \'1\': a locker with a storage unit. \'0\': an empty locker. Then, output two integers r and c (1 ≤ r, c ≤ n) on the next line — this means that the locker you unlock first is located at the r-th row from above and the c-th column from the left. This locker must contain a storage unit. If there are multiple solutions, you may output any of them. # Examples Input: 5 5 Output: 10000 01000 00100 00010 00001 1 1 Note Here is a simulation for the example provided: ``` Initial configuration: 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 Unlock locker at (1, 1): The corruption only affects the locker itself, containing the corruption to exactly 1 unit which satisfies our requirement of unlocking exactly k storage units. ```","solution":"def create_grid_and_start(n, k): Creates an n x n grid and specifies a starting point (r, c) such that exactly k storage units can be unlocked without spreading corruption beyond k units. grid = [[\'0\'] * n for _ in range(n)] storage_units = k # Start placing \'1\'s in the diagonal until we have placed k storage units for i in range(n): if storage_units > 0: grid[i][i] = \'1\' storage_units -= 1 else: break # The starting point will be the first \'1\' on the diagonal start_row, start_col = 1, 1 return grid, start_row, start_col # Function to format the output def format_output(grid, r, c): output = \\"n\\".join([\\"\\".join(row) for row in grid]) output += f\\"n{r} {c}\\" return output # Example function to use both functions and display the result def place_and_unlock(n, k): grid, r, c = create_grid_and_start(n, k) return format_output(grid, r, c)"},{"question":"The instructor has given a project where students are assigned the task of creating a sequence. The sequence should be generated based on the input number N provided by the instructor. Each sequence should follow a specific pattern for better understanding and organization of data. -----Input:----- - First line will contain P, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the following pattern: Start with a sequence of N numbers. For each number in the sequence, replace it with the sum of its digits until it is a single digit. List each intermediate transformation step on a new line. -----Constraints----- - 1 leq P leq 50 - 1 leq N leq 50 -----Sample Input:----- 3 3 5 7 -----Sample Output:----- 3 3 5 5 7 7 -----EXPLANATION:----- In the sequence generation: - For N = 3, the sequence is [1, 2, 3]. Each number is already a single digit. - For N = 5, the sequence is [1, 2, 3, 4, 5]. Each number is already a single digit. - For N = 7, the sequence is [1, 2, 3, 4, 5, 6, 7]. Each number is already a single digit. This will help students comprehend sequences and transformations in an organized manner.","solution":"def digit_sum(n): while n >= 10: n = sum(int(digit) for digit in str(n)) return n def generate_sequence(P, test_cases): result = [] for N in test_cases: for i in range(1, N+1): result.append(digit_sum(i)) result.append(\\"\\") # for separating different test case results return result # Example usage # P = 3 # test_cases = [3, 5, 7] # print(generate_sequence(P, test_cases))"},{"question":"Given a positive integer `n`, generate all valid combinations of `n` pairs of parentheses. Valid means that each opening parenthesis has a corresponding closing parenthesis and they are balanced. For example, given `n = 3`, the output would be ``` [ \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\" ] ``` Your task is to create a function \\"generateParentheses()\\" that takes in the integer `n` as its argument and returns an array of all valid combinations of parentheses. Note: The returned array does not need to be sorted and can contain the parentheses combinations in any order.","solution":"def generateParentheses(n): Generates all combinations of n pairs of parentheses. :param n: Number of pairs of parentheses :return: List of valid combinations of n pairs of parentheses result = [] def backtrack(current, openCount, closeCount): if len(current) == 2 * n: result.append(current) return if openCount < n: backtrack(current + \'(\', openCount + 1, closeCount) if closeCount < openCount: backtrack(current + \')\', openCount, closeCount + 1) backtrack(\\"\\", 0, 0) return result"},{"question":"Given a grid with `m` rows and `n` columns, write a function to determine the number of islands. An island is defined as a group of connected \'1\'s (representing land) surrounded by \'0\'s (representing water). You can assume all four edges of the grid are surrounded by water. An island is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function `numIslands(grid)` that takes a 2D list representing the grid and returns the number of islands. **Example:** ```python grid = [ [\'1\',\'1\',\'0\',\'0\',\'0\'], [\'1\',\'1\',\'0\',\'0\',\'0\'], [\'0\',\'0\',\'1\',\'0\',\'0\'], [\'0\',\'0\',\'0\',\'1\',\'1\'] ] numIslands(grid) -> 3 ``` **Constraints:** - `m == grid.length` - `n == grid[i].length` - `1 <= m, n <= 300` - `grid[i][j]` is \'0\' or \'1\'","solution":"def numIslands(grid): if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # mark as visited dfs(grid, i + 1, j) dfs(grid, i - 1, j) dfs(grid, i, j + 1) dfs(grid, i, j - 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 dfs(grid, i, j) return count"},{"question":"Implement a function that takes a positive integer and returns a string representing the number in Roman numerals. The function should adhere to the following conventions: + Roman numerals are represented by the following symbols: I, V, X, L, C, D, M. + Numbers are formed by combining symbols together and adding their values. + Typically, the symbols are written from largest to smallest from left to right. However, there are exceptions where a smaller numeral appears before a larger numeral to indicate subtraction. **Constraints:** + The input integer will be between 1 and 3999. **Example:** ``` 1 --> \\"I\\" 4 --> \\"IV\\" 99 --> \\"XCIX\\" 3999 --> \\"MMMCMXCIX\\" ```","solution":"def int_to_roman(num): Convert an integer to a Roman numeral. :param num: The integer number to convert (1 <= num <= 3999) :return: A string representing the Roman numeral. # Define the mapping of integers to Roman numeral strings. val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syms = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_numeral = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_numeral += syms[i] num -= val[i] i += 1 return roman_numeral"},{"question":"Complete the function that takes an array of integers and returns a new array where each element is the product of all the elements in the original array except for the element at the same index. Assume: The array has at least two elements, and all elements are integers. Examples ```python Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Input: [2, 3, 4, 5] Output: [60, 40, 30, 24] Input: [1, 2, 0, 4] Output: [0, 0, 8, 0] ```","solution":"def product_except_self(nums): Returns a new array where each element is the product of all the elements in the original array except for the element at the same index. length = len(nums) if length == 0: return [] left_products = [1] * length right_products = [1] * length result = [1] * length for i in range(1, length): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(length - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] for i in range(length): result[i] = left_products[i] * right_products[i] return result"},{"question":"Given a list of strings, you are to sort them in lexicographical order. -----Input----- n – the number of strings in the list, then n lines follow [n <= 10^5]. Each line contains one string: S [S consists of English alphabets, and at most 100 characters long] -----Output----- Output the given strings in lexicographical order. -----Example----- Input: 4 banana apple cherry date Output: apple banana cherry date","solution":"def sort_strings_lexicographically(n, strings): Returns the list of strings sorted in lexicographical order. Parameters: n (int): The number of strings in the list. strings (list): The list of strings to sort. Returns: list: The list of strings sorted in lexicographical order. return sorted(strings)"},{"question":"Write a function `minimumSwaps` that returns the minimum number of swaps required to sort an array of integers in ascending order. The function should take an array of distinct integers as input. Example: if an array [4, 3, 1, 2] is given, the function should return 3, as the array can be sorted in 3 swaps: Swap (4, 1), then (4, 2), and finally (3, 4).","solution":"def minimumSwaps(arr): Returns the minimum number of swaps required to sort the array. n = len(arr) arrpos = [(val, idx) for idx, val in enumerate(arr)] # Sort the array by array values arrpos.sort(key=lambda it: it[0]) # To keep track of visited elements vis = {k: False for k in range(n)} ans = 0 for i in range(n): # already swapped and corrected or already present at correct pos if vis[i] or arrpos[i][1] == i: continue # Find out the number of nodes in this cycle and add it to ans cycle_size, j = 0, i while not vis[j]: vis[j] = True # move to indexed arrayposs array index j = arrpos[j][1] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"Task Write a function `groupAnagrams` that takes a list of strings and groups them into anagrams. Two words are anagrams if and only if they contain exactly the same characters in the same frequency, regardless of order. Requirements - The function should return a list of lists, where each inner list contains words that are anagrams of each other. - The order of the groups or the order of words within a group does not matter. - Consider case sensitivity, meaning \\"a\\" and \\"A\\" are treated as different characters. Example Input: `[\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]` Output: `[[\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"]]` Input: `[\\"\\"]` Output: `[[\\"\\"]]` Input: `[\\"a\\"]` Output: `[[\\"a\\"]]` Constraints - All words are made of lowercase English letters. - 1 <= strs.length <= 10^4 - 1 <= strs[i].length <= 100","solution":"from collections import defaultdict def groupAnagrams(strs): Groups a list of strings into anagrams. anagram_map = defaultdict(list) for word in strs: # Sort the word and use it as a key sorted_word = \'\'.join(sorted(word)) anagram_map[sorted_word].append(word) return list(anagram_map.values())"},{"question":"Complete the function that takes a string as input and returns `True` if the string is a palindrome (reads the same forwards and backwards), ignoring spaces, punctuation, and case; otherwise, return `False`. Examples: ```python is_palindrome(\\"A man, a plan, a canal, Panama\\") # Should return: True is_palindrome(\\"Was it a car or a cat I saw?\\") # Should return: True is_palindrome(\\"No \'x\' in Nixon\\") # Should return: True is_palindrome(\\"Hello World\\") # Should return: False ```","solution":"import re def is_palindrome(s): Returns True if s is a palindrome, ignoring spaces, punctuation, and case; otherwise, returns False. # Remove non-alphanumeric characters and convert to lower case cleaned_str = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if the cleaned string is equal to its reverse return cleaned_str == cleaned_str[::-1]"},{"question":"A software company wants to develop a simple text editor with advanced search functionality. As part of the development, they need a function to find how many times a particular subsequence appears in a given text, considering the order of characters but not their continuous appearance. The company asks you to help them solve this problem. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each of the next T test cases contains: - A single line with the string S, the text to search within. - Another single line with the string Q, the subsequence to search for. -----Output:----- - For each test case, output a single integer, the number of times the subsequence Q appears in S (considering the order of characters but not necessarily contiguous). -----Constraints----- - 1 leq T leq 50 - 1 leq |S|, |Q| leq 100 - Both S and Q will consist of lowercase English letters only. -----Sample Input 1:----- 2 abcabcabc abc abab ab -----Sample Output 1:----- 10 3","solution":"def count_subsequence_occurrences(s, q): Count the occurrences of subsequence `q` in string `s`. :param s: The text to search within :param q: The subsequence to search for :return: The number of times the subsequence `q` appears in `s` # Dynamic programming approach to count subsequence occurrences len_s, len_q = len(s), len(q) dp = [0] * (len_q + 1) dp[0] = 1 # An empty subsequence always has one occurrence in any string for i in range(1, len_s + 1): for j in range(len_q, 0, -1): if s[i - 1] == q[j - 1]: dp[j] += dp[j - 1] return dp[len_q] def process_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) results = [] index = 1 for _ in range(T): S = input_lines[index] Q = input_lines[index + 1] results.append(count_subsequence_occurrences(S, Q)) index += 2 return results"},{"question":"You are given a directed graph represented as an adjacency list, where each node has a list of its immediate neighbors. Your task is to implement a function that checks if there is a path between two given nodes. You can assume that all nodes are labeled with unique integers and the graph is represented as a dictionary where keys are node labels, and values are lists of neighboring nodes. # Function Signature ```python def is_path(graph, start, end): pass ``` # Input - `graph`: A dictionary representing the directed graph (e.g., `{1: [2, 3], 2: [4], 3: [], 4: [1]}`) - `start`: An integer representing the starting node. - `end`: An integer representing the target node. # Output - Return `True` if there is a path from `start` to `end`, otherwise return `False`. # Example Example 1: ```python graph = {1: [2, 3], 2: [4], 3: [], 4: [1]} start = 1 end = 4 ``` should return `True`. Example 2: ```python graph = {1: [2, 3], 2: [4], 3: [], 4: [1]} start = 3 end = 4 ``` should return `False`. # Constraints - The graph\'s nodes and edges will have at most `10^3` elements. - The graph may contain cycles. Make sure your implementation accounts for cycles within the graph to avoid infinite loops.","solution":"def is_path(graph, start, end): Checks if there is a path from start to end in the given graph. Uses Depth-First Search (DFS) to explore the path. def dfs(node, visited): if node == end: return True visited.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: if dfs(neighbor, visited): return True return False return dfs(start, set())"},{"question":"Given an unsorted list of integers, write a function that returns the difference between the largest and smallest values. For the sake of this problem, assume that the list will contain at least one integer. If the list is empty, return None. **Example:** ```python find_difference([3, 7, 2, 9, 4]) # Output: 7 find_difference([-7, 0, 5, 8]) # Output: 15 find_difference([10]) # Output: 0 find_difference([]) # Output: None ``` **Function Signature:** ```python def find_difference(numbers: List[int]) -> Union[int, None]: ```","solution":"from typing import List, Union def find_difference(numbers: List[int]) -> Union[int, None]: Returns the difference between the largest and smallest values in the list `numbers`. If the list is empty, returns None. if not numbers: return None largest = max(numbers) smallest = min(numbers) return largest - smallest"},{"question":"Given a set of `n` integers, find the length of the longest subsequence which is strictly increasing and where the difference between the consecutive elements is exactly `k`. -----Input----- The first line contains the number of test cases `t`. For each test case: 1. The first line contains two integers `n` and `k` - the size of the array and the difference `k`. 2. The second line contains `n` integers representing the elements of the array. -----Output----- For each test case, output the length of the longest strictly increasing subsequence with a consecutive difference of `k`. -----Constraints----- 1 ≤ t ≤ 10 1 ≤ n ≤ 2000 1 ≤ k ≤ 1000 1 ≤ array elements ≤ 10000 -----Example----- Input: 2 6 2 1 3 2 5 4 6 5 1 4 5 6 7 8 Output: 3 5","solution":"def longest_subseq_with_diff_k(n, k, array): Returns the length of the longest subsequence which is strictly increasing and where the difference between the consecutive elements is exactly k. longest = [1] * n elem_index = {array[0]: 0} for i in range(1, n): if array[i] - k in elem_index: longest[i] = longest[elem_index[array[i] - k]] + 1 elem_index[array[i]] = i return max(longest) def process_test_cases(t, test_cases): results = [] for case in test_cases: n, k, array = case[\'n\'], case[\'k\'], case[\'array\'] results.append(longest_subseq_with_diff_k(n, k, array)) return results"},{"question":"===== Function Descriptions ===== .reversed() The .reversed() function returns an iterator that accesses the given sequence in the reverse order. >>> list(reversed([1, 2, 3, 4])) [4, 3, 2, 1] >>> tuple(reversed((1, 2, 3, 4))) (4, 3, 2, 1) >>> \'\'.join(reversed(\'hello\')) \'olleh\' ===== Problem Statement ===== A librarian is cataloging a shelf containing a series of books, each represented by its title. The librarian wants to create a new shelf order where the titles are arranged in reverse alphabetical order. Your task is to read a list of book titles and print them in reverse alphabetical order using the .reversed() function. ===== Input Format ===== The first line contains an integer n, the number of book titles on the shelf. The next n lines each contain a book title. ===== Constraints ===== 1 <= n <= 100 Each title contains only alphabetical characters and spaces. Each title has at most 100 characters. ===== Output Format ===== Output the titles in reverse alphabetical order, each title on a new line. ===== Sample Input ===== 3 Applied Cryptography The Art of Computer Programming Design Patterns ===== Sample Output ===== The Art of Computer Programming Design Patterns Applied Cryptography","solution":"def sort_titles_reverse_alphabetical(n, titles): Returns a list of titles sorted in reverse alphabetical order. Parameters: n (int): Number of book titles. titles (list of str): A list containing the book titles. Returns: list of str: Book titles in reverse alphabetical order. if not all(isinstance(title, str) for title in titles): raise ValueError(\\"All book titles must be strings.\\") # Sorting the titles in reverse alphabetical order sorted_titles = sorted(titles, reverse=True) return sorted_titles"},{"question":"Given a string that consists of only \'(\' and \')\', your task is to determine the minimum number of parentheses that need to be added to make the string valid. A string is considered valid if it is empty or it can be written as AB (A and B are valid strings) or (A) (A is a valid string). Return the minimum number of parentheses needed to make the string valid. Example 1: Input: \\"()\\" Output: 0 Explanation: The input string is already valid. Example 2: Input: \\"(()\\" Output: 1 Explanation: We need one more \')\' to make the string valid. Example 3: Input: \\"())(\\" Output: 2 Explanation: We need one \'(\' at the beginning and one \')\' at the end to make the string valid. Example 4: Input: \\"(()())(\\" Output: 1 Explanation: We need one more \')\' to make the string valid. Note: 1. The input string\'s length will be in the range [1, 1000]. 2. The input string will only consist of \'(\' and \')\'.","solution":"def min_add_to_make_valid(s): Returns the minimum number of parentheses that need to be added to make the string valid. left_balance = 0 right_balance = 0 for char in s: if char == \'(\': left_balance += 1 else: # char == \')\' if left_balance > 0: left_balance -= 1 else: right_balance += 1 return left_balance + right_balance"},{"question":"You are given a matrix made up of letters. Your task is to write a function **findWordsInGrid(grid, words)** that takes in a 2D character grid and a list of words. The function should return a list of words that can be found in the grid. A word can be matched either horizontally or vertically, but not diagonally. You can\'t reuse the same cell in the grid within a single word. For example, given the following grid and list of words: ``` grid = [[\'a\', \'b\', \'c\', \'e\'], [\'s\', \'f\', \'c\', \'s\'], [\'a\', \'d\', \'e\', \'e\']] words = [\\"abcced\\", \\"see\\", \\"abcb\\"] ``` **findWordsInGrid(grid, words)** should return: ``` [\\"abcced\\", \\"see\\"] ``` You can assume that all input words are in lowercase letters, and the grid will contain lowercase letters only.","solution":"def findWordsInGrid(grid, words): Returns a list of words that can be found in the grid. Parameters: grid (list of list of str): 2D grid of characters. words (list of str): List of words to search for. Returns: list of str: List of words found in the grid. def isValid(row, col): return 0 <= row < len(grid) and 0 <= col < len(grid[0]) def search(row, col, word, index): if index == len(word): return True if not isValid(row, col) or grid[row][col] != word[index] or visited[row][col]: return False visited[row][col] = True if (search(row + 1, col, word, index + 1) or search(row - 1, col, word, index + 1) or search(row, col + 1, word, index + 1) or search(row, col - 1, word, index + 1)): return True visited[row][col] = False return False found_words = [] for word in words: found = False for row in range(len(grid)): for col in range(len(grid[0])): visited = [[False] * len(grid[0]) for _ in range(len(grid))] if search(row, col, word, 0): found_words.append(word) found = True break if found: break return found_words"},{"question":"Matrix Diagonal Sum Write a function that takes a square matrix (2D array) of integers and returns the sum of the two main diagonals of the matrix. # Function Signature ```python def diagonal_sum(matrix: List[List[int]]) -> int: ``` # Input - A square matrix `matrix` with integer elements, where `matrix` is represented as a list of lists. The length of the sides of the matrix will be at least 1 and at most 1000. # Output - An integer representing the sum of the elements of the main diagonals. - The main diagonal runs from the top-left to the bottom-right. - The anti-diagonal runs from the top-right to the bottom-left. # Example ```python matrix1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] assert diagonal_sum(matrix1) == 25 matrix2 = [ [1, 2], [3, 4] ] assert diagonal_sum(matrix2) == 10 ``` # Constraints - You should avoid counting the middle element twice if the matrix has an odd size. # Hint - Remember that in a square matrix of size `n x n`, the elements in the main diagonal are `matrix[i][i]` and the elements in the anti-diagonal are `matrix[i][n-i-1]` for `i` from `0` to `n-1`.","solution":"from typing import List def diagonal_sum(matrix: List[List[int]]) -> int: n = len(matrix) total_sum = 0 for i in range(n): total_sum += matrix[i][i] # Add elements from the main diagonal total_sum += matrix[i][n-i-1] # Add elements from the anti-diagonal # If the matrix has an odd dimension, we subtract the central element which was added twice if n % 2 == 1: total_sum -= matrix[n//2][n//2] return total_sum"},{"question":"Write a function that takes a string containing a mathematical expression and evaluates it. The expression can contain integers, the operators + (addition) and - (subtraction), and parentheses for controlling the precedence of operations. **Constraints**: - The input string will contain only non-negative integers, operators (+ and -), and parentheses. - The given string will always be a valid mathematical expression. - The length of the input string will not exceed 1000 characters. Your task is to parse the expression and return its evaluated result as an integer. **Examples**: ``` evaluate_expression(\\"3+5-2\\") ``` Should return ``` 6 ``` ``` evaluate_expression(\\"10+(2-1)\\") ``` Should return ``` 11 ``` ``` evaluate_expression(\\"6-4+(7-3)+1\\") ``` Should return ``` 7 ``` **Function Signature**: ```python def evaluate_expression(expression: str) -> int: pass ``` Ensure your implementation handles the precedence and associative properties of the operators correctly by evaluating the expression inside the parentheses first.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a given mathematical expression string containing integers, addition (+), subtraction (-), and parentheses def helper(s_list): stack = [] num = 0 sign = 1 while len(s_list) > 0: c = s_list.pop(0) if c.isdigit(): num = num * 10 + int(c) elif c in [\'+\', \'-\']: stack.append(sign * num) num = 0 sign = 1 if c == \'+\' else -1 elif c == \'(\': num = helper(s_list) elif c == \')\': stack.append(sign * num) return sum(stack) stack.append(sign * num) return sum(stack) return helper(list(expression))"},{"question":"Write a function that given an integer `k`, returns the smallest Fibonacci number that has at least `k` digits. Example: Input: 3 Output: 144 Explanation: The smallest Fibonacci number with at least 3 digits is 144 (F_12). Note: The range of `k` is [1,100]. ```python def find_fib_with_k_digits(k: int) -> int: # Your code here ```","solution":"def find_fib_with_k_digits(k: int) -> int: Returns the smallest Fibonacci number that has at least k digits. if k <= 0: raise ValueError(\\"k must be a positive integer.\\") # The first two Fibonacci numbers a, b = 1, 1 index = 2 # because we already have F_1 and F_2 which are both \'1\' # Loop until we find a Fibonacci number with at least k digits while len(str(b)) < k: a, b = b, a + b index += 1 return b"},{"question":"You are given a 2D grid with N rows and M columns, where each cell contains a non-negative integer representing the elevation at that point. The grid defines a landscape where water can only travel to adjacent cells (left, right, up, down) if the elevation of the adjacent cell is less than or equal to the current cell. You must determine the highest possible water level from which water can flow to both the top-left corner (1, 1) and the bottom-right corner (N, M) of the grid. -----Input----- - The first line of the input contains two space-separated integers N and M denoting the number of rows and columns respectively. - The next N lines each contain M space-separated integers, representing the elevation of each cell in the grid. -----Output----- Output the highest water level at which water can flow from both the top-left corner (1, 1) to the bottom-right corner (N, M). -----Constraints----- - 1 leq N, M leq 1000 - 0 leq elevation[i][j] leq 10^6 -----Example Input----- 4 4 9 8 7 6 6 5 4 7 8 3 2 1 7 6 5 4 -----Example Output----- 4 -----Explanation----- Water can flow from cell (1, 1) with elevation 9 to cell (4, 4) with elevation 4. The highest elevation from which water can flow to both endpoints while traversing cells with equal or lesser elevation levels is 4. Hence the output is 4.","solution":"def can_flow(grid, N, M, water_level): Check if water can flow from the top-left to the bottom-right at \'water_level\'. from collections import deque directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set([(0, 0)]) while queue: x, y = queue.popleft() if x == N - 1 and y == M - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] >= water_level: visited.add((nx, ny)) queue.append((nx, ny)) return False def highest_water_level(grid, N, M): Calculates the highest water level from which water can flow from (1, 1) to (N, M). low, high = 0, min(grid[0][0], grid[N-1][M-1]) while low <= high: mid = (low + high) // 2 if can_flow(grid, N, M, mid): low = mid + 1 else: high = mid - 1 return high"},{"question":"Given a list of positive integers representing the positions of houses along a street and an integer representing the number of mailboxes to install, determine the minimum total distance between the houses and the nearest mailbox. Each mailbox can cover multiple houses, and each house must be covered by exactly one mailbox. The distance between two points is the absolute difference of their positions. For example, given the houses positioned at `[1, 4, 8, 10]` and `2` mailboxes, an optimal placement would be one mailbox at position `4` covering houses `1` and `4`, and another at position `10` covering houses `8` and `10`. The total minimum distance is `(3 + 0) + (2 + 0) = 5`. Write a function `min_total_distance(houses: List[int], k: int) -> int` that takes the list of house positions and the number of mailboxes and returns the minimum total distance. # Example 1: Input: ```python houses = [1, 4, 8, 10] k = 2 ``` Output: ```python 5 ``` Explanation: - Place mailboxes at `4` and `10`. - Distance from house `1` to mailbox `4` = 3 - Distance from house `4` to mailbox `4` = 0 - Distance from house `8` to mailbox `10` = 2 - Distance from house `10` to mailbox `10` = 0 - Total distance = `3 + 0 + 2 + 0` = `5` # Example 2: Input: ```python houses = [1, 3, 6, 7, 8, 9] k = 1 ``` Output: ```python 14 ``` Explanation: - Place one mailbox at position `6` (or any median position of the list). - Total distance can be calculated as `(|1-6| + |3-6| + |6-6| + |7-6| + |8-6| + |9-6|)` = `5 + 3 + 0 + 1 + 2 + 3` = 14. # Constraints: - `1 <= len(houses) <= 100` - `1 <= houses[i] <= 10^4` - `1 <= k <= len(houses)`","solution":"from typing import List import sys def min_total_distance(houses: List[int], k: int) -> int: houses.sort() def cost(start, end): mid = (end + start) // 2 mid_house = houses[mid] return sum(abs(houses[i] - mid_house) for i in range(start, end + 1)) n = len(houses) dp = [[sys.maxsize] * (k + 1) for _ in range(n)] for i in range(n): dp[i][1] = cost(0, i) for j in range(2, k + 1): for i in range(n): for p in range(i): dp[i][j] = min(dp[i][j], dp[p][j - 1] + cost(p + 1, i)) return dp[n - 1][k]"},{"question":"Write a function that takes a list of integers and returns the second largest number in the list. For example: ```python [10, 21, 45, 42, 18, 14, 21] ==> 42 [2, 3, 6, 6, 5, 8, 8] ==> 8 ```","solution":"def second_largest(numbers): Returns the second largest number in a list of integers. if len(numbers) < 2: raise ValueError(\\"List must contain at least two unique numbers.\\") unique_numbers = set(numbers) if len(unique_numbers) < 2: raise ValueError(\\"List must contain at least two unique numbers.\\") sorted_numbers = sorted(unique_numbers, reverse=True) return sorted_numbers[1]"},{"question":"Given an array of integers, where every element appears twice except for one. Find that single one. Example: Input: nums = [4,1,2,1,2] Output: 4 Constraints: - 1 <= nums.length <= 3 * 10^4 - -3 * 10^4 <= nums[i] <= 3 * 10^4 - Each element in the array appears twice except for one element which appears only once.","solution":"def single_number(nums): Finds the single number in an array where every element appears twice except for one. Parameters: nums (list): List of integers. Returns: int: The single number. result = 0 for num in nums: result ^= num return result"},{"question":"Write a function that takes an array of integers and a target integer. The function should return an array of all unique pairs of integers from the input array that add up to the target. Each pair should be sorted in ascending order, and the result array should not contain duplicate pairs. For example: ``` find_pairs([1, 2, 3, 4, 5], 5) => [[1, 4], [2, 3]] find_pairs([1, 2, -2, -1, 0], 0) => [[-2, 2], [-1, 1]] find_pairs([2, 2, 2], 4) => [[2, 2]] find_pairs([1, 1, 1, 1], 2) => [[1, 1]] ```","solution":"def find_pairs(arr, target): Returns an array of all unique pairs of integers from the input array that add up to the target. Each pair is sorted in ascending order, and no duplicate pairs are included in the result. seen = set() pairs = set() for num in arr: complement = target - num if complement in seen: pair = tuple(sorted([num, complement])) pairs.add(pair) seen.add(num) return [list(pair) for pair in sorted(pairs)]"},{"question":"You are given a dictionary where the keys are strings, and the values are lists of integers. Write a function `find_unique_combinations` that takes this dictionary and returns a list of all unique combinations of integers where each combination includes exactly one integer from each list, in lexicographical order. For example, given the dictionary: ```python data = { \\"A\\": [1, 2], \\"B\\": [3], \\"C\\": [4, 5] } ``` The function `find_unique_combinations(data)` should return: ```python [ [1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5] ] ``` Your function should handle dictionaries with lists of different lengths and ensure that the result is always in lexicographical order, where combinations are sorted based on the order of integers in the combination. Complete the function \'find_unique_combinations\' to solve the problem. Your solution should handle large inputs efficiently. ```python def find_unique_combinations(data): keys = sorted(data.keys()) result = [] def recurse(curr_comb, idx): if idx == len(keys): # Base case: if combination is complete result.append(curr_comb[:]) return key = keys[idx] for num in sorted(data[key]): curr_comb.append(num) recurse(curr_comb, idx + 1) curr_comb.pop() recurse([], 0) return result # Testing data = { \\"A\\": [1, 2], \\"B\\": [3], \\"C\\": [4, 5] } print(find_unique_combinations(data)) # Expected Output: [[1, 3, 4], [1, 3, 5], [2, 3, 4], [2, 3, 5]] ```","solution":"def find_unique_combinations(data): keys = sorted(data.keys()) result = [] def recurse(curr_comb, idx): if idx == len(keys): # Base case: if combination is complete result.append(curr_comb[:]) return key = keys[idx] for num in sorted(data[key]): curr_comb.append(num) recurse(curr_comb, idx + 1) curr_comb.pop() recurse([], 0) return result"},{"question":"Jessica needs help generating a mirrored right-angled triangle pattern of a given size **n** using asterisks (\'*\'). Write a function **mirrored_triangle** that prints the pattern. Function Signature ```python def mirrored_triangle(n: int) -> None: ``` Parameters - **n** (int): The number of rows in the triangle, where **1 <= n <= 50**. Output - The function should print the mirrored right-angled triangle pattern with **n** rows of asterisks. Each row **i** contains **i** asterisks, starting with 1 asterisk in the first row, and so on. Example ```python mirrored_triangle(1) ``` Output: ``` * ``` ```python mirrored_triangle(3) ``` Output: ``` * ** *** ``` Notes: - The last row should be left aligned, and each preceding row should have one more leading space than the row below it. - The function only prints the pattern; it does not return any value.","solution":"def mirrored_triangle(n: int) -> None: Prints a mirrored right-angled triangle pattern with n rows. for i in range(1, n + 1): print(\' \' * (n - i) + \'*\' * i)"},{"question":"You are given an array of N integers. Your task is to find the maximum sum of any subsequence such that no two consecutive elements are selected. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N. - The second line contains N space-separated integers representing the elements of the array. -----Output----- For each test case, print a single line containing one integer - the maximum sum of any subsequence such that no two consecutive elements are selected. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - -10^4 le text{array element} le 10^4 - the sum of N over all test cases does not exceed 10^5 -----Example Input----- 2 4 3 2 5 10 4 -1 -2 -3 -4 -----Example Output----- 13 0 -----Explanation----- Example case 1: For the array [3, 2, 5, 10], the maximum sum subsequence is [3, 10], thus the output is 13. Example case 2: For the array [-1, -2, -3, -4], the maximum sum subsequence is an empty subsequence as all elements are negative. Hence the output is 0.","solution":"def max_non_consecutive_sum(arr): if not arr: return 0 including = 0 excluding = 0 for num in arr: new_excluding = max(including, excluding) including = excluding + num excluding = new_excluding return max(including, excluding) def process_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) results = [] index = 1 for _ in range(T): N = int(input_lines[index]) array = list(map(int, input_lines[index + 1].split())) results.append(max_non_consecutive_sum(array)) index += 2 return results def format_output(results): return \'n\'.join(map(str, results)) # Let\'s put it altogether in one function to handle the input processing and result printing. def solve(input_str): results = process_input(input_str) return format_output(results)"},{"question":"You have been hired to analyze and improve a simple machine learning algorithm. The algorithm uses a very basic function to predict a value based on a single input. The current implementation uses a linear equation in the form ( y = mx + c ), where ( m ) and ( c ) are constants. Your task is to adjust the code to include a new feature that allows the algorithm to also consider exponential growth. Given the equation ( y = mx + c + a cdot e^{bx} ), where ( a ) and ( b ) are new parameters, implement the new prediction function. Write a Python function `predict` that takes four arguments: `x` (the input value), `m`, `c`, `a`, and `b` (the parameters), and returns the predicted value using the updated equation. Example: ```python def predict(x, m, c, a, b): # Your code here # Test cases print(predict(1, 2, 3, 4, 0.5)) # Output should be 2*1 + 3 + 4*e^(0.5*1) print(predict(0, 1, 2, 3, 0.1)) # Output should be 1*0 + 2 + 3*e^(0.1*0) ```","solution":"import math def predict(x, m, c, a, b): Predicts the value using the equation y = mx + c + a * e^(bx). Parameters: x (float): The input value. m (float): The coefficient for linear term. c (float): The constant term. a (float): The coefficient for exponential term. b (float): The exponent\'s coefficient. Returns: float: The predicted value. return m * x + c + a * math.exp(b * x)"},{"question":"Write a function that determines whether the lengths of three sides can form a valid triangle. The function should accept three positive integers as inputs and should return a boolean indicating whether these sides can form a triangle. Recall that in a valid triangle, the sum of any two sides must be greater than the third side. Examples ``` can_form_triangle(3, 4, 5) => True can_form_triangle(1, 1, 2) => False can_form_triangle(7, 10, 5) => True can_form_triangle(1, 10, 12) => False ```","solution":"def can_form_triangle(a, b, c): Determines whether the lengths of three sides can form a valid triangle. :param a: Length of first side (positive integer) :param b: Length of second side (positive integer) :param c: Length of third side (positive integer) :returns: True if the sides can form a triangle, otherwise False return a + b > c and a + c > b and b + c > a"},{"question":"You are given a string S consisting of lowercase English letters and an integer M. Your task is to determine the length of the longest substring of S that contains at most M distinct characters. -----Input----- - The first line contains a single integer, T, which is the number of test cases. The description of each test case follows. - The first line of each test case contains a string S. - The second line of each test case contains the integer M. -----Output----- - For each test case, output the length of the longest substring of S that contains at most M distinct characters. -----Constraints----- - 1 leq T leq 10 - 1 leq |S| leq 10^5 - 1 leq M leq 26 -----Sample Input----- 2 abcba 2 aaaaaaa 1 -----Sample Output----- 3 7 -----Explanation----- For the first test case: - The longest substring of \\"abcba\\" that contains at most 2 distinct characters is either \\"bcb\\" or \\"cbc\\", each of which has a length of 3. For the second test case: - The entire string \\"aaaaaaa\\" consists of only 1 distinct character, so the length is 7.","solution":"def longest_substring_with_m_distinct(S, M): Returns the length of the longest substring of S that contains at most M distinct characters. from collections import defaultdict window_start = 0 max_length = 0 char_frequency = defaultdict(int) for window_end in range(len(S)): right_char = S[window_end] char_frequency[right_char] += 1 while len(char_frequency) > M: left_char = S[window_start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] window_start += 1 max_length = max(max_length, window_end - window_start + 1) return max_length def process_test_cases(T, test_cases): results = [] for S, M in test_cases: result = longest_substring_with_m_distinct(S, M) results.append(result) return results"},{"question":"You are given a collection of integers that represent the marks of students in a class. Write a function to calculate the final grade for the class. The final grade is calculated by: - Dropping the highest and the lowest marks. - Averaging the remaining marks. If the class has fewer than three students, return 0 as the final grade. Example: ```python marks = [70, 85, 78, 92, 88, 76] ``` After dropping the highest mark (92) and the lowest mark (70), the remaining marks are [85, 78, 88, 76], so the final grade is the average of these remaining marks. Notes: - The function should handle an empty collection. - You can assume each mark is between 0 and 100 inclusive. - Keep the calculations accurate to two decimal places. Implement this function in Python: ```python def calculate_final_grade(marks): # Write your code here ```","solution":"def calculate_final_grade(marks): Calculate the final grade of a class by dropping the highest and lowest marks and averaging the remaining marks. :param marks: A list of integers representing the marks :return: The final grade as a float rounded to two decimal places, or 0 if the number of students is fewer than three. if len(marks) < 3: return 0.0 sorted_marks = sorted(marks) trimmed_marks = sorted_marks[1:-1] average = sum(trimmed_marks) / len(trimmed_marks) return round(average, 2)"},{"question":"You need to implement a function that accepts a list of people and their birth years, and returns a list of people who are still alive, sorted by their ages **in ascending order**. Assume the current year is 2023. Each person is represented as a tuple with their name and birth year. If the person is born in 2023 or later, they shouldn\'t be included in the list. Example ```python people = [(\\"Alice\\", 1990), (\\"Bob\\", 1985), (\\"Charlie\\", 2022), (\\"David\\", 1980), (\\"Emily\\", 2023)] alive_people(people) ==> [(\'Charlie\', 2022), (\'Alice\', 1990), (\'Bob\', 1985), (\'David\', 1980)] ``` In this example, Emily is omitted because her birth year is 2023, the current year. The remaining people are sorted by their ages in ascending order.","solution":"def alive_people(people): Returns a list of people who are still alive, sorted by their age in ascending order. Assumes the current year is 2023. Args: people: A list of tuples, each containing a name and a birth year. Returns: A list of tuples of people who are still alive, sorted by age. current_year = 2023 alive = [person for person in people if person[1] < current_year] return sorted(alive, key=lambda x: current_year - x[1])"},{"question":"A robot is located at the top-left corner of a m x n grid (labeled \'Start\'). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (labeled \'Finish\') while avoiding obstacles. Given an m x n grid, \'obstacleGrid\', which contains either a 0 or a 1: - 0 represents an empty cell. - 1 represents an obstacle that the robot cannot traverse. Determine the number of unique paths that the robot can take to reach the \'Finish\' from the \'Start\'. **Example 1:** Input: ``` [ [0,0,0], [0,1,0], [0,0,0] ] ``` Output: 2 Explanation: There are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right **Example 2:** Input: ``` [ [0,1], [0,0] ] ``` Output: 1 Note: - The grid is of square or rectangular shape. - The dimensions of the grid are m, n <= 100. - The initial and final positions are always 0.","solution":"def uniquePathsWithObstacles(obstacleGrid): Computes the number of unique paths from top-left corner to bottom-right corner in a grid with obstacles. :param obstacleGrid: List of List of integers where 0 represents empty cell and 1 represents an obstacle. :return: Integer indicating the number of unique paths. if not obstacleGrid or obstacleGrid[0][0] == 1: return 0 m, n = len(obstacleGrid), len(obstacleGrid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(1, m): dp[i][0] = dp[i-1][0] if obstacleGrid[i][0] == 0 else 0 for j in range(1, n): dp[0][j] = dp[0][j-1] if obstacleGrid[0][j] == 0 else 0 for i in range(1, m): for j in range(1, n): if obstacleGrid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[-1][-1]"},{"question":"Alex is organizing a library and wants to categorize books based on their publication year. Given a list of books with their publication years, help Alex determine how many books fall into each decade category from the 1900s to the 2000s. -----Input:----- - First line will contain an integer N, the number of books. - The next N lines will each contain a single integer year which is the publication year of a book. -----Output:----- For each decade from the 1900s to the 2000s, output the number of books that were published in that decade in the format \\"Decade: Count\\". Each decade is considered as starting from `yyyy0` to `yyyy9`. -----Constraints----- - 1 leq N leq 10^4 - 1900 leq year leq 2009 -----Sample Input:----- 6 1995 2001 1987 1974 2000 1965 -----Sample Output:----- 1900s: 0 1910s: 0 1920s: 0 1930s: 0 1940s: 0 1950s: 0 1960s: 1 1970s: 1 1980s: 1 1990s: 1 2000s: 2 -----EXPLANATION:----- The library has 6 books. One book is from the 1960s, one from the 1970s, one from the 1980s, one from the 1990s, and two from the 2000s.","solution":"def categorize_books(N, years): Given the number of books and their publication years, categorize the books into decades from the 1900s to the 2000s. # Initialize decade categories from 1900s to 2000s decades = { \\"1900s\\": 0, \\"1910s\\": 0, \\"1920s\\": 0, \\"1930s\\": 0, \\"1940s\\": 0, \\"1950s\\": 0, \\"1960s\\": 0, \\"1970s\\": 0, \\"1980s\\": 0, \\"1990s\\": 0, \\"2000s\\": 0, } # Process each year and increment the respective decade count for year in years: if 1900 <= year <= 1909: decades[\\"1900s\\"] += 1 elif 1910 <= year <= 1919: decades[\\"1910s\\"] += 1 elif 1920 <= year <= 1929: decades[\\"1920s\\"] += 1 elif 1930 <= year <= 1939: decades[\\"1930s\\"] += 1 elif 1940 <= year <= 1949: decades[\\"1940s\\"] += 1 elif 1950 <= year <= 1959: decades[\\"1950s\\"] += 1 elif 1960 <= year <= 1969: decades[\\"1960s\\"] += 1 elif 1970 <= year <= 1979: decades[\\"1970s\\"] += 1 elif 1980 <= year <= 1989: decades[\\"1980s\\"] += 1 elif 1990 <= year <= 1999: decades[\\"1990s\\"] += 1 elif 2000 <= year <= 2009: decades[\\"2000s\\"] += 1 # Prepare the output as a list of strings output = [] for decade, count in decades.items(): output.append(f\\"{decade}: {count}\\") return output"},{"question":"Create a function `longest_subsequence` that takes a string as input and returns the longest substring without repeating characters. If there are multiple substrings with the same maximum length, return the first one that occurs. For example: - Input: `\\"abcabcbb\\"` Output: `\\"abc\\"` - Input: `\\"bbbbb\\"` Output: `\\"b\\"` - Input: `\\"pwwkew\\"` Output: `\\"wke\\"`","solution":"def longest_subsequence(s: str) -> str: Returns the longest substring without repeating characters. If there are multiple substrings with the same maximum length, returns the first one that occurs. start = 0 max_length = 0 max_substring = \\"\\" seen_chars = {} for end, char in enumerate(s): if char in seen_chars and seen_chars[char] >= start: start = seen_chars[char] + 1 seen_chars[char] = end if end - start + 1 > max_length: max_length = end - start + 1 max_substring = s[start:end + 1] return max_substring"},{"question":"Write a function to determine whether a given string can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. The input string will only contain lowercase alphabets and its length will be between 1 and 1000 inclusive. Function signature: `def canFormPalindrome(s: str) -> bool:` Example: - canFormPalindrome(\\"racecar\\") -> True - canFormPalindrome(\\"aabbc\\") -> True - canFormPalindrome(\\"abc\\") -> False","solution":"def canFormPalindrome(s: str) -> bool: Determine whether a given string can be rearranged to form a palindrome. Parameters: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string freq_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in freq_count.values() if count % 2 != 0) # For the string to be rearranged into a palindrome: # - If the length of the string is even, no characters should have an odd count. # - If the length of the string is odd, exactly one character can have an odd count. return odd_count <= 1"},{"question":"Given an undirected graph with `N` vertices and `M` edges, there is a need to determine the number of connected components and the size of each component. A connected component is a set of vertices in which there is a path from any vertex to any other vertex in this set. Provide two operations: 1. `1 a b` - Add an edge between vertex `a` and vertex `b` in the graph. 2. `2` - Print the number of connected components and the size of each component in ascending order. Write a program to process a series of these operations. -----Constraints----- - 1 leq N leq 100 000 - 1 leq M leq 200 000 - 1 leq a, b leq N - The total number of operations will not exceed 500 000. -----Input----- Input is given from Standard Input in the following format: N M Operation_1 Operation_2 : Operation_M Each `Operation_i` is as described in the problem statement (either `1 a b` or `2`). -----Output----- For each operation `2`: - Print the number of connected components. - Print the size of each component in ascending order in a single line. -----Sample Input----- 5 7 1 1 2 1 2 3 2 1 4 5 2 1 1 3 2 -----Sample Output----- 3 1 1 3 2 2 3 1 1 4 Explanation: - Initially, there are 5 separate components: {1}, {2}, {3}, {4}, and {5}. - After `1 1 2` and `1 2 3`, the graph has three components: {1, 2, 3}, {4}, and {5}. - After `1 4 5`, the graph has two components: {1, 2, 3}, and {4, 5}. - After `1 1 3`, there are still two components: {1, 2, 3}, and {4, 5} because 1 and 3 are already connected.","solution":"class GraphComponents: def __init__(self, N): self.N = N self.parent = list(range(N + 1)) self.size = [1] * (N + 1) self.components = N def find(self, a): if self.parent[a] != a: self.parent[a] = self.find(self.parent[a]) return self.parent[a] def union(self, a, b): rootA = self.find(a) rootB = self.find(b) if rootA != rootB: if self.size[rootA] < self.size[rootB]: rootA, rootB = rootB, rootA self.parent[rootB] = rootA self.size[rootA] += self.size[rootB] self.components -= 1 def get_component_sizes(self): component_sizes = {} for i in range(1, self.N + 1): root = self.find(i) if root not in component_sizes: component_sizes[root] = 0 component_sizes[root] += 1 return sorted(component_sizes.values()) def process_operations(self, operations): results = [] for operation in operations: if operation[0] == \'1\': self.union(int(operation[1]), int(operation[2])) elif operation[0] == \'2\': component_sizes = self.get_component_sizes() results.append((self.components, component_sizes)) return results"},{"question":"Write a class TemperatureTracker that monitors and provides data on a series of recorded temperatures. The class should support the following operations: 1. `record(temperature: int)` - Records a new temperature measurement. 2. `getMaxTemp()` - Returns the highest temperature recorded so far. 3. `getMinTemp()` - Returns the lowest temperature recorded so far. 4. `getMeanTemp()` - Returns the mean (average) of all recorded temperatures. 5. `getModeTemp()` - Returns the mode of the recorded temperatures. If there is a tie, return any one of the modes. Implement the TemperatureTracker class ensuring all operations run in constant time. Example: ```python tracker = TemperatureTracker() tracker.record(72) tracker.record(76) tracker.record(72) tracker.record(68) tracker.record(72) print(tracker.getMaxTemp()) # Output: 76 print(tracker.getMinTemp()) # Output: 68 print(tracker.getMeanTemp()) # Output: 72.0 print(tracker.getModeTemp()) # Output: 72 ``` Notes: - You can assume that all temperatures will be whole numbers within the range -100 to 150. - There will be a maximum of 10^5 calls to each method. - The total time complexity of the operations should be efficient to handle the maximum input size.","solution":"class TemperatureTracker: def __init__(self): self.temperatures = [] self.max_temp = float(\'-inf\') self.min_temp = float(\'inf\') self.sum_temp = 0 self.count_temp = 0 self.freq_map = {} self.mode_temp = None self.max_count = 0 def record(self, temperature: int): self.temperatures.append(temperature) self.max_temp = max(self.max_temp, temperature) self.min_temp = min(self.min_temp, temperature) self.sum_temp += temperature self.count_temp += 1 if temperature in self.freq_map: self.freq_map[temperature] += 1 else: self.freq_map[temperature] = 1 if self.freq_map[temperature] > self.max_count: self.max_count = self.freq_map[temperature] self.mode_temp = temperature def getMaxTemp(self): return self.max_temp def getMinTemp(self): return self.min_temp def getMeanTemp(self): if self.count_temp == 0: return None return self.sum_temp / self.count_temp def getModeTemp(self): return self.mode_temp"},{"question":"Create a function that takes a list of integers and returns the largest sum of any consecutive subarray within the given array. This is a classic problem known as the \\"Maximum Subarray Problem\\" and is sometimes referred to by the name of \\"Kadane\'s Algorithm\\". You need to implement a function that follows this signature: ```python def max_subarray_sum(arr: List[int]) -> int: ``` # Examples Example 1: ``` Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4] Output: 6 Explanation: [4, -1, 2, 1] has the largest sum = 6. ``` Example 2: ``` Input: [1] Output: 1 Explanation: The subarray with the largest sum is [1], with sum = 1. ``` Example 3: ``` Input: [5, 4, -1, 7, 8] Output: 23 Explanation: The subarray with the largest sum is [5, 4, -1, 7, 8], with sum = 23. ``` # Constraints - The input list will have at least one integer. - You can assume that there are no constraints on the integer values (they can be both positive and negative). # Notes - Make sure your solution is efficient and can handle larger inputs in a reasonable time frame. - Try to come up with a solution that has linear time complexity, O(n). Can you write the function that solves this problem?","solution":"def max_subarray_sum(arr): Returns the largest sum of any consecutive subarray within the given array. This function implements Kadane\'s Algorithm. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given an array of `n` positive integers representing box heights. Each box can only be placed on the ground or on top of another box having a height greater than or equal to itself. Find the maximum number of boxes that can be stacked. Write a function `max_stack_height` that takes an array of integers as input and returns the height of the tallest stack that can be formed. # Example: ```python def max_stack_height(heights: List[int]) -> int: # Your implementation here # Example usage: heights = [4, 3, 2, 1] print(max_stack_height(heights)) # Output: 4 heights = [6, 3, 5, 7, 2] print(max_stack_height(heights)) # Output: 4 ``` # Explanation: - For the first example, all boxes can be stacked on top of each other since each subsequent box is shorter or equal to the box below it. Therefore, the tallest stack has a height of 4. - For the second example, the boxes can be stacked in the following order: [7, 6, 5, 3], giving a maximum height of 4. # Constraints: - 1 <= n <= 10^5 - 1 <= heights[i] <= 10^9","solution":"from typing import List def max_stack_height(heights: List[int]) -> int: Given an array of box heights, returns the maximum number of stacked boxes such that each box can only be placed on another box with a height greater than or equal to its own height. # Sort the heights array in non-increasing (descending) order heights.sort(reverse=True) # Initialize the max stack height to 0 max_height = 0 # Iterate over the sorted array and count the number of boxes that can be stacked for i in range(len(heights)): max_height += 1 return max_height"},{"question":"You are given an array of N integers. Your task is to perform Q operations on this array. Each operation is of one of the following types: 1. Update: You will be given a start index, an end index, and a value. You need to add this value to each element within this range (both start and end indices inclusive). 2. Query: You will be given a start index and an end index. You need to return the sum of elements within this range (both start and end indices inclusive). Note: The indices are 1-based. -----Input----- The first line contains two integers, N and Q, where: - N (1 ≤ N ≤ 100000) represents the number of elements in the array. - Q (1 ≤ Q ≤ 100000) represents the number of operations. The second line contains N integers, representing the initial values of the array. The next Q lines contain a description of an operation, either: - \\"1 L R V\\" for an update operation (1 ≤ L ≤ R ≤ N, -1000 ≤ V ≤ 1000), which means add value V to each element in the range from L to R. - \\"2 L R\\" for a query operation (1 ≤ L ≤ R ≤ N), which means print the sum of elements in the range from L to R. -----Output----- For each query operation, print the sum of elements in the specified range. -----Sample Input----- 5 5 1 2 3 4 5 1 1 3 2 2 1 3 1 2 5 4 2 1 5 2 3 4 -----Sample Output----- 11 26 15 -----Explanation----- Initial array: [1, 2, 3, 4, 5] 1st operation (1 1 3 2): Add 2 to each of the first three elements: [3, 4, 5, 4, 5] 2nd operation (2 1 3): The sum of the first three elements: 3 + 4 + 5 = 12 3rd operation (1 2 5 4): Add 4 to each element from the 2nd to the 5th: [3, 8, 9, 8, 9] 4th operation (2 1 5): The sum of all five elements: 3 + 8 + 9 + 8 + 9 = 37 5th operation (2 3 4): The sum of the 3rd and 4th elements: 9 + 8 = 17","solution":"class ArrayOperations: def __init__(self, array): self.array = array def update(self, L, R, V): for i in range(L-1, R): self.array[i] += V def query(self, L, R): return sum(self.array[L-1:R])"},{"question":"You are given a list of integers. Your aim is to find the highest product you can get from three of those integers. Write a function that receives a list of integers and returns this maximum product. If the list contains less than three integers, return an appropriate error message. -----Input----- The first line of input contains an integer T which denotes the number of test cases. Each of the next T lines contains a list of integers separated by spaces. -----Output----- For each test case, print the maximum product of three integers from the list. If a list contains fewer than three integers, print \\"Error: Less than three integers\\". -----Constraints----- - 1 ≤ T ≤ 10^5 - Each list contains between 0 and 10^5 integers. - Each integer will be in the range -10^6 to 10^6. -----Example----- Input: 3 1 10 2 6 5 3 -10 -10 5 2 1 2 Output: 300 500 Error: Less than three integers","solution":"def max_product_of_three(nums): Returns the maximum product of three integers in the list nums. If there are less than three integers, return an error message. if len(nums) < 3: return \\"Error: Less than three integers\\" nums.sort() return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3]) def process_test_cases(test_cases): results = [] for case in test_cases: nums = list(map(int, case.split())) results.append(max_product_of_three(nums)) return results"},{"question":"Task: You are given a rectangular matrix where each cell represents the cost of that cell. Start from the top-left corner of the matrix and find the minimum cost path to reach the bottom-right corner. You can only move right or down at any point in time. The cost of a path is the sum of the values of the cells in the path. # Example Given the matrix: [ begin{bmatrix} 1 & 3 & 1 1 & 5 & 1 4 & 2 & 1 end{bmatrix} ] The minimum cost path would be 1 -> 3 -> 1 -> 1 -> 1, with a total cost of 7. # Function Signature Write a function `min_cost_path(matrix)` that takes in a 2D list representing the cost matrix and returns the minimum cost of reaching the bottom-right corner of the matrix. # Constraints - The matrix will have at least 1 row and 1 column. - All cell values are non-negative integers. # Test Cases ```python assert min_cost_path([[1, 3, 1], [1, 5, 1], [4, 2, 1]]) == 7 assert min_cost_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 21 assert min_cost_path([[1]]) == 1 ``` # Hint Use dynamic programming to build a solution. Create a 2D list `dp` where `dp[i][j]` represents the minimum cost to reach cell `(i, j)`. The value of `dp[i][j]` is the cost of the current cell plus the minimum of the costs to reach the cell from the left or from above.","solution":"def min_cost_path(matrix): Returns the minimum cost path to reach the bottom-right corner of the matrix. :param matrix: List[List[int]], 2D list representing the cost matrix :return: int, the minimum cost of the path from top-left to bottom-right rows = len(matrix) cols = len(matrix[0]) # Create a 2D list to store the minimum costs dp = [[0]*cols for _ in range(rows)] # Initialize the top-left cell dp[0][0] = matrix[0][0] # Fill the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The bottom-right corner will have the minimum cost return dp[rows-1][cols-1]"},{"question":"Given a binary tree, return the inorder traversal of its nodes\' values. Example 1: Input: [1,null,2,3] Output: [1,3,2] Example 2: Input: [] Output: [] Example 3: Input: [1] Output: [1] Example 4: Input: [1,2] Output: [2,1] Example 5: Input: [1,null,2] Output: [1,2] Note: A binary tree is represented using a level order array representation. Each integer value in the array corresponds to the value of each TreeNode in the level order traversal of the tree. A null value indicates that a particular node does not exist. Constraints: - The number of nodes in the tree is in the range [0, 10000]. - Each node\'s value is at most 10^9. The goal of this problem is to ensure that you understand how to perform inorder traversal on a binary tree.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inorderTraversal(root): Given a binary tree, return the inorder traversal of its nodes\' values. def inorder(node, result): if not node: return inorder(node.left, result) result.append(node.val) inorder(node.right, result) result = [] inorder(root, result) return result"},{"question":"**Coding Assessment Question:** Implement a function `generate_bracket_combinations` that generates all valid combinations of `n` pairs of parentheses. # Problem Requirements: 1. The function should take an integer `n` as input. 2. It should output a list of strings, where each string represents a valid combination of `n` pairs of parentheses. # Examples: ```python >>> generate_bracket_combinations(1) [\\"()\\"] >>> generate_bracket_combinations(2) [\\"(())\\", \\"()()\\"] >>> generate_bracket_combinations(3) [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] ``` # Constraints: - `1 <= n <= 8` # Instructions: 1. The function should ensure every combination is valid by properly closing all opened parentheses. 2. Valid combinations are strings where each opening parenthesis has a corresponding closing parenthesis and the parentheses are properly nested. # Guidelines: - Consider using a recursive approach to generate the combinations. - Think about maintaining counts of opening and closing parentheses to ensure validity. Happy coding!","solution":"def generate_bracket_combinations(n): Generates all valid combinations of n pairs of parentheses. Args: n (int): The number of pairs of parentheses. Returns: list: A list of strings, where each string is a valid combination of n pairs of parentheses. result = [] def backtrack(s, open_count, close_count): if len(s) == 2 * n: result.append(s) return if open_count < n: backtrack(s + \'(\', open_count + 1, close_count) if close_count < open_count: backtrack(s + \')\', open_count, close_count + 1) backtrack(\\"\\", 0, 0) return result"},{"question":"You are given a grid of size N times M filled with integers. Your task is to compute the sum of the minimum elements from each row in the grid. -----Input----- - The first line of the input contains two space-separated integers N and M, denoting the number of rows and columns in the grid respectively. - The next N lines each contain M space-separated integers, representing the elements of the grid. -----Output----- Print a single integer — the sum of the minimum elements from each row of the grid. -----Constraints----- - 1 le N, M le 1000 - -10^6 le text{grid}[i][j] le 10^6 -----Example Input----- 3 3 1 3 2 4 5 6 7 8 9 -----Example Output----- 12 -----Explanation----- In the given grid: ``` 1 3 2 4 5 6 7 8 9 ``` The minimum element in the first row is 1. The minimum element in the second row is 4. The minimum element in the third row is 7. So, the sum of the minimum elements is 1 + 4 + 7 = 12.","solution":"def sum_of_minimums(grid): This function takes a grid of integers and returns the sum of the minimum elements from each row in the grid. return sum(min(row) for row in grid)"},{"question":"Given a string representing a mathematical expression, write a function to evaluate its value. The string consists of non-negative integers and the operators +, -, *, / (where / represents integer division). The integer division should truncate toward zero. You can assume that the given expression is always valid. Use the standard order of operations: 1. Multiplication and division should be performed before addition and subtraction. 2. Operators of the same precedence should be evaluated from left to right. For instance, for the input \\"3+2*2\\", the result should be 7, and for the input \\" 3/2 \\", the result should be 1. Examples: evaluateExpression(\\"3+2*2\\") -> 7 evaluateExpression(\\" 3/2 \\") -> 1 evaluateExpression(\\" 3+5 / 2 \\") -> 5 evaluateExpression(\\"10-2*3+4\\") -> 8","solution":"def evaluateExpression(expression): def calc(expression): stack = [] num = 0 sign = \'+\' i = 0 while i < len(expression): char = expression[i] if char.isdigit(): num = num * 10 + int(char) if char in \\"+-*/\\" or i == len(expression) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) sign = char num = 0 i += 1 return sum(stack) return calc(expression.replace(\\" \\", \\"\\"))"},{"question":"# Description: Write a function to merge two sorted arrays into a single sorted array. The function should take two arrays, both of which contain only integers and are already sorted in non-decreasing order, and return a new array that contains all integers from both input arrays, in non-decreasing order. # Examples ``` merge_sorted_arrays([1, 3, 5], [2, 4, 6]) === [1, 2, 3, 4, 5, 6] merge_sorted_arrays([0, 2, 4], [1, 3, 5]) === [0, 1, 2, 3, 4, 5] merge_sorted_arrays([10, 20, 30], [5, 15, 25]) === [5, 10, 15, 20, 25, 30] merge_sorted_arrays([], [1, 2, 3]) === [1, 2, 3] merge_sorted_arrays([4, 6, 8], []) === [4, 6, 8] ```","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into one sorted array. Parameters: arr1 (list of int): first sorted array arr2 (list of int): second sorted array Returns: list of int: merged sorted array merged_array = [] i = 0 j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Collect the rest of the elements from arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Collect the rest of the elements from arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Construct a function \'path_exists\', that determines whether there exists a path between two nodes in an undirected graph. The function should return a boolean value True or False. There are three parameters in the function: 1. A list of edges `edges`, where each edge is represented as a list of two nodes `[u, v]`, indicating an edge between node `u` and node `v`. 2. An integer `start` representing the starting node. 3. An integer `end` representing the target node. The graph is unweighted and undirected. The function should determine if there is a path between the `start` node and the `end` node using Depth-First Search (DFS) or Breadth-First Search (BFS). If a path exists, return True, otherwise return False. ```python def path_exists(edges, start, end): # Your implementation here ```","solution":"def path_exists(edges, start, end): Determines if there is a path between the start and end nodes in an undirected graph. Parameters: edges (List[List[int]]): A list of edges where each edge is represented as [u, v]. start (int): The starting node. end (int): The target node. Returns: bool: True if a path exists, False otherwise. from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Use BFS to determine if there is a path queue = deque([start]) visited = set() while queue: node = queue.popleft() if node == end: return True if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return False"},{"question":"You are given a list of integers representing the heights of buildings in a city from left to right. Calculate the maximum amount of water that can be trapped between the buildings after it rains. The width of each building is 1 unit. For instance, if the heights are represented as `[4, 2, 0, 3, 2, 5]`, the water trapped would be 9 units (4 units between the first and second building, 1 unit between the third and fourth, and 4 units between the fourth and sixth). The function should take a list of integers and return an integer representing the total amount of water trapped. Implement a function `def trap_water(heights: List[int]) -> int:` where: - `heights` is a list of non-negative integers representing the heights of the buildings. - The function should return an integer representing the total amount of trapped water.","solution":"from typing import List def trap_water(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n trapped_water = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"=====Problem Statement===== In this challenge, you need to write a function that takes an integer list and an integer as input, and returns the list rotated to the right by the given integer number of steps. For example, if the input list is `[1, 2, 3, 4, 5]` and the number of steps is `2`, the output should be `[4, 5, 1, 2, 3]`. NOTE: The rotation should be performed to the right. =====Input Format===== The first line of input contains a space-separated list of integers. The next line contains a single integer indicating the number of rotation steps to the right. =====Constraints===== 1. 1 ≤ len(list) ≤ 100 2. 0 ≤ rotation_steps ≤ 100 3. Each integer in the list is between -1000 and 1000. =====Output Format===== Output the rotated list as a space-separated string of integers.","solution":"def rotate_right(lst, steps): Rotates the list to the right by the specified number of steps. Args: lst (list of int): The list to be rotated. steps (int): The number of steps to rotate the list. Returns: list of int: The rotated list. # Get the effective steps since rotating a list of length n by n or more is the same as rotating by n % len(lst) n = len(lst) steps = steps % n # Rotate the list by slicing return lst[-steps:] + lst[:-steps] # Function to convert space-separated string input to a list of integers def string_to_list(s): return list(map(int, s.split())) # Function to convert a list of integers to space-separated string output def list_to_string(lst): return \' \'.join(map(str, lst)) # Main function to handle input and output def main(input_string, steps_str): nums = string_to_list(input_string) steps = int(steps_str) rotated_list = rotate_right(nums, steps) return list_to_string(rotated_list)"},{"question":"A software company is developing a new feature for their user analytics system and they need to generate a summary report for user activities. Each user activity is represented by a pair of integers `(a, b)` where `a` is the hour of the day (24-hour format, 0-23) and `b` is the duration in minutes. The report needs to summarize the total duration of activities for each hour of the day. Your task is to implement a function that takes as input a list of user activities and returns a list where each element at index `i` represents the total duration of activities (in minutes) that occurred during the `i`-th hour. Note: - If no activities occur during a particular hour, the total duration for that hour should be 0. -----Input----- - The function will receive a list of tuples. Each tuple contains two integers `a` and `b` representing an activity\'s start hour and duration, respectively. The input list will have the following constraints: - 1 ≤ |activities| ≤ 10^5 - 0 ≤ a ≤ 23 - 1 ≤ b ≤ 100 -----Output----- - The function should return a list of 24 integers where the value at the i-th index is the total duration of activities that occurred during the i-th hour. -----Example----- Input: [(1, 30), (2, 45), (1, 20), (2, 15), (1, 10)] Output: [0, 60, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] Explanation: Hour 1: 30 + 20 + 10 = 60 minutes Hour 2: 45 + 15 = 60 minutes Hours 0 and 3-23: 0 minutes The company needs accurate data to optimize their application\'s performance. Help them achieve this by writing an efficient solution.","solution":"def summarize_user_activities(activities): Summarizes the total duration of activities for each hour of the day. Parameters: activities (list of tuples): A list of tuples where each tuple contains two integers, the start hour and the duration in minutes. Returns: list: A list of 24 integers where each element represents the total duration of activities for that hour. hourly_durations = [0] * 24 for hour, duration in activities: hourly_durations[hour] += duration return hourly_durations"},{"question":"An e-commerce website keeps track of user activity by storing event logs. Each event log records a user\'s ID and the timestamp of the event. The website is interested in identifying \\"active users\\", which they define as users who have more than `k` events in any given period of `t` consecutive minutes. Your task is to write a program that reads a list of event logs and determines the number of active users according to the given criteria. -----Input----- The first line contains three integers n, t, and k (1 ≤ n ≤ 1000, 1 ≤ t ≤ 60, 1 ≤ k ≤ 100) — the number of event logs, the period of consecutive minutes, and the minimum number of events in any given period to be considered an active user. The next n lines each contain two integers: the i-th line contains integers u_i (1 ≤ u_i ≤ 1000) and t_i (0 ≤ t_i ≤ 1440) — the user ID and the timestamp of the event in minutes from the start of the day. -----Output----- Print a single integer — the number of active users. -----Examples----- Input 7 10 3 1 5 1 15 1 25 2 30 2 60 2 90 3 10 Output 0 Input 5 5 2 1 2 1 4 1 6 2 8 2 9 Output 1","solution":"def count_active_users(n, t, k, event_logs): from collections import defaultdict user_events = defaultdict(list) for user_id, event_time in event_logs: user_events[user_id].append(event_time) active_user_count = 0 for events in user_events.values(): events.sort() for i in range(len(events)): count = 0 for j in range(i, len(events)): if events[j] - events[i] <= t: count += 1 else: break if count > k: active_user_count += 1 break return active_user_count # Example usage n = 5 t = 5 k = 2 event_logs = [ (1, 2), (1, 4), (1, 6), (2, 8), (2, 9) ] print(count_active_users(n, t, k, event_logs)) # Output: 1"},{"question":"=====Function Descriptions===== In Python, dictionaries are hash maps that are mutable and unordered collections of key-value pairs. You can easily update a dictionary by adding a new key-value pair or modifying an existing key\'s value. For example: >>> my_dict = {\'a\': 1, \'b\': 2} >>> my_dict[\'c\'] = 3 >>> my_dict {\'a\': 1, \'b\': 2, \'c\': 3} You can also delete a key-value pair using the del keyword: >>> del my_dict[\'b\'] >>> my_dict {\'a\': 1, \'c\': 3} Or with the pop() method: >>> my_dict.pop(\'a\') 1 >>> my_dict {\'c\': 3} =====Problem Statement===== You are given a dictionary containing the names and ages of a group of people. Implement a function `modify_dictionary` that takes in two parameters: a dictionary `people`, and a list of operations `ops` to perform on the dictionary. Each operation is either an addition of a new key-value pair, an update to an existing key-value pair, or a removal of a key. Each element in `ops` is a list where: - The first element is a string that can be \\"add\\", \\"update\\", or \\"remove\\". - The second and third elements (if present) correspond to the key and value to be added or updated, respectively. You should return the modified dictionary after performing all the operations. =====Function Signature===== ```python def modify_dictionary(people: dict, ops: list) -> dict: pass ``` =====Example Input===== ```python people = {\\"John\\": 25, \\"Doe\\": 30} ops = [[\\"add\\", \\"Alice\\", 28], [\\"update\\", \\"John\\", 26], [\\"remove\\", \\"Doe\\"]] ``` =====Example Output===== ```python {\\"John\\": 26, \\"Alice\\": 28} ``` =====Constraints===== - The dictionary `people` will have a maximum of 1000 elements. - The list `ops` will have a maximum of 100 operations. - Each key and value in the dictionary will be a string and integer respectively. - All keys and values are non-empty and valid.","solution":"def modify_dictionary(people: dict, ops: list) -> dict: Modify the dictionary `people` based on the operations specified in `ops`. :param people: The initial dictionary with names as keys and ages as values. :param ops: A list of operations to perform on the dictionary. :return: The modified dictionary after all operations are performed. for op in ops: action = op[0] key = op[1] if action == \\"add\\" or action == \\"update\\": value = op[2] people[key] = value elif action == \\"remove\\": if key in people: del people[key] return people"},{"question":"Implement an algorithm that takes a list of integers and sorts it in a custom order such that all even numbers appear before all odd numbers, while preserving the relative order of the even and odd numbers. Specifically: - Your function should accept a single list of integers `[a1, a2, ..., an]`. - Move all the even integers to the beginning of the list and all the odd integers to the end. - The relative order among the even integers should be the same as it was in the original list. - Similarly, the relative order among the odd integers should be the same as it was in the original list. For example: - Given the list `[1, 2, 3, 4, 5, 6]`, your function should return `[2, 4, 6, 1, 3, 5]`. - Given the list `[4, 1, 1, 2, 3, 5]`, your function should return `[4, 2, 1, 1, 3, 5]`. Your implementation should handle lists with up to 10,000 elements efficiently.","solution":"def custom_sort(arr): Function to sort the list such that all even numbers appear before all odd numbers, while preserving the relative order among the even and odd numbers. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"# Task A robot is placed on a grid that can be of any size. The grid is represented by a 2D list `grid` of size `m x n`, where each element is either `1` or `0`. The robot can only move to cells containing `1`. The robot starts at the top-left corner and needs to reach the bottom-right corner. You need to determine if there is a path from the top-left corner to the bottom-right corner. The robot can move up, down, left, or right at each step. Write a function that returns `True` if there is a path from the start to the end, otherwise return `False`. # Input/Output `[input]` 2D integer array `grid` A 2D list of integers (0s and 1s) representing the grid, where `1` is a cell the robot can move to and `0` is an obstacle. The dimensions of the grid range from `1 x 1` to `100 x 100`. `[output]` a boolean Return `True` if there is a path from the top-left corner to the bottom-right corner, otherwise return `False`. # Example For `grid = [ [1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 1, 0], [0, 0, 1, 1] ]` the output should be `True`. For `grid = [ [1, 0, 0], [0, 0, 0], [0, 0, 1] ]` the output should be `False`. In the first example, there is a path from the top-left corner to the bottom-right corner, while in the second example, there is no such path.","solution":"def is_path(grid): Determines if there is a path from the top-left corner to the bottom-right corner of a grid. :param grid: 2D list of integers (0s and 1s) representing the grid :return: True if there is a path from the start to the end, otherwise False if not grid or grid[0][0] == 0 or grid[-1][-1] == 0: return False rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False for _ in range(cols)] for _ in range(rows)] def dfs(r, c): if r == rows - 1 and c == cols - 1: return True visited[r][c] = True for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc] and grid[nr][nc] == 1: if dfs(nr, nc): return True return False return dfs(0, 0)"},{"question":"Given an array of distinct integers, determine if the array can be split into two subsets such that the sum of the elements in both subsets is equal. If such a split is possible, return True; otherwise, return False. Example 1: Input: arr = [1, 5, 11, 5] Output: True Explanation: The array can be split into [1, 5, 5] and [11]. Example 2: Input: arr = [1, 2, 3, 5] Output: False Explanation: The array cannot be split into two subsets with equal sum. Example 3: Input: arr = [2, 2, 1, 1] Output: True Explanation: The array can be split into [2, 1] and [2, 1]. Example 4: Input: arr = [3, 3, 3, 4, 5] Output: True Explanation: The array can be split into [3, 3, 3] and [4, 5]. Constraints: - 1 <= arr.length <= 200 - 1 <= arr[i] <= 100","solution":"def can_partition(nums): total_sum = sum(nums) # If total_sum is odd, it\'s not possible to split it into two equal subsets if total_sum % 2 != 0: return False target_sum = total_sum // 2 # Initialize a DP array where dp[i] means if a subset with sum i can be formed dp = [False] * (target_sum + 1) dp[0] = True for num in nums: for i in range(target_sum, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target_sum]"},{"question":"Write a program called `sum_of_evens_in_matrix` that takes a 2-dimensional array (list of lists) and returns the sum of all the even numbers in the array. Notes: - Your function should handle an empty 2-dimensional array, returning 0. - Each sub-list in the input may be of varying length. - The input will always be a list of lists that contain integers. Examples: ```python sum_of_evens_in_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) -> 20 sum_of_evens_in_matrix([[11, 22], [33, 44, 55, 66]]) -> 132 sum_of_evens_in_matrix([[]]) -> 0 sum_of_evens_in_matrix([[10, -2], [-4, 0, 4, 13]]) -> 8 ```","solution":"def sum_of_evens_in_matrix(matrix): Returns the sum of all even numbers in a 2-dimensional array (list of lists). sum_evens = 0 for row in matrix: for num in row: if num % 2 == 0: sum_evens += num return sum_evens"},{"question":"Write a function that will rotate a given matrix 90 degrees clockwise. **Example:** Given the following matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The output should be: ``` [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` The function should take in the matrix and return a new matrix that has been rotated 90 degrees clockwise. ```python def rotate_matrix(matrix): # Implement your solution here # Example Usage matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated = rotate_matrix(matrix) # rotated should be: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] ```","solution":"def rotate_matrix(matrix): Rotates a given NxN matrix 90 degrees clockwise. Parameters: matrix (list of list of int): The input NxN matrix to be rotated. Returns: list of list of int: The rotated matrix. N = len(matrix) rotated_matrix = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Write a method that takes a single integer and returns the integer with its bits reversed. The bits are reversed in the sense that the binary representation of the number is reversed. Examples: ```python reverse_bits(13) == 11 # 13 in binary is 1101, reversing bits results in 1011, which is 11 in decimal reverse_bits(8) == 1 # 8 in binary is 1000, reversing bits results in 0001, which is 1 in decimal reverse_bits(0) == 0 # 0 in binary remains 0 after reversal reverse_bits(5) == 5 # 5 in binary is 101, and reversing bits result in 101 which is still 5 in decimal ``` Good luck!","solution":"def reverse_bits(n): Returns the integer obtained by reversing the bits of the given integer n. # Convert the integer to binary, remove the \'0b\' prefix, and reverse the string reversed_binary = bin(n)[2:][::-1] # Convert the reversed binary string back to an integer and return return int(reversed_binary, 2)"},{"question":"Define a function that takes a positive integer n and returns the sum of all the prime factors of n. If n is a prime number itself, the function should return n. Note: Consider only unique prime factors when calculating the sum. Examples ``` sum_prime_factors(10) = 7 // 10 = 2 * 5, 2 + 5 = 7 sum_prime_factors(18) = 5 // 18 = 2 * 3 * 3, 2 + 3 = 5 sum_prime_factors(11) = 11 // 11 is a prime number itself sum_prime_factors(60) = 10 // 60 = 2 * 2 * 3 * 5, 2 + 3 + 5 = 10 sum_prime_factors(100) = 7 // 100 = 2 * 2 * 5 * 5, 2 + 5 = 7 ``` Restrictions - The function should handle integers ranging from 2 to 10^6 efficiently.","solution":"def sum_prime_factors(n): This function returns the sum of all unique prime factors of a positive integer n. def is_prime(k): if k <= 1: return False if k <= 3: return True if k % 2 == 0 or k % 3 == 0: return False i = 5 while i * i <= k: if k % i == 0 or k % (i + 2) == 0: return False i += 6 return True if n <= 1: return 0 sum_of_primes = 0 prime_factors = set() for i in range(2, int(n**0.5) + 1): if n % i == 0: if is_prime(i): prime_factors.add(i) if is_prime(n // i): prime_factors.add(n // i) # If no prime factors found and n is prime itself if not prime_factors and is_prime(n): return n return sum(prime_factors)"},{"question":"Given an array of integers, every element appears twice except for one. Find that one element which appears only once. Implement a function using an algorithm with a linear runtime complexity and without using extra memory. Example 1: Input: nums = [2,2,1] Output: 1 Example 2: Input: nums = [4,1,2,1,2] Output: 4 Example 3: Input: nums = [1] Output: 1 Constraints: - 1 <= nums.length <= 3 * 10^4 - -3 * 10^4 <= nums[i] <= 3 * 10^4 - Each element in the array appears twice except for one element which appears only once.","solution":"def single_number(nums): Given an array of integers where every element appears twice except for one, this function finds that single one using XOR operation for linear runtime complexity. Args: nums (list of int): a list of integers Returns: int: the single number that appears only once unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"Given a string A and a string B, find the minimum number of steps required to make A an anagram of B. In one step, you can replace any character in A with any other character. An anagram of a string is another string that contains the same characters, only the order of characters can be different. Example 1: Input: A = \\"anagram\\", B = \\"mangaar\\" Output: 0 Explanation: \\"A\\" and \\"B\\" are already anagrams. Example 2: Input: A = \\"xxyyzz\\", B = \\"xxyyzz\\" Output: 0 Explanation: \\"A\\" and \\"B\\" are already anagrams. Example 3: Input: A = \\"friend\\", B = \\"family\\" Output: 4 Explanation: You can swap \'r\' with \'a\', \'e\' with \'i\', \'n\' with \'m\', and \'d\' with \'l\' to get \\"family\\". Example 4: Input: A = \\"abc\\", B = \\"def\\" Output: 3 Explanation: You can replace each character in \\"abc\\" with each character in \\"def\\". Notes: - Both strings A and B will have the same length. - The strings A and B consist of lowercase English letters only.","solution":"from collections import Counter def min_steps_to_anagram(A, B): Returns the minimum number of steps required to make string A an anagram of string B. count_A = Counter(A) count_B = Counter(B) steps = sum((count_A - count_B).values()) return steps"},{"question":"Given a nested dictionary, write a function that flattens it. The function should take a dictionary as input and return a new dictionary where the keys are the path to the value in the original dictionary, separated by dots. If the original dictionary contains nested dictionaries, their keys should be concatenated by using a dot `.` as a separator. For example, given input: ``` { \\"a\\": { \\"b\\": { \\"c\\": \\"d\\", \\"e\\": \\"f\\" }, \\"g\\": \\"h\\" }, \\"i\\": \\"j\\" } ``` The function should return: ``` { \\"a.b.c\\": \\"d\\", \\"a.b.e\\": \\"f\\", \\"a.g\\": \\"h\\", \\"i\\": \\"j\\" } ``` The function should handle an arbitrary depth of nested dictionaries but you can assume that dictionary keys are always strings and values are either strings or other dictionaries.","solution":"def flatten_dictionary(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. The keys in the flattened dictionary are the paths to the values in the original dictionary, separated by dots. Parameters: d (dict): The dictionary to flatten. parent_key (str): The base key for the current level of recursion. sep (str): The separator to use between keys. Returns: dict: A new dictionary with flattened keys. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Krishna has a peculiar interest in palindromes. He defines a \\"palindromic partition\\" of a string as a way of cutting the string into contiguous substrings where each substring is a palindrome. Krishna wants to know the minimum number of cuts needed for a given string so that every substring created by these cuts is a palindrome. Write an algorithm to help Krishna determine the minimum number of cuts needed for a given string such that every partition is a palindrome. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each of the next T lines contains a string S. -----Output:----- For each test case, print a single integer representing the minimum number of cuts needed for the given string to be completely partitioned into palindromic substrings. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 1000 - Each string S contains only lowercase English letters. -----Sample Input:----- 2 aab a -----Sample Output:----- 1 0 -----Explanation:----- Test Case 1: - The string \\"aab\\" can be partitioned as \\"aa\\", \\"b\\" with 1 cut and both are palindromes. Test Case 2: - The string \\"a\\" is already a palindrome and thus requires no cuts.","solution":"def min_palindromic_cuts(S): n = len(S) if n == 0: return 0 # dp[i] will be the minimum number of cuts needed for the string S[:i+1] dp = [0] * n palindrome = [[False] * n for _ in range(n)] for i in range(n): min_cut = i # Max cuts needed is cutting each character individually for j in range(i + 1): if S[j] == S[i] and (i - j < 2 or palindrome[j + 1][i - 1]): palindrome[j][i] = True min_cut = 0 if j == 0 else min(min_cut, dp[j - 1] + 1) dp[i] = min_cut return dp[-1] def solve_palindromic_partition(T, test_cases): results = [] for case in test_cases: results.append(min_palindromic_cuts(case)) return results"}]'),F={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:O,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(i)||e.solution&&e.solution.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},C={class:"card-container"},R={key:0,class:"empty-state"},z=["disabled"],Y={key:0},j={key:1};function L(i,e,u,p,s,a){const m=g("PoemCard");return n(),r("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[_,s.searchQuery]]),s.searchQuery?(n(),r("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),r(y,null,w(a.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),r("div",R,' No results found for "'+h(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),r("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),r("span",j,"Loading...")):(n(),r("span",Y,"See more"))],8,z)):l("",!0)])}const P=d(F,[["render",L],["__scopeId","data-v-5891063b"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/26.md","filePath":"deepseek/26.md"}'),D={name:"deepseek/26.md"},W=Object.assign(D,{setup(i){return(e,u)=>(n(),r("div",null,[x(P)]))}});export{M as __pageData,W as default};
