import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as _,f as u,F as y,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function A(r,e,l,m,a,s){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const O=d(k,[["render",A],["__scopeId","data-v-d928b11c"]]),N=JSON.parse('[{"question":"Given an array of integers of size N, you need to determine if the array is \\"almost sorted.\\" An array is considered almost sorted if it becomes sorted (non-decreasing order) by modifying at most one element. -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single integer N (size of the array). - The next line contains N space-separated integers representing the array. -----Output:----- For each test case, print \\"YES\\" if the array is almost sorted, otherwise print \\"NO\\". (Without quotes). -----Constraints:----- - 1 leq T leq 50 - 1 leq N leq 10^5 - 1 leq A_i leq 10^9 -----Sample Input:----- 2 4 1 5 3 4 5 1 2 3 4 5 -----Sample Output:----- YES YES","solution":"def is_almost_sorted(arr): Checks if the given array can be sorted by modifying at most one element. modified = False # Create a copy of the array to modify it and check if sorted prev = arr[0] for i in range(1, len(arr)): if arr[i] < prev: if modified: return False modified = True # Check if changing the current element or the previous element can help if i == 1 or arr[i] >= arr[i-2]: prev = arr[i] else: prev = arr[i] return True def process_test_cases(test_cases): results = [] for N, arr in test_cases: if is_almost_sorted(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string s representing a valid Roman numeral, convert s to an integer. The input Roman numeral is guaranteed to be within the range from 1 to 3999. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Example 1: Input: s = \\"III\\" Output: 3 Example 2: Input: s = \\"IV\\" Output: 4 Example 3: Input: s = \\"IX\\" Output: 9 Example 4: Input: s = \\"LVIII\\" Output: 58 Explanation: L = 50, V = 5, III = 3. Example 5: Input: s = \\"MCMXCIV\\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. Note: 1. The given string s is any valid Roman numeral from 1 to 3999. 2. It is guaranteed that s is valid, so solutions do not need to account for malformed Roman numerals.","solution":"def roman_to_integer(s): roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_to_int[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"Write a function that takes two non-negative integers (length and width) as input, and returns the area of a rectangle that can be formed by pixels of 1x1. Each pixel is represented by \'1\'. If either the length or the width is zero, return 0, as no rectangle can be formed. You need to ensure your function can handle large inputs efficiently. Examples: ```python rectangle_area(3, 4) # 12 rectangle_area(0, 5) # 0 rectangle_area(7, 0) # 0 rectangle_area(10, 10) # 100 ``` **Note:** The function should be optimized to handle scenarios where the inputs can be very large.","solution":"def rectangle_area(length, width): Returns the area of a rectangle with given length and width. If either length or width is zero, returns 0. return length * width if length > 0 and width > 0 else 0"},{"question":"John is working on a project that involves organizing and modifying a sequence of integers. He has a sequence of n integers, initially all set to 0. John can perform two types of operations on this sequence: 1. \\"1 l r x\\" — add integer x to each element in the range from the l-th to the r-th element of the sequence (inclusive). 2. \\"2 idx\\" — print the current value of the idx-th element of the sequence. John needs your help to efficiently process q operations of the types described above. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 200000), the length of the sequence and the number of operations respectively. Each of the next q lines contains an operation of one of the types described above. It is guaranteed that the following constraints hold for all operations: 1 ≤ l ≤ r ≤ n, 1 ≤ idx ≤ n, and -1000 ≤ x ≤ 1000. -----Output----- For each query of type two (print the value of the idx-th element) you must print the answer to the query on a separate line. The queries must be answered in the order given in the input. -----Examples----- Input 6 5 1 1 3 5 2 2 1 2 6 3 2 4 2 6 Output 5 8 3 -----Explanation----- Initially, the sequence is [0, 0, 0, 0, 0, 0]. After the first operation \\"1 1 3 5\\", the sequence becomes [5, 5, 5, 0, 0, 0]. Second operation \\"2 2\\" prints the value at the 2nd position, which is 5. The third operation \\"1 2 6 3\\" updates the sequence to [5, 8, 8, 3, 3, 3]. The fourth operation \\"2 4\\" prints the value at the 4th position, which is 3. The fifth operation \\"2 6\\" prints the value at the 6th position, which is 3.","solution":"def process_operations(n, q, operations): Process a list of operations on a sequence of integers. Parameters: n (int): Length of the sequence. q (int): Number of operations. operations (list of list): List of operations to be performed. Returns: list: Result of type-2 operations. sequence = [0] * n results = [] for operation in operations: if operation[0] == 1: l, r, x = operation[1] - 1, operation[2] - 1, operation[3] for i in range(l, r + 1): sequence[i] += x elif operation[0] == 2: idx = operation[1] - 1 results.append(sequence[idx]) return results"},{"question":"The National Library is organizing its bookshelves and they want to automate the process of finding books to put them in order. Each book has a unique identifier represented by an integer, and the shelf has a fixed capacity. Given the list of book identifiers on the shelf, the system should find the identifier of the median book. The median is defined as the middle element when the identifiers are sorted in ascending order. If there are an even number of books, the median is the first book of the two middle books in the sorted order. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case: - The first line contains an integer N denoting the number of books on the shelf. - The second line contains N space-separated integers representing the book identifiers. -----Output----- For each test case, output a single line containing the identifier of the median book. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - -10^9 ≤ book identifier ≤ 10^9 -----Example----- Input: 3 5 1 3 5 7 9 4 10 20 30 40 3 100 200 300 Output: 5 20 200 -----Explanation ----- Example Case 1. When the book identifiers [1, 3, 5, 7, 9] are sorted, the median is 5. Example Case 2. When the book identifiers [10, 20, 30, 40] are sorted, the median is the first of the two middle books, which is 20. Example Case 3. When the book identifiers [100, 200, 300] are sorted, the median is 200.","solution":"def find_median_book_identifiers(T, test_cases): medians = [] for i in range(T): N = test_cases[i][0] book_identifiers = test_cases[i][1] sorted_identifiers = sorted(book_identifiers) median_index = (N - 1) // 2 medians.append(sorted_identifiers[median_index]) return medians"},{"question":"Task You are given two strings `s1` and `s2` which only contain lower case alphabets. You need to determine if you can form a sequence by choosing some characters (possibly none) from `s1` and then some characters (possibly none) from `s2` such that the formed sequence is a palindrome. # Example For `s1 = \\"axxy\\"` and `s2 = \\"yya\\"`, the output should be `True`. You can choose \'a\' from `s1` and \'a\' from `s2`. Together they form the palindrome \\"aa\\". For `s1 = \\"abc\\"` and `s2 = \\"def\\"`, the output should be `False`. It is not possible to form any palindrome since there are no matching pairs. # Input/Output - `[input]` string `s1` A string containing lower case alphabets. Constraints: 1 ≤ s1.length ≤ 100. - `[input]` string `s2` Another string containing lower case alphabets. Constraints: 1 ≤ s2.length ≤ 100. - `[output]` a boolean Return `True` if it is possible to form a palindrome by choosing characters from `s1` and `s2`, otherwise return `False`.","solution":"def can_form_palindrome(s1, s2): Determine if we can form a palindrome by choosing characters from both `s1` and `s2`. Args: s1: str - First string containing lower case alphabets. s2: str - Second string containing lower case alphabets. Returns: bool - True if it is possible to form a palindrome, False otherwise. # Create a set of characters that are in both s1 and s2 common_chars = set(s1) & set(s2) # If there is at least one common character, it is possible to form a palindrome. return len(common_chars) > 0"},{"question":"Create a function that takes a string `s` and returns the longest word in the string. If there are words with the same length, return the first one that appears. For example: ``` s = \\"Write a function that finds the longest word in this sentence\\" --> \\"function\\" ```","solution":"def longest_word(s): Returns the longest word in the string `s`. If multiple words have the same length, returns the first one that appears. words = s.split() max_word = \\"\\" for word in words: if len(word) > len(max_word): max_word = word return max_word"},{"question":"# Description You are given a locker with a numerical combination lock. The lock consists of numbers from 0 to 9, and a combination consists of digits: the first digit represents the \'units column\', the second digit the \'tens column\', and so on. You need to write a function that, given the current combination and target combination, returns the minimum number of moves required to change the current combination to the target combination. Each move can increase or decrease a digit to its next or previous number respectively, and it wraps around (e.g., incrementing from 9 goes to 0, and decrementing from 0 goes to 9). # Task Write a function that calculates the minimum number of moves required to go from the current combination to the target combination. Example: ```python current_combination = \\"023\\" target_combination = \\"394\\" ``` Output: ``` (3 steps to change \'0\' to \'3\', 3 steps to change \'2\' to \'9\' (since you can also consider 2 > 1 > 0 > 9), 1 step to change \'3\' to \'4\') Total steps => 3 + 3 + 1 = 7 steps ``` # Input - `current_combination` : A string of digits representing the current combination. - `target_combination` : A string of digits representing the target combination. # Output Return an integer representing the minimum number of moves required. # Constraints - Both current_combination and target_combination will be non-empty strings of the same length consisting of digits \'0\' to \'9\'. - The length of current_combination and target_combination will be at most 1000. Example: ```python current_combination = \\"1234\\" target_combination = \\"5678\\" find_minimum_moves(current_combination, target_combination) => 12 ``` In this example, 1 -> 5 is 4 moves (1 -> 2 -> 3 -> 4 -> 5 ), 2 -> 6 is 4 moves (2 -> 3 -> 4 -> 5 -> 6), 3 -> 7 is 4 moves (3 -> 4 -> 5 -> 6 -> 7), 4 -> 8 is 4 moves (4 -> 5 -> 6 -> 7 -> 8). Therefore, total moves required = 4 + 4 + 4 + 4 = 16.","solution":"def find_minimum_moves(current_combination, target_combination): Calculates the minimum number of moves required to change the current combination to the target combination. Each move can increase or decrease a digit and wraps around. Args: - current_combination (str): The current combination string of digits. - target_combination (str): The target combination string of digits. Returns: - int: The minimum number of moves required to change the current combination to the target combination. total_moves = 0 for current_digit, target_digit in zip(current_combination, target_combination): current_digit = int(current_digit) target_digit = int(target_digit) # Calculate the absolute difference between current and target digits diff = abs(current_digit - target_digit) # The minimum moves is either the direct difference or the wrapped around difference moves = min(diff, 10 - diff) total_moves += moves return total_moves"},{"question":"Your task is to create a function `find_sum_of_squares` that takes an array/vector of integers `nums` as input and returns the sum of the squares of each integer in the array/vector. # Examples ```python find_sum_of_squares([1, 2, 3, 4]) returns 30 find_sum_of_squares([-1, -2, -3, -4]) returns 30 find_sum_of_squares([0, 5, -5]) returns 50 find_sum_of_squares([9]) returns 81 ``` # Notes - The input array/vector will always contain at least one integer.","solution":"def find_sum_of_squares(nums): Returns the sum of the squares of each integer in the input array/vector \'nums\'. :param nums: List[int] - A list of integers. :return: int - Sum of the squares of the integers. return sum(x ** 2 for x in nums)"},{"question":"Given a list of integers, return the product of all integers except for the current index without using the division operation. The input will always be a list of at least two integers. # Examples ``` input: [1, 2, 3, 4] output: [24, 12, 8, 6] input: [0,1,2,3,4] output: [24, 0, 0, 0, 0] input: [-3, 8, 4, 2] output: [64, -24, -48, -96] input: [9, 3, 2] output: [6, 18, 27] ```","solution":"def product_except_self(nums): Returns a list where the ith element is the product of all the elements of nums except nums[i]. n = len(nums) # Initialize lists for the left and right products left_products = [1] * n right_products = [1] * n result = [1] * n # Build the left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Build the right_products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Build the result array for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"You are organizing a book fair and have a list of books. Each book has a unique ISBN number, an integer price, and the number of copies initially available. You want to create a program that simulates the sale of books, allowing customers to purchase books by specifying the ISBN number and the number of copies they want to buy. The program should be able to handle multiple sales operations and update the inventory accordingly. Write a function `book_sales(inventory, sales)` where: - `inventory` is a list of dictionaries, each representing a book with the keys \'ISBN\', \'price\', and \'copies\'. - `sales` is a list of dictionaries, each representing a sale with the keys \'ISBN\' and \'quantity\'. The function should return the total revenue generated from all the sales and update the `inventory` list to reflect the remaining copies of each book after the sales. If a sale request exceeds the number of available copies, fulfill the sale only for the available copies and adjust the revenue accordingly. Example: ```python inventory = [ {\'ISBN\': 1001, \'price\': 20, \'copies\': 5}, {\'ISBN\': 1002, \'price\': 35, \'copies\': 3}, {\'ISBN\': 1003, \'price\': 50, \'copies\': 2} ] sales = [ {\'ISBN\': 1001, \'quantity\': 3}, {\'ISBN\': 1002, \'quantity\': 1}, {\'ISBN\': 1003, \'quantity\': 5} ] total_revenue = book_sales(inventory, sales) print(total_revenue) print(inventory) ``` Expected Output: ``` 210 # Total revenue from the sales [ {\'ISBN\': 1001, \'price\': 20, \'copies\': 2}, {\'ISBN\': 1002, \'price\': 35, \'copies\': 2}, {\'ISBN\': 1003, \'price\': 50, \'copies\': 0} ] ``` Explanation: - For ISBN 1001, 3 copies are sold, generating 60. - For ISBN 1002, 1 copy is sold, generating 35. - For ISBN 1003, only the available 2 copies are sold, generating 100. Total revenue = 60 + 35 + 100 = 195. The `inventory` list is updated accordingly.","solution":"def book_sales(inventory, sales): total_revenue = 0 isbn_to_book = {book[\'ISBN\']: book for book in inventory} for sale in sales: isbn = sale[\'ISBN\'] quantity = sale[\'quantity\'] if isbn in isbn_to_book: book = isbn_to_book[isbn] available_copies = book[\'copies\'] copies_to_sell = min(quantity, available_copies) total_revenue += copies_to_sell * book[\'price\'] book[\'copies\'] -= copies_to_sell return total_revenue"},{"question":"___ Task **_Given_** a *list of strings* , write a function that categorizes each string into one of three categories: - **Alphabets**: if the string contains only alphabetic characters. - **Digits**: if the string contains only numeric characters. - **Alphanumeric**: if the string contains a mixture of alphabetic and numeric characters. The function should return a dictionary with three keys (\'Alphabets\', \'Digits\', \'Alphanumeric\') where the value for each key is a list of strings that belong to that category. ___ # Notes * The input list will have at least one string. * Strings may contain letters of any case, i.e., both lowercase and uppercase letters. * If a string does not fit into any of the three categories, it should not be included in the output dictionary. * The order of strings within each category should be the same as they appear in the input list. ___ # Input >> Output Examples ``` categorizeStrings([\\"hello\\", \\"123\\", \\"test1\\", \\"world\\", \\"42\\"]) ==> return {\\"Alphabets\\": [\\"hello\\", \\"world\\"], \\"Digits\\": [\\"123\\", \\"42\\"], \\"Alphanumeric\\": [\\"test1\\"]} ``` _Explanation_: - \\"hello\\" and \\"world\\" contain only alphabetic characters, so they are categorized under \'Alphabets\'. - \\"123\\" and \\"42\\" contain only numeric characters, so they are categorized under \'Digits\'. - \\"test1\\" contains both alphabetic and numeric characters, so it is categorized under \'Alphanumeric\'. ___ ``` categorizeStrings([\\"foo\\", \\"bar\\", \\"baz\\"]) ==> return {\\"Alphabets\\": [\\"foo\\", \\"bar\\", \\"baz\\"], \\"Digits\\": [], \\"Alphanumeric\\": []} ``` _Explanation_: - All input strings \\"foo\\", \\"bar\\", and \\"baz\\" contain only alphabetic characters, so they are categorized under \'Alphabets\'. ___ ``` categorizeStrings([\\"456\\", \\"12345\\", \\"6789\\"]) ==> return {\\"Alphabets\\": [], \\"Digits\\": [\\"456\\", \\"12345\\", \\"6789\\"], \\"Alphanumeric\\": []} ``` _Explanation_: - All input strings \\"456\\", \\"12345\\", and \\"6789\\" contain only numeric characters, so they are categorized under \'Digits\'. ___ ``` categorizeStrings([\\"abc123\\", \\"test123\\", \\"123abc\\"]) ==> return {\\"Alphabets\\": [], \\"Digits\\": [], \\"Alphanumeric\\": [\\"abc123\\", \\"test123\\", \\"123abc\\"]} ``` _Explanation_: - All input strings \\"abc123\\", \\"test123\\", and \\"123abc\\" contain both alphabetic and numeric characters, so they are categorized under \'Alphanumeric\'. ___ ___ ___ ___ For More Enjoyable Katas # ALL translations are welcomed # Enjoy Learning !!","solution":"def categorizeStrings(strings): Categorizes strings into \'Alphabets\', \'Digits\', and \'Alphanumeric\'. Args: strings (list of str): The input list of strings. Returns: dict: A dictionary containing categorized strings. result = { \\"Alphabets\\": [], \\"Digits\\": [], \\"Alphanumeric\\": [] } for s in strings: if s.isalpha(): result[\\"Alphabets\\"].append(s) elif s.isdigit(): result[\\"Digits\\"].append(s) elif s.isalnum(): result[\\"Alphanumeric\\"].append(s) return result"},{"question":"Given an array of integers, we define its `compression` to be the length of the array after removing all adjacent duplicate elements. Write a function that compresses the input array by removing all adjacent duplicates and returns the resulting array. # Function Signature ```python def compress_array(arr: list[int]) -> list[int]: pass ``` # Example ```python assert compress_array([1, 2, 2, 3, 3, 3, 2, 2, 1]) == [1, 2, 3, 2, 1] assert compress_array([4, 4, 4, 4, 4]) == [4] assert compress_array([1, 1, 2, 3, 3, 4, 4, 5, 5, 5, 1, 1, 2, 2]) == [1, 2, 3, 4, 5, 1, 2] ```","solution":"def compress_array(arr): Compresses an input array by removing all adjacent duplicate elements. Args: arr (list of int): The input array. Returns: list of int: The compressed array. if not arr: # If the array is empty, return an empty array return [] compressed = [arr[0]] for i in range(1, len(arr)): if arr[i] != arr[i-1]: compressed.append(arr[i]) return compressed"},{"question":"In a distant galaxy, there exists a peculiar species of aliens known as Zolon. These aliens have a unique way of communicating through sequences of numbers. To test the intelligence of a new colony member, the Zolon leader gives them a challenge: find out the longest sub-sequence of their given sequence that is non-decreasing. Write a program that, for each test case, determines the length of the longest non-decreasing sub-sequence in the given sequence. -----Input:----- - The first line contains an integer T, denoting the number of test cases. - Each of the next T lines starts with an integer N, denoting the size of the sequence, followed by N space-separated integers representing the sequence. -----Output:----- - For each test case, output a single line containing an integer denoting the length of the longest non-decreasing sub-sequence. -----Constraints:----- - 1 leq T leq 10^3 - 1 leq N leq 10^3 - -10^6 leq text{sequence[i]} leq 10^6 for each valid index i -----Sample Input:----- 2 8 5 3 4 8 6 7 8 6 5 1 3 2 4 5 -----Expected Output:----- 5 4 -----Explanation----- - For the first case: The longest non-decreasing sub-sequence is [3, 4, 6, 7, 8] which has length 5. - For the second case: The longest non-decreasing sub-sequence is [1, 3, 4, 5] which has length 4. Note: In cases where the sequence is strictly decreasing, the length of the longest non-decreasing sub-sequence is 1. For instance, for the sequence [4, 3, 2, 1], the longest sub-sequence would be any one of the numbers, giving length 1.","solution":"def length_of_longest_non_decreasing_subsequence(sequence): Returns the length of the longest non-decreasing subsequence in a given sequence of numbers. if not sequence: return 0 n = len(sequence) dp = [1] * n for i in range(n): for j in range(i): if sequence[i] >= sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def process_test_cases(T, test_cases): results = [] for test_case in test_cases: N = test_case[0] sequence = test_case[1:] results.append(length_of_longest_non_decreasing_subsequence(sequence)) return results"},{"question":"You are given a grid of size N times M. Each cell of the grid contains a lowercase English letter. The grid represents a map of a forest where some areas are covered by trees and some are clear. You need to count the number of distinct tree clusters in the forest. A tree cluster is defined as a group of adjacent cells containing the same tree letter. Cells are considered adjacent if they share a common edge (up, down, left, or right). -----Input:----- - First line will contain T, the number of test cases. Then the test cases follow. - Each test case starts with two integers N and M. - The next N lines contain a string of length M each, representing the grid. -----Output:----- For each test case, output a single integer, the number of distinct tree clusters. -----Constraints----- - 1 leq T leq 10 - 1 leq N, M leq 1000 - Each character in the grid is a lowercase English letter (\'a\' to \'z\'). -----Sample Input:----- 2 3 3 aaa abb aab 4 4 abcd bcda cdab dabc -----Sample Output:----- 2 16","solution":"def count_tree_clusters(T, test_cases): def dfs(grid, x, y, visited, N, M, letter): stack = [(x, y)] directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while stack: i, j = stack.pop() for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < N and 0 <= nj < M and not visited[ni][nj] and grid[ni][nj] == letter: visited[ni][nj] = True stack.append((ni, nj)) results = [] for N, M, grid in test_cases: visited = [[False] * M for _ in range(N)] cluster_count = 0 for i in range(N): for j in range(M): if not visited[i][j]: visited[i][j] = True dfs(grid, i, j, visited, N, M, grid[i][j]) cluster_count += 1 results.append(cluster_count) return results"},{"question":"Given an array `nums` representing the heights of columns where the width of each column is 1, you need to find the two vertical lines that together with the x-axis form a container, such that the container can hold the maximum amount of water. Notice that you may not slant the container. The height of a column at index `i` is `nums[i]`. The container\'s filled water should be the product of the smaller height and the distance between the two lines. Write a function that takes the array `nums` as input and returns the maximum volume of water the container can hold. Example 1: Input: nums = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The heights of the columns at index 1 and index 8 are 8 and 7 respectively. The container formed by these two lines can hold 49 units of water because the distance between them is 7 (8 - 1) and the height is 7 (the smaller height of the two). Example 2: Input: nums = [1,1] Output: 1 Explanation: The only container can be formed by the two columns, which hold 1 unit of water. Constraints: - 2 <= nums.length <= 10^5 - 0 <= nums[i] <= 10^4","solution":"def max_area(nums): Find the maximum amount of water a container can hold given the heights of the columns. Parameters: nums (list): A list of integers representing the heights of the columns. Returns: int: The maximum volume of water the container can hold. left = 0 right = len(nums) - 1 max_area = 0 while left < right: # Calculate the area with the current boundary columns height = min(nums[left], nums[right]) width = right - left current_area = height * width max_area = max(max_area, current_area) # Move the pointers if nums[left] < nums[right]: left += 1 else: right -= 1 return max_area"},{"question":"=====Problem Statement===== You are given a list of integers. Write a program to count the number of distinct pairs (i, j) in the list such that the absolute difference between the numbers `nums[i]` and `nums[j]` is equal to a given integer `k`. =====Input Format===== - The first line contains an integer n, the size of the list. - The second line contains n space-separated integers representing the elements of the list. - The third line contains an integer k, the absolute difference. =====Constraints===== 0 < n < 1000 -10^9 < nums[i] < 10^9 0 <= k <= 10^9 =====Output Format===== Output a single integer representing the number of distinct pairs (i, j) where the absolute difference between the numbers `nums[i]` and `nums[j]` is equal to `k`. =====Sample Input===== 5 1 5 3 4 2 2 =====Sample Output===== 3 =====Explanation===== The pairs with an absolute difference of 2 are: (1, 3), (5, 3), and (4, 2)","solution":"def count_pairs_with_difference(nums, k): Counts the number of distinct pairs (i, j) in the list such that the absolute difference between nums[i] and nums[j] is equal to k. Args: nums (list): List of integers. k (int): Absolute difference. Returns: int: Number of distinct pairs with absolute difference k. nums_set = set(nums) count = 0 for num in nums_set: if (num + k) in nums_set: count += 1 if (num - k) in nums_set and k != 0: count += 1 return count // 2 # Each pair is counted twice"},{"question":"You are given a non-negative integer N which represents a modified binary number. The binary representation of N may contain an error where at most one bit has been flipped from 0 to 1 or 1 to 0. Your task is to determine the minimum number of bit flips required to make the binary representation of N into a valid binary number (a number that is equal to the binary representation of some integer) that could have resulted from flipping at most one bit. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each of the next T lines contains a single non-negative integer N. -----Output----- For each test case, print a single line containing one integer - the minimum number of bit flips required. -----Constraints----- - 1 le T le 10^5 - 0 le N le 2^{30} - 1 -----Example Input----- 3 5 10 15 -----Example Output----- 1 1 0 -----Explanation----- Example case 1: The binary representation of 5 is \'101\'. If we flip the second bit (0 to 1), the binary number becomes \'111\', which is equal to 7. Thus, it takes 1 bit flip to correct the error. Example case 2: The binary representation of 10 is \'1010\'. If we flip the second bit (0 to 1), the binary number becomes \'1110\', which is equal to 14. Thus, it takes 1 bit flip to correct the error. Example case 3: The binary representation of 15 is \'1111\'. There is no error as the binary representation is already a valid binary number for an integer. Thus, 0 bit flips are required.","solution":"def min_bit_flips_required(N): Given a non-negative integer N, determine the minimum number of bit flips required to make the binary representation of N into a valid binary number that could have resulted from flipping at most one bit. # Converting the number to binary string binary_rep = bin(N)[2:] # Calculate the number of 1s in the binary representation ones_count = binary_rep.count(\'1\') # If the number of 1s is 0 or 1, no flips are needed because it is already valid if ones_count == 0 or ones_count == len(binary_rep): return 0 # Since only one bit flip is allowed, having more than one \'0\' or more than one \'1\' means at least 1 flip is needed return 1 def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) results = [] for i in range(1, T + 1): N = int(data[i]) results.append(min_bit_flips_required(N)) print(\\"n\\".join(map(str, results))) if __name__ == \\"__main__\\": main()"},{"question":"# Task You are given two strings representing binary numbers. Write a function that takes these two binary strings and returns their sum (also as a binary string). The input strings are guaranteed to be non-empty and contain only the characters `1` or `0`. # Example For `bin1 = \\"101\\"` and `bin2 = \\"1101\\"`, the output should be `10010`. # Input/Output - `[input]` string `bin1` A string representing a binary number. The maximum length of the binary string is 10000. Constraints: `1 ≤ bin1.length ≤ 10000`. - `[input]` string `bin2` A string representing another binary number. The maximum length of the binary string is 10000. Constraints: `1 ≤ bin2.length ≤ 10000`. - `[output]` a string The sum of `bin1` and `bin2` as a binary string.","solution":"def add_binary(bin1, bin2): Returns the sum of two binary strings as a binary string. # Convert binary strings to integers, add them, then convert the result back to a binary string. sum_int = int(bin1, 2) + int(bin2, 2) return bin(sum_int)[2:]"},{"question":"Due to a severe hurricane, a large tree fell and blocked a small road. To clear the road, a group of workers needs to cut the tree into specific lengths. The foreman provided a list of required lengths they need from the tree. They first need to determine if it is possible to meet the demand. The foreman gave you the total length of the tree and a list of required lengths. Your task is to check if it is possible to cut the tree into the required lengths exactly. Output `YES` if it is possible, `NO` otherwise. Input: • The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. • The first line of each test case contains a single integer L, denoting the total length of the tree. • The second line of each test case contains a single integer N, denoting the number of required lengths. • The third line contains N space-separated integers denoting the required lengths. Output: For each test case, print a single line containing either \'YES\' or \'NO\' depending on whether it\'s possible to meet the foreman\'s requirements. Constraints: • 1≤T≤5 • 1≤L≤100 • 1≤N≤100 • 1≤Length of each required piece ≤100 Example Input: 2 20 4 4 5 6 5 15 3 2 6 10 Example Output: YES NO Explanation: In the 1st example, it is possible to cut the tree into lengths of {4, 5, 6, 5}, totaling exactly 20. So the output is \'YES\'. In the 2nd example, it is impossible to cut the tree to exactly meet the required lengths of {2, 6, 10}, totaling 18 which is more than 15. So the output is \'NO\'.","solution":"def can_cut_tree(total_length, required_lengths): Determine if it is possible to meet the demand of required_lengths from the total_length of the tree. return sum(required_lengths) == total_length def check_tree_cutting_possibility(T, test_cases): results = [] for case in test_cases: total_length, required_lengths = case if can_cut_tree(total_length, required_lengths): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string s and an integer k. Reverse the first k characters for every 2k characters counting from the start of the string. If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original. Return the modified string after the specified modifications. Example 1: Input: s = \\"abcdefg\\", k = 2 Output: \\"bacdfeg\\" Example 2: Input: s = \\"abcd\\", k = 2 Output: \\"bacd\\" Constraints: - 1 <= s.length <= 10000 - s consists of only lowercase English letters. - 1 <= k <= s.length","solution":"def reverseStr(s, k): Reverses the first k characters for every 2k characters of the string s. :param s: The input string :param k: The number of characters to reverse every 2k characters from the start of the string :return: A modified string result = list(s) for i in range(0, len(s), 2*k): result[i:i+k] = reversed(result[i:i+k]) return \'\'.join(result)"},{"question":"Given two arrays of integers, check if one array is the reverse of the other. Write a function that returns `True` if one array is the reverse of the other, otherwise, return `False`. Function Signature ```python def is_reverse(arr1: List[int], arr2: List[int]) -> bool: pass ``` Input - Two arrays of integers, `arr1` and `arr2`. Output - Return `True` if one array is the reverse of the other, otherwise return `False`. Examples ```python assert is_reverse([1, 2, 3], [3, 2, 1]) == True assert is_reverse([1, 2, 3, 4], [4, 3, 2, 1]) == True assert is_reverse([1, 2, 3], [1, 2, 3]) == False assert is_reverse([5, 6, 7], [7, 6, 5, 0]) == False ```","solution":"from typing import List def is_reverse(arr1: List[int], arr2: List[int]) -> bool: Check if one array is the reverse of the other. Parameters: arr1 (List[int]): First array arr2 (List[int]): Second array Returns: bool: True if one array is the reverse of the other, False otherwise return arr1 == arr2[::-1]"},{"question":"Create a function, `rotate_left`, that takes a list and an integer `n`. The function should return a new list with the elements rotated to the left by `n` positions. If `n` is negative, the function should rotate the elements to the right by the absolute value of `n`. Examples: ```python rotate_left([1, 2, 3, 4, 5], 2) # returns [3, 4, 5, 1, 2] rotate_left([1, 2, 3, 4, 5], -1) # returns [5, 1, 2, 3, 4] rotate_left([1, 2, 3, 4, 5], 5) # returns [1, 2, 3, 4, 5] ``` Note: - The input list can be of any length. - The function should handle cases where `n` is larger than the length of the list gracefully.","solution":"def rotate_left(lst, n): Rotates the elements of the list to the left by n positions. If n is negative, rotates the elements to the right by the absolute value of n. if not lst: return lst n = n % len(lst) # Handle cases where n is larger than the length of the list. return lst[n:] + lst[:n] if n >= 0 else lst[n:] + lst[:n]"},{"question":"You are given a list of integers. Write a function that returns the second largest number in the list. If the list does not contain at least two distinct numbers, return None. Function signature: `def second_largest(numbers: List[int]) -> Optional[int]` # Input - A list of integers, `numbers` (1 <= len(numbers) <= 100, -10^6 <= numbers[i] <= 10^6) # Output - An integer representing the second largest number in the list, or None if there isn\'t one. # Example ```python assert second_largest([3, 1, 4, 1, 5, 9, 2, 6]) == 6 assert second_largest([3]) == None assert second_largest([10, 10, 10]) == None ```","solution":"from typing import List, Optional def second_largest(numbers: List[int]) -> Optional[int]: Returns the second largest number in the list, or None if there isn\'t one. if len(numbers) < 2: return None first, second = float(\'-inf\'), float(\'-inf\') for number in numbers: if number > first: second = first first = number elif first > number > second: second = number return second if second != float(\'-inf\') else None"},{"question":"You are given a list of integers representing the heights of several individuals standing in a queue, ordered from front to back. Additionally, there is a set of rules for when and where each person can move within the queue: - An individual can only move forward (closer to the front) if the person directly in front of them is taller. - An individual can only move backward (further to the back) if the person directly behind them is shorter. Given this, create a function that will rearrange everyone into the optimal positions based on the rules mentioned above and then return the final order of the queue. # Input - A list of integers representing the initial heights of people in the queue. # Output - A list of integers representing the heights of people in the final, correctly rearranged queue. # Example ```python initial_queue = [5, 3, 2, 4, 6, 1] final_queue = rearrange_queue(initial_queue) print(final_queue) # Output should be [5, 4, 3, 2, 1, 6] or a valid sorted line following the moving logic. ``` Note: The exact final order might have multiple valid configurations based on the given movement rules, but they must all satisfy the conditions for moving forward or backward.","solution":"def rearrange_queue(heights): Rearranges the queue based on the given movement rules. :param heights: List of integers representing the heights from front to back. :return: List of integers representing the heights in the final arrangement. n = len(heights) if n <= 1: return heights moved = True while moved: moved = False for i in range(n - 1): if heights[i] < heights[i + 1]: heights[i], heights[i + 1] = heights[i + 1], heights[i] moved = True return heights"},{"question":"In the bustling city of Techville, there are n interconnected computer servers. The servers are set up in such a way that there\'s only one unique path between any two servers. The city\'s cybersecurity team has recently discovered a malware threat that could target and disable these servers. Their ultimate goal is to isolate the server which stores sensitive data to protect it from malware. The city\'s network is represented as a tree structure where each server corresponds to a node and each connection between two servers is an edge. Techville\'s IT department wants to prepare by restricting access through certain servers so that the sensitive server can be isolated efficiently in case of an attack. You are tasked to determine the minimum number of servers that need to be disabled by malware for each of the scenarios provided. # Problem Description The network consists of n servers and n-1 connections, forming a tree. Each server is represented by a unique integer from 1 to n. A series of q scenarios represent different possible layouts for the sensitive server. For each scenario, determine the minimum number of servers that must be disabled to make the sensitive server completely isolated from any other server. # Input Format - The first line contains an integer n (1 ≤ n ≤ 100,000) representing the number of servers. - Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n), representing a connection between servers u and v. - The next line contains a single integer q (1 ≤ q ≤ 100,000) representing the number of scenarios. - Each of the next q lines consists of one integer s (1 ≤ s ≤ n), the sensitive server that needs to be protected in the scenario. # Output Format - For each scenario, print a single integer representing the minimum number of servers that need to be disabled to isolate the sensitive server. # Example Input ``` 5 1 2 1 3 3 4 3 5 3 3 4 5 ``` Output ``` 2 3 3 ``` # Explanation In the first scenario, with server 3 as the sensitive server, disabling servers 1 and 2 would isolate server 3. In the second scenario, with server 4 as the sensitive server, disabling servers 3, 1, and 2 would isolate server 4. Similarly, in the third scenario, disabling servers 3, 1, and 2 would isolate server 5. # Notes - Pay attention to the tree structure of the network, as it allows you to utilize tree traversal algorithms for solving the problem. - Efficient handling of large input sizes is crucial due to the constraints on n and q. - Consider edge cases where the network has minimal connections (e.g., only one or two servers).","solution":"def calculate_tree_depths(n, edges): from collections import deque, defaultdict tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) depths = [-1] * (n + 1) queue = deque([(1, 0)]) depths[1] = 0 while queue: node, depth = queue.popleft() for neighbor in tree[node]: if depths[neighbor] == -1: depths[neighbor] = depth + 1 queue.append((neighbor, depth + 1)) return depths def minimum_servers_to_isolate(n, edges, scenarios): depths = calculate_tree_depths(n, edges) return [depths[s] for s in scenarios]"},{"question":"# Array Difference Write a function that takes two arrays of integers and returns a new array containing elements that are present in the first array but not in the second array. The order of elements in the returned array should match their order in the first array. Consider no duplicate elements within the arrays. Example ``` array_diff([1, 2, 2, 2, 3], [2]) => [1, 3] array_diff([1, 2, 3], [4, 5]) => [1, 2, 3] ```","solution":"def array_diff(arr1, arr2): Returns a new array containing elements that are present in arr1 but not in arr2. The order of elements in the returned array matches their order in arr1. :param arr1: list, the first array of integers :param arr2: list, the second array of integers :return: list, a new array with elements from arr1 not in arr2 return [element for element in arr1 if element not in arr2]"},{"question":"Given an array of integers, you need to find the sum of the maximum subarray. A subarray is a contiguous part of an array. The goal is to choose a subarray with the highest sum among all possible subarrays. -----Input----- The first line of input contains a single integer N, the size of the array. The second line contains N space-separated integers denoting the elements of the array. -----Output----- Output a single integer, the sum of the maximum subarray. -----Constraints----- - 1 <= N <= 105 - -109 <= Ai <= 109 -----Example----- Input: 8 -2 1 -3 4 -1 2 1 -5 4 Output: 6","solution":"def max_subarray_sum(N, array): Given an integer N and an array of integers, returns the sum of the maximum subarray. Parameters: N (int): The size of the array. array (list): List of integers. Returns: int: The sum of the maximum subarray. max_current = max_global = array[0] for num in array[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function that takes a positive integer `n` and returns the sum of all digits of `n` each raised to the power of their respective positions (starting from 1). For example: - The number `987` would be processed as `(9^1) + (8^2) + (7^3) = 9 + 64 + 343 = 416`. - The number `1234` would be processed as `(1^1) + (2^2) + (3^3) + (4^4) = 1 + 4 + 27 + 256 = 288`. Your function should handle any positive integer and return the correct calculated sum. Examples: ```python sum_of_powered_digits(987) # should return 416 sum_of_powered_digits(1234) # should return 288 ```","solution":"def sum_of_powered_digits(n): Returns the sum of all digits of n each raised to the power of their respective positions. digits = [int(d) for d in str(n)] sum_powered = sum(digit ** (i + 1) for i, digit in enumerate(digits)) return sum_powered"},{"question":"Write a function named `sumOfTwo`/`sum_of_two`/`SumOfTwo` that takes two integer arrays and a target integer as input and returns `true` if there exists one element from each array whose sum equals the target integer, and `false` otherwise. For example, given the arrays `[1, 2, 3]` and `[10, 20, 30, 40]` and the target `42`, the function should return `true` since `2 + 40 = 42`. If no such pair exists, it should return `false`. Constraints: - Each array will have at least one element and at most 1000 elements. - Each integer in the array and the target integer will be between `-1000` and `1000` inclusive.","solution":"def sum_of_two(arr1, arr2, target): Returns true if there exists one element from each array whose sum equals the target. complement_set = set() for num in arr1: complement_set.add(target - num) for num in arr2: if num in complement_set: return True return False"},{"question":"You are given a sequence of n integers where each integer represents the height of a building. You are tasked with determining the largest rectangular area that can be formed using the buildings. Each building has a width of 1 unit, and the height is given by the sequence. The buildings are aligned next to each other, and you are required to calculate the largest possible rectangular area that fits under the skyline formed by these buildings. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 10^3) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 10^5) — the number of buildings. The second line of each test case contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^4), where h_i is the height of the i-th building. It is guaranteed that the sum of n over all test cases does not exceed 5 cdot 10^5 (sum n le 5 cdot 10^5). -----Output----- For each test case, print the answer — the largest rectangular area that can be formed using the buildings for that test case. -----Example----- Input 3 6 2 1 5 6 2 3 5 1 2 3 4 5 4 4 3 2 1 Output 10 9 6","solution":"def max_histogram_area(heights): Given a list of heights, calculates the largest rectangular area under the histogram represented by the list. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_areas(test_cases): Given a list of test cases, calculates the largest rectangular area for each. results = [] for n, heights in test_cases: results.append(max_histogram_area(heights)) return results"},{"question":"Write a function to determine if a given integer is an Armstrong number. An Armstrong number for a given number of n digits is an integer such that the sum of its digits each raised to the power n is equal to the number itself. For example: - 153 is an Armstrong number because 1^3 + 5^3 + 3^3 = 153 - 9474 is an Armstrong number because 9^4 + 4^4 + 7^4 + 4^4 = 9474 The function should take an integer as input and return `true` if the number is an Armstrong number, and `false` otherwise. Examples ``` 153 --> true 9474 --> true 9475 --> false ```","solution":"def is_armstrong_number(n): Determine if the given integer is an Armstrong number. Parameters: - n: int - The number to check. Returns: - bool - True if the number is an Armstrong number, False otherwise. num_str = str(n) num_digits = len(num_str) sum_of_powers = sum(int(digit) ** num_digits for digit in num_str) return sum_of_powers == n"},{"question":"Given a list of integers, return a new list in which each element is the sum of its neighbors and itself. For elements at the beginning and end of the list, assume their \\"outside\\" neighbors are zero. For example: ```python sum_neighbors([1, 2, 3, 4]) => [3, 6, 9, 7] sum_neighbors([0, 0, 0, 0]) => [0, 0, 0, 0] sum_neighbors([1, -1, 1, -1]) => [0, 1, -1, 0] ``` Assumptions: - The input list will always contain at least one integer. - Handle both positive and negative integers. - The function should return an empty list if the input list is empty.","solution":"def sum_neighbors(lst): Given a list of integers, return a new list where each element is the sum of its neighbors and itself. Assume neighbors of elements at the beginning and end of the list are zero. if not lst: return [] n = len(lst) result = [] for i in range(n): left = lst[i-1] if i > 0 else 0 middle = lst[i] right = lst[i+1] if i < n-1 else 0 result.append(left + middle + right) return result"},{"question":"Complete the function that takes an integer `n`, and returns a list of all prime numbers less than or equal to `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Example Given `n = 11`, the function should return `[2, 3, 5, 7, 11]`, because these are the prime numbers less than or equal to `11`. - **Note**: The test cases will have a large value of `n`. An efficient algorithm such as the Sieve of Eratosthenes is recommended to achieve the required performance.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n. Uses the Sieve of Eratosthenes algorithm for efficient computation. if n < 2: return [] sieve = [True] * (n + 1) sieve[0], sieve[1] = False, False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n+1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"In a fantasy game, there is a warrior who has to pass through several doors to reach the treasure. Each door has a certain strength level and the warrior has the ability to break through a door if his strength is at least equal to the door\'s strength level. However, if the warrior tries to break through and fails, his strength decreases by 1 for every attempt at a door he cannot break. The doors must be attempted in sequence and he may not skip any door. The warrior can rest temporarily to increase his strength by any positive integer amount. Your task is to determine the minimum initial strength the warrior needs so that he can break through all doors without resting. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the number of doors. - The second line contains N space-separated integers D_1, D_2, ldots, D_N representing the strength levels of each door in sequence. -----Output----- For each test case, print a single line containing one integer ― the minimum initial strength the warrior needs to break through all doors without resting. -----Constraints----- - 1 le T le 5 - 1 le N le 10^5 - 1 le D_i le 10^5 for each valid i -----Example Input----- 2 5 1 3 2 5 4 4 4 2 3 1 -----Example Output----- 3 4 -----Explanation----- Example case 1: The warrior needs an initial strength of at least 3 to break through all doors in sequence: - With strength 3: breaks door 1 - With strength 3: breaks door 2 - With strength 3: breaks door 3 - With strength 3: fails at door 4 (strength decreases to 2) - With strength 2: fails again at door 4 (strength decreases to 1) - With strength 1: fails again at door 4 (strength decreases to 0, not allowed as strength cannot be less than required to break any door) Example case 2: The warrior needs an initial strength of at least 4 to break through all doors in sequence: - With strength 4: breaks door 1 - With strength 4: breaks door 2 - With strength 4: breaks door 3 - With strength 4: breaks door 4","solution":"def min_initial_strength(T, test_cases): results = [] for case in test_cases: N, doors = case max_door_strength = max(doors) results.append(max_door_strength) return results # Function to parse input and provide output in the desired format def main(input_str): input_list = list(map(str.strip, input_str.strip().split(\\"n\\"))) T = int(input_list[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_list[index]) doors = list(map(int, input_list[index + 1].split())) test_cases.append((N, doors)) index += 2 results = min_initial_strength(T, test_cases) return \\"n\\".join(map(str, results))"},{"question":"Given a positive integer `n`, determine if it is possible to re-arrange the digits of `n` to form a palindrome. A palindrome is a number that reads the same backward as forward. If it is possible to re-arrange the digits to form such a number, return `True`. Otherwise, return `False`. For example: - `can_form_palindrome(121)` should return `True` because \\"121\\" is already a palindrome. - `can_form_palindrome(12312)` should return `True` because it can be rearranged to \\"12321\\" or \\"32123\\". - `can_form_palindrome(123)` should return `False` because no re-arrangement of \\"123\\" can form a palindrome. # Constraints: - The number `n` will always be a positive integer. - `n` can be very large. Write the function `can_form_palindrome(n: int) -> bool` which returns `True` if the digits of `n` can be re-arranged to form a palindrome and `False` otherwise.","solution":"def can_form_palindrome(n): Returns True if the digits of the positive integer n can be re-arranged to form a palindrome, False otherwise. from collections import Counter digit_counts = Counter(str(n)) # A number can form a palindrome if at most one digit has an odd count. odd_count = sum(1 for count in digit_counts.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given a list of integers `nums` and an integer `k`. Design an algorithm to find the `k`-th largest element in the list. Your solution should follow these requirements: - If there are duplicate elements in the list, they should be considered separately. For example, in the list `[3, 2, 1, 5, 5, 5, 5]`, the 3rd largest element is 5, while the 4th largest is also 5. - The function should be optimized for time complexity, particularly considering the worst-case scenario. Write a function `findKthLargest(nums, k)` that takes in: - `nums` (List[int]): A list of integers. - `k` (int): The position (1-based) of the element you need to find. The function should return: - (int): The `k`-th largest element in the list `nums`. # Example Example 1: ``` Input: nums = [3, 2, 1, 5, 6, 4], k = 2 Output: 5 Explanation: The list sorted in descending order is [6, 5, 4, 3, 2, 1], so the 2nd largest element is 5. ``` Example 2: ``` Input: nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4 Output: 4 Explanation: The list sorted in descending order is [6, 5, 5, 5, 4, 3, 3, 2, 2, 1], so the 4th largest element is 4. ``` # Constraints - The length of `nums` will be in the range `[1, 10^4]`. - The value of elements in `nums` will be in the range `[-10^4, 10^4]`. - `k` will be in the range `[1, nums.length]`.","solution":"import heapq def findKthLargest(nums, k): Find the k-th largest element in the list nums. # Transform list into a min-heap heapq.heapify(nums) # Convert the min-heap to a max-heap by making elements negative nums = [-num for num in nums] heapq.heapify(nums) # Extract k elements from the heap to find the k-th largest for _ in range(k - 1): heapq.heappop(nums) return -heapq.heappop(nums)"},{"question":"It\'s festival season and you are on a tour of FestiCity, a city designed in a grid pattern where each block is represented by a 2-D Matrix. Each block in FestiCity has a certain cultural significance, indicated by their impact values which can either be positive (high cultural significance) or negative (low cultural significance). The city council of FestiCity wants to identify clusters of blocks with the highest cultural significance for organizing the main festival events. They decided to hire you to find the largest sum submatrix in the given grid. The submatrix should have the maximum sum of impact values among all possible submatrices. -----Input:----- The first line consists of two space-separated integers m and n, indicating the number of rows and columns, respectively, in FestiCity\'s grid. The next m lines consist of n space-separated integers ci indicating the impact values in each block (forming the matrix). -----Output:----- Print the blocks (represented by their cultural impact values) which form the submatrix with the highest cultural significance. -----Constraints----- - 1 leq m,n leq 300 - -10^5 leq ci leq 10^5 -----Sample Input:----- 4 4 1 2 -1 -4 -8 3 4 2 3 8 -10 1 1 -4 7 -6 -----Sample Output:----- 3 4 8 -10 -4 7","solution":"def find_max_sum_submatrix(grid): m = len(grid) n = len(grid[0]) max_sum = float(\'-inf\') best_left = best_right = best_up = best_down = 0 for left in range(n): temp = [0] * m for right in range(left, n): for i in range(m): temp[i] += grid[i][right] current_sum = 0 start = 0 for end in range(m): current_sum += temp[end] if current_sum > max_sum: max_sum = current_sum best_left, best_right = left, right best_up, best_down = start, end if current_sum < 0: current_sum = 0 start = end + 1 # Output the resulting submatrix submatrix = [] for i in range(best_up, best_down + 1): submatrix.append(grid[i][best_left:best_right + 1]) for row in submatrix: print(\\" \\".join(map(str, row))) # Sample Input grid = [ [1, 2, -1, -4], [-8, 3, 4, 2], [3, 8, -10, 1], [1, -4, 7, -6] ] find_max_sum_submatrix(grid)"},{"question":"Given an array of integers, can you find the length of the longest subarray that contains at most two distinct integers? In other words, you want to maximize the length of the subarray that holds no more than two unique values. If there are multiple subarrays with the same maximum length, choose any one of them. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each test case contains two lines: - The first line contains an integer N (length of the array). - The second line contains N space-separated integers representing the elements of the array. -----Output----- For each test case, output a single line containing the answer for the respective test case. -----Constraints----- - 1 ≤ T ≤ 105 - 1 ≤ N ≤ 105 - 1 ≤ array elements ≤ 10^9 - The total input size for all test cases in a single test file is at most 3Mb -----Example----- Input: 3 6 1 2 1 2 3 4 4 1 2 2 1 5 5 5 5 5 5 Output: 4 4 5 -----Explanation----- Example case 1: The longest subarray with at most two distinct integers is [1, 2, 1, 2], whose length is 4. Example case 2: The longest subarray with at most two distinct integers is [1, 2, 2, 1], whose length is 4. Example case 3: The longest subarray with at most two distinct integers is [5, 5, 5, 5, 5], whose length is 5.","solution":"def longest_subarray_with_two_distinct(nums): Given an array of integers, return the length of the longest subarray that contains at most two distinct integers. n = len(nums) if n == 0: return 0 max_length = 0 left = 0 count = {} for right in range(n): if nums[right] in count: count[nums[right]] += 1 else: count[nums[right]] = 1 while len(count) > 2: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length def process_queries(T, query_list): results = [] for i in range(T): N = query_list[i][0] array = query_list[i][1] result = longest_subarray_with_two_distinct(array) results.append(result) return results"},{"question":"You are given an array of integers representing the digits of a large number. Starting from the leftmost digit, check if you can partition the array into one or more subarrays such that each subarray forms a number that is divisible by a given divisor. Return a boolean indicating whether such a partition is possible. **Examples:** ``` canPartition([1,0,2,4], 4) = true (can be partitioned as [10, 24], both 10 and 24 are divisible by 4) canPartition([7,3,1,6], 3) = false (no valid partition that forms numbers all divisible by 3) canPartition([8,1,2,0], 2) = true (can be partitioned as [8, 120] or [8, 1, 20] or [8, 12, 0], all numbers divisible by 2) ``` Digits array will always contain at least 1 and at most 100 digits. The given divisor will always be a positive integer less than or equal to 100.","solution":"def canPartition(digits, divisor): Returns whether a partition is possible such that each subarray forms a number divisible by the given divisor. def is_valid_partition(index): if index == len(digits): return True num = 0 for i in range(index, len(digits)): num = num * 10 + digits[i] if num % divisor == 0: if is_valid_partition(i + 1): return True return False return is_valid_partition(0)"},{"question":"An office building has N floors, each floor contains M rooms. The building management wants to clean all the rooms in the quickest way possible. However, there is a special condition: the rooms that are cleaned on the same day should not share the same floor and not have adjacent room numbers. For example, if room i on floor j is cleaned, then room i-1 and room i+1 on any floor j can\'t be cleaned on the same day. Given N and M, determine the minimum number of days required to clean all the rooms in the building and the rooms that should be cleaned on each of these days. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case is described on a line containing two space-separated integers N (number of floors) and M (number of rooms per floor). -----Output----- For each test case: - First, print a line containing a single integer K ― the minimum number of days required to clean the building. Let\'s number these days 1 through K. - Then, print K lines describing the rooms to clean on each day. For each valid d, the d-th of these lines should contain an integer C_d followed by C_d space-separated pairs of integers. Each pair (i, j) denotes the room j on floor i. If there are multiple solutions with the minimum number of days, you may print any one. -----Constraints----- - 1 le T le 10 - 1 le N, M le 100 -----Example Input----- 1 3 4 -----Example Output----- 2 3 1 2 1 4 2 2 3 1 1 1 3 2 4 -----Explanation----- Example case 1: - On the first day, clean rooms 2 and 4 on the first floor and room 2 on the second floor. - On the second day, clean rooms 1 and 3 on the first floor and room 4 on the second floor. There are other valid solutions as well.","solution":"def cleaning_schedule(T, test_cases): Function to determine the cleaning schedule. Args: - T (int): number of test cases. - test_cases (list of tuples): each tuple contains two integers N (number of floors) and M (number of rooms per floor). Returns: - list of tuples: each tuple contains the number of days and the schedule for cleaning. results = [] for N, M in test_cases: days = 2 day1_rooms = [] day2_rooms = [] for i in range(1, N+1): for j in range(1, M+1): if j % 2 == 0: day1_rooms.append((i, j)) else: day2_rooms.append((i, j)) results.append((days, day1_rooms, day2_rooms)) return results"},{"question":"# Story The city of Algonia is famous for its complex network of streets. The city council has decided to improve navigation within the city by installing new directional signs in the intersections. Each intersection can be visualized as a node, and each street as an edge in an undirected graph. The city council needs a way to identify the shortest path between two crucial locations: the city hall and the market. They will then install signposts along this shortest route. Your task is to develop the algorithm that finds this shortest path. # Input You will receive: 1. A single integer `n` representing the number of intersections. 2. A list of edges where each edge is represented by a tuple `(u, v, w)`: - `u` and `v` are the intersections that the street connects. - `w` is the weight or length of the street. The intersections are numbered from `0` to `n-1`. The city hall is at intersection `0` and the market is at intersection `n-1`. # Output Return the list of intersections representing the shortest path from the city hall to the market. If there\'s no path, return an empty list. # Example ``` Input: 5 [(0, 1, 2), (0, 2, 4), (1, 2, 1), (1, 3, 7), (2, 3, 3), (3, 4, 1)] Output: [0, 1, 2, 3, 4] ``` # Notes - If there are multiple shortest paths, return any one of them. - Assume the graph does not contain negative weight edges. - Ensure your solution efficiently handles inputs where the number of intersections `n` can be reasonably large, up to `1000`.","solution":"import heapq def shortest_path(n, edges): from collections import defaultdict # Create adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find shortest path from 0 to n-1 def dijkstra(source, target): heap = [(0, source, [])] visited = set() while heap: cost, node, path = heapq.heappop(heap) if node in visited: continue visited.add(node) path = path + [node] if node == target: return path for neighbor, weight in graph[node]: if neighbor not in visited: heapq.heappush(heap, (cost + weight, neighbor, path)) return [] return dijkstra(0, n-1)"},{"question":"Write a function to rearrange the elements of an integer array so that all negative numbers appear before all the positive numbers. The relative order of the negative numbers and positive numbers should be preserved, meaning negative numbers should maintain their given order and positive numbers should maintain their given order. For example: Given the input array `[1, -2, 3, -4, 5, -6]`, your function should rearrange it in-place to `[-2, -4, -6, 1, 3, 5]`. Your function should not return anything. Instead, modify the input array directly. Use optimal space complexity of O(1) (i.e., in-place modification).","solution":"def rearrange_by_sign(arr): Rearrange the elements of an integer array so that all negative numbers appear before all positive numbers. The relative order of the negative numbers and positive numbers should be preserved. :param arr: List of integers if not arr: return n = len(arr) j = 0 # index to place the next negative number # Use two-pointer technique to rearrange array for i in range(n): if arr[i] < 0: # If the element is negative, move to the front maintaining the order of appearance item = arr[i] arr.pop(i) arr.insert(j, item) j += 1"},{"question":"In a town, there is a popular food delivery service. They use a circular route to deliver food, starting and ending at the same point. There are n delivery points on this circular route. Each delivery point is represented by an integer distance d, which is the distance from the starting point. The route is circular, so after the last delivery point, the next point is the starting point at distance 0. The delivery service wants to know the minimum delivery route distance required to completely cover all delivery points from the starting point and back to the starting point. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of delivery points. The second line contains n space-separated integers d_1, d_2, ..., d_n (0 ≤ d_{i} < 10^9) — the distances of the delivery points from the starting point. -----Output----- Print a single integer — the minimum delivery route distance required to return to the starting point after covering all delivery points. -----Examples----- Input 4 1 3 7 8 Output 7 Input 6 2 5 8 12 15 19 Output 17 Input 3 0 4 9 Output 5 -----Note----- For the first example, the optimal path could be going directly from 0 to 1, then to 3, 7, 8, and back to start point 0. The distances are (8-1) and (8-0) which gives 7. For the second example, covering points in order results in 0 -> 2 -> 5 -> 8 -> 12 -> 15 -> 19 -> 0 gives total distance of 19. For the third example, the distance between 0 and the farthest point 9 is effectively the diameter of the circle, and the shortest way to cover all points and return is covering the half of the circle, which is 5.","solution":"def minimum_delivery_route(n, delivery_points): Returns the minimum delivery route distance required to return to the starting point after covering all delivery points. if n == 1: return 0 delivery_points.sort() # The farthest point is the difference between the last and the first point in sorted order. farthest_distance = delivery_points[-1] - delivery_points[0] # The possible minimum route distance will be either: # 1. Twice the maximum gap (because we go to the farthest point and back) # 2. The direct difference to cover from start to the farthest point. return max(farthest_distance, delivery_points[-1] - delivery_points[0]) # Example usage n = 4 delivery_points = [1, 3, 7, 8] print(minimum_delivery_route(n, delivery_points)) # Should print 7"},{"question":"Create a function `isAnagram` that determines if two given strings are anagrams of each other (case insensitive). ```racket In Racket, the function is called anagram? (anagram? \\"Listen\\" \\"Silent\\") ; returns #t (anagram? \\"Hello\\" \\"World\\") ; returns #f ```","solution":"def isAnagram(str1, str2): Determines if two given strings are anagrams of each other (case insensitive). # Convert both strings to lower case to make the function case insensitive str1 = str1.lower() str2 = str2.lower() # Sort the characters of both strings sorted_str1 = sorted(str1) sorted_str2 = sorted(str2) # Compare the sorted characters return sorted_str1 == sorted_str2"},{"question":"You are given a grid with several circular regions scattered across it. Each circular region is defined by its center coordinates and a radius. Your task is to determine if there\'s any pair of circles that overlap. Two circles overlap if they intersect at any point (i.e., the distance between their centers is less than the sum of their radii). ----- Input ----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of circles on the grid. Each of the next n lines contains three integers x, y, and r (|x|, |y| ≤ 10^9, 1 ≤ r ≤ 10^9) representing the x-coordinate, y-coordinate of the center, and the radius of the circle, respectively. ----- Output ----- Print \\"YES\\" if there is at least one pair of circles that overlap. Otherwise, print \\"NO\\". ----- Example ----- Input 3 0 0 3 10 10 2 5 5 7 Output YES Input 2 -10 -10 2 10 10 2 Output NO","solution":"def check_circle_overlap(circles): Checks if there is any pair of overlapping circles. Parameters: circles (list of tuples): A list of tuples where each tuple contains (x, y, r) representing the center and radius of a circle. Returns: str: \'YES\' if at least one pair of circles overlap, otherwise \'NO\' from math import sqrt n = len(circles) for i in range(n): for j in range(i + 1, n): x1, y1, r1 = circles[i] x2, y2, r2 = circles[j] # Calculate the distance between the centers of the circles distance = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) # Check if circles overlap if distance < r1 + r2: return \\"YES\\" return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) circles = [] for i in range(1, len(data), 3): x = int(data[i]) y = int(data[i + 1]) r = int(data[i + 2]) circles.append((x, y, r)) result = check_circle_overlap(circles) print(result)"},{"question":"You are given an integer array arr consisting of N integers. Your task is to rearrange the elements of the array such that the absolute difference between any two adjacent elements is minimized. For example, if `arr = [1, 3, 2, 4]`, one valid output could be `[1, 2, 3, 4]`. -----Input----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains the single integer N denoting the size of the array. The second line contains N space-separated integers representing the elements of the array. -----Output----- For each test case, output a single line containing the rearranged array. -----Constraints----- - 1 ≤ T ≤ 50 - 2 ≤ N ≤ 100 - -1000 ≤ arr[i] ≤ 1000 -----Example----- Input: 2 4 1 3 2 4 5 10 -10 5 7 3 Output: 1 2 3 4 -10 3 5 7 10 -----Explanation----- Example case 1. By sorting the array, we get [1, 2, 3, 4], which has the minimal adjacent absolute differences. Example case 2. Sorting the array gives [-10, 3, 5, 7, 10].","solution":"def rearrange_array(arr): Rearranges the elements of the array such that the absolute difference between any two adjacent elements is minimized. Args: arr : list of int Returns: list of int return sorted(arr)"},{"question":"A factory has n machines arranged in a line, with each machine requiring maintenance after completing some number of tasks. The factory operates in such a way that each machine can pass tasks to its neighboring machines (the adjacent one on the left or the right). Each machine can handle and pass exactly one task per unit time. The factory owner wants to ensure that all machines receive a specified number of tasks (based on their individual capacities) efficiently. You are required to determine the minimum total number of unit time required to complete distributing tasks to all machines given the machine capacities. Each machine is guaranteed to receive tasks from either left or right neighboring machines, and tasks can be passed along multiple machines if necessary. Input - The first line contains an integer n (2 <= n <= 100,000), the number of machines. - The second line contains n space-separated integers, where the i-th integer represents the task capacity t_i (1 <= t_i <= 10^4) of the i-th machine. Output - Print a single integer, the minimum total time units required to distribute tasks to all machines according to their capacities. Example # Input ``` 3 2 3 1 ``` # Output ``` 3 ``` # Input ``` 5 4 1 2 3 5 ``` # Output ``` 7 ``` # Explanation In the first example with 3 machines, machine 1 requires 2 tasks, machine 2 requires 3 tasks, and machine 3 requires 1 task: - At unit time 1: All tasks are directly provided to the machines, which happens concurrently (total 3 tasks in 1 unit). - Hence, the total time taken is 3 units. In the second example with 5 machines, the minimum time units required can be strategically minimized by taking the following approach: - In 1st unit time, each machine receives its initial task as per their capacities wherever possible. - Tasks are then passed along to accommodate subsequent requirements in the minimum time. Note: Optimal approaches involve a mix of direct task issuing and passing tasks through neighboring machines to achieve minimal time distribution.","solution":"def min_total_time(n, capacities): Returns the minimum total number of unit time required to distribute tasks to all machines according to their capacities. return sum(capacities)"},{"question":"You are tasked with developing a function that generates a particular type of patterned sequence, often called a \\"wave\\" pattern, based on an input string. The wave pattern is created by capitalizing a single letter in the string while keeping the rest of the letters lowercased, iterating through each letter of the string. For example, given the string \\"hello\\", the wave pattern should be: ``` [ \\"Hello\\", \\"hEllo\\", \\"heLlo\\", \\"helLo\\", \\"hellO\\" ] ``` # Detailed Requirements: 1. The input will be a single string consisting of alphabetic characters only. 2. The output should be an array of strings, where each string has exactly one letter in uppercase and all other letters in lowercase. 3. The capitalization should progress from the first letter to the last letter. # Function Signature: ```python def wave(word: str) -> list: pass ``` # Example ```python print(wave(\\"world\\")) # Output: [\\"World\\", \\"wOrld\\", \\"woRld\\", \\"worLd\\", \\"worlD\\"] ``` # Constraints: - The input string will have a length between 1 and 100 characters. - The input string will contain only alphabetic characters (no spaces or punctuation). Your task is to implement the `wave` function that generates the described wave pattern.","solution":"def wave(word: str) -> list: Generates a wave pattern for the given word where each letter is capitalized one by one in separate strings. Args: word (str): The input word. Returns: list: A list containing the wave pattern. wave_pattern = [] for i in range(len(word)): if word[i].isalpha(): waved_word = word[:i].lower() + word[i].upper() + word[(i + 1):].lower() wave_pattern.append(waved_word) return wave_pattern"},{"question":"You are given a list of non-negative integers representing the heights of columns where each width of the column is 1. Write a function to find the maximum amount of water that can be trapped within these columns after it rains. Example: Input: [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Explanation: The columns form a container that can hold 6 units of water. The trapped water is calculated at positions with indices 2, 5, 6, and 9, contributing to a total of 6 units of water. Note: You may not accumulate water on column positions with heights at the boundaries of the list.","solution":"def trap(height): Given a list of non-negative integers representing the heights of columns, returns the maximum amount of water that can be trapped after it rains. if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Fill left_max array left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) # Fill right_max array right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) # Calculate the trapped water for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"You are given a line of people standing in sequentially numbered positions. Each person has a specific height represented as an integer. Your task is to find the maximum number of people that can form a strictly increasing height sequence from left to right. A strictly increasing sequence means that for every person in the sequence, the next person must be taller than the previous one. # Input - An array of integers where each integer represents the height of a person in that position. # Output - An integer representing the maximum number of people that can form a strictly increasing sequence of heights. # Example ```python Input: [3, 4, 5, 1, 2, 8] Output: 5 Explanation: The subsequences with the maximum length are [1, 2, 8] and [3, 4, 5, 8], both of length 4. Input: [10, 22, 9, 33, 21, 50, 41, 60] Output: 5 Explanation: The subsequence with the maximum length is [10, 22, 33, 50, 60]. Input: [5, 3, 4, 8, 6, 7] Output: 4 Explanation: The subsequence with the maximum length is [3, 4, 6, 7] or [3, 4, 8]. ``` # Constraints - The number of people is at least 1 and at most 1000. - Each height is a positive integer not exceeding 10000.","solution":"def longest_increasing_subsequence(heights): Returns the length of the longest strictly increasing subsequence of heights. if not heights: return 0 # Array to store the length of the longest increasing subsequence up to each position lis = [1] * len(heights) # Build the `lis` array for i in range(1, len(heights)): for j in range(i): if heights[i] > heights[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"# Palindrome Finder A palindrome is a word, number, phrase, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, \\"A man, a plan, a canal, Panama!\\" is a palindrome. The Task Write a function `findLongestPalindrome` that takes a string and returns the longest palindrome subsequence within that string. If there are multiple longest palindromes of the same length, return the first one encountered. Example ```python findLongestPalindrome(\\"I saw a racecar driving at noon\\") => \\"racecar\\" findLongestPalindrome(\\"No lemon, no melon\\") => \\"nolemonnomelon\\" ``` Considerations - Your solution should ignore spaces, punctuation, and capitalization. - You should handle cases where no palindrome longer than 1 character is present. - Think about optimizing your approach for longer strings. Function Signature ```python def findLongestPalindrome(s: str) -> str: # Your code here ``` # Goal Ensure your solution efficiently handles large strings and accurately identifies the longest palindrome subsequence based on the criteria specified. Consider edge cases such as empty strings or strings without palindromic sequences.","solution":"import re def findLongestPalindrome(s: str) -> str: def clean_string(s): return re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() def is_palindrome(s): return s == s[::-1] cleaned_s = clean_string(s) n = len(cleaned_s) max_length = 0 longest_palindrome = \\"\\" for i in range(n): for j in range(i, n): substring = cleaned_s[i:j+1] if is_palindrome(substring) and len(substring) > max_length: max_length = len(substring) longest_palindrome = substring return longest_palindrome"},{"question":"Given a string that represents a mathematical expression containing positive integers and operators `+`, `-`, `*`, and `/`, evaluate the expression and return the result as an integer. The expression will be fully parenthesized, meaning every operator will have its operands enclosed in parentheses. For example: - \\"1 + 2\\" should be \\"3\\" - \\"( 1 + 2 + 3 )\\" should be \\"6\\" - \\"( ( 1 + 2 ) * ( 3 - 1 ) )\\" should be \\"6\\" - \\"( ( 2 + 3 ) / 5 )\\" should be \\"1\\" The function should respect the precedence of the operators and the parentheses. Implement a function: ```python def evaluate_expression(expression: str) -> int: pass ``` **Constraints:** - The input string will always be a valid, fully parenthesized mathematical expression. - The evaluation should be done using integer division when the `/` operator is encountered. - Assume no spaces in the input string between numbers and operators, except for parentheses and operators. Write the function to evaluate the given string expression and output the correct integer result.","solution":"def evaluate_expression(expression: str) -> int: def helper(s): stack = [] num = 0 prev_op = \'+\' while len(s) > 0: c = s.pop(0) if c.isdigit(): num = num * 10 + int(c) if c == \'(\': num = helper(s) if (not c.isdigit() and c != \' \' and c != \'(\') or len(s) == 0: if prev_op == \'+\': stack.append(num) elif prev_op == \'-\': stack.append(-num) elif prev_op == \'*\': stack.append(stack.pop() * num) elif prev_op == \'/\': stack.append(int(stack.pop() / num)) # integer division prev_op = c num = 0 if c == \')\': break return sum(stack) return helper(list(expression)) # Examples print(evaluate_expression(\\"1+2\\")) # Output: 3 print(evaluate_expression(\\"(1+2+3)\\")) # Output: 6 print(evaluate_expression(\\"((1+2)*(3-1))\\")) # Output: 6 print(evaluate_expression(\\"((2+3)/5)\\")) # Output: 1"},{"question":"# Longest Substring with K Distinct Characters You are given a string and an integer `k`. Find the length of the longest substring that contains exactly `k` distinct characters. Example: Given the string `\\"eceba\\"` and `k = 2`, the longest substring with exactly 2 distinct characters is `\\"ece\\"` which has a length of 3. Given the string `\\"aa\\"` and `k = 1`, the longest substring with exactly 1 distinct character is `\\"aa\\"` which has a length of 2. Write a function that, given a string and an integer `k`, returns the length of the longest substring with exactly `k` distinct characters. You can assume that the input string contains only lowercase alphabets and the value of `k` is always less than or equal to the number of unique characters in the string. ```python def longest_substring_with_k_distinct(s: str, k: int) -> int: # Your implementation here pass ``` Example Usage: ```python print(longest_substring_with_k_distinct(\\"eceba\\", 2)) # Output: 3 print(longest_substring_with_k_distinct(\\"aa\\", 1)) # Output: 2 ```","solution":"def longest_substring_with_k_distinct(s: str, k: int) -> int: from collections import defaultdict if k == 0: return 0 window_start = 0 max_length = 0 char_frequency = defaultdict(int) for window_end in range(len(s)): right_char = s[window_end] char_frequency[right_char] += 1 while len(char_frequency) > k: left_char = s[window_start] char_frequency[left_char] -= 1 if char_frequency[left_char] == 0: del char_frequency[left_char] window_start += 1 max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"You are given an integer array of size N. You need to handle two types of operations on this array: - Increment L R X: Increment each element in the range [L, R] (inclusive) by X. - Query L R: Compute the sum of the elements in the range [L, R] (inclusive). Write a program that processes a sequence of these operations. -----Input----- The first line of input contains two space-separated integers N and Q, denoting the size of the array and the number of operations respectively. The second line contains N space-separated integers representing the initial values of the array. Each of the following Q lines describe an operation in one of the two formats described above. -----Output----- For each Query operation, output a single line containing the sum of the elements in the specified range. -----Constraints----- - 1 ≤ N ≤ 100000 - 1 ≤ Q ≤ 100000 - 1 ≤ L, R ≤ N - 1 ≤ X ≤ 1000 - The initial values of the array and X are between -100000 and 100000. -----Example----- Input: 5 4 1 2 3 4 5 Increment 1 3 2 Query 2 4 Increment 2 5 1 Query 1 5 Output: 12 20 -----Explanation----- Initial array: [1, 2, 3, 4, 5] After Increment 1 3 2: [3, 4, 5, 4, 5] Query 2 4 returns the sum of [4, 5, 4] = 13 After Increment 2 5 1: [3, 5, 6, 5, 6] Query 1 5 returns the sum of [3, 5, 6, 5, 6] = 25","solution":"class OperationHandler: def __init__(self, N, initial_array): self.N = N self.array = initial_array def increment(self, L, R, X): for i in range(L-1, R): self.array[i] += X def query(self, L, R): return sum(self.array[L-1:R])"},{"question":"You are given a positive integer. Your task is to find the smallest integer greater than the given number that is a palindrome. The number itself is not considered a valid answer if it is already a palindrome. A palindrome is a number that reads the same forwards and backwards, like `121` or `1331`. # Input: A positive integer `n` (1 ≤ n ≤ 10^6) # Output: The smallest palindrome greater than `n`. # Example Input: ``` 123 ``` Output: ``` 131 ``` Input: ``` 989 ``` Output: ``` 999 ``` Input: ``` 120 ``` Output: ``` 121 ```","solution":"def next_palindrome(n): Returns the smallest palindrome greater than the given number `n`. def is_palindrome(x): s = str(x) return s == s[::-1] num = n + 1 while True: if is_palindrome(num): return num num += 1"},{"question":"You are tasked with organizing a digital music playlist. Each track in the playlist can be categorized into genres such as pop, rock, jazz, classical, etc. The system that powers your music library identifies each track by a unique ID and genre. Given a list of track IDs and their respective genres, you want to create a summary that indicates the count of tracks in each genre. Write a function `genreCount(tracks: List[Tuple[str, str]]) -> Dict[str, int]` where: - `tracks` is a list of tuples, each containing a track ID (a unique identifier represented as a string) and a genre (also a string). - The function should return a dictionary where the keys are the genres and the values are the counts of tracks in each genre. For example, ``` tracks = [ (\\"track1\\", \\"pop\\"), (\\"track2\\", \\"rock\\"), (\\"track3\\", \\"pop\\"), (\\"track4\\", \\"jazz\\"), (\\"track5\\", \\"classical\\"), (\\"track6\\", \\"rock\\") ] genreCount(tracks) --> { \\"pop\\": 2, \\"rock\\": 2, \\"jazz\\": 1, \\"classical\\": 1 } ``` The genres should be considered case-insensitive, meaning that \\"Pop\\" and \\"pop\\" should be counted as the same genre. The resulting dictionary should have genres in lowercase. To summarize, you need to: 1. Iterate through the list of tracks. 2. Count the occurrences of each genre, treating genres as case-insensitive. 3. Return the counts as a dictionary with genres in lowercase.","solution":"from typing import List, Tuple, Dict def genreCount(tracks: List[Tuple[str, str]]) -> Dict[str, int]: Returns a dictionary with counts of tracks for each genre, treating genres as case-insensitive. genre_counter = {} for track_id, genre in tracks: genre_lower = genre.lower() if genre_lower in genre_counter: genre_counter[genre_lower] += 1 else: genre_counter[genre_lower] = 1 return genre_counter"},{"question":"Serena is organizing a race with her friends and needs to arrange the participants in the order they will compete. Each friend has a unique skill rating which determines their performance. Serena wishes to arrange them in such a way as to minimize the overall difference in the skill ratings of consecutive participants. -----Input----- The first line contains a single integer n (2 leqslant n leqslant 10^5) — the number of participants. The second line contains n integers a_1, a_2, ldots, a_n (1 leqslant a_i leqslant 10^9) — the skill ratings of the participants. -----Output----- Print a single line with n integers — the skill ratings of the participants arranged in the order that minimizes the total difference between the skill ratings of consecutive participants. -----Examples----- Input 5 4 2 1 3 6 Output 1 2 3 4 6 Input 3 10 1 20 Output 1 10 20 -----Note----- In the first example, arranging the skill ratings as 1, 2, 3, 4, 6 gives the minimum total difference, which is (2-1) + (3-2) + (4-3) + (6-4) = 1 + 1 + 1 + 2 = 5. In the second example, arranging the skill ratings as 1, 10, 20 gives the minimum total difference, which is (10-1) + (20-10) = 9 + 10 = 19.","solution":"def arrange_participants(skill_ratings): Arranges the skill ratings of participants in the order that minimizes the total difference between consecutive participants. Parameters: skill_ratings (list): A list of integers representing the skill ratings of participants. Returns: list: The skill ratings arranged to minimize the difference between consecutive participants. return sorted(skill_ratings)"},{"question":"You are given an array `a` consisting of `n` integers between `1` and `m` inclusive. Your task is to find an array `b` of length `m`, where each element `b[i]` represents the number of elements in `a` that are less than or equal to `i`. If there are no elements in `a` that are less than or equal to `i`, then `b[i]` should be `0`. -----Input----- The first line contains integer number `t` (1 le t le 10^4) — the number of test cases in the input. Then `t` test cases follow. Each test case starts with a line containing two integers `n` (1 le n le 10^5) and `m` (1 le m le 10^5) — the number of elements in array `a` and the maximum value in `a`. The second line of each test case contains `n` integers `a_1, a_2, dots, a_n` (1 le a_i le m) — the elements of array `a`. The sum of all values `n` over all the test cases in the input does not exceed 10^5. -----Output----- For each test case, print a single line containing `m` integers `b_1, b_2, dots, b_m` separated by spaces — the array `b` for the given test case. Each `b[i]` should represent the number of elements in `a` that are less than or equal to `i`. -----Example----- Input 2 5 5 1 2 1 3 2 4 3 1 3 3 2 Output 2 4 5 5 5 1 2 4 -----Note----- In the first test case of the example, for `b`: - `b[1]` = 2 (Two elements in `a` are less than or equal to `1`) - `b[2]` = 4 (Four elements in `a` are less than or equal to `2`) - `b[3]` = 5 (All elements in `a` are less than or equal to `3`) - `b[4]` = 5 (All elements in `a` are less than or equal to `4`) - `b[5]` = 5 (All elements in `a` are less than or equal to `5`) In the second test case of the example, for `b`: - `b[1]` = 1 (One element in `a` is less than or equal to `1`) - `b[2]` = 2 (Two elements in `a` are less than or equal to `2`) - `b[3]` = 4 (All elements in `a` are less than or equal to `3`)","solution":"def count_elements_less_equal(a, m): This function takes a list \'a\' of integers and a maximum value \'m\'. It returns a list \'b\' where each element \'b[i]\' represents the number of elements in \'a\' that are less than or equal to \'i\'. # Create a list to store the count of elements except initializing to zero. counts = [0] * (m + 1) # Count the frequency of each element in the array \'a\'. for num in a: counts[num] += 1 # Compute the cumulative count. cumulative_count = 0 result = [] for i in range(1, m + 1): cumulative_count += counts[i] result.append(cumulative_count) return result def solve(test_cases): results = [] for (n, m, a) in test_cases: b = count_elements_less_equal(a, m) results.append(b) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n, m = map(int, lines[index].split()) a = list(map(int, lines[index + 1].split())) test_cases.append((n, m, a)) index += 2 return test_cases"},{"question":"Given a string s, return the minimum number of operations required to delete all characters in the string. In one operation, you can choose a non-empty substring t of s such that all the characters in t are the same and remove it from s. Note: - The given string s can only contain lowercase English letters. - Constraints: 1 <= s.length <= 10^5 Example 1: Input: s = \\"aaabbcc\\" Output: 3 Explanation: One possible way to delete all characters is: 1- Delete substring \\"aaa\\" -> \\"bbcc\\" 2- Delete substring \\"bb\\" -> \\"cc\\" 3- Delete substring \\"cc\\" -> \\"\\" Example 2: Input: s = \\"abc\\" Output: 3 Explanation: One possible way to delete all characters is: 1- Delete substring \\"a\\" -> \\"bc\\" 2- Delete substring \\"b\\" -> \\"c\\" 3- Delete substring \\"c\\" -> \\"\\" Example 3: Input: s = \\"aabbccddeeff\\" Output: 6 Example 4: Input: s = \\"zzz\\" Output: 1","solution":"def min_operations_to_delete_string(s): Returns the minimum number of operations required to delete all characters in the string. if not s: return 0 # Initialize the count of operations with 1 (for the first character of any string) operations = 1 # Loop through the string and count transitions between different characters for i in range(1, len(s)): if s[i] != s[i - 1]: operations += 1 return operations"},{"question":"Given an array of integers, arr, representing stock prices on different days, you need to find and return the maximum profit you can make by completing at most two transactions. A transaction consists of buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at the same time, that is, you must sell the stock before you buy it again. -----Input:----- - The first line contains a single integer N, the length of the array arr. - The second line contains N integers representing the array arr of stock prices on different days. -----Output:----- - Print a single integer, the maximum profit you can achieve with at most two transactions. -----Constraints:----- - 1 leq N leq 10^5 - 0 leq arr[i] leq 10^5 -----Sample Input:----- 6 3 3 5 0 0 3 1 4 -----Sample Output:----- 6 -----Explanation:----- The trader can make a maximum profit by executing the following transactions: 1. Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3 - 0 = 3. 2. Buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4 - 1 = 3. Total profit = 3 + 3 = 6.","solution":"def max_profit_with_two_transactions(prices): if not prices or len(prices) < 2: return 0 N = len(prices) # Initialize arrays to store the maximum profit up to each day left_profits = [0] * N right_profits = [0] * N # Forward pass: calculate max profit if we only make one transaction until day i min_price = prices[0] for i in range(1, N): min_price = min(min_price, prices[i]) left_profits[i] = max(left_profits[i-1], prices[i] - min_price) # Backward pass: calculate max profit if we only make one transaction from day i to end max_price = prices[N-1] for i in range(N-2, -1, -1): max_price = max(max_price, prices[i]) right_profits[i] = max(right_profits[i+1], max_price - prices[i]) # Calculate the maximum profit by combining the two portions max_profit = 0 for i in range(N): max_profit = max(max_profit, left_profits[i] + right_profits[i]) return max_profit"},{"question":"A prestigious university is conducting a coding competition to find the most talented programmers among its students. The competition involves solving a series of complex problems, one of which is given below. Can you solve it and prove your coding prowess? You are given a sequence of integers. A sequence is said to be \\"harmonious\\" if and only if the absolute difference between the maximum and minimum integers in this sequence is exactly 1. Given a sequence, your task is to find the length of the longest harmonious subsequence from the given sequence. A subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input----- - The first line of the input contains an integer T, denoting the number of test cases. - Each of the next 2*T lines contains: - An integer N denoting the length of the sequence (1 ≤ N ≤ 2 × 10^5) - A sequence of N integers separated by space (-10^9 ≤ sequence[i] ≤ 10^9) -----Output----- For each test case, print the length of the longest harmonious subsequence. -----Constraints----- - 1 ≤ T ≤ 1000 - The total length of all sequences across all the test cases combined will not exceed 2 × 10^5. -----Example----- Input: 2 6 1 2 2 1 3 3 5 1 2 3 4 5 Output: 4 2 -----Explanation----- Example case 1. The sequence is 1 2 2 1 3 3. The longest harmonious subsequence is 1 2 2 1, with length 4. Example case 2. The sequence is 1 2 3 4 5. The longest harmonious subsequence is either 1 2 or 2 3 or 3 4 or 4 5, each with length 2.","solution":"def findLHS(sequence): Given a sequence of integers, this function finds the length of the longest harmonious subsequence. from collections import Counter freq = Counter(sequence) max_length = 0 for key in freq: if key + 1 in freq: max_length = max(max_length, freq[key] + freq[key + 1]) return max_length def longest_harmonious_subsequence(test_cases): For each test case, given a sequence of integers, this function finds the length of the longest harmonious subsequence. results = [] for case in test_cases: N, sequence = case results.append(findLHS(sequence)) return results"},{"question":"You are given a stream of integers, one by one. Implement the `RunningMedian` class which maintains and calculates the median of all elements seen so far in the stream. The `RunningMedian` class should have the following methods: 1. `__init__()`: Initializes the RunningMedian object. 2. `addNum(num: int)`: Adds the integer `num` to the stream of numbers. 3. `findMedian() -> float`: Returns the median of all elements seen so far. If the number of elements is odd, return the middle element. If the number of elements is even, return the average of the two middle elements. Example: ```python rm = RunningMedian() rm.addNum(1) print(rm.findMedian()) # Output: 1.0 rm.addNum(2) print(rm.findMedian()) # Output: 1.5 rm.addNum(3) print(rm.findMedian()) # Output: 2.0 ``` Note: - You may assume that the stream of integers will always have at least one number when `findMedian` is called. - All integers in the input will be in the range [-10^5, 10^5]. - The functionality should be optimized to handle at least 10^4 additions and median calculations efficiently.","solution":"import heapq class RunningMedian: def __init__(self): self.low = [] # Max-heap for the lower half of the numbers self.high = [] # Min-heap for the upper half of the numbers def addNum(self, num: int): heapq.heappush(self.low, -num) if self.low and self.high and (-self.low[0] > self.high[0]): heapq.heappush(self.high, -heapq.heappop(self.low)) if len(self.low) > len(self.high) + 1: heapq.heappush(self.high, -heapq.heappop(self.low)) if len(self.high) > len(self.low): heapq.heappush(self.low, -heapq.heappop(self.high)) def findMedian(self) -> float: if len(self.low) > len(self.high): return float(-self.low[0]) return (-self.low[0] + self.high[0]) / 2.0"},{"question":"You are given a string `s` consisting only of lowercase English letters. Your task is to find the first non-repeating character in `s` and return its index. If all characters are repeating, return `-1`. For the purpose of this problem, assume that the string length can vary between `1` and `100,000`. # Examples: ```plaintext Example 1: Input: s = \\"leetcode\\" Output: 0 Explanation: The first non-repeating character is \'l\' and it appears at index 0. Example 2: Input: s = \\"loveleetcode\\" Output: 2 Explanation: The first non-repeating character is \'v\' and it appears at index 2. Example 3: Input: s = \\"aabb\\" Output: -1 Explanation: There are no non-repeating characters in the string. ``` **Constraint:** The string is non-empty and contains only lowercase English letters. You need to implement a function: ```python def first_unique_char(s: str) -> int: # Your code here ```","solution":"def first_unique_char(s: str) -> int: Find the first non-repeating character in the string and return its index. If all characters are repeating, return -1. char_count = {} # Count the occurrences of each character for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first non-repeating character for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Implement a function that checks if a given string is a valid \\"XYZ-code\\". An \\"XYZ-code\\" is a string that follows these rules: 1. It must contain at least one \'X\', one \'Y\', and one \'Z\'. 2. \'X\', \'Y\', and \'Z\' must appear in the order \'X\', then \'Y\', then \'Z\' somewhere in the string. 3. The other characters in the string can be any characters but must not interfere with the order of \'X\', \'Y\', and \'Z\'. Your function should return `True` if the string is a valid \\"XYZ-code\\", or `False` otherwise. For example, isValidXYZCode(\\"abcXdefYghiZjkl\\") => `True` isValidXYZCode(\\"YabcXZ\\") => `False` isValidXYZCode(\\"ZZYX\\") => `False` isValidXYZCode(\\"XyyyyyZZZZZZ\\") => `False` isValidXYZCode(\\"abcX\\") => `False` Write a function `isValidXYZCode` that takes a string as input and returns a boolean value indicating whether it is a valid \\"XYZ-code\\".","solution":"def isValidXYZCode(s): Returns True if the string s is a valid \'XYZ-code\', False otherwise. found_X = found_Y = found_Z = False for char in s: if char == \'X\': found_X = True elif char == \'Y\' and found_X: found_Y = True elif char == \'Z\' and found_Y: found_Z = True break return found_X and found_Y and found_Z"},{"question":"You are given an array representing prices of different items in a shop. You want to buy exactly three items from the shop such that their total cost is minimized. Write a program that finds the minimum cost of three items from the array. -----Input----- The first line of input contains an integer t ( t<=100 ), the number of test cases. Each test case consists of two lines: - The first line of each test case contains an integer n ( 3 <= n <= 10000 ), the number of items in the array. - The second line contains n space-separated integers representing the prices of the items in the shop. -----Output----- For each test case, print a single integer which is the minimum possible cost of purchasing exactly three items. -----Constraints----- 1 <= Price of each item <= 10^9 -----Example----- Input: 2 5 1 2 3 4 5 3 10 20 30 Output: 6 60 -----Explanation----- Example case 1: We can choose items with prices 1, 2, and 3 to achieve the minimum total cost of 6. Example case 2: We have to choose all three items available, so the total cost is 10 + 20 + 30 = 60.","solution":"def min_cost_of_three_items(test_cases): result = [] for n, prices in test_cases: prices.sort() result.append(sum(prices[:3])) return result def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) prices = list(map(int, lines[index + 1].split())) test_cases.append((n, prices)) index += 2 return test_cases"},{"question":"Given an array of integers, a \\"hill\\" is defined as a set of consecutive integers in the array that steadily increases to a peak and then steadily decreases. A peak is the highest value in that set. For example, in the array `[2, 1, 4, 7, 3, 2, 5]`, the hills are `[1, 4, 7, 3, 2]` and `[2, 5]`. Write a function that returns the length of the longest hill in the array. If there are no hills, return 0. ``` Example 1: Input: [2, 1, 4, 7, 3, 2, 5] Output: 5 Explanation: The longest hill is [1, 4, 7, 3, 2] Example 2: Input: [1, 2, 3, 4, 5, 6] Output: 0 Explanation: There are no hills as it continuously increases. Example 3: Input: [4, 3, 2, 1] Output: 0 Explanation: There are no hills as it continuously decreases. Example 4: Input: [2, 1, 2, 1, 2, 1, 2, 1] Output: 3 Explanation: The longest hills are [1, 2, 1] repeated. ```","solution":"def longest_hill(arr): max_len = 0 n = len(arr) if n < 3: return 0 i = 1 while i < n - 1: if arr[i-1] < arr[i] > arr[i+1]: left = i - 1 while left > 0 and arr[left-1] < arr[left]: left -= 1 right = i + 1 while right < n - 1 and arr[right] > arr[right+1]: right += 1 current_len = right - left + 1 max_len = max(max_len, current_len) i = right else: i += 1 return max_len"},{"question":"Write a function that takes a string as input and returns whether it is a valid license plate number or not. A valid license plate number follows these rules: - It contains exactly 6 or 7 characters. - The first character must be an uppercase English letter. - The remaining characters must be all digits. Return `true` if the input string is a valid license plate, and `false` otherwise. Examples ``` \\"X123456\\" --> true \\"A12345\\" --> true \\"1234567\\" --> false \\"a123456\\" --> false \\"ABCDE12\\" --> false ```","solution":"def is_valid_license_plate(plate): Returns whether the input string is a valid license plate number or not. A valid license plate number follows these rules: - It contains exactly 6 or 7 characters. - The first character must be an uppercase English letter. - The remaining characters must be all digits. if len(plate) == 6 or len(plate) == 7: if plate[0].isupper() and plate[0].isalpha() and plate[1:].isdigit(): return True return False"},{"question":"The gardening club has planted a row of flowers along a straight garden path. Each flower is either blooming or not blooming. The club wants to know the maximum number of consecutive blooming flowers in the row. -----Input----- First, an integer n (1 ≤ n ≤ 1000) representing the number of flowers. Next, a string of n characters where each character is either \'B\' denoting a blooming flower or \'N\' denoting a not blooming flower. -----Output----- Output a single integer representing the maximum number of consecutive blooming flowers in the row. -----Example----- Input: 8 BBNNBBBN Output: 3","solution":"def max_consecutive_blooming(n, flower_row): Returns the maximum number of consecutive blooming flowers in the row. Parameters: n (int): The number of flowers. flower_row (str): A string representing the flowers where \'B\' is blooming and \'N\' is not blooming. Returns: int: The maximum number of consecutive blooming flowers. max_blooming = 0 current_blooming = 0 for flower in flower_row: if flower == \'B\': current_blooming += 1 max_blooming = max(max_blooming, current_blooming) else: current_blooming = 0 return max_blooming"},{"question":"In a secure messaging application, you need to implement a method to verify message integrity using a simplified hash function. The messages consist of only alphanumeric characters (both uppercase and lowercase) and spaces. A hash value for a message is calculated as follows: 1. Assign each character (case-sensitive) a value based on its position in the ASCII table. 2. Calculate the position of each character in the message, starting from 1. 3. The hash value is the sum of the products of each character\'s ASCII value and its position in the message. For example, consider the message \\"Hello World\\": - H = 72 (ASCII) - e = 101 (ASCII) - l = 108 (ASCII) - l = 108 (ASCII) - o = 111 (ASCII) - space = 32 (ASCII) - W = 87 (ASCII) - o = 111 (ASCII) - r = 114 (ASCII) - l = 108 (ASCII) - d = 100 (ASCII) The hash value calculation would be: - 1 * 72 + 2 * 101 + 3 * 108 + 4 * 108 + 5 * 111 + 6 * 32 + 7 * 87 + 8 * 111 + 9 * 114 + 10 * 108 + 11 * 100 = 72 + 202 + 324 + 432 + 555 + 192 + 609 + 888 + 1026 + 1080 + 1100 = 6480 Write a function that takes a message as input and returns its hash value. Ensure your function adheres to the constraints of using only alphanumeric characters and spaces. If the input contains any other characters, the function should return 0. Function signature: ```python def calculate_message_hash(message: str) -> int: pass ```","solution":"def calculate_message_hash(message: str) -> int: Calculate the hash value of a given message based on the ASCII values of the characters and their positions in the message. Parameters: message (str): The message to calculate the hash for. Returns: int: The calculated hash value, or 0 if the message contains invalid characters. allowed_chars = set(\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 \\") if any(char not in allowed_chars for char in message): return 0 hash_value = 0 for position, char in enumerate(message, start=1): hash_value += position * ord(char) return hash_value"},{"question":"Task Given an integer `n`, generate a square matrix filled with elements from 1 to `n^2` in spiral order. # Example For `n = 3`, the output should be: ``` [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] ``` For `n = 4`, the output should be: ``` [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] ``` # Input/Output - `[input]` integer `n` An integer `n` (1 <= n <= 20). - `[output]` a 2D list A 2D list where the numbers from 1 to `n^2` are arranged in a spiral order.","solution":"def generate_spiral_matrix(n): Generate a square matrix filled with elements from 1 to n^2 in spiral order. :param n: An integer determining the size of the matrix (1 <= n <= 20) :return: A 2D list representing the n x n spiral matrix if n < 1 or n > 20: raise ValueError(\\"n must be between 1 and 20 inclusive\\") # Initialize the n x n matrix with zeroes matrix = [[0] * n for _ in range(n)] # Define the initial boundaries of the spiral top, left = 0, 0 bottom, right = n - 1, n - 1 current_num = 1 while top <= bottom and left <= right: # Traverse from left to right along the top row for col in range(left, right + 1): matrix[top][col] = current_num current_num += 1 top += 1 # Traverse from top to bottom along the right column for row in range(top, bottom + 1): matrix[row][right] = current_num current_num += 1 right -= 1 if top <= bottom: # Traverse from right to left along the bottom row for col in range(right, left - 1, -1): matrix[bottom][col] = current_num current_num += 1 bottom -= 1 if left <= right: # Traverse from bottom to top along the left column for row in range(bottom, top - 1, -1): matrix[row][left] = current_num current_num += 1 left += 1 return matrix"},{"question":"Task You need to implement a function that converts a given string into a variation of \\"Run Length Encoding\\" (RLE), as well as a function that decodes the encoded string back to its original form. Objective In this variation of RLE, you will encode the input string such that each sequence of repeated characters is replaced by the character followed by the count of repetitions. The decoding function should revert the string to its initial form by expanding the characters according to the given count. # Encode function: The encode function should transform the input string into an encoded string using the described RLE variation. Here are the steps for encoding: 1. Initialize an empty result string and set the count to 1. 2. Traverse the input string, comparing each character with the next one. 3. If the current character matches the next one, increment the count. 4. If the current character does not match the next one or if it is the last character, append the current character and the count to the result string, then reset the count to 1. 5. Continue this process until the entire string is processed. # Decode function: The decode function should transform the encoded string back into the original string. Here are the steps for decoding: 1. Initialize an empty result string. 2. Traverse the encoded string, where each letter is followed by its repetition count. 3. For each pair of characters (a letter and a number), repeat the letter according to the number and append it to the result string. 4. Continue this process until the entire encoded string is processed. # Example Given the input string: `aaabccddddd` * Encoding: Step 1. `aaabccddddd` Step 2. `a3b1c2d5` Giving the encoded string: `a3b1c2d5` * Decoding: Input: `a3b1c2d5` Output: `aaabccddddd` # Functions ```python def encode(s: str) -> str: # Your code goes here def decode(s: str) -> str: # Your code goes here ``` # Requirements and Constraints: - The input string to the encode function will only contain lowercase English letters and will be non-empty. - The counts in the encoded string will be single digits (1-9), as there won\'t be more than 9 consecutive repeating characters. - You should handle both functions efficiently within a time complexity that is linear with respect to the size of the input string.","solution":"def encode(s: str) -> str: Encodes the input string using Run Length Encoding. Parameters: s (str): Input string consisting of lowercase English letters. Returns: str: Encoded string. if not s: return \\"\\" result = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: result.append(s[i - 1] + str(count)) count = 1 result.append(s[-1] + str(count)) return \'\'.join(result) def decode(s: str) -> str: Decodes the encoded string back to its original form. Parameters: s (str): Encoded string. Returns: str: Decoded (original) string. if not s: return \\"\\" result = [] for i in range(0, len(s), 2): char = s[i] count = int(s[i + 1]) result.append(char * count) return \'\'.join(result)"},{"question":"You have to create a function named isPalindrome. Write your function so that if a string or a number is passed in as the data, you will return a boolean indicating whether the data is a palindrome (reads the same forwards and backwards). If the data is any other type, return `False`. Examples of inputs and subsequent outputs: ``` \\"madam\\" -> True 12321 -> True [1, 2, 2, 1] -> False \\"hello\\" -> False ```","solution":"def isPalindrome(data): Returns True if the input data (string or number) is a palindrome, otherwise False. Returns False for any other type of data. # Check if the data is a string or an integer if isinstance(data, (str, int)): # Convert the data to a string and compare it with its reverse return str(data) == str(data)[::-1] else: # Return False for any other type of data return False"},{"question":"Given an array of integers A, return the maximum profit that can be achieved by buying and selling stocks. You are allowed to complete at most k transactions. Example 1: Input: A = [3,2,6,5,0,3], k = 2 Output: 7 Explanation: Buy on day 2 (price = 2), sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0), sell on day 6 (price = 3), profit = 3-0 = 3. Example 2: Input: A = [2,4,1], k = 2 Output: 2 Explanation: Buy on day 1 (price = 2), sell on day 2 (price = 4), profit = 4-2 = 2. Note: 1 <= A.length <= 500 0 <= A[i] <= 1000 1 <= k <= A.length","solution":"def maxProfit(k, prices): if not prices or k == 0: return 0 n = len(prices) # If k is greater than n//2, it is equivalent to infinite transactions if k >= n // 2: return sum(max(prices[i+1] - prices[i], 0) for i in range(n-1)) dp = [[0] * n for _ in range(k + 1)] for i in range(1, k + 1): max_so_far = -prices[0] for j in range(1, n): dp[i][j] = max(dp[i][j-1], prices[j] + max_so_far) max_so_far = max(max_so_far, dp[i-1][j] - prices[j]) return dp[k][n-1]"},{"question":"Alice is organizing a camping trip and wants to ensure she packs everything correctly. She has a checklist of items she needs to pack, and she also has a list of items she already packed in her backpack. She wants to know if she has packed all the required items from her checklist. Write a function to help Alice verify her packing. -----Input----- - The first line contains a single integer, T, which denotes the number of test cases. The description of each test case follows. - The first line of each test case contains a single integer, N, the number of items in the checklist. - The second line contains N space-separated strings, each representing an item in the checklist. - The third line contains an integer, M, the number of items already packed. - The fourth line contains M space-separated strings, each representing an item Alice has already packed. -----Output----- - For each test case, output the string \\"All items packed\\" if Alice has packed all the items in the checklist, or \\"Missing items\\" if she has not. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 100 - The strings will only contain lowercase alphabetic characters and will have lengths between 1 and 50 characters. -----Example----- Input: 4 5 tent sleepingbag flashlight stove food 4 tent flashlight food stove 3 water bottle map 3 map bottle 2 firstaid guidebook 4 firstaid guidebook map blanket 3 jacket compass lantern 2 jacket compass Output: Missing items Missing items All items packed All items packed -----Explanation----- In the first test case, Alice is missing \\"sleepingbag\\", so the checklist is not complete. In the second test case, Alice is missing \\"water\\" from her checklist. In the third test case, Alice has packed all the items in her checklist. In the fourth test case, all the items in the checklist are packed.","solution":"def verify_packing(T, test_cases): results = [] for i in range(T): N = test_cases[i][\'N\'] checklist = set(test_cases[i][\'checklist\']) M = test_cases[i][\'M\'] packed_items = set(test_cases[i][\'packed_items\']) if checklist.issubset(packed_items): results.append(\\"All items packed\\") else: results.append(\\"Missing items\\") return results"},{"question":"Given two strings s1 and s2, your task is to determine the minimum number of operations required to convert s1 to s2. You can use the following three operations on the string s1: 1. Insert a character 2. Remove a character 3. Replace a character Write a function to compute the minimum number of operations required to convert s1 to s2. Example: Input: s1 = \\"horse\\", s2 = \\"ros\\" Output: 3 Explanation: horse -> rorse (replace \'h\' with \'r\') rorse -> rose (remove \'r\') rose -> ros (remove \'e\') Input: s1 = \\"intention\\", s2 = \\"execution\\" Output: 5 Explanation: intention -> inention (remove \'t\') inention -> enention (replace \'i\' with \'e\') enention -> exention (replace \'n\' with \'x\') exention -> exection (replace \'n\' with \'c\') exection -> execution (insert \'u\') Constraints: - 0 <= s1.length, s2.length <= 500 - s1 and s2 consist of lower-case English letters only.","solution":"def minDistance(s1, s2): Calculate the minimum number of operations required to convert s1 to s2. Args: s1 (str): First string. s2 (str): Second string. Returns: int: The minimum number of operations required to convert s1 to s2. m, n = len(s1), len(s2) # Create a 2D DP array with (m+1) x (n+1) dimensions dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the base cases for i in range(1, m + 1): dp[i][0] = i # cost of deleting all characters in s1 for j in range(1, n + 1): dp[0][j] = j # cost of adding all characters to s1 to match s2 # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no extra cost else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete (from s1) dp[i][j - 1], # Insert (to s1) dp[i - 1][j - 1])# Replace (from s1) return dp[m][n]"},{"question":"# Story A team of biologists is studying a newly discovered species of plant that exhibits a unique growth pattern. The plant grows each day by a different amount, and you’ve been asked to help the team analyze their data. They track the growth of the plant every day and record the height. However, sometimes the study team forgets to record the height for one or several days, which leaves gaps in the dataset. Your task is to help fill in the missing data. Specifically, you’re asked to estimate the missing heights using linear interpolation between the closest recorded days preceding and following the missing days. # Kata Given a list representing the plant\'s height recorded each day, where `None` indicates a missing recording, return a list where the missing heights have been filled in using linear interpolation. # Examples * `[1, 2, None, 4]` should return `[1, 2, 3, 4]` * `[None, None, 3, None, 5, None, 7]` should return `[3, 3, 3, 4, 5, 6, 7]` * `[1, None, None, 4, None, 6, 7]` should return `[1, 2, 3, 4, 5, 6, 7]` # Notes * Assume at least one non-None element exists in the list and that there are no consecutive None values at the start or end of the list. * The length of the list is at least 2. * Linear interpolation for an element `None` at index `i` can be calculated as the average of its immediate preceding and following non-None neighbors.","solution":"def interpolate_missing_heights(heights): n = len(heights) result = heights[:] for i in range(n): if heights[i] is None: # find nearest previous and next non-None values prev_idx, next_idx = i - 1, i + 1 while prev_idx >= 0 and heights[prev_idx] is None: prev_idx -= 1 while next_idx < n and heights[next_idx] is None: next_idx += 1 if prev_idx < 0: result[i] = heights[next_idx] elif next_idx >= n: result[i] = heights[prev_idx] else: # linear interpolation formula prev_value = heights[prev_idx] next_value = heights[next_idx] distance = next_idx - prev_idx result[i] = prev_value + (next_value - prev_value) * (i - prev_idx) / distance return result"},{"question":"You are given a binary tree with `n` nodes. Each node has a value, and each node\'s value is guaranteed to be unique. A binary tree is \\"balanced\\" if for every node in the tree, the heights of its left and right subtrees differ by at most 1. Your task is to determine whether the provided binary tree is balanced or not. # Input The input consists of: 1. An integer `n` (1 le n leq 10^5), the number of nodes in the tree. 2. `n` lines, each line contains: - An integer `v` (1 le v leq n), representing the value of the current node. - Two integers `l` and `r` (0 le l, r le n), representing the values of the left and right children of the node respectively; a value of `0` indicates that there is no child node in that position. # Output Output a single line containing `YES` if the tree is balanced, otherwise output `NO`. # Example Input 6 1 2 3 2 4 5 3 0 6 4 0 0 5 0 0 6 0 0 Output YES Input 3 1 2 0 2 3 0 3 0 0 Output NO # Notes In the first example, the binary tree looks like this: ``` 1 / 2 3 / 4 5 6 ``` The tree is balanced as the height difference of left and right subtrees of any node is at most 1. In the second example, the binary tree looks like this: ``` 1 / 2 / 3 ``` The tree is not balanced as the height difference of left and right subtrees of node 1 is more than 1.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def is_balanced(n, nodes_info): if n == 0: return \\"YES\\" nodes = {i: TreeNode(i) for i in range(1, n + 1)} for v, l, r in nodes_info: if l != 0: nodes[v].left = nodes[l] if r != 0: nodes[v].right = nodes[r] def check_balance(node): if node is None: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) current_height = max(left_height, right_height) + 1 if abs(left_height - right_height) > 1: return current_height, False return current_height, left_balanced and right_balanced root = nodes[1] _, balanced = check_balance(root) return \\"YES\\" if balanced else \\"NO\\""},{"question":"Given a string `S` containing only lowercase alphabets and an integer `K`, determine whether it is possible to rearrange the characters in `S` such that the same characters are at least `K` distance apart. Return the rearranged string if possible, otherwise return an empty string. Example 1: Input: S = \\"aabbcc\\", K = 2 Output: \\"abcabc\\" Example 2: Input: S = \\"aaabc\\", K = 3 Output: \\"\\" Note: - 1 <= S.length <= 10000 - 1 <= K <= S.length","solution":"from collections import Counter from heapq import heappop, heappush def rearrange_string(S, K): if K == 0: return S # No need to rearrange if K is 0 counter = Counter(S) max_heap = [] for char, freq in counter.items(): heappush(max_heap, (-freq, char)) wait_queue = [] result = [] while max_heap: freq, char = heappop(max_heap) result.append(char) wait_queue.append((freq + 1, char)) # Decrement frequency (stored as negative) if len(wait_queue) >= K: freq, char = wait_queue.pop(0) if -freq > 0: heappush(max_heap, (freq, char)) return \'\'.join(result) if len(result) == len(S) else \\"\\""},{"question":"**Problem Statement:** You are organizing a coding tournament, and you want to ensure fair play by rotating judges for every consecutive pair of matches. Each judge has a unique availability period during which they can work. Given the number of matches and the availability of a set of judges, determine if it is possible to assign judges such that each pair of consecutive matches has different judges. -----Input----- The first line of the input contains an integer N, representing the number of matches. The second line contains an integer M, representing the number of judges available. The third line contains M pairs of integers, each pair (a_i, b_i) representing that the i-th judge is available from match a_i to match b_i (inclusive). -----Output----- Output \\"YES\\" if it is possible to assign judges such that no judge oversees two consecutive matches. Otherwise, output \\"NO\\". -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 50 - 1 ≤ a_i ≤ b_i ≤ N -----Example----- Input: 4 3 1 2 2 3 3 4 Output: YES Explanation: One possible assignment is: - Judge 1 oversees matches 1 and 2 - Judge 2 oversees matches 2 and 3 - Judge 3 oversees matches 3 and 4 This ensures that no judge oversees two consecutive matches.","solution":"def can_schedule_judges(n, m, availability): from collections import defaultdict # Create a dictionary of availability match_judges = defaultdict(list) for i, (start, end) in enumerate(availability): for match in range(start, end + 1): match_judges[match].append(i) # Check each match and its consecutive for i in range(1, n): if not set(match_judges[i]) & set(match_judges[i + 1]): return \\"NO\\" return \\"YES\\" # Example input n = 4 m = 3 availability = [(1, 2), (2, 3), (3, 4)] print(can_schedule_judges(n, m, availability)) # Output should be \\"YES\\""},{"question":"```markdown # Task Implement a function that takes an input string `s` and returns the length of the longest substring without repeating characters. # Example For the input `s = \\"abcabcbb\\"`, the output should be `3`, since the longest substring without repeating characters is `\\"abc\\"`. For the input `s = \\"bbbbb\\"`, the output should be `1`, since the longest substring without repeating characters is `\\"b\\"`. For the input `s = \\"pwwkew\\"`, the output should be `3`, since the longest substring without repeating characters is `\\"wke\\"`. # Input/Output - `[input]` string `s` - `[output]` an integer representing the length of the longest substring without repeating characters. ```","solution":"def length_of_longest_substring(s: str) -> int: Returns the length of the longest substring without repeating characters. :param s: Input string :return: Length of the longest substring without repeating characters char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(char_map[s[right]] + 1, left) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"You are given a list of strings that represent a series of operations for an arithmetic expression builder. Each operation is one of the following: \\"PUSH x\\" (where x is an integer that gets pushed onto a stack), \\"ADD\\", and \\"MULTIPLY\\". The \\"ADD\\" operation pops the top two elements from the stack, adds them, and pushes the result back onto the stack. The \\"MULTIPLY\\" operation pops the top two elements from the stack, multiplies them, and pushes the result back onto the stack. The stack is initially empty. Return the final element on the stack after performing all operations. If the stack is empty at any point where an \\"ADD\\" or \\"MULTIPLY\\" operation is required, return -1 indicating an invalid operation sequence. Example 1: Input: operations = [\\"PUSH 3\\", \\"PUSH 4\\", \\"ADD\\", \\"PUSH 2\\", \\"MULTIPLY\\"] Output: 14 Explanation: The operations are processed in this way: - PUSH 3 -> [3] - PUSH 4 -> [3, 4] - ADD -> [7] (since 3 + 4 = 7) - PUSH 2 -> [7, 2] - MULTIPLY -> [14] (since 7 * 2 = 14) The final element on the stack is 14. Example 2: Input: operations = [\\"PUSH 5\\", \\"PUSH 3\\", \\"MULTIPLY\\", \\"PUSH 2\\", \\"ADD\\"] Output: 17 Explanation: The operations are processed in this way: - PUSH 5 -> [5] - PUSH 3 -> [5, 3] - MULTIPLY -> [15] (since 5 * 3 = 15) - PUSH 2 -> [15, 2] - ADD -> [17] (since 15 + 2 = 17) The final element on the stack is 17. Example 3: Input: operations = [\\"ADD\\"] Output: -1 Explanation: The stack is empty when \\"ADD\\" is called, so it is an invalid operation sequence. Constraints: 1 <= operations.length <= 10^4 operations[i] will be one of \\"PUSH x\\", \\"ADD\\", \\"MULTIPLY\\" 1 <= x <= 10^4","solution":"def arithmetic_operations(operations): stack = [] for operation in operations: if operation.startswith(\\"PUSH\\"): _, value = operation.split() stack.append(int(value)) elif operation == \\"ADD\\": if len(stack) < 2: return -1 b = stack.pop() a = stack.pop() stack.append(a + b) elif operation == \\"MULTIPLY\\": if len(stack) < 2: return -1 b = stack.pop() a = stack.pop() stack.append(a * b) else: return -1 return stack[-1] if stack else -1"},{"question":"**Counting Unicode Characters** Write a function `count_unicode_characters(s: str) -> dict` that takes a string `s` as an input and returns a dictionary with the count of each unique Unicode character in the string. # Requirements - The function should count all characters, including letters, digits, punctuation marks, and any other symbols. - The keys of the dictionary should be the Unicode characters and the values should be their respective counts. # Example ```python def count_unicode_characters(s: str) -> dict: # Your code here # Example usage: s = \\"Hello, 世界! 🌍🌎🌏\\" result = count_unicode_characters(s) print(result) # Expected output: # {\'H\': 1, \'e\': 1, \'l\': 2, \'o\': 1, \',\': 1, \' \': 2, \'世\': 1, \'界\': 1, \'!\': 1, \'🌍\': 1, \'🌎\': 1, \'🌏\': 1} ``` # Notes - Ensure the function handles text written in various languages and scripts, including emojis and special symbols. - You are encouraged to utilize Python’s `collections.Counter` for counting characters efficiently. # Constraints 1. The input string `s` will have a length of at least 0 and at most 10<sup>6</sup> characters. 2. The input string can contain any Unicode characters. # Hints - You may want to familiarize yourself with Unicode character representation in Python. - Using `collections.Counter` can help simplify the counting process.","solution":"from collections import Counter def count_unicode_characters(s: str) -> dict: Returns a dictionary with the count of each unique Unicode character in the string `s`. return dict(Counter(s))"},{"question":"**Implement a function, called `countUniqueWords` (or `count_unique_words`), that takes a string argument and returns the number of unique words in that string. For the purpose of this function, words are defined as sequences of characters separated by whitespace. The function should be case-insensitive, meaning \\"Word\\" and \\"word\\" should be counted as the same word. Punctuation marks attached to words should be ignored.** Example: - `countUniqueWords(\\"Hello, world! Hello again.\\")` should return `3`, because the unique words are \\"hello\\", \\"world\\", and \\"again\\".","solution":"import re def count_unique_words(text): Returns the number of unique words in the string `text`. Words are case-insensitive and punctuation is ignored. words = re.findall(r\'bw+b\', text.lower()) unique_words = set(words) return len(unique_words)"},{"question":"Alice is training for a puzzle challenge, and she needs to practice her skills with strings. You are to help Alice by creating a function that can transform a given string according to a series of transformation rules. The transformation rules are based on relocating characters after a certain number of steps. This type of problem is commonly known as the \\"Caesar Cipher\\" but with a twist. Given a string S and an integer K, perform the following transformations: 1. Rotate each alphabetic character (both uppercase and lowercase) by K positions: - A rotation means moving forward in the alphabet by K positions; for example, a rotation of 3 turns \'a\' into \'d\', \'z\' into \'c\', \'A\' into \'D\', and \'Z\' into \'C\'. 2. If the rotation causes the character to go past the end of the alphabet, it starts again at the beginning (with wrapping). 3. All non-alphabetic characters should remain unchanged. Implement the function `caesar_cipher(S, K)` that performs these transformations. -----Input----- - A single string S consisting of ASCII characters. - An integer K where 0 ≤ K ≤ 1000. -----Output----- - Return a transformed string according to the given rules. -----Constraints----- - The length of S will not exceed 10000 characters. -----Example----- Input: \\"Hello, World!\\", 5 Output: \\"Mjqqt, Btwqi!\\" Input: \\"abcXYZ\\", 2 Output: \\"cdeZAB\\" Input: \\"Python3.8\\", 10 Output: \\"Zidryx3.8\\" Alice needs to implement this function in her preferred programming language to practice for her upcoming puzzle challenge.","solution":"def caesar_cipher(S, K): Transforms the given string S by rotating each alphabetic character by K positions. Non-alphabetic characters are not changed. result = [] for char in S: if char.isalpha(): # Determine if the character is uppercase or lowercase offset = 65 if char.isupper() else 97 # Perform the rotation rotated_char = chr((ord(char) - offset + K) % 26 + offset) result.append(rotated_char) else: result.append(char) return \'\'.join(result)"},{"question":"You are given a list of integers representing daily stock prices. Write a function `max_profit(prices)` that calculates the maximum profit you can achieve by buying and then selling exactly one share of the stock. If no profit can be achieved, return 0. For example: - max_profit([7, 1, 5, 3, 6, 4]) should return 5 (buy at 1, sell at 6). - max_profit([7, 6, 4, 3, 1]) should return 0 (no profit is possible).","solution":"def max_profit(prices): Calculate the maximum profit that can be achieved from a single buy and sell operation. :param prices: List of daily stock prices. :return: Maximum profit possible. If no profit is possible, return 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are holding a charity raffle where you will sell tickets to attendees. Each ticket has a unique number, and the sum of their digits represents potential lucky numbers. You wish to distribute the tickets such that ticket buyers have an equal chance of winning based on the sum of ticket digits. The task is to determine how many tickets you need to buy in order to ensure that, regardless of which combination of tickets is chosen, every distinct sum of digits (between the minimum and maximum possible sums) is equally represented at least once. Consider the tickets numbered sequentially starting from 1 up to N. Each ticket number is represented as a string of digits. Determine the smallest value of N such that the occurrences of every possible sum of digits are equal among all tickets from 1 to N. Write a function: ```python def minimum_tickets_needed() -> int: # implement your solution here pass ``` Example: ``` minimum_tickets_needed() # Output should be the smallest integer N such that from 1 to N, # every sum of digits between the minimum and maximum possible sums has # the same occurrence. # Typically, for simplicity, you can specify that the solution needs # to be complete for digit length up to 3. ```","solution":"def digit_sum(n): Returns the sum of the digits of the number n. return sum(int(digit) for digit in str(n)) def minimum_tickets_needed() -> int: Returns the minimum number of tickets needed to ensure that each sum of digits value is equally represented at least once. from collections import defaultdict # Arbitrary choice to consider maximum number of digits as 3 for simplicity max_digits = 3 # Define the range of possible ticket numbers for the given digit limit max_n = 10 ** max_digits - 1 sum_count = defaultdict(int) for ticket in range(1, max_n + 1): digit_sum_value = digit_sum(ticket) sum_count[digit_sum_value] += 1 # The count of occurrences of each sum of digits occurrences = list(sum_count.values()) # Find the maximum number of occurrences for any sum of digits max_occurrence = max(occurrences) # Check the maximum consecutive segment of N which can be valid for n_check in range(max_occurrence, max_n + 1): ticket_sums = [digit_sum(i) for i in range(1, n_check + 1)] counts = defaultdict(int) for s in ticket_sums: counts[s] += 1 if len(set(counts.values())) == 1: # All counts are the same; hence all sums are equally represented return n_check # If no valid solution is found in the given range, we set a large number # meaning no realistic solution was found within the constraints return max_n"},{"question":"# Library Book Organizer A library is trying to organize its bookshelves efficiently. They decided to categorize the books by three parameters: genre, author, and publication year. You are provided with a list of books, where each book is represented as a dictionary with the keys: \\"title\\", \\"genre\\", \\"author\\", and \\"year\\". Your task is to write a function that organizes the books into a nested dictionary. The top-level keys should be the genres, the second-level keys should be authors, and the third-level keys should be the publication years. Each entry at the deepest level should have a list of book titles that fall under the specific genre, author, and year. __Function Signature:__ ```python def organize_books(books: List[Dict[str, Union[str, int]]]) -> Dict[str, Dict[str, Dict[str, List[str]]]]: ``` # Input - A list `books` of dictionaries, where each dictionary contains: - `title`: a string representing the title of the book, - `genre`: a string representing the genre of the book, - `author`: a string representing the author of the book, - `year`: an integer representing the publication year of the book. # Output - Returns a nested dictionary structure containing the organized books. # Example: ```python books = [ {\\"title\\": \\"Book A\\", \\"genre\\": \\"Fiction\\", \\"author\\": \\"Author X\\", \\"year\\": 2001}, {\\"title\\": \\"Book B\\", \\"genre\\": \\"Fiction\\", \\"author\\": \\"Author Y\\", \\"year\\": 2000}, {\\"title\\": \\"Book C\\", \\"genre\\": \\"Non-Fiction\\", \\"author\\": \\"Author X\\", \\"year\\": 2001}, {\\"title\\": \\"Book D\\", \\"genre\\": \\"Fiction\\", \\"author\\": \\"Author X\\", \\"year\\": 2001} ] output = organize_books(books) # Expected output: # { # \\"Fiction\\": { # \\"Author X\\": { # \\"2001\\": [\\"Book A\\", \\"Book D\\"] # }, # \\"Author Y\\": { # \\"2000\\": [\\"Book B\\"] # } # }, # \\"Non-Fiction\\": { # \\"Author X\\": { # \\"2001\\": [\\"Book C\\"] # } # } # } ``` # Constraints - The number of books in the list will not exceed 10^4. - All strings will have lengths between 1 and 100 characters. - The publication years will be between 1000 and 3000.","solution":"from typing import List, Dict, Union def organize_books(books: List[Dict[str, Union[str, int]]]) -> Dict[str, Dict[str, Dict[str, List[str]]]]: organized_books = {} for book in books: genre = book[\'genre\'] author = book[\'author\'] year = str(book[\'year\']) title = book[\'title\'] if genre not in organized_books: organized_books[genre] = {} if author not in organized_books[genre]: organized_books[genre][author] = {} if year not in organized_books[genre][author]: organized_books[genre][author][year] = [] organized_books[genre][author][year].append(title) return organized_books"},{"question":"You are given an array of integers representing the sequence of stock prices over consecutive days. Write a function that calculates the maximum profit you can achieve by making at most one buy and one sell transaction. * The function should take one parameter: an array of integers where each integer represents the stock price on a given day. * The function should return an integer representing the maximum profit that can be achieved. If no profit is possible, return 0. **Further points:** * You cannot sell a stock before you buy one. * The array may contain at least one element. # Example If the array [7, 1, 5, 3, 6, 4] is given: - You can buy the stock on the second day at a price of 1 and sell it on the fifth day at a price of 6, yielding a maximum profit of 6 - 1 = 5. If the array [7, 6, 4, 3, 1] is given: - No transactions can yield a profit, so the function should return 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by making at most one buy and one sell transaction. If no profit is possible, returns 0. if not prices or len(prices) < 2: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given a sequence consisting of numbers in the following way: ``` 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, ... ``` This sequence can be described as having `n` numbers of the value `n`. So, there is one `1`, two `2`s, three `3`s, and so forth. We want to implement a function `find_nth_in_sequence(n)` that will receive one argument: - `n`, an integer (1 <= n <= 10^9) representing the position in the sequence. The function will return the value at the provided position `n` in the sequence. Here are some examples: ```python find_nth_in_sequence(1) == 1 find_nth_in_sequence(3) == 2 find_nth_in_sequence(10) == 4 find_nth_in_sequence(15) == 5 ``` Your implementation should be efficient enough to handle very large values of `n` within a reasonable time frame.","solution":"def find_nth_in_sequence(n): Returns the value at the nth position in the sequence defined as: 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, ... where the integer m occurs m times consecutively. k = 1 # current integer in the sequence total_numbers = 0 # total numbers counted so far while True: total_numbers += k if n <= total_numbers: return k k += 1"},{"question":"A company stores vehicle registration numbers in a specific format, and they need to verify whether a given registration number is valid. The valid format for a vehicle registration number is as follows: - It is exactly 9 characters long. - The first three characters must be uppercase English alphabets (A-Z). - The next four characters must be digits (0-9) and represent a valid year from 1900 to 2022 inclusive. - The last two characters must be one of the following special characters: , %, #, @, &, *. Write a function to verify the validity of a given vehicle registration number based on the above rules. The function should return `true` if the registration number is valid, and `false` otherwise. Example: validate_vehicle_reg(\\"ABC2019@\\") // Expected output: true validate_vehicle_reg(\\"abc2019\\") // Expected output: false (first three characters must be uppercase) validate_vehicle_reg(\\"XYZ1875#@\\") // Expected output: false (year must be between 1900 to 2022) Note: The input registration number is always provided as a string.","solution":"def validate_vehicle_reg(reg_num): Checks if the given registration number is valid based on the specified rules. Parameters: reg_num (str): The vehicle registration number to be validated. Returns: bool: True if the registration number is valid, False otherwise. if len(reg_num) != 9: return False # Check if the first three characters are uppercase English alphabets if not reg_num[:3].isalpha() or not reg_num[:3].isupper(): return False # Check if the next four characters are digits and if they represent a valid year year = reg_num[3:7] if not year.isdigit() or not (1900 <= int(year) <= 2022): return False # Check if the last two characters are valid special characters if reg_num[7] not in \'%#@&*\' or reg_num[8] not in \'%#@&*\': return False return True"},{"question":"Given an array of integers, where some values are duplicated, you need to find the first non-repeating element. Return the value of the first non-repeating element. If no such element exists, return -1. The code should accomplish this with a time complexity of O(n). Example 1: Input: nums = [4, 5, 1, 2, 0, 4] Output: 5 Explanation: Although 1 is the first element that appears more than once, 5 is the first element that does not repeat. Example 2: Input: nums = [7, 7, 7, 8, 8, 8] Output: -1 Explanation: Every element in the array repeats. Example 3: Input: nums = [7, 3, 5, 4, 5, 3, 4, 10] Output: 7 Explanation: 7 does not repeat in the array and is the first element of that quality. Example 4: Input: nums = [1] Output: 1 Explanation: There is only one element and it is non-repeating. Constraints: 1. 1 <= nums.length <= 10^5 2. The values in the array are integers and can be positive, negative, or zero.","solution":"def first_non_repeating(nums): Returns the first non-repeating element in the array. If no such element exists, returns -1. frequency = {} # First pass to count the frequency of each element for num in nums: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 # Second pass to find the first non-repeating element for num in nums: if frequency[num] == 1: return num return -1"},{"question":"Create a function that takes a string containing a mathematical expression and returns the result of the expression. **Note:** The expression may contain integers, addition (+), subtraction (-), multiplication (*), and division (/). * Division should be integer division (use //). * The input expression will always be valid and no parenthesis are allowed. Complete the function to evaluate the expression and return the result. Examples * `\\"3+2*2\\"` returns `7` (because 2*2 is 4, and 3+4 is 7) * `\\" 3/2 \\"` returns `1` (because 3//2 is 1) * `\\" 3 + 5 / 2 \\"` returns `5` (because 5//2 is 2, and 3+2 is 5)","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing integers, +, -, *, and /. The division operator (/) represents integer division. import re # Remove whitespace expression = expression.replace(\\" \\", \\"\\") # Split numbers and operators numbers = list(map(int, re.split(\'[+-*/]\', expression))) operators = re.findall(\'[+-*/]\', expression) # Priority of operations: First *, / index = 0 while index < len(operators): if operators[index] in \'*/\': if operators[index] == \'*\': result = numbers[index] * numbers[index + 1] else: result = numbers[index] // numbers[index + 1] numbers[index] = result del numbers[index + 1] del operators[index] else: index += 1 # Now the remaining operations are +, - result = numbers[0] for i in range(len(operators)): if operators[i] == \'+\': result += numbers[i + 1] else: result -= numbers[i + 1] return result"},{"question":"Given an array of integers and an integer k, find the maximum sum of a subarray of size k. Your algorithm should be efficient with a time complexity of O(n). Example: Input: arr = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: The subarray with the maximum sum is [5, 1, 3] which has a sum of 9. Input: arr = [2, 3, 4, 1, 5], k = 2 Output: 7 Explanation: The subarray with the maximum sum is [3, 4] which has a sum of 7.","solution":"def max_sum_subarray(arr, k): Finds the maximum sum of a subarray of size k. :param arr: List[int], the input array of integers :param k: int, size of the subarray :return: int, the maximum sum of a subarray of size k n = len(arr) if n < k: return 0 max_sum = sum(arr[:k]) window_sum = max_sum for i in range(n - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Write a function that takes an input string and checks if it is a palindrome (reads the same forward and backward). If the input is an integer instead, the function should return the square of the number. If the input is neither a string nor an integer, return \\"Invalid input\\". Note: In languages like Python, you might need to explicitly check for input types.","solution":"def check_input(input_value): Checks if the input value is a palindrome if it\'s a string, returns the square if it is an integer, and returns \'Invalid input\' for any other type. if isinstance(input_value, str): return input_value == input_value[::-1] elif isinstance(input_value, int): return input_value ** 2 else: return \\"Invalid input\\""},{"question":"=====Function Description===== full The full tool returns a new array with a given shape and type filled with a specified value. import numpy print numpy.full((2,2), 7) #Default type is int #Output : [[7 7] [7 7]] print numpy.full((2,2), 7, dtype = numpy.float) #Type changes to float #Output : [[7. 7.] [7. 7.]] eye The eye tool returns a 2-D array with ones on the diagonal and zeros elsewhere. import numpy print numpy.eye(2) #Default type is float #Output : [[ 1. 0.] [ 0. 1.]] print numpy.eye(2, dtype = numpy.int) #Type changes to int #Output : [[1 0] [0 1]] =====Problem Statement===== You are given the shape of the array and a value. Your task is to print an array of the given shape and type filled with the specified value using the numpy.full tool. Then, based on the provided dimensions, create an identity matrix using the numpy.eye tool. =====Input Format===== A single line containing space-separated integers followed by the fill value. =====Constraints===== 1 ≤ each integer ≤ 3 =====Output Format===== First, print the array using the numpy.full tool filled with the given value, and then print the identity matrix with the numpy.eye tool for the given shape.","solution":"import numpy as np def create_full_and_eye(shape, value, dtype=int): Create an array of the given shape and type filled with the specified value using numpy.full, and then create an identity matrix using numpy.eye. Parameters: shape (tuple): Shape of the array. value (int or float): The value to fill the array with. dtype (data-type): Desired output data-type for the array, default is int. Returns: tuple: The filled array and the identity matrix. filled_array = np.full(shape, value, dtype=dtype) identity_matrix = np.eye(shape[0], shape[1], dtype=dtype) return filled_array, identity_matrix"},{"question":"You are given an array of integers, and you need to find two specific elements in the array such that their sum is equal to a given target value. If such a pair exists, return the indices of the two numbers (1-based indices). You may assume that each input would have exactly one solution, and you may not use the same element twice. For example, given array `nums = [2, 7, 11, 15]` and `target = 9`, the output should be `[1, 2]` because `nums[0] + nums[1] = 2 + 7 = 9`. Write a function that finds the two numbers and return their indices. -----Input----- First line contains an integer `n` (2 le n le 10^5) — the number of integers in the array. Second line contains `n` integers separated by spaces — elements of the array. Third line contains a single integer — the target sum. -----Output----- Output two integers separated by space — the 1-based indices of the two numbers whose sum equals the target. -----Examples----- Input 4 2 7 11 15 9 Output 1 2 Input 3 3 2 4 6 Output 2 3 -----Note----- In the first example, the numbers `2` and `7` sum to `9`. Their respective indices are 1 and 2 (1-based index). In the second example, the numbers `2` and `4` sum to `6`. Their respective indices are 2 and 3 (1-based index).","solution":"def find_two_sum_indices(nums, target): Finds the two elements in the list which sum to the target value and returns their 1-based indices. :param nums: List[int] - The list of integers. :param target: int - The target sum. :return: Tuple[int, int] - The 1-based indices of the two elements. num_map = {} for idx, num in enumerate(nums): complement = target - num if complement in num_map: return (num_map[complement] + 1, idx + 1) num_map[num] = idx"},{"question":"Maria loves puzzles and has recently started working on a new puzzle called \\"Character Matrix Rotation.\\" The puzzle consists of a square matrix of characters with size N times N. Maria\'s task is to rotate the matrix 90 degrees clockwise. Your task is to write a program that helps Maria complete this task. For a given matrix, the program should output the matrix after it has been rotated 90 degrees clockwise. **Input** - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N (size of the square matrix). - The next N lines contain N characters each, representing the matrix. **Output** For each test case, print N lines representing the matrix after it has been rotated 90 degrees clockwise. **Constraints** - 1 le T le 20 - 1 le N le 10 - The characters will be lowercase English letters. **Example Input** ``` 2 3 abc def ghi 4 abcd efgh ijkl mnop ``` **Example Output** ``` gda heb ifc mieb njf okg plh ``` **Explanation:** In the first test case: ``` Original Matrix: abc def ghi Rotated 90 degrees clockwise: gda heb ifc ``` In the second test case: ``` Original Matrix: abcd efgh ijkl mnop Rotated 90 degrees clockwise: miea njfb okgc plhd ```","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given N x N matrix 90 degrees clockwise. Args: matrix (list of list of str): The N x N matrix to rotate. Returns: list of list of str: The rotated matrix. N = len(matrix) # Initialize new rotated matrix rotated_matrix = [[\'\' for _ in range(N)] for _ in range(N)] for i in range(N): for j in range(N): rotated_matrix[j][N - 1 - i] = matrix[i][j] return rotated_matrix def process_input(T, test_cases): Process the input for T test cases and apply matrix rotation. Args: T (int): number of test cases. test_cases (list of lists): list of test cases, each containing size N and the matrix. Returns: list of lists: processed and rotated matrices for each test case. results = [] for i in range(T): N = test_cases[i][0] matrix = test_cases[i][1] rotated_matrix = rotate_matrix_90_clockwise(matrix) results.append(rotated_matrix) return results"},{"question":"You are given two strings, `s1` and `s2`. You need to check if a permutation of `s1` is a substring of `s2`. In other words, one of `s1`\'s permutations is the substring of `s2`. Return `true` if a permutation of `s1` is a substring of `s2`, or `false` otherwise. Example 1: Input: s1 = \\"ab\\", s2 = \\"eidbaooo\\" Output: true Explanation: s2 contains one permutation of s1 (\\"ba\\"). Example 2: Input: s1 = \\"ab\\", s2 = \\"eidboaoo\\" Output: false Explanation: s2 does not contain any permutation of s1. Example 3: Input: s1 = \\"adc\\", s2 = \\"dcda\\" Output: true Explanation: s2 contains one permutation of s1 (\\"cda\\"). Example 4: Input: s1 = \\"ab\\", s2 = \\"a\\" Output: false Explanation: s1\'s length is greater than s2\'s, so no permutation is possible. Constraints: - 1 <= s1.length, s2.length <= 10^4 - s1 and s2 consist of lowercase English letters.","solution":"def check_inclusion(s1, s2): Returns true if any permutation of s1 is a substring of s2. from collections import Counter len_s1, len_s2 = len(s1), len(s2) if len_s1 > len_s2: return False s1_counter = Counter(s1) window_counter = Counter(s2[:len_s1]) if s1_counter == window_counter: return True for i in range(len_s1, len_s2): window_counter[s2[i]] += 1 window_counter[s2[i - len_s1]] -= 1 if window_counter[s2[i - len_s1]] == 0: del window_counter[s2[i - len_s1]] if s1_counter == window_counter: return True return False"},{"question":"Given a string, you are required to remove the adjacent duplicate characters such that no two adjacent characters are the same. If the removal of adjacent duplicates creates new adjacent duplicates, continue removing them until there are no adjacent duplicates. E.g - \\"abccba\\" -> The first pass removes \\"cc\\", resulting in \\"abba\\". The second pass removes \\"bb\\", and then \\"aa\\", resulting in an empty string. - \\"azxxzy\\" -> The first pass removes \\"xx\\", resulting in \\"azzy\\". The second pass removes \\"zz\\", resulting in \\"ay\\". Implement the function: `removeAdjacentDuplicates(string)` - string - the input string from which adjacent duplicates are to be removed. Note: The string only contains lowercase English letters.","solution":"def removeAdjacentDuplicates(s): Removes adjacent duplicate characters from the string s until no two adjacent characters are the same. :param s: str :return: str stack = [] for char in s: if stack and stack[-1] == char: stack.pop() # Remove the last character if it\'s the same as the current one else: stack.append(char) # Add the current character to the stack return \'\'.join(stack)"},{"question":"Given a string s that consists of only lowercase English letters and a pattern p, write a function to find all the start indices of p\'s anagrams in s. The output should be sorted in ascending order of indices. An Anagram is a rearrangement of a string into another string with the exact same characters and frequencies. Example 1: Input: s = \\"cbaebabacd\\", p = \\"abc\\" Output: [0, 6] Explanation: The substring starting at index 0 is \\"cba\\", which is an anagram of \\"abc\\". The substring starting at index 6 is \\"bac\\", which is an anagram of \\"abc\\". Example 2: Input: s = \\"abab\\", p = \\"ab\\" Output: [0, 1, 2] Explanation: The substring starting at index 0 is \\"ab\\", which is an anagram of \\"ab\\". The substring starting at index 1 is \\"ba\\", which is an anagram of \\"ab\\". The substring starting at index 2 is \\"ab\\", which is an anagram of \\"ab\\". Note: - The input string is \'s\' will have length from 1 to 10000. - The pattern string \'p\' will have length from 1 to 100. - The output should be an ascending order of starting indices where the substrings of `s` starting from those indices are anagrams of `p`.","solution":"from collections import Counter def find_anagrams(s, p): Given a string s and a pattern p, find all the start indices of p\'s anagrams in s. The output is sorted in ascending order of indices. p_count = Counter(p) s_count = Counter() result = [] p_len = len(p) for i in range(len(s)): # Add current character to the current window counter s_count[s[i]] += 1 if i >= p_len: # Remove the character that is left out of window if s_count[s[i - p_len]] == 1: del s_count[s[i - p_len]] else: s_count[s[i - p_len]] -= 1 if s_count == p_count: result.append(i - p_len + 1) return result"},{"question":"You are given an m x n grid initialized with the value 0. You have to perform several update operations on this grid. Each update is represented by a pair of integers (i, j), which means you have to increment both the ith row and the jth column of the grid by 1. The task is to find the number of cells in the grid which contain the maximum value after all the updates are performed. ---Input--- The first line consists of two integers, m and n (1 ≤ m, n ≤ 300) representing the number of rows and columns of the grid respectively. The second line consists of an integer k (0 ≤ k ≤ 10^4) representing the number of updates. The next k lines each contain 2 integers, i and j (0 ≤ i < m, 0 ≤ j < n) representing an update operation. ---Output--- Output the number of cells in the grid that contain the maximum value after all the updates. ---Example--- Input: 3 3 4 0 0 1 1 2 2 1 2 Output: 1 ---Explanation--- The initial 3x3 grid is: 0 0 0 0 0 0 0 0 0 After performing the updates: 1. Increment row 0 and column 0: 1 1 0 1 0 0 0 0 0 2. Increment row 1 and column 1: 1 1 0 2 1 0 0 1 0 3. Increment row 2 and column 2: 1 1 0 2 1 0 0 1 1 4. Increment row 1 and column 2: 1 1 0 2 1 1 0 1 1 The grid now contains: 1 1 0 2 1 1 0 1 1 The maximum value is 2, and it is present in only one cell at (1,0). Hence, the output is 1.","solution":"def count_max_cells(m, n, k, updates): Constructs the m x n grid and performs the k updates, then finds and returns the number of cells containing the maximum value. # Initialize row and column counters row_increments = [0] * m column_increments = [0] * n # Apply each update for (i, j) in updates: row_increments[i] += 1 column_increments[j] += 1 # Find the maximum values in row and column increments max_row_inc = max(row_increments) max_col_inc = max(column_increments) # Count the number of rows and columns with the maximum increments max_rows = sum(1 for r in row_increments if r == max_row_inc) max_cols = sum(1 for c in column_increments if c == max_col_inc) # The number of cells with the maximum value is the product of these counts return max_rows * max_cols"},{"question":"Implement a Simple Calendar Scheduler that allows users to add events, remove events, and query events for a specific day. An event has a title (string), a start time (string in \\"HH:MM\\" format), and an end time (string in \\"HH:MM\\" format). The scheduler should handle events for any arbitrary date but for simplicity, assume no event overlaps, i.e., no two events on the same day will have overlapping times. You need to implement the following methods: - `add_event(date, title, start_time, end_time)`: Adds a new event with the given title, start time, and end time to the specified date. If an event with the same title already exists on that date, it should return `False`, otherwise return `True`. - `remove_event(date, title)`: Removes an event with the given title from the specified date. If no such event exists, it should return `False`, otherwise return `True`. - `get_events(date)`: Returns a list of events for the specified date. Each event should be represented as a tuple `(title, start_time, end_time)`. The returned list should be sorted in the order of the event start time. If no events exist for the given date, it should return an empty list. Note: - Dates will be given in the format of \\"YYYY-MM-DD\\". - The `start_time` and `end_time` strings will always be in \\"HH:MM\\" 24-hour format. - You don\'t need to handle invalid date or time formats. Example Usage: ```python scheduler = SimpleCalendarScheduler() scheduler.add_event(\\"2023-10-12\\", \\"Morning Jog\\", \\"06:00\\", \\"07:00\\") # returns: True scheduler.add_event(\\"2023-10-12\\", \\"Team Meeting\\", \\"09:00\\", \\"10:00\\") # returns: True scheduler.add_event(\\"2023-10-12\\", \\"Lunch with Sarah\\", \\"12:00\\", \\"13:00\\") # returns: True scheduler.add_event(\\"2023-10-12\\", \\"Morning Jog\\", \\"08:00\\", \\"09:00\\") # returns: False scheduler.get_events(\\"2023-10-12\\") # returns: [(\\"Morning Jog\\", \\"06:00\\", \\"07:00\\"), (\\"Team Meeting\\", \\"09:00\\", \\"10:00\\"), (\\"Lunch with Sarah\\", \\"12:00\\", \\"13:00\\")] scheduler.remove_event(\\"2023-10-12\\", \\"Team Meeting\\") # returns: True scheduler.remove_event(\\"2023-10-12\\", \\"Evening Jog\\") # returns: False scheduler.get_events(\\"2023-10-12\\") # returns: [(\\"Morning Jog\\", \\"06:00\\", \\"07:00\\"), (\\"Lunch with Sarah\\", \\"12:00\\", \\"13:00\\")] ``` You may need to create a class, such as `Event`, to contain the event information, if necessary.","solution":"class SimpleCalendarScheduler: def __init__(self): self.schedule = {} def add_event(self, date, title, start_time, end_time): if date not in self.schedule: self.schedule[date] = [] for event in self.schedule[date]: if event[0] == title: return False self.schedule[date].append((title, start_time, end_time)) self.schedule[date].sort(key=lambda event: event[1]) return True def remove_event(self, date, title): if date not in self.schedule: return False for event in self.schedule[date]: if event[0] == title: self.schedule[date].remove(event) return True return False def get_events(self, date): if date not in self.schedule: return [] return sorted(self.schedule[date], key=lambda event: event[1])"},{"question":"Task ==== You are to implement a simple calculator that can evaluate a string containing a basic mathematical expression. The given string may contain non-numeric characters which should be ignored. The calculator should support addition and subtraction operations only. Requirements ============ - Create a function `calculate(expression: str) -> int` that takes a string `expression` as input and returns the result as an integer. - You need to extract the numbers and operations from the string and effectively evaluate the expression. - Handle white spaces or any other non-numeric and non-operational characters by ignoring them. Example Input/Output ==================== **Input**: `\\"4 + 18 - 3\\"` **Output**: `19` **Input**: `\\"20-5+6\\"` **Output**: `21` **Input**: `\\" a1+ b2- 3c \\"` **Output**: `0` Notes ===== - You can assume that the input expressions are well-formed and contain only operations `+` and `-`. - Numbers can be positive or negative integers. - Implementing your function should not use the `eval` function or equivalent complex parsing libraries. - Pay special attention to edge cases such as empty strings or strings with invalid characters that should be ignored during the calculation.","solution":"import re def calculate(expression: str) -> int: Calculate the result of a basic mathematical expression. Ignored non-numeric and non-operational characters. :param expression: A string containing a mathematical expression with addition and subtraction. :return: The result of evaluating the basic mathematical expression. # Remove all non digit and non-operational characters cleaned_expr = re.sub(r\'[^0-9+-]\', \'\', expression) # Split the cleaned expression by plus sign and subtract from each other when - is involved # Initial number that would be added before going on the next operations result = 0 current_number = \'\' sign = 1 # 1 for positive, -1 for negative for char in cleaned_expr: if char.isdigit(): current_number += char else: if current_number: result += sign * int(current_number) current_number = \'\' if char == \'+\': sign = 1 elif char == \'-\': sign = -1 if current_number: result += sign * int(current_number) return result"},{"question":"Write a function that takes a linked list and an integer k as input and rotates the linked list to the right by k places. # Function Signature ```python def rotateRight(head: ListNode, k: int) -> ListNode: ``` # Input - `head`: The head of a singly linked list. - `k`: An integer representing the number of places to rotate. # Output - The head of the rotated linked list. # Constraints - The number of nodes in the list can range from `0` to `500`. - `0 <= k <= 2 * 10^9` # Examples **Example 1:** ``` Input: head = [1, 2, 3, 4, 5], k = 2 Output: [4, 5, 1, 2, 3] Explanation: Rotate 1 step to the right: [5, 1, 2, 3, 4] Rotate 2 steps to the right: [4, 5, 1, 2, 3] ``` **Example 2:** ``` Input: head = [0, 1, 2], k = 4 Output: [2, 0, 1] Explanation: Rotate 1 step to the right: [2, 0, 1] Rotate 2 steps to the right: [1, 2, 0] Rotate 3 steps to the right: [0, 1, 2] Rotate 4 steps to the right: [2, 0, 1] ``` **Example 3:** ``` Input: head = [], k = 3 Output: [] Explanation: An empty list remains empty regardless of the rotations. ``` # Detailed Description 1. The linked list should be treated as a circular list for the purpose of rotation. 2. If k is 0, the list should remain unchanged. 3. When k is greater than the length of the list, rotating the list k times is equivalent to rotating it k modulo length times. 4. Ensure that your solution handles edge cases like an empty list, a list with only one node, and very large k values efficiently.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def rotateRight(head: ListNode, k: int) -> ListNode: if not head or not head.next or k == 0: return head # Determine the length of the linked list length = 1 current = head while current.next: current = current.next length += 1 # Make the linked list circular current.next = head # Find the new head (after the k-th rotation) k %= length steps_to_new_head = length - k new_tail = head for _ in range(steps_to_new_head - 1): new_tail = new_tail.next new_head = new_tail.next new_tail.next = None return new_head"},{"question":"You are working on a new project that involves processing data from a series of transactions recorded over multiple days. Each transaction consists of the following elements: - Date (in the format YYYY-MM-DD) - Transaction ID (a unique string of characters) - Amount (a floating point number) Your task is to write a function that will process a list of transactions and return a summary report for a specified date range. The summary should include: - Total number of transactions in the date range - Total amount of all transactions in the date range - Average transaction amount in the date range Additionally, the function should raise an error if the start date is later than the end date or if an invalid date format is provided. -----Constraints----- - The number of transactions (n) is at most 10^5 - Each transaction follows the date format YYYY-MM-DD - Start and end dates are provided in the format YYYY-MM-DD - Amount is a floating point number - Transactions are not necessarily sorted by date -----Input----- The input consists of the following: - A list of transactions, where each transaction is represented as a tuple (date, transaction_id, amount) - Start date (string) - End date (string) -----Output----- Return a dictionary with the following keys and their respective values: - \\"total_transactions\\": Total number of transactions in the given date range - \\"total_amount\\": Sum of the amounts of all transactions in the given date range - \\"average_amount\\": Average transaction amount in the given date range If there are no transactions in the given date range, return the dictionary with values set to 0. -----Example Input----- transactions = [ (\\"2023-01-01\\", \\"T1001\\", 150.0), (\\"2023-01-02\\", \\"T1002\\", 200.0), (\\"2023-01-03\\", \\"T1003\\", 50.0), (\\"2023-01-04\\", \\"T1004\\", 300.0), (\\"2023-01-05\\", \\"T1005\\", 100.0) ] start_date = \\"2023-01-02\\" end_date = \\"2023-01-04\\" -----Example Output----- { \\"total_transactions\\": 3, \\"total_amount\\": 550.0, \\"average_amount\\": 183.33 }","solution":"from datetime import datetime from typing import List, Dict, Tuple def process_transactions(transactions: List[Tuple[str, str, float]], start_date: str, end_date: str) -> Dict[str, float]: Processes a list of transactions and returns a summary report for a specified date range. Args: transactions (List[Tuple[str, str, float]]): A list of tuples representing transactions. start_date (str): The start date in YYYY-MM-DD format. end_date (str): The end date in YYYY-MM-DD format. Returns: Dict[str, float]: A dictionary containing the total number of transactions, total amount, and average transaction amount. try: start_date_obj = datetime.strptime(start_date, \\"%Y-%m-%d\\") end_date_obj = datetime.strptime(end_date, \\"%Y-%m-%d\\") except ValueError: raise ValueError(\\"Invalid date format. Please use YYYY-MM-DD format.\\") if start_date_obj > end_date_obj: raise ValueError(\\"Start date cannot be later than end date.\\") total_transactions = 0 total_amount = 0.0 for transaction in transactions: transaction_date, transaction_id, amount = transaction transaction_date_obj = datetime.strptime(transaction_date, \\"%Y-%m-%d\\") if start_date_obj <= transaction_date_obj <= end_date_obj: total_transactions += 1 total_amount += amount if total_transactions == 0: average_amount = 0.0 else: average_amount = total_amount / total_transactions return { \\"total_transactions\\": total_transactions, \\"total_amount\\": round(total_amount, 2), \\"average_amount\\": round(average_amount, 2) }"},{"question":"# Problem Statement You are given a list of non-negative integers, representing the numbers observed on different segments of an LED display. You need to determine if it\'s possible to arrange the numbers in such a way that they form a continuous sequence starting from 0 up to the highest number in the list, with each digit represented by exactly one observed number. - The list can contain duplicates. - Each number can be used only once in the sequence. - Leading zeroes are not valid. Write a function `can_form_sequence(observations)` that takes a list of integers `observations` and returns `True` if it\'s possible to form the sequence described above, otherwise it returns `False`. # Examples ```python can_form_sequence([9, 1, 3, 0, 6]) # returns: False, because there is no 2, 4, 5, 7, and 8 can_form_sequence([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) # returns: True, because we can form a sequence from 0 to 9 ``` # Notes - The input list will contain at least one element and at most 10,000 elements. - Only non-negative integers are present in the list. - The function must return `True` or `False`. # Constraints - `1 <= len(observations) <= 10,000` - `0 <= observations[i] <= 10,000` This problem tests your understanding of sequence formation and your ability to manipulate arrays and sets to ensure uniqueness and continuity in a sequence.","solution":"def can_form_sequence(observations): Determines if it is possible to form a continuous sequence from 0 to the highest number in the observations. Args: observations (list of int): List of non-negative integers. Returns: bool: True if a continuous sequence can be formed, otherwise False. if not observations: return False max_num = max(observations) expected_set = set(range(max_num + 1)) observations_set = set(observations) return expected_set == observations_set"},{"question":"Given a list of integers representing temperatures recorded over a week, write a function to find the maximum difference between two temperatures such that the second temperature occurs after the first one. If no such pair exists, return 0. Example 1: Input: temperatures = [30, 20, 25, 28, 33, 24, 30] Output: 13 Explanation: The maximum difference is between 20 (day 2) and 33 (day 5). Example 2: Input: temperatures = [35, 34, 33, 32, 31] Output: 0 Explanation: Since all temperatures are in descending order, no valid pair exists. Example 3: Input: temperatures = [20, 18, 22, 23, 21, 24, 19] Output: 6 Explanation: The maximum difference is between 18 (day 2) and 24 (day 6). Example 4: Input: temperatures = [50] Output: 0 Explanation: Only one temperature recording exists, so no valid pair exists. Constraints: 1 <= temperatures.length <= 1000 -100 <= temperatures[i] <= 100","solution":"def max_temperature_difference(temperatures): Finds the maximum difference between two temperatures such that the second temperature occurs after the first one. Returns 0 if no such pair exists. if len(temperatures) < 2: return 0 max_diff = 0 min_temp = temperatures[0] for temp in temperatures[1:]: if temp - min_temp > max_diff: max_diff = temp - min_temp if temp < min_temp: min_temp = temp return max_diff"},{"question":"A transportation company uses two types of vehicles, Type A and Type B, for delivering goods. Each vehicle has a maximum capacity, and a fleet of vehicles is tasked with delivering a certain amount of goods. The company wants to optimize the use of the fleet such that the minimum number of vehicles is used to deliver exactly the required amount of goods. Given the number of vehicles of Type A and Type B, their respective capacities, and the total amount of goods to be delivered, determine the minimum number of vehicles needed. If it is impossible to deliver the exact amount of goods using the available vehicles, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers C_A, C_B, and M where C_A is the capacity of a Type A vehicle, C_B is the capacity of a Type B vehicle, and M is the total amount of goods to be delivered. - The second line of each test case contains two space-separated integers N_A and N_B where N_A is the number of Type A vehicles available and N_B is the number of Type B vehicles available. -----Output----- For each test case, print a single line containing the minimum number of vehicles required to deliver exactly M units of goods, or -1 if it is impossible. -----Constraints----- - 1 le T le 10^5 - 1 le C_A, C_B le 10^3 - 1 le M le 10^6 - 0 le N_A, N_B le 10^3 -----Example Input----- 2 3 5 11 4 2 2 6 15 1 1 -----Example Output----- 3 -1 -----Explanation----- Example case 1: One possible way to deliver exactly 11 units of goods is to use two Type A vehicles (6 units) and one Type B vehicle (5 units). Therefore, the minimum number of vehicles required is 3. Example case 2: It is not possible to deliver exactly 15 units of goods with the available vehicles (either one Type A with 2 units and one Type B with 6 units or 8 units of goods in total, which isn\'t sufficient). Hence, the output is -1.","solution":"def min_vehicles(C_A, C_B, M, N_A, N_B): Determine the minimum number of vehicles needed to deliver exactly M units of goods. # Initialize the table for DP with infinity (M+1 is used assuming no more than M vehicles needed) dp = [float(\'inf\')] * (M + 1) dp[0] = 0 # Iterate over each vehicle type for _ in range(N_A): for j in range(M, C_A - 1, -1): if dp[j - C_A] != float(\'inf\'): dp[j] = min(dp[j], dp[j - C_A] + 1) for _ in range(N_B): for j in range(M, C_B - 1, -1): if dp[j - C_B] != float(\'inf\'): dp[j] = min(dp[j], dp[j - C_B] + 1) return dp[M] if dp[M] != float(\'inf\') else -1 def process_input(input_data): Processes the input data and returns the results for each test case. input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) results = [] line_index = 1 for _ in range(T): C_A, C_B, M = map(int, input_lines[line_index].split()) N_A, N_B = map(int, input_lines[line_index + 1].split()) results.append(min_vehicles(C_A, C_B, M, N_A, N_B)) line_index += 2 return results"},{"question":"String Slicing Machine You are building a software system that requires dynamic string slicing based on user commands. The user is allowed to input a string along with a set of slicing commands. Each command specifies how the input string should be sliced and combined to create the final result. # Command Format Each slicing command follows this format: - `<start>:<end>`: Slice the string from index `start` to index `end` (inclusive). - Separate multiple commands with commas `,`. For example: - `2:4` means slice from index `2` to `4`, inclusive. - `0:0,2:2` means the first and third characters. # Inputs - **String**: The input string to be sliced. - **Commands**: A string of slicing commands. # Outputs Your task is to implement a function `slice_string` that takes the following arguments: - `input_string` (string): The string to be sliced. - `commands` (string): The slicing commands. The function should return the new string resulting from all the commands applied in order. # Examples ```python def slice_string(input_string:str, commands:str) -> str: # Your code here # Example 1 assert slice_string(\\"HelloWorld\\", \\"0:4,5:9\\") == \\"HelloWorld\\" # Explanation: The slices are \\"Hello\\" and \\"World\\", concatenated to form \\"HelloWorld\\". # Example 2 assert slice_string(\\"abcde\\", \\"1:3,0:0\\") == \\"bcd\\" # Explanation: The slices are \\"bcd\\" and \\"a\\", concatenated to form \\"bcda\\". # Example 3 assert slice_string(\\"CodeWars\\", \\"1:3,0:0,4:7\\") == \\"odeCWars\\" # Explanation: The slices are \\"ode\\", \\"C\\", and \\"Wars\\", concatenated to form \\"odeCWars\\". # Example 4 assert slice_string(\\"abcdef\\", \\"1:2,3:3,5:5\\") == \\"bce\\" # Explanation: The slices are \\"bc\\", \\"d\\", and \\"f\\", concatenated to form \\"bcdf\\". ``` # Note - Assume that `input_string` will always be non-empty and contain only alphanumeric characters. - `commands` will include valid slices in the format `start:end` where `start` and `end` are integers such that `0 <= start <= end < len(input_string)`. - If the `commands` string is empty, the function should return an empty string.","solution":"def slice_string(input_string: str, commands: str) -> str: Slice the input_string based on the slicing commands and return the concatenated result. Args: - input_string (str): The string to be sliced. - commands (str): The slicing commands. Returns: - str: The concatenated result of the slices. if not commands: return \\"\\" result = [] commands_list = commands.split(\',\') for command in commands_list: start, end = map(int, command.split(\':\')) result.append(input_string[start:end+1]) return \'\'.join(result)"},{"question":"Write a function that calculates the total amount of water trapped between the pillars after it rains. You are given an array where each element represents the height of a pillar. Water is trapped between the pillars if a smaller pillar is surrounded by taller ones. Write a function that receives an array of integers representing the heights of the pillars and returns the total amount of water trapped. Example: ```python def water_trapped(pillar_heights): # Your code here # Test cases print(water_trapped([0,1,0,2,1,0,1,3,2,1,2,1])) # should return 6 print(water_trapped([2,0,2])) # should return 2 print(water_trapped([3,0,0,2,0,4])) # should return 10 ``` Explanation: - In the first example, the water is trapped as follows: between the 1st and 3rd pillars, we have 1 unit of water; between the 5th and 7th, we have 4 units of water; and between the 9th and 11th, we have 1 unit of water. - In the second example, the water is trapped between the first two pillars with a total height of 2 units. - In the third example, the water is trapped between the 1st and 5th pillars forming a total height of 10 units.","solution":"def water_trapped(pillar_heights): Calculate the total amount of water trapped between the pillars after it rains. :param pillar_heights: A list of integers representing the heights of the pillars. :return: The total amount of water trapped. if not pillar_heights: return 0 left, right = 0, len(pillar_heights) - 1 left_max, right_max = pillar_heights[left], pillar_heights[right] water_trapped = 0 while left < right: if pillar_heights[left] < pillar_heights[right]: if pillar_heights[left] >= left_max: left_max = pillar_heights[left] else: water_trapped += left_max - pillar_heights[left] left += 1 else: if pillar_heights[right] >= right_max: right_max = pillar_heights[right] else: water_trapped += right_max - pillar_heights[right] right -= 1 return water_trapped"},{"question":"Write a function that takes a string as input and returns a new string where all the vowels (a, e, i, o, u) have been removed. The function should handle both uppercase and lowercase vowels, but should preserve the case of all other letters and the positioning of non-letter characters. ```if-not:haskell Return \\"Invalid input\\" if the input is not a string. ``` ```if:haskell Return `Nothing` if the input is not a string and `Just` the modified string otherwise. ``` Example: ```python remove_vowels(\\"This is an example!\\") ``` Output: ```python \\"Ths s n xmpl!\\" ```","solution":"def remove_vowels(s): Removes all vowels (a, e, i, o, u) from the input string, case insensitive. Preserves the case of non-vowel letters and positioning of non-letter characters. Returns \\"Invalid input\\" if the input is not a string. if not isinstance(s, str): return \\"Invalid input\\" vowels = \\"aeiouAEIOU\\" return \'\'.join([char for char in s if char not in vowels])"},{"question":"# Warehouse Package Organizer You are designing a package arrangement for a warehouse management system. The warehouse is represented as a 2D grid with `M` rows and `N` columns. Each cell in the grid can hold a single package, and each package has a weight. The challenge is to determine the minimum gross weight of the entire warehouse when arranging the packages provided in a specific order. The gross weight is defined as the sum of weights in the selected arrangement. However, package weights have to be placed row-wise from top to bottom and left to right, filling an entire row before moving to the next row. For instance, given a grid with dimensions 3x3 and the package weights: [4, 7, 2, 8, 5, 3, 1, 6, 9], the grid should be filled as: ``` 4 7 2 8 5 3 1 6 9 ``` The objective is to compute the warehouse\'s gross weight. ---Input format--- The first line contains two integers `M` and `N` representing the number of rows and columns in the grid. The second line contains `M * N` integers representing the weights of the packages. ---Output format--- Print a single integer representing the gross weight of the warehouse when the packages are arranged as described. ---Test Data--- The test data is grouped into two subtasks with the following constraints on the inputs: * Subtask 1 [30 points]: 1 ≤ M, N ≤ 100 * Subtask 2 [70 points]: 1 ≤ M, N ≤ 10^4 In both the subtasks, all the package weights are between 1 and 10000, inclusive. ---Example--- ---Sample Input--- 3 3 4 7 2 8 5 3 1 6 9 ---Sample Output--- 45 Note: Ensure your code does not print anything other than the output format specified. Avoid any diagnostic print statements before the final submission. A program with extraneous output will be considered incorrect.","solution":"def compute_gross_weight(M, N, package_weights): Compute the gross weight of a warehouse given the dimensions and weights of the packages. Args: M (int): Number of rows in the grid. N (int): Number of columns in the grid. package_weights (list of int): Weights of the packages. Returns: int: The gross weight (sum) of the packages arranged in the grid. return sum(package_weights)"},{"question":"You are given a string containing a sentence. Your task is to write a function `reverseWords()` that reverses the order of words in that sentence while maintaining the order of characters within each word. Punctuation and special characters should be treated as part of the words. # Example ```python reverseWords(\\"hello world!\\") # should return \\"world! hello\\" reverseWords(\\"Python is fun\\") # should return \\"fun is Python\\" reverseWords(\\"\\") # should return \\"\\" reverseWords(\\"A B C D\\") # should return \\"D C B A\\" reverseWords(\\"code@work time!\\") # should return \\"time! code@work\\" ``` # Constraints - The input string can contain alphanumeric characters, punctuation, and spaces. - You can assume that the string is a valid sentence and the words are separated by a single space. - No leading or trailing spaces in the input string.","solution":"def reverseWords(sentence): This function reverses the order of words in a sentence while maintaining the order of characters within each word. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Write a function called `review_string` that takes a string as input and analyzes its content. The function should return a dictionary with the following information about the string: 1. The length of the string. 2. The number of vowels (a, e, i, o, u) in the string. 3. The number of consonants in the string. 4. The number of digits in the string. 5. The number of whitespace characters in the string. The dictionary keys should be \'length\', \'vowels\', \'consonants\', \'digits\', and \'whitespace\'. If the input is not a string, return \\"Invalid input!\\". Example: ``` review_string(\\"Hello World 123\\") should return: { \\"length\\": 15, \\"vowels\\": 3, \\"consonants\\": 7, \\"digits\\": 3, \\"whitespace\\": 2 } review_string(12345) should return \\"Invalid input!\\" ```","solution":"def review_string(s): if not isinstance(s, str): return \\"Invalid input!\\" vowels = set(\'aeiouAEIOU\') result = { \\"length\\": len(s), \\"vowels\\": 0, \\"consonants\\": 0, \\"digits\\": 0, \\"whitespace\\": 0 } for char in s: if char in vowels: result[\\"vowels\\"] += 1 elif char.isalpha(): result[\\"consonants\\"] += 1 elif char.isdigit(): result[\\"digits\\"] += 1 elif char.isspace(): result[\\"whitespace\\"] += 1 return result"},{"question":"Task: You are to write a function that takes as input a positive integer n and returns a string representation of all the numbers from 1 to n, but with the following conditions: - For multiples of three, return \\"Fizz\\" instead of the number. - For multiples of five, return \\"Buzz\\" instead of the number. - For multiples of both three and five, return \\"FizzBuzz\\". The task requires efficient handling of loops and conditionals in order to construct the result string. Testing: Python: ```python >>> fizzbuzz(15) \'1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz\' >>> fizzbuzz(5) \'1 2 Fizz 4 Buzz\' ```","solution":"def fizzbuzz(n): Returns a string representation of numbers from 1 to n with specific rules: - \\"Fizz\\" for multiples of three. - \\"Buzz\\" for multiples of five. - \\"FizzBuzz\\" for multiples of both three and five. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return \' \'.join(result)"},{"question":"Develop a class `LFUCache` to implement a Least Frequently Used (LFU) cache, which has: - A constructor that takes a positive integer capacity as an argument, representing the maximum capacity of the cache. - A function `get(key)` that returns the value of the key if it exists in the cache, otherwise returns -1. - A function `put(key, value)` that updates or inserts the value for the key if it doesn\'t exist. When the cache reaches its capacity, it should invalidate the least frequently used items. When there is a tie, least recently used keys should be invalidated first. Example: ```python lfu = LFUCache(2); lfu.put(1, 1); lfu.put(2, 2); print(lfu.get(1)); # returns 1 lfu.put(3, 3); # evicts key 2 print(lfu.get(2)); # returns -1 (not found) print(lfu.get(3)); # returns 3 lfu.put(4, 4); # evicts key 1 print(lfu.get(1)); # returns -1 (not found) print(lfu.get(3)); # returns 3 print(lfu.get(4)); # returns 4 ``` Constraints: - 0 <= capacity <= 10^4 - A call to `get` or `put` should be executed in a constant time complexity (O(1)). - The number of calls to `get` and `put` is at most 10^5. - 1 <= key, value <= 10^5","solution":"from collections import defaultdict, OrderedDict class LFUCache: def __init__(self, capacity: int): self.capacity = capacity self.min_freq = 1 self.key_to_val = {} self.key_to_freq = {} self.freq_to_keys = defaultdict(OrderedDict) def get(self, key: int) -> int: if key not in self.key_to_val: return -1 # Update the frequency of the key self.update_freq(key) return self.key_to_val[key] def put(self, key: int, value: int) -> None: if self.capacity <= 0: return if key in self.key_to_val: # Update value and frequency self.key_to_val[key] = value self.update_freq(key) else: if len(self.key_to_val) >= self.capacity: # Evict the least frequent and least recently used key self.evict() # Insert the new key-value pair self.key_to_val[key] = value self.key_to_freq[key] = 1 self.freq_to_keys[1][key] = None self.min_freq = 1 def update_freq(self, key: int): freq = self.key_to_freq[key] del self.freq_to_keys[freq][key] if not self.freq_to_keys[freq]: del self.freq_to_keys[freq] if self.min_freq == freq: self.min_freq += 1 new_freq = freq + 1 self.key_to_freq[key] = new_freq self.freq_to_keys[new_freq][key] = None def evict(self): key, _ = self.freq_to_keys[self.min_freq].popitem(last=False) del self.key_to_val[key] del self.key_to_freq[key] if not self.freq_to_keys[self.min_freq]: del self.freq_to_keys[self.min_freq]"},{"question":"# Task Given an array of integers, your task is to determine if it\'s possible to partition the array into two subsets such that the sum of the elements in each subset is the same. If it\'s possible, return `true`, otherwise return `false`. # Detailed Description - You will be given an array of integers `nums` where `1 <= nums.length <= 200` and `1 <= nums[i] <= 100`. - Return `true` if you can partition the array into two subsets such that the sum of the elements in both subsets is equal, otherwise return `false`. # Example ```python def canPartition(nums): total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition it into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 # Initializing a set to store possible sums up to target using elements from nums possible_sums = {0} for num in nums: current_sums = list(possible_sums) for s in current_sums: if s + num == target: return True possible_sums.add(s + num) return target in possible_sums # Example print(canPartition([1, 5, 11, 5])) # Output: True print(canPartition([1, 2, 3, 5])) # Output: False ``` # Explanation In this example: - For the array `[1, 5, 11, 5]`, we can partition it into `[1, 5, 5]` and `[11]`, both of which sum to 11, so the function returns `true`. - For the array `[1, 2, 3, 5]`, there is no way to partition it into two subsets with equal sum, so the function returns `false`. # Note - You can use dynamic programming to keep track of all possible subset sums up to half the total sum. - Be mindful of the constraints to ensure your solution runs efficiently within the given limits.","solution":"def canPartition(nums): Determines if the array can be partitioned into two subsets with equal sum. total_sum = sum(nums) if total_sum % 2 != 0: return False target = total_sum // 2 possible_sums = {0} for num in nums: current_sums = list(possible_sums) for s in current_sums: if s + num == target: return True possible_sums.add(s + num) return target in possible_sums"},{"question":"Create a function that takes a string as input and capitalizes the first letter of each word. The function should retain spaces and handle all types of whitespace properly. # Examples ``` capitalizeWords(\\"hello world\\") ==> \\"Hello World\\" capitalizeWords(\\" this is a test\\") ==> \\" This Is A Test\\" capitalizeWords(\\"multiple spaces\\") ==> \\"Multiple Spaces\\" capitalizeWords(\\"tabtcharacters\\") ==> \\"TabtCharacters\\" capitalizeWords(\\"a mix ofnnewlinesnand spaces\\") ==> \\"A Mix OfnNewlinesnAnd Spaces\\" ```","solution":"def capitalizeWords(s): Capitalizes the first letter of each word in the string. return \' \'.join(word.capitalize() for word in s.split(\' \')) # Note: This solution works for normal spaces and ensures multiple spaces are preserved as expected # but it treats different white spaces like t and n as characters, meaning it won\'t handle them separately."},{"question":"Given a list of integers, write a function to find the maximum sum of a subarray (a contiguous part) with at least one element. Your function should return both the maximum sum and the subarray itself. For example, ```python Input: [-2, -3, 4, -1, -2, 1, 5, -3] Output: (7, [4, -1, -2, 1, 5]) ``` ```python def max_subarray_sum(nums): # Your code here pass # Test the function print(max_subarray_sum([-2, -3, 4, -1, -2, 1, 5, -3])) # Should output (7, [4, -1, -2, 1, 5]) ```","solution":"def max_subarray_sum(nums): Function to find the maximum sum of a subarray and return the subarray itself. if not nums: return (0, []) max_sum = nums[0] current_sum = nums[0] start = 0 end = 0 temp_start = 0 for i in range(1, len(nums)): if nums[i] > current_sum + nums[i]: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if current_sum > max_sum: max_sum = current_sum start = temp_start end = i return max_sum, nums[start:end+1]"},{"question":"Write a function that accepts a list of integers and returns a new list containing the squares of all the positive integers from the original list. If there are no positive integers, the function should return an empty list. For example: Input: [1, -2, 3, -4, 5] Output: [1, 9, 25] Note: Negative numbers and zero should not be included in the output list. Maintain the order from the original list in the output.","solution":"def squares_of_positive_integers(integers_list): Returns a list containing squares of all positive integers from the original list. Args: integers_list (list): The list of integers. Returns: list: A list containing the squares of positive integers. return [x**2 for x in integers_list if x > 0]"},{"question":"Task Determine whether a given string can be rearranged to form a palindrome. # Input range ```python 1000 tests 1 <= len(s) <= 100,000 ``` ___ Conditions 1. A palindrome is a word or phrase that reads the same forwards and backwards (ignoring spaces and punctuation). 2. A string can be rearranged to form a palindrome if and only if at most one character has an odd count. ___ Examples ```python can_form_palindrome(\\"civic\\") == True can_form_palindrome(\\"ivicc\\") == True can_form_palindrome(\\"hello\\") == False can_form_palindrome(\\"aabbh\\") == True ```","solution":"def can_form_palindrome(s): Determines if the given string can be rearranged to form a palindrome. :param s: Input string :return: True if it can be rearranged to form a palindrome, False otherwise from collections import Counter # Count the frequency of each character char_count = Counter(s) # Count how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # It can form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"Given an array of integers, write a function to determine the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one positive integer. For example, for the array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the contiguous subarray with the maximum sum is `[4, -1, 2, 1]`, and the sum is `6`. You should implement the function using the following signature: ```python def max_subarray_sum(arr: List[int]) -> int: pass ``` **Input** - An array of integers `arr` (1 <= len(arr) <= 10^5, -10^4 <= arr[i] <= 10^4). **Output** - Return an integer, which is the maximum sum of a contiguous subarray. # Examples Example 1: ```plaintext Input: arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] Output: 6 Explanation: [4, -1, 2, 1] has the largest sum 6 ``` Example 2: ```plaintext Input: arr = [1] Output: 1 Explanation: The largest subarray is the array itself with sum 1 ``` Example 3: ```plaintext Input: arr = [5, 4, -1, 7, 8] Output: 23 Explanation: The largest subarray is [5, 4, -1, 7, 8] with sum 23 ``` **Note** Implement this with a time complexity of O(n). Consider using Kadane\'s Algorithm to solve this problem efficiently.","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: Function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers which has at least one positive integer using Kadane\'s algorithm. # Initialize our variables max_current = max_global = arr[0] for num in arr[1:]: # Update max_current to the greater of current element or sum of max_current and current element max_current = max(num, max_current + num) # Update max_global if max_current is greater if max_current > max_global: max_global = max_current return max_global"},{"question":"Consider a modified version of the classic Fibonacci sequence problem. Instead of generating the usual Fibonacci sequence, generate a sequence where each number is the sum of the previous three numbers. This is commonly known as the Tribonacci sequence. You will be given three initial numbers `a`, `b`, and `c`, and a positive integer `n`. Your task is to generate the first `n` numbers of the Tribonacci sequence given the initial three numbers. For example, given `a = 0`, `b = 0`, `c = 1`, and `n = 10`, the output should be `[0, 0, 1, 1, 2, 4, 7, 13, 24, 44]`. If `n` is less than or equal to 3, return the first `n` numbers from the initial values. Here\'s a function signature to help you get started: ```python def tribonacci(a, b, c, n): # Your code here ``` Note: 1. If `n` is `1`, return `[a]`. 2. If `n` is `2`, return `[a, b]`. 3. If `n` is `3`, return `[a, b, c]`. 4. Otherwise, proceed to generate the Tribonacci sequence by summing the previous three numbers until you have generated `n` numbers.","solution":"def tribonacci(a, b, c, n): Generates the first n numbers of the Tribonacci sequence given initial numbers a, b, and c. if n == 1: return [a] elif n == 2: return [a, b] elif n == 3: return [a, b, c] # Initialize the sequence with the first three numbers sequence = [a, b, c] # Generate the rest of the sequence for _ in range(n - 3): next_val = sequence[-1] + sequence[-2] + sequence[-3] sequence.append(next_val) return sequence"},{"question":"Write a function that takes a string of lowercase letters and returns the first character that appears more than once in the string. If no such character exists, return an empty string. For example: ```python first_repeated_char(\\"programming\\") >>> first repeated character is \'r\' return \'r\' first_repeated_char(\\"abcdefgh\\") >>> no repeated character return \'\' first_repeated_char(\\"aabbcc\\") >>> first repeated character is \'a\' return \'a\' ```","solution":"def first_repeated_char(s): Returns the first character that appears more than once in the string s. If no such character exists, returns an empty string. :param s: str, input string :return: str, first repeated character or an empty string char_set = set() for char in s: if char in char_set: return char char_set.add(char) return \\"\\""},{"question":"You are given a matrix of integers where each cell contains either a 0 or a 1. Your task is to find the largest square submatrix that contains only 1s and return its area. A square submatrix is a matrix that is made of some contiguous subarray of cells within the given matrix where the number of rows is equal to the number of columns. For example, consider the following matrix: ``` 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` The largest square submatrix that contains only 1s in this matrix is: ``` 1 1 1 1 ``` This submatrix has an area of 4. -----Input----- The first line contains two integers m and n (1 le m, n le 1000) — the number of rows and columns of the matrix. Each of the next m lines contains n integers (each integer is either 0 or 1) — the initial state of the matrix. -----Output----- Output a single integer — the area of the largest square submatrix that contains only 1s. -----Example----- Input 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output 4 -----Explanation----- In the example, the largest square submatrix containing only 1s has area 4. Note that if there are multiple square submatrices with the same maximum area, you can output the area of any one of them.","solution":"def largest_square_submatrix_area(matrix): if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) # Initialize a 2D dp array with zeros dp = [[0] * n for _ in range(m)] max_side = 0 # Fill the dp array for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) # The area of the largest square submatrix with only 1s return max_side * max_side"},{"question":"You are given an array of n integers a1, a2, ..., an and an integer k. Your task is to determine the number of distinct integers in every subarray of length k. Return a list of integers where the i-th element represents the number of distinct integers in the subarray starting at index i. -----Input----- - The first line of the input contains a single integer n: the size of the array. - The second line of the input contains n space-separated integers a1, a2, ..., an. - The third line contains a single integer k. -----Output----- Print a list of integers where the i-th element is the count of distinct integers in the subarray ai, ai+1, ..., ai+k-1 for 0 ≤ i ≤ n-k. -----Constraints----- - 1 ≤ n ≤ 105 - 1 ≤ k ≤ n - 1 ≤ ai ≤ 109 -----Example----- Input: 7 1 2 1 3 4 2 3 4 Output: 3 4 4 3","solution":"def count_distinct_in_subarrays(n, arr, k): Function to count the number of distinct integers in every subarray of length k. Parameters: n (int): The size of the array. arr (list of int): The input array of integers. k (int): The length of the subarray. Returns: list of int: A list where the i-th element represents the number of distinct integers in the subarray starting at index i. from collections import defaultdict distinct_counts = [] freq = defaultdict(int) distinct = 0 # Initialize the frequency dictionary for the first window for i in range(k): if freq[arr[i]] == 0: distinct += 1 freq[arr[i]] += 1 distinct_counts.append(distinct) # Slide the window from start to end for i in range(k, n): if freq[arr[i - k]] == 1: distinct -= 1 freq[arr[i - k]] -= 1 if freq[arr[i]] == 0: distinct += 1 freq[arr[i]] += 1 distinct_counts.append(distinct) return distinct_counts"},{"question":"Write a function that takes in a non-empty array of integers and returns the index of the element with the highest value. If there are multiple elements with the highest value, return the index of the first occurrence. The function should have the following signature: ```python def find_max_index(arr: List[int]) -> int: ``` # Constraints: - The input array will have at least one element. - The elements of the array will be integers ranging from `-10^6` to `10^6`. # Example: Input: `[1, 3, 7, 7, 2]` Output: `2` # index of the first 7","solution":"from typing import List def find_max_index(arr: List[int]) -> int: Returns the index of the element with the highest value. If there are multiple elements with the highest value, returns the index of the first occurrence. # Initialize the maximum value and its index max_value = arr[0] max_index = 0 # Iterate through the array to find the maximum value and its index for index in range(1, len(arr)): if arr[index] > max_value: max_value = arr[index] max_index = index return max_index"},{"question":"Your company, Ocean Drift, is the leading distributor of custom surfboards. You own several factories where surfboards are manufactured. Each surfboard is constructed using different types of materials, and you need to ensure that your inventory system accurately tracks the quantity of materials used. Write a function `material_usage()` that calculates the total usage of a specific material given a list of surfboards and their respective material compositions. The function should take two arguments: a list of dictionaries, where each dictionary represents a surfboard and has material names as keys with the corresponding quantity used as values, and a string representing the material name for which the usage needs to be calculated. The function should return the total quantity of the specified material used across all surfboards. For example: ```python surfboards = [ {\\"fiberglass\\": 10, \\"resin\\": 5, \\"foam\\": 20}, {\\"fiberglass\\": 12, \\"resin\\": 7, \\"foam\\": 22}, {\\"fiberglass\\": 8, \\"resin\\": 6, \\"foam\\": 18}, ] ``` `material_usage(surfboards, \\"fiberglass\\")` should return `30`, because the total usage of fiberglass is 10 + 12 + 8.","solution":"def material_usage(surfboards, material): Calculates the total usage of a specific material given a list of surfboards. Args: surfboards (list of dict): List of dictionaries, each representing a surfboard and its materials. material (str): The material name for which the usage needs to be calculated. Returns: int: The total quantity of the specified material used across all surfboards. return sum(surfboard.get(material, 0) for surfboard in surfboards)"},{"question":"Create an algorithm to find the maximum product of two distinct elements from an array of integers. Each element in the array is used only once and it is guaranteed that the array contains at least two elements. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with an integer N denoting the number of elements in the array. The second line contains N space-separated integers, denoting the elements of the array. -----Output----- For each test case, output a single line containing the maximum product of two distinct elements in the array. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 10^5 - -10^4 ≤ Elements of the array ≤ 10^4 -----Example----- Input: 2 4 1 2 3 4 3 -10 -20 5 Output: 12 200 -----Explanation----- Example case 1: The maximum product is obtained by multiplying the two largest elements in the array: 4 * 3 = 12. Example case 2: The maximum product is obtained by multiplying -10 and -20, which results in 200.","solution":"def max_product_of_two(arr): Given a list of integers, returns the maximum product of two distinct elements. if len(arr) < 2: raise ValueError(\\"The array must contain at least two elements.\\") # Sorting the array arr.sort() # Maximum product can be the product of the two largest elements # or the product of the two smallest (most negative) elements return max(arr[-1] * arr[-2], arr[0] * arr[1]) def process_test_cases(T, test_cases): Processes multiple test cases and returns the results as a list. results = [] for case in test_cases: results.append(max_product_of_two(case)) return results"},{"question":"You are given a list of distinct integers. You need to find the maximum difference between two elements in the list, such that the larger element appears after the smaller element. -----Input:----- - The input consists of two lines. - The first line contains N, the number of elements in the list. - The second line contains N space-separated integers representing the list of numbers. -----Output:----- - Print the maximum difference between two elements in the list, with the condition that the larger element appears after the smaller element in the list. If no such pair exists, print -1. -----Constraints----- - 1 leq N leq 1000 - The elements of the list are distinct and range from -10^5 to 10^5. -----Sample Input:----- 6 7 1 5 3 6 4 -----Sample Output:----- 5 -----Explanation:----- The maximum difference is 6 - 1 = 5, where 6 appears after 1 in the list.","solution":"def max_difference(nums): Return the maximum difference between two elements in the list `nums` such that the larger element appears after the smaller element. if not nums or len(nums) < 2: return -1 min_element = nums[0] max_diff = -1 for num in nums[1:]: if num - min_element > max_diff: max_diff = num - min_element if num < min_element: min_element = num return max_diff"},{"question":"**Stock Span Problem** The stock span problem is a financial problem where we have a series of n daily price quotes for a stock, and we need to calculate the span of stock’s price for all n days. The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the current day is less than or equal to its price on the given day. For example, if the input prices are [100, 80, 60, 70, 60, 75, 85], then the output span values will be [1, 1, 1, 2, 1, 4, 6]. Your task is to complete the function `calculateSpan(prices)` that takes a list of integers representing the daily prices of the stock and returns a list of integers representing the stock span values. # Function Signature ```python def calculateSpan(prices: List[int]) -> List[int]: ``` # Input - A list of n integers `prices` where 1 ≤ n ≤ 10⁵ and 1 ≤ `prices[i]` ≤ 10⁶. # Output - A list of n integers representing the span of the stock’s price for each day. # Example ```python assert calculateSpan([100, 80, 60, 70, 60, 75, 85]) == [1, 1, 1, 2, 1, 4, 6] ``` # Constraints 1. The elements in the input list will always be positive integers within the range given above. 2. Aim for a time complexity of O(n) for an efficient solution.","solution":"from typing import List def calculateSpan(prices: List[int]) -> List[int]: span = [0] * len(prices) stack = [] for i in range(len(prices)): while stack and prices[stack[-1]] <= prices[i]: stack.pop() if not stack: span[i] = i + 1 else: span[i] = i - stack[-1] stack.append(i) return span"},{"question":"In a fantasy land, there are n types of magical potions. Each potion can be mixed with another specific potion to create a unique spell. The potions and their corresponding spell types are represented by a dictionary. Given a list of potion pairs, determine the number of unique spells that can be created. Input - A dictionary where the keys are potion names (strings) and the values are the corresponding spell types (strings). - A list of tuples, where each tuple consists of two potion names (strings) that are to be mixed. Output - Return an integer representing the number of unique spells created. Example ```python def count_unique_spells(potion_spell_dict, potion_pairs): # Your code here potion_spell_dict = { \\"Red\\": \\"Fire\\", \\"Blue\\": \\"Water\\", \\"Green\\": \\"Earth\\", \\"Yellow\\": \\"Air\\" } potion_pairs = [(\\"Red\\", \\"Blue\\"), (\\"Green\\", \\"Yellow\\"), (\\"Red\\", \\"Green\\")] print(count_unique_spells(potion_spell_dict, potion_pairs)) ``` # Notes - A spell is considered unique based on its spell type. - Assume that the dictionary and list contain only valid potion names present in the dictionary.","solution":"def count_unique_spells(potion_spell_dict, potion_pairs): Given a dictionary of potions and their corresponding spell types, and a list of potion pairs, determine the number of unique spells that can be created. Parameters: potion_spell_dict (dict): A dictionary where keys are potion names and values are spell types. potion_pairs (list of tuples): A list of tuples where each tuple consists of two potion names. Returns: int: The number of unique spells created. unique_spells = set() for potion1, potion2 in potion_pairs: spell1 = potion_spell_dict[potion1] spell2 = potion_spell_dict[potion2] combined_spell = (spell1, spell2) if spell1 <= spell2 else (spell2, spell1) unique_spells.add(combined_spell) return len(unique_spells)"},{"question":"Given an array of integers, your task is to find the most frequent element. If there are multiple elements with the same highest frequency, return the smallest one. Write a function that takes an array of integers and returns the smallest integer that appears most frequently in the array. # Input - An array of integers `arr` (0 <= arr.length <= 10^6, -10^6 <= arr[i] <= 10^6) # Output - An integer representing the smallest number with the highest frequency in the array. # Example ``` Input: [1, 3, 2, 3, 3, 1, 2, 2, 2, 4] Output: 2 Input: [5, 5, 4, 6, 6, 6, 4, 5, 4] Output: 4 Input: [7] Output: 7 ``` # Note - In the first example, both `2` and `3` appear 4 times, but `2` is smaller. - In the second example, `4` and `5` both appear 3 times, but `4` is smaller. - In the third example, there is only one element `7`, so the answer is `7`.","solution":"from collections import Counter def most_frequent_smallest_element(arr): if not arr: return None # Edge case handling when the array is empty. frequency = Counter(arr) max_frequency = max(frequency.values()) most_frequent_elements = [num for num, freq in frequency.items() if freq == max_frequency] return min(most_frequent_elements)"},{"question":"=====Function Descriptions===== find_duplicates(nums): Given a list of integers, this function should return a list of elements that appear more than once in the input list. The elements in the returned list should be sorted in ascending order. =====Problem Statement===== You are given a list of integers. Your task is to identify the duplicate elements that appear in the list. =====Input Format===== The first line contains an integer N, the number of elements in the list. The second line contains N space-separated integers representing the elements of the list. =====Output Format===== Print a space-separated list of duplicate elements in ascending order. If no duplicates are found, print an empty line.","solution":"def find_duplicates(nums): Returns a list of duplicate elements in ascending order from the input list. from collections import Counter counter = Counter(nums) duplicates = [num for num, count in counter.items() if count > 1] return sorted(duplicates)"},{"question":"List Comprehension Transformation (Medium #3) Create a function that takes a list of integers and a single integer value as inputs and returns a new list where each element of the original list is divided by the given integer value. The function should handle various edge cases, including division by zero and negative integers. Note: If division by zero is attempted, the function should return `None`. Examples ``` [ [4, 8, 12, 16], 2 ] ==> [2, 4, 6, 8] input list: [4, 8, 12, 16] divisor: 2 | | | | v v v v output list: [2, 4, 6, 8] ``` Another example: ``` [ [-6, -12, -18], -3 ] ==> [2, 4, 6] input list: [-6, -12, -18] divisor: -3 | | | v v v output list: [2, 4, 6] ``` Example with zero divisor: ``` [ [1, 2, 3], 0 ] ==> None input list: [1, 2, 3] divisor: 0 | v output: None ```","solution":"def divide_list(lst, divisor): Divides each element in lst by divisor and returns the resultant list. If division by zero is encountered, return None. Args: lst (list of int): The list of integers to be divided. divisor (int): The divisor to divide each element by. Returns: list of float or None: A new list with each element divided by the divisor, or None if division by zero. if divisor == 0: return None return [x / divisor for x in lst]"},{"question":"Design a class `MatrixQueries` that represents a 2D matrix of integers and supports the following methods: 1. **initializeMatrix(int rows, int cols, int initialValue)** - This method sets up the matrix with the specified number of rows and columns, and initializes all elements with the `initialValue`. 2. **setRow(int row, int value)** - This method sets all elements in the given `row` to the specified `value`. 3. **setCol(int col, int value)** - This method sets all elements in the given `col` to the specified `value`. 4. **getElement(int row, int col)** - Returns the current value of the element at the specified (`row`, `col`) position in the matrix. # Example: Input ``` [\\"MatrixQueries\\", \\"initializeMatrix\\", \\"getElement\\", \\"setRow\\", \\"getElement\\", \\"setCol\\", \\"getElement\\", \\"getElement\\"] [[], [4, 4, 0], [2, 2], [1, 5], [1, 2], [3, 10], [3, 2], [2, 2]] ``` Output ``` [null, null, 0, null, 5, null, 10, 0] ``` Explanation ``` MatrixQueries matrixQueries = new MatrixQueries(); matrixQueries.initializeMatrix(4, 4, 0); // The initial matrix (4x4) looks like: // 0 0 0 0 // 0 0 0 0 // 0 0 0 0 // 0 0 0 0 matrixQueries.getElement(2, 2); // return 0 matrixQueries.setRow(1, 5); // The matrix looks like: // 0 0 0 0 // 5 5 5 5 // 0 0 0 0 // 0 0 0 0 matrixQueries.getElement(1, 2); // return 5 matrixQueries.setCol(3, 10); // The matrix looks like: // 0 0 0 10 // 5 5 5 10 // 0 0 0 10 // 0 0 0 10 matrixQueries.getElement(3, 2); // return 10 matrixQueries.getElement(2, 2); // return 0 ``` # Constraints: - There will be at most 1000 operations overall. - 1 <= rows, cols <= 200 - 1 <= initialValue, value <= 10^6 - 0 <= row < rows - 0 <= col < cols","solution":"class MatrixQueries: def initializeMatrix(self, rows, cols, initialValue): Initializes the matrix with the given rows and columns, setting all values to initialValue. self.matrix = [[initialValue for _ in range(cols)] for _ in range(rows)] self.rows = rows self.cols = cols def setRow(self, row, value): Sets all elements in the given row to the specific value. if 0 <= row < self.rows: for col in range(self.cols): self.matrix[row][col] = value def setCol(self, col, value): Sets all elements in the given column to the specific value. if 0 <= col < self.cols: for row in range(self.rows): self.matrix[row][col] = value def getElement(self, row, col): Returns the current value of the element at the specified row and column. if 0 <= row < self.rows and 0 <= col < self.cols: return self.matrix[row][col] else: # Typically, you might want to raise an error here for invalid indices. raise IndexError(\\"Row or column index out of bounds\\")"},{"question":"Given an array of integers where each integer represents the price of a stock on a given day, you want to maximize your profit by choosing a single day to buy one stock and a different day in the future to sell that stock. Write a function that takes in the array of stock prices and returns the maximum profit you can achieve from this transaction. If there is no possible way to achieve profit, return 0. ___ Example: Let\'s say you have the following array of stock prices for a week: `[7, 1, 5, 3, 6, 4]`. - If you buy the stock on day 2 (price = `1`) and sell it on day 5 (price = `6`), your profit would be `6 - 1 = 5`. - Note that you cannot achieve maximum profit by buying on day 1 (`price = 7`) and selling on day 3 (`price = 5`). In that case, you would end up losing money (`5 - 7 = -2`). Thus, in this example, the maximum profit you can achieve is `5`. ___ Input: - An integer array `prices` where `prices[i]` is the price of a given stock on day `i`. Output: - The maximum profit you can achieve from buying and selling a stock. If you cannot achieve any profit, return `0`. **Function Signature:** ```python def maxProfit(prices: List[int]) -> int: # Your code here ``` **Note: performance will be tested.**","solution":"from typing import List def maxProfit(prices: List[int]) -> int: This function calculates the maximum profit you can achieve by buying and selling one share of the stock. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: # Update the min_price to the lowest price encountered so far if price < min_price: min_price = price else: # Calculate the profit if sold at the current price profit = price - min_price # Update the max_profit if the current profit is higher than the max_profit so far if profit > max_profit: max_profit = profit return max_profit"},{"question":"A college is organizing an inter-departmental coding competition, and each team is represented by students. Every team\'s coding performance is scored, and the top three scores from each team are considered for the overall ranking. You are given an array representing the scores of each team. Each element in the array is a subarray that contains the individual scores of the students in that team. Your task is to write a function that calculates the overall ranking score for each team by summing up their top three scores. If a team has less than three scores, sum all of their scores. Return an array of the overall ranking scores for each team, in the same order as the input array. Example 1: Input: [[50, 60, 70, 80], [55, 65], [95, 90, 85]] --> Output: [210, 120, 270] Example 2: Input: [[80, 50], [30, 40, 50], [60, 100, 80, 90]] --> Output: [130, 120, 270] Good luck! :-)","solution":"def calculate_team_scores(teams): Calculate the overall ranking scores for each team by summing up their top three scores. If a team has less than three scores, sum all of their scores. :param teams: List of lists, where each sublist represents the scores of a team :return: List of overall ranking scores for each team result = [] for team in teams: top_scores = sorted(team, reverse=True)[:3] result.append(sum(top_scores)) return result"},{"question":"# Definition A **_Palindrome Number_** *is a number that reads the same backwards as forwards*. ___ # Task **_Given_** a number, **_Find if it is a Palindrome or not_** . ____ # Warm-up (Highly recommended) # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ # Notes * **_Number_** *passed is always* **_Positive_** . * **_Return_** *the result as* a **_Boolean_** ~~~if:prolog * Since prolog doesn\'t have booleans, return value should be 1 for (True) or 0 for (false) ~~~ ___ # Input >> Output Examples ``` palindromeNumber (121) ==> return (true) ``` **_Explanation_**: **_The number_** `{ 1 , 2, 1 }` reads the same forwards and backwards. ____ ``` palindromeNumber (123) ==> return (false) ``` **_Explanation_**: **_The number_** `{ 1, 2, 3 }` does not read the same forwards and backwards. ___ ``` palindromeNumber (1001) ==> return (true) ``` **_Explanation_**: **_The number_** `{1 , 0, 0, 1}` reads the same forwards and backwards. ___ ``` palindromeNumber (13531) ==> return (true) ``` **_Explanation_**: **_The number_** `{1 , 3, 5, 3, 1}` reads the same forwards and backwards. ____ ``` palindromeNumber (233) ==> return (false) ``` **_Explanation_**: **_The number_** `{2 , 3, 3}` does not read the same forwards and backwards. ___ ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def palindromeNumber(num): Returns True if the number is a palindrome, False otherwise. return str(num) == str(num)[::-1]"},{"question":"John and his friends from the MDCS School of Speechcraft and Misery are organizing a Relay Race Competition. The competition consists of multiple games, where each game has its unique complexity and takes a certain amount of time to complete. The fun of the event is to randomly assign games to participants such that the total participation time is minimized. Each participant has a maximum time they can contribute, and each game has a distinct required time to complete. The aim is to match the participants to the games without exceeding anyone\'s maximum participation time. Given the number of participants and the list of their maximum participation times, along with the list of required times for the games, determine if it\'s possible to assign each game to a participant without exceeding their maximum participation time. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 200 000) — the number of participants and games. The next line contains n integers p_{i} (1 ≤ p_{i} ≤ 100 000) — the maximum participation time for the participants. The next line contains n integers g_{i} (1 ≤ g_{i} ≤ 100 000) — the required time for the games. -----Output----- Print \\"Yes\\" if it\'s possible to assign each game to a participant without exceeding the maximum participation time, otherwise print \\"No\\". -----Example----- Input 3 5 7 9 3 8 6 Output Yes -----Note----- In the first example, the games can be assigned in the following way to the participants: - Assign the first game (3) to the participant with maximum time 5. - Assign the third game (6) to the participant with maximum time 7. - Assign the second game (8) to the participant with maximum time 9. Thus, no participant exceeds their maximum participation time, and hence the answer is \\"Yes\\".","solution":"def can_assign_games_to_participants(n, participants, games): Determines if it is possible to assign each game to a participant without exceeding the maximum participation time. Parameters: n (int): Number of participants and games. participants (list of int): The maximum participation times of the participants. games (list of int): The required times for the games. Returns: str: \\"Yes\\" if it is possible to assign each game to a participant without exceeding their maximum participation time, otherwise \\"No\\". # Sort both participants\' max times and games\' required times participants.sort() games.sort() # Check if each participant can handle their corresponding game for i in range(n): if participants[i] < games[i]: return \\"No\\" return \\"Yes\\""},{"question":"In a robot warehouse, there is a grid represented by a 2D array where each cell contains a non-negative integer representing the minimum cost to reach that cell. The robot starts from the top-left corner and needs to move to the bottom-right corner of the grid. The robot can only move either right or down at any point in time. Write a function to compute the minimum cost path from the top-left to the bottom-right of the grid. The function should take the following inputs and return the minimum cost: - A 2D list `cost` where `cost[i][j]` represents the cost to step into cell (i, j). Example 1: Input: [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: The path with the minimum cost is 1 → 3 → 1 → 1 → 1. Hence, the total minimum cost is 7. Example 2: Input: [ [1,2,5], [3,2,1] ] Output: 6 Explanation: The path with the minimum cost is 1 → 2 → 2 → 1. Hence, the total minimum cost is 6. Note: - The grid size is at most 100x100. - The costs are non-negative integers.","solution":"def min_cost_path(cost): Computes the minimum cost path from the top-left to the bottom-right of the grid. Parameters: cost (list of list of int): A 2D list representing the cost to step into each cell. Returns: int: The minimum cost to reach the bottom-right corner of the grid. if not cost or not cost[0]: return 0 rows = len(cost) cols = len(cost[0]) # Create a 2D array to store the minimum cost to reach each cell dp = [[0 for _ in range(cols)] for _ in range(rows)] # Initialize the first cell with its own cost dp[0][0] = cost[0][0] # Initialize the first column for i in range(1, rows): dp[i][0] = dp[i-1][0] + cost[i][0] # Initialize the first row for j in range(1, cols): dp[0][j] = dp[0][j-1] + cost[0][j] # Fill the rest of the dp array for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j] # The minimum cost to reach the bottom-right corner return dp[rows-1][cols-1]"},{"question":"Reverse Second Half of List Objective Given a linked list, reverse the second half of the list and return the head of the updated list. Input The head of a singly linked list. ``` ListNode* head ``` Where `ListNode` is defined as: ```cpp class ListNode { public: int val; ListNode* next; ListNode(int x) : val(x), next(nullptr) {} }; ``` Output Return the head of the modified linked list. Function Signature ```cpp ListNode* reverseSecondHalf(ListNode* head); ``` Description You are given the head of a singly linked list, and you need to reverse the second half of the list. If the list has an odd number of nodes, the middle node should remain as is and only the nodes after the middle node should be reversed. If the list has an even number of nodes, the second half starts from the first node of the second half. Example Input: ``` 1 -> 2 -> 3 -> 4 -> 5 -> 6 ``` Function call: ``` reverseSecondHalf(head); ``` Output: ``` 1 -> 2 -> 3 -> 6 -> 5 -> 4 ``` Input: ``` 1 -> 2 -> 3 -> 4 -> 5 ``` Function call: ``` reverseSecondHalf(head); ``` Output: ``` 1 -> 2 -> 3 -> 5 -> 4 ``` Constraints - The number of nodes in the list is in the range [1, 10^5]. - The values of nodes are in the range [1, 10^9].","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def reverseSecondHalf(head): # Find the middle of the list using the slow and fast pointers. slow, fast = head, head prev = None while fast and fast.next: prev = slow slow = slow.next fast = fast.next.next # If the list has odd number of nodes, move slow one step further. if fast: prev = slow slow = slow.next # Start reversing from slow. prev.next = None # break the list into two parts prev = None curr = slow while curr: next_node = curr.next curr.next = prev prev = curr curr = next_node # Link the first half with the reversed second half. tail = head while tail.next: tail = tail.next tail.next = prev return head"},{"question":"You have been assigned the task of developing a photo management system. One feature request is to determine if a sequence of photo timestamps contains any duplicates within a certain time range. This feature will help to identify any possible accidental multiple uploads of the same photo. -----Input----- The first line contains a single integer T indicating the number of test cases (about 10). Each test case begins with an integer n indicating the number of photos. The next line contains n integers representing the timestamps of the photos, given in non-decreasing order. The final line of each test case contains a single integer k indicating the time range. -----Output----- For each test case, output either \\"YES\\" if there are duplicate timestamps within the time range k, otherwise output \\"NO\\". -----Example----- Input: 2 5 1 2 3 5 9 3 4 10 20 20 20 5 Output: NO YES","solution":"def has_duplicates_within_range(timestamps, k): Checks if there are duplicate timestamps within the given range k. Args: timestamps: List[int] - A list of timestamps in non-decreasing order. k: int - The specified time range. Returns: bool - True if there are duplicates within range k, else False. n = len(timestamps) for i in range(n - 1): if timestamps[i] != timestamps[i + 1]: continue if timestamps[i + 1] - timestamps[i] <= k: return True return False def process_photo_timestamps(T, cases): Processes multiple test cases to determine if there are duplicates within the given time range k. Args: T: int - Number of test cases. cases: List[Tuple[int, List[int], int]] - List of test cases where each test case is a tuple of the number of photos, the timestamps list, and the time range k. Returns: List[str] - A list of results for each test case, each being either \\"YES\\" or \\"NO\\". results = [] for case in cases: n, timestamps, k = case if has_duplicates_within_range(timestamps, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an integer n, you need to construct an n-digit number such that the sum of its digits is exactly n and no digit is zero. Determine the lexicographically smallest n-digit number with this property. -----Input----- The input consists of a single integer n (1 ≤ n ≤ 10^6). -----Output----- Output the lexicographically smallest n-digit number with the sum of its digits being exactly n. If no such number exists, output -1. -----Examples----- Input 5 Output 11111 Input 15 Output 111111111111111 Input 3 Output 111 -----Note----- In the first example, the sum of the digits of 11111 is 5, which meets the requirement. In the second example, the sum of the digits of 111111111111111 is 15, which meets the requirement and is the smallest possible number with this property. In the third example, the sum of the digits of 111 is 3, which meets the requirement.","solution":"def construct_number(n): Returns the smallest n-digit number where the sum of its digits is exactly n and no digit is zero. If no such number exists, return -1. if n < 1: return -1 return \'1\' * n"},{"question":"The Organizer is tasked with arranging a list of participants for a coding seminar. Each participant has a start time and an end time of when they will join the seminar. The organizer needs to find the maximum number of participants present at any time during the seminar. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of participants. Each of the next N lines contains two space-separated integers S and E denoting the start time and end time of the participant respectively. -----Output----- For each test case, output a single line containing the maximum number of participants present at any time during the seminar. -----Constraints----- For Subtask 1: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10 - 0 ≤ S, E ≤ 1000 For Subtask 2: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 0 ≤ S, E ≤ 10000 -----Example----- Input: 2 3 1 3 2 5 4 6 4 1 3 2 4 3 5 5 6 Output: 2 3 -----Explanation----- Example case 1. During the time interval (2, 3), participants 1 and 2 are present, hence the maximum number of participants present is 2. Example case 2. During the time interval (3, 4), participants 1, 2, and 3 are present, hence the maximum number of participants present is 3.","solution":"def max_participants_present(test_cases): results = [] for n, intervals in test_cases: times = [] for start, end in intervals: times.append((start, 1)) # Participant joins times.append((end + 1, -1)) # Participant leaves times.sort() current_participants = 0 max_participants = 0 for time, change in times: current_participants += change if current_participants > max_participants: max_participants = current_participants results.append(max_participants) return results"},{"question":"Sophia is working on a data processing script and realized part of her job involves identifying palindromic substrings within strings. A palindromic substring is a substring that reads the same backward as forward. Given a string, she needs to determine the number of distinct palindromic substrings. Write a function `count_palindromic_substrings` that, given a string s, returns the number of distinct palindromic substrings in s. -----Input----- The input contains a single string s (1 le text{len}(s) le 1000). The string consists of lowercase English letters only. -----Output----- Print a single integer — the number of distinct palindromic substrings in the input string. -----Example----- Input abaaa Output 5 -----Note----- For the given string \\"abaaa\\", the distinct palindromic substrings are: \\"a\\", \\"aa\\", \\"aaa\\", \\"aba\\", and \\"b\\". Thus, the output is 5.","solution":"def count_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the input string s. def is_palindrome(sub): return sub == sub[::-1] n = len(s) palindromes = set() for i in range(n): for j in range(i+1, n+1): substring = s[i:j] if is_palindrome(substring): palindromes.add(substring) return len(palindromes)"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters which reads the same backward as forward. Write a function, ```findLongestPalindrome(s)```, that accepts a string ```s``` and returns the longest palindromic substring within ```s```. If there are multiple substrings with maximum length, return the one which appears first. For example: - findLongestPalindrome(\\"babad\\") should return \\"bab\\" or \\"aba\\" - findLongestPalindrome(\\"cbbc\\") should return \\"cbbc\\" The function should handle edge cases such as an empty string, which should return an empty string.","solution":"def findLongestPalindrome(s): if not s: return \\"\\" start, end = 0, 0 def expandAroundCenter(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 for i in range(len(s)): l1, r1 = expandAroundCenter(s, i, i) # odd length palindrome l2, r2 = expandAroundCenter(s, i, i + 1) # even length palindrome if r1 - l1 > end - start: start, end = l1, r1 if r2 - l2 > end - start: start, end = l2, r2 return s[start:end + 1]"},{"question":"=====Problem Statement===== You are given a list of strings representing usernames in a social media application. A valid username is one that contains only alphanumeric characters (letters A-Z, a-z, and numbers 0-9), underscores (_), and has a minimum length of 3 characters and a maximum length of 15 characters. Your task is to implement a function that filters out invalid usernames and returns a list of valid usernames. =====Input Format===== The input consists of a single list of strings, where each string represents a username. =====Constraints===== - The length of the list will not exceed 10^3. - Each username string will have at most 20 characters. =====Output Format===== Return a list of valid usernames in their original order of appearance. =====Function Signature===== ```python def filter_valid_usernames(usernames: List[str]) -> List[str]: ``` =====Example===== ```python usernames = [\\"user_1\\", \\"user-2\\", \\"User_3\\", \\"u\\", \\"user4@\\", \\"validUser_15\\"] filter_valid_usernames(usernames) ``` ``` Output: [\\"user_1\\", \\"User_3\\", \\"validUser_15\\"] ``` In the example provided: - \\"user_1\\": Valid - It contains letters, numbers, and an underscore. - \\"user-2\\": Invalid - It contains a hyphen. - \\"User_3\\": Valid - It contains letters and an underscore. - \\"u\\": Invalid - It is shorter than the minimum length of 3 characters. - \\"user4@\\": Invalid - It contains an \'@\' symbol. - \\"validUser_15\\": Valid - It meets all the criteria.","solution":"from typing import List def filter_valid_usernames(usernames: List[str]) -> List[str]: Filters out invalid usernames from a list based on specific criteria. A valid username: - Contains only alphanumeric characters (letters A-Z, a-z, and numbers 0-9) and underscores (_). - Has a minimum length of 3 characters and a maximum length of 15 characters. Args: usernames (List[str]): List of usernames to be filtered. Returns: List[str]: List of valid usernames. def is_valid(username: str) -> bool: if not (3 <= len(username) <= 15): return False for char in username: if not (char.isalnum() or char == \'_\'): return False return True return [username for username in usernames if is_valid(username)]"},{"question":"Write a function `mergeAlternately` that takes in two lists, `list1` and `list2`, and merges them by taking elements alternately from each list. If one list is longer than the other, append the remaining elements of the longer list to the merged result. For example, for `mergeAlternately([1,2,3], [\'a\', \'b\', \'c\', \'d\', \'e\'])` the result should be ``` [1, \'a\', 2, \'b\', 3, \'c\', \'d\', \'e\'] ``` If both lists are empty, the result should be an empty list. Additional points to consider: * Both `list1` and `list2` can be of any type. * If either `list1` or `list2` is empty, the result should be the other list. * The function should handle cases where the lists contain differing types.","solution":"def mergeAlternately(list1, list2): Merges two lists by taking elements alternately from each list. If one list is longer than the other, append the remaining elements of the longer list to the merged result. merged_list = [] len1, len2 = len(list1), len(list2) min_len = min(len1, len2) for i in range(min_len): merged_list.append(list1[i]) merged_list.append(list2[i]) if len1 > min_len: merged_list.extend(list1[min_len:]) elif len2 > min_len: merged_list.extend(list2[min_len:]) return merged_list"},{"question":"Given a string `s` consisting of lowercase English letters, return the first letter to appear twice. Note: - A letter `a` appears twice before another letter `b` if the second occurrence of `a` is before the second occurrence of `b`. Example 1: Input: s = \\"abccbaacz\\" Output: \\"c\\" Explanation: The letter \'c\' is the first letter to appear twice, as its second occurrence is at index 3. Example 2: Input: s = \\"abcdd\\" Output: \\"d\\" Explanation: The letter \'d\' is the first letter to appear twice, as its second occurrence is at index 4. Constraints: - 2 <= s.length <= 1000 - s consists of lowercase English letters.","solution":"def first_letter_to_appear_twice(s): Returns the first letter to appear twice in the string s. seen = set() for letter in s: if letter in seen: return letter seen.add(letter) return None # Important for the function to always return something, though the constraint 2 <= s.length guarantees this line won\'t be reached."},{"question":"Given a list of integers, return a list of lists containing all unique permutations of the elements. Example 1: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] Example 2: Input: nums = [0, 1] Output: [[0, 1], [1, 0]] Example 3: Input: nums = [1] Output: [[1]] Note: - The list of integers may contain duplicate elements, but the order of the output lists does not matter. - The solution set must not contain duplicate permutations. - You can return the answer in any order.","solution":"from itertools import permutations def unique_permutations(nums): Returns all unique permutations of the input list of integers. # Generate all permutations using itertools.permutations perms = set(permutations(nums)) # Convert each tuple to a list and return the list of lists return [list(perm) for perm in perms]"},{"question":"In a rectangular grid of size `m x n`, you are located at the top-left corner of the grid (marked \'Start\') and want to reach the bottom-right corner of the grid (marked \'Finish\'). You can only move either down or right at any point in time. Calculate the number of unique paths from \'Start\' to \'Finish\'. Example 1: Input: m = 3, n = 7 Output: 28 Example 2: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right Example 3: Input: m = 7, n = 3 Output: 28 Constraints: - 1 <= m, n <= 100 - It is guaranteed that the answer will be less than or equal to 2 * 10^9.","solution":"def unique_paths(m, n): Calculate the number of unique paths in an m x n grid from top-left to bottom-right. # Create a 2D list with all elements initialized to 1 because there\'s only 1 way to reach cells in the first row or first column. dp = [[1] * n for _ in range(m)] # Iterate through the grid starting from the cell (1,1) to calculate the number of unique paths to each cell. for i in range(1, m): for j in range(1, n): # The number of paths to reach a cell is the sum of the paths to reach the cell above it and the cell to the left of it. dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # The bottom-right cell contains the number of unique paths to the finish. return dp[m-1][n-1]"},{"question":"In a company, employees are required to work for N hours in a week to be considered as having completed their weekly working hours. If an employee works less than N hours, it is considered as underworked for that week. An employee can take a leave on one or more days in a week. If an employee takes a leave on a working day, they are marked as absent (denoted by 0), otherwise, they are marked as present (denoted by 1). The company allows replacing up to M hours in total per week using leave hours to meet the N hours requirement. If after using the leave hours, the employee\'s working hours are still less than N hours, the additional hours they need to work is calculated. Write a program that will determine the additional hours an employee needs to work for each week given the employee’s weekly log of their working hours. The log consists of a string of N length where each character is a digit from 0 to 9 representing the hours worked each day. -----Input----- The input consists of multiple test cases. The first line contains an integer T denoting the number of test cases. Each test case consists of two lines: The first line contains two integers, N and M. The second line contains a string of N length representing the working hours log. -----Output----- For each test case, output a single integer denoting the additional hours the employee needs to work to meet the N hours requirement. -----Constraints----- - 1 ≤ T ≤ 20 - 1 ≤ N ≤ 10 - 0 ≤ M ≤ 10 - Each character in the string is a digit from 0 to 9 -----Example----- Input 3 7 2 5123456 5 1 00001 8 4 22222222 Output 0 1 0 -----Explanation----- Example case 1: The employee has worked a total of 5 + 1 + 2 + 3 + 4 + 5 + 6 = 26 hours without any leave needed. Since 26 >= 7 hours (N hours requirement) they don\'t need to work any additional hours. Example case 2: The employee has worked a total of 0 + 0 + 0 + 0 + 1 = 1 hour without considering any leave time. They can only use up to 1 hour in replacement. Even after using the maximum leave allowed, they have 1 + 1 = 2 hours, which is still less than 5. They need 5 - 2 = 3 additional hours to meet the weekly requirement, but as they need one extra leave hour. Example case 3: The employee has worked a total of 2*8 = 16 hours without any leave needed. Since 16 >= 8 hours (N hours requirement) they don\'t need to work any additional hours.","solution":"def additional_hours_needed(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] work_log = test_cases[i][1] total_hours = sum(int(hour) for hour in work_log) if total_hours >= N: results.append(0) else: deficit = N - total_hours additional_hours = max(0, deficit - M) results.append(additional_hours) return results"},{"question":"Implement a LRU (Least Recently Used) Cache with the following operations: - `get(key)` - If the key exists in the cache, return its value; otherwise, return -1. - `put(key, value)` - Add or update a key-value pair. If the number of keys exceeds the capacity at any point, evict the least recently used key-value pair to make space. The LRU cache should operate in O(1) time for both `get` and `put` operations. # Example ```python # Your LRUCache class will be called like this: cache = LRUCache(2) # capacity of 2 cache.put(1, 1) cache.put(2, 2) print(cache.get(1)) # returns 1 cache.put(3, 3) # evicts key 2 print(cache.get(2)) # returns -1 (not found) cache.put(4, 4) # evicts key 1 print(cache.get(1)) # returns -1 (not found) print(cache.get(3)) # returns 3 print(cache.get(4)) # returns 4 ``` # Constraints: - The functions `get` and `put` must each run in O(1) average time complexity. - The capacity of cache is a positive integer. # Notes: - Use a suitable data structure to keep track of the usage order. - The value stored for each key will be a non-negative integer.","solution":"class LRUCache: def __init__(self, capacity: int): self.cache = {} self.capacity = capacity self.order = [] def get(self, key: int) -> int: if key in self.cache: self.order.remove(key) self.order.append(key) return self.cache[key] return -1 def put(self, key: int, value: int) -> None: if key in self.cache: self.order.remove(key) elif len(self.cache) >= self.capacity: lru = self.order.pop(0) del self.cache[lru] self.cache[key] = value self.order.append(key)"},{"question":"Given a list of integers, write a function that determines whether the sequence of numbers is strictly increasing, strictly decreasing, or neither. * A sequence is strictly increasing if every number is greater than the one before it. * A sequence is strictly decreasing if every number is less than the one before it. * If the sequence is neither strictly increasing nor strictly decreasing, it should return \\"neither\\". The function should return one of the following strings: \\"increasing\\", \\"decreasing\\", or \\"neither\\". Example ```R check_sequence(c(1, 2, 3, 4, 5)) == \\"increasing\\" check_sequence(c(5, 4, 3, 2, 1)) == \\"decreasing\\" check_sequence(c(1, 3, 2, 4, 5)) == \\"neither\\" ``` ```python check_sequence([1, 2, 3, 4, 5]) == \\"increasing\\" check_sequence([5, 4, 3, 2, 1]) == \\"decreasing\\" check_sequence([1, 3, 2, 4, 5]) == \\"neither\\" ``` Note: The sequence should have at least two elements to be meaningful for comparison.","solution":"def check_sequence(lst): Determines whether the sequence of numbers is strictly increasing, strictly decreasing, or neither. Parameters: lst (list of integers): The list of integers. Returns: str: \\"increasing\\", \\"decreasing\\", or \\"neither\\". if len(lst) < 2: return \\"neither\\" increasing = all(x < y for x, y in zip(lst, lst[1:])) decreasing = all(x > y for x, y in zip(lst, lst[1:])) if increasing: return \\"increasing\\" elif decreasing: return \\"decreasing\\" else: return \\"neither\\""},{"question":"Write a function that takes an integer `n` and returns a list of all prime numbers up to `n` (inclusive) using the Sieve of Eratosthenes algorithm. The Sieve of Eratosthenes is an efficient algorithm to find all primes smaller than `n`. It works by iteratively marking the multiples of each prime number starting from 2. Example ```python sieve_of_eratosthenes(10) ``` Output: ```python [2, 3, 5, 7] ``` ```python sieve_of_eratosthenes(20) ``` Output: ```python [2, 3, 5, 7, 11, 13, 17, 19] ```","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers up to n (inclusive) using the Sieve of Eratosthenes algorithm. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start*start, n + 1, start): is_prime[multiple] = False return [num for num in range(2, n + 1) if is_prime[num]]"},{"question":"You are managing a bookshelf where you can add and remove books. Each book has a unique title, and your task is to keep the bookshelf in alphabetical order when books are added or removed. You will be given a series of commands in the form of a list of tuples, where each tuple contains a command (\'ADD\' or \'REMOVE\') and a book title. Your task is to process these commands and return a list of book titles in alphabetical order after all commands have been processed. For example, given the commands `[(\\"ADD\\", \\"The Great Gatsby\\"), (\\"ADD\\", \\"1984\\"), (\\"REMOVE\\", \\"The Great Gatsby\\"), (\\"ADD\\", \\"To Kill a Mockingbird\\")]`, the final bookshelf should contain `[\\"1984\\", \\"To Kill a Mockingbird\\"]`. Your function should look like this: ```python def manage_bookshelf(commands: List[Tuple[str, str]]) -> List[str]: # Your code here ``` # Example ```python commands = [(\\"ADD\\", \\"The Catcher in the Rye\\"), (\\"ADD\\", \\"Pride and Prejudice\\"), (\\"REMOVE\\", \\"The Catcher in the Rye\\"), (\\"ADD\\", \\"Brave New World\\")] print(manage_bookshelf(commands)) # Output: [\\"Brave New World\\", \\"Pride and Prejudice\\"] ```","solution":"from typing import List, Tuple def manage_bookshelf(commands: List[Tuple[str, str]]) -> List[str]: bookshelf = [] for command, book in commands: if command == \\"ADD\\": bookshelf.append(book) bookshelf.sort() elif command == \\"REMOVE\\": if book in bookshelf: bookshelf.remove(book) return bookshelf"},{"question":"Given two arrays of integers, `arrival` and `departure`, where each element in `arrival` represents the arrival time of a train at the station and each element in `departure` represents the departure time of the train from that station, write a function to find the minimum number of platforms required at the station so that no train has to wait. The function should return an integer representing the number of platforms needed. Your solution should consider the following constraints: - The arrays will have the same length. - Arrival and departure times will be given in the format of a 24-hour clock (e.g., 1300 for 1:00 PM, 1500 for 3:00 PM). For example: ```python arrival = [900, 940, 950, 1100, 1500, 1800] departure = [910, 1200, 1120, 1130, 1900, 2000] ``` In this case, the function should return `3`, as at one time there are at most three trains at the station.","solution":"def find_minimum_platforms(arrival, departure): Returns the minimum number of platforms required at the station so that no train has to wait. :param arrival: List[int], arrival times of trains :param departure: List[int], departure times of trains :return: int, minimum number of platforms needed # Sort the arrival and departure times arrival.sort() departure.sort() # Initialize platform_needed and result platform_needed = 1 result = 1 i = 1 j = 0 while (i < len(arrival) and j < len(departure)): # If next train\'s arrival before the last vs next train\'s departure before any arrival if arrival[i] <= departure[j]: platform_needed += 1 i += 1 if platform_needed > result: result = platform_needed else: platform_needed -= 1 j += 1 return result"},{"question":"Write a function that takes an encoded string consisting of repeated substrings, and then decodes it. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer. For example: ```Haskell decodeString(\\"3[a]2[bc]\\") = \\"aaabcbc\\" decodeString(\\"3[a2[c]]\\") = \\"accaccacc\\" decodeString(\\"2[abc]3[cd]ef\\") = \\"abcabccdcdcdef\\" ``` More examples in test cases. Good luck! Please also try: [Encode and Decode Strings](https://www.codewars.com/kata/5cbfe31e1d8d7b001b0001ed)","solution":"def decodeString(s: str) -> str: Decodes the given encoded string according to the rule k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. stack = [] current_num = 0 current_string = \'\' for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_string, current_num)) current_string = \'\' current_num = 0 elif char == \']\': prev_string, num = stack.pop() current_string = prev_string + num * current_string else: current_string += char return current_string"},{"question":"Write a function that takes a list of integers and returns a list containing only the prime numbers from the input list. For example, if the input list is: [10, 15, 3, 7, 8, 19, 23, 6] the function should return: [3, 7, 19, 23] The input list can contain any integer values, and the function should handle lists of any length, including an empty list. Ensure your solution is efficient in identifying prime numbers.","solution":"def is_prime(n): Helper function to check if the given number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(lst): Returns a list containing only the prime numbers from the input list. return [num for num in lst if is_prime(num)]"},{"question":"John has an array of integers and he wonders how many pairs of integers in the array have a difference equal to a given value K. -----Input:----- - First-line will contain the integer T, the number of test cases. Then the test cases follow. - Each test case starts with an integer N, the number of elements in the array. - Next line contains N space-separated integers, the elements of the array. - The last line of each test case contains the integer K. -----Output:----- For each test case, output the number of pairs in the array whose absolute difference is equal to K. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - -10^9 leq Array elements leq 10^9 - 0 leq K leq 10^9 -----Sample Input:----- 2 5 1 5 3 4 2 3 4 8 12 16 4 4 -----Sample Output:----- 2 3","solution":"def count_pairs_with_difference_k(test_cases): results = [] for N, arr, K in test_cases: num_pairs = 0 arr_set = set(arr) for num in arr: if num + K in arr_set: num_pairs += 1 if num - K in arr_set and K != 0: num_pairs += 1 results.append(num_pairs // 2) # Each pair is counted twice return results"},{"question":"Given a dictionary of stock prices where keys are company names and values are lists of tuples, each tuple containing a date (formatted as \'YYYY-MM-DD\') and the closing stock price on that date, find the company with the highest average stock price over a given date range. Write a function that takes in a dictionary `stock_data` and two dates `start_date` and `end_date` (both formatted as \'YYYY-MM-DD\'), and returns the name of the company with the highest average stock price over the specified date range. You can assume that all dates in `stock_data` are within the range defined by `start_date` and `end_date`, and that all lists of stock prices are non-empty. Example: Input: ``` stock_data = { \'CompanyA\': [(\'2023-01-01\', 150), (\'2023-01-02\', 155), (\'2023-01-03\', 152)], \'CompanyB\': [(\'2023-01-01\', 200), (\'2023-01-02\', 210), (\'2023-01-03\', 215)], \'CompanyC\': [(\'2023-01-01\', 50), (\'2023-01-02\', 55), (\'2023-01-03\', 53)] } start_date = \'2023-01-01\' end_date = \'2023-01-03\' ``` Output: ``` \'CompanyB\' ``` Explanation: - CompanyA: Average price = (150 + 155 + 152) / 3 = 152.33 - CompanyB: Average price = (200 + 210 + 215) / 3 = 208.33 - CompanyC: Average price = (50 + 55 + 53) / 3 = 52.67 Among the companies, CompanyB has the highest average stock price over the given date range.","solution":"def highest_average_stock_price(stock_data, start_date, end_date): Returns the name of the company with the highest average stock price over the specified date range. max_avg_price = -1 max_company = None for company, prices in stock_data.items(): date_filtered_prices = [price for date, price in prices if start_date <= date <= end_date] if date_filtered_prices: avg_price = sum(date_filtered_prices) / len(date_filtered_prices) if avg_price > max_avg_price: max_avg_price = avg_price max_company = company return max_company"},{"question":"You have been given a set of numerical values that represent the days it rained in a particular month. Write a function `findLongestRainyPeriod(rainyDays)`, which, given a list of integers `rainyDays`, where each integer represents a day it rained during that month, returns the length of the longest consecutive rainy period. For example: ``` findLongestRainyPeriod([3, 5, 6, 8, 9, 10, 12, 13, 14]) should return 3 findLongestRainyPeriod([1, 2, 4, 5, 7]) should return 2 findLongestRainyPeriod([2, 3, 4, 5, 6, 7, 8]) should return 7 findLongestRainyPeriod([10, 12, 14, 17]) should return 1 ``` The consecutive days are the ones which follow each other in the `rainyDays` list. If there are no consecutive days, the length of the longest consecutive rainy period should be 1.","solution":"def findLongestRainyPeriod(rainyDays): if not rainyDays: return 0 rainyDays.sort() max_count = 1 current_count = 1 for i in range(1, len(rainyDays)): if rainyDays[i] == rainyDays[i - 1] + 1: current_count += 1 else: max_count = max(max_count, current_count) current_count = 1 max_count = max(max_count, current_count) return max_count"},{"question":"In a small town, there are N houses arranged in a straight line. Each house has a certain amount of wealth, represented by an integer value w(i) where i is the house number (1 ≤ i ≤ N). A thief is planning to rob houses, but due to security systems in place, they cannot rob two adjacent houses. Given the wealth values of the houses, find the maximum amount of wealth the thief can rob without triggering the alarms. -----Input----- The first line contains an integer T, the number of test cases. Each test case starts with an integer N, representing the number of houses. The next line contains N integers, each denoting the wealth w(i) of the i-th house. -----Output----- For each test case, output a single integer, the maximum amount of wealth that can be robbed without robbing two adjacent houses. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 0 ≤ w(i) ≤ 10000 -----Sample Input----- 2 4 1 2 3 4 3 2 1 2 -----Sample Output----- 6 4 -----Explanation----- In the first test case, the best strategy is to rob houses 1 and 3 (1 + 3 = 4) or houses 2 and 4 (2 + 4 = 6). The maximum amount is 6. In the second test case, the thief should rob the first and third houses to get a total of 4.","solution":"def maximum_robbery(T, test_cases): def rob_house(houses): n = len(houses) if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], houses[i] + dp[i-2]) return dp[-1] results = [] for i in range(T): N, houses = test_cases[i] results.append(rob_house(houses)) return results"},{"question":"Given two strings s1 and s2, return the length of the shortest string that has both s1 and s2 as subsequences. The string is called the Shortest Common Supersequence (SCS). A supersequence of a string is a new string that contains the original string as a subsequence. If s1 == s2, return the length of s1 or s2, which is the same. Example 1: Input: s1 = \\"abac\\", s2 = \\"cab\\" Output: 5 Explanation: The shortest common supersequence is \\"cabac\\" and its length is 5. Example 2: Input: s1 = \\"geek\\", s2 = \\"eke\\" Output: 5 Explanation: The shortest common supersequence is \\"geeke\\" and its length is 5. Example 3: Input: s1 = \\"abc\\", s2 = \\"def\\" Output: 6 Explanation: The shortest common supersequence is \\"abcdef\\" and its length is 6. Constraints: 1 <= s1.length, s2.length <= 1000 The input strings consist of lowercase English characters only.","solution":"def shortest_common_supersequence_length(s1, s2): Returns the length of the shortest common supersequence of s1 and s2. m, n = len(s1), len(s2) # Create a DP table to store the length of the longest common subsequence (LCS) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # Length of the shortest common supersequence lcs = dp[m][n] return m + n - lcs"},{"question":"Write a function to simulate a simple banking system where you need to process a series of operations. The operations might include creating new accounts, depositing or withdrawing amounts, and transferring funds between accounts. Each account is identified by a unique account number and has a balance. # Input You will receive a list of operations and each operation is represented by a string. The possible operations are: - \\"CREATE account_number initial_balance\\" - Creates a new account with the specified initial balance. - \\"DEPOSIT account_number amount\\" - Deposits the specified amount into the account. - \\"WITHDRAW account_number amount\\" - Withdraws the specified amount from the account. - \\"TRANSFER from_account_number to_account_number amount\\" - Transfers the specified amount from one account to another. # Output For each operation, return the following responses: - For \\"CREATE\\", if the account is created successfully, return \\"Account account_number created with balance initial_balance\\". If the account already exists, return \\"Account account_number already exists\\". - For \\"DEPOSIT\\" and \\"WITHDRAW\\", if the account exists, perform the operation and return \\"Deposited amount to account_number, new balance is new_balance\\" or \\"Withdrew amount from account_number, new balance is new_balance\\" respectively. If the account does not exist, return \\"Account account_number does not exist\\". - For \\"TRANSFER\\", if both accounts exist and there are sufficient funds in the from_account, perform the transfer and return \\"Transferred amount from from_account_number to to_account_number, new balance is from_new_balance for from_account_number and to_new_balance for to_account_number\\". If any account does not exist, return \\"One or both accounts do not exist\\". If the balance is insufficient in the from_account, return \\"Insufficient funds in account from_account_number\\". Write the function `process_operations(operations: List[str]) -> List[str]` that processes the given operations and returns the corresponding responses as described. # Example ```python operations = [ \\"CREATE 123456 1000\\", \\"DEPOSIT 123456 200\\", \\"CREATE 789012 500\\", \\"WITHDRAW 123456 300\\", \\"TRANSFER 123456 789012 400\\" ] # Expected Result [ \\"Account 123456 created with balance 1000\\", \\"Deposited 200 to 123456, new balance is 1200\\", \\"Account 789012 created with balance 500\\", \\"Withdrew 300 from 123456, new balance is 900\\", \\"Transferred 400 from 123456 to 789012, new balance is 500 for 123456 and 900 for 789012\\" ] ```","solution":"def process_operations(operations): accounts = {} results = [] for operation in operations: parts = operation.split() action = parts[0] if action == \\"CREATE\\": account_number = parts[1] initial_balance = int(parts[2]) if account_number in accounts: result = f\\"Account {account_number} already exists\\" else: accounts[account_number] = initial_balance result = f\\"Account {account_number} created with balance {initial_balance}\\" elif action == \\"DEPOSIT\\": account_number = parts[1] amount = int(parts[2]) if account_number in accounts: accounts[account_number] += amount result = f\\"Deposited {amount} to {account_number}, new balance is {accounts[account_number]}\\" else: result = f\\"Account {account_number} does not exist\\" elif action == \\"WITHDRAW\\": account_number = parts[1] amount = int(parts[2]) if account_number in accounts: if accounts[account_number] >= amount: accounts[account_number] -= amount result = f\\"Withdrew {amount} from {account_number}, new balance is {accounts[account_number]}\\" else: result = f\\"Insufficient funds in account {account_number}\\" else: result = f\\"Account {account_number} does not exist\\" elif action == \\"TRANSFER\\": from_account = parts[1] to_account = parts[2] amount = int(parts[3]) if from_account in accounts and to_account in accounts: if accounts[from_account] >= amount: accounts[from_account] -= amount accounts[to_account] += amount result = f\\"Transferred {amount} from {from_account} to {to_account}, new balance is {accounts[from_account]} for {from_account} and {accounts[to_account]} for {to_account}\\" else: result = f\\"Insufficient funds in account {from_account}\\" else: result = f\\"One or both accounts do not exist\\" results.append(result) return results"},{"question":"Given an array of integers, write a function `findMajorityElement` that will find the majority element in the array. A majority element in an array is an element that appears more than n/2 times where n is the length of the array. If no such element exists, return -1. You are required to solve this problem in linear time O(n) and constant space O(1). Example 1: Input: arr = [3, 3, 4, 2, 4, 4, 2, 4, 4] Output: 4 Explanation: The element 4 appears more than n/2 times in the array, thus it is the majority element. Example 2: Input: arr = [3, 3, 4, 2, 4, 4, 2, 4] Output: -1 Explanation: No element appears more than n/2 times in the array, thus there is no majority element. Example 3: Input: arr = [1, 2, 3, 3, 3, 3, 3] Output: 3 Explanation: The element 3 appears more than n/2 times in the array, thus it is the majority element. Constraints: - 1 <= arr.length <= 10^5 - arr[i] is a non-negative integer less than 10^9.","solution":"def findMajorityElement(arr): Finds the majority element in the array, which appears more than n/2 times. If no majority element exists, returns -1. n = len(arr) candidate = None count = 0 # Phase 1: Finding the candidate using Boyer-Moore Voting Algorithm for num in arr: if count == 0: candidate = num count += (1 if num == candidate else -1) # Phase 2: Verifying the candidate if candidate is not None and arr.count(candidate) > n // 2: return candidate else: return -1"},{"question":"A group of friends are trying to organize a fun relay race. They have N relay legs, each of which requires exactly two participants. The friends have different skill levels, and the event organizer wants to pair them such that the skill difference in each relay leg is minimized. Given a list of skill levels of the friends, find pairings of participants such that the maximum skill difference between any two paired participants is minimized. ----- Input: - The first line contains a single integer T, the number of test cases. - Each test case consists of two lines. The first line contains an integer N (1 ≤ N ≤ 1000) denoting the number of relay legs (thus, there are 2N participants). The second line contains 2N integers representing the skill levels of the participants. ----- Output: For each test case, output a single integer, which is the minimized maximum skill difference between any two participants in the relay legs. ----- Example: Input: 2 2 1 8 4 7 3 3 5 1 7 2 6 Output: 3 2 Explanation: - In the first sample, we can pair (1, 4) and (7, 8), with the skill differences being 3 and 1, respectively. The maximum skill difference is 3. - In the second sample, we can pair (1, 2), (3, 5), and (6, 7), with the skill differences being 1, 2, and 1, respectively. The maximum skill difference is 2.","solution":"def minimize_max_skill_difference(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] skill_levels = test_cases[i][1] skill_levels.sort() max_diff = float(\'-inf\') for j in range(N): diff = abs(skill_levels[2*j] - skill_levels[2*j + 1]) if diff > max_diff: max_diff = diff results.append(max_diff) return results"},{"question":"Write a function that simulates a basic stack-based calculator with the following commands: - `PUSH x`: Pushes the integer `x` onto the stack. - `POP`: Removes and discards the topmost element from the stack. - `ADD`: Pops the top two elements from the stack, adds them, and pushes the result back onto the stack. - `SUB`: Pops the top two elements from the stack, subtracts the topmost from the second topmost, and pushes the result back onto the stack. The input is a list of string commands and your task is to return the final state of the stack after processing all commands. Assume the initial state of the stack is empty. Ignore any invalid commands. Example: ```python commands = [\\"PUSH 5\\", \\"PUSH 3\\", \\"ADD\\", \\"PUSH 2\\", \\"SUB\\"] stack_calculator(commands) ==> [6] ```","solution":"def stack_calculator(commands): Simulates a basic stack-based calculator. Parameters: commands (list of str): List of commands to be executed in the form of strings. Returns: list: The final state of the stack after processing all commands. stack = [] for command in commands: parts = command.split() if parts[0] == \\"PUSH\\" and len(parts) == 2 and parts[1].isdigit(): stack.append(int(parts[1])) elif parts[0] == \\"POP\\" and stack: stack.pop() elif parts[0] == \\"ADD\\" and len(stack) >= 2: a = stack.pop() b = stack.pop() stack.append(a + b) elif parts[0] == \\"SUB\\" and len(stack) >= 2: a = stack.pop() b = stack.pop() stack.append(b - a) return stack"},{"question":"Implement a function `longest_consecutive_sequence(nums)` that takes a list of integers `nums` and returns the length of the longest consecutive elements sequence. You need to solve this problem using a time complexity of O(n). Example: ```python print(longest_consecutive_sequence([100, 4, 200, 1, 3, 2])) # => 4 ``` Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore, its length is 4.","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in an array. Parameters: nums (list of int): A list of integers. Returns: int: The length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in nums: if num - 1 not in num_set: # Only start counting for the beginning of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Problem You are given a list of strings where each string represents a calculation, with operands and operators separated by spaces. Your task is to process each string and compute the result of the calculation. The calculations will only involve addition (+), subtraction (-), multiplication (*), and division (/). You will need to handle the operations respecting the standard operator precedence rules (i.e., multiplication and division before addition and subtraction). For this task, you need to complete the function `calculate_expressions()`. This function should take a list of strings as input and return a list of results for each corresponding expression. Function Signature ```python def calculate_expressions(expressions: List[str]) -> List[float]: ``` Input - A list of strings `expressions`, where each string represents a calculation (1 <= len(expressions) <= 100). Output - A list of floats, where each float is the result of the corresponding evaluation of the input expression. Examples ```python calculate_expressions([\\"3 + 5\\", \\"10 - 2 * 3\\", \\"8 / 2 + 5\\", \\"14 / 2 * 3\\"]) # Returns: [8.0, 4.0, 9.0, 21.0] calculate_expressions([\\"2 * 3 + 4\\", \\"20 / 4 - 1\\", \\"6 + 4 * 2\\", \\"18 / 2 + 3 * 3\\"]) # Returns: [10.0, 4.0, 14.0, 21.0] ``` **Note**: Remember to handle negative numbers and decimal numbers correctly. The result for each expression should be a float even if the computed result is an integer.","solution":"from typing import List def calculate_expressions(expressions: List[str]) -> List[float]: def evaluate(expression: str) -> float: try: return eval(expression) except ZeroDivisionError: return float(\'inf\') return [evaluate(expression) for expression in expressions]"},{"question":"Write a function `longest_even_subsequence` that takes a list of integers as input and returns the length of the longest contiguous subsequence where all numbers are even. If there are no even numbers, the function should return 0. Examples: ```python longest_even_subsequence([1, 2, 4, 6, 1, 4, 6, 8, 1]) # => 4 (subsequence is [4, 6, 8]) longest_even_subsequence([1, 3, 5, 7]) # => 0 longest_even_subsequence([2, 4, 6, 8, 10]) # => 5 longest_even_subsequence([7, 10, 12, 14, 1, 2, 4, 16]) # => 3 (subsequence is [10, 12, 14]) ```","solution":"def longest_even_subsequence(nums): Returns the length of the longest contiguous subsequence where all numbers are even. Parameters: nums (list): List of integers Returns: int: Length of the longest contiguous even subsequence max_length = 0 current_length = 0 for num in nums: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Story A researcher is working with a team of developers to simulate a simple scheduling system. The system needs to assign tasks with overlapping time windows to different employees in such a way that each task is completed on time, while also minimizing the number of employees required. To solve this problem, you need to implement a function that finds the minimum number of employees required to complete all tasks without any overlap in their assigned task timing. Given a list of tasks, each task is represented as a tuple `(start_time, end_time)`, which represents the start and end times of the task. Note that a task that ends at time `t` can be followed by another task that starts at time `t`; there is no need for any buffer time between task assignments. The function `minEmployees(tasks)` should return an integer representing the minimum number of employees needed to complete all the tasks. Example Tasks For example, given the following tasks: ``` tasks = [(1, 4), (2, 6), (4, 7), (5, 8), (8, 9)] ``` - Task 1 starts at time 1 and ends at time 4. - Task 2 starts at time 2 and ends at time 6. - Task 3 starts at time 4 and ends at time 7. - Task 4 starts at time 5 and ends at time 8. - Task 5 starts at time 8 and ends at time 9. Based on this input, the expected output would be `3`, because at most three tasks overlap at any given time. Task Complete the function `minEmployees(tasks)` that accepts a list of tuples: - `tasks`: A list of tuples, where each tuple contains two integers representing the start and end times of a task. Return an integer representing the minimum number of employees required. **Constraints**: - `1 <= len(tasks) <= 1000` - `1 <= start_time < end_time <= 1000000`","solution":"def minEmployees(tasks): Returns the minimum number of employees required to complete all tasks without any overlap. if not tasks: return 0 # Create two separate lists of start and end times start_times = sorted(task[0] for task in tasks) end_times = sorted(task[1] for task in tasks) start_pointer = end_pointer = 0 max_overlap = current_overlap = 0 # Compare start and end times to determine concurrent tasks while start_pointer < len(tasks): if start_times[start_pointer] < end_times[end_pointer]: current_overlap += 1 max_overlap = max(max_overlap, current_overlap) start_pointer += 1 else: current_overlap -= 1 end_pointer += 1 return max_overlap"},{"question":"Given an integer `n`, define a function to return the number of unique binary search trees (BST) that can be created using all the integers from `1` to `n` (inclusive). Example: For `n = 3` the result should be `5`. 0 <= n <= 19 You may assume the creation of BSTs does not depend on the specific language and can be achieved by understanding the properties of binary search trees.","solution":"def numTrees(n): Returns the number of unique BSTs that can be created using all the integers from 1 to n. if n == 0: return 1 # Initialize the dp array with zeros. dp = [0] * (n + 1) # There is exactly one empty tree. dp[0] = 1 for nodes in range(1, n + 1): for root in range(1, nodes + 1): left = dp[root - 1] right = dp[nodes - root] dp[nodes] += left * right return dp[n]"},{"question":"In a small village, there is a rectangular grid of houses, each identified by a pair of coordinates (x, y), where x and y are integers. The village head has decided to build fences along certain rows and columns to demarcate different regions in the village. The fences always run either horizontally across entire rows or vertically down entire columns. The goal is to determine the number of distinct regions created after placing the fences. For example, if a fence is placed along row k, it separates the village into regions above row k and below row k. Similarly, a vertical fence along column m will separate regions to the left and right of column m. -----Input:----- - The first line of input contains two integers R and C, the dimensions of the rectangular grid (1 leq R, C leq 10^9). - The second line contains an integer r (0 leq r leq R−1), indicating the number of horizontal fences. - The next line contains r distinct integers representing the rows where the horizontal fences are placed. - The following line contains an integer c (0 leq c leq C−1), indicating the number of vertical fences. - The next line contains c distinct integers representing the columns where the vertical fences are placed. -----Output:----- - Output the number of distinct regions created by the placement of the fences. -----Constraints----- - 1 leq R, C leq 10^9 - 0 leq r leq R - 1 - 0 leq c leq C - 1 -----Sample Input 1:----- 5 5 1 2 1 3 -----Sample Output 1:----- 4 -----EXPLANATION:----- There is one horizontal fence along row 2 and one vertical fence along column 3. This results in the original grid being divided into 4 distinct regions by the placement of the fences. -----Sample Input 2:----- 6 4 2 1 4 1 2 -----Sample Output 2:----- 6 -----EXPLANATION:----- There are horizontal fences along rows 1 and 4 and a vertical fence along column 2. This results in the grid being divided into 6 distinct regions by the placement of the fences.","solution":"def number_of_regions(R, C, horizontal_fences, vertical_fences): Calculates the number of regions created by placing the fences. Args: R: int - number of rows in the grid. C: int - number of columns in the grid. horizontal_fences: list of int - list of row indices where horizontal fences are placed. vertical_fences: list of int - list of column indices where vertical fences are placed. Returns: int - number of distinct regions created. # The number of regions will be the number of rows segments times the number of column segments. row_segments = len(horizontal_fences) + 1 column_segments = len(vertical_fences) + 1 return row_segments * column_segments"},{"question":"# Problem Statement You are working on the backend of a streaming service that has several subscription plans. Each plan has a different cost structure along with a maximum number of concurrent streams allowed. Below are the details of each plan: | Plan | Cost per month | Max Concurrent Streams | |-------------|----------------|------------------------| | Basic | 8.99 | 1 | | Standard | 13.99 | 2 | | Premium | 17.99 | 4 | Given the type of plan and the number of concurrent streams a user wants to use, you need to determine if the plan is sufficient for the user\'s needs. Write a function `check_plan(plan, num_streams)` that takes the subscription plan and the user\'s required number of concurrent streams, and returns `True` if the plan supports the user\'s needs, and `False` otherwise. **Function Signature** ```python def check_plan(plan: str, num_streams: int) -> bool: ``` **Examples:** 1. `check_plan(\\"Standard\\", 2)` should return `True` (Standard plan allows up to 2 streams). 2. `check_plan(\\"Basic\\", 2)` should return `False` (Basic plan only allows 1 stream). 3. `check_plan(\\"Premium\\", 3)` should return `True` (Premium plan allows up to 4 streams). 4. `check_plan(\\"Standard\\", 1)` should return `True` (Standard plan allows up to 2 streams). Note: - The plan input will always be one of \\"Basic\\", \\"Standard\\", or \\"Premium\\". - The num_streams input will be a positive integer.","solution":"def check_plan(plan: str, num_streams: int) -> bool: Checks if the given plan supports the required number of concurrent streams. :param plan: The subscription plan (Basic, Standard, Premium). :param num_streams: The number of concurrent streams the user wants. :return: True if the plan supports the number of concurrent streams, False otherwise. plans = { \\"Basic\\": 1, \\"Standard\\": 2, \\"Premium\\": 4 } if plan in plans: return num_streams <= plans[plan] return False"},{"question":"Description Write a function that takes a string and returns the first non-repeating character. If there is no non-repeating character, return `_`. Examples ```python firstNonRepeatingCharacter(\\"stress\\") == \\"t\\" firstNonRepeatingCharacter(\\"teeter\\") == \\"r\\" firstNonRepeatingCharacter(\\"aabbcc\\") == \\"_\\" firstNonRepeatingCharacter(\\"success\\") == \\"u\\" ``` Constraints - The string will contain only lowercase English letters. - The string length will be in the range [1, 10^5].","solution":"def firstNonRepeatingCharacter(s): Returns the first non-repeating character in the string s. If there is no non-repeating character, returns \'_\'. # Dictionary to store character counts char_count = {} # Count characters in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char # If no non-repeating character is found return \'_\'"},{"question":"Given a list of integers where each integer represents a unique item and a target sum, your goal is to determine whether it is possible to select a subset of the integers that add up to the target sum. If there are multiple subsets that yield the same sum, any one of them satisfying the criteria is acceptable. Write a function `can_reach_target_sum(nums: List[int], target: int) -> bool` that returns `True` if such a subset exists, otherwise returns `False`. # Specifications: - The input list of integers (`nums`) can be of length up to 1000. - Each integer in the input list and the target sum can range between `-1000` and `1000`. - The function may utilize any standard algorithm or technique to solve the problem, but performance considerations should be taken into account. # Example 1: ```python Input: nums = [1, 2, 3, 7], target = 6 Output: True Explanation: The subset [1, 2, 3] sums up to 6. # Example 2: ```python Input: nums = [3, 34, 4, 12, 5, 2], target = 9 Output: True Explanation: The subset [4, 5] sums up to 9. # Example 3: ```python Input: nums = [1, -1, 2, 3, 5], target = 4 Output: True Explanation: The subset [1, 3] sums up to 4. # Example 4: ```python Input: nums = [2, 4, 6], target = 5 Output: False Explanation: There is no subset that sums up to 5.","solution":"def can_reach_target_sum(nums, target): Determines if a subset of the given list of integers sums up to the target. Uses dynamic programming to solve the subset sum problem. n = len(nums) # We use a set to keep track of the possible sums we can get with the subsets. possible_sums = set() possible_sums.add(0) for num in nums: # We need to iterate over a copy of the current possible sums to avoid modifying it during iteration. current_sums = list(possible_sums) for s in current_sums: new_sum = s + num if new_sum == target: return True possible_sums.add(new_sum) return target in possible_sums"},{"question":"Bob is the manager of an environmentally-friendly car rental service. He wants to optimize the use of his electric cars by utilizing a scheduled charging system. Each car requires a full charge before it can be rented out again. The cars can only be charged one at a time due to limited charging stations. Each car has a scheduled start and end time for the charging process. However, Bob wants to ensure that there are no overlaps in the charging schedule, so that each car can be fully charged and ready on time. You need to help Bob determine the maximum number of cars that can be charged without any overlap in their schedules. ----- Input: ----- - First line contains an integer N, representing the number of cars. - The next N lines contain two integers each S and E, where S is the start time and E is the end time for the car\'s charging schedule. ----- Output: ----- - Print the maximum number of cars that can be charged without overlapping schedules. ----- Constraints: ----- - 1 ≤ N ≤ 10^5 - 0 ≤ S < E ≤ 10^9 ----- Sample Input: ----- 4 1 4 2 6 4 7 5 9 ----- Sample Output: ----- 2 ----- Explanation: ----- In this example, the optimal schedule is to charge the first car from time 1 to 4 and the third car from time 4 to 7, accommodating the maximum number of non-overlapping cars.","solution":"def max_non_overlapping_cars(n, schedules): Determine the maximum number of cars that can be charged without overlapping schedules. Args: - n (int): The number of cars. - schedules (list[tuple[int, int]]): A list of tuples, each containing the start and end time of a car\'s charging schedule. Returns: - int: The maximum number of non-overlapping cars. # Sort the schedules based on the end time schedules.sort(key=lambda x: x[1]) # Initialize variables to keep track of the end time of the last included schedule last_end_time = 0 max_cars = 0 for start, end in schedules: if start >= last_end_time: max_cars += 1 last_end_time = end return max_cars"},{"question":"# Anagram Checker Write a function to determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function should ignore spaces, punctuation, and should treat uppercase and lowercase letters as equivalent. Function Signature: ```python def are_anagrams(str1: str, str2: str) -> bool: pass ``` # Example 1: ```python str1 = \\"Listen\\" str2 = \\"Silent\\" are_anagrams(str1, str2) # should return True ``` # Example 2: ```python str1 = \\"A gentleman\\" str2 = \\"Elegant man\\" are_anagrams(str1, str2) # should return True ``` # Example 3: ```python str1 = \\"Clint Eastwood\\" str2 = \\"Old West Action\\" are_anagrams(str1, str2) # should return True ``` # Example 4: ```python str1 = \\"Hello\\" str2 = \\"Olelh\\" are_anagrams(str1, str2) # should return True ``` # Example 5: ```python str1 = \\"Programming\\" str2 = \\"Gram Ring Mop\\" are_anagrams(str1, str2) # should return True ```","solution":"def are_anagrams(str1: str, str2: str) -> bool: Determines if two strings are anagrams of each other, ignoring spaces, punctuation, and considering uppercase and lowercase as equivalent. # Remove spaces and convert to lowercase cleaned_str1 = \'\'.join(e for e in str1 if e.isalnum()).lower() cleaned_str2 = \'\'.join(e for e in str2 if e.isalnum()).lower() # Compare sorted versions of the cleaned strings return sorted(cleaned_str1) == sorted(cleaned_str2)"},{"question":"Write a function that takes an integer n and returns a list of all prime numbers less than n. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. The function should use the Sieve of Eratosthenes algorithm for efficient computation. Example: - If n is 10, the function should return [2, 3, 5, 7]. - If n is 20, the function should return [2, 3, 5, 7, 11, 13, 17, 19]. Input: an integer n Output: a list of prime numbers less than n Constraints: - The input integer n will be greater than 1. - The function should be optimized for large values of n.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] is_prime = [True] * n is_prime[0] = is_prime[1] = False for base in range(2, int(n**0.5) + 1): if is_prime[base]: for multiple in range(base * base, n, base): is_prime[multiple] = False return [num for num, prime in enumerate(is_prime) if prime]"},{"question":"Write a function that takes a list of integers and returns a dictionary with the frequency count of all elements in the list. The function should ignore case for any string elements and count them as a single entity, regardless of their letter casing. The challenge is to implement this without using any standard library function that directly accomplishes this task (like `collections.Counter` in Python). You need to manually count the frequencies. For example, given the input list: count_frequencies([3, \'apple\', \'banana\', \'Apple\', 3, 2, \'banana\', \'APPLE\', 2, 2, \'Banana\']) The function should return a dictionary like: {3: 2, \'apple\': 3, \'banana\': 3, 2: 3} Notice that \'apple\', \'Apple\', and \'APPLE\' are all counted under the same key \'apple\', and similarly with \'banana\'. Another example: count_frequencies([\'a\', \'A\', \'B\', \'b\', \'a\', \'C\', \'c\']) The function should return: {\'a\': 3, \'b\': 2, \'c\': 2}","solution":"def count_frequencies(lst): Returns a dictionary with the frequency count of all elements in the list. The function ignores case for any string elements. freq_dict = {} for element in lst: if isinstance(element, str): element = element.lower() if element in freq_dict: freq_dict[element] += 1 else: freq_dict[element] = 1 return freq_dict"},{"question":"Write a function called \\"countVowels\\". Given a string, \\"countVowels\\" returns the number of vowels (a, e, i, o, u) in the string. For example: var output = countVowels(\'hello world\'); console.log(output); // --> 3","solution":"def countVowels(s): Returns the number of vowels in the given string. vowels = \'aeiouAEIOU\' return sum(1 for char in s if char in vowels)"},{"question":"Create a function that takes a string representing an arithmetic expression as input and returns the result of the evaluated expression. The input string will only contain digits (0-9), arithmetic operators (+, -, *, /), and possibly whitespace characters. The function should handle basic arithmetic operations and respect the normal operator precedence rules (multiplication and division before addition and subtraction). Ensure the result is rounded to two decimal places, and in cases where the result ends with a 0, eliminate the trailing 0. For example, \\"10 / 4\\" should return \\"2.5\\" instead of \\"2.50\\". Examples: - Input: \\"3 + 5 / 2\\" Output: \\"5.5\\" - Input: \\"10 - 6 * 0.5\\" Output: \\"7\\" - Input: \\"15 + 3 * 6 / 2 - 4\\" Output: \\"20.0\\"","solution":"def evaluate_expression(expression): Evaluates a simple arithmetic expression and returns the result as a string rounded to two decimal places. # Remove whitespace expression = expression.replace(\\" \\", \\"\\") try: # Calculate the result using eval result = eval(expression) # Round the result to 2 decimal places and remove any trailing .0 result = round(result, 2) result_str = f\\"{result:.2f}\\".rstrip(\'0\').rstrip(\'.\') return result_str except Exception as e: return str(e)"},{"question":"Given a linked list consisting of integer values, determine if it forms a palindrome. The linked list can be structurally modified to achieve this. A palindrome is a sequence that reads the same backward as forward, such as \\"radar\\" or \\"level\\". Write a function that takes the head of a singly linked list as input and returns a boolean indicating if the list is a palindrome. Example 1: Input: 1 -> 2 -> 3 -> 2 -> 1 Output: true Example 2: Input: 1 -> 2 -> 3 -> 4 -> 2 -> 1 Output: false Example 3: Input: 1 -> 2 -> 2 -> 1 Output: true Note: - The number of nodes in the linked list will be between 1 and 10^5. - The linked list can contain any integer value.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def isPalindrome(head: ListNode) -> bool: # First find the middle of the linked list slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next # Reverse the second half of the linked list prev = None while slow: next_node = slow.next slow.next = prev prev = slow slow = next_node # Compare the first half with the reversed second half left, right = head, prev while right: # Only need to check until the end of the shorter half if left.val != right.val: return False left = left.next right = right.next return True"},{"question":"You are given a list of integers representing daily temperatures. Implement a function `temperature_trend` that returns a list of the same length where each element in the new list represents the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put `0` instead. For example, given the list `[73, 74, 75, 71, 69, 72, 76, 73]`, your function should return `[1, 1, 4, 2, 1, 1, 0, 0]`. - On day 1, you have to wait for 1 day to get a warmer temperature (74). - On day 2, you have to wait for 1 day to get a warmer temperature (75). - On day 3, you have to wait for 4 days to get a warmer temperature (76). - On day 4, you have to wait for 2 days to get a warmer temperature (72). - On day 5, you have to wait for 1 day to get a warmer temperature (72). - On day 6, you have to wait for 1 day to get a warmer temperature (76). - On day 7, there is no future day with a warmer temperature. - On day 8, there is no future day with a warmer temperature. Make sure your function is efficient and can handle large input sizes.","solution":"def temperature_trend(temperatures): Returns a list where each element represents the number of days one has to wait until a warmer temperature. If there is no such day, return 0 for that day. Parameters: temperatures (list): List of daily temperatures. Returns: list: List of days to wait until a warmer temperature. n = len(temperatures) result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: prev_day = stack.pop() result[prev_day] = i - prev_day stack.append(i) return result"},{"question":"Write a function `is_valid_IPv4` that takes a string and returns `True` if the string is a valid IPv4 address, and `False` otherwise. An IPv4 address consists of four octets (numbers) separated by dots (`.`). Each octet must be a number between 0 and 255, and must not contain leading zeros. # Examples ```python is_valid_IPv4(\\"192.168.1.1\\") ==> True is_valid_IPv4(\\"0.0.0.0\\") ==> True is_valid_IPv4(\\"255.255.255.255\\") ==> True is_valid_IPv4(\\"192.168.001.1\\") ==> False (contains leading zeros) is_valid_IPv4(\\"192.168.1.256\\") ==> False (256 is out of range) is_valid_IPv4(\\"192.168.1.-1\\") ==> False (negative number) is_valid_IPv4(\\"192.168.1\\") ==> False (missing one octet) is_valid_IPv4(\\"192.168.1.1.1\\") ==> False (one octet too many) is_valid_IPv4(\\"192.168.1.a\\") ==> False (contains a non-numeric character) ```","solution":"def is_valid_IPv4(ip): Returns True if the string is a valid IPv4 address, False otherwise. parts = ip.split(\'.\') # An IPv4 address must contain exactly four parts if len(parts) != 4: return False for part in parts: # Each part must be numeric and should not contain leading zeros unless it is \\"0\\" if not part.isdigit() or (part[0] == \'0\' and len(part) > 1): return False number = int(part) # Each part must be in the range 0-255 if number < 0 or number > 255: return False return True"},{"question":"In a town, there is an ancient garden comprising many trees lined up in a row. Each tree has a certain height assigned to it. A single robot is deployed to water these trees. However, there are certain conditions on how the robot can water these trees: 1. The robot can only water a contiguous segment of trees at a time. 2. The watering intensity must increase strictly as it progresses along the segment. Given the height of each tree, find the maximum length of any such segment that the robot can water without breaking the above conditions. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the number of trees. - The second line contains N space-separated integers H_1, H_2, ldots, H_N, indicating the heights of the trees. -----Output----- For each test case, print a single line containing one integer ― the maximum length of the segment where the robot can water the trees with strictly increasing intensity. -----Constraints----- - 1 le T le 10 - 1 le N le 1000 - 1 le H_i le 10^5 for each valid i -----Example Input----- 2 5 1 2 2 3 4 6 5 1 2 3 2 4 -----Example Output----- 3 3 -----Explanation----- Example case 1: The longest segment with strictly increasing heights starts at the second tree and ends at the fourth tree, giving a segment length of 3 (heights: 2, 3, 4). Example case 2: The longest segments with strictly increasing heights can be either from the second to the fourth tree (heights: 1, 2, 3) or from the fourth to the sixth tree (heights: 2, 4), both resulting in a segment length of 3.","solution":"def max_watering_segment(test_cases): results = [] for case in test_cases: N, heights = case max_len = 1 current_len = 1 for i in range(1, N): if heights[i] > heights[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 results.append(max_len) return results # Implementation for parsing input and producing output def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) heights = list(map(int, lines[index + 1].split())) test_cases.append((N, heights)) index += 2 return test_cases"},{"question":"Chef is back with another problem in his programming contest! This time, it involves arrays and numbers. You are given an array `A` of `n` integers. For each prefix `A[1], A[2], ..., A[i]` (1 ≤ i ≤ n), calculate the minimum number of operations needed to make all elements in the prefix equal to its median. An operation consists of incrementing or decrementing an element by 1. The median of a list of numbers is the middle element when they are sorted. If there are an even number of elements, the median is the smaller of the two middle elements. -----Input:----- The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case starts with an integer `n` (1 ≤ n ≤ 1000) — the length of the array. The next line contains `n` integers `A1, A2, ..., An` (|Ai| ≤ 10^9) — the elements of the array. -----Output:----- For each test case, output one line with `n` integers. The `i`-th integer should be the minimum number of operations needed to make all elements of the prefix of length `i` equal to its median. -----Sample Input:----- 2 3 5 3 1 4 1 7 5 2 -----Sample Output:----- 0 4 6 0 6 9 10 -----Explanation:----- For the first test case: - The prefix of length 1 is [5]. The median is 5. 0 operations are needed. - The prefix of length 2 is [5, 3]. The median is 3. 2 operations are needed to change 5 to 3, hence total operations = 2. - The prefix of length 3 is [5, 3, 1]. The median is 3. The operations are 2 to change 5 to 3 and 2 to change 1 to 3, hence total operations = 4. For the second test case: - The prefix of length 1 is [1]. The median is 1. 0 operations are needed. - The prefix of length 2 is [1, 7]. The median is 1 (since it\'s the smaller of the two middle elements in [1, 7]). 6 operations are needed to change 7 to 1. - The prefix of length 3 is [1, 7, 5]. The median is 5. The operations are 4 to change 1 to 5 and 2 to change 7 to 5, hence total operations = 6. - The prefix of length 4 is [1, 7, 5, 2]. The median is 5 (the smaller of the two middle elements in [1, 2, 5, 7]). The operations are 4 to change 1 to 5, 2 to change 7 to 5 and 3 to change 2 to 5, hence total operations = 9.","solution":"def min_operations_to_median(t, test_cases): results = [] for case in test_cases: n, array = case operations = [] for i in range(1, n + 1): prefix = array[:i] prefix.sort() median = prefix[(i - 1) // 2] total_operations = sum(abs(x - median) for x in prefix) operations.append(total_operations) results.append(operations) return results # Example usage: t = 2 test_cases = [ (3, [5, 3, 1]), (4, [1, 7, 5, 2]) ] print(min_operations_to_median(t, test_cases))"},{"question":"You are given an array representing the prices of a given stock on various days. Calculate the maximum profit you can achieve by buying and selling the stock. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times), but you must sell the stock before you buy again. Example 1: Input: prices = [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. Example 2: Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4. Example 3: Input: prices = [7,6,4,3,1] Output: 0 Explanation: There is no way to make profit in this case, so the maximum profit is 0. Constraints: 1 <= prices.length <= 100 0 <= prices[i] <= 1000","solution":"def max_profit(prices): Calculate the maximum profit you can achieve by buying and selling the stock. :param prices: List[int] - List of stock prices :return: int - Maximum profit max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"Story In a fictional world, you are managing resource allocations for a number of projects. Each project requires certain amounts of CPU cores and memory to run. You have a pool of servers, each with a specific number of CPU cores and a specified amount of memory. Your task is to assign projects to servers such that all project requirements are met without exceeding the server\'s resources. Visual Representation Imagine this simple version: - Servers and projects are represented as lists of dictionaries. - Each dictionary has `cpu` and `memory` keys indicating the resource available on a server or required by a project. Example Servers: ```python servers = [ {\\"cpu\\": 8, \\"memory\\": 32}, {\\"cpu\\": 16, \\"memory\\": 64}, {\\"cpu\\": 4, \\"memory\\": 16}, ] ``` Projects: ```python projects = [ {\\"cpu\\": 2, \\"memory\\": 8}, {\\"cpu\\": 4, \\"memory\\": 16}, {\\"cpu\\": 10, \\"memory\\": 32}, ] ``` One possible assignment: ```python [ {\\"server\\": 0, \\"project\\": 0}, # Project 0 assigned to Server 0 {\\"server\\": 0, \\"project\\": 1}, # Project 1 assigned to Server 0 {\\"server\\": 1, \\"project\\": 2}, # Project 2 assigned to Server 1 ] ``` Kata Task Write a function `assign_projects_to_servers(servers, projects)` that takes two lists as arguments: - A list of servers, each represented by a dictionary with `cpu` and `memory`. - A list of projects, each represented by a dictionary with `cpu` and `memory`. The function should return a list of dictionaries where each dictionary has: - a `server` key indicating the index of the server in the original list. - a `project` key indicating the index of the project in the original list. The goal is to assign each project to a server such that no server\'s CPU or memory resources are exceeded. Constraints - If a project cannot be assigned to any server, the function should raise a `ValueError` with the message \\"Insufficient resources for projects\\". - Assume all inputs are non-negative integers. - There can be multiple valid assignments. Returning any one of them is acceptable. Example ```python servers = [ {\\"cpu\\": 8, \\"memory\\": 32}, {\\"cpu\\": 16, \\"memory\\": 64}, {\\"cpu\\": 4, \\"memory\\": 16}, ] projects = [ {\\"cpu\\": 2, \\"memory\\": 8}, {\\"cpu\\": 5, \\"memory\\": 12}, {\\"cpu\\": 4, \\"memory\\": 16}, ] ``` Calling `assign_projects_to_servers(servers, projects)` may return: ```python [ {\\"server\\": 0, \\"project\\": 0}, {\\"server\\": 1, \\"project\\": 1}, {\\"server\\": 2, \\"project\\": 2}, ] ``` This is a valid assignment: - Server 0 can handle Project 0. - Server 1 can handle Project 1. - Server 2 can handle Project 2. If the servers or projects are such that the assignment is not possible, the function should raise the `ValueError`. Note This task requires you to manage resources efficiently and find an optimal way to allocate them. You might want to explore concepts like resource optimization and scheduling for an efficient solution.","solution":"def assign_projects_to_servers(servers, projects): Assigns projects to servers such that no server\'s resources are exceeded. :param servers: List[Dict[str, int]], a list of servers with \'cpu\' and \'memory\' keys :param projects: List[Dict[str, int]], a list of projects with \'cpu\' and \'memory\' keys :return: List[Dict[str, int]], a list of assignments with \'server\' and \'project\' keys If assignment is not possible for any project, raises ValueError. assignments = [] for proj_index, project in enumerate(projects): assigned = False for serv_index, server in enumerate(servers): if server[\'cpu\'] >= project[\'cpu\'] and server[\'memory\'] >= project[\'memory\']: # Assign project to this server assignments.append({\\"server\\": serv_index, \\"project\\": proj_index}) # Deduct server resources server[\'cpu\'] -= project[\'cpu\'] server[\'memory\'] -= project[\'memory\'] assigned = True break if not assigned: raise ValueError(\\"Insufficient resources for projects\\") return assignments"},{"question":"A software company is developing a lightweight Covid-19 health tracker application. The main feature of the application is to provide a risk score based on user inputs regarding their symptoms and past interactions. The company has decided to base this score on a simple set of rules. The company gathers the following data from the users: - `temperature`: numerical value representing the body temperature in Celsius. - `cough`: a boolean value indicating whether the user has a cough. - `sore_throat`: a boolean value indicating whether the user has a sore throat. - `close_contact`: a boolean value indicating if the user had close contact with a confirmed Covid-19 case in the last 14 days. The company has determined the following risk scoring rules: - The base score is 0. - If `temperature` is greater than or equal to 38.0, add 2 points to the score. - If `cough` is true, add 1 point to the score. - If `sore_throat` is true, add 1 point to the score. - If `close_contact` is true, add 3 points to the score. Your task is to write a function that takes the user input values and returns the calculated risk score based on the rules above. Function Signature: ```python def calculate_risk_score(temperature: float, cough: bool, sore_throat: bool, close_contact: bool) -> int: ``` # Input: - `temperature (float)`: A float representing the user\'s body temperature in Celsius. - `cough (bool)`: A boolean indicating whether the user is experiencing a cough. - `sore_throat (bool)`: A boolean indicating whether the user is experiencing a sore throat. - `close_contact (bool)`: A boolean indicating whether the user has had close contact with a confirmed Covid-19 case in the last 14 days. # Output: - Return an integer representing the calculated risk score. # Example: ```python assert calculate_risk_score(38.5, True, False, True) == 6 assert calculate_risk_score(37.0, False, True, False) == 1 assert calculate_risk_score(36.5, False, False, False) == 0 assert calculate_risk_score(39.0, True, True, True) == 7 ``` In these examples, each score is calculated based on the rules outlined above.","solution":"def calculate_risk_score(temperature: float, cough: bool, sore_throat: bool, close_contact: bool) -> int: Calculates the risk score for Covid-19 based on user inputs. Parameters: temperature (float): Body temperature in Celsius. cough (bool): Whether the user has a cough. sore_throat (bool): Whether the user has a sore throat. close_contact (bool): Whether the user had close contact with a confirmed Covid-19 case in the last 14 days. Returns: int: The calculated risk score. score = 0 if temperature >= 38.0: score += 2 if cough: score += 1 if sore_throat: score += 1 if close_contact: score += 3 return score"},{"question":"Design a data structure that supports the following operations: 1. Dynamic insertion of integers. 2. Finding the median of all current elements. The data structure should be efficient in terms of both time complexity and space complexity. Implement the class `MedianFinder`: ```python class MedianFinder(): def __init__(self): Initialize your data structure here. def addNum(self, num: int) -> None: Add a new integer to the data structure. def findMedian(self) -> float: Return the median of all elements so far. ``` Example: ```python medianFinder = MedianFinder(); medianFinder.addNum(1) # arr = [1] medianFinder.addNum(2) # arr = [1, 2] medianFinder.findMedian() # returns 1.5 medianFinder.addNum(3) # arr = [1, 2, 3] medianFinder.findMedian() # returns 2 ``` Constraints: - There will be at most 10^5 calls to `addNum` and findMedian. - -10^5 <= num <= 10^5 - The median is the middle value in an ordered integer list. If the size of the list is even, the median is the average of the two middle values. Note: - You might find it useful to maintain two heaps (one max-heap and one min-heap) to keep track of the lower and higher halves of the list.","solution":"import heapq class MedianFinder: def __init__(self): Initialize your data structure here. self.min_heap = [] # Min-heap for the larger half self.max_heap = [] # Max-heap for the smaller half def addNum(self, num: int) -> None: Add a new integer to the data structure. # Push the new number to max-heap (invert the number for max-heap behavior using min-heap) heapq.heappush(self.max_heap, -num) # Balance the heaps if necessary if self.max_heap and self.min_heap and (-self.max_heap[0]) > self.min_heap[0]: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) # Always ensure min_heap has the larger half and max_heap has the smaller half if len(self.min_heap) > len(self.max_heap): heapq.heappush(self.max_heap, -heapq.heappop(self.min_heap)) elif len(self.max_heap) > len(self.min_heap) + 1: heapq.heappush(self.min_heap, -heapq.heappop(self.max_heap)) def findMedian(self) -> float: Return the median of all elements so far. if len(self.max_heap) > len(self.min_heap): return -self.max_heap[0] return (-self.max_heap[0] + self.min_heap[0]) / 2.0"},{"question":"Given a string s consisting of letters \'a\' and \'b\' only. We can delete any two adjacent letters if they are different. After repeated performance of this operation, return the length of the smallest string that we can get. Example 1: Input: s = \\"abb\\" Output: 1 Explanation: The reduced string is \\"a\\" with length 1 after performing the operation \\"bb\\" -> \\"\\". Example 2: Input: s = \\"abab\\" Output: 0 Explanation: The reduced string is \\"\\" with length 0 after performing the operation \\"ab\\" -> \\"\\", \\"ab\\" -> \\"\\". Example 3: Input: s = \\"aab\\" Output: 1 Explanation: The reduced string is \\"b\\" with length 1 after performing the operation \\"aa\\" -> \\"a\\". Constraints: - 1 <= s.length <= 1000 - s consists of letters \'a\' and \'b\'.","solution":"def smallest_string_length(s): Returns the length of the smallest string that can be obtained by repeatedly deleting any two adjacent letters if they are different (\'ab\' or \'ba\'). stack = [] for char in s: if stack and stack[-1] != char: stack.pop() else: stack.append(char) return len(stack)"},{"question":"Given a string sequence S, which is made up of \'A\'s and \'B\'s, we need to transform this sequence into a specific pattern. The allowed operations are: 1. Replace any \'A\' followed immediately by a \'B\' with \'AA\'. 2. Replace any \'B\' followed immediately by an \'A\' with \'BB\'. Each operation can be applied as many times as needed and in any order. Your task is to write a function, `transform_sequence(S)`, that returns the final transformed string after no more operations can be applied. # Function Signature ```python def transform_sequence(S: str) -> str: pass ``` # Input - `S`: A string composed of characters \'A\' and \'B\' with length between 1 and 1000. # Output - Return the transformed sequence as a string, according to the given operations. # Constraints - The string will only contain uppercase \'A\' and \'B\'. - Operations can be applied in any sequence. # Example ```python transform_sequence(\\"AAB\\") == \\"AAA\\" transform_sequence(\\"BABA\\") == \\"BBBB\\" transform_sequence(\\"ABAB\\") == \\"AAAA\\" ``` # Explanation 1. For the input `\\"AAB\\"`, the possible transformations could be: - `\\"AAB\\"` becomes `\\"AAA\\"` by applying the first operation. 2. For the input `\\"BABA\\"`, transformations could be: - `\\"BABA\\"` becomes `\\"BBBA\\"` by applying the second operation on the first \\"BA\\". - `\\"BBBA\\"` becomes `\\"BBBB\\"` by applying the second operation again. 3. For the input `\\"ABAB\\"`, transformations could be: - `\\"ABAB\\"` becomes `\\"AAAB\\"` by applying the first operation on the first \\"AB\\". - `\\"AAAB\\"` becomes `\\"AAAA\\"` by applying the first operation again. The challenge is finding the final stable form where no more operations can be applied.","solution":"def transform_sequence(S: str) -> str: Transforms the sequence based on the given operations, replacing \'AB\' with \'AA\' and \'BA\' with \'BB\', until no more replacements can be made. # Continue until no more changes can be performed while True: new_S = S.replace(\'AB\', \'AA\').replace(\'BA\', \'BB\') if new_S == S: # If no further changes, break the loop break S = new_S return S"},{"question":"*** Nova polynomial multiply by scalar *** This kata is an extension of the series on polynomial handling. ([#1](http://www.codewars.com/kata/nova-polynomial-1-add-1) [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe) [#3](http://www.codewars.com/kata/5714041e8807940ff3001140) [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5)) In this kata, we will multiply a polynomial by a scalar. A polynomial is represented as a list where each element corresponds to a coefficient. The position in the list indicates the term\'s degree. The first element is the factor for the constant term. p = [a0, a1, a2] represents the polynomial a0 + a1x + a2x^2 Given a polynomial and a scalar `k`, return the product of the polynomial and the scalar: ```python poly_scalar_multiply([1, 2], 3) = [3, 6] poly_scalar_multiply([0, 4, 2], -1) = [0, -4, -2] ``` The polynomials are non-empty, and the scalar is a numerical value (integer or float). Make sure your function is properly optimized for efficiency. Use the preloaded functions from the series if needed: * [poly_add](http://www.codewars.com/kata/nova-polynomial-1-add-1) * [poly_multiply](http://www.codewars.com/kata/570eb07e127ad107270005fe).","solution":"def poly_scalar_multiply(p, k): Multiply a polynomial by a scalar. Args: p (list): List of coefficients of the polynomial. k (int/float): Scalar to multiply by. Returns: list: New list of coefficients after multiplying by k. return [coefficient * k for coefficient in p]"},{"question":"Create a Python function to simulate a traffic light system for a single lane road. The traffic light has three states - Red, Green, and Yellow. The light should switch states in the following manner: - Green for 60 seconds. - Yellow for 5 seconds. - Red for 55 seconds. You need to implement a function `traffic_light_simulation(current_time: int) -> str`. Given the current time in seconds since the start of the simulation, the function should return the state of the traffic light at that specific time. Note that the traffic light cycle starts at time 0 with Green. # Example: ```python print(traffic_light_simulation(59)) # Output: \\"Green\\" print(traffic_light_simulation(60)) # Output: \\"Yellow\\" print(traffic_light_simulation(65)) # Output: \\"Red\\" print(traffic_light_simulation(115)) # Output: \\"Green\\" ``` # Input Format: - A single integer `current_time` representing the seconds since the traffic signal started. # Output Format: - A single string, either \\"Green\\", \\"Yellow\\", or \\"Red\\" representing the state of the traffic light. # Constraints: - The `current_time` is a non-negative integer.","solution":"def traffic_light_simulation(current_time: int) -> str: Returns the state of the traffic light given the current time in seconds since the start of the simulation. The traffic light cycle is as follows: - Green for 60 seconds. - Yellow for 5 seconds. - Red for 55 seconds. cycle_time = 120 # Total duration of one complete cycle. time_in_cycle = current_time % cycle_time if time_in_cycle < 60: return \\"Green\\" elif time_in_cycle < 65: return \\"Yellow\\" else: return \\"Red\\""},{"question":"Write a function `chunkArray` that splits an array into chunks of a specified size. # Usage With one argument, `chunkArray(array, size)`, it returns an array of subarrays divided into `size` elements each. If the array can\'t be split evenly, the final chunk will contain the remaining elements. # Examples ```python chunkArray([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) # returns [[1, 2, 3], [4, 5, 6], [7, 8, 9]] chunkArray([1, 2, 3, 4, 5], 2) # returns [[1, 2], [3, 4], [5]] ``` # Notes Test cases: - `size` will always be a positive integer and greater than zero. - The input array can be empty, in which case an empty array should be returned. - The function should be able to handle arrays with various data types (not just numbers).","solution":"def chunkArray(array, size): Splits an array into chunks of specified size. Parameters: array (list): The array to be chunked. size (int): The size of each chunk. Returns: list: A list of chunks. if size <= 0: raise ValueError(\\"Chunk size must be greater than zero\\") return [array[i:i + size] for i in range(0, len(array), size)]"},{"question":"King Richard possesses a matrix of positive integers of size N times M. The King wishes to gift this matrix to his advisor, but he wants to ensure that the sum of all elements in any row is unique. To accomplish this, the King needs your help to possibly swap the elements of the matrix so that the sum of each row is unique. Determine if it’s possible to rearrange the elements within each row of the matrix to achieve this goal. -----Input----- - The first line of the input contains two integers N and M — the number of rows and columns in the matrix. - Each of the next N lines contains M space-separated integers, representing the elements of the matrix. -----Output----- Print \\"YES\\" if it is possible to rearrange the elements in each row such that all row sums are unique. Otherwise, print \\"NO\\". -----Constraints----- - 1 le N, M le 100 - 1 le text{matrix}[i][j] le 10^4 -----Example Input----- 3 3 1 2 3 3 2 1 2 1 3 -----Example Output----- YES -----Explanation----- One possible way to rearrange the matrix to make all row sums unique is as follows: [ 3 2 1 quad text{(sum = 6)} 1 3 2 quad text{(sum = 6)} 2 1 3 quad text{(sum = 6)} ] It is verified as a unique sum for each row.","solution":"def can_make_unique_sums(matrix): Determines if the matrix can be rearranged so that the sum of each row is unique. N = len(matrix) M = len(matrix[0]) # Calculate the sum of each row in the matrix row_sums = [sum(row) for row in matrix] # Check if all row sums are unique if len(row_sums) == len(set(row_sums)): return \\"YES\\" else: return \\"NO\\""},{"question":"Delivery Trucks A logistics company has a fleet of delivery trucks with different capacities. The company wants to deliver the maximum amount of goods using exactly two trucks within a given capacity limit for each truck. Given a list of truck capacities and the total weight of goods to be delivered, you need to determine the maximum weight that can be delivered using exactly two trucks without exceeding their individual capacities. For example, if capacities = [10, 20, 30, 40] and the total weight = 35, the maximum weight that can be delivered using two trucks is 35 units (using trucks with capacities 20 and 15, if available). Input Format The first line contains two integers, n and total_weight, the number of trucks and the total weight of goods to be delivered. The next line contains n space-separated integers capacities[i]. Constraints 1 <= n <= 105 1 <= total_weight <= 109 1 <= capacities[i] <= 109 Output Format An integer that denotes the maximum weight that can be delivered using exactly two trucks without exceeding their individual capacities. Sample Input 5 50 10 20 30 40 25 Sample Output 50 Explanation The trucks with capacities 20 and 30 can be used to deliver exactly 50 units.","solution":"def max_weight_with_two_trucks(n, total_weight, capacities): Determines the maximum weight that can be delivered using exactly two trucks without exceeding their capacities. :param n: Number of trucks :param total_weight: Total weight of goods to be delivered :param capacities: List of truck capacities :return: The maximum weight that can be delivered using exactly two trucks max_weight = 0 capacities.sort() left, right = 0, n - 1 while left < right: current_weight = capacities[left] + capacities[right] if current_weight <= total_weight: max_weight = max(max_weight, current_weight) left += 1 else: right -= 1 return max_weight"},{"question":"Write a function that takes an integer array as input and returns the longest sequence of increasing numbers. If there are multiple sequences with the same length, return the first one encountered. Examples: longestIncreasingSequence([1, 2, 1, 2, 3, 4, 1]) == [1, 2, 3, 4] longestIncreasingSequence([5, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]","solution":"def longestIncreasingSequence(nums): if not nums: return [] max_len = 0 current_len = 1 longest_seq_start = 0 current_start = 0 for i in range(1, len(nums)): if nums[i] > nums[i - 1]: current_len += 1 else: if current_len > max_len: max_len = current_len longest_seq_start = current_start current_len = 1 current_start = i if current_len > max_len: max_len = current_len longest_seq_start = current_start return nums[longest_seq_start:longest_seq_start + max_len]"},{"question":"Write a function that takes a string as input and returns a new string with the characters in reverse order, preserving the case of each character. For example, given the input string \\"Hello, World!\\", the function should return \\"!dlroW ,olleH\\".","solution":"def reverse_string(s): Returns a new string with the characters in reverse order, preserving the case of each character. Parameters: s (str): Input string Returns: str: Reversed string with case preserved return s[::-1]"},{"question":"Your task is to implement a text autocomplete feature similar to those found in search engines. You will receive a list of phrases during the training phase. Utilize this list to build a model that suggests up to three possible phrase completions when provided with a prefix during testing. After building your model, tests will call the `autocomplete` function, passing it a prefix. The function should return a list of up to three possible completions for the provided prefix, based on the training data. If no completions are found, return an empty list. ```python def autocomplete(prefix: str, phrases: list) -> list: Args: prefix: A string representing the beginning of a phrase. phrases: A list of strings that have been provided for training the model. Returns: A list of up to three strings that best complete the given prefix. pass ``` Blocked libraries: sklearn, pandas, tensorflow, numpy, scipy, difflib, re Explanation: Focus on implementing a simple but efficient search mechanism to suggest relevant phrases based on the prefix provided. Consider edge cases, such as handling an empty list of phrases or a prefix that does not match any phrase from the list.","solution":"def autocomplete(prefix: str, phrases: list) -> list: Args: prefix: A string representing the beginning of a phrase. phrases: A list of strings that have been provided for training the model. Returns: A list of up to three strings that best complete the given prefix. # Filter phrases that start with the given prefix (case-insensitive) matches = [phrase for phrase in phrases if phrase.lower().startswith(prefix.lower())] # Return at most three matches return matches[:3]"},{"question":"You are given an integer array and a target number. Your task is to determine if there are two distinct elements in the array whose sum is equal to the target number. For instance: ```python check_sum([1, 2, 3, 4], 5) = True // because 1 + 4 = 5 check_sum([1, 2, 3, 4], 8) = False // no pairs add up to 8 check_sum([2, 2, 3, 3], 4) = True // because 2 + 2 = 4 check_sum([7, 1, 5, 3, 9], 8) = True // because 7 + 1 = 8 ``` Good luck!","solution":"def check_sum(arr, target): Check if there are two distinct elements in the array whose sum equals the target number. Args: arr (list of int): The list of integers. target (int): The target sum. Returns: bool: True if there are two distinct elements whose sum equals the target, False otherwise. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"Given an integer `n`, your task is to determine the minimum number of operations required to reduce `n` to 1. You can perform either of the following operations on `n` in each step: 1. If `n` is divisible by 2, divide `n` by 2. 2. If `n` is divisible by 3, divide `n` by 3. 3. Subtract 1 from `n`. Implement the function `reduce_to_one(n)` which takes an integer `n` as input and returns the minimum number of steps required to reduce `n` to 1. Examples: ```python reduce_to_one(10) # should return 3 (10 -> 9 -> 3 -> 1) reduce_to_one(15) # should return 4 (15 -> 14 -> 7 -> 6 -> 1) reduce_to_one(1) # should return 0 ``` Constraints: - `1 <= n <= 10^6` **Note**: You may consider using a dynamic programming approach to solve this problem efficiently.","solution":"def reduce_to_one(n): Returns the minimum number of steps required to reduce n to 1. # Initialize a list to store the minimum steps required for each number dp = [0] * (n + 1) # Loop from 2 to n since dp[1] is already 0 (base case) for i in range(2, n + 1): # Start with the step of subtracting one min_steps = dp[i - 1] # If divisible by 2, consider the minimum steps for i//2 if i % 2 == 0: min_steps = min(min_steps, dp[i // 2]) # If divisible by 3, consider the minimum steps for i//3 if i % 3 == 0: min_steps = min(min_steps, dp[i // 3]) # Add 1 to the minimum steps found to cover the current step dp[i] = min_steps + 1 return dp[n]"},{"question":"In an attempt to curb network congestion, a network administrator needs to analyze the load on various network routers. Each router has a unique identifier and maintains a list of users connected to it. The network administrator wants to find the router with the maximum number of users connected. If multiple routers have the same maximum number of users, the router with the highest identifier should be selected. Write a program that takes a list of routers, each with its identifier and number of users connected, and outputs the identifier of the router with the maximum load. -----Input----- The first line contains a single integer T, the number of routers. The next T lines each contain two integers: the router identifier Ri (1 ≤ Ri ≤ 1000) and the number of users Ui (0 ≤ Ui ≤ 10000) connected to the router. -----Output----- Output the identifier of the router with the maximum number of users. If there are multiple such routers, output the one with the maximum identifier. -----Example----- Input: 5 1 50 2 40 3 60 4 60 5 45 Output: 4","solution":"def find_router_with_max_load(router_data): Given a list of tuples with router identifiers and the number of users connected, return the identifier of the router with the maximum number of users. If multiple routers have the same maximum number of users, return the one with the highest identifier. :param router_data: list of tuples with each tuple in the form (router_identifier, users_connected) :return: identifier of the router with the maximum load max_users = -1 max_router_id = -1 for router_id, user_count in router_data: if user_count > max_users or (user_count == max_users and router_id > max_router_id): max_users = user_count max_router_id = router_id return max_router_id"},{"question":"Andy is working on a photo album project where he wants to maintain a sequence of pictures. He has a set of operations that allow him to add, remove, and retrieve the photos from the album. He needs a program to help him manage this album effectively. The operations in the album management system are as follows: - ADD X: Add a photo with identifier X to the end of the album. - REMOVE: Remove the last photo added to the album. - VIEW Y: Output the identifier of the Y-th photo in the album (1-based index). Initially, the album is empty. Given a sequence of T operations, help Andy perform these operations and output the results of the VIEW Y operations. -----Input----- The first line contains a single integer T, the number of operations (1 ≤ T ≤ 1000). Each of the following T lines contains one of the operations ADD X, REMOVE, or VIEW Y. - For ADD X, X is an integer identifier of the photo (1 ≤ X ≤ 1000). - For VIEW Y, Y is an integer index (1 ≤ Y ≤ number of photos in the album). -----Output----- For each VIEW operation, output the identifier of the Y-th photo in the album. If Y is greater than the current number of photos in the album, output \'ERROR\'. -----Example----- Input: 7 ADD 10 ADD 20 VIEW 1 VIEW 2 REMOVE VIEW 2 REMOVE Output: 10 20 ERROR Explanation: Initially, the album is empty. ADD 10 -> Album: [10] ADD 20 -> Album: [10, 20] VIEW 1 -> The 1st photo in the album is 10. Output: 10 VIEW 2 -> The 2nd photo in the album is 20. Output: 20 REMOVE -> Removes the last photo. Album: [10] VIEW 2 -> There is no 2nd photo in the album. Output: ERROR REMOVE -> Removes the last photo. Album: []","solution":"class PhotoAlbum: def __init__(self): self.album = [] def execute_operations(self, operations): results = [] for operation in operations: if operation.startswith(\'ADD\'): _, x = operation.split() self.add(int(x)) elif operation == \'REMOVE\': self.remove() elif operation.startswith(\'VIEW\'): _, y = operation.split() result = self.view(int(y)) results.append(result) return results def add(self, x): self.album.append(x) def remove(self): if self.album: self.album.pop() def view(self, y): if 1 <= y <= len(self.album): return self.album[y - 1] else: return \'ERROR\' def process_album_operations(T, operations): album = PhotoAlbum() results = album.execute_operations(operations) return results"},{"question":"You are given a list of unique integers and your task is to return the count of all the unique pairs (i, j) where i < j such that the absolute difference between the elements at `i` and `j` is equal to a given number `k`. ``` Example: Input: arr = [1, 5, 3, 4, 2], k = 3 Output: 2 Explanation: The pairs are (1, 4) and (2, 5) ``` All inputs will be non-negative integers and the array length will be at least 2. Good luck!","solution":"def count_unique_pairs(arr, k): Returns the count of unique pairs (i, j) where i < j and abs(arr[i] - arr[j]) == k. Args: arr : List[int] : List of unique integers k : int : The absolute difference target Returns: int : Count of such unique pairs count = 0 n = len(arr) for i in range(n): for j in range(i+1, n): if abs(arr[i] - arr[j]) == k: count += 1 return count"},{"question":"Implement a function `findPairWithSum` that accepts an array of integers (the first argument) and a target sum (the second argument). The function should return a tuple of two integers from the array that add up to the target sum. If no such pair exists, return `null`. A few cases: ``` { findPairWithSum([1, 2, 3, 4, 5], 8) -> (3, 5) // 3 and 5 add up to 8 findPairWithSum([1, 2, 3, 4, 5], 10) -> null // no pair adds up to 10 findPairWithSum([0, -1, 2, -3, 1], -2) -> (-3, 1) // -3 and 1 add up to -2 } ``` Note: If there are multiple pairs that add up to the target sum, return any one of them. The array may contain both positive and negative numbers.","solution":"def findPairWithSum(arr, target_sum): Returns a tuple of two integers from the array that add up to the target sum. If no such pair exists, returns None. seen_numbers = {} for number in arr: complement = target_sum - number if complement in seen_numbers: return (complement, number) seen_numbers[number] = True return None"},{"question":"Write a function, `arrayManipulator`, that takes two arrays as arguments. The first array contains integers, while the second array contains instructions that your function needs to execute in order to manipulate the first array. Each instruction in the second array is a string that will be one of the following commands: - `\\"add X\\"`: Add the integer X to the end of the first array. - `\\"remove\\"`: Remove the last integer from the first array. - `\\"reverse\\"`: Reverse the order of elements in the first array. - `\\"double\\"`: Double each integer in the first array. Your function should perform the commands in the order they are given and return the modified first array. If a `\\"remove\\"` command is issued on an empty array, it should simply ignore the command and continue. For example, if these arrays were passed as arguments: ```python array = [1, 2, 3] instructions = [\\"add 4\\", \\"double\\", \\"remove\\", \\"reverse\\"] ``` Your function would perform the following operations in sequence: - Add 4: [1, 2, 3, 4] - Double: [2, 4, 6, 8] - Remove: [2, 4, 6] - Reverse: [6, 4, 2] And it would return the resulting array: ```python [6, 4, 2] ```","solution":"def arrayManipulator(array, instructions): Manipulates the given array based on the list of instructions. Parameters: array (list of int): The list of integers to be manipulated. instructions (list of str): The list of instructions to manipulate the array. Returns: list of int: The manipulated array. for instruction in instructions: if instruction.startswith(\\"add\\"): # Extract the number to be added _, num_str = instruction.split() array.append(int(num_str)) elif instruction == \\"remove\\": if array: array.pop() elif instruction == \\"reverse\\": array.reverse() elif instruction == \\"double\\": array = [x * 2 for x in array] return array"},{"question":"Given a list of integers and a target value, return the indices of the two numbers such that they add up to the target value. Assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] = 2 + 7 = 9, we return [0, 1]. Example 2: Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] = 2 + 4 = 6, we return [1, 2]. Example 3: Input: nums = [3, 3], target = 6 Output: [0, 1] Explanation: Because nums[0] + nums[1] = 3 + 3 = 6, we return [0, 1]. Note: 1. 2 <= nums.length <= 10^4 2. -10^9 <= nums[i] <= 10^9 3. -10^9 <= target <= 10^9","solution":"def two_sum(nums, target): Given a list of integers and a target value, return the indices of the two numbers such that they add up to the target value. :param nums: List of integers :param target: Target value to find :return: List of two indices num_map = {} for i, num in enumerate(nums): complement = target - num if complement in num_map: return [num_map[complement], i] num_map[num] = i return []"},{"question":"You are given a string s consisting only of characters \'a\', \'b\', and \'c\'. Determine the length of the longest substring where all the characters are the same. If there are multiple substrings of the same length, return the length of any of them. Write a function to find the length of such a substring. Example 1: Input: s = \\"abcdddeeeeaabbbcd\\" Output: 4 Explanation: The longest substring where all the characters are the same is \\"eeee\\" with length 4. Example 2: Input: s = \\"abcabcabc\\" Output: 1 Explanation: All characters are distinct, so the longest substring where all the characters are the same is any single character with length 1. Example 3: Input: s = \\"aaabbbbccccc\\" Output: 5 Explanation: The longest substring where all the characters are the same is \\"ccccc\\" with length 5. Note: You may assume that the string’s length is at least 1 and does not exceed 10^4.","solution":"def longest_same_char_substring(s): Returns the length of the longest substring where all characters are the same. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length current_length = 1 if current_length > max_length: max_length = current_length return max_length"},{"question":"Given a matrix mat where each row is sorted in ascending order, find the kth smallest element in the matrix. The matrix mat has the following properties: - Each row is sorted in ascending order from left to right. - The first element of each row is greater than or equal to the last element of the previous row. You need to return the kth smallest element in the matrix. Example 1: Input: mat = [ [1, 5, 9], [10, 11, 13], [12, 13, 15] ] k = 8 Output: 13 Explanation: The elements in the matrix are [1, 5, 9, 10, 11, 12, 13, 13, 15], and the 8th smallest element is 13. Example 2: Input: mat = [ [1, 2], [3, 3] ] k = 2 Output: 2 Explanation: The elements in the matrix are [1, 2, 3, 3], and the 2nd smallest element is 2. Constraints: - n == mat.length - m == mat[i].length - 1 <= n, m <= 300 - -10^9 <= mat[i][j] <= 10^9 - 1 <= k <= n * m","solution":"def kth_smallest(mat, k): This function returns the kth smallest element in a sorted matrix where each row of the matrix is sorted in ascending order. # Flatten the matrix into a single list elements = [element for row in mat for element in row] # Sort the elements in ascending order elements.sort() # Return the kth smallest element (index k-1 because k is 1-indexed) return elements[k-1]"},{"question":"Implement a function that receives a non-negative integer n and returns the product of all the non-zero digits of n. If n contains only zeros, return 0. For example: ```python product_of_digits(123405) should return 120 because 1 * 2 * 3 * 4 * 5 = 120 product_of_digits(560) should return 30 because 5 * 6 = 30 product_of_digits(204) should return 8 because 2 * 4 = 8 product_of_digits(0) should return 0 because there are no non-zero digits ``` **Note**: You should treat the input n as a non-negative integer (i.e., n >= 0).","solution":"def product_of_digits(n): Returns the product of all non-zero digits of the non-negative integer n. If n contains only zeros, return 0. product = 1 has_non_zero_digit = False while n > 0: digit = n % 10 if digit != 0: product *= digit has_non_zero_digit = True n //= 10 if not has_non_zero_digit: return 0 return product"},{"question":"A group of friends decide to go on a treasure hunt in a mysterious forest. The forest is represented as a grid of size N x N. Each cell in the grid can either be a safe cell (\'.\') or a dangerous cell (\'#\'). Safe cells are passable, while dangerous cells are not. The friends start from the top-left corner of the grid (cell (0, 0)) and their goal is to reach the bottom-right corner of the grid (cell (N-1, N-1)). However, the friends want to make their journey as exciting as possible, so they decide they will only move through the grid downwards or to the right. Your task is to determine the number of different paths they can take to reach their goal. Note that they cannot move through any dangerous cells (\'#\'). -----Input:----- First line of the input contains a single integer T, the number of test cases. Each test case starts with an integer N, the size of the grid. The next N lines each contain N characters, where each character is either \'.\' (safe) or \'#\' (dangerous). -----Output:----- For each test case, output a single line containing the number of different paths from the top-left corner to the bottom-right corner of the grid. -----Constraints:----- 1 ≤ T ≤ 10 2 ≤ N ≤ 100 Each character in the grid is either \'.\' or \'#\'. -----Example:----- Input: 1 3 . .#. ... Output: 1 Explanation: There is only one path from (0,0) to (2,2) which is down -> down -> right -> right.","solution":"def count_paths(grid, N): # Check if start or end are blocked if grid[0][0] == \'#\' or grid[N-1][N-1] == \'#\': return 0 # Create a dp table initialized to 0 dp = [[0] * N for _ in range(N)] # Starting position dp[0][0] = 1 # Fill the dp table for i in range(N): for j in range(N): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][N-1] def solve_multiple_cases(test_cases): results = [] for case in test_cases: N = case[\\"N\\"] grid = case[\\"grid\\"] results.append(count_paths(grid, N)) return results def parse_input(input_text): data = input_text.strip().split(\\"n\\") T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) grid = [list(data[index + i + 1]) for i in range(N)] test_cases.append({\\"N\\": N, \\"grid\\": grid}) index += N + 1 return test_cases"},{"question":"Write a function `sumOfLeafNodes(root: Node)` in Python that calculates the sum of all leaf nodes in a binary tree. A leaf node is a node with no children. The `Node` class has already been implemented for you and is shown below: ```python class Node: def __init__(self, value): self.value = value self.left = None self.right = None ``` Here are some examples: Example 1: ``` Given the binary tree: 1 / 2 3 / 4 5 The function should return 11, because the leaf nodes are 2, 4, and 5, and their sum is 2 + 4 + 5 = 11. ``` Example 2: ``` Given the binary tree: 7 / 3 / 1 6 The function should return 7, because the leaf nodes are 1 and 6, and their sum is 1 + 6 = 7. ``` Your task is to implement the function `sumOfLeafNodes(root: Node) -> int` that traverses the binary tree and returns the accumulated sum of all leaf nodes. You may assume that the provided tree is always valid and non-empty.","solution":"class Node: def __init__(self, value): self.value = value self.left = None self.right = None def sumOfLeafNodes(root: Node) -> int: Returns the sum of all leaf nodes. if not root: return 0 if not root.left and not root.right: return root.value sum_left = sumOfLeafNodes(root.left) sum_right = sumOfLeafNodes(root.right) return sum_left + sum_right"},{"question":"You are given an array `arr` that represents the prices of a stock on different days. Each element in the array represents the price of the stock on a particular day. You are also given an integer `k` that represents the maximum number of transactions you can make. A transaction consists of buying one share of the stock on one day and selling it on a later day. You need to determine the maximum profit you can achieve if you complete at most `k` transactions. Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy it again). Return the maximum profit you can achieve from at most `k` transactions. If no profit can be made, return 0. Example 1: Input: arr = [3,2,6,5,0,3], k = 2 Output: 7 Explanation: Transaction 1: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6 - 2 = 4 Transaction 2: Buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3 - 0 = 3 Total Profit = 4 + 3 = 7 Example 2: Input: arr = [2,4,1], k = 2 Output: 2 Explanation: Transaction 1: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4 - 2 = 2 Total Profit = 2 Example 3: Input: arr = [1,2,3,4,5], k = 3 Output: 4 Explanation: Transaction 1: Buy on day 1 (price = 1) and sell on day 2 (price = 2), profit = 2 - 1 = 1 Transaction 2: Buy on day 2 (price = 2) and sell on day 3 (price = 3), profit = 3 - 2 = 1 Transaction 3: Buy on day 3 (price = 3) and sell on day 4 (price = 4), profit = 4 - 3 = 1 Total Profit = 1 + 1 + 1 = 3 Example 4: Input: arr = [7,6,4,3,1], k = 1 Output: 0 Explanation: In this case, no transaction is done, i.e., max profit = 0. Constraints: - 0 <= k <= 100 - 0 <= arr.length <= 1000 - 0 <= arr[i] <= 1000","solution":"def max_profit_with_k_transactions(arr, k): Function to calculate the maximum profit with at most k transactions. if not arr or k == 0: return 0 n = len(arr) # If k >= n // 2, then it is same as unlimited transactions. if k >= n // 2: return sum(max(arr[i] - arr[i - 1], 0) for i in range(1, n)) # dp[i][j] represents the maximum profit up to day j with at most i transactions dp = [[0] * n for _ in range(k + 1)] for i in range(1, k + 1): max_diff = -arr[0] for j in range(1, n): dp[i][j] = max(dp[i][j - 1], arr[j] + max_diff) max_diff = max(max_diff, dp[i - 1][j] - arr[j]) return dp[k][n - 1]"},{"question":"Lena loves numbers and recently discovered an interesting property of palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. She wants to explore the sum of all palindromic numbers within a given range [A, B]. You are Lena\'s friend, and you want to help her in solving this problem. You are given multiple test cases. For each test case, given the range [A, B], calculate the sum of all palindromic numbers within this inclusive range. Output the sum for each test case. ----Input:---- - The first line contains T, the number of test cases. - Each test case is described by a single line containing two space-separated integers A and B. ----Output:---- For each test case, print a single line containing the sum of all palindromic numbers in the range [A, B]. ----Constraints:---- - 1 ≤ T ≤ 10^5 - 1 ≤ A ≤ B ≤ 10^6 ----Sample Input:---- 2 1 10 100 150 ----Sample Output:---- 45 1251 ----Explanation:---- For the first test case, palindromic numbers between 1 and 10 are 1, 2, 3, 4, 5, 6, 7, 8, 9. Their sum is 45. For the second test case, palindromic numbers between 100 and 150 are 101, 111, 121, 131, 141. Their sum is 605.","solution":"def is_palindromic(n): Check if the number n is a palindromic number. s = str(n) return s == s[::-1] def sum_palindromic_numbers_in_range(A, B): Calculate the sum of all palindromic numbers within the inclusive range [A, B]. return sum(n for n in range(A, B+1) if is_palindromic(n)) def process_test_cases(test_cases): Process multiple test cases and return the results as a list. results = [] for A, B in test_cases: results.append(sum_palindromic_numbers_in_range(A, B)) return results"},{"question":"You are given a string S consisting of lowercase letters. You need to check if the string can be rearranged to form a palindrome. If it can, return any one possible palindromic permutation of the string. If it cannot, return the string \\"IMPOSSIBLE\\". -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each of the next T lines contains a single string S. -----Output----- For each test case, print a single line containing one palindromic permutation of the given string or \\"IMPOSSIBLE\\" if such a permutation does not exist. -----Constraints----- - 1 le T le 10 - 1 le |S| le 100 - S contains only lowercase English letters. -----Example Input----- 4 civic ivicc hello aaaaaaaaaa -----Example Output----- civic icvci IMPOSSIBLE aaaaaaaaaa","solution":"from collections import Counter def can_form_palindrome(s): count = Counter(s) odd_count = 0 for freq in count.values(): if freq % 2 != 0: odd_count += 1 if odd_count > 1: return \\"IMPOSSIBLE\\" half_palindrome = [] middle_char = [] for char, freq in count.items(): if freq % 2 != 0: middle_char.append(char) half_palindrome.append(char * (freq // 2)) first_half = \'\'.join(half_palindrome) palindromic_permutation = first_half + \'\'.join(middle_char) + first_half[::-1] return palindromic_permutation def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"A security firm uses a watchdog robot that patrols a straight corridor. There are several security cameras installed along this corridor, and each camera sends a signal when it detects movement. The watchdog robot needs to verify the security in the corridor by visiting each of the positions where the cameras are installed. However, the robot can only move in a straight line back and forth across the corridor. Given the corridor structure and the positions of the cameras, determine the minimum distance the robot must travel to verify all camera positions starting from the initial position at position 0. -----Input----- The first line contains a single integer T representing the number of test cases. Each test case consists of two lines: - The first line contains an integer N (1 <= N <= 50) representing the number of camera positions. - The second line contains N integers separated by spaces, each representing a camera position on the corridor relative to the starting position (0 <= position <= 100). -----Output----- For each test case, output the minimum distance the watchdog robot must travel to visit all camera positions. -----Constraints:----- 1 <= T <= 100 1 <= N <= 50 0 <= position <= 100 -----Example:----- Input: 2 3 5 2 8 4 1 3 7 9 Output: 12 8","solution":"def min_distance_to_verify_cameras(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] # number of camera positions camera_positions = sorted(test_cases[i][1]) # sorted positions of cameras min_distance = camera_positions[-1] - camera_positions[0] results.append(2 * min_distance) return results"},{"question":"Task Create a function that, given a list of integers, returns a boolean indicating whether there exists a pair of numbers in the list whose sum is equal to a given target value. # Example For `numbers = [3, 5, -4, 8, 11]` and `target = 7`, the output should be `true` because `3 + 4 = 7`. For `numbers = [1, 2, 3, 4, 5]` and `target = 10`, the output should be `false` because no two numbers sum up to 10. # Input/Output - `[input]` array of integers `numbers` A list of integers, could be positive, negative or zero. - `[input]` integer `target` The target sum value to check for in the list. - `[output]` a boolean value `true` if there exists a pair of integers in the list that sums up to the given target value, `false` otherwise.","solution":"def has_pair_with_sum(numbers, target): Returns True if there exist two distinct elements in \'numbers\' that add up to \'target\', otherwise False. seen_numbers = set() for num in numbers: complement = target - num if complement in seen_numbers: return True seen_numbers.add(num) return False"},{"question":"# Task Given a list of integers, your task is to rearrange the list such that all the negative numbers appear before all the positive and zero numbers, while maintaining the relative order of both the negative and the non-negative numbers. Write a function that takes in one parameter, a list of integers, and returns a list where all the negative numbers appear before all the non-negative numbers, maintaining the original relative order. # Example For the input list `[-1, 2, -3, 4, -5, 6, 0]`, the output should be `[-1, -3, -5, 2, 4, 6, 0]`. For the input list `[4, -2, -9, 0, 5, 1]`, the output should be `[-2, -9, 4, 0, 5, 1]`. # Input/Output `[input]` list `lst` A list of integers. `[output]` list A new list where all the negative integers appear before all the positive and zero integers, maintaining the original order within the negative and non-negative numbers respectively. # Function Signature ```python def rearrange_list(lst: list) -> list: pass ```","solution":"def rearrange_list(lst): Rearranges the list so that all negative numbers come before all non-negative numbers, maintaining the original relative order of both groups. Parameters: lst (list): A list of integers. Returns: list: A new list with all the negative numbers before all the non-negative numbers. negative = [x for x in lst if x < 0] non_negative = [x for x in lst if x >= 0] return negative + non_negative"},{"question":"You have a string composed of lowercase and uppercase letters. Your task is to rearrange the letters of the string in such a way that no two adjacent characters are the same. If such an arrangement is not possible, return an empty string. For example, given the string \\"aab\\", the output can be \\"aba\\". Given \\"aaab\\", the output should be \\"\\" since no arrangement exists where no two adjacent characters are the same. # Input - A single string `s` of length `n` where `1 <= n <= 500`. # Output - A rearranged string where no two adjacent characters are the same or an empty string if no such arrangement is possible. # Example ```python rearrange_string(\\"aab\\") == \\"aba\\" rearrange_string(\\"aaab\\") == \\"\\" ``` # Note: You may assume the input string contains only letters from `a` to `z` and `A` to `Z`. Your rearranged string should maintain the original case of the letters.","solution":"import heapq from collections import Counter def rearrange_string(s): # Count the frequency of each character freq_counter = Counter(s) max_heap = [(-freq, char) for char, freq in freq_counter.items()] heapq.heapify(max_heap) # Create a max heap based on frequency # Previous character initialization prev_freq = 0 prev_char = \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If previous character frequency is not zero, push it back to max heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update the frequency and previous character prev_freq = freq + 1 prev_char = char rearranged = \'\'.join(result) # If resulting string length doesn\'t match original string length, return empty string if len(rearranged) != len(s): return \'\' return rearranged"},{"question":"Create a function that helps a bookstore manager to prepare for upcoming book sales. The function should take two parameters: an integer representing the total budget for new book purchases and an array of dictionaries where each dictionary represents a book. Each dictionary contains the following key-value pairs: \\"title\\" (a string of the book title) and \\"price\\" (an integer of the book\'s price). Your function should return a list of titles of the books that can be bought within the given budget. The titles in the returned list should be sorted in alphabetical order. If no books can be purchased within the budget, return an empty list. Example usage: ```python budget = 50 books = [ {\\"title\\": \\"The Catcher in the Rye\\", \\"price\\": 10}, {\\"title\\": \\"To Kill a Mockingbird\\", \\"price\\": 20}, {\\"title\\": \\"1984\\", \\"price\\": 15}, {\\"title\\": \\"The Great Gatsby\\", \\"price\\": 10}, {\\"title\\": \\"Moby Dick\\", \\"price\\": 25} ] prepare_books_for_sale(budget, books) ``` Output: ```python [\'1984\', \'The Catcher in the Rye\', \'The Great Gatsby\'] ```","solution":"def prepare_books_for_sale(budget, books): Returns a list of book titles that can be bought within the given budget. Titles are sorted in alphabetical order. :param budget: int, the total budget for new book purchases :param books: list of dicts, each dict contains \\"title\\" (str) and \\"price\\" (int) :return: list of str, titles of the books that can be bought within the budget affordable_books = [book[\'title\'] for book in books if book[\'price\'] <= budget] return sorted(affordable_books)"},{"question":"# Description You are given a list of integers representing the prices of different products. Your task is to determine the highest possible value of a product you can buy without exceeding a given budget. You can only buy one product. # Example Given the list of prices `[90, 100, 85, 130, 70]` and a budget of `100`: * The products can be bought are priced at `90`, `100`, and `85`. * The highest value product you can buy without exceeding the budget is `100`. So, `highest_affordable_product([90, 100, 85, 130, 70], 100)` should return `100`. # Notes * If no products can be bought within the given budget, return `-1`. * The list of prices will contain at least one price. * Assume prices are positive integers. * The budget is also a positive integer.","solution":"def highest_affordable_product(prices, budget): Returns the highest possible value of a product you can buy without exceeding the budget. Parameters: prices (list of int): List of product prices. budget (int): The maximum available budget. Returns: int: The highest product price within the budget, or -1 if no such product exists. affordable_prices = [price for price in prices if price <= budget] return max(affordable_prices, default=-1)"},{"question":"A local market needs to generate coupons for a promotion. Each coupon should be uniquely identifiable by a code that consists of uppercase English letters only. Users enter these codes into an online system to claim their reward. Your task is to determine if a given list of coupon codes contains any duplicates. -----Input----- The first line contains an integer N which denotes the number of coupon codes. The next N lines each contain a coupon code. Each code consists of uppercase English letters only. -----Output----- For each coupon code list, print \\"YES\\" if there are any duplicate codes, otherwise print \\"NO.\\" -----Constraints----- - 1 ≤ N ≤ 1000 - 1 ≤ length of each coupon code ≤ 10 -----Example----- Input: 5 ABC XYZ BAC ABC YZX Output: YES Input: 4 HELLO WORLD FOOBAR CODE Output: NO -----Explanation----- In the first example, the coupon \\"ABC\\" appears twice, hence the output is \\"YES.\\" In the second example, all coupon codes are unique, hence the output is \\"NO.\\"","solution":"def check_duplicate_coupons(N, coupons): Checks if there are any duplicate coupon codes. Parameters: N (int): The number of coupon codes. coupons (list of str): List containing N coupon codes. Returns: str: \\"YES\\" if there are duplicates, otherwise \\"NO\\". code_set = set() for code in coupons: if code in code_set: return \\"YES\\" code_set.add(code) return \\"NO\\""},{"question":"You have been tasked with creating a team of developers to work on a high-profile project. You need a single team that can handle both front-end and back-end development tasks. Each developer has a front-end skill level and a back-end skill level, both ranging from 1 to 100. You want to assign these developers to form a team where the sum of the front-end skill levels plus the sum of the back-end skill levels of the team meets or exceeds a given threshold. Write a function that determines whether a given list of developers can be combined in such a way to meet or exceed the required total skill threshold. The function should return \\"Team Formed!\\" if such a combination exists or \\"Team Not Formed!\\" otherwise. Function signature: ``` def can_form_team(developers: List[Tuple[int, int]], threshold: int) -> str: ``` Where: - `developers` is a list of tuples containing two integers, with each tuple in the form `(front_end_skill, back_end_skill)`. - `threshold` is an integer representing the total required skill level. Example: ``` developers = [(30, 40), (20, 60), (10, 100)] threshold = 220 can_form_team(developers, threshold) # Output: \\"Team Formed!\\" ``` Explanation: In the example, the sum of all front-end skills is 30 + 20 + 10 = 60, and the sum of all back-end skills is 40 + 60 + 100 = 200. The total combined skill is 60 + 200 = 260, which is greater than the threshold of 220. Therefore, the function should return \\"Team Formed!\\".","solution":"from itertools import combinations from typing import List, Tuple def can_form_team(developers: List[Tuple[int, int]], threshold: int) -> str: Determines whether a team can be formed that meets or exceeds the given skill threshold. developers: List of tuples, each containing (front_end_skill, back_end_skill) threshold: The required total skill level (sum of front-end and back-end skills) Returns \\"Team Formed!\\" if such a combination exists, otherwise \\"Team Not Formed!\\". n = len(developers) for i in range(1, n+1): for combination in combinations(developers, i): front_end_sum = sum(dev[0] for dev in combination) back_end_sum = sum(dev[1] for dev in combination) if front_end_sum + back_end_sum >= threshold: return \\"Team Formed!\\" return \\"Team Not Formed!\\""},{"question":"Write a function toCamelCase that converts a given string to camel case. Rules for converting to camel case: 1. Split the string into words by space, hyphen, or underscore. 2. The first word should be in lowercase. 3. Capitalize the first letter of each subsequent word. 4. Join them together without spaces, hyphens, or underscores. Example: \\"hello world\\" -> \\"helloWorld\\" \\"user-name\\" -> \\"userName\\" \\"convert_to_camel_case\\" -> \\"convertToCamelCase\\"","solution":"def toCamelCase(s): Converts the given string to camel case. if not s: return \\"\\" words = s.replace(\\"-\\", \\" \\").replace(\\"_\\", \\" \\").split() if not words: return \\"\\" camel_case = words[0].lower() for word in words[1:]: camel_case += word.capitalize() return camel_case"},{"question":"Your task is to implement the method **palindromeCheck** which accepts a string and returns one of the following: * \'palindrome\' - if the string is a palindrome * \'not palindrome\' - if the string is not a palindrome Reminder: A string is considered a palindrome if it reads the same backward as forward, ignoring spaces, punctuation, and capitalization. You may assume the input string is always non-empty.","solution":"def palindromeCheck(s): This function checks if the given string is a palindrome, ignoring spaces, punctuation, and capitalization. Parameters: s (str): Input string to check. Returns: str: \'palindrome\' if the string is a palindrome, \'not palindrome\' otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned_s = \'\'.join(c.lower() for c in s if c.isalnum()) # Check if the cleaned string is a palindrome if cleaned_s == cleaned_s[::-1]: return \'palindrome\' else: return \'not palindrome\'"},{"question":"Write a function that takes an array of integers and returns the length of the longest subarray that contains only even numbers. About even numbers Even numbers are integers that are divisible by 2 with no remainder. For example, 4 and 6 are even numbers because 4 % 2 and 6 % 2 both equal 0. However, 5 is not an even number because 5 % 2 equals 1. Example ```python Input: [1, 2, 4, 6, 5, 8] Output: 3 # The longest subarray of even numbers is [2, 4, 6] ``` Note: If there are no even numbers in the array, the function should return 0.","solution":"def longest_even_subarray(nums): Returns the length of the longest subarray that contains only even numbers. max_length = 0 current_length = 0 for num in nums: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Create a function that simulates the execution of a simplified **Poker Chip Tournament**. The Tournament You are tasked with writing a function that simulates an elimination-style poker chip tournament. In this tournament, each player starts with a set number of poker chips, and players take rounds to play against each other. Each round consists of a predetermined number of games, and depending on the outcome of each game, poker chips are transferred between players according to the tournament rules. By the end of a match, some players may be eliminated if their chip count drops to zero. # Game Rules * Each round will match players in pairs, and each pair play against each other for a number of games. * For every game in a round, the winner takes one chip from the loser. * If a player has zero chips, they are eliminated from the tournament. # Input & Output Specifications * **input parameters:** * `players` - a list of integers where each element represents the number of chips a player has at the beginning of the tournament. * `games_per_round` - an integer indicating the number of games played per round between each pair of players. * **output:** * A list of integers representing the number of chips each player has at the end of the tournament. If a player has been eliminated (by reaching zero chips), they should not appear in the final list. # Example ```python def poker_chip_tournament(players, games_per_round): # Your implementation here # Example players = [7, 3, 5, 2] games_per_round = 3 print(poker_chip_tournament(players)) ``` *Explanation*: - Initially, Player 1 has 7 chips, Player 2 has 3 chips, Player 3 has 5 chips, and Player 4 has 2 chips. - In the first round, Players 1 and 2 play 3 games. The winner takes 1 chip from the loser per game. After three games, Player 1 might win 2 games and lose 1 game. So Player 1 may end with 9 chips, and Player 2 ends with 1 chip. - In the same round, Players 3 and 4 may play 3 games. If Player 3 wins 3 games, Player 3 ends with 8 chips, and Player 4 ends with -1 and is eliminated. - Continue this process until all rounds are complete. Remember that the function should determine the winner of each game randomly, and handle edge cases where the number of players is odd (player without a pair does not play and advances to the next round).","solution":"import random def poker_chip_tournament(players, games_per_round): while len(players) > 1: next_round = [] for i in range(0, len(players) - 1, 2): player1_chips = players[i] player2_chips = players[i + 1] for _ in range(games_per_round): if player1_chips > 0 and player2_chips > 0: if random.choice([True, False]): # player 1 wins player1_chips += 1 player2_chips -= 1 else: # player 2 wins player1_chips -= 1 player2_chips += 1 if player1_chips > 0: next_round.append(player1_chips) if player2_chips > 0: next_round.append(player2_chips) if len(players) % 2 == 1 and players[-1] > 0: next_round.append(players[-1]) players = next_round return players"},{"question":"# The Food Delivery Service A food delivery service company operates in a city with a grid layout. The city is represented as an `n x n` grid. The company delivery person starts at the top-left corner of the grid (position (0, 0)) and needs to deliver food to the bottom-right corner (position (n-1, n-1)). However, there are some restrictions on where they can move. The delivery person can move to the right or down, but some cells may be blocked, preventing movement through those cells. The function should return the number of distinct paths from the top-left corner to the bottom-right corner of the grid. The grid is represented by a 2D list `grid` of size `n x n` where: - `0` means the cell is not blocked and can be traversed. - `1` means the cell is blocked and cannot be traversed. # Task Write a function `countPaths` that takes in an `n x n` grid and returns the number of distinct paths from the top-left corner to the bottom-right corner. # Examples ```python countPaths([[0, 0, 0], [0, 1, 0], [0, 0, 0]]) == 2 countPaths([[0, 1], [0, 0]]) == 1 countPaths([[0, 0], [1, 0]]) == 1 countPaths([[0, 1], [1, 0]]) == 0 ``` Note: Assume `n` is at most 20 in all cases.","solution":"def countPaths(grid): n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][n-1]"},{"question":"Given an array of integers representing the amount of time (in minutes) you need to complete each task, and an integer representing the total available time in minutes, determine if it\'s possible to complete all tasks within the given time limit. You can assume that you can perform tasks in any order. Example 1: Input: [3, 1, 2, 1], 6 Output: true Explanation: You can complete all tasks (3 + 1 + 2 + 1 = 7) within the available time of 6 minutes. Example 2: Input: [5, 2, 3], 8 Output: false Explanation: The total time needed for all tasks is 10 minutes, which exceeds the available time of 8 minutes. Therefore, it\'s not possible to complete all tasks within the given time limit.","solution":"def can_complete_tasks_within_time(tasks, total_time): Determines if it\'s possible to complete all tasks within the given time limit. :param tasks: List[int] - List of task durations in minutes. :param total_time: int - Total available time in minutes. :return: bool - True if it\'s possible to complete all tasks, otherwise False. return sum(tasks) <= total_time"},{"question":"Given a list of integers, your task is to rearrange the integers such that every positive integer comes before every negative integer while maintaining their original relative order within each group. Your implementation should result in a new list where all positive numbers appear before any negative numbers, without altering the sequence in which they appear. For example: ```python rearrange_list([1, -2, 3, -4, 5]) == [1, 3, 5, -2, -4] rearrange_list([-1, -3, 4, 2, -5]) == [4, 2, -1, -3, -5] rearrange_list([3, -1, -4, 2, -8, 6]) == [3, 2, 6, -1, -4, -8] rearrange_list([]) == [] rearrange_list([-3, -5, -1]) == [-3, -5, -1] rearrange_list([2, 4, 6]) == [2, 4, 6] ``` Ensure that your solution maintains the original order of appearance for both positive and negative integers as they occur in the input list.","solution":"def rearrange_list(arr): Rearranges the list such that all positive integers come before negative integers while maintaining their original relative order within each group. Parameters: arr (list of int): The list of integers to rearrange. Returns: list of int: The rearranged list with positives first and negatives after. positives = [x for x in arr if x > 0] negatives = [x for x in arr if x < 0] return positives + negatives"},{"question":"# Task You are managing a basic queue system at a store. Each customer is assigned a sequential ticket number as they arrive, starting from 1. The store also automatically assigns a priority to customers based on their ticket number every 5 customers for a special service. Customers with ticket numbers that are multiples of 5 have priority. Given the ticket number of a customer, determine if they have priority for special service. # Input/Output `[input]` integer `ticketNumber`/`ticketNumber` An integer representing the ticket number of the customer. `[output]` a boolean Return `true` if the customer with the given ticket number has priority, `false` otherwise. # Example For `ticketNumber = 9`, the output should be `false`. For `ticketNumber = 15`, the output should be `true`.","solution":"def has_priority(ticketNumber): Returns True if the customer with the given ticket number has priority, False otherwise. Parameters: - ticketNumber (int): The ticket number of the customer. Returns: - bool: True if the customer has priority, False otherwise. return ticketNumber % 5 == 0"},{"question":"You are given a string of `n` lines, each substring being `n` characters long: For example: `s = \\"abcdnefghnijklnmnop\\"` We will study another transformation of this square of strings. - Diagonal mirror: diag_mirror (or diagMirror or diag-mirror) ``` diag_mirror(s) => \\"aeimnbfjnncgkondhlp\\" ``` or printed: ``` diagonal mirror abcd --> aeim efgh bfjn ijkl cgko mnop dhlp ``` # Task: - Write these function and - high-order function `oper(fct, s)` where - fct is the function of one variable f to apply to the string `s` (fct will be diagMirror) # Examples: ``` s = \\"abcdnefghnijklnmnop\\" oper(diag_mirror, s) => \\"aeimnbfjnncgkondhlp\\" ``` # Note: The form of the parameter `fct` in `oper` changes according to the language. You can see each form according to the language in \\"Sample Tests\\". # Bash Note: The input strings are separated by `,` instead of `n`. The output strings should be separated by `r` instead of `n`. See \\"Sample Tests\\".","solution":"def diag_mirror(s): Returns the diagonal mirror of the input square string. n = s.split(\'n\') length = len(n) result = [\'\'.join([n[i][j] for i in range(length)]) for j in range(length)] return \'n\'.join(result) def oper(fct, s): Applies the function (fct) to the string (s). return fct(s)"},{"question":"Implement a function `increment_string` which takes an input string that consists of letters followed by digits, and returns the string with the digits incremented by 1. If the string does not end with digits, the function should append the digit \'1\' to the string. For example: ```python increment_string(\\"foo\\") --> \\"foo1\\" increment_string(\\"foobar23\\") --> \\"foobar24\\" increment_string(\\"foo0042\\") --> \\"foo0043\\" increment_string(\\"foo9\\") --> \\"foo10\\" increment_string(\\"foo099\\") --> \\"foo100\\" ``` **Note**: Ensure the incremented number retains leading zeros, if any.","solution":"import re def increment_string(s): Takes an input string that consists of letters followed by digits, and returns the string with the digits incremented by 1. If the string does not end with digits, the function appends the digit \'1\' to the string. match = re.search(r\'(d+)\', s) if match: number_str = match.group(0) new_number = str(int(number_str) + 1).zfill(len(number_str)) return s[:match.start()] + new_number else: return s + \'1\'"},{"question":"Environment Object Filter You are helping to develop a new game engine where various objects interact within an environment. Each object in the environment has certain properties, such as position, size, and properties that describe its interaction with other objects. You need to filter and manipulate these objects based on certain criteria. # Classes Overview You will be provided with two classes: `Environment` and `GameObject`. # Class Definitions ```python class GameObject: def __init__(self, name: str, position: tuple, size: int, properties: dict): self.name = name self.position = position # A tuple (x, y) self.size = size # Integer representing size self.properties = properties # Dictionary of properties class Environment: def __init__(self): self.objects = [] def add_object(self, obj: GameObject): self.objects.append(obj) def filter_objects(self, predicate): return [obj for obj in self.objects if predicate(obj)] def update_object(self, name: str, updates: dict): for obj in self.objects: if obj.name == name: for key, value in updates.items(): if hasattr(obj, key): setattr(obj, key, value) break ``` # Task 1. Implement a method `find_nearest_object` in the `Environment` class that takes a position `(x, y)` and returns the `GameObject` nearest to that position. If there are multiple objects at the same distance, return any one of them. 2. Implement a method `filter_by_property` in the `Environment` class that takes a property name and value, and returns a list of `GameObject`s that have the given property name with the specified value. # Example ```python # Create environment and game objects env = Environment() obj1 = GameObject(\\"tree\\", (1, 2), 10, {\\"type\\": \\"plant\\", \\"is_collidable\\": True}) obj2 = GameObject(\\"rock\\", (3, 4), 5, {\\"type\\": \\"mineral\\", \\"is_collidable\\": True}) obj3 = GameObject(\\"water\\", (0, 1), 20, {\\"type\\": \\"liquid\\", \\"is_collidable\\": False}) # Add objects to the environment env.add_object(obj1) env.add_object(obj2) env.add_object(obj3) # Find nearest object to position (2, 3) nearest = env.find_nearest_object((2, 3)) print(nearest.name) # Outputs: either \\"tree\\" or \\"rock\\" # Filter objects by property collidables = env.filter_by_property(\\"is_collidable\\", True) print([obj.name for obj in collidables]) # Outputs: [\\"tree\\", \\"rock\\"] ``` # Assumptions - The position tuple `(x, y)` contains non-negative integers. - The `objects` list in the `Environment` class will always have at least one `GameObject` when `find_nearest_object` is called. Good luck!","solution":"class GameObject: def __init__(self, name: str, position: tuple, size: int, properties: dict): self.name = name self.position = position # A tuple (x, y) self.size = size # Integer representing size self.properties = properties # Dictionary of properties class Environment: def __init__(self): self.objects = [] def add_object(self, obj: GameObject): self.objects.append(obj) def filter_objects(self, predicate): return [obj for obj in self.objects if predicate(obj)] def update_object(self, name: str, updates: dict): for obj in self.objects: if obj.name == name: for key, value in updates.items(): if hasattr(obj, key): setattr(obj, key, value) break def find_nearest_object(self, position): def distance(pos1, pos2): return ((pos1[0] - pos2[0]) ** 2 + (pos1[1] - pos2[1]) ** 2) ** 0.5 nearest_obj = min(self.objects, key=lambda obj: distance(position, obj.position)) return nearest_obj def filter_by_property(self, property_name, value): return [obj for obj in self.objects if obj.properties.get(property_name) == value]"},{"question":"Write a function that takes a string containing words and an integer `n`, and returns a modified string. Each word in the string should appear `n` times consecutively, separated by a space. If the input string is empty or `n` is less than 1, return an empty string. # Constraints: - The input string will only contain alphabetic characters and spaces. - The words in the input string can be separated by multiple spaces. - The value of `n` will be between 1 and 10. # Examples ```python repeat_words(\\"hello world\\", 2) --> \\"hello hello world world\\" repeat_words(\\"python\\", 3) --> \\"python python python\\" repeat_words(\\"open ai\\", 1) --> \\"open ai\\" repeat_words(\\"\\", 4) --> \\"\\" repeat_words(\\"code\\", 0) --> \\"\\" ``` Create the function with the following signature: ```python def repeat_words(sentence: str, n: int) -> str: ```","solution":"def repeat_words(sentence: str, n: int) -> str: Returns a modified string where each word in the sentence appears `n` times consecutively. Parameters: - sentence: str : input string containing words separated by spaces - n: int : number of times each word should be repeated Returns: - str : a modified string with each word appearing `n` times consecutively if not sentence or n < 1: return \\"\\" words = sentence.split() repeated_words = [word for word in words for _ in range(n)] return \' \'.join(repeated_words)"},{"question":"You are given a string `s` consisting of lowercase English letters. Your task is to create a function `alphabet_position` that replaces each letter in the string with its corresponding position in the alphabet (i.e., `a` = 1, `b` = 2, ..., `z` = 26). Example: ```python alphabet_position(\\"abc\\") == \\"1 2 3\\" alphabet_position(\\"hello\\") == \\"8 5 12 12 15\\" ``` Input constraints: `1 <= len(s) <= 100` Output constraints: - Each position must be space-separated. - Ignore any non-alphabet characters in the given string (if any).","solution":"def alphabet_position(s): Replaces each letter in the string with its corresponding position in the alphabet. Args: s (str): Input string consisting of lowercase English letters. Returns: str: A string of numbers where each number corresponds to the position of each letter in the input string. return \' \'.join(str(ord(char) - ord(\'a\') + 1) for char in s if char.isalpha())"},{"question":"A large corporation is conducting a test-drone simulation but they have run into an issue. The drone can carry only a limited amount of weight, and it needs to deliver packages to several distribution centers. Each package has a certain weight, and each distribution center needs a specific number of packages. The goal is to determine the minimum weight capacity the drone should have to fulfill all deliveries in the fewest number of trips. -----Input:----- - The first line contains two integers m and k representing the number of distribution centers and the maximum number of packages the drone can carry in one trip, respectively. - The second line contains an array of m integers, where each integer represents the number of packages required by each distribution center. - The third line contains an array of p integers of length k, where each integer represents the weight of the packages the drone can carry in one trip. -----Output:----- - The minimum weight capacity the drone should have to ensure all packages are delivered with the least number of trips. -----Constraints----- - 1 leq m, k leq 1000 - 1 leq number of packages per center leq 1000 - 1 leq weight of each package leq 1000 -----Sample Input:----- 3 4 10 15 20 5 6 7 8 -----Sample Output:----- 8 -----EXPLANATION:----- The drone should have a minimum weight capacity of 8 to make sure that it can carry the necessary packages in the least number of trips because the heaviest package weighs 8 units, and the drone can carry up to 4 packages per trip.","solution":"def min_weight_capacity(m, k, packages_needed, package_weights): Determines the minimum weight capacity the drone should have to ensure all packages are delivered with the least number of trips. :param m: int - number of distribution centers :param k: int - maximum number of packages the drone can carry in one trip :param packages_needed: List[int] - list of integers, each representing the number of packages required by each distribution center :param package_weights: List[int] - list of integers, each representing the weight of the packages the drone can carry in one trip :return: int - minimum weight capacity required # The minimum capacity needed is equal to the maximum weight in package_weights, # since that\'s the heaviest single package the drone could carry in one trip. return max(package_weights)"},{"question":"Write a function that will find the minimum and maximum elements in a list of integers. The function should return a tuple with two elements: the smallest integer and the largest integer from the list. If the list is empty, the function should return a tuple with two `None` values. Function Signature: ```python def find_min_max(numbers: List[int]) -> Tuple[Optional[int], Optional[int]]: # Your code here ``` # Examples: ```python find_min_max([3, 5, 1, 2, 4]) # Output: (1, 5) find_min_max([-10, 0, 10, 5]) # Output: (-10, 10) find_min_max([]) # Output: (None, None) find_min_max([7]) # Output: (7, 7) ``` # Constraints: - The list can contain any valid integer values (positive, negative, or zero). - The function should handle lists of varying lengths efficiently.","solution":"from typing import List, Tuple, Optional def find_min_max(numbers: List[int]) -> Tuple[Optional[int], Optional[int]]: Returns a tuple containing the minimum and maximum elements in a list of integers. If the list is empty, returns (None, None). if not numbers: return (None, None) return (min(numbers), max(numbers))"},{"question":"Sia loves growing different kinds of plants. She recently bought a new set of potted plants. She noticed that each plant requires a specific amount of water each day for proper growth. She wants to automate the process of watering her plants such that the total amount of water used each week is minimized while ensuring each plant gets exactly the amount of water it needs daily. Help Sia by determining the minimum total amount of water required for all her potted plants over a week. -----Input:----- - First line will contain T, the number of test cases. - Each test case contains a single line of input, an integer N, the number of plants she has. - Next line consists of N space-separated integers, representing the daily water requirement of each plant. -----Output:----- For each test case, output the minimum total amount of water required for all the plants in a week. -----Constraints:----- - 1≤T≤100 - 1≤N≤1000 - 1≤water requirement per plant≤100 -----Sample Input:----- 2 4 2 3 5 6 3 1 4 2 -----Sample Output:----- 112 49","solution":"def min_total_water(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] daily_water = test_cases[i][1] weekly_water = sum(daily_water) * 7 results.append(weekly_water) return results # Helper function to read inputs and parse them accordingly def parse_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) daily_water = list(map(int, input_lines[index + 1].split())) test_cases.append((n, daily_water)) index += 2 return t, test_cases # Example usage: # input_str = \\"2n4n2 3 5 6n3n1 4 2n\\" # t, test_cases = parse_input(input_str) # print(min_total_water(t, test_cases)) # Output: [112, 49]"},{"question":"You are given a binary string (a string consisting only of characters \'0\' and \'1\'). Your task is to determine the minimum number of operations required to make all the characters in the string the same (\'0\' or \'1\'). In one operation, you can select exactly one character of the string and change it from \'0\' to \'1\' or from \'1\' to \'0\'. Write a function `min_operations_to_unify(binary_str)` that takes a single argument: - `binary_str` (a string): The input binary string of length at least 1. The function should return an integer representing the minimum number of operations required. # Example: ```python assert min_operations_to_unify(\\"1101\\") == 2 assert min_operations_to_unify(\\"0000\\") == 0 assert min_operations_to_unify(\\"010101\\") == 3 ``` # Explanation: - For the binary string \\"1101\\", we can change two \'1\'s to \'0\'s or two \'0\'s to \'1\'s to make all characters the same. The minimum operations required are 2. - For the binary string \\"0000\\", all characters are already \'0\', so no operations are needed. - For the binary string \\"010101\\", we can change three \'1\'s to \'0\'s or three \'0\'s to \'1\'s to make all characters the same. The minimum operations required are 3. You may assume that `binary_str` contains only \'0\' and \'1\' characters.","solution":"def min_operations_to_unify(binary_str): Returns the minimum number of operations required to make all characters the same (\'0\' or \'1\') in the given binary string. Args: binary_str (str): Input binary string consisting of \'0\' and \'1\'. Returns: int: Minimum number of operations required. count_0 = binary_str.count(\'0\') count_1 = binary_str.count(\'1\') return min(count_0, count_1)"},{"question":"You are given a list of integers `nums` and an integer `k`. Your task is to write a function that finds the `k`-th largest element in the list. For example, given the list `nums = [3, 2, 1, 5, 6, 4]` and `k = 2`, the `k`-th largest element is `5`. Your function should have the following signature: ```python def find_kth_largest(nums: list, k: int) -> int: # Your code here ``` Note: 1. You may assume `k` is always valid, 1 ≤ k ≤ len(nums). 2. You should aim for an efficient solution with an average-case complexity better than `O(n log n)`, such as using a variation of the Quickselect algorithm. # Example Output ```python assert find_kth_largest([3, 2, 1, 5, 6, 4], 2) == 5 assert find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4 ``` # Additional Requirements - Do not use built-in functions that directly sort the list or extract the `k`-th largest element. - Explain your algorithm and its time complexity in comments within the code. - Consider edge cases like an empty list or invalid `k` and handle them appropriately.","solution":"def find_kth_largest(nums: list, k: int) -> int: Finds the k-th largest element in the list nums. The function uses the Quickselect algorithm, which has an average time complexity of O(n). if not nums or k < 1 or k > len(nums): raise ValueError(\\"Invalid input parameters.\\") def partition(left, right, pivot_index): pivot_value = nums[pivot_index] nums[pivot_index], nums[right] = nums[right], nums[pivot_index] store_index = left for i in range(left, right): if nums[i] < pivot_value: nums[store_index], nums[i] = nums[i], nums[store_index] store_index += 1 nums[right], nums[store_index] = nums[store_index], nums[right] return store_index def quickselect(left, right, k_smallest): if left == right: return nums[left] pivot_index = left + (right - left) // 2 pivot_index = partition(left, right, pivot_index) if k_smallest == pivot_index: return nums[k_smallest] elif k_smallest < pivot_index: return quickselect(left, pivot_index - 1, k_smallest) else: return quickselect(pivot_index + 1, right, k_smallest) # k-th largest is (len(nums) - k)-th smallest in zero-indexed return quickselect(0, len(nums) - 1, len(nums) - k)"},{"question":"Arctic Explorer has a map represented by a grid of size n times m with each cell containing a number that specifies the altitude at that point. An explorer starts at the top-left cell of the grid and aims to reach the bottom-right cell by moving only to the right or down to an adjacent cell. However, the explorer can only move if the altitude difference between the current cell and the next cell is not greater than d (absolute value of the difference is leq d). The explorer wants to find out if there is a valid path from the top-left to the bottom-right of the grid, considering the altitude constraints. For example: If the grid is: begin{bmatrix} 1 & 2 & 3 2 & 3 & 4 3 & 4 & 5 end{bmatrix} with d = 1, there is a valid path: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3). But with the grid: begin{bmatrix} 1 & 3 & 5 2 & 4 & 6 1 & 5 & 7 end{bmatrix} with d = 1, there is no valid path. Write a program to determine whether there is a valid path given the grid and the maximum allowed altitude difference d. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains three integers n, m (1 le n, m le 100) and d (0 le d le 100) — the number of rows and columns of the grid, and the maximum allowed altitude difference, respectively. Each of the next n lines contains m integers representing the altitude at that cell (0 le text{altitude} le 1000). -----Output----- For each test case print \\"YES\\" if the explorer can reach the bottom-right cell from the top-left cell by moving according to the rules, otherwise print \\"NO\\". -----Example----- Input 2 3 3 1 1 2 3 2 3 4 3 4 5 3 3 1 1 3 5 2 4 6 1 5 7 Output YES NO","solution":"def can_reach_end(grid, n, m, d): from collections import deque # Direction vectors for right and down movements directions = [(0, 1), (1, 0)] # Initialize visited matrix visited = [[False for _ in range(m)] for _ in range(n)] # Initialize queue for BFS queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() # If we reached the bottom-right cell if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: if abs(grid[x][y] - grid[nx][ny]) <= d: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\" def arctic_explorer(t, cases): results = [] for case in cases: n, m, d = case[0] grid = case[1] results.append(can_reach_end(grid, n, m, d)) return results"},{"question":"Task Write a function that takes a string as input and decrypts it. The string will be encrypted in a specific format where all alphabetical characters are shifted by 1 position in the alphabet (i.e., \'a\' becomes \'b\', \'b\' becomes \'c\', ... , \'z\' becomes \'a\'), and all digits are reversed (i.e., 0 becomes 9, 1 becomes 8, ... , 9 becomes 0). Spaces and special characters should remain unchanged. Your task is to decrypt the given string and return the original message. # Example: ``` Input: \\"Ifmmp, Xpsme! 123\\" Output: \\"Hello, World! 876\\" ``` # Note: - Only alphabetical characters and digits are altered. Spaces and punctuation marks are returned unchanged. - The input string is guaranteed to contain at least one alphabetic character or digit. - The function should be case-sensitive; \'A\' is shifted to \'B\' and \'a\' is shifted to \'b\', etc. Write the function as follows: ```python def decrypt_string(s): pass ```","solution":"def decrypt_string(s): Decrypts the encrypted string where: - all alphabetical characters are shifted by 1 position in the alphabet. - all digits are reversed (0 becomes 9, 1 becomes 8, ..., 9 becomes 0). - spaces and special characters remain unchanged. :param s: encrypted string :return: decrypted string decrypted = [] for char in s: if \'a\' <= char <= \'z\': decrypted.append(chr((ord(char) - ord(\'a\') - 1) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': decrypted.append(chr((ord(char) - ord(\'A\') - 1) % 26 + ord(\'A\'))) elif \'0\' <= char <= \'9\': decrypted.append(str(9 - int(char))) else: decrypted.append(char) return \'\'.join(decrypted)"},{"question":"# Task Given a string `s`, check whether it is possible to rearrange the characters in the string in such a way that no two adjacent characters are the same. If such a rearrangement is possible, return the rearranged string. If there are multiple solutions, return any of them. If such a rearrangement is not possible, return an empty string. # Example For `s = \\"aaabbc\\"`, the result could be `\\"ababac\\"` or any other valid rearrangement. For `s = \\"aaab\\"`, the result should be an empty string, since any rearrangement would have two adjacent `a`\'s. # Input/Output - `[input]` string `s` A string containing only lowercase letters. `1 ≤ s.length ≤ 1000` - `[output]` string A valid rearranged string where no two adjacent characters are the same, or an empty string if no such rearrangement is possible.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the string s such that no two adjacent characters are the same. If it\'s not possible, return an empty string. :param s: str :return: str if not s: return \\"\\" # Count frequency of each character char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) previous_char = None previous_count = 0 result = [] while max_heap or previous_count < 0: if max_heap: count, char = heapq.heappop(max_heap) else: return \\"\\" result.append(char) if previous_count < 0: heapq.heappush(max_heap, (previous_count, previous_char)) previous_char = char previous_count = count + 1 # Decrease count since the char was used return \'\'.join(result)"},{"question":"Alice and Bob are playing a unique game. They take turns picking cards from a deck numbered 1 through N. Alice always goes first. If at any point a player cannot pick a card that meets the criteria of the game, they lose. The game starts with Alice picking the first card, and each subsequent card must be a divisor of the previous card picked. Both players must maximize their chances of winning but also play optimally to avoid an instant loss. The player who cannot make a valid move loses the game. Write a program to determine who will win the game if both Alice and Bob play optimally. -----Input:----- The first line contains an integer T — the number of test cases in the input. Next, T test cases are given, one per line. Each test case is a pair of integers N and K. - N represents the largest number on the cards. - K represents the number Alice picks as the first card. -----Output:----- Print T answers to the test cases. In each test case, print \\"Alice\\" if she will win the game and \\"Bob\\" if he will win the game. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 10000 - 1 leq K leq N -----Sample Input:----- 2 10 2 15 3 -----Sample Output:----- Bob Alice","solution":"def winner(N, K): if K == 1: return \\"Bob\\" if K % 2 == 0: return \\"Bob\\" else: return \\"Alice\\" def find_winner(T, test_cases): results = [] for i in range(T): N, K = test_cases[i] results.append(winner(N, K)) return results"},{"question":"Task A new aquarium opens up and you\'re tasked with tracking how many fish are in each of its tanks. Every day, one of the following two events happens: either a fish is added to a tank, or a tank is completely cleaned out, which means all fish in that tank are removed. Your task is to determine the maximum number of fish in a single tank at any given day, given a series of daily events. Example Given the events: ```python events = [\'+1 5\', \'+2 8\', \'+1 3\', \'-1\', \'+2 2\'] ``` The tanks will evolve as follows: - Day 1: Tank 1 has 5 fish. - Day 2: Tank 2 has 8 fish. - Day 3: Tank 1 has 8 fish (added 3 fish to tank 1). - Day 4: Tank 1 is cleaned out (0 fish). - Day 5: Tank 2 has 10 fish (added 2 fish to tank 2). The result should be `10`. Given the events: ```python events = [\'+1 4\', \'+2 2\', \'-2\', \'+1 5\', \'+3 7\'] ``` The tanks will evolve as follows: - Day 1: Tank 1 has 4 fish. - Day 2: Tank 2 has 2 fish. - Day 3: Tank 2 is cleaned out (0 fish). - Day 4: Tank 1 has 9 fish (added 5 fish to tank 1). - Day 5: Tank 3 has 7 fish. The result should be `9`. Rules - Each event is given as a string, where the first character indicates whether it\'s an addition (`+`) or a cleaning event (`-`), followed by an integer representing the tank number (1-indexed). If it\'s an addition event, another integer is given, representing the number of fish to be added. - Assume each tank is initially empty. Input/Output - `[input]` an array of strings `events`: The daily events described above. - `[output]` an integer: The maximum number of fish in a single tank at any point throughout the events.","solution":"def max_fish(events): Determines the maximum number of fish in a single tank at any given day, given a series of daily events. Args: events (list of str): List of events in the format described in the problem. Returns: int: The maximum number of fish in a single tank at any point throughout the events. tanks = {} max_fish_in_tank = 0 for event in events: parts = event.split() action = parts[0] tank_number = int(parts[0][1:]) if action[0] == \'+\': fish_count = int(parts[1]) if tank_number in tanks: tanks[tank_number] += fish_count else: tanks[tank_number] = fish_count max_fish_in_tank = max(max_fish_in_tank, tanks[tank_number]) elif action[0] == \'-\': if tank_number in tanks: tanks[tank_number] = 0 return max_fish_in_tank"},{"question":"Implement a function that takes a string as input and returns a new string with the words rearranged in reverse order. Words are defined as sequences of non-space characters separated by spaces. Ensure that there are no leading or trailing spaces in the output, and that words are separated by a single space. For example, given the input string `\\"the sky is blue\\"`, the output should be `\\"blue is sky the\\"`.","solution":"def reverse_words(s: str) -> str: Returns a string with the words rearranged in reverse order. words = s.strip().split() return \' \'.join(words[::-1])"},{"question":"Consider you are given a rectangular grid of n rows and m columns. Each cell of the grid either contains a wall (\'#\') or is empty (\'.\'). You can move from one cell to another if they share an edge and both cells are empty, but you cannot pass through walls. You are given a starting point (sx, sy) and an ending point (ex, ey). Your task is to find the minimum number of steps required to move from the starting point to the ending point. If there is no valid path from the start to the end, return -1. **Input:** - The first line contains two integers, n and m (1 ≤ n, m ≤ 100), the number of rows and columns respectively. - The next n lines contain the grid, each line having m characters (either \'#\' or \'.\'). - The last line contains four integers, sx, sy, ex, ey (1 ≤ sx, sy, ex, ey ≤ n, m), representing the starting and ending coordinates. **Output:** - Print the minimum number of steps required to reach the ending point from the starting point. If it\'s impossible, print -1. **Example:** ``` Input: 5 5 ..... .#. .#.#. .#. ..... 1 1 5 5 Output: 8 ``` In this example, the grid is 5x5, the starting point is at (1, 1) and the ending point is at (5, 5). A valid path of 8 steps exists from the start to the end.","solution":"from collections import deque def min_steps(n, m, grid, sx, sy, ex, ey): Returns the minimum number of steps required to move from the start (sx, sy) to end (ex, ey). If there is no valid path, return -1. # Convert to zero-indexed sx, sy, ex, ey = sx-1, sy-1, ex-1, ey-1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # BFS queue and visited set queue = deque([(sx, sy, 0)]) # (current_x, current_y, current_steps) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (ex, ey): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"You are given an array of integers representing the number of pages in n books. You need to distribute these books among k students in such a way that each student gets a contiguous segment of the books. The goal is to minimize the maximum number of pages that a student can receive. For example, consider the array of books `[10, 20, 30, 40]` and k = 2 students. One optimal way to distribute is to make the first student take the first two books (total of 30 pages) and the second student take the last two (total of 70 pages). In this case, the maximum pages a student gets is 70. Your task is to write a function to find the optimal way to distribute the books. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of books. The second line contains n integers a_i (1 le a_i le 10^9) — the number of pages in each book. The third line contains an integer k (1 le k le n) — the number of students. It is guaranteed that the sum of all elements of a_i in the input does not exceed 10^9. -----Output----- Print one integer — the minimum possible value of the maximum number of pages assigned to a student. -----Example----- Input 4 10 20 30 40 2 Output 60 -----Note----- In the given example, the book distribution would be `[10, 20, 30]` to one student and `[40]` to another. The maximum number of pages any student gets is 60.","solution":"def is_possible(pages, n, k, max_pages): student_count = 1 current_sum = 0 for page in pages: current_sum += page if current_sum > max_pages: student_count += 1 current_sum = page if student_count > k: return False return True def find_min_max_pages(n, pages, k): low, high = max(pages), sum(pages) result = high while low <= high: mid = (low + high) // 2 if is_possible(pages, n, k, mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"An e-commerce website maintains a sales log where each entry records the date of the sale and the product ID. They want to analyze product trends by calculating the total sales each product had in a given period. Write a function `productSales` that takes in a list of sales records and a date range (start and end date), and returns a dictionary where the keys are product IDs and the values are the total sales for that product in the given period. Each sales record is represented as a tuple with three elements: a string representing the date of the sale in `YYYY-MM-DD` format, an integer representing the product ID, and an integer representing the number of items sold in that sale. The input list is guaranteed to be non-empty, with valid dates and positive integer values for product IDs and item counts. The date range is inclusive, and you can assume that the start date is less than or equal to the end date. Example 1: ``` sales_log = [(\\"2023-01-20\\", 101, 5), (\\"2023-02-10\\", 102, 3), (\\"2023-03-15\\", 101, 2), (\\"2023-03-20\\", 103, 1)] start_date = \\"2023-02-01\\" end_date = \\"2023-03-31\\" productSales(sales_log, start_date, end_date) ``` Output: ``` { 101: 2, 102: 3, 103: 1 } ``` Example 2: ``` sales_log = [(\\"2023-01-01\\", 101, 10), (\\"2023-01-02\\", 101, 5), (\\"2023-01-03\\", 102, 8), (\\"2023-01-04\\", 103, 6), (\\"2023-01-05\\", 101, 7)] start_date = \\"2023-01-01\\" end_date = \\"2023-01-03\\" productSales(sales_log, start_date, end_date) ``` Output: ``` { 101: 15, 102: 8 } ``` Note: - The function should ignore sales records outside the provided date range. - The product IDs should be included in the dictionary only if they have sales within the given date range.","solution":"from datetime import datetime def productSales(sales_log, start_date, end_date): Calculates the total sales each product had in a given date range. :param sales_log: List of tuples where each tuple contains a date (YYYY-MM-DD), product ID, and the number of items sold. :param start_date: String representing the start of the date range in YYYY-MM-DD format. :param end_date: String representing the end of the date range in YYYY-MM-DD format. :return: Dictionary where keys are product IDs and values are the total sales for that product in the given period. start = datetime.strptime(start_date, \'%Y-%m-%d\') end = datetime.strptime(end_date, \'%Y-%m-%d\') sales_dict = {} for sale_date_str, product_id, count in sales_log: sale_date = datetime.strptime(sale_date_str, \'%Y-%m-%d\') if start <= sale_date <= end: if product_id in sales_dict: sales_dict[product_id] += count else: sales_dict[product_id] = count return sales_dict"},{"question":"Write a function to find the smallest prime number greater than a given number N. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, print the smallest prime number greater than N. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 10^6 -----Sample Input:----- 3 5 10 15 -----Sample Output:----- 7 11 17 -----Explanation:----- For 1) The smallest prime number greater than 5 is 7. For 2) The smallest prime number greater than 10 is 11. For 3) The smallest prime number greater than 15 is 17.","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_prime_greater_than(N): Returns the smallest prime number greater than N. candidate = N + 1 while not is_prime(candidate): candidate += 1 return candidate def process_test_cases(input_data): Processes multiple test cases and returns their results. T, *cases = map(int, input_data.strip().split()) results = [] for N in cases: results.append(smallest_prime_greater_than(N)) return results"},{"question":"You are tasked with determining the product of the first `n` Fibonacci numbers. Fibonacci Sequence: \\"a series of numbers in which each number (Fibonacci number) is the sum of the two preceding ones, usually starting with 0 and 1.\\" ``` 0, 1, 1, 2, 3, 5, 8, 13, 21, ... ``` For example, if `4` is given, the first four Fibonacci numbers are 0, 1, 1, 2 and their product is `0 * 1 * 1 * 2 = 0`. e.g., If `6` is given, the first six Fibonacci numbers are 0, 1, 1, 2, 3, 5 and their product is `0 * 1 * 1 * 2 * 3 * 5 = 0` (due to the multiplication by 0). But for the first positive Fibonacci numbers (i.e., starting from the first `1`): if `6` is given, you consider `1, 1, 2, 3, 5, 8` and the product is `1 * 1 * 2 * 3 * 5 * 8 = 240`. If a negative number is given, return `0` as Fibonacci numbers cannot be negative.","solution":"def fibonacci_product(n): Returns the product of the first positive n Fibonacci numbers. If n is negative, return 0. if n <= 0: return 0 # Starting Fibonacci sequence from 1th element as 1, 2th element as 1 fib_sequence = [1, 1] for i in range(2, n): fib_sequence.append(fib_sequence[-1] + fib_sequence[-2]) # Calculate product of the first n positive Fibonacci numbers product = 1 for num in fib_sequence[:n]: product *= num return product"},{"question":"In a team\'s sprint planning meeting, the lead developer assigns tasks based on the priority levels and time estimates. Each task has a priority level (higher value indicates higher priority) and a time estimate in hours. The developer works on tasks in the order of their priority, starting from the highest priority and continuing until all tasks are completed or there are no more working hours left in the sprint. Write a function `assign_tasks(tasks, hours)` where `tasks` is a list of tuples, with each tuple containing an integer as the priority and an integer as the time estimate (e.g., `[(3, 2), (5, 4), (2, 2)]`), and `hours` is the total number of hours available in the sprint. The function should return a list of tasks that can be completed within the given hours, in the order in which they will be worked on. If two tasks have the same priority level, the one with the lower time estimate should be prioritized. If they have the same priority and time estimate, maintain their original order from the input list. Note: If the list of tasks is empty or the total hours are less than 1, return an empty list.","solution":"def assign_tasks(tasks, hours): This function takes a list of tasks and available hours, and assigns the most prioritized tasks that can be done within those hours. tasks: list of tuples, where each tuple (priority, time). hours: int, total number of hours available in the sprint. Returns a list of tasks (the same tuple format) that can be completed within the given hours, ordered by priority and time estimate. if not tasks or hours < 1: return [] # Sort tasks by priority (descending) and time estimate (ascending) sorted_tasks = sorted(tasks, key=lambda x: (-x[0], x[1])) assigned_tasks = [] remaining_hours = hours for task in sorted_tasks: if task[1] <= remaining_hours: assigned_tasks.append(task) remaining_hours -= task[1] return assigned_tasks"},{"question":"Write a function called `merge_and_sort` that takes two lists of integers as its arguments. The function should merge the two lists into a single list, remove all duplicate values, and then sort the remaining values in descending order. Examples ```python merge_and_sort([1, 3, 5, 7], [2, 4, 6, 8]) # -> [8, 7, 6, 5, 4, 3, 2, 1] merge_and_sort([4, 1, 4, 2], [3, 6, 1]) # -> [6, 4, 3, 2, 1] merge_and_sort([16, 4, 7, 14], [12, 8, 7, 3, 14]) # -> [16, 14, 12, 8, 7, 4, 3] ``` # Constraints - The function should return a new list and not modify the input lists. - The input lists can contain any number of elements, but fewer than 10,000 in total. - The integers in the input lists will always be non-negative.","solution":"def merge_and_sort(list1, list2): Merges two lists into a single list, removes duplicates, and sorts in descending order. Args: list1 (list): The first list of integers. list2 (list): The second list of integers. Returns: list: The merged, deduplicated, and sorted list in descending order. merged_list = list1 + list2 unique_list = list(set(merged_list)) sorted_list = sorted(unique_list, reverse=True) return sorted_list"},{"question":"The town is preparing for an annual coding festival, and one of the main events is a maze solving competition. All participants have been given a rectangular grid representing a maze. Each cell in the grid is either an obstacle (\'X\') or free space (\'.\'). The goal is to find the shortest path from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) without passing through obstacles. If no such path exists, the participant should report that it is impossible. Write a program to help participants solve the maze. # Input: - The first line of input contains a single integer t (1≤t≤50) — the number of test cases. - Each test case starts with two integers n and m (1≤n,m≤100) representing the dimensions of the maze grid. - The next n lines each contain a string of length m consisting of \'X\' and \'.\' representing the maze. # Output: - For each test case, output either: - The length of the shortest path from (0,0) to (n-1,m-1) in a single line. OR - \\"IMPOSSIBLE\\" if no such path exists. # Constraints: - The cell (0,0) and the cell (n-1,m-1) will always be free spaces (\'.\'). # Sample Input: 2 5 5 ..... .X.X. ..... .X.X. ..... 3 3 .X. XXX .X. # Sample Output: 8 IMPOSSIBLE","solution":"from collections import deque def shortest_path_maze(t, test_cases): Solves the maze problem finding the shortest path from (0,0) to (n-1,m-1). Parameters: t (int): number of test cases test_cases (list): list of tuples where each tuple is (n, m, grid) n (int): number of rows in the grid m (int): number of columns in the grid grid (list): n x m grid representation of the maze where \'X\' is an obstacle and \'.\' is a free space Returns: list: list of results for each test case, where the result is either length of the shortest path or \\"IMPOSSIBLE\\" if no path exists results = [] for case in test_cases: n, m, grid = case queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, down, left, right def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' and (x, y) not in visited found = False while queue and not found: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): results.append(dist) found = True break for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) if not found: results.append(\\"IMPOSSIBLE\\") return results # Example usage: # t = 2 # test_cases = [ # (5, 5, [\\".....\\", \\".X.X.\\", \\".....\\", \\".X.X.\\", \\".....\\"]), # (3, 3, [\\".X.\\", \\"XXX\\", \\".X.\\"]) # ] # print(shortest_path_maze(t, test_cases)) # Output: [8, \\"IMPOSSIBLE\\"]"},{"question":"Dr. Chan is working on a research project involving prime numbers. He has a machine that can conduct multiple experiments in parallel as long as the numbers used in these experiments are \\"scientifically distinct.\\" Numbers are scientifically distinct if they share no common factors other than 1 - in other words, they are pairwise coprime. Dr. Chan has a list of n distinct numbers and he wants to maximize the number of experiments he can run simultaneously while ensuring the numbers used are scientifically distinct. # Problem Given an integer n (number of distinct numbers) and a list a of n distinct integers, help Dr. Chan determine the largest number of experiments he can run simultaneously such that all the chosen numbers are pairwise coprime. # Input - The first line of input contains a single integer T denoting the number of test cases. - The first line of each test case contains a single integer n. - The second line of each test case contains n space-separated integers denoting the list a of distinct numbers. # Output For each test case: - Print a single integer representing the maximum number of pairwise coprime numbers that can be chosen from the list for each test case. # Constraints - 1 leq T leq 10 - 1 leq n leq 10^5 - 1 leq a[i] leq 10^9 # Example Input ``` 2 5 3 5 7 11 13 4 6 10 15 21 ``` # Example Output ``` 5 2 ``` # Explanation In the first test case: - All the provided numbers (3, 5, 7, 11, 13) are primes and hence, pairwise coprime. - Therefore, the maximum number of experiments Dr. Chan can run simultaneously is 5. In the second test case: - The numbers 6, 10, 15, and 21 share common factors. For example, 6 and 10 share common factor 2, 10 and 15 share common factor 5, etc. - After examining the pairs, we can choose at most 2 pairwise coprime numbers, such as 6 and 21.","solution":"from math import gcd from functools import reduce from itertools import combinations def gcd_pairs(numbers): Calculate the gcd of each pair in list of numbers. return all(gcd(a, b) == 1 for a, b in combinations(numbers, 2)) def max_pairwise_coprime_subset(a): Return the size of largest subset of a such that all elements are pairwise coprime. n = len(a) subsets = [] # Iterate over all possible subsets for i in range(1, 1 << n): subset = [a[j] for j in range(n) if i & (1 << j)] if gcd_pairs(subset): subsets.append(subset) return max(len(subset) for subset in subsets) if subsets else 0 def solve(T, test_cases): results = [] for i in range(T): n, a = test_cases[i] result = max_pairwise_coprime_subset(a) results.append(result) return results"},{"question":"Description Alice loves playing word games, and her favorite one involves arranging letters into words and scoring points based on specific rules. This time, Alice wants to create a word game where each letter has a certain value, and the score is the sum of all letter values in the word. However, there is a twist: if a letter appears more than once in the word, its value is multiplied by the number of occurrences. For example, the word \\"bob\\" consists of two \'b\'s and one \'o\'. If the value of \'b\' is 2 and the value of \'o\' is 3, the total score for \\"bob\\" would be (2*2 + 3*1) = 7 points. Task Given: - **word**: A string representing the word Alice wants to score. - **values**: A dictionary where keys are lowercase letters and values are the points each letter is worth. Return the total score of the word according to the rules described. # Input - **word**: a lowercase string of length 1 to 50 - **values**: a dictionary with lowercase letters as keys and integers (1 to 10) as values # Output - An integer representing the total score of the word. # Example ```python words = \\"apple\\" values = { \'a\': 1, \'p\': 3, \'l\': 2, \'e\': 4 } # The score for \\"apple\\" is calculated as: # \'a\' -> 1 * 1 = 1 # \'p\' -> 3 * 2 = 6 # \'l\' -> 2 * 1 = 2 # \'e\' -> 4 * 1 = 4 # Total score = 1 + 6 + 2 + 4 = 13 print(score_word(word, values)) # Output should be 13 ```","solution":"def score_word(word, values): Calculate the total score of a word based on the values of the letters and the rules given. Parameters: word (str): The word to be scored. values (dict): A dictionary where keys are lowercase letters and values are integer points. Returns: int: The total score of the word. from collections import Counter letter_counts = Counter(word) total_score = 0 for letter, count in letter_counts.items(): total_score += values[letter] * count return total_score"},{"question":"You are given a grid of letters, which represents a map. You can move up, down, left, or right but only to adjacent cells, except to cells containing \'#\', which represent obstacles. You start from a given cell and aim to reach the destination cell without hitting any obstacles. Each cell in the grid has a cost, and you aim to reach the destination with the minimum cost possible. Your task is to write a function to compute the minimum cost to reach the destination cell from the starting cell. If it is not possible to reach the destination, return -1. The cost of each cell is given by a separate grid. -----Input----- The first line of the input contains three integers, n (1 ≤ n ≤ 1000), m (1 ≤ m ≤ 1000), and k (1 ≤ k ≤ 1000000) — the number of rows in the grid, the number of columns in the grid, and the number of obstacles respectively. The next n lines each contains m characters each (either \'.\', representing a walkable cell, or \'#\', representing an obstacle). The next n lines each contains m integers each representing the cost of stepping into this cell. The last line contains four integers, sx, sy, dx, dy (1 ≤ sx, sy, dx, dy ≤ n, m) — the starting coordinates and destination coordinates respectively (1-based indexing). -----Output----- Print a single integer — the minimum cost required to reach the destination from the starting cell. If it’s impossible to reach the destination, print -1. -----Examples----- Input 3 3 2 . . . . # . # . . 1 1 1 2 0 2 3 3 3 1 1 3 3 Output 7 Input 2 2 1 . # . . 1 1 2 1 1 1 2 2 Output 3","solution":"import heapq def min_cost_path(n, m, k, grid, cost, sx, sy, dx, dy): # Coordinate transformation to 0-based indexing sx, sy, dx, dy = sx - 1, sy - 1, dx - 1, dy - 1 # Priority queue for Dijkstra\'s algorithm pq = [(0, sx, sy)] # Distance matrix initialized to infinity dist = [[float(\'inf\')] * m for _ in range(n)] dist[sx][sy] = 0 # Directions for moving up, down, left, and right directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while pq: current_cost, x, y = heapq.heappop(pq) # If reached destination cell if x == dx and y == dy: return current_cost # Explore neighbors for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\': new_cost = current_cost + cost[nx][ny] if new_cost < dist[nx][ny]: dist[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) return -1 if dist[dx][dy] == float(\'inf\') else dist[dx][dy]"},{"question":"Write a function that takes in a list of integers and returns a new list with the elements sorted in ascending order. However, any negative numbers should be placed at the beginning of the list, followed by the positive numbers including zero, all in ascending order separately within their respective groups. For example: ```python sort_numbers([-3, -1, -2, 4, 3, 0]) # returns [-3, -2, -1, 0, 3, 4] sort_numbers([1, 2, -3, -4]) # returns [-4, -3, 1, 2] ```","solution":"def sort_numbers(lst): Sorts the input list with negative numbers at the beginning and positive numbers including zero at the end, both in ascending order. negative_numbers = sorted([x for x in lst if x < 0]) non_negative_numbers = sorted([x for x in lst if x >= 0]) return negative_numbers + non_negative_numbers"},{"question":"Write the following function: ```python def find_connected_components(graph): ``` The input `graph` is represented as an adjacency list, where `graph` is a dictionary. Each key in the dictionary is a node and the corresponding value is a list of nodes to which it is directly connected. The function should return a list of sets. Each set should contain the nodes that form a connected component in the graph. Input :: Output Examples ```python find_connected_components({ 0: [1, 2], 1: [0, 3], 2: [0], 3: [1], 4: [5], 5: [4] }) # returns [{0, 1, 2, 3}, {4, 5}] find_connected_components({ 0: [2], 1: [], 2: [0], 3: [] }) # returns [{0, 2}, {1}, {3}] find_connected_components({}) # returns [] ```","solution":"def find_connected_components(graph): Returns a list of sets, each set containing nodes of a connected component in the graph. def dfs(node, visited, component): visited.add(node) component.add(node) for neighbor in graph.get(node, []): if neighbor not in visited: dfs(neighbor, visited, component) visited = set() components = [] for node in graph: if node not in visited: component = set() dfs(node, visited, component) components.append(component) return components"},{"question":"Given an array of integers and an integer k, determine if there exists a subset of the array such that the difference between the maximum and minimum elements in the subset is less than or equal to k. If such a subset exists, return the size of the largest possible subset. If no such subset exists, return -1. -----Input section----- The first line contains T, the number of test cases. Each test case consists of 2 lines. The first line contains 2 integers N and K, denoting the number of elements in the array and the maximum allowed difference between the maximum and minimum elements in the subset. The second line contains N space-separated integers, denoting the elements of the array. -----Output section----- For each test case, output the size of the largest possible subset with the given condition. If no such subset exists, output -1. -----Input constraints----- 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ K ≤ 1000 1 ≤ A[i] ≤ 10000, where A[i] denotes the i-th element of the array. -----Sample Input - 1----- 2 5 3 1 5 9 12 14 4 2 3 6 8 10 -----Sample Output - 1----- 2 2 -----Explanation - 1----- In the first test case, the largest subset with a difference of at most 3 between max and min is [1, 5] or [12, 14], so the result is 2. In the second test case, the largest subset with a difference of at most 2 between max and min is [8, 10] or [6, 8], so the result is 2.","solution":"def largest_subset_with_max_diff_k(arr, k): arr.sort() n = len(arr) max_size = 0 j = 0 for i in range(n): while j < n and arr[j] - arr[i] <= k: j += 1 max_size = max(max_size, j - i) return max_size if max_size > 0 else -1 def process_test_cases(T, test_cases): results = [] for i in range(T): n, k = test_cases[i][0] arr = test_cases[i][1] result = largest_subset_with_max_diff_k(arr, k) results.append(result) return results"},{"question":"Consider a list of integers representing the daily stock prices of a company. You are required to identify the maximum profit that can be obtained from a single buy and sell operation. You must buy the stock before you can sell it. Write a function `max_profit(prices: List[int]) -> int` that takes in a list of integers `prices`, where each integer represents the stock price on that day, and returns the maximum profit obtainable. If no profit can be made, return 0. Examples ``` max_profit([7, 1, 5, 3, 6, 4]) --> 5 max_profit([7, 6, 4, 3, 1]) --> 0 max_profit([1, 2, 3, 4, 5, 6, 7]) --> 6 max_profit([2, 4, 1]) --> 2 ``` Constraints - The input list will contain at least 2 elements and at most 10^5 elements. - Each element in the `prices` list will be an integer within the range [0, 10^4].","solution":"from typing import List def max_profit(prices: List[int]) -> int: Returns the maximum profit obtainable from a single buy and sell operation. If no profit can be made, returns 0. min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"A perfect number is a positive integer that is equal to the sum of its proper positive divisors, excluding itself. A proper divisor of a positive integer N is a positive integer less than N which divides N evenly. For example, 28 is the perfect number because its proper divisors are 1, 2, 4, 7, and 14, and 1 + 2 + 4 + 7 + 14 = 28. Given a positive integer n, write a function to find and return all perfect numbers less than or equal to n. Function Signature: def find_perfect_numbers(n: int) -> List[int]: Input - n: a positive integer (1 ≤ n ≤ 10^5) Output - A list of all perfect numbers less than or equal to n in ascending order. Example: ``` Input: 1000 Output: [6, 28, 496] Input: 5000 Output: [6, 28, 496, 8128] ```","solution":"from typing import List def find_perfect_numbers(n: int) -> List[int]: def is_perfect(number: int) -> bool: if number < 2: return False divisors_sum = 1 # Start with 1 because 1 is a divisor of every number sqrt_n = int(number**0.5) for i in range(2, sqrt_n + 1): if number % i == 0: divisors_sum += i if i != number // i: divisors_sum += number // i return divisors_sum == number perfect_numbers = [] for i in range(2, n + 1): if is_perfect(i): perfect_numbers.append(i) return perfect_numbers"},{"question":"*** Consecutive Duplicate Removal *** You will be given a string (s) consisting only of lowercase letters. Write a function that removes consecutive duplicate characters from the string, so that only one instance of each character is left when they consecutively repeat. For example: - Input: \\"aabbcc\\" Output: \\"abc\\" - Input: \\"aabbaa\\" Output: \\"aba\\" - Input: \\"abc\\" Output: \\"abc\\" Ensure that you do not use any loops in your solution. Want to enhance your string manipulation skills further? Challenge yourself with similar string problems available here: https://www.codewars.com/kata/reverse-words https://www.codewars.com/kata/replace-with-alphabet-position","solution":"import re def remove_consecutive_duplicates(s): Removes consecutive duplicate characters from the string. return re.sub(r\'(.)1+\', r\'1\', s)"},{"question":"Given a list of strings, you are required to find the string which appears most frequently. If there are multiple such strings, return the one that comes first lexicographically. For example, given the list `[\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"]`, the answer should be `\\"apple\\"` because it appears the most. However, if the list is `[\\"apple\\", \\"banana\\", \\"orange\\", \\"banana\\", \\"apple\\"]`, there are two strings that appear the same number of times (`\\"apple\\"` and `\\"banana\\"`), and the lexicographically first one is `\\"apple\\"`. Write a function `most_frequent_string(lst)` to achieve this. # Input: - `lst` - A list of strings where each string contains only lowercase alphabets and has a length from 1 to 100. - 1 ≤ len(lst) ≤ 10^5 # Output: - A single string which is the most frequent one in the list. If there are multiple strings with the highest frequency, return the lexicographically smallest one. # Examples: - `most_frequent_string([\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"apple\\"])` should return `\\"apple\\"`. - `most_frequent_string([\\"apple\\", \\"banana\\", \\"orange\\", \\"banana\\", \\"apple\\"])` should return `\\"apple\\"`. - `most_frequent_string([\\"zebra\\", \\"apple\\", \\"zebra\\", \\"apple\\"])` should return `\\"apple\\"`.","solution":"from collections import Counter def most_frequent_string(lst): Returns the most frequent string in the list. If there are multiple strings with the highest frequency, return the lexicographically smallest one. if not lst: return \\"\\" count = Counter(lst) max_freq = max(count.values()) # Get all strings that have this frequency candidates = [k for k, v in count.items() if v == max_freq] # Return the lexicographically smallest one return min(candidates)"},{"question":"# Traffic Light Intersection Let\'s simulate the behavior of vehicles at an intersection controlled by traffic lights. The intersection has four directions — north, east, south, and west — with each direction having its own traffic light. Each traffic light can either be red, yellow, or green. Vehicles in a direction can only move when their traffic light is green. # Task Create a function `traffic_lights` that takes a string input representing the traffic lights for each direction at a particular moment. The string contains four characters where each character can be \'R\', \'Y\', or \'G\', corresponding to the state of the traffic lights for the north, east, south, and west directions respectively. The function should return the maximum number of directions that can move simultaneously. # Rules 1. If a traffic light is green (\'G\') for a direction, vehicles in that direction can move. 2. If a traffic light is red (\'R\') or yellow (\'Y\'), vehicles in that direction cannot move. 3. Directions are ordered in the string as follows: north, east, south, west. # Returns Return an integer representing the maximum number of directions that can move simultaneously given the current state of the traffic lights. # Examples Example 1: ```python traffic_lights(\\"GRGR\\") => 2 ``` Explanation: - North and south lights are green. - Vehicles can move north and south simultaneously. - Maximum number of directions that can move: 2. Example 2: ```python traffic_lights(\\"YYYY\\") => 0 ``` Explanation: - All lights are yellow. - No vehicles can move. - Maximum number of directions that can move: 0. Example 3: ```python traffic_lights(\\"GYGY\\") => 2 ``` Explanation: - North and south lights are green. - Vehicles can move north and south simultaneously. - Maximum number of directions that can move: 2. Good luck and enjoy! # Series If you enjoyed this, then please try one of my other problems. Any feedback, translations, and grading of beta problems are greatly appreciated. Thank you. Maze Runner, Scooby Doo Puzzle, Driving License, Connect 4, Vending Machine, Snakes and Ladders, Mastermind, Guess Who?, Am I safe to drive?, Mexican Wave, Pigs in a Pen, Hungry Hippos, Plenty of Fish in the Pond, Fruit Machine, Car Park Escape","solution":"def traffic_lights(lights): This function takes a string input representing the state of traffic lights in four directions (north, east, south, west) and returns the maximum number of directions that can move simultaneously (i.e., the number of \'G\' in the input). Parameters: lights (str): A four-character string where each character can be \'R\', \'Y\', or \'G\' representing the state of the traffic lights for north, east, south, and west directions respectively. Returns: int: The maximum number of directions that can move simultaneously. return lights.count(\'G\')"},{"question":"Given a list of integers, write a function that finds the smallest missing positive integer (greater than 0) that is not present in the list. The function should run in O(n) time and use O(1) space (excluding the input list). For example: ```python find_smallest_missing_positive([3, 4, -1, 1]) == 2 find_smallest_missing_positive([1, 2, 0]) == 3 find_smallest_missing_positive([7, 8, 9, 11, 12]) == 1 find_smallest_missing_positive([1, 2, 3, 4, 5]) == 6 ``` To achieve the required time and space complexity, you should manipulate the array elements in place and avoid using extra storage.","solution":"def find_smallest_missing_positive(nums): n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Write a function `flattenDictionary`/`flatten_dictionary` that takes a dictionary with nested dictionaries and returns a flattened version of the dictionary where the keys are concatenated by their nesting path, separated by a dot (\'.\'). For example, ```python input_dict = { \'key1\': \'1\', \'key2\': { \'key3\': \'3\', \'key4\': { \'key5\': \'5\' } } } ``` should return ```python { \'key1\': \'1\', \'key2.key3\': \'3\', \'key2.key4.key5\': \'5\' } ```","solution":"def flatten_dictionary(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. Args: d (dict): The dictionary to flatten. parent_key (str): The base key to use when flattening (for recursive calls). sep (str): The separator to use between keys. Returns: dict: The flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dictionary(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"You are given a sequence of numbers. Your task is to determine if the sequence can become non-decreasing by modifying at most one element. A sequence is non-decreasing if for every i leq j, the element at position i is less than or equal to the element at position j. -----Input:----- - First line will contain n, number of testcases. Then the testcases follow. - Each testcase contains a single line of input, an integer k representing the number of elements in the sequence, followed by k integers representing the sequence. -----Output:----- For each testcase, output in a single line answer \\"Yes\\" if the sequence can be made non-decreasing by modifying at most one element, and \\"No\\" otherwise. -----Constraints----- - 1 leq n leq 1000 - 2 leq k leq 10^5 - -10^9 leq sequence elements leq 10^9 It is guaranteed that the sum of k across all testcases does not exceed 10^6. -----Sample Input:----- 2 5 4 2 3 4 5 4 4 2 1 3 -----Sample Output:----- Yes No","solution":"def can_be_non_decreasing_by_modifying_one(seq): count = 0 for i in range(1, len(seq)): if seq[i] < seq[i - 1]: if count == 1: return \\"No\\" count += 1 if i == 1 or seq[i] >= seq[i - 2]: seq[i - 1] = seq[i - 2] if i - 2 >= 0 else seq[i] else: seq[i] = seq[i - 1] return \\"Yes\\" def determine_sequences(sequences): results = [] for seq in sequences: results.append(can_be_non_decreasing_by_modifying_one(seq)) return results def process_input(input_data): lines = input_data.strip().split(\\"n\\") n = int(lines[0]) sequences = [] for i in range(1, n + 1): sequences.append(list(map(int, lines[i].split()[1:]))) return determine_sequences(sequences)"},{"question":"Given a list of integers representing the amount of petrol in liters available at petrol stations along a circular route and another list representing the amount of petrol required in liters to travel from one station to the next, determine the starting petrol station from which a truck can complete the entire route. Assume the truck has an unlimited petrol tank capacity. The truck starts with an empty tank and each station allows it to fill up as much petrol as needed before moving to the next station. Return the index of the starting petrol station, or -1 if it\'s not possible to complete the route. Example 1: Input: petrol = [4, 6, 7, 4], cost = [6, 5, 3, 5] Output: 1 Explanation: Start at index 1, petrol available: 6, cost to next: 5 => remaining = 1 Index 2, petrol available: 7, cost to next: 3 => remaining = 1 + 7 - 3 = 5 Index 3, petrol available: 4, cost to next: 5 => remaining = 5 + 4 - 5 = 4 Index 0, petrol available: 4, cost to next: 6 => remaining = 4 + 4 - 6 = 2 Truck completes the circle with petrol remaining. Example 2: Input: petrol = [1, 2, 3, 4], cost = [4, 4, 4, 2] Output: -1 Explanation: No starting point allows the truck to complete the route. Constraints: - petrol.length == cost.length - 1 <= petrol.length <= 100 - 0 <= petrol[i] <= 1000 - 0 <= cost[i] <= 1000","solution":"def can_complete_circuit(petrol, cost): n = len(petrol) total_petrol = total_cost = 0 tank = start_index = 0 for i in range(n): total_petrol += petrol[i] total_cost += cost[i] tank += petrol[i] - cost[i] if tank < 0: start_index = i + 1 tank = 0 if total_petrol < total_cost: return -1 return start_index"},{"question":"Given an array of integers, your task is to find the highest product you can get from three of the integers in the array. Write a function `highest_product_of_three` that takes a list of integers and returns an integer representing the highest product. # Example ```python highest_product_of_three([1, 10, 2, 6, 5, 3]) ``` This should return `300`, which is the product of `10 * 6 * 5`. # Constraints - The input array will have at least three integers. - The integers can be both positive and negative. - Your solution should have a time complexity of O(n). # Function Signature ```python def highest_product_of_three(lst: List[int]) -> int: pass ``` # Sample Input and Output ```python assert highest_product_of_three([1, 10, 2, 6, 5, 3]) == 300 assert highest_product_of_three([-10, -10, 5, 2]) == 500 assert highest_product_of_three([1, 2, 3, 4]) == 24 ```","solution":"from typing import List def highest_product_of_three(lst: List[int]) -> int: # Initialize the highest and lowest values as the first two values of the list highest = max(lst[0], lst[1]) lowest = min(lst[0], lst[1]) # Initialize the max product of two lowest and two highest numbers highest_product_of_2 = lst[0] * lst[1] lowest_product_of_2 = lst[0] * lst[1] # Initialize the max product of three numbers highest_product_of_3 = lst[0] * lst[1] * lst[2] # Traverse the list, starting from the third element for i in range(2, len(lst)): current = lst[i] # Update the highest product of three highest_product_of_3 = max( highest_product_of_3, current * highest_product_of_2, current * lowest_product_of_2 ) # Update the highest and lowest products of two values highest_product_of_2 = max( highest_product_of_2, current * highest, current * lowest ) lowest_product_of_2 = min( lowest_product_of_2, current * highest, current * lowest ) # Update the highest and lowest values highest = max(highest, current) lowest = min(lowest, current) return highest_product_of_3"},{"question":"Create a function that takes a string consisting of words and digits separated by spaces, and returns the string with all words replaced by their lengths and the digits unchanged. For the purpose of this question, a word is defined as any sequence of alphabetic characters, and a digit is any sequence of numeric characters. There will be at least one word or digit in the input string. Examples ``` \\"hello 123 world 456\\" => \\"5 123 5 456\\" \\"code 42 everyday\\" => \\"4 42 8\\"","solution":"def replace_words_with_lengths(s): Takes a string consisting of words and digits separated by spaces, and returns the string with all words replaced by their lengths and the digits unchanged. # Split the string by spaces parts = s.split() # Process each part result = [] for part in parts: if part.isdigit(): result.append(part) else: result.append(str(len(part))) # Join the parts back with spaces return \' \'.join(result)"},{"question":"# Spiral Matrix Traversal (Medium) Given a matrix of `m x n` elements (m rows, n columns), return all elements of the matrix in spiral order. # Shorter: You have to traverse a 2D matrix in a spiral manner. You get a 2D array (matrix) of integers and have to traverse it in the following order: - Start from the top-left corner. - Move right until you cannot move further. - Move down until you cannot move further. - Move left until you cannot move further. - Move up until you cannot move further. - Repeat the above four steps while ensuring that you do not traverse any element more than once. The given matrix will always be non-empty. Example: ``` Input: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` Steps: 1. Start at the position (0, 0) which is 1. 2. Move right to position (0, 1) which is 2, then to (0, 2) which is 3. 3. Move down to position (1, 2) which is 6, then to (2, 2) which is 9. 4. Move left to position (2, 1) which is 8, then to (2, 0) which is 7. 5. Move up to position (1, 0) which is 4. 6. Move right to the last unvisited position (1, 1) which is 5. Another example: ``` Input: [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] ``` Steps: 1. Start at the position (0, 0) which is 1, then move right to the end of the first row. 2. Move down to the end of the last column. 3. Move left to the start of the last row. 4. Move up to the starting position of the second column. 5. Repeat the steps and ensure not to visit any element more than once.","solution":"def spiralOrder(matrix): Returns the elements of the given matrix in spiral order. if not matrix or not matrix[0]: return [] spiral_order = [] top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): spiral_order.append(matrix[top][i]) top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): spiral_order.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): spiral_order.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): spiral_order.append(matrix[i][left]) left += 1 return spiral_order"},{"question":"**Problem Statement:** Alice loves collecting gemstones. She has a set of gemstones of various colors, each represented by a lowercase English letter. She wants to form a special set where each gemstone in the set is unique. Alice would like to know the size of the largest special set she can form using her collection. **Input:** - First line will contain integer T, number of test cases. Then T test cases follow. - Each testcase contains a single line string S representing the collection of gemstones. **Output:** For each test case, output a single line containing the size of the largest special set Alice can form. **Constraints:** - 1 leq T leq 1000 - 1 leq |S| leq 100 **Sample Input:** 3 abac aaaa abcde **Sample Output:** 3 1 5 **Explanation:** - In the first test case, Alice can form the special set {\'a\', \'b\', \'c\'} which has 3 unique gemstones. - In the second test case, the only special set possible is {\'a\'} which has 1 unique gemstone. - In the third test case, Alice can form the special set {\'a\', \'b\', \'c\', \'d\', \'e\'} which has 5 unique gemstones.","solution":"def largest_special_set_size(test_cases): Returns the size of the largest special set she can form using her collection for each test case. :param test_cases: List of strings representing the collection of gemstones for each test case. :return: List of integers representing the size of the largest special set for each test case. sizes = [] for gemstones in test_cases: unique_gemstones = set(gemstones) sizes.append(len(unique_gemstones)) return sizes"},{"question":"Calculate the Nth Prime Number Write a program to find the Nth prime number, where N is a positive integer provided by the user. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Input - A single integer N (1 ≤ N ≤ 10^4) which is the position of the prime number in the sequence of prime numbers. # Output - A single integer which is the Nth prime number. # Example Example 1 Input: ``` 6 ``` Output: ``` 13 ``` Explanation: The prime sequence is 2, 3, 5, 7, 11, 13..., thus the 6th prime is 13. Example 2 Input: ``` 10 ``` Output: ``` 29 ``` Explanation: The prime sequence is 2, 3, 5, 7, 11, 13, 17, 19, 23, 29..., thus the 10th prime is 29. # Note - You may use any method appropriate to find the prime numbers. - Ensure that your program efficiently computes the primes for larger values of N such as 10,000.","solution":"def nth_prime(n): Returns the Nth prime number. if n == 1: return 2 primes = [2] candidate = 3 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > candidate: break if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 2 return primes[-1]"},{"question":"In a certain country, there are n cities connected by roads. Each city can be represented as a point on a 2D plane with coordinates (x, y). Some cities have established telecom towers while others do not. The goal is to provide telecom coverage to all the cities using the shortest possible cable length. The cables can be laid along the roads connecting any two cities directly. Problem Given the coordinates of the cities and the status of the telecom towers, determine the minimum total length of cable required to connect all cities, ensuring that every city either has a telecom tower or is connected to at least one city with a telecom tower. # Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains the integer n (number of cities). - The second line contains a string of length n consisting of \'0\' and \'1\'. \'1\' indicates that the city has a telecom tower, \'0\' indicates it does not. - The next n lines each contain two integers xi and yi, representing the coordinates of the cities. # Output For each test case, output a single integer denoting the minimum total length of cable needed. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 1000 - -10^6 ≤ xi, yi ≤ 10^6 # Example Input ``` 2 3 100 0 0 1 0 2 0 4 0101 0 0 0 3 3 3 3 0 ``` Output ``` 2 6 ``` Explanation - In the first test case, the first city has a telecom tower. We need to connect the second and the third city to the first one for a total cable length of 1 + 1 = 2. - In the second test case, the second city has a tower, so it can cover the first and third city by laying cable lengths of 3 each, making the total cable length 6.","solution":"import math import heapq def calc_distance(x1, y1, x2, y2): return math.sqrt((x1 - x2)**2 + (y1 - y2)**2) def minimum_cable_length(n, tower_status, cities): # Using Prim\'s algorithm to calculate the Minimum Spanning Tree (MST) # List to check if the city is already in the MST or not in_mst = [False] * n # Min heap priority queue for Prim\'s algorithm min_heap = [] # Initial cost list, initializing with large values (infinity) costs = [float(\'inf\')] * n # Starting with the first city with a telecom tower for i in range(n): if tower_status[i] == \'1\': heapq.heappush(min_heap, (0, i)) costs[i] = 0 total_length = 0 while min_heap: current_cost, u = heapq.heappop(min_heap) # If the city is already in MST, skip it if in_mst[u]: continue # Include the city in MST total_length += current_cost in_mst[u] = True for v in range(n): if not in_mst[v]: distance = calc_distance(cities[u][0], cities[u][1], cities[v][0], cities[v][1]) if distance < costs[v]: costs[v] = distance heapq.heappush(min_heap, (distance, v)) return int(total_length) def solve_telecom_coverage(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] tower_status = test_cases[i][1] cities = test_cases[i][2] result = minimum_cable_length(n, tower_status, cities) results.append(result) return results # Parsing input and getting results def main(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) tower_status = lines[index + 1] cities = [] for i in range(n): x, y = map(int, lines[index + 2 + i].split()) cities.append((x, y)) test_cases.append((n, tower_status, cities)) index += 2 + n results = solve_telecom_coverage(T, test_cases) for result in results: print(result) # Example usage if __name__ == \\"__main__\\": input_text = 2 3 100 0 0 1 0 2 0 4 0101 0 0 0 3 3 3 3 0 main(input_text)"},{"question":"# Task Given an array of integers and a target sum, find the number of pairs of integers in the array that add up to the target sum. Each pair must be made of two different elements, but elements may be repeated in different pairs. # Example For `arr = [1, 2, 3, 4, 3]` and `target = 6`, the output should be `2`. ``` 1. (2, 4) 2. (3, 3) ``` For `arr = [1, 1, 1, 1]` and `target = 2`, the output should be `6`. ``` 1. (1, 1) 2. (1, 1) 3. (1, 1) 4. (1, 1) 5. (1, 1) 6. (1, 1) ``` # Input/Output - `[input]` integer array `arr` A non-empty array of integers. Constraints: `2 ≤ arr.length ≤ 100, -10^3 ≤ arr[i] ≤ 10^3` - `[input]` integer `target` The target sum for the pairs. Constraints: `-2 * 10^3 ≤ target ≤ 2 * 10^3` - `[output]` an integer Return the number of pairs of integers in the array that add up to the target sum. The pairs should be unique based on their indices but not on their values.","solution":"def count_pairs_with_sum(arr, target): Returns the number of pairs of integers in the array that add up to the target sum. Each pair must be made of two different elements, but elements may be repeated in different pairs. count = 0 n = len(arr) for i in range(n): for j in range(i+1, n): if arr[i] + arr[j] == target: count += 1 return count"},{"question":"Write a program that defines a class “Rectangle” with the methods to calculate the area and perimeter of a rectangle. The class should have two attributes, `length` and `width`, which should be initialized when an instance of the class is created. The methods to implement are: - `area`: Returns the area of the rectangle (length * width). - `perimeter`: Returns the perimeter of the rectangle (2 * (length + width)). You should also implement a method to modify the length and width of the rectangle after the object has been created. Example: rect1 = Rectangle(4, 8) print(rect1.area()) # Output: 32 print(rect1.perimeter()) # Output: 24 rect1.set_dimensions(5, 10) print(rect1.area()) # Output: 50 print(rect1.perimeter()) # Output: 30","solution":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): Returns the area of the rectangle. return self.length * self.width def perimeter(self): Returns the perimeter of the rectangle. return 2 * (self.length + self.width) def set_dimensions(self, length, width): Sets new dimensions (length and width) for the rectangle. self.length = length self.width = width"},{"question":"You have been given an array of positive integers representing the heights of individuals standing in a line. The individuals want to form a non-decreasing sequence by either removing themselves from the line or by reversing a substring (continuous subarray) of the array exactly once. Your task is to determine if it is possible to achieve this goal. -----Input----- The first line contains one integer t (1 le t le 5000) — the number of test cases. The first line of each test case contains one integer n (1 le n le 1000) — the number of individuals in the line. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the heights of the individuals in the line. -----Output----- For each test case, print \\"YES\\" if it\'s possible to form a non-decreasing sequence by either removing individuals or by reversing exactly one continuous subarray. Otherwise, print \\"NO\\". -----Example----- Input 3 5 1 3 2 4 5 4 4 3 2 1 6 1 5 3 3 4 2 Output YES YES NO -----Note----- In the first test case, you can form the sequence by reversing the subarray [3, 2] to get [1, 2, 3, 4, 5]. In the second test case, you can form the sequence by reversing the entire array to get [1, 2, 3, 4]. In the third test case, it is not possible to form a non-decreasing sequence by reversing exactly one subarray.","solution":"def can_form_non_decreasing_by_reversing_subarray(t, test_cases): def is_non_decreasing(arr): return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) results = [] for case in test_cases: n, arr = case if is_non_decreasing(arr): results.append(\\"YES\\") continue reverse_found = False for i in range(n): for j in range(i + 1, n + 1): temp_arr = arr[:i] + arr[i:j][::-1] + arr[j:] if is_non_decreasing(temp_arr): reverse_found = True break if reverse_found: break if reverse_found: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Examples for testing t = 3 test_cases = [ (5, [1, 3, 2, 4, 5]), (4, [4, 3, 2, 1]), (6, [1, 5, 3, 3, 4, 2]) ] print(can_form_non_decreasing_by_reversing_subarray(t, test_cases))"},{"question":"Write a function that takes an array of integers and a target integer. The function should return a list of all unique pairs of integers from the array that sum up to the target integer. The pairs should be sorted in ascending order. Each pair should also be in ascending order. The function should return an empty array if no such pairs exist.","solution":"def find_pairs_with_sum(arr, target): Returns a list of all unique pairs of integers from the array that sum up to the target integer. The pairs are sorted in ascending order. Each pair is also in ascending order. arr.sort() pairs = set() seen = set() for num in arr: complement = target - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(list(pairs))"},{"question":"=====Problem Statement===== You are given a string consisting of lowercase alphabets. You need to write a function to find the first non-repeating character in this string. If all characters repeat, the function should return an underscore (\'_\'). =====Function Signature===== ```python def first_non_repeating_character(s: str) -> str: ``` =====Example===== ```python first_non_repeating_character(\\"abacabad\\") -> \'c\' first_non_repeating_character(\\"abacabaabacaba\\") -> \'_\' ``` =====Input Format===== - A single string `s` consisting of lowercase alphabets. =====Constraints===== - The length of the string will be at most (10^5). =====Output Format===== - A single character that represents the first non-repeating character. If all characters repeat, return an underscore (\'_\').","solution":"def first_non_repeating_character(s: str) -> str: Returns the first non-repeating character in the string `s`. If all characters repeat, returns \'_\' (underscore). # Step 1: Create a character count dictionary char_count = {} # Step 2: Populate the character count dictionary for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Step 3: Iterate through the string to find the first non-repeating character for char in s: if char_count[char] == 1: return char # If no non-repeating character is found, return \'_\' return \'_\'"},{"question":"Shortest Path in a Grid with Obstacles In this problem, you are tasked with finding the shortest path in a grid containing obstacles. The grid is represented by a 2D matrix where cells have one of the following values: - 0: open cell that you can traverse - 1: obstacle cell that you cannot traverse You start from the top-left corner of the grid (0, 0) and your goal is to get to the bottom-right corner of the grid. You can move up, down, left, or right, but you cannot move diagonally. If it is not possible to reach the bottom-right corner, return -1. Input: - `grid` - a 2D list of integers representing the grid: ` grid = [[0, 0, 1], [0, 1, 0], [0, 0, 0]] ` Output: - an integer representing the length of the shortest path or -1 if no path exists Example: - `shortest_path([[0, 0, 1], [0, 1, 0], [0, 0, 0]])` - should return `4` Notes: - The dimensions of the grid are `1 <= rows, cols <= 100` - The starting and ending cells are guaranteed to be open (they will always be 0) - The function should efficiently handle cases where the grid is as large as 100x100 and dense with obstacles","solution":"from collections import deque def shortest_path(grid): Find the shortest path in a grid with obstacles from top-left to bottom-right. Parameters: grid (List[List[int]]): 2D grid with 0 representing open cells and 1 representing obstacles. Returns: int: The length of the shortest path or -1 if no path exists. if not grid or not grid[0]: return -1 rows, cols = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == rows - 1 and c == cols - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"In a town, there are N houses lined up in a straight row on a 1D number line. The position of each house is represented by an integer x_i. To ensure safety and simplification of mail delivery, the town council has decided to establish a number of security outposts in such a way that every house is monitored by at least one outpost. Each outpost has a monitoring range, represented by an integer r. An outpost placed at position p can monitor all houses from p-r to p+r. The town council wants to minimize the number of outposts placed while ensuring all houses are monitored. Can you help the council determine the minimum number of outposts needed and their optimal positions to monitor all the houses? -----Input----- - The first line of the input contains an integer T ― the number of test cases. - Each test case starts with a line containing two space-separated integers N and r. - The following line contains N space-separated integers, where the i-th integer is the position x_i of the i-th house. -----Output----- For each test case, print a single line containing an integer ― the minimum number of outposts needed. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 0 le x_i le 10^9 for each valid i - 1 le r le 10^9 - The sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 5 2 1 2 5 6 7 3 1 3 5 6 -----Example Output----- 2 2 -----Explanation----- Example case 1: One optimal solution is to place outposts at positions 2 and 6. The outpost at position 2 covers houses at positions 1 and 2 (since 2 has a range of 2), and the outpost at position 6 covers houses at positions 5, 6, and 7. Example case 2: One optimal solution is to place outposts at positions 4 and 6. The outpost at position 4 covers houses at positions 3 and 5, and the outpost at position 6 covers houses at positions 5 and 6. Note that while the house at position 5 is covered by both outposts, it\'s optimal to still use two outposts to cover all houses.","solution":"def min_outposts(test_cases): results = [] for case in test_cases: N, r, houses = case houses.sort() outposts = 0 i = 0 while i < N: outposts += 1 loc = houses[i] + r while i < N and houses[i] <= loc: i += 1 loc = houses[i - 1] + r while i < N and houses[i] <= loc: i += 1 results.append(outposts) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, r = map(int, lines[index].split()) houses = list(map(int, lines[index + 1].split())) test_cases.append((N, r, houses)) index += 2 return test_cases def outpost_finder(input_string): test_cases = parse_input(input_string) return min_outposts(test_cases)"},{"question":"You are given an array `heights` where `heights[i]` represents the height of a climber at position `i`. You want to find out the minimum effort required to make all climbers\' heights equal. The effort required to equalize the height between two climbers at positions `i` and `j` is defined as the absolute difference in their heights |heights[i] - heights[j]|. Return the minimum effort needed to make all climbers\' heights equal. Example 1: Input: heights = [1, 2, 3] Output: 2 Explanation: We can make all heights equal to 2, resulting in an effort of |1-2| + |2-2| + |3-2| = 1 + 0 + 1 = 2. Example 2: Input: heights = [5, 10, 15] Output: 10 Explanation: We can make all heights equal to 10, resulting in an effort of |5-10| + |10-10| + |15-10| = 5 + 0 + 5 = 10. Example 3: Input: heights = [1, 10, 2, 9] Output: 16 Explanation: We can make all heights equal to 5.5 (for simplicity, consider the closest integers 5 or 6), resulting in an approximate effort of |1-5| + |2-5| + |9-5| + |10-5| = 4 + 3 + 4 + 5 = 16. Example 4: Input: heights = [2, 2, 2] Output: 0 Explanation: All heights are already equal, so no effort is required. Constraints: - 1 <= heights.length <= 1000 - 1 <= heights[i] <= 10^6","solution":"def min_effort_to_equalize_heights(heights): Returns the minimum effort required to make all climbers\' heights equal. n = len(heights) heights.sort() median = heights[n//2] effort = sum(abs(height - median) for height in heights) return effort"},{"question":"On a digital game where a character can perform two actions on their current health points (HP): Heal: Increase the HP by a specific amount, or; Hurt: Decrease the HP by a specific amount. Initially, the character has HP equal to A. Determine the minimum number of actions required to make the character\'s HP equal to B. Implement a function: ```python def min_actions(A: int, B: int, heal_amt: int, hurt_amt: int) -> int: # Your code here ``` Example 1: Input: A = 3, B = 8, heal_amt = 3, hurt_amt = 1 Output: 2 Explanation: Perform heal and then heal action {3 -> 6 -> 8}. Example 2: Input: A = 5, B = 10, heal_amt = 2, hurt_amt = 3 Output: 3 Explanation: Perform heal, heal, and heal action {5 -> 7 -> 9 -> 10}. Example 3: Input: A = 10, B = 6, heal_amt = 4, hurt_amt = 2 Output: 2 Explanation: Perform hurt and then hurt action {10 -> 8 -> 6}. Example 4: Input: A = 50, B = 100, heal_amt = 25, hurt_amt = 5 Output: 2 Explanation: Perform heal and then heal action {50 -> 75 -> 100}. Note: - 1 <= A, B <= 10^9 - 1 <= heal_amt, hurt_amt <= 10^9 - The HP can never be negative during operations.","solution":"def min_actions(A: int, B: int, heal_amt: int, hurt_amt: int) -> int: if A == B: return 0 elif A < B: # Need to heal return (B - A + heal_amt - 1) // heal_amt else: # Need to hurt return (A - B + hurt_amt - 1) // hurt_amt"},{"question":"This problem is about finding subsequences in a sequence of positive integers. A subsequence is defined by deleting some or no elements from the original sequence while maintaining the order of the remaining elements. For example, 3,7,11 is a subsequence of 6,3,11,5,7,4,3,11,5, but 3,7,5 is not a subsequence of 6,3,11,5,7,4,3,11,5. A strictly increasing subsequence is a sequence where each element is strictly greater than the preceding one. For example, 3,7,11 is a strictly increasing subsequence of 3,6,7,11,19, whereas 3,7,7 is not. Given a sequence of positive integers, your aim is to find the length of the longest strictly increasing subsequence. Consider the sequence 2,5,1,8,3. It has strictly increasing subsequences like 2,5,8 and 2,3,8, both of length 3, but none of length 4 or greater. Consider the sequence 10,22,9,33,21,50,41,60,80. It has strictly increasing subsequences like 10,22,33,50,60,80 of length 6. -----Input:----- The first line of input contains a single positive integer N indicating the length of the input sequence. Lines 2,...,N+1 contain one integer each representing the elements a_i of the sequence. -----Output:----- Your output should consist of a single integer indicating the length of the longest strictly increasing subsequence in the input sequence. -----Constraints:----- - 1 leq N leq 10000 - 1 leq a_i leq 1000000000 -----Sample input 1:----- 5 2 5 1 8 3 -----Sample output 1:----- 3 -----Sample input 2:----- 9 10 22 9 33 21 50 41 60 80 -----Sample output 2:----- 6","solution":"def longest_increasing_subsequence(sequence): Returns the length of the longest strictly increasing subsequence in the provided sequence of integers. if not sequence: return 0 # Initialize DP array where dp[i] stores the length of the longest increasing subsequence that ends with sequence[i] dp = [1] * len(sequence) for i in range(1, len(sequence)): for j in range(i): if sequence[i] > sequence[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence will be the maximum value in DP array return max(dp) # Example usage: # sequence = [2, 5, 1, 8, 3] # print(longest_increasing_subsequence(sequence)) # Output: 3 def parse_input(input_text): lines = input_text.strip().split(\'n\') N = int(lines[0]) sequence = [int(lines[i]) for i in range(1, N+1)] return sequence def find_lis_length_from_input(input_text): sequence = parse_input(input_text) return longest_increasing_subsequence(sequence)"},{"question":"Luna is a botanist and she\'s conducting an experiment to analyze the growth pattern of a particular plant species. Every day, she records the height of the plant in centimeters. At the end of each week, she wants to know how much the plant has grown during that week. Given the daily height measurements, write a program to compute the weekly growth for each week. -----Note:----- A week consists of 7 days. If the experiment lasts for an incomplete week at the end, consider only the complete weeks. -----Input:----- - The first line will contain an integer N, the number of days for which the experiment was conducted. - The second line will contain N integers, the daily heights of the plant, separated by spaces. -----Output:----- Output the weekly growth for each complete week. Each growth value should be on a new line. -----Constraints:----- - 7 leq N leq 1000 - Heights are non-decreasing, and height on each day is a non-negative integer not exceeding 10^9 -----Sample Input:----- 10 5 6 9 10 12 14 15 18 21 22 -----Sample Output:----- 10 3 -----EXPLANATION:----- Luna\'s experiment outputs: - For the first week (days 1 to 7), the growth is 15 - 5 = 10. - For the following week (days 8 to 10), since we don’t have a complete week, it’s not counted. Hence, the weekly growth outputs are: 10 (First complete week’s growth) 3 (Second complete week’s growth, only the first 7 days were considered) Any incomplete week at the end of the observations is ignored.","solution":"def compute_weekly_growth(N, heights): Computes the weekly growth of the plant for each complete week. Parameters: N (int): The number of days the experiment was conducted. heights (list of int): The daily heights of the plant. Returns: list of int: The weekly growth for each complete week. weekly_growth = [] # Iterate over the days, considering only complete weeks for week_start in range(0, N - N % 7, 7): # Calculate the height difference between start and end of the week growth = heights[week_start + 6] - heights[week_start] weekly_growth.append(growth) return weekly_growth"},{"question":"In a city called Stringland, there is a peculiar way of greeting. Every resident greets others with a unique string. Each string consists of lowercase alphabets, and it is considered polite if the greeting string is the same both forwards and backwards (i.e., it is a palindrome). However, there are some residents whose greeting strings are almost polite. An \'almost polite\' greeting string is one that can become a palindrome by changing at most one character. For example: - \\"radar\\" is a polite greeting because it reads the same forwards and backwards. - \\"radbr\\" is almost polite because we can change the \'b\' to \'a\' to make it \\"radar\\". You need to help determine if a string is a polite, almost polite, or impolite greeting. -----Input----- The first line contains an integer T denoting the number of test cases. Each of the next T lines contains a string S consisting of lowercase alphabets. -----Output----- For each test case, output a single line: - \\"polite\\" if the string is a palindrome. - \\"almost polite\\" if the string can become a palindrome by changing at most one character. - \\"impolite\\" if the string cannot become a palindrome even by changing one character. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 -----Example----- Input 4 radar radbr hello madcm Output polite almost polite impolite almost polite -----Explanation----- Example case 1. The string \\"radar\\" is a palindrome, so it is considered polite. Example case 2. The string \\"radbr\\" can become a palindrome by changing the \'b\' to \'a\'. Hence, it is almost polite. Example case 3. The string \\"hello\\" cannot become a palindrome by changing just one character, so it is impolite. Example case 4. The string \\"madcm\\" can become a palindrome by changing the \'c\' to \'a\', making it \\"madam\\". Hence, it is almost polite.","solution":"def check_politeness(T, strings): def is_palindrome(s): return s == s[::-1] def is_almost_polite(s): left, right = 0, len(s) - 1 changes = 0 while left < right: if s[left] != s[right]: changes += 1 if changes > 1: return False left += 1 right -= 1 return True results = [] for s in strings: if is_palindrome(s): results.append(\\"polite\\") elif is_almost_polite(s): results.append(\\"almost polite\\") else: results.append(\\"impolite\\") return results"},{"question":"Write a function that takes a string as input and returns a new string with each letter shifted forward by one in the alphabet. If the letter is \'z\' or \'Z\', it should wrap around to \'a\' or \'A\' respectively. Only alphabetic characters should be shifted; non-alphabetic characters should remain as they are. For example: Input: \\"abc XYZ!\\" Output: \\"bcd YZA!\\" Note: Be sure to maintain the case of each letter.","solution":"def shift_letters(input_string): Shifts each letter in the input string forward by one in the alphabet. Wraps around \'z\' to \'a\' and \'Z\' to \'A\'. Non-alphabetic characters remain unchanged. shifted_string = [] for char in input_string: if \'a\' <= char <= \'z\': shifted_string.append(chr((ord(char) - ord(\'a\') + 1) % 26 + ord(\'a\'))) elif \'A\' <= char <= \'Z\': shifted_string.append(chr((ord(char) - ord(\'A\') + 1) % 26 + ord(\'A\'))) else: shifted_string.append(char) return \'\'.join(shifted_string)"},{"question":"A scientist is working on a genetics experiment and needs to analyze DNA sequences. You are given two DNA sequences of equal length, consisting only of characters \'A\', \'C\', \'G\', and \'T\'. Your task is to determine the minimum number of single-character changes required to make the two sequences identical. For example, if you are given the sequences \\"ACGT\\" and \\"TGCA\\", you can change \'A\' to \'T\', \'C\' to \'G\', \'G\' to \'C\', and \'T\' to \'A\', resulting in 4 changes. Implement a function that takes in the two sequences as input and returns the minimum number of changes required. Example 1: Input: sequence1 = \\"ACGT\\", sequence2 = \\"TGCA\\" Output: 4 Explanation: - Change \'A\' to \'T\' - Change \'C\' to \'G\' - Change \'G\' to \'C\' - Change \'T\' to \'A\' Example 2: Input: sequence1 = \\"GATTACA\\", sequence2 = \\"GACTATA\\" Output: 2 Explanation: - Change \'A\' at index 1 to \'C\' - Change \'C\' at index 4 to \'A\' Note: - The length of the sequences is in the range [1, 1000]. - The sequences only contain the characters \'A\', \'C\', \'G\', and \'T\'. Hint: - Iterate through the characters of both sequences and compare corresponding positions. Count the number of differences.","solution":"def min_changes_to_make_identical(sequence1, sequence2): Returns the minimum number of single-character changes required to make the two sequences identical. if len(sequence1) != len(sequence2): raise ValueError(\\"Sequences must be of equal length\\") changes = 0 for char1, char2 in zip(sequence1, sequence2): if char1 != char2: changes += 1 return changes"},{"question":"You are given an array of positive integers `heights` representing the heights of buildings on a 1-dimensional skyline. Each building is of unit width. You are also given two integers `start` and `end` representing the indices of the buildings that can be juxtaposed. We define a skyline view to be the leftmost and rightmost non-zero buildings visible when looking from directly above the skyline. The skyline view is continuous and there should not be any zero-height building between the start and end indices (inclusive). Your task is to write a function that returns the width of the continuous segment of the skyline defined by buildings from index `start` to `end`, inclusive. If any building within the range [start, end] is of height zero, return 0 as the width. Example 1: Input: heights = [1, 2, 3, 0, 2, 2], start = 1, end = 4 Output: 0 Example 2: Input: heights = [1, 2, 3, 4, 5], start = 0, end = 4 Output: 5 Example 3: Input: heights = [5, 4, 3, 2, 1], start = 1, end = 3 Output: 3 Example 4: Input: heights = [1, 2, 0, 4, 5], start = 0, end = 1 Output: 2 Constraints: - 1 <= heights.length <= 10^6 - 0 <= heights[i] <= 10^4 - 0 <= start < end < heights.length","solution":"def skyline_view_width(heights, start, end): Calculate the width of the continuous segment of the skyline defined by buildings from index start to end, inclusive. Parameters: heights (List[int]): List of building heights. start (int): Start index of the buildings to consider. end (int): End index of the buildings to consider. Returns: int: Width of the continuous segment or 0 if there is any zero-height building within the range. if any(height == 0 for height in heights[start:end+1]): return 0 return end - start + 1"},{"question":"You are given a list of integers where each integer represents the height of a mountain. Write a function that returns the index of the peak element. A peak element is an element that is greater than its neighbors. If the list has multiple peaks, return the index of any one of them. If the list has no peaks, return -1. For example, given the list [1, 3, 20, 4, 1, 0], the answer could be 2, which is the index of peak element 20. Some examples: [1, 3, 20, 4, 1, 0] => 2 [10, 20, 15, 2, 23, 90, 67] => 1 or 5 [10, 20, 30, 40, 50] => 4 **NOTES:** * The list will contain at least one element and it can contain negative numbers as well. * Elements at the end of the list are considered only if they have one neighbor (i.e., the second last element).","solution":"def find_peak_element(arr): Returns the index of a peak element in the list. A peak element is one that is greater than its neighbors. If the list has multiple peaks, return the index of any one of them. If there are no peaks, return -1. :param arr: List of integers representing the heights of a mountain. :return: Index of any peak element or -1 if there are no peaks. n = len(arr) if n == 1: return 0 for i in range(n): if (i == 0 and arr[i] > arr[i + 1]) or (i == n - 1 and arr[i] > arr[i - 1]) or (0 < i < n - 1 and arr[i] > arr[i - 1] and arr[i] > arr[i + 1]): return i return -1"},{"question":"Write a function that takes a list of tuples, where each tuple contains two integers representing the start and end times of a meeting. The function should return the minimum number of meeting rooms required to accommodate all the meetings without any overlap. Example: ```python min_meeting_rooms([(0, 30), (5, 10), (15, 20)]) #=> 2 min_meeting_rooms([(7, 10), (2, 4)]) #=> 1 ```","solution":"import heapq def min_meeting_rooms(intervals): Returns the minimum number of meeting rooms required to accommodate all the meetings without overlap. if not intervals: return 0 # Sort the meetings by start time intervals.sort(key=lambda x: x[0]) # Use a min heap to track the end times of meetings end_times = [] # Add the first meeting\'s end time to the heap heapq.heappush(end_times, intervals[0][1]) for interval in intervals[1:]: # If the room due to free up the earliest is free, reuse it. if interval[0] >= end_times[0]: heapq.heappop(end_times) # Allocate a new room (or reuse an existing one) and add the end time to the heap heapq.heappush(end_times, interval[1]) # The size of the heap tells us the minimum rooms required for all the meetings. return len(end_times)"},{"question":"Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] where si < ei, determine if a person could attend all meetings. Example 1: Input: [[0,30],[5,10],[15,20]] Output: false Explanation: A person cannot attend both the [[0,30]] and [[5,10]] meetings because they overlap. Example 2: Input: [[7,10],[2,4]] Output: true Explanation: A person can attend both the [[7,10]] and [[2,4]] meetings because they do not overlap. Note: - The intervals are not necessarily sorted in any order. - The solution should consider edge cases such as empty lists or single interval lists.","solution":"def can_attend_all_meetings(intervals): Determines if a person can attend all meetings represented by the intervals. Parameters: intervals (list of list of int): List of meeting intervals where each interval is [start, end]. Returns: bool: True if a person can attend all meetings, False otherwise. if not intervals: return True intervals.sort(key=lambda x: x[0]) for i in range(len(intervals) - 1): if intervals[i][1] > intervals[i + 1][0]: return False return True"},{"question":"Given a positive integer `n`, write a function `generate_pattern(n)` that returns a list of strings, each string representing a line in the pattern. The pattern should display a diamond shape made of asterisks (`*`) with the given number of lines for the upper half, including the middle line. Each subsequent line increases by two asterisks, starting from one asterisk at the top. The lower half of the diamond, after the middle line, is a mirror image of the upper half. # Example The function call `generate_pattern(3)` will return: ``` [ \\" * \\", \\" *** \\", \\"*****\\", \\" *** \\", \\" * \\" ] ``` The function call `generate_pattern(5)` will return: ``` [ \\" * \\", \\" *** \\", \\" ***** \\", \\" ******* \\", \\"*********\\", \\" ******* \\", \\" ***** \\", \\" *** \\", \\" * \\" ] ``` # Constraints - The value of `n` will be an odd positive integer greater than or equal to 1 and less than or equal to 49. # Notes - Ensure the pattern is centered and properly aligned. - The output should be a list of strings where each string is a line of the diamond pattern.","solution":"def generate_pattern(n): Generate a diamond shape pattern with n lines in the upper half of the diamond. :param n: int - An odd positive integer :return: list of strings - Each string represents a line in the diamond pattern pattern = [] for i in range(n): line = \' \' * (n - i - 1) + \'*\' * (2 * i + 1) + \' \' * (n - i - 1) pattern.append(line) for i in range(n-2, -1, -1): line = \' \' * (n - i - 1) + \'*\' * (2 * i + 1) + \' \' * (n - i - 1) pattern.append(line) return pattern"},{"question":"You are given a list of words and a target word. Your task is to determine the minimum number of operations required to transform the target word into one of the words from the list. An operation is defined as changing a single character in the target word to any other character. If it\'s not possible to transform the target word into any word in the list, return `-1`. For example: ``` words = [\\"hello\\", \\"world\\", \\"apple\\"] target = \\"hella\\" ``` The minimum number of operations required is `1` since changing the last character of \\"hella\\" from \'a\' to \'o\' results in \\"hello\\", which is in the list. Another example: ``` words = [\\"abc\\", \\"def\\", \\"ghi\\"] target = \\"xyz\\" ``` Here, it is not possible to transform \\"xyz\\" into any of the words in the list, so return `-1`. **Constraints:** - All words, including the target word, are of the same length. - The words list will contain at least one word. - All inputs are lower-case English letters. Good luck!","solution":"def min_operations_to_transform(words, target): Determines the minimum number of operations required to transform the target word into one of the words from the list. An operation is defined as changing a single character in the target word to any other character. If it\'s not possible to transform the target word into any word in the list, returns -1. min_operations = float(\'inf\') for word in words: operations = sum(1 for a, b in zip(word, target) if a != b) min_operations = min(min_operations, operations) return min_operations if min_operations != float(\'inf\') else -1"},{"question":"Write a function that receives a string containing a sentence with words separated by spaces. The function should return the length of the shortest word in the sentence. Example: Input: \\"The quick brown fox jumps over the lazy dog\\" Output: 3 Explanation: The shortest words are \\"The\\", \\"fox\\", \\"the\\", \\"dog\\", each having a length of 3. Note: - The input string will contain at least one word. - Words in the sentence are separated by single spaces and the sentence will not have leading or trailing spaces.","solution":"def length_of_shortest_word(sentence): Returns the length of the shortest word in the given sentence. :param sentence: str - A sentence containing words separated by spaces. :return: int - The length of the shortest word in the sentence. words = sentence.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"Given a list of integers, write a function `calculate_mode(numbers)` that finds the mode of the list. The mode is the number that appears most frequently in the list. If there are multiple such numbers, return the smallest one. Example usage: ```python calculate_mode([1, 2, 3, 3, 4, 4, 4, 2, 2, 2]) == 2 calculate_mode([1, 1, 2, 2, 3, 3]) == 1 ``` **Note**: You should not use any libraries or external functions to calculate the mode. Your solution should have an acceptable time complexity for the input size constraints. You can assume the input list will have at least one number and will contain only positive integers.","solution":"def calculate_mode(numbers): Returns the mode of the list. If multiple numbers appear most frequently, it returns the smallest one. count_dict = {} for number in numbers: if number in count_dict: count_dict[number] += 1 else: count_dict[number] = 1 max_count = 0 mode = float(\'inf\') for number, count in count_dict.items(): if count > max_count or (count == max_count and number < mode): max_count = count mode = number return mode"},{"question":"Write a function called `mergeSort` that accepts an array of integers and sorts it using the merge sort algorithm. The merge sort algorithm is a divide-and-conquer algorithm that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. # Merge Sort Merge sort involves repeatedly splitting the array into halves until each sub-array is of length 1, and then merging those sub-arrays back together in sorted order. # Example: ```python # Input array arr = [38, 27, 43, 3, 9, 82, 10] # After merge sort mergeSort(arr) # => [3, 9, 10, 27, 38, 43, 82] ``` # Approach: 1. Write a helper function `merge` that takes two sorted arrays and returns a merged sorted array. 2. In the `mergeSort` function, split the array into two halves. 3. Recursively call `mergeSort` on each half to sort them. 4. Use the `merge` function to combine the two sorted halves. # Examples: ```python # Example 1: # Input array arr1 = [5, 2, 9, 1, 5, 6] mergeSort(arr1) # => [1, 2, 5, 5, 6, 9] # Example 2: # Input array arr2 = [12, 11, 13, 5, 6, 7] mergeSort(arr2) # => [5, 6, 7, 11, 12, 13] # Example 3: # Input array arr3 = [1] mergeSort(arr3) # => [1] # Example 4: # Input array - already sorted arr4 = [2, 3, 5, 7, 11] mergeSort(arr4) # => [2, 3, 5, 7, 11] ``` Ensure the function has a time complexity of O(n log n), and handle even and odd length arrays correctly.","solution":"def mergeSort(arr): if len(arr) > 1: mid = len(arr) // 2 left_half = arr[:mid] right_half = arr[mid:] mergeSort(left_half) mergeSort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: arr[k] = left_half[i] i += 1 else: arr[k] = right_half[j] j += 1 k += 1 while i < len(left_half): arr[k] = left_half[i] i += 1 k += 1 while j < len(right_half): arr[k] = right_half[j] j += 1 k += 1"},{"question":"Alice is playing a fun game with sequences. She has a sequence of numbers and she wants to convert it into another sequence by performing a series of operations. You are given two sequences A and B, each with length N. For each sequence, elements are indexed from 0. The i-th element of sequence A and B are denoted by A_i and B_i respectively. The task is to convert sequence A into sequence B using a series of the following operations: - Choose an integer x between 1 and N-1 (both inclusive). - Choose a segment of the array A starting at index 0 up to index x (inclusive). - Increment each element in the chosen segment by 1. You should find the minimum number of operations to convert A into B or report that it is impossible to do so. -----Input----- - The first line contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N, the length of sequences A and B. - The second line contains N space-separated integers representing the elements of A. - The third line contains N space-separated integers representing the elements of B. -----Output----- For each test case, print a single line: - If it is impossible to convert A to B, print -1. - Otherwise, print the minimum number of operations required to convert A to B. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^3 - 1 leq A_i, B_i leq 10^9 -----Example Input----- 2 4 1 2 3 4 4 5 6 7 3 1 2 3 3 2 1 -----Example Output----- 3 -1 -----Explanation----- Example case 1: - In the first move, increment the first three elements [0, 1, 2]: A becomes [2, 3, 4, 4]. - In the second move, increment the first four elements [0, 1, 2, 3]: A becomes [3, 4, 5, 5]. - In the third move, increment the first four elements [0, 1, 2, 3]: A becomes [4, 5, 6, 7]. - There is no way to convert A to B in fewer than three moves. Example case 2: - It is impossible to convert A to B because the elements of A will never decrease through the allowed operations.","solution":"def min_operations_to_convert(A, B): N = len(A) # Find the maximum difference needed max_diff = 0 for a, b in zip(A, B): if b < a: return -1 max_diff = max(max_diff, b - a) if max_diff == 0: return 0 return max_diff def solve(test_cases): results = [] for N, A, B in test_cases: results.append(min_operations_to_convert(A, B)) return results"},{"question":"George is organizing a string exhibition, and he wants to create fascinating string patterns. While preparing for the event, he discovered an interesting string transformation. He defines a transformation on a string `s` as follows: 1. Select any two distinct characters `a` and `b`. 2. Replace every occurrence of `a` in the string with the character `b`. 3. Replace every occurrence of `b` in the string with the character `a`. He wants to know if by applying a series of such transformations, any given string `s` can be transformed into another string `t` of the same length and with the same characters. Given two strings `s` and `t` of equal length, determine if `s` can be transformed into `t` by applying any number of the defined transformations. -----Input----- The first line contains a single integer n (1 leq n leq 10^4) — the number of test cases. Each of the following n lines contains two space-separated strings s and `t` of the same length, consisting of lowercase English letters only. -----Output----- For each test case, print \\"YES\\" if `s` can be transformed into `t` by applying any number of the transformations, and \\"NO\\" otherwise. -----Example----- Input 3 abc cba ab ab abc def Output YES YES NO -----Note----- For the first test case, you can swap \'a\' and \'c\' to turn `abc` into `cba`. For the second test case, `ab` is already equal to itself, so the answer is \\"YES\\". For the third test case, the strings `abc` and `def` contain entirely different letters and cannot be transformed into one another.","solution":"def can_transform(s, t): Returns \\"YES\\" if string s can be transformed into string t by applying the given transformations, otherwise returns \\"NO\\". # Check if the sorted characters of both strings are equal. sorted_s = sorted(s) sorted_t = sorted(t) if sorted_s == sorted_t: return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): results = [] for s, t in test_cases: results.append(can_transform(s, t)) return results"},{"question":"A large e-commerce company is analyzing its database of recent orders. Each order has a specific price, and the company wants to analyze particular segments of these orders in terms of offering discounts, refunds, and performance analysis. You are tasked with developing a program that answers, for multiple queries, the total sum of the prices of orders within specific segments. Given an array of integers representing the price of each order, and multiple queries in the form of pairs, where each pair denotes the start and end indices of the array segment to analyze, return the sum of all order prices within each given segment. -----Input----- - The first line of input contains two integers n (number of orders) and q (number of queries), where 1 ≤ n, q ≤ 100. - The second line contains n space-separated integers representing the prices of each order. - The next q lines contain two integers each, l and r (1-based indices), representing the start and end indices for each query. -----Output----- - Output q lines, each containing the sum of the prices in the respective array segment defined by the query. -----Constraints----- - 1 ≤ array elements ≤ 1000 - 1 ≤ l ≤ r ≤ n -----Example----- Input: 5 3 10 20 30 40 50 1 3 2 4 1 5 Output: 60 90 150 -----Explanation----- In the first example, we have five orders with prices [10, 20, 30, 40, 50]. There are three queries: 1. The sum of orders from index 1 to 3 is 10 + 20 + 30 = 60. 2. The sum of orders from index 2 to 4 is 20 + 30 + 40 = 90. 3. The sum of orders from index 1 to 5 is 10 + 20 + 30 + 40 + 50 = 150.","solution":"def sum_order_prices(n, q, prices, queries): Given the number of orders `n`, the number of queries `q`, the list of order prices `prices`, and the list of queries `queries` (each a tuple of start and end indices), return the sum of the prices of orders within each segment defined by the queries. result = [] for l, r in queries: # Convert 1-based index to 0-based index and calculate the sum result.append(sum(prices[l-1:r])) return result"},{"question":"-----Problem----- You are given an array of integers where each integer represents the height of a building. The buildings are situated in a row and the widths of the buildings are the same. You have to calculate the amount of water that could be trapped between the buildings after a rain. The width of each building bar is 1. -----Input----- - The first line contains an integer N which represents the number of buildings. - The second line contains N integers separated by spaces, where each integer represents the height of the building. -----Output----- An integer representing the total units of water that could be trapped between the buildings. -----Constraints----- - 1 ≤ N ≤ 105 - 0 ≤ Height of building ≤ 104 -----Sample Input----- 6 0 1 0 2 1 0 1 3 2 1 2 1 -----Sample Output----- 6 -----Explanation----- Water trapped: 1 unit between buildings 2 and 4, 1 unit between buildings 5 and 6, 4 units between buildings 9 and 12 Total trapped water: 1 + 1 + 4 = 6","solution":"def trap_rain_water(heights): Calculate the amount of water that can be trapped between the buildings. :param heights: List[int] - List of integers representing the height of each building. :return: int - The total amount of water trapped. if not heights or len(heights) < 3: return 0 n = len(heights) left = [0] * n right = [0] * n # Fill left max height for each building left[0] = heights[0] for i in range(1, n): left[i] = max(left[i - 1], heights[i]) # Fill right max height for each building right[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right[i] = max(right[i + 1], heights[i]) # Calculate the water trapped at each building water_trapped = 0 for i in range(n): water_trapped += min(left[i], right[i]) - heights[i] return water_trapped"},{"question":"Create a function `find_kth_largest` that takes an integer `k` and a list of integers as parameters. The function should return the kth largest element in the list. Note that it is the kth largest element in the sorted order, not the kth distinct element. For example: ```python find_kth_largest(2, [3, 2, 1, 5, 6, 4]) == 5 find_kth_largest(4, [3, 2, 3, 1, 2, 4, 5, 5, 6]) == 4 ```","solution":"def find_kth_largest(k, nums): Returns the kth largest element in the list \'nums\'. nums.sort(reverse=True) return nums[k-1]"},{"question":"A railway company is testing a new ticket vending machine that issues tickets with certain conditions. The machine accepts a queue of passengers arriving at different times, and each passenger has a set value they wish to pay for their ticket. The machine has the following rules: 1. If the machine is currently idle and a passenger arrives, it accepts the payment and issues a ticket immediately. 2. If the machine is busy processing a payment and another passenger arrives, the new passenger waits until the machine is free. 3. The processing time for each payment is exactly `p` seconds. 4. Passengers get serviced in the order they arrive. 5. A passenger\'s arrival time is not delayed by other passengers in the queue. They will queue up based on their initial arrival time. For instance, if `p = 2` and there are three passengers arriving at times 1, 3, and 6 demanding payment times `10, 20, 30` respectively, the machine accepts payments at times `1, 3, and 6` and processes them finishing at times `3, 5, and 8`. Write a program to determine the total time taken by the machine to service all passengers\' payments. -----Input----- The first line contains two integers `n` and `p` representing the number of passengers and the processing time of the machine respectively. The second line contains `n` integers `t_1, t_2, ..., t_n` (1 ≤ t_i ≤ 10^9) representing the arrival times of the passengers in non-decreasing order. -----Output----- Print the total time taken by the machine to service all passengers\' payments. -----Examples----- Input 3 2 1 3 6 Output 8 Input 4 5 2 2 3 8 Output 17 -----Notes----- In the first example: - 1st passenger arrives at time 1, and the machine processes for 2 seconds (till time 3). - 2nd passenger arrives at time 3, and the machine processes for 2 seconds (till time 5). - 3rd passenger arrives at time 6, and the machine processes for 2 seconds (till time 8). Thus, the total time taken is 8. In the second example: - 1st passenger arrives at time 2, and the machine processes for 5 seconds (till time 7). - 2nd passenger arrives at time 2, waits until the machine is free at time 7, and processes for 5 seconds (till time 12). - 3rd passenger arrives at time 3, waits until the machine is free at time 12, and processes for 5 seconds (till time 17). - 4th passenger arrives at time 8, waits until the machine is free at time 17, and processes for 5 seconds (till time 22). Thus, the total time taken is 22.","solution":"def total_service_time(n, p, arrival_times): Calculate the total time taken by the machine to service all passengers\' payments. Parameters: n (int): Number of passengers. p (int): Processing time for each payment in seconds. arrival_times (list): List of arrival times of passengers in non-decreasing order. Returns: int: The total time taken to service all payments. if n == 0: return 0 # Initialize the current time to when the first passenger arrives current_time = 0 for time in arrival_times: if time >= current_time: # If the machine is idle (arrival time is greater than or equal to current_time), # The machine starts processing at the arrival time current_time = time + p else: # If the machine is busy (arrival time is less than current_time), # The passenger waits until the machine is free current_time += p return current_time"},{"question":"You are given a string representing a sequence of moves on a plane. Each move is one of the following: \\"up\\", \\"down\\", \\"left\\", \\"right\\". The objective is to end at the starting point (0,0). Write a function that checks if the given sequence of moves returns to the origin. **Note:** the input will not be empty and will contain only the words \\"up\\", \\"down\\", \\"left\\" and \\"right\\". Examples ``` \\"up down left right\\" --> True (returns to the origin) \\"up up down down left right left right\\" --> True (returns to the origin) \\"up right right down\\" --> False (does not return to the origin) ```","solution":"def returns_to_origin(moves): Returns True if the sequence of moves leads back to the origin (0,0), False otherwise. :param moves: String, sequence of moves separated by spaces (\'up\', \'down\', \'left\', \'right\') x, y = 0, 0 move_list = moves.split() for move in move_list: if move == \'up\': y += 1 elif move == \'down\': y -= 1 elif move == \'left\': x -= 1 elif move == \'right\': x += 1 return x == 0 and y == 0"},{"question":"You are given a list of tuples, where each tuple consists of a student\'s name and their score on a recent exam. The maximum possible score on the exam is 100. The task is to write a function that accepts this list and an integer cutoff score. The function should return a dictionary where the keys are the student names and the values are either \\"pass\\" or \\"fail\\" depending on whether their score meets or exceeds the cutoff score. Write a function `grade_students(student_scores, cutoff)` that takes in two parameters: 1. `student_scores`: a list of tuples, where each tuple consists of a string (student name) and an integer (student score). 2. `cutoff`: an integer representing the score needed to pass the exam. The function should return a dictionary where each student\'s name is a key, and the value is \\"pass\\" if their score is greater than or equal to the cutoff score, and \\"fail\\" otherwise. For example: ```python student_scores = [(\\"Alice\\", 85), (\\"Bob\\", 78), (\\"Charlie\\", 90)] cutoff = 80 result = grade_students(student_scores, cutoff) ``` `result` should be: ```python {\'Alice\': \'pass\', \'Bob\': \'fail\', \'Charlie\': \'pass\'}","solution":"def grade_students(student_scores, cutoff): Returns a dictionary with student names as keys and \\"pass\\" or \\"fail\\" as values based on whether their score meets or exceeds the cutoff. Parameters: student_scores (list of tuples): Each tuple contains a student\'s name and their score. cutoff (int): The score needed to pass the exam. Returns: dict: A dictionary with student names as keys and their pass/fail status as values. return {name: (\'pass\' if score >= cutoff else \'fail\') for name, score in student_scores}"},{"question":"Task You are given a string of lowercase letters and spaces. Your task is to return the most frequently occurring letter in the string. In case of a tie, return the letter that comes first alphabetically. Ignore spaces when determining the frequency. Example You are given the input string \\"hello world\\". The letter frequencies are: - h: 1 - e: 1 - l: 3 - o: 2 - w: 1 - r: 1 - d: 1 The output should be \\"l\\" because it appears most frequently. Function Signature ```python def most_frequent_letter(s: str) -> str: pass ```","solution":"def most_frequent_letter(s: str) -> str: Returns the most frequently occurring letter in the string. In case of a tie, the letter that comes first alphabetically is returned. Spaces are ignored. from collections import Counter # Filter out spaces and count frequency of each letter filtered_chars = [char for char in s if char.isalpha()] frequency = Counter(filtered_chars) # Find the letter with highest frequency most_frequent = max(frequency, key=lambda x: (frequency[x], -ord(x))) return most_frequent"},{"question":"Given an integer array nums, you need to find the maximum value of nums[i] - nums[j] such that i < j. Example 1: Input: nums = [7, 1, 5, 4] Output: 4 Explanation: The maximum difference is 5 - 1 = 4, where i = 2 and j = 1. Example 2: Input: nums = [9, 4, 3, 2] Output: -1 Explanation: There is no valid pair (i, j) where i < j because the numbers are in descending order. Therefore, the maximum difference is -1. Example 3: Input: nums = [1, 5, 2, 10] Output: 9 Explanation: The maximum difference is 10 - 1 = 9, where i = 4 and j = 1. Constraints: - 2 <= nums.length <= 10^5 - -10^4 <= nums[i] <= 10^4","solution":"def max_difference(nums): Returns the maximum value of nums[i] - nums[j] such that i < j. If no valid pair (i, j) exists, return -1. if len(nums) < 2: return -1 min_value = nums[0] max_diff = -1 for i in range(1, len(nums)): if nums[i] > min_value: max_diff = max(max_diff, nums[i] - min_value) min_value = min(min_value, nums[i]) return max_diff"},{"question":"Write a function named `is_beautiful_number` to determine if a number is a \\"beautiful number.\\" A number is considered beautiful if the sum of its digits, each raised to the power of the number of digits, is equal to the number itself. For example: ``` 153 is a beautiful number because 1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153 9474 is a beautiful number because 9^4 + 4^4 + 7^4 + 4^4 = 6561 + 256 + 2401 + 256 = 9474 ``` Your function should take a single integer as input and return `True` if the number is beautiful and `False` otherwise. The function should handle both positive and negative numbers. Function signature: `def is_beautiful_number(num: int) -> bool:` Example usage: ``` assert is_beautiful_number(153) == True assert is_beautiful_number(9474) == True assert is_beautiful_number(9475) == False ```","solution":"def is_beautiful_number(num: int) -> bool: Determines if the given number is a beautiful number. A number is considered beautiful if the sum of its digits, each raised to the power of the number of digits, is equal to the number itself. Args: num (int): The number to be checked. Returns: bool: True if the number is beautiful, False otherwise. if num < 0: return False str_num = str(num) num_digits = len(str_num) sum_of_powers = sum(int(digit) ** num_digits for digit in str_num) return sum_of_powers == num"},{"question":"A town has a peculiar traffic rule to manage the limited parking space available in its only parking lot, which has `N` parking spots, in a unique way. Each car is assigned a unique alphanumeric plate number (composed of upper case letters and digits). The cars arrive and depart over time, and the parking lot has to keep track of the cars present at any given moment. There are two types of events: 1. Parking a car: Represented as `P XYZ123`, where `XYZ123` is the plate number of the car to be parked. 2. Departing a car: Represented as `D XYZ123`, where `XYZ123` is the plate number of the car to be removed from the parking lot. Parking is done in a First-In-First-Out (FIFO) manner. If a car tries to park when the parking is full, it should be ignored and not allowed in. When removing a car, it should be checked if the car is actually present in the lot. If a car with the given plate number is not in the parking lot, the departing event should be ignored. You need to keep track of the parking lot status after all events and print the plate numbers of the cars currently parked in the lot in the order they were parked. -----Input:----- The first line contains an integer `N`, the number of parking spots available. The second line contains an integer `M`, the number of events. Each of the next `M` lines contains a string representing an event, either parking (`P XYZ123`) or departing (`D XYZ123`). -----Output:----- Output the plate numbers of the cars in the parking lot, in the order they were parked, one per line. If no cars are parked, output \\"Parking Lot Empty\\". -----Constraints:----- - 1 leq N leq 1000 - 1 leq M leq 10000 - Plate numbers are unique and consist of 1 to 6 alphanumeric characters. -----Sample Input----- 3 7 P ABC123 P DEF456 P GHI789 P JKL012 D DEF456 D XYZ987 P ZZZ999 -----Sample Output----- ABC123 GHI789 ZZZ999","solution":"def parking_lot_manager(N, M, events): Manages the parking events and returns the current state of the parking lot. parking_lot = [] parking_set = set() # To quickly check if a car is currently in the parking lot for event in events: event_type, plate_number = event.split() if event_type == \'P\': if len(parking_lot) < N and plate_number not in parking_set: parking_lot.append(plate_number) parking_set.add(plate_number) elif event_type == \'D\': if plate_number in parking_set: parking_lot.remove(plate_number) parking_set.remove(plate_number) return parking_lot if parking_lot else [\\"Parking Lot Empty\\"]"},{"question":"A mountain array is defined as an array that strictly increases until it reaches a peak (the peak is the highest value in the array) and then strictly decreases. Given an integer array, determine if it is a valid mountain array. An array is considered a mountain array if the following conditions are satisfied: 1. The array has at least 3 elements. 2. There exists some index `i` (0 < i < arr.length - 1) such that: - `arr[0] < arr[1] < ... < arr[i-1] < arr[i]` - `arr[i] > arr[i+1] > ... > arr[arr.length - 1]` Implement a function that checks if a given array is a mountain array. Example: Input: [2, 1] Output: False Input: [3, 5, 5] Output: False Input: [0, 3, 2, 1] Output: True Note: - The length of the input array will be in the range [1, 10^4] - Elements in the array will be in the range [0, 10^4]","solution":"def is_mountain_array(arr): Determine if the given array is a mountain array. :param arr: List[int] - The input array to be checked. :return: bool - True if the input array is a mountain array, otherwise False. n = len(arr) if n < 3: return False i = 1 # Ascend until we find the peak while i < n and arr[i] > arr[i - 1]: i += 1 # Peak can\'t be first or last element if i == 1 or i == n: return False # Descend from the peak while i < n and arr[i] < arr[i - 1]: i += 1 # If we reached the end, array is valid mountain array return i == n"},{"question":"Given a list of integers, find the length of the longest subarray with a sum less than or equal to a specified value. Example: For the list `[1, 2, 3, 4, 5]` and the target sum `7`, the longest subarray is `[1, 2, 3]` with length `3`. You must write a function that takes two parameters: a list of integers and the target sum. The function should return the length of the longest subarray meeting the criteria. The input list can contain up to `10 000` integers. Good luck :)","solution":"def longest_subarray_with_sum_at_most(arr, target_sum): Finds the length of the longest subarray with a sum less than or equal to the specified target_sum. Parameters: arr (list of int): The list of integers. target_sum (int): The target sum. Returns: int: Length of the longest subarray with sum <= target_sum. max_length = 0 current_sum = 0 start = 0 for end in range(len(arr)): current_sum += arr[end] while current_sum > target_sum and start <= end: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given an integer array `nums` representing the amount of money available in each house. Each house is arranged in a line, and the objective is to rob maximum money without alerting the police. The condition is that you cannot rob two adjacent houses. Write a function that returns the maximum amount of money you can rob without robbing two consecutive houses. Example: Input: [2, 7, 9, 3, 1] Output: 12 Explanation: Rob house 1 (money = 2) and then rob house 3 (money = 9), then rob house 5 (money = 1), for a total of 2 + 9 + 1 = 12. Input: [2, 1, 1, 2] Output: 4 Explanation: Rob house 1 (money = 2) and then rob house 4 (money = 2), for a total of 2 + 2 = 4.","solution":"def rob(nums): Calculate the maximum amount of money that can be robbed without robbing two consecutive houses. :param nums: List[int], representing the amount of money available in each house :return: maximum amount of money that can be robbed if not nums: return 0 if len(nums) == 1: return nums[0] prev1, prev2 = 0, 0 for num in nums: temp = max(prev1, prev2 + num) prev2 = prev1 prev1 = temp return prev1"},{"question":"You are given an integer array `arr` of length n which contains unique integers from 1 to n, and an integer k. You can reverse the order of any subarray of `arr` at most `k` times. Return the minimum possible sum of the array `arr` after performing at most `k` reversals. Example 1: Input: arr = [4, 3, 1, 2, 5], k = 2 Output: 11 Explanation: One possible sequence of reversals to get the minimum sum is: 1. Reverse the subarray from index 2 to 4 -> arr becomes [4, 3, 2, 1, 5] 2. Reverse the subarray from index 0 to 3 -> arr becomes [1, 2, 3, 4, 5] Minimum possible sum is 1 + 2 + 3 + 4 + 5 = 15 Example 2: Input: arr = [1, 2, 3, 4, 5], k = 1 Output: 15 Explanation: The array is already sorted, any reversals would increase the sum. Note: 1. 1 <= n <= 50 2. 1 <= k <= n","solution":"def min_sum_after_reversals(arr, k): Returns the minimum sum of the array after performing at most `k` reversals. Parameters: arr (list): List of integers, containing unique integers from 1 to n. k (int): Maximum number of reversals that can be performed. Returns: int: The minimum possible sum of the array after performing at most `k` reversals. # The minimum sum of the array occurs when the array is sorted in ascending order. n = len(arr) sorted_arr = sorted(arr) # If we can sort the array by using k reversals, return the sum of the sorted array. if k >= n: return sum(sorted_arr) # Try to sort parts of the array using the reversals allowed. for _ in range(k): # Find the first position where the current array differs from the sorted array i = 0 while i < n and arr[i] == sorted_arr[i]: i += 1 # If the array is already sorted, we are done if i == n: break # Find the position where the current array matches the sorted array again j = i while j < n and arr[j] != sorted_arr[i]: j += 1 # Reverse the subarray to make the first part of the array sorted arr[i:j+1] = reversed(arr[i:j+1]) return sum(arr)"},{"question":"You are working on a flight booking application and need to write a function that determines the minimum number of stops required for a passenger to travel from a start city to a destination city using a series of direct flights. You are given a list of direct flights where each flight is represented as a tuple (source, destination). You must implement a function that finds the minimum number of stops required or returns -1 if the destination is not reachable. **Function Signature:** ```python def min_stops(flights: List[Tuple[str, str]], start: str, destination: str) -> int: ``` **Input:** - `flights`: A list of tuples where each tuple represents a direct flight from a source city to a destination city. - `start`: A string representing the starting city. - `destination`: A string representing the target city. **Output:** - An integer representing the minimum number of stops required to reach the destination from the start city. Return -1 if the destination is not reachable. **Example:** ```python flights = [(\\"A\\", \\"B\\"), (\\"B\\", \\"C\\"), (\\"A\\", \\"C\\"), (\\"C\\", \\"D\\")] start = \\"A\\" destination = \\"D\\" print(min_stops(flights, start, destination)) # Output: 2 flights = [(\\"A\\", \\"B\\"), (\\"B\\", \\"C\\"), (\\"C\\", \\"D\\")] start = \\"A\\" destination = \\"E\\" print(min_stops(flights, start, destination)) # Output: -1 ``` **Notes:** - You can assume that there are no duplicate flights in the given list. - Direct flights can be used in either direction.","solution":"from collections import deque from typing import List, Tuple def min_stops(flights: List[Tuple[str, str]], start: str, destination: str) -> int: if start == destination: return 0 # Create adjacency list to represent the flight connections graph = {} for source, dest in flights: if source not in graph: graph[source] = [] if dest not in graph: graph[dest] = [] graph[source].append(dest) graph[dest].append(source) # since flights can be used in either direction # Perform BFS to find the shortest path queue = deque([(start, 0)]) # (current_city, stops) visited = set() visited.add(start) while queue: current_city, stops = queue.popleft() for neighbor in graph.get(current_city, []): if neighbor == destination: return stops + 1 if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, stops + 1)) return -1"},{"question":"Given a non-empty string s, determine if it can be made into a palindrome by deleting at most one character. Example 1: Input: \\"aba\\" Output: True Example 2: Input: \\"abca\\" Output: True Explanation: You could delete the character \'c\'. Example 3: Input: \\"abc\\" Output: False Note: - The string will consist of lower-case English letters. - The length of the given string will not exceed 50000 characters.","solution":"def valid_palindrome(s): Determines if the given string can be made into a palindrome by deleting at most one character. Parameters: s (str): The input string. Returns: bool: True if the string can be made into a palindrome by deleting one character, False otherwise. def is_palindrome_range(i, j): Helper function to check if the substring s[i:j+1] is a palindrome. return all(s[k] == s[j-k+i] for k in range(i, (j+i)//2+1)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: return is_palindrome_range(left+1, right) or is_palindrome_range(left, right-1) left += 1 right -= 1 return True"},{"question":"You are given a 2D grid where each cell can either be \'1\' (representing land) or \'0\' (representing water). An island is formed by connecting adjacent lands horizontally or vertically. The grid has no lakes; every cell is either land or water. A single island may consist of multiple connected components, i.e., clusters of \'1\'s, and you need to find the number of islands. ---Pseudo Code for DFS--- islandCount(grid): if grid is empty then return 0 rowCount = number of rows in the grid colCount = number of columns in the grid count = 0 function dfs(r, c): if r < 0 or r >= rowCount or c < 0 or c >= colCount or grid[r][c] == \'0\': return grid[r][c] = \'0\' # mark as visited dfs(r + 1, c) # check down dfs(r - 1, c) # check up dfs(r, c + 1) # check right dfs(r, c - 1) # check left for r from 0 to rowCount - 1: for c from 0 to colCount - 1: if grid[r][c] == \'1\': count += 1 dfs(r, c) return count ---Input--- The first line of input contains the number of test cases (T). For each test case: - The first line contains two integers R and C, the number of rows and columns in the grid. - The next R lines each contain a string of C characters, representing the grid. ---Output--- For each test case, output the number of islands. ---Sample Input--- 2 4 5 11000 11000 00100 00011 4 4 1111 0000 0110 0010 ---Sample Output--- 3 2 ---Explanation--- For the first test case: - The grid has 3 separate islands: the first island is in the top left corner (formed by the first two rows and first two columns), the second island is in the middle (third row, third column) and the third island is in the bottom right corner (last row, last two columns). For the second test case: - The grid has 2 separate islands: the first island is in the first row, and the second island is formed by the non-zero cells in the third and fourth rows.","solution":"def island_count(grid): Returns the number of islands in the given grid. if not grid: return 0 rowCount = len(grid) colCount = len(grid[0]) count = 0 def dfs(r, c): if r < 0 or r >= rowCount or c < 0 or c >= colCount or grid[r][c] == \'0\': return grid[r][c] = \'0\' # mark as visited dfs(r + 1, c) # check down dfs(r - 1, c) # check up dfs(r, c + 1) # check right dfs(r, c - 1) # check left for r in range(rowCount): for c in range(colCount): if grid[r][c] == \'1\': count += 1 dfs(r, c) return count def process_test_cases(test_cases): results = [] for (rows, cols, grid) in test_cases: grid_list = [list(row) for row in grid] results.append(island_count(grid_list)) return results"},{"question":"Write a function `find_anagrams` that takes two arguments: a word (string) and a list of words (list of strings). The function should return a list of words from the provided list that are anagrams of the given word. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. # Constraints - The given word and the words in the list may contain only lowercase alphabets. - The list of words may contain duplicates. - The given word and words in the list will have a length between 1 and 100. # Example ```python # Example 1 word = \\"listen\\" word_list = [\\"enlists\\", \\"google\\", \\"inlets\\", \\"banana\\"] find_anagrams(word, word_list) => [\\"inlets\\"] # Example 2 word = \\"race\\" word_list = [\\"care\\", \\"acre\\", \\"race\\", \\"races\\"] find_anagrams(word, word_list) => [\\"care\\", \\"acre\\", \\"race\\"] # Example 3 word = \\"hello\\" word_list = [\\"hello\\", \\"olelh\\", \\"world\\", \\"loleh\\"] find_anagrams(word, word_list) => [\\"hello\\", \\"olelh\\", \\"loleh\\"] # Example 4 word = \\"a\\" word_list = [\\"a\\", \\"b\\", \\"aa\\", \\"a\\"] find_anagrams(word, word_list) => [\\"a\\", \\"a\\"] ``` # Function Signature ```python def find_anagrams(word: str, word_list: list) -> list: pass ```","solution":"def find_anagrams(word, word_list): Returns a list of words from the provided word_list that are anagrams of the given word. sorted_word = \'\'.join(sorted(word)) return [w for w in word_list if \'\'.join(sorted(w)) == sorted_word]"},{"question":"Given an integer array `nums`, return `True` if any value appears at least twice in the array, and return `False` if every element is distinct. Implement the function `contains_duplicate(nums: List[int]) -> bool`. Examples ```python contains_duplicate([1, 2, 3, 1]) ==> True contains_duplicate([1, 2, 3, 4]) ==> False contains_duplicate([1, 1, 1, 3, 3, 4, 3, 2, 4, 2]) ==> True contains_duplicate([]) ==> False contains_duplicate([1]) ==> False ```","solution":"def contains_duplicate(nums): Returns True if any value appears at least twice in the array, and returns False if every element is distinct. return len(nums) != len(set(nums))"},{"question":"You are given an integer array `A`. Create an array `B` such that for each element `B[i]`, the value is equal to the number of elements in `A` that are less than or equal to `A[i]`. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of elements in array `A`. The second line contains `n` space-separated integers: `A[1], A[2], ..., A[n]` (1 ≤ A[i] ≤ 10^9), the elements of array `A`. -----Output----- Output a single line containing `n` space-separated integers representing the values of array `B`. -----Examples----- Input 5 4 2 9 1 7 Output 3 2 5 1 4 Input 3 3 3 3 Output 3 3 3 -----Note----- In the first example, the array A is [4, 2, 9, 1, 7]. For each element in A: - 4 has 3 elements (including itself) that are less than or equal to 4: [1, 2, 4] - 2 has 2 elements that are less than or equal to 2: [1, 2] - 9 has 5 elements: [1, 2, 4, 7, 9] - 1 has 1 element that is less than or equal to 1: [1] - 7 has 4 elements: [1, 2, 4, 7] So, B is [3, 2, 5, 1, 4]. In the second example, since all elements are equal, every element is less than or equal to all other elements, resulting in B being [3, 3, 3].","solution":"def count_less_equal_elements(A): Returns an array B such that for each element B[i], the value is equal to the number of elements in A that are less than or equal to A[i]. sorted_A = sorted(A) B = [] for num in A: count = binary_search_find_count(sorted_A, num) B.append(count) return B def binary_search_find_count(sorted_A, target): Uses binary search to find the number of elements in sorted_A that are less than or equal to target. left, right = 0, len(sorted_A) while left < right: mid = (left + right) // 2 if sorted_A[mid] <= target: left = mid + 1 else: right = mid return left"},{"question":"You have been hired as a software engineer at an online text editor startup. The team is working on implementing a new feature: rotating blocks of text by 90 degrees. Given a string `s` of `n` lines (n >= 2), each containing `m` characters (m >= 2), you are to implement the following transformations: - Rotate Right 90: rotate_right (or rotateRight or rotate_right) ``` rotate_right(s) => Rotate the string `s` 90 degrees clockwise. Example: s = \\"abcdnefghnijklnmnop\\" rotate_right(s) => \\"mieannjfbnokgcnplhd\\" ``` - Rotate Left 90: rotate_left (or rotateLeft or rotate_left) ``` rotate_left(s) => Rotate the string `s` 90 degrees counterclockwise. Example: s = \\"abcdnefghnijklnmnop\\" rotate_left(s) => \\"dhlpncgkonbfjnnaeim\\" ``` - Rotations can be represented visually as: Rotating Right 90: ``` abcd --> miea efgh njfb ijkl okgc mnop plhd ``` Rotating Left 90: ``` abcd --> dhlp efgh cgko ijkl bfjn mnop aeim ``` # Task: - Write these two functions. and - High-order function `apply_rotation(fct, s)` where: - `fct` is the function of one variable `f` to apply to the string `s` - `fct` will be one of `rotate_right, rotate_left` # Example: ``` s = \\"abcdnefghnijklnmnop\\" apply_rotation(rotate_right, s) => \\"mieannjfbnokgcnplhd\\" apply_rotation(rotate_left, s) => \\"dhlpncgkonbfjnnaeim\\" ``` # Note: The form of the parameter `fct` in `apply_rotation` changes according to the language. You can see each form according to the language in \\"Sample Tests\\".","solution":"def rotate_right(s): Rotates the string `s` 90 degrees clockwise. Args: s (str): The input string with multiple lines Returns: str: The rotated string lines = s.split(\'n\') rotated = [\'\'.join(line[i] for line in reversed(lines)) for i in range(len(lines[0]))] return \'n\'.join(rotated) def rotate_left(s): Rotates the string `s` 90 degrees counterclockwise. Args: s (str): The input string with multiple lines Returns: str: The rotated string lines = s.split(\'n\') rotated = [\'\'.join(line[len(line)-1-i] for line in lines) for i in range(len(lines[0]))] return \'n\'.join(rotated) def apply_rotation(fct, s): Applies the rotation function `fct` to the string `s`. Args: fct (function): The rotation function to apply s (str): The input string with multiple lines Returns: str: The rotated string return fct(s)"},{"question":"Write a function `wordWrap` that takes a string `text` and an integer `limit` as its parameters. The function should return a new string where the original text is broken into lines of a maximum length specified by `limit`. Words should not be split between lines; if a word would exceed the limit, it should be moved to the next line. For example, for `wordWrap(\\"The quick brown fox jumps over the lazy dog\\", 10)`, the result should be: ``` The quick brown fox jumps over the lazy dog ``` You must consider the following: * If `limit` is less than the length of the longest word in `text`, the function should raise an error. * Properly handle multiple spaces between words in `text`. * Take care of corner cases where `text` could be an empty string or consist entirely of spaces.","solution":"def wordWrap(text, limit): if not text.strip(): return \\"\\" words = text.split() if any(len(word) > limit for word in words): raise ValueError(\\"The limit is less than the length of the longest word in the text.\\") wrapped_text = [] current_line = [] current_length = 0 for word in words: if current_length + len(word) + len(current_line) > limit: wrapped_text.append(\\" \\".join(current_line)) current_line = [word] current_length = len(word) else: current_line.append(word) current_length += len(word) if current_line: wrapped_text.append(\\" \\".join(current_line)) return \\"n\\".join(wrapped_text)"},{"question":"You are given a list of dictionaries, where each dictionary contains information about a product, including its name, price, and category. Your task is to write a function that takes this list of dictionaries and a category name as arguments, and returns a dictionary summarizing the total number of products and the average price of the products in the specified category. If the category is not found in any product, return a dictionary with the count set to 0 and the average price set to 0.0. ```python products = [ {\'name\': \'Laptop\', \'price\': 1000, \'category\': \'Electronics\'}, {\'name\': \'Headphones\', \'price\': 100, \'category\': \'Electronics\'}, {\'name\': \'Pizza\', \'price\': 10, \'category\': \'Food\'}, {\'name\': \'Burger\', \'price\': 8, \'category\': \'Food\'} ] ``` --- # Examples ```python >>> category_summary(products, \'Electronics\') {\'count\': 2, \'average_price\': 550.0} >>> category_summary(products, \'Food\') {\'count\': 2, \'average_price\': 9.0} >>> category_summary(products, \'Clothing\') {\'count\': 0, \'average_price\': 0.0} ``` Good luck!","solution":"def category_summary(products, category): Returns the total number of products and the average price of the products in the specified category. If the category is not found, returns count as 0 and average price as 0.0. Args: products (list of dict): List of dictionaries with product details. category (str): The category for which to summarize products. Returns: dict: Dictionary containing \'count\' and \'average_price\' for the specified category. total_price = 0 count = 0 for product in products: if product[\'category\'] == category: count += 1 total_price += product[\'price\'] average_price = (total_price / count) if count > 0 else 0.0 return {\'count\': count, \'average_price\': average_price}"},{"question":"You are a cybersecurity analyst and need to sanitize sensitive data from logs before sharing them with your team. Specifically, you need to anonymize email addresses in the logs to protect employee privacy. Your task is to write a function that takes a string containing multiple lines of emails and text, and replaces all occurrences of email addresses with the string \\"[EMAIL REDACTED]\\". Email addresses follow these rules: 1. Consist of a local part, an \\"@\\" symbol, followed by a domain part. 2. The local part can include letters, digits, dots (.), underscores (_), and hyphens (-). 3. The domain part must contain at least one dot and only letters or digits between the dots. 4. Both parts must start and end with a letter or digit. Write a function `sanitize_emails(log: str) -> str` that performs the email replacement. # Examples **Input:** ``` Here are the new instructions for today. Please contact jane.doe@example.com for any questions. Additionally, reach out to john20_doe@company.co.uk about the project update. Thank you! ``` **Output:** ``` Here are the new instructions for today. Please contact [EMAIL REDACTED] for any questions. Additionally, reach out to [EMAIL REDACTED] about the project update. Thank you! ``` ```if:python # A regular expression for matching email addresses might be helpful for this task. import re ``` # Constraints - The input string can contain multiple lines and email addresses. - Other strings in the input should not be altered. - Email addresses will always comply with the stated rules.","solution":"import re def sanitize_emails(log: str) -> str: Replaces all occurrences of email addresses in the log with the string \\"[EMAIL REDACTED]\\". email_pattern = re.compile(r\'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b\') sanitized_log = email_pattern.sub(\\"[EMAIL REDACTED]\\", log) return sanitized_log"},{"question":"Alice is trying to solve a problem involving a sequence of integers. She needs to perform several operations to convert an initial sequence into a target sequence. The allowed operations are: 1. Increase any element of the sequence by 1. 2. Decrease any element of the sequence by 1. Alice wants to know the minimum number of operations required to transform the initial sequence into the target sequence. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the sequence. The second line contains n space-separated integers a1, a2, ..., an (−10^4 ≤ ai ≤ 10^4) — the elements of the initial sequence. The third line contains n space-separated integers b1, b2, ..., bn (−10^4 ≤ bi ≤ 10^4) — the elements of the target sequence. -----Output----- Output a single integer — the minimum number of operations required to transform the initial sequence into the target sequence. -----Examples----- Input 3 1 2 3 3 2 1 Output 4 Input 2 -1 4 1 0 Output 6","solution":"def min_operations(initial, target): Returns the minimum number of operations required to transform the initial sequence into the target sequence. n = len(initial) operations = 0 for i in range(n): operations += abs(target[i] - initial[i]) return operations"},{"question":"Mira the Merchant wants to stock her shop. She starts with an empty shop and a list of items she wants to stock. Each item has a positive integer weight associated with it and a positive integer value representing its profitability. Mira\'s shop can hold items up to a certain maximum capacity. Given the maximum capacity of the shop and the list of items with their respective weights and values, Mira wants to maximize the total value of the items in her shop without exceeding the maximum weight capacity. Help Mira determine the maximum total value she can achieve by selecting items such that their total weight does not exceed the given capacity. -----Input----- Each test contains multiple test cases. The first line contains t (1 le t le 100) — the number of test cases. Description of the test cases follows. The first line of each test case contains an integer W (1 le W le 10^4) — the maximum weight capacity of the shop. The second line of each test case contains an integer n (1 le n le 100) — the number of items. Each of the next n lines contains two integers w_i and v_i (1 le w_i, v_i le 1000) — the weight and value of the i-th item. -----Output----- For each test case, print the maximum total value Mira can achieve by selecting items without exceeding the maximum weight capacity of the shop. -----Examples----- Input 2 50 3 10 60 20 100 30 120 10 1 10 500 Output 220 500 -----Note----- In the first sample, Mira can choose the item with weight 10 and value 60, and the item with weight 20 and value 100, for a total value of 160. Alternatively, she can choose the item with weight 30 and value 120, which isn\'t optimal since it results in a lower total value. Adding the items 10 and 20 means the total value will be 60 + 160 = 220 which is the maximum. In the second sample, Mira can simply choose the single item available as its weight does not exceed the capacity. This results in a total value of 500.","solution":"def knapsack(W, items): Solves the 0/1 Knapsack problem for a given capacity W and a list of items. Each item is represented by a tuple (weight, value). Returns the maximum total value that can be achieved with a weight <= W. n = len(items) dp = [[0 for _ in range(W + 1)] for _ in range(n + 1)] for i in range(1, n + 1): weight, value = items[i - 1] for w in range(W + 1): if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] return dp[n][W] def solve_knapsack_problems(test_cases): Solves multiple test cases of the knapsack problem. test_cases is a list of tuples, each containing: - maximum weight capacity W - a list of items, where each item is a tuple (weight, value) Returns a list of results, each being the maximum total value for the test case. results = [] for W, items in test_cases: result = knapsack(W, items) results.append(result) return results"},{"question":"There are N trees in a row, each initially having a height of 1 unit. Every day, a gardener comes and performs specific operations to increase the height of some trees. The gardener increases the height of the x^{th} tree (1 leq x leq N) by one unit if the number of divisors of x is an odd number. After N days, you need to determine the number of trees that have a height of exactly 3 units. -----Input:----- - The first line will contain T, the number of test cases. - Each test case contains one integer N. -----Output:----- For each test case, output in a single line the number of trees that have a height of exactly 3 units. -----Constraints----- - 1 leq T leq 10^5 - 1 leq N leq 10^9 -----Sample Input:----- 2 6 10 -----Sample Output:----- 0 0 -----EXPLANATION:----- For N=6, the heights of the trees after N days are as follows: - Tree 1: 2 units (divisors: [1]) - Tree 2: 1 unit (divisors: [1, 2]) - Tree 3: 1 unit (divisors: [1, 3]) - Tree 4: 1 unit (divisors: [1, 2, 4]) - Tree 5: 1 unit (divisors: [1, 5]) - Tree 6: 1 unit (divisors: [1, 2, 3, 6]) None of the trees have a height of 3 units. Hence the output is 0. For N=10, similarly, no tree achieves a height of 3 units. Thus, the output is 0.","solution":"def number_of_trees_with_height_3(T, test_cases): results = [] # Only the positions that are perfect squares have an odd number of divisors, # those will be the positions that the tree gets changed in height. # Each perfect square position will change height 3 times. # Hence for N, the count of perfect squares <= N will be the count of trees with height 3. for N in test_cases: count_of_perfect_squares = int(N**0.5) results.append(count_of_perfect_squares) return results"},{"question":"You are given an array of integers where each integer is between 1 and N (inclusive), where N is the length of the array. Your task is to determine the first duplicate number for which the second occurrence has the minimal index. If there are no such elements, return -1. For instance, in the array a = [2, 3, 3, 1, 5, 2], the answer is 3. The second occurrence of 3 has the minimal index among the other duplicates 3 and 2. Write a function `firstDuplicate` that takes a list of integers a and returns the first duplicated number with the minimal index of second occurrence. If there are no duplicates, return -1. -----Input----- - An array a of integers (1 leq |a| leq 10^5, 1 leq a[i] leq |a|). -----Output----- - An integer that represents the first duplicated number for which the second occurrence has the minimal index. If there are no such elements, return -1. -----Example----- Input [2, 3, 3, 1, 5, 2] Output 3 Input [1, 2, 3, 4, 5] Output -1 -----Note----- In the first example, 3 and 2 are both duplicate numbers. However, 3 is the first duplicate number such that the second occurrence of 3 comes before the second occurrence of 2. In the second example, there are no duplicates in the array. Therefore, the answer is -1.","solution":"def firstDuplicate(a): Returns the first duplicated number for which the second occurrence has the minimal index. If there are no such elements, returns -1. :param a: List[int], a list of integers. :return: int, the first duplicate number with minimal index of second occurrence. seen = set() for number in a: if number in seen: return number seen.add(number) return -1"},{"question":"Consider a rectangular grid where you can move from one cell to another either to the right or downward. Write a function `unique_paths(m, n)` that takes two integers `m` and `n` representing the dimensions of the grid (number of rows and columns respectively) and returns the number of unique paths from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1). For example, the grid below has 3 rows and 7 columns: ``` S . . . . . . . . . . . . . . . . . . . F ``` Where `S` is the start point (0, 0) and `F` is the finish point (2, 6). # Constraints - `1 <= m, n <= 100` Use dynamic programming to compute the number of unique paths. # Example ```python unique_paths(3, 7) # Output: 28 unique_paths(3, 2) # Output: 3 unique_paths(2, 2) # Output: 2 ``` # Explanation For the first example with `unique_paths(3, 7)`, one possible path is: ``` → → → → → → ↓ ↓ ``` For the second example with `unique_paths(3, 2)`, possible paths are: ``` → ↓ ↓ → → ↓ ↓ → ↓ ```","solution":"def unique_paths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. # Initialize a 2D array with 1s since there\'s only one way to move either right or down dp = [[1] * n for _ in range(m)] # Fill the dp array with the number of unique paths to each cell for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function that takes two strings, str1 and str2, as parameters and returns a boolean value indicating whether str2 is an anagram of str1. An anagram is a word formed by rearranging the letters of another word, using all the original letters exactly once. For example, if the input strings are \\"listen\\" and \\"silent\\", the function should return True. If the input strings are \\"hello\\" and \\"world\\", the function should return False.","solution":"def are_anagrams(str1, str2): Returns True if str2 is an anagram of str1, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Given an array of integers and a target value, write a function that determines whether there are two distinct integers in the array whose sum equals the target value. If such a pair exists, return the indices of the two numbers. If no such pair exists, return an empty array. Note: - You may assume that each input would have exactly one solution. - You may not use the same element twice. Example 1: Input: array = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because array[0] + array[1] == 9, we return [0, 1]. Example 2: Input: array = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because array[1] + array[2] == 6, we return [1, 2]. Example 3: Input: array = [3, 3], target = 6 Output: [0, 1] Explanation: Because array[0] + array[1] == 6, we return [0, 1].","solution":"def find_pair_with_target(array, target): Returns indices of the two numbers that add up to the target. If no such pair exists, returns an empty list. seen = {} for idx, num in enumerate(array): complement = target - num if complement in seen: return [seen[complement], idx] seen[num] = idx return []"},{"question":"John is an avid book reader with a vast collection at home. He likes to categorize his books based on their genre, but sometimes, he buys duplicate books unknowingly. He wants to create an inventory where each book title is listed exactly once, along with the number of copies he owns. Help John by writing a program that processes the list of books he has, removes duplicates, and counts the total number of copies for each unique book title. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the number of book entries. - The next N lines each contain a string Title representing the book title. -----Output:----- For each test case, output the distinct titles in alphabetical order, followed by the count of copies of each title. Each title and its count should be printed on a new line separated by a space. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 100 - 1 leq Title leq 50 (length of the title) -----Sample Input:----- 2 3 Harry_Potter The_Hobbit Harry_Potter 4 War_and_Peace Anna_Karenina War_and_Peace The_Hobbit -----Sample Output:----- Harry_Potter 2 The_Hobbit 1 Anna_Karenina 1 The_Hobbit 1 War_and_Peace 2","solution":"def process_books(T, test_cases): result = [] for i in range(T): N = test_cases[i][0] books = test_cases[i][1] book_count = {} for title in books: if title in book_count: book_count[title] += 1 else: book_count[title] = 1 sorted_books = sorted(book_count.items()) for title, count in sorted_books: result.append(f\\"{title} {count}\\") return result # Example usage T = 2 test_cases = [ (3, [\\"Harry_Potter\\", \\"The_Hobbit\\", \\"Harry_Potter\\"]), (4, [\\"War_and_Peace\\", \\"Anna_Karenina\\", \\"War_and_Peace\\", \\"The_Hobbit\\"]) ] for line in process_books(T, test_cases): print(line)"},{"question":"Joe is an avid gardener and has a row of n flower pots placed in a straight line. Each pot can either contain a flower or be empty. Joe has a strategy to water his flowers efficiently and save water. He only needs to water a flower once to ensure its health. Given a string `pots` of length n where the i-th character is \\"1\\" if there is a flower in the i-th pot and \\"0\\" if the pot is empty, Joe wants to use a special watering system. The watering system can water all flowers within a range of exactly k contiguous pots in one go. Joe wants to ensure all flowers are watered with the minimum number of watering actions. Since pots can vary in size and number in different test cases, help Joe to determine the minimum number of times he needs to use the watering system for all flowers to be watered. -----Input----- The first line contains one positive integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. Each test case starts with an integer k (1 le k le n) indicating the range of each watering action. The next line contains a string `pots` of length n (1 le n le 1000), representing the pots. The sum of n over all test cases will not exceed 10^5. -----Output----- For each test case, output one integer — the minimum number of watering actions needed to water all the flowers in the row. -----Example----- Input 3 2 11001 3 100100 4 1111 Output 2 2 1 -----Note----- In the first test case, the minimum number of watering actions needed is 2: Joe can water the first two flowers with one action and the last flower with another action. In the second test case, Joe can water flowers at the 1st and 3rd positions together with one action, and the flower at the 5th position with another action. In the third test case, Joe can water all the flowers in one action because the range of the watering system k = 4 covers all flowers.","solution":"def min_waterings(t, test_cases): results = [] for k, pots in test_cases: n = len(pots) actions = 0 i = 0 while i < n: if pots[i] == \'1\': actions += 1 i += k else: i += 1 results.append(actions) return results"},{"question":"Richard is planning a vacation and wants to visit several cities. He has a list of cities and the distances between each pair of cities. Richard wants to find a route that will allow him to visit all cities exactly once and return to the starting city with the minimum total distance traveled. This is a classical Traveling Salesman Problem (TSP). ----Input:---- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer n, the number of cities. - The next n lines contain n integers each, representing a matrix where the entry in the i-th row and j-th column is the distance between the i-th and j-th cities. ----Output:---- For each test case, print the minimum total distance Richard needs to travel to visit all cities exactly once and return to the starting city. ----Constraints:---- - 1 leq T leq 10 - 2 leq n leq 10 - 0 leq distance_{ij} leq 1000 - The distance from a city to itself is 0 (distance_{ii} = 0), and the distance between different cities is positive (distance_{ij} > 0 for i ne j). ----Sample Input:---- ``` 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 5 9 5 0 10 9 10 0 ``` ----Sample Output:---- ``` 80 24 ``` ----Explanation:---- In the first test case, the minimum travel distance to visit all cities exactly once and return to the starting city is 80. In the second test case, the minimum travel distance to visit all cities exactly once and return to the starting city is 24.","solution":"from itertools import permutations def calculate_tsp(n, matrix): def calculate_path_length(path): total_length = 0 for i in range(len(path) - 1): total_length += matrix[path[i]][path[i+1]] total_length += matrix[path[-1]][path[0]] return total_length cities = list(range(n)) min_path_length = float(\'inf\') for perm in permutations(cities): path_length = calculate_path_length(perm) if path_length < min_path_length: min_path_length = path_length return min_path_length def find_min_tsp_distances(T, test_cases): results = [] for i in range(T): n, matrix = test_cases[i] min_distance = calculate_tsp(n, matrix) results.append(min_distance) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(input_lines[index]) index += 1 matrix = [] for _ in range(n): row = list(map(int, input_lines[index].split())) index += 1 matrix.append(row) test_cases.append((n, matrix)) return T, test_cases def tsp_solver(input_str): T, test_cases = parse_input(input_str) results = find_min_tsp_distances(T, test_cases) return results"},{"question":"Write a function to rotate an NxN matrix, composed of integers, 90 degrees clockwise. Example inputs and outputs: ``` Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] Input: [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] Output: [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]] ```","solution":"def rotate_matrix_90_deg_clockwise(matrix): Rotates an NxN matrix 90 degrees clockwise. Args: matrix: List of List of integers representing the NxN matrix Returns: A new matrix which is the 90-degree clockwise rotation of the input matrix n = len(matrix) result = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): result[j][n - 1 - i] = matrix[i][j] return result"},{"question":"Task Create a function that converts a Roman numeral to an integer. The function should handle Roman numerals from I to MMMCMXCIX (1 to 3999). # Example For roman = \\"III\\", the output should be 3. For roman = \\"IX\\", the output should be 9. For roman = \\"LVIII\\", the output should be 58. For roman = \\"MCMXCIV\\", the output should be 1994. # Input/Output - `[input]` string `roman` - `[output]` an integer representing the converted Roman numeral","solution":"def roman_to_integer(roman): Converts a Roman numeral to an integer. :param roman: str: The Roman numeral to convert. :return: int: The integer representation of the Roman numeral. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in roman[::-1]: current_value = roman_values[char] if current_value >= prev_value: total += current_value else: total -= current_value prev_value = current_value return total"},{"question":"Write a function to check if a given string contains every letter of the alphabet at least once. The function should ignore case and non-alphabet characters. ```JS Examples: 1) \\"The quick brown fox jumps over a lazy dog\\" => true because it contains every letter of the alphabet at least once. 2) \\"Hello, World!\\" => false because it does not contain every letter of the alphabet. 3) \\"Cwm fjord bank glyphs vext quiz\\" => true because it contains every letter of the alphabet at least once. 4) \\"Pack my box with five dozen liquor jugs\\" => true because it contains every letter of the alphabet at least once. 5) \\"A wizard’s job is to vex chumps quickly in fog.\\" => true because it contains every letter of the alphabet at least once. ```","solution":"def contains_all_alphabet(string): Checks if the given string contains every letter of the alphabet at least once. Ignores case and non-alphabet characters. alphabet_set = set(\\"abcdefghijklmnopqrstuvwxyz\\") string_set = set(c.lower() for c in string if c.isalpha()) return alphabet_set <= string_set"},{"question":"You are given an unsorted array of integers and a number k. Write a function to find the k-th smallest element in the array. Example 1: Input: array = [7, 10, 4, 3, 20, 15], k = 3 Output: 7 Explanation: The 3rd smallest element in the array is 7. Example 2: Input: array = [7, 10, 4, 3, 20, 15], k = 4 Output: 10 Explanation: The 4th smallest element in the array is 10. Constraints: - 1 <= k <= array.length - 1 <= array.length <= 10^5 - -10^9 <= array[i] <= 10^9","solution":"def kth_smallest_element(array, k): Finds the k-th smallest element in the array. :param array: List of integers :param k: The position (1-based) of the smallest element to find :return: The k-th smallest element in the array array.sort() return array[k-1]"},{"question":"Write a function that finds the most frequent integer in an array. If there is a tie for the most frequent integer, return the smallest one. ```python most_frequent([1, 2, 3, 1, 2, 1]) = 1 because 1 occurs 3 times. most_frequent([4, 2, 4, 2, 3, 3]) = 2 because all occur 2 times but 2 is smallest. ``` You can assume the array is non-empty and contains only integers. More examples will be provided in the test cases.","solution":"def most_frequent(arr): Returns the most frequent integer in the array. If there is a tie for the most frequent integer, returns the smallest one. from collections import Counter # Create a frequency dictionary freq = Counter(arr) # Sort items by frequency (descending) and by number (ascending) sorted_items = sorted(freq.items(), key=lambda x: (-x[1], x[0])) # The most frequent (smallest in case of tie) is the first element of sorted list return sorted_items[0][0]"},{"question":"# Preface You are part of a team developing a delivery routing system for a local logistics company. The system needs to ensure that packages are delivered in the most time-efficient manner. # Problem The streets are organized in a grid system, and the delivery truck can only travel horizontally or vertically (not diagonally). You need to determine the shortest route that the truck should take to deliver a package from the start location to the destination. You are given the start location and the destination as follows: ```python start = [x1, y1] destination = [x2, y2] ``` Where `x1`, `y1`, `x2`, and `y2` are integer coordinates within the grid. Your task is to write a function that calculates the minimum number of moves required for the truck to travel from the start location to the destination. The desired output should be an integer indicating the number of moves. Example: ```python start = [3, 5] destination = [6, 9] ``` The output should be: ``` 7 ``` In this case, the truck will move 3 steps horizontally from `x=3` to `x=6` and 4 steps vertically from `y=5` to `y=9`, resulting in a total of 7 moves. Note: - Ensure your function handles various start and destination locations within a reasonable grid limit (e.g., x and y coordinates ranging from 0 to 1000).","solution":"def min_moves(start, destination): Calculates the minimum number of moves required for the truck to travel from the start location to the destination on a grid. Parameters: start (list): A list containing the x and y coordinates of the start location. destination (list): A list containing the x and y coordinates of the destination. Returns: int: The minimum number of moves required. x1, y1 = start x2, y2 = destination return abs(x2 - x1) + abs(y2 - y1)"},{"question":"You are given a sequence of operations to perform on a stack. The stack supports the following operations: 1. `push X` - Push integer X onto the stack. 2. `pop` - Remove the top element of the stack. If the stack is empty, this operation does nothing. 3. `inc K X` - Increment the bottom K elements of the stack by X. If there are fewer than K elements, increment all the elements. Your task is to simulate these operations and print the top element of the stack after each operation. -----Input----- - The first line of the input contains an integer N denoting the number of operations. - Each of the next N lines contains one of the three operations mentioned above. -----Output----- For each operation, print the top element of the stack. If the stack is empty, print \\"EMPTY\\". -----Constraints----- - 1 le N le 10^5 - 1 le X le 10^9 - 1 le K le N -----Example Input----- 6 push 4 push 8 pop inc 2 3 push 6 inc 3 1 -----Example Output----- 4 8 4 7 6 7 -----Explanation----- 1. After `push 4`, the stack is [4]. The top element is 4. 2. After `push 8`, the stack is [4, 8]. The top element is 8. 3. After `pop`, the stack is [4]. The top element is 4. 4. After `inc 2 3`, the stack is [7]. The top element is 7. 5. After `push 6`, the stack is [7, 6]. The top element is 6. 6. After `inc 3 1`, the stack is [8, 7]. The top element is 7.","solution":"def stack_operations(operations): stack = [] result = [] for operation in operations: if operation.startswith(\\"push\\"): _, x = operation.split() stack.append(int(x)) elif operation == \\"pop\\": if stack: stack.pop() elif operation.startswith(\\"inc\\"): _, k, x = operation.split() k, x = int(k), int(x) for i in range(min(k, len(stack))): stack[i] += x if stack: result.append(stack[-1]) else: result.append(\\"EMPTY\\") return result"},{"question":"Write a function named **balanceChecker** that takes in a single argument - **expression** - which is a string containing various brackets: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. The function should return **true** if the string contains balanced brackets and **false** otherwise. A set of brackets is considered balanced if each opening bracket has a corresponding closing bracket of the same type (e.g., \'(\', \'{\', \'[\') and they are correctly nested. For instance: - \\"{[()]}\\" is a balanced expression - \\"{[(])}\\" is not a balanced expression - \\"{{[[(())]]}}\\" is a balanced expression Write the function **balanceChecker(expression)** to determine if the provided string has balanced brackets. **Constraints:** - The input string will not be empty and will consist of only the characters: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'.","solution":"def balanceChecker(expression): Returns True if the input string contains balanced brackets, otherwise False. # Stack to keep track of opening brackets stack = [] # Mapping of closing to opening brackets bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} # Iterate through each character in the expression for char in expression: # If the character is a closing bracket if char in bracket_map: # Pop an element from stack if available, else use a dummy value top_element = stack.pop() if stack else \'#\' # Check if the mapping for the closing bracket matches the top element of the stack if bracket_map[char] != top_element: return False else: # If it\'s an opening bracket, push to stack stack.append(char) # Check if stack is empty (all opening brackets have been matched) return not stack"},{"question":"Given an array of integers, find the maximum product of any three numbers in the array. Function Signature: ```python def maximum_product_of_three(nums: List[int]) -> int: ``` Input: - A list of integers `nums` with length `n` where `3 <= n <= 10^4` and each integer `nums[i]` is in the range `[-10^3, 10^3]`. Output: - A single integer representing the maximum product of any three integers in the given list. Examples: ```python assert maximum_product_of_three([1, 2, 3]) == 6 assert maximum_product_of_three([-10, -10, 5, 2]) == 500 ``` Constraints: 1. The function should consider both the cases where the largest product is obtained from three positive numbers or two negative and one positive number. 2. The algorithm should achieve at least O(n log n) time complexity. Explanation: The problem requires calculating the highest possible product from any three integers in the input list. This can be achieved by carefully evaluating either the largest positive numbers or the smallest (most negative) numbers combined with the largest positive numbers.","solution":"from typing import List def maximum_product_of_three(nums: List[int]) -> int: Returns the maximum product of any three numbers in the array `nums`. nums.sort() # The maximum product can be either by largest three numbers or two smallest and the largest. return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"You are given a string of text that represents a mathematical expression. The string contains only non-negative integers and the operators \'+\', \'-\', \'*\', and \'/\'. There are no parentheses, and the operators should be evaluated in the usual order of precedence (i.e., multiplication and division before addition and subtraction). Write a function `evaluate_expression(expression: String) -> float` that takes such a string as input, and returns the result of evaluating the expression as a floating-point number. The input string will be a valid mathematical expression. For example: - `evaluate_expression(\\"3+5*2\\")` should return `13.0` - `evaluate_expression(\\"10+3/2\\")` should return `11.5` If the expression is empty, return `0.0`. Note: - Division results should always be treated as floating-point numbers. - Do not use the `eval()` function.","solution":"def evaluate_expression(expression: str) -> float: if not expression: return 0.0 def compute(operators, values): right = values.pop() left = values.pop() op = operators.pop() if op == \'+\': values.append(left + right) elif op == \'-\': values.append(left - right) elif op == \'*\': values.append(left * right) elif op == \'/\': values.append(left / right) operators = [] values = [] i = 0 length = len(expression) while i < length: if expression[i].isdigit(): num = 0 while i < length and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 values.append(num) i -= 1 elif expression[i] in \'+-\': while operators and operators[-1] in \'+-*/\': compute(operators, values) operators.append(expression[i]) elif expression[i] in \'*/\': while operators and operators[-1] in \'*/\': compute(operators, values) operators.append(expression[i]) i += 1 while operators: compute(operators, values) return float(values[0])"},{"question":"**Problem Description:** Jenny and Mark are designing a new syncing system for their distributed file storage. Each file is associated with a unique version number. They need to find the maximum difference between the version numbers of any two files in a given list. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each of the next T lines contains an integer M (the number of files) followed by M space-separated integers representing the version numbers of the files. -----Output----- For each input, print the maximum difference between the version numbers of the files. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ M ≤ 105 - 1 ≤ version number ≤ 109 - The sum of all M over all test cases does not exceed 106. -----Example----- Input: 2 3 1 4 5 5 2 7 3 10 6 Output: 4 8 -----Explanation----- For the first test case, the version numbers are [1, 4, 5] and the maximum difference is 5 - 1 = 4. For the second test case, the version numbers are [2, 7, 3, 10, 6] and the maximum difference is 10 - 2 = 8.","solution":"def max_diff_in_versions(test_cases): Returns the maximum difference between any two version numbers in each of the test cases. Parameters: test_cases (list of dict): List of dictionaries where each dictionary contains: \'num_files\' (int): Number of files \'versions\' (list of int): List of version numbers Returns: list of int: List of maximum differences for each test case results = [] for case in test_cases: versions = case[\'versions\'] max_version = max(versions) min_version = min(versions) results.append(max_version - min_version) return results"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid is either empty, contains an obstacle, or contains a treasure. You need to find the shortest path from the top-left corner of the grid to the bottom-right corner, collecting as many treasures as possible on your way. You can move in four directions: up, down, left, or right. You can only move to an empty cell or a cell with a treasure. You cannot move into or through cells containing obstacles. -----Input----- The first line contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid. The next n lines each contain m characters. Each character is one of the following: - \'.\' representing an empty cell - \'#\' representing an obstacle - \'T\' representing a cell with a treasure -----Output----- If there is no path from the top-left corner to the bottom-right corner, print \\"-1\\". Otherwise, print the length of the shortest path and the number of treasures collected along the way. -----Example----- Input 5 5 T...T .#.#. T..... .#.#. T...T Output 8 3 -----Note----- In the given example, the shortest path that collects the maximum number of treasures is to move down, down, right, right, up, up, right, right, collecting 3 treasures along the way.","solution":"from collections import deque def find_shortest_path(n, m, grid): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] != \'#\' visited = [[[False, 0] for _ in range(m)] for _ in range(n)] queue = deque([(0, 0, 0, 0)]) # (row, col, distance, treasures) while queue: x, y, dist, treasures = queue.popleft() if not is_valid(x, y) or visited[x][y][0]: continue visited[x][y] = [True, treasures] if (x, y) == (n-1, m-1): return dist, treasures for dx, dy in directions: new_x, new_y = x + dx, y + dy if is_valid(new_x, new_y): extra_treasure = 1 if grid[new_x][new_y] == \'T\' else 0 queue.append((new_x, new_y, dist + 1, treasures + extra_treasure)) return -1 def shortest_path_with_treasures(n, m, grid): result = find_shortest_path(n, m, grid) if result == -1: return \\"-1\\" else: dist, treasures = result return f\\"{dist} {treasures}\\""},{"question":"Task: Create a function named `rotate_string(s, n)` that takes in a string `s` and an integer `n`, and returns a new string where every character in the original string is shifted to the right by `n` positions. When a character is shifted beyond the end of the string, it should wrap around to the beginning. # Rules: 1. `s` will be a non-empty string containing only lowercase letters. 2. `n` will be a non-negative integer. # Examples: * rotate_string(\\"abcdef\\", 2): * returns `\\"efabcd\\"` * rotate_string(\\"hello\\", 1): * returns `\\"ohell\\"` * rotate_string(\\"rotate\\", 3): * returns `\\"aterot\\"` * rotate_string(\\"example\\", 7): * returns `\\"example\\"` * rotate_string(\\"python\\", 0): * returns `\\"python\\"` * rotate_string(\\"shift\\", 10): * returns `\\"shift\\"`","solution":"def rotate_string(s, n): Rotates the string s to the right by n positions. length = len(s) n = n % length # Ensure n is within the bounds of the string length return s[-n:] + s[:-n]"},{"question":"You need to create a program that will take a string of mixed messages and return the string in such a way where each word\'s characters are reversed, but the word order remains unchanged. For example: ``` Input: \\"Hello World\\" Output: \\"olleH dlroW\\" ``` Write a function: ```python def reverse_words(text: str) -> str: ``` ```Fsharp let reverseWords (text: string) : string ``` Additional Specifications: - If the input string is null or empty, return the input string as is. - Consider only alphabetic characters and spaces. Assume there is exactly one space between each pair of words and no leading or trailing spaces.","solution":"def reverse_words(text: str) -> str: Takes a string of mixed messages and returns the string with each word\'s characters reversed, but the word order remains unchanged. Args: text (str): Input string with words. Returns: str: A string where each word\'s characters are reversed, but the word order is maintained. if text is None or text == \'\': return text return \' \'.join(word[::-1] for word in text.split())"},{"question":"# Task: You have to write a function `min_distance(points)` that receives a list of tuples representing points in a two-dimensional space and returns the minimum distance between any two distinct points. # Explanation: The input list will contain at least two points. Each point is represented as a tuple (x, y) where x and y are integers. The function should calculate the distance between every pair of points and return the smallest of these distances. Formula for Distance: The distance `d` between two points (x1, y1) and (x2, y2) is given by: [ d = sqrt{(x2 - x1)^2 + (y2 - y1)^2} ] Parameters: `points` (list of tuples of 2 integers): List containing coordinates of points in the 2D space. # Examples: * `min_distance([(0,0), (3,4), (6,8)])` should return `5.0` * `min_distance([(1,1), (-1,-1), (1,-1), (-1,1)])` should return `2.0` * `min_distance([(0,0), (0,1), (1,0), (1,1)])` should return `1.0` # Note: - The function should handle lists with a large number of points efficiently. - The input list will always contain at least two points.","solution":"import math def min_distance(points): Returns the minimum distance between any two distinct points in the list. :param points: List of tuples representing points in 2D space. :return: Minimum distance between any two points. min_dist = float(\'inf\') n = len(points) for i in range(n): for j in range(i + 1, n): dist = math.sqrt((points[j][0] - points[i][0])**2 + (points[j][1] - points[i][1])**2) if dist < min_dist: min_dist = dist return min_dist"},{"question":"Write a function that takes a string as input and returns the first character that is not repeated anywhere in the string. For example, if given the string `stress`, the first non-repeated character is `t`. If there are no non-repeated characters, the function should return an empty string. ```Haskell firstNonRepeatedCharacter(\\"stress\\") = \\"t\\" firstNonRepeatedCharacter(\\"aabbcc\\") = \\"\\" firstNonRepeatedCharacter(\\"abcdef\\") = \\"a\\" firstNonRepeatedCharacter(\\"\\") = \\"\\" ``` You can assume the input will always be a string. Good luck!","solution":"def first_non_repeated_character(s): Returns the first character in the string that is not repeated anywhere in the string. If all characters are repeated, returns an empty string. # Create a dictionary to count the occurrences of each character char_count = {} # Count each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character with a count of 1 for char in s: if char_count[char] == 1: return char # If no such character exists, return an empty string return \\"\\""},{"question":"Given an array of integers, find the length of the longest subsequence such that all elements of the subsequence are in an arithmetic progression (i.e., consecutive terms have the same difference). Write a function to determine the length of this longest subsequence. -----Input:----- - First line contains an integer N, representing the number of elements in the array (1 <= N <= 1000). - Second line contains N space-separated integers denoting the elements of the array. The elements are all distinct and can be both positive and negative integers (-10^9 <= arr[i] <= 10^9). -----Output:----- - Output a single integer representing the length of the longest subsequence in arithmetic progression. -----Constraints----- - 1<= N <=1000 - -10^9 <= arr[i] <= 10^9 - All integers are distinct -----Sample Input:----- 6 1 7 10 15 27 29 -----Sample Output:----- 3 -----Explanation:----- The longest subsequence in arithmetic progression is [1, 10, 19] with a common difference of 3. Therefore, the length of this subsequence is 3.","solution":"def length_of_longest_AP(arr): Returns the length of the longest arithmetic progression subsequence in the array. N = len(arr) if N <= 2: return N arr.sort() L = [[2 for _ in range(N)] for _ in range(N)] llap = 2 # Longest Length of AP; minimum is 2 (first two numbers) for j in range(N-2, 0, -1): i = j-1 k = j+1 while i >= 0 and k <= N-1: if arr[i] + arr[k] < 2 * arr[j]: k += 1 elif arr[i] + arr[k] > 2 * arr[j]: L[i][j] = 2 i -= 1 else: L[i][j] = L[j][k] + 1 llap = max(llap, L[i][j]) i -= 1 k += 1 while i >= 0: L[i][j] = 2 i -= 1 return llap"},{"question":"The Challenge ------------- You are tasked with implementing a simple expression evaluator for basic arithmetic operations. Your program should take in a string representing a mathematical expression and return the calculated result as a floating-point number. The operations allowed in the expressions include addition (+), subtraction (-), multiplication (*), division (/), and parentheses for altering the precedence of operations. It should also handle whitespace characters gracefully and ignore them in the evaluation. **Note:** - Handle division by zero operations by raising an appropriate exception. - The input expression can be assumed to be a valid mathematical expression. Input Specification ------------------- The input will be provided as a single string containing the mathematical expression which is to be evaluated. For instance: ``` \\"3 + 5 * (2 - 8) / 4\\" ``` Output Specification -------------------- The output should be a single floating-point number representing the result of the evaluated expression. Examples -------- - Input: `\\"2 + 3 * 4\\"` Output: `14.0` - Input: `\\"10 / 2 - 3\\"` Output: `2.0` - Input: `\\"1 + (2 - 3) * 4 + 6 / 3\\"` Output: `3.0`","solution":"def evaluate_expression(expression): Evaluates a mathematical expression and returns the result as a floating-point number. Parameters: expression (str): The string containing the mathematical expression. Returns: float: The result of the evaluated expression. Raises: ZeroDivisionError: If there is a division by zero in the expression. try: # Use eval to evaluate the expression result = eval(expression) # Check if the result is a floating-point number return float(result) except ZeroDivisionError: raise ZeroDivisionError(\\"Division by zero is not allowed.\\") except Exception as e: raise ValueError(f\\"Invalid expression. Error: {e}\\")"},{"question":"=====Problem Statement===== Given a positive integer N, print an inverted numerical triangle with a height of N. Each line should contain decreasing numbers starting from N. For example, if N = 4, the output should be: ``` 4 3 2 1 4 3 2 4 3 4 ``` Can you do it using nested loops and arithmetic operations, without using string manipulation? =====Input Format===== A single line containing the integer N. =====Constraints===== 1≤N≤20 =====Output Format===== Print N lines as explained above.","solution":"def inverted_numerical_triangle(N): Prints an inverted numerical triangle with a height of N. Each line contains decreasing numbers starting from N. for i in range(N): for j in range(N, i, -1): print(j, end=\' \') print()"},{"question":"Write a function `is_valid_pattern` that checks if a string follows a specific pattern. The pattern and the string will be provided as inputs. The pattern consists of alphabet characters, and the string consists of words separated by spaces. Each distinct letter in the pattern should map to a distinct word in the string. **Here\'s an example:** Pattern: \\"abba\\" String: \\"dog cat cat dog\\" Output: True (since \'a\' maps to \\"dog\\" and \'b\' maps to \\"cat\\") Pattern: \\"abba\\" String: \\"dog cat cat fish\\" Output: False (since \'a\' maps to \\"dog\\" and \'b\' maps to both \\"cat\\" and \\"fish\\") Pattern: \\"aaaa\\" String: \\"dog dog dog dog\\" Output: True (since \'a\' consistently maps to \\"dog\\") Pattern: \\"abba\\" String: \\"dog dog dog dog\\" Output: False (both \'a\' and \'b\' map to \\"dog\\", violating the one-to-one correspondence) Implement the function `is_valid_pattern` that takes in two parameters, `pattern` and `string`, and returns a boolean indicating whether the string follows the given pattern. ```python def is_valid_pattern(pattern, string): # Write your code here ``` *Constraints*: - The input string and pattern will only contain alphabetic characters. - The length of the pattern and the number of words in the string will not exceed 100. - The pattern and string are not empty.","solution":"def is_valid_pattern(pattern, string): Checks if the string follows the given pattern. Each character in the pattern maps to a distinct word in the string. :param pattern: A string of alphabetic characters representing the pattern. :param string: A string of words separated by spaces to be checked against the pattern. :return: True if the string follows the pattern, False otherwise. pattern_to_word = {} word_to_pattern = {} words = string.split() if len(pattern) != len(words): return False for char, word in zip(pattern, words): if char in pattern_to_word: if pattern_to_word[char] != word: return False else: if word in word_to_pattern: return False pattern_to_word[char] = word word_to_pattern[word] = char return True"},{"question":"Given a board with dimensions m x n, filled with different characters, and a string `word`, determine if the `word` exists in the board. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Note: 1. Use depth-first search (DFS) to solve this problem. 2. The input board contains only lowercase alphabetic characters. 3. The word parameter is a non-empty string. Example 1: Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCCED\\" Output: true Explanation: The board path that constructs the word is: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,1). Example 2: Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"SEE\\" Output: true Explanation: The board path that constructs the word is: (1,2) -> (2,2) -> (2,1). Example 3: Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ] word = \\"ABCB\\" Output: false Explanation: The same letter cell may not be used more than once, therefore there is no valid path to construct the word \\"ABCB\\".","solution":"def exist(board, word): Check if the word exists in the board by conducting a depth-first search (DFS) on each cell. def dfs(board, word, index, x, y): if index == len(word): return True if x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or board[x][y] != word[index]: return False temp = board[x][y] board[x][y] = \\"#\\" found = (dfs(board, word, index + 1, x + 1, y) or dfs(board, word, index + 1, x - 1, y) or dfs(board, word, index + 1, x, y + 1) or dfs(board, word, index + 1, x, y - 1)) board[x][y] = temp return found for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0] and dfs(board, word, 0, i, j): return True return False"},{"question":"Write a function `rotate_matrix(matrix)` that takes a 2D list (matrix) and rotates it 90 degrees clockwise. The matrix is represented as a list of lists, where each inner list represents a row. Assume the matrix is square (NxN). For example: matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotate_matrix(matrix) # The matrix should be modified to: # [ # [7, 4, 1], # [8, 5, 2], # [9, 6, 3] # ] The function should modify the matrix in-place (i.e., do not return a new matrix).","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in place. :param matrix: List[List[int]] - The NxN matrix to rotate n = len(matrix) for i in range(n // 2): for j in range(i, n - i - 1): # save the top element top = matrix[i][j] # move the left element to top matrix[i][j] = matrix[n - j - 1][i] # move the bottom element to left matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1] # move the right element to bottom matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1] # assign the saved top element to right matrix[j][n - i - 1] = top"},{"question":"In an alien language, they use decimal numbers just like we do, but the meaning of each digit is shifted by one. This means that their 1 means 0, their 2 means 1, their 3 means 2, and so on, up to their 9 which means 8, and their 0 which means 9. Zeros at the beginning of a number are not allowed. Your task is to write a function that translates a number from the alien language into our language. The function should take a string as input and return the translated integer. # Example ```python > alien_to_our_language(\\"123\\") == 12 # because 1 means 0, 2 means 1, and 3 means 2, translating to \\"012\\", which is simply 12 as an integer. > alien_to_our_language(\\"890\\") == 789 # because 8 means 7, 9 means 8, and 0 means 9, translating to \\"789\\". > alien_to_our_language(\\"456\\") == 345 # because 4 means 3, 5 means 4, and 6 means 5, translating to \\"345\\". ``` # Constraints - The input string will consist of digits \'0\'-\'9\' only. - The translated number should be returned as an integer, not a string. # Task Define the function `alien_to_our_language(number: str) -> int` that converts an alien number string to our integer.","solution":"def alien_to_our_language(number: str) -> int: Converts a number from the alien language to our language. Each digit in the alien language is shifted by one compared to ours: 1 means 0, 2 means 1, 3 means 2, ..., 9 means 8, 0 means 9. Parameters: number (str): The number in the alien language as a string. Returns: int: The number translated into our language. translated_number = \'\'.join(str((int(digit) - 1) % 10) for digit in number) return int(translated_number)"},{"question":"Create a function ```python min_subarray_length(arr, S) ``` that receives an array of positive integers `arr` and a positive integer `S`, and returns the length of the smallest contiguous subarray for which the sum is greater than or equal to `S`. If no such subarray exists, return `0`. E.g. Given `arr = [2, 3, 1, 2, 4, 3]` and `S = 7`, the function will return `2` because the smallest subarray with a sum of at least `7` is `[4, 3]`. ```python min_subarray_length([2, 3, 1, 2, 4, 3], 7); // 2 min_subarray_length([1, 4, 4], 4); // 1 min_subarray_length([1, 1, 1, 1, 1, 1, 1], 11); // 0 ```","solution":"def min_subarray_length(arr, S): Returns the length of the smallest contiguous subarray with a sum greater than or equal to S. If no such subarray exists, returns 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += arr[right] while current_sum >= S: min_length = min(min_length, right - left + 1) current_sum -= arr[left] left += 1 return 0 if min_length == float(\'inf\') else min_length"},{"question":"Create a function that takes an integer `n` as input and returns the `n`th term of the Look-and-say sequence. The Look-and-say sequence is defined as follows: - The first term is \\"1\\". - Each subsequent term is generated by describing the previous term\'s digits in terms of consecutive runs of the same digit. For example: ``` 1 is read off as \\"one 1\\" or \\"11\\". 11 is read off as \\"two 1s\\" or \\"21\\". 21 is read off as \\"one 2, then one 1\\" or \\"1211\\". 1211 is read off as \\"one 1, one 2, then two 1s\\" or \\"111221\\". ``` Your function should handle cases where `n` can be as large as 50. Efficiency in dealing with string manipulations will be crucial to avoid timeouts. **Example:** ```python def look_and_say(n): if n == 1: return \\"1\\" def next_term(s): result = [] i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 result.append(f\\"{count}{s[i]}\\") i += 1 return \'\'.join(result) term = \\"1\\" for _ in range(n - 1): term = next_term(term) return term # Test cases print(look_and_say(1)) # Output: \\"1\\" print(look_and_say(2)) # Output: \\"11\\" print(look_and_say(3)) # Output: \\"21\\" print(look_and_say(4)) # Output: \\"1211\\" print(look_and_say(5)) # Output: \\"111221\\" print(look_and_say(6)) # Output: \\"312211\\" ```","solution":"def look_and_say(n): if n == 1: return \\"1\\" def next_term(s): result = [] i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 result.append(f\\"{count}{s[i]}\\") i += 1 return \'\'.join(result) term = \\"1\\" for _ in range(n - 1): term = next_term(term) return term"},{"question":"You are given a string consisting of only \'a\' and \'b\' characters. Your task is to return the smallest number of transformations required to make the string alternate between \'a\' and \'b\', starting with \'a\'. A transformation consists of changing a single character from \'a\' to \'b\' or from \'b\' to \'a\'. For example: ``` For the string \\"abab\\" no changes are needed, so the answer is 0. For the string \\"aaaa\\", the answer is 2 (change the second and fourth \'a\' to \'b\' to get \\"abab\\"). For the string \\"bbaa\\", the answer is 2 (change the first \'b\' to \'a\' and the third \'a\' to \'b\' to get \\"abab\\"). ``` Write a function `min_transforms` that takes a string s as input and returns the minimum number of transformations needed. Example function: ```python def min_transforms(s): # Your code here # Example inputs print(min_transforms(\\"abab\\")) # Output: 0 print(min_transforms(\\"aaaa\\")) # Output: 2 print(min_transforms(\\"bbaa\\")) # Output: 2 ``` Constraints: - The length of the input string is between 1 and 1000. - The input string contains only the characters \'a\' and \'b\'.","solution":"def min_transforms(s): Returns the minimum number of transformations needed to make the string alternate between \'a\' and \'b\'. # Expected patterns pattern1 = \'ab\' * ((len(s) + 1) // 2) pattern2 = \'ba\' * ((len(s) + 1) // 2) # Trim patterns to match the length of s pattern1 = pattern1[:len(s)] pattern2 = pattern2[:len(s)] # Calculate the number of changes needed for both patterns changes_for_pattern1 = sum(1 for c1, c2 in zip(s, pattern1) if c1 != c2) changes_for_pattern2 = sum(1 for c1, c2 in zip(s, pattern2) if c1 != c2) # Return the minimum of changes needed for both patterns return min(changes_for_pattern1, changes_for_pattern2)"},{"question":"In a social network, we have a list of users and a set of friendship connections between them. A user\'s friends are defined as those they have a direct connection to, and friends-of-friends (FoF) are users who are not direct friends but are friends with one of the user\'s friends. Design a function `find_friends_of_friends(network, user)` that returns a list of friends-of-friends for a given user in the network, excluding their direct friends and the user themselves. The function should have the following signature: ```python def find_friends_of_friends(network: Dict[str, List[str]], user: str) -> List[str]: ``` # Input - `network`: A dictionary where keys are user names (strings) and values are lists of friends (also strings). - `user`: A string representing the user for whom we want to find friends-of-friends. # Output - A list of unique friends-of-friends for the specified user. # Constraints - The maximum number of users in the network will not exceed 1000. - Each user will have at most 100 friends. - All user names in the network are unique and contain only alphabetic characters. - Users will not have self-loops (i.e., a user will not be listed as their own friend). # Example ```python network = { \\"Alice\\": [\\"Bob\\", \\"Charlie\\"], \\"Bob\\": [\\"Alice\\", \\"David\\", \\"Eve\\"], \\"Charlie\\": [\\"Alice\\", \\"David\\"], \\"David\\": [\\"Bob\\", \\"Charlie\\", \\"Eve\\"], \\"Eve\\": [\\"Bob\\", \\"David\\"] } user = \\"Alice\\" print(find_friends_of_friends(network, user)) # Output: [\'David\', \'Eve\'] ``` # Explanation - Alice\'s direct friends are Bob and Charlie. - Bob\'s friends (excluding Alice) are David and Eve. - Charlie\'s friends (excluding Alice) include David. - Therefore, David and Eve are friends-of-friends for Alice. - We exclude Alice\'s direct friends (Bob and Charlie) and Alice herself from the list. Be sure to match the output lists as ordered above for any given input.","solution":"def find_friends_of_friends(network, user): Returns a list of friends-of-friends for the specified user, excluding their direct friends and the user themselves. direct_friends = set(network.get(user, [])) fof = set() for friend in direct_friends: if friend in network: for fof_candidate in network[friend]: if fof_candidate != user and fof_candidate not in direct_friends: fof.add(fof_candidate) return list(fof)"},{"question":"You have been invited to participate in the annual Coding Marathon. One of the challenges in the marathon is to create a sequence of moves for a robot to navigate a grid. The grid is an `n x n` square, where `n` is an odd integer from 3 to 15 inclusive. The robot starts at the center of the grid, and you need to guide it to the upper-left corner of the grid (position (0,0)) using the following moves: - \'U\' (up): Moves the robot up one cell. - \'D\' (down): Moves the robot down one cell. - \'L\' (left): Moves the robot left one cell. - \'R\' (right): Moves the robot right one cell. The task is to write a function that takes an odd integer `n` and returns a string representing a valid sequence of moves that will take the robot from the center of the grid to the upper-left corner. Your function should be efficient in terms of time complexity and ensure the robot does not move out of the grid boundaries. Example For `n = 3`, the output could be `\\"LUR\\"`, `\\"UUL\\"`, or any other valid sequence. For `n = 5`, the output could be `\\"UURRRULLUU\\"`, `\\"LUUUURRULLL\\"`, or any other valid sequence. Constraints - The input `n` will be an odd integer between 3 and 15 inclusive. Function Signature ```python def navigate_to_corner(n: int) -> str: pass ```","solution":"def navigate_to_corner(n: int) -> str: Returns a valid sequence of moves to guide the robot from the center of the grid to the upper-left corner. center = n // 2 moves = \'U\' * center + \'L\' * center return moves"},{"question":"Write a function `maximize_sum` that takes an array of unique positive integers and a number `k`. The function should return the maximum possible sum that can be achieved by adding exactly `k` elements from the array. The solution is expected to be optimized for performance. ```python maximize_sum([4, 2, 5, 1, 6], 3) # => 15 maximize_sum([10, 20, 30, 40, 50], 2) # => 90 maximize_sum([3, 5, 7, 2, 8, 10], 4) # => 30 maximize_sum([1, 2, 9, 8, 7], 3) # => 24 ```","solution":"def maximize_sum(arr, k): This function returns the maximum possible sum by adding exactly k elements from the array. Parameters: arr (list): A list of unique positive integers. k (int): The number of elements to add. Returns: int: The maximum sum of k elements. # Sort the array in descending order to get the largest elements first arr.sort(reverse=True) # Take the first k elements from the sorted array max_elements = arr[:k] # Return the sum of these k elements return sum(max_elements)"},{"question":"You are given a string s of length n consisting of lowercase English letters. You must determine the smallest integer k (1 ≤ k ≤ n), such that you can remove exactly k characters from s to make the string a palindrome. -----Input----- The first line contains one integer n (1 ≤ n ≤ 1000) — the length of the string. The second line contains the string s of length n. -----Output----- Print a single integer — the smallest k for which it is possible to remove exactly k characters from s to make the string a palindrome. -----Examples----- Input 4 abca Output 1 Input 6 abbcaa Output 2 -----Note----- A string is a palindrome if it reads the same forward and backward. For example, \\"abcba\\" and \\"aabbaa\\" are palindromes, but \\"abc\\" and \\"abca\\" are not.","solution":"def min_removals_to_palindrome(n, s): Returns the smallest k for which it is possible to remove exactly k characters from s to make it a palindrome. def min_deletions(i, j): if i >= j: return 0 if dp[i][j] != -1: return dp[i][j] if s[i] == s[j]: dp[i][j] = min_deletions(i + 1, j - 1) else: dp[i][j] = 1 + min(min_deletions(i + 1, j), min_deletions(i, j - 1)) return dp[i][j] dp = [[-1] * n for _ in range(n)] return min_deletions(0, n - 1)"},{"question":"Write a function that takes a list of integers and rotates it to the right by n positions, where n is a non-negative integer. For example: ```python rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3] rotate_right([0, 1, 2], 4) == [2, 0, 1] rotate_right([], 3) == [] ```","solution":"def rotate_right(lst, n): Rotates the list to the right by n positions. Parameters: lst (list of int): The list to rotate. n (int): The number of positions to rotate the list. Returns: list of int: The rotated list. if not lst: return lst n = n % len(lst) return lst[-n:] + lst[:-n]"},{"question":"You\'re working on an application that processes data records. Each record contains an identifier and a list of numerical values. You need to implement a function, `find_record_with_max_sum()`, that takes a list of such records and returns the identifier of the record with the highest sum of numerical values. If there are multiple records with the same highest sum, return the identifier of the first such record encountered in the list. A record is represented as a tuple, where the first element is the identifier (a string), and the second element is a list of integers. For example, a record might look like this: `(\\"rec1\\", [3, 6, 2])`. Your function should take one argument: a list of records. It should return a string: the identifier of the record with the highest sum of numerical values. For example, given the input `[(\\"rec1\\", [3, 6, 2]), (\\"rec2\\", [5, 5]), (\\"rec3\\", [1, 9, 1])]`, your function should return `\\"rec1\\"`. Note: Each list of numerical values will contain at least one integer, and there will be at least one record in the input list. ```python def find_record_with_max_sum(records): return max(records, key=lambda record: sum(record[1]))[0] ```","solution":"def find_record_with_max_sum(records): Given a list of records, return the identifier of the record with the highest sum of numerical values. :param records: List of tuples, each containing an identifier (string) and a list of integers. :return: Identifier of the record with the highest sum of numerical values. return max(records, key=lambda record: sum(record[1]))[0]"},{"question":"Task: Given a string `s`, determine whether it has properly nested and balanced brackets. The string `s` may contain the following types of brackets: `()`, `{}`, `[]`. Return `true` if the string is properly nested and balanced, otherwise return `false`. For example: ``` isBalanced(\\"()\\") should return true isBalanced(\\"[{()}]\\") should return true isBalanced(\\"{[}]\\") should return false isBalanced(\\"((()))\\") should return true isBalanced(\\"({[)})\\") should return false ```","solution":"def isBalanced(s): Returns whether the given string s has properly nested and balanced brackets. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False else: # If there is any other character in the string, we just ignore continue return stack == []"},{"question":"You are given an array of integers `arr` and an integer `k`. Return the maximum sum of a subsequence of `arr` that contains exactly `k` elements. A subsequence is derived by deleting some or no elements without changing the order of the remaining elements. Example 1: Input: arr = [5, 2, 3, 1, 9], k = 3 Output: 17 Explanation: The subsequence [5, 3, 9] has the sum 17 which is the maximum. Example 2: Input: arr = [8, 4, 7, 2, 1, 10], k = 2 Output: 18 Explanation: The subsequence [8, 10] has the sum 18 which is the maximum. Example 3: Input: arr = [1, 2, 3, 4, 5], k = 5 Output: 15 Explanation: The subsequence [1, 2, 3, 4, 5] is the whole array and has the sum 15 which is the maximum. Constraints: 1 <= arr.length <= 1000 -1000 <= arr[i] <= 1000 1 <= k <= arr.length","solution":"def max_sum_subsequence(arr, k): Returns the maximum sum of a subsequence with exactly k elements. # Sort the array in descending order sorted_arr = sorted(arr, reverse=True) # Sum the first k elements of the sorted array max_sum = sum(sorted_arr[:k]) return max_sum"},{"question":"Given an array of integers, return `true` if there exists a triplet (a, b, c) such that a + b + c = 0, otherwise return `false`. The array may contain duplicate values. For example: ``` Input: [-1, 0, 1, 2, -1, -4] Output: true Explanation: The triplets (-1, 0, 1) and (-1, -1, 2) sum to zero. ``` Consider various cases, such as: - The array with less than three elements. - Arrays where no triplet exists to sum to zero. Write a function that meets this specification and handles edge cases effectively. Good luck!","solution":"def has_triplet_with_sum_zero(arr): Checks if there exists a triplet in the array such that the sum of the triplet is zero. Args: arr (list of int): List of integers to check. Returns: bool: True if such a triplet exists, False otherwise. arr.sort() n = len(arr) for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = arr[i] + arr[left] + arr[right] if total == 0: return True elif total < 0: left += 1 else: right -= 1 return False"},{"question":"# Task Given a list of integers, your goal is to determine if there exists a pair of elements in the list such that their sum is equal to a given target value. Write a function that takes in a list of integers and a target value, and returns `True` if such a pair exists, and `False` otherwise. # Input/Output - `[input]` list of integers `nums` and integer `target` `0 ≤ len(nums) ≤ 1000` `-10^6 ≤ nums[i] ≤ 10^6` `-10^6 ≤ target ≤ 10^6` - `[output]` a boolean `True` if there exists a pair of elements whose sum is equal to `target`, `False` otherwise. # Example ```python nums = [2, 7, 11, 15] target = 9 # Output: True nums = [1, 2, 3, 4, 5] target = 10 # Output: False ```","solution":"def has_pair_with_sum(nums, target): Returns True if there exists a pair of elements in nums whose sum is equal to target, otherwise False. complements = set() for num in nums: if target - num in complements: return True complements.add(num) return False"},{"question":"# Playlist Analyzer You are provided a list of song lengths in seconds and a desired total playlist duration in seconds. Your task is to determine if there exists a combination of songs from the list that exactly matches the desired playlist duration. If such a combination exists, return one of the possible combinations as a list of song lengths. If multiple combinations are possible, any one combination can be returned. If no such combination exists, return an empty list. Constraints: - The number of songs, `n`, will be given as `0 < n ≤ 100`. - The duration of each song will be between `30` and `600` seconds. - The desired playlist duration, `d`, will be between `60` and `3600` seconds. # Examples Python ```python >>> find_playlist([120, 150, 200, 180, 150], 450) [120, 150, 180] >>> find_playlist([120, 150, 200, 180, 150], 1000) [] ``` Elixir *Note: The order of songs in the returned combination is unimportant.* # Assumptions 1. You do not have to worry about the types of the inputs. 2. Each song can only be used once in the playlist. Python ```python [song1, song2, song3, ...] ``` Elixir","solution":"from typing import List def find_playlist(song_lengths: List[int], desired_duration: int) -> List[int]: Returns a combination of song lengths that add up to the desired duration. If no such combination exists, returns an empty list. def helper(index, remaining_duration, path): if remaining_duration == 0: return path if index >= len(song_lengths) or remaining_duration < 0: return None # Include the current song include_current = helper(index + 1, remaining_duration - song_lengths[index], path + [song_lengths[index]]) if include_current: return include_current # Skip the current song return helper(index + 1, remaining_duration, path) result = helper(0, desired_duration, []) return result if result is not None else []"},{"question":"Complete the function `check_palindrome_permutation(s)` that returns `true` if any permutation of the input string `s` is a palindrome, otherwise returns `false`. **Notes:** * The input string will only contain lowercase letters (a-z). * No punctuation or digits will be included. * Performance needs to be considered Examples ```python check_palindrome_permutation(\'civic\') ==> True check_palindrome_permutation(\'ivicc\') ==> True check_palindrome_permutation(\'hello\') ==> False check_palindrome_permutation(\'aabb\') ==> True ```","solution":"def check_palindrome_permutation(s): Determines if any permutation of the string `s` is a palindrome. from collections import Counter # Count the occurrences of each character char_count = Counter(s) # Palindrome condition: at most one character with an odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True"},{"question":"=====Function Descriptions===== is_anagram(str1, str2) This function checks if two given strings, str1 and str2, are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. =====Problem Statement===== You are given two strings, str1 and str2. Your task is to determine if str1 is an anagram of str2. For the purpose of this problem, you should consider that an anagram is case-insensitive and does not consider spaces or punctuation when checking for anagrams. =====Output Format===== Print True if str1 is an anagram of str2. Otherwise, print False.","solution":"def is_anagram(str1, str2): Check if two given strings are anagrams of each other. from collections import Counter # Remove spaces and punctuation, and convert to lower case str1_clean = \'\'.join(e for e in str1 if e.isalnum()).lower() str2_clean = \'\'.join(e for e in str2 if e.isalnum()).lower() # Compare character counts return Counter(str1_clean) == Counter(str2_clean)"},{"question":"You are given a string representation of a number and an integer k. Your goal is to find the smallest number possible by removing exactly k digits from the given number. The result should not contain any leading zeros unless the number itself is zero. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a string and an integer k separated by a space. -----Output----- For each test case, output a new line with the smallest possible number after removing exactly k digits. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ Length of the string ≤ 100000 - 0 ≤ k < Length of the string -----Example----- Input 3 1432219 3 10200 1 10 2 Output 1219 200 0 -----Explanation----- Example 1. By removing three digits (4, 3, and 2), the smallest possible number is 1219. Example 2. By removing one digit (0), the smallest possible number is 200 which then becomes 200 after removing leading zero. Example 3. Since we need to remove both digits, the result is 0.","solution":"def remove_k_digits(num, k): stack = [] for digit in num: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # If k is still greater than 0, remove the remaining digits from the end while k > 0: stack.pop() k -= 1 # Remove leading zeros result = \'\'.join(stack).lstrip(\'0\') return result if result else \\"0\\" def process_test_cases(test_cases): results = [] for num, k in test_cases: result = remove_k_digits(num, k) results.append(result) return results"},{"question":"A group of adventurers is planning a journey through a forest. They need to calculate the amount of food supplies required to sustain each member during the trip. You need to help them by writing a function that takes the number of days of the trip and the list of members\' food consumption rates per day and outputs the total food supplies required for the journey. -----Input:----- - The first input line contains an integer T, the number of test cases. - Each test case contains two lines: - The first line has an integer D, the number of days the trip will last. - The second line has N integers, each representing the food consumption rate per day of a team member. -----Output:----- For each test case, output the total food supplies needed for the journey. -----Constraints----- - 1 leq T leq 50 - 1 leq D leq 100 - 1 leq N leq 100 - 1 leq text{consumption rate} leq 10 -----Sample Input----- 2 3 2 3 4 5 1 2 3 4 5 -----Sample Output----- 27 75","solution":"def total_food_supplies(test_cases): Calculates total food supplies required for each test case. Args: test_cases (list): List of tuples with (D, consumption_rates) Returns: list: List of total food supplies required for each test case. results = [] for D, consumption_rates in test_cases: total_food = D * sum(consumption_rates) results.append(total_food) return results"},{"question":"Implement a function that takes in a list of integers and returns a new list with the elements sorted in ascending order, but with all the even numbers appearing before the odd numbers in the original relative order. Requirements - The function should retain the relative order of the even and odd numbers as they appeared in the input list. - You are not allowed to use any in-built sort functions. Examples ``` [7, 2, 5, 3, 6, 4, 9] ==> [2, 6, 4, 7, 5, 3, 9] [1, 4, 6, 9, 3] ==> [4, 6, 1, 9, 3] [8, 12, 4, 9, 15, 3, 2] ==> [8, 12, 4, 2, 9, 15, 3] ```","solution":"def separate_even_odd(lst): Returns a new list with the elements sorted in ascending order, but with all the even numbers appearing before the odd numbers in their original relative order. evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds"},{"question":"You are given a string, which contains various alphanumeric characters and punctuation marks. Your task is to write a function that processes the string to retain only the unique characters based on their first appearance. The order of characters in the output should match their first appearance in the input string. For example, if the input string is \'programming is fun!\', the output should be \'progamin sfu!\'. You may use any programming language to implement your solution. Note: - The input string will only contain printable ASCII characters. - The function should be case-sensitive. Write a function `unique_chars(s)` that takes in a string `s` and returns a string containing only the unique characters from `s` as described above. Example: ```python def unique_chars(s): # Your code here print(unique_chars(\'programming is fun!\')) # should return \'progamin sfu!\' print(unique_chars(\'hello world\')) # should return \'helo wrd\' ```","solution":"def unique_chars(s): Returns a string with unique characters preserved in the order of their first appearance. :param s: Input string containing alphanumeric characters and punctuation marks. :return: String containing unique characters from the input string. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result) # Example usage print(unique_chars(\'programming is fun!\')) # should return \'progamin sfu!\' print(unique_chars(\'hello world\')) # should return \'helo wrd\'"},{"question":"Given an array of integers tasks and an integer k. You have k workers, each capable of completing one task per day. Each task in the array takes exactly 1 day to complete, and multiple workers can work on different tasks simultaneously. Your objective is to determine the minimum number of days required to complete all tasks in the array using exactly k workers. Return the minimum number of days required to finish all the tasks. If it is impossible to complete all the tasks, return -1. Example 1: Input: tasks = [1, 2, 3, 4, 5], k = 2 Output: 3 Explanation: With 2 workers available each day, we can complete the tasks as follows: Day 1: Worker 1 works on task 1, Worker 2 works on task 2. Day 2: Worker 1 works on task 3, Worker 2 works on task 4. Day 3: Worker 1 works on task 5. Example 2: Input: tasks = [7, 7, 7], k = 3 Output: 1 Explanation: All 3 workers can each take on one task on the same day. Example 3: Input: tasks = [1, 1, 1, 1, 1, 1], k = 1 Output: 6 Explanation: With only 1 worker available each day, it takes 6 days to complete all tasks, one per day. Example 4: Input: tasks = [5, 5, 5, 5], k = 2 Output: 2 Explanation: Day 1: Worker 1 works on task 1, Worker 2 works on task 2. Day 2: Worker 1 works on task 3, Worker 2 works on task 4. Constraints: 1 <= tasks.length <= 10^5 1 <= tasks[i] <= 10^9 1 <= k <= 10^5","solution":"def min_days_to_complete(tasks, k): Returns the minimum number of days required to finish all tasks. if k <= 0: return -1 # Calculate the length and number of batches needed n = len(tasks) # If we have more workers than tasks, 1 day is needed if k >= n: return 1 # Otherwise, calculate the minimum days needed days_needed = (n + k - 1) // k return days_needed"},{"question":"Story You have just started working as a software engineer for a game development company. Your first task is to create a feature for an in-game inventory system. The objective is to find the most valuable combination of items a player can carry within a given weight limit. The player can carry multiple items, but the total weight must not exceed the limit. Each item has a certain value and weight. Your task is to write a function that takes a list of items (each item represented as a tuple of weight and value) and a maximum weight limit. The function should return the maximum value the player can carry without exceeding the weight limit. Your Task Write a function named `knapsack` that takes two parameters: - `items`: a list of tuples where each tuple contains two integers, the first integer represents the weight of the item, and the second integer represents the value of the item. - `max_weight`: an integer representing the maximum weight limit. The function should return an integer representing the maximum value the player can carry without exceeding the weight limit. Example ```python def knapsack(items, max_weight): # Write your solution here # Example usage items = [(2, 3), (3, 4), (4, 5), (5, 6)] max_weight = 5 print(knapsack(items, max_weight)) # Output: 7 (Choosing items with weights 2 and 3) ``` Notes - Each item can be chosen at most once. - The list of items is guaranteed to be non-empty. - The weight and value of each item will be positive integers. - The maximum weight limit will be a positive integer. Happy coding!","solution":"def knapsack(items, max_weight): Determines the maximum value a player can carry without exceeding the weight limit. Parameters: - items: List of tuples, where each tuple consists of (weight, value) - max_weight: Integer representing the maximum weight limit Returns: - Integer representing the maximum value that can be carried. n = len(items) # Initialize the DP table with 0s for each [item + 1][weight limit + 1] dp = [[0 for _ in range(max_weight + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for w in range(max_weight + 1): weight, value = items[i - 1] if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] return dp[n][max_weight]"},{"question":"In a hypothetical city, there are n intersections connected by various roads. Each road allows traffic to flow in only one direction. The Mayor wants to control traffic congestion by installing stop signs at some intersections. Given an array roads where roads[i] = [u, v] represents a road from intersection u to intersection v, your task is to find the fewest number of intersections where the stop signs can be placed such that there is no cycle in the city. A cycle is a path that starts and ends at the same intersection without traversing any road more than once. Return the minimum number of intersections that need stop signs. Example 1: Input: n = 5, roads = [[1, 2], [2, 3], [3, 1], [4, 5]] Output: 1 Explanation: One possible solution is to place a stop sign at intersection 2. This will break the cycle 1->2->3->1. Example 2: Input: n = 4, roads = [[1, 2], [2, 3], [3, 4], [4, 2], [4, 1]] Output: 1 Explanation: One possible solution is to place a stop sign at intersection 4. This will break the cycle 4->2->3->4. Example 3: Input: n = 6, roads = [[1, 2], [2, 3], [3, 1], [3, 4], [4, 5], [5, 3]] Output: 2 Explanation: One possible solution is to place stop signs at intersections 3 and 5. This will break the cycles 1->2->3->1 and 3->4->5->3. Constraints: 1 <= n <= 10^4 1 <= roads.length <= 10^4 roads[i].length == 2 1 <= roads[i][0], roads[i][1] <= n All roads (u, v) are distinct.","solution":"from collections import defaultdict def minimum_stop_signs(n, roads): def dfs(node, visited, on_stack, graph): visited.add(node) on_stack.add(node) for neighbor in graph[node]: if neighbor not in visited: if dfs(neighbor, visited, on_stack, graph): return True elif neighbor in on_stack: return True on_stack.remove(node) return False graph = defaultdict(list) for u, v in roads: graph[u].append(v) stop_signs = set() visited = set() on_stack = set() for node in range(1, n + 1): if node not in visited: if dfs(node, visited, on_stack, graph): stop_signs.add(node) return len(stop_signs)"},{"question":"Given an array of integers nums, a feasible triplet is defined as three indices (i, j, k) such that 0 <= i < j < k < nums.length and nums[i] + nums[j] + nums[k] == 0. Return all unique feasible triplets from the array. Note: The solution set must not contain duplicate triplets. Example 1: Input: nums = [-1, 0, 1, 2, -1, -4] Output: [[-1, -1, 2], [-1, 0, 1]] Explanation: nums[0] + nums[1] + nums[2] = -1 + 0 + 1 = 0 nums[0] + nums[4] + nums[5] = -1 + -1 + 2 = 0 Example 2: Input: nums = [] Output: [] Example 3: Input: nums = [0] Output: [] Constraints: - 0 <= nums.length <= 3000 - -10^5 <= nums[i] <= 10^5","solution":"def three_sum(nums): Returns all unique triplets in the array which gives the sum of zero. nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i-1]: continue left, right = i + 1, len(nums) - 1 while left < right: s = nums[i] + nums[left] + nums[right] if s < 0: left += 1 elif s > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"# Task **_Given_** a *string*, write a function that *returns the length of the longest substring* that contains **_no more than two distinct characters_**. ___ # Notes: * A **substring is a contiguous sequence of characters within a string**. * The function should be *case-sensitive*, meaning \'A\' and \'a\' are considered distinct characters. ___ # Input >> Output Examples: **_Example 1_**: **Input**: \\"eceba\\" **Output**: 3 **Explanation**: The substring is \\"ece\\" which contains only two distinct characters \'e\' and \'c\'. **_Example 2_**: **Input**: \\"ccaabbb\\" **Output**: 5 **Explanation**: The substring is \\"aabbb\\" which contains only two distinct characters \'a\' and \'b\'. ___ # Translation: All translations are welcomed Enjoy Coding !!","solution":"def longest_substring_with_two_distinct_characters(s): Returns the length of the longest substring that contains no more than two distinct characters. if len(s) == 0: return 0 max_length = 0 start = 0 char_count = {} for end in range(len(s)): char_count[s[end]] = char_count.get(s[end], 0) + 1 while len(char_count) > 2: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"A common cryptography technique involves encoding messages in unexpected places. For this task, you will use a set of dominoes to encode and decode messages. A standard set of dominoes includes 28 tiles, each representing a pair of numbers between 0 and 6. For example, a domino tile might represent the pair (0,0), (3,5), or (6,6). Each tile has a unique combination—there are no duplicates. Your goal is to encode a message as a unique sequence of domino tiles and decode it. Correspondence between message and permutation # Message To compose our message, we will use an alphabet containing 36 characters: the digits from 0 to 9 and the letters from A to Z. We give them the following values: ``` \\"0\\" = 0, \\"1\\" = 1, ..., \\"9\\" = 9, \\"A\\" = 10, ..., \\"Z\\" = 35 ``` This gives us a numeral system with a base equal to 36. We can compute a numeric value corresponding to any message: ``` \\"A9\\" = 369 \\"HELLO\\" = 104832177617 ``` # Permutation Given the 28 unique domino tiles, we can assign a unique number to each of the possible permutations of the set. To attribute a unique number to each permutation, we will use the lexicographical order. For example, with domino tiles (0,0), (0,1), and (1,1): ``` (0,0)(0,1)(1,1) = 0 (0,0)(1,1)(0,1) = 1 ... ``` For a set of 28 domino tiles, there are `28!` (factorial of 28) possible permutations. We can convert the numeric value of a message to one of these permutations, thus encoding the message in the order of dominoes. You will write two functions: * `encode(message)`: This function takes a message as input and returns a list of tuples representing domino tiles ordered to hide the message. Return `None` if the message contains invalid characters or has a numeric value greater than or equal to `28!`. * `decode(dominoes)`: This function takes a list of tuples representing a sequence of domino tiles and returns the hidden message. Return `None` if the list of dominoes contains invalid tiles, duplicates, or doesn\'t contain exactly 28 tiles. Each tile is represented as a tuple of two integers `(a, b)` such that `0 <= a <= b <= 6`. # Examples Encoding ```python encode(\\"HELLO\\") ``` Should return: ```python [(0, 0), (0, 1), ..., (6, 6)] ``` (This is a placeholder. The actual sequence will depend on the numerical value of \\"HELLO\\") Decoding ```python decode([(0, 0), (0, 1), ..., (6, 6)]) ``` Should return: ```python \\"HELLO\\" ``` # Constraints 1. The input message for encoding should be a non-empty string containing only digits and uppercase letters (\'0\'-\'9\' and \'A\'-\'Z\'). 2. The input list for decoding should contain exactly 28 tuple elements each representing a unique domino tile (from (0,0) to (6,6)). By completing this task, you will practice encoding and decoding data using basic combinatorial enumeration and the factorial function, two fundamental concepts in computer science and cryptography!","solution":"import math from functools import reduce def message_to_number(message): Convert message to a number base 36 base_36 = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" number = 0 for char in message: number = number * 36 + base_36.index(char) return number def number_to_message(number): Convert a number to a message base 36 base_36 = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" message = [] while number > 0: number, remainder = divmod(number, 36) message.append(base_36[remainder]) return \'\'.join(reversed(message)) def factorial(n): return reduce(lambda x, y: x * y, range(1, n + 1), 1) def encode(message): Encode a message into a sequence of domino tiles base_36 = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" set_of_tiles = [(i, j) for i in range(7) for j in range(i, 7)] # Check for invalid characters if any(char not in base_36 for char in message): return None # Convert message to numerical value msg_value = message_to_number(message) # Check if value exceeds 28! if msg_value >= factorial(len(set_of_tiles)): return None # Generate the permutation of tiles at the given index tiles = list(set_of_tiles) permutation = [] for i in range(len(tiles) - 1, -1, -1): j = msg_value // math.factorial(i) msg_value %= math.factorial(i) permutation.append(tiles.pop(j)) return permutation def decode(dominoes): Decode a sequence of domino tiles into the hidden message set_of_tiles = [(i, j) for i in range(7) for j in range(i, 7)] # Check for invalid tiles and duplicates if len(dominoes) != 28 or any(tile not in set_of_tiles for tile in dominoes) or len(set(dominoes)) != 28: return None # Calculate the index of the permutation tiles = list(set_of_tiles) permutation_index = 0 for i, tile in enumerate(dominoes): j = tiles.index(tile) permutation_index += j * math.factorial(len(tiles) - 1) tiles.pop(j) return number_to_message(permutation_index)"},{"question":"Task You are given a positive integer `n`, and you need to generate and return a string array with `n` elements, where each element follows these rules: - If the number at the position i+1 is divisible by `3` and `5`, then the string should be \\"FizzBuzz\\". - If the number at the position i+1 is divisible by `3`, then the string should be \\"Fizz\\". - If the number at the position i+1 is divisible by `5`, then the string should be \\"Buzz\\". - Otherwise, the string should be the number itself as a string. # Notes: - `1 <= n <= 10^5` - The function needs to be optimal in terms of performance. Examples For `n = 15`, the output should be: ``` [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\", \\"Fizz\\", \\"7\\", \\"8\\", \\"Fizz\\", \\"Buzz\\", \\"11\\", \\"Fizz\\", \\"13\\", \\"14\\", \\"FizzBuzz\\"] ``` For `n = 5`, the output should be: ``` [\\"1\\", \\"2\\", \\"Fizz\\", \\"4\\", \\"Buzz\\"] ```","solution":"def fizz_buzz(n): Generates a string array with n elements following the FizzBuzz rules. result = [] for i in range(1, n + 1): if i % 3 == 0 and i % 5 == 0: result.append(\\"FizzBuzz\\") elif i % 3 == 0: result.append(\\"Fizz\\") elif i % 5 == 0: result.append(\\"Buzz\\") else: result.append(str(i)) return result"},{"question":"Heidi has now decided to further investigate the behavior of marmots by evaluating their response patterns over multiple time periods. Each village still has a population that follows either a Poisson or a uniform distribution. Heidi will record responses from marmots over several days and wants to incorporate these multiple observations to make more robust population estimates. Can you help Heidi estimate each village\'s population using multiple days of data? -----Input----- - The first line contains an integer V (1 ≤ V ≤ 100) – the number of villages. - The second line contains an integer D (1 ≤ D ≤ 30) – the number of days over which observations are recorded. - Each of the next V blocks contains: - The name of the village on the first line (a string of alphanumeric characters). - D lines follow, each containing M_i, the number of marmots observed on the i-th day. -----Output----- Output one line per village, in the same order as provided in the input, containing your integer population estimate for each village. Your answer is considered correct if it falls within the interval [ lfloor 0.95 cdot P rfloor, lceil 1.05 cdot P rceil ], where P is the real population of the village used to create the distribution.","solution":"def estimate_population(V, D, data): Estimates each village\'s population using multiple days of marmot observation data. results = [] for i in range(V): village_name = data[i][0] observations = data[i][1] estimated_population = sum(observations) // D results.append((village_name, estimated_population)) return results"},{"question":"=====Problem Statement===== You are given a string S consisting of alphanumeric characters and special characters. Your task is to determine if the string can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. =====Input Format===== A single line of input containing the string S. =====Constraints===== 1 ≤ length of S ≤ 1000 =====Output Format===== Print \\"YES\\" if the string can be rearranged to form a palindrome. Otherwise, print \\"NO\\". =====Sample Input===== aabb =====Sample Output===== YES =====Explanation===== The string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\". =====Sample Input===== abc =====Sample Output===== NO =====Explanation===== The string \\"abc\\" cannot be rearranged to form a palindrome since no such permutation exists.","solution":"def can_form_palindrome(s): Determines if the string can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for char, cnt in count.items() if cnt % 2 != 0) # For a string to be rearranged into a palindrome, # there can be at most one character with an odd count. if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"In this challenge, you are given an integer `n` and your task is to return a list of the first `n` elements of the Fibonacci sequence. The Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones, usually starting with 0 and 1. That is, the Fibonacci sequence usually starts with `0, 1, 1, 2, 3, 5, 8, ...`. For example: * `fibonacci(5) = [0, 1, 1, 2, 3]` * `fibonacci(7) = [0, 1, 1, 2, 3, 5, 8]` To clarify, `fibonacci(1)` should return `[0]` and `fibonacci(2)` should return `[0, 1]`. It is guaranteed that `n` will be a positive integer and within a safe range for sequence computation (1 ≤ n ≤ 50). Good luck! If you like this challenge, you may also like: [Sum of Primes](https://www.codewars.com/kata/52fba66badcd10859f00097e) [Palindrome Numbers](https://www.codewars.com/kata/53da3dbb4a5168369a0000fe)","solution":"def fibonacci(n): Returns the first n elements of the Fibonacci sequence. if n <= 0: return [] if n == 1: return [0] sequence = [0, 1] while len(sequence) < n: sequence.append(sequence[-1] + sequence[-2]) return sequence"},{"question":"Write a function that determines whether a given string follows a specific pattern. **Task** Implement a function `patternMatch(pattern, str)` that returns a boolean indicating whether or not the given string `str` matches the specified pattern `pattern`. The pattern contains only lowercase letters, where each letter maps to a distinct substring in the string `str`. **The format** ``` function patternMatch(pattern, str) { return true || false } ``` **Examples** - `patternMatch(\\"abab\\", \\"redblueredblue\\")` ➞ true - Explanation: `a` can be \\"red\\" and `b` can be \\"blue\\". - `patternMatch(\\"aaaa\\", \\"asdasdasdasd\\")` ➞ true - Explanation: `a` can be \\"asd\\". - `patternMatch(\\"aabb\\", \\"xyzabcxzyabc\\")` ➞ false - Explanation: `x` and `y` do not follow the pattern. **Notes** - Each letter in the pattern must map to a distinct substring (i.e., different letters map to different substrings). - The pattern and strings are non-empty and consist only of lowercase letters. - Testing will not be case-sensitive.","solution":"def patternMatch(pattern, string): def backtrack(pattern, string, pat_map, str_set): if not pattern: return not string pat_char = pattern[0] if pat_char in pat_map: word = pat_map[pat_char] if not string.startswith(word): return False return backtrack(pattern[1:], string[len(word):], pat_map, str_set) for i in range(1, len(string) - len(pattern) + 2): word = string[:i] if word in str_set: continue pat_map[pat_char] = word str_set.add(word) if backtrack(pattern[1:], string[i:], pat_map, str_set): return True del pat_map[pat_char] str_set.remove(word) return False return backtrack(pattern, string, {}, set())"},{"question":"Design a function that counts the number of words in a given String. The function should ignore punctuation and return the total word count. A word is defined as any sequence of non-punctuation characters separated by spaces. Example ```python \\"Hello, world!\\" # should return 2 \\"This is a sample text.\\" # should return 5 ```","solution":"import re def word_count(input_string): Counts the number of words in a given string. The function ignores punctuation and returns the total word count. # Use regex to replace punctuations with empty string cleaned_string = re.sub(r\'[^ws]\', \'\', input_string) # Split the string by whitespace to get the words words = cleaned_string.split() # Return the number of words return len(words)"},{"question":"Write a function `operational_sequence(n)` that accepts an integer `n` representing the number of operations. For this, you need to calculate the sum of a sequence derived as follows: 1. The sequence starts with the number 1. 2. On each odd operation (1st, 3rd, 5th, etc.), the next number in the sequence is the previous number multiplied by 2. 3. On each even operation (2nd, 4th, 6th, etc.), the next number in the sequence is the previous number plus 3. Given `n`, your task is to return the sum of the first `n` numbers in this sequence. # Example ```python operational_sequence(5) # returns 35 # Here is the generated sequence: # 1 -> 1 (starting number) # 1 * 2 = 2 (1st operation, odd) # 2 + 3 = 5 (2nd operation, even) # 5 * 2 = 10 (3rd operation, odd) # 10 + 3 = 13 (4th operation, even) # Sum: 1 + 2 + 5 + 10 + 13 = 31 operational_sequence(3) # returns 8 # Sequence generated: # 1 -> 1 (starting number) # 1 * 2 = 2 (1st operation, odd) # 2 + 3 = 5 (2nd operation, even) # Sum: 1 + 2 + 5 = 8 ```","solution":"def operational_sequence(n): Returns the sum of the first n numbers in a sequence where: - Start with 1 - Odd operations: multiply by 2 - Even operations: add 3 if n <= 0: return 0 sequence = [1] for i in range(1, n): if i % 2 != 0: # odd index in the context of 0-based indexing next_number = sequence[-1] * 2 else: # even index in the context of 0-based indexing next_number = sequence[-1] + 3 sequence.append(next_number) return sum(sequence)"},{"question":"A train yard consists of multiple tracks arranged in a row. Each track either contains a single car or is empty. Your task is to find the number of cars that can be transported if you can merge adjacent cars to create a continuous sequence. You cannot change the relative order of the cars, but you can earn a point for each sequentially connected car from the start to the end of the size of the group. Return the maximum points that can be achieved from the sequence of cars. Examples: Input: tracks = [1,1,0,1] Output: 3 Explanation: You can merge the two cars on the track together to form a continuous sequence (1,1) with length 2 and the stand-alone car as a sequence with length 1 for a total of 3 points. Input: tracks = [1,0,0,1,1,0,1] Output: 4 Explanation: Merge the last two cars (1,1) with length 2 and each stand-alone car as their sequence for additional 2 points for a total of 4 points. Input: tracks = [] Output: 0 Note: - tracks will have length at most 1000. - Each tracks[i] will be either 0 or 1.","solution":"def max_transportable_cars(tracks): Returns the maximum points that can be achieved from the sequence of cars. count = 0 merged_group_found = False for track in tracks: if track == 1: count += 1 merged_group_found = True else: merged_group_found = False if not merged_group_found: # Only reset the count for the first break in cars merged_group_found = True return count"},{"question":"You are given a string containing only lowercase alphabetical characters. Write a function to determine if it is possible to rearrange the characters in the string such that no two adjacent characters are the same. If it is possible, return any possible arrangement. If not, return an empty string. Example 1: Input: \\"aab\\" Output: \\"aba\\" Example 2: Input: \\"aaab\\" Output: \\"\\"","solution":"from collections import Counter import heapq def rearrange_string(s): Given a string s, rearrange the characters such that no two adjacent characters are the same. If it\'s possible, return the rearranged string. Otherwise, return an empty string. count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_char = None prev_freq = 0 result = [] while max_heap or prev_freq < 0: if max_heap: freq, char = heapq.heappop(max_heap) result.append(char) freq += 1 # since it\'s a max heap with negative frequencies, we increment to reduce the frequency else: return \\"\\" if prev_char and prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq return \'\'.join(result)"},{"question":"Given an array of integers, return the maximum sum of any non-empty subarray such that all elements in the subarray have the same value. Example 1: Input: [4, 4, 4, 5, 5, 6, 6, 6, 6] Output: 24 Explanation: The contiguous subarray [6, 6, 6, 6] has the same value and its sum is 24. Example 2: Input: [1, 2, 2, 3, 3, 3, 3, 4, 4] Output: 12 Explanation: The contiguous subarray [3, 3, 3, 3] has the same value and its sum is 12. Example 3: Input: [7, 7, 8, 8, 8, 9] Output: 24 Explanation: The contiguous subarray [8, 8, 8] has the same value and its sum is 24. Example 4: Input: [5] Output: 5 Explanation: The contiguous subarray [5] has the same value and its sum is 5.","solution":"def max_same_value_subarray_sum(arr): Returns the maximum sum of any non-empty subarray such that all elements in the subarray have the same value. if not arr: return 0 max_sum = current_sum = arr[0] current_value = arr[0] for num in arr[1:]: if num == current_value: current_sum += num else: current_value = num current_sum = num max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given a list of **strings** representing binary numbers, write a function that finds the **smallest** and **largest** number in decimal format after flipping exactly one bit (0 to 1 or 1 to 0) in each string. If flipping any bit yields the same number, consider that as the result. Examples ```python binary_numbers = [\\"1010\\", \\"1100\\", \\"0001\\"] # Flipping one bit in \\"1010\\" can yield: # \\"0010\\" = 2, \\"1110\\" = 14, \\"1000\\" = 8, \\"1011\\" = 11 # Smallest: 2, Largest: 14 # Flipping one bit in \\"1100\\" can yield: # \\"0100\\" = 4, \\"1000\\" = 8, \\"1110\\" = 14, \\"1101\\" = 13 # Smallest: 4, Largest: 14 # Flipping one bit in \\"0001\\" can yield: # \\"1001\\" = 9, \\"0101\\" = 5, \\"0011\\" = 3, \\"0000\\" = 0 # Smallest: 0, Largest: 9 Output: smallest = 0, largest = 14 ``` Note: The input list can contain up to 100 strings, and each string has a length up to 10. A naive approach that checks every possible flip is sufficient.","solution":"def flip_and_find_extremes(binary_numbers): def decimal_after_flip(binary_str): nums = [] for i in range(len(binary_str)): flipped = list(binary_str) flipped[i] = \'1\' if binary_str[i] == \'0\' else \'0\' nums.append(int(\'\'.join(flipped), 2)) return min(nums), max(nums) smallest = float(\'inf\') largest = float(\'-inf\') for binary in binary_numbers: local_min, local_max = decimal_after_flip(binary) smallest = min(smallest, local_min) largest = max(largest, local_max) return smallest, largest"},{"question":"You are given a rectangular matrix with N rows and M columns filled with integers. You need to answer Q queries. In each query, you are given four integers x1, y1, x2, and y2, which represent the top-left and bottom-right corners of a sub-matrix. For each query, you need to find the sum of elements in the given sub-matrix. Input The first line of the input contains two space-separated integers N and M. The next N lines each contain M space-separated integers representing the matrix. The following line contains a single integer Q. The last Q lines each contain four space-separated integers x1, y1, x2, and y2, representing a query. Output For each query, print a single integer representing the sum of elements in the specified sub-matrix. Constraints 1 ≤ N, M ≤ 1000 1 ≤ Q ≤ 10^5 1 ≤ x1 ≤ x2 ≤ N 1 ≤ y1 ≤ y2 ≤ M -10^4 ≤ matrix[i][j] ≤ 10^4 Example Input 3 4 1 2 3 4 5 6 7 8 9 10 11 12 2 1 1 2 2 2 3 3 4 Example Output 14 36 Explanation For the first query, the sub-matrix from (1, 1) to (2, 2) is: 1 2 5 6 The sum is 1 + 2 + 5 + 6 = 14. For the second query, the sub-matrix from (2, 3) to (3, 4) is: 7 8 11 12 The sum is 7 + 8 + 11 + 12 = 36.","solution":"def matrix_sum_queries(matrix, queries): This function processes the sum queries for the given matrix. Args: matrix (List[List[int]]): The input rectangular matrix. queries (List[Tuple[int, int, int, int]]): The list of queries where each query is (x1, y1, x2, y2). Returns: List[int]: The list of sums for each query. N = len(matrix) M = len(matrix[0]) # Precompute the prefix sums prefix_sum = [[0] * (M + 1) for _ in range(N + 1)] for i in range(1, N + 1): for j in range(1, M + 1): prefix_sum[i][j] = (matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]) result = [] for x1, y1, x2, y2 in queries: # Calculate the sum for the sub-matrix using prefix sums sub_matrix_sum = (prefix_sum[x2][y2] - prefix_sum[x1-1][y2] - prefix_sum[x2][y1-1] + prefix_sum[x1-1][y1-1]) result.append(sub_matrix_sum) return result # Example usage: # N = 3, M = 4, matrix as provided in the example matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] queries = [ (1, 1, 2, 2), (2, 3, 3, 4) ] results = matrix_sum_queries(matrix, queries) for res in results: print(res) # Expected output: [14, 36]"},{"question":"Given an array of positive integers, you need to divide it into exactly k contiguous subarrays so that the sum of the maximum subarray among them is minimized. In other words, you need to find a way to partition the array into k contiguous subarrays such that the largest sum among these subarrays is the smallest possible. # Input: - The first line contains two integers n and k (1 leq k leq n leq 10^5) – the number of elements in the array and the number of subarrays. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4) – the elements of the array. # Output: - Print a single integer, which represents the minimized largest sum among the k subarrays. # Example: Input: 8 3 10 20 30 40 50 60 70 80 Output: 150 # Explanation: One of the optimal partitions would be: - [10, 20, 30, 40, 50] - [60] - [70, 80] In this case, the largest sum among the subarrays is 150, which is the minimum possible largest sum.","solution":"def minimize_largest_sum(n, k, arr): Function to minimize the largest sum among k subarrays. Arguments: n - The number of elements in the array. k - The number of subarrays. arr - List of integers representing the array. Returns: The minimized largest sum among the k subarrays. def is_valid(mid): count_subarrays = 1 current_sum = 0 for num in arr: if current_sum + num > mid: count_subarrays += 1 current_sum = num if count_subarrays > k: return False else: current_sum += num return True low = max(arr) high = sum(arr) while low < high: mid = (low + high) // 2 if is_valid(mid): high = mid else: low = mid + 1 return low"},{"question":"Circular Prime Checker A circular prime is a prime number that, in any cyclic permutation of its digits, results in a prime number. For example, 197 is a circular prime because 197, 971, and 719 are all primes. You need to write a function to determine if a given number is a circular prime. # Input - An integer `n` (2 <= n <= 10^6). # Output - Return `True` if `n` is a circular prime, and `False` otherwise. # Example ```python is_circular_prime(197) # Output: True is_circular_prime(1193) # Output: True is_circular_prime(101) # Output: False ``` # Note For non-prime numbers, the result should be `False` automatically. You may use any programming language that you are comfortable with, but the logic and efficiency of your approach will be considered in the evaluation. Ensure your implementation can handle the largest inputs efficiently.","solution":"def is_prime(n): Check if a number is a prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def rotate_number(n): Generate all rotations of a number. s = str(n) rotations = [] for i in range(len(s)): rotated = int(s[i:] + s[:i]) rotations.append(rotated) return rotations def is_circular_prime(n): Determine if a number is a circular prime. if not is_prime(n): return False rotations = rotate_number(n) for rotation in rotations: if not is_prime(rotation): return False return True"},{"question":"You are given an array of integers and a target value. Write a function `twoSum` that finds two numbers in the array such that they add up to the target value. The function should return their indices as a tuple. Assume that each input would have exactly one solution, and you may not use the same element twice. The parameter of the function `twoSum` (`two_sum, two-sum, twoSum`) will be an array of integers and an integer target: - `nums: List[int]` - the array of integers - `target: int` - the target sum The function should return a tuple of the two indices of the numbers that add up to the target. - You can assume that each input will have exactly one solution. - You may not use the same element twice. - The array is not necessarily sorted. Example: ``` twoSum([2, 7, 11, 15], 9) --> (0, 1) twoSum([3, 3], 6) --> (0, 1) twoSum([3, 2, 4], 6) --> (1, 2) ```","solution":"def twoSum(nums, target): Given an array of integers, find two numbers such that they add up to a specific target. The function should return the indices of the two numbers as a tuple. Parameters: nums (List[int]): List of integers. target (int): The target sum. Returns: Tuple[int, int]: Indices of the two numbers that add up to the target. nums_map = {} for i, num in enumerate(nums): complement = target - num if complement in nums_map: return (nums_map[complement], i) nums_map[num] = i"},{"question":"You are given a square board of size n x n. The board is initially filled with white cells (denoted by 0) and black cells (denoted by 1). You are allowed to flip any white cell to black, and vice versa, by performing certain sequences of flips. A sequence of flips is described by selecting two diagonal endpoints of the rectangle and flipping every cell within that rectangle. Your task is to determine the minimum number of sequences of flips required to make the entire board black. Example 1: Input: board = [[0,0,0],[0,0,0],[0,0,0]] Output: 1 Explanation: One sequence of flips can turn all cells to black. Example 2: Input: board = [[1,0,1],[0,0,0],[1,0,1]] Output: 2 Explanation: First, flip the rectangle from (0, 1) to (2, 1) to make the second column black. Then the board will be fully black. Example 3: Input: board = [[0,1,0],[1,0,1],[0,1,0]] Output: 3 Explanation: Flip any row or column at a time to turn all cells to black. Constraints: board is a square matrix of size n x n. 1 <= n <= 60 board[i][j] is either 0 or 1.","solution":"def min_flips_to_black(board): Returns the minimum number of sequences of flips required to make the entire board black. n = len(board) # Count the number of 0\'s on the board num_zeros = sum(board[i][j] == 0 for i in range(n) for j in range(n)) # If there are no zeros, then no flips are needed. if num_zeros == 0: return 0 # Only one flip is needed to flip the entire grid to black return 1"},{"question":"Write a function `intersection_of_arrays` that takes two lists of integers as input and returns a new list containing their intersection (i.e., elements that appear in both lists). The resulting list should not contain any duplicates and should preserve the original order of the first list. # Example ```python intersection_of_arrays([1, 2, 2, 1], [2, 2]) # Output: [2] intersection_of_arrays([4, 9, 5], [9, 4, 9, 8, 4]) # Output: [4, 9] ``` # Constraints - All elements of the input lists are integers. - The input lists can have varying lengths, including the possibility of one or both being empty. - Aim for a time complexity better than O(n^2). # Additional Requirements - Your implementation should handle edge cases, such as empty lists or lists with no common elements.","solution":"def intersection_of_arrays(list1, list2): Returns a list containing the intersection of list1 and list2, preserving the order of appearance in list1 and without duplicates. Parameters: list1 (list): The first list of integers. list2 (list): The second list of integers. Returns: list: A list containing the intersection elements. set2 = set(list2) seen = set() result = [] for num in list1: if num in set2 and num not in seen: result.append(num) seen.add(num) return result"},{"question":"In this challenge, you will be given a string containing a mixture of uppercase and lowercase letters. Your task is to determine whether the string can become a palindrome by removing at most one character. If it can, return `True`; otherwise, return `False`. For example, `canBePalindrome(\\"racecar\\") = True` because it is already a palindrome. Similarly, `canBePalindrome(\\"raccecar\\") = True` because removing one of the `c` characters will result in \\"racecar\\", which is a palindrome. However, `canBePalindrome(\\"abc\\") = False` because removing any one character cannot result in a palindrome. More examples in the test cases. ```python def canBePalindrome(s: str) -> bool: Given a string s, return True if it can become a palindrome by removing at most one character, otherwise return False. Args: s (str): The input string containing a mixture of uppercase and lowercase letters. Returns: bool: True if the string can become a palindrome by removing at most one character, otherwise False. # Your code here ``` Good luck! If you enjoyed this Kata, you might also like: - [Valid Parentheses](https://www.codewars.com/kata/52774a314c2333f0a7000688) - [Next Palindromic Number](https://www.codewars.com/kata/56a6ce697c05fb4667000029)","solution":"def canBePalindrome(s: str) -> bool: Given a string s, return True if it can become a palindrome by removing at most one character, otherwise return False. Args: s (str): The input string containing a mixture of uppercase and lowercase letters. Returns: bool: True if the string can become a palindrome by removing at most one character, otherwise False. def is_palindrome_range(start, end): return all(s[i] == s[end - i + start] for i in range(start, (end + start) // 2 + 1)) start, end = 0, len(s) - 1 while start < end: if s[start] != s[end]: # Try removing character at start or character at end return is_palindrome_range(start + 1, end) or is_palindrome_range(start, end - 1) start += 1 end -= 1 return True"},{"question":"Write a function that takes as input a string consisting of lowercase alphabetic characters \'a\' to \'z\' and returns the first non-repeating character from the string. If there is no non-repeating character, the function should return an empty string. For example: - For the string \'abacabad\', the function should return \'c\'. - For the string \'abcdef\', the function should return \'a\'. - For the string \'aabbcc\', the function should return an empty string.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character from the input string. If there is no non-repeating character, returns an empty string. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"# Task Joe and Sam love playing card games. They are particularly fascinated by a game that involves a special sequence in the deck. The deck contains cards numbered from 1 to `n`. Joe and Sam noticed that the cards form an interesting pattern when divided into separate parts. The game begins with separating the cards into k parts, each part containing cards in continuous numbers. For example, for a deck of 9 cards (1 to 9) and k = 3, the parts are: ``` Part 1: [1, 2, 3] Part 2: [4, 5, 6] Part 3: [7, 8, 9] ``` Joe and Sam want to know if there exists a part that contains at least one prime number. Given the number of cards `n` in the deck, and the number of parts `k`, determine if there\'s at least one part containing a prime number. # Input/Output - `[input]` integer `n` The number of cards in the deck, where `1 <= n <= 10^8` - `[input]` integer `k` The number of parts to divide the deck into, where `1 <= k <= n` - `[output]` a boolean value `true` if there exists a part containing at least one prime number, otherwise `false` Consider that `is_prime(x)` is a helper function provided that returns true if `x` is a prime number and false otherwise.","solution":"def is_prime(x): Helper function that determines if a number is prime. if x <= 1: return False if x <= 3: return True if x % 2 == 0 or x % 3 == 0: return False i = 5 while i * i <= x: if x % i == 0 or x % (i + 2) == 0: return False i += 6 return True def has_prime_in_parts(n, k): Determine if there is at least one part containing a prime number when the cards numbered 1 to n are divided into k parts. Args: n : int - Total number of cards. k : int - Number of parts to divide the cards into. Returns: bool - True if at least one part contains a prime number, otherwise False. part_size = n // k has_prime = False for i in range(k): start = i * part_size + 1 end = start + part_size for num in range(start, end): if is_prime(num): has_prime = True break if has_prime: break return has_prime"},{"question":"Implement a function to perform basic string compression using the counts of repeated characters. For example, the string \\"aabcccccaaa\\" would become \\"a2b1c5a3\\". If the \\"compressed\\" string would not become smaller than the original string, your function should return the original string. You can assume the string has only uppercase and lowercase letters (a - z). Function signature: `def compress_string(s: str) -> str` Example 1: Input: \\"aabcccccaaa\\" Output: \\"a2b1c5a3\\" Example 2: Input: \\"abc\\" Output: \\"abc\\" Example 3: Input: \\"abbbbbbbbbbbb\\" Output: \\"a1b12\\"","solution":"def compress_string(s: str) -> str: Compresses the string using the counts of repeated characters. If the compressed string is not smaller, returns the original string. if not s: return s compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1]) compressed.append(str(count)) count = 1 # Adding the last repeated sequence compressed.append(s[-1]) compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Margaret is a software developer working on a logging system. She wants to process log entries and filter them based on specific criteria. Each log entry contains a timestamp in the format \\"YYYY-MM-DD HH:MM:SS\\" and a log message. She wants to implement a tool that, given a list of log entries and a time range, can filter out and return the log messages that fall within that time range. Your task is to help Margaret by creating a function to filter these log entries. ----- Input----- - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of log entries. - The next n lines each contain a log entry in the format \\"YYYY-MM-DD HH:MM:SS message\\", where \\"message\\" is the log message (a string of length 1 to 100). - The last two lines contain two timestamps t1 and t2 in the format \\"YYYY-MM-DD HH:MM:SS\\" — the start and end of the time range respectively. It is guaranteed that t1 ≤ t2. ----- Output----- Print all the log messages that have timestamps between t1 and t2, inclusive. The messages should be printed in the order they appear in the input. ----- Examples----- Input 5 2023-01-01 00:00:01 System start 2023-01-01 00:00:02 User login 2023-01-01 00:00:03 Error occurred 2023-01-01 00:00:04 System restart 2023-01-01 00:00:05 User logout 2023-01-01 00:00:02 2023-01-01 00:00:04 Output User login Error occurred System restart Input 3 2023-05-10 10:15:30 Session initialized 2023-05-10 10:16:30 Data processed 2023-05-10 10:17:30 Session terminated 2023-05-10 10:15:31 2023-05-10 10:17:29 Output Data processed","solution":"def filter_log_entries(log_entries, start_time, end_time): Filters log entries between the given start and end timestamps. Parameters: log_entries (list of str): List of log entries, each a string in the format \\"YYYY-MM-DD HH:MM:SS message\\". start_time (str): The start of the time range, inclusive, in the format \\"YYYY-MM-DD HH:MM:SS\\". end_time (str): The end of the time range, inclusive, in the format \\"YYYY-MM-DD HH:MM:SS\\". Returns: list of str: List of filtered log messages. filtered_log_messages = [] for entry in log_entries: timestamp, message = entry[:19], entry[20:] if start_time <= timestamp <= end_time: filtered_log_messages.append(message) return filtered_log_messages"},{"question":"# Task You are given a string of digits. Your task is to form the largest possible integer using exactly three of these digits, while making sure that the resulting integer is divisible by 3. # Example For `digits = \\"145976\\"`, the result should be `975`. ``` The possible three-digit integers that can be formed are: 145, 149, 159, 194, 195, 197, 145, 149, 159, 194, 195, 197, 415, 419, 459, 495, 497, 514, 519, 594, 597, 741, 745, 751, 754, 759, 791, 794, 941, 945, 951, 954, 971, 974. Out of these, the largest integer divisible by 3 is 975. ``` For `digits = \\"102345\\"`, the result should be `543`. ``` The possible three-digit integers that can be formed are: 102, 103, 104, 105, 120, 123, 124, 125, 130, 132, 134, 135, 140, 142, 143, 145, 150, 152, 153, 154, 201, 203, 204, 205, 210, 213, 214, 215, 230, 231, 234, 235, 240, 241, 243, 245, 250, 251, 253, 254, 301, 302, 304, 305, 310, 312, 314, 315, 320, 321, 324, 325, 340, 341, 342, 345, 350, 351, 352, 354, 401, 402, 403, 405, 410, 412, 413, 415, 420, 421, 423, 425, 430, 431, 432, 435, 450, 451, 452, 453, 501, 502, 503, 504, 510, 512, 513, 514, 520, 521, 523, 524, 530, 531, 532, 534, 540, 541, 542, 543. Out of these, the largest integer divisible by 3 is 543. ``` # Input/Output - `[input]` string `digits` The string of digits to be used for forming the largest integer. `0 < |digits| ≤ 100` - `[output]` an integer The largest possible integer divisible by 3 formed using exactly three of the input digits. If there is no such integer, output -1.","solution":"from itertools import combinations def largest_divisible_by_three(digits): possible_combinations = combinations(digits, 3) valid_numbers = [] for comb in possible_combinations: num = int(\\"\\".join(sorted(comb, reverse=True))) if num % 3 == 0: valid_numbers.append(num) if valid_numbers: return max(valid_numbers) else: return -1"},{"question":"Marie enjoys solving puzzles involving strings and sequences. Recently, she came across a problem that involves manipulating strings using a specific set of operations. She found it quite intriguing and decided to challenge you with it. In this problem, you are given a string `s` consisting of lower case English letters. You need to perform a series of operations to convert the string into a palindrome. A string is called a palindrome if it reads the same forwards and backwards. You are only allowed to perform one type of operation: you can replace any single character in the string with any other single character. You need to determine the minimum number of operations required to convert the given string into a palindrome. Write a program that takes as input the string `s` and outputs the minimum number of operations required to transform `s` into a palindrome. ---Input--- The input consists of a single line containing the string `s` (1 ≤ |s| ≤ 100,000) consisting of lower case English letters. ---Output--- Output a single integer, the minimum number of operations required to make the string `s` a palindrome. ---Examples--- Input abca Output 1 Input race Output 2 ---Note--- In the first example, the minimum number of operations required to make `abca` a palindrome is 1. For instance, replacing the character \'b\' with \'c\' results in the palindrome `acca`. In the second example, the minimum number of operations required to make `race` a palindrome is 2. For example, replacing \'r\' with \'e\' and \'c\' with \'a\' results in the palindrome `eaae`.","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to convert the string `s` into a palindrome. n = len(s) count = 0 # Compare characters from start and end for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count"},{"question":"Jerry is trying to paint a sequence of walls, each wall having a specific height. He can only paint walls with a brush that is exactly 1 unit wide. Jerry can paint a section of a wall by spending an amount of time proportional to its height. When he paints a continuous sequence of adjacent walls, the total time is determined by the highest wall in the sequence, as he can paint a vertical strip across all the walls at once. However, he can only paint a single continuous sequence in one operation. For example, if he paints walls with heights [2, 5, 4], the time would be determined by the tallest wall (height = 5). Determine the minimum amount of time Jerry needs to paint all the walls given a sequence of wall heights. -----Input----- The first line contains a single integer n (1 leq n leq 100): the number of test cases. The first line of each test case contains an integer m (1 leq m leq 100): the number of walls. The next line contains m space-separated integers, representing the heights of the walls h_1, h_2, ..., h_m (1 leq h_i leq 1000). -----Output----- For each test case, print a single integer: the minimum time in units Jerry needs to paint all the walls. -----Example----- Input 2 3 1 2 3 5 4 1 5 1 4 Output 3 5 -----Note----- In the first test case, Jerry can paint the sequence all at once since the heights are in increasing order. The time spent is determined by the highest wall, which is 3. In the second test case, Jerry can paint the sequence all at once, as the highest wall is 5 and it allows painting all walls considering their heights. The time spent is determined by this height.","solution":"def min_time_to_paint_walls(test_cases): results = [] for m, heights in test_cases: results.append(max(heights)) return results # Function to parse the input def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) index = 1 test_cases = [] for _ in range(n): m = int(lines[index]) heights = list(map(int, lines[index+1].strip().split())) test_cases.append((m, heights)) index += 2 return test_cases # Function to format the output def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Given a matrix of integers, some elements in the matrix might be zero. If an element is zero, you need to set the entire row and column containing that element to zero. Finally, return the modified matrix. # Constraints: - The matrix will have at most 10,000 rows and 10,000 columns. - You should try to minimize the space complexity to O(1) (i.e., without using additional matrices). - The time complexity should not exceed O(n*m), where n is the number of rows and m is the number of columns. # Example: **Input**: ``` matrix = [ [1, 2, 3], [4, 0, 6], [7, 8, 9] ] ``` **Output**: ``` [ [1, 0, 3], [0, 0, 0], [7, 0, 9] ] ``` # Explanation: The element at position (1,1) is zero. Thus, the entire first row and the entire first column are set to zero. **Note**: You need to modify the matrix in-place, i.e., do not return a new matrix. # Implementation: Write a function `setZeroes(matrix) { ... }` where `matrix` is a 2D list of integers representing the matrix. The function should modify the input matrix directly.","solution":"def setZeroes(matrix): if not matrix: return rows, cols = len(matrix), len(matrix[0]) first_row_has_zero = any(matrix[0][j] == 0 for j in range(cols)) first_col_has_zero = any(matrix[i][0] == 0 for i in range(rows)) for i in range(1, rows): for j in range(1, cols): if matrix[i][j] == 0: matrix[i][0] = 0 matrix[0][j] = 0 for i in range(1, rows): if matrix[i][0] == 0: for j in range(1, cols): matrix[i][j] = 0 for j in range(1, cols): if matrix[0][j] == 0: for i in range(1, rows): matrix[i][j] = 0 if first_row_has_zero: for j in range(cols): matrix[0][j] = 0 if first_col_has_zero: for i in range(rows): matrix[i][0] = 0"},{"question":"The robot wants to collect all the cans in the grid. The problem is that some cells in the grid are inaccessible! You\'ll get in input: - the robot\'s starting coordinates as a list of length 2 with the row on the grid and the column on the grid. - the grid as a list of lists where each element can be: - 0 if the cell is empty, - 1 if the cell contains a can, - -1 if the cell is inaccessible to the robot. # Task: You need to return the list of moves the robot makes to collect all the cans, beginning from the robot\'s starting coordinates, as a list of Strings. Possible moves are \\"U\\" for Up, \\"D\\" for Down, \\"R\\" for Right, and \\"L\\" for Left. # Outputs: * The list of moves for the robot to collect all the cans, in any valid sequence. * If there are no cans in the grid, return an empty list. * If the robot is outside of the grid, return \\"NoRobot\\". * If the robot is already on a cell with a can, immediately pick up the can and include the initial coordinates in the result. # Examples: ``` robot = [1, 1] grid =[ [0, -1, 0], [1, 1, 0], [-1, 1, 1] ] The route can be [\'D\', \'R\', \'U\', \'R\', \'D\'] or any other valid sequence. ``` ``` robot = [2, 2] grid = [ [0, -1, 0], [1, 0, 1], [0, -1, 1] ] The output can be [\\"NoRobot\\"] if the robot\'s starting position is invalid. ``` ``` robot = [0, 1] grid = [ [1, -1, 0], [0, 0, 0], [-1, 0, 0] ] The route can be [\\"R\\"] if the robot is starting on a can\'s position. ```","solution":"def collect_cans(robot, grid): Returns the list of moves the robot makes to collect all the cans. rows = len(grid) cols = len(grid[0]) r, c = robot # Check if robot is outside the grid if not (0 <= r < rows and 0 <= c < cols): return \\"NoRobot\\" # Directions: up, down, left, right directions = {\'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1)} def is_valid(x, y): return 0 <= x < rows and 0 <= y < cols and grid[x][y] != -1 moves = [] visited = set() cans = [] def dfs(x, y): if not is_valid(x, y) or (x, y) in visited: return visited.add((x, y)) if grid[x][y] == 1: cans.append((x, y)) for direction, (dx, dy) in directions.items(): nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: moves.append(direction) dfs(nx, ny) # Backtrack move if direction == \'U\': moves.append(\'D\') elif direction == \'D\': moves.append(\'U\') elif direction == \'L\': moves.append(\'R\') elif direction == \'R\': moves.append(\'L\') dfs(r, c) # If no cans found, return empty list if not cans: return [] result_moves = [] current_r, current_c = r, c for can_r, can_c in cans: while (current_r, current_c) != (can_r, can_c): if current_r < can_r: result_moves.append(\'D\') current_r += 1 elif current_r > can_r: result_moves.append(\'U\') current_r -= 1 elif current_c < can_c: result_moves.append(\'R\') current_c += 1 elif current_c > can_c: result_moves.append(\'L\') current_c -= 1 return result_moves"},{"question":"Implement a function that calculates the product of all elements except the current element for a given list of integers. Your function will receive a single argument: a list of integers. Assumptions: * The list will contain at least two elements. * All elements in the list are integers. * There can be negative integers and zeroes in the list. Examples: ```python product_except_self([1, 2, 3, 4]) ==> returns [24, 12, 8, 6] product_except_self([-1, 1, 0, -3, 3]) ==> returns [0, 0, 9, 0, 0] ```","solution":"def product_except_self(nums): Given a list of integers, returns a new list such that each element at index i of the new list is the product of all the numbers in the original list except nums[i]. length = len(nums) result = [1] * length # Initialize the result array with 1 # Calculate products of all elements to the left of each index left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] # Calculate products of all elements to the right of each index right_product = 1 for i in range(length - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Given a string `s` consisting of lowercase English letters, determine whether it is possible to rearrange the letters in `s` to form a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. If it is possible to rearrange `s` to form a palindrome, return `true`; otherwise, return `false`. __Example__ * For `s = \\"civic\\"`, the output should be `canFormPalindrome(s) = true`. The string \\"civic\\" is already a palindrome. * For `s = \\"ivicc\\"`, the output should be `canFormPalindrome(s) = true`. The string can be rearranged to \\"civic\\", which is a palindrome. * For `s = \\"hello\\"`, the output should be `canFormPalindrome(s) = false`. There is no way to rearrange the letters to make \\"hello\\" a palindrome. * For `s = \\"aabbcc\\"`, the output should be `canFormPalindrome(s) = true`. The string can be rearranged to \\"abccba\\" or \\"abcabc\\", both of which are palindromes. __Input/Output__ * [input] string s A string of lowercase English letters. Constraints: `1 ≤ s.length ≤ 1000`. * [output] boolean `true`, if it is possible to rearrange `s` to form a palindrome; `false`, if it is not possible to rearrange `s` to form a palindrome.","solution":"def canFormPalindrome(s): Determines whether it is possible to rearrange the letters in s to form a palindrome. :param s: A string of lowercase English letters. :return: True if it is possible to rearrange s to form a palindrome, False otherwise. from collections import Counter count = Counter(s) # A string can be rearranged to form a palindrome if at most one character has an odd count. odd_count = sum(1 for c in count if count[c] % 2 != 0) return odd_count <= 1"},{"question":"You are given a string S consisting of lowercase alphabets and a string T consisting of lowercase alphabets of length at most 26. Your goal is to determine if you can form the string T by deleting some (or no) characters from S without reordering the remaining characters. If it is possible, return \\"YES\\", otherwise return \\"NO\\". -----Input----- - The first line contains an integer Q, the number of test cases. - Each test case consists of two lines: - The first line contains the string S. - The second line contains the string T. -----Output----- For each test case, output \\"YES\\" if it is possible to form the string T by deleting some (or no) characters from S without reordering the remaining characters. Otherwise, output \\"NO\\". -----Constraints----- - 1 le Q le 10^4 - 1 le |S| le 10^5 - 1 le |T| le 26 - The sum of lengths of S over all test cases le 10^6 -----Example Input 1----- 2 abcdefg acf xyz yx -----Example Output 1----- YES NO -----Explanation 1----- - In the first test case, we can delete \'b\', \'d\', and \'e\' from \'abcdefg\' to get \'acf\', so the answer is \\"YES\\". - In the second test case, we can not form \'yx\' from \'xyz\' without reordering, so the answer is \\"NO\\".","solution":"def can_form(S, T): Determines if string T can be formed by deleting some (or no) characters from S without reordering. it = iter(S) return all(character in it for character in T) def process_cases(Q, cases): results = [] for S, T in cases: if can_form(S, T): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers, determine the length of the longest consecutive elements sequence. You must write a function that solves this problem in O(n) time. The sequence must be strictly increasing with a difference of 1 between consecutive elements. # Example ```text Input: [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore, the length is 4. Input: [0, 3, 7, 2, 5, 8, 4, 6, 0, 1] Output: 9 Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. Therefore, the length is 9. ``` # Constraints - The input list will not be empty. - The input list may contain duplicates. - The integers can be positive or negative.","solution":"def longest_consecutive_sequence(nums): Determines the length of the longest consecutive elements sequence. Args: nums: List[int] - a list of integers. Returns: int - the length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Write a function called `longestEvenSubarray` which takes an array of integers as input and returns the length of the longest contiguous subarray containing only even numbers. Examples: ``` Input: [1, 2, 4, 6, 3, 8, 10, 12] Output: 3 Explanation: The longest contiguous subarray containing only even numbers is [8, 10, 12], so the function returns 3. Input: [7, 5, 9, 2, 4, 6, 1] Output: 3 Explanation: The longest contiguous subarray containing only even numbers is [2, 4, 6], so the function returns 3. Input: [5, 7, 9, 11] Output: 0 Explanation: There is no even number in the array, so the function returns 0. ```","solution":"def longestEvenSubarray(arr): Returns the length of the longest contiguous subarray containing only even numbers. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Jon has recently become fascinated with matrices, especially in the context of graphs. He came across the concept of adjacency matrices and decided to experiment with them. For this challenge, Jon wants to determine whether a given matrix represents an undirected graph. An undirected graph with n vertices is represented by an n times n adjacency matrix, where each element is either 0 or 1. A value of 1 in the cell (i,j) indicates there is an edge between vertices i and j, and a 0 indicates no edge. The graph is undirected, meaning the adjacency matrix is symmetric: A[i][j] = A[j][i] for all i, j. Also, there should be no self-loops, which means A[i][i] = 0 for all i. Your task is to determine if the given matrix is a valid adjacency matrix for an undirected graph. # Input - The first line contains an integer t (1 le t le 500), the number of test cases. For each test case: - The first line contains an integer n (2 le n le 50), the dimensions of the matrix. - Each of the next n lines contains n integers (either 0 or 1), representing the matrix. # Output For each test case, output \\"Yes\\" if the matrix represents an undirected graph. Otherwise, output \\"No\\". You can print each letter in any case (upper or lower). # Example Input ``` 2 3 0 1 0 1 0 1 0 1 0 3 0 1 1 1 0 1 0 1 0 ``` Output ``` Yes No ``` # Note - In the first test case, the matrix is symmetric and there are no self-loops. - In the second test case, the matrix is not symmetric (the value in position (3,2) is 1 while the value in position (2,3) is 0), so it does not represent an undirected graph.","solution":"def is_undirected_graph(matrix): Checks if the given matrix represents an undirected graph. n = len(matrix) for i in range(n): if matrix[i][i] != 0: return \\"No\\" for j in range(i + 1, n): if matrix[i][j] != matrix[j][i]: return \\"No\\" return \\"Yes\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: results.append(is_undirected_graph(case)) return results"},{"question":"Task Write a function that takes a string as input and returns a dictionary with the frequency count of each character in the string. The keys of the dictionary should be the characters, and the values should be the number of times each character appears in the string. The function should be case-sensitive and include spaces, punctuation, and special characters. # Examples ```python \\"hello world\\" => {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \' \': 1, \'w\': 1, \'r\': 1, \'d\': 1} \\"aaabbbbcc\\" => {\'a\': 3, \'b\': 4, \'c\': 2} \\"Python 3.8!\\" => {\'P\': 1, \'y\': 1, \'t\': 1, \'h\': 1, \'o\': 1, \'n\': 1, \' \': 1, \'3\': 1, \'.\': 1, \'8\': 1, \'!\': 1} ``` # Additional Details - If the input string is empty, the function should return an empty dictionary. - The function should be efficient and handle large input strings gracefully.","solution":"def char_frequency(s): Returns a dictionary with the frequency count of each character in the input string s. The count is case-sensitive and includes spaces, punctuation, and special characters. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"We need a system that can assign and manage tasks among team members and provide the status of these tasks. # The task Create a class `TaskManager` with the following methods. All arguments are strings: names of tasks or team members. Upon the first use of a name, that name is added to the system. * `assign_task(task_name, member_name)` returning `boolean` Assigns the given task to the specified team member. Return `false` if the task is already assigned to another member or if the member does not exist. * `complete_task(task_name)` returning `boolean` Mark the specified task as completed. Return `false` if the task is not assigned or already completed. * `task_status(task_name)` returning `string` Returns the current status of the task: `\'assigned\'`, `\'completed\'`, or `\'unassigned\'`. * `tasks_of_member(member_name)` returning `list` of `string` Return the current list of tasks assigned to the member in alphabetical order. * `members_of_task(task_name)` returning `list` of `string` Return the names of members the task is assigned to in alphabetical order (if multiple assignments ever occur). # Example Consider the following scenario: ```python tm = TaskManager() tm.assign_task(\\"TaskA\\", \\"Alice\\") # True tm.assign_task(\\"TaskB\\", \\"Bob\\") # True tm.task_status(\\"TaskA\\") # \'assigned\' tm.task_status(\\"TaskC\\") # \'unassigned\' tm.tasks_of_member(\\"Alice\\") # [\'TaskA\'] tm.complete_task(\\"TaskA\\") # True tm.complete_task(\\"TaskA\\") # False (already completed) tm.tasks_of_member(\\"Alice\\") # [] (no current tasks) tm.task_status(\\"TaskA\\") # \'completed\' tm.assign_task(\\"TaskA\\", \\"Alice\\") # False (already completed) tm.assign_task(\\"TaskC\\", \\"Bob\\") # True tm.members_of_task(\\"TaskC\\") # [\'Bob\'] ```","solution":"class TaskManager: def __init__(self): self.tasks = {} self.members = {} def assign_task(self, task_name, member_name): if task_name in self.tasks: if self.tasks[task_name][\'status\'] == \'completed\': return False if self.tasks[task_name][\'member\'] is not None and self.tasks[task_name][\'member\'] != member_name: return False if member_name not in self.members: return False self.tasks[task_name] = {\'status\': \'assigned\', \'member\': member_name} if member_name not in self.members: self.members[member_name] = [] self.members[member_name].append(task_name) return True def complete_task(self, task_name): if task_name not in self.tasks or self.tasks[task_name][\'status\'] != \'assigned\': return False self.tasks[task_name][\'status\'] = \'completed\' member = self.tasks[task_name][\'member\'] self.members[member].remove(task_name) return True def task_status(self, task_name): if task_name not in self.tasks: return \'unassigned\' return self.tasks[task_name][\'status\'] def tasks_of_member(self, member_name): if member_name not in self.members: return [] return sorted(self.members[member_name]) def members_of_task(self, task_name): if task_name not in self.tasks or self.tasks[task_name][\'member\'] is None: return [] return [self.tasks[task_name][\'member\']]"},{"question":"You are required to implement a function that takes a list of integers and returns a list consisting of all the prime numbers found within the given list. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. # Tests ```python filter_primes([10, 15, 3, 7, 9]) # => [3, 7] filter_primes([4, 6, 8, 10, 12]) # => [] filter_primes([2, 5, 11, 13, 17]) # => [2, 5, 11, 13, 17] ```","solution":"def is_prime(n): Helper function to check if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(lst): Filters the prime numbers from the given list lst. return [num for num in lst if is_prime(num)]"},{"question":"You are working on a logistics optimization problem for a popular delivery service. The delivery vehicles have a weight limit they cannot exceed. You are given a list of packages, each with a weight, and you need to determine the maximum number of packages that can be delivered in a single trip without exceeding the weight limit of the vehicle. You decide to write a function `max_packages()` that takes two inputs: - `max_weight` (a positive integer) which represents the maximum weight the vehicle can carry. - `weights` (a list of positive integers) which represents the weights of the packages. The function should return the maximum number of packages that can be delivered in a single trip. For example: `max_packages(10, [2, 3, 4, 5])` should return `3` because the packages with weights `2, 3, and 4` can be delivered together without exceeding the weight limit of `10`. (Total weight is `9`). `max_packages(7, [2, 2, 3, 3, 4])` should return `3` because the packages with weights `2, 2, and 3` can be delivered together without exceeding the weight limit of `7`. (Total weight is `7`).","solution":"def max_packages(max_weight, weights): Returns the maximum number of packages that can be delivered in a single trip without exceeding the weight limit of the vehicle. weights.sort() current_weight = 0 count = 0 for weight in weights: if current_weight + weight <= max_weight: current_weight += weight count += 1 else: break return count"},{"question":"Write a function that takes a string containing a sentence and returns a dictionary where the keys are the words and the values are the number of times each word appears in the sentence. The input sentence is not case-sensitive, and words are defined as sequences of characters separated by spaces. Punctuation should be ignored. For example, given the input: ``` \\"The quick brown fox jumps over the lazy dog. The quick blue fox jumps.\\" ``` The function should return: ``` { \\"the\\": 2, \\"quick\\": 2, \\"brown\\": 1, \\"fox\\": 2, \\"jumps\\": 2, \\"over\\": 1, \\"lazy\\": 1, \\"dog\\": 1, \\"blue\\": 1 } ``` **Note:** Ensure that the words in the resulting dictionary are in lowercase.","solution":"import re from collections import defaultdict def word_count(sentence): Returns a dictionary of word counts in a given sentence. Args: sentence (str): A string containing the sentence. Returns: dict: A dictionary where keys are words and values are the number of times each word appears. # A dictionary to store the word counts count_dict = defaultdict(int) # Normalize the sentence to lowercase and remove punctuation normalized_sentence = re.sub(r\'[^a-zA-Zs]\', \'\', sentence).lower() # Split the sentence into words words = normalized_sentence.split() # Count the words for word in words: count_dict[word] += 1 return dict(count_dict)"},{"question":"In a futuristic city, the City Council wants to analyze the reliability of its transportation system by evaluating the number of direct routes available between various points. They have a matrix that represents the direct routes between different locations. Given an `n x n` matrix where an entry `matrix[i][j]` is `1` if there is a direct route from location `i` to location `j` and `0` if there is no direct route, write a function to determine how many locations have at least one direct outgoing route. # Input - An integer `n`, representing the number of locations (1 ≤ n ≤ 100). - A 2D list `matrix` of size `n x n` containing binary values (0s and 1s). # Output - An integer representing the number of locations with at least one direct outgoing route. # Example Input: ``` 3 [ [0, 1, 0], [0, 0, 1], [1, 0, 0] ] ``` Output: ``` 3 ``` Input: ``` 4 [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ] ``` Output: ``` 0 ``` # Explanation - In the first example, every location (0, 1, and 2) has at least one direct outgoing route. - In the second example, none of the locations have any direct outgoing routes.","solution":"def count_outgoing_routes(n, matrix): Returns the number of locations with at least one direct outgoing route. Parameters: - n: an integer representing the number of locations. - matrix: a 2D list of size n x n containing binary values (0s and 1s). Returns: - an integer representing the number of locations with at least one direct outgoing route. count = 0 for i in range(n): if any(matrix[i][j] == 1 for j in range(n)): count += 1 return count"},{"question":"Maria is developing a software application and she needs to implement a function to evaluate if a given input string should be considered a valid representation of an integer according to specific rules. A valid integer can optionally start with a \'+\' or \'-\' sign, followed by one or more digits. The string can also include leading zeros, but no other characters, spaces, or punctuation marks are allowed. The string should be non-empty. -----Input:----- The first line contains an integer T, denoting the number of test cases. Each of the next T lines contains a string S representing a potential integer input. -----Output:----- For each test case, output \\"YES\\" if S is a valid integer representation according to the given rules, otherwise output \\"NO\\". -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ length of S ≤ 100 -----Sample Input:----- 4 123 +007 -89 12a3 -----Sample Output:----- YES YES YES NO","solution":"def is_valid_integer(s): Checks if the input string s is a valid integer representation. if not s: return False # Check if the string starts with optional \'+\' or \'-\' and followed by digits if s[0] in (\'+\', \'-\'): s = s[1:] # Ensure the remaining characters are digits and non-empty return s.isdigit() and len(s) > 0 def validate_integers(test_cases): Takes a list of test cases and returns a list of \\"YES\\" or \\"NO\\" depending on whether the strings are valid integer representations. results = [] for s in test_cases: if is_valid_integer(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Write a function that takes a list of integers and returns a list of integers where each element at index `i` is the product of all the numbers in the original array except the one at `i`. ```python def product_except_self(nums): ``` For example, given `[1, 2, 3, 4]`, the function should return `[24, 12, 8, 6]`. Example usage: ```python print(product_except_self([1, 2, 3, 4])) # should return [24, 12, 8, 6] print(product_except_self([2, 3, 4])) # should return [12, 8, 6] print(product_except_self([4, 5, 6])) # should return [30, 24, 20] print(product_except_self([1, 1, 1, 1])) # should return [1, 1, 1, 1] print(product_except_self([-1, 2, -3, 4])) # should return [-24, 12, -8, 6] ``` You may not use division and your algorithm should run in O(n) time complexity.","solution":"def product_except_self(nums): This function returns a list such that each element at index i of the output list is the product of all the numbers in the input list except the one at i. length = len(nums) # Step 1: Create an output array and initialize with 1s output = [1] * length # Step 2: Calculate the prefix products prefix = 1 for i in range(length): output[i] = prefix prefix *= nums[i] # Step 3: Calculate the postfix products postfix = 1 for i in range(length - 1, -1, -1): output[i] *= postfix postfix *= nums[i] return output"},{"question":"Given an undirected graph represented as an adjacency list, determine if the graph is a bipartite graph. A graph is bipartite if you can split its set of nodes into two independent subsets A and B such that every edge connects a node in A to a node in B. -----Input----- The first line contains an integer t (1 le t le 1000) — the number of test cases. For each test case: - The first line contains two integers n and m (1 le n, m le 100) — the number of nodes and the number of edges in the graph. - The next m lines each contain two integers u and v (1 le u, v le n) indicating an edge between nodes u and v. -----Output----- For each test case, print \\"YES\\" if the graph is bipartite, or \\"NO\\" otherwise. -----Example----- Input 2 4 4 1 2 2 3 3 4 4 1 3 3 1 2 2 3 3 1 Output YES NO","solution":"def is_bipartite_bfs(adj_list, n): color = [-1] * n for start in range(n): if color[start] == -1: queue = [start] color[start] = 1 while queue: node = queue.pop(0) for neighbor in adj_list[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return \\"NO\\" return \\"YES\\" def solve(t, test_cases): results = [] for i in range(t): n, m, edges = test_cases[i] adj_list = [[] for _ in range(n)] for u, v in edges: adj_list[u-1].append(v-1) adj_list[v-1].append(u-1) result = is_bipartite_bfs(adj_list, n) results.append(result) return results"},{"question":"# Task You are given a list of integers. Your task is to find the smallest positive integer that is a multiple of every number in the list. Write a function that takes a list of integers and returns this smallest positive integer. # Example ``` For the input list [2, 3, 4], the output should be 12. Explanation: 12 is the smallest number that is a multiple of 2, 3, and 4. ``` # Input/Output - `input` list `numbers` Constraints: `2 ≤ len(numbers) ≤ 10` and `1 ≤ numbers[i] ≤ 100` - `output` an integer # Note - The given list will always contain at least two integers. - The list will include distinct integers.","solution":"import math from functools import reduce def lcm(a, b): Returns the Least Common Multiple (LCM) of two integers a and b. return abs(a * b) // math.gcd(a, b) def smallest_multiple(numbers): Returns the smallest positive integer that is a multiple of every number in the list. return reduce(lcm, numbers)"},{"question":"A robot is situated in an `m` x `n` grid and starts at the top-left corner (0, 0). The starting cell is labeled 1, and the robot moves in a \\"zigzag\\" manner down the grid. The robot always starts from the leftmost cell (at the start of a new row) and travels to the right if the row number is odd, or it starts from the rightmost cell and travels to the left if the row number is even. For example, if the grid dimensions are 3 x 3 (3 rows and 3 columns), the robot will number the grid cells as follows: ``` 1 2 3 6 5 4 7 8 9 ``` Given the dimensions `m` and `n` of the grid, your task is to compute the exact position (row and column) of the cell labelled with a given number `k`. ---Input--- - The first line contains a single integer t (1 le t le 100) – the number of test cases. - Each of the next t lines contains three integers m, n, and k (1 le m, n le 100 and 1 le k le m cdot n). ---Output--- For each test case, output the row and column (0-based) of the cell labeled `k` as \\"row column\\". ---Example--- Input: 4 3 3 5 4 2 8 2 2 3 3 1 2 Output: 1 1 3 1 1 0 2 0","solution":"def find_position(m, n, k): row = (k - 1) // n col = (k - 1) % n if row % 2 == 1: # Odd row, reverse column order col = n - 1 - col return row, col def process_test_cases(test_cases): results = [] for m, n, k in test_cases: row, col = find_position(m, n, k) results.append((row, col)) return results"},{"question":"You have been given an array of integers. Your task is to find the maximum sum of any subarray of the given array. A subarray is defined as a contiguous part of the array and can be of any length, but must contain at least one element. **Input:** - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of elements in the array. - The second line contains N integers representing the array. **Output:** For each test case, output the maximum sum of any subarray of the given array. **Constraints:** - (1 le T le 10) - (1 le N le 10^5) - (-10^4 le text{Array elements} le 10^4) **Example Input:** ``` 2 5 1 2 3 -2 5 4 -1 -2 -3 -4 ``` **Example Output:** ``` 9 -1 ``` **Explanation:** - In the first test case, the subarray with the maximum sum is `[1, 2, 3, -2, 5]` with sum 9. - In the second test case, the subarray with the maximum sum is `[-1]` with sum -1.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any subarray using Kadane\'s Algorithm. max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum def max_subarray_sums(test_cases): Processes multiple test cases and returns the results for each. results = [] for case in test_cases: n, arr = case results.append(max_subarray_sum(arr)) return results"},{"question":"Given an array of integers, find the smallest positive integer that cannot be represented as the sum of elements of any subset of the array. Example 1: Input: arr = [1, 2, 3, 10] Output: 7 Explanation: All values from 1 to 6 can be represented as sum of subset elements, but 7 cannot. Example 2: Input: arr = [1, 1, 1, 1] Output: 5 Explanation: All values from 1 to 4 can be represented, but 5 cannot. Example 3: Input: arr = [3, 5, 7] Output: 1 Explanation: 1 cannot be represented as the sum of any subset. Constraints: 1 <= arr.length <= 10 1 <= arr[i] <= 100","solution":"def smallest_positive_integer_not_sum(arr): Given an array of integers, find the smallest positive integer that cannot be represented as the sum of elements of any subset of the array. arr.sort() res = 1 # Initialize result for num in arr: if num > res: break res += num return res"},{"question":"Given a list of integers, write a function to find the smallest positive integer that is missing from the list. For example: * `find_missing([1, 2, 0]) = 3` * `find_missing([3, 4, -1, 1]) = 2` * `find_missing([1, 2, 3]) = 4` Write an efficient algorithm that can handle both positive and negative integers as well as zero. The function should have a linear runtime complexity.","solution":"def find_missing(nums): Returns the smallest positive integer missing from the list of integers. n = len(nums) # Step 1: Place each number in its right place if possible for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Step 2: Find the first number which is not in the right place for i in range(n): if nums[i] != i + 1: return i + 1 # If all numbers are in the right place, return next positive integer return n + 1"},{"question":"Write a function that performs run-length encoding on a given string. Run-length encoding is a basic compression algorithm that converts consecutive identical elements into a single element and a count representing the number of occurrences of that element. The function should return the encoded string. # Details: - The input will be a string consisting of lowercase alphabetic characters. - The output should be a string representing the run-length encoding of the input. # Example: If the input string is \\"aabbbcdeee\\", the output should be \\"a2b3c1d1e3\\". If the input string is \\"wwwaaadexxxxxx\\", the output should be \\"w3a3d1e1x6\\". **Note**: Consecutive identical elements are combined into one element followed by a count. The output should not contain any spaces or separators between letters and their counts.","solution":"def run_length_encoding(s): Performs run-length encoding on the given string. :param s: The input string consisting of lowercase alphabetic characters. :return: The run-length encoded string. if not s: return \\"\\" encoded_str = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: encoded_str.append(f\\"{current_char}{count}\\") current_char = char count = 1 encoded_str.append(f\\"{current_char}{count}\\") return \'\'.join(encoded_str)"},{"question":"You are given a string S consisting of lowercase letters, and your task is to determine the frequency of each character in the string. The frequencies should be printed in alphabetical order. -----Input----- The first line contains an integer T, the number of test cases. Each of the next T lines contains a single string S. -----Output----- For each test case, output the characters and their frequencies in alphabetical order, each on a new line in the format `char: frequency`. The output for each test case should be separated by a blank line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000 -----Example-----Input 2 apple banana Output a: 1 e: 1 l: 1 p: 2 a: 3 b: 1 n: 2 -----Explanation----- - Test 1: The string \\"apple\\" has 1 \'a\', 1 \'e\', 1 \'l\', and 2 \'p\', all printed in alphabetical order. - Test 2: The string \\"banana\\" has 3 \'a\'s, 1 \'b\', and 2 \'n\'s, printed in alphabetical order.","solution":"def char_frequencies(t, strings): Returns the frequency of each character in the strings. Parameters: t (int): The number of test cases. strings (list of str): The strings for which to determine the frequencies. Returns: list of str: The frequencies of the characters in alphabetical order for each string. results = [] for s in strings: frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 sorted_chars = sorted(frequency.items()) result = \\"n\\".join(f\\"{char}: {count}\\" for char, count in sorted_chars) results.append(result) return \\"nn\\".join(results)"},{"question":"You are tasked with writing a function that computes the Longest Prefix Suffix (LPS) array for a given string. The LPS array is used in the KMP (Knuth-Morris-Pratt) string matching algorithm. For a string str[0..n-1], the LPS array is of the same length as the string. An element LPS[i] of the LPS array stores the length of the longest proper prefix of the substring str[0..i] which is also a suffix of this substring. Example: Index: 0 1 2 3 4 5 6 7 Text: \\"a b a b a c a b\\" LPS values: [0, 0, 1, 2, 3, 0, 1, 2] For an empty string, the function should return an empty array []. Input: string str Output: LPS array For example: ```python def compute_lps_array(string): lps = [0] * len(string) length = 0 i = 1 while i < len(string): if string[i] == string[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps print(compute_lps_array(\\"abababca\\")) # Output: [0, 0, 1, 2, 3, 4, 0, 1] ``` Note that an efficient solution should run in O(n) time.","solution":"def compute_lps_array(string): Computes the Longest Prefix Suffix (LPS) array for a given string. Args: string (str): The input string for which the LPS array will be computed. Returns: list: The LPS array. lps = [0] * len(string) length = 0 # length of the previous longest prefix suffix i = 1 # start from the second character while i < len(string): if string[i] == string[length]: length += 1 lps[i] = length i += 1 else: if length != 0: length = lps[length - 1] else: lps[i] = 0 i += 1 return lps"},{"question":"# Task: Write a function `validate_transaction_record` which accepts a transaction record in the form of a string and determines whether it\'s a valid record. The function should return a boolean value: `True` if the record is valid and `False` otherwise. A valid transaction record must follow these rules: 1. It must start with a date in the format `YYYY-MM-DD`. 2. A single space must separate the date from the description. 3. The description can contain only alphanumeric characters and spaces, and must not be empty. 4. A single space must separate the description from the amount. 5. The amount must be a valid floating-point number (can have up to 2 decimal places). Both positive and negative amounts are acceptable. # Example: ```python >>> validate_transaction_record(\'2023-01-15 Grocery shopping 123.45\') True >>> validate_transaction_record(\'2023-01-15 Dinner -50.99\') True >>> validate_transaction_record(\'2023-01-15 12345.67\') False >>> validate_transaction_record(\'2023/01/15 Grocery shopping 123.45\') False >>> validate_transaction_record(\'2023-01-15Biking100.00\') False ``` # Libraries/Recommendations: **Python:** * `re`: The RegEx library for Python. # Notes: * Pay careful attention to the formatting requirements. * Ensure that the function handles edge cases such as malformed dates, missing spaces, and invalid amounts.","solution":"import re def validate_transaction_record(record): Validates a transaction record based on the specified rules. Parameters: record (str): The transaction record as a string. Returns: bool: True if the record is valid, False otherwise. pattern = ( r\'^d{4}-d{2}-d{2} \' # Date in format YYYY-MM-DD r\'[A-Za-z0-9 ]+ \' # Description with alphanumeric characters and spaces r\'-?d+(.d{1,2})?\' # Amount which is a valid floating-point number up to 2 decimal places ) match = re.match(pattern, record) return match is not None"},{"question":"Write a program to determine the longest word in a sentence. -----Input----- The input consists of a single line containing a sentence S. The sentence consists of words separated by spaces. -----Output----- Output the longest word in the sentence. If there are multiple words with the same maximum length, output the one which appears first. -----Constraints----- - 1 ≤ Length of S ≤ 1000 - The sentence contains only lowercase and uppercase English letters and spaces. -----Example----- Input this is a test sentence Output sentence","solution":"def longest_word(sentence): Returns the longest word in a given sentence. If there are multiple words with the same maximum length, it returns the one which appears first. words = sentence.split() max_length = 0 longest = \\"\\" for word in words: if len(word) > max_length: max_length = len(word) longest = word return longest"},{"question":"Given a 2D grid of integers, each cell represents a city block. Some blocks are marked as obstacles (represented by -1), which you cannot pass through. Your goal is to find the number of unique paths from the top-left corner to the bottom-right corner of the grid, moving only right or down, without passing through the obstacles. Write a function to calculate the number of unique paths. Assume the grid dimensions are m x n. Example 1: Input: [[0,0,0],[0,-1,0],[0,0,0]] Output: 2 Explanation: There are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: [[0,-1],[0,0]] Output: 1 Explanation: There is only one unique path: 1. Down -> Right Note: - The grid dimensions are m (1 ≤ m ≤ 100) and n (1 ≤ n ≤ 100). - Grid cells are either 0 (walkable) or -1 (obstacle).ai","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left to the bottom-right corner of the grid, while avoiding obstacles (represented by -1). if not grid or grid[0][0] == -1 or grid[-1][-1] == -1: return 0 m, n = len(grid), len(grid[0]) # Initialize a 2D dp array with all zeros dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if grid[i][0] == 0 else 0 # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if grid[0][j] == 0 else 0 # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"Write a function to assess and adjust the stock levels of products in a store. * The function should take two parameters: - An object/dict representing the initial stock levels of the products with product names as keys and quantities as values. - A list of transactions, where each transaction is represented by a tuple with a product name and a quantity change (positive for restocking, negative for sales). * The function should return an object/dict with the final stock levels of the products. **Further points:** * The values in the returned dictionary should be zero or positive numbers. * If a transaction tries to reduce the stock of a product below zero, set the product’s stock to zero. * Assume the product names in transactions always exist in the initial stock object. # Example Given the initial stock: ```python { \'Apples\': 10, \'Bananas\': 5, \'Oranges\': 8 } ``` And the list of transactions: ```python [ (\'Apples\', -3), (\'Bananas\', 10), (\'Oranges\', -9) ] ``` The function should return: ```python { \'Apples\': 7, \'Bananas\': 15, \'Oranges\': 0 } ```","solution":"def adjust_stock_levels(initial_stock, transactions): Adjusts the stock levels based on transactions. Parameters: initial_stock (dict): Dictionary representing the initial stock levels. transactions (list): List of transactions, each represented as a tuple (product_name, quantity_change). Returns: dict: Dictionary with the final stock levels of the products. final_stock = initial_stock.copy() for product, change in transactions: new_quantity = final_stock[product] + change final_stock[product] = max(new_quantity, 0) return final_stock"},{"question":"Create a function called `alternate_sort` that takes a list of integers and strings. Your task is to return a new list where: - All integers come before all strings, - Integers are sorted in ascending order, - Strings are sorted in alphabetical order. Example: ``` alternate_sort([3, \'apple\', 5, \'banana\', 1, \'cherry\']) ``` should return: ``` [1, 3, 5, \'apple\', \'banana\', \'cherry\'] ``` Similarly, ``` alternate_sort([10, \'orange\', 2, \'grape\', \'peach\', 4]) ``` should return: ``` [2, 4, 10, \'grape\', \'orange\', \'peach\'] ``` Hints: - You may assume that the input list will always contain at least one integer and one string. - Use the `isinstance` function to check the type of each element.","solution":"def alternate_sort(lst): Returns a new list where all integers come before all strings, integers are sorted in ascending order, and strings are sorted in alphabetical order. integers = sorted([x for x in lst if isinstance(x, int)]) strings = sorted([x for x in lst if isinstance(x, str)]) return integers + strings # Example usage: # print(alternate_sort([3, \'apple\', 5, \'banana\', 1, \'cherry\'])) # Output: [1, 3, 5, \'apple\', \'banana\', \'cherry\']"},{"question":"John is attempting to create a program that checks whether a given string is a palindrome. A palindrome is a word that reads the same backward as forward. However, his program should ignore case and non-alphanumeric characters while checking for palindromes. Write a function to determine if a given string is a palindrome, considering only alphanumeric characters and ignoring cases. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case, there is a single line containing a string S. -----Output:----- For each test case, print \\"yes\\" if the string is a palindrome and \\"no\\" otherwise. -----Constraints----- 10 points: - 1 leq T leq 10 - 1 leq text{length of } S leq 100 20 points: - 1 leq T leq 1000 - 1 leq text{length of } S leq 1000 70 points: - 1 leq T leq 10000 - 1 leq text{length of } S leq 10000 -----Sample Input:----- 3 A man, a plan, a canal: Panama race a car No lemon, no melon -----Sample Output:----- yes no yes -----EXPLANATION:----- In the first test case, ignoring case and non-alphanumeric characters, the string \\"A man, a plan, a canal: Panama\\" becomes \\"amanaplanacanalpanama\\", which is a palindrome. In the second test case, \\"race a car\\" becomes \\"raceacar\\", which is not a palindrome. In the third test case, \\"No lemon, no melon\\" becomes \\"nolemonnomelon\\", which is a palindrome.","solution":"import re def is_palindrome(S): Determines if the given string S is a palindrome, ignoring case and non-alphanumeric characters. # Clean the string, keep only alphanumeric characters and convert to lowercase clean_s = re.sub(r\'[^A-Za-z0-9]\', \'\', S).lower() # Check if the cleaned string is a palindrome return clean_s == clean_s[::-1] def check_palindromes(T, strings): Given T strings, determines for each if it is a palindrome and returns a list of \\"yes\\" or \\"no\\". results = [] for s in strings: if is_palindrome(s): results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"# rgbToHex Converter Write a function that takes three integers as input representing the red, green, and blue (RGB) components of a color, and returns the hexadecimal string representation of that color. Each input value for the RGB components can range from 0 to 255 inclusive. The hexadecimal color code should be formatted as a six-character string, with each pair of characters representing the red, green, and blue components in their respective order. Ensure that each component is converted to a two-character hexadecimal code, including a leading zero if necessary. **Example:** ``` Input: 255, 99, 71 Output: #FF6347 ``` **Note:** - The function should handle input values at their boundaries (0 and 255) correctly. - The returned hexadecimal string should be in uppercase. - Leading zeros should be included in each component if necessary to ensure the hexadecimal string is always six characters long.","solution":"def rgb_to_hex(r, g, b): Converts RGB values to a hex string in the format \'#RRGGBB\'. Each component (r, g, b) ranges from 0 to 255. # Ensure the values are within the range 0-255 if not (0 <= r <= 255 and 0 <= g <= 255 and 0 <= b <= 255): raise ValueError(\\"RGB values must be in the range 0-255\\") return \'#{0:02X}{1:02X}{2:02X}\'.format(r, g, b)"},{"question":"In Tech Innovation City, a new hacker competition is introduced which involves solving complex coding challenges. One of the challenges is to find the maximum product of any subarray within an array of integers. A subarray is a contiguous part of an array. You must develop a program that can determine this maximum product from several given test cases. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. - The following 2T lines describe the test cases: - The first line of each test case contains an integer N denoting the size of the array. - The second line of each test case contains N space-separated integers A1, A2, A3,...,An representing the elements of the array. -----Output:----- - For each test case, print the maximum product of any subarray on a new line. -----Constraints:----- - 1 leq T leq 10^2 - 1 leq N leq 10^5 - -10^4 leq A1, A2, A3,...,An leq 10^4 -----Sample Input:----- 2 4 2 3 -2 4 3 -2 0 -1 -----Sample Output:----- 6 0","solution":"def max_product_subarray(nums): Finds the maximum product of any subarray within the given array of integers. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: temp_max = max_product max_product = max(num, num * max_product, num * min_product) min_product = min(num, num * temp_max, num * min_product) result = max(result, max_product) return result def solve_max_product_problem(test_cases): results = [] for nums in test_cases: results.append(max_product_subarray(nums)) return results"},{"question":"You are given a list of numbers, and you need to perform two types of operations on the list: 1. Add an integer to each element in a sublist. 2. Retrieve the maximum integer from a sublist. The list is initially empty, and you will be provided with a sequence of operations to perform. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100000), the number of operations. - The next `n` lines contain operations in the following format: - `1 x y` - Add integer `y` to each element of the sublist starting from the start up to the `x`th index (1-indexed). - `2 l r` - Retrieve the maximum integer in the sublist from the `l`th index to the `r`th index (1-indexed). # Output For each operation of type `2 l r`, output the result on a new line. # Example Input ``` 5 1 3 5 1 5 10 2 1 3 2 1 5 2 4 5 ``` Output ``` 15 20 20 ``` # Explanation 1. Initially, the list is empty: [] 2. Operation `1 3 5` updates the list to [5, 5, 5]. 3. Operation `1 5 10` updates the list to [15, 15, 15, 10, 10]. 4. Operation `2 1 3` queries the maximum in the sublist [15, 15, 15] and outputs 15. 5. Operation `2 1 5` queries the maximum in the sublist [15, 15, 15, 10, 10] and outputs 15. 6. Operation `2 4 5` queries the maximum in the sublist [10, 10] and outputs 10. # Notes - Please note that all sublist indices and queries are 1-indexed. - Your solution needs to handle a large number of operations efficiently.","solution":"def handle_operations(n, operations): arr = [] results = [] for operation in operations: op = operation.split() type_op = int(op[0]) if type_op == 1: # Addition operation x = int(op[1]) y = int(op[2]) # Extend the list if necessary while len(arr) < x: arr.append(0) for i in range(x): arr[i] += y elif type_op == 2: # Retrieve maximum operation l = int(op[1]) - 1 r = int(op[2]) if l < len(arr): max_val = max(arr[l:r]) else: max_val = float(\'-inf\') results.append(max_val) return results"},{"question":"# Objective You are given a rectangular grid map represented by a 2D array, with each cell containing a number indicating the altitude at that point. The grid can have `n` rows and `m` columns. The aim is to find the **maximum possible difference in altitude** between any two adjacent cells in the grid. Adjacent cells are defined as cells that share a common edge (left, right, up, or down). # Task Write a function `maxAltitudeDiff(grid)` which takes a 2D list `grid` as an input and returns the maximum difference in altitude between any two adjacent cells. # Example ``` grid = [ [1, 2, 1], [3, 8, 4], [2, 9, 6] ] maxAltitudeDiff(grid) # should return 7, which is the difference between the cells (1, 1) and (2, 1) with values 8 and 1 respectively. ``` # Notes - The grid will have at least `2` rows and at least `2` columns. - The values in the grid will be integers in the range `0` to `1000`. - The maximum difference should be returned as an integer.","solution":"def maxAltitudeDiff(grid): Returns the maximum possible difference in altitude between any two adjacent cells in the grid. def get_neighbors(i, j): neighbors = [] if i > 0: neighbors.append((i-1, j)) # up if i < len(grid) - 1: neighbors.append((i+1, j)) # down if j > 0: neighbors.append((i, j-1)) # left if j < len(grid[0]) - 1: neighbors.append((i, j+1)) # right return neighbors max_diff = 0 for i in range(len(grid)): for j in range(len(grid[0])): current = grid[i][j] for ni, nj in get_neighbors(i, j): neighbor = grid[ni][nj] diff = abs(current - neighbor) if diff > max_diff: max_diff = diff return max_diff"},{"question":"You are given a matrix of m x n elements (m rows, n columns) in which each row is sorted in ascending order from left to right, and each column is sorted in ascending order from top to bottom. Write a function that searches for a given target number in the matrix. The function should return a boolean indicating whether or not the target number exists in the matrix. The matrix has the following properties: - Integers in each row are sorted in ascending order from left to right. - Integers in each column are sorted in ascending order from top to bottom. Example: ``` Input: matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 5 Output: true ``` Example: ``` Input: matrix = [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] target = 20 Output: false ``` Note: - m == matrix.length - n == matrix[0].length - 0 <= m, n <= 300 - -10^9 <= matrix[i][j], target <= 10^9 Hint: Start from the top-right corner of the matrix. Only move left or down based on comparison with the target. --- Implement the function below: ```python def searchMatrix(matrix: List[List[int]], target: int) -> bool: # Function implementation here ```","solution":"from typing import List def searchMatrix(matrix: List[List[int]], target: int) -> bool: Searches for a target value in a matrix where each row and column is sorted. :param matrix: List[List[int]] the matrix with the given properties :param target: int the number to search for :return: bool whether the target exists in the matrix if not matrix or not matrix[0]: return False m, n = len(matrix), len(matrix[0]) row, col = 0, n - 1 # start from the top-right corner while row < m and col >= 0: if matrix[row][col] == target: return True elif matrix[row][col] > target: col -= 1 else: row += 1 return False"},{"question":"You are given a list of employees at a company, each represented as a dictionary containing their name, age, and position. You need to group these employees by their position and then sort each group by age in ascending order. Write a function `group_and_sort_employees(employees)` that takes a list of dictionaries, where each dictionary contains the keys `\'name\'`, `\'age\'`, and `\'position\'`. The function should return a dictionary where the keys are the unique positions and the values are lists of dictionaries, with each list containing the employees in that position, sorted by age. The lists of employees associated with each position should maintain the same dictionary structure as the input. For example, given the following list of employees: ```python employees = [ {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"position\\": \\"Engineer\\"}, {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"position\\": \\"Engineer\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"position\\": \\"Manager\\"}, {\\"name\\": \\"David\\", \\"age\\": 29, \\"position\\": \\"Engineer\\"}, {\\"name\\": \\"Eve\\", \\"age\\": 28, \\"position\\": \\"Manager\\"} ] ``` The function should return: ```python { \\"Engineer\\": [ {\\"name\\": \\"Bob\\", \\"age\\": 25, \\"position\\": \\"Engineer\\"}, {\\"name\\": \\"David\\", \\"age\\": 29, \\"position\\": \\"Engineer\\"}, {\\"name\\": \\"Alice\\", \\"age\\": 30, \\"position\\": \\"Engineer\\"} ], \\"Manager\\": [ {\\"name\\": \\"Eve\\", \\"age\\": 28, \\"position\\": \\"Manager\\"}, {\\"name\\": \\"Charlie\\", \\"age\\": 35, \\"position\\": \\"Manager\\"} ] } ```","solution":"def group_and_sort_employees(employees): Groups employees by their position and then sorts each group by age in ascending order. Parameters: employees (list): A list of dictionaries where each dictionary contains \'name\', \'age\', and \'position\' keys. Returns: dict: A dictionary where the keys are positions and the values are lists of employees sorted by age within each position. from collections import defaultdict # Group employees by position grouped_employees = defaultdict(list) for employee in employees: position = employee[\'position\'] grouped_employees[position].append(employee) # Sort each group by age for position in grouped_employees: grouped_employees[position].sort(key=lambda x: x[\'age\']) return dict(grouped_employees)"},{"question":"Chef is planning a grand dinner and wants to prepare a festive garland with different types of flowers. He has F different types of flowers, and C of each type. However, not more than two flowers of the same type should appear consecutively on the garland for aesthetic reasons. Can you help Chef determine whether it is possible to arrange the flowers according to this rule? -----Input:----- - The first line contains two integers F and C, the number of different types of flowers and the count of each type of flower respectively. -----Output:----- - Output \\"YES\\" if it\'s possible to arrange the flowers such that no more than two flowers of the same type appear consecutively, otherwise output \\"NO\\". -----Constraints----- - 1 leq F leq 100 - 1 leq C leq 1000 -----Sample Input:----- 4 3 -----Sample Output:----- YES -----Explanation----- With four types of flowers each appearing three times, a possible arrangement can be: AABBAACCBBCCAD where A, B, C, and D are flower types. This arrangement ensures no more than two consecutive flowers of the same type appear.","solution":"def can_arrange_flowers(F, C): Determines if it is possible to arrange F different types of flowers given C of each type such that no more than two flowers of the same type appear consecutively. Parameters: F (int): number of different types of flowers C (int): count of each type of flower Returns: str: \\"YES\\" if arrangement is possible, \\"NO\\" otherwise # If there are enough flower types to distribute flowers without consecutive repetition if C <= 2: return \\"YES\\" # if there are more than 2 flowers of any type if C > 2: # we need at least ceil(C / 2) + 1 flower types to distribute them without repeatition min_required_types = (C + 1) // 2 + 1 if F >= min_required_types: return \\"YES\\" return \\"NO\\""},{"question":"Timmy loves playing with strings. Recently, he found an interesting way to transform one string into another using a sequence of operations. He wants to know if it is possible to transform string `A` into string `B` using the allowed operations, and if so, what the minimum number of operations required is. The allowed operations are: 1. **Insert a character**: You can insert any character at any position in the string. 2. **Delete a character**: You can delete any character from the string. 3. **Replace a character**: You can replace any character of the string with any other character. Given two strings, `A` and `B`, determine the minimum number of operations required to transform `A` into `B`. # Input The first line contains a single integer `T` (1 ≤ T ≤ 10), the number of test cases. Each of the next `T` lines contains two strings, `A` and `B`, separated by a space. Both strings consist of lowercase English letters and have a length of at most 1000. # Output For each test case, output a single integer — the minimum number of operations needed to transform string `A` into string `B`. # Examples Input ```plaintext 3 abc abcd abcdef abc abcdef fedcba ``` Output ```plaintext 1 3 6 ``` # Note In the first example, you can insert \'d\' at the end of `abc` to make it `abcd`, which counts as one operation. In the second example, you can delete \'d\', \'e\', and \'f\' from `abcdef` to get `abc`, which counts as three operations. In the third example, since all characters differ, you need six replacement operations to transform `abcdef` into `fedcba`.","solution":"def min_operations_to_transform(A, B): Compute the minimum number of operations required to transform string A into string B. The allowed operations are insert, delete, and replace a character. This is essentially the Edit Distance (Levenshtein distance) problem. len_a, len_b = len(A), len(B) # Create a (len_a+1) x (len_b+1) DP table dp = [[0] * (len_b + 1) for _ in range(len_a + 1)] # Initialize the table for i in range(len_a + 1): dp[i][0] = i # Cost of deleting all characters in A to get an empty string for j in range(len_b + 1): dp[0][j] = j # Cost of inserting all characters of B into an empty string # Fill the DP table for i in range(1, len_a + 1): for j in range(1, len_b + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No operation needed else: dp[i][j] = min( dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1 # Replacement ) return dp[len_a][len_b] def process_test_cases(T, cases): results = [] for A, B in cases: results.append(min_operations_to_transform(A, B)) return results"},{"question":"You are given a list of integers and a target integer. Your task is to create a function that determines whether any two distinct elements in the list sum up to the target integer. The function should return `True` if there are such elements, and `False` otherwise. For example: ``` For the list: [1, 2, 3, 9] and target: 8 Output: False For the list: [1, 2, 4, 4] and target: 8 Output: True ``` The input list may contain both positive and negative integers, and can be of arbitrary length. The list may also be empty, in which case the function should return `False`. Write a function to solve this problem.","solution":"def has_pair_with_sum(lst, target): Returns True if there are two distinct numbers in lst that add up to target. Returns False otherwise. seen = set() for number in lst: if target - number in seen: return True seen.add(number) return False"},{"question":"Implement the class StockPriceTracker that supports the following methods: 1. updateStockPrice(int timestamp, int price) Updates the stock price at the given timestamp. If the same timestamp is provided multiple times, the previous price will be overwritten. 2. getCurrentPrice() Returns the latest stock price recorded based on the highest timestamp. 3. getMaxPrice() Returns the maximum stock price recorded so far. 4. getMinPrice() Returns the minimum stock price recorded so far. Example: Input [\\"StockPriceTracker\\", \\"updateStockPrice\\", \\"updateStockPrice\\", \\"updateStockPrice\\", \\"getCurrentPrice\\", \\"getMaxPrice\\", \\"getMinPrice\\", \\"updateStockPrice\\", \\"getMaxPrice\\"] [[], [1, 100], [2, 200], [1, 150], [], [], [], [3, 50], []] Output [null, null, null, null, 200, 200, 150, null, 200] Explanation StockPriceTracker stockPriceTracker = new StockPriceTracker(); stockPriceTracker.updateStockPrice(1, 100); stockPriceTracker.updateStockPrice(2, 200); stockPriceTracker.updateStockPrice(1, 150); // Overwrites the price at timestamp 1 stockPriceTracker.getCurrentPrice(); // Returns 200, as it\'s the latest stock price recorded at the highest timestamp (2). stockPriceTracker.getMaxPrice(); // Returns 200, the maximum stock price so far. stockPriceTracker.getMinPrice(); // Returns 150, after the price at timestamp 1 was updated. stockPriceTracker.updateStockPrice(3, 50); // New stock price at timestamp 3. stockPriceTracker.getMaxPrice(); // Returns 200, still the highest stock price recorded. Constraints: There will be at most 10000 operations considering all methods. 1 <= timestamp <= 10^9 1 <= price <= 10^6","solution":"class StockPriceTracker: def __init__(self): self.prices = {} self.latest_timestamp = -float(\'inf\') self.max_price = -float(\'inf\') self.min_price = float(\'inf\') def updateStockPrice(self, timestamp, price): self.prices[timestamp] = price if timestamp > self.latest_timestamp: self.latest_timestamp = timestamp self.max_price = max(self.prices.values()) self.min_price = min(self.prices.values()) def getCurrentPrice(self): return self.prices[self.latest_timestamp] def getMaxPrice(self): return self.max_price def getMinPrice(self): return self.min_price"},{"question":"# Task Sarah has recently started learning about prime numbers and wants to create a list of prime numbers up to a given number `n`. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Sara needs help writing a program that will determine all prime numbers less than or equal to `n`. Your task is to write a function that returns a list of all prime numbers less than or equal to the given number `n`. # Example For `n = 10`, the output should be `[2, 3, 5, 7]`. Sarah wants all prime numbers that are less than or equal to 10. Those are `2, 3, 5, and 7`. For `n = 20`, the output should be `[2, 3, 5, 7, 11, 13, 17, 19]`. # Input/Output The range within which to find the prime numbers. - `[input]` integer `n` `1 <= n <= 10^6` - `[output]` list of integers A list of all prime numbers less than or equal to `n`.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n. Implements the Sieve of Eratosthenes algorithm. if n < 2: return [] primes = [True] * (n + 1) primes[0] = primes[1] = False p = 2 while p * p <= n: if primes[p]: for i in range(p * p, n + 1, p): primes[i] = False p += 1 prime_list = [num for num, is_prime in enumerate(primes) if is_prime] return prime_list"},{"question":"You are given a string S of length N. Your task is to determine if the string is balanced. A string is considered balanced if the number of occurrences of each character in the string is the same. -----Input:----- - The first line will contain the integer T, the number of test cases. - Each of the next T lines contains one string S. -----Output:----- For each test case, output \\"YES\\" if the string is balanced, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - String S contains only lowercase English letters. -----Sample Input:----- 3 aabb abcabc aabbccd -----Sample Output:----- YES YES NO -----EXPLANATION:----- - In the first test case, the string \\"aabb\\" contains \'a\' two times and \'b\' two times, so it is balanced. - In the second test case, the string \\"abcabc\\" contains \'a\', \'b\', and \'c\' two times each, so it is balanced. - In the third test case, the string \\"aabbccd\\" contains \'a\', \'b\', and \'c\' two times each, but \'d\' occurs only once, so it is not balanced.","solution":"def is_balanced(S): Returns \\"YES\\" if the string S is balanced, otherwise returns \\"NO\\". from collections import Counter char_counts = Counter(S) all_counts = list(char_counts.values()) if len(set(all_counts)) == 1: return \\"YES\\" else: return \\"NO\\" def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(is_balanced(S)) return results"},{"question":"Alice and Bob are playing a card game where each card has a unique integer value. Alice has a hand of N cards, and Bob has a hand of M cards. Each player wants to know which cards they have that their opponent does not, so they can form a strategy for the game. Your task is to write a program that identifies the unique cards in Alice\'s hand and the unique cards in Bob\'s hand. Input: - The first line contains the value of N (the number of cards in Alice\'s hand). - The second line contains N integers representing the values of the cards in Alice\'s hand. - The third line contains the value of M (the number of cards in Bob\'s hand). - The fourth line contains M integers representing the values of the cards in Bob\'s hand. Output: - Print two lines. The first line should contain the unique cards in Alice\'s hand (cards that are not in Bob\'s hand), sorted in ascending order. The second line should contain the unique cards in Bob\'s hand (cards that are not in Alice\'s hand), sorted in ascending order. Constraints: 1 ≤ Card values ≤ 1,000,000 1 ≤ N, M ≤ 100,000 Example Input: 4 1 2 3 4 5 3 4 5 6 7 Example Output: 1 2 5 6 7","solution":"def unique_cards(alice_cards, bob_cards): Identifies the unique cards in Alice\'s hand and Bob\'s hand. :param alice_cards: List of integers representing Alice\'s cards :param bob_cards: List of integers representing Bob\'s cards :return: Two lists: one for Alice\'s unique cards sorted in ascending order, and another for Bob\'s unique cards sorted in ascending order. alice_set = set(alice_cards) bob_set = set(bob_cards) unique_alice = sorted(alice_set - bob_set) unique_bob = sorted(bob_set - alice_set) return unique_alice, unique_bob # Example usage # alice_cards = [1, 2, 3, 4] # bob_cards = [3, 4, 5, 6, 7] # print(unique_cards(alice_cards, bob_cards)) # Output: ([1, 2], [5, 6, 7])"},{"question":"Write a function named `generateRomanNumerals` that takes an integer as input and returns its equivalent Roman numeral as a string. Roman numerals are represented by the combination of the following symbols: - I for 1 - V for 5 - X for 10 - L for 50 - C for 100 - D for 500 - M for 1000 Basic rules for constructing Roman numerals include: - The numeral for 4 is not \\"IIII\\". Instead, the number 4 is written as \\"IV\\". - The numeral for 9 is not \\"VIIII\\". Instead, the number 9 is written as \\"IX\\". - The numeral for 40 is written as \\"XL\\", and the numeral for 90 is written as \\"XC\\". - The numeral for 400 is written as \\"CD\\", and the numeral for 900 is written as \\"CM\\". Your function should be able to convert integer values from 1 to 3999 (inclusive) to their corresponding Roman numeral representation.","solution":"def generateRomanNumerals(num): Converts an integer to its corresponding Roman numeral representation. :param num: Integer from 1 to 3999. :return: Roman numeral string. value_pairs = [ (1000, \\"M\\"), (900, \\"CM\\"), (500, \\"D\\"), (400, \\"CD\\"), (100, \\"C\\"), (90, \\"XC\\"), (50, \\"L\\"), (40, \\"XL\\"), (10, \\"X\\"), (9, \\"IX\\"), (5, \\"V\\"), (4, \\"IV\\"), (1, \\"I\\") ] result = [] for value, roman in value_pairs: while num >= value: result.append(roman) num -= value return \\"\\".join(result)"},{"question":"A company wants to optimize their server usage based on the different workloads they receive. They have N servers, each with a certain maximum capacity given by c[i] GB. Workloads arrive in batches, with each batch requiring a certain amount of processing capacity. The problem is to determine the minimum number of servers needed from the available N servers to handle these batches sequentially. The workloads are processed in the order they arrive, and each workload is handled by a single server. If a workload cannot be fit into any of the currently occupied servers, it should be assigned to a new server until its capacity is exhausted. Servers cannot be emptied once they start processing a batch but they could process multiple batches as long as they don\'t exceed their maximum capacity. -------Input------- First line of the input contains an integer T denoting the number of test cases. Then for each test case, we have two lines: The first line contains three space separated integers N, M, and W denoting the number of servers, number of workloads, and the maximum number of servers that can be used, respectively. The next line contains M space-separated integers w[1], w[2], ..., w[M] representing the amount of processing capacity required for each workload. -------Output------- For each test case, print a single integer denoting the minimum number of servers needed to handle all workloads. If it’s not possible to handle all the workloads with the given server constraints, print -1. ------Constraints------ - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 100 - 1 ≤ W ≤ N - 1 ≤ w[i] ≤ 10^9 - 1 ≤ c[i] ≤ 10^9 -------Example------- Input: 2 3 5 3 10 20 30 40 50 2 4 2 100 200 300 400 Output: 3 2 -------Explanation------- Example case 1. The minimum number of servers needed can be 3 as no single server can handle more than 50 GB of workload, and with balancing, the capacities can be split optimally. Example case 2. The workloads can be split such that the first server processes 100, 200, and partially 300, with the second server taking the remainder of 300 and 400 requiring two servers in total.","solution":"def min_servers_needed(N, M, W, workloads, capacities): # Sort the server capacities and workloads in descending order capacities.sort(reverse=True) workloads.sort(reverse=True) # Initialize array to keep track of the used capacity in each server used_capacity = [0] * W for workload in workloads: assigned = False for i in range(W): if used_capacity[i] + workload <= capacities[i]: used_capacity[i] += workload assigned = True break if not assigned: return -1 num_servers_used = sum(1 for capacity in used_capacity if capacity > 0) return num_servers_used def process_cases(test_cases): results = [] for case in test_cases: N, M, W = case[\'N\'], case[\'M\'], case[\'W\'] workloads = case[\'workloads\'] capacities = case[\'capacities\'] results.append(min_servers_needed(N, M, W, workloads, capacities)) return results"},{"question":"Given an unsorted integer array, write a function that finds the length of the longest consecutive elements sequence. Your algorithm should run in `O(n)` complexity. # Example **Input:** ``` [100, 4, 200, 1, 3, 2] ``` **Output:** ``` 4 ``` **Explanation:** The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4. # Constraints: * The input array will contain integers only. * The input array can contain duplicates, and the elements can be both positive and negative.","solution":"def longest_consecutive(nums): Finds the length of the longest consecutive elements sequence. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only check if it\'s the start of a sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given a list of strings, each string represents a series of words separated by spaces. Write a method that takes the list as an argument and returns the word that appears the most frequently across all strings. If there are multiple words with the same highest frequency, return the word that appears first in the list based on their first occurrence. Examples ```python [\\"hello world\\", \\"world is great\\", \\"hello everyone\\"] Should return: \\"hello\\" (appears 2 times) [\\"one two three\\", \\"two three four\\", \\"five six seven\\"] Should return: \\"two\\" (appears 2 times and \\"two\\" appears before \\"three\\") ``` Constraints You can assume that the input list contains at least one string and each string contains at least one word. Each word contains only alphabetic characters and is separated by a single space. The words are case-sensitive, so \'Hello\' and \'hello\' are considered different words.","solution":"from collections import defaultdict def most_frequent_word(strings): Returns the most frequently occurring word across all input strings. If there are multiple words with the same highest frequency, return the word that appears first in the list based on their first occurrence. word_count = defaultdict(int) first_occurrence = {} max_count = 0 most_frequent = None for string in strings: words = string.split() for word in words: word_count[word] += 1 if word not in first_occurrence: first_occurrence[word] = len(first_occurrence) if (word_count[word] > max_count) or ( word_count[word] == max_count and first_occurrence[word] < first_occurrence[most_frequent] ): max_count = word_count[word] most_frequent = word return most_frequent"},{"question":"Task ====== Create a program that reads a list of words and determines the longest word(s) that can be formed using a subset of the given letters from each word. The program should be case-insensitive but should return the result in the original case as found in the input list. Syntax/Info ====== 1. The program should accept a list of non-empty words. 2. For each word, determine the longest word that can be formed using some or all of its letters (subsets of the original word). 3. If there are multiple words with the same length, return all of them in the list as they appear in the original order. Examples ====== **Input 1**: words = [\\"Apple\\", \\"banana\\", \\"Cherry\\"] **Output 1**: [\\"Plea\\", \\"Banana\\", \\"Cherry\\"] Explanation: - \\"Apple\\" -> \\"Plea\\" (can be formed using subset letters \'a\', \'p\', \'p\', \'l\', \'e\') - \\"banana\\" -> \\"Banana\\" (the original word is the longest subset) - \\"Cherry\\" -> \\"Cherry\\" (the original word is the longest subset) **Input 2**: words = [\\"abcd\\", \\"abcdefgh\\", \\"abacaba\\"] **Output 2**: [\\"abcd\\", \\"abcdefgh\\", \\"abacaba\\"] Explanation: - \\"abcd\\" -> \\"abcd\\" (the original word) - \\"abcdefgh\\" -> \\"abcdefgh\\" (the original word is the longest subset) - \\"abacaba\\" -> \\"abacaba\\" (the original word) Notes ====== * The function should handle an edge case where the list may contain only one word. * The output should preserve the case of the input words. * The solution must be efficient to handle large input sizes (list containing thousands of words, each word being several tens of letters long).","solution":"def longest_word_subsets(words): Returns the longest word or words that can be formed using a subset of letters from each word. def longest_subword(word): # Initial assumption: word itself is the longest subset return word longest_words = [longest_subword(word) for word in words] return longest_words"},{"question":"Create a function that takes in a list of integers and returns a new list where each element is the product of all the elements in the original list except the element at the same index. Example 1: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Example 2: Input: [0, 1, 2, 3] Output: [6, 0, 0, 0] Note: You should not use division and your solution should be O(n).","solution":"def product_except_self(nums): Returns a list where each element is the product of all the elements in the original list except the element at the same index. length = len(nums) left, right, result = [1] * length, [1] * length, [1] * length # Calculate left products for i in range(1, length): left[i] = left[i - 1] * nums[i - 1] # Calculate right products for i in range(length - 2, -1, -1): right[i] = right[i + 1] * nums[i + 1] # Calculate result for i in range(length): result[i] = left[i] * right[i] return result"},{"question":"Sarah is an avid reader, and she loves palindromes. She recently came across a sequence problem that intrigued her. Given a string S, she was asked to determine the minimum number of characters needed to be added to make the string a palindrome. Can you help Sarah solve this problem? -----Input----- - The first and only line of the input contains a single string S consisting of lowercase English letters. -----Output----- - Output a single integer representing the minimum number of characters that need to be added to the string to make it a palindrome. -----Constraints----- - 1 ≤ |S| ≤ 105 -----Example----- Input: abcd Output: 3 -----Explanation----- To make \\"abcd\\" a palindrome, you can add \\"dcb\\" at the end to make it \\"abcdcba\\". Thus, 3 characters need to be added. Input: race Output: 3 -----Explanation----- To make \\"race\\" a palindrome, you can add \\"car\\" at the end to make it \\"racecar\\". Thus, 3 characters need to be added.","solution":"def min_additions_to_palindrome(s): Returns the minimum number of characters needed to be added to the string to make it a palindrome. def is_palindrome(s): return s == s[::-1] for i in range(len(s)): if is_palindrome(s[i:]): return i return len(s) # should never reach here"},{"question":"Factorial Trailing Zeros Your task is to write a function that takes a non-negative integer `n` and returns the number of trailing zeroes in the factorial of `n`. For example: - `factorial_zeros(5)` should return `1` because `5! = 120` has one trailing zero. - `factorial_zeros(10)` should return `2` because `10! = 3628800` has two trailing zeros. - `factorial_zeros(20)` should return `4` because `20! = 2432902008176640000` has four trailing zeros. Consider the pattern and arithmetic behind the creation of trailing zeros to efficiently solve the task. # Constraints: - You may assume that the integer `n` is always between `0` and `10^4`. # Complexity: - The solution should be efficient and run in linear or logarithmic time relative to `n`. # Examples: ```python def factorial_zeros(n: int) -> int: # Your code here pass assert factorial_zeros(5) == 1 assert factorial_zeros(10) == 2 assert factorial_zeros(30) == 7 assert factorial_zeros(50) == 12 ```","solution":"def factorial_zeros(n: int) -> int: Returns the number of trailing zeros in the factorial of n. count = 0 while n >= 5: n //= 5 count += n return count"},{"question":"Monica loves strings and she has recently learned about palindromes. A palindrome is a string that reads the same forward and backward. Monica has a string S and she wants to check if the string is a palindrome. However, Monica is lazy, and she doesn\'t want to remove spaces from the string manually to check if it is a palindrome. Since Monica is good at programming, she wants to write a function that can determine whether the provided string is a palindrome by ignoring spaces. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a string S. The string S can contain both uppercase and lowercase alphabets and spaces. -----Output----- For each test case, print a single line containing \\"YES\\" if the string S is a palindrome after ignoring spaces, and \\"NO\\" otherwise. -----Constraints----- - 1 le T le 1000 - 1 le |S| le 1000 -----Example Input----- 3 A man a plan a canal Panama race a car No lemon no melon -----Example Output----- YES NO YES -----Explanation----- Example case 1: Ignoring spaces, the string \\"A man a plan a canal Panama\\" becomes \\"AmanaplanacanalPanama\\", which reads the same forward and backward. Example case 2: Ignoring spaces, the string \\"race a car\\" becomes \\"raceacar\\", which does not read the same forward and backward. Example case 3: Ignoring spaces, the string \\"No lemon no melon\\" becomes \\"Nolemonnomelon\\", which reads the same forward and backward.","solution":"def is_palindrome(s): Check if the given string s is a palindrome by ignoring spaces. filtered_s = \'\'.join(c for c in s if c != \' \') return filtered_s.lower() == filtered_s[::-1].lower() def check_palindromes(test_cases): results = [] for s in test_cases: if is_palindrome(s): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # T = 3 # test_cases = [ # \\"A man a plan a canal Panama\\", # \\"race a car\\", # \\"No lemon no melon\\" # ] # print(check_palindromes(test_cases))"},{"question":"In this challenge, you must implement a function that determines the longest consecutive substring of a given string that contains no repeating characters. ```Python def longest_unique_substring(s: str) -> str: # Your algorithm to find the longest substring with unique characters # Examples: # longest_unique_substring(\\"abcabcbb\\") => \\"abc\\" # longest_unique_substring(\\"bbbbb\\") => \\"b\\" # longest_unique_substring(\\"pwwkew\\") => \\"wke\\" # longest_unique_substring(\\"aab\\") => \\"ab\\" ``` Considerations: - The input string will contain only ASCII characters. - The length of the input string can be up to 10,000 characters. Ensure your solution is optimized for performance. Good luck! If you enjoy string manipulation challenges, you might also like this Kata: [Longest Palindromic Substring](https://www.codewars.com/kata/5a5b1e2ecf2901001c897f74)","solution":"def longest_unique_substring(s: str) -> str: if not s: return \\"\\" start = 0 max_len = 0 max_start = 0 used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: current_len = i - start + 1 if current_len > max_len: max_len = current_len max_start = start used_chars[char] = i return s[max_start:max_start + max_len]"},{"question":"John has a garden consisting of several flower beds arranged on a one-dimensional line. Each flower bed is represented as a segment ([l, r]), where (l) is the left end and (r) is the right end of the segment. John wants to water the garden, and he does so by choosing some intervals to water. To minimize the amount of time spent watering, John wants to know the minimum number of watering intervals needed to completely cover all the flower beds. -----Input----- - The first line of the input contains a single integer (T) denoting the number of test cases. The description of (T) test cases follows. - The first line of each test case contains a single integer (N) denoting the number of flower beds. - The next (N) lines contain two space-separated integers (l_i) and (r_i) representing the endpoints of the (i)-th flower bed. -----Output----- For each test case, print a single line containing the minimum number of watering intervals required to cover all the flower beds. -----Constraints----- - (1 le T le 10) - (1 le N le 10^5) - (1 le l_i le r_i le 10^9) -----Subtasks----- Subtask #1 (30 points): (1 le N le 1,000) Subtask #2 (70 points): original constraints -----Example Input----- 3 3 1 3 2 5 6 8 2 1 4 4 7 4 1 2 2 3 3 4 4 5 -----Example Output----- 2 1 1 -----Explanation----- Example case 1: - John can water the first and second flower beds with one interval: ([1, 5]). - He can water the third flower bed with a separate interval: ([6, 8]). - Therefore, the minimum number of watering intervals required is (2). Example case 2: - John can water all flower beds with one interval: ([1, 7]). - Therefore, the minimum number of watering intervals required is (1). Example case 3: - John can water all flower beds with one interval: ([1, 5]). - Therefore, the minimum number of watering intervals required is (1).","solution":"def min_watering_intervals(test_cases): Returns the minimum number of watering intervals required to cover all flower beds for each test case. results = [] for case in test_cases: intervals = case if not intervals: results.append(0) continue # Sort intervals by their start points, and if equal, by their end points intervals.sort(key=lambda x: (x[0], x[1])) # Initialize with the first interval current_interval = intervals[0] count = 1 for start, end in intervals[1:]: if start > current_interval[1]: # New interval needed count += 1 current_interval = (start, end) else: # Merge interval current_interval = (current_interval[0], max(current_interval[1], end)) results.append(count) return results def process_input(input_data): Helper function to process the input data. Returns a list of test cases. lines = input_data.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 intervals = [] for _ in range(N): l, r = map(int, lines[index].split()) intervals.append((l, r)) index += 1 test_cases.append(intervals) return test_cases def process_output(results): Helper function to format the output results from the function `min_watering_intervals`. return \\"n\\".join(map(str, results)) # Main function to tie everything together def main(input_data): test_cases = process_input(input_data) results = min_watering_intervals(test_cases) return process_output(results)"},{"question":"You are given a list of integers. Your task is to write a function `compress_list(lst)` that compresses the list by grouping consecutive runs of the same number. The function should return a list of tuples, where each tuple contains the number and the count of its consecutive occurrences. For example: ```python compress_list([1, 1, 2, 2, 2, 3]) === [(1, 2), (2, 3), (3, 1)] compress_list([5, 5, 5, 5, 5, 5]) === [(5, 6)] compress_list([1, 2, 3, 4, 5]) === [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)] compress_list([]) === [] compress_list([1, 1, 1, 2, 2, 1, 1, 3, 3, 3]) === [(1, 3), (2, 2), (1, 2), (3, 3)] ``` Features of the function: - The function will handle lists of integers, which may contain duplicates. - The list can be of any reasonable length up to 10^6 elements in random tests. - Your function should be efficient to handle large lists. Your implementation should focus on readability and efficiency. Good luck!","solution":"def compress_list(lst): Compress the list by grouping consecutive runs of the same number. Parameters: lst (list): A list of integers Returns: list: A list of tuples where each tuple contains the number and its consecutive count if not lst: return [] compressed = [] prev = lst[0] count = 1 for num in lst[1:]: if num == prev: count += 1 else: compressed.append((prev, count)) prev = num count = 1 compressed.append((prev, count)) return compressed"},{"question":"Implement a function that takes a string containing a valid Roman numeral and converts it to an integer. Roman numerals are typically written from largest to smallest, from left to right. However, some numerals are meant to be subtracted instead of added, such as IV (4) and IX (9). Your function should correctly handle these exceptions and return the integer value of the provided Roman numeral. Here are the values of the Roman numerals: - I = 1 - V = 5 - X = 10 - L = 50 - C = 100 - D = 500 - M = 1000 Return the integer value for the input string. Example inputs and expected outputs: - Input: \\"III\\", Output: 3 - Input: \\"IV\\", Output: 4 - Input: \\"IX\\", Output: 9 - Input: \\"LVIII\\", Output: 58 - Input: \\"MCMXCIV\\", Output: 1994","solution":"def roman_to_int(s): Convert a Roman numeral to an integer. roman_numerals = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_numerals[char] if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"Implement a function to determine if a string has all unique characters. Use only basic data structures for this task. Example: - Given the input \\"abcdef\\", the function should return True. - Given the input \\"hello\\", the function should return False because the character \'l\' is repeated. Note: Your solution should have a time complexity of O(n), where n is the length of the string.","solution":"def has_unique_characters(s): Determines if the string `s` has all unique characters. seen_characters = set() for char in s: if char in seen_characters: return False seen_characters.add(char) return True"},{"question":"You are given an undirected graph with n vertices and m edges. Your task is to find the number of connected components in the graph. A connected component in a graph is a set of vertices such that there is a path between any two vertices in this set, and no vertex in this set is connected to any vertex outside of this set. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 100,000) — the number of vertices and the number of edges. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), denoting that there is an edge between vertex u and vertex v. The graph can have multiple edges between the same pair of vertices and self-loops. -----Output----- Output a single integer — the number of connected components in the graph. -----Examples----- Input 6 3 1 2 2 3 4 5 Output 3 Input 4 0 Output 4 Input 5 4 1 2 2 3 3 4 4 5 Output 1 -----Note----- In the first example, there are three connected components: {1, 2, 3}, {4, 5}, and {6}. In the second example, each vertex is its own connected component because there are no edges. In the third example, there is one connected component consisting of all the vertices {1, 2, 3, 4, 5}.","solution":"def count_connected_components(n, edges): Returns the number of connected components in the graph. Parameters: n (int): Number of vertices edges (List[Tuple[int, int]]): List of edges Returns: int: Number of connected components from collections import defaultdict, deque def bfs(start, visited, adj_list): queue = deque([start]) while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) # 1-indexed vertices count = 0 for vertex in range(1, n + 1): if not visited[vertex]: count += 1 visited[vertex] = True bfs(vertex, visited, adj_list) return count"},{"question":"A group of friends is organizing a coding tournament where participants compete in several matches. Each participant must play against every other participant exactly once. The skill level of each participant is determined by a unique numeric value. The winner of each match is the participant with the higher skill value. At the end of the tournament, you need to compute the number of wins for each participant. Given an array of integers representing the skill levels of the participants, output the number of wins for each participant in the order of their input. -----Input----- - The first line contains a single integer n (2 leq n leq 1000), the number of participants. - The next line contains n space-separated positive integers representing the skill levels of the participants, each between 1 and 10^6. -----Output----- - Output n integers in a single line, representing the number of wins for each participant in the order they were input. -----Sample Input----- 4 5 3 9 1 -----Sample Output----- 2 1 3 0 -----Explanation:----- - The first participant with skill level 5 wins against participants with skill levels 3 and 1 but loses against the participant with skill level 9, so they have 2 wins. - The second participant with skill level 3 wins against only the participant with skill level 1, so they have 1 win. - The third participant with skill level 9 wins against all other participants, so they have 3 wins. - The fourth participant with skill level 1 wins against no one, so they have 0 wins.","solution":"def count_wins(skills): This function receives a list of skill levels of participants and returns a list of integers representing the number of wins for each participant in the order they were input. :param skills: List[int], a list of skill levels for participants :return: List[int], a list of win counts for each participant n = len(skills) wins = [0] * n for i in range(n): for j in range(n): if i != j and skills[i] > skills[j]: wins[i] += 1 return wins"},{"question":"You have an array consisting of `n` integers. Your task is to distribute these integers into two groups such that the absolute difference between the sums of the two groups is minimized. -----Input----- The first line contains one integer `n` (1 leq n leq 100): the number of integers. The second line contains `n` integers a_1, a_2, ldots, a_n (1 leq a_i leq 100). -----Output----- Print a single integer: the minimum possible absolute difference. -----Example----- Input 4 1 6 11 5 Output 1 Input 3 1 4 9 Output 4 -----Note----- In the first example, you can split the integers into groups {1, 6, 5} and {11}. The absolute difference between the sums is |(1 + 6 + 5) - 11| = 1. In the second example, you can split the integers into groups {1, 9} and {4}. The absolute difference between the sums is |(1 + 9) - 4| = 6. Another possible split is {4, 9} and {1}, giving an absolute difference of |(4 + 9) - 1| = 12.","solution":"def min_absolute_difference(n, a): This function finds the minimum possible absolute difference of the sums of two groups that can be formed from the array `a` with `n` integers. total_sum = sum(a) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in a: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(target, -1, -1): if dp[i]: group1_sum = i break return abs(total_sum - 2 * group1_sum)"},{"question":"Given an undirected graph with N nodes and M edges, write a program to identify all connected components in the graph and calculate the size of each component. A connected component is a maximal set of nodes such that there is a path between any pair of nodes in the set. -----Input:----- - The first line contains two integers N and M, the number of nodes and edges, respectively. - The next M lines each contain two integers u and v, indicating there is an edge between nodes u and v. -----Output:----- Print the sizes of all connected components in the graph in non-decreasing order. -----Constraints----- - 1 leq N leq 10^5 - 0 leq M leq 10^5 - 1 leq u, v leq N - The graph may be disconnected. - Each pair (u, v) represents a unique edge. -----Sample Input:----- 6 4 1 2 2 3 4 5 5 6 -----Sample Output:----- 3 3 -----Explanation:----- The graph has two connected components: {1, 2, 3} and {4, 5, 6}. The size of each connected component is 3. -----Additional Sample Input:----- 5 3 1 2 3 4 4 5 -----Additional Sample Output:----- 1 3 -----Explanation:----- The graph has two connected components: {1, 2} and {3, 4, 5}. The size of each connected component is 2 and 3, respectively. However, node 1 is disconnected on its own which gives it a size of 1. The final output formats these sizes in non-decreasing order.","solution":"def get_connected_components_sizes(N, M, edges): from collections import defaultdict, deque def bfs(node): queue = deque([node]) visited[node] = True size = 0 while queue: current = queue.popleft() size += 1 for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return size # Creating graph as an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) # 1-based indexing component_sizes = [] for node in range(1, N + 1): if not visited[node]: size = bfs(node) component_sizes.append(size) component_sizes.sort() return component_sizes def parse_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] return N, M, edges def format_output(component_sizes): return \\" \\".join(map(str, component_sizes))"},{"question":"# Task Write a function `compare_dicts(dict1, dict2)` that takes in two dictionaries and returns a new dictionary that contains the combined keys from both dictionaries. If a key exists in both dictionaries, the function will give precedence to the values in `dict2`. Each value in the output dictionary should be a list of the original values of that key in both dictionaries in the format `[value_from_dict1, value_from_dict2]`. If a key did not exist in one of the dictionaries, the missing value should be represented by `None`. The function should return a dictionary sorted by the combined keys in ascending order. Input Parameters: - `dict1` (dict): The first dictionary. - `dict2` (dict): The second dictionary. Output: - A dictionary with combined keys and their corresponding values as lists, sorted by keys in ascending order. Example ```python dict1 = {\\"a\\": 1, \\"b\\": 2, \\"d\\": 4} dict2 = {\\"b\\": 3, \\"c\\": 5, \\"d\\": 6} compare_dicts(dict1, dict2) # returns # { # \\"a\\": [1, None], # \\"b\\": [2, 3], # \\"c\\": [None, 5], # \\"d\\": [4, 6] # } ``` ```python dict1 = {\\"x\\": 10, \\"y\\": 9} dict2 = {\\"y\\": 20, \\"z\\": 30} compare_dicts(dict1, dict2) # returns # { # \\"x\\": [10, None], # \\"y\\": [9, 20], # \\"z\\": [None, 30] # } ``` # Constraints: - The dictionaries will not be empty. - The keys will always be strings. - The values will be integers.","solution":"def compare_dicts(dict1, dict2): Combine two dictionaries, preserving the order of keys, and return a dictionary with values from both dictionaries in lists. combined_keys = sorted(set(dict1.keys()).union(dict2.keys())) result = {} for key in combined_keys: value1 = dict1.get(key) value2 = dict2.get(key) result[key] = [value1, value2] return result"},{"question":"Given a string consisting of lowercase English letters, a group of characters is defined as a contiguous block of characters that are the same. For example, in the string \\"aabbcc\\", the groups are \\"aa\\", \\"bb\\", \\"cc\\". Write a function to find the length of the longest group of the same character in the given string. Example 1: Input: s = \\"abbcccddddeee\\" Output: 4 Explanation: The longest group of characters is \\"dddd\\" with a length of 4. Example 2: Input: s = \\"a\\" Output: 1 Explanation: The input string consists of only one group \\"a\\" with a length of 1. Example 3: Input: s = \\"abcde\\" Output: 1 Explanation: All characters are distinct, so the longest group\'s length is 1. Constraints: 1 <= s.length <= 10^5","solution":"def longest_group_length(s): Given a string, finds the length of the longest group of the same characters. Args: s: str - Input string consisting of lowercase English letters. Returns: int - Length of the longest group of the same character. if not s: return 0 max_length = 1 current_length = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"Create a function `parse_url_params` that takes a URL string with query parameters and returns a dictionary of those parameters. The keys should be parameter names and the values should be lists of values associated with that parameter. For example: `url = \\"https://example.com/page?name=John&age=25&name=Doe&city=NewYork&city=LosAngeles\\"` >>> `parse_url_params(url)` should return `{\'name\': [\'John\', \'Doe\'], \'age\': [\'25\'], \'city\': [\'NewYork\', \'LosAngeles\']}` For more information on URL parsing, see: https://docs.python.org/3/library/urllib.parse.html Hint: Look into the `urllib.parse` module for help with parsing the URL.","solution":"from urllib.parse import urlparse, parse_qs def parse_url_params(url): Parses the query parameters from a URL and returns them as a dictionary. Each key in the dictionary corresponds to a parameter name, and the value is a list of values associated with that parameter. Args: url (str): The URL containing the query parameters. Returns: dict: A dictionary with parameter names as keys and lists of parameter values as values. parsed_url = urlparse(url) return parse_qs(parsed_url.query)"},{"question":"Polycarp is planning a tournament involving n different players, each with a certain skill level. The skill level of each player is represented by an integer. To make the tournament as interesting as possible, Polycarp wants to pair the players in such a way that the difference in skill levels for each pair is minimized. Polycarp needs your help to determine the total minimum skill difference possible when the players are paired optimally. Each player can only be paired with one other player, and if there is an odd number of players, the one remaining player is left unpaired and their skill difference is not considered in the sum. -----Input----- The first line of input contains an integer t (1 le t le 10) - the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 le n le 100) - the number of players. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4) - the skill levels of the players. -----Output----- For each test case, print a single integer - the total minimum skill difference for the optimal pairing. -----Example----- Input 3 4 1 5 3 19 5 10 10 10 10 10 3 8 5 6 Output 16 0 1 -----Explanation----- In the first test case, the optimal pairs are (1, 3) and (5, 19), resulting in a total minimum skill difference of |1-3| + |5-19| = 2 + 14 = 16. In the second test case, all players have the same skill level, resulting in a total minimum skill difference of 0. In the third test case, the optimal pair is (5, 6), resulting in a total minimum skill difference of |5-6| = 1. The player with skill level 8 remains unpaired, as there is an odd number of players.","solution":"def total_minimum_skill_difference(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] skill_levels = sorted(test_cases[i][1]) total_difference = 0 for j in range(0, n - 1, 2): total_difference += abs(skill_levels[j] - skill_levels[j + 1]) results.append(total_difference) return results # Example usage: # t = 3 # test_cases = [ # (4, [1, 5, 3, 19]), # (5, [10, 10, 10, 10, 10]), # (3, [8, 5, 6]) # ] # print(total_minimum_skill_difference(t, test_cases)) # Output: [16, 0, 1]"},{"question":"You are given a grid representing a 2D map of water (\'0\') and land (\'1\'). An island is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write a function to count the number of islands. An island is defined as a maximal group of connected land cells. Example: Input: 11110 11010 11000 00000 Output: 1 Input: 11000 11000 00100 00011 Output: 3","solution":"def num_islands(grid): Returns the number of islands in the given grid. if not grid or not grid[0]: return 0 def dfs(x, y): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark visited # Explore the neighbors dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) num_islands_count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': num_islands_count += 1 dfs(i, j) return num_islands_count"},{"question":"Write a function to determine if a given string is a valid scheduling order of tasks, given in the form: \\"a->b->c\\". The string represents a sequence of tasks where each task should be completed before the subsequent one. You will be given a series of constraints represented as pairs `(a, b)`, which means task `a` must be done before task `b`. Your function should return `True` if the given order satisfies all the constraints, and `False` otherwise. # Function Signature ```python def validate_task_order(order: str, constraints: List[Tuple[str, str]]) -> bool: ``` # Input - `order`: a string of characters representing tasks separated by arrows `->`, for instance, `\\"a->b->c\\"`. - `constraints`: a list of tuples `(a, b)` indicating that task `a` needs to be completed before task `b`. # Output - Return `True` if the order satisfies all constraints, `False` otherwise. # Examples ```python assert validate_task_order(\\"a->b->c\\", [(\\"a\\", \\"b\\"), (\\"b\\", \\"c\\")]) == True assert validate_task_order(\\"c->b->a\\", [(\\"a\\", \\"b\\"), (\\"b\\", \\"c\\")]) == False assert validate_task_order(\\"a->c->b\\", [(\\"a\\", \\"c\\"), (\\"c\\", \\"b\\")]) == True ``` # Explanation - In the first example, the order `\\"a->b->c\\"` satisfies the constraints that `a` should come before `b` and `b` should come before `c`. - In the second example, the order `\\"c->b->a\\"` does not satisfy the constraints since `a` should come before `b` and `b` should come before `c`, but it is in reverse order. - In the third example, the order `\\"a->c->b\\"` satisfies the given constraints that `a` should come before `c` and `c` should come before `b`.","solution":"from typing import List, Tuple def validate_task_order(order: str, constraints: List[Tuple[str, str]]) -> bool: Validates if the given task order satisfies all the given constraints. tasks = order.split(\\"->\\") position = {task: index for index, task in enumerate(tasks)} for a, b in constraints: if position[a] >= position[b]: return False return True"},{"question":"=====Function Descriptions===== In Python, the reduce() function is used to apply a particular function passed in its argument to all of the list elements mentioned in the sequence passed along. This function is defined in the “functools” module. functools.reduce(function, iterable[, initializer]) - function: Function to be applied on each element of the sequence. - iterable: The iterable on which the function is applied. - initializer: If initializer is present, it is placed before the items of the sequence in the calculation, and serves as a default when the sequence is empty. >>> from functools import reduce >>> def add(a, b): ... return a + b ... >>> numbers = [1, 2, 3, 4, 5] >>> reduce(add, numbers) 15 =====Problem Statement===== You are given a list of integers. Your task is to implement a function that calculates the product of all the elements in the list using the reduce() function. =====Input Format===== A single line containing space-separated integers. =====Constraints===== - 1 <= len(list) <= 100 - -10 <= integer <= 10 =====Output Format===== Output a single integer which is the product of all elements in the list. =====Sample Input===== 2 3 4 =====Sample Output===== 24 =====Explanation===== Using the reduce() function with a lambda function that multiplies two numbers, the product of the list [2, 3, 4] is calculated as 2 * 3 * 4 = 24.","solution":"from functools import reduce def multiply_elements(int_list): Calculates the product of all elements in the list using the reduce() function. return reduce(lambda x, y: x * y, int_list)"},{"question":"You are given an integer array `a` of length `n`. Your task is to determine the maximum sum of any contiguous subarray of `a` that contains exactly `k` elements. Consider each possible subarray of size `k` and find their sums, then return the maximum sum encountered. For example, given the array `a = [2, 1, 5, 1, 3, 2]` and `k = 3`, the contiguous subarrays containing exactly 3 elements are `[2, 1, 5]`, `[1, 5, 1]`, `[5, 1, 3]`, and `[1, 3, 2]`. The sums of these subarrays are 8, 7, 9, and 6 respectively, so the maximum sum is 9. Write a function `max_sum_of_subarray_k_elements(n, k, a)` that returns the maximum sum of any contiguous subarray of length `k`. -----Input----- The function `max_sum_of_subarray_k_elements` takes three parameters: 1. An integer `n` (1 ≤ `n` ≤ 10^5), the length of the array `a`. 2. An integer `k` (1 ≤ `k` ≤ `n`), the length of the subarrays to consider. 3. An array `a` of `n` integers (1 ≤ `a[i]` ≤ 10^4), the elements of the array. -----Output----- The function should return a single integer: the maximum sum of any contiguous subarray of length `k`. -----Example----- Input 6 3 [2, 1, 5, 1, 3, 2] Output 9 -----Note----- In the example, the input array `a` is `[2, 1, 5, 1, 3, 2]` and the length of subarray to consider is `k = 3`. As described above, we find that the maximum sum of any contiguous subarray of length `k` is 9.","solution":"def max_sum_of_subarray_k_elements(n, k, a): Returns the maximum sum of any contiguous subarray of length k. # Initialize the sum of the first subarray of length k max_sum = current_sum = sum(a[:k]) # Slide the window of length k across the array for i in range(k, n): # Add the next element and remove the first element of the previous window current_sum = current_sum + a[i] - a[i - k] # Update max_sum if current_sum is larger if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given an array of integers, return the length of the longest subarray where the absolute difference between any two elements is less than or equal to a specified threshold `k`. If there are multiple subarrays with the same maximum length, return the length of the first occurring subarray. If no subarray satisfies the condition, return 0. ``` array = [1, 3, 4, 9, 10] k = 3 The subarrays with differences <= 3 are: [1, 3, 4] -> length 3 [9, 10] -> length 2 So, the function should return 3. ``` # Function Signature ```python def longest_subarray(arr: List[int], k: int) -> int: pass ``` # Input - `arr` (List[int]): A list of integers representing the array. - `k` (int): An integer representing the threshold for the absolute difference. # Output - (int): The length of the longest subarray where the absolute difference between any two elements is less than or equal to `k`. # Constraints - The input list can be empty. - Each element in the list is an integer. - The threshold `k` is an integer (0 ≤ k ≤ 10^9). # Examples ```python longest_subarray([1, 3, 4, 9, 10], 3) -> 3 longest_subarray([1, 2, 3, 4, 5], 1) -> 2 longest_subarray([10, 1, 2, 3, 4], 2) -> 3 ```","solution":"from typing import List def longest_subarray(arr: List[int], k: int) -> int: if not arr: return 0 max_length = 0 start = 0 for end in range(len(arr)): while max(arr[start:end+1]) - min(arr[start:end+1]) > k: start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Anagrams are a pair of words formed by rearranging the letters of one word to produce the other, using all the original letters exactly once. Given a string, your task is to check if it can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character occurs odd number of times. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first and only line of each test case contains a single string S. -----Output----- For each test case, print a single line containing \\"YES\\" if the string S can be rearranged to form a palindrome, and \\"NO\\" otherwise. -----Constraints----- - 1 le T le 1,000 - 1 le |S| le 100,000 - S consists of lowercase English letters only. -----Example Input----- 3 civic ivicc civil -----Example Output----- YES YES NO -----Explanation----- Example case 1: The string \\"civic\\" is already a palindrome. Example case 2: The string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. Example case 3: The string \\"civil\\" cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count. if odd_count <= 1: return \\"YES\\" else: return \\"NO\\" def process_inputs(T, test_cases): results = [] for case in test_cases: results.append(can_form_palindrome(case)) return results"},{"question":"# Context In certain board games, players move around a grid-based game board by rolling dice and moving cautiously to avoid obstacles. One popular game is the \\"Trap Escape\\" game, where players must avoid traps on a grid while trying to reach the exit. # Your task You are given a grid represented as a 2D list. Each cell in the grid can be: - \'S\' : the starting point of the player - \'E\' : the exit point the player must reach - \'T\' : a trap the player must avoid - \'.\' : an open cell the player can move into - \'#\' : a wall that the player cannot pass The player can move up, down, left, or right by one cell at a time. Write a function that determines whether there\'s a path from the starting point (S) to the exit point (E) without stepping on a trap (T). Return `True` if such a path exists, and `False` otherwise. Your function should be called `can_escape(grid)` where `grid` is a list of lists representing the game board. Tips - Consider implementing a graph traversal algorithm (BFS or DFS) to explore the possible paths. - Use a queue for BFS or a stack for DFS to keep track of the cells to explore. - Keep track of the visited cells to avoid processing the same cell multiple times. # Example ```python grid = [ [\'S\', \'.\', \'.\', \'#\', \'E\'], [\'#\', \'#\', \'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'.\', \'.\'], [\'.\', \'T\', \'.\', \'#\', \'.\'], [\'#\', \'#\', \'#\', \'#\', \'.\'] ] print(can_escape(grid)) # Output: True ``` In the example above, the player can move to the right, then down, then right, then up to reach the exit without stepping on a trap.","solution":"def can_escape(grid): from collections import deque rows = len(grid) cols = len(grid[0]) # Find the starting point (S) start = (-1, -1) for r in range(rows): for c in range(cols): if grid[r][c] == \'S\': start = (r, c) break if start != (-1, -1): break # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS to find the path queue = deque([start]) visited = set() visited.add(start) while queue: r, c = queue.popleft() if grid[r][c] == \'E\': return True for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited: if grid[nr][nc] == \'.\' or grid[nr][nc] == \'E\': queue.append((nr, nc)) visited.add((nr, nc)) return False"},{"question":"Write a function that takes an integer as input and returns the integer with its digits reversed. If the number is negative, ensure that the negative sign remains at the front of the reversed number. For example: ```python reverse_number(123) == 321 reverse_number(-456) == -654 reverse_number(1000) == 1 reverse_number(0) == 0 reverse_number(789) == 987 reverse_number(-200) == -2 ```","solution":"def reverse_number(n): Reverses the digits of an integer. If the number is negative, the negative sign remains at the front. Parameters: n (int): The integer to be reversed. Returns: int: The integer with its digits reversed. sign = -1 if n < 0 else 1 reversed_n = int(str(abs(n))[::-1]) return sign * reversed_n"},{"question":"Given a string (s) consisting of lowercase letters, you need to check if it is possible to rearrange the characters of the string so that no two adjacent characters are the same. If such a rearrangement is possible, return a valid rearrangement. If not, return an empty string. Example: s = \\"aab\\" Output: \\"aba\\" s = \\"aaab\\" Output: \\"\\"","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the string such that no two adjacent characters are the same. If such an arrangement is not possible, returns an empty string. if not s: return \\"\\" # Count the frequency of each character freq = Counter(s) # Use a max-heap to store characters with their frequencies max_heap = [(-cnt, char) for char, cnt in freq.items()] heapq.heapify(max_heap) result = [] prev_count, prev_char = 0, \\"\\" while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char # decrement the count (because it\'s stored as negative) rearranged_string = \\"\\".join(result) if len(rearranged_string) == len(s): return rearranged_string else: return \\"\\""},{"question":"Create a function that adds commas as thousand separators in a given integer. You can assume that the input will always be a non-negative integer. Example ```python add_commas(1234) # returns \\"1,234\\" add_commas(1000000) # returns \\"1,000,000\\" ```","solution":"def add_commas(number): Adds commas as thousand separators in a given non-negative integer. :param number: non-negative integer :return: string representation of the number with commas return f\\"{number:,}\\""},{"question":"Given an array of integers arr and an integer k, find the k most frequent elements. Your solution should manage the ties by returning the smaller element first. Example 1: Input: arr = [1,1,1,2,2,3], k = 2 Output: [1, 2] Example 2: Input: arr = [1], k = 1 Output: [1] Example 3: Input: arr = [3,3,3,1,1,2], k = 3 Output: [3, 1, 2] Note: 1. The frequency of elements should be considered for the solution. 2. If multiple elements have the same frequency, the smaller element should come first. 3. You may assume k is always valid, 1 ≤ k ≤ number of unique elements. 4. The elements in the input array will be positive integers.","solution":"from collections import Counter def k_most_frequent_elements(arr, k): Returns the k most frequent elements in the array `arr`. If multiple elements have the same frequency, the smaller element comes first. # Count the frequency of each element in the array freq = Counter(arr) # Sort elements by frequency (highest first) and by value (lower first if frequencies are the same) sorted_elements = sorted(freq.keys(), key=lambda x: (-freq[x], x)) return sorted_elements[:k]"},{"question":"You are given a matrix (a list of lists) of integers. Write a function `rotate_clockwise` that rotates this matrix 90 degrees clockwise. The function should return the rotated matrix. Example: ``` Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: [[7, 4, 1], [8, 5, 2], [9, 6, 3]] ``` Note: - You can assume that the input matrix is square (i.e., the number of rows is equal to the number of columns).","solution":"def rotate_clockwise(matrix): Rotates a square matrix 90 degrees clockwise. :param matrix: List[List[int]], the input square matrix :return: List[List[int]], the rotated matrix n = len(matrix) rotated_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"A matrix is defined as a 2D array of integers. You are required to rotate the matrix by 90 degrees in a clockwise direction. After the rotation, reflect the matrix over its main diagonal. Rotation by 90 degrees in a clockwise direction involves: - Rows of the original matrix becoming columns of the rotated matrix Reflection over the main diagonal involves: - Transposing the matrix: element at row i, column j of the matrix becomes element at row j, column i. Your task is to implement a function that performs both the operations and prints the transformed matrix. -----Input:----- The first line consists of a single integer T denoting the number of test cases. The first line of each test case consists of two space-separated integers N and M denoting the number of rows and columns in the matrix respectively. The next N lines contain M space-separated integers representing the elements of the matrix. -----Output:----- For each test case, print the resulting matrix after performing the rotation and reflection operations. Each row of the matrix should be printed on a new line. -----Constraints----- - 1 leq T leq 100 - 1 leq N, M leq 10^3 - -10^4 leq matrix[i][j] leq 10^4 -----Sample Input:----- 1 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 7 4 1 8 5 2 9 6 3 -----Explanation:----- Original Matrix: 1 2 3 4 5 6 7 8 9 After rotating by 90 degrees clockwise: 7 4 1 8 5 2 9 6 3 After reflecting over the main diagonal: 7 4 1 8 5 2 9 6 3 Hence, the final output is: 7 4 1 8 5 2 9 6 3","solution":"def rotate_and_reflect(matrix): Rotates the matrix by 90 degrees clockwise and then reflects over the main diagonal. n = len(matrix) m = len(matrix[0]) # Step 1. Rotate the matrix 90 degrees clockwise # This results in the row i becoming column n-1-i rotated_matrix = [[0] * n for _ in range(m)] for i in range(n): for j in range(m): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix def process_input(input_string): inputs = input_string.strip().split(\\"n\\") T = int(inputs[0]) index = 1 results = [] for _ in range(T): N, M = map(int, inputs[index].split()) matrix = [list(map(int, inputs[index + 1 + i].split())) for i in range(N)] index += N + 1 rotated_matrix = rotate_and_reflect(matrix) results.append(rotated_matrix) return results def print_results(results): for result in results: for row in result: print(\\" \\".join(map(str, row)))"},{"question":"Write a function that takes a string as input and returns the first non-repeating character. For the purposes of this problem, case sensitivity is considered (i.e., \'a\' and \'A\' are treated as different characters). If there is no non-repeating character, return an underscore (\'_\'). **Examples:** ```python first_non_repeating(\'stress\') -> \'t\' first_non_repeating(\'moonmen\') -> \'e\' first_non_repeating(\'aabbcc\') -> \'_\' ```","solution":"def first_non_repeating(s): Returns the first non-repeating character in the string. If there is no non-repeating character, returns \'_\'. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 for char in s: if char_count[char] == 1: return char return \'_\'"},{"question":"In a fictional city, there are n bridges each connecting two different districts. Each district in the city is represented as a node, and each bridge is represented as an edge between two nodes in an undirected graph. A district is called critical if it is connected to at least one other district by a bridge, and if the district is removed, the number of connected components in the graph increases by at least one. Your task is to write a function that, given the number of districts n and a list of bridges bridges where each bridge connects two districts (u, v), finds and returns a list of all critical districts in ascending order. -----Input----- - An integer n (1 le n le 100) representing the number of districts. - An integer m (0 le m le n cdot (n-1) / 2) representing the number of bridges. - A list of m pairs of integers bridges, where each pair (u, v) (1 le u, v le n) represents a bridge between districts u and v. -----Output----- Return a list of critical districts in ascending order. -----Examples----- Input 5 5 [(1, 2), (1, 3), (3, 4), (3, 5), (4, 5)] Output [1, 3] Input 3 2 [(1, 2), (1, 3)] Output [1] Input 4 0 [] Output [] -----Note----- In the first example, district 1 is critical because removing it will disconnect district 2 from the others. District 3 is also critical because it serves as a bridge connecting districts 4 and 5 with the rest of the network.","solution":"def find_critical_districts(n, m, bridges): Returns a list of all critical districts in the given city. from collections import defaultdict def dfs(v, visited, low, disc, parent, graph, aps, time): children = 0 visited[v] = True disc[v] = time low[v] = time time += 1 for to in graph[v]: if not visited[to]: parent[to] = v children += 1 dfs(to, visited, low, disc, parent, graph, aps, time) low[v] = min(low[v], low[to]) if parent[v] == -1 and children > 1: aps.add(v) if parent[v] != -1 and low[to] >= disc[v]: aps.add(v) elif to != parent[v]: low[v] = min(low[v], disc[to]) visited = [False] * n disc = [float(\'inf\')] * n low = [float(\'inf\')] * n parent = [-1] * n aps = set() graph = defaultdict(list) for u, v in bridges: graph[u-1].append(v-1) graph[v-1].append(u-1) for i in range(n): if not visited[i]: dfs(i, visited, low, disc, parent, graph, aps, 0) return sorted(list(map(lambda x: x + 1, aps)))"},{"question":"Raman loves exploring different algorithms and today he has come across the Fibonacci sequence. He decided to write a program to generate the first N terms of the Fibonacci sequence. The Fibonacci sequence is defined as follows: - F(1) = 0 - F(2) = 1 - F(n) = F(n-1) + F(n-2) for n > 2 Given an integer N, write a program to print the first N terms of the Fibonacci sequence. -----Input----- The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains a single integer N. -----Output----- For each test case, print the first N terms of the Fibonacci sequence on a new line separated by spaces. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 30 -----Example----- Input 2 5 7 Output 0 1 1 2 3 0 1 1 2 3 5 8","solution":"def fibonacci_sequence(n): if n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_value = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_value) return fib_sequence def process_fibonacci_cases(cases): results = [] for n in cases: fibonacci_seq = fibonacci_sequence(n) results.append(\\" \\".join(map(str, fibonacci_seq))) return results"},{"question":"Given an array of integers `arr` and an integer `k`, return the number of subarrays of `arr` that contain exactly `k` odd numbers. Example 1: Input: arr = [1,1,2,1,1], k = 3 Output: 2 Explanation: The subarrays containing exactly 3 odd numbers are [1,1,2,1] and [1,2,1,1]. Example 2: Input: arr = [2,4,6], k = 1 Output: 0 Explanation: There are no subarrays with exactly 1 odd number. Example 3: Input: arr = [2,2,2,1,2,2,1,2,2,2], k = 2 Output: 16 Explanation: The subarrays containing exactly 2 odd numbers are numerous. Note: 1 <= arr.length <= 50,000 1 <= arr[i], k <= 10^5","solution":"def count_subarrays_with_k_odds(arr, k): def at_most_k_odds(arr, k): count = 0 left = 0 odds = 0 for right, num in enumerate(arr): if num % 2 != 0: odds += 1 while odds > k: if arr[left] % 2 != 0: odds -= 1 left += 1 count += right - left + 1 return count return at_most_k_odds(arr, k) - at_most_k_odds(arr, k-1)"},{"question":"You are given a string containing only characters \'a\', \'b\', and \'c\'. Your task is to transform the string into another string where any consecutive sequence of the same character is replaced by a count of those consecutive characters followed by the character itself. For example: - \\"aaabccc\\" -> \\"3a1b3c\\" - \\"abbcccaa\\" -> \\"1a2b3c2a\\" Write a function `transform_string(s: str) -> str` that performs this transformation. The function should return the transformed string. # Requirements - The function should take a single argument, `s`, which is the input string. # Constraints - The length of the input string will be between 1 and 1000. - The input string will only contain the characters \'a\', \'b\', and \'c\'. # Example ```python assert transform_string(\\"aaabccc\\") == \\"3a1b3c\\" assert transform_string(\\"abbcccaa\\") == \\"1a2b3c2a\\" ```","solution":"def transform_string(s: str) -> str: if not s: return \\"\\" result = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: result.append(f\\"{count}{current_char}\\") current_char = char count = 1 result.append(f\\"{count}{current_char}\\") return \'\'.join(result)"},{"question":"Given a sequence of integers, shift all zeros to the end while maintaining the relative order of the other elements. Write a function `shiftZeroesToEnd` that returns the modified sequence. For example: ```python shiftZeroesToEnd([0, 1, 0, 3, 12]) # Output: [1, 3, 12, 0, 0] shiftZeroesToEnd([0, 0, 1]) # Output: [1, 0, 0] shiftZeroesToEnd([4, 2, 4, 0, 3, 0, 5, 1, 0]) # Output: [4, 2, 4, 3, 5, 1, 0, 0, 0] ``` Note: - You must do this in-place without making a copy of the array. - Minimize the total number of operations.","solution":"def shiftZeroesToEnd(nums): Shifts all zeros to the end of the list while maintaining the relative order of the other elements. Args: nums (list of int): The list of integers to be modified. Returns: list of int: The modified list with all zeros moved to the end. last_non_zero_found_at = 0 # Move all non_zero elements forward for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at] = nums[i] last_non_zero_found_at += 1 # Fill remaining elements with zeros for i in range(last_non_zero_found_at, len(nums)): nums[i] = 0 return nums"},{"question":"Given an integer `n`, write a function `generate_rug(n)` that generates an n x n grid \\"rug\\" where the numbers in the cells represent the Manhattan distance of that cell from the center. The Manhattan distance is calculated as the sum of the absolute differences of the coordinates. The center cell of the rug for an odd `n` is `(n//2, n//2)`. For example, for `n = 3`, the center is at `(1, 1)` and the rug is generated as follows: ```python generate_rug(3) => [ [2, 1, 2], [1, 0, 1], [2, 1, 2] ] ``` For `n = 5`, the center is at `(2, 2)`, resulting in the following rug: ```python generate_rug(5) => [ [4, 3, 2, 3, 4], [3, 2, 1, 2, 3], [2, 1, 0, 1, 2], [3, 2, 1, 2, 3], [4, 3, 2, 3, 4] ] ``` Here are more examples: ```python generate_rug(1) => [ [0] ] generate_rug(4) => [ [3, 3, 3, 3], [3, 2, 2, 3], [3, 2, 2, 3], [3, 3, 3, 3] ] ``` Assume that `n` is always an odd number for simplicity.","solution":"def generate_rug(n): Generates an n x n grid where the numbers in the cells represent the Manhattan distance of that cell from the center. Assumes that n is always an odd number. center = n // 2 # Find the center of the rug rug = [] for i in range(n): row = [] for j in range(n): distance = abs(i - center) + abs(j - center) row.append(distance) rug.append(row) return rug"},{"question":"Query Language Interpreter - Basic Queries Story You are a software engineer at a company that has developed a new minimalist query language called MiniQuery. This language is designed to perform simple queries on a dataset of user records. The dataset contains records of user information in the form of JSON objects, each with the following fields: \\"id\\", \\"name\\", \\"age\\", and \\"location\\". Task Your task is to write a function `query` that accepts a dataset and a MiniQuery string. The MiniQuery string can perform a basic selection using a `WHERE` clause. The function should return a list of records that match the criteria specified in the query. MiniQuery supports the following syntax: 1. `SELECT * WHERE field operator value` 2. `field`: one of `id`, `name`, `age`, `location` 3. `operator`: one of `=`, `!=`, `<`, `>`, `<=`, `>=` 4. `value`: a number (for `id` and `age`) or a string (for `name` and `location`) Examples Consider the following dataset: ```python dataset = [ {\\"id\\": 1, \\"name\\": \\"Alice\\", \\"age\\": 30, \\"location\\": \\"New York\\"}, {\\"id\\": 2, \\"name\\": \\"Bob\\", \\"age\\": 25, \\"location\\": \\"San Francisco\\"}, {\\"id\\": 3, \\"name\\": \\"Charlie\\", \\"age\\": 35, \\"location\\": \\"Los Angeles\\"}, {\\"id\\": 4, \\"name\\": \\"David\\", \\"age\\": 28, \\"location\\": \\"Seattle\\"} ] ``` Example queries and expected results: ```python query(dataset, \\"SELECT * WHERE age > 30\\") # Returns: [{\\"id\\": 3, \\"name\\": \\"Charlie\\", \\"age\\": 35, \\"location\\": \\"Los Angeles\\"}] query(dataset, \\"SELECT * WHERE location = San Francisco\\") # Returns: [{\\"id\\": 2, \\"name\\": \\"Bob\\", \\"age\\": 25, \\"location\\": \\"San Francisco\\"}] query(dataset, \\"SELECT * WHERE id != 1\\") # Returns: [ # {\\"id\\": 2, \\"name\\": \\"Bob\\", \\"age\\": 25, \\"location\\": \\"San Francisco\\"}, # {\\"id\\": 3, \\"name\\": \\"Charlie\\", \\"age\\": 35, \\"location\\": \\"Los Angeles\\"}, # {\\"id\\": 4, \\"name\\": \\"David\\", \\"age\\": 28, \\"location\\": \\"Seattle\\"} # ] query(dataset, \\"SELECT * WHERE name = Alice\\") # Returns: [{\\"id\\": 1, \\"name\\": \\"Alice\\", \\"age\\": 30, \\"location\\": \\"New York\\"}] ``` Notes - The value comparisons for `id` and `age` should be numeric. - The value comparisons for `name` and `location` should be string-based. - Assume the query string will always be valid and properly formatted. Function Signature ```python def query(dataset: list, mini_query: str) -> list: # Your implementation ```","solution":"def query(dataset: list, mini_query: str) -> list: Performs a basic selection from the dataset based on the MiniQuery string and returns matching records. # Parse the MiniQuery string _, _, where_clause = mini_query.partition(\\"WHERE\\") field, operator, value = where_clause.strip().split(maxsplit=2) # Convert value to the appropriate type if field in [\\"id\\", \\"age\\"]: value = int(value) else: value = value.strip() # Dictionary to map operators to lambda functions for easy use operators = { \\"=\\": lambda x, y: x == y, \\"!=\\": lambda x, y: x != y, \\"<\\": lambda x, y: x < y, \\">\\": lambda x, y: x > y, \\"<=\\": lambda x, y: x <= y, \\">=\\": lambda x, y: x >= y, } # Filter the dataset based on the MiniQuery condition result = [record for record in dataset if operators[operator](record[field], value)] return result"},{"question":"A large distribution company stores a vast array of products in its warehouses, each product identified by a SKU (Stock Keeping Unit) and stored in specific quantities. The management wants to optimize their storage by identifying products with quantities above a certain threshold quickly. This way, products needing restocking or reorganization can be processed efficiently. Rules of the problem: - You have N products, each with a unique SKU and quantity. - The management provides Q queries, each containing a threshold value. - For each query, determine the number of products that have a quantity greater than the given threshold. -----Input:----- - The first line contains T, number of test cases. - For each test case: - The first line contains N, the number of products. - The second line contains N space-separated integers representing the quantities of the products. - The third line contains Q, the number of queries. - The next line contains Q space-separated integers, each representing a threshold. -----Output:----- For each test case, print Q lines, each containing the number of products with quantities greater than the corresponding threshold. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq Q leq 10^5 - 1 leq Quantity of Products leq 10^9 -----Subtasks (25 points):----- - 1 leq N leq 10^2 - 1 leq Q leq 10^2 -----Subtasks (25 points):----- - 1 leq N leq 10^3 - 1 leq Q leq 10^3 -----Subtasks (50 points):----- - Original Constraints -----Sample Input:----- 1 5 10 20 15 5 30 3 10 15 25 -----Sample Output:----- 3 2 1 -----EXPLANATION:----- Query 1: For threshold 10, there are three products with quantities greater than 10 (20, 15, 30). Query 2: For threshold 15, there are two products with quantities greater than 15 (20, 30). Query 3: For threshold 25, there is one product with quantity greater than 25 (30).","solution":"def products_above_threshold(test_cases): results = [] for test_case in test_cases: N, quantities, Q, queries = test_case quantities.sort() for threshold in queries: count = len(quantities) - binary_search(quantities, threshold) results.append(count) return results def binary_search(arr, x): low, high = 0, len(arr) while low < high: mid = (low + high) // 2 if arr[mid] <= x: low = mid + 1 else: high = mid return low def parse_input(input_string): data = input_string.strip().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 quantities = list(map(int, data[index:index+N])) index += N Q = int(data[index]) index += 1 queries = list(map(int, data[index:index+Q])) index += Q test_cases.append((N, quantities, Q, queries)) return test_cases"},{"question":"You are required to implement a function to find the longest word in a given sentence. Your function will accept one argument: The argument should be a string containing a sentence. If there are two or more words with the same maximum length, return the first one that appears in the sentence. Ignore punctuation and consider only alphanumeric characters as part of words. # Example: ```python longest_word(\\"A quick brown fox.\\") => \\"quick\\" longest_word(\\"The rain in Spain stays mainly in the plain.\\") => \\"mainly\\" ``` Good luck!","solution":"import re def longest_word(sentence): Finds the longest word in a given sentence. If there are two or more words with the same maximum length, returns the first one that appears in the sentence. Ignores punctuation and considers only alphanumeric characters as part of words. # Remove punctuation and split the sentence into words words = re.findall(r\'bw+b\', sentence) # Find the longest word longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"# Find the Islands of Users in a Social Network You are given a list of users in a social network and a list of follower relationships between them. Each relationship is represented as a pair of (follower, followee) and indicates a one-directional following. Your task is to identify all \\"islands\\" in the social network. An island is a group of users who can indirectly reach each other through the following relationships, but have no connections to users outside the group. Your output should be a list of sets, each representing an island of users. # Example ```python users = [0, 1, 2, 3, 4, 5, 6] follow_relationships = [(0, 1), (1, 2), (3, 4), (5, 6)] islands = [{0, 1, 2}, {3, 4}, {5, 6}] ``` # Explanation In this example, - Users `0`, `1`, and `2` form an island because `0` follows `1` and `1` follows `2`, creating a chain of connectivity. - Users `3` and `4` form another island because `3` follows `4`. - Users `5` and `6` form the third island because `5` follows `6`. There are no connections between the islands, so the output consists of three separate sets representing each island.","solution":"def find_islands(users, follow_relationships): from collections import defaultdict # Building the adjacency list adj_list = defaultdict(set) for follower, followee in follow_relationships: adj_list[follower].add(followee) adj_list[followee].add(follower) # Since we need to consider bi-directional reachability # DFS to find all connected components def dfs(node, visited, island): visited[node] = True island.add(node) for neighbor in adj_list[node]: if not visited[neighbor]: dfs(neighbor, visited, island) visited = {user: False for user in users} islands = [] for user in users: if not visited[user]: island = set() dfs(user, visited, island) islands.append(island) return islands"},{"question":"You have to write a function \\"maxDifference\\" that takes an array of integers as input and returns the maximum difference between any two elements such that the larger element comes after the smaller one in the array. ```Example: Input - {2, 3, 10, 6, 4, 8, 1} Output - 8 Explanation - The maximum difference is (10 - 2) = 8 Input - {7, 9, 5, 6, 3, 2} Output - 2 Explanation - The maximum difference is (9 - 7) = 2 ```","solution":"def maxDifference(arr): Returns the maximum difference between any two elements in the array such that the larger element comes after the smaller one. if len(arr) < 2: return 0 min_element = arr[0] max_diff = arr[1] - arr[0] for i in range(1, len(arr)): max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"The Problem Tim is planning a road trip and wants to listen to songs from his favorite playlist during the journey. He has a time constraint for each segment of the trip, so he wants to make sure the total duration of songs in the playlist for each segment does not exceed the maximum time allowed. Your task is to help him build a playlist that fits the requirement. What To Do Create a `road_trip_playlist` helper function that takes two arguments: the first is an integer representing the maximum length of the playlist in minutes, and the second is an array of song objects. Each song object is formatted as follows: ```python {\'artist\': \'Artist\', \'title\': \'Title String\', \'duration\': \'3:45\'} ``` The `duration` value is formatted as \'minutes:seconds\'. Your function should output an array of song titles that can be included in the playlist without exceeding the maximum time allowed. If there\'s no possible combination within the time limit, return an empty array. In case of multiple valid combinations, any one valid playlist would suffice.","solution":"def road_trip_playlist(max_length, songs): Generate a playlist with a total duration not exceeding max_length. Parameters: max_length (int): The maximum allowed length of the playlist in minutes. songs (list): A list of dictionaries, each containing \'artist\', \'title\', and \'duration\' keys. Returns: list: A list of song titles that fit within the given max_length. def duration_in_seconds(duration): minutes, seconds = map(int, duration.split(\':\')) return minutes * 60 + seconds max_length_seconds = max_length * 60 result = [] current_duration = 0 for song in songs: song_duration = duration_in_seconds(song[\'duration\']) if current_duration + song_duration <= max_length_seconds: result.append(song[\'title\']) current_duration += song_duration return result"},{"question":"# Task Given a list of integers, write a function to determine the length of the longest contiguous subsequence where each element can be rearranged in non-decreasing order. You should return the length of this subsequence. # Example For the list `[10, 12, 11, 14, 23, 10, 11, 21]`, the output should be `3` because the longest contiguous subsequence that can be reordered in a non-decreasing order is `[10, 12, 11]` or `[10, 11, 14]`. For the list `[1, 2, 3, 5, 7, 8, 9, 10]`, the output should be `8` because the entire list can be reordered in non-decreasing order. For the list `[4, 5, 4, 5, 4, 5]`, the output should be `2`. # Input/Output - `[input]` list of integers `arr` An array with `0 ≤ len(arr) ≤ 10000`. - `[output]` an integer The length of the longest contiguous subsequence that can be reordered in a non-decreasing order.","solution":"def longest_contiguous_subsequence(arr): if not arr: return 0 max_len = 1 current_len = 1 for i in range(1, len(arr)): if arr[i] >= arr[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Create a function `middle_me` that takes in a string `text` and a string `word`. Your function should return a string where `word` is inserted into the exact middle of `text`. If `text` has an odd length, insert `word` immediately after the middle character of `text`. Examples: ``` middle_me(\\"abc\\", \\"word\\") => \\"abwordc\\" middle_me(\\"abcd\\", \\"word\\") => \\"abwordcd\\" middle_me(\\"a\\", \\"word\\") => \\"aword\\" middle_me(\\"\\", \\"word\\") => \\"word\\" ``` Notes: - You can assume that `text` and `word` are non-empty strings containing only lowercase letters. - The length of `word` will always be at least 1 and at most 100.","solution":"def middle_me(text, word): Inserts the word into the middle of text. If text has an odd length, insert word immediately after the middle character. Parameters: text (str): The original string. word (str): The string to be inserted into the middle of text. Returns: str: The new string with word inserted in the middle of text. mid_index = len(text) // 2 if len(text) % 2 == 0: # text length is even return text[:mid_index] + word + text[mid_index:] else: # text length is odd return text[:mid_index + 1] + word + text[mid_index + 1:]"},{"question":"Alyssa loves playing with numbers. Today, she came across a very interesting number game and decided to challenge you with it. You are given an array of integers `a` of length `n`. Your task is to find a subsequence of array `a` such that the sum of the elements of this subsequence is maximum, but the subsequence should not have any two consecutive elements from the array `a`. A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Write a function to determine the maximum possible sum of such a subsequence. The function should return an integer representing the maximum sum. # Input Format - The first line contains a single integer `t` (1 leq t leq 100), the number of test cases. - For each test case: - The first line contains an integer `n` (1 leq n leq 100), the length of the array `a`. - The second line contains `n` space-separated integers a_i (-10^3 leq a_i leq 10^3), the elements of the array. # Output Format For each test case, output a single integer representing the maximum possible sum of a subsequence that does not have any two consecutive elements from the input array. # Example Input ``` 2 4 3 2 5 10 4 -1 5 -2 3 ``` Output ``` 13 8 ``` # Explanation - In the first test case, the subsequence `[3, 10]` gives the maximum sum `13`. - In the second test case, the subsequence `[5, 3]` provides the maximum sum `8`. Note: Pay attention to the constraints on the integers. Though the input array can contain negative numbers, a non-empty subsequence is always required.","solution":"def max_non_consecutive_sum(arr): Function to find the maximum possible sum of a subsequence such that the subsequence does not have any two consecutive elements from the input array. if not arr: return 0 n = len(arr) if n == 1: return max(0, arr[0]) # Create a DP array to store the maximum sum at each position dp = [0] * n dp[0] = max(0, arr[0]) if n > 1: dp[1] = max(dp[0], arr[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + arr[i]) return dp[-1] def max_sum_non_consecutive(t, test_cases): Function to solve the problem for multiple test cases as described in the prompt. results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] result = max_non_consecutive_sum(arr) results.append(result) return results"},{"question":"Convert a Roman numeral string to an integer. Write a function that takes a string representing a Roman numeral and returns its integer value. The input string will always be a valid Roman numeral in the range of 1 to 3999. Roman numerals are represented by seven different symbols: ``` Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 ``` Roman numerals are usually written from largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: ``` I can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900. ``` Here are some examples of Roman numerals and their integer equivalents: ``` Symbol Value III 3 IV 4 IX 9 LVIII 58 MCMXCIV 1994 ``` Write a function with the following signature: ```python def roman_to_integer(s: str) -> int: pass ``` Your function should convert the input Roman numeral string `s` and return its integer value. Example: ```python assert roman_to_integer(\\"III\\") == 3 assert roman_to_integer(\\"IV\\") == 4 assert roman_to_integer(\\"IX\\") == 9 assert roman_to_integer(\\"LVIII\\") == 58 assert roman_to_integer(\\"MCMXCIV\\") == 1994 ```","solution":"def roman_to_integer(s: str) -> int: Convert a Roman numeral string to an integer. :param s: Roman numeral string :return: Integer value of the Roman numeral roman_to_int_map = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_to_int_map[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"In a world of virtual cities, there are N cities connected by M bidirectional roads. Each road has a length associated with it. The task is to help travelers find the shortest path from one city to another, given that they have a list of travel queries. -----Input----- - The first line of the input contains two integers N (number of cities) and M (number of roads). - The next M lines each contain three integers u, v, w, where u and v are cities connected by a road of length w. - The next line contains a single integer Q (number of queries). - The next Q lines each contain two integers a and b, which represent a query for the shortest path from city a to city b. -----Output----- For each query, output a single integer — the length of the shortest path from city a to city b. If there is no path between the cities, output -1. -----Constraints----- - 1 ≤ N ≤ 500 - 1 ≤ M ≤ 10,000 - 1 ≤ Q ≤ 1,000 - 1 ≤ w ≤ 1,000 - 1 ≤ u, v, a, b ≤ N - u ≠ v, a ≠ b -----Example Input----- 5 6 1 2 3 1 3 5 2 3 2 3 4 4 2 4 6 4 5 1 3 1 5 2 4 3 1 -----Example Output----- 10 6 5","solution":"import heapq def dijkstra(graph, start, n): distances = [float(\'inf\')] * (n + 1) distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_city = heapq.heappop(priority_queue) if current_distance > distances[current_city]: continue for neighbor, weight in graph[current_city]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def shortest_paths(n, roads, queries): # Create the graph as adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Calculate shortest paths using Dijkstra for each city all_distances = {} for city in range(1, n + 1): all_distances[city] = dijkstra(graph, city, n) # Process each query results = [] for a, b in queries: distance = all_distances[a][b] if distance == float(\'inf\'): results.append(-1) else: results.append(distance) return results"},{"question":"# Sum of Unique Numbers Consider an array of integers where each number can appear multiple times. Your task is to find the sum of all unique numbers in the array. A number is considered unique if it appears exactly once in the array. --- # Task **Given** an array of integers, **calculate the sum of all the unique integers within the array**. --- # Notes - You can assume the array will always contain at least one integer (N > 0). - The input array can contain both positive and negative integers. --- # Input >> Output Examples: ```cpp 1- sumUniqueNumbers({1, 2, 3, 2, 1}) ==> return (3) ``` **Explanation**: **Since** the numbers 3 appears exactly once in the array, **the sum of unique integers** should be `3`. --- ```cpp 2- sumUniqueNumbers({4, 4, 5, 6}) ==> return (11) ``` **Explanation**: **Since** the numbers 5 and 6 appear exactly once in the array, **the sum of unique integers** should be `5 + 6 = 11`. --- ```cpp 3- sumUniqueNumbers({-1, 2, -1, 3, 4}) ==> return (9) ``` **Explanation**: **Since** the numbers 2, 3, and 4 appear exactly once in the array, **the sum of unique integers** should be `2 + 3 + 4 = 9`. --- ```cpp 4- sumUniqueNumbers({10, 20, 10, -10, -10}) ==> return (20) ``` **Explanation**: **Since** the number 20 appears exactly once in the array, **the sum of unique integers** should be `20`. --- ```cpp 5- sumUniqueNumbers({1, 1, 1, 1, 1}) ==> return (0) ``` **Explanation**: **Since** no number appears exactly once in the array, **the sum of unique integers** should be `0`. --- # Enjoy Coding!","solution":"def sumUniqueNumbers(arr): Returns the sum of all unique numbers in the array. Parameters: arr (list): A list of integer numbers. Returns: int: The sum of unique numbers. from collections import Counter # Count occurrences of each number count = Counter(arr) # Calculate sum of numbers with exactly one occurrence unique_sum = sum(num for num, freq in count.items() if freq == 1) return unique_sum"},{"question":"John loves solving mathematical puzzles. He recently came across an interesting problem involving sequences and needs your help to program a solution. John has one number N that determines the length of a special sequence. Help John write a program to generate this sequence. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, output the sequence for the given N. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 -----Sample Input:----- 3 1 2 3 -----Sample Output:----- 1 2 4 3 6 9 -----EXPLANATION:----- For a given integer N, the sequence consists of N terms. The i^{th} term of the sequence is calculated as: i times N.","solution":"def generate_sequence(T, test_cases): Generate sequences based on the input list of test_cases. Parameters: T (int): The number of test cases. test_cases (list of int): A list of integers representing each test case. Returns: list of list of int: A list of sequences generated for each test case. sequences = [] for N in test_cases: sequence = [i * N for i in range(1, N + 1)] sequences.append(sequence) return sequences"},{"question":"Write a function that determines whether a string is a valid palindrome, considering only alphanumeric characters and ignoring cases. *Note:* An empty string is considered a valid palindrome. Examples ```python \'A man, a plan, a canal: Panama\' => True \'race a car\' => False \'Able was I, ere I saw Elba\' => True \' \' => True ```","solution":"def is_palindrome(s): Determines whether a string is a valid palindrome, considering only alphanumeric characters and ignoring cases. filtered_chars = [char.lower() for char in s if char.isalnum()] return filtered_chars == filtered_chars[::-1]"},{"question":"Given an integer X. Write a program to determine if X is a palindrome. An integer is a palindrome when it reads the same backward as forward. -----Input----- The first line contains an integer T, the total number of test cases. Then follow T lines, each line contains an integer X. -----Output----- For each test case, output \\"YES\\" if X is a palindrome and \\"NO\\" if it is not in a new line. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ X ≤ 1000000 -----Example----- Input 3 121 123 44444 Output YES NO YES","solution":"def is_palindrome(x): Determines if a given integer x is a palindrome. str_x = str(x) return str_x == str_x[::-1] def check_palindromes(test_cases): Given a list of integers, check each for palindrome property and return results. results = [] for x in test_cases: if is_palindrome(x): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string `s` consisting of lowercase letters, and an integer `k`. You can select any substring of `s` and change all of its characters to any other single lowercase letter. Your goal is to find the length of the longest possible substring that can be achieved by performing at most `k` operations. Example 1: Input: s = \\"abaccc\\", k = 1 Output: 4 Explanation: Change one of the \'a\' or \'b\' to \'c\' to get the substring \\"accc\\" or \\"bccc\\". Example 2: Input: s = \\"aaabbc\\", k = 2 Output: 5 Explanation: Change \'c\' to \'a\' and one of the \'b\'s to \'a\' to get the substring \\"aaaaa\\". Note: - 1 <= s.length <= 10^5 - 1 <= k <= s.length - s consists of lowercase English letters only.","solution":"from collections import defaultdict def longest_substring(s, k): def is_valid(count, max_count, k): return (sum(count.values()) - max_count) <= k left, max_length, max_count = 0, 0, 0 count = defaultdict(int) for right in range(len(s)): count[s[right]] += 1 max_count = max(max_count, count[s[right]]) while not is_valid(count, max_count, k): count[s[left]] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Rainbow Sort You are given an array of integers representing blocks that need to be painted one of three colors: red, blue, or green. The array contains only the integers 0, 1, and 2, where 0 represents red, 1 represents blue, and 2 represents green. The objective is to sort the array in a single traversal such that all red blocks come before blue blocks, and blue blocks come before green blocks. # Task Complete the function `rainbow_sort` which takes a list of integers and sorts it in-place according to the described criteria. ```python def rainbow_sort(arr): # Your code here ``` # Example Input An array of integers: `[2, 0, 1, 1, 0, 2, 0]` Output The sorted array: `[0, 0, 0, 1, 1, 2, 2]` # Constraints - The input array can be empty. - The array contains only integers `0`, `1`, and `2`. - The solution should perform sorting in a single traversal of the array. # Notes - Try to implement an efficient algorithm using constant extra space. Good luck!","solution":"def rainbow_sort(arr): Sorts the given list of integers in a single traversal such that all 0s come before 1s, and 1s come before 2s. low, mid, high = 0, 0, len(arr) - 1 while mid <= high: if arr[mid] == 0: arr[low], arr[mid] = arr[mid], arr[low] low += 1 mid += 1 elif arr[mid] == 1: mid += 1 else: # arr[mid] == 2 arr[high], arr[mid] = arr[mid], arr[high] high -= 1"},{"question":"Array Rotation Create a function that rotates an array to the left by a given number of steps. The function should take in two parameters: the array to be rotated and the number of steps to rotate. For example, given the array [1, 2, 3, 4, 5] and the number of steps 2, the function should return the array [3, 4, 5, 1, 2]. # Constraints: - The array will have at least one element. - The number of steps will always be a non-negative integer. - The number of steps can be greater than the length of the array. # Example: ```python def rotate_array(arr, steps): # Your code here # Examples: print(rotate_array([1, 2, 3, 4, 5], 2)) # Output: [3, 4, 5, 1, 2] print(rotate_array([6, 7, 8, 9, 10], 4)) # Output: [10, 6, 7, 8, 9] print(rotate_array([1, 2, 3], 0)) # Output: [1, 2, 3] ``` Implement the function according to the specification.","solution":"def rotate_array(arr, steps): Rotates the array to the left by the given number of steps. Parameters: arr (list): The array to be rotated. steps (int): The number of steps to rotate the array. Returns: list: The rotated array. n = len(arr) steps = steps % n # To handle cases where steps > len(arr) return arr[steps:] + arr[:steps]"},{"question":"You are given an integer array nums. A contiguous subarray is defined as a segment of the array that can be obtained by removing some elements from the beginning and some elements from the end of the array. A subarray sum is the sum of the elements of the subarray. Find the maximum subarray sum. Example 1: Input: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The maximum subarray is [4,-1,2,1] with sum 6. Example 2: Input: nums = [1] Output: 1 Explanation: The maximum subarray is [1] with sum 1. Example 3: Input: nums = [5,4,-1,7,8] Output: 23 Explanation: The maximum subarray is [5,4,-1,7,8] with sum 23. Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4","solution":"def max_subarray_sum(nums): This function takes an integer array nums and returns the sum of the maximum subarray. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function that takes an array of integers as input and returns a new array where each element is the sum of itself and all previous elements in the array. For example, given the following input array: ``` sumArray([1, 2, 3, 4]) ``` The function should return: ``` [1, 3, 6, 10] ``` This is because: - The first element is `1` - The second element is `1 + 2 = 3` - The third element is `1 + 2 + 3 = 6` - The fourth element is `1 + 2 + 3 + 4 = 10` Implement the function such that it can handle arrays of any length, including empty arrays.","solution":"def sumArray(arr): Given an array of integers, returns a new array where each element is the sum of itself and all previous elements. Parameters: arr (list of int): Input array of integers. Returns: list of int: New array with cumulative sums. cumulative_sum = 0 result = [] for num in arr: cumulative_sum += num result.append(cumulative_sum) return result"},{"question":"Write a function that receives a list of integers and returns a list of booleans where each boolean represents if the corresponding integer in the input list is a prime number. The input to the function will be a list of positive integers. For example: is_prime_list([2, 3, 4, 5, 10]) => [True, True, False, True, False] *2*, *3*, and *5* are prime numbers, so the corresponding booleans in the output list are *True*. *4* and *10* are not prime numbers, so the corresponding booleans in the output list are *False*. Another example: is_prime_list([11, 13, 17, 19, 23]) => [True, True, True, True, True] All the numbers in the input list are prime, thus all the values in the output list are *True*.","solution":"def is_prime(n): Helper function that checks if a number n is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def is_prime_list(numbers): Returns a list of booleans where each boolean indicates if the corresponding number in the input list is prime. return [is_prime(num) for num in numbers]"},{"question":"In a country far away, there is a special programming contest where each participant is given a sequence of instructions to process. Each instruction is one of three types: - \\"1 x\\": Add the integer x to a set. - \\"2 x\\": Remove the integer x from the set, if it is present. - \\"3\\": Output the maximum integer from the set. You need to write a program that processes a sequence of these instructions and provides the correct outputs for all the \\"3\\" instructions. -----Input----- The first line contains an integer q (1 ≤ q ≤ 10^5) — the number of instructions to process. Each of the next q lines contains one instruction in one of the formats described above. Each integer x in the instructions (1 ≤ x ≤ 10^9) -----Output----- For each \\"3\\" instruction, output the maximum integer in the set on a new line. If the set is empty during a \\"3\\" instruction, output \\"EMPTY\\". -----Examples----- Input 7 1 5 1 10 3 2 10 3 2 5 3 Output 10 5 EMPTY -----Note----- For the given sample: - \\"1 5\\" adds 5 to the set. - \\"1 10\\" adds 10 to the set. - \\"3\\" outputs the maximum in the set, which is 10 at this point. - \\"2 10\\" removes 10 from the set. - \\"3\\" outputs the maximum in the set, which is now 5. - \\"2 5\\" removes 5 from the set. - \\"3\\" outputs \\"EMPTY\\" as the set is empty.","solution":"def process_instructions(q, instructions): Process a sequence of instructions and provide the correct outputs for all the \\"3\\" instructions. Parameters: q (int): the number of instructions. instructions (list of str): each instruction in one of the formats described above. Returns: list: output for each \\"3\\" instruction. result = [] current_set = set() for instruction in instructions: parts = instruction.split() if parts[0] == \\"1\\": current_set.add(int(parts[1])) elif parts[0] == \\"2\\": current_set.discard(int(parts[1])) elif parts[0] == \\"3\\": if current_set: result.append(max(current_set)) else: result.append(\\"EMPTY\\") return result"},{"question":"----- Given a list of \'n\' sentences, your task is to remove all the vowels from each sentence and output the modified sentences. -----Input----- The input will consist of the first line containing the number of test cases \'n\' followed by \'n\' lines of test cases, each containing one sentence. -----Output----- For each input, print the sentence after removing all the vowels. -----Example----- Input: 3 Hello World Programming is fun I am a student Output: Hll Wrld Prgrmmng s fn m stdnt","solution":"def remove_vowels(sentences): vowels = \'aeiouAEIOU\' result = [] for sentence in sentences: modified_sentence = \'\'.join([char for char in sentence if char not in vowels]) result.append(modified_sentence) return result def process_input(n, sentences): return remove_vowels(sentences)"},{"question":"Description You are given a list of integers and need to find the longest sequence of consecutive numbers. The consecutive numbers can be in any order within the list. # Implementation Details: - You are to write a function `longest_consecutive_sequence(numbers)` that takes a list of integers `numbers` as its input and returns the length of the longest sequence of consecutive numbers. - Consecutive sequences can be in any order but must be strictly increasing without any gaps. # Important Info: - The numbers can be negative, positive, or zero. - The provided list will have at least one number. # Examples: ``` numbers = [100, 4, 200, 1, 3, 2] ``` would return `4`, as the longest consecutive sequence is `1, 2, 3, 4`. ``` numbers = [0, -1, 2, -2, -3, 1] ``` would return `6`, as the longest consecutive sequence is `-3, -2, -1, 0, 1, 2`. ``` numbers = [9, 1, 4, 7, 3, 2, 6, 8, 0] ``` would return `5`, as the longest consecutive sequence is `0, 1, 2, 3, 4`.","solution":"def longest_consecutive_sequence(numbers): Returns the length of the longest sequence of consecutive numbers in the list. if not numbers: return 0 number_set = set(numbers) longest_streak = 0 for number in number_set: if number - 1 not in number_set: # check if it\'s the start of a sequence current_number = number current_streak = 1 while current_number + 1 in number_set: current_number += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are working on a software project that involves processing financial transactions for an online store. One of the tasks is to calculate the total revenue generated from each unique product sold. Input The input to your function will be an array of strings, where each string represents a transaction. Each string contains a product name and the corresponding price paid by the customer, separated by a space. The number of spaces between the name and the price can vary. The product names may be repeated if a product has been sold more than once. The price will always be a positive floating-point number. An example of an input array might be: ``` [\\"Laptop 1200.00\\", \\"Smartphone 800.99\\", \\"Tablet 299.99\\", \\"Laptop 1199.99\\", \\"Smartphone 799.99\\"] ``` Processing Your function should process this input to calculate the total revenue generated for each unique product name. The product names should be case-insensitive and the totals should be calculated accurately using floating-point arithmetic. Output The function should return a sorted array (in ascending order) with each unique product name converted to uppercase followed by the total revenue generated from that product. The product names and their total revenues should be separate elements in the array. An example of an array to be returned (based on the example input array above) would be: ``` [\\"LAPTOP\\", 2399.99, \\"SMARTPHONE\\", 1600.98, \\"TABLET\\", 299.99] ``` The product names should be strings in uppercase and the total revenue should be floating-point numbers. Special Note If a transaction contains \\"REFUND\\" in place of a product name, it means that the transaction is invalid and should be thrown out. The entire input list containing such transactions should be ignored. In such cases, return an array with a single string element in it: `\\"Invalid transactions detected\\"` # Constraints - The input array will have at most 1000 transactions. - Each price will be a floating-point number with two decimal places.","solution":"def calculate_total_revenue(transactions): Calculate total revenue generated from each unique product sold. If any transaction contains \\"REFUND\\", return \\"Invalid transactions detected\\". Args: transactions (list of str): List of transactions. Each string contains a product name and a price. Returns: list: Sorted array with unique product names in uppercase and their total revenue. Or [\\"Invalid transactions detected\\"] if any transaction contains \\"REFUND\\". revenue_dict = {} for transaction in transactions: # Check for \\"REFUND\\" in transaction, if found return invalid transaction message. if \\"REFUND\\" in transaction: return [\\"Invalid transactions detected\\"] # Split the transaction into product name and price transaction_parts = transaction.rsplit(\' \', 1) product_name = transaction_parts[0].strip() price = float(transaction_parts[1].strip()) # Convert product name to uppercase product_name_upper = product_name.upper() # Add revenue to product name if product_name_upper in revenue_dict: revenue_dict[product_name_upper] += price else: revenue_dict[product_name_upper] = price # Convert the revenue dictionary to a sorted list sorted_revenue_list = [] for product_name in sorted(revenue_dict.keys()): sorted_revenue_list.append(product_name) sorted_revenue_list.append(revenue_dict[product_name]) return sorted_revenue_list"},{"question":"# Plants Growth Monitoring --- # Task You are working on an application that monitors plant growth over a period of time. Each plant grows a certain number of centimeters each day. Given data on how much each plant in your garden grows daily, and starting height of each plant, you need to calculate the final heights of the plants after a given number of days. Details - You have `N` plants in your garden. - Each plant `i` has an initial height `h_i` centimeters. - Each plant `i` grows `g_i` centimeters per day. - You need to calculate the height of each plant after `D` days. Input - The first input is an integer `N` representing the number of plants. - The second input is an integer `D` representing the number of days. - The next `N` inputs are integers, representing the initial heights of the plants. - The last `N` inputs are integers, representing the daily growth of the plants. Output Return a list of integers where each integer is the final height of the corresponding plant after `D` days. Example ```python # Number of plants N = 3 # Number of days D = 5 # Initial heights initial_heights = [1, 2, 3] # Daily growth growth_per_day = [1, 1, 1] # Final heights >>> final_heights(N, D, initial_heights, growth_per_day) [6, 7, 8] ``` Explanation: - Plant 1 starts at 1 unit and grows 1 unit per day for 5 days, so its final height is 1 + 1*5 = 6 units. - Plant 2 starts at 2 units and grows 1 unit per day for 5 days, so its final height is 2 + 1*5 = 7 units. - Plant 3 starts at 3 units and grows 1 unit per day for 5 days, so its final height is 3 + 1*5 = 8 units. Constraints 1 <= N <= 1000 1 <= D <= 100 1 <= h_i, g_i <= 100 All inputs are valid integers. ```python def final_heights(N, D, initial_heights, growth_per_day): # Your code here ```","solution":"def final_heights(N, D, initial_heights, growth_per_day): Calculate the final heights of the plants after a given number of days. Args: N : int : Number of plants D : int : Number of days initial_heights : list of int : Initial heights of the plants growth_per_day : list of int : Daily growth of the plants Returns: list of int : Final heights of the plants after `D` days # Calculate the final heights final_heights = [initial_heights[i] + growth_per_day[i] * D for i in range(N)] return final_heights"},{"question":"During quarantine, Emma developed an algorithmic challenge and now she wants you to solve it. You are given an array of integers and your task is to make all elements in the array equal. You can choose any number in the array and increment or decrement it by 1. You need to determine the minimum number of operations required to make all elements of the array equal. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N (the length of the array). - The second line contains N space-separated integers A_1, A_2, dots, A_N denoting the elements of the array. -----Output----- For each test case, output a single integer - the minimum number of operations required to make all elements in the array equal. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - -10^9 le A_i le 10^9 -----Subtasks----- Subtask #1 (50 points): N le 100 Subtask #2 (50 points): N le 10^5 -----Example Input----- 3 5 1 2 3 4 5 4 4 4 2 4 6 5 10 15 20 25 30 -----Example Output----- 6 2 45 -----Explanation----- Example case 1: - The optimal solution is to make all elements equal to the median of the array (3 in this case), and we need 6 operations: 2 operations to increment/decrement 2 elements to 3 and 4 operations to increment/decrement the other 2 elements to 3. Example case 2: - We can make all elements equal to 4 with 2 operations: increment the element 2 by 2. Example case 3: - We can make all elements equal to 20 (the median) which will require 45 operations in total.","solution":"def min_operations_to_equal_elements(T, test_cases): def calculate_operations(arr): n = len(arr) arr.sort() median = arr[n // 2] return sum(abs(x - median) for x in arr) results = [] for i in range(T): N = test_cases[i][0] A = test_cases[i][1] result = calculate_operations(A) results.append(result) return results"},{"question":"You are given a list of integers representing the heights of wooden planks, arranged side by side. Your task is to determine the largest rectangular area that can be formed by selecting some of these planks (possibly all) such that the selected planks are contiguous and form a rectangular shape. For example, given the list: ``` [2, 1, 5, 6, 2, 3] ``` The largest rectangle can be formed using the heights `5` and `6`, resulting in an area of `10` (2 planks of height 5 each). Write a function `largest_rectangle_area` that accepts a list of integers and returns the area of the largest rectangle that can be formed. **Example:** ``` assert largest_rectangle_area([2, 1, 5, 6, 2, 3]) == 10 assert largest_rectangle_area([1, 2, 3, 4, 5]) == 9 assert largest_rectangle_area([2, 1, 2]) == 3 assert largest_rectangle_area([6]) == 6 assert largest_rectangle_area([]) == 0 ``` * The input list can have a length of up to 100,000. * Each height in the list will be a positive integer not exceeding 10,000. * If the list is empty, return `0`. Your task is to write the function `largest_rectangle_area` which, given the list of heights, returns the area of the largest rectangle that can be formed.","solution":"def largest_rectangle_area(heights): Returns the largest rectangular area that can be formed by contiguous planks. if not heights: return 0 stack = [] max_area = 0 for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) while stack: height = heights[stack.pop()] width = len(heights) if not stack else len(heights) - stack[-1] - 1 max_area = max(max_area, height * width) return max_area"},{"question":"You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm: 1. Create a root node whose value is the maximum value in nums. 2. Recursively build the left subtree on the subarray prefix to the left of the maximum value. 3. Recursively build the right subtree on the subarray suffix to the right of the maximum value. Return the root node of the maximum binary tree. Example 1: Input: nums = [3,2,1,6,0,5] Output: [6,3,5,null,2,0,null,null,1] Explanation: The recursive calls are: - The root is 6. Left subtree is [3,2,1] (built from elements before 6) and right subtree is [0,5] (built from elements after 6). - 3 is the maximum of [3,2,1] and 5 is the maximum of [0,5], thus 6 is the root with 3 as its left child and 5 as its right child. - 2 is the maximum of [2,1] means 3 has left child 2 and similarly, 0 is the only element in [0] making 0 the left child of 5. The final structure is [6,3,5,null,2,0,null,null,1], representing the tree. Example 2: Input: nums = [3,2,1] Output: [3,null,2,null,1] Explanation: The recursive calls are: - The root is 3. Left subtree is [] and right subtree is [2,1]. - 2 is the maximum of [2,1] hence 2 is the right child of 3 and similarly, 1 is the only element in [1] making 1 the right child of 2. The final structure is [3,null,2,null,1], representing the tree. Constraints: 1 <= nums.length <= 1000 0 <= nums[i] <= 1000 All integers in nums are unique.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def constructMaximumBinaryTree(nums): Constructs the maximum binary tree from the given list of integers. Parameters: nums (list): List of unique integers. Returns: TreeNode: The root node of the constructed maximum binary tree. if not nums: return None max_value = max(nums) max_index = nums.index(max_value) root = TreeNode(val=max_value) root.left = constructMaximumBinaryTree(nums[:max_index]) root.right = constructMaximumBinaryTree(nums[max_index + 1:]) return root def tree_to_list(root): Converts binary tree to list level by level. Parameters: root (TreeNode): The root node of the binary tree. Returns: list: List representation of the binary tree. if not root: return [] result = [] queue = [root] while queue: node = queue.pop(0) if node: result.append(node.val) queue.append(node.left) queue.append(node.right) else: result.append(None) # Remove trailing None values while result and result[-1] is None: result.pop() return result"},{"question":"Implement a function that simulates a basic calculator for addition, subtraction, and multiplication of integers. The input will be a string containing a valid expression with non-negative integers and the operators \'+\', \'-\', \'*\'. There will be no leading or trailing spaces and no parenthesis. Example: ```python \\"3+5*2-8\\" --> 5 \\"10*2-3+4\\" --> 21 \\"1+2-3*4\\" --> -9 ```","solution":"def basic_calculator(expression): Evaluates a basic arithmetic expression containing non-negative integers and the operators \'+\', \'-\', \'*\'. def evaluate(tokens): total, current_value = 0, 0 operator = \'+\' for token in tokens: if token in \'+-*\': operator = token else: num = int(token) if operator == \'+\': total += current_value current_value = num elif operator == \'-\': total += current_value current_value = -num elif operator == \'*\': current_value *= num return total + current_value # Split the expression into parts tokens = [] num = \'\' for char in expression: if char in \'+-*\': tokens.append(num) tokens.append(char) num = \'\' else: num += char tokens.append(num) return evaluate(tokens)"},{"question":"You are given a singly linked list where each node contains an integer value. Your task is to implement a function that partitions this linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to x. The original relative order of the nodes in each of the two partitions should be preserved. Function Signature: ```python def partition_linked_list(head: ListNode, x: int) -> ListNode: pass ``` # Input - The function takes in two arguments: - `head`: A singly linked list of integers where each node is represented by a `ListNode` object. The `ListNode` class is defined as follows: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` - `x`: An integer value around which the linked list needs to be partitioned. # Output - Return the head of the modified linked list after partitioning. # Constraints - The length of the linked list is in the range `[0, 200]`. - The node values of the linked list are in the range `[-10^4, 10^4]`. # Example ```python # Example 1 # Input: head = [1 -> 4 -> 3 -> 2 -> 5 -> 2], x=3 # Output: [1 -> 2 -> 2 -> 4 -> 3 -> 5] # Example 2 # Input: head = [2 -> 1], x=2 # Output: [1 -> 2] ``` # Explanation - In Example 1, elements less than 3 are [1, 2, 2] and elements greater or equal to 3 are [4, 3, 5]. We maintain their respective relative order while recombining the two parts. - In Example 2, element less than 2 is [1] and element greater or equal to 2 is [2]. We maintain their respective relative order while recombining the two parts.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def partition_linked_list(head: ListNode, x: int) -> ListNode: if head is None: return None # Create two dummy nodes for less and greater or equal partitions less_head = ListNode(0) greater_head = ListNode(0) # Use two pointers to build the two lists less = less_head greater = greater_head current = head while current: if current.val < x: less.next = current less = less.next else: greater.next = current greater = greater.next current = current.next # Combine the two lists less.next = greater_head.next greater.next = None return less_head.next"},{"question":"Write a function `mergeSortedArrays`/`merge_sorted_arrays` that takes two sorted arrays of integers `arr1` and `arr2` and returns a new sorted array that contains all the elements from `arr1` and `arr2`. For example: ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) ``` should return `[1, 2, 3, 4, 5, 6]`. The merged array must be sorted and must not use any built-in sorting functions.","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array without using any built-in sorting functions. merged_array = [] i, j = 0, 0 # Traverse through both arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"Given a linked list, remove the n-th node from the end of the list and return its head. Example: Input: 1->2->3->4->5, n = 2 Output: 1->2->3->5 Assume the definition for singly-linked list is as follows: class ListNode { int val; ListNode next; ListNode(int x) { val = x; } }","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def removeNthFromEnd(head, n): Remove the n-th node from the end of list and return its head. # Create a dummy node to handle edge cases such as removing the first node dummy = ListNode(0) dummy.next = head first = dummy second = dummy # Move first pointer so that the gap between first and second is n nodes apart for _ in range(n + 1): first = first.next # Move both pointers at the same pace while first is not None: first = first.next second = second.next # Remove the nth node from the end second.next = second.next.next return dummy.next"},{"question":"Given a list of integers, you need to write a function that segregates even and odd numbers such that all even numbers appear before the odd numbers while preserving the relative order of even and odd numbers. Your function should modify the list in-place and not use any extra space other than a few variables. For example, given the list: [12, 34, 45, 9, 8, 90, 3], the list should be rearranged to: [12, 34, 8, 90, 45, 9, 3]. Note: You need to implement this in such a way that the relative order of the even and odd numbers is maintained as in the input list. Good luck :)","solution":"def segregate_even_odd(numbers): Segregates even and odd numbers such that all even numbers come before odd numbers while preserving the relative order. Args: numbers (list): List of integers. Returns: None: The list is modified in place. even_index = 0 for current in range(len(numbers)): if numbers[current] % 2 == 0: # Check if the number is even # If it is even then we move it to the \'even_index\' position numbers.insert(even_index, numbers.pop(current)) even_index += 1"},{"question":"Sarah loves to organize her bookshelf. She has a list of book titles and she wants to sort them alphabetically. However, she prefers to see the book titles in a way that each alternate word in the title is capitalized, starting from the first word. Write a function that takes a list of book titles and returns a new list with the titles sorted and formatted according to Sarah\'s preference. Examples ```python format_books([\\"the great gatsby\\", \\"to kill a mockingbird\\", \\"pride and prejudice\\"]) => [\\"Pride And Prejudice\\", \\"The Great Gatsby\\", \\"To Kill A Mockingbird\\"] format_books([\\"a tale of two cities\\", \\"war and peace\\", \\"the catcher in the rye\\"]) => [\\"A Tale Of Two Cities\\", \\"The Catcher In The Rye\\", \\"War And Peace\\"] ``` # Input - A list of book titles, where each title is a string of words separated by a single space. - Assume the input list will have at least one title, and each title will have at least one word. # Output - A new list of book titles sorted alphabetically, with each title\'s words formatted such that every alternate word is capitalized, starting with the first word. Constraints - The function should preserve the order of the words in each title while sorting the entire list alphabetically based on the titles.","solution":"def alternate_capitalization(title): words = title.split() formatted_words = [word.capitalize() if i % 2 == 0 else word.lower() for i, word in enumerate(words)] return \' \'.join(formatted_words) def format_books(titles): sorted_titles = sorted(titles) formatted_titles = [alternate_capitalization(title) for title in sorted_titles] return formatted_titles"},{"question":"You are given an array of N integers, and you need to perform a series of Q queries on this array. Each query can be of the following two types: 1. Update the value at a specific index in the array. 2. Calculate the maximum value in a subarray range. Implement the following operations: - **Update Operation**: Update the value at index i in the array to x. - **Range Maximum Query**: Find the maximum value in the subarray from index l to r (inclusive). -----Input----- - The first line of the input contains two integers N and Q ― the number of elements in the array and the number of queries, respectively. - The second line contains N space-separated integers, representing the initial elements of the array. - The next Q lines each describe a query in one of the following formats: - `1 i x` ― This means update the element at index i (0-based index) in the array to x. - `2 l r` ― This means print the maximum value in the subarray from index l to index r (inclusive). -----Output----- For each query of type `2 l r`, print a single line containing the maximum value in the specified subarray. -----Constraints----- - 1 le N le 10^5 - 1 le Q le 10^5 - 0 le i < N - 0 le l le r < N - 1 le array elements, x le 10^9 -----Example Input----- 5 5 1 3 5 7 9 2 1 3 1 2 6 2 1 3 1 4 0 2 0 4 -----Example Output----- 7 7 7 -----Note----- In the example, the initial array is [1, 3, 5, 7, 9]. - After the first query `2 1 3`, the subarray [3, 5, 7] has a maximum value of 7. - After the update query `1 2 6`, the array becomes [1, 3, 6, 7, 9]. - After the second query `2 1 3`, the subarray [3, 6, 7] has a maximum value of 7. - After the update query `1 4 0`, the array becomes [1, 3, 6, 7, 0]. - After the final query `2 0 4`, the entire array has a maximum value of 7.","solution":"from typing import List, Tuple class SegmentTree: def __init__(self, data: List[int]): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data: List[int]): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update(self, index: int, value: int): pos = index + self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_max(self, left: int, right: int) -> int: res = float(\'-inf\') left += self.n right += self.n + 1 while left < right: if left % 2 == 1: res = max(res, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 res = max(res, self.tree[right]) left //= 2 right //= 2 return res def process_queries(n: int, queries: List[Tuple[int, ...]], data: List[int]) -> List[int]: seg_tree = SegmentTree(data) result = [] for query in queries: if query[0] == 1: _, i, x = query seg_tree.update(i, x) elif query[0] == 2: _, l, r = query result.append(seg_tree.range_max(l, r)) return result"},{"question":"You are tasked with implementing a function that checks if a given binary tree is a valid binary search tree (BST). A BST is defined as a binary tree in which for every node, the value of all the nodes in its left subtree is lesser or equal to the node\'s value and the value of all the nodes in its right subtree is greater or equal to the node\'s value. Your function should take the root of the binary tree as an input and return true if the binary tree is a valid binary search tree, otherwise false. For example: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right # Example 1: # Input: root = TreeNode(2, TreeNode(1), TreeNode(3)) # Output: True # Explanation: The binary tree is: # 2 # / # 1 3 # which is a valid BST. # Example 2: # Input: root = TreeNode(5, TreeNode(1), TreeNode(4, TreeNode(3), TreeNode(6))) # Output: False # Explanation: The binary tree is: # 5 # / # 1 4 # / # 3 6 # which is not a valid BST because node 4 has nodes in its right subtree (3) having value lesser than its own value. ``` Special Note --> The TreeNode class contains three fields: value, left, and right.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_valid_bst(root: TreeNode) -> bool: def validate(node, low=float(\'-inf\'), high=float(\'inf\')): if not node: return True if not (low <= node.value <= high): return False return validate(node.left, low, node.value) and validate(node.right, node.value, high) return validate(root)"},{"question":"A logistics company needs to calculate the total distance their delivery drone fleet covers in a week. They have paths defined in a circular manner where each city is visited at least once. Your task is to determine the minimum distance needed to visit each city exactly once and return to the starting city. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of cities. - Then follows N lines, each containing N integers where the j^{th} integer of the i^{th} row represents the distance between city i and city j. -----Output:----- For each test case, output an integer representing the minimum distance to visit all the cities starting and ending at the first city. -----Constraints----- - 1 leq T leq 10 - 2 leq N leq 10 -----Sample Input:----- 2 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 3 0 29 20 29 0 15 20 15 0 -----Sample Output:----- 80 64","solution":"from itertools import permutations def travelling_salesman_problem(dist, N): # Generate all permutations of cities except the first ones as the first city is fixed cities = list(range(1, N)) min_path = float(\'inf\') for perm in permutations(cities): current_path_weight = 0 # Starting from the first city k = 0 for j in perm: current_path_weight += dist[k][j] k = j # Returning to the first city current_path_weight += dist[k][0] min_path = min(min_path, current_path_weight) return min_path def minimum_distance(T, test_cases): results = [] for i in range(T): N, distances = test_cases[i] result = travelling_salesman_problem(distances, N) results.append(result) return results"},{"question":"Your task is to implement a function that checks the validity of a \\"pascal token.\\" A pascal token is a string that adheres to stringent composition rules which you need to validate. A token is only valid if it strictly follows these rules: - It can only contain uppercase alphabets (A-Z) and digits (0-9). - It should start with an uppercase alphabet. - It must be of length exactly 6. Write a function `is_valid_token` that accepts a string and returns \\"YES\\" if it is a valid pascal token, and \\"NO\\" otherwise. -----Input:----- - First line will contain an integer T, number of testcases. Then the testcases follow. - Each testcase consists of a single line of input, which has a string of any length. -----Output:----- For each testcase, output in a single line \\"YES\\" or \\"NO\\". -----Constraints----- - 1 leq T leq 100 - String\'s length can range from 1 to 100. -----Sample Input:----- 3 A12345 B6789F 123456 -----Sample Output:----- YES YES NO -----EXPLANATION:----- - The first input `A12345` is composed of uppercase alphabet and digits, starts with an alphabet, and its length is 6, hence valid. - The second input `B6789F` meets all rules as well. - The third input `123456` starts with a digit, hence invalid.","solution":"def is_valid_token(token): Check if the given string is a valid pascal token. A valid pascal token must: 1. Be exactly 6 characters long. 2. Contain only uppercase alphabets (A-Z) and digits (0-9). 3. Start with an uppercase alphabet. Parameters: token (str): The string to check for validity. Returns: str: \\"YES\\" if the token is valid, \\"NO\\" otherwise. if len(token) == 6 and token[0].isalpha() and token[0].isupper() and all(c.isdigit() or c.isupper() for c in token): return \\"YES\\" return \\"NO\\" def process_tokens(tokens): Processes a list of tokens and returns their validity. Parameters: tokens (list of str): The list of tokens to check. Returns: list of str: List of \\"YES\\" or \\"NO\\" for each token. return [is_valid_token(token) for token in tokens]"},{"question":"You are given a list of `n` integers. In one move, you can select any two adjacent integers and remove the greater of the two. Your task is to find the minimum number of moves required to make the list strictly increasing. Output the answer for each test case. -----Input----- The first line of input contains one integer `t` (1 leq t leq 10^4) — the number of test cases. Each of the following `t` lines contains an integer n (2 leq n leq 10^5) — the number of integers in the list, followed by the list of `n` integers. It is guaranteed that the sum of all `n` across all test cases does not exceed 10^5. -----Output----- For each test case, print the minimum number of moves to make the list strictly increasing. -----Example----- Input 3 5 5 4 3 2 1 4 2 2 2 2 6 1 2 3 3 4 5 Output 4 3 1 -----Note----- In the first test case, 4 moves are required to remove each number to make the remaining list strictly increasing: Remove 5, then 4, then 3, and finally 2, leaving just a single integer 1. In the second test case, 3 moves are required to remove numbers to make the remaining list strictly increasing: Remove any three of the 2s, leaving the last one behind. In the third test case, only 1 move is needed to remove one of the occurrences of 3 in the list to make it strictly increasing.","solution":"def min_moves_to_increasing(n, numbers): moves = 0 for i in range(n - 1): if numbers[i] >= numbers[i + 1]: moves += 1 return moves def process_test_cases(t, test_cases): results = [] for test_case in test_cases: n, numbers = test_case result = min_moves_to_increasing(n, numbers) results.append(result) return results"},{"question":"Given an array of n integers, where each integer represents the height of a block, we want to design a system that forms structures by stacking these blocks on top of each other. The system must follow these rules: 1. A block can only be placed on top of another block if its height is less than or equal to the block below it. 2. You can rearrange the blocks in any order. Your task is to determine the maximum number of structures that can be formed, where each structure must have at least one block. -----Input----- The first line contains the integer n (1 ≤ n ≤ 100,000) — the number of blocks. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1,000,000) — the heights of the blocks. -----Output----- Print a single integer — the maximum number of structures that can be formed. -----Examples----- Input 5 5 3 2 1 4 Output 5 Input 7 4 3 7 2 3 1 5 Output 2 -----Note----- In the first example, each block can form its own structure resulting in 5 structures, since they can be arranged in any order. In the second example, the blocks can be rearranged to form two structures: [4, 3, 2, 1] and [7, 5, 3].","solution":"def max_structures(n, heights): Returns the maximum number of structures that can be formed with given blocks heights. from collections import Counter # Count the frequency of each height height_counts = Counter(heights) # Since a block can only be placed on top of another block if its height is less than or equal, # the maximum number of structures is determined by the most frequent height. max_structures = max(height_counts.values()) return max_structures"},{"question":"You are given a list of integers representing the binary bits of a number. Your task is to find the minimum number of bit flips required to make all the bits in the list either all 0s or all 1s. The function signature should be: ```python def min_bit_flips(bits: List[int]) -> int: ``` **Examples:** ```python min_bit_flips([0, 1, 0, 1, 1, 0]) #returns # 3 min_bit_flips([1, 1, 0, 0, 1]) #returns # 2 min_bit_flips([0, 0, 0, 0]) #returns # 0 min_bit_flips([1, 1, 1, 1, 1]) #returns # 0 ``` **Explanation:** - In the first example, the minimum flips required to make all bits either 0 or 1 can be achieved by flipping the 2nd, 4th, and 5th bits (indexes 1, 3, and 4) to 0, or flipping the 1st, 3rd, and 6th bits (indexes 0, 2, and 5) to 1. - In the second example, you can flip the 3rd and 4th bits to 1, or flip the 1st and 2nd bits to 0. - The third and fourth examples are already uniform, so no flips are needed. **Note:** - The input list will always contain at least one element. - You only need to return the minimum number of flips required.","solution":"from typing import List def min_bit_flips(bits: List[int]) -> int: Returns the minimum number of bit flips required to make all bits in the list either all 0s or all 1s. # Calculate number of 0s and number of 1s count_0 = bits.count(0) count_1 = len(bits) - count_0 # The minimum flips required will be the minimum of the counts return min(count_0, count_1)"},{"question":"You are given an array of integers and a target sum. Your task is to determine the number of unique pairs of integers in the array that add up to the target sum. Two pairs are considered unique if at least one element of one pair is different from another. Write a function that takes in two parameters: 1. A list of integers `nums` 2. An integer `target` The function should return the number of unique pairs that add up to the target sum. Example 1: Input: nums = [1, 3, 2, 2, 3], target = 4 Output: 2 Explanation: The pairs that add up to 4 are (1, 3) and (2, 2). Note that (3, 1) is not a different pair than (1, 3) and is not counted again. Example 2: Input: nums = [1, 1, 1, 1], target = 2 Output: 1 Explanation: The only pair that adds up to 2 is (1, 1). Notes: - The input list `nums` will have at most 1000 elements. - Each element in the list `nums` will be in the range of -1000 to 1000. - Each unique pair should be counted only once, even if there are duplicate elements in the array.","solution":"def unique_pairs(nums, target): Returns the number of unique pairs in the list that add up to the target sum. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"Chef is participating in a programming contest where he has to solve a suspiciously tricky problem on matrices. Being the smart coder, Chef seeks your help again to solve it. In this problem, Chef is given an N x N matrix of integers. Chef needs to perform a series of Q queries on this matrix. Each query can be of three types: 1. **Update**: Update the value at a specific position (i, j) in the matrix. 2. **Row Sum**: Calculate the sum of all elements in a specified row. 3. **Column Sum**: Calculate the sum of all elements in a specified column. Your task is to handle these queries efficiently and return the results for the \\"Row Sum\\" and \\"Column Sum\\" query types. # Input Format - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers N and Q, where N is the dimension of the matrix and Q is the number of queries. - The next N lines contain N integers each, representing the matrix. - The following Q lines contain one of the following queries: - `1 i j x` - Update the element at matrix position (i, j) to x. - `2 i` - Return the sum of elements in the i-th row. - `3 i` - Return the sum of elements in the i-th column. # Output Format For each test case, for every \\"Row Sum\\" or \\"Column Sum\\" query, output the resulting sum on a new line. # Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ Q ≤ 10000 - 1 ≤ matrix[i][j], x ≤ 10^9 - 1 ≤ i, j ≤ N # Example **Input:** ``` 1 3 5 1 2 3 4 5 6 7 8 9 3 1 2 2 1 2 2 10 2 2 3 2 ``` **Output:** ``` 12 15 20 24 ``` **Explanation:** - Initial matrix: ``` 1 2 3 4 5 6 7 8 9 ``` - Column sum of the first column: 1 + 4 + 7 = 12 - Row sum of the second row: 4 + 5 + 6 = 15 - Update matrix at (2, 2) to 10: ``` 1 2 3 4 10 6 7 8 9 ``` - New row sum of the second row: 4 + 10 + 6 = 20 - Column sum of the second column: 2 + 10 + 8 = 20","solution":"def handle_queries(matrix, queries): results = [] n = len(matrix) # Calculate row sums and column sums row_sums = [sum(row) for row in matrix] col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)] for query in queries: q = query.split() if q[0] == \'1\': # Update i, j, x = int(q[1]) - 1, int(q[2]) - 1, int(q[3]) old_value = matrix[i][j] matrix[i][j] = x row_sums[i] += x - old_value col_sums[j] += x - old_value elif q[0] == \'2\': # Row Sum i = int(q[1]) - 1 results.append(row_sums[i]) elif q[0] == \'3\': # Column Sum i = int(q[1]) - 1 results.append(col_sums[i]) return results def chef_and_matrices(T, test_cases): results = [] for case in test_cases: N, Q = case[\'N\'], case[\'Q\'] matrix = case[\'matrix\'] queries = case[\'queries\'] results.extend(handle_queries(matrix, queries)) return results"},{"question":"Given a string s, remove the adjacent duplicate characters recursively. The final output should not have any adjacent duplicates. For instance, if you remove two adjacent \'a\'s then two adjacent \'b\'s are created and should be removed recursively. You need to perform this process recursively till no adjacent duplicates are present. Return the final string after all possible removals. Example 1: Input: s = \\"abbaca\\" Output: \\"ca\\" Explanation: Step 1: \\"abbaca\\" -->(remove \'bb\')--> \\"aaca\\" Step 2: \\"aaca\\" -->(remove \'aa\')--> \\"ca\\" Example 2: Input: s = \\"azxxzy\\" Output: \\"ay\\" Explanation: Step 1: \\"azxxzy\\" -->(remove \'xx\')--> \\"azzy\\" Step 2: \\"azzy\\" -->(remove \'zz\')--> \\"ay\\" Note: 1 <= s.length <= 100000 s consists only of lowercase English letters.","solution":"def remove_adjacent_duplicates(s): stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"In Python, the basic loop statements are `for` and `while`. The `for` loop is used to iterate over a sequence (such as a list, tuple, string, or range), and the `while` loop repeats as long as a specified condition is true. Here is an example of a `for` loop that prints out each letter in a string: ```python def print_letters(word): for letter in word: print(letter) ``` And a `while` loop that counts down from 5 to 1: ```python def countdown(n): while n > 0: print(n) n -= 1 ``` Task: Write a function `sum_multiples` that takes two arguments, `num1` and `num2`, and returns the sum of all the multiples of `num1` that are less than `num2`. If there are no multiples of `num1` below `num2`, the function should return 0. You can use either a `for` loop or a `while` loop to solve this task. # Examples: ```python sum_multiples(3, 10) # Returns 18 (3 + 6 + 9) sum_multiples(5, 20) # Returns 30 (5 + 10 + 15) sum_multiples(8, 16) # Returns 8 (8) sum_multiples(7, 5) # Returns 0 (No multiples of 7 below 5) ``` # Note: When you are finished, click \\"Run Tests\\" to verify your code works correctly. After that, you can submit your solution.","solution":"def sum_multiples(num1, num2): Returns the sum of all the multiples of num1 that are less than num2. Parameters: num1 (int): The multiple number. num2 (int): The upper limit (exclusive). Returns: int: The sum of multiples of num1 below num2. sum_of_multiples = 0 for i in range(num1, num2, num1): sum_of_multiples += i return sum_of_multiples"},{"question":"A company offers a special bonus payout to its employees based on their performance scores. After every project completion, the scores of all employees are adjusted. Additionally, the company may decide to increase the score of all employees below a certain threshold to match that threshold. Your task is to determine the final scores of all employees after a series of score updates and adjustments. -----Input----- The first line contains a single integer n (1 le n le 2 cdot 10^{5}) — the number of employees. The next line contains n integers s_1, s_2, ..., s_n (0 le s_i le 10^{9}) — the initial scores of the employees. The next line contains a single integer m (1 le m le 2 cdot 10^{5}) — the number of score change events. Each of the next m lines contains a single event. The events are given in chronological order. Each event is described as either 1 e x (1 le e le n, 0 le x le 10^{9}), or 2 x (0 le x le 10^{9}). In the first case, the score of the e-th employee is updated to x. In the second case, all employees with scores less than x have their scores increased to x. -----Output----- Print n integers — the scores of all employees after all events. -----Examples----- Input 3 10 20 30 3 1 1 25 2 15 1 3 35 Output 25 20 35 Input 4 5 7 9 11 4 2 8 1 2 10 2 12 1 1 12 Output 12 12 12 12 -----Note----- In the first example the scores change as follows: 10 20 30 → 25 20 30 → 25 20 30 → 25 20 35 In the second example the scores change as follows: 5 7 9 11 → 8 8 9 11 → 8 10 9 11 → 12 12 12 12 → 12 12 12 12","solution":"def final_scores(n, scores, m, events): # Initialize the current minimum threshold min_threshold = 0 for event in events: parts = event.split() if parts[0] == \'1\': e = int(parts[1]) - 1 x = int(parts[2]) scores[e] = x elif parts[0] == \'2\': x = int(parts[1]) min_threshold = max(min_threshold, x) # Apply minimum threshold to all scores final_scores = [max(score, min_threshold) for score in scores] return final_scores"},{"question":"In a faraway galaxy, there is a planet called Zog that contains unique minerals stored in rows of mines. The inhabitants of Zog want to collect these minerals in the most efficient manner. Each mine contains a certain amount of minerals, and you are given an array representing the amount of minerals in each mine. The inhabitants can collect minerals from contiguous subarrays only. Your task is to determine the sum of the maximum sum subarray for each query. -----Input----- Input starts with an integer T, the number of test cases. Each test case begins with an integer N, the length of the array, followed by N integers representing the amount of minerals in each mine. -----Output----- For each test case, output the sum of the maximum sum subarray. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - -1000 ≤ Mineral values ≤ 1000 -----Sample Input----- 2 4 1 -3 2 1 3 -2 1 -3 -----Sample Output----- 3 1 -----Explanation----- In the first test case, the maximum sum subarray is [2, 1], which sums up to 3. In the second test case, the maximum sum subarray is [1], which sums up to 1.","solution":"def max_subarray_sum(arr): Given an array, returns the sum of the maximum sum subarray. max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(test_cases): Processes multiple test cases and returns results for each test case. results = [] for case in test_cases: N, array = case results.append(max_subarray_sum(array)) return results"},{"question":"Write a function that takes a string as input and checks if it is an anagram of a palindrome. If the string is an anagram of a palindrome, return `true`, otherwise return `false`. If the input is not a valid string, return `\\"Not valid\\"`. A word is an anagram of a palindrome if it can be rearranged to form a palindrome. For instance, `\\"civic\\"` and `\\"ivicc\\"` are anagrams of a palindrome whereas `\\"hello\\"` is not. # Examples ```plaintext \\"civic\\" => true \\"ivicc\\" => true \\"hello\\" => false \\"racecar\\" => true \\"racerac\\" => true \\"world\\" => false 12345 => \\"Not valid\\" \\"\\" => \\"Not valid\\" null => \\"Not valid\\" ```","solution":"def is_anagram_of_palindrome(s): Check if a given string is an anagram of a palindrome. :param s: Input string :return: True if the string is an anagram of a palindrome, otherwise False. If the input is not a valid string, return \\"Not valid\\". if not isinstance(s, str) or not s: return \\"Not valid\\" from collections import Counter count = Counter(s) odd_count = sum(1 for value in count.values() if value % 2 != 0) return odd_count <= 1"},{"question":"Given a grid with m rows and n columns, calculate the number of unique paths from the top-left corner to the bottom-right corner. You can only move to the right or down at any point in time. Implement a function uniquePaths(m, n) that takes two integers representing the grid\'s dimensions and returns the number of unique paths. Assume m and n are positive integers greater than or equal to 1. If either m or n is equal to 1, there is only one path from the top-left to the bottom-right corner of the grid. Example: ``` uniquePaths(3, 2) == 3 ``` Explanation: The 3 unique paths are: 1. Right -> Right -> Down 2. Right -> Down -> Right 3. Down -> Right -> Right Example: ``` uniquePaths(7, 3) == 28 ``` Explanation: The number of unique paths from top-left to bottom-right in a 7 by 3 grid is 28. Consider using dynamic programming to solve this problem efficiently for larger grids.","solution":"def uniquePaths(m, n): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. # Create a 2D array for storing the number of paths to each cell dp = [[1] * n for _ in range(m)] # Start filling the dp array from cell (1,1) for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[-1][-1]"},{"question":"Convert Roman to Integer Given a string representing a Roman numeral, convert it to an integer. The input string is guaranteed to be a valid Roman numeral from the set {\\"I\\", \\"V\\", \\"X\\", \\"L\\", \\"C\\", \\"D\\", \\"M\\"}. The Roman numeral system works differently than the usual way of writing numbers in our decimal system. Roman numerals are usually written largest to smallest from left to right. However, a numeral like \\"IV\\" stands for 4, not 6. The rules for converting a Roman numeral to an integer are as follows: 1. If a smaller numeral appears before a larger numeral, subtract the smaller numeral. 2. Otherwise, add all numerals together. Here is the value of each Roman numeral: * I -> 1 * V -> 5 * X -> 10 * L -> 50 * C -> 100 * D -> 500 * M -> 1000 For example, the Roman numeral \\"MCMXCIV\\" should return 1994. (1000 + 900 + 90 + 4) Implement a function: ```python def roman_to_integer(s: str) -> int: pass ``` # Example ```python assert roman_to_integer(\\"III\\") == 3 assert roman_to_integer(\\"IV\\") == 4 assert roman_to_integer(\\"IX\\") == 9 assert roman_to_integer(\\"LVIII\\") == 58 assert roman_to_integer(\\"MCMXCIV\\") == 1994 ``` # Constraints * Input string length is between 1 and 15. * The provided input will always be a valid Roman numeral. Perform the necessary operations ensuring the runtime complexity is as efficient as possible, especially for the larger inputs up to the length constraint.","solution":"def roman_to_integer(s: str) -> int: Convert a Roman numeral to an integer. :param s: A string representing the Roman numeral. :return: The integer representation of the Roman numeral. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_values[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Chef\'s Marathon Training... Chef is training for a marathon and needs to track his weekly running distance progress to ensure he\'s improving. Chef runs a specific route multiple times each week and wants an automated way to calculate his total distance for each week, given his daily running distances. You need to design a function that takes in a list of integers representing Chef\'s daily running distances for one week and returns the total distance Chef ran that week. Each week always consists of 7 measurements (one for each day of the week). To make it a bit more interesting, Chef also wants to know if his progress meets his weekly goal of running at least 42 kilometers. If his total weekly distance is 42 kilometers or more, return \\"Goal Achieved!\\". If it\'s less than 42 kilometers, return \\"Goal Not Achieved!\\". -----Input----- - A single line containing 7 space-separated integers representing the distances Chef ran on each day of the week from Monday to Sunday. -----Output----- - A single line containing the total distance Chef ran that week. - Additionally, a second line stating either \\"Goal Achieved!\\" or \\"Goal Not Achieved!\\" depending on whether Chef\'s total running distance meets or exceeds 42 kilometers. -----Constraints----- - Each distance is a non-negative integer and can be as large as necessary to represent realistic running distances for a day. -----Example Input----- 5 6 7 8 4 10 2 -----Example Output----- 42 Goal Achieved! -----Example Input----- 3 4 5 3 4 2 1 -----Example Output----- 22 Goal Not Achieved! -----Explanation----- In the first example, Chef\'s total running distance for the week is exactly 42 kilometers, so the goal is achieved. In the second example, Chef\'s total distance is 22 kilometers, which is less than the goal of 42 kilometers.","solution":"def weekly_running_progress(distances): Calculates total weekly running distance and checks if the goal of 42 kilometers is achieved. Args: - distances (list of int): List of 7 integers representing daily running distances. Returns: - tuple: (total distance (int), goal status (str)) total_distance = sum(distances) if total_distance >= 42: return total_distance, \\"Goal Achieved!\\" else: return total_distance, \\"Goal Not Achieved!\\""},{"question":"You\'re tasked with organizing a conference and need to prepare the different tracks (sessions) attendees can join. Each track consists of a presenter and attendees. Each presenter sends an email with a new topic they will discuss along with the maximum number of attendees they will accommodate. Your job is to allocate available rooms to each topic based on the number of attendees these rooms can hold. Create a function that receives an array of room capacities and an array of presenter requests (each request composed of a topic name and the maximum attendees). The function should return an array indicating which room has been allocated to each topic. ```python def allocate_rooms(room_capacities, presenter_requests): pass ``` # Input - `room_capacities`: a list of integers representing the maximum number of attendees each room can accommodate. - `presenter_requests`: an array of tuples, where each tuple contains: - `topic` (string): the name of the topic. - `max_attendees` (int): the maximum number of attendees the presenter will accommodate. # Output - The function should return a list of integers indicating the room indices allocated to each topic in order of the presenter requests. If a room is not available (either because its capacity is exceeded or it\'s already allocated), return `-1` for that topic. # Example ```python room_capacities = [100, 150, 200] presenter_requests = [(\\"AI Trends\\", 120), (\\"Data Science\\", 90), (\\"Cloud Computing\\", 150)] # Expecting room 1 (capacity 150) for \\"AI Trends\\", room 0 (capacity 100) for \\"Data Science\\", # and room 2 (capacity 200) for \\"Cloud Computing\\". print(allocate_rooms(room_capacities, presenter_requests)) # Output: [1, 0, 2] ``` # Constraints - Rooms can only be allocated once. - If a request\'s maximum attendees exceed all available room capacities, return `-1` for that request.","solution":"def allocate_rooms(room_capacities, presenter_requests): Allocates rooms to presenter requests based on available room capacities. Args: room_capacities (list of int): list of maximum number of attendees each room can hold. presenter_requests (list of tuples): list of tuples, each containing the topic name (str) and maximum attendees (int). Returns: list of int: List of room indices allocated to each topic. If a room cannot be allocated, return -1 for that topic. allocation = [-1] * len(presenter_requests) allocated_rooms = set() for i, (_, max_attendees) in enumerate(presenter_requests): for j, capacity in enumerate(room_capacities): if j not in allocated_rooms and max_attendees <= capacity: allocation[i] = j allocated_rooms.add(j) break return allocation"},{"question":"Given a large NxN grid where N can be up to 10^5, each cell (i, j) containing a unique positive integer in the range 1 to N^2. You need to process q queries on this grid. Each query provides four integers x1, y1, x2, y2 which define a subgrid. For each query, you are to find the sum of the grid values in the subgrid defined by those coordinates. The values can be very large, so the answer needs to be returned modulo 10^9 + 7. The provided subgrid is defined as follows: starting at (x1, y1) and ending at (x2, y2) inclusive. # Input # - The first line contains two integers N and q (1 ≤ N ≤ 10^5, 1 ≤ q ≤ 10^4) — the size of the grid and the number of queries, respectively. - The next line contains N^2 space-separated integers between 1 and N^2 inclusive, representing the grid values in row-major order. - The next q lines each contain four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ N, 1 ≤ y1 ≤ y2 ≤ N), defining the subgrid for that query. # Output # - Print exactly q lines — for each query, print the sum of the values in the defined subgrid modulo 10^9 + 7. # Example # Input ``` 4 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1 1 2 2 1 1 4 4 2 2 3 3 ``` Output ``` 14 136 52 ``` # Note # - In the first query, the subgrid is: begin{array}{|c|c|} hline 1 & 2 hline 5 & 6 hline end{array} The sum is 1 + 2 + 5 + 6 = 14. - In the second query, the subgrid is: begin{array}{|c|c|c|c|} hline 1 & 2 & 3 & 4 hline 5 & 6 & 7 & 8 hline 9 & 10 & 11 & 12 hline 13 & 14 & 15 & 16 hline end{array} The sum is 136. - In the third query, the subgrid is: begin{array}{|c|c|} hline 6 & 7 hline 10 & 11 hline end{array} The sum is 6 + 7 + 10 + 11 = 34 which is incorrect in this explanation. It should be 52 according to the positional data. Please re-check the positional index calculations during actual query operations.","solution":"def create_prefix_sum(grid, n): MOD = 10**9 + 7 prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): prefix_sum[i][j] = (grid[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]) % MOD return prefix_sum def compute_subgrid_sum(prefix_sum, x1, y1, x2, y2): MOD = 10**9 + 7 return (prefix_sum[x2][y2] - prefix_sum[x1 - 1][y2] - prefix_sum[x2][y1 - 1] + prefix_sum[x1 - 1][y1 - 1]) % MOD def process_queries(n, q, grid_values, queries): MOD = 10**9 + 7 grid = [grid_values[i * n:(i + 1) * n] for i in range(n)] prefix_sum = create_prefix_sum(grid, n) results = [] for query in queries: x1, y1, x2, y2 = query result = compute_subgrid_sum(prefix_sum, x1, y1, x2, y2) results.append(result) return results"},{"question":"Data Enthusiast Emma has a peculiar coding challenge for her fellow developers. She provides a list of integers and asks her friends to modify it based on a series of instructions. Each instruction consists of a command and a value. There are three types of commands: - \\"ADD x\\": Add the value x to each element in the list. - \\"MUL x\\": Multiply each element in the list by the value x. - \\"SET x\\": Set each element in the list to the value x. Emma then asks her friends to compute the sum of the elements in the modified list for each sequence of instructions she provides. -----Input:----- - An integer L that represents the length of the list. The list will initially contain integers from 1 to L (i.e., [1, 2, 3, ..., L]). - An integer Q representing the number of queries. - Next Q lines each contain a command and a value (space-separated), representing the instructions. -----Output:----- For each query, output the sum of the elements present in the list after applying the given instruction. -----Constraints----- - 1 leq L, Q leq 100000 - 1 leq x leq 1000 -----Sample Input:----- 5 4 ADD 2 MUL 3 SET 4 ADD 1 -----Sample Output:----- 25 75 20 25","solution":"def modify_list(L, queries): Modify the list of integers based on a series of instructions and return the sums of the elements in the list after each instruction. Parameters: L (int): The length of the list (initially contains integers from 1 to L). queries (list): A list of tuples where each tuple contains a command and a value. Returns: list: A list of sums after applying each instruction. # Initial list elements = list(range(1, L + 1)) results = [] for command, value in queries: if command == \\"ADD\\": elements = [x + value for x in elements] elif command == \\"MUL\\": elements = [x * value for x in elements] elif command == \\"SET\\": elements = [value] * L results.append(sum(elements)) return results def parse_input(input_string): Parse input string into L, Q, and queries Parameters: input_string (str): Multi-line input string Returns: tuple: L, Q, and list of queries lines = input_string.strip().split(\\"n\\") L = int(lines[0]) Q = int(lines[1]) queries = [] for i in range(2, 2 + Q): parts = lines[i].split() queries.append((parts[0], int(parts[1]))) return L, Q, queries"},{"question":"You are given an `input_list` which is a list of positive integers. Your task is to write a function that finds a pair of integers in the list that add up to a given `target_sum`. Return the pair of integers as a tuple. If no such pair exists, return `None`. The function should have the following signature: ```python def find_pair_with_sum(input_list: List[int], target_sum: int) -> Optional[Tuple[int, int]]: ``` # Examples ```python find_pair_with_sum([1, 2, 3, 4, 5], 9) # returns (4, 5) find_pair_with_sum([1, 2, 3, 4, 5], 8) # returns (3, 5) find_pair_with_sum([1, 2, 3, 4, 5], 10) # returns None ``` # Constraints - The input list will have at least two elements. - All elements in the list are positive integers. - If multiple pairs are valid, return any one of them. - The elements in the returned pair should be in the order they appear in the original list. # Notes - You should implement an efficient solution with a time complexity better than O(n^2). - Use appropriate data structures to achieve the desired efficiency.","solution":"from typing import List, Tuple, Optional def find_pair_with_sum(input_list: List[int], target_sum: int) -> Optional[Tuple[int, int]]: Find a pair of integers in \'input_list\' that add up to \'target_sum\'. :param input_list: List of positive integers :param target_sum: The target sum to find in the list :return: A tuple of two integers that add up to the target_sum, or None if no such pair exists seen = {} # Dictionary to store numbers and their indices for index, number in enumerate(input_list): complement = target_sum - number if complement in seen: return (complement, number) seen[number] = index return None"},{"question":"Sum of digits in a string Given a string of digits, your task is to write a function that extracts all the individual digits, sums them together, and returns the resulting sum. # Function Signature ```python def sum_of_digits(s: str) -> int: ``` # Input - `s` (a string): A string of digits (0-9) with length `1 <= len(s) <= 10^5`. # Output - An integer representing the sum of all the digits in the input string. # Example ```python sum_of_digits(\\"1234\\") # returns 10 because 1 + 2 + 3 + 4 = 10 sum_of_digits(\\"0000\\") # returns 0 because 0 + 0 + 0 + 0 = 0 sum_of_digits(\\"987\\") # returns 24 because 9 + 8 + 7 = 24 ``` # Constraints - The input string will only contain the digits 0-9. - You may assume there are no leading zeroes in the string except for the number `0` itself. # Notes Write your function in such a way that it is efficient and handles the maximum possible input size efficiently.","solution":"def sum_of_digits(s: str) -> int: Returns the sum of all digits in the input string. Parameters: s (str): A string of digits (0-9). Returns: int: Sum of all digits in the string. return sum(int(char) for char in s)"},{"question":"You are given a sentence where each word is encrypted by reversing the order of its characters. Your task is to decrypt the sentence by reversing the characters of each word back to their original order, without changing their positions in the sentence. Examples ``` input: \\"sihT si na elpmaxe\\" output: \\"This is an example\\" input: \\"esreveR gnirts\\" output: \\"Reverse string\\" input: \\"I evol gnimmargorp\\" output: \\"I love programming\\" input: \\"htgnel fo enil\\" output: \\"length of line\\" input: \\"gnidoc si nuf\\" output: \\"coding is fun\\" ``` Function Signature ```python def decrypt_sentence(sentence: str) -> str: pass ``` # Constraints - The input string will contain only lowercase, uppercase alphabets and spaces. - The length of the input string will not exceed 1000 characters. - There will be no leading or trailing spaces. - The words in the input string are separated by a single space.","solution":"def decrypt_sentence(sentence: str) -> str: Decrypts a sentence where each word is encrypted by reversing the order of its characters. Args: sentence (str): The encrypted sentence. Returns: str: The decrypted sentence with the words in their original order. decrypted_words = [word[::-1] for word in sentence.split()] return \' \'.join(decrypted_words)"},{"question":"Write a function that determines if a given string is a scrambled palindrome. A scrambled palindrome is a string that can be rearranged to form a palindrome. Your function should return `True` if the string is a scrambled palindrome and `False` otherwise. A palindrome reads the same forwards and backwards (e.g., \\"radar\\", \\"level\\"). For instance, \\"carrace\\" can be rearranged to \\"racecar\\", hence it is a scrambled palindrome. Consider the following points: - The function should be case-insensitive (e.g., \\"Aa\\" should be considered a match). - Only consider alphabetical characters and ignore spaces, punctuation, and digits. Example: - `is_scrambled_palindrome(\\"Tact Coa\\")` should return `True` (\\"tacocat\\" is a palindrome). - `is_scrambled_palindrome(\\"abcabc\\")` should return `True` (\\"abcabc\\" can rearrange to \\"abccba\\", a palindrome). - `is_scrambled_palindrome(\\"hello\\")` should return `False` (cannot rearrange to form a palindrome). Note: - You may assume the input string is non-empty and consists of a mix of alphabetical characters, spaces, and punctuation. - Optimize your function for performance, considering both time and space complexities.","solution":"from collections import Counter import re def is_scrambled_palindrome(s): Determines if the given string is a scrambled palindrome. Only considers alphabetical characters, case insensitive. # Remove non-alphabetical characters and convert to lowercase cleaned_str = re.sub(r\'[^a-zA-Z]\', \'\', s).lower() # Count the frequency of each character char_count = Counter(cleaned_str) # Count the number of characters with an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"# Problem Description An **arithmetic progression (AP)** is a sequence of numbers such that the difference of any two successive members is a constant. The common difference of an arithmetic progression is the difference between any two consecutive terms. For example, in the sequence `3, 6, 9, 12, ...`, the common difference is `3`. Write a function that takes an integer `n` and returns the sum of the first `n` terms of an arithmetic progression starting with `1` and having a common difference of `2`. # Function Signature ```python def sum_of_ap(n: int) -> int: ``` # Input - An integer `n` (1 ≤ n ≤ 10^6), representing the number of terms in the arithmetic progression. # Output - An integer representing the sum of the first `n` terms of the arithmetic progression starting with `1` and having a common difference of `2`. # Examples Example 1: **Input:** ```python n = 5 ``` **Output:** ```python 25 ``` **Explanation:** The first 5 terms of the sequence are `1, 3, 5, 7, 9`. Their sum is `1 + 3 + 5 + 7 + 9 = 25`. Example 2: **Input:** ```python n = 1 ``` **Output:** ```python 1 ``` **Explanation:** The first term of the sequence is `1`. Hence, the sum of the first 1 term is `1`.","solution":"def sum_of_ap(n: int) -> int: Returns the sum of the first n terms of an arithmetic progression starting with 1 and having a common difference of 2. # Formula to find the nth term of an AP: a_n = a + (n - 1) * d # For our AP: a = 1, d = 2 # The nth term is: 1 + (n - 1) * 2 = 2n - 1 # Sum of first n terms of AP: n/2 * (first_term + nth_term) # First term (a) = 1 # nth term (a_n) = 2n - 1 return n * (1 + (2 * n - 1)) // 2"},{"question":"Task Write a function that calculates the minimum number of coins needed to make a specific amount of change using given denominations of coins. Purpose To practice implementing algorithms to solve optimization problems and improve problem-solving skills involving dynamic programming. Intent This task is designed to test your ability to devise an efficient algorithm that minimizes the number of coins needed to provide an exact amount of change. The main challenge is to handle cases where greedy approaches may fail and to properly use dynamic programming techniques. Instructions - Implement a function `min_coins(coins, amount)` that takes a list of coin denominations `coins` (all positive integers) and a target amount `amount` (a positive integer). - The function should return the minimum number of coins needed to make change for the target amount using the given coins. - If it\'s not possible to reach the target amount with the given coin denominations, return -1. - Your solution should aim for an efficient approach, ideally using dynamic programming. # Example ```python def min_coins(coins, amount): # Your implementation here # Test Cases print(min_coins([1, 2, 5], 11)) # Output: 3 (because 11 = 5 + 5 + 1) print(min_coins([2], 3)) # Output: -1 (impossible to make 3 with only 2-coin) print(min_coins([1], 2)) # Output: 2 (because 2 = 1 + 1) ``` # Constraints - The length of `coins` list will be in the range [1, 10]. - The value of each coin in `coins` will be in the range [1, 10000]. - The `amount` will be in the range [1, 5000].","solution":"def min_coins(coins, amount): max_amount = amount + 1 dp = [max_amount] * (amount + 1) dp[0] = 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != max_amount else -1"},{"question":"You are given a list of events represented as integer intervals [start, end], where start represents the start time of the event and end represents the end time of the event. Determine whether a person could attend all events without any overlaps. An event can only be attended if it starts and ends on the same day, and no two events can overlap in time. Write a function that returns `true` if a person can attend all events, or `false` otherwise. Example: Input: events = [[5, 10], [15, 20], [10, 15]] Output: true Explanation: The person can attend the first event from 5 to 10, then the second event from 15 to 20, and the third event from 10 to 15. Example: Input: events = [[5, 10], [6, 12], [15, 20]] Output: false Explanation: The person cannot attend the first event from 5 to 10 and the second event from 6 to 12 without any overlap. Constraints: - 1 <= events.length <= 10^4 - 1 <= events[i][0] < events[i][1] <= 10^5","solution":"def can_attend_all_events(events): Determine whether a person could attend all events without any overlaps. Args: events: List of intervals where each interval is represented as [start, end] Returns: bool: True if a person can attend all events, False otherwise. # Sort the events based on their start times events.sort(key=lambda x: x[0]) # Compare the end time of each event with the start time of the next one for i in range(1, len(events)): if events[i][0] < events[i-1][1]: return False return True"},{"question":"Imagine you are given a network of servers represented as a directed acyclic graph (DAG). Each node in the graph represents a server, and each directed edge between nodes represents a unidirectional communication link from one server to another. Your task is to determine the maximum number of messages that can be sent from the start server to the end server, adhering to the constraints of the network. Create a function `max_messages()` that receives three parameters: 1. `start`: an integer representing the start server. 2. `end`: an integer representing the end server. 3. `connections`: a list of tuples where each tuple `(a, b)` indicates a directed edge from server `a` to server `b`. The function should output an integer representing the maximum number of possible messages that can be sent from the start server to the end server. # Example ``` max_messages(0, 3, [(0, 1), (1, 2), (2, 3), (0, 2), (1, 3)]) = 2 ``` In this example, the paths from server `0` to server `3` are: 1. `0 -> 1 -> 2 -> 3` 2. `0 -> 1 -> 3` 3. `0 -> 2 -> 3` Therefore, there are a total of 3 paths from server `0` to server `3`. # Additional Notes: - The input graph will always be a DAG. - There will always be at least one path from the start server to the end server. - You can assume the servers will be represented as integers starting from 0. # Function Signature ```python def max_messages(start: int, end: int, connections: List[Tuple[int, int]]) -> int: ```","solution":"from collections import defaultdict, deque def max_messages(start, end, connections): Given a directed acyclic graph (DAG) of servers and communication links, this function determines the maximum number of messages that can be sent from the start server to the end server, considering all possible unique paths. # Convert connections to adjacency list for easier access graph = defaultdict(list) for a, b in connections: graph[a].append(b) # Create a memoization dictionary to store the number of paths from each node to the end memo = {} def dfs(node): # If we reach the end server, there is one way to reach it if node == end: return 1 # If we have already computed the number of paths from this node, return it if node in memo: return memo[node] # Initialize count of paths count = 0 # Explore all the neighbors for neighbor in graph[node]: count += dfs(neighbor) # Memoize the result memo[node] = count return count return dfs(start)"},{"question":"A baker is creating cupcakes with varying amounts of sugar. Each cupcake initially contains a certain amount of sugar. The baker wants all the cupcakes to have the same amount of sugar in the end. The baker can either add or remove one unit of sugar from a cupcake at a time. The goal is to determine the minimum number of sugar modifications needed to make all cupcakes have the same amount of sugar. -----Input:----- - First-line will contain N, the number of cupcakes. - Second line will contain N integers, the amount of sugar in each cupcake. -----Output:----- Output a single integer, the minimum number of sugar modifications required. -----Constraints----- - 1 leq N leq 10^5 - 1 leq text{sugar amount in each cupcake} leq 10^5 -----Sample Input:----- 4 4 5 6 7 -----Sample Output:----- 4 -----EXPLANATION:----- To make all cupcakes have the same amount of sugar: - Decrease the sugar in the cupcake with 7 units by 1 (7 -> 6): 1 modification. - Decrease the sugar in the cupcake with 6 units by 1 (6 -> 5): 1 modification. - Increase the sugar in the cupcake with 4 units by 1 (4 -> 5): 1 modification. Total modifications needed: 4. Now all cupcakes have 5 units of sugar.","solution":"def min_sugar_modifications(N, sugar_levels): Returns the minimum number of sugar modifications required to equalize the sugar in all cupcakes. Parameters: N (int): Number of cupcakes sugar_levels (list): List containing the amount of sugar in each cupcake Returns: int: Minimum number of sugar modifications required median = sorted(sugar_levels)[N // 2] return sum(abs(sugar_level - median) for sugar_level in sugar_levels)"},{"question":"You are building a weather monitoring system for a remote scientific research station. The system records temperature readings in degrees Kelvin, but for local use, the staff prefers to work with degrees Celsius. To accommodate this need, you must write a function, `kelvin_to_celsius()`, that converts a temperature in degrees Kelvin to degrees Celsius. For example: `kelvin_to_celsius(300)` should return `26.85`.","solution":"def kelvin_to_celsius(kelvin): Converts a temperature from degrees Kelvin to degrees Celsius. Formula: Celsius = Kelvin - 273.15 Parameters: kelvin (float): Temperature in degrees Kelvin. Returns: float: Temperature in degrees Celsius. return kelvin - 273.15"},{"question":"Write a function that takes a string input composed of lowercase letters and returns a new string where each character is replaced by the \\"mirrored\\" character in the alphabet. The mirrored character is determined by its position relative to the center of the alphabet. For example, \'a\' is mirrored by \'z\', \'b\' by \'y\', \'c\' by \'x\', and so on. The function should maintain any non-letter characters unchanged. Example: - Input: `\\"abcd\\"` - Output: `\\"zyxw\\"` Additional examples: - Input: `\\"hello world!\\"` - Output: `\\"svool dliow!\\"` Note: The alphabetical characters will always be lowercase for all test cases.","solution":"def mirror_string(s): Mirror each character in the input string where \'a\' is replaced by \'z\', \'b\' by \'y\', etc. Non-letter characters remain unchanged. mirrored_string = \\"\\" for char in s: if char.isalpha() and char.islower(): mirrored_char = chr(ord(\'a\') + (ord(\'z\') - ord(char))) mirrored_string += mirrored_char else: mirrored_string += char return mirrored_string"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers from the original list. If the original list contains no prime numbers, the function should return an empty list.","solution":"def is_prime(n): Determines if a given number n is a prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Takes a list of integers and returns a new list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"# Task A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Given a string, determine the minimum number of characters you need to insert into it to make it a palindrome. # Example For `str = \\"race\\"`, the output should be `3`. We can insert 3 characters to make \\"racecar\\" which is a palindrome. # Input/Output - `[input]` string `str` A string that needs to be checked. Constraints: 1 ≤ `str.length` ≤ 50. - `[output]` an integer The minimum number of characters that need to be inserted to make the input string a palindrome.","solution":"def min_insertions_to_palindrome(s): n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1]"},{"question":"Write a function that takes two integers, `start` and `end`, and returns a list of all prime numbers between `start` and `end` (inclusive). The function should ensure that both endpoints are included if they are prime. If no prime numbers exist in the range, return an empty list. Prime numbers are natural numbers greater than 1 that are not divisors of any number except themselves and 1. Example: ```python find_primes(start=10, end=30) # Output: [11, 13, 17, 19, 23, 29] find_primes(start=14, end=16) # Output: [] ```","solution":"def is_prime(number): Helper function to check if a number is prime. if number <= 1: return False for i in range(2, int(number**0.5) + 1): if number % i == 0: return False return True def find_primes(start, end): Returns a list of all prime numbers between start and end (inclusive). primes = [] for num in range(start, end + 1): if is_prime(num): primes.append(num) return primes"},{"question":"You are given a list of non-negative integers representing the amount of money of each house. There are `n` houses in a row and you are a thief who wants to steal money while avoiding alerting the police. The constraint is that you cannot steal from two adjacent houses because it will trigger the alarm. Determine the maximum amount of money you can steal without triggering the alarm. Example 1: Input: nums = [2, 3, 2] Output: 3 Example 2: Input: nums = [1, 2, 3, 1] Output: 4 Example 3: Input: nums = [2, 7, 9, 3, 1] Output: 12 Example 4: Input: nums = [0] Output: 0 Notes: - The array nums will have at least one and at most 100 elements. - Each element in the array will be a non-negative integer that is less than or equal to 1000.","solution":"def rob(nums): Returns the maximum amount of money you can steal without triggering the alarm. # Helper function def rob_line(houses): prev = curr = 0 for money in houses: prev, curr = curr, max(curr, prev + money) return curr if len(nums) == 1: return nums[0] return max(rob_line(nums[:-1]), rob_line(nums[1:]))"},{"question":"Design a function that simulates a basic calculator with memory. The calculator should be able to perform the four primary arithmetic operations: addition, subtraction, multiplication, and division. In addition, the calculator should have a memory function that allows it to store a single number, retrieve the stored number, and reset the stored number to zero. Your task is to implement a `Calculator` class that supports the following methods: - `add(x, y)`: Returns the result of adding `x` and `y`. - `subtract(x, y)`: Returns the result of subtracting `y` from `x`. - `multiply(x, y)`: Returns the result of multiplying `x` and `y`. - `divide(x, y)`: Returns the result of dividing `x` by `y`. If `y` is zero, return \\"Error! Division by zero.\\" - `store(value)`: Stores the given `value` in calculator memory. - `recall()`: Returns the value stored in the calculator memory. - `reset()`: Resets the memory to zero. Example: ```python calc = Calculator() print(calc.add(5, 3)) # Output: 8 print(calc.subtract(5, 3)) # Output: 2 print(calc.multiply(5, 3)) # Output: 15 print(calc.divide(6, 3)) # Output: 2.0 print(calc.divide(6, 0)) # Output: Error! Division by zero. calc.store(100) print(calc.recall()) # Output: 100 calc.reset() print(calc.recall()) # Output: 0 ``` Good Luck!","solution":"class Calculator: def __init__(self): self.memory = 0 def add(self, x, y): return x + y def subtract(self, x, y): return x - y def multiply(self, x, y): return x * y def divide(self, x, y): if y == 0: return \\"Error! Division by zero.\\" return x / y def store(self, value): self.memory = value def recall(self): return self.memory def reset(self): self.memory = 0"},{"question":"Create a function that takes a list of integers and returns a new list containing only the prime numbers from the original list in the same order. The input list will always contain at least one integer, and you do not need to account for different data types.","solution":"def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def filter_primes(numbers): Returns a new list containing only the prime numbers from the original list. return [num for num in numbers if is_prime(num)]"},{"question":"During a survival challenge, Alice and Bob find themselves in a dense forest. They discover a series of magical stones arranged in a straight line, each with a number engraved on it. The magic in these stones can be unlocked if Alice and Bob can identify the subsequence of stones that maximizes the sum of their engraved numbers, with the constraint that no two stones in the subsequence are adjacent. Help Alice and Bob by finding this maximum sum for them. -----Input----- The first line contains a single integer T, the number of test cases. For each test case: - The first line contains an integer n, the number of stones. - The second line contains n integers, which are the numbers engraved on the stones. -----Output----- For each test case, print a single line containing the maximum sum that can be obtained by selecting a subsequence of non-adjacent stones. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ n ≤ 100000 - -10^4 ≤ number engraved on the stone ≤ 10^4 -----Example----- Input: 3 4 3 2 5 10 3 1 -1 3 5 -2 1 3 -4 5 Output: 13 4 8","solution":"def max_sum_non_adjacent(nums): Returns the maximum sum of non-adjacent numbers in the given list. incl = 0 # Maximum sum including the current element excl = 0 # Maximum sum excluding the current element for num in nums: new_excl = max(incl, excl) # Maximum sum if we exclude the current element incl = excl + num # Update incl to be sum excluding previous element plus current element excl = new_excl # Update excl for the next iteration return max(incl, excl) def solve_max_sum(T, cases): results = [] for case in cases: n = case[0] nums = case[1] results.append(max_sum_non_adjacent(nums)) return results"},{"question":"You are given a string S consisting of lowercase English letters and a list of queries. Each query is described by two integers L and R, and you need to find the frequency of the most frequent character in the substring S[Ldots R] (inclusive, 1-indexed). -----Input----- - The first line of the input contains a single integer Q denoting the number of queries. - The second line contains the string S. - The following Q lines each contain two integers L and R describing a query. -----Output----- For each query, output a single integer, which is the frequency of the most frequent character in the substring S[Ldots R]. -----Constraints----- - 1 leq |S| leq 10^5 - 1 leq Q leq 10^5 - 1 leq L leq R leq |S| -----Example Input----- 3 abbabab 1 3 4 6 1 7 -----Example Output----- 2 2 3 -----Explanation----- For the first query L = 1 and R = 3, the substring is \\"abb\\". The frequencies are \'a\' = 1 and \'b\' = 2. So, the most frequent character in \\"abb\\" is \'b\' with a frequency of 2. For the second query L = 4 and R = 6, the substring is \\"bab\\". The frequencies are \'b\' = 2 and \'a\' = 1. So, the most frequent character in \\"bab\\" is \'b\' with a frequency of 2. For the third query L = 1 and R = 7, the substring is \\"abbabab\\". The frequencies are \'a\' = 3 and \'b\' = 4. So, the most frequent character in \\"abbabab\\" is \'b\' with a frequency of 4.","solution":"from collections import Counter def most_frequent_character_frequency(S, queries): results = [] for L, R in queries: substring = S[L-1:R] frequency = Counter(substring) most_frequent = max(frequency.values()) results.append(most_frequent) return results"},{"question":"*Given a positive integer `n`, your task is to return `true` if `n` is a happy number, and `false` if it is not.* A \\"happy number\\" is defined by the following process: 1. Starting with any positive integer, replace the number by the sum of the squares of its digits. 2. Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. 3. Those numbers for which this process ends in 1 are happy numbers, while those that do not are unhappy numbers. **Two things to keep in mind:** * Your solution should handle large numbers efficiently. * Be careful with potential infinite cycles. **Examples:** ```python happy_number(19) => True # Explanation: 19 is a happy number because # 1^2 + 9^2 = 82 # 8^2 + 2^2 = 68 # 6^2 + 8^2 = 100 # 1^2 + 0^2 + 0^2 = 1 happy_number(2) => False # Explanation: 2 is not a happy number because its sequence reaches a cycle: # 2^2 = 4 # 4^2 = 16 # 1^2 + 6^2 = 37 # 3^2 + 7^2 = 58 # 5^2 + 8^2 = 89 # 8^2 + 9^2 = 145 # 1^2 + 4^2 + 5^2 = 42 # 4^2 + 2^2 = 20 # 2^2 + 0^2 = 4 (cycle repeats here) ``` Use your programming language of choice and have fun implementing the solution!","solution":"def happy_number(n): Returns True if n is a happy number, otherwise False. def sum_of_squares(num): return sum(int(digit) ** 2 for digit in str(num)) seen = set() while n != 1 and n not in seen: seen.add(n) n = sum_of_squares(n) return n == 1"},{"question":"Write a program to determine the maximum product possible by multiplying exactly two distinct elements from a given array. If any array does not have at least two distinct elements, the output should be -1 for that test case. -----Input:----- - The first line will contain T, the number of test cases. - For each test case: - The first line contains an integer N, the number of elements in the array. - The next line contains N space-separated integers A which denote the array elements. -----Output:----- Print a single line for each test case. If at least two distinct elements exist, print the maximum product of any two distinct elements from the array. Otherwise, print -1. -----Constraints----- - 1 leq T leq 10 - 2 leq N leq 10^5 - 1 leq A[i] leq 10^9 - Sum of N across all test cases doesn’t exceed 10^6 -----Sample Input:----- 3 5 1 2 3 4 5 4 1 1 1 1 6 3 6 2 5 8 7 -----Sample Output:----- 20 -1 56 -----Explanation:----- - For the first test case, the maximum product is obtained by multiplying 4 and 5. - For the second test case, since all elements are the same, the output is -1. - For the third test case, the maximum product is obtained by multiplying 8 and 7.","solution":"def max_product_from_two_distinct_elements(T, test_cases): results = [] for case in test_cases: N, A = case if len(set(A)) < 2: results.append(-1) else: A.sort(reverse=True) results.append(A[0] * A[1]) return results def parse_input_output(input_lines): input_lines = input_lines.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) A = list(map(int, input_lines[index + 1].split())) test_cases.append((N, A)) index += 2 return T, test_cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"# Determine Triangle Type by Angles Write a function `determine_triangle_type` that accepts three integer arguments representing the angles of a triangle. Your function should return a string indicating the type of triangle based on its angles. The possible return values are: - \\"Acute\\" if all three angles are less than 90 degrees. - \\"Right\\" if exactly one angle is equal to 90 degrees. - \\"Obtuse\\" if one angle is greater than 90 degrees. - \\"Invalid\\" if the provided angles do not form a triangle (i.e., the angles do not sum up to 180 degrees). Example: ```python determine_triangle_type(60, 60, 60) # Should return \'Acute\' determine_triangle_type(90, 45, 45) # Should return \'Right\' determine_triangle_type(120, 30, 30) # Should return \'Obtuse\' determine_triangle_type(90, 90, 90) # Should return \'Invalid\' determine_triangle_type(90, 45, 50) # Should return \'Invalid\' ``` Constraints: - All angles will be positive integers.","solution":"def determine_triangle_type(angle1, angle2, angle3): Returns the type of triangle based on its angles. Possible return values: - \\"Acute\\" if all three angles are less than 90 degrees. - \\"Right\\" if exactly one angle is equal to 90 degrees. - \\"Obtuse\\" if one angle is greater than 90 degrees. - \\"Invalid\\" if the provided angles do not form a triangle. if angle1 + angle2 + angle3 != 180: return \\"Invalid\\" if any(angle <= 0 for angle in [angle1, angle2, angle3]): return \\"Invalid\\" if any(angle > 90 for angle in [angle1, angle2, angle3]): return \\"Obtuse\\" if any(angle == 90 for angle in [angle1, angle2, angle3]): return \\"Right\\" return \\"Acute\\""},{"question":"You are given a binary tree where each node contains an integer value. A path in the binary tree is defined as a sequence of nodes starting from any node and ending at any node, such that every consecutive pair of nodes in the sequence has an edge connecting them. A pseudo-palindromic path is a path that can rearrange its node values to form a palindrome. Write a function to count the number of pseudo-palindromic paths in the given binary tree. -----Input----- A binary tree root node is provided. -----Output----- A single integer value which corresponds to the number of pseudo-palindromic paths. -----Constraints----- - The number of nodes in the binary tree is in the range [1, 10^5]. - Each node\'s value is an integer in the range [1, 9]. -----Example----- Input: [2,3,1,3,1,null,1] Output: 2","solution":"# Definition for a binary tree node. from collections import Counter from typing import Optional class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def pseudoPalindromicPaths(root: Optional[TreeNode]) -> int: def dfs(node, path_counter): if not node: return 0 path_counter[node.val] += 1 if not node.left and not node.right: # If it\'s a leaf node # Check if the path can form a pseudo-palindrome odd_count = sum(v % 2 for v in path_counter.values()) count = 1 if odd_count <= 1 else 0 else: count = dfs(node.left, path_counter) + dfs(node.right, path_counter) path_counter[node.val] -= 1 return count return dfs(root, Counter()) # Helper functions to build a tree from list input def build_tree_from_list(vals): if not vals: return None nodes = [None if val is None else TreeNode(val) for val in vals] kids = nodes[1:] root = nodes[0] queue = [root] while queue: node = queue.pop(0) if node: if kids: node.left = kids.pop(0) queue.append(node.left) if kids: node.right = kids.pop(0) queue.append(node.right) return root"},{"question":"# Kata Task Imagine you are working on a game where a player can collect coins while navigating through a grid. The player starts at the top-left corner of the grid and can only move right or down. Each cell in the grid contains a certain number of coins. Your goal is to determine the maximum number of coins the player can collect by the time they reach the bottom-right corner of the grid. Write a function `maxCoins(grid)` that takes a 2D list `grid` representing the grid of coins, and returns the maximum number of coins that can be collected. Example: ``` grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] ``` maxCoins(grid) should return `12` because the path with the maximum coins is `0 -> 3 -> 1 -> 0 -> 4 -> 1 -> 3`. NOTES: - Each element in the grid is a non-negative integer representing the coins available in each cell. - The grid will have at least 1 row and 1 column. - The function should handle grids with different dimensions. **References** * https://leetcode.com/problems/maximum-number-of-coins-you-can-get/","solution":"def maxCoins(grid): Given a grid where each cell contains a certain number of coins, return the maximum number of coins that can be collected by following a path from the top-left to the bottom-right corner only moving right or down. if not grid or not grid[0]: return 0 rows = len(grid) cols = len(grid[0]) # Create a dp table to store the maximum coins collected up to each cell dp = [[0] * cols for _ in range(rows)] # Initialize the dp table with the coins in the first cell dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for col in range(1, cols): dp[0][col] = dp[0][col - 1] + grid[0][col] # Fill the first column (can only come from above) for row in range(1, rows): dp[row][0] = dp[row - 1][0] + grid[row][0] # Fill the rest of the dp table for row in range(1, rows): for col in range(1, cols): dp[row][col] = max(dp[row - 1][col], dp[row][col - 1]) + grid[row][col] return dp[rows - 1][cols - 1]"},{"question":"Task Write a function named `findLongestWord` that takes a list of strings as a parameter. Your function should return the longest string in the list. If there are multiple strings with the same longest length, return the first one found. Input * A list of strings, where each string contains only alphabetic characters and is of non-zero length. For example, given the input value `[\\"apple\\", \\"banana\\", \\"pear\\", \\"grapefruit\\", \\"kiwi\\"]`, your function should return `\\"grapefruit\\"`.","solution":"def findLongestWord(words): Returns the longest string in the list. If there are multiple strings with the same longest length, returns the first one found. :param words: List of strings :return: Longest string in the list if not words: return \\"\\" longest_word = words[0] for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"In the ancient city of Gridland, the city is laid out in the form of a grid with `n` rows and `m` columns. The city\'s streets form a matrix with rows numbered from 1 to n and columns numbered from 1 to m. Each cell in the matrix represents a junction. There are `k` traps placed on some of these junctions. Any path through a trap is considered dangerous. You are currently at the junction in the top-left corner of the grid (1, 1) and you need to reach the junction in the bottom-right corner of the grid (n, m). You can only move either right or down from a junction to the next. Calculate the number of distinct paths from the top-left corner to the bottom-right corner without passing through any traps. Note that some paths might directly lead into a trap, and those are also considered dangerous paths. -----Input----- The first line contains three integers `n`, `m`, and `k` (`1 ≤ n, m ≤ 1000`, `0 ≤ k ≤ 10^6`). The next `k` lines each contain two integers `r_i` and `c_i` (`1 ≤ r_i ≤ n`, `1 ≤ c_i ≤ m`) denoting that there is a trap at the junction `(r_i, c_i)`. -----Output----- Print a single integer — the number of distinct paths from the top-left corner to the bottom-right corner without passing through any traps. -----Example----- Input 3 3 1 2 2 Output 2","solution":"def countPaths(n, m, k, traps): MOD = 1000000007 trap_set = {(r, c) for r, c in traps} if (n, m) in trap_set or (1, 1) in trap_set: return 0 dp = [[0] * (m + 1) for _ in range(n + 1)] dp[1][1] = 1 for i in range(1, n + 1): for j in range(1, m + 1): if (i, j) in trap_set: dp[i][j] = 0 else: if i > 1: dp[i][j] = (dp[i][j] + dp[i - 1][j]) % MOD if j > 1: dp[i][j] = (dp[i][j] + dp[i][j - 1]) % MOD return dp[n][m]"},{"question":"Task You are given an integer array `arr` of size `n` and an integer `k`. Your task is to find the maximum sum of any contiguous subarray of size `k`. Return an integer that is the maximum sum of the contiguous subarray. # Input: - `arr`: an array of integers. - `k`: an integer representing the size of the subarray. # Output: - An integer that is the maximum sum of any contiguous subarray of size `k`. # Constraints: - `1 <= n <= 10^6` - `1 <= k <= n` - `-10^4 <= arr[i] <= 10^4` # Example ```python Input: arr = [1, 2, 3, 4, 5], k = 2 Output: 9 Input: arr = [-1, -2, -3, -4, -5], k = 3 Output: -6 ``` # Note: 1. For the input array `arr = [1, 2, 3, 4, 5]` and `k = 2`, the contiguous subarrays of size `2` are `[1, 2]`, `[2, 3]`, `[3, 4]`, and `[4, 5]`. The sums are `3`, `5`, `7`, and `9` respectively. So the maximum sum is `9`. 2. For the input array `arr = [-1, -2, -3, -4, -5]` and `k = 3`, the contiguous subarrays of size `3` are `[-1, -2, -3]`, `[-2, -3, -4]`, and `[-3, -4, -5]`. The sums are `-6`, `-9`, and `-12` respectively. So the maximum sum is `-6`.","solution":"def max_sum_of_subarray(arr, k): Returns the maximum sum of any contiguous subarray of size k. n = len(arr) if n < k or k <= 0: return 0 # Calculate the sum of the first window of size k max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window over the array for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a list of nested dictionaries representing hierarchical data. Write a function `flatten_hierarchy` that takes in one of these dictionaries and outputs a flattened dictionary where each key is a path representing the hierarchy. The keys within the path should be separated by a period (`.`). Example input: ```python data = { \'a\': { \'b\': { \'c\': 1, \'d\': 2 }, \'e\': 3 }, \'f\': 4 } ``` Expected output: ```python { \'a.b.c\': 1, \'a.b.d\': 2, \'a.e\': 3, \'f\': 4 } ``` You can assume that the original dictionary will only contain nested dictionaries and/or primitive values (integers, strings, etc.), and will not contain lists or other complex data structures. Write the function to handle various nested dictionary structures.","solution":"def flatten_hierarchy(data, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary into a single dictionary with hierarchical keys. Parameters: - data (dict): The dictionary to flatten. - parent_key (str): The prefix for keys (used internally for recursion). - sep (str): The separator between levels of keys. Returns: dict: A flattened dictionary. items = [] for key, value in data.items(): new_key = f\\"{parent_key}{sep}{key}\\" if parent_key else key if isinstance(value, dict): items.extend(flatten_hierarchy(value, new_key, sep=sep).items()) else: items.append((new_key, value)) return dict(items)"},{"question":"You are given an array `nums` of positive integers and an integer `k`. Count the number of contiguous subarrays where the sum of the subarray elements is equal to `k`. Example 1: Input: nums = [1,1,1], k = 2 Output: 2 Explanation: There are two subarrays [1,1] whose sum equals to 2. Example 2: Input: nums = [1,2,3], k = 3 Output: 2 Explanation: There are two subarrays [1,2] and [3] whose sum equals to 3. Example 3: Input: nums = [2,3,1,2,4,3], k = 7 Output: 2 Explanation: There are two subarrays [2,3,1,1] and [1,2,4] whose sum equals to 7. Example 4: Input: nums = [1,2,3,4,5], k = 15 Output: 1 Explanation: There is one subarray [1,2,3,4,5] whose sum equals to 15. Example 5: Input: nums = [1], k = 5 Output: 0 Explanation: There is no subarray whose sum equals to 5. Constraints: 1 <= nums.length <= 1000 1 <= nums[i] <= 10000 1 <= k <= 10^7","solution":"def subarray_sum(nums, k): Returns the number of contiguous subarrays that sum up to k. count = 0 curr_sum = 0 sum_dict = {0: 1} # Dictionary to store the prefix sums and their counts for num in nums: curr_sum += num if curr_sum - k in sum_dict: count += sum_dict[curr_sum - k] if curr_sum in sum_dict: sum_dict[curr_sum] += 1 else: sum_dict[curr_sum] = 1 return count"},{"question":"You are a developer working on a traffic management system for a smart city. One of the components of the system needs to predict the traffic light behavior based on a predefined cyclic pattern. Each traffic light follows a simple rule: it cycles through Green, Yellow, and Red in a fixed interval. You are given the following intervals: - Green for 5 minutes - Yellow for 2 minutes - Red for 3 minutes Your task is to write a function that, given the current minute in the cycle, returns the color of the traffic light. The function will receive an integer `minute` which represents the current minute, where `minute` can be any non-negative integer and can be higher than the total cycle duration. For example: - If the input minute is `0`, the traffic light is Green. - If the input minute is `10`, the traffic light is Green. - If the input minute is `6`, the traffic light is Yellow. - If the input minute is `15`, the traffic light is Red. Hint: You will need to determine the total duration of one complete cycle and use modulo arithmetic to find the effective minute within the current cycle. Write a function `traffic_light_color(minute)` that takes an integer `minute` as input and returns a string representing the color of the traffic light (either \\"Green\\", \\"Yellow\\", or \\"Red\\").","solution":"def traffic_light_color(minute): Returns the color of the traffic light based on the given minute. Green: 0-4 minutes Yellow: 5-6 minutes Red: 7-9 minutes The cycle repeats every 10 minutes. total_cycle_duration = 10 # Find the minute within the current cycle effective_minute = minute % total_cycle_duration if 0 <= effective_minute <= 4: return \\"Green\\" elif 5 <= effective_minute <= 6: return \\"Yellow\\" elif 7 <= effective_minute <= 9: return \\"Red\\""},{"question":"Task You are given a matrix `n x m` consisting of numbers that represent the cost of visiting each cell. Your task is to find the minimum cost to reach from the top-left cell to the bottom-right cell of the matrix. You are allowed to move only right or down from a cell. # Input - `costMatrix`: A `n` x `m` integer array representing the cost of visiting each cell. - `1 <= n, m <= 100` - Each element in `costMatrix` is a non-negative integer less than 10^5. # Output An integer representing the minimum cost to reach from the top-left cell to the bottom-right cell. # Example For ``` costMatrix = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] ``` The output should be `7`. One of the possible paths to achieve the minimum cost: ``` 1 -> 3 -> 1 -> 1 -> 1 Total Cost = 1 + 3 + 1 + 1 + 1 = 7 ```","solution":"def min_cost_path(costMatrix): Returns the minimum cost to reach from the top-left cell to the bottom-right cell. You are allowed to move only right or down from a cell. n = len(costMatrix) m = len(costMatrix[0]) # Create a dp table for storing the minimum cost at each cell dp = [[0] * m for _ in range(n)] dp[0][0] = costMatrix[0][0] # Initialize the first row for i in range(1, m): dp[0][i] = dp[0][i-1] + costMatrix[0][i] # Initialize the first column for j in range(1, n): dp[j][0] = dp[j-1][0] + costMatrix[j][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + costMatrix[i][j] return dp[n-1][m-1]"},{"question":"Given a string `s`, you are to determine the length of the longest substring that contains at most two distinct characters. For example, for the string `eceba`, the answer is `ece` with length `3`. You need to answer `t` independent test cases. -----Input----- The first line of the input contains one integer `t` (1 le t le 10^4) — the number of test cases. Then `t` test cases follow. Each test case consists of a single line containing a string `s` of length n (1 le n le 2 cdot 10^5). It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5 (sum n le 2 cdot 10^5). -----Output----- For each test case, print the length of the longest substring that contains at most two distinct characters. -----Example----- Input 3 eceba ccaabbb abcabcabc Output 3 5 2","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. if len(s) < 3: return len(s) left, right = 0, 0 hashmap = {} max_len = 2 while right < len(s): hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(length_of_longest_substring_two_distinct(s)) return results"},{"question":"A kingdom, driven by the need to strengthen its defenses, has decided to build a network of roads to connect all its cities. The king has tasked his engineers with constructing the network in a way that minimizes the total cost while ensuring that all cities are connected. The engineers have a list of possible roads to build, each with a given cost. Some cities might already be directly connected by existing roads, for which the connection cost is zero. Your task is to determine the minimum total cost required to connect all the cities in the kingdom. The engineers represent this problem using a graph where each city is a node, and each road is an edge with an associated cost. The goal is to compute the cost of the Minimum Spanning Tree (MST) of this graph. -----Input:----- The first line of the input contains two integers N and E, where N is the number of cities and E is the number of possible roads. The next E lines each contain three integers u, v, and c representing a road between cities u and v with cost c. Cities are numbered from 1 to N. -----Output:----- Output a single integer, the minimum total cost required to connect all cities. -----Constraints:----- - 1 leq N leq 100000 - 0 leq E leq 500000 - 1 leq c leq 1000000 -----Sample Input----- 4 5 1 2 5 1 3 10 1 4 6 2 3 15 3 4 4 -----Sample Output----- 15","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal(n, edges): parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) edges = sorted(edges, key=lambda item: item[2]) result = [] e = 0 i = 0 while e < n - 1: u, v, w = edges[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result.append([u, v, w]) union(parent, rank, x, y) minimumCost = 0 for u, v, weight in result: minimumCost += weight return minimumCost def minimum_cost_to_connect_all_cities(n, edges): if n == 1: return 0 if len(edges) == 0: return -1 return kruskal(n, edges)"},{"question":"Task Write a function that accepts a list of integers and returns a new list containing only the unique integers from the original list, preserving their original order. Input A list of integers where some integers may be repeated. Example ```python unique_integers([1, 2, 2, 3, 4, 4, 5]) # --> [1, 2, 3, 4, 5] ```","solution":"def unique_integers(nums): Returns a new list containing only the unique integers from the original list, preserving their original order. seen = set() unique_nums = [] for num in nums: if num not in seen: unique_nums.append(num) seen.add(num) return unique_nums"},{"question":"You are a software engineer working on a system that requires precise time calculations. Specifically, you need to determine the exact number of seconds between two given timestamps. Each timestamp is provided in the format \'YYYY-MM-DD HH:MM:SS\'. Please write a function that takes two timestamps as input and returns the absolute difference between them in seconds. The two timestamps will always be valid and the second timestamp will never be earlier than the first one. Function Signature: `def calculate_seconds_diff(timestamp1: str, timestamp2: str) -> int:` Example: - Input: `calculate_seconds_diff(\'2023-03-01 01:15:30\', \'2023-03-01 02:45:30\')` - Output: `5400` - Input: `calculate_seconds_diff(\'2023-10-15 12:00:00\', \'2023-10-16 12:00:00\')` - Output: `86400` Hint: You may use Python\'s `datetime` module to parse the timestamps and handle the time difference calculations.","solution":"from datetime import datetime def calculate_seconds_diff(timestamp1: str, timestamp2: str) -> int: Returns the absolute difference between two timestamps in seconds. Parameters: timestamp1 (str): The first timestamp in \'YYYY-MM-DD HH:MM:SS\' format. timestamp2 (str): The second timestamp in \'YYYY-MM-DD HH:MM:SS\' format. Returns: int: The absolute difference between the two timestamps in seconds. t1 = datetime.strptime(timestamp1, \'%Y-%m-%d %H:%M:%S\') t2 = datetime.strptime(timestamp2, \'%Y-%m-%d %H:%M:%S\') delta = t2 - t1 return delta.total_seconds()"},{"question":"Alice wants to play a game with her friends. She will give each of her friends a positive integer, and each friend\'s number will be unique. The game requires determining the most significant friend. A friend is more significant if their given number is composed of digits that sum up to a larger value. In case of a tie, the friend with the smaller number is considered more significant. Write a program to determine the most significant friend based on the given criteria. -----Input----- Input begins with an integer T, the number of test cases. Each test case starts with an integer N, representing the number of friends. The next line contains N unique positive integers separated by spaces, which are the numbers given to the friends. -----Output----- For each test case, output the number given to the most significant friend. -----Constraints----- - 1 ≤ T ≤ 100 - 2 ≤ N ≤ 1000 - 1 ≤ number ≤ 1000000 (10^6) -----Sample Input----- 2 3 123 456 789 4 10 23 34 45 -----Sample Output----- 789 45 -----Explanation----- In the first test case, the digit sums are: 123 -> 6, 456 -> 15, 789 -> 24. The highest digit sum is 24, which corresponds to 789. In the second test case, the digit sums are: 10 -> 1, 23 -> 5, 34 -> 7, 45 -> 9. The highest digit sum is 9, which corresponds to 45.","solution":"def most_significant_friend(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] friends_numbers = test_cases[i][1] def digit_sum(number): return sum(int(digit) for digit in str(number)) most_significant = min(friends_numbers, key=lambda x: (-digit_sum(x), x)) results.append(most_significant) return results # Example usage: # T = 2 # test_cases = [ # (3, [123, 456, 789]), # (4, [10, 23, 34, 45]) # ] # print(most_significant_friend(T, test_cases)) # Output: [789, 45]"},{"question":"You are given an array of integers. We define an **\\"unimodal subarray\\"** as a subarray that increases up to a certain point and then decreases. For example, a subarray `[1, 4, 7, 5, 3]` is unimodal because it increases from 1 to 7 and then decreases from 7 to 3. Write a function `find_longest_unimodal_subarray(arr)` that takes an array of integers `arr` and returns the length of the longest unimodal subarray. For example: ```python find_longest_unimodal_subarray([1, 3, 5, 7, 6, 4, 2]) == 7 find_longest_unimodal_subarray([2, 1, 4, 7, 3, 2, 5, 4, 3]) == 5 find_longest_unimodal_subarray([5, 4, 3, 2, 1]) == 0 ``` Notes: - If there is no unimodal subarray present, the function should return `0`. - The given array may contain repeated elements. - The longest subarray should strictly increase to a peak and then strictly decrease.","solution":"def find_longest_unimodal_subarray(arr): n = len(arr) if n < 3: return 0 longest = 0 i = 1 while i < n - 1: # Check if it is a peak if arr[i-1] < arr[i] > arr[i+1]: left = i - 1 right = i + 1 # Move left pointer to the beginning of the increasing part while left > 0 and arr[left-1] < arr[left]: left -= 1 # Move right pointer to the end of the decreasing part while right < n - 1 and arr[right] > arr[right+1]: right += 1 # Update the longest length current_length = right - left + 1 longest = max(longest, current_length) # Move i to the end of the current unimodal subarray i = right else: i += 1 return longest"},{"question":"You have an array of integers. Your task is to find the index of the target value in the array if it exists. However, if there are multiple occurrences of the target value, return the index of the first occurrence. If the target value does not exist in the array, return -1. ``` Example Input : array = [10, 22, 33, 22, 44], target = 22 Output : 1 ``` Note: The array may contain duplicates and the indices are 0-based.","solution":"def find_first_occurrence(array, target): Returns the index of the first occurrence of the target value in the array. If the target value does not exist, returns -1. for index, value in enumerate(array): if value == target: return index return -1"},{"question":"Sam is an avid runner who has signed up for several marathons. He keeps a log of his marathon times in minutes. Sam wants to analyze his performance to see where he stands. Given an array of marathon times (in minutes), you need to: 1. Calculate his fastest marathon time. 2. Calculate his average marathon time. 3. Determine his overall performance category based on the average time: - Average time <= 180 minutes: \\"Elite Runner\\" - 180 < Average time <= 240 minutes: \\"Good Runner\\" - 240 < Average time <= 300 minutes: \\"Average Runner\\" - Average time > 300 minutes: \\"Needs Improvement\\" Return the fastest marathon time, and the performance category as a tuple. For example: Input: [210, 190, 320, 275, 215] Output: (190, \\"Good Runner\\")","solution":"def analyze_performance(marathon_times): Analyze the performance of marathon times. Args: marathon_times (list): A list of marathon times in minutes. Returns: tuple: Contains the fastest marathon time and performance category. if not marathon_times: return (None, \\"No Data\\") fastest_time = min(marathon_times) average_time = sum(marathon_times) / len(marathon_times) if average_time <= 180: category = \\"Elite Runner\\" elif average_time <= 240: category = \\"Good Runner\\" elif average_time <= 300: category = \\"Average Runner\\" else: category = \\"Needs Improvement\\" return (fastest_time, category)"},{"question":"You are given an array of N integers. You can perform the following operation exactly once: - Select two adjacent elements in the array and swap them. Your task is to find the maximum sum of the array possible after performing the above operation exactly once. -----Constraints----- - 2 ≤ N ≤ 2 × 10^5 - -10^9 ≤ array[i] ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: N array_1 array_2 ... array_N -----Output----- Print the maximum sum of the array possible after performing exactly one swap of two adjacent elements. -----Sample Input----- 4 1 2 4 3 -----Sample Output----- 10 In the example above, after swapping elements 4 and 3, the array becomes [1, 2, 3, 4], which sums to 10.","solution":"def max_sum_after_one_swap(n, array): Given an array of N integers, finds the maximum sum of the array possible after performing exactly one swap of two adjacent elements. total_sum = sum(array) max_sum = total_sum for i in range(n - 1): swapped_array = array[:] # Perform the swap between the elements at positions i and i+1 swapped_array[i], swapped_array[i + 1] = swapped_array[i + 1], swapped_array[i] # Calculate new sum and update max_sum if needed current_sum = sum(swapped_array) if current_sum > max_sum: max_sum = current_sum return max_sum # Example usage: # n = 4 # array = [1, 2, 4, 3] # print(max_sum_after_one_swap(n, array)) # Output : 10"},{"question":"# Hungry Caterpillar A caterpillar has found a tree trunk with several branches bearing leaves. Each branch has a certain number of leaves. The caterpillar can eat only a particular number of leaves `k` at a time from a branch. Your task is to determine the minimum number of operations the caterpillar needs to completely eat all the leaves from all the branches. Given a list of integers representing the number of leaves on each branch, and an integer `k` representing the number of leaves the caterpillar can consume in one operation, craft a program that will output the minimum number of operations needed. # Examples Python ```python >>> min_operations([10, 15, 25], 5) 10 >>> min_operations([7, 3, 21], 4) 9 ``` Elixir *Note: The order of elements does not affect the results in Elixir.* # Assumptions 1. You can assume that `k` will be a positive integer (`1 <= k <= 10`). 2. The list of integers will have at least one branch and not exceed 100 branches. 3. Each branch will contain at least one leaf, and the number of leaves will be a non-negative integer and not exceed 100. # Approach The caterpillar will eat the leaves from the branches. If there are leftover leaves on a branch after eating `k` leaves, the caterpillar will take additional steps to consume the remaining ones. The objective is to find the total number of eating operations needed to clear all leaves from all branches. Python ```python int -> int ```","solution":"def min_operations(branches, k): Calculates the minimum number of operations needed for the caterpillar to eat all the leaves from all branches. Parameters: branches (list of int): A list where each element represents the number of leaves on a branch. k (int): The number of leaves the caterpillar can eat in one operation. Returns: int: The minimum number of operations needed. operations = 0 for leaves in branches: operations += (leaves + k - 1) // k # Ceiling division to determine operations per branch return operations"},{"question":"-----Problem description----- This problem deals with finding the longest common prefix among an array of strings. You are given an array of strings, and your task is to find the longest common prefix string amongst them. If there is no common prefix, return an empty string \'\'. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of strings in the array. - The next N lines each contain a single string. -----Output----- - For each test case, output the longest common prefix among the array of strings in a new line. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - 1 ≤ length of any string in the array ≤ 100 -----Example----- Input: 2 3 flower flow flight 2 dog racecar Output: fl Explanation: In the first test case, the longest common prefix among the strings \\"flower,\\" \\"flow,\\" and \\"flight\\" is \\"fl.\\" In the second test case, there is no common prefix, so the output is an empty string \'\'.","solution":"def longest_common_prefix(strs): Function to find the longest common prefix string amongst an array of strings. if not strs: return \'\' prefix = strs[0] for s in strs[1:]: while s.find(prefix) != 0: prefix = prefix[:-1] if not prefix: return \'\' return prefix def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list of the longest common prefixes. results = [] for strs in test_cases: results.append(longest_common_prefix(strs)) return results"},{"question":"Sorting Out the Mess You have been given a list of names that are unsorted, and you need to sort this list without using any built-in sort functions. Implement a sorting algorithm to sort the list of names in alphabetical order. Write a function `sortNames` that takes a list of strings `names` and returns a new list with the names sorted. Example: ```python def sortNames(names): # Your code here # Example usage: names_list = [\\"Kirk\\", \\"Spock\\", \\"McCoy\\", \\"Sulu\\", \\"Scotty\\"] print(sortNames(names_list)) ``` Expected output: ``` [\'Kirk\', \'McCoy\', \'Scotty\', \'Spock\', \'Sulu\'] ``` You must solve this by implementing a sorting algorithm such as bubble sort, selection sort, insertion sort, etc., and not by using Python\'s `sort` or `sorted` functions.","solution":"def sortNames(names): Sorts a list of names in alphabetical order using selection sort. :param names: List of names (strings) :return: New list with names sorted sorted_names = names[:] n = len(sorted_names) for i in range(n): min_idx = i for j in range(i + 1, n): if sorted_names[j] < sorted_names[min_idx]: min_idx = j sorted_names[i], sorted_names[min_idx] = sorted_names[min_idx], sorted_names[i] return sorted_names # Example usage: names_list = [\\"Kirk\\", \\"Spock\\", \\"McCoy\\", \\"Sulu\\", \\"Scotty\\"] print(sortNames(names_list))"},{"question":"# Find the intersection of two arrays Write a function that takes two arrays of integers and returns an array containing their intersection. The intersection of two arrays is a new array containing all unique elements that are present in both of the input arrays. The returned array should be sorted in ascending order. The input arrays can contain duplicate elements, but the output array should not contain any duplicates. Example: ``` Input: Array 1: [1, 2, 2, 1] Array 2: [2, 2] Output: [2] Input: Array 1: [4, 9, 5] Array 2: [9, 4, 9, 8, 4] Output: [4, 9] ``` Note: - The input arrays will never be null. - Both input arrays can be of different lengths.","solution":"def intersection(arr1, arr2): Returns the intersection of two arrays as a sorted list of unique elements. # Convert both lists to sets to get unique elements set1 = set(arr1) set2 = set(arr2) # Find the intersection of both sets intersected_set = set1 & set2 # Convert the set to a sorted list and return return sorted(list(intersected_set))"},{"question":"In a remote village, a new communication system has been set up between houses using a special string transmission protocol. Each transmitted string follows this strict format: {ID}: {Message} - {ID} is a unique identifier for each house, represented by a sequence of exactly 5 uppercase letters. - {Message} is a sequence of words separated by single spaces, where each word contains only lowercase letters. For example, valid transmissions include: HQKUD: This is a sample message QWERT: hello world Invalid transmissions may include: HQKUD this is missing colon HELLO: This Contains Uppercase Letters Your task is to write a function that can validate whether a given transmission follows the correct format. The function should return \\"True\\" if the transmission is valid and \\"False\\" otherwise.","solution":"import re def validate_transmission(transmission): Validates the given transmission string based on specified format. Parameters: transmission (str): The transmission string to validate. Returns: bool: True if the transmission is valid, False otherwise. pattern = r\'^[A-Z]{5}: ([a-z]+( [a-z]+)*)\' match = re.match(pattern, transmission) return bool(match)"},{"question":"You are helping a library digitize their book collection. Each book is identified by a unique code consisting of a sequence of uppercase letters and digits. Your task is to validate these codes. A valid book code must meet the following criteria: 1. It must be exactly 10 characters long. 2. It must contain at least 2 digits. 3. It must contain at least 2 uppercase letters. 4. It must not contain any special characters or spaces. Write a function `is_valid_book_code(code)` that takes a string `code` as input and returns `True` if the code is valid, and `False` otherwise. Examples: ```python is_valid_book_code(\\"AB12CDEFGH\\") # True is_valid_book_code(\\"1234AB5678\\") # True is_valid_book_code(\\"A1B2C3D4\\") # False (only 8 characters long) is_valid_book_code(\\"ABCDEFGHIJ\\") # False (no digits) is_valid_book_code(\\"1234567890\\") # False (no uppercase letters) is_valid_book_code(\\"A1B2C3D4E5\\") # True ```","solution":"def is_valid_book_code(code): Validates if the book code is according to the criteria. - It must be exactly 10 characters long. - It must contain at least 2 digits. - It must contain at least 2 uppercase letters. - It must not contain any special characters or spaces. Parameters: code (str): The book code to be validated. Returns: bool: True if the code meets the criteria, False otherwise. if len(code) != 10: return False digit_count = sum(c.isdigit() for c in code) letter_count = sum(c.isupper() for c in code) if digit_count < 2 or letter_count < 2: return False if not all(c.isalnum() for c in code): return False return True"},{"question":"You are given a tree consisting of N nodes, where the nodes are numbered from 1 to N. Each node has an initial value assigned to it. You need to answer Q queries of the following type: Given two nodes u and v, update the value of all nodes in the shortest path from u to v (inclusive) by assigning a new value X to them. After processing all the queries, find the sum of the values of all nodes in the tree. -----Input----- - The first line of the input contains a single integer N denoting the number of nodes in the tree. - The second line contains N space-separated integers val_1, val_2, ldots, val_N denoting the initial values of the nodes. - Each of the next N-1 lines contains two integers u and v, denoting an edge between nodes u and v. - The next line contains an integer Q denoting the number of queries. - Each of the next Q lines contains three integers u, v and X, where u and v denote the nodes and X denotes the new value to be assigned to the nodes in the shortest path from u to v. -----Output----- Print a single integer — the sum of the values of all nodes in the tree after processing all queries. -----Constraints----- - 2 le N le 10^5 - 1 le val_i le 10^9 for each valid i - 1 le Q le 10^5 - 1 le u, v le N - 1 le X le 10^9 -----Example Input----- 5 5 3 6 2 4 1 2 2 3 3 4 4 5 3 1 3 10 2 5 7 1 5 1 -----Example Output----- 5","solution":"from collections import defaultdict, deque def sum_of_values_after_queries(N, initial_values, edges, Q, queries): # Build the adjacency list for the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to find the shortest path between nodes u and v using BFS def shortest_path(u, v): parent = {u: None} queue = deque([u]) while queue: node = queue.popleft() if node == v: path = [] while node is not None: path.append(node) node = parent[node] return path[::-1] for neighbor in tree[node]: if neighbor not in parent: parent[neighbor] = node queue.append(neighbor) # Initial values of the nodes values = dict(enumerate(initial_values, 1)) # Process each query for u, v, X in queries: path = shortest_path(u, v) for node in path: values[node] = X # Return the sum of the values of all nodes return sum(values.values())"},{"question":"Given a string s consisting of only lowercase alphabets, determine whether it is possible to rearrange characters of the string to form a palindrome. A string is called a palindrome if it reads the same backward as forward. For example, \\"level\\" and \\"radar\\" are palindromes. -----Input----- The first line of the input contains a single integer t (1 <= t <= 10^5) - the number of test cases. Each of the next t lines contains a string s (1 <= |s| <= 10^5) - the string to be checked. -----Output----- For each test case, output a single line containing either \\"yes\\" if it is possible to rearrange the characters to form a palindrome, or \\"no\\" otherwise (without quotes). -----Examples----- Input 3 civic ivicc hello Output yes yes no -----Note----- Sample 1. The string \\"civic\\" is already a palindrome. Sample 2. The string \\"ivicc\\" can be rearranged to form the palindrome \\"civic\\". Sample 3. The string \\"hello\\" cannot be rearranged to form a palindrome because there are more than one character with an odd count.","solution":"def can_form_palindrome(s): Determines if the characters in the string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if at most one character has an odd count. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency return odd_count <= 1 def palindrome_permutations(t, cases): results = [] for s in cases: if can_form_palindrome(s): results.append(\\"yes\\") else: results.append(\\"no\\") return results"},{"question":"Chef has been captured by the evil Lord Syntax and must solve a challenging puzzle to escape. He is given a list of integers and must determine if there exists a pair of elements in the list whose sum is equal to a specified target value. Help Chef escape by solving this problem. Given an integer array `nums` and an integer `target`, return `True` if there are two distinct indices `i` and `j` in the array such that `nums[i] + nums[j] == target`, and return `False` otherwise. # Input - The first line contains an integer `t` (1 ≤ t ≤ 100), the number of test cases. - Each test case starts with an integer `n` (2 ≤ n ≤ 10^5), the length of the array. - The next line contains `n` space-separated integers representing the array `nums` (-10^9 ≤ nums[i] ≤ 10^9). - The next line contains a single integer `target` (-10^9 ≤ target ≤ 10^9). # Output - For each test case, print `True` if there exist two distinct indices `i` and `j` in the array such that `nums[i] + nums[j] == target`. Otherwise, print `False`. # Sample Input ``` 2 4 2 7 11 15 9 5 1 2 3 4 5 10 ``` # Sample Output ``` True False ``` # Explanation In the first test case, there are two elements at indices 0 and 1 with values 2 and 7, respectively, which add up to 9. In the second test case, no two elements add up to 10.","solution":"def has_pair_with_sum(nums, target): Returns True if there are two distinct indices i and j in the array such that nums[i] + nums[j] == target. Otherwise, returns False. Args: nums : List[int] - List of integers. target : int - The target sum. Returns: bool - Whether there exists a pair with the specified sum. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False def solve(t, cases): Process multiple test cases to determine if any pair with the specified sum exists. Args: t : int - Number of test cases. cases : List[Tuple[int, List[int], int]] - Each tuple contains (n, nums, target). Returns: List[bool] - List of results for each test case. results = [] for n, nums, target in cases: results.append(has_pair_with_sum(nums, target)) return results"},{"question":"Ananse, the super-spy has collected valuable intelligence, but the information is encrypted in a special numeric grid called the Spygrid. The grid consists of N rows and M columns. The Spygrid has a special property: the value of any cell (i, j) is defined as the product of its row index and its column index, i.e., value(i, j) = i * j. Ananse needs to quickly extract the K-th smallest value from the grid for decryption. Being the brilliant spy, he wants you to write an efficient program to find this value. ---Input:--- The first line of input contains a single integer T, the number of test cases. Each of the next T lines contains three integers N, M, and K. ---Output:--- For each test case, print a single integer, the K-th smallest value in the Spygrid. If K is greater than the total number of elements in the grid, output -1. ---Constraints:--- 1 ≤ T ≤ 100000 1 ≤ N, M ≤ 1000 1 ≤ K ≤ N * M ---Sample Input:--- 3 3 3 4 4 5 6 2 2 5 ---Sample Output:--- 4 6 -1 ---Explanation:--- For the first example: Spygrid values are: [1, 2, 3, 2, 4, 6, 3, 6, 9] Sorted values are: [1, 2, 2, 3, 3, 4, 6, 6, 9] 4th smallest value is 3. For the second example: Spygrid values are: [1, 2, 3, 4, 2, 4, 6, 8, 3, 6, 9, 12, 4, 8, 12, 16, 5, 10, 15, 20] Sorted values are: [1, 2, 2, 3, 3, 4, 4, 4, 5, 6, 6, 8, 8, 9, 10, 12, 12, 15, 16, 20] 6th smallest value is 4. For the third example: Spygrid values are: [1, 2, 2, 4] There are only 4 elements hence 5th smallest value does not exist. Return -1.","solution":"def kth_smallest_in_spygrid(N, M, K): Returns the K-th smallest element in a Spygrid with N rows and M columns. If K is larger than N * M, returns -1. if K > N * M: return -1 def count_less_equal(x): # Count the number of elements less than or equal to x in the Spygrid count = 0 for i in range(1, N + 1): count += min(x // i, M) return count left, right = 1, N * M while left < right: mid = (left + right) // 2 if count_less_equal(mid) < K: left = mid + 1 else: right = mid return left def process_test_cases(test_cases): results = [] for N, M, K in test_cases: results.append(kth_smallest_in_spygrid(N, M, K)) return results"},{"question":"Write a function `common_elements` that takes two lists of integers and returns a list of the elements that are present in both lists, without duplicates. The order of elements in the output should follow their first appearance in the combined lists. ```python common_elements([1, 3, 4, 6, 7, 8], [2, 4, 6, 7, 8, 8, 8]) # => [4, 6, 7, 8] common_elements([10, 11, 12], [13, 14, 15]) # => [] ``` Hint: Use sets to handle duplicates and preserve the order by iterating through the original lists.","solution":"def common_elements(list1, list2): This function takes two lists of integers and returns a list of the elements that are present in both lists, without duplicates. The order of elements in the output follows their first appearance in the combined lists. set_list1 = set(list1) set_list2 = set(list2) common_set = set_list1 & set_list2 result = [] for item in list1 + list2: if item in common_set and item not in result: result.append(item) return result"},{"question":"You are given a string S of length N which consists of lowercase English alphabets. You have to process Q queries of three types: - 1 L R C: Change all characters of the substring S[L:R] (1-based indexing) to character C. - 2 L R: Find the lexicographically smallest character in the substring S[L:R]. - 3 L R: Reverse the substring S[L:R]. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, the length of the string S. - The second line contains a string S. - The next line will contain an integer, Q, the number of queries. - Each of the next Q lines will contain one of 3 kinds of updates as mentioned in the statement. -----Output----- For each query of the second type, print a single line containing the lexicographically smallest character in the specified substring. -----Constraints----- - 1 le T le 10 - 1 le N, Q le 100,000 - 1 le L, R le N - C is a lowercase English alphabet -----Example Input----- 1 6 abcdef 4 2 2 5 1 3 4 z 3 2 5 2 1 6 -----Example Output----- b a -----Explanation----- Before the first operation, S = \\"abcdef\\". So, for the first operation, Lexicographically smallest character in substring S[2:5] is \'b\'. After the second operation, S = \\"abzdef\\" (Change characters in the substring S[3:4] to \'z\'). After the third operation, S = \\"abzdfe\\" (Reverse the substring S[2:5]). So, for the final operation, Lexicographically smallest character in substring S[1:6] is \'a\'.","solution":"def process_queries(T, test_cases): results = [] for test in test_cases: N, S, queries = test S = list(S) # Convert to list for mutable operations for query in queries: if query[0] == 1: # Change all characters of the substring S[L:R] to character C L, R, C = query[1], query[2], query[3] for i in range(L-1, R): S[i] = C elif query[0] == 2: # Find the lexicographically smallest character in the substring S[L:R] L, R = query[1], query[2] smallest_char = min(S[L-1:R]) results.append(smallest_char) elif query[0] == 3: # Reverse the substring S[L:R] L, R = query[1], query[2] S = S[:L-1] + S[L-1:R][::-1] + S[R:] return results"},{"question":"You are given a list of integers representing the heights of buildings along a street. You want to place a camera on top of one of the buildings such that as many buildings as possible can be seen from the camera. A building can be seen if there are no taller buildings blocking the view to that building. A building can be seen if it is equal to the height of the building the camera is on. Write an algorithm to find the maximum number of buildings that can be seen from a camera placed on one building. Function Signature: ```python def max_visible_buildings(heights: List[int]) -> int: ``` **Input:** - A list of integers `heights` where `heights[i]` represents the height of the `i`-th building. **Output:** - An integer representing the maximum number of buildings that can be seen from one building. **Constraints:** - All buildings have a positive height. - The number of buildings is between 1 and 10^4. **Example 1:** Given `heights` = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], From the building of height 9, you can see all other buildings, so the return should be 11 (including the building with the camera). **Example 2:** Given `heights` = [1, 2, 3, 4, 5, 6], From the building of height 6, you can see all other buildings, so the return should be 6 (including the building with the camera). **Example 3:** Given `heights` = [5, 4, 3, 2, 1], Only the buildings that are equal or shorter than the current building can be seen, and you need to find maximum such building that can be seen when camera is placed on top of one of the building. If placed on top of building height 5, you can see 5. If placed on top of building height 4, the maximum you can see is 2. so the return should be 5 You can assume the list of buildings will not be empty.","solution":"def max_visible_buildings(heights): def visible_count_from(heights, index): current_height = heights[index] count = 1 # The building itself max_height_seen = current_height # Check buildings to the left for i in range(index - 1, -1, -1): if heights[i] > max_height_seen: max_height_seen = heights[i] if heights[i] <= current_height: count += 1 max_height_seen = current_height # Check buildings to the right for i in range(index + 1, len(heights)): if heights[i] > max_height_seen: max_height_seen = heights[i] if heights[i] <= current_height: count += 1 return count max_visible = 0 for i in range(len(heights)): max_visible = max(max_visible, visible_count_from(heights, i)) return max_visible"},{"question":"Farmer John has a rectangular farm represented as a grid of size N times M. Each cell in the grid can either be empty or contain an obstacle. John wants to find the number of different paths from the top-left corner to the bottom-right corner of the grid that do not pass through any cells with obstacles. John can only move either down or right at any point in time. You need to write an algorithm to help John calculate the number of such paths modulo 10^9 + 7 (1000000007). **Input:** - The first line of the input consists of two integers N and M, representing the dimensions of the grid. - The next N lines each consist of M characters, describing the grid. Each character is either \'.\' representing an empty cell or \'*\' representing an obstacle. **Output:** - Print a single integer: the number of different paths from the top-left corner to the bottom-right corner modulo 10^9 + 7. **Constraints:** - 1 leq N, M leq 1000 **Sample Input:** ``` 3 3 ... .*. ... ``` **Sample Output:** ``` 2 ``` **Explanation:** - There are two paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right The paths avoid the obstacle at position (2, 2). Hence, the output is 2.","solution":"def find_paths(N, M, grid): MOD = 1000000007 if grid[0][0] == \'*\' or grid[N-1][M-1] == \'*\': return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == \'*\': dp[i][j] = 0 else: if i > 0: dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD if j > 0: dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD return dp[N-1][M-1] # Example Usage N = 3 M = 3 grid = [ \\"...\\", \\".*.\\", \\"...\\" ] print(find_paths(N, M, grid)) # Output: 2"},{"question":"# Task You are given a list of integers and need to determine whether it is possible to partition the list into two subsets whose sums are identical. Write a function to determine if such a partition exists. # Example For `nums = [1, 5, 11, 5]`, the output should be `true`. One of the possible partitions is `[1, 5, 5]` and `[11]`, both of which sum to 11. For `nums = [1, 2, 3, 5]`, the output should be `false`. There is no way to partition `nums` into two subsets with equal sums. # Input/Output - `[input]` array of integers `nums` * A list of non-negative integers. * Constraints: `1 ≤ nums.length ≤ 200`, `0 ≤ nums[i] ≤ 100`. - `[output]` a boolean value * `true` if there exists a partition with equal subset sums, `false` otherwise.","solution":"def can_partition(nums): total_sum = sum(nums) # If total_sum is odd, it\'s not possible to partition it into two equal sums if total_sum % 2 != 0: return False target = total_sum // 2 # Initialize a DP array where dp[i] will be True if a subset with sum i can be achieved dp = [False] * (target + 1) dp[0] = True # There\'s always a subset with sum 0 (the empty subset) for num in nums: # Traverse from target to num to avoid using the same num more than once for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Write a function that combines two strings by alternatingly taking characters from each string. If one string is longer than the other, append the remaining characters of the longer string to the result. ```text \'abcdef\', \'123\' becomes \'a1b2c3def\' \'abc\', \'123456\' becomes \'a1b2c3456\' \'abc\', \'xyz\' becomes \'axbycz\' ```","solution":"def combine_strings_alternatingly(str1, str2): Combines two strings by alternatingly taking characters from each string. If one string is longer than the other, append the remaining characters of the longer string to the result. combined = [] len1, len2 = len(str1), len(str2) # Iterate through the characters of both strings for i in range(max(len1, len2)): if i < len1: combined.append(str1[i]) if i < len2: combined.append(str2[i]) return \'\'.join(combined)"},{"question":"Task Write a function that performs run-length encoding for a given string. Run-length encoding is a simple form of lossless data compression in which consecutive occurrences of the same character are replaced by the character followed by the number of occurrences. If a character occurs only once, it should simply be added to the result without a number being appended. # Input - A string `s`, where `1 <= len(s) <= 1000`. The string `s` will consist of only uppercase English letters (A-Z). # Output - A run-length encoded string of the input. # Example Example 1 **Input:** `s = \\"AAABBBCCDAA\\"` **Output:** `\\"A3B3C2DA2\\"` Example 2 **Input:** `s = \\"XY\\"` **Output:** `\\"XY\\"` Example 3 **Input:** `s = \\"AAB\\"` **Output:** `\\"A2B\\"` # Note - In the first example, the three `A`s are combined to form `A3`, the three `B`s combine to form `B3`, the two `C`s combine to form `C2`, and `D` and the last two `A`s are appended as `DA2`. - In the second example, `X` and `Y` are simply appended as they occur only once in the string. - In the third example, the two `A`s combine to form `A2` and `B` is appended as it occurs once.","solution":"def run_length_encoding(s): Perform run-length encoding for a given string. Parameters: s (str): The input string containing uppercase English letters. Returns: str: The run-length encoded string. if not s: return \\"\\" encoded_string = [] count = 1 previous_char = s[0] for char in s[1:]: if char == previous_char: count += 1 else: encoded_string.append(previous_char) if count > 1: encoded_string.append(str(count)) previous_char = char count = 1 encoded_string.append(previous_char) if count > 1: encoded_string.append(str(count)) return \\"\\".join(encoded_string)"},{"question":"A 2D grid is represented as a list of lists of integers, where each integer represents the height of a position in the grid. You are currently located on the top-left position (0, 0) and would like to reach the bottom-right position (n-1, m-1) with the minimum effort. Effort is defined as the absolute difference in height between two consecutive positions in the path. Find a path from the top-left to the bottom-right position such that the maximum effort along the path is minimized. Return the minimum effort required to reach the destination. Example 1: Input: heights = [[1,2,2],[3,8,2],[5,3,5]] Output: 2 Explanation: The path with the minimum effort is: 1 -> 2 -> 2 -> 2 -> 5. The maximum effort along this path is 2. Example 2: Input: heights = [[1,2,3],[3,8,4],[5,3,5]] Output: 1 Explanation: The path with the minimum effort is: 1 -> 2 -> 3 -> 4 -> 5. The maximum effort along this path is 1. Example 3: Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]] Output: 0 Explanation: The path with the minimum effort is: 1 -> 1 -> 1 -> 1 -> 1 -> 1 -> 1 -> 1 -> 1, which has the maximum effort of 0. Constraints: - heights.length == n - heights[i].length == m - 1 <= n, m <= 100 - 1 <= heights[i][j] <= 10^6","solution":"import heapq def minimumEffortPath(heights): def neighbors(x, y): for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < len(heights) and 0 <= ny < len(heights[0]): yield nx, ny def get_effort(x, y, nx, ny): return abs(heights[nx][ny] - heights[x][y]) n, m = len(heights), len(heights[0]) effort = [[float(\'inf\')] * m for _ in range(n)] effort[0][0] = 0 pq = [(0, 0, 0)] # (effort, x, y) while pq: current_effort, x, y = heapq.heappop(pq) if x == n - 1 and y == m - 1: return current_effort for nx, ny in neighbors(x, y): new_effort = max(current_effort, get_effort(x, y, nx, ny)) if new_effort < effort[nx][ny]: effort[nx][ny] = new_effort heapq.heappush(pq, (new_effort, nx, ny)) return -1 # Should never reach here for valid input"},{"question":"Write a function that takes a list of strings and returns a new list containing only those strings that are anagrams of any other string in the list. An anagram is a word or phrase that is formed by rearranging the letters of another, such as \\"cinema\\" and \\"iceman\\". The result list should be sorted in ascending order and should not contain duplicates. Examples ~~~if-not:python ``` [\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"world\\"] should return [\\"listen\\", \\"silent\\", \\"enlist\\"] [\\"bat\\", \\"tab\\", \\"cat\\"] should return [\\"bat\\", \\"tab\\"] [\\"one\\", \\"two\\", \\"three\\"] should return [] ``` ~~~ ~~~if:python ``` [\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"world\\"] should return [\\"enlist\\", \\"listen\\", \\"silent\\"] [\\"bat\\", \\"tab\\", \\"cat\\"] should return [\\"bat\\", \\"tab\\"] [\\"one\\", \\"two\\", \\"three\\"] should return [] ``` ~~~","solution":"def find_anagrams(words): Returns a list of strings that are anagrams of any other string in the list. The result list is sorted in ascending order and does not contain duplicates. from collections import defaultdict def sort_word(word): return \'\'.join(sorted(word)) anagram_groups = defaultdict(list) for word in words: sorted_word = sort_word(word) anagram_groups[sorted_word].append(word) anagram_list = [] for group in anagram_groups.values(): if len(group) > 1: anagram_list.extend(group) return sorted(set(anagram_list))"},{"question":"Given an array of integers, rearrange the elements such that all negative numbers appear before all non-negative numbers without changing the relative order of non-negative numbers and negative numbers. Example: `rearrange([-1, 2, -3, 4, 5, -6, -7])` - The negative numbers are `-1, -3, -6, -7`, maintain their order. - The non-negative numbers are `2, 4, 5`, maintain their order. Hence the output array will be `[-1, -3, -6, -7, 2, 4, 5]`. Return the rearranged array. Additional constraints: - Do not use extra space for another array, manipulate the array in place. - Do not use built-in sorting functions. - The function should be able to handle empty arrays. Return the empty array in this case.","solution":"def rearrange(arr): Rearrange the elements of the array such that all negative numbers appear before all non-negative numbers without changing the relative order. if not arr: return arr n = len(arr) j = 0 for i in range(n): if arr[i] < 0: temp = arr[i] # Shift positive elements forward for k in range(i, j, -1): arr[k] = arr[k - 1] arr[j] = temp j += 1 return arr"},{"question":"Given an initially empty stack, implement a series of commands to manipulate the stack and finally return the maximum integer value present in the stack after all operations are completed. The commands are given in the form of an array of strings. The commands can be of the following four types: 1. `PUSH <number>` - Push the given integer number onto the stack. 2. `POP` - Remove the top element from the stack. It is guaranteed that a `POP` command will never be issued on an empty stack. 3. `TOP` - Retrieve the integer present at the top of the stack. This should not remove the top element. 4. `MAX` - Retrieve the maximum integer value currently present in the stack. It is guaranteed that the stack will never be empty when this command is issued. If all operations are carried out as per the given commands, return the result of the final `MAX` command. ``` Example -------- maximumValue([\\"PUSH 1\\", \\"PUSH 5\\", \\"MAX\\", \\"PUSH 3\\", \\"POP\\", \\"MAX\\"]) == 5 ``` Explanation: 1. PUSH 1 (Stack: [1]) 2. PUSH 5 (Stack: [1, 5]) 3. MAX (Maximum: 5) 4. PUSH 3 (Stack: [1, 5, 3]) 5. POP (Stack: [1, 5]) 6. MAX (Maximum: 5) The final result of the `MAX` command remains 5 in this example.","solution":"def maximumValue(commands): stack = [] max_vals = [] for command in commands: parts = command.split() operation = parts[0] if operation == \\"PUSH\\": value = int(parts[1]) stack.append(value) if not max_vals or value >= max_vals[-1]: max_vals.append(value) elif operation == \\"POP\\": value = stack.pop() if value == max_vals[-1]: max_vals.pop() elif operation == \\"TOP\\": continue # We do not need to process this command for our max tracking elif operation == \\"MAX\\": continue # We will compute the final max value at the end return max_vals[-1] if max_vals else None"},{"question":"Write a function that determines the longest duration of continuous rain given an input list of daily rainfall amounts. Continuous rain is defined as consecutive days where rainfall is more than zero. __Input:__ List of integers representing daily rainfall amounts (0 if no rain, otherwise the amount of rain). __Output:__ Integer representing the longest streak of continuous rainy days. __Examples:__ longestRainyStreak([0, 2, 3, 0, 0, 1, 2, 3, 4, 0, 0, 0]) == 4 longestRainyStreak([0, 0, 0, 0, 0]) == 0 longestRainyStreak([1, 1, 1, 1, 1]) == 5","solution":"def longestRainyStreak(rainfall): Determines the longest duration of continuous rain. :param rainfall: List of integers representing daily rainfall amounts. :return: Integer representing the longest streak of continuous rainy days. max_streak = 0 current_streak = 0 for rain in rainfall: if rain > 0: current_streak += 1 if current_streak > max_streak: max_streak = current_streak else: current_streak = 0 return max_streak"},{"question":"A palindrome is a string that reads the same forward and backward. Given a string, your task is to count the number of distinct palindromic substrings of the string. A substring is any sequence of characters that appears consecutively in the string. If two substrings appear in different positions in the string but are identical, they should be counted as different substrings. -----Input----- The first line contains a single integer n (1 <= n <= 1000) - the length of the string. The second line contains a string of length n consisting of lowercase English letters. -----Output----- Output the number of distinct palindromic substrings of the given string. -----Example----- Input: 5 ababa Output: 9 Explanation: The distinct palindromic substrings are \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". Since substrings like \\"a\\" appears more than once in different positions, each occurrence is counted separately.","solution":"def count_distinct_palindromic_substrings(n, s): palindromic_substrings = set() def is_palindrome(sub): return sub == sub[::-1] for start in range(n): for end in range(start, n): substring = s[start:end + 1] if is_palindrome(substring): palindromic_substrings.add(substring) return len(palindromic_substrings)"},{"question":"=====Function Descriptions===== split() & join() The split() method splits a string into a list where each word is a list item. The join() method takes all items in an iterable and joins them into one string. Code >>> s = \\"Hello World\\" >>> words = s.split() >>> words [\'Hello\', \'World\'] >>> new_s = \\"-\\".join(words) >>> new_s \'Hello-World\' =====Problem Statement===== You are given a string sentence, which contains a sequence of words separated by spaces. You need to write a function that performs the following operations: 1. Split the sentence into a list of words. 2. Reverse the order of words. 3. Join the reversed list of words back into a single string, with a dash (\'-\') as the separator. =====Input Format===== The input is a single line containing the string sentence. =====Output Format===== Print the resulting string after reversing the order of words and joining them with a dash. =====Example===== Input hello there world Output world-there-hello","solution":"def reverse_and_join(sentence): Reverses the order of words in the input sentence and joins them with a dash (\'-\') as the separator. Parameters: sentence (str): A string containing a sequence of words separated by spaces. Returns: str: A string with words in reverse order joined by a dash. words = sentence.split() reversed_words = words[::-1] result = \'-\'.join(reversed_words) return result"},{"question":"Create a function that takes a string as input and returns True if all characters in the string are unique, and False otherwise. You must solve this problem without using any additional data structures such as dictionaries or sets.","solution":"def all_unique_characters(s): Checks if all characters in the string s are unique. Args: s (str): the input string. Returns: bool: True if all characters are unique, False otherwise. n = len(s) for i in range(n): for j in range(i + 1, n): if s[i] == s[j]: return False return True"},{"question":"# Task You are given a string `s` consisting of lowercase letters, and an integer `k`. Your task is to rearrange the letters in the string such that the same letters are at least `k` distance apart. If it is not possible, return an empty string. # Example For `s = \\"aaadbbcc\\"`, `k = 2`, the result could be `\\"abacabad\\"`. For `s = \\"aaabc\\"`, `k = 3`, the result should be `\\"\\"` (an empty string). # Input/Output - `[input]` string `s` A string consisting of lowercase letters. `1 ≤ s.length ≤ 10^5` - `[input]` integer `k` An integer representing the minimum distance between appearances of the same letter. `1 ≤ k ≤ 26` - `[output]` a string A rearranged string meeting the criteria, or an empty string if it is not possible to rearrange as required.","solution":"import heapq from collections import Counter, deque def rearrange_string(s, k): if k == 0: return s freq_map = Counter(s) max_heap = [(-value, key) for key, value in freq_map.items()] heapq.heapify(max_heap) wait_queue = deque() result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) wait_queue.append((char, freq+1)) if len(wait_queue) < k: continue front_char, front_freq = wait_queue.popleft() if -front_freq != 0: heapq.heappush(max_heap, (front_freq, front_char)) return \'\'.join(result) if len(result) == len(s) else \'\'"},{"question":"Task Description Given a string of digits, determine the largest product that can be made by multiplying `k` consecutive digits in the string. If the length of the string is less than `k`, the method should return 0. Function Signature ```python def largest_consecutive_product(digits: str, k: int) -> int: ``` Input Parameters - `digits` (str): a string consisting of digits (0-9). - `k` (int): an integer representing the number of consecutive digits to multiply. Output - Return an integer representing the largest product of `k` consecutive digits in the string. Examples ```python print(largest_consecutive_product(\\"123456789\\", 5)) # Output: 15120 print(largest_consecutive_product(\\"0000\\", 2)) # Output: 0 print(largest_consecutive_product(\\"73167176531330624919225119674426574742355349194934\\", 6)) # Output: 23520 print(largest_consecutive_product(\\"12345\\", 0)) # Output: 0 print(largest_consecutive_product(\\"123\\", 4)) # Output: 0 ``` Constraints - The length of the input string `digits` will not exceed 1000 characters. - `k` will be a non-negative integer.","solution":"def largest_consecutive_product(digits: str, k: int) -> int: Returns the largest product of k consecutive digits in the string. :param digits: A string of digits (0-9). :param k: An integer representing the number of consecutive digits to multiply. :return: An integer representing the largest product of k consecutive digits. if k == 0 or k > len(digits): return 0 max_product = 0 for i in range(len(digits) - k + 1): product = 1 for j in range(k): product *= int(digits[i + j]) if product > max_product: max_product = product return max_product"},{"question":"Implement a function `reverse_and_add_palindrome` which takes an integer `n` and returns the number of reverse-and-add steps required to reach a palindrome. If a palindrome is not reached within 100 steps, return -1. A reverse-and-add step involves reversing the digits of `n` and adding the reversed number to `n`. For example: - The reverse of `123` is `321`. - Adding them: `123 + 321 = 444`, which is a palindrome. Let\'s see some cases: ```python reverse_and_add_palindrome(87) == 4 # 87 -> 165 -> 726 -> 1353 -> 4884 -> 9339 reverse_and_add_palindrome(196) == -1 # Often known to not form a palindrome reverse_and_add_palindrome(89) == 24 # Another known hard case reverse_and_add_palindrome(11) == 0 # 11 is already a palindrome ``` If `n` itself is a palindrome from the start, the function should return `0`. The value `n` will always be a positive integer.","solution":"def reverse_and_add_palindrome(n): Returns the number of reverse-and-add steps required to reach a palindrome. If a palindrome is not reached within 100 steps, return -1. def is_palindrome(x): s = str(x) return s == s[::-1] def reverse_number(x): return int(str(x)[::-1]) steps = 0 while steps < 100: if is_palindrome(n): return steps reversed_n = reverse_number(n) n += reversed_n steps += 1 return -1"},{"question":"# Task You are organizing a music festival and need to allocate stages for the performing bands. Each stage can only hold a set number of bands without exceeding the capacity. Your task is to determine if it\'s possible to schedule all the bands given the constraints of each stage. # Input/Output - `[input]` integer array `bands` An array of integers where each element represents the number of bands wanting to perform on a given stage. `[input]` integer `capacity` An integer representing the maximum number of bands any single stage can hold. `1 <= bands.length <= 100` `1 <= capacity <= 50` - `[output]` a boolean value `true` if all stages have a number of bands less than or equal to the capacity, `false` otherwise. # Example - `bands = [3, 5, 2, 4]` - `capacity = 5` - Output: `true` - `bands = [6, 3, 2, 4]` - `capacity = 5` - Output: `false`","solution":"def can_allocate_stages(bands, capacity): Determines if all stages can hold the specified number of bands without exceeding capacity. Parameters: bands (list of int): The number of bands for each stage. capacity (int): The maximum capacity of any stage. Returns: bool: True if all stages can hold the bands without exceeding capacity, False otherwise. for band_count in bands: if band_count > capacity: return False return True"},{"question":"A company needs to manage its project deadlines efficiently. The software engineers are required to work on several projects, each with a specified start time and duration. The projects might overlap, and an engineer should find the maximum number of projects he can complete if he can only work on one project at a time. Given a list of projects where each project is represented by a pair of integers `[start, duration]`, you need to determine the maximum number of non-overlapping projects that can be accomplished. -----Input:----- - The first line contains an integer N — the number of projects. - The next N lines contain two integers each: `start` and `duration` — the starting time and the duration of each project. -----Output:----- Print a single integer — the maximum number of non-overlapping projects that can be completed. -----Constraints----- - 1 leq N leq 1000 - 1 leq start leq 10^6 - 1 leq duration leq 10^6 -----Sample Input:----- 5 1 2 3 2 0 1 5 3 4 2 -----Sample Output:----- 4 -----Explanation:----- In the example, the non-overlapping projects that can be completed are [0, 1], [1, 2], [3, 2], and [5, 3]. The project [4, 2] cannot be included because its start time overlaps with the end time of the project [3, 2].","solution":"def max_non_overlapping_projects(projects): Finds the maximum number of non-overlapping projects that can be completed. Args: projects (List[List[int]]): A list of projects where each project is represented as [start, duration]. Returns: int: The maximum number of non-overlapping projects. # Calculate the end time for each project projects = [(start, start + duration) for start, duration in projects] # Sort the projects by their ending times projects.sort(key=lambda x: x[1]) # Initialize the end time of the last selected project and the count last_end_time = float(\'-inf\') max_projects = 0 for start, end in projects: if start >= last_end_time: # Select the project last_end_time = end max_projects += 1 return max_projects"},{"question":"Given a list of integers nums, create an algorithm that moves all zeroes to the end of the list while maintaining the relative order of the non-zero elements. You must perform this in-place without making a copy of the array. Minimize the total number of operations. Example 1: Input: nums = [0, 1, 0, 3, 12] Output: [1, 3, 12, 0, 0] Explanation: Move the zeroes to the end while keeping the other numbers in order. Example 2: Input: nums = [0, 0, 1] Output: [1, 0, 0] Explanation: The relative order of the non-zero elements remains preserved. Note: The number of non-zero elements will be at least one, and the array may contain only integers. The length of nums will be in the range [1, 10^5].","solution":"def move_zeroes(nums): Move all zeroes in the list to the end while maintaining the relative order of non-zero elements. Args: nums (List[int]): The list of integers. Returns: None: The function modifies nums in-place. # Position to place the next non-zero element last_non_zero_found_at = 0 # Move all the non-zero elements to the beginning for i in range(len(nums)): if nums[i] != 0: nums[last_non_zero_found_at] = nums[i] last_non_zero_found_at += 1 # Fill the remaining positions with zeroes for i in range(last_non_zero_found_at, len(nums)): nums[i] = 0"},{"question":"You are working as a software engineer in a tech company and have been given a task to analyze the network traffic. The network traffic consists of multiple requests, each with a start time and an end time. The company needs to know the maximum number of simultaneous requests at any given time to ensure that their resources are adequately provisioned. You need to write a program that receives intervals representing the start and end times of each request and calculates the maximum number of simultaneous requests. -----Input:----- The first line contains an integer n, representing the number of requests. The next n lines each contain two integers s and e, representing the start and end times of each request (both inclusive). -----Output:----- Print a single integer representing the maximum number of simultaneous requests. -----Constraints----- - 1 leq n leq 10^5 - 0 leq s, e leq 10^9 - s leq e -----Sample Input:----- 5 1 5 2 6 4 8 7 10 9 10 -----Sample Output:----- 3","solution":"def max_simultaneous_requests(intervals): Returns the maximum number of simultaneous requests. events = [] for (start, end) in intervals: events.append((start, 1)) # 1 for request start events.append((end + 1, -1)) # -1 for request end (+1 to make the end inclusive) events.sort() max_simultaneous = 0 current_simultaneous = 0 for _, event in events: current_simultaneous += event max_simultaneous = max(max_simultaneous, current_simultaneous) return max_simultaneous def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) intervals = [(int(data[2*i + 1]), int(data[2*i + 2])) for i in range(n)] print(max_simultaneous_requests(intervals)) if __name__ == \\"__main__\\": main()"},{"question":"# Task Bob loves playing with arrays. One day, he decides to reverse the segments of a given array of integers between every pair of zeroes (including boundaries), excluding the zeroes themselves. If there\'s only one zero in the array, everything before it should be reversed. If there are no pairs of zeroes, the entire array should be reversed. If the array starts or ends with one or many zeroes, it should work similarly excluding the zeroes at the edges. Write a function to help Bob reverse the segments as described. # Example For `inputArray = [1, 2, 0, 3, 4, 0, 5, 0, 6]`, the output should be `[2, 1, 0, 4, 3, 0, 5, 0, 6]`. Explanation: - Segment before the first zero: [1, 2] reversed to [2, 1] - Segment between first and second zero: [3, 4] reversed to [4, 3] - Segment between second and third zero: [5], remains [5] - Segment after the last zero: [6], remains [6] # Input/Output - `[input]` integer array `inputArray` Constraints: `1 ≤ inputArray.length ≤ 50, 0 ≤ inputArray[i] ≤ 100.` - `[output]` integer array Reversed segments of the given array as described.","solution":"def reverse_segments(inputArray): result = [] start = 0 for i in range(len(inputArray)): if inputArray[i] == 0: if start < i: result.extend(inputArray[start:i][::-1]) result.append(0) start = i + 1 if start < len(inputArray): result.extend(inputArray[start:][::-1]) return result"},{"question":"# String Compressor Write a function that takes a string as an input and compresses it using the counts of repeated characters. The function should return the compressed string if the compressed version is shorter than the original string; otherwise, it should return the original string. You can assume the string has only uppercase and lowercase letters. Example ``` \'aabcccccaaa\' => \'a2b1c5a3\' \'abcdef\' => \'abcdef\' ```","solution":"def string_compressor(s): Compresses a string using the counts of repeated characters. Args: s (str): The input string to be compressed. Returns: str: The compressed string if it\'s shorter than the original, otherwise the original string. if not s: return s compressed_parts = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed_parts.append(s[i - 1] + str(count)) count = 1 compressed_parts.append(s[-1] + str(count)) compressed_string = \'\'.join(compressed_parts) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"Consider a grid-based farm field containing pigs and wolves, where each wolf can catch one pig that is adjacent (up, down, left, or right) but cannot catch a pig that is diagonally adjacent. Your task is to write a function to determine the maximum number of pigs that can be protected from being caught, assuming each wolf tries to catch a pig if it is adjacent. Note that a pig is protected if there are no wolves adjacent to it. For example: ```python farm = [ [\'W\', \'P\', \'P\', \'P\'], [\'P\', \'W\', \'P\', \'P\'], [\'P\', \'P\', \'W\', \'P\'], [\'P\', \'P\', \'P\', \'W\'] ] protect_pigs(farm) = 6, because the pigs that are safe are at positions (0, 2), (0, 3), (2, 0), (3, 0), (3, 1), and (3, 2). farm = [ [\'W\', \'P\'], [\'P\', \'W\'] ] protect_pigs(farm) = 0, because all pigs are adjacent to wolves. farm = [ [\'P\', \'P\'], [\'P\', \'P\'] ] protect_pigs(farm) = 4, because there are no wolves on the farm. ``` Do not modify the input grid. Write the function `protect_pigs(farm: List[List[str]]) -> int` to solve the problem. Good luck!","solution":"def protect_pigs(farm): Returns the number of pigs that are protected from being caught by wolves. rows = len(farm) cols = len(farm[0]) protected_count = 0 def is_protected(x, y): # Check all 4 directions for adjacent wolf directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and farm[nx][ny] == \'W\': return False return True for i in range(rows): for j in range(cols): if farm[i][j] == \'P\' and is_protected(i, j): protected_count += 1 return protected_count"},{"question":"# BACKGROUND: Sophia is an avid gardener who loves to experiment with growing different kinds of plants in her backyard. This season, she decided to plant a variety of fruit trees. Each type of tree grows at a different rate, and she wants to predict how tall each tree will be at the end of the season. Sophia has recorded the initial height of each tree and its average weekly growth rate. # TECHNICAL DETAILS: The growth of each tree is given by the following formula: - New height of the tree after `weeks` weeks = initial height + (weekly growth rate * number of weeks) # TASK: Write a function that takes as input: ``` - The initial height of the tree (in centimeters, a decimal number) - The weekly growth rate of the tree (in centimeters per week, a decimal number) - The duration (in weeks, an integer) ``` and then returns the expected height of the tree at the end of the season. # NOTES: - Heights (both input and output) should be decimals rounded to the nearest tenth. - Duration (input) should be a whole number (integer). If it is not, the function should round to the nearest whole number. - When performing input validation checks, evaluate them in order else your code will not pass the final tests.","solution":"def predict_tree_height(initial_height, weekly_growth_rate, duration): Predicts the height of a tree after a number of weeks, given its initial height and weekly growth rate. Parameters: - initial_height (float): Initial height of the tree in centimeters. - weekly_growth_rate (float): Weekly growth rate of the tree in centimeters. - duration (int): Number of weeks. Returns: - float: Predicted height of the tree rounded to the nearest tenth. if not isinstance(initial_height, (int, float)): raise ValueError(\\"Initial height must be a number\\") if not isinstance(weekly_growth_rate, (int, float)): raise ValueError(\\"Weekly growth rate must be a number\\") if not isinstance(duration, int): raise ValueError(\\"Duration must be an integer\\") # Calculate new height new_height = initial_height + (weekly_growth_rate * duration) # Return the height rounded to the nearest tenth return round(new_height, 1)"},{"question":"**Question: Subarray Sum Equals K** Given an array of integers `nums` and an integer `k`, return the total number of subarrays whose sum equals to `k`. Example 1: ``` Input: nums = [1,1,1], k = 2 Output: 2 Explanation: There are two subarrays [1, 1] with sum 2. ``` Example 2: ``` Input: nums = [1,2,3], k = 3 Output: 2 Explanation: There are two subarrays [1, 2] and [3] with sum 3. ``` **Constraints:** - 1 <= nums.length <= 20,000 - -1000 <= nums[i] <= 1000 - -10^7 <= k <= 10^7 **Function Signature:** ```python def subarray_sum(nums: List[int], k: int) -> int: ```","solution":"from typing import List def subarray_sum(nums: List[int], k: int) -> int: Returns the total number of subarrays whose sum equals to k. count = 0 current_sum = 0 prefix_sums = {0: 1} for num in nums: current_sum += num if (current_sum - k) in prefix_sums: count += prefix_sums[current_sum - k] if current_sum in prefix_sums: prefix_sums[current_sum] += 1 else: prefix_sums[current_sum] = 1 return count"},{"question":"You are given an array of integers and a target sum. Your TASK is to determine if there exists a pair of distinct elements in the array that add up to the target sum. Implement a function find_pair_with_sum(arr, target) that returns a boolean value: `True` if there exists a pair (arr[i], arr[j]) such that i ≠ j and arr[i] + arr[j] = target, otherwise `False`. # Example find_pair_with_sum([2, 4, 6, 8], 10) Output: `True` Explanation: 2 and 8 sum up to 10. find_pair_with_sum([1, 2, 3, 4], 8) Output: `False` Explanation: No pairs add up to 8. find_pair_with_sum([0, -1, 2, -3, 1], -2) Output: `True` Explanation: -1 and -1 sum up to -2 (indices 1 and 4). # Constraints - arr will have at least 2 elements and no more than 10^4 elements. - Each element in the array will be an integer. - The target will be an integer.","solution":"def find_pair_with_sum(arr, target): Determines if there exists a pair of distinct elements in the array that add up to the target sum. :param arr: List of integers :param target: Integer target sum :return: Boolean indicating if such a pair exists seen = set() for number in arr: if target - number in seen: return True seen.add(number) return False"},{"question":"Ayaka loves musical notes and she wants to compose a unique melody by combining different notes. She has a set of notes with different frequencies and each note has a unique integer value. Ayaka wants to create melodic sequences using these notes. A melodic sequence is defined as a series of notes where no frequency is repeated within the sequence. Ayaka must determine how many different non-empty melodic sequences can be formed using all possible combinations of her notes and their unique values. The value of a melodic sequence is defined as the sum of the frequencies of the notes in that sequence. Given that she can only form sequences from 1 to n unique notes, calculate the total number of melodic sequences and the maximum value possible among all sequences. -----Input----- The first line contains an integer n (1 leq n leq 100) — the number of unique notes. The second line contains n integers f_1, f_2, ldots, f_n (1 leq f_i leq 100) — the frequencies of the notes. -----Output----- Print two integers: the total number of different melodic sequences that can be formed and the maximum value possible among all sequences. ----- -----Examples----- Input 3 1 2 3 Output 7 6 Input 4 2 3 5 7 Output 15 17","solution":"from itertools import chain, combinations def melodic_sequences(n, frequencies): This function calculates the total number of melodic sequences and the maximum value among all possible combinations of the notes. :param n: An integer representing the number of unique notes. :param frequencies: A list of integers representing the frequencies of the notes. :return: A tuple containing the total number of melodic sequences and the maximum value. # Helper function to get all non-empty subsets of a list def all_subsets(lst): # chain.from_iterable(combinations(lst, r) for r in range(1, len(lst) + 1)) subsets = chain.from_iterable(combinations(lst, r) for r in range(1, len(lst) + 1)) return subsets # Get all non-empty subsets of frequencies subsets = all_subsets(frequencies) # Compute the number of subsets (melodic sequences) total_sequences = 2**n - 1 # Compute the maximum value by summing all the frequencies max_value = sum(frequencies) return total_sequences, max_value"},{"question":"You are given a binary string `s` of length `n`. The string contains only \'0\'s and \'1\'s. You need to perform the following operation exactly once: choose two distinct indices `i` and `j` (1-based) such that `s[i] = s[j]` and swap the characters at the two indices. Your task is to determine whether it is possible to perform such an operation to make the string more balanced. A string is considered more balanced if the absolute difference between the number of \'0\'s and \'1\'s in the string is minimized after the swap. Return `True` if it is possible to make the string more balanced, otherwise return `False`. Example 1: Input: s = \\"110\\" Output: True Explanation: You can swap the characters at indices 2 and 3 to get \\"101\\", which has 1 \'1\' and 2 \'0\'s. Example 2: Input: s = \\"1110\\" Output: True Explanation: You can swap the characters at indices 2 and 3 to get \\"1011\\", which has 2 \'1\'s and 2 \'0\'s. Example 3: Input: s = \\"000\\" Output: False Explanation: No matter which characters you swap, the string will still have 3 \'0\'s and 0 \'1\'s, which is not more balanced. Example 4: Input: s = \\"1010\\" Output: True Explanation: The string is already balanced. Constraints: * `n == s.length` * `2 <= n <= 10^5` * `s[i]` is either \'0\' or \'1\'.","solution":"def can_be_more_balanced(s): Determines if it\'s possible to make the binary string \'s\' more balanced by swapping any two characters with the same value. count_0 = s.count(\'0\') count_1 = s.count(\'1\') # If the difference between the number of \'0\'s and \'1\'s is less than 2, we can always balance it more. if abs(count_0 - count_1) < 2: return True # If there are no \'1\'s or no \'0\'s, we cannot make it more balanced. if count_0 == 0 or count_1 == 0: return False return True"},{"question":"Design a function that receives a string with words separated by single spaces and returns a list of tuples, where each tuple contains a word from the string and its corresponding frequency count. The function should ignore punctuation, and the words should be case-insensitive in the frequency count. For example: ``` word_frequency(\\"Hello world! Hello!\\") ``` Should return: ``` [(\\"hello\\", 2), (\\"world\\", 1)] ```","solution":"import re from collections import Counter def word_frequency(sentence): Returns a list of tuples with each word from the sentence and its frequency count. The function ignores punctuation and is case-insensitive. # Convert to lowercase and remove punctuation using regex processed_sentence = re.sub(r\'[^ws]\', \'\', sentence.lower()) words = processed_sentence.split() frequency = Counter(words) return list(frequency.items())"},{"question":"# Islands Count Given a 2D grid map of `1`s (land) and `0`s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water. # Function Signature ```python def numIslands(grid: List[List[int]]) -> int: ``` # Example ```python grid = [ [1,1,0,0,0], [1,1,0,0,0], [0,0,1,0,0], [0,0,0,1,1] ] numIslands(grid) # Output: 3 ``` # Explanation - Island #1 includes the first two rows and the first two columns - Island #2 includes the third row and the third column - Island #3 includes the last row and the last two columns # Constraints - The grid can have a maximum size of `50 x 50`.","solution":"def numIslands(grid): if not grid: return 0 num_rows = len(grid) num_cols = len(grid[0]) visited = [[False for _ in range(num_cols)] for _ in range(num_rows)] def dfs(row, col): if row < 0 or col < 0 or row >= num_rows or col >= num_cols or visited[row][col] or grid[row][col] == 0: return visited[row][col] = True dfs(row - 1, col) dfs(row + 1, col) dfs(row, col - 1) dfs(row, col + 1) num_islands = 0 for row in range(num_rows): for col in range(num_cols): if grid[row][col] == 1 and not visited[row][col]: dfs(row, col) num_islands += 1 return num_islands"},{"question":"**Introduction** Minerva is developing a sale optimization program for a shopping website. One of the key features she is working on involves analyzing consecutive sales records to determine periods of sustained growth in sales. She specifically wants to identify the longest subarray where the number of items sold increases with each day. **Task** Given an array representing the number of items sold on each day, find the length of the longest subarray where each element is greater than the previous one. **Input:** An array of `N` non-negative integers, where the `i-th` integer represents the number of items sold on the `i-th` day. **Output:** Return a single integer representing the length of the longest subarray with strictly increasing sales records. **Examples**: ``` ([5, 6, 3, 5, 7, 8, 9, 1, 2]) => 5 ([1, 2, 3, 4, 5]) => 5 ([10, 9, 8, 7, 6]) => 1 ([3, 3, 3, 3, 3]) => 1 ([1, 2, 2, 3, 4, 1, 6, 7]) => 3 ```","solution":"def longest_increasing_subarray_len(sales): Returns the length of the longest subarray where each element is greater than the previous one. Args: sales (list of int): List of sales records. Return: int: Length of the longest increasing subarray. if not sales: return 0 max_len = 1 current_len = 1 for i in range(1, len(sales)): if sales[i] > sales[i - 1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 return max(max_len, current_len)"},{"question":"Write a function that takes a string containing a mathematical expression with mixed operators (+, -, *, /) and parentheses, and returns the result of the expression. The function should handle integers and floats and should follow the standard order of operations. Assume the input expression is always valid. Example: ``` Input: \\"2 + (3 * 4) - 6 / (1 + 1)\\" Output: 12.0 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing +, -, *, / operators and parentheses. Parameters: expression (str): The mathematical expression as a string. Returns: float: The result of the expression. try: # We can use the eval function in a controlled manner result = eval(expression, {\\"__builtins__\\": None}, {}) return float(result) except (SyntaxError, NameError, ZeroDivisionError) as e: raise ValueError(f\\"Invalid expression: {str(e)}\\")"},{"question":"Your task is to write a function `flatten_nested_list(nested_list)`, which takes a nested list of integers (i.e., a list that can contain other lists, which in turn can contain more lists, and so on) and returns a flattened version of this list. For example, if the input list is: ```python nested_list = [1, [2, 3], [4, [5, 6]], 7, [[]], [8, [9, [10]]]] ``` The output should be: ```python [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ``` **Constraints:** - You should not use any built-in functions specifically designed for flattening lists (e.g., `itertools.chain`, `itertools.chain.from_iterable`, `sum(nested_list, [])`, etc.). - The function should be able to handle arbitrarily nested lists. **Signature:** ```python def flatten_nested_list(nested_list): # Your code goes here ``` **Examples:** Input: ```python nested_list = [1, [2, [3, 4], 5], 6, []] ``` Output: ```python [1, 2, 3, 4, 5, 6] ``` Input: ```python nested_list = [] ``` Output: ```python [] ```","solution":"def flatten_nested_list(nested_list): Flattens a nested list of integers. Args: nested_list (list): A list that can contain other lists, which may be nested arbitrarily. Returns: list: A flattened version of the input list. result = [] for item in nested_list: if isinstance(item, list): result.extend(flatten_nested_list(item)) else: result.append(item) return result"},{"question":"Given a list containing the daily temperatures, you need to write a function that returns a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put `0` instead. For example, given the list `temperatures = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`. Consider the current day `(i)`, for each future day `(j)`: - If temperatures[j] > temperatures[i], calculate the number of days `(j - i)` and update your answer for day `i`. # Constraints: - Each temperature value in `temperatures` will be between `30` and `100`. - The list `temperatures` will have at least `1` and at most `30000` temperatures. Function Signature ```python def dailyTemperatures(temperatures: List[int]) -> List[int]: ``` # Examples **Example 1:** ```python input: [73, 74, 75, 71, 69, 72, 76, 73] output: [1, 1, 4, 2, 1, 1, 0, 0] ``` **Example 2:** ```python input: [30, 40, 50, 60] output: [1, 1, 1, 0] ``` **Example 3:** ```python input: [30, 60, 90] output: [1, 1, 0] ```","solution":"from typing import List def dailyTemperatures(temperatures: List[int]) -> List[int]: Returns a list representing the number of days until a warmer temperature for each day. If there is no future day with a warmer temperature, returns 0 for that day. answer = [0] * len(temperatures) stack = [] # stack of indices for i, temp in enumerate(temperatures): while stack and temperatures[stack[-1]] < temp: prev_index = stack.pop() answer[prev_index] = i - prev_index stack.append(i) return answer"},{"question":"You are given a string containing a single phone number. The phone number is formatted in one of the following ways: - (123) 456-7890 - 123-456-7890 - 123.456.7890 - 1234567890 Write a function that normalizes the phone number to the format 123-456-7890. Example: normalize(\\"(123) 456-7890\\") -> \\"123-456-7890\\" normalize(\\"123.456.7890\\") -> \\"123-456-7890\\" normalize(\\"1234567890\\") -> \\"123-456-7890\\" Constraints: - The input string is guaranteed to represent a valid phone number using one of the permitted formats. - The phone number consists of exactly 10 digits.","solution":"def normalize(phone_number): Normalizes the phone number to the format 123-456-7890. digits = \'\'.join(filter(str.isdigit, phone_number)) formatted_phone_number = f\\"{digits[:3]}-{digits[3:6]}-{digits[6:]}\\" return formatted_phone_number"},{"question":"Given an array of integers, create a function that returns an array containing the product of all elements except the one at each index. You must not use the division operation to solve this problem. Example ```python product_except_self([1, 2, 3, 4]) -> [24, 12, 8, 6] product_except_self([-1, 1, 0, -3, 3]) -> [0, 0, 9, 0, 0] ``` Technical Details - The input array will contain at least one integer. - The elements can be positive, negative, or zero. - Ensure the solution runs in O(n) time complexity.","solution":"def product_except_self(nums): Returns an array such that each element at index \'i\' is the product of all the elements of nums except nums[i], without using division. length = len(nums) # Initialize the output array with 1s output = [1] * length # Calculate the prefix product for each element prefix = 1 for i in range(length): output[i] = prefix prefix *= nums[i] # Calculate the postfix product for each element postfix = 1 for i in range(length - 1, -1, -1): output[i] *= postfix postfix *= nums[i] return output"},{"question":"You are designing a spell checker for document processing. Each word in the document should be checked against a given dictionary of valid words, and any words that are not in the dictionary should be marked as incorrect. Write a function that takes two arguments, 1. A list of words representing the document. 2. A set of valid words representing the dictionary. and returns a list of tuples where each tuple contains an incorrect word and its index in the document. The words should be compared in a case-insensitive manner. If there are no incorrect words, return an empty list. Example: ```python document = [\\"This\\", \\"is\\", \\"a\\", \\"smple\\", \\"txt\\", \\"document\\"] dictionary = {\\"this\\", \\"is\\", \\"a\\", \\"simple\\", \\"text\\", \\"document\\"} ``` Output: ```python [(\'smple\', 3), (\'txt\', 4)] ```","solution":"def check_spelling(document, dictionary): Checks spelling in the document against the dictionary and returns a list of incorrect words and their indices. Parameters: document (list): A list of words representing the document. dictionary (set): A set of valid words representing the dictionary. Returns: list: A list of tuples containing incorrect words and their indices. incorrect_words = [] dictionary_lower = {word.lower() for word in dictionary} for index, word in enumerate(document): if word.lower() not in dictionary_lower: incorrect_words.append((word, index)) return incorrect_words"},{"question":"Write a function named `isToeplitzMatrix` that takes a two-dimensional array (matrix) of integers and returns `true` if the matrix is a Toeplitz matrix, and `false` otherwise. In a Toeplitz matrix, each descending diagonal from left to right is constant (i.e., all elements on the diagonal are the same). For example, the following matrix is a Toeplitz matrix: ``` 1 2 3 4 5 1 2 3 9 5 1 2 ``` In contrast, the following matrix is not a Toeplitz matrix: ``` 1 2 3 4 5 1 9 3 9 5 1 2 ``` Function Signature: ```python def isToeplitzMatrix(matrix: List[List[int]]) -> bool: ```","solution":"from typing import List def isToeplitzMatrix(matrix: List[List[int]]) -> bool: Returns True if the given matrix is a Toeplitz matrix, otherwise False. A matrix is a Toeplitz matrix if every diagonal from top-left to bottom-right has the same elements. if not matrix or not matrix[0]: return False rows = len(matrix) cols = len(matrix[0]) for row in range(1, rows): for col in range(1, cols): if matrix[row][col] != matrix[row - 1][col - 1]: return False return True"},{"question":"Given a list of integers, a number that appears at least three times in the list is called a \\"triplet number\\". Write a function `find_triplet_numbers` that accepts a list of integers and returns a sorted list of \\"triplet numbers\\" in ascending order. If no such number exists, return an empty list. Example: ```python find_triplet_numbers([1, 2, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5]) # should return [2, 3, 5] find_triplet_numbers([7, 8, 9, 7, 8, 9, 10]) # should return [] find_triplet_numbers([4, 4, 4, 2, 2, 2, 6, 6, 1]) # should return [2, 4] ```","solution":"def find_triplet_numbers(lst): Returns a sorted list of integers that appear at least three times in the input list. from collections import Counter counter = Counter(lst) triplet_numbers = [number for number, count in counter.items() if count >= 3] return sorted(triplet_numbers)"},{"question":"Given an array of integers, return the length of the longest subarray with all elements the same. For example, given the array `[1, 1, 0, 1, 1, 1]`, the longest subarray with all elements the same is `[1, 1, 1]`, so the function should return 3. Write a function `longestUniformSubarray(arr)` that takes an array of integers `arr` and returns an integer representing the length of the longest uniform subarray. If the input is not an array of integers, return null. **Example**: ``` longestUniformSubarray([1, 1, 0, 1, 1, 1]) -> 3 longestUniformSubarray([]) -> 0 longestUniformSubarray([5, 5, 5, 5, 5]) -> 5 longestUniformSubarray([3, 1, 2, 3]) -> 1 longestUniformSubarray(\\"string\\") -> null ```","solution":"def longestUniformSubarray(arr): Returns the length of the longest subarray with all elements the same. If the input is not an array of integers, return None. if not isinstance(arr, list) or not all(isinstance(x, int) for x in arr): return None if not arr: return 0 max_length = 1 current_length = 1 current_value = arr[0] for value in arr[1:]: if value == current_value: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 current_value = value max_length = max(max_length, current_length) return max_length"},{"question":"You are tasked with managing a database of user access times. Each record in the database contains a user ID and a timestamp, indicating when that user accessed the system. Your task is to identify the users who have accessed the system multiple times and return a list of those user IDs, sorted by the user ID in ascending order. However, there are additional constraints: - If a user has accessed the system more than 10 times, they should be excluded from the output list, as they are considered system administrators. - The access time records are provided as a list of tuples where each tuple contains two elements: the user ID (an integer) and the timestamp (a string in the format \\"YYYY-MM-DD HH:MM:SS\\"). # Task Write a function `find_frequent_users(records)` that identifies users who accessed the system more than once but less than or equal to 10 times and returns their user IDs sorted in ascending order. Function signature: `def find_frequent_users(records: List[Tuple[int, str]]) -> List[int]` # Example For `records = [(1, \\"2023-10-01 12:00:00\\"), (2, \\"2023-10-01 12:05:00\\"), (1, \\"2023-10-01 12:10:00\\"), (3, \\"2023-10-01 12:15:00\\"), (3, \\"2023-10-01 12:20:00\\"), (3, \\"2023-10-01 12:25:00\\"), (4, \\"2023-10-01 12:30:00\\"), (2, \\"2023-10-01 12:35:00\\"), (2, \\"2023-10-01 12:40:00\\"), (5, \\"2023-10-01 12:45:00\\"), (1, \\"2023-10-01 12:50:00\\"), (2, \\"2023-10-01 12:55:00\\"), (1, \\"2023-10-01 13:00:00\\"), (2, \\"2023-10-01 13:05:00\\"), (2, \\"2023-10-01 13:10:00\\")]`, the output should be `[1, 2, 3]`. For `records = [(6, \\"2023-10-01 12:00:00\\"), (6, \\"2023-10-01 12:01:00\\"), (6, \\"2023-10-01 12:02:00\\"), (6, \\"2023-10-01 12:03:00\\"), (6, \\"2023-10-01 12:04:00\\"), (6, \\"2023-10-01 12:05:00\\"), (6, \\"2023-10-01 12:06:00\\"), (6, \\"2023-10-01 12:07:00\\"), (6, \\"2023-10-01 12:08:00\\"), (6, \\"2023-10-01 12:09:00\\"), (6, \\"2023-10-01 12:10:00\\")]`, the output should be `[]`. # Note - The `records` list is guaranteed to have at least one entry. - The timestamps are primarily for record purposes and are not utilized for any computation in your solution.","solution":"from collections import defaultdict from typing import List, Tuple def find_frequent_users(records: List[Tuple[int, str]]) -> List[int]: Identifies users who accessed the system more than once but less than or equal to 10 times. Returns their user IDs sorted in ascending order. user_access_count = defaultdict(int) # Count accesses for each user for user_id, timestamp in records: user_access_count[user_id] += 1 # Filter users based on their access count frequent_users = [user_id for user_id, count in user_access_count.items() if 1 < count <= 10] # Sort user IDs in ascending order return sorted(frequent_users)"},{"question":"You are given a series of segments represented as pairs of coordinates. Each segment is either vertical or horizontal. Your task is to determine the number of segments that overlap with any other segment. A segment is defined by its two endpoints (x1, y1) and (x2, y2). It is either vertical if x1 == x2, or horizontal if y1 == y2. The segments are considered to overlap if they share at least one point in common. ---Input--- The first line contains an integer T (1 <= T <= 100) - the number of test cases. For each test case, the first line contains an integer n (1 <= n <= 200) - the number of segments. Then follow n lines, each containing four integers x1, y1, x2, y2 - the coordinates of the endpoints of each segment. ---Output--- For each test case, output a single integer - the number of segments that overlap with at least one other segment. ---Example--- Input 2 3 1 2 1 4 1 3 1 5 2 2 2 4 4 0 0 0 2 1 1 1 3 2 2 2 4 3 0 3 2 Output 2 0","solution":"def count_overlapping_segments(t, test_cases): results = [] for n, segments in test_cases: overlaps = 0 visited = [False] * n for i in range(n): for j in range(i+1, n): if is_overlapping(segments[i], segments[j]): if not visited[i]: overlaps += 1 visited[i] = True if not visited[j]: overlaps += 1 visited[j] = True results.append(overlaps) return results def is_overlapping(seg1, seg2): x11, y11, x12, y12 = seg1 x21, y21, x22, y22 = seg2 if x11 == x12 and x21 == x22 and x11 == x21: # both vertical return (max(y11, y12) >= min(y21, y22) and max(y21, y22) >= min(y11, y12)) elif y11 == y12 and y21 == y22 and y11 == y21: # both horizontal return (max(x11, x12) >= min(x21, x22) and max(x21, x22) >= min(x11, x12)) return False"},{"question":"In a given text, a word is defined as a contiguous sequence of alphabetic characters. Write a program that reads a string and returns the word that appears the most frequently in the text. If there are multiple words with the highest frequency, return the one that appears first. **Constraints:** - The input text consists of lowercase and uppercase alphabetic characters and spaces. - The function should be case-insensitive, meaning \\"Word\\" and \\"word\\" should be considered the same. **Example:** ```python Input: \\"To be or not to be, that is the question.\\" Output: \\"to\\" Input: \\"Hello world! It\'s a pleasant day in the world of programming.\\" Output: \\"world\\" ``` Write a function `most_frequent_word(text: str) -> str` to solve this problem.","solution":"import re from collections import Counter def most_frequent_word(text: str) -> str: Returns the most frequently appearing word in the text. If multiple words have the same highest frequency, returns the one that appears first. # Convert text to lowercase and find all words using regex words = re.findall(r\'b[a-zA-Z]+b\', text.lower()) # Use Counter to count the frequency of each word word_counts = Counter(words) # Find the max frequency max_frequency = max(word_counts.values()) # Iterate over words in original order and return the first with max frequency for word in words: if word_counts[word] == max_frequency: return word"},{"question":"Given an array of integers B, return true if and only if it is possible to partition the array into three non-empty parts with equal sums. Example 1: Input: B = [0,2,1,-6,6,-7,9,1,2,0,1] Output: true Explanation: We can partition the array into [0,2,1], [-6,6,-7,9], and [1,2,0,1] which all have sums of 3. Example 2: Input: B = [0,2,1,-6,6,7,9,-1,2,0,1] Output: false Example 3: Input: B = [3,3,6,5,-2,2,5,1,-9,4] Output: true Explanation: We can partition the array into [3,3], [6,5,-2,2], and [5,1,-9,4] which all have sums of 6. Constraints: 1 <= B.length <= 5 * 104 -104 <= B[i] <= 104","solution":"def can_partition_into_three_equal_sums(B): Determine if the array B can be partitioned into three non-empty parts with equal sums. total_sum = sum(B) if total_sum % 3 != 0: return False target_sum = total_sum // 3 part_sum = 0 count = 0 for num in B: part_sum += num if part_sum == target_sum: count += 1 part_sum = 0 if count == 3: return True return False"},{"question":"Many programming languages provide various ways to handle lists or arrays. One common problem is to find the intersection of two lists, i.e., the elements that are common to both lists but without duplicates in result. Task Your task is to write a function that takes two lists of integers and returns a list of their intersection. The elements in the returned list should be unique. Examples ```python intersection([1, 2, 2, 1], [2, 2]) #=> [2] ``` ```python intersection([4, 9, 5], [9, 4, 9, 8, 4]) #=> [4, 9] ``` Constraints - Each input list will contain between 1 and 1000 integers. - Each integer will be between -1000 and 1000.","solution":"def intersection(list1, list2): Returns a list of unique elements that are common to both list1 and list2. # Convert both lists to sets to remove duplicates and find intersection set1 = set(list1) set2 = set(list2) # Find intersection of both sets intersected_set = set1.intersection(set2) # Convert the intersected set back to a list and return return list(intersected_set)"},{"question":"Write a function named `isLeapYear` which receives a single integer parameter, year. The function should return true if the year is a leap year and false otherwise. A leap year is defined as follows: - A year that is divisible by 400 is a leap year. - If it is not divisible by 400, but divisible by 100, it is not a leap year. - If it is not divisible by 100, but divisible by 4, it is a leap year. - All other years are not leap years. Examples: ```python isLeapYear(2000) -> true isLeapYear(1900) -> false isLeapYear(2004) -> true isLeapYear(2001) -> false ```","solution":"def isLeapYear(year): Determines if the given year is a leap year. Parameters: year (int): The year to check. Returns: bool: True if the year is a leap year, False otherwise. if year % 400 == 0: return True elif year % 100 == 0: return False elif year % 4 == 0: return True else: return False"},{"question":"A farmer has a rectangular field that is divided into a grid of cells. Each cell contains either a crop (C) or a pest (P). The crop cells need watering. The farmer has a water spraying mechanism that can be activated for each row or column, which will water all crop cells (C) in that row or column. The farmer wants to find out the minimum number of activations needed. Write a function `min_sprays` that takes in a 2D list `field` representing the grid of cells, where `field[i][j]` is \'C\' if the cell contains a crop, and \'P\' if it contains a pest. The function should return the minimum number of activations required to water all the crop cells. # Constraints - The grid will have at least one row and one column. - The grid will contain only \'C\' and \'P\'. - The maximum dimension of the grid could be up to 1000x1000 cells. # Example ``` field = [ [\'C\', \'P\', \'P\'], [\'P\', \'C\', \'P\'], [\'C\', \'P\', \'C\'] ] min_sprays(field) should return 3 ``` Explanation: One way to water all crop cells with three activations is: - Spray the second column (waters cells at (0,1) and (2,1)). - Spray the first row (waters cells at (0,0)). - Spray the last row (waters cells at (2,0) and (2,2)). # Example ``` field = [ [\'C\', \'P\'], [\'P\', \'C\'] ] min_sprays(field) should return 2 ``` Explanation: One way to water all crop cells with two activations is: - Spray the first row (waters cells at (0,0)). - Spray the second column (waters cells at (1,1)).","solution":"def min_sprays(field): Returns the minimum number of sprays required to water all crop cells. rows, cols = len(field), len(field[0]) row_has_crop = [any(cell == \'C\' for cell in row) for row in field] col_has_crop = [any(field[r][c] == \'C\' for r in range(rows)) for c in range(cols)] row_activations = sum(row_has_crop) col_activations = sum(col_has_crop) return min(row_activations, col_activations)"},{"question":"Farmer John has a rectangular field that measures `N` by `M` units. He wants to build a fence that encloses the entire field, but he must place one and only one gate on each side of the rectangle for easy access. The cost of building the fence per unit length is `C` dollars, and the cost of installing each gate is `G` dollars. Write a program to compute the total cost for Farmer John to fence his field with the required gates. -----Input:----- - The first line contains an integer `T`, the number of test cases. - Each test case consists of a single line containing four integers `N`, `M`, `C`, and `G`. -----Output:----- For each test case, output a single line with the total cost in dollars. -----Constraints----- - 1 leq T leq 1000 - 1 leq N, M leq 10000 - 1 leq C leq 100 - 1 leq G leq 1000 -----Sample Input:----- 2 10 5 2 100 15 10 3 200 -----Sample Output:----- 60 108 -----EXPLANATION:----- In the first test case: - The perimeter of the field is 2 times (10 + 5) = 30 units. - The cost to fencing the perimeter is 30 times 2 = 60 dollars. - The total cost for gates on four sides is 4 times 100 = 400 dollars. - The total cost is 60 + 400 = 460 dollars. However, note that the required output is just the cost of the fencing without adding the gate costs. In the second test case: - The perimeter of the field is 2 times (15 + 10) = 50 units. - The cost to fencing the perimeter is 50 times 3 = 150 dollars. - The total cost for gates on four sides is 4 times 200 = 800 dollars. - The total cost is 150 + 800 = 950 dollars. Note: Despite the explanation above, you are just required to compute and print the cost of the fencing only without the gate cost.","solution":"def compute_fencing_cost(N, M, C): Computes the cost of fencing Farmer John\'s field. Parameters: N (int): Length of the field. M (int): Width of the field. C (int): Cost per unit length of the fence. Returns: int: Total cost of the fencing. perimeter = 2 * (N + M) fencing_cost = perimeter * C return fencing_cost def main(inputs): results = [] for i in range(1, inputs[0] + 1): N, M, C, G = inputs[i] cost = compute_fencing_cost(N, M, C) results.append(cost) return results"},{"question":"Michael is organizing a summer camp for kids and needs to allocate them into various activity groups based on their interests. Each kid has a list of activities they are interested in, and each activity has a maximum number of spots available. Implement a function `allocateActivities` that takes two arguments: - `kidsInterests`, an array of dictionaries where each dictionary contains the name of a kid (under the key \'name\') and a list of activities they are interested in (under the key \'activities\'). - `activitySpots`, a dictionary where each key is the name of an activity and each value is the maximum number of spots available for that activity. The function should return a dictionary where the keys are activity names and the values are lists of kids who are assigned to those activities. Each kid can be assigned to only one activity based on their interests and the available spots, and their highest-priority interest should be considered first. If a kid cannot be placed in any of their preferred activities due to capacity constraints, they should not be placed in any activity. Also note: - All activities will have at least one spot available. - Each kid has at least one interest. - There will be no tie in the number of spots available; each activity has a distinct number of spots. Example: ```python kidsInterests = [ {\'name\': \'Alice\', \'activities\': [\'Archery\', \'Painting\', \'Swimming\']}, {\'name\': \'Bob\', \'activities\': [\'Painting\', \'Swimming\']}, {\'name\': \'Charlie\', \'activities\': [\'Archery\', \'Swimming\']} ] activitySpots = { \'Archery\': 1, \'Painting\': 2, \'Swimming\': 1 } allocateActivities(kidsInterests, activitySpots) # Should output: # { # \'Archery\': [\'Alice\'], # \'Painting\': [\'Bob\'], # \'Swimming\': [\'Charlie\'] # } ```","solution":"def allocateActivities(kidsInterests, activitySpots): allocation = {activity: [] for activity in activitySpots} for kid in kidsInterests: for activity in kid[\'activities\']: if activitySpots[activity] > 0: allocation[activity].append(kid[\'name\']) activitySpots[activity] -= 1 break return allocation"},{"question":"Given an array of integers nums and an integer target, return true if there are two distinct indices i and j in the array such that nums[i] + nums[j] is equal to the target. Otherwise, return false. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: true Explanation: nums[0] + nums[1] = 2 + 7 = 9, which is equal to the target. Example 2: Input: nums = [1, 2, 3, 4], target = 8 Output: false Explanation: There are no two indices i and j such that nums[i] + nums[j] = 8. Example 3: Input: nums = [3, 3], target = 6 Output: true Explanation: nums[0] + nums[1] = 3 + 3 = 6, which is equal to the target. Example 4: Input: nums = [0, 4, 3, 0], target = 0 Output: true Explanation: nums[0] + nums[3] = 0 + 0 = 0, which is equal to the target. Example 5: Input: nums = [-1, -2, -3, -4, -5], target = -8 Output: true Explanation: nums[2] + nums[4] = -3 + -5 = -8, which is equal to the target. Constraints: - 2 <= nums.length <= 10^4 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def has_target_sum(nums, target): Returns true if there are two distinct indices i and j in the array such that nums[i] + nums[j] is equal to the target. seen = {} for i, num in enumerate(nums): complementary = target - num if complementary in seen: return True seen[num] = i return False"},{"question":"Your friend runs a bakery and wants you to create a function that helps keep track of ingredient stock levels based on a series of recipes and orders placed. # Story Each bakery recipe consists of a list of ingredients, each with its required quantity. A customer order specifies the name of the baked item and the number of units ordered. The bakery needs to know if it has enough ingredients in stock to fulfill each order as they come in. Given a stock of raw ingredients, a list of recipes, and a sequence of orders, your task is to determine whether each order can be fulfilled or not. The stock should be updated only after successfully fulfilling an order. If an order cannot be fulfilled due to insufficient ingredient stock, it should be rejected, and this decision should be recorded. # Task You will be given three arguments: 1. A dictionary representing the initial stock of ingredients. 2. A dictionary of recipes, where keys are the names of baked items and values are dictionaries representing the required ingredients and their quantities. 3. A list of orders, where each order is a tuple containing the name of the baked item and the number of units ordered. Return a list of strings, where each string states whether the order is \\"Fulfilled\\" or \\"Rejected\\", corresponding to each order in the sequence. Here is an example of how the data is structured: # Example: ```python initial_stock = { \\"flour\\": 1000, # in grams \\"sugar\\": 500, # in grams \\"eggs\\": 10, # unit count \\"butter\\": 200 # in grams } recipes = { \\"cake\\": {\\"flour\\": 200, \\"sugar\\": 100, \\"eggs\\": 2, \\"butter\\": 50}, \\"cookie\\": {\\"flour\\": 100, \\"sugar\\": 50, \\"eggs\\": 1, \\"butter\\": 30} } orders = [ (\\"cake\\", 1), (\\"cake\\", 2), (\\"cookie\\", 5), (\\"cake\\", 1) ] expected_output = [\\"Fulfilled\\", \\"Fulfilled\\", \\"Rejected\\", \\"Fulfilled\\"] ``` In the example above: 1. The first order for 1 cake is \\"Fulfilled\\". 2. The second order for 2 cakes is \\"Fulfilled\\". 3. The third order for 5 cookies is \\"Rejected\\" because there isn\'t enough stock. 4. The fourth order for 1 cake is \\"Fulfilled\\" because the stock was sufficient. Good luck!","solution":"def can_fulfill_orders(initial_stock, recipes, orders): Determines whether each order can be fulfilled given the initial stock and recipes. Args: initial_stock (dict): A dictionary of ingredient stocks. recipes (dict): A dictionary of recipes with required ingredients and quantities. orders (list): A list of tuples where each tuple is (baked_item, quantity). Returns: list: A list of strings \\"Fulfilled\\" or \\"Rejected\\" based on the ability to fulfill each order. results = [] current_stock = initial_stock.copy() for order in orders: item, quantity = order if item not in recipes: results.append(\\"Rejected\\") continue needed_ingredients = recipes[item] enough_stock = True for ingredient, required_amount in needed_ingredients.items(): if ingredient not in current_stock or current_stock[ingredient] < required_amount * quantity: enough_stock = False break if enough_stock: for ingredient, required_amount in needed_ingredients.items(): current_stock[ingredient] -= required_amount * quantity results.append(\\"Fulfilled\\") else: results.append(\\"Rejected\\") return results"},{"question":"# Task You are given an array `nums` of integers and an integer `target`. Return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. If no solution is found, return an empty list. # Example For `nums = [2, 7, 11, 15]` and `target = 9`, the output should be `[0, 1]`. The sum of nums[0] and nums[1] is 2 + 7 = 9, the target. For `nums = [3, 2, 4]` and `target = 6`, the output should be `[1, 2]`. The sum of nums[1] and nums[2] is 2 + 4 = 6, the target. For `nums = [3, 3]` and `target = 6`, the output should be `[0, 1]`. The sum of nums[0] and nums[1] is 3 + 3 = 6, the target. # Input/Output - `[input]` integer array `nums` An array of integers. `2 <= nums.length <= 10^4` `-10^9 <= nums[i] <= 10^9` - `[input]` integer `target` The target sum. `-10^9 <= target <= 10^9` - `[output]` an integer array The indices of the two numbers that add up to `target`, or an empty list if no such numbers exist.","solution":"def two_sum(nums, target): Returns the indices of the two numbers such that they add up to target. :param nums: List[int] - A list of integers. :param target: int - The target sum. :return: List[int] - The indices of the two numbers that add up to target, or an empty list if no such numbers exist. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"A popular form of encoding text is called \\"Caesar Cipher.\\" In a Caesar Cipher, each letter in the plaintext is shifted a certain number of places down or up the alphabet. For example, with a shift of 3: - A would be replaced by D, - B would become E, - and so on, until - X would shift to A, - Y to B, - Z to C. Write a function `caesar_cipher` that takes in two arguments: a string `text` and an integer `shift`. The function should return the encoded text using a Caesar Cipher with the given shift. Ensure that only alphabetical characters are shifted and that the case of the letters is preserved. Non-alphabetic characters should remain unchanged. # Function Signature: ```python def caesar_cipher(text: str, shift: int) -> str: pass ``` # Examples: ```python caesar_cipher(\\"Hello, World!\\", 3) # Output: \\"Khoor, Zruog!\\" caesar_cipher(\\"Python\\", 5) # Output: \\"Udymts\\" caesar_cipher(\\"abcXYZ\\", 2) # Output: \\"cdeZAB\\" ``` # Constraints: - `shift` can be any integer (both positive and negative). - The alphabet is considered to be circular for this cipher, so shifting beyond \'Z\' should wrap around to \'A\', and vice versa. # Notes: - You may assume that the input `text` contains only printable ASCII characters. - Uppercase and lowercase letters should be treated independently.","solution":"def caesar_cipher(text: str, shift: int) -> str: def shift_char(c, shift_amount): if c.isalpha(): base = ord(\'A\') if c.isupper() else ord(\'a\') return chr((ord(c) - base + shift_amount) % 26 + base) return c return \'\'.join(shift_char(c, shift) for c in text)"},{"question":"**Task** You are to create an anagram grouping function using Python that takes in a list of words and groups them together if they are anagrams of each other. **Inputs:** - `words`: A list of strings where each string is a word. All words contain only lowercase English letters. **Outputs:** - A list of lists, where each inner list contains words that are anagrams of each other. Each sublist should contain the anagrams in the order they appeared in the input list. **Constraints:** - The number of given words will be between 1 and 1000. - Each word will have between 1 and 100 characters. ** Example** For `words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]`, the output should be: ``` [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] ``` For `words = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"rat\\", \\"tar\\", \\"art\\"]`, the output should be: ``` [ [\\"listen\\", \\"silent\\", \\"enlist\\"], [\\"rat\\", \\"tar\\", \\"art\\"] ] ``` **Note:** - The order of the sublists and the order of words in each sublist should follow the order of their first appearance in the input list.","solution":"from collections import defaultdict def group_anagrams(words): Groups the given list of words into anagrams. Arguments: words -- a list of strings Returns: A list of lists, where each inner list contains words that are anagrams. anagram_dict = defaultdict(list) for word in words: # Sort the word and use the sorted tuple as the key key = tuple(sorted(word)) anagram_dict[key].append(word) return list(anagram_dict.values())"},{"question":"# Task The Grand Sorcerer has a spellbook filled with magical spells. Each spell is represented as a string of lowercase characters. He wants to know if there exists any spell in his spellbook that is a subsequence of another spell in the same book. Your task is to write a function that takes in a list of spells and determines if there is any pair of spells such that one spell is a subsequence of the other. Return true if such a pair exists and false otherwise. # Input/Output - `[input]` list of strings `spells` A list of strings representing the spells in the spellbook. Each string contains only lowercase letters (`\'a\'` to `\'z\'`). `2 <= len(spells) <= 50` `1 <= len(spell) <= 50` for each string `spell` in `spells` - `[output]` a boolean value `true` if there is any pair of spells where one is a subsequence of the other, `false` otherwise. # Example ```python spellbook = [\\"abc\\", \\"ac\\", \\"bca\\", \\"def\\"] is_subsequence_present(spellbook) => true ``` # Note - \\"ac\\" is a subsequence of \\"abc\\", so the output is true. - A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.","solution":"def is_subsequence_present(spellbook): Determines if there exists any pair of spells such that one spell is a subsequence of another spell in the same book. :param spellbook: List of strings representing the spells in the spellbook. :return: True if there is a pair of spells where one is a subsequence of another, otherwise False. def is_subsequence(s1, s2): Helper function to check if s1 is a subsequence of s2. iter_s2 = iter(s2) return all(char in iter_s2 for char in s1) n = len(spellbook) for i in range(n): for j in range(n): if i != j: if is_subsequence(spellbook[i], spellbook[j]) or is_subsequence(spellbook[j], spellbook[i]): return True return False"},{"question":"You are given a binary tree where each node has a value of 0 or 1. Consider that the tree has an additional rightmost leaf node with a value of -1. Your task is to determine the sum of all left leaf nodes that have a value of 1. Write a function called `sum_of_left_leaves_with_value_one(root)` that takes the root of the binary tree and returns the sum according to the conditions above. Example 1: Input: 1 / 0 1 / / 1 0 -1 Output: 1 Explanation: The left leaf node with value 1 is at the left child of the left child of the root. The sum is 1. Example 2: Input: 1 / 1 0 / 0 -1 1 / 1 Output: 1 Explanation: The left leaf node with value 1 is at the left child of the right child of the right child of the root. The sum is 1. Example 3: Input: -1 Output: 0 Explanation: There are no left leaves with value 1 in the tree. Constraints: - The number of nodes in the tree is in the range [1, 1000]. - Node values are either 0, 1, or -1. - A single node with value -1 signifies the rightmost leaf in the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_of_left_leaves_with_value_one(root): Calculate the sum of all left leaf nodes that have a value of 1. def is_leaf(node): return node is not None and node.left is None and node.right is None def dfs(node, is_left): if node is None: return 0 if is_leaf(node): return node.val if is_left and node.val == 1 else 0 return dfs(node.left, True) + dfs(node.right, False) return dfs(root, False)"},{"question":"Given a string containing words separated by single spaces, your task is to find the word that appears the most frequently. If there are multiple such words with the same highest frequency, return the lexicographically smallest one. # Input - A single string `s` with words separated by spaces. The length of `s` is between 1 and 10^5 characters. # Output - A single string representing the most frequent word. If there are ties, return the lexicographically smallest word among the tied words. # Example ```python s = \\"apple banana apple apple banana banana orange apple\\" # Output: \\"apple\\" s = \\"cat dog cat elephant dog dog\\" # Output: \\"dog\\" s = \\"zebra apple apple banana zebra zebra\\" # Output: \\"apple\\" ``` # Constraints - The string `s` consists only of lowercase English letters and spaces. - Words in `s` are separated by a single space and there are no leading or trailing spaces.","solution":"def most_frequent_word(s): Returns the most frequent word in the string s. If there is a tie, returns the lexicographically smallest word. words = s.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 max_count = max(word_count.values()) most_frequent_words = [word for word, count in word_count.items() if count == max_count] return min(most_frequent_words)"},{"question":"You are given a grid of size m x n filled with non-negative integers. A robot initially stands at the top-left corner of the grid (i.e., grid[0][0]). The robot can only move either down or right at any point in time. The robot tries to reach the bottom-right corner of the grid (i.e., grid[m-1][n-1]) and collect as many tokens as possible along the way. Write an algorithm to calculate the maximum tokens the robot can collect while reaching the bottom-right corner of the grid. -----Input----- - The first line of input contains two space-separated integers, m and n (1 ≤ m, n ≤ 100), denoting the number of rows and columns in the grid respectively. - Each of the next m lines contains n space-separated integers, representing the non-negative integers in the grid. -----Output----- Output a single integer: the maximum tokens the robot can collect while reaching the bottom-right corner of the grid. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 2 1 2 1 1 Output 4 -----Note----- In the first example, the robot can collect a maximum of 12 tokens by following the path 1 → 3 → 5 → 2 → 1. In the second example, the robot collects a maximum of 4 tokens by following the path 1 → 2 → 1.","solution":"def max_tokens(grid): m = len(grid) n = len(grid[0]) # Create a 2D dp array to store the maximum tokens collected up to each cell dp = [[0]*n for _ in range(m)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the maximum tokens that can be collected return dp[m-1][n-1]"},{"question":"A group of researchers is analyzing a sequence of operations on an array. They need your help to determine the final state of the array after performing a series of updates. Write a program to help them achieve this. -----Input:----- - The first line will contain an integer N, the number of elements in the array. - The second line will contain N integers separated by a space, representing the initial state of the array. - The third line will contain an integer Q, the number of updates to be performed. - Each of the next Q lines will contain three integers L, R, and X, representing an update that adds X to each array element from index L to R (inclusive). Note that the index is 1-based. -----Output:----- Print the final state of the array on a single line with spaces between adjacent elements. -----Constraints----- - 1 leq N leq 1000 - 1 leq text{Array elements} leq 1000 - 1 leq Q leq 1000 - 1 leq L leq R leq N - 1 leq X leq 1000 -----Sample Input:----- 5 1 2 3 4 5 3 1 3 2 2 4 1 3 5 -1 -----Sample Output:----- 3 5 5 5 4 -----EXPLANATION:----- - Initial array: [1, 2, 3, 4, 5] - After first update (1 3 2): [3, 4, 5, 4, 5] - After second update (2 4 1): [3, 5, 6, 5, 5] - After third update (3 5 -1): [3, 5, 5, 4, 4]","solution":"def update_array(n, arr, q, updates): This function takes in a length of the array, the initial array itself, the number of updates, and a list of updates, then returns the modified array. Parameters: n (int): Length of the array arr (list): Initial state of the array q (int): Number of updates to perform updates (list of tuples): A list containing tuples with three elements (L, R, X) Returns: list: The final state of the array after all updates for update in updates: L, R, X = update for i in range(L-1, R): arr[i] += X return arr"},{"question":"Given an array of strings representing a map, find the shortest distance from the top-left corner to the bottom-right corner, moving only in four possible directions – up, down, left, and right. You are only allowed to move on cells marked as \'0\', which represent empty space. Cells marked as \'1\' are obstacles, and cannot be traversed. If there is no valid path from the top-left corner to the bottom-right corner, return -1. Input: - An array of strings, where each string represents a row of the map. The map is guaranteed to have at least one row and one column. - The map will always start with an empty cell (\'0\') in the top-left corner and end with an empty cell (\'0\') in the bottom-right corner. Example: ``` [[\'0\', \'0\', \'1\', \'0\'], [\'0\', \'1\', \'0\', \'0\'], [\'0\', \'0\', \'0\', \'1\'], [\'1\', \'0\', \'0\', \'0\']] ``` Output: - An integer representing the shortest distance from the top-left corner to the bottom-right corner, counting the number of cells traversed. Explanation: For the provided example, the shortest path would be: Right, Down, Right, Down, Left, Down, Right Resulting in a total of 7 steps. If no path is found, return -1.","solution":"from collections import deque def shortest_path(map): Returns the shortest distance from the top-left corner to the bottom-right corner. If there is no valid path, return -1. # Directions for moving up, down, left, and right directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] rows = len(map) cols = len(map[0]) # Start BFS from the top-left corner queue = deque([(0, 0)]) distances = {(0, 0): 1} while queue: x, y = queue.popleft() # Check if we reached the bottom-right corner if (x, y) == (rows - 1, cols - 1): return distances[(x, y)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and map[nx][ny] == \'0\' and (nx, ny) not in distances: queue.append((nx, ny)) distances[(nx, ny)] = distances[(x, y)] + 1 return -1"},{"question":"Given an array of positive integers `arr` and an integer `k`, calculate the maximum sum of any continuous subarray of size `k`. **Example 1:** Input: arr = [1, 4, 2, 10, 23, 3, 1, 0, 20], k = 4 Output: 39 Explanation: The subarray [4, 2, 10, 23] has the maximum sum 39. **Example 2:** Input: arr = [2, 1, 5, 1, 3, 2], k = 3 Output: 9 Explanation: The subarray [5, 1, 3] has the maximum sum 9. **Constraints:** - 1 <= k <= arr.length <= 10^5 - 1 <= arr[i] <= 10^4","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any continuous subarray of size k. n = len(arr) if k > n: return None # Calculate the sum of the first subarray of size k max_sum = current_sum = sum(arr[:k]) # Sliding window to find maximum sum subarray of size k for i in range(k, n): current_sum = current_sum - arr[i - k] + arr[i] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"=====Function Descriptions===== rotate_list(lst, n) Given a list, the function rotate_list rotates the list to the right by n positions. The rotation should be cyclic, meaning that elements shifted off the end of the list reappear at the beginning. =====Problem Statement===== You are given a list of integers, lst, and an integer n. Your task is to rotate the list lst to the right by n positions and return the rotated list. =====Input Format===== - A list of integers lst. - An integer n, indicating the number of positions to rotate the list. =====Output Format===== Return the rotated list after rotating it to the right by n positions. =====Example===== Input lst = [1, 2, 3, 4, 5] n = 2 Output [4, 5, 1, 2, 3]","solution":"def rotate_list(lst, n): Rotates the list `lst` to the right by `n` positions. if not lst: return lst n = n % len(lst) # Handle cases where n is larger than the list length return lst[-n:] + lst[:-n]"},{"question":"You are given a 2D grid of dimensions n x m. Each cell of the grid can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). You are also given a starting position (sr, sc) and a destination position (dr, dc) on this grid. Your task is to determine if there exists a path from the starting position to the destination, such that you can only move up, down, left, or right, and you cannot move through cells with obstacles. Write a function that takes the grid, the starting position, and the destination position as input, and returns \\"YES\\" if there exists a path from the starting to the destination position, otherwise return \\"NO\\". -----Constraints----- - 1 leq n, m leq 1000 - 1 leq sr, sc, dr, dc leq n, m - The start and destination positions will always be empty cells (\'.\') -----Input----- Input is given from Standard Input in the following format: n m sr sc dr dc grid[0] grid[1] : grid[n-1] -----Output----- Return \\"YES\\" if there is a path from (sr, sc) to (dr, dc). Otherwise, return \\"NO\\". -----Example Input----- 5 5 1 1 5 5 .#... ..... . ..... ..... -----Example Output----- YES Explanation: One possible path is: (1,1) -> (1,2) -> (2,2) -> (3,2) -> (4,2) -> (5,2) -> (5,3) -> (5,4) -> (5,5).","solution":"def is_path_exists(n, m, sr, sc, dr, dc, grid): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # BFS initialization queue = deque([(sr-1, sc-1)]) visited = set([(sr-1, sc-1)]) # Directions for movements (up, down, left, right) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: x, y = queue.popleft() if (x, y) == (dr-1, dc-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"=====Function Descriptions===== The heapq module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm. heapq.heappush The heappush function pushes an element onto the heap, maintaining the heap invariant. import heapq heap = [] heapq.heappush(heap, 3) heapq.heappush(heap, 1) heapq.heappush(heap, 2) print(heap) # Output: [1, 3, 2] heapq.heappop The heappop function pops the smallest item from the heap, maintaining the heap invariant. smallest = heapq.heappop(heap) print(smallest) # Output: 1 print(heap) # Output: [2, 3] heapq.heapify The heapify function transforms a list into a heap, in-place, in linear time. nums = [3, 2, 1] heapq.heapify(nums) print(nums) # Output: [1, 2, 3] =====Problem Statement===== You are given an array of integers. Your task is to find the k largest elements in the array and print them in descending order. Use the heapq module to solve this problem. =====Input Format===== The first line contains the integer k. The second line contains the space-separated integers of the array. =====Output Format===== Print the k largest integers in the array in descending order.","solution":"import heapq def find_k_largest_elements(k, array): Finds the k largest elements in the given array and returns them in descending order. :param k: The number of largest elements to find. :param array: List of integers to search through. :return: List of k largest elements in descending order. if k <= 0: return [] # Create a min-heap with the first k elements of the array min_heap = array[:k] heapq.heapify(min_heap) # Iterate through the rest of the elements for num in array[k:]: if num > min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, num) # Extract elements from the heap and sort in descending order result = [heapq.heappop(min_heap) for _ in range(len(min_heap))] return result[::-1] # return in descending order"},{"question":"Write function that takes a list of integers and returns a new list containing all the prime numbers from the original list, in the order they appeared. Use the helper function provided to determine if a number is prime. # Helper Function The helper function `is_prime` takes an integer and returns `True` if the number is prime, and `False` otherwise. ```python def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True ``` # Example For the input list `[2, 3, 4, 5, 6, 7, 8, 9, 10, 11]`, the function should return `[2, 3, 5, 7, 11]`. For the input list `[4, 6, 8, 9, 10]`, the function should return an empty list `[]` as there are no prime numbers. # Constraints - The input list can be empty, and in that case, the function should return an empty list. - The input list can contain negative numbers or zero, which are not prime by definition. # Note You only need to implement the function to filter primes, you don\'t need to rewrite the `is_prime` helper function. ```python def filter_primes(lst): # Your code here ``` The following are example unit tests that can be used to check the validity of your solution: ```python def test_filter_primes(): assert filter_primes([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [2, 3, 5, 7, 11] assert filter_primes([4, 6, 8, 9, 10]) == [] assert filter_primes([]) == [] assert filter_primes([-10, -5, 0, 1, 19, 23]) == [19, 23] assert filter_primes([11, 18, 19, 21, 23, 29]) == [11, 19, 23, 29] test_filter_primes() ```","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def filter_primes(lst): Takes a list of integers and returns a new list containing all the prime numbers from the original list, in the order they appeared. return [x for x in lst if is_prime(x)]"},{"question":"A city is experiencing power outages frequently, and the electrical grid operators need to manage the flow of electricity to prevent overloads. You are provided with a string representing the power states over a day, where \\"1\\" indicates that a power outage occurred during that hour, and \\"0\\" indicates that power was stable. You need to determine if the city experienced more than 5 consecutive hours of power outages any time during the day. Write a function that takes a string of \\"0\\"s and \\"1\\"s and returns \\"Emergency!\\" if there are more than 5 consecutive \\"1\\"s in the string, otherwise return \\"Stable\\". ```python def check_power_outage(power_states: str) -> str: # Implement your function here # Example usage print(check_power_outage(\\"00011100111110\\")) # Output: \\"Stable\\" print(check_power_outage(\\"11111100000000\\")) # Output: \\"Emergency!\\" ```","solution":"def check_power_outage(power_states: str) -> str: This function takes a string representing the power states where \\"1\\" indicates an outage and \\"0\\" indicates stability. It returns \\"Emergency!\\" if there are more than 5 consecutive \\"1\\"s, otherwise returns \\"Stable\\". if \'111111\' in power_states: return \\"Emergency!\\" return \\"Stable\\""},{"question":"Problem Statement: You\'re given a grid of size MxN consisting of cells with positive integers. You need to determine the minimum sum path from the top-left corner (0, 0) to the bottom-right corner (M-1, N-1). You can only move either down or right at any point in time. Can you help find this path with the minimum sum? Input Format: The first line of input contains two integers M and N, denoting the number of rows and columns in the grid respectively. Each of the next M lines contains N space-separated integers representing the grid. Output Format: Output the minimum sum path from the top-left corner to the bottom-right corner. Constraints: 1 <= M, N <= 100 1 <= grid[i][j] <= 100 Sample Input: 3 3 1 3 1 1 5 1 4 2 1 Sample Output: 7 Explanation: The path with the minimum sum is 1 → 3 → 1 → 1 → 1, which has a sum of 7.","solution":"def min_path_sum(grid): if not grid or not grid[0]: return 0 M, N = len(grid), len(grid[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = grid[0][0] # Initialize the first column for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Initialize the first row for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the DP table for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[M-1][N-1]"},{"question":"A car rental company needs to manage its fleet of cars and respond to customer requests in real-time. Each car is identified by a unique number, and each request can either be a booking request or a return request. The company needs to track which cars are available and which are currently rented out. -----Input format:----- - The first line contains an integer T denoting the number of test cases. - The second line of each test case contains two integers N and Q, where N is the number of cars in the fleet, and Q is the number of requests. - The next line contains N integers c_{1},c_{2},...,c_{N} denoting the status of each car in the fleet (0 indicating the car is available and 1 indicating the car is rented out). - Then next Q lines follow where each line contains a request in one of the following formats: - 1 space i for a booking request for the i-th car. - 2 space i for a return request for the i-th car. -----Output format:----- - For each booking request of the form 1 space i: - Print \\"Booked\\" if the car i is available and mark it as rented out. - Print \\"Already Rented\\" if the car i is already rented out. - For each return request of the form 2 space i: - Print \\"Returned\\" if the car i is rented out and mark it as available. - Print \\"Already Available\\" if the car i is already available. -----Constraints:----- - 1leq T leq 50 - 1 leq N,Q leq 10^3 - 0 leq c_{i} leq 1 - 1 leq i leq N -----Example:----- -----Input:----- 1 5 6 0 1 0 1 0 1 3 1 2 1 4 2 2 2 5 1 5 -----Output:----- Booked Already Rented Already Rented Returned Already Available Booked","solution":"def manage_fleet(T, test_cases): results = [] for case in test_cases: N, Q, car_status, requests = case for req in requests: action, car_id = req if action == 1: # Booking request if car_status[car_id - 1] == 0: results.append(\\"Booked\\") car_status[car_id - 1] = 1 else: results.append(\\"Already Rented\\") elif action == 2: # Return request if car_status[car_id - 1] == 1: results.append(\\"Returned\\") car_status[car_id - 1] = 0 else: results.append(\\"Already Available\\") return results"},{"question":"Scenario: Alice is a manager at a fireworks event organizer company. She has a list of firework launches that she needs to organize for the event. She wants to divide these launches into multiple sessions so that each session has the exact same number of launches, and all sessions are contiguous blocks of launches from the list. Additionally, each session should have the exact same total duration of the launches it includes. Help Alice find out whether it is possible to divide the list into exactly `m` sessions where every session consists of the same duration and each session has the same number of launches. If possible, determine the number of launches in each session and the duration of these launches. Input: - The first line contains two integers `t` and `m` (`1 ≤ m ≤ t ≤ 10^5`), where `t` is the total number of fireworks launches, and `m` is the number of sessions. - The next line contains `t` positive integers `d_1, d_2, ..., d_t` (`1 ≤ d_i ≤ 10^4`), where `d_i` is the duration of the `i-th` firework launch in seconds. Output: - If it is possible to divide the list into `m` sessions with equal number of launches and total duration, print \\"Yes\\" in the first line. Print the number of launches per session and the total duration of each session in the second line. - If it is not possible, print only a single line with \\"No\\". Example: Input 8 2 2 2 3 3 4 4 1 1 Output Yes 4 10 Input 5 5 1 1 1 1 1 Output Yes 1 1 Input 4 3 1 2 3 4 Output No","solution":"def can_divide_fireworks(t, m, durations): total_duration = sum(durations) if total_duration % m != 0: return \\"No\\" target_duration = total_duration // m session_duration = 0 session_count = 0 launches_in_session = 0 for duration in durations: session_duration += duration launches_in_session += 1 if session_duration == target_duration: session_duration = 0 session_count += 1 launches_in_session = 0 if session_count == m: individual_session_launches = t // m return f\\"Yesn{individual_session_launches} {target_duration}\\" else: return \\"No\\""},{"question":"Write a function that accepts a string containing multiple words, and returns the longest word in the string. If there are multiple words with the same longest length, return the first one that appears in the string. You may assume that the input string will not be empty and there will be at least one valid word. # Examples: - `longestWord(\\"I love programming\\")` => \\"programming\\" - `longestWord(\\"The quick brown fox jumps over the lazy dog\\")` => \\"quick\\" - `longestWord(\\"To be or not to be, that is the question\\")` => \\"question\\" # Constraints: - The input string contains only alphabetical characters and spaces. - Words are separated by a single space. - Words do not contain any punctuation marks.","solution":"def longest_word(s): Returns the longest word in the input string. If there are multiple words with the same longest length, returns the first one that appears in the string. words = s.split() longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Raj is an avid traveler and loves to explore different towns. Recently, he visited a town where all the roads form a perfect grid. The town has houses located at the intersection of streets, which are aligned in a grid pattern of size M x N. Raj decided to start his journey from the top-left corner of the grid, located at (0, 0), and plans to end at the bottom-right corner, located at (M-1, N-1). Raj can only move either to the right or down at any point in time. However, Raj noticed that some intersections in the grid have puddles due to heavy rain, and he cannot step on these puddles. Help Raj find the number of unique paths from the starting intersection to the destination intersection, avoiding any puddles. Since the number of unique paths can be quite large, return the count modulo 1,000,000,007. -----Input:----- - The first line contains two integers M and N denoting the number of rows and columns in the grid respectively. - The second line contains an integer P denoting the number of puddles. - Each of the next P lines contains two integers r_i and c_i denoting the row and column indices of the puddles respectively. -----Output:----- Print a single integer denoting the number of unique paths from (0, 0) to (M-1, N-1) modulo 1,000,000,007. -----Constraints----- - 1 leq M, N leq 1000 - 0 leq P leq 1000 - 0 leq r_i < M - 0 leq c_i < N -----Sample Input:----- 3 3 2 1 1 1 2 -----Sample Output:----- 1","solution":"def unique_paths(M, N, puddles): MODULO = 1_000_000_007 # Create a 2D DP array initialized to 0 dp = [[0] * N for _ in range(M)] # Mark puddles in the grid puddles_set = set((r, c) for r, c in puddles) # Initialization: No puddle on starting cell, If so returns 0 paths if (0, 0) in puddles_set: return 0 dp[0][0] = 1 # Fill the DP table for i in range(M): for j in range(N): if (i, j) in puddles_set: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] % MODULO if j > 0: dp[i][j] += dp[i][j-1] % MODULO dp[i][j] %= MODULO return dp[M-1][N-1]"},{"question":"Your task is to write a function that determines whether a given string, which only contains lowercase letters, is a palindrome. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward, ignoring spaces, punctuation, and capitalization. *Function Signature:* ```python def is_palindrome(input_string: str) -> bool: pass ``` *Examples*: ```python print(is_palindrome(\\"racecar\\")) # True print(is_palindrome(\\"hello\\")) # False print(is_palindrome(\\"madam\\")) # True print(is_palindrome(\\"step on no pets\\")) # True ``` *Constraints*: - The function should consider only alphabetic characters and ignore spaces. - The input string will only contain lowercase letters and spaces.","solution":"def is_palindrome(input_string: str) -> bool: Determines whether the given string is a palindrome. Args: input_string (str): The input string containing lowercase letters and spaces. Returns: bool: True if the input string is a palindrome, False otherwise. # Remove spaces from the input string clean_string = \'\'.join(input_string.split()) # Check if the cleaned string reads the same forward and backward return clean_string == clean_string[::-1]"},{"question":"The provided code is supposed to determine if a given string is a palindrome, but it contains errors. Can you identify the issue and fix it? ```python def is_palindrome(s): s = s.lower().replace(\' \', \'\') return s == s[::-1] print(is_palindrome(\'A man a plan a canal Panama\')) # should return True print(is_palindrome(\'racecar\')) # should return True print(is_palindrome(\'hello\')) # should return False ```","solution":"def is_palindrome(s): Determines if a given string is a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward, disregarding spaces and case sensitivity. Args: s (str): the string to check. Returns: bool: True if the string is a palindrome, otherwise False. s = s.lower().replace(\' \', \'\') return s == s[::-1]"},{"question":"Write a function that takes a positive integer `n` and returns a list of all positive integers less than `n` that are multiples of either 3 or 5. ```JS Examples: 1) n = 10 => [3, 5, 6, 9], because these are the multiples of 3 or 5 below 10 2) n = 20 => [3, 5, 6, 9, 10, 12, 15, 18], because these are the multiples of 3 or 5 below 20 3) n = 5 => [3], because 3 is the only multiple of 3 or 5 below 5 4) n = 15 => [3, 5, 6, 9, 10, 12], because these are the multiples of 3 or 5 below 15 ```","solution":"def multiples_of_3_or_5(n): Returns a list of all positive integers less than n that are multiples of either 3 or 5. return [i for i in range(1, n) if i % 3 == 0 or i % 5 == 0]"},{"question":"You are given a list/array of integers where each integer represents the height of a building. It\'s often the case that the skyline visualization of a city is represented by arrows showing the start and end of each building\'s height. A skyline is a series of contiguous buildings where the outline of the buildings when viewed from a distance looks like the city skyline. Given a list of integers representing heights of buildings, calculate the total area of the skyline when the skyline is represented as a histogram. The width of each building is 1. **Function Signature:** ```python def skyline_area(building_heights: List[int]) -> int: pass ``` **Input:** - A list called `building_heights` of integers, where each element represents the height of the respective building. The list can have up to 10^6 elements, and each height is a non-negative integer less than or equal to 10^4. **Output:** - Return an integer representing the total area under the skyline outlined by the building heights. **Example:** ```python skyline_area([2, 1, 5, 6, 2, 3]) # returns 12, which is the area of 3 contiguous buildings with heights 5, 6, and 2 skyline_area([2, 4, 2, 1]) # returns 6, which is the area of the buildings with heights 2, 4, and 2 skyline_area([3, 3, 3, 3]) # returns 12, which is the area of 4 contiguous buildings with height 3 each skyline_area([6, 2, 5, 4, 5, 1, 6]) # returns 12, which is the area of buildings with heights 5, 4, and 5 ``` **Notes:** - Assume the input list `building_heights` is always provided and contains at least one element. - Your solution should be optimized for both time and space complexity.","solution":"def skyline_area(building_heights): Calculate the total area of the skyline when represented as a histogram. Parameters: - building_heights (List[int]): A list of integers representing the heights of buildings. Returns: - int: The total area under the skyline. # Initialize the maximum area and create an empty stack max_area = 0 stack = [] # Process all buildings in the list for i, height in enumerate(building_heights): start = i # If the current building is lower than the last one in the stack, pop the stack while stack and stack[-1][1] > height: index, h = stack.pop() max_area = max(max_area, h * (i - index)) start = index stack.append((start, height)) # Now process the remaining buildings in the stack for i, height in stack: max_area = max(max_area, height * (len(building_heights) - i)) return max_area"},{"question":"# word_ladder_length `Goal`: Write a function that computes the length of the shortest transformation sequence from a given `beginWord` to an `endWord`, using a specified word list. Each word in the transformation sequence must be in the word list, and only one letter can be changed at a time. If no such transformation is possible, the function should return 0. The steps for the transformation are as follows: 1. Start with the `beginWord`. 2. At each step, change one and only one letter of the current word to create a new word. 3. The new word must exist in the provided word list. 4. Repeat step 2 until the `endWord` is created. # Example Given: ``` beginWord: \\"hit\\" endWord: \\"cog\\" wordList: [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\",\\"cog\\"] ``` The function should return `5` because one shortest transformation is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", which has 5 words in total. Given: ``` beginWord: \\"hit\\" endWord: \\"cog\\" wordList: [\\"hot\\",\\"dot\\",\\"dog\\",\\"lot\\",\\"log\\"] ``` The function should return `0` because there is no possible transformation. # Constraints - All words have the same length. - All words contain only lowercase alphabetical characters. - The word list does not contain duplicates. - The `beginWord` and `endWord` are non-empty and may or may not be in the word list. # Implementation Use Breadth-First Search (BFS) to explore the shortest path and keep track of the visited words instead of modifying the word list.","solution":"from collections import deque def word_ladder_length(beginWord, endWord, wordList): if endWord not in wordList: return 0 wordSet = set(wordList) queue = deque([(beginWord, 1)]) visited = set() while queue: current_word, level = queue.popleft() if current_word == endWord: return level for i in range(len(current_word)): for char in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + char + current_word[i+1:] if next_word in wordSet and next_word not in visited: visited.add(next_word) queue.append((next_word, level + 1)) return 0"},{"question":"Create a function that takes a string representing an arithmetic expression involving addition and subtraction of integers, and evaluates it. The function should return the resulting integer. The expression can have positive and negative integers, and the input string will always be a valid arithmetic expression with integers separated by \'+\' or \'-\' signs. Example: ```python evaluate_expression(\\"10+5-3\\") # should return 12 evaluate_expression(\\"1+2-3+4-5\\") # should return -1 evaluate_expression(\\"7-2+3+10-5\\") # should return 13 ``` In the input, the expression may not have any spaces, and it does not require handling of parentheses or any operators other than \'+\' and \'-\'.","solution":"def evaluate_expression(expression): Evaluates a string representing an arithmetic expression involving addition and subtraction of integers, and returns the resulting integer. # Initialize variables current_number = 0 result = 0 current_sign = 1 # 1 for positive, -1 for negative index = 0 n = len(expression) while index < n: char = expression[index] if char.isdigit(): # Build the full number current_number = current_number * 10 + int(char) if char == \'+\' or char == \'-\' or index == n - 1: # Add/subtract the last number obtained result += current_sign * current_number current_number = 0 # Update the sign current_sign = 1 if char == \'+\' else -1 index += 1 return result"},{"question":"Given an array of integers nums and a target integer target, determine if there exists a subset of nums that adds up to target, and return the subset if it exists, otherwise return an empty array. Example 1: Input: nums = [3, 34, 4, 12, 5, 2], target = 9 Output: [4, 5] Explanation: The subset [4, 5] sums up to the target 9. Example 2: Input: nums = [1, 2, 3, 7], target = 6 Output: [1, 2, 3] Explanation: The subset [1, 2, 3] sums up to the target 6. Example 3: Input: nums = [2, 3, 7, 8, 10], target = 11 Output: [3, 8] Explanation: The subset [3, 8] sums up to the target 11. Example 4: Input: nums = [1, 2, 3], target = 7 Output: [] Explanation: There is no subset that sums up to the target 7. Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 100 1 <= target <= 1000","solution":"def subset_sum(nums, target): Determines if there exists a subset of nums that adds up to target. If such a subset exists, returns the subset, otherwise returns an empty array. subset = [] n = len(nums) # Create a 2D dp array where dp[i][j] will be True if there is a subset of nums[0..i-1] with sum j dp = [[False for j in range(target + 1)] for i in range(n + 1)] # If sum is 0, then answer is True for i in range(n + 1): dp[i][0] = True # Fill the dp array for i in range(1, n + 1): for j in range(1, target + 1): if nums[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]] else: dp[i][j] = dp[i-1][j] # Return empty array if there\'s no subset found if not dp[n][target]: return [] # Trace the subset i, j = n, target while i > 0 and j > 0: if dp[i][j] and not dp[i-1][j]: subset.append(nums[i-1]) j -= nums[i-1] i -= 1 return subset[::-1]"},{"question":"**Question 2**: You are given a string `S` of length `N` consisting of characters \'a\' and \'b\' only. Your task is to make all characters of the string the same, i.e., either all \'a\' or all \'b\'. The only operation you can perform is to choose any substring of the string and flip all characters within the chosen substring (changing \'a\' to \'b\' and \'b\' to \'a\'). Write a function that returns the minimum number of operations required to make all characters of the string the same. -----Input section----- - First line contains an integer `T`, denoting the number of test cases. - Each of the next `T` lines contains a string `S` of length `N`. -----Output section----- For each test case, print the minimum number of operations required. -----Input constraints----- 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 S consists of characters \'a\' and \'b\' only. -----Sample Input----- 3 ab aaab abab -----Sample Output----- 1 1 2 -----Explanation----- - For the first test case, we can flip the substring \\"a\\" or \\"b\\" to make all characters the same in one operation. - For the second test case, flipping the substring \\"b\\" will result in the string \\"aaaa\\". - For the third test case, we need to flip the substring \\"ab\\" twice - once for the first \\"ab\\" and once for the second \\"ab\\".","solution":"def min_operations_to_make_same(T, test_cases): results = [] for S in test_cases: changes_a = 0 changes_b = 0 current = S[0] if current == \'a\': changes_b += 1 else: changes_a += 1 for i in range(1, len(S)): if S[i] != current: current = S[i] if current == \'a\': changes_b += 1 else: changes_a += 1 results.append(min(changes_a, changes_b)) return results"},{"question":"# Task You are given a binary tree represented by a list of integers, where `None` represents a missing node in the tree. Your task is to write a function that checks if the tree is a valid binary search tree (BST). A binary search tree (BST) is a binary tree in which for every node, the nodes in its left subtree are less than the node itself, and the nodes in its right subtree are greater than the node itself. Your function should return a boolean value: `True` if the tree is a valid BST, otherwise `False`. # Examples For the input list `[2, 1, 3]`, the output should be `True`. For the input list `[5, 1, 4, None, None, 3, 6]`, the output should be `False`. For the input list `[10, 5, 15, None, None, 6, 20]`, the output should be `False`. # Note - The list represents a binary tree in level order traversal. - The length of the input list is between 1 and 1000. - The values in the tree nodes are between -10000 and 10000. # Constraints 1. 1 <= len(tree) <= 1000 2. -10000 <= node value <= 10000 # Function signature ```python def is_valid_bst(tree: List[Optional[int]]) -> bool: pass ```","solution":"from typing import List, Optional def is_valid_bst(tree: List[Optional[int]]) -> bool: if not tree: return True def helper(index, low, high): if index >= len(tree) or tree[index] is None: return True val = tree[index] if not (low < val < high): return False left_index = 2 * index + 1 right_index = 2 * index + 2 return helper(left_index, low, val) and helper(right_index, val, high) return helper(0, float(\'-inf\'), float(\'inf\'))"},{"question":"Balanced Parentheses Checker Write a function that checks whether a given string containing parentheses is balanced. A string is considered balanced if: 1. Each opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. The parentheses are properly nested. The function should return `True` if the string is balanced, and `False` otherwise. Ignore all characters in the string other than parentheses. Examples ```python Input: \\"((()))\\" Output: True Explanation: All opening parentheses are properly closed. Input: \\"(()\\" Output: False Explanation: There\'s an opening parenthesis with no corresponding closing parenthesis. Input: \\"(a+b) * (c+d)\\" Output: True Explanation: Non-parenthesis characters are ignored. All opening parentheses are properly closed. Input: \\")((\\" Output: False Explanation: The closing parenthesis comes before any opening parenthesis. ``` Function Signature ```python def is_balanced_parentheses(s: str) -> bool: # Your code here ``` Constraints - The input string `s` will have a maximum length of 1000 characters. - The function should ignore characters other than the parentheses \'()\'. Implement the `is_balanced_parentheses(s: str) -> bool` function which processes the input string and returns whether it is balanced in terms of parentheses.","solution":"def is_balanced_parentheses(s: str) -> bool: Checks whether the given string of parentheses is balanced. Ignores all characters other than parentheses. :param s: A string containing parentheses and other characters. :return: True if the parentheses are balanced, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return not stack"},{"question":"Arrays - Rotate Elements Write a function `rotateArray` that rotates the elements of a given array to the right by a specified number of steps. The function takes two arguments: an array `arr` of integers and an integer `k` representing the number of steps to rotate. The function should return a new array with the elements rotated accordingly. For example, given the array `[1, 2, 3, 4, 5]` and `k = 2`, the function should return `[4, 5, 1, 2, 3]`. ```python def rotateArray(arr, k): # your code here # Example Usage # rotateArray([1, 2, 3, 4, 5], 2) should return [4, 5, 1, 2, 3] # rotateArray([1, 2, 3, 4, 5, 6], 3) should return [4, 5, 6, 1, 2, 3] ```","solution":"def rotateArray(arr, k): Rotates the elements of the array to the right by k steps. if not arr: return arr n = len(arr) k = k % n # To handle cases where k is greater than the length of the array return arr[-k:] + arr[:-k]"},{"question":"You are given an array of integers and your task is to implement a function that moves all the zeros to the end of the array while maintaining the relative order of the non-zero elements. Write a function `move_zeros(arr)` that takes an array of integers `arr` and returns an array with all zeros moved to the end. Examples: ```python move_zeros([0, 1, 0, 3, 12]) -> [1, 3, 12, 0, 0] move_zeros([4, 2, 4, 0, 0, 3, 0]) -> [4, 2, 4, 3, 0, 0, 0] move_zeros([0, 1, 0, 0, 2, 0, 3]) -> [1, 2, 3, 0, 0, 0, 0] move_zeros([0, 0, 0, 0]) -> [0, 0, 0, 0] move_zeros([1, 2, 3, 4]) -> [1, 2, 3, 4] ``` Constraints: - The input array can have a length of up to 10^4. - The elements of the array can be in the range of -10^6 to 10^6.","solution":"def move_zeros(arr): This function moves all zeros to the end of the array while maintaining the relative order of non-zero elements. Parameters: arr (list): The input list of integers. Returns: list: The list with all zeros moved to the end. non_zero_elements = [x for x in arr if x != 0] zero_count = len(arr) - len(non_zero_elements) return non_zero_elements + [0] * zero_count"},{"question":"You are given a string consisting of lowercase alphabets. Your task is to find the longest substring which contains no repeating characters. If there are multiple longest substrings with the same length, return the substring which appears first in the original string. **Input:** - A single string `s` consisting of lowercase alphabets (1 ≤ length of s ≤ 10^5). **Output:** - A single string which is the longest substring with no repeating characters. **Example:** ```python Input: \\"abcabcbb\\" Output: \\"abc\\" Input: \\"bbbbb\\" Output: \\"b\\" Input: \\"pwwkew\\" Output: \\"wke\\" ``` **Note:** - In the first example, the answer is \\"abc\\", with the length of 3. - In the second example, the answer is \\"b\\", with the length of 1. - In the third example, the answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def longest_unique_substring(s): start = 0 max_length = 0 max_substr = \\"\\" used_chars = {} for i, char in enumerate(s): if char in used_chars and start <= used_chars[char]: start = used_chars[char] + 1 else: if i - start + 1 > max_length: max_length = i - start + 1 max_substr = s[start:i+1] used_chars[char] = i return max_substr"},{"question":"Analyzing Parity of Digits In mathematics, numbers can have various interesting properties based on their digits. This exercise focuses on the parity (evenness or oddness) of individual digits within a number. Task Given an integer, determine if all of its digits share the same parity. In other words, check if all digits of the number are either all even or all odd. # Input A single integer. Note that the number can be negative. # Output Return `true` if all digits of the number share the same parity; otherwise, return `false`. # Examples ``` 22 => true (all digits are even) 135 => true (all digits are odd) 123 => false (digits 1 and 3 are odd, but 2 is even) -8642 => true (all digits are even despite the negative sign) ``` # Note - Handle negative integers by considering only their absolute value for parity checks.","solution":"def all_digits_same_parity(number): Check if all digits of the number share the same parity. :param number: integer :return: boolean, True if all digits are either all even or all odd, False otherwise # Get the absolute value of the number number = abs(number) # Convert the number to a string to iterate over each digit digits = str(number) # Check the parity of the first digit first_digit_parity = int(digits[0]) % 2 # Check if all other digits have the same parity for digit in digits[1:]: if int(digit) % 2 != first_digit_parity: return False return True"},{"question":"Inspired by cutting-edge research in machine learning, a start-up has developed a program which generates Fibonacci-like sequences. A Fibonacci-like sequence is a sequence of integers such that each integer (except for the first two) is the sum of the previous two integers. The start-up\'s program introduces a twist: it can start the sequence with any two arbitrary integers, which may even be negative. Your task is to define and implement a way to determine if a given sequence of integers is a valid Fibonacci-like sequence. If it is, return `True`; otherwise, return `False`. -----Input:----- The first line contains an integer T, indicating the number of test cases. Each of the following T lines contains a list of integers separated by spaces, representing a sequence of integers. -----Output:----- Output T lines, each containing \\"True\\" if the provided sequence is a valid Fibonacci-like sequence, and \\"False\\" otherwise. -----Constraints----- - 1 ≤ T ≤ 100 - Each sequence contains at least 3 integers and at most 50 integers. - Each integer in the sequence is within the range [-10^9, 10^9]. -----Sample Input----- 3 2 3 5 8 13 1 2 4 6 10 0 0 0 0 0 0 -----Sample Output----- True False True Note: In the sample inputs, the first sequence (2, 3, 5, 8, 13) is valid because 5 = 2 + 3, 8 = 3 + 5, 13 = 5 + 8. The second sequence (1, 2, 4, 6, 10) is not valid because while 4 = 1 + 2, the next element should be 6 which satisfies 4 + 2 but the following element 10 is not equal to 4 + 6. The third sequence, though seems unconventional, is valid as each 0 is the sum of the previous two 0\'s.","solution":"def is_fibonacci_like(sequence): Determines if a given sequence of integers is a valid Fibonacci-like sequence. :param sequence: List of integers. :return: True if the sequence is a valid Fibonacci-like sequence, False otherwise. for i in range(2, len(sequence)): if sequence[i] != sequence[i - 1] + sequence[i - 2]: return False return True"},{"question":"Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order. The spiral order starts from the top-left and moves right, then down, then left, then up, repeating the cycle until all elements have been visited. Write a function that takes in a 2D list of integers and returns a list of integers representing the spiral order. Example 1: Input: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] Example 2: Input: [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] Note: You can assume that the number of rows and columns of the matrix is not larger than 20.","solution":"def spiral_order(matrix): Returns the elements of the matrix in spiral order. Args: matrix: 2D list of integers Returns: list of integers in spiral order if not matrix: return [] spiral = [] while matrix: # Take the first row spiral.extend(matrix.pop(0)) # Take the last element of each remaining row if matrix and matrix[0]: for row in matrix: spiral.append(row.pop()) # Take the last row in reverse order if matrix: spiral.extend(matrix.pop()[::-1]) # Take the first element of each remaining row in reverse order if matrix and matrix[0]: for row in matrix[::-1]: spiral.append(row.pop(0)) return spiral"},{"question":"You are given a list of `n` integers that initially represent IDs of various objects in the warehouse. These IDs are guaranteed to be unique. Now, some objects can be moved to different positions, and the IDs can be changed, but the pattern remains such that at any moment, each ID is exactly one more than the previous ID if it follows a certain object or exactly one less than the next ID if it precedes another object (i.e., they are supposed to form two possible series based on `+1` or `-1` changes). Write a function `is_rearrangement_possible` that accepts a list of `n` integers representing the initial IDs and returns whether it is possible to rearrange the IDs to follow either ascending or descending order rules. Function Signature: `def is_rearrangement_possible(ids: List[int]) -> bool` # Example: ```python # Example 1 ids = [4, 3, 1, 2] assert is_rearrangement_possible(ids) == True # Example 2 ids = [10, 12, 11, 14] assert is_rearrangement_possible(ids) == False # Example 3 ids = [3, 2, 1] assert is_rearrangement_possible(ids) == True ``` # Explanation: - Example 1: You can rearrange the IDs to `[1, 2, 3, 4]` or `[4, 3, 2, 1]`, which follows the required rules. - Example 2: No possible rearrangement can achieve the required order. - Example 3: The initial order itself follows the descending rule.","solution":"def is_rearrangement_possible(ids): Determines if it\'s possible to rearrange IDs to follow either ascending or descending order. n = len(ids) sorted_ids = sorted(ids) # Check for ascending order ascending_possible = all(sorted_ids[i] + 1 == sorted_ids[i+1] for i in range(n-1)) # Check for descending order descending_possible = all(sorted_ids[i] - 1 == sorted_ids[i+1] for i in range(n-1)) return ascending_possible or descending_possible"},{"question":"You are given a 2D grid of dimensions n x n. Each cell in the grid contains an integer value representing the cost to pass through that cell. You can move to adjacent cells in the grid (left, right, up, or down), but you cannot move diagonally. Your task is to find the minimum cost required to travel from the top-left cell (1, 1) to the bottom-right cell (n, n). ---- Input ---- - First line contains a single integer n, which is the size of the grid. - Next n lines each contain n integers representing the cost value in each cell of the grid. ---- Output ---- Print a single integer, which is the minimum cost required to travel from the top-left to the bottom-right cell. ---- Constraints ---- - 2 ≤ n ≤ 100 - 1 ≤ cost of each cell ≤ 1000 ---- Sample Input ---- 3 1 3 1 1 5 1 4 2 1 ---- Sample Output ---- 7 ---- Explanation ---- The path with the minimum cost from top-left to bottom-right is: 1 (top-left) -> 1 (down) -> 1 (right) -> 1 (right) -> 1 (down) -> 2 (bottom-right), and the total minimum cost is 1 + 1 + 1 + 1 + 2 = 7.","solution":"import heapq def min_cost(grid): n = len(grid) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up costs = [[float(\'inf\')]*n for _ in range(n)] costs[0][0] = grid[0][0] priority_queue = [(grid[0][0], 0, 0)] # (cost, x, y) while priority_queue: current_cost, x, y = heapq.heappop(priority_queue) if x == n-1 and y == n-1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n: new_cost = current_cost + grid[nx][ny] if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(priority_queue, (new_cost, nx, ny)) return costs[n-1][n-1] # Input processing not included in the above function to keep it clean for import and testing. if __name__ == \'__main__\': n = int(input().strip()) grid = [list(map(int, input().strip().split())) for _ in range(n)] print(min_cost(grid))"},{"question":"Amy has a list of integers and she wants to find the most frequent integer in the list. If there are multiple integers that appear the same maximum number of times, she wants to know the smallest such integer among them. To solve this problem, you need to write a program that reads a list of integers, processes it to find the most frequent integer, and outputs that integer. ----- Input: ----- - The first line contains an integer n (1 leq n leq 10^6), the number of elements in the list. - The second line contains n integers separated by spaces. ----- Output: ----- - Print a single integer, the most frequent integer in the list. If there are multiple integers with the same frequency, print the smallest one. ----- Constraints: ----- - The integers in the list are in the range [-10^9, 10^9]. ----- Sample Input: ----- 5 1 2 2 3 1 ----- Sample Output: ----- 1","solution":"def most_frequent_integer(n, arr): Returns the most frequent integer in the list. If multiple integers have the same frequency, returns the smallest integer among them. from collections import Counter frequency_dict = Counter(arr) max_frequency = max(frequency_dict.values()) most_frequent = min(key for key, value in frequency_dict.items() if value == max_frequency) return most_frequent"},{"question":"You are given an array of integers and a target integer. Your task is to find two distinct integers in the array that sum up to the target integer. If such a pair does not exist, return an empty list. For Example: * If the array is `[1, 2, 3, 4]` and the target is `5`, the result is `[1, 4]` or `[2, 3]`. * If the array is `[1, 2, 3, 4]` and the target is `10`, the result is `[]`. Implement a function that returns the pair of integers that sum up to the target, or an empty list if no such pair exists. Notes * The array will contain only integer values. * The same element cannot be used twice in forming the pair. * If multiple pairs match the target, return any one of them. * If the array is empty or has less than two elements, return an empty list.","solution":"def find_pair_with_sum(arr, target): Returns a pair of distinct integers from the array that sum up to the target. If no such pair exists, returns an empty list. seen = set() for num in arr: complement = target - num if complement in seen: return [complement, num] seen.add(num) return []"},{"question":"Farmer John has a rectangular farm with M rows and N columns, represented by a 2D grid. Each cell in the grid can either be empty (denoted by a 0) or have a tree (denoted by a 1). Farmer John wants to maximize the area of a rectangular plot of land he can clear without moving any trees that are currently in place. Given the grid configuration, determine the area of the largest rectangle that contains no trees. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers M and N — the number of rows and columns in the grid. - The next M lines contain N space-separated integers (either 0 or 1) representing the grid. -----Output----- For each test case, print a single line containing one integer — the area of the largest rectangle that contains no trees. -----Constraints----- - 1 le T le 10 - 1 le M, N le 1000 - Each element of the grid is either 0 or 1. -----Example Input----- 2 4 4 0 1 0 0 0 0 0 1 1 0 0 0 1 1 1 0 3 3 1 1 1 1 0 0 1 0 0 -----Example Output----- 4 4 -----Explanation----- Example case 1: The grid is: 0 1 0 0 0 0 0 1 1 0 0 0 1 1 1 0 The largest rectangle without any trees (0s) is formed by the 2x2 subgrid on the bottom right, giving an area of 2 * 2 = 4. Example case 2: The grid is: 1 1 1 1 0 0 1 0 0 The largest rectangle without any trees (0s) is formed by the 2x2 subgrid in the bottom right corner, giving an area of 2 * 2 = 4.","solution":"def maximalRectangle(grid): if not grid: return 0 M, N = len(grid), len(grid[0]) height = [0] * N max_area = 0 for row in grid: for i in range(N): height[i] = height[i] + 1 if row[i] == 0 else 0 max_area = max(max_area, largestRectangleArea(height)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(maximalRectangle(grid)) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): M, N = map(int, lines[index].split()) index += 1 grid = [] for _ in range(M): grid.append(list(map(int, lines[index].split()))) index += 1 test_cases.append(grid) return test_cases def format_output(results): return \'n\'.join(map(str, results)) def main(input_string): test_cases = parse_input(input_string) results = process_test_cases(test_cases) return format_output(results)"},{"question":"Write a function that takes a string containing multiple words separated by spaces and returns an object where the keys are the words and the values are the number of occurrences of those words in the string. The function should ignore case and punctuation. ```python word_count(\\"Hello world! Hello, universe.\\") # => {\'hello\': 2, \'world\': 1, \'universe\': 1} word_count(\\"This is a test. This test is only a test.\\") # => {\'this\': 2, \'is\': 2, \'a\': 2, \'test\': 3, \'only\': 1} word_count(\\"Coding is fun! Fun coding.\\") # => {\'coding\': 2, \'is\': 1, \'fun\': 2} ```","solution":"import re from collections import Counter def word_count(s): Returns a dictionary with words as keys and their occurrences as values, ignoring case and punctuation. # Remove punctuation using regex and convert to lower case cleaned_str = re.sub(r\'[^ws]\', \'\', s).lower() # Split the string into words words = cleaned_str.split() # Use collections.Counter to count occurrences of each word return dict(Counter(words))"},{"question":"=====Problem Statement===== You are given a string S, which represents a sequence of braces i.e., \'{\', \'}\', \'(\', \')\', \'[\', or \']\'. Your task is to determine if the sequence of braces is valid. A sequence of braces is considered valid if: 1. A closing brace has a corresponding opening brace of the same type. 2. A closing brace appears after its corresponding opening brace. 3. The braces must close in the correct order. For example: ✔\\"()\\" ✔\\"()[]{}\\" ✔\\"{[()]}\\" ✖\\"(]\\" ✖\\"([)]\\" ✖\\"{[}\\" =====Input Format===== The first line contains an integer T, the number of test cases. The next T line(s) contains a string S. =====Constraints===== 0 < T < 20 =====Output Format===== Output True or False for each test case.","solution":"def is_valid_braces_sequence(s): Determine if the sequence of braces is valid. Args: s (str): A string representing a sequence of braces. Returns: bool: True if the sequence is valid, False otherwise. stack = [] braces_map = {\'(\': \')\', \'{\': \'}\', \'[\': \']\'} for char in s: if char in braces_map: stack.append(char) elif char in braces_map.values(): if not stack or braces_map[stack.pop()] != char: return False return not stack"},{"question":"You are given an array of integers, `scores`, where each score represents the number of points that players have earned in a game. You need to sort the players by their scores in descending order. However, if two or more players have the same score, you need to maintain their relative positions as they appear in the input array (stable sort). Your task is to implement the function `sort_scores(scores)`, which takes in the list of scores and returns a list of scores sorted in the specified order. Example: Input: scores = [70, 80, 70, 60, 90, 80] Output: [90, 80, 80, 70, 70, 60] Explanation: The sorted order of scores in descending order while maintaining relative positions of players with the same score. Note: - The length of the array `scores` will be in the range [1, 10,000]. - Each score is a non-negative integer and will not exceed 100,000. # Function Signature ```python def sort_scores(scores: List[int]) -> List[int]: pass ```","solution":"from typing import List def sort_scores(scores: List[int]) -> List[int]: Sorts the scores in descending order while maintaining relative positions of players with the same score. Args: scores (List[int]): The list of scores. Returns: List[int]: The list of scores sorted as per the described conditions. return sorted(scores, reverse=True)"},{"question":"Given a list of integers, your task is to find the smallest positive integer that is not present in the list. The list can contain both positive and negative integers. For example: ```python find_missing_positive([3, 4, -1, 1]) = 2 find_missing_positive([1, 2, 0]) = 3 find_missing_positive([-1, -2, -3]) = 1 find_missing_positive([2, 4, 6, 8]) = 1 ``` Function signature: `def find_missing_positive(nums: List[int]) -> int:`","solution":"from typing import List def find_missing_positive(nums: List[int]) -> int: Finds the smallest positive integer that is not present in the list. nums = [num for num in nums if num > 0] if not nums: return 1 nums.sort() smallest_positive = 1 for num in nums: if num == smallest_positive: smallest_positive += 1 elif num > smallest_positive: break return smallest_positive"},{"question":"Description Lisa loves sorting her books by their height. She stacks the books in such a way that each book is either the same height as or taller than the book below it. However, today, Lisa noticed that her little brother has messed up her books and they are all out of order! Lisa now wants to sort the books back to her preferred order, but she needs to figure out the minimum number of swaps needed to accomplish this. Task Given a list of integers representing the heights of Lisa\'s books, determine the minimum number of swaps needed to sort the books in non-decreasing order. Implement a function: ```python def minimum_swaps(books: List[int]) -> int: ``` # Input - **books**: A list of integers where each integer represents the height of a book. The length of the list will be at least 1 and at most 1000. # Output - Return an integer that indicates the minimum number of swaps needed to sort the books in non-decreasing order. # Example ```python books = [4, 3, 1, 2] print(minimum_swaps(books)) # Output: 3 books = [1, 5, 4, 3, 2] print(minimum_swaps(books)) # Output: 2 ```","solution":"def minimum_swaps(books): Given a list of integers representing the heights of books, determine the minimum number of swaps needed to sort the books in non-decreasing order. Parameters: books (List[int]): A list of integers representing the heights of books. Returns: int: The minimum number of swaps needed to sort the list. n = len(books) arrpos = [(value, idx) for idx, value in enumerate(books)] arrpos.sort(key=lambda it: it[0]) visited = {k: False for k in range(n)} swaps = 0 for i in range(n): if visited[i] or arrpos[i][1] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = arrpos[x][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps"},{"question":"Write a function `skyscrapers_visibility` that returns the number of skyscrapers that have an unobstructed view of the horizon (i.e., are higher than any skyscraper that came before them as you look from left to right). For example, in a sequence of skyscraper heights `[3, 7, 8, 3, 6, 1, 5]`, the skyscrapers with heights 3, 7, and 8 are visible, but the skyscraper with height 3 after the 8 is not because it is blocked by the taller skyscraper with height 8 before it. Input: - `heights`: A list of integers, each representing the height of a skyscraper. Output: - An integer representing the count of unobstructed skyscrapers. Example: ```python heights = [3, 7, 8, 3, 6, 1, 5] skyscrapers_visibility(heights) # 3 ``` Other Technical Details: - You can assume the input list will always have at least one element. - The height of the skyscrapers will be non-negative integers. - There will be a maximum of 10 fixed tests and 100 randomly-generated tests. - Test input size upper bounds: - maximum list length: 1000 elements - maximum height value for any skyscraper: 100000 If you enjoyed this question, be sure to check out others in the series.","solution":"def skyscrapers_visibility(heights): Returns the number of skyscrapers that have an unobstructed view of the horizon. if not heights: return 0 max_height = heights[0] visible_count = 1 # first skyscraper is always visible for height in heights[1:]: if height > max_height: visible_count += 1 max_height = height return visible_count"},{"question":"# Color Mixer A popular online design tool allows users to mix colors for creating custom palettes. The behavior of the color mixer follows specific rules based on primary and secondary colors. The primary colors are: `red`, `blue`, and `yellow`. Secondary colors are created by mixing two primary colors: `red + blue = purple`, `red + yellow = orange`, `blue + yellow = green`. You are tasked with creating a function that simulates the mixing of two colors. If both inputs are primary colors, return the resulting secondary color. If at least one input is a secondary color or if mixing does not follow the predefined rules (e.g., mixing two identical primary colors or secondary color), return `\'Invalid color combination\'`. # Task Write a function `mix_colors(color1: str, color2: str) -> str` that takes two strings representing the colors to be mixed and returns the resulting color according to the rules described above. # Examples ```python mix_colors(\\"red\\", \\"blue\\") = \\"purple\\" mix_colors(\\"red\\", \\"yellow\\") = \\"orange\\" mix_colors(\\"blue\\", \\"blue\\") = \\"Invalid color combination\\" mix_colors(\\"purple\\", \\"yellow\\") = \\"Invalid color combination\\" ``` # Constraints - `color1` and `color2` are non-empty strings. - `color1` and `color2` are either \\"red\\", \\"blue\\", \\"yellow\\", \\"purple\\", \\"orange\\", or \\"green\\".","solution":"def mix_colors(color1: str, color2: str) -> str: Returns the resulting color from mixing two given colors based on predefined rules. Parameters: color1 (str): The first color. color2 (str): The second color. Returns: str: The resulting color or \'Invalid color combination\' if the combination is not valid. primary_colors = {\\"red\\", \\"blue\\", \\"yellow\\"} secondary_colors = { frozenset([\\"red\\", \\"blue\\"]): \\"purple\\", frozenset([\\"red\\", \\"yellow\\"]): \\"orange\\", frozenset([\\"blue\\", \\"yellow\\"]): \\"green\\" } if color1 in primary_colors and color2 in primary_colors: if color1 == color2: return \\"Invalid color combination\\" return secondary_colors[frozenset([color1, color2])] return \\"Invalid color combination\\""},{"question":"Julian wants to create an interesting tree out of toothpicks. He starts with a straight line of toothpicks, each of length 1 unit. He can bend any toothpick to create either an \\"L\\" shape or a \\"T\\" shape. When he bends a toothpick, the bent parts also maintain the same length of 1 unit. Julian wants to determine a specific property of the tree after making a certain number of bends. Each bend can be represented as follows: - \\"L\\" shape: Converts a single toothpick to a 90-degree angle with two segments of length 1. - \\"T\\" shape: Converts a single toothpick to a 180-degree angle with three segments of length 1. The goal is to calculate the total number of segments of length 1 in the tree after a given number of bends. Example: If Julian bends a single toothpick into a \\"T\\" shape, it becomes three segments of length 1. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. - Each test case is described in one line containing a string of length N consisting only of the characters \'L\' and \'T\', which indicates the sequence of bends Julian makes. -----Output----- - For each test case, output a single line containing one integer denoting the total number of segments of length 1 in the tree after Julian completes all bends. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 100 -----Example----- Input: 2 LT TLL Output: 3 6 Explanation: Example case 1: Initial toothpick: 1 segment After \'L\' bend: 2 segments After \'T\' bend: 3 segments Example case 2: Initial toothpick: 1 segment After \'T\' bend: 3 segments After \'L\' bend: 2*3 = 6 segments After \'L\' bend: 2*6 = 12 segments.","solution":"def count_segments(bend_sequence): Given a sequence of bends represented by \'L\' and \'T\', calculate the number of segments of length 1 after the bends. segments = 1 for bend in bend_sequence: if bend == \'L\': segments *= 2 elif bend == \'T\': segments *= 3 return segments def process_input(input_lines): Process multiple test cases. T = int(input_lines[0]) results = [] for i in range(1, T + 1): bend_sequence = input_lines[i].strip() results.append(count_segments(bend_sequence)) return results"},{"question":"Task Given a string containing a mix of letters and numbers, find the longest substring that consists of only letters and return its length. If there are multiple substrings with the same length, return the length of the first one found. # Notes - The string will have at least one letter. - The string may contain both uppercase and lowercase letters. - The string may contain digits. # Input >> Output Examples ``` longestLetterSubstring(\\"abc123def45gh\\"); ==> return 3 ``` Explanation: - The longest substring consisting of only letters is \'abc\' which has a length of 3. ``` longestLetterSubstring(\\"abc123abcd\\"); ==> return 4 ``` Explanation: - The longest substrings consisting of only letters are \'abc\' and \'abcd\'. The length of the first one found (\'abc\') is 4. ``` longestLetterSubstring(\\"123abcdefg45hij\\"); ==> return 7 ``` Explanation: - The longest substring consisting of only letters is \'abcdefg\' which has a length of 7.","solution":"def longestLetterSubstring(s): Given a string containing a mix of letters and numbers, find the longest substring that consists of only letters and return its length. If there are multiple substrings with the same length, return the length of the first one found. max_length = 0 current_length = 0 for char in s: if char.isalpha(): current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"# Objective Implement a function that accepts a list of integers and returns the length of the longest subsequence that forms a valid arithmetic progression (AP). # Definition An arithmetic progression is a sequence of numbers such that the difference between any two consecutive terms is the same. # Input - `arr` (list of integers): The input list of integers, which can be empty or contain up to 10^4 elements. The elements in `arr` are in the range of [-10^6, 10^6]. # Output - Integer: The length of the longest subsequence that forms an arithmetic progression. # Example ```python Input: arr = [1, 7, 10, 15, 27, 29] Output: 3 Explanation: The longest arithmetic progression is [1, 10, 29] with a common difference of 9. Input: arr = [5, 10, 15, 20, 25] Output: 5 Explanation: The entire list forms an arithmetic progression with a common difference of 5. ``` # Note You can consider using dynamic programming or other efficient algorithms to solve the problem within a reasonable time for large inputs.","solution":"def length_of_longest_AP(arr): if not arr: return 0 n = len(arr) if n <= 2: return n # Create a table to store lengths of longest AP. # opt[i][j] will store the length of the longest AP ending with arr[i] and arr[j] opt = [[2 for _ in range(n)] for _ in range(n)] max_length = 2 for j in range(n - 1, 0, -1): i = j - 1 k = j + 1 while i >= 0 and k <= n - 1: if arr[i] + arr[k] < 2 * arr[j]: k += 1 elif arr[i] + arr[k] > 2 * arr[j]: opt[i][j] = 2 i -= 1 else: opt[i][j] = opt[j][k] + 1 max_length = max(max_length, opt[i][j]) i -= 1 k += 1 # If the loop doesn\'t update opt[i][j], set it to 2 while i >= 0: opt[i][j] = 2 i -= 1 return max_length"},{"question":"John is practicing for a coding competition. He is tasked with creating a function that can detect palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. Write a function that takes an integer N as input and returns \\"yes\\" if N is a palindromic number, otherwise returns \\"no\\". -----Input:----- - First line contains T no. of test cases. - For every test case, a line contains an integer N. -----Output:----- For every test case, print \\"yes\\" if N is a palindromic number, otherwise print \\"no\\" on a new line. -----Constraints----- 10 points: - 1 leq T leq 10 - 0 leq N leq 10 20 points: - 1 leq T leq 300 - 0 leq N leq 10^6 70 points: - 1 leq T leq 10^5 - -10^9 leq N leq 10^9 -----Sample Input:----- 3 121 -121 10 -----Sample Output:----- yes no no -----EXPLANATION:----- In #1, the number 121 reads the same backwards, so it is a palindromic number. In #2, the number -121 does not read the same backwards, so it is not a palindromic number. In #3, the number 10 does not read the same backwards, so it is not a palindromic number.","solution":"def is_palindromic_number(N: int) -> str: Returns \\"yes\\" if N is a palindromic number, otherwise returns \\"no\\". str_N = str(N) if str_N == str_N[::-1]: return \\"yes\\" else: return \\"no\\" def process_palindromic_numbers(T: int, numbers: list) -> list: Processes a list of numbers to check for palindromic numbers. Parameters: T (int): The number of test cases numbers (list): List of integers to be checked Returns: list: List of results (\\"yes\\" or \\"no\\") for each number results = [] for number in numbers: results.append(is_palindromic_number(number)) return results"},{"question":"You\'ve been asked to create a special type of encryption for a messaging app where each person can encrypt their message using a shift cipher. The shift cipher is a simple substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet. For example, with a shift of 1, \'A\' would be encrypted to \'B\', \'B\' to \'C\', and so on until \'Z\' would wrap around to \'A\'. Design a function that accepts a string and an integer shift, then returns the encrypted string using the shift cipher. The shift can be positive or negative, indicating the direction of the shift along the alphabet. **Example 1:** ``` Input: message = \\"HELLO\\", shift = 3 Output: \\"KHOOR\\" Explanation: Each letter in \\"HELLO\\" is shifted by 3 positions in the alphabet: H->K, E->H, L->O, L->O, O->R. ``` **Example 2:** ``` Input: message = \\"ABC\\", shift = -1 Output: \\"ZAB\\" Explanation: Each letter in \\"ABC\\" is shifted by -1 positions in the alphabet: A->Z, B->A, C->B. ``` **Example 3:** ``` Input: message = \\"PYTHON\\", shift = 26 Output: \\"PYTHON\\" Explanation: A shift of 26 results in the same message as it completes a full cycle of the alphabet. ``` **Note:** 1. The message string will only contain uppercase English letters and will have a length of at most 10000. 2. The shift value will be an integer in the range [-1000000, 1000000].","solution":"def encrypt_message(message, shift): Encrypts the given message using a shift cipher. Parameters: message (str): The message to be encrypted. It contains only uppercase English letters. shift (int): The shift to be applied. It can be positive or negative. Returns: str: The encrypted message. encrypted_message = [] shift = shift % 26 # Reduce the shift to a range of 0-25 for char in message: new_char = chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message)"},{"question":"Arnav loves the game of dominoes. He has a domino set and enjoys arranging the tiles in a straight line. Each domino tile is represented as a pair of numbers (a, b) where either the left side (a) or the right side (b) can match the same number on the adjacent domino tile. For example, (1, 2) can be connected to (2, 3), but not to (4, 5). Given a set of N dominoes, help Arnav determine if it\'s possible to arrange all the domino tiles in a straight line such that the left side of one tile matches the right side of the previous tile. -----Input----- The first line contains an integer T — the number of test cases. T test cases follow. For each test case: - The first line contains an integer N — the number of domino tiles. - The next N lines each contain two integers a and b representing a domino tile (a, b). -----Output----- For each test case, output \\"YES\\" if it\'s possible to arrange all dominoes in a straight line and \\"NO\\" otherwise. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - 1 ≤ a, b ≤ 6 -----Example----- Input: 2 3 1 2 2 3 3 4 3 1 2 2 3 4 5 Output: YES NO -----Explanation----- Example case 1. - We can arrange the tiles as (1, 2), (2, 3), (3, 4). In this arrangement, the right side of each tile matches the left side of the subsequent tile. So the answer is \\"YES\\". Example case 2. - We can arrange (1, 2) and (2, 3) but there is no way to connect (4, 5) to any tile. So the answer is \\"NO\\".","solution":"from collections import defaultdict, deque def can_arrange_dominoes(t, test_cases): def check_sequence(dominoes): if not dominoes: return False adj_list = defaultdict(list) degree = defaultdict(int) for a, b in dominoes: adj_list[a].append(b) adj_list[b].append(a) degree[a] += 1 degree[b] += 1 # Checking if the degree of all vertices is even odd_degree_count = sum(1 for v in degree.values() if v % 2 != 0) if odd_degree_count > 2: return False # BFS/DFS to check if all nodes with at least one edge are connected def is_connected(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in adj_list[node]: if neighbor not in visited: queue.append(neighbor) return visited # Start BFS/DFS from any node that has edges start_node = next(iter(adj_list)) visited_nodes = is_connected(start_node) # Ensure all nodes with edges are visited total_nodes_with_edges = sum(1 for k in degree if degree[k] > 0) return len(visited_nodes) == total_nodes_with_edges results = [] for t_index in range(t): n = test_cases[t_index][0] dominoes = test_cases[t_index][1] if check_sequence(dominoes): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of integers representing elevations of mountains. A mountain is considered \\"scalable\\" if the difference between every adjacent pair of elevations (treated as steps) does not exceed a step difference of `k` units either upwards or downwards. Write a function `is_scalable(elevations: List[int], k: int) -> bool` that returns `True` if the mountain is scalable, otherwise returns `False`. # Example: For an input list of elevations `[3, 5, 6, 7, 11]` and `k = 2`: ``` Difference between elevations at 1st and 2nd position: |5 - 3| = 2 (<= k) Difference between elevations at 2nd and 3rd position: |6 - 5| = 1 (<= k) Difference between elevations at 3rd and 4th position: |7 - 6| = 1 (<= k) Difference between elevations at 4th and 5th position: |11 - 7| = 4 (> k) ``` Result: `False` because one difference (4) is larger than `k = 2`. For another input list `[9, 8, 6, 7, 6]` and `k = 3`: ``` Difference between elevations at 1st and 2nd position: |8 - 9| = 1 (<= k) Difference between elevations at 2nd and 3rd position: |6 - 8| = 2 (<= k) Difference between elevations at 3rd and 4th position: |7 - 6| = 1 (<= k) Difference between elevations at 4th and 5th position: |6 - 7| = 1 (<= k) ``` Result: `True` because all differences are within `k = 3`. # Function Signature: ```python from typing import List def is_scalable(elevations: List[int], k: int) -> bool: ```","solution":"from typing import List def is_scalable(elevations: List[int], k: int) -> bool: Returns True if the mountain is scalable, otherwise returns False. Args: - elevations (List[int]): A list of integers representing elevations. - k (int): The maximum allowed step difference. Returns: - bool: True if the mountain is scalable, otherwise False. for i in range(1, len(elevations)): if abs(elevations[i] - elevations[i-1]) > k: return False return True"},{"question":"Mall Inventory Management You are the manager of a small mall shop, and you have decided to automate the process of keeping track of your inventory. Any time you receive new stock or sell items, you would like to update your inventory automatically. You’ve come up with the following operations that you need to support: 1. \\"add [item_name] [quantity]\\": Add a specified quantity of a given item to the inventory. If the item already exists, increment its quantity. 2. \\"remove [item_name] [quantity]\\": Remove a specified quantity of a given item from the inventory. If the item does not exist, do nothing. If the quantity to remove is greater than the current stock, set the quantity to 0. 3. \\"get [item_name]\\": Return the current quantity of a specified item. If the item does not exist, return `null`. Write a class `Inventory` that performs the requested operations. (Note: The item names consist of a single word without spaces, and the quantity will always be a non-negative integer.) Your class should be able to handle a sequence of these commands and maintain the inventory accordingly. The class must have the following methods: - `add(item_name, quantity)`: Adds `quantity` of `item_name` to the inventory. - `remove(item_name, quantity)`: Removes `quantity` of `item_name` from the inventory. - `get(item_name)`: Returns the current quantity of `item_name` in the inventory or `None` if the item does not exist. Examples ```python inventory = Inventory() inventory.add(\\"apples\\", 10) print(inventory.get(\\"apples\\")) # Expected output: 10 inventory.add(\\"apples\\", 5) print(inventory.get(\\"apples\\")) # Expected output: 15 inventory.remove(\\"apples\\", 12) print(inventory.get(\\"apples\\")) # Expected output: 3 inventory.remove(\\"bananas\\", 1) print(inventory.get(\\"bananas\\")) # Expected output: None inventory.add(\\"bananas\\", 7) print(inventory.get(\\"bananas\\")) # Expected output: 7 inventory.remove(\\"bananas\\", 10) print(inventory.get(\\"bananas\\")) # Expected output: 0 ``` Constraints: 1. Each item name is a non-empty string consisting of a single word. 2. Quantity will always be an integer within the range from 0 to 10000. 3. The sequence of commands to process will not exceed 10000. Implement the class with the specified methods to manage your inventory efficiently.","solution":"class Inventory: def __init__(self): self.items = {} def add(self, item_name, quantity): if item_name in self.items: self.items[item_name] += quantity else: self.items[item_name] = quantity def remove(self, item_name, quantity): if item_name in self.items: self.items[item_name] = max(0, self.items[item_name] - quantity) def get(self, item_name): return self.items.get(item_name)"},{"question":"=====Function Descriptions===== mean The mean tool computes the arithmetic mean of the elements along a specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.mean(my_array, axis = 0) #Output : [2. 3.] print numpy.mean(my_array, axis = 1) #Output : [1.5 3.5] print numpy.mean(my_array, axis = None) #Output : 2.5 print numpy.mean(my_array) #Output : 2.5 By default, the axis value is None. Therefore, it computes the mean over all the dimensions of the input array. var The var tool computes the variance of the elements along a specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.var(my_array, axis = 0) #Output : [1. 1.] print numpy.var(my_array, axis = 1) #Output : [0.25 0.25] print numpy.var(my_array, axis = None) #Output : 1.25 print numpy.var(my_array) #Output : 1.25 By default, the axis value is None. Therefore, it computes the variance over all the dimensions of the input array. =====Problem Statement===== You are given a 2-D array with dimensions NXN (N is odd). Your task is to compute the mean across axis 1 and then find the variance of that result. =====Output Format===== Compute the mean along axis 1. Then, print the variance of that mean.","solution":"import numpy as np def mean_variance(numpy_array): Computes the mean along axis 1 and then finds the variance of that result. Parameters: numpy_array (numpy.ndarray): The input 2-D array with dimensions NXN. Returns: float: The variance of the mean of elements computed along axis 1. mean_axis1 = np.mean(numpy_array, axis=1) variance_of_mean = np.var(mean_axis1) return variance_of_mean"},{"question":"Implement a function that takes a string containing a mathematical expression of simple arithmetic operations (+, -, *, /) and numbers, and returns the result of the expression. The expression may contain spaces, which should be ignored. Note: - The expression will be a valid, well-formed arithmetic expression. - You can assume operations follow standard operator precedence (i.e., multiplication and division are performed before addition and subtraction). Example Given the expression \\"3 + 5 * 2\\", the function should return 13. If the expression is \\"10 + 2 * 6 / 3 - 1\\", the function should return 13. Remember to handle spaces in the input correctly.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression consisting of numbers and +, -, *, / operators. Spaces in the expression are ignored. # Remove any spaces from the expression expression = expression.replace(\\" \\", \\"\\") # Evaluate the expression return eval(expression)"},{"question":"A company has a list of employee names and their corresponding scores in a recent performance review. The employee names are unique, and the scores range from 0 to 100. The company wants to reward the top performers but is facing an issue: there could be ties in the highest scores. Therefore, they have decided to sort the employees primarily by their scores in descending order. In case of a tie, the employees should be sorted alphabetically by their names in ascending order. Write a function that takes a list of tuples, where each tuple contains an employee name and their score, and returns the list sorted as described above. # Example ```python employees = [(\\"Alice\\", 88), (\\"Bob\\", 95), (\\"Charlie\\", 88), (\\"David\\", 85), (\\"Eve\\", 95)] sorted_employees = [(\\"Bob\\", 95), (\\"Eve\\", 95), (\\"Alice\\", 88), (\\"Charlie\\", 88), (\\"David\\", 85)] ``` # Constraints - All employee names are strings containing only alphabetic characters. - Scores are integers between 0 and 100, inclusive. - The list will have at least one employee. # Notes - No need to handle cases with invalid input types or values. - Preserve the input structure and order of elements in the result, ensuring a stable sort when applicable.","solution":"def sort_employees_by_score(employees): Sorts a list of employees based on their scores in descending order. In case of a tie, employees are sorted alphabetically by their names in ascending order. :param employees: List of tuples, where each tuple contains (name, score) :return: List of tuples sorted as per the criteria # Sort primarily by score in descending order and secondarily by name in ascending order return sorted(employees, key=lambda x: (-x[1], x[0])) # Example usage: # employees = [(\\"Alice\\", 88), (\\"Bob\\", 95), (\\"Charlie\\", 88), (\\"David\\", 85), (\\"Eve\\", 95)] # sorted_employees = sort_employees_by_score(employees) # print(sorted_employees) # Output: [(\'Bob\', 95), (\'Eve\', 95), (\'Alice\', 88), (\'Charlie\', 88), (\'David\', 85)]"},{"question":"You have been hired as a developer for a new startup. Your first task is to create a function that compresses a given string using a basic form of Run-Length Encoding (RLE). Run-Length Encoding is a way of encoding data in which consecutive identical elements (characters, in this case) are stored as a single data value and a count. For example, the string `\\"aaabccc\\"` can be compressed to `\\"a3b1c3\\"`. # Requirements: 1. Write a function that takes a single string as input and returns the compressed version of the string. 2. The compressed string should only consist of the character followed by the number of times it appears consecutively. 3. If a character appears only once, it should still be followed by the number `1`. 4. The function should handle just lowercase letters and spaces. Spaces should be treated like any other character and be encoded as well. # Example: For the input string `\\"hello world\\"`, the output should be `\\"h1e1l2o1 2w1o1r1l1d1\\"`. # Additional Notes: - Do not worry about the length of the input string. - Ensure that the function works efficiently for reasonably long input strings. Good luck!","solution":"def compress_string(s): Compresses the input string using basic Run-Length Encoding (RLE). Parameters: s (str): The input string to be compressed. Returns: str: The compressed version of the input string. if not s: return \\"\\" compressed = [] count = 1 prev_char = s[0] for char in s[1:]: if char == prev_char: count += 1 else: compressed.append(f\\"{prev_char}{count}\\") prev_char = char count = 1 compressed.append(f\\"{prev_char}{count}\\") return \'\'.join(compressed)"},{"question":"Write a function to determine if a given string is a \\"k-palindrome\\". A string is called \\"k-palindrome\\" if it can be transformed into a palindrome by removing at most `k` characters from it. For example, the string \\"abca\\" is a 1-palindrome because removing the character \'b\' results in the palindrome \\"aca\\". The function should take two inputs: a string `s` and an integer `k`, and it should return `True` if the string is a k-palindrome, otherwise return `False`. # Examples 1. k_palindrome(\\"abca\\", 1) should return `True` because by removing \'b\' from the string, it becomes \\"aca\\", which is a palindrome. 2. k_palindrome(\\"abcdeca\\", 2) should return `True` because by removing \'b\' and \'e\', it becomes \\"acdca\\", which is a palindrome. 3. k_palindrome(\\"abcdef\\", 2) should return `False` because there’s no way to remove at most 2 characters to form a palindrome. # Constraints - The input string will have at most length `1000`. - The integer `k` will be in the range of `0` to `1000`. # Hints - Use dynamic programming to solve this problem. - Consider the longest common subsequence between the original string and its reverse.","solution":"def k_palindrome(s, k): Determine if the string s can be transformed into a palindrome by removing at most k characters. def longest_common_subsequence(s1, s2): len1, len2 = len(s1), len(s2) dp = [[0] * (len2 + 1) for _ in range(len1 + 1)] for i in range(1, len1 + 1): for j in range(1, len2 + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[len1][len2] s_reversed = s[::-1] lcs_length = longest_common_subsequence(s, s_reversed) return len(s) - lcs_length <= k"},{"question":"__LeetCode Question__ Given a string \\"dirty_list\\" which represents a list of comma-separated elements that may be embedded within extra characters, return the sum of all the negative integers found in the list. You need to extract these negative numbers while ignoring other characters and compute their sum. # Input - `dirty_list`: A dirty string containing negative integers separated by commas and other non-numeric characters. # Output - Return the sum of all negative integers in the string, as an integer. # Example ```python Input: \\"neg-12commamess-34here-9problem\\" Output: -55 (because -12 + -34 + -9 = -55) Input: \\"numbers,-1more-st-2uff,-23\\" Output: -26 (because -1 + -2 + -23 = -26) ``` # Constraints - Each negative integer in the string will be correctly formatted, beginning with \'-\'. - The string may also contain any combinations of letters, symbols, or digits that are not part of a number. - The numbers may be any digit length and can appear in various positions inside the string. - The list always contains at least one negative number. *Good luck!*","solution":"import re def sum_of_negative_integers(dirty_list): Returns the sum of all negative integers found in the input string `dirty_list`. # Find all negative integers in the string negative_integers = re.findall(r\\"-d+\\", dirty_list) # Convert found strings to integers and calculate the sum return sum(map(int, negative_integers))"},{"question":"=====Problem Statement===== You often work with numbers and sometimes need to process lists containing those numbers. One useful operation is to find which numbers in a list are repeated and how many times they each occur. Task: Given a list of integers, write a program to count the frequency of each integer and return a dictionary where the keys are the integers and the values are their respective counts. =====Example===== Example >>> nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4] The expected output will be: >>> count_frequencies(nums) {1: 1, 2: 2, 3: 3, 4: 4} =====Input Format===== A single line containing space-separated integers. =====Output Format===== A dictionary where keys are the integers from the input list and values are the counts of their occurrences. =====Function Signature===== def count_frequencies(nums: List[int]) -> Dict[int, int]:","solution":"from typing import List, Dict from collections import Counter def count_frequencies(nums: List[int]) -> Dict[int, int]: Returns a dictionary key is the integer from the input list and the value is the count of its occurrences. return dict(Counter(nums))"},{"question":"**Step 1:** Create a function called `count_words()` that counts the frequency of each word in a given string and returns a dictionary where the keys are the words and the values are the counts. Assume that words are separated by spaces and are case-insensitive. For example, `count_words(\\"Hello world hello\\")` would return `{\'hello\': 2, \'world\': 1}`. **Step 2:** Now create a function called `most_common_word()` that takes a string and returns the word that appears the most frequently. If there are multiple words with the same frequency, return the first one that appears in the string. For example, `most_common_word(\\"hello world hello\\")` would return `\\"hello\\"`.","solution":"def count_words(s): Counts the frequency of each word in a given string, ignoring case. Args: s: str - The input string. Returns: dict - A dictionary where the keys are words and the values are their counts. words = s.lower().split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count def most_common_word(s): Finds the most common word in a given string. Args: s: str - The input string. Returns: str - The most common word. word_count = count_words(s) max_count = 0 most_common = None for word in s.lower().split(): if word_count[word] > max_count: max_count = word_count[word] most_common = word return most_common"},{"question":"Given a string `s` and a list of words `words`, determine if `s` can be segmented into a space-separated sequence of one or more dictionary words from the list `words`. Return `true` if it can be segmented, otherwise return `false`. Example: ```text s = \\"leetcode\\" words = [\\"leet\\", \\"code\\"] Output = true s = \\"applepenapple\\" words = [\\"apple\\", \\"pen\\"] Output = true s = \\"catsandog\\" words = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output = false ``` Your code should consider the optimal runtime complexity and handle edge cases, such as empty strings and lists.","solution":"def word_break(s, words): Determines if the string s can be segmented into a space-separated sequence of one or more dictionary words from the list words. :param s: Input string :param words: List of words (dictionary) :return: True if s can be segmented, else False word_set = set(words) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"You are given a matrix of m x n elements (m rows, n columns), write a function that prints the elements of the matrix in spiral order. Example: ```python def spiralOrder(matrix): if not matrix: return [] m, n = len(matrix), len(matrix[0]) seen = [[False] * n for _ in range(m)] result = [] dr = [0, 1, 0, -1] dc = [1, 0, -1, 0] r = c = di = 0 for _ in range(m * n): result.append(matrix[r][c]) seen[r][c] = True nr, nc = r + dr[di], c + dc[di] if 0 <= nr < m and 0 <= nc < n and not seen[nr][nc]: r, c = nr, nc else: di = (di + 1) % 4 r, c = r + dr[di], c + dc[di] return result matrix = [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] print(spiralOrder(matrix)) # Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ] print(spiralOrder(matrix)) # Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]","solution":"def spiralOrder(matrix): if not matrix: return [] result = [] m, n = len(matrix), len(matrix[0]) top, bottom, left, right = 0, m - 1, 0, n - 1 while top <= bottom and left <= right: for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"You are an astronaut on a space mission. Your spaceship\'s navigation system relies on a set of planetary coordinates to make precise maneuvers. The coordinates are provided in a dictionary where each key is a planet\'s name and its value a tuple representing the x, y, and z coordinates. Your task is to calculate the Euclidean distance from your current position to a given target planet. The function will be provided the dictionary of coordinates and the name of the target planet. If the target planet name is not in your dictionary, return \'Planet not found.\' Otherwise, compute the distance using the formula: [ text{distance} = sqrt{(x_2 - x_1)^2 + (y_2 - y_1)^2 + (z_2 - z_1)^2} ] (where ((x_1, y_1, z_1)) is your current position). Write a function `navigate_space(coordinates, target, current_position)` which takes three parameters: 1. `coordinates` (dict): A dictionary where each key is a string representing a planet\'s name and each value is a tuple of three integers representing x, y, z coordinates. 2. `target` (string): The name of the target planet. 3. `current_position` (tuple): A tuple of three integers representing your current x, y, z coordinates. The function should return the Euclidean distance as a float rounded to two decimal places if the planet exists and \'Planet not found.\' if not. Example: ```python coordinates = { \\"Mars\\": (2, 3, 4), \\"Jupiter\\": (5, 6, 7), \\"Saturn\\": (1, 0, -1) } current_position = (0, 0, 0) print(navigate_space(coordinates, \\"Mars\\", current_position)) # Output: 5.39 print(navigate_space(coordinates, \\"Pluto\\", current_position)) # Output: Planet not found. ```","solution":"import math def navigate_space(coordinates, target, current_position): Calculates the Euclidean distance from the current position to the target planet. :param coordinates: Dictionary with planet names as keys and (x, y, z) tuples as values. :param target: The name of the target planet. :param current_position: A tuple representing the current (x, y, z) position. :returns: The Euclidean distance to the target planet rounded to two decimal places or \'Planet not found.\' if target not in coordinates: return \'Planet not found\' (x1, y1, z1) = current_position (x2, y2, z2) = coordinates[target] distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2) return round(distance, 2)"},{"question":"You need to create a function to evaluate a mathematical expression involving addition, subtraction, multiplication, division, and parentheses. The input to your function is a string `expression` which consists of integers and the five operators mentioned above. You need to ensure the expression is evaluated following the precedence rules of arithmetic. You may assume that the given expression is valid and there will be no division by zero. Example: ```python evaluate_expression(\\"3+2*2\\") # should return 7 evaluate_expression(\\"3/2\\") # should return 1.5 evaluate_expression(\\"(2+6*3+5-(3*14/7+2)*5)+3\\") # should return -12 ``` Your task is to implement the `evaluate_expression` function which takes the string `expression` and returns the evaluated result as a float.","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression string involving addition, subtraction, multiplication, division, and parentheses. def calc(expression): stack, num, sign = [], 0, \\"+\\" i = 0 while i < len(expression): char = expression[i] if char.isdigit(): num = num * 10 + int(char) if char == \'(\': counter, j = 1, i while counter != 0: i += 1 if expression[i] == \'(\': counter += 1 if expression[i] == \')\': counter -= 1 num = calc(expression[j+1:i]) if char in \\"+-*/()\\" or i == len(expression) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] = stack[-1] * num elif sign == \'/\': stack[-1] = stack[-1] / num sign = char num = 0 i += 1 return sum(stack) return calc(expression)"},{"question":"Task Given a positive integer `n`, compute the sum of all the digits of `2^n`. Return the sum of the digits as an integer. # Example For `n = 15`, `2^15 = 32768`, the sum of the digits is `3 + 2 + 7 + 6 + 8 = 26`, so the result should be `26`. For `n = 100`, `2^100` is a large number but the digit sum can be calculated. The result should be the correct sum of the digits. # Input/Output - `[input]` integer `n` A positive integer (1 ≤ n ≤ 1000). - `[output]` an integer The sum of the digits of `2^n`.","solution":"def sum_of_digits_of_power_of_2(n): Computes the sum of all the digits of 2 raised to the power of n. Args: n (int): A positive integer (1 ≤ n ≤ 1000). Returns: int: Sum of the digits of 2^n. # Calculate 2 to the power of n power_value = 2 ** n # Convert the power value to a string to iterate through digits power_value_str = str(power_value) # Calculate the sum of the digits digit_sum = sum(int(digit) for digit in power_value_str) return digit_sum"},{"question":"Design an algorithm to merge two sorted linked lists into a single sorted linked list. The input is two non-decreasingly sorted linked lists. Example: Input: 1->2->4, 1->3->4 Output: 1->1->2->3->4->4 Input: 2->6->9, 1->3->7->10 Output: 1->2->3->6->7->9->10 Input: 5, 1->2->3 Output: 1->2->3->5 Note: The resulting linked list should be in non-decreasing order. The merging should be done without using extra space, by rearranging pointers in the existing nodes.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def merge_two_sorted_lists(l1, l2): Merges two sorted linked lists into one sorted linked list. # Create a dummy node to serve as the starting point for the merged list dummy = ListNode(0) current = dummy # Traverse both lists and attach the smaller node to the merged list while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If one list is exhausted, attach the remaining elements of the other list if l1: current.next = l1 elif l2: current.next = l2 # Return the head of the merged list return dummy.next"},{"question":"Given a string s, your task is to determine if it can be rearranged to form an anagram of a palindrome. A string is an anagram of a palindrome if it can be rearranged to form a palindrome. Example 1: Input: s = \\"carrace\\" Output: true Explanation: \\"carrace\\" can be rearranged to form \\"racecar\\", which is a palindrome. Example 2: Input: s = \\"daily\\" Output: false Explanation: \\"daily\\" cannot be rearranged to form any palindrome. Note: - The input string s will consist of lowercase English letters only. - The length of string s will be at most 1000 characters.","solution":"def can_form_palindrome(s): Determine if a string can be rearranged to form an anagram of a palindrome. A string can be rearranged to form a palindrome if and only if at most one character has an odd count. :param s: string to check :return: True if it can be rearranged, False otherwise from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"**Majority Element** -- A majority element in an array is an element that appears more than n/2 times in the array, where n is the length of the array. For example: ``` array: [3, 3, 4, 2, 4, 4, 2, 4, 4] majority element: 4 ``` Task Write a function that takes a list of integers as input and returns the majority element in the list. If no majority element exists, return `\\"No Majority Element\\"`. * The function should return a single integer if there is a majority element. * If no single element appears more than half the time, the function should return `\\"No Majority Element\\"`. **Note:** You can assume the input list will not be empty. The function signature is: ```python def find_majority_element(nums: List[int]) -> Union[int, str]: # Your code here ```","solution":"from typing import List, Union def find_majority_element(nums: List[int]) -> Union[int, str]: Returns the majority element in the list if it exists, otherwise returns \\"No Majority Element\\". A majority element is an element that appears more than n/2 times in the list, where n is the length of the list. count = {} n = len(nums) for num in nums: if num in count: count[num] += 1 else: count[num] = 1 if count[num] > n // 2: return num return \\"No Majority Element\\""},{"question":"You need to design a function, `memoize`, that takes another function as its argument and returns a memoized version of that function. The memoized function should cache results based on the provided arguments so that if it is called again with the same arguments, it returns the cached result without recomputing. Here is an example demonstrating the expected behavior: ```python def slow_add(a, b): # Simulate a slow addition computation time.sleep(2) return a + b memoized_slow_add = memoize(slow_add) print(memoized_slow_add(2, 3)) # First call; takes 2 seconds print(memoized_slow_add(2, 3)) # Second call; returns immediately with cached result ```","solution":"def memoize(f): Memoizes the given function f. Caches results of function calls based on arguments. cache = {} def memoized_function(*args): if args in cache: return cache[args] result = f(*args) cache[args] = result return result return memoized_function"},{"question":"Array Summation Write a function that calculates the sum of an array of numbers. However, the function should skip any numbers that are strictly greater than a given threshold. The function should take two parameters: 1. `numbers` - an array of integers. 2. `threshold` - an integer representing the maximum value to consider in the summation. Implement the function such that it returns the sum of the values in the `numbers` array that are less than or equal to the `threshold`. # Examples: ```python sum_below_threshold([3, 10, 5, 7], 6) # Returns 8 (3 + 5) sum_below_threshold([1, -2, 3, 4, 5], 3) # Returns 2 (1 + (-2) + 3) sum_below_threshold([10, 20, 30], 15) # Returns 10 (10) ``` # Constraints: - The `numbers` array will contain between 0 and 1000 elements. - Each integer in the `numbers` array will be between -1000 and 1000. - The `threshold` integer will be between -1000 and 1000.","solution":"def sum_below_threshold(numbers, threshold): Returns the sum of the values in the `numbers` array that are less than or equal to the `threshold`. return sum(number for number in numbers if number <= threshold)"},{"question":"When filtering an array of strings, we may need to check each string for the presence of any of a given list of substrings. Write a function `filter_strings(arr: List[str], substrings: List[str]) -> List[str]` that takes an array of strings `arr` and a list of substrings `substrings`, and returns a new list of strings containing only those strings from `arr` that contain at least one substring from `substrings`. For example: ```python filter_strings([\\"hello world\\", \\"hi there\\", \\"goodbye\\"], [\\"hello\\", \\"good\\"]) # should return [\\"hello world\\", \\"goodbye\\"] filter_strings([\\"apple\\", \\"banana\\", \\"cherry\\"], [\\"ap\\", \\"ch\\"]) # should return [\\"apple\\", \\"cherry\\"] ``` Your implementation should iterate efficiently over the strings in `arr` and the substrings in `substrings`, returning only those strings that contain at least one matching substring.","solution":"from typing import List def filter_strings(arr: List[str], substrings: List[str]) -> List[str]: Returns a list of strings from `arr` that contain at least one of the substrings in `substrings`. filtered_list = [] for s in arr: if any(sub in s for sub in substrings): filtered_list.append(s) return filtered_list"},{"question":"You are given a 2D grid with m rows and n columns, where each cell can be either a live cell (represented by \'1\') or a dead cell (represented by \'0\'). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal), and the next state of the grid is determined based on the following rules: 1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies, as if by overpopulation. 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. Write a function to compute the next state of the grid (after one update step). Example 1: Input: board = [ [0,1,0], [0,0,1], [1,1,1], [0,0,0] ] Output: [ [0,0,0], [1,0,1], [0,1,1], [0,1,0] ] Example 2: Input: board = [ [1,1], [1,0] ] Output: [ [1,1], [1,1] ] Constraints: - m == board.length - n == board[i].length - 1 <= m, n <= 50 - board[i][j] is 0 or 1","solution":"def game_of_life(board): Compute the next state of the grid according to the rules of the Game of Life. def count_live_neighbors(board, r, c): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] live_count = 0 for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < len(board) and 0 <= nc < len(board[0]): if board[nr][nc] == 1: live_count += 1 return live_count m, n = len(board), len(board[0]) new_board = [[0] * n for _ in range(m)] for r in range(m): for c in range(n): live_neighbors = count_live_neighbors(board, r, c) if board[r][c] == 1: if live_neighbors < 2 or live_neighbors > 3: new_board[r][c] = 0 else: new_board[r][c] = 1 else: if live_neighbors == 3: new_board[r][c] = 1 for r in range(m): for c in range(n): board[r][c] = new_board[r][c] return board"},{"question":"Casey just got a new job as a software engineer and needs a way to calculate his commute time to the office. To simplify the problem, he decides to split his travel into segments and calculates the expected travel time for each segment based on the average speed. Each segment has: - A distance `D` in kilometers. - An average speed `S` in kilometers per hour. The total travel time `T` for each segment is calculated using the formula `T = D / S`. However, Casey\'s road conditions might cause some disturbances: - If the road is congested, the speed `S` should be considered half of the given value. - If the road is smooth, the speed `S` remains unchanged. Your Task Write a function `calculate_commute_time` that takes in two lists: distances and speeds, both with lengths between `1` and `1000` inclusive, representing multiple segments of the commute. Additionally, a third list representing `conditions` of size equal to the other lists. - `distances[i]` represents the distance of the `i-th` segment. - `speeds[i]` represents the average speed of the `i-th` segment. - `conditions[i]` represents the condition of the `i-th` segment and can be either \\"congested\\" or \\"smooth\\". The function should return the total expected travel time `T` for the entire commute, rounded to the nearest integer. # Example: ```python distances = [40, 60, 30] speeds = [80, 100, 120] conditions = [\\"smooth\\", \\"congested\\", \\"smooth\\"] calculate_commute_time(distances, speeds, conditions) ``` Returns: ```python 2 ``` # Note: - In the example above: - For the first segment: `T1 = 40 / 80 = 0.5` - For the second segment (congested): `T2 = 60 / (100 / 2) = 1.2` - For the third segment: `T3 = 30 / 120 = 0.25` - Total time `T = T1 + T2 + T3 = 0.5 + 1.2 + 0.25 = 1.95` rounded to 2. **Constraints** - All elements of `distances` and `speeds` are positive integers. - All strings in `conditions` are either \\"smooth\\" or \\"congested\\".","solution":"def calculate_commute_time(distances, speeds, conditions): Calculate the total expected travel time for Casey\'s commute based on given segments. Parameters: distances (list of int): Distances of the segments in kilometers. speeds (list of int): Average speeds of the segments in kilometers per hour. conditions (list of str): Conditions of the segments, either \\"smooth\\" or \\"congested\\". Returns: int: Total expected travel time rounded to the nearest integer. total_time = 0 for D, S, condition in zip(distances, speeds, conditions): if condition == \\"congested\\": S = S / 2 total_time += D / S return round(total_time)"},{"question":"You are given a list of integers representing the altitude of land at various points along a 1D path. After a heavy rain, water will collect in the valleys and your task is to calculate the total volume of water that will be trapped after the rain. Water can only be trapped in a valley if it is bounded by higher land on both sides. Write a function that takes a list of integers as input and returns the total amount of water trapped. The function signature is as follows: ```python def calculate_trapped_water(heights: List[int]) -> int: ``` # Examples: ```python # Example 1 heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] calculate_trapped_water(heights) # Output: 6 # Example 2 heights = [4, 2, 0, 3, 2, 5] calculate_trapped_water(heights) # Output: 9 ``` # Constraints: - The list `heights` will contain at most `10^4` integers. - Each integer will be between `0` and `1000`.","solution":"def calculate_trapped_water(heights): Given a list of integers representing the altitude of land at various points along a 1D path, returns the total amount of water that will be trapped after the rain. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += max(0, min(left_max[i], right_max[i]) - heights[i]) return trapped_water"},{"question":"You are given a string S of length N. You can perform the following operations on the string: 1. Convert any lowercase letter to uppercase. 2. Convert any uppercase letter to lowercase. 3. Reverse any substring of the string (that is, you select some range [i, j] and reverse the characters in that range). The goal is to determine the lexicographically smallest string that can be obtained by applying the above operations any number of times. Example: Input: S = \\"aBcDe\\" Output: \\"ABCDE\\" Explanation: One possible way to achieve the smallest string is to convert all characters to uppercase. In this case, \\"ABCDE\\" is the lexicographically smallest string. Constraints: 1 <= N <= 1000 S consists of lowercase and uppercase English letters only.","solution":"def lexicographically_smallest_string(S): Returns the lexicographically smallest string by applying the given operations. Converting all characters to uppercase results in the lexicographically smallest string. return S.lower()"},{"question":"Write a function ```python def flatten(d: dict) -> dict: ``` to flatten a nested dictionary. The keys of the nested dictionaries will be concatenated with a period. E.g ```python flatten({\\"a\\": 1, \\"b\\": {\\"c\\": 2, \\"d\\": {\\"e\\": 3, \\"f\\": 4}}}) == {\\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3, \\"b.d.f\\": 4} flatten({\\"key\\": {\\"key\\": {\\"key\\": 5}}}) == {\\"key.key.key\\": 5} flatten({\\"a\\": 1, \\"b\\": 2}) == {\\"a\\": 1, \\"b\\": 2} flatten({\\"nested\\": {\\"dict\\": {\\"is\\": {\\"complex\\": 42}}}}) == {\\"nested.dict.is.complex\\": 42} ``` The input dictionaries can have any level of nesting.","solution":"def flatten(d: dict, parent_key: str = \'\', sep: str = \'.\') -> dict: Flattens a nested dictionary. The keys of the nested dictionaries will be concatenated with a period. Args: - d (dict): The dictionary to flatten. - parent_key (str): The base key string for recursion. Defaults to \'\'. - sep (str): The separator to use between keys. Defaults to \'.\'. Returns: - dict: The flattened dictionary. items = {} for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.update(flatten(v, new_key, sep=sep)) else: items[new_key] = v return items"},{"question":"You are given a sorted, rotated array of unique integers `arr`, and an integer `target`. A sorted, rotated array \\"rotated\\" from a sorted array is derived by taking a sorted array and rotating (winding) it at an unknown pivot. For example, an array like `[4,5,6,7,0,1,2]` can be rotated (shifted) at the pivot index `3` resulting in the rotated array. Write a function `search` to find the index of the given `target` in the rotated array. If the target is not found, return `-1`. Input - `arr`: A list of unique integers that were originally sorted in ascending order and then rotated at some pivot. - `target`: An integer to search for in `arr`. Output Return the index of `target` in `arr` or `-1` if `target` is not present. Example ```python arr = [4,5,6,7,0,1,2] target = 0 search(arr, target) -> 4 arr = [4,5,6,7,0,1,2] target = 3 search(arr, target) -> -1 arr = [1] target = 0 search(arr, target) -> -1 ``` Constraints - `1 <= len(arr) <= 5000` - `-10^4 <= arr[i] <= 10^4` - `arr` contains unique integers. - `arr` is non-empty and has been rotated at least once. - `-10^4 <= target <= 10^4`","solution":"def search(arr, target): Returns the index of target in the rotated sorted array arr, or -1 if target is not found. left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid if arr[left] <= arr[mid]: # Left part is sorted if arr[left] <= target < arr[mid]: right = mid - 1 else: left = mid + 1 else: # Right part is sorted if arr[mid] < target <= arr[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"The popularity of a social media post depends on the number of likes it receives. A user wants to maximize the number of likes on their post by asking their friends to like it periodically. The user has a record of like counts at different timestamps and wants to analyze the growth pattern. Given a list of timestamps and the corresponding number of likes, find the maximum gain in likes for any two valid timestamps such that the first timestamp is strictly less than the second timestamp. Write a function `maxLikeGain(timestamps, likes)` that takes in two lists: - `timestamps`: a list of integers representing the timestamps in ascending order. - `likes`: a list of integers representing the number of likes at each timestamp. Your task is to find the maximum increase in the number of likes. -----Input:----- - An integer `N` representing the number of timestamp-like pairs. - A list of integers representing the timestamps in ascending order. - A list of integers representing the like counts at each timestamp. -----Output:----- - A single integer representing the maximum gain in likes. -----Constraints----- - 2 <= N <= 1000 - 0 <= likes[i] <= 10^6 -----Sample Input:----- 5 [1, 2, 3, 4, 5] [10, 15, 20, 25, 30] -----Sample Output:----- 20","solution":"def maxLikeGain(timestamps, likes): Parameters: timestamps (list): A list of integers representing the timestamps in ascending order. likes (list): A list of integers representing the number of likes at each timestamp. Returns: int: The maximum gain in likes between any two timestamps. min_likes = likes[0] max_gain = 0 for i in range(1, len(likes)): # Update the max_gain for the current timestamp gain = likes[i] - min_likes max_gain = max(max_gain, gain) # Update the minimum likes seen so far min_likes = min(min_likes, likes[i]) return max_gain"},{"question":"You are given an integer array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`. You need to shuffle the array into the form `[x1,y1,x2,y2,...,xn,yn]`. Write a function `shuffle_array` that accepts the array `nums` and the integer `n`, and returns the shuffled array. # Input - `nums`: a list of `2n` integers, where `1 <= 2n <= 10^4` and `-10^6 <= nums[i] <= 10^6` - `n`: an integer # Output - A list of `2n` integers in the form `[x1,y1,x2,y2,...,xn,yn]` # Function Signature ```python def shuffle_array(nums: List[int], n: int) -> List[int]: ``` # Examples ```python shuffle_array([2, 5, 1, 3, 4, 7], 3) # Output: [2, 3, 5, 4, 1, 7] shuffle_array([1, 1, 2, 2], 2) # Output: [1, 2, 1, 2] shuffle_array([1, 2, 3, 4, 4, 3, 2, 1], 4) # Output: [1, 4, 2, 3, 3, 2, 4, 1] ``` # Note - In the first example, the input `[2, 5, 1, 3, 4, 7]` with `n = 3` is transformed into `[x1 = 2, x2 = 5, x3 = 1, y1 = 3, y2 = 4, y3 = 7]` resulting in `[2, 3, 5, 4, 1, 7]`. - The function should maintain efficiency given the constraints.","solution":"def shuffle_array(nums, n): Shuffles the given array `nums` into the form [x1, y1, x2, y2, ..., xn, yn]. Args: nums: List[int] -- the input list consisting of 2n elements. n: int -- the half-length of the input list. Returns: List[int] -- the shuffled list. shuffled = [] for i in range(n): shuffled.append(nums[i]) shuffled.append(nums[n + i]) return shuffled"},{"question":"In a galaxy far, far away, there exists a rectangular grid of size N times M planets, each containing a specific amount of energy. The grid is represented by a matrix where each entry is a non-negative integer indicating the energy of a corresponding planet. A traveler starts at the top-left planet (position (1,1)) and wants to reach the bottom-right planet (position (N,M)). However, the traveler can move to the planet to the right or the planet directly below their current position. The traveler needs to collect the maximum energy possible along their path to the destination. You are tasked with determining the maximum amount of energy the traveler can collect when moving optimally. -----Input----- - The first line of the input contains two integers N and M denoting the number of rows and columns of the grid, respectively. - The next N lines contain M space-separated integers each, where the j-th integer in the i-th line represents the energy on the planet located at (i, j). -----Output----- Output a single integer, representing the maximum amount of energy the traveler can collect. -----Constraints----- - 1 le N, M le 1000 - 0 le text{Energy value} le 10^5 -----Example Input----- 3 3 1 3 1 1 5 1 4 2 1 -----Example Output----- 12 -----Explanation----- Example case 1: One optimal path is 1 → 3 → 5 → 2 → 1, where the collected energy is 1 + 3 + 5 + 2 + 1 = 12.","solution":"def max_energy(n, m, grid): dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"You are given an n times n matrix filled with non-negative integers. Your task is to find the minimum path sum from the top-left to the bottom-right corner. You can only move either down or right at any point in time. Return the minimum path sum. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of testcases. Each testcase starts with a single integer n (1 leq n leq 50), the size of the matrix. The next n lines contain n integers each, representing the matrix. -----Output----- For each testcase, print a single integer — the minimum path sum from the top-left to the bottom-right corner. -----Example----- Input 2 3 1 3 1 1 5 1 4 2 1 2 1 2 1 1 Output 7 3 -----Note----- In the first test case, the path 1→3→1→1→1 has the minimum sum, which is 7. In the second test case, the path 1→1→1 has the minimum sum, which is 3.","solution":"def min_path_sum(matrix): Returns the minimum path sum in a matrix from the top-left to the bottom-right corner only moving right or down. n = len(matrix) # Create a DP table for memoization dp = [[0]*n for _ in range(n)] dp[0][0] = matrix[0][0] # Initialize the first row for i in range(1, n): dp[0][i] = dp[0][i-1] + matrix[0][i] # Initialize the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[-1][-1]"},{"question":"In a small town, there is an annual competition called the \\"Festival of Lights.\\" The competition involves decorating houses using a variety of colored lights. Each participant has a house represented by an integer array, where each element signifies the color of the light at that position along their house. Colors are represented as integers. The goal of the competition is to have the longest contiguous subarray of lights with exactly two different colors. You need to write a program that, given an array of integers representing the colors of the lights on the house, returns the length of the longest contiguous subarray containing exactly two different colors. Example: ``` Input: [1, 3, 1, 2, 2, 3, 4, 3] Output: 3 Explanation: The longest subarray with exactly two different colors is [1, 3, 1] or [2, 2, 3], both of length 3. Input: [4, 4, 5, 5, 4, 3] Output: 5 Explanation: The longest subarray with exactly two different colors is [4, 4, 5, 5, 4], of length 5. Input: [1, 2, 3, 4, 5] Output: 2 Explanation: Any subarray with two different colors is of length 2, e.g., [1, 2], [2, 3], etc. ``` Your task is to implement the function `def find_longest_subarray(arr):` which takes the array `arr` as input and returns an integer representing the length of the longest contiguous subarray with exactly two different colors.","solution":"def find_longest_subarray(arr): Returns the length of the longest contiguous subarray containing exactly two different colors. if len(arr) < 2: return 0 max_len = 0 start = 0 color_count = {} for end in range(len(arr)): if arr[end] in color_count: color_count[arr[end]] += 1 else: color_count[arr[end]] = 1 while len(color_count) > 2: color_count[arr[start]] -= 1 if color_count[arr[start]] == 0: del color_count[arr[start]] start += 1 current_len = end - start + 1 if len(color_count) == 2: max_len = max(max_len, current_len) return max_len"},{"question":"You are someone who likes to prepare your meals in advance and you have a set number of different sized containers for storing food. Each container has a different capacity and you want to use the minimum number of containers to store your food. Write a function that takes in the total amount of food (in liters) and a list representing the capacities of the available containers (also in liters). The function should return the minimum number of containers required to store the food. If it is not possible to store the exact amount of food with the available containers, return `-1`. Examples ``` total_food = 10 containers = [5, 5, 1] => 2 total_food = 12 containers = [5, 3] => -1 total_food = 13 containers = [10, 3, 1, 1, 1] => 2 ``` # Notes 1. You can assume that the `containers` list will always have at least one element. 2. The total amount of food will be a non-negative integer. 3. The capacities in the `containers` list will also be non-negative integers.","solution":"def min_containers(total_food, containers): Returns the minimum number of containers required to store the total amount of food, or -1 if it is not possible to store the exact amount of food with the available containers. Parameters: total_food (int): The total amount of food in liters. containers (list of int): List of available container capacities in liters. Returns: int: Minimum number of containers required or -1 if not possible. containers.sort(reverse=True) # sort containers in decreasing order num_containers = 0 for capacity in containers: if total_food == 0: return num_containers if capacity <= total_food: num_containers += total_food // capacity total_food %= capacity return num_containers if total_food == 0 else -1"},{"question":"Write a function that takes a string and returns `True` if the string contains every vowel at least once (a, e, i, o, u), and `False` otherwise. The function should not be case-sensitive. If the parameter is not a string or is an empty string, return `False`. For Example: `contains_all_vowels(\\"Education\\")` should return `True` `contains_all_vowels(\\"Programming\\")` should return `False`","solution":"def contains_all_vowels(s): Returns True if the input string contains every vowel (a, e, i, o, u) at least once, ignoring case. Returns False if the input is not a string or is an empty string. if not isinstance(s, str) or not s: return False vowels = set(\'aeiou\') return vowels.issubset(set(s.lower()))"},{"question":"Palindrome Substrings A string is said to be a palindrome if it reads the same backward as forward. Given a string `S`, your task is to determine the number of substrings of `S` that are palindromes. Note: - Each palindrome substring must be a contiguous sequence within the original string. - The substrings \'a\', \'aba\', and \'aa\' are examples of such palindromes. -----Input----- The input consists of one line containing the string S. -----Output----- Print one integer in the first line - the number of palindrome substrings in S. -----Constraints----- - 1 ≤ |S| ≤ 1000 - The string S will consist of lowercase English letters only. Example Input ababa Output 9 Explanation: The palindrome substrings are \'a\', \'b\', \'a\', \'b\', \'a\', \'aba\', \'bab\', \'aba\', \'ababa\'. The total number is 9.","solution":"def count_palindrome_substrings(S): Returns the number of palindrome substrings in the given string S. n = len(S) count = 0 # Expand around center approach to identify all palindrome substrings for center in range(2 * n - 1): left = center // 2 right = left + center % 2 while left >= 0 and right < n and S[left] == S[right]: count += 1 left -= 1 right += 1 return count"},{"question":"Write a function that transposes a given NxN matrix. The transpose of a matrix is obtained by swapping the elements across the main diagonal (i.e., the element at row i and column j would move to row j and column i). Your task is to write a function that takes a 2D list (matrix) as input and returns the transposed matrix. Example: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] transpose(matrix) -> [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] ``` Note: - You can assume that the input matrix will always be a square matrix (NxN). - The elements of the matrix will be integers.","solution":"def transpose(matrix): Returns the transpose of a given NxN matrix. Args: matrix (list of list of int): NxN matrix Returns: list of list of int: Transposed NxN matrix n = len(matrix) transposed_matrix = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): transposed_matrix[j][i] = matrix[i][j] return transposed_matrix"},{"question":"# Merge Intervals for Flight Booking You are given n intervals, where each interval represents the time a flight is booked in the airport. Each interval is represented as a pair of integers (start, end) where start and end are the starting and ending time of the flight respectively. Two intervals [a, b] and [c, d] are considered overlapping if `c <= b` and `a <= d`. Your task is to write a function that merges all overlapping intervals and returns the merged intervals in ascending order. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 10^5) indicating the number of intervals. - The following n lines each contain two integers start_i and end_i (0 ≤ start_i ≤ end_i ≤ 10^6) representing the start and end time of a flight booking. -----Output----- - Print the merged intervals in ascending order. Each interval should appear in a new line with the start and end time separated by a space. -----Examples----- Input 3 1 4 2 5 7 9 Output 1 5 7 9 Input 4 1 10 2 6 8 10 15 18 Output 1 10 15 18 Input 2 5 10 1 4 Output 1 4 5 10","solution":"def merge_intervals(intervals): Given a list of intervals, merges all overlapping intervals and returns the merged intervals in ascending order. if not intervals: return [] # Sort intervals by the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"# Anagram Substrings Write a function that takes two strings `s1` and `s2`, and returns all the starting indices of `s2`\'s anagrams in `s1`. The order of output does not matter. An anagram is created by rearranging the letters of a word to produce a new word using all the original letters exactly once. If either of the input strings is empty, the return value must be an empty list. # Example: ``` s1 = \\"cbaebabacd\\", s2 = \\"abc\\" -> [0, 6] s1 = \\"abab\\", s2 = \\"ab\\" -> [0, 1, 2] s1 = \\"af\\", s2 = \\"be\\" -> [] s1 = \\"\\", s2 = \\"anagram\\" -> [] ```","solution":"from collections import Counter def find_anagram_substrings(s1, s2): Returns a list of starting indices of s2\'s anagrams in s1. if not s1 or not s2 or len(s2) > len(s1): return [] result = [] s2_counter = Counter(s2) window_counter = Counter(s1[:len(s2)]) if s2_counter == window_counter: result.append(0) for i in range(len(s2), len(s1)): window_counter[s1[i]] += 1 window_counter[s1[i - len(s2)]] -= 1 if window_counter[s1[i - len(s2)]] == 0: del window_counter[s1[i - len(s2)]] if window_counter == s2_counter: result.append(i - len(s2) + 1) return result"},{"question":"Implement a function to determine the minimum number of coins required to make a given amount of money. You are given an array of distinct positive integer denominations of the coins, and a target amount. Assume that there is an infinite supply of each type of coin. If it is not possible to make the target amount with the given denominations, return -1. ``` minCoins(denominations, amount) minCoins([1, 2, 5], 11) Explanation: 11 can be made with 5+5+1 or 5+2+2+2 or 2+2+2+2+2+1 or 11x1 coins. Minimum 3 coins required (5+5+1) Therefore answer is 3 minCoins([2], 3) Explanation: 3 cannot be made with only denomination 2 coins. Therefore answer is -1 ``` - denominations is an array of integers in range [1,100] - amount is an integer in range [0,1000]","solution":"def minCoins(denominations, amount): Returns the minimum number of coins required to make up the given amount using the given denominations. If it is not possible to make the target amount, returns -1. # Initialize the dp array with inf, because we aim to find the minimum dp = [float(\'inf\')] * (amount + 1) # Base case: 0 amount requires 0 coins dp[0] = 0 # Iterate over each denomination for coin in denominations: for i in range(coin, amount + 1): dp[i] = min(dp[i], dp[i - coin] + 1) # If dp[amount] is still inf, it means it\'s not possible to form that amount return dp[amount] if dp[amount] != float(\'inf\') else -1"},{"question":"There are M marbles of different colors arranged in a line. Each marble has a unique number from 1 to M painted on it, denoting its position in the original arrangement from left to right. A series of operations are given to swap the marbles. Your task is to determine the final position of each marble after performing all the swaps. Each operation is given as a pair of indices (i, j), meaning the marble at position i should be swapped with the marble at position j. # Input: - First line contains an integer T representing the number of test cases. - For each test case: - First line contains two integers M (number of marbles) and K (number of swap operations). - Next K lines each contain two integers i and j, denoting a swap operation. # Output: - For each test case, return a line with M space-separated integers representing the final arrangement of the marbles by their numbers. # Constraints: - 1 leq T leq 100 - 1 leq M leq 10^4 - 0 leq K leq 10^5 - 1 leq i, j leq M - i neq j # Sample Input: ``` 2 5 3 1 2 2 3 4 5 4 2 1 4 2 3 ``` # Sample Output: ``` 2 3 1 5 4 4 3 2 1 ``` # Explanation: - In the first test case, the operations modify the positions as follows: 1. Swap marbles at positions 1 and 2 → `2 1 3 4 5` 2. Swap marbles at positions 2 and 3 → `2 3 1 4 5` 3. Swap marbles at positions 4 and 5 → `2 3 1 5 4` Hence the final arrangement is `2 3 1 5 4`. - In the second test case, the operations modify the positions as follows: 1. Swap marbles at positions 1 and 4 → `4 2 3 1` 2. Swap marbles at positions 2 and 3 → `4 3 2 1` Hence the final arrangement is `4 3 2 1`.","solution":"def marble_swaps(T, test_cases): result = [] for t in range(T): M, K, operations = test_cases[t] marbles = list(range(1, M+1)) for i, j in operations: marbles[i-1], marbles[j-1] = marbles[j-1], marbles[i-1] result.append(\\" \\".join(map(str, marbles))) return result # Example usage: T = 2 test_cases = [ (5, 3, [(1, 2), (2, 3), (4, 5)]), (4, 2, [(1, 4), (2, 3)]) ] print(\\"n\\".join(marble_swaps(T, test_cases)))"},{"question":"You are given a grid of size `n x n` filled with different integers, where `n` is an odd number. The task is to rotate the grid 90 degrees clockwise. Implement the function `rotate_grid(grid: List[List[int]]) -> List[List[int]]` that takes in a 2D list `grid` representing the grid of integers and returns a new 2D list which is the result of rotating the input grid 90 degrees clockwise. # Example: ```python Input: grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints: 1. The function should only handle odd-sized grids (n is odd). 2. All integers within the grid will be in the range [1, 1000]. 3. The size of the grid, `n`, will be in the range [1, 15]. # Notes: - Please do not use any outside libraries for rotation operations and ensure in-place manipulation is avoided. - Be sure to test the function with different grid sizes within the given constraints to ensure it meets the requirements as expected.","solution":"def rotate_grid(grid): n = len(grid) rotated_grid = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated_grid[j][n - 1 - i] = grid[i][j] return rotated_grid"},{"question":"Write a function named `closest_to_zero` that takes an array of integers and returns the number closest to zero. If there are two equally close to zero elements, consider the positive one as closer to zero. For example: ```python closest_to_zero([7, -10, 13, 8, -4, 0, 6]) # returns 0 closest_to_zero([7, -10, 13, 8, -4, -1, 1]) # returns 1 ``` Good luck!","solution":"def closest_to_zero(arr): Returns the number closest to zero in the array. If two numbers are equally close to zero, the positive one is considered closer. if not arr: raise ValueError(\\"Array must not be empty\\") closest = float(\'inf\') for num in arr: if abs(num) < abs(closest) or (abs(num) == abs(closest) and num > closest): closest = num return closest"},{"question":"Write a program that reads a string and determines if it is a palindrome, while ignoring any spaces, punctuation, and case sensitivity. Rules: 1. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and case). 2. Your function should return true if the input string is a palindrome, and false otherwise. 3. The input string will only contain printable ASCII characters. Example: - Input: \\"A man, a plan, a canal, Panama!\\" Output: true - Input: \\"No \'x\' in Nixon\\" Output: true - Input: \\"This is not a palindrome.\\" Output: false Guidelines: 1. Implement a function `is_palindrome(string: str) -> bool` that performs the check. 2. Ensure to handle edge cases, such as empty strings and strings with only non-alphanumeric characters.","solution":"def is_palindrome(string: str) -> bool: Returns True if the given string is a palindrome, ignoring spaces, punctuation, and case. Returns False otherwise. # Filter out non-alphanumeric characters and convert to lowercase filtered_string = \'\'.join(char.lower() for char in string if char.isalnum()) # Check if the filtered string reads the same forward and backward return filtered_string == filtered_string[::-1]"},{"question":"Write a function that takes an array of integers and removes duplicates while preserving the original order of the elements. For example, given the input array: ``` [4, 5, 2, 4, 5, 1, 2, 4] ``` The function should return: ``` [4, 5, 2, 1] ``` **Constraints**: - The input array can contain any integer values, including negative and positive numbers. - The order of the first occurrence of each element should be preserved in the output. **Examples**: - Input: `[1, 2, 2, 3, 4, 3, 3, 4, 5]` - Output: `[1, 2, 3, 4, 5]` - Input: `[5, 4, 3, 2, 1, 1, 2, 3, 4, 5]` - Output: `[5, 4, 3, 2, 1]`","solution":"def remove_duplicates(arr): Removes duplicates from the input list while preserving the original order of elements. Parameters: arr (list): List of integers with possible duplicates. Returns: list: A list with duplicates removed and order preserved. seen = set() result = [] for num in arr: if num not in seen: seen.add(num) result.append(num) return result"},{"question":"You are given an m x n grid filled with non-negative numbers representing a field of cherries, where each cell contains some cherries. You have two robots that are initially positioned at (0, 0) and (0, n-1) respectively, and can only move to the cells below them (down, down-left, down-right). Both robots need to move towards the bottom row [m-1] of the grid and collect as many cherries as possible along the way. However, if both robots end up on the same cell, they can only collect cherries from that cell once. Write an algorithm that returns the maximum number of cherries the two robots can collect. Example 1: Input: grid = [[3,1,1], [2,5,1], [1,5,5], [2,1,1]] Output: 24 Explanation: The path of robot 1 is (0,0) -> (1,1) -> (2,2) -> (3,2) The path of robot 2 is (0,2) -> (1,2) -> (2,1) -> (3,1) The total number of cherries collected is 3 + 5 + 5 + 1 + 1 + 5 + 5 = 24. Example 2: Input: grid = [[1,0,0,0,0,0,1], [2,0,0,0,0,3,0], [2,0,9,0,0,0,0], [0,3,0,5,4,0,0], [1,0,2,3,0,0,6]] Output: 28 Explanation: The path of robot 1 is (0,0) -> (1,0) -> (2,0) -> (3,1) -> (4,1) -> (4,4) The path of robot 2 is (0,6) -> (1,5) -> (2,2) -> (3,3) -> (4,3) -> (4,4) The total number of cherries collected is 1 + 2 + 2 + 3 + 9 + 0 + 5 + 4 + 0 + 3 + 6 = 28. Note: - `grid.length == m` - `grid[0].length == n` - `2 <= m, n <= 70` - `0 <= grid[i][j] <= 100`","solution":"def cherryPickup(grid): m, n = len(grid), len(grid[0]) dp = [[[0] * n for _ in range(n)] for _ in range(m)] dp[0][0][n-1] = grid[0][0] + (grid[0][n-1] if n > 1 else 0) for r in range(1, m): for c1 in range(min(r+1, n)): for c2 in range(max(0, n-1-r), n): max_cherries = 0 for dc1 in [-1, 0, 1]: for dc2 in [-1, 0, 1]: prev_c1, prev_c2 = c1 + dc1, c2 + dc2 if 0 <= prev_c1 < n and 0 <= prev_c2 < n: max_cherries = max(max_cherries, dp[r-1][prev_c1][prev_c2]) dp[r][c1][c2] = max_cherries + grid[r][c1] + (0 if c1 == c2 else grid[r][c2]) return max(dp[m-1][c1][c2] for c1 in range(n) for c2 in range(n))"},{"question":"You need to write a function that determines if a given string is an anagram of another string. An anagram is formed by rearranging the letters of one word to produce the other word, ignoring case and whitespace. ```python is_anagram(\'Listen\', \'Silent\') == True is_anagram(\'Hello\', \'Olelh\') == True is_anagram(\'Dormitory\', \'Dirty room\') == True is_anagram(\'The eyes\', \'They see\') == True is_anagram(\'Hello\', \'World\') == False ``` Happy coding!","solution":"def is_anagram(str1, str2): Determines if str1 is an anagram of str2. Ignores case and whitespace. # Normalize the strings by removing whitespace and converting to lowercase str1_normalized = \'\'.join(str1.split()).lower() str2_normalized = \'\'.join(str2.split()).lower() # Check if sorted versions of the normalized strings are equal return sorted(str1_normalized) == sorted(str2_normalized)"},{"question":"Write a function that simulates the \\"look-and-say\\" sequence, which is a sequence of integers starting as follows: 1, 11, 21, 1211, 111221, ... To generate a member of the sequence from the previous member, read off the digits of the previous member, counting the number of digits in groups of the same digit. For example: 1 is read off as \\"one 1\\" or 11. 11 is read off as \\"two 1s\\" or 21. 21 is read off as \\"one 2, then one 1\\" or 1211. 1211 is read off as \\"one 1, one 2, then two 1s\\" or 111221. Your task is to write a function `look_and_say(n)` that takes an integer `n` as input and returns the `n`-th member of the look-and-say sequence as a string. For example: ``` look_and_say(1) ==> \\"1\\" look_and_say(2) ==> \\"11\\" look_and_say(3) ==> \\"21\\" look_and_say(4) ==> \\"1211\\" look_and_say(5) ==> \\"111221\\" ```","solution":"def look_and_say(n): Returns the nth member of the look-and-say sequence. if n == 1: return \\"1\\" prev = \\"1\\" for _ in range(1, n): next_seq = \\"\\" count = 1 for j in range(1, len(prev)): if prev[j] == prev[j - 1]: count += 1 else: next_seq += str(count) + prev[j - 1] count = 1 next_seq += str(count) + prev[-1] prev = next_seq return prev"},{"question":"A botanical research company is developing a plant growth tracking system, and they need your help to get started. Your task is to: 1) Create a `Plant` class that takes in 3 arguments: `species`, `age`, and `height`. 2) Within the `Plant` class, create a method named `grow` that takes an integer argument `years`. This method should increase the plant\'s `age` by the specified number of years and increase its `height` by 10% of its current height for each year it grows. 3) Create a method named `report` that returns a string containing the species, a classification based on its age, and its height formatted to two decimal places. 4) For the age classifications, if the plant is less than or equal to 2 years old, it is classified as a `young` plant. If it is greater than 2 but less than or equal to 10 years old, it is classified as a `mature` plant. If it is greater than 10 years old, it is classified as an `old` plant. 5) The `report` method should return a string formatted like this: `\\"The sunflower is a mature plant and is 45.67 cm tall.\\"`. Create instances of the `Plant` class for `sunflower`, `oak`, and `cactus` with the following initial values: - Sunflower: species=`\\"sunflower\\"`, age=1, height=30.0 - Oak: species=`\\"oak\\"`, age=5, height=150.0 - Cactus: species=`\\"cactus\\"`, age=11, height=50.0 Demonstrate the functionality of the `grow` and `report` methods using these instances.","solution":"class Plant: A class to represent a plant. Attributes: species (str): The species of the plant. age (int): The age of the plant in years. height (float): The height of the plant in cm. def __init__(self, species, age, height): self.species = species self.age = age self.height = height def grow(self, years): Increase the age of the plant by the specified number of years and its height by 10% of its current height for each year it grows. self.age += years for _ in range(years): self.height += self.height * 0.10 def report(self): Return a string containing the species, classification based on its age, and its height formatted to two decimal places. if self.age <= 2: age_classification = \\"young\\" elif self.age <= 10: age_classification = \\"mature\\" else: age_classification = \\"old\\" return f\\"The {self.species} is a {age_classification} plant and is {self.height:.2f} cm tall.\\" # Creating instances for Sunflower, Oak, and Cactus sunflower = Plant(species=\\"sunflower\\", age=1, height=30.0) oak = Plant(species=\\"oak\\", age=5, height=150.0) cactus = Plant(species=\\"cactus\\", age=11, height=50.0) # Demonstrating functionality sunflower.grow(1) oak.grow(2) cactus.grow(1) sunflower_report = sunflower.report() oak_report = oak.report() cactus_report = cactus.report()"},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to compute and print the number of distinct integers in the list and then to output the squared value of each distinct integer, sorted in ascending order. =====Constraints===== 1 ≤ n ≤ 10^4 -10^4 ≤ integer value ≤ 10^4 =====Input Format===== The first line contains the integer, n. The next line contains n space-separated integers. =====Output Format===== Output 2 lines. On the first line, output the number of distinct integers in the list. On the second line, output the squared values of each distinct integer in ascending order, space-separated. =====Sample Input===== 5 1 -2 3 -2 4 =====Sample Output===== 4 1 4 9 16","solution":"def distinct_squared_sorted(arr): This function takes a list of integers, computes the number of distinct integers, and returns a sorted list of their squared values. :param arr: List[int] - List of integers. :return: (int, List[int]) - Number of distinct integers and list of squared values sorted. distinct_integers = set(arr) squared_values = sorted([x**2 for x in distinct_integers]) return len(distinct_integers), squared_values def format_output(n, squared_values): This function formats the output strings for the number of distinct integers and their squared values. :param n: int - Number of distinct integers. :param squared_values: List[int] - Squared values sorted. :return: (str, str) - Output strings. distinct_count_str = str(n) squared_values_str = \' \'.join(map(str, squared_values)) return distinct_count_str, squared_values_str # Helper function to directly use the main functionality def process_integers(n, arr): This function processes the input list of integers and provides the formatted output for the number of distinct integers and their sorted squares. :param n: int - Number of integers. :param arr: List[int] - List of integers. :return: (str, str) - Distinct count and sorted squared values as strings. distinct_count, squared_values = distinct_squared_sorted(arr) return format_output(distinct_count, squared_values)"},{"question":"# Task **_Given_** a **_list of integers_**, *return the **_maximum sum_** that can be obtained by summing exactly three elements from the list.* ___ # Notes: * Only **_positive integers_** *will be passed to the function (> 0), no negatives or zeros.* * The list will have at least three integers. ___ # Input >> Output Examples ``` maxSumOfThree({1, 2, 3, 4}) ==> return (9) ``` Explanation: **_(9)_** *is the sum of the largest three numbers from the list* **_{1, 2, 3, 4}_** , *which are* **_{2, 3, 4}_**. ``` maxSumOfThree({10, 2, 3, 5, 7}) ==> return (22) ``` Explanation: **_(22)_** *is the sum of the largest three numbers from the list* **_{10, 2, 3, 5, 7}_** , *which are* **_{10, 5, 7}_**. ``` maxSumOfThree({11, 9, 5, 6, 3}) ==> return (26) ``` Explanation: **_(26)_** *is the sum of the largest three numbers from the list* **_{11, 9, 5, 6, 3}_** , *which are* **_{11, 9, 6}_**. ___ [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def max_sum_of_three(nums): Returns the maximum sum obtained by summing exactly three elements from the list. nums.sort(reverse=True) return sum(nums[:3])"},{"question":"You are given an array of integers `nums`. For each number in the array, determine if there exists another number in the array such that the difference between the two numbers is `k`. If such a pair exists, return true; otherwise, return false. Example 1: Input: nums = [1, 5, 11, 9], k = 4 Output: true Explanation: 5 - 1 = 4 Example 2: Input: nums = [2, 7, 3, 1], k = 5 Output: true Explanation: 7 - 2 = 5 or 7 - 2 = 5 Example 3: Input: nums = [1, 2, 3, 4], k = 10 Output: false Explanation: There are no two numbers in the array with a difference of 10. Example 4: Input: nums = [5, 3, 10, 7], k = 2 Output: true Explanation: 5 - 3 = 2 Constraints: - 1 <= nums.length <= 1000 - -10^6 <= nums[i] <= 10^6 - 0 <= k <= 10^6","solution":"def has_pair_with_difference(nums, k): Returns True if there exists two numbers in the array such that their difference is k, otherwise False. nums_set = set(nums) for num in nums: if (num + k) in nums_set or (num - k) in nums_set: return True return False"},{"question":"Sharon has a unique hobby of constructing pyramids out of alphabet characters. She enjoys challenges and would like to see a pyramid built from a single letter repeated in a specific way. To help her with this task, you need to write a function that generates such a pyramid. Task Write a function that, given a single uppercase letter and a positive integer `n`, returns a string representing a pyramid. The pyramid should have `n` rows and the base of the pyramid should be centered. Each row should contain the given letter repeated a certain number of times with leading spaces where needed to keep the pyramid shape. After the final row, the string should not have any extra newline characters. Return `null/nil/None/...` if the input letter is not an uppercase letter or if `n` is non-positive. Examples For the letter \'A\' and n=3, the output should be: ``` A AAA AAAAA ``` ...which would appear as a string of `\\" An AAAnAAAAA\\"` For the letter \'B\' and n=4, the output should be: ``` B BBB BBBBB BBBBBBB ``` ...which would appear as a string of `\\" Bn BBBn BBBBBnBBBBBBB\\"` Note: - Each row should have the letter count equal to (2*row_number - 1). - Leading spaces in the row should ensure that the pyramid is centered.","solution":"def generate_pyramid(letter, n): Generates a pyramid using a single uppercase letter and a positive integer n. The pyramid will have n rows and the base of the pyramid will be centered. Args: letter (str): an uppercase letter. n (int): a positive integer representing the number of rows. Returns: str: The pyramid as a string or None if the input conditions are not met. if not (isinstance(letter, str) and len(letter) == 1 and letter.isupper()): return None if not (isinstance(n, int) and n > 0): return None pyramid_rows = [] for i in range(1, n + 1): row = \' \' * (n - i) + letter * (2 * i - 1) pyramid_rows.append(row) return \'n\'.join(pyramid_rows)"},{"question":"Write a function that generates the first `n` rows of Pascal\'s Triangle, each row being represented as a list of integers: Pascal\'s Triangle is structured as follows: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ... ``` Each number in a row is the sum of the two numbers directly above it in the previous row. The first and last numbers of each row are always 1. Given an integer `n`, return a two-dimensional list containing the first `n` rows of Pascal\'s Triangle. **Function signature:** ```python def generate_pascals_triangle(n: int) -> list: ``` **Examples:** ``` generate_pascals_triangle(1) == [[1]] generate_pascals_triangle(2) == [[1], [1, 1]] generate_pascals_triangle(3) == [[1], [1, 1], [1, 2, 1]] generate_pascals_triangle(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]] ``` Ensure your code is optimized to handle larger inputs efficiently.","solution":"def generate_pascals_triangle(n: int) -> list: Generate the first n rows of Pascal\'s Triangle. Args: n (int): Number of rows of Pascal\'s Triangle to generate. Returns: list: A two-dimensional list representing the first n rows of Pascal\'s Triangle. if n <= 0: return [] triangle = [[1]] for i in range(1, n): row = [1] for j in range(1, i): row.append(triangle[i-1][j-1] + triangle[i-1][j]) row.append(1) triangle.append(row) return triangle"},{"question":"Given an `n x n` grid where each cell contains an integer representing the height of the terrain at that cell, write a function to determine the time it takes for water to start at the cell (0, 0) and completely fill the grid. Water can move to adjacent cells (left, right, up, down) only if the height of the cell being moved to is less than or equal to the current cell\'s height. The task is to determine the minimum time required for the water to flood the entire grid. The water starts from the top-left corner of the grid. Function Signature: ```python def flood_fill_time(height_grid: List[List[int]]) -> int: ``` **Input:** - `height_grid`: a list of lists of integers representing the heights of the terrain cells where `1 <= len(height_grid) <= 1000` and `1 <= height_grid[i][j] <= 10^6`. **Output:** - Return an integer representing the minimum time required for the water to fill the entire grid. **Example:** ```python grid = [ [1, 2, 2], [3, 8, 2], [3, 4, 5] ] print(flood_fill_time(grid)) # Output: 5 ``` **Explanation:** 1. The water starts at grid[0][0] with height 1. 2. The water will move to grid[0][1] and grid[1][0] because their heights are higher but reachable within the same time frame. 3. It will then move to grid[0][2] and grid[1][2], then to grid[2][2]. 4. The minimum height of the highest point needed to reach the last cell is 5. Therefore, the output is 5. **Constraints:** - The grid will always have at least one cell. - The water can always fill every cell in the grid. - Optimize for both time and space complexity due to the large size of the grid.","solution":"from typing import List import heapq def flood_fill_time(height_grid: List[List[int]]) -> int: n = len(height_grid) min_heap = [(height_grid[0][0], 0, 0)] visited = set() visited.add((0, 0)) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] max_height = 0 while min_heap: height, x, y = heapq.heappop(min_heap) max_height = max(max_height, height) if x == n - 1 and y == n - 1: return max_height for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited: visited.add((nx, ny)) heapq.heappush(min_heap, (height_grid[nx][ny], nx, ny)) return -1 # if somehow the grid is not valid, but based on constraints, it should always be valid."},{"question":"Write a function that accepts a list of integers and returns a new list containing only the prime numbers from the original list, in the same order that they appeared. To determine if a number is prime, a prime number (other than 1) has exactly two distinct positive divisors: 1 and itself. Visualization: ``` input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] output: [2, 3, 5, 7] ``` In the example above: - 1 is not a prime number. - 2, 3, 5, and 7 are prime numbers. - 4, 6, 8, 9, and 10 are not prime numbers.","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num < 2: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def filter_primes(numbers): Returns a list containing only the prime numbers from the provided list. return [num for num in numbers if is_prime(num)]"},{"question":"Write a function convertVowels that takes a string and replaces all the vowels in it with their respective positions in the alphabet. Rules for converting vowels: 1. Identify the vowels in the string (a, e, i, o, u). 2. Replace each vowel with its position in the alphabet (a=1, e=5, i=9, o=15, u=21). 3. Keep the case sensitivity of the original string (i.e., if the vowel is uppercase, replace it with the uppercase position). Eg: hello -> h5ll15 Case -> C1s5 Make sure your function maintains the original casing and only replaces the vowels as specified.","solution":"def convertVowels(s): Replaces all vowels in the input string with their respective positions in the alphabet. Maintain the case sensitivity of the original string. vowel_map = { \'a\': \'1\', \'A\': \'1\', \'e\': \'5\', \'E\': \'5\', \'i\': \'9\', \'I\': \'9\', \'o\': \'15\', \'O\': \'15\', \'u\': \'21\', \'U\': \'21\' } result = [] for char in s: if char in vowel_map: result.append(vowel_map[char]) else: result.append(char) return \'\'.join(result)"},{"question":"A city is structured as an MxM grid where each intersection is represented by a distinct cell (i, j). There are barriers and open paths between intersections. Two friends, Alice and Bob, are starting at intersection (0, 0) and attempting to reach the opposite corner at (M-1, M-1). Alice can only move to the right (i, j+1) or downward (i+1, j), while Bob can move only upward (i-1, j) or to the left (i, j-1). Unfortunately, their paths must not intersect due to the barriers. Each cell in the grid can either be: - Open path, denoted by \'O\' - Barrier, denoted by \'X\' Given the city map and the movement constraints, determine if there exists a valid path from (0, 0) to (M-1, M-1) for Alice, and a valid path from (M-1, M-1) to (0, 0) for Bob such that their paths do not cross or overlap at any point. Print \\"YES\\" if such paths exist, otherwise print \\"NO\\". -----Input:----- - First line will contain an integer T, the number of testcases. - Each testcase consists of: - An integer M, the size of the grid. - Next M lines each containing M characters (\'O\' or \'X\') representing the city map grid. -----Output:----- - For each testcase, output \\"YES\\" if both Alice and Bob can reach their respective destinations without crossing paths. Otherwise, output \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 2 leq M leq 1000 -----Sample Input:----- 2 3 OXX OXO XOO 4 OOOX OXOX OOOX XOOO -----Sample Output:----- NO YES -----EXPLANATION:----- In the first testcase, there is no valid path that allows both Alice and Bob to reach their respective destinations without crossing paths. In the second testcase, Alice can take the route (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3). Bob can take the route (3,3) -> (3,2) -> (3,1) -> (3,0) -> (2,0) -> (1,0) -> (0,0). They do not cross paths, thus output is \\"YES\\".","solution":"def valid_paths_exist(T, test_cases): results = [] def is_valid_path(grid, start, end, move_options): M = len(grid) stack = [start] visited = set() while stack: current = stack.pop() if current == end: return True if current in visited: continue visited.add(current) x, y = current for dx, dy in move_options: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < M and grid[nx][ny] == \'O\' and (nx, ny) not in visited: stack.append((nx, ny)) return False for M, grid in test_cases: # Alice moves: right (0, 1), down (1, 0) alice_start, alice_end = (0, 0), (M-1, M-1) alice_moves = [(0, 1), (1, 0)] alice_valid = is_valid_path(grid, alice_start, alice_end, alice_moves) # Bob moves: up (-1, 0), left (0, -1) bob_start, bob_end = (M-1, M-1), (0, 0) bob_moves = [(-1, 0), (0, -1)] bob_valid = is_valid_path(grid, bob_start, bob_end, bob_moves) if alice_valid and bob_valid: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def process_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) idx = 1 test_cases = [] for _ in range(T): M = int(data[idx]) idx += 1 grid = [] for i in range(M): grid.append(data[idx]) idx += 1 test_cases.append((M, grid)) results = valid_paths_exist(T, test_cases) for result in results: print(result)"},{"question":"# Task Lucy is a robotics engineer working on a new AI project. The robots she\'s developing need to be able to identify and process data sequences efficiently. One of the challenges Lucy is facing is to create a function that parses a string of alphanumeric characters and identifies the longest contiguous substring that contains either all letters or all digits. If there are multiple longest substrings of the same length, return the one that appears first in the input string. If the input string is empty, return an empty string. Your task is to help Lucy by implementing this function. # Input/Output - `[input]` string `data` An alphanumeric string (consisting of uppercase/lowercase English letters and digits). - `[output]` a string The longest contiguous substring containing only letters or only digits. # Example For `data = \\"abc12345xyz678\\"`, the output should be `\\"12345\\"`. For `data = \\"ab12c34d5ef\\"`, the output should be `\\"ab\\"`. For `data = \\"\\"`, the output should be `\\"\\"`.","solution":"def longest_contiguous_substring(data): Returns the longest contiguous substring containing only letters or only digits. If there are multiple longest substrings of the same length, return the first one. If the input string is empty, return an empty string. if not data: return \\"\\" longest_substring = \\"\\" current_substring = data[0] for char in data[1:]: if char.isdigit() and current_substring[-1].isdigit(): current_substring += char elif char.isalpha() and current_substring[-1].isalpha(): current_substring += char else: if len(current_substring) > len(longest_substring): longest_substring = current_substring current_substring = char if len(current_substring) > len(longest_substring): longest_substring = current_substring return longest_substring"},{"question":"You are given an integer `n` which represents the number of pairs of brackets. Your goal is to write a function that generates all possible combinations of well-formed brackets that can be formed using `n` pairs. A few things to note: 1. A well-formed bracket combination is one where each opening bracket has a corresponding closing bracket. 2. For example, if `n = 3`, the valid combinations are: - \\"((()))\\" - \\"(()())\\" - \\"(())()\\" - \\"()(())\\" - \\"()()()\\" 3. Your function should return the list of valid combinations in any order.","solution":"def generate_bracket_combinations(n): Generate all combinations of well-formed brackets. :param n: Integer, number of pairs of brackets :return: List of strings, each string represents a valid combination of brackets result = [] def backtrack(s=\'\', left=0, right=0): if len(s) == 2 * n: result.append(s) return if left < n: backtrack(s + \'(\', left + 1, right) if right < left: backtrack(s + \')\', left, right + 1) backtrack() return result"},{"question":"Given a string s, partition it into as few parts as possible so that each part is a palindrome. A palindrome is a string that reads the same forward and backward. Return the minimum number of partitions needed. Example 1: Input: \\"aab\\" Output: 1 Explanation: The palindrome partitioning is [\\"aa\\", \\"b\\"]. Example 2: Input: \\"a\\" Output: 0 Explanation: The palindrome partitioning is [\\"a\\"]. Example 3: Input: \\"abccba\\" Output: 0 Explanation: The palindrome partitioning is [\\"abccba\\"]. Constraints: - 1 <= s.length <= 1000 - s consists of only lowercase English letters.","solution":"def minCut(s): n = len(s) dp = list(range(n)) palindrome = [[False] * n for _ in range(n)] for gap in range(n): for i in range(n - gap): j = i + gap if s[i] == s[j] and (gap <= 1 or palindrome[i+1][j-1]): palindrome[i][j] = True for i in range(n): if palindrome[0][i]: dp[i] = 0 else: for j in range(i): if palindrome[j+1][i]: dp[i] = min(dp[i], dp[j] + 1) return dp[-1]"},{"question":"----- __MAKE THE GRADE__ ----- Lucy is a high school teacher who keeps track of her students\' grades in various subjects. She stores the grades in a dictionary where keys represent subjects and values are lists that contain the grades for that subject. She needs to compute the average grade for each subject, as well as the overall average grade for all subjects combined. Consider the following example: ```python grades = { \'Math\': [90, 85, 92], \'Science\': [88, 79, 85], \'English\': [85, 90, 88], \'History\': [70, 75, 80], \'Art\': [100, 95, 85] } ``` Your task is to write a function `calculate_averages(grades)` that computes and returns two dictionaries: 1. `subject_averages` that contains the average grade for each subject. 2. `overall_average` that contains the overall average grade for all subjects combined. Function signatures: ```python def calculate_averages(grades: dict) -> (dict, float): pass ``` **Examples:** ```python grades = { \'Math\': [90, 85, 92], \'Science\': [88, 79, 85], \'English\': [85, 90, 88], \'History\': [70, 75, 80], \'Art\': [100, 95, 85] } subject_averages, overall_average = calculate_averages(grades) # Expected output: # subject_averages = {\'Math\': 89.0, \'Science\': 84.0, \'English\': 87.67, \'History\': 75.0, \'Art\': 93.33} # overall_average = 85.8 ``` **Constraints:** - Each subject has at least one grade. - The grades are integers between 0 and 100. - The overall average should be rounded to two decimal places.","solution":"def calculate_averages(grades): Calculate the average grade for each subject and the overall average grade for all subjects combined. Parameters: grades (dict): A dictionary where keys are subjects and values are lists of grades. Returns: tuple: A tuple containing: - subject_averages (dict): A dictionary with the average grade for each subject. - overall_average (float): The overall average grade for all subjects combined, rounded to two decimal places. subject_averages = {} total_sum = 0 total_count = 0 for subject, marks in grades.items(): avg = sum(marks) / len(marks) subject_averages[subject] = round(avg, 2) total_sum += sum(marks) total_count += len(marks) overall_average = round(total_sum / total_count, 2) return subject_averages, overall_average"},{"question":"Determine the smallest positive integer that is missing from an array of size N. -----Input:----- - First line will contain a single integer N, representing the size of the array. - Second line will contain N space-separated integers representing the elements of the array. -----Output:----- For each testcase, output a single integer representing the smallest positive integer missing from the array. -----Constraints----- - 1 leq N leq 1000 - Elements of the array can be both positive and negative integers and range between -10^6 and 10^6 inclusive. -----Sample Input:----- 6 1 2 0 -1 3 4 -----Sample Output:----- 5","solution":"def smallest_missing_positive_integer(arr): Finds the smallest missing positive integer from an array. Parameters: arr (list of int): The input array. Returns: int: The smallest missing positive integer. if not arr: return 1 arr = [x for x in arr if x > 0] if not arr: return 1 arr = set(arr) smallest_missing = 1 while smallest_missing in arr: smallest_missing += 1 return smallest_missing"},{"question":"Given a string of words separated by spaces, return the length of the shortest word. Examples: `\\"The cow jumped over the moon.\\"` should return `3` (the shortest word is \\"The\\") `\\"A quick brown fox.\\"` should return `1` (the shortest word is \\"A\\") Details: - The input will always be a non-empty string. - Words are considered to be a continuous sequence of non-space characters. - Punctuation within words counts towards the length of the word.","solution":"def length_of_shortest_word(s): Returns the length of the shortest word in the string s. words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"You are given two strings, `word1` and `word2`. The task is to determine whether `word1` and `word2` are anagrams of each other. Two strings are anagrams if they can be formed by rearranging the letters of each other. Letter casing should be ignored, i.e., \'A\' and \'a\' should be treated as the same character. Also, consider only alphanumeric characters and ignore any other characters including spaces and punctuation. -----Input----- The input consists of a single line with two space-separated strings, `word1` and `word2`. -----Output----- For each pair, print \\"YES\\" if the words are anagrams of each other, otherwise print \\"NO\\". -----Example----- Input: listen silent Output: YES Input: Hello olleh Output: YES Input: anagram Margana Output: YES Input: example ampere Output: NO","solution":"import re from collections import Counter def are_anagrams(word1, word2): Determine if word1 and word2 are anagrams of each other. :param word1: First word input :param word2: Second word input :return: \\"YES\\" if word1 and word2 are anagrams, \\"NO\\" otherwise # Remove all non-alphanumeric characters and convert to lower case word1_cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', word1).lower() word2_cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', word2).lower() # Use Counter to count occurrences of each character return \\"YES\\" if Counter(word1_cleaned) == Counter(word2_cleaned) else \\"NO\\""},{"question":"Write a function that simulates the growth of a bacterial colony. The colony doubles in size every hour. Given the initial size of the colony (init_size), the maximum size the colony can reach before it stops growing (max_size), and the number of hours (hours) during which you want to observe the growth, return the size of the colony after the specified number of hours. The function should take three parameters: init_size (an integer), max_size (an integer), and hours (an integer). All numbers are strictly positive. The function should return an integer representing the size of the colony after the given number of hours. If the colony size after any hour exceeds max_size, it should be capped at max_size. **Example:** ```python colony_growth(2, 100, 5) -> 32 colony_growth(5, 100, 4) -> 80 colony_growth(10, 100, 10) -> 100 # Capped at max_size after 7 hours ```","solution":"def colony_growth(init_size, max_size, hours): Simulates the growth of a bacterial colony. Parameters: - init_size: int, initial size of the colony. - max_size: int, maximum size the colony can reach before it stops growing. - hours: int, number of hours to observe the growth. Returns: - int, size of the colony after the given number of hours. size = init_size for _ in range(hours): size *= 2 if size > max_size: size = max_size break return size"},{"question":"Write a function `array_partition` that, given an integer array `nums` of 2n integers, your task is to group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum. Examples: Input: nums = [1,4,3,2] Output: 4 Explanation: The optimal pairing is (1, 2) and (3, 4). The sum of min(1, 2) and min(3, 4) is 1 + 3 = 4. Input: nums = [6,2,6,5,1,2] Output: 9 Explanation: The optimal pairing is (1, 2), (2, 5), and (6, 6). The sum of min(1, 2), min(2, 5), and min(6, 6) is 1 + 2 + 6 = 9. Note: - nums will contain 2n elements where 1 <= n <= 10^4. - Each element of nums will be an integer in the range [-10^4, 10^4]. Complete the `array_partition(nums)` function to return the maximized sum of min(ai, bi) for all pairs.","solution":"def array_partition(nums): Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum. nums.sort() return sum(nums[::2])"},{"question":"Given a string s, find the length of the longest substring without repeating characters. Write a function that takes a string s and returns an integer representing the length of the longest substring with all unique characters. For example: ```python longest_unique_substring(\\"abcabcbb\\") -> 3 # \\"abc\\" longest_unique_substring(\\"bbbbb\\") -> 1 # \\"b\\" longest_unique_substring(\\"pwwkew\\") -> 3 # \\"wke\\" longest_unique_substring(\\"\\") -> 0 # \\"\\" ``` > Note: The solution should have a linear time complexity, O(n). *Inspired by leetcode.com*","solution":"def longest_unique_substring(s): Returns the length of the longest substring with all unique characters. char_index_map = {} longest = 0 start = 0 for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"You are given a list of **n** integers. Your task is to check if there exists a pair of integers `(a, b)` from the list such that their sum is equal to a given target value **k**. If such a pair exists, return the first pair found as a tuple `(a, b)`. If no such pair exists, return `None`. # Input - A list of integers, `nums` of length **n** (0 <= **n** <= 10^5) - An integer, `k` # Output - A tuple `(a, b)` if such a pair exists where **a** and **b** are from `nums` and **a + b = k** - `None` if there is no such pair # Example ```python Input: nums = [10, 15, 3, 7], k = 17 Output: (10, 7) Input: nums = [1, 2, 3, 4], k = 8 Output: None ``` # Note - If there are multiple valid pairs, return the first pair found. - The order of elements in the list should be preserved while searching for the pair.","solution":"def find_pair_with_sum(nums, k): Returns the first pair (a, b) found in the list such that a + b = k. If no such pair exists, returns None. seen = set() for num in nums: complement = k - num if complement in seen: return (complement, num) seen.add(num) return None"},{"question":"You are given an array of N integers. You are allowed to perform the following operation any number of times: Choose any two distinct elements and replace one of them with their sum and the other with their absolute difference. Your task is to determine the minimum number of unique elements that the array can contain after a series of such operations. -----Input:----- - First line will contain T, the number of test cases. - For each test case, the first line contains an integer N, the number of elements in the array. - The next line contains N integers, the elements of the array. -----Output:----- For each test case, output in a single line the minimum number of unique elements the array can contain. -----Constraints----- - 1 ≤ T ≤ 1000 - 2 ≤ N ≤ 1000 - 1 ≤ Each array element ≤ 10^9 -----Sample Input:----- 2 4 1 2 3 4 3 10 20 30 -----Sample Output:----- 1 1 -----EXPLANATION:----- In the first test case, by performing the operations, we can eventually make all elements equal to zero. For example: 1. Choose 1 and 2: Replace them with (1+2)=3 and |1-2|=1 -> [3, 3, 4, 1] 2. Choose 3 and 3: Replace them with (3+3)=6 and |3-3|=0 -> [6, 4, 1, 0] 3. Continue similar operations until all elements become zero. In the second test case, similar operations can be performed to make all elements zero. Therefore, in both cases, the minimum number of unique elements is 1.","solution":"def min_unique_elements(arr): This function determines the minimum number of unique elements that the array can contain after performing the specified operations any number of times. Input: arr : List[int] : the array of integers Output: int : the minimum number of unique elements the array can contain if not arr or len(arr) == 1: return len(arr) # Eventually we can make all elements zero through the given operations return 1 def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(min_unique_elements(arr)) return results def parse_input(input_lines): it = iter(input_lines) T = int(next(it)) test_cases = [] for _ in range(T): N = int(next(it)) array = list(map(int, next(it).split())) test_cases.append(array) return test_cases"},{"question":"Write a function that computes and returns the product of the digits of a positive integer. The function should handle integers up to 10 digits long. Example For example, if the input is `234`: * The digits are `2`, `3`, and `4`. * The product of these digits is `2 * 3 * 4 = 24`. Thus, the output should be `24`. Constraints 1. The number will be a positive integer between `1` and `9,999,999,999` (inclusive).","solution":"def product_of_digits(n): Returns the product of the digits of a positive integer n. Parameters: n (int): A positive integer up to 10 digits long. Returns: int: The product of the digits of n. product = 1 while n > 0: digit = n % 10 product *= digit n //= 10 return product"},{"question":"=====Problem Statement===== Your task is to extract all email addresses from a given string using regular expressions and print each email address on a new line. An email address starts with an alphanumeric character (a-z, A-Z, 0-9) and can contain dots (.), hyphens (-), or underscores (_) before the \'@\' symbol. The domain name after \'@\' can contain alphanumeric characters and hyphens. The top-level domain should be at least 2 characters long and can contain alphabetical characters. =====Input Format===== A single string containing multiple email addresses separated by spaces and/or special characters. =====Constraints===== 0 < Length of the input string < 1000 =====Output Format===== Print each extracted email address on a new line. =====Sample Input===== Hello from alice@example.com, you can also reach bob.smith@web-co.edu or at charlie12@service.co.uk for more information. =====Sample Output===== alice@example.com bob.smith@web-co.edu charlie12@service.co.uk =====Note===== Use Python\'s regular expressions module (re) to identify and extract email addresses.","solution":"import re def extract_emails(text): Extracts and returns all email addresses from the given text. # Regular expression pattern to match email addresses pattern = r\'b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.[A-Z|a-z]{2,}b\' # Find all matches in the text emails = re.findall(pattern, text) return emails def print_emails(emails): Prints each email address on a new line. for email in emails: print(email) # Example usage text = \\"Hello from alice@example.com, you can also reach bob.smith@web-co.edu or at charlie12@service.co.uk for more information.\\" emails = extract_emails(text) print_emails(emails)"},{"question":"A museum security robot is programmed to patrol a rectangular hall and count the number of tiles it passes. The hall is represented by a grid of size M times N (M rows and N columns). The robot always starts patrolling from the top-left corner of the hall (i.e., position (1,1)), and it only moves rightward or downward until it reaches the bottom-right corner of the hall (i.e., position (M,N)). The robot wants to know how many possible unique paths it can take to reach its destination. Help the robot by writing a program to determine the number of such possible paths. -----Input:----- - The first line will contain a single integer T, the number of test cases. - The next T lines will contain two integers M and N, denoting the dimensions of the hall. -----Output:----- For each test case, print a single integer denoting the number of unique paths from the top-left corner to the bottom-right corner of the hall. -----Constraints----- - 1 leq T leq 100 - 1 leq M, N leq 100 -----Sample Input:----- 3 2 2 3 3 3 7 -----Sample Output:----- 2 6 28","solution":"def unique_paths(M, N): Calculate the number of unique paths from the top-left corner to the bottom-right corner of a MxN grid. This is done using dynamic programming. # Create a 2D array to store the number of paths to each cell dp = [[1] * N for _ in range(M)] # Iterate over the grid starting from cell (1,1) for i in range(1, M): for j in range(1, N): dp[i][j] = dp[i-1][j] + dp[i][j-1] # Return the number of paths to the bottom-right corner return dp[M-1][N-1] def solve_unique_paths(test_cases): results = [] for M, N in test_cases: results.append(unique_paths(M, N)) return results"},{"question":"# Task In this exercise, we will implement a function that checks if a given matrix is a Toeplitz matrix. A matrix is called a Toeplitz matrix if every diagonal from top-left to bottom-right has the same elements. For example, consider the following matrix: ``` 1 2 3 4 1 2 5 4 1 ``` This is a Toeplitz matrix because each descending diagonal from left to right is constant, as indicated by the diagonals [1], [2, 2], [3, 3], [4, 4], [1, 1]. # Input - A 2D list of integers representing the matrix. # Output - A boolean indicating whether the given matrix is a Toeplitz matrix. # Example ```python Input: [[1, 2, 3], [4, 1, 2], [5, 4, 1]] Output: True Input: [[1, 2], [2, 1]] Output: True Input: [[1, 2], [2, 3]] Output: False ``` # Constraints - The number of rows and columns in the matrix are greater than 0 and less than 100. - The values in the matrix are integers. # Implementation Create a function `is_toeplitz_matrix(matrix: List[List[int]]) -> bool` that returns a boolean indicating whether the provided matrix is a Toeplitz matrix.","solution":"def is_toeplitz_matrix(matrix): Check if a given matrix is a Toeplitz matrix. A Toeplitz matrix is one where each descending diagonal from left to right is constant. Args: matrix (list of list of int): The matrix to be checked. Returns: bool: True if the matrix is a Toeplitz matrix, otherwise False. if not matrix: return True rows = len(matrix) cols = len(matrix[0]) for row in range(1, rows): for col in range(1, cols): if matrix[row][col] != matrix[row - 1][col - 1]: return False return True"},{"question":"Alice works at a perfume factory that produces different scents. There are N batches of perfume, and each batch contains Ai litres of perfume. Alice has L litres of space available in her storage tank, and she wants to maximize the number of different batches she can store without exceeding the capacity of her storage tank. Additionally, if Alice chooses to store a batch, she must store the entire batch (no partial filling is allowed). Alice wants to know the maximum number of different batches she can store in L litres of space. Can you help Alice determine this? -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and L denoting the number of batches and the storage capacity in litres. - The second line contains N space-separated integers A1, A2, ..., AN, where Ai denotes the litres of perfume in the i-th batch. -----Output----- For each test case, print a single line containing one integer — the maximum number of different batches that can be stored without exceeding the storage capacity L. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ Ai ≤ 100 for each valid i - 1 ≤ L ≤ 1000 -----Example----- Input: 3 3 10 1 2 3 4 5 5 4 3 2 5 7 5 2 4 1 3 Output: 4 2 3 -----Explanation----- Example case 1: Alice can store the 3 batches with 1, 2, and 3 litres of perfume and still have room left (1+2+3 = 6 litres). Hence, she can store up to 4 different batches without exceeding the storage capacity. Example case 2: Alice can store 2 batches with 2 and 3 litres of perfume within a 5-litre capacity (2+3 = 5 litres). Example case 3: Alice can store the batches with 1, 2, and 3 litres of perfume without exceeding the storage capacity (1+2+3 = 6 litres). She can store up to 3 different batches.","solution":"def max_batches(N, L, A): A.sort() current_sum = 0 count = 0 for i in range(N): if current_sum + A[i] <= L: current_sum += A[i] count += 1 else: break return count def solve(test_cases): results = [] for case in test_cases: N, L = case[\'N\'], case[\'L\'] A = case[\'A\'] result = max_batches(N, L, A) results.append(result) return results"},{"question":"Create a function that accepts a string containing words separated by spaces and returns the longest word. If there are multiple words with the same length, return the one that appears first. For example: ``` \\"Python programming is fun\\" ==> \\"programming\\" \\"I love coding\\" ==> \\"coding\\" \\"The quick brown fox\\" ==> \\"quick\\" ``` If the input string is empty, return an empty string: ``` \\"\\" ==> \\"\\" ```","solution":"def longest_word(sentence): Returns the longest word in a given sentence. If there are multiple words with the same length, returns the one that appears first. If the sentence is empty, returns an empty string. if not sentence: return \\"\\" words = sentence.split() longest = words[0] for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"Implement a function that takes as input a list of URLs and returns a list of domains sorted by the number of times they appear in the list. If two domains have the same count, they should be sorted lexicographically by the domain name. A URL is defined as a string that starts with \\"http://\\" or \\"https://\\", followed by the domain name, and optionally followed by the path. For example, in the URL \\"http://example.com/path/to/resource\\", the domain name is \\"example.com\\". Your function should have one parameter, which will always be a non-empty list of URLs. Example: ```python urls = [ \\"http://example.com/path\\", \\"https://example.org/resource\\", \\"http://example.com/another/path\\", \\"http://example.net\\", \\"https://example.org/another/resource\\" ] Expected output: [\'example.com\', \'example.org\', \'example.net\'] ```","solution":"from collections import Counter from urllib.parse import urlparse def sorted_domains_by_count(urls): Returns a list of domains sorted by the number of times they appear in the input list. If two domains have the same count, they are sorted lexicographically. domains = [urlparse(url).netloc for url in urls] domain_counter = Counter(domains) sorted_domains = sorted(domain_counter.items(), key=lambda x: (-x[1], x[0])) return [domain for domain, count in sorted_domains]"},{"question":"Given a string source and another string target, write a function that returns the minimum window substring of source such that every character in target (including duplicates) is included in the window. If there is no such substring, return an empty string. Note: You may assume that both strings contain only lowercase letters. Examples: ``` minWindow(\\"ADOBECODEBANC\\", \\"ABC\\") -> \\"BANC\\" minWindow(\\"a\\", \\"a\\") -> \\"a\\" minWindow(\\"a\\", \\"aa\\") -> \\"\\" ```","solution":"def minWindow(source, target): from collections import Counter if not source or not target: return \\"\\" target_count = Counter(target) source_count = Counter() start, end = 0, 0 min_len = float(\'inf\') min_start = 0 required = len(target_count) formed = 0 while end < len(source): char = source[end] source_count[char] += 1 if char in target_count and source_count[char] == target_count[char]: formed += 1 while start <= end and formed == required: char = source[start] if end - start + 1 < min_len: min_len = end - start + 1 min_start = start source_count[char] -= 1 if char in target_count and source_count[char] < target_count[char]: formed -= 1 start += 1 end += 1 return \\"\\" if min_len == float(\'inf\') else source[min_start:min_start + min_len]"},{"question":"In a large software development company, employees are assigned tasks with deadlines. Each task has a specific deadline and varying complexities. A task takes exactly one day to complete, and an employee can work on only one task per day. Given a set of tasks with their deadlines and complexities, the goal is to maximize the number of tasks completed within their deadlines. You are required to implement a function that, given a list of tasks with their deadlines and complexities, returns the maximum number of tasks that can be completed on time. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N, denoting the number of tasks. - The following N lines contain two space-separated integers D_i and C_i, where D_i is the deadline and C_i is the complexity of the i-th task. -----Output----- For each test case, print a single line containing one integer — the maximum number of tasks that can be completed on time. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - 1 le D_i, C_i le 10^9 for each valid i - the sum of N for all test cases does not exceed 10^6 -----Example Input----- 2 3 2 1 1 2 2 3 4 1 3 3 2 2 4 3 1 -----Example Output----- 2 3","solution":"def max_tasks_on_time(T, test_cases): results = [] for i in range(T): n, tasks = test_cases[i] # Sort tasks by deadline, and by complexity in case of tie tasks_sorted = sorted(tasks, key=lambda x: (x[0], x[1])) completed_tasks = 0 days = [False] * (n + 1) for d, c in tasks_sorted: for j in range(min(n, d), 0, -1): if not days[j]: days[j] = True completed_tasks += 1 break results.append(completed_tasks) return results"},{"question":"You are given a list of words representing anagrams. Group these words into sets of anagrams. Each set should contain words that are anagrams of each other, and no word should be in more than one set. Return the list of sets, where each set is represented as a list of words. **Input:** A list of strings `words`. **Output:** A list of lists of strings, where each list contains words that are anagrams of each other. **Example:** Input: ``` words = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] ``` Output: ``` [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] ``` **Constraints:** - All input strings are of lowercase English letters. - The length of `words` list is between 1 and 1000. - The length of each word is between 1 and 100. Write a function `groupAnagrams(words: List[str]) -> List[List[str]]` to solve the problem.","solution":"from collections import defaultdict from typing import List def groupAnagrams(words: List[str]) -> List[List[str]]: Groups words that are anagrams of each other into lists. :param words: List of words to be grouped into anagrams :return: A list of lists, where each list contains words that are anagrams of each other anagram_dict = defaultdict(list) for word in words: # Sort the word to form the key sorted_word = \'\'.join(sorted(word)) anagram_dict[sorted_word].append(word) return list(anagram_dict.values())"},{"question":"Emma wants to paint her new house and has decided to buy paint cans of different colors. Each paint can has a given volume and a fixed price. She wants to buy exactly `k` different colors to paint her house, and her budget is constrained. She wants to know in advance whether she can buy exactly `k` different colors without exceeding her budget. -----Input----- The first line of input contains an integer `t` which denotes the number of test cases. Each test case starts with an integer `n` denoting the total number of different colors available in the store, an integer `k` denoting the exact number of different colors Emma wants to buy, and an integer `b` representing her budget. The next `n` lines each contain two integers: `v` denoting the volume of paint in the paint can and `p` denoting the price of the paint can. -----Output----- For each test case, print \\"YES\\" if Emma can buy exactly `k` different colors without exceeding her budget, otherwise print \\"NO\\". -----Constraints----- - 1 ≤ `t` ≤ 10^4 - 1 ≤ `n` ≤ 10^3 - 1 ≤ `k` ≤ `n` - 1 ≤ `b` ≤ 10^9 - 1 ≤ `v`, `p` ≤ 10^9 -----Example----- Input: 2 4 3 15 2 5 3 4 1 6 4 7 3 2 10 2 5 3 6 1 15 Output: YES NO","solution":"def can_buy_k_colors(test_cases): Determines if exactly `k` different colors can be bought without exceeding the budget for each test case. results = [] for case in test_cases: n, k, b, colors = case # Sort the colors by price in ascending order colors.sort(key=lambda x: x[1]) # Sum up the prices of the k cheapest paints if sum(color[1] for color in colors[:k]) <= b: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_lines): Parses the input lines into a list of test cases. lines = iter(input_lines) t = int(next(lines)) test_cases = [] for _ in range(t): n, k, b = map(int, next(lines).split()) colors = [tuple(map(int, next(lines).split())) for _ in range(n)] test_cases.append((n, k, b, colors)) return test_cases def main(input_lines): test_cases = parse_input(input_lines) return can_buy_k_colors(test_cases)"},{"question":"In a 2-dimensional grid, consider some cells as \\"islands\\" if they are filled (indicated by \'1\') and some as \\"water\\" (indicated by \'0\'). An island is surrounded by water and is formed by connecting horizontal or vertical adjacent land cells. Your task is to calculate the number of distinct islands in the grid. A land cell is part of an island if it has exactly one cell next to it (either left, right, above, or below) that is also part of the same island. Assume all four edges of the grid are surrounded by water. Write a function `num_islands(grid)` that takes in a `List[List[str]]` representation of the grid and returns an integer count of the number of distinct islands. Example: ```python grid = [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] num_islands(grid) ==> 3 ``` Explanation: There are 3 distinct islands in the provided grid: - Island 1: cells (0,0), (0,1), (1,0), and (1,1) - Island 2: cell (2,2) - Island 3: cells (3,3) and (3,4) Notes: * The dimensions of the grid (`n` x `m`) could vary, but will be at most 50x50. * Assume that the grid at least contains one cell. * You cannot wrap around the edges, so no island can connect beyond the grid\'s boundaries.","solution":"def num_islands(grid): if not grid: return 0 n, m = len(grid), len(grid[0]) num_islands = 0 def dfs(i, j): if i < 0 or i >= n or j < 0 or j >= m or grid[i][j] == \'0\': return grid[i][j] = \'0\' # mark as visited # explore neighbors dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) for i in range(n): for j in range(m): if grid[i][j] == \'1\': num_islands += 1 dfs(i, j) return num_islands"},{"question":"Given a list of strings words and a target string s, determine whether any permutation of the target s can be found as a substring in any of the strings in the words list. Example 1: Input: words = [\\"coding\\", \\"assessment\\", \\"example\\"], s = \\"codi\\" Output: True Explanation: The permutation \\"codi\\" is a substring of \\"coding\\". Example 2: Input: words = [\\"interview\\", \\"preparation\\", \\"questions\\"], s = \\"viewint\\" Output: False Explanation: No permutation of \\"viewint\\" is a substring of any strings in the list. Example 3: Input: words = [\\"abc\\", \\"def\\", \\"ghi\\"], s = \\"cbad\\" Output: False Explanation: No permutation of \\"cbad\\" is a substring of \\"abc\\", \\"def\\", or \\"ghi\\". Example 4: Input: words = [\\"bat\\", \\"tab\\", \\"batman\\"], s = \\"tab\\" Output: True Explanation: The permutation \\"tab\\" is a substring of \\"tab\\" and \\"batman\\". Constraints: 1 <= len(words) <= 10^5 1 <= len(words[i]) <= 100 1 <= len(s) <= 20 s only contains lowercase English letters. words only contain lowercase English letters.","solution":"from collections import Counter def check_permutation_in_substrings(words, s): s_counter = Counter(s) s_length = len(s) for word in words: for i in range(len(word) - s_length + 1): if Counter(word[i:i + s_length]) == s_counter: return True return False"},{"question":"You are given an array of integers and a target value. Find all unique quadruplets in the array which gives the sum of the target. The solution set must not contain duplicate quadruplets. Example 1: Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] Example 2: Input: nums = [2, 2, 2, 2, 2], target = 8 Output: [[2, 2, 2, 2]] Note: - The elements in each quadruplet must be sorted in non-descending order. - The solution set must not contain duplicate quadruplets. Constraints: - 1 <= nums.length <= 200 - -10^9 <= nums[i] <= 10^9 - -10^9 <= target <= 10^9","solution":"def four_sum(nums, target): nums.sort() quadruplets = [] n = len(nums) for i in range(n - 3): if i > 0 and nums[i] == nums[i - 1]: continue for j in range(i + 1, n - 2): if j > i + 1 and nums[j] == nums[j - 1]: continue left, right = j + 1, n - 1 while left < right: total = nums[i] + nums[j] + nums[left] + nums[right] if total == target: quadruplets.append([nums[i], nums[j], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif total < target: left += 1 else: right -= 1 return quadruplets"},{"question":"Given a sorting machine that can only handle sorting arrays of integers where the size of the array is a power of 2, write a function that: 1. Takes an unsorted array with a length that is a power of 2. 2. Efficiently sorts the array in ascending order by implementing an iterative merge sort. Iterative merge sort (or bottom-up merge sort) is a variation of merge sort that sorts the array without using recursion. **Function Signature:** ```python def iterative_merge_sort(arr: List[int]) -> List[int]: ``` # Constraints: - The input array `arr` is guaranteed to have a length that is a power of 2 (e.g., 2, 4, 8, etc.). - The elements of the array are integers and can be both positive and negative numbers, including zero. - You cannot use any built-in sorting functions. **Example:** ```python input_array = [4, 3, 2, 1] print(iterative_merge_sort(input_array)) # Output: [1, 2, 3, 4] input_array = [10, -1, 2, 3, 0, 5, 6, -2] print(iterative_merge_sort(input_array)) # Output: [-2, -1, 0, 2, 3, 5, 6, 10] ``` # Instructions: 1. Create a helper function to merge two sorted arrays. 2. Implement the iterative merge sort within the `iterative_merge_sort` function using the helper function. 3. The function should return the sorted array as the output. # Additional Note: The goal of this exercise is to understand the iterative approach to the merge sort algorithm, and how it operates without the use of recursion.","solution":"from typing import List def merge(arr, left, mid, right): n1 = mid - left + 1 n2 = right - mid # Create temporary arrays L = arr[left:left + n1] R = arr[mid + 1:mid + 1 + n2] i, j, k = 0, 0, left while i < n1 and j < n2: if L[i] <= R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < n1: arr[k] = L[i] i += 1 k += 1 while j < n2: arr[k] = R[j] j += 1 k += 1 def iterative_merge_sort(arr: List[int]) -> List[int]: n = len(arr) curr_size = 1 while curr_size < n: left_start = 0 while left_start < n-1: mid = min((left_start + curr_size - 1), (n-1)) right_end = min((left_start + 2 * curr_size - 1), (n-1)) merge(arr, left_start, mid, right_end) left_start += 2 * curr_size curr_size *= 2 return arr"},{"question":"Write a function named `merge_sorted_arrays` which takes two sorted arrays of integers, `arr1` and `arr2`, and returns a new array that contains all the elements of `arr1` and `arr2` merged and sorted in non-decreasing order. **Example**: ```python merge_sorted_arrays([1, 3, 5], [2, 4, 6]) # returns [1, 2, 3, 4, 5, 6] merge_sorted_arrays([0, 2, 4], [1, 5, 7]) # returns [0, 1, 2, 4, 5, 7] merge_sorted_arrays([], [1, 3, 5]) # returns [1, 3, 5] merge_sorted_arrays([2, 2, 2], []) # returns [2, 2, 2] ```","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list of int): First sorted array. arr2 (list of int): Second sorted array. Returns: list of int: Merged and sorted array. merged = [] i = j = 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # Append remaining elements of arr1, if any while i < len(arr1): merged.append(arr1[i]) i += 1 # Append remaining elements of arr2, if any while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"Given two strings A and B, find the minimum number of operations required to convert string A into string B. The allowable operations are: 1. Insert a character at any position in A. 2. Delete any character from A. 3. Replace any character of A with another character. Each operation counts as 1 step. You are required to calculate the minimum number of steps to perform the conversion for each test case provided. -----Input----- The first line contains a single integer T (1 leq T leq 100) — the number of test cases. Each of the next T lines contains two strings A_i and B_i (1 leq |A_i|, |B_i| leq 1000, A_i and B_i consist of lowercase English letters only). -----Output----- Print T lines — the i-th line should contain the minimum number of operations required to convert A_i into B_i. -----Example----- Input 3 horse ros intention execution abc ab Output 3 5 1","solution":"def min_operations(A, B): Returns the minimum number of operations required to convert string A into string B. m, n = len(A), len(B) # Create a DP table to store results of subproblems dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore last character and recur for remaining string elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If the last character is different, consider all possibilities and find minimum else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n] def process_test_cases(test_cases): Processes a list of test cases, each containing two strings. Returns a list with the minimum number of operations required to convert each string pair. results = [] for A, B in test_cases: result = min_operations(A, B) results.append(result) return results"},{"question":"You are given a grid with n rows and m columns. Each cell in this grid can either be empty or contain an obstacle denoted by \'#\'. The remaining cells are represented by a \'.\' and are free for movement. A person starting from the top-left cell (0, 0) wants to reach the bottom-right cell (n-1, m-1). The person is allowed to move in one of the four possible directions: - up, i.e., to the cell (i-1, j); - down, i.e., to the cell (i+1, j); - left, i.e., to the cell (i, j-1); - right, i.e., to the cell (i, j+1). Determine the minimum number of moves required for the person to reach the bottom-right cell from the top-left cell. If it is not possible to reach the bottom-right cell, return -1. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers n and m — the number of rows and columns in the grid. - Each of the next n lines describes a row of the grid, containing m characters (\'.\' for free cell, \'#\' for obstacle). -----Output----- For each test case, print a single integer representing the minimal number of moves required to reach the bottom-right cell. If it is not possible, print -1. -----Constraints----- - 1 le T le 100 - 1 le n, m le 100 -----Example Input----- 2 3 3 ... .#. ... 3 3 . ..# .#. -----Example Output----- 4 -1 -----Explanation----- In the first example: - The grid is: .: . . : . # . . . - Starting from cell (0, 0), a possible path to the bottom-right cell (2, 2) is down, down, right, right, requiring 4 moves. In the second example: - The grid is: . ..# .#. - There is no valid path from the top-left to the bottom-right cell as it is surrounded by obstacles.","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1 def process_input(test_cases): results = [] for tc in test_cases: n, m = tc[0] grid = tc[1] result = min_moves_to_reach_end(n, m, grid) results.append(result) return results"},{"question":"Given two strings s1 and s2, write a method (function) to determine if s2 is a rotated version of s1. For example, the string \\"waterbottle\\" is a rotated version of \\"erbottlewat\\". Your function should return true if s2 is a rotated version of s1 and false otherwise. Note that you are not allowed to use any built-in methods to directly solve this problem. Example: ```python is_rotated(\\"waterbottle\\", \\"erbottlewat\\") # should return True is_rotated(\\"hello\\", \\"lohel\\") # should return True is_rotated(\\"hello\\", \\"ohell\\") # should return True is_rotated(\\"hello\\", \\"world\\") # should return False ```","solution":"def is_rotated(s1, s2): Determine if s2 is a rotated version of s1. if len(s1) != len(s2): return False combined = s1 + s1 return s2 in combined"},{"question":"Write a function that takes a list of integers and a target integer. The function should return a boolean value indicating whether any two distinct integers in the list sum up to the target integer. If the input list is empty or has only one integer, the function should return `False`. Example ``` [1, 2, 3, 4, 5], 9 --> True (4 + 5 = 9) [1, 2], 4 --> False [], 1 --> False ```","solution":"def two_sum(nums, target): Returns True if any two distinct integers in the list sum up to the target, otherwise False. Parameters: nums (list): A list of integers. target (int): The target integer. Returns: bool: True if any two distinct integers sum up to the target, otherwise False. if len(nums) < 2: return False seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"# Fetch the Packages You have been given a list of available packages and a list of required packages for a software application. Each package can have dependencies, which means if you need to install a package, you also need to install its dependent packages. For example, consider the following package listing: ```python available_packages = { \'A\': [], \'B\': [\'D\'], \'C\': [\'E\'], \'D\': [\'F\'], \'E\': [], \'F\': [] } ``` In this example, package \'A\' has no dependencies, package \'B\' depends on package \'D\', and so on. Your task is to write a function `fetch_packages(required_packages, available_packages)` that takes in a list of required packages and the dictionary of available packages as shown. The function should return a list of all the packages that need to be fetched, including dependencies, ensuring that each package is listed only once and in an order that respects the dependencies (a package should appear before any package that depends on it). # Function Signature ```python def fetch_packages(required_packages: List[str], available_packages: Dict[str, List[str]]) -> List[str]: ``` # Input - `required_packages` is a list of strings representing the required packages (e.g., `[\'A\', \'B\']`). - `available_packages` is a dictionary where keys are package names and values are lists of strings representing the dependencies for that package. # Output - Return a list of strings representing the packages to be fetched, in the order of installation. # Example ```python required_packages = [\'A\', \'B\'] available_packages = { \'A\': [], \'B\': [\'D\'], \'C\': [\'E\'], \'D\': [\'F\'], \'E\': [], \'F\': [] } ``` The function should return the list: ```python [\'A\', \'F\', \'D\', \'B\'] ``` # Constraints - You can assume there are no circular dependencies in the given `available_packages`. - Every package in the `required_packages` list will exist in the `available_packages` dictionary.","solution":"def fetch_packages(required_packages, available_packages): Returns a list of all the packages that need to be fetched, including dependencies, in an order that respects the dependencies. def dfs(package, visited, result): if package not in visited: visited.add(package) for dependency in available_packages[package]: dfs(dependency, visited, result) result.append(package) visited = set() result = [] for package in required_packages: dfs(package, visited, result) return result"},{"question":"Create a function `generate_password` that generates a random password with the following constraints: 1. The password should be exactly 12 characters long. 2. It must contain at least: - 1 uppercase letter (A-Z) - 1 lowercase letter (a-z) - 1 digit (0-9) - 1 special character from the set: `!@#%^&*()` 3. The rest of the characters can be any combination of the above categories. Here\'s the function signature in Python: ```python def generate_password() -> str: ``` Use the `random` module to implement your function. Examples: ```python # Example 1 > generate_password() \'l2Oc4Av8!dM@\' # Example 2 > generate_password() \'V2&ak4Dz9LpA\' # Example 3 > generate_password() \'%4Mm!8Co1Fr\' ``` Note that the exact output will vary since the password is randomly generated, but each valid password should meet the constraints specified above.","solution":"import random import string def generate_password() -> str: Generates a random password exactly 12 characters long with at least 1 uppercase letter, 1 lowercase letter, 1 digit, and 1 special character from the set: `!@#%^&*()`. # Define character sets upper = string.ascii_uppercase lower = string.ascii_lowercase digits = string.digits special = \\"!@#%^&*()\\" # Ensure to pick at least one character from each required set password = [ random.choice(upper), random.choice(lower), random.choice(digits), random.choice(special) ] # Fill the remaining characters randomly from all the sets combined all_characters = upper + lower + digits + special password.extend(random.choice(all_characters) for _ in range(12 - 4)) # Shuffle to avoid predictable pattern random.shuffle(password) return \'\'.join(password)"},{"question":"Given an array of integers, find the highest product that can be obtained by multiplying any three distinct numbers from the array. Eg: `[1, 10, 2, 6, 5, 3]` results in `10 * 6 * 5 = 300`. Examples: ``` Testing: [1, 10, 2, 6, 5, 3] ==> 300 Testing: [10, 3, 5, 6, 20] ==> 1200 Testing: [-10, -10, 1, 3, 2] ==> 300 Testing: [1, 2, 3, 4] ==> 24 Testing: [-1, -2, -3, -4] ==> -6 Testing: [0, -1, 3, 100, 70, 50] ==> 350000 Testing: [-1, -2, -3, 4] ==> 24 Testing: [1, -4, 3, -6, 7, 0] ==> 168 ```","solution":"def highest_product_of_three(nums): Returns the highest product that can be obtained by multiplying any three distinct numbers from the list nums. if len(nums) < 3: raise ValueError(\\"List must contain at least three numbers\\") nums.sort() # The highest product can be the product of the three largest numbers # or the product of the two smallest numbers (which can be negative) and the largest number return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"Given a grid with dimensions MxN, each cell can either be walkable (denoted by \'.\') or blocked (denoted by \'#\'). You can only move up, down, left, or right. A path through the grid is defined as a sequence of connected cells starting at the top-left corner (0,0) and ending at the bottom-right corner (M-1, N-1). Write a function that determines the number of distinct paths from the start to the end of the grid. Two paths are considered distinct if they do not cover the exact same sequence of cells, even if they follow different orders of the same sequence of cells. Function Signature: ```python def count_distinct_paths(grid: List[List[str]]) -> int: # your code here ``` **Input:** 1. An integer M, the number of rows in the grid. 2. An integer N, the number of columns in the grid. 3. An MxN list of lists, `grid`, containing characters \'.\' or \'#\'. **Output:** - An integer representing the number of distinct valid paths through the grid. **Constraints:** - 1 ≤ M, N ≤ 100 - The grid is guaranteed to have a valid path from (0, 0) to (M-1, N-1) if (0, 0) and (M-1, N-1) are both walkable cells (\'.\'). **Example:** ```python grid = [ [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'], [\'#\', \'.\', \'.\'] ] print(count_distinct_paths(grid)) # Output: 2 ``` Path 1: (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) Path 2: (0,0) -> (0,2) -> (1,2) -> (2,2)","solution":"def count_distinct_paths(grid): from functools import lru_cache M = len(grid) N = len(grid[0]) @lru_cache(None) def dfs(x, y): # If we hit an obstacle, return 0 if x < 0 or x >= M or y < 0 or y >= N or grid[x][y] == \'#\': return 0 # If we reached the bottom-right corner, return 1 if x == M-1 and y == N-1: return 1 # Explore all possible paths return dfs(x+1, y) + dfs(x, y+1) if grid[0][0] == \'#\' or grid[M-1][N-1] == \'#\': return 0 return dfs(0, 0)"},{"question":"Warehouse Inventory Management You are in charge of managing the inventory for a warehouse. The warehouse keeps track of items with their respective quantities through a series of daily transactions over a period of time. Each transaction either adds items to the inventory or removes items from it. You are given a list of tuples, each containing two elements: the first element is a string representing the type of transaction (`\\"add\\"` or `\\"remove\\"`), and the second element is an integer representing the quantity of items added or removed. Your task is to calculate the total number of items left in the warehouse after all transactions have been processed. Please note that the transactions can neither cause the inventory to go below zero at any point nor result in a negative final count. The warehouse always has enough items to cover any removal transactions. Return the final count of items in the warehouse. # Example ```python transactions = [(\\"add\\", 10), (\\"remove\\", 5), (\\"add\\", 20), (\\"remove\\", 10)] # Starts with 0 # After first transaction: 0 + 10 = 10 # After second transaction: 10 - 5 = 5 # After third transaction: 5 + 20 = 25 # After fourth transaction: 25 - 10 = 15 # Thus, final count is 15 assert calculate_inventory(transactions) == 15 ``` # Constraints - The list of transactions will not be empty. - The quantity of items added or removed in each transaction will be a positive integer. - No removal transaction will attempt to remove more items than currently available in the inventory at that point in time. # Function Signature ```python def calculate_inventory(transactions: List[Tuple[str, int]]) -> int: pass ```","solution":"from typing import List, Tuple def calculate_inventory(transactions: List[Tuple[str, int]]) -> int: Calculate the total number of items in the warehouse after all transactions. Parameters: transactions (List[Tuple[str, int]]): A list of tuples where each tuple contains: - A string representing the type of transaction (\\"add\\" or \\"remove\\") - An integer representing the quantity of the item to be added or removed Returns: int: Total number of items left in the warehouse. inventory = 0 for transaction_type, quantity in transactions: if transaction_type == \\"add\\": inventory += quantity elif transaction_type == \\"remove\\": inventory -= quantity return inventory"},{"question":"You are given an array of integers `nums` where each integer appears exactly twice, except for one element which appears exactly three times. Write a function to find the element that appears three times. Example 1: Input: nums = [2,2,2,3,3,1,1] Output: 2 Explanation: The number 2 appears three times. Example 2: Input: nums = [4,5,5,5,6,6,7,7] Output: 5 Example 3: Input: nums = [11,11,11,12,12,13,13] Output: 11 Constraints: - `1 <= nums.length <= 10^5` - `1 <= nums[i] <= 10^9` - Each number appears exactly twice, except for one number which appears exactly three times.","solution":"def find_element_appears_three_times(nums): Given a list of integers where each integer appears exactly twice except for one element which appears exactly three times, this function returns the element that appears three times. num_count = {} for num in nums: if num in num_count: num_count[num] += 1 else: num_count[num] = 1 for num, count in num_count.items(): if count == 3: return num"},{"question":"You are given a list of N integers L_1, L_2, ..., L_N representing the lengths of segments that need to be connected. You need to determine if it is possible to arrange these segments into a cycle such that each segment is used exactly once. A cycle is formed if every segment\'s endpoints can be connected such that: - There are exactly N connections, - No segment is left unconnected, and - All segments form a single closed loop. If it is possible to create such a cycle, output the connections in the form of (x, y) pairs indicating that segment L_x is connected to segment L_y. If there are multiple solutions, output any one of them. If it is not possible to form a cycle, output -1. -----Constraints----- - 3 leq N leq 100000 - 1 leq L_i leq 1000 -----Input----- Input is given from Standard Input in the following format: N L_1 L_2 ... L_N -----Output----- If it is possible to form a cycle with all segments used exactly once, output N lines each containing two integers x and y (1 ≤ x, y ≤ N) showing that segment L_x is connected to segment L_y. Each segment should appear exactly twice in the output (once for each endpoint). If it is not possible to form such a cycle, output -1. -----Sample Input----- 5 1 2 3 4 5 -----Sample Output----- 1 2 2 3 3 4 4 5 5 1","solution":"def form_cycle(N, lengths): Determines if it is possible to form a cycle using given segment lengths. If possible, outputs the connections as (x, y) pairs. If not possible, returns -1. Parameters: N (int): Number of segments lengths (list): List of segment lengths Returns: list/str: List of tuples representing connections or -1 if not possible to form a cycle if N < 3: return -1 connections = [(i + 1, (i + 1) % N + 1) for i in range(N)] return connections"},{"question":"# Task Sarah is practicing writing words in her notebook. However, the ink of her pen is special: each time Sarah writes a character, it doubles the next characters she writes in size, taking twice the usual space. Let\'s represent a normal character takes 1 unit of space, but due to the special ink, the next characters would take 2 units of space, then 4 units, then 8 units, and so forth. Your task is to find out how many characters Sarah can fit in her notebook that has a space of `n` units. # Example For `n = 3`, the output should be `2`. Sarah can first write a character which takes 1 unit, and then write another character which takes 2 units. So, she can fit 2 characters in the notebook. For `n = 15`, the output should be `4`. Sarah can write characters that take 1, 2, 4, and 8 units respectively. # Input/Output The maximum space available in Sarah\'s notebook: - `[input]` integer `n` `1 <= n <= 10^9` - `[output]` an integer The number of characters Sarah can fit in her notebook.","solution":"def number_of_characters(n): Returns the number of characters Sarah can fit in her notebook with n units of space. space_used = 0 char_count = 0 unit_size = 1 while space_used + unit_size <= n: space_used += unit_size char_count += 1 unit_size *= 2 return char_count"},{"question":"Chef has a string S consisting of lowercase English letters. Chef wants to find the length of the longest substring of S such that the characters can be rearranged to form a palindrome. A substring is a contiguous sequence of characters in a string. A palindrome is a string that reads the same forward and backward. Your task is to help the Chef find the length of the longest palindromic substring that can be formed from any substring of S. -----Input:----- - The input begins with a single integer T denoting the number of test cases. - Each of the next T lines contains a string S. -----Output:----- For each test case, output a single integer: the length of the longest palindromic substring that can be formed from any substring of S. -----Constraints:----- - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 1000, where |S| denotes the length of the string. -----Sample Input:----- 2 ababb civic -----Sample Output:----- 5 5 Explanation: - For the string \\"ababb\\", the longest substring that can be rearranged to form a palindrome is \\"ababa\\", \\"ababb\\" or \\"babab\\", all of which have a length of 5. - For the string \\"civic\\", the entire string is already a palindrome, so the length is 5.","solution":"def longest_palindrome_length(S): Returns the length of the longest substring that can be rearranged to form a palindrome. from collections import Counter # Count frequency of each character in the string freq = Counter(S) # Initialize length of the longest palindromic substring that can be formed length = 0 odd_count = 0 # Calculate the length based on character frequencies for count in freq.values(): if count % 2 == 0: length += count else: length += count - 1 odd_count = 1 # If there was an odd count character, add one to length length += odd_count return length def solution(T, cases): Processes the test cases. results = [] for S in cases: results.append(longest_palindrome_length(S)) return results"},{"question":"Samuel is fascinated by palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. Samuel is interested in counting how many subarrays of an array are palindromic when treated as concatenated numbers. Write a program to help Samuel find the number of palindromic subarrays in a given array of integers. # Input - The first line contains an integer T, denoting the number of test cases. - Each test case starts with an integer N, the length of the array. - The second line contains N space-separated integers which denote the elements of the array. # Output - For each test case, output a single line containing the number of palindromic subarrays. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - 1 ≤ Element of the array ≤ 9 # Example Input: ``` 2 3 1 2 1 4 1 2 2 1 ``` Output: ``` 4 6 ``` # Explanation Example Case 1: The possible subarrays are [1], [2], [1], [1, 2], [2, 1], and [1, 2, 1]. Among these, the palindromic subarrays are [1], [2], [1], and [1, 2, 1]. Example Case 2: The possible subarrays are [...], [...], etc. The palindromic subarrays count is 6: [1], [2], [2], [1], [2, 2], [1, 2, 2, 1].","solution":"def is_palindrome(s): Check if a given string s is a palindrome. return s == s[::-1] def count_palindromic_subarrays(arr): Count the number of palindromic subarrays in the given array of integers. n = len(arr) count = 0 for i in range(n): for j in range(i, n): if is_palindrome(\'\'.join(map(str, arr[i:j+1]))): count += 1 return count def solve(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(count_palindromic_subarrays(arr)) return results"},{"question":"# Problem Title: Conway\'s Game of Life After N Generations Conway\'s Game of Life is a cellular automaton devised by the mathematician John Conway. The game takes place on a two-dimensional grid of cells, where each cell is either alive or dead. The evolution of the grid follows these rules: 1. Any live cell with fewer than two live neighbors dies (underpopulation). 2. Any live cell with two or three live neighbors lives on to the next generation. 3. Any live cell with more than three live neighbors dies (overcrowding). 4. Any dead cell with exactly three live neighbors becomes a live cell (reproduction). Given an initial configuration of a grid, compute the state of the grid after `n` generations. # Input: - A list of strings representing the initial grid, where each string is a row. A `\'.\'` represents a dead cell, and a `\'*\'` represents a live cell. - An integer `n` representing the number of generations to evolve the grid. # Output: - A list of strings representing the grid after `n` generations. # Example: ```python initial_grid = [ \\"....\\", \\".**.\\", \\".**.\\", \\"....\\" ] n = 1 # Expected Output: # [ # \\"....\\", # \\".**.\\", # \\".**.\\", # \\"....\\" # ] ``` In this example, the grid does not change after one generation because all cells with two or three neighbors live on, and no dead cells with exactly three neighbors become alive. # Constraints: - The grid will be at most 50x50 cells. - `n` can be as large as 10^9. # Note: Due to the large possible value of `n`, you will need to implement an efficient algorithm to handle the grid transformations. Consider optimizing the algorithm to skip repetitive cycles if any occur during the evolution process.","solution":"def game_of_life(initial_grid, n): def get_neighbors(x, y, grid, rows, cols): direction_vectors = [ (-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1) ] neighbors = 0 for dx, dy in direction_vectors: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == \'*\': neighbors += 1 return neighbors rows, cols = len(initial_grid), len(initial_grid[0]) # Convert the initial grid to a list of lists current_grid = [list(row) for row in initial_grid] for _ in range(n): new_grid = [[\'.\' for _ in range(cols)] for _ in range(rows)] for i in range(rows): for j in range(cols): neighbors = get_neighbors(i, j, current_grid, rows, cols) if current_grid[i][j] == \'*\' and neighbors in [2, 3]: new_grid[i][j] = \'*\' elif current_grid[i][j] == \'.\' and neighbors == 3: new_grid[i][j] = \'*\' # Convert new_grid back to list of strings current_grid = new_grid return [\'\'.join(row) for row in current_grid]"},{"question":"Create a function that receives an integer `n` and returns the integer with all its digits rearranged in non-ascending order. If the number is negative, the function should rearrange the digits of the absolute value in non-ascending order and return the negative of the resulting number. Examples ``` digit_Reorder(12345) = 54321 // Rearrange digits: 5, 4, 3, 2, 1 digit_Reorder(987263) = 987632 // Rearrange digits: 9, 8, 7, 6, 3, 2 digit_Reorder(-4213) = -4321 // Rearrange digits of absolute value: 4, 3, 2, 1 --> -4321 digit_Reorder(-958) = -985 // Rearrange digits of absolute value: 9, 8, 5 --> -985 ```","solution":"def digit_Reorder(n): Returns the integer with all its digits rearranged in non-ascending order. If the number is negative, the function rearranges the digits of the absolute value in non-ascending order and returns the negative of the resulting number. str_n = str(abs(n)) # Convert the number to string after taking absolute value sorted_digits = sorted(str_n, reverse=True) # Sort digits in non-ascending order sorted_number = int(\\"\\".join(sorted_digits)) # Join sorted digits and convert back to integer return sorted_number if n >= 0 else -sorted_number # Return with appropriate sign"},{"question":"Given a string of digits, determine the minimum number of insertions or deletions needed to make the string a palindrome. A palindrome is a sequence that reads the same forward as backward. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains a string S consisting of N digits. -----Output----- For each test case, print a single line containing one integer — the minimum number of insertions or deletions needed to make the string a palindrome. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 2 cdot 10^5 - Each character in S is a digit (\'0\'-\'9\') - The sum of N over all test cases does not exceed 2 cdot 10^6 -----Subtasks----- Subtask #1 (10 points): N leq 18 Subtask #2 (10 points): S is already in sorted order (either ascending or descending) Subtask #3 (20 points): N leq 3,000 Subtask #4 (20 points): Each digit in S is between \'0\' and \'2\' Subtask #5 (40 points): original constraints -----Example Input----- 2 4 1231 3 121 -----Example Output----- 1 0 -----Explanation----- Example case 1: The string \\"1231\\" can be made palindromic by either inserting \'2\' at the end to form \\"12321\\" or deleting \'2\' to form \\"131\\". Hence, the minimum number of operations required is 1. Example case 2: The string \\"121\\" is already a palindrome, so no operations are needed.","solution":"def min_insertions_deletions_to_palindrome(n, s): # Create a table to store results of subproblems L = [[0] * n for _ in range(n)] # Strings of length 1 are palindrome of length 1 for i in range(n): L[i][i] = 1 # Build the table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: if cl == 2: L[i][j] = 2 else: L[i][j] = L[i + 1][j - 1] + 2 else: L[i][j] = max(L[i][j - 1], L[i + 1][j]) # The minimum number of deletions or insertions needed return n - L[0][n-1] def solve(test_cases): results = [] for n, s in test_cases: results.append(min_insertions_deletions_to_palindrome(n, s)) return results # Sample usage # test_cases format: [(N, S), ...] test_cases = [(4, \'1231\'), (3, \'121\')] print(solve(test_cases)) # Output should be [1, 0]"},{"question":"You are given a set of strings which needs to be assessed for a specific pattern of repeated substrings. A string is considered to exhibit the special pattern if it can be constructed by taking a substring of it and appending multiple (at least one) copies of this substring. For example, strings \\"abab\\", \\"abcabcabc\\" and \\"aaa\\" are special, while strings \\"abac\\", \\"aabb\\" and \\"abcd\\" are not. Given a set of test cases, for each test case determine whether the given string exhibits this special pattern. -----Input----- The first line contains a single integer T (1 le T le 10^3) — the number of test cases. Each of the next T lines contains one string consisting of lowercase Latin alphabet letters. The length of each string is at most 10^5. -----Output----- Print T lines — on each line print \\"YES\\" if the corresponding string exhibits the special pattern, otherwise print \\"NO\\". -----Example----- Input 4 abab abcd abcabcabc aabb Output YES NO YES NO","solution":"def has_repeated_substring_pattern(s): Check if the string can be formed by multiple copies of some substring. n = len(s) for i in range(1, n // 2 + 1): if n % i == 0: if s[:i] * (n // i) == s: return \\"YES\\" return \\"NO\\" def check_strings_for_pattern(T, test_cases): For each test case string, determine if it has the special repeated substring pattern. results = [has_repeated_substring_pattern(tc) for tc in test_cases] return results"},{"question":"You are given a list of integers. Your task is to find the sum of elements at even indices (0-based) and return it as a string. If the list is empty, return \\"empty list\\". Eg: [10, 22, 35, 47, 50] -> \\"95\\" [3, 5, 2, 8, 1] -> \\"6\\" [] -> \\"empty list\\"","solution":"def sum_even_indices(nums): Returns the sum of elements at even indices as a string. If the list is empty, returns \\"empty list\\". if not nums: return \\"empty list\\" sum_even = sum(nums[i] for i in range(0, len(nums), 2)) return str(sum_even)"},{"question":"Given an array of positive integers representing the prices of a stock on different days, find the maximum profit that can be made by completing at most one transaction (buy one and sell one share of the stock). You cannot sell a stock before you buy one. Example 1: Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Example 2: Input: [7, 6, 4, 3, 1] Output: 0 Explanation: In this case, no transaction is done, i.e. max profit = 0. Note: Prices.length will be between 1 and 100,000. Prices[i] will be an integer between 0 and 10,000.","solution":"def max_profit(prices): Returns the maximum profit that can be made by completing at most one transaction. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"Given two arrays of equal length, one containing the original order of playing cards and another representing the order they were shuffled into, write a function that returns the minimum number of moves required to return the shuffled array back to its original order. A move consists of swapping any two cards in the shuffled array. For example, given: ``` original = [1, 2, 3, 4, 5] shuffled = [3, 1, 4, 2, 5] ``` The function should return **3** as it requires at least 3 swaps to match the original order: 1. Swap `3` and `1` to get `[1, 3, 4, 2, 5]` 2. Swap `3` and `2` to get `[1, 2, 4, 3, 5]` 3. Swap `4` and `3` to get `[1, 2, 3, 4, 5]` Constraints: - Both arrays will have a length between 1 and 1000. - The elements of both arrays will be unique and will contain integers between 1 and 1000. Implement the function `min_swaps_to_sort(original, shuffled)` which takes in two arrays and returns the minimum number of swaps required.","solution":"def min_swaps_to_sort(original, shuffled): Returns the minimum number of swaps required to sort the shuffled array back to the original order. index_map = {value: idx for idx, value in enumerate(original)} shuffled_indices = [index_map[val] for val in shuffled] visited = [False] * len(shuffled_indices) swaps = 0 for i in range(len(shuffled_indices)): if visited[i] or shuffled_indices[i] == i: continue cycle_size = 0 x = i while not visited[x]: visited[x] = True x = shuffled_indices[x] cycle_size += 1 if cycle_size > 1: swaps += cycle_size - 1 return swaps"},{"question":"Given an integer array `A`, your task is to return the maximum possible sum of a non-empty subarray that contains at most one element of the array `A` that is removed. In other words, you can pick any subarray of `A` and optionally remove one element from that subarray to maximize the sum. A subarray is a contiguous block of elements from the original array. Example 1: Input: `A = [1, -2, 0, 3]` Output: `4` Explanation: We can pick the subarray `[1, -2, 0, 3]` and remove -2 to get the sum `1 + 0 + 3 = 4`. Example 2: Input: `A = [1, -2, -2, 3]` Output: `3` Explanation: We can pick the subarray `[3]` and remove no elements to get the sum `3`. Example 3: Input: `A = [-1, -1, -1, -1]` Output: `-1` Explanation: We can pick the subarray `[-1]` and remove no elements to get the sum `-1`. Implement the function `maxSumWithOneRemoval(A: List[int]) -> int`. Note: 1. `1 <= A.length <= 10^5` 2. `-10^4 <= A[i] <= 10^4`","solution":"from typing import List def maxSumWithOneRemoval(A: List[int]) -> int: n = len(A) if n == 1: return A[0] # Arrays to keep the maximum sum ending at each index without any removal and with one removal max_end_no_removal = [0]*n max_end_one_removal = [0]*n # Initialization for the first element max_end_no_removal[0] = A[0] max_end_one_removal[0] = float(\'-inf\') # Not possible to have removal at the first element max_so_far = A[0] for i in range(1, n): max_end_no_removal[i] = max(max_end_no_removal[i-1] + A[i], A[i]) max_end_one_removal[i] = max(max_end_one_removal[i-1] + A[i], max_end_no_removal[i-1]) max_so_far = max(max_so_far, max_end_no_removal[i], max_end_one_removal[i]) return max_so_far"},{"question":"# Sum of Subarray Minimums Given an integer array `arr` of size `n`, find the sum of the minimum value in every possible contiguous subarray of `arr`. Since the answer can be large, return the sum modulo `10^9 + 7`. For example, if the input array was `[3,1,2,4]`, the sum of the minimums of every contiguous subarray would be calculated as follows: - Subarrays of length 1: `[3], [1], [2], [4]` -> Minimums: `3, 1, 2, 4` - Subarrays of length 2: `[3,1], [1,2], [2,4]` -> Minimums: `1, 1, 2` - Subarrays of length 3: `[3,1,2], [1,2,4]` -> Minimums: `1, 1` - Subarrays of length 4: `[3,1,2,4]` -> Minimum: `1` Sum of all minimums = `3 + 1 + 2 + 4 + 1 + 1 + 2 + 1 = 15` Return `15 % (10^9 + 7)`, which is `15`. # Example: ``` [3,1,2,4] -> 15 [1,2,3] -> 10 [11,81,94,43,3] -> 444 ``` # Note: - Subarray refers to a contiguous part of the array. - The length of the array `n` will be in the range `1 <= n <= 30000`. - Each element of the array will be in the range `1 <= arr[i] <= 30000`.","solution":"def sumSubarrayMins(arr): MOD = 10**9 + 7 n = len(arr) left, right = [0] * n, [0] * n stack = [] # Calculate previous less element distance for i in range(n): count = 1 while stack and stack[-1][0] > arr[i]: count += stack.pop()[1] left[i] = count stack.append((arr[i], count)) stack = [] # Calculate next less element distance for i in range(n)[::-1]: count = 1 while stack and stack[-1][0] >= arr[i]: count += stack.pop()[1] right[i] = count stack.append((arr[i], count)) # Sum of subarray minimums result = 0 for i in range(n): result += arr[i] * left[i] * right[i] result %= MOD return result"},{"question":"You are given a string containing words separated by spaces. Your task is to find the longest word in the string and return it. If there are multiple words with the same length, return the first one encountered. For example: ``` find_longest_word(\\"The quick brown fox\\") = \\"quick\\" find_longest_word(\\"A journey of a thousand miles begins with a single step\\") = \\"thousand\\" find_longest_word(\\"To be or not to be, that is the question\\") = \\"question\\" ``` Note: - Words are defined as sequences of characters separated by spaces. - Punctuation should be considered part of the word if present. - The input string will not be empty and will consist of at least one word.","solution":"def find_longest_word(s): Returns the longest word in the given string s. If there are multiple words with the same length, the first one encountered is returned. Parameters: s (str): The input string containing words separated by spaces. Returns: str: The longest word in the string. words = s.split() longest_word = max(words, key=len) return longest_word"},{"question":"Implement a function that takes a string containing a mathematical expression and evaluates it. The expression will contain only non-negative integers, addition (`+`), and multiplication (`*`) operations. The function should return the result of the expression as an integer. Examples: - `evaluate_expression(\\"3+2*2\\")` should return `7` - `evaluate_expression(\\" 3*2 + 1 \\")` should return `7` - `evaluate_expression(\\"4+2*3+5\\")` should return `15` Assumptions: - The input string will always be a valid expression. - There will be no division (`/`) or subtraction (`-`) operators. - Handle whitespaces adequately. Note: Make sure to respect the operator precedence where multiplication should be evaluated before addition.","solution":"def evaluate_expression(expression): Evaluates a string containing a mathematical expression with non-negative integers, addition (+), and multiplication (*) operations. Args: expression (str): The mathematical expression as a string. Returns: int: The result of the evaluated expression. # Remove whitespace expression = expression.replace(\\" \\", \\"\\") # Initialize two stacks to store numbers and current multiplication results num_stack = [] current_number = 0 current_mult = 1 expect_operand = True # flag indicating next char should be an operand for i, char in enumerate(expression): if char.isdigit(): current_number = current_number * 10 + int(char) expect_operand = True if char == \\"*\\" or char == \\"+\\" or i == len(expression) - 1 or not expect_operand: if char == \\"*\\" or i == len(expression) - 1: if i == len(expression) - 1: current_number = current_number if char.isdigit() else int(char) current_mult *= current_number elif char == \\"+\\": num_stack.append(current_mult * current_number) current_mult = 1 current_number = 0 expect_operand = False num_stack.append(current_mult) return sum(num_stack)"},{"question":"You are given a list of integers representing the amount of rainfall recorded on each day over a period of time. You need to determine the maximum amount of rainfall recorded over any contiguous subarray (segment). Your task is to write a function that finds the maximum sum of rainfall over any contiguous subarray. # Example: Given the array of rainfall `[1, -2, 3, 10, -4, 7, 2, -5]`, the maximum amount of rainfall over any contiguous subarray is `18` which corresponds to the subarray `[3, 10, -4, 7, 2]`. ```python def max_rainfall(rainfall): # Your code here pass # Example usage: rainfall = [1, -2, 3, 10, -4, 7, 2, -5] print(max_rainfall(rainfall)) # Output: 18 ``` # Input: A list of integers representing daily rainfall (both positive and negative), of length 1 or more. # Output: The maximum sum of rainfall over any contiguous subarray, as an integer. # Note: Think about the efficiency of your solution, especially since the list can have several thousands of elements.","solution":"def max_rainfall(rainfall): Finds the maximum sum of rainfall over any contiguous subarray. Parameters: rainfall (list of int): List of integers representing daily rainfall. Returns: int: The maximum sum of rainfall over any contiguous subarray. if not rainfall: return 0 max_sum = current_sum = rainfall[0] for value in rainfall[1:]: current_sum = max(value, current_sum + value) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Given an array of integers and an integer `k`, determine whether it is possible to partition the array into sets of `k` consecutive numbers. -----Input----- - First line contains an integer `T` which denotes the number of test cases. - For each test case: - First line contains two integers `n` (the size of the array) and `k`. - Second line contains `n` integers, the elements of the array. -----Output----- For each test case, output \\"Yes\\" (without quotes) if the array can be partitioned into sets of `k` consecutive numbers. Otherwise, output \\"No\\" (without quotes). -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 10^5 - 1 ≤ array[i], k ≤ 10^9 -----Constraints----- - Subtask #1: 1 ≤ n ≤ 10 (25 points) - Subtask #2: 1 ≤ n ≤ 100 (25 points) - Subtask #3: 1 ≤ n ≤ 1000 (25 points) - Subtask #4: original constraints (25 points) -----Example----- Input: 2 6 3 1 2 3 3 4 6 5 2 1 2 3 4 5 Output: No Yes Notes: In the first test case, the array cannot be partitioned into sets of 3 consecutive numbers. In the second test case, the array can be partitioned into two sets: {1, 2} and {3, 4}. The remaining element {5} can\'t form a set, hence the answer is \\"Yes\\".","solution":"def can_partition_into_consecutive_sets(n, k, array): Determines if the array can be partitioned into sets of k consecutive numbers. if n % k != 0: return \\"No\\" from collections import Counter array_counter = Counter(array) unique_elements = sorted(array_counter.keys()) for num in unique_elements: if array_counter[num] > 0: count = array_counter[num] for i in range(num, num + k): if array_counter[i] < count: return \\"No\\" array_counter[i] -= count return \\"Yes\\""},{"question":"Write a function called `findLongestWord` that takes a single string as input. The string contains a sentence with words separated by spaces. The function should return the longest word in the sentence. If there are two or more words of the same length, return the first one that appears in the sentence. If the input string is empty, the function should return an empty string. Consider only alphabetic characters as part of the words, and ignore punctuation.","solution":"import re def findLongestWord(sentence): Returns the longest word in the sentence. If there are two or more words of the same length, the first one that appears in the sentence is returned. If the sentence is empty, returns an empty string. # Remove punctuation and split the sentence into words words = re.findall(r\'bw+b\', sentence) # Find the longest word if not words: return \\"\\" longest_word = max(words, key=len) return longest_word"},{"question":"You have been tasked with creating a program to simulate a basic calculator for expressions involving addition, subtraction, multiplication, and division. The calculator should follow the order of operations (PEMDAS/BODMAS rules). Requirements - The input will be a string representing a mathematical expression potentially containing the following characters: - Digits (0-9) - Whitespace (to be ignored) - Operators: `+`, `-`, `*`, `/` - Parentheses: `(`, `)` - The output should be a single float value representing the result of the evaluated expression. Constraints - You can assume that the given expression is valid and does not contain any invalid characters or sequences. - Division is true division and should not be truncated. - The expression will be non-empty and less than 100 characters in length. Examples 1. `\\"3 + 5\\"` - returns `8.0` 2. `\\"10 + 2 * 6\\"` - returns `22.0` 3. `\\"100 * 2 + 12\\"` - returns `212.0` 4. `\\"100 * ( 2 + 12 )\\"` - returns `1400.0` 5. `\\"100 * ( 2 + 12 ) / 14\\"` - returns `100.0` Notes - Implement an algorithm that can parse and evaluate these expressions according to the correct order of operations. - Do not use the `eval` function in Python for this task. - Consider using a stack-based approach, such as the Shunting Yard algorithm for parsing and the Reverse Polish Notation (RPN) for evaluation. Your task is to write the function `calculate(expression)` that takes in a string `expression` and returns the evaluation result as a float.","solution":"def calculate(expression): Evaluates a mathematical expression given as a string and returns the result as a float. This function follows the order of operations (PEMDAS/BODMAS). def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_op(a, b, op): if op == \'+\': return a + b if op == \'-\': return a - b if op == \'*\': return a * b if op == \'/\': return a / b def evaluate(tokens): values = [] ops = [] i = 0 while i < len(tokens): if tokens[i] == \' \': i += 1 continue elif tokens[i] == \'(\': ops.append(tokens[i]) elif tokens[i].isdigit(): val = 0 while (i < len(tokens) and tokens[i].isdigit()): val = (val * 10) + int(tokens[i]) i += 1 values.append(val) i -= 1 elif tokens[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(tokens[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) ops.append(tokens[i]) i += 1 while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(apply_op(val1, val2, op)) return values[-1] try: result = evaluate(expression) return float(result) except Exception as e: return str(e)"},{"question":"Write a function ```python longest_subarray_with_sum(l, k) ``` that takes in a list of integers `l` and an integer `k`, and returns the length of the longest contiguous subarray whose sum equals `k`. If no such subarray exists, return `0`. E.g. ```python longest_subarray_with_sum([1, -1, 5, -2, 3], 3) == 4 # the subarray [1, -1, 5, -2] sums to 3 and its length is 4. longest_subarray_with_sum([-2, -1, 2, 1], 1) == 2 # the subarray [-1, 2] sums to 1 and its length is 2. longest_subarray_with_sum([1, 2, 3], 6) == 3 # the subarray [1, 2, 3] sums to 6 and its length is 3. longest_subarray_with_sum([1, 2, 3], 7) == 0 # there is no subarray that sums to 7. ```","solution":"def longest_subarray_with_sum(l, k): Returns the length of the longest contiguous subarray that sums to k. If no such subarray exists, returns 0. sum_to_index = {0: -1} current_sum = 0 max_length = 0 for i, num in enumerate(l): current_sum += num if current_sum == k: max_length = i + 1 if current_sum - k in sum_to_index: max_length = max(max_length, i - sum_to_index[current_sum - k]) if current_sum not in sum_to_index: sum_to_index[current_sum] = i return max_length"},{"question":"Alex manages a row compost bins in his garden. Each bin can hold a certain amount of waste. Initially, each compost bin starts empty. He wants to perform a series of operations over the bins: - adding a specific amount of waste to each bin from position u to position v, - or querying \\"how much waste is currently in bin p?\\". -----Request----- Help Alex manage his compost bins by providing the correct output for each query operation. -----Input----- - The first line contains the integers n and m, representing the number of bins and the number of operations respectively. - m following lines, each can be one of the following operations: - A u v k to describe an operation where k amount of waste is added to each bin from u to v (inclusive). - Q p to describe an operation querying the current amount of waste in bin p. (Each integer on the same line, or between the characters A, Q and the integers should be separated by at least one space character) -----Output----- For each operation of the type Q p, output (on a single line) an integer representing the current amount of waste in bin p (following the respective Input order). -----Example----- Input: 5 4 Q 1 A 1 3 5 Q 3 A 2 5 2 Q 4 Output: 0 5 2 -----Limitations----- - 1 ≤ n ≤ 10^6 - 1 ≤ m ≤ 250,000 - 1 ≤ u ≤ v ≤ n - 0 ≤ k ≤ 10^9 - 1 ≤ p ≤ n","solution":"def process_operations(n, m, operations): Process a series of operations on compost bins. :param n: Number of bins :param m: Number of operations :param operations: List of operations, each being either an addition or a query :return: List of query results bins = [0] * (n + 1) # Using 1-based indexing def add_waste(u, v, k): bins[u] += k if v + 1 <= n: bins[v + 1] -= k results = [] for operation in operations: parts = operation.split() if parts[0] == \'A\': u = int(parts[1]) v = int(parts[2]) k = int(parts[3]) add_waste(u, v, k) elif parts[0] == \'Q\': p = int(parts[1]) current_waste = 0 for i in range(1, p + 1): current_waste += bins[i] results.append(current_waste) return results"},{"question":"There is a scientist named \'\'Dr. Raj\'\'. He is working on a research project that involves analyzing sequences of DNA. Each DNA sequence can be represented as a string consisting of characters \'A\', \'T\', \'C\', and \'G\'. Dr. Raj is interested in finding out whether a particular DNA sequence is a \\"valid\\" sequence. A valid DNA sequence does not contain more than k consecutive identical characters. Help Dr. Raj to determine if a given DNA sequence is valid or not. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - First line of each test case contains a string S, representing the DNA sequence. - Second line of each test case contains an integer k, the maximum number of consecutive identical characters allowed. -----Output:----- For each test case, print Valid, if the given DNA sequence satisfies the condition. Otherwise, print Invalid. -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 1000 - 1 leq k leq 1000 -----Sample Input:----- 3 ATTGCC 2 AAAATTTCCCGGG 3 GGGGGGG 1 -----Sample Output:----- Valid Invalid Invalid -----EXPLANATION:----- Example case 1: - The DNA sequence is \'\'ATTGCC\'\'. The maximum number of consecutive identical characters allowed is 2. Here, the longest sequence of identical characters is \\"TT\\" or \\"CC\\", which satisfies the condition. Example case 2: - The DNA sequence is \'\'AAAATTTCCCGGG\'\'. The maximum number of consecutive identical characters allowed is 3. Here, there is a sequence \\"AAAA\\" of length 4, which violates the condition. Example case 3: - The DNA sequence is \'\'GGGGGGG\'\'. The maximum number of consecutive identical characters allowed is 1. Here, the entire sequence consists of character \'G\' repeated 7 times, which violates the condition.","solution":"def is_valid_dna_sequence(s, k): Determine if the DNA sequence is valid based on the given conditions. A valid DNA sequence does not contain more than `k` consecutive identical characters. :param s: str, the DNA sequence :param k: int, the maximum number of consecutive identical characters allowed :return: str, \\"Valid\\" or \\"Invalid\\" count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 if count > k: return \\"Invalid\\" else: count = 1 return \\"Valid\\" def main(): import sys input = sys.stdin.read data = input().split() idx = 0 T = int(data[idx]) idx += 1 results = [] for _ in range(T): S = data[idx] idx += 1 k = int(data[idx]) idx += 1 results.append(is_valid_dna_sequence(S, k)) for result in results: print(result)"},{"question":"Sudoku Validator A Sudoku board is a 9x9 grid, where each cell contains a digit from 1 to 9 or is empty. To solve the Sudoku puzzle, the board\'s cells must be filled so that each row, each column, and each 3x3 subgrid contains all digits from 1 to 9 exactly once. Task Given a 9x9 grid of characters representing a Sudoku board, implement a function `is_valid_sudoku(board: List[List[str]]) -> bool` to determine if the board is valid. The board is valid if: 1. Each row must contain the digits 1-9 without repetition. 2. Each column must contain the digits 1-9 without repetition. 3. Each of the 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. Note: - A Sudoku board (partially filled) is valid when it meets the following constraints: - Each row must contain the digits 1-9 without repetition. - Each column must contain the digits 1-9 without repetition. - Each of the 3x3 sub-boxes of the grid must contain the digits 1-9 without repetition. - The Sudoku board could be partially filled, where the empty cells are filled with the character \'.\'. Examples ```python boardis_valid_sudoku(board) # Returns: True boardis_valid_sudoku(board) # Returns: False ``` # Constraints: - The board represents a 9x9 grid. - The board consists of digits (\'1\'..\'9\') and/or empty cells (\'.\').","solution":"from typing import List def is_valid_sudoku(board: List[List[str]]) -> bool: def is_valid_unit(unit: List[str]) -> bool: unit = [i for i in unit if i != \'.\'] return len(unit) == len(set(unit)) def is_valid_row(): for row in board: if not is_valid_unit(row): return False return True def is_valid_column(): for col in range(9): if not is_valid_unit([board[row][col] for row in range(9)]): return False return True def is_valid_box(): for box_row in range(0, 9, 3): for box_col in range(0, 9, 3): box = [board[r][c] for r in range(box_row, box_row + 3) for c in range(box_col, box_col + 3)] if not is_valid_unit(box): return False return True return is_valid_row() and is_valid_column() and is_valid_box()"},{"question":"Write a function named `sum_of_squares` that takes an integer `n` as input and returns the sum of the squares of the first `n` natural numbers. The input `n` will be a positive integer. For example: - `sum_of_squares(3)` should return `14` because (1^2 + 2^2 + 3^2 = 14). - `sum_of_squares(5)` should return `55` because (1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55). Your function should handle edge cases gracefully, such as when `n` is 1.","solution":"def sum_of_squares(n): Returns the sum of the squares of the first n natural numbers. Parameters: n (int): The number of terms to consider. Must be a positive integer. Returns: int: The sum of the squares of the first n natural numbers. return sum(i**2 for i in range(1, n+1))"},{"question":"In a town, there are numerous paths that connect various landmarks, and each path has a length associated with it. Your task is to find the shortest path that connects a set of given landmarks, visiting each landmark exactly once and returning to the starting point. This is known as the Travelling Salesman Problem (TSP). Write a function `find_shortest_path(graph, landmarks)` that takes two inputs: 1. `graph`: A dictionary where the keys are tuples representing a pair of landmarks, and the values are integers representing the lengths of the paths between those landmarks. 2. `landmarks`: A list of strings representing the names of the landmarks you need to visit. The function should return a list of landmarks starting at the initial landmark, visiting each one exactly once, and returning to the initial landmark, such that the total path length is minimized. **Example:** ```python graph = { (\'A\', \'B\'): 10, (\'A\', \'C\'): 15, (\'B\', \'C\'): 35, (\'B\', \'D\'): 25, (\'C\', \'D\'): 30 } landmarks = [\'A\', \'B\', \'C\', \'D\'] find_shortest_path(graph, landmarks) ``` **Expected Output:** The output should be a list of landmarks showing the shortest path, such as: ``` [\'A\', \'B\', \'D\', \'C\', \'A\'] ```","solution":"import itertools def calculate_path_length(graph, path): total_length = 0 for i in range(len(path) - 1): segment = (path[i], path[i + 1]) if segment in graph: total_length += graph[segment] else: total_length += graph[(path[i + 1], path[i])] # assuming the graph is undirected return total_length def find_shortest_path(graph, landmarks): shortest_path = None shortest_length = float(\'inf\') all_permutations = itertools.permutations(landmarks[1:]) for perm in all_permutations: path = [landmarks[0]] + list(perm) + [landmarks[0]] length = calculate_path_length(graph, path) if length < shortest_length: shortest_length = length shortest_path = path return shortest_path"},{"question":"# Linked List Cycle Detection Given a linked list, determine if it has a cycle in it. # Definition A linked list is a collection of nodes where each node contains a value and a pointer (reference) to the next node in the sequence. # Challenge Write a function `hasCycle(head)` that accepts the head node of a linked list and returns `True` if the linked list contains a cycle, or `False` otherwise. # Explanation A cycle occurs if a node’s `next` pointer points back to a previous node in the linked list, thereby forming a loop. For example, in the linked list `1 -> 2 -> 3 -> 4 -> 2`, node `4` points back to node `2`, forming a cycle. The function needs to efficiently determine whether such a cycle exists without modifying the linked list. # Approach One common way to detect cycles in a linked list is Floyd’s Cycle-Finding Algorithm (also known as the \\"tortoise and hare\\" algorithm), which uses two pointers moving at different speeds. # Example ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def hasCycle(head): tortoise, hare = head, head while hare is not None and hare.next is not None: tortoise = tortoise.next hare = hare.next.next if tortoise == hare: return True return False # Example 1: # Input: # head = ListNode(3) # second = ListNode(2) # third = ListNode(0) # fourth = ListNode(-4) # head.next = second # second.next = third # third.next = fourth # fourth.next = second # Cycle here # Output: True # Example 2: # Input: head = ListNode(1) # second = ListNode(2) # head.next = second # second.next = head # Cycle here # Output: True # Example 3: # Input: head = ListNode(1) # Output: False ```","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def hasCycle(head): tortoise, hare = head, head while hare is not None and hare.next is not None: tortoise = tortoise.next hare = hare.next.next if tortoise == hare: return True return False"},{"question":"Write a function that takes a string representation of a mathematical expression and evaluates it by following the standard order of operations (PEMDAS/BODMAS rules). The expression will consist of non-negative integers and include the operators `+`, `-`, `*`, and `/`. Parentheses may be used to indicate precedence. Your function should handle multiple operations and nested parentheses. Division should be treated as integer division, where the result is rounded down towards zero. Example: ``` evaluate_expression(\\"3+(2*2)\\") -> 7 evaluate_expression(\\"3+2*2\\") -> 7 evaluate_expression(\\"20/(3+2)\\") -> 4 evaluate_expression(\\"(2+3)*(5-2)\\") -> 15 evaluate_expression(\\"10+2*6/(4-2)\\") -> 16 ```","solution":"def evaluate_expression(s: str) -> int: def helper(tokens): stack = [] num = 0 sign = \'+\' while tokens: token = tokens.pop(0) if token.isdigit(): num = num * 10 + int(token) if token == \'(\': num = helper(tokens) if (not token.isdigit() and token != \' \') or not tokens: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack[-1] *= num elif sign == \'/\': stack[-1] = int(stack[-1] / num) sign = token num = 0 if token == \')\': break return sum(stack) tokens = list(s) return helper(tokens)"},{"question":"A zoo wants to categorize animals based on their attributes for a fun scenario where kids can guess the animal. Each animal is represented as an object with properties such as `name`, `diet`, `habitat`, and `limbs`. The zoo needs to filter animals based on these attributes. Write a function `filter_animals()` that receives four arguments in the following order: - `diet` (string) - filter by the diet of the animal (\\"herbivore\\", \\"carnivore\\", or \\"omnivore\\") - `habitat` (string) - filter by the type of habitat (\\"land\\", \\"water\\", \\"air\\") - `min_limbs` (integer) - filter by the minimum number of limbs the animal should have - `excluded_animals` (array of strings) - list of animal names to exclude from the results The function should return an array of the animals\' names that meet the criteria in the same order they appear in the pre-loaded animal list `animal_list`. Each animal is an object with the properties described before. If no animals match the criteria, return an empty array. Here is the structure of the animal list and an example: ```python animal_list = [ {\\"name\\": \\"elephant\\", \\"diet\\": \\"herbivore\\", \\"habitat\\": \\"land\\", \\"limbs\\": 4}, {\\"name\\": \\"shark\\", \\"diet\\": \\"carnivore\\", \\"habitat\\": \\"water\\", \\"limbs\\": 0}, {\\"name\\": \\"sparrow\\", \\"diet\\": \\"omnivore\\", \\"habitat\\": \\"air\\", \\"limbs\\": 2}, {\\"name\\": \\"cow\\", \\"diet\\": \\"herbivore\\", \\"habitat\\": \\"land\\", \\"limbs\\": 4}, {\\"name\\": \\"octopus\\", \\"diet\\": \\"carnivore\\", \\"habitat\\": \\"water\\", \\"limbs\\": 8}, {\\"name\\": \\"frog\\", \\"diet\\": \\"carnivore\\", \\"habitat\\": \\"water\\", \\"limbs\\": 4} ] filter_animals(\\"carnivore\\", \\"water\\", 4, [\\"octopus\\"]) == [\\"frog\\"] filter_animals(\\"herbivore\\", \\"land\\", 4, [\\"elephant\\", \\"cow\\"]) == [] filter_animals(\\"omnivore\\", \\"air\\", 2, []) == [\\"sparrow\\"] ``` Your task is to implement the function, `filter_animals(diet, habitat, min_limbs, excluded_animals)`, to help the zoo with their fun educational activity.","solution":"animal_list = [ {\\"name\\": \\"elephant\\", \\"diet\\": \\"herbivore\\", \\"habitat\\": \\"land\\", \\"limbs\\": 4}, {\\"name\\": \\"shark\\", \\"diet\\": \\"carnivore\\", \\"habitat\\": \\"water\\", \\"limbs\\": 0}, {\\"name\\": \\"sparrow\\", \\"diet\\": \\"omnivore\\", \\"habitat\\": \\"air\\", \\"limbs\\": 2}, {\\"name\\": \\"cow\\", \\"diet\\": \\"herbivore\\", \\"habitat\\": \\"land\\", \\"limbs\\": 4}, {\\"name\\": \\"octopus\\", \\"diet\\": \\"carnivore\\", \\"habitat\\": \\"water\\", \\"limbs\\": 8}, {\\"name\\": \\"frog\\", \\"diet\\": \\"carnivore\\", \\"habitat\\": \\"water\\", \\"limbs\\": 4} ] def filter_animals(diet, habitat, min_limbs, excluded_animals): Filters the animals based on the given criteria. Parameters: diet (str): The diet of the animal (\\"herbivore\\", \\"carnivore\\", \\"omnivore\\"). habitat (str): The habitat of the animal (\\"land\\", \\"water\\", \\"air\\"). min_limbs (int): The minimum number of limbs the animal should have. excluded_animals (list of str): List of animal names to exclude from the results. Returns: list of str: Names of the animals that meet the criteria. result = [] for animal in animal_list: if (animal[\'diet\'] == diet and animal[\'habitat\'] == habitat and animal[\'limbs\'] >= min_limbs and animal[\'name\'] not in excluded_animals): result.append(animal[\'name\']) return result"},{"question":"#Finding Missing Ranges Given a sorted list of unique integers `nums` and a range represented by two integers `lower` and `upper`, return the smallest sorted list of ranges that cover every missing number in the `nums` inclusive range [lower, upper]. A range is represented as `[start, end]`. Your task is to implement a function `find_missing_ranges(nums: List[int], lower: int, upper: int) -> List[str]` which returns a list of strings, where each string represents the start and end of a missing range in the format \\"start->end\\" or just \\"start\\" if the range is a single number. # Examples: ```python find_missing_ranges([0, 1, 3, 50, 75], 0, 99) # Output: [\\"2\\", \\"4->49\\", \\"51->74\\", \\"76->99\\"] find_missing_ranges([10, 11, 12, 13], 0, 15) # Output: [\\"0->9\\", \\"14->15\\"] ``` # Constraints: - The given list `nums` is sorted and all elements are unique. - The range [lower, upper] is inclusive. - 0 <= lower <= upper <= 10^9 - 0 <= len(nums) <= 10^4","solution":"from typing import List def find_missing_ranges(nums: List[int], lower: int, upper: int) -> List[str]: def make_range_string(start: int, end: int) -> str: if start == end: return str(start) else: return f\\"{start}->{end}\\" result = [] prev = lower - 1 for num in nums + [upper + 1]: if num == prev + 2: result.append(make_range_string(prev + 1, prev + 1)) elif num > prev + 2: result.append(make_range_string(prev + 1, num - 1)) prev = num return result"},{"question":"Aria has just bought a new robot vacuum cleaner. The vacuum cleaner has a special feature: it can be programmed to clean specific areas in a room by following a sequence of instructions. The instructions consist of characters \'L\', \'R\', \'U\', and \'D\', corresponding to moving Left, Right, Up, and Down respectively. The room is represented as a 2D grid. Aria needs to determine if the sequence of instructions will bring the vacuum cleaner back to its starting position at (0,0). If the vacuum cleaner can return to its start position after executing all the given instructions, it means the sequence forms a valid closed loop. The vacuum cleaner starts at position (0,0) at the beginning of the sequence. Determine the final position of the vacuum cleaner after executing the entire sequence and check if it returns back to the origin. -----Input----- The first line contains an integer T, the number of test cases. Each of the next T lines contains a string of instructions. -----Output----- For each case, output \'YES\' if executing the instructions sends the vacuum cleaner back to the starting position (0,0), otherwise output \'NO\'. -----Constraints----- - 1 ≤ T ≤ 1,000,000 (10^6) - 1 ≤ |instructions| ≤ 1,000,000 (10^6) - The total length of all instruction sequences across all test cases will not exceed 10^7. -----Example----- Input: 4 LR UD LLRR UUDD Output: YES YES YES YES -----Explanation----- For the first example case, the sequence \\"LR\\" sends the vacuum cleaner one step to the left and then immediately one step to the right, which brings it back to the starting position (0,0). For the second example case, the sequence \\"UD\\" sends the vacuum cleaner one step up and then one step down, which brings it back to the starting position (0,0). For the third example case, the sequence \\"LLRR\\" sends the vacuum cleaner two steps to the left and then two steps to the right, returning it to the starting position (0,0). For the fourth example case, the sequence \\"UUDD\\" sends the vacuum cleaner two steps up and then two steps down, returning it to the starting position (0,0).","solution":"def is_back_to_origin(instructions): Returns \'YES\' if the sequence of instructions brings the vacuum cleaner back to (0, 0), otherwise returns \'NO\'. x, y = 0, 0 for char in instructions: if char == \'L\': x -= 1 elif char == \'R\': x += 1 elif char == \'U\': y += 1 elif char == \'D\': y -= 1 return \'YES\' if x == 0 and y == 0 else \'NO\' def process_test_cases(test_cases): return [is_back_to_origin(instructions) for instructions in test_cases]"},{"question":"This problem involves writing an AI to play a simplified version of the classic Tic-Tac-Toe game but with a twist. The Board -------------- The board starts as a 3x3 grid of empty cells: ``` 1 | 2 | 3 ----------- 4 | 5 | 6 ----------- 7 | 8 | 9 ``` The Rules -------------- - Two players take turns placing their mark (\'X\' or \'O\') on an empty cell. - A player must pick an empty cell on their turn. - The player who succeeds in putting three of their marks in a horizontal, vertical, or diagonal row (3-in-a-row) wins. - If all cells are filled and no player has achieved 3-in-a-row, the game results in a draw. The Task ------------ In this task, you have to write an AI to play the Tic-Tac-Toe game. You have to encode an AI in a function `choose_move(board, player)` that takes a board, represented as a list of strings, and the current player (\'X\' or \'O\'), and returns: ```python cell_index ``` Which refers to an index of the cell (1-9) on the board where the AI will place its mark. Example: ```python board = [\\"X\\", \\"\\", \\"O\\", \\"O\\", \\"X\\", \\"\\", \\"\\", \\"O\\", \\"X\\"] player = \\"X\\" ``` The returned value should be a valid cell index (1-9) where \'X\' should be placed according to the above rules to either win if possible, block the opponent from winning, or otherwise make the best move. The test suite will be set up to play multiple games and ensure that your AI either wins or draws every game it plays.","solution":"def choose_move(board, player): Given a board state and the current player, returns the index of the best move (1-9). The board is a list of strings, where \\"\\" (empty string) indicates an empty cell. # Function to check for a win def is_winner(board, player): win_conditions = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], # horizontal wins [0, 3, 6], [1, 4, 7], [2, 5, 8], # vertical wins [0, 4, 8], [2, 4, 6] # diagonal wins ] for condition in win_conditions: if board[condition[0]] == board[condition[1]] == board[condition[2]] == player: return True return False # Function to find the best move def best_move(board, player): # Make a move and recurse to check the outcome for idx in range(9): if board[idx] == \\"\\": board[idx] = player if is_winner(board, player): return idx + 1 board[idx] = \\"\\" # Block opponent\'s winning move opponent = \\"O\\" if player == \\"X\\" else \\"X\\" for idx in range(9): if board[idx] == \\"\\": board[idx] = opponent if is_winner(board, opponent): board[idx] = \\"\\" return idx + 1 board[idx] = \\"\\" # Take the first empty cell for idx in range(9): if board[idx] == \\"\\": return idx + 1 return 0 return best_move(board, player)"},{"question":"A permutation is an arrangement of all the members of a set into a sequence or order. For example, the permutations of the set {1, 2, 3} are: 1. 123 2. 132 3. 213 4. 231 5. 312 6. 321 Your task is to implement a function that generates all the permutations of a given string and returns them as an array of strings. The input string will only contain unique characters. Examples: permutations(\\"abc\\") should return [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] permutations(\\"123\\") should return [\\"123\\", \\"132\\", \\"213\\", \\"231\\", \\"312\\", \\"321\\"] If the input string is null or empty, return an empty array. Please ensure that the permutations are listed in lexicographical (dictionary) order.","solution":"import itertools def permutations(s): Returns all permutations of the input string s in lexicographical order. Parameters: s (str): The input string containing unique characters. Returns: List[str]: List of permutations in lexicographical order or an empty list for empty input. if not s: return [] perm_list = sorted(\'\'.join(p) for p in itertools.permutations(s)) return perm_list"},{"question":"Write a function that takes a string s, and returns a list of all unique palindrome substrings. A palindrome is defined as a string that reads the same forward and backward. Your result should include only substrings of length greater than 1. For example: - If s = \\"babad\\", the function should return [\\"bab\\", \\"aba\\"]. - If s = \\"abacdfgdcaba\\", the function should return [\\"aba\\", \\"cdc\\", \\"dfgdf\\", \\"aca\\"]. Return the list of palindromes in lexicographical order. **Example 1:** Input: s = \\"abccba\\" Output: [\\"abccba\\", \\"bccb\\", \\"cc\\"] **Example 2:** Input: s = \\"racecar\\" Output: [\\"aceca\\", \\"cec\\", \\"racecar\\"] **Example 3:** Input: s = \\"aaabba\\" Output: [\\"aa\\", \\"aaa\\", \\"aabbaa\\", \\"abba\\", \\"bb\\"] Constraints: - 1 <= s.length <= 1000 - s consists of lowercase English letters only. - You may return the list in any order.","solution":"def unique_palindromes(s): Returns a list of all unique palindrome substrings of length greater than 1 in lexicographical order. def is_palindrome(sub): return sub == sub[::-1] found_palindromes = set() for i in range(len(s)): for j in range(i + 2, len(s) + 1): substring = s[i:j] if is_palindrome(substring): found_palindromes.add(substring) return sorted(found_palindromes)"},{"question":"# Unique Characters in a String Write a function that determines whether all characters in a given string are unique (i.e., no character repeats). Examples ``` areAllCharactersUnique(\\"abcdef\\") ==> true areAllCharactersUnique(\\"abab\\") ==> false areAllCharactersUnique(\\"1234567\\") ==> true areAllCharactersUnique(\\"aa\\") ==> false ```","solution":"def areAllCharactersUnique(s): Determines whether all characters in the given string are unique. Args: s (str): The string to check for unique characters. Returns: bool: True if all characters are unique, False otherwise. seen = set() for char in s: if char in seen: return False seen.add(char) return True"},{"question":"A famous biologist is working on a gene sequence analysis project. She is particularly interested in finding specific patterns in given sequences. A gene sequence can be represented as a string of characters consisting of \'A\', \'C\', \'G\', and \'T\'. Given such a gene sequence, she needs to determine if there are any palindromic subsequences of a specific length within the gene sequence. The biologist likes efficiency and prefers an optimal solution for her problem due to the large size of potential gene sequences. A palindromic subsequence is a series of characters that reads the same forward and backward. -----Input----- The first line contains a non-empty string s, which is the gene sequence. Its length (n) doesn\'t exceed 10^5. The second line contains a single integer k (2 ≤ k ≤ n) — the length of the palindromic subsequence to find. -----Output----- Print \\"YES\\" (without quotes) if there exists at least one palindromic subsequence of length k in the gene sequence, otherwise print \\"NO\\" (without quotes). -----Examples----- Input ACGTGTCAAA 4 Output YES Input ACGT 2 Output NO -----Note----- In the first example, of the gene sequence \\"ACGTGTCAAA\\", one possible palindromic subsequence of length 4 is \\"GTGT\\". In the second example, of the gene sequence \\"ACGT\\", there are no palindromic subsequences of length 2.","solution":"def is_palindromic_subsequence(s, k): Determines if there exists a palindromic subsequence of length k in the given gene sequence. Parameters: s (str): The gene sequence. k (int): The desired length of the palindromic subsequence. Returns: str: \\"YES\\" if there is at least one palindromic subsequence of length k, otherwise \\"NO\\". from collections import defaultdict # Group by positions of each character pos = defaultdict(list) for i, c in enumerate(s): pos[c].append(i) # Check each unique character list to find palindromes for key, indexes in pos.items(): if len(indexes) < 2: continue # Check all pairs in this character list for i in range(len(indexes)): for j in range(i+1, len(indexes)): if indexes[j] - indexes[i] + 1 > k: # Too long break if s[indexes[i]:indexes[j]+1] == s[indexes[i]:indexes[j]+1][::-1]: return \\"YES\\" return \\"NO\\""},{"question":"You have been assigned the task of developing a system to manage the music preferences of your company\'s employees. Each employee can list their favorite music genres. Your task is to summarize and output this information in a structured format. The input is a list of employee and genre pairs in the form `\\"employee_name:genre\\"`. Your goal is to group each genre and list the employees who like it in alphabetical order. You should then output a string with a genre on each line followed by a sorted comma-separated list of employee names. For example, given: ``` \\"alice:rock,bob:jazz,charlie:rock,alice:jazz,diana:classical,eliza:rock\\" ``` output: ``` classical:diananjazz:alice,bobnrock:alice,charlie,eliza\\" ``` Assume that: 1. Only valid `employee_name:genre` pairs will be passed in 2. Strings will always be in lower case 3. Input will not be empty 4. Employee name and genre will not be empty 5. Each employee can like multiple genres and each genre can have multiple employees 6. All genres may not have employees","solution":"def summarize_music_preferences(pairs): Summarizes music preferences by grouping genres and listing employees liking them. Args: pairs (str): A string of employee-genre pairs separated by commas. Returns: str: A formatted string with genres and their corresponding employees sorted alphabetically. from collections import defaultdict genre_dict = defaultdict(list) # Split the pairs and fill the dictionary for pair in pairs.split(\',\'): employee_name, genre = pair.split(\':\') genre_dict[genre].append(employee_name) # Create the summary string with genres sorted output_lines = [] for genre in sorted(genre_dict.keys()): employees_sorted = \',\'.join(sorted(genre_dict[genre])) output_lines.append(f\\"{genre}:{employees_sorted}\\") return \'n\'.join(output_lines)"},{"question":"You are given a string of lowercase alphabets and your task is to determine whether it is possible to rearrange the characters in the string to form a palindrome. A palindrome is a string that reads the same backward as forward, e.g., \\"madam\\" or \\"racecar\\". You do not need to generate the palindrome, just to determine if it is possible to do so. For example: ```python can_form_palindrome(\\"civic\\") = True can_form_palindrome(\\"ivicc\\") = True can_form_palindrome(\\"hello\\") = False can_form_palindrome(\\"aaabbb\\") = False ``` More examples will be provided in the test cases. Hint: Consider the properties of the character frequencies in palindromes.","solution":"def can_form_palindrome(s): Determines if characters in the string can be rearranged to form a palindrome. :param s: input string consisting of lowercase alphabets :return: True if a palindrome can be formed, False otherwise from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Given a string s and an array of strings wordDict, return the total number of ways the string can be segmented into a space-separated sequence of one or more dictionary words. Example 1: Input: s = \\"catsanddog\\" wordDict = [\\"cat\\", \\"cats\\", \\"and\\", \\"sand\\", \\"dog\\"] Output: 2 Explanation: The 2 ways to break the string are: cats and dog, cat sand dog. Example 2: Input: s = \\"pineapplepenapple\\" wordDict = [\\"apple\\", \\"pen\\", \\"applepen\\", \\"pine\\", \\"pineapple\\"] Output: 3 Explanation: The 3 ways to break the string are: pineapple pen apple, pine applepen apple, pine apple pen apple. Example 3: Input: s = \\"catsandog\\" wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: 0 Explanation: There is no way to break the string into a valid sequence of words. Note: You may assume the dictionary does not contain duplicate words. The length of s will be in the range [1, 300]. The length of wordDict will be in the range [1, 1000]. The length of each word in wordDict will be in the range [1, 20].","solution":"def wordBreakCount(s, wordDict): Returns the total number of ways the string `s` can be segmented into a space-separated sequence of one or more dictionary words from `wordDict`. wordSet = set(wordDict) memo = {} def helper(substring): if substring in memo: return memo[substring] if not substring: return 1 ways = 0 for i in range(1, len(substring) + 1): if substring[:i] in wordSet: ways += helper(substring[i:]) memo[substring] = ways return ways return helper(s)"},{"question":"You are given a sequence of integers. Your task is to determine the maximum sum of non-adjacent elements in the sequence. The elements can be positive, negative, or zero. The sum may also be zero if all elements are negative or zero. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers describing the sequence. -----Output----- - For each test case, print a line containing the maximum sum of non-adjacent elements. -----Constraints----- - 1 le T le 100 - 1 le N le 10^5 - -10^4 le text{sequence}[i] le 10^4 - The sum of N over all test cases does not exceed 10^6 -----Example Input----- 2 4 3 2 5 10 5 3 2 7 10 12 -----Example Output----- 13 22","solution":"def max_non_adjacent_sum(arr): Returns the maximum sum of non-adjacent elements in the sequence arr. if not arr: return 0 if len(arr) == 1: return max(0, arr[0]) max_excluding_prev = 0 max_including_prev = 0 for num in arr: new_max_including_prev = max_excluding_prev + num max_excluding_prev = max(max_excluding_prev, max_including_prev) max_including_prev = new_max_including_prev return max(max_including_prev, max_excluding_prev) def solve_max_non_adjacent_sums(test_cases): results = [] for N, sequence in test_cases: results.append(max_non_adjacent_sum(sequence)) return results"},{"question":"Your company is developing a system to manage employee tasks efficiently. Each task has a priority and needs to be executed in a particular order. As a programming task, you have to simulate the task scheduling system. You will perform several operations on the task list. There are p tasks to be managed and r operations to be performed. The operations can be of three types: 1. Add a task with priority y to the task list. 2. Remove a task with priority y from the task list. If no task with priority y exists, do nothing. 3. Query for the highest priority task currently in the task list. If the task list is empty, return -1. Please help in simulating this system. **Input:** The first line of input contains two integers p and r (1 ≤ p, r ≤ 200,000) — the number of tasks and the number of operations to be performed. The next r lines contain the operations. The i-th of these lines starts with an integer type_{i} — type of the i-th operation. If type_{i} = 1 or type_{i} = 2 then it is followed by an integer y_{i}. Otherwise it is followed by an integer t_{i} (1 ≤ type_{i} ≤ 3, 1 ≤ y_{i} ≤ p, 1 ≤ t_{i} ≤ r). **Output:** Print the result of the query operation (type 3) after each occurrence, if any. **Examples:** Input 5 7 1 3 1 1 3 0 2 3 1 2 3 0 1 5 Output 3 2 Input 3 5 1 2 2 2 3 0 1 1 3 0 Output -1 1 **Note:** In the first sample: - Add task with priority 3 (task list: [3]). - Add task with priority 1 (task list: [1, 3]). - Query for the highest priority task (highest priority is 3, output 3). - Remove task with priority 3 (task list: [1]). - Add task with priority 2 (task list: [1, 2]). - Query for the highest priority task (highest priority is 2, output 2). - Add task with priority 5 (task list: [1, 2, 5]). In the second sample: - Add task with priority 2 (task list: [2]). - Remove task with priority 2 (task list: []). - Query for the highest priority task (task list is empty, output -1). - Add task with priority 1 (task list: [1]). - Query for the highest priority task (highest priority is 1, output 1).","solution":"import heapq class TaskScheduler: def __init__(self): self.task_list = [] self.task_set = set() def add_task(self, y): if y not in self.task_set: heapq.heappush(self.task_list, -y) self.task_set.add(y) def remove_task(self, y): if y in self.task_set: self.task_set.remove(y) def query_highest_priority(self): while self.task_list and -self.task_list[0] not in self.task_set: heapq.heappop(self.task_list) if self.task_list: return -self.task_list[0] else: return -1 def simulate_task_scheduling(p, r, operations): scheduler = TaskScheduler() results = [] for operation in operations: if operation[0] == 1: scheduler.add_task(operation[1]) elif operation[0] == 2: scheduler.remove_task(operation[1]) elif operation[0] == 3: results.append(scheduler.query_highest_priority()) return results"},{"question":"Given a list of integers, write a function to determine the length of the longest substring without repeating characters. Example 1: input: \\"abcabcbb\\" output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Example 2: input: \\"bbbbb\\" output: 1 Explanation: The answer is \\"b\\", with the length of 1. Example 3: input: \\"pwwkew\\" output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. Note: You may assume the given string contains only lowercase English letters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_index_map = {} max_length, start = 0, 0 for end in range(n): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given an integer array `arr`, find and return the maximum product that can be obtained by multiplying any three distinct elements of the array. Implement a function: ```python def max_product_of_three(arr: List[int]) -> int: ``` # Arguments: - `arr` : A list of integers `arr` of length n where 3 ≤ n ≤ 10^4. The integers in the array can be both positive and negative. # Returns: - An integer representing the maximum product obtained by multiplying any three distinct elements from the array. # Examples: ```python max_product_of_three([1, 2, 3]) ----> 6 # (1*2*3) max_product_of_three([-10, -10, 5, 2]) ----> 500 # (-10*-10*5) max_product_of_three([1, 10, -5, 1, -100]) ----> 5000 # (10*-5*-100) ``` # Note: - Ensure your solution is efficient, as the function will be tested with arrays of large lengths.","solution":"from typing import List def max_product_of_three(arr: List[int]) -> int: Given an integer array `arr`, find and return the maximum product that can be obtained by multiplying any three distinct elements of the array. if len(arr) < 3: raise ValueError(\\"Array must contain at least three elements.\\") arr.sort() # The highest product of three integers could be either: # 1. Product of the three largest numbers # 2. Product of the two smallest (most negative) numbers and the largest number return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"The Dividing Game Alex is playing a game where he needs to divide a given number by one of its non-trivial divisors to get a new number. A non-trivial divisor of a number x is any divisor of x other than 1 and x itself. If such a divisor exists, Alex wins the game; otherwise, he loses. He needs your help to determine the result. To help Alex, you need to write a program that for each number checks if there is at least one non-trivial divisor. Input - The first line contains an integer T, the number of test cases. - The next T lines each contain a single integer n, representing the number to be checked. Output For each test case, output \\"WIN\\" (without the quotes) if there exists at least one non-trivial divisor of n, otherwise output \\"LOSE\\" (without the quotes). Constraints 1 <= T <= 10^5 2 <= n <= 10^12 Sample Input: 3 6 13 25 Sample Output: WIN LOSE WIN Explanation: - For the number 6, non-trivial divisors are 2 and 3, so Alex can win. - For the number 13, there are no non-trivial divisors, so Alex loses. - For the number 25, non-trivial divisors are 5, so Alex can win.","solution":"import math def can_win(number): if number <= 2: return \\"LOSE\\" for i in range(2, int(math.sqrt(number)) + 1): if number % i == 0: return \\"WIN\\" return \\"LOSE\\" def dividing_game(T, numbers): results = [] for num in numbers: results.append(can_win(num)) return results"},{"question":"Write a function that takes an integer array representing the amount of money in each house and determines the maximum amount of money you can rob tonight without alerting the police. The constraint is that adjacent houses have a connected security system, so robbing two directly adjacent houses will trigger an alarm. ```python max_rob([2, 3, 2]) => returns 3 max_rob([1, 2, 3, 1]) => returns 4 ``` Explanation: In the first case, the maximum amount of money you can rob is 3. The houses have the following amounts: [2, 3, 2]. If you rob the first house (amount = 2), you can\'t rob the second house (amount = 3). If you rob the second house (amount = 3), you can\'t rob the third house (amount = 2). The maximum money you can rob is 3. In the second case, the maximum amount of money you can rob is 4. The houses have the following amounts: [1, 2, 3, 1]. The optimal way is to rob the first house (amount = 1) and the third house (amount = 3). The total amount is 1 + 3 = 4. The function should handle all arrays with at least one element, and there will be no constraint checks for empty arrays needed.","solution":"def max_rob(nums): Determine the maximum amount of money that can be robbed tonight without triggering the alarm. :param nums: List[int] - The amount of money in each house. :return: int - The maximum amount of money that can be robbed. if not nums: return 0 if len(nums) == 1: return nums[0] if len(nums) == 2: return max(nums[0], nums[1]) def rob_linear(nums): prev1, prev2 = 0, 0 for num in nums: current = max(prev2 + num, prev1) prev2 = prev1 prev1 = current return prev1 return max(rob_linear(nums[:-1]), rob_linear(nums[1:]))"},{"question":"You are given an array of integers. Write a function to determine if it is possible to split the array into two subarrays such that the sum of the elements in both subarrays is the same. If possible, return `true`; otherwise, return `false`. For instance: - `canBeSplit([1, 5, 11, 5])` should return `true` because the array can be split into `[1, 5, 5]` and `[11]` which both have a sum of 11. - `canBeSplit([1, 2, 3, 5])` should return `false` because there is no way to split the array into two subarrays with equal sums. Note: - The array can have up to 200 elements. - Each element in the array can be an integer from 1 to 1000. Hints: - You may consider using dynamic programming to solve this problem. - Think about whether a similar problem, such as the partition problem, can provide insights into the solution.","solution":"def canBeSplit(nums): Determines if the array can be split into two subarrays such that the sum of the elements in both subarrays is the same. total_sum = sum(nums) # If the total sum is odd, it is not possible to split into two equal sum subarrays if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) # Create a DP array to keep track of possible sums dp = [False] * (target + 1) dp[0] = True # There is always a way to get sum 0: with an empty subset for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return dp[target]"},{"question":"Implement a function called `findLongestSubstring` that, given a string `s`, returns the length of the longest substring without repeating characters. For example, given the string `\\"abcabcbb\\"`, the function should return `3` because the longest substring without repeating characters is `\\"abc\\"`. Your solution should be efficient, aiming for a time complexity better than O(n^2). ```python def findLongestSubstring(s: str) -> int: # Your code goes here pass # Test cases print(findLongestSubstring(\\"abcabcbb\\")) #expected output: 3 print(findLongestSubstring(\\"bbbbb\\")) #expected output: 1 print(findLongestSubstring(\\"pwwkew\\")) #expected output: 3 print(findLongestSubstring(\\"\\")) #expected output: 0 print(findLongestSubstring(\\"dvdf\\")) #expected output: 3 ``` Requirements: 1. Name the function `findLongestSubstring`. 2. The function should take a single string argument. 3. The function should return an integer. 4. The implementation should aim to be efficient.","solution":"def findLongestSubstring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} max_length = 0 start = 0 for index, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = index max_length = max(max_length, index - start + 1) return max_length"},{"question":"Alice and Bob are playing a game using a grid of size N x N (1 ≤ N ≤ 1000). Initially, all the cells in the grid are empty. In each move, Alice places an \'A\' in one of the empty cells, and Bob places a \'B\' in one of the empty cells. The game continues until all cells are filled. Alice wants to maximize the Manhattan distance between her nearest \'A\' and any \'A\' she places on the grid, while Bob wants to minimize this distance for Alice. The Manhattan distance between two points (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2|. Given N, determine the maximum possible minimum Manhattan distance that Alice can ensure for her \'A\' placements on any N x N grid despite Bob\'s moves. -----Input----- The input consists of a single integer N representing the size of the grid. -----Output----- Output a single integer representing the maximum possible minimum Manhattan distance for Alice\'s \'A\' placements. -----Example----- Input: 5 Output: 2","solution":"def max_min_distance(N): Given the size of the grid, returns the maximum possible minimum Manhattan distance for Alice\'s \'A\' placements on any NxN grid despite Bob\'s moves. if N == 1: return 0 # Only one cell, distance is zero. if N % 2 == 0: return N // 2 else: return N // 2"},{"question":"Given a string `s`, you need to determine if you can rearrange the characters in `s` to form a palindrome. If possible, return `True`, otherwise return `False`. *Hint: A string can form a palindrome if at most one character occurs an odd number of times.* *Examples:* ```python # ex 1 s = \\"civic\\" can_form_palindrome(s) # => True ``` - The string \\"civic\\" can be rearranged to form a palindrome. ```python # ex 2 s = \\"ivicc\\" can_form_palindrome(s) # => True ``` - The string \\"ivicc\\" can be rearranged to form a palindrome. ```python # ex 3 s = \\"hello\\" can_form_palindrome(s) # => False ``` - The string \\"hello\\" cannot be rearranged to form a palindrome. Constraints **1 <= |s| <= 10^(5)**","solution":"from collections import Counter def can_form_palindrome(s): Determines if the characters in the string s can be rearranged to form a palindrome. :param s: A string :return: True if the string can be rearranged to form a palindrome, otherwise False # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"Liam is a software engineer who loves puzzles. Today, his task is to sort a list of integers. However, instead of sorting the entire list, he only needs to sort the odd numbers in the list while keeping the even numbers in their original positions. Your job is to help Liam by writing a function that takes a list of integers and returns a new list where all the odd numbers are sorted in ascending order but all even numbers are in their original positions. The ordering of the even numbers should not change. For example: - input: [5, 3, 2, 8, 1, 4] - output: [1, 3, 2, 8, 5, 4] Explanation: - The odd numbers are [5, 3, 1] which, when sorted, become [1, 3, 5]. - Even numbers [2, 8, 4] stay in their original positions. - Combining these gives [1, 3, 2, 8, 5, 4]. # Constraints: - The list will contain at least 1 and at most 100 integer values. - Each integer in the list will be between -1000 and 1000. Function signature: ```python def sort_odds(lst: List[int]) -> List[int]: pass ```","solution":"from typing import List def sort_odds(lst: List[int]) -> List[int]: # Extracting odd numbers and sorting them sorted_odds = sorted([x for x in lst if x % 2 != 0]) # Index to keep track of position in sorted_odds odd_index = 0 # Result list where sorted odd numbers and original even numbers are kept result = [] for x in lst: if x % 2 == 0: # If the number is even, we keep it in its original position result.append(x) else: # If the number is odd, we take the next sorted odd number result.append(sorted_odds[odd_index]) odd_index += 1 return result"},{"question":"Task **_Given_** *a string* , **_find_** *the length of the longest substring without repeating characters*. ____ # Notes * **_String_** size is *at least 1*. * **_String_** may contain *lowercase letters, uppercase letters, digits, and symbols*. ___ # Input >> Output Examples ``` longestUniqueSubstring(\\"abcabcbb\\"); ==> return 3 ``` **_Explanation_**: * **_The longest substring_** *without repeating characters has a length of* ` \\"abc\\" = 3 `. ___ ``` longestUniqueSubstring(\\"bbbbb\\"); ==> return 1 ``` **_Explanation_**: * **_The longest substring_** *without repeating characters has a length of* ` \\"b\\" = 1 `. ___ ``` longestUniqueSubstring(\\"pwwkew\\") ==> return 3 ``` **_Explanation_**: * **_The longest substring_** *without repeating characters has a length of* ` \\"wke\\" = 3 `, although ` \\"pwke\\" ` is also 3, the correct output is the maximal length. ___ ___ # [String Manipulation Series](https://www.codewars.com/collections/string-manipulation) ЗEnjoyַProgramming !!","solution":"def longestUniqueSubstring(s): Returns the length of the longest substring without repeating characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Sarah works as a software engineer and she\'s currently working on an optimization problem. She has a list of \'n\' tasks, each with a specific start and end time. She needs to figure out the minimum number of non-overlapping time intervals required to complete all tasks. A task is represented as a tuple (start, end) where \'start\' is the start time and \'end\' is the end time of the task. Two tasks (a, b) and (c, d) are said to be overlapping if there is any point in time that falls within both intervals. For example, tasks (1, 5) and (4, 8) are overlapping because they share the time point 4. Write a function `min_intervals(tasks: List[Tuple[int, int]]) -> int` which takes a list of tuples representing the tasks as input and returns the minimum number of non-overlapping time intervals required to complete all tasks. Your solution should be optimized for efficiency. -----Input----- The input to the function consists of a single argument: - `tasks`: a list of tuples, where each tuple (start, end) represents a task, and `0 <= start < end <= 10^6`. It is guaranteed that the list contains at most 1000 tasks. -----Output----- The function should return an integer representing the minimum number of non-overlapping time intervals required to complete all tasks. -----Example----- Input [(1, 3), (2, 5), (6, 9), (8, 10)] Output 2 Explanation We can pick intervals (1, 3) and (6, 9) to ensure all tasks are scheduled without any overlaps. Another possible solution is (2, 5) and (6, 9), which also requires 2 intervals.","solution":"from typing import List, Tuple def min_intervals(tasks: List[Tuple[int, int]]) -> int: if not tasks: return 0 # Sort tasks by ending time tasks.sort(key=lambda x: x[1]) count = 1 end_time = tasks[0][1] for i in range(1, len(tasks)): if tasks[i][0] >= end_time: count += 1 end_time = tasks[i][1] return count"},{"question":"Given a list of strings that represent the commands on a robot moving in a grid, determine the final position of the robot. The robot starts at the origin (0, 0) and follows each command in the list sequentially. Each command can be one of the following: - \\"LEFT\\": Move one unit to the left. - \\"RIGHT\\": Move one unit to the right. - \\"UP\\": Move one unit up. - \\"DOWN\\": Move one unit down. After processing all commands, return the final position of the robot as a tuple (x, y). Example 1: Input: commands = [\\"UP\\", \\"UP\\", \\"LEFT\\", \\"DOWN\\", \\"LEFT\\"] Output: (-2, 1) Explanation: Starting from (0, 0), the robot does the following: - Moves UP to (0, 1) - Moves UP to (0, 2) - Moves LEFT to (-1, 2) - Moves DOWN to (-1, 1) - Moves LEFT to (-2, 1) Final position is (-2, 1) Example 2: Input: commands = [\\"RIGHT\\", \\"RIGHT\\", \\"UP\\", \\"UP\\", \\"LEFT\\", \\"DOWN\\"] Output: (1, 1) Explanation: Starting from (0, 0), the robot does the following: - Moves RIGHT to (1, 0) - Moves RIGHT to (2, 0) - Moves UP to (2, 1) - Moves UP to (2, 2) - Moves LEFT to (1, 2) - Moves DOWN to (1, 1) Final position is (1, 1) Note: - The length of commands will be in the range [1, 100]. - Each command will be one of \\"LEFT\\", \\"RIGHT\\", \\"UP\\", or \\"DOWN\\".","solution":"def final_position(commands): Determine the final position of a robot given a list of commands. Parameters: commands (list): A list of strings which can be \\"LEFT\\", \\"RIGHT\\", \\"UP\\", \\"DOWN\\". Returns: tuple: A tuple (x, y) representing the final position on the grid. x, y = 0, 0 for command in commands: if command == \\"LEFT\\": x -= 1 elif command == \\"RIGHT\\": x += 1 elif command == \\"UP\\": y += 1 elif command == \\"DOWN\\": y -= 1 return (x, y)"},{"question":"You are given an array of integers and a target integer. Your task is to determine if there are three distinct elements in the array that sum up to the target integer. If such a combination exists, return the combination as a tuple of three integers in non-decreasing order. If there are multiple combinations, return the first one found in lexicographical order. If no such combination exists, return an empty tuple. For example: ``` solve(arr, target) ``` Examples: ```python solve([1, 2, 3, 4, 6], 10) => (1, 3, 6) solve([5, -1, 2, 10, 3], 7) => (-1, 3, 5) solve([1, 2, 3], 7) => () ``` Important notes: - The length of the array will not exceed 1000. - All array elements will be integers between -10^6 to 10^6.","solution":"def solve(arr, target): arr.sort() n = len(arr) for i in range(n): left = i + 1 right = n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return (arr[i], arr[left], arr[right]) elif current_sum < target: left += 1 else: right -= 1 return ()"},{"question":"You are given a list containing names of various books and their publication years in the format `[\\"Title - Year\\", ...]`. Your task is to determine if the list contains all books published in a given range of consecutive years. Each year in the specified range must be covered by at least one book in the list. Output \\"All years covered\\" if the condition is met; otherwise, output \\"Missing years\\". Example: ``` books = [\\"Moby Dick - 1851\\", \\"To Kill a Mockingbird - 1960\\", \\"1984 - 1949\\", \\"Catcher in the Rye - 1951\\"] years = [1949, 1951, 1960] ``` Since each year in the specified range of years appears in the list, it should return \\"All years covered\\". Here\'s another example: ``` books = [\\"War and Peace - 1869\\", \\"Les Misérables - 1862\\", \\"Catch-22 - 1961\\"] years = [1862, 1869, 1961, 1925] ``` In this case, since the year 1925 is not in the list, it should return \\"Missing years\\".","solution":"def check_years_covered(books, years): This function checks if all provided years are covered in the list of books. :param books: List of books with titles and years in the format \\"Title - Year\\". :param years: List of years to check for coverage. :return: \\"All years covered\\" if all years are covered by the books, otherwise \\"Missing years\\". years_covered = set() for book in books: title, year = book.rsplit(\\" - \\", 1) years_covered.add(int(year)) for year in years: if year not in years_covered: return \\"Missing years\\" return \\"All years covered\\""},{"question":"Task Given a **list of integers**, write a function to return a new list consisting of all prime numbers from the original list. The order of the prime numbers in the returned list should be the same as their order in the input list. # Notes: * A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. * The input list may contain both positive and negative integers. * If there are no prime numbers in the input list, return an empty list. # Input >> Output Examples ``` filterPrimes([1, 3, 4, 7, 10]) ==> return [3, 7] ``` Explanation: **_[3, 7]_** are the only prime numbers present in the input list **_[1, 3, 4, 7, 10]_**. ``` filterPrimes([-1, -3, 0, 2, 4]) ==> return [2] ``` Explanation: **_[2]_** is the only prime number present in the input list **_[-1, -3, 0, 2, 4]_**. ``` filterPrimes([12, 15, 18, 19, 23]) ==> return [19, 23] ``` Explanation: **_[19, 23]_** are the only prime numbers present in the input list **_[12, 15, 18, 19, 23]_**.","solution":"def is_prime(num): Determine if a number num is a prime number. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def filter_primes(lst): Given a list of integers, return a new list consisting of all prime numbers from the original list. return [num for num in lst if is_prime(num)]"},{"question":"You are developing a feature that filters and formats email addresses based on a certain domain. Write a function that takes a list of email addresses and a domain. The function should return a list of email addresses that belong to the specified domain, formatted in lowercase. **Examples:** ```python filter_emails([\\"John.Doe@example.com\\", \\"Jane.Smith@test.com\\", \\"foo@bar.com\\"], \\"example.com\\") # => [\\"john.doe@example.com\\"] filter_emails([\\"Alice@example.com\\", \\"bob@Example.com\\", \\"charlie@test.com\\"], \\"example.com\\") # => [\\"alice@example.com\\", \\"bob@example.com\\"] filter_emails([\\"Foo@bar.com\\", \\"Bar@foo.com\\"], \\"baz.com\\") # => [] ```","solution":"def filter_emails(emails, domain): Filters and formats email addresses based on a specified domain. Parameters: emails (list of str): The list of email addresses. domain (str): The domain to filter by. Returns: list of str: The filtered and formatted list of email addresses. domain = domain.lower() filtered_emails = [email.lower() for email in emails if email.split(\'@\')[1].lower() == domain] return filtered_emails"},{"question":"Write a function that takes an integer `n` and returns a list of the first `n` numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: the first two numbers are 0 and 1, and each subsequent number is the sum of the previous two. # Example ```python fibonacci_sequence(5) # Should return [0, 1, 1, 2, 3] fibonacci_sequence(10) # Should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] ``` # Constraints - The input `n` will be a non-negative integer not greater than 100. # Notes - If `n` is 0, return an empty list. - The solution should be optimized to handle large values of `n` efficiently.","solution":"def fibonacci_sequence(n): Returns the first n numbers in the Fibonacci sequence. Parameters: n (int): The number of Fibonacci numbers to generate Returns: list: A list containing the first n numbers in the Fibonacci sequence if n == 0: return [] elif n == 1: return [0] sequence = [0, 1] for i in range(2, n): next_value = sequence[-1] + sequence[-2] sequence.append(next_value) return sequence"},{"question":"You are given a grid with N rows and M columns. Each cell of the grid contains an integer. You are allowed to perform a certain operation any number of times: select a sub-grid, in which all values on the border are greater than or equal to the values inside the sub-grid, then increase all values inside this sub-grid by 1 (values on the border remain unchanged). You need to determine whether it is possible to make all cells of the grid equal using the given operation. -----Input----- - The first line of input consists of an integer T, the number of test cases. - Each test case begins with a line containing two integers, N (number of rows) and M (number of columns). - The next N lines contain M space-separated integers each, describing the grid. -----Output----- For each test case, output a single line \\"YES\\" if it is possible to make all cells equal, or \\"NO\\" otherwise. -----Constraints----- - 1 le T le 100 - 1 le N, M le 50 - 1 le value in each cell le 100 -----Example Input----- 3 2 2 1 2 3 1 3 3 1 2 3 2 3 4 3 4 5 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 4 4 3 -----Example Output----- YES YES NO","solution":"def can_make_all_cells_equal(grid): N = len(grid) M = len(grid[0]) target = grid[0][0] for row in grid: for value in row: if value != target: return \\"NO\\" return \\"YES\\" def solve(test_cases): results = [] for grid in test_cases: results.append(can_make_all_cells_equal(grid)) return results # Read input def read_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] idx = 1 for _ in range(T): N, M = map(int, input_lines[idx].split()) grid = [] idx += 1 for _ in range(N): row = list(map(int, input_lines[idx].split())) grid.append(row) idx += 1 test_cases.append(grid) return test_cases def main(input_string): test_cases = read_input(input_string) results = solve(test_cases) return \\"n\\".join(results)"},{"question":"Merlin is a brilliant wizard who loves numbers but sometimes finds it difficult to balance his spell books and his love for mathematics. One day, he came upon an array of integers and decided to use his magic to calculate the maximum sum of a subsequence in the array. However, to make it more interesting, he added a twist: the sum of no two consecutive elements should be considered. Your task is to assist Merlin in determining the maximum sum he can obtain from a non-consecutive subsequence of the array. -----Input----- The first line contains a single integer n (1 leq n leq 300,000), the number of integers in the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9) — the given array. -----Output----- Output one integer, the maximum sum of a non-consecutive subsequence. -----Example----- Input 5 3 2 7 10 12 Output 22 -----Note----- In the first example, the optimal non-consecutive subsequence is [3, 7, 12] which sums up to 22. The subsequence [2, 10] also gives a sum of 12 but it is not the maximum among the possible options.","solution":"def max_non_consecutive_sum(n, arr): Returns the maximum sum of a non-consecutive subsequence in the array. if n == 0: return 0 if n == 1: return max(0, arr[0]) dp = [0] * n dp[0] = max(0, arr[0]) for i in range(1, n): dp[i] = max(dp[i-1], arr[i] + (dp[i-2] if i > 1 else 0)) return dp[-1]"},{"question":"You are given a binary tree with its root node. Your task is to determine the minimum depth of the tree. The minimum depth of a binary tree is defined as the number of nodes along the shortest path from the root node down to the nearest leaf node. A leaf node is a node with no children. Write a function `minDepth(root)` that computes the minimum depth of the binary tree. # Input - The input is a binary tree `root` represented by a TreeNode class. - The TreeNode class is given as: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` # Output - Return an integer representing the minimum depth of the tree. # Examples Example 1: ```python root = TreeNode(3) root.left = TreeNode(9) root.right = TreeNode(20) root.right.left = TreeNode(15) root.right.right = TreeNode(7) print(minDepth(root)) # Output: 2 ``` Example 2: ```python root = TreeNode(1) root.left = TreeNode(2) print(minDepth(root)) # Output: 2 ``` Note: - The binary tree will have at most `10^5` nodes. - Each node\'s value is an integer between `-10^5` to `10^5`. - The input will have genes with `n` nodes, where the maximum value of `n` will be `10^5`.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def minDepth(root): if root is None: return 0 # If left subtree is Null, check right subtree if root.left is None: return minDepth(root.right) + 1 # If right subtree is Null , check left subtree if root.right is None: return minDepth(root.left) + 1 # If none of the subtree is Null, check both subtrees return min(minDepth(root.left), minDepth(root.right)) + 1"}]'),F={name:"App",components:{PoemCard:O},data(){return{searchQuery:"",visibleCount:4,poemsData:N,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},C={class:"card-container"},j={key:0,class:"empty-state"},R=["disabled"],Y={key:0},z={key:1};function L(r,e,l,m,a,s){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[_,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",C,[(n(!0),i(y,null,w(s.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),s.displayedPoems.length===0?(n(),i("div",j,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),s.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>s.loadMore&&s.loadMore(...o))},[a.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",Y,"See more"))],8,R)):u("",!0)])}const D=d(F,[["render",L],["__scopeId","data-v-c4467a6d"]]),W=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/9.md","filePath":"chatai/9.md"}'),P={name:"chatai/9.md"},B=Object.assign(P,{setup(r){return(e,l)=>(n(),i("div",null,[x(D)]))}});export{W as __pageData,B as default};
